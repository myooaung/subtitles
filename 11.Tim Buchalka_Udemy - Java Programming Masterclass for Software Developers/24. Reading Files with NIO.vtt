WEBVTT
1
1

00:00:05.630  -->  00:00:06.780
- [Instructor] In the last video,
2

2

00:00:06.780  -->  00:00:10.950
we used java dot NIO to write
data to a data dot dat file.
3

3

00:00:12.110  -->  00:00:15.380
Now we're gonna read that data
back into the application.
4

4

00:00:15.380  -->  00:00:17.420
Now we're going to use java dot NIO,
5

5

00:00:17.420  -->  00:00:19.780
but we'll start off using java dot IO
6

6

00:00:19.780  -->  00:00:21.990
to accomplish this reading of the data
7

7

00:00:21.990  -->  00:00:23.680
back into the application.
8

8

00:00:23.680  -->  00:00:25.480
Now a file that's just a file,
9

9

00:00:25.480  -->  00:00:27.510
it doesn't matter how it was written
10

10

00:00:27.510  -->  00:00:30.040
so we use java dot IO to write a file
11

11

00:00:30.040  -->  00:00:33.350
and java dot NIO to
read it and vice versa.
12

12

00:00:33.350  -->  00:00:34.670
That really doesn't matter.
13

13

00:00:34.670  -->  00:00:36.950
So let's look at the code we used
14

14

00:00:36.950  -->  00:00:39.260
to write the data to the file.
15

15

00:00:39.260  -->  00:00:43.180
First, we started off by
using the write method
16

16

00:00:44.030  -->  00:00:45.750
to write a series of bytes out
17

17

00:00:45.750  -->  00:00:48.210
for our hello world byte array.
18

18

00:00:48.210  -->  00:00:52.100
And, if you recall when you
use methods such as write UTF,
19

19

00:00:52.100  -->  00:00:55.600
the length of the string is
written before the string itself
20

20

00:00:55.600  -->  00:00:58.220
so that when the read UTF method's called,
21

21

00:00:58.220  -->  00:01:00.890
the method knows how many bytes to read.
22

22

00:01:00.890  -->  00:01:02.530
Now you didn't write the string length
23

23

00:01:02.530  -->  00:01:05.150
because this is just a simple demo app.
24

24

00:01:05.150  -->  00:01:06.460
After the strength, we followed on
25

25

00:01:06.460  -->  00:01:09.310
by writing the integer 245,
26

26

00:01:09.310  -->  00:01:12.970
which we defined on line
21 and wrote on line 23,
27

27

00:01:12.970  -->  00:01:15.130
and then finally we wrote the integer
28

28

00:01:15.130  -->  00:01:18.290
we defined on line 27, negative 98765,
29

29

00:01:19.160  -->  00:01:22.430
and then wrote it with a code on line 29.
30

30

00:01:22.430  -->  00:01:24.740
So now that we've done
that, let's actually use
31

31

00:01:24.740  -->  00:01:27.860
the java dot IO dot
random access file class
32

32

00:01:27.860  -->  00:01:29.710
to read in this data.
33

33

00:01:29.710  -->  00:01:31.540
Now we're gonna use the
same project, as you can see
34

34

00:01:31.540  -->  00:01:33.820
that I've got open this last time,
35

35

00:01:33.820  -->  00:01:36.750
and we're just going to add
more code into the main method.
36

36

00:01:36.750  -->  00:01:37.890
And we're going to add it into
37

37

00:01:37.890  -->  00:01:40.090
the trial three sources block.
38

38

00:01:40.090  -->  00:01:41.540
I'm going to clean out all of this code
39

39

00:01:41.540  -->  00:01:45.290
that was commented out
from a previous video.
40

40

00:01:47.880  -->  00:01:50.110
Alright, so we're going to start here
41

41

00:01:50.110  -->  00:01:52.410
with defining our random access file.
42

42

00:01:52.410  -->  00:01:56.170
So random access file RA is equal to
43

43

00:01:56.170  -->  00:02:00.330
new random access file, the
file name being data dot DAT.
44

44

00:02:03.250  -->  00:02:06.290
And the mode, we're going to do RWD,
45

45

00:02:06.290  -->  00:02:08.660
as we've discussed previously.
46

46

00:02:08.660  -->  00:02:11.300
Next, we're going to
define a new byte array
47

47

00:02:11.300  -->  00:02:14.410
that's gonna contain
the data we're reading.
48

48

00:02:14.410  -->  00:02:17.250
So, byte array B, equals new byte,
49

49

00:02:19.740  -->  00:02:23.560
and we're going to define
the number of bytes
50

50

00:02:23.560  -->  00:02:27.730
based on the byte array link
that we defined on line 16.
51

51

00:02:28.790  -->  00:02:31.490
So we can just use new byte
and then square brackets
52

52

00:02:31.490  -->  00:02:34.170
output bytes dot length.
53

53

00:02:34.170  -->  00:02:35.250
So we're getting the right length
54

54

00:02:35.250  -->  00:02:39.120
for the hello world text
there to our byte array.
55

55

00:02:39.120  -->  00:02:41.870
And then we're going to the
us the RA dot read method
56

56

00:02:41.870  -->  00:02:43.600
and pass the parameter of B,
57

57

00:02:43.600  -->  00:02:46.560
so that what we read is
going into the byte array.
58

58

00:02:46.560  -->  00:02:48.030
Then let's just do a proof of concept
59

59

00:02:48.030  -->  00:02:51.940
by printing out a new
string, B, which converts
60

60

00:02:53.170  -->  00:02:55.020
the byte array to a string, and we should
61

61

00:02:55.020  -->  00:02:57.360
be able to see that on our console.
62

62

00:02:57.360  -->  00:02:59.930
So if you try that first,
we should get a printout,
63

63

00:02:59.930  -->  00:03:03.060
showing it, showing us rather,
that we've run it okay,
64

64

00:03:03.060  -->  00:03:04.650
and you can see we got
hello world, showing there
65

65

00:03:04.650  -->  00:03:07.430
on the screen, after the number
of bytes that were written,
66

66

00:03:07.430  -->  00:03:11.940
so clearly that's worked
okay, so, so far so good.
67

67

00:03:11.940  -->  00:03:16.240
So next, what we need to do is, we need to
68

68

00:03:16.240  -->  00:03:18.300
read in the two integers.
69

69

00:03:18.300  -->  00:03:21.970
To do that, we're gonna
to a long, int one,
70

70

00:03:21.970  -->  00:03:23.890
equals RA dot read int.
71

71

00:03:25.330  -->  00:03:28.910
Then long, int two,
equals RA dot read int,
72

72

00:03:30.800  -->  00:03:34.960
and let's print them both
out, so int one, int two.
73

73

00:03:36.800  -->  00:03:39.720
Let's try that, make sure it works.
74

74

00:03:41.520  -->  00:03:44.490
Alright, so you can see,
we got the numeric results,
75

75

00:03:44.490  -->  00:03:46.410
245 and negative 98765.
76

76

00:03:48.310  -->  00:03:50.370
So really nothing remarkable here,
77

77

00:03:50.370  -->  00:03:51.570
we've used the random access folder,
78

78

00:03:51.570  -->  00:03:55.150
read int methods on lines 38 and 39,
79

79

00:03:55.150  -->  00:03:57.280
to retrieve our integers.
80

80

00:03:57.280  -->  00:03:59.390
Now it's okay to write the data every
81

81

00:03:59.390  -->  00:04:01.720
time you run the main method.
82

82

00:04:01.720  -->  00:04:04.490
Okay, you've demonstrated
that data you wrote
83

83

00:04:04.490  -->  00:04:06.610
is indeed what ended up in the file.
84

84

00:04:06.610  -->  00:04:08.510
We demonstrated that by
being able to retrieve it
85

85

00:04:08.510  -->  00:04:11.090
and seeing the results on screen.
86

86

00:04:11.090  -->  00:04:12.880
And that also confirms that the package
87

87

00:04:12.880  -->  00:04:14.910
you use to write a file doesn't matter.
88

88

00:04:14.910  -->  00:04:16.940
In other words, there's
no association formed
89

89

00:04:16.940  -->  00:04:20.180
between the file and the package.
90

90

00:04:20.180  -->  00:04:22.610
You can use a different RA
package to read the file,
91

91

00:04:22.610  -->  00:04:24.340
or a different application,
written in something
92

92

00:04:24.340  -->  00:04:26.480
other than java for that
matter, and that will
93

93

00:04:26.480  -->  00:04:28.930
work just fine when we
come back to reading it.
94

94

00:04:28.930  -->  00:04:30.680
Alright, so again, as I
mentioned, we're using
95

95

00:04:30.680  -->  00:04:33.790
the random dot access
file class, which is part
96

96

00:04:33.790  -->  00:04:35.290
of the IO package.
97

97

00:04:36.200  -->  00:04:40.780
What we're gonna do now is read
the file using java dot NIA.
98

98

00:04:40.780  -->  00:04:43.270
So for now, let's comment out that code
99

99

00:04:43.270  -->  00:04:45.180
that we just used to retrieve,
100

100

00:04:45.180  -->  00:04:48.380
retrieve it via the
random access file class,
101

101

00:04:48.380  -->  00:04:49.420
leave it commented there saying you've
102

102

00:04:49.420  -->  00:04:53.170
got access to that code, and
let's do the equivalent thing,
103

103

00:04:53.170  -->  00:04:55.430
this time using java dot NIO.
104

104

00:04:55.430  -->  00:04:57.970
So we actually start with
a random access file again,
105

105

00:04:57.970  -->  00:04:59.650
but I've left that code
commented out so it's,
106

106

00:04:59.650  -->  00:05:02.290
we've got an entire block of
code there that's accurate.
107

107

00:05:02.290  -->  00:05:06.280
So random access file, RA
equals, new random access file.
108

108

00:05:06.280  -->  00:05:09.530
We'll need that starting code again.
109

109

00:05:09.530  -->  00:05:11.960
And set the mode to RWD again,
110

110

00:05:11.960  -->  00:05:14.540
then now let's actually define a channel.
111

111

00:05:14.540  -->  00:05:18.620
File channel, and file
channels of NIO as you can see,
112

112

00:05:18.620  -->  00:05:21.400
are from the NIO package.
113

113

00:05:21.400  -->  00:05:24.230
Channel equals RA dot get channel.
114

114

00:05:26.100  -->  00:05:27.560
And we're gonna use
existing the buffers to
115

115

00:05:27.560  -->  00:05:30.100
read the data back into the application.
116

116

00:05:30.100  -->  00:05:32.440
Firstly the string that
we're going to create
117

117

00:05:32.440  -->  00:05:35.850
a new variable here, long num bytes read,
118

118

00:05:37.550  -->  00:05:40.300
equals channel, dot read, buffer.
119

119

00:05:46.350  -->  00:05:48.420
And we can see, we're writing
back into our byte buffer
120

120

00:05:48.420  -->  00:05:52.040
buffer here, that we defined on line 17.
121

121

00:05:52.040  -->  00:05:53.930
So after this call the string, we'll be in
122

122

00:05:53.930  -->  00:05:56.960
the variable buffer,
which we used to write out
123

123

00:05:56.960  -->  00:05:58.260
the string earlier in the main method
124

124

00:05:58.260  -->  00:05:59.650
as I just pointed out.
125

125

00:05:59.650  -->  00:06:01.490
Again that's on line 17.
126

126

00:06:01.490  -->  00:06:02.800
But at least the definition for the buffer
127

127

00:06:02.800  -->  00:06:07.010
is on line 17, we actually
wrote it out, on line 18.
128

128

00:06:07.010  -->  00:06:09.900
Now to print this string, we
need access the byte array
129

129

00:06:09.900  -->  00:06:11.420
back in the buffer.
130

130

00:06:11.420  -->  00:06:15.500
Now in this case, there's
actually two ways to get at it.
131

131

00:06:15.500  -->  00:06:17.110
Firstly, if you recall that when we called
132

132

00:06:17.110  -->  00:06:20.630
the wrap method, the byte array
would pass as a parameter,
133

133

00:06:20.630  -->  00:06:24.560
is used to back the
buffer, so after the read,
134

134

00:06:24.560  -->  00:06:28.680
the string should be in the
output bytes, byte array,
135

135

00:06:28.680  -->  00:06:31.410
and this is the byte array
we defined on line 16.
136

136

00:06:31.410  -->  00:06:33.530
And I'm talk about this wrap function here
137

137

00:06:33.530  -->  00:06:35.970
on line 17 that was called.
138

138

00:06:35.970  -->  00:06:38.410
So let's see if that's
true, that does happen,
139

139

00:06:38.410  -->  00:06:40.930
but first, are we forgetting something?
140

140

00:06:40.930  -->  00:06:42.810
What do we have to do
before switching from
141

141

00:06:42.810  -->  00:06:44.490
writing to reading?
142

142

00:06:44.490  -->  00:06:47.060
Well we should call the flip method.
143

143

00:06:47.060  -->  00:06:48.330
But let's actually see what happens if
144

144

00:06:48.330  -->  00:06:51.270
we don't call it, we're
going to, at this state
145

145

00:06:51.270  -->  00:06:54.680
we're now to print the
output buffer, parable.
146

146

00:06:54.680  -->  00:06:57.720
So I'm gonna do that after
the call to channel dot read,
147

147

00:06:57.720  -->  00:06:59.100
on line 35.
148

148

00:06:59.100  -->  00:07:02.760
So we're doing output, and we'll call it,
149

149

00:07:02.760  -->  00:07:05.430
we'll say output, bytes, equals,
150

150

00:07:06.330  -->  00:07:08.830
plus new string, output bytes.
151

151

00:07:11.820  -->  00:07:16.020
So if we try to run this
now, let's see what happens.
152

152

00:07:16.020  -->  00:07:18.170
Alright, so we see the expected string,
153

153

00:07:18.170  -->  00:07:20.580
hello world's showing, in the console,
154

154

00:07:20.580  -->  00:07:23.230
but this is actually
deceiving, and that's because
155

155

00:07:23.230  -->  00:07:26.810
the output bytes byte
array, already contained
156

156

00:07:26.810  -->  00:07:29.440
hello world, from when
wrote the file originally,
157

157

00:07:29.440  -->  00:07:32.260
and because we didn't
call flip, the read method
158

158

00:07:32.260  -->  00:07:36.430
that we called, here on line
35, didn't actually do anything
159

159

00:07:37.730  -->  00:07:39.280
and that's because the buffer's position
160

160

00:07:39.280  -->  00:07:41.520
was actually at the end of the buffer.
161

161

00:07:41.520  -->  00:07:43.800
So to demonstrate this, we're
gonna change the contents
162

162

00:07:43.800  -->  00:07:47.740
of the output bytes array,
before we do the read.
163

163

00:07:47.740  -->  00:07:49.110
So let's just go ahead
and just put a couple
164

164

00:07:49.110  -->  00:07:52.470
of changes there, so
I'll put, output bytes
165

165

00:07:52.470  -->  00:07:55.640
then zero in square brackets equals A,
166

166

00:07:57.040  -->  00:07:59.620
then output bytes one equals B,
167

167

00:08:02.420  -->  00:08:04.480
and actually that should've been before
168

168

00:08:04.480  -->  00:08:06.480
our call to read, so I'm just going to,
169

169

00:08:06.480  -->  00:08:09.040
cut it out of there and put it in before.
170

170

00:08:09.040  -->  00:08:11.800
So that's after the RA dot read channel,
171

171

00:08:11.800  -->  00:08:13.360
but before the channel dot read,
172

172

00:08:13.360  -->  00:08:14.760
so I'm gonna put it in there.
173

173

00:08:14.760  -->  00:08:19.440
Alright, and now we're
going to run this again,
174

174

00:08:19.440  -->  00:08:22.550
and you can see we've now got
A, B, LLO world now showing,
175

175

00:08:22.550  -->  00:08:24.630
which is representative of the fact that
176

176

00:08:24.630  -->  00:08:28.550
we changed the output
bytes variable on line 35
177

177

00:08:29.780  -->  00:08:32.400
and lines 36, they list
the first two elements
178

178

00:08:32.400  -->  00:08:34.330
of the byte array.
179

179

00:08:34.330  -->  00:08:36.620
So what should've happened is, when
180

180

00:08:36.620  -->  00:08:39.160
we read this buffer,
we've actually saved this
181

181

00:08:39.160  -->  00:08:42.560
as hello world, and that's
what's been saved to the file.
182

182

00:08:42.560  -->  00:08:45.390
So we've actually changed
the buffer, in memory,
183

183

00:08:45.390  -->  00:08:47.970
to AB as the first two characters there,
184

184

00:08:47.970  -->  00:08:50.380
as the first two charters
you can see there,
185

185

00:08:50.380  -->  00:08:52.240
so the read to the read buffer,
186

186

00:08:52.240  -->  00:08:54.740
should've actually replaced
that with hello world again,
187

187

00:08:54.740  -->  00:08:57.040
so clearly that confirms
that the read method
188

188

00:08:57.040  -->  00:08:58.830
isn't being called correctly.
189

189

00:08:58.830  -->  00:09:01.430
Or rather, it is being
called, but not actually
190

190

00:09:01.430  -->  00:09:04.200
returning what we think
it should be returning.
191

191

00:09:04.200  -->  00:09:06.320
So now to demonstrate this further,
192

192

00:09:06.320  -->  00:09:08.830
let's add a call to
flip, and we'll do that
193

193

00:09:08.830  -->  00:09:12.570
after those two definitions,
on line 35 and 36.
194

194

00:09:12.570  -->  00:09:16.730
So we'll do buffer dot flip,
and we'll run that again.
195

195

00:09:20.640  -->  00:09:22.030
And this time you can see we've now got
196

196

00:09:22.030  -->  00:09:23.790
the expected results.
197

197

00:09:23.790  -->  00:09:25.840
We're seeing hello world
printed to the console,
198

198

00:09:25.840  -->  00:09:27.880
even though we changed the byte array,
199

199

00:09:27.880  -->  00:09:31.480
on line 35 and 36, but
then of course we should've
200

200

00:09:31.480  -->  00:09:34.080
got hello world showing
because we wrote that out
201

201

00:09:34.080  -->  00:09:37.250
originally on line 18, and
now that we've done this,
202

202

00:09:37.250  -->  00:09:40.530
introduced the call to
flip, the read method
203

203

00:09:40.530  -->  00:09:42.920
is successfully able
to read that byte array
204

204

00:09:42.920  -->  00:09:45.930
back in, and we're getting
hello world printed.
205

205

00:09:45.930  -->  00:09:48.900
The bottom line, always remember
to call the flip method.
206

206

00:09:48.900  -->  00:09:52.160
Now it unfortunately so
easy to skip this step,
207

207

00:09:52.160  -->  00:09:53.740
and this is one reason why many developers
208

208

00:09:53.740  -->  00:09:56.760
aren't really all that
keen on using java dot NIO,
209

209

00:09:56.760  -->  00:09:59.140
to do IO for their files.
210

210

00:09:59.140  -->  00:10:01.810
Now there is another way to
get the string from the buffer.
211

211

00:10:01.810  -->  00:10:04.620
We could call the byte
buffer dot array method,
212

212

00:10:04.620  -->  00:10:07.830
which returns the byte
array, backing the buffer.
213

213

00:10:07.830  -->  00:10:09.920
Now, to do that, it's
actually good practise
214

214

00:10:09.920  -->  00:10:12.360
to call the byte buffer
dot has array method
215

215

00:10:12.360  -->  00:10:14.700
before doing that to ensure that you can
216

216

00:10:14.700  -->  00:10:17.700
access the byte buffer backing the array.
217

217

00:10:17.700  -->  00:10:19.680
So let's add the code
to get the byte array
218

218

00:10:19.680  -->  00:10:21.350
using this second way of doing it.
219

219

00:10:21.350  -->  00:10:24.630
So after the read, what we're going to do,
220

220

00:10:24.630  -->  00:10:26.720
we'll just comment that line out for now,
221

221

00:10:26.720  -->  00:10:30.130
and we'll put, if buffer, dot, has array,
222

222

00:10:32.260  -->  00:10:35.260
then we're going to do, printout of,
223

223

00:10:36.340  -->  00:10:39.420
output to be byte buffer, is equal to,
224

224

00:10:39.420  -->  00:10:43.500
plus new string, then
we'll do buffer, dot array.
225

225

00:10:45.890  -->  00:10:49.680
We'll just demonstrate then
see that that still works.
226

226

00:10:49.680  -->  00:10:51.030
We've still got hello world printing out,
227

227

00:10:51.030  -->  00:10:52.950
so that's working okay.
228

228

00:10:54.880  -->  00:10:58.520
Okay, so what I'll do is,
now read the two integers,
229

229

00:10:58.520  -->  00:11:01.480
using the existing buffer instance.
230

230

00:11:01.480  -->  00:11:06.320
So to do that we're going to
type int, buffer dot flip.
231

231

00:11:06.320  -->  00:11:10.040
Then we're gonna do num
bytes read, is equal to
232

232

00:11:10.040  -->  00:11:12.450
channel dot read, int buffer.
233

233

00:11:15.370  -->  00:11:18.370
And then int buffer, dot flip again,
234

234

00:11:19.400  -->  00:11:22.450
and we're gonna do a
print out, int buffer,
235

235

00:11:22.450  -->  00:11:26.650
dot get int, then we need to do int buffer
236

236

00:11:26.650  -->  00:11:30.570
dot flip again, and num
bytes read is equal to,
237

237

00:11:32.000  -->  00:11:36.160
channel dot read, int
buffer, int buffer dot flip,
238

238

00:11:39.670  -->  00:11:43.340
and we need to printout,
int buffer dot int.
239

239

00:11:45.320  -->  00:11:47.000
And the other thing we
should really be doing,
240

240

00:11:47.000  -->  00:11:50.620
is closing the channel and
file after reading the data,
241

241

00:11:50.620  -->  00:11:51.650
and that's because we didn't use
242

242

00:11:51.650  -->  00:11:54.070
the try with resources
statement to open them.
243

243

00:11:54.070  -->  00:11:57.410
So we need to do channel, dot close,
244

244

00:11:57.410  -->  00:12:02.230
and also, random access file
object dot close as well.
245

245

00:12:02.230  -->  00:12:06.130
And we'll just run this to
make sure that it does work.
246

246

00:12:06.130  -->  00:12:09.710
And we get our two
integers, the number 245
247

247

00:12:11.140  -->  00:12:12.720
and negative 98765.
248

248

00:12:14.280  -->  00:12:17.370
But we had to flip between
each access of the buffer,
249

249

00:12:17.370  -->  00:12:21.040
and just to confirm the recall,
actually writes the buffer,
250

250

00:12:21.040  -->  00:12:23.270
and then the get int
method, reads the buffer
251

251

00:12:23.270  -->  00:12:24.870
if that makes sense.
252

252

00:12:24.870  -->  00:12:27.930
Now to avoid calling
flip, you can use another
253

253

00:12:27.930  -->  00:12:30.050
version of the get int method.
254

254

00:12:30.050  -->  00:12:32.890
When you don't pass any
parameters as we're doing here,
255

255

00:12:32.890  -->  00:12:35.580
our call to get int on line 45,
256

256

00:12:35.580  -->  00:12:38.330
and also on lines 49, or line 49,
257

257

00:12:39.710  -->  00:12:41.170
if you do that without any parameters,
258

258

00:12:41.170  -->  00:12:43.830
then the read begins at the
buffer's current position,
259

259

00:12:43.830  -->  00:12:46.490
but instead you can pass
an index to get int,
260

260

00:12:46.490  -->  00:12:48.370
and when you do that, the read will begin
261

261

00:12:48.370  -->  00:12:50.480
at the index that you passed.
262

262

00:12:50.480  -->  00:12:53.130
So the first type of reads
based on the buffer's position
263

263

00:12:53.130  -->  00:12:56.080
is called a relative read,
the second type of read
264

264

00:12:56.080  -->  00:12:57.830
is called an absolute read.
265

265

00:12:57.830  -->  00:13:00.130
So we're doing obviously
a relative read here
266

266

00:13:00.130  -->  00:13:02.420
because we're not passing any parameters,
267

267

00:13:02.420  -->  00:13:05.240
but let's now change the
code so we can pass zero
268

268

00:13:05.240  -->  00:13:07.230
to the get int calls,
and get rid of one of
269

269

00:13:07.230  -->  00:13:09.020
the flip calls for each method.
270

270

00:13:09.020  -->  00:13:12.150
So what I'm going to do
here, just to make it clear,
271

271

00:13:12.150  -->  00:13:13.280
I'm going to comment this code out
272

272

00:13:13.280  -->  00:13:15.530
so you've got a copy of it.
273

273

00:13:16.660  -->  00:13:17.940
And we might actually
put on comment in there
274

274

00:13:17.940  -->  00:13:21.460
to that effect, actually I'll include
275

275

00:13:21.460  -->  00:13:23.460
this first line as well.
276

276

00:13:31.710  -->  00:13:34.260
Tap that over a little bit.
277

277

00:13:34.260  -->  00:13:37.590
And we'll say this is the relative read,
278

278

00:13:39.450  -->  00:13:42.870
and now we're going to put absolute read.
279

279

00:13:44.320  -->  00:13:46.470
So, it's a little bit different the code,
280

280

00:13:46.470  -->  00:13:47.510
and I'll close this front window down
281

281

00:13:47.510  -->  00:13:50.120
so we can see the code for both.
282

282

00:13:50.120  -->  00:13:51.960
So we start off still
doing the initial flips,
283

283

00:13:51.960  -->  00:13:55.460
so int buffer dot flip, but then we can do
284

284

00:13:56.910  -->  00:14:01.080
num bytes read, equals
channel dot read, int buffer.
285

285

00:14:03.490  -->  00:14:05.570
So far that's the same.
286

286

00:14:05.570  -->  00:14:08.060
But we go to print it out now,
287

287

00:14:08.060  -->  00:14:10.890
we can do int buffer dot, get int,
288

288

00:14:12.970  -->  00:14:15.640
but pass the number zero as I mentioned,
289

289

00:14:15.640  -->  00:14:17.900
this is basically going to begin the read
290

290

00:14:17.900  -->  00:14:21.950
at the index position we
specified, zero in this case.
291

291

00:14:21.950  -->  00:14:24.450
And, then we need to do one flip,
292

292

00:14:24.450  -->  00:14:26.800
int buffer dot flip, and basically we can
293

293

00:14:26.800  -->  00:14:28.110
do the same thing again there.
294

294

00:14:28.110  -->  00:14:30.270
We'll just copy that code.
295

295

00:14:31.460  -->  00:14:34.090
So I can see that we've
only called flip twice
296

296

00:14:34.090  -->  00:14:36.290
here in total, but in this case here
297

297

00:14:36.290  -->  00:14:38.090
for the relative read, we actually called
298

298

00:14:38.090  -->  00:14:40.290
it a total of four times.
299

299

00:14:40.290  -->  00:14:44.460
But, importantly, let's just
check that it actually works.
300

300

00:14:45.850  -->  00:14:48.840
Still got the same results as you can see.
301

301

00:14:48.840  -->  00:14:50.520
And just to be clear,
I'm not actually using
302

302

00:14:50.520  -->  00:14:53.030
the num bytes read variable here,
303

303

00:14:53.030  -->  00:14:54.300
we could print that out if you wanted
304

304

00:14:54.300  -->  00:14:55.550
to know how many bytes we've read,
305

305

00:14:55.550  -->  00:14:58.740
I'm just sort of showing
you the code for that.
306

306

00:14:58.740  -->  00:15:00.500
So basically by using a relative,
307

307

00:15:00.500  -->  00:15:02.620
sorry, by using an absolute read,
308

308

00:15:02.620  -->  00:15:06.130
which was defined from
line 43 down to line 49,
309

309

00:15:06.130  -->  00:15:07.910
we don't have to flip
the buffer after reading
310

310

00:15:07.910  -->  00:15:09.870
from the file channel, because we used
311

311

00:15:09.870  -->  00:15:12.120
the absolute version
of the get int methods
312

312

00:15:12.120  -->  00:15:16.520
on lines 46 and 49 where we
passed the index number of zero.
313

313

00:15:16.520  -->  00:15:19.140
Now you can do relative and absolute gets,
314

314

00:15:19.140  -->  00:15:21.380
for all the data types,
and you can do the same
315

315

00:15:21.380  -->  00:15:23.910
when doing puts to the
buffer, so in other words
316

316

00:15:23.910  -->  00:15:26.890
you can flip the buffer, or
you can provide an index.
317

317

00:15:26.890  -->  00:15:28.750
You have to do one or the other.
318

318

00:15:28.750  -->  00:15:30.410
Now and depending on
what you're trying to do,
319

319

00:15:30.410  -->  00:15:32.320
you may not have a
choice, but when you do,
320

320

00:15:32.320  -->  00:15:34.990
good idea as always is
just to be consistent.
321

321

00:15:34.990  -->  00:15:36.940
Alright, so let's finish the video here,
322

322

00:15:36.940  -->  00:15:38.880
in the next video, I wanna
go through and just talk
323

323

00:15:38.880  -->  00:15:42.950
about the buffer position,
and how it's not updated
324

324

00:15:42.950  -->  00:15:44.760
when you're using absolute indexes.
325

325

00:15:44.760  -->  00:15:47.610
But more on that, in the next video.
