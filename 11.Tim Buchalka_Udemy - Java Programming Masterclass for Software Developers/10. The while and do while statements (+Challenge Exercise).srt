1

00:00:05,250  -->  00:00:06,860
In the previous video we talked about

2

00:00:06,860  -->  00:00:08,800
the for statement which was a way to

3

00:00:08,800  -->  00:00:10,350
come up with a full loop to be able to

4

00:00:10,350  -->  00:00:12,870
process a statement or set of statements

5

00:00:12,870  -->  00:00:14,500
a given number of times and in this

6

00:00:14,500  -->  00:00:16,160
video, we're going to look at the while

7

00:00:16,160  -->  00:00:18,160
and also the do-while statements,

8

00:00:18,160  -->  00:00:20,340
the thing is with looping sometimes you

9

00:00:20,340  -->  00:00:22,560
might want to loop instead of a specific

10

00:00:22,560  -->  00:00:24,350
number of times, you might want to loop

11

00:00:24,350  -->  00:00:26,060
until a certain expression evaluates to

12

00:00:26,060  -->  00:00:27,090
false.

13

00:00:27,090  -->  00:00:28,470
For example, you may not know how

14

00:00:28,470  -->  00:00:29,519
many times you want to loop ahead of

15

00:00:29,519  -->  00:00:31,920
time, so what you need to do in those

16

00:00:31,920  -->  00:00:33,410
scenarios, we don't know how many times

17

00:00:33,410  -->  00:00:35,050
you want to loop but you wonder what

18

00:00:35,050  -->  00:00:36,930
continued looping until that expression

19

00:00:36,930  -->  00:00:38,610
is true until something happens, in other

20

00:00:38,610  -->  00:00:40,390
words is you want to use the while

21

00:00:40,390  -->  00:00:41,390
statement.

22

00:00:41,390  -->  00:00:42,390
So let's go through the syntax

23

00:00:42,390  -->  00:00:45,460
of a while statement, so in this example

24

00:00:45,460  -->  00:00:46,940
I'm going to create a simple variable

25

00:00:46,940  -->  00:00:49,690
called count, set that equal to zero,

26

00:00:49,690  -->  00:00:52,210
I'm going to type while and in brackets

27

00:00:52,210  -->  00:00:58,480
count not equal to five, then I'm going

28

00:00:58,480  -->  00:00:59,710
to type to print out one of these

29

00:00:59,710  -->  00:01:06,799
count value count and I'm going to do a

30

00:01:06,799  -->  00:01:11,520
count plus plus and there we have it.

31

00:01:11,520  -->  00:01:18,159
So if we run this code, so you can see it's

32

00:01:18,159  -->  00:01:20,540
counted one two three four just to be

33

00:01:20,540  -->  00:01:21,880
clear, we can change the count to one if

34

00:01:21,880  -->  00:01:23,450
we one, so we're starting on one and set

35

00:01:23,450  -->  00:01:28,380
of zero, run that again.

36

00:01:28,380  -->  00:01:29,380
So this is

37

00:01:29,380  -->  00:01:31,370
similar to the for statement that we've

38

00:01:31,370  -->  00:01:33,310
used previously to do something

39

00:01:33,310  -->  00:01:35,150
equivalent, it's the for statement

40

00:01:35,150  -->  00:01:36,150
of course, you would have done something

41

00:01:36,150  -->  00:01:43,130
along the lines of for int i equals one

42

00:01:43,130  -->  00:01:46,299
or then less than seven or i plus plus

43

00:01:46,299  -->  00:01:50,119
and then we would have done, so that

44

00:01:50,119  -->  00:01:51,530
would be equivalent statement in the for

45

00:01:51,530  -->  00:01:52,710
loop with the for loop.

46

00:01:52,710  -->  00:01:54,120
So you can see in

47

00:01:54,120  -->  00:01:56,140
the case of the while, there's no

48

00:01:56,140  -->  00:01:57,939
variable that's set up within the while

49

00:01:57,939  -->  00:02:00,409
loop like doing is but in the for loop,

50

00:02:00,409  -->  00:02:01,880
so we need to create our loop if we're

51

00:02:01,880  -->  00:02:04,450
going to do a counting mechanism, before

52

00:02:04,450  -->  00:02:06,380
we start while statement, then we

53

00:02:06,380  -->  00:02:08,140
also need to increment our variable

54

00:02:08,140  -->  00:02:10,100
manually, if that's the way we want to do

55

00:02:10,100  -->  00:02:11,890
it within the loop itself, so that's the

56

00:02:11,890  -->  00:02:16,040
difference between the two

57

00:02:16,040  -->  00:02:17,430
This is future Tim.

58

00:02:17,430  -->  00:02:22,690
Editing this video and creating a new component
due to a bug that I just showed you on the

59

00:02:22,690  -->  00:02:23,690
screen.

60

00:02:23,690  -->  00:02:26,480
Now what I've done is I've changed the color
of this background just to make it really

61

00:02:26,480  -->  00:02:27,480
clear what I'm

62

00:02:27,480  -->  00:02:31,620
doing here to the right hand side you can
see we still got out account value

63

00:02:31,620  -->  00:02:33,819
One two three four five.

64

00:02:33,819  -->  00:02:35,560
That's for our while loop

65

00:02:35,560  -->  00:02:39,760
And what I attempted to tell you was in the
for loop and I've actually duplicated that

66

00:02:39,760  -->  00:02:40,760
for loop

67

00:02:40,760  -->  00:02:45,269
on lines 13 to 15 was identical to the while
loop

68

00:02:45,269  -->  00:02:47,290
And that is not the case.

69

00:02:47,290  -->  00:02:49,379
So let me just show you what this for loop
does

70

00:02:49,379  -->  00:02:52,920
if i uncomment it again.

71

00:02:52,920  -->  00:02:59,080
We run this code bearing in mind that's the
output we can see at the moment

72

00:02:59,080  -->  00:03:08,330
you can see it outputs Not only five times
but six times but it prints the value six

73

00:03:08,330  -->  00:03:10,130
each time.

74

00:03:10,130  -->  00:03:14,050
Now the reason for that is I've introduced
a new variable named here I

75

00:03:14,050  -->  00:03:21,409
but I'm printing out the value count so to
be more correct if we want to do exactly the

76

00:03:21,409  -->  00:03:22,409
same as the while

77

00:03:22,409  -->  00:03:23,409
loop.

78

00:03:23,409  -->  00:03:24,959
In a for loop we would do something like this.

79

00:03:24,959  -->  00:03:29,440
so comment out that wrong loop the wrong code.

80

00:03:29,440  -->  00:03:33,409
and we would do for parentheses.

81

00:03:33,409  -->  00:03:36,220
Count equals one count.

82

00:03:36,220  -->  00:03:41,430
not equal to six count plus plus.

83

00:03:41,430  -->  00:03:44,250
And then we would print out some output.

84

00:03:44,250  -->  00:03:51,450
and we would say count value is + count

85

00:03:51,450  -->  00:03:55,470
So if we run that now

86

00:03:55,470  -->  00:03:59,459
you can see if we correctly now 1 2 3 4 5
showing for the while loop

87

00:03:59,459  -->  00:04:03,930
and we also get 1 2 3 4 5 showing for the
for loop

88

00:04:03,930  -->  00:04:07,819
So that's the identical for loop to what I
showed you in the while loop

89

00:04:07,819  -->  00:04:16,900
All right so let's go back now and continue
the lesson

90

00:04:16,900  -->  00:04:17,970
I'll just delete the

91

00:04:17,970  -->  00:04:20,080
for loop now, I don't need that anymore.

92

00:04:20,080  -->  00:04:21,520
We can also write this in slightly

93

00:04:21,520  -->  00:04:24,540
different fashion as well, it's that of

94

00:04:24,540  -->  00:04:25,820
the above example of the while we could

95

00:04:25,820  -->  00:04:35,520
have written it like while true, if count

96

00:04:35,520  -->  00:04:41,180
equals 5 break and the otherwise we're

97

00:04:41,180  -->  00:04:43,880
going to print the message then

98

00:04:43,880  -->  00:04:47,639
increment the count like so and just to

99

00:04:47,639  -->  00:04:48,960
make sure those worked, you'll set

100

00:04:48,960  -->  00:04:51,750
count back to 1 here because of course

101

00:04:51,750  -->  00:04:53,300
after executing this loop, count will be

102

00:04:53,300  -->  00:04:55,300
set to 6.

103

00:04:55,300  -->  00:04:58,280
So if we run this example and

104

00:04:58,280  -->  00:05:00,080
to be precise, I should change that to 6

105

00:05:00,080  -->  00:05:02,810
the same comparison as the other test,

106

00:05:02,810  -->  00:05:03,900
so I've written it as a slightly different

107

00:05:03,900  -->  00:05:06,190
fashion with the previous example we're

108

00:05:06,190  -->  00:05:08,610
checking to see whether that's not equal to
6,

109

00:05:08,610  -->  00:05:09,990
in this case what we're doing is we're

110

00:05:09,990  -->  00:05:12,070
specifically saying if we get to the

111

00:05:12,070  -->  00:05:14,330
number in other words, we get to the

112

00:05:14,330  -->  00:05:15,770
stage where we want to break out of the

113

00:05:15,770  -->  00:05:17,390
code in this case, where the expression

114

00:05:17,390  -->  00:05:19,210
count equals equals 6

115

00:05:19,210  -->  00:05:21,449
then we issue a break which breaks out

116

00:05:21,449  -->  00:05:23,590
of the loop, but in both scenarios you

117

00:05:23,590  -->  00:05:25,410
need to make sure that you do actually

118

00:05:25,410  -->  00:05:28,220
have the variable incremented because if

119

00:05:28,220  -->  00:05:30,289
you don't, what will happen is something

120

00:05:30,289  -->  00:05:32,530
along these lines, we comment that out

121

00:05:32,530  -->  00:05:33,910
just to show you what will happen if we

122

00:05:33,910  -->  00:05:35,380
don't even read the count, we'll get

123

00:05:35,380  -->  00:05:38,169
into an endless loop and they can see

124

00:05:38,169  -->  00:05:40,669
what's happening on the right hand side,

125

00:05:40,669  -->  00:05:41,880
Intellij is having it carrying having a

126

00:05:41,880  -->  00:05:43,490
bit of a fit, the reason that it's coming

127

00:05:43,490  -->  00:05:44,720
up with that is we're getting to this

128

00:05:44,720  -->  00:05:46,950
loop here while count is not equal to 6

129

00:05:46,950  -->  00:05:49,020
is printing out the count, then we

130

00:05:49,020  -->  00:05:50,260
haven't reset the count we have an

131

00:05:50,260  -->  00:05:51,860
incremented account so it goes back and

132

00:05:51,860  -->  00:05:54,320
does another test to start doing the

133

00:05:54,320  -->  00:05:56,180
test again, so it's continually printing

134

00:05:56,180  -->  00:05:57,840
checking whether the value 6 so we're

135

00:05:57,840  -->  00:05:59,960
not incrementing the count, so make sure

136

00:05:59,960  -->  00:06:01,639
if you're using a while like this,

137

00:06:01,639  -->  00:06:04,990
the while statement you are incrementing count.

138

00:06:04,990  -->  00:06:06,650
So you'll see code like this fairly

139

00:06:06,650  -->  00:06:09,280
often in Java code while true and what

140

00:06:09,280  -->  00:06:11,360
that actually means is it's going to be

141

00:06:11,360  -->  00:06:12,729
an infinite loop, so the loop will

142

00:06:12,729  -->  00:06:14,940
continue going you know processing

143

00:06:14,940  -->  00:06:17,220
forever but the way to get out of the

144

00:06:17,220  -->  00:06:19,280
loop is you do a test some sort of test

145

00:06:19,280  -->  00:06:21,370
to check whether a given expression is

146

00:06:21,370  -->  00:06:23,190
true, in this case we're waiting to count

147

00:06:23,190  -->  00:06:25,520
equals 6 and then we break out on the loop

148

00:06:25,520  -->  00:06:27,120
much like you've seen before when we use

149

00:06:27,120  -->  00:06:28,530
break elsewhere.

150

00:06:28,530  -->  00:06:29,530
So that's an alternative

151

00:06:29,530  -->  00:06:30,889
why to do things.

152

00:06:30,889  -->  00:06:31,889
Now there is another

153

00:06:31,889  -->  00:06:33,860
got you in this scenario, so what can

154

00:06:33,860  -->  00:06:34,860
actually happen

155

00:06:34,860  -->  00:06:36,850
here is that the code may not get

156

00:06:36,850  -->  00:06:38,910
executed at all.

157

00:06:38,910  -->  00:06:39,910
So to show you an

158

00:06:39,910  -->  00:06:40,910
example of that, we'll just call it this

159

00:06:40,910  -->  00:06:44,370
code out for now.

160

00:06:44,370  -->  00:06:45,370
So if we change count

161

00:06:45,370  -->  00:06:53,130
to 6 and then run this, the code never

162

00:06:53,130  -->  00:06:54,650
gets into the while loop at all and

163

00:06:54,650  -->  00:06:56,770
that's because this initial expression

164

00:06:56,770  -->  00:06:59,580
was evaluated to false, so it never

165

00:06:59,580  -->  00:07:00,949
actually got into the code block to

166

00:07:00,949  -->  00:07:02,979
execute any of the code in there.

167

00:07:02,979  -->  00:07:04,230
So that's an important thing to remember

168

00:07:04,230  -->  00:07:05,740
with a while loop and likewise with a

169

00:07:05,740  -->  00:07:19,330
for loop, we did something like this,

170

00:07:19,330  -->  00:07:22,710
we run that, we won't get any output either

171

00:07:22,710  -->  00:07:25,810
and that's because the initial value was

172

00:07:25,810  -->  00:07:28,229
set to 6 and we're doing a comparison

173

00:07:28,229  -->  00:07:31,060
test there to say i is not equal to 6,

174

00:07:31,060  -->  00:07:32,389
so of course the first time it does this

175

00:07:32,389  -->  00:07:34,889
evaluation that's false because i in

176

00:07:34,889  -->  00:07:37,190
fact is equal to 6 so the code doesn't

177

00:07:37,190  -->  00:07:39,750
get executed and since within the code

178

00:07:39,750  -->  00:07:42,699
block itself and likewise for the while

179

00:07:42,699  -->  00:07:44,030
statement as well.

180

00:07:44,030  -->  00:07:45,030
So that can be a

181

00:07:45,030  -->  00:07:46,030
gotcha sometimes, you're wondering why

182

00:07:46,030  -->  00:07:47,960
your code hasn't been executed, make sure

183

00:07:47,960  -->  00:07:50,520
you check the first expression and make

184

00:07:50,520  -->  00:07:52,169
sure going in the for the very first

185

00:07:52,169  -->  00:07:53,930
time that that expression it doesn't

186

00:07:53,930  -->  00:07:56,220
evaluate to false, which means it won't

187

00:07:56,220  -->  00:07:57,560
execute any of the code.

188

00:07:57,560  -->  00:07:58,569
Now there's also

189

00:07:58,569  -->  00:08:00,980
a third type of looping statement called

190

00:08:00,980  -->  00:08:03,229
the do-while and it's got the other

191

00:08:03,229  -->  00:08:05,979
advantage that it will always execute at

192

00:08:05,979  -->  00:08:08,500
least once and if not more times

193

00:08:08,500  -->  00:08:10,870
depending on the way you've defined your

194

00:08:10,870  -->  00:08:12,990
your test expressions, so what we'll do

195

00:08:12,990  -->  00:08:15,789
is we'll do an equivalent thing, we'll

196

00:08:15,789  -->  00:08:18,120
type do which is the keyword we're using

197

00:08:18,120  -->  00:08:24,280
for the do-while statement, then we can

198

00:08:24,280  -->  00:08:28,250
type count value was plus count

199

00:08:28,250  -->  00:08:33,229
and when we count plus plus then our

200

00:08:33,229  -->  00:08:35,250
expression to test to see whether we

201

00:08:35,250  -->  00:08:38,070
should exit the do-while or not is at

202

00:08:38,070  -->  00:08:40,100
the end, we type while after the closing

203

00:08:40,100  -->  00:08:42,130
brace then we put our expression which

204

00:08:42,130  -->  00:08:43,350
would be exactly the same expression

205

00:08:43,350  -->  00:08:46,080
would be something like count not equal

206

00:08:46,080  -->  00:08:49,020
to six and put a semicolon to close it

207

00:08:49,020  -->  00:08:50,930
off, so we change our count here to one

208

00:08:50,930  -->  00:08:55,060
again just to be sure, we'll comment

209

00:08:55,060  -->  00:09:02,959
these other ones out and we run the code

210

00:09:02,959  -->  00:09:05,730
count 1 2 3 4 5 so you can see that it's

211

00:09:05,730  -->  00:09:08,089
operated very very similar to the while

212

00:09:08,089  -->  00:09:09,820
that we've done in there, the only real

213

00:09:09,820  -->  00:09:11,130
difference was we had the word do at the

214

00:09:11,130  -->  00:09:13,540
top then the while

215

00:09:13,540  -->  00:09:15,060
component appeared at the bottom of the

216

00:09:15,060  -->  00:09:17,120
statement there, but the other thing in

217

00:09:17,120  -->  00:09:20,810
order is if we set that to 6 initially

218

00:09:20,810  -->  00:09:25,420
and run up, you'll get a very weird error

219

00:09:25,420  -->  00:09:26,860
as you can see there, so what's happening

220

00:09:26,860  -->  00:09:29,890
is the do-while is guaranteed to execute

221

00:09:29,890  -->  00:09:32,330
at least once, so in this scenario what's

222

00:09:32,330  -->  00:09:33,440
happened is we have the initial print

223

00:09:33,440  -->  00:09:35,510
out, so account would have been the count

224

00:09:35,510  -->  00:09:37,600
value was six then we then incremented

225

00:09:37,600  -->  00:09:40,160
counts, i went to 7 but then the while

226

00:09:40,160  -->  00:09:43,370
expression at the end count not equal to 6,

227

00:09:43,370  -->  00:09:45,450
that is going to be true from now on

228

00:09:45,450  -->  00:09:46,730
and the reason why was can't was equal

229

00:09:46,730  -->  00:09:48,220
to 7 there, so therefore we got into

230

00:09:48,220  -->  00:09:50,029
virtually an infinite loop where it

231

00:09:50,029  -->  00:09:51,670
contingently went through incrementing

232

00:09:51,670  -->  00:09:53,221
the number and running the loop as you

233

00:09:53,221  -->  00:09:55,680
can see there no 190,000 times until I

234

00:09:55,680  -->  00:09:56,680
stopped it.

235

00:09:56,680  -->  00:09:57,680
So that's another thing to

236

00:09:57,680  -->  00:09:59,550
keep in mind with to do while it's

237

00:09:59,550  -->  00:10:00,990
always going to be executed at least

238

00:10:00,990  -->  00:10:03,440
once, so of course if we set that back to

239

00:10:03,440  -->  00:10:05,350
one, that'll work quite nicely and that'll

240

00:10:05,350  -->  00:10:10,440
show 1 to 5, 1 2 3 4 5 as you can see

241

00:10:10,440  -->  00:10:13,130
because we initialized and set it once

242

00:10:13,130  -->  00:10:15,070
and the do-while could also use a break

243

00:10:15,070  -->  00:10:17,120
statement for argument's sake we could

244

00:10:17,120  -->  00:10:19,630
set it up so that we could put if count

245

00:10:19,630  -->  00:10:24,890
greater than 100 break that's going to

246

00:10:24,890  -->  00:10:25,960
break out of the loop again so we could

247

00:10:25,960  -->  00:10:28,380
test that and you should find that well

248

00:10:28,380  -->  00:10:30,050
it'll display up until the hundred the

249

00:10:30,050  -->  00:10:31,579
number 100 and then it will execute

250

00:10:31,579  -->  00:10:32,880
because that'll execute that come on

251

00:10:32,880  -->  00:10:37,570
there did break so we run that you can

252

00:10:37,570  -->  00:10:39,540
see it's executed to the value of 100

253

00:10:39,540  -->  00:10:41,440
but let's look at a better example than

254

00:10:41,440  -->  00:10:42,660
what I've come up with so far so I want

255

00:10:42,660  -->  00:10:43,720
to come at this code out,

256

00:10:43,720  -->  00:10:45,780
I'm actually going to comment the code

257

00:10:45,780  -->  00:10:48,310
out at the top of top as well just

258

00:10:48,310  -->  00:10:51,060
coming to help that variable, so it's

259

00:10:51,060  -->  00:10:58,420
challenge time.

260

00:10:58,420  -->  00:11:06,079
Okay, so the challenge is

261

00:11:06,079  -->  00:11:08,600
to create a method called is even number

262

00:11:08,600  -->  00:11:10,970
and it takes a parameter of type int,

263

00:11:10,970  -->  00:11:12,709
so the purpose of the method is to

264

00:11:12,709  -->  00:11:14,140
determine whether or not the argument

265

00:11:14,140  -->  00:11:15,820
that's been passed to method the int in

266

00:11:15,820  -->  00:11:18,399
other words is an even number or not,

267

00:11:18,399  -->  00:11:19,970
if it is an even number return true

268

00:11:19,970  -->  00:11:22,670
otherwise, return false and give you a

269

00:11:22,670  -->  00:11:24,870
bit of a hint here to you and look at

270

00:11:24,870  -->  00:11:26,420
using the remainder operator.

271

00:11:26,420  -->  00:11:27,510
Alright, go

272

00:11:27,510  -->  00:11:29,111
ahead and try that out and see if you

273

00:11:29,111  -->  00:11:30,200
can figure it out,

274

00:11:30,200  -->  00:11:32,050
pause the video now and come back once

275

00:11:32,050  -->  00:11:33,800
you've tried it out and to check what

276

00:11:33,800  -->  00:11:34,950
I've come up with.

277

00:11:34,950  -->  00:11:37,240
Okay, how did you come?

278

00:11:37,240  -->  00:11:39,270
Let's go ahead and write that method,

279

00:11:39,270  -->  00:11:42,269
so we start off with a public static

280

00:11:42,269  -->  00:11:45,490
boolean, you want to return true or false

281

00:11:45,490  -->  00:11:50,480
is even number and when I tap take a

282

00:11:50,480  -->  00:11:51,930
parameter of int and we'll just call it

283

00:11:51,930  -->  00:11:54,459
number, that's going to be our number

284

00:11:54,459  -->  00:11:55,610
that we're going to use to determine

285

00:11:55,610  -->  00:11:58,260
whether it's true or false, so a simple

286

00:11:58,260  -->  00:12:01,570
way to determine whether a number is

287

00:12:01,570  -->  00:12:04,012
even or odd is just to use the remainder

288

00:12:04,012  -->  00:12:06,800
operator like so so we just do if number

289

00:12:06,800  -->  00:12:11,430
or if the remainder of a number and to

290

00:12:11,430  -->  00:12:13,670
using it the remainder operator don't

291

00:12:13,670  -->  00:12:17,630
need two brackets here actually, so for

292

00:12:17,630  -->  00:12:19,630
that, the answer to that equals zero in

293

00:12:19,630  -->  00:12:21,720
other words there are no remainders what

294

00:12:21,720  -->  00:12:24,660
that means is that is actually a true

295

00:12:24,660  -->  00:12:27,649
that is an even number otherwise, if we

296

00:12:27,649  -->  00:12:29,459
do get a remainder, we know that it's an

297

00:12:29,459  -->  00:12:31,980
odd number, so that's the way they

298

00:12:31,980  -->  00:12:33,480
determine whether our number is even or

299

00:12:33,480  -->  00:12:34,480
not.

300

00:12:34,480  -->  00:12:35,910
Okay so what I'm going to do now is

301

00:12:35,910  -->  00:12:37,290
we're going to create some code that is

302

00:12:37,290  -->  00:12:39,420
going to execute that method.

303

00:12:39,420  -->  00:12:41,120
Okay so

304

00:12:41,120  -->  00:12:43,350
this is Tim speaking from the future

305

00:12:43,350  -->  00:12:45,410
where I've come back and recreated part

306

00:12:45,410  -->  00:12:48,570
of this video and re-recorded it to go

307

00:12:48,570  -->  00:12:50,180
through and make this process this next

308

00:12:50,180  -->  00:12:52,329
step a little bit easy to understand

309

00:12:52,329  -->  00:12:53,890
based on the student feedback,

310

00:12:53,890  -->  00:12:55,589
Alright, so let's continue

311

00:12:55,589  -->  00:12:56,899
so my code here

312

00:12:56,899  -->  00:13:00,170
is going to start with int number

313

00:13:00,170  -->  00:13:01,920
there's a value of four so it's going to

314

00:13:01,920  -->  00:13:08,310
be int number equals four and the number

315

00:13:08,310  -->  00:13:10,440
we're going to finish on in our loop

316

00:13:10,440  -->  00:13:12,530
which we'll call finish number on assign

317

00:13:12,530  -->  00:13:16,810
a value of 22, so int finish number is

318

00:13:16,810  -->  00:13:19,910
equal to 20.

319

00:13:19,910  -->  00:13:20,910
Alright so now we need to

320

00:13:20,910  -->  00:13:23,080
create our while loop and what we're

321

00:13:23,080  -->  00:13:27,180
going to do is type while parentheses

322

00:13:27,180  -->  00:13:30,960
number less than or equal to finish

323

00:13:30,960  -->  00:13:33,850
number, then we want to open a code block

324

00:13:33,850  -->  00:13:35,420
left or right curly braces.

325

00:13:35,420  -->  00:13:36,420
Alright so

326

00:13:36,420  -->  00:13:38,560
now within this code block, we're going

327

00:13:38,560  -->  00:13:40,769
to increment the number so that it

328

00:13:40,769  -->  00:13:43,540
actually starts with five and not four

329

00:13:43,540  -->  00:13:45,730
so with while loop incrementing, that

330

00:13:45,730  -->  00:13:47,459
would usually be the first thing you do

331

00:13:47,459  -->  00:13:48,810
because it's easy to end up with an

332

00:13:48,810  -->  00:13:50,840
endless loop, so in other words a loop

333

00:13:50,840  -->  00:13:52,704
that never ends, so we're going to do

334

00:13:52,704  -->  00:13:54,090
that that's the first statement inside

335

00:13:54,090  -->  00:13:57,300
the code block, so number plus plus

336

00:13:57,300  -->  00:14:00,860
semicolon and now we want to do a test

337

00:14:00,860  -->  00:14:03,070
to make sure that number or test to see

338

00:14:03,070  -->  00:14:05,930
if that number is not even it's in other

339

00:14:05,930  -->  00:14:07,380
words if it's an odd number, so I'm going

340

00:14:07,380  -->  00:14:12,000
to type if parentheses so they're not is

341

00:14:12,000  -->  00:14:16,070
even number parenthesis number 3 gonna

342

00:14:16,070  -->  00:14:19,660
open a code block there and what we're

343

00:14:19,660  -->  00:14:22,170
going to do is add the word continue,

344

00:14:22,170  -->  00:14:25,149
the keyword continue semicolon and we

345

00:14:25,149  -->  00:14:26,430
haven't talked about that keyword yet,

346

00:14:26,430  -->  00:14:28,839
but we'll come back to that then after

347

00:14:28,839  -->  00:14:30,480
that outside of the code block on the

348

00:14:30,480  -->  00:14:33,170
next line we're going to print out some output,

349

00:14:33,170  -->  00:14:37,510
we're going to put even number space and

350

00:14:37,510  -->  00:14:41,600
another double quote plus number and

351

00:14:41,600  -->  00:14:43,950
closing off the parentheses there, well

352

00:14:43,950  -->  00:14:45,389
so what is this code doing?

353

00:14:45,389  -->  00:14:46,389
Well it's

354

00:14:46,389  -->  00:14:48,180
going to start at the number five well

355

00:14:48,180  -->  00:14:50,139
actually number four, but then that

356

00:14:50,139  -->  00:14:52,170
number will be immediately incremented

357

00:14:52,170  -->  00:14:53,820
and that's because we've got this code

358

00:14:53,820  -->  00:14:56,300
on line 31 and so that then gets

359

00:14:56,300  -->  00:14:58,520
incremented as the first statement and

360

00:14:58,520  -->  00:15:00,839
it's going to go through and finish up

361

00:15:00,839  -->  00:15:02,730
up to and including the number 20

362

00:15:02,730  -->  00:15:05,100
because we've got our less than or equal

363

00:15:05,100  -->  00:15:07,740
if test here on line 30 and what we're

364

00:15:07,740  -->  00:15:09,960
doing is we're testing to see whether

365

00:15:09,960  -->  00:15:11,010
the number is an even number

366

00:15:11,010  -->  00:15:13,470
and if it's not an even number and we're

367

00:15:13,470  -->  00:15:15,880
testing for that here on line 32, then

368

00:15:15,880  -->  00:15:18,600
we're going to do our continue which is

369

00:15:18,600  -->  00:15:20,860
something that's different to break,

370

00:15:20,860  -->  00:15:23,579
npw both break and continue have the effect

371

00:15:23,579  -->  00:15:25,839
of interrupting the code, so then in the

372

00:15:25,839  -->  00:15:28,110
case of continuing what happens is that

373

00:15:28,110  -->  00:15:29,839
it'll effectively bypass the print

374

00:15:29,839  -->  00:15:32,120
statement and in case there any more

375

00:15:32,120  -->  00:15:35,360
statements all code would be a bypassed

376

00:15:35,360  -->  00:15:36,530
that's around that error as well so in

377

00:15:36,530  -->  00:15:38,759
other words continue won't do any code

378

00:15:38,759  -->  00:15:41,019
any further down and goes back to the

379

00:15:41,019  -->  00:15:43,410
start of the loop instead, so the loop

380

00:15:43,410  -->  00:15:46,180
gets finished and goes back and starts

381

00:15:46,180  -->  00:15:47,360
on the next number again

382

00:15:47,360  -->  00:15:49,620
but obviously the code is not going to

383

00:15:49,620  -->  00:15:51,290
be executed, so that's what continue does

384

00:15:51,290  -->  00:15:54,269
it allows the loop to continue but it

385

00:15:54,269  -->  00:15:56,399
doesn't actually process any more code

386

00:15:56,399  -->  00:15:58,220
any further down in the while loop it

387

00:15:58,220  -->  00:15:59,690
just goes right straight to the end of

388

00:15:59,690  -->  00:16:01,649
the loop and then back on and start from

389

00:16:01,649  -->  00:16:03,420
the next number if appropriate if that

390

00:16:03,420  -->  00:16:05,660
while condition is actually still valid,

391

00:16:05,660  -->  00:16:08,259
in other words if it's our case if the

392

00:16:08,259  -->  00:16:11,339
value is 20 or less and then when it

393

00:16:11,339  -->  00:16:13,089
starts to loop again the number gets

394

00:16:13,089  -->  00:16:14,630
incremented again, so the first time it

395

00:16:14,630  -->  00:16:18,160
goes through it'll be 5 4 plus 1 is 5

396

00:16:18,160  -->  00:16:19,630
and if it's not an even number it'll go

397

00:16:19,630  -->  00:16:21,889
through and gets incremented, it keeps

398

00:16:21,889  -->  00:16:23,540
coming incremented and in the case

399

00:16:23,540  -->  00:16:26,690
where it is an even number, so if this

400

00:16:26,690  -->  00:16:28,450
clause here isn't executed, so in other

401

00:16:28,450  -->  00:16:30,190
words if the number was 6 for argument's

402

00:16:30,190  -->  00:16:31,540
sake, you'll see that the value we

403

00:16:31,540  -->  00:16:33,920
printed out here on line 36 but then it

404

00:16:33,920  -->  00:16:35,490
too will go back to the start of the

405

00:16:35,490  -->  00:16:36,880
while loop and the number will be

406

00:16:36,880  -->  00:16:39,660
incremented basically until this if

407

00:16:39,660  -->  00:16:42,680
comparison here this test here returns

408

00:16:42,680  -->  00:16:45,310
false, so if when number is not less than

409

00:16:45,310  -->  00:16:47,170
or equal to finish number we know at

410

00:16:47,170  -->  00:16:49,360
that point so if the number is 21 or

411

00:16:49,360  -->  00:16:50,980
higher that the while loop is going to

412

00:16:50,980  -->  00:16:53,490
be exited and the processing will

413

00:16:53,490  -->  00:16:54,490
complete.

414

00:16:54,490  -->  00:16:55,620
Alright so let's actually

415

00:16:55,620  -->  00:16:57,760
test this and see if it works,

416

00:16:57,760  -->  00:17:01,649
we're going to run it, so you can see

417

00:17:01,649  -->  00:17:03,750
what's happened there I'm just going to

418

00:17:03,750  -->  00:17:04,970
put this one window down to the bottom

419

00:17:04,970  -->  00:17:06,919
for now, clicking on this little gear

420

00:17:06,919  -->  00:17:10,130
icon and move to select bottom I can see

421

00:17:10,130  -->  00:17:13,240
to be better and you can ignore this red

422

00:17:13,240  -->  00:17:15,439
arrow here what's actually a warning

423

00:17:15,439  -->  00:17:16,520
that's not affecting the running of the

424

00:17:16,520  -->  00:17:18,220
program and that's been output point

425

00:17:18,220  -->  00:17:20,630
IntelliJ and not from our code which is

426

00:17:20,630  -->  00:17:24,510
output in blue in black as you can see there,

427

00:17:24,510  -->  00:17:26,329
but what you can see there hopefully and

428

00:17:26,329  -->  00:17:29,480
I'll move the code up so you can see it

429

00:17:29,480  -->  00:17:30,960
a bit more clearer, I'll move this up

430

00:17:30,960  -->  00:17:34,490
again is that we've managed to get this

431

00:17:34,490  -->  00:17:36,370
to work, so you can see the output there

432

00:17:36,370  -->  00:17:40,470
is 6 8 10 12 14 16 18 and 20 so that's

433

00:17:40,470  -->  00:17:42,370
what the continue keyword is, so it

434

00:17:42,370  -->  00:17:44,640
basically says stop where you are

435

00:17:44,640  -->  00:17:46,880
continue on to the next sort of test if

436

00:17:46,880  -->  00:17:49,049
you will so the next condition the next

437

00:17:49,049  -->  00:17:51,270
iteration of the while loop and eventually

438

00:17:51,270  -->  00:17:53,220
down there so in this case it was an

439

00:17:53,220  -->  00:17:54,929
even number so if it gets to 6 8 10 12

440

00:17:54,929  -->  00:17:56,630
and you can see in that point it's

441

00:17:56,630  -->  00:17:58,780
actually not exiting it's actually

442

00:17:58,780  -->  00:18:00,730
printing out that code and then going

443

00:18:00,730  -->  00:18:01,850
back to the start of the while loop

444

00:18:01,850  -->  00:18:03,299
again.

445

00:18:03,299  -->  00:18:05,470
So remember here that the do-while

446

00:18:05,470  -->  00:18:07,710
is effectively identical to the while

447

00:18:07,710  -->  00:18:09,230
the only difference with the do while is

448

00:18:09,230  -->  00:18:11,160
that we're testing the value at the

449

00:18:11,160  -->  00:18:13,140
bottom but here of course we're testing

450

00:18:13,140  -->  00:18:14,980
at the top here within the while

451

00:18:14,980  -->  00:18:16,990
condition here.

452

00:18:16,990  -->  00:18:18,380
Now a while loop is

453

00:18:18,380  -->  00:18:20,030
probably the statement you'll use more

454

00:18:20,030  -->  00:18:22,370
often than a do-while loop but they've

455

00:18:22,370  -->  00:18:24,320
all got their place and as you'll see as

456

00:18:24,320  -->  00:18:26,000
you progress through the course where we

457

00:18:26,000  -->  00:18:27,390
start and when we're using these in more

458

00:18:27,390  -->  00:18:29,240
details you'll start getting more of an

459

00:18:29,240  -->  00:18:31,900
understanding of where to use each and

460

00:18:31,900  -->  00:18:33,570
which one and which one to use and which

461

00:18:33,570  -->  00:18:35,559
one's best for a particular purpose.

462

00:18:35,559  -->  00:18:37,830
Alright so hopefully then that makes sense

463

00:18:37,830  -->  00:18:39,530
with what continued us I want to close

464

00:18:39,530  -->  00:18:40,720
down the run window now.

465

00:18:40,720  -->  00:18:42,260
So it's now time

466

00:18:42,260  -->  00:18:45,350
for a challenge, I'm just going to paste

467

00:18:45,350  -->  00:18:49,550
the challenge in here.

468

00:18:49,550  -->  00:18:53,500
Alright, so the

469

00:18:53,500  -->  00:18:55,750
challenge is to modify the while code

470

00:18:55,750  -->  00:18:57,600
above, so you want to leave the existing

471

00:18:57,600  -->  00:19:00,610
functionality as it is but make it so it

472

00:19:00,610  -->  00:19:03,560
also records the total number of even

473

00:19:03,560  -->  00:19:06,100
numbers that it's found and once five

474

00:19:06,100  -->  00:19:08,490
even numbers have been found to break

475

00:19:08,490  -->  00:19:10,870
out of the code and display the total

476

00:19:10,870  -->  00:19:13,610
number outside of the while loop,

477

00:19:13,610  -->  00:19:14,830
so you don't want to break any existing

478

00:19:14,830  -->  00:19:16,850
functionality, we still want the output

479

00:19:16,850  -->  00:19:18,890
working as it did previously we want to

480

00:19:18,890  -->  00:19:20,670
add that extra bit of functionality to

481

00:19:20,670  -->  00:19:21,670
the code.

482

00:19:21,670  -->  00:19:23,000
Alright so pause the video

483

00:19:23,000  -->  00:19:24,710
and go away and give that a try and once

484

00:19:24,710  -->  00:19:26,050
you're ready come back and we can check

485

00:19:26,050  -->  00:19:28,160
out the solution that I've come up with

486

00:19:28,160  -->  00:19:30,240
against yours, so pause the video now.

487

00:19:30,240  -->  00:19:34,230
Okay so how did you get on?

488

00:19:34,230  -->  00:19:35,230
Did you

489

00:19:35,230  -->  00:19:36,230
manage to figure it out?

490

00:19:36,230  -->  00:19:37,230
Well let's go

491

00:19:37,230  -->  00:19:38,230
through my solution bearing in mind

492

00:19:38,230  -->  00:19:40,620
there's always multiple solutions to a

493

00:19:40,620  -->  00:19:42,490
problem, so what I'm going to do here

494

00:19:42,490  -->  00:19:45,500
first is I'm going to take a copy of our

495

00:19:45,500  -->  00:19:47,880
existing code including the int on the

496

00:19:47,880  -->  00:19:50,780
line above right down to the closing the

497

00:19:50,780  -->  00:19:52,040
right curly brace of the body we're

498

00:19:52,040  -->  00:19:54,210
going to copy that and then I'm going to

499

00:19:54,210  -->  00:19:57,419
comment that out then I'm going to paste

500

00:19:57,419  -->  00:20:00,010
the code down here so we're just

501

00:20:00,010  -->  00:20:01,520
starting off with a new version of the

502

00:20:01,520  -->  00:20:03,450
code we've got the old code in there in

503

00:20:03,450  -->  00:20:05,330
case you want to refer to that from the

504

00:20:05,330  -->  00:20:07,270
previous code before the challenge I'm

505

00:20:07,270  -->  00:20:09,320
just going to move it up on the screen a

506

00:20:09,320  -->  00:20:10,320
little bit.

507

00:20:10,320  -->  00:20:11,789
Alright, so what we need to do

508

00:20:11,789  -->  00:20:15,159
first we need to record the total number

509

00:20:15,159  -->  00:20:17,320
of even numbers that have been found

510

00:20:17,320  -->  00:20:19,380
through our loop, so we need some sort of

511

00:20:19,380  -->  00:20:21,909
count variable, so what I'm going to do

512

00:20:21,909  -->  00:20:24,640
is add a variable and add it here after

513

00:20:24,640  -->  00:20:27,750
the the integer number was 20 line I'm

514

00:20:27,750  -->  00:20:29,710
gonna make that int and we'll call it

515

00:20:29,710  -->  00:20:33,950
even numbers found and I can set that

516

00:20:33,950  -->  00:20:35,581
equal to zero it was obviously when we

517

00:20:35,581  -->  00:20:37,900
first start we haven't found in even

518

00:20:37,900  -->  00:20:38,900
numbers.

519

00:20:38,900  -->  00:20:40,380
Okay, so we've declared the

520

00:20:40,380  -->  00:20:43,169
variable so next we need to record every

521

00:20:43,169  -->  00:20:46,210
time that is an even number, so the way

522

00:20:46,210  -->  00:20:48,940
to do that is to add this outside of

523

00:20:48,940  -->  00:20:51,840
this if test for not being for an even

524

00:20:51,840  -->  00:20:53,330
number or an odd number rather because

525

00:20:53,330  -->  00:20:55,621
we're doing a not use even number and we

526

00:20:55,621  -->  00:20:58,110
know that continue bypasses this code

527

00:20:58,110  -->  00:21:00,539
and goes back and restarts or goes to

528

00:21:00,539  -->  00:21:03,260
the next element in the while loop,

529

00:21:03,260  -->  00:21:04,740
so therefore we're pretty safe to put the

530

00:21:04,740  -->  00:21:07,690
code down here to record the number of

531

00:21:07,690  -->  00:21:08,980
even numbers found because that code

532

00:21:08,980  -->  00:21:11,039
only keys executed if we in fact we

533

00:21:11,039  -->  00:21:13,000
found an even number, so I'm gonna type

534

00:21:13,000  -->  00:21:16,390
even numbers found plus plus semicolon.

535

00:21:16,390  -->  00:21:18,650
So now we've got a count our even

536

00:21:18,650  -->  00:21:21,400
numbers found int variable is incremented
by

537

00:21:21,400  -->  00:21:24,470
one every time we find an even number

538

00:21:24,470  -->  00:21:26,240
and we know that this point of the code

539

00:21:26,240  -->  00:21:27,820
is correct because when we ran it last

540

00:21:27,820  -->  00:21:30,220
time it correctly printed out all the

541

00:21:30,220  -->  00:21:33,000
even numbers, so that's working fine but

542

00:21:33,000  -->  00:21:34,700
to confirm in fact that it is working

543

00:21:34,700  -->  00:21:37,110
fine, what we need to do is have some

544

00:21:37,110  -->  00:21:38,860
sort of output and we want to do that

545

00:21:38,860  -->  00:21:41,240
outside of the while loop, so let's do it

546

00:21:41,240  -->  00:21:44,220
out here so I'm going to print out

547

00:21:44,220  -->  00:21:49,640
and top title even numbers found equals

548

00:21:49,640  -->  00:21:51,539
and plus and obviously that was in

549

00:21:51,539  -->  00:21:54,669
double quotes even numbers found.

550

00:21:54,669  -->  00:21:55,909
Alright,

551

00:21:55,909  -->  00:21:57,390
so let's try running this code and see

552

00:21:57,390  -->  00:22:03,600
what happens 
you can see that it's

553

00:22:03,600  -->  00:22:05,640
correctly identified that there's a

554

00:22:05,640  -->  00:22:07,890
total of eight even numbers found and

555

00:22:07,890  -->  00:22:09,000
you can see that matches up with the

556

00:22:09,000  -->  00:22:11,150
total here but of course that wasn't

557

00:22:11,150  -->  00:22:12,750
what we wanted to do so why didn't I

558

00:22:12,750  -->  00:22:15,900
exit after five even numbers were found,

559

00:22:15,900  -->  00:22:17,440
well the reason for that was we haven't

560

00:22:17,440  -->  00:22:19,520
implemented that break yet have we?

561

00:22:19,520  -->  00:22:20,880
So what we need to do is I put in an

562

00:22:20,880  -->  00:22:23,919
additional test after the even number is

563

00:22:23,919  -->  00:22:25,590
found, so in other words it'll close down

564

00:22:25,590  -->  00:22:28,130
this so you can make it see it more

565

00:22:28,130  -->  00:22:30,950
clearly, so basically after the even

566

00:22:30,950  -->  00:22:33,299
numbers found plus plus line after this

567

00:22:33,299  -->  00:22:36,000
line here, we want to put a test there on

568

00:22:36,000  -->  00:22:38,380
the next line that if even numbers found

569

00:22:38,380  -->  00:22:39,850
is greater than or equal to five and

570

00:22:39,850  -->  00:22:44,110
then break we'll do that like so so if

571

00:22:44,110  -->  00:22:46,880
even numbers found is greater than or

572

00:22:46,880  -->  00:22:49,170
equal to five they're labeled a code

573

00:22:49,170  -->  00:22:52,289
block after closing the parentheses then

574

00:22:52,289  -->  00:22:54,690
we're going to do a break the break

575

00:22:54,690  -->  00:22:55,820
statement which we've talked about

576

00:22:55,820  -->  00:22:58,059
before and I'll just make it a space

577

00:22:58,059  -->  00:23:05,240
there, so now if we run the code we can

578

00:23:05,240  -->  00:23:07,290
see that we've got the print of four

579

00:23:07,290  -->  00:23:09,520
numbers showing on the screen text down

580

00:23:09,520  -->  00:23:11,140
the bottom there to say total even

581

00:23:11,140  -->  00:23:13,630
numbers equals five and of course the

582

00:23:13,630  -->  00:23:17,040
five numbers are 6 8 10 12 and 14.

583

00:23:17,040  -->  00:23:19,110
However we didn't get the last print out

584

00:23:19,110  -->  00:23:21,830
the number 14 and the reason for that is

585

00:23:21,830  -->  00:23:23,940
if we look at the code up here is we're

586

00:23:23,940  -->  00:23:25,870
actually putting this test in this test

587

00:23:25,870  -->  00:23:27,890
here is being executed before we're

588

00:23:27,890  -->  00:23:30,331
printing out the even number, so what we

589

00:23:30,331  -->  00:23:32,679
should have done to make that clearer is

590

00:23:32,679  -->  00:23:34,890
change the order, so we can just move

591

00:23:34,890  -->  00:23:40,470
this print out here right cut that and

592

00:23:40,470  -->  00:23:43,000
we can actually put that before the even

593

00:23:43,000  -->  00:23:44,470
numbers found plus plus I place it up

594

00:23:44,470  -->  00:23:46,840
here so that are the even numbers

595

00:23:46,840  -->  00:23:48,929
printed and a row of circumstances.

596

00:23:48,929  -->  00:23:53,150
Alright, so now we'll run this to test and

597

00:23:53,150  -->  00:23:55,190
you can see now we've got the five even

598

00:23:55,190  -->  00:23:57,669
numbers 6 8 10 12 14 printing

599

00:23:57,669  -->  00:23:59,640
and the text and the bottom shows

600

00:23:59,640  -->  00:24:01,640
correctly that at that point in time

601

00:24:01,640  -->  00:24:04,270
when we executed the break code that we

602

00:24:04,270  -->  00:24:06,250
had a total even numbers or the total

603

00:24:06,250  -->  00:24:08,120
even numbers that we found or equal to

604

00:24:08,120  -->  00:24:10,270
five.

605

00:24:10,270  -->  00:24:11,580
Alright so that's the while and

606

00:24:11,580  -->  00:24:12,760
the do-while loops.

607

00:24:12,760  -->  00:24:13,760
So hopefully you know

608

00:24:13,760  -->  00:24:15,620
you've got a good understanding of the

609

00:24:15,620  -->  00:24:17,340
various looping statements that exist

610

00:24:17,340  -->  00:24:19,559
within Java and it's time for us to now

611

00:24:19,559  -->  00:24:20,820
to move on to the next video.
