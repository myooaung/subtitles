WEBVTT
1
1

00:00:04.700  -->  00:00:07.200
So let's recap what we've learned about
2

2

00:00:07.200  -->  00:00:11.429
the if-then-else statement. So the if
3

3

00:00:11.429  -->  00:00:13.920
statement identifies which statement or
4

4

00:00:13.920  -->  00:00:16.800
code block to run based on the value of
5

5

00:00:16.800  -->  00:00:19.020
an expression in other words based on a
6

6

00:00:19.020  -->  00:00:22.289
specific condition. Inside the code block
7

7

00:00:22.289  -->  00:00:25.019
defined by curly braces, we can have one
8

8

00:00:25.019  -->  00:00:29.220
or multiple statements and we can use
9

9

00:00:29.220  -->  00:00:32.340
the else statement after the if in that
10

10

00:00:32.340  -->  00:00:35.010
case, when the condition is false the
11

11

00:00:35.010  -->  00:00:37.170
else block will be executed.
12

12

00:00:37.170  -->  00:00:40.379
We can also add else if to test multiple
13

13

00:00:40.379  -->  00:00:44.190
conditions. So in the following image you
14

14

00:00:44.190  -->  00:00:46.950
can see the basic if then else statement
15

15

00:00:46.950  -->  00:00:50.309
structure. So we have a test there in
16

16

00:00:50.309  -->  00:00:52.620
other words the condition inside the
17

17

00:00:52.620  -->  00:00:55.100
parentheses, when the condition is true
18

18

00:00:55.100  -->  00:00:58.109
the block inside the if statement will
19

19

00:00:58.109  -->  00:01:00.660
be executed. Now that block can be one
20

20

00:01:00.660  -->  00:01:03.809
statement or multiple statements, when
21

21

00:01:03.809  -->  00:01:06.090
the condition is false, the block inside
22

22

00:01:06.090  -->  00:01:08.640
the else statement will execute. In other
23

23

00:01:08.640  -->  00:01:10.500
words, both blocks will never execute at
24

24

00:01:10.500  -->  00:01:13.560
the same time, only one will based on the
25

25

00:01:13.560  -->  00:01:16.259
condition being true or false. Now a
26

26

00:01:16.259  -->  00:01:18.920
block there is defined with curly braces,
27

27

00:01:18.920  -->  00:01:21.360
so be careful with the semicolon there
28

28

00:01:21.360  -->  00:01:23.820
is no semicolon that should be added
29

29

00:01:23.820  -->  00:01:25.920
after the if statement, if you add a
30

30

00:01:25.920  -->  00:01:26.909
semicolon,
31

31

00:01:26.909  -->  00:01:28.829
it can cause unwanted behavior in
32

32

00:01:28.829  -->  00:01:31.259
order, once you closed off the if condition so
33

33

00:01:31.259  -->  00:01:32.820
make sure you don't put a semicolon on
34

34

00:01:32.820  -->  00:01:35.729
the same line of the if. So let's just go
35

35

00:01:35.729  -->  00:01:38.820
through one more example here, you can
36

36

00:01:38.820  -->  00:01:41.759
see the code on the screen there and the
37

37

00:01:41.759  -->  00:01:43.049
first part of the code there in
38

38

00:01:43.049  -->  00:01:45.659
parentheses score greater than equal to
39

39

00:01:45.659  -->  00:01:48.780
5,000 we're testing that expression, in
40

40

00:01:48.780  -->  00:01:50.939
this case because we've defined on the
41

41

00:01:50.939  -->  00:01:54.299
previous line the score being 5,000 the
42

42

00:01:54.299  -->  00:01:55.950
expression score greater than or equal
43

43

00:01:55.950  -->  00:01:59.189
to 5,000 is true, so in that scenario
44

44

00:01:59.189  -->  00:02:01.439
what's going to happen is the code block
45

45

00:02:01.439  -->  00:02:03.960
following will be executed and you can
46

46

00:02:03.960  -->  00:02:05.430
see the two they're pointing out to that
47

47

00:02:05.430  -->  00:02:07.770
in this case the output will print your
48

48

00:02:07.770  -->  00:02:09.989
score was greater than equal to 2,000.
49

49

00:02:09.989  -->  00:02:12.000
When it's finished, the code will then
50

50

00:02:12.000  -->  00:02:13.800
jump to the first line after
51

51

00:02:13.800  -->  00:02:16.590
the last curly brace and continue with
52

52

00:02:16.590  -->  00:02:18.210
the rest of the program, so you can see
53

53

00:02:18.210  -->  00:02:20.880
it effectively ignore the else component
54

54

00:02:20.880  -->  00:02:22.530
because in this case the expression
55

55

00:02:22.530  -->  00:02:25.140
score greater than equal to 5,000 was
56

56

00:02:25.140  -->  00:02:29.720
evaluated as true. Okay, so for this slide
57

57

00:02:29.720  -->  00:02:33.420
here the score is set to 800 so in step 1
58

58

00:02:33.420  -->  00:02:36.120
the condition will be false this is
59

59

00:02:36.120  -->  00:02:37.710
the expression score greater than equal
60

60

00:02:37.710  -->  00:02:40.530
to 5,000 because of course the score
61

61

00:02:40.530  -->  00:02:42.060
here isn't greater than or equal to
62

62

00:02:42.060  -->  00:02:45.330
5,000. So in that scenario the next
63

63

00:02:45.330  -->  00:02:46.980
condition will be yet to be evaluated
64

64

00:02:46.980  -->  00:02:49.470
will be step 2 and that will be true
65

65

00:02:49.470  -->  00:02:53.610
since score is less than 1000 and it's
66

66

00:02:53.610  -->  00:02:56.790
greater than or equal to 500, so remember
67

67

00:02:56.790  -->  00:02:59.190
the and to ampersand operators the and
68

68

00:02:59.190  -->  00:03:01.740
operator both conditions need to be true
69

69

00:03:01.740  -->  00:03:04.680
and the end result here is true so
70

70

00:03:04.680  -->  00:03:06.210
therefore the code block on the next
71

71

00:03:06.210  -->  00:03:08.100
line will be executed and the message
72

72

00:03:08.100  -->  00:03:10.860
your score was less than 1000 but
73

73

00:03:10.860  -->  00:03:12.450
greater than or equal to 500 will be
74

74

00:03:12.450  -->  00:03:14.490
displayed on the screen and then it'll
75

75

00:03:14.490  -->  00:03:16.530
jump down to the first line after the
76

76

00:03:16.530  -->  00:03:18.989
last curly brace and continue with the
77

77

00:03:18.989  -->  00:03:22.170
rest of the program. Alright so in this
78

78

00:03:22.170  -->  00:03:25.140
last slide the first test there we're
79

79

00:03:25.140  -->  00:03:26.340
going to get a false and that's because
80

80

00:03:26.340  -->  00:03:28.110
with the score has been defined on the
81

81

00:03:28.110  -->  00:03:30.350
first line of score equalled 200 and
82

82

00:03:30.350  -->  00:03:32.760
revalue 18 with the expression score
83

83

00:03:32.760  -->  00:03:34.980
greater than or equal to 5,000 so
84

84

00:03:34.980  -->  00:03:37.440
consequently the code then goes to the
85

85

00:03:37.440  -->  00:03:40.140
second line the elsif because it was
86

86

00:03:40.140  -->  00:03:42.239
false and we're evaluating the test here
87

87

00:03:42.239  -->  00:03:46.020
for score being less than 1000 and score
88

88

00:03:46.020  -->  00:03:48.630
being greater than or equal to 500 and
89

89

00:03:48.630  -->  00:03:51.330
in that scenario that expression is now
90

90

00:03:51.330  -->  00:03:53.370
false because score isn't greater than
91

91

00:03:53.370  -->  00:03:56.190
or equal to 500. So at this point since
92

92

00:03:56.190  -->  00:03:57.959
we never have any other conditions the
93

93

00:03:57.959  -->  00:04:00.030
else block will be executed and the
94

94

00:04:00.030  -->  00:04:01.890
message your score was less than 500
95

95

00:04:01.890  -->  00:04:04.020
will be printed and obviously there's
96

96

00:04:04.020  -->  00:04:06.320
only one statement in that final else
97

97

00:04:06.320  -->  00:04:09.900
code block. Once that's finished the code
98

98

00:04:09.900  -->  00:04:11.820
continues after that block in other
99

99

00:04:11.820  -->  00:04:14.160
words after the last brace, so that's us
100

100

00:04:14.160  -->  00:04:15.470
that was a recap of the if statement.
101

101

00:04:15.470  -->  00:04:20.180
Let's move on now to the next video.
