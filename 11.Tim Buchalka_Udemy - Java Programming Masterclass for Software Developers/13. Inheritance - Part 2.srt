1
1

00:00:05,520  -->  00:00:08,670
In the previous video, we got introduced
to what inheritance is in Java, so
2

2

00:00:08,670  -->  00:00:11,690
let's continue on in that discussion now.
3

3

00:00:11,690  -->  00:00:15,350
That's how we would override
a method in a super class.
4

4

00:00:15,350  -->  00:00:18,030
But let's get back and
look at this animal class again.
5

5

00:00:18,030  -->  00:00:22,240
We notice that we've got this other public
method called move, which is a very
6

6

00:00:22,240  -->  00:00:26,130
generic term because all animals can
move in some way, shape, or form.
7

7

00:00:26,130  -->  00:00:30,670
So lets go back to the dog class and
think how would a dog move.
8

8

00:00:30,670  -->  00:00:34,190
First one would be walk,
so public_void walk.
9

9

00:00:41,910  -->  00:00:43,290
But it would also have run as well.
10

10

00:00:53,890  -->  00:00:55,720
So what we might actually have,
11

11

00:00:55,720  -->  00:01:00,030
if we go back to our animal class what
might be smart is to accept a parameter,
12

12

00:01:00,030  -->  00:01:04,160
and the parameter might be the speed
perhaps that this animal is moving.
13

13

00:01:04,160  -->  00:01:11,560
So we can accept a parameter
called int_speed,
14

14

00:01:11,560  -->  00:01:16,600
which will add how fast it is, and
15

15

00:01:16,600  -->  00:01:22,200
we can put animal is moving at speed.
16

16

00:01:22,200  -->  00:01:24,320
So now we've got our parameters,
so we go back to the dog class.
17

17

00:01:24,320  -->  00:01:26,020
We might say if the dog class.
18

18

00:01:28,480  -->  00:01:29,160
Move.
19

19

00:01:29,160  -->  00:01:30,890
And now, it's gonna talk move,
20

20

00:01:30,890  -->  00:01:35,170
it's automatically found the method called
move, which is in the animal class.
21

21

00:01:36,450  -->  00:01:41,460
So I can either just call that
method directly like this,
22

22

00:01:41,460  -->  00:01:43,970
or I could put super.move.
23

23

00:01:43,970  -->  00:01:48,950
Generally speaking,
it's better to use move.
24

24

00:01:48,950  -->  00:01:53,750
Because that then means if you overwrite
the move function at a later time for dog,
25

25

00:01:53,750  -->  00:01:56,460
it's gonna correctly
call that move method.
26

26

00:01:56,460  -->  00:01:57,380
So let me show you what I mean.
27

27

00:01:57,380  -->  00:01:58,840
So first, I'm gonna call it like this.
28

28

00:01:58,840  -->  00:02:00,900
So let's just say a walk.
29

29

00:02:00,900  -->  00:02:02,800
And again, the number doesn't
necessarily mean anything.
30

30

00:02:02,800  -->  00:02:05,420
Let's just assume that
it's just a unit of speed.
31

31

00:02:05,420  -->  00:02:09,900
So I'm gonna say,
it's a 5 when they're walking, like so.
32

32

00:02:09,900  -->  00:02:17,340
And down for running, so running is
maybe two times the speed, make it 10.
33

33

00:02:17,340  -->  00:02:24,410
So if I got back and run this,
we put dog.walk, run that.
34

34

00:02:27,430  -->  00:02:30,060
Dog.walk has been called,
animal is moving at 5.
35

35

00:02:30,060  -->  00:02:32,460
And likewise if we did a dog.run.
36

36

00:02:35,740  -->  00:02:39,310
Dog.run called, animal is moving at 10.
37

37

00:02:39,310  -->  00:02:43,090
And just to be clear, what we could
probably have done is we could put.
38

38

00:02:45,390  -->  00:02:48,290
Animal.move called.
39

39

00:02:51,070  -->  00:02:53,810
Just to be clear which
method is being called.
40

40

00:02:55,770  -->  00:02:59,080
You can't quite see that but
basic animal is moving at five or ten,
41

41

00:02:59,080  -->  00:03:02,820
you can see Animal.move and
Animal.move has been called.
42

42

00:03:02,820  -->  00:03:06,650
So, the reason,
getting back to the dog class,
43

43

00:03:06,650  -->  00:03:11,060
if I leave this at move
instead of putting super.move.
44

44

00:03:11,060  -->  00:03:14,510
The reason I'm gonna do that would be,
at some point in the future,
45

45

00:03:14,510  -->  00:03:19,050
I might decide I need to create something,
some characteristics, something unique for
46

46

00:03:19,050  -->  00:03:20,580
this dog class, for moving.
47

47

00:03:21,890  -->  00:03:24,670
So, for example, if we go to Overwrite,
48

48

00:03:24,670  -->  00:03:27,870
we want to overwrite
the move method this time.
49

49

00:03:27,870  -->  00:03:32,240
You will notice I have got the option just
to overwrite that, then I select that one.
50

50

00:03:32,240  -->  00:03:37,210
What we might start to do there
is personally would indicate
51

51

00:03:37,210  -->  00:03:39,300
also dog.move called.
52

52

00:03:39,300  -->  00:03:44,070
We might decide to do
something like MoveLegs,
53

53

00:03:44,070  -->  00:03:48,360
cuz obviously, a dog use its legs to move.
54

54

00:03:48,360  -->  00:03:51,020
And maybe,
that would be the speed as well.
55

55

00:03:51,020  -->  00:03:54,040
So it would create
a method called moveLegs.
56

56

00:04:05,160  -->  00:04:05,860
Something like that.
57

57

00:04:05,860  -->  00:04:07,980
So now, if we run the move, so
58

58

00:04:07,980  -->  00:04:13,900
you see what I've got now is I've created
now a method move in the dog class itself.
59

59

00:04:13,900  -->  00:04:17,180
So what should happen is this
will now be executed first,
60

60

00:04:17,180  -->  00:04:21,340
the move method because we've actually
created that now in this class.
61

61

00:04:21,340  -->  00:04:24,320
And in the case of walk,
I've got super dog move.
62

62

00:04:24,320  -->  00:04:25,980
And in the case of run, I've got move.
63

63

00:04:25,980  -->  00:04:29,380
So let's go back and look at our code.
64

64

00:04:29,380  -->  00:04:31,900
I'm gonna change this
first sign to dog.run.
65

65

00:04:36,020  -->  00:04:39,900
Dog.run called, then dog.move was called.
66

66

00:04:39,900  -->  00:04:43,840
Dog.moveLegs was called and
Animal.move was called.
67

67

00:04:43,840  -->  00:04:47,760
Getting back to our code,
so back in the run method,
68

68

00:04:47,760  -->  00:04:50,980
you can see we just
called the method move.
69

69

00:04:50,980  -->  00:04:54,140
So what happened was move,
because we didn't have the super keyword.
70

70

00:04:54,140  -->  00:04:55,080
It knew that I can.
71

71

00:04:55,080  -->  00:04:57,600
I'm gonna take this,
whichever move I can find.
72

72

00:04:57,600  -->  00:05:00,880
If there's a move method in here,
I'm going to execute that.
73

73

00:05:00,880  -->  00:05:03,480
Otherwise, I'm going to execute
the super one automatically.
74

74

00:05:03,480  -->  00:05:06,890
In other words, the move method
that's in the animal class.
75

75

00:05:06,890  -->  00:05:08,790
And that's what happened, in this case.
76

76

00:05:08,790  -->  00:05:14,970
And just to confirm that,
we could also comment that code out,
77

77

00:05:14,970  -->  00:05:19,640
that last line, and
go back and run that again.
78

78

00:05:19,640  -->  00:05:22,610
We should have commented that out as well.
79

79

00:05:22,610  -->  00:05:23,110
Try again.
80

80

00:05:25,410  -->  00:05:28,330
You can see what's happened here,
..run was called, but
81

81

00:05:28,330  -->  00:05:29,830
now animal.move was called.
82

82

00:05:29,830  -->  00:05:32,710
Because it couldn't find the method move,
because it wasn't there,
83

83

00:05:32,710  -->  00:05:34,150
it didn't exist in this dog class.
84

84

00:05:34,150  -->  00:05:38,400
It automatically went a searched and found
one in the animal class and executed that.
85

85

00:05:39,440  -->  00:05:44,280
And again, if I just un-comment that and
86

86

00:05:44,280  -->  00:05:46,820
run that again,
I have to see that in operation.
87

87

00:05:49,060  -->  00:05:50,760
Now, it's calling Dog.move.
88

88

00:05:50,760  -->  00:05:53,940
Dog.moveLegs were called Animal.move.
89

89

00:05:53,940  -->  00:05:58,060
So you're starting to get the idea now,
how methods can be called, depending how
90

90

00:05:58,060  -->  00:06:02,420
you set this up, either in the class
you're working in or in the super class.
91

91

00:06:02,420  -->  00:06:04,390
It really does depend
how that's been setup.
92

92

00:06:04,390  -->  00:06:05,870
So we're going back to
our Dog class again.
93

93

00:06:05,870  -->  00:06:09,120
You remember that in this
case Super.move it is called,
94

94

00:06:09,120  -->  00:06:11,750
so even though we have
got a move method set up,
95

95

00:06:11,750  -->  00:06:15,150
we are actually telling it not
to look at the current class.
96

96

00:06:15,150  -->  00:06:19,660
We are saying super.move which says
only execute the move method in
97

97

00:06:19,660  -->  00:06:21,490
the super class.
98

98

00:06:21,490  -->  00:06:25,010
So if we go now and
actually run that and use the .walk so
99

99

00:06:25,010  -->  00:06:28,020
I'll comment that out and un-comment that.
100

100

00:06:28,020  -->  00:06:30,220
So now I've just got the dog.walk and
101

101

00:06:30,220  -->  00:06:33,310
I'll stop the dog eating just
to save a bit of output.
102

102

00:06:33,310  -->  00:06:34,810
So if I run that now,
103

103

00:06:34,810  -->  00:06:39,320
see I can say dog.walk was
called animal.move was called.
104

104

00:06:39,320  -->  00:06:44,740
So, even though we've defined the method
here called move in the Dog class,
105

105

00:06:44,740  -->  00:06:49,170
what's happened is we used
the super keyword, super.move.
106

106

00:06:49,170  -->  00:06:53,920
So in that case, what we're saying to Java
is don't try and execute the move method.
107

107

00:06:53,920  -->  00:06:57,970
If there is one in this class,
automatically go to the super class.
108

108

00:06:57,970  -->  00:07:02,260
In other words, the class we're
extending from, inheriting from,
109

109

00:07:02,260  -->  00:07:04,090
which in this case is animal.
110

110

00:07:04,090  -->  00:07:08,710
So you can see here now that what we've
done with the dog class is we've created
111

111

00:07:08,710  -->  00:07:11,510
a class that is still
based on the animal class.
112

112

00:07:11,510  -->  00:07:14,860
In that, it's got these base
characteristics of the name, the brain,
113

113

00:07:14,860  -->  00:07:16,630
the body, the size, and the weight.
114

114

00:07:16,630  -->  00:07:21,560
But in addition, it defines some extra
fields, eyes, legs, tail, teeth, coat,
115

115

00:07:21,560  -->  00:07:23,550
that are applicable only to a dog.
116

116

00:07:23,550  -->  00:07:26,350
And have also defined some behavior,
like chew,
117

117

00:07:26,350  -->  00:07:31,050
walk and run, which are specific to dogs,
move legs, which was specific to dogs.
118

118

00:07:31,050  -->  00:07:34,110
But we have also overwritten
some functionality.
119

119

00:07:34,110  -->  00:07:37,960
In other words, what we have done
here is we have created a method
120

120

00:07:37,960  -->  00:07:41,110
of the same name as the method
from the animal class.
121

121

00:07:41,110  -->  00:07:46,050
But we have overwritten that with our
own unique implementation, which has,
122

122

00:07:46,050  -->  00:07:49,210
in this case,
added the a call to the chew method.
123

123

00:07:49,210  -->  00:07:51,480
So, for the dog chewing mechanism,
but then,
124

124

00:07:51,480  -->  00:07:53,710
it's also calling the super functionality.
125

125

00:07:53,710  -->  00:07:56,570
In other words, the eat method
from the super class, as well.
126

126

00:07:56,570  -->  00:07:57,630
So, that's certainly optional.
127

127

00:07:57,630  -->  00:08:00,530
You don't have to call
the code in the super class.
128

128

00:08:00,530  -->  00:08:03,610
But often,
you want to do that to initialize that or
129

129

00:08:03,610  -->  00:08:07,120
to perform that basic
functionality in that basic class.
130

130

00:08:07,120  -->  00:08:08,290
And that's how you do it,
131

131

00:08:08,290  -->  00:08:11,900
you can separate the functionality that's
unique toward dog and the dog class.
132

132

00:08:11,900  -->  00:08:15,650
But anything that's generic and
specific to an animal, in this case,
133

133

00:08:15,650  -->  00:08:18,030
we've shifted that off
to the animal class.
134

134

00:08:18,030  -->  00:08:21,930
So let's now just do one more example
of a class that inherits from animal.
135

135

00:08:21,930  -->  00:08:24,210
Let's create a class called fish.
136

136

00:08:24,210  -->  00:08:27,150
So fish is an animal, so
we're gonna extend from animal.
137

137

00:08:29,110  -->  00:08:30,620
We'll call it fish.
138

138

00:08:30,620  -->  00:08:33,690
So what are some unique
characteristics of a fish?
139

139

00:08:33,690  -->  00:08:35,300
Well, let's go with a couple Int.
140

140

00:08:37,370  -->  00:08:38,770
Private int gills.
141

141

00:08:38,770  -->  00:08:40,010
Fish have got gills.
142

142

00:08:40,010  -->  00:08:42,990
And they've got eyes, so
we need to define those.
143

143

00:08:42,990  -->  00:08:47,090
Private int fins, fin or fins.
144

144

00:08:47,090  -->  00:08:51,320
So what we'll do now is we'll
type extends_animal, and
145

145

00:08:51,320  -->  00:08:57,550
we're getting that arrow again now because
it wants that constructor to be fixed up.
146

146

00:08:57,550  -->  00:09:02,680
No default constructor, so
we need to create a constructor,
147

147

00:09:02,680  -->  00:09:05,450
and we'll specify those three.
148

148

00:09:05,450  -->  00:09:07,870
Now, I want you to see what
happened when I did that.
149

149

00:09:07,870  -->  00:09:11,840
Automatically, it's initialized
our three parameters, but
150

150

00:09:11,840  -->  00:09:15,150
it's also initialized
the other three parameters.
151

151

00:09:15,150  -->  00:09:18,430
The other five parameters from
our super class, as well.
152

152

00:09:18,430  -->  00:09:19,370
And if you recall,
153

153

00:09:19,370  -->  00:09:22,870
we decided previously that we weren't
going to define brand and body.
154

154

00:09:22,870  -->  00:09:24,470
We're gonna do the same.
155

155

00:09:24,470  -->  00:09:28,780
One, maybe one,
if I were to find that again, and
156

156

00:09:28,780  -->  00:09:32,480
we'll take those out of the constructor.
157

157

00:09:35,780  -->  00:09:38,140
I'll delete that so
there's a little bit more space.
158

158

00:09:38,140  -->  00:09:39,720
So, very similar to the dog class.
159

159

00:09:39,720  -->  00:09:44,950
But in this case, we've created a new fish
class that inherits from the animal class,
160

160

00:09:44,950  -->  00:09:49,330
and we've defined some unique
characteristics for the fish, namely,
161

161

00:09:49,330  -->  00:09:50,910
gills, eyes, and fins.
162

162

00:09:50,910  -->  00:09:53,090
And we could do something
similar with methods.
163

163

00:09:53,090  -->  00:09:54,410
We could create some.
164

164

00:09:54,410  -->  00:09:57,810
For example, there's a rest method,
because fish rest.
165

165

00:09:57,810  -->  00:09:59,250
They don't necessarily sleep.
166

166

00:09:59,250  -->  00:10:00,870
Now, let's try rest.
167

167

00:10:03,210  -->  00:10:06,010
And create another one, swim.
168

168

00:10:06,010  -->  00:10:07,890
They're moving or
swimming instead of walking or running.
169

169

00:10:09,450  -->  00:10:14,920
And so for swimming,
we might have something like private
170

170

00:10:14,920  -->  00:10:20,060
void moveMuscles,
because that's how a fish moves,
171

171

00:10:20,060  -->  00:10:23,870
combination of moving its muscles, and
172

172

00:10:23,870  -->  00:10:29,140
it also needs to use its back fin,
so void move BackFin.
173

173

00:10:32,800  -->  00:10:36,540
So therefore, our swim method.
174

174

00:10:36,540  -->  00:10:38,860
To swim is a concept
of moving the muscles.
175

175

00:10:38,860  -->  00:10:41,920
So we're gonna call moveMuscles, and
then, we're going to moveBackFin.
176

176

00:10:46,160  -->  00:10:51,930
And we wanna put the speed,
how fast they are swimming.
177

177

00:10:51,930  -->  00:10:57,100
So after we're doing that,
the net result is the movement,
178

178

00:10:57,100  -->  00:11:01,160
and we're gonna call super.move(speed).
179

179

00:11:01,160  -->  00:11:03,380
So that would be one way to
model the swimming event.
180

180

00:11:03,380  -->  00:11:07,400
So the concept of moving for
a fish is to swim.
181

181

00:11:07,400  -->  00:11:10,000
So it moves its muscles and
it moves the back fin,
182

182

00:11:10,000  -->  00:11:13,060
which the net result of that
it actually propels itself.
183

183

00:11:13,060  -->  00:11:14,820
In other words, it's got some velocity.
184

184

00:11:14,820  -->  00:11:18,620
And we are calling the super method
from the animal class to move.
185

185

00:11:18,620  -->  00:11:22,860
To be able to move that, and to move this
fish to propel it in a certain direction.
186

186

00:11:22,860  -->  00:11:25,610
And rest is a similar thing, I guess,
187

187

00:11:25,610  -->  00:11:29,140
we could have defined
sleep in the animal class.
188

188

00:11:29,140  -->  00:11:33,070
The reason I didn't do that is fish,
generally, don't sleep.
189

189

00:11:33,070  -->  00:11:37,780
They actually rest, so it's actually not
probably appropriate to put a sleep method
190

190

00:11:37,780  -->  00:11:42,370
or a state in the animal class because not
all animals as we have defined necessarily
191

191

00:11:42,370  -->  00:11:47,250
sleep, at least in that same fashion that
we are used to when we use the term sleep.
192

192

00:11:47,250  -->  00:11:51,140
A dog that would be appropriate to
put sleep in here because, of course,
193

193

00:11:51,140  -->  00:11:52,500
dogs do sleep.
194

194

00:11:52,500  -->  00:11:55,220
So you can see that you could take this,
you can actually extend this out.
195

195

00:11:55,220  -->  00:12:00,240
We can even have specific types of dogs
that extended on from the dog class.
196

196

00:12:00,240  -->  00:12:04,660
We could have like a Yorkie dog for
an for like an or a Labrador.
197

197

00:12:04,660  -->  00:12:06,660
That has the unique
characteristics of a dog.
198

198

00:12:06,660  -->  00:12:09,690
So you can keep extending on,
and on, and on if you want to.
199

199

00:12:09,690  -->  00:12:10,530
As you'll see,
200

200

00:12:10,530  -->  00:12:14,510
when we start getting to the stage of this
course Start Creating Some Real Apps,
201

201

00:12:14,510  -->  00:12:18,140
you'll see that you wanna take care
to make sure you're still using this
202

202

00:12:18,140  -->  00:12:22,260
the same way, and you're not making
things overly complicated unnecessarily.
203

203

00:12:22,260  -->  00:12:24,050
But that comes with experience, and
204

204

00:12:24,050  -->  00:12:27,100
we'll certainly be talking about
that more in future videos.
205

205

00:12:27,100  -->  00:12:31,640
The main thing is to get a good handle
on the concept of inheritance and
206

206

00:12:31,640  -->  00:12:35,240
how we're taking the base
characteristics defined.
207

207

00:12:35,240  -->  00:12:39,380
In this case, in the animal class,
then we're extending from or
208

208

00:12:39,380  -->  00:12:44,290
inheriting from that class to create
a new class that inherits those states.
209

209

00:12:44,290  -->  00:12:48,490
In other words, the fields and
also the behaviors, which is the methods,
210

210

00:12:48,490  -->  00:12:50,370
which we can use in our new class.
211

211

00:12:50,370  -->  00:12:54,930
And then we can, of course, then add new
methods and new fields to that new class,
212

212

00:12:54,930  -->  00:12:56,790
as well, very, very powerful.
213

213

00:12:56,790  -->  00:12:59,490
And you'll see that in
operation in future videos,
214

214

00:12:59,490  -->  00:13:02,500
in future apps that we're
gonna create in this course.
215

215

00:13:02,500  -->  00:13:04,350
So, we're gonna end this video here now.
216

216

00:13:04,350  -->  00:13:05,940
In the next video, it's challenge time.
217

217

00:13:05,940  -->  00:13:11,160
I'm gonna challenge you now to create some
classes similar to what we've done today,
218

218

00:13:11,160  -->  00:13:13,670
create a base class and extend from that.
219

219

00:13:13,670  -->  00:13:17,520
In other words, inherit from that class
but to do something completely different
220

220

00:13:17,520  -->  00:13:20,710
to our example that we've been using,
which of course is animals.
221

221

00:13:20,710  -->  00:13:22,370
So, I'll see you in that next video.
