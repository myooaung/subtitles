1
1

00:00:04,069  -->  00:00:07,109
Alright, so let's discuss the main
2

2

00:00:07,109  -->  00:00:09,360
differences between an abstract class in
3

3

00:00:09,360  -->  00:00:11,820
an interface and when to use either of
4

4

00:00:11,820  -->  00:00:13,740
them and this should hopefully give you
5

5

00:00:13,740  -->  00:00:16,430
a better overall understanding of both.
6

6

00:00:16,430  -->  00:00:20,039
So firstly an abstract class well these
7

7

00:00:20,039  -->  00:00:22,350
are very similar to interfaces, you
8

8

00:00:22,350  -->  00:00:24,630
cannot instantiate them and they may
9

9

00:00:24,630  -->  00:00:26,580
contain a mix of methods declared with
10

10

00:00:26,580  -->  00:00:29,130
or without an implementation.
11

11

00:00:29,130  -->  00:00:31,980
However, with abstract classes you can
12

12

00:00:31,980  -->  00:00:33,960
declare fields that are not static and
13

13

00:00:33,960  -->  00:00:37,170
final and define public protected and
14

14

00:00:37,170  -->  00:00:40,320
private concrete methods, your abstract
15

15

00:00:40,320  -->  00:00:42,510
class can extend only one parent class,
16

16

00:00:42,510  -->  00:00:45,030
however it can implement multiple
17

17

00:00:45,030  -->  00:00:47,640
interfaces. Now when an abstract class is
18

18

00:00:47,640  -->  00:00:51,120
subclassed, the subclass usually provides
19

19

00:00:51,120  -->  00:00:53,579
implementations for all of the abstract
20

20

00:00:53,579  -->  00:00:56,789
methods in its parent class. However if
21

21

00:00:56,789  -->  00:00:59,910
it doesn't, then the subclass must also
22

22

00:00:59,910  -->  00:01:03,420
be declared abstract. So you want to use
23

23

00:01:03,420  -->  00:01:05,790
an abstract class when firstly you want
24

24

00:01:05,790  -->  00:01:08,040
to share code among several closely
25

25

00:01:08,040  -->  00:01:10,799
related classes animal for example with
26

26

00:01:10,799  -->  00:01:13,350
fields, name, age and so on or if you
27

27

00:01:13,350  -->  00:01:16,140
expect classes that extend your abstract
28

28

00:01:16,140  -->  00:01:18,509
class to have many common methods or
29

29

00:01:18,509  -->  00:01:21,420
fuels or required access modifiers other
30

30

00:01:21,420  -->  00:01:24,450
than public, so protected in private may
31

31

00:01:24,450  -->  00:01:26,130
also want to use an abstract class when
32

32

00:01:26,130  -->  00:01:28,320
you want to declare non static or non
33

33

00:01:28,320  -->  00:01:30,450
final fields, for example a name and age
34

34

00:01:30,450  -->  00:01:32,579
so this then enables you to define
35

35

00:01:32,579  -->  00:01:36,150
methods that can access and modify the
36

36

00:01:36,150  -->  00:01:38,400
state of an object, you know get names
37

37

00:01:38,400  -->  00:01:42,060
set name and so forth and also you may
38

38

00:01:42,060  -->  00:01:43,320
want to use an abstract class when
39

39

00:01:43,320  -->  00:01:45,329
you've got a requirement for your base
40

40

00:01:45,329  -->  00:01:46,829
class to provide a default
41

41

00:01:46,829  -->  00:01:49,350
implementation of certain methods but
42

42

00:01:49,350  -->  00:01:51,390
other methods should be open to being
43

43

00:01:51,390  -->  00:01:54,869
overridden by child classes. And so,
44

44

00:01:54,869  -->  00:01:56,850
general summary the purpose of an
45

45

00:01:56,850  -->  00:01:59,130
abstract class is to provide a common
46

46

00:01:59,130  -->  00:02:02,520
definition of a base class that multiple
47

47

00:02:02,520  -->  00:02:06,229
derived classes can share. Alright,
48

48

00:02:06,229  -->  00:02:09,300
interfaces, so an interface is just the
49

49

00:02:09,300  -->  00:02:11,640
declaration of methods of a class,
50

50

00:02:11,640  -->  00:02:13,650
it's not the implementation.
51

51

00:02:13,650  -->  00:02:15,959
You know in an interface, we defined what
52

52

00:02:15,959  -->  00:02:18,659
kind of operation an object can perform.
53

53

00:02:18,659  -->  00:02:21,299
now these operations are defined by the
54

54

00:02:21,299  -->  00:02:24,540
classes that implement the interface,
55

55

00:02:24,540  -->  00:02:26,970
so interfaces form a contract between the
56

56

00:02:26,970  -->  00:02:29,459
class and the outside world and this
57

57

00:02:29,459  -->  00:02:32,099
contract is enforced at build time by
58

58

00:02:32,099  -->  00:02:34,590
the Java compiler. Now you cannot
59

59

00:02:34,590  -->  00:02:37,290
instantiate interfaces and they may
60

60

00:02:37,290  -->  00:02:39,000
contain a mix of methods declared with
61

61

00:02:39,000  -->  00:02:41,670
or without an implementation. Now all
62

62

00:02:41,670  -->  00:02:43,760
methods and interfaces are automatically
63

63

00:02:43,760  -->  00:02:47,099
public and abstract. Now an interface can
64

64

00:02:47,099  -->  00:02:50,099
extend another interface. Interfaces are
65

65

00:02:50,099  -->  00:02:52,079
more flexible and can deal with a lot
66

66

00:02:52,079  -->  00:02:53,400
more stress on the design of your
67

67

00:02:53,400  -->  00:02:56,489
program than the implementation. Now by
68

68

00:02:56,489  -->  00:02:58,739
introducing interfaces into your program,
69

69

00:02:58,739  -->  00:03:00,959
you're really introducing points of
70

70

00:03:00,959  -->  00:03:03,209
variation at which you can plug in
71

71

00:03:03,209  -->  00:03:04,739
different implementations for that
72

72

00:03:04,739  -->  00:03:07,379
interface. Now our interfaces primary
73

73

00:03:07,379  -->  00:03:09,840
purpose is abstraction decoupling the
74

74

00:03:09,840  -->  00:03:13,230
what from the hell and just a couple of
75

75

00:03:13,230  -->  00:03:15,290
general notes here, since Java 8
76

76

00:03:15,290  -->  00:03:17,400
interfaces can now contain default
77

77

00:03:17,400  -->  00:03:19,530
methods, so in other words methods with
78

78

00:03:19,530  -->  00:03:21,720
implementation. Now the keyword default
79

79

00:03:21,720  -->  00:03:23,760
is used mostly for backwards
80

80

00:03:23,760  -->  00:03:26,040
compatibility and static methods as well
81

81

00:03:26,040  -->  00:03:28,139
before Java 8, that wasn't possible
82

82

00:03:28,139  -->  00:03:31,650
and since Java 9 and interface can also
83

83

00:03:31,650  -->  00:03:34,169
contain private methods commonly used
84

84

00:03:34,169  -->  00:03:36,449
when to default methods in an interface
85

85

00:03:36,449  -->  00:03:40,019
share common code. Alright, so when do you
86

86

00:03:40,019  -->  00:03:41,940
want to use an interface, Well, firstly
87

87

00:03:41,940  -->  00:03:44,099
when you expect that unrelated classes
88

88

00:03:44,099  -->  00:03:46,500
will implement your interface,
89

89

00:03:46,500  -->  00:03:48,870
for example, the interface is comparable and
90

90

00:03:48,870  -->  00:03:51,359
cloneable are implemented by many
91

91

00:03:51,359  -->  00:03:54,900
unrelated classes. Now another reason to
92

92

00:03:54,900  -->  00:03:56,159
use an interface is when you want to
93

93

00:03:56,159  -->  00:03:59,459
specify the behavior of a particular datatype
94

94

00:03:59,459  -->  00:04:01,139
but you're not concerned about who
95

95

00:04:01,139  -->  00:04:03,989
implements its behavior, still another
96

96

00:04:03,989  -->  00:04:05,940
reason for using an interface if you
97

97

00:04:05,940  -->  00:04:08,849
want to separate different behavior.
98

98

00:04:08,849  -->  00:04:10,590
Now the collections API in Java is an
99

99

00:04:10,590  -->  00:04:13,590
excellent example of interfaces, we've
100

100

00:04:13,590  -->  00:04:14,959
got the list interface and
101

101

00:04:14,959  -->  00:04:17,239
implementations arraylist and linkedlist
102

102

00:04:17,239  -->  00:04:19,699
and more on this later in the course.
103

103

00:04:19,699  -->  00:04:24,180
Another example is the JDBC API, now that
104

104

00:04:24,180  -->  00:04:27,090
exists of almost only interfaces,
105

105

00:04:27,090  -->  00:04:29,010
the concrete implementation of methods are
106

106

00:04:29,010  -->  00:04:32,910
provided as JDBC drivers, so that enables
107

107

00:04:32,910  -->  00:04:34,650
you to write all the JDBC code
108

108

00:04:34,650  -->  00:04:37,199
independent of the database the DB
109

109

00:04:37,199  -->  00:04:39,540
vendor and you'll learn more about JDBC
110

110

00:04:39,540  -->  00:04:42,150
in this course.  Alright so that's the
111

111

00:04:42,150  -->  00:04:44,669
differences between abstract classes and
112

112

00:04:44,669  -->  00:04:49,190
interfaces. Let's move on now to the next video.
