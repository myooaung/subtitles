1
1

00:00:05,180  -->  00:00:09,910
so in the main method that time we wrote
just at the end of the previous video we
2

2

00:00:09,910  -->  00:00:13,670
created the shared buffer an instance of
the producer class as well as two
3

3

00:00:13,670  -->  00:00:19,400
instances of the consumer class now we
passed that same buffer which we've
4

4

00:00:19,400  -->  00:00:24,410
created within an array list that's the one
on line 13 to all three instances
5

5

00:00:25,100  -->  00:00:30,590
then we create a thread for the producer
and start it and we create 2 consumer
6

6

00:00:30,590  -->  00:00:32,480
threads and start them
7

7

00:00:32,480  -->  00:00:36,590
so at this point we've learned enough
about concurrency to know that we really
8

8

00:00:36,590  -->  00:00:39,620
are going to run into problems when we
try to run this application
9

9

00:00:40,550  -->  00:00:45,170
three threads are showing the same
arraylist now one's writing to it until
10

10

00:00:45,170  -->  00:00:49,640
reading from it and if we look at the
documentation for array list remember we
11

11

00:00:49,640  -->  00:00:58,460
did discuss this in a previous video we
notice down here this class is roughly
12

12

00:00:58,460  -->  00:01:02,420
equivalent to revector except that
it's unsynchronized and that's the point
13

13

00:01:02,420  -->  00:01:07,120
we made previously so the arraylist
itself isn't synchronized
14

14

00:01:07,120  -->  00:01:11,900
but even if it was when a class is
synchronized or thread safe
15

15

00:01:11,900  -->  00:01:16,460
we can be confident that each time a
thread calls method in the class
16

16

00:01:16,460  -->  00:01:21,560
no other threads will be able to run a
method in the class until the first
17

17

00:01:21,560  -->  00:01:23,860
thread is finished executing the method
18

18

00:01:23,860  -->  00:01:28,790
so in other words if thread A is
running synchronized method X in class
19

19

00:01:28,790  -->  00:01:34,310
y then thread b cant run any methods
in class y until thread a has finished
20

20

00:01:34,310  -->  00:01:38,500
running method X and that's even if
thread a is suspended
21

21

00:01:39,020  -->  00:01:42,610
now it doesn't mean that if thread a
would have called three methods in a row
22

22

00:01:42,610  -->  00:01:46,280
in class y it can run all three
methods without worrying about
23

23

00:01:46,280  -->  00:01:51,430
interference from another thread if
thread a is suspended after it's finished
24

24

00:01:51,430  -->  00:01:56,390
running a method in class y another
thread can run a method in class y
25

25

00:01:56,390  -->  00:01:59,810
before thread a has the chance to run
again
26

26

00:01:59,810  -->  00:02:04,880
so in other words the following can
happen when using a class its class y
27

27

00:02:04,880  -->  00:02:10,340
that synchronized or synchronized thread-safe so thread a
28

28

00:02:10,340  -->  00:02:16,870
runs a method in class y thread b
runs a method in class y thread a runs a method
29

29

00:02:16,870  -->  00:02:20,950
in class y and again that that can happen
in the case of them being synchronized
30

30

00:02:20,950  -->  00:02:22,360
and thread safe
31

31

00:02:22,360  -->  00:02:26,440
so how does this apply to our
application so let's just go back to the
32

32

00:02:26,440  -->  00:02:27,310
code again
33

33

00:02:27,310  -->  00:02:32,110
so the consumer class calls the array
list is empty method and just go down
34

34

00:02:32,110  -->  00:02:35,700
and have a look at the consumer class
so its calling this buffer.isempty
35

35

00:02:35,700  -->  00:02:39,510
which is ultimately is an array
list is empty method and then it calls
36

36

00:02:39,510  -->  00:02:42,900
remove or get as you can see in the code
below that
37

37

00:02:43,450  -->  00:02:47,110
now that could be suspended after
calling isempty
38

38

00:02:47,110  -->  00:02:51,840
giving the producer or consumer the
opportunity to change the contents of
39

39

00:02:51,840  -->  00:02:57,220
the arraylist so given that scenario we
can see that one potential problem could
40

40

00:02:57,220  -->  00:03:02,310
be as follows the producer adds a string
to the buffer consumer one might call is
41

41

00:03:02,310  -->  00:03:08,470
empty and then that returns false or
consumer one is suspended or consumer 2
42

42

00:03:08,470  -->  00:03:13,810
calls is empty and it returns false or
consumer 2 remove the string consumer
43

43

00:03:13,810  -->  00:03:18,570
2 is suspended and consumer one runs again
and calls get 0
44

44

00:03:18,570  -->  00:03:23,380
the one that's on line 67 and oops
there's no data so we get an index
45

45

00:03:23,380  -->  00:03:24,810
out of bounds exception
46

46

00:03:24,810  -->  00:03:28,060
that's just one potential problem that
could happen here
47

47

00:03:28,060  -->  00:03:33,250
there are other potential problems
another one would be both consumers try
48

48

00:03:33,250  -->  00:03:37,200
to remove the same string and again the
point here is to remember that
49

49

00:03:37,200  -->  00:03:42,010
arraylist isn't thread safe so it's
certainly possible for one thread to be
50

50

00:03:42,010  -->  00:03:46,260
suspended while in the middle of running
the remove method before the item has
51

51

00:03:46,260  -->  00:03:51,280
actually been removed from the arraylist
so keeping that in mind let's just run
52

52

00:03:51,280  -->  00:03:53,290
this application and see what happens
53

53

00:03:53,290  -->  00:03:58,260
and the results I can tell you up
front now will depend on timing
54

54

00:03:58,260  -->  00:04:02,730
so we could get lucky and find that the
application runs fine or we might get an
55

55

00:04:02,730  -->  00:04:07,000
exception but the consumers don't remove
the data correctly and loop indefinitely
56

56

00:04:07,000  -->  00:04:09,940
more likely will get an index out of
bounds exception
57

57

00:04:09,940  -->  00:04:14,070
let's just run this and we might also
find that the application may not
58

58

00:04:14,070  -->  00:04:16,690
terminate and we might have to stop it
manually
59

59

00:04:16,690  -->  00:04:20,380
so I'm going to run the application a
few times and just see what happens and
60

60

00:04:20,380  -->  00:04:22,590
we should probably get a different output each time
61

61

00:04:22,590  -->  00:04:26,440
the only thing that we know for sure
with this running these
62

62

00:04:26,440  -->  00:04:27,880
tests is that
63

63

00:04:27,880  -->  00:04:37,120
we need to prevent thread interference
so let's run that first time we've run it
64

64

00:04:37,120  -->  00:04:42,400
we've got a problem here you can see we start
adding some number we removed one we're going
65

65

00:04:42,400  -->  00:04:44,180
to index out of bounds problem
66

66

00:04:44,180  -->  00:04:47,090
so let's just run this again actually we will stop now because it's not
67

67

00:04:47,090  -->  00:04:48,680
hasn't stopped properly
68

68

00:04:48,680  -->  00:04:54,910
we'll run it again ok
69

69

00:04:54,910  -->  00:04:57,910
run it again
70

70

00:05:04,760  -->  00:05:08,840
you can see that example there the
program didn't get to do the final
71

71

00:05:08,840  -->  00:05:12,290
processing so you can see we are getting
different output each time we run this
72

72

00:05:12,290  -->  00:05:15,800
and obviously the program is not working
as it should be
73

73

00:05:15,800  -->  00:05:19,490
so really the only thing we know for
sure here is that we need to prevent the
74

74

00:05:19,490  -->  00:05:22,310
thread interference it's very
inconsistent in the results that is
75

75

00:05:22,310  -->  00:05:26,090
currently producing so let's start by
doing what we've already learned
76

76

00:05:26,090  -->  00:05:30,650
we're going to close down the run window
now we will use the synchronized blocks
77

77

00:05:30,650  -->  00:05:36,170
and will need to add synchronization to
both the producer and the consumer and
78

78

00:05:36,170  -->  00:05:40,010
thinking about it since they share the
arraylist it probably makes sense to
79

79

00:05:40,010  -->  00:05:42,470
synchronize on the arraylist instance
80

80

00:05:42,470  -->  00:05:45,560
so I was looking at the producer code
first
81

81

00:05:45,560  -->  00:05:49,370
so we're going to come here into the try
within the run itself
82

82

00:05:50,000  -->  00:05:53,570
so after we've output the message to
the console and instead of just doing the
83

83

00:05:53,570  -->  00:05:54,410
buffer.add
84

84

00:05:54,410  -->  00:05:57,410
lets do a synchronized.....
85

85

00:06:02,990  -->  00:06:10,090
....and we also
86

86

00:06:10,090  -->  00:06:14,330
want to add another synchronized block
down here because we're adding the eof
87

87

00:06:14,330  -->  00:06:23,180
so....
88

88

00:06:23,180  -->  00:06:26,300
...
89

89

00:06:26,300  -->  00:06:30,530
so essentially we've synchronized the
two calls to add because array list
90

90

00:06:30,530  -->  00:06:34,660
again isn't thread safe if we don't
synchronize and the producer is
91

91

00:06:34,660  -->  00:06:39,250
suspended in the middle of running the
add method and one of the consumers
92

92

00:06:39,250  -->  00:06:43,660
then calls get or remove the internal
integrity of the arraylist might be
93

93

00:06:43,660  -->  00:06:45,910
compromised again depending on timing
94

94

00:06:45,910  -->  00:06:50,900
so I synchronize adding the numbers to
the buffer up here as well as adding the
95

95

00:06:50,900  -->  00:06:55,520
eof character at the end we don't need
to include the print line and that's
96

96

00:06:55,520  -->  00:06:59,810
because if the producer is suspended
between printing the line and actually
97

97

00:06:59,810  -->  00:07:00,940
adding the data
98

98

00:07:00,940  -->  00:07:05,180
it won't matter a consumer could
read any existing data from the buffer
99

99

00:07:05,180  -->  00:07:09,560
in that case it won't change what the
producer adds when it runs again
100

100

00:07:09,560  -->  00:07:13,070
ok on to the consumer code so let's
bring them on the screen
101

101

00:07:13,630  -->  00:07:18,880
so what we want to do is we want to do synchronizes if buffer is empty
102

102

00:07:18,880  -->  00:07:20,030
code
103

103

00:07:20,030  -->  00:07:28,580
let's synchronize that so....and we are
104

104

00:07:28,580  -->  00:07:33,590
actually going to put the code all of
this code in the synchronized block
105

105

00:07:33,590  -->  00:07:38,590
we'll talk about that in a sec so
basically we got our while then
106

106

00:07:38,590  -->  00:07:43,610
everything is synchronized that it was in
that while loop into our synchronized
107

107

00:07:43,610  -->  00:07:44,990
block
108

108

00:07:44,990  -->  00:07:49,150
so yes we've included everything in that
block so we don't want the producer or
109

109

00:07:49,150  -->  00:07:54,400
another consumer to change the arraylist
once a consumer threads checked whether
110

110

00:07:54,400  -->  00:07:55,630
the buffer is empty
111

111

00:07:55,630  -->  00:07:59,180
so in other words we want all calls to
methods in array list to take place
112

112

00:07:59,710  -->  00:08:03,400
as a unit collectively and they're all
running in this critical section
113

113

00:08:03,400  -->  00:08:06,590
let's run this and see whether we fix
the problem or not
114

114

00:08:11,010  -->  00:08:16,080
you can see we've got a much better
result by adding that synchronized
115

115

00:08:16,080  -->  00:08:22,230
blocks just run it again just to make
sure that it wasn't a once of one more time
116

116

00:08:22,980  -->  00:08:27,510
clearly things are looking good
117

117

00:08:28,020  -->  00:08:32,160
so we can see there we saw there that
the thread interference no longer occurs
118

118

00:08:32,160  -->  00:08:35,460
the reason for that was because the
producers sleeps
119

119

00:08:35,460  -->  00:08:39,300
after adding a string usually a consumer
thread will have a chance at that point
120

120

00:08:39,300  -->  00:08:43,260
to remove the last string added before
the producers thread itself
121

121

00:08:43,260  -->  00:08:51,330
runs again and if we just do run this again
though you probably noticing there that
122

122

00:08:51,330  -->  00:08:56,160
sometimes only one consumer threads ever
had the chance to remove the data and
123

123

00:08:56,160  -->  00:08:59,160
they're both not necessarily getting the
chance to move the data each time
124

124

00:09:07,520  -->  00:09:10,370
you notice down here for example when
exiting they both had the chance to
125

125

00:09:10,370  -->  00:09:15,300
remove the item in the other
sections only one of the consumers has had
126

126

00:09:15,300  -->  00:09:19,520
the chance to remove it so we could
reduce the sleep time or remove the call
127

127

00:09:20,120  -->  00:09:24,420
if we wanted the if we want to produce to fill the buffer faster
128

128

00:09:24,420  -->  00:09:28,110
but in all cases you can see every
time I ran this all the threads exit
129

129

00:09:28,110  -->  00:09:33,140
gracefully and the application does
terminate normally before Java 1.5 and
130

130

00:09:33,140  -->  00:09:37,700
the introduction of the java.util.concurrent package synchronization
131

131

00:09:37,700  -->  00:09:41,390
was really the only error we had in our
quiver when it came to dealing with
132

132

00:09:41,390  -->  00:09:44,870
thread interference but it does still
have its drawbacks
133

133

00:09:44,870  -->  00:09:48,180
the first drawback is that threads that
are blocked
134

134

00:09:48,180  -->  00:09:51,180
waiting to execute synchronize code
can't be interrupted
135

135

00:09:51,870  -->  00:09:56,270
once they're blocked their stuck there
until they get the lock for the object
136

136

00:09:56,270  -->  00:09:59,970
the code is synchronizing on and if
you think about it that can lead to
137

137

00:09:59,970  -->  00:10:05,220
problems and we'll take a closer look at
those in a later lecture but the second
138

138

00:10:05,220  -->  00:10:10,550
drawback is that the synchronized block
must be within the same method in other
139

139

00:10:10,550  -->  00:10:14,000
words we can't start a synchronized
block in one method and end the
140

140

00:10:14,000  -->  00:10:16,640
synchronization block in another for
obvious reasons
141

141

00:10:16,640  -->  00:10:21,480
the third drawback is that we can't test
to see if an object's intrinsic lock is
142

142

00:10:21,480  -->  00:10:25,800
available or find out any other
information about that lock
143

143

00:10:26,300  -->  00:10:31,470
also if the lock isn't available we
can't timeout after we waited for the
144

144

00:10:31,470  -->  00:10:34,980
lock for a while when we reach the
beginning of a synchronized block
145

145

00:10:35,490  -->  00:10:40,310
we can either get the lock and continue
executing or block at that line of code
146

146

00:10:40,310  -->  00:10:46,050
until we get the lock and the fourth
drawback is that if multiple threads are
147

147

00:10:46,050  -->  00:10:47,670
waiting to get a lock
148

148

00:10:47,670  -->  00:10:52,700
it's not first come first served there
isn't a set order in which the jvm will
149

149

00:10:52,700  -->  00:10:55,860
choose the next thread that gets the
lock
150

150

00:10:55,860  -->  00:11:00,600
so the first thread that blocked could
be the last thread to get the lock and
151

151

00:11:00,600  -->  00:11:01,760
vice versa
152

152

00:11:01,760  -->  00:11:05,910
so instead of using synchronization we
can prevent thread interference using
153

153

00:11:05,910  -->  00:11:11,610
classes that implement the java.util.concurrent locks.lock interface
154

154

00:11:11,610  -->  00:11:14,160
so let's start looking at doing that in
the next video
