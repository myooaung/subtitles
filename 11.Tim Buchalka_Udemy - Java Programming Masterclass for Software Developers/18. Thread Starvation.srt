1
1

00:00:05,420  -->  00:00:08,930
let's talk about the next problem that
we're going to do or that can
2

2

00:00:08,930  -->  00:00:11,180
arise when working with threads
3

3

00:00:11,180  -->  00:00:15,650
that's called starvation now when
starvation occurs it's not that threads
4

4

00:00:15,650  -->  00:00:19,730
will never progress because they'll
never get a lock but that they rarely
5

5

00:00:19,730  -->  00:00:22,690
have the opportunity to run and progress
6

6

00:00:22,690  -->  00:00:28,490
so starvation often occurs due to thread
priority when we assign a high priority
7

7

00:00:28,490  -->  00:00:33,890
priority as to a thread we are suggesting to
the operating system that it should try
8

8

00:00:33,890  -->  00:00:37,190
and run the thread before other waiting
threads
9

9

00:00:37,190  -->  00:00:40,900
remember that when we use
synchronized blocks it's not
10

10

00:00:40,900  -->  00:00:44,960
first come first served when there's
more than one thread waiting for a lock
11

11

00:00:44,960  -->  00:00:47,080
and that lock becomes available
12

12

00:00:47,080  -->  00:00:50,900
the operating system won't necessarily
choose the thread that has been waiting the
13

13

00:00:50,900  -->  00:00:55,670
longest to run a thread can block on the
lock first but that doesn't mean it will
14

14

00:00:55,670  -->  00:00:58,760
be the first thread to run when the lock
becomes available
15

15

00:00:59,330  -->  00:01:03,500
so it's possible that the thread won't
be able to run for a long time because
16

16

00:01:03,500  -->  00:01:07,360
other threads keep blocking on the lock
and when the lock becomes available
17

17

00:01:08,000  -->  00:01:11,780
the operating system chooses one of
those other threads to run especially
18

18

00:01:11,780  -->  00:01:16,070
when one of the other threads has a
higher priority than the first thread
19

19

00:01:16,070  -->  00:01:17,060
that blocked
20

20

00:01:17,060  -->  00:01:21,070
let's look at an example just to make
sense of this we're going to create five
21

21

00:01:21,070  -->  00:01:24,040
threads and assign them at different
priorities
22

22

00:01:24,040  -->  00:01:27,280
the threads are going to print out the
numbers one to a hundred to the console
23

23

00:01:27,280  -->  00:01:33,790
let's start by creating a new console
project file new project and
24

24

00:01:33,790  -->  00:01:38,170
unsurprisingly given that we're talking
about starvation will refer to it as
25

25

00:01:38,170  -->  00:01:47,740
starvation or call the project
starvation finish and replace
26

26

00:01:47,740  -->  00:01:52,310
this window because we don't need to the say
hello project anymore and i'm just
27

27

00:01:52,310  -->  00:01:54,140
going to pull this over to the left a little
bit
28

28

00:01:54,140  -->  00:02:01,880
ok just to make a bit more space here
for typing so what we do first is will
29

29

00:02:01,880  -->  00:02:04,310
add our thread color class to the
project
30

30

00:02:04,310  -->  00:02:08,060
of course we've used that thread color thread color class before
31

31

00:02:08,650  -->  00:02:12,950
so you can grab the code in the
resources section for this video I'm
32

32

00:02:12,950  -->  00:02:17,840
just going to create the actual class
and then paste in the values so it's
33

33

00:02:17,840  -->  00:02:18,540
new
34

34

00:02:18,540  -->  00:02:26,340
java class i'm going to call this one
thread color as we've done before and
35

35

00:02:26,340  -->  00:02:29,570
I'm just going to paste in the values
which are in the resources section
36

36

00:02:30,620  -->  00:02:35,970
all right so going back to our main class we
want to start off by adding a static
37

37

00:02:35,970  -->  00:02:37,200
variable
38

38

00:02:37,200  -->  00:02:40,590
we're going to use to synchronize code
so we're going to just put that in the
39

39

00:02:40,590  -->  00:02:42,260
main as a field
40

40

00:02:42,260  -->  00:02:47,810
....
41

41

00:02:49,040  -->  00:02:53,060
again we are going to use that to
synchronize our code now we need to add
42

42

00:02:53,060  -->  00:02:58,310
a worker class as an inner class of the
main class this will contain the code
43

43

00:02:58,310  -->  00:03:00,840
that each thread will ultimately run
44

44

00:03:00,840  -->  00:03:05,540
let's put that down below the main
method within our class as an inner class so
45

45

00:03:05,540  -->  00:03:06,680
we are going to do
46

46

00:03:06,680  -->  00:03:11,540
....
47

47

00:03:11,540  -->  00:03:32,150
.....
48

48

00:03:32,150  -->  00:03:35,760
the constructor is going to just accept
the color as a parameter only
49

49

00:03:35,760  -->  00:03:41,790
so just that one click OK and then
we want our run method obviously so.....
50

50

00:03:41,790  -->  00:03:45,750
....
51

51

00:03:45,750  -->  00:03:51,260
....and lets write the code for that
52

52

00:03:51,260  -->  00:03:57,350
and again I mentioned that it's going to
count from 1 to 100.....
53

53

00:03:58,100  -->  00:04:16,100
....
54

54

00:04:18,090  -->  00:04:23,250
....
55

55

00:04:23,940  -->  00:04:29,010
....
56

56

00:04:29,010  -->  00:04:39,300
.....and we want to also write our run count and we
57

57

00:04:39,300  -->  00:04:42,440
also want to increment that after
displaying that on the screen or outputting it
58

58

00:04:42,440  -->  00:04:48,510
to the console I should say and put a comment in here to execute
59

59

00:04:48,510  -->  00:04:56,130
a critical section of code which would
where that would ultimately be so when we
60

60

00:04:56,130  -->  00:05:00,810
construct an instance of the class we are going
to pass the thread color that we want to
61

61

00:05:00,810  -->  00:05:04,970
use when the thread runs this code it should
loop a hundred times and each time it
62

62

00:05:04,970  -->  00:05:05,790
loops
63

63

00:05:05,790  -->  00:05:09,660
it's going to print out the value of the
loop counter when we call systems.out.format
64

64

00:05:09,660  -->  00:05:12,990
its current value is stored
when the string is formatted and then
65

65

00:05:12,990  -->  00:05:18,030
the values incremented as you saw
on line 22 now as you see in a second
66

66

00:05:18,030  -->  00:05:22,860
we're going to create a worker object
for each thread because each thread
67

67

00:05:22,860  -->  00:05:25,470
will use its own instance of the worker
class
68

68

00:05:25,470  -->  00:05:29,550
the threads won't interfere with each
other as they count to a hundred the
69

69

00:05:29,550  -->  00:05:33,780
code in the run method isn't a critical
section but will pretend that their is some
70

70

00:05:33,780  -->  00:05:37,680
code after the format call that requires
synchronization and that's where you saw
71

71

00:05:37,680  -->  00:05:39,810
me put that comment on line 23
72

72

00:05:39,810  -->  00:05:43,950
for example we could be calling a method
in a class that perhaps isn't thread safe
73

73

00:05:43,950  -->  00:05:47,660
so now that we've done that let's add
the code to the main method to kick
74

74

00:05:47,660  -->  00:05:48,780
these threads off
75

75

00:05:48,780  -->  00:05:55,650
we're going to come back up here and
we're going to put.....
76

76

00:05:55,650  -->  00:06:01,320
....
77

77

00:06:02,190  -->  00:06:11,360
....
78

78

00:06:11,360  -->  00:06:19,040
and we'll call this one priority 10 and
it's lets take a copy of this and create
79

79

00:06:19,040  -->  00:06:26,240
another four threads need to change the
names of them....
80

80

00:06:28,190  -->  00:06:32,900
....
81

81

00:06:32,900  -->  00:06:35,960
we'll just change the first one to red....
82

82

00:06:36,590  -->  00:06:44,030
we'll just change colors if we need to second one will go with blue....
83

83

00:06:44,690  -->  00:06:56,030
the third one let's go with green and we will do cyan for the fourth one and lets use
84

84

00:06:56,030  -->  00:06:59,870
purple for fifth ones so
priority 10 it will go
85

85

00:06:59,870  -->  00:07:12,770
...and then what we need to do is do a t1.setpriority for each one of
86

86

00:07:12,770  -->  00:07:17,060
these over so for t1 we set priority 10 as the
text that's going to be displayed so we
87

87

00:07:17,060  -->  00:07:20,600
need to make sure we do that as well and
then we'll do the same for the other
88

88

00:07:20,600  -->  00:07:26,300
four making sure that we set the
priority to the same level as I've
89

89

00:07:26,300  -->  00:07:33,380
mentioned in the string variable that
we're passing as a parameter so....
90

90

00:07:33,380  -->  00:07:38,570
....
91

91

00:07:38,570  -->  00:07:44,450
obviously the last thing to do is to t1.start and we do that for the remaining
92

92

00:07:44,450  -->  00:07:45,740
four as well
93

93

00:07:45,740  -->  00:07:48,740
....
94

94

00:07:49,280  -->  00:07:54,410
ok so we gave each thread a name when we construct a thread instance
95

95

00:07:54,410  -->  00:07:56,180
on line 7 to 11
96

96

00:07:56,180  -->  00:08:00,050
we then a set a priority for each one
using the set priority method which is
97

97

00:08:00,050  -->  00:08:05,630
so we do on line 13 to 17 and keep in
mind that the priority is only a
98

98

00:08:05,630  -->  00:08:08,150
suggestion to the operating system
99

99

00:08:08,150  -->  00:08:12,260
it's not actually binding in any way we
can never force the operating system to
100

100

00:08:12,260  -->  00:08:14,240
run threads in a specific order
101

101

00:08:14,240  -->  00:08:18,110
so you may look at this code now be
wondering how all the threads could
102

102

00:08:18,110  -->  00:08:22,550
block on the same lock object since
we're passing a different worker object
103

103

00:08:22,550  -->  00:08:23,530
to each thread
104

104

00:08:23,530  -->  00:08:27,280
indeed if you recall in the previous
video we had an issue for that same
105

105

00:08:27,280  -->  00:08:30,680
reason we're actually passing objects a
different object and we're getting a
106

106

00:08:30,680  -->  00:08:32,140
deadlock for that reason
107

107

00:08:32,140  -->  00:08:36,440
so it's true that we are passing a
different worker object to each thread
108

108

00:08:36,440  -->  00:08:40,810
but the lock object were using is
static you can see that on line 4
109

109

00:08:40,810  -->  00:08:45,460
so in other words is only one instance
of the object all the threads will be
110

110

00:08:45,460  -->  00:08:48,520
competing therefore for that one
instances lock
111

111

00:08:48,520  -->  00:08:53,500
also note that the lock on the object
will be frequently released giving any
112

112

00:08:53,500  -->  00:08:56,630
blocked threads plenty of
opportunity to run
113

113

00:08:56,630  -->  00:09:00,070
so let's actually run this code and see
what happens
114

114

00:09:00,070  -->  00:09:04,790
and again it will depend on timing but
we'll probably see is that the thread
115

115

00:09:04,790  -->  00:09:09,070
with priority 10 which is the one that we assign red will print out the
116

116

00:09:09,070  -->  00:09:13,510
numbers one to a hundred before any
other thread has a chance to run after
117

117

00:09:13,510  -->  00:09:16,510
that it's purely up to the operating
system as to what will happen
118

118

00:09:17,060  -->  00:09:21,170
it may run the thread with priority
8 but we'll see what happens anyway
119

119

00:09:21,170  -->  00:09:24,170
let's just try this and see what happens
120

120

00:09:29,180  -->  00:09:34,070
and you can see this first time when we run it priority 10 got from numbers 1 to
121

121

00:09:34,070  -->  00:09:36,350
28 then purple kicked in
122

122

00:09:36,350  -->  00:09:39,740
even though it's got a priority 2 as
you can see here and scrolling down a
123

123

00:09:39,740  -->  00:09:40,940
little bit further
124

124

00:09:40,940  -->  00:09:47,120
purple got to a hundred green or cyan I
should is got to go
125

125

00:09:47,630  -->  00:09:53,780
then we got to green as you can see for
priority 6 priority 8 has a chance with
126

126

00:09:53,780  -->  00:09:57,440
blue and then priority 10 got the
rest but let's just try running it again
127

127

00:10:02,990  -->  00:10:05,900
so you can see that I'm getting
different results each time I run it even
128

128

00:10:05,900  -->  00:10:09,560
though we've assigned priority 10 you
can see this particular case here
129

129

00:10:09,560  -->  00:10:15,620
priority 10 got from one to a hundred
and then purple got priority 2 which
130

130

00:10:15,620  -->  00:10:19,280
you would think that priority 8 6
and 4 might have a go beforehand but
131

131

00:10:19,280  -->  00:10:21,530
that's not necessarily the case
132

132

00:10:21,530  -->  00:10:26,630
just run it one more time and you can
see that priority 10 has only got a run
133

133

00:10:26,630  -->  00:10:32,420
count of 3 that time so that's purely up
to the operating system it may run the
134

134

00:10:32,420  -->  00:10:36,560
thread the second one with priority
8 but that's not necessarily the
135

135

00:10:36,560  -->  00:10:37,430
case
136

136

00:10:37,430  -->  00:10:40,470
so its a little bit bizarre when you
look at it when you continually run this
137

137

00:10:40,470  -->  00:10:43,580
you get different results and there
we've got another result there we're
138

138

00:10:43,580  -->  00:10:47,780
priority 10 as you think would happen
goes from one to a hundred before the
139

139

00:10:47,780  -->  00:10:51,740
others get a chance so more than likely you will
you get different results on your
140

140

00:10:51,740  -->  00:10:56,330
computer then what I'm showing you on
the screen here now so you can see
141

141

00:10:56,330  -->  00:10:56,870
that it
142

142

00:10:56,870  -->  00:11:01,490
the order that we've kick things off with
our threads isn't necessarily the order
143

143

00:11:01,490  -->  00:11:03,800
that the operating system is going to
run it
144

144

00:11:03,800  -->  00:11:07,430
even though we've told the operating
system or given a suggestion for the
145

145

00:11:07,430  -->  00:11:09,440
priority that we want these threads to
run
146

146

00:11:09,440  -->  00:11:14,090
now thread may only be suspended once in
the middle of counting or not
147

147

00:11:14,090  -->  00:11:17,990
in other words each thread gets to run
for quite a long time in computer time
148

148

00:11:17,990  -->  00:11:19,160
generally speaking
149

149

00:11:19,160  -->  00:11:23,220
while the other threads are stuck
waiting now the key takeaway for all this
150

150

00:11:23,220  -->  00:11:24,720
here is that although this
151

151

00:11:24,720  -->  00:11:29,240
the lock is released frequently often
the highest priority thread will
152

152

00:11:29,240  -->  00:11:33,560
probably hog all the time until it's
finished counting and the next thread
153

153

00:11:33,560  -->  00:11:36,770
that runs won't
necessarily be the thread with priority
154

154

00:11:36,770  -->  00:11:41,630
8 and you obviously saw that and also
the last thread to terminate won't
155

155

00:11:41,630  -->  00:11:42,750
necessarily be the thread
156

156

00:11:42,750  -->  00:11:45,780
with priority 2 and again you saw that
as well we've got this on the screen now
157

157

00:11:45,780  -->  00:11:49,230
we're going go down and have a look right at the
end priority 6 was the one that
158

158

00:11:49,230  -->  00:11:54,630
finished in this run so it isn't a
first-come first-serve system now again
159

159

00:11:54,630  -->  00:11:59,160
this is a trivial example so it doesn't
matter that one thread hogs all the time
160

160

00:11:59,160  -->  00:12:04,500
but in a real world application the
tasks that a thread is performing might
161

161

00:12:04,500  -->  00:12:06,660
you know perhaps be a long-running task
162

162

00:12:06,660  -->  00:12:11,340
what if the run method was performing
database queries or file reads if the
163

163

00:12:11,340  -->  00:12:15,300
threads block there for seconds or even
minutes because other threads are always
164

164

00:12:15,300  -->  00:12:18,930
chosen to run when the lock becomes
available then the applications
165

165

00:12:18,930  -->  00:12:21,930
performance will definitely be adversely
affected
166

166

00:12:22,530  -->  00:12:26,730
also as we've just seen setting a
priority really is just a suggestion to
167

167

00:12:26,730  -->  00:12:28,110
the operating system
168

168

00:12:28,110  -->  00:12:32,820
you saw when i ran the code multiple
times that we've got different results
169

169

00:12:32,820  -->  00:12:38,670
and priority 10 even wasn't necessarily
finished in completely each time it's
170

170

00:12:38,670  -->  00:12:42,480
always some other thread that will
kick in and we usually find often found
171

171

00:12:42,480  -->  00:12:47,250
that priority 2 got the go after
priority 10 for some reason so we
172

172

00:12:47,250  -->  00:12:52,560
started again you can see priority 10
always gets the first but then it seems
173

173

00:12:52,560  -->  00:12:56,880
to be priority 2 always comes in next
and again that might be different
174

174

00:12:56,880  -->  00:13:02,130
for your computer now you might be
thinking at this point the reason that
175

175

00:13:02,130  -->  00:13:07,380
the thread with priority 10 ran first
was because we assigned it on line 19 as
176

176

00:13:07,380  -->  00:13:15,120
that if we change these around a little
bit t1 will make that t3...
177

177

00:13:15,120  -->  00:13:19,380
and leave this t1 so we are starting the
thread with the highest priority last
178

178

00:13:19,380  -->  00:13:20,970
effectively on line 23
179

179

00:13:20,970  -->  00:13:28,350
if you run that to see what happens
this will depend on timing again and if we
180

180

00:13:28,350  -->  00:13:31,860
just run this we can see that priority 6
has got in first run but run this again
181

181

00:13:37,640  -->  00:13:40,910
it will actually depend on timing and even
though i'm getting the same result each
182

182

00:13:40,910  -->  00:13:44,420
time you might well find that you get a
different result of this depending on
183

183

00:13:44,420  -->  00:13:47,480
the order that you set this to on your
computer
184

184

00:13:47,480  -->  00:13:52,160
what you should be able to find is if
you run this a few times that you
185

185

00:13:52,160  -->  00:13:56,120
will get priority 10 to start sometimes
when you change the order of the
186

186

00:13:56,120  -->  00:13:57,110
execution here
187

187

00:13:57,110  -->  00:14:02,120
but of course when i'm recording a video
is not doing that for me now we've got
188

188

00:14:02,120  -->  00:14:05,660
priority 10 got nearly got to the first
go so I'll just try one more time and see
189

189

00:14:05,660  -->  00:14:08,660
whether we can get it
190

190

00:14:09,830  -->  00:14:12,950
we got priority 10 to come up second
their and again you can see the results
191

191

00:14:12,950  -->  00:14:16,460
are different each time effectively
when we are running it
192

192

00:14:16,460  -->  00:14:20,480
so you can see that priority has got an
effect on the order
193

193

00:14:20,480  -->  00:14:24,980
once we specified that but it's really
loosely if the task wasn't so
194

194

00:14:24,980  -->  00:14:28,880
trivial the effect on setting a priority
might be more pronounced that's the
195

195

00:14:28,880  -->  00:14:31,490
other thing to keep in mind because
obviously doing just a little bit of
196

196

00:14:31,490  -->  00:14:35,270
code here just sort of executing for the
numbers one to a hundred and looping
197

197

00:14:35,270  -->  00:14:36,020
through them
198

198

00:14:36,020  -->  00:14:41,360
so we've seen what starvation can do
because the synchronized blocks aren't
199

199

00:14:41,360  -->  00:14:45,140
first come first served setting
priorities can result in starvation
200

200

00:14:45,140  -->  00:14:50,660
threads can languish even with when a
lock is frequently released
201

201

00:14:50,660  -->  00:14:53,990
even when we don't set priorities will
this still be true
202

202

00:14:53,990  -->  00:14:57,020
so let's actually try not setting
priorities and see what happens
203

203

00:14:57,020  -->  00:15:01,460
so I'm going to just comment that out
for now the priorities that we defined
204

204

00:15:02,060  -->  00:15:05,720
and lets see when we run that what
happens
205

205

00:15:05,720  -->  00:15:13,190
so we got priority 6 working first
we've got priority 10 kicks in then
206

206

00:15:13,190  -->  00:15:18,950
but notice they have all gone to a hundred
this time we'll just run this a few more
207

207

00:15:18,950  -->  00:15:25,580
times the same result there so getting
a bit more consistency there
208

208

00:15:29,760  -->  00:15:33,510
we're getting priority 4 cyan always
appearing last
209

209

00:15:34,080  -->  00:15:38,820
so you can still see the
threads aren't necessarily running in the
210

210

00:15:38,820  -->  00:15:44,730
right the same order that we started on
that because t3 is our priority 6 and
211

211

00:15:44,730  -->  00:15:50,280
that actually started first that was ok
but t1 at the end is priority 10 that
212

212

00:15:50,280  -->  00:15:54,390
clearly didn't run last did it you can
see that the last we've got our priority
213

213

00:15:54,390  -->  00:15:57,750
4 which is t3
214

214

00:15:57,750  -->  00:16:01,320
sorry our t4 and that was second to
last but that finish last
215

215

00:16:02,040  -->  00:16:06,420
so setting priorities can make
starvation more likely to happen
216

216

00:16:06,420  -->  00:16:10,080
so how can we actually prevent this
starvation so when we're dealing with
217

217

00:16:10,080  -->  00:16:15,090
deadlocks the order in which locks are
required was important but the
218

218

00:16:15,090  -->  00:16:19,980
starvation which thread gets to run
when a lock becomes available is
219

219

00:16:19,980  -->  00:16:20,970
important
220

220

00:16:20,970  -->  00:16:25,110
so ideally would like things to be first
come first served
221

221

00:16:25,110  -->  00:16:29,670
because we can't dictate when threads
will run we can't guarantee a first-come
222

222

00:16:29,670  -->  00:16:32,670
first-serve order but we can
certainly do our best
223

223

00:16:33,180  -->  00:16:36,780
I'm going to finish the video now in the
next video we're going to actually talk
224

224

00:16:36,780  -->  00:16:39,570
about finding a way to get around this
225

225

00:16:39,570  -->  00:16:44,250
instead of using synchronized blocks
we're going to use something called a
226

226

00:16:44,250  -->  00:16:46,830
fair lock so let's talk about that in
the next video
