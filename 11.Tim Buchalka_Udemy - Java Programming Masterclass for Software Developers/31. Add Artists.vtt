WEBVTT
1
1

00:00:05.270  -->  00:00:06.570
- [Instructor] So, at the
end of the last video,
2

2

00:00:06.570  -->  00:00:08.610
we got this error that we
couldn't connect to database,
3

3

00:00:08.610  -->  00:00:12.250
and that was because we haven't
got a suitable jdbc driver,
4

4

00:00:12.250  -->  00:00:16.290
and if you recall, we actually
set up the jdbc driver
5

5

00:00:16.290  -->  00:00:17.970
in the previous application,
6

6

00:00:17.970  -->  00:00:19.780
but we haven't done it for this one,
7

7

00:00:19.780  -->  00:00:21.670
so let's go ahead and
actually do that now.
8

8

00:00:21.670  -->  00:00:23.900
So, I'm gonna come over here
and click on the project.
9

9

00:00:23.900  -->  00:00:24.820
Right click.
10

10

00:00:24.820  -->  00:00:26.910
I can open Module Settings,
11

11

00:00:26.910  -->  00:00:28.970
going to go to Libraries,
12

12

00:00:28.970  -->  00:00:30.140
click on plus,
13

13

00:00:31.750  -->  00:00:34.160
click on or select Java,
14

14

00:00:34.160  -->  00:00:38.210
and the actual drive file
is in the Downloads folder,
15

15

00:00:38.210  -->  00:00:39.210
sqlite-jdbc.
16

16

00:00:40.120  -->  00:00:42.830
That's the driver we have
previously downloaded.
17

17

00:00:42.830  -->  00:00:44.600
I'm gonna add that to this library,
18

18

00:00:44.600  -->  00:00:46.260
and you can see that
it's going to be added
19

19

00:00:46.260  -->  00:00:49.050
to music UI, which is
our current application,
20

20

00:00:49.050  -->  00:00:50.030
our project.
21

21

00:00:50.030  -->  00:00:51.200
Click on OK.
22

22

00:00:51.200  -->  00:00:55.080
Click on OK again, and that's the driver
23

23

00:00:55.080  -->  00:00:56.850
now added to the class path,
24

24

00:00:56.850  -->  00:00:58.820
so we should now be able to run it again.
25

25

00:00:58.820  -->  00:01:00.610
Now, just before I do run it, though,
26

26

00:01:00.610  -->  00:01:02.720
note here that, because we've copied
27

27

00:01:02.720  -->  00:01:04.770
the Datasource dot java file,
28

28

00:01:04.770  -->  00:01:06.720
we've copied all the information
29

29

00:01:06.720  -->  00:01:09.780
including the path, so the
actual path, at the moment,
30

30

00:01:09.780  -->  00:01:12.130
is pointing to our previous project,
31

31

00:01:12.130  -->  00:01:13.780
the database in that directory,
32

32

00:01:13.780  -->  00:01:17.120
and if you recall, we talked
about, if you're on Windows,
33

33

00:01:17.120  -->  00:01:20.860
selecting the path, so you
may want to update this path
34

34

00:01:20.860  -->  00:01:23.210
or just know that you're
using the database
35

35

00:01:23.210  -->  00:01:24.850
that's in that other project.
36

36

00:01:24.850  -->  00:01:26.760
So I'm going to leave it on this default,
37

37

00:01:26.760  -->  00:01:28.180
calling it the music folder,
38

38

00:01:28.180  -->  00:01:30.840
which was, again, the
previous application,
39

39

00:01:30.840  -->  00:01:32.670
but just keep that in
mind if you're wondering
40

40

00:01:32.670  -->  00:01:33.690
where the database is.
41

41

00:01:33.690  -->  00:01:35.540
It's actually grabbing
that because we've copied
42

42

00:01:35.540  -->  00:01:37.310
the Datasource dot java file.
43

43

00:01:37.310  -->  00:01:40.120
It's using the same directory
or the connexions string
44

44

00:01:40.120  -->  00:01:41.620
pointing to that database.
45

45

00:01:41.620  -->  00:01:43.280
Alright, so let's go back to main.
46

46

00:01:43.280  -->  00:01:44.740
If we run it again, now,
47

47

00:01:44.740  -->  00:01:48.240
we should find that things will work okay.
48

48

00:01:50.350  -->  00:01:52.440
Okay, this time the
error's now disappeared,
49

49

00:01:52.440  -->  00:01:55.640
because we've added the
jdbc driver for SQLite
50

50

00:01:55.640  -->  00:01:57.680
to our class path, and you can see that
51

51

00:01:57.680  -->  00:02:00.240
the interface has appeared.
52

52

00:02:00.240  -->  00:02:02.440
Alright, so when the application starts,
53

53

00:02:02.440  -->  00:02:04.540
what we want to do is
display all the artists
54

54

00:02:04.540  -->  00:02:06.590
in the artists table.
55

55

00:02:06.590  -->  00:02:08.700
Now, it's also possible that the user
56

56

00:02:08.700  -->  00:02:10.630
might explicitly ask to see,
57

57

00:02:10.630  -->  00:02:12.840
or the artists after they've performed,
58

58

00:02:12.840  -->  00:02:14.070
some other query,
59

59

00:02:14.070  -->  00:02:16.440
so consequently, we need
to query all the artists
60

60

00:02:16.440  -->  00:02:18.100
when the application starts,
61

61

00:02:18.100  -->  00:02:21.510
and also, potentially, in
response to user input.
62

62

00:02:21.510  -->  00:02:24.790
Now, remember that we always
wanna perform long tasks
63

63

00:02:24.790  -->  00:02:26.190
on a background thread,
64

64

00:02:26.190  -->  00:02:29.620
not on the main javafx application thread,
65

65

00:02:29.620  -->  00:02:32.900
and if you recall from the
thread section of this course,
66

66

00:02:32.900  -->  00:02:35.070
that when we want to
run background threads
67

67

00:02:35.070  -->  00:02:36.810
from a javafx application,
68

68

00:02:36.810  -->  00:02:38.560
we need to use helper classes
69

69

00:02:38.560  -->  00:02:41.880
in the javafx dot concurrent package.
70

70

00:02:41.880  -->  00:02:44.360
So, I'm gonna perform the following steps,
71

71

00:02:44.360  -->  00:02:45.940
not necessarily, though, in the order
72

72

00:02:45.940  -->  00:02:47.360
that I'm gonna read them out.
73

73

00:02:47.360  -->  00:02:49.120
Firstly, we wanna create a task
74

74

00:02:49.120  -->  00:02:50.900
to perform the database action,
75

75

00:02:50.900  -->  00:02:53.380
the query, the insert,
or whatever we're doing.
76

76

00:02:53.380  -->  00:02:55.700
Secondly, we want to initialise the task
77

77

00:02:55.700  -->  00:02:58.230
with values required
to perform the action,
78

78

00:02:58.230  -->  00:03:00.240
if that's necessary.
79

79

00:03:00.240  -->  00:03:03.110
Third, we want to implement
the task dot core method
80

80

00:03:03.110  -->  00:03:04.490
to perform the action.
81

81

00:03:04.490  -->  00:03:06.700
Fourth, we want to bind the core results
82

82

00:03:06.700  -->  00:03:08.880
to the table view's items property,
83

83

00:03:08.880  -->  00:03:11.540
and then finally, we
want to invoke the task.
84

84

00:03:11.540  -->  00:03:14.720
Now, because we may need to
use this task from two places,
85

85

00:03:14.720  -->  00:03:17.570
at start up and when
the user explicitly asks
86

86

00:03:17.570  -->  00:03:20.810
to see all artists, we're not going to use
87

87

00:03:20.810  -->  00:03:22.610
an anonymous task class
88

88

00:03:22.610  -->  00:03:25.880
that we create in response to user input,
89

89

00:03:25.880  -->  00:03:27.560
and you'll see an example of this later.
90

90

00:03:27.560  -->  00:03:29.990
What we're gonna do is
we'll add a get all artists
91

91

00:03:29.990  -->  00:03:32.630
task class to the controller.
92

92

00:03:32.630  -->  00:03:34.190
So, let's go ahead and add that,
93

93

00:03:34.190  -->  00:03:37.760
so I'm just gonna close this down.
94

94

00:03:37.760  -->  00:03:39.710
So, we're going back to our controller,
95

95

00:03:39.710  -->  00:03:43.820
and what we're going to do
is add the method in there.
96

96

00:03:43.820  -->  00:03:46.240
Alright, so let's add this class,
97

97

00:03:46.240  -->  00:03:49.230
the get all artists task
class to the controller,
98

98

00:03:49.230  -->  00:03:51.430
so I'm going to add the class below
99

99

00:03:51.430  -->  00:03:53.800
the public class controller code,
100

100

00:03:53.800  -->  00:03:57.450
and we're gonna call
this one, type in class,
101

101

00:03:57.450  -->  00:03:59.290
and GetAllArtistsTask,
102

102

00:04:01.220  -->  00:04:05.240
and that's extending
tasks, Task, I should say,
103

103

00:04:05.240  -->  00:04:08.570
which is from the javafx dot concurrent.
104

104

00:04:10.470  -->  00:04:14.100
Okay, then we're gonna
override the core method,
105

105

00:04:14.100  -->  00:04:16.580
but we do wanna change
this around a little bit,
106

106

00:04:16.580  -->  00:04:18.660
so we wanna actually make
this an observable list
107

107

00:04:18.660  -->  00:04:20.980
that it's going to be returning.
108

108

00:04:20.980  -->  00:04:23.550
So, instead of object, it's gonna be
109

109

00:04:23.550  -->  00:04:24.800
ObservableList,
110

110

00:04:26.390  -->  00:04:28.480
and it's gonna be list up artist objects,
111

111

00:04:28.480  -->  00:04:30.860
so Artists, and we might need to, right,
112

112

00:04:30.860  -->  00:04:34.360
have the exception there, so
I'm just gonna remove that,
113

113

00:04:34.360  -->  00:04:36.520
so as instead of protected, also,
114

114

00:04:36.520  -->  00:04:38.800
we'll just make that public
for simplicity, so public.
115

115

00:04:38.800  -->  00:04:41.440
It's returning an observable
list of artist objects.
116

116

00:04:41.440  -->  00:04:43.630
The core method is still the right one,
117

117

00:04:43.630  -->  00:04:45.830
and in terms of what
we're gonna return here,
118

118

00:04:45.830  -->  00:04:47.540
instead of returning null,
119

119

00:04:47.540  -->  00:04:50.460
we're going to return FXCollections
120

120

00:04:51.450  -->  00:04:53.450
dot observableArrayList,
121

121

00:04:54.400  -->  00:04:57.320
and I'll put that on the next line.
122

122

00:04:59.800  -->  00:05:02.050
It's going to be Datasource
123

123

00:05:03.300  -->  00:05:04.630
dot getInstance,
124

124

00:05:06.000  -->  00:05:09.940
getting our singleton dot queryArtists,
125

125

00:05:09.940  -->  00:05:12.480
and we're going to do a Datasource
126

126

00:05:12.480  -->  00:05:14.900
order by sending, so order, underscore,
127

127

00:05:14.900  -->  00:05:18.480
by, underscore, ask is
what we wanna select there.
128

128

00:05:18.480  -->  00:05:20.960
So, that's what this method's
ultimately gonna call,
129

129

00:05:20.960  -->  00:05:22.880
and again, the reason that we're creating
130

130

00:05:22.880  -->  00:05:25.700
a separate class here and
putting it in the controller
131

131

00:05:25.700  -->  00:05:28.060
dot java file is we may
need to use this task
132

132

00:05:28.060  -->  00:05:29.290
in two places.
133

133

00:05:29.290  -->  00:05:30.800
Firstly, at startup,
134

134

00:05:30.800  -->  00:05:34.070
but also when the user explicitly
asks to see all artists,
135

135

00:05:34.070  -->  00:05:37.790
so that's why we're not using
an anonymous task class.
136

136

00:05:37.790  -->  00:05:39.610
Alright, so the class, as you can see,
137

137

00:05:39.610  -->  00:05:41.100
had to extend task,
138

138

00:05:41.100  -->  00:05:44.940
and if we wanna use data
binding to populate the table,
139

139

00:05:44.940  -->  00:05:48.020
the core method, which we've reconfigured,
140

140

00:05:48.020  -->  00:05:50.960
has to return an
observable list of artists,
141

141

00:05:50.960  -->  00:05:52.490
and you saw me use the correct
142

142

00:05:52.490  -->  00:05:54.850
javafx dot collections
class when importing.
143

143

00:05:54.850  -->  00:05:56.290
That's obviously very important,
144

144

00:05:56.290  -->  00:05:57.780
and you can confirm that by checking
145

145

00:05:57.780  -->  00:05:59.700
the import C on line three.
146

146

00:05:59.700  -->  00:06:01.780
Alright, so we've
overridden the core method
147

147

00:06:01.780  -->  00:06:03.950
to call the query artist method
148

148

00:06:03.950  -->  00:06:05.930
in our Datasource dot java file.
149

149

00:06:05.930  -->  00:06:08.270
Now, that method, if you
recall, returns a list.
150

150

00:06:08.270  -->  00:06:11.450
Now, we don't wanna change it
to return an observable list,
151

151

00:06:11.450  -->  00:06:13.620
because that would violate the separation
152

152

00:06:13.620  -->  00:06:16.300
between the model and UI code.
153

153

00:06:16.300  -->  00:06:19.090
Instead, the tasks
creating an observable list
154

154

00:06:19.090  -->  00:06:22.280
from the list that query
artists method returns,
155

155

00:06:22.280  -->  00:06:24.480
so we're doing that by
calling the FXCollections
156

156

00:06:24.480  -->  00:06:27.580
dot observableArrayList passing
in the list that is returned
157

157

00:06:27.580  -->  00:06:29.110
from our Datasource,
158

158

00:06:29.110  -->  00:06:32.450
which then, ultimately, will
give us an observable list.
159

159

00:06:32.450  -->  00:06:34.520
Now, in a previous video,
I said that we can use
160

160

00:06:34.520  -->  00:06:36.360
the model classes as is,
161

161

00:06:36.360  -->  00:06:38.150
and that would be true
if we didn't want to
162

162

00:06:38.150  -->  00:06:40.160
take advantage of data binding,
163

163

00:06:40.160  -->  00:06:42.890
but here, we do actually want
to take advantage of that,
164

164

00:06:42.890  -->  00:06:46.110
so consequently, we do need
to make one small change
165

165

00:06:46.110  -->  00:06:48.830
to the artist class to achieve that,
166

166

00:06:48.830  -->  00:06:52.130
so instead of storing the
artist name in a string,
167

167

00:06:52.130  -->  00:06:55.280
we need to store it as a
simple string property.
168

168

00:06:55.280  -->  00:06:58.510
Now, this doesn't violate
the model UI separation,
169

169

00:06:58.510  -->  00:07:02.470
because simple string property
isn't a UI specific class.
170

170

00:07:02.470  -->  00:07:04.700
Now, we could have used
it all along, actually.
171

171

00:07:04.700  -->  00:07:07.010
We'll do the same for
the artist ID, though,
172

172

00:07:07.010  -->  00:07:08.960
even though we're not displaying it.
173

173

00:07:08.960  -->  00:07:11.040
Now, because the fields
will now be properties,
174

174

00:07:11.040  -->  00:07:13.400
the getter and setter methods
are all gonna change as well,
175

175

00:07:13.400  -->  00:07:18.290
so let's go over to the artist
class and make those changes.
176

176

00:07:18.290  -->  00:07:20.300
So, at the moment, you can
see that we've got them set up
177

177

00:07:20.300  -->  00:07:23.020
as private, as an int
and a string for the ID
178

178

00:07:23.020  -->  00:07:24.370
and the name and the artist class,
179

179

00:07:24.370  -->  00:07:27.360
but we're gonna change that to a simple
180

180

00:07:27.360  -->  00:07:28.770
integer property,
181

181

00:07:31.330  -->  00:07:32.750
and then a simple
182

182

00:07:34.530  -->  00:07:35.870
string property,
183

183

00:07:37.160  -->  00:07:38.490
so for the ID and the name,
184

184

00:07:38.490  -->  00:07:39.860
you can see that we've returned that,
185

185

00:07:39.860  -->  00:07:42.800
and consequently, we
also need to change the
186

186

00:07:42.800  -->  00:07:45.220
getters and setters, so for the ID,
187

187

00:07:45.220  -->  00:07:48.750
we're going to pass in a simple property
188

188

00:07:48.750  -->  00:07:51.840
and a simple integer
property, and return the ID.
189

189

00:07:51.840  -->  00:07:53.990
Likewise for the setting.
190

190

00:07:53.990  -->  00:07:55.860
We're going to get a
simple integer property,
191

191

00:07:55.860  -->  00:07:58.400
and likewise for the string as well.
192

192

00:07:58.400  -->  00:08:01.590
We're going to return the
simple string property
193

193

00:08:01.590  -->  00:08:02.950
and when we're setting it,
194

194

00:08:02.950  -->  00:08:05.860
we're going to return the
simple string property.
195

195

00:08:05.860  -->  00:08:09.180
Alright, so that's our
artist class updated,
196

196

00:08:09.180  -->  00:08:11.030
and again, we're only doing this
197

197

00:08:11.030  -->  00:08:13.390
because we want to use data binding.
198

198

00:08:13.390  -->  00:08:15.560
Since this is a simple application,
199

199

00:08:15.560  -->  00:08:17.690
if we wanted to keep our model classes
200

200

00:08:17.690  -->  00:08:20.210
exactly as they were,
then we could do that,
201

201

00:08:20.210  -->  00:08:23.080
and we would explicitly
then set the table items
202

202

00:08:23.080  -->  00:08:25.250
when the task completes.
203

203

00:08:25.250  -->  00:08:27.600
Now, there are two ways
we could set the items.
204

204

00:08:27.600  -->  00:08:29.820
Now, I covered the first
way in the threading section
205

205

00:08:29.820  -->  00:08:30.890
of the course.
206

206

00:08:30.890  -->  00:08:34.160
We could call our core
platform dot run later,
207

207

00:08:34.160  -->  00:08:37.650
when the query artist
method returns its results,
208

208

00:08:37.650  -->  00:08:40.160
and in the runnable we
passed to run later,
209

209

00:08:40.160  -->  00:08:41.880
we could set the table items,
210

210

00:08:41.880  -->  00:08:45.960
artistTable dot getItems
dot setAllArtistResults.
211

211

00:08:45.960  -->  00:08:49.150
Now, I also mentioned in
the other threading section
212

212

00:08:49.150  -->  00:08:51.560
that we can do more with
tasks than we covered,
213

213

00:08:51.560  -->  00:08:54.870
including running code, when
the core method completes.
214

214

00:08:54.870  -->  00:08:58.950
Now, to do that, we need to
call task dot set on succeeded,
215

215

00:08:58.950  -->  00:09:01.640
and it actually wants an event handler.
216

216

00:09:01.640  -->  00:09:03.320
In our case, though, the
most straightforward way
217

217

00:09:03.320  -->  00:09:05.330
to pass the code we want to execute
218

218

00:09:05.330  -->  00:09:08.320
is to use a lambda, so we're
gonna do something like this.
219

219

00:09:08.320  -->  00:09:11.740
We're going to do task dot setOnSucceeded
220

220

00:09:14.260  -->  00:09:16.340
and create our lambda.
221

221

00:09:16.340  -->  00:09:19.090
Gonna be artistTable dot getItems
222

222

00:09:21.040  -->  00:09:21.870
dot setAll
223

223

00:09:23.400  -->  00:09:24.570
artistResults.
224

224

00:09:25.450  -->  00:09:27.730
That's ultimately what
we're gonna be doing.
225

225

00:09:27.730  -->  00:09:29.890
We're making this a
little bit easier to call
226

226

00:09:29.890  -->  00:09:32.190
when the core method completes.
227

227

00:09:32.190  -->  00:09:33.020
Alright,
228

228

00:09:34.400  -->  00:09:36.100
so basically, what I'm getting at here is
229

229

00:09:36.100  -->  00:09:38.150
whenever data binding makes sense,
230

230

00:09:38.150  -->  00:09:39.220
it's best to use it,
231

231

00:09:39.220  -->  00:09:41.040
'cause then we don't have to do anything
232

232

00:09:41.040  -->  00:09:42.100
when the task completes.
233

233

00:09:42.100  -->  00:09:43.830
It's all handled automatically.
234

234

00:09:43.830  -->  00:09:45.490
Now, we have to do one more step
235

235

00:09:45.490  -->  00:09:47.260
for data binding to work, though.
236

236

00:09:47.260  -->  00:09:50.990
We have to map the name
field in the artist class
237

237

00:09:50.990  -->  00:09:53.020
to the name column in the table.
238

238

00:09:53.020  -->  00:09:55.440
If you recall from the threading videos,
239

239

00:09:55.440  -->  00:09:58.850
that we accomplished this by
adding a cell value factory
240

240

00:09:58.850  -->  00:10:01.470
to the table column, so
let's go ahead and do that
241

241

00:10:01.470  -->  00:10:03.230
in our FXML file,
242

242

00:10:03.230  -->  00:10:07.000
so we're gonna look at
adding a cellValueFactory
243

243

00:10:07.000  -->  00:10:08.670
for the artist name.
244

244

00:10:11.290  -->  00:10:13.150
So, we've got our table column here
245

245

00:10:13.150  -->  00:10:16.030
for our artistTable name,
246

246

00:10:16.030  -->  00:10:18.550
so to achieve this, we can
actually just close off
247

247

00:10:18.550  -->  00:10:20.380
that ending tag there,
248

248

00:10:22.050  -->  00:10:23.290
and under the table column,
249

249

00:10:23.290  -->  00:10:25.750
we wanna add a cellValueFactory, so it's
250

250

00:10:25.750  -->  00:10:27.160
cellValueFactory,
251

251

00:10:30.820  -->  00:10:33.050
and then we wanna add
a propertyValueFactory
252

252

00:10:33.050  -->  00:10:34.960
so propertyValueFactory
253

253

00:10:37.600  -->  00:10:41.430
property equals and it's
going to record name,
254

254

00:10:42.760  -->  00:10:45.740
and then we need to close
off our table column.
255

255

00:10:45.740  -->  00:10:48.000
So, basically, we've added
a propertyValueFactory
256

256

00:10:48.000  -->  00:10:51.260
for the name, and that
maps to the name field
257

257

00:10:51.260  -->  00:10:53.120
in the artist class.
258

258

00:10:53.120  -->  00:10:54.250
So, now that we've done that,
259

259

00:10:54.250  -->  00:10:56.670
we can add a method to the controller
260

260

00:10:56.670  -->  00:10:58.550
that gets the artists.
261

261

00:10:58.550  -->  00:11:01.760
Let's go back to the controller.
262

262

00:11:01.760  -->  00:11:05.260
We're gonna add some code in
the controller class itself,
263

263

00:11:05.260  -->  00:11:07.960
so firstly, we need a
reference to the artistTable,
264

264

00:11:07.960  -->  00:11:10.040
so that's gonna be @FXML,
265

265

00:11:11.680  -->  00:11:14.430
then we want a private TableView,
266

266

00:11:17.230  -->  00:11:19.680
which is a list of artists.
267

267

00:11:19.680  -->  00:11:22.630
We'll call it artistTable,
268

268

00:11:22.630  -->  00:11:26.850
and the actual method is
going to be public void
269

269

00:11:26.850  -->  00:11:27.770
listArtist,
270

270

00:11:30.380  -->  00:11:32.120
and then we need to create our task,
271

271

00:11:32.120  -->  00:11:34.910
so it's going to be task.
272

272

00:11:34.910  -->  00:11:38.750
We want that ObservableList
of artist objects.
273

273

00:11:41.080  -->  00:11:44.330
Task is equal to new GetAllArtistsTask.
274

274

00:11:46.090  -->  00:11:49.010
That's calling the class
that we've defined,
275

275

00:11:49.010  -->  00:11:50.910
or at least instantiating it,
276

276

00:11:50.910  -->  00:11:53.100
so we're creating a new task object,
277

277

00:11:53.100  -->  00:11:55.700
and then we wanna do artistTable
278

278

00:11:55.700  -->  00:11:57.110
dot itemsProperty
279

279

00:11:58.240  -->  00:11:59.080
dot bind,
280

280

00:12:00.960  -->  00:12:03.210
and task dot valueProperty.
281

281

00:12:05.410  -->  00:12:07.930
So, you can see that we've
created a new task object
282

282

00:12:07.930  -->  00:12:11.010
on line 17, then on line 18,
283

283

00:12:11.010  -->  00:12:13.090
we're binding the result of the task,
284

284

00:12:13.090  -->  00:12:15.410
in this case, the artistsObservableList,
285

285

00:12:15.410  -->  00:12:17.790
to the table view's items property,
286

286

00:12:17.790  -->  00:12:20.280
so they're actually bound to each other.
287

287

00:12:20.280  -->  00:12:22.170
Alright, so let's finish the video here.
288

288

00:12:22.170  -->  00:12:24.310
In the next video, we'll start looking at
289

289

00:12:24.310  -->  00:12:25.940
how this is going to be invoked,
290

290

00:12:25.940  -->  00:12:27.960
because the controller isn't created
291

291

00:12:27.960  -->  00:12:29.960
until the FXML is loaded,
292

292

00:12:29.960  -->  00:12:33.010
so we have to figure out how
we're gonna get that to work,
293

293

00:12:33.010  -->  00:12:35.550
so let's work on that in the next video.
