WEBVTT
1
1

00:00:05.270  -->  00:00:10.520
so we are gonna start of this section on input and
output IO with Java with an introduction to
2

2

00:00:10.520  -->  00:00:15.650
exceptions and the reason for that is
that many of methods that will be using to read and
3

3

00:00:15.650  -->  00:00:20.730
write files actually required that
exceptions are handled now their is two main
4

4

00:00:20.730  -->  00:00:24.610
approaches to dealing with errors when
programming and there are referred to
5

5

00:00:24.610  -->  00:00:24.950
it as
6

6

00:00:24.950  -->  00:00:32.300
LBYL and EAFP and that stands for
is look before you leap and easy to ask
7

7

00:00:32.300  -->  00:00:38.050
for forgiveness than permission so in
Java it's more common to look before you
8

8

00:00:38.050  -->  00:00:43.390
leap and we've seen this a lot we tested
an object is not null before we attempt
9

9

00:00:43.390  -->  00:00:48.360
to use it for example the other approach
the EAFP easy to ask for forgiveness than
10

10

00:00:48.360  -->  00:00:53.220
permission is to go ahead and perform the
operation then respond to an exception
11

11

00:00:53.220  -->  00:00:58.030
if something goes wrong so trapping and
handling exceptions is pretty simple
12

12

00:00:58.030  -->  00:01:02.920
the code that may cause a problem is wrapped
in a try block and then catches used to
13

13

00:01:02.920  -->  00:01:06.360
deal with the exception now there is a
bit more to it than that things like
14

14

00:01:06.360  -->  00:01:11.450
deciding which exceptions is a catch things
of that nature but let's start going
15

15

00:01:11.450  -->  00:01:14.670
through a couple of examples to
demonstrate both approaches to deal with
16

16

00:01:14.670  -->  00:01:20.090
errors and as a result of this show how
exception handling is used so I've created a
17

17

00:01:20.090  -->  00:01:24.610
new project go ahead and make a start on
it and we're going to demonstrate both
18

18

00:01:24.610  -->  00:01:27.610
approaches using functions to perform
integer divisions
19

19

00:01:28.140  -->  00:01:33.290
so I've got my main method here and I need to write up methods first so this one
20

20

00:01:33.290  -->  00:01:42.270
is going to be private..... so that's the look before you leap
21

21

00:01:42.270  -->  00:01:47.240
scenario so.....
22

22

00:01:48.340  -->  00:01:55.340
...we are testing to see
whether y is not equal to 0 before we
23

23

00:01:55.340  -->  00:02:01.520
do any processing so....
24

24

00:02:01.520  -->  00:02:03.830
...
25

25

00:02:03.830  -->  00:02:08.890
..so that is look before you were leap we are actually
testing the conditions are valid because
26

26

00:02:08.890  -->  00:02:13.840
of course you can't divide something by
zero you'll actually get an error if you do that
27

27

00:02:13.840  -->  00:02:18.280
so we're testing to make sure that the
value that we're dividing by in this case
28

28

00:02:18.280  -->  00:02:22.730
y isn't 0 before we actually did the
test so let's look before you leap now
29

29

00:02:22.730  -->  00:02:27.930
the other way is to basically easy to
ask for forgiveness than permission so
30

30

00:02:27.930  -->  00:02:31.600
we're actually going to just do it a
different way so...
31

31

00:02:31.600  -->  00:02:41.350
.....
32

32

00:02:41.350  -->  00:02:47.050
....same parameters but
in this case we use a try block so...
33

33

00:02:47.050  -->  00:02:54.480
....
34

34

00:02:54.480  -->  00:03:00.740
.....
35

35

00:03:00.740  -->  00:03:11.440
...so now we have our two methods
36

36

00:03:11.440  -->  00:03:19.140
we need to call them from main method so we just
put....
37

37

00:03:19.140  -->  00:03:41.500
....
38

38

00:03:41.500  -->  00:03:47.190
..so if we run both cases....
39

39

00:03:51.500  -->  00:03:57.290
...you can see we got 0 as a result in both scenarios in
other words both functions can cope with
40

40

00:03:57.290  -->  00:04:02.640
an attempt to divide by 0 the LBYL
method checks first as I mentioned this
41

41

00:04:02.640  -->  00:04:10.170
is on line 13 return 0 if y is 0 whereas the EAFP method attempts the division and catches the
42

42

00:04:10.170  -->  00:04:15.470
exception that is raised if dividing by 0 now if
we didn't make any attempt to cater for the
43

43

00:04:15.470  -->  00:04:18.890
possible error the program would crash
and we can see that by adding other
44

44

00:04:18.890  -->  00:04:30.110
function so we put a third function which is...just
45

45

00:04:30.110  -->  00:04:36.130
to confirm it does actually crash and we won't just
do any checking and we won't add a try
46

46

00:04:36.130  -->  00:04:40.560
block in it so its returning x/y
and if we have
47

47

00:04:40.560  -->  00:04:48.380
output so....so we should find that 3rd method called
48

48

00:04:48.380  -->  00:04:54.460
call will actually crash and they're you go
we got it to crash arithmetic exception
49

49

00:04:55.140  -->  00:04:59.720
divide by zero so there's a lot of
debate that is still going on about
50

50

00:04:59.720  -->  00:05:03.770
which method is better but the simple
answer is that really they're both
51

51

00:05:03.770  -->  00:05:08.850
better because each approach has got its own
advantages there are more suited to
52

52

00:05:08.850  -->  00:05:13.330
certain situations now when using Java
it's more common to check first but
53

53

00:05:13.330  -->  00:05:18.040
something is far easier to just try and
see now in that example there's very
54

54

00:05:18.040  -->  00:05:21.760
little difference in the complexity of
the two methods and you can probably
55

55

00:05:21.760  -->  00:05:24.630
have a good guess at what's
going on just by reading the code
56

56

00:05:24.630  -->  00:05:28.890
now for a slightly less contrived
example let's have a go at getting a
57

57

00:05:28.890  -->  00:05:30.150
number from a keyboard
58

58

00:05:30.150  -->  00:05:34.330
what we've done is we've used a scanner quite a lots in this course but one thing we
59

59

00:05:34.330  -->  00:05:38.580
haven't done yet is to make sure that
the values entered are actually valid
60

60

00:05:38.580  -->  00:05:43.470
so this short program attempts to
read the value from the keyboard and store it in a
61

61

00:05:43.470  -->  00:05:47.710
variable the first we'll try without
making any attempt to handle invalid
62

62

00:05:47.710  -->  00:05:52.770
input at all so I'm going to close it down
and just comment these out for now....
63

63

00:05:56.730  -->  00:05:59.860
instead I'm going to put.....
64

64

00:05:59.860  -->  00:06:11.360
....
65

65

00:06:11.360  -->  00:06:31.600
.....
66

66

00:06:31.600  -->  00:06:43.440
....
67

67

00:06:43.440  -->  00:06:52.710
...so if we run this...and its waiting for input
we didn't put message on the screen to ask what
68

68

00:06:52.710  -->  00:06:56.370
we're asked what we were wanting to user to type but in this case we just enter a number
69

69

00:06:56.370  -->  00:07:02.520
like 45 x is 45 so that works ok no
problems but if we change this and run
70

70

00:07:02.520  -->  00:07:12.120
it and put in.....we get an exception input
mismatch exception you can see that the
71

71

00:07:12.120  -->  00:07:19.460
showing at the top and the attempt to use x int on invalid input
results is the reason that we are getting that error and
72

72

00:07:19.460  -->  00:07:23.260
that's because the program doesn't
handle the exception so to cope with
73

73

00:07:23.260  -->  00:07:27.240
that you can read the input into a
string instead then check each character
74

74

00:07:27.240  -->  00:07:30.770
in the string to make sure they are all digits before
attempting to parse the input into a
75

75

00:07:30.770  -->  00:07:37.010
integer so we are gonna create a get int LBYL method and called that on line 13
76

76

00:07:37.010  -->  00:07:45.580
instead so close that down and write this method so put...
77

77

00:07:46.910  -->  00:08:10.840
....
78

78

00:08:10.840  -->  00:08:13.840
.....
79

79

00:08:17.170  -->  00:08:21.600
.....
80

80

00:08:23.050  -->  00:08:29.850
.....we are going to go through the entire
81

81

00:08:29.850  -->  00:08:35.300
string that's being accepted from the
keyboard than on the next line we are going
82

82

00:08:35.300  -->  00:08:41.640
to check to see whether its valid so...
83

83

00:08:41.640  -->  00:08:48.640
...so is the digit at a specified position...position will
be...so
84

84

00:08:48.640  -->  00:08:52.930
for each element in the string each
character we are just testing to make sure
85

85

00:08:52.930  -->  00:08:57.070
it's actually a number if we find one
that isn't so we got the not
86

86

00:08:57.070  -->  00:09:05.340
character.isdigit we are setting is valid to false and
we're breaking out of the loop and
87

87

00:09:05.340  -->  00:09:11.210
if we got a valid answer if the answer was valid then we check that all the digits
88

88

00:09:11.210  -->  00:09:17.910
were their we can return....we know
that is going to work its not going to
89

89

00:09:17.910  -->  00:09:21.050
come up with an error because we've
determined they are all digits I'm going return it that
90

90

00:09:21.050  -->  00:09:25.970
way and it wasn't valid its going to fall out of that condition we return 0
91

91

00:09:27.330  -->  00:09:40.240
so now if we tested this work and will put....run that enter an integer
92

92

00:09:40.240  -->  00:09:41.260
like
93

93

00:09:41.260  -->  00:09:46.240
565 x is 565 that still works and of course other examples work as well
94

94

00:09:47.070  -->  00:09:55.520
and changing this to Tim x is 0 so we are basically
going through and check to see that the
95

95

00:09:55.520  -->  00:09:58.940
right digits throughout the entire
string that were retrieved from scanner
96

96

00:09:58.940  -->  00:10:05.110
if there was one that wasn't as a digit
so its going to be an invalid number we
97

97

00:10:05.110  -->  00:10:08.940
just returning 0 that's one
way of doing it but there's quite a bit
98

98

00:10:08.940  -->  00:10:15.360
of code their to actually confirm that
that the input was invalid so quite a bit of code
99

99

00:10:15.360  -->  00:10:20.450
to add so we can write using an exception handler
probably a lot less code so
100

100

00:10:20.450  -->  00:10:27.180
I'm going to do something on those line so...
101

101

00:10:29.800  -->  00:10:33.660
.....
102

102

00:10:34.870  -->  00:11:10.450
....
103

103

00:11:10.450  -->  00:11:16.030
so you could see that although we haven't run the
code yet their is a lot less code in the get int
104

104

00:11:16.030  -->  00:11:23.360
EAFP method compared to the one in LBYL just to be clear
here with the try catch I think you've
105

105

00:11:23.360  -->  00:11:28.140
probably got the hang of this now anyway
but when we do a try if the isn't an error
106

106

00:11:28.140  -->  00:11:33.080
the code that is in between the try block
at least try block this code any code that is in
107

107

00:11:33.080  -->  00:11:37.090
that block is executed if it's
successful so it will continue executing
108

108

00:11:37.090  -->  00:11:41.650
process many lines of code if you
wanted to their but so long as it's
109

109

00:11:41.650  -->  00:11:45.460
there's no exception that's raise the code is
going to continue processing and it will
110

110

00:11:45.460  -->  00:11:49.650
bypass the catch and fa;ll through to the
next line but if there is an error exception
111

111

00:11:49.650  -->  00:11:54.090
is raised processing stops immediately
and goes to whatever the code is in
112

112

00:11:54.090  -->  00:11:59.320
the catch block so in this case its going to
return 0 so let's just run that and
113

113

00:11:59.320  -->  00:12:11.580
confirmed that it does work so if we run that same deal enter number that
114

114

00:12:11.580  -->  00:12:19.540
still valid and invalid number Fred x is 0 so
you can see that there are scenarios
115

115

00:12:19.540  -->  00:12:23.180
depending on what you're trying to
achieve where it can be more efficient I think
116

116

00:12:23.180  -->  00:12:28.100
well certainly if you count that their is less code in the get int EAFP
117

117

00:12:28.100  -->  00:12:32.230
method compared to the get int LBYL I
think its little bit more elegant as well
118

118

00:12:32.230  -->  00:12:35.320
because you can look at that very
quickly once you understand what
119

119

00:12:35.320  -->  00:12:40.180
exceptions are and know strait away ok I can input mismatch exception we're trying to prevent
120

120

00:12:40.180  -->  00:12:45.390
that error from being captured and it is
returning 0 if there's a problem so does
121

121

00:12:45.390  -->  00:12:48.940
really depends on what you're trying to
do because its not always black and white to
122

122

00:12:48.940  -->  00:12:54.390
always use the EAFP approach or always use the
LBYL approach it does depend on what
123

123

00:12:54.390  -->  00:12:59.100
you're trying to achieve so
contrasting the fact that this EAFP the
124

124

00:12:59.100  -->  00:13:06.380
get int EAFP wa a lot more efficient compared to the get int
125

125

00:13:06.380  -->  00:13:11.670
LBYL the reverse can be sometimes be true as well I
for example probably wouldn't make
126

126

00:13:11.670  -->  00:13:15.130
sense to use a try catch block when
checking that a key
127

127

00:13:15.130  -->  00:13:19.560
exist in a map for example and in that scenario
it's probably a lot quicker to use the
128

128

00:13:19.560  -->  00:13:20.880
alternative method
129

129

00:13:20.880  -->  00:13:25.570
which is the LBYL approach you
could obviously use it with exceptions
130

130

00:13:25.570  -->  00:13:30.230
but checking for the existence of a key
first or using the map.get method is what I'm
131

131

00:13:30.230  -->  00:13:34.150
getting at and checking the value returns is a null before
attempting to use it is going to result
132

132

00:13:34.150  -->  00:13:38.620
in more readable code so in other words
its less code so it really does depend on
133

133

00:13:38.620  -->  00:13:42.710
what you're trying to achieve and the
actual solution as to which approach you
134

134

00:13:42.710  -->  00:13:45.820
actually use alright I'm gonna finish this video here now in the
135

135

00:13:46.440  -->  00:13:50.010
next video we're going to continue on and
we are going to start looking at some other types
136

136

00:13:50.010  -->  00:13:54.630
of exceptions and actually clarify
exactly what an exception is and talk
137

137

00:13:54.630  -->  00:13:58.910
about runtime exceptions and general
exceptions and the likes so as always see you
138

138

00:13:58.910  -->  00:13:59.290
in the next video
