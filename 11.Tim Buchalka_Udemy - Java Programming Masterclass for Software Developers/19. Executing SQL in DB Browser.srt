1
1

00:00:05,260  -->  00:00:07,840
alright so let's add column index
2

2

00:00:07,840  -->  00:00:10,960
constants for all the tables now unlike
3

3

00:00:10,960  -->  00:00:12,730
everything else in Java column
4

4

00:00:12,730  -->  00:00:15,520
indices are one based so the first
5

5

00:00:15,520  -->  00:00:17,710
column is at position 1 the second
6

6

00:00:17,710  -->  00:00:20,500
position 2 etc and the reason for that
7

7

00:00:20,500  -->  00:00:22,990
is if you uses 0 you actually get an
8

8

00:00:22,990  -->  00:00:23,980
exception
9

9

00:00:23,980  -->  00:00:25,840
alright so let's go to our data source
10

10

00:00:25,840  -->  00:00:28,630
and we're going to start here under
11

11

00:00:28,630  -->  00:00:31,440
line 20 after the columns_album
12

12

00:00:31,440  -->  00:00:34,060
_artist definition let's add those
13

13

00:00:34,060  -->  00:00:35,940
indices so it's going to be....
14

14

00:00:35,940  -->  00:00:59,820
...
15

15

00:00:59,820  -->  00:01:03,510
alright so moving down now to the
16

16

00:01:03,510  -->  00:01:06,330
artists table and under the column_artist
17

17

00:01:06,330  -->  00:01:08,970
_name definition will
18

18

00:01:08,970  -->  00:01:11,920
put our two indices for this table....
19

19

00:01:11,920  -->  00:01:16,990
....
20

20

00:01:16,990  -->  00:01:22,000
...
21

21

00:01:22,000  -->  00:01:27,640
alright so moving on down now to
22

22

00:01:27,640  -->  00:01:31,210
songs table and below the column_song_album
23

23

00:01:31,210  -->  00:01:33,550
let's add the
24

24

00:01:33,550  -->  00:01:36,790
four indices for this and it's probably
25

25

00:01:36,790  -->  00:01:38,290
good I check this because I realize now
26

26

00:01:38,290  -->  00:01:40,150
there's no id that we added for
27

27

00:01:40,150  -->  00:01:41,980
the song's table so let go and add that
28

28

00:01:41,980  -->  00:01:46,720
....
29

29

00:01:46,720  -->  00:01:58,740
...
30

30

00:01:58,740  -->  00:02:02,700
....
31

31

00:02:02,700  -->  00:02:22,230
...
32

32

00:02:22,230  -->  00:02:26,310
ok so now that we've done that let's
33

33

00:02:26,310  -->  00:02:28,200
update the method to use the column
34

34

00:02:28,200  -->  00:02:32,340
indices gonna go down to our while loop
35

35

00:02:32,340  -->  00:02:34,700
down here at the moment we're using the
36

36

00:02:34,700  -->  00:02:38,450
column names as you can see there
37

37

00:02:38,450  -->  00:02:41,640
let's actually change that now to....
38

38

00:02:41,640  -->  00:02:55,170
...
39

39

00:02:55,170  -->  00:02:56,790
so basically just an overloaded method that
40

40

00:02:56,790  -->  00:03:01,500
also takes an int instead of a string
41

41

00:03:01,500  -->  00:03:03,150
alright so let's now run this just to
42

42

00:03:03,150  -->  00:03:12,140
make sure that it's still working
43

43

00:03:12,140  -->  00:03:14,660
alright so still were able to run it and
44

44

00:03:14,660  -->  00:03:16,100
we haven't got any problems it's working
45

45

00:03:16,100  -->  00:03:19,340
fine now it's more efficient to use the
46

46

00:03:19,340  -->  00:03:21,650
column index because the getter methods
47

47

00:03:21,650  -->  00:03:23,750
will know exactly where to go to get the
48

48

00:03:23,750  -->  00:03:26,000
value in the result set when we use the
49

49

00:03:26,000  -->  00:03:28,060
column name the method has to match the
50

50

00:03:28,060  -->  00:03:29,480
column name against the columns in the
51

51

00:03:29,480  -->  00:03:32,240
result set now that doesn't matter when we're
52

52

00:03:32,240  -->  00:03:33,920
looping through a small set of records
53

53

00:03:33,920  -->  00:03:35,780
but if we were to loop through thousands
54

54

00:03:35,780  -->  00:03:37,670
of Records it can will make a difference
55

55

00:03:37,670  -->  00:03:40,970
now the query artists method retrieves
56

56

00:03:40,970  -->  00:03:42,890
all the records from the artists table
57

57

00:03:42,890  -->  00:03:45,260
and while this is useful
58

58

00:03:45,260  -->  00:03:47,570
we may need a way to retrieve specific
59

59

00:03:47,570  -->  00:03:50,090
records now having said that
60

60

00:03:50,090  -->  00:03:51,730
keep in mind that when working with
61

61

00:03:51,730  -->  00:03:54,260
the real world application we don't
62

62

00:03:54,260  -->  00:03:55,880
usually have to accommodate every
63

63

00:03:55,880  -->  00:03:58,220
possible query that can be made against
64

64

00:03:58,220  -->  00:04:00,920
every table what we usually do is look
65

65

00:04:00,920  -->  00:04:03,860
at the UI for the application whether
66

66

00:04:03,860  -->  00:04:06,530
that be web pages or mobile screen or
67

67

00:04:06,530  -->  00:04:08,780
desktop window and we figure out what
68

68

00:04:08,780  -->  00:04:11,300
queries we have to perform to populate
69

69

00:04:11,300  -->  00:04:14,540
each webpage window screen etc with data
70

70

00:04:14,540  -->  00:04:17,390
and those are the queries we want to
71

71

00:04:17,390  -->  00:04:19,660
accommodate in our data source class or
72

72

00:04:19,660  -->  00:04:20,600
classes
73

73

00:04:20,600  -->  00:04:22,310
alright so let's think about what
74

74

00:04:22,310  -->  00:04:24,910
queries and application using the music
75

75

00:04:24,910  -->  00:04:27,950
database might want to perform and also the
76

76

00:04:27,950  -->  00:04:30,110
sql statements would use to get the
77

77

00:04:30,110  -->  00:04:32,660
data so let's assume our application
78

78

00:04:32,660  -->  00:04:35,150
allows users to do the following view a
79

79

00:04:35,150  -->  00:04:37,610
list of artists view albums by
80

80

00:04:37,610  -->  00:04:40,370
particular artist view songs on a
81

81

00:04:40,370  -->  00:04:42,800
particular album find out which artist
82

82

00:04:42,800  -->  00:04:45,440
recorded a particular album find out
83

83

00:04:45,440  -->  00:04:47,900
which album the song was on and maybe
84

84

00:04:47,900  -->  00:04:50,090
even find out which artist recorded a
85

85

00:04:50,090  -->  00:04:52,190
particular song along with the album the
86

86

00:04:52,190  -->  00:04:55,400
songs on and the track number that's just a
87

87

00:04:55,400  -->  00:04:57,650
few you maybe have to think of other
88

88

00:04:57,650  -->  00:04:59,930
queries user might want to perform we're
89

89

00:04:59,930  -->  00:05:01,700
going to stick with thats set for our
90

90

00:05:01,700  -->  00:05:04,820
application we are not going to actually code
91

91

00:05:04,820  -->  00:05:06,910
them all here but we'll do a number of
92

92

00:05:06,910  -->  00:05:09,080
them now we've already coded the
93

93

00:05:09,080  -->  00:05:11,060
method that retrieves a list of artists
94

94

00:05:11,060  -->  00:05:13,580
so let's now code the method that
95

95

00:05:13,580  -->  00:05:15,320
retrieves all the albums for a particular
96

96

00:05:15,320  -->  00:05:17,690
artist in other words viewing all albums by
97

97

00:05:17,690  -->  00:05:19,780
particular artist now unfortunately
98

98

00:05:19,780  -->  00:05:22,310
there wasn't an elegant way to build query
99

99

00:05:22,310  -->  00:05:24,880
strings when using jdbc
100

100

00:05:24,880  -->  00:05:26,950
now would be nice to be able to create
101

101

00:05:26,950  -->  00:05:28,660
a query string by chaining methods
102

102

00:05:28,660  -->  00:05:30,610
together something like you know select
103

103

00:05:30,610  -->  00:05:34,750
. joined . order by etc and they
104

104

00:05:34,750  -->  00:05:36,340
may well be third-party libraries that
105

105

00:05:36,340  -->  00:05:38,560
give us the ability to do just that but
106

106

00:05:38,560  -->  00:05:41,800
the base API doesn't unfortunately now
107

107

00:05:41,800  -->  00:05:43,150
of course we could write methods that
108

108

00:05:43,150  -->  00:05:45,190
behave this way ourselves but that is
109

109

00:05:45,190  -->  00:05:46,240
getting a little bit outside of the
110

110

00:05:46,240  -->  00:05:47,560
scope of what we're trying to do in this
111

111

00:05:47,560  -->  00:05:50,530
section so to perform the query we want
112

112

00:05:50,530  -->  00:05:52,960
we have to build up a query string and
113

113

00:05:52,960  -->  00:05:54,520
then pass it to this statement .
114

114

00:05:54,520  -->  00:05:58,720
execute query or execute but first let's
115

115

00:05:58,720  -->  00:06:01,000
modify the query artists method to
116

116

00:06:01,000  -->  00:06:03,580
accept a parameter that indicates if and
117

117

00:06:03,580  -->  00:06:06,400
how we want the artists to be sorted now
118

118

00:06:06,400  -->  00:06:08,020
we'll need string constants in the
119

119

00:06:08,020  -->  00:06:10,990
datasource class that callers can use to
120

120

00:06:10,990  -->  00:06:13,510
specify the sort order so let's add
121

121

00:06:13,510  -->  00:06:18,940
those first so we'll add this to the
122

122

00:06:18,940  -->  00:06:23,710
class and we'll start by doing a....
123

123

00:06:23,710  -->  00:06:38,920
...
124

124

00:06:38,920  -->  00:06:45,640
....
125

125

00:06:45,640  -->  00:06:49,510
so in the query artists with it instead of
126

126

00:06:49,510  -->  00:06:52,270
passing these select start from
127

127

00:06:52,270  -->  00:06:54,130
and in the table artists as we're doing
128

128

00:06:54,130  -->  00:06:55,960
currently we're going to build up a
129

129

00:06:55,960  -->  00:06:58,600
query string as in the example about to
130

130

00:06:58,600  -->  00:06:59,590
type up
131

131

00:06:59,590  -->  00:07:01,930
let's start by adding a an argument to
132

132

00:07:01,930  -->  00:07:03,970
the query artists method we're going to
133

133

00:07:03,970  -->  00:07:08,980
put int....
134

134

00:07:08,980  -->  00:07:11,920
....
135

135

00:07:11,920  -->  00:07:31,090
...
136

136

00:07:31,090  -->  00:07:34,960
....
137

137

00:07:34,960  -->  00:07:37,580
...
138

138

00:07:37,580  -->  00:08:31,840
..
139

139

00:08:31,840  -->  00:08:36,010
...now incidentally we could have
140

140

00:08:36,010  -->  00:08:38,410
change the sort order to use a enum
141

141

00:08:38,410  -->  00:08:40,660
instead so optional if you wanted to do
142

142

00:08:40,660  -->  00:08:42,050
that you can convert that in some
143

143

00:08:42,050  -->  00:08:43,370
instances and will actually make more
144

144

00:08:43,370  -->  00:08:46,130
sense because we'd be validating the
145

145

00:08:46,130  -->  00:08:49,000
enum as a parameter so we can only
146

146

00:08:49,000  -->  00:08:51,190
specify that whereas at the moment the
147

147

00:08:51,190  -->  00:08:52,970
way we've defined that query artists and
148

148

00:08:52,970  -->  00:08:54,880
the int that has been passed to it
149

149

00:08:54,880  -->  00:08:57,760
it's just an integer so it is possible to
150

150

00:08:57,760  -->  00:09:00,290
pass an invalid value here that wouldn't
151

151

00:09:00,290  -->  00:09:02,990
be used but will stick with the
152

152

00:09:02,990  -->  00:09:03,980
integer for now
153

153

00:09:03,980  -->  00:09:07,370
alright so now that we've constructed
154

154

00:09:07,370  -->  00:09:10,850
the sql statement we need to then
155

155

00:09:10,850  -->  00:09:11,660
pass it
156

156

00:09:11,660  -->  00:09:13,610
so we're going to do a try....
157

157

00:09:13,610  -->  00:09:18,310
....
158

158

00:09:18,310  -->  00:09:24,250
...
159

159

00:09:24,250  -->  00:09:27,740
alright so I've added a sort order
160

160

00:09:27,740  -->  00:09:29,870
parameters you can see their on line 68
161

161

00:09:29,870  -->  00:09:32,680
accepts one of the sort constants and
162

162

00:09:32,680  -->  00:09:34,310
the methods building up the query string
163

163

00:09:34,310  -->  00:09:36,920
base on what the caller has passed now
164

164

00:09:36,920  -->  00:09:38,890
we built the same queries before but
165

165

00:09:38,890  -->  00:09:40,570
then we check the value of the parameter
166

166

00:09:40,570  -->  00:09:42,700
so the caller doesn't want any
167

167

00:09:42,700  -->  00:09:44,770
sorting the parameter passing
168

168

00:09:44,770  -->  00:09:46,550
will be order by none as you can see here
169

169

00:09:46,550  -->  00:09:50,260
on line 72 so we basically ignore all
170

170

00:09:50,260  -->  00:09:52,370
the ignore adding the order by
171

171

00:09:52,370  -->  00:09:53,830
Clause completely to the sql
172

172

00:09:53,830  -->  00:09:54,580
statement
173

173

00:09:54,580  -->  00:09:56,660
otherwise we're adding the order by and
174

174

00:09:56,660  -->  00:09:58,310
adding the collate no case so that we're
175

175

00:09:58,310  -->  00:10:01,180
doing a case-insensitive order and then
176

176

00:10:01,180  -->  00:10:02,990
were adding the descending and ascending
177

177

00:10:02,990  -->  00:10:04,670
depending on the parameter it's
178

178

00:10:04,670  -->  00:10:08,890
actually passed and just to confirm that
179

179

00:10:08,890  -->  00:10:12,050
notice that the if condition we're checking
180

180

00:10:12,050  -->  00:10:16,300
by order by desk here on line 76 and not
181

181

00:10:16,300  -->  00:10:19,240
order by ascending and we're
182

182

00:10:19,240  -->  00:10:20,930
doing that in case the caller pass a
183

183

00:10:20,930  -->  00:10:22,730
value that doesn't match one of the
184

184

00:10:22,730  -->  00:10:25,240
sort constants so in that case method
185

185

00:10:25,240  -->  00:10:27,470
will end up returning the artists sorted
186

186

00:10:27,470  -->  00:10:29,800
in ascending order because the else will
187

187

00:10:29,800  -->  00:10:32,560
process the else code block and I
188

188

00:10:32,560  -->  00:10:34,570
think that's a reasonable default we
189

189

00:10:34,570  -->  00:10:36,050
could have checked the caller had passed a
190

190

00:10:36,050  -->  00:10:37,730
valid value and thrown exception if they
191

191

00:10:37,730  -->  00:10:40,490
hadn't as mentioned i used a enum instead
192

192

00:10:40,490  -->  00:10:42,430
but having a default behavior like this
193

193

00:10:42,430  -->  00:10:44,990
is nicer and if this was a real
194

194

00:10:44,990  -->  00:10:46,430
application would make sure to document
195

195

00:10:46,430  -->  00:10:48,980
that somewhere so that people using
196

196

00:10:48,980  -->  00:10:50,800
your code wuld realised that's the default
197

197

00:10:50,800  -->  00:10:51,700
behavior
198

198

00:10:51,700  -->  00:10:54,470
alright and now you saw that when I
199

199

00:10:54,470  -->  00:10:56,930
finished the building the query we
200

200

00:10:56,930  -->  00:10:59,560
passed a result of sb. to string to
201

201

00:10:59,560  -->  00:11:02,500
execute query method alright so now we
202

202

00:11:02,500  -->  00:11:04,000
need to go back and modify the main
203

203

00:11:04,000  -->  00:11:06,250
method to pass one of the sort Constance
204

204

00:11:06,250  -->  00:11:10,390
so go to main and what we need to do there
205

205

00:11:10,390  -->  00:11:13,790
is add data....
206

206

00:11:13,790  -->  00:11:17,990
....
207

207

00:11:17,990  -->  00:11:19,790
should see that this will give us the
208

208

00:11:19,790  -->  00:11:25,510
result sorted by artist name you can see
209

209

00:11:25,510  -->  00:11:27,050
that's clearly z at the bottom go
210

210

00:11:27,050  -->  00:11:29,770
right up to the numbers and then as
211

211

00:11:29,770  -->  00:11:31,870
etc that's clearly working well for us
212

212

00:11:31,870  -->  00:11:35,260
that's just to be consistent i try the
213

213

00:11:35,260  -->  00:11:36,370
other ones just to make sure they're
214

214

00:11:36,370  -->  00:11:38,800
working so...
215

215

00:11:38,800  -->  00:11:42,010
...run that
216

216

00:11:42,010  -->  00:11:45,110
should give us z through a the a
217

217

00:11:45,110  -->  00:11:46,690
is in the 10's then the starting off z and
218

218

00:11:46,690  -->  00:11:49,370
y  so that's working well and just to
219

219

00:11:49,370  -->  00:11:53,000
confirm order by none should also give us
220

220

00:11:53,000  -->  00:11:54,190
ascending order because that was the
221

221

00:11:54,190  -->  00:11:57,280
default we defined
222

222

00:11:57,280  -->  00:12:01,060
I'm sorry order by none does no sorting and
223

223

00:12:01,060  -->  00:12:02,770
was going to say we passed an
224

224

00:12:02,770  -->  00:12:06,040
invalid value in that scenario that
225

225

00:12:06,040  -->  00:12:07,600
should give us descending order so i just passed
226

226

00:12:07,600  -->  00:12:09,010
a number like number 5 then we know
227

227

00:12:09,010  -->  00:12:12,190
we haven't set up sort order for that's
228

228

00:12:12,190  -->  00:12:13,480
what we should get in ascending order
229

229

00:12:13,480  -->  00:12:16,810
you can see that's working
230

230

00:12:16,810  -->  00:12:20,320
ok good things are working fine alright
231

231

00:12:20,320  -->  00:12:21,940
so now that's write the method that
232

232

00:12:21,940  -->  00:12:23,980
will retrieve all the albums by a
233

233

00:12:23,980  -->  00:12:26,530
particular artist but before we do let's
234

234

00:12:26,530  -->  00:12:28,810
try out the sql statement in the DB
235

235

00:12:28,810  -->  00:12:31,210
browser and it's always good practice to
236

236

00:12:31,210  -->  00:12:32,860
test the sql we want to use before
237

237

00:12:32,860  -->  00:12:35,200
coding it now we didn't for the sql
238

238

00:12:35,200  -->  00:12:37,180
that retrieves all the artists because
239

239

00:12:37,180  -->  00:12:39,310
it was simple but when we get into using more
240

240

00:12:39,310  -->  00:12:41,890
complex queries it's always good to run
241

241

00:12:41,890  -->  00:12:43,840
the queries against the database before
242

242

00:12:43,840  -->  00:12:45,070
coding them
243

243

00:12:45,070  -->  00:12:47,350
alright so first let's select an artist
244

244

00:12:47,350  -->  00:12:49,090
and figure out what the expected results
245

245

00:12:49,090  -->  00:12:51,910
of the query maybe we take a look at the
246

246

00:12:51,910  -->  00:12:52,960
table here
247

247

00:12:52,960  -->  00:12:55,210
so what we'll do is we'll just open the
248

248

00:12:55,210  -->  00:12:57,880
db browser so....
249

249

00:12:57,880  -->  00:13:02,950
...come up here to file and do select
250

250

00:13:02,950  -->  00:13:04,780
the most recent one which was music DB
251

251

00:13:04,780  -->  00:13:09,130
if you browse the data and
252

252

00:13:09,130  -->  00:13:13,840
choose artists and lets go with iron maiden Id number
253

253

00:13:13,840  -->  00:13:16,750
8 there on the screen right so let's
254

254

00:13:16,750  -->  00:13:19,930
try selecting the albums by iron maiden from
255

255

00:13:19,930  -->  00:13:21,700
the album's table by running the
256

256

00:13:21,700  -->  00:13:23,170
following sql and I haven't said that
257

257

00:13:23,170  -->  00:13:24,340
before but you can actually execute
258

258

00:13:24,340  -->  00:13:26,170
sql right here at the DB browser
259

259

00:13:26,170  -->  00:13:28,570
product and click on that and we can
260

260

00:13:28,570  -->  00:13:32,050
just type select we'll just have really size this font
261

261

00:13:32,050  -->  00:13:33,580
up so you can see it
262

262

00:13:33,580  -->  00:13:36,190
because it's quite small....
263

263

00:13:36,190  -->  00:13:44,440
....
264

264

00:13:44,440  -->  00:13:47,530
let's run that you can see there that
265

265

00:13:47,530  -->  00:13:51,130
we've got three entries their and
266

266

00:13:51,130  -->  00:13:52,630
noting down here also told you three
267

267

00:13:52,630  -->  00:13:55,990
rows returned and it gives us our sql
268

268

00:13:55,990  -->  00:13:57,940
that we actually used to create it or to
269

269

00:13:57,940  -->  00:14:01,330
return those results so again the
270

270

00:14:01,330  -->  00:14:02,800
number of the beast powerslave and
271

271

00:14:02,800  -->  00:14:04,900
seventh son of the seventh son are three
272

272

00:14:04,900  -->  00:14:07,540
albums that are returned by a query for Iron
273

273

00:14:07,540  -->  00:14:08,430
Maiden
274

274

00:14:08,430  -->  00:14:10,320
so now that we know what to expect from
275

275

00:14:10,320  -->  00:14:12,630
the query that will use a join let's run
276

276

00:14:12,630  -->  00:14:14,190
the query will use against the database
277

277

00:14:14,190  -->  00:14:16,740
so we can use the same sql tab we can
278

278

00:14:16,740  -->  00:14:18,630
open another one for pressing the new
279

279

00:14:18,630  -->  00:14:20,220
tab button which is the left most
280

280

00:14:20,220  -->  00:14:23,220
button on the toolbar here to open the
281

281

00:14:23,220  -->  00:14:26,100
tab and then click through to selected
282

282

00:14:26,100  -->  00:14:29,340
either of them now so now we want to type or
283

283

00:14:29,340  -->  00:14:33,270
do a join we're going...
284

284

00:14:33,270  -->  00:14:42,990
....
285

285

00:14:42,990  -->  00:15:15,540
...
286

286

00:15:15,540  -->  00:15:21,060
...let's run that and we can see
287

287

00:15:21,060  -->  00:15:23,310
our sql code on the
288

288

00:15:23,310  -->  00:15:24,870
bottom here and we can also see the
289

289

00:15:24,870  -->  00:15:27,030
results so things are working well
290

290

00:15:27,030  -->  00:15:29,820
and we're got a sql correct
291

291

00:15:29,820  -->  00:15:31,890
just for good measure let's try
292

292

00:15:31,890  -->  00:15:34,230
another artist we're going to query the
293

293

00:15:34,230  -->  00:15:37,050
albums by pink floyd and I looked at
294

294

00:15:37,050  -->  00:15:38,970
that before and that's got Pink
295

295

00:15:38,970  -->  00:15:41,130
Floyd's got the id value of a hundred
296

296

00:15:41,130  -->  00:15:43,470
thirty just to confirm that we go back
297

297

00:15:43,470  -->  00:15:45,930
to the first tab and will change the id
298

298

00:15:45,930  -->  00:15:49,530
here where artist = 8 to 130 if my memory serves
299

299

00:15:49,530  -->  00:15:54,180
and definitely that's a pink floyd and the album
300

300

00:15:54,180  -->  00:15:55,620
dark side of the moon so we've got the
301

301

00:15:55,620  -->  00:15:57,360
results and pink floyd and a lot more
302

302

00:15:57,360  -->  00:15:59,160
albums in this case then the Iron Maiden
303

303

00:15:59,160  -->  00:16:00,660
as you can see there in fact 12 in
304

304

00:16:00,660  -->  00:16:03,240
total so again we know we know what to
305

305

00:16:03,240  -->  00:16:05,460
do there we go back to our second tab
306

306

00:16:05,460  -->  00:16:08,040
again we can change this....
307

307

00:16:08,040  -->  00:16:12,500
...
308

308

00:16:12,500  -->  00:16:19,880
we should get 12 albums return you can
309

309

00:16:19,880  -->  00:16:22,100
see down here 12 rows returned
310

310

00:16:22,100  -->  00:16:24,050
there's a 12 albums from Pink Floyd
311

311

00:16:24,050  -->  00:16:28,010
alright so that's working well and just
312

312

00:16:28,010  -->  00:16:29,390
to be really sure here so that we can
313

313

00:16:29,390  -->  00:16:31,220
test the case where an artist is only got
314

314

00:16:31,220  -->  00:16:33,740
one album let's run our sql on Carole
315

315

00:16:33,740  -->  00:16:35,810
King which I looked up has only got one
316

316

00:16:35,810  -->  00:16:37,760
album in this database that by the name
317

317

00:16:37,760  -->  00:16:39,710
of tapestry and going to leave it up to
318

318

00:16:39,710  -->  00:16:41,450
you to verify that she has only one album
319

319

00:16:41,450  -->  00:16:43,940
in the table though so you can write the
320

320

00:16:43,940  -->  00:16:45,770
code based on what i've done here but
321

321

00:16:45,770  -->  00:16:48,140
lets actually change it in the
322

322

00:16:48,140  -->  00:16:55,760
second tab just to her name....
323

323

00:16:55,760  -->  00:16:59,300
run that we get that one album tapestry
324

324

00:16:59,300  -->  00:17:01,880
alright so good at this point we done three
325

325

00:17:01,880  -->  00:17:04,400
queries we done three test cases and we
326

326

00:17:04,400  -->  00:17:06,440
really ready to go so the next video
327

327

00:17:06,440  -->  00:17:08,510
we're going to start writing a query
328

328

00:17:08,510  -->  00:17:11,000
albums for artists method and start
329

329

00:17:11,000  -->  00:17:13,690
putting this sql back into java and
330

330

00:17:13,690  -->  00:17:16,250
using jdbc to execute these queries will
331

331

00:17:16,250  -->  00:17:22,180
see you in the next video
