1
1

00:00:05,060  -->  00:00:07,150
alright so moving onto a second video
2

2

00:00:07,150  -->  00:00:12,620
with challenges challenge number 8
alright so moving onto a second video
3

3

00:00:12,620  -->  00:00:15,130
so challenge number 8 so theirs many
with challenges challenge number 8
4

4

00:00:15,130  -->  00:00:16,630
interfaces in the java software
so challenge number 8 so theirs many
5

5

00:00:16,630  -->  00:00:18,680
development kit and sometimes we can use
interfaces in the java software
6

6

00:00:18,680  -->  00:00:20,680
a lambda expression instead of creating
development kit and sometimes we can use
7

7

00:00:20,680  -->  00:00:22,820
an instance that implements the
a lambda expression instead of creating
8

8

00:00:22,820  -->  00:00:25,640
interface that we want to use so given a
an instance that implements the
9

9

00:00:25,640  -->  00:00:27,290
specific interface
interface that we want to use so given a
10

10

00:00:27,290  -->  00:00:29,360
how can we tell whether we can map a
specific interface
11

11

00:00:29,360  -->  00:00:31,000
lambda expression to in other words
how can we tell whether we can map a
12

12

00:00:31,000  -->  00:00:33,250
what's the criteria that has to be met
lambda expression to in other words
13

13

00:00:33,250  -->  00:00:35,360
so pause the video have a think about
what's the criteria that has to be met
14

14

00:00:35,360  -->  00:00:36,730
that and see if you can figure out what
so pause the video have a think about
15

15

00:00:36,730  -->  00:00:38,230
that is and i'll see you when you get
that and see if you can figure out what
16

16

00:00:38,230  -->  00:00:41,420
back alright so let's have a look at
that is and i'll see you when you get
17

17

00:00:41,420  -->  00:00:45,640
that the answer well the interface has to
back alright so let's have a look at
18

18

00:00:45,640  -->  00:00:48,350
be a functional interface can have only
that the answer well the interface has to
19

19

00:00:48,350  -->  00:00:50,890
a single method that must be implemented
be a functional interface can have only
20

20

00:00:50,890  -->  00:00:53,570
now functional interface can contain
a single method that must be implemented
21

21

00:00:53,570  -->  00:00:55,550
more than one method but all the methods
now functional interface can contain
22

22

00:00:55,550  -->  00:00:57,320
but one must have default
more than one method but all the methods
23

23

00:00:57,320  -->  00:00:59,830
implementations now most of the time
but one must have default
24

24

00:00:59,830  -->  00:01:01,480
the documentation for an interface will
implementations now most of the time
25

25

00:01:01,480  -->  00:01:02,830
state whether it's a functional
the documentation for an interface will
26

26

00:01:02,830  -->  00:01:04,210
interface
state whether it's a functional
27

27

00:01:04,210  -->  00:01:06,840
alright so moving on
interface
28

28

00:01:06,840  -->  00:01:09,720
next question here is what we just said
alright so moving on
29

29

00:01:09,720  -->  00:01:12,060
in mind can we then use a lambda
next question here is what we just said
30

30

00:01:12,060  -->  00:01:14,700
expression to represent an instance of
in mind can we then use a lambda
31

31

00:01:14,700  -->  00:01:17,190
the java.util.concurrent.callable
expression to represent an instance of
32

32

00:01:17,190  -->  00:01:19,500
interface and as a hint here you have
the java.util.concurrent.callable
33

33

00:01:19,500  -->  00:01:21,870
to check the documentation and as a
interface and as a hint here you have
34

34

00:01:21,870  -->  00:01:23,280
java developer you have to be really
to check the documentation and as a
35

35

00:01:23,280  -->  00:01:24,510
comfortable looking up a reading
java developer you have to be really
36

36

00:01:24,510  -->  00:01:26,700
documentation it's a really important
comfortable looking up a reading
37

37

00:01:26,700  -->  00:01:28,650
part of the process of being a developer
documentation it's a really important
38

38

00:01:28,650  -->  00:01:31,080
and theirs a link on the screen you can
part of the process of being a developer
39

39

00:01:31,080  -->  00:01:32,610
see there to the call of documentation
and theirs a link on the screen you can
40

40

00:01:32,610  -->  00:01:36,000
links also in the resources section so
see there to the call of documentation
41

41

00:01:36,000  -->  00:01:37,770
check that out and see whether you
links also in the resources section so
42

42

00:01:37,770  -->  00:01:39,390
can answer that question and i'll see
check that out and see whether you
43

43

00:01:39,390  -->  00:01:41,250
or pause the video now and i'll see you
can answer that question and i'll see
44

44

00:01:41,250  -->  00:01:44,360
when you get back
or pause the video now and i'll see you
45

45

00:01:44,360  -->  00:01:46,970
alright the answer the callable
when you get back
46

46

00:01:46,970  -->  00:01:48,890
interfaces only one method that has to
alright the answer the callable
47

47

00:01:48,890  -->  00:01:51,080
be implemented the call method so in
interfaces only one method that has to
48

48

00:01:51,080  -->  00:01:52,760
other words we can use a lambda for it
be implemented the call method so in
49

49

00:01:52,760  -->  00:01:56,150
and if you went to the documentation and
other words we can use a lambda for it
50

50

00:01:56,150  -->  00:01:58,100
have a look you could see that you would
and if you went to the documentation and
51

51

00:01:58,100  -->  00:01:59,840
see that the documentation states that
have a look you could see that you would
52

52

00:01:59,840  -->  00:02:01,460
it's a functional interface
see that the documentation states that
53

53

00:02:01,460  -->  00:02:06,200
alright next question is that
it's a functional interface
54

54

00:02:06,200  -->  00:02:08,780
java.util.comperator or
alright next question is that
55

55

00:02:08,780  -->  00:02:10,820
comparator i should say interface a
java.util.comperator or
56

56

00:02:10,820  -->  00:02:12,950
functional interface see if you can
comparator i should say interface a
57

57

00:02:12,950  -->  00:02:15,220
figure that out and pause the video and
functional interface see if you can
58

58

00:02:15,220  -->  00:02:16,550
I'll see you when you get back with the
figure that out and pause the video and
59

59

00:02:16,550  -->  00:02:23,840
answer the answer to that is yes it is
I'll see you when you get back with the
60

60

00:02:23,840  -->  00:02:25,910
so despite containing over ten methods
answer the answer to that is yes it is
61

61

00:02:25,910  -->  00:02:27,920
only one method has to be implemented
so despite containing over ten methods
62

62

00:02:27,920  -->  00:02:30,320
and that's the compare method because of
only one method has to be implemented
63

63

00:02:30,320  -->  00:02:32,510
that it's a functional interface and
and that's the compare method because of
64

64

00:02:32,510  -->  00:02:33,920
there's a link on the screen to the
that it's a functional interface and
65

65

00:02:33,920  -->  00:02:36,470
documentation which you may have
there's a link on the screen to the
66

66

00:02:36,470  -->  00:02:37,700
already found done a bit of
documentation which you may have
67

67

00:02:37,700  -->  00:02:39,800
research on links also the resources
already found done a bit of
68

68

00:02:39,800  -->  00:02:40,580
section
research on links also the resources
69

69

00:02:40,580  -->  00:02:42,290
alright so that is challenge eight
section
70

70

00:02:42,290  -->  00:02:44,570
completed let's move on now to the next
alright so that is challenge eight
71

71

00:02:44,570  -->  00:02:46,220
one challenge 9 and we're going to
completed let's move on now to the next
72

72

00:02:46,220  -->  00:02:50,300
get back into a bit of coding
one challenge 9 and we're going to
73

73

00:02:50,300  -->  00:02:54,940
alright challenge 9
get back into a bit of coding
74

74

00:02:54,940  -->  00:02:56,470
so let's suppose we got the following
alright challenge 9
75

75

00:02:56,470  -->  00:02:58,660
list of the top five male and female
so let's suppose we got the following
76

76

00:02:58,660  -->  00:03:03,580
names for 2015
list of the top five male and female
77

77

00:03:03,580  -->  00:03:05,470
so with that list you need to write some
names for 2015
78

78

00:03:05,470  -->  00:03:07,660
code to print the items in the list in
so with that list you need to write some
79

79

00:03:07,660  -->  00:03:09,940
sorted order and with the first letter
code to print the items in the list in
80

80

00:03:09,940  -->  00:03:12,520
in each name upper cased so the name
sorted order and with the first letter
81

81

00:03:12,520  -->  00:03:14,110
Harry in lowercase should be printed as
in each name upper cased so the name
82

82

00:03:14,110  -->  00:03:16,270
Harry with a capital H and should be
Harry in lowercase should be printed as
83

83

00:03:16,270  -->  00:03:18,700
printed after Emily and before Isla
Harry with a capital H and should be
84

84

00:03:18,700  -->  00:03:20,800
now you want to use lambda expressions
printed after Emily and before Isla
85

85

00:03:20,800  -->  00:03:22,660
obviously wherever possible because this
now you want to use lambda expressions
86

86

00:03:22,660  -->  00:03:24,550
is a lambda challenge so go ahead and
obviously wherever possible because this
87

87

00:03:24,550  -->  00:03:26,590
try that and pause the video now and
is a lambda challenge so go ahead and
88

88

00:03:26,590  -->  00:03:28,120
i'll see you when you get back with the
try that and pause the video now and
89

89

00:03:28,120  -->  00:03:32,110
answer just before i do that the list
i'll see you when you get back with the
90

90

00:03:32,110  -->  00:03:33,520
you can see on screen there it is
answer just before i do that the list
91

91

00:03:33,520  -->  00:03:35,230
available as a resource in this video so
you can see on screen there it is
92

92

00:03:35,230  -->  00:03:36,310
you can just copy and paste that
available as a resource in this video so
93

93

00:03:36,310  -->  00:03:38,290
directly into save you some typing
you can just copy and paste that
94

94

00:03:38,290  -->  00:03:42,550
ok let's have a look at the answer for
directly into save you some typing
95

95

00:03:42,550  -->  00:03:43,090
that
ok let's have a look at the answer for
96

96

00:03:43,090  -->  00:03:45,850
so I'm just going to start by pasting in
that
97

97

00:03:45,850  -->  00:03:48,820
the list of baby names
so I'm just going to start by pasting in
98

98

00:03:48,820  -->  00:03:55,380
ok
the list of baby names
99

99

00:03:55,380  -->  00:03:57,360
so want to write the code to print the items
ok
100

100

00:03:57,360  -->  00:03:58,890
in the list in sorted order so how do we
so want to write the code to print the items
101

101

00:03:58,890  -->  00:04:02,070
do that we're going to start by defining
in the list in sorted order so how do we
102

102

00:04:02,070  -->  00:04:04,950
a new array list so its going to be a list of string
do that we're going to start by defining
103

103

00:04:04,950  -->  00:04:09,180
....
a new array list so its going to be a list of string
104

104

00:04:09,180  -->  00:04:14,160
.....
....
105

105

00:04:14,160  -->  00:04:19,890
....
.....
106

106

00:04:19,890  -->  00:04:24,840
....
....
107

107

00:04:24,840  -->  00:04:32,790
.....
....
108

108

00:04:32,790  -->  00:04:33,990
....
.....
109

109

00:04:33,990  -->  00:04:41,640
....
....
110

110

00:04:41,640  -->  00:04:46,230
.....
....
111

111

00:04:46,230  -->  00:04:48,240
.....
.....
112

112

00:04:48,240  -->  00:04:51,210
....
.....
113

113

00:04:51,210  -->  00:04:54,210
.....
....
114

114

00:04:54,210  -->  00:04:56,070
....
.....
115

115

00:04:56,070  -->  00:05:06,450
....
....
116

116

00:05:06,450  -->  00:05:08,970
alright so now that we've done that we
....
117

117

00:05:08,970  -->  00:05:10,530
then want to sort it so i'm going to do
alright so now that we've done that we
118

118

00:05:10,530  -->  00:05:15,750
a first uppercase....
then want to sort it so i'm going to do
119

119

00:05:15,750  -->  00:05:17,910
.....
a first uppercase....
120

120

00:05:17,910  -->  00:05:20,370
....
.....
121

121

00:05:20,370  -->  00:05:25,680
.....
....
122

122

00:05:25,680  -->  00:05:31,440
....
.....
123

123

00:05:31,440  -->  00:05:33,180
.....
....
124

124

00:05:33,180  -->  00:05:38,130
....
.....
125

125

00:05:38,130  -->  00:05:45,870
....
....
126

126

00:05:45,870  -->  00:05:48,660
so their are many ways to complete this but my
....
127

127

00:05:48,660  -->  00:05:50,190
solution on the screens is just one
so their are many ways to complete this but my
128

128

00:05:50,190  -->  00:05:52,350
answer so we create a new list that
solution on the screens is just one
129

129

00:05:52,350  -->  00:05:54,510
holds all the names with first letter
answer so we create a new list that
130

130

00:05:54,510  -->  00:05:57,000
uppercase and I used to for each method
holds all the names with first letter
131

131

00:05:57,000  -->  00:05:59,190
to iterate over the list we use
uppercase and I used to for each method
132

132

00:05:59,190  -->  00:06:00,960
sub string to get the first letter for
to iterate over the list we use
133

133

00:06:00,960  -->  00:06:02,610
each name then we upper case that
sub string to get the first letter for
134

134

00:06:02,610  -->  00:06:04,680
letter then use sub string again to
each name then we upper case that
135

135

00:06:04,680  -->  00:06:06,390
concatenate it with the rest of the name
letter then use sub string again to
136

136

00:06:06,390  -->  00:06:08,810
and we added the result of the lambda
concatenate it with the rest of the name
137

137

00:06:08,810  -->  00:06:11,210
expression to the first uppercase list list
and we added the result of the lambda
138

138

00:06:11,210  -->  00:06:14,030
now when for each completes the first
expression to the first uppercase list list
139

139

00:06:14,030  -->  00:06:15,990
uppercase list contains all the names
now when for each completes the first
140

140

00:06:15,990  -->  00:06:18,770
with the first letters uppercase and
uppercase list contains all the names
141

141

00:06:18,770  -->  00:06:20,750
then used the sort method to pass it a
with the first letters uppercase and
142

142

00:06:20,750  -->  00:06:23,630
comparator in our comparator we're calling
then used the sort method to pass it a
143

143

00:06:23,630  -->  00:06:26,690
the string . compareto method and now
comparator in our comparator we're calling
144

144

00:06:26,690  -->  00:06:28,130
we've been print each item in a sorted
the string . compareto method and now
145

145

00:06:28,130  -->  00:06:30,470
list to the console so I've used lambdas
we've been print each item in a sorted
146

146

00:06:30,470  -->  00:06:33,240
in three places with the for each method
list to the console so I've used lambdas
147

147

00:06:33,240  -->  00:06:36,240
with the sort method and with the system
in three places with the for each method
148

148

00:06:36,240  -->  00:06:37,800
. out . print line method
with the sort method and with the system
149

149

00:06:37,800  -->  00:06:39,860
as i said this is only one way to do it
. out . print line method
150

150

00:06:39,860  -->  00:06:41,240
there are other ways including using
as i said this is only one way to do it
151

151

00:06:41,240  -->  00:06:42,950
third-party libraries that manipulate
there are other ways including using
152

152

00:06:42,950  -->  00:06:45,050
strings but this works and we'll use
third-party libraries that manipulate
153

153

00:06:45,050  -->  00:06:47,300
this version of the code going forward
strings but this works and we'll use
154

154

00:06:47,300  -->  00:06:49,050
alright so let's move on now to
this version of the code going forward
155

155

00:06:49,050  -->  00:06:53,150
challenge 10
alright so let's move on now to
156

156

00:06:53,150  -->  00:06:57,080
alright challenge 10
challenge 10
157

157

00:06:57,080  -->  00:06:59,750
so we now want to change the code so that it
alright challenge 10
158

158

00:06:59,750  -->  00:07:02,420
uses method references remember that a
so we now want to change the code so that it
159

159

00:07:02,420  -->  00:07:04,430
method reference looks like class ::
uses method references remember that a
160

160

00:07:04,430  -->  00:07:08,060
method name so based on the
method reference looks like class ::
161

161

00:07:08,060  -->  00:07:10,700
code that I provided in my solution see if
method name so based on the
162

162

00:07:10,700  -->  00:07:12,140
you can convert that to use method
code that I provided in my solution see if
163

163

00:07:12,140  -->  00:07:13,970
references so  pause the video and I'll
you can convert that to use method
164

164

00:07:13,970  -->  00:07:17,930
see you when you get back alright so how
references so  pause the video and I'll
165

165

00:07:17,930  -->  00:07:21,020
do we convert that to those two lines to
see you when you get back alright so how
166

166

00:07:21,020  -->  00:07:22,400
use method references the lines that
do we convert that to those two lines to
167

167

00:07:22,400  -->  00:07:24,830
we're working to change are lines 67 and
use method references the lines that
168

168

00:07:24,830  -->  00:07:28,430
68 using the . sort and the for each so
we're working to change are lines 67 and
169

169

00:07:28,430  -->  00:07:31,040
first thing I'm going to comment those out so
68 using the . sort and the for each so
170

170

00:07:31,040  -->  00:07:32,540
we've got the original code in there you
first thing I'm going to comment those out so
171

171

00:07:32,540  -->  00:07:34,760
need to download the source code so in
we've got the original code in there you
172

172

00:07:34,760  -->  00:07:36,950
terms of making that sort line and
need to download the source code so in
173

173

00:07:36,950  -->  00:07:39,590
method reference to use a method reference
terms of making that sort line and
174

174

00:07:39,590  -->  00:07:42,980
....
method reference to use a method reference
175

175

00:07:42,980  -->  00:07:45,050
....
....
176

176

00:07:45,050  -->  00:07:50,840
.....
....
177

177

00:07:50,840  -->  00:07:53,300
....
.....
178

178

00:07:53,300  -->  00:07:57,920
.....and that's going to be....
....
179

179

00:07:57,920  -->  00:08:02,840
....so that's
.....and that's going to be....
180

180

00:08:02,840  -->  00:08:04,910
it and actually have been running this
....so that's
181

181

00:08:04,910  -->  00:08:06,740
have I so I just run this to see that it's
it and actually have been running this
182

182

00:08:06,740  -->  00:08:07,760
actually working probably should have
have I so I just run this to see that it's
183

183

00:08:07,760  -->  00:08:09,530
done with the previous challenge and you
actually working probably should have
184

184

00:08:09,530  -->  00:08:10,760
can see we get everything in uppercase
done with the previous challenge and you
185

185

00:08:10,760  -->  00:08:12,350
there and sorted correctly so that's
can see we get everything in uppercase
186

186

00:08:12,350  -->  00:08:15,260
working nicely
there and sorted correctly so that's
187

187

00:08:15,260  -->  00:08:24,250
alright time for challenge 11
working nicely
188

188

00:08:24,250  -->  00:08:25,630
alright so now i want to do the same
alright time for challenge 11
189

189

00:08:25,630  -->  00:08:27,610
thing upper casing the first letter and
alright so now i want to do the same
190

190

00:08:27,610  -->  00:08:29,500
sorting and printing the list using a
thing upper casing the first letter and
191

191

00:08:29,500  -->  00:08:32,410
stream and a chain of stream operations
sorting and printing the list using a
192

192

00:08:32,410  -->  00:08:34,810
so pause the video now go and do that
stream and a chain of stream operations
193

193

00:08:34,810  -->  00:08:36,940
and I'll see you when you get back
so pause the video now go and do that
194

194

00:08:36,940  -->  00:08:41,740
alright so how we go about that
and I'll see you when you get back
195

195

00:08:41,740  -->  00:08:44,260
converting this or using stream to
alright so how we go about that
196

196

00:08:44,260  -->  00:08:45,760
sort the baby names
converting this or using stream to
197

197

00:08:45,760  -->  00:08:46,930
what I'm going to do is I'm just going
sort the baby names
198

198

00:08:46,930  -->  00:08:53,320
to click comment that out and we're going to
what I'm going to do is I'm just going
199

199

00:08:53,320  -->  00:08:56,500
come in here and i'm going to type....
to click comment that out and we're going to
200

200

00:08:56,500  -->  00:08:59,530
actually what we can do is well comment
come in here and i'm going to type....
201

201

00:08:59,530  -->  00:09:00,760
those out as well because the stream is
actually what we can do is well comment
202

202

00:09:00,760  -->  00:09:02,440
gonna handle the sorting stuff as well
those out as well because the stream is
203

203

00:09:02,440  -->  00:09:07,120
so we're going to do....
gonna handle the sorting stuff as well
204

204

00:09:07,120  -->  00:09:11,680
.....
so we're going to do....
205

205

00:09:11,680  -->  00:09:20,500
....
.....
206

206

00:09:20,500  -->  00:09:48,190
....
....
207

207

00:09:48,190  -->  00:09:49,870
couple of things to note here
....
208

208

00:09:49,870  -->  00:09:51,520
first we didn't have to create a new
couple of things to note here
209

209

00:09:51,520  -->  00:09:53,290
list to hold the names with uppercase
first we didn't have to create a new
210

210

00:09:53,290  -->  00:09:55,870
first letters the map method returns a
list to hold the names with uppercase
211

211

00:09:55,870  -->  00:09:57,730
stream containing all the transform
first letters the map method returns a
212

212

00:09:57,730  -->  00:10:00,700
transformed names now secondly this
stream containing all the transform
213

213

00:10:00,700  -->  00:10:02,200
code is a little more concise than the
transformed names now secondly this
214

214

00:10:02,200  -->  00:10:03,940
previous versions and just as easy to
code is a little more concise than the
215

215

00:10:03,940  -->  00:10:06,730
read in this case so we went from java
previous versions and just as easy to
216

216

00:10:06,730  -->  00:10:08,800
code that used lambda expressions to
read in this case so we went from java
217

217

00:10:08,800  -->  00:10:11,080
more concise code that used method
code that used lambda expressions to
218

218

00:10:11,080  -->  00:10:13,990
references to streams and when
more concise code that used method
219

219

00:10:13,990  -->  00:10:15,190
you're first learning how to code
references to streams and when
220

220

00:10:15,190  -->  00:10:16,900
using lambdas or streams this is a good
you're first learning how to code
221

221

00:10:16,900  -->  00:10:17,860
way to do it
using lambdas or streams this is a good
222

222

00:10:17,860  -->  00:10:19,450
we start by writing the more verbose
way to do it
223

223

00:10:19,450  -->  00:10:21,550
version that doesn't use lambdas but
we start by writing the more verbose
224

224

00:10:21,550  -->  00:10:24,310
uses anonymous classes you can replace
version that doesn't use lambdas but
225

225

00:10:24,310  -->  00:10:26,380
the anonymous class with lambdas or use
uses anonymous classes you can replace
226

226

00:10:26,380  -->  00:10:28,780
method references where applicable or
the anonymous class with lambdas or use
227

227

00:10:28,780  -->  00:10:30,970
when applicable and then finally we can
method references where applicable or
228

228

00:10:30,970  -->  00:10:33,070
rewrite the code to use streams but of
when applicable and then finally we can
229

229

00:10:33,070  -->  00:10:34,720
course only when it makes sense to use
rewrite the code to use streams but of
230

230

00:10:34,720  -->  00:10:36,320
them
course only when it makes sense to use
231

231

00:10:36,320  -->  00:10:38,210
just run this to make sure that it does
them
232

232

00:10:38,210  -->  00:10:43,010
work we still get the same output this
just run this to make sure that it does
233

233

00:10:43,010  -->  00:10:44,450
that's working nicely
work we still get the same output this
234

234

00:10:44,450  -->  00:10:49,010
alright let's move on to challenge 12
that's working nicely
235

235

00:10:49,010  -->  00:10:53,520
alright the challenge 12
alright let's move on to challenge 12
236

236

00:10:53,520  -->  00:10:55,440
so instead of printing out the sorted
alright the challenge 12
237

237

00:10:55,440  -->  00:10:57,240
names print out how many name start with
so instead of printing out the sorted
238

238

00:10:57,240  -->  00:11:00,570
the letter a in uppercase instead t hints here
names print out how many name start with
239

239

00:11:00,570  -->  00:11:03,510
you have to modify the stream chain and
the letter a in uppercase instead t hints here
240

240

00:11:03,510  -->  00:11:04,720
secondly you'll have to add another
you have to modify the stream chain and
241

241

00:11:04,720  -->  00:11:06,610
statement to print the number of items
secondly you'll have to add another
242

242

00:11:06,610  -->  00:11:08,580
so that's the challenge
statement to print the number of items
243

243

00:11:08,580  -->  00:11:10,260
pause the video and see if you can
so that's the challenge
244

244

00:11:10,260  -->  00:11:11,700
figure out that challenge and i'll see
pause the video and see if you can
245

245

00:11:11,700  -->  00:11:15,220
you when you get back alright so let's
figure out that challenge and i'll see
246

246

00:11:15,220  -->  00:11:16,560
have a go at doing that
you when you get back alright so let's
247

247

00:11:16,560  -->  00:11:18,970
counting the names beginning with the a
have a go at doing that
248

248

00:11:18,970  -->  00:11:24,300
would be a long....
counting the names beginning with the a
249

249

00:11:24,300  -->  00:11:33,000
....
would be a long....
250

250

00:11:33,000  -->  00:12:20,580
....
....
251

251

00:12:20,580  -->  00:12:23,740
let's just run that then we'll just talk
....
252

252

00:12:23,740  -->  00:12:27,630
about the code solution you can see we got
let's just run that then we'll just talk
253

253

00:12:27,630  -->  00:12:29,310
names beginning with a too and we've
about the code solution you can see we got
254

254

00:12:29,310  -->  00:12:30,930
got a merely an a over their so that's
names beginning with a too and we've
255

255

00:12:30,930  -->  00:12:31,830
correct
got a merely an a over their so that's
256

256

00:12:31,830  -->  00:12:35,170
so here we use the filter method to
correct
257

257

00:12:35,170  -->  00:12:36,910
remove all items from the stream that
so here we use the filter method to
258

258

00:12:36,910  -->  00:12:39,510
don't begin with a and then we use the
remove all items from the stream that
259

259

00:12:39,510  -->  00:12:41,190
count method to get the number of items
don't begin with a and then we use the
260

260

00:12:41,190  -->  00:12:43,600
in the resulting stream which again as I
count method to get the number of items
261

261

00:12:43,600  -->  00:12:45,810
just pointed out was 2 alright we got
in the resulting stream which again as I
262

262

00:12:45,810  -->  00:12:47,670
two challenges to go lets now look
just pointed out was 2 alright we got
263

263

00:12:47,670  -->  00:12:49,620
at challenge number 13
two challenges to go lets now look
264

264

00:12:49,620  -->  00:12:56,070
alright so challenge number 13
at challenge number 13
265

265

00:12:56,070  -->  00:12:58,140
let's go back to the previous version of
alright so challenge number 13
266

266

00:12:58,140  -->  00:13:00,330
the code when we're printing the sorted
let's go back to the previous version of
267

267

00:13:00,330  -->  00:13:01,590
names
the code when we're printing the sorted
268

268

00:13:01,590  -->  00:13:03,270
let's suppose that we want debug what's
names
269

269

00:13:03,270  -->  00:13:05,100
going on when the chains executed
let's suppose that we want debug what's
270

270

00:13:05,100  -->  00:13:07,620
instead of printing out the names at the
going on when the chains executed
271

271

00:13:07,620  -->  00:13:09,450
end of the chain you know maybe we're
instead of printing out the names at the
272

272

00:13:09,450  -->  00:13:11,130
not sure the code that upper cases the
end of the chain you know maybe we're
273

273

00:13:11,130  -->  00:13:13,170
first letter is working correctly so
not sure the code that upper cases the
274

274

00:13:13,170  -->  00:13:15,570
let's use peek to print out the names
first letter is working correctly so
275

275

00:13:15,570  -->  00:13:18,450
after the map method is executed so what
let's use peek to print out the names
276

276

00:13:18,450  -->  00:13:19,680
will the following code on the next
after the map method is executed so what
277

277

00:13:19,680  -->  00:13:24,600
screen print to the console there's the
will the following code on the next
278

278

00:13:24,600  -->  00:13:26,820
code on the screen so what will be the
screen print to the console there's the
279

279

00:13:26,820  -->  00:13:29,130
result of that code when we executed so
code on the screen so what will be the
280

280

00:13:29,130  -->  00:13:30,390
in other words what can be printed out
result of that code when we executed so
281

281

00:13:30,390  -->  00:13:32,580
on the console so pause the video now
in other words what can be printed out
282

282

00:13:32,580  -->  00:13:34,620
and see if you can figure out the answer
on the console so pause the video now
283

283

00:13:34,620  -->  00:13:36,510
and i'll see you when you get back
and see if you can figure out the answer
284

284

00:13:36,510  -->  00:13:39,300
so the answer bit of a trick question I am
and i'll see you when you get back
285

285

00:13:39,300  -->  00:13:43,170
afraid the answer is nothing the chain
so the answer bit of a trick question I am
286

286

00:13:43,170  -->  00:13:45,420
doesn't contain a terminal operation so
afraid the answer is nothing the chain
287

287

00:13:45,420  -->  00:13:47,460
nothing is printed out remember that
doesn't contain a terminal operation so
288

288

00:13:47,460  -->  00:13:50,880
stream chains are evaluated lazily so in
nothing is printed out remember that
289

289

00:13:50,880  -->  00:13:52,350
other words nothing happens until the
stream chains are evaluated lazily so in
290

290

00:13:52,350  -->  00:13:54,480
terminal operations added to the chain
other words nothing happens until the
291

291

00:13:54,480  -->  00:13:56,790
at that point the entire chain is then
terminal operations added to the chain
292

292

00:13:56,790  -->  00:13:57,870
executed
at that point the entire chain is then
293

293

00:13:57,870  -->  00:13:59,790
alright so let's now move on to the last
executed
294

294

00:13:59,790  -->  00:14:05,010
challenge challenge number 14 alright
alright so let's now move on to the last
295

295

00:14:05,010  -->  00:14:08,260
challenge 14 last one
challenge challenge number 14 alright
296

296

00:14:08,260  -->  00:14:09,910
your challenge is to add a terminal
challenge 14 last one
297

297

00:14:09,910  -->  00:14:11,800
operation to this chain the code that i
your challenge is to add a terminal
298

298

00:14:11,800  -->  00:14:13,480
just showed you so the peek call will
operation to this chain the code that i
299

299

00:14:13,480  -->  00:14:15,820
execute and you can grab that code in
just showed you so the peek call will
300

300

00:14:15,820  -->  00:14:17,260
the resources section of this video to
execute and you can grab that code in
301

301

00:14:17,260  -->  00:14:19,540
save you having to type it in if you need
the resources section of this video to
302

302

00:14:19,540  -->  00:14:21,130
to check the documentation for
save you having to type it in if you need
303

303

00:14:21,130  -->  00:14:23,230
stream at the link here on the screen
to check the documentation for
304

304

00:14:23,230  -->  00:14:25,120
and again that's in also the link is in
stream at the link here on the screen
305

305

00:14:25,120  -->  00:14:27,580
the resources section of the video now
and again that's in also the link is in
306

306

00:14:27,580  -->  00:14:29,380
since the peek call is printed every
the resources section of the video now
307

307

00:14:29,380  -->  00:14:31,930
item try to do something else with the
since the peek call is printed every
308

308

00:14:31,930  -->  00:14:33,400
terminal operation other words don't
item try to do something else with the
309

309

00:14:33,400  -->  00:14:35,890
just print out the items again and see
terminal operation other words don't
310

310

00:14:35,890  -->  00:14:38,290
if you can attempt that pause the video
just print out the items again and see
311

311

00:14:38,290  -->  00:14:42,460
now and i'll see you when you get back
if you can attempt that pause the video
312

312

00:14:42,460  -->  00:14:44,020
alright so let's start off with the code
now and i'll see you when you get back
313

313

00:14:44,020  -->  00:14:45,940
that we know doesn't do anything at
alright so let's start off with the code
314

314

00:14:45,940  -->  00:14:47,020
this stage I'm just going to print it
that we know doesn't do anything at
315

315

00:14:47,020  -->  00:14:48,580
out or paste it in I should say
this stage I'm just going to print it
316

316

00:14:48,580  -->  00:14:51,460
that's our basic code if we run that we
out or paste it in I should say
317

317

00:14:51,460  -->  00:14:53,710
should find it doesn't do anything
that's our basic code if we run that we
318

318

00:14:53,710  -->  00:14:57,730
we only got the code the output from
should find it doesn't do anything
319

319

00:14:57,730  -->  00:15:00,130
line 84 and again we haven't added the
we only got the code the output from
320

320

00:15:00,130  -->  00:15:01,870
terminal operation that's why it's
line 84 and again we haven't added the
321

321

00:15:01,870  -->  00:15:04,960
not actually working so let's add a
terminal operation that's why it's
322

322

00:15:04,960  -->  00:15:06,670
terminal operation so going to add
not actually working so let's add a
323

323

00:15:06,670  -->  00:15:08,740
one and we'll just use . count
terminal operation so going to add
324

324

00:15:08,740  -->  00:15:12,370
so now that even though were throwing
one and we'll just use . count
325

325

00:15:12,370  -->  00:15:14,680
away the result you should find the peek
so now that even though were throwing
326

326

00:15:14,680  -->  00:15:17,410
call runs and prints out the names at
away the result you should find the peek
327

327

00:15:17,410  -->  00:15:20,170
this stage which aren't sorted so we don't
call runs and prints out the names at
328

328

00:15:20,170  -->  00:15:21,460
actually have to use the result of
this stage which aren't sorted so we don't
329

329

00:15:21,460  -->  00:15:22,990
terminal operations let's just run this
actually have to use the result of
330

330

00:15:22,990  -->  00:15:27,040
to confirm that it does work you can see
terminal operations let's just run this
331

331

00:15:27,040  -->  00:15:28,870
we are now getting output put again and
to confirm that it does work you can see
332

332

00:15:28,870  -->  00:15:30,970
again it's printing the names at the stage
we are now getting output put again and
333

333

00:15:30,970  -->  00:15:32,980
which they aren't sorted in case you're
again it's printing the names at the stage
334

334

00:15:32,980  -->  00:15:34,990
wondering because of course the stream
which they aren't sorted in case you're
335

335

00:15:34,990  -->  00:15:37,840
for sorting it is after the peek another
wondering because of course the stream
336

336

00:15:37,840  -->  00:15:39,820
possible result would be changing
for sorting it is after the peek another
337

337

00:15:39,820  -->  00:15:45,610
count.....
possible result would be changing
338

338

00:15:45,610  -->  00:15:50,370
....
count.....
339

339

00:15:50,370  -->  00:15:57,900
run that again like so and what
....
340

340

00:15:57,900  -->  00:16:00,150
I did there was used . collect which is
run that again like so and what
341

341

00:16:00,150  -->  00:16:02,400
a terminal operation to store the result
I did there was used . collect which is
342

342

00:16:02,400  -->  00:16:04,800
of a chain to a list we may want to pass
a terminal operation to store the result
343

343

00:16:04,800  -->  00:16:06,540
the results to a method or do something
of a chain to a list we may want to pass
344

344

00:16:06,540  -->  00:16:08,670
else with the list at that point
the results to a method or do something
345

345

00:16:08,670  -->  00:16:10,500
alright so that's it for the lambda
else with the list at that point
346

346

00:16:10,500  -->  00:16:12,080
expressions challenge and actually for
alright so that's it for the lambda
347

347

00:16:12,080  -->  00:16:13,410
this entire section
expressions challenge and actually for
348

348

00:16:13,410  -->  00:16:16,050
my advice is to get used to working with
this entire section
349

349

00:16:16,050  -->  00:16:18,600
lambdas and streams by practicing using them
my advice is to get used to working with
350

350

00:16:18,600  -->  00:16:20,580
at some point you'll think of a lambda
lambdas and streams by practicing using them
351

351

00:16:20,580  -->  00:16:22,380
expression first rather than using
at some point you'll think of a lambda
352

352

00:16:22,380  -->  00:16:25,200
anonymous class so i hope you enjoyed
expression first rather than using
353

353

00:16:25,200  -->  00:16:26,940
this section of code lambdas are really
anonymous class so i hope you enjoyed
354

354

00:16:26,940  -->  00:16:29,160
quite interesting and useful i'll see
this section of code lambdas are really
355

355

00:16:29,160  -->  00:16:35,150
you in the next section of the course
quite interesting and useful i'll see
