WEBVTT
1
1

00:00:05.530  -->  00:00:08.090
So we're now gonna start
talking about generics.
2

2

00:00:08.090  -->  00:00:11.360
So what are generics in Java and
why would we want to actually use them?
3

3

00:00:11.360  -->  00:00:14.560
And actually if you'll see in a minute
we've already used generics so
4

4

00:00:14.560  -->  00:00:18.060
far in the course, and
they actually are incredibly useful.
5

5

00:00:18.060  -->  00:00:21.810
So just as we can create methods
that take arguments in Java and
6

6

00:00:21.810  -->  00:00:24.680
we can replace the parameters
that we declared from the method.
7

7

00:00:24.680  -->  00:00:29.260
Generics allow us to create classes in
the faces of methods that take types of
8

8

00:00:29.260  -->  00:00:32.570
parameters called
unsurprisingly type parameters.
9

9

00:00:32.570  -->  00:00:35.930
So different to other parameters
we're talking about type parameters.
10

10

00:00:35.930  -->  00:00:40.520
So you've seen in previous videos,
when we created array list and
11

11

00:00:40.520  -->  00:00:42.660
also link lists, this in use.
12

12

00:00:42.660  -->  00:00:44.860
But just to show how useful they are,
13

13

00:00:44.860  -->  00:00:48.740
we're gonna start with an array list
example that doesn't use generics.
14

14

00:00:48.740  -->  00:00:51.830
So we're gonna create an array
list populated with integers.
15

15

00:00:51.830  -->  00:00:54.170
And a method that prints the context
of the array list doubled.
16

16

00:00:54.170  -->  00:00:56.320
So let's go through and
write that code, so
17

17

00:00:56.320  -->  00:00:59.890
good idea to see that first before we
actually go ahead and use generics.
18

18

00:00:59.890  -->  00:01:05.980
So go to top ArrayList
items = new ArrayList,
19

19

00:01:05.980  -->  00:01:09.130
we'll add some items.
20

20

00:01:09.130  -->  00:01:11.000
Items.add one.
21

21

00:01:11.000  -->  00:01:17.280
Let's add another four so 2, 3, 4, 5.
22

22

00:01:17.280  -->  00:01:19.940
So that's actually adding
an integer to the array list and
23

23

00:01:19.940  -->  00:01:24.030
it's using auto boxing automatically
which we've done before in the course.
24

24

00:01:24.030  -->  00:01:26.770
Is converting the primitive type that
we've just typed in there into an integer.
25

25

00:01:26.770  -->  00:01:30.730
And what we're going to do then is
call a method called printDoubled.
26

26

00:01:30.730  -->  00:01:35.460
We're gonna pass the parameter which
is our ArrayList items and that
27

27

00:01:35.460  -->  00:01:38.870
function we're going to right now and it's
purpose is just to double the contents.
28

28

00:01:38.870  -->  00:01:45.820
So in the top private_static
void printDoubled and
29

29

00:01:45.820  -->  00:01:50.090
it's gonna be an ArrayList n and
30

30

00:01:50.090  -->  00:01:54.530
we'll put for(Object i : n ).
31

31

00:01:54.530  -->  00:01:59.250
Then we're gonna print Integer,
I'm casting it as an integer i * 2.
32

32

00:01:59.250  -->  00:02:03.530
So just before we actually discuss that
we'll actually run it to make sure that it
33

33

00:02:03.530  -->  00:02:07.630
actually works and you can see we've
got the numbers 1, 2, 3, 4, 5 and
34

34

00:02:07.630  -->  00:02:11.300
we're actually doubling them
multiplying the current value by 2.
35

35

00:02:11.300  -->  00:02:14.390
So we're getting 2, 4, 6, 8,
10, so that actually works.
36

36

00:02:14.390  -->  00:02:15.860
We get the expected output.
37

37

00:02:15.860  -->  00:02:18.450
But note however,
we actually used object here.
38

38

00:02:18.450  -->  00:02:20.960
Cuz we didn't actually specify
what the object was above,
39

39

00:02:20.960  -->  00:02:23.170
and we also had to cast it as an integer.
40

40

00:02:23.170  -->  00:02:27.090
So if I actually got rid of the cast here,
we'll actually get an error and
41

41

00:02:27.090  -->  00:02:29.000
the error was cannot be applied to object.
42

42

00:02:29.000  -->  00:02:33.730
So we have to sort of tell Java, what type
of object is actually in that ArrayList.
43

43

00:02:33.730  -->  00:02:35.790
So I'll put that back so
the code doesn't break.
44

44

00:02:35.790  -->  00:02:40.730
But technically, the ArrayLlist as we've
created it, can actually contain anything.
45

45

00:02:40.730  -->  00:02:43.900
Any type of object, not just an integer
which we've basically done here.
46

46

00:02:43.900  -->  00:02:46.360
So that's actually more
than a minor inconvenience,
47

47

00:02:46.360  -->  00:02:49.700
because it also completely breaks
the compiler's type checking.
48

48

00:02:49.700  -->  00:02:53.420
And just to see the impact
of how this will affect us,
49

49

00:02:53.420  -->  00:02:58.250
if I try to add something here like
Items.add and add my name there.
50

50

00:02:58.250  -->  00:03:02.170
Now that's quite valid and there's no
indication that we've actually got
51

51

00:03:02.170  -->  00:03:06.350
a problem with our code there's no red
indications or red underlining in our code
52

52

00:03:06.350  -->  00:03:10.030
as far as Java is concerned this
is valid and it actually is valid.
53

53

00:03:10.030  -->  00:03:14.800
But the problem is when we run it,
we actually get an exception.
54

54

00:03:14.800  -->  00:03:19.560
So what's actually happening is with
the object which was a string Tim in this
55

55

00:03:19.560  -->  00:03:23.600
case, trying to be converted to an integer
and it cannot be actually converted.
56

56

00:03:23.600  -->  00:03:24.670
You can see that cannot,
57

57

00:03:24.670  -->  00:03:27.480
java.link dot string cannot be
cast to java.link.integers.
58

58

00:03:27.480  -->  00:03:31.000
So in other words, we actually got
an error because I was trying to add
59

59

00:03:31.000  -->  00:03:33.800
a different type of
data to the array list.
60

60

00:03:33.800  -->  00:03:36.820
The real problem wasn't so much so
crashed although that's bad enough, but
61

61

00:03:36.820  -->  00:03:40.530
the real problem is that it's not
actually showing up until run time.
62

62

00:03:40.530  -->  00:03:44.140
So in other words, the program compiles
fine, I can come here and build and
63

63

00:03:44.140  -->  00:03:48.700
rebuild a project and as far as Java is
concerned there are literally no problems.
64

64

00:03:48.700  -->  00:03:51.210
We got a couple of warnings over here,
potential warnings.
65

65

00:03:51.210  -->  00:03:54.600
Uncheck call to at ease remember those raw
taught array list which is an intelligized
66

66

00:03:54.600  -->  00:03:57.910
way of sort of saying that maybe you
should be doing this a different way.
67

67

00:03:57.910  -->  00:04:00.810
But the point is we don't
actually get any errors as such.
68

68

00:04:00.810  -->  00:04:02.930
So if you actually see these
errors in more detail,
69

69

00:04:02.930  -->  00:04:06.390
we can come up to the View
menu click Tool Window.
70

70

00:04:06.390  -->  00:04:09.800
And actually select Messages, so if you
click on that or we could do Cmd+0, and
71

71

00:04:09.800  -->  00:04:13.220
you can probably see what the equivalent
key stroke is in your operating system,
72

72

00:04:13.220  -->  00:04:13.990
so click on that.
73

73

00:04:13.990  -->  00:04:16.580
You can see it's Alt+0 for Windows Linux.
74

74

00:04:16.580  -->  00:04:18.710
And we can actually see those
warnings in more detail.
75

75

00:04:18.710  -->  00:04:23.210
You can actually see that main.java
uses unchecked or unsafe operations, and
76

76

00:04:23.210  -->  00:04:27.150
that's Java's way of actually saying that
there's actually a problem with our code.
77

77

00:04:27.150  -->  00:04:30.600
And again, just a confirmation that if we
actually haul out this over here IntelliJ
78

78

00:04:30.600  -->  00:04:33.180
is also sort of saying okay,
now what are you doing here?
79

79

00:04:33.180  -->  00:04:37.100
So basically the Java compiler and
obviously IntelliJ by default knows how to
80

80

00:04:37.100  -->  00:04:40.910
provide these warnings because they're
actually looking at your code and
81

81

00:04:40.910  -->  00:04:43.160
they know that array
list is a generic type.
82

82

00:04:43.160  -->  00:04:46.040
But we're using it without
specifying a type parameter.
83

83

00:04:46.040  -->  00:04:48.260
In other words using it without generics.
84

84

00:04:48.260  -->  00:04:52.220
So in other words, what we haven't done
is sort of said with our ArrayList
85

85

00:04:52.220  -->  00:04:55.960
what type of objects we're going
to be storing in the ArrayList.
86

86

00:04:55.960  -->  00:04:57.890
So the ArrayList as we've
used it here is a raw type.
87

87

00:04:57.890  -->  00:05:04.600
Now prior to Java 1.5, this was the only
way to code, there was no generics.
88

88

00:05:04.600  -->  00:05:05.760
And when Java 1.5 come out,
89

89

00:05:05.760  -->  00:05:09.310
they actually introduced the generics
which we're about to talk about.
90

90

00:05:09.310  -->  00:05:12.830
And they actually left this old
way of doing things in purely for
91

91

00:05:12.830  -->  00:05:16.230
backwards compatibility with code
that's written from previous versions.
92

92

00:05:16.230  -->  00:05:17.490
So in other words,
93

93

00:05:17.490  -->  00:05:21.310
if they didn't do that, that old
code would no longer run any more.
94

94

00:05:21.310  -->  00:05:24.340
So the old code continues to run but
when you're writing new code,
95

95

00:05:24.340  -->  00:05:26.790
you should almost never use
these raw types any more.
96

96

00:05:26.790  -->  00:05:29.380
And you can see why,
because obviously in this instance,
97

97

00:05:29.380  -->  00:05:32.790
we were able to crash it quite easily
by making a simple little change there.
98

98

00:05:32.790  -->  00:05:36.390
And you might look at that and think well
hang on, I know that there's integers and
99

99

00:05:36.390  -->  00:05:39.000
I'm never gonna actually
add a string there.
100

100

00:05:39.000  -->  00:05:40.990
But thinking ahead down the track,
101

101

00:05:40.990  -->  00:05:43.210
when your programs start
getting a lot more complex.
102

102

00:05:43.210  -->  00:05:45.720
It can be a lot harder to
track these types of bugs.
103

103

00:05:45.720  -->  00:05:47.280
This one is quite easy cuz
it's only a few line of code.
104

104

00:05:47.280  -->  00:05:51.560
It's certainly not recommended to use
these raw types, and because type safety
105

105

00:05:51.560  -->  00:05:55.090
is so easy to implement these days
in the current versions of Java,
106

106

00:05:55.090  -->  00:05:57.660
I highly recommend you actually do that.
107

107

00:05:57.660  -->  00:06:00.330
So when we actually provide a type
parameter to a generic type,
108

108

00:06:00.330  -->  00:06:01.960
this is called a parameterized type.
109

109

00:06:01.960  -->  00:06:04.470
So I've actually specified
the type using angle brackets,
110

110

00:06:04.470  -->  00:06:07.180
and I know you've seen this
before in earlier videos.
111

111

00:06:07.180  -->  00:06:10.130
So what we're gonna do now is we're gonna
specify an integer type for me clear
112

112

00:06:10.130  -->  00:06:13.240
the ArrayList on line 8, and also in
the parameter on printDouble on line 20.
113

113

00:06:13.240  -->  00:06:15.580
So I've come up here to line eight,
we're gonna actually change this.
114

114

00:06:15.580  -->  00:06:18.420
We put our angle brackets in integer.
115

115

00:06:18.420  -->  00:06:20.130
So we're actually saying,
116

116

00:06:20.130  -->  00:06:24.850
now this is the type that we're actually
gonna be using in this ArrayList.
117

117

00:06:24.850  -->  00:06:29.420
We're also gonna come down here to
line 20, to line 19 I should say, and
118

118

00:06:29.420  -->  00:06:31.360
put ArrayList Integer like so.
119

119

00:06:31.360  -->  00:06:35.260
So we're now specifying, this is the type
of data that we're actually going to be
120

120

00:06:35.260  -->  00:06:36.520
saving in our ArrayList.
121

121

00:06:36.520  -->  00:06:38.790
And you can see what's
happened straight away,
122

122

00:06:38.790  -->  00:06:40.680
that there's still a couple of errors.
123

123

00:06:40.680  -->  00:06:43.190
And you can see this one
here's actually an error.
124

124

00:06:43.190  -->  00:06:46.720
It's actually telling us now that
you're trying to add a string
125

125

00:06:46.720  -->  00:06:49.450
to what if defined as
an ArrayList of integers.
126

126

00:06:49.450  -->  00:06:52.360
And it's actually an error it's not
a warning anymore, it's actually an error.
127

127

00:06:52.360  -->  00:06:54.550
So it's actually not
allowing us to do that.
128

128

00:06:54.550  -->  00:06:59.310
But the first warning, it's still
saying its an unchecked assignment.
129

129

00:06:59.310  -->  00:07:02.690
It's actually saying Java.link.integer,
but
130

130

00:07:02.690  -->  00:07:07.390
it's still as far as it's concerned,
an unchecked assignment.
131

131

00:07:07.390  -->  00:07:08.910
If I press my control function F1, and
132

132

00:07:08.910  -->  00:07:10.990
you can see it's giving us
this as an example of that.
133

133

00:07:10.990  -->  00:07:14.900
We can actually try and fix that by
putting another assignment here,
134

134

00:07:14.900  -->  00:07:16.870
if you type integer as well there.
135

135

00:07:16.870  -->  00:07:21.470
And that actually does
get rid of that warning.
136

136

00:07:21.470  -->  00:07:24.490
So it does actually pay to look at these
warnings that actually come up and
137

137

00:07:24.490  -->  00:07:26.920
we're appropriate to
actually remove the code
138

138

00:07:26.920  -->  00:07:29.500
that is actually causing the warnings
you see in this case now,
139

139

00:07:29.500  -->  00:07:32.540
by adding the integer twice we'll
actually remove the warnings.
140

140

00:07:32.540  -->  00:07:36.000
And I can actually now get rid of this
as well, cuz that's no longer relevant.
141

141

00:07:36.000  -->  00:07:38.590
And we've now got a tick in
the top right hand corner, and
142

142

00:07:38.590  -->  00:07:41.030
that basically says as far
as IntelliJ is concerned,
143

143

00:07:41.030  -->  00:07:44.080
there's no longer any errors in our
code and our code is good to go.
144

144

00:07:44.080  -->  00:07:48.180
And again,
if I git rid of that parametrize type,
145

145

00:07:48.180  -->  00:07:51.520
we actually do get some warnings again.
146

146

00:07:51.520  -->  00:07:55.320
We get a few warnings one here,
and also one here as well.
147

147

00:07:55.320  -->  00:07:57.820
So do actually pay heed to those errors,
the warnings,
148

148

00:07:57.820  -->  00:07:59.990
because they do actually make sense.
149

149

00:07:59.990  -->  00:08:02.930
So check them to make sure your
code's adhering to the standards and
150

150

00:08:02.930  -->  00:08:05.580
you're not actually basically
writing bad Java code.
151

151

00:08:05.580  -->  00:08:09.940
So adding a type hue is actually
unnecessary because Java's got enough
152

152

00:08:09.940  -->  00:08:13.520
information in the declaration to the left
hand side to actually include that.
153

153

00:08:13.520  -->  00:08:15.660
So it's really to see whether
you're happy with these warnings or
154

154

00:08:15.660  -->  00:08:19.010
not you could quite happily as
I've showed you delete that.
155

155

00:08:19.010  -->  00:08:22.650
And that is still valid and the code will
still work you've just got some warnings.
156

156

00:08:22.650  -->  00:08:24.470
So generally speaking,
157

157

00:08:24.470  -->  00:08:28.000
I would recommend just to do whatever it
takes to get rid of the warnings and that
158

158

00:08:28.000  -->  00:08:31.510
you're actually doing things the right
way as far as just the Java's concerned.
159

159

00:08:31.510  -->  00:08:33.050
And also a note here if
you're actually doing this,
160

160

00:08:33.050  -->  00:08:34.000
this is another way of doing it.
161

161

00:08:34.000  -->  00:08:37.990
You can actually just specify
the angle brackets without a type.
162

162

00:08:37.990  -->  00:08:39.540
And we've actually got a error message and
163

163

00:08:39.540  -->  00:08:42.650
that's probably cuz I haven't set
my appropriate language level up.
164

164

00:08:42.650  -->  00:08:44.360
So I'm just gonna go into my settings,
165

165

00:08:45.390  -->  00:08:50.130
File > Project Structure and
I've got this set to six instead of eight.
166

166

00:08:50.130  -->  00:08:51.600
So I'm gonna set that to eight.
167

167

00:08:51.600  -->  00:08:54.320
You notice diamonds is set for version
seven, but I'm gonna set it to version
168

168

00:08:54.320  -->  00:08:56.830
eight cuz that's what it should be for
each project anyway.
169

169

00:08:56.830  -->  00:08:59.460
If I click OK to that,
that error should actually go away.
170

170

00:08:59.460  -->  00:09:00.970
And so what's that saying there now,
171

171

00:09:00.970  -->  00:09:03.870
that's probably the best way
of actually writing the code
172

172

00:09:03.870  -->  00:09:07.880
because what that is saying is that
the fist declaration here in the left hand
173

173

00:09:07.880  -->  00:09:10.780
side is all that it needs and we don't
actually have to type another one.
174

174

00:09:10.780  -->  00:09:13.540
And I think we'll actually get a warning
now, if they actually type this in here,
175

175

00:09:13.540  -->  00:09:14.760
cuz we're actually set to 1.8.
176

176

00:09:14.760  -->  00:09:16.860
You can see we actually got a warning now.
177

177

00:09:16.860  -->  00:09:20.940
Explicit top argument can be replaced with
the diamond, and that's why this isn't to
178

178

00:09:20.940  -->  00:09:24.310
a less than and a greater than sign
together is referred to as a diamond.
179

179

00:09:24.310  -->  00:09:27.870
So that using the version 1.8.
180

180

00:09:27.870  -->  00:09:30.750
And again,
I did that with File > Project Structure,
181

181

00:09:30.750  -->  00:09:34.790
just making sure project
language level was set to 1.8.
182

182

00:09:34.790  -->  00:09:37.320
Because I've got that set to 1.8, we've
actually got a tick across the board.
183

183

00:09:37.320  -->  00:09:41.370
So that's actually the correct way to
actually use it to make sure you haven't
184

184

00:09:41.370  -->  00:09:45.430
got any warnings, but if you were using
an older level of source code as you saw I
185

185

00:09:45.430  -->  00:09:49.740
had 1.6 in use, then you will have to
specify the actual parameter there.
186

186

00:09:49.740  -->  00:09:50.940
And again, using that without
187

187

00:09:50.940  -->  00:09:53.220
the parameter in the middle
is called the diamond.
188

188

00:09:53.220  -->  00:09:56.160
So now, we haven't got any errors and
there's no warnings left,
189

189

00:09:56.160  -->  00:09:59.260
and I actually remove this because
of course before that removing that
190

190

00:09:59.260  -->  00:10:01.950
we've actually got one error and
of course the error again,
191

191

00:10:01.950  -->  00:10:05.280
was trying to add string to add integer
object to an array list of integers.
192

192

00:10:05.280  -->  00:10:08.080
So I'm gonna comment that out
to get rid of that error.
193

193

00:10:08.080  -->  00:10:09.850
So we've now got no warnings and
no errors.
194

194

00:10:09.850  -->  00:10:12.190
We've got the green tick in
the top right hand corner and
195

195

00:10:12.190  -->  00:10:13.460
that's exactly where you wanted.
196

196

00:10:13.460  -->  00:10:16.950
So by telling array list what types
of objects we wanted it to hold,
197

197

00:10:16.950  -->  00:10:20.580
the program now fails to compile when
we try to add the value item tim.
198

198

00:10:20.580  -->  00:10:24.270
So I had to comment that out in order for
the code to even be able to work.
199

199

00:10:24.270  -->  00:10:27.170
Now incidentally,
coming down here to the loop.
200

200

00:10:27.170  -->  00:10:30.290
We can actually get rid of this cast now,
we don't need that in there anymore.
201

201

00:10:31.810  -->  00:10:35.460
We can change this,
we can either set that to be an integer or
202

202

00:10:35.460  -->  00:10:37.110
we can actually even go back and
set that to an int.
203

203

00:10:38.480  -->  00:10:41.060
And Java is actually handling that for
us automatically.
204

204

00:10:41.060  -->  00:10:42.470
Obviously, we don't need the object now,
205

205

00:10:42.470  -->  00:10:45.060
because we know what kind
of data it actually is.
206

206

00:10:45.060  -->  00:10:48.010
And Java is smart enough to figure out
the locate you using an array list of
207

207

00:10:48.010  -->  00:10:49.150
integers here.
208

208

00:10:49.150  -->  00:10:51.700
Therefore, I can I know how to
convert it back to an int and
209

209

00:10:51.700  -->  00:10:53.930
it's doing that automatically
with the auto boxing and
210

210

00:10:53.930  -->  00:10:55.930
unboxing that we've talked
about in previous videos.
211

211

00:10:55.930  -->  00:10:58.620
And if we actually run this code we
should find that it actually works and
212

212

00:11:00.340  -->  00:11:01.760
you can see we didn't get the same result.
213

213

00:11:01.760  -->  00:11:04.040
So that's the introduction to generics.
214

214

00:11:04.040  -->  00:11:06.690
In the next video, what I'm gonna
do is take it to the next level,
215

215

00:11:06.690  -->  00:11:09.620
we're gonna actually look at
creating our own generic classes.
216

216

00:11:09.620  -->  00:11:10.400
So I will see you in that video.
