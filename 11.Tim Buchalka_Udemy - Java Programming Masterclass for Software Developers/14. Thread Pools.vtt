WEBVTT
1
1

00:00:05.180  -->  00:00:08.810
so I mentioned in the last video that
we're going to look at the executive
2

2

00:00:08.810  -->  00:00:14.330
service interface now this is also found
in the java.util.concurrent
3

3

00:00:14.330  -->  00:00:20.210
package and we use implementations of
this interface to manage threads for us
4

4

00:00:20.210  -->  00:00:24.920
so that we don't have to explicitly
create and start threads and unlike what
5

5

00:00:24.920  -->  00:00:26.270
we've been doing so far
6

6

00:00:26.270  -->  00:00:31.940
now the implementation is provided by
the jdk manage things like thread
7

7

00:00:31.940  -->  00:00:37.570
scheduling and they also optimize the
creation of threads which can generally
8

8

00:00:37.570  -->  00:00:40.850
be expensive in terms of performance and
memory
9

9

00:00:40.850  -->  00:00:45.620
now we still have to provide runnable
objects to the service because we
10

10

00:00:45.620  -->  00:00:50.690
obviously have to code the tasks we want
to execute on background threads but we
11

11

00:00:50.690  -->  00:00:55.480
don't directly manage any threads as
such the executive service
12

12

00:00:55.480  -->  00:01:01.070
implementations allow us to focus on the
code we want to run without the fuss of
13

13

00:01:01.070  -->  00:01:03.710
managing threads and their life cycles
14

14

00:01:03.710  -->  00:01:09.290
essentially we create an implementation
of executive service and give it to the
15

15

00:01:09.290  -->  00:01:14.390
tasks we want to run without worrying
about the details of how the tasks will
16

16

00:01:14.390  -->  00:01:15.610
actually be run
17

17

00:01:15.610  -->  00:01:20.860
so the executive service implementations
make use of thread polls now I'm not
18

18

00:01:20.860  -->  00:01:25.490
going to be going into any great detail
about thread polls for this video we
19

19

00:01:25.490  -->  00:01:29.630
really need to know is that the thread
poll is a managed set of threads
20

20

00:01:30.220  -->  00:01:33.470
it reduces the overhead of thread
creation
21

21

00:01:33.470  -->  00:01:38.540
especially in applications that use a
large number of threads a thread poll
22

22

00:01:38.540  -->  00:01:42.970
may also limit the number of threads
that are active running a blocked at any
23

23

00:01:42.970  -->  00:01:48.250
one particular time when using a certain
types of thread polls an application
24

24

00:01:48.250  -->  00:01:52.850
can't run wild and create an excessive
number of threads in java
25

25

00:01:52.850  -->  00:01:56.240
we use thread polls through the
executive service implementations
26

26

00:01:56.240  -->  00:02:01.490
now if we want to we can actually
implement our own thread poll by creating
27

27

00:02:01.490  -->  00:02:05.720
a class that implements one of the
thread poll interfaces and by doing so
28

28

00:02:05.720  -->  00:02:09.500
we can configure how the underlying
thread poll
29

29

00:02:09.500  -->  00:02:13.510
ultimately is managed but it's
recommended that we use the
30

30

00:02:13.510  -->  00:02:16.740
implementations provided by the jvm in
most situations
31

31

00:02:16.740  -->  00:02:20.850
now since thread polls can limit the
number of active threads
32

32

00:02:20.850  -->  00:02:26.160
it's possible that when we asked the
service to run a task it won't be
33

33

00:02:26.160  -->  00:02:28.530
able to run it straight away
34

34

00:02:28.530  -->  00:02:32.190
for example if the maximum number of
threads has been set to 20
35

35

00:02:32.880  -->  00:02:36.210
they may already be 20 active threads
when we submitted a task
36

36

00:02:36.210  -->  00:02:41.040
in that case the task will have to wait
on the services queue until one of the active
37

37

00:02:41.040  -->  00:02:43.440
threads actually terminates
38

38

00:02:43.440  -->  00:02:50.130
now the executive service interface
extends the executor interface which is
39

39

00:02:50.130  -->  00:02:50.790
only got
40

40

00:02:50.790  -->  00:02:56.250
one method execute now the execute
method is intended to be a replacement
41

41

00:02:56.250  -->  00:03:00.000
for the following code I'm just going to
just type some code in just to show you
42

42

00:03:00.000  -->  00:03:02.160
what this does for us
43

43

00:03:02.160  -->  00:03:12.600
so you've seen this code before
something like....
44

44

00:03:12.600  -->  00:03:17.880
....so what the executor interface
45

45

00:03:17.880  -->  00:03:21.180
execute method is meant to do is replace
that code
46

46

00:03:21.180  -->  00:03:26.250
so the scenario of using this executive
interface we do something like...
47

47

00:03:26.250  -->  00:03:32.580
....again r being a runnable and then we'll see examples of that
48

48

00:03:32.580  -->  00:03:38.850
shortly now as with the lock interface
sub interfaces and implementations of
49

49

00:03:38.850  -->  00:03:43.770
executor offer more functionality than
the base interface and we can do a lot
50

50

00:03:43.770  -->  00:03:48.090
more when we use implementations and
executor like the executive service that
51

51

00:03:48.090  -->  00:03:49.560
I have been talking about
52

52

00:03:49.560  -->  00:03:54.870
we have to use factory methods in the
executors class to create the instances
53

53

00:03:54.870  -->  00:03:57.420
that implement executor service
54

54

00:03:57.420  -->  00:04:01.800
now we can create several different
types of executor services based on the
55

55

00:04:01.800  -->  00:04:03.270
type of thread pool
56

56

00:04:03.270  -->  00:04:08.130
we want the service to use the different
types of thread polls we can create is
57

57

00:04:08.130  -->  00:04:14.250
really outside the scope of this video
and a fixed thread poll means that there's
58

58

00:04:14.250  -->  00:04:18.900
only really ever going to be a
specific number of threads available to
59

59

00:04:18.900  -->  00:04:21.180
process tasks at any one time
60

60

00:04:21.180  -->  00:04:23.630
if all the threads are busy and more
61

61

00:04:23.630  -->  00:04:28.830
tasks as a better execution those tasks
will just have to wait in a queue so let's
62

62

00:04:28.830  -->  00:04:32.750
go ahead now and update the code that
we've been working on so that it
63

63

00:04:32.750  -->  00:04:37.880
uses a fix thread poll so going to call the
executors.new fixed thread poll
64

64

00:04:37.880  -->  00:04:43.310
method to create the executive service
that we are going to use and we're going
65

65

00:04:43.310  -->  00:04:47.580
to pass in three as the number of
threads we want to manage one for the
66

66

00:04:47.580  -->  00:04:52.740
producer thread and 2 consumers so
going to back up to the start of the
67

67

00:04:52.740  -->  00:04:58.370
code after our code for the re-entrant
lock we're going to set up our executor
68

68

00:04:58.370  -->  00:04:58.910
service
69

69

00:04:58.910  -->  00:05:06.500
we're going to type....
70

70

00:05:07.500  -->  00:05:10.800
....
71

71

00:05:10.800  -->  00:05:15.240
....we need to pass the number of
threads in this case as i mentioned is
72

72

00:05:15.240  -->  00:05:16.400
going to be 3
73

73

00:05:16.400  -->  00:05:20.720
so we've got one for the producer
thread and another two for each consumer
74

74

00:05:20.720  -->  00:05:22.370
total of 3
75

75

00:05:22.370  -->  00:05:27.990
so we've created that for starters but
now what we need to do is change the way
76

76

00:05:27.990  -->  00:05:33.530
that we start so we've got the existing
thread starting on lines 25 to 27
77

77

00:05:33.530  -->  00:05:37.560
so we need to actually change that code so instead of being a new thread
78

78

00:05:38.150  -->  00:05:45.770
we're going to instead do....and we
79

79

00:05:45.770  -->  00:05:50.090
don't need the .start on the end either
when we do the same thing to each of the
80

80

00:05:50.090  -->  00:05:53.090
other two threads the 2 consumer
threads
81

81

00:05:58.050  -->  00:06:07.940
and then the last consumer thread so lets now
run the application now we've
82

82

00:06:07.940  -->  00:06:18.240
added the executor service to see what
happens now everything seemed to work
83

83

00:06:18.240  -->  00:06:23.870
ok but notice that it doesn't terminate
the application still running so we have
84

84

00:06:23.870  -->  00:06:28.590
to actually terminate the application
manually the 2 consumer threads report
85

85

00:06:28.590  -->  00:06:33.180
that they're exiting and we can see that
on the screen with the exiting text
86

86

00:06:33.180  -->  00:06:36.240
there and we know that producer thread
is terminated
87

87

00:06:36.240  -->  00:06:39.990
so why did the application terminates in
this scenario well the reason is because
88

88

00:06:39.990  -->  00:06:44.090
we've got to shut down the executive
service when we no longer need it if we
89

89

00:06:44.090  -->  00:06:45.360
don't shut it down
90

90

00:06:45.360  -->  00:06:49.310
application is going to remain live
even after the main thread is terminated
91

91

00:06:49.310  -->  00:06:53.460
so we need to actually call the shutdown
method to shut down the service
92

92

00:06:53.460  -->  00:07:00.090
let's do that and i'm going to actually
add the commands or the command to shut
93

93

00:07:00.090  -->  00:07:07.910
it down on the line after the lines that
execute it to start our threads....
94

94

00:07:07.910  -->  00:07:09.300
....
95

95

00:07:09.300  -->  00:07:12.300
so just run that see what happens
96

96

00:07:17.330  -->  00:07:21.620
notice the application close this time
so when shutdowns called
97

97

00:07:21.620  -->  00:07:26.090
the service will wait for any executing
tasks to terminate and you saw that that
98

98

00:07:26.090  -->  00:07:30.130
happened in this case because we've
already scheduled three tasks three
99

99

00:07:30.130  -->  00:07:34.690
threads and they went through and completed their tasks before
100

100

00:07:34.690  -->  00:07:37.180
the service got shut down
101

101

00:07:37.180  -->  00:07:41.210
so what it won't do after we issue that
shut down or after we call the shutdown
102

102

00:07:41.210  -->  00:07:44.090
method is that it won't accept any new
tasks
103

103

00:07:44.090  -->  00:07:47.620
now this is an orderly shutdown if we
wanted the service to shut down
104

104

00:07:47.620  -->  00:07:48.880
immediately
105

105

00:07:48.880  -->  00:07:53.650
we call the shutdown now method as opposed
to shut down in that case the service
106

106

00:07:53.650  -->  00:07:58.750
will try to halt any remaining tasks and
will also throw away any tasks in tis queue
107

107

00:07:58.750  -->  00:08:03.440
but there aren't any guarantees that it
will be able to do that now it's
108

108

00:08:03.440  -->  00:08:05.840
possible that some threads will never
terminate
109

109

00:08:05.840  -->  00:08:08.840
so it's always best to try and shut down
in an orderly fashion
110

110

00:08:09.940  -->  00:08:19.750
just running it again to confirm you can
see that we've got a normal shutdown now
111

111

00:08:19.750  -->  00:08:25.000
using an executive service for this
application is overkill but it's vital
112

112

00:08:25.000  -->  00:08:29.210
for applications that use a large number
of threads because using them allows the
113

113

00:08:29.210  -->  00:08:32.270
jvm to optimize thread management
114

114

00:08:32.270  -->  00:08:36.110
now when we want to receive a value
back from a thread that we are executing
115

115

00:08:36.110  -->  00:08:37.270
in the background
116

116

00:08:37.270  -->  00:08:41.810
we can use the submit method now the submit method accepts a callable
117

117

00:08:41.810  -->  00:08:46.430
object which is very similar to a runnable
object except that it can return a value
118

118

00:08:46.430  -->  00:08:50.540
the value can be returned as an object
of type future
119

119

00:08:50.540  -->  00:08:56.080
so let's look at an example of how to do
this so at the moment our producer and
120

120

00:08:56.080  -->  00:08:59.300
consumable classes are runmables so
that we can't use them in this scenario
121

121

00:08:59.890  -->  00:09:04.040
so what we're going to do is use an
anonymous callable class to show how
122

122

00:09:04.040  -->  00:09:09.350
this would work so i'm going to put some
code after we set up our tasks before
123

123

00:09:09.350  -->  00:09:10.430
the shutdown
124

124

00:09:10.430  -->  00:09:15.560
i'm going to type in....
125

125

00:09:16.690  -->  00:09:25.450
....
126

126

00:09:25.450  -->  00:09:30.400
....and let's return something....
127

127

00:09:30.400  -->  00:09:32.560
...
128

128

00:09:32.560  -->  00:10:00.190
....
129

129

00:10:00.190  -->  00:10:06.580
...
130

130

00:10:07.150  -->  00:10:12.310
so we're going to do something like try
and make a bit of space for it
131

131

00:10:12.310  -->  00:10:22.750
....
132

132

00:10:22.750  -->  00:10:29.650
...
133

133

00:10:29.650  -->  00:10:37.720
....
134

134

00:10:42.260  -->  00:10:45.260
....
135

135

00:10:50.660  -->  00:10:56.660
....
136

136

00:10:56.660  -->  00:11:02.000
so just to be clear the call to the
future.get method blocks until
137

137

00:11:02.000  -->  00:11:03.530
the result is available
138

138

00:11:03.530  -->  00:11:07.700
so when we calling it from the main
thread application will be frozen until
139

139

00:11:07.700  -->  00:11:13.280
the results available so we wouldn't use
this method in a UI application and in
140

140

00:11:13.280  -->  00:11:17.480
fact we wouldn't use the services in the
java.util.concurrent packaged in a
141

141

00:11:17.480  -->  00:11:23.030
UI application when working with javafx
we instead use the classes in the
142

142

00:11:23.030  -->  00:11:27.410
javafx.concurrent package to
run tasks on background threads and to
143

143

00:11:27.410  -->  00:11:28.730
process the results
144

144

00:11:28.730  -->  00:11:33.530
the classes in the javafx package
leverage the classes in the java.util
145

145

00:11:33.530  -->  00:11:38.300
.concurrent packaged in a way that
makes sense for UI applications and
146

146

00:11:38.300  -->  00:11:43.310
as you can see from the code in fact
that i've added catches we can get can
147

147

00:11:43.310  -->  00:11:46.340
also be interrupted and if the callable throws an exception
148

148

00:11:46.910  -->  00:11:50.390
it's going to be translated into an
execution exception so I'm going to
149

149

00:11:50.390  -->  00:11:53.990
finish the video here now in the next
video we're going to run this and look
150

150

00:11:53.990  -->  00:11:57.980
at introducing a number of threads
and playing around with things and I
151

151

00:11:57.980  -->  00:12:01.820
just fix this typo and then see you
in the next video
