1
1

00:00:05,590  -->  00:00:08,020
- Alright, one thing to
keep in mind as I mentioned
2

2

00:00:08,020  -->  00:00:10,360
at the end of the last
video, is when you use
3

3

00:00:10,360  -->  00:00:13,610
absolute indices, the buffer
position isn't updated.
4

4

00:00:13,610  -->  00:00:17,260
So for example when
you used this code here
5

5

00:00:17,260  -->  00:00:21,640
on line 46 and 49, when
we used end buffer dot get
6

6

00:00:21,640  -->  00:00:24,530
into zero, that is, to read an integer
7

7

00:00:24,530  -->  00:00:26,650
after the method call, the
buffer position remained
8

8

00:00:26,650  -->  00:00:28,600
wherever it was before the call.
9

9

00:00:28,600  -->  00:00:30,960
So to demonstrate this, we're
going to change the code
10

10

00:00:30,960  -->  00:00:32,630
to flip the buffer, then do
11

11

00:00:32,630  -->  00:00:35,640
an absolute read and
then do a relative read.
12

12

00:00:35,640  -->  00:00:38,980
So let's make a change
to that code slightly.
13

13

00:00:38,980  -->  00:00:41,260
So going to flip which is
going to remain the same
14

14

00:00:41,260  -->  00:00:43,050
and we're going to readintbuffer
15

15

00:00:43,050  -->  00:00:44,680
and we're going to go to the next line
16

16

00:00:44,680  -->  00:00:47,930
and print out end buffer
dot get as per normal,
17

17

00:00:47,930  -->  00:00:50,810
do another flip, and go
straight into another read.
18

18

00:00:50,810  -->  00:00:54,150
And here we're going to do another flip.
19

19

00:00:55,020  -->  00:00:59,180
So end buffer dot flip and
we're going to print out
20

20

00:01:01,000  -->  00:01:03,970
using the get indices
zero there, but then also
21

21

00:01:03,970  -->  00:01:07,220
after that we're going to do a print-out
22

22

00:01:07,220  -->  00:01:10,640
and might as well reformat this document.
23

23

00:01:12,430  -->  00:01:15,010
End buffer dot getint, like so.
24

24

00:01:20,290  -->  00:01:22,710
Right, so if we just run this
25

25

00:01:25,190  -->  00:01:26,820
you can see the results down the bottom.
26

26

00:01:26,820  -->  00:01:28,870
So we're now reading the second integer
27

27

00:01:28,870  -->  00:01:30,620
from the buffer twice.
28

28

00:01:30,620  -->  00:01:33,310
So after the second channel dot recall,
29

29

00:01:33,310  -->  00:01:35,640
we flip the buffer and
that sets the position
30

30

00:01:35,640  -->  00:01:38,290
back to zero, and then
we're doing an absolute read
31

31

00:01:38,290  -->  00:01:40,330
and then a relative read.
32

32

00:01:40,330  -->  00:01:42,000
So we're doing the flip here,
33

33

00:01:42,000  -->  00:01:43,960
we're doing the absolute read here,
34

34

00:01:43,960  -->  00:01:45,880
along 50 and then along 51 we're doing
35

35

00:01:45,880  -->  00:01:47,390
the relative read.
36

36

00:01:47,390  -->  00:01:48,900
And you can see down the bottom in terms
37

37

00:01:48,900  -->  00:01:52,450
of results, we get the
negative integer 98765
38

38

00:01:52,450  -->  00:01:53,620
printed twice.
39

39

00:01:54,660  -->  00:01:58,000
And if the absolute read had
changed the buffer's position
40

40

00:01:58,000  -->  00:02:01,720
then we would have gotten
a Java.nio.underflow error
41

41

00:02:01,720  -->  00:02:04,200
as you'd seen before,
because the buffer's position
42

42

00:02:04,200  -->  00:02:06,450
would have been pointing
to the end of the buffer
43

43

00:02:06,450  -->  00:02:08,200
after the absolute read.
44

44

00:02:08,200  -->  00:02:09,750
But an absolute read doesn't change
45

45

00:02:09,750  -->  00:02:11,630
the buffer's position and that's why
46

46

00:02:11,630  -->  00:02:15,620
the relative read on line
51 actually succeeds.
47

47

00:02:15,620  -->  00:02:18,020
So I hope by now you can see that mixing
48

48

00:02:18,020  -->  00:02:20,380
relative and absolute
reads could very quickly
49

49

00:02:20,380  -->  00:02:22,090
become error prone.
50

50

00:02:22,090  -->  00:02:24,250
So as I said earlier in the last video,
51

51

00:02:24,250  -->  00:02:26,330
be consistent in your approach.
52

52

00:02:26,330  -->  00:02:28,530
I suggest you do it one way or the other.
53

53

00:02:28,530  -->  00:02:30,490
Mixing them up would make your code
54

54

00:02:30,490  -->  00:02:31,960
a nightmare to maintain or at least
55

55

00:02:31,960  -->  00:02:34,410
potentially make it a nightmare.
56

56

00:02:34,410  -->  00:02:36,940
Alright, in terms of the
examples we're using here
57

57

00:02:36,940  -->  00:02:41,100
at the moment we've
reused existing buffers.
58

58

00:02:41,100  -->  00:02:44,070
Now of course we could also
have allocated new buffers
59

59

00:02:44,070  -->  00:02:46,850
using the bytebuffer allocate method
60

60

00:02:46,850  -->  00:02:48,320
and if you come up here to have a look
61

61

00:02:48,320  -->  00:02:50,200
you can see we were using that when
62

62

00:02:50,200  -->  00:02:52,200
we were retrieving our integer parts
63

63

00:02:52,200  -->  00:02:54,970
we used bytebuffer.allocate on line 21.
64

64

00:02:54,970  -->  00:02:57,530
But let's do that for
actually reading the string.
65

65

00:02:57,530  -->  00:02:59,700
At the moment you can see on line 17
66

66

00:02:59,700  -->  00:03:02,430
we're using bytebuffer.wrap for the string
67

67

00:03:02,430  -->  00:03:06,390
so let's change that to use
the allocate method instead.
68

68

00:03:06,390  -->  00:03:08,390
So what we're going to
do is change the call
69

69

00:03:08,390  -->  00:03:11,040
on line 17 from bytebuffer.wrap to
70

70

00:03:11,040  -->  00:03:14,140
bytebuffer.allocate and this time
71

71

00:03:14,140  -->  00:03:15,860
it's looking for the link
72

72

00:03:15,860  -->  00:03:17,170
or the capacity I should say
73

73

00:03:17,170  -->  00:03:18,710
of the buffer so we need to pass in
74

74

00:03:18,710  -->  00:03:20,140
the link of the byte array
75

75

00:03:20,140  -->  00:03:23,080
so we use .link after outputbytes.
76

76

00:03:23,080  -->  00:03:25,090
The other thing we want to do after that
77

77

00:03:25,090  -->  00:03:29,170
is use a buffer.put and
now outputbytes, like so.
78

78

00:03:34,680  -->  00:03:36,840
So again here instead
of using the wrap method
79

79

00:03:36,840  -->  00:03:39,010
and passing a byte array we changed this
80

80

00:03:39,010  -->  00:03:41,280
to line 17 to allocate a buffer
81

81

00:03:41,280  -->  00:03:44,630
and after we've allocated
the buffer based on the
82

82

00:03:44,630  -->  00:03:47,560
link on line 18, we're
using the put method
83

83

00:03:47,560  -->  00:03:50,980
to copy the contents of the output bytes,
84

84

00:03:51,850  -->  00:03:54,460
byte array into the buffer.
85

85

00:03:54,460  -->  00:03:56,130
So it's important to remember that when we
86

86

00:03:56,130  -->  00:03:58,210
use the wrap method, the byte array
87

87

00:03:58,210  -->  00:04:01,070
parse method is used as the byte array
88

88

00:04:01,070  -->  00:04:03,310
that backs the buffer.
89

89

00:04:03,310  -->  00:04:05,190
But that is clearly not happening here.
90

90

00:04:05,190  -->  00:04:08,000
Instead when we use bytebuffer.allocate,
91

91

00:04:08,000  -->  00:04:09,430
as you can see on line 17,
92

92

00:04:09,430  -->  00:04:11,180
a new byte array is created
93

93

00:04:11,180  -->  00:04:13,380
and that's used to back the buffer.
94

94

00:04:13,380  -->  00:04:15,630
Now earlier when we
used the buffer created
95

95

00:04:15,630  -->  00:04:18,070
by wrap to read the
string, the output bytes
96

96

00:04:18,070  -->  00:04:20,840
byte array was updated
because it backed the buffer.
97

97

00:04:20,840  -->  00:04:22,920
That won't be the case
anymore as you'll see
98

98

00:04:22,920  -->  00:04:24,140
in a minute.
99

99

00:04:24,140  -->  00:04:25,730
So let's actually run the code based on
100

100

00:04:25,730  -->  00:04:28,980
what we've changed to see what happens.
101

101

00:04:31,790  -->  00:04:33,410
And you can see here what happened.
102

102

00:04:33,410  -->  00:04:35,290
Firstly the byte buffer looks like it has
103

103

00:04:35,290  -->  00:04:37,440
some random characters there.
104

104

00:04:37,440  -->  00:04:39,410
But also we got an exception,
105

105

00:04:39,410  -->  00:04:42,020
java.lang.outofboundsexception.
106

106

00:04:42,020  -->  00:04:43,490
If we click on the line number down here
107

107

00:04:43,490  -->  00:04:45,820
where it's crashed, we
can see it's crashed
108

108

00:04:45,820  -->  00:04:50,180
right down here and it's an
index outofboundsexception.
109

109

00:04:50,180  -->  00:04:52,140
So based on the code that we've added,
110

110

00:04:52,140  -->  00:04:53,650
obviously that has caused it to crash
111

111

00:04:53,650  -->  00:04:55,240
because it was working prior to us using
112

112

00:04:55,240  -->  00:04:57,320
the allocate and the put,
113

113

00:04:57,320  -->  00:04:58,830
so this is a mini-challenge for you
114

114

00:04:58,830  -->  00:05:01,120
to try to figure out what's gone wrong.
115

115

00:05:01,120  -->  00:05:03,760
Now you should be able to figure out
116

116

00:05:03,760  -->  00:05:05,220
what has happened and fix that code,
117

117

00:05:05,220  -->  00:05:06,610
so you don't get an exception.
118

118

00:05:06,610  -->  00:05:08,370
So I'm just going to pause the video now.
119

119

00:05:08,370  -->  00:05:09,790
How about going to see whether you can fix
120

120

00:05:09,790  -->  00:05:12,580
that problem and stop the exception,
121

121

00:05:12,580  -->  00:05:14,580
the indexoutofboundsexception, and
122

122

00:05:14,580  -->  00:05:17,590
I'll see you when you get back.
123

123

00:05:17,590  -->  00:05:18,690
Alright, so how did you go?
124

124

00:05:18,690  -->  00:05:20,040
Hopefully you worked it out.
125

125

00:05:20,040  -->  00:05:21,670
I want to give you a mantra with
126

126

00:05:21,670  -->  00:05:23,710
fixing errors with java.nio.
127

127

00:05:23,710  -->  00:05:26,120
So learn this mantra,
learn it, and keep it,
128

128

00:05:26,120  -->  00:05:28,390
just don't forget it!
129

129

00:05:28,390  -->  00:05:31,940
The mantra is, "When
something goes wrong, flip."
130

130

00:05:31,940  -->  00:05:34,060
So the above code isn't
flipping the buffer.
131

131

00:05:34,060  -->  00:05:37,060
The code that's after line 18 is not
132

132

00:05:39,740  -->  00:05:43,130
actually flipping the buffer
between read and write.
133

133

00:05:43,130  -->  00:05:45,940
Recall the put method on line 18,
134

134

00:05:45,940  -->  00:05:47,530
reroute it to the buffer,
135

135

00:05:47,530  -->  00:05:50,950
and when we call
binchannel.write, line 20,
136

136

00:05:50,950  -->  00:05:52,580
you're reading from the buffer, but
137

137

00:05:52,580  -->  00:05:54,620
you have to flip between
those two actions.
138

138

00:05:54,620  -->  00:05:56,170
That's actually the issue here.
139

139

00:05:56,170  -->  00:05:59,480
So if we come back here
after the buffer.put
140

140

00:05:59,480  -->  00:06:01,150
and we add a...
141

141

00:06:01,150  -->  00:06:03,640
Well I'll just put it down
here just to clear it,
142

142

00:06:03,640  -->  00:06:04,500
it doesn't really matter,
143

143

00:06:04,500  -->  00:06:05,500
buffer.flip.
144

144

00:06:07,270  -->  00:06:10,470
But if you put the call
there, run the code again,
145

145

00:06:10,470  -->  00:06:13,890
and this time we get the correct results.
146

146

00:06:15,600  -->  00:06:18,710
Alright, so now it's time
to read the string back in.
147

147

00:06:18,710  -->  00:06:20,670
Now the way we're doing
it right now is fine
148

148

00:06:20,670  -->  00:06:23,930
because we're calling the
byte buffer.array method
149

149

00:06:23,930  -->  00:06:26,900
to get the byte array back in the buffer
150

150

00:06:26,900  -->  00:06:30,330
and if you come down
and have a look at it,
151

151

00:06:30,330  -->  00:06:32,570
this is the code right
here, bytebuffer equals
152

152

00:06:32,570  -->  00:06:33,960
on line 43.
153

153

00:06:33,960  -->  00:06:36,030
Bytebuffer array is again
the method we're calling
154

154

00:06:36,030  -->  00:06:38,720
to get the byte array back in the buffer.
155

155

00:06:38,720  -->  00:06:40,960
Now when you're using the wrap method
156

156

00:06:40,960  -->  00:06:42,760
to route the string,
we didn't have to call
157

157

00:06:42,760  -->  00:06:45,330
the array method because
the output bytes array
158

158

00:06:45,330  -->  00:06:47,610
was backing the buffer, but
now that we're not using
159

159

00:06:47,610  -->  00:06:50,710
the wrap method, that's
no longer the case.
160

160

00:06:50,710  -->  00:06:52,790
So just to demonstrate that
we're going to temporarily
161

161

00:06:52,790  -->  00:06:56,250
change the code to print
out the output bytes array
162

162

00:06:56,250  -->  00:07:00,850
instead of the one we get
from this array method call
163

163

00:07:00,850  -->  00:07:02,860
here on line 43.
164

164

00:07:02,860  -->  00:07:05,100
So let's comment that out temporarily,
165

165

00:07:05,100  -->  00:07:08,170
instead replace that with output and
166

166

00:07:08,170  -->  00:07:12,250
it's going to byte buffer equals plus and
167

167

00:07:12,250  -->  00:07:15,420
then we'll actually add new string and
168

168

00:07:18,910  -->  00:07:21,740
it will be our output bytes array.
169

169

00:07:23,230  -->  00:07:25,400
So if we try running that,
170

170

00:07:27,310  -->  00:07:29,520
notice the output ablo world,
171

171

00:07:29,520  -->  00:07:32,580
so the problem here is
since the output string
172

172

00:07:32,580  -->  00:07:34,610
isn't backing the buffer anymore
173

173

00:07:34,610  -->  00:07:37,910
the first two characters
you set aren't overwritten
174

174

00:07:37,910  -->  00:07:40,570
when you use the buffer to read the string
175

175

00:07:40,570  -->  00:07:41,960
from the file.
176

176

00:07:41,960  -->  00:07:44,400
So we'll be using that code on line 41.
177

177

00:07:44,400  -->  00:07:45,990
So far you've been reading and writing
178

178

00:07:45,990  -->  00:07:47,660
variables individually.
179

179

00:07:47,660  -->  00:07:49,490
You write a single variable to the buffer
180

180

00:07:49,490  -->  00:07:51,830
and then you write the
buffer to the channel,
181

181

00:07:51,830  -->  00:07:54,680
and often you'll want
to write a bunch of data
182

182

00:07:54,680  -->  00:07:57,450
to the buffer before writing
the buffer to the channel
183

183

00:07:57,450  -->  00:07:59,530
or read a bunch of data into the buffer
184

184

00:07:59,530  -->  00:08:01,410
before pulling data from it.
185

185

00:08:01,410  -->  00:08:04,230
So let's actually update
the code, so that it reads
186

186

00:08:04,230  -->  00:08:06,260
and writes all three values,
187

187

00:08:06,260  -->  00:08:07,850
that is the string in two integers
188

188

00:08:07,850  -->  00:08:09,160
in the one shot.
189

189

00:08:09,160  -->  00:08:10,870
Now we're going to start
with writing the data
190

190

00:08:10,870  -->  00:08:15,530
since we are doing that in
the first method at the top.
191

191

00:08:15,530  -->  00:08:18,470
In addition to the data
that we're already writing,
192

192

00:08:18,470  -->  00:08:20,720
we're going to write
another string an integer.
193

193

00:08:20,720  -->  00:08:22,680
Now you can delete or
comment out the existing code
194

194

00:08:22,680  -->  00:08:24,560
in the main method, let's actually do that
195

195

00:08:24,560  -->  00:08:26,600
and we'll basically start from scratch and
196

196

00:08:26,600  -->  00:08:28,150
go through it all.
197

197

00:08:28,150  -->  00:08:31,050
Just before I do that
let me line comment that
198

198

00:08:31,050  -->  00:08:32,920
and comment out that other one, in case
199

199

00:08:32,920  -->  00:08:35,290
we need to refer to this code later.
200

200

00:08:35,290  -->  00:08:37,620
So what I'm going to do
is just keep literally
201

201

00:08:37,620  -->  00:08:40,350
that first line, the
output bytes hello world
202

202

00:08:40,350  -->  00:08:44,100
and I'm going to comment
everything else out.
203

203

00:08:46,680  -->  00:08:48,270
Absolutely everything
out, as you can see there,
204

204

00:08:48,270  -->  00:08:49,990
all commented out, so
we've got nothing in there
205

205

00:08:49,990  -->  00:08:53,010
other than the try and catch
and this first line here.
206

206

00:08:53,010  -->  00:08:56,070
So we got our byte array, output bytes,
207

207

00:08:56,070  -->  00:08:59,090
is going to contain a string to output,
208

208

00:08:59,090  -->  00:09:01,380
but before that we're
going to create a buffer.
209

209

00:09:01,380  -->  00:09:05,710
So we're going to do
bytebuffer, we'll call it buffer
210

210

00:09:05,710  -->  00:09:09,500
is equal to bytebuffer.allocate and we'll
211

211

00:09:09,500  -->  00:09:11,870
allocate a hundred.
212

212

00:09:11,870  -->  00:09:15,540
Then we got to mention our
byte array output bytes.
213

213

00:09:15,540  -->  00:09:17,220
Let's go ahead now and output some stuff,
214

214

00:09:17,220  -->  00:09:21,380
so buffer.put outputbytes,
and we can do buffer.putint245
215

215

00:09:27,290  -->  00:09:31,040
and we can do buffer.putintin
negative 98765.
216

216

00:09:34,180  -->  00:09:36,420
Then what we'll do is
write that extra string
217

217

00:09:36,420  -->  00:09:37,250
as I mentioned.
218

218

00:09:37,250  -->  00:09:38,270
So another byte array,
219

219

00:09:38,270  -->  00:09:41,280
we'll call this one outputbytes2 equals
220

220

00:09:41,280  -->  00:09:45,110
"Nice to meet you" in
double quotes .getbytes.
221

221

00:09:46,580  -->  00:09:48,050
So there's that byte array
222

222

00:09:48,050  -->  00:09:50,620
and let's print that out or write that out
223

223

00:09:50,620  -->  00:09:54,620
so buffer.put outputbytes2
and let's put another
224

224

00:09:57,220  -->  00:10:00,970
number on the end there,
so buffer.putint2000
225

225

00:10:04,810  -->  00:10:08,140
buffer.flip then binchannel.writebuffer.
226

226

00:10:12,970  -->  00:10:14,770
Okay, a few things to note here.
227

227

00:10:14,770  -->  00:10:17,420
Firstly, we allocated
more buffer than we need,
228

228

00:10:17,420  -->  00:10:18,360
but that's fine.
229

229

00:10:18,360  -->  00:10:20,970
So we allocated a hundred here on line 15.
230

230

00:10:20,970  -->  00:10:23,630
The buffer knows how many lines have been
231

231

00:10:23,630  -->  00:10:25,460
written to it, and second
we only have to call
232

232

00:10:25,460  -->  00:10:28,360
the flip method, which I've
defined on line 23 once,
233

233

00:10:28,360  -->  00:10:31,090
after we've written all
the valleys to the buffer.
234

234

00:10:31,090  -->  00:10:32,550
So you do so at that point because
235

235

00:10:32,550  -->  00:10:34,620
you're flipping from writing to the buffer
236

236

00:10:34,620  -->  00:10:36,420
to reading from the buffer
237

237

00:10:36,420  -->  00:10:38,820
to writing its contents
to the file channel.
238

238

00:10:38,820  -->  00:10:41,270
Now third, you haven't specified an index
239

239

00:10:41,270  -->  00:10:43,430
or any put calls, and so all the rights
240

240

00:10:43,430  -->  00:10:45,630
are relative rights for that reason
241

241

00:10:45,630  -->  00:10:47,180
which is what we actually want here
242

242

00:10:47,180  -->  00:10:49,220
when we're writing the
valleys sequentially.
243

243

00:10:49,220  -->  00:10:50,890
And you can see that consequently
244

244

00:10:50,890  -->  00:10:53,210
the code's a bit cleaner
than the previous versions
245

245

00:10:53,210  -->  00:10:56,400
we worked through when you're
using multiple buffers.
246

246

00:10:56,400  -->  00:10:58,100
Alright, let's end the video here
247

247

00:10:58,100  -->  00:11:00,350
and in the next one we're
going to have a look
248

248

00:11:00,350  -->  00:11:02,470
and see what happens when
we remove that flip call
249

249

00:11:02,470  -->  00:11:04,880
but then continue on and
start reading the data back
250

250

00:11:04,880  -->  00:11:07,400
from the fall as well.
251

251

00:11:07,400  -->  00:11:10,090
I'll see you all in the next video.
