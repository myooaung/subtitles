WEBVTT
1
1

00:00:05.290  -->  00:00:09.130
so hope I haven't freak you out to much from the last class when we went into
2

2

00:00:09.130  -->  00:00:10.890
all this detail about what this right int
3

3

00:00:10.890  -->  00:00:15.760
does and shifting right and all this
sort of stuff but I am alluding to
4

4

00:00:15.760  -->  00:00:19.700
something I'm getting to something
that I want you to look at because it's
5

5

00:00:19.700  -->  00:00:23.250
really useful to understand what's going
on at the low-level its not something you
6

6

00:00:23.250  -->  00:00:27.750
need to do all the time but it's there if you need to so what we are gonna do is we are gonna create a
7

7

00:00:27.750  -->  00:00:37.050
new class class and I'm gonna call
this one shift int...so just wanna go through
8

8

00:00:37.050  -->  00:00:43.820
this little bit more and what I'm gonna do is paste in code in rather
9

9

00:00:43.820  -->  00:00:48.090
than typing it and this code will be available in
the Resources section the reason I am pasting it in
10

10

00:00:48.090  -->  00:00:52.130
and it hasn't really got anything to
do with the IO section I'm just using
11

11

00:00:52.130  -->  00:00:56.570
it to show the 4 values that the
right int method produces when it saves an
12

12

00:00:56.570  -->  00:01:02.300
int value to the binary streams so their is no advantage to you see me type this
13

13

00:01:02.300  -->  00:01:09.140
I'm just going to copy this code and
paste it in and again you can get
14

14

00:01:09.140  -->  00:01:12.530
this code in the Resources section
of this video so you can do the same thing that I
15

15

00:01:12.530  -->  00:01:18.560
pasting that I did a so you can see I've created my
own right int method and that's based on
16

16

00:01:18.560  -->  00:01:23.400
the right int method that was on screen at
the start of this video but what I've done also I've used
17

17

00:01:23.400  -->  00:01:28.510
the display method to do some formatting so the output is easier to read and I've also use a
18

18

00:01:28.510  -->  00:01:32.070
technique that may not work on some
windows versions to show the right most
19

19

00:01:32.070  -->  00:01:37.830
8 bits in a different color to make
it easy to compare the values with the values
20

20

00:01:37.830  -->  00:01:47.040
their produce from so if we actually run
this program now and you can see the
21

21

00:01:47.040  -->  00:01:52.350
values on the screen so the program as you can
see hopefully works on your Windows
22

22

00:01:52.350  -->  00:01:58.450
computer to if you got one it colors the last
8 bits purple and it works on a Mac
23

23

00:01:58.450  -->  00:02:05.180
and will also work on Linux distros and it also works on
Windows 10 there's a chance it won't work on
24

24

00:02:05.180  -->  00:02:08.900
earlier versions the code itself will still run but you might actually see
25

25

00:02:08.900  -->  00:02:14.840
strange codes instead of the color
change I've got the binary data showing
26

26

00:02:14.840  -->  00:02:17.210
purple on the screen so I've included the
27

27

00:02:17.210  -->  00:02:21.220
constants for other colors as you can see on
the screen there in case you want to do
28

28

00:02:21.220  -->  00:02:24.050
this for console app but again you might
want to remember that hasn't been tested
29

29

00:02:24.050  -->  00:02:28.850
on version of Windows early than windows
10 it should work but we haven't tested that
30

30

00:02:28.850  -->  00:02:32.150
bottom line is if it doesn't you might
want to try changing some of these
31

31

00:02:32.150  -->  00:02:38.960
colors so we got ansi purple using ansi purple in
here and the ansi reset command so try using instead
32

32

00:02:38.960  -->  00:02:43.440
of purple try using some other classes and see if it works if
and only if you're having difficulty
33

33

00:02:43.440  -->  00:02:47.480
getting this to work so you can see that
the original values written to the file
34

34

00:02:47.480  -->  00:02:54.910
as the 4 bytes 54 219 this numbers
here to the left hand 214 and 47
35

35

00:02:54.910  -->  00:02:59.520
the output shows how those values were
obtained by shifting the binary number
36

36

00:02:59.520  -->  00:03:04.880
right then masking of all but the right
most 8 bits and that's what the code
37

37

00:03:04.880  -->  00:03:12.850
here on line 27 the & 0xFF that's what
that's actually doing so this seemed
38

38

00:03:12.850  -->  00:03:17.630
really complicated then don't worry the
data output stream class does take care
39

39

00:03:17.630  -->  00:03:21.770
of writing Java primitive types and
there's also a corresponding data input
40

40

00:03:21.770  -->  00:03:26.860
stream class that reads it back in again
and in fact lets switch over now and
41

41

00:03:26.860  -->  00:03:30.650
start having a look at that in other
words reading that binary data that we
42

42

00:03:30.650  -->  00:03:39.740
created in the previous video back in so say goodbye to shift int.java ok so geting back to
43

43

00:03:39.740  -->  00:03:46.420
locations.java so we got our main method now that we're
used to create the location.dat file
44

44

00:03:46.420  -->  00:03:51.060
and of course that used the binary output stream classes to do that now reading
45

45

00:03:51.060  -->  00:03:51.920
it back in again
46

46

00:03:51.920  -->  00:03:55.640
actually easier than reading the data
from a text file and it's because we
47

47

00:03:55.640  -->  00:03:59.670
don't have to do any string parsing to
get the integer values so the data input
48

48

00:03:59.670  -->  00:04:03.850
stream class takes care of building
primitive types such as int and double from the
49

49

00:04:03.850  -->  00:04:05.090
bytes in the file
50

50

00:04:05.090  -->  00:04:08.500
so what we're gonna do is comment out the existing code in the static initialization
51

51

00:04:08.500  -->  00:04:13.290
block I'm going to add some new code to
read from the binary file so I'm going to comment a
52

52

00:04:13.290  -->  00:04:17.550
lot out in the static initialization
block in our locations.java
53

53

00:04:20.380  -->  00:04:23.380
right down to the end of the method
54

54

00:04:24.030  -->  00:04:28.800
and back up to the top and add some code so the code is going to be
55

55

00:04:28.800  -->  00:04:40.730
try...
56

56

00:04:40.730  -->  00:04:48.180
....
57

57

00:04:48.180  -->  00:04:53.830
....which was the file that we created
58

58

00:04:53.830  -->  00:05:01.830
in the last video ok so that is our try with resources...
59

59

00:05:01.830  -->  00:05:07.910
...so we are going to break out of that loop once
we finish processing the data so.....
60

60

00:05:07.910  -->  00:05:28.580
....
61

61

00:05:29.640  -->  00:05:34.110
...and with this one what we will do is catch an IO exception because
we're not throwing so....
62

62

00:05:34.110  -->  00:05:37.110
....
63

63

00:05:41.150  -->  00:05:47.690
....
64

64

00:05:48.570  -->  00:05:57.090
....
65

65

00:05:57.090  -->  00:06:00.520
......next we need to
determine the number of exits so...
66

66

00:06:00.520  -->  00:06:14.550
....
67

67

00:06:15.770  -->  00:06:29.480
....
68

68

00:06:31.680  -->  00:06:37.900
....so now we know how many exits their are we can use a for loop so...
69

69

00:06:37.900  -->  00:06:58.930
....
70

70

00:07:00.040  -->  00:07:19.030
....
71

71

00:07:19.030  -->  00:07:19.570
...
72

72

00:07:19.570  -->  00:07:24.210
....
73

73

00:07:26.360  -->  00:07:27.440
....
74

74

00:07:27.440  -->  00:07:35.840
.....and then outside of the
loop after we got all exits we can
75

75

00:07:35.840  -->  00:07:44.230
then save this entire locations so.....
76

76

00:07:44.980  -->  00:07:51.730
...
77

77

00:07:51.730  -->  00:08:00.750
....and we already caught any potential exceptions and
that's all that exists in terms of
78

78

00:08:00.750  -->  00:08:05.080
code so you can see our version I've
commented out its longer than what we've written
79

79

00:08:05.080  -->  00:08:08.990
and I think you'll agree that this is also a
tidier and its because
80

80

00:08:08.990  -->  00:08:13.480
there's no parsing of the data required it just read the integers
81

81

00:08:13.480  -->  00:08:18.000
strings using the methods in the data
InputStream class so just to confirm the
82

82

00:08:18.000  -->  00:08:21.450
code reads in the location ID the
description and the number of exits from
83

83

00:08:21.450  -->  00:08:25.420
that location and the exits is going to get read
back in using a for loop as you saw
84

84

00:08:25.420  -->  00:08:31.440
me code on line 42 but one strange thing you might have noticed is that the loop while
85

85

00:08:31.440  -->  00:08:37.020
true which I've started on line 35 hasn't gotten an apparent
86

86

00:08:37.020  -->  00:08:44.460
exit condition to terminate the loop and
in fact if we come over here we are getting an error
87

87

00:08:44.460  -->  00:08:47.590
from IntelliJ and if we open that up while statements cannot complete without throwing
88

88

00:08:47.590  -->  00:08:52.300
exception so this isn't a particularly
good way to write code hence the warning
89

89

00:08:52.300  -->  00:08:55.970
but if you attempt to write this by just
referring to some of the examples on the
90

90

00:08:55.970  -->  00:08:59.800
internet or even in the Java
documentation then this seems to be a
91

91

00:08:59.800  -->  00:09:05.460
reasonable way to do it but before going
into more detail in that lets run the
92

92

00:09:05.460  -->  00:09:08.840
program to make sure it still works so in here we want to remember that we don't
93

93

00:09:08.840  -->  00:09:12.270
execute the main method from the
locations class we did that in the
94

94

00:09:12.270  -->  00:09:15.930
previous video so that we could
create the locations.dat file but what
95

95

00:09:15.930  -->  00:09:20.640
want to do now is write it on the main
method from the main class so we are going to
96

96

00:09:20.640  -->  00:09:31.770
test that the program is working go back to main class and right click and run and try a few directions to
97

97

00:09:31.770  -->  00:09:35.160
make sure its working we got west east
98

98

00:09:35.160  -->  00:09:47.010
up down and quit that seems to be working OK and just to confirm again that the code in the static
99

99

00:09:47.010  -->  00:09:51.100
initialization block in our locations.java that was executed of course when the
100

100

00:09:51.100  -->  00:09:57.880
locations class is loaded from the main
method in the main class now the Java
101

101

00:09:57.880  -->  00:10:02.960
documentation should be read carefully
before applying it to your own code and its quite easy to pick up on
102

102

00:10:02.960  -->  00:10:06.600
the fact that the data stream readers
throw an IO exception when there's no
103

103

00:10:06.600  -->  00:10:10.760
more data to be read from the stream and in
actual fact they throw a sub class
104

104

00:10:10.760  -->  00:10:16.000
of exception called EOF exception and we
should really be checking for that as a way to
105

105

00:10:16.000  -->  00:10:21.100
terminate the while loop rather than just
using the IO exception as we've done
106

106

00:10:21.100  -->  00:10:28.420
this code and just to confirm just to run this
again run the main.java method run that
107

107

00:10:28.420  -->  00:10:36.020
again down here IO exceptions so you can see that the code was executed the code that we added I
108

108

00:10:36.020  -->  00:10:39.940
just disconnect that from our locations.java in the static
109

109

00:10:39.940  -->  00:10:46.590
initialization block this exception was
caught here we caught that and we
110

110

00:10:46.590  -->  00:10:48.420
outputted that as an IO exceptions
111

111

00:10:48.420  -->  00:10:52.940
but the point I'm making here is that how we've done this
this isn't really the best way of
112

112

00:10:52.940  -->  00:10:56.960
terminating the while loop and that's because
the IO exceptions are going to cause the
113

113

00:10:56.960  -->  00:11:00.830
problem to jump out of the while loop and be
caught in the catch block but the
114

114

00:11:00.830  -->  00:11:04.950
code really is messy and for example
what happens if an IO exception is raised
115

115

00:11:04.950  -->  00:11:09.780
for another reason than the end of file
so its very difficult to treat a real
116

116

00:11:09.780  -->  00:11:13.130
exceptions such as the input file not being found or having insufficient
117

117

00:11:13.130  -->  00:11:16.770
permission to allow us to open it
differently to the end of file
118

118

00:11:16.770  -->  00:11:20.780
being reached you know which you know is an
expected event very few data streams
119

119

00:11:20.780  -->  00:11:25.840
are infinite after all so the point is
it's very easy to cause an exception but
120

120

00:11:25.840  -->  00:11:28.940
we'll just try to read the binary data from a file that doesn't exist by changing
121

121

00:11:28.940  -->  00:11:35.300
the file name up here on line 34 just to
sort of simulate what happens so
122

122

00:11:35.300  -->  00:11:40.830
instead of locations I'm going to call it locations.dat and go back to the main method and run again
123

123

00:11:44.100  -->  00:11:48.950
we got something different we get an exception null pointer exception which would expect because the
124

124

00:11:48.950  -->  00:11:53.130
file doesn't exist and you can see that
obviously IOException was printed
125

125

00:11:53.130  -->  00:11:57.250
so the code in the catch block did execute
but if you were debugging this was
126

126

00:11:57.250  -->  00:12:01.310
because the data stream run out of bytes or some other reason now we added
127

127

00:12:01.310  -->  00:12:05.640
detail and time-consuming investigation
we've got no ideas we would really want to
128

128

00:12:05.640  -->  00:12:11.770
do this using a better mechanism to try to
determine what the error was so the way to
129

129

00:12:11.770  -->  00:12:18.870
fix that is going to close this down and go
back to the locations class and what I'm going
130

130

00:12:18.870  -->  00:12:25.140
going to is add another try block and some few other lines as well so within in the first try block we add...
131

131

00:12:25.140  -->  00:12:30.080
....
132

132

00:12:30.660  -->  00:12:49.390
....
133

133

00:12:50.160  -->  00:13:05.750
....
134

134

00:13:05.750  -->  00:13:11.340
....and once we've done that we got no other errors so looking at that now you can see we've
135

135

00:13:11.340  -->  00:13:18.120
got a boolean end of file equals false
we gonna keep going until while end of file
136

136

00:13:18.120  -->  00:13:23.810
so we are gonna keep going until EOF is equal to false if we do hit
137

137

00:13:23.810  -->  00:13:29.220
the end of file exception which was again is
generated automatically by these classes
138

138

00:13:29.220  -->  00:13:33.710
when it reaches the end of input we
gonna set that to true which will then exit the
139

139

00:13:33.710  -->  00:13:37.620
while loop automatically so other words it causes the while loop to terminate to
140

140

00:13:37.620  -->  00:13:42.360
terminate nicely but the other good
point here is that any other exceptions
141

141

00:13:42.360  -->  00:13:46.390
is gonna be caught by the try with resources
catch block the outer one and if
142

142

00:13:46.390  -->  00:13:55.850
you go back to main.java and run again we see that we've
still got that error because we got the file name wrong
143

143

00:13:55.850  -->  00:14:00.390
we change the file name to a file that doesn't
exist so if your are debugging this you know that the
144

144

00:14:00.390  -->  00:14:05.100
problem isn't caused by the input stream
running out of data now obviously in
145

145

00:14:05.100  -->  00:14:08.190
production code you do more than a print
a message in the catch block we would be
146

146

00:14:08.190  -->  00:14:11.280
logging the error and the file name is the
minimum we consider probably doing
147

147

00:14:11.280  -->  00:14:15.330
just to make sure this work lets go back
to locations.java and change
148

148

00:14:15.330  -->  00:14:19.540
our file name to the correct name again locations.dat go back to
149

149

00:14:19.540  -->  00:14:29.460
main.java then right click and run this and we can see the code is now still working nicely so working with byte streams their is really
150

150

00:14:29.460  -->  00:14:33.610
no more complicated than reading and writing
character streams but you do have to
151

151

00:14:33.610  -->  00:14:39.870
know the format of the data that your reading now in this example we knew when to use read int and when to use read
152

152

00:14:39.870  -->  00:14:43.940
utf and that's because we'd written the original
file so its just a case of using the
153

153

00:14:43.940  -->  00:14:48.340
corresponding read methods in the same
order as we used to write methods so
154

154

00:14:48.340  -->  00:14:51.610
provided you know the format of the data
reading from byte stream is straight
155

155

00:14:51.610  -->  00:14:54.240
forward now of course we also had
156

156

00:14:54.240  -->  00:14:58.050
to know the format of the text file so
that we knew when to try and convert the
157

157

00:14:58.050  -->  00:15:04.040
data to an int but in the case with text file is generally easy to open it in text editor and work out the format of the
158

158

00:15:04.040  -->  00:15:08.250
data and of course as we have established when we
open the binary data file in the
159

159

00:15:08.250  -->  00:15:12.890
previous class that's not so easy to
explore for example a sequence of 4
160

160

00:15:12.890  -->  00:15:17.490
bytes in a binary file could be single int value 2 shorts or 4  bytes for example and you
161

161

00:15:17.490  -->  00:15:21.230
wouldn't know that if you weren't to
involved in the process that created that
162

162

00:15:21.230  -->  00:15:27.370
binary file and as a result you want to know the format of the data by reading the specifications for the
163

163

00:15:27.370  -->  00:15:31.600
system that produced that binary file so you can
write the code to import and read
164

164

00:15:31.600  -->  00:15:35.490
in that binary data so as I mentioned
byte streams can be used when dealing with
165

165

00:15:35.490  -->  00:15:38.700
Java primitive types in the next video is we are gonna have a look at
166

166

00:15:38.700  -->  00:15:42.630
how to handle binary IO when dealing with objects
see you in that next video
