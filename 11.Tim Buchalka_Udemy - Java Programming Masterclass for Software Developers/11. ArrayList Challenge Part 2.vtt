WEBVTT
1
1

00:00:05.410  -->  00:00:09.130
So, in the previous video we started
our challenge for the array list.
2

2

00:00:09.130  -->  00:00:12.190
And what we did was we
implemented the contact class and
3

3

00:00:12.190  -->  00:00:14.530
also the mobile phone
class as you can see.
4

4

00:00:14.530  -->  00:00:17.260
In the mobile phone class
we've implemented the add for
5

5

00:00:17.260  -->  00:00:19.620
the add new contact while
updating a contact.
6

6

00:00:19.620  -->  00:00:23.060
We've also got the ability to
actually return a contact.
7

7

00:00:23.060  -->  00:00:26.010
We need to change this a little bit, cause
at the moment we've got two methods for
8

8

00:00:26.010  -->  00:00:28.350
finding contacts with their
returning integers, but
9

9

00:00:28.350  -->  00:00:31.610
of course we don't want to return
integers back to the calling process.
10

10

00:00:31.610  -->  00:00:35.900
So, we're gonna create another method
that will expose publicly to allow other
11

11

00:00:35.900  -->  00:00:38.780
functions to other calling
classes I should say.
12

12

00:00:38.780  -->  00:00:41.040
To access the record that we found.
13

13

00:00:41.040  -->  00:00:42.900
And the other thing that
we haven't implemented yet
14

14

00:00:42.900  -->  00:00:46.260
in the MobilePhone class is
the ability to remove a contact.
15

15

00:00:46.260  -->  00:00:49.090
So, let's create the findContact first.
16

16

00:00:49.090  -->  00:00:52.800
And again, we've got two parameters here,
we've got a two methods I should say,
17

17

00:00:52.800  -->  00:00:55.740
findContact, one that has
been obviously overwritten.
18

18

00:00:55.740  -->  00:00:59.620
So, I'm going to create a third one and
the sole purpose of the third one is
19

19

00:00:59.620  -->  00:01:03.080
really just going to
be to return the data.
20

20

00:01:03.080  -->  00:01:04.380
From another method.
21

21

00:01:04.380  -->  00:01:07.980
So, returns it as a string instead
of returning it as an integer.
22

22

00:01:07.980  -->  00:01:09.190
If that makes sense.
23

23

00:01:09.190  -->  00:01:10.640
There's different ways of doing it.
24

24

00:01:10.640  -->  00:01:12.640
We could actually set it
up to return it barely.
25

25

00:01:12.640  -->  00:01:13.860
And if it wanted to.
26

26

00:01:13.860  -->  00:01:17.990
The main thing is, we don't want to
expose these private methods publicly.
27

27

00:01:17.990  -->  00:01:19.740
Because they're using the int.
28

28

00:01:19.740  -->  00:01:21.710
Which is used for our array.
29

29

00:01:21.710  -->  00:01:25.170
So, we don't want the that are access
this to know anything about that.
30

30

00:01:25.170  -->  00:01:27.020
So, I'm going to create another method.
31

31

00:01:27.020  -->  00:01:29.420
A public one and I'm just gonna call it,
put the space here.
32

32

00:01:29.420  -->  00:01:34.860
And we'll call this one query contact.
33

33

00:01:34.860  -->  00:01:35.700
And return a string.
34

34

00:01:37.010  -->  00:01:37.850
Query contact.
35

35

00:01:40.730  -->  00:01:42.480
And it's going to accept
the contact record.
36

36

00:01:43.800  -->  00:01:46.450
And we're going to put if and
37

37

00:01:46.450  -->  00:01:50.870
we're going to put pass on to the fine
contact record so it's if fine contact,
38

38

00:01:53.210  -->  00:01:57.720
contact if that is greater
than what equal to zero, we're
39

39

00:01:59.910  -->  00:02:04.400
going to return contact.getName.
40

40

00:02:05.770  -->  00:02:07.030
Otherwise we're going to return null.
41

41

00:02:08.910  -->  00:02:14.010
All we've done here is we've sort of sent
a contact record, if we're looking for
42

42

00:02:14.010  -->  00:02:18.140
that record, if the result of that which
essentially is going to be calling this
43

43

00:02:18.140  -->  00:02:23.220
method here if that returns a number
greater than, or equal to zero,
44

44

00:02:23.220  -->  00:02:26.970
that means that it is on the file, and
if it is on file, we're going to return
45

45

00:02:26.970  -->  00:02:31.580
the contact name to really indicate the
calling method that yes, it is on file.
46

46

00:02:31.580  -->  00:02:33.120
Otherwise, we got to return no,
47

47

00:02:33.120  -->  00:02:37.270
and that signifies that it wasn't
on file and it doesn't exist and
48

48

00:02:37.270  -->  00:02:41.580
you'll see that in use when we go into our
main method from the main class shortly.
49

49

00:02:41.580  -->  00:02:42.370
So, that's that one.
50

50

00:02:42.370  -->  00:02:44.910
And then lastly you want
to create a remove contact.
51

51

00:02:44.910  -->  00:02:47.710
Again put that up there cause
it's close to the other methods.
52

52

00:02:47.710  -->  00:02:48.770
And it's gonna be a public.
53

53

00:02:48.770  -->  00:02:50.070
Gonna return a boolean.
54

54

00:02:50.070  -->  00:02:51.690
And it's gonna be remove contact.
55

55

00:02:53.690  -->  00:02:55.510
Same thing, contact, contact.
56

56

00:02:57.610  -->  00:03:01.490
What I can actually do here is called
a code and copy and paste it in this case.
57

57

00:03:03.660  -->  00:03:04.410
Like so, so
58

58

00:03:04.410  -->  00:03:10.060
our first test remove contact is if it's
not on file we are just going to return,
59

59

00:03:10.060  -->  00:03:13.130
false, we are going to put a message
on the screen to say it wasn't found.
60

60

00:03:13.130  -->  00:03:16.730
Assuming that it was found,
what we really need to do is put.
61

61

00:03:16.730  -->  00:03:23.360
Just type my context.remove,
now in position.
62

62

00:03:23.360  -->  00:03:28.100
And then we'll just put out a message to
63

63

00:03:28.100  -->  00:03:32.550
say contact.getName was deleted.
64

64

00:03:32.550  -->  00:03:36.210
And then we want to return true
to say we were successful and
65

65

00:03:36.210  -->  00:03:38.780
we did actually manage to delete it.
66

66

00:03:38.780  -->  00:03:42.890
So that's our classes, our methods for
the MobilePhone class now.
67

67

00:03:42.890  -->  00:03:44.310
You should be good to go with that.
68

68

00:03:44.310  -->  00:03:49.310
So, what it's time for now is to swing
back over to our main class and our main
69

69

00:03:49.310  -->  00:03:52.580
method, and actually do a test run to make
sure it's all working as it should be.
70

70

00:03:52.580  -->  00:03:55.670
So, to do that we're going to back in here
and see if we can see into the main method
71

71

00:03:55.670  -->  00:03:59.540
in the main class and we need to implement
a few things we need a couple of fields we
72

72

00:03:59.540  -->  00:04:05.180
need a scanner firstly so
public or private I should say.
73

73

00:04:05.180  -->  00:04:11.240
A private scanner,
a private static scanner.
74

74

00:04:11.240  -->  00:04:15.900
This is gonna be the variable and
accept that import equals new scanner.
75

75

00:04:17.590  -->  00:04:21.050
It's going to be system.in which
was done in quite a few videos now.
76

76

00:04:21.050  -->  00:04:24.090
The second thing we want
is a MobilePhone class.
77

77

00:04:24.090  -->  00:04:25.340
The one that we've just created.
78

78

00:04:25.340  -->  00:04:30.640
So, mobile phone MobilePhone
= new MobilePhone.
79

79

00:04:33.160  -->  00:04:34.610
And I'm just making up a random number.
80

80

00:04:34.610  -->  00:04:38.440
And that's the only reason that I added
the field in the MobilePhone class for
81

81

00:04:38.440  -->  00:04:40.710
number is so that we can
actually pass it as a parameter.
82

82

00:04:40.710  -->  00:04:43.040
Certainly optional and
we're using it for any other purpose.
83

83

00:04:43.040  -->  00:04:44.160
That's the basics.
84

84

00:04:44.160  -->  00:04:46.690
So, the next thing we need to
do is implement this menu so
85

85

00:04:46.690  -->  00:04:49.140
that we've got these
various options quick list,
86

86

00:04:49.140  -->  00:04:52.860
add a new contact updating existing
contact and also remove contact.
87

87

00:04:52.860  -->  00:04:54.040
So, let's start on that.
88

88

00:04:54.040  -->  00:04:57.060
So, boolean quit equals false.
89

89

00:04:58.470  -->  00:05:01.550
Now, I'm gonna have some
code to start phone.
90

90

00:05:03.690  -->  00:05:08.240
Print actions while not quit.
91

91

00:05:08.240  -->  00:05:11.660
So, while they're still having
selected that command, we're
92

92

00:05:11.660  -->  00:05:16.000
gonna start our wall and what we'll do is
we'll implement these other methods first.
93

93

00:05:16.000  -->  00:05:17.200
They're pretty simple methods.
94

94

00:05:17.200  -->  00:05:24.240
[SOUND]
startPhone.
95

95

00:05:24.240  -->  00:05:32.550
[SOUND] Obviously, a very simplistic
representation of starting a phone.
96

96

00:05:32.550  -->  00:05:36.240
But, if you were writing the code
to actually develop this.
97

97

00:05:36.240  -->  00:05:39.050
You might have all sorts of other
functions that you might be initializing
98

98

00:05:39.050  -->  00:05:41.020
the memory and
do all sorts of other things.
99

99

00:05:41.020  -->  00:05:44.500
I just wanted to sort of get your mind
thinking about the possibilities of how
100

100

00:05:44.500  -->  00:05:48.500
you'd go about that if you were
creating a class of this complexity.
101

101

00:05:48.500  -->  00:05:51.220
In this case we're just gonna print out
a message that says starting phone.
102

102

00:05:51.220  -->  00:05:55.120
Next is our actions,
static void printActions.
103

103

00:05:56.710  -->  00:06:00.550
And if remember that from the previous
video, you've seen that in use.
104

104

00:06:00.550  -->  00:06:04.460
So, you're going to need
to go available actions,
105

105

00:06:06.750  -->  00:06:11.940
Press, and we'll do something like
106

106

00:06:11.940  -->  00:06:16.990
0 to shut, whoops, put 9 there.
107

107

00:06:16.990  -->  00:06:20.560
0 to shutdown.
108

108

00:06:20.560  -->  00:06:26.250
[SOUND]
And a one.
109

109

00:06:28.220  -->  00:06:29.910
To print contacts.
110

110

00:06:32.130  -->  00:06:36.270
This is another way, by the way, to avoid
having to print out numerous print lines,
111

111

00:06:36.270  -->  00:06:38.100
just to put all in one line like this.
112

112

00:06:38.100  -->  00:06:41.990
Option two is gonna be to
113

113

00:06:41.990  -->  00:06:46.860
update an existing contact.
114

114

00:06:46.860  -->  00:06:51.970
[SOUND] Three actually
that should have been
115

115

00:06:51.970  -->  00:06:56.940
four because three should have been add.
116

116

00:06:56.940  -->  00:06:58.780
Add's gonna be our first one.
117

117

00:06:58.780  -->  00:07:00.770
Sorry.
I'll get this right in a minute.
118

118

00:07:00.770  -->  00:07:02.470
Two should be add.
119

119

00:07:02.470  -->  00:07:04.290
So, to add a new contact.
120

120

00:07:06.170  -->  00:07:08.500
Okay, wait a minute.
121

121

00:07:08.500  -->  00:07:11.490
So, three should have been to update.
122

122

00:07:11.490  -->  00:07:13.630
That was correct and the next one is four.
123

123

00:07:13.630  -->  00:07:16.450
You can probably guess what's that
gonna be, to remove a contact.
124

124

00:07:18.110  -->  00:07:19.510
Remove an existing contact.
125

125

00:07:19.510  -->  00:07:25.140
[SOUND]
And five.
126

126

00:07:25.140  -->  00:07:32.530
[SOUND] Query if
an existing contact exists.
127

127

00:07:32.530  -->  00:07:39.060
[SOUND] And number six,
the last one, is going to be.
128

128

00:07:39.060  -->  00:07:45.190
To print lists a list
of a available actions.
129

129

00:07:45.190  -->  00:07:47.590
Like that.
And a little bit so
130

130

00:07:47.590  -->  00:07:50.880
that's just our big print and
then we'll just do another message.
131

131

00:07:52.290  -->  00:07:53.120
Choose direction.
132

132

00:07:55.690  -->  00:07:57.560
Like so.
And that's L connection.
133

133

00:07:57.560  -->  00:07:58.720
So, that's really just a menu.
134

134

00:07:58.720  -->  00:08:00.630
A menu of what the pre-productions are.
135

135

00:08:00.630  -->  00:08:01.470
So, let's go back now.
136

136

00:08:01.470  -->  00:08:03.200
We've got print actions and
they're both implemented.
137

137

00:08:03.200  -->  00:08:05.910
So, we'll start implementing I should say,
our wall link.
138

138

00:08:05.910  -->  00:08:09.560
With our wall link we need to now go
through and add a case using a switch for
139

139

00:08:09.560  -->  00:08:10.430
each of those, but
140

140

00:08:10.430  -->  00:08:13.770
before we do that of course we need
to print a message on the screen.
141

141

00:08:13.770  -->  00:08:18.650
But, also then to accept the appropriate
option that the user is specifying.
142

142

00:08:18.650  -->  00:08:20.170
So, we're back up here to our quit.
143

143

00:08:20.170  -->  00:08:22.510
Or not quit,
we're gonna put message in there.
144

144

00:08:24.430  -->  00:08:25.040
Interaction.
145

145

00:08:28.520  -->  00:08:32.570
Six to show available actions.
146

146

00:08:32.570  -->  00:08:37.090
I'm putting that in there course because
this menu will be shown over and over.
147

147

00:08:37.090  -->  00:08:40.530
And you may actually miss it in the
initial print actions, that was printed
148

148

00:08:40.530  -->  00:08:43.580
before the loop started if you actually
scrolled that all off the screen.
149

149

00:08:43.580  -->  00:08:46.280
So, it's good just to have
that there to remind the user.
150

150

00:08:46.280  -->  00:08:48.300
So, let's get an integer.
151

151

00:08:48.300  -->  00:08:53.450
Scanner.nextInt, and
go to the next line as well,
152

152

00:08:53.450  -->  00:08:58.830
clear input string,
okay then a switch on the action,
153

153

00:08:58.830  -->  00:09:03.040
saying for
case 0 option 0 was shut down so
154

154

00:09:03.040  -->  00:09:10.540
we're just gonna put something,
we'll just put a message to that effect.
155

155

00:09:10.540  -->  00:09:14.770
[SOUND] Shutting down.
156

156

00:09:14.770  -->  00:09:20.760
[SOUND] Quit equals true and then break.
157

157

00:09:20.760  -->  00:09:25.310
Case one or case one was printing
our list of contacts so one.
158

158

00:09:25.310  -->  00:09:29.370
PrintContacts, we're going to create
a method for that and then break.
159

159

00:09:30.750  -->  00:09:33.530
We might actually go down and
actually implement that method first,
160

160

00:09:33.530  -->  00:09:37.040
before, just to avoid there being
lots of errors on the screen and
161

161

00:09:37.040  -->  00:09:42.600
we'll do that above the startPhone
because we'll be referring to that more.
162

162

00:09:42.600  -->  00:09:50.080
So, it'll be private static void,
print context.
163

163

00:09:50.080  -->  00:09:54.090
Now, this does bring up an interesting
question and the question is should we be
164

164

00:09:54.090  -->  00:09:58.330
implementing the print contacts by writing
out all the code to iterate through the,
165

165

00:09:58.330  -->  00:10:01.020
to go through all the list of
array list entries here or
166

166

00:10:01.020  -->  00:10:03.070
should we be doing it in a MobilePhone?
167

167

00:10:03.070  -->  00:10:05.720
So, first I'm going to
create the content here.
168

168

00:10:05.720  -->  00:10:06.870
Then we'll discuss that further.
169

169

00:10:08.390  -->  00:10:12.340
Then we'll just type contact list and
170

170

00:10:12.340  -->  00:10:13.910
you can probably guess probably
what we're going to do.
171

171

00:10:13.910  -->  00:10:19.930
We'll start something like 0 I or
less than I mobile phone I should say.
172

172

00:10:19.930  -->  00:10:24.490
MobilePhone.get and
what we should do is think about getting
173

173

00:10:24.490  -->  00:10:28.300
a getter to actually retrieve the array
list but this is what I'm getting at.
174

174

00:10:28.300  -->  00:10:32.030
So, what we want to decide is whether we
should be adding this functionality here.
175

175

00:10:32.030  -->  00:10:34.470
In other words, should we be going
through the list and so forth.
176

176

00:10:34.470  -->  00:10:37.010
My argument would be that we
wouldn't be doing it here
177

177

00:10:37.010  -->  00:10:40.610
in actual fact what we should
be doing is implementing a print
178

178

00:10:40.610  -->  00:10:44.610
context function with the mobile
phone class self like so.
179

179

00:10:44.610  -->  00:10:49.450
So, it will be something like
mobilePhone.printContacts.
180

180

00:10:51.450  -->  00:10:54.220
In other words we take this code out and
we go back and
181

181

00:10:54.220  -->  00:10:57.810
implement print contacts which is in the
mobile phone class or will be in there.
182

182

00:10:57.810  -->  00:10:58.850
That's what we're gonna do.
183

183

00:10:58.850  -->  00:10:59.950
We're gonna add that down at the bottom.
184

184

00:11:01.810  -->  00:11:08.740
And it's going to be public,
not static, public void printContacts.
185

185

00:11:11.600  -->  00:11:18.990
And it's going to be this.myContacts.size,
i++.
186

186

00:11:21.190  -->  00:11:28.550
And we're gonna do something like i + 1 +.
187

187

00:11:33.120  -->  00:11:38.490
Get(i).getName + I find
188

188

00:11:38.490  -->  00:11:44.080
out the phone number as well.
189

189

00:11:44.080  -->  00:11:49.680
This.myContacts.get(i.getPhoneNumber).
190

190

00:11:49.680  -->  00:11:50.710
Like I say, and that's literally it.
191

191

00:11:50.710  -->  00:11:55.990
So, what we've done here is we've just
navigated through the entire contents.
192

192

00:11:55.990  -->  00:11:59.780
We know that it's a contact record,
so we're retrieving the record and
193

193

00:11:59.780  -->  00:12:04.060
because we have to find it up here as
an array list, I've typed contact.
194

194

00:12:04.060  -->  00:12:09.500
When we use a dot get and Java knows that
this is automatically a contact class or
195

195

00:12:09.500  -->  00:12:13.110
contact object that's in the array
list subsequently the get name and
196

196

00:12:13.110  -->  00:12:15.220
the get phone number work,
the getters work.
197

197

00:12:15.220  -->  00:12:17.060
Which are from the contact class itself.
198

198

00:12:17.060  -->  00:12:19.010
The getters that we've actually
established for getName and
199

199

00:12:19.010  -->  00:12:19.880
getPhoneNumber.
200

200

00:12:19.880  -->  00:12:23.540
So, that's again one of the beauties
about using array lists and
201

201

00:12:23.540  -->  00:12:26.640
defining the type is that it makes it
a lot easier to do this type of code.
202

202

00:12:26.640  -->  00:12:29.890
So, what we've now done is we've
implemented a simple printContacts
203

203

00:12:29.890  -->  00:12:32.910
function just to go through
the list of array elements.
204

204

00:12:32.910  -->  00:12:33.870
And to print them out.
205

205

00:12:33.870  -->  00:12:37.930
So, you can see that by having to navigate
using index positions and printing out
206

206

00:12:37.930  -->  00:12:41.290
numbers and so forth, this really
shouldn't have been in this code here.
207

207

00:12:41.290  -->  00:12:43.760
We shouldn't have been
implementing it in there,
208

208

00:12:43.760  -->  00:12:47.050
because we don't want the class or
the code that's called
209

209

00:12:47.050  -->  00:12:50.680
calling the mobile phone code to know
how the underlying array list works.
210

210

00:12:50.680  -->  00:12:52.720
Or even that there's an array list in use.
211

211

00:12:52.720  -->  00:12:56.390
As far as we're concerned we've just got
a mechanism that we can add records to,
212

212

00:12:56.390  -->  00:12:58.490
we can update, search etc.
213

213

00:12:58.490  -->  00:13:02.380
And print and remove as well and
that's all we need to know about it.
214

214

00:13:02.380  -->  00:13:04.960
So, that's why we're implementing
that in the mobile phone.
215

215

00:13:04.960  -->  00:13:06.680
So, we could of actually
just changed this,
216

216

00:13:06.680  -->  00:13:08.770
in fact I might do that just
to be a bit more simplistic.
217

217

00:13:10.180  -->  00:13:12.130
And go back up to our print and
218

218

00:13:12.130  -->  00:13:15.790
we can just actually literally just
replace that line in there altogether and
219

219

00:13:15.790  -->  00:13:17.750
then actually delete this cause
we don't use that anymore.
220

220

00:13:17.750  -->  00:13:21.180
But, I did actually wanna start during
that just to show you that you should be
221

221

00:13:21.180  -->  00:13:25.710
thinking when you're creating methods
is this code that I'm creating
222

222

00:13:25.710  -->  00:13:27.650
is in the right place or not.
223

223

00:13:27.650  -->  00:13:30.640
It's very important to get that right and
is to be thinking about that.
224

224

00:13:30.640  -->  00:13:32.280
Cause it can be very useful.
225

225

00:13:32.280  -->  00:13:34.080
Extremely useful if you figured that out,
and
226

226

00:13:34.080  -->  00:13:36.100
make sure that you're actually
putting it in the right place.
227

227

00:13:36.100  -->  00:13:36.820
Okay, so moving on.
228

228

00:13:36.820  -->  00:13:38.510
We've done our print context.
229

229

00:13:38.510  -->  00:13:41.460
The next option was option two from
memory, which is this one here.
230

230

00:13:41.460  -->  00:13:42.990
Which is to add a new contact.
231

231

00:13:42.990  -->  00:13:44.450
So, we need to add another case for that.
232

232

00:13:44.450  -->  00:13:49.070
Case two, and what I'm going to do is
I'm going to just add a method for
233

233

00:13:49.070  -->  00:13:49.820
each of these.
234

234

00:13:49.820  -->  00:13:54.290
And you'll see why shortly, so
235

235

00:13:54.290  -->  00:14:00.260
in case two,
add new contact [SOUND] break.
236

236

00:14:00.260  -->  00:14:01.500
Case three.
237

237

00:14:01.500  -->  00:14:05.470
It's gonna be update existing contact or
update contact.
238

238

00:14:05.470  -->  00:14:09.410
[SOUND] break.
239

239

00:14:09.410  -->  00:14:11.320
Case four.
240

240

00:14:11.320  -->  00:14:14.980
Of course case four was removed so
that's gonna be remove contact.
241

241

00:14:14.980  -->  00:14:20.210
[SOUND]
break.
242

242

00:14:20.210  -->  00:14:25.560
Case five, that'll be queryContact,
see that on the screen, query.
243

243

00:14:27.480  -->  00:14:28.850
QueryContact.
244

244

00:14:30.850  -->  00:14:31.710
Break.
245

245

00:14:31.710  -->  00:14:35.320
And then of course case six
was the print actions, so
246

246

00:14:35.320  -->  00:14:41.120
it's gonna be print actions break so
that's our switch and
247

247

00:14:41.120  -->  00:14:44.620
the various cases that we need to
implement or that we have implemented.
248

248

00:14:44.620  -->  00:14:48.800
Next, we need to implement these methods,
add, update, remove, and query.
249

249

00:14:48.800  -->  00:14:51.520
So, I'm gonna do that just here.
250

250

00:14:51.520  -->  00:14:56.120
So, starting at the first one, now we
want to add is actually add new contact.
251

251

00:14:56.120  -->  00:14:58.280
Now, the reason I want to make this
a separate method is of course,
252

252

00:14:58.280  -->  00:15:00.230
we need to actually ask for the name.
253

253

00:15:00.230  -->  00:15:01.740
And then actually call the codes.
254

254

00:15:01.740  -->  00:15:04.930
The few lines of code needed
to get this all implemented.
255

255

00:15:04.930  -->  00:15:07.270
So, we going to put private.
256

256

00:15:07.270  -->  00:15:10.460
Private, static.
257

257

00:15:12.560  -->  00:15:13.420
Void.
258

258

00:15:13.420  -->  00:15:14.320
Add new contact.
259

259

00:15:17.340  -->  00:15:22.940
Put out enter view contact name.
260

260

00:15:22.940  -->  00:15:25.910
Dream name= scanner .nextline.
261

261

00:15:25.910  -->  00:15:29.450
So, we're going to retrieve
the contact name that we want to add.
262

262

00:15:29.450  -->  00:15:32.390
But, we also need to add
a phone number as well.
263

263

00:15:32.390  -->  00:15:33.620
So, to do that we're going to put.
264

264

00:15:36.290  -->  00:15:39.730
Enter phone number and
265

265

00:15:39.730  -->  00:15:45.550
string phone = scanner .nextLine.
266

266

00:15:45.550  -->  00:15:48.500
So we're gonna, phone number as well.
267

267

00:15:48.500  -->  00:15:49.360
So, we've now got the name and
268

268

00:15:49.360  -->  00:15:51.100
the phone number that we've
read in from the keyboard.
269

269

00:15:51.100  -->  00:15:54.720
Need to create a new contact,
and we do Contact
270

270

00:15:56.370  -->  00:16:03.690
newContact = Contact, and
you'll notice this code here,
271

271

00:16:03.690  -->  00:16:08.680
Contact.createContact(name, phone).
272

272

00:16:08.680  -->  00:16:12.620
And you can see how we've used
the reference to the contact class but we
273

273

00:16:12.620  -->  00:16:17.090
haven't used an object, we haven't created
a new instance we've used that directly so
274

274

00:16:17.090  -->  00:16:21.650
the capital C equates to the actual name
in the class and of course the reason we
275

275

00:16:21.650  -->  00:16:25.870
can do that is because going back to
the contact class it's a static method.
276

276

00:16:25.870  -->  00:16:28.120
So, that's the reason we wanna
use a static method there,
277

277

00:16:28.120  -->  00:16:29.640
because it's a convenience method.
278

278

00:16:29.640  -->  00:16:31.770
It's also known as
a factory method as well.
279

279

00:16:31.770  -->  00:16:34.160
That's another definition for it.
280

280

00:16:34.160  -->  00:16:39.360
And it's just a simple way so
you can see here we wanna create a new
281

281

00:16:39.360  -->  00:16:44.730
contact record without having
to create a new contact class.
282

282

00:16:44.730  -->  00:16:47.400
Without necessarily having an instance
of one object to call a method on.
283

283

00:16:47.400  -->  00:16:50.110
And that's what the static allows
to do is send that line there.
284

284

00:16:50.110  -->  00:16:52.620
So, therefore, we've got our contact
added, which of course we need to
285

285

00:16:52.620  -->  00:16:57.350
pass onto the add new contact in
the mobile phone class itself.
286

286

00:16:57.350  -->  00:17:02.370
So, last thing we now need to do is,
287

287

00:17:02.370  -->  00:17:08.250
put if(mobilePhone.addNewContact)
288

288

00:17:08.250  -->  00:17:14.450
[SOUND] we're gonna put
new contact added and
289

289

00:17:14.450  -->  00:17:20.840
it's going to be,
we can actually put name.
290

290

00:17:20.840  -->  00:17:26.270
Name, phone, keep it simple here.
291

291

00:17:26.270  -->  00:17:29.360
Phone.
292

292

00:17:29.360  -->  00:17:33.110
Else.
293

293

00:17:33.110  -->  00:17:37.960
Cannot add name,
already on file [SOUND] so
294

294

00:17:37.960  -->  00:17:43.670
we're taking advantage
of the boolean return.
295

295

00:17:43.670  -->  00:17:47.930
If it's true, then this line of code is
checking to see if that's true or false.
296

296

00:17:47.930  -->  00:17:50.080
Were we successful in
adding in the new contact.
297

297

00:17:50.080  -->  00:17:54.410
If we were, we're just gonna print out
a message confirming what we've added.
298

298

00:17:54.410  -->  00:17:56.970
Otherwise, if that returned
false add new contact,
299

299

00:17:56.970  -->  00:17:59.100
it means that it found a record for
that name already.
300

300

00:17:59.100  -->  00:18:02.090
And If that's the case, we're gonna
print a message to say, cannot add,
301

301

00:18:02.090  -->  00:18:03.370
the name is already on file.
302

302

00:18:03.370  -->  00:18:06.120
So, what I'm gonna do is pause the video
here and we'll come back and we'll
303

303

00:18:06.120  -->  00:18:09.710
implement the remaining three classes and
go ahead and actually run this.
304

304

00:18:09.710  -->  00:18:11.070
I will see you in that next video.
