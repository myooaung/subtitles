1
1

00:00:05,170  -->  00:00:07,290
so let's try running this program
2

2

00:00:07,290  -->  00:00:09,850
again i'm going to right click and run
3

3

00:00:09,850  -->  00:00:14,680
it and as I mentioned towards the end of
4

4

00:00:14,680  -->  00:00:17,110
the last video when we run it again we
5

5

00:00:17,110  -->  00:00:19,570
get this sqlite error something went
6

6

00:00:19,570  -->  00:00:22,990
wrong sqlite error or missing database
7

7

00:00:22,990  -->  00:00:27,690
table contacts already exists so the first
8

8

00:00:27,690  -->  00:00:29,520
time the user ran the application or
9

9

00:00:29,520  -->  00:00:31,150
in our case we ran it we want to
10

10

00:00:31,150  -->  00:00:33,160
create the table but the second and
11

11

00:00:33,160  -->  00:00:35,100
subsequent times we don't want to do
12

12

00:00:35,100  -->  00:00:35,730
that
13

13

00:00:35,730  -->  00:00:37,560
so how do we handle this when our application
14

14

00:00:37,560  -->  00:00:40,140
needs to create the database and tables
15

15

00:00:40,140  -->  00:00:42,100
we don't want to drop the table every
16

16

00:00:42,100  -->  00:00:44,440
time the application runs because the
17

17

00:00:44,440  -->  00:00:45,810
user will lose whatever data they've
18

18

00:00:45,810  -->  00:00:47,400
added to that table
19

19

00:00:47,400  -->  00:00:50,260
fortunately there is another way what we
20

20

00:00:50,260  -->  00:00:51,870
can do is we can tell sqlite to
21

21

00:00:51,870  -->  00:00:54,190
only create the table if it doesn't
22

22

00:00:54,190  -->  00:00:57,540
already exist by adding if not exists to
23

23

00:00:57,540  -->  00:00:59,790
create statement so in that scenario
24

24

00:00:59,790  -->  00:01:02,400
sqlite will only try to add a table
25

25

00:01:02,400  -->  00:01:05,100
but the table doesn't already exist in
26

26

00:01:05,100  -->  00:01:07,690
the database so do that we just come up
27

27

00:01:07,690  -->  00:01:10,210
here to our create table statement and
28

28

00:01:10,210  -->  00:01:15,670
and add....and let's just break this
29

29

00:01:15,670  -->  00:01:18,150
into two lines which can often be a
30

30

00:01:18,150  -->  00:01:21,750
better way of doing things....
31

31

00:01:21,750  -->  00:01:26,200
...
32

32

00:01:26,200  -->  00:01:28,110
I like doing that with sql statements
33

33

00:01:28,110  -->  00:01:30,540
because it just makes it easy to read
34

34

00:01:30,540  -->  00:01:32,280
o let's just run this and
35

35

00:01:32,280  -->  00:01:33,850
confirmed that we don't get an error
36

36

00:01:33,850  -->  00:01:38,640
anymore you can see the program is
37

37

00:01:38,640  -->  00:01:40,500
exiting normally now and not
38

38

00:01:40,500  -->  00:01:43,840
showing and error now I said that
39

39

00:01:43,840  -->  00:01:45,750
we've broken the sql statement up
40

40

00:01:45,750  -->  00:01:47,530
here for readability to make it easy to
41

41

00:01:47,530  -->  00:01:50,280
read but right now we hard-coding the
42

42

00:01:50,280  -->  00:01:52,350
sql and that isn't the best way to do
43

43

00:01:52,350  -->  00:01:54,520
things but will hold that thought just
44

44

00:01:54,520  -->  00:01:57,100
for a moment so now that we have a table
45

45

00:01:57,100  -->  00:01:59,590
let's go ahead and add some data to it
46

46

00:01:59,590  -->  00:02:02,350
now just to with the command line
47

47

00:02:02,350  -->  00:02:04,140
when we are using sqlite
48

48

00:02:04,140  -->  00:02:05,770
we're going to use the insert statement
49

49

00:02:05,770  -->  00:02:09,540
but once again in Java we need to use a
50

50

00:02:09,540  -->  00:02:12,850
statement object to make that happen and
51

51

00:02:12,850  -->  00:02:15,120
lets just reuse the statement object
52

52

00:02:15,120  -->  00:02:17,110
we've already got because we are able to do
53

53

00:02:17,110  -->  00:02:18,790
that so below the
54

54

00:02:18,790  -->  00:02:21,400
statement that executes the create
55

55

00:02:21,400  -->  00:02:24,250
table SQL the sql we're going
56

56

00:02:24,250  -->  00:02:26,340
to add a couple of rows I'm going to do
57

57

00:02:26,340  -->  00:02:30,450
statement...
58

58

00:02:30,450  -->  00:02:38,100
and the code is going to be....
59

59

00:02:38,100  -->  00:02:57,600
...
60

60

00:02:57,600  -->  00:03:01,590
....
61

61

00:03:01,590  -->  00:03:11,010
...
62

62

00:03:11,010  -->  00:03:12,480
so let's just run this to confirm that
63

63

00:03:12,480  -->  00:03:13,350
it works
64

64

00:03:13,350  -->  00:03:17,820
we've got no errors that's a good sign
65

65

00:03:17,820  -->  00:03:20,130
we'll have a look at our db browser again
66

66

00:03:20,130  -->  00:03:22,870
we can switch over here to the browse
67

67

00:03:22,870  -->  00:03:25,000
data tab so click on that and you can
68

68

00:03:25,000  -->  00:03:26,790
see it's now showing a record that fonts
69

69

00:03:26,790  -->  00:03:29,040
rather small but size it up you
70

70

00:03:29,040  -->  00:03:30,280
can see that it is showing that the
71

71

00:03:30,280  -->  00:03:31,900
record has now been added to the
72

72

00:03:31,900  -->  00:03:35,190
database and just in case you already on
73

73

00:03:35,190  -->  00:03:36,900
that screen there's gotta refresh button
74

74

00:03:36,900  -->  00:03:39,040
here can click on that anytime you
75

75

00:03:39,040  -->  00:03:40,900
go back to intelliJ coming back to
76

76

00:03:40,900  -->  00:03:43,150
here and that will refresh the view and show
77

77

00:03:43,150  -->  00:03:44,010
the data
78

78

00:03:44,010  -->  00:03:46,950
alright so add another two rows
79

79

00:03:46,950  -->  00:03:48,600
here to the database back in IntelliJ
80

80

00:03:48,600  -->  00:03:51,280
but before we go do that it's probably
81

81

00:03:51,280  -->  00:03:53,820
good time to mention that the jdbc
82

82

00:03:53,820  -->  00:03:56,620
connection class commits any changes we
83

83

00:03:56,620  -->  00:03:59,100
make to the database for us immediately
84

84

00:03:59,100  -->  00:04:02,470
after a statement is executed now will
85

85

00:04:02,470  -->  00:04:04,150
cover the ramifications of that and what
86

86

00:04:04,150  -->  00:04:06,090
this means in more detail in a later
87

87

00:04:06,090  -->  00:04:08,700
video in this section of the course but
88

88

00:04:08,700  -->  00:04:10,230
for now though understanding that
89

89

00:04:10,230  -->  00:04:12,340
depending on which database you're
90

90

00:04:12,340  -->  00:04:14,310
working with and what type of connection
91

91

00:04:14,310  -->  00:04:16,950
you use sometimes you have to explicitly
92

92

00:04:16,950  -->  00:04:19,180
commit any changes you make to the
93

93

00:04:19,180  -->  00:04:21,510
database for those changes to persist
94

94

00:04:21,510  -->  00:04:24,690
and if you don't commit them closing the
95

95

00:04:24,690  -->  00:04:26,860
connection will also mean that we lose
96

96

00:04:26,860  -->  00:04:28,770
any changes with made in other words\
97

97

00:04:28,770  -->  00:04:31,590
they rolled back for example with the
98

98

00:04:31,590  -->  00:04:32,530
jdbc
99

99

00:04:32,530  -->  00:04:34,900
connection didn't commit changes for us and
100

100

00:04:34,900  -->  00:04:37,210
after we added a row to the database and
101

101

00:04:37,210  -->  00:04:39,520
close the connection we wouldn't see
102

102

00:04:39,520  -->  00:04:41,110
the row when we looked at the data
103

103

00:04:41,110  -->  00:04:44,950
table in the DB browser now the default
104

104

00:04:44,950  -->  00:04:48,370
behavior of jdbc connection objects is
105

105

00:04:48,370  -->  00:04:51,880
to auto commit all changes so let's
106

106

00:04:51,880  -->  00:04:54,730
temporarily set the connection to not auto
107

107

00:04:54,730  -->  00:04:57,130
commit changes for us what will then do
108

108

00:04:57,130  -->  00:04:59,200
is add another row to the table by
109

109

00:04:59,200  -->  00:05:01,380
changing the existing line of code to
110

110

00:05:01,380  -->  00:05:04,870
use new values so after the connection
111

111

00:05:04,870  -->  00:05:07,240
string or the connection line line
112

112

00:05:07,240  -->  00:05:10,840
16 we're going to type...
113

113

00:05:10,840  -->  00:05:40,300
...
114

114

00:05:40,300  -->  00:05:42,880
alright so I've turned auto commit off
115

115

00:05:42,880  -->  00:05:46,330
we change the values so if we run we
116

116

00:05:46,330  -->  00:05:47,800
should find we don't get any errors
117

117

00:05:47,800  -->  00:05:51,370
and it's finished successfully if we
118

118

00:05:51,370  -->  00:05:54,100
swing over to the DB browser will
119

119

00:05:54,100  -->  00:05:57,370
do a refresh note now that we're not seeing
120

120

00:05:57,370  -->  00:05:58,990
the new records and the new record has
121

121

00:05:58,990  -->  00:06:02,530
not been added and that's because we turned
122

122

00:06:02,530  -->  00:06:02,740
off
123

123

00:06:02,740  -->  00:06:05,280
auto commit by calling the connect set auto
124

124

00:06:05,280  -->  00:06:08,740
commit method back in the code and
125

125

00:06:08,740  -->  00:06:11,160
the connection is no longer
126

126

00:06:11,160  -->  00:06:12,910
automatically committing changes to the
127

127

00:06:12,910  -->  00:06:15,640
database for us now we can call a method
128

128

00:06:15,640  -->  00:06:18,280
to commit those changes even with set
129

129

00:06:18,280  -->  00:06:20,160
autocommit off and we'll look at
130

130

00:06:20,160  -->  00:06:22,270
doing that in a future video but i'm
131

131

00:06:22,270  -->  00:06:24,820
mentioning this here now in case you may
132

132

00:06:24,820  -->  00:06:26,950
have expected the changes were making to
133

133

00:06:26,950  -->  00:06:28,090
be rolled back because we're not
134

134

00:06:28,090  -->  00:06:29,440
committing them in other words you've
135

135

00:06:29,440  -->  00:06:31,450
got some experience in another database
136

136

00:06:31,450  -->  00:06:35,200
perhaps in another language so now i'm
137

137

00:06:35,200  -->  00:06:36,850
going to comment out the call to set auto
138

138

00:06:36,850  -->  00:06:39,070
commit and in addition to inserting
139

139

00:06:39,070  -->  00:06:41,160
the new jrow we're also going to add
140

140

00:06:41,160  -->  00:06:42,310
two more row just so we got a
141

141

00:06:42,310  -->  00:06:44,470
bit of data so go and comment on
142

142

00:06:44,470  -->  00:06:45,830
line 17
143

143

00:06:45,830  -->  00:06:51,110
let's copy and paste the statement
144

144

00:06:51,110  -->  00:06:52,580
that executes that inserts the records
145

145

00:06:52,580  -->  00:07:01,030
and leave....
146

146

00:07:01,030  -->  00:07:08,590
....
147

147

00:07:08,590  -->  00:07:34,370
...
148

148

00:07:34,370  -->  00:07:42,080
ok let's just run this code now no errors
149

149

00:07:42,080  -->  00:07:44,180
you can see there the set auto commit has now
150

150

00:07:44,180  -->  00:07:46,400
been commented out we go back to the
151

151

00:07:46,400  -->  00:07:48,770
browser now and now we do a refresh we
152

152

00:07:48,770  -->  00:07:50,470
can see that the other three records are now
153

153

00:07:50,470  -->  00:07:53,120
showing that's obviously what we want to
154

154

00:07:53,120  -->  00:07:54,710
do
155

155

00:07:54,710  -->  00:07:57,370
alright so inserting is working now
156

156

00:07:57,370  -->  00:07:58,780
let's go ahead and update Jane's
157

157

00:07:58,780  -->  00:08:00,680
telephone number using the updates
158

158

00:08:00,680  -->  00:08:02,770
sql command as we learned to do what
159

159

00:08:02,770  -->  00:08:04,690
previously when we were looking at the
160

160

00:08:04,690  -->  00:08:07,150
sqlite on the command line what i'm going to
161

161

00:08:07,150  -->  00:08:09,710
do is comment out these inserts
162

162

00:08:09,710  -->  00:08:13,090
because we don't want those to rerun
163

163

00:08:13,090  -->  00:08:16,940
going to do a statement....
164

164

00:08:16,940  -->  00:08:29,770
...
165

165

00:08:29,770  -->  00:08:37,610
...again I'm using single quotes
166

166

00:08:37,610  -->  00:08:40,090
there for strings so that we don't have
167

167

00:08:40,090  -->  00:08:41,870
to escape and will make it any more
168

168

00:08:41,870  -->  00:08:44,140
complicated what it is
169

169

00:08:44,140  -->  00:08:45,560
alright so let's just run this to make
170

170

00:08:45,560  -->  00:08:50,480
sure that the update works no errors
171

171

00:08:50,480  -->  00:08:53,440
will go back to DB browser to see Jane
172

172

00:08:53,440  -->  00:08:54,860
at the moment has got...
173

173

00:08:54,860  -->  00:08:58,450
refresh you can see the phone
174

174

00:08:58,450  -->  00:08:59,480
numbers change to....
175

175

00:08:59,480  -->  00:09:03,110
...so let's go ahead now
176

176

00:09:03,110  -->  00:09:08,030
and delete Joe just before we move on
177

177

00:09:08,030  -->  00:09:09,560
importantly again i have mentioned this
178

178

00:09:09,560  -->  00:09:11,360
before but its vital that we use a
179

179

00:09:11,360  -->  00:09:13,730
where clause when we want to update or
180

180

00:09:13,730  -->  00:09:15,770
delete otherwise all the rows in our table
181

181

00:09:15,770  -->  00:09:18,170
will be updated or deleted which won't
182

182

00:09:18,170  -->  00:09:19,370
be what we want to happen most of the
183

183

00:09:19,370  -->  00:09:21,230
time and I can certainly tell you of a
184

184

00:09:21,230  -->  00:09:23,360
few stories where I've accidentally
185

185

00:09:23,360  -->  00:09:25,550
forgotten to put a where clause and
186

186

00:09:25,550  -->  00:09:27,980
deleted production data so always good
187

187

00:09:27,980  -->  00:09:29,210
to check especially when you're learning
188

188

00:09:29,210  -->  00:09:30,230
sql
189

189

00:09:30,230  -->  00:09:32,480
have you got a where clause to make sure
190

190

00:09:32,480  -->  00:09:33,800
you're not deleting or updating more
191

191

00:09:33,800  -->  00:09:36,200
things and what you wanted let's
192

192

00:09:36,200  -->  00:09:38,000
go ahead now and delete joe from the
193

193

00:09:38,000  -->  00:09:40,850
table and can leave that existing
194

194

00:09:40,850  -->  00:09:42,560
update in even though the phone is
195

195

00:09:42,560  -->  00:09:44,690
already set because of the where clause
196

196

00:09:44,690  -->  00:09:45,890
i'll just leave that in there but I
197

197

00:09:45,890  -->  00:09:47,810
could have commented that out statement
198

198

00:09:47,810  -->  00:09:59,510
...
199

199

00:09:59,510  -->  00:10:06,410
...if I run again now no errors back to db
200

200

00:10:06,410  -->  00:10:08,960
browser see joes there at the moment
201

201

00:10:08,960  -->  00:10:11,780
refresh the joe record has now been
202

202

00:10:11,780  -->  00:10:12,590
deleted
203

203

00:10:12,590  -->  00:10:15,320
alright so we've seen how to add update
204

204

00:10:15,320  -->  00:10:17,930
and delete data from the contacts table
205

205

00:10:17,930  -->  00:10:21,110
or to or from the contacts table now
206

206

00:10:21,110  -->  00:10:23,720
jdbc wouldn't be very useful if we
207

207

00:10:23,720  -->  00:10:26,090
couldn't query the data of course we can
208

208

00:10:26,090  -->  00:10:28,520
do that by using a select statement but
209

209

00:10:28,520  -->  00:10:30,140
how do we actually process the query
210

210

00:10:30,140  -->  00:10:33,200
result so let's go ahead and retrieve
211

211

00:10:33,200  -->  00:10:35,510
all the data from the contacts table
212

212

00:10:35,510  -->  00:10:38,180
using the sql statement select star
213

213

00:10:38,180  -->  00:10:41,090
from contacts now the statement.
214

214

00:10:41,090  -->  00:10:43,910
execute method returns a boolean that
215

215

00:10:43,910  -->  00:10:45,230
would be true if the statement we
216

216

00:10:45,230  -->  00:10:47,450
executed returned an instance of the
217

217

00:10:47,450  -->  00:10:50,480
results set class and false if it
218

218

00:10:50,480  -->  00:10:52,820
returns an update count or no results
219

219

00:10:52,820  -->  00:10:55,370
for example when we execute an update
220

220

00:10:55,370  -->  00:10:57,770
statement the execute method will return
221

221

00:10:57,770  -->  00:11:00,050
false because the result of the update
222

222

00:11:00,050  -->  00:11:02,150
statement is the number of records that
223

223

00:11:02,150  -->  00:11:04,460
were updated now when we query the
224

224

00:11:04,460  -->  00:11:06,680
database the method returns the records
225

225

00:11:06,680  -->  00:11:09,080
that match the query as a result set
226

226

00:11:09,080  -->  00:11:12,140
instance we can actually get the results
227

227

00:11:12,140  -->  00:11:12,880
by calling the
228

228

00:11:12,880  -->  00:11:14,680
statement . get results set method
229

229

00:11:14,680  -->  00:11:16,750
and once we've got that we can loop
230

230

00:11:16,750  -->  00:11:18,190
through the results so let's go ahead
231

231

00:11:18,190  -->  00:11:20,890
and try this out going now comment out
232

232

00:11:20,890  -->  00:11:24,220
the updates and deletes the update and
233

233

00:11:24,220  -->  00:11:25,600
delete because we no longer need those
234

234

00:11:25,600  -->  00:11:28,780
and let's actually now add this statement
235

235

00:11:28,780  -->  00:11:30,820
that ultimately will get us back to
236

236

00:11:30,820  -->  00:11:33,190
results set we're going to do....
237

237

00:11:33,190  -->  00:11:38,530
...
238

238

00:11:38,530  -->  00:11:48,370
....
239

239

00:11:48,370  -->  00:12:37,180
...
240

240

00:12:37,180  -->  00:12:41,470
...so in this code we call execute
241

241

00:12:41,470  -->  00:12:44,680
to perform select ang get
242

242

00:12:44,680  -->  00:12:47,290
results set to get the results we then
243

243

00:12:47,290  -->  00:12:49,210
looping through each record and then
244

244

00:12:49,210  -->  00:12:50,500
we're printing and we're about to print
245

245

00:12:50,500  -->  00:12:53,080
out the name phone email and as you can
246

246

00:12:53,080  -->  00:12:55,030
see we get to the value for a column by
247

247

00:12:55,030  -->  00:12:57,130
calling the appropriate get method for
248

248

00:12:57,130  -->  00:12:59,350
the values type string or int depending
249

249

00:12:59,350  -->  00:13:02,380
on the which column we are working with so lets
250

250

00:13:02,380  -->  00:13:07,300
actually run that we can see we've got
251

251

00:13:07,300  -->  00:13:09,580
three records return there in the run
252

252

00:13:09,580  -->  00:13:11,140
windows so that telling us that
253

253

00:13:11,140  -->  00:13:14,230
that's worked ok now every results set
254

254

00:13:14,230  -->  00:13:16,870
has a cursor now this cursor isn't
255

255

00:13:16,870  -->  00:13:19,480
the same as a database cursor we could
256

256

00:13:19,480  -->  00:13:21,670
have had several results set objects and
257

257

00:13:21,670  -->  00:13:23,200
each one will have a cursor
258

258

00:13:23,200  -->  00:13:25,000
however and this is actually quite
259

259

00:13:25,000  -->  00:13:26,110
important
260

260

00:13:26,110  -->  00:13:28,000
if you reuse a statement object to do a
261

261

00:13:28,000  -->  00:13:30,760
query than any results set associated
262

262

00:13:30,760  -->  00:13:33,550
with that statement object is closed and
263

263

00:13:33,550  -->  00:13:36,190
a new one is created for the new query
264

264

00:13:36,190  -->  00:13:38,800
so if we want to work with several query
265

265

00:13:38,800  -->  00:13:40,960
results at the same time and it's
266

266

00:13:40,960  -->  00:13:42,820
imperative to use a different statement
267

267

00:13:42,820  -->  00:13:46,210
instance for each query reusing the
268

268

00:13:46,210  -->  00:13:47,830
statement instance was ok when we're
269

269

00:13:47,830  -->  00:13:49,810
just doing insertions updates and
270

270

00:13:49,810  -->  00:13:51,970
deletes because we weren't using or
271

271

00:13:51,970  -->  00:13:54,760
checking the result now we can reuse a
272

272

00:13:54,760  -->  00:13:56,890
statement object to query but only if we
273

273

00:13:56,890  -->  00:13:58,570
finished processing the results of one
274

274

00:13:58,570  -->  00:14:00,850
query before we execute the next query
275

275

00:14:00,850  -->  00:14:03,850
now keep in mind that a statement object
276

276

00:14:03,850  -->  00:14:06,040
ultimately can only ever have one active
277

277

00:14:06,040  -->  00:14:09,700
result set associated with it now when
278

278

00:14:09,700  -->  00:14:12,040
the results set is created is cursor is
279

279

00:14:12,040  -->  00:14:14,410
positioned before the first record and
280

280

00:14:14,410  -->  00:14:16,120
so the first time we call results .
281

281

00:14:16,120  -->  00:14:18,310
next the cursor will be moved to the
282

282

00:14:18,310  -->  00:14:21,820
first record when we call it again the
283

283

00:14:21,820  -->  00:14:23,320
cursor will be moved to the second
284

284

00:14:23,320  -->  00:14:25,300
record in the result set when theirs no more
285

285

00:14:25,300  -->  00:14:27,190
records the next method will return
286

286

00:14:27,190  -->  00:14:29,560
false and what we call one of the result
287

287

00:14:29,560  -->  00:14:32,290
sets get methods values returned are
288

288

00:14:32,290  -->  00:14:34,270
those from the record at the result sets
289

289

00:14:34,270  -->  00:14:37,300
cursors current position now we'll come
290

290

00:14:37,300  -->  00:14:39,310
back to the resultset cursor where we
291

291

00:14:39,310  -->  00:14:41,020
work with a database within a GUI
292

292

00:14:41,020  -->  00:14:44,260
application note that results set is a
293

293

00:14:44,260  -->  00:14:46,150
resource so we have to close it and you
294

294

00:14:46,150  -->  00:14:47,980
can see that I added the results . close
295

295

00:14:47,980  -->  00:14:51,160
on line 35 and that's because its
296

296

00:14:51,160  -->  00:14:52,990
associated with the statement instance
297

297

00:14:52,990  -->  00:14:55,060
we have to close it before we close the
298

298

00:14:55,060  -->  00:14:57,490
statement now we're closing all our
299

299

00:14:57,490  -->  00:14:59,770
resources at the end of the try block if
300

300

00:14:59,770  -->  00:15:01,990
an exception is thrown it is possible
301

301

00:15:01,990  -->  00:15:03,370
that the close methods won't be
302

302

00:15:03,370  -->  00:15:06,520
executed even though some or all the other
303

303

00:15:06,520  -->  00:15:09,070
resources have been created now for a
304

304

00:15:09,070  -->  00:15:10,660
our small application it doesn't matter
305

305

00:15:10,660  -->  00:15:13,360
when the database objects are destroyed
306

306

00:15:13,360  -->  00:15:15,250
they'll do the appropriate clean up the
307

307

00:15:15,250  -->  00:15:16,960
close method forces the closing of the
308

308

00:15:16,960  -->  00:15:19,180
database resource immediately rather
309

309

00:15:19,180  -->  00:15:20,560
waiting for them to be automatically
310

310

00:15:20,560  -->  00:15:23,080
closed because of that we don't have to
311

311

00:15:23,080  -->  00:15:25,090
close themselves but it's actually good
312

312

00:15:25,090  -->  00:15:27,430
practice to do so then if our code
313

313

00:15:27,430  -->  00:15:29,140
belong to a large application which
314

314

00:15:29,140  -->  00:15:30,670
there were lots of open connections
315

315

00:15:30,670  -->  00:15:33,730
result sets and statements would have to
316

316

00:15:33,730  -->  00:15:35,350
be a lot more diligent about making sure
317

317

00:15:35,350  -->  00:15:37,630
the resources were closed as soon as we
318

318

00:15:37,630  -->  00:15:39,230
no longer needed them
319

319

00:15:39,230  -->  00:15:41,330
alright so let's finish the video here
320

320

00:15:41,330  -->  00:15:43,460
in the next video i want to show you an
321

321

00:15:43,460  -->  00:15:45,710
easy way to perform queries and getting
322

322

00:15:45,710  -->  00:15:46,820
the results
323

323

00:15:46,820  -->  00:15:53,650
let's work on that in the next video
