1
1

00:00:04,980  -->  00:00:07,110
so let's go through some common database
2

2

00:00:07,110  -->  00:00:09,540
terminology that should be useful for
3

3

00:00:09,540  -->  00:00:10,890
you when we're working with the
4

4

00:00:10,890  -->  00:00:12,540
databases in this section of the course
5

5

00:00:12,540  -->  00:00:14,960
and the idea here is that it will
6

6

00:00:14,960  -->  00:00:16,610
make it a lot easier to understand the
7

7

00:00:16,610  -->  00:00:18,240
app when you understand what the
8

8

00:00:18,240  -->  00:00:20,850
fundamentals are and what all the actual
9

9

00:00:20,850  -->  00:00:24,590
various terms mean now the very basic
10

10

00:00:24,590  -->  00:00:26,600
level the databases the container
11

11

00:00:26,600  -->  00:00:29,730
for all the data that your store or that
12

12

00:00:29,730  -->  00:00:32,550
resides inside now when you use the term
13

13

00:00:32,550  -->  00:00:35,090
database you're referring to the entire
14

14

00:00:35,090  -->  00:00:37,920
data as well as the structure its
15

15

00:00:37,920  -->  00:00:40,260
actually stored in and in addition any
16

16

00:00:40,260  -->  00:00:44,390
queries and views on that data now in sqlite
17

17

00:00:44,390  -->  00:00:46,980
the entire database contents
18

18

00:00:46,980  -->  00:00:49,620
are stored in one single file but that
19

19

00:00:49,620  -->  00:00:51,420
isn't true of most large database
20

20

00:00:51,420  -->  00:00:54,320
systems now the database dictionary
21

21

00:00:54,320  -->  00:00:56,340
provides a comprehensive list of the
22

22

00:00:56,340  -->  00:00:59,160
structures and types of data that are
23

23

00:00:59,160  -->  00:01:02,250
used in recording the data so basically
24

24

00:01:02,250  -->  00:01:03,660
describes all the tables and fields
25

25

00:01:03,660  -->  00:01:06,230
within the database now more on the
26

26

00:01:06,230  -->  00:01:09,300
specifics later but in sqlite there
27

27

00:01:09,300  -->  00:01:12,030
is a table in each database called SQL
28

28

00:01:12,030  -->  00:01:14,970
_lite_master that
29

29

00:01:14,970  -->  00:01:17,730
has this information in it you can query
30

30

00:01:17,730  -->  00:01:19,920
that table but there are commands that
31

31

00:01:19,920  -->  00:01:21,660
do it for you so you don't have to
32

32

00:01:21,660  -->  00:01:23,310
understand the structure of the master
33

33

00:01:23,310  -->  00:01:25,830
table but it's there for you anyway and
34

34

00:01:25,830  -->  00:01:27,390
as we go through that you'll see how
35

35

00:01:27,390  -->  00:01:30,900
these commands actually work
36

36

00:01:30,900  -->  00:01:33,900
now a table is a collection of related
37

37

00:01:33,900  -->  00:01:37,500
data hold in a database so think of a
38

38

00:01:37,500  -->  00:01:39,880
contact database for example that stores
39

39

00:01:39,880  -->  00:01:41,140
the name and the address and the phone
40

40

00:01:41,140  -->  00:01:44,400
number or perhaps your customers or what
41

41

00:01:44,400  -->  00:01:46,200
about an invoice table that records the
42

42

00:01:46,200  -->  00:01:48,130
invoice number in details of the invoice
43

43

00:01:48,130  -->  00:01:50,790
so in this slide there are two tables
44

44

00:01:50,790  -->  00:01:53,380
contacts and invoices that are used to
45

45

00:01:53,380  -->  00:01:55,110
store information about contacts and
46

46

00:01:55,110  -->  00:01:57,750
invoice details now sqlite
47

47

00:01:57,750  -->  00:02:00,180
databases such a sqlite or another
48

48

00:02:00,180  -->  00:02:02,040
database like Microsoft sql server
49

49

00:02:02,040  -->  00:02:04,420
there are ideal for storing structured
50

50

00:02:04,420  -->  00:02:06,610
data that can be organized neatly into
51

51

00:02:06,610  -->  00:02:08,700
rows and columns like you can see in
52

52

00:02:08,700  -->  00:02:11,200
these examples now with all the interest
53

53

00:02:11,200  -->  00:02:14,310
in Big Data their now databases such as no
54

54

00:02:14,310  -->  00:02:17,230
sql or hado that can cope with data
55

55

00:02:17,230  -->  00:02:18,570
that doesn't have such an obvious
56

56

00:02:18,570  -->  00:02:20,070
structure but we're going to be
57

57

00:02:20,070  -->  00:02:21,840
restricting our use of database to
58

58

00:02:21,840  -->  00:02:25,060
structured data
59

59

00:02:25,060  -->  00:02:28,120
so a field is the basic unit of data in
60

60

00:02:28,120  -->  00:02:30,880
the table so a field in a database can be
61

61

00:02:30,880  -->  00:02:33,280
thought of probably in a similar way to
62

62

00:02:33,280  -->  00:02:35,110
one of the variable is and you've seen
63

63

00:02:35,110  -->  00:02:37,000
those obviously and just like a class
64

64

00:02:37,000  -->  00:02:39,250
variable a database field has a name
65

65

00:02:39,250  -->  00:02:42,810
and a type now the type restricts what
66

66

00:02:42,810  -->  00:02:45,220
kind of data can be stored in the field
67

67

00:02:45,220  -->  00:02:47,800
for example it could be a string or it
68

68

00:02:47,800  -->  00:02:50,080
could accept numbers now many databases
69

69

00:02:50,080  -->  00:02:52,810
also allowed date fields large text
70

70

00:02:52,810  -->  00:02:54,400
fields and also fields where you can
71

71

00:02:54,400  -->  00:02:56,590
store things like photographs or audio
72

72

00:02:56,590  -->  00:02:59,350
and these field types are
73

73

00:02:59,350  -->  00:03:02,110
often are often called blobs which is
74

74

00:03:02,110  -->  00:03:04,030
supposed to stand for binary large
75

75

00:03:04,030  -->  00:03:06,850
object it's a great name and I can't
76

76

00:03:06,850  -->  00:03:08,350
help thinking that the original acronym
77

77

00:03:08,350  -->  00:03:10,420
was something like LBO or large binary
78

78

00:03:10,420  -->  00:03:12,310
object and they came up with a cool
79

79

00:03:12,310  -->  00:03:14,560
sounding named afterwards
80

80

00:03:14,560  -->  00:03:16,950
now fields are often referred to as
81

81

00:03:16,950  -->  00:03:19,950
columns in databases now this can be
82

82

00:03:19,950  -->  00:03:22,030
technically confusing sometimes because
83

83

00:03:22,030  -->  00:03:23,590
if you come from an Excel background
84

84

00:03:23,590  -->  00:03:25,230
you'll find that the definition is
85

85

00:03:25,230  -->  00:03:26,530
probably a bit different to what you
86

86

00:03:26,530  -->  00:03:28,840
think of as a column in the spreadsheet
87

87

00:03:28,840  -->  00:03:31,420
the term column refers to an entire set
88

88

00:03:31,420  -->  00:03:34,870
of data extending across many rows but
89

89

00:03:34,870  -->  00:03:36,700
in a relational database column
90

90

00:03:36,700  -->  00:03:39,130
generally refers to a single entry
91

91

00:03:39,130  -->  00:03:40,390
although when talking about the
92

92

00:03:40,390  -->  00:03:42,580
structure of a table rather than the
93

93

00:03:42,580  -->  00:03:44,890
actual data then you could talk about a
94

94

00:03:44,890  -->  00:03:46,900
column to hold the invoice number which
95

95

00:03:46,900  -->  00:03:48,580
is probably closer to the spreadsheet
96

96

00:03:48,580  -->  00:03:51,580
use of the term now when referring to
97

97

00:03:51,580  -->  00:03:53,620
the data in the database though we're
98

98

00:03:53,620  -->  00:03:55,900
talking about an individual item like a
99

99

00:03:55,900  -->  00:03:58,750
base unit of data now relational
100

100

00:03:58,750  -->  00:04:00,730
databases existed nearly 10 years before
101

101

00:04:00,730  -->  00:04:02,890
the first spreadsheet program and we
102

102

00:04:02,890  -->  00:04:04,260
just have to accept that column means
103

103

00:04:04,260  -->  00:04:05,700
slightly different things in each case
104

104

00:04:05,700  -->  00:04:08,930
but more on that shortly
105

105

00:04:08,930  -->  00:04:11,980
now a row or record is a single set of
106

106

00:04:11,980  -->  00:04:13,870
data for all fields that are in that
107

107

00:04:13,870  -->  00:04:16,930
table so if you've got four columns like
108

108

00:04:16,930  -->  00:04:19,090
the example on the screen and if your
109

109

00:04:19,090  -->  00:04:21,250
table has an invoice number or a date a
110

110

00:04:21,250  -->  00:04:23,630
description and an amount then a row
111

111

00:04:23,630  -->  00:04:25,880
represents those four values for a
112

112

00:04:25,880  -->  00:04:27,650
single invoice so it's really a
113

113

00:04:27,650  -->  00:04:29,180
collection of all the columns that
114

114

00:04:29,180  -->  00:04:32,180
comprise the details of one entry in
115

115

00:04:32,180  -->  00:04:34,660
that table so the highlighted record
116

116

00:04:34,660  -->  00:04:36,880
holds the details for invoice number two
117

117

00:04:36,880  -->  00:04:39,530
which was a laptop costing just over a
118

118

00:04:39,530  -->  00:04:41,380
thousand dollars sold on the
119

119

00:04:41,380  -->  00:04:45,650
twenty-fourth of may 2016 and you can use
120

120

00:04:45,650  -->  00:04:47,720
either the terms row or record to
121

121

00:04:47,720  -->  00:04:49,910
identify it but the correct relational
122

122

00:04:49,910  -->  00:04:53,960
database terminology is actually row
123

123

00:04:53,960  -->  00:04:56,720
now a flat file database stores all
124

124

00:04:56,720  -->  00:04:59,030
the data in a single file which can
125

125

00:04:59,030  -->  00:05:00,770
result in a lot of duplication of data
126

126

00:05:00,770  -->  00:05:02,780
over here
127

127

00:05:02,780  -->  00:05:05,210
ISPs credit limit needs to be increased
128

128

00:05:05,210  -->  00:05:07,520
so that they can purchase the monitor as
129

129

00:05:07,520  -->  00:05:09,710
otherwise they actually go over the
130

130

00:05:09,710  -->  00:05:10,430
limit
131

131

00:05:10,430  -->  00:05:12,260
so in order to increase the limit the
132

132

00:05:12,260  -->  00:05:14,390
data in three rows would have to be
133

133

00:05:14,390  -->  00:05:16,290
modified
134

134

00:05:16,290  -->  00:05:18,750
now as you can see every row in the
135

135

00:05:18,750  -->  00:05:21,390
table that contains a record for isp
136

136

00:05:21,390  -->  00:05:24,120
must be changed in order to increase the
137

137

00:05:24,120  -->  00:05:26,970
credit limit so flat file databases are
138

138

00:05:26,970  -->  00:05:29,130
not used very often anymore but they
139

139

00:05:29,130  -->  00:05:31,530
were fairly popular in the early days as
140

140

00:05:31,530  -->  00:05:33,630
they directly mapped to those card index
141

141

00:05:33,630  -->  00:05:36,390
records that companies sometimes used
142

142

00:05:36,390  -->  00:05:39,000
now if we were storing names addresses
143

143

00:05:39,000  -->  00:05:41,400
and phone number type information than a
144

144

00:05:41,400  -->  00:05:43,620
flat file database is fine for the job
145

145

00:05:43,620  -->  00:05:45,810
and even today people still use address
146

146

00:05:45,810  -->  00:05:48,810
books and rolex style contact systems
147

147

00:05:48,810  -->  00:05:50,550
with each person's details on a
148

148

00:05:50,550  -->  00:05:53,160
different card but there isn't really
149

149

00:05:53,160  -->  00:05:55,170
much need to relate the individual cards
150

150

00:05:55,170  -->  00:05:56,100
to each other
151

151

00:05:56,100  -->  00:05:59,340
this works perfectly well as you can see
152

152

00:05:59,340  -->  00:06:01,380
from this invoice example though trying
153

153

00:06:01,380  -->  00:06:03,210
to store all the data in a single table
154

154

00:06:03,210  -->  00:06:06,360
results in duplicate data you're using a
155

155

00:06:06,360  -->  00:06:08,190
relational database tables can be
156

156

00:06:08,190  -->  00:06:10,740
related to other tables which is very
157

157

00:06:10,740  -->  00:06:12,740
useful
158

158

00:06:12,740  -->  00:06:15,250
so continuing on with the invoice
159

159

00:06:15,250  -->  00:06:17,590
example we can split the data out into
160

160

00:06:17,590  -->  00:06:20,360
a customer table which contains standard
161

161

00:06:20,360  -->  00:06:22,720
company data such as their name address
162

162

00:06:22,720  -->  00:06:25,130
and a credit limit and another table
163

163

00:06:25,130  -->  00:06:26,900
called invoices containing all that
164

164

00:06:26,900  -->  00:06:29,840
customers purchases the name column in
165

165

00:06:29,840  -->  00:06:32,150
the customer table is related to the
166

166

00:06:32,150  -->  00:06:35,180
name column in the invoices table now in
167

167

00:06:35,180  -->  00:06:37,060
relational database terms this is called
168

168

00:06:37,060  -->  00:06:40,250
join in fact in this example we have a
169

169

00:06:40,250  -->  00:06:43,090
one-to-many join because they can and
170

170

00:06:43,090  -->  00:06:45,830
probably will be many invoice rows for
171

171

00:06:45,830  -->  00:06:48,160
each customer using a relational model
172

172

00:06:48,160  -->  00:06:50,270
updating a customer's credit limit
173

173

00:06:50,270  -->  00:06:52,280
involves changing the data in just a
174

174

00:06:52,280  -->  00:06:55,130
single row so there is a mechanism to
175

175

00:06:55,130  -->  00:06:57,130
join these two tables to link the
176

176

00:06:57,130  -->  00:06:59,150
individual records in each table to each
177

177

00:06:59,150  -->  00:07:01,780
other and you often see designs were
178

178

00:07:01,780  -->  00:07:03,800
third table is used to provide the link
179

179

00:07:03,800  -->  00:07:07,800
as in this next slide
180

180

00:07:07,800  -->  00:07:10,050
and it's also very common to use a
181

181

00:07:10,050  -->  00:07:12,240
linking table to relate the data to two
182

182

00:07:12,240  -->  00:07:15,420
other tables now here when an invoice
183

183

00:07:15,420  -->  00:07:18,420
record is stored a new record is created
184

184

00:07:18,420  -->  00:07:20,910
in the customer_invoices table
185

185

00:07:20,910  -->  00:07:24,060
to link for example invoice triple 0 4
186

186

00:07:24,060  -->  00:07:27,510
with customer isp now one advantage of
187

187

00:07:27,510  -->  00:07:29,160
this is that the invoice table only
188

188

00:07:29,160  -->  00:07:32,550
contains data relating to invoices the
189

189

00:07:32,550  -->  00:07:33,990
rows are not cluttered up with
190

190

00:07:33,990  -->  00:07:36,210
customer information of any kind not
191

191

00:07:36,210  -->  00:07:38,910
even the customer name splitting the
192

192

00:07:38,910  -->  00:07:40,080
data up like this is known as
193

193

00:07:40,080  -->  00:07:42,210
normalization now database
194

194

00:07:42,210  -->  00:07:43,950
normalization is basically the process
195

195

00:07:43,950  -->  00:07:46,830
of removing redundant duplicated
196

196

00:07:46,830  -->  00:07:49,110
and irrelevant data from the
197

197

00:07:49,110  -->  00:07:51,510
tables and the more that this is done
198

198

00:07:51,510  -->  00:07:54,630
the higher the level of normalization if
199

199

00:07:54,630  -->  00:07:56,070
you look into a normalization you'll
200

200

00:07:56,070  -->  00:07:58,830
find that to you can go up to level 6 6
201

201

00:07:58,830  -->  00:08:01,770
normal form but in most practical
202

202

00:08:01,770  -->  00:08:03,780
applications it's rare to go beyond the
203

203

00:08:03,780  -->  00:08:05,880
third level that's an interesting
204

204

00:08:05,880  -->  00:08:07,380
subject but the math can get a bit
205

205

00:08:07,380  -->  00:08:09,810
horrible at the higher levels our
206

206

00:08:09,810  -->  00:08:11,250
example and the sliders isn't quite as
207

207

00:08:11,250  -->  00:08:13,410
normal as we should be because we've
208

208

00:08:13,410  -->  00:08:15,090
used the customer name as the link
209

209

00:08:15,090  -->  00:08:17,850
between the customer invoice tables and
210

210

00:08:17,850  -->  00:08:19,440
if one of our customers change its name
211

211

00:08:19,440  -->  00:08:22,110
which is quite a common thing to happen then
212

212

00:08:22,110  -->  00:08:24,090
we'll have to update each of the
213

213

00:08:24,090  -->  00:08:26,250
relevant entries in the customer
214

214

00:08:26,250  -->  00:08:28,860
_invoices table as well now
215

215

00:08:28,860  -->  00:08:30,570
the usual way to do with this is to use
216

216

00:08:30,570  -->  00:08:33,090
a unique ID field that stays the same
217

217

00:08:33,090  -->  00:08:36,870
for each customer once its allocated we
218

218

00:08:36,870  -->  00:08:38,760
shouldn't store the customer balances in
219

219

00:08:38,760  -->  00:08:40,440
the table as that's best calculated
220

220

00:08:40,440  -->  00:08:43,570
when needed
221

221

00:08:43,570  -->  00:08:45,790
so a view is a way of looking at the
222

222

00:08:45,790  -->  00:08:49,000
data in a format similar to a table but
223

223

00:08:49,000  -->  00:08:51,290
bringing data together from more than
224

224

00:08:51,290  -->  00:08:54,250
one join table so in this example the
225

225

00:08:54,250  -->  00:08:56,200
view contains columns from the customer
226

226

00:08:56,200  -->  00:08:59,680
table and the invoices table so a view
227

227

00:08:59,680  -->  00:09:01,480
can just contain just some columns from
228

228

00:09:01,480  -->  00:09:03,580
a single table for example just the
229

229

00:09:03,580  -->  00:09:04,970
description column from the invoice table
230

230

00:09:04,970  -->  00:09:07,240
to produce a list of items that
231

231

00:09:07,240  -->  00:09:10,810
have been sold in sqlite the data
232

232

00:09:10,810  -->  00:09:13,630
and the view can't be updated so that means
233

233

00:09:13,630  -->  00:09:16,100
you can't add a new row to a view and
234

234

00:09:16,100  -->  00:09:17,680
have it place to new data into the
235

235

00:09:17,680  -->  00:09:20,380
relevant tables now some databases such
236

236

00:09:20,380  -->  00:09:22,630
as Microsoft sql server do allow this
237

237

00:09:22,630  -->  00:09:24,880
but in that case we have use do have
238

238

00:09:24,880  -->  00:09:27,470
restrictions on the columns that can and
239

239

00:09:27,470  -->  00:09:29,680
must contain if they're used in this way
240

240

00:09:29,680  -->  00:09:31,730
so that's not something we need to worry
241

241

00:09:31,730  -->  00:09:33,110
about because we can't do that in
242

242

00:09:33,110  -->  00:09:34,000
sqlite
243

243

00:09:34,000  -->  00:09:35,440
alright so that's enough to get us
244

244

00:09:35,440  -->  00:09:37,240
started and we're going to explore these
245

245

00:09:37,240  -->  00:09:40,000
terms more as we go through sqlite
246

246

00:09:40,000  -->  00:09:42,350
so coming up in the next videos we're
247

247

00:09:42,350  -->  00:09:44,290
going to discuss a few more database
248

248

00:09:44,290  -->  00:09:46,180
concepts and i'll be going into more
249

249

00:09:46,180  -->  00:09:48,790
detail will be using practical examples
250

250

00:09:48,790  -->  00:09:50,500
and actually using the sqlite
251

251

00:09:50,500  -->  00:09:53,560
database now sqlite is designed to
252

252

00:09:53,560  -->  00:09:56,080
be embedded in applications and is
253

253

00:09:56,080  -->  00:09:57,860
actually a library that's called from
254

254

00:09:57,860  -->  00:10:00,860
our application code it does ship with a
255

255

00:10:00,860  -->  00:10:03,290
shell program that you can use to create
256

256

00:10:03,290  -->  00:10:05,980
databases in integrate though and
257

257

00:10:05,980  -->  00:10:07,420
we'll start up are using that to explore
258

258

00:10:07,420  -->  00:10:09,490
the commands available in sqlite
259

259

00:10:09,490  -->  00:10:11,830
now before we can use that shell program
260

260

00:10:11,830  -->  00:10:13,730
we need to make sure that it's available
261

261

00:10:13,730  -->  00:10:16,730
on your systems path so the next three
262

262

00:10:16,730  -->  00:10:18,070
videos are going to show you how to do
263

263

00:10:18,070  -->  00:10:21,130
that for windows mac and linux so
264

264

00:10:21,130  -->  00:10:22,420
there's one video for each operating
265

265

00:10:22,420  -->  00:10:24,350
system so follow the instructions in the
266

266

00:10:24,350  -->  00:10:26,230
relevant video for your operating system
267

267

00:10:26,230  -->  00:10:28,160
and you can skip over the videos that
268

268

00:10:28,160  -->  00:10:30,370
aren't relevant so i'll see you in one of
269

269

00:10:30,370  -->  00:10:35,910
those videos
