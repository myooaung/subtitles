WEBVTT
1
1

00:00:05.180  -->  00:00:09.060
so although we only included a single
statement in each of the try blocks that
2

2

00:00:09.060  -->  00:00:13.530
we've use so far we could see an example
of that on line 43 we've just got the
3

3

00:00:13.530  -->  00:00:17.940
return s nextInt you can
actually write many lines of code in
4

4

00:00:17.940  -->  00:00:22.950
a try and similarly the catch block
contains as much code it can contain as much
5

5

00:00:22.950  -->  00:00:27.990
code as you need to handle the exception
including attempting to recover from it
6

6

00:00:27.990  -->  00:00:32.060
if that's appropriate for that
particular bit of code but let's take a step
7

7

00:00:32.060  -->  00:00:37.480
back and answer question what is an
exception now the Java documentation defines
8

8

00:00:37.480  -->  00:00:41.940
an exception as an event which
occurred during the execution of a
9

9

00:00:41.940  -->  00:00:47.870
program that disrupts the normal flow of
the program's instructions so I guess
10

10

00:00:47.870  -->  00:00:51.570
that could be summarized more simply as
something went wrong somewhere which is
11

11

00:00:51.570  -->  00:00:55.830
possibly a more useful definition
because it leads more naturally to two
12

12

00:00:55.830  -->  00:01:00.550
very important questions a. what went
wrong? and b. what can we do about it?
13

13

00:01:01.650  -->  00:01:06.870
so exception and runtime exception are classes
defined in Java.lang and the
14

14

00:01:06.870  -->  00:01:11.270
different types of exceptions that can be
called a sub classes of one of these two
15

15

00:01:11.270  -->  00:01:17.290
exceptions so normally when catching an
exception you'd specified which subclass of
16

16

00:01:17.290  -->  00:01:22.220
the exception to catch and we saw that
earlier with this code on
17

17

00:01:22.220  -->  00:01:27.410
line 43 when we caught the input
mismatch exception with the invalid integer so
18

18

00:01:27.410  -->  00:01:30.890
we could just catch
exception but it's really a good idea to
19

19

00:01:30.890  -->  00:01:36.530
be more specific and catch the
specific exception rather just generalizing
20

20

00:01:36.530  -->  00:01:41.230
catching sort of the catch-all catch so
to speak with exception so in other
21

21

00:01:41.230  -->  00:01:46.840
words we could have change the code to
just be that and that will work fine but its very
22

22

00:01:46.840  -->  00:01:51.410
generic and we are not being specific enough
and it can be useful to actually be
23

23

00:01:51.410  -->  00:01:54.300
specific and you see I'll be talking
more about that
24

24

00:01:54.300  -->  00:02:00.590
later on so the type of exceptions thrown
answers the question what went wrong so that's
25

25

00:02:00.590  -->  00:02:04.690
the other reason one good reason to use that
and you can see on line 45 we know that at a
26

26

00:02:04.690  -->  00:02:07.700
glance oh ok there's an input
mismatch and that's because the
27

27

00:02:07.700  -->  00:02:15.160
exception is being named to really make us understand the type of errors that's been encountered in the
28

28

00:02:15.160  -->  00:02:19.500
program so when a code got an input
mismatch exception we can then decide
29

29

00:02:19.500  -->  00:02:23.250
what to do about it so as it
happened the code didn't do very much you
30

30

00:02:23.250  -->  00:02:27.220
know any invalid input just resulted in
zero being returned now this could be a
31

31

00:02:27.220  -->  00:02:31.580
reasonable response in some situations
but in others calling method might need to
32

32

00:02:31.580  -->  00:02:35.730
know if there was a problem rather than
effectively being told that the user
33

33

00:02:35.730  -->  00:02:40.150
entered the number 0 which is what we
did here so to let the calling method know
34

34

00:02:40.150  -->  00:02:43.470
there was problem the code could
have thrown the exception what that
35

35

00:02:43.470  -->  00:02:48.520
means is passing the exception back to
the calling method so once again these
36

36

00:02:48.520  -->  00:02:52.310
things are probably best explained
examples so far we've created a
37

37

00:02:52.310  -->  00:02:55.980
method to perform division and another
method to get the number from the user
38

38

00:02:55.980  -->  00:03:00.360
so by putting them both in the same program
we can look at how exceptions propagate
39

39

00:03:00.360  -->  00:03:04.570
after call stack and also explain what
that means what call stack actually means as well
40

40

00:03:04.570  -->  00:03:10.340
now we don't need the LBYL code and
will start without handling any exceptions
41

41

00:03:10.340  -->  00:03:14.390
just so we can see how Java handles
things the main method is gonna call
42

42

00:03:14.390  -->  00:03:21.510
divide which will call getInt twice to get
the two numbers X&Y so this is getting a bit messy so
43

43

00:03:21.510  -->  00:03:33.290
what I might do is create another bit of Java
class so will put a new one in and calls this example and
44

44

00:03:33.290  -->  00:03:39.980
lets type this in.....
45

45

00:03:41.700  -->  00:03:51.800
...and that
46

46

00:03:51.800  -->  00:03:55.470
method.....
47

47

00:03:58.870  -->  00:04:01.870
....
48

48

00:04:03.180  -->  00:04:16.910
....
49

49

00:04:16.910  -->  00:04:42.670
.....
50

50

00:04:42.670  -->  00:04:56.020
......pretty simple
program there
51

51

00:04:57.190  -->  00:05:00.970
...and run it first just to make sure that
works
52

52

00:05:06.760  -->  00:05:13.610
...so we do 10 second one 5 10/5 is 2 so x is 10 and y is 5 so that is
53

53

00:05:13.610  -->  00:05:22.790
obviously working correctly but if we run it again and do it in the other way round.... 5 divided by 10 is 0 again
54

54

00:05:22.790  -->  00:05:26.910
because we're using integer division here but
there are two exceptions that could
55

55

00:05:26.910  -->  00:05:33.300
happen in this program so just demonstrate that firstly if we just try and
56

56

00:05:33.300  -->  00:05:41.330
divide by 0 so....notice
the error their is arithmetic exception
57

57

00:05:41.330  -->  00:05:49.870
divide by 0 and if we run again and instead of a
number put something else we get a
58

58

00:05:49.870  -->  00:05:54.490
different exception we get an input
mismatch exception so as expected
59

59

00:05:54.490  -->  00:05:58.470
we got an error because we saw that in the
previous video and Java automatically
60

60

00:05:58.470  -->  00:06:03.730
prints a stack trace which is showing
the call stack so the call stack is a
61

61

00:06:03.730  -->  00:06:08.390
list of all the methods all the method
calls at any particular point in a
62

62

00:06:08.390  -->  00:06:13.350
program's execution now in this case it's
all the method calls at the point where
63

63

00:06:13.350  -->  00:06:18.190
the program crashed so each thread of
execution has its own call stack and the
64

64

00:06:18.190  -->  00:06:23.350
thread is shown as the first line of the
stack trace and here its our main thread
65

65

00:06:23.350  -->  00:06:28.330
so every time a new method is called it's
actually placed onto the stack and when a
66

66

00:06:28.330  -->  00:06:33.480
method returns its then removed from the
stack so here we can see that the
67

67

00:06:33.480  -->  00:06:35.320
exception happened in line
68

68

00:06:35.320  -->  00:06:42.140
864 in the throw for method of Java.util.Scanner throwfor I should say so we will have a
69

69

00:06:42.140  -->  00:06:46.840
look at throwfor in a minute but our code didn't call it so it
doesn't make much sense to us yet the
70

70

00:06:46.840  -->  00:06:51.330
next item on the stack is scanner.next we didn't also call that either directly
71

71

00:06:51.330  -->  00:06:56.300
so in fact the best approach to make sense
of these traces is generally to start at
72

72

00:06:56.300  -->  00:07:02.190
the bottom and then work back up so our first code which is on line 11 is the first
73

73

00:07:02.190  -->  00:07:06.430
item relates to our Code of so its obviously is the com.timbuchalka.example.main
74

74

00:07:06.430  -->  00:07:14.060
so line 11 in example is the first item
that relates to our code and line 11 is
75

75

00:07:14.060  -->  00:07:17.250
where the divide method was called and the
trace shows that it
76

76

00:07:17.250  -->  00:07:22.400
happened in Example.java so the next
entry is line 16
77

77

00:07:22.400  -->  00:07:26.030
in example.divide and that's where getInt was called and then the next one
78

78

00:07:26.030  -->  00:07:31.460
after that is on line 25 of getInt so
normally it would stop there because all the
79

79

00:07:31.460  -->  00:07:36.630
entries above that are also out of our
code in Java.util.scanner
80

80

00:07:36.630  -->  00:07:41.410
class now we know that our attempt to
get an integer from the keyboard failed
81

81

00:07:41.410  -->  00:07:44.110
and we should do something to prevent
that error from crashing the program
82

82

00:07:44.110  -->  00:07:47.500
but carrying one through the stack at
the moment because it's useful to see
83

83

00:07:47.500  -->  00:07:52.530
just how to trace errors through different
classes and packages so up until this
84

84

00:07:52.530  -->  00:07:57.620
point IntelliJ has created links to the
line numbers where they appear in the code in
85

85

00:07:57.620  -->  00:08:01.830
the editor so the links appear in blue as you
can see on the screen there in the stack
86

86

00:08:01.830  -->  00:08:05.190
trace and you can click it to be taken to that
line of code so for example we can just
87

87

00:08:05.190  -->  00:08:11.860
click on this one and we get taken to that line of code you can see the cursor moved and likewise if click here we get back to
88

88

00:08:11.860  -->  00:08:17.020
line 11 so once the trace leaves that code
they may still be links but they are in gray
89

89

00:08:17.020  -->  00:08:21.800
as you can see the first one where it says Scanner.java.2076 its in gray rather than
90

90

00:08:21.800  -->  00:08:25.630
the blue and that is of course if
you using these IntelliJ them it might be
91

91

00:08:25.630  -->  00:08:31.690
different if you themed your IntelliJ
installation separately so next we have
92

92

00:08:31.690  -->  00:08:43.240
looking up the call stack on line 2076 Scanner.java
so click on the link for that and I'll just move this over
93

93

00:08:43.240  -->  00:08:51.220
so we can see a little bit more fully
and IntelliJ has helpfully loaded the sources scanner and has taken us
94

94

00:08:51.220  -->  00:08:56.720
to that line we could also control click
on the call or command click to next int
95

95

00:08:56.720  -->  00:09:02.020
on line 25 back in the code to do the same
thing so the scanner nextInt method has
96

96

00:09:02.020  -->  00:09:05.810
been overloaded which is why their seems
to be 2 calls in the stack trace you can
97

97

00:09:05.810  -->  00:09:12.190
see these calls here 2076 and 2117 and our calls are passed on to
98

98

00:09:12.190  -->  00:09:17.180
nextInt(defaultRadix) as you can see their so we
click on that
99

99

00:09:17.180  -->  00:09:24.940
again and do a command click and do a control if your on a linux or windows that takes us to that method
100

100

00:09:24.940  -->  00:09:31.610
and we get to the overloaded next int
method so that entries is call to next as you can see and
101

101

00:09:31.610  -->  00:09:35.250
looking up here the next call then goes
to scanner.java
102

102

00:09:35.250  -->  00:09:42.350
line 1485 so if you wanted to you can come back here click on the
scanner.java 2117 and notice the input
103

103

00:09:42.350  -->  00:09:48.790
mismatch exception that gets thrown and then
come back here to next ther is a throw for
104

104

00:09:48.790  -->  00:09:52.260
there and that's the code that's been
executed here so we can click on that then
105

105

00:09:52.260  -->  00:09:57.050
line 864 following that through and
ultimately the input mismatch exception
106

106

00:09:57.050  -->  00:10:03.660
on line 864 is we're it actually throws a
new input mismatch exception so quite
107

107

00:10:03.660  -->  00:10:07.330
often the exception will be thrown from
the method that had the problem but as
108

108

00:10:07.330  -->  00:10:13.040
you can see the scanner class uses the throwfor method to throw either a
109

109

00:10:13.040  -->  00:10:18.600
mismatch exception or a np such element exception as you can
110

110

00:10:18.600  -->  00:10:21.620
see here so depending on what the
problem was
111

111

00:10:21.620  -->  00:10:26.080
it's thrown one of two different
exceptions so we are going to be talking more
112

112

00:10:26.080  -->  00:10:30.020
about throwing exceptions later but for now I'm gonna concentrate what happens
113

113

00:10:30.020  -->  00:10:34.030
when once thrown and how to handle
them so I said that exceptions are
114

114

00:10:34.030  -->  00:10:39.030
subclasses of the exception class and
exception itself actually extends
115

115

00:10:39.030  -->  00:10:43.470
throwable so will trace the classes back
in a minute to see this but at this point
116

116

00:10:43.470  -->  00:10:47.590
you just really need to know that the
throwable constructor fills in the stack
117

117

00:10:47.590  -->  00:10:49.830
trace for the exception so line
118

118

00:10:49.830  -->  00:10:56.010
864 that you can see on the screen for Scanner.java
creates a new input mismatch exception
119

119

00:10:56.010  -->  00:11:01.310
object that contains the current stack
trace so when the exception itself has
120

120

00:11:01.310  -->  00:11:06.590
thrown the Java Runtime then looks to
see what you know what can handle it so
121

121

00:11:06.590  -->  00:11:11.330
it does that by working it back up the
call stack so each method on the stack gets
122

122

00:11:11.330  -->  00:11:13.590
the exception if it doesn't handle it
123

123

00:11:13.590  -->  00:11:17.370
than the exception gets passed on to the
previous method on the stack and so on
124

124

00:11:17.370  -->  00:11:23.060
so the exception is set to propagate the
call stack it keeps getting passed to
125

125

00:11:23.060  -->  00:11:27.470
the calling methods until their is one that
actually can handle the exception so
126

126

00:11:27.470  -->  00:11:29.620
looking at the way the stack trace is
printed
127

127

00:11:29.620  -->  00:11:33.520
it might make more sense to talk
about propagating down the call stack
128

128

00:11:33.520  -->  00:11:37.960
but stacks tend to be implemented growing
downwards so we talked about going back
129

129

00:11:37.960  -->  00:11:39.750
up the stack
130

130

00:11:39.750  -->  00:11:43.770
eventually if nothing handles the
exception in the the main Java entry
131

131

00:11:43.770  -->  00:11:47.580
point just prints the stack trace and
the Java Runtime terminates and that's
132

132

00:11:47.580  -->  00:11:53.460
what actually happened here to the right hand side of the screen so in a minute we are gonna modify the program to
133

133

00:11:53.460  -->  00:11:57.110
catch the exception but first let's
continue backtracking to see the
134

134

00:11:57.110  -->  00:12:02.520
exception class hierarchy so from line 864
of the scanner class we are gonna click on
135

135

00:12:02.520  -->  00:12:06.600
input mismatch exception so doing command
click but do control click if necessary
136

136

00:12:06.600  -->  00:12:11.790
click on that and you see we are now
in the input mismatch exception constructor
137

137

00:12:11.790  -->  00:12:17.930
and as classes go here you can see its pretty
basic theirs 2 constructors and each one just delegates
138

138

00:12:17.930  -->  00:12:21.690
immediately to the super but if we control
click on super
139

139

00:12:23.980  -->  00:12:28.040
get to the base class no such element
exception it's just a sparse and in fact
140

140

00:12:28.040  -->  00:12:30.400
exception objects are generally like
this
141

141

00:12:30.400  -->  00:12:34.970
the subclasses exists to provide more
granularity so that code can check the
142

142

00:12:34.970  -->  00:12:39.320
different types of errors by catching
the subclasses so we saw no such element
143

143

00:12:39.320  -->  00:12:45.620
exception before its the other exception that the throw for method could throw so input mismatch exception
144

144

00:12:45.620  -->  00:12:50.420
extends no such element exception and
exists purely to allow the exception
145

145

00:12:50.420  -->  00:12:54.080
handler to differentiate between the
scanner running out of input and the
146

146

00:12:54.080  -->  00:12:57.670
input being invalid so we can cause a no such
147

147

00:12:57.670  -->  00:13:02.080
element exception in our program but this
video is getting a bit long so will start at looking at
148

148

00:13:02.080  -->  00:13:03.220
doing that in the next video
