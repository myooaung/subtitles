WEBVTT
1
1

00:00:04.730  -->  00:00:07.100
alright so in the last video we went
2

2

00:00:07.100  -->  00:00:09.440
through and figured out the sql
3

3

00:00:09.440  -->  00:00:12.590
queries we needed to do to test out the
4

4

00:00:12.590  -->  00:00:16.580
join that we set up for determining the
5

5

00:00:16.580  -->  00:00:19.340
albums for a given artists we went
6

6

00:00:19.340  -->  00:00:21.470
through did and three test cases so now that
7

7

00:00:21.470  -->  00:00:23.570
we've done that we want to go back to
8

8

00:00:23.570  -->  00:00:27.100
intellij and code up our method and again
9

9

00:00:27.100  -->  00:00:28.510
doing it this way makes it a lot easier
10

10

00:00:28.510  -->  00:00:30.850
because we now know this sql we want
11

11

00:00:30.850  -->  00:00:33.280
to use because we've tested that and we
12

12

00:00:33.280  -->  00:00:34.690
really just need to convert that to java
13

13

00:00:34.690  -->  00:00:36.560
code so we're not going to have to worry
14

14

00:00:36.560  -->  00:00:39.190
that the sql code is correct or not
15

15

00:00:39.190  -->  00:00:41.570
because we tested that works then a
that the sql code is correct or not
16

16

00:00:41.570  -->  00:00:42.890
potential problem will have as if we
17

17

00:00:42.890  -->  00:00:44.750
made a typo of something of that nature
18

18

00:00:44.750  -->  00:00:48.770
ok so back to tell intellij and into data source
19

19

00:00:48.770  -->  00:00:53.140
java and let's add it at the bottom of
20

20

00:00:53.140  -->  00:00:57.070
that file this time we're going to need 2
21

21

00:00:57.070  -->  00:00:59.050
parameters one for the name of the
22

22

00:00:59.050  -->  00:01:01.120
artist and one for the sort order
23

23

00:01:01.120  -->  00:01:03.920
alright so let's start of the code so
24

24

00:01:03.920  -->  00:01:05.120
it's going to be public...
25

25

00:01:05.120  -->  00:01:50.450
...
26

26

00:01:50.450  -->  00:01:51.500
what we're doing is we're building up
27

27

00:01:51.500  -->  00:01:54.740
the code and would be easier if I just
28

28

00:01:54.740  -->  00:01:57.800
copy this line from the last to select
29

29

00:01:57.800  -->  00:02:00.560
that we created the last line of sql
30

30

00:02:00.560  -->  00:02:02.540
code i'm going to paste that in there so
31

31

00:02:02.540  -->  00:02:03.560
you can actually see what we're trying
32

32

00:02:03.560  -->  00:02:06.140
to build up here makes it easier so
33

33

00:02:06.140  -->  00:02:09.050
we've done so far select space albums we
34

34

00:02:09.050  -->  00:02:13.840
need to put.....
35

35

00:02:13.840  -->  00:02:20.620
...
36

36

00:02:20.620  -->  00:02:25.310
....
37

37

00:02:25.310  -->  00:02:52.510
...
38

38

00:02:52.510  -->  00:02:56.510
..
39

39

00:02:56.510  -->  00:03:16.480
...
40

40

00:03:16.480  -->  00:03:23.870
....
41

41

00:03:23.870  -->  00:04:58.470
...
42

42

00:04:58.470  -->  00:04:59.970
so basically putting the artist name in
43

43

00:04:59.970  -->  00:05:03.690
double quotes alright so far so good now
44

44

00:05:03.690  -->  00:05:06.440
we need to add the code to work on the
45

45

00:05:06.440  -->  00:05:08.310
sort order so...
46

46

00:05:08.310  -->  00:05:47.460
...
47

47

00:05:47.460  -->  00:05:50.660
..
48

48

00:05:50.660  -->  00:05:58.380
...
49

49

00:05:58.380  -->  00:05:59.760
....
50

50

00:05:59.760  -->  00:07:42.910
...
51

51

00:07:42.910  -->  00:07:47.960
..
52

52

00:07:47.960  -->  00:07:53.180
...
53

53

00:07:53.180  -->  00:07:56.150
ok so we've built up the query string
54

54

00:07:56.150  -->  00:07:59.120
and then we actually run the query and
55

55

00:07:59.120  -->  00:08:00.650
as I mentioned in this case we're
56

56

00:08:00.650  -->  00:08:02.360
returning a list of string objects which
57

57

00:08:02.360  -->  00:08:04.460
are the album names rather than the full
58

58

00:08:04.460  -->  00:08:06.770
record since we only asked for the name
59

59

00:08:06.770  -->  00:08:09.200
column now because of that notice that
60

60

00:08:09.200  -->  00:08:11.480
we're hard-coding rather this column
61

61

00:08:11.480  -->  00:08:14.840
index on line 149 when we loop through
62

62

00:08:14.840  -->  00:08:17.000
the results and remember that I said
63

63

00:08:17.000  -->  00:08:19.250
when using the result set getter methods
64

64

00:08:19.250  -->  00:08:21.620
the index corresponds to the index of a
65

65

00:08:21.620  -->  00:08:24.740
column in the result set not the index
66

66

00:08:24.740  -->  00:08:27.440
of a column in the table in our query
67

67

00:08:27.440  -->  00:08:29.360
only returns the album name and so
68

68

00:08:29.360  -->  00:08:31.100
there's only one column and remember
69

69

00:08:31.100  -->  00:08:32.930
that these indices the count starts a
70

70

00:08:32.930  -->  00:08:35.510
1 and not 0 for that reason we can
71

71

00:08:35.510  -->  00:08:37.460
confidently use one in this case because
72

72

00:08:37.460  -->  00:08:39.680
it's always going to be the same because
73

73

00:08:39.680  -->  00:08:42.140
we are only returning just the one column in
74

74

00:08:42.140  -->  00:08:45.290
the query and again i printed out
75

75

00:08:45.290  -->  00:08:49.310
the SQL statement here on line 142 in
76

76

00:08:49.310  -->  00:08:50.690
case we haven't built the statement
77

77

00:08:50.690  -->  00:08:52.280
correctly or made the typo or something
78

78

00:08:52.280  -->  00:08:54.860
along those lines let's now test
79

79

00:08:54.860  -->  00:08:57.650
this out let's go ahead and call
80

80

00:08:57.650  -->  00:08:59.450
this new method from the main method and
81

81

00:08:59.450  -->  00:09:02.630
print the result and see if that works i'm
82

82

00:09:02.630  -->  00:09:04.010
going to add it before the data close
83

83

00:09:04.010  -->  00:09:05.570
so leave the other code in there
84

84

00:09:05.570  -->  00:09:12.500
we put list....
85

85

00:09:12.500  -->  00:09:46.490
...
86

86

00:09:46.490  -->  00:09:50.750
ok so let's run this and see if we do
87

87

00:09:50.750  -->  00:09:52.400
get the three albums that we think
88

88

00:09:52.400  -->  00:09:56.920
we should get for Iron Maiden
89

89

00:09:56.920  -->  00:10:00.040
and there's our select statement select albums.
90

90

00:10:00.040  -->  00:10:01.570
name from albums inner join
91

91

00:10:01.570  -->  00:10:05.590
...
92

92

00:10:05.590  -->  00:10:08.290
...where....
93

93

00:10:08.290  -->  00:10:14.110
...
94

94

00:10:14.110  -->  00:10:15.460
pretty good and they can see below that
95

95

00:10:15.460  -->  00:10:16.870
we've got those three albums which were
96

96

00:10:16.870  -->  00:10:19.720
expecting to get for Iron Maiden
97

97

00:10:19.720  -->  00:10:22.330
alright so you can see now that we did
98

98

00:10:22.330  -->  00:10:24.700
build up a long query statement and
99

99

00:10:24.700  -->  00:10:27.340
looking at that most of the statement is
100

100

00:10:27.340  -->  00:10:28.270
static
101

101

00:10:28.270  -->  00:10:30.010
it's really only the artists name and
102

102

00:10:30.010  -->  00:10:31.900
sort order that may be different each
103

103

00:10:31.900  -->  00:10:34.510
time the method runs so rather than
104

104

00:10:34.510  -->  00:10:35.740
building the query statement from
105

105

00:10:35.740  -->  00:10:38.530
scratch each time the method execute we
106

106

00:10:38.530  -->  00:10:40.510
can define bits of it as constants so
107

107

00:10:40.510  -->  00:10:42.880
let's go and do that going to
108

108

00:10:42.880  -->  00:10:44.620
add that to the top of the datasource
109

109

00:10:44.620  -->  00:10:51.700
just below the other constant set up
110

110

00:10:51.700  -->  00:10:54.700
and will put...
111

111

00:10:54.700  -->  00:12:17.410
...
112

112

00:12:17.410  -->  00:12:24.450
..
113

113

00:12:24.450  -->  00:13:03.850
...
114

114

00:13:03.850  -->  00:13:08.670
ok now we could have used string builder
115

115

00:13:08.670  -->  00:13:10.800
with a bunch of chain append calls
116

116

00:13:10.800  -->  00:13:12.870
similar to what we did in the method but
117

117

00:13:12.870  -->  00:13:14.580
since the concatenation will only take
118

118

00:13:14.580  -->  00:13:17.010
place once when the data source instance
119

119

00:13:17.010  -->  00:13:18.270
is created
120

120

00:13:18.270  -->  00:13:19.720
we're going to stick with concatenations
121

121

00:13:19.720  -->  00:13:22.740
often a data source class like data source is
122

122

00:13:22.740  -->  00:13:24.750
used as a singleton and that would mean
123

123

00:13:24.750  -->  00:13:26.470
there would only ever be one instance of
124

124

00:13:26.470  -->  00:13:28.890
the class and we'll see how this works
125

125

00:13:28.890  -->  00:13:30.690
when we use our model from within a
126

126

00:13:30.690  -->  00:13:33.810
graphical user interface later in this
127

127

00:13:33.810  -->  00:13:36.510
section i'm sure you probably agree by
128

128

00:13:36.510  -->  00:13:38.230
looking at that these strings look pretty
129

129

00:13:38.230  -->  00:13:39.000
ugly
130

130

00:13:39.000  -->  00:13:40.860
so if we ever have to change the name of
131

131

00:13:40.860  -->  00:13:42.750
a table or column will be glad we didn't
132

132

00:13:42.750  -->  00:13:44.940
hard code any names we really only
133

133

00:13:44.940  -->  00:13:48.180
have to type these strings in once and
134

134

00:13:48.180  -->  00:13:49.380
hopefully now you can start imagining
135

135

00:13:49.380  -->  00:13:50.790
how you might end up with lots of
136

136

00:13:50.790  -->  00:13:52.920
constants which is why they often be put
137

137

00:13:52.920  -->  00:13:54.390
into their own classes
138

138

00:13:54.390  -->  00:13:56.920
alright so let's now go back and modify
139

139

00:13:56.920  -->  00:14:00.750
our code to use the constants so i'm
140

140

00:14:00.750  -->  00:14:02.520
going to go back to our query
141

141

00:14:02.520  -->  00:14:04.890
method our query
142

142

00:14:04.890  -->  00:14:07.050
albums for artists and what we're going
143

143

00:14:07.050  -->  00:14:10.380
to do is just to delete this comment
144

144

00:14:10.380  -->  00:14:13.080
there and these stringbuilder is
145

145

00:14:13.080  -->  00:14:14.110
actually gonna be a new stringbuilder
146

146

00:14:14.110  -->  00:14:16.740
...
147

147

00:14:16.740  -->  00:15:09.060
......
148

148

00:15:09.060  -->  00:15:11.350
....so I made this
149

149

00:15:11.350  -->  00:15:13.140
method as you can see a lot more concise
150

150

00:15:13.140  -->  00:15:15.870
and I think better and easier to
151

151

00:15:15.870  -->  00:15:16.770
read
152

152

00:15:16.770  -->  00:15:18.610
let's just run this to make sure that
153

153

00:15:18.610  -->  00:15:24.120
still works
154

154

00:15:24.120  -->  00:15:26.430
ok you can see that we still got
155

155

00:15:26.430  -->  00:15:28.890
pretty much the same or identical
156

156

00:15:28.890  -->  00:15:31.320
sql statement and the three
157

157

00:15:31.320  -->  00:15:34.830
albums have come back okay now that we've
158

158

00:15:34.830  -->  00:15:36.370
done that I guess we could looking at
159

159

00:15:36.370  -->  00:15:39.180
coming back to the data source . java we
160

160

00:15:39.180  -->  00:15:41.230
could do a similar thing for query
161

161

00:15:41.230  -->  00:15:43.660
artists and make most of the
162

162

00:15:43.660  -->  00:15:46.420
string that we're building up the string
163

163

00:15:46.420  -->  00:15:48.630
builder a constant so i'll leave that
164

164

00:15:48.630  -->  00:15:50.580
as an exercise for you is based on
165

165

00:15:50.580  -->  00:15:52.080
what we've done here with the query
166

166

00:15:52.080  -->  00:15:54.300
albums for artists again we made the method
167

167

00:15:54.300  -->  00:15:56.640
a lot more concise and I think better so
168

168

00:15:56.640  -->  00:15:58.440
it might be a good challenge for you just
169

169

00:15:58.440  -->  00:15:59.760
to actually do that do the same thing
170

170

00:15:59.760  -->  00:16:01.540
with constants for the query artist
171

171

00:16:01.540  -->  00:16:04.320
method alright I'm going to finish the
172

172

00:16:04.320  -->  00:16:06.490
video here now in the next video we'll
173

173

00:16:06.490  -->  00:16:07.950
just discuss how we're going to redefine
174

174

00:16:07.950  -->  00:16:09.990
the query albums for artists method in a
175

175

00:16:09.990  -->  00:16:12.570
bit later and also we will start
176

176

00:16:12.570  -->  00:16:14.860
testing this out or run it with the
177

177

00:16:14.860  -->  00:16:17.370
the other two queries that we set up the
178

178

00:16:17.370  -->  00:16:18.490
one for Pink Floyd
179

179

00:16:18.490  -->  00:16:20.680
and also the one for carole king will do
180

180

00:16:20.680  -->  00:16:26.760
that in the next video
