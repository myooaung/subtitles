1
1

00:00:04,650  -->  00:00:09,910
so just before we continue on I just wanted
to go back to some of the things that we
2

2

00:00:09,910  -->  00:00:14,770
use that we haven't seen before in
the course firstly the to do items we
3

3

00:00:14,770  -->  00:00:19,480
used this fx collection.observable array list and the reason
4

4

00:00:19,480  -->  00:00:23,750
that we're using an observable array list comes back to our
5

5

00:00:23,750  -->  00:00:28,120
controller and we were setting up our
to do list view
6

6

00:00:28,120  -->  00:00:34,080
and coming down here you can see to do list view
scrolling down the set all command where
7

7

00:00:34,080  -->  00:00:37,080
we are setting our to do items if we go in there
and have a look
8

8

00:00:37,580  -->  00:00:41,470
you could see that talks about the
observable list an adding all element so we
9

9

00:00:41,470  -->  00:00:46,100
need to have an array in a format with
that used the observable ArrayList so
10

10

00:00:46,100  -->  00:00:51,180
that's why we've created in our to do
data a similar thing so we used the
11

11

00:00:51,180  -->  00:00:56,360
fx collections.observable array list to
create that from scratch and then we
12

12

00:00:56,360  -->  00:01:01,760
append our to do items from there and in
addition we've used a couple of things
13

13

00:01:01,760  -->  00:01:05,740
that look a little bit different we've used path and files and we haven't
14

14

00:01:05,740  -->  00:01:10,530
seen those before and you may have noticed
when we're importing that it was java.
15

15

00:01:10,530  -->  00:01:16,410
nio you can see nio.file.files and then .path.paths etc
16

16

00:01:16,410  -->  00:01:20,860
and what they are if we just go back
to a browser and I have opened up the package
17

17

00:01:20,860  -->  00:01:26,120
java nio defines buffers which containers
for data and provides an overview of other
18

18

00:01:26,120  -->  00:01:32,330
nio packages and essentially down here you
can see the package java.nio defines
19

19

00:01:32,330  -->  00:01:36,870
buffers which containers for data and
provides an overview which I've just said and a
20

20

00:01:36,870  -->  00:01:42,320
central abstractions are buffers
charset channels and selectors and
21

21

00:01:42,320  -->  00:01:48,150
selection key so it's an alternative way
to access data that is a more recent addition to
22

22

00:01:48,150  -->  00:01:53,910
the Java language so we are using that just to
be a little bit different to what you
23

23

00:01:53,910  -->  00:01:58,070
saw in the files or the input or output section of the course but the
24

24

00:01:58,070  -->  00:02:01,790
bottom line is it's pretty similar
and I think this far into the course a lot
25

25

00:02:01,790  -->  00:02:05,650
of that should be pretty readable to you
so we're creating that observable
26

26

00:02:05,650  -->  00:02:10,280
array list as I mentioned because ultimately
from the javafx point of view we needed in
27

27

00:02:10,280  -->  00:02:12,550
that format and fx collections
28

28

00:02:12,550  -->  00:02:16,910
that package enables us to have an
ArrayList in that format so we created
29

29

00:02:16,910  -->  00:02:21,910
that and were just using this java nio
functionality with path to get the
30

30

00:02:21,910  -->  00:02:25,240
path to the file too load and then
using files.newBufferedReader
31

31

00:02:25,240  -->  00:02:28,790
which is pretty self explanatory what
it's doing its creating new
32

32

00:02:28,790  -->  00:02:34,560
BufferedReader for that particular file
and similar also when we're writing as well
33

33

00:02:34,560  -->  00:02:40,640
similar principle using that buffered writer this time and using files.newBuffered
34

34

00:02:40,640  -->  00:02:46,060
writer to get it in that format so it should be
pretty simple similar to what you've seen in
35

35

00:02:46,060  -->  00:02:48,620
the past but just wanted to point those
things and in case you're wondering why
36

36

00:02:48,620  -->  00:02:52,960
we've done that and as I mentioned we are using a delimiter.tabdelimeter when we
37

37

00:02:52,960  -->  00:02:57,950
are restoring an loading the values
you can see on line 52 and here on line
38

38

00:02:57,950  -->  00:03:02,060
78 we really wouldn't do that
in a real world application we would probably
39

39

00:03:02,060  -->  00:03:07,590
stored the items in XML format or perhaps even a
database if we though theirs going to be
40

40

00:03:07,590  -->  00:03:11,610
a lot of records but the purposes of
this application we are creating it's just
41

41

00:03:11,610  -->  00:03:16,610
fine to do it the way we have and what
we're doing now is we talked about a
42

42

00:03:16,610  -->  00:03:20,420
singleton and how we have to get access
to the data so what we gonna do is
43

43

00:03:20,420  -->  00:03:26,230
switch over the main Java class so lets do that
44

44

00:03:26,230  -->  00:03:31,560
so what we want their is we want
to add a stop method to our main class
45

45

00:03:31,560  -->  00:03:36,630
and this method runs when the user exits
the application usually by closing the main window
46

46

00:03:36,630  -->  00:03:43,420
so we want to override that so....you can see that has come
47

47

00:03:43,420  -->  00:03:49,830
from JavaFX.application and what we want to do in their is we
48

48

00:03:49,830  -->  00:03:54,720
want to try and store our items so we need to run this once and we are going to store the items
49

49

00:03:54,720  -->  00:03:59,950
that are hard coded in our controller so looking at our controller again we got all of these
50

50

00:03:59,950  -->  00:04:04,390
items here that are hard-coded we're
going to run this once closed down the
51

51

00:04:04,390  -->  00:04:09,230
program which will then invoke the stop
method in main.java and we go to write the
52

52

00:04:09,230  -->  00:04:14,380
data out so that our data is now in a text
file which ultimately we can start
53

53

00:04:14,380  -->  00:04:23,060
accessing in future videos so we're going to
delete the super and we need
54

54

00:04:23,060  -->  00:04:25,200
to put it around a try catch block
55

55

00:04:25,200  -->  00:04:29,690
so....
56

56

00:04:31,250  -->  00:04:41,590
....
57

57

00:04:41,590  -->  00:04:50,930
....so thats get our singleton instance and from their we put....
58

58

00:04:50,930  -->  00:04:55,780
...
59

59

00:04:55,780  -->  00:05:00,090
...so that's going to
save it as I mentioned
60

60

00:05:00,090  -->  00:05:05,910
to a text file that's when we close down
the program for the first time and what we want
61

61

00:05:05,910  -->  00:05:08,050
to do is temporarily
62

62

00:05:08,050  -->  00:05:14,880
in our initialize method this is in our controller we want to
temporarily get it to call so that it sets the
63

63

00:05:14,880  -->  00:05:18,620
the items at that point because
remember we're not creating this file
64

64

00:05:18,620  -->  00:05:22,400
once ultimately we are gonna be creating
this file every time we close the
65

65

00:05:22,400  -->  00:05:25,900
application is gonna save all the
changes to the files so we want one
66

66

00:05:25,900  -->  00:05:30,340
mechanism now in our initialize method that
is going to create the file just once a
67

67

00:05:30,340  -->  00:05:34,590
temporary bit of code so that we can
access it in a program but from then
68

68

00:05:34,590  -->  00:05:38,600
on after we've created it we are gonna remove that line of code we'll leave it in here in the
69

69

00:05:38,600  -->  00:05:43,660
stop method because every time we stop the
application we want it to store our items so back
70

70

00:05:43,660  -->  00:05:47,590
to the controller and the initialize
method and just after adding the last item
71

71

00:05:47,590  -->  00:05:53,030
after these five items we are going to
just add that temporary bit of code....
72

72

00:05:53,030  -->  00:06:01,430
....
73

73

00:06:01,430  -->  00:06:04,820
...
74

74

00:06:04,820  -->  00:06:12,130
...so that will create the file for us so
we if we run this we should hopefully see the file get
75

75

00:06:12,130  -->  00:06:15,130
created on the left hand side
76

76

00:06:15,800  -->  00:06:22,850
and we will just run through their and check that its working seems to be working so we will close it down and you can see the file pop up
77

77

00:06:22,850  -->  00:06:28,440
their todolistitems.txt and if have
a look at that you can see we got our data and you
78

78

00:06:28,440  -->  00:06:32,570
can see theirs tabs separating them we'll
probably you can't see these tabs you can't
79

79

00:06:32,570  -->  00:06:35,960
really see the tabs easily but there is a
tabs in each of the key fields
80

80

00:06:35,960  -->  00:06:41,090
their and it varies depending on how
many characters were in each string
81

81

00:06:41,090  -->  00:06:44,650
that has been recorded that's why it looks
out of place but in terms of
82

82

00:06:44,650  -->  00:06:48,440
readability when we read this back in it
will be read and just fine because it
83

83

00:06:48,440  -->  00:06:51,680
will recognize that these things here
are actual tabs
84

84

00:06:52,520  -->  00:06:59,120
ok so that's working at this point we've now got that file that contains our hard-coded items and
85

85

00:06:59,120  -->  00:07:03,190
incidentally we didn't specify
directory for the file so you can see that
86

86

00:07:03,190  -->  00:07:09,000
it just stored the file in the root
folder for our IntelliJ project and if
87

87

00:07:09,000  -->  00:07:13,070
we wanted to we could just have a look
at that in our finder...and you can
88

88

00:07:13,070  -->  00:07:17,000
see that the file has been
created in the root level for our
89

89

00:07:17,000  -->  00:07:22,470
particular IntelliJ project ok so that's
good so now we're gonna change the
90

90

00:07:22,470  -->  00:07:26,460
code so that we load our to do
list items from that file each time the
91

91

00:07:26,460  -->  00:07:30,160
application starts rather than hard
coding them in the controllers
92

92

00:07:30,160  -->  00:07:34,770
initialization method so ultimately
we are going to remove these from our initialize
93

93

00:07:34,770  -->  00:07:41,970
method so what we are gonna do now is come back here to our main.java and we need to override another method we are
94

94

00:07:41,970  -->  00:07:46,090
gonna override the init method which of course
ultimately comes from the application
95

95

00:07:46,090  -->  00:07:54,250
class so lets go ahead and do that so I'll just go below the stop and we'll override init and in their what we are going
96

96

00:07:54,250  -->  00:07:58,250
to do is do a similar thing we are going to
do to try catch so what I might do is
97

97

00:07:58,250  -->  00:08:03,870
copy this code in our stop method and
change a little bit of it and paste it into
98

98

00:08:03,870  -->  00:08:08,340
the init overriding the Super which we
don't need so instead of the store to do
99

99

00:08:08,340  -->  00:08:13,270
items the init we're going to use or called
rather the load to-do items so change that
100

100

00:08:13,270  -->  00:08:20,150
to load so it loads our to do items from the text
file that we created and everything else
101

101

00:08:20,150  -->  00:08:25,860
we can leave just as it is so that is going to be called automatically by Java fx when we start
102

102

00:08:25,860  -->  00:08:31,460
our application of course all it does is load the data in to the to do data instance
103

103

00:08:33,090  -->  00:08:36,810
so now we've done that I'm gonna close down the run window we go back to our controller
104

104

00:08:36,810  -->  00:08:41,220
class what we can do now is removed all the code that has got to do with creating and
105

105

00:08:41,220  -->  00:08:45,080
storing the hard coded items and in
addition we are going to remove this temporary
106

106

00:08:45,080  -->  00:08:51,770
line as well as I'm just going to
comment out all this out right up to and
107

107

00:08:51,770  -->  00:08:54,920
including the set to-do items which we
don't need to be in initialize anymore
108

108

00:08:54,920  -->  00:08:58,560
that all been commented out and we shouldn't
have any other errors and we still wanna
109

109

00:08:58,560  -->  00:09:04,540
keep these other bits and pieces here we still want the set all for example to set our items
110

110

00:09:04,540  -->  00:09:08,530
but instead of to-do items we need to
change this and what that should be
111

111

00:09:08,530  -->  00:09:14,390
calling our singleton so....
112

112

00:09:14,890  -->  00:09:22,750
...
113

113

00:09:22,750  -->  00:09:27,150
...and everything else should
pretty much be the same we've commented out
114

114

00:09:27,150  -->  00:09:30,980
the  hard coded to do items because of
course again they are coming out of the
115

115

00:09:30,980  -->  00:09:37,660
file and now we've change it so its retrieving the
data that was coming out of the file
116

116

00:09:37,660  -->  00:09:42,940
that's currently in our to do data singleton so that's good to go
117

117

00:09:42,940  -->  00:09:52,240
as well so going back to the to do data class because what we can do now is we have this method here the set to do items
118

118

00:09:52,240  -->  00:09:56,430
we can now remove this and you can see that it is no longer been used because that was
119

119

00:09:56,430  -->  00:10:00,420
just a temporary things that enabled us
to sort of test this out why we're
120

120

00:10:00,420  -->  00:10:03,950
getting to the stage of finishing the
code off so we can just comment that
121

121

00:10:03,950  -->  00:10:06,450
out now because we won't be using that anymore
122

122

00:10:06,450  -->  00:10:10,830
again we only need that so the controller could store the hard coded items so lets now run
123

123

00:10:10,830  -->  00:10:13,600
this we should find that
everything will work as it did before
124

124

00:10:13,600  -->  00:10:21,200
but now we're getting the data from the
file so let's do that and we we're now getting
125

125

00:10:21,200  -->  00:10:27,060
the data from the file and everything seems
to be working fine but interestingly
126

126

00:10:27,060  -->  00:10:33,510
enough you can see here that we've now found that the
description or the detail field is
127

127

00:10:33,510  -->  00:10:36,970
now all in uppercase you notice before where we had it coded in
128

128

00:10:38,000  -->  00:10:42,030
over here it wasn't in upper case so we need
to find out why is that doing that so
129

129

00:10:42,030  -->  00:10:49,830
obviously the problems is come about since we've created our to do data class so lets go have a look in their and
130

130

00:10:49,830  -->  00:10:53,090
most likely when we writing it we are
storing it we made the typo in the
131

131

00:10:53,090  -->  00:10:55,580
format and that is what happened
132

132

00:10:55,580  -->  00:11:02,940
you can see string.format I've got percent lower case s a tab percent upper case s another tab and percent
133

133

00:11:02,940  -->  00:11:15,250
lower case s so the uppercase s in the format has caused that problem so if we have a look at string.format in documentation and do
134

134

00:11:15,250  -->  00:11:19,660
a search for that and will just check the documentation and then we'll just find
135

135

00:11:19,660  -->  00:11:22,660
the right class.....ok so here we are I finally found it and if we have a look for format
136

136

00:11:39,210  -->  00:12:15,610
we have a couple of options but the one we are looking at is the format one and we click on format string and we get some information to syntax for using that formatting and scrolling down you can see in general we got an s which produces a string but we've got an uppercase version which is varied so whats happening here in our code since I typed in
137

137

00:12:15,610  -->  00:12:22,520
percent upper case s it converted everything to upper case so that should be case so I'll leave the code in their because what we'll
138

138

00:12:22,520  -->  00:12:26,890
have to do to fix this we have to go back
and put the code back with a hard-coded
139

139

00:12:26,890  -->  00:12:29,110
values get that working and rewrite the
file
140

140

00:12:29,110  -->  00:12:32,820
it doesn't really matter if the details
are in upper case because that's where we
141

141

00:12:32,820  -->  00:12:37,870
add more items will be fixing that anyway and
when that is written out again the problem
142

142

00:12:37,870  -->  00:12:42,570
will be corrected for new ones so I won't fix the existing one because the existing
143

143

00:12:42,570  -->  00:12:46,440
once is going to be written out again but in
subsequent runs we should be good to go
144

144

00:12:46,440  -->  00:12:54,260
just to confirm that the if we run this and you notice its still in upper case if close
down the program where of course its
145

145

00:12:54,260  -->  00:13:00,990
rewriting the items when the
program's closed down run it again it's
146

146

00:13:00,990  -->  00:13:02,310
still an uppercase
147

147

00:13:02,310  -->  00:13:08,360
so even though we specified upper case there it's not going
to change anything now that we
148

148

00:13:08,360  -->  00:13:11,450
converted it back to lower case it just means
it's gonna be written out as it is
149

149

00:13:11,450  -->  00:13:16,300
effectively it's not going to be changed
case its not going to try and change to what
150

150

00:13:16,300  -->  00:13:20,120
it already is but new entries when we get to
the stage of adding that to the program
151

151

00:13:20,120  -->  00:13:24,770
that functionality will be written
correctly as they typed so that's that
152

152

00:13:24,770  -->  00:13:27,950
little bug fix sorted
153

153

00:13:27,950  -->  00:13:33,670
so lets get back to working on the UI again and
so what we want to do is now we've determine that
154

154

00:13:33,670  -->  00:13:38,370
the basic applications is working is we want to
provide a way for the user to add a new
155

155

00:13:38,370  -->  00:13:42,640
to-do item to the list so we gonna
add menu to our application
156

156

00:13:42,640  -->  00:13:47,600
and will put it in the top position of
the border pane so lets open up the main window fxml
157

157

00:13:47,600  -->  00:14:00,830
and we are gonna used the top so come up here and put that at the top literally and....
158

158

00:14:00,830  -->  00:14:11,830
....and if we run that now we won't see anything different and
159

159

00:14:11,830  -->  00:14:16,050
that's because we haven't added into the
menu bar but we have added the slot
160

160

00:14:16,050  -->  00:14:20,860
for it and menu bar tag what we
haven't done is add in any information in their so the
161

161

00:14:20,860  -->  00:14:25,930
way to do that is we just type....
162

162

00:14:25,930  -->  00:14:34,430
...and now
163

163

00:14:34,430  -->  00:14:41,130
when we run it we should see a basic menu
and you can see we got this file which at the moment we
164

164

00:14:41,130  -->  00:14:43,680
click it nothing happens because we
haven't specified
165

165

00:14:43,680  -->  00:14:48,560
a sub menu to open so closing it
down again is very equivalent to
166

166

00:14:48,560  -->  00:14:54,890
actually clicking that on within IntelliJ so lets add an item so that
167

167

00:14:54,890  -->  00:14:59,850
when we click it it does something in this case we're going
to assign it to the text new so that when the
168

168

00:14:59,850  -->  00:15:06,930
user wants to create a new to do item so within the menu text equals file on line 14 we
169

169

00:15:06,930  -->  00:15:12,070
put in the items that we want to be in teh menu so....
170

170

00:15:12,070  -->  00:15:20,050
....
171

171

00:15:24,550  -->  00:15:39,500
....
172

172

00:15:39,500  -->  00:15:49,790
...so if we run this we should see
our mini menu click on file and you can see we
173

173

00:15:49,790  -->  00:15:53,060
now got a new option which we havne't programmed it to do anything yet and
174

174

00:15:53,060  -->  00:15:57,600
likewise if we click on exit and notice also
that little separator line between the two
175

175

00:15:57,600  -->  00:16:00,930
and bearing in mind the application will look a little bit different if you're
176

176

00:16:00,930  -->  00:16:05,940
running on Windows or Linux but the same
concept will apply in terms of the menu
177

177

00:16:05,940  -->  00:16:10,580
options obviously pressing these items
as I mentioned doesn't do anything at
178

178

00:16:10,580  -->  00:16:14,730
this stage and that's because we're not
listening for those events so what we
179

179

00:16:14,730  -->  00:16:19,330
need to do is write an event handler for
the new item so when the user presses new
180

180

00:16:19,330  -->  00:16:23,310
we want to show them a dialog that they can use to
create a new item so we start doing
181

181

00:16:23,310  -->  00:16:24,240
that in the next video
