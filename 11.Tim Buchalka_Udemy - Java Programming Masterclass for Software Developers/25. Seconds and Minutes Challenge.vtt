WEBVTT
1
1

00:00:04.680  -->  00:00:07.979
Alright, it's time for a challenge so
2

2

00:00:07.979  -->  00:00:09.209
this is the seconds and minutes
3

3

00:00:09.209  -->  00:00:11.670
challenge. So the challenge is to create
4

4

00:00:11.670  -->  00:00:14.639
a method called get duration string with
5

5

00:00:14.639  -->  00:00:17.010
two parameters so the first parameter
6

6

00:00:17.010  -->  00:00:19.350
should be minutes and the second
7

7

00:00:19.350  -->  00:00:21.180
parameter should be seconds that's the
8

8

00:00:21.180  -->  00:00:23.270
names now they're both going to be int
9

9

00:00:23.270  -->  00:00:25.619
and you should validate that the first
10

10

00:00:25.619  -->  00:00:27.449
parameter minutes is greater than equal
11

11

00:00:27.449  -->  00:00:29.400
to 0 and you need to validate that the
12

12

00:00:29.400  -->  00:00:31.800
second parameter seconds is greater than
13

13

00:00:31.800  -->  00:00:35.670
equal to 0 and less than equal to 59.
14

14

00:00:35.670  -->  00:00:37.739
Now the method should return the string
15

15

00:00:37.739  -->  00:00:40.620
invalid value if either of the above are
16

16

00:00:40.620  -->  00:00:42.930
not true. Now if the parameters are
17

17

00:00:42.930  -->  00:00:45.390
valid then calculate how many hours
18

18

00:00:45.390  -->  00:00:48.390
minutes and seconds equal the minutes
19

19

00:00:48.390  -->  00:00:50.760
and seconds passed to this method and
20

20

00:00:50.760  -->  00:00:52.980
return that value as a string in the
21

21

00:00:52.980  -->  00:00:58.980
format XXh YYm ZZs where XX
22

22

00:00:58.980  -->  00:01:01.890
remote represents the number of hours, YY
23

23

00:01:01.890  -->  00:01:04.619
the number of minutes and ZZ the number
24

24

00:01:04.619  -->  00:01:06.509
of seconds. So once you've done that
25

25

00:01:06.509  -->  00:01:09.030
create a second method of the same name
26

26

00:01:09.030  -->  00:01:12.479
but with only one parameter seconds, so
27

27

00:01:12.479  -->  00:01:13.830
you validate that it's greater than
28

28

00:01:13.830  -->  00:01:16.500
equal to zero and return invalid value
29

29

00:01:16.500  -->  00:01:19.590
as a string if that isn't true. Now if it
30

30

00:01:19.590  -->  00:01:21.810
is valid then calculate how many minutes
31

31

00:01:21.810  -->  00:01:24.420
are in the seconds value and then call
32

32

00:01:24.420  -->  00:01:27.299
the other overloaded method passing the
33

33

00:01:27.299  -->  00:01:29.280
correct minutes and seconds calculated
34

34

00:01:29.280  -->  00:01:31.350
so that that method the first version of
35

35

00:01:31.350  -->  00:01:33.299
the overloaded method can calculate it
36

36

00:01:33.299  -->  00:01:35.340
correctly, you then want to call both the
37

37

00:01:35.340  -->  00:01:37.320
methods to print value to the console.
38

38

00:01:37.320  -->  00:01:40.799
Now a few tips here firstly use an int
39

39

00:01:40.799  -->  00:01:42.840
or long for your number data types is
40

40

00:01:42.840  -->  00:01:44.790
probably a good idea you probably know
41

41

00:01:44.790  -->  00:01:46.170
this already but one minute is 60
42

42

00:01:46.170  -->  00:01:48.390
seconds and one hour equals 60 minutes
43

43

00:01:48.390  -->  00:01:52.200
or 3600 seconds methods should both be
44

44

00:01:52.200  -->  00:01:54.840
static as we've used previously so in
45

45

00:01:54.840  -->  00:01:56.250
other words create your method as you
46

46

00:01:56.250  -->  00:01:58.710
normally have done so far in the course
47

47

00:01:58.710  -->  00:02:02.189
and it's a bonus for the input 61
48

48

00:02:02.189  -->  00:02:05.430
minutes the output should be 0 1 hours 0
49

49

00:02:05.430  -->  00:02:08.879
1 minute 0 0 seconds but it's okay if
50

50

00:02:08.879  -->  00:02:11.280
it's one hour one minute zero seconds in
51

51

00:02:11.280  -->  00:02:12.239
other words to be having up those
52

52

00:02:12.239  -->  00:02:14.849
leading zeros as a tip there consider
53

53

00:02:14.849  -->  00:02:17.579
using if-else to achieve that. Alright
54

54

00:02:17.579  -->  00:02:18.569
and then you want to create a new
55

55

00:02:18.569  -->  00:02:20.370
so program and call it seconds and
56

56

00:02:20.370  -->  00:02:21.569
minutes challenge
57

57

00:02:21.569  -->  00:02:24.510
Alright, so pause the video now and go
58

58

00:02:24.510  -->  00:02:25.829
ahead and complete the challenge and
59

59

00:02:25.829  -->  00:02:27.599
when you've done that come back and see
60

60

00:02:27.599  -->  00:02:28.769
what I've done and we'll go through it
61

61

00:02:28.769  -->  00:02:33.170
step by step, so pause the video now.
62

62

00:02:33.170  -->  00:02:35.760
Alright so I hope you manage to have
63

63

00:02:35.760  -->  00:02:38.040
some success with the challenge so
64

64

00:02:38.040  -->  00:02:39.930
let's now go through it step by step to
65

65

00:02:39.930  -->  00:02:42.120
get this working. Alright so what we're
66

66

00:02:42.120  -->  00:02:44.069
going to do is start with the challenge
67

67

00:02:44.069  -->  00:02:46.049
and I've got a challenge text file I'm
68

68

00:02:46.049  -->  00:02:47.069
just going to share that on the screen
69

69

00:02:47.069  -->  00:02:50.010
now and any time that time I want to go
70

70

00:02:50.010  -->  00:02:51.870
back and check you can actually refer to
71

71

00:02:51.870  -->  00:02:53.219
that and that text file was in the
72

72

00:02:53.219  -->  00:02:54.750
resources section of the video just to
73

73

00:02:54.750  -->  00:02:56.219
make it a bit easier for you to follow
74

74

00:02:56.219  -->  00:02:59.099
along step by step. Alright so first
75

75

00:02:59.099  -->  00:03:00.599
things first you can see that I've
76

76

00:03:00.599  -->  00:03:02.549
already created a seconds a minute
77

77

00:03:02.549  -->  00:03:04.739
challenge and I've already created a
78

78

00:03:04.739  -->  00:03:06.900
class called main and I've already
79

79

00:03:06.900  -->  00:03:09.780
created the method for name so that we
80

80

00:03:09.780  -->  00:03:12.480
can test our code. So the first step we
81

81

00:03:12.480  -->  00:03:14.909
need to do is go back and create a
82

82

00:03:14.909  -->  00:03:17.849
method get duration string let's go
83

83

00:03:17.849  -->  00:03:21.239
ahead and do that, so I'm going to call
84

84

00:03:21.239  -->  00:03:28.319
that private static string get duration
85

85

00:03:28.319  -->  00:03:31.530
string parenthesis are we going to use
86

86

00:03:31.530  -->  00:03:34.949
a long here so long minutes and long
87

87

00:03:34.949  -->  00:03:37.199
seconds if you use an int there
88

88

00:03:37.199  -->  00:03:41.040
that's okay as well. Alright so that's
89

89

00:03:41.040  -->  00:03:43.319
our method firstly and by the way if you
90

90

00:03:43.319  -->  00:03:46.009
haven't added public or private here
91

91

00:03:46.009  -->  00:03:49.019
the code will still work but later on
92

92

00:03:49.019  -->  00:03:50.280
we're going to discuss the public key
93

93

00:03:50.280  -->  00:03:51.659
word and other modifiers that you can
94

94

00:03:51.659  -->  00:03:53.340
use with methods so I'm just going to
95

95

00:03:53.340  -->  00:03:55.229
put the word private back in there but
96

96

00:03:55.229  -->  00:03:57.540
we'll talk about that a lot in detail as
97

97

00:03:57.540  -->  00:03:59.790
we progress through the course. Alright,
98

98

00:03:59.790  -->  00:04:01.620
so we've got to make the string return
99

99

00:04:01.620  -->  00:04:03.180
something that represents the hours
100

100

00:04:03.180  -->  00:04:05.909
minutes and seconds or an error if the
101

101

00:04:05.909  -->  00:04:08.159
validation fails, so what we want to do
102

102

00:04:08.159  -->  00:04:10.019
first is start out with some validation
103

103

00:04:10.019  -->  00:04:12.030
so we need to make sure if you recall
104

104

00:04:12.030  -->  00:04:14.370
from the challenge the minutes has to be
105

105

00:04:14.370  -->  00:04:16.320
greater than or equal to zero, we need to
106

106

00:04:16.320  -->  00:04:18.599
make sure that the seconds is in the
107

107

00:04:18.599  -->  00:04:20.579
range of being zero or greater but less
108

108

00:04:20.579  -->  00:04:22.979
than or equal to 59, so I'm gonna use
109

109

00:04:22.979  -->  00:04:24.389
some info logic and also use the or
110

110

00:04:24.389  -->  00:04:26.699
operator as well to chain together some
111

111

00:04:26.699  -->  00:04:28.830
conditions to do all the checking on one
112

112

00:04:28.830  -->  00:04:30.539
line and you'll see that as I type that
113

113

00:04:30.539  -->  00:04:31.950
through now. Let's go ahead
114

114

00:04:31.950  -->  00:04:35.790
and do that I'm gonna put if two left
115

115

00:04:35.790  -->  00:04:38.970
parenthesis minutes is less than zero,
116

116

00:04:38.970  -->  00:04:42.540
you closed the first parenthesis and we
117

117

00:04:42.540  -->  00:04:46.140
use or and another parenthesis seconds
118

118

00:04:46.140  -->  00:04:48.810
is less than zero closing parenthesis
119

119

00:04:48.810  -->  00:04:52.950
and or again parenthesis basically
120

120

00:04:52.950  -->  00:04:57.150
seconds is greater than fifty nine and
121

121

00:04:57.150  -->  00:04:59.370
then two closing parenthesis and if that
122

122

00:04:59.370  -->  00:05:01.050
is the case, we need to return the error
123

123

00:05:01.050  -->  00:05:03.470
message which in our case was a return
124

124

00:05:03.470  -->  00:05:07.200
invalid value, so you can see what I've
125

125

00:05:07.200  -->  00:05:08.670
done there the first part of the
126

126

00:05:08.670  -->  00:05:10.500
condition is checking minutes less than
127

127

00:05:10.500  -->  00:05:12.570
zero so if either of those three
128

128

00:05:12.570  -->  00:05:15.960
conditions there a return is true then
129

129

00:05:15.960  -->  00:05:17.310
we're returning invalid value so if
130

130

00:05:17.310  -->  00:05:20.130
minutes is less than zero or seconds is
131

131

00:05:20.130  -->  00:05:22.050
less than zero or seconds is greater
132

132

00:05:22.050  -->  00:05:23.670
than fifty nine and if you've done that
133

133

00:05:23.670  -->  00:05:25.710
over a couple of lines to do the same
134

134

00:05:25.710  -->  00:05:28.530
thing that's fine, this is just a concise
135

135

00:05:28.530  -->  00:05:29.940
way of actually achieving the same
136

136

00:05:29.940  -->  00:05:32.250
validation, so at this point if we get
137

137

00:05:32.250  -->  00:05:34.860
down here to line fourteen we know that
138

138

00:05:34.860  -->  00:05:37.050
the the both four minutes and the
139

139

00:05:37.050  -->  00:05:39.450
seconds variables have gotten valid
140

140

00:05:39.450  -->  00:05:41.040
values in them and we can start assuming
141

141

00:05:41.040  -->  00:05:42.240
that and work with it.
142

142

00:05:42.240  -->  00:05:45.360
So let's now start by converting the
143

143

00:05:45.360  -->  00:05:46.710
total minutes that were passed to this
144

144

00:05:46.710  -->  00:05:48.810
method two hours so we can do that by
145

145

00:05:48.810  -->  00:05:52.340
typing long and hours equals minutes
146

146

00:05:52.340  -->  00:05:56.490
divided by 60 so that's how many hours
147

147

00:05:56.490  -->  00:05:58.770
if any there are in the minutes that
148

148

00:05:58.770  -->  00:06:00.840
have been passed to this method, so now
149

149

00:06:00.840  -->  00:06:02.160
we have to calculate the remaining
150

150

00:06:02.160  -->  00:06:04.080
minutes so minutes were converted to
151

151

00:06:04.080  -->  00:06:06.450
hours but if we have for example 61
152

152

00:06:06.450  -->  00:06:09.300
minutes that's actually one hour in one minute
153

153

00:06:09.300  -->  00:06:11.040
so therefore we need to calculate how
154

154

00:06:11.040  -->  00:06:13.350
many minutes cannot fit into one hour so
155

155

00:06:13.350  -->  00:06:15.450
what we can do to do that is to type in
156

156

00:06:15.450  -->  00:06:21.200
long remaining minutes is equal to
157

157

00:06:21.200  -->  00:06:26.030
minutes use the remainder operator sixty
158

158

00:06:26.030  -->  00:06:28.590
that so many Mets are now remaining and
159

159

00:06:28.590  -->  00:06:31.260
from that point now we can now return
160

160

00:06:31.260  -->  00:06:38.150
our data so we could type return hours plus h
161

161

00:06:38.150  -->  00:06:41.339
space plus and h was in double quotes
162

162

00:06:41.339  -->  00:06:44.759
from maining minutes plus an m for
163

163

00:06:44.759  -->  00:06:46.199
that in a space and double quotes plus
164

164

00:06:46.199  -->  00:06:50.479
seconds plus an S on the other line.
165

165

00:06:50.479  -->  00:06:53.219
Alright so that should be our method rip
166

166

00:06:53.219  -->  00:06:55.349
correctly written now before we write
167

167

00:06:55.349  -->  00:06:57.449
the next overloaded version of that
168

168

00:06:57.449  -->  00:06:59.309
method let's actually test this out
169

169

00:06:59.309  -->  00:07:02.219
first, so what I'm going to do is I come
170

170

00:07:02.219  -->  00:07:04.710
back up here to their main method and do
171

171

00:07:04.710  -->  00:07:07.189
a s out and type it's going to be get
172

172

00:07:07.189  -->  00:07:09.659
duration string and the two parameters
173

173

00:07:09.659  -->  00:07:11.639
we're going to pass 65 for the number of
174

174

00:07:11.639  -->  00:07:14.990
minutes and 45 for the number of seconds.
175

175

00:07:14.990  -->  00:07:17.430
So let's actually run that and make sure
176

176

00:07:17.430  -->  00:07:24.839
that it works, you can see we quickly got
177

177

00:07:24.839  -->  00:07:27.059
the results there 1 hour 5 minutes 45
178

178

00:07:27.059  -->  00:07:28.919
seconds, let's just move this down to the
179

179

00:07:28.919  -->  00:07:33.930
bottom. Okay, so so far so good and by the
180

180

00:07:33.930  -->  00:07:35.699
way don't be confused by this code here
181

181

00:07:35.699  -->  00:07:38.339
in parentheses this is just calling the
182

182

00:07:38.339  -->  00:07:40.499
method get duration string first then
183

183

00:07:40.499  -->  00:07:42.539
the return value from that method will
184

184

00:07:42.539  -->  00:07:44.520
be the parameter for the println method
185

185

00:07:44.520  -->  00:07:48.149
so it's just a shortcut way to get that
186

186

00:07:48.149  -->  00:07:49.860
happening all on one line if you've done
187

187

00:07:49.860  -->  00:07:51.360
it over two lines perhaps you've
188

188

00:07:51.360  -->  00:07:52.889
assigned the value of get duration
189

189

00:07:52.889  -->  00:07:54.809
string to a string variable and then
190

190

00:07:54.809  -->  00:07:56.580
you're outputting the string variable
191

191

00:07:56.580  -->  00:07:57.599
with a print line on the next line
192

192

00:07:57.599  -->  00:07:59.009
that's fine as well
193

193

00:07:59.009  -->  00:08:01.139
one - you get the same results this
194

194

00:08:01.139  -->  00:08:03.389
example we should have got one hour five
195

195

00:08:03.389  -->  00:08:05.759
minutes and 45 seconds and that's what we've got,
196

196

00:08:05.759  -->  00:08:08.129
so before we deal with the bonus part
197

197

00:08:08.129  -->  00:08:09.959
though let's finish the other method
198

198

00:08:09.959  -->  00:08:11.999
first so what we had to do was write
199

199

00:08:11.999  -->  00:08:14.189
another overloaded method and obviously
200

200

00:08:14.189  -->  00:08:15.509
an overloaded method is one that's got
201

201

00:08:15.509  -->  00:08:17.879
the same name, I mean have only one
202

202

00:08:17.879  -->  00:08:20.490
parameter in this case seconds, so let's
203

203

00:08:20.490  -->  00:08:22.319
do that I'm gonna come down here and
204

204

00:08:22.319  -->  00:08:24.389
type private you don't worry too much
205

205

00:08:24.389  -->  00:08:26.759
about private or public here just top it
206

206

00:08:26.759  -->  00:08:28.050
in for now and if you haven't used
207

207

00:08:28.050  -->  00:08:30.149
private or public that's fine as well
208

208

00:08:30.149  -->  00:08:31.680
because we'll be explaining that in
209

209

00:08:31.680  -->  00:08:33.719
detail later in the course so we need a
210

210

00:08:33.719  -->  00:08:34.979
string here and it's going to be get
211

211

00:08:34.979  -->  00:08:38.010
duration string again but this time the
212

212

00:08:38.010  -->  00:08:39.930
parameters are different we're going to
213

213

00:08:39.930  -->  00:08:41.219
got one parameter here and it's going to
214

214

00:08:41.219  -->  00:08:46.589
be long seconds so just close down the
215

215

00:08:46.589  -->  00:08:48.170
button whenever now
216

216

00:08:48.170  -->  00:08:49.940
in this case we've got to check that the
217

217

00:08:49.940  -->  00:08:51.590
parameter seconds is greater than zero
218

218

00:08:51.590  -->  00:08:54.230
that's a simple test there and what we
219

219

00:08:54.230  -->  00:08:56.120
can just do is type if parentheses
220

220

00:08:56.120  -->  00:08:58.940
seconds is less than zero that's the
221

221

00:08:58.940  -->  00:09:00.770
case we've got to return our error
222

222

00:09:00.770  -->  00:09:02.390
message returned in double quotes
223

223

00:09:02.390  -->  00:09:06.830
invalid value all right so that's that
224

224

00:09:06.830  -->  00:09:09.140
done so notice here that we're repeating
225

225

00:09:09.140  -->  00:09:10.820
the same string in both methods which is
226

226

00:09:10.820  -->  00:09:13.040
invalid string for the time being that's
227

227

00:09:13.040  -->  00:09:14.870
okay and I'm referring to the code on
228

228

00:09:14.870  -->  00:09:18.170
line 11 and also the code on line 21 but
229

229

00:09:18.170  -->  00:09:19.400
later in the course I'll show you how to
230

230

00:09:19.400  -->  00:09:21.350
deal with situations like this and use
231

231

00:09:21.350  -->  00:09:23.840
something called constants but we're
232

232

00:09:23.840  -->  00:09:25.310
only in the course I will just continue
233

233

00:09:25.310  -->  00:09:27.260
as it is right now we'll just get our
234

234

00:09:27.260  -->  00:09:28.820
functionality working and once we've got
235

235

00:09:28.820  -->  00:09:30.200
it working we can then optimize our
236

236

00:09:30.200  -->  00:09:32.510
solution so here we've checked there to
237

237

00:09:32.510  -->  00:09:33.710
see both of the seconds are less than
238

238

00:09:33.710  -->  00:09:35.990
zero and that means that the it's going
239

239

00:09:35.990  -->  00:09:37.280
to be an invalid time that we can't
240

240

00:09:37.280  -->  00:09:39.170
calculate because we can't calculate a
241

241

00:09:39.170  -->  00:09:41.240
time you're negative that's a negative
242

242

00:09:41.240  -->  00:09:43.400
number so we've got that returning so if
243

243

00:09:43.400  -->  00:09:44.750
it gets down to this line here in our
244

244

00:09:44.750  -->  00:09:46.220
line 24 we know that time we've got a
245

245

00:09:46.220  -->  00:09:48.590
valid amount of seconds to deal with so
246

246

00:09:48.590  -->  00:09:49.820
what we now need to do here is very
247

247

00:09:49.820  -->  00:09:51.860
similar to what we did in the first
248

248

00:09:51.860  -->  00:09:53.930
method in this method there we've just
249

249

00:09:53.930  -->  00:09:56.840
got seconds so what we can do is still
250

250

00:09:56.840  -->  00:09:59.150
convert minutes to seconds so let's go
251

251

00:09:59.150  -->  00:10:02.140
ahead and do that then we'll time long
252

252

00:10:02.140  -->  00:10:07.430
minutes is equal to seconds divided by
253

253

00:10:07.430  -->  00:10:09.160
60 so that's how many minutes we've got
254

254

00:10:09.160  -->  00:10:14.570
then long remaining seconds well that's
255

255

00:10:14.570  -->  00:10:17.150
equal to seconds then the remainder
256

256

00:10:17.150  -->  00:10:21.830
operator 60 so if now calculated the
257

257

00:10:21.830  -->  00:10:23.900
minutes from the seconds and then
258

258

00:10:23.900  -->  00:10:25.550
calculated the remaining minutes again
259

259

00:10:25.550  -->  00:10:26.990
using the remainder operator as you can
260

260

00:10:26.990  -->  00:10:29.090
see and stored that in remaining in the
261

261

00:10:29.090  -->  00:10:31.760
in remaining seconds variable so now
262

262

00:10:31.760  -->  00:10:34.190
we've got minutes and remaining seconds
263

263

00:10:34.190  -->  00:10:35.960
all we need to do is call the first
264

264

00:10:35.960  -->  00:10:37.850
method instead of repeating the same
265

265

00:10:37.850  -->  00:10:39.260
code from the first method we can just
266

266

00:10:39.260  -->  00:10:41.060
call it so what we can actually do there
267

267

00:10:41.060  -->  00:10:45.020
is we can type return get duration
268

268

00:10:45.020  -->  00:10:47.090
string and in parentheses we can pass
269

269

00:10:47.090  -->  00:10:52.070
minutes and seconds there's going to be
270

270

00:10:52.070  -->  00:10:54.320
those lines up so here what we've done
271

271

00:10:54.320  -->  00:10:55.880
is we've used to return keyword and the
272

272

00:10:55.880  -->  00:10:57.920
method call on the same line and again
273

273

00:10:57.920  -->  00:10:59.000
if you've done this over two lines
274

274

00:10:59.000  -->  00:11:01.070
perhaps you've saved the value of the
275

275

00:11:01.070  -->  00:11:02.100
call to get generations
276

276

00:11:02.100  -->  00:11:04.170
turning into a string on one line and
277

277

00:11:04.170  -->  00:11:06.209
then printed it out and returned that
278

278

00:11:06.209  -->  00:11:08.100
variable on another line that's fine
279

279

00:11:08.100  -->  00:11:10.079
we've just I've just made a concise here
280

280

00:11:10.079  -->  00:11:12.690
and done two things on the one line so
281

281

00:11:12.690  -->  00:11:13.680
again what's happening is that the
282

282

00:11:13.680  -->  00:11:15.269
method call will be called first and
283

283

00:11:15.269  -->  00:11:16.769
then the return statement will return
284

284

00:11:16.769  -->  00:11:18.870
the value that it got from that method
285

285

00:11:18.870  -->  00:11:20.759
call so don't think that we're returning
286

286

00:11:20.759  -->  00:11:22.380
the method itself because we're not
287

287

00:11:22.380  -->  00:11:22.949
doing that
288

288

00:11:22.949  -->  00:11:24.509
we'll return what we were returning is
289

289

00:11:24.509  -->  00:11:27.690
the return value from that method and
290

290

00:11:27.690  -->  00:11:28.920
again even though I mention it another
291

291

00:11:28.920  -->  00:11:29.970
way of doing this would have been just
292

292

00:11:29.970  -->  00:11:34.170
to put string x equals remaining get
293

293

00:11:34.170  -->  00:11:36.360
these get duration string the return X
294

294

00:11:36.360  -->  00:11:38.730
that would have worked just as well so
295

295

00:11:38.730  -->  00:11:40.620
we consolidated into one line by doing
296

296

00:11:40.620  -->  00:11:43.350
it this way with returning get your
297

297

00:11:43.350  -->  00:11:45.959
registry indirectly all right so that's
298

298

00:11:45.959  -->  00:11:47.519
almost it there's only the bonus left
299

299

00:11:47.519  -->  00:11:49.680
but before we work on the bonus part
300

300

00:11:49.680  -->  00:11:51.209
which we'll do in the next video
301

301

00:11:51.209  -->  00:11:52.980
let's test what we've done here and make
302

302

00:11:52.980  -->  00:11:54.810
sure that that's working so what we're
303

303

00:11:54.810  -->  00:11:57.029
going to do is come back and then I'm
304

304

00:11:57.029  -->  00:11:59.970
going to on the next line of output in
305

305

00:11:59.970  -->  00:12:02.730
the main method we're going to put in
306

306

00:12:02.730  -->  00:12:04.259
get duration string and we're going to
307

307

00:12:04.259  -->  00:12:11.189
pass a value of 3 9 4 5 now in general
308

308

00:12:11.189  -->  00:12:13.170
it's a good idea because we're using longs
309

309

00:12:13.170  -->  00:12:15.000
to use longs and I haven't really done
310

310

00:12:15.000  -->  00:12:17.430
that so far but a good idea would be to
311

311

00:12:17.430  -->  00:12:19.920
actually use an L if your call L was the
312

312

00:12:19.920  -->  00:12:22.589
indicator in Java for longs to make
313

313

00:12:22.589  -->  00:12:24.060
sure that it was a long number that
314

314

00:12:24.060  -->  00:12:26.550
we're using and to be consistent we
315

315

00:12:26.550  -->  00:12:27.839
could also do that for these previous
316

316

00:12:27.839  -->  00:12:30.689
lines as well but ok we've got that in
317

317

00:12:30.689  -->  00:12:31.920
there now, let's actually run the
318

318

00:12:31.920  -->  00:12:37.110
application and see what happens.
319

319

00:12:37.110  -->  00:12:38.459
Now that's interesting you can see what's
320

320

00:12:38.459  -->  00:12:40.019
happened there we've got to the output
321

321

00:12:40.019  -->  00:12:41.579
the first line of the output down here
322

322

00:12:41.579  -->  00:12:43.230
down the bottom has got a correct value
323

323

00:12:43.230  -->  00:12:46.529
if the second line has got invalid value
324

324

00:12:46.529  -->  00:12:49.110
now can you actually spot what I've
325

325

00:12:49.110  -->  00:12:50.100
actually done wrong there I'm just going
326

326

00:12:50.100  -->  00:12:52.319
to close the run window again like
327

327

00:12:52.319  -->  00:12:54.300
you've seen that code what have we done
328

328

00:12:54.300  -->  00:12:56.220
wrong there to cause that not to work
329

329

00:12:56.220  -->  00:12:58.110
well if you look really closely what
330

330

00:12:58.110  -->  00:13:00.120
we're doing here is were passing minutes
331

331

00:13:00.120  -->  00:13:01.620
and seconds
332

332

00:13:01.620  -->  00:13:04.050
so I'm incorrectly passing seconds
333

333

00:13:04.050  -->  00:13:06.689
instead of remaining seconds and the
334

334

00:13:06.689  -->  00:13:09.269
problem is that's been passing seconds
335

335

00:13:09.269  -->  00:13:11.370
to our get duration string and it's
336

336

00:13:11.370  -->  00:13:13.050
validating to make sure that seconds
337

337

00:13:13.050  -->  00:13:15.930
cannot be greater than 59 so it's returning
338

338

00:13:15.930  -->  00:13:17.940
invalid value so that can be an
339

339

00:13:17.940  -->  00:13:19.589
interesting one to debug you if you do
340

340

00:13:19.589  -->  00:13:21.420
something like that the solution there
341

341

00:13:21.420  -->  00:13:23.250
was for me to take a copy of remaining
342

342

00:13:23.250  -->  00:13:26.870
seconds and return that and not seconds
343

343

00:13:26.870  -->  00:13:29.580
so now if we run this again you should
344

344

00:13:29.580  -->  00:13:32.070
find it gives us the right answer and
345

345

00:13:32.070  -->  00:13:33.839
you can see in that case we got the same result
346

346

00:13:33.839  -->  00:13:36.810
one hour five minutes and 45 seconds so
347

347

00:13:36.810  -->  00:13:38.820
with the same result now for both of
348

348

00:13:38.820  -->  00:13:40.860
them and that's great. Alright so that
349

349

00:13:40.860  -->  00:13:43.020
finishes the challenge the bonus part is
350

350

00:13:43.020  -->  00:13:45.029
optional but I want to show you the
351

351

00:13:45.029  -->  00:13:47.040
solution to the bonus part as well and
352

352

00:13:47.040  -->  00:13:50.360
we'll do that in the next video.
