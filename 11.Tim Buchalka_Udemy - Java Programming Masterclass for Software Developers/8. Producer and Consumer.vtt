WEBVTT
1
1

00:00:05.170  -->  00:00:09.700
so as I mentioned the end of the
previous video we can also synchronize
2

2

00:00:09.700  -->  00:00:16.050
static methods and use static objects
and when we do that the lock that used
3

3

00:00:16.050  -->  00:00:21.550
is owned by the class object associated
with the objects class now
4

4

00:00:21.550  -->  00:00:28.300
synchronization is reentrant what that
means is that if a thread acquires an
5

5

00:00:28.300  -->  00:00:32.080
objects lock and within the synchronized
code
6

6

00:00:32.080  -->  00:00:36.960
it calls a method that's using the same
object to synchronize some code
7

7

00:00:37.510  -->  00:00:42.960
the thread can keep executing because it
already has the objects lock
8

8

00:00:42.960  -->  00:00:49.120
in other words the thread can acquire
a lock it already owns now if this wasn't
9

9

00:00:49.120  -->  00:00:50.220
the case
10

10

00:00:50.220  -->  00:00:53.460
synchronization would be a lot trickier
11

11

00:00:53.460  -->  00:00:59.700
now will sometimes see the term critical
section used when discussing threads and
12

12

00:00:59.700  -->  00:01:05.610
synchronization critical section just
refers to the code that's referencing a
13

13

00:01:05.610  -->  00:01:12.030
shared resource like a variable only one
thread at a time should be able to
14

14

00:01:12.030  -->  00:01:18.180
execute a critical section now will also
see the term thread-safe used when a
15

15

00:01:18.180  -->  00:01:23.820
class or a method is thread-safe what
that means is that the developer has
16

16

00:01:23.820  -->  00:01:29.530
synchronized all the critical sections
within the code so that we as a
17

17

00:01:29.530  -->  00:01:33.310
developer don't have to worry about the
thread interference
18

18

00:01:33.310  -->  00:01:37.840
so if we're using a method that all
class that isn't thread-safe then the
19

19

00:01:37.840  -->  00:01:40.890
developer hasn't added any
synchronization
20

20

00:01:40.890  -->  00:01:45.420
in that case would be responsible for
adding synchronization if we want
21

21

00:01:45.420  -->  00:01:51.360
multiple threads to be able to safely
use the code now in the javafx section
22

22

00:01:51.360  -->  00:01:56.070
if you've already done that we learned
that would have to run all the code that
23

23

00:01:56.070  -->  00:02:02.790
modifies a UI component on the javafx
runtime thread so now i can explain why
24

24

00:02:02.790  -->  00:02:03.960
that is the case
25

25

00:02:03.960  -->  00:02:08.530
none of the UI components are thread
safe in Java FX
26

26

00:02:08.530  -->  00:02:14.310
so rather than forcing every developer
to properly synchronized any code that
27

27

00:02:14.310  -->  00:02:15.940
modifies the UI
28

28

00:02:15.940  -->  00:02:23.110
the javafx developers instead force all
such code to run on the javafx run time
29

29

00:02:23.110  -->  00:02:25.930
thread since the only one thread
30

30

00:02:25.930  -->  00:02:30.970
this is the javafx runtime thread can
modify UI components there won't  be
31

31

00:02:30.970  -->  00:02:32.440
any thread interference
32

32

00:02:32.440  -->  00:02:38.500
so one last thing to note before we move
on when we are synchronizing code we
33

33

00:02:38.500  -->  00:02:43.570
should synchronize only the code that
must be synchronized so in our example
34

34

00:02:43.570  -->  00:02:49.630
only the for loop has to be synchronized
so that's why we put that inside the
35

35

00:02:49.630  -->  00:02:51.160
synchronized block
36

36

00:02:51.160  -->  00:02:55.780
I demonstrated how to synchronize the do
count down method but doing it that way
37

37

00:02:55.780  -->  00:02:58.690
would be synchronizing too much code
38

38

00:02:58.690  -->  00:03:04.180
we also don't want to synchronize the
setting of the color variable because
39

39

00:03:04.180  -->  00:03:06.760
frankly there's no reason to do so
40

40

00:03:06.760  -->  00:03:12.910
we don't want threads to be suspended or
blocked unnecessarily because that can
41

41

00:03:12.910  -->  00:03:16.840
affect the performance of an application
as well as the user experience
42

42

00:03:17.620  -->  00:03:21.940
so in other words we really want to keep
the code we synchronized to an absolute
43

43

00:03:21.940  -->  00:03:23.230
minimum
44

44

00:03:23.230  -->  00:03:28.060
so at this point we've now talked about
and learned that we can prevent thread
45

45

00:03:28.060  -->  00:03:33.190
interference or a race condition by
synchronizing critical sections of code
46

46

00:03:33.880  -->  00:03:38.260
so let's go ahead now look at methods
that can only be called within
47

47

00:03:38.260  -->  00:03:44.200
synchronized code namely the weight
notify and notify all methods
48

48

00:03:44.800  -->  00:03:49.690
so the classic example that demonstrates
the use of these two methods is the
49

49

00:03:49.690  -->  00:03:51.910
producer consumer example
50

50

00:03:51.910  -->  00:03:56.320
so we're going to create a new console
project and go ahead and create that now
51

51

00:03:56.320  -->  00:04:02.890
so i'm going to close this project down
I'm going to create a new project and
52

52

00:04:02.890  -->  00:04:05.890
let's call it messages
53

53

00:04:08.940  -->  00:04:13.560
messages and finish to create the
project
54

54

00:04:14.760  -->  00:04:18.180
so what we're going to be doing here is
pretending that we're dealing with
55

55

00:04:18.180  -->  00:04:20.850
reading and writing messages of some
sort
56

56

00:04:20.850  -->  00:04:25.680
we're not going to use our thread color
class for this example we're going to
57

57

00:04:25.680  -->  00:04:31.140
have two threads in our application one
that's going to produce messages and the
58

58

00:04:31.140  -->  00:04:33.600
other one that is going to consume
messages
59

59

00:04:33.600  -->  00:04:37.230
so first we'll add code for the message
class to the main java file
60

60

00:04:37.890  -->  00:04:41.640
so let's add that class now....
61

61

00:04:41.640  -->  00:04:51.060
we need a couple of fields so...
62

62

00:04:51.990  -->  00:04:55.230
....
63

63

00:04:56.190  -->  00:05:02.550
we want to set up a synchronized read
method so...
64

64

00:05:02.550  -->  00:05:08.580
.....and for now we're just going to put...
65

65

00:05:09.120  -->  00:05:16.590
.....and we are going to set....
66

66

00:05:16.590  -->  00:05:25.500
....then we also
want to create a synchronized write method
67

67

00:05:25.500  -->  00:05:32.910
so....
68

68

00:05:32.910  -->  00:05:48.720
....
69

69

00:05:48.720  -->  00:05:53.460
.....
70

70

00:05:53.460  -->  00:05:57.840
so pretty straightforward the read
method will be used by the consumer to
71

71

00:05:57.840  -->  00:06:02.430
read the message and the write method
will be used by the producer to write a
72

72

00:06:02.430  -->  00:06:03.150
message
73

73

00:06:03.150  -->  00:06:08.340
the empty variable will be true whenb there's
no message to read and we want the
74

74

00:06:08.340  -->  00:06:12.360
consumer to read each message before we
write another one
75

75

00:06:12.360  -->  00:06:16.110
so in the write method we're checking to
see if the message is empty
76

76

00:06:16.110  -->  00:06:19.440
if it isn't we are going to loop until the
message is empty
77

77

00:06:19.440  -->  00:06:24.090
when we exit the loop we'll set empty to
false and at that point we then write
78

78

00:06:24.090  -->  00:06:28.710
the message now in the read method we're
going to loop until there is a message
79

79

00:06:28.710  -->  00:06:29.400
to read
80

80

00:06:29.400  -->  00:06:34.140
that's what the empty loop there is for then we'll set the flag to
81

81

00:06:34.140  -->  00:06:38.970
true to indicate that we've read the
message and then we return the message
82

82

00:06:38.970  -->  00:06:44.550
to the caller in this case the consumer
now I've synchronized the read and the
83

83

00:06:44.550  -->  00:06:49.710
write methods because when a thread is
running one of these methods we don't
84

84

00:06:49.710  -->  00:06:54.840
actually want another thread to be able
to run either method so we don't want
85

85

00:06:54.840  -->  00:06:59.780
the reader thread to run while the writer thread is writing a message and vice
86

86

00:06:59.780  -->  00:07:00.690
versa
87

87

00:07:00.690  -->  00:07:05.070
so now that we've done that lets
create our writer class and that's the
88

88

00:07:05.070  -->  00:07:08.700
class that will actually write the
messages so we'll go ahead and do that
89

89

00:07:08.700  -->  00:07:18.240
....
90

90

00:07:18.240  -->  00:07:27.180
we need a private message which is our
message object and then we need to
91

91

00:07:27.180  -->  00:07:32.160
a constructor which is going to store
that message objects so...
92

92

00:07:32.160  -->  00:07:38.250
with message being passed as an argument
to the constructor and then we'll save
93

93

00:07:38.250  -->  00:07:43.560
it into our field...
94

94

00:07:43.560  -->  00:07:46.830
....
95

95

00:07:47.340  -->  00:07:58.590
ok so next we want to create our run
method so...
96

96

00:07:58.590  -->  00:08:02.160
create a series of messages so we're
going to create the string array so...
97

97

00:08:02.160  -->  00:08:16.220
....
98

98

00:08:16.810  -->  00:08:39.250
....
99

99

00:08:44.140  -->  00:08:51.370
ok so there's four messages that
ultimately we're going to write here
100

100

00:08:51.370  -->  00:08:56.860
so then we want to create an instance of
the random class so that we can have
101

101

00:08:56.860  -->  00:08:58.080
random delay
102

102

00:08:58.080  -->  00:09:01.900
so....
103

103

00:09:05.650  -->  00:09:11.380
and we're going to loop through for all
the messages even though we know theirs 4
104

104

00:09:11.380  -->  00:09:16.870
will actually loop through based on the
length of the string array....
105

105

00:09:16.870  -->  00:09:30.970
....
106

106

00:09:30.970  -->  00:09:37.270
go through and do one at a time and then
we need to try block so....
107

107

00:09:37.270  -->  00:09:40.300
....
108

108

00:09:41.350  -->  00:09:48.730
....
109

109

00:09:48.730  -->  00:09:55.480
....we need to catch the
interrupted exception which we've talked
110

110

00:09:55.480  -->  00:09:59.530
about previously in this section and
we're not going to actually put any code
111

111

00:09:59.530  -->  00:10:02.920
in there for now we'll do that if we
find that if their is some errors
112

112

00:10:02.920  -->  00:10:07.300
then after the the for loop....
113

113

00:10:07.300  -->  00:10:15.190
....
114

114

00:10:15.190  -->  00:10:18.850
ok so that's our writer class
115

115

00:10:18.850  -->  00:10:23.950
so the writer class or in this case
the producer class writes 4 messages
116

116

00:10:23.950  -->  00:10:28.330
and to give the reader or in this case
the consumer a chance to run and to
117

117

00:10:28.330  -->  00:10:32.830
simulate what would happen in a real
world application that it's going to
118

118

00:10:32.830  -->  00:10:34.600
sleep for up to two seconds
119

119

00:10:34.600  -->  00:10:39.550
....
120

120

00:10:39.550  -->  00:10:44.020
so its going to sleep for up to two
seconds after writing a message and I
121

121

00:10:44.020  -->  00:10:47.440
talked about using the random class to
generate that random delay
122

122

00:10:47.440  -->  00:10:51.250
so now that we've done that the next
thing we want to do is add our reader
123

123

00:10:51.250  -->  00:10:53.770
class and we'll do that in the next
video
