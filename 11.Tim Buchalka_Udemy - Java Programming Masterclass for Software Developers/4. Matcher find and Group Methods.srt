1
1

00:00:04,240  -->  00:00:06,340
so in the last video we started work
2

2

00:00:06,340  -->  00:00:08,640
with the pattern and the matcher classes
3

3

00:00:08,640  -->  00:00:11,860
and we saw some results when the entire
4

4

00:00:11,860  -->  00:00:13,830
string or character sequence matches the
5

5

00:00:13,830  -->  00:00:16,150
pattern that's good we need to do that
6

6

00:00:16,150  -->  00:00:18,490
in some situations but how can we find
7

7

00:00:18,490  -->  00:00:20,830
out the occurrences there are and where
8

8

00:00:20,830  -->  00:00:21,970
they actually occur
9

9

00:00:21,970  -->  00:00:24,180
so for that we're going to use the find
10

10

00:00:24,180  -->  00:00:26,890
the start and the end methods so lets
11

11

00:00:26,890  -->  00:00:28,170
actually have a look at that
12

12

00:00:28,170  -->  00:00:30,270
so we can try looking for
13

13

00:00:30,270  -->  00:00:32,830
occurrences in a string by
14

14

00:00:32,830  -->  00:00:34,720
creating a loop so...
15

15

00:00:34,720  -->  00:01:05,170
...
16

16

00:01:05,170  -->  00:01:08,710
...as you can
17

17

00:01:08,710  -->  00:01:10,140
probably guess the find method looks for
18

18

00:01:10,140  -->  00:01:12,720
occurrences of a pattern used to create
19

19

00:01:12,720  -->  00:01:15,420
the matcher when it finds one the
20

20

00:01:15,420  -->  00:01:17,250
internal state of the matcher instance are
21

21

00:01:17,250  -->  00:01:19,890
updated and we can then call the start
22

22

00:01:19,890  -->  00:01:21,670
and end methods you can see me doing that
23

23

00:01:21,670  -->  00:01:24,850
on line 73 so the start method returns
24

24

00:01:24,850  -->  00:01:27,180
the index of the first character
25

25

00:01:27,180  -->  00:01:29,710
in the match and the end method
26

26

00:01:29,710  -->  00:01:31,170
returns the index of the character that
27

27

00:01:31,170  -->  00:01:33,130
occurs right after the last character in
28

28

00:01:33,130  -->  00:01:35,560
the match so we have two occurrences of
29

29

00:01:35,560  -->  00:01:37,780
h2 in our pattern you can see above
30

30

00:01:37,780  -->  00:01:40,390
and so we should expect to see two
31

31

00:01:40,390  -->  00:01:43,110
occurrences print to the console so lets
32

32

00:01:43,110  -->  00:01:44,200
actually just run this and see what
33

33

00:01:44,200  -->  00:01:51,810
happens now obviously something didn't
34

34

00:01:51,810  -->  00:01:54,570
work so all we are seeing is the true which
35

35

00:01:54,570  -->  00:01:57,060
is the result of the code on line 68
36

36

00:01:57,060  -->  00:01:58,680
printing out matcher out . matches so the
37

37

00:01:58,680  -->  00:02:00,180
loop in other words didn't actually find
38

38

00:02:00,180  -->  00:02:01,630
anything
39

39

00:02:01,630  -->  00:02:02,880
well there's a reason for that that's
40

40

00:02:02,880  -->  00:02:05,070
because we can only use a matcher once
41

41

00:02:05,070  -->  00:02:08,530
so matchers have an internal state it's
42

42

00:02:08,530  -->  00:02:10,990
updated whenever we use it if you recall
43

43

00:02:10,990  -->  00:02:13,390
I said that when we talked about find so
44

44

00:02:13,390  -->  00:02:15,580
the matches updated and then we can use
45

45

00:02:15,580  -->  00:02:17,420
the start and end methods
46

46

00:02:17,420  -->  00:02:19,550
but when we call the matches method so that
47

47

00:02:19,550  -->  00:02:21,080
we could print true false to the console
48

48

00:02:21,080  -->  00:02:23,980
the code on line 68 the internal state
49

49

00:02:23,980  -->  00:02:26,330
of the matcher was updated in such a way
50

50

00:02:26,330  -->  00:02:29,060
that we have to reset the matcher before
51

51

00:02:29,060  -->  00:02:31,310
we can use it again so we'll do that by
52

52

00:02:31,310  -->  00:02:33,950
using the reset method so basically the
53

53

00:02:33,950  -->  00:02:37,400
line before i'm going to do....
54

54

00:02:37,400  -->  00:02:42,290
...
55

55

00:02:42,290  -->  00:02:47,300
let's go run that alright so getting
56

56

00:02:47,300  -->  00:02:48,760
better this time because we've now got
57

57

00:02:48,760  -->  00:02:50,300
some output we got the occurrence one
58

58

00:02:50,300  -->  00:02:53,780
and colon 0 to 179 that's good in the
59

59

00:02:53,780  -->  00:02:55,850
sense that it's giving us something but
60

60

00:02:55,850  -->  00:02:57,350
it's obviously not what we expected to
61

61

00:02:57,350  -->  00:03:00,230
see so what's actually going on now well
62

62

00:03:00,230  -->  00:03:01,670
the regular expression we used to
63

63

00:03:01,670  -->  00:03:04,400
determine if h2 occurs anywhere in
64

64

00:03:04,400  -->  00:03:06,730
the text isn't specific enough when it
65

65

00:03:06,730  -->  00:03:08,630
comes to pinpointing how many
66

66

00:03:08,630  -->  00:03:10,540
occurrences there are and also where
67

67

00:03:10,540  -->  00:03:13,010
they're so we have to use a broad
68

68

00:03:13,010  -->  00:03:14,660
expression with the matches method
69

69

00:03:14,660  -->  00:03:17,030
because the entire text have to match
70

70

00:03:17,030  -->  00:03:19,220
now because we used such a broad
71

71

00:03:19,220  -->  00:03:20,150
expression
72

72

00:03:20,150  -->  00:03:21,700
there's only one occurrence of a match
73

73

00:03:21,700  -->  00:03:23,150
which in these cases of the entire
74

74

00:03:23,150  -->  00:03:26,200
string and the start and end indices are for
75

75

00:03:26,200  -->  00:03:28,940
the entire string but now we're looking
76

76

00:03:28,940  -->  00:03:30,760
to find the occurrences within a string
77

77

00:03:30,760  -->  00:03:32,780
so we don't need the entire string to
78

78

00:03:32,780  -->  00:03:35,230
match we only care about matching parts
79

79

00:03:35,230  -->  00:03:37,450
of the text so that we can go back to
80

80

00:03:37,450  -->  00:03:40,880
using h2 as the regular expression
81

81

00:03:40,880  -->  00:03:43,540
let's go back and change the pattern
82

82

00:03:43,540  -->  00:03:47,120
on line 65 going to change that to just
83

83

00:03:47,120  -->  00:03:50,000
...so it was
84

84

00:03:50,000  -->  00:03:53,180
actually a standard HTML tag so now if
85

85

00:03:53,180  -->  00:03:58,700
we run this we can see that we've now
86

86

00:03:58,700  -->  00:04:00,290
got the right results we've got two
87

87

00:04:00,290  -->  00:04:01,880
occurrences and that's obviously the
88

88

00:04:01,880  -->  00:04:02,930
code here
89

89

00:04:02,930  -->  00:04:07,940
h2 and h2 keep in mind that the index
90

90

00:04:07,940  -->  00:04:10,190
return by the end method is actually the
91

91

00:04:10,190  -->  00:04:12,530
index for the first character that comes
92

92

00:04:12,530  -->  00:04:15,310
after a match now this obviously works
93

93

00:04:15,310  -->  00:04:16,940
what we've done but when you're using a
94

94

00:04:16,940  -->  00:04:19,370
matcher to find multiple occurrences of
95

95

00:04:19,370  -->  00:04:21,470
a pattern theirs actually an easy way to do
96

96

00:04:21,470  -->  00:04:23,450
it now we can actually use what's called
97

97

00:04:23,450  -->  00:04:26,240
a group so use a group in a regular
98

98

00:04:26,240  -->  00:04:29,120
expression we use parentheses so in this
99

99

00:04:29,120  -->  00:04:31,040
case we're going to use the regular
100

100

00:04:31,040  -->  00:04:33,770
expression as we've got on line 65 we're going
101

101

00:04:33,770  -->  00:04:36,080
to surround that in parentheses so we're
102

102

00:04:36,080  -->  00:04:37,310
going to come up here and change that
103

103

00:04:37,310  -->  00:04:40,190
...
104

104

00:04:40,190  -->  00:04:42,800
...and keep in mind that the
105

105

00:04:42,800  -->  00:04:44,930
parentheses aren't part of the pattern that
106

106

00:04:44,930  -->  00:04:47,090
has to be matched when working with
107

107

00:04:47,090  -->  00:04:49,040
groups we access them using the group
108

108

00:04:49,040  -->  00:04:52,970
method in the matcher class so one version
109

109

00:04:52,970  -->  00:04:55,070
of the method takes an int parameter
110

110

00:04:55,070  -->  00:04:56,480
which is the group number this is for
111

111

00:04:56,480  -->  00:04:58,700
the group method in the matcher class now
112

112

00:04:58,700  -->  00:05:00,950
when working with groups the entire
113

113

00:05:00,950  -->  00:05:03,350
character sequences is group 0 so when we
114

114

00:05:03,350  -->  00:05:05,360
want to access a specific group we
115

115

00:05:05,360  -->  00:05:06,890
actually start counting from the number
116

116

00:05:06,890  -->  00:05:09,170
one so let's actually look at example
117

117

00:05:09,170  -->  00:05:10,820
we're going to use groups to find
118

118

00:05:10,820  -->  00:05:14,390
occurrences of h2 so what I've done is I
119

119

00:05:14,390  -->  00:05:16,430
started making a change to line 65 but
120

120

00:05:16,430  -->  00:05:18,770
i'm going to just undo that and what
121

121

00:05:18,770  -->  00:05:21,800
I'll do is instead I'm going to come
122

122

00:05:21,800  -->  00:05:22,820
down here and we're going to create
123

123

00:05:22,820  -->  00:05:26,540
another string...
124

124

00:05:26,540  -->  00:06:07,100
...
125

125

00:06:07,100  -->  00:06:08,120
..
126

126

00:06:08,120  -->  00:06:17,480
...
127

127

00:06:17,480  -->  00:06:18,950
because we've done that we know that we needed
128

128

00:06:18,950  -->  00:06:20,870
to do a reset if we want to reuse a matcher so...
129

129

00:06:20,870  -->  00:06:45,020
...
130

130

00:06:45,020  -->  00:06:47,780
...so here we've updated
131

131

00:06:47,780  -->  00:06:49,580
the regular expression that we're going
132

132

00:06:49,580  -->  00:06:51,710
we're going to compile which on line 78
133

133

00:06:51,710  -->  00:06:54,980
parentheses now and note that the loop
134

134

00:06:54,980  -->  00:06:56,600
is now different to what it was before
135

135

00:06:56,600  -->  00:06:59,900
using the previous matcher . find for each
136

136

00:06:59,900  -->  00:07:01,790
occurrence we call the group method with
137

137

00:07:01,790  -->  00:07:04,040
a value one and we have more than one
138

138

00:07:04,040  -->  00:07:06,290
occurrence but we only have one group in
139

139

00:07:06,290  -->  00:07:08,630
our regular expression so groups 0 is
140

140

00:07:08,630  -->  00:07:10,850
the entire character sequence so Group
141

141

00:07:10,850  -->  00:07:13,280
one is our h2 in parenthesis group
142

142

00:07:13,280  -->  00:07:16,070
which is more or less that's defined on line 78
143

143

00:07:16,070  -->  00:07:18,530
so let's run this and see what happens
144

144

00:07:18,530  -->  00:07:23,810
you can see we've got a false there for
145

145

00:07:23,810  -->  00:07:25,670
the match then we're got our two
146

146

00:07:25,670  -->  00:07:28,070
occurrences showing not very exciting
147

147

00:07:28,070  -->  00:07:30,110
but we know that there's two occurrences
148

148

00:07:30,110  -->  00:07:33,590
of h2 but so what would be nice to be
149

149

00:07:33,590  -->  00:07:35,390
able to extract every h2 from the
150

150

00:07:35,390  -->  00:07:37,580
text in its entirety which would include
151

151

00:07:37,580  -->  00:07:40,100
the opening tag the text and the closing
152

152

00:07:40,100  -->  00:07:42,860
tag so this is actually very easy to do
153

153

00:07:42,860  -->  00:07:45,200
all we have to do is change our regular
154

154

00:07:45,200  -->  00:07:48,560
expression to match the opening tag h2
155

155

00:07:48,560  -->  00:07:51,260
text and then the closing tag so let's
156

156

00:07:51,260  -->  00:07:53,210
actually go ahead try changing something
157

157

00:07:53,210  -->  00:07:55,640
to see how that would work and come back
158

158

00:07:55,640  -->  00:07:59,270
up to our group pattern h2 group pattern and we are
159

159

00:07:59,270  -->  00:08:01,250
going to put a . after the parentheses
160

160

00:08:01,250  -->  00:08:07,880
and star then start the tag / h 2 with
161

161

00:08:07,880  -->  00:08:11,330
closing h2 tag like so and it has to
162

162

00:08:11,330  -->  00:08:13,790
have an ending parentheses then we get
163

163

00:08:13,790  -->  00:08:17,210
rid of that first closing parenthesis so
164

164

00:08:17,210  -->  00:08:18,620
surrounding the entire regular
165

165

00:08:18,620  -->  00:08:20,210
expression in one parentheses there
166

166

00:08:20,210  -->  00:08:22,850
because that's our group so basically
167

167

00:08:22,850  -->  00:08:24,170
what we're saying here is that we want
168

168

00:08:24,170  -->  00:08:26,960
the opening tag the closing tag and
169

169

00:08:26,960  -->  00:08:28,280
everything in between
170

170

00:08:28,280  -->  00:08:31,040
if you remember that the dot means any
171

171

00:08:31,040  -->  00:08:33,350
character and then the star quantify
172

172

00:08:33,350  -->  00:08:36,200
mean zero or more so . star in this case
173

173

00:08:36,200  -->  00:08:37,970
we'll match one or more of any character
174

174

00:08:37,970  -->  00:08:44,140
so if we actually run that
175

175

00:08:44,140  -->  00:08:45,550
it's starting to look like we want but
176

176

00:08:45,550  -->  00:08:47,420
clearly it's not exactly what we want
177

177

00:08:47,420  -->  00:08:48,980
because what happened is the regular
178

178

00:08:48,980  -->  00:08:52,100
expression has grabbed everything from
179

179

00:08:52,100  -->  00:08:54,610
the opening tag of the first h2 to the
180

180

00:08:54,610  -->  00:08:57,820
closing tag for the second h2 so the
181

181

00:08:57,820  -->  00:08:59,320
question would be does that matcher
182

182

00:08:59,320  -->  00:09:00,470
regular expression
183

183

00:09:00,470  -->  00:09:02,660
well actually yes it does after all the
184

184

00:09:02,660  -->  00:09:05,080
strings said so we got start with h2 and
185

185

00:09:05,080  -->  00:09:08,620
ends with the / h2 and has text in
186

186

00:09:08,620  -->  00:09:10,240
the middle but it's just obviously not
187

187

00:09:10,240  -->  00:09:11,600
what we were expecting
188

188

00:09:11,600  -->  00:09:13,450
and the reason this is happening is due
189

189

00:09:13,450  -->  00:09:15,490
to a concept that i haven't discussed
190

190

00:09:15,490  -->  00:09:19,240
yet greedy quantifiers vs reluctant or
191

191

00:09:19,240  -->  00:09:22,810
lazy quantifies so these star quantifier
192

192

00:09:22,810  -->  00:09:25,420
is what's called a greedy quantifier so
193

193

00:09:25,420  -->  00:09:28,040
it'll grab as much text as it can
194

194

00:09:28,040  -->  00:09:30,070
so when it's doing its matching it
195

195

00:09:30,070  -->  00:09:32,050
doesn't actually stopped at the h2
196

196

00:09:32,050  -->  00:09:35,050
the closing h2 tag it actually keeps
197

197

00:09:35,050  -->  00:09:36,760
going to see if more of the character
198

198

00:09:36,760  -->  00:09:39,110
sequence can result in a match so in our
199

199

00:09:39,110  -->  00:09:40,910
example grabbing more text can still
200

200

00:09:40,910  -->  00:09:44,440
result in a match as we've seen here now
201

201

00:09:44,440  -->  00:09:46,630
we want to use a lazy quantifier one
202

202

00:09:46,630  -->  00:09:49,040
that does the minimum amount of work so
203

203

00:09:49,040  -->  00:09:51,050
once it finds a match it doesn't keep
204

204

00:09:51,050  -->  00:09:52,510
looking to see if it can include more
205

205

00:09:52,510  -->  00:09:54,980
characters in the match so it may still
206

206

00:09:54,980  -->  00:09:56,720
find more matches and later parts of the
207

207

00:09:56,720  -->  00:09:58,910
character sequence but each match will
208

208

00:09:58,910  -->  00:10:00,880
contain the minimum number of characters
209

209

00:10:00,880  -->  00:10:05,420
required for match know the ? quantifier
210

210

00:10:05,420  -->  00:10:08,560
means one or zero occurrences is a lazy
211

211

00:10:08,560  -->  00:10:11,320
quantifier so we can use it to turn a
212

212

00:10:11,320  -->  00:10:14,120
greedy quantifier into a lazy quantifier
213

213

00:10:14,120  -->  00:10:16,490
by actually adding it after the
214

214

00:10:16,490  -->  00:10:17,830
quantifier I know that sounds confusing
215

215

00:10:17,830  -->  00:10:19,990
but we'll see an example of that now
216

216

00:10:19,990  -->  00:10:21,050
since it wants
217

217

00:10:21,050  -->  00:10:23,920
no or only one occurrence the moment
218

218

00:10:23,920  -->  00:10:26,320
the greedy quantifier that it's modifying
219

219

00:10:26,320  -->  00:10:28,610
finds a match it will stop grabbing
220

220

00:10:28,610  -->  00:10:30,170
text that's obviously what we want to do
221

221

00:10:30,170  -->  00:10:31,870
here so that we can actually separate
222

222

00:10:31,870  -->  00:10:34,930
our h2 occurrences and the reason
223

223

00:10:34,930  -->  00:10:36,290
it will stop at that point is the
224

224

00:10:36,290  -->  00:10:38,320
question mark quantify will be satisfied
225

225

00:10:38,320  -->  00:10:40,930
that point so let's give that a try
226

226

00:10:40,930  -->  00:10:42,350
so all we really need to do is come up to
227

227

00:10:42,350  -->  00:10:46,450
our pattern on line 78 h2 group patterns and
228

228

00:10:46,450  -->  00:10:49,100
put a question mark straight after the
229

229

00:10:49,100  -->  00:10:51,920
start quantifier and again by doing by
230

230

00:10:51,920  -->  00:10:53,770
or adding the question mark after the star
231

231

00:10:53,770  -->  00:10:56,890
return the star quantifier into a lazy
232

232

00:10:56,890  -->  00:10:57,530
quantifier
233

233

00:10:57,530  -->  00:11:00,080
so now that we run when we run this we
234

234

00:11:00,080  -->  00:11:01,460
should see we've got separate
235

235

00:11:01,460  -->  00:11:05,480
occurrences of h2 and h2 tags and you
236

236

00:11:05,480  -->  00:11:07,370
can see we've now got two versions we
237

237

00:11:07,370  -->  00:11:10,160
got a subheading h2 tags and the text
238

238

00:11:10,160  -->  00:11:11,570
in between and likewise for the
239

239

00:11:11,570  -->  00:11:14,330
summaries as well so now you've seen how we
240

240

00:11:14,330  -->  00:11:17,450
could use matches to parse HTML code and
241

241

00:11:17,450  -->  00:11:18,590
hopefully you now thinking that's a
242

242

00:11:18,590  -->  00:11:19,790
little bit more exciting than what we've
243

243

00:11:19,790  -->  00:11:21,410
done so far
244

244

00:11:21,410  -->  00:11:23,720
one quick note if we weren't interested
245

245

00:11:23,720  -->  00:11:26,480
in empty h2 tags and that are tags with no
246

246

00:11:26,480  -->  00:11:27,860
texts between the opening and closing
247

247

00:11:27,860  -->  00:11:31,280
tag would use the regular expression h2
248

248

00:11:31,280  -->  00:11:35,480
. + ? and then the closing h2 tag
249

249

00:11:35,480  -->  00:11:38,660
instead so the plus as supposed to the
250

250

00:11:38,660  -->  00:11:40,760
star wants one or more occurrences
251

251

00:11:40,760  -->  00:11:43,820
whereas the star except zero or more
252

252

00:11:43,820  -->  00:11:47,360
occurrences and we can also use multiple
253

253

00:11:47,360  -->  00:11:50,690
groups for example with we just one of
254

254

00:11:50,690  -->  00:11:52,160
the texts between the tags are not
255

255

00:11:52,160  -->  00:11:54,320
actually the tags themselves we could
256

256

00:11:54,320  -->  00:11:56,900
change that up a little bit and so here
257

257

00:11:56,900  -->  00:11:58,280
we're going to add a multiple or
258

258

00:11:58,280  -->  00:12:00,560
another tag to our text group so let's
259

259

00:12:00,560  -->  00:12:03,590
write some new code here so....
260

260

00:12:03,590  -->  00:13:01,460
...
261

261

00:13:01,460  -->  00:13:04,730
..
262

262

00:13:04,730  -->  00:13:22,940
...
263

263

00:13:22,940  -->  00:13:26,240
..
264

264

00:13:26,240  -->  00:13:27,440
remember we're trying to extract the
265

265

00:13:27,440  -->  00:13:29,630
texts between the tags and not the tags
266

266

00:13:29,630  -->  00:13:32,360
themselves so we defined three groups
267

267

00:13:32,360  -->  00:13:35,240
on line 88 we're looking for a pattern
268

268

00:13:35,240  -->  00:13:39,680
that matches h2 . + ? and then the
269

269

00:13:39,680  -->  00:13:42,410
closing h2 tag so we want the h2
270

270

00:13:42,410  -->  00:13:43,760
part of the match to be assigned to
271

271

00:13:43,760  -->  00:13:46,250
group 1 remembering the group 0 is the
272

272

00:13:46,250  -->  00:13:50,420
entire pattern and the . + ? part of the
273

273

00:13:50,420  -->  00:13:51,980
match that should be assigned to group 2
274

274

00:13:51,980  -->  00:13:55,250
and then the closing h2 tag part of
275

275

00:13:55,250  -->  00:13:56,840
the match should be assigned to group 3
276

276

00:13:56,840  -->  00:13:59,990
so you can see that in the while loop
277

277

00:13:59,990  -->  00:14:01,190
I've written out the parts that are
278

278

00:14:01,190  -->  00:14:02,840
assigned to a group 2 and that should
279

279

00:14:02,840  -->  00:14:04,670
correspond to the h2 text in other
280

280

00:14:04,670  -->  00:14:07,070
words that text between the h2 tag and
281

281

00:14:07,070  -->  00:14:08,660
the closing h2 tag
282

282

00:14:08,660  -->  00:14:09,920
let's run this just to confirm that it
283

283

00:14:09,920  -->  00:14:14,390
works and you can see we've got some
284

284

00:14:14,390  -->  00:14:16,400
heading and summary outputting which is
285

285

00:14:16,400  -->  00:14:18,440
the texts between the opening and
286

286

00:14:18,440  -->  00:14:20,480
closing h2 tag so that's working nicely
287

287

00:14:20,480  -->  00:14:24,580
you can actually also use matches to
288

288

00:14:24,580  -->  00:14:26,830
find and replace parts of a string using
289

289

00:14:26,830  -->  00:14:29,420
the replace first and replace all methods
290

290

00:14:29,420  -->  00:14:32,480
now for more information about other
291

291

00:14:32,480  -->  00:14:34,040
methods in the matchers class and what you
292

292

00:14:34,040  -->  00:14:35,120
can do with them
293

293

00:14:35,120  -->  00:14:36,580
I suggest you refer to the match the
294

294

00:14:36,580  -->  00:14:38,180
documentation and i'll just bring that
295

295

00:14:38,180  -->  00:14:41,450
to link up for you very useful
296

296

00:14:41,450  -->  00:14:43,190
information on this link in Oracle's
297

297

00:14:43,190  -->  00:14:46,460
website lots of good information there
298

298

00:14:46,460  -->  00:14:48,620
about matchers so we're make sure you
299

299

00:14:48,620  -->  00:14:50,630
check that out and read up on it to see
300

300

00:14:50,630  -->  00:14:51,650
what else you can actually do with this
301

301

00:14:51,650  -->  00:14:52,400
class
302

302

00:14:52,400  -->  00:14:54,920
alright so I'm going to finish the video
303

303

00:14:54,920  -->  00:14:56,900
here now in the next one we're going to
304

304

00:14:56,900  -->  00:14:59,360
talk about using logical operators when
305

305

00:14:59,360  -->  00:15:01,790
writing regular expressions see you in
306

306

00:15:01,790  -->  00:15:07,330
the next video
