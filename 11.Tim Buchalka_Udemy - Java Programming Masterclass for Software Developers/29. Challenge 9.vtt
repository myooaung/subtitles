WEBVTT
1
1

00:00:04.260  -->  00:00:07.350
ok so this is the last challenge and in
2

2

00:00:07.350  -->  00:00:09.140
fact the last video in this section on
3

3

00:00:09.140  -->  00:00:12.120
concurrency and threads and what I've done is
4

4

00:00:12.120  -->  00:00:15.480
I've actually created a new class called
5

5

00:00:15.480  -->  00:00:16.410
challenge
6

6

00:00:16.410  -->  00:00:19.940
9 and actually
7

7

00:00:19.940  -->  00:00:22.710
created new versions of the tutor and
8

8

00:00:22.710  -->  00:00:25.230
student classes that are all in
9

9

00:00:25.230  -->  00:00:26.760
all contained in this challenging 9
10

10

00:00:26.760  -->  00:00:29.690
class and what I've done is use
11

11

00:00:29.690  -->  00:00:31.770
synchronize blocks as well as a way to
12

12

00:00:31.770  -->  00:00:34.280
notify all so go down and have a look at the code
13

13

00:00:34.280  -->  00:00:36.350
you can see we're no longer
14

14

00:00:36.350  -->  00:00:38.900
synchronizing the entire method and said
15

15

00:00:38.900  -->  00:00:40.850
we're synchronizing just blocks in the
16

16

00:00:40.850  -->  00:00:42.780
tutor study time as you can see here just a
17

17

00:00:42.780  -->  00:00:45.300
block of code as well as the students .
18

18

00:00:45.300  -->  00:00:47.190
hand in assignment or the new student in
19

19

00:00:47.190  -->  00:00:49.280
this case and in assignment so we are synchronizing
20

20

00:00:49.280  -->  00:00:51.740
just that block of code likewise
21

21

00:00:51.740  -->  00:00:53.330
for new tutor we are doing the same thing as
22

22

00:00:53.330  -->  00:00:55.280
well and we'll assume that the
23

23

00:00:55.280  -->  00:00:56.570
synchronized blocks are the only
24

24

00:00:56.570  -->  00:00:57.870
critical sections in our application
25

25

00:00:57.870  -->  00:01:01.920
with that said we're definitely yeah we were
26

26

00:01:01.920  -->  00:01:03.890
definitely over synchronizing the code
27

27

00:01:03.890  -->  00:01:06.470
before so the new tutor
28

28

00:01:06.470  -->  00:01:07.260
class
29

29

00:01:07.260  -->  00:01:09.900
it's no longer sleeping is actually
30

30

00:01:09.900  -->  00:01:11.640
called weight instead you can see on line
31

31

00:01:11.640  -->  00:01:14.760
45 so when the student thread execute
32

32

00:01:14.760  -->  00:01:16.980
the hand in assignment thread going to
33

33

00:01:16.980  -->  00:01:19.830
notify the tutor thread...
34

34

00:01:19.830  -->  00:01:22.140
...and tutor thread
35

35

00:01:22.140  -->  00:01:24.600
will wake up and run so both
36

36

00:01:24.600  -->  00:01:26.730
threads are actually acquiring the locks
37

37

00:01:26.730  -->  00:01:29.940
in the same order first the tutor lock then
38

38

00:01:29.940  -->  00:01:31.740
the student lock so everything looks
39

39

00:01:31.740  -->  00:01:33.750
great at this point in time so actually
40

40

00:01:33.750  -->  00:01:35.880
happens when we run this we run this
41

41

00:01:35.880  -->  00:01:41.220
challenge 9 . main and you can see
42

42

00:01:41.220  -->  00:01:42.540
we've still got a problem we still
43

43

00:01:42.540  -->  00:01:44.790
deadlocked so can you figure out base on
44

44

00:01:44.790  -->  00:01:47.010
this code now why that's still the
45

45

00:01:47.010  -->  00:01:50.520
case so download if necessary the code
46

46

00:01:50.520  -->  00:01:52.470
and study it for yourself and try to
47

47

00:01:52.470  -->  00:01:54.360
figure out why its still deadlocked or
48

48

00:01:54.360  -->  00:01:56.280
still deadlocking when we're running it and pause
49

49

00:01:56.280  -->  00:01:57.450
the video while you're doing that and
50

50

00:01:57.450  -->  00:01:58.500
then when you're ready to come back and
51

51

00:01:58.500  -->  00:02:01.290
find out why start the video again and
52

52

00:02:01.290  -->  00:02:02.720
will go through some reasons why
53

53

00:02:02.720  -->  00:02:04.620
this is probably happening so pause the video now
54

54

00:02:04.620  -->  00:02:06.630
and i'll see you when you come back
55

55

00:02:06.630  -->  00:02:11.130
ok so welcome back lets discuss a
56

56

00:02:11.130  -->  00:02:13.070
solution or find out more about what this
57

57

00:02:13.070  -->  00:02:15.740
problem is all about one thing that this
58

58

00:02:15.740  -->  00:02:17.140
example does
59

59

00:02:17.140  -->  00:02:19.510
is demonstrates just how tricky it
60

60

00:02:19.510  -->  00:02:22.420
can be to work with threads so let's
61

61

00:02:22.420  -->  00:02:24.280
take a look at the sequence to see why
62

62

00:02:24.280  -->  00:02:26.170
we're still deadlocked in this scenario
63

63

00:02:26.170  -->  00:02:29.020
firstly the new tutor thread calls the
64

64

00:02:29.020  -->  00:02:32.230
tutor . study time method and acquires
65

65

00:02:32.230  -->  00:02:34.570
the new tutor lock and then the new student
66

66

00:02:34.570  -->  00:02:38.020
lock now the thread reaches the
67

67

00:02:38.020  -->  00:02:39.910
this . wait line of code that showed
68

68

00:02:39.910  -->  00:02:42.190
you earlier and when it executes wait
69

69

00:02:42.190  -->  00:02:45.480
it releases the new tutor lock and by the way
70

70

00:02:45.480  -->  00:02:46.690
when I'm talking about
71

71

00:02:46.690  -->  00:02:49.810
tutor and student here that's new tutor and
72

72

00:02:49.810  -->  00:02:51.850
new student that's the new classes I
73

73

00:02:51.850  -->  00:02:54.100
made in that challenge 9 source code and
74

74

00:02:54.100  -->  00:02:55.870
refers them from this point on as tutor and students
75

75

00:02:55.870  -->  00:02:59.140
just for simplicity anyway recall that
76

76

00:02:59.140  -->  00:03:01.870
the wait and notify all methods must be
77

77

00:03:01.870  -->  00:03:03.730
called from within synchronized blocks
78

78

00:03:03.730  -->  00:03:06.730
to call wait on an object a thread
79

79

00:03:06.730  -->  00:03:08.980
must be holding the objects lock when it
80

80

00:03:08.980  -->  00:03:12.040
calls wait it releases the lock so the
81

81

00:03:12.040  -->  00:03:13.630
student thread runs the hand in
82

82

00:03:13.630  -->  00:03:16.570
assignment method and it gets the tutor lock
83

83

00:03:16.570  -->  00:03:19.150
and calls get progress report and then
84

84

00:03:19.150  -->  00:03:21.220
tries to get the student lock but tutor
85

85

00:03:21.220  -->  00:03:22.750
thread is still holding it
86

86

00:03:22.750  -->  00:03:25.290
and because of that the students thread
87

87

00:03:25.290  -->  00:03:28.180
can't notify the tutor thread at this point we
88

88

00:03:28.180  -->  00:03:30.040
obviously got a deadlock and that's
89

89

00:03:30.040  -->  00:03:34.100
what was happening in the code
90

90

00:03:34.100  -->  00:03:37.010
so the tricky part here is that it looks
91

91

00:03:37.010  -->  00:03:38.720
like the two threads have to obtain the
92

92

00:03:38.720  -->  00:03:41.360
locks in the same order from a casual
93

93

00:03:41.360  -->  00:03:42.980
look at the code it doesn't seem
94

94

00:03:42.980  -->  00:03:45.020
possible for a thread to get the
95

95

00:03:45.020  -->  00:03:46.610
tutor lock and then block on getting
96

96

00:03:46.610  -->  00:03:49.040
the student lock but because the wait
97

97

00:03:49.040  -->  00:03:51.290
method results in a thread releasing the
98

98

00:03:51.290  -->  00:03:53.570
lock until it's notified the student
99

99

00:03:53.570  -->  00:03:55.340
thread can actually obtain a tutor lock
100

100

00:03:55.340  -->  00:03:57.440
or the to the thread is still holding
101

101

00:03:57.440  -->  00:04:01.810
the student lock
102

102

00:04:01.810  -->  00:04:03.380
so we can add another item
103

103

00:04:03.380  -->  00:04:05.000
to the what to check if the code is
104

104

00:04:05.000  -->  00:04:07.640
deadlocking list now so take a look at
105

105

00:04:07.640  -->  00:04:09.980
places where the code calls wait and
106

106

00:04:09.980  -->  00:04:12.200
see if that may cause a deadlock now
107

107

00:04:12.200  -->  00:04:14.060
the wait method results in a thread
108

108

00:04:14.060  -->  00:04:16.250
releasing a lock before it is actually
109

109

00:04:16.250  -->  00:04:19.070
exited the synchronized block and it's
110

110

00:04:19.070  -->  00:04:22.160
premature albeit temporarily release can
111

111

00:04:22.160  -->  00:04:23.840
lead to problems if we're not careful
112

112

00:04:23.840  -->  00:04:27.080
so how do we go about fixing this well
113

113

00:04:27.080  -->  00:04:28.520
that would really depend on the code
114

114

00:04:28.520  -->  00:04:30.860
perhaps using reentrant lock objects
115

115

00:04:30.860  -->  00:04:31.820
will work better
116

116

00:04:31.820  -->  00:04:34.010
we could have the tutor thread release the
117

117

00:04:34.010  -->  00:04:36.380
student lock before it calls wait and then
118

118

00:04:36.380  -->  00:04:38.210
try and require it again once it's
119

119

00:04:38.210  -->  00:04:40.250
woken up so there you go that's a
120

120

00:04:40.250  -->  00:04:42.800
challenge 9 so hoped you enjoyed the
121

121

00:04:42.800  -->  00:04:44.060
challenges that in fact this entire
122

122

00:04:44.060  -->  00:04:45.110
section
123

123

00:04:45.110  -->  00:04:47.060
this brings the concurrency and thread
124

124

00:04:47.060  -->  00:04:49.520
section too a close so thanks for watching
125

125

00:04:49.520  -->  00:04:50.990
as always and I'll see you in the next
126

126

00:04:50.990  -->  00:04:57.100
section in the course
