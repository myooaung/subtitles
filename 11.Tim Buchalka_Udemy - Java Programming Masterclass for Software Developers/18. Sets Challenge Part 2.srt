1
1

00:00:05,210  -->  00:00:09,930
so in a previous previous video we started the
solution or I started the solution to the
2

2

00:00:09,930  -->  00:00:14,330
challenge set challenge lets to continue
that now and we need to do is create
3

3

00:00:14,330  -->  00:00:18,980
sub classes I mentioned that I was going
to create some sub classes we want one
4

4

00:00:18,980  -->  00:00:23,930
for planet one for dwarf planet and one for
moon so the sub classes is going to
5

5

00:00:23,930  -->  00:00:28,300
be very simple at least in this example now in
a real application modeling objects in
6

6

00:00:28,300  -->  00:00:32,520
the universe is probably a lot more
information held for the various types of
7

7

00:00:32,520  -->  00:00:36,210
heavenly bodies and different types of
bodies have different fields in
8

8

00:00:36,210  -->  00:00:37,440
addition to the common ones
9

9

00:00:37,440  -->  00:00:41,170
now we're not gonna do that we gonna keep
it pretty simple so we will create three
10

10

00:00:41,170  -->  00:00:46,760
subclasses because obviously be one for each heavenly body type let's start with Planet go
11

11

00:00:46,760  -->  00:00:57,070
ahead and create the plant class....and
we're going to do is extends.....
12

12

00:00:57,070  -->  00:01:01,150
....
13

13

00:01:01,150  -->  00:01:08,800
...constructor is almost correct but what we want to do is we wanna
14

14

00:01:08,800  -->  00:01:11,840
change that parameter we don't want to
accept body types as a parameter
15

15

00:01:11,840  -->  00:01:16,590
on the constructor for planet but rather what we want
to do is accept the name of the orbital
16

16

00:01:16,590  -->  00:01:24,860
period and the reasons we know there's a planet
and we want to pass the enum constant for planets
17

17

00:01:24,860  -->  00:01:32,500
.....then the other
thing we want to override is
18

18

00:01:32,500  -->  00:01:37,000
override the add satellite and you will see
why we gonna do that shortly let's go
19

19

00:01:37,000  -->  00:01:43,180
ahead and do that we are gonna override
override the add satellite and
20

20

00:01:43,180  -->  00:01:46,750
you can see that function has been written by default with the right parameters
21

21

00:01:46,750  -->  00:01:51,610
which is good what we wanted to do here
is we now for a particular planet
22

22

00:01:51,610  -->  00:01:57,460
the body types can be satellites
can only be moon so for our planet it is
23

23

00:01:57,460  -->  00:02:01,590
valid to do a test for moons so we are gonna add that code in why we didn't do that before in the generic
24

24

00:02:01,590  -->  00:02:09,780
heavenly body class it makes sense to do that test
here so we're gonna put.....
25

25

00:02:09,780  -->  00:02:25,560
.....
26

26

00:02:25,560  -->  00:02:29,790
......
27

27

00:02:29,790  -->  00:02:33,010
...so you can see that we're actually
28

28

00:02:33,010  -->  00:02:37,230
performing the add by calling the super
which is the add satellite method from
29

29

00:02:37,230  -->  00:02:40,810
the heavenly body class but again we are
checking to see whether this is a moon
30

30

00:02:40,810  -->  00:02:45,540
because in terms of satellites a moon
is valid for a planet ok so that's
31

31

00:02:45,540  -->  00:02:58,620
planet and the next one is too dwarf planet lets go
ahead and add that...
32

32

00:02:58,620  -->  00:03:04,230
and do the same extends.....
33

33

00:03:04,230  -->  00:03:11,350
our constructor is gonna be similar to what
we created for the planet....
34

34

00:03:11,350  -->  00:03:15,850
.....
35

35

00:03:15,850  -->  00:03:19,760
...which is ultimately going to call the heavenly
body constructor because we know what
36

36

00:03:19,760  -->  00:03:24,070
type we are dwarf planet and that's all
we're going to do we aren't  going to override
37

37

00:03:24,070  -->  00:03:32,530
the add satellites and moon is going to be
very similar so.....
38

38

00:03:32,530  -->  00:03:35,350
....and extends heavenly body again
39

39

00:03:35,350  -->  00:03:41,800
....and our constructor...
40

40

00:03:41,800  -->  00:03:53,470
...so that is our three sub classes defined
41

41

00:03:53,470  -->  00:03:58,150
so what we can do now is go back to the original main where we had our code in
42

42

00:03:58,150  -->  00:04:03,350
and this is the original code
that we had when we are testing and
43

43

00:04:03,350  -->  00:04:07,500
obviously we got some errors now because we
changed parameters but the one we want to look
44

44

00:04:07,500  -->  00:04:13,330
at is this first one here on line 13 and what I'm
gonna do now is comment out the rest of
45

45

00:04:13,330  -->  00:04:21,290
this code
46

46

00:04:21,290  -->  00:04:26,060
and what we wanna do is where we've got heavenly body
temp = new HeavenlyBody and we are passing
47

47

00:04:26,060  -->  00:04:31,150
the 2 parameters we want to change that
we want to put heavenly body temp equals new
48

48

00:04:31,150  -->  00:04:37,500
in this case you want to a planet
so do planet to make it valid that is now correctly using the
49

49

00:04:37,500  -->  00:04:42,590
sub class and the error goes away its because
remembering the third parameter is in
50

50

00:04:42,590  -->  00:04:46,770
the constructor of planet which
ultimately calls the heavenly body with
51

51

00:04:46,770  -->  00:04:47,690
that right
52

52

00:04:47,690  -->  00:04:54,630
3rd parameter being the body type so lets fix this now so they are all valid come down
53

53

00:04:54,630  -->  00:05:05,690
here we are going to un-comment this again and let's
go ahead and actually replace and
54

54

00:05:05,690  -->  00:05:13,210
I actually need to un comment this code as well so what we can do their is take a copy of planet
55

55

00:05:13,210  -->  00:05:19,750
and paste it in here for all the planets
that is a moon we don't want to do that yet
56

56

00:05:19,750  -->  00:05:30,710
planet moons of Jupiter planet we got Saturn planet
planet planet Pluto is technically a dwarf
57

57

00:05:30,710  -->  00:05:35,270
dwarf planet I'll put that as a
planet for now and what we want do now
58

58

00:05:35,270  -->  00:06:02,090
is for the other ones for the moons let's actually add those make that a moon and fix the others well......so we should have all the errors fixed at the moment now
59

59

00:06:02,090  -->  00:06:13,810
lets comment out the rest of the code we got a few other things we want to fix and notice we need to fix this one their is a second Pluto
60

60

00:06:13,810  -->  00:06:17,190
in the original code and just
incidental there's nothing stopping us
61

61

00:06:17,190  -->  00:06:23,080
from leaving that as a heavenly body then
adding the third parameter....
62

62

00:06:23,080  -->  00:06:30,530
.....that's
63

63

00:06:30,530  -->  00:06:34,000
valid as well just wanted to point that but I think in this case to be
64

64

00:06:34,000  -->  00:06:42,340
consistent lets changed this and make it a planet
so now we got them all being added and we've got
65

65

00:06:42,340  -->  00:06:47,260
various printouts what we can do
is change remember we add the .toString
66

66

00:06:47,260  -->  00:06:50,720
so we can actually start using
this in some of our outputs so let's go ahead
67

67

00:06:50,720  -->  00:06:55,270
and do that so down here for example
after we added Pluto what we can do is
68

68

00:06:55,270  -->  00:07:04,600
in that for loop we can change that and do something
like print.....and by doing that its
69

69

00:07:04,600  -->  00:07:08,130
going to automatically invoke our toString method and of course we have overriden that if you
70

70

00:07:08,130  -->  00:07:19,220
recall so if you run that.....and
notice how the enum is printing I
71

71

00:07:19,220  -->  00:07:22,880
mentioned that that would print out
rather than printing out a number or
72

72

00:07:22,880  -->  00:07:26,330
something like that you get the actual
description when that's quite handy so
73

73

00:07:26,330  -->  00:07:30,940
you can see that that's all working and we
added the various planets moons and then
74

74

00:07:30,940  -->  00:07:34,430
at least all the moons so everything
seems to be working so in other words test
75

75

00:07:34,430  -->  00:07:39,030
case one passes and because we made the
second pluto a planet and correctly
76

76

00:07:39,030  -->  00:07:39,560
overridden
77

77

00:07:39,560  -->  00:07:44,440
equals and hashCode you can see there
hasn't been added to our planets again so its not appearing twice
78

78

00:07:44,440  -->  00:07:52,250
so test case 3 has also pass again going back to those tests
79

79

00:07:52,250  -->  00:07:55,330
case 1 was the planets and moons
we added in the previous video or
80

80

00:07:55,330  -->  00:07:58,550
before we started the challenge should
appear in the solar system collection
81

81

00:07:58,550  -->  00:08:02,000
and in a sets of moon so we got that
working we also establish that
82

82

00:08:02,000  -->  00:08:06,880
attempting to add a duplicate to a set must
result in no change to the set so the
83

83

00:08:06,880  -->  00:08:10,180
original value is replaced by a new one
so we obviously got that working as well
84

84

00:08:10,180  -->  00:08:14,180
which is cool because if you recall
from the original running of this
85

85

00:08:14,180  -->  00:08:15,460
program
86

86

00:08:15,460  -->  00:08:22,080
we had Pluto originally defined with 248 for
the orbital period and down here we
87

87

00:08:22,080  -->  00:08:28,440
actually added it as a 824 and by running it
Pluto 248 so we can confirm
88

88

00:08:28,440  -->  00:08:33,900
that the second duplicate of Pluto hasn't overriden the 1st one
89

89

00:08:33,900  -->  00:08:38,390
so to consequently test case 3 has
passed as well so though an argument can be made now
90

90

00:08:38,390  -->  00:08:42,470
for allowing objects of type heavenly
body to be created and perhaps to cater
91

91

00:08:42,470  -->  00:08:46,450
for new bodies that have not been discovered
yet it's probably better to make
92

92

00:08:46,450  -->  00:08:51,220
heavenly body abstract and one problem
is that our second Pluto can have
93

93

00:08:51,220  -->  00:08:55,720
planets added to its set of satellites in
fact it could even have the Sun as a satellite which
94

94

00:08:55,720  -->  00:09:00,290
can lead to a strange
solar system so before we check that Pluto
95

95

00:09:00,290  -->  00:09:04,490
can be added again to the set if it's a
dwarf plant rather than a planet
96

96

00:09:04,490  -->  00:09:08,160
we're going to make the heavenly body
class abstract so lets go back and do
97

97

00:09:08,160  -->  00:09:17,610
that and make public abstract class
heavenly body and we need to go back to
98

98

00:09:17,610  -->  00:09:28,070
main and we will probably have an error here now rebuild this now if I went back here and I change this to planet but if I put this back to
99

99

00:09:28,070  -->  00:09:34,020
heavenly body we find we get an error know even if we have the right parameter if we change this third
100

100

00:09:34,020  -->  00:09:42,960
parameter and made it.....
101

101

00:09:42,960  -->  00:09:50,710
...we are going to get an error now and quite correctly IntelliJ is saying HeavenlyBody is
102

102

00:09:50,710  -->  00:09:52,950
is abstract and cannot be instantiated so
103

103

00:09:52,950  -->  00:09:56,580
what we need to do then in that case is
changed this to make this a dwarf planet
104

104

00:09:56,580  -->  00:10:02,040
...and then delete the third
parameter so that is now valid
105

105

00:10:02,040  -->  00:10:05,680
now Pluto we should run this we should
find that Pluto will appear twice
106

106

00:10:05,680  -->  00:10:10,200
because we've changed the body type to be dwarf planet and obviously
107

107

00:10:10,200  -->  00:10:14,200
in the original definition by default
we've added it as a planet so that should
108

108

00:10:14,200  -->  00:10:20,400
be a different body type so if we run that
to confirm that works we now correctly got
109

109

00:10:20,400  -->  00:10:24,650
Pluto appearing as a planet with a
different orbital period and the second
110

110

00:10:24,650  -->  00:10:28,530
example which is clearly the new one
that we've created from line
111

111

00:10:28,530  -->  00:10:33,340
98 which is now off type dwarf
planets so it added those which means that
112

112

00:10:33,340  -->  00:10:38,030
our equals method is actually working just
fine and it means part passing test case 5
113

113

00:10:38,030  -->  00:10:44,420
now test case 2 going back to test case
2 which is a.equals(b)
114

114

00:10:44,420  -->  00:10:48,570
must equal the same result as b.equals(a) we need to actually test that
115

115

00:10:48,570  -->  00:10:51,160
and make sure equals is symmetric
116

116

00:10:51,160  -->  00:10:54,850
so go about doing that what we want to do is
actually pretty easy to check really
117

117

00:10:54,850  -->  00:10:59,100
we need to create two objects to compare
them both ways around so lets add the code....
118

118

00:10:59,100  -->  00:11:08,180
i'm gonna delete this bit of object code here so what we need to do here is put....
119

119

00:11:08,180  -->  00:11:49,270
.....
120

120

00:11:49,270  -->  00:11:56,820
so lets run this to confirm and they are both true as you can
see down there which means obviously
121

121

00:11:56,820  -->  00:12:02,960
their symmetric because both earth 1 equals earth 2 and
earth 2 is equal to earth 1 and just to be
122

122

00:12:02,960  -->  00:12:05,990
complete to make sure that it is doing
the right thing we can also do a
123

123

00:12:05,990  -->  00:12:19,540
comparison to test to see if..... obviously that should be a false....
124

124

00:12:19,540  -->  00:12:22,580
......should also be false
125

125

00:12:22,580  -->  00:12:28,620
ok so run that and you can see it's
false as well so the code is
126

126

00:12:28,620  -->  00:12:33,110
actually working that's good so that's
test 2 to make sure that that is now
127

127

00:12:33,110  -->  00:12:36,620
working as well so I'm going to end this video
here because we have still got an issue
128

128

00:12:36,620  -->  00:12:41,710
I will talk about it in next video
the sets are behaving as they should but when we come to
129

129

00:12:41,710  -->  00:12:45,380
look at the solar system map there's a
problem that we need to solve so I'm gonna
130

130

00:12:45,380  -->  00:12:48,590
talk about that and how to get around
it and show you the code for that in the
131

131

00:12:48,590  -->  00:12:48,880
next video
