WEBVTT
1
1

00:00:04.842  -->  00:00:05.750
<v Tim>All right so let's continue.</v>
2

2

00:00:05.750  -->  00:00:08.040
Now I've got a little bit of a challenge for you here
3

3

00:00:08.040  -->  00:00:11.020
and it relates to a common bug that people who are
4

4

00:00:11.020  -->  00:00:13.680
starting out programming may encounter.
5

5

00:00:13.680  -->  00:00:18.037
And you start by typing the code "int newValue equals 50".
6

6

00:00:19.370  -->  00:00:22.400
In the next line I'm gonna type "if" left parenthesis
7

7

00:00:23.316  -->  00:00:26.720
"newValue equals 50" right parenthesis
8

8

00:00:26.720  -->  00:00:29.383
and with a code block like we normally do.
9

9

00:00:30.230  -->  00:00:31.867 line:15% 
And I'm a put down a message, print out a message
10

10

00:00:31.867  -->  00:00:33.547 line:15% 
"this is an error".
11

11

00:00:35.380  -->  00:00:38.650 line:15% 
Right so my question to you is what is wrong with this code?
12

12

00:00:38.650  -->  00:00:40.870 line:15% 
So note that IntelliJ flagging that line
13

13

00:00:40.870  -->  00:00:42.750 line:15% 
line 68 with an error.
14

14

00:00:42.750  -->  00:00:45.677 line:15% 
So if you hover over that, we can see it says
15

15

00:00:45.677  -->  00:00:50.370 line:15% 
"incompatible types, required: boolean, found: int."
16

16

00:00:50.370  -->  00:00:52.900
So aren't we testing newValue?
17

17

00:00:52.900  -->  00:00:55.500
Which we know is an int, against the whole number 50?
18

18

00:00:55.500  -->  00:00:57.570
Which we know from our primitive tops discussion
19

19

00:00:57.570  -->  00:00:59.850
is treated as an int by default?
20

20

00:00:59.850  -->  00:01:01.550
So why are we getting this error?
21

21

00:01:01.550  -->  00:01:03.350
So have a think about why it's doing that.
22

22

00:01:03.350  -->  00:01:04.840
Pause the video if you like and see if you can
23

23

00:01:04.840  -->  00:01:05.673
figure it out.
24

24

00:01:08.230  -->  00:01:09.430
All right, so welcome back.
25

25

00:01:09.430  -->  00:01:11.653
Well the problem is the equals sign.
26

26

00:01:13.050  -->  00:01:15.750
Let's talk about the difference between the assignment
27

27

00:01:15.750  -->  00:01:17.920
and the equals to operators.
28

28

00:01:17.920  -->  00:01:19.820
So as you can see in the code we typed
29

29

00:01:19.820  -->  00:01:23.670
we've declared the newValue int in the assignment operator
30

30

00:01:23.670  -->  00:01:25.100
which is one equals sign.
31

31

00:01:25.100  -->  00:01:27.300
And we assigned the value 50 to it.
32

32

00:01:27.300  -->  00:01:30.350
What we need to do in the code to check whether it's equal
33

33

00:01:30.350  -->  00:01:33.250
to, is to not use the assignment operator
34

34

00:01:33.250  -->  00:01:34.920
which is a single equals sign.
35

35

00:01:34.920  -->  00:01:37.800
But rather we need to use the equals to operator
36

36

00:01:37.800  -->  00:01:39.383
which has two equals sign.
37

37

00:01:40.220  -->  00:01:42.340
So this is what the code should look like.
38

38

00:01:42.340  -->  00:01:43.997
Noting that it's got "if" in parenthesis
39

39

00:01:43.997  -->  00:01:47.030
"newValue equals equals 50".
40

40

00:01:47.030  -->  00:01:50.350
and not as we typed it, "newValue equals 50".
41

41

00:01:50.350  -->  00:01:52.460
So we're not assigning a value here.
42

42

00:01:52.460  -->  00:01:55.393
we want to test if the values are equal to each other.
43

43

00:01:56.330  -->  00:01:57.750 line:15% 
All right, so I'm back in the code.
44

44

00:01:57.750  -->  00:02:00.620 line:15% 
What we need to do to fix this is we need to come down here
45

45

00:02:00.620  -->  00:02:02.840 line:15% 
and put the second equals sign in.
46

46

00:02:02.840  -->  00:02:05.040 line:15% 
Which is now an equals to operator
47

47

00:02:05.040  -->  00:02:08.120 line:15% 
and we're now correctly comparing the value of newValue
48

48

00:02:09.062  -->  00:02:10.290 line:15% 
to the value 50.
49

49

00:02:10.290  -->  00:02:12.640 line:15% 
The error's disappeared and if we run this code
50

50

00:02:17.400  -->  00:02:19.120
we're getting the output which now doesn't make sense
51

51

00:02:19.120  -->  00:02:20.650
because we've fixed the error so we should probably
52

52

00:02:20.650  -->  00:02:22.200
change the output.
53

53

00:02:22.200  -->  00:02:24.300
I'm a put "this is true".
54

54

00:02:24.300  -->  00:02:25.760
Which would probably make more sense if we're
55

55

00:02:25.760  -->  00:02:27.143
reading the text.
56

56

00:02:29.530  -->  00:02:30.980
All right, so "this is true".
57

57

00:02:32.000  -->  00:02:34.380
All right, so that's a, again that's a common problem
58

58

00:02:34.380  -->  00:02:36.950
you'll come across, using a single equals sign
59

59

00:02:36.950  -->  00:02:39.070
which is the assignment operator instead of the two
60

60

00:02:39.070  -->  00:02:42.960
equals signs which of course, is the equals to operator.
61

61

00:02:42.960  -->  00:02:44.100
But let's continue on with that
62

62

00:02:44.100  -->  00:02:46.030
I wanna show you another problem.
63

63

00:02:46.030  -->  00:02:47.421
This time we're gonna use a boolean.
64

64

00:02:47.421  -->  00:02:51.547
We're gonna type "boolean isCar equals false".
65

65

00:02:53.180  -->  00:02:55.297
Now on the next line we're going to type a similar thing.
66

66

00:02:55.297  -->  00:02:59.130
"if" and in parenthesis "isCar equals true"
67

67

00:02:59.130  -->  00:03:01.280
noting that I'm using the assignment operator
68

68

00:03:01.280  -->  00:03:04.340
and not the equals to operataor.
69

69

00:03:04.340  -->  00:03:05.870
And I'm just going to print out a message
70

70

00:03:05.870  -->  00:03:07.410
in our code block.
71

71

00:03:07.410  -->  00:03:11.137
Which simply says "this is not supposed to happen".
72

72

00:03:13.560  -->  00:03:16.010
So what do you think's going to happen in this scenario?
73

73

00:03:16.010  -->  00:03:17.980
Noting that there's no error here.
74

74

00:03:17.980  -->  00:03:19.730
So pause the video if you like and come back
75

75

00:03:19.730  -->  00:03:20.930
and we'll go through it.
76

76

00:03:22.270  -->  00:03:24.520
All right, so firstly let's run the code now.
77

77

00:03:28.780  -->  00:03:30.747 line:15% 
And look what's happened there, we've got the output
78

78

00:03:30.747  -->  00:03:32.270 line:15% 
"this is not supposed to happen".
79

79

00:03:32.270  -->  00:03:36.060
We can clearly see that on line 72, we've defined the value
80

80

00:03:36.060  -->  00:03:37.760
of isCar to be false.
81

81

00:03:37.760  -->  00:03:40.180
And it appears that at first glance that we're comparing
82

82

00:03:40.180  -->  00:03:43.570
isCar to the value true and for some reason
83

83

00:03:43.570  -->  00:03:47.010
the code on line 74 is being executed.
84

84

00:03:47.010  -->  00:03:50.450
And what's more, unlike the int example used above
85

85

00:03:50.450  -->  00:03:52.670
when we use the assignment operator instead of the equals to
86

86

00:03:52.670  -->  00:03:54.800
operator, we haven't got an error here.
87

87

00:03:54.800  -->  00:03:57.630
So why isn't IntelliJ flagging this as an error?
88

88

00:03:57.630  -->  00:04:02.440
So in the case of where we had the newValue equals 20
89

89

00:04:02.440  -->  00:04:05.360 line:15% 
in other words we used the assignment instead of the
90

90

00:04:05.360  -->  00:04:07.650
equals to value, and I'll change that back again.
91

91

00:04:07.650  -->  00:04:09.080
This is why we're getting incompatible types.
92

92

00:04:09.080  -->  00:04:11.590
If we hover over that again.
93

93

00:04:11.590  -->  00:04:15.300
So in line 68, "newValue equals 50"
94

94

00:04:15.300  -->  00:04:17.303
well that actually returns to value 50 and that's why
95

95

00:04:17.303  -->  00:04:20.480
we have the error it's found in int.
96

96

00:04:20.480  -->  00:04:23.370
When in fact what it requires is a boolean.
97

97

00:04:23.370  -->  00:04:25.250
And that's because the assignment operator
98

98

00:04:25.250  -->  00:04:29.290
returns to the value, it has been assigned to the variable
99

99

00:04:29.290  -->  00:04:33.110
and the equals to operator that returned to true or false
100

100

00:04:33.110  -->  00:04:35.400
on whether the two values are the same.
101

101

00:04:35.400  -->  00:04:38.247
Now in the case of the code on line 73
102

102

00:04:38.247  -->  00:04:43.040
"isCar equals true", even though that's an equals operator
103

103

00:04:43.040  -->  00:04:47.580
that is returning true because the isCar variable
104

104

00:04:47.580  -->  00:04:51.240
is a boolean and has been assigned to the value true.
105

105

00:04:51.240  -->  00:04:54.380
So that's why we're not getting an error on line 73
106

106

00:04:54.380  -->  00:04:57.990
when we in fact, did get an error on line 68.
107

107

00:04:57.990  -->  00:04:59.930
So just undo that change again
108

108

00:04:59.930  -->  00:05:02.030
to go back to where we were before.
109

109

00:05:02.030  -->  00:05:03.970
So the bottom line is to make sure that you're using the
110

110

00:05:03.970  -->  00:05:06.810
equals to operator when you're testing to see whether
111

111

00:05:06.810  -->  00:05:09.150
things are equal, and you're not using an assignment
112

112

00:05:09.150  -->  00:05:11.160
operator like we're using here.
113

113

00:05:11.160  -->  00:05:12.860
So I'm gonna go back and fix this.
114

114

00:05:14.460  -->  00:05:16.070
We're now using the equals to operator.
115

115

00:05:16.070  -->  00:05:17.163
We run the code now.
116

116

00:05:20.960  -->  00:05:23.750 line:15% 
We no longer get the message and that's because we're using
117

117

00:05:23.750  -->  00:05:26.540
the proper equals to operator.
118

118

00:05:26.540  -->  00:05:28.970
Now just a note about booleans as well, we can simplify the
119

119

00:05:28.970  -->  00:05:31.680
expression we've got on line 73
120

120

00:05:31.680  -->  00:05:34.410
by removing the "equals equals true" altogether.
121

121

00:05:34.410  -->  00:05:38.500
And simply having it like so, "if isCar".
122

122

00:05:38.500  -->  00:05:40.947
Now that's a shortcut and tests to see whether
123

123

00:05:40.947  -->  00:05:43.290
Car is set to true, which we were doing previously
124

124

00:05:43.290  -->  00:05:45.470
with the equals to operator.
125

125

00:05:45.470  -->  00:05:48.190
Now we can also do a test for not here.
126

126

00:05:48.190  -->  00:05:50.810
So if we wanted to specifically check that Car
127

127

00:05:50.810  -->  00:05:54.837
wasn't equal to true, we can obviously put "if is car
128

128

00:05:54.837  -->  00:05:56.147
"not equal to true".
129

129

00:05:57.340  -->  00:05:59.330
In this case, someone would be testing for false.
130

130

00:05:59.330  -->  00:06:03.080
We could also put "if isCar is equal to false"
131

131

00:06:03.080  -->  00:06:04.980
to specifically check whether it's false.
132

132

00:06:04.980  -->  00:06:09.800
But we can also come up here and put "not"
133

133

00:06:09.800  -->  00:06:13.730
so the exclamation mark is the not operator and
134

134

00:06:13.730  -->  00:06:16.880
what that does is basically tests to make sure that isCar
135

135

00:06:16.880  -->  00:06:18.823
is not equal to true.
136

136

00:06:20.460  -->  00:06:23.740
All right, so the exclamation mark or the not operator
137

137

00:06:23.740  -->  00:06:26.630
is also known as the Logical Complement Operator.
138

138

00:06:26.630  -->  00:06:28.250
Now it's for use with booleans.
139

139

00:06:28.250  -->  00:06:30.520
And it tests the alternate value.
140

140

00:06:30.520  -->  00:06:34.220
So we saw isCar in parenthesis tests for true.
141

141

00:06:34.220  -->  00:06:37.060
By adding the not operator before the value
142

142

00:06:37.060  -->  00:06:40.210
we're checking the opposite, false in this case.
143

143

00:06:40.210  -->  00:06:42.300
So boolean isCar equals false.
144

144

00:06:42.300  -->  00:06:43.410
We can do a test there.
145

145

00:06:43.410  -->  00:06:45.277
You saw me do this in the code before, "if" parenthesis
146

146

00:06:45.277  -->  00:06:48.010
"isCar is equal equal false", cause we're using
147

147

00:06:48.010  -->  00:06:49.720
the equals to operator.
148

148

00:06:49.720  -->  00:06:52.200 line:15% 
That's just testing for false but we can also put in
149

149

00:06:52.200  -->  00:06:55.350 line:15% 
parenthesis "not isCar" to check also
150

150

00:06:55.350  -->  00:06:57.613 line:15% 
if the boolean value isCar is false.
151

151

00:06:58.640  -->  00:07:01.880
Now, I generally recommend using the abbreviated form of
152

152

00:07:01.880  -->  00:07:03.740
both for two reasons.
153

153

00:07:03.740  -->  00:07:05.570
And abbreviated form, I'm just talking about "if"
154

154

00:07:05.570  -->  00:07:09.560
parenthesis "isCar" or "if" parenthesis "not isCar"
155

155

00:07:09.560  -->  00:07:12.090
depending whether you're wanting to test for true or false.
156

156

00:07:12.090  -->  00:07:14.200
So the reason I recommend using those
157

157

00:07:14.200  -->  00:07:17.540
is to avoid the potential for error by accidentally using
158

158

00:07:17.540  -->  00:07:20.780
an assignment operator as we did earlier in the code.
159

159

00:07:20.780  -->  00:07:23.350
But secondly, the code's more concise.
160

160

00:07:23.350  -->  00:07:25.010
All right, so let's end the video out here.
161

161

00:07:25.010  -->  00:07:26.850
In the next video, I wanna talk about something
162

162

00:07:26.850  -->  00:07:28.940
called the ternary operator.
163

163

00:07:28.940  -->  00:07:30.240
See you in the next video.
