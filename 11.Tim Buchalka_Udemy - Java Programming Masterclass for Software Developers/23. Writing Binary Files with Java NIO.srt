1
1

00:00:05,410  -->  00:00:07,490
- [Instructor] Alright,
so in the previous videos
2

2

00:00:07,490  -->  00:00:09,360
we talked about and
looked at the files class
3

3

00:00:09,360  -->  00:00:11,290
to read and write text files.
4

4

00:00:11,290  -->  00:00:14,600
Let's now turn our
attention to binary files.
5

5

00:00:14,600  -->  00:00:16,950
So we're gonna start by
writing to a binary file
6

6

00:00:16,950  -->  00:00:19,440
so that we've got something we can read.
7

7

00:00:19,440  -->  00:00:21,990
So we're gonna start by
writing the string hello world,
8

8

00:00:21,990  -->  00:00:24,000
to a file in binary format.
9

9

00:00:24,000  -->  00:00:26,920
So I'm gonna comment out this code.
10

10

00:00:30,730  -->  00:00:32,630
And at the top, we're going to start
11

11

00:00:32,630  -->  00:00:35,050
by typing file output stream.
12

12

00:00:36,250  -->  00:00:40,490
Bin file is equal to
new, file output stream.
13

13

00:00:40,490  -->  00:00:44,080
We're gonna call the file data dot DAT,
14

14

00:00:44,080  -->  00:00:46,510
call it anything you literally like there.
15

15

00:00:46,510  -->  00:00:49,490
Then we need a file
channel, so file channel,
16

16

00:00:49,490  -->  00:00:53,650
bin channel, is equal to
bin file, dot get channel.
17

17

00:00:56,310  -->  00:00:58,300
Alright, so far so good.
18

18

00:00:58,300  -->  00:01:01,090
But the next thing we need is a buffer,
19

19

00:01:01,090  -->  00:01:04,380
because we're writing to a
file, we've got the data,
20

20

00:01:04,380  -->  00:01:06,900
so you can create a
byte buffer that matches
21

21

00:01:06,900  -->  00:01:08,950
the length of the data.
22

22

00:01:08,950  -->  00:01:11,030
In the read cases, you
don't know the length
23

23

00:01:11,030  -->  00:01:12,770
of the data, so what you can do is create
24

24

00:01:12,770  -->  00:01:16,480
a buffer of a given length, and
then parse what it receives.
25

25

00:01:16,480  -->  00:01:18,600
But note that you don't
have to use the same buffer
26

26

00:01:18,600  -->  00:01:20,540
to do all your reads and writes,
27

27

00:01:20,540  -->  00:01:23,420
you can create as many
buffers as you like.
28

28

00:01:23,420  -->  00:01:25,320
So before I type some
more code, let's get some
29

29

00:01:25,320  -->  00:01:27,020
terminology out of the way.
30

30

00:01:27,020  -->  00:01:29,550
Firstly, a buffer's
capacity, is the number
31

31

00:01:29,550  -->  00:01:32,090
of elements it can contain.
32

32

00:01:32,090  -->  00:01:34,340
Now a buffer's position
is the index of the next
33

33

00:01:34,340  -->  00:01:36,900
element that should be read or written.
34

34

00:01:36,900  -->  00:01:39,470
It can't be greater than
the buffer's capacity.
35

35

00:01:39,470  -->  00:01:42,520
A buffer's mark is used by
the buffer dot reset method,
36

36

00:01:42,520  -->  00:01:44,850
when this method is called,
the buffer's position
37

37

00:01:44,850  -->  00:01:47,150
is reset to it's mark.
38

38

00:01:47,150  -->  00:01:48,940
Now if you know you
wanna rewind the buffer
39

39

00:01:48,940  -->  00:01:51,600
to a certain point, you'll mark the point,
40

40

00:01:51,600  -->  00:01:53,600
and then later you can
call the reset method
41

41

00:01:53,600  -->  00:01:56,790
to reset the position to the mark.
42

42

00:01:56,790  -->  00:01:59,510
But you'll more of how
that works as we proceed.
43

43

00:01:59,510  -->  00:02:01,460
So with that out of the way,
let's actually now write
44

44

00:02:01,460  -->  00:02:04,730
this hello world string to
a file in binary format.
45

45

00:02:04,730  -->  00:02:08,030
The first thing we need
to create a byte array
46

46

00:02:08,030  -->  00:02:10,680
for the string that we want to output,
47

47

00:02:10,680  -->  00:02:14,850
so it's gonna be byte array
output bytes, we'll call it,
48

48

00:02:16,080  -->  00:02:19,280
is equal to, and we'll
just type in hello world,
49

49

00:02:19,280  -->  00:02:23,450
exclamation mark, dot bytes,
so there's out byte array.
50

50

00:02:25,530  -->  00:02:26,760
And then we need a byte buffer,
51

51

00:02:26,760  -->  00:02:29,020
so we type byte buffer, you can see that's
52

52

00:02:29,020  -->  00:02:32,440
a java dot NIO input, buffer is equal to,
53

53

00:02:33,820  -->  00:02:36,400
and it's byte buffer, dot wrap,
54

54

00:02:37,660  -->  00:02:39,790
note that we're using
a static method there,
55

55

00:02:39,790  -->  00:02:41,290
then output bytes.
56

56

00:02:42,410  -->  00:02:44,220
So we've created our buffer now.
57

57

00:02:44,220  -->  00:02:48,290
So let me first call this
string dot get bytes,
58

58

00:02:48,290  -->  00:02:52,190
on line 14, but we do call
it to create the byte array,
59

59

00:02:52,190  -->  00:02:55,710
then we're calling this byte
buffer dot wrap static method,
60

60

00:02:55,710  -->  00:02:58,270
to create a byte buffer
from the byte array.
61

61

00:02:58,270  -->  00:03:01,970
The actual wrap method
itself, does the following,
62

62

00:03:01,970  -->  00:03:05,150
first it wraps the bite
array into the buffer.
63

63

00:03:05,150  -->  00:03:06,340
What that means is that the buffer
64

64

00:03:06,340  -->  00:03:08,430
is backed by the byte array.
65

65

00:03:08,430  -->  00:03:10,350
Now this is actually important.
66

66

00:03:10,350  -->  00:03:12,850
Modifications to the
buffer will actually change
67

67

00:03:12,850  -->  00:03:15,980
the array, and modifications to the array,
68

68

00:03:15,980  -->  00:03:17,780
will change the buffer.
69

69

00:03:17,780  -->  00:03:19,650
Now if you use the buffer
to write out our string
70

70

00:03:19,650  -->  00:03:23,470
or our bytes, and then you
use it to read from a file,
71

71

00:03:23,470  -->  00:03:26,540
the output byte array will be changed,
72

72

00:03:26,540  -->  00:03:29,240
in other words it'll no
longer contain hello world.
73

73

00:03:29,240  -->  00:03:32,030
So essentially, when you
call the wrap method,
74

74

00:03:32,030  -->  00:03:34,350
you're telling the run
time, that you wanna
75

75

00:03:34,350  -->  00:03:36,950
use the byte array as the buffer.
76

76

00:03:36,950  -->  00:03:40,160
And since you've used wrap,
the buffer is already filled.
77

77

00:03:40,160  -->  00:03:43,170
May not be what you're
expecting to happen there.
78

78

00:03:43,170  -->  00:03:46,050
Secondly, it sets the position
of the buffer to zero,
79

79

00:03:46,050  -->  00:03:47,840
and when you use the buffer the read-write
80

80

00:03:47,840  -->  00:03:49,760
will start at position zero.
81

81

00:03:49,760  -->  00:03:51,930
Thirdly, the buffers capacity will be set
82

82

00:03:51,930  -->  00:03:54,430
to the byte array's
length, which you'd expect.
83

83

00:03:54,430  -->  00:03:58,130
And fourthly, the buffers
mark, will be undefined.
84

84

00:03:58,130  -->  00:03:59,880
And that can be set later.
85

85

00:03:59,880  -->  00:04:02,570
So now that we've got our
buffer, it contains the bytes,
86

86

00:04:02,570  -->  00:04:06,390
which was the string object
that we wanted to write,
87

87

00:04:06,390  -->  00:04:09,540
we can use the channel
to write it to a file.
88

88

00:04:09,540  -->  00:04:13,540
So we'll do that, int
channel dot write, buffer.
89

89

00:04:16,290  -->  00:04:18,600
And if you wanna know how many
bytes are actually written,
90

90

00:04:18,600  -->  00:04:21,640
you can get that from the
write method's return value,
91

91

00:04:21,640  -->  00:04:25,810
so we could change that to
be int, num bytes, equals,
92

92

00:04:27,360  -->  00:04:28,920
byte channel dot write buffer.
93

93

00:04:28,920  -->  00:04:30,980
And then we can print that out,
94

94

00:04:30,980  -->  00:04:34,310
num bytes, written, was, plus num bytes.
95

95

00:04:37,260  -->  00:04:40,120
Finally then you'd have
to close the input stream
96

96

00:04:40,120  -->  00:04:42,970
and the file channel, because of that,
97

97

00:04:42,970  -->  00:04:45,130
you can use try with resources instead of
98

98

00:04:45,130  -->  00:04:47,080
creating the instances with the try block.
99

99

00:04:47,080  -->  00:04:48,670
So it's probably better to do it that way,
100

100

00:04:48,670  -->  00:04:50,600
so let's actually change that,
101

101

00:04:50,600  -->  00:04:52,840
to be a try with resources,
so it's gonna read,
102

102

00:04:52,840  -->  00:04:56,670
try file, output stream,
bin file, equals new,
103

103

00:05:00,330  -->  00:05:03,710
file output stream, I guess
we could've just copied the
104

104

00:05:03,710  -->  00:05:07,210
definitions there, actually let's do that.
105

105

00:05:08,430  -->  00:05:09,760
It'll be much easier to do that,
106

106

00:05:09,760  -->  00:05:12,550
so we'll put those both in here.
107

107

00:05:12,550  -->  00:05:15,830
Like that, and I'm going to
put another parentheses there
108

108

00:05:15,830  -->  00:05:20,000
and then open a code block,
and that should fix that.
109

109

00:05:20,000  -->  00:05:22,600
So now that we've done
that, we'll find that both
110

110

00:05:22,600  -->  00:05:26,330
the channel and the output
stream will be closed
111

111

00:05:26,330  -->  00:05:28,090
once we've finished execution because
112

112

00:05:28,090  -->  00:05:30,290
we're using try with resources.
113

113

00:05:30,290  -->  00:05:32,260
I think that's preferable
to creating them within
114

114

00:05:32,260  -->  00:05:36,470
the try block, so let's
actually try, no pun intended,
115

115

00:05:36,470  -->  00:05:38,470
to run this application.
116

116

00:05:42,130  -->  00:05:44,320
You can see we've got 12 bytes written,
117

117

00:05:44,320  -->  00:05:46,350
which would be consistent
with hello world,
118

118

00:05:46,350  -->  00:05:48,400
which is exactly 12 bytes,
that we can see over here
119

119

00:05:48,400  -->  00:05:51,390
our data dot DAT file,
is actually written,
120

120

00:05:51,390  -->  00:05:52,620
and we can actually see the text
121

121

00:05:52,620  -->  00:05:54,720
is actually appearing in that file.
122

122

00:05:54,720  -->  00:05:57,480
Now by the way, it looks like a text file,
123

123

00:05:57,480  -->  00:06:00,760
because we've used the
UTF eight character set,
124

124

00:06:00,760  -->  00:06:03,220
and as I mentioned you
can see the 12 bytes
125

125

00:06:03,220  -->  00:06:04,740
were actually written in the console
126

126

00:06:04,740  -->  00:06:06,050
window down at the bottom.
127

127

00:06:06,050  -->  00:06:08,220
Alright, so let's go back to our code.
128

128

00:06:08,220  -->  00:06:11,850
And actually change it, or add to it,
129

129

00:06:11,850  -->  00:06:14,080
to actually write an integer.
130

130

00:06:14,080  -->  00:06:16,020
Now we could reuse the buffer, but instead
131

131

00:06:16,020  -->  00:06:18,590
what we're gonna do is
create an int buffer,
132

132

00:06:18,590  -->  00:06:22,020
that you'll use whenever you
want to write an integer.
133

133

00:06:22,020  -->  00:06:23,520
So we'll actually do that instead.
134

134

00:06:23,520  -->  00:06:27,180
We'd go, byte buffer,
int buffer is equal to
135

135

00:06:32,300  -->  00:06:36,050
byte buffer, dot allocate,
integer dot bytes.
136

136

00:06:39,930  -->  00:06:42,510
So we're calling the byte
buffer dot allocate method,
137

137

00:06:42,510  -->  00:06:44,410
and we're passing to it
the size that we want
138

138

00:06:44,410  -->  00:06:46,420
the buffer to be, which is this case is,
139

139

00:06:46,420  -->  00:06:49,260
because we mentioned we
want to write an integer,
140

140

00:06:49,260  -->  00:06:51,780
this is the number of bytes in a integer.
141

141

00:06:51,780  -->  00:06:53,120
So now that we've got the buffer,
142

142

00:06:53,120  -->  00:06:54,840
we can write an int to the buffer,
143

143

00:06:54,840  -->  00:06:57,400
so let's write an integer,
number, pick a number,
144

144

00:06:57,400  -->  00:07:01,320
say 245, so we go int,
buffer dot put int, 245.
145

145

00:07:06,450  -->  00:07:07,760
Let's write it to our bin channel,
146

146

00:07:07,760  -->  00:07:11,840
so num bytes, is equal to
bin channel, dot write,
147

147

00:07:14,630  -->  00:07:18,230
it's gonna be int buffer this time.
148

148

00:07:18,230  -->  00:07:20,410
And then we'll print that out again.
149

149

00:07:20,410  -->  00:07:23,660
And let's just copy that line up there.
150

150

00:07:24,730  -->  00:07:29,240
Alright, so let's actually
run it and see what happens.
151

151

00:07:29,240  -->  00:07:30,990
And look at our file.
152

152

00:07:32,080  -->  00:07:33,720
Well that's a bit weird, as you can see,
153

153

00:07:33,720  -->  00:07:35,660
the integer's not appearing there,
154

154

00:07:35,660  -->  00:07:38,480
in the data file and then down
here under the second write,
155

155

00:07:38,480  -->  00:07:40,460
num bytes written was actually zero.
156

156

00:07:40,460  -->  00:07:43,060
So what actually happened,
why isn't the integer in
157

157

00:07:43,060  -->  00:07:46,040
the file, and why are we
getting zero as the output?
158

158

00:07:46,040  -->  00:07:48,790
When trying to write out the integer.
159

159

00:07:48,790  -->  00:07:50,430
Well here's the deal in a nutshell.
160

160

00:07:50,430  -->  00:07:53,460
When you created the buffer,
the position of the buffer
161

161

00:07:53,460  -->  00:07:57,120
was set to zero, now when
you call the put int method,
162

162

00:07:57,120  -->  00:08:00,740
on line 21 here, you wrote
the int into the buffer,
163

163

00:08:00,740  -->  00:08:03,230
which changed the buffer's position.
164

164

00:08:03,230  -->  00:08:05,430
Now in the bin channel dot write method,
165

165

00:08:05,430  -->  00:08:07,900
which we're using on
the next line, line 22,
166

166

00:08:07,900  -->  00:08:10,550
goes to read the buffer's contents,
167

167

00:08:10,550  -->  00:08:13,520
it'll start the read at
the buffer's position.
168

168

00:08:13,520  -->  00:08:16,710
So you have to explicitly
reset the position to zero
169

169

00:08:16,710  -->  00:08:19,000
if you want the bin
channel dot write method
170

170

00:08:19,000  -->  00:08:22,160
to start reading the
buffer from the beginning.
171

171

00:08:22,160  -->  00:08:23,430
So to do this, we're gonna call
172

172

00:08:23,430  -->  00:08:25,900
the byte buffer dot flip method.
173

173

00:08:25,900  -->  00:08:28,590
And the flip method resets
the position to zero,
174

174

00:08:28,590  -->  00:08:32,310
and discards any mark that
have been set previously.
175

175

00:08:32,310  -->  00:08:35,150
Now, it'd be obviously
fantastic if the IO methods
176

176

00:08:35,150  -->  00:08:37,960
did this for us, so that
developers didn't have
177

177

00:08:37,960  -->  00:08:40,840
to explicitly reset our
buffer's position to zero,
178

178

00:08:40,840  -->  00:08:43,080
but alas, that's not the case, that was
179

179

00:08:43,080  -->  00:08:45,100
a design decision,
because you may wanna do
180

180

00:08:45,100  -->  00:08:47,520
modable writes or reads to a buffer,
181

181

00:08:47,520  -->  00:08:49,820
before writing to the
channel, in which case
182

182

00:08:49,820  -->  00:08:51,270
you wouldn't want to reset the position
183

183

00:08:51,270  -->  00:08:52,920
to zero after every write.
184

184

00:08:52,920  -->  00:08:55,930
Now, we didn't have to use,
we don't have to use flip
185

185

00:08:55,930  -->  00:08:58,460
when we use the wrap
method, and that's because
186

186

00:08:58,460  -->  00:09:00,370
it resets the position to zero.
187

187

00:09:00,370  -->  00:09:03,140
The wrap method up here, on line 16,
188

188

00:09:03,140  -->  00:09:04,280
in case you're wondering.
189

189

00:09:04,280  -->  00:09:06,560
So by using the wrap
method, it's automatically
190

190

00:09:06,560  -->  00:09:08,700
resetting the position to zero.
191

191

00:09:08,700  -->  00:09:11,130
And, I listed three things
the wrap method does,
192

192

00:09:11,130  -->  00:09:13,180
the second on that list is that it
193

193

00:09:13,180  -->  00:09:14,870
sets the position to zero.
194

194

00:09:14,870  -->  00:09:18,050
So that's one method that
does take care of this for us,
195

195

00:09:18,050  -->  00:09:21,770
it's a convenience method to
use when writing byte arrays.
196

196

00:09:21,770  -->  00:09:25,010
But when writing numerics,
and that's an int,
197

197

00:09:25,010  -->  00:09:26,780
a long and a short, using the put int,
198

198

00:09:26,780  -->  00:09:29,690
put long and put short methods, et cetera,
199

199

00:09:29,690  -->  00:09:33,090
you do have to take care of
resetting the buffer yourself.
200

200

00:09:33,090  -->  00:09:35,530
And as mentioned, you may
not wanna do so after every
201

201

00:09:35,530  -->  00:09:37,670
read or write, and that's
why they've actually got
202

202

00:09:37,670  -->  00:09:39,440
that in there, so if you
had 20 integers to write,
203

203

00:09:39,440  -->  00:09:42,140
for arguments sake, you
could create a buffer
204

204

00:09:42,140  -->  00:09:44,570
large enough to accept 20 integers having
205

205

00:09:44,570  -->  00:09:47,060
called the put int method 20 times.
206

206

00:09:47,060  -->  00:09:48,740
Each write would start at the buffer's
207

207

00:09:48,740  -->  00:09:50,000
position in that case.
208

208

00:09:50,000  -->  00:09:52,030
For the first put int
method, the buffer's position
209

209

00:09:52,030  -->  00:09:54,830
would be zero, the second
caller would be four,
210

210

00:09:54,830  -->  00:09:56,300
the third it would be
eight, given that four
211

211

00:09:56,300  -->  00:09:58,880
is the number of bytes for an integer.
212

212

00:09:58,880  -->  00:10:01,840
Now also note that you can
write to an explicit index
213

213

00:10:01,840  -->  00:10:05,260
in the buffer, to do so,
you pass a second parameter
214

214

00:10:05,260  -->  00:10:08,150
to the put method, that
specifies the start index
215

215

00:10:08,150  -->  00:10:09,480
for the read or write.
216

216

00:10:09,480  -->  00:10:11,600
But let's flip the buffer before using it,
217

217

00:10:11,600  -->  00:10:14,550
to write to the channel,
so we need to put that code
218

218

00:10:14,550  -->  00:10:18,080
before the write and after the put,
219

219

00:10:18,080  -->  00:10:22,080
so right down here, we're
going to put int buffer,
220

220

00:10:22,080  -->  00:10:25,020
dot flip, to reset the position to zero,
221

221

00:10:25,020  -->  00:10:27,050
and if we run it now, we should find that
222

222

00:10:27,050  -->  00:10:28,480
the integers written to the file
223

223

00:10:28,480  -->  00:10:31,970
and we get to four back us
and the right bytes written.
224

224

00:10:31,970  -->  00:10:34,650
Open data dot date, we've
now got this message
225

225

00:10:34,650  -->  00:10:36,040
which is consistent with the fact that
226

226

00:10:36,040  -->  00:10:38,130
we're now writing binary
data, and we've got
227

227

00:10:38,130  -->  00:10:40,000
the integers showing there, you can see
228

228

00:10:40,000  -->  00:10:41,450
there's four bytes been out of there,
229

229

00:10:41,450  -->  00:10:44,100
that's the representation of our integer,
230

230

00:10:44,100  -->  00:10:46,030
but importantly down here, number bytes
231

231

00:10:46,030  -->  00:10:49,610
are written was four,
so that actually worked.
232

232

00:10:49,610  -->  00:10:52,170
Alright, so let's actually
write another integer this time,
233

233

00:10:52,170  -->  00:10:53,890
we'll use a negative number.
234

234

00:10:53,890  -->  00:10:55,750
And let's actually
pretend, I'm gonna actually
235

235

00:10:55,750  -->  00:10:59,910
just copy these three lines,
actually copy these four lines,
236

236

00:11:01,480  -->  00:11:03,440
but I'm going to get rid of the flip,
237

237

00:11:03,440  -->  00:11:04,460
and the number I'm gonna write,
238

238

00:11:04,460  -->  00:11:08,040
I'll use a negative
number, negative 98765.
239

239

00:11:09,820  -->  00:11:12,710
So we're pretending that,
that we don't understand
240

240

00:11:12,710  -->  00:11:13,950
that we have to call the flip method
241

241

00:11:13,950  -->  00:11:16,500
again to reset the buffer,
both before you write
242

242

00:11:16,500  -->  00:11:19,360
negative 98765 to the
buffer, and then before
243

243

00:11:19,360  -->  00:11:21,660
you write the buffer to a file.
244

244

00:11:21,660  -->  00:11:26,280
So if we do that now, in
this scenario, and run it,
245

245

00:11:26,280  -->  00:11:28,520
we actually get an
exception, you can see here
246

246

00:11:28,520  -->  00:11:32,860
we've got java dot NIO dot
buffer overflow exception,
247

247

00:11:32,860  -->  00:11:36,120
and the actual error is on line 26,
248

248

00:11:36,120  -->  00:11:39,700
and line 26 is this
put int negative 98765,
249

249

00:11:40,570  -->  00:11:43,470
and the reason for that
is, after we wrote the last
250

250

00:11:43,470  -->  00:11:46,760
integer, 245 to the file,
the buffer's position
251

251

00:11:46,760  -->  00:11:50,790
was set to four, but buffer
is only four bytes long,
252

252

00:11:50,790  -->  00:11:52,580
and that's because when
we used the buffer,
253

253

00:11:52,580  -->  00:11:54,780
we set it up using the
buffer dot allocate method
254

254

00:11:54,780  -->  00:11:58,280
to integer drop bytes,
which is a length of four
255

255

00:11:58,280  -->  00:12:00,560
on a computer, and that's usual with java
256

256

00:12:00,560  -->  00:12:02,800
the position is zero-based.
257

257

00:12:02,800  -->  00:12:05,460
So four is actually outside of our bounds,
258

258

00:12:05,460  -->  00:12:07,620
so the buffer's capacity, there's no room
259

259

00:12:07,620  -->  00:12:09,420
at position four to write any more bytes,
260

260

00:12:09,420  -->  00:12:12,500
and then hence we're getting
an exception for that reason.
261

261

00:12:12,500  -->  00:12:14,990
So calling flip will
obviously solve the problem,
262

262

00:12:14,990  -->  00:12:17,280
so we need to do two flips
here, we need to do a flip,
263

263

00:12:17,280  -->  00:12:20,370
and then I'll just copy the code,
264

264

00:12:20,370  -->  00:12:23,540
flip before our call, to the put int,
265

265

00:12:23,540  -->  00:12:27,350
and then also, we need to
do a flip after the put int,
266

266

00:12:27,350  -->  00:12:30,130
prior to the call to the write method.
267

267

00:12:30,130  -->  00:12:33,880
We'll just run this to
confirm that it works.
268

268

00:12:35,740  -->  00:12:37,170
This time you can see that it was written,
269

269

00:12:37,170  -->  00:12:39,900
we've got calls, two bytes,
lots of bytes written,
270

270

00:12:39,900  -->  00:12:41,640
integers written I should say,
271

271

00:12:41,640  -->  00:12:43,350
and you can see, although
we can't understand it,
272

272

00:12:43,350  -->  00:12:44,780
we can see that the extra bytes actually
273

273

00:12:44,780  -->  00:12:46,870
were written to the file.
274

274

00:12:48,920  -->  00:12:51,990
So the point here, always
remember to call the flip method
275

275

00:12:51,990  -->  00:12:55,250
whenever you wanna reset a
buffer's position to zero.
276

276

00:12:55,250  -->  00:12:57,000
It's a common error to forget to do it,
277

277

00:12:57,000  -->  00:12:58,870
and then wonder why the
data hasn't been written
278

278

00:12:58,870  -->  00:13:00,550
to the data source.
279

279

00:13:00,550  -->  00:13:02,740
Now if you're going to do
multiple writes to a buffer
280

280

00:13:02,740  -->  00:13:04,520
before writing the buffer to a channel,
281

281

00:13:04,520  -->  00:13:06,790
you don't have to call
flip on after each write,
282

282

00:13:06,790  -->  00:13:08,340
but you do have to call it whenever
283

283

00:13:08,340  -->  00:13:11,410
you flip from reading to
writing, or writing to reading,
284

284

00:13:11,410  -->  00:13:12,750
and hence the name flip.
285

285

00:13:12,750  -->  00:13:14,440
When you've filled a
buffer, and you're ready
286

286

00:13:14,440  -->  00:13:17,160
to write it to a channel,
or to the channel,
287

287

00:13:17,160  -->  00:13:19,770
you'll actually be reading
from the buffer at that point,
288

288

00:13:19,770  -->  00:13:22,070
and then read from the buffer
and write to the channel,
289

289

00:13:22,070  -->  00:13:24,490
and hence the call to flip is required.
290

290

00:13:24,490  -->  00:13:26,120
Alright, so that's it, I'm going to finish
291

291

00:13:26,120  -->  00:13:28,180
the video here now, in the next one,
292

292

00:13:28,180  -->  00:13:30,080
I'm gonna start taking
a look at reading files
293

293

00:13:30,080  -->  00:13:32,430
using channels and
buffers, and other things
294

294

00:13:32,430  -->  00:13:36,030
along those lines, so I'll
see you in the next video.
