1
1

00:00:04,930  -->  00:00:07,440
<v Tim>We've been working with the int or integer data type</v>
2

2

00:00:07,440  -->  00:00:08,910
so far in the course.
3

3

00:00:08,910  -->  00:00:13,060
Now technically that's known as a primitive type in Java.
4

4

00:00:13,060  -->  00:00:14,490
So in Java, primitive types are
5

5

00:00:14,490  -->  00:00:16,550
the most basic data types.
6

6

00:00:16,550  -->  00:00:19,890
An int is one of eight different primitive types.
7

7

00:00:19,890  -->  00:00:22,860
The eight primitive data types in Java are boolean,
8

8

00:00:22,860  -->  00:00:25,055
byte, char, short,
9

9

00:00:25,055  -->  00:00:26,860
int, long,
10

10

00:00:26,860  -->  00:00:28,790
float, and double.
11

11

00:00:28,790  -->  00:00:30,880
So consider these types as the building blocks
12

12

00:00:30,880  -->  00:00:32,460
of data manipulation.
13

13

00:00:32,460  -->  00:00:35,390
So let's explore the eight primitive types in Java
14

14

00:00:35,390  -->  00:00:36,723
over the next few videos.
15

15

00:00:37,586  -->  00:00:39,560
So what we are going to do is close down our project
16

16

00:00:39,560  -->  00:00:42,230
that we're working on in the last video.
17

17

00:00:42,230  -->  00:00:45,240
File, close project, and I'm gonna create a new one.
18

18

00:00:45,240  -->  00:00:46,490
Let's do that.
19

19

00:00:46,490  -->  00:00:49,030
Click on create your project as we've done previously.
20

20

00:00:49,030  -->  00:00:50,500
You need to leave Java selected
21

21

00:00:50,500  -->  00:00:52,930
and the project STK as it was.
22

22

00:00:52,930  -->  00:00:56,165
This time I'm going to check create project from template
23

23

00:00:56,165  -->  00:00:58,340
because I want to show you how we can
24

24

00:00:58,340  -->  00:01:00,100
automate some of this code and get IntelliJ
25

25

00:01:00,100  -->  00:01:01,350
to do some of the things for us
26

26

00:01:01,350  -->  00:01:04,960
that we had to do manually when we created our last project.
27

27

00:01:04,960  -->  00:01:06,130
Click on next.
28

28

00:01:06,130  -->  00:01:09,090
Here for the project name I'm going to call it Byte.
29

29

00:01:09,090  -->  00:01:10,202
Short
30

30

00:01:10,202  -->  00:01:11,130
Int
31

31

00:01:11,130  -->  00:01:12,080
Long.
32

32

00:01:12,080  -->  00:01:13,810
And these are four primitive types
33

33

00:01:13,810  -->  00:01:15,610
which we'll be going through in this course.
34

34

00:01:15,610  -->  00:01:18,180
Notice this time when I did that,
35

35

00:01:18,180  -->  00:01:19,440
under the project location,
36

36

00:01:19,440  -->  00:01:21,750
we've got our current project location
37

37

00:01:21,750  -->  00:01:23,550
but it's automatically created the subfolder.
38

38

00:01:23,550  -->  00:01:24,797
I mentioned that it will do that
39

39

00:01:24,797  -->  00:01:26,810
and it is actually doing that.
40

40

00:01:26,810  -->  00:01:28,100
The other thing I want to point out here
41

41

00:01:28,100  -->  00:01:29,590
is this base package.
42

42

00:01:29,590  -->  00:01:33,170
At the moment I'm using Academy.learn programming.
43

43

00:01:33,170  -->  00:01:34,883
What actually is a package?
44

44

00:01:35,860  -->  00:01:39,030
A package is a way to organise your Java projects.
45

45

00:01:39,030  -->  00:01:41,820
For now, consider packages as folders
46

46

00:01:41,820  -->  00:01:44,050
with learnprogramming in our example
47

47

00:01:44,050  -->  00:01:47,760
being a subfolder of the academy folder.
48

48

00:01:47,760  -->  00:01:51,300
Companies use their domain names reversed as a package.
49

49

00:01:51,300  -->  00:01:54,080
So learnprogramming.academy, which is our website,
50

50

00:01:54,080  -->  00:01:57,730
becomes academy.learnprogramming as a package.
51

51

00:01:57,730  -->  00:01:59,910
We will go into a lot more detail about packages
52

52

00:01:59,910  -->  00:02:02,960
when we need to later on in the course.
53

53

00:02:02,960  -->  00:02:04,240
This time we're going to get IntelliJ
54

54

00:02:04,240  -->  00:02:05,820
to create the class for us as I mentioned.
55

55

00:02:05,820  -->  00:02:08,900
That's why we checked the checkbox on the previous screen.
56

56

00:02:08,900  -->  00:02:10,390
So we'll leave that checked.
57

57

00:02:10,390  -->  00:02:12,040
And I'm going to click on finish.
58

58

00:02:14,960  -->  00:02:16,720
Notice that this time by doing that,
59

59

00:02:16,720  -->  00:02:17,560
two things have happened.
60

60

00:02:17,560  -->  00:02:20,690
First thing, we've got a class there created, main.java.
61

61

00:02:20,690  -->  00:02:22,380
We've got the package statement on line one
62

62

00:02:22,380  -->  00:02:25,530
but also we've got this public static void main method
63

63

00:02:25,530  -->  00:02:27,403
that we've talked about created for us as well.
64

64

00:02:27,403  -->  00:02:30,200
There's a helpful little line there on line six
65

65

00:02:30,200  -->  00:02:31,110
saying write your code here.
66

66

00:02:31,110  -->  00:02:33,420
So it's telling us where we can start coding.
67

67

00:02:33,420  -->  00:02:37,330
If we expand over the project here, click on source folder.
68

68

00:02:37,330  -->  00:02:38,180
Notice the packages.
69

69

00:02:38,180  -->  00:02:40,950
We've got academy and learnprogramming.
70

70

00:02:40,950  -->  00:02:42,300
I'm clicking those.
71

71

00:02:42,300  -->  00:02:43,210
And there's how far.
72

72

00:02:43,210  -->  00:02:46,780
You can see that our main class is in the learnprogramming
73

73

00:02:46,780  -->  00:02:49,400
part of the academy.learnprogramming package.
74

74

00:02:49,400  -->  00:02:51,620
But again, more on packages later on in the course.
75

75

00:02:51,620  -->  00:02:53,200
For now I'm just going to move this over a little bit
76

76

00:02:53,200  -->  00:02:54,810
because we don't really need to refer too much
77

77

00:02:54,810  -->  00:02:56,360
to the project.
78

78

00:02:56,360  -->  00:02:58,520
All right, so if you remember in the previous video,
79

79

00:02:58,520  -->  00:02:59,780
we created some code.
80

80

00:02:59,780  -->  00:03:00,840
It did something like this.
81

81

00:03:00,840  -->  00:03:01,880
I'm going to come over here and I'm going to
82

82

00:03:01,880  -->  00:03:06,340
delete that bit of text there, which was actually a comment.
83

83

00:03:06,340  -->  00:03:08,430
I'll talk about comment a little bit later.
84

84

00:03:08,430  -->  00:03:10,170
So in the last few videos, we did something like
85

85

00:03:10,170  -->  00:03:11,690
int my
86

86

00:03:11,690  -->  00:03:13,200
value
87

87

00:03:13,200  -->  00:03:14,170
equals
88

88

00:03:14,170  -->  00:03:16,230
10,000 semicolon.
89

89

00:03:16,230  -->  00:03:17,640
So what that was doing, if you recall,
90

90

00:03:17,640  -->  00:03:22,590
was creating a variable called myValue of type integer
91

91

00:03:22,590  -->  00:03:23,930
and we're initialising it
92

92

00:03:23,930  -->  00:03:26,610
with a value of 10,000 in this case.
93

93

00:03:26,610  -->  00:03:28,510
So the computer has allocated enough space
94

94

00:03:28,510  -->  00:03:30,720
to store an integer, and it's assigned a name
95

95

00:03:30,720  -->  00:03:32,190
for that variable of myValue.
96

96

00:03:32,190  -->  00:03:35,170
But what actually is an integer?
97

97

00:03:35,170  -->  00:03:36,960
Now we know that it's a whole number.
98

98

00:03:36,960  -->  00:03:39,310
But what can we store in an integer?
99

99

00:03:39,310  -->  00:03:40,710
Is the range infinite?
100

100

00:03:40,710  -->  00:03:42,570
Well, it turns out there is a range,
101

101

00:03:42,570  -->  00:03:45,270
which is usually the case for most data types.
102

102

00:03:45,270  -->  00:03:47,420
There's a minimum and maximum number
103

103

00:03:47,420  -->  00:03:50,470
that can be expressed or stored in an int.
104

104

00:03:50,470  -->  00:03:52,140
So let's type in some code.
105

105

00:03:52,140  -->  00:03:54,640
I'm going to show you how you can determine the range
106

106

00:03:54,640  -->  00:03:56,200
of a primitive type.
107

107

00:03:56,200  -->  00:03:57,500
So we can type in this code:
108

108

00:03:57,500  -->  00:03:58,333
int
109

109

00:03:59,498  -->  00:04:00,790
myMin
110

110

00:04:00,790  -->  00:04:01,630
IntValue
111

111

00:04:03,140  -->  00:04:04,730
We're using this for the minimum value.
112

112

00:04:04,730  -->  00:04:06,360
We're going to type equals Integer.
113

113

00:04:06,360  -->  00:04:09,440
A capital I, period, MIN.
114

114

00:04:09,440  -->  00:04:11,860
Notice that MIN adds core values, I'm selecting that
115

115

00:04:11,860  -->  00:04:12,693
by pressing enter.
116

116

00:04:12,693  -->  00:04:14,209
Semicolon.
117

117

00:04:14,209  -->  00:04:15,380
We're going to do the same for max.
118

118

00:04:15,380  -->  00:04:18,680
So int myMaxIntValue this time
119

119

00:04:19,550  -->  00:04:22,170
is equal to Integer period.
120

120

00:04:22,170  -->  00:04:24,993
This time we're going to use MAX and its core value.
121

121

00:04:25,940  -->  00:04:27,690
Let's now print those out.
122

122

00:04:27,690  -->  00:04:29,490
I'm going to type sout for a shortcut
123

123

00:04:29,490  -->  00:04:31,277
for a system dot out dot println.
124

124

00:04:31,277  -->  00:04:33,640
I'm going to use double quotes.
125

125

00:04:33,640  -->  00:04:34,610
Here's our option now.
126

126

00:04:34,610  -->  00:04:36,320
I'm going to show you how to display
127

127

00:04:36,320  -->  00:04:39,558
both text and some data on the same line.
128

128

00:04:39,558  -->  00:04:41,990
We can put our header or comment that we want to show
129

129

00:04:41,990  -->  00:04:44,220
Integer Minimum Value
130

130

00:04:46,600  -->  00:04:47,619
equals
131

131

00:04:47,619  -->  00:04:49,080
and then we've got the closing double quote there.
132

132

00:04:49,080  -->  00:04:51,670
Then I'm going to add a plus operator
133

133

00:04:51,670  -->  00:04:52,503
myMinIntValue.
134

134

00:04:53,437  -->  00:04:55,070
So I'm using the minimum value there.
135

135

00:04:55,070  -->  00:04:58,220
What I'm going to do is take a copy of this line.
136

136

00:04:58,220  -->  00:04:59,280
I'm gonna paste it.
137

137

00:04:59,280  -->  00:05:01,170
You can type it if you prefer.
138

138

00:05:01,170  -->  00:05:03,620
And I'm going to change minimum to maximum value.
139

139

00:05:05,000  -->  00:05:07,433
I'm going to change Min over here to Max.
140

140

00:05:08,270  -->  00:05:09,320
So you can see what we're doing there
141

141

00:05:09,320  -->  00:05:12,830
is we're printing out both the minimum and maximum values.
142

142

00:05:12,830  -->  00:05:15,090
But the point here in terms of the double quotes
143

143

00:05:15,090  -->  00:05:17,310
and the value is we've entered the text
144

144

00:05:17,310  -->  00:05:18,810
that we want to display on the screen
145

145

00:05:18,810  -->  00:05:20,540
and then we've added a plus.
146

146

00:05:20,540  -->  00:05:22,170
What happens is when you start out using
147

147

00:05:22,170  -->  00:05:23,770
a literal string like we're using here,
148

148

00:05:23,770  -->  00:05:25,440
then we use the plus operator,
149

149

00:05:25,440  -->  00:05:26,980
whatever follows the plus operator
150

150

00:05:26,980  -->  00:05:30,220
is converted to a string and gets outputted.
151

151

00:05:30,220  -->  00:05:32,070
So it's a handy way to combine text
152

152

00:05:32,070  -->  00:05:34,020
and, in this case, numeric output.
153

153

00:05:34,020  -->  00:05:35,410
It's not the best way to do things,
154

154

00:05:35,410  -->  00:05:39,000
but at this point in the course it's perfectly acceptable.
155

155

00:05:39,000  -->  00:05:41,390
We're using Integer instead of int.
156

156

00:05:41,390  -->  00:05:43,620
That's because int is a primitive type
157

157

00:05:43,620  -->  00:05:44,960
that really only gives us the option
158

158

00:05:44,960  -->  00:05:47,150
to set the variable's value.
159

159

00:05:47,150  -->  00:05:50,313
Integer on the other hand is what's called a Wrapper class.
160

160

00:05:52,080  -->  00:05:54,120
Java uses the concept of a Wrapper class
161

161

00:05:54,120  -->  00:05:56,290
for all eight primitive types.
162

162

00:05:56,290  -->  00:05:59,060
In the case of an int, we can use Integer,
163

163

00:05:59,060  -->  00:06:01,260
and by doing that it gives us ways to perform
164

164

00:06:01,260  -->  00:06:03,880
different operations on an int number.
165

165

00:06:03,880  -->  00:06:05,850
In this case, we're using the min and its core value
166

166

00:06:05,850  -->  00:06:07,510
and the max and its core value
167

167

00:06:07,510  -->  00:06:09,780
to get Java to tell us what are the minimum
168

168

00:06:09,780  -->  00:06:13,143
and maximum numbers that can be stored in an int data type.
169

169

00:06:14,310  -->  00:06:15,660
If we run this programme now,
170

170

00:06:20,761  -->  00:06:21,630
you can see a minimum range here is
171

171

00:06:21,630  -->  00:06:26,630
minus 2,147,483,648.
172

172

00:06:26,790  -->  00:06:31,790
And the maximum value can be 214,7483,647.
173

173

00:06:33,930  -->  00:06:35,660
So min and its core value there
174

174

00:06:35,660  -->  00:06:39,160
is the smallest value that we can set an int to,
175

175

00:06:39,160  -->  00:06:41,450
and max and its core value is the biggest.
176

176

00:06:41,450  -->  00:06:45,070
Just to confirm that, let's try adding plus one
177

177

00:06:45,070  -->  00:06:46,030
to one of these values.
178

178

00:06:46,030  -->  00:06:47,960
Use it for the max value.
179

179

00:06:47,960  -->  00:06:49,080
And see what happens.
180

180

00:06:49,080  -->  00:06:52,770
So to do that I'm going to top some code under here.
181

181

00:06:52,770  -->  00:06:55,035
We're going to do another sout.
182

182

00:06:55,035  -->  00:06:56,030
Sys out, s out.
183

183

00:06:56,030  -->  00:06:59,280
Double quotes, we're going to put Busted MAX value
184

184

00:07:00,520  -->  00:07:03,800
is equal to, and then we're going to put double quote there,
185

185

00:07:03,800  -->  00:07:05,387
then we're going to write plus.
186

186

00:07:05,387  -->  00:07:06,530
And then we're going to add parentheses here
187

187

00:07:06,530  -->  00:07:08,360
just to make it clear what we're doing here.
188

188

00:07:08,360  -->  00:07:11,090
We're going to get the myMaxIntValue
189

189

00:07:11,090  -->  00:07:13,960
and add one to it, which technically shouldn't be possible.
190

190

00:07:13,960  -->  00:07:15,597
Because we've already established that
191

191

00:07:15,597  -->  00:07:19,373
the line ten contains the maximum value of an integer
192

192

00:07:19,373  -->  00:07:21,090
and we're in fact trying to add one to it.
193

193

00:07:21,090  -->  00:07:23,540
So note that we haven't got an error here.
194

194

00:07:23,540  -->  00:07:24,593
But if we run this,
195

195

00:07:27,730  -->  00:07:29,810
look what's happened to the maximum value.
196

196

00:07:29,810  -->  00:07:33,010
We've assigned the maximum value plus one.
197

197

00:07:33,010  -->  00:07:34,800
And what's happened is that the number,
198

198

00:07:34,800  -->  00:07:36,540
Busted MAX value down the bottom there,
199

199

00:07:36,540  -->  00:07:39,940
has turned into a minus number, to a negative number.
200

200

00:07:39,940  -->  00:07:41,950
This is called an Overflow.
201

201

00:07:41,950  -->  00:07:43,910
We tried to put too large a number
202

202

00:07:43,910  -->  00:07:47,220
into the space allocated by the computer for an integer.
203

203

00:07:47,220  -->  00:07:50,900
Now it didn't fit, so the computer tried to fit it anyway.
204

204

00:07:50,900  -->  00:07:53,110
By doing that it overflowed.
205

205

00:07:53,110  -->  00:07:55,880
The reverse is also true here.
206

206

00:07:55,880  -->  00:07:58,363
So if I change that or actually add a new line.
207

207

00:07:59,239  -->  00:08:03,760
So an s out, and we'll put Busted MIN value
208

208

00:08:03,760  -->  00:08:06,240
is equal to a double quote plus
209

209

00:08:06,240  -->  00:08:10,423
and in parentheses again we'll put my min value, plus one.
210

210

00:08:11,440  -->  00:08:13,520
Now if I run that, actually what we'll do is
211

211

00:08:13,520  -->  00:08:15,350
we need to do a minus one there.
212

212

00:08:15,350  -->  00:08:16,690
And the reason we need to do a minus one there
213

213

00:08:16,690  -->  00:08:19,090
is we're trying to get a number that's less than
214

214

00:08:19,090  -->  00:08:20,690
the current minimum number.
215

215

00:08:20,690  -->  00:08:22,210
So we'll put a minus there.
216

216

00:08:22,210  -->  00:08:23,043
Let's run that.
217

217

00:08:25,990  -->  00:08:27,100
You can see what's happened there.
218

218

00:08:27,100  -->  00:08:29,410
In the case of our busted number, I made a typo there,
219

219

00:08:29,410  -->  00:08:31,360
so let me fix that up and run it again.
220

220

00:08:33,960  -->  00:08:35,570
So I've established that that minimum value
221

221

00:08:35,570  -->  00:08:38,410
is a minus two billion 147 million.
222

222

00:08:38,410  -->  00:08:42,380
But by trying to deduct one off that minimum number,
223

223

00:08:42,380  -->  00:08:46,440
we've sort of cycled around to the maximum value.
224

224

00:08:46,440  -->  00:08:48,890
This is a concept called Underflow this time
225

225

00:08:48,890  -->  00:08:49,893
and not Overflow.
226

226

00:08:51,430  -->  00:08:53,820
If you try and put a value larger than the maximum value
227

227

00:08:53,820  -->  00:08:56,647
in Java, or a value smaller than the minimmum value in Java,
228

228

00:08:56,647  -->  00:08:58,770
and we've done both in this video,
229

229

00:08:58,770  -->  00:09:00,490
then you'll get an Overflow in the case of
230

230

00:09:00,490  -->  00:09:03,160
the maximum value or an Underflow in the case
231

231

00:09:03,160  -->  00:09:04,220
of the minimum.
232

232

00:09:04,220  -->  00:09:06,150
So what's happening is the computer just skips back
233

233

00:09:06,150  -->  00:09:08,570
to the minimum number or the maximum number,
234

234

00:09:08,570  -->  00:09:10,533
which is usually not what you want.
235

235

00:09:10,533  -->  00:09:13,423
So it's an important concept to be aware of.
236

236

00:09:14,350  -->  00:09:17,650
So clearly here Overflow and Underflow is a bad thing.
237

237

00:09:17,650  -->  00:09:19,610
We don't want that happening with our code.
238

238

00:09:19,610  -->  00:09:21,400
As we'll see in the next video,
239

239

00:09:21,400  -->  00:09:23,470
there's a data type to hold much bigger numbers
240

240

00:09:23,470  -->  00:09:24,470
if we need them.
241

241

00:09:24,470  -->  00:09:27,350
But ultimately, as a programmer, it's our responsibility
242

242

00:09:27,350  -->  00:09:29,200
to use the appropriate data type
243

243

00:09:29,200  -->  00:09:31,560
and ensure the range of numbers we're trying to store
244

244

00:09:31,560  -->  00:09:33,660
in that data type is within the range.
245

245

00:09:33,660  -->  00:09:36,260
In this case the min value and max value.
246

246

00:09:36,260  -->  00:09:38,900
Note that if you just type a number bigger or smaller
247

247

00:09:38,900  -->  00:09:40,530
than the max or minimum value,
248

248

00:09:40,530  -->  00:09:42,030
Java will flag that as an error.
249

249

00:09:42,030  -->  00:09:44,060
So in other words if we use it as a literal.
250

250

00:09:44,060  -->  00:09:45,390
So to see what I mean, I'm going to grab
251

251

00:09:45,390  -->  00:09:47,258
the largest maximum value from our output.
252

252

00:09:47,258  -->  00:09:48,690
I'm just going to double click that.
253

253

00:09:48,690  -->  00:09:52,650
And do a control-c, command-c on a Mac.
254

254

00:09:52,650  -->  00:09:57,250
If I type in now int myMaxIntTest
255

255

00:09:59,030  -->  00:09:59,863
is equal to,
256

256

00:09:59,863  -->  00:10:01,596
I'm going to paste that value in.
257

257

00:10:01,596  -->  00:10:02,810
I could have just typed that in.
258

258

00:10:02,810  -->  00:10:04,600
Clearly we haven't got an error there.
259

259

00:10:04,600  -->  00:10:06,420
Just to confirm, we've run the programme.
260

260

00:10:06,420  -->  00:10:07,550
We won't see any different output
261

261

00:10:07,550  -->  00:10:09,360
because we haven't printed out a message.
262

262

00:10:09,360  -->  00:10:12,710
But if I try and increase that manually by one now,
263

263

00:10:12,710  -->  00:10:14,530
we've suddenly got an error.
264

264

00:10:14,530  -->  00:10:16,230
You can see there the error is telling us
265

265

00:10:16,230  -->  00:10:19,370
the integer number is too large.
266

266

00:10:19,370  -->  00:10:20,203
What's happening here is,
267

267

00:10:20,203  -->  00:10:22,740
because we've typed a literal value for an integer,
268

268

00:10:22,740  -->  00:10:25,180
and IntelliJ can then figure out and know that
269

269

00:10:25,180  -->  00:10:27,440
okay, that number is clearly outside of the range
270

270

00:10:27,440  -->  00:10:29,310
of the maximum number that can be stored.
271

271

00:10:29,310  -->  00:10:31,070
And we can flag it immediately.
272

272

00:10:31,070  -->  00:10:33,940
Look what happened with the code on line 13 and 14
273

273

00:10:33,940  -->  00:10:36,250
which didn't really tell us anything until we ran it.
274

274

00:10:36,250  -->  00:10:38,920
And in fact even then didn't give us an error.
275

275

00:10:38,920  -->  00:10:41,360
So any literal number typed without any other character
276

276

00:10:41,360  -->  00:10:43,350
at the end is assumed to be of type int.
277

277

00:10:43,350  -->  00:10:45,290
But more on that in the next video.
278

278

00:10:45,290  -->  00:10:46,590
Just one last point I want to make is,
279

279

00:10:46,590  -->  00:10:48,300
you might find that that's a little bit unreadable.
280

280

00:10:48,300  -->  00:10:49,690
But we'll change that back to a seven
281

281

00:10:49,690  -->  00:10:51,320
so it's no longer got an error.
282

282

00:10:51,320  -->  00:10:52,470
You can also use underscore.
283

283

00:10:52,470  -->  00:10:54,083
So we can put 2_147_483_647.
284

284

00:10:58,430  -->  00:11:00,720
So you can enter it in that format
285

285

00:11:00,720  -->  00:11:02,750
if that's easier for you to understand
286

286

00:11:02,750  -->  00:11:04,290
and to read at a glance.
287

287

00:11:04,290  -->  00:11:05,820
Either way is acceptable.
288

288

00:11:05,820  -->  00:11:08,330
Either entering it like a number on line 16
289

289

00:11:08,330  -->  00:11:10,230
or as we've done on line seven.
290

290

00:11:10,230  -->  00:11:12,610
Both of those ways are perfectly acceptable.
291

291

00:11:12,610  -->  00:11:14,460
I will say, with that said, I don't see a lot
292

292

00:11:14,460  -->  00:11:17,050
of code out there using the underscore approach.
293

293

00:11:17,050  -->  00:11:19,370
But it's valid from Java 7 and higher,
294

294

00:11:19,370  -->  00:11:21,580
so any version of the Java development kit
295

295

00:11:21,580  -->  00:11:24,173
from version 7 or higher it'll work.
296

296

00:11:25,240  -->  00:11:27,950
Let's end the video now we know a bit more about the int.
297

297

00:11:27,950  -->  00:11:29,450
In the next video we'll get introduced to
298

298

00:11:29,450  -->  00:11:31,330
three more primitive types,
299

299

00:11:31,330  -->  00:11:34,190
namely the byte, the short, and the long.
300

300

00:11:34,190  -->  00:11:35,490
See you in the next video.
