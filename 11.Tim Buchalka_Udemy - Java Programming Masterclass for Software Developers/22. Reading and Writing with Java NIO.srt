1
1

00:00:05,450  -->  00:00:06,290
- Alright.
2

2

00:00:06,290  -->  00:00:07,120
In the last video,
3

3

00:00:07,120  -->  00:00:11,270
we finished working with
Java.nio and Java.io.
4

4

00:00:11,270  -->  00:00:13,840
In other words, we're
giving the Java.nio classes
5

5

00:00:13,840  -->  00:00:17,340
to create to create commonly
used Java.io streams.
6

6

00:00:17,340  -->  00:00:18,910
It's now time to take a look at how
7

7

00:00:18,910  -->  00:00:23,060
to read and write text
files using Java.nio only.
8

8

00:00:23,060  -->  00:00:27,070
I said that doing I/O using
Java.nio means that data
9

9

00:00:27,070  -->  00:00:29,620
is processed in blocks
rather than one byte
10

10

00:00:29,620  -->  00:00:31,400
or character at a time.
11

11

00:00:31,400  -->  00:00:35,660
To accomplish this, Java.nio
uses channels and buffers
12

12

00:00:35,660  -->  00:00:38,370
and also sometimes selectors.
13

13

00:00:38,370  -->  00:00:42,010
In terms of definitions, a
channel is the DataSource
14

14

00:00:42,010  -->  00:00:44,330
you're reading from or writing to.
15

15

00:00:44,330  -->  00:00:48,230
That can be a file or socket
or any other DataSource.
16

16

00:00:48,230  -->  00:00:50,160
To use a DataSource as a channel,
17

17

00:00:50,160  -->  00:00:51,750
you need a class that implements
18

18

00:00:51,750  -->  00:00:54,950
the Java.nio.channel interface
19

19

00:00:54,950  -->  00:00:58,040
and can connect to the DataSource.
20

20

00:00:58,040  -->  00:00:59,800
A buffer, on the other hand,
21

21

00:00:59,800  -->  00:01:02,250
is the container for the block of data
22

22

00:01:02,250  -->  00:01:03,880
that you want to read or write.
23

23

00:01:03,880  -->  00:01:06,060
Buffers are typed and that means that they
24

24

00:01:06,060  -->  00:01:08,280
can only hold one type of data.
25

25

00:01:08,280  -->  00:01:11,060
You can actually specify the
size of the buffer as well.
26

26

00:01:11,060  -->  00:01:13,090
And finally, selectors.
27

27

00:01:13,090  -->  00:01:16,530
They allow a single
thread to manage the I/O
28

28

00:01:16,530  -->  00:01:18,220
for multiple channels.
29

29

00:01:18,220  -->  00:01:20,370
We won't actually be covering selectors
30

30

00:01:20,370  -->  00:01:22,260
because they're really
only generally needed
31

31

00:01:22,260  -->  00:01:25,100
in large enterprise applications.
32

32

00:01:25,100  -->  00:01:27,600
When working with streams,
which if you recall,
33

33

00:01:27,600  -->  00:01:29,850
can be byte-based or character-based,
34

34

00:01:29,850  -->  00:01:32,220
and we saw that in previous videos,
35

35

00:01:32,220  -->  00:01:35,400
you need two instances of Java.io class
36

36

00:01:35,400  -->  00:01:38,090
if you want to both read and write a file.
37

37

00:01:38,090  -->  00:01:39,960
You need one instance for reading
38

38

00:01:39,960  -->  00:01:41,590
and one instance for writing.
39

39

00:01:41,590  -->  00:01:43,600
As an example, if you
wanting to read and write
40

40

00:01:43,600  -->  00:01:45,510
to a file in a nonrandom way,
41

41

00:01:45,510  -->  00:01:48,620
you'd need to use
FileReader and FileWriter.
42

42

00:01:48,620  -->  00:01:51,650
When using Java.nio, you
only need one instance
43

43

00:01:51,650  -->  00:01:55,450
of a channel to both read and
write the same DataSource.
44

44

00:01:55,450  -->  00:01:58,180
Also, reading and writing
is always buffered
45

45

00:01:58,180  -->  00:02:00,220
so you don't have to wrap an instance with
46

46

00:02:00,220  -->  00:02:02,110
a buffered instance as you do when working
47

47

00:02:02,110  -->  00:02:03,190
with Java.io.
48

48

00:02:04,620  -->  00:02:06,800
To be used as a channel,
classes must implement
49

49

00:02:06,800  -->  00:02:10,300
the "Java.nio.channels.channel" interface.
50

50

00:02:11,430  -->  00:02:14,910
Though the JDK contains channels
for several data sources,
51

51

00:02:14,910  -->  00:02:19,210
including files, Network
I/O, as well as sockets.
52

52

00:02:19,210  -->  00:02:21,080
At this point in time,
we've pretty well beaten
53

53

00:02:21,080  -->  00:02:23,460
the adventure games application to death
54

54

00:02:23,460  -->  00:02:25,380
so we're going to create a new project
55

55

00:02:25,380  -->  00:02:28,330
to get familiar with how Java.nio I/O
56

56

00:02:28,330  -->  00:02:29,810
is typically done.
57

57

00:02:29,810  -->  00:02:32,130
Let's create that new project.
58

58

00:02:32,130  -->  00:02:34,550
We'll call this one Java.nio.
59

59

00:02:41,690  -->  00:02:42,520
Java.nio.
60

60

00:02:45,200  -->  00:02:46,250
I'll just put it in the right place
61

61

00:02:46,250  -->  00:02:47,500
on my computer.
62

62

00:02:54,310  -->  00:02:55,140
Okay.
63

63

00:02:55,140  -->  00:02:57,350
What we'll do to start off with,
64

64

00:02:57,350  -->  00:02:59,620
we're going to create a
file called "data.txt"
65

65

00:02:59,620  -->  00:03:00,680
that's got a bit of data in there.
66

66

00:03:00,680  -->  00:03:02,810
I'm going to right-click
on the Project Name,
67

67

00:03:02,810  -->  00:03:04,880
click on New - Select File.
68

68

00:03:04,880  -->  00:03:07,760
We'll call this one "data.txt".
69

69

00:03:07,760  -->  00:03:10,390
We're just going to put
three lines of text.
70

70

00:03:10,390  -->  00:03:13,330
Line one, line two, line three.
71

71

00:03:13,330  -->  00:03:14,850
Pretty basic.
72

72

00:03:14,850  -->  00:03:17,580
Alright, now that we've
got a file to work with,
73

73

00:03:17,580  -->  00:03:19,300
we're going to create
the channel that's going
74

74

00:03:19,300  -->  00:03:21,520
to be used to read and write the file.
75

75

00:03:21,520  -->  00:03:23,070
There are two ways to do this.
76

76

00:03:23,070  -->  00:03:26,270
You can create a channel from
an open file instance or,
77

77

00:03:26,270  -->  00:03:30,340
alternatively, you can use
the FileChannel.open method.
78

78

00:03:30,340  -->  00:03:34,390
Let's start by creating a
channel from an open file.
79

79

00:03:34,390  -->  00:03:37,520
We can get a FileChannel
from the instances
80

80

00:03:37,520  -->  00:03:38,860
of three classes.
81

81

00:03:38,860  -->  00:03:40,250
FileInputStream.
82

82

00:03:40,250  -->  00:03:41,680
FileOutputStream.
83

83

00:03:41,680  -->  00:03:43,430
And RandomAccessFile.
84

84

00:03:43,430  -->  00:03:45,990
We're actually going to be
using a FileInputStream.
85

85

00:03:45,990  -->  00:03:48,130
I'm going to open the source folder
86

86

00:03:48,130  -->  00:03:52,300
and open our Main.java that
was created with this project.
87

87

00:03:53,610  -->  00:03:55,440
We'll add a Try block.
88

88

00:03:56,300  -->  00:03:59,300
We're going to Catch our exceptions.
89

89

00:04:02,860  -->  00:04:05,560
And we'll just put the
Stack Trace in as an error.
90

90

00:04:05,560  -->  00:04:06,390
The code's going to be:
91

91

00:04:06,390  -->  00:04:07,730
"FileInputStream
92

92

00:04:09,340  -->  00:04:13,510
"file = new FileInputStream("data.txt");",
93

93

00:04:14,530  -->  00:04:17,630
the folder we just now created.
94

94

00:04:17,630  -->  00:04:18,520
And then we're going to do
95

95

00:04:18,520  -->  00:04:22,690
"FileChannel_channel
= file.getchannel();".
96

96

00:04:26,360  -->  00:04:28,310
So you create the FileInputStream
97

97

00:04:28,310  -->  00:04:29,590
as we're doing on Line 11
98

98

00:04:29,590  -->  00:04:31,350
and then on Line 12, we call in
99

99

00:04:31,350  -->  00:04:34,330
the GetChannel method
to get a FileChannel.
100

100

00:04:34,330  -->  00:04:36,830
Now I said earlier that
when using channels,
101

101

00:04:36,830  -->  00:04:39,830
you only need one channel
for both reading and writing.
102

102

00:04:39,830  -->  00:04:42,310
The FileChannel is an
exception to the rule.
103

103

00:04:42,310  -->  00:04:45,330
If you create a FileChannel
from a FileInputStream,
104

104

00:04:45,330  -->  00:04:48,060
it's actually only open for reading.
105

105

00:04:48,060  -->  00:04:50,840
If you create a file
of a FileOutputStream,
106

106

00:04:50,840  -->  00:04:52,630
it's only open for writing.
107

107

00:04:52,630  -->  00:04:53,920
And for a RandomAccessFile,
108

108

00:04:53,920  -->  00:04:56,100
it would depend on the
parameter you passed
109

109

00:04:56,100  -->  00:04:58,530
to the RandomAccessFile constructor.
110

110

00:04:58,530  -->  00:05:00,230
And if you remember that when we create
111

111

00:05:00,230  -->  00:05:01,740
a RandomAccessFile instance,
112

112

00:05:01,740  -->  00:05:04,670
you can specify whether the
file is open to read or write
113

113

00:05:04,670  -->  00:05:07,210
by using either R or RW.
114

114

00:05:07,210  -->  00:05:10,580
That's the parameter that you
passed to the constructor.
115

115

00:05:10,580  -->  00:05:13,200
Your next step will be
to create the buffer
116

116

00:05:13,200  -->  00:05:15,710
that's going to be used
to read from the file.
117

117

00:05:15,710  -->  00:05:16,980
Hang on a minute.
118

118

00:05:16,980  -->  00:05:19,720
Under the covers,
FileChannel is an instance
119

119

00:05:19,720  -->  00:05:22,010
of SeekableByteChannel.
120

120

00:05:22,010  -->  00:05:24,020
We're actually working with text
121

121

00:05:24,020  -->  00:05:25,810
so you might think that it should be easy
122

122

00:05:25,810  -->  00:05:30,160
to read a string or text
from a file using Java.nio
123

123

00:05:30,160  -->  00:05:33,860
but it's not or at least it
wasn't until fairly recently.
124

124

00:05:33,860  -->  00:05:36,570
When you create a buffer
to use with a channel,
125

125

00:05:36,570  -->  00:05:39,310
you have to specify the size of the buffer
126

126

00:05:39,310  -->  00:05:41,330
which will specify how many bytes are read
127

127

00:05:41,330  -->  00:05:43,540
from the file at any one time.
128

128

00:05:43,540  -->  00:05:46,420
Now what should the buffer
size be for your file?
129

129

00:05:46,420  -->  00:05:48,470
Right now, all the lines
are the same length
130

130

00:05:48,470  -->  00:05:50,700
so you could create a
buffer that has a size equal
131

131

00:05:50,700  -->  00:05:52,940
to the length of each line in the file.
132

132

00:05:52,940  -->  00:05:54,940
But what about files that contain lines
133

133

00:05:54,940  -->  00:05:57,910
of varying or different lengths?
134

134

00:05:57,910  -->  00:06:00,730
For example, if the first
lines is 25 bytes long
135

135

00:06:00,730  -->  00:06:02,690
and the next line is 100 bytes long,
136

136

00:06:02,690  -->  00:06:04,690
what should the buffer size be?
137

137

00:06:04,690  -->  00:06:07,380
If it's 25, then on the second read,
138

138

00:06:07,380  -->  00:06:09,630
you'll only get 25 bytes
of the second line.
139

139

00:06:09,630  -->  00:06:11,960
If it's a hundred, then
the first read will return
140

140

00:06:11,960  -->  00:06:14,880
all the first line and the first 75 bytes
141

141

00:06:14,880  -->  00:06:16,700
of the second line.
142

142

00:06:16,700  -->  00:06:18,790
In each read, you have to pass the buffer
143

143

00:06:18,790  -->  00:06:20,160
for new lines.
144

144

00:06:20,160  -->  00:06:22,110
If you only found part of the line,
145

145

00:06:22,110  -->  00:06:23,880
you'd have to do another
read to get more of
146

146

00:06:23,880  -->  00:06:25,860
the partial line, et cetera.
147

147

00:06:25,860  -->  00:06:27,940
It does sound complicated and
this is why you'd really want
148

148

00:06:27,940  -->  00:06:31,480
to do it that way when
dealing with text files.
149

149

00:06:31,480  -->  00:06:33,270
Fortunately, new methods
were introduced to
150

150

00:06:33,270  -->  00:06:36,760
the Java.nio.files class in Java 8
151

151

00:06:36,760  -->  00:06:38,600
that makes it easy to read one line
152

152

00:06:38,600  -->  00:06:40,490
of a text file at a time.
153

153

00:06:40,490  -->  00:06:41,610
Perhaps now you're getting some idea
154

154

00:06:41,610  -->  00:06:43,780
of why the development
community hasn't embraced
155

155

00:06:43,780  -->  00:06:46,220
Java.nio for File I/O.
156

156

00:06:46,220  -->  00:06:48,080
It has been around for years but
157

157

00:06:48,080  -->  00:06:50,600
the performance improvements
often aren't there
158

158

00:06:50,600  -->  00:06:52,600
and some pretty common ways of doing I/O
159

159

00:06:52,600  -->  00:06:54,230
were in fact overlooked.
160

160

00:06:54,230  -->  00:06:56,640
In fact, the Files Class
was only introduced
161

161

00:06:56,640  -->  00:06:58,260
to Java 7.
162

162

00:06:58,260  -->  00:06:59,920
It contained static methods that typically
163

163

00:06:59,920  -->  00:07:01,830
deal with File I/O.
164

164

00:07:01,830  -->  00:07:03,280
Hurrah, finally.
165

165

00:07:03,280  -->  00:07:04,110
Okay.
166

166

00:07:04,110  -->  00:07:06,360
Now since the file we're
working with is small,
167

167

00:07:06,360  -->  00:07:07,970
we're going to change
the code so that it reads
168

168

00:07:07,970  -->  00:07:10,160
the entire file in one shot.
169

169

00:07:10,160  -->  00:07:11,880
Since we're going to be
using a method introduced
170

170

00:07:11,880  -->  00:07:16,200
in Java 8, this won't work
with early versions of the JDK.
171

171

00:07:16,200  -->  00:07:18,700
It's JDK 8, specifically.
172

172

00:07:18,700  -->  00:07:22,430
We're just going to comment
out those two lines there.
173

173

00:07:22,430  -->  00:07:24,400
We're not going to be using those.
174

174

00:07:24,400  -->  00:07:25,850
The code is going to be:
175

175

00:07:25,850  -->  00:07:30,020
"Path dataPath =
FileSystems.getdefault().getpath
176

176

00:07:36,530  -->  00:07:39,740
"("data.txt");".
177

177

00:07:39,740  -->  00:07:43,080
Then we're going to do a "List<s>".</s>
178

178

00:07:43,910  -->  00:07:45,420
So a list of string...
179

179

00:07:45,420  -->  00:07:48,160
I'm creating a list of
string objects, calling it:
180

180

00:07:48,160  -->  00:07:52,330
"lines = Files.readAllLines(dataPath);".
181

181

00:07:54,380  -->  00:07:56,350
That's reading the entire file contents.
182

182

00:07:56,350  -->  00:07:58,120
And then we're going to
go through for each line:
183

183

00:07:58,120  -->  00:08:01,950
"for(String line : lines) {".
184

184

00:08:06,880  -->  00:08:11,110
And we're going to do a printout of lines
185

185

00:08:11,110  -->  00:08:12,830
and that should be it.
186

186

00:08:12,830  -->  00:08:15,160
We're doing this area here
because my new project
187

187

00:08:15,160  -->  00:08:17,750
hasn't been set for using JDK 8
188

188

00:08:18,640  -->  00:08:20,650
and you can see there
that it's telling us that
189

189

00:08:20,650  -->  00:08:22,080
the usage of API documented
190

190

00:08:22,080  -->  00:08:25,020
as Since 1.7+ so we need to go back
191

191

00:08:25,020  -->  00:08:28,610
into our Project - Open Module Settings.
192

192

00:08:30,550  -->  00:08:32,040
Click on Project and we want to make sure
193

193

00:08:32,040  -->  00:08:34,350
that we're specifying Visual 8,
194

194

00:08:34,350  -->  00:08:37,190
"Lambdas, type annotations etc.".
195

195

00:08:37,190  -->  00:08:39,170
And that fixes that error up.
196

196

00:08:39,170  -->  00:08:42,170
Let's actually try running this now.
197

197

00:08:44,130  -->  00:08:45,340
And, actually, what have I done?
198

198

00:08:45,340  -->  00:08:47,240
I've actually got an error here.
199

199

00:08:47,240  -->  00:08:48,600
I'm trying to print out the list each time
200

200

00:08:48,600  -->  00:08:51,210
instead of trying to print
out the individual element.
201

201

00:08:51,210  -->  00:08:52,910
So let's delete that
202

202

00:08:52,910  -->  00:08:55,700
and Print Out Line is
what it should have been.
203

203

00:08:55,700  -->  00:08:56,780
Run it again.
204

204

00:08:58,250  -->  00:09:00,570
And we've now got our
three lines of information
205

205

00:09:00,570  -->  00:09:02,650
coming out of our data.txt file.
206

206

00:09:02,650  -->  00:09:04,460
Very easy to do.
207

207

00:09:04,460  -->  00:09:05,810
You can see that, essentially,
208

208

00:09:05,810  -->  00:09:08,700
that we've got the path to
the folders we've done before.
209

209

00:09:08,700  -->  00:09:11,210
We then call the File.readAllLines method.
210

210

00:09:11,210  -->  00:09:12,820
You can see it here on Line 16
211

211

00:09:12,820  -->  00:09:14,650
and that returns a list of string objects
212

212

00:09:14,650  -->  00:09:17,320
and each entry will correspond
to one line in the file
213

213

00:09:17,320  -->  00:09:18,950
so you can see when we run the applet.
214

214

00:09:18,950  -->  00:09:21,670
We actually ran the contents.
215

215

00:09:21,670  -->  00:09:24,470
If you want to access the
folder in a random fashion,
216

216

00:09:24,470  -->  00:09:26,550
then you get a FileChannel
from an instance
217

217

00:09:26,550  -->  00:09:28,390
of RandomAccessFile.
218

218

00:09:28,390  -->  00:09:30,900
We'll see how to do that
in an upcoming video
219

219

00:09:30,900  -->  00:09:32,660
but if you're working
with a text folder to
220

220

00:09:32,660  -->  00:09:34,820
want to read or write sequentially,
221

221

00:09:34,820  -->  00:09:37,130
using the methods in the FilesClass
222

222

00:09:37,130  -->  00:09:38,540
is the way to go.
223

223

00:09:38,540  -->  00:09:40,560
We've seen how to read data.
224

224

00:09:40,560  -->  00:09:43,460
Let's actually add some
code to write some data.
225

225

00:09:43,460  -->  00:09:46,760
We can actually do that
by putting some code
226

226

00:09:46,760  -->  00:09:50,390
in the line after the path definition.
227

227

00:09:50,390  -->  00:09:53,060
We're going to be using
the Files.write method.
228

228

00:09:53,060  -->  00:09:54,960
Now, a few things to note here.
229

229

00:09:54,960  -->  00:09:58,160
Firstly, when using the
FilesClass to write a text file,
230

230

00:09:58,160  -->  00:10:01,010
each write is considered an isolated write
231

231

00:10:01,010  -->  00:10:03,080
in the sense that you don't open a file,
232

232

00:10:03,080  -->  00:10:05,110
call a write method a bunch of times
233

233

00:10:05,110  -->  00:10:06,780
and then close the file.
234

234

00:10:06,780  -->  00:10:09,480
Each call to Files.write
involves opening the file,
235

235

00:10:09,480  -->  00:10:12,000
writing to it, and then closing the file.
236

236

00:10:12,000  -->  00:10:15,000
Because of that, if you wanted
to write more than one line,
237

237

00:10:15,000  -->  00:10:17,240
you'd typically use
something like StringBuilder
238

238

00:10:17,240  -->  00:10:19,530
to build the text up
that you wanted to output
239

239

00:10:19,530  -->  00:10:21,290
and do it all in one shot.
240

240

00:10:21,290  -->  00:10:22,910
If the amount of output is large,
241

241

00:10:22,910  -->  00:10:24,400
you could do it in chunks perhaps.
242

242

00:10:24,400  -->  00:10:26,920
Something like 10 or 50
or maybe a hundred lines
243

243

00:10:26,920  -->  00:10:28,410
at a time.
244

244

00:10:28,410  -->  00:10:29,810
Now a Files.write method,
245

245

00:10:29,810  -->  00:10:32,320
you write bytes not strings.
246

246

00:10:32,320  -->  00:10:35,450
So we're going to be calling
the String.getbytes method
247

247

00:10:35,450  -->  00:10:37,310
to convert a string to bytes.
248

248

00:10:37,310  -->  00:10:38,860
Let's see how this works.
249

249

00:10:38,860  -->  00:10:40,060
I'm going to type in:
250

250

00:10:40,060  -->  00:10:43,220
Files.write(dataPath,
251

251

00:10:44,370  -->  00:10:45,650
It links to our--
252

252

00:10:45,650  -->  00:10:47,000
Points to our file.
253

253

00:10:47,000  -->  00:10:49,700
And in terms of the
output, we're going to do:
254

254

00:10:49,700  -->  00:10:51,860
"
" to go to a new line.
255

255

00:10:51,860  -->  00:10:52,700
"Line 4"
256

256

00:10:53,830  -->  00:10:57,580
And then, we want to do: ".getBytes".
257

257

00:10:57,580  -->  00:11:01,750
I'm going to pass or specify ("UTF-8").
258

258

00:11:03,550  -->  00:11:07,070
Parantheses and then
we want to put a comma.
259

259

00:11:07,070  -->  00:11:11,240
It's going to be:
",_StandardOpenOption.APPEND);".
260

260

00:11:12,850  -->  00:11:13,690
That's actually it.
261

261

00:11:13,690  -->  00:11:17,210
That's the code to write
some data to that file.
262

262

00:11:17,210  -->  00:11:20,880
Let's actually run that
and see if it works.
263

263

00:11:23,030  -->  00:11:24,720
You can see we've got one, two, three.
264

264

00:11:24,720  -->  00:11:27,050
Then we've got a space and then Line 4.
265

265

00:11:27,050  -->  00:11:30,220
That's because we've got a text file.
266

266

00:11:30,220  -->  00:11:31,960
I think I pressed Enter after Line 3
267

267

00:11:31,960  -->  00:11:33,730
which created a new line.
268

268

00:11:33,730  -->  00:11:35,890
We can actually delete that.
269

269

00:11:35,890  -->  00:11:37,850
Come back to here and
then we could comment out
270

270

00:11:37,850  -->  00:11:39,990
the write again because we don't want it
271

271

00:11:39,990  -->  00:11:41,040
to press us again on it.
272

272

00:11:41,040  -->  00:11:43,460
What we could do is make it look right
273

273

00:11:43,460  -->  00:11:45,110
on Line 5 this time.
274

274

00:11:45,110  -->  00:11:46,190
Run it again.
275

275

00:11:48,840  -->  00:11:51,000
Now I've got our five
lines of output appearing
276

276

00:11:51,000  -->  00:11:54,250
and our file has now got five entries.
277

277

00:11:54,250  -->  00:11:56,400
Alright, that's working well.
278

278

00:11:56,400  -->  00:11:59,100
Again, the only real thing
there that could potentially
279

279

00:11:59,100  -->  00:12:01,120
be confusing is the fact
that we've got a string here
280

280

00:12:01,120  -->  00:12:04,270
that we want to write but
we're using the .getBytes
281

281

00:12:04,270  -->  00:12:07,760
and passing the parameter of UTF-8
282

282

00:12:07,760  -->  00:12:08,670
for the character set.
283

283

00:12:08,670  -->  00:12:10,050
We're converting that string to bytes
284

284

00:12:10,050  -->  00:12:12,910
in other words and that's
because Files.write,
285

285

00:12:12,910  -->  00:12:14,610
that method actually need bytes.
286

286

00:12:14,610  -->  00:12:16,890
Because it actually
writes bytes and doesn't
287

287

00:12:16,890  -->  00:12:19,320
process the string directly.
288

288

00:12:19,320  -->  00:12:23,310
We're passing UTF-8 as the character set.
289

289

00:12:23,310  -->  00:12:25,810
But when you're actually
using the .readAllLines,
290

290

00:12:25,810  -->  00:12:28,010
UTF-8 is assumed.
291

291

00:12:28,010  -->  00:12:29,230
If you want to write text that's
292

292

00:12:29,230  -->  00:12:30,580
in a different character set,
293

293

00:12:30,580  -->  00:12:33,130
you can specify the character
set as a second parameter
294

294

00:12:33,130  -->  00:12:34,720
to the .readAllLines.
295

295

00:12:34,720  -->  00:12:37,050
So have a look at that.
296

296

00:12:37,050  -->  00:12:39,580
You can see that, by
default, it's returning:
297

297

00:12:39,580  -->  00:12:43,030
"readAllLines(path,
StandardCharsets.UTF_8".
298

298

00:12:43,030  -->  00:12:44,640
That's an overloaded method.
299

299

00:12:44,640  -->  00:12:48,090
So we could do something
very similar to that.
300

300

00:12:48,090  -->  00:12:51,590
We could pass that as: "StandardCharsets."
301

301

00:12:54,400  -->  00:12:57,580
and we could something like
"US_ASCII" for argument's sake.
302

302

00:12:57,580  -->  00:13:00,410
Again, we're not doing
that so UTF is assumed.
303

303

00:13:00,410  -->  00:13:02,920
That's more of an easy first method.
304

304

00:13:02,920  -->  00:13:04,480
By the way, the other thing is here
305

305

00:13:04,480  -->  00:13:05,830
you may not have actually
needed the leading
306

306

00:13:05,830  -->  00:13:07,560
new line character here in the string.
307

307

00:13:07,560  -->  00:13:09,620
If you included an new
line character at the end
308

308

00:13:09,620  -->  00:13:11,700
of Line 3 as you saw me do when you added
309

309

00:13:11,700  -->  00:13:12,790
the existing contents to the file,
310

310

00:13:12,790  -->  00:13:14,760
then you wouldn't need it.
311

311

00:13:14,760  -->  00:13:16,300
Alright, last thing to
note before we finish
312

312

00:13:16,300  -->  00:13:18,080
the video is this third parameter.
313

313

00:13:18,080  -->  00:13:20,670
This StandardOptionOpen.APPEND.
314

314

00:13:21,600  -->  00:13:23,450
That obviously means if you want to write
315

315

00:13:23,450  -->  00:13:25,400
to a file that already exists and you want
316

316

00:13:25,400  -->  00:13:27,530
to append the bytes to
the end of the file,
317

317

00:13:27,530  -->  00:13:29,820
that's the one you're actually using.
318

318

00:13:29,820  -->  00:13:31,050
That would be the right one.
319

319

00:13:31,050  -->  00:13:33,050
If you don't specify a third parameter,
320

320

00:13:33,050  -->  00:13:34,980
the method assumes that you, in fact,
321

321

00:13:34,980  -->  00:13:36,540
want to start fresh.
322

322

00:13:36,540  -->  00:13:39,010
If the file doesn't
exist, it'll create it.
323

323

00:13:39,010  -->  00:13:41,450
If it does exist, it'll
truncate or wipe out
324

324

00:13:41,450  -->  00:13:43,110
the existing contents.
325

325

00:13:43,110  -->  00:13:44,960
You can explicitly ask for that behaviour
326

326

00:13:44,960  -->  00:13:47,500
by passing StandardOpenOption.CREATE
327

327

00:13:47,500  -->  00:13:49,240
as a third parameter and also
328

328

00:13:49,240  -->  00:13:52,050
StandardOpenOption.TRUNCATE_EXISTING
329

329

00:13:52,050  -->  00:13:53,360
as a fourth parameter.
330

330

00:13:53,360  -->  00:13:55,710
The right method only
requires two parameters.
331

331

00:13:55,710  -->  00:13:57,030
Any others are optional and have
332

332

00:13:57,030  -->  00:13:59,100
to be of type OpenOption.
333

333

00:13:59,100  -->  00:14:00,350
But again, as you can see in our case,
334

334

00:14:00,350  -->  00:14:01,810
that clearly what we've done is working.
335

335

00:14:01,810  -->  00:14:05,800
We've now got five lines of
output appearing in that file.
336

336

00:14:05,800  -->  00:14:06,920
The other thing to note here about
337

337

00:14:06,920  -->  00:14:09,440
this Files.readAllLines method
338

338

00:14:09,440  -->  00:14:12,500
is that it reads the
entire file into memory.
339

339

00:14:12,500  -->  00:14:14,170
What would you do if you needed to read
340

340

00:14:14,170  -->  00:14:16,320
a huge text file and
you didn't want to read
341

341

00:14:16,320  -->  00:14:18,170
the entire thing into memory?
342

342

00:14:18,170  -->  00:14:20,040
Well, honestly, to be completely honest,
343

343

00:14:20,040  -->  00:14:22,320
you'd use the Java.io classes.
344

344

00:14:22,320  -->  00:14:24,450
You could use a ByteBuffer
and go through the pain
345

345

00:14:24,450  -->  00:14:26,140
of pausing at each line.
346

346

00:14:26,140  -->  00:14:29,200
You could also call
Files.NewBufferedReader
347

347

00:14:29,200  -->  00:14:30,780
to create a BufferedReader that's using
348

348

00:14:30,780  -->  00:14:32,510
a ByteChannel under the covers.
349

349

00:14:32,510  -->  00:14:33,720
But as mentioned earlier,
350

350

00:14:33,720  -->  00:14:36,170
some developers have benchmarked Java.io
351

351

00:14:36,170  -->  00:14:39,810
versus Java.nio and found that Java.nio
352

352

00:14:39,810  -->  00:14:41,980
is actually often much slower.
353

353

00:14:41,980  -->  00:14:43,670
If you're working with a huge text file,
354

354

00:14:43,670  -->  00:14:45,570
another thing to consider would be using
355

355

00:14:45,570  -->  00:14:47,420
a different file format.
356

356

00:14:47,420  -->  00:14:49,050
Perhaps you should be using a database
357

357

00:14:49,050  -->  00:14:50,830
rather than a flat file.
358

358

00:14:50,830  -->  00:14:52,870
Now the adventure game
examples that we've worked with
359

359

00:14:52,870  -->  00:14:55,620
use small files but since
there's a relationship between
360

360

00:14:55,620  -->  00:14:57,470
the locations and the exits,
361

361

00:14:57,470  -->  00:14:59,210
it may well have made more sense to store
362

362

00:14:59,210  -->  00:15:02,240
the data in a database
and retrieve it on demand
363

363

00:15:02,240  -->  00:15:04,960
as you did when using the
RandomAccessFile class.
364

364

00:15:04,960  -->  00:15:07,260
There's really no rule or
best practise that dictates
365

365

00:15:07,260  -->  00:15:10,170
using Java.nio over Java.io.
366

366

00:15:10,170  -->  00:15:12,600
If you're considering Java.nio, really,
367

367

00:15:12,600  -->  00:15:14,890
you should benchmark both
ways and see which one wins
368

368

00:15:14,890  -->  00:15:16,490
for your application.
369

369

00:15:16,490  -->  00:15:19,230
The only case in which Java.nio might be
370

370

00:15:19,230  -->  00:15:21,310
the recommended approach
is when you're working
371

371

00:15:21,310  -->  00:15:24,180
on a large application
that using multiple threads
372

372

00:15:24,180  -->  00:15:26,060
to do I/O.
373

373

00:15:26,060  -->  00:15:29,390
Otherwise, my opinion is that Java.io
374

374

00:15:29,390  -->  00:15:31,700
is absolutely fine to use.
375

375

00:15:31,700  -->  00:15:33,030
As you'll see later, though,
376

376

00:15:33,030  -->  00:15:35,450
Java.nio is an improvement when it comes
377

377

00:15:35,450  -->  00:15:37,630
to dealing with that file system.
378

378

00:15:37,630  -->  00:15:39,330
Let's finish the video here.
379

379

00:15:39,330  -->  00:15:41,290
In the next one, we're
going to turn our attention
380

380

00:15:41,290  -->  00:15:43,840
to binary files and how to work with those
381

381

00:15:43,840  -->  00:15:45,280
with Java.nio.
382

382

00:15:45,280  -->  00:15:47,450
See you in the next video.
