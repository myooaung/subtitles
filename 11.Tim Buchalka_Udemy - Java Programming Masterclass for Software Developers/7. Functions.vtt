WEBVTT
1
1

00:00:04.890  -->  00:00:08.880
so in the last video i finished off
saying just as with predicates there are
2

2

00:00:08.880  -->  00:00:13.920
more specific flavors of suppliers now
there's boolean supplier double supplier
3

3

00:00:13.920  -->  00:00:19.710
int supplier and also long supplier so
let's actually look at an example and
4

4

00:00:19.710  -->  00:00:23.310
let's just say that we want to print out
the last name of all the employees in
5

5

00:00:23.310  -->  00:00:29.970
the list and we can use the for each
method so let's do it that way first i'm
6

6

00:00:29.970  -->  00:00:37.680
going to start with employees.....
7

7

00:00:37.680  -->  00:01:11.130
....
8

8

00:01:11.130  -->  00:01:19.500
...so here we are finding the first space in the
9

9

00:01:19.500  -->  00:01:24.060
name and then using the substring method
to assign everything after it to last name
10

10

00:01:24.060  -->  00:01:33.140
then print out the last name so just try
running that confirm it works first and
11

11

00:01:33.140  -->  00:01:36.810
you can see we've got our last names
working ok then if this was something we
12

12

00:01:36.810  -->  00:01:41.180
wanted to frequently do we would go
would probably added a get last name method
13

13

00:01:41.180  -->  00:01:45.390
to the employee class but we'll pretend
that we don't want to do it for some
14

14

00:01:45.390  -->  00:01:50.100
reason however let's pretend that there
are several places in our application we
15

15

00:01:50.100  -->  00:01:54.680
need to get the last name of a single
employee we want to use a lambda
16

16

00:01:54.680  -->  00:01:59.820
expression that maps to one of the java.util.function interfaces now
17

17

00:01:59.820  -->  00:02:04.070
none of the interfaces we looked at so
far matches what we want to do consumer
18

18

00:02:04.070  -->  00:02:08.930
doesn't return a value supplier doesn't
accept any parameters and predicate only
19

19

00:02:08.930  -->  00:02:10.560
returns true or false
20

20

00:02:10.560  -->  00:02:14.760
so we want to actually pass in a string
and we then expect a string to be
21

21

00:02:14.760  -->  00:02:15.610
returned
22

22

00:02:15.610  -->  00:02:20.230
and this sounds like a job for the
function interface now the interface
23

23

00:02:20.230  -->  00:02:25.240
represents a function that takes one
parameter and returns a value the
24

24

00:02:25.240  -->  00:02:29.860
functional method that one that we use
with lambdas is the apply method so
25

25

00:02:29.860  -->  00:02:33.850
first let's create the lambda we're
going to use and assign it to a variable and
26

26

00:02:33.850  -->  00:02:39.370
will continue from there and let's just
remove or comment out the other for
27

27

00:02:39.370  -->  00:02:42.010
each statements that we've been using
here on some of the this other code
28

28

00:02:42.010  -->  00:02:45.400
as well we don't need this
anymore i'm just going to comment a lot
29

29

00:02:45.400  -->  00:02:46.510
of this out
30

30

00:02:46.510  -->  00:02:54.700
.....and start
typing up here above the initial list
31

31

00:02:54.700  -->  00:02:56.980
setup of our employees
32

32

00:02:56.980  -->  00:03:01.300
alright so we're going to be setting up
this function interface so we're going
33

33

00:03:01.300  -->  00:03:10.980
do....
34

34

00:03:10.980  -->  00:03:26.500
....
35

35

00:03:26.500  -->  00:03:33.700
.....
36

36

00:03:33.700  -->  00:03:41.620
....
37

37

00:03:41.620  -->  00:03:49.330
....so a couple of things
38

38

00:03:49.330  -->  00:03:51.130
to note with what we've just done here
39

39

00:03:51.130  -->  00:03:55.690
so first we use generics with function
the first type is the argument type
40

40

00:03:55.690  -->  00:03:58.260
which in this case would be an employee
41

41

00:03:58.260  -->  00:04:03.370
the second type is the return type which
will be a string also we need the curly
42

42

00:04:03.370  -->  00:04:08.560
braces around the return statement even
though there's only one statement and if
43

43

00:04:08.560  -->  00:04:12.730
you recall previously for this section
that when we return a value the curly
44

44

00:04:12.730  -->  00:04:16.900
braces are always required but having
said that for lambda expressions that
45

45

00:04:16.900  -->  00:04:20.530
are a single statement and return the
value we don't have to use the return
46

46

00:04:20.530  -->  00:04:24.880
keyword tis implied alright so right now
this function doesn't actually do
47

47

00:04:24.880  -->  00:04:28.660
anything to get the last name of an
employee we have to call the apply
48

48

00:04:28.660  -->  00:04:29.130
method
49

49

00:04:29.130  -->  00:04:33.280
and pass it to the employee object let's
go ahead and actually do that and see
50

50

00:04:33.280  -->  00:04:36.490
what happens we're going to get the last
name of the second employee in the list
51

51

00:04:36.490  -->  00:04:46.710
going to type....
52

52

00:04:46.710  -->  00:04:53.680
....
53

53

00:04:53.680  -->  00:05:00.610
....ok let's just run that and see if it
works you can see for the second employee
54

54

00:05:00.610  -->  00:05:02.770
which was up here
55

55

00:05:02.770  -->  00:05:08.460
well actually that was our 3rd one because I
accidentally type 2 so change to 1 we
56

56

00:05:08.460  -->  00:05:14.250
should get me this time when I ran that
because i was the second one was added we
57

57

00:05:14.250  -->  00:05:19.000
get my surname so that's working ok now we
could have just created a regular old
58

58

00:05:19.000  -->  00:05:23.370
method called get last name also as with
other lambda expressions we could also
59

59

00:05:23.370  -->  00:05:28.770
use anonymous class but by using
function we can pass code that accept
60

60

00:05:28.770  -->  00:05:33.630
returns a value to a method in the form
of a lambda expression and then run
61

61

00:05:33.630  -->  00:05:37.750
that code without having to create an
interface and a class that implements
62

62

00:05:37.750  -->  00:05:42.090
the interface so as we've seen
previously we can change what a method
63

63

00:05:42.090  -->  00:05:47.280
does based on the function we passing so
let's suppose that sometimes we want the
64

64

00:05:47.280  -->  00:05:51.520
first name of an employee and other
times you want the last name so we could
65

65

00:05:51.520  -->  00:05:55.870
write a separate get first name and get
last name methods but let's do it with
66

66

00:05:55.870  -->  00:06:00.520
one method instead so first we're going
to create a function for getting the
67

67

00:06:00.520  -->  00:06:13.140
first name so it's going to be function.....
68

68

00:06:13.140  -->  00:06:19.830
....
69

69

00:06:19.830  -->  00:06:28.890
.....
70

70

00:06:28.890  -->  00:06:35.880
....
71

71

00:06:36.930  -->  00:06:39.750
....so
this time we are starting from the start of the
72

72

00:06:39.750  -->  00:06:43.380
string up until we find the first space
so we are getting that first name instead of
73

73

00:06:43.380  -->  00:06:48.930
the last name will finish off that
definition for our function so now we're
74

74

00:06:48.930  -->  00:06:53.110
going to add a method that accepts
function employees string argument so
75

75

00:06:53.110  -->  00:06:59.730
I'm going to delete this just for a bit
of space we can see what we're doing so
76

76

00:06:59.730  -->  00:07:07.800
let's add that function down here or
methods I should so....
77

77

00:07:07.800  -->  00:07:31.770
....
78

78

00:07:32.370  -->  00:07:36.840
....alright so now we're going to add some
code to the main method that gets the
79

79

00:07:36.840  -->  00:07:46.560
first or the last name of each employee
so do....
80

80

00:07:46.560  -->  00:07:55.980
....
81

81

00:07:55.980  -->  00:08:06.150
....if that returns true we are going to
82

82

00:08:06.150  -->  00:08:10.560
actually get the first names so we're going
to do......
83

83

00:08:10.560  -->  00:08:34.770
....
84

84

00:08:34.770  -->  00:08:38.820
.....
85

85

00:08:38.820  -->  00:08:41.820
....so we run that to see that it works
86

86

00:08:43.860  -->  00:08:48.420
so you can see that in some cases were
getting surnames but snow is obviously
87

87

00:08:48.420  -->  00:08:50.250
a first name
88

88

00:08:50.250  -->  00:08:59.970
red is the first time we run this again
we should get random resulted each time
89

89

00:08:59.970  -->  00:09:03.770
you can see we are clearly getting different
result each time now in a more complex
90

90

00:09:03.770  -->  00:09:08.010
application there may well be cases
where we want to run similar code for a
91

91

00:09:08.010  -->  00:09:12.810
set of situations we may have say
30 lines of code we want to run and only two
92

92

00:09:12.810  -->  00:09:17.370
lines of code will vary depending on the
situation now rather than using
93

93

00:09:17.370  -->  00:09:21.930
interfaces with methods that are called
of the appropriate points or writing
94

94

00:09:21.930  -->  00:09:25.980
different methods for every situation we
can actually pass in functions for the
95

95

00:09:25.980  -->  00:09:30.890
parts that very that way the code will
be more concise and easy to follow
96

96

00:09:30.890  -->  00:09:37.350
another situation which functions are
useful is when we want to use callbacks
97

97

00:09:37.350  -->  00:09:41.760
so let's say that we're fetching data in a background thread and when the
98

98

00:09:41.760  -->  00:09:46.320
data is ready we want to massage out in
some way on the background thread and
99

99

00:09:46.320  -->  00:09:50.940
the specifics of what we want to do can
vary so we want to be able to specify
100

100

00:09:50.940  -->  00:09:55.470
the what code to run when the data has
been fetched now there are a number of
101

101

00:09:55.470  -->  00:10:00.180
ways that we could do this Java provides
ways to notify threads and run code
102

102

00:10:00.180  -->  00:10:05.490
when a background task is completed but
we can also use functions so let's
103

103

00:10:05.490  -->  00:10:08.330
actually just say that we're
fetching a bunch of images from the
104

104

00:10:08.330  -->  00:10:12.540
internet and when we have them we want
to resize them all the thread that
105

105

00:10:12.540  -->  00:10:16.470
started the background thread is
responsible for providing the code
106

106

00:10:16.470  -->  00:10:20.880
that will do the resizing so we could
do with the following way and what I'm going
107

107

00:10:20.880  -->  00:10:23.070
to do is I'm going to paste in some
code because you're not going to actually run
108

108

00:10:23.070  -->  00:10:27.060
this but we're going to discuss one possible way of doing it
109

109

00:10:27.060  -->  00:10:33.200
now this isn't a complete code sample and
we can't run it but we can discuss what
110

110

00:10:33.200  -->  00:10:37.760
it does the thread that wants images
fetched in the background who would have
111

111

00:10:37.760  -->  00:10:43.050
to provide an instance of a class that
implements resize image when the
112

112

00:10:43.050  -->  00:10:47.430
background thread has the images it
would call the run when done method and
113

113

00:10:47.430  -->  00:10:53.550
use a provided instance to resize the
images now there are different resizing
114

114

00:10:53.550  -->  00:10:56.970
algorithms and the one we want the one we
want to use may
115

115

00:10:57.570  -->  00:11:01.650
change depending on the current load of
the system so the requirements quality
116

116

00:11:01.650  -->  00:11:08.310
vs file size and other factors we have
to create a resize image implementation
117

117

00:11:08.310  -->  00:11:13.260
for every algorithm or we could use
functions and do the following its going
118

118

00:11:13.260  -->  00:11:18.480
to paste in a bit more code here now that
we've done it this way there's no need
119

119

00:11:18.480  -->  00:11:22.080
to write an interface and a bunch of
classes that then implement that
120

120

00:11:22.080  -->  00:11:27.810
interface we can create a function for
each algorithm we may want to use it once
121

121

00:11:27.810  -->  00:11:32.010
again using lambdas reduces the amount
of code we need to write and in this
122

122

00:11:32.010  -->  00:11:36.450
particular case would make the code
easier to follow now rather than having
123

123

00:11:36.450  -->  00:11:40.590
a bunch of classes each with a resize
image method we can actually define all
124

124

00:11:40.590  -->  00:11:45.480
the functions in one place anytime we
need to use a callback meaning that we
125

125

00:11:45.480  -->  00:11:50.670
want to run code when a specific non
user interface event occurs using a
126

126

00:11:50.670  -->  00:11:54.360
function is one option to consider so
hopefully at this point you're beginning to
127

127

00:11:54.360  -->  00:11:58.380
see the power of using lambdas with
functions so imagine that you want to
128

128

00:11:58.380  -->  00:12:03.030
transform an object in some way and
the transformation requires four steps
129

129

00:12:03.030  -->  00:12:04.800
for each step
130

130

00:12:04.800  -->  00:12:08.880
there are several different algorithms
you may want to run and which one to run
131

131

00:12:08.880  -->  00:12:12.540
will depend on a state of the
application at the time or on the object
132

132

00:12:12.540  -->  00:12:14.610
that will be transformed
133

133

00:12:14.610  -->  00:12:18.750
let's suppose that there are three
possible algorithms for step one 2 for step
134

134

00:12:18.750  -->  00:12:22.410
2 5 for step 3 and 3 for step 4
135

135

00:12:22.410  -->  00:12:29.730
so that's a possible 3 times 2 times 5
times 3 equals 90 variations how we do
136

136

00:12:29.730  -->  00:12:33.930
this using interfaces in a way that
wouldn't be unwieldly and require us to
137

137

00:12:33.930  -->  00:12:38.610
write lots of implementing classes using
functions instead would result in less
138

138

00:12:38.610  -->  00:12:41.820
code and the code would also be easier
to read
139

139

00:12:41.820  -->  00:12:46.140
all we really have to do is write a method
that accepts 4 functions and then
140

140

00:12:46.140  -->  00:12:50.670
write the 13 functions we may need to
use when we want to transform an object
141

141

00:12:50.670  -->  00:12:54.600
we passing the appropriate function
for each step so I don't know about you
142

142

00:12:54.600  -->  00:12:58.950
but to me that sounds easier and a lot
more readable this is really the power
143

143

00:12:58.950  -->  00:13:01.470
and convenience of using lambda
expressions
144

144

00:13:01.470  -->  00:13:05.070
alright I'm going to finish the video
here now in the next video we're going
145

145

00:13:05.070  -->  00:13:08.460
to continue on and we're going to work a
bit more using functions in our
146

146

00:13:08.460  -->  00:13:10.530
employee codes i will see you in the
next video
