WEBVTT
1
1

00:00:05.490  -->  00:00:08.850
So continuing on with collections
with our theater class.
2

2

00:00:08.850  -->  00:00:11.800
So looking at the top of it, up here.
3

3

00:00:11.800  -->  00:00:14.880
We've set on line 10 private list seat.
4

4

00:00:14.880  -->  00:00:16.470
And we're using an array list.
5

5

00:00:16.470  -->  00:00:20.250
So we can easily now change
that format to a linked list.
6

6

00:00:22.550  -->  00:00:25.110
Linked list and the code will still work.
7

7

00:00:25.110  -->  00:00:25.890
We can still run that.
8

8

00:00:29.890  -->  00:00:31.380
And everything still
works as it did before,
9

9

00:00:31.380  -->  00:00:32.950
we can see the first time it was reserved.
10

10

00:00:32.950  -->  00:00:35.770
The second time you need to pay
because it's already been reserved,
11

11

00:00:35.770  -->  00:00:38.450
so clearly the implementation's
still working.
12

12

00:00:38.450  -->  00:00:42.920
But we can be even more generic than that,
cuz we can change List to a Collection.
13

13

00:00:42.920  -->  00:00:46.990
So we could do something like this, we
can change The list clear to collection.
14

14

00:00:46.990  -->  00:00:50.220
And that's really using just that.
15

15

00:00:50.220  -->  00:00:54.640
It's making it really really generic
by making it of type collection.
16

16

00:00:54.640  -->  00:00:59.080
So the advantage doing that is it enables
us to use any of the collection classes
17

17

00:00:59.080  -->  00:01:00.630
to hold our seats.
18

18

00:01:00.630  -->  00:01:03.210
Now before we go ahead and do that,
what I want you to do is have a look at
19

19

00:01:03.210  -->  00:01:07.560
the interface hierarchy of the collections
framework and the Java docs are pretty
20

20

00:01:07.560  -->  00:01:10.680
good here, so I'm gonna take a copy
of this link off the screen.
21

21

00:01:10.680  -->  00:01:15.320
So I'm just gonna fire up a browser and
past the link in and the link will
22

22

00:01:15.320  -->  00:01:19.000
also be in the resources section, so
you can see here this little diagram,
23

23

00:01:19.000  -->  00:01:23.380
it gives you a little,
good overview Of the collections classes.
24

24

00:01:23.380  -->  00:01:28.690
So, the interfaces set list q and
dq all extend the collection interface.
25

25

00:01:28.690  -->  00:01:33.320
And there's also sorted set,
as you can see there, and that extend set.
26

26

00:01:33.320  -->  00:01:36.650
Now incidentally, the framework also
contains a separate [INAUDIBLE] Hierarchy
27

27

00:01:36.650  -->  00:01:38.970
for maps, and
I'll be discussing those later.
28

28

00:01:38.970  -->  00:01:42.180
So when we declare seats
to be of type collection.
29

29

00:01:42.180  -->  00:01:45.060
We can implement the list of seats
in a theater using any concrete
30

30

00:01:45.060  -->  00:01:48.510
class that implements one of
the interfaces that extend collection,
31

31

00:01:48.510  -->  00:01:50.100
[INAUDIBLE] you can see
on the screen there.
32

32

00:01:50.100  -->  00:01:51.400
Now we've already used a ray list and
33

33

00:01:51.400  -->  00:01:54.560
link list that implements
the list interface previously.
34

34

00:01:54.560  -->  00:01:56.370
And we can also use a hash set or
35

35

00:01:56.370  -->  00:01:59.750
a linked hash set that
implements set if we want to.
36

36

00:01:59.750  -->  00:02:01.860
And as it turns out,
I'm gonna use each in turn and
37

37

00:02:01.860  -->  00:02:03.730
verify that the program still runs.
38

38

00:02:03.730  -->  00:02:05.460
Let's try it first with a hash set.
39

39

00:02:05.460  -->  00:02:06.760
So I'm gonna go back.
40

40

00:02:06.760  -->  00:02:09.020
To my code.
Now that we've set it as Collection,
41

41

00:02:09.020  -->  00:02:11.880
we can change that over here
from LinkedList to a HashSet.
42

42

00:02:13.660  -->  00:02:16.150
HashSet, and we can go back and run this.
43

43

00:02:20.170  -->  00:02:21.430
Still works, as you can see there.
44

44

00:02:21.430  -->  00:02:23.810
We can get rid of the commented-out code.
45

45

00:02:23.810  -->  00:02:28.630
So in other words we can see the seats and
rows.
46

46

00:02:29.940  -->  00:02:33.250
You can see they're all still there,
noting that now we're in a different order
47

47

00:02:33.250  -->  00:02:35.850
but they are still there and
that's because we're using sets.
48

48

00:02:35.850  -->  00:02:38.050
We can also go back and
use the LinkedHashset.
49

49

00:02:38.050  -->  00:02:42.080
So LinkedHashset as you can see there.
50

50

00:02:43.230  -->  00:02:43.780
We can run that.
51

51

00:02:47.560  -->  00:02:49.040
Notice how that returns
an order this time.
52

52

00:02:49.040  -->  00:02:52.780
Now we're gonna be looking at
sets in more detail shortly, but
53

53

00:02:52.780  -->  00:02:56.320
at the moment hopefully this should really
demonstrate how array list and link list
54

54

00:02:56.320  -->  00:03:00.130
fit into the Collections framework, and
that they can be replaced with other data
55

55

00:03:00.130  -->  00:03:04.680
structures if that structure provides
benefit for a particular task.
56

56

00:03:04.680  -->  00:03:08.370
Now with that said however you must remain
on the same level of the hierarchy.
57

57

00:03:08.370  -->  00:03:13.180
So going back to our little diagram,
although we can
58

58

00:03:13.180  -->  00:03:18.010
use any what we can't do is drop down
a level and still expect things to work so
59

59

00:03:18.010  -->  00:03:22.120
the collection also includes a which
is actually on the screen there.
60

60

00:03:22.120  -->  00:03:23.700
But that implements sorted set.
61

61

00:03:23.700  -->  00:03:24.830
So that's sort of one level down.
62

62

00:03:24.830  -->  00:03:32.460
But if you go ahead and try and
use that tree set, try and run that.
63

63

00:03:34.150  -->  00:03:34.960
We actually get an error.
64

64

00:03:36.620  -->  00:03:41.270
And the error there is it's a class cast
exception And it's having trouble casting
65

65

00:03:41.270  -->  00:03:46.300
to the Comparable, because we're using
TreeSet, which again is one level down.
66

66

00:03:46.300  -->  00:03:49.040
So, TreeSet would be below SortedSet.
67

67

00:03:49.040  -->  00:03:51.720
So, any of these you can use, but you
can't use the ones below that directly.
68

68

00:03:51.720  -->  00:03:54.930
Directly, so I'm just gonna close that and
move this over a bit,
69

69

00:03:54.930  -->  00:04:00.500
close this down, and
undo that change, unlink that set.
70

70

00:04:00.500  -->  00:04:03.880
Now, tree set, as it turns out,
that we tried to use implement sorted set,
71

71

00:04:03.880  -->  00:04:08.600
and Actually what it does, it's
navigable set, which extends sorted set.
72

72

00:04:08.600  -->  00:04:13.000
It's got an additional requirement
that elements in it must contain or
73

73

00:04:13.000  -->  00:04:14.790
must be comparable.
74

74

00:04:14.790  -->  00:04:16.140
That's how the set is sorted.
75

75

00:04:16.140  -->  00:04:18.750
Because we didn't make
the seat class comparable,
76

76

00:04:18.750  -->  00:04:20.920
that's why we got that
class cast exception,
77

77

00:04:20.920  -->  00:04:25.650
if you try to add a little tree set
Now as we move down the hierarchy,
78

78

00:04:25.650  -->  00:04:29.600
the interfaces become more specialized,
so we can only replace classes with other
79

79

00:04:29.600  -->  00:04:34.760
classes that implement one of the core
collection interfaces at the same level.
80

80

00:04:34.760  -->  00:04:38.150
So the diagram that I was in a few
times that we looked at, and
81

81

00:04:38.150  -->  00:04:41.340
I'll just go back to it again And
you can see below that,
82

82

00:04:41.340  -->  00:04:45.070
it's actually got the text set
is a special kind of collection.
83

83

00:04:45.070  -->  00:04:48.000
Assorted set is a special kind of set and
so on.
84

84

00:04:48.000  -->  00:04:52.740
And that's why we've got that issue with
making sure things are at the same level
85

85

00:04:52.740  -->  00:04:55.200
when we're trying to replace and use them.
86

86

00:04:55.200  -->  00:04:58.080
Now before we move on to look
at what other classes are and
87

87

00:04:58.080  -->  00:05:01.040
why we might want to prefer to
use one instead of our lists.
88

88

00:05:01.040  -->  00:05:03.830
Let's talk about some of the remaining
methods provided by the collections
89

89

00:05:03.830  -->  00:05:05.540
framework to work with lists.
90

90

00:05:05.540  -->  00:05:08.010
Although there's not really
that many seats in our theater,
91

91

00:05:08.010  -->  00:05:09.870
getting back to our code.
92

92

00:05:09.870  -->  00:05:13.020
The reserve seat method isn't really
efficient the way we've written it.
93

93

00:05:13.020  -->  00:05:17.210
To see how many seats it has
to check in order to find H2.
94

94

00:05:17.210  -->  00:05:20.800
I'm going to make a little bit of a change
here to print a full stop every time
95

95

00:05:20.800  -->  00:05:23.210
the loop goes around and
I'm going to do that on line 31.
96

96

00:05:23.210  -->  00:05:27.900
So I'm going to change that and do
a print of the system out message dot and
97

97

00:05:27.900  -->  00:05:32.710
that's going to be so
that's going to put a dot on the screen so
98

98

00:05:32.710  -->  00:05:37.040
we know how many it's had to
check to find the relevant seed.
99

99

00:05:37.040  -->  00:05:39.130
And what we'll also do is we'll go back,
100

100

00:05:39.130  -->  00:05:42.860
change it to the ray list,
which is what we started with.
101

101

00:05:42.860  -->  00:05:45.820
So if you go back and run that, and the
other thing I'll do is I'll comment out
102

102

00:05:45.820  -->  00:05:48.920
the skit seats method again so we don't
see all the seats on the screen, so
103

103

00:05:48.920  -->  00:05:54.820
if we run this, you can see that
104

104

00:05:54.820  -->  00:05:58.170
there was a lot of dots on the screen,
a heck of a lot of dots from seed 11.
105

105

00:05:58.170  -->  00:06:03.530
So it's very inefficient,
the way it's been Designed at the moment,
106

106

00:06:03.530  -->  00:06:06.840
and you can more or less say it's
referred to as a brute force search
107

107

00:06:06.840  -->  00:06:09.980
in that it scans every element
until it finds the one we want.
108

108

00:06:09.980  -->  00:06:12.990
Now, the collections class provides
a blimey search method that performs
109

109

00:06:12.990  -->  00:06:14.210
much better.
110

110

00:06:14.210  -->  00:06:18.520
So that as a result we can improve the
reserve seat method and its performance.
111

111

00:06:18.520  -->  00:06:22.280
Now in order to get that to work we need
to implement the comparable interface in
112

112

00:06:22.280  -->  00:06:25.610
our seats class, and that's so
that Java knows how to compare two seats.
113

113

00:06:25.610  -->  00:06:30.040
So what we need to do is Theater again,
and we need to change our definition.
114

114

00:06:30.040  -->  00:06:33.650
And we've got public class Seat down here.
115

115

00:06:33.650  -->  00:06:42.220
We've got Seat, we want to change that
to implements, Comparable, comparable.
116

116

00:06:44.840  -->  00:06:48.300
And we're gonna compare on seat,
of course, which is the subject.
117

117

00:06:48.300  -->  00:06:51.960
And then what we need to do is
add the comparable code so that,
118

118

00:06:51.960  -->  00:06:53.940
again, Java knows how
to compare two seats.
119

119

00:06:53.940  -->  00:06:56.400
So what we're gonna do is just below here
120

120

00:06:56.400  -->  00:06:58.530
is we're gonna add
the override to compare to.
121

121

00:06:58.530  -->  00:07:01.490
And we need that, of course, so
that the comparison will work.
122

122

00:07:01.490  -->  00:07:05.880
So we're gonna override To
be compared to through here.
123

123

00:07:05.880  -->  00:07:09.660
Actually it's an interface and
we're implementing it.
124

124

00:07:09.660  -->  00:07:12.070
So I compare to,
you can see it's a parameter, it's a seat.
125

125

00:07:12.070  -->  00:07:15.430
I'm gonna change or it's got owed to
seat so it makes more sense for us.
126

126

00:07:15.430  -->  00:07:19.000
And what we can do to
figure out the comparison,
127

127

00:07:19.000  -->  00:07:21.010
it's actually a one liner we can do here.
128

128

00:07:21.010  -->  00:07:23.890
Instead of returning zero
we're gonna return this
129

129

00:07:23.890  -->  00:07:29.940
.seatnumber.compareto ignore
130

130

00:07:29.940  -->  00:07:34.740
case seat.getseatnumber.
131

131

00:07:34.740  -->  00:07:40.400
So that's gonna return
the number lesson zero, number
132

132

00:07:40.400  -->  00:07:45.230
zero with a recall intercourse, a number
greater than zero if it's greater than.
133

133

00:07:45.230  -->  00:07:46.070
And we saw that before.
134

134

00:07:46.070  -->  00:07:49.230
We've used comparable
previously in the course.
135

135

00:07:49.230  -->  00:07:52.280
But doing it this way now,
what we've got is a comparison
136

136

00:07:52.280  -->  00:07:56.850
that fulfills the interface, and
it means that we can now be able to use
137

137

00:07:56.850  -->  00:08:00.360
a different type of sex for our searching,
which is a lot more efficient.
138

138

00:08:00.360  -->  00:08:02.350
So now that we've done this
it's now a lot more efficient.
139

139

00:08:02.350  -->  00:08:06.080
We've added a compare to and we can
start implementing this binary list,
140

140

00:08:06.080  -->  00:08:08.710
a binary search I should say and
it's going to be a lot more efficient.
141

141

00:08:08.710  -->  00:08:11.890
And as you can see, with the compare to
method we're really just using the compare
142

142

00:08:11.890  -->  00:08:15.090
to method that's built
in to the string class.
143

143

00:08:15.090  -->  00:08:17.400
Then we'll make it, it's not anything
specialized other than that.
144

144

00:08:17.400  -->  00:08:20.820
But the important thing here is that
the seat class could contain more than
145

145

00:08:20.820  -->  00:08:21.840
one field.
146

146

00:08:21.840  -->  00:08:25.260
And if that was the case, java wouldn't
have any idea which one would be used for
147

147

00:08:25.260  -->  00:08:26.590
comparison.
148

148

00:08:26.590  -->  00:08:30.190
So if you have a more complex class,
this is where you put your code in for
149

149

00:08:30.190  -->  00:08:35.380
testing that comparable interface and
then you provide a compare to method,
150

150

00:08:35.380  -->  00:08:37.580
that the framerate can use,
which we've done here now.
151

151

00:08:37.580  -->  00:08:40.990
Now that we've done that, if we go
back up and check our reserve seat.
152

152

00:08:40.990  -->  00:08:42.460
We can change this a little bit now.
153

153

00:08:42.460  -->  00:08:43.800
I can go back to the top.
154

154

00:08:43.800  -->  00:08:47.570
The first bit is we're going
to create a requested seat.
155

155

00:08:47.570  -->  00:08:51.000
So instead of making that null,
that's going to be equal to new seat.
156

156

00:08:52.460  -->  00:08:55.130
Cuz we're gonna be using comparison now.
157

157

00:08:55.130  -->  00:08:57.370
Seat is going to be seat number,
number that's past on.
158

158

00:08:57.370  -->  00:09:02.550
So that's going to give us the object For
comparison purposes,
159

159

00:09:02.550  -->  00:09:06.650
like so and what we wanna do
is change this completely so
160

160

00:09:06.650  -->  00:09:16.200
I'm gonna put int foundSeat equals
collections.binarySearch and the search
161

161

00:09:16.200  -->  00:09:21.350
is gonna be on seats, which is our list
of seats and on the seat that we want to
162

162

00:09:21.350  -->  00:09:25.890
search it against which is the requested
seat we've just created online 29.
163

163

00:09:25.890  -->  00:09:28.710
And then we're passing null
cuz we're gonna use in built
164

164

00:09:28.710  -->  00:09:33.490
comparison operation there, so once we do
that we're gonna get a number back and
165

165

00:09:33.490  -->  00:09:36.570
the other thing I'll need to do to avoid
this error here is we need to change this
166

166

00:09:36.570  -->  00:09:39.320
collection back to a list cuz that's
what we were working on initially,
167

167

00:09:39.320  -->  00:09:42.040
and the error should then go away.
168

168

00:09:42.040  -->  00:09:46.130
So that's gonna run use to
the comparable interface and it's gonna
169

169

00:09:46.130  -->  00:09:50.320
use the method that we implemented to
check using the string compare to operator
170

170

00:09:50.320  -->  00:09:54.800
We'll compare to ignore case
method to the comparison for us.
171

171

00:09:54.800  -->  00:09:57.170
Then all we need to do after
that is just check for
172

172

00:09:57.170  -->  00:09:59.640
a number that's greater than to zero.
173

173

00:09:59.640  -->  00:10:03.360
So if found, c is greater or
equal to zero.
174

174

00:10:05.550  -->  00:10:07.860
Return, seat dot get.
175

175

00:10:07.860  -->  00:10:13.810
Found seat dot reserve.
176

176

00:10:15.210  -->  00:10:16.340
Then we'll put an else in here.
177

177

00:10:16.340  -->  00:10:20.670
Else there is no seat,
178

178

00:10:22.550  -->  00:10:27.650
past seat number to enforce.
179

179

00:10:32.960  -->  00:10:35.340
We'll just ignore this extra code
here now that we don't need.
180

180

00:10:36.760  -->  00:10:38.100
Show comment out.
181

181

00:10:38.100  -->  00:10:41.250
That's all been replaced now with
the collections binary search which is
182

182

00:10:41.250  -->  00:10:42.900
a lot more efficient.
183

183

00:10:42.900  -->  00:10:46.700
Now the reason that the binary search is
more It's really the fastest way to find
184

184

00:10:46.700  -->  00:10:48.660
an item in a sorted list, and
185

185

00:10:48.660  -->  00:10:51.810
it works by checking the element
in the midpoint of the list.
186

186

00:10:51.810  -->  00:10:55.150
So the method basically plays higher or
lower with the list.
187

187

00:10:55.150  -->  00:10:58.060
So if the middle element is greater
than the item that we're looking for
188

188

00:10:58.060  -->  00:11:02.150
Then it knows the one we want must
be in the first part of the list.
189

189

00:11:02.150  -->  00:11:04.800
[INAUDIBLE] then it performs
a binary search on that
190

190

00:11:04.800  -->  00:11:06.570
half of the list in the same way.
191

191

00:11:06.570  -->  00:11:08.710
So the list of is reduced
to half each time.
192

192

00:11:08.710  -->  00:11:13.350
So that's a result that will take no
more than 10 checks to find an item.
193

193

00:11:13.350  -->  00:11:17.350
Or decide it's not present
in a list of 1,024 elements,
194

194

00:11:17.350  -->  00:11:19.190
2 to the power of 10 is 1,024.
195

195

00:11:19.190  -->  00:11:22.760
So over a million items, actually,
196

196

00:11:22.760  -->  00:11:28.470
1,048,576 can be checked in
no more than 20 comparisons,
197

197

00:11:28.470  -->  00:11:33.030
and 64 comparisons are all that's required
to search a list With an absolutely huge
198

198

00:11:33.030  -->  00:11:36.510
number, so 1.844 to 10 to the 19th
element, so a number like this.
199

199

00:11:36.510  -->  00:11:41.410
So that would only take 64 comparisons.
200

200

00:11:41.410  -->  00:11:47.220
So it is blindingly fast compared to the
brute force approach that we took earlier,
201

201

00:11:47.220  -->  00:11:49.840
where we were just going through each and
every record.
202

202

00:11:49.840  -->  00:11:52.580
So you're not really gonna have to see
too much in terms of a performance.
203

203

00:11:52.580  -->  00:11:55.220
If we actually run this just
to confirm that it does work.
204

204

00:11:55.220  -->  00:11:59.820
You can see that it does
certainly work as it did before.
205

205

00:11:59.820  -->  00:12:03.670
But what I'm gonna do is paste some
code in, which is the code from
206

206

00:12:03.670  -->  00:12:08.350
The actual binary search Java
source code that comes with Java.
207

207

00:12:08.350  -->  00:12:11.110
And we're gonna past that
into our theater method.
208

208

00:12:12.130  -->  00:12:15.450
Now, we could go ahead and make
a change to the Java source files, but
209

209

00:12:15.450  -->  00:12:17.170
that wouldn't be a good idea in this case,
210

210

00:12:17.170  -->  00:12:19.710
because we'd be changing
the official Java source code.
211

211

00:12:19.710  -->  00:12:22.880
So it's easier to just convert or
just to copy the code in there but
212

212

00:12:22.880  -->  00:12:26.730
it's really a useful exercise
to see how that works.
213

213

00:12:26.730  -->  00:12:29.960
And one of the reasons we want to do that
is so that we can see the full stop.
214

214

00:12:29.960  -->  00:12:34.530
We can put some full stops in to see
the Progress in how many times it takes
215

215

00:12:34.530  -->  00:12:38.920
compared to our previous attempt as to
how many seats it needed to search for.
216

216

00:12:38.920  -->  00:12:41.320
Because obviously when we use
Collections.binarySearch,
217

217

00:12:41.320  -->  00:12:44.990
we haven't directly got a way of
getting access to seeing that part.
218

218

00:12:44.990  -->  00:12:46.780
If we change the code, we can do it.
219

219

00:12:46.780  -->  00:12:50.790
So, what I'm gonna do is copy and
paste this code to replace our method,
220

220

00:12:50.790  -->  00:12:52.720
and then we'll be able to
see it working in action.
221

221

00:12:52.720  -->  00:12:56.380
So I'm going to come here and
I'll copy all of this commented-out code.
222

222

00:12:56.380  -->  00:12:58.970
We'll Overwrite I should say so
there's nothing there.
223

223

00:13:00.180  -->  00:13:01.580
I'll paste that in.
224

224

00:13:01.580  -->  00:13:05.770
This is the source code that is part
of the search that comes with java so
225

225

00:13:05.770  -->  00:13:06.870
you can see what it's doing.
226

226

00:13:06.870  -->  00:13:10.990
It's, and obviously it's been adapted for
our particular purposes but
227

227

00:13:10.990  -->  00:13:13.590
essentially all the code
is exactly the same.
228

228

00:13:13.590  -->  00:13:15.330
So we're accepting the seat number.
229

229

00:13:15.330  -->  00:13:17.060
And you can see it's using
the low-high approach and
230

230

00:13:17.060  -->  00:13:18.780
starting with the low is the number zero.
231

231

00:13:18.780  -->  00:13:20.670
The high is the last element minus one.
232

232

00:13:20.670  -->  00:13:24.680
And it's using this high limit to
determine the comparison and sort of
233

233

00:13:24.680  -->  00:13:28.970
splitting it in half each time there,
finding the midpoint as I talked about.
234

234

00:13:28.970  -->  00:13:30.220
And it's going through and
235

235

00:13:30.220  -->  00:13:33.640
returning the relevant comparison
operator depending on the result.
236

236

00:13:33.640  -->  00:13:35.310
And I'll just fix that
little error up there.
237

237

00:13:36.510  -->  00:13:40.340
So consequently now,
we should be able to run this and
238

238

00:13:40.340  -->  00:13:44.350
see how many dots it printed compared
to the last attempt of our codes.
239

239

00:13:44.350  -->  00:13:50.690
So if you run that, you can see that In
this case, seat 11 was found in only.
240

240

00:13:50.690  -->  00:13:52.260
What's that, six dots?
241

241

00:13:52.260  -->  00:13:55.070
Significantly faster than the last case.
242

242

00:13:55.070  -->  00:13:59.520
So let's try booking a few other things
just to see the different results here.
243

243

00:13:59.520  -->  00:14:01.290
So we could try booking D12.
244

244

00:14:01.290  -->  00:14:04.610
That's probably going to give us one
of the best cases if we try D12.
245

245

00:14:04.610  -->  00:14:06.400
D12.
and what I'll do is
246

246

00:14:07.540  -->  00:14:11.040
I'll just take this second part out of
there because we don't need that anymore,
247

247

00:14:11.040  -->  00:14:13.140
just to run to see how fast it is.
248

248

00:14:13.140  -->  00:14:18.680
So if you try that, obviously there
was something significantly, it was
249

249

00:14:18.680  -->  00:14:21.890
either the second time, went through once,
and then on the second time it threw.
250

250

00:14:21.890  -->  00:14:24.820
It found D12, so that's much, much faster.
251

251

00:14:24.820  -->  00:14:28.350
H12 or 8 or B11 are two of the worst.
252

252

00:14:28.350  -->  00:14:30.610
And also try it when it doesn't exist.
253

253

00:14:30.610  -->  00:14:32.850
Let's try something like B13.
254

254

00:14:32.850  -->  00:14:37.450
We'll run that You can see that it
didn't go through all the elements.
255

255

00:14:37.450  -->  00:14:40.620
It's still only, what's that, one, two,
three, four, five, six, seven iterations,
256

256

00:14:40.620  -->  00:14:42.960
including the last one,
that there's no seat B13.
257

257

00:14:42.960  -->  00:14:47.600
So it's significantly faster than
our other attempt at searching.
258

258

00:14:47.600  -->  00:14:50.320
Now, obviously, in this particular case,
259

259

00:14:50.320  -->  00:14:54.140
with only 96 seats in our theater,
It's not really in it's shoe, but when you
260

260

00:14:54.140  -->  00:14:58.980
start talking thousands of records using
features like this in this case binary
261

261

00:14:58.980  -->  00:15:02.650
search which is part of the collections
framework, it makes a lot more sense.
262

262

00:15:02.650  -->  00:15:05.720
Now, the other thing I wanna point out is,
going back to this code, normally,
263

263

00:15:05.720  -->  00:15:09.960
you wouldn’t copy the collections
message like this, we just call them
264

264

00:15:09.960  -->  00:15:13.570
like we did with the binary search
earlier, before I copy and paste it over.
265

265

00:15:13.570  -->  00:15:16.510
But it’s just really interesting to
see how efficient the binary search
266

266

00:15:16.510  -->  00:15:19.330
algorithm is And
we did that by adding the adopt
267

267

00:15:19.330  -->  00:15:22.500
to show us how many iterations it
took to where we wanted to go to.
268

268

00:15:22.500  -->  00:15:25.650
And it's also good to know that we
don't have to write our own versions of
269

269

00:15:25.650  -->  00:15:28.950
the algorithms that are included
in the Collections class.
270

270

00:15:28.950  -->  00:15:30.000
So I'm gonna end the video here now.
271

271

00:15:30.000  -->  00:15:33.950
In the next video I'm gonna go on and
talk some more about the binary search and
272

272

00:15:33.950  -->  00:15:36.470
how it works, and
we'll go on to the next step.
273

273

00:15:36.470  -->  00:15:37.760
So I'll see you in the next video.
