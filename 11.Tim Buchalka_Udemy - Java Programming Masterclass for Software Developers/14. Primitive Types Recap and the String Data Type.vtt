WEBVTT
0
1
00:00:05.210 --> 00:00:07.600
In the previous video, we looked at the Char
1

2
00:00:07.600 --> 00:00:09.660
and also the Boolean data type
2

3
00:00:09.660 --> 00:00:11.940
which was the seventh and eighth primitive data types
3

4
00:00:11.940 --> 00:00:13.760
that we've covered so far in the course.
4

5
00:00:13.760 --> 00:00:15.010
And in fact that was the last two
5

6
00:00:15.010 --> 00:00:17.730
there's only eight primitive data types in Java.
6

7
00:00:17.730 --> 00:00:20.110
It's now time to have a little recap
7

8
00:00:20.110 --> 00:00:21.900
briefly of where we are with those data types
8

9
00:00:21.900 --> 00:00:25.090
but then to discuss a very important data type
9

10
00:00:25.090 --> 00:00:26.790
that you were using a lot in this course
10

11
00:00:26.790 --> 00:00:29.690
and in fact anytime you're programming in Java.
11

12
00:00:29.690 --> 00:00:31.100
So I've got a new project open
12

13
00:00:31.100 --> 00:00:33.410
called Strings for the code we'll be working on.
13

14
00:00:33.410 --> 00:00:36.430
So if you're following along, create a new project.
14

15
00:00:36.430 --> 00:00:39.020
Alright so the eight primitive types
15

16
00:00:39.020 --> 00:00:42.266
that we worked on previously, of course were Byte
16

17
00:00:42.266 --> 00:00:44.240
I'll just type this over
17

18
00:00:44.240 --> 00:00:46.990
so after Byte we had the Short
18

19
00:00:46.990 --> 00:00:50.070
the Int, I'm putting two backslashes there
19

20
00:00:50.070 --> 00:00:52.767
sorry two forward slashes to indicate that it's a comment.
20

21
00:00:52.767 --> 00:00:56.340
The comment is ignored by the Java compiler
21

22
00:00:56.340 --> 00:00:59.360
and basically just enables us to put some
22

23
00:00:59.360 --> 00:01:02.290
comments or information that we can actually refer to later.
23

24
00:01:02.290 --> 00:01:04.060
I've just ignored.
24

25
00:01:04.060 --> 00:01:06.340
Alright so that were the eight data types
25

26
00:01:06.340 --> 00:01:08.490
that we've talked about before.
26

27
00:01:08.490 --> 00:01:10.210
Each of these primitive types
27

28
00:01:10.210 --> 00:01:12.850
as you found out if you've looked at the previous videos
28

29
00:01:12.850 --> 00:01:16.260
has got its own style and is used for different purposes.
29

30
00:01:16.260 --> 00:01:17.317
So the Byte as we found out
30

31
00:01:17.317 --> 00:01:18.950
can only hold a number in the range of
31

32
00:01:18.950 --> 00:01:23.120
minus 128 to plus 127, so it's entirely possible
32

33
00:01:23.120 --> 00:01:25.230
that you'll go years as a Java developer
33

34
00:01:25.230 --> 00:01:28.010
and not even need to use the Byte ever.
34

35
00:01:28.010 --> 00:01:29.990
The most common primitive types you'll use
35

36
00:01:29.990 --> 00:01:32.900
will be an Int, a Double and a Boolean
36

37
00:01:32.900 --> 00:01:34.203
and you probably from time-to-time
37

38
00:01:34.203 --> 00:01:37.730
need to use a Long and a Char, but not as often.
38

39
00:01:37.730 --> 00:01:41.040
And Short and Float as well as Byte that I've mentioned
39

40
00:01:41.040 --> 00:01:43.720
well these types are used rarely if at all.
40

41
00:01:43.720 --> 00:01:45.440
Now as you get more experienced in Java
41

42
00:01:45.440 --> 00:01:47.820
you'll learn to use the right primitive type
42

43
00:01:47.820 --> 00:01:50.060
for a given computing problem and that's actually
43

44
00:01:50.060 --> 00:01:52.290
all part of becoming a programmer.
44

45
00:01:52.290 --> 00:01:54.340
So just to reinforce those eight data types
45

46
00:01:54.340 --> 00:01:56.010
we've looked at are primitive types
46

47
00:01:56.010 --> 00:01:58.670
built into the Java programming language.
47

48
00:01:58.670 --> 00:02:00.890
Now as we go through the course further
48

49
00:02:00.890 --> 00:02:02.450
you'll find that there's a way to create
49

50
00:02:02.450 --> 00:02:05.950
your own data types, which in Java are called Classes.
50

51
00:02:05.950 --> 00:02:08.750
Now there's an entire section in this course on Classes
51

52
00:02:08.750 --> 00:02:11.660
so I'm not going to go into more detail about Classes here
52

53
00:02:11.660 --> 00:02:13.380
but what's interesting about them
53

54
00:02:13.380 --> 00:02:15.950
is that you can combine data types like
54

55
00:02:15.950 --> 00:02:19.500
perhaps one or more Ints, Doubles, booleans etc
55

56
00:02:19.500 --> 00:02:22.200
and sort of create sort of like a super data type
56

57
00:02:22.200 --> 00:02:24.590
which again are called Classes in Java
57

58
00:02:24.590 --> 00:02:27.080
but more on that when we get to the Classes section.
58

59
00:02:27.080 --> 00:02:30.050
For now though let's talk about another data type
59

60
00:02:30.050 --> 00:02:31.543
and that's the String.
60

61
00:02:33.680 --> 00:02:35.530
So the string is a data type in Java
61

62
00:02:35.530 --> 00:02:37.550
which is not a primitive type.
62

63
00:02:37.550 --> 00:02:39.250
It's actually a Class
63

64
00:02:39.250 --> 00:02:41.780
but it enjoys a bit of favouritism in Java
64

65
00:02:41.780 --> 00:02:44.480
to make it easy to use than a regular Class.
65

66
00:02:44.480 --> 00:02:46.250
In other words its treated a little bit differently
66

67
00:02:46.250 --> 00:02:47.510
and you can treat it differently
67

68
00:02:47.510 --> 00:02:49.410
than you'd normally treat a Class.
68

69
00:02:49.410 --> 00:02:51.050
So what is a string?
69

70
00:02:51.050 --> 00:02:53.510
Well a string is a sequence of characters.
70

71
00:02:53.510 --> 00:02:56.760
Now if you recall in the case of the Char primitive type
71

72
00:02:56.760 --> 00:02:57.960
which you can see above
72

73
00:02:57.960 --> 00:03:00.090
and we discussed that in the previous video
73

74
00:03:00.090 --> 00:03:02.500
that could contain only a single character
74

75
00:03:02.500 --> 00:03:05.460
either a regular character or a Unicode character.
75

76
00:03:05.460 --> 00:03:06.830
A string on the other hand
76

77
00:03:06.830 --> 00:03:09.010
that can contain a sequence of characters
77

78
00:03:09.010 --> 00:03:10.920
in fact a large number of characters.
78

79
00:03:10.920 --> 00:03:12.990
It's technically only limited by the amount
79

80
00:03:12.990 --> 00:03:15.800
of memory space, heap space in your computer
80

81
00:03:15.800 --> 00:03:18.470
or the MAX_VALUE of an Int
81

82
00:03:18.470 --> 00:03:21.100
and if you recall when we're looking at Ints
82

83
00:03:21.100 --> 00:03:24.130
and their maximum sizes was around 2.14 billion.
83

84
00:03:24.130 --> 00:03:25.510
So that's a heck of a lot of characters
84

85
00:03:25.510 --> 00:03:28.170
that could potentially fit in a string.
85

86
00:03:28.170 --> 00:03:30.610
We'll start the definement, let's go ahead and do that
86

87
00:03:30.610 --> 00:03:33.980
and we do that by typing String, capital S
87

88
00:03:33.980 --> 00:03:36.470
and a variable name myString equals
88

89
00:03:36.470 --> 00:03:40.601
in double quotes the value we'll set, 'This is a string'
89

90
00:03:40.601 --> 00:03:41.660
so you can see that it's very much
90

91
00:03:41.660 --> 00:03:44.170
like a primitive type in terms of how we use it.
91

92
00:03:44.170 --> 00:03:46.410
And let's just print this out
92

93
00:03:46.410 --> 00:03:47.850
I'm gonna put a message first to say
93

94
00:03:47.850 --> 00:03:52.850
'myString is equal to' closing double quote plus
94

95
00:03:52.850 --> 00:03:55.310
and then myString, the variable
95

96
00:03:55.310 --> 00:03:58.670
and if we run this, you can see the output is
96

97
00:03:58.670 --> 00:04:01.410
myString is equal to and then what we assign myString to
97

98
00:04:01.410 --> 00:04:03.420
which is 'This is a string'.
98

99
00:04:03.420 --> 00:04:05.750
Now we can also append to that string automatically
99

100
00:04:05.750 --> 00:04:07.330
by using the plus operator
100

101
00:04:07.330 --> 00:04:10.960
in fact we sort of did something similar on line 15.
101

102
00:04:10.960 --> 00:04:14.260
So to do that to this myString variable
102

103
00:04:14.260 --> 00:04:17.130
we can type myString is equal to
103

104
00:04:17.130 --> 00:04:21.342
myString plus, then double quotes comma
104

105
00:04:21.342 --> 00:04:24.760
'and this is more', a semicolon
105

106
00:04:24.760 --> 00:04:26.980
then let's output it, so what we'll do is
106

107
00:04:26.980 --> 00:04:28.260
we'll just copy the entire line
107

108
00:04:28.260 --> 00:04:31.599
the output line from line 15 I'll paste them to line 17
108

109
00:04:31.599 --> 00:04:32.849
and we'll run that again.
109

110
00:04:36.990 --> 00:04:37.870
So what that's doing there
110

111
00:04:37.870 --> 00:04:40.380
that's appending the text and the double quotes
111

112
00:04:40.380 --> 00:04:43.700
on line 16 to the existing contents of myString
112

113
00:04:43.700 --> 00:04:45.710
and we can see looking at the output
113

114
00:04:45.710 --> 00:04:46.543
that myString is now equal to
114

115
00:04:46.543 --> 00:04:49.230
'This is a string comma and this is more
115

116
00:04:49.230 --> 00:04:50.860
with a period on the end.
116

117
00:04:50.860 --> 00:04:53.330
So what we're saying is make myString
117

118
00:04:53.330 --> 00:04:55.650
equal to whatever it currently is
118

119
00:04:55.650 --> 00:04:57.120
when the programme gets to that point
119

120
00:04:57.120 --> 00:05:00.530
and this is the code I'm talking about, it's on line 16.
120

121
00:05:00.530 --> 00:05:02.260
So as of the time it's looking
121

122
00:05:02.260 --> 00:05:04.550
at the code on to the right of the equal sign
122

123
00:05:04.550 --> 00:05:06.350
myString is set to this as a string
123

124
00:05:06.350 --> 00:05:09.120
and we're saying add by the use of the plus operator
124

125
00:05:09.120 --> 00:05:10.900
that X comma and this is more.
125

126
00:05:10.900 --> 00:05:12.140
And that's why we're seeing the output
126

127
00:05:12.140 --> 00:05:15.180
in the output window with the extra output.
127

128
00:05:15.180 --> 00:05:16.170
Alright another thing you can do
128

129
00:05:16.170 --> 00:05:18.060
is you can use Unicode characters
129

130
00:05:18.060 --> 00:05:19.870
so we could continue this example
130

131
00:05:19.870 --> 00:05:24.290
by typing myString equal myString plus
131

132
00:05:24.290 --> 00:05:25.710
this time I put a double quotes
132

133
00:05:25.710 --> 00:05:28.460
and we'll put the \u00A9
133

134
00:05:28.460 --> 00:05:30.690
which is a code for the copyright symbol.
134

135
00:05:30.690 --> 00:05:35.690
Let's put the year 2019 and let's copy line 17
135

136
00:05:35.910 --> 00:05:36.900
to check the output out
136

137
00:05:36.900 --> 00:05:38.953
so let's see what happens when we've done that.
137

138
00:05:42.480 --> 00:05:44.250
You can see the output to the right hand side
138

139
00:05:44.250 --> 00:05:47.200
has now got copyright 2019.
139

140
00:05:47.200 --> 00:05:49.350
So you can do that as well, you can see that
140

141
00:05:49.350 --> 00:05:51.040
it's got some versatility, we can use
141

142
00:05:51.040 --> 00:05:52.930
the Unicode characters and regular characters
142

143
00:05:52.930 --> 00:05:54.300
and also unlock the Char
143

144
00:05:54.300 --> 00:05:55.730
we can actually have a significant
144

145
00:05:55.730 --> 00:05:57.650
amount of characters if we like.
145

146
00:05:57.650 --> 00:05:59.320
Alright so let's try something different now
146

147
00:05:59.320 --> 00:06:00.420
let's type in a new string
147

148
00:06:00.420 --> 00:06:02.017
so I'm going to start on line 20
148

149
00:06:02.017 --> 00:06:07.017
and I go to type String numberString is equal to
149

150
00:06:07.160 --> 00:06:10.880
in double quotes I'm gonna type 250.55
150

151
00:06:10.880 --> 00:06:13.430
and closing double quotes and then a semicolon
151

152
00:06:13.430 --> 00:06:15.611
then I'm going to type numberString equals
152

153
00:06:15.611 --> 00:06:19.930
numberString plus in double quotes 49.95
153

154
00:06:21.204 --> 00:06:22.720
and the semicolon down the line.
154

155
00:06:22.720 --> 00:06:25.160
I'm gonna add the line to output it
155

156
00:06:25.160 --> 00:06:26.730
but before I run this
156

157
00:06:26.730 --> 00:06:28.990
what do you think the answer will be?
157

158
00:06:28.990 --> 00:06:30.470
Will the two numbers be added together
158

159
00:06:30.470 --> 00:06:34.270
the 250.55 and 49.95, so in other words
159

160
00:06:34.270 --> 00:06:36.257
if my math is correct that should be 300
160

161
00:06:36.257 --> 00:06:38.331
but we see 300 outputed.
161

162
00:06:38.331 --> 00:06:40.480
Let's actually try running that to see what we get
162

163
00:06:43.041 --> 00:06:44.030
and you can see that in fact here
163

164
00:06:44.030 --> 00:06:48.040
we haven't got the number 300, we've got the 250.55
164

165
00:06:48.040 --> 00:06:50.387
and after that we've got 49.95.
165

166
00:06:50.387 --> 00:06:53.400
So the 49.95 has been appended
166

167
00:06:53.400 --> 00:06:55.980
to the end of the 250.55.
167

168
00:06:55.980 --> 00:06:57.210
Now the reason for that
168

169
00:06:57.210 --> 00:06:59.330
is that we're not using a numeric type
169

170
00:06:59.330 --> 00:07:01.460
such as an Int or a Long etc
170

171
00:07:01.460 --> 00:07:02.900
or even a double for that matter
171

172
00:07:02.900 --> 00:07:06.130
we're using a text data type, String in this case
172

173
00:07:06.130 --> 00:07:09.100
and a string treats the text or digits
173

174
00:07:09.100 --> 00:07:10.700
that you type as text only.
174

175
00:07:10.700 --> 00:07:13.630
So there's no numerical calculations done and available
175

176
00:07:13.630 --> 00:07:15.860
so we'll need to convert that to another type
176

177
00:07:15.860 --> 00:07:17.820
or save it in another type in order to be able
177

178
00:07:17.820 --> 00:07:20.500
to perform mathematical calculations to it.
178

179
00:07:20.500 --> 00:07:21.760
So here clearly we can see that
179

180
00:07:21.760 --> 00:07:24.320
it hasn't done any calculations for us.
180

181
00:07:24.320 --> 00:07:27.150
So again, a String is dealing with textual data only
181

182
00:07:27.150 --> 00:07:29.290
and it doesn't treat even numeric numbers
182

183
00:07:29.290 --> 00:07:30.870
that we've keyed there as numbers
183

184
00:07:30.870 --> 00:07:34.460
they are also treated as the textual representations.
184

185
00:07:34.460 --> 00:07:35.650
Now later in the course I'll show you
185

186
00:07:35.650 --> 00:07:37.780
how you can convert what you think is a number
186

187
00:07:37.780 --> 00:07:40.180
from a String to a number, but for now
187

188
00:07:40.180 --> 00:07:42.320
anything you type into a String is a String
188

189
00:07:42.320 --> 00:07:43.900
and you can see it's treated differently
189

190
00:07:43.900 --> 00:07:47.170
to a numeric data type, that we saw previously.
190

191
00:07:47.170 --> 00:07:48.690
Alright so another thing I want to show you
191

192
00:07:48.690 --> 00:07:51.707
that might surprise you, we're gonna type String
192

193
00:07:51.707 --> 00:07:55.770
lastString is equal to, 10 in double quotes.
193

194
00:07:55.770 --> 00:07:57.850
On the next line I'm going to type an Int
194

195
00:07:57.850 --> 00:08:00.610
or create an Int variable, int myInt
195

196
00:08:00.610 --> 00:08:02.750
assign that to the value of 50
196

197
00:08:02.750 --> 00:08:04.955
then on this line, this could be the confusing line
197

198
00:08:04.955 --> 00:08:08.813
lastString equals lastString plus myInt.
198

199
00:08:10.230 --> 00:08:11.920
We're gonna output that with by typing
199

200
00:08:11.920 --> 00:08:16.920
in double quotes lastString is equal to plus lastString.
200

201
00:08:19.810 --> 00:08:22.240
But firstly notice that on line 25
201

202
00:08:22.240 --> 00:08:25.800
we're actually adding a numeric data type of Int
202

203
00:08:25.800 --> 00:08:28.610
to a String and yet we haven't been flagged as any errors
203

204
00:08:28.610 --> 00:08:31.100
so as far as IntelliJ is concerned
204

205
00:08:31.100 --> 00:08:32.610
there isn't an error with doing that
205

206
00:08:32.610 --> 00:08:33.443
so what do you think is gonna happen
206

207
00:08:33.443 --> 00:08:35.870
when the line 26 is executed
207

208
00:08:35.870 --> 00:08:37.460
what output are we going to see?
208

209
00:08:37.460 --> 00:08:39.110
Let's run it and see what we get.
209

210
00:08:42.840 --> 00:08:46.150
You can see there that lastString is equal to 1050.
210

211
00:08:46.150 --> 00:08:48.450
So even though we've used an integer data type
211

212
00:08:48.450 --> 00:08:50.370
as the second part, well in other words
212

213
00:08:50.370 --> 00:08:53.030
we've appended the integer to the string
213

214
00:08:53.030 --> 00:08:54.350
the entire thing, lastString
214

215
00:08:54.350 --> 00:08:57.120
is still configured and set up as a String.
215

216
00:08:57.120 --> 00:08:59.390
The reason for that is, Java is smart enough here
216

217
00:08:59.390 --> 00:09:03.000
to say okay I note that the integer you've defined
217

218
00:09:03.000 --> 00:09:05.950
myInt, on line 24, is an integer
218

219
00:09:05.950 --> 00:09:08.527
but I also know that you're trying to add it to a String
219

220
00:09:08.527 --> 00:09:12.560
and of course lastString was defined on line 23 as a String.
220

221
00:09:12.560 --> 00:09:15.130
So what Java does then is it actually converts
221

222
00:09:15.130 --> 00:09:17.140
or effectively looks at the contents
222

223
00:09:17.140 --> 00:09:18.920
of myInt, the value of it
223

224
00:09:18.920 --> 00:09:21.440
and converts the value, 50 in this case
224

225
00:09:21.440 --> 00:09:24.040
to a String then appends that to the 10
225

226
00:09:24.040 --> 00:09:26.000
and that's why we're seeing 1050
226

227
00:09:26.000 --> 00:09:28.293
as the value of our lastString.
227

228
00:09:29.200 --> 00:09:30.730
So it isn't a number in the true sense
228

229
00:09:30.730 --> 00:09:33.410
it's treated purely as text by the computer here
229

230
00:09:33.410 --> 00:09:35.560
because it knows it's adding that to lastString.
230

231
00:09:35.560 --> 00:09:38.480
So myInt itself is still an integer variable
231

232
00:09:38.480 --> 00:09:40.800
but it's for your dish in the appending of the value
232

233
00:09:40.800 --> 00:09:43.370
to the lastString, that's treated as a String.
233

234
00:09:43.370 --> 00:09:45.070
And we can continue on in that example
234

235
00:09:45.070 --> 00:09:49.770
and do something like Double doubleNumber equals 120.47d
235

236
00:09:52.850 --> 00:09:56.592
and we can do lastString is equal to
236

237
00:09:56.592 --> 00:10:01.592
lastString plus doubleNumber, then let's print it out.
237

238
00:10:01.790 --> 00:10:02.820
We'll just take the value here
238

239
00:10:02.820 --> 00:10:04.740
we'll just take a copy of that line again
239

240
00:10:04.740 --> 00:10:07.693
paste it, save a bit of time, let's run it again.
240

241
00:10:11.050 --> 00:10:13.290
You can see here lastString is now equal to 1050
241

242
00:10:13.290 --> 00:10:16.720
but also the 120.47 which was the decimal version
242

243
00:10:16.720 --> 00:10:19.160
from our Double data type, has been appended as well.
243

244
00:10:19.160 --> 00:10:21.000
So it's done exactly the same as the integer
244

245
00:10:21.000 --> 00:10:23.930
is treated the value as text and appended that
245

246
00:10:23.930 --> 00:10:26.860
as text to our string variable.
246

247
00:10:26.860 --> 00:10:28.620
So now what I'm doing here is only a very
247

248
00:10:28.620 --> 00:10:30.580
elementary way of dealing with Strings
248

249
00:10:30.580 --> 00:10:31.840
and adding to Strings.
249

250
00:10:31.840 --> 00:10:33.830
In later lessons, we're gonna go through this
250

251
00:10:33.830 --> 00:10:36.033
and look at some of the more advanced features of a string
251

252
00:10:36.033 --> 00:10:38.280
because we can do all sorts of things with it.
252

253
00:10:38.280 --> 00:10:39.320
It's quite a useful thing
253

254
00:10:39.320 --> 00:10:40.940
we can delete characters out of a string
254

255
00:10:40.940 --> 00:10:42.870
we can append characters which we've seen
255

256
00:10:42.870 --> 00:10:45.290
we can insert characters at specific positions
256

257
00:10:45.290 --> 00:10:47.560
there's lots of flexibility with strings
257

258
00:10:47.560 --> 00:10:49.390
but we need to know a bit more about Classes
258

259
00:10:49.390 --> 00:10:52.130
before we can get into too much detail.
259

260
00:10:52.130 --> 00:10:55.020
So Strings in Java are immutable.
260

261
00:10:55.020 --> 00:10:55.853
So what I just said
261

262
00:10:55.853 --> 00:10:58.110
that you can delete characters out of a string
262

263
00:10:58.110 --> 00:10:59.700
that's not strictly true
263

264
00:10:59.700 --> 00:11:02.450
because strings in Java are immutable
264

265
00:11:02.450 --> 00:11:03.283
and what that means is that
265

266
00:11:03.283 --> 00:11:06.010
you can't change a String after its created.
266

267
00:11:06.010 --> 00:11:07.410
Instead what happens is that
267

268
00:11:07.410 --> 00:11:10.373
a new String gets created for us by Java.
268

269
00:11:11.360 --> 00:11:13.640
So in the case of this code lastString
269

270
00:11:13.640 --> 00:11:15.663
doesn't get appended the value of 120.47
270

271
00:11:16.991 --> 00:11:19.950
and still a new String is created automatically by Java
271

272
00:11:19.950 --> 00:11:22.720
which consists of the previous value of lastString
272

273
00:11:22.720 --> 00:11:27.720
plus a textual representation of the double value 120.47.
273

274
00:11:28.170 --> 00:11:30.270
So the net result is the same
274

275
00:11:30.270 --> 00:11:31.700
lastString has the right values
275

276
00:11:31.700 --> 00:11:33.950
however a new String got created
276

277
00:11:33.950 --> 00:11:35.680
and the old one got discarded from memory
277

278
00:11:35.680 --> 00:11:37.200
automatically by Java.
278

279
00:11:37.200 --> 00:11:38.600
Now don't worry if that makes no sense
279

280
00:11:38.600 --> 00:11:40.030
it will later in the course.
280

281
00:11:40.030 --> 00:11:41.270
For now I just wanted to point out
281

282
00:11:41.270 --> 00:11:43.010
that Strings are immutable
282

283
00:11:43.010 --> 00:11:45.700
and that they will make more sense as you progress.
283

284
00:11:45.700 --> 00:11:47.860
And just to note that the code that I wrote there
284

285
00:11:47.860 --> 00:11:50.140
was quite inefficient, so as a result
285

286
00:11:50.140 --> 00:11:52.660
of a string being created for every operation
286

287
00:11:52.660 --> 00:11:54.960
appending values like this is inefficient
287

288
00:11:54.960 --> 00:11:56.700
and generally not recommended.
288

289
00:11:56.700 --> 00:11:57.730
I'm gonna show you a better way
289

290
00:11:57.730 --> 00:11:59.430
of doing this in a future video
290

291
00:11:59.430 --> 00:12:01.730
where we'll discuss something called a StringBuffer
291

292
00:12:01.730 --> 00:12:04.530
which unlike the String, can be changed.
292

293
00:12:04.530 --> 00:12:06.230
But you do need an understanding of classes
293

294
00:12:06.230 --> 00:12:07.420
before we tackle StringBuffers
294

295
00:12:07.420 --> 00:12:09.630
so we're gonna leave that until later in the course
295

296
00:12:09.630 --> 00:12:11.450
but I've also shown you this method today
296

297
00:12:11.450 --> 00:12:12.760
because you will come across code
297

298
00:12:12.760 --> 00:12:14.970
written in this style I've used in this lecture
298

299
00:12:14.970 --> 00:12:17.950
using operators like plus to append values to it
299

300
00:12:17.950 --> 00:12:19.320
so it's useful for you to know
300

301
00:12:19.320 --> 00:12:21.230
how to do things this way or even know
301

302
00:12:21.230 --> 00:12:24.150
that that's a way that you wouldn't generally do it.
302

303
00:12:24.150 --> 00:12:25.510
Alright so from your point of view
303

304
00:12:25.510 --> 00:12:26.520
you can treat the string
304

305
00:12:26.520 --> 00:12:28.800
as sort of like a 9th primitive type
305

306
00:12:28.800 --> 00:12:31.640
however to be completely clear it's not a primitive type
306

307
00:12:31.640 --> 00:12:34.490
it's a class, but the Java language has set the String
307

308
00:12:34.490 --> 00:12:36.700
to be used in an easy-to-use way
308

309
00:12:36.700 --> 00:12:38.280
compared to classes traditionally
309

310
00:12:38.280 --> 00:12:39.560
which we haven't covered yet
310

311
00:12:39.560 --> 00:12:41.230
and you will be using a lot of Strings
311

312
00:12:41.230 --> 00:12:42.750
as we progress through the course
312

313
00:12:42.750 --> 00:12:45.840
and in general when you're working life as a Java programmer
313

314
00:12:45.840 --> 00:12:47.620
Alright so time to discuss a few more things
314

315
00:12:47.620 --> 00:12:48.840
before we end this section.
315

316
00:12:48.840 --> 00:12:51.300
So we've got operators and operator precedence
316

317
00:12:51.300 --> 00:12:53.280
to cover in the next few videos.
317

318
00:12:53.280 --> 00:12:55.823
So let's get started on that in the next video.
