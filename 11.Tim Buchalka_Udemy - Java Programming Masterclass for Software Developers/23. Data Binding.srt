1
1

00:00:04,870  -->  00:00:10,450
so our application  working fine but
let's just say that it takes 10 seconds
2

2

00:00:10,450  -->  00:00:14,880
to fit a large group of records from a slow
database and of course currently we've
3

3

00:00:14,880  -->  00:00:19,750
got a delay in our method on line 20
where the delays just one second or a 1000
4

4

00:00:19,750  -->  00:00:23,320
milliseconds now perhaps we are fetching
these records over the internet which
5

5

00:00:23,320  -->  00:00:28,300
takes time because we're using a
background thread to get the records the
6

6

00:00:28,300  -->  00:00:32,530
user interface remains responsive to the
user but it may look like nothing's
7

7

00:00:32,530  -->  00:00:33,550
happening
8

8

00:00:33,550  -->  00:00:37,480
so the user may well wonder you know if
the application is working correctly or
9

9

00:00:37,480  -->  00:00:38,100
not
10

10

00:00:38,100  -->  00:00:42,510
so what we could do is report the
progress of the background task to the
11

11

00:00:42,510  -->  00:00:47,070
user and tasks that we've been using
make it easy for us to do just that
12

12

00:00:47,070  -->  00:00:52,480
so the first step is to add a progress
bar control to the user interface let's
13

13

00:00:52,480  -->  00:00:57,460
open the sample.fxml file and
just below the list view lets add our
14

14

00:00:57,460  -->  00:01:04,260
progress bar so select progress bar and
we can do.....
15

15

00:01:04,260  -->  00:01:10,780
we'll call it progress bar so that we
can refer to that in code and we'll put
16

16

00:01:10,780  -->  00:01:17,440
this on.....and put
it in column.....
17

17

00:01:17,440  -->  00:01:24,040
.....so if we run this as is without
making any other changes
18

18

00:01:25,900  -->  00:01:30,950
you can see that we have got a progress
bar and it's adding like an
19

19

00:01:30,950  -->  00:01:35,290
indeterminate one so this is the default
state of the progress bar and it's
20

20

00:01:35,290  -->  00:01:39,560
indeterminate because nothing is
reporting progress to it so to get that
21

21

00:01:39,560  -->  00:01:43,960
working what we need to do is close this
down and declare the progress bar in the
22

22

00:01:43,960  -->  00:01:49,880
controller we go back to that and will
declare it to below the task up here
23

23

00:01:49,880  -->  00:01:54,790
actually we will do it below the listview to be
consistent so it's going to be....
24

24

00:01:54,790  -->  00:02:08,470
....
25

25

00:02:08,470  -->  00:02:15,530
....and then what we
want to do then is put the change in our
26

26

00:02:15,530  -->  00:02:20,420
method that we've defined for the task
in the core method so what we're going
27

27

00:02:20,420  -->  00:02:24,440
to do is we're going to declare this
observable list a little bit differently
28

28

00:02:24,440  -->  00:02:28,910
so what we're going to do is start off
and below well actually what we're going to
29

29

00:02:28,910  -->  00:02:35,720
do is remove thread.sleep first and will
change it so that we got.....
30

30

00:02:35,720  -->  00:02:43,790
....and then we're going to just grab the names
31

31

00:02:43,790  -->  00:02:50,030
here from the final list employee that we
added previously i'm just going to paste
32

32

00:02:50,030  -->  00:02:58,190
those in between the block they're
just fix it up a little bit alright so
33

33

00:02:58,190  -->  00:03:01,910
their names and then what we want to do
is we still need our observable list
34

34

00:03:01,910  -->  00:03:08,870
that no longer needs to be final so i'm
going to change that and i'm just going
35

35

00:03:08,870  -->  00:03:12,500
to make it an observable arraylist
without any parameters at the moment
36

36

00:03:12,500  -->  00:03:19,400
delete that now we're going to create a
little loop here so that we can add each
37

37

00:03:19,400  -->  00:03:24,310
name and we can simulate a delay
between each so we are going to put in the
38

38

00:03:24,310  -->  00:03:32,840
loop here that says....6 being the number
39

39

00:03:32,840  -->  00:03:35,130
of Records
40

40

00:03:35,130  -->  00:03:43,590
....so we're adding
the name from the string array into the
41

41

00:03:43,590  -->  00:03:50,160
observable list then we also want to do....
42

42

00:03:50,700  -->  00:04:00,360
......
43

43

00:04:00,360  -->  00:04:04,320
leave in the return that returns a list
of employees alright so let's talk about
44

44

00:04:04,320  -->  00:04:08,880
to what we've done so we're calling the
update progress method after adding
45

45

00:04:08,880  -->  00:04:14,100
each name that method takes two
parameters the current progress and the
46

46

00:04:14,100  -->  00:04:19,260
maximum progress so we're adding six
names so we've set the maximum progress
47

47

00:04:19,260  -->  00:04:26,010
as the second parameter on line 37 to 6 now
sometimes the mas can change as the
48

48

00:04:26,010  -->  00:04:30,810
task progresses which is why we pass it every
time we update the progress for the
49

49

00:04:30,810  -->  00:04:35,310
current progress the first parameter we
passed a number of names we've added and
50

50

00:04:35,310  -->  00:04:39,360
then we have to add one because we are counting
from zero but now that we've done that
51

51

00:04:39,360  -->  00:04:44,670
there is one more step we need to add to
do we are updating the progress but we
52

52

00:04:44,670  -->  00:04:48,930
haven't tied the progress to the
progress bar yet once again we're going to
53

53

00:04:48,930  -->  00:04:54,240
use data binding to link the progress
bar to the tasks progress and we do that
54

54

00:04:54,240  -->  00:04:58,800
by binding the progress bars progress
property to the tasks progress property
55

55

00:04:58,800  -->  00:05:06,840
so to do that we add this below the data
binding we set up for list view....
56

56

00:05:06,840  -->  00:05:12,330
....
57

57

00:05:12,330  -->  00:05:19,860
....that's binding them together
58

58

00:05:19,860  -->  00:05:23,100
then and we're leaving the listview in there
as well as it was before
59

59

00:05:23,730  -->  00:05:26,730
let's just run this and see what it does
60

60

00:05:29,580  -->  00:05:32,250
alright we still got an indeterminate
progress bar there until we actually
61

61

00:05:32,250  -->  00:05:37,860
click on the buttons want to click on
get employee names now and you can see
62

62

00:05:37,860  -->  00:05:41,040
that work then you can see that that
slowly incremented with that small delay
63

63

00:05:41,040  -->  00:05:46,500
each time a record was or each time an entry was added and then at the end they
64

64

00:05:46,500  -->  00:05:48,770
all appeared on the screen so if I close this down
65

65

00:05:48,770  -->  00:05:54,740
and run it again we can see that in
operation again the moment indeterminate
66

66

00:05:54,740  -->  00:06:00,050
the progress bar click on get employee
names and you can see that sort of go
67

67

00:06:00,050  -->  00:06:03,200
through like it was doing something and
then eventually we got the full list
68

68

00:06:03,200  -->  00:06:07,940
displayed at the end now in a real-world
application would only display the
69

69

00:06:07,940  -->  00:06:11,870
progress bar when we start a background task
we wouldn't show the progress bar all
70

70

00:06:11,870  -->  00:06:15,800
the time and so it wouldn't be
constantly animating as it did until it
71

71

00:06:15,800  -->  00:06:20,360
receives progress from the task will see
how to do that in a minute and we can
72

72

00:06:20,360  -->  00:06:23,870
also display messages from the tasks so
lets actually add a label underneath the
73

73

00:06:23,870  -->  00:06:30,950
progress bar so we go back to our fxml and below the progress bar add a
74

74

00:06:30,950  -->  00:06:42,260
label.....
75

75

00:06:42,260  -->  00:06:46,280
....
76

76

00:06:46,280  -->  00:06:50,420
...then we'll go back to our
77

77

00:06:50,420  -->  00:06:55,130
controller and we obviously need to
declare it in there as well so...
78

78

00:06:55,130  -->  00:07:03,410
....and make sure when we import
79

79

00:07:03,410  -->  00:07:07,130
that that was selecting the right one
this case it's the javafx.seen.
80

80

00:07:07,130  -->  00:07:09,440
control the correct one
81

81

00:07:09,440  -->  00:07:14,610
we just need to annotate it .fxml okay so that's good to go
82

82

00:07:15,860  -->  00:07:20,210
now we will update the task so that it
updates the message property each time
83

83

00:07:20,210  -->  00:07:26,420
it adds an employee name to the list so
to do that we're gonna go down just
84

84

00:07:26,420  -->  00:07:30,590
before the update progress and after the
employees.add we're we are naming the
85

85

00:07:30,590  -->  00:07:36,680
or adding i should say the employee name
in there i'm going to do....
86

86

00:07:36,680  -->  00:07:51,140
...
87

87

00:07:53,340  -->  00:08:00,180
....now we call
set text to set of labels text when we
88

88

00:08:00,180  -->  00:08:05,040
do so we're actually setting the labels
text property so knowing that can you
89

89

00:08:05,040  -->  00:08:08,760
guess how the label is going to display
the message from the task so if you
90

90

00:08:08,760  -->  00:08:13,410
guessed by binding its text property to
the tasks message property you're
91

91

00:08:13,410  -->  00:08:14,490
actually spot on
92

92

00:08:14,490  -->  00:08:19,380
so let's go ahead and do that and we'll
do this again doesn't really matter
93

93

00:08:19,380  -->  00:08:23,250
particularly where we put but we will put it just
below the progress bar so...
94

94

00:08:23,250  -->  00:08:34,440
....
95

95

00:08:34,440  -->  00:08:38,030
...that binds the two together so the messages
96

96

00:08:38,030  -->  00:08:42,630
or message rather will be displayed on the
screen so when we run this now we should
97

97

00:08:42,630  -->  00:08:46,080
see the label update each time a task adds
a name to the list
98

98

00:08:46,080  -->  00:08:56,370
so let's just run it and check that does
work you can see down the bottom that
99

99

00:08:56,370  -->  00:08:59,880
was working quite nicely and the labels
showing the last name that was added in
100

100

00:08:59,880  -->  00:09:05,330
this case Bob McDonald so javafx is
designed to use properties in this way
101

101

00:09:05,330  -->  00:09:10,620
so when you want to update the UI
control whenever the value of something
102

102

00:09:10,620  -->  00:09:15,080
else has changed or set do check the
documentation to see if what you want to
103

103

00:09:15,080  -->  00:09:18,720
update and the source value can be
bound together because it's a great way
104

104

00:09:18,720  -->  00:09:22,740
of doing it and you are leaving the javafx framework to do the heavy
105

105

00:09:22,740  -->  00:09:28,800
lifting so before we leave this topic let's
take a look at the service class which
106

106

00:09:28,800  -->  00:09:33,450
we can use to execute a task on a
background thread so it's there to help
107

107

00:09:33,450  -->  00:09:39,270
developers use background threads
correctly in a UI application now we can
108

108

00:09:39,270  -->  00:09:44,430
start and cancel the service and unlike
a thread we can also restart the service
109

109

00:09:44,430  -->  00:09:47,970
so let's change our example to use the
service
110

110

00:09:47,970  -->  00:09:53,640
the first thing we need to do is add a
subclass of the service class to the
111

111

00:09:53,640  -->  00:09:57,950
controller so we have to implement a
method called create task in our sub
112

112

00:09:57,950  -->  00:10:03,320
class instead of creating our task
instance in the initialize method we're
113

113

00:10:03,320  -->  00:10:06,300
going to create it in the services
create task
114

114

00:10:06,300  -->  00:10:11,730
method instead so let's end the video
here now and will start work on
115

115

00:10:11,730  -->  00:10:15,480
this on that employee service
class in the next video
