1
1

00:00:04,970  -->  00:00:06,740
so I mentioned towards the end of the
2

2

00:00:06,740  -->  00:00:08,890
last video that the way we're building our
3

3

00:00:08,890  -->  00:00:10,700
query strings makes a database
4

4

00:00:10,700  -->  00:00:14,030
vulnerable to hacking attempts but
5

5

00:00:14,030  -->  00:00:16,370
rather than explaining why further going
6

6

00:00:16,370  -->  00:00:17,900
to actually demonstrate it
7

7

00:00:17,900  -->  00:00:19,300
so what we're going to do is that the
8

8

00:00:19,300  -->  00:00:21,380
user enter a song title in the console
9

9

00:00:21,380  -->  00:00:23,350
and then we're going to call the query
10

10

00:00:23,350  -->  00:00:25,640
song infoview method to get the
11

11

00:00:25,640  -->  00:00:28,460
information for the title now in the
12

12

00:00:28,460  -->  00:00:30,940
main method which we are in at the moment
13

13

00:00:30,940  -->  00:00:32,770
we're going to prompt the user for the
14

14

00:00:32,770  -->  00:00:35,320
title then we'll use that title rather
15

15

00:00:35,320  -->  00:00:38,060
than a hard-coded one so what I'm going to do
16

16

00:00:38,060  -->  00:00:39,650
is just change that a little bit here
17

17

00:00:39,650  -->  00:00:43,700
just up here we're going to do...
18

18

00:00:43,700  -->  00:01:24,170
....
19

19

00:01:24,170  -->  00:01:31,820
....let just run that
20

20

00:01:31,820  -->  00:01:35,330
title just go over to here
21

21

00:01:35,330  -->  00:01:39,320
ok that's going to be.....
22

22

00:01:39,320  -->  00:01:41,840
....as you can see there and we are
23

23

00:01:41,840  -->  00:01:43,520
getting results back we're getting the
24

24

00:01:43,520  -->  00:01:45,620
results of the Fleetwood Mac 4 albums
25

25

00:01:45,620  -->  00:01:47,180
that particular songs on
26

26

00:01:47,180  -->  00:01:48,860
alright so now we're going to do
27

27

00:01:48,860  -->  00:01:49,970
something a little bit different going
28

28

00:01:49,970  -->  00:01:52,670
to just demonstrate how you can actually
29

29

00:01:52,670  -->  00:01:55,250
get into trouble for the song title this
30

30

00:01:55,250  -->  00:02:00,200
time going to type in....
31

31

00:02:00,200  -->  00:02:07,250
...
32

32

00:02:07,250  -->  00:02:13,340
....lets press enter and you
33

33

00:02:13,340  -->  00:02:16,370
can see what happened it suddenly we've
34

34

00:02:16,370  -->  00:02:16,910
got
35

35

00:02:16,910  -->  00:02:19,340
every row of the artist_list
36

36

00:02:19,340  -->  00:02:21,890
view being returned to us go right up to
37

37

00:02:21,890  -->  00:02:26,390
the top again
38

38

00:02:26,390  -->  00:02:27,530
and you can see what happened with the
39

39

00:02:27,530  -->  00:02:30,350
sql code there where title was
40

40

00:02:30,350  -->  00:02:33,800
go your own way or 1 equals 1 or double-quote
41

41

00:02:33,800  -->  00:02:36,230
double-quote so what we've done with
42

42

00:02:36,230  -->  00:02:38,120
just performed what's known as a sql
43

43

00:02:38,120  -->  00:02:40,450
injection attack now in this particular
44

44

00:02:40,450  -->  00:02:42,920
case perhaps it doesn't matter if a user
45

45

00:02:42,920  -->  00:02:45,020
gets to see all the songs in a view but
46

46

00:02:45,020  -->  00:02:46,970
what happens if this was a view or table
47

47

00:02:46,970  -->  00:02:49,670
of user IDs and passwords for example or
48

48

00:02:49,670  -->  00:02:51,470
worse still it contained a credit card
49

49

00:02:51,470  -->  00:02:54,080
details or other sensitive financial or
50

50

00:02:54,080  -->  00:02:56,000
even medical information so that
51

51

00:02:56,000  -->  00:02:57,200
wouldn't be a good thing
52

52

00:02:57,200  -->  00:03:00,170
so how did this actually happen well the
53

53

00:03:00,170  -->  00:03:01,730
thing was when we built the sql
54

54

00:03:01,730  -->  00:03:04,220
statement we are blindly concatenating
55

55

00:03:04,220  -->  00:03:07,130
whatever the users typed so when we
56

56

00:03:07,130  -->  00:03:09,680
entered the above string the code built
57

57

00:03:09,680  -->  00:03:10,970
the following sql statement which I
58

58

00:03:10,970  -->  00:03:14,030
just mentioned here so select name album
59

59

00:03:14,030  -->  00:03:16,580
track from artists_list where
60

60

00:03:16,580  -->  00:03:18,380
title equals go your own way in double
61

61

00:03:18,380  -->  00:03:22,430
quotes or 1 equals 1 or 2 double
62

62

00:03:22,430  -->  00:03:25,340
quotes now since 1 equals 1 will be true
63

63

00:03:25,340  -->  00:03:27,860
for every record all the records in the
64

64

00:03:27,860  -->  00:03:30,200
artist underscore list view are returned
65

65

00:03:30,200  -->  00:03:32,230
so this is called a sql injection
66

66

00:03:32,230  -->  00:03:34,910
attacked because the user has injected
67

67

00:03:34,910  -->  00:03:37,820
sql into the statement that we didn't
68

68

00:03:37,820  -->  00:03:40,940
intend to run now the user scenario
69

69

00:03:40,940  -->  00:03:43,190
would usually be a hacker and they try
70

70

00:03:43,190  -->  00:03:44,870
this because they know something about
71

71

00:03:44,870  -->  00:03:46,910
how applications that use databases are
72

72

00:03:46,910  -->  00:03:49,970
coded they guess that we could be
73

73

00:03:49,970  -->  00:03:52,070
concatenated the name into a where
74

74

00:03:52,070  -->  00:03:54,590
clause as we're doing here and since
75

75

00:03:54,590  -->  00:03:56,510
it's a string they guess that when
76

76

00:03:56,510  -->  00:03:59,180
concatenating a closing quote which is why
77

77

00:03:59,180  -->  00:04:00,890
they end their input string with a quote
78

78

00:04:00,890  -->  00:04:03,620
now a malicious user can even do
79

79

00:04:03,620  -->  00:04:06,440
something like drop tables since we're
80

80

00:04:06,440  -->  00:04:08,720
using jdbc we do have some protection
81

81

00:04:08,720  -->  00:04:11,090
against that at least when using the
82

82

00:04:11,090  -->  00:04:14,230
sqlite jdbc driver the execute
83

83

00:04:14,230  -->  00:04:16,850
and execute query methods won't run more
84

84

00:04:16,850  -->  00:04:19,010
than a single sql statement so in
85

85

00:04:19,010  -->  00:04:20,390
other words a user can't tack on
86

86

00:04:20,390  -->  00:04:22,700
something like semicolon drop table
87

87

00:04:22,700  -->  00:04:25,250
songs but if an application written in
88

88

00:04:25,250  -->  00:04:27,280
the language like perhaps PHP was
89

89

00:04:27,280  -->  00:04:29,410
running sql directly based on user
90

90

00:04:29,410  -->  00:04:31,220
input rather than going through an API
91

91

00:04:31,220  -->  00:04:33,680
that malicious user would be able to
92

92

00:04:33,680  -->  00:04:35,780
execute whatever sql statements they
93

93

00:04:35,780  -->  00:04:38,750
wanted so instead of building up query
94

94

00:04:38,750  -->  00:04:39,920
strings and using this
95

95

00:04:39,920  -->  00:04:42,200
statement class to execute them you should
96

96

00:04:42,200  -->  00:04:44,060
really be using the prepared statement
97

97

00:04:44,060  -->  00:04:46,430
class now prepared statements can
98

98

00:04:46,430  -->  00:04:48,410
protect against sql injection attacks
99

99

00:04:48,410  -->  00:04:50,960
because when we use them we don't concatenate
100

100

00:04:50,960  -->  00:04:52,850
user input into the sql
101

101

00:04:52,850  -->  00:04:54,710
statement that will ultimately be
102

102

00:04:54,710  -->  00:04:58,370
running so let's look at an example now
103

103

00:04:58,370  -->  00:04:59,930
as I've noted the only thing that
104

104

00:04:59,930  -->  00:05:02,390
changes between queries is the song
105

105

00:05:02,390  -->  00:05:04,490
title now I mentioned in a previous
106

106

00:05:04,490  -->  00:05:06,800
video that it would be nice if we could
107

107

00:05:06,800  -->  00:05:09,440
have placeholders in sql statements
108

108

00:05:09,440  -->  00:05:11,480
for the values that change from query
109

109

00:05:11,480  -->  00:05:14,300
to query and prepared statements allow us
110

110

00:05:14,300  -->  00:05:15,380
to do just that
111

111

00:05:15,380  -->  00:05:19,910
let's go back to our data source class and
112

112

00:05:19,910  -->  00:05:22,040
we're going to add a constant at the top
113

113

00:05:22,040  -->  00:05:27,770
of the class start down here on line 88
114

114

00:05:27,770  -->  00:05:33,050
that's going to be...
115

115

00:05:33,050  -->  00:06:29,060
...
116

116

00:06:29,060  -->  00:06:32,090
...so the only difference here
117

117

00:06:32,090  -->  00:06:34,070
between this constant and the one we
118

118

00:06:34,070  -->  00:06:35,810
used before is that we're using a
119

119

00:06:35,810  -->  00:06:38,600
question mark for the song title so this
120

120

00:06:38,600  -->  00:06:41,270
is the placeholder character that we use
121

121

00:06:41,270  -->  00:06:43,490
in prepared statements when we're ready
122

122

00:06:43,490  -->  00:06:45,920
to perform the query will replace the
123

123

00:06:45,920  -->  00:06:48,350
placeholder with the actual title we
124

124

00:06:48,350  -->  00:06:51,260
want to query the sql statement
125

125

00:06:51,260  -->  00:06:52,740
we are building is...
126

126

00:06:52,740  -->  00:07:04,410
...
127

127

00:07:04,410  -->  00:07:07,560
....so note more
128

128

00:07:07,560  -->  00:07:09,930
importantly we don't put quotation marks
129

129

00:07:09,930  -->  00:07:12,560
around the song title tal when replacing a
130

130

00:07:12,560  -->  00:07:15,440
placeholder in a prepared statement the
131

131

00:07:15,440  -->  00:07:17,060
database actually understands that a
132

132

00:07:17,060  -->  00:07:19,530
string like going your own way is one
133

133

00:07:19,530  -->  00:07:22,080
value so we only substitute a single
134

134

00:07:22,080  -->  00:07:25,160
value for each placeholder and what we
135

135

00:07:25,160  -->  00:07:27,000
also need to do is to declare an instance
136

136

00:07:27,000  -->  00:07:29,900
variable for the prepared statement and
137

137

00:07:29,900  -->  00:07:31,400
that's because we only want to create it
138

138

00:07:31,400  -->  00:07:33,500
once we don't want to create it
139

139

00:07:33,500  -->  00:07:35,940
everytime query because we only want to
140

140

00:07:35,940  -->  00:07:38,940
be precompiled once now if we were to
141

141

00:07:38,940  -->  00:07:40,830
create a new instance every time we did
142

142

00:07:40,830  -->  00:07:43,250
a query we lose the performance benefit
143

143

00:07:43,250  -->  00:07:46,280
that the prepared statement has so let's
144

144

00:07:46,280  -->  00:07:48,150
add a prepared statement instance
145

145

00:07:48,150  -->  00:07:51,650
variables .....
146

146

00:07:51,650  -->  00:07:58,800
....now
147

147

00:07:58,800  -->  00:08:00,210
we're going to look at putting that in
148

148

00:08:00,210  -->  00:08:02,660
our open now we could check for null in
149

149

00:08:02,660  -->  00:08:04,250
the query song info view method
150

150

00:08:04,250  -->  00:08:06,530
and create the instance there but
151

151

00:08:06,530  -->  00:08:08,250
instead that I'm going to do is create
152

152

00:08:08,250  -->  00:08:10,080
the instance in the open method because
153

153

00:08:10,080  -->  00:08:11,580
i think that's a better place to do it
154

154

00:08:11,580  -->  00:08:17,190
so we're going to do...
155

155

00:08:17,190  -->  00:08:28,650
...
156

156

00:08:28,650  -->  00:08:33,780
...so that
157

157

00:08:33,780  -->  00:08:35,330
we call the connection . prepared
158

158

00:08:35,330  -->  00:08:37,440
statement method to create the instance
159

159

00:08:37,440  -->  00:08:39,530
of prepared statement passing it the
160

160

00:08:39,530  -->  00:08:42,470
sql we want to execute and that
161

161

00:08:42,470  -->  00:08:43,950
sql remember contains the
162

162

00:08:43,950  -->  00:08:47,550
placeholders this is the code up here on
163

163

00:08:47,550  -->  00:08:50,390
line 90 that will be replaced every
164

164

00:08:50,390  -->  00:08:51,950
time we use the statement to make a
165

165

00:08:51,950  -->  00:08:55,320
query so now that we've done that let's
166

166

00:08:55,320  -->  00:08:57,200
update the query method to use the
167

167

00:08:57,200  -->  00:09:00,060
prepared statement now note that the
168

168

00:09:00,060  -->  00:09:02,640
query was using a view of course
169

169

00:09:02,640  -->  00:09:04,380
everything about prepared statements
170

170

00:09:04,380  -->  00:09:05,910
also applies to tables
171

171

00:09:05,910  -->  00:09:09,770
as well so we find our query song . info method
172

172

00:09:09,770  -->  00:09:12,270
down to the bottom
173

173

00:09:12,270  -->  00:09:16,230
so this one here the query song info view
174

174

00:09:16,230  -->  00:09:18,180
alright so lets changes now instead of
175

175

00:09:18,180  -->  00:09:19,830
doing a try with resources will go back to
176

176

00:09:19,830  -->  00:09:24,630
regular try....
177

177

00:09:24,630  -->  00:09:27,900
....
178

178

00:09:27,900  -->  00:09:32,520
...and will fix that
179

179

00:09:32,520  -->  00:09:34,500
shortly that is complaining about
180

180

00:09:34,500  -->  00:09:36,240
the sql exception so we need to
181

181

00:09:36,240  -->  00:09:38,340
handle that shortly we're going to just
182

182

00:09:38,340  -->  00:09:41,490
copy this code down here which is all going to be
183

183

00:09:41,490  -->  00:09:46,500
essentially the same I'm
184

184

00:09:46,500  -->  00:09:56,880
going to cut all that and paste it.....
185

185

00:09:56,880  -->  00:09:58,950
...
186

186

00:09:58,950  -->  00:10:00,780
....
187

187

00:10:00,780  -->  00:10:11,520
ok and that should be...
188

188

00:10:11,520  -->  00:10:18,660
okay that's better what I can also do
189

189

00:10:18,660  -->  00:10:20,910
now is fix that we don't need to string
190

190

00:10:20,910  -->  00:10:22,920
builder anymore so i'm going to delete
191

191

00:10:22,920  -->  00:10:25,830
all that and we're going to change this
192

192

00:10:25,830  -->  00:10:30,990
to just be title....title being
193

193

00:10:30,990  -->  00:10:33,000
name of the song has passed this method and
194

194

00:10:33,000  -->  00:10:34,470
we're now using the prepared statement
195

195

00:10:34,470  -->  00:10:37,170
we are setting the title as the first
196

196

00:10:37,170  -->  00:10:40,680
parameter in the query for the prepared
197

197

00:10:40,680  -->  00:10:42,000
statement and then you can see that I've
198

198

00:10:42,000  -->  00:10:43,440
just removed a lot of the redundant code
199

199

00:10:43,440  -->  00:10:46,020
now and went back to the old try-catch
200

200

00:10:46,020  -->  00:10:50,190
so because total here on line 270
201

201

00:10:50,190  -->  00:10:53,250
is a parameter is a string using here
202

202

00:10:53,250  -->  00:10:56,010
on line 273 using the set string
203

203

00:10:56,010  -->  00:10:57,840
method so it's got other methods
204

204

00:10:57,840  -->  00:11:01,410
you can use....
205

205

00:11:01,410  -->  00:11:03,900
and different values depending on the
206

206

00:11:03,900  -->  00:11:06,480
type of variable using their....
207

207

00:11:06,480  -->  00:11:10,770
...and we also have to specify the
208

208

00:11:10,770  -->  00:11:12,930
position of the placeholder we want to
209

209

00:11:12,930  -->  00:11:14,730
replace and that's because they can be
210

210

00:11:14,730  -->  00:11:17,220
more than one and that's usually when
211

211

00:11:17,220  -->  00:11:19,140
working with jdbc the position is one
212

212

00:11:19,140  -->  00:11:23,460
based so again we see that set string 1
213

213

00:11:23,460  -->  00:11:25,500
title we are referring back after the sql
214

214

00:11:25,500  -->  00:11:25,950
code
215

215

00:11:25,950  -->  00:11:29,250
referring to the first occurrence of an
216

216

00:11:29,250  -->  00:11:32,970
equal in that code so if we have a
217

217

00:11:32,970  -->  00:11:34,680
bit of code something like this....
218

218

00:11:34,680  -->  00:11:38,820
obviously the first one will be set string
219

219

00:11:38,820  -->  00:11:40,650
will be one the second one will be 2
220

220

00:11:40,650  -->  00:11:43,110
the third-place will be three in
221

221

00:11:43,110  -->  00:11:44,580
our case we only just one of the
222

222

00:11:44,580  -->  00:11:47,580
string i'm using set string 1 to actually
223

223

00:11:47,580  -->  00:11:51,570
change or replace total with that ? or
224

224

00:11:51,570  -->  00:11:54,390
the contents of the ? replacement title
225

225

00:11:54,390  -->  00:11:59,220
ok other than that the method is
226

226

00:11:59,220  -->  00:12:01,440
actually the same so note that the
227

227

00:12:01,440  -->  00:12:03,030
prepared statement which were using here
228

228

00:12:03,030  -->  00:12:07,230
on line 273 is a subclass of statement so
229

229

00:12:07,230  -->  00:12:08,370
in other words it's got all the other
230

230

00:12:08,370  -->  00:12:10,140
methods that statement has such as
231

231

00:12:10,140  -->  00:12:11,970
execute that's why we're able to use
232

232

00:12:11,970  -->  00:12:15,900
this execute query on line 274 now
233

233

00:12:15,900  -->  00:12:17,820
we're no longer declaring the resources
234

234

00:12:17,820  -->  00:12:20,070
as part of the try statement because i
235

235

00:12:20,070  -->  00:12:22,230
changed it so consequently what we need
236

236

00:12:22,230  -->  00:12:24,480
to do now is put a finally clause in
237

237

00:12:24,480  -->  00:12:26,430
there to close them
238

238

00:12:26,430  -->  00:12:28,200
remember that I mention that if we
239

239

00:12:28,200  -->  00:12:31,050
closed a statement any associated result
240

240

00:12:31,050  -->  00:12:33,270
sets are also closed and i also
241

241

00:12:33,270  -->  00:12:34,800
mentioned that there can only be one
242

242

00:12:34,800  -->  00:12:37,290
active resultset associated with a
243

243

00:12:37,290  -->  00:12:40,140
statement now if we use a statement to
244

244

00:12:40,140  -->  00:12:42,300
do more than one query which is a very
245

245

00:12:42,300  -->  00:12:44,490
common with prepared statements each
246

246

00:12:44,490  -->  00:12:46,980
time we need to do a new query the existing
247

247

00:12:46,980  -->  00:12:49,080
result set is closed and a new one has
248

248

00:12:49,080  -->  00:12:51,630
created so the upshot of all this is
249

249

00:12:51,630  -->  00:12:52,890
that we don't have to worry about
250

250

00:12:52,890  -->  00:12:55,380
closing the result set when using the
251

251

00:12:55,380  -->  00:12:57,510
prepared statement when we close the
252

252

00:12:57,510  -->  00:12:58,680
prepared statement
253

253

00:12:58,680  -->  00:13:00,750
whichever results it is active will also
254

254

00:13:00,750  -->  00:13:03,090
be closed and we should also closed
255

255

00:13:03,090  -->  00:13:05,100
prepared statement in the close method
256

256

00:13:05,100  -->  00:13:07,350
as opposed to closing it in this
257

257

00:13:07,350  -->  00:13:09,600
particular method let's go back to our
258

258

00:13:09,600  -->  00:13:13,500
close method so here we're doing a
259

259

00:13:13,500  -->  00:13:15,210
test to see whether it's the
260

260

00:13:15,210  -->  00:13:17,250
connection can close successfully so we're
261

261

00:13:17,250  -->  00:13:20,100
going to put some code...
262

262

00:13:20,100  -->  00:13:29,620
....
263

263

00:13:29,620  -->  00:13:33,070
here the order is important we can't
264

264

00:13:33,070  -->  00:13:35,200
close the connection first because we
265

265

00:13:35,200  -->  00:13:36,700
need an open connection to close
266

266

00:13:36,700  -->  00:13:39,160
statements basically we always close
267

267

00:13:39,160  -->  00:13:41,800
resources in the reverse order to which
268

268

00:13:41,800  -->  00:13:44,080
they're opened now we don't have to
269

269

00:13:44,080  -->  00:13:46,000
change the main method since it doesn't
270

270

00:13:46,000  -->  00:13:47,470
know or care about what type of
271

271

00:13:47,470  -->  00:13:48,130
statement
272

272

00:13:48,130  -->  00:13:50,740
we're using to get the data let's try
273

273

00:13:50,740  -->  00:13:52,150
running this to confirm the it
274

274

00:13:52,150  -->  00:13:59,680
works okay so we'll try typing search
275

275

00:13:59,680  -->  00:14:04,210
again go your own way again we're got an error
276

276

00:14:04,210  -->  00:14:07,080
lets have a look what we done and I
277

277

00:14:07,080  -->  00:14:08,020
think I made a mistake in the data
278

278

00:14:08,020  -->  00:14:09,520
source lets go back and check that
279

279

00:14:09,520  -->  00:14:10,150
out
280

280

00:14:10,150  -->  00:14:12,220
this will be in the method that we just
281

281

00:14:12,220  -->  00:14:15,250
write down the bottom here....
282

282

00:14:15,250  -->  00:14:16,540
....
283

283

00:14:16,540  -->  00:14:20,230
....and look at that made a mistake
284

284

00:14:20,230  -->  00:14:21,910
they're actually got the query we are
285

285

00:14:21,910  -->  00:14:24,880
setting the query song info view .set
286

286

00:14:24,880  -->  00:14:28,180
string here on line 278 so therefore
287

287

00:14:28,180  -->  00:14:31,240
on line 279 we don't want to pass a query
288

288

00:14:31,240  -->  00:14:34,150
so that should actually be empty
289

289

00:14:34,150  -->  00:14:35,200
you've already got a prepared statement
290

290

00:14:35,200  -->  00:14:37,720
its pre-compiled it's already got the
291

291

00:14:37,720  -->  00:14:38,830
code in their and that should be empty
292

292

00:14:38,830  -->  00:14:40,060
because we've already specified the
293

293

00:14:40,060  -->  00:14:42,130
title that's probably all that was
294

294

00:14:42,130  -->  00:14:43,480
crashing let's go back and run that
295

295

00:14:43,480  -->  00:14:49,930
again
296

296

00:14:49,930  -->  00:14:52,270
ok right away this time we've got to
297

297

00:14:52,270  -->  00:14:55,450
work but importantly now let's go back
298

298

00:14:55,450  -->  00:14:57,370
and run it again and presume that this
299

299

00:14:57,370  -->  00:14:59,860
time we are a hacker will try enter that same
300

300

00:14:59,860  -->  00:15:02,620
code we did last time so that was a go
301

301

00:15:02,620  -->  00:15:06,270
you're own way and it was a double quote
302

302

00:15:06,270  -->  00:15:11,050
...
303

303

00:15:11,050  -->  00:15:13,480
....
304

304

00:15:13,480  -->  00:15:16,830
....press enter this time we get
305

305

00:15:16,830  -->  00:15:17,920
a different message couldn't find the
306

306

00:15:17,920  -->  00:15:20,830
artist for the song so we get the
307

307

00:15:20,830  -->  00:15:22,080
messages you can see they're saying that
308

308

00:15:22,080  -->  00:15:23,800
it couldn't find the song and no data
309

309

00:15:23,800  -->  00:15:24,850
was returned
310

310

00:15:24,850  -->  00:15:26,580
you might be wondering at this point
311

311

00:15:26,580  -->  00:15:28,830
well how did the prepared statement
312

312

00:15:28,830  -->  00:15:31,200
protect the database against the sql
313

313

00:15:31,200  -->  00:15:33,640
injection attack if the string is simply
314

314

00:15:33,640  -->  00:15:36,130
being substituted for the ? would we see
315

315

00:15:36,130  -->  00:15:39,010
the same results as before well we don't
316

316

00:15:39,010  -->  00:15:40,330
and that's because when we're using a
317

317

00:15:40,330  -->  00:15:42,520
prepared statement the values being
318

318

00:15:42,520  -->  00:15:44,950
substituted are treated as literal
319

319

00:15:44,950  -->  00:15:47,110
values in other words nothing within the
320

320

00:15:47,110  -->  00:15:49,750
value is treated as sql when we were
321

321

00:15:49,750  -->  00:15:51,190
using a string builder to be build the
322

322

00:15:51,190  -->  00:15:52,690
query statement and concatenate the
323

323

00:15:52,690  -->  00:15:55,240
title effectively this is what was passed to
324

324

00:15:55,240  -->  00:15:57,330
the database and not executed just going
325

325

00:15:57,330  -->  00:16:00,270
to copy the code here so effectively that
326

326

00:16:00,270  -->  00:16:02,950
scenario this is what was actually sent
327

327

00:16:02,950  -->  00:16:05,320
to the database that was in the first
328

328

00:16:05,320  -->  00:16:08,950
scenario string builder but in the second
329

329

00:16:08,950  -->  00:16:11,950
scenario we actually get different
330

330

00:16:11,950  -->  00:16:14,770
results in the second scenario prepared
331

331

00:16:14,770  -->  00:16:16,990
statement this is what we're seeing so
332

332

00:16:16,990  -->  00:16:18,190
you can see the difference that in the
333

333

00:16:18,190  -->  00:16:21,100
second scenario what they've type in is
334

334

00:16:21,100  -->  00:16:24,330
basically been substituted for the
335

335

00:16:24,330  -->  00:16:26,560
song title that's really just as double
336

336

00:16:26,560  -->  00:16:27,580
quote here that's making all the
337

337

00:16:27,580  -->  00:16:30,100
difference and the databases is
338

338

00:16:30,100  -->  00:16:32,320
being searched for song that equals out in
339

339

00:16:32,320  -->  00:16:35,140
its entirety since there's no song in
340

340

00:16:35,140  -->  00:16:37,240
the database with the title going your own way
341

341

00:16:37,240  -->  00:16:39,520
or 1 equals 1 or double quote
342

342

00:16:39,520  -->  00:16:41,920
no records were returned in other words
343

343

00:16:41,920  -->  00:16:45,040
a malicious user can't inject sql into
344

344

00:16:45,040  -->  00:16:46,870
the statement because anything
345

345

00:16:46,870  -->  00:16:49,690
substituted for a placeholder is treated
346

346

00:16:49,690  -->  00:16:51,940
as a single literal value and won't be
347

347

00:16:51,940  -->  00:16:54,760
interpreted as sql so let's end
348

348

00:16:54,760  -->  00:16:56,700
the video here but we will talk a bit
349

349

00:16:56,700  -->  00:16:58,720
more about the prepared statements and
350

350

00:16:58,720  -->  00:17:05,220
this further in the next video
