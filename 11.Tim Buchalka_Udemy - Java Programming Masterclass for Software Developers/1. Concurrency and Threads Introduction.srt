1
1

00:00:09,250  -->  00:00:11,700
going to start this section on java
2

2

00:00:11,700  -->  00:00:16,610
currency by defining a few key terms
that you need to know as they relate to
3

3

00:00:16,610  -->  00:00:22,460
java so we are gonna start of using the term process and
that's a unit of execution that has
4

4

00:00:22,460  -->  00:00:28,930
got its own memory space now each instance of a
Java Virtual Machine JVM runs as a
5

5

00:00:28,930  -->  00:00:33,800
process I guess that's not strictly true
for all JVM implementations but really
6

6

00:00:33,800  -->  00:00:39,000
for most of them and when we run a Java console
application which we have been doing a lot of
7

7

00:00:39,000  -->  00:00:43,120
this course what we're doing is we're
kicking off a process when we run a Java
8

8

00:00:43,120  -->  00:00:47,640
FX application we're kicking
also off a process as well
9

9

00:00:48,500  -->  00:00:55,320
now many people use the terms process
and application interchangeably and
10

10

00:00:55,320  -->  00:00:59,850
we will in fact had done that in
this course will do that in this section as well
11

11

00:00:59,850  -->  00:01:04,700
so if one Java application is
running and we run another one each
12

12

00:01:04,700  -->  00:01:10,210
application's got its own memory space
also known as the heap so the first Java
13

13

00:01:10,210  -->  00:01:14,880
application can't access the heap that
belongs to the second Java application in
14

14

00:01:14,880  -->  00:01:18,470
other words that heap isn't shared between
two applications or two processes they
15

15

00:01:18,470  -->  00:01:25,820
each had their own lets talked about a
thread so a thread is a unit of
16

16

00:01:25,820  -->  00:01:31,290
execution within a process so each
process can have multiple threads and in
17

17

00:01:31,290  -->  00:01:36,470
Java every process or application has at
least one thread and that's the main
18

18

00:01:36,470  -->  00:01:42,180
thread for UI applications is just
called a JavaFX application thread in
19

19

00:01:42,180  -->  00:01:46,360
fact just about every Java process also has multiple system threads that
20

20

00:01:46,360  -->  00:01:51,320
handle everyday tasks like memory
management and input-output we as the
21

21

00:01:51,320  -->  00:01:55,320
developers of Java applications don't
explicitly create and code those
22

22

00:01:55,320  -->  00:02:00,360
threads our code runs on the main thread
which is created automatically by your
23

23

00:02:00,360  -->  00:02:05,220
Java program or in other threads that we explicitly create and in this
24

24

00:02:05,220  -->  00:02:12,340
section of the course you are going to be learning how to
create these threads so creating a
25

25

00:02:12,340  -->  00:02:16,870
thread doesn't require as many resources
as creating a process and a thing
26

26

00:02:16,870  -->  00:02:21,610
to remember is that every thread created by
a process shares that processes memory
27

27

00:02:21,610  -->  00:02:25,720
and files and this can cause big
problems with your applications and you will
28

28

00:02:25,720  -->  00:02:28,720
find about that in a later lecture
29

29

00:02:29,290  -->  00:02:34,790
now in addition to the processes memory
or heap each threads got what is called
30

30

00:02:34,790  -->  00:02:41,200
a thread stack and the thread stack is
memory that only that particular thread
31

31

00:02:41,200  -->  00:02:45,480
can access and we are gonna look at what
stored in the heap vs what's stored in
32

32

00:02:45,480  -->  00:02:52,430
the thread stack in a later lecture in this section as well so
33

33

00:02:52,430  -->  00:02:57,380
every Java application runs a single
process and each process can have
34

34

00:02:57,380  -->  00:03:02,540
multiple threads within so every processes
has a heap and every thread has a thread
35

35

00:03:02,540  -->  00:03:06,230
stack I guess at this point you might
be asking why would we want to use
36

36

00:03:06,230  -->  00:03:10,120
multiple threads in our application and why
not just stick with the main thread as
37

37

00:03:10,120  -->  00:03:13,400
we've been using you know in the course
what are the advantages
38

38

00:03:14,040  -->  00:03:17,040
well theirs two main reasons why you wanna
do this
39

39

00:03:17,910  -->  00:03:23,950
firstly we sometimes need to perform a task that is going to take a long time now for
40

40

00:03:23,950  -->  00:03:30,060
example we might want to query a database or fetch a data from a website on the internet so we
41

41

00:03:30,060  -->  00:03:34,190
could do this on the main thread but the
code within each thread executes in a
42

42

00:03:34,190  -->  00:03:38,010
linear fashion so the main thread
wouldn't be able to do anything else
43

43

00:03:38,010  -->  00:03:42,780
while its waiting for that data to come
back from the data base or from the
44

44

00:03:42,780  -->  00:03:43,810
internet
45

45

00:03:43,810  -->  00:03:48,510
another way of putting this is that the
execution of the main thread would be
46

46

00:03:48,510  -->  00:03:53,540
suspended so has to wait for the data
to be returned before it can execute the
47

47

00:03:53,540  -->  00:03:57,280
next line of code and to the user this
could appear as if the application is
48

48

00:03:57,280  -->  00:04:02,650
died or frozen especially when we're
dealing with a UI application and if you have only been through
49

49

00:04:02,650  -->  00:04:09,310
the JavaFX section of this course I did
show you a simulation of locking up a UI
50

50

00:04:09,310  -->  00:04:12,430
application where it appeared to be
frozen waiting for a particular thread
51

51

00:04:12,430  -->  00:04:19,280
to finish so these are big problems that
we need to avoid as developers so
52

52

00:04:19,280  -->  00:04:23,090
instead of tying up the main thread
what we can do is create another thread
53

53

00:04:23,090  -->  00:04:24,910
and execute the long
54

54

00:04:24,910  -->  00:04:28,970
running task on that thread that we just
created and what happens there is that
55

55

00:04:28,970  -->  00:04:35,430
frees up the main thread so that we can
continue working and executing and it can report
56

56

00:04:35,430  -->  00:04:39,780
progress or accept user input and
perform other tasks on the screen or on
57

57

00:04:39,780  -->  00:04:41,340
other part of the program while that
58

58

00:04:41,340  -->  00:04:45,770
long running tasks that we kicked off in
another thread continues to execute in
59

59

00:04:45,770  -->  00:04:51,300
the background that's the first reason
you might want to do it but the second
60

60

00:04:51,300  -->  00:04:54,900
reason we might want to use threads is
because an API requires us to provide
61

61

00:04:54,900  -->  00:04:59,430
one now sometimes we have to provide
the code that will run when a method that we have
62

62

00:04:59,430  -->  00:05:04,610
called reaches a certain point in its
execution so in this particular case we
63

63

00:05:04,610  -->  00:05:06,590
usually don't create a thread
64

64

00:05:06,590  -->  00:05:11,530
we pass in a code that we want to run on the
thread and we will see examples of this later
65

65

00:05:11,530  -->  00:05:18,400
in this section as well and thats bring us to concurrency which refers to
66

66

00:05:18,400  -->  00:05:22,490
an application doing more than one thing
at a time now that doesn't necessarily mean
67

67

00:05:22,490  -->  00:05:26,910
that the application is doing more than
one thing at a time or at the same time what
68

68

00:05:26,910  -->  00:05:30,630
it means is that progress can be made on
more than one task so let's say that an
69

69

00:05:30,630  -->  00:05:33,820
application wants to download data and
draw a shape on the screen
70

70

00:05:33,820  -->  00:05:39,020
so if its a concurrent applications what
it can do is it can download a bit of
71

71

00:05:39,020  -->  00:05:43,370
data then switched to drawing part to
shape and switch back to downloading
72

72

00:05:43,370  -->  00:05:47,000
some more data then switch back to drawing more
of the shape and so on
73

73

00:05:47,000  -->  00:05:51,110
so what concurrency really means is
that one task doesn't have to complete
74

74

00:05:51,110  -->  00:05:55,660
before another one can start and a good
thing here is that java provides thread
75

75

00:05:55,660  -->  00:05:59,130
related classes so that we can create
java
76

76

00:05:59,130  -->  00:06:04,690
concurrent applications so that is a very
short explanation of some of the
77

77

00:06:04,690  -->  00:06:08,550
terminology but don't worry if your having
trouble grasping this concepts
78

78

00:06:08,550  -->  00:06:13,000
concurrency is something that's best learned
by examples we move on in future
79

79

00:06:13,000  -->  00:06:18,260
videos to creating some threads so you can see how this works by analyzing the Java code
80

80

00:06:18,260  -->  00:06:22,050
itself but before we do we really have
to understand that when working with
81

81

00:06:22,050  -->  00:06:26,770
threads were at the mercy of the JVM
Java virtual machine in the operating
82

82

00:06:26,770  -->  00:06:32,530
system when it comes to when the threads
are scheduled to run and as a result or
83

83

00:06:32,530  -->  00:06:37,400
because of that output can vary from run to run
and you might not see the exact same
84

84

00:06:37,400  -->  00:06:41,180
output that someone else's see when they
run an application on their computer
85

85

00:06:41,180  -->  00:06:45,570
that uses concurrency as an example we
can't guarantee in which all the lines we
86

86

00:06:45,570  -->  00:06:51,090
printed to a console because of the very
nature of threading itself but that's it in a
87

87

00:06:51,090  -->  00:06:51,640
nutshell
88

88

00:06:51,640  -->  00:06:56,380
lets start in the next video going through
some practical examples of how threads
89

89

00:06:56,380  -->  00:06:57,930
work see you in the next video
