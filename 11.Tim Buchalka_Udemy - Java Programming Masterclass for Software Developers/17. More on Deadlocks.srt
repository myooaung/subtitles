1
1

00:00:05,390  -->  00:00:09,230
so let's take a look at another way that
a deadlock can occur
2

2

00:00:09,230  -->  00:00:15,170
let's suppose we've got two classes that
contain synchronized methods and each
3

3

00:00:15,170  -->  00:00:20,060
class calls a method in the other class
now as it turns out this is a difficult
4

4

00:00:20,060  -->  00:00:24,320
situation to make happen on purpose so
we won't be actually adding code
5

5

00:00:24,320  -->  00:00:28,600
to our application and that's why I'm showing
you this in slides so we're going to
6

6

00:00:28,600  -->  00:00:31,600
discuss the following code that you can
see on the screen here now
7

7

00:00:36,120  -->  00:00:40,620
recall that when the threads running an
object synchronized method no other
8

8

00:00:40,620  -->  00:00:45,390
thread can run a synchronized method
using the same object until the first
9

9

00:00:45,390  -->  00:00:48,360
thread exits the methods that it's
running
10

10

00:00:48,360  -->  00:00:52,730
so let's assume that we're going to use
the above two classes on the previous
11

11

00:00:52,730  -->  00:00:55,760
screen and I'll go back to that screen
shortly going to use it in the following
12

12

00:00:55,760  -->  00:00:56,570
way
13

13

00:00:56,570  -->  00:01:00,540
so you can see that are we creating a
new data object
14

14

00:01:00,540  -->  00:01:06,870
we're creating a new display object and
we're now passing the display class to
15

15

00:01:06,870  -->  00:01:10,140
the data task via the set display method
16

16

00:01:10,140  -->  00:01:15,780
secondly were also passing the data
class to the set data method which is
17

17

00:01:15,780  -->  00:01:22,320
part of the display class and just going
back looking into that code again you
18

18

00:01:22,320  -->  00:01:25,800
can see they are really quite simple
classes so there's nothing too terribly
19

19

00:01:25,800  -->  00:01:27,270
complicated about it
20

20

00:01:27,270  -->  00:01:30,270
pretty straightforward
21

21

00:01:31,330  -->  00:01:37,270
now if one thread thread one calls data
.update data while another thread
22

22

00:01:37,270  -->  00:01:43,210
thread 2 calls display.update display
their are scenarios that could
23

23

00:01:43,210  -->  00:01:49,480
potentially play out depending on timing
number one thread one enter data.
24

24

00:01:49,480  -->  00:01:55,810
updatedata and writes to the console then
suspends thread 2 enters display.
25

25

00:01:55,810  -->  00:02:01,750
updatedisplay and writes to the console
and suspends thread 1 runs and tries to
26

26

00:02:01,750  -->  00:02:06,940
call display.datachanged but
thread 2 is still running display.
27

27

00:02:06,940  -->  00:02:11,470
updatedisplay so it's holding the lock
on the display object and therefore
28

28

00:02:11,470  -->  00:02:17,950
thread 1 blocks and number 4 thread 2
wakes up and tries to run data.get
29

29

00:02:17,950  -->  00:02:23,500
data but thread 1 is still running data.update data so thread 2 blocks
30

30

00:02:26,460  -->  00:02:27,390
so at that
31

31

00:02:27,390  -->  00:02:31,050
point we've got a deadlock so the
underlying cause of the deadlock is
32

32

00:02:31,050  -->  00:02:35,100
actually the same as the first example
we saw in the code in the previous
33

33

00:02:35,100  -->  00:02:40,500
lecture the two threads are trying to
get the same two locks in a different
34

34

00:02:40,500  -->  00:02:41,100
order
35

35

00:02:41,100  -->  00:02:45,570
thread 1 wants to get the data lock
and then once the display lock but
36

36

00:02:45,570  -->  00:02:49,470
thread 2 gets the display lock and
then once the data lock
37

37

00:02:49,470  -->  00:02:53,760
now we would avoid this problem in the
same way we did in the first example in
38

38

00:02:53,760  -->  00:02:56,760
the previous video
39

39

00:02:58,190  -->  00:02:59,420
we have to rewrite the
40

40

00:02:59,420  -->  00:03:04,840
code so that the two threads try to
obtain the locks in the same order which
41

41

00:03:04,840  -->  00:03:08,230
in this case would mean not calling each
other in this circular fashion
42

42

00:03:08,950  -->  00:03:13,250
we could also see if it's possible to
pass information to other objects using
43

43

00:03:13,250  -->  00:03:18,410
parameters rather than having them call
methods to get the information and I
44

44

00:03:18,410  -->  00:03:22,480
feel compelled to actually say that in a
real world application we wouldn't be
45

45

00:03:22,480  -->  00:03:27,680
mixing UI and model code like this is
just really serving and it's serving to
46

46

00:03:27,680  -->  00:03:31,450
show you an example of deadlocks ok so
moving on
47

47

00:03:31,450  -->  00:03:36,310
ok so here's another way that we're
going to put some code together to
48

48

00:03:36,310  -->  00:03:37,610
get a deadlock
49

49

00:03:37,610  -->  00:03:41,480
that's actually quite difficult to spot
we're going to create a new console
50

50

00:03:41,480  -->  00:03:44,450
project so we're going to close this one
down
51

51

00:03:44,450  -->  00:03:49,970
actually I'm just come in here and create
a new project new project we're going to
52

52

00:03:49,970  -->  00:03:51,680
select java as we always do
53

53

00:03:51,680  -->  00:03:57,290
and create a project from template it's
going to be a command line app and
54

54

00:03:57,290  -->  00:04:02,600
will call this one say hello and
will create that
55

55

00:04:04,160  -->  00:04:10,190
and just overwrite that it will just
close this other project down because we
56

56

00:04:10,190  -->  00:04:11,480
no longer need that for now
57

57

00:04:11,480  -->  00:04:16,670
alright so we're going to start by
adding a polite person class to the main
58

58

00:04:16,670  -->  00:04:21,500
java file I'm going to come down here
and add it as inner class
59

59

00:04:21,500  -->  00:04:34,820
....and we're going
to have a private....
60

60

00:04:34,820  -->  00:04:40,940
and we need a constructor it will pass
the parameters to the constructor and
61

61

00:04:40,940  -->  00:04:47,340
save it into our field also want a getter
62

62

00:04:47,340  -->  00:04:52,500
getter will be on the string as well i'm
going to write a 2 synchronized method here
63

63

00:04:52,500  -->  00:04:59,520
so next we need to type....
64

64

00:05:00,090  -->  00:05:06,150
....
65

65

00:05:06,810  -->  00:05:14,880
....and I think we've used that
66

66

00:05:14,880  -->  00:05:18,750
before the course but it's very similar
to a system.out.println
67

67

00:05:18,750  -->  00:05:23,370
the only difference is we pass
parameters like this will do...
68

68

00:05:23,370  -->  00:05:35,220
....and we pass the two
69

69

00:05:35,220  -->  00:05:40,410
parameters so...
70

70

00:05:40,410  -->  00:05:46,280
so what happens is when we run this the
percent s gets replaced with the
71

71

00:05:46,280  -->  00:05:51,410
parameters in order so the first %s
gets replaced with this.name contents
72

72

00:05:51,410  -->  00:05:56,460
of the name of field and the second
percent s gets replaced with the person
73

73

00:05:56,460  -->  00:06:02,460
object from the getter which will
return the name
74

74

00:06:02,460  -->  00:06:07,740
string and percent n goes to a new line so
I'm using system.format
75

75

00:06:07,740  -->  00:06:11,430
because it's more likely when we get to
the stage of synchronizing or try to run
76

76

00:06:11,430  -->  00:06:15,530
this you know it's got a higher probability of actually did locking that's why
77

77

00:06:15,530  -->  00:06:18,990
we're using it out just to sort of
simulate how this works but essentially
78

78

00:06:18,990  -->  00:06:21,630
you could do this with system.out.println
79

79

00:06:21,630  -->  00:06:25,340
but you probably won't get a deadlock
when we go to run so....
80

80

00:06:25,340  -->  00:06:29,220
....
81

81

00:06:29,220  -->  00:06:34,440
it's going to be very much the same
polite....
82

82

00:06:34,440  -->  00:06:40,800
we're going to do....and same thing
83

83

00:06:40,800  -->  00:07:01,660
....
84

84

00:07:02,840  -->  00:07:06,160
ok so when an object says hello
85

85

00:07:06,160  -->  00:07:10,280
we want the other object to say hello
back before another thread can say hello
86

86

00:07:10,280  -->  00:07:11,720
to the same object
87

87

00:07:11,720  -->  00:07:16,660
also we want an object to finish saying
hello back to one object before it says
88

88

00:07:16,660  -->  00:07:21,080
hello back to another object so we
synchronized the say hello and say hello
89

89

00:07:21,080  -->  00:07:22,720
back methods to do that
90

90

00:07:22,720  -->  00:07:25,880
so now that we've written those methods
let's go ahead and create the two
91

91

00:07:25,880  -->  00:07:28,070
objects and have them to say hello to
each other
92

92

00:07:28,070  -->  00:07:33,110
firstly on the same thread going to come
back to our main method and we'll type
93

93

00:07:33,110  -->  00:07:37,220
....
94

94

00:07:38,530  -->  00:07:44,500
....
95

95

00:07:45,220  -->  00:07:50,380
....
96

96

00:07:51,190  -->  00:08:03,530
....but one other thing we'll need
97

97

00:08:03,530  -->  00:08:07,820
to do after that is in our say hello method i mentioned that time we want the
98

98

00:08:07,820  -->  00:08:09,710
other object to say hello back
99

99

00:08:09,710  -->  00:08:16,130
so what we need to do is in our say hello method after the system.out.format
100

100

00:08:16,130  -->  00:08:21,130
we want to put person which is the object passed
to this method as an argument....
101

101

00:08:21,130  -->  00:08:22,340
....
102

102

00:08:22,340  -->  00:08:28,820
so it's calling the method in that
object and pass this being the current
103

103

00:08:28,820  -->  00:08:30,160
object back to that
104

104

00:08:30,160  -->  00:08:35,270
so we're getting another object to say
hello back alright so we run this we should
105

105

00:08:35,270  -->  00:08:37,490
work because we're using the same thread
106

106

00:08:37,490  -->  00:08:43,880
let's just check that we see the jane
says hello to John and then John says
107

107

00:08:43,880  -->  00:08:48,680
hello back then John says hello to Jane
and jane says hello back
108

108

00:08:49,190  -->  00:08:52,820
and again since all the code is running
on the same thread we can't actually
109

109

00:08:52,820  -->  00:08:54,350
experience a deadlock
110

110

00:08:54,350  -->  00:08:58,910
but what happens if we have Jane and
John say hello to each other on
111

111

00:08:58,910  -->  00:09:02,250
different threads so to simulate
that
112

112

00:09:02,250  -->  00:09:06,390
or to do that let's actually change
this code here we're going to create new
113

113

00:09:06,390  -->  00:09:07,860
threads so we are going to put...
114

114

00:09:07,860  -->  00:09:14,400
...and we will paste this first code from Jane
115

115

00:09:15,060  -->  00:09:21,750
and we will probably have to check mark the
variable to type final
116

116

00:09:21,750  -->  00:09:23,580
because we're using an inner class
117

117

00:09:23,580  -->  00:09:30,330
the variable needs to be declared final
so will just do a final here to keep
118

118

00:09:30,330  -->  00:09:36,420
intelliJ happy and we'll do the same for John and next what we need to do here we
119

119

00:09:36,420  -->  00:09:39,420
have to start the thread of
course as well not just define it
120

120

00:09:39,420  -->  00:09:46,770
....start on the end of it and then we'll
121

121

00:09:46,770  -->  00:09:51,030
come back here and we will paste in the
code for John
122

122

00:09:51,720  -->  00:09:57,990
so essentially what we've done now is
we've wrapped the calls to each object
123

123

00:09:57,990  -->  00:09:59,640
into a thread
124

124

00:09:59,640  -->  00:10:03,420
so we're now ensuring that they're both
running on different threads so will
125

125

00:10:03,420  -->  00:10:06,720
this work well it will depend on timing
when we run it but it'll probably
126

126

00:10:06,720  -->  00:10:07,920
deadlock
127

127

00:10:07,920  -->  00:10:12,150
Jane will say hello to John and John
will say hello to Jane but neither of them
128

128

00:10:12,150  -->  00:10:14,220
will probably say hello back
129

129

00:10:14,220  -->  00:10:19,830
so lets just test that and see what it proves to
be the case so you can see that John has
130

130

00:10:19,830  -->  00:10:21,080
said hello to me so
131

131

00:10:21,080  -->  00:10:24,960
in other words as i mentioned Jane said
hello to John and John you can see on the
132

132

00:10:24,960  -->  00:10:29,580
second line of output has said hello to
Jane but neither of them are saying hello
133

133

00:10:29,580  -->  00:10:31,170
back and we can try running it again
134

134

00:10:31,170  -->  00:10:36,830
by stopping at first most cases it
should deadlock
135

135

00:10:37,350  -->  00:10:39,810
there's a chance depending on timing
that it will work but you can see I've
136

136

00:10:39,810  -->  00:10:44,400
tried three times and its a deadlocked
each time because that say hello back
137

137

00:10:44,400  -->  00:10:48,570
hasn't worked so looking at
is code or perhaps you're looking at
138

138

00:10:48,570  -->  00:10:51,540
this now and thinking you know how can
this happen
139

139

00:10:51,540  -->  00:10:56,040
how are both threads able to to enter the say hello method since the
140

140

00:10:56,040  -->  00:11:00,540
method is synchronized won't one thread
block until the other threads finished
141

141

00:11:00,540  -->  00:11:01,830
executing the method
142

142

00:11:01,830  -->  00:11:06,240
yes if the threads are calling the
method using the same object when we
143

143

00:11:06,240  -->  00:11:11,130
synchronize on a method a thread has to
acquire the intrinsic lock for the
144

144

00:11:11,130  -->  00:11:12,060
object
145

145

00:11:12,060  -->  00:11:14,050
it's using to call the method
146

146

00:11:14,050  -->  00:11:17,380
now in our example two objects are
involved
147

147

00:11:17,380  -->  00:11:21,580
so let's take a look at one possible
sequence of execution that may
148

148

00:11:21,580  -->  00:11:25,690
will lead to the deadlock and what I'm
going to do is I'm just going to paste
149

149

00:11:25,690  -->  00:11:29,640
some text here for each one and then
we'll just go through them
150

150

00:11:30,760  -->  00:11:33,820
and I'll just paste it somewhere on the screen
will actually delete this shortly
151

151

00:11:33,820  -->  00:11:41,110
....
152

152

00:11:41,980  -->  00:11:48,430
ok so the first scenario that could
potentially happen if I just close this
153

153

00:11:48,430  -->  00:11:51,430
briefly so you can see it
154

154

00:11:52,450  -->  00:11:56,500
so the very first case what could happen
is thread one acquires the lock on the
155

155

00:11:56,500  -->  00:11:59,760
Jane object and enters the say hello method
156

156

00:11:59,760  -->  00:12:05,470
it prints to the console then suspends then
thread 2 acquire the lock on the John
157

157

00:12:05,470  -->  00:12:06,310
object
158

158

00:12:06,310  -->  00:12:11,640
and enters the say hello method it prints to
the console then suspends and step three
159

159

00:12:11,640  -->  00:12:17,700
thread 1 runs again and wants to say
hello back to the John object it tries
160

160

00:12:17,700  -->  00:12:22,510
to call the say hello back method using
the John object that was passed into the
161

161

00:12:22,510  -->  00:12:29,770
say hello method but thread 2 is
holding the John Lock so thread 1
162

162

00:12:29,770  -->  00:12:36,100
suspends and the last step step 4
potentially thread 2 runs again and wants
163

163

00:12:36,100  -->  00:12:40,600
to say hello back to the Jane object it
tries to call the say hello back method
164

164

00:12:40,600  -->  00:12:45,450
using the Jane object that was passed
to the say hello method but thread
165

165

00:12:45,450  -->  00:12:49,890
1 in this case is holding the Jane
Lock so thread 2 suspends so in this
166

166

00:12:49,890  -->  00:12:52,690
scenario we've got a deadlock and that's
actually what's happening in our code
167

167

00:12:52,690  -->  00:12:56,500
again just to run it will just delete
this out now
168

168

00:13:01,260  -->  00:13:04,740
so if we run it
169

169

00:13:04,740  -->  00:13:09,850
we're getting that deadlock each time we run
it so the potential for deadlocks more
170

170

00:13:09,850  -->  00:13:14,800
difficult to see here because we're
using objects past as parameters so it's
171

171

00:13:14,800  -->  00:13:18,480
not obvious that we could have multiple
threads trying to lock the same objects
172

172

00:13:18,480  -->  00:13:20,250
but in a different order
173

173

00:13:20,250  -->  00:13:24,990
now this was obviously a simple example
where everything is in one file but if
174

174

00:13:24,990  -->  00:13:28,500
you think about it imagine an
application that uses you know perhaps
175

175

00:13:28,500  -->  00:13:31,500
hundreds of classes and uses hundreds of
threads
176

176

00:13:32,110  -->  00:13:36,100
it would be very easy for problems like
this sneak into the code if we're not
177

177

00:13:36,100  -->  00:13:37,200
careful
178

178

00:13:37,200  -->  00:13:41,550
so I hope you can see that once again
the deadlock occurs because of the order
179

179

00:13:41,550  -->  00:13:44,760
in which threads are trying to acquire
locks
180

180

00:13:44,760  -->  00:13:47,760
that's usually the underlying cause of a
deadlock
181

181

00:13:47,760  -->  00:13:51,540
so when synchronizing code always be on
the lookout for places where this
182

182

00:13:51,540  -->  00:13:53,250
situation can arise
183

183

00:13:53,250  -->  00:13:58,540
so that's it for deadlocking going to
finish the video now in the next video
184

184

00:13:58,540  -->  00:14:01,440
we're going to start talking about a
problem that can arise with threads
185

185

00:14:01,440  -->  00:14:03,360
that's called starvation
186

186

00:14:03,360  -->  00:14:04,720
see you in the next video
