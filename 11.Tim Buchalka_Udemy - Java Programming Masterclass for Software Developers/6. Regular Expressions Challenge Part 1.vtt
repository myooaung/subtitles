WEBVTT
1
1

00:00:05.000  -->  00:00:06.940
alright so now it's time to practice
2

2

00:00:06.940  -->  00:00:08.960
what we've learned about writing regular
3

3

00:00:08.960  -->  00:00:11.350
expressions now there's often more than
4

4

00:00:11.350  -->  00:00:12.620
one way to write a regular expression
5

5

00:00:12.620  -->  00:00:15.620
that will match what we want to match so
6

6

00:00:15.620  -->  00:00:16.960
the answers that I'm providing in this
7

7

00:00:16.960  -->  00:00:18.790
lecture may not always be the only
8

8

00:00:18.790  -->  00:00:21.170
answer what you should do is verify your
9

9

00:00:21.170  -->  00:00:23.770
answers using string dot matches string
10

10

00:00:23.770  -->  00:00:27.050
. replace all and or marchers.
11

11

00:00:27.050  -->  00:00:29.440
matches and I've been through all of
12

12

00:00:29.440  -->  00:00:31.250
those in the last few videos in this
13

13

00:00:31.250  -->  00:00:32.110
section
14

14

00:00:32.110  -->  00:00:33.800
essentially what i'm saying here is if
15

15

00:00:33.800  -->  00:00:35.570
your answer doesn't match the one that
16

16

00:00:35.570  -->  00:00:37.940
I provide that doesn't mean that your
17

17

00:00:37.940  -->  00:00:39.440
wrong that your answer is incorrect
18

18

00:00:39.440  -->  00:00:41.390
and that's because i can't really
19

19

00:00:41.390  -->  00:00:43.870
provide every possible solution because
20

20

00:00:43.870  -->  00:00:46.190
that's usually the case their are multiple
21

21

00:00:46.190  -->  00:00:48.800
multiple solutions with programming but
22

22

00:00:48.800  -->  00:00:50.210
especially with regular expressions
23

23

00:00:50.210  -->  00:00:52.760
there's can be many differences
24

24

00:00:52.760  -->  00:00:55.460
alright so let's go on now and I start
25

25

00:00:55.460  -->  00:00:59.090
looking at these challenges
26

26

00:00:59.090  -->  00:01:01.160
alright so the first challenge challenge
27

27

00:01:01.160  -->  00:01:03.800
number one and that's to write the
28

28

00:01:03.800  -->  00:01:06.020
string literal regular expression that
29

29

00:01:06.020  -->  00:01:07.610
will match the following string on
30

30

00:01:07.610  -->  00:01:09.560
screen and you want to use the string
31

31

00:01:09.560  -->  00:01:11.840
dot matches method to verify your answer
32

32

00:01:11.840  -->  00:01:14.780
so pause the video now and see if you
33

33

00:01:14.780  -->  00:01:16.670
can figure that out and i'll see you
34

34

00:01:16.670  -->  00:01:20.960
when you get back alright so hopefully
35

35

00:01:20.960  -->  00:01:23.000
you are managed to get that solution
36

36

00:01:23.000  -->  00:01:24.950
sorted out for that challenge so let's
37

37

00:01:24.950  -->  00:01:26.720
actually go through and type in the
38

38

00:01:26.720  -->  00:01:29.060
answer and I've created a new project
39

39

00:01:29.060  -->  00:01:30.440
here regular expressions challenge and
40

40

00:01:30.440  -->  00:01:31.220
I'm going to be putting all the
41

41

00:01:31.220  -->  00:01:34.360
challenges in this particular project
42

42

00:01:34.360  -->  00:01:37.340
alright so the answer will print...
43

43

00:01:37.340  -->  00:01:58.030
...
44

44

00:01:58.030  -->  00:02:02.330
...so we're just using the
45

45

00:02:02.330  -->  00:02:03.860
string we want to match as the regular
46

46

00:02:03.860  -->  00:02:06.860
expression obviously when we run that we
47

47

00:02:06.860  -->  00:02:08.420
should get a true indicating that there
48

48

00:02:08.420  -->  00:02:11.030
is a match and you can see that their is
49

49

00:02:11.030  -->  00:02:12.380
a match their and I'll just move this down to the
50

50

00:02:12.380  -->  00:02:15.290
bottom
51

51

00:02:15.290  -->  00:02:17.360
alright so that's the first challenge
52

52

00:02:17.360  -->  00:02:19.190
the regular expression matches the
53

53

00:02:19.190  -->  00:02:21.530
occurrence of I want a bike on to
54

54

00:02:21.530  -->  00:02:27.380
the next challenge challenge number two
55

55

00:02:27.380  -->  00:02:29.480
your challenge now is to write a
56

56

00:02:29.480  -->  00:02:31.550
regular expression that will match I
57

57

00:02:31.550  -->  00:02:35.450
want a bike and I want a ball so verify
58

58

00:02:35.450  -->  00:02:36.980
your answer here using the matches
59

59

00:02:36.980  -->  00:02:39.320
method so pause the video try that out
60

60

00:02:39.320  -->  00:02:40.640
and i'll see you when you get back
61

61

00:02:40.640  -->  00:02:45.560
alright so to do that match to actually
62

62

00:02:45.560  -->  00:02:48.620
match i wanna biki and I want a ball how
63

63

00:02:48.620  -->  00:02:51.020
do we do that well we do something like
64

64

00:02:51.020  -->  00:02:58.760
this...
65

65

00:02:58.760  -->  00:03:03.590
..
66

66

00:03:03.590  -->  00:03:26.630
...
67

67

00:03:26.630  -->  00:03:28.550
...will actually run it
68

68

00:03:28.550  -->  00:03:29.870
first to make sure it works
69

69

00:03:29.870  -->  00:03:32.540
always important to make sure
70

70

00:03:32.540  -->  00:03:34.160
it works you get two more trues there we
71

71

00:03:34.160  -->  00:03:36.800
got three trues on the screen here using
72

72

00:03:36.800  -->  00:03:39.500
the / w character class and if
73

73

00:03:39.500  -->  00:03:41.270
you recall that matches characters a
74

74

00:03:41.270  -->  00:03:44.570
to z in uppercase a to z in lowercase 0 to 9
75

75

00:03:44.570  -->  00:03:47.600
and the underscore so it will
76

76

00:03:47.600  -->  00:03:49.490
actually match one character so we
77

77

00:03:49.490  -->  00:03:51.740
needed to add that with a quantifier so
78

78

00:03:51.740  -->  00:03:54.470
i use the + quantifier which indicates
79

79

00:03:54.470  -->  00:03:56.330
that we want to match on one or more
80

80

00:03:56.330  -->  00:03:59.510
characters before the period notice
81

81

00:03:59.510  -->  00:04:00.980
that we have to escape the character
82

82

00:04:00.980  -->  00:04:02.990
class in the string that's why these two
83

83

00:04:02.990  -->  00:04:06.110
backslashes there and there would be
84

84

00:04:06.110  -->  00:04:07.520
another solution here another solution
85

85

00:04:07.520  -->  00:04:08.720
would be to user groups and it's
86

86

00:04:08.720  -->  00:04:10.790
actually look at that one as well so we
87

87

00:04:10.790  -->  00:04:12.050
could do something they're like string....
88

88

00:04:12.050  -->  00:04:18.080
....
89

89

00:04:18.080  -->  00:04:27.980
...
90

90

00:04:27.980  -->  00:04:29.300
alternative way of doing it we can just
91

91

00:04:29.300  -->  00:04:30.500
do the same there we can actually print
92

92

00:04:30.500  -->  00:04:31.880
this out or just copy and paste this
93

93

00:04:31.880  -->  00:04:34.670
remove the second one there so lets
94

94

00:04:34.670  -->  00:04:36.160
actually check to see whether that
95

95

00:04:36.160  -->  00:04:37.310
regular expression works i'll just
96

96

00:04:37.310  -->  00:04:40.280
change that here regular expression one
97

97

00:04:40.280  -->  00:04:44.990
....so let's check that out and
98

98

00:04:44.990  -->  00:04:48.920
make sure that works as well you can see
99

99

00:04:48.920  -->  00:04:51.320
that true down the left-hand side so
100

100

00:04:51.320  -->  00:04:52.820
what I've used there is a group that's
101

101

00:04:52.820  -->  00:04:55.340
going to match the bike or ball and I've
102

102

00:04:55.340  -->  00:04:56.990
also made use of the logical or operator
103

103

00:04:56.990  -->  00:04:58.550
to as you can see there with that pipe
104

104

00:04:58.550  -->  00:04:59.360
character
105

105

00:04:59.360  -->  00:05:01.460
alright that's two challenges down let's
106

106

00:05:01.460  -->  00:05:05.770
move on to the next challenge
107

107

00:05:05.770  -->  00:05:08.530
challenge number three
108

108

00:05:08.530  -->  00:05:11.230
alright so in challenge number two we use the
109

109

00:05:11.230  -->  00:05:14.620
same regular expression twice so use the
110

110

00:05:14.620  -->  00:05:16.420
matcher . matches method this time to
111

111

00:05:16.420  -->  00:05:18.340
check for matches instead of string
112

112

00:05:18.340  -->  00:05:20.290
.matches for the regular expression that
113

113

00:05:20.290  -->  00:05:23.980
uses a backslash w+ as a hint
114

114

00:05:23.980  -->  00:05:25.660
you will have to compile a pattern here
115

115

00:05:25.660  -->  00:05:27.850
so see if you can figure out
116

116

00:05:27.850  -->  00:05:29.470
that challenge pause the video and I'll
117

117

00:05:29.470  -->  00:05:34.600
see you when you get back okay so we're
118

118

00:05:34.600  -->  00:05:37.000
trying to this time use the matcher
119

119

00:05:37.000  -->  00:05:38.800
dot matches method to check for matches
120

120

00:05:38.800  -->  00:05:41.160
instead of the string . matches which we
121

121

00:05:41.160  -->  00:05:43.060
used previously in this second challenge
122

122

00:05:43.060  -->  00:05:46.240
now when I indicated as a hint here is
123

123

00:05:46.240  -->  00:05:48.340
that we needed to compile a pattern so
124

124

00:05:48.340  -->  00:05:50.620
we're going to be doing just that we're
125

125

00:05:50.620  -->  00:05:51.700
going to use our regular expression
126

126

00:05:51.700  -->  00:05:57.100
again string...
127

127

00:05:57.100  -->  00:06:48.720
...
128

128

00:06:48.720  -->  00:06:52.530
alright so just run that to verify that
129

129

00:06:52.530  -->  00:06:56.860
does work
130

130

00:06:56.860  -->  00:06:58.380
so firstly I compiled a regular
131

131

00:06:58.380  -->  00:07:00.870
expression into a pattern then I created a
132

132

00:07:00.870  -->  00:07:02.650
matcher with the challenge one string we
133

133

00:07:02.650  -->  00:07:05.080
used previously i called the matcher.
134

134

00:07:05.080  -->  00:07:07.240
matches method and then I did the same
135

135

00:07:07.240  -->  00:07:09.610
thing for the challenge 2 string except
136

136

00:07:09.610  -->  00:07:11.080
keeping in mind that at that point
137

137

00:07:11.080  -->  00:07:12.660
we don't have to compile our pattern again
138

138

00:07:12.660  -->  00:07:14.880
we can get a new matcher instance using
139

139

00:07:14.880  -->  00:07:16.410
the same pattern object in our
140

140

00:07:16.410  -->  00:07:19.060
challenged 2 string and as a result we
141

141

00:07:19.060  -->  00:07:20.530
don't have to reset the matcher here
142

142

00:07:20.530  -->  00:07:22.300
because we're using different matcher
143

143

00:07:22.300  -->  00:07:24.280
instances with each challenge string just in
144

144

00:07:24.280  -->  00:07:26.160
case you're wondering that's my solution
145

145

00:07:26.160  -->  00:07:27.870
to that challenge anyway
146

146

00:07:27.870  -->  00:07:32.290
alright so on now to challenge 4
147

147

00:07:32.290  -->  00:07:34.300
ok so moving on challenge 4
148

148

00:07:34.300  -->  00:07:38.200
this challenge is now to replace all
149

149

00:07:38.200  -->  00:07:41.770
occurrences of a blank like a space with
150

150

00:07:41.770  -->  00:07:43.390
an underscore for the following string
151

151

00:07:43.390  -->  00:07:45.040
that you can see on the screen and you
152

152

00:07:45.040  -->  00:07:46.540
want to print out that resulting string
153

153

00:07:46.540  -->  00:07:48.160
so you can see the string there is
154

154

00:07:48.160  -->  00:07:49.900
replaced all blanks with underscores
155

155

00:07:49.900  -->  00:07:52.570
with spaces need to replace those blanks
156

156

00:07:52.570  -->  00:07:55.300
or spaces with an underscore so
157

157

00:07:55.300  -->  00:07:56.950
try that out pause the video now and
158

158

00:07:56.950  -->  00:08:00.220
i'll see you when you get back alright
159

159

00:08:00.220  -->  00:08:01.690
so how did you go in that one
160

160

00:08:01.690  -->  00:08:03.370
hopefully managed to solve that
161

161

00:08:03.370  -->  00:08:05.950
so my solution to that one is we're
162

162

00:08:05.950  -->  00:08:07.720
going to create a new string...
163

163

00:08:07.720  -->  00:08:28.420
...
164

164

00:08:28.420  -->  00:08:33.880
...but the otherway of
165

165

00:08:33.880  -->  00:08:36.220
doing it is to use the character class
166

166

00:08:36.220  -->  00:08:38.680
the backslash s character class which
167

167

00:08:38.680  -->  00:08:40.810
will match all white space this will
168

168

00:08:40.810  -->  00:08:42.460
actually be a more broader solution that
169

169

00:08:42.460  -->  00:08:44.220
would work well if you want to replace
170

170

00:08:44.220  -->  00:08:46.000
all whitespace with underscores and not
171

171

00:08:46.000  -->  00:08:47.680
just blanks let's do that one as well
172

172

00:08:47.680  -->  00:08:50.380
over here that's going to be...
173

173

00:08:50.380  -->  00:08:52.990
...
174

174

00:08:52.990  -->  00:08:56.380
....
175

175

00:08:56.380  -->  00:09:04.420
...
176

176

00:09:04.420  -->  00:09:07.600
let's try that and make sure that it
177

177

00:09:07.600  -->  00:09:11.290
works and you can see we got the spaces
178

178

00:09:11.290  -->  00:09:13.300
now in both the situation both cases
179

179

00:09:13.300  -->  00:09:15.520
they're replaced with underscores so
180

180

00:09:15.520  -->  00:09:17.590
that obviously worked alright next
181

181

00:09:17.590  -->  00:09:23.820
challenge challenge number five
182

182

00:09:23.820  -->  00:09:26.760
this time the challenges is to write a
183

183

00:09:26.760  -->  00:09:29.070
regular expression that will match the
184

184

00:09:29.070  -->  00:09:31.950
following string in its entirety and you
185

185

00:09:31.950  -->  00:09:33.850
want to use the string . matches method to
186

186

00:09:33.850  -->  00:09:37.050
verify your answer so see if you can
187

187

00:09:37.050  -->  00:09:38.610
figure that one out pause the video and
188

188

00:09:38.610  -->  00:09:40.110
again as always I'll see you when you
189

189

00:09:40.110  -->  00:09:43.360
get back
190

190

00:09:43.360  -->  00:09:45.970
alright so for this challenge 5 there
191

191

00:09:45.970  -->  00:09:47.560
actually are a number of ways of doing
192

192

00:09:47.560  -->  00:09:49.140
this so I'm actually going to show you a few
193

193

00:09:49.140  -->  00:09:54.880
ways first way would be a system....
194

194

00:09:54.880  -->  00:09:56.950
....
195

195

00:09:56.950  -->  00:10:22.870
...
196

196

00:10:22.870  -->  00:10:25.480
... so in that case our matching
197

197

00:10:25.480  -->  00:10:27.010
strings that contain one or more of the
198

198

00:10:27.010  -->  00:10:30.250
letters A through G inclusive now we can
199

199

00:10:30.250  -->  00:10:31.630
also have written that with a range so
200

200

00:10:31.630  -->  00:10:35.110
let's do that as well why we are here...
201

201

00:10:35.110  -->  00:10:44.920
...
202

202

00:10:44.920  -->  00:10:47.260
...in case you've used a star quantifier
203

203

00:10:47.260  -->  00:10:49.510
also work i've used the plus quantifying
204

204

00:10:49.510  -->  00:10:50.940
as you can see there in both cases
205

205

00:10:50.940  -->  00:10:53.260
both cases now these out the only
206

206

00:10:53.260  -->  00:10:54.550
regular expressions that would match
207

207

00:10:54.550  -->  00:10:56.580
there are others so you're answer might
208

208

00:10:56.580  -->  00:10:58.930
be different so long it actually works
209

209

00:10:58.930  -->  00:11:00.330
that's fine and you have actually
210

210

00:11:00.330  -->  00:11:02.640
succeeded notice the matches method
211

211

00:11:02.640  -->  00:11:04.540
returns true you're essentially correct
212

212

00:11:04.540  -->  00:11:06.390
so lets actually just run that again
213

213

00:11:06.390  -->  00:11:09.310
just to confirm that this is working
214

214

00:11:09.310  -->  00:11:11.520
we've got two trues and it's obviously
215

215

00:11:11.520  -->  00:11:12.510
working as well
216

216

00:11:12.510  -->  00:11:15.520
alright next challenge
217

217

00:11:15.520  -->  00:11:20.330
challenge number six
218

218

00:11:20.330  -->  00:11:22.610
challenges to write a regular expression
219

219

00:11:22.610  -->  00:11:25.100
that will only match the challenge
220

220

00:11:25.100  -->  00:11:27.290
5-string in its entirety
221

221

00:11:27.290  -->  00:11:29.270
so again they hint there is only matched
222

222

00:11:29.270  -->  00:11:32.420
the challenge 5-string in its entirety
223

223

00:11:32.420  -->  00:11:33.680
see if you can figure that one out pause
224

224

00:11:33.680  -->  00:11:35.660
the video now and i'll see you when you
225

225

00:11:35.660  -->  00:11:38.390
get back
226

226

00:11:38.390  -->  00:11:40.850
ok so i how did you go with that one but
227

227

00:11:40.850  -->  00:11:44.000
here's my answer and actually are a
228

228

00:11:44.000  -->  00:11:46.010
couple of other ways to solve this but
229

229

00:11:46.010  -->  00:11:48.350
we'll go through to first way I'm going
230

230

00:11:48.350  -->  00:11:52.730
to do challenge 5...
231

231

00:11:52.730  -->  00:12:14.240
...
232

232

00:12:14.240  -->  00:12:20.000
...so here I'm using
233

233

00:12:20.000  -->  00:12:22.460
quantifiers to spell out exactly what i
234

234

00:12:22.460  -->  00:12:25.040
want to see we got three a's followed by
235

235

00:12:25.040  -->  00:12:29.090
a b followed by 8 c's followed by an e
236

236

00:12:29.090  -->  00:12:33.320
followed by three fs followed by G and
237

237

00:12:33.320  -->  00:12:35.270
then also made use of the beginning of
238

238

00:12:35.270  -->  00:12:37.250
string and end of string boundary matches
239

239

00:12:37.250  -->  00:12:39.080
because we want to string to match in
240

240

00:12:39.080  -->  00:12:41.060
its entirety and not just part of the
241

241

00:12:41.060  -->  00:12:44.420
string and lets actually just run that
242

242

00:12:44.420  -->  00:12:50.690
now that's returning false because I've
243

243

00:12:50.690  -->  00:12:51.740
forgot to put an a in their
244

244

00:12:51.740  -->  00:12:58.070
try again now we actually got a true their so
245

245

00:12:58.070  -->  00:12:59.480
actually doing a complete
246

246

00:12:59.480  -->  00:13:02.810
match now we can actually also verifier
247

247

00:13:02.810  -->  00:13:05.330
verify the answer here by using
248

248

00:13:05.330  -->  00:13:07.010
replace all so we can do something like
249

249

00:13:07.010  -->  00:13:10.100
....
250

250

00:13:10.100  -->  00:13:23.720
...
251

251

00:13:23.720  -->  00:13:26.570
if we run that we should see the word
252

252

00:13:26.570  -->  00:13:29.750
replaced as you can see it's been a
253

253

00:13:29.750  -->  00:13:31.490
complete replacement that's obviously
254

254

00:13:31.490  -->  00:13:33.530
a good way to verify your answers using
255

255

00:13:33.530  -->  00:13:37.070
replace all and just to confirm that
256

256

00:13:37.070  -->  00:13:38.960
does work if I then change challenge 5
257

257

00:13:38.960  -->  00:13:41.480
and put a z at the start we should
258

258

00:13:41.480  -->  00:13:44.090
find that we get a false for the
259

259

00:13:44.090  -->  00:13:46.220
challenge five . matches and the original
260

260

00:13:46.220  -->  00:13:48.830
strain should now not be replaced
261

261

00:13:48.830  -->  00:13:50.360
need to actually putting the character
262

262

00:13:50.360  -->  00:13:52.910
at the start as well didn't copy that over so
263

263

00:13:52.910  -->  00:13:55.310
its an exact copy of the
264

264

00:13:55.310  -->  00:13:57.440
previous regular expression so now if i
265

265

00:13:57.440  -->  00:14:02.450
run that you can see the original string
266

266

00:14:02.450  -->  00:14:04.010
was now left untouched and that's
267

267

00:14:04.010  -->  00:14:07.100
because the complete regular expression
268

268

00:14:07.100  -->  00:14:08.630
wasn't matched because we had a z
269

269

00:14:08.630  -->  00:14:10.970
character and we have actually specified
270

270

00:14:10.970  -->  00:14:13.100
that the entire string had to match and
271

271

00:14:13.100  -->  00:14:14.720
consequently the previous line also
272

272

00:14:14.720  -->  00:14:17.150
didn't work because again we actually
273

273

00:14:17.150  -->  00:14:19.370
wanted to do an exact match complete
274

274

00:14:19.370  -->  00:14:21.980
match of the entire string alright time
275

275

00:14:21.980  -->  00:14:23.120
for the next challenge
276

276

00:14:23.120  -->  00:14:27.840
ok challenge number seven
277

277

00:14:27.840  -->  00:14:30.270
the challenge here is to write a regular
278

278

00:14:30.270  -->  00:14:32.220
expression is going to match a string
279

279

00:14:32.220  -->  00:14:35.280
that starts with a series of letters so
280

280

00:14:35.280  -->  00:14:36.720
the letters must be followed by a period
281

281

00:14:36.720  -->  00:14:39.570
after the period there must be a series
282

282

00:14:39.570  -->  00:14:43.110
of digits so the string KJISL.22
283

283

00:14:43.110  -->  00:14:44.580
would be an example of a string that
284

284

00:14:44.580  -->  00:14:47.970
would match the string f5.12a
285

285

00:14:47.970  -->  00:14:50.070
is an example of a match or something
286

286

00:14:50.070  -->  00:14:52.620
that wouldn't match so use the string that I
287

287

00:14:52.620  -->  00:14:56.220
got on screen abcd.135 to test your
288

288

00:14:56.220  -->  00:14:58.260
regular expression so see if you can figure
289

289

00:14:58.260  -->  00:14:59.850
that one out pause the video now and
290

290

00:14:59.850  -->  00:15:03.510
i'll see you when you get back alright
291

291

00:15:03.510  -->  00:15:04.830
so let's see if we can solve this
292

292

00:15:04.830  -->  00:15:07.740
challenge will start by putting our
293

293

00:15:07.740  -->  00:15:10.620
challenge string in...
294

294

00:15:10.620  -->  00:15:46.560
...
295

295

00:15:46.560  -->  00:15:47.760
only way to write this regular
296

296

00:15:47.760  -->  00:15:49.860
expression if the matches method returns
297

297

00:15:49.860  -->  00:15:51.930
true for whatever you've written than
298

298

00:15:51.930  -->  00:15:54.150
your regular expression is correct and
299

299

00:15:54.150  -->  00:15:55.620
the one that I've written above we start
300

300

00:15:55.620  -->  00:15:57.090
by using the beginning of string boundary
301

301

00:15:57.090  -->  00:15:59.100
matcher the carrot to ensure that
302

302

00:15:59.100  -->  00:16:01.710
nothing occurs before the pattern we
303

303

00:16:01.710  -->  00:16:03.510
then look for one more letters using a
304

304

00:16:03.510  -->  00:16:05.340
range of characters and the plus
305

305

00:16:05.340  -->  00:16:07.590
quantifier could use the case
306

306

00:16:07.590  -->  00:16:09.600
sensitive modifier and specified one
307

307

00:16:09.600  -->  00:16:12.420
range that's one alternative after the
308

308

00:16:12.420  -->  00:16:14.760
letters we look for a period since the
309

309

00:16:14.760  -->  00:16:17.160
period character is a character class
310

310

00:16:17.160  -->  00:16:18.990
that matches all characters i had to
311

311

00:16:18.990  -->  00:16:21.210
escape it when we met match the literal
312

312

00:16:21.210  -->  00:16:22.350
dots and that's why there's two
313

313

00:16:22.350  -->  00:16:24.660
backslashes and a dot and after that we
314

314

00:16:24.660  -->  00:16:27.120
expect one or more digits using the
315

315

00:16:27.120  -->  00:16:29.580
backslash d character class followed by
316

316

00:16:29.580  -->  00:16:31.860
a quantifier plus to match that part of
317

317

00:16:31.860  -->  00:16:34.350
the string now the star quantifier here
318

318

00:16:34.350  -->  00:16:36.300
would be wrong because that would match
319

319

00:16:36.300  -->  00:16:39.090
strings that look like ABC dot the
320

320

00:16:39.090  -->  00:16:40.500
strings we want to match must have at
321

321

00:16:40.500  -->  00:16:41.180
least one
322

322

00:16:41.180  -->  00:16:43.670
digit after the period finally we
323

323

00:16:43.670  -->  00:16:45.740
include the dollar boundary matcher at
324

324

00:16:45.740  -->  00:16:46.880
the end of the string to ensure that
325

325

00:16:46.880  -->  00:16:48.530
nothing occurs after this pattern
326

326

00:16:48.530  -->  00:16:50.220
let's just run this to make sure
327

327

00:16:50.220  -->  00:16:54.650
it actually does work and you can see we've
328

328

00:16:54.650  -->  00:16:56.840
got a true there so it is working
329

329

00:16:56.840  -->  00:16:58.340
alright so let's finish the video here
330

330

00:16:58.340  -->  00:17:00.200
now we're continuing with some more
331

331

00:17:00.200  -->  00:17:02.000
challenges for our regular expressions
332

332

00:17:02.000  -->  00:17:08.410
section in the next video
