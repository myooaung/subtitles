1
1

00:00:05,610  -->  00:00:07,240
- [Tim] All right, so in
this section of the course,
2

2

00:00:07,240  -->  00:00:10,570
we've learned quite a
lot about using java.nio
3

3

00:00:10,570  -->  00:00:12,020
with the file system.
4

4

00:00:12,020  -->  00:00:14,570
Now, some developer tools use java.io
5

5

00:00:14,570  -->  00:00:17,420
and many existing Java applications,
6

6

00:00:17,420  -->  00:00:21,260
especially those written before
java.nio became available,
7

7

00:00:21,260  -->  00:00:22,760
still use java.io.
8

8

00:00:23,940  -->  00:00:26,410
In addition, many code
examples around the web
9

9

00:00:26,410  -->  00:00:29,590
also use java.io so it is very important
10

10

00:00:29,590  -->  00:00:32,390
that you'll be able to read java.io code
11

11

00:00:32,390  -->  00:00:34,610
and understand what it's doing.
12

12

00:00:34,610  -->  00:00:36,780
So we're gonna finish up this
section of the course now
13

13

00:00:36,780  -->  00:00:38,310
by discussing how to map
14

14

00:00:38,310  -->  00:00:41,480
common java.io operations to java.nio.
15

15

00:00:42,970  -->  00:00:44,970
So let's start with paths.
16

16

00:00:44,970  -->  00:00:49,010
Now, I mentioned that rather
than using java.io.file,
17

17

00:00:49,010  -->  00:00:51,760
it's better to use java.nio.path.
18

18

00:00:52,770  -->  00:00:56,000
Now, you can use the file.toPath method
19

19

00:00:56,000  -->  00:00:58,650
to convert an old style file instance
20

20

00:00:58,650  -->  00:01:01,690
to the preferred java.nio.path instance.
21

21

00:01:01,690  -->  00:01:04,530
So let's actually give that a try.
22

22

00:01:06,090  -->  00:01:10,260
So we can type something
like File file = new File
23

23

00:01:13,410  -->  00:01:15,650
and I'm just gonna have a path
24

24

00:01:15,650  -->  00:01:17,860
something along these lines for my Mac
25

25

00:01:17,860  -->  00:01:21,590
and it'll also work on Linux, file.txt,
26

26

00:01:21,590  -->  00:01:24,680
but you would do something similar on a PC
27

27

00:01:24,680  -->  00:01:28,850
like C:\\Examples\file.txt.
28

28

00:01:31,570  -->  00:01:33,060
So I can then convert that by typing
29

29

00:01:33,060  -->  00:01:36,150
Path convertedPath = file.toPath
30

30

00:01:39,690  -->  00:01:41,540
and I can print that out.
31

31

00:01:41,540  -->  00:01:45,040
ConvertedPath = + convertedPath.
32

32

00:01:46,870  -->  00:01:48,620
I'll try to run that,
33

33

00:01:52,010  -->  00:01:56,180
convertedPath = /Examples/file.txt
34

34

00:01:56,180  -->  00:01:59,480
which of course is what
it was in the file object.
35

35

00:01:59,480  -->  00:02:01,220
Now, note that it doesn't matter
36

36

00:02:01,220  -->  00:02:03,760
whether the stream that we
passed to the file constructor
37

37

00:02:03,760  -->  00:02:05,570
points to an existing file.
38

38

00:02:05,570  -->  00:02:06,800
Just like with paths,
39

39

00:02:06,800  -->  00:02:08,410
the file doesn't have to exist
40

40

00:02:08,410  -->  00:02:10,950
until the code tries to
access it and even then,
41

41

00:02:10,950  -->  00:02:13,260
sometimes it's okay if
the file doesn't exist
42

42

00:02:13,260  -->  00:02:15,190
for example without being streamed.
43

43

00:02:15,190  -->  00:02:19,140
If the file doesn't exist,
it'll be created at that point.
44

44

00:02:19,140  -->  00:02:21,520
All right, so once
we've got a path object,
45

45

00:02:21,520  -->  00:02:23,060
we can go ahead and use it
46

46

00:02:23,060  -->  00:02:26,300
with all the java.nio classes and methods.
47

47

00:02:26,300  -->  00:02:27,330
Now, in the last video,
48

48

00:02:27,330  -->  00:02:29,950
you learned about the path.resolve method
49

49

00:02:29,950  -->  00:02:31,620
that takes part of a path
50

50

00:02:31,620  -->  00:02:34,930
and resolves it relative
to another path instance.
51

51

00:02:34,930  -->  00:02:37,870
Now, you can do the same
thing using the file class,
52

52

00:02:37,870  -->  00:02:40,930
but you have to do it when
the file instance is created
53

53

00:02:40,930  -->  00:02:43,650
using the version of the
constructor that accepts the file
54

54

00:02:43,650  -->  00:02:45,280
and the string as parameters
55

55

00:02:45,280  -->  00:02:48,300
or the extracted version
that accepts two strings
56

56

00:02:48,300  -->  00:02:50,870
so let's have a look at that.
57

57

00:02:50,870  -->  00:02:55,160
So I can start off with
File parent = new File
58

58

00:02:55,160  -->  00:02:58,220
and I'm gonna use /Examples for my Mac,
59

59

00:02:58,220  -->  00:03:02,390
but for PC let's stick with
the example there C:\\Examples
60

60

00:03:04,510  -->  00:03:08,670
and we'll do File resolvedFile
= new File(parent,)
61

61

00:03:12,770  -->  00:03:16,940
and then the path and we're
going to use dir/file.txt
62

62

00:03:19,140  -->  00:03:20,700
again on a Mac.
63

63

00:03:20,700  -->  00:03:24,870
On Windows, you do something
like dir\\file.txt.
64

64

00:03:27,180  -->  00:03:30,600
We can print that out resolvedFile.toPath
65

65

00:03:32,860  -->  00:03:33,910
and then we can also do
66

66

00:03:33,910  -->  00:03:36,050
using the other version of the constructor
67

67

00:03:36,050  -->  00:03:40,870
resolvedFile = new File so
we can pass them separately
68

68

00:03:40,870  -->  00:03:45,320
so we could do /Examples
as the first argument
69

69

00:03:45,320  -->  00:03:49,230
and for the second one dir/file.txt.
70

70

00:03:51,020  -->  00:03:52,630
And again on Windows the
two arguments would be
71

71

00:03:52,630  -->  00:03:56,800
C:\\Examples and the second
one would be dir\\file.txt.
72

72

00:04:00,490  -->  00:04:04,400
Then we can print that
out resolvedFile.toPath.
73

73

00:04:05,480  -->  00:04:06,900
So let's run that
74

74

00:04:10,560  -->  00:04:13,320
and we can see that we've got
that working nicely as well.
75

75

00:04:13,320  -->  00:04:14,900
And in terms of what we've done
76

76

00:04:14,900  -->  00:04:17,370
so I have parent which is on line 78,
77

77

00:04:17,370  -->  00:04:18,670
well that's the instance we used
78

78

00:04:18,670  -->  00:04:20,420
to invoke the resolve method
79

79

00:04:20,420  -->  00:04:24,620
and we passed the child part
of the path as the parameter.
80

80

00:04:24,620  -->  00:04:28,790
So up here with the first call
to the resolvedFile.toPath,
81

81

00:04:30,540  -->  00:04:32,870
we're passing a file
instance as the parent
82

82

00:04:32,870  -->  00:04:34,540
and a string as the child
83

83

00:04:34,540  -->  00:04:36,340
and you can see that's
getting converted to a path
84

84

00:04:36,340  -->  00:04:37,990
and it's returning a path for us.
85

85

00:04:37,990  -->  00:04:39,640
In the second example,
86

86

00:04:39,640  -->  00:04:42,460
we're passing the parent
and the child as strings
87

87

00:04:42,460  -->  00:04:43,500
and we get the same result.
88

88

00:04:43,500  -->  00:04:46,110
And incidentally, both
of these are equivalent
89

89

00:04:46,110  -->  00:04:48,010
to us doing something along these lines,
90

90

00:04:48,010  -->  00:04:50,680
Path parentPath = Paths.get
91

91

00:04:55,650  -->  00:04:58,600
I'm gonna do /Examples again,
92

92

00:04:58,600  -->  00:05:00,840
but again on a Windows instal,
93

93

00:05:00,840  -->  00:05:04,780
C:\Examples or two backslashes actually
94

94

00:05:04,780  -->  00:05:08,450
and Path childRelativePath = Paths.get.
95

95

00:05:13,440  -->  00:05:16,770
Again on a Mac, dir/file.txt.
96

96

00:05:17,730  -->  00:05:21,900
On a Windows, dir\\file.txt.
97

97

00:05:22,760  -->  00:05:25,060
And we could print that out which will be
98

98

00:05:25,060  -->  00:05:29,230
parentPath.resolve(childRelativePath).
99

99

00:05:31,590  -->  00:05:32,420
Run that.
100

100

00:05:36,540  -->  00:05:39,310
You can see that the
output is identical there.
101

101

00:05:39,310  -->  00:05:41,270
So basically both of these options,
102

102

00:05:41,270  -->  00:05:43,270
the resolvedPath.toPath,
103

103

00:05:44,240  -->  00:05:46,760
the example there with
passing the file object
104

104

00:05:46,760  -->  00:05:50,190
and the child path as a string
or passing the two strings
105

105

00:05:50,190  -->  00:05:52,820
so the constructor is equivalent
to what we've done there
106

106

00:05:52,820  -->  00:05:56,090
on the code on line 85 through 87.
107

107

00:05:56,090  -->  00:05:58,610
All right, so we also learned
previously in this section
108

108

00:05:58,610  -->  00:06:02,470
how to call the files.move
and files.delete methods
109

109

00:06:02,470  -->  00:06:05,660
to move or rename files
as well as delete files.
110

110

00:06:05,660  -->  00:06:08,360
Now, the equivalent
methods in the file class
111

111

00:06:08,360  -->  00:06:12,190
are file.renameTo and
the file.delete methods.
112

112

00:06:13,380  -->  00:06:14,780
Now, that's pretty self-explanatory
113

113

00:06:14,780  -->  00:06:17,590
so I won't code an example for those.
114

114

00:06:17,590  -->  00:06:19,440
Now, in all the examples,
115

115

00:06:19,440  -->  00:06:22,130
we've used fileSystems.getDefault
116

116

00:06:22,130  -->  00:06:24,720
to get the working directory
for the application
117

117

00:06:24,720  -->  00:06:26,670
and that actually returns a path.
118

118

00:06:26,670  -->  00:06:29,520
Now, when working with
many java.io methods,
119

119

00:06:29,520  -->  00:06:31,890
you actually need to use a file instance.
120

120

00:06:31,890  -->  00:06:33,420
Now, there are several ways to do this,
121

121

00:06:33,420  -->  00:06:35,230
but some of them have drawbacks
122

122

00:06:35,230  -->  00:06:37,290
and that's another reason
why working with paths
123

123

00:06:37,290  -->  00:06:39,910
and the java.nio classes is better,
124

124

00:06:39,910  -->  00:06:41,830
but here's a hack that is more robust
125

125

00:06:41,830  -->  00:06:43,830
than a lot of other solutions.
126

126

00:06:43,830  -->  00:06:45,050
It's getting the working directory
127

127

00:06:45,050  -->  00:06:47,970
so let's have a look at doing that.
128

128

00:06:48,950  -->  00:06:53,120
So File workingDirectory = new
File("").getAbsoluteFile().
129

129

00:07:01,610  -->  00:07:02,720
We can print that out
130

130

00:07:02,720  -->  00:07:06,890
workingDirectory = +
workingDirectory.getAbsolutePath.
131

131

00:07:09,830  -->  00:07:10,660
A bit of a hack,
132

132

00:07:10,660  -->  00:07:14,350
but it's one that is most
robust than other solutions.
133

133

00:07:14,350  -->  00:07:18,180
Now just run that to
confirm that it does work
134

134

00:07:19,080  -->  00:07:21,440
and you can see that's
consistent with the directory
135

135

00:07:21,440  -->  00:07:23,290
you can see at the top of the screen there
136

136

00:07:23,290  -->  00:07:25,230
for the current working directory
137

137

00:07:25,230  -->  00:07:27,090
for this particular project.
138

138

00:07:27,090  -->  00:07:31,030
The reason this works on line
89 is because when you pass
139

139

00:07:31,030  -->  00:07:33,420
an empty string to the file constructor,
140

140

00:07:33,420  -->  00:07:36,690
it actually translates it to
the current directory for you
141

141

00:07:36,690  -->  00:07:38,130
and of course that's the working directory
142

142

00:07:38,130  -->  00:07:39,680
for the application.
143

143

00:07:39,680  -->  00:07:44,100
Now, one major difference
between java.io and java.nio
144

144

00:07:44,100  -->  00:07:46,610
is the way you list the
contents of a directory.
145

145

00:07:46,610  -->  00:07:48,410
Now previously in this section,
146

146

00:07:48,410  -->  00:07:50,230
you learned how to use a directory stream
147

147

00:07:50,230  -->  00:07:52,240
when working with java.nio,
148

148

00:07:52,240  -->  00:07:54,300
but when working with java.io,
149

149

00:07:54,300  -->  00:07:58,570
you use the file.list method
and file.listFiles method.
150

150

00:07:58,570  -->  00:08:00,530
Now, these methods do the same thing,
151

151

00:08:00,530  -->  00:08:03,390
but the list method
returns an array of string
152

152

00:08:03,390  -->  00:08:07,030
and the listFiles method actually
returns an array of file.
153

153

00:08:07,030  -->  00:08:09,680
In addition, you can pass an
optional filtering parameter
154

154

00:08:09,680  -->  00:08:10,950
to the list method.
155

155

00:08:10,950  -->  00:08:11,950
So let's just take a quick look
156

156

00:08:11,950  -->  00:08:14,620
at a couple of examples of this.
157

157

00:08:18,610  -->  00:08:20,980
So what we'll do is we'll
start just putting a message
158

158

00:08:20,980  -->  00:08:22,770
so we know they're not separated.
159

159

00:08:22,770  -->  00:08:26,680
We'll print dir1 with
dir1 contents using list,
160

160

00:08:30,300  -->  00:08:32,130
using the list method.
161

161

00:08:34,070  -->  00:08:37,820
So I'm gonna do File dir2File = new File
162

162

00:08:39,900  -->  00:08:42,690
we're going to use the
workingDirectory file object
163

163

00:08:42,690  -->  00:08:47,210
that we created on line
89 as the first argument
164

164

00:08:47,210  -->  00:08:49,720
and then we wanna pass
the actual reference
165

165

00:08:49,720  -->  00:08:51,530
to the subfolder that we want access to
166

166

00:08:51,530  -->  00:08:55,690
so we're going to use /FileTree/dir2
and that's for my Mac.
167

167

00:08:59,640  -->  00:09:01,230
If you're on a Windows machine,
168

168

00:09:01,230  -->  00:09:05,400
you wanna do something along
the lines of \\FileTree\Dir2.
169

169

00:09:09,320  -->  00:09:10,150
Now that we've got that,
170

170

00:09:10,150  -->  00:09:12,580
we can do String, a string array,
171

171

00:09:12,580  -->  00:09:16,740
dir2Contents = dir2File.list
to call the list method.
172

172

00:09:20,140  -->  00:09:24,300
Then we'll do for[int i=0]
i< Dir2Contents.length i++
173

173

00:09:29,310  -->  00:09:33,480
and then we'll print out
dir2Contents for element i.
174

174

00:09:35,100  -->  00:09:37,400
And let's just also
just to be clear there,
175

175

00:09:37,400  -->  00:09:41,560
we'll put i= + i + we'll do that like so.
176

176

00:09:44,160  -->  00:09:47,240
All right, so let's try running that.
177

177

00:09:48,700  -->  00:09:49,530
All right, so you can see
178

178

00:09:49,530  -->  00:09:52,130
that we're putting the dir1 folder.
179

179

00:09:52,130  -->  00:09:54,450
I said dir1 in the comments up here,
180

180

00:09:54,450  -->  00:09:56,810
but we're actually using the dir2 folder
181

181

00:09:56,810  -->  00:09:59,070
so technically that should have been dir2
182

182

00:09:59,070  -->  00:10:01,810
just to be consistent there.
183

183

00:10:01,810  -->  00:10:03,830
But you'll notice that
we're one level deep
184

184

00:10:03,830  -->  00:10:06,260
so it showed us the dir3 folder,
185

185

00:10:06,260  -->  00:10:08,520
but it didn't go into the dir3 folder,
186

186

00:10:08,520  -->  00:10:11,600
but it did give us the other
three filenames as well.
187

187

00:10:11,600  -->  00:10:13,840
So again, it's only returning
the first-level entries.
188

188

00:10:13,840  -->  00:10:17,430
It doesn't walk the tree
down to any subfolders.
189

189

00:10:17,430  -->  00:10:21,450
And we can do something similar
using the listFiles method.
190

190

00:10:21,450  -->  00:10:23,370
So I can come down here
191

191

00:10:25,830  -->  00:10:29,910
and we'll do print Dir2
contents using listFiles.
192

192

00:10:35,800  -->  00:10:39,800
We'll do a File array
dir2Files = dir2File,
193

193

00:10:43,880  -->  00:10:47,960
again dir2File is defined
on line 93, .listFiles.
194

194

00:10:50,660  -->  00:10:53,110
Then we can do the same thing for,
195

195

00:10:53,110  -->  00:10:55,010
well let's actually
just take a copy of this
196

196

00:10:55,010  -->  00:10:56,120
and let's make a few little changes
197

197

00:10:56,120  -->  00:10:58,340
just to save a bit of time
198

198

00:10:58,340  -->  00:11:01,430
and it's gonna be dir2Files this time
199

199

00:11:04,400  -->  00:11:08,140
and it's going to dir2Files(i)
200

200

00:11:08,140  -->  00:11:12,250
but then we wanna do .getName
to call the .getName method
201

201

00:11:12,250  -->  00:11:16,420
because of course we've got
an array of file objects here.
202

202

00:11:17,280  -->  00:11:18,450
We'll run that
203

203

00:11:21,420  -->  00:11:23,590
and you can see we've got
an equivalent result there
204

204

00:11:23,590  -->  00:11:25,920
using the listFiles method
205

205

00:11:25,920  -->  00:11:27,400
and you can see it's walked
through the tree there,
206

206

00:11:27,400  -->  00:11:29,440
but again it's only stuck
to the first-level entries.
207

207

00:11:29,440  -->  00:11:33,620
It doesn't walk the complete
subfolder tree as well.
208

208

00:11:33,620  -->  00:11:36,820
And the only real difference
there is the getName method.
209

209

00:11:36,820  -->  00:11:37,670
When we print the files,
210

210

00:11:37,670  -->  00:11:40,520
that returns the last
segment of the file path
211

211

00:11:40,520  -->  00:11:42,800
which in this case is the filename.
212

212

00:11:42,800  -->  00:11:43,920
Now, I discussed previously
213

213

00:11:43,920  -->  00:11:46,820
how to get a systems
root drive so file stores
214

214

00:11:46,820  -->  00:11:48,700
and how it can be problematic.
215

215

00:11:48,700  -->  00:11:50,990
You can actually use the
file.listRoots method
216

216

00:11:50,990  -->  00:11:53,480
to get the root but it
has the same problem
217

217

00:11:53,480  -->  00:11:56,310
as the fileSystem.getRootDirectories
method.
218

218

00:11:56,310  -->  00:11:58,150
So in other words, it lists drive letters
219

219

00:11:58,150  -->  00:12:01,050
for drives that actually aren't available.
220

220

00:12:01,050  -->  00:12:05,290
Now, there are many more java.io
versus java.nio operations,
221

221

00:12:05,290  -->  00:12:07,520
but the difference is how straightforward
222

222

00:12:07,520  -->  00:12:10,580
in that the method names
are usually a close match.
223

223

00:12:10,580  -->  00:12:12,850
You should now know enough
to be able to read code
224

224

00:12:12,850  -->  00:12:15,410
that accesses and modifies the file system
225

225

00:12:15,410  -->  00:12:18,890
using java.io and java.nio methods.
226

226

00:12:18,890  -->  00:12:21,880
So let's actually get to the io section.
227

227

00:12:21,880  -->  00:12:24,620
If you can take away only
one thing from this section,
228

228

00:12:24,620  -->  00:12:28,510
it's to use java.nio when
working with a file system.
229

229

00:12:28,510  -->  00:12:31,220
But when it comes to reading
and writing file contents,
230

230

00:12:31,220  -->  00:12:34,910
sometimes java.io streams
are the still better choice.
231

231

00:12:34,910  -->  00:12:36,180
You should really run benchmarks
232

232

00:12:36,180  -->  00:12:38,660
and decide what's best for
your application though,
233

233

00:12:38,660  -->  00:12:40,990
but my advice is to do as I mentioned,
234

234

00:12:40,990  -->  00:12:44,110
use java.nio when working
with a file system
235

235

00:12:44,110  -->  00:12:46,170
and when reading and
writing file contents.
236

236

00:12:46,170  -->  00:12:49,690
Often, the java.io streams
are the better choice.
237

237

00:12:49,690  -->  00:12:50,730
All right, so let's move on now
238

238

00:12:50,730  -->  00:12:53,210
to the next section in this course.
