WEBVTT
1
1

00:00:04.970  -->  00:00:08.930
ok so continuing on as I mentioned in
2

2

00:00:08.930  -->  00:00:10.670
the last video fortunately the debugger
3

3

00:00:10.670  -->  00:00:12.320
does allow us or provides us with
4

4

00:00:12.320  -->  00:00:14.960
otherwise to control the execution of
5

5

00:00:14.960  -->  00:00:16.700
the application so you don't actually
6

6

00:00:16.700  -->  00:00:18.500
have to add a breakpoint on each and
7

7

00:00:18.500  -->  00:00:21.100
every line we actually do so
8

8

00:00:21.100  -->  00:00:23.060
controlling this flow of execution
9

9

00:00:23.060  -->  00:00:26.150
by the buttons on the toolbar directly
10

10

00:00:26.150  -->  00:00:29.210
above the frames variables area down
11

11

00:00:29.210  -->  00:00:31.090
here next to the debugger and console
12

12

00:00:31.090  -->  00:00:33.580
tabs so let's go through what each of
13

13

00:00:33.580  -->  00:00:35.630
these buttons do one by one from left to
14

14

00:00:35.630  -->  00:00:37.490
right now for each button what we're
15

15

00:00:37.490  -->  00:00:38.450
going to do is I'm going to try the
16

16

00:00:38.450  -->  00:00:40.370
button out we're going to stop the
17

17

00:00:40.370  -->  00:00:42.320
application using the usual stop button
18

18

00:00:42.320  -->  00:00:44.750
and then run the debugger again so that
19

19

00:00:44.750  -->  00:00:46.640
the application was spend at the break
20

20

00:00:46.640  -->  00:00:49.520
point that started on so let's
21

21

00:00:49.520  -->  00:00:50.930
look at this first one which is the show
22

22

00:00:50.930  -->  00:00:52.670
execution point which is this one here
23

23

00:00:52.670  -->  00:00:55.100
and it's going to hover over it show
24

24

00:00:55.100  -->  00:00:56.750
execution points of actually tap this
25

25

00:00:56.750  -->  00:01:00.770
one so this returns the editor to where
26

26

00:01:00.770  -->  00:01:03.200
the application was suspended and it
27

27

00:01:03.200  -->  00:01:04.340
didn't really do much there because I
28

28

00:01:04.340  -->  00:01:06.470
was already actually on that line but if
29

29

00:01:06.470  -->  00:01:08.860
we flip back to the main dot java code
30

30

00:01:08.860  -->  00:01:11.270
for a moment let's presume that you're
31

31

00:01:11.270  -->  00:01:13.900
editing another file now come back over
32

32

00:01:13.900  -->  00:01:16.220
here again and click on this button you
33

33

00:01:16.220  -->  00:01:17.540
can see it's quite handy and actually
34

34

00:01:17.540  -->  00:01:20.570
takes us back to the current execution
35

35

00:01:20.570  -->  00:01:22.580
line so it's basically the line
36

36

00:01:22.580  -->  00:01:24.080
corresponding to the current breakpoint
37

37

00:01:24.080  -->  00:01:26.750
now this may seem trivial but when
38

38

00:01:26.750  -->  00:01:28.790
investigating a bug you may have
39

39

00:01:28.790  -->  00:01:30.560
actually opened up several different you
40

40

00:01:30.560  -->  00:01:32.600
know java source files while the
41

41

00:01:32.600  -->  00:01:34.900
application was suspended and saves
42

42

00:01:34.900  -->  00:01:36.110
you from having to flip back through all
43

43

00:01:36.110  -->  00:01:38.180
them to find the current execution
44

44

00:01:38.180  -->  00:01:39.680
points just really a shortcut to get
45

45

00:01:39.680  -->  00:01:42.790
back to where that break point is the
46

46

00:01:42.790  -->  00:01:45.140
next one is now the step
47

47

00:01:45.140  -->  00:01:47.960
over this button will advance the
48

48

00:01:47.960  -->  00:01:50.510
execution point by one statement and
49

49

00:01:50.510  -->  00:01:51.470
won't show us
50

50

00:01:51.470  -->  00:01:53.420
what's happening inside any methods
51

51

00:01:53.420  -->  00:01:55.250
called by the statement i'm going to
52

52

00:01:55.250  -->  00:01:59.470
close this and run it again debug
53

53

00:01:59.470  -->  00:02:01.930
remember not normal run need to
54

54

00:02:01.930  -->  00:02:03.140
go back to main is probably quicker to
55

55

00:02:03.140  -->  00:02:04.790
do this here if that's the case click on
56

56

00:02:04.790  -->  00:02:08.960
debug can see that's the current line so come
57

57

00:02:08.960  -->  00:02:11.530
over here and look at this step over and
58

58

00:02:11.530  -->  00:02:14.510
come down here and click that you notice
59

59

00:02:14.510  -->  00:02:16.220
that we've moved on to the next line we
60

60

00:02:16.220  -->  00:02:19.580
move onto line 12 now so the application
61

61

00:02:19.580  -->  00:02:20.990
with that one line of
62

62

00:02:20.990  -->  00:02:22.250
code that code on line 11 got
63

63

00:02:22.250  -->  00:02:24.590
executed and then we skipped
64

64

00:02:24.590  -->  00:02:27.200
over to the next line onto line 12 and
65

65

00:02:27.200  -->  00:02:29.150
the application got suspended again
66

66

00:02:29.150  -->  00:02:31.090
alright so we'll take a look at the
67

67

00:02:31.090  -->  00:02:33.310
state later let's actually try it the
68

68

00:02:33.310  -->  00:02:34.760
other buttons first and remembering
69

69

00:02:34.760  -->  00:02:38.420
that each time we do this we close down
70

70

00:02:38.420  -->  00:02:41.590
the app and run it again or debugger
71

71

00:02:41.590  -->  00:02:44.300
I should say to be more precise this time
72

72

00:02:44.300  -->  00:02:45.530
going over to this next one this is
73

73

00:02:45.530  -->  00:02:48.440
different to step over this is step into
74

74

00:02:48.440  -->  00:02:51.730
so this step into button will actually
75

75

00:02:51.730  -->  00:02:54.590
step into any methods called by the next
76

76

00:02:54.590  -->  00:02:57.260
statement that's executed so the
77

77

00:02:57.260  -->  00:02:58.970
application will suspend on the first
78

78

00:02:58.970  -->  00:03:02.900
line of the first called method now we use
79

79

00:03:02.900  -->  00:03:05.450
the previous one the step-over we don't
80

80

00:03:05.450  -->  00:03:06.800
care about what's happening in any
81

81

00:03:06.800  -->  00:03:10.220
method called by our code but we use step
82

82

00:03:10.220  -->  00:03:12.500
into when we want to actually see what's
83

83

00:03:12.500  -->  00:03:14.540
happening inside that method any method
84

84

00:03:14.540  -->  00:03:16.970
is called by a code lets actually press
85

85

00:03:16.970  -->  00:03:20.560
this step into button in this case we
86

86

00:03:20.560  -->  00:03:22.480
can see that the debugger didn't step
87

87

00:03:22.480  -->  00:03:25.220
into the append method so behave much the same
88

88

00:03:25.220  -->  00:03:27.800
as if we press the step-over button but
89

89

00:03:27.800  -->  00:03:29.060
this actually happened because the
90

90

00:03:29.060  -->  00:03:31.670
stringbuilder . append method is a method of
91

91

00:03:31.670  -->  00:03:34.060
the java development kit so many
92

92

00:03:34.060  -->  00:03:35.690
debuggers including the IntelliJ
93

93

00:03:35.690  -->  00:03:38.560
debugger won't suspend within jdk
94

94

00:03:38.560  -->  00:03:41.000
methods because they assume that developers
95

95

00:03:41.000  -->  00:03:42.920
aren't interested in seeing what's
96

96

00:03:42.920  -->  00:03:45.200
happening inside those methods the jdk
97

97

00:03:45.200  -->  00:03:47.480
isn't bug-free but most of the time it
98

98

00:03:47.480  -->  00:03:49.580
won't be the source of a bug the
99

99

00:03:49.580  -->  00:03:51.760
situation could also arise when we're
100

100

00:03:51.760  -->  00:03:54.470
dealing with third-party libraries now
101

101

00:03:54.470  -->  00:03:56.120
if you want the debugger to spend within a
102

102

00:03:56.120  -->  00:03:58.340
jdk method or another method
103

103

00:03:58.340  -->  00:04:00.530
that normally it would skip over we have
104

104

00:04:00.530  -->  00:04:02.420
to use the four step into button which
105

105

00:04:02.420  -->  00:04:05.420
is next one now this button will force
106

106

00:04:05.420  -->  00:04:08.060
the debugger to step into a jdk method
107

107

00:04:08.060  -->  00:04:10.810
and suspend so lets actually see how that
108

108

00:04:10.810  -->  00:04:12.530
works i'm going to stop the program and
109

109

00:04:12.530  -->  00:04:14.650
then we're going to debug it again
110

110

00:04:14.650  -->  00:04:18.470
starting it debug icon so this time
111

111

00:04:18.470  -->  00:04:20.060
we're going to click on the force into
112

112

00:04:20.060  -->  00:04:24.010
force step into click on that you can see here
113

113

00:04:24.010  -->  00:04:26.180
that now we've used force step into you
114

114

00:04:26.180  -->  00:04:27.440
can see that this time the debugger
115

115

00:04:27.440  -->  00:04:29.510
steps into the append method we can
116

116

00:04:29.510  -->  00:04:31.400
actually see the jdk method
117

117

00:04:31.400  -->  00:04:33.220
for the append from the stringbuilder class
118

118

00:04:33.220  -->  00:04:34.790
the code that is going to be executed
119

119

00:04:34.790  -->  00:04:38.380
and use the step out button when you
120

120

00:04:38.380  -->  00:04:40.070
want to debugger to read to run the
121

121

00:04:40.070  -->  00:04:42.190
rest of the method return to the caller
122

122

00:04:42.190  -->  00:04:45.220
and suspend so moving on now to the next
123

123

00:04:45.220  -->  00:04:48.110
button to step out now we use the step
124

124

00:04:48.110  -->  00:04:50.060
out button when we want to debugger to
125

125

00:04:50.060  -->  00:04:52.280
run the rest of the method to return to
126

126

00:04:52.280  -->  00:04:55.190
the caller and then suspend so when we try
127

127

00:04:55.190  -->  00:04:57.050
this now I haven't restarted this time
128

128

00:04:57.050  -->  00:04:59.180
we click on that
129

129

00:04:59.180  -->  00:05:01.630
notice what happens its gone back to the
130

130

00:05:01.630  -->  00:05:03.380
line where we originally got called from the
131

131

00:05:03.380  -->  00:05:04.630
add char method from the string
132

132

00:05:04.630  -->  00:05:07.310
utilities now this is a case which i
133

133

00:05:07.310  -->  00:05:09.320
mentioned in the previous video where
134

134

00:05:09.320  -->  00:05:11.150
the highlighted line of code has been
135

135

00:05:11.150  -->  00:05:13.660
executed so there's a scenario here
136

136

00:05:13.660  -->  00:05:15.410
where it looks like the debugger may or
137

137

00:05:15.410  -->  00:05:17.030
may not have executed in this case we
138

138

00:05:17.030  -->  00:05:19.400
have executed because we use the Force
139

139

00:05:19.400  -->  00:05:21.970
step into to go into the method then we
140

140

00:05:21.970  -->  00:05:24.410
use the step out to come back to this
141

141

00:05:24.410  -->  00:05:26.380
method so this point in time the dot
142

142

00:05:26.380  -->  00:05:28.460
append has been processed we called
143

143

00:05:28.460  -->  00:05:30.190
alright so moving over to the next one
144

144

00:05:30.190  -->  00:05:33.830
this is the drop frame now the drop
145

145

00:05:33.830  -->  00:05:35.150
frame button allows us to effectively
146

146

00:05:35.150  -->  00:05:38.360
time travel into the past and what I
147

147

00:05:38.360  -->  00:05:40.010
mean by that is it lets just rewind the
148

148

00:05:40.010  -->  00:05:43.880
application by one frame now if we were
149

149

00:05:43.880  -->  00:05:45.940
to rewind the frame here we actually
150

150

00:05:45.940  -->  00:05:48.470
jump back to the main method as if the
151

151

00:05:48.470  -->  00:05:51.020
add char method had never been called the
152

152

00:05:51.020  -->  00:05:53.090
application would be suspended on the
153

153

00:05:53.090  -->  00:05:55.010
line that called the method but an
154

154

00:05:55.010  -->  00:05:56.720
important note here is we can't rewind
155

155

00:05:56.720  -->  00:05:58.940
everything in for example network
156

156

00:05:58.940  -->  00:06:01.610
traffic database changes and changes to
157

157

00:06:01.610  -->  00:06:03.830
static and instance variables won't be
158

158

00:06:03.830  -->  00:06:06.910
undone only changes to local variables
159

159

00:06:06.910  -->  00:06:10.280
will be reverted so some developers use
160

160

00:06:10.280  -->  00:06:12.440
it to try out different code paths
161

161

00:06:12.440  -->  00:06:13.550
without having to restart the
162

162

00:06:13.550  -->  00:06:16.090
application but to be honest most of us
163

163

00:06:16.090  -->  00:06:17.840
will probably never use it will give it
164

164

00:06:17.840  -->  00:06:20.780
a try just to confirm and you can see
165

165

00:06:20.780  -->  00:06:22.400
that we've moved back to the main method
166

166

00:06:22.400  -->  00:06:24.940
at this point in time and suspended
167

167

00:06:24.940  -->  00:06:27.680
before the highlighted line of code is executed
168

168

00:06:27.680  -->  00:06:30.860
again we could confirm that by stepping
169

169

00:06:30.860  -->  00:06:34.220
step over and gone back into the method
170

170

00:06:34.220  -->  00:06:36.970
again in back to drop frame again and
171

171

00:06:36.970  -->  00:06:38.870
we're back to the main method
172

172

00:06:38.870  -->  00:06:41.270
alright so finally this is last one over
173

173

00:06:41.270  -->  00:06:44.410
here which is run to cursor let's say
174

174

00:06:44.410  -->  00:06:45.050
we've got a method
175

175

00:06:45.050  -->  00:06:47.210
that's say a hundred lines long and we
176

176

00:06:47.210  -->  00:06:49.660
suspended on line twenty we want to run
177

177

00:06:49.660  -->  00:06:51.910
to line 55 and then suspended again
178

178

00:06:51.910  -->  00:06:55.970
we could set a break point online 55 but
179

179

00:06:55.970  -->  00:06:57.280
setting a lot of breakpoints can make
180

180

00:06:57.280  -->  00:06:58.780
future debugging session a bit of a
181

181

00:06:58.780  -->  00:07:01.060
pain and also if you forget to remove
182

182

00:07:01.060  -->  00:07:03.220
them the application will suspend in
183

183

00:07:03.220  -->  00:07:05.840
places we weren't expecting so unless we
184

184

00:07:05.840  -->  00:07:07.900
actually think we going to want to suspend
185

185

00:07:07.900  -->  00:07:10.370
om that line 55 again it would be better to
186

186

00:07:10.370  -->  00:07:13.370
put our cursor on line 55 and use run to
187

187

00:07:13.370  -->  00:07:16.400
cursor the application will run and when
188

188

00:07:16.400  -->  00:07:17.810
it reaches the line where the cursor is
189

189

00:07:17.810  -->  00:07:20.990
located it will actually suspend lets
190

190

00:07:20.990  -->  00:07:23.210
actually put our cursor what we do is
191

191

00:07:23.210  -->  00:07:28.310
we stop and we'll run it again debug it
192

192

00:07:28.310  -->  00:07:31.550
again let's put our cursor now on the
193

193

00:07:31.550  -->  00:07:35.150
chars added plus plus line down here
194

194

00:07:35.150  -->  00:07:37.780
come over here and click on the run to run to
195

195

00:07:37.780  -->  00:07:40.720
cursor the application is now suspended
196

196

00:07:40.720  -->  00:07:43.960
on that line those buttons are quite
197

197

00:07:43.960  -->  00:07:45.620
convenient but if you prefer to use
198

198

00:07:45.620  -->  00:07:47.620
menus we do all of this from the main
199

199

00:07:47.620  -->  00:07:50.840
menu come up into the run run menu as
200

200

00:07:50.840  -->  00:07:52.840
you can see here we've got step over for
201

201

00:07:52.840  -->  00:07:55.690
step in to step into force step theirs
202

202

00:07:55.690  -->  00:07:58.270
a couple of other ones their as well you can
203

203

00:07:58.270  -->  00:07:59.590
see that pretty much all there as well
204

204

00:07:59.590  -->  00:08:02.060
as resuming the program as well but
205

205

00:08:02.060  -->  00:08:03.110
we talking more about some of these
206

206

00:08:03.110  -->  00:08:04.150
options shortly
207

207

00:08:04.150  -->  00:08:06.770
now what do we do though if we suspended
208

208

00:08:06.770  -->  00:08:09.500
and we found the bug so we don't want to
209

209

00:08:09.500  -->  00:08:12.400
step over or into or out
210

210

00:08:12.400  -->  00:08:13.660
we just want to get out of the debugger
211

211

00:08:13.660  -->  00:08:15.860
so you can just stop the debug session
212

212

00:08:15.860  -->  00:08:17.770
as we've been doing but it's not always
213

213

00:08:17.770  -->  00:08:20.410
a good idea now for our little application
214

214

00:08:20.410  -->  00:08:22.030
is fine but for an application that's
215

215

00:08:22.030  -->  00:08:24.080
perhaps connected to a database or
216

216

00:08:24.080  -->  00:08:26.530
that's opened up a network connection or
217

217

00:08:26.530  -->  00:08:28.030
has any type of cleanup that it needs to
218

218

00:08:28.030  -->  00:08:30.160
do is better to run the application to
219

219

00:08:30.160  -->  00:08:32.470
completion and we do that by pressing on
220

220

00:08:32.470  -->  00:08:34.520
the resume button to the left of the
221

221

00:08:34.520  -->  00:08:37.640
frames area down here resume program
222

222

00:08:37.640  -->  00:08:39.400
will actually run it through to the end
223

223

00:08:39.400  -->  00:08:41.950
as long as there's no other breakpoints
224

224

00:08:41.950  -->  00:08:43.390
that program will run it complete
225

225

00:08:43.390  -->  00:08:45.740
and again the case over here there's
226

226

00:08:45.740  -->  00:08:47.950
also the resume program as well and you
227

227

00:08:47.950  -->  00:08:50.020
can see there's a shortcut down on the
228

228

00:08:50.020  -->  00:08:54.890
mac at least command option r so again
229

229

00:08:54.890  -->  00:08:56.810
there's no the breakpoint breakpoints
230

230

00:08:56.810  -->  00:08:58.420
clicking on this resume
231

231

00:08:58.420  -->  00:09:00.070
will actually run the program
232

232

00:09:00.070  -->  00:09:02.200
in complete and if we've set other break
233

233

00:09:02.200  -->  00:09:03.970
points though the application might
234

234

00:09:03.970  -->  00:09:05.950
suspend again and that's why it's good
235

235

00:09:05.950  -->  00:09:07.830
to keep break points to a minimum and
236

236

00:09:07.830  -->  00:09:11.200
use run to cursor in most cases it can
237

237

00:09:11.200  -->  00:09:13.600
be easy to accidentally press the run
238

238

00:09:13.600  -->  00:09:15.040
program button when we want to resume
239

239

00:09:15.040  -->  00:09:17.130
the program now doing so runs an
240

240

00:09:17.130  -->  00:09:18.490
entirely different instance of the
241

241

00:09:18.490  -->  00:09:20.640
application so we can get back to the
242

242

00:09:20.640  -->  00:09:24.310
debugger by clicking on down here which
243

243

00:09:24.310  -->  00:09:26.070
of course is just above the status bar
244

244

00:09:26.070  -->  00:09:28.630
on the ides main window so if you
245

245

00:09:28.630  -->  00:09:29.740
accidentally run it again you'll be
246

246

00:09:29.740  -->  00:09:31.720
over here and you come back and click on
247

247

00:09:31.720  -->  00:09:34.750
debug to get back to the debugger now if
248

248

00:09:34.750  -->  00:09:35.880
you're finding that you've got a
249

249

00:09:35.880  -->  00:09:37.770
lot of breakpoints and you want to get
250

250

00:09:37.770  -->  00:09:40.000
rid of some of them there's a way to see
251

251

00:09:40.000  -->  00:09:42.790
all breakpoints in our application we
252

252

00:09:42.790  -->  00:09:45.100
actually go up here to the run
253

253

00:09:45.100  -->  00:09:47.700
menu and click on View break points
254

254

00:09:47.700  -->  00:09:51.550
down here you can see that this dialogue
255

255

00:09:51.550  -->  00:09:53.860
opened and shows all the current
256

256

00:09:53.860  -->  00:09:56.760
breakpoints and in the case of
257

257

00:09:56.760  -->  00:09:59.170
intellij if you got it configured for other
258

258

00:09:59.170  -->  00:10:00.510
languages we're going to be seeing some
259

259

00:10:00.510  -->  00:10:02.350
of the other languages python
260

260

00:10:02.350  -->  00:10:05.170
exception and so on and so forth but
261

261

00:10:05.170  -->  00:10:06.250
right at the moment we can see that
262

262

00:10:06.250  -->  00:10:07.480
we've got a break point on string
263

263

00:10:07.480  -->  00:10:10.510
utilities java line 11 that's consistent
264

264

00:10:10.510  -->  00:10:12.430
with the breakpoint that we've got there
265

265

00:10:12.430  -->  00:10:15.330
showing online 11 so from this screen
266

266

00:10:15.330  -->  00:10:16.690
now the point that I wanted to show you
267

267

00:10:16.690  -->  00:10:18.760
what you can remove any breakpoints by
268

268

00:10:18.760  -->  00:10:22.390
checking the box next to them you can
269

269

00:10:22.390  -->  00:10:24.760
also add break points but only certain
270

270

00:10:24.760  -->  00:10:26.800
types of breakpoints because we really
271

271

00:10:26.800  -->  00:10:28.240
have to be able to specify where the
272

272

00:10:28.240  -->  00:10:30.370
break point should go so we can't set
273

273

00:10:30.370  -->  00:10:31.950
breakpoints on statements within a
274

274

00:10:31.950  -->  00:10:34.180
method using the dialogue so let's
275

275

00:10:34.180  -->  00:10:36.370
actually close that now without changing
276

276

00:10:36.370  -->  00:10:38.380
anything so i click that but i clicked
277

277

00:10:38.380  -->  00:10:39.550
again to leave it on
278

278

00:10:39.550  -->  00:10:42.220
click on done but note that we can also
279

279

00:10:42.220  -->  00:10:44.290
get to the view breakpoints dialogue
280

280

00:10:44.290  -->  00:10:47.860
that's this little button over here and
281

281

00:10:47.860  -->  00:10:49.480
click on that opens up the same dialogue
282

282

00:10:49.480  -->  00:10:52.660
and just wanted to re affirm them come up
283

283

00:10:52.660  -->  00:10:57.010
here you click on rerun it can be
284

284

00:10:57.010  -->  00:10:59.050
actually easy to do that because it's
285

285

00:10:59.050  -->  00:11:00.730
actually very similar to a very close to
286

286

00:11:00.730  -->  00:11:03.190
the resume program so keep that in mind
287

287

00:11:03.190  -->  00:11:04.720
that can be common problem by clicking
288

288

00:11:04.720  -->  00:11:07.120
debug will take you back to that screen
289

289

00:11:07.120  -->  00:11:09.690
if appropriate
290

290

00:11:09.690  -->  00:11:11.800
alright so let's end the video here now
291

291

00:11:11.800  -->  00:11:13.240
in the next video we're going to go
292

292

00:11:13.240  -->  00:11:14.740
through a little bit more and start
293

293

00:11:14.740  -->  00:11:16.120
using some of these things that we've
294

294

00:11:16.120  -->  00:11:18.100
learned to debug this app and see if we
295

295

00:11:18.100  -->  00:11:20.260
can fix the problem that has been introduced
296

296

00:11:20.260  -->  00:11:21.940
into the code so i'll see you in the
297

297

00:11:21.940  -->  00:11:27.420
next video
