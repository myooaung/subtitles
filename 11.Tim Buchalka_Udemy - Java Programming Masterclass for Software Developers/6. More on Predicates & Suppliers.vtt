WEBVTT
1
1

00:00:04.960  -->  00:00:10.810
alright so we created the predicates to
call the print employees by age method in
2

2

00:00:10.810  -->  00:00:18.210
the last video lets just run this to see
that it does actually work and you can
3

3

00:00:18.210  -->  00:00:21.730
see we have successfully got to both
methods working now both the employees
4

4

00:00:21.730  -->  00:00:27.910
over 30 and also the ones 13-under so as
you can see the predicate arguments are
5

5

00:00:27.910  -->  00:00:32.820
just lambda expressions that match the
predicate interface the accept one parameter
6

6

00:00:32.820  -->  00:00:37.620
and return a boolean value and I would
hope that this point you think that this is
7

7

00:00:37.620  -->  00:00:41.460
actually quite powerful because we can
pass all sorts of conditions to the
8

8

00:00:41.460  -->  00:00:44.980
method and we don't have to write a
different if condition to filter the
9

9

00:00:44.980  -->  00:00:49.420
employees based on different age
criteria all we need a new lambda expression
10

10

00:00:49.420  -->  00:00:54.870
that can map to the predicate interface
now I mentioned in a previous video in
11

11

00:00:54.870  -->  00:00:59.370
this section that we don't have to use
lambda expressions we can always use an
12

12

00:00:59.370  -->  00:01:03.900
anonymous class and that's also true in
this case we can pass an anonymous
13

13

00:01:03.900  -->  00:01:08.230
predicate to the method let's do it that
way to print all employees that are younger
14

14

00:01:08.230  -->  00:01:12.750
than 25 let's add this code to the
main method below the other calls that
15

15

00:01:12.750  -->  00:01:20.110
we've added to the print employees by
age method so do....
16

16

00:01:20.110  -->  00:01:27.930
....
17

17

00:01:27.930  -->  00:01:34.090
.....and I've got the option by
18

18

00:01:34.090  -->  00:01:38.560
IntelliJ so if I press enter it will create
the anonymous class for us
19

19

00:01:39.570  -->  00:01:44.710
like so and notice how it's already
overridden the boolean test so we all need
20

20

00:01:44.710  -->  00:01:50.020
to do there is return an expression
and expression obviously need to return
21

21

00:01:50.020  -->  00:01:53.500
true for whatever condition we want to
so in this case we're going to return
22

22

00:01:53.500  -->  00:02:01.000
employee.....
23

23

00:02:01.000  -->  00:02:05.100
....and if
we run this
24

24

00:02:10.110  -->  00:02:15.060
you can see employees younger than
25 tim buchalka 21 he wishes and
25

25

00:02:15.060  -->  00:02:16.860
also Snow White who was 22
26

26

00:02:16.860  -->  00:02:21.390
so that's obviously working as well so
yes we can use an anonymous class here
27

27

00:02:21.390  -->  00:02:26.760
but when working with interfaces in the
java.util.function package it is
28

28

00:02:26.760  -->  00:02:31.050
more common and I think personally more
convenient to use lambdas but if you're
29

29

00:02:31.050  -->  00:02:34.920
reading code that someone else's written
then that's what you see but if you
30

30

00:02:34.920  -->  00:02:39.270
really don't want to use lambdas
it is possible to do everything by using
31

31

00:02:39.270  -->  00:02:44.250
anonymous classes like I've
shown you there now the consumer and
32

32

00:02:44.250  -->  00:02:48.780
predicate interfaces are general
interfaces don't care about the type of
33

33

00:02:48.780  -->  00:02:53.790
parameter being passed to the lambda
expression using generic to infer the
34

34

00:02:53.790  -->  00:02:58.830
type now there are other consumer
and predicate interfaces that expect a
35

35

00:02:58.830  -->  00:03:04.470
specific type of parameter for example
the double consumer expects a lambda
36

36

00:03:04.470  -->  00:03:09.180
expression that has a double argument
now there's also an int consumer and
37

37

00:03:09.180  -->  00:03:13.260
a long consumer in addition to
predicate there's also double predicate
38

38

00:03:13.260  -->  00:03:18.480
int predicate and long predicate where
possible you probably should use the
39

39

00:03:18.480  -->  00:03:23.510
more specific type of lambda to improve
readability so it just in line with that
40

40

00:03:23.510  -->  00:03:27.840
let's add an int predicate to the main
method that actually tests whether an
41

41

00:03:27.840  -->  00:03:38.700
integer is greater than 15 so we can do
that by typing....
42

42

00:03:38.700  -->  00:03:49.730
....so right now the int predicate
43

43

00:03:49.730  -->  00:03:53.070
doesn't do anything just like an
anonymous class instance that we
44

44

00:03:53.070  -->  00:03:57.290
assigned to a variable we have to
actually use somewhere so let's print out
45

45

00:03:57.290  -->  00:04:01.530
the value of the predicate for the value
10 now remember that we have to call the
46

46

00:04:01.530  -->  00:04:06.200
method that the lambda maps to which is
test in this case the value we are going to
47

47

00:04:06.200  -->  00:04:10.860
pass is 10 so let's just try that....
48

48

00:04:10.860  -->  00:04:17.040
....
49

49

00:04:17.040  -->  00:04:20.190
...if we run it
50

50

00:04:21.200  -->  00:04:28.470
because of course 10 isn't greater than
15 you can see we get false printed to the console
51

51

00:04:28.470  -->  00:04:32.780
and we can pass any integer value to
test including a mathematical expression
52

52

00:04:32.780  -->  00:04:38.630
that returns and int an int variable or
method that returns and int so let's use
53

53

00:04:38.630  -->  00:04:44.190
the result of say variable and adding
some number to it just confirm this
54

54

00:04:44.190  -->  00:04:51.180
actually works the way we think it does
down here will put something like....
55

55

00:04:51.180  -->  00:05:03.270
....
56

56

00:05:03.270  -->  00:05:07.620
.....you can see true is printed out
57

57

00:05:07.620  -->  00:05:13.130
to the console so this shows us that we can
reuse predicates in this way and now
58

58

00:05:13.130  -->  00:05:17.310
another cool thing about predicates is
that we can chain them together for
59

59

00:05:17.310  -->  00:05:21.870
example let's just say we wanted to test
whether a number is greater than 15 and
60

60

00:05:21.870  -->  00:05:25.770
less than a 100 now we could update
our existing predicate to include the
61

61

00:05:25.770  -->  00:05:27.150
second part of the condition
62

62

00:05:27.150  -->  00:05:30.690
let's just say we don't want to do that
because we want to use our existing
63

63

00:05:30.690  -->  00:05:35.610
predicate perhaps elsewhere what we do
in that scenario is create a second
64

64

00:05:35.610  -->  00:05:40.250
predicate and chain it to the first one
so first we'll change the name of
65

65

00:05:40.250  -->  00:05:44.720
it into something more descriptive and
let's use some refactoring to rename
66

66

00:05:44.720  -->  00:05:51.470
that so going to right click here
and do a refactor rename and we'll
67

67

00:05:51.470  -->  00:05:59.130
call something more descriptive let's just
call it greater than 50....
68

68

00:05:59.130  -->  00:06:00.570
....
69

69

00:06:00.570  -->  00:06:05.690
press ENTER now lets then create a
second int predicate and that's
70

70

00:06:05.690  -->  00:06:10.080
going to test whether an integers less than
a hundred i'm going to type....
71

71

00:06:10.080  -->  00:06:19.650
...
72

72

00:06:19.650  -->  00:06:26.630
....and we will print out the results
73

73

00:06:26.630  -->  00:06:47.560
....
74

74

00:06:47.560  -->  00:06:55.000
...let run that and you can see we've got a true in that
last scenario and the 3 is that the
75

75

00:06:55.000  -->  00:07:00.790
number 50 is greater than 15 but less
than 100 and incidentally the test
76

76

00:07:00.790  -->  00:07:05.680
method will return true if both predicates
return true when evaluated and false if
77

77

00:07:05.680  -->  00:07:10.900
one other predicates returns false if we
do that again in another scenario lets
78

78

00:07:10.900  -->  00:07:17.160
just add another line there where we know we want
it to fail so say 15 is going to cause
79

79

00:07:17.160  -->  00:07:20.470
obviously greater than 50 to be false
but the less than a hundred will still
80

80

00:07:20.470  -->  00:07:25.450
be true we run that we should get a
false because one of the predicates is now
81

81

00:07:25.450  -->  00:07:29.950
false you can see on the bottom we've
got false showing now you'll notice that
82

82

00:07:29.950  -->  00:07:34.540
both our predicates use i as the
parameter now remember that each lambda
83

83

00:07:34.540  -->  00:07:38.740
expression is like a nested block so
imagine each line of code surrounded by
84

84

00:07:38.740  -->  00:07:42.790
curly braces so again the the actual
scoping that's working in this scenario
85

85

00:07:42.790  -->  00:07:45.790
for lambda expressions is something like
this
86

86

00:07:49.470  -->  00:07:56.560
....
87

87

00:07:56.560  -->  00:08:03.910
.....
88

88

00:08:03.910  -->  00:08:07.900
so that's essentially what's happening here
in other words each variable is within
89

89

00:08:07.900  -->  00:08:12.430
the scope of a single lambda and that's
why it's ok to use the same name here
90

90

00:08:12.430  -->  00:08:17.740
now whether that's good for code readability
of course is a different question now
91

91

00:08:17.740  -->  00:08:24.280
the predicate interface also contains
or negate and is equals methods the
92

92

00:08:24.280  -->  00:08:28.300
more specific predicate interfaces
contain or and negate but they don't
93

93

00:08:28.300  -->  00:08:34.900
contain is equals and they don't extend
predicate the and/or and negate methods
94

94

00:08:34.900  -->  00:08:40.710
can be chained together this chaining is useful if there's a
95

95

00:08:40.710  -->  00:08:44.620
situation where we need to build a
condition on the fly or when we want to
96

96

00:08:44.620  -->  00:08:47.670
reuse some predicates in different areas
of application
97

97

00:08:47.670  -->  00:08:52.520
so next we're going to take a look at
the supplier interface now a supplier
98

98

00:08:52.520  -->  00:08:55.560
doesn't accept any arguments and it does
return a value
99

99

00:08:56.570  -->  00:09:00.540
let's look at an example lets just assume that we want to print out 10
100

100

00:09:00.540  -->  00:09:05.130
random numbers so I'm going to just
delete this scoping code that i added
101

101

00:09:05.130  -->  00:09:14.010
alright so going to delete that code
lets just come up with a
102

102

00:09:14.010  -->  00:09:17.910
scenario where we want to print 10
random numbers the first draft we could
103

103

00:09:17.910  -->  00:09:26.490
do something like....
104

104

00:09:26.490  -->  00:09:35.730
....
105

105

00:09:35.730  -->  00:09:43.070
and if you run that we should see 10
integers showing there you go 10
106

106

00:09:43.070  -->  00:09:49.260
integers showing on the screen and
obviously if we wanted a smaller subset of
107

107

00:09:49.260  -->  00:09:54.360
numbers we could put pass a parameter
to say to use the range 0 to 99 and
108

108

00:09:54.360  -->  00:10:00.020
run that again and we only get numbers within
that range that's working
109

109

00:10:01.190  -->  00:10:07.230
let's change the code to use a supplier
instead now because the supplier
110

110

00:10:07.230  -->  00:10:11.760
always returns a value we have to
include the expected return type when we
111

111

00:10:11.760  -->  00:10:12.720
declare it
112

112

00:10:12.720  -->  00:10:17.010
we're going to use the get method to get
an object from the supplier so the
113

113

00:10:17.010  -->  00:10:21.870
revised code would be the first line will be the same but the line after the
114

114

00:10:21.870  -->  00:10:28.560
random we are going to put supplier the type is
going to be integer....
115

115

00:10:28.560  -->  00:10:36.870
....
116

116

00:10:36.870  -->  00:10:41.220
.....
117

117

00:10:41.220  -->  00:10:56.940
....
118

118

00:10:56.940  -->  00:11:01.200
so if we run that you should find that we
still get 10 integers just like
119

119

00:11:01.200  -->  00:11:07.140
we did with the previous code and there
our 10 integers now notice the empty argument
120

120

00:11:07.140  -->  00:11:10.770
list here that doesn't look at all
interesting and just as with other
121

121

00:11:10.770  -->  00:11:15.570
lambda expressions we can pass suppliers
to methods so you could have a situation
122

122

00:11:15.570  -->  00:11:20.100
where sometimes you want to supply an
object of type a and other times an
123

123

00:11:20.100  -->  00:11:26.100
object of type b where b is a subclass
of a or perhaps we may have a case
124

124

00:11:26.100  -->  00:11:32.520
for a supplier is providing an i/o stream was used as a counter so we
125

125

00:11:32.520  -->  00:11:37.260
can also use suppliers when testing an
application a supplier could instantiate
126

126

00:11:37.260  -->  00:11:41.970
objects and perhaps populate them with
random values so just as with predicates
127

127

00:11:41.970  -->  00:11:46.830
there's more specific flavors of
suppliers as a boolean supplier a double
128

128

00:11:46.830  -->  00:11:52.230
supplier int supplier as well as a long
supplier i'm going to finish the video
129

129

00:11:52.230  -->  00:11:56.580
here now in the next video we're going
to continue on and we're going to start
130

130

00:11:56.580  -->  00:12:01.650
looking at a function lambda which uses
the function interface to call
131

131

00:12:01.650  -->  00:12:03.000
lambdas is in a different way
132

132

00:12:03.000  -->  00:12:04.890
let's work on that in the next video
