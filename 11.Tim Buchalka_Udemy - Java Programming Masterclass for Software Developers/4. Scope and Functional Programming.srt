1
1

00:00:05,000  -->  00:00:08,960
alright so in the last video we saw that
lambda expressions are treated like
2

2

00:00:08,960  -->  00:00:14,480
nested blocks so there within the
enclosing block scope so what that
3

3

00:00:14,480  -->  00:00:19,190
should mean is that were able to use the
local variable i so lets print its
4

4

00:00:19,190  -->  00:00:22,550
value to the console from within the
lambda just to see that this is the
5

5

00:00:22,550  -->  00:00:31,580
case going to put something just below
the first lines output and do....
6

6

00:00:31,580  -->  00:00:44,140
....and if we run this so you can see
7

7

00:00:44,140  -->  00:00:49,120
that the code works fine so currently
i isn't declared as final as you can
8

8

00:00:49,120  -->  00:00:53,930
see on line 100 let's actually go ahead
and change its value to see what happens
9

9

00:00:56,890  -->  00:01:05,210
....run it again though the moment we do so
IntelliJ complains about the use of
10

10

00:01:05,210  -->  00:01:10,180
I within the lambda expression in any
local variable we want to use from the
11

11

00:01:10,180  -->  00:01:15,920
enclosing block has to be effectively
final for the same reason that local
12

12

00:01:15,920  -->  00:01:19,820
variables have to be declared final if
we want to use them within an anonymous
13

13

00:01:19,820  -->  00:01:25,400
classes code by effectively final I mean
that the variable has to be either declared
14

14

00:01:25,400  -->  00:01:28,540
final or it's value must never change
15

15

00:01:28,540  -->  00:01:33,680
alright so what about variables that we
defined inside the lambda expression
16

16

00:01:33,680  -->  00:01:38,150
now the parameters are in an
example of this do you think we can use
17

17

00:01:38,150  -->  00:01:43,360
s 1 and s 2 outside the lambda in
the enclosing block let's actually try
18

18

00:01:43,360  -->  00:01:44,000
that
19

19

00:01:44,000  -->  00:01:49,900
so outside of the lambda clock go down here we
put something like....
20

20

00:01:50,450  -->  00:01:56,110
and no we can't do this you can see
IntelliJ complaining so when working
21

21

00:01:56,110  -->  00:02:01,460
with lambda is just imagine the code is
enclosed within curly braces and just to
22

22

00:02:01,460  -->  00:02:05,110
be clear I'm going to just type a bit of
code to show you what the scoping would
23

23

00:02:05,110  -->  00:02:10,460
be and I was going to remove these other
things that were causing errors so
24

24

00:02:10,460  -->  00:02:13,090
just imagine that this is what's
actually going on so I would start with
25

25

00:02:13,090  -->  00:02:14,170
something like
26

26

00:02:14,170  -->  00:02:27,730
....
27

27

00:02:27,730  -->  00:02:34,180
alright so within the code block string....
28

28

00:02:34,180  -->  00:02:42,250
....
29

29

00:02:42,250  -->  00:02:48,310
....so we're working with lambdas just
imagine the code is something similar to
30

30

00:02:48,310  -->  00:02:55,090
this and make that i and j their that's
essentially the scoping now this isn't
31

31

00:02:55,090  -->  00:03:00,400
entirely accurate the two parameters aren't local variables and we don't want to
32

32

00:03:00,400  -->  00:03:04,540
return from the entire method the return
statement is returning a result of the
33

33

00:03:04,540  -->  00:03:09,250
lambda expression but seeing the lambda
this way helps us with scope i think it's
34

34

00:03:09,250  -->  00:03:13,420
clear that s one and s two won't be
available to the code outside the lambda
35

35

00:03:13,420  -->  00:03:17,790
block so when working with lambdas
if we want to use the local
36

36

00:03:17,790  -->  00:03:23,820
variables declared in enclosing block they
have to be effectively final so that the
37

37

00:03:23,820  -->  00:03:27,540
runtime will know what values to use
when the lambda expression is evaluated
38

38

00:03:27,540  -->  00:03:33,130
so to drive this point I'm just going to
just type in a bit more code i'm just
39

39

00:03:33,130  -->  00:03:39,070
going to delete what I added here just
to avoid any complications and lets just
40

40

00:03:39,070  -->  00:03:47,410
add another method which should make it clear so....
41

41

00:03:47,410  -->  00:04:19,290
....
42

42

00:04:20,150  -->  00:04:50,470
....
43

43

00:04:50,470  -->  00:04:57,350
alright so in this code we're using a
lambda for a runnable when the code runs
44

44

00:04:57,350  -->  00:05:01,490
the thread will sleep for five seconds
and then print the value of the number
45

45

00:05:01,490  -->  00:05:06,160
variable now when thread is sleeping
the print value method will continue to
46

46

00:05:06,160  -->  00:05:10,400
execute and will exit and that means
that by the time the thread gets around
47

47

00:05:10,400  -->  00:05:13,660
to printing the number the local variable
will no longer exist
48

48

00:05:14,510  -->  00:05:17,630
so what will the thread print
49

49

00:05:17,630  -->  00:05:21,710
well since any variables in the lambdas
are set when the lambda is processed by
50

50

00:05:21,710  -->  00:05:26,690
the runtime and those values of those
variables won't change because they're
51

51

00:05:26,690  -->  00:05:30,560
effectively final the runtime knows it
can use the value of 25
52

52

00:05:31,090  -->  00:05:35,360
that's because that was the value of
number when it process the lambda so in
53

53

00:05:35,360  -->  00:05:39,130
larger applications quite a bit of time
may elapsed between creating a runnable
54

54

00:05:39,130  -->  00:05:43,660
and actually using it so hopefully now
you get the point that because lambdas
55

55

00:05:43,660  -->  00:05:48,440
may not be immediately evaluated any
variables that we use within them from
56

56

00:05:48,440  -->  00:05:50,990
outside the lambda must be final
57

57

00:05:50,990  -->  00:05:56,060
now we can change variables declared
inside the lambda because those
58

58

00:05:56,060  -->  00:06:00,400
variables are within the lambda scope
and so can't be changed outside the
59

59

00:06:00,400  -->  00:06:06,470
lambda also they won't go away because
the execution of the enclosing scope has
60

60

00:06:06,470  -->  00:06:11,000
completed as in our case of our print
value method where the method will
61

61

00:06:11,000  -->  00:06:15,740
finish executing before the lambda runs
alright so let's actually try one more
62

62

00:06:15,740  -->  00:06:20,780
thing so we're going to add a lambda
expression to the enhanced for loop in
63

63

00:06:20,780  -->  00:06:24,110
the main method and for every employee
we're going to start a thread that
64

64

00:06:24,110  -->  00:06:25,520
prints out their age
65

65

00:06:25,520  -->  00:06:29,650
let's go up and do that we're going back
up to the main method all the way the
66

66

00:06:29,650  -->  00:06:31,810
top here
67

67

00:06:31,810  -->  00:06:34,600
I'm just going to clear up some of this
now because we've got sort of copies of a
68

68

00:06:34,600  -->  00:06:40,000
lot of this in the previous videos we've
been working the same code let's just
69

69

00:06:40,000  -->  00:06:41,200
clean it up a little bit
70

70

00:06:41,200  -->  00:06:48,010
alright so we've got our
employees defined as you can see there
71

71

00:06:48,010  -->  00:06:56,880
so let's add that tap enhance for so....
72

72

00:06:56,880  -->  00:07:34,690
....
73

73

00:07:35,200  -->  00:07:42,460
alright so let's actually run that and
see what it does confirm that it works you
74

74

00:07:42,460  -->  00:07:47,500
can see that works so IntelliJ
doesn't complain and we can run the code
75

75

00:07:47,500  -->  00:07:51,940
successfully and we can see the ages
printed in the console but obviously it
76

76

00:07:51,940  -->  00:07:55,360
sporadic times not necessarily in the
same order so if we just run this again
77

77

00:08:03,730  -->  00:08:07,570
you can see we're getting different
ordering each time we run it
78

78

00:08:07,570  -->  00:08:11,320
that's because the threads going to be
running at different times so you might
79

79

00:08:11,320  -->  00:08:13,510
be thinking at this point hang on
wait a minute
80

80

00:08:13,510  -->  00:08:17,500
the employee variable is declared
outside the lambda and it's values does
81

81

00:08:17,500  -->  00:08:21,340
change doesn't it have to be effectively
final to be used within the lambda
82

82

00:08:21,340  -->  00:08:27,130
wel answer to that is yes it does and in
this case the employee variable is
83

83

00:08:27,130  -->  00:08:32,950
effectively final when using an enhanced
for loop a new local variable is created
84

84

00:08:32,950  -->  00:08:37,240
for each iteration of the loop and that
means that the variable is effectively
85

85

00:08:37,240  -->  00:08:43,240
final for each iteration and if we use
instead an old-style for loop you can see
86

86

00:08:43,240  -->  00:08:45,640
this more clearly so let's just do
that
87

87

00:08:45,640  -->  00:08:51,790
alright so it's going to be....
88

88

00:08:51,790  -->  00:09:07,690
.....
89

89

00:09:07,690  -->  00:09:43,000
....
90

90

00:09:43,000  -->  00:09:48,370
....but you can now see using
the old style for loop it's clear that
91

91

00:09:48,370  -->  00:09:53,890
on each iteration a new employee variable
is created and its results effectively
92

92

00:09:53,890  -->  00:09:58,330
final so it's assigned once and then never
changes
93

93

00:09:58,330  -->  00:10:02,650
now if you move the declaration of the
employee variable outside the for loop
94

94

00:10:02,650  -->  00:10:07,090
then it won't be effectively final at
that point we wouldn't be able to use so
95

95

00:10:07,090  -->  00:10:14,350
what I mean by that is just changing this
code here putting employee employee and
96

96

00:10:14,350  -->  00:10:15,570
changing this
97

97

00:10:15,570  -->  00:10:21,930
to employee and we don't get any
warnings or errors from IntelliJ but
98

98

00:10:21,930  -->  00:10:27,390
when we got to run it you see that we actually
get an error and we got this problem about
99

99

00:10:27,390  -->  00:10:33,240
the lambda expression must be final or
effectively final so i'm guessing that
100

100

00:10:33,240  -->  00:10:37,230
IntelliJ on-the-fly parser doesn't
pick up every error of this type
101

101

00:10:37,230  -->  00:10:42,910
sometimes we need to run it to actually
get these errors to pop up alright before
102

102

00:10:42,910  -->  00:10:46,380
we close this lecture let's go back to
using an enhanced for loop to print the
103

103

00:10:46,380  -->  00:10:49,770
employee name and ages again I'm just going to
comment this other code here
104

104

00:10:49,770  -->  00:10:57,220
now leave the code that we originally had in
it now using lambda expressions we can
105

105

00:10:57,220  -->  00:10:58,660
actually do better than this
106

106

00:10:58,660  -->  00:11:02,980
we are printing the ages in another thread to
demonstrate a point let's just print the
107

107

00:11:02,980  -->  00:11:07,890
ages in the current thread now so what i'm going
to do is just change the here for now I'm
108

108

00:11:07,890  -->  00:11:12,750
just going to put leave that first
println there change the next one
109

109

00:11:12,750  -->  00:11:20,790
and just put employee . get age getting rid of the thread
altogether that's going to execute it now
110

110

00:11:20,790  -->  00:11:26,130
and that should obviously work nothing
particularly unique about that now when
111

111

00:11:26,130  -->  00:11:29,640
lambda expressions were introduced in
Java 8 a bunch of other features
112

112

00:11:29,640  -->  00:11:33,610
were also introduced that made use of
the lambdas we're going to take a closer
113

113

00:11:33,610  -->  00:11:37,410
look at these features in upcoming
videos now let's have a quick look at a
114

114

00:11:37,410  -->  00:11:42,690
new method in the iterable interface and
when we iterate or when reiterating over a
115

115

00:11:42,690  -->  00:11:47,130
collection as we are here we can use a
lambda expression and then a new
116

116

00:11:47,130  -->  00:11:51,930
iterable . for each method now the for
each method takes a lambda expression
117

117

00:11:51,930  -->  00:11:56,610
and evaluates it for each item in the
iterable collection
118

118

00:11:56,610  -->  00:12:02,940
let's update our code that we've got on
line 21 to 24 to use a lambda to print the
119

119

00:12:02,940  -->  00:12:04,110
names and ages
120

120

00:12:04,110  -->  00:12:07,800
we're going to replace the for loop with
the following i'm just going to comment it
121

121

00:12:07,800  -->  00:12:13,050
that out actually be the easiest thing to
show you this so we're going to put....
122

122

00:12:13,050  -->  00:12:23,820
....
123

123

00:12:23,820  -->  00:12:29,650
...
124

124

00:12:29,650  -->  00:12:39,910
.....and just to confirm that works
125

125

00:12:39,910  -->  00:12:47,170
...obviously we got that working as well
so we can see that we're getting the
126

126

00:12:47,170  -->  00:12:51,340
names and ages just printed just as we did
before but there's a lot actually going
127

127

00:12:51,340  -->  00:12:54,910
on under the covers when this statement
is executed and we're going to take a
128

128

00:12:54,910  -->  00:12:58,840
closer look at what is going on in the
next video on the java.util.function
129

129

00:12:58,840  -->  00:13:03,970
package which was introduced in
Java 8 and that contains a bunch of
130

130

00:13:03,970  -->  00:13:09,430
a functional interface is meant to be
used with the lambda expressions so now
131

131

00:13:09,430  -->  00:13:12,490
that we've actually seen lambda
expressions how have they actually
132

132

00:13:12,490  -->  00:13:17,080
enhanced java for some developers see
lambdas there's nothing more than a
133

133

00:13:17,080  -->  00:13:21,910
syntactic sugar you know more convenient
and concise way of writing anonymous
134

134

00:13:21,910  -->  00:13:26,290
classes I mean after all that don't
add anything to the language that wasn't
135

135

00:13:26,290  -->  00:13:30,970
already there and we can assign them to
variables and pass them around but I
136

136

00:13:30,970  -->  00:13:35,200
mean we can do that with anonymous class
objects as well as other people say that
137

137

00:13:35,200  -->  00:13:38,770
lambdas are javas first step into
functional programming which is a
138

138

00:13:38,770  -->  00:13:43,930
programming paradigm that focuses on
computing and returning results and just
139

139

00:13:43,930  -->  00:13:47,650
for more information about functional
programming theirs a good wikipedia
140

140

00:13:47,650  -->  00:13:54,130
article here wikipedia page to be more
concise to be more accurate and I paste
141

141

00:13:54,130  -->  00:13:57,970
that in there to check out that to find
out a bit more about functional
142

142

00:13:57,970  -->  00:14:00,940
programming the end of the day there you
really have to make your own mind up
143

143

00:14:00,940  -->  00:14:05,500
about how significant you think lambda
expressions really are but before we
144

144

00:14:05,500  -->  00:14:08,470
move on now it is important to note that
we never have to use a lambda expression
145

145

00:14:08,470  -->  00:14:14,320
and in place for lambda expression we
can always use an anonymous class and
146

146

00:14:14,320  -->  00:14:18,700
some developers prefer to do so now some
lambda expressions can be difficult to
147

147

00:14:18,700  -->  00:14:23,110
read and understand especially when you
didn't write them yourself even if you
148

148

00:14:23,110  -->  00:14:24,550
don't intend to use them
149

149

00:14:24,550  -->  00:14:27,850
it is important to know about them and
how they work because you might have to
150

150

00:14:27,850  -->  00:14:31,510
work on someone else's code at some point
and they may use lambda expressions
151

151

00:14:31,510  -->  00:14:35,590
and also it is possible that future
enhancements to java might bring
152

152

00:14:35,590  -->  00:14:39,730
features that require the use of lambda
expressions but right now whether to use
153

153

00:14:39,730  -->  00:14:43,290
them or not is up to each developer or
an employer's coding standard
154

154

00:14:43,290  -->  00:14:47,070
that matter alright so that concludes
our introduction to lambda expressions
155

155

00:14:47,070  -->  00:14:52,350
next we are gonna start taking a look at the
java.util.function package so
156

156

00:14:52,350  -->  00:14:56,910
going back to our code keep this project
open the lambdas project because
157

157

00:14:56,910  -->  00:15:00,240
we're going to be copying some code
from it in the next video so we'll see
158

158

00:15:00,240  -->  00:15:00,950
you in the next video
