WEBVTT
1
1

00:00:05.250  -->  00:00:09.110
So, this is video three of the abstract
class challenge, and this is the optional
2

2

00:00:09.110  -->  00:00:12.930
section, where we're actually looking
at implementing a search tree.
3

3

00:00:12.930  -->  00:00:17.110
Now, the search tree's very similar to a
link list, but the differences are mainly
4

4

00:00:17.110  -->  00:00:20.570
in the implementations of the add item,
remove item, and traverse methods.
5

5

00:00:20.570  -->  00:00:24.480
So what I'm going to do is actually
create this SearchTree class first.
6

6

00:00:24.480  -->  00:00:26.620
Then as we go through it,
I'll actually explain it more.
7

7

00:00:26.620  -->  00:00:30.110
Then I'll actually show you a diagram
of how a search tree works,
8

8

00:00:30.110  -->  00:00:31.120
compared to a LinkedList.
9

9

00:00:31.120  -->  00:00:33.200
So we're going to start off
writing some code there.
10

10

00:00:33.200  -->  00:00:38.880
So we're gonna create a new class, Java
class and I'm gonna call it SearchTree,
11

11

00:00:38.880  -->  00:00:43.910
and this class should actually implement
node list as the other one did,
12

12

00:00:43.910  -->  00:00:48.860
as MyLinkedList did, so implements
note list until you got the right to
13

13

00:00:48.860  -->  00:00:51.850
method that's mean we need to overwrite.
14

14

00:00:51.850  -->  00:00:56.380
It will start up with the private
list item group equals now and
15

15

00:00:56.380  -->  00:01:01.610
will host, have a constructor which
is going to be pass the route item,
16

16

00:01:01.610  -->  00:01:04.420
which will set that to the route head.
17

17

00:01:04.420  -->  00:01:07.510
That's we did that in the my link list.
18

18

00:01:07.510  -->  00:01:12.650
Now let's override the necessary methods,
so we're going to just do a command in.
19

19

00:01:14.060  -->  00:01:17.380
And override, and I'm going to,
to be more specific,
20

20

00:01:17.380  -->  00:01:20.640
I should actually select implement,
even though you can get to both menus.
21

21

00:01:20.640  -->  00:01:23.340
But when I select implement
we only get methods that
22

22

00:01:23.340  -->  00:01:27.760
can be implemented which come from the
correct place, nodeless, so we'll do that.
23

23

00:01:27.760  -->  00:01:29.130
We'll select those.
24

24

00:01:29.130  -->  00:01:32.610
And in terms of functionality, firstly
the getRoot is obviously very simple.
25

25

00:01:32.610  -->  00:01:35.860
That's gonna just,
literally just return this.root.
26

26

00:01:35.860  -->  00:01:38.270
And we've obviously got
the other methods now.
27

27

00:01:38.270  -->  00:01:40.930
And we'll actually start going
through those one by one.
28

28

00:01:40.930  -->  00:01:42.990
So we'll start off with
the add-item method.
29

29

00:01:42.990  -->  00:01:46.700
Now this has actually got the same
structure as in the case of the LinkList.
30

30

00:01:46.700  -->  00:01:50.330
But instead of actually breaking and
recreating links to insert,
31

31

00:01:50.330  -->  00:01:53.760
we're actually gonna keep
traversing the actual tree itself.
32

32

00:01:53.760  -->  00:01:56.450
Moving left to right is appropriate,
until we reach a node that is null.
33

33

00:01:56.450  -->  00:02:00.030
So let's talk more about
what this search tree is,
34

34

00:02:00.030  -->  00:02:01.260
before we actually go too much further.
35

35

00:02:01.260  -->  00:02:05.370
So we're looking at implementing a binary
search tree, as opposed to a link, so
36

36

00:02:05.370  -->  00:02:09.310
what I'm going to do is bring up an image
on the screen now, which is this one.
37

37

00:02:09.310  -->  00:02:12.980
And we'll just talk a little about that
and how this actually works because
38

38

00:02:12.980  -->  00:02:16.530
traversing upon research tree is not
really as straight forward as it is for
39

39

00:02:16.530  -->  00:02:17.380
a LinkedList.
40

40

00:02:17.380  -->  00:02:21.420
If you recall the LinkedList traversal
just involves going from node to node
41

41

00:02:21.420  -->  00:02:22.500
untill you get a null reference.
42

42

00:02:22.500  -->  00:02:27.150
So either go and using previous to go
back, or next to go to the next entries.
43

43

00:02:27.150  -->  00:02:29.210
And too,
when you find one of those is null,
44

44

00:02:29.210  -->  00:02:31.570
then you've reached either the start,
or the end of the list.
45

45

00:02:31.570  -->  00:02:33.830
That's the case of a link list, but
46

46

00:02:33.830  -->  00:02:37.690
traversing the search tree involves
actually visiting every node to the left,
47

47

00:02:37.690  -->  00:02:40.430
then the root, and then every node
to the right in the same way.
48

48

00:02:40.430  -->  00:02:42.020
And you can see the example
of that on the screen.
49

49

00:02:42.020  -->  00:02:45.400
So if we can just go through
what this bonus history does.
50

50

00:02:45.400  -->  00:02:49.060
So from the root at the top here, you can
see we keep travelling left of Adelaide,
51

51

00:02:49.060  -->  00:02:51.410
so we're actually moving down and
going left, left, left,
52

52

00:02:51.410  -->  00:02:53.300
left until we get as far down as we can.
53

53

00:02:53.300  -->  00:02:56.820
Then we go up to Adelaide,
Adelaide's parent, which is Brisbane, so
54

54

00:02:56.820  -->  00:02:58.470
note that we didn't go there directly.
55

55

00:02:58.470  -->  00:03:01.300
We went all the way down, and
came back up to Brisbane.
56

56

00:03:01.300  -->  00:03:04.070
In this left tree we go right to Canberra,
you can see, and
57

57

00:03:04.070  -->  00:03:07.340
Canberra's got no children at this level,
so we visit Canberra.
58

58

00:03:07.340  -->  00:03:09.920
And then onto it's parent,
which is Darwin.
59

59

00:03:09.920  -->  00:03:12.920
So again, it's going back up to
Darwin again, as you can see there.
60

60

00:03:12.920  -->  00:03:15.200
And having visited Darwin
in it's left tree,
61

61

00:03:15.200  -->  00:03:19.140
again, having gone down that way,
we go right towards Perth, down here.
62

62

00:03:19.140  -->  00:03:23.280
And Perth, as Perth's got a left child,
we're actually going to visit Melbourne.
63

63

00:03:23.280  -->  00:03:26.710
Melbourne's got no children, so
we visit its parent, Perth again.
64

64

00:03:26.710  -->  00:03:29.570
Having visited Perth and its left tree
already, we actually come down here and
65

65

00:03:29.570  -->  00:03:30.660
go right to Sydney.
66

66

00:03:30.660  -->  00:03:33.050
And now Sydney's got no children and
we've visited every node,
67

67

00:03:33.050  -->  00:03:34.620
that's the end of the traversal.
68

68

00:03:34.620  -->  00:03:38.080
Now if we had, if we actually printed the
value of every node that we visited rather
69

69

00:03:38.080  -->  00:03:38.980
than pass through, and
70

70

00:03:38.980  -->  00:03:42.140
there was a difference there,
we get the cities in alphabetical order.
71

71

00:03:42.140  -->  00:03:45.790
But big thing here is, big difference is
there is no link back from a child towards
72

72

00:03:45.790  -->  00:03:49.370
parent, so when we get to Adelaide,
when we get down here, there is no way for
73

73

00:03:49.370  -->  00:03:51.180
us to know got there via Brisbane.
74

74

00:03:51.180  -->  00:03:55.210
So this makes an iterative traverse of
a binary SearchTree extremely complicated,
75

75

00:03:55.210  -->  00:03:59.410
because we haven't got the direct
reference using a .Previous, for example,
76

76

00:03:59.410  -->  00:04:01.330
that we would have in the LinkedList.
77

77

00:04:01.330  -->  00:04:03.400
However, if you look at the tree
with Darwin as its root,
78

78

00:04:03.400  -->  00:04:06.000
up here, this is made up of a left
tree with Brisbane as its root.
79

79

00:04:06.000  -->  00:04:09.240
And a right tree with Perth as its
Its root as you can see the two left
80

80

00:04:09.240  -->  00:04:10.200
and right there.
81

81

00:04:10.200  -->  00:04:12.390
So we can then describe
Brisbon's left tree,
82

82

00:04:12.390  -->  00:04:15.540
as a tree with Adelaide as its root,
with no children.
83

83

00:04:15.540  -->  00:04:17.650
And a sign for
Caberra Melbourne and Sydney.
84

84

00:04:17.650  -->  00:04:21.870
So therefore a tree can be described as
a root with optionally, a left tree and
85

85

00:04:21.870  -->  00:04:22.860
right tree.
86

86

00:04:22.860  -->  00:04:25.480
Now the tree in this slide of the screen
there now shows the Darwin tree,
87

87

00:04:25.480  -->  00:04:29.620
which consists of the root Darwin,
plus the Brisbon tree, and the Perth tree.
88

88

00:04:29.620  -->  00:04:32.210
So, I hope that actually makes
sense as to what we're doing here,
89

89

00:04:32.210  -->  00:04:34.320
the differences between
the binary search tree.
90

90

00:04:34.320  -->  00:04:37.690
And I'll talk more about the advantages of
a binary search tree as we go through this
91

91

00:04:37.690  -->  00:04:40.180
as well, particularly towards
the end of the lecture,
92

92

00:04:40.180  -->  00:04:43.930
because it is actually a very important
part of database management systems.
93

93

00:04:43.930  -->  00:04:45.360
They use binary search trees.
94

94

00:04:45.360  -->  00:04:47.210
So it's a good skill for you to have.
95

95

00:04:47.210  -->  00:04:48.250
So what we're going to do,
96

96

00:04:48.250  -->  00:04:52.540
given that we need to actually continually
go back through some of these notes,
97

97

00:04:52.540  -->  00:04:54.860
we're actually going to
write a recursive function.
98

98

00:04:54.860  -->  00:04:58.860
So any definition that includes
an object in its own definition is
99

99

00:04:58.860  -->  00:05:00.790
known as a recursive definition.
100

100

00:05:00.790  -->  00:05:04.580
And objects that can be defined
recursively can be processed recursively.
101

101

00:05:04.580  -->  00:05:07.180
So what we're going to do
is write a recursive method
102

102

00:05:07.180  -->  00:05:08.660
to help us traverse through the list.
103

103

00:05:08.660  -->  00:05:11.290
So to do that I'm going
back here in search tree.
104

104

00:05:11.290  -->  00:05:15.490
So the traverse code's going to be, so
that's going to be recursive method.
105

105

00:05:18.990  -->  00:05:24.200
If root is not equal to null,
we're gonna traverse
106

106

00:05:24.200  -->  00:05:29.540
root.previous, and
we're going to actually also
107

107

00:05:29.540  -->  00:05:34.630
print out root.getValue.
108

108

00:05:34.630  -->  00:05:36.820
That should be println, not printf.
109

109

00:05:36.820  -->  00:05:40.820
And traverse(root.next).
110

110

00:05:40.820  -->  00:05:48.290
So looking at that code on the screen,
and bringing back the image again,
111

111

00:05:48.290  -->  00:05:51.430
so when we call traverse for the first
time, the root's going to be Darwin.
112

112

00:05:51.430  -->  00:05:55.110
So what is passed to it as a parameter
is Darwin, so this is not null,
113

113

00:05:55.110  -->  00:05:56.750
which in this case it won't be.
114

114

00:05:56.750  -->  00:05:58.530
So if that's the case,
we come down here and
115

115

00:05:58.530  -->  00:06:01.780
traverse is called again,
with stop previous,
116

116

00:06:01.780  -->  00:06:05.240
which is the lest node of Darwin, which
in this case is going to be Brisbane.
117

117

00:06:05.240  -->  00:06:09.750
So this is also not null, so
traverse is called again, and
118

118

00:06:09.750  -->  00:06:12.980
it's actually called again with Adelaide
as its route this time, so Adelaide gets
119

119

00:06:12.980  -->  00:06:17.700
called the list item for, Adelaide
gets called to the traverse method.
120

120

00:06:17.700  -->  00:06:21.240
This eventually ends up being null because
we can't actually go to a previous because
121

121

00:06:21.240  -->  00:06:22.690
there is no previous for Adelaide.
122

122

00:06:22.690  -->  00:06:27.120
So this is nome because the code is
not equal to nome it will do this,
123

123

00:06:27.120  -->  00:06:29.040
it won't need anymore
processing at this point.
124

124

00:06:29.040  -->  00:06:30.940
So traversed returns to the line.
125

125

00:06:30.940  -->  00:06:32.430
After traverse in that case,
126

126

00:06:32.430  -->  00:06:35.470
which is Adelaide.previous, and
prints the value of Adelaide.
127

127

00:06:35.470  -->  00:06:39.940
Because it's finished at that point, it's
then gonna print out this line there and
128

128

00:06:39.940  -->  00:06:41.770
the current line is gonna be Adelaide.
129

129

00:06:41.770  -->  00:06:43.680
So traverse is then called again,
this time.
130

130

00:06:43.680  -->  00:06:47.600
This is the next line with Adelaide.next,
that's null.
131

131

00:06:47.600  -->  00:06:50.870
So the invocation of traverse returns
to the line after traverse which is
132

132

00:06:50.870  -->  00:06:51.620
Adelaide.next.
133

133

00:06:51.620  -->  00:06:55.400
So there's no further instructions,
so this invocation of traverse
134

134

00:06:55.400  -->  00:07:00.210
returns to the point after traversal,
which is Brisbrane.previous.
135

135

00:07:00.210  -->  00:07:04.150
Then calles itself the prism dot prisbon,
camber is the root, and so on.
136

136

00:07:04.150  -->  00:07:08.400
Now I know that complicated, and
there's a bit of information
137

137

00:07:08.400  -->  00:07:12.580
to suggest that recursive methods
really are complicated, but
138

138

00:07:12.580  -->  00:07:17.720
all you really need to consider is that
recursive method is just a method.
139

139

00:07:17.720  -->  00:07:19.580
It's just a method call,
like any other method call, but
140

140

00:07:19.580  -->  00:07:21.350
we just happen to be
calling ourselves again.
141

141

00:07:21.350  -->  00:07:24.480
Calling another copy ourselves,
if you will.
142

142

00:07:24.480  -->  00:07:27.880
So to test a traversal method, we can
change the declaration of list in main,
143

143

00:07:27.880  -->  00:07:28.630
to be a search tree.
144

144

00:07:28.630  -->  00:07:30.330
So let's go and do that.
145

145

00:07:30.330  -->  00:07:32.470
At the moment we've got a list here,
MyLinkedList.
146

146

00:07:32.470  -->  00:07:33.880
Let's change that actually
to our SearchTree.
147

147

00:07:35.300  -->  00:07:38.060
And what I'm going to do there,
148

148

00:07:38.060  -->  00:07:43.260
let's actually just change this variable,
refactor it.
149

149

00:07:43.260  -->  00:07:47.950
We'll rename it to tree like so,
press Enter.
150

150

00:07:47.950  -->  00:07:50.350
And we're gonna change that so
it's not a linked list anymore,
151

151

00:07:50.350  -->  00:07:51.800
it's obviously gonna be a SearchTree.
152

152

00:07:53.030  -->  00:07:55.800
Before we actually run this then we've got
it commentated and got it ready to go,
153

153

00:07:55.800  -->  00:07:59.650
and what we need to do is
actually add our item methods.
154

154

00:07:59.650  -->  00:08:03.170
You go back to search tree, you come here
into add item because at the moment it's
155

155

00:08:03.170  -->  00:08:05.970
not actually doing any processing and
we're going to actually paste some code
156

156

00:08:05.970  -->  00:08:08.360
in, and
then we'll actually go through the code.
157

157

00:08:08.360  -->  00:08:12.440
So this is the actual code up that I've
pasted in for the add item which is
158

158

00:08:12.440  -->  00:08:16.030
different from the search tree than
it actually is for the link list.
159

159

00:08:16.030  -->  00:08:19.790
And the major difference is it's very
similar so it's got the same structure
160

160

00:08:19.790  -->  00:08:24.280
like it has for the link list but instead
of breaking and recreating links to insert
161

161

00:08:24.280  -->  00:08:27.590
we don't actually need to do that, so
we just keep retraversing the tree
162

162

00:08:27.590  -->  00:08:31.280
moving left or right as appropriate
until we reach a note that is null.
163

163

00:08:31.280  -->  00:08:34.030
Now once we reach the end
of a path through the tree,
164

164

00:08:34.030  -->  00:08:36.030
this becomes the position
to insert at new item.
165

165

00:08:36.030  -->  00:08:38.150
So you can see the code there
first that we're checking for
166

166

00:08:38.150  -->  00:08:41.120
null, which is very similar to
what we did in the linked list.
167

167

00:08:41.120  -->  00:08:44.780
If it's empty our item becomes the head
of the tree at the new return.
168

168

00:08:44.780  -->  00:08:47.660
Otherwise, we start comparing
which again is very similar.
169

169

00:08:47.660  -->  00:08:51.720
Then we go through actually making a while
loop, checking to make sure that it's not
170

170

00:08:51.720  -->  00:08:53.610
null, and
there's a bit of a note I'll add shortly.
171

171

00:08:53.610  -->  00:08:55.160
So I'll add the comparison,
172

172

00:08:55.160  -->  00:08:58.790
we'll do it using the .compareTo which
was the same if it's less than zero,
173

173

00:08:58.790  -->  00:09:03.160
then it means that the new item, the new
item is what we are actually using here.
174

174

00:09:03.160  -->  00:09:06.820
If that is actually greater, we actually
have to try and move right if we can, so
175

175

00:09:06.820  -->  00:09:07.860
we keep doing a test.
176

176

00:09:07.860  -->  00:09:11.640
Firstly to see whether .next has got
something, that's not equal to null.
177

177

00:09:11.640  -->  00:09:14.200
And if it has we actually
move on to the next record.
178

178

00:09:14.200  -->  00:09:16.060
Otherwise there's no node to the right so
179

179

00:09:16.060  -->  00:09:19.650
we know this point because it's
a null we can actually add our item.
180

180

00:09:19.650  -->  00:09:21.270
So we do that then return true.
181

181

00:09:21.270  -->  00:09:24.750
Otherwise if the comparison's greater than
zero then that means that the new item
182

182

00:09:24.750  -->  00:09:28.750
we're trying to add is less in a sort
order perspective so we need to try and
183

183

00:09:28.750  -->  00:09:30.440
move left if possible.
184

184

00:09:30.440  -->  00:09:32.880
So if the current item's
previous is not equal to null,
185

185

00:09:32.880  -->  00:09:34.720
we go to the previous entry.
186

186

00:09:34.720  -->  00:09:36.320
Bearing mind we're going to
wall link with both of these.
187

187

00:09:36.320  -->  00:09:39.010
So we're going to continue doing
that until we get to the point.
188

188

00:09:39.010  -->  00:09:42.230
Otherwise else has no name to the left so
we can actually add it at this point.
189

189

00:09:42.230  -->  00:09:44.550
So we're actually then using
the dot set previous for
190

190

00:09:44.550  -->  00:09:46.220
the new item to actually
put it in that spot.
191

191

00:09:46.220  -->  00:09:50.670
Then we return and, of course,
we decided in the link, the by-link list,
192

192

00:09:50.670  -->  00:09:52.110
that duplicates we wouldn't add.
193

193

00:09:52.110  -->  00:09:53.430
And we're doing the same thing here.
194

194

00:09:53.430  -->  00:09:57.670
So if comparison actually returns zero,
it means the item's duplicated, and
195

195

00:09:57.670  -->  00:10:00.020
we don't try to actually re-add it again.
196

196

00:10:00.020  -->  00:10:02.360
So that's actually the add item, so
197

197

00:10:02.360  -->  00:10:06.590
basically where is the insertion in the
delete list next to previous insertions,
198

198

00:10:06.590  -->  00:10:09.620
as I mentioned, unless the insertion
was at the end of the list.
199

199

00:10:09.620  -->  00:10:12.790
In the case of a search tree, insertion's
always going to be at the end of a path,
200

200

00:10:12.790  -->  00:10:16.490
so you keep going left or right until you
can't go any further, so in other words,
201

201

00:10:16.490  -->  00:10:19.480
until you actually find null and
you put it in there.
202

202

00:10:19.480  -->  00:10:22.970
But one consequence of that, and this is
what I wanted to bring up about the wallet
203

203

00:10:22.970  -->  00:10:26.570
here, is that the wallet is never going
to terminate naturally, so the program's
204

204

00:10:26.570  -->  00:10:29.540
going to return, and if you can see,
we've actually got returns in here.
205

205

00:10:29.540  -->  00:10:32.050
In this case, for
the three scenarios with the compare.
206

206

00:10:32.050  -->  00:10:34.180
So that's not a problem, and
our code's gonna work fine, but
207

207

00:10:34.180  -->  00:10:37.020
the condition, just want to make
it clear that the actual condition
208

208

00:10:37.020  -->  00:10:40.790
while currentItem's not equal to
null can never actually be false.
209

209

00:10:40.790  -->  00:10:43.350
Cuz we're always checking for
null before moving left or right.
210

210

00:10:43.350  -->  00:10:46.450
So technically we could have
written the code as while true, and
211

211

00:10:46.450  -->  00:10:49.410
removed the need to have the return
false at the end if we wanted to.
212

212

00:10:49.410  -->  00:10:51.240
But I left that in there because
I think that's more readable.
213

213

00:10:51.240  -->  00:10:53.760
That's certainly personal
preference there.
214

214

00:10:53.760  -->  00:10:55.940
Okay, so that's the code for addItem.
215

215

00:10:55.940  -->  00:10:59.580
So we should now be able to go back to our
main and we should be able to run this and
216

216

00:10:59.580  -->  00:11:01.210
we should hopefully get a result.
217

217

00:11:01.210  -->  00:11:05.130
If you run this,
you get things in the correct order so
218

218

00:11:05.130  -->  00:11:07.670
it's actually working fine now.
219

219

00:11:07.670  -->  00:11:10.250
So you can see 1, 2, 3 4, 5, 6, 7, 8, 9.
220

220

00:11:10.250  -->  00:11:13.880
And just to confirm,
I'll comment that out and go back and
221

221

00:11:13.880  -->  00:11:16.570
put in our original string, and run that.
222

222

00:11:19.810  -->  00:11:23.720
Canberra's already present, so
we're not getting duplicates added.
223

223

00:11:23.720  -->  00:11:25.940
Adelaide, Brisbane, Canberra,
Darwin, Melbourne, Perth and Sydney.
224

224

00:11:25.940  -->  00:11:28.460
So, it's actually sorting in
alphabetical order for that as well.
225

225

00:11:28.460  -->  00:11:30.420
So, as you can see, now,
it looks complicated.
226

226

00:11:30.420  -->  00:11:33.870
You might look at that and think,
well, is this really that simple?
227

227

00:11:33.870  -->  00:11:36.120
But that's really all there
is to a recursive method.
228

228

00:11:36.120  -->  00:11:38.300
They sound complicated and
229

229

00:11:38.300  -->  00:11:41.110
when I was first introduce to them I found
them a little bit overwhelming to get
230

230

00:11:41.110  -->  00:11:44.290
use to but, really it's just
a method call like anything else.
231

231

00:11:44.290  -->  00:11:46.660
It just happened to be calling
itself rather than another method.
232

232

00:11:46.660  -->  00:11:49.520
That's the way to really
treat it in this case.
233

233

00:11:49.520  -->  00:11:52.890
And just out of interest it's actually
possible to write a link list recursively
234

234

00:11:52.890  -->  00:11:55.350
as a root followed by link list,
and the link, so
235

235

00:11:55.350  -->  00:11:57.420
the link list traverse method
could then be rewritten.
236

236

00:11:57.420  -->  00:11:58.890
So we'll just quickly go through and
look at that.
237

237

00:11:58.890  -->  00:12:02.280
Now that's our traverse method for
our mylink list.
238

238

00:12:02.280  -->  00:12:05.980
So I've actually just
comment that out briefly, so
239

239

00:12:05.980  -->  00:12:10.700
we can actually rewrite that as this,
if root is not equal to null.
240

240

00:12:13.400  -->  00:12:15.830
We can actually print root dot get value.
241

241

00:12:15.830  -->  00:12:21.730
And if we just do traverse root dot next.
242

242

00:12:21.730  -->  00:12:26.320
It's that simple,
we could actually do that if we wanted to,
243

243

00:12:26.320  -->  00:12:29.730
but generally it's not a good idea to do
that due to the depth of the recursion.
244

244

00:12:29.730  -->  00:12:31.910
In other words,
how many times it's calling itself.
245

245

00:12:31.910  -->  00:12:35.850
So a well balanced binary tree with
billions of records, billions of nodes,
246

246

00:12:35.850  -->  00:12:38.050
we'd have a maximum depth of around 63.
247

247

00:12:38.050  -->  00:12:41.680
Now basically in a huge database,
if we had this many records,
248

248

00:12:41.680  -->  00:12:45.990
I can't even actually print it,
I can't even say it because it's so big,
249

249

00:12:45.990  -->  00:12:49.000
it would only take 63 sort of levels,
if you will,
250

250

00:12:49.000  -->  00:12:52.650
a depth of 63 to actually go
right through all those records.
251

251

00:12:52.650  -->  00:12:55.960
But with a similarly sized linked list
it would not start to return it to all
252

252

00:12:55.960  -->  00:12:59.650
the nodes had been printed, so I'd have
to go through the entire linked list, and
253

253

00:12:59.650  -->  00:13:03.040
the stacks can overflow well before in
other words they are going to crash.
254

254

00:13:03.040  -->  00:13:07.270
So you do need to make sure that
recursive functions are only picked for
255

255

00:13:07.270  -->  00:13:10.720
certain functions and
not sort of just used every where.
256

256

00:13:10.720  -->  00:13:13.940
In this case for a LinkedList, it doesn't
make sense to actually use one because
257

257

00:13:13.940  -->  00:13:17.090
you're going to crash once you start
getting substantial number of records.
258

258

00:13:17.090  -->  00:13:19.150
So I'm gonna just undo that.
259

259

00:13:19.150  -->  00:13:22.920
But again for that binary trade it's
actually optimized for that and even for
260

260

00:13:22.920  -->  00:13:27.130
that many large number of records it still
is only gonna be in the maximum 63 deep
261

261

00:13:27.130  -->  00:13:31.370
which will be fine for
most platforms that are running in Java.
262

262

00:13:31.370  -->  00:13:36.230
Which brings us to the next solution
at the moment with the remove item.
263

263

00:13:36.230  -->  00:13:37.970
And it was pretty simple
in the MyLinkedList,
264

264

00:13:37.970  -->  00:13:39.230
there wasn't really a lot to it.
265

265

00:13:39.230  -->  00:13:40.290
Go back and have a look.
266

266

00:13:40.290  -->  00:13:42.030
There was a bit of code there,
bit of testing,
267

267

00:13:42.030  -->  00:13:44.010
but it wasn't particularly complicated.
268

268

00:13:44.010  -->  00:13:48.500
But with a SearchTree using the BinaryTree
it actually takes a lot of thought and
269

269

00:13:48.500  -->  00:13:51.530
there's several conditions
we need to consider.
270

270

00:13:51.530  -->  00:13:55.020
So first off, we need to think that if
the item to be removed has no children,
271

271

00:13:55.020  -->  00:13:56.510
then the link to it can be set to null.
272

272

00:13:56.510  -->  00:13:59.210
This is fairly trivial,
cuz obviously there's no children, but
273

273

00:13:59.210  -->  00:14:01.890
we do need to keep a note in
that case to the item's parent
274

274

00:14:01.890  -->  00:14:04.790
because there's not gonna be any
link back to that parent otherwise.
275

275

00:14:04.790  -->  00:14:06.990
If the items to remove is
got only one child and
276

276

00:14:06.990  -->  00:14:10.930
that's either pointing left or right and
removal is just the case of setting
277

277

00:14:10.930  -->  00:14:14.660
the items parent to point to the child
again, that's pretty straight forward.
278

278

00:14:14.660  -->  00:14:17.940
But the big scenario is if the item
to remove is both left and
279

279

00:14:17.940  -->  00:14:21.580
a right child, the removal is not that
easy, because we need to ensure that
280

280

00:14:21.580  -->  00:14:25.460
every node to the left every node to
the right is greater than it's parent.
281

281

00:14:25.460  -->  00:14:27.810
So, basically, there's quite
a bit of work involved in that.
282

282

00:14:27.810  -->  00:14:29.580
There's actually an algorithm to do that.
283

283

00:14:29.580  -->  00:14:31.950
So what I'm gonna do is
paste in some code now,
284

284

00:14:31.950  -->  00:14:33.390
just to actually show
you want we need to do.
285

285

00:14:33.390  -->  00:14:36.040
Then we'll actually just go through and
explain what's going on here.
286

286

00:14:36.040  -->  00:14:39.240
So I'm just gonna paste that in and
287

287

00:14:39.240  -->  00:14:42.090
perform removal we'll
actually add in a minute.
288

288

00:14:42.090  -->  00:14:45.980
So basically there's a few steps
involved here, so we need to first, for
289

289

00:14:45.980  -->  00:14:49.160
the item to be deleted we move
to the right sub tree and
290

290

00:14:49.160  -->  00:14:52.970
we keep traversing left until we
reach a node with no left child.
291

291

00:14:52.970  -->  00:14:55.680
This is then the smallest
value in the right sub tree.
292

292

00:14:55.680  -->  00:14:59.320
Then we set the value of the node to
be deleted to the smallest value,
293

293

00:14:59.320  -->  00:15:02.450
and everything to the left is
already smaller than that; and
294

294

00:15:02.450  -->  00:15:05.440
as a result this is the smallest
value to the right side tree.
295

295

00:15:05.440  -->  00:15:07.440
And everything to the right
is greater than it.
296

296

00:15:07.440  -->  00:15:09.170
Let me finish off by
removing the smallest node,
297

297

00:15:09.170  -->  00:15:14.180
which is easy, as it's got either no
children, or only has a right child.
298

298

00:15:14.180  -->  00:15:16.360
Note that, we're not actually
removing the item to be deleted.
299

299

00:15:16.360  -->  00:15:19.720
We just sent the value of that,
value to that of another node and
300

300

00:15:19.720  -->  00:15:21.610
we We actually remove the other node.
301

301

00:15:21.610  -->  00:15:24.600
So this methods basically traversing
the trade, moving right or
302

302

00:15:24.600  -->  00:15:28.580
left as appropriate until it finds
the item to be deleted in this case.
303

303

00:15:28.580  -->  00:15:31.770
And before the actual current items
are advanced in the appropriate direction,
304

304

00:15:31.770  -->  00:15:35.420
left or right, the parent item some
reference is set to point to it, and we're
305

305

00:15:35.420  -->  00:15:37.940
doing it that way so that it eventually
finds the items to be deleted and
306

306

00:15:37.940  -->  00:15:39.770
we can also have
a reference towards parent.
307

307

00:15:39.770  -->  00:15:42.440
So this is only determining
the items to be removed.
308

308

00:15:42.440  -->  00:15:45.600
The actual code to remove the item
is actually quite big and
309

309

00:15:45.600  -->  00:15:47.710
we're gonna paste the code in there.
310

310

00:15:47.710  -->  00:15:50.430
It's quite detailed as you
can see on the screen.
311

311

00:15:50.430  -->  00:15:54.880
And they're gonna talk about one of the
ways that database management systems get
312

312

00:15:54.880  -->  00:15:57.020
around this to keep performance high.
313

313

00:15:57.020  -->  00:15:59.840
So basically we are to
remove item from the tree.
314

314

00:15:59.840  -->  00:16:02.700
So if the item.next is null,
there's no right tree so
315

315

00:16:02.700  -->  00:16:05.760
we make the parent point the left tree,
which can be null.
316

316

00:16:05.760  -->  00:16:09.620
So if parent.next is equal to item,
parent.setNext as you can see there,
317

317

00:16:09.620  -->  00:16:13.670
item is right but otherwise if the parent
previous is equal to the item again item
318

318

00:16:13.670  -->  00:16:17.600
is what we passed to then we set parent
setPrevious to the items previous which
319

319

00:16:17.600  -->  00:16:21.350
actually sort of removing that link and
then adding it again.
320

320

00:16:21.350  -->  00:16:25.690
Otherwise at this point the root is now
set to item.previous because parent must
321

321

00:16:25.690  -->  00:16:27.770
have been the item which means we're
looking at the root of the tree.
322

322

00:16:27.770  -->  00:16:30.160
And I'm not gonna go through
all this code now, but
323

323

00:16:30.160  -->  00:16:33.540
basically there's an else there and we're
looking for it in the other direction.
324

324

00:16:33.540  -->  00:16:35.640
The previous direction was sort of more or
less doing the opposite.
325

325

00:16:35.640  -->  00:16:37.500
We're actually going down
the left tree at that point.
326

326

00:16:37.500  -->  00:16:39.830
And we get down to the else.
327

327

00:16:39.830  -->  00:16:43.420
This is whether either the left or
the right were null, so
328

328

00:16:43.420  -->  00:16:44.550
deletion is now tricky.
329

329

00:16:44.550  -->  00:16:46.990
So, we've actually got two
ways to look at it now.
330

330

00:16:46.990  -->  00:16:48.140
So, from the right subtree,
331

331

00:16:48.140  -->  00:16:51.970
we need to find the smallest value ie,
which is the leftmost.
332

332

00:16:51.970  -->  00:16:54.350
And can see we go into item.next there.
333

333

00:16:54.350  -->  00:16:57.440
And using a while loop to actually get
through until we actually get to the last
334

334

00:16:57.440  -->  00:17:00.040
entry using current.previous.
335

335

00:17:00.040  -->  00:17:02.150
Then we actually put the smallest value,
336

336

00:17:02.150  -->  00:17:06.080
which is current.getValue into
item.setValue, using item.setValue.
337

337

00:17:06.080  -->  00:17:09.330
Then we actually delete the smallest item,
and again there's no actual delete as
338

338

00:17:09.330  -->  00:17:11.930
such, we're actually just
changing the pointer effectively.
339

339

00:17:11.930  -->  00:17:15.820
And you see otherwise in the situation
where leftmost parent wasn't equal to
340

340

00:17:15.820  -->  00:17:19.110
autumn, we actually set the previews
to the next record down from
341

341

00:17:19.110  -->  00:17:22.340
the count that we're
actually going through.
342

342

00:17:22.340  -->  00:17:26.210
I know that sounds incredibly
confusing but the bottom line is
343

343

00:17:26.210  -->  00:17:29.890
Barnes Research Trees are allot more
complicated as a result of that.
344

344

00:17:29.890  -->  00:17:34.310
And deleting an item is way more
complicated in the binary search tree.
345

345

00:17:34.310  -->  00:17:38.560
And a lot of database management systems
that actually use binary search trees,
346

346

00:17:38.560  -->  00:17:40.510
they don't actually delete
the records straight away.
347

347

00:17:40.510  -->  00:17:42.850
So, they're often flagged
as being deleted,
348

348

00:17:42.850  -->  00:17:45.690
which means it's just like
a flag set in the record.
349

349

00:17:45.690  -->  00:17:49.100
And they're actually ignored in the
searches and queries as a result of that.
350

350

00:17:49.100  -->  00:17:53.640
And the actual deletion, the physical
deletion of the actual data only occurs
351

351

00:17:53.640  -->  00:17:55.820
perhaps during out-of-hours and
maintenance procedures,
352

352

00:17:55.820  -->  00:17:58.310
you know recompacting or
reindexing the database.
353

353

00:17:58.310  -->  00:18:01.990
Because you can imagine with all this
code, if there's hundreds or thousands or
354

354

00:18:01.990  -->  00:18:05.050
millions of record,
it's going to take a long time to process,
355

355

00:18:05.050  -->  00:18:07.360
so again, pick your poison.
356

356

00:18:07.360  -->  00:18:09.170
You can't always choose.
357

357

00:18:09.170  -->  00:18:12.160
Part of becoming a good programmer
is learning the best solutions or
358

358

00:18:12.160  -->  00:18:16.460
best code to tackle a particular solution,
and that will come over time and with more
359

359

00:18:16.460  -->  00:18:21.080
experience, so I don't expect you to
fully understand the binary search tree.
360

360

00:18:21.080  -->  00:18:23.700
If you sort of understand what's
happening at a high level,
361

361

00:18:23.700  -->  00:18:26.440
then you're probably on
the right track here.
362

362

00:18:26.440  -->  00:18:28.850
And you'll find out more
about binary search trees and
363

363

00:18:28.850  -->  00:18:32.470
find out more about this code as we move
forward in the course, because a lot of it
364

364

00:18:32.470  -->  00:18:37.270
will start making more sense as you just
spend some time working with the concepts.
365

365

00:18:37.270  -->  00:18:40.380
So, just before I finish off,
now that we've actually added removeItem,
366

366

00:18:40.380  -->  00:18:42.120
we should actually be able to
remove some of these things.
367

367

00:18:42.120  -->  00:18:43.690
So, if I just comment this out again.
368

368

00:18:45.780  -->  00:18:49.230
That numbers back in again,
we should now be able to, called that out.
369

369

00:18:50.870  -->  00:18:54.480
This coach will all now work for
us, don't comment that and
370

370

00:18:54.480  -->  00:18:58.760
we should be able to run all that and
get the same results of deletions.
371

371

00:19:00.080  -->  00:19:03.540
And you can see we got deletion,
deleted item 3, 1, 2,
372

372

00:19:03.540  -->  00:19:08.430
4, and scrolling all the way down,
deleting item 1 was the last entry.
373

373

00:19:08.430  -->  00:19:10.820
Deleting item 6,
you can see one 6 and one on 7,
374

374

00:19:10.820  -->  00:19:13.280
and eventually we ended
up with an empty list.
375

375

00:19:13.280  -->  00:19:14.600
So the codes are working fine.
376

376

00:19:14.600  -->  00:19:17.690
So that's it, that's abstract classes and
the challenge and
377

377

00:19:17.690  -->  00:19:21.710
again don't be too stressed if you
don't fully understand the SearchTree.
378

378

00:19:21.710  -->  00:19:27.350
I've deliberately thrown that in to show
you some more advanced concepts of Java.
379

379

00:19:27.350  -->  00:19:30.040
The main thing was to focus
on the first two videos,
380

380

00:19:30.040  -->  00:19:32.800
which was the basic component
of the challenge, and
381

381

00:19:32.800  -->  00:19:35.960
I hope you did well out of that and
also got a load out of this.
382

382

00:19:35.960  -->  00:19:37.900
So that's now the end of this section.
383

383

00:19:37.900  -->  00:19:41.160
In the next section,
we're going to be moving on to generics,
384

384

00:19:41.160  -->  00:19:43.440
which is quite an exciting
concept of Java.
385

385

00:19:43.440  -->  00:19:44.700
So I'll see you in that next section.
