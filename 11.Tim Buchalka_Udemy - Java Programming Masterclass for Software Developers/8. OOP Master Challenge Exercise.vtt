WEBVTT
1
1

00:00:05.470  -->  00:00:08.880
So, this is the object-oriented
programming sort of master challenge,
2

2

00:00:08.880  -->  00:00:12.680
where we're going to build
a complete application using and
3

3

00:00:12.680  -->  00:00:16.540
understanding hopefully, all the
principles of object-oriented programming
4

4

00:00:16.540  -->  00:00:18.900
that we've learned in
the last two sections.
5

5

00:00:19.430  -->  00:00:21.440
Okay, so
this is the first part of the challenge.
6

6

00:00:21.440  -->  00:00:26.030
So, the purpose of the application is
to help a fictitious company called,
7

7

00:00:26.030  -->  00:00:29.590
Bills Burgers to manage their
process of selling hamburgers.
8

8

00:00:29.590  -->  00:00:33.380
So the application's gonna help Bill
to select the type of burgers and
9

9

00:00:33.380  -->  00:00:34.890
some of the additional items, or
10

10

00:00:34.890  -->  00:00:39.160
additions, that can be added to
the burgers as well as the actual pricing.
11

11

00:00:39.160  -->  00:00:43.790
So, we wanna create a base hamburger,
but we also wanna add
12

12

00:00:43.790  -->  00:00:47.180
to our other types of hamburgers that
are popular ones in Bill's store.
13

13

00:00:47.180  -->  00:00:49.190
We'll be talking about
those in the next section.
14

14

00:00:49.190  -->  00:00:51.860
So the basic hamburger should
have the following items.
15

15

00:00:51.860  -->  00:00:55.010
Should have the bread roll type,
the meat, that's meant to say meat there,
16

16

00:00:55.010  -->  00:00:56.780
and up to 4 additions.
17

17

00:00:56.780  -->  00:00:59.380
So these are additional things
like lettuce, tomato and
18

18

00:00:59.380  -->  00:01:03.580
carrot that the customer can
select to a particular burger.
19

19

00:01:03.580  -->  00:01:06.020
So each of these items
that do get selected and
20

20

00:01:06.020  -->  00:01:08.900
added, are actually charged
the additional price.
21

21

00:01:08.900  -->  00:01:13.150
So you need to find some way to track
how many of these items got added, and
22

22

00:01:13.150  -->  00:01:17.990
to calculate the price, both for the base
hamburger and all those additions.
23

23

00:01:17.990  -->  00:01:21.850
So the burger itself has got a base price,
like the base hamburger, but
24

24

00:01:21.850  -->  00:01:25.130
then all the additions that are added
are actually each have their own
25

25

00:01:25.130  -->  00:01:26.850
additional price over and above that.
26

26

00:01:26.850  -->  00:01:30.540
So what you'll want to do is create
a hamburger class to do with all of
27

27

00:01:30.540  -->  00:01:34.460
the above, and the constructor
should only include the roll type,
28

28

00:01:34.460  -->  00:01:37.920
the type of roll that's used with
the hamburger, the meat and the price.
29

29

00:01:37.920  -->  00:01:41.470
So you'll be needing to create
methods to do these other things like
30

30

00:01:41.470  -->  00:01:43.080
add these additional items.
31

31

00:01:43.080  -->  00:01:44.530
Now in addition to that, there's
also some extra functionalities
32

32

00:01:44.530  -->  00:01:45.310
Okay, so the other functionality that
we actually need in this application.
Now in addition to that, there's
also some extra functionalities
33

33

00:01:45.310  -->  00:01:48.920
Okay, so the other functionality that
we actually need in this application.
34

34

00:01:48.920  -->  00:01:52.960
We also need to create two
extra varieties of hamburgers.
35

35

00:01:52.960  -->  00:01:54.220
Which are essentially classes.
36

36

00:01:54.220  -->  00:01:56.260
And they're gonna cater for firstly.
37

37

00:01:56.260  -->  00:01:58.860
The first one, A, is the healthy burger.
38

38

00:01:58.860  -->  00:02:02.810
So this is a burger that is
actually sold only on a brown,
39

39

00:02:02.810  -->  00:02:06.160
rye bread roll and plus,
because it's a healthy burger,
40

40

00:02:06.160  -->  00:02:09.170
there's two additional items
that can be added to that.
41

41

00:02:09.170  -->  00:02:12.190
So, in other words, the healthy burger
can have a total of six items or
42

42

00:02:12.190  -->  00:02:14.900
additions in total for that class.
43

43

00:02:14.900  -->  00:02:17.140
And that's four from the base class and
44

44

00:02:17.140  -->  00:02:20.110
then two that can be added
to the healthy burger.
45

45

00:02:20.110  -->  00:02:23.230
So, you probably wanna process
the two additional items in
46

46

00:02:23.230  -->  00:02:27.780
this new healthy burger class and not
the base class since the two additions.
47

47

00:02:27.780  -->  00:02:30.190
Are only appropriate for
the healthy burger.
48

48

00:02:30.190  -->  00:02:34.640
So it wouldn't make sense for
you to allow six items in the base class,
49

49

00:02:34.640  -->  00:02:38.710
because those types of burgers aren't
allowed to have those six items.
50

50

00:02:38.710  -->  00:02:41.410
And the second type of burger
is the deluxe hamburger.
51

51

00:02:41.410  -->  00:02:44.450
Now that comes with chips and
drinks as additions, but
52

52

00:02:44.450  -->  00:02:46.520
no extra additions are allowed.
53

53

00:02:46.520  -->  00:02:49.040
So you need to find a way
to automatically add these
54

54

00:02:49.040  -->  00:02:53.390
two new additions at the time the deluxe
burger object is created, but
55

55

00:02:53.390  -->  00:02:56.210
then also to prevent the other
additions being made.
56

56

00:02:56.210  -->  00:03:01.480
Because they're sold as a package,
and that package cannot be modified.
57

57

00:03:01.480  -->  00:03:04.910
Now all three classes should
have a method that can be called
58

58

00:03:04.910  -->  00:03:09.580
any time to show the base price of
the hamburger plus all the additions.
59

59

00:03:09.580  -->  00:03:12.960
And each showing the addition name and
the addition price, because it should be
60

60

00:03:12.960  -->  00:03:16.650
tracking both of those and
also having a grand total for the burger.
61

61

00:03:16.650  -->  00:03:18.390
Now for the two additional classes,
62

62

00:03:18.390  -->  00:03:22.080
this may require you to be looking
at the base class for pricing and
63

63

00:03:22.080  -->  00:03:25.110
then adding some pricing or
adding totals onto that as well.
64

64

00:03:25.110  -->  00:03:25.890
So that's the challenge.
65

65

00:03:25.890  -->  00:03:27.320
I hope that makes sense.
66

66

00:03:27.320  -->  00:03:31.200
And It's a little bit bigger than the ones
that we've done before in that there's not
67

67

00:03:31.200  -->  00:03:32.580
necessarily a lot of code,
68

68

00:03:32.580  -->  00:03:36.220
but there's some design decisions in
here that you need to think about.
69

69

00:03:36.220  -->  00:03:39.530
So you probably want to spend a bit of
time writing it on a piece of paper or
70

70

00:03:39.530  -->  00:03:43.880
certainly thinking about it,
how this is going to play out.
71

71

00:03:43.880  -->  00:03:47.410
What should be in that base hamburger
class, what fields should be in there, but
72

72

00:03:47.410  -->  00:03:48.690
also what methods.
73

73

00:03:48.690  -->  00:03:51.630
But likewise for the two additional types.
74

74

00:03:51.630  -->  00:03:54.040
The healthy burger and
the deluxe hamburger.
75

75

00:03:54.040  -->  00:03:56.180
What methods and
fields should be in those as well.
76

76

00:03:56.180  -->  00:03:59.760
now just before you start the
77

77

00:03:59.760  -->  00:04:01.620
challenge I just want to make it clear
78

78

00:04:01.620  -->  00:04:03.780
that it's very important that you've
79

79

00:04:03.780  -->  00:04:04.620
actually gone through the
80

80

00:04:04.620  -->  00:04:06.570
object-oriented programming section of
81

81

00:04:06.570  -->  00:04:07.700
this course and haven't skipped any
82

82

00:04:07.700  -->  00:04:10.080
videos because if you don't understand
83

83

00:04:10.080  -->  00:04:11.970
the concepts of object-oriented
84

84

00:04:11.970  -->  00:04:14.480
programming you will struggle with this
85

85

00:04:14.480  -->  00:04:16.730
challenge the other thing to keep in
86

86

00:04:16.730  -->  00:04:18.720
mind is this that so there's lots of
87

87

00:04:18.720  -->  00:04:20.430
different ways of solving this challenge
88

88

00:04:20.430  -->  00:04:22.740
and in fact students who have been
89

89

00:04:22.740  -->  00:04:24.720
through this course and been through
90

90

00:04:24.720  -->  00:04:25.970
this challenge have actually posted
91

91

00:04:25.970  -->  00:04:27.210
their code so
92

92

00:04:27.210  -->  00:04:28.350
after you've actually attempted your
93

93

00:04:28.350  -->  00:04:30.380
challenge it can be good to see what
94

94

00:04:30.380  -->  00:04:31.590
other students have done with this
95

95

00:04:31.590  -->  00:04:33.660
section again bottom line it's very
96

96

00:04:33.660  -->  00:04:35.780
important that you actually understand
97

97

00:04:35.780  -->  00:04:37.380
the object-oriented programming section
98

98

00:04:37.380  -->  00:04:39.960
and those fundamentals to be able to
99

99

00:04:39.960  -->  00:04:42.380
attempt this challenge so just as an
100

100

00:04:42.380  -->  00:04:45.210
example one student use the constructor
101

101

00:04:45.210  -->  00:04:47.160
with four or five parameters another one
102

102

00:04:47.160  -->  00:04:49.880
you setters instead so I've purposely
103

103

00:04:49.880  -->  00:04:53.160
when designing this challenge to not
104

104

00:04:53.160  -->  00:04:55.130
tell you every parameter name method
105

105

00:04:55.130  -->  00:04:57.210
name etc because that would ultimately
106

106

00:04:57.210  -->  00:05:00.300
make it too easy for you bottom line is
107

107

00:05:00.300  -->  00:05:02.070
this is a challenge it's meant to tax
108

108

00:05:02.070  -->  00:05:04.680
you and to really make you think and
109

109

00:05:04.680  -->  00:05:06.900
even partially completing this challenge
110

110

00:05:06.900  -->  00:05:09.030
will definitely make you a better
111

111

00:05:09.030  -->  00:05:10.470
programmer because you've gone through
112

112

00:05:10.470  -->  00:05:13.680
the process of designing the solution
113

113

00:05:13.680  -->  00:05:14.330
So go away, and
114

114

00:05:14.330  -->  00:05:19.060
see what you can do to figure this out and
create your application.
115

115

00:05:19.060  -->  00:05:21.060
And when you're ready to go,
come back here and
116

116

00:05:21.060  -->  00:05:24.040
you can actually have a look and
come up and see what my solution was.
117

117

00:05:24.040  -->  00:05:25.980
So pause the video now,
go away and do that.
118

118

00:05:25.980  -->  00:05:27.240
And I'll see you when you get back.
119

119

00:05:31.940  -->  00:05:32.800
Okay, how did you get on?
120

120

00:05:32.800  -->  00:05:34.100
Did you figure out a solution?
121

121

00:05:34.100  -->  00:05:38.120
So let's go through now and
create what my version of this code is.
122

122

00:05:38.120  -->  00:05:41.590
Bearing in mind that with programming,
there's always
123

123

00:05:41.590  -->  00:05:44.250
a number of different ways that you can
actually come up with a solution, but
124

124

00:05:44.250  -->  00:05:45.730
this is the solution
I'm gonna come up with.
125

125

00:05:46.800  -->  00:05:51.650
The first thing we need to do is we need
to create this basic hamburger class,
126

126

00:05:51.650  -->  00:05:55.060
which is dealing with this base
information, and the base additions,
127

127

00:05:55.060  -->  00:05:56.920
the base price, and so forth.
128

128

00:05:56.920  -->  00:05:58.960
I'm going to create a new class and
call it Hamburger.
129

129

00:06:02.550  -->  00:06:04.320
Okay, so that's our base class.
130

130

00:06:04.320  -->  00:06:06.060
So, we go to create a number of fields.
131

131

00:06:06.060  -->  00:06:08.910
We're need to start off with the name.
132

132

00:06:08.910  -->  00:06:10.440
We need to create the name.
133

133

00:06:10.440  -->  00:06:13.000
The name that's gonna be
the name of the hamburger.
134

134

00:06:13.000  -->  00:06:15.860
The meat, the type of meat that
were adding to the hamburger.
135

135

00:06:15.860  -->  00:06:19.210
We're going to add a price, and then
we're also going to add the roll type,
136

136

00:06:19.210  -->  00:06:20.990
because we need to track that as well.
137

137

00:06:20.990  -->  00:06:24.380
The type of bread that's gonna be used or
type of roll that's gonna be used.
138

138

00:06:24.380  -->  00:06:25.720
So, let's add those fields.
139

139

00:06:25.720  -->  00:06:31.790
So, private String name, private String
140

140

00:06:31.790  -->  00:06:36.860
meet, private double,
we use a double for the price.
141

141

00:06:36.860  -->  00:06:44.200
[sound] And we're also going to track
that actual type of bread, as well.
142

142

00:06:44.200  -->  00:06:49.250
We'll call that breadRollType, like so.
143

143

00:06:49.250  -->  00:06:52.080
And we've also got some additional
fields we need to add, but
144

144

00:06:52.080  -->  00:06:54.030
we'll create our constructor first.
145

145

00:06:54.030  -->  00:06:57.200
So, our constructor is going
to be comprised of all fields.
146

146

00:06:58.340  -->  00:07:02.520
Now I think I might have mentioned in our
Main, constructor should only include
147

147

00:07:02.520  -->  00:07:06.500
the roll type, meat and price,
I didn't actually mention name in there.
148

148

00:07:06.500  -->  00:07:09.340
So, if you haven't done that with your
challenge you might wanna go back and
149

149

00:07:09.340  -->  00:07:10.220
add the name as well.
150

150

00:07:10.220  -->  00:07:12.600
So we want to also track the name.
151

151

00:07:12.600  -->  00:07:14.810
So that's our basic constructor.
152

152

00:07:14.810  -->  00:07:18.270
Now the other fields that we actually
want, we want to track those additions.
153

153

00:07:18.270  -->  00:07:19.840
Because if you remember back here,
154

154

00:07:19.840  -->  00:07:22.660
we talked about having up
to four additional items.
155

155

00:07:22.660  -->  00:07:25.230
Things like lettuce, tomato,
and carrot, and so on.
156

156

00:07:25.230  -->  00:07:28.940
So what we need to do is track those,
we need to record the actual name and
157

157

00:07:28.940  -->  00:07:30.590
also record the price.
158

158

00:07:30.590  -->  00:07:33.930
So to do that we're going to actually
just create some more fields, so
159

159

00:07:33.930  -->  00:07:35.210
we're just gonna call them private.
160

160

00:07:35.210  -->  00:07:38.580
Let's just keep it simple.
161

161

00:07:38.580  -->  00:07:39.660
First one will be addition.
162

162

00:07:39.660  -->  00:07:42.730
We'll call it addition1Name.
163

163

00:07:42.730  -->  00:07:48.500
Then private double addition1 Amount,
164

164

00:07:48.500  -->  00:07:53.450
or Price would be better, so that's gonna
be the additional item that can be put
165

165

00:07:53.450  -->  00:07:57.340
on the hamburger, number 1, 2, 3, and
4, and I'll just make those unique.
166

166

00:07:57.340  -->  00:08:00.610
Number 2, number 3, and number 4.
167

167

00:08:01.910  -->  00:08:04.460
Like so.
The next part we need to do is we need to
168

168

00:08:04.460  -->  00:08:07.370
have a mechanism to add those additions.
169

169

00:08:07.370  -->  00:08:11.160
So we need to create a method for
each of the four additions, and
170

170

00:08:11.160  -->  00:08:15.970
therefore to enable the calling process
to send the name and the price and for
171

171

00:08:15.970  -->  00:08:16.920
us to record that.
172

172

00:08:16.920  -->  00:08:19.410
So that's quite straight forward,
we need to create a method.
173

173

00:08:19.410  -->  00:08:23.950
And we'll call it, public void_add.
174

174

00:08:23.950  -->  00:08:25.310
We'll say add hamburger.
175

175

00:08:27.920  -->  00:08:32.520
Addition one, so
that's gonna take send two parameters.
176

176

00:08:32.520  -->  00:08:34.220
Which will be the name.
177

177

00:08:34.220  -->  00:08:36.670
The addition name and then also the price.
178

178

00:08:36.670  -->  00:08:38.560
How much we're charging for
that additional item.
179

179

00:08:38.560  -->  00:08:42.180
Then what we need to do is put,
this.addition1Name = name.
180

180

00:08:44.120  -->  00:08:48.940
This.addition2, it's all ready
addition1Price = price, like so, and
181

181

00:08:48.940  -->  00:08:51.220
that's literally all we need to do.
182

182

00:08:51.220  -->  00:08:53.860
We're just recording it,
we're not doing any validation.
183

183

00:08:53.860  -->  00:08:57.260
You could perhaps actually look at
doing that, but we won't do that now.
184

184

00:08:57.260  -->  00:09:00.800
Next we're going to copy and
paste the additional methods, and
185

185

00:09:00.800  -->  00:09:03.240
we'll just make them unique for number 2.
186

186

00:09:03.240  -->  00:09:06.570
Make sure we're actually
updating our number 2 methods,
187

187

00:09:06.570  -->  00:09:08.510
our number 2 fields I should say.
188

188

00:09:08.510  -->  00:09:09.010
3.
189

189

00:09:10.720  -->  00:09:11.220
And then 4.
190

190

00:09:12.750  -->  00:09:14.760
So we've now got a mechanism
now to add our 4 additions.
191

191

00:09:14.760  -->  00:09:18.030
So that's pretty straight
forward as you can see there.
192

192

00:09:18.030  -->  00:09:21.560
And really the only other thing
we need to do at this point,
193

193

00:09:21.560  -->  00:09:25.740
is we need to create a method that
enables us to actually go through and
194

194

00:09:25.740  -->  00:09:28.430
actually add up the price
of the hamburger.
195

195

00:09:28.430  -->  00:09:30.920
So what it should do is,
it should actually record or
196

196

00:09:30.920  -->  00:09:34.590
start with the base price, then go
through and check whether we've actually
197

197

00:09:34.590  -->  00:09:37.990
received an additional item for
each one of these 1, 2, 3, and 4.
198

198

00:09:37.990  -->  00:09:40.610
And if so, to add the price for
that to the total.
199

199

00:09:40.610  -->  00:09:43.890
So what I'm going to do is create
a method called, itemize hamburger.
200

200

00:09:43.890  -->  00:09:46.000
We'll call it public.
201

201

00:09:46.000  -->  00:09:49.250
Now, we're going to
actually return double.
202

202

00:09:49.250  -->  00:09:52.380
And the double is going to be
the total price of the hamburger,
203

203

00:09:52.380  -->  00:09:55.470
including all the additional items,
if any.
204

204

00:09:55.470  -->  00:09:58.050
So we're gonna call it, itemizeHamburger.
205

205

00:10:00.000  -->  00:10:01.600
Now what we need to do is,
206

206

00:10:01.600  -->  00:10:06.810
in order to do that we're gonna create
a local variable called hamburgerPrice.
207

207

00:10:06.810  -->  00:10:09.900
We're gonna set that
initially to this.price.
208

208

00:10:09.900  -->  00:10:11.350
So that's the basic price for
209

209

00:10:11.350  -->  00:10:14.510
the hamburger that was passed
to us in the constructor.
210

210

00:10:14.510  -->  00:10:18.820
So now what we need to do is we need to
go through each of the four additions and
211

211

00:10:18.820  -->  00:10:21.660
determine whether there was an addition
that was passed, and if so,
212

212

00:10:21.660  -->  00:10:22.820
to add that to the price.
213

213

00:10:22.820  -->  00:10:24.430
But what we'll also do is we'll start out,
214

214

00:10:24.430  -->  00:10:27.470
we'll just put a line of output here
just to confirm what we're doing.
215

215

00:10:27.470  -->  00:10:29.370
So we're gonna put the name,
so, this.name.
216

216

00:10:31.180  -->  00:10:32.360
Name of the hamburger.
217

217

00:10:34.400  -->  00:10:39.050
Hamburger " + " on a ",
so just type of bun,
218

218

00:10:39.050  -->  00:10:46.350
+ this.breadRollType, and
we'll just put the word roll after that.
219

219

00:10:48.180  -->  00:10:55.140
And we'll put + "price is " + this.price,
220

220

00:10:55.140  -->  00:10:59.850
the price of the hamburger.
221

221

00:10:59.850  -->  00:11:02.060
So what that's showing at
the moment is the basic,
222

222

00:11:02.060  -->  00:11:04.830
just really an outputting
the basic price for the hamburger.
223

223

00:11:04.830  -->  00:11:05.470
Okay, so
224

224

00:11:05.470  -->  00:11:09.640
next what we need to do is go through each
of the components as I've mentioned, and
225

225

00:11:09.640  -->  00:11:13.570
check to see whether they've been added,
or have been passed I should say.
226

226

00:11:13.570  -->  00:11:15.790
And if so,
to actually add that to the price.
227

227

00:11:15.790  -->  00:11:21.040
So, the way we can do that,
we can put if (this.addition1Name)
228

228

00:11:21.040  -->  00:11:23.740
if that's not equal to null.
229

229

00:11:23.740  -->  00:11:27.480
If it's not equal to null, what that means
is that we have had some sent, or so
230

230

00:11:27.480  -->  00:11:31.700
if that's the case, we're going
to increment the hamburger price
231

231

00:11:31.700  -->  00:11:36.510
HamburgerPrice + =, and
that would be, this.addition1Price.
232

232

00:11:36.510  -->  00:11:40.480
So adding the price of that,
the first additional item,
233

233

00:11:40.480  -->  00:11:41.940
because we've determined there is one.
234

234

00:11:41.940  -->  00:11:45.880
Then what we're also going to do is, we're
going to actually output that as well,
235

235

00:11:45.880  -->  00:11:53.620
we're gonna put Added " +
this.addition1Name + " for
236

236

00:11:53.620  -->  00:11:59.480
an extra this.addition1Price.
237

237

00:11:59.480  -->  00:12:03.080
So we're just going to output to say
that we've added the additional item and
238

238

00:12:03.080  -->  00:12:04.550
how much extra it was.
239

239

00:12:04.550  -->  00:12:06.450
And the previous line we've
already tallied that up and
240

240

00:12:06.450  -->  00:12:09.330
we've actually added that to
the overall price for the hamburger.
241

241

00:12:09.330  -->  00:12:10.650
So we now need to do that for
the other three items.
242

242

00:12:13.180  -->  00:12:14.040
Like so.
243

243

00:12:14.040  -->  00:12:16.030
And then we'll just change those,
244

244

00:12:16.030  -->  00:12:19.240
making sure that we're
selecting the right items here.
245

245

00:12:25.870  -->  00:12:30.540
Addition 3.
Scroll down a bit so
246

246

00:12:30.540  -->  00:12:31.810
we can see what we're doing.
247

247

00:12:31.810  -->  00:12:34.240
And then the last one will be addition 4.
248

248

00:12:38.080  -->  00:12:39.230
Like so.
249

249

00:12:39.230  -->  00:12:43.500
So, I've now gone through and tested
number 1, number 2, number 3 and number 4.
250

250

00:12:43.500  -->  00:12:47.440
So we've started on the base price,
with the base price for the hamburger and
251

251

00:12:47.440  -->  00:12:49.880
we've actually added each
of those additional items,
252

252

00:12:49.880  -->  00:12:53.250
putting some output onto the screen
to tell us what we actually added.
253

253

00:12:53.250  -->  00:12:54.850
And we've added that to the overall price.
254

254

00:12:54.850  -->  00:12:58.760
So of course the last thing we really need
to do now is just to return that price.
255

255

00:12:58.760  -->  00:13:01.250
We can do that with returnHamburgerPrice.
256

256

00:13:02.630  -->  00:13:05.070
So, that's it.
That's now our base hamburger class.
257

257

00:13:05.070  -->  00:13:07.950
Let's just write some code
just to quickly check that
258

258

00:13:07.950  -->  00:13:09.560
it's doing what it should be doing.
259

259

00:13:09.560  -->  00:13:10.990
So we can go back to our main method.
260

260

00:13:10.990  -->  00:13:13.670
I'm just going to make a bit of space
here to get rid of all those comments,
261

261

00:13:13.670  -->  00:13:14.910
which we don't need anymore.
262

262

00:13:14.910  -->  00:13:16.850
So, a basic bit of code to test.
263

263

00:13:16.850  -->  00:13:22.980
We'll start with hamburger_hamburger
= new hamburger, hamburger.
264

264

00:13:22.980  -->  00:13:25.460
And let's start with,
we'll just call it our Basic.
265

265

00:13:26.600  -->  00:13:28.530
That's going to be
the name we're assigning.
266

266

00:13:28.530  -->  00:13:29.830
The meat, let's call it Sausage.
267

267

00:13:32.350  -->  00:13:39.160
The price will start at $3.56 and the
bread roll type, we'll just call it White.
268

268

00:13:39.160  -->  00:13:40.190
A White roll.
269

269

00:13:40.190  -->  00:13:45.130
So that's our base constructor and what
we can also then do, what we'll do first,
270

270

00:13:45.130  -->  00:13:46.290
let's just output that.
271

271

00:13:46.290  -->  00:13:49.060
So what we're going to do is
we're going to return the price.
272

272

00:13:49.060  -->  00:13:55.600
So, double price =
hamburger.itemizedhamburger.
273

273

00:13:55.600  -->  00:13:57.500
That will return the price, firstly,
274

274

00:13:57.500  -->  00:14:00.370
but also it will actually
show us those outputs.
275

275

00:14:00.370  -->  00:14:03.210
So let's run that and
actually just check that it is working.
276

276

00:14:03.210  -->  00:14:03.710
So we'll run it.
277

277

00:14:06.490  -->  00:14:09.340
And I'll just make a bit of space so
we can see what we're doing.
278

278

00:14:11.140  -->  00:14:14.480
You're gonna see basic hamburger
on a white roll, price is $3.56.
279

279

00:14:14.480  -->  00:14:18.600
So you can see basic on a white roll,
price is $3.56.
280

280

00:14:18.600  -->  00:14:21.040
That's good.
We didn't actually output the message for
281

281

00:14:21.040  -->  00:14:23.540
the topper mate but
we can do that shortly.
282

282

00:14:23.540  -->  00:14:26.190
And just to confirm that it is working,
let's add a few items.
283

283

00:14:26.190  -->  00:14:30.640
So I'll put
hamburger.addHamburgerAddition1, and
284

284

00:14:30.640  -->  00:14:37.800
we'll say that's "tomato", and
let's just say that was $0.27, so $0.27.
285

285

00:14:37.800  -->  00:14:43.260
And we'll add another one,
hamburger.addHamburgerAddition2
286

286

00:14:43.260  -->  00:14:50.350
"Lettuce" $0.75 cents more, and
then hamburger.addHamburgerAddition3,
287

287

00:14:50.350  -->  00:14:54.800
one more, let's say some "Cheese", $1.12.
288

288

00:14:54.800  -->  00:14:57.840
So we've added those three items.
289

289

00:14:57.840  -->  00:15:00.780
So let's go back here and
calculate that again.
290

290

00:15:00.780  -->  00:15:02.700
This time I'll actually won't try and
291

291

00:15:02.700  -->  00:15:06.340
recreate the variable because
we've already created it above.
292

292

00:15:06.340  -->  00:15:06.840
Run it.
293

293

00:15:09.340  -->  00:15:13.020
So we've now got, it's outputting it twice
but in the first time you can see it's
294

294

00:15:13.020  -->  00:15:15.860
putting the basic hamburger on
a white roll, price is $3.56.
295

295

00:15:15.860  -->  00:15:17.750
Add a tomato for an extra 27.
296

296

00:15:17.750  -->  00:15:18.970
Which you can see there.
297

297

00:15:18.970  -->  00:15:20.580
Added lettuce for 75.
298

298

00:15:20.580  -->  00:15:22.600
Added cheese for an extra 12.
299

299

00:15:22.600  -->  00:15:25.990
What we should probably do here is
then put, let's change this to.
300

300

00:15:25.990  -->  00:15:30.120
Total burger price is, and
301

301

00:15:30.120  -->  00:15:37.520
we'll get rid of the variable there,
because we can actually just use
302

302

00:15:37.520  -->  00:15:42.500
that with it there to call the method and
it returns the result of the price anyway.
303

303

00:15:42.500  -->  00:15:43.490
So lets try running that.
304

304

00:15:46.170  -->  00:15:50.070
And we should be right so to just make
sure that's working, let's just change
305

305

00:15:50.070  -->  00:15:53.020
that to a double 13 so it's actually
got the right decimal points.
306

306

00:15:53.020  -->  00:15:57.540
Later in this course,
I'll show you how you can actually format
307

307

00:15:57.540  -->  00:16:01.240
these numbers so they come out correctly.
308

308

00:16:01.240  -->  00:16:03.040
So $3.56 plus .27 plus .75 plus $1.13.
309

309

00:16:03.040  -->  00:16:04.030
$5.71 all together.
310

310

00:16:04.030  -->  00:16:05.820
And just the other thing
that I said I would do.
311

311

00:16:05.820  -->  00:16:07.010
Let's also change this.
312

312

00:16:08.130  -->  00:16:08.760
We'll put with.
313

313

00:16:08.760  -->  00:16:15.420
This.meat + "," price is that.
314

314

00:16:15.420  -->  00:16:17.400
Just so we're actually also recording or
315

315

00:16:17.400  -->  00:16:21.480
showing on the screen the type of
meat to make sure that's working.
316

316

00:16:21.480  -->  00:16:23.190
You can see that's now
working on the screen there.
317

317

00:16:23.190  -->  00:16:26.550
With sausage prices $3.56 and
added tomato, etc.
318

318

00:16:26.550  -->  00:16:30.820
So, we've got the basic component working
here, we got our basic hamburger working.
319

319

00:16:30.820  -->  00:16:32.680
We're gonna stop the video now,
cuz it's getting a bit long.
320

320

00:16:32.680  -->  00:16:35.580
In the next video, we'll come back and
we'll actually look at the healthy burger
321

321

00:16:35.580  -->  00:16:38.490
and the deluxe burger and
add those to our application.
322

322

00:16:38.490  -->  00:16:39.810
So, I'll see you in that next video.
