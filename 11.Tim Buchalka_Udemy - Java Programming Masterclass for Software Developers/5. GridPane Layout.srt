1
1

00:00:05,200  -->  00:00:11,360
ok so moving on we are now going to talk about
layouts now what with JavaFX layouts allow
2

2

00:00:11,360  -->  00:00:16,520
us to add controls which are UI
components to a container without having
3

3

00:00:16,520  -->  00:00:21,450
to write the code required to manage the
positioning and also the resizing
4

4

00:00:21,450  -->  00:00:25,460
behaviour of those controls now the layout
will manage all of that for us which is
5

5

00:00:25,460  -->  00:00:31,520
pretty cool so JavaFX has got 8 layouts and you
don't need to memorize this but the eight
6

6

00:00:31,520  -->  00:00:40,680
layouts are called the grid pane the anchor pane the
stack pane h box v box flow pane
7

7

00:00:40,680  -->  00:00:46,000
tile pane and also the border pane
now before we get into playing with
8

8

00:00:46,000  -->  00:00:51,390
layouts I just want to discuss what I mean
by the preferred size for JavaFX controls
9

9

00:00:51,390  -->  00:00:56,390
because preferred sizes is actually an
important concept so every control
10

10

00:00:56,390  -->  00:01:01,340
computes its preferred size based on its
contents so what i'm talking about
11

11

00:01:01,340  -->  00:01:05,950
preferred size what I mean is the
preferred width and height of the
12

12

00:01:05,950  -->  00:01:10,730
control when it's displayed as an
example JavaFX has got a button control
13

13

00:01:10,730  -->  00:01:14,920
now obviously if your familiar with buttons
especially ones for ok and cancel which
14

14

00:01:14,920  -->  00:01:20,420
we've seen in applications in the past by
default the button control will size itself so
15

15

00:01:20,420  -->  00:01:24,280
there's enough room to display its
content whatever is actually in their you know text
16

16

00:01:24,280  -->  00:01:28,310
in other words so if we were working
with an ok button the button control
17

17

00:01:28,310  -->  00:01:32,240
will size itself so that it's border fits
around that text ok in this example
18

18

00:01:32,240  -->  00:01:37,520
so it wouldn't stretched itself across the width of the entire window for example it will only be just
19

19

00:01:37,520  -->  00:01:42,520
wide enough to accept that text so layouts often used a preferred size of the
20

20

00:01:42,520  -->  00:01:47,490
controls they are laying out to determine how
much space I control I ultimately
21

21

00:01:47,490  -->  00:01:53,060
get so when the controller is placed into
a layout it becomes a child of that
22

22

00:01:53,060  -->  00:01:58,160
layout so some layouts will ensure that
their children display at the preferred
23

23

00:01:58,160  -->  00:02:02,300
widths or heights and sometimes it
would depend on where controllers place
24

24

00:02:02,300  -->  00:02:07,560
within the layout so that's the theory
let's actually get started and go through
25

25

00:02:07,560  -->  00:02:10,120
what some of this looks like in code so
26

26

00:02:10,120  -->  00:02:14,650
so I'm gonna start a new project now click
on new project and as before I'm
27

27

00:02:14,650  -->  00:02:20,510
gonna choose JavaFX here making sure I got the correct project SDK as you can see and I'm
28

28

00:02:20,510  -->  00:02:30,470
gonna call this one layouts put in the right
folder for me for my Java programs and click on finish ok to
29

29

00:02:30,470  -->  00:02:37,420
create the folder and what we are going to do firstly you will see as per normal what
30

30

00:02:37,420  -->  00:02:44,570
IntelliJ has done is it has created a default project for us you can see it is a default code that has been added which
31

31

00:02:44,570  -->  00:02:48,950
we talked about in the previous example
so that's the default you can see on line 15
32

32

00:02:48,950  -->  00:03:01,200
at the moment it is set to 300 275 and if we run that to confirm what it does their is our window so that's
33

33

00:03:01,200  -->  00:03:05,260
fine let's give ourselves a bit more space
to work with so I'm going to change that
34

34

00:03:05,260  -->  00:03:14,200
so lets change this 300 being the width to 500 run it again so you can see the window
35

35

00:03:14,200  -->  00:03:18,860
now stretches wider because we've told it to increase the width from 300 to
36

36

00:03:18,860  -->  00:03:25,930
500 so that's good so lets now take a look at some code and what we are going do is look at the grid pane and the
37

37

00:03:25,930  -->  00:03:28,870
reason for that is that's the layout
used in the generator project by default
38

38

00:03:28,870  -->  00:03:32,800
so we don't have to change it to see
that now from the grid pane
39

39

00:03:32,800  -->  00:03:36,090
documentation grid pane lays out its
children
40

40

00:03:36,090  -->  00:03:40,520
inflexible rows and columns in other
words it lays out its children in a grid
41

41

00:03:40,520  -->  00:03:45,200
hence the name grid pane now each
position in a grid is called a cell
42

42

00:03:45,200  -->  00:03:49,550
by default rows and columns will be size
again to fit their content which we've
43

43

00:03:49,550  -->  00:03:54,800
talked about and a row can be as
tall as the tallest controller it contains and a
44

44

00:03:54,800  -->  00:03:59,800
column will be as wide as the widest
control it contains so switching back
45

45

00:03:59,800  -->  00:04:08,350
to the fxml and you can see on line 2 we got an import
their for grid pane and obviously line 6
46

46

00:04:08,350  -->  00:04:13,010
relating you can see the word grid pane their so that's basically a grid pane layout that has been
47

47

00:04:13,010  -->  00:04:14,250
configured
48

48

00:04:14,250  -->  00:04:19,650
so what we're going to do is add 5
buttons to this grid pane so we used the
49

49

00:04:19,650  -->  00:04:23,900
button controller in JavaFX to create
ok buttons cancel buttons or any other
50

50

00:04:23,900  -->  00:04:29,150
type of button the application needs we are gonna use the Text property in this example
51

51

00:04:29,150  -->  00:04:32,560
to set it to different values so that we can see what they look like so I'm gonna
52

52

00:04:32,560  -->  00:04:37,160
go ahead now and add that so I'm going to come down here within the grid pane because
53

53

00:04:37,160  -->  00:04:40,940
we're saying we're adding a child of
the grid pane layout so we're adding a
54

54

00:04:40,940  -->  00:04:47,780
button which is part of that layout and will type.....
55

55

00:04:47,780  -->  00:05:06,860
.....
56

56

00:05:12,600  -->  00:05:17,810
.....
57

57

00:05:17,810  -->  00:05:34,020
..so if we run this application now so you can see what's
58

58

00:05:34,020  -->  00:05:38,060
happened their the actual buttons are
stacked on top of each other and that's
59

59

00:05:38,060  -->  00:05:43,100
the reason that is we didn't specify a
row and column for each button so because
60

60

00:05:43,100  -->  00:05:46,150
we are using a grid pane we need to do
that in order to get them to appear
61

61

00:05:46,150  -->  00:05:49,830
how we would expect them to do in the
right area without overlapping each
62

62

00:05:49,830  -->  00:05:56,650
other so I'm gonna close it down again and incidentally running it again by not specifying a
63

63

00:05:56,650  -->  00:06:00,530
row and column for each button the grid pane is adding all the buttons in the default
64

64

00:06:00,530  -->  00:06:05,170
position so in that case you are wondering why this is
happening why this is overlapping the
65

65

00:06:05,170  -->  00:06:11,560
default position is row 0 column 0 and basically
the buttons have all appeared in that same
66

66

00:06:11,560  -->  00:06:16,020
row and columns and that's why they're
actually overlapping so going back to the fxml
67

67

00:06:16,020  -->  00:06:19,950
we can actually change so
we can come in here for each part so we can
68

68

00:06:19,950  -->  00:06:23,460
type...
69

69

00:06:23,460  -->  00:06:37,300
...so what I'm going to do
70

70

00:06:37,300  -->  00:06:43,410
is just copy that now for each of the other
buttons then adjust the row number and
71

71

00:06:43,410  -->  00:06:54,800
the column number for each after we have done that so........ok so the first one we're going to put at
72

72

00:06:54,800  -->  00:06:55,610
row
73

73

00:06:55,610  -->  00:07:04,740
index 0 column index 0 which is the default as we saw and the second one we are going to put on column 1 for the third one
74

74

00:07:04,740  -->  00:07:08,860
lets go to a new row because we only want 2 buttons on the same
row so it's gonna be row one
75

75

00:07:09,420  -->  00:07:15,110
remembering the counts starts from 0 so we start on column
index 0 for that one and in the second one
76

76

00:07:15,110  -->  00:07:24,560
we are gonna put.....and finally the 5th button 5th and last button we're
77

77

00:07:24,560  -->  00:07:30,620
going to put on row 2 and also leave that in column index 0 so if we run that now we should find
78

78

00:07:30,620  -->  00:07:35,940
we can see all the buttons and again if I
just put this down so we can see the code a little
79

79

00:07:35,940  -->  00:07:42,090
bit as well we are now seeing what we expect though we got button 1 and 2 on row 0 which of
80

80

00:07:42,090  -->  00:07:46,750
course is because we've coded it that way on lines 8 and 9 button 3 and 4 are both
81

81

00:07:46,750  -->  00:07:54,320
on row index 1 which is the second row
as you can see and the button 5 is on row index 2 and obviously from a
82

82

00:07:54,320  -->  00:07:58,850
column position[ going left to right when we are adding
them as we increase the column index the
83

83

00:07:58,850  -->  00:08:04,080
controllers get added automatically left to
right in the column and of course row as you
84

84

00:08:04,080  -->  00:08:07,980
can see is adding them top to bottom so
it's basically doing what would expect
85

85

00:08:07,980  -->  00:08:12,040
the other thing to note is that each column is
the width of the widest controller in that
86

86

00:08:12,040  -->  00:08:15,550
column so that's another important
thing to keep in mind their so you can see
87

87

00:08:15,550  -->  00:08:21,260
that it's keeping enough space to hook this button in forward places as well now as for the
88

88

00:08:21,260  -->  00:08:24,670
rows we can't really see this here because
our buttons have the same height so we can't
89

89

00:08:24,670  -->  00:08:27,200
see whether it's actually made
them longer or anything
90

90

00:08:27,200  -->  00:08:33,500
on those lines but each row is the heigh
of the tallest controller in the row so
91

91

00:08:33,500  -->  00:08:37,030
if we had a taller control in one of the rows
for argument sake the rows height
92

92

00:08:37,030  -->  00:08:41,830
would be greater than the other rows
now when IntelliJ IDEA generates the
93

93

00:08:41,830  -->  00:08:46,980
grid pane definition for us as we
created a new project it set the I'm
94

94

00:08:46,980  -->  00:08:54,110
talking on the code on line 7 it has set the h gap the v gap the
alignment properties and now we are where
95

95

00:08:54,110  -->  00:08:58,060
what we can now start seeing what they
actually do so the alignment is set to
96

96

00:08:58,060  -->  00:09:02,580
center and so the grid is centred with the grid panes width and height and you can see
97

97

00:09:02,580  -->  00:09:07,010
that basically it's using the middle
part of the Windows so in other words the
98

98

00:09:07,010  -->  00:09:10,780
grid pane is occupying the entire
window and the grid is centred within
99

99

00:09:10,780  -->  00:09:14,080
that window is the point I'm trying to
make their so we can see that
100

100

00:09:14,080  -->  00:09:17,490
we probably can't see easily but there
is actually a 10 pixel gap between
101

101

00:09:17,490  -->  00:09:22,810
the rows and the reason that's
happening is of course we've got h gap and
102

102

00:09:22,810  -->  00:09:26,760
v gap set to 10 up here on
line 7 and that's also taking into
103

103

00:09:26,760  -->  00:09:31,870
account the gaps between rows there you can see or you can't see but their is 10
104

104

00:09:31,870  -->  00:09:37,010
pixels between each row and again that's got
to do with the v gap we defined and looking at the
105

105

00:09:37,010  -->  00:09:41,440
the gap their is also a 10 pixel gap between the columns in the second row as
106

106

00:09:41,440  -->  00:09:45,800
specified by h gap so the gap
looks larger for the first row because
107

107

00:09:45,800  -->  00:09:49,860
the first button doesn't occupy the
entire width of it cell so help us see
108

108

00:09:49,860  -->  00:09:53,680
this we can use a debugging property that
grid pane has so we will set the grid lines
109

109

00:09:53,680  -->  00:09:58,890
visible property to true and now when we run the application you
will be able to see this little bit more
110

110

00:09:58,890  -->  00:10:05,240
details so I'm going to close it down then
come ahead here on to line 7 and I'll just press
111

111

00:10:05,240  -->  00:10:08,460
enter their and tab over and do....
112

112

00:10:08,460  -->  00:10:15,140
....so we can actually see this
a little bit more detailed so if I run this now
113

113

00:10:18,600  -->  00:10:22,950
so now you can see that the grid lines and the 10 pixel gap between the rows and
114

114

00:10:22,950  -->  00:10:28,010
columns buttons 1 3 and 5 have
stretch to fill the width of their cells so
115

115

00:10:28,010  -->  00:10:32,030
that's why it appears it has a larger gap between
the first and third columns but there
116

116

00:10:32,030  -->  00:10:37,130
really isn't as you can see so the grid lines
properties useful when the children in a
117

117

00:10:37,130  -->  00:10:41,780
grid pane don't appear the way we expect so any
time you've got difficulties and things
118

118

00:10:41,780  -->  00:10:47,090
that aren't aligning the way you think they should be make sure you do something like on line 8 where I
119

119

00:10:47,090  -->  00:10:52,820
added gridlines visible equals true and you can see
these lines appearing quite helpfully
120

120

00:10:52,820  -->  00:10:57,160
sort of showing you what's going on
so it does help you debug the actual
121

121

00:10:57,160  -->  00:11:01,160
problem the next thing to think about
now is what happens when we resize the
122

122

00:11:01,160  -->  00:11:05,250
window containing the grid pane so
we'll see that the grid remains in the
123

123

00:11:05,250  -->  00:11:11,860
center so lets just do that and notice the grid is actually
staying in the center so as we go
124

124

00:11:11,860  -->  00:11:16,970
smaller or larger its still centering
itself automatically the reason for that
125

125

00:11:16,970  -->  00:11:21,980
is its alignment is set to center but that
said it doesn't resize because its
126

126

00:11:21,980  -->  00:11:25,820
already large enough to accommodate the
children in all its cells so let's add
127

127

00:11:25,820  -->  00:11:29,590
some more text another button to make
it really really long and see what
128

128

00:11:29,590  -->  00:11:34,900
actually happens so come back here to
our already ;long one really long button
129

129

00:11:34,900  -->  00:11:40,920
4 i'm just gonna put more text....
130

130

00:11:44,880  -->  00:11:54,000
that should be enough so if we run this again now so you can see the text for most other buttons have been cut off particularly
131

131

00:11:54,000  -->  00:12:01,970
the ones now in the first column but
when we resize the window see that the
132

132

00:12:01,970  -->  00:12:05,500
grid pane will resize until it's large
enough to accommodate all its children so once its
133

133

00:12:05,500  -->  00:12:09,000
resize to that level it doesn't try
resizing anymore so again just going back
134

134

00:12:09,000  -->  00:12:14,330
down smaller you can see that with the
three dots is indicating that its not feeting but if I keep
135

135

00:12:14,330  -->  00:12:18,780
resizing eventually it will get to that size and
now it's just changing or just
136

136

00:12:18,780  -->  00:12:22,680
moving the alignment to be centred but its not
actually resizing anymore and the reason for that
137

137

00:12:22,680  -->  00:12:28,280
is that it's large enough to contain all
the text for each child so right now the
138

138

00:12:28,280  -->  00:12:34,670
rows and columns have been sized based on
the grid panes default behaviour so when we
139

139

00:12:34,670  -->  00:12:37,740
change button four's text to be really
really long as you saw it
140

140

00:12:37,740  -->  00:12:44,420
just put it down a little bit so you can see the code so initially grid pane gave more space to the second column because the text was so
141

141

00:12:44,420  -->  00:12:52,340
long as before we resize it but I'll just run it again just to confirm what I'm talking about here so obviously it gave more a more
142

142

00:12:52,340  -->  00:12:55,580
of a small size here to try and
accommodate as much of the texts as it
143

143

00:12:55,580  -->  00:12:59,720
can actually fit in now what if we always want each column to be given fifty percent of the
144

144

00:12:59,720  -->  00:13:03,420
grid panes width for argument sake that can
be quite handy to do we can actually
145

145

00:13:03,420  -->  00:13:07,450
do that  easily we can use the columns
constraints class so lets just to have a look at
146

146

00:13:07,450  -->  00:13:12,720
that's so closes this down and the way we
do that is we actually come here
147

147

00:13:12,720  -->  00:13:17,400
after grid pane before our 1st button press enter their and type....
148

148

00:13:18,860  -->  00:13:27,360
......
149

149

00:13:27,860  -->  00:13:38,450
......
150

150

00:13:43,330  -->  00:13:49,240
....so what we doing there is we are using the column
constraints class to set the initial
151

151

00:13:49,240  -->  00:13:55,570
width of each column and we can actually
use pixels or via percentage now the thing here to
152

152

00:13:55,570  -->  00:13:59,950
remember is that the ordering is
important we add a column constraints child
153

153

00:13:59,950  -->  00:14:03,060
element to the grid and within it we add a
column constraints element for each
154

154

00:14:03,060  -->  00:14:07,550
columns so each one of these that we're
adding within this column constraints
155

155

00:14:07,550  -->  00:14:12,680
sort of block is the column the
percentage width for the column in order
156

156

00:14:12,680  -->  00:14:16,140
so the ordering is actually important
here so the first column
157

157

00:14:16,140  -->  00:14:19,360
contraints element will apply to the first
column the second to the second column
158

158

00:14:19,360  -->  00:14:26,570
etc so lets run that so you can see columns each column now occupies
159

159

00:14:26,570  -->  00:14:31,060
50% of the width we also notice that the grid occupies the full width of the window
160

160

00:14:31,060  -->  00:14:40,060
and I can make it bigger if we want...but notice when I'm making it bigger it is still utilizing the entire space of the window
161

161

00:14:40,060  -->  00:14:43,640
that's the important point here that's
because we told to grid pane that we want each column
162

162

00:14:43,640  -->  00:14:47,880
to be fifty percent of its width
rather than being only large enough to
163

163

00:14:47,880  -->  00:14:52,380
accommodate the widest controls
preferred width so lets now delete the columns
164

164

00:14:52,380  -->  00:15:01,440
constraints again actually I'm just gonna comment that out and run it again to
make sure it's working
165

165

00:15:03,070  -->  00:15:06,720
and we are back to the behaviour we want before and we can make this a bit bigger and is now
166

166

00:15:06,720  -->  00:15:11,840
aligning to the center and the notice
how it is not using the full columns spacing again because we
167

167

00:15:11,840  -->  00:15:16,420
removed the column constraints alright I'm gonna end the
video here in the next one we are gonna
168

168

00:15:16,420  -->  00:15:21,810
continue on and we are gonna start looking at
alignment at the moment we've got alignment
169

169

00:15:21,810  -->  00:15:26,320
working by default based on what
was generated the cpde that was
170

170

00:15:26,320  -->  00:15:30,700
generated by IntelliJ going to the
center but will look at moving this around
171

171

00:15:30,700  -->  00:15:32,740
and aligning it at different areas in the next
video
