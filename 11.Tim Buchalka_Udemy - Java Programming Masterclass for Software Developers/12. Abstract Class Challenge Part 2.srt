1
1

00:00:05,120  -->  00:00:07,890
So, in the previous video,
we started our abstract class challenge,
2

2

00:00:07,890  -->  00:00:11,190
the solution, and I want to actually
finish it up, hopefully, this video.
3

3

00:00:11,190  -->  00:00:14,210
Before I actually continue on with the
code, there is actually a way to shortcut
4

4

00:00:14,210  -->  00:00:18,510
a little bit of this code, and I'm talking
specifically about the add item method,
5

5

00:00:18,510  -->  00:00:23,380
which is of course in the my linked list
class that we created in the last video.
6

6

00:00:23,380  -->  00:00:25,690
And the reason we can
actually shortcut the code,
7

7

00:00:25,690  -->  00:00:29,700
is relating to the methods set next and
set previous.
8

8

00:00:29,700  -->  00:00:31,770
Of course if I click through to those.
9

9

00:00:31,770  -->  00:00:35,760
We actually go to the abstract class,
and that's our list item.
10

10

00:00:35,760  -->  00:00:37,240
Set next and set previous.
11

11

00:00:37,240  -->  00:00:39,080
And of course we implemented
that in our nodes.
12

12

00:00:39,080  -->  00:00:40,260
I'm going to the node.
13

13

00:00:40,260  -->  00:00:42,850
You can see, set next,
we're actually setting the item, and
14

14

00:00:42,850  -->  00:00:47,530
then we're actually returning the item
as well, and same for set previous, so
15

15

00:00:47,530  -->  00:00:51,410
because we're actually returning that
reference in here, what we can do is,
16

16

00:00:51,410  -->  00:00:53,660
we can actually shortcut
some of our actual code.
17

17

00:00:53,660  -->  00:00:57,100
Cause, at the moment, you can see,
every time we actually add a new time,
18

18

00:00:57,100  -->  00:00:59,620
we've gotta set the the set next and
the set previous,
19

19

00:00:59,620  -->  00:01:02,070
unless of course it's a new item for
the first time.
20

20

00:01:02,070  -->  00:01:05,130
But most times we're gonna
be executing both of those.
21

21

00:01:05,130  -->  00:01:07,640
We can actually shortcut that by
actually doing something like this.
22

22

00:01:07,640  -->  00:01:10,960
We can actually put [SOUND]
dot set previous [SOUND],
23

23

00:01:10,960  -->  00:01:13,580
and then pass the current item as well.
24

24

00:01:15,890  -->  00:01:16,710
[SOUND].
25

25

00:01:16,710  -->  00:01:18,190
And that's actually an abbreviation,
26

26

00:01:18,190  -->  00:01:20,770
instead of having two lines you're
doing it all in the one line.
27

27

00:01:20,770  -->  00:01:22,550
And again,
this relies on the fact that, a,
28

28

00:01:22,550  -->  00:01:25,740
the method is actually
returning the right item.
29

29

00:01:25,740  -->  00:01:28,170
We can actually achieve that,
so we're returning that and
30

30

00:01:28,170  -->  00:01:31,730
then we're setting the set previous and
we're calling the set previous method
31

31

00:01:31,730  -->  00:01:34,920
on the item that's been returned from
the set next if that makes sense.
32

32

00:01:34,920  -->  00:01:36,430
We're actually doing that as well.
33

33

00:01:36,430  -->  00:01:38,420
That's the first one,
we can actually change, but
34

34

00:01:38,420  -->  00:01:40,500
we can also make a change, also down here.
35

35

00:01:40,500  -->  00:01:44,860
You can do the same thing for
that, we can do set previous.
36

36

00:01:50,030  -->  00:01:53,650
Like so, and then with this one down here,
we can do exactly the same thing again.
37

37

00:01:57,770  -->  00:01:59,560
Like so, which abbreviates it.
38

38

00:01:59,560  -->  00:02:02,400
And then the final else down here
can actually do the same thing to
39

39

00:02:02,400  -->  00:02:03,050
that as well.
40

40

00:02:06,520  -->  00:02:07,080
[SOUND].
41

41

00:02:07,080  -->  00:02:09,490
Just a way to abbreviate
the amount of code.
42

42

00:02:09,490  -->  00:02:13,170
And again, it's reliant on the fact that
we're actually returning the item and
43

43

00:02:13,170  -->  00:02:16,450
then recalling the method based on
the item that's actually returned.
44

44

00:02:16,450  -->  00:02:18,230
Okay so
in order to actually test this code,
45

45

00:02:18,230  -->  00:02:22,110
we actually need to actually start writing
some code for our traverse method.
46

46

00:02:23,860  -->  00:02:25,140
And it's actually not that hard.
47

47

00:02:25,140  -->  00:02:28,410
We can start off by putting a while loop.
48

48

00:02:28,410  -->  00:02:30,390
We start to make sure we've
actually got some data.
49

49

00:02:30,390  -->  00:02:32,800
While root is not equal to nul.
50

50

00:02:32,800  -->  00:02:34,540
[SOUND].
51

51

00:02:34,540  -->  00:02:39,290
Then we're gonna do [SOUND] system out
dot print line root dot get value.
52

52

00:02:39,290  -->  00:02:41,750
[SOUND].
53

53

00:02:41,750  -->  00:02:44,110
Then we'll do root equals root dot next.
54

54

00:02:44,110  -->  00:02:46,450
So we'll proceed to the next entry.
55

55

00:02:46,450  -->  00:02:48,100
So that's in the case
where there was some data.
56

56

00:02:48,100  -->  00:02:52,380
But it's probably gonna be wise to
actually also test to see whether it's
57

57

00:02:52,380  -->  00:02:57,070
nul, we can actually put a message to that
effect, so we can put something like if
58

58

00:02:57,070  -->  00:03:01,620
root is equal to nul [SOUND], then we'll
change that to the list is empty [SOUND],
59

59

00:03:01,620  -->  00:03:06,250
and we'll change this here to an else,
while, and I'll indent that code, and
60

60

00:03:06,250  -->  00:03:11,120
what I'll do is I'll just, actually,
put another semicolon in there, like so.
61

61

00:03:11,120  -->  00:03:13,420
And then it automatically
gets fixed up as you saw,
62

62

00:03:13,420  -->  00:03:15,860
by IntelliJ actually indented that for us.
63

63

00:03:15,860  -->  00:03:19,070
And now we should be after
output the actual link list,
64

64

00:03:19,070  -->  00:03:20,940
but also display if it's actually nul.
65

65

00:03:20,940  -->  00:03:21,720
I'm just going back and
66

66

00:03:21,720  -->  00:03:24,580
actually start running some code
to test some of this stuff.
67

67

00:03:24,580  -->  00:03:25,840
I'm going to go down
to our main method and
68

68

00:03:25,840  -->  00:03:28,240
you remember that we wrote that code
at the start, the split code and
69

69

00:03:28,240  -->  00:03:29,870
I'm going to start typing below that.
70

70

00:03:29,870  -->  00:03:32,600
Actually, I'm going to start typing above
that because we're actually going to be
71

71

00:03:32,600  -->  00:03:33,170
adding to that.
72

72

00:03:33,170  -->  00:03:34,140
So I'm going to put it here.
73

73

00:03:34,140  -->  00:03:39,590
I'm going to type linked list,
sorry my linked list, my link list,
74

74

00:03:39,590  -->  00:03:44,010
list equals new [SOUND],
link equals new my linked list.
75

75

00:03:44,010  -->  00:03:45,000
Nul.
76

76

00:03:46,430  -->  00:03:47,960
So, we haven't actually
added anything yet.
77

77

00:03:47,960  -->  00:03:52,380
And if we do a list dot traverse,
list dot get root.
78

78

00:03:52,380  -->  00:03:54,460
Let's see what actually happens.
79

79

00:03:54,460  -->  00:03:55,080
We'll actually run that first.
80

80

00:03:57,780  -->  00:03:58,800
The list is empty,
81

81

00:03:58,800  -->  00:04:03,320
so it's correctly showing us that there's
no data in the list, which is good.
82

82

00:04:03,320  -->  00:04:04,720
We can leave that code in there for
83

83

00:04:04,720  -->  00:04:08,690
splitting the various
capital cities of Australia.
84

84

00:04:08,690  -->  00:04:12,140
But what I'm gonna do now is actually put
this code in here now, write some code and
85

85

00:04:12,140  -->  00:04:13,680
actually put it in its place here.
86

86

00:04:13,680  -->  00:04:18,740
We're actually gonna add the item to our
linked list, to my linked list class.
87

87

00:04:18,740  -->  00:04:22,660
Let's add item, we're gonna call it,
new, we gonna create a new node,
88

88

00:04:22,660  -->  00:04:24,340
which courses our list item.
89

89

00:04:24,340  -->  00:04:28,430
The class that actually implements
the list item, abstract class.
90

90

00:04:28,430  -->  00:04:31,450
It's the class that is actually,
if you go back and have a look, node we're
91

91

00:04:31,450  -->  00:04:35,670
extending from list item, and of course
list item was our abstract class.
92

92

00:04:35,670  -->  00:04:36,930
I'm going back to that code.
93

93

00:04:36,930  -->  00:04:38,800
We're going to add a new node [SOUND],
94

94

00:04:38,800  -->  00:04:41,180
which is the actual
capital city in this case.
95

95

00:04:41,180  -->  00:04:44,990
That should add the title there,
as you can see, and just a confirmation.
96

96

00:04:44,990  -->  00:04:48,550
We talked about that briefly, but
the string split method returns a string
97

97

00:04:48,550  -->  00:04:53,040
arise, as you can see on the screen on
line 63 and then it turns a string array
98

98

00:04:53,040  -->  00:04:56,900
containing all the individual items of
the string, that we defined in line 61.
99

99

00:04:56,900  -->  00:05:00,320
They can specify the character
that separates the items.
100

100

00:05:00,320  -->  00:05:04,430
You can see on line 63 after the dot
split, how we actually got space.
101

101

00:05:04,430  -->  00:05:06,900
The space is effectively the delimiter.
102

102

00:05:06,900  -->  00:05:11,500
Or the character that sort of separates
each key string in that actual big string
103

103

00:05:11,500  -->  00:05:12,070
itself.
104

104

00:05:12,070  -->  00:05:16,640
Now we've done that, we'll actually put
another list in there, list dot traverse,
105

105

00:05:16,640  -->  00:05:20,270
traverse and list dot get root, so
we'll actually go through now and
106

106

00:05:20,270  -->  00:05:21,490
actually run it.
107

107

00:05:21,490  -->  00:05:22,670
The first time we run that,
108

108

00:05:22,670  -->  00:05:27,200
of course, we passed this list which
was effective at that point nul.
109

109

00:05:27,200  -->  00:05:30,220
But now if we do this, we've actually
got some data that we've added so
110

110

00:05:30,220  -->  00:05:31,870
we should get a different result.
111

111

00:05:31,870  -->  00:05:35,400
And you can see we've now got
the various cities, and we've also got
112

112

00:05:35,400  -->  00:05:38,450
an error message here, the site Canberra
is already present and not added.
113

113

00:05:38,450  -->  00:05:42,520
But the rest of the cities, Adelaide,
Brisbane, Canberra, Darwin Melvin, Perfis,
114

114

00:05:42,520  -->  00:05:45,030
and Sydney are actually added
in the correct order, and
115

115

00:05:45,030  -->  00:05:48,490
of course the reason that Canberra came up
as a duplicate was that we actually had it
116

116

00:05:48,490  -->  00:05:52,210
two times in that list purely to
confirm that that would actually work.
117

117

00:05:52,210  -->  00:05:55,050
Next we need to go back to
our my list link class.
118

118

00:05:55,050  -->  00:05:57,670
We need to implement the remove item.
119

119

00:05:57,670  -->  00:05:58,970
Currently, it's not actually implemented.
120

120

00:05:58,970  -->  00:06:00,310
It's just returning files.
121

121

00:06:00,310  -->  00:06:03,130
So what we need to do is be
able to actually delete items.
122

122

00:06:03,130  -->  00:06:07,130
Now, removing items is relatively
straightforward in a link list.
123

123

00:06:07,130  -->  00:06:10,150
We traverse the list until we
find the item to be removed.
124

124

00:06:10,150  -->  00:06:13,350
Then we set the previous
link to point to the where,
125

125

00:06:13,350  -->  00:06:16,310
to where our item to be deleted point,
if that makes sense.
126

126

00:06:16,310  -->  00:06:20,690
We're basically just sort of filling in
the gaps and making sure that we still got
127

127

00:06:20,690  -->  00:06:24,460
we're not actually off in creating
any off in records in the link list.
128

128

00:06:24,460  -->  00:06:27,180
Again, what we're trying to
do is set the previous link
129

129

00:06:27,180  -->  00:06:29,870
to point to where our item
to be deleted points.
130

130

00:06:29,870  -->  00:06:31,700
Let's go ahead and actually do that.
131

131

00:06:31,700  -->  00:06:33,470
First thing, I'm gonna test if it's nul.
132

132

00:06:33,470  -->  00:06:38,780
If item is not equal to nul, [SOUND] then
we're just gonna print out a message.
133

133

00:06:38,780  -->  00:06:45,600
So, [SOUND] deleting item
plus item dot get value.
134

134

00:06:45,600  -->  00:06:46,560
Like so.
135

135

00:06:48,100  -->  00:06:53,460
And next we wanna do a list item [SOUND],
current item equals this dot root,
136

136

00:06:53,460  -->  00:06:57,960
so I'll start at the top,
basically, the very first entry.
137

137

00:06:57,960  -->  00:07:02,710
While count item is not equal to nul.
138

138

00:07:02,710  -->  00:07:04,990
While we've still got some
records to basically go through.
139

139

00:07:04,990  -->  00:07:11,670
And then we're gonna type int comparison
equals current item dot compare to item,
140

140

00:07:11,670  -->  00:07:16,470
item which was the list item
that was passed to this method.
141

141

00:07:16,470  -->  00:07:21,470
if comparison, now remembering what we're
trying to do is actually find this item
142

142

00:07:21,470  -->  00:07:22,180
in the linked list.
143

143

00:07:22,180  -->  00:07:24,920
So we cannot do anything till we
actually find this specific one.
144

144

00:07:24,920  -->  00:07:28,060
And remember we wrote
the compare to function so
145

145

00:07:28,060  -->  00:07:31,250
we can do exact match to make sure
that we're deleting the right record.
146

146

00:07:31,250  -->  00:07:35,920
If comparison is equal to zero then that
means we've actually found the record to
147

147

00:07:35,920  -->  00:07:38,000
delete or found the item to delete.
148

148

00:07:38,000  -->  00:07:41,300
But we need to do a test to
see whether this is the root.
149

149

00:07:41,300  -->  00:07:43,520
If it's only one entry and
this is the root record,
150

150

00:07:43,520  -->  00:07:45,950
we need to do some
special processing there.
151

151

00:07:45,950  -->  00:07:50,190
Put current item equals this dot root,
so if this is the root record,
152

152

00:07:50,190  -->  00:07:54,950
the very first, the head, in other words
[SOUND], then we're going to type,
153

153

00:07:54,950  -->  00:07:59,350
this dot root equals current item
dot next, so we're basically making
154

154

00:07:59,350  -->  00:08:03,190
sure that we're setting root what
is going to be the new root.
155

155

00:08:03,190  -->  00:08:07,120
To point to what currently is pointing
to the next record if that makes sense.
156

156

00:08:07,120  -->  00:08:10,360
So we're deleting the first entry,
the root entry, and
157

157

00:08:10,360  -->  00:08:11,760
we're pointing it automatically.
158

158

00:08:11,760  -->  00:08:14,430
So it's actually pointing now
to what is the next list item.
159

159

00:08:14,430  -->  00:08:17,890
That list root is currently
pointing to with dot next.
160

160

00:08:17,890  -->  00:08:19,900
We're setting that, but
we haven't actually deleted it still yet.
161

161

00:08:19,900  -->  00:08:26,620
We'll do else current item dot previous
dot set next current Item dot next.
162

162

00:08:26,620  -->  00:08:31,520
Again what we're doing is we're looking at
the previous entry because this particular
163

163

00:08:31,520  -->  00:08:34,370
record, so
assuming this isn't the root record,
164

164

00:08:34,370  -->  00:08:38,270
we're looking at what is the previous
entry, and we know that there is
165

165

00:08:38,270  -->  00:08:42,610
a previous entry because I've already
tested to see whether there is a root.
166

166

00:08:42,610  -->  00:08:46,590
And we're setting that to point
to what is the current item next.
167

167

00:08:46,590  -->  00:08:49,200
In other words we're bypassing
this record effectively.
168

168

00:08:49,200  -->  00:08:51,670
This item that we're
actually gonna be deleting.
169

169

00:08:51,670  -->  00:08:53,870
And what we need to do is test for now.
170

170

00:08:53,870  -->  00:08:57,790
If current item dot next,
if that's not equal to now.
171

171

00:08:57,790  -->  00:09:02,450
[SOUND] We're gonna do
current item dot next dot
172

172

00:09:02,450  -->  00:09:06,650
set previous current item dot previous.
173

173

00:09:06,650  -->  00:09:08,860
The same thing there.
174

174

00:09:08,860  -->  00:09:10,820
We're actually doing
the other side of the coin.
175

175

00:09:10,820  -->  00:09:14,860
For the next item, we're setting that
to actually point to the current
176

176

00:09:14,860  -->  00:09:16,860
item's previous, if that makes sense.
177

177

00:09:16,860  -->  00:09:20,780
Sounds a little bit confusing, but
we're making sure that both pointers,
178

178

00:09:20,780  -->  00:09:24,360
the previous and the next, are actually
now still pointing to the right places.
179

179

00:09:24,360  -->  00:09:25,440
Now that we've done that,
180

180

00:09:25,440  -->  00:09:28,890
in the case where did have a direct
comparison we can return true,
181

181

00:09:28,890  -->  00:09:31,980
because we did find the record and
were able to make those changes.
182

182

00:09:31,980  -->  00:09:34,700
Otherwise we need to do another
check we need to do here.
183

183

00:09:34,700  -->  00:09:37,410
Cause if comparison is less than zero,
184

184

00:09:37,410  -->  00:09:42,520
then that just means we haven't reached
the point in the linked list yet.
185

185

00:09:42,520  -->  00:09:46,440
So we'll put current item
equals current item dot next.
186

186

00:09:46,440  -->  00:09:49,510
So we basically want to continue
navigating through the linked list to
187

187

00:09:49,510  -->  00:09:50,820
see if we can find the record.
188

188

00:09:52,490  -->  00:09:57,150
But otherwise, effectively if
comparison is greater than zero.
189

189

00:09:59,710  -->  00:10:00,470
[SOUND].
190

190

00:10:00,470  -->  00:10:03,060
If comparison is greater
than zero at this point,
191

191

00:10:03,060  -->  00:10:07,090
it means we've got passed the point
where we could have actually deleted it.
192

192

00:10:07,090  -->  00:10:13,830
I spelled that wrong [SOUND], so
basically here, we are at an item [SOUND],
193

193

00:10:13,830  -->  00:10:18,820
greater for
sort purposes than the one to be deleted.
194

194

00:10:18,820  -->  00:10:21,580
[SOUND].
195

195

00:10:21,580  -->  00:10:25,060
The item isn't, is not in the list.
196

196

00:10:25,060  -->  00:10:27,780
I've reached past the point of where
it would've actually been in the list,
197

197

00:10:27,780  -->  00:10:29,640
based on the sort criteria.
198

198

00:10:29,640  -->  00:10:32,700
We're gonna return false at that point
because we can't do anything else.
199

199

00:10:32,700  -->  00:10:34,290
We know that we can pass that point.
200

200

00:10:34,290  -->  00:10:39,160
[NOISE] And for a final test and
201

201

00:10:39,160  -->  00:10:42,600
will return false,
202

202

00:10:42,600  -->  00:10:47,070
the next defining thing.
203

203

00:10:47,070  -->  00:10:52,310
[SOUND] Without finding
the item to delete.
204

204

00:10:52,310  -->  00:10:54,910
[NOISE] So that's basically remove item.
205

205

00:10:54,910  -->  00:10:58,460
The test is actually create a list
of numbers in our main method and
206

206

00:10:58,460  -->  00:11:02,340
actually just run through and
actually see whether it actually works so
207

207

00:11:02,340  -->  00:11:06,180
I'm gonna go back to the main again
below the other code we've added.
208

208

00:11:06,180  -->  00:11:08,600
And actually for simplicity
purposes let's just do it this way,
209

209

00:11:08,600  -->  00:11:09,720
let's just put this in here.
210

210

00:11:09,720  -->  00:11:16,600
And we're going to put five, seven, three,
nine, eight, two, one, O, four, six.
211

211

00:11:16,600  -->  00:11:20,070
Cause all the other codes actually
there to create our link list.
212

212

00:11:20,070  -->  00:11:21,660
We actually run that just to
make sure it's actually working.
213

213

00:11:25,110  -->  00:11:28,700
We're getting the sorted in
the right order, which is good.
214

214

00:11:28,700  -->  00:11:30,580
Let's actually just, what I'm gonna do is,
215

215

00:11:30,580  -->  00:11:32,890
I'm gonna paste in a bit of code
here just to save us a bit of time.
216

216

00:11:32,890  -->  00:11:34,720
Let's actually just paste this code in.
217

217

00:11:34,720  -->  00:11:38,790
And you can see what I'm doing here is,
I'm actually removing an item,
218

218

00:11:38,790  -->  00:11:41,710
printing out the list,
removing an item, removing more items.
219

219

00:11:41,710  -->  00:11:42,930
And actually just running it through.
220

220

00:11:42,930  -->  00:11:44,990
So let's actually go through and
actually see what it does.
221

221

00:11:47,170  -->  00:11:49,250
So I can see in the first case,
at the top,
222

222

00:11:49,250  -->  00:11:53,040
we're moving item three,
so that should leave us.
223

223

00:11:53,040  -->  00:11:56,880
Remove three, zero, one, to, three,
four, five, six, seven, eight, nine.
224

224

00:11:56,880  -->  00:12:00,910
Removing item five, zero, one, two, four,
six, that's three and five we're deleting.
225

225

00:12:00,910  -->  00:12:04,190
Deleting zero, four, and two,
that leaves one, six, seven, eight, nine.
226

226

00:12:04,190  -->  00:12:06,010
Deleting item nine,
one, six, seven, eight.
227

227

00:12:06,010  -->  00:12:08,050
Deleting item eight, one, six, seven.
228

228

00:12:08,050  -->  00:12:09,400
Deleting item six.
229

229

00:12:09,400  -->  00:12:12,510
When the sevens only left and
deleting our one leaves only one.
230

230

00:12:12,510  -->  00:12:14,990
And the last entry,
we're actually deleting what is left.
231

231

00:12:14,990  -->  00:12:17,650
So the last entry, the reason why we
haven't actually specified the number
232

232

00:12:17,650  -->  00:12:20,780
here, we actually called it,
just to remove item.
233

233

00:12:20,780  -->  00:12:22,350
We called it with root entry.
234

234

00:12:22,350  -->  00:12:25,580
Basically the only one that was reaming,
which was the number seven.
235

235

00:12:25,580  -->  00:12:29,780
Deleted that, and the list is now empty,
so it's actually working.
236

236

00:12:29,780  -->  00:12:31,900
I'm going to actually end the video here.
237

237

00:12:31,900  -->  00:12:35,720
I was actually going to actually show
the search tree in this video, but
238

238

00:12:35,720  -->  00:12:38,760
I'll actually go ahead and
actually do that in the next video.
239

239

00:12:38,760  -->  00:12:42,290
That's the one where we're actually going
to create the optional search tree,
240

240

00:12:42,290  -->  00:12:44,960
and I need to actually talk about
the differences which are gonna be in
241

241

00:12:44,960  -->  00:12:48,760
the implementation of the add item,
remove item, and traverse, and
242

242

00:12:48,760  -->  00:12:50,050
it really needs its own video.
243

243

00:12:50,050  -->  00:12:51,160
So, I will see you in that next video.
