WEBVTT
1
1

00:00:04.750  -->  00:00:09.750
alright so let's go through and start
talking about lambda expressions so I've
2

2

00:00:09.750  -->  00:00:13.660
created as you can see a new project
so make sure you do that so
3

3

00:00:13.660  -->  00:00:18.580
you can follow along with what I'm doing
so lambda expressions often called
4

4

00:00:18.580  -->  00:00:23.800
lambdas are a new feature introduced
with java 8 and what they do is
5

5

00:00:23.800  -->  00:00:28.150
they provide us with an easier way to
work with interfaces that have only got
6

6

00:00:28.150  -->  00:00:33.780
one method and a typical well often used
they are often used in places where we
7

7

00:00:33.780  -->  00:00:37.390
use anonymous classes and you'll see
what I mean as we progress through the
8

8

00:00:37.390  -->  00:00:41.260
videos in this section of the course
let's start by reviewing how you use a
9

9

00:00:41.260  -->  00:00:44.800
runnable object to create and run a
thread and then we will see how
10

10

00:00:44.800  -->  00:00:49.800
this relates to lambdas so i'm going to
create a new class and this file in this
11

11

00:00:49.800  -->  00:00:55.690
main.java that we can just kick off
as a thread or kick off as a
12

12

00:00:55.690  -->  00:01:01.980
runnable object so class code to run
implements its going to be runnable then
13

13

00:01:01.980  -->  00:01:06.570
we just want to implement the method
which will be the run method we're just
14

14

00:01:06.570  -->  00:01:13.630
going to print a simple message in their.....okay and
15

15

00:01:13.630  -->  00:01:18.100
we'll get back up to the main method and
I will kick off that runnable and the
16

16

00:01:18.100  -->  00:01:25.840
code will be a new.....
17

17

00:01:27.150  -->  00:01:30.670
....so we run this
18

18

00:01:30.670  -->  00:01:39.310
ok printing from the runnables that obviously
works and that's one way of doing it and
19

19

00:01:39.310  -->  00:01:44.350
we could obviously also use an
anonymous class so i could just comment
20

20

00:01:44.350  -->  00:01:44.970
out or
21

21

00:01:44.970  -->  00:01:50.070
leave it in there for now but we could
change this to....
22

22

00:01:50.070  -->  00:02:01.420
....
23

23

00:02:02.400  -->  00:02:15.240
.....
24

24

00:02:15.240  -->  00:02:19.410
....and obviously give us
25

25

00:02:19.410  -->  00:02:24.600
the same result but in both cases what
we have to do is write several lines
26

26

00:02:24.600  -->  00:02:29.400
of code to accomplish what we wanted to
when all we really care about is the system
27

27

00:02:29.400  -->  00:02:32.790
. out . print line statement
everything else was sort of filler code
28

28

00:02:32.790  -->  00:02:37.200
to get it to be able to be executed in
other words the rest of the code is
29

29

00:02:37.200  -->  00:02:41.010
there to instantiate an object and
implement the single method in the
30

30

00:02:41.010  -->  00:02:45.330
runnable interface that would be nice if
we could just pass the system out print
31

31

00:02:45.330  -->  00:02:49.650
line statement to the thread constructor
and not have to write all the extra code
32

32

00:02:49.650  -->  00:02:53.790
that isn't really doing anything now
using a lambda expression we can actually
33

33

00:02:53.790  -->  00:03:02.340
do that and here is how we would do that so I
delete this again the anonymous class
34

34

00:03:02.340  -->  00:03:10.170
method and the lambda we would type.....and this i would change it
35

35

00:03:10.170  -->  00:03:16.680
parentheses....and
then we just type sout again and
36

36

00:03:16.680  -->  00:03:26.340
.....and we are getting this error here because i
37

37

00:03:26.340  -->  00:03:32.040
haven't set my language level to java 8 and you can see it says lambda
38

38

00:03:32.040  -->  00:03:35.820
expressions are not supported at this
language level and I mentioned at the
39

39

00:03:35.820  -->  00:03:39.720
start of this video it's a java 8
features so what we need to do is go
40

40

00:03:39.720  -->  00:03:44.640
into our module settings we can do that
by just right clicking up here module
41

41

00:03:44.640  -->  00:03:48.570
settings or open module settings to be
more complete and we want to make sure
42

42

00:03:48.570  -->  00:03:54.480
to click the project that our project
language level is set to 8 and you can
43

43

00:03:54.480  -->  00:04:00.870
see here it says the lambdas I click on
that click on OK the error should disappear and
44

44

00:04:00.870  -->  00:04:06.660
we should now be able to just right click
and run that and
45

45

00:04:06.660  -->  00:04:12.060
we get the same result so that's a lambda
expression now every lambda expressions
46

46

00:04:12.060  -->  00:04:15.780
got three parts first one is the
argument list
47

47

00:04:15.780  -->  00:04:18.990
the second one is an arrow token and
thirdly the body
48

48

00:04:19.860  -->  00:04:23.730
let's take a closer look at what we
wrote here the lambda expression we used
49

49

00:04:23.730  -->  00:04:28.680
and specifically what we're talking
about is this code here and I've got
50

50

00:04:28.680  -->  00:04:35.730
highlighted so this expression has an
empty argument list the arrow token is
51

51

00:04:35.730  -->  00:04:40.140
just the - character followed by the
greater than character so you can refer
52

52

00:04:40.140  -->  00:04:44.580
to that as the arrow token the body is
the code that we want to run which in
53

53

00:04:44.580  -->  00:04:48.750
this case is the system . out .
print ln statement now when the
54

54

00:04:48.750  -->  00:04:52.500
compiler sees a lambda expression
how does it know what to do
55

55

00:04:53.280  -->  00:04:57.930
well it knows that one of the thread
classes constructors accepts a runnable
56

56

00:04:57.930  -->  00:05:02.940
parameter and in addition it also knows
that the runnable interface only has one
57

57

00:05:02.940  -->  00:05:07.950
method in this case run which doesn't
take any parameters so it's able to
58

58

00:05:07.950  -->  00:05:12.390
match the lambda expressions argument
list no parameters with the run method
59

59

00:05:12.390  -->  00:05:18.270
because the compiler needs to match the
lambda expression to a method lambda
60

60

00:05:18.270  -->  00:05:22.800
expressions can only be used with
interfaces that contain only one method
61

61

00:05:22.800  -->  00:05:27.410
that has to be implemented so these
interfaces are also referred to as
62

62

00:05:27.410  -->  00:05:33.090
functional interfaces now by using a
lambda expression instead of a
63

63

00:05:33.090  -->  00:05:37.020
creating a class that implements
runnable or using an anonymous class
64

64

00:05:37.020  -->  00:05:42.410
actually able to reduce the lines of
code we have to write and now we could
65

65

00:05:42.410  -->  00:05:47.550
focus on what we care about this case
the code we want to run now before we
66

66

00:05:47.550  -->  00:05:52.350
move on notice that the IntelliJ
recognizes lambdas and marks them with the
67

67

00:05:52.350  -->  00:05:58.440
lamba symbols in the editors
gutter this little bit over here and if
68

68

00:05:58.440  -->  00:06:04.380
you actually click that you can see what
it did was it takes us to the method
69

69

00:06:04.380  -->  00:06:09.120
that IntelliJ believed the lambda
expression maps to so in this case the
70

70

00:06:09.120  -->  00:06:13.200
open runnable . java then come down
and have a look at the run method that's
71

71

00:06:13.200  -->  00:06:18.450
because of course with the way we
coded this were actually mapping to
72

72

00:06:18.450  -->  00:06:20.280
the run method so this is that
73

73

00:06:20.280  -->  00:06:24.600
handy way what I've just done again closing
it down again this little button here by
74

74

00:06:24.600  -->  00:06:29.820
clicking on that takes us straight there
so that's a really handy way to quickly
75

75

00:06:29.820  -->  00:06:33.690
check that the expression matches the
method that i would have to implement if
76

76

00:06:33.690  -->  00:06:39.480
we weren't using a lambda obviously the
our lambda code is very simple at the
77

77

00:06:39.480  -->  00:06:43.110
moment it's literally only one line of
code whatever we wanted our thread to do
78

78

00:06:43.110  -->  00:06:43.920
more
79

79

00:06:43.920  -->  00:06:48.180
so what if the run method we
implement would contain multiple lines
80

80

00:06:48.180  -->  00:06:51.150
of code not a problem we can do that as
well
81

81

00:06:51.150  -->  00:06:55.740
all we have to do is surround the
lambdas body with curly braces just as
82

82

00:06:55.740  -->  00:07:00.090
we would do for any code block so let's
have the thread print several lines of
83

83

00:07:00.090  -->  00:07:05.580
output to the console and just to
avoid confusion I will just delete this extra class
84

84

00:07:05.580  -->  00:07:10.110
now that we don't need at the moment we
already got printing one class if we
85

85

00:07:10.110  -->  00:07:15.930
want those multiple lines or multiple statements then
86

86

00:07:15.930  -->  00:07:18.840
what we do is just here before the
system out print line this time we're
87

87

00:07:18.840  -->  00:07:25.830
going to put left curly brace go to the
next line and because we got multiple
88

88

00:07:25.830  -->  00:07:29.970
lines now we need to finish the format
the lines with a semicolon so that's
89

89

00:07:29.970  -->  00:07:34.740
the first line then we can go sout
maybe make this line 2 and sout again
90

90

00:07:34.740  -->  00:07:44.490
and let's try that....
91

91

00:07:44.490  -->  00:07:56.010
.....so if we just gonna run
this to make sure it's going to work so
92

92

00:07:56.010  -->  00:07:59.730
you can see now we've got all three
lines printed to the console and you
93

93

00:07:59.730  -->  00:08:03.480
notice that i had to type a semicolon
after each statement and we didn't have
94

94

00:08:03.480  -->  00:08:07.830
to do so when the body only had one
statement in actual fact you'd get a
95

95

00:08:07.830  -->  00:08:12.090
compile error if we add the semi
colon when their is only one statement so
96

96

00:08:12.090  -->  00:08:16.530
lambda expressions are meant to
be concise the compiler doesn't need a
97

97

00:08:16.530  -->  00:08:20.640
semicolon when the single statement in
fact you can't use one when it's just a
98

98

00:08:20.640  -->  00:08:21.660
single statement
99

99

00:08:21.660  -->  00:08:26.460
alright so let's add a class called
employee to the main file and the
100

100

00:08:26.460  -->  00:08:30.750
classes go will start by
having two fields name and age
101

101

00:08:30.750  -->  00:08:33.190
let's go ahead and do that
102

102

00:08:33.190  -->  00:08:40.510
we'll see how this works with a lambda
expression so....
103

103

00:08:40.510  -->  00:08:58.930
....
104

104

00:08:58.930  -->  00:09:09.640
....okay so the main
method lets just create some employees
105

105

00:09:09.640  -->  00:09:13.720
and add them to an array list so we're
going to do is leave that first line and
106

106

00:09:13.720  -->  00:09:27.880
down here we're going to do.....
107

107

00:09:27.880  -->  00:09:38.920
....
108

108

00:09:38.920  -->  00:09:47.830
.....
109

109

00:09:47.830  -->  00:10:12.640
....
110

110

00:10:14.970  -->  00:10:32.430
....
111

111

00:10:34.290  -->  00:10:41.390
ok so let's sort the employees by name
in ascending order and print results
112

112

00:10:41.390  -->  00:10:45.320
or print the result to the console so
let's look at the code first that
113

113

00:10:45.320  -->  00:10:49.860
doesn't use a lambda expression so
we're going to do something like
114

114

00:10:49.860  -->  00:10:58.940
....
115

115

00:10:58.940  -->  00:11:03.540
.....
116

116

00:11:03.540  -->  00:11:13.370
....
117

117

00:11:13.370  -->  00:11:21.770
.....
118

118

00:11:21.770  -->  00:11:32.870
....
119

119

00:11:32.870  -->  00:11:42.830
.....and let's do a loop to
120

120

00:11:42.830  -->  00:11:48.540
a for each to actually check the
values for employee...
121

121

00:11:48.540  -->  00:11:57.200
.....so lets actually run this just to
122

122

00:11:57.200  -->  00:12:06.380
make sure that it is actually working
alright so you can see that obviously
123

123

00:12:06.380  -->  00:12:11.850
that method is working and we have
talked about comparator before so we don't
124

124

00:12:11.850  -->  00:12:15.770
do really need to talk too much more
about that now but the collections .
125

125

00:12:15.770  -->  00:12:20.810
sort method is using that obviously to
figure out how to go about sorting and
126

126

00:12:20.810  -->  00:12:25.430
by passing this and calling this direct its actually sorted that arraylist for us
127

127

00:12:25.430  -->  00:12:28.560
but what I do want to do is show
128

128

00:12:28.560  -->  00:12:31.890
you the documentation because it is relevant to
lambda expressions I'm gonna open it up
129

129

00:12:31.890  -->  00:12:34.890
and we're just going to go there
130

130

00:12:39.450  -->  00:12:47.270
so if we go down and have a look will see that
it contains two methods that don't have
131

131

00:12:47.270  -->  00:12:53.610
default implementations compare and
equals so compare and also equals these
132

132

00:12:53.610  -->  00:12:58.050
ones here now we said that we can only
use the lambdas for interfaces that
133

133

00:12:58.050  -->  00:13:02.330
require the implementation of only one
method but the comparator documentation
134

134

00:13:02.330  -->  00:13:08.190
states at the top that the comparator
implementation is a functional interface
135

135

00:13:08.190  -->  00:13:12.300
and you probably saw this anyways as well
functional interface and actually says
136

136

00:13:12.300  -->  00:13:15.770
just up here this is a functional
interface and can therefore be used as
137

137

00:13:15.770  -->  00:13:21.120
these assignment target for lambda expression
or method reference to see if you
138

138

00:13:21.120  -->  00:13:24.330
can come up with a reason for why that
might be why while we continue with our
139

139

00:13:24.330  -->  00:13:32.640
example let's go back to our code now
inside if I close this run window so inside the
140

140

00:13:32.640  -->  00:13:36.660
collections . sort we
implemented the compare method which
141

141

00:13:36.660  -->  00:13:40.680
uses the string . compareto method to
compare the employee names now the
142

142

00:13:40.680  -->  00:13:44.310
return value of compare to matches what
they compare method what it also wants to
143

143

00:13:44.310  -->  00:13:48.390
return a negative number when the first
value is less than a second value a
144

144

00:13:48.390  -->  00:13:52.290
positive integer when the first value is
greater than the second value and 0 when
145

145

00:13:52.290  -->  00:13:56.700
the two values are equal and again we've
seen that in previous
146

146

00:13:56.700  -->  00:14:00.930
lectures so in this case it's ok to
return the compared to result as the
147

147

00:14:00.930  -->  00:14:04.830
result of our compare method and you saw
when i run the application we got the
148

148

00:14:04.830  -->  00:14:09.180
employees correctly printing out in
ascending order so you see the
149

149

00:14:09.180  -->  00:14:10.620
regular way of doing it
150

150

00:14:10.620  -->  00:14:15.540
let's actually change the code to use a
lambda expression now we can use a
151

151

00:14:15.540  -->  00:14:19.920
lambda even though there are two methods
we can implement because the equals
152

152

00:14:19.920  -->  00:14:24.770
method will always have a default
implementation now remember that all
153

153

00:14:24.770  -->  00:14:30.240
classes descend from object and object
contains an equal method and that means
154

154

00:14:30.240  -->  00:14:33.930
that every instance that implements
comparator will already have an
155

155

00:14:33.930  -->  00:14:39.420
implementation of the equals method
therefor the comparator interface really
156

156

00:14:39.420  -->  00:14:41.470
only has a single method
157

157

00:14:41.470  -->  00:14:45.630
that always has to be implemented by
classes that implement it and for that
158

158

00:14:45.630  -->  00:14:49.890
reason it's a functional interface and
we can use lambdas instead of an
159

159

00:14:49.890  -->  00:14:51.970
anonymous class tricky
160

160

00:14:51.970  -->  00:14:55.480
yes and you don't have to know or
memorize the stuff interfaces
161

161

00:14:55.480  -->  00:14:59.190
documentation will sometimes tell you if
it's a functional interface if it
162

162

00:14:59.190  -->  00:15:04.320
doesn't the IDE your using might now we can
see that the new comparative part of the
163

163

00:15:04.320  -->  00:15:08.580
sort statement is grayed out in the editor
and if we actually hover over this you
164

164

00:15:08.580  -->  00:15:11.980
see that IntelliJ will pop up a
message and says that we can actually
165

165

00:15:11.980  -->  00:15:15.930
replace the anonymous class with a
lambda so it's good to know in theory
166

166

00:15:15.930  -->  00:15:20.010
but in practice if you want to know if
you can use a lambda expression check
167

167

00:15:20.010  -->  00:15:25.140
the interface documentation or course
you can just try it going to finish the
168

168

00:15:25.140  -->  00:15:29.190
video here now in the next video we'll
go ahead and update this code to use a
169

169

00:15:29.190  -->  00:15:31.620
lambda expression see you in the next
video
