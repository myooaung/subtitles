WEBVTT
1
1

00:00:03.200  -->  00:00:08.720
so in the previous two videos we
tackled what methods where and how to
2

2

00:00:08.720  -->  00:00:12.740
actually put them to use in your program
code so it's now time to talk about
3

3

00:00:12.740  -->  00:00:17.540
method overloading now method overloading
is very commonly used in Java
4

4

00:00:17.540  -->  00:00:21.130
programming and actually and other
programming languages and it's the
5

5

00:00:21.130  -->  00:00:26.390
option where you use the same method name but
with different parameters so as an
6

6

00:00:26.390  -->  00:00:30.100
example we gonna type in some code to
show you what this looks like and how
7

7

00:00:30.100  -->  00:00:34.460
you go about it so let's start by
creating a method I'm gonna call this method
8

8

00:00:34.460  -->  00:00:40.970
calculate score and we are going to type it...
9

9

00:00:40.970  -->  00:00:46.730
..and we are gonna have 2 parameters the first is the player name...
10

10

00:00:46.730  -->  00:00:54.200
...the second parameter is gonna be score
which is an integer I'm going to type..
11

11

00:00:54.200  -->  00:01:05.340
...
12

12

00:01:05.340  -->  00:01:14.410
...which
13

13

00:01:14.410  -->  00:01:18.020
is an arbitrary number which were not
going to use anymore we've just done that so
14

14

00:01:18.020  -->  00:01:21.550
we can return something that's
because we have defined the method to
15

15

00:01:21.550  -->  00:01:25.780
return an integer so to confirm
that runs we can actually type the name
16

16

00:01:25.780  -->  00:01:27.120
of the method as you've seen before...
17

17

00:01:27.120  -->  00:01:33.130
....
18

18

00:01:33.130  -->  00:01:42.990
....and if we run this
we should find that we get it to work we see over here
19

19

00:01:42.990  -->  00:01:48.580
player Tim scored five hundred
points and if we wanted to we could take
20

20

00:01:48.580  -->  00:01:52.590
the value that's return because that's what
return does it actually returns whatever
21

21

00:01:52.590  -->  00:01:57.510
the amount is back to in this case up here
on line 6 we could change that if you want to
22

22

00:01:57.510  -->  00:02:04.560
to put new score....because you can see on line 12 we
23

23

00:02:04.560  -->  00:02:11.000
multiplied score by a thousand and we can
print that out as well....
24

24

00:02:11.000  -->  00:02:23.220
..run that to confirm
that works new score is 500,000 which of course is 500
25

25

00:02:23.220  -->  00:02:28.300
we pass times a thousand is five hundred
thousand that's how you use a value that
26

26

00:02:28.300  -->  00:02:32.410
you've calculated in a method and
returned it and from the process that we
27

27

00:02:32.410  -->  00:02:36.890
actually called the method you can then
use that value for some sort of
28

28

00:02:36.890  -->  00:02:40.890
calculations if you want to so nothing
particularly unique their we've seen that
29

29

00:02:40.890  -->  00:02:44.410
similarly setup used in the
past
30

30

00:02:44.410  -->  00:02:49.730
ok so lets go about overloading the method now I may have said
overriding early in the video but just
31

31

00:02:49.730  -->  00:02:53.750
to be clear this is overloading methods
so overriding is got a completely
32

32

00:02:53.750  -->  00:02:57.430
different meaning and we'll be talking
about overriding later in the course
33

33

00:02:57.430  -->  00:03:02.180
but this is overloading methods which is
basically using the same method name but
34

34

00:03:02.180  -->  00:03:07.240
with a variable number different number
of parameters so we start off by
35

35

00:03:07.240  -->  00:03:14.910
creating a second one and I'll copy
the method and paste it now notice when I do that
36

36

00:03:14.910  -->  00:03:19.550
first of all we get an error and it
says calculate score and note
37

37

00:03:19.550  -->  00:03:24.640
the string comma int on screen is already
defined so that;s Java telling you look
38

38

00:03:24.640  -->  00:03:28.450
you can't use an identical method with an
identical number of parameters that is the
39

39

00:03:28.450  -->  00:03:29.800
problem there
40

40

00:03:29.800  -->  00:03:35.800
so the option to fix this well the first option would be to put an s to make it a different method name and of
41

41

00:03:35.800  -->  00:03:38.750
course that will work but that's then a
separate method were not actually
42

42

00:03:38.750  -->  00:03:43.630
overloading the method we are using or creating
a new method so in this case we don't wanna
43

43

00:03:43.630  -->  00:03:47.850
do that so the way we do is we change the
number of parameters so I can get rid of the first
44

44

00:03:47.850  -->  00:03:52.550
parameter make it so that this method
now has only got one parameter which is
45

45

00:03:52.550  -->  00:04:00.540
the score and notice that the error went away but we got an error now on line 17 because we're trying
46

46

00:04:00.540  -->  00:04:04.920
to access variable the perimeter that
no longer exists in this particular method I'm
47

47

00:04:04.920  -->  00:04:10.160
going to put...
48

48

00:04:10.160  -->  00:04:19.210
....now notice there are 2 methods their now
and the warning on the
49

49

00:04:19.210  -->  00:04:22.890
screen now because it's greyed
the method name compared to the one
50

50

00:04:22.890  -->  00:04:27.500
on line 11 is saying that that's never
been used before so that is IntelliJ saying
51

51

00:04:27.500  -->  00:04:32.310
by the way you've created this
overloaded method called calculate score
52

52

00:04:32.310  -->  00:04:36.170
but you're not using that particular
you're only using this first one which
53

53

00:04:36.170  -->  00:04:39.970
is in the brighter color you can see
that we're using that online 6 so we
54

54

00:04:39.970  -->  00:04:46.380
can still run that and get the same results we got
prior to overloading the method but
55

55

00:04:46.380  -->  00:04:52.840
to actually use the second method what we need to do
is we need to type it now notice when I started typing
56

56

00:04:52.840  -->  00:04:56.640
IntelliJ now shows us that we've got
two methods here and we can select which
57

57

00:04:56.640  -->  00:05:01.650
one we want so if I select the top one with
a single parameter press enter their noting
58

58

00:05:01.650  -->  00:05:03.240
that theirs two options on the screen
59

59

00:05:03.240  -->  00:05:09.120
now IntelliJ is sort of saying there is 2 ways
you can access these methods you
60

60

00:05:09.120  -->  00:05:13.490
can even use the first one in which case
I need a player name and a score or I can
61

61

00:05:13.490  -->  00:05:16.700
use the second one in which case I only need
a score so I'm going to use the second one and
62

62

00:05:16.700  -->  00:05:23.270
just type in a value like 75 and you
can see that that's valid and that's now
63

63

00:05:23.270  -->  00:05:30.590
going to call that second method if we
run it so run it to make sure it does work unnamed player
64

64

00:05:30.590  -->  00:05:35.450
scored 75 points which is clearly the
code from the second method now Java is checking so
65

65

00:05:35.450  -->  00:05:36.550
we can actually do something like
66

66

00:05:36.550  -->  00:05:46.130
calculate score and put...we actually get an error and the error
that's coming up is saying is the first or
67

67

00:05:46.130  -->  00:05:50.500
is the wrong first argument found int
requires string so what
68

68

00:05:50.500  -->  00:05:55.410
IntelliJ is saying there is well ok if
you want to call this overloaded method with two
69

69

00:05:55.410  -->  00:06:00.570
parameters I know that you calculate it
and set up one on line 13 but that needs to
70

70

00:06:00.570  -->  00:06:02.140
be a string
71

71

00:06:02.140  -->  00:06:07.180
so that's what its complaining about if we added a third
parameter and just sort of says altogether while
72

72

00:06:07.180  -->  00:06:11.930
hang on a minute you haven't actually
created an overloaded method with three
73

73

00:06:11.930  -->  00:06:15.870
parameters of int and notice that it's
actually saying int,int,int
74

74

00:06:15.870  -->  00:06:21.220
and the point toward that is
that what makes it unique is the data
75

75

00:06:21.220  -->  00:06:22.160
typed
76

76

00:06:22.160  -->  00:06:26.920
in the parameters so its not what you've
typed in for the parameter name that can
77

77

00:06:26.920  -->  00:06:29.320
be literally anything you want that's no
problems
78

78

00:06:29.320  -->  00:06:33.630
the thing you need to keep to get the
same to or what Java uses to determine
79

79

00:06:33.630  -->  00:06:38.480
whether it's in equal or not is this the data type in this
case the string and the int ok so lets
80

80

00:06:38.480  -->  00:06:44.410
do one more lets try and create a method that has got no
parameters that's a third one and at the
81

81

00:06:44.410  -->  00:06:50.110
moment that is coming up and that says can't resolved method and that is just as in
the case if you made a typo creating a
82

82

00:06:50.110  -->  00:06:54.510
new method this is now saying well hang on you haven't got a method with that name so lets
83

83

00:06:54.510  -->  00:07:01.630
now try and create another overloaded method
with no parameters and the way we  will do that
84

84

00:07:01.630  -->  00:07:17.290
is we get rid of the parameters and will put...
85

85

00:07:17.290  -->  00:07:24.690
...we can't return anything because we can't calculate anything because we don't have a score to work with and that is now valid and we can
86

86

00:07:24.690  -->  00:07:31.080
actually run that so we run that now you
can see we've got all three methods working
87

87

00:07:31.080  -->  00:07:35.160
on their and all got separate output you can see
that output working quite nicely on
88

88

00:07:35.160  -->  00:07:37.410
the screen so what we're trying to do
here
89

89

00:07:37.410  -->  00:07:42.560
when overloading a method we need to create a
unique method signature so the signature
90

90

00:07:42.560  -->  00:07:48.310
is essentially here is the the unique
part is the actual method name you can
91

91

00:07:48.310  -->  00:07:52.700
see that's the same in all three cases
here but it's also in the parameters then you
92

92

00:07:52.700  -->  00:07:56.770
might think that you could change
something like here you could say ok let's create another
93

93

00:07:56.770  -->  00:08:03.420
method calculate score and I'm going to copy and paste that but let's make it a
different return type or make it maybe a void
94

94

00:08:03.420  -->  00:08:12.190
instead of an int....because there is no return there becaise
95

95

00:08:12.190  -->  00:08:16.310
it is a void so you might think we can do that by
changing the return type does that make
96

96

00:08:16.310  -->  00:08:21.040
it unique but the error we are going to get here says calculate score is already defined and
97

97

00:08:21.040  -->  00:08:25.480
what Java is telling you is just changing
the data type of the return type the
98

98

00:08:25.480  -->  00:08:29.230
type of data that's going to be returned from
the method doesn't change the overall
99

99

00:08:29.230  -->  00:08:32.510
signature so you do need to change the
number of parameters their to make it
100

100

00:08:32.510  -->  00:08:33.010
unique
101

101

00:08:33.010  -->  00:08:41.810
so I'll just delete that line again ok so that is how
overloading a methods work so what I'm
102

102

00:08:41.810  -->  00:08:46.440
gonna do now is issue a challenge to
get you to do some overloading of your own so
103

103

00:08:46.440  -->  00:08:51.780
I'm gonna paste in what the challenge is and then we're I'm going to get you to go away and have a go at doing it
104

104

00:08:51.780  -->  00:08:54.890
and then ultimately I actually do it on
screen for you as well
105

105

00:08:54.890  -->  00:09:02.440
so lets paste that up here so here what needs to be done so we need to
create a method called calcFeetandInchesToCentimeters
106

106

00:09:02.440  -->  00:09:07.160
and that needs to
accept two parameters first parameter is
107

107

00:09:07.160  -->  00:09:10.240
feet and the second one is inches
108

108

00:09:10.240  -->  00:09:13.800
the second parameter both should be of type
double I mentioned towards the bottom of
109

109

00:09:13.800  -->  00:09:18.620
this section in the hints area to use doubles
for your data types thats
110

110

00:09:18.620  -->  00:09:23.320
best way to calculate here but I also wanna show
you or get you to do some validation in other
111

111

00:09:23.320  -->  00:09:27.280
words you want to confirm that the data
we working with is valid so you need to
112

112

00:09:27.280  -->  00:09:31.900
first check the first parameter feet is
greater than and equal to 0 so long
113

113

00:09:31.900  -->  00:09:34.180
as the number is 0 or higher
114

114

00:09:34.180  -->  00:09:38.060
we're going to say that that's a valid
number we can work it in other words we're not going to accept
115

115

00:09:38.060  -->  00:09:40.810
numbers that are less than 0 and for
inches
116

116

00:09:40.810  -->  00:09:44.620
the second parameter you wanna make sure
that its greater than or equal to zero
117

117

00:09:44.620  -->  00:09:48.670
and then it's also less than or
equal to 12 which is a valid range of
118

118

00:09:48.670  -->  00:09:51.690
inches when you're looking at feet inches
together
119

119

00:09:51.690  -->  00:09:56.520
know if you find that either of those
conditions fail in other words if feet
120

120

00:09:56.520  -->  00:10:02.320
is less than zero or inches is less than
0 and inches is greater than 12
121

121

00:10:02.320  -->  00:10:06.620
sort of outside that range in other words you
want to return negative -1 for both of those scenarios
122

122

00:10:06.620  -->  00:10:12.170
but if the parameters are valid in other
words we got a valid feet parameter and valid
123

123

00:10:12.170  -->  00:10:16.740
inched and we have validated within the range
we want to work with at that point I wan't
124

124

00:10:16.740  -->  00:10:21.120
you to calculate how many centimeters sentiment prior to feet and inches pass this method so
125

125

00:10:21.120  -->  00:10:24.840
you need to take the feet and inches
convert them to centimeters and actually
126

126

00:10:24.840  -->  00:10:29.550
return that value back to the method
that's calling it and also printed it out on
127

127

00:10:29.550  -->  00:10:33.680
the screen now for the second method
where we are gonna overload this first methods so its gonna be
128

128

00:10:33.680  -->  00:10:38.210
obviously the same name but one parameter and the parameter
129

129

00:10:38.210  -->  00:10:43.020
is inches so we need to validate it
again and in this case you only want to
130

130

00:10:43.020  -->  00:10:44.810
validate that is grater equal to 0
131

131

00:10:44.810  -->  00:10:48.860
unlike the first method in this one we want
to actually accepted an inches
132

132

00:10:48.860  -->  00:10:54.050
parameter that can literally be any number so we
can accept 50 inches or a 100 inches and you still
133

133

00:10:54.050  -->  00:10:58.270
need to then converted to centimeters so you need to figure out how to convert that
134

134

00:10:58.270  -->  00:11:04.080
back to feet and inches so that you can
call our first method which is got the
135

135

00:11:04.080  -->  00:11:07.930
feet and inches parameters so you need
to figure out how to do so that's the
136

136

00:11:07.930  -->  00:11:11.990
tricky part is working out how to do
that but then also calling that first
137

137

00:11:11.990  -->  00:11:16.630
method that we created so we are actually making
sure that your calling the right method so your calling one
138

138

00:11:16.630  -->  00:11:20.880
overloaded method from another overloaded method
if that makes sense and in terms
139

139

00:11:20.880  -->  00:11:25.460
of hints as I mentioned use double for
your numbers data types for your number data types
140

140

00:11:25.460  -->  00:11:30.170
that's a good idea here 1 inch is equals
2.54 centimeters you need to know that
141

141

00:11:30.170  -->  00:11:35.800
in terms of calculation and if you don't
know 1 foot is 12 inches and you need
142

142

00:11:35.800  -->  00:11:41.970
to know that also when your doing conversions
to and from inches, feet, etc now I'm going to show a
143

143

00:11:41.970  -->  00:11:46.080
link on the screen shortly and this will
show this is just a website that you can
144

144

00:11:46.080  -->  00:11:51.130
go to, to verify the your numbers are working
and from there you can confirm that your
145

145

00:11:51.130  -->  00:11:54.930
code is working and just secondly
recalling another overloaded method as
146

146

00:11:54.930  -->  00:11:58.890
you saw earlier in this video just
really required you to use the right number of
147

147

00:11:58.890  -->  00:12:02.670
parameters and and Java will do the rest so
keep that in mind when you determining
148

148

00:12:02.670  -->  00:12:09.380
how to call one overloaded method from another so lets look at
this website before I pause and let you go away and
149

149

00:12:09.380  -->  00:12:15.420
create your version of the code so there is the
website on the screen and there will be
150

150

00:12:15.420  -->  00:12:18.720
link in the Resources section so we
could type something like..
151

151

00:12:18.720  -->  00:12:26.070
and that 182.8800 centimeters so you just
type in either the number of feet or number
152

152

00:12:26.070  -->  00:12:30.170
feet inches or just inches and this
will tell what the centimeter is are and from
153

153

00:12:30.170  -->  00:12:33.180
there you can confirm that your code is
correct and working properly
154

154

00:12:33.180  -->  00:12:37.710
ok so that's so pause the video now
go away and complete the challenge and when you
155

155

00:12:37.710  -->  00:12:41.020
done you want to come back and see what
I've done come back and I'll show you my
156

156

00:12:41.020  -->  00:12:45.640
solution pause the video now...
157

157

00:12:45.640  -->  00:12:51.830
..I hope you've had some success and managed to get it
working so lets now go through and try and
158

158

00:12:51.830  -->  00:13:00.240
solve this so what we gonna do first....
159

159

00:13:00.240  -->  00:13:04.800
...let's create our first
160

160

00:13:04.800  -->  00:13:14.000
method so its going to be...
161

161

00:13:14.000  -->  00:13:19.620
.....
162

162

00:13:19.620  -->  00:13:26.020
...and we got the double to return because we are going to ultimately return the number of
163

163

00:13:26.020  -->  00:13:27.540
centimeters
164

164

00:13:27.540  -->  00:13:30.550
so what we need to do is some validation
so we need to make sure that feet is
165

165

00:13:30.550  -->  00:13:34.910
greater than equal to 0 we need to make sure
that inches is in the range of being
166

166

00:13:34.910  -->  00:13:41.440
zero or greater but less than or equal to 12
I'm going to use some if logic and also
167

167

00:13:41.440  -->  00:13:47.360
used the ampersand as well to chain together some and conditions to do all
168

168

00:13:47.360  -->  00:14:01.350
checking on one line we're gonna put...and actually we will just use an OR instead so....
169

169

00:14:01.350  -->  00:14:17.270
.....
170

170

00:14:17.270  -->  00:14:26.490
...so that's
171

171

00:14:26.490  -->  00:14:33.520
our validation so we are saying if
feet is less than 0 and we determined up here its less than zero
172

172

00:14:33.520  -->  00:14:39.470
it's invalid so we don't want to do anymore
processing or remembering the 2 pipe
173

173

00:14:39.470  -->  00:14:45.310
characters are or if the inches is
less than 0 and the inches greater than 12
174

174

00:14:45.310  -->  00:14:48.450
so both of those have to succeed in
that case so inches has to be less
175

175

00:14:48.450  -->  00:14:52.980
than zero and greater than 12 so its outside
the range of both of those scenarios
176

176

00:14:52.980  -->  00:14:57.610
we are going to return -1 that means we are going to do normal
processing but if we continue on down here
177

177

00:14:57.610  -->  00:15:01.140
we know that return -1 if that is the case its not going to come down here
178

178

00:15:01.140  -->  00:15:05.890
and do any more processing for us so at this
point we can get to line 44 and 49 that we've
179

179

00:15:05.890  -->  00:15:08.130
got valid parameters
180

180

00:15:08.130  -->  00:15:15.570
lets do some calculations so put...so we need to start figuring this out so lets
181

181

00:15:15.570  -->  00:15:23.390
convert the feet component to cm
first to do that we are gonna put...
182

182

00:15:23.390  -->  00:15:27.180
why 12 well 12 is the number of inches in
a foot
183

183

00:15:27.180  -->  00:15:33.510
multiplying by 12 and then multiply by
2.54 which we determined up here on
184

184

00:15:33.510  -->  00:15:39.950
line 32 was the calculation to convert and inch to a cm
we've now converted the total feet
185

185

00:15:39.950  -->  00:15:44.420
that was pass to this method to cm now that
still leaves the second parameter inches
186

186

00:15:44.420  -->  00:15:49.260
we need to separately convert that and
add it to our total so to do that
187

187

00:15:49.260  -->  00:15:55.990
we are going to type...
188

188

00:15:55.990  -->  00:16:00.020
so we're going to take the existing value that we
calculated on line 44 and to that we
189

189

00:16:00.020  -->  00:16:09.880
are gonna add inches.....so we've got centimeters to be
has been correctly calculated for
190

190

00:16:09.880  -->  00:16:21.990
both feet and inches so from that point we can then print a message...
191

191

00:16:21.990  -->  00:16:32.100
....
192

192

00:16:32.100  -->  00:16:38.070
...lets go ahead and
run that now we will have a bit of a
193

193

00:16:38.070  -->  00:16:41.360
discussion about negative one because I haven't actually mentioned why you'd be
194

194

00:16:41.360  -->  00:16:46.840
returning -1 so lets run this this actually before we run it what we need call it because this is telling us by the
195

195

00:16:46.840  -->  00:16:50.560
way that ok you have defined a method but
you've never used it so lets
196

196

00:16:50.560  -->  00:16:58.220
put an example and lets put....and lets start with 6 and 0, 6 feet and 0 inches
197

197

00:16:58.220  -->  00:17:03.320
because we did that before and just as a
refresher we determined that was 182.8800
198

198

00:17:03.320  -->  00:17:13.250
that should be the number that we're looking
for we run that 6 feet and 0 inches we got 182.880
199

199

00:17:13.250  -->  00:17:14.160
so that's good
200

200

00:17:14.160  -->  00:17:21.750
we got the calculations correct let's just try one
more lets try 7 foot and 5 inches
201

201

00:17:21.750  -->  00:17:32.080
run that 226.06cm and go back to the site and make this 7 foot and 5 inches
202

202

00:17:32.080  -->  00:17:37.650
226.06 226.06 so clearly
that's working the other thing we can
203

203

00:17:37.650  -->  00:17:45.270
try and do here is let's try and put a negative one and one it should get an error their if we run that just a bit
204

204

00:17:45.270  -->  00:17:53.990
confusing I won't make it -1 lets make it -10
run that now notice we haven't got a message at all in
205

205

00:17:53.990  -->  00:17:58.600
other words what's happening is this
code here has been fulfilled so what I might do is put...
206

206

00:17:58.600  -->  00:18:09.860
...lets do that so we know it has error ed and trying
207

207

00:18:09.860  -->  00:18:12.990
to return we know that the parameter is invalid
invalid feet or inches parameters
208

208

00:18:12.990  -->  00:18:17.040
so that's good and just to make a test there we
should be able to put
209

209

00:18:17.040  -->  00:18:26.390
up here we will pass a parameter of 0 just to make
sure that does actually work 0 feet 1 inches equals
210

210

00:18:26.390  -->  00:18:31.960
2.54 centimeters that's good so it still
accepted 0 which wanted to do so likewise for
211

211

00:18:31.960  -->  00:18:34.900
inches now let's try...
212

212

00:18:34.900  -->  00:18:43.280
lets try negative 10 inches which would give us an error and we got an error there and why did we get the error
213

213

00:18:43.280  -->  00:18:47.860
there so we should have a test here to check
whether inches is out of range and for some
214

214

00:18:47.860  -->  00:18:48.960
reason that's is still working
215

215

00:18:48.960  -->  00:18:56.540
lets have a look at the code so if we got feet is less than 0 or inches is less than 0 and that AND is
216

216

00:18:56.540  -->  00:19:00.160
wrong so the AND should be an OR so we got 2 parts here this is where it
217

217

00:19:00.160  -->  00:19:03.960
gets a bit confusing but you need to look
at the brackets but I've got an AND and the course
218

218

00:19:03.960  -->  00:19:08.190
inches can't be less than 0 and greater than
12 it can only be one or the other
219

219

00:19:08.190  -->  00:19:12.610
therefore we want to test to see whether
inches less than 0 or its greater than
220

220

00:19:12.610  -->  00:19:16.460
12 so lets run that again
221

221

00:19:16.460  -->  00:19:21.940
Invalid feet or inches parameter which is
correct now and let's try and the value 13
222

222

00:19:21.940  -->  00:19:29.350
in their run that Invalid which is good but lets just a put a valid range 6 foot 0
223

223

00:19:29.350  -->  00:19:36.950
6 feet and 0 inches its giving us the correct value so our validation was
slightly wrong there and this is why
224

224

00:19:36.950  -->  00:19:40.720
testing can be a good idea sometimes
just to make sure you got your values
225

225

00:19:40.720  -->  00:19:41.470
correct
226

226

00:19:41.470  -->  00:19:45.100
now the reason I'm returning -1 here this is a good way to test
227

227

00:19:45.100  -->  00:19:49.530
for validation to check whether your
calculations are correct and what you could
228

228

00:19:49.530  -->  00:19:52.550
do here is ultimately you can have something
like..
229

229

00:19:52.550  -->  00:20:15.310
.....
230

230

00:20:15.310  -->  00:20:21.830
lets run that that hasn't come up and
that's because the data we got returned was
231

231

00:20:21.830  -->  00:20:25.780
cm which is greater than 0
so that's correct but if we changed this
232

232

00:20:25.780  -->  00:20:33.240
to an invalid number again 13 invalid parameters you can see there so
233

233

00:20:33.240  -->  00:20:36.860
that's just a way of checking your
parameters and -1 is
234

234

00:20:36.860  -->  00:20:40.770
something that's commonly returned if
there is a fault if there is actually a
235

235

00:20:40.770  -->  00:20:43.870
problem with your code and you can
test for that like you I've done here
236

236

00:20:43.870  -->  00:20:46.120
if its is less than 0.0 what
237

237

00:20:46.120  -->  00:20:51.520
I could have done an equals test to see whether equals
one to print an error message so that's why I've
238

238

00:20:51.520  -->  00:20:52.570
use -1
239

239

00:20:52.570  -->  00:20:56.280
ok this video is getting quite long so lets see if we can finish of the second method and end it
240

240

00:20:56.280  -->  00:21:02.440
what I'm going to do for the 2nd method is going to copy
just the first line and it can be a good
241

241

00:21:02.440  -->  00:21:07.590
idea to do this to copy just the
first line to make sure that you haven't
242

242

00:21:07.590  -->  00:21:11.530
made a typo because obviously overloading a method relies on you typing the
243

243

00:21:11.530  -->  00:21:15.330
method name correctly so if you're not
typing it correctly your going to get a
244

244

00:21:15.330  -->  00:21:19.440
new method instead of overloading a method so at the moment that's complaining because
245

245

00:21:19.440  -->  00:21:23.200
we've got another method of the same
number of parameters bet lets changes that now
246

246

00:21:23.200  -->  00:21:29.940
so its just got inches as you recall the second method only accepts
inches and a validation is that its
247

247

00:21:29.940  -->  00:21:35.690
greater than equal to 0 so much easier so our
validation should just be....
248

248

00:21:35.690  -->  00:21:43.690
....so that's our only
options to check whether it's less than
249

249

00:21:43.690  -->  00:21:50.230
0 then its an error so now what we need to
do is we got an inches parameter but we need to call the overloaded
250

250

00:21:50.230  -->  00:21:56.350
method on line 43 and that needs to pass
the feet and inches so we need to
251

251

00:21:56.350  -->  00:22:00.400
convert the inches to feet and inches
if you know what I mean so we need to
252

252

00:22:00.400  -->  00:22:05.070
extract first the number of feet that are in
inches then whatever the remainder is
253

253

00:22:05.070  -->  00:22:13.240
the number of inches that forms part of the 2nd parameter so to
do that I'm gonna type...
254

254

00:22:13.240  -->  00:22:21.890
..I'm going to use int here and that make sure
that its converted to a whole number...so where
255

255

00:22:21.890  -->  00:22:26.720
as we didn't used multiplied by 12 on
line 50 in this case we are dividing it by the
256

256

00:22:26.720  -->  00:22:28.680
inches by 12 to get the
257

257

00:22:28.680  -->  00:22:33.030
numbers feet and then that's the first
parameter that we are going to use and the second one
258

258

00:22:33.030  -->  00:22:42.840
is going to be inches so I'm going to call...and we are going to use the remainder operator for that so that way
259

259

00:22:42.840  -->  00:22:45.950
we can go about doing that is put...
260

260

00:22:45.950  -->  00:22:56.900
...so basically again as you saw
in the previous video using the remainder operator
261

261

00:22:56.900  -->  00:22:59.230
it takes whatever you've typed as
a number
262

262

00:22:59.230  -->  00:23:03.270
divides that total number by that and
gives a reminder in this case what we're doing
263

263

00:23:03.270  -->  00:23:09.050
is we're basically dividing the inches parameter
by 12 and whatever is left over from
264

264

00:23:09.050  -->  00:23:12.370
that is going to be put into our
remaining inches and we doing that
265

265

00:23:12.370  -->  00:23:15.810
obviously to get just the remaining
inches after the feet has been calculated
266

266

00:23:15.810  -->  00:23:27.340
once you're done we can
output it so lets do some output and its going to be...
267

267

00:23:27.340  -->  00:23:45.340
.....
268

268

00:23:45.340  -->  00:23:49.870
...so we are going to call first one we are going to pass 2 parameters
269

269

00:23:49.870  -->  00:23:54.970
which are feet and inches you can see that I've
killed two birds with one stone there so
270

270

00:23:54.970  -->  00:24:00.900
to speak by returning and calling the
method at the same time so the return is gonna
271

271

00:24:00.900  -->  00:24:04.890
get whatever the calculation is from
calling that method up here so we're
272

272

00:24:04.890  -->  00:24:08.590
actually passing the feet and inches to
it so you can calculate and it's going
273

273

00:24:08.590  -->  00:24:14.910
to return that value ultimately to up here
and we're going to call it so we are gonna do now is gonna type...
274

274

00:24:14.910  -->  00:24:23.900
....note that there is 2 options there because it is a overloaded method we are gonna go with the first one which is
275

275

00:24:23.900  -->  00:24:33.610
passing a hundred so run that
and see if it works you can see what I have done here so what I've actually done
276

276

00:24:33.610  -->  00:24:36.690
is I pass the wrong parameter so your wondering why is this coming up
277

277

00:24:36.690  -->  00:24:40.090
saying invalid feet or inches parameters what I've done is I've pass the
278

278

00:24:40.090  -->  00:24:40.920
second parameter as
279

279

00:24:40.920  -->  00:24:47.410
inches where inches was a 100 we called the
second method the second overloaded
280

280

00:24:47.410  -->  00:24:51.310
method with a parameter of a 100 and I have accidentally type it in here
281

281

00:24:51.310  -->  00:24:55.010
as the parameter to call this
first method so what that should have been of
282

282

00:24:55.010  -->  00:25:03.260
course was remaining inches so just go ahead and
try again now we correctly got 8 feet 4 inches
283

283

00:25:03.260  -->  00:25:14.510
254 centimeters let's check that so 8 feet and 4 inches 254 cm so
284

284

00:25:14.510  -->  00:25:19.510
that's correct and just for kicks lets
do one more let's make this 156
285

285

00:25:19.510  -->  00:25:30.470
run again 13 feet and 0 inches that's funny I got it exact lets try 157 I just
286

286

00:25:30.470  -->  00:25:37.950
wanna see that it's working correctly and run
that here we go 13 feet 1 inches lets try
287

287

00:25:37.950  -->  00:25:50.020
that 13 feet 1 inch is 398.78 centimeters 398.78cm
288

288

00:25:50.020  -->  00:25:52.820
but we are only looking at the first couple of
decimal points up to there and you can see that's clearly
289

289

00:25:52.820  -->  00:25:55.850
correct that's our code working and the last thing to check will be our
290

290

00:25:55.850  -->  00:25:57.350
validation
291

291

00:25:57.350  -->  00:26:01.670
we are gonna put a -10 there just to make sure that
it works or if it doesn't work if its
292

292

00:26:01.670  -->  00:26:09.250
invalid we got no data back whatsoever that's because we've got this code in here saying if inches is less than 0 return -1
293

293

00:26:09.250  -->  00:26:12.570
we haven't got anything out putting here
on line 15 which is why we haven't got a
294

294

00:26:12.570  -->  00:26:17.920
message I'll put that back to what it
was and run it one last time so that's it that's my
295

295

00:26:17.920  -->  00:26:21.980
solution so hopefully you enjoy that and
got a lot out of it now method overloading
296

296

00:26:21.980  -->  00:26:26.580
is something that you will see a lot of
in Java code its very commonly used and
297

297

00:26:26.580  -->  00:26:29.570
although this particular example is a
bit contrived because it's probably
298

298

00:26:29.570  -->  00:26:33.680
gonna be rare that you ever need to
know that a hundred inches converted to
299

299

00:26:33.680  -->  00:26:40.630
decimal is or actually 157 which we have established very
rare that you need to know that a
300

300

00:26:40.630  -->  00:26:44.700
157 inches is equal to
13 feet and one-inch but this was just an
301

301

00:26:44.700  -->  00:26:49.050
example more showing how to use method
overloading in practice when you're
302

302

00:26:49.050  -->  00:26:54.320
out there producing rules for production Java code
you find overloaded methods
303

303

00:26:54.320  -->  00:26:57.950
are indeed very common that's it i hope
you've enjoyed that and got a lot out of it
304

304

00:26:57.950  -->  00:26:59.830
and I'll see you in the next video
