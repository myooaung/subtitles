WEBVTT
1
1

00:00:05.500  -->  00:00:10.120
so again what we're trying to do here is
in our for our filter is when the button
2

2

00:00:10.120  -->  00:00:11.290
is selected
3

3

00:00:11.290  -->  00:00:15.340
we only want to show items due for
today when the button isn't selected
4

4

00:00:15.340  -->  00:00:20.520
we want to show all items and also when
the application starts what we want to
5

5

00:00:20.520  -->  00:00:25.090
do is show all items but I guess what
you could do there is you could have a
6

6

00:00:25.090  -->  00:00:29.080
setting if you wanted to allow the user
to change that default condition but
7

7

00:00:29.080  -->  00:00:33.010
we'll start by having that as a default
to always show all items every time the
8

8

00:00:33.010  -->  00:00:35.190
application starts
9

9

00:00:35.190  -->  00:00:40.320
so when we want to filter what our
control displays with javafx we
10

10

00:00:40.320  -->  00:00:45.160
use a filtered list and just as we use
a sorted list we want to sort the
11

11

00:00:45.160  -->  00:00:50.500
items and we can actually do both sorting
and filtering which will do here by
12

12

00:00:50.500  -->  00:00:55.750
wrapping our filtered list with a sorted
list of course we created that sorted
13

13

00:00:55.750  -->  00:00:57.250
list in the previous video
14

14

00:00:57.250  -->  00:01:01.300
so this means that the list can be
filtered and then whatever remains in
15

15

00:01:01.300  -->  00:01:06.480
the list after filtering is then sorted
so when we create a filtered list we have
16

16

00:01:06.480  -->  00:01:10.840
to provide our filtering criteria which
tells which to do which tells the
17

17

00:01:10.840  -->  00:01:15.100
list i should say which to do items we
want to keep and which ones we want to
18

18

00:01:15.100  -->  00:01:16.060
discard
19

19

00:01:16.060  -->  00:01:20.530
so in our case this translates to which
items we want to display which items we
20

20

00:01:20.530  -->  00:01:21.640
want to hide
21

21

00:01:21.640  -->  00:01:25.470
we're going to provide the criteria as a predicate which is a functional
22

22

00:01:25.470  -->  00:01:29.770
interface in the jav.util.function package and we have to
23

23

00:01:29.770  -->  00:01:34.810
implement the test method to test each
and every item for our filter which
24

24

00:01:34.810  -->  00:01:36.180
you'll see me doing shortly
25

25

00:01:36.180  -->  00:01:40.360
so I'm in the controller class and
because we want to use this
26

26

00:01:40.360  -->  00:01:42.360
filtered list in our event handler
27

27

00:01:42.360  -->  00:01:48.720
we want to declare it as an instance
variable going up to the top and add
28

28

00:01:48.720  -->  00:01:51.970
that....
29

29

00:01:52.500  -->  00:01:56.170
....
30

30

00:01:58.520  -->  00:02:03.400
....so we then
want to go down into our initialize
31

31

00:02:03.400  -->  00:02:10.250
method just above where we created our
sorted list variable when we want to put
32

32

00:02:10.250  -->  00:02:14.780
the code in there so lets add the
code and we'll talk about it so....
33

33

00:02:14.780  -->  00:02:21.830
....so we
need to provide the actual items
34

34

00:02:21.830  -->  00:02:28.250
that we want to filter that's going to be...
35

35

00:02:28.250  -->  00:02:33.380
....then I mentioned that we need
to use a predicate
36

36

00:02:33.920  -->  00:02:40.160
so the way we do that is we just type....and you can see the code has
37

37

00:02:40.160  -->  00:02:42.290
been added automatically with the to-do
item
38

38

00:02:42.290  -->  00:02:46.130
notice the method has already been
added as well and we'll just close
39

39

00:02:46.130  -->  00:02:46.730
it off
40

40

00:02:46.730  -->  00:02:52.040
semicolon so the filtered list will call
the test method for every item in the
41

41

00:02:52.040  -->  00:02:56.390
list that has been passed to do it now with test the
test method returns true
42

42

00:02:56.930  -->  00:03:02.420
the item passes the filter on the other
hand if tests returns false the item
43

43

00:03:02.420  -->  00:03:06.920
failes the filter and won't be kept so
when we want to show all the to do items
44

44

00:03:06.920  -->  00:03:12.100
the test method simply needs to return
true because we want every item to pass
45

45

00:03:12.100  -->  00:03:12.950
the test
46

46

00:03:12.950  -->  00:03:16.060
we don't have to check the items
deadline in that case to determine
47

47

00:03:16.060  -->  00:03:20.630
whether it passes or fails but when we
only want to show it to do items with a
48

48

00:03:20.630  -->  00:03:25.400
deadline of today will return true for
items that have a deadline of today and
49

49

00:03:25.400  -->  00:03:29.290
false for items that don't now these
days predicates are usually written
50

50

00:03:29.290  -->  00:03:33.530
as lambda expressions but the clarity
and because we haven't really done much
51

51

00:03:33.530  -->  00:03:37.280
with lambdas at this part of the course
i'm going to spell the test method out
52

52

00:03:37.280  -->  00:03:41.450
manually so you can see that I've added
this code right before the sorted
53

53

00:03:41.450  -->  00:03:45.790
list and we want to show all items and
application start up as I mention so we'll
54

54

00:03:45.790  -->  00:03:50.950
change the false to true which would
give us a list of everything by default and
55

55

00:03:50.950  -->  00:03:56.000
the difference here is now looking
at the code on line 86 instead of
56

56

00:03:56.000  -->  00:03:59.870
passing the listed to do items to the sorted list constructor what we're going to
57

57

00:03:59.870  -->  00:04:03.880
do instead is we're going to pass the
filtered list to the sorted list as i
58

58

00:04:03.880  -->  00:04:09.500
mentioned whatever is left over after
the filtered list has been created is
59

59

00:04:09.500  -->  00:04:11.960
then sorted so the first parameter
60

60

00:04:11.960  -->  00:04:14.960
here is going to change to filtered
list
61

61

00:04:16.070  -->  00:04:24.800
so we'll run this just to
confirm that everything is working and
62

62

00:04:24.800  -->  00:04:28.610
nothing should have changed because
we're still using true for our test
63

63

00:04:28.610  -->  00:04:32.120
method which means we've got all records
but we can confirm that we've got dates
64

64

00:04:32.120  -->  00:04:35.900
sorted correctly it looks like
everything is being sorted as it
65

65

00:04:35.900  -->  00:04:40.010
should be so that certainly still
working close down that run window
66

66

00:04:40.010  -->  00:04:43.610
so now we've done that let's finish
coding out toggle buttons event
67

67

00:04:43.610  -->  00:04:44.270
handler
68

68

00:04:44.270  -->  00:04:48.740
because we need to do that depending on
whether it's been selected or not as
69

69

00:04:48.740  -->  00:04:54.500
to what the filtering conditional will be so will go down there to the handle
70

70

00:04:54.500  -->  00:04:58.610
filter button method so we'll start with
the else condition and if you recall
71

71

00:04:58.610  -->  00:05:02.990
else is if the button is not selected
which means that we want to show
72

72

00:05:02.990  -->  00:05:06.470
everything so all we need to do there is
put...
73

73

00:05:06.470  -->  00:05:14.240
....and it's
going to be a new predicate...
74

74

00:05:14.240  -->  00:05:18.500
.....creates the code for us and by
default because it's all items we want
75

75

00:05:18.500  -->  00:05:22.970
to return true but the other code we
want here is the code if the button is
76

76

00:05:22.970  -->  00:05:26.450
clicked and again what we want to do
there is return items with a deadline
77

77

00:05:26.450  -->  00:05:27.770
of today only
78

78

00:05:27.770  -->  00:05:33.080
so how will we do that we will simply
need to put filtered list....
79

79

00:05:33.080  -->  00:05:33.680
....
80

80

00:05:33.680  -->  00:05:39.530
....in this case will
81

81

00:05:39.530  -->  00:05:40.640
be returned
82

82

00:05:40.640  -->  00:05:44.390
it's not going to be true or false
because what we need to do is actually
83

83

00:05:44.390  -->  00:05:47.750
look through each item and only show the
ones that are due today
84

84

00:05:48.260  -->  00:05:54.650
so to do that we can do return....
85

85

00:05:54.650  -->  00:06:04.280
....and that should return true if the to-do
86

86

00:06:04.280  -->  00:06:07.820
item has got a deadline marked today
87

87

00:06:07.820  -->  00:06:13.100
otherwise we'll return false if it's
true it will be included if it's false
88

88

00:06:13.100  -->  00:06:16.550
it will be excluded so lets write our
application and see what happens
89

89

00:06:19.880  -->  00:06:23.540
so again by default we've got all the
other times going to click on today's
90

90

00:06:23.540  -->  00:06:27.440
items we get nothing and that's because
I haven't got a date
91

91

00:06:27.440  -->  00:06:32.630
I haven't got to-do item of today's date turning it off again and they come back and what
92

92

00:06:32.630  -->  00:06:35.450
we're trying to do also is
click on that to leave the filter on
93

93

00:06:35.450  -->  00:06:44.270
let's add a new item and we'll call it....we'll set the
94

94

00:06:44.270  -->  00:06:46.040
deadline to today's date
95

95

00:06:46.040  -->  00:06:49.430
....
96

96

00:06:49.430  -->  00:06:54.320
it's now showing up as you can see there
as todays date and we click it off
97

97

00:06:54.320  -->  00:06:57.770
and still showing as of june 27
98

98

00:06:57.770  -->  00:07:02.660
so you can see that our filter is
actually working quite well that's great
99

99

00:07:02.660  -->  00:07:05.540
that it's all working and we could
probably enhance the code a little bit
100

100

00:07:05.540  -->  00:07:10.070
on this because what we're doing as you
can see they're in our handle filter
101

101

00:07:10.070  -->  00:07:15.200
button method is we creating a new
predicate each time we actually select
102

102

00:07:15.200  -->  00:07:16.010
an option
103

103

00:07:16.010  -->  00:07:19.820
let's just improve the code slightly by
not creating the predicate each time the
104

104

00:07:19.820  -->  00:07:25.160
buttons pressed so the way to do that is
to come up to our to the top of this
105

105

00:07:25.160  -->  00:07:30.560
file and what we want to do is we want to
add an instance of two predicates so the
106

106

00:07:30.560  -->  00:07:36.200
first one is going to be....
107

107

00:07:36.200  -->  00:08:27.170
....
108

108

00:08:27.170  -->  00:08:35.900
...so that's our 2 predicates
109

109

00:08:35.900  -->  00:08:40.910
initialized in the initialize method for
our controller then we'll change this
110

110

00:08:40.910  -->  00:08:45.890
code here for the filtered list instead
of having the predicate code their we can
111

111

00:08:45.890  -->  00:08:49.850
now just past the second or pass
the first predicate which is want all
112

112

00:08:49.850  -->  00:08:53.660
items which cleans up the code a little bit
113

113

00:08:54.230  -->  00:08:59.060
now we just need to go back to our event
handler down the bottom and do a similar
114

114

00:08:59.060  -->  00:09:02.960
thing instead of having the anonymous
class getting created
115

115

00:09:03.500  -->  00:09:14.960
we're just going to put the code.....
116

116

00:09:14.960  -->  00:09:17.900
....
117

117

00:09:17.900  -->  00:09:26.060
.....so let's just run it again make sure that
118

118

00:09:26.060  -->  00:09:31.280
still works by default it's all items
clicking on today's items and we got
119

119

00:09:31.280  -->  00:09:34.160
something going on there as you can see
I've clicked on todays items
120

120

00:09:34.160  -->  00:09:37.550
it's not quite working is it
121

121

00:09:37.550  -->  00:09:41.060
so when the user presses the toggle
button and the list is filtered the
122

122

00:09:41.060  -->  00:09:46.310
selection state of the list view is reset so
that nothing is selected but the details
123

123

00:09:46.310  -->  00:09:50.030
area and the deadline are displaying the
values for the item that was last
124

124

00:09:50.030  -->  00:09:55.070
selected a little bit weird that's doing
that but we can fix this by selecting an
125

125

00:09:55.070  -->  00:09:58.340
item after we finished filtering the
data
126

126

00:09:58.340  -->  00:10:02.780
so in other words when the user toggles
from the filtered list to the full list
127

127

00:10:02.780  -->  00:10:06.620
it would make sense to select whatever
was selected when they user press the
128

128

00:10:06.620  -->  00:10:10.820
toggle button and we know the item will
still be in the list but when the user
129

129

00:10:10.820  -->  00:10:13.700
toggles from the fullest to the filtered
list
130

130

00:10:13.700  -->  00:10:16.760
we don't know whether the item that
was selected will still be in the list
131

131

00:10:16.760  -->  00:10:20.570
we actually have to check and if it
isn't in the list we just have
132

132

00:10:20.570  -->  00:10:25.370
to select the first item in the filtered list when it isn't an empty now we can
133

133

00:10:25.370  -->  00:10:27.440
do all of that in our event handler
134

134

00:10:27.440  -->  00:10:30.440
let's go back and fix it up
135

135

00:10:31.900  -->  00:10:40.960
so the first line of our event handler will be....
136

136

00:10:40.960  -->  00:10:50.560
....
137

137

00:10:50.560  -->  00:10:54.070
so starting on the list of everything if
the list is everything their are we going to
138

138

00:10:54.070  -->  00:10:59.020
put a filter list...
139

139

00:10:59.020  -->  00:11:05.470
....
140

140

00:11:05.470  -->  00:11:13.180
...that's in the case of
141

141

00:11:13.180  -->  00:11:17.620
showing all our items so turning the
filter off in other words in the case
142

142

00:11:17.620  -->  00:11:21.160
where we actually going into a filter
what we want to do is change the code a
143

143

00:11:21.160  -->  00:11:27.130
little bit so after the predicate we
need to test first to see whether the
144

144

00:11:27.130  -->  00:11:32.470
filtered list is empty so....
145

145

00:11:32.470  -->  00:11:36.400
and it's quite possible that the filters
could be empty if there's no records
146

146

00:11:36.400  -->  00:11:40.000
with a deadline of today so if
there aren't any
147

147

00:11:40.000  -->  00:11:43.690
then what we're going to do is....
148

148

00:11:44.980  -->  00:11:53.230
....otherwise we're going
149

149

00:11:53.230  -->  00:11:56.350
put an else...
150

150

00:11:56.350  -->  00:12:21.010
....
151

151

00:12:21.010  -->  00:12:26.590
...
152

152

00:12:26.590  -->  00:12:28.240
....
153

153

00:12:28.240  -->  00:12:32.980
what we're going to do is to select the
first item to do list view....
154

154

00:12:32.980  -->  00:12:39.250
.....let's
just try that and see if it works
155

155

00:12:45.130  -->  00:12:51.370
now we have got a problem here and I
think I might have reverse things around the
156

156

00:12:51.370  -->  00:12:54.520
wrong way just have a look at our
handler filter button
157

157

00:12:54.520  -->  00:12:58.270
so the logic is if the filter toggle
button is selected
158

158

00:12:59.350  -->  00:13:01.990
I think I've done this the wrong way around so
if the button is selected remember we
159

159

00:13:01.990  -->  00:13:03.430
put the filter to be on
160

160

00:13:03.430  -->  00:13:08.950
so I've actually changes this around the wrong
way so that should be.....
161

161

00:13:08.950  -->  00:13:12.100
...so if they click the button that
means we want todays items
162

162

00:13:12.100  -->  00:13:16.210
otherwise if the button isn't clicked we
want all items so I did that the wrong way....
163

163

00:13:16.750  -->  00:13:22.240
....let's just try that and see if
that works again now
164

164

00:13:22.240  -->  00:13:30.700
ok so got all the items selected by
default because we've set that in our
165

165

00:13:30.700  -->  00:13:34.960
initialize method for the controller
now if I click on today's
166

166

00:13:34.960  -->  00:13:38.140
that's better we can now see one item
and i'm going to highlight that one
167

167

00:13:38.890  -->  00:13:42.820
take off today that's still highlighted
and if we do click on another one
168

168

00:13:42.820  -->  00:13:44.320
like due last week
169

169

00:13:44.320  -->  00:13:48.130
click on today's that disappears but if
we then click it again
170

170

00:13:48.760  -->  00:13:51.940
we get the last one because it
disappeared said todays to do is the
171

171

00:13:51.940  -->  00:13:54.790
one only one that was actually
selectable so we will just try that one more
172

172

00:13:54.790  -->  00:14:00.160
time pick up dry cleaning todays items
we already got one now today's to do so if
173

173

00:14:00.160  -->  00:14:02.050
we take that today's item off
174

174

00:14:02.050  -->  00:14:05.200
that's going to be the one that selected
so that's working
175

175

00:14:05.200  -->  00:14:10.150
so we've come to the end of this point
of coding our application now in a real
176

176

00:14:10.150  -->  00:14:13.600
world application they would be much
more for us to do still
177

177

00:14:13.600  -->  00:14:16.630
and of course we have lots more testing
to do as well
178

178

00:14:16.630  -->  00:14:21.070
for example we haven't tried running the
application when no to do items exist now
179

179

00:14:21.070  -->  00:14:22.000
will it crash
180

180

00:14:22.000  -->  00:14:25.510
we don't know we haven't tested it what
else we also have to really verify the
181

181

00:14:25.510  -->  00:14:26.650
user input
182

182

00:14:26.650  -->  00:14:30.040
right now we're not really checking the
input fields when the user adds a new
183

183

00:14:30.040  -->  00:14:34.720
to-do item if they don't provide a short
description or a deadline we go ahead
184

184

00:14:34.720  -->  00:14:38.980
and add the to-do item anyway so with our
sorting and filtering still work in those
185

185

00:14:38.980  -->  00:14:40.870
situations in those cases
186

186

00:14:40.870  -->  00:14:44.230
so there's a lot more to do so you can
see but what we have done is we've
187

187

00:14:44.230  -->  00:14:49.030
covered a lot of new concepts and learn
the essentials of writing a client
188

188

00:14:49.030  -->  00:14:51.340
application using javafxs
189

189

00:14:51.340  -->  00:14:56.140
now before we move on there's one of the
final thing so we added an exit item to
190

190

00:14:56.140  -->  00:14:58.050
our menu but we never add
191

191

00:14:58.050  -->  00:15:02.490
the event handler for it so let's go add the
event handler to our controller so we will
192

192

00:15:02.490  -->  00:15:09.020
close this down and go back to our fxml code and find a menu item close down
193

193

00:15:09.020  -->  00:15:14.510
this run window so we got our
menu text equals exit there
194

194

00:15:14.510  -->  00:15:19.950
so let's add an on-action for that so....
195

195

00:15:19.950  -->  00:15:25.440
.....we'll
go back to our controller and write the
196

196

00:15:25.440  -->  00:15:26.510
code for that
197

197

00:15:26.510  -->  00:15:34.110
let's just put that down the bottom and
it's going to be....
198

198

00:15:34.110  -->  00:15:38.010
we should annotate that as well
199

199

00:15:38.730  -->  00:15:47.850
and what I should have done is annotated
the handle filter button as well then
200

200

00:15:47.850  -->  00:15:51.570
the actual code is just going to be
platform....
201

201

00:15:52.320  -->  00:15:57.360
that's it that's the code so now when we
run this we should find when we click on
202

202

00:15:57.360  -->  00:16:01.200
file and exit our application closes
down terminates gracefully
203

203

00:16:01.200  -->  00:16:06.180
so file exit and our applications close them
204

204

00:16:06.180  -->  00:16:11.570
so that's it that's our application lets now move on to the next video and
205

205

00:16:11.570  -->  00:16:14.130
that one we are going to start looking
at some of the other features we haven't
206

206

00:16:14.130  -->  00:16:17.040
already looked of javafx so see
you in that video
