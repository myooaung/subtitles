1
1

00:00:05,520  -->  00:00:07,670
- [Tim] In the last two videos,
we looked at the low-level
2

2

00:00:07,670  -->  00:00:11,810
networking API, which
involves ports and sockets.
3

3

00:00:11,810  -->  00:00:13,690
Now while it's important to understand
4

4

00:00:13,690  -->  00:00:16,500
the low-level concepts,
most modern applications
5

5

00:00:16,500  -->  00:00:19,630
are mainly interested in
accessing the internet,
6

6

00:00:19,630  -->  00:00:22,770
and we'll use the high-level API to do so.
7

7

00:00:22,770  -->  00:00:23,930
So in the next two videos,
8

8

00:00:23,930  -->  00:00:26,170
we're going to look at the high-level API,
9

9

00:00:26,170  -->  00:00:29,370
which abstracts networking
concepts even further.
10

10

00:00:29,370  -->  00:00:31,590
So using the high-level
API, you don't actually
11

11

00:00:31,590  -->  00:00:33,510
even need to know about ports and sockets.
12

12

00:00:33,510  -->  00:00:37,140
Instead, you'll use URIs and URLs.
13

13

00:00:37,140  -->  00:00:40,700
The URI stands for universal
resource identifier,
14

14

00:00:40,700  -->  00:00:44,810
and URL stands for
universal resource locator.
15

15

00:00:44,810  -->  00:00:48,850
So what is actually the difference
between a URL and a URI?
16

16

00:00:48,850  -->  00:00:51,870
You'd think that this would
be an easy question to answer,
17

17

00:00:51,870  -->  00:00:55,470
but it's not necessarily that easy.
18

18

00:00:55,470  -->  00:00:58,140
So we just bring a up a webpage.
19

19

00:01:02,240  -->  00:01:03,820
Paste in this link.
20

20

00:01:05,370  -->  00:01:07,930
So if we have a look here,
21

21

00:01:07,930  -->  00:01:10,090
you'll see there's a whole paper,
22

22

00:01:10,090  -->  00:01:12,860
quite a detailed paper as I
scroll down the screen there,
23

23

00:01:12,860  -->  00:01:16,540
from the W3C, that's the
World Wide Web Consortium,
24

24

00:01:16,540  -->  00:01:18,540
by the way, who's responsible
for web standards.
25

25

00:01:18,540  -->  00:01:20,720
This entire paper is trying to explain
26

26

00:01:20,720  -->  00:01:24,260
the difference between a URL and a URI.
27

27

00:01:24,260  -->  00:01:26,620
So a good section to start with would
28

28

00:01:26,620  -->  00:01:28,800
be this section here under confusion.
29

29

00:01:28,800  -->  00:01:30,720
The body of documents, RFI's, etc.,
30

30

00:01:30,720  -->  00:01:33,740
covering URI architecture,
syntax, registration, etc.,
31

31

00:01:33,740  -->  00:01:37,140
spans both the classical
and contemporary periods.
32

32

00:01:37,140  -->  00:01:39,540
The people who are well
versed in URI matters
33

33

00:01:39,540  -->  00:01:43,710
tend to use URL, and URI writers
seem to be interchangeable.
34

34

00:01:44,580  -->  00:01:46,860
So among these experts,
this isn't a problem,
35

35

00:01:46,860  -->  00:01:49,310
but among the internet
community at large it is.
36

36

00:01:49,310  -->  00:01:51,970
So people are not convinced
that URI and URL mean
37

37

00:01:51,970  -->  00:01:55,630
the same thing in documents
where they apparently do.
38

38

00:01:55,630  -->  00:01:57,790
So when one sees an RFC, by the way an RFC
39

39

00:01:57,790  -->  00:02:00,300
is a request for comments, by the way.
40

40

00:02:00,300  -->  00:02:01,810
It's a formal document from
41

41

00:02:01,810  -->  00:02:03,980
the Internet Engineering Task Force.
42

42

00:02:03,980  -->  00:02:07,220
So when one sees an RFC that
talks about URI schemes,
43

43

00:02:07,220  -->  00:02:09,420
another that talks about URL schemes,
44

44

00:02:09,420  -->  00:02:12,080
and yet another that talks of URN schemes,
45

45

00:02:12,080  -->  00:02:14,020
it's probably pretty
natural to wonder what
46

46

00:02:14,020  -->  00:02:16,760
the difference is and how
they relate to each other.
47

47

00:02:16,760  -->  00:02:18,660
So it can be a bit
confusing, but with that
48

48

00:02:18,660  -->  00:02:20,300
set aside let's stick to what we need
49

49

00:02:20,300  -->  00:02:24,120
to know to write Java networking code.
50

50

00:02:24,120  -->  00:02:27,190
Now when working with
a java dot net package,
51

51

00:02:27,190  -->  00:02:30,800
a URI is an identifier that
might not provide enough
52

52

00:02:30,800  -->  00:02:34,900
information to access the
resource that it identifies.
53

53

00:02:34,900  -->  00:02:37,990
Now a URL, on the other
hand, is an identifier
54

54

00:02:37,990  -->  00:02:40,160
that includes information about how
55

55

00:02:40,160  -->  00:02:44,080
to access the resource that it identifies.
56

56

00:02:44,080  -->  00:02:46,150
So another way to state this is that a URI
57

57

00:02:46,150  -->  00:02:50,090
can specify a relative path, but a URL has
58

58

00:02:50,090  -->  00:02:53,930
to be an absolute path,
because when we use the URL,
59

59

00:02:53,930  -->  00:02:55,930
it has to contain enough information
60

60

00:02:55,930  -->  00:03:00,100
to locate and access the
resource that it identifies.
61

61

00:03:01,180  -->  00:03:05,240
Now it's actually easy to
convert between URLs and URIs.
62

62

00:03:05,240  -->  00:03:06,840
So all you really have to do is provide
63

63

00:03:06,840  -->  00:03:09,380
what the method you want to use requires,
64

64

00:03:09,380  -->  00:03:12,990
a URL or a URI, and
you'll actually be fine.
65

65

00:03:12,990  -->  00:03:14,920
Now the recommended practise when working
66

66

00:03:14,920  -->  00:03:18,330
with the java dot net
classes is to use a URI
67

67

00:03:18,330  -->  00:03:20,810
until you actually want
to access a resource,
68

68

00:03:20,810  -->  00:03:24,450
and then to convert the URI to a URL.
69

69

00:03:24,450  -->  00:03:26,790
So having said that, sometimes
there's no need to start
70

70

00:03:26,790  -->  00:03:29,930
with the URI, because the
method you'll use to open
71

71

00:03:29,930  -->  00:03:34,450
or access a resource accepts
a URL right off the bat.
72

72

00:03:34,450  -->  00:03:36,600
Now I know that sounds terribly confusing,
73

73

00:03:36,600  -->  00:03:39,390
but let's see if we can make
a bit more sense of this.
74

74

00:03:39,390  -->  00:03:41,910
So a scheme is part of a URI or URL
75

75

00:03:41,910  -->  00:03:43,900
that appears before the colon.
76

76

00:03:43,900  -->  00:03:48,810
For example, HTTP, file, and
FTP, well they're all schemes.
77

77

00:03:48,810  -->  00:03:52,970
So another way to define a
URL is that it's a HTTP URI.
78

78

00:03:55,840  -->  00:03:58,470
So again this terminology
can be confusing.
79

79

00:03:58,470  -->  00:04:02,700
So developers often use
the terms URI and URL
80

80

00:04:02,700  -->  00:04:06,700
interchangeably even though
it's technically wrong to do so.
81

81

00:04:06,700  -->  00:04:09,640
Or they use URI, but they mean URL.
82

82

00:04:09,640  -->  00:04:12,520
So according to some
developers and documentation,
83

83

00:04:12,520  -->  00:04:15,780
the term URL is now outdated
and shouldn't be used,
84

84

00:04:15,780  -->  00:04:19,700
but many developers and
many APIs still use that.
85

85

00:04:19,700  -->  00:04:21,480
So the point here I'm trying to make
86

86

00:04:21,480  -->  00:04:23,860
is don't worry about this terminology.
87

87

00:04:23,860  -->  00:04:26,380
Understanding the sometimes
razor-thin difference
88

88

00:04:26,380  -->  00:04:29,780
between a URI and a URL
really isn't necessary
89

89

00:04:29,780  -->  00:04:33,060
to get your feet wet with
writing networking code.
90

90

00:04:33,060  -->  00:04:35,920
Now if you recall when we
worked with the low-level API,
91

91

00:04:35,920  -->  00:04:37,940
we used the following classes.
92

92

00:04:37,940  -->  00:04:41,820
Socket, ServerSocket, and DatagramSocket.
93

93

00:04:41,820  -->  00:04:44,030
When working with the high-level API,
94

94

00:04:44,030  -->  00:04:46,800
we're gonna be using
the following classes.
95

95

00:04:46,800  -->  00:04:48,800
URI, URL, URLConnection,
96

96

00:04:49,830  -->  00:04:52,250
as well as HttpURLConnection.
97

97

00:04:53,160  -->  00:04:55,550
So let's actually start with URIs.
98

98

00:04:55,550  -->  00:04:57,210
We're not gonna spend
too much time on them,
99

99

00:04:57,210  -->  00:05:00,660
because you'll use URLs
when accessing the internet.
100

100

00:05:00,660  -->  00:05:05,080
So a URI can actually
contain nine components.
101

101

00:05:05,080  -->  00:05:07,080
The scheme, number one.
102

102

00:05:07,080  -->  00:05:09,880
The scheme-specific part, number two.
103

103

00:05:09,880  -->  00:05:12,380
The authority, number three.
104

104

00:05:12,380  -->  00:05:14,840
The user info, number four.
105

105

00:05:14,840  -->  00:05:17,340
The host, number five
106

106

00:05:17,340  -->  00:05:18,760
Six is the port.
107

107

00:05:18,760  -->  00:05:20,210
Path, number seven.
108

108

00:05:20,210  -->  00:05:21,550
Query, number eight.
109

109

00:05:21,550  -->  00:05:23,490
And fragment, number nine.
110

110

00:05:23,490  -->  00:05:25,880
And you can see there that
I've got on the screen there
111

111

00:05:25,880  -->  00:05:28,590
a generic form of a URI,
outlining each component,
112

112

00:05:28,590  -->  00:05:31,470
and that's taken from the Wikipedia link.
113

113

00:05:31,470  -->  00:05:32,730
I'll also attach this in
114

114

00:05:32,730  -->  00:05:35,980
the resources section of this video.
115

115

00:05:35,980  -->  00:05:38,170
The good thing is you're
gonna see examples of this
116

116

00:05:38,170  -->  00:05:41,000
as we progress through
the next few videos.
117

117

00:05:41,000  -->  00:05:43,380
So URIs that specify scheme here,
118

118

00:05:43,380  -->  00:05:46,030
well they're called absolute URIs.
119

119

00:05:46,030  -->  00:05:48,510
And when a URI doesn't specify scheme,
120

120

00:05:48,510  -->  00:05:51,010
it's actually called a relative URI.
121

121

00:05:51,010  -->  00:05:52,790
Alright, so let's actually go back
122

122

00:05:52,790  -->  00:05:56,050
to IntelliJ and start creating some code.
123

123

00:05:56,050  -->  00:05:58,710
So you can see that I've created
a new project here called
124

124

00:05:58,710  -->  00:06:01,290
networking, so do that if you
haven't already done that.
125

125

00:06:01,290  -->  00:06:02,950
And let's make a start by adding
126

126

00:06:02,950  -->  00:06:06,190
some code to the main method.
127

127

00:06:06,190  -->  00:06:09,170
So we're gonna start with URI, capitals.
128

128

00:06:09,170  -->  00:06:11,490
You'll notice that
that's wanting to import,
129

129

00:06:11,490  -->  00:06:14,210
we wanna specify the java dot net one.
130

130

00:06:14,210  -->  00:06:16,550
The URI is equal to new URI.
131

131

00:06:19,010  -->  00:06:23,330
We're gonna have DB colon,
forward slash forward slash.
132

132

00:06:23,330  -->  00:06:25,330
Username colon password.
133

133

00:06:27,070  -->  00:06:31,240
At my server dot com, colon
5000, forward slash catalogue,
134

134

00:06:34,340  -->  00:06:37,220
forward slash phones, question mark,
135

135

00:06:37,220  -->  00:06:39,890
OS equals Android, hash Samsung.
136

136

00:06:44,040  -->  00:06:46,340
Actually what we'll do is we'll pull aside
137

137

00:06:46,340  -->  00:06:49,170
surround this in a try catch loop.
138

138

00:06:52,230  -->  00:06:55,640
We're gonna catch a URI syntax exception.
139

139

00:07:08,550  -->  00:07:11,140
Okay, back to our code.
140

140

00:07:11,140  -->  00:07:13,880
So let's now get access to
these individual components
141

141

00:07:13,880  -->  00:07:16,040
that we talked about in the slides.
142

142

00:07:16,040  -->  00:07:19,120
So it'll start with the scheme.
143

143

00:07:19,120  -->  00:07:23,290
So we can do scheme equals
plus URI dot get scheme.
144

144

00:07:26,890  -->  00:07:29,540
Next we're going to do
the scheme-specific part.
145

145

00:07:29,540  -->  00:07:32,450
So scheme-specific part is equal to
146

146

00:07:34,150  -->  00:07:37,310
plus URI dot get scheme specific part.
147

147

00:07:40,880  -->  00:07:41,710
Authority.
148

148

00:07:48,040  -->  00:07:50,790
Next we're going to do user info.
149

149

00:07:52,580  -->  00:07:55,000
That's URI dot get user info.
150

150

00:07:58,860  -->  00:08:01,700
Next we'll do host, so host equals
151

151

00:08:05,860  -->  00:08:07,190
URI dot get host
152

152

00:08:11,200  -->  00:08:12,870
Port, so port equals
153

153

00:08:13,740  -->  00:08:15,570
plus URI dot get port.
154

154

00:08:20,420  -->  00:08:23,760
Path, path equals plus URI dot get path.
155

155

00:08:27,410  -->  00:08:29,700
Next after path, query
156

156

00:08:29,700  -->  00:08:31,780
equals URI dot get query.
157

157

00:08:33,660  -->  00:08:35,370
And the last one, fragment.
158

158

00:08:35,370  -->  00:08:36,370
So fragment.
159

159

00:08:41,320  -->  00:08:44,820
Fragment equals plus URI dot get fragment.
160

160

00:08:47,130  -->  00:08:50,590
Alright so in the code here,
we've created a URI instance
161

161

00:08:50,590  -->  00:08:53,630
for a URL that will form a database query.
162

162

00:08:53,630  -->  00:08:57,790
So if we actually run this
just to see what happens.
163

163

00:09:08,600  -->  00:09:12,770
So you see we've got, first,
what scheme equals DB?
164

164

00:09:12,770  -->  00:09:14,550
The path that actually occurs
165

165

00:09:14,550  -->  00:09:17,800
before the colon in the URI on line 10.
166

166

00:09:17,800  -->  00:09:19,510
Now you can write your own schemes,
167

167

00:09:19,510  -->  00:09:20,680
although you're encouraged not
168

168

00:09:20,680  -->  00:09:23,410
to do so to avoid name conflicts.
169

169

00:09:23,410  -->  00:09:25,830
Though usually when you want
to define your own scheme,
170

170

00:09:25,830  -->  00:09:28,620
there's alternate ways to accomplish
171

171

00:09:28,620  -->  00:09:30,100
what you're trying to do.
172

172

00:09:30,100  -->  00:09:32,590
Using name spaces is one example for that.
173

173

00:09:32,590  -->  00:09:35,220
Next is the scheme-specific part.
174

174

00:09:35,220  -->  00:09:37,820
This is everything after the colon,
175

175

00:09:37,820  -->  00:09:39,920
before the hash as you can see there.
176

176

00:09:39,920  -->  00:09:41,170
So this is the identifier
177

177

00:09:41,170  -->  00:09:43,330
for the resource that you wanna use.
178

178

00:09:43,330  -->  00:09:45,710
So in this case it's a
query for the phones table
179

179

00:09:45,710  -->  00:09:48,960
on the phones table in
the catalogue database.
180

180

00:09:48,960  -->  00:09:51,650
Now the authority, as you
can see there on the screen,
181

181

00:09:51,650  -->  00:09:54,600
that contains the host
and optionally a password,
182

182

00:09:54,600  -->  00:09:57,240
as well as the username and port number.
183

183

00:09:57,240  -->  00:10:00,110
Now the host can be a registered
name, as in the example,
184

184

00:10:00,110  -->  00:10:02,610
or an IPv4 slash IPv6 address.
185

185

00:10:03,760  -->  00:10:05,030
User info, the next one,
186

186

00:10:05,030  -->  00:10:07,470
that contains the username and password.
187

187

00:10:07,470  -->  00:10:11,210
Basically any credentials
required to access the resource.
188

188

00:10:11,210  -->  00:10:15,380
The host is the host name,
or an IPV4 or IPv6 address.
189

189

00:10:16,460  -->  00:10:18,900
The port is obviously the port number.
190

190

00:10:18,900  -->  00:10:22,250
Now the path is catalogue slash
phones as you can see here
191

191

00:10:22,250  -->  00:10:24,220
or slash catalogue slash phones.
192

192

00:10:24,220  -->  00:10:27,050
It's the path to the resource on the host.
193

193

00:10:27,050  -->  00:10:29,270
So in this case the resource is a database
194

194

00:10:29,270  -->  00:10:33,500
and the path points to a specific
table within the database.
195

195

00:10:33,500  -->  00:10:35,050
Now the query, the next one.
196

196

00:10:35,050  -->  00:10:37,470
That's always separated from the part
197

197

00:10:37,470  -->  00:10:39,700
that comes before it by a question mark.
198

198

00:10:39,700  -->  00:10:42,150
So in this case the query
is OS equals Android,
199

199

00:10:42,150  -->  00:10:43,500
as you can see there.
200

200

00:10:43,500  -->  00:10:45,510
The syntax can actually be in any format,
201

201

00:10:45,510  -->  00:10:48,600
because the standard
doesn't strictly define it,
202

202

00:10:48,600  -->  00:10:51,370
but it's often a set of key value pairs.
203

203

00:10:51,370  -->  00:10:53,630
And finally the last one, fragment,
204

204

00:10:53,630  -->  00:10:56,880
well that specifies a
secondary resource or location.
205

205

00:10:56,880  -->  00:10:58,730
So in this case it's saying that
206

206

00:10:58,730  -->  00:11:01,150
only Samsung phones should be returned.
207

207

00:11:01,150  -->  00:11:03,880
Now if the URI pointed to a webpage,
208

208

00:11:03,880  -->  00:11:06,480
the fragment could be an
ID, a section heading,
209

209

00:11:06,480  -->  00:11:08,950
for example, in the HTML itself.
210

210

00:11:08,950  -->  00:11:11,270
So as you may have
noticed there is overlap
211

211

00:11:11,270  -->  00:11:13,830
between the contents of
some of these components.
212

212

00:11:13,830  -->  00:11:16,130
And also many of the
components are optional.
213

213

00:11:16,130  -->  00:11:19,570
So instead let's actually
make a change here.
214

214

00:11:19,570  -->  00:11:22,740
We're gonna change the URI completely.
215

215

00:11:24,370  -->  00:11:26,390
You're gonna make that instead of along
216

216

00:11:26,390  -->  00:11:31,370
with the database example,
let's just type in hello there.
217

217

00:11:31,370  -->  00:11:33,620
Now if you should run this,
218

218

00:11:36,260  -->  00:11:38,360
notice that there's no exceptions thrown,
219

219

00:11:38,360  -->  00:11:39,750
but as you can see on the screen there,
220

220

00:11:39,750  -->  00:11:43,060
there's many parts now
that are showing as no,
221

221

00:11:43,060  -->  00:11:46,030
and also negative one being
printed for the port number.
222

222

00:11:46,030  -->  00:11:49,670
So, point is though, it's
still a well-formed URI.
223

223

00:11:49,670  -->  00:11:52,540
It doesn't have a scheme part
because there's no colon,
224

224

00:11:52,540  -->  00:11:55,700
but it has a path and
a scheme-specific part.
225

225

00:11:55,700  -->  00:11:57,670
Now of course this resource doesn't exist,
226

226

00:11:57,670  -->  00:11:59,220
but that doesn't really matter.
227

227

00:11:59,220  -->  00:12:01,170
Just as with files, until you actually try
228

228

00:12:01,170  -->  00:12:03,540
to access a resource, it
doesn't have to exist.
229

229

00:12:03,540  -->  00:12:05,840
And remember that you will use a URL,
230

230

00:12:05,840  -->  00:12:10,270
rather than a URI, when you
actually access a resource.
231

231

00:12:10,270  -->  00:12:12,340
Now the only other thing
that I'm gonna touch on
232

232

00:12:12,340  -->  00:12:16,310
for URIs is how to convert them to URLs.
233

233

00:12:16,310  -->  00:12:20,440
So let's change the URL
back to one that's sensible.
234

234

00:12:20,440  -->  00:12:21,700
So I'm gonna undo that change,
235

235

00:12:21,700  -->  00:12:23,270
well I'm gonna comment that out.
236

236

00:12:23,270  -->  00:12:26,720
And bring back the other example again.
237

237

00:12:26,720  -->  00:12:28,870
Alright, I'm commenting it.
238

238

00:12:28,870  -->  00:12:30,260
And let's comment out the code
239

239

00:12:30,260  -->  00:12:34,620
that was printing out the
various components for now.
240

240

00:12:34,620  -->  00:12:36,840
Instead what we're gonna do,
241

241

00:12:36,840  -->  00:12:39,960
let's have a go at
converting this URI to a URL.
242

242

00:12:39,960  -->  00:12:43,800
So to do that, just type URL, that's URL,
243

243

00:12:43,800  -->  00:12:46,050
is equal to URI dot to URL.
244

244

00:12:48,420  -->  00:12:49,500
Print it out.
245

245

00:12:50,560  -->  00:12:52,220
URL equals plus URL.
246

246

00:12:54,350  -->  00:12:56,200
And the other thing we'd wanna do here
247

247

00:12:56,200  -->  00:12:59,800
is we need to catch a different exception.
248

248

00:12:59,800  -->  00:13:03,120
We can see over here, you come up,
249

249

00:13:03,120  -->  00:13:05,020
it's looking for a
malformed URL exception.
250

250

00:13:05,020  -->  00:13:07,020
So let's catch that one.
251

251

00:13:11,970  -->  00:13:13,390
So URL malformed.
252

252

00:13:16,060  -->  00:13:18,240
E dot get message.
253

253

00:13:18,240  -->  00:13:22,740
So obviously we're using
the URI dot to URL method
254

254

00:13:22,740  -->  00:13:25,320
to actually perform the conversion to URL.
255

255

00:13:25,320  -->  00:13:27,490
So if I actually run this,
256

256

00:13:30,010  -->  00:13:31,550
we actually get an exception,
257

257

00:13:31,550  -->  00:13:33,310
and the exception was actually caught,
258

258

00:13:33,310  -->  00:13:35,620
and you can see here we're
printing or executing
259

259

00:13:35,620  -->  00:13:38,750
the malformed URL exception code block,
260

260

00:13:38,750  -->  00:13:42,460
or the call exception,
unknown protocol DB.
261

261

00:13:42,460  -->  00:13:44,130
So hopefully that now demonstrates to you
262

262

00:13:44,130  -->  00:13:47,060
that the URI doesn't have
to be valid to work with it.
263

263

00:13:47,060  -->  00:13:49,290
It only has to be valid
when you wanna convert it
264

264

00:13:49,290  -->  00:13:51,890
to an absolute location,
as we're trying to do here
265

265

00:13:51,890  -->  00:13:55,410
on the code on line 14 by
converting it to a URL.
266

266

00:13:55,410  -->  00:13:56,950
So let's actually change the scheme
267

267

00:13:56,950  -->  00:14:00,200
to something that we're
much more familiar with.
268

268

00:14:00,200  -->  00:14:03,860
Come back and change
the DB to HTTP instead.
269

269

00:14:05,370  -->  00:14:06,210
Run that.
270

270

00:14:09,590  -->  00:14:12,480
You can see that the URL
is now equal to the URI,
271

271

00:14:12,480  -->  00:14:15,010
because the URI is an absolute path.
272

272

00:14:15,010  -->  00:14:17,960
Obviously no exceptions
have actually thrown now.
273

273

00:14:17,960  -->  00:14:21,830
Alright, so let's actually
take a look at a relative URI.
274

274

00:14:21,830  -->  00:14:23,830
So comment that one out.
275

275

00:14:26,260  -->  00:14:28,750
And then we'll go with something like,
276

276

00:14:28,750  -->  00:14:30,150
well actually what we'll do is we'll just
277

277

00:14:30,150  -->  00:14:34,110
delete the first part up until
the forward slash catalogue.
278

278

00:14:34,110  -->  00:14:36,300
Cut this out, or just that part of it now,
279

279

00:14:36,300  -->  00:14:38,220
so it's a relative URI.
280

280

00:14:39,460  -->  00:14:41,960
So now you can see the
URI is a relative URI
281

281

00:14:41,960  -->  00:14:45,080
because it doesn't completely
identify the resource.
282

282

00:14:45,080  -->  00:14:47,310
So in other words it
doesn't contain the schemer,
283

283

00:14:47,310  -->  00:14:49,760
so you don't know if the
URI points to a webpage or
284

284

00:14:49,760  -->  00:14:53,250
a database or a file or you
know, perhaps something else.
285

285

00:14:53,250  -->  00:14:55,430
It doesn't contain the root location,
286

286

00:14:55,430  -->  00:14:58,000
so if it's, if this was a webpage,
287

287

00:14:58,000  -->  00:15:00,150
the URL doesn't contain the server
288

288

00:15:00,150  -->  00:15:03,850
or any credentials required
to access the location.
289

289

00:15:03,850  -->  00:15:06,160
It also doesn't specify database table
290

290

00:15:06,160  -->  00:15:08,200
for a disc driver location.
291

291

00:15:08,200  -->  00:15:09,630
So in other words, there isn't enough
292

292

00:15:09,630  -->  00:15:12,580
information here to really
access the resource.
293

293

00:15:12,580  -->  00:15:14,330
So the question for you now would be,
294

294

00:15:14,330  -->  00:15:16,970
do you think you can
convert this URI to a URL?
295

295

00:15:16,970  -->  00:15:21,140
Well let's actually run the
code and see what happens.
296

296

00:15:23,230  -->  00:15:25,580
You can see we've actually
got an exception here,
297

297

00:15:25,580  -->  00:15:28,300
illegal argument exception
which we haven't tried to catch.
298

298

00:15:28,300  -->  00:15:30,950
So a URI is not absolute.
299

299

00:15:30,950  -->  00:15:32,860
Now earlier in this video, I said that
300

300

00:15:32,860  -->  00:15:35,560
the URIs can be relative, but URLs have
301

301

00:15:35,560  -->  00:15:39,640
to be absolute, so the
exception makes sense here.
302

302

00:15:39,640  -->  00:15:42,420
Because we converted to a
URL, it's not gonna be valid
303

303

00:15:42,420  -->  00:15:45,380
unless the URL ends up
being an absolute URL.
304

304

00:15:45,380  -->  00:15:48,590
So you kinda get an absolute
URL from a relative URI,
305

305

00:15:48,590  -->  00:15:51,010
in other words, because there
isn't enough information in
306

306

00:15:51,010  -->  00:15:55,670
the URI to determine the absolute
location of the resource.
307

307

00:15:55,670  -->  00:15:59,560
Now when you wanna access a
resource, you will use a URL.
308

308

00:15:59,560  -->  00:16:01,520
At that point the location
of the resource has
309

309

00:16:01,520  -->  00:16:03,960
to be absolute, otherwise
the Java Runtime won't
310

310

00:16:03,960  -->  00:16:06,860
have enough information
ultimately to access it.
311

311

00:16:06,860  -->  00:16:10,730
Now there will be times when
you wanna relative URIs though,
312

312

00:16:10,730  -->  00:16:14,440
but usually you'll use
them along with a base URI.
313

313

00:16:14,440  -->  00:16:17,380
So this base URI will specify the root
314

314

00:16:17,380  -->  00:16:20,650
of the relative path,
which can be quite handy.
315

315

00:16:20,650  -->  00:16:23,410
And if you're accessing
lots of pages on a website,
316

316

00:16:23,410  -->  00:16:26,140
and instead of working with absolute URIs,
317

317

00:16:26,140  -->  00:16:29,110
it's probably better to have a base URI
318

318

00:16:29,110  -->  00:16:31,730
that contains the host
information than a bunch
319

319

00:16:31,730  -->  00:16:34,710
of relative URIs for the specific pages.
320

320

00:16:34,710  -->  00:16:37,890
Therefore in that scenario,
if the host location changes,
321

321

00:16:37,890  -->  00:16:41,390
you only really have
to update the base URI.
322

322

00:16:41,390  -->  00:16:44,550
So let's as an example say
that the host is located
323

323

00:16:44,550  -->  00:16:47,670
at HTTP example dot com, but later on
324

324

00:16:47,670  -->  00:16:51,150
it changes to HTTP example dot org.
325

325

00:16:51,150  -->  00:16:54,160
And if you've used absolute
URIs throughout your code,
326

326

00:16:54,160  -->  00:16:55,500
you'll have to go through your code
327

327

00:16:55,500  -->  00:16:58,040
and change each and every URI instance.
328

328

00:16:58,040  -->  00:17:01,240
But if you've used relative
URIs with a base URI,
329

329

00:17:01,240  -->  00:17:02,890
then you really only have to change
330

330

00:17:02,890  -->  00:17:06,050
the one instance of the base URI.
331

331

00:17:06,050  -->  00:17:09,300
So let's add the base
URI for our relative URI.
332

332

00:17:09,300  -->  00:17:11,900
So I'm gonna come back and
add some code above that.
333

333

00:17:11,900  -->  00:17:16,070
So we're gonna call that URI,
base URI is equal to new URI.
334

334

00:17:19,740  -->  00:17:23,430
And we're gonna copy that part
from the commented out code
335

335

00:17:23,430  -->  00:17:28,190
up to but not including
the slash after the port.
336

336

00:17:28,190  -->  00:17:29,750
Now paste that in there and that's
337

337

00:17:29,750  -->  00:17:31,160
the base URI, as you can see there.
338

338

00:17:31,160  -->  00:17:35,220
So now that we've done
that, we can make a change.
339

339

00:17:35,220  -->  00:17:37,280
What we're gonna do is after that URI,
340

340

00:17:37,280  -->  00:17:39,160
we're gonna create a third URI.
341

341

00:17:39,160  -->  00:17:43,250
So URI, we'll call this
one resolved URI, equals.
342

342

00:17:45,890  -->  00:17:50,060
That's gonna be equal to
base URI dot resolve URI.
343

343

00:17:51,640  -->  00:17:52,960
Now down here we're gonna have
344

344

00:17:52,960  -->  00:17:54,850
to change this URI, instead of URI now
345

345

00:17:54,850  -->  00:17:58,210
we're gonna be working
with the resolved URL.
346

346

00:17:58,210  -->  00:18:00,290
So basically when you
wanna access a webpage
347

347

00:18:00,290  -->  00:18:02,070
on the my server dot com host,
348

348

00:18:02,070  -->  00:18:05,340
you'll combine the base
URI with the relative URI
349

349

00:18:05,340  -->  00:18:08,510
for the webpage, or API or
servers you wanna access,
350

350

00:18:08,510  -->  00:18:10,560
using the URL dot resolve method.
351

351

00:18:10,560  -->  00:18:12,580
You can see that we've done that,
352

352

00:18:12,580  -->  00:18:15,980
so we've created our base URL on line 13.
353

353

00:18:15,980  -->  00:18:19,160
We've left our relative URI on line 14,
354

354

00:18:19,160  -->  00:18:22,480
and on line 15 we've
created a resolve URI,
355

355

00:18:22,480  -->  00:18:25,390
which is the base URI dot resolve URI,
356

356

00:18:25,390  -->  00:18:27,010
which is basically pending that
357

357

00:18:27,010  -->  00:18:29,570
and forming a valid absolute URI.
358

358

00:18:29,570  -->  00:18:31,340
You can see here that we're therefore
359

359

00:18:31,340  -->  00:18:33,790
able to convert it into a URL.
360

360

00:18:33,790  -->  00:18:37,950
Now let's just run this to
make sure that it does work.
361

361

00:18:40,270  -->  00:18:42,260
And you can see we've
got no more exceptions,
362

362

00:18:42,260  -->  00:18:46,030
and we've successfully
converted that into a URL.
363

363

00:18:46,030  -->  00:18:47,940
Alright, so let's end the video here.
364

364

00:18:47,940  -->  00:18:49,720
In the next video we'll continue on,
365

365

00:18:49,720  -->  00:18:52,940
and we'll do a little bit
more with relative URIs.
366

366

00:18:52,940  -->  00:18:55,350
So I'll see you in the next video.
