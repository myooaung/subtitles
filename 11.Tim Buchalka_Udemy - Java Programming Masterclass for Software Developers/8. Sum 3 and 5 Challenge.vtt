WEBVTT
1
1

00:00:04.570  -->  00:00:06.040
Alright it's time for another
2

2

00:00:06.040  -->  00:00:08.469
challenge this is the some three and
3

3

00:00:08.469  -->  00:00:11.350
five challenge. So the challenge is to
4

4

00:00:11.350  -->  00:00:13.599
create a for statement using a range of
5

5

00:00:13.599  -->  00:00:17.320
numbers from 1 to 1,000 inclusive,
6

6

00:00:17.320  -->  00:00:19.509
you want to sum all the numbers when you're
7

7

00:00:19.509  -->  00:00:21.579
looping through that can be divided with
8

8

00:00:21.579  -->  00:00:24.849
both the numbers 3 and also with 5, now
9

9

00:00:24.849  -->  00:00:26.349
for those numbers that meet the above
10

10

00:00:26.349  -->  00:00:28.570
conditions in other words that are found
11

11

00:00:28.570  -->  00:00:30.910
to be divisible by both 3 and also
12

12

00:00:30.910  -->  00:00:33.070
divisible with 5, you want to print out
13

13

00:00:33.070  -->  00:00:35.440
that number and also you want to break
14

14

00:00:35.440  -->  00:00:36.250
out of the loop
15

15

00:00:36.250  -->  00:00:38.470
once you find five numbers that meet
16

16

00:00:38.470  -->  00:00:40.570
those above conditions and then also
17

17

00:00:40.570  -->  00:00:42.970
after breaking out of the loop print the
18

18

00:00:42.970  -->  00:00:44.710
sum of the numbers the total numbers
19

19

00:00:44.710  -->  00:00:46.900
that you found that have met those above
20

20

00:00:46.900  -->  00:00:49.390
conditions and for this one just type
21

21

00:00:49.390  -->  00:00:51.820
all your code into the main method.
22

22

00:00:51.820  -->  00:00:53.350
Now the text for this challenge is in the
23

23

00:00:53.350  -->  00:00:55.390
resources section of the video so you
24

24

00:00:55.390  -->  00:00:56.800
can go ahead and download that if you
25

25

00:00:56.800  -->  00:00:58.840
need to at this point pause the video
26

26

00:00:58.840  -->  00:01:00.220
and see how you go with that challenge,
27

27

00:01:00.220  -->  00:01:02.170
once you're finished come back and you
28

28

00:01:02.170  -->  00:01:04.239
can check out my solution so pause the
29

29

00:01:04.239  -->  00:01:07.780
video now. Alright so how do you know
30

30

00:01:07.780  -->  00:01:09.370
hopefully managed to solve that
31

31

00:01:09.370  -->  00:01:11.170
challenge let's see if we can actually
32

32

00:01:11.170  -->  00:01:13.900
solve it now on screen. Alright so what
33

33

00:01:13.900  -->  00:01:15.790
we're going to do first is you're going
34

34

00:01:15.790  -->  00:01:18.070
to start by declaring a count variable
35

35

00:01:18.070  -->  00:01:20.080
that represents the counter found
36

36

00:01:20.080  -->  00:01:22.030
numbers, so we need one for that because
37

37

00:01:22.030  -->  00:01:23.590
we know we need to break out of the loop
38

38

00:01:23.590  -->  00:01:26.290
once we find five numbers that meet the
39

39

00:01:26.290  -->  00:01:28.990
conditions then we also need a variable
40

40

00:01:28.990  -->  00:01:30.220
for the sum because we're going to be
41

41

00:01:30.220  -->  00:01:32.440
recording the sum of those numbers, so
42

42

00:01:32.440  -->  00:01:34.659
that's so creative variable variable for
43

43

00:01:34.659  -->  00:01:36.280
both remembering that we're you just
44

44

00:01:36.280  -->  00:01:37.960
using the main method for this one for
45

45

00:01:37.960  -->  00:01:40.720
this exercise, so to start with int count
46

46

00:01:40.720  -->  00:01:45.670
for our count equals zero initializing
47

47

00:01:45.670  -->  00:01:47.170
that to zero and for our sum I'm going
48

48

00:01:47.170  -->  00:01:49.750
to call it sum its sum equal to zero and
49

49

00:01:49.750  -->  00:01:51.479
I just place it to make it more readable.
50

50

00:01:51.479  -->  00:01:54.430
Alright so next we need a loop we're
51

51

00:01:54.430  -->  00:01:56.170
going to arrange or loop rather through
52

52

00:01:56.170  -->  00:01:58.360
a range of numbers between 1 and 1000
53

53

00:01:58.360  -->  00:02:00.310
with a for loop so for that we're going
54

54

00:02:00.310  -->  00:02:03.610
to put 4 and in parentheses int i equals
55

55

00:02:03.610  -->  00:02:07.600
1 semicolon and we need to use the range
56

56

00:02:07.600  -->  00:02:09.549
1000 so it's going to be less than or
57

57

00:02:09.549  -->  00:02:12.579
equal to 1000 since we learned a both
58

58

00:02:12.579  -->  00:02:16.090
fair semicolon i plus plus there's
59

59

00:02:16.090  -->  00:02:18.010
our loop open a code block
60

60

00:02:18.010  -->  00:02:19.540
curly brace the right ones added
61

61

00:02:19.540  -->  00:02:21.760
automatically, so now what we have to do
62

62

00:02:21.760  -->  00:02:24.220
is sum all numbers that are divisible by
63

63

00:02:24.220  -->  00:02:27.489
both 3 and divisible by 5 but then we
64

64

00:02:27.489  -->  00:02:28.959
also need to increment the count and
65

65

00:02:28.959  -->  00:02:31.329
print the number that we found so
66

66

00:02:31.329  -->  00:02:33.730
firstly let's start by checking if the
67

67

00:02:33.730  -->  00:02:35.500
number is divisible by 3 and 5 at the
68

68

00:02:35.500  -->  00:02:38.560
same time so we can do that by typing if
69

69

00:02:38.560  -->  00:02:41.890
I'm going to type 2 left parenthesis I'm
70

70

00:02:41.890  -->  00:02:43.299
going to put i will use the remainder
71

71

00:02:43.299  -->  00:02:46.450
operator so remainder operator 3 is
72

72

00:02:46.450  -->  00:02:49.450
equal to 0, 2 equal signs closing
73

73

00:02:49.450  -->  00:02:52.840
parentheses space in the end two two
74

74

00:02:52.840  -->  00:02:56.849
ampersands then left parenthesis I
75

75

00:02:56.849  -->  00:03:01.420
remainder operator 5 equals 0 and 2
76

76

00:03:01.420  -->  00:03:03.370
closing parenthesis right parenthesis
77

77

00:03:03.370  -->  00:03:05.950
another amazement a code block, so I'm
78

78

00:03:05.950  -->  00:03:07.840
using extra parentheses there for each
79

79

00:03:07.840  -->  00:03:10.329
condition so it's easy to read and to
80

80

00:03:10.329  -->  00:03:11.590
make sure we don't have any issues with
81

81

00:03:11.590  -->  00:03:13.989
operator precedence so the first
82

82

00:03:13.989  -->  00:03:17.920
condition I've got here it's checking if
83

83

00:03:17.920  -->  00:03:20.470
the number is divisible by 3 in other
84

84

00:03:20.470  -->  00:03:22.660
words if the number divided by 3 doesn't
85

85

00:03:22.660  -->  00:03:24.459
have any remainder then we've got the
86

86

00:03:24.459  -->  00:03:26.230
end operator and then we've got the
87

87

00:03:26.230  -->  00:03:27.669
second part of the test is doing the
88

88

00:03:27.669  -->  00:03:29.859
same but for the number 5 checking to
89

89

00:03:29.859  -->  00:03:32.109
see if this number divisible by 5 has a
90

90

00:03:32.109  -->  00:03:33.750
remainder of 0 and so it divides evenly
91

91

00:03:33.750  -->  00:03:36.040
and remember that the end operator here
92

92

00:03:36.040  -->  00:03:38.440
is only true when both of these
93

93

00:03:38.440  -->  00:03:41.290
conditions are true so both 3 & 5 have
94

94

00:03:41.290  -->  00:03:43.359
to be true before we get to execute the
95

95

00:03:43.359  -->  00:03:44.829
code in our code block which is going to
96

96

00:03:44.829  -->  00:03:47.500
be here so if we have found that to be
97

97

00:03:47.500  -->  00:03:49.060
true then we want to increase our count
98

98

00:03:49.060  -->  00:03:54.489
a count plus plus semicolon and then we
99

99

00:03:54.489  -->  00:03:56.769
want to sum what we found so far because
100

100

00:03:56.769  -->  00:03:58.150
ultimately we need to print that some
101

101

00:03:58.150  -->  00:04:02.530
out so it'll be sum plus equals i,
102

102

00:04:02.530  -->  00:04:05.349
adding i to that and then finally what
103

103

00:04:05.349  -->  00:04:07.239
we want to do is print out the number i
104

104

00:04:07.239  -->  00:04:10.930
so I'm going to type s out tab and we're
105

105

00:04:10.930  -->  00:04:16.680
going to put found number equals plus i
106

106

00:04:16.680  -->  00:04:18.639
so we're pretty at the value of i as
107

107

00:04:18.639  -->  00:04:21.699
well so again we're using count there so
108

108

00:04:21.699  -->  00:04:23.139
that when we get to five matches we can
109

109

00:04:23.139  -->  00:04:25.150
do a break and we're summing the value
110

110

00:04:25.150  -->  00:04:26.979
as we go through so that we can print it
111

111

00:04:26.979  -->  00:04:29.229
out once we've actually exited the for
112

112

00:04:29.229  -->  00:04:31.689
loop so the next thing to do then after
113

113

00:04:31.689  -->  00:04:34.299
this if statement is to do a test to see
114

114

00:04:34.299  -->  00:04:36.159
whether we've actually found five
115

115

00:04:36.159  -->  00:04:38.399
numbers we can do that with if
116

116

00:04:38.399  -->  00:04:42.009
parentheses count is equal to two equal
117

117

00:04:42.009  -->  00:04:45.729
signs five open a code block and then we
118

118

00:04:45.729  -->  00:04:48.219
just go into top break so if we found
119

119

00:04:48.219  -->  00:04:49.479
five matches we're going to break out of
120

120

00:04:49.479  -->  00:04:51.399
the for loop in Tolley and that would
121

121

00:04:51.399  -->  00:04:52.899
mean that the execution will come down
122

122

00:04:52.899  -->  00:04:55.479
to here outside of the fall of the next
123

123

00:04:55.479  -->  00:04:57.459
line and after the for loop at this
124

124

00:04:57.459  -->  00:04:59.349
point now the final step is to print out
125

125

00:04:59.349  -->  00:05:01.569
the sum so outside of the folded after
126

126

00:05:01.569  -->  00:05:03.819
that last I'll write curly brace you're
127

127

00:05:03.819  -->  00:05:05.349
just kind of print out the sum we can do
128

128

00:05:05.349  -->  00:05:09.999
that with some equals a couple quotes
129

129

00:05:09.999  -->  00:05:14.289
around that plus some so once the loop
130

130

00:05:14.289  -->  00:05:16.029
breaks or stops processing the code will
131

131

00:05:16.029  -->  00:05:17.919
jump after the closing basically the
132

132

00:05:17.919  -->  00:05:20.259
code will jump down to the outside of
133

133

00:05:20.259  -->  00:05:21.759
this right curly brace here and the next
134

134

00:05:21.759  -->  00:05:23.229
line of code which will be our loan have
135

135

00:05:23.229  -->  00:05:24.969
code here that's printing out the sum
136

136

00:05:24.969  -->  00:05:27.309
and that should be that, so let's
137

137

00:05:27.309  -->  00:05:28.779
actually run this to make sure it works
138

138

00:05:28.779  -->  00:05:31.449
I'm going to right click in here select
139

139

00:05:31.449  -->  00:05:35.229
run and I'm just going to move this down
140

140

00:05:35.229  -->  00:05:36.339
to the bottom so you can see it a bit
141

141

00:05:36.339  -->  00:05:39.699
better you can see they've got fair
142

142

00:05:39.699  -->  00:05:43.300
number equals 15 30 45 1675 and some
143

143

00:05:43.300  -->  00:05:46.029
equals two to five so that's it that's
144

144

00:05:46.029  -->  00:05:47.529
all the numbers said them all to or
145

145

00:05:47.529  -->  00:05:48.579
shouldn't say all the numbers the first
146

146

00:05:48.579  -->  00:05:50.919
five numbers that can be divided by both
147

147

00:05:50.919  -->  00:05:53.139
3 and divided by 5 without any remainder
148

148

00:05:53.139  -->  00:05:54.849
and then the sum of those five numbers
149

149

00:05:54.849  -->  00:05:57.879
that are outputted is 225 which is correct
150

150

00:05:57.879  -->  00:06:03.129
75 plus 60 135 plus 45 is 180 plus 30 is
151

151

00:06:03.129  -->  00:06:07.509
210 plus 15 is 225 so sum equals 225 is
152

152

00:06:07.509  -->  00:06:09.999
correct, so that's the challenge I'm
153

153

00:06:09.999  -->  00:06:11.559
going to end this video for now and just
154

154

00:06:11.559  -->  00:06:14.939
move on now to the next one.
