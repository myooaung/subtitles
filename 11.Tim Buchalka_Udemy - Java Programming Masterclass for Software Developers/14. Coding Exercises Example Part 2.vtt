WEBVTT
1
1

00:00:04.540  -->  00:00:08.170
<v Tim>Alright, so moving on with our Speed Converter code,</v>
2

2

00:00:08.170  -->  00:00:09.691
we now have finished the first method,
3

3

00:00:09.691  -->  00:00:11.840
it's time to move on with the second.
4

4

00:00:11.840  -->  00:00:14.860
Now if we go back and have a look at the text briefly,
5

5

00:00:14.860  -->  00:00:16.683
this is the text in the exercise,
6

6

00:00:18.880  -->  00:00:21.510
the second part talked about writing another method
7

7

00:00:21.510  -->  00:00:25.400
called printConversion with one parameter of type double
8

8

00:00:25.400  -->  00:00:28.723
and the parameters should have the name kilometersPerHour.
9

9

00:00:29.690  -->  00:00:31.540
So let's add that method to IntelliJ.
10

10

00:00:33.636  -->  00:00:35.420
So I'm gonna type public
11

11

00:00:36.650  -->  00:00:39.700
static void
12

12

00:00:39.700  -->  00:00:40.793
printConversion,
13

13

00:00:41.720  -->  00:00:43.180
parentheses double
14

14

00:00:44.518  -->  00:00:47.540
kilometersPerHour
15

15

00:00:47.540  -->  00:00:49.580
with our left and right curly braces
16

16

00:00:49.580  -->  00:00:51.550
to close off the method.
17

17

00:00:51.550  -->  00:00:54.921
Right, and going back quickly to read the sentence again,
18

18

00:00:54.921  -->  00:00:56.300
you can see there that it says
19

19

00:00:56.300  -->  00:00:58.028
this method shouldn't return anything,
20

20

00:00:58.028  -->  00:00:59.850
so in other words, it's of type void
21

21

00:00:59.850  -->  00:01:01.927
and it needs to calculate milesPerHour
22

22

00:01:01.927  -->  00:01:03.681
from the kilometersPerHour argument
23

23

00:01:03.681  -->  00:01:05.680
or parameter that's sent to it.
24

24

00:01:05.680  -->  00:01:06.780
Then it needs to print a message
25

25

00:01:06.780  -->  00:01:08.317
in the format you can see there, I won't read that out,
26

26

00:01:08.317  -->  00:01:10.700
but you can see that XX in the output
27

27

00:01:10.700  -->  00:01:13.860
represents the original value, kilometersPerHour
28

28

00:01:13.860  -->  00:01:15.300
and that's passed to this method
29

29

00:01:15.300  -->  00:01:18.550
and YY represents the rounded milesPerHour
30

30

00:01:18.550  -->  00:01:20.400
from the kilometersPerHour parameter,
31

31

00:01:20.400  -->  00:01:21.674
basically after calculating it
32

32

00:01:21.674  -->  00:01:24.730
and there's a test there for an invalid value,
33

33

00:01:24.730  -->  00:01:27.270
if the parameter passed the argument value,
34

34

00:01:27.270  -->  00:01:28.996
kilometersPerHour is less than zero,
35

35

00:01:28.996  -->  00:01:31.840
then we print out an error message, Invalid Value.
36

36

00:01:31.840  -->  00:01:34.840
Right, so we have to print some text into the console
37

37

00:01:34.840  -->  00:01:36.258
and the method shouldn't return anything.
38

38

00:01:36.258  -->  00:01:38.760
Our method is already void, you saw me type that,
39

39

00:01:38.760  -->  00:01:39.801
so we don't need to change anything,
40

40

00:01:39.801  -->  00:01:41.860
go back and have a look at that,
41

41

00:01:41.860  -->  00:01:45.010
you can see that on line 12, I've defined that as type void.
42

42

00:01:45.010  -->  00:01:46.730
Keep in mind that returning a value
43

43

00:01:46.730  -->  00:01:49.459
and printing text in the console is not the same,
44

44

00:01:49.459  -->  00:01:51.519
I wanna show you a difference between the two
45

45

00:01:51.519  -->  00:01:54.452
in a few moments, but first, let's finish the method.
46

46

00:01:54.452  -->  00:01:56.385
We're going to check for an invalid value,
47

47

00:01:56.385  -->  00:01:58.733
checking to see whether it's less than zero first,
48

48

00:01:58.733  -->  00:02:00.560
so I'm going to type on line 14,
49

49

00:02:00.560  -->  00:02:05.560
if parentheses kilometersPerHour, that's less than zero,
50

50

00:02:06.328  -->  00:02:07.926
left and right curly braces,
51

51

00:02:07.926  -->  00:02:10.693
we're going to print out using sout,
52

52

00:02:11.670  -->  00:02:15.033
so abbreviation in double quotes, Invalid Value,
53

53

00:02:17.200  -->  00:02:18.990
I can type like so,
54

54

00:02:18.990  -->  00:02:21.164
there we go, having some problems typing today.
55

55

00:02:21.164  -->  00:02:22.660
Alright, so we've done that,
56

56

00:02:22.660  -->  00:02:25.598
if the argument passed is less than zero,
57

57

00:02:25.598  -->  00:02:27.076
we know we've got an Invalid Value,
58

58

00:02:27.076  -->  00:02:29.860
so we're printing out a message to that effect.
59

59

00:02:29.860  -->  00:02:33.660
The next step then is to calculate the milesPerHour,
60

60

00:02:33.660  -->  00:02:35.190
but instead of actually duplicating
61

61

00:02:35.190  -->  00:02:37.270
the code we've got on line nine,
62

62

00:02:37.270  -->  00:02:39.814
we can call that method that we wrote,
63

63

00:02:39.814  -->  00:02:42.610
basically we can call the toMilesPerHour method
64

64

00:02:42.610  -->  00:02:44.560
and that would save duplication of code,
65

65

00:02:44.560  -->  00:02:46.594
so in this case I will use a variable,
66

66

00:02:46.594  -->  00:02:49.657
since we have to print the text in a specified format
67

67

00:02:49.657  -->  00:02:52.120
and obviously we didn't use a variable
68

68

00:02:52.120  -->  00:02:54.720
in the toMilesPerHour method.
69

69

00:02:54.720  -->  00:02:56.612
So to add that code, we're gonna put an else here now,
70

70

00:02:56.612  -->  00:03:00.780
so in other words if the kilometersPerHour is equal to zero
71

71

00:03:00.780  -->  00:03:02.963
or basically greater than or equal to zero,
72

72

00:03:04.748  -->  00:03:06.853
we'll add an else, left and right curly braces
73

73

00:03:06.853  -->  00:03:08.830
and then the code is going to be
74

74

00:03:08.830  -->  00:03:10.453
long milesPerHour
75

75

00:03:13.960  -->  00:03:14.793
is equal to
76

76

00:03:14.793  -->  00:03:16.310
and instead of typing in the method.round again,
77

77

00:03:16.310  -->  00:03:19.856
we're gonna type toMilesPerHour to call that method
78

78

00:03:19.856  -->  00:03:23.280
and we're gonna pass kilometersPerHour,
79

79

00:03:23.280  -->  00:03:24.522
which was passed to this method,
80

80

00:03:24.522  -->  00:03:27.131
we're gonna pass that value to that method.
81

81

00:03:27.131  -->  00:03:30.250
So what we're doing here effectively is we put equals,
82

82

00:03:30.250  -->  00:03:34.170
saving the returned value from that first method,
83

83

00:03:34.170  -->  00:03:37.081
this toMilesPerHour method on line three,
84

84

00:03:37.081  -->  00:03:38.870
putting the value from that
85

85

00:03:38.870  -->  00:03:42.181
into our variable milesPerHour on line 17.
86

86

00:03:42.181  -->  00:03:44.438
Now that I've done that, we can add the printout,
87

87

00:03:44.438  -->  00:03:46.321
the print line statement on the next line,
88

88

00:03:46.321  -->  00:03:47.792
let's go ahead and do that.
89

89

00:03:47.792  -->  00:03:50.568
So I'm gonna type System.out.println
90

90

00:03:50.568  -->  00:03:51.819
and in double quotes,
91

91

00:03:51.819  -->  00:03:53.033
well actually before the double quotes,
92

92

00:03:53.033  -->  00:03:56.819
I'm gonna start by specifying the kilometersPerHour plus
93

93

00:03:56.819  -->  00:03:59.320
what I'm going to do is to break this up
94

94

00:03:59.320  -->  00:04:01.171
into multiple lines, so that you can read it easier,
95

95

00:04:01.171  -->  00:04:02.660
now you could probably type this
96

96

00:04:02.660  -->  00:04:04.250
on one line on your monitor,
97

97

00:04:04.250  -->  00:04:06.230
but because I've got this zoomed up pretty high,
98

98

00:04:06.230  -->  00:04:07.820
so you can see it, we're gonna do it on multiple lines
99

99

00:04:07.820  -->  00:04:09.190
and I'll just move this over anyway,
100

100

00:04:09.190  -->  00:04:10.263
so we can see the code a bit more.
101

101

00:04:10.263  -->  00:04:12.184
So I'm gonna do kilometres plus
102

102

00:04:12.184  -->  00:04:14.895
and I've just pressed Enter there to go to the next line,
103

103

00:04:14.895  -->  00:04:18.718
I'm gonna type km/h equals,
104

104

00:04:18.718  -->  00:04:22.240
that's obviously an abbreviation for kilometres per hour,
105

105

00:04:22.240  -->  00:04:23.810
space after the equals, double quotes,
106

106

00:04:23.810  -->  00:04:26.866
plus our milesPerHour variable and plus again,
107

107

00:04:26.866  -->  00:04:28.690
I'm gonna go to the next line again
108

108

00:04:28.690  -->  00:04:33.663
and I'm going to add mi for miles, /h.
109

109

00:04:33.663  -->  00:04:34.810
Again, you could probably
110

110

00:04:34.810  -->  00:04:35.820
have typed that all on the one line,
111

111

00:04:35.820  -->  00:04:37.350
but I wanna make it easier for you to see,
112

112

00:04:37.350  -->  00:04:38.930
so I'm typing this.
113

113

00:04:38.930  -->  00:04:42.909
So at this point effectively that completes our exercise,
114

114

00:04:42.909  -->  00:04:44.270
you're probably wondering though,
115

115

00:04:44.270  -->  00:04:46.690
how do we test this now in IntelliJ?
116

116

00:04:46.690  -->  00:04:48.461
Well, first we need the main method,
117

117

00:04:48.461  -->  00:04:50.070
that's in the Main class,
118

118

00:04:50.070  -->  00:04:53.148
but remember the exercise text said the main method
119

119

00:04:53.148  -->  00:04:56.310
shouldn't be added to your solution code on Utemy,
120

120

00:04:56.310  -->  00:04:57.197
this isn't a coding exercise,
121

121

00:04:57.197  -->  00:04:59.930
the main method, as mentioned in previous videos
122

122

00:04:59.930  -->  00:05:02.460
is a method that will start your applications
123

123

00:05:02.460  -->  00:05:05.390
and basically you can test it within IntelliJ.
124

124

00:05:05.390  -->  00:05:08.670
So one way is to add it to your solution code,
125

125

00:05:08.670  -->  00:05:10.840
but then if you did that all in the same file,
126

126

00:05:10.840  -->  00:05:12.660
in your SpeedConverter file,
127

127

00:05:12.660  -->  00:05:15.143
when you paste your solution onto Udemy
128

128

00:05:15.143  -->  00:05:17.670
to our code exercise, you might get an error
129

129

00:05:17.670  -->  00:05:20.490
or forget to paste the closing curly braces and so on,
130

130

00:05:20.490  -->  00:05:23.360
so basically you're just opening up the opportunity
131

131

00:05:23.360  -->  00:05:26.059
of causing or making a mistake basically
132

132

00:05:26.059  -->  00:05:28.360
and this is one of the reasons why we created
133

133

00:05:28.360  -->  00:05:30.940
a Main class in the previous video,
134

134

00:05:30.940  -->  00:05:33.060
basically to be able to run and test our solution,
135

135

00:05:33.060  -->  00:05:35.293
but not otherwise interfere with the code
136

136

00:05:35.293  -->  00:05:38.840
that we've written in the SpeedConverter class.
137

137

00:05:38.840  -->  00:05:42.190
Now what actually a class is isn't important right now,
138

138

00:05:42.190  -->  00:05:44.370
just imagine it has the files, you wanna talk
139

139

00:05:44.370  -->  00:05:46.529
about the Main class or the SpeedConverter class,
140

140

00:05:46.529  -->  00:05:48.976
you can see that they basically equate to a file here,
141

141

00:05:48.976  -->  00:05:51.420
SpeedConverter.java and Main.java.
142

142

00:05:51.420  -->  00:05:53.921
We are gonna talk about classes later in the course,
143

143

00:05:53.921  -->  00:05:55.695
for now just think of them as seperate files,
144

144

00:05:55.695  -->  00:05:56.929
which effectively they are,
145

145

00:05:56.929  -->  00:05:59.243
so that we can get our testing up and going.
146

146

00:06:00.130  -->  00:06:02.616
So basically going back to our Main.java now
147

147

00:06:02.616  -->  00:06:04.660
and obviously that's pretty much empty now,
148

148

00:06:04.660  -->  00:06:07.202
other than that first definition that has been added for us,
149

149

00:06:07.202  -->  00:06:09.560
when we created the class,
150

150

00:06:09.560  -->  00:06:12.970
this is only going to contain the code to test our class
151

151

00:06:12.970  -->  00:06:14.428
and not the code to solve the solution
152

152

00:06:14.428  -->  00:06:16.690
and you'll see what I mean as we go through.
153

153

00:06:16.690  -->  00:06:18.880
The first thing we need to do then
154

154

00:06:18.880  -->  00:06:21.711
is on line three, I'm going to type psvm,
155

155

00:06:21.711  -->  00:06:23.941
which is an abbreviation in IntelliJ,
156

156

00:06:23.941  -->  00:06:26.460
press tab there, you can see it expands it out
157

157

00:06:26.460  -->  00:06:28.423
to the public static void main line,
158

158

00:06:29.370  -->  00:06:31.353
alternatively you can type that if you wanted to
159

159

00:06:31.353  -->  00:06:34.190
and that gives us a standard entry point
160

160

00:06:34.190  -->  00:06:36.872
for Java to be able to run our code.
161

161

00:06:36.872  -->  00:06:39.860
Right, so to call the methods from this other class,
162

162

00:06:39.860  -->  00:06:42.360
this SpeedConverter class, the other file,
163

163

00:06:42.360  -->  00:06:45.320
we need to specify the class name and then the method name,
164

164

00:06:45.320  -->  00:06:46.460
very similar to what we did
165

165

00:06:46.460  -->  00:06:50.490
for our math.round function in the previous video
166

166

00:06:50.490  -->  00:06:51.990
and in case you're wondering about this static,
167

167

00:06:51.990  -->  00:06:53.760
well that's not really important right now,
168

168

00:06:53.760  -->  00:06:56.380
we'll go into that in detail as we go through the course,
169

169

00:06:56.380  -->  00:06:58.390
it's important that you know how to use them though
170

170

00:06:58.390  -->  00:07:00.580
and later in the course, you'll learn more specifically
171

171

00:07:00.580  -->  00:07:02.190
about static methods and instance methods
172

172

00:07:02.190  -->  00:07:05.170
and their differences, so we will get to that.
173

173

00:07:05.170  -->  00:07:08.050
For now we're taking things one step at a time
174

174

00:07:08.050  -->  00:07:11.390
and we actually execute the code that we've created.
175

175

00:07:11.390  -->  00:07:14.568
Alright, so what we can do is type now on line five,
176

176

00:07:14.568  -->  00:07:17.820
SpeedConverter, notice how that's been found for us,
177

177

00:07:17.820  -->  00:07:19.220
if I type a period or a dot,
178

178

00:07:20.400  -->  00:07:21.940
whereas before math had found
179

179

00:07:21.940  -->  00:07:23.630
the math.round function for us,
180

180

00:07:23.630  -->  00:07:26.750
here now we've typed SpeedConverter and a period or a dot,
181

181

00:07:26.750  -->  00:07:30.550
it's giving us the available options or methods,
182

182

00:07:30.550  -->  00:07:32.402
that we can use in our code.
183

183

00:07:32.402  -->  00:07:34.338
So I'm gonna specify the toMilesPerHour one,
184

184

00:07:34.338  -->  00:07:36.030
because this is the one we want,
185

185

00:07:36.030  -->  00:07:38.218
I'm just pressing the up and down arrow keys to select data,
186

186

00:07:38.218  -->  00:07:40.470
I can press Enter there and you can see,
187

187

00:07:40.470  -->  00:07:41.847
it fills out the information for us.
188

188

00:07:41.847  -->  00:07:46.423
I'm gonna put a value in there to test, 10.5,
189

189

00:07:47.694  -->  00:07:49.490
alright and we'll close the line off.
190

190

00:07:49.490  -->  00:07:52.566
So basically the syntax you saw was exactly the same
191

191

00:07:52.566  -->  00:07:54.227
as when we called the round method,
192

192

00:07:54.227  -->  00:07:55.489
first we typed the name of the class
193

193

00:07:55.489  -->  00:07:57.290
and then the method name.
194

194

00:07:57.290  -->  00:07:58.745
Now the other thing I wanna draw your attention to,
195

195

00:07:58.745  -->  00:08:01.790
you've got this highlight again, if you hover over it,
196

196

00:08:01.790  -->  00:08:04.990
IntelliJ is telling us that the result of the method
197

197

00:08:04.990  -->  00:08:07.216
is ignored, so what does that actually mean?
198

198

00:08:07.216  -->  00:08:09.736
Well, let's just run this now and see what happens,
199

199

00:08:09.736  -->  00:08:12.106
so I'm just gonna right-click in here,
200

200

00:08:12.106  -->  00:08:14.693
I'm going to select Run Main.main,
201

201

00:08:15.603  -->  00:08:17.343
give it a moment to compile.
202

202

00:08:19.170  -->  00:08:20.660
Alright, so you can see down the bottom left-hand corner
203

203

00:08:20.660  -->  00:08:22.825
of the screen, nothing's printed to the console,
204

204

00:08:22.825  -->  00:08:26.140
we've got our line here, the first line up here
205

205

00:08:26.140  -->  00:08:28.690
is basically the code that's executed,
206

206

00:08:28.690  -->  00:08:31.153
when we run the programme, but that's got Process finished,
207

207

00:08:31.153  -->  00:08:34.225
so there's no output from the programme
208

208

00:08:34.225  -->  00:08:36.630
and you're probably wondering at this point, well, why not?
209

209

00:08:36.630  -->  00:08:37.480
After all, we've called
210

210

00:08:37.480  -->  00:08:39.650
the SpeedConverter.toMilesPerHour method,
211

211

00:08:39.650  -->  00:08:41.112
we know that that does the calculation,
212

212

00:08:41.112  -->  00:08:43.207
so why isn't it being outputted on the screen?
213

213

00:08:43.207  -->  00:08:45.490
Well the reason is we haven't told IntelliJ
214

214

00:08:45.490  -->  00:08:46.848
to print anything to the console,
215

215

00:08:46.848  -->  00:08:50.348
we've only told it to call that method to invoke the code.
216

216

00:08:50.348  -->  00:08:53.650
IntelliJ is pretty smart here and basically saying to us,
217

217

00:08:53.650  -->  00:08:55.040
okay, you've called this method,
218

218

00:08:55.040  -->  00:08:56.796
but you're not doing anything with the return value
219

219

00:08:56.796  -->  00:08:58.670
and it's just giving us a warning,
220

220

00:08:58.670  -->  00:09:00.260
not an error, just a warning to say,
221

221

00:09:00.260  -->  00:09:03.680
you know, is this really what you want this to be?
222

222

00:09:03.680  -->  00:09:06.060
So basically in our case, that's a hint, a heads up
223

223

00:09:06.060  -->  00:09:08.842
that we need to change something to get rid of that warning
224

224

00:09:08.842  -->  00:09:10.809
and to actually do something with the code.
225

225

00:09:10.809  -->  00:09:12.067
So what we're gonna do first
226

226

00:09:12.067  -->  00:09:14.128
is we're going to save the value,
227

227

00:09:14.128  -->  00:09:17.400
that's returned from the toMilesPerHour method
228

228

00:09:17.400  -->  00:09:18.493
into a variable, so at the start of that line,
229

229

00:09:18.493  -->  00:09:22.771
I'm gonna type double miles is equal to
230

230

00:09:22.771  -->  00:09:24.684
and notice that that warning has now disappeared
231

231

00:09:24.684  -->  00:09:26.835
and that's because we're now doing something with it,
232

232

00:09:26.835  -->  00:09:28.640
but we've now got another warning over here,
233

233

00:09:28.640  -->  00:09:30.938
that Variable miles is never used,
234

234

00:09:30.938  -->  00:09:33.013
so again, IntelliJ is being helpful there,
235

235

00:09:33.013  -->  00:09:35.160
but on the next line what we'll do is we'll output it,
236

236

00:09:35.160  -->  00:09:38.146
so I'm gonna type System.out.println again
237

237

00:09:38.146  -->  00:09:39.770
and I'm going to type in double quotes
238

238

00:09:39.770  -->  00:09:43.440
Miles equals plus
239

239

00:09:43.440  -->  00:09:46.510
and the variable, miles that we've defined on line five,
240

240

00:09:46.510  -->  00:09:48.200
that warning then goes away
241

241

00:09:48.200  -->  00:09:49.557
and we are at this point about to run it again
242

242

00:09:49.557  -->  00:09:51.907
and we should see the values, so let's run this
243

243

00:09:53.142  -->  00:09:55.400
and you can see, we've got the answer there,
244

244

00:09:55.400  -->  00:09:59.030
seven basically Miles equals 7.0.
245

245

00:09:59.030  -->  00:10:00.180
So that's the main difference
246

246

00:10:00.180  -->  00:10:02.030
between returning and printing,
247

247

00:10:02.030  -->  00:10:05.670
if we return the value, we can use it for some calculation,
248

248

00:10:05.670  -->  00:10:06.610
in order to print it out,
249

249

00:10:06.610  -->  00:10:08.740
we have to specifically select the option to print out,
250

250

00:10:08.740  -->  00:10:11.040
which I did on line six.
251

251

00:10:11.040  -->  00:10:12.854
So with that in mind, let's call the other method,
252

252

00:10:12.854  -->  00:10:15.198
remember the method, printConversion is void
253

253

00:10:15.198  -->  00:10:17.060
and doesn't return anything,
254

254

00:10:17.060  -->  00:10:19.791
but it self-prints text to the console,
255

255

00:10:19.791  -->  00:10:23.941
whereas the toMilesPerHour method was only calculating,
256

256

00:10:23.941  -->  00:10:25.223
we've actually got some output on that.
257

257

00:10:25.223  -->  00:10:26.924
So what we can do on the next line
258

258

00:10:26.924  -->  00:10:31.499
is we can type SpeedConverter.printConversion
259

259

00:10:31.499  -->  00:10:36.490
and then parentheses 10.5 again, semi-colon
260

260

00:10:36.490  -->  00:10:37.740
and we can run that again
261

261

00:10:40.257  -->  00:10:43.340
and you can see there we've got 10.5 kilometres per hour
262

262

00:10:43.340  -->  00:10:44.711
equals seven miles per hour
263

263

00:10:44.711  -->  00:10:46.884
and obviously I haven't put spaces there,
264

264

00:10:46.884  -->  00:10:48.574
I should probably fix that up,
265

265

00:10:48.574  -->  00:10:49.860
so let's have a look at fixing it up
266

266

00:10:49.860  -->  00:10:52.110
and we'll go back to the SpeedConverter class
267

267

00:10:53.157  -->  00:10:56.860
and I'll add a space at the start of kilometres per hour,
268

268

00:10:56.860  -->  00:10:58.687
a space ahead of miles per hour.
269

269

00:10:58.687  -->  00:11:01.337
The other thing I wanna draw your attention to though
270

270

00:11:04.050  -->  00:11:06.640
is I really made a mistake here, going back to this code,
271

271

00:11:06.640  -->  00:11:08.330
I called it a double, but if we go back
272

272

00:11:08.330  -->  00:11:11.260
and have a look at our toMilesPerHour again,
273

273

00:11:11.260  -->  00:11:14.400
of course what I did there was I defined it as a long,
274

274

00:11:14.400  -->  00:11:16.290
so I really should have changed that to a long,
275

275

00:11:16.290  -->  00:11:18.820
but noticing that the output down here,
276

276

00:11:18.820  -->  00:11:22.463
we've got 7.0, which is correct, because it's a double,
277

277

00:11:23.646  -->  00:11:25.658
but the Java was actually smart enough to convert it over,
278

278

00:11:25.658  -->  00:11:27.360
but we really want that to be a long,
279

279

00:11:27.360  -->  00:11:30.903
so that when we run it, we get what we should have got,
280

280

00:11:30.903  -->  00:11:32.880
which is Miles equals seven
281

281

00:11:32.880  -->  00:11:36.023
and 10.5 kilometres per hour equals seven miles per hour.
282

282

00:11:36.023  -->  00:11:38.850
Alright, so let's fix those things up.
283

283

00:11:38.850  -->  00:11:41.050
So what we'll do is we'll end the video here.
284

284

00:11:41.050  -->  00:11:42.503
In the next video, we'll go through quickly
285

285

00:11:42.503  -->  00:11:45.100
and we'll test that this is all working
286

286

00:11:45.100  -->  00:11:46.280
within the Udemy framework,
287

287

00:11:46.280  -->  00:11:48.200
within the Udemy coding exercise
288

288

00:11:48.200  -->  00:11:50.360
and we should then be complete.
289

289

00:11:50.360  -->  00:11:52.363
So I'll see you in the next video.
