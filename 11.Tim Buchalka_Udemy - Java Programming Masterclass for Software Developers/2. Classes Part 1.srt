1
1

00:00:05,510  -->  00:00:09,570
In this video, we're gonna start talking
about object-orientated programming, and
2

2

00:00:09,570  -->  00:00:13,160
in particular, about classes which
is a fundamental component of
3

3

00:00:13,160  -->  00:00:18,140
object-orientated programming in Java, and
actually, other languages for that matter.
4

4

00:00:18,140  -->  00:00:21,320
So firstly,
we need to understand what objects are.
5

5

00:00:21,320  -->  00:00:25,070
They really are the key to understanding
this object-orientated terminology and
6

6

00:00:25,070  -->  00:00:26,460
technology, as such.
7

7

00:00:26,460  -->  00:00:29,150
So what I'd like you to do is just
have a look around in the room or
8

8

00:00:29,150  -->  00:00:31,140
the area that you
are sitting at right now.
9

9

00:00:32,160  -->  00:00:32,960
And if you do that,
10

10

00:00:32,960  -->  00:00:35,740
you'll find that there's many
examples of real world objects.
11

11

00:00:35,740  -->  00:00:38,200
For example, I'm sitting here and
I can see a computer.
12

12

00:00:38,200  -->  00:00:39,620
I can see a keyboard.
13

13

00:00:39,620  -->  00:00:41,180
I can see a microphone.
14

14

00:00:41,180  -->  00:00:43,000
I can see shelves on the wall.
15

15

00:00:43,000  -->  00:00:44,320
I can see a door.
16

16

00:00:44,320  -->  00:00:46,240
All of these are examples
of real world objects.
17

17

00:00:46,240  -->  00:00:48,660
I'm sure if you look
around wherever you are,
18

18

00:00:48,660  -->  00:00:51,280
you can see a number of those as well.
19

19

00:00:51,280  -->  00:00:57,390
Now, real world objects have two major
characteristics, the state and behavior.
20

20

00:00:57,390  -->  00:01:00,940
So state, in terms of a computer,
might be the amount of RAM it has,
21

21

00:01:00,940  -->  00:01:05,540
the operating system it's running, the
hard drive size, the size of the monitor.
22

22

00:01:05,540  -->  00:01:06,580
Those types of things.
23

23

00:01:06,580  -->  00:01:08,580
An ant for
that matter has got status as well.
24

24

00:01:08,580  -->  00:01:12,540
For an ant the state might be the age,
the number of legs,
25

25

00:01:12,540  -->  00:01:16,960
the conscious state,
whether the ant is sleeping or is awake.
26

26

00:01:16,960  -->  00:01:20,470
But looking at behavior, behavior for
a computer might be booting up,
27

27

00:01:20,470  -->  00:01:24,690
shutting down, not beeping or outputting
some form of sound, printing something,
28

28

00:01:24,690  -->  00:01:26,940
drawing something on the screen,
and so on.
29

29

00:01:26,940  -->  00:01:29,480
All of those are behaviors for a computer.
30

30

00:01:29,480  -->  00:01:32,980
For an ant, behavior might be eating,
drinking, fighting,
31

31

00:01:32,980  -->  00:01:35,730
carrying food, those types of things.
32

32

00:01:35,730  -->  00:01:40,130
Now, software objects are a fundamental
part of object-oriented programming.
33

33

00:01:40,130  -->  00:01:44,210
They've very similar to real world objects
because they also consist of state and
34

34

00:01:44,210  -->  00:01:44,880
behaviors.
35

35

00:01:46,050  -->  00:01:51,340
Now, a software object stores its state in
fields, and we know fields as variables.
36

36

00:01:51,340  -->  00:01:54,880
And they expose their behavior with
methods, which we've talked about before.
37

37

00:01:54,880  -->  00:01:58,560
So that's what an object is in
object-orientated programming terms.
38

38

00:01:58,560  -->  00:02:00,800
So, where does a class fit in?
39

39

00:02:00,800  -->  00:02:05,740
Well, think of a class as a template or
a blueprint for creating objects.
40

40

00:02:05,740  -->  00:02:08,780
So as it turns out,
you've been using classes all along.
41

41

00:02:08,780  -->  00:02:11,310
And I'm sure that you've
seen the keywords public and
42

42

00:02:11,310  -->  00:02:13,300
class in the code we've completed today.
43

43

00:02:13,300  -->  00:02:17,800
And you can actually see it on
the screen right now public class Main.
44

44

00:02:17,800  -->  00:02:18,970
So, what that is,
45

45

00:02:18,970  -->  00:02:22,960
that's actually a statement which
creates a new class in Java.
46

46

00:02:22,960  -->  00:02:27,000
So a question that might come up at this
point is why do we need to bother about
47

47

00:02:27,000  -->  00:02:27,600
classes?
48

48

00:02:27,600  -->  00:02:32,430
Or what benefit do classes give
us in our everyday programming?
49

49

00:02:32,430  -->  00:02:36,270
Well, think back to the basic data types
that we've worked on, the primitive data
50

50

00:02:36,270  -->  00:02:41,420
types that we've explored so far int,
short and those types of things.
51

51

00:02:41,420  -->  00:02:42,840
They're all basic data types.
52

52

00:02:42,840  -->  00:02:44,800
They are fairly limiting.
53

53

00:02:44,800  -->  00:02:46,800
There's only so much you can do with them.
54

54

00:02:46,800  -->  00:02:50,760
So, a case could be made here where
class could be thought of as a powerful
55

55

00:02:50,760  -->  00:02:53,760
user-defined data type,
sort of an extra data type.
56

56

00:02:53,760  -->  00:02:58,340
That's not really correct in the true
meaning, but it gives you an idea of what
57

57

00:02:58,340  -->  00:03:03,210
classes really enable you to have a pretty
powerful user-defined type, where you
58

58

00:03:03,210  -->  00:03:08,140
can create something way more powerful
than a regular primitive-type like you've
59

59

00:03:08,140  -->  00:03:13,490
been dealing with in the past, a regular
data type on steroids, if you will.
60

60

00:03:13,490  -->  00:03:17,570
So, to take this a little bit further,
let's create our first real class.
61

61

00:03:17,570  -->  00:03:22,180
As you can see on the screen, every time
we create a new project, it actually
62

62

00:03:22,180  -->  00:03:26,660
creates a new class for us, and
it calls the class Main, the capital M.
63

63

00:03:26,660  -->  00:03:29,940
It also create that method,
the lower case m for the.
64

64

00:03:29,940  -->  00:03:34,230
That's created automatically by
when we create a new project, but
65

65

00:03:34,230  -->  00:03:38,080
let's actually go ahead and
create a brand-new class ourselves.
66

66

00:03:38,080  -->  00:03:41,050
So to do that, we need to make
sure the project area is open.
67

67

00:03:42,430  -->  00:03:46,650
We click on here to open that up, click
on down where it's got SRC for source.
68

68

00:03:46,650  -->  00:03:49,520
We wanna select where it's
got our package nine.
69

69

00:03:49,520  -->  00:03:52,160
Click on that, right-click.
70

70

00:03:52,160  -->  00:03:54,510
Select New, select Java Class.
71

71

00:03:55,570  -->  00:03:58,510
And we're going to create
a class with the name of Car.
72

72

00:03:58,510  -->  00:04:03,290
C-A-R making sure the first letter
is capitalized, as is recommended.
73

73

00:04:03,290  -->  00:04:05,340
When you're creating classes in Java,
74

74

00:04:05,340  -->  00:04:08,490
the first letter should
be an upper case letter.
75

75

00:04:08,490  -->  00:04:11,840
But I will be talking more about naming
conventions for class and variables,
76

76

00:04:11,840  -->  00:04:15,360
actually, in a later video in this course.
77

77

00:04:15,360  -->  00:04:17,220
So, first thing what I want
you to notice is the package.
78

78

00:04:17,220  -->  00:04:19,520
You've seen that before, the top.
79

79

00:04:19,520  -->  00:04:23,490
But also check out this line,
this public class car.
80

80

00:04:23,490  -->  00:04:29,560
So, that's actually the statement to
create a new class with the name Car.
81

81

00:04:29,560  -->  00:04:33,040
Now incidentally, if you wanna see
what's happening behind the scenes,
82

82

00:04:33,040  -->  00:04:35,600
you can come over here and
you can right-click, Car.
83

83

00:04:35,600  -->  00:04:38,340
And on my Mac,
I can click on Reveal In Finder.
84

84

00:04:38,340  -->  00:04:39,750
If you're on a Windows machine,
85

85

00:04:39,750  -->  00:04:41,980
I think the equivalent
command is Show In Explorer.
86

86

00:04:41,980  -->  00:04:47,970
When you click on it and do that what
it does, it shows you the directory.
87

87

00:04:47,970  -->  00:04:51,860
It also shows you the files
that are in that directory.
88

88

00:04:51,860  -->  00:04:56,490
And as you can see here, Intelliger has
automatically created a file called
89

89

00:04:56,490  -->  00:04:59,620
car.java, and
it's in the folder Tim Buchalka.
90

90

00:04:59,620  -->  00:05:01,090
If I actually open that out,
91

91

00:05:01,090  -->  00:05:05,600
the top there you can see classes is
the name of the project that I assigned.
92

92

00:05:05,600  -->  00:05:09,170
Then there's an SRC folder which is for
Source, and looking on the left-hand
93

93

00:05:09,170  -->  00:05:14,530
side you can see the project view, you
can see that showing you the SRC as well.
94

94

00:05:14,530  -->  00:05:16,950
Then, it's created another
folder called com.
95

95

00:05:16,950  -->  00:05:19,810
Then another subfolder of
com called timbuchalka.
96

96

00:05:19,810  -->  00:05:21,830
And that's how packages work in Java.
97

97

00:05:21,830  -->  00:05:23,770
So, you can see we've got a folder.
98

98

00:05:23,770  -->  00:05:25,230
Whatever you type with a dot,
99

99

00:05:25,230  -->  00:05:29,380
that's a sub-folder of that name is
automatically created by IntelliJ.
100

100

00:05:29,380  -->  00:05:34,500
So what's happened here is that IntelliJ
has created this file, called it java.
101

101

00:05:34,500  -->  00:05:36,780
And that is a Java Source Code file.
102

102

00:05:36,780  -->  00:05:38,470
And every time you create a new class,
103

103

00:05:38,470  -->  00:05:40,560
this is what's happening
behind the scenes.
104

104

00:05:40,560  -->  00:05:43,780
It's creating that class
in a particular folder.
105

105

00:05:43,780  -->  00:05:46,700
Now, we can open that up and
have a look at it.
106

106

00:05:46,700  -->  00:05:50,580
If I go into the Mac text editor,
107

107

00:05:50,580  -->  00:05:53,480
we can see it mirrors exactly
what we've got in IntelliJ.
108

108

00:05:54,690  -->  00:05:57,850
So it's always a good idea to know what's
happening behind the scenes when something
109

109

00:05:57,850  -->  00:05:59,820
is created in IntelliJ.
110

110

00:05:59,820  -->  00:06:02,250
Invariably, when we're
dealing with a file,
111

111

00:06:02,250  -->  00:06:04,820
it's creating a file in
that particular folder.
112

112

00:06:04,820  -->  00:06:05,760
All right, so moving on.
113

113

00:06:06,790  -->  00:06:11,830
So public and class, as well as package
for that matter, are all Java key words.
114

114

00:06:11,830  -->  00:06:16,340
Now, the public keyword is an access
modifier that we use here to
115

115

00:06:16,340  -->  00:06:21,180
determine what access we want to allow
others to have to this new class
116

116

00:06:21,180  -->  00:06:23,700
that we're creating.
117

117

00:06:23,700  -->  00:06:27,590
So the word public means
unrestricted access to the class.
118

118

00:06:27,590  -->  00:06:31,340
Now usually, at least initially anyway,
you're gonna be using public for
119

119

00:06:31,340  -->  00:06:32,870
pretty well all your classes.
120

120

00:06:32,870  -->  00:06:36,070
But other access modifiers we
could use include private, and
121

121

00:06:36,070  -->  00:06:38,790
that's where no other class
can access that class.
122

122

00:06:38,790  -->  00:06:42,950
Protected, which allows classes in
this package to access your class,
123

123

00:06:42,950  -->  00:06:46,990
and you can also remove the access
modifier completely if you prefer.
124

124

00:06:46,990  -->  00:06:51,630
But we'll be talking more about what these
access modifiers are in future videos.
125

125

00:06:51,630  -->  00:06:56,040
For now, generally speaking,
just go with the word public knowing that,
126

126

00:06:56,040  -->  00:07:00,310
that needs that other classes that we
create have got access to this class
127

127

00:07:00,310  -->  00:07:02,530
without being restricted.
128

128

00:07:02,530  -->  00:07:03,910
So that's our class defined.
129

129

00:07:03,910  -->  00:07:07,690
But at the moment, it's not very useful
because it doesn't actually do anything,
130

130

00:07:07,690  -->  00:07:09,310
literally we've created a shell.
131

131

00:07:09,310  -->  00:07:12,330
It's like creating a new blueprint,
so remembering
132

132

00:07:12,330  -->  00:07:16,370
that a class is a blueprint for
an object that we're gonna be creating.
133

133

00:07:16,370  -->  00:07:20,440
And in this case, it's like virtually
starting out on a brand new blueprint, and
134

134

00:07:20,440  -->  00:07:22,050
we haven't done anything yet.
135

135

00:07:22,050  -->  00:07:27,530
We've just literally, if we were creating
a blue print for houses, this is page one.
136

136

00:07:27,530  -->  00:07:29,550
We've called the blueprint the name Car,
and
137

137

00:07:29,550  -->  00:07:31,590
we haven't done anything
else at this stage.
138

138

00:07:31,590  -->  00:07:37,600
So what we need to do is create some
variables that are part of this class.
139

139

00:07:37,600  -->  00:07:41,210
Now to date, you've seen
variables used inside a method.
140

140

00:07:41,210  -->  00:07:43,850
And they were called local variables,
because they are local to or
141

141

00:07:43,850  -->  00:07:45,590
actually belong to that method.
142

142

00:07:45,590  -->  00:07:49,370
And you can not access those local
variables outside of that method.
143

143

00:07:49,370  -->  00:07:53,730
And you saw that also with code blocks
that we created in past videos.
144

144

00:07:53,730  -->  00:07:58,730
Once you access that, you can not access
those variables outside of that block.
145

145

00:07:58,730  -->  00:08:02,140
Now, classes allow us to create
variables that can be seen and
146

146

00:08:02,140  -->  00:08:06,050
are accessible from anywhere within
the class that we're creating.
147

147

00:08:06,050  -->  00:08:09,990
Now, these are known as class or
member variables, but
148

148

00:08:09,990  -->  00:08:12,770
most commonly refer to them as fields.
149

149

00:08:12,770  -->  00:08:15,690
Now, when you're creating a field for
a class,
150

150

00:08:15,690  -->  00:08:19,750
you need to also specify an excess
modifier that works the same way as
151

151

00:08:19,750  -->  00:08:22,690
the excess modifier for
a class definition did.
152

152

00:08:22,690  -->  00:08:27,080
Now as a general rule, when you're
defining fields in Java in a class, you go
153

153

00:08:27,080  -->  00:08:31,910
with the access modifier private, unlike
the class where we've gone with public.
154

154

00:08:31,910  -->  00:08:35,090
So what private means when
talking about fields is, well,
155

155

00:08:35,090  -->  00:08:38,790
what we're really doing with it is
we're adhering to encapsulation
156

156

00:08:38,790  -->  00:08:42,580
which is a key fundamental rule
of object-orientated programming.
157

157

00:08:42,580  -->  00:08:46,440
So encapsulation in Java is used
to hide the fields and methods,
158

158

00:08:46,440  -->  00:08:49,290
which we'll see later,
from access publicly.
159

159

00:08:49,290  -->  00:08:53,860
So, it really means that the internal
representation of an object is
160

160

00:08:53,860  -->  00:08:57,600
gonna be hidden from view
outside the object's definition.
161

161

00:08:57,600  -->  00:09:02,290
So in other words, the internal workings
of a particular object, and again,
162

162

00:09:02,290  -->  00:09:06,220
an object is going to be created
from our template from our class.
163

163

00:09:06,220  -->  00:09:10,830
So what we're doing is we're only
allowing the internals to be
164

164

00:09:10,830  -->  00:09:14,310
accessed by this class or by this object.
165

165

00:09:14,310  -->  00:09:16,990
We're not allowing outside access to that.
166

166

00:09:16,990  -->  00:09:19,530
Now, this will make more sense
as the video progresses.
167

167

00:09:19,530  -->  00:09:23,870
So, what we're gonna do first is we're
gonna create some fields for our class.
168

168

00:09:23,870  -->  00:09:25,170
So let's get started and do that.
169

169

00:09:25,170  -->  00:09:30,090
So, what we need to do is type,
just going into the curly braces,
170

170

00:09:30,090  -->  00:09:32,380
within the car class.
171

171

00:09:32,380  -->  00:09:35,480
So we need to type private int doors.
172

172

00:09:35,480  -->  00:09:37,220
So notice how I've typed the word private.
173

173

00:09:37,220  -->  00:09:40,940
In the past when we've created variables,
we haven't needed to do that we've
174

174

00:09:40,940  -->  00:09:43,620
actually typed the data top and
the name of the variable.
175

175

00:09:43,620  -->  00:09:46,440
In this case,
we also need to add that access modifier.
176

176

00:09:46,440  -->  00:09:49,520
So generally,
you'll always go with private, and
177

177

00:09:49,520  -->  00:09:51,640
I'll explain more as we go through.
178

178

00:09:51,640  -->  00:09:55,660
So these variables are actually
the state component for a Car.
179

179

00:09:55,660  -->  00:09:57,360
So these are characteristics
of a Car if you will.
180

180

00:09:57,360  -->  00:10:00,300
So we're gonna have doors,
how many doors it's got.
181

181

00:10:00,300  -->  00:10:02,780
And, let's go with say
the number of wheels.
182

182

00:10:02,780  -->  00:10:03,760
We'll int as well.
183

183

00:10:05,270  -->  00:10:07,890
And let's go with the model.
184

184

00:10:07,890  -->  00:10:09,710
And we're gonna go with a string there, so
185

185

00:10:09,710  -->  00:10:11,910
we can just top freeform
ticks of what the model is.
186

186

00:10:11,910  -->  00:10:14,700
And let's say, we do the same with engine.
187

187

00:10:14,700  -->  00:10:20,200
Engine, and let's finish off with color.
188

188

00:10:20,200  -->  00:10:24,560
So what we're trying to create here is
a template of the variables that would be
189

189

00:10:24,560  -->  00:10:26,580
part and parcel of a Car.
190

190

00:10:26,580  -->  00:10:29,800
Obviously, if we're creating a real
application, there'd be a lot ore fields.
191

191

00:10:29,800  -->  00:10:33,500
There could literally be hundreds of
different fields that we could add
192

192

00:10:33,500  -->  00:10:34,480
for a Car.
193

193

00:10:34,480  -->  00:10:36,380
We're just keeping it
simplistic to start with.
194

194

00:10:36,380  -->  00:10:39,980
So this is the state component when
we talked about state and behavior.
195

195

00:10:39,980  -->  00:10:44,250
So this is the state of the Car, if you
will, which we're defining as fields.
196

196

00:10:44,250  -->  00:10:48,340
So what we've done there is we
created a very basic class and
197

197

00:10:48,340  -->  00:10:50,410
we've defined five fields.
198

198

00:10:50,410  -->  00:10:55,610
So the next thing we need to do is we
need to create an object from this class,
199

199

00:10:55,610  -->  00:10:59,190
cuz if you recall,
the class is just the template.
200

200

00:10:59,190  -->  00:11:02,580
But we need to create an object which
will sort of take that blueprint,
201

201

00:11:02,580  -->  00:11:05,100
that definition that we've
defined in the class and
202

202

00:11:05,100  -->  00:11:07,130
create an object that we can start using.
203

203

00:11:07,130  -->  00:11:10,700
So, to do that, what we need to do is you
have to go back to the main class, and,
204

204

00:11:10,700  -->  00:11:14,560
of course, the main, and of course, the
main class was created automatically by in
205

205

00:11:14,560  -->  00:11:16,550
IntelliJ when we created the new project.
206

206

00:11:16,550  -->  00:11:19,370
Gonna double click into
that over here on the left.
207

207

00:11:19,370  -->  00:11:23,280
And what we can do in here is we
can actually build an object and
208

208

00:11:23,280  -->  00:11:24,590
base it on that Car.
209

209

00:11:24,590  -->  00:11:27,830
So what we now need to do
is create that object.
210

210

00:11:27,830  -->  00:11:29,480
So, how do we do that?
211

211

00:11:29,480  -->  00:11:31,940
Well, what we do is, well,
I'll delete this code for starters.
212

212

00:11:34,000  -->  00:11:37,980
We're in a method now, so
we're gonna type a local variable,
213

213

00:11:37,980  -->  00:11:42,500
that's local to the main method as
you can see in here, and we type Car.
214

214

00:11:42,500  -->  00:11:48,180
And notice when I type car, it's come
up with com.timbuchalka [INAUDIBLE].
215

215

00:11:48,180  -->  00:11:50,350
But this Car has been defined over here.
216

216

00:11:50,350  -->  00:11:52,590
So as far its driver is concerned,
there is now a data top.
217

217

00:11:52,590  -->  00:11:56,830
It's actually class, but
we can treat it as a data type.
218

218

00:11:56,830  -->  00:11:58,130
So we can type Car.
219

219

00:11:59,870  -->  00:12:04,210
Let's start, we had our first object, and
let's create a car that I've always loved,
220

220

00:12:04,210  -->  00:12:05,020
which is a Porsche.
221

221

00:12:07,450  -->  00:12:09,270
Porsche, so this is the keyword.
222

222

00:12:09,270  -->  00:12:15,290
This is how we define an object of Car,
we call it Porsche.
223

223

00:12:15,290  -->  00:12:20,240
Now the other thing you need to do
is when you're creating a new class,
224

224

00:12:20,240  -->  00:12:22,190
you need to initialize it.
225

225

00:12:22,190  -->  00:12:26,390
So to do that,
instead of just leaving it like that,
226

226

00:12:26,390  -->  00:12:29,450
we need to talk equals, view and Car.
227

227

00:12:29,450  -->  00:12:30,770
And I'll press Enter there.
228

228

00:12:30,770  -->  00:12:34,690
Now notice that the two brackets will
automatically added by IntelliJ and
229

229

00:12:34,690  -->  00:12:35,970
put a semicolon there.
230

230

00:12:35,970  -->  00:12:40,310
So, what we've done there is we've created
a new data type called Porsche which is
231

231

00:12:40,310  -->  00:12:41,260
a type of car.
232

232

00:12:41,260  -->  00:12:46,400
So in other words, we've created an object
called Porsche based on the template, Car.
233

233

00:12:47,430  -->  00:12:49,870
So that's one individual
object that we can work on.
234

234

00:12:49,870  -->  00:12:53,710
We can also create another one,
we can do, Car, Holden.
235

235

00:12:53,710  -->  00:12:57,430
Holden is an Australian brand car, so
we can do the same, equals new car.
236

236

00:12:57,430  -->  00:13:02,490
So we've now got two separate objects
that we've created from the template,
237

237

00:13:02,490  -->  00:13:04,650
from the main class called Car.
238

238

00:13:04,650  -->  00:13:06,710
Now the thing is,
we can't do much with those as yet.
239

239

00:13:06,710  -->  00:13:12,150
So for example, how do we go about
accessing the state variables?
240

240

00:13:12,150  -->  00:13:13,430
They're the fields, in other words.
241

241

00:13:13,430  -->  00:13:17,850
Now just by that definition, what's
happened behind the scenes is the object
242

242

00:13:17,850  -->  00:13:22,690
has been created, but there's also extra
functionality that Java has added to these
243

243

00:13:22,690  -->  00:13:26,040
class, to these objects automatically.
244

244

00:13:26,040  -->  00:13:30,120
And to see that in action,
we can type Porsche, Porsche.
245

245

00:13:30,120  -->  00:13:35,880
If you type dot, now these, all these
things here are actually variables or
246

246

00:13:35,880  -->  00:13:40,860
method, that are accessible from
the class, from this object.
247

247

00:13:40,860  -->  00:13:45,380
Now you might be thinking,
what is equals hash code to string, etc.
248

248

00:13:45,380  -->  00:13:50,610
These are added automatically by Java
whenever we create a new object.
249

249

00:13:50,610  -->  00:13:53,860
So you could say that they're
inherited from the Java functionality
250

250

00:13:53,860  -->  00:13:55,050
when we created the Car.
251

251

00:13:55,050  -->  00:13:56,590
So, to be correct,
252

252

00:13:56,590  -->  00:14:02,490
what's happened is the Car class has
inherited these from a base Java class.
253

253

00:14:02,490  -->  00:14:05,650
But we'll talk about some class
in those top of the things later.
254

254

00:14:05,650  -->  00:14:08,670
It's probably not the time to do that
now cuz we're starting with the basics.
255

255

00:14:08,670  -->  00:14:13,350
The bottom line here is Java has added
all this code to the functionality
256

256

00:14:13,350  -->  00:14:14,530
automatically.
257

257

00:14:14,530  -->  00:14:16,600
And you're also free to add extra things,
258

258

00:14:16,600  -->  00:14:19,490
which we'll be doing shortly
as we move forward, anyway.
259

259

00:14:19,490  -->  00:14:22,590
My point is at the moment though,
if you look at the list of things that
260

260

00:14:22,590  -->  00:14:25,650
are available, you can see that
these equals class, and so forth.
261

261

00:14:25,650  -->  00:14:29,800
Let's just scroll down and have a look
the different keywords and so forth, but
262

262

00:14:29,800  -->  00:14:33,230
we don't see anywhere a model,
number of wheels, and so forth.
263

263

00:14:33,230  -->  00:14:34,110
It's not showing up there.
264

264

00:14:34,110  -->  00:14:35,950
So, how do we access those?
265

265

00:14:35,950  -->  00:14:42,690
If you go back and check out the Car class
again, remember we defined these private.
266

266

00:14:42,690  -->  00:14:47,190
And what private means
is don't allow a class
267

267

00:14:47,190  -->  00:14:51,600
outside of the Car class
to access these variables.
268

268

00:14:51,600  -->  00:14:55,550
If you wanted those to be accessible
outside of the Car Java class,
269

269

00:14:55,550  -->  00:14:59,090
we could do that by changing this
access modifier to say public.
270

270

00:15:00,520  -->  00:15:02,700
So I'll just change the one,
I'll just change the model.
271

271

00:15:02,700  -->  00:15:04,940
If you go back and check this out now.
272

272

00:15:04,940  -->  00:15:07,200
And now if we go back and
put a dot in there,
273

273

00:15:07,200  -->  00:15:11,400
you can suddenly see that the first
thing that appears now is model.
274

274

00:15:11,400  -->  00:15:13,360
So suddenly, model has actually appeared.
275

275

00:15:13,360  -->  00:15:18,960
At that point,
we could type porsche.model = The Carrera,
276

276

00:15:18,960  -->  00:15:21,560
I hope I spelled that right.
277

277

00:15:21,560  -->  00:15:26,870
So what we have defined is for our object
Porsche, we're told that the model,
278

278

00:15:26,870  -->  00:15:31,630
make and model is the field which is
the state that you like for the car,
279

279

00:15:31,630  -->  00:15:33,660
porsche.model = Carrera.
280

280

00:15:33,660  -->  00:15:35,410
So we define the type.
281

281

00:15:35,410  -->  00:15:38,510
So that's one way accessing the data,
but it's not actually a good one.
282

282

00:15:38,510  -->  00:15:42,750
Because it really more or less finalized
the rules of encapsulation, or
283

283

00:15:42,750  -->  00:15:47,200
what we should be doing is making sure
that to know that that functionality is
284

284

00:15:47,200  -->  00:15:49,930
restricted and
placed in the code Java class.
285

285

00:15:49,930  -->  00:15:50,790
What do I mean by that?
286

286

00:15:50,790  -->  00:15:52,410
Well, let's go back and
I'll just show you what I mean.
287

287

00:15:52,410  -->  00:15:54,390
So, we'll go back to Car Java.
288

288

00:15:54,390  -->  00:15:57,230
We'll change that back to private again.
289

289

00:15:59,360  -->  00:16:01,820
What we'll do is we'll
create a method now.
290

290

00:16:01,820  -->  00:16:03,560
So, we're going to create a method.
291

291

00:16:03,560  -->  00:16:05,990
And when you're in a class,
when you create a method,
292

292

00:16:05,990  -->  00:16:11,610
that is then attached to all the objects
that you create for that particular class.
293

293

00:16:11,610  -->  00:16:15,440
Now in the past, the only methods that
we've created are static classes, and
294

294

00:16:15,440  -->  00:16:17,790
static classes aren't
really the same thing.
295

295

00:16:17,790  -->  00:16:19,760
But we'll be talking
more about those later.
296

296

00:16:20,770  -->  00:16:23,410
For now, let's create a public method.
297

297

00:16:23,410  -->  00:16:26,000
This video is going to be a bit long,
so I'm going to pause here, and
298

298

00:16:26,000  -->  00:16:29,730
we'll come back in part two and
continue with our discussion of classes.
