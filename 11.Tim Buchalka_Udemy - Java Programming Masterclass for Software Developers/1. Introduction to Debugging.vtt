WEBVTT
1
1

00:00:05.010  -->  00:00:07.470
so really would be wonderful if all
2

2

00:00:07.470  -->  00:00:10.880
the code we write was bug-free but the
3

3

00:00:10.880  -->  00:00:13.230
stark reality of it is that's not the
4

4

00:00:13.230  -->  00:00:17.040
case when application crashes or behaves
5

5

00:00:17.040  -->  00:00:19.430
in a way we didn't expect we have to
6

6

00:00:19.430  -->  00:00:21.600
figure out where the bug occurs in the
7

7

00:00:21.600  -->  00:00:23.100
application code
8

8

00:00:23.100  -->  00:00:25.260
fortunately we can use a really powerful
9

9

00:00:25.260  -->  00:00:29.160
tool to help us called a debugger now
10

10

00:00:29.160  -->  00:00:31.170
using a debugger we can see what's
11

11

00:00:31.170  -->  00:00:33.900
happening as the application runs and we
12

12

00:00:33.900  -->  00:00:35.870
can stop execution at a specific line
13

13

00:00:35.870  -->  00:00:38.210
of code and examine the state of the
14

14

00:00:38.210  -->  00:00:40.620
application we can change the values of
15

15

00:00:40.620  -->  00:00:43.190
variables on the fly and set watch
16

16

00:00:43.190  -->  00:00:45.920
points to help us understand where we've
17

17

00:00:45.920  -->  00:00:48.420
gone wrong so in this video we're going
18

18

00:00:48.420  -->  00:00:50.600
to learn how to use intellij's IDE
19

19

00:00:50.600  -->  00:00:53.060
debugger just a few caveats before
20

20

00:00:53.060  -->  00:00:55.010
we begin if you want to see what's
21

21

00:00:55.010  -->  00:00:57.120
happening inside a class or method then
22

22

00:00:57.120  -->  00:00:58.700
we have to have the source code for that
23

23

00:00:58.700  -->  00:01:01.700
class or method now when we are debugging
24

24

00:01:01.700  -->  00:01:03.650
our own application code of course that's
25

25

00:01:03.650  -->  00:01:06.050
not a problem but we want to see what's
26

26

00:01:06.050  -->  00:01:07.680
happening inside a class that belongs
27

27

00:01:07.680  -->  00:01:10.050
to third-party library and we haven't
28

28

00:01:10.050  -->  00:01:12.210
got access to the source code and that's
29

29

00:01:12.210  -->  00:01:14.370
gonna make it a lot harder so in those
30

30

00:01:14.370  -->  00:01:16.290
cases the best that will be able to do
31

31

00:01:16.290  -->  00:01:18.930
is examine what values were passed into
32

32

00:01:18.930  -->  00:01:21.420
a method and what value is returned from
33

33

00:01:21.420  -->  00:01:24.690
a method so related to that to use the
34

34

00:01:24.690  -->  00:01:27.360
debugger with a class the compiled class
35

35

00:01:27.360  -->  00:01:30.990
files must contain debug information and
36

36

00:01:30.990  -->  00:01:32.160
again when it comes to our application
37

37

00:01:32.160  -->  00:01:34.830
that's not a problem but third-party
38

38

00:01:34.830  -->  00:01:37.320
class files don't usually contain debug
39

39

00:01:37.320  -->  00:01:39.780
information but with that said some
40

40

00:01:39.780  -->  00:01:41.730
libraries do offer two versions one
41

41

00:01:41.730  -->  00:01:43.890
without debug information and one with
42

42

00:01:43.890  -->  00:01:45.840
debug information which of course would
43

43

00:01:45.840  -->  00:01:48.150
be using the debug version during
44

44

00:01:48.150  -->  00:01:51.150
development now we're using the debugger
45

45

00:01:51.150  -->  00:01:53.940
our applications will runs slower than it
46

46

00:01:53.940  -->  00:01:55.770
usually does because of the extra
47

47

00:01:55.770  -->  00:01:57.990
processing that has to take place back\
48

48

00:01:57.990  -->  00:02:00.030
in the debugger and because of that
49

49

00:02:00.030  -->  00:02:01.620
using a debugger to track down a
50

50

00:02:01.620  -->  00:02:03.650
threading issue for example can
51

51

00:02:03.650  -->  00:02:06.180
sometimes be challenging the debugger
52

52

00:02:06.180  -->  00:02:08.790
can mask threading issues because the
53

53

00:02:08.790  -->  00:02:11.250
timing of the application isn't the same as
54

54

00:02:11.250  -->  00:02:12.560
running in debug mode
55

55

00:02:12.560  -->  00:02:15.510
ok so with those caveats out
56

56

00:02:15.510  -->  00:02:17.280
of the way let's actually go ahead now
57

57

00:02:17.280  -->  00:02:18.780
and see the IntelliJ
58

58

00:02:18.780  -->  00:02:21.180
debugger in action going to go ahead and
59

59

00:02:21.180  -->  00:02:24.030
create a new class and let's call this
60

60

00:02:24.030  -->  00:02:27.900
one a debugger demo do as we normally
61

61

00:02:27.900  -->  00:02:31.350
do when we create a new project so....
62

62

00:02:31.350  -->  00:04:40.630
....
63

63

00:04:40.630  -->  00:04:42.010
if you spotted the bug in the code good
64

64

00:04:42.010  -->  00:04:42.430
though
65

65

00:04:42.430  -->  00:04:45.070
but if not stay tuned so go back to our main
66

66

00:04:45.070  -->  00:04:46.150
method now
67

67

00:04:46.150  -->  00:04:48.160
so now you can hopefully understand that
68

68

00:04:48.160  -->  00:04:50.860
code that we just put it in their in
69

69

00:04:50.860  -->  00:04:52.900
main method so we first start creating
70

70

00:04:52.900  -->  00:04:55.930
an instance of the string utilities
71

71

00:04:55.930  -->  00:04:58.660
class and then now we also create an
72

72

00:04:58.660  -->  00:05:01.750
instance of the stringbuilder class then
73

73

00:05:01.750  -->  00:05:03.340
we are calling the string utilities . add
74

74

00:05:03.340  -->  00:05:06.220
char method to add a single letter an a
75

75

00:05:06.220  -->  00:05:08.910
a char to the stringbuilder until the
76

76

00:05:08.910  -->  00:05:10.530
length of the string builder reaches 10
77

77

00:05:10.530  -->  00:05:12.720
of course we could use the string
78

78

00:05:12.720  -->  00:05:15.070
builder . append method directly but
79

79

00:05:15.070  -->  00:05:16.150
that's what we're doing in the add
80

80

00:05:16.150  -->  00:05:18.850
char method the method also counts how many
81

81

00:05:18.850  -->  00:05:20.710
characters it's added to stringbuilder
82

82

00:05:20.710  -->  00:05:24.010
over the applications run
83

83

00:05:24.010  -->  00:05:25.410
so it all looks pretty straightforward so let's
84

84

00:05:25.410  -->  00:05:30.760
actually run the application now when we
85

85

00:05:30.760  -->  00:05:32.860
do run it you can see that it's now running
86

86

00:05:32.860  -->  00:05:36.280
it seems to be hanging still
87

87

00:05:36.280  -->  00:05:37.470
actually running over here we actually
88

88

00:05:37.470  -->  00:05:39.840
get this error and i'll just move this
89

89

00:05:39.840  -->  00:05:41.440
down so we can see it easier
90

90

00:05:41.440  -->  00:05:46.690
we've got an out of memory error so
91

91

00:05:46.690  -->  00:05:48.220
why has that actually happened
92

92

00:05:48.220  -->  00:05:50.620
well let's use the debugger to find out
93

93

00:05:50.620  -->  00:05:53.130
what's going on now running the debugger
94

94

00:05:53.130  -->  00:05:55.510
inside IntelliJ is actually
95

95

00:05:55.510  -->  00:05:58.380
very easy instead of actually running up
96

96

00:05:58.380  -->  00:06:00.630
here this regular a button
97

97

00:06:00.630  -->  00:06:02.470
that we click when we're running we
98

98

00:06:02.470  -->  00:06:04.990
click on this little debug icon
99

99

00:06:04.990  -->  00:06:07.330
looks a little bit like a green lady bug
100

100

00:06:07.330  -->  00:06:09.610
without the spots we can also where we
101

101

00:06:09.610  -->  00:06:12.370
would normally run we can click on debug
102

102

00:06:12.370  -->  00:06:15.030
instead debug main and we can also use
103

103

00:06:15.030  -->  00:06:16.410
these shortcuts as you can see over to
104

104

00:06:16.410  -->  00:06:18.880
the right of it so actually click on debug
105

105

00:06:18.880  -->  00:06:19.810
now and run
106

106

00:06:19.810  -->  00:06:24.190
you can see that it starts that looks a
107

107

00:06:24.190  -->  00:06:26.530
little bit different and then it crashes
108

108

00:06:26.530  -->  00:06:29.080
out so there's a couple of lines that
109

109

00:06:29.080  -->  00:06:30.860
you saw there about sockets being
110

110

00:06:30.860  -->  00:06:32.770
printed to the console but otherwise our
111

111

00:06:32.770  -->  00:06:34.120
application will run as it did before
112

112

00:06:34.120  -->  00:06:37.610
and when debugging socket is opened
113

113

00:06:37.610  -->  00:06:40.210
because the debugger attaches to the
114

114

00:06:40.210  -->  00:06:42.460
application and communicates with the
115

115

00:06:42.460  -->  00:06:45.670
application using that socket so if we
116

116

00:06:45.670  -->  00:06:47.270
want to see what's happening inside our
117

117

00:06:47.270  -->  00:06:49.390
application we need the application to
118

118

00:06:49.390  -->  00:06:52.330
stop running or suspend at some point so
119

119

00:06:52.330  -->  00:06:54.740
that we can examine that state then we
120

120

00:06:54.740  -->  00:06:56.180
tell the debugger where we want the
121

121

00:06:56.180  -->  00:06:58.120
application to suspend by setting
122

122

00:06:58.120  -->  00:07:01.490
what's called a breakpoint so the first
123

123

00:07:01.490  -->  00:07:03.160
step is to decide where we want to set
124

124

00:07:03.160  -->  00:07:05.590
the breakpoint we can set more than one
125

125

00:07:05.590  -->  00:07:08.020
let's just start off with a single one
126

126

00:07:08.020  -->  00:07:09.700
they're taking a look at the code in
127

127

00:07:09.700  -->  00:07:11.890
the main method here we suspect that
128

128

00:07:11.890  -->  00:07:13.780
there will be a problem with this call to
129

129

00:07:13.780  -->  00:07:17.080
the add char method from the string utilities
130

130

00:07:17.080  -->  00:07:19.210
class so that's where we want to set a
131

131

00:07:19.210  -->  00:07:21.340
breakpoint because we want to see what
132

132

00:07:21.340  -->  00:07:23.140
happens when that add char method is
133

133

00:07:23.140  -->  00:07:26.300
executing so that being the case lets go and
134

134

00:07:26.300  -->  00:07:28.660
open our string utilities class we're
135

135

00:07:28.660  -->  00:07:30.940
going to put a breakpoint in this add
136

136

00:07:30.940  -->  00:07:32.650
char method in the string utilities
137

137

00:07:32.650  -->  00:07:35.740
class going to place our the place the
138

138

00:07:35.740  -->  00:07:37.780
cursor on the first line of the add char
139

139

00:07:37.780  -->  00:07:39.820
method which here in my cases on line
140

140

00:07:39.820  -->  00:07:43.660
11 we're going to set a breakpoint there
141

141

00:07:43.660  -->  00:07:45.370
are several ways that we can set a
142

142

00:07:45.370  -->  00:07:47.740
breakpoint you come over here we can
143

143

00:07:47.740  -->  00:07:51.580
click on in here this left gutter here i
144

144

00:07:51.580  -->  00:07:52.720
can click on there and I can click it
145

145

00:07:52.720  -->  00:07:55.510
and it will toggle on off also go to the
146

146

00:07:55.510  -->  00:07:58.630
run window and click on toggle on break
147

147

00:07:58.630  -->  00:08:01.150
point there's also a shortcut here that
148

148

00:08:01.150  -->  00:08:04.270
we can also use to do the same thing you
149

149

00:08:04.270  -->  00:08:07.000
can see that on a mac the command for me is
150

150

00:08:07.000  -->  00:08:10.490
command f8 to set the line a
151

151

00:08:10.490  -->  00:08:12.610
breakpoint on windows machine would be
152

152

00:08:12.610  -->  00:08:15.220
control f8 so I can do command f8
153

153

00:08:15.220  -->  00:08:17.620
on a Mac we can turn the
154

154

00:08:17.620  -->  00:08:21.340
breakpoint on or off again you can see
155

155

00:08:21.340  -->  00:08:23.110
that this little red circle appears no
156

156

00:08:23.110  -->  00:08:25.550
matter which method we use which is our
157

157

00:08:25.550  -->  00:08:27.460
indication that the breakpoints been set
158

158

00:08:27.460  -->  00:08:30.160
and again we can toggle that as I showed you by
159

159

00:08:30.160  -->  00:08:31.630
clicking on the same option that you
160

160

00:08:31.630  -->  00:08:32.520
selected
161

161

00:08:32.520  -->  00:08:36.000
to turn the break point on again just
162

162

00:08:36.000  -->  00:08:37.140
remember that the cursor always
163

163

00:08:37.140  -->  00:08:39.360
has to be on the line of code though where we
164

164

00:08:39.360  -->  00:08:41.280
want to set or remove the breakpoint
165

165

00:08:41.280  -->  00:08:44.100
alright set a celebrate point now on this
166

166

00:08:44.100  -->  00:08:46.380
first line this line 11 which is the
167

167

00:08:46.380  -->  00:08:49.080
first line of the add char method so now
168

168

00:08:49.080  -->  00:08:50.850
we're going to run the debugger again this
169

169

00:08:50.850  -->  00:08:52.320
time come over here and click on the
170

170

00:08:52.320  -->  00:08:56.220
little ladybug or debug icon this time
171

171

00:08:56.220  -->  00:08:57.270
notice we've got a different behavior
172

172

00:08:57.270  -->  00:08:59.400
than what actually happened last time it
173

173

00:08:59.400  -->  00:09:01.260
seems to pause the application at a
174

174

00:09:01.260  -->  00:09:04.560
certain place so basically by setting a
175

175

00:09:04.560  -->  00:09:06.510
break point when the java runtime
176

176

00:09:06.510  -->  00:09:09.030
reaches that line of code where we set
177

177

00:09:09.030  -->  00:09:11.040
the breakpoint the application will
178

178

00:09:11.040  -->  00:09:14.130
suspend now the Intellij editor as
179

179

00:09:14.130  -->  00:09:15.540
you can see is highlighting the line of
180

180

00:09:15.540  -->  00:09:18.720
code where the application is currently
181

181

00:09:18.720  -->  00:09:21.600
suspended you can see highlighted
182

182

00:09:21.600  -->  00:09:24.000
in my case in blue and remember that we
183

183

00:09:24.000  -->  00:09:25.530
can have more than one break point which
184

184

00:09:25.530  -->  00:09:27.900
is why that's really handy and also down
185

185

00:09:27.900  -->  00:09:30.300
the bottom here we've noticed that you
186

186

00:09:30.300  -->  00:09:32.760
can notice a debugger tab is opened in
187

187

00:09:32.760  -->  00:09:34.530
the same area as the console normally is
188

188

00:09:34.530  -->  00:09:36.450
this is assuming you're using the
189

189

00:09:36.450  -->  00:09:37.770
default configuration ui
190

190

00:09:37.770  -->  00:09:40.350
configuration let's actually come up
191

191

00:09:40.350  -->  00:09:41.940
here and start with what's in the editor
192

192

00:09:41.940  -->  00:09:44.850
so when applications suspends at a
193

193

00:09:44.850  -->  00:09:47.160
breakpoint keep in mind that the line of
194

194

00:09:47.160  -->  00:09:50.130
code has not been executed yet in this
195

195

00:09:50.130  -->  00:09:51.750
case we entered the method the add
196

196

00:09:51.750  -->  00:09:55.110
char method but with pause before the
197

197

00:09:55.110  -->  00:09:57.930
string the this . s builder appened line
198

198

00:09:57.930  -->  00:10:00.720
method has been called this is actually
199

199

00:10:00.720  -->  00:10:01.890
quite an important point to remember
200

200

00:10:01.890  -->  00:10:04.470
breakpoints cause the application to
201

201

00:10:04.470  -->  00:10:06.570
suspend before the line of code has been
202

202

00:10:06.570  -->  00:10:09.090
executed but it isn't always the case
203

203

00:10:09.090  -->  00:10:11.430
that when the application suspends the
204

204

00:10:11.430  -->  00:10:13.290
highlighted line of code hasn't been executed
205

205

00:10:13.290  -->  00:10:14.940
yet it will actually depend on the
206

206

00:10:14.940  -->  00:10:18.090
context for break points though it has
207

207

00:10:18.090  -->  00:10:20.610
not been executed as we mentioned and
208

208

00:10:20.610  -->  00:10:22.140
we'll see an example of when it has been
209

209

00:10:22.140  -->  00:10:24.540
executed a little bit later but notice
210

210

00:10:24.540  -->  00:10:27.240
now that the red circle contains what
211

211

00:10:27.240  -->  00:10:29.580
looks maybe like a little check mark so its
212

212

00:10:29.580  -->  00:10:31.290
changed from what was just a red circle
213

213

00:10:31.290  -->  00:10:33.840
without anything in the middle to a
214

214

00:10:33.840  -->  00:10:35.370
little like check or a tick or something
215

215

00:10:35.370  -->  00:10:37.560
along those lines and that's actually
216

216

00:10:37.560  -->  00:10:40.290
indicating that the debugger is live and
217

217

00:10:40.290  -->  00:10:41.790
over here to the right of the actual
218

218

00:10:41.790  -->  00:10:43.980
line that its processing see in my case
219

219

00:10:43.980  -->  00:10:46.200
in yellow we can see what it says
220

220

00:10:46.200  -->  00:10:49.140
s builder Colon and 2 double quotes then
221

221

00:10:49.140  -->  00:10:52.500
we've got to c colon than the a like
222

222

00:10:52.500  -->  00:10:55.200
an a char and then a number 97
223

223

00:10:55.200  -->  00:10:57.000
so what this is doing is telling us the
224

224

00:10:57.000  -->  00:10:59.370
current values of the parameters we
225

225

00:10:59.370  -->  00:11:01.860
passed to this method now the S builder
226

226

00:11:01.860  -->  00:11:04.500
variable is empty and the c
227

227

00:11:04.500  -->  00:11:07.800
variable contains the value a in double
228

228

00:11:07.800  -->  00:11:10.110
quotes and incidentally the ascii code
229

229

00:11:10.110  -->  00:11:13.500
for a is 97 so that's what that 97 for
230

230

00:11:13.500  -->  00:11:15.810
now these at the moment are the expected
231

231

00:11:15.810  -->  00:11:19.320
values that should be occurring
232

232

00:11:19.320  -->  00:11:20.580
when we made the call to that
233

233

00:11:20.580  -->  00:11:22.620
method and since this is the first
234

234

00:11:22.620  -->  00:11:24.480
iteration of the while loop in the main
235

235

00:11:24.480  -->  00:11:26.970
method the string builder is empty and
236

236

00:11:26.970  -->  00:11:28.560
again we pass a as the second parameter
237

237

00:11:28.560  -->  00:11:33.450
let's look down here in the debug tab
238

238

00:11:33.450  -->  00:11:35.340
there's two sections that you can see
239

239

00:11:35.340  -->  00:11:38.250
these frames over here and then there's
240

240

00:11:38.250  -->  00:11:41.400
also variables now the frame section
241

241

00:11:41.400  -->  00:11:42.960
over here to the left shows the
242

242

00:11:42.960  -->  00:11:45.960
execution stack trace so each time a
243

243

00:11:45.960  -->  00:11:48.420
method is called a frame is added to
244

244

00:11:48.420  -->  00:11:50.850
that stack trace now in this case there
245

245

00:11:50.850  -->  00:11:53.250
are two frames on the stack the first
246

246

00:11:53.250  -->  00:11:55.500
method call is at the bottom line here
247

247

00:11:55.500  -->  00:11:57.450
which is the main method which was
248

248

00:11:57.450  -->  00:11:59.880
called by the java runtime the main
249

249

00:11:59.880  -->  00:12:01.770
method called the add char method from
250

250

00:12:01.770  -->  00:12:04.080
our string utilities class and that's
251

251

00:12:04.080  -->  00:12:05.220
this next frame which is currently
252

252

00:12:05.220  -->  00:12:08.730
highlighted in blue that's also the top
253

253

00:12:08.730  -->  00:12:10.260
frame which means that it's the method
254

254

00:12:10.260  -->  00:12:13.320
that's currently executing now the
255

255

00:12:13.320  -->  00:12:15.450
drop-down here above these stack trace
256

256

00:12:15.450  -->  00:12:18.090
shows all the threads are executing and
257

257

00:12:18.090  -->  00:12:20.970
their states and to see that stack trace
258

258

00:12:20.970  -->  00:12:22.620
for another thread we just have to
259

259

00:12:22.620  -->  00:12:25.350
select from the drop-down this can be
260

260

00:12:25.350  -->  00:12:26.970
useful when you're trying to debug a
261

261

00:12:26.970  -->  00:12:29.460
multi-threaded application even more
262

262

00:12:29.460  -->  00:12:31.740
conveniently we can even a even have
263

263

00:12:31.740  -->  00:12:34.020
threads pane to the frame area by
264

264

00:12:34.020  -->  00:12:36.120
pressing the restore thread view button
265

265

00:12:36.120  -->  00:12:38.910
and that's located here to the right
266

266

00:12:38.910  -->  00:12:42.180
of the pane the bottom panes
267

267

00:12:42.180  -->  00:12:45.030
toolbar and click on this that gives us
268

268

00:12:45.030  -->  00:12:46.170
another little pane their
269

269

00:12:46.170  -->  00:12:48.720
threads which is again very useful when
270

270

00:12:48.720  -->  00:12:50.190
you're debugging threaded applications
271

271

00:12:50.190  -->  00:12:52.110
and you can just click on this little
272

272

00:12:52.110  -->  00:12:54.810
arrow here to close at any time you come
273

273

00:12:54.810  -->  00:12:56.430
back over and opened it any time you
274

274

00:12:56.430  -->  00:12:59.490
want to now in terms of this drop-down
275

275

00:12:59.490  -->  00:13:00.810
once we click that we can actually use
276

276

00:13:00.810  -->  00:13:04.500
the up and down arrows to move through
277

277

00:13:04.500  -->  00:13:06.990
the stack trace which is an interesting
278

278

00:13:06.990  -->  00:13:09.330
idea so move up and down here
279

279

00:13:09.330  -->  00:13:12.330
but then we can also here this in the
280

280

00:13:12.330  -->  00:13:13.890
actual stack trace we can also use our
281

281

00:13:13.890  -->  00:13:17.010
arrows to go up and down as well and you
282

282

00:13:17.010  -->  00:13:18.630
can see as i'm doing that the actual
283

283

00:13:18.630  -->  00:13:20.490
editor is changing to the context that's
284

284

00:13:20.490  -->  00:13:22.500
relevant for that particular method so
285

285

00:13:22.500  -->  00:13:24.270
the first case down the bottom there is
286

286

00:13:24.270  -->  00:13:26.390
our main method you can see a light blue
287

287

00:13:26.390  -->  00:13:29.270
highlight background
288

288

00:13:29.270  -->  00:13:32.310
color for line 9 telling us that was the
289

289

00:13:32.310  -->  00:13:34.500
line that was being called and if I move the
290

290

00:13:34.500  -->  00:13:36.720
down arrow the up arrow I should say
291

291

00:13:36.720  -->  00:13:39.360
we get to the add char method that's in
292

292

00:13:39.360  -->  00:13:41.190
a more striking blue
293

293

00:13:41.190  -->  00:13:42.810
background telling us that is the
294

294

00:13:42.810  -->  00:13:45.480
current currently executing line or the
295

295

00:13:45.480  -->  00:13:47.160
line that is to be executed when we
296

296

00:13:47.160  -->  00:13:50.640
continue and notice also here to the
297

297

00:13:50.640  -->  00:13:52.140
right that as i'm selecting those again I can
298

298

00:13:52.140  -->  00:13:54.390
use arrows or click the actual
299

299

00:13:54.390  -->  00:13:57.300
variables update to show the values of
300

300

00:13:57.300  -->  00:13:59.970
all the live variables available to that
301

301

00:13:59.970  -->  00:14:02.760
selected frame shows instance variables
302

302

00:14:02.760  -->  00:14:05.190
the method parameters and also any local
303

303

00:14:05.190  -->  00:14:07.140
variables that have been declared before
304

304

00:14:07.140  -->  00:14:09.990
the suspension point they can see there
305

305

00:14:09.990  -->  00:14:11.250
that we're getting different values
306

306

00:14:11.250  -->  00:14:13.620
there in this case with the
307

307

00:14:13.620  -->  00:14:16.020
main method or the mainframe it would
308

308

00:14:16.020  -->  00:14:18.020
be probably more correct to be calling
309

309

00:14:18.020  -->  00:14:20.570
it that you can see at this point we've
310

310

00:14:20.570  -->  00:14:23.130
got the variables that are relevant and
311

311

00:14:23.130  -->  00:14:26.450
available for the main method we click
312

312

00:14:26.450  -->  00:14:28.820
back again to the add char method you
313

313

00:14:28.820  -->  00:14:30.830
see that variables the chars added
314

314

00:14:30.830  -->  00:14:32.820
method knows about which includes the
315

315

00:14:32.820  -->  00:14:35.700
instance or fields instance variables
316

316

00:14:35.700  -->  00:14:37.260
or fields for the string utilities
317

317

00:14:37.260  -->  00:14:40.350
class so actually see those instance
318

318

00:14:40.350  -->  00:14:42.240
variables for a particular class if
319

319

00:14:42.240  -->  00:14:43.980
there are any we have to expand that
320

320

00:14:43.980  -->  00:14:47.640
this item open up and you can see
321

321

00:14:47.640  -->  00:14:49.680
that we've gotten a list of the
322

322

00:14:49.680  -->  00:14:51.480
instance variables for this particular
323

323

00:14:51.480  -->  00:14:54.360
class so you can see the s builder
324

324

00:14:54.360  -->  00:14:57.890
instance variable there now since
325

325

00:14:57.890  -->  00:14:59.100
it's an instance of the stringbuilder
326

326

00:14:59.100  -->  00:15:01.020
class we can actually expand that
327

327

00:15:01.020  -->  00:15:05.330
further by opening here and actually
328

328

00:15:05.330  -->  00:15:08.070
seeing the values so actually seeing
329

329

00:15:08.070  -->  00:15:09.930
now the instance variables that belonged
330

330

00:15:09.930  -->  00:15:12.300
to the stringbuilder itself and we can
331

331

00:15:12.300  -->  00:15:13.050
see here in this
332

332

00:15:13.050  -->  00:15:16.080
stringbuilder dot value variable is a
333

333

00:15:16.080  -->  00:15:19.260
char 16 or a right over here and all its
334

334

00:15:19.260  -->  00:15:20.910
elements are currently 0 you might
335

335

00:15:20.910  -->  00:15:23.250
expand that to out to see that you can see at the
336

336

00:15:23.250  -->  00:15:24.690
moment we've got nothing in there
337

337

00:15:24.690  -->  00:15:26.010
which is consistent with the fact that
338

338

00:15:26.010  -->  00:15:27.570
hasn't been used at this point in time
339

339

00:15:27.570  -->  00:15:30.930
and also i just put that back again the
340

340

00:15:30.930  -->  00:15:33.140
count variable again this is for the
341

341

00:15:33.140  -->  00:15:35.570
stringbuilder class itself is also set
342

342

00:15:35.570  -->  00:15:37.890
to 0 but again that's because we haven't
343

343

00:15:37.890  -->  00:15:40.980
add anything to it and that would make sense
344

344

00:15:40.980  -->  00:15:44.100
notice also that the chars added is
345

345

00:15:44.100  -->  00:15:46.860
shown under this but it's also shown on
346

346

00:15:46.860  -->  00:15:50.070
its own line further down so it's shown
347

347

00:15:50.070  -->  00:15:52.110
outside of this as a convenience because
348

348

00:15:52.110  -->  00:15:54.060
it's used in the method in which we
349

349

00:15:54.060  -->  00:15:56.220
currently suspended now if for instance
350

350

00:15:56.220  -->  00:15:58.070
variables were used within the method
351

351

00:15:58.070  -->  00:16:00.750
that also appear here as well we'll see
352

352

00:16:00.750  -->  00:16:02.970
later that we can also use watches to
353

353

00:16:02.970  -->  00:16:04.920
make seeing some values more convenient
354

354

00:16:04.920  -->  00:16:08.820
now below the this close it off for now
355

355

00:16:08.820  -->  00:16:11.910
we can also see the two parameters that
356

356

00:16:11.910  -->  00:16:14.270
were added to the add char method or part
357

357

00:16:14.270  -->  00:16:16.760
of the add char method now intellij marks
358

358

00:16:16.760  -->  00:16:18.630
parameters with a p as you can see here
359

359

00:16:18.630  -->  00:16:20.330
to indicate that they're actually
360

360

00:16:20.330  -->  00:16:21.240
parameters
to indicate that they're actually
361

361

00:16:21.240  -->  00:16:22.820
it's like an orange circle with a p in
362

362

00:16:22.820  -->  00:16:25.500
there now one of the principal one of
363

363

00:16:25.500  -->  00:16:27.180
the parameters has the same name as the
364

364

00:16:27.180  -->  00:16:29.670
instance variable and this point if we
365

365

00:16:29.670  -->  00:16:32.070
open that up you might actually get more
366

366

00:16:32.070  -->  00:16:33.450
of a clue into the bug if you haven't
367

367

00:16:33.450  -->  00:16:34.140
already
368

368

00:16:34.140  -->  00:16:35.450
let's just pretend that we haven't had
369

369

00:16:35.450  -->  00:16:36.890
our morning coffee or tea and that we're
370

370

00:16:36.890  -->  00:16:38.820
not cluing into anything just yet
371

371

00:16:38.820  -->  00:16:40.820
and just finally before finish this
372

372

00:16:40.820  -->  00:16:43.410
video is also after these parameters
373

373

00:16:43.410  -->  00:16:46.260
these two items marked with glasses now
374

374

00:16:46.260  -->  00:16:48.200
these are watches that intellij
375

375

00:16:48.200  -->  00:16:50.270
automatically sets but we'll get back to
376

376

00:16:50.270  -->  00:16:53.130
those later ignore those for now the
377

377

00:16:53.130  -->  00:16:55.200
point is that right now the variables
378

378

00:16:55.200  -->  00:16:58.380
all have the values that we expect now
379

379

00:16:58.380  -->  00:17:00.440
both the instant stringbuilder and the
380

380

00:17:00.440  -->  00:17:02.490
one we passed as a parameter have a
381

381

00:17:02.490  -->  00:17:04.680
length of 0 and the parameter check
382

382

00:17:04.680  -->  00:17:07.310
character is a if you haven't figured
383

383

00:17:07.310  -->  00:17:09.120
out the bug at this point we probably
384

384

00:17:09.120  -->  00:17:10.580
want to see what happens when we run the
385

385

00:17:10.580  -->  00:17:13.470
line of code that appends the character to
386

386

00:17:13.470  -->  00:17:15.780
the stringbuilder so we want to take a
387

387

00:17:15.780  -->  00:17:17.660
look at the values of the variables after
388

388

00:17:17.660  -->  00:17:19.910
the append has taken place so we want the
389

389

00:17:19.910  -->  00:17:21.830
application to suspend again after
390

390

00:17:21.830  -->  00:17:24.630
executing that one line that append now
391

391

00:17:24.630  -->  00:17:26.050
I guess we could set a breakpoint
392

392

00:17:26.050  -->  00:17:28.240
on that next line and that would work in
393

393

00:17:28.240  -->  00:17:30.130
this case but you can imagine that
394

394

00:17:30.130  -->  00:17:31.960
you're debugging a long method and
395

395

00:17:31.960  -->  00:17:33.670
wanted to suspend execution after every
396

396

00:17:33.670  -->  00:17:35.410
line in other words we want to step
397

397

00:17:35.410  -->  00:17:37.240
through the method having to set a
398

398

00:17:37.240  -->  00:17:39.130
breakpoint every line would quickly
399

399

00:17:39.130  -->  00:17:40.270
become tedious
400

400

00:17:40.270  -->  00:17:42.610
unfortunately the debugger providers
401

401

00:17:42.610  -->  00:17:45.340
ways or other ways to control the execution
402

402

00:17:45.340  -->  00:17:47.410
of our application and in the next video
403

403

00:17:47.410  -->  00:17:48.640
will start going through looking at
404

404

00:17:48.640  -->  00:17:50.560
these and actually figured out what some
405

405

00:17:50.560  -->  00:17:52.120
of these buttons up here are here in the
406

406

00:17:52.120  -->  00:17:55.060
debug pane and putting them to use so see
407

407

00:17:55.060  -->  00:18:00.870
you in the next video
