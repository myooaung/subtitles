WEBVTT
1
1

00:00:05.470  -->  00:00:07.790
So continuing on with
our packages discussion.
2

2

00:00:07.790  -->  00:00:11.810
Now you may have actually noticed, we
talked about this briefly, the fact that
3

3

00:00:11.810  -->  00:00:15.630
the way the AWT class has been imported
at the top of the window is like so.
4

4

00:00:15.630  -->  00:00:20.070
So the line import.java.awt, I mentioned
before, I'll tell you what that does.
5

5

00:00:20.070  -->  00:00:22.890
The star means to import all
the class interfaces and
6

6

00:00:22.890  -->  00:00:27.310
static objects from the java.awt class,
AWT class.
7

7

00:00:27.310  -->  00:00:31.440
So, you can do that, or we could have
actually done something similar, which is,
8

8

00:00:31.440  -->  00:00:34.630
we could have actually copied the relevant
points we wanted and done it manually.
9

9

00:00:34.630  -->  00:00:37.260
So, in other words, we could have
actually deleted that line there.
10

10

00:00:37.260  -->  00:00:40.630
We could have pasted in these references,
but
11

11

00:00:40.630  -->  00:00:43.630
notice when I do that,
we're gonna actually paste them in.
12

12

00:00:43.630  -->  00:00:46.890
IntelliJ is actually changing this and
making it a star anyway, but the point is,
13

13

00:00:46.890  -->  00:00:50.760
we could have actually specified and done
something similar to what we've done here.
14

14

00:00:50.760  -->  00:00:55.910
We could have done import java.awt.Frame,
15

15

00:00:55.910  -->  00:01:00.130
for example, which is one of the ones we
actually used, and done all manually.
16

16

00:01:00.130  -->  00:01:03.520
But by doing the star,
that's equivalent of actually saying,
17

17

00:01:03.520  -->  00:01:06.390
give me access to everything
that's in that particular class.
18

18

00:01:06.390  -->  00:01:08.050
Now, another thing you might be asking is,
well okay,
19

19

00:01:08.050  -->  00:01:11.870
we've done the star there,
why do we also need to do these?
20

20

00:01:11.870  -->  00:01:15.510
Cuz we actually remove these,
we should get rid of them, temporarily.
21

21

00:01:15.510  -->  00:01:18.520
We actually get IntelliJ coming
up actually saying, well,
22

22

00:01:18.520  -->  00:01:20.890
where have they gone, I need them.
23

23

00:01:20.890  -->  00:01:24.520
I paste them back and actually go,
at first glance you think that the import
24

24

00:01:24.520  -->  00:01:27.660
above would actually be doing everything,
but it's not actually the case.
25

25

00:01:27.660  -->  00:01:29.850
There's actually two
different packages here.
26

26

00:01:29.850  -->  00:01:33.020
There's java.awt and
there's java.awt.event.
27

27

00:01:33.020  -->  00:01:36.820
So java.awt.event is actually
a separate package to java.awt,
28

28

00:01:36.820  -->  00:01:40.260
and that's why the star,
the asterisk, the wild card for
29

29

00:01:40.260  -->  00:01:42.670
matching all,
doesn't actually bring these in here.
30

30

00:01:42.670  -->  00:01:45.360
And if we had a changed event and
change that to star.
31

31

00:01:46.810  -->  00:01:50.260
Like so, then that would have meaned that
we wouldn't need to use Window Event
32

32

00:01:50.260  -->  00:01:52.600
because Window Event would
automatically be found.
33

33

00:01:52.600  -->  00:01:53.810
But in that case, we don't wanna do that.
34

34

00:01:53.810  -->  00:01:57.940
It was easier, and the other thing was
IntelliJ automatically added those for
35

35

00:01:57.940  -->  00:01:59.330
us as we were actually adding them.
36

36

00:01:59.330  -->  00:02:01.270
Just to see what I'm talking
about a little bit further,
37

37

00:02:01.270  -->  00:02:06.430
we can actually hover over frame, this
part here, and I can hold down Control
38

38

00:02:06.430  -->  00:02:11.120
on my Mac, and I believe it's
actually the Control key for a PC,
39

39

00:02:11.120  -->  00:02:13.690
and you can see that Tooltip
actually briefly pops up.
40

40

00:02:13.690  -->  00:02:15.930
It's actually popping up
on the screen there now.
41

41

00:02:15.930  -->  00:02:17.180
And it describes a frame class,
42

42

00:02:17.180  -->  00:02:21.880
it actually says that it extends from
windows and implements menu container.
43

43

00:02:21.880  -->  00:02:25.540
The important thing is at the top it's
got the JDK, the Java version 1.8 and
44

44

00:02:25.540  -->  00:02:28.500
it actually shows you also
the package where that's come from.
45

45

00:02:28.500  -->  00:02:31.070
So we go down here to Windows Adapter.
46

46

00:02:31.070  -->  00:02:32.840
Notice how that says java.awt.Event,
47

47

00:02:32.840  -->  00:02:36.900
and that's the package that Window Adapter
comes from, and it's got the JDK again.
48

48

00:02:36.900  -->  00:02:39.960
And it's also got some details
about the class and in this case,
49

49

00:02:39.960  -->  00:02:43.860
the constructor and how to actually
call on and if there's any parameters.
50

50

00:02:43.860  -->  00:02:47.900
This is a good way, by doing that
pressing again CMD on the Mac, and
51

51

00:02:47.900  -->  00:02:50.550
I believe it's CTRL on the PC,
might be ALT.
52

52

00:02:50.550  -->  00:02:54.240
I always get confused, but it's one of
those on the Windows and Windows and
53

53

00:02:54.240  -->  00:02:57.990
Linux to actually do that, and you can
actually then hover over something and
54

54

00:02:57.990  -->  00:03:01.220
see some more information about
the package in the album information
55

55

00:03:01.220  -->  00:03:02.620
relating to a particular class.
56

56

00:03:02.620  -->  00:03:05.490
So the other thing you can actually do
is you come over here to where it's got
57

57

00:03:05.490  -->  00:03:06.470
external libraries.
58

58

00:03:06.470  -->  00:03:08.970
And I haven't shown you
that before either.
59

59

00:03:08.970  -->  00:03:12.670
You actually never get to the AWT
package and start expanding it out, so
60

60

00:03:12.670  -->  00:03:16.930
click on that and it shows all the various
packages that we can actually start
61

61

00:03:16.930  -->  00:03:18.530
sort of finding our way down there.
62

62

00:03:18.530  -->  00:03:22.070
You can also do this, you can also come
down here to AWT, you can click that,
63

63

00:03:22.070  -->  00:03:24.600
and those have actually
opened up automatically.
64

64

00:03:24.600  -->  00:03:27.380
You can do that for most things as well,
I actually find that for you.
65

65

00:03:27.380  -->  00:03:29.970
That's a really great shortcut
to enable you to just
66

66

00:03:29.970  -->  00:03:32.340
sort of find a particular
file that you're looking for.
67

67

00:03:32.340  -->  00:03:34.010
Cuz you might have been looking for
68

68

00:03:34.010  -->  00:03:39.320
in here rt.jar you may not have been able
to see the Java.awt package from there.
69

69

00:03:39.320  -->  00:03:41.930
So I just click on that, again,
it's Control, I believe, on a PC,
70

70

00:03:41.930  -->  00:03:44.170
in my case it's on a Mac.
71

71

00:03:44.170  -->  00:03:46.000
I can click on there and
I can go to any of these things.
72

72

00:03:46.000  -->  00:03:48.910
Well, I can't go to the source
code til you get class level.
73

73

00:03:48.910  -->  00:03:53.070
The clicking to get to this left-hand
side is only at package level.
74

74

00:03:53.070  -->  00:03:57.650
So I need to go back and type, click on
AWT for example to get to orders well.
75

75

00:03:57.650  -->  00:03:59.990
And again if it's close off event,
you can say we've got font in there.
76

76

00:03:59.990  -->  00:04:03.270
And we used the font within this before.
77

77

00:04:03.270  -->  00:04:05.460
Lots of information as Java.utool.
78

78

00:04:07.410  -->  00:04:10.360
So if we close down AWT, there's
actually other ones in here as well.
79

79

00:04:10.360  -->  00:04:12.290
There's the u tool,
we've actually used that before.
80

80

00:04:12.290  -->  00:04:13.400
There's some common things in there.
81

81

00:04:15.540  -->  00:04:17.930
Lots of different classes,
it can be a great way for
82

82

00:04:17.930  -->  00:04:20.490
you to actually just click on and
find out more information.
83

83

00:04:20.490  -->  00:04:21.000
Double click,
84

84

00:04:21.000  -->  00:04:24.440
it will actually bring up some more
information about the particular class.
85

85

00:04:24.440  -->  00:04:27.150
Again, just to clarify,
the java.awt.event, as you can see,
86

86

00:04:27.150  -->  00:04:29.860
when I actually click on event,
the left hand side,
87

87

00:04:29.860  -->  00:04:33.560
that's physically a different package
than when I actually click on java.awt.
88

88

00:04:33.560  -->  00:04:34.720
It's physically a different package.
89

89

00:04:34.720  -->  00:04:36.280
It's sort of like
a subpackage if you will,
90

90

00:04:36.280  -->  00:04:39.830
sub part of AWT, but they are different
and that's, again, one of the asterisk,
91

91

00:04:39.830  -->  00:04:42.000
the style the Metro didn't actually work.
92

92

00:04:42.000  -->  00:04:44.880
So when you're actually importing
classes from another package,
93

93

00:04:44.880  -->  00:04:47.380
you can actually choose to
import the entire package.
94

94

00:04:47.380  -->  00:04:50.900
And notice that IntelliJ did that
on line 3 with the Java.awt.star.
95

95

00:04:50.900  -->  00:04:52.620
Or of course,
as you saw in lines four and five,
96

96

00:04:52.620  -->  00:04:56.540
you can actually just specify the class
of interfaces that you actually need.
97

97

00:04:56.540  -->  00:04:58.570
So there's really no right or
wrong way about this.
98

98

00:04:58.570  -->  00:05:02.190
There's lots of heated debate
about all the pros and cons.
99

99

00:05:02.190  -->  00:05:03.810
One thing, though, you should be aware of,
100

100

00:05:03.810  -->  00:05:07.030
if you are actually using something like
line three, where you're putting a star.
101

101

00:05:07.030  -->  00:05:10.920
There's a possible impact if you've
got a new class of interfaces added to
102

102

00:05:10.920  -->  00:05:12.940
one of the packages you actually import.
103

103

00:05:12.940  -->  00:05:15.310
So if the other package
contains a class or
104

104

00:05:15.310  -->  00:05:19.230
an interface with the same name,
then your program's not going to compile.
105

105

00:05:19.230  -->  00:05:22.270
So you might think that's unlikely to
happen, but it does actually happen.
106

106

00:05:22.270  -->  00:05:24.380
One example was with the java.awt package.
107

107

00:05:24.380  -->  00:05:27.480
So there's actually several reasons I
actually chose to use this package for
108

108

00:05:27.480  -->  00:05:28.710
the example here and this is one of them.
109

109

00:05:28.710  -->  00:05:30.360
So in Java 1.1,
110

110

00:05:30.360  -->  00:05:35.810
which I know was a very long time ago, the
java.org.package contained a list class.
111

111

00:05:35.810  -->  00:05:40.650
This was often imported as java.awt.star
and of course Java.util.package
112

112

00:05:40.650  -->  00:05:44.750
is also imported as java.util.star,
and everything worked fine then.
113

113

00:05:44.750  -->  00:05:48.420
But in Java 1.2, son included
a list interface in java.util and
114

114

00:05:48.420  -->  00:05:50.720
of course we've used the list
interface quite a bit.
115

115

00:05:50.720  -->  00:05:53.860
So the programs importing these
two packages continue to run.
116

116

00:05:53.860  -->  00:05:57.110
But because Java actually compiles
the fully qualified class now
117

117

00:05:57.110  -->  00:05:58.090
In the compiled code.
118

118

00:05:58.090  -->  00:06:00.490
But the point here, and
this is the big point,
119

119

00:06:00.490  -->  00:06:03.820
when one of the programs needed to be
changed, it wouldn't compile anymore.
120

120

00:06:03.820  -->  00:06:08.310
And that's because the entire package has
been that point, the star in other words.
121

121

00:06:08.310  -->  00:06:12.630
So Java actually had no idea which of
the two packages the list I was actually
122

122

00:06:12.630  -->  00:06:13.540
referring to.
123

123

00:06:13.540  -->  00:06:17.710
Was at the list class in java.awt or
the new list interface in java.util?
124

124

00:06:17.710  -->  00:06:19.940
So, if it was a different program,
I'm making changes to the program,
125

125

00:06:19.940  -->  00:06:23.830
they'll probably be cursing the original
programmer for leaving code in there to
126

126

00:06:23.830  -->  00:06:26.930
leaving to compile, when in fact the code
had been fine when it had been left.
127

127

00:06:26.930  -->  00:06:30.240
So the problem arose because of
a change in a third party library.
128

128

00:06:30.240  -->  00:06:33.320
So explicitly importing the class,
the list class, in other words,
129

129

00:06:33.320  -->  00:06:36.620
not using the star, would have actually
avoided that problem altogether.
130

130

00:06:36.620  -->  00:06:41.060
Okay, so moving on, it's now time to
actually create one of our own packages.
131

131

00:06:41.060  -->  00:06:42.130
So we're going to do that now.
132

132

00:06:42.130  -->  00:06:48.010
We're going to another new project, and
we're gonna do another Java one again.
133

133

00:06:48.010  -->  00:06:51.400
Again create project from template,
Command Line App as we've done before.
134

134

00:06:51.400  -->  00:06:54.120
And we'll call this one PackageDemo.
135

135

00:06:55.790  -->  00:07:00.350
And the actual package name,
we're gonna do
136

136

00:07:00.350  -->  00:07:06.160
com.example.mypackage and
create that project.
137

137

00:07:06.160  -->  00:07:07.110
And open this window.
138

138

00:07:07.110  -->  00:07:10.460
We're gonna close down the other
window that we had open.
139

139

00:07:10.460  -->  00:07:14.790
And just a recap in case you're wondering
what com.example is, the 90 conventions
140

140

00:07:14.790  -->  00:07:19.030
with Java is a com.example and aug.example
are actually reserved and can be used for
141

141

00:07:19.030  -->  00:07:21.710
packages that you're never
going to distribute and
142

142

00:07:21.710  -->  00:07:24.150
this is very useful if you
have got your own domain.
143

143

00:07:24.150  -->  00:07:26.950
So you could substitute aug.example,
instead of com.example there.
144

144

00:07:26.950  -->  00:07:28.370
Or if you've got your own domain,
145

145

00:07:28.370  -->  00:07:31.490
as you've seen me use com.timbuchalka,
you can also use that as well.
146

146

00:07:31.490  -->  00:07:33.250
It doesn't really matter
in this particular test.
147

147

00:07:33.250  -->  00:07:36.570
This is more down the track when you're
actually packaging your own source code.
148

148

00:07:36.570  -->  00:07:38.600
What we're gonna do is open this up.
149

149

00:07:38.600  -->  00:07:41.400
Now what I'm gonna do here,
is I'm gonna actually delete the package.
150

150

00:07:41.400  -->  00:07:43.270
Before I do that I'm gonna
go here into source,
151

151

00:07:43.270  -->  00:07:45.280
notice now I'm actually
in the source folder.
152

152

00:07:45.280  -->  00:07:49.680
So what I'm going to do is create
a new class, gonna right-click that,
153

153

00:07:49.680  -->  00:07:52.860
New, Java Class, noting that I'm
actually click at the source level.
154

154

00:07:52.860  -->  00:07:54.950
And we're gonna call that one Main,
so it's a new class there.
155

155

00:07:54.950  -->  00:07:59.260
Then we're gonna come back here to
package, and I'm going to delete that.
156

156

00:08:00.940  -->  00:08:01.440
Delete the package.
157

157

00:08:04.420  -->  00:08:06.950
And that deletes the package and
the sub folders.
158

158

00:08:06.950  -->  00:08:09.270
And that's how we still
have com.example in there.
159

159

00:08:09.270  -->  00:08:10.740
So, now I'm gonna right click in here,
160

160

00:08:10.740  -->  00:08:13.610
right click New,
come down here to Package.
161

161

00:08:13.610  -->  00:08:16.470
And we can then enter it again, just to
show you how to go about creating a new
162

162

00:08:16.470  -->  00:08:21.850
one, com.example.mypackage again.
163

163

00:08:21.850  -->  00:08:24.260
Notice how that's now
created a new package for us.
164

164

00:08:24.260  -->  00:08:25.620
And just to confirm that,
165

165

00:08:25.620  -->  00:08:27.820
we actually right-click on
the project name, click on New.
166

166

00:08:27.820  -->  00:08:30.930
There's now options for package, notice
that it's actually path and package,
167

167

00:08:30.930  -->  00:08:32.920
cuz I've got a course on Python.
168

168

00:08:32.920  -->  00:08:36.750
But there's actually no option for
us to actually enter a package there.
169

169

00:08:36.750  -->  00:08:38.300
We can actually do one in the source file.
170

170

00:08:38.300  -->  00:08:40.990
We click on that and
the Package option actually comes up for
171

171

00:08:40.990  -->  00:08:43.400
us to actually select
a new package in Java.
172

172

00:08:43.400  -->  00:08:47.820
So the other thing could do now is,
we could actually move the main class.
173

173

00:08:47.820  -->  00:08:49.130
So to do that,
we can just click on that and
174

174

00:08:49.130  -->  00:08:51.950
then just move it to the package name and
then release the button.
175

175

00:08:51.950  -->  00:08:55.560
It actually comes up and says,
do you want to move it to this folder and
176

176

00:08:55.560  -->  00:08:57.250
you can see the folder.
177

177

00:08:57.250  -->  00:09:00.930
It's got the package
com/example/mypackage.
178

178

00:09:00.930  -->  00:09:06.730
I click on Refactor, you notice that the
main class, the new one that we created,
179

179

00:09:06.730  -->  00:09:10.110
bearing in mind the old one actually
got deleted when we actually deleted
180

180

00:09:10.110  -->  00:09:14.370
the package, has been moved into this
package as com.example.mypackage again.
181

181

00:09:14.370  -->  00:09:18.170
And you can see that's actually physically
now in that, within that package.
182

182

00:09:18.170  -->  00:09:22.130
So we go back and just have a looked
in the browser, at this code.
183

183

00:09:22.130  -->  00:09:25.580
So if I have a look at
PackageDemo > Source.
184

184

00:09:25.580  -->  00:09:30.340
Now, this is the actual physical
folder that contains this code and
185

185

00:09:30.340  -->  00:09:30.940
there's the code there.
186

186

00:09:30.940  -->  00:09:32.540
And I can actually just hold
down the button there and
187

187

00:09:32.540  -->  00:09:33.980
you can sort of see the navigation there.
188

188

00:09:33.980  -->  00:09:37.640
We've got PackageDemo was the name of
the project, the source folder and
189

189

00:09:37.640  -->  00:09:42.370
the package is com/example/mypackage,
so there's several sub folders.
190

190

00:09:42.370  -->  00:09:45.950
The package name has been added, as you
can see, to the list here automatically.
191

191

00:09:45.950  -->  00:09:49.870
So in summary, the package statement
defines which package the class,
192

192

00:09:49.870  -->  00:09:51.550
in this case, Main belongs to.
193

193

00:09:51.550  -->  00:09:54.790
But the directory structure has to
also match the component parts of
194

194

00:09:54.790  -->  00:09:55.970
the package name.
195

195

00:09:55.970  -->  00:10:01.680
So in other words, folder, sub-folder com,
sub-folder example, sub-folder mypackage.
196

196

00:10:01.680  -->  00:10:04.720
And looking at that structure,
we can see that that's mirrored exactly,
197

197

00:10:04.720  -->  00:10:08.770
com, example,
then mypackage of the is sub folder.
198

198

00:10:08.770  -->  00:10:12.490
So we actually changed this and
made this aug.example instead of com.
199

199

00:10:12.490  -->  00:10:15.920
We'll actually get an error,
and it says the package name
200

200

00:10:15.920  -->  00:10:19.980
doesn't correspond to the file
path com.example.mypackage.
201

201

00:10:19.980  -->  00:10:23.440
So they have to actually match, and
IntelliJ will actually enforce that.
202

202

00:10:23.440  -->  00:10:26.150
So we just undo that change,
then everything goes away.
203

203

00:10:26.150  -->  00:10:28.420
There is actually a correct
way to rename a package.
204

204

00:10:28.420  -->  00:10:31.130
If you wanna rename a package,
you just come up here and
205

205

00:10:31.130  -->  00:10:34.730
right-click it and do Refactor > Rename.
206

206

00:10:34.730  -->  00:10:37.770
And you can actually literally change
it to whatever you want at that point.
207

207

00:10:37.770  -->  00:10:40.050
Click on refactor,
then it will actually change,
208

208

00:10:40.050  -->  00:10:42.540
taking into account that it will
actually rename the actual folder.
209

209

00:10:42.540  -->  00:10:45.030
So just to show how that works,
lets go ahead and change that.
210

210

00:10:45.030  -->  00:10:46.020
So we'll change it org.
211

211

00:10:46.020  -->  00:10:48.550
Re-factor.
212

212

00:10:48.550  -->  00:10:50.190
Noting how that's actually changed there.
213

213

00:10:50.190  -->  00:10:52.260
It's now all.example.mypackage.
214

214

00:10:52.260  -->  00:10:55.470
Com.example was the package that
was leftover when we deleted
215

215

00:10:55.470  -->  00:10:56.550
my package previously.
216

216

00:10:56.550  -->  00:11:00.380
But we've not got
an all.example.mypackage, which remains.
217

217

00:11:00.380  -->  00:11:02.120
Now we go back in and
have a look at the code,
218

218

00:11:03.430  -->  00:11:06.530
noticing how com source com
example's no longer there anymore.
219

219

00:11:06.530  -->  00:11:11.430
Pick up to source level is now org,
org, example, my package and
220

220

00:11:11.430  -->  00:11:12.170
there's our code again.
221

221

00:11:12.170  -->  00:11:14.430
And you can see that
it's now been renamed.
222

222

00:11:14.430  -->  00:11:17.820
So, IntelliJ, when you go to actually
use that, plus you've renamed that,
223

223

00:11:17.820  -->  00:11:18.760
as you can see.
224

224

00:11:18.760  -->  00:11:22.410
And you can also specify a package
name as part of the class name,
225

225

00:11:22.410  -->  00:11:25.240
when you're actually creating a new class.
226

226

00:11:25.240  -->  00:11:29.250
So in the next part video, I'm actually
going to create a game package and
227

227

00:11:29.250  -->  00:11:30.470
show you how to do that.
228

228

00:11:30.470  -->  00:11:33.650
And also create some classes that might
be useful in that adventure game.
229

229

00:11:33.650  -->  00:11:36.560
And we' ll be using some of the code
from the interface challenge that we've
230

230

00:11:36.560  -->  00:11:37.630
done previously.
231

231

00:11:37.630  -->  00:11:38.880
So I'll see you in that next video.
