1
1

00:00:05,240  -->  00:00:10,000
ok so it is time for a challenge now
this is only going to be a real small
2

2

00:00:10,000  -->  00:00:13,950
challenge there's no coding necessary
but I'm gonna type the challenge so you have
3

3

00:00:13,950  -->  00:00:19,490
it on the screen and then going to talk through it because it's important
4

4

00:00:19,490  -->  00:00:25,060
and after this after we have gone through the answer I'm
just gonna demonstrate the concepts so
5

5

00:00:25,060  -->  00:00:29,240
what I'm going to do is create a new class now I'm
gonna call it challenge because that's
6

6

00:00:29,240  -->  00:00:49,340
what we're going to be typing some of the code or this code anyway so we are gonna call it challenge, oops I called it the wrong this so will just refactor and rename and get rid of one of the ls
7

7

00:00:49,340  -->  00:00:54,090
so paste that in ok so here is the challenge
8

8

00:00:54,090  -->  00:00:58,840
so when overriding the equals method in the
heavenly body class we were careful
9

9

00:00:58,840  -->  00:01:03,280
to make sure that it would not return true
if a heavenly body was compared to a
10

10

00:01:03,280  -->  00:01:08,760
subclass of itself now I did that we did
that to demonstrate that method but it was
11

11

00:01:08,760  -->  00:01:13,320
actually unnecessary in the heavenly body class it self so your challenged
12

12

00:01:13,320  -->  00:01:19,180
is just a question and that question is
why was it unnecessary to do that for the
13

13

00:01:19,180  -->  00:01:24,700
heavenly body class and just a hint
there if you stuck check out lecture
14

14

00:01:24,700  -->  00:01:30,210
97 because that goes through what the
issue is and why in this case it's not
15

15

00:01:30,210  -->  00:01:34,170
necessary so pause the video and see if you can have a bit of a think and figure
16

16

00:01:34,170  -->  00:01:37,570
out why its not needed and if necessary go back and
17

17

00:01:37,570  -->  00:01:41,710
review heavenly body the code and
when you ready start the video
18

18

00:01:41,710  -->  00:01:47,960
pause the video now ok so how did you get on hopefully you figure out the
19

19

00:01:47,960  -->  00:01:53,170
answer to the question which was why is
it unnecessary to do that check in the
20

20

00:01:53,170  -->  00:01:57,920
heavenly body class to make sure that it
wouldn't return true if a heavenly body was
21

21

00:01:57,920  -->  00:02:02,540
compared to a sub class of itself so I'm going to
paste the answer here and then we'll talk
22

22

00:02:02,540  -->  00:02:07,200
about it and we're gonna go through some
code ok so there is
23

23

00:02:07,200  -->  00:02:13,930
the answer the heavenly
body classes declared final so it can't
24

24

00:02:13,930  -->  00:02:17,860
be sub class so of course we didn't need
to do any tests to check the sub class
25

25

00:02:17,860  -->  00:02:22,300
because we already know that is mark final and in
addition the Java String class is also
26

26

00:02:22,300  -->  00:02:27,410
final and that's why it's which is why it
can safely use the instance of method
27

27

00:02:27,410  -->  00:02:30,690
without having to worry about
comparisons with a subclass that's the
28

28

00:02:30,690  -->  00:02:34,870
answer to that hopefully you figured that out
and again if unsure check out lecture
29

29

00:02:34,870  -->  00:02:40,940
97 but you might be looking at
and thinking why is it an issue with using
30

30

00:02:40,940  -->  00:02:46,200
instance of it in sub classes so what I'm
going to do is create some additional
31

31

00:02:46,200  -->  00:02:51,150
code now to show you an outline what the
problem is so we can actually do this in
32

32

00:02:51,150  -->  00:02:54,720
this code in this class you can create a
new project if you want but I'm just gonna put it in this
33

33

00:02:54,720  -->  00:03:01,830
project so I'm going to create a class
start off and call it dog dogs is gonna be a base class
34

34

00:03:01,830  -->  00:03:16,400
and we are gonna have a final field...add our constructor which accepts as a parameter
35

35

00:03:16,400  -->  00:03:26,220
and we just have a getter for name so the
actual equals method that we are going to write we are going
36

36

00:03:26,220  -->  00:03:33,620
to override it so I'm going to do a ctrl O and override equals and instead of that
37

37

00:03:33,620  -->  00:03:45,280
return and firstly if this is equal to
object
38

38

00:03:45,280  -->  00:03:50,610
return true remember when we do that to test
whether this object is being compared
39

39

00:03:50,610  -->  00:03:54,250
against itself and if that's the case
and it's the same object in memory we
40

40

00:03:54,250  -->  00:03:59,020
know there's always going return true using
a equals equals so if that's the case we will
41

41

00:03:59,020  -->  00:04:04,140
return as you can see in line 20 but
next we want to do if...
42

42

00:04:04,140  -->  00:04:07,790
..which is the object that we are comparing...
43

43

00:04:07,790  -->  00:04:18,580
...
44

44

00:04:18,580  -->  00:04:33,290
...ok so that's the
45

45

00:04:33,290  -->  00:04:37,220
case and we determined that if the strings in the
classes are the same and is the dog class
46

46

00:04:37,220  -->  00:04:42,390
that were actually comparing that's the
case we get the strings or we use the string equals
47

47

00:04:42,390  -->  00:04:46,100
to actually check test whether the strings is the same
if you get this far down and we know
48

48

00:04:46,100  -->  00:04:51,020
that they weren't the same so we are going to return false so next we are going to create another class now and call this
49

49

00:04:51,020  -->  00:05:04,250
one labrador and going to extend or subclass dog
50

50

00:05:04,250  -->  00:05:10,180
..and create a constructor first it is going to
correctly call the super to set the dog
51

51

00:05:10,180  -->  00:05:14,400
name and we don't need to do anything else other than the
equals so what I'm going to do with the equals is I'm
52

52

00:05:14,400  -->  00:05:21,770
copy the equals method from dog and we just going to make a change a couple of changes so we are just going to
53

53

00:05:21,770  -->  00:05:27,740
paste that in so there's our overridden
method for equals and the only change to make
54

54

00:05:27,740  -->  00:05:32,360
is the references to dog we are gonna
change to labrador so take a copy of
55

55

00:05:32,360  -->  00:05:40,140
the class and change that to Labrador
and ObjectName to labrador as well so it
56

56

00:05:40,140  -->  00:05:45,090
is now testing correctly for this
class instead of its super class which
57

57

00:05:45,090  -->  00:05:48,970
was dog name is not going to work anymore
that's because we haven't got a field
58

58

00:05:48,970  -->  00:05:53,850
in this class and we set it to private
access so we are going to change that and use
59

59

00:05:53,850  -->  00:06:00,120
.getName so that we can actually get
access to the name that was saved on
60

60

00:06:00,120  -->  00:06:04,720
line 9 when the constructors was actually called
you can see now its correctly
61

61

00:06:04,720  -->  00:06:11,790
comparing Labrador and create another class and we will call it DogMain so as not to confuse ourselves with the
62

62

00:06:11,790  -->  00:06:18,130
original main class that we use earlier in this set of videos and we are going to create ourselves
63

63

00:06:18,130  -->  00:06:26,450
a main method so we can run it so type...there is our main method so we can
64

64

00:06:26,450  -->  00:06:30,880
actually call so gonna create a pet
Labrador called rover so rover is found
65

65

00:06:30,880  -->  00:06:34,990
wondering by the dog warden who reads
her collar and decides she's a dog called
66

66

00:06:34,990  -->  00:06:52,650
Rover so lets do that so...so we are very
67

67

00:06:52,650  -->  00:06:56,700
distraught at this point at the loss of our
pet so we're going to call the dog pound to see
68

68

00:06:56,700  -->  00:07:01,060
if she's been found now they have a dog and dog is called rover but is she
69

69

00:07:01,060  -->  00:07:05,780
our pet well that depends on how you ask
the questions so what we can do in
70

70

00:07:05,780  -->  00:07:09,210
programming terms to answer that
question
71

71

00:07:09,210  -->  00:07:13,550
we can put firstly does..
72

72

00:07:13,550  -->  00:07:24,180
...and the second
73

73

00:07:24,180  -->  00:07:33,590
test will be....
74

74

00:07:33,590  -->  00:07:37,970
so we've done the first one the testing rover against
rover 2 and the second one we're testing rover 2
75

75

00:07:37,970  -->  00:07:46,130
against rover firstly run that
and it doesn't work because it is executing the other
76

76

00:07:46,130  -->  00:07:52,360
class so right click again run so I'm gonna click on
run dog main so you might be interested
77

77

00:07:52,360  -->  00:07:57,120
to see that in the first case rover two
equals rover rather but in the 2nd case it
78

78

00:07:57,120  -->  00:08:01,110
returned true for that first but on the 2nd one line 12 rover equals
79

79

00:08:01,110  -->  00:08:05,210
rover 2 return false so what is
happening here is a Labrador is an
80

80

00:08:05,210  -->  00:08:09,940
instance of dog but dog though is not an
instance of Labrador so the second test
81

81

00:08:09,940  -->  00:08:14,210
returns false so this violates that
symmetric rule that we talked about that
82

82

00:08:14,210  -->  00:08:19,090
and equals method must obey so basically
has to be equal on both sides of the
83

83

00:08:19,090  -->  00:08:23,250
coin in this case rover 2 has to
equals rover if we are testing in that way but the
84

84

00:08:23,250  -->  00:08:27,940
other way around as well rover has to equal
rover 2 for that to be true so we
85

85

00:08:27,940  -->  00:08:32,690
can fix this because it's obviously a
problem at the moment so we can
86

86

00:08:32,690  -->  00:08:36,720
best way to fix is to not override
the equals method in Labrador so we can
87

87

00:08:36,720  -->  00:08:40,130
remove that code so we're going to
remove the lines from Labrador
88

88

00:08:40,130  -->  00:08:44,330
so go back in there and do that so I'm
going to basically comment out this code
89

89

00:08:44,330  -->  00:08:48,660
in the Labrador class we're not going to
override equals at all I'm just going to commenting that out completely so
90

90

00:08:48,660  -->  00:08:53,770
that should now now that we've done that
if we go back to dog main we should allow us to find a pet regardless
91

91

00:08:53,770  -->  00:09:00,330
of how the questions is phrase so we will just run
first to confirm notice it's now true in both
92

92

00:09:00,330  -->  00:09:05,300
scenarios because we are not overriding that equals it's now
set to true in both cases whichever the way
93

93

00:09:05,300  -->  00:09:09,720
the questions phrase in other words now
to ensure that equals can't be overridden
94

94

00:09:09,720  -->  00:09:14,230
in sub classes of dog what we want to do
to confirm that we would is to actually go
95

95

00:09:14,230  -->  00:09:22,690
back to the dog class and marked that as final...so we are marking that as final and we are saying that this
96

96

00:09:22,690  -->  00:09:25,690
method cannot be overridden at that point so
97

97

00:09:25,690  -->  00:09:30,530
that's one way to really make sure that
the equals can't be overridden and
98

98

00:09:30,530  -->  00:09:33,720
we can't get into the problems that we just had so
what we could do is go back to
99

99

00:09:33,720  -->  00:09:38,500
Labrador and if we try to uncomment
this code we're now gonna get an error and
100

100

00:09:38,500  -->  00:09:42,290
basically its saying the overridden method is final so we can't do what we're trying to do so
101

101

00:09:42,290  -->  00:09:48,160
that's the message we want in this case so I'm going
to comment that again and will do another test to make
102

102

00:09:48,160  -->  00:09:53,430
sure that its still running and we are getting true for both so what this should highlight is
103

103

00:09:53,430  -->  00:09:56,740
that it really does show that a great
deal of thought is needed when you're
104

104

00:09:56,740  -->  00:10:00,300
overriding equals and of course therefore hash code so should you allow your
105

105

00:10:00,300  -->  00:10:05,900
classes to be sub classed if so how do you
treat comparisons between the subclass
106

106

00:10:05,900  -->  00:10:11,190
and its base class so if the subclass would
reasonably only add methods that do not alter
107

107

00:10:11,190  -->  00:10:15,940
the way that equal should work then
allow sub classing but Mark you equals
108

108

00:10:15,940  -->  00:10:20,220
and hashCode method as final now if a
sub classes is likely to be different object
109

109

00:10:20,220  -->  00:10:23,800
then used the method we use in heavenly
body to make comparisons between the
110

110

00:10:23,800  -->  00:10:29,370
subclass and its base class return false
if needed these would really fit then
111

111

00:10:29,370  -->  00:10:33,550
prevent sub classing and force clients to use
composition instead so we now seen how to
112

112

00:10:33,550  -->  00:10:38,570
implement a immutable class that can be
safely used as either a key in a map or as
113

113

00:10:38,570  -->  00:10:42,730
an element in the set the heavenly body
class isn't immutable because we can add
114

114

00:10:42,730  -->  00:10:46,880
moons to it but any change would make
too it won't affect either behavior of
115

115

00:10:46,880  -->  00:10:51,040
equals or the hash code that it generated by its hash code method and it's worth
116

116

00:10:51,040  -->  00:10:54,300
pointing out that these videos have been
about sets and overriding equals and
117

117

00:10:54,300  -->  00:10:58,380
hashCode and not about how best to model
the universe so keep that in mind that
118

118

00:10:58,380  -->  00:11:03,720
its important distinction there and the example
using planets was chosen really because
119

119

00:11:03,720  -->  00:11:07,110
it involved objects naturally form sets and it was quite good for
120

120

00:11:07,110  -->  00:11:11,750
demonstrating sets and also because I
wanted to have sets of objects rather
121

121

00:11:11,750  -->  00:11:15,900
a primitive type so that we could look at equals and
hashCode now there's a definite is a
122

122

00:11:15,900  -->  00:11:19,830
relationship between a heavenly body and
both a moon and a planet though so if
123

123

00:11:19,830  -->  00:11:24,400
you were really modeling the universe
it would probably be better to extend a
124

124

00:11:24,400  -->  00:11:28,080
base class to create the different types
of objects found in space
125

125

00:11:28,080  -->  00:11:31,410
sets could still be useful though so
if you program was used by someone
126

126

00:11:31,410  -->  00:11:35,640
investigating ice giants for example that
it could be useful to group
127

127

00:11:35,640  -->  00:11:42,000
that kind of planet into its own set and a planet object could maintain its set of moons and could then be used in
128

128

00:11:42,000  -->  00:11:45,670
a union to allow all the moons in the
solar system to group together as we did
129

129

00:11:45,670  -->  00:11:50,240
course in the examples so that's it i
hope you've got a lot out of these few
130

130

00:11:50,240  -->  00:11:55,550
videos in the next video we are going to look at set intersection and difference and we are going to
131

131

00:11:55,550  -->  00:11:57,780
finish with a meaty challenge so I'll
see you in the next video
