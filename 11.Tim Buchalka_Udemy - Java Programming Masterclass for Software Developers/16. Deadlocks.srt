1
1

00:00:05,450  -->  00:00:09,560
now we're going to talk about some
common problems that can occur when
2

2

00:00:09,560  -->  00:00:11,140
you're working with threads
3

3

00:00:11,140  -->  00:00:15,860
we've seen in previous videos that we
have to use synchronization or locks to
4

4

00:00:15,860  -->  00:00:20,570
prevent critical sections of code from
the thread interference but we're not
5

5

00:00:20,570  -->  00:00:24,320
careful we can actually cause more
problems doing that then we actually
6

6

00:00:24,320  -->  00:00:27,470
solve the first common pitfall is called
a deadlock
7

7

00:00:28,040  -->  00:00:33,200
so a deadlock occurs when two or more
threads are blocked on locks and every
8

8

00:00:33,200  -->  00:00:37,490
thread that's blocked is holding a lock
that another block thread wants
9

9

00:00:37,490  -->  00:00:44,360
for example thread 1 is holding lock
1 and waiting to acquire lock 2 but
10

10

00:00:44,360  -->  00:00:49,490
thread 2 is holding lock 2 and waiting
to acquire lock 1 because all the
11

11

00:00:49,490  -->  00:00:52,880
threads holding the locks are blocked
they will never release the locks they're
12

12

00:00:52,880  -->  00:00:56,600
holding and so none of the waiting threads
will actually ever run
13

13

00:00:57,230  -->  00:01:00,350
let's take a look at an example of how this works
14

14

00:01:00,350  -->  00:01:03,380
and I've created already a new
15

15

00:01:03,380  -->  00:01:07,330
intellij project java project called
deadlock so make sure you to create that
16

16

00:01:07,330  -->  00:01:11,780
and it's just a standard console
application like we've been using in
17

17

00:01:11,780  -->  00:01:16,030
this section and then what we're going
to do is create two very simple classes
18

18

00:01:16,030  -->  00:01:22,340
that extend the thread class we're going
to start off here under main and
19

19

00:01:22,340  -->  00:01:26,030
going to create two objects that are
going to be using for our locks...
20

20

00:01:26,030  -->  00:01:40,060
....
21

21

00:01:40,700  -->  00:01:43,700
....
22

22

00:01:46,440  -->  00:01:50,460
so we've added the two static variables
to the class which the threads in the
23

23

00:01:50,460  -->  00:01:54,750
application are going to use to
synchronize so next I'm going to add
24

24

00:01:54,750  -->  00:01:58,620
the code for the first thread and in
this case it's just a small example
25

25

00:01:58,620  -->  00:02:02,100
we're not going to worry about coloring
the output so I'm just going to come up
26

26

00:02:02,100  -->  00:02:11,610
here and in the class is going to be
private....and
27

27

00:02:11,610  -->  00:02:17,640
that's going to extend thread and then we want to have our run method
28

28

00:02:17,640  -->  00:02:25,740
....
29

29

00:02:29,100  -->  00:02:36,540
then we will output a message in the
synchronize block thread 1 has lock 1
30

30

00:02:36,540  -->  00:02:42,570
then we have try here and there should
have been an inner class
31

31

00:02:44,310  -->  00:02:47,310
which I will add that as an inner class
32

32

00:02:49,770  -->  00:02:54,630
okay for try and it's going to be we're
going to catch the interrupted exception
33

33

00:02:54,630  -->  00:02:57,270
as we've done before for other threads
34

34

00:02:57,270  -->  00:03:01,830
won't bothered processing anything in
there for now but in terms of the code
35

35

00:03:01,830  -->  00:03:06,750
that's going to run in the try block we will
just put it to sleep briefly thread.sleep
36

36

00:03:06,750  -->  00:03:15,090
we will go with a hundred and outside the thread catch we're going to put thread
37

37

00:03:15,090  -->  00:03:18,960
1....
38

38

00:03:19,470  -->  00:03:28,950
then we're going to do synchronized
lock 2....then the code in the
39

39

00:03:28,950  -->  00:03:34,890
synchronized block is going to be thread
1....
40

40

00:03:34,890  -->  00:03:41,640
...if it gets to this code it will
have then outside of the synchronized
41

41

00:03:41,640  -->  00:03:53,550
block thread 1 released lock 2 and outside of the
42

42

00:03:53,550  -->  00:03:59,970
synchronized block for lock 1
message there is going to be....
43

43

00:03:59,970  -->  00:04:06,510
.....
44

44

00:04:06,510  -->  00:04:13,680
ok so when the thread runs its going to
try and obtain the lock for the lock 1
45

45

00:04:13,680  -->  00:04:15,690
object if it's successful
46

46

00:04:15,690  -->  00:04:19,050
it's going to sleep for a hundred
milliseconds to give the second thread
47

47

00:04:19,050  -->  00:04:23,520
that we will code up in a minute a chance to
run when it wakes up we'll try to obtain
48

48

00:04:23,520  -->  00:04:25,680
the lock for this lock 2 object
49

49

00:04:25,680  -->  00:04:29,250
alright so that's what the idea is and we're going to
50

50

00:04:29,250  -->  00:04:34,380
do pretty much the same for thread
2 going to create the private
51

51

00:04:34,380  -->  00:04:40,320
static class again....
52

52

00:04:42,640  -->  00:04:51,670
....this time
we're going to synchronize lock 2 first
53

53

00:04:51,670  -->  00:05:02,080
print out a message if we're successful
thread 2...and we add a try
54

54

00:05:02,080  -->  00:05:02,980
in there
55

55

00:05:02,980  -->  00:05:09,130
in the try we are going to sleep
for a hundred and catch our interrupted
56

56

00:05:09,130  -->  00:05:10,660
exception
57

57

00:05:10,660  -->  00:05:18,820
we won't put any code in there and then
outside of the try block thread 2
58

58

00:05:18,820  -->  00:05:33,580
.....
59

59

00:05:33,580  -->  00:05:40,300
.....and if we're successful in a synchronized
60

60

00:05:40,300  -->  00:05:46,720
block will put thread 2 at this point
it has lock 1
61

61

00:05:46,720  -->  00:05:55,510
technically lock 2 and 1 because that
was the order that we grab them and
62

62

00:05:55,510  -->  00:06:02,320
outside of the synchronized block
4 lock one its going to be a thread 2
63

63

00:06:02,320  -->  00:06:03,370
2 is released
64

64

00:06:03,370  -->  00:06:13,480
......then outside of the
synchronized block for lock 2....
65

65

00:06:13,480  -->  00:06:17,530
....
66

66

00:06:17,530  -->  00:06:26,170
ok so two very similar classes as you
can see all right so come up here now to
67

67

00:06:26,170  -->  00:06:30,040
our main method and let's add the code
to kick these off so it's going to be a
68

68

00:06:30,040  -->  00:06:32,650
new....
69

69

00:06:32,650  -->  00:06:41,500
....
70

70

00:06:41,500  -->  00:06:45,520
ok so let's simulate this deadlock and
see what happens i'm going to run it now
71

71

00:06:50,860  -->  00:06:54,930
so you see what happened we can see that
thread one's got lock one thread 2
72

72

00:06:54,930  -->  00:06:59,940
got locked 2 then thread 1
message waiting for lock 2 remember
73

73

00:06:59,940  -->  00:07:03,310
that thread 2 is already got lock two
and thread two is waiting for lock
74

74

00:07:03,310  -->  00:07:07,440
one so you can see what's happening here
and at this point we don't see any other
75

75

00:07:07,440  -->  00:07:11,340
output about the threads releasing locks
and exiting when the application is not
76

76

00:07:11,340  -->  00:07:14,560
terminated it's actually still running
so we'll have to actually terminate this
77

77

00:07:14,560  -->  00:07:17,080
manually so if we close this down now
78

78

00:07:17,080  -->  00:07:20,710
so thinking about it it's probably not
difficult to see what happened
79

79

00:07:20,710  -->  00:07:27,310
thread one obtained lock one then called
sleep and suspended thread thread 2 ran and
80

80

00:07:27,310  -->  00:07:33,490
obtained lock 2 and then called sleep
and suspended thread one woke up and
81

81

00:07:33,490  -->  00:07:39,870
tried to obtain lock 2 but thread 2 is
holding lock 2 so thread 1 blocks and
82

82

00:07:39,870  -->  00:07:44,400
then thread 2 wakes up and tries to
obtain lock 1 but thread one has
83

83

00:07:44,400  -->  00:07:46,210
got to lock 1 already
84

84

00:07:46,210  -->  00:07:49,590
so thread 2 blocks at this point we've
got a deadlock
85

85

00:07:49,590  -->  00:07:53,280
so in other words thread 1 will never
be able to run and thread 2 we'll never
86

86

00:07:53,280  -->  00:07:54,270
be able to run
87

87

00:07:54,270  -->  00:07:58,590
so question here is how can we prevent
deadlock situation from happening
88

88

00:07:59,250  -->  00:08:04,530
so one solution would be any only ever tried
try to lock on a single object and if
89

89

00:08:04,530  -->  00:08:07,380
you can write the code so that only one
lock is required
90

90

00:08:07,380  -->  00:08:11,050
the code won't deadlock but
unfortunately that is not a practical
91

91

00:08:11,050  -->  00:08:15,960
solution for many applications that need
multiple locks and the second way to
92

92

00:08:15,960  -->  00:08:21,120
prevent deadlocks is to require that
all threads must first try to obtain the
93

93

00:08:21,120  -->  00:08:26,190
locks in the same order the deadlock in
our example is possible because thread
94

94

00:08:26,190  -->  00:08:29,830
one tries to obtain lock one and then
lock 2
95

95

00:08:29,830  -->  00:08:34,270
and of course thread 2 tries to obtain
lock 2 and then lock one
96

96

00:08:34,270  -->  00:08:38,970
now if we made both threads obtain the
locks in the same order a deadlock
97

97

00:08:38,970  -->  00:08:40,320
can't occur
98

98

00:08:40,320  -->  00:08:44,760
so let's update our example here so that
thread 2 tries to obtain the locks in
99

99

00:08:44,760  -->  00:08:49,720
the same order that thread 1 does so
coming back here to our thread 2 code
100

100

00:08:50,260  -->  00:08:56,110
we're going to change this to be locked
1 now starting on lock 1 and will
101

101

00:08:56,110  -->  00:08:58,770
change the message to say threat 2 has
got lock one because that's what it is
102

102

00:08:58,770  -->  00:09:03,400
now then moving down and thread 2
we're going to be waiting for lock
103

103

00:09:03,400  -->  00:09:09,400
two now so change that message and we're
going to synchronize now on lock 2 so
104

104

00:09:09,400  -->  00:09:13,720
thread 2 at this point we can say i think
a bit pedantic but putting it in the
105

105

00:09:13,720  -->  00:09:19,330
right order your can say its got both lock 1
and lock 2 and here we're going to put
106

106

00:09:19,330  -->  00:09:21,070
thread 2 is released
107

107

00:09:21,070  -->  00:09:26,260
this will be locked 2 an outside down
here thread 2 released lock one
108

108

00:09:26,980  -->  00:09:33,700
so let's run that and see what happens
so when we run the application you can
109

109

00:09:33,700  -->  00:09:37,420
see that the applications no longer got
a deadlock and you can see the print
110

110

00:09:37,420  -->  00:09:41,740
statements and the application has
terminated normally and since both
111

111

00:09:41,740  -->  00:09:44,950
threads are now trying to obtain the
locks in the same order
112

112

00:09:44,950  -->  00:09:48,850
once the thread has obtained the outer
lock the lock it tries to obtain first in
113

113

00:09:48,850  -->  00:09:52,120
other words only that thread can obtain
the inner lock
114

114

00:09:52,630  -->  00:09:56,590
in other words it's not possible for one
of the threads to hold one lock but not
115

115

00:09:56,590  -->  00:10:00,850
the other lock this is the key to
avoiding deadlocks when two or more
116

116

00:10:00,850  -->  00:10:04,330
threads will be competing for two or
more locks
117

117

00:10:04,330  -->  00:10:08,230
you want to make sure that all threads
or all the threads will try to obtain
118

118

00:10:08,230  -->  00:10:10,420
the locks in the same order
119

119

00:10:10,420  -->  00:10:14,740
now another solution would be to use a
lock object rather than using
120

120

00:10:14,740  -->  00:10:18,970
synchronized blocks so using the try lock method that we talked about
121

121

00:10:18,970  -->  00:10:20,020
previously
122

122

00:10:20,020  -->  00:10:24,340
with or without a timeout value may will
prevent deadlocks but that will depend
123

123

00:10:24,340  -->  00:10:28,720
on the code so I'm going to finish the
video here now in the next video we're
124

124

00:10:28,720  -->  00:10:32,410
going to start off by looking at another
way that a deadlock can occur
125

125

00:10:32,410  -->  00:10:33,430
see you in the next video
