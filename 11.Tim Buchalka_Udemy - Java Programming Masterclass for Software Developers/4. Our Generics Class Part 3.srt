1
1

00:00:05,500  -->  00:00:09,120
There's just a few little things now,
to finish off in our generics code,
2

2

00:00:09,120  -->  00:00:11,820
and then we're actually going
to move on to the challenge.
3

3

00:00:11,820  -->  00:00:15,520
So in the last video, I just showed
you how to actually change the team
4

4

00:00:15,520  -->  00:00:19,170
match result method, right here so,
we could actually use that
5

5

00:00:19,170  -->  00:00:22,910
type to actually confirm,
that any plays of the appropriate type.
6

6

00:00:22,910  -->  00:00:26,140
Any teams, I should say, of the
appropriate type could call the method.
7

7

00:00:26,140  -->  00:00:28,660
And so, consequently in match result,
8

8

00:00:28,660  -->  00:00:30,550
when we're calling that
from the Adelaide Crows,
9

9

00:00:30,550  -->  00:00:35,100
we can't actually pass a baseball team to
it, because we've defined Adelaide Crows
10

10

00:00:35,100  -->  00:00:38,330
to actually be a team of type
Football Player, so therefore,
11

11

00:00:38,330  -->  00:00:40,900
that baseball team isn't going to work,
so I'm going to comment that out now.
12

12

00:00:42,320  -->  00:00:45,450
Now, the team class includes
a very simple ranking.
13

13

00:00:45,450  -->  00:00:48,310
I think, I talked very briefly about that.
14

14

00:00:48,310  -->  00:00:51,470
And the ranking was just
a very simple formula to
15

15

00:00:51,470  -->  00:00:53,930
calculate how this team is
ranking in this league.
16

16

00:00:53,930  -->  00:00:56,480
And it's the number of games
won multiplied by two,
17

17

00:00:56,480  -->  00:00:59,580
plus the number of games tied.,
So, pretty simple.
18

18

00:00:59,580  -->  00:01:00,310
So, in a real world.
19

19

00:01:00,310  -->  00:01:03,500
Obviously, league the ranking would also
consider the number of games played, and
20

20

00:01:03,500  -->  00:01:07,370
things like the goal difference,
and perhaps other things as well.
21

21

00:01:07,370  -->  00:01:10,520
And obviously, you're free to play more
complexity to the myth if you're interest
22

22

00:01:10,520  -->  00:01:11,720
in doing these things yourself.
23

23

00:01:11,720  -->  00:01:13,700
And having a better of play around.
24

24

00:01:13,700  -->  00:01:15,750
But, we're going to leave
that fairly simple for
25

25

00:01:15,750  -->  00:01:18,420
this exercise as we move forward.
26

26

00:01:18,420  -->  00:01:21,930
So, let's actually go ahead now, and
actually, print these rankings out.
27

27

00:01:21,930  -->  00:01:23,440
And that's actually, quite simple to do.
28

28

00:01:23,440  -->  00:01:27,860
So, we can just come in here, and
do some printout, or print out some items.
29

29

00:01:27,860  -->  00:01:29,070
We can say rankings.
30

30

00:01:30,890  -->  00:01:36,840
Then we could do
Adelaide Crows.getName plus column,
31

31

00:01:36,840  -->  00:01:40,780
and plus AdelaideCrows.ranking.
32

32

00:01:42,930  -->  00:01:44,800
LIkewise, we're gonna do the same for
Melbourne.
33

33

00:01:46,290  -->  00:01:54,170
Melbourne.get name plus colon
space plus Melbourn.ranking.
34

34

00:01:56,570  -->  00:01:58,630
Next for Fremantle.
35

35

00:01:58,630  -->  00:02:03,530
Freemantle, is a strain for
[INAUDIBLE] get names
36

36

00:02:03,530  -->  00:02:08,090
plus call space plus freemantle.ranking.
37

37

00:02:08,090  -->  00:02:12,440
And lastly, that's all.
38

38

00:02:12,440  -->  00:02:15,510
It wants to definitely run the 2015
[INAUDIBLE] for Australia.
39

39

00:02:16,810  -->  00:02:19,180
Plus a space like so.
40

40

00:02:19,180  -->  00:02:21,120
And it'll be hawthorn.ranking.
41

41

00:02:21,120  -->  00:02:23,250
So, we can actually now, run that.
42

42

00:02:23,250  -->  00:02:30,800
And we can actually, see
the Adelaide Crows have got four points.
43

43

00:02:30,800  -->  00:02:33,050
Then, if we have a look we can see,
sort of see why.
44

44

00:02:33,050  -->  00:02:36,470
Melbourne and Freemantle have got zero
points, because we haven't actually,
45

45

00:02:36,470  -->  00:02:39,380
defined them as having
any results essentially.
46

46

00:02:39,380  -->  00:02:43,320
It's only Freemantle, and LA Crows that
have actually got some results in there,
47

47

00:02:43,320  -->  00:02:45,430
and that's where I've got two points,
and you can see that's obviously,
48

48

00:02:45,430  -->  00:02:47,540
from the various metrics
aren't set with actually into.
49

49

00:02:47,540  -->  00:02:48,590
So, that's all very well.
50

50

00:02:48,590  -->  00:02:51,040
But one thing we can't
do is compare things,
51

51

00:02:51,040  -->  00:02:53,260
to see which would be
the highest in the league table.
52

52

00:02:53,260  -->  00:02:54,470
So, let's make a change to that.
53

53

00:02:54,470  -->  00:02:57,180
Let's actually,
make a change to our team class
54

54

00:02:57,180  -->  00:03:00,790
to implement something that's very
useful in interface called comparable.
55

55

00:03:00,790  -->  00:03:04,150
So, we close down the run window,
and go back to the team class.
56

56

00:03:04,150  -->  00:03:07,360
We need to actually,
change the definition at the top.
57

57

00:03:07,360  -->  00:03:09,250
We've obviously, got extending player.
58

58

00:03:09,250  -->  00:03:12,820
We need to then, implements,
and implements comparable.
59

59

00:03:14,520  -->  00:03:15,710
Comparable.
60

60

00:03:15,710  -->  00:03:20,790
And, we need to actually use the diamond,
again, so T again because obviously,
61

61

00:03:20,790  -->  00:03:23,240
we want to make sure that we are still
using the same generics like that.
62

62

00:03:23,240  -->  00:03:27,180
And obviously, we are getting an error
now, because it's saying we must implement
63

63

00:03:27,180  -->  00:03:31,470
the abstract method compare to in order
to, actually fulfill this interface.
64

64

00:03:31,470  -->  00:03:36,090
And you can see that, there's literally
only one thing to actually change.
65

65

00:03:36,090  -->  00:03:39,260
One method we need to do to
actually fulfil the interface, and
66

66

00:03:39,260  -->  00:03:40,970
that's the compare to function.
67

67

00:03:40,970  -->  00:03:43,140
Because we only want to compare our teams,
to other teams,
68

68

00:03:43,140  -->  00:03:46,350
that's why we're actually
using the team and the type.
69

69

00:03:46,350  -->  00:03:49,570
So, it doesn't make sense to compare
a football team to a baseball team.
70

70

00:03:49,570  -->  00:03:51,680
So, that's why we're actually adding team,
and
71

71

00:03:51,680  -->  00:03:56,580
then, the actual type,
in another set of diamonds.
72

72

00:03:56,580  -->  00:03:59,690
So, the infamous part looks complicated,
but in essentially what we're doing is
73

73

00:03:59,690  -->  00:04:04,810
we've created the ability to have generic
types, such as team football player.
74

74

00:04:04,810  -->  00:04:08,910
So, all we're actually doing here is
specifying a generic type as a parameter,
75

75

00:04:08,910  -->  00:04:11,370
to the generic interface comparable.
76

76

00:04:11,370  -->  00:04:15,030
So, team is the type in this case,
and team football player, or
77

77

00:04:15,030  -->  00:04:17,620
team T as you got here, is also a type.
78

78

00:04:17,620  -->  00:04:21,900
So, comparable T in this case
could actually accept either.
79

79

00:04:21,900  -->  00:04:24,090
So, the compare to method
that we're about to write,
80

80

00:04:24,090  -->  00:04:27,950
which is defined by the comparable
interface that we're implementing up here,
81

81

00:04:27,950  -->  00:04:32,510
takes an objec,t and returns a negative
number if this is less than the object.
82

82

00:04:32,510  -->  00:04:35,990
Zero, if they're equal, and a positive
if this is greater than the object.
83

83

00:04:35,990  -->  00:04:39,660
So here,what I'm talking about is
less than these that we should sort
84

84

00:04:39,660  -->  00:04:40,860
earlier then.
85

85

00:04:40,860  -->  00:04:44,270
And ask if we want teams with higher
rankings to sort higher up the list.
86

86

00:04:44,270  -->  00:04:47,520
We need to make our compare to
return less if the ranking,
87

87

00:04:47,520  -->  00:04:48,810
is greater than the opponents.
88

88

00:04:48,810  -->  00:04:50,270
I hope that actually makes sense.
89

89

00:04:50,270  -->  00:04:53,010
We've actually used the comparative
method when we implemented our
90

90

00:04:53,010  -->  00:04:55,140
own link list in a previous challenge.
91

91

00:04:55,140  -->  00:04:56,450
And many of the Java classes,
92

92

00:04:56,450  -->  00:04:59,650
actually implement this [INAUDIBLE]
including the string in integer classes.
93

93

00:04:59,650  -->  00:05:02,430
That's how these objects can be
sorted as a result of doing that.
94

94

00:05:02,430  -->  00:05:04,570
But we're doing is we're going
to be writing our own code,
95

95

00:05:04,570  -->  00:05:08,010
because of course we used the string
compare to in the previous challenge,
96

96

00:05:08,010  -->  00:05:11,070
by using the compare,
comparable or interface.
97

97

00:05:11,070  -->  00:05:13,560
And, we're gonna be implementing
the compare two method,
98

98

00:05:13,560  -->  00:05:16,080
which takes the parameter of T,
Team, the type.
99

99

00:05:16,080  -->  00:05:18,950
Type parameter to compare.
100

100

00:05:18,950  -->  00:05:21,550
And again, we're doing that so,
we don't try and compare football, and
101

101

00:05:21,550  -->  00:05:22,850
baseball teams for argument sing.
102

102

00:05:22,850  -->  00:05:26,710
So, if we had just changed that so,
that was just literally team, like this.
103

103

00:05:26,710  -->  00:05:29,370
Compare to it, and
could only take 10 as its parameter.
104

104

00:05:29,370  -->  00:05:31,200
Then, when we write the method,
compare to,
105

105

00:05:31,200  -->  00:05:34,470
it will also be able to
take team as its parameter.
106

106

00:05:34,470  -->  00:05:38,160
And, we wouldn't have that ability to
ensure that only the types of teams,
107

107

00:05:38,160  -->  00:05:41,290
in this case, that are appropriate,
can be parsed to that method.
108

108

00:05:41,290  -->  00:05:43,370
So, I'm gonna leave that back in so,
let's go ahead, and
109

109

00:05:43,370  -->  00:05:45,130
actually write this compare to interface.
110

110

00:05:45,130  -->  00:05:46,550
So, we come down here, under ranking.
111

111

00:05:47,960  -->  00:05:48,910
And I'm going to implement.
112

112

00:05:50,660  -->  00:05:52,050
Implement the compare T method.
113

113

00:05:53,110  -->  00:05:56,470
And you can see, how it's automatically
looked at the definition, and it has added
114

114

00:05:56,470  -->  00:06:00,010
a similar definition, now I'm going to
change the default of zero to team,
115

115

00:06:00,010  -->  00:06:01,980
because that's essentially
what it is in this case.
116

116

00:06:01,980  -->  00:06:02,700
It's the team.
117

117

00:06:02,700  -->  00:06:04,620
And what we now, need to do is go through.
118

118

00:06:04,620  -->  00:06:05,910
and do this test like I've said.
119

119

00:06:05,910  -->  00:06:10,230
So, the first test would be,
if this dot ranking, so
120

120

00:06:10,230  -->  00:06:13,180
this is the current
object we're comparing.
121

121

00:06:13,180  -->  00:06:15,180
If it's greater than
what's been passed to us,
122

122

00:06:15,180  -->  00:06:17,670
the team dot ranking, team dot ranking.
123

123

00:06:17,670  -->  00:06:18,860
Remember, the higher the score the better.
124

124

00:06:18,860  -->  00:06:22,010
Then, you're gonna return negative one.
125

125

00:06:23,790  -->  00:06:26,490
So, in other words, the current team,
the one that we're actually in,
126

126

00:06:26,490  -->  00:06:31,010
this class in other words, or this
instantiation of the class, if the team
127

127

00:06:31,010  -->  00:06:34,260
ranking for that is higher than the team
that's been passed to this method,
128

128

00:06:34,260  -->  00:06:38,540
then it means that this is actually higher
in essence, and we're going to return -1.
129

129

00:06:38,540  -->  00:06:44,650
That's the first one, otherwise
we're gonna put else if(this.ranking
130

130

00:06:44,650  -->  00:06:48,280
If it's less than team.ranking,
so is the other way around,
131

131

00:06:48,280  -->  00:06:50,550
we can have return 1 if
the opposite is true.
132

132

00:06:50,550  -->  00:06:54,090
The current object hasn't got more points,
essentially, it's got less points so
133

133

00:06:54,090  -->  00:06:55,200
we're gonna return 1.
134

134

00:06:55,200  -->  00:06:58,610
And otherwise, we're gonna return 0 cuz it
135

135

00:06:58,610  -->  00:07:01,980
obviously means that the rankings
are actually the same.
136

136

00:07:01,980  -->  00:07:04,440
So, that's what we need
to do to implement that.
137

137

00:07:04,440  -->  00:07:06,730
And then, we can get back to main Java.
138

138

00:07:06,730  -->  00:07:10,600
Code, and we can actually int that up.
139

139

00:07:10,600  -->  00:07:16,120
So, we can do something like
AdelaideCrows.compareto, and let's just
140

140

00:07:16,120  -->  00:07:20,870
say Melbourne and
Melbourne I believe had 0 points and.
141

141

00:07:20,870  -->  00:07:25,150
So, AdelaideCrows compare to.
142

142

00:07:25,150  -->  00:07:27,830
Let's just try, those two on them.
143

143

00:07:31,990  -->  00:07:35,170
So, you can see in this case,
Adelaide Crows has got four points, and
144

144

00:07:35,170  -->  00:07:38,680
comparing to Hops and Melbourne,
which has got 0 points, it returns -1,
145

145

00:07:38,680  -->  00:07:41,960
because we've got a higher ranking,
in this case, than Melbourne.
146

146

00:07:41,960  -->  00:07:45,660
And likewise, compared to Hawthorn,
we've also got a higher ranking.
147

147

00:07:45,660  -->  00:07:47,170
But, if we actually wanted to do a test,
148

148

00:07:47,170  -->  00:07:49,650
let's actually compare Hawthorn
to the Adelaide Crows, so
149

149

00:07:49,650  -->  00:07:52,170
we'll do it the other way around,
just to confirm it's still working.
150

150

00:07:52,170  -->  00:07:58,460
We'll put, and
Hawthorn compare to LA Crows.
151

151

00:07:58,460  -->  00:08:01,410
We should get the opposite, because we're
now comparing Hawthorn to the LA Crows
152

152

00:08:01,410  -->  00:08:04,830
from the other point of view, but
also that's the one that's the same.
153

153

00:08:04,830  -->  00:08:10,400
We'll do, Melbourne dot compare to
Fremantle by which both should return 0,
154

154

00:08:10,400  -->  00:08:13,670
so that we should actually get 0,
because they're both the same score.
155

155

00:08:13,670  -->  00:08:15,330
So, we run those.
156

156

00:08:17,030  -->  00:08:20,600
So, you can see in the third example, now
,we've got Hawthorn compared to Adelaide.
157

157

00:08:20,600  -->  00:08:23,710
Adelaide's got more points, Hawthorn had
less, so we're gonna returned 1 there.
158

158

00:08:23,710  -->  00:08:25,310
And in the last example,
159

159

00:08:25,310  -->  00:08:29,030
melbourne.compare to(fremantle)
they both actually have 0 points.
160

160

00:08:29,030  -->  00:08:29,570
So, obviously.
161

161

00:08:29,570  -->  00:08:30,510
Compare return 0.
162

162

00:08:30,510  -->  00:08:32,530
So, that's actually working,
which is good.
163

163

00:08:32,530  -->  00:08:35,600
Now, the reason we've implemented
the comparable interface,
164

164

00:08:35,600  -->  00:08:39,620
other than to show you how to use it,
because I think it's actually very useful.
165

165

00:08:39,620  -->  00:08:44,110
But also is going to be to help you, with
the challenge to come in the next video.
166

166

00:08:44,110  -->  00:08:47,070
So, if you've got a list of
objects that implement comparable,
167

167

00:08:47,070  -->  00:08:49,250
there such as team for example.
168

168

00:08:49,250  -->  00:08:51,170
What you can do is you
can quickly sort the lis,
169

169

00:08:51,170  -->  00:08:54,580
by using the static sort method
of the collections class.
170

170

00:08:54,580  -->  00:08:57,360
I'm gonna talk more about that, and
give you a little bit of a hint
171

171

00:08:57,360  -->  00:08:59,530
in the next video when we're actually
gonna go through the challenge.
172

172

00:08:59,530  -->  00:09:00,070
But essentially,
173

173

00:09:00,070  -->  00:09:03,980
if you've got an array list of teams you
can use this code, something like this.
174

174

00:09:03,980  -->  00:09:10,220
Sudo code would be, if you had something
like an array list of teams like so,
175

175

00:09:10,220  -->  00:09:19,380
you could do collections.sort(teams) and
that would be sorted.
176

176

00:09:19,380  -->  00:09:22,370
And the whole point about this
is it will actually be sorted,
177

177

00:09:22,370  -->  00:09:27,060
using the compare to function that we
actually wrote for the actual team itself.
178

178

00:09:27,060  -->  00:09:31,580
So i,n other words this method would
be actually automatically utilized
179

179

00:09:31,580  -->  00:09:33,930
by the actual code when we were
actually doing the ".sort".
180

180

00:09:33,930  -->  00:09:36,510
And we're just getting an error there,
because we haven't actually initialized
181

181

00:09:36,510  -->  00:09:38,920
it, it is just purely to give you a bit
of an overview of what it can do.
182

182

00:09:38,920  -->  00:09:41,760
Now ,that's obviously one way to do the
sort, but you can obviously go back and
183

183

00:09:41,760  -->  00:09:45,970
refer to the sort method that we actually
wrote for the arrays challenge as well.
184

184

00:09:45,970  -->  00:09:48,650
But then, you can see this is quite
simple actually using the built-in
185

185

00:09:48,650  -->  00:09:50,410
Java collections class.
186

186

00:09:50,410  -->  00:09:53,660
And we've got an entire section
of that about collections
187

187

00:09:53,660  -->  00:09:55,660
in upcoming videos
showing how to use that.
188

188

00:09:55,660  -->  00:09:56,970
But this is just a simple way of doing it.
189

189

00:09:56,970  -->  00:09:59,210
But anyway, I will talk more
about that in the next video.
190

190

00:09:59,210  -->  00:10:00,350
I'm going to start this one now.
191

191

00:10:00,350  -->  00:10:03,960
There is probably no point in me
starting the challenge in this video.
192

192

00:10:03,960  -->  00:10:07,510
What I will do is I like to start
the challenge in the next video, and
193

193

00:10:07,510  -->  00:10:10,480
we will go through what's required and
actually talk about the solution.
194

194

00:10:10,480  -->  00:10:11,660
So, I will see you in the next video.
