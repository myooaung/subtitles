1
1

00:00:05,590  -->  00:00:08,310
Alright, it's time to work on our DB module.
2

2

00:00:08,500  -->  00:00:12,750
So we're going to create that module then migrate the code for the DB,
3

3

00:00:13,020  -->  00:00:18,210
the DB related code which was data source class into this new module and of course we want to
4

4

00:00:18,210  -->  00:00:22,990
got through the steps to make sure that our application still works with we what would then have which
5

5

00:00:22,990  -->  00:00:27,280
of course would be two modules and code in both of those modules.
6

6

00:00:27,360  -->  00:00:31,200
So let's see a current status of what we're at or where we're at for this project.
7

7

00:00:31,320  -->  00:00:36,910
So you can see at the moment, the projects only got the one module called common which we worked on previously.
8

8

00:00:37,200  -->  00:00:43,290
Now this module reads or requires those other modules and you can see on screen here the ones that we
9

9

00:00:43,290  -->  00:00:45,820
set up in the last video.
10

10

00:00:45,840  -->  00:00:52,500
Now on the image you can also see the internal packages, a DB and common while UI is exported.
11

11

00:00:52,530  -->  00:00:58,310
And if you recall, we had to export ui so that we could get our graphical user interface working.
12

12

00:00:58,950  -->  00:01:01,980
And this is what we're trying to achieve, this is our goal.
13

13

00:01:02,160  -->  00:01:04,830
So the main goal is to split the project into three modules.
14

14

00:01:04,860  -->  00:01:06,810
We have talked about this before.
15

15

00:01:06,840  -->  00:01:11,350
Currently, if any of the common module put in this video we're going to create the DB module as I mentioned.
16

16

00:01:11,550  -->  00:01:13,990
And also that's going to contain the DB package.
17

17

00:01:14,020  -->  00:01:19,830
And of course then this is not finished because we have to also move packages into the third module
18

18

00:01:19,830  -->  00:01:21,750
as well which we doing in another video.
19

19

00:01:22,200  -->  00:01:24,870
Let's get back to IntelliJ,
20

20

00:01:25,020  -->  00:01:27,940
So, first things we need to do is create the new module.
21

21

00:01:27,960  -->  00:01:31,380
Let's go ahead and do that, File> New> Module.
22

22

00:01:32,220  -->  00:01:35,540
And we're going to select java module SDK
23

23

00:01:35,680  -->  00:01:37,800
There's none of Java, next,
24

24

00:01:38,160  -->  00:01:44,370
And the module name is going to be academy.learnprogramming.db
25

25

00:01:45,420  -->  00:01:47,870
you can see that's now been created.
26

26

00:01:47,880  -->  00:01:51,550
And obviously that's going to be a same as that package name as well, we got a source folder there.
27

27

00:01:51,810  -->  00:01:57,210
We've got our two module now showing up and what we do now is we'll go ahead this early in the process
28

28

00:01:57,540  -->  00:02:01,940
and create a new model descriptor. Right click the source folder, set new
29

29

00:02:02,080  -->  00:02:04,530
select module info.java
30

30

00:02:04,700  -->  00:02:08,800
there's our module descriptor file created which is currently empty.
31

31

00:02:08,820  -->  00:02:11,880
Now the next step is to move the DB package into the new module.
32

32

00:02:12,240  -->  00:02:17,960
So what we're going to do to achieve that is come over to the DB module and we're going to right click the source folder
33

33

00:02:18,570  -->  00:02:21,320
and click on create new package.
34

34

00:02:21,410  -->  00:02:29,460
new package, I'm going to call this one academy.learnprogramming and then I'm going
35

35

00:02:29,460  -->  00:02:32,300
to click on ok. Notice I didn't do the .db here.
36

36

00:02:33,270  -->  00:02:40,450
And what we going to do next is cut and paste the DB package from the commons module into this DB module.
37

37

00:02:40,450  -->  00:02:43,890
Now we can also move it as we have done previously by drag and drop.
38

38

00:02:43,900  -->  00:02:46,460
So I just kind of drag this DB package up here
39

39

00:02:47,480  -->  00:02:54,340
into the package that we already just created. You can drag that down into academy.learnprogramming and release and
40

40

00:02:54,340  -->  00:03:03,380
click on ok and click on rRefactor. Then you can see now that the DB package has been removed from
41

41

00:03:03,380  -->  00:03:09,320
our common module and it's now showing in our DB module and there's our data source class.
42

42

00:03:09,760  -->  00:03:15,910
Let's open this data source class now, double-click, close and then we need to make more space here.
43

43

00:03:16,280  -->  00:03:19,810
Let me just have it a little bit small, so I can have a bit more screen state.
44

44

00:03:19,940  -->  00:03:23,420
Now there are compilation errors that we're gonna have to fix, you can see automatically there's is
45

45

00:03:23,420  -->  00:03:25,930
one up there, java.sql.
46

46

00:03:26,030  -->  00:03:32,210
In fact if I scroll up, there's a few more there as well. And since the DB module uses the classes album
47

47

00:03:32,210  -->  00:03:35,760
and artist but also some classes from the sequel module,
48

48

00:03:35,870  -->  00:03:40,640
you probably know by now that we need to add to requires statements into the module-info.java. So you can
49

49

00:03:40,640  -->  00:03:44,860
either use the red bulbs or we can just type them manually.
50

50

00:03:45,690  -->  00:03:52,950
So I can come over here to sql-- sometimes you need to click it twice and click on Add java.sql
51

51

00:03:52,990  -->  00:03:59,710
directive to module-info.java and I'm going to click on that and I can just type the other one. Now notice
52

52

00:03:59,710  -->  00:04:00,930
also with these names
53

53

00:04:00,940  -->  00:04:06,450
If you've got two module descriptor files open, very nicely does show you the name of the module.
54

54

00:04:06,500  -->  00:04:11,820
So the academy.learnprogramming.common and academy.learn programming.db in front of the module name.
55

55

00:04:12,210  -->  00:04:15,480
So we got the requires in there, let's add the other one manually,
56

56

00:04:15,760  -->  00:04:21,670
requires, that's going to be academy.learnprogramming.common, notice that intelliJ found
57

57

00:04:21,670  -->  00:04:27,460
that for us, very nice. Now we've got an error showing here now at the moment when I've done that and
58

58

00:04:27,460  -->  00:04:32,140
we wouldn't get an error if we went back and did it with the red bulb option.
59

59

00:04:32,290  -->  00:04:37,540
And that's because the module common is not in the dependencies in IntelliJ and we have to add the
60

60

00:04:37,540  -->  00:04:39,630
module as a dependency.
61

61

00:04:39,630  -->  00:04:44,890
Now the easiest way to do that would be to do that in the code so we could get back to our data source
62

62

00:04:45,510  -->  00:04:50,070
select the option here, add dependency.
63

63

00:04:50,510  -->  00:04:56,520
I'm gonna go ahead and click on that. We go back and look at the module info and see that's
64

64

00:04:56,520  -->  00:04:57,580
now fixed it there.
65

65

00:04:57,840  -->  00:05:02,240
But since now only the DB module requires sqlite, what we're going to have to do is remove the
66

66

00:05:02,240  -->  00:05:05,130
sqlite from common and add it to DB module.
67

67

00:05:05,310  -->  00:05:09,260
But also we need to add the common module to the DB module dependencies.
68

68

00:05:09,450  -->  00:05:12,920
Now the easiest way to do that is to go back to project structure.
69

69

00:05:13,080  -->  00:05:15,800
Let's go ahead and do that. File> Project Structure
70

70

00:05:17,670  -->  00:05:26,190
And looking at our modules here, common, we've got db, you can see that we got academy.learnprogramming in there
71

71

00:05:26,190  -->  00:05:27,990
also in the common module here,
72

72

00:05:28,170  -->  00:05:34,620
we've got some sqlite, there's two modules there, common and db, common currently has the dependency on jdbc
73

73

00:05:34,620  -->  00:05:36,240
sqlite as you can see there.
74

74

00:05:36,870  -->  00:05:43,050
And obviously db doesn't have that dependency, has the academy.learnprogramming common one because
75

75

00:05:43,050  -->  00:05:50,010
I use the option just to add that. Now we need access to the classes artist and album that are in common module.
76

76

00:05:50,200  -->  00:05:55,840
That's why I've added the common as a dependency to the db module, we need to add sqlite as well.
77

77

00:05:56,040  -->  00:06:03,660
So go ahead and do that, so sqlite just come down and add it, JARs> libs> sqlite.
78

78

00:06:04,260  -->  00:06:05,700
So that's both of them.
79

79

00:06:05,840  -->  00:06:09,090
Then we'll just go back to common now and we'll remove that.
80

80

00:06:09,090  -->  00:06:13,590
So I could have just selected and click the minus sign here, or just right clicked it like I did before and moved
81

81

00:06:14,250  -->  00:06:18,140
and click remove, either way will work and then click on ok.
82

82

00:06:19,840  -->  00:06:22,690
So far, our module was fine.
83

83

00:06:23,060  -->  00:06:29,160
And we've now got the sqlite removed from the commons module and add it to a db module. What we need
84

84

00:06:29,160  -->  00:06:34,150
to do now is have a dependency for sqlite jdbc.
85

85

00:06:34,260  -->  00:06:36,730
Now that's an automatic java 9 module.
86

86

00:06:36,780  -->  00:06:42,750
Now remember, automatic modules are modules that are created when the jars added to the module path.
87

87

00:06:42,750  -->  00:06:49,050
We had to add the sqlite dependency to the db module which we just did. Now previously without commons
88

88

00:06:49,050  -->  00:06:54,310
module, we didn't need to add the requires statement for the sqlite jdbc module and that's because we
89

89

00:06:54,310  -->  00:06:59,910
only had the one module but now we have to add the requires statement to this module descriptor file
90

90

00:06:59,940  -->  00:07:03,940
for our db module because we've got more than one. We're going to go ahead and do that.
91

91

00:07:04,070  -->  00:07:15,050
And that, it's going to be requires sqlite.jdbc. So the name of an automatic module by the way is the name as a
92

92

00:07:15,050  -->  00:07:24,970
jar file without the version, so on the libs folder-- Let me just go back to our file project structure and select db.
93

93

00:07:25,500  -->  00:07:31,520
You can see that the name of the file was sqlite-jdbc-3.21.0.jar
94

94

00:07:31,680  -->  00:07:34,100
And what we did was we removed the version,
95

95

00:07:34,150  -->  00:07:40,620
we'll call it sqlite.jdbc, that's a general rule when you're reading a jar file and you
96

96

00:07:40,620  -->  00:07:45,780
want to add an automatic object as a requirement to your module or for your module.
97

97

00:07:46,110  -->  00:07:53,360
Now that we've done with that, let's go back to data source class and you notice that we still got a compilation error
98

98

00:07:53,360  -->  00:07:57,000
to fix, if you just hover over one of these, you can see
99

99

00:07:57,180  -->  00:08:02,660
what the problem here is it's telling us that academy.learnprogramming.common is declared
100

100

00:08:03,020  -->  00:08:09,930
in that module and it doesn't export that currently to our new module, our academy.learnprogramming.db
101

101

00:08:10,340  -->  00:08:15,620
So what that means is hopefully you can get the gist of this now is we have to export the common package
102

102

00:08:15,830  -->  00:08:22,920
from the common module so that this module, our db module, can use those classes from the common module and
103

103

00:08:23,010  -->  00:08:25,030
without exporting packages we can't get it,
104

104

00:08:25,040  -->  00:08:32,240
we don't get access to classes from another module. So we need to open the module-info java file, the descript
105

105

00:08:32,240  -->  00:08:33,800
file from the common module.
106

106

00:08:33,860  -->  00:08:38,750
We're going to select the other module info here, the one that's more common we need to add an export
107

107

00:08:38,750  -->  00:08:40,090
statement for that.
108

108

00:08:40,190  -->  00:08:48,290
We're going to come up and add it. I'm going to add it above this UI line, exports academy.learn
109

109

00:08:48,290  -->  00:08:51,380
programming.common.
110

110

00:08:51,380  -->  00:08:55,310
So as you can see now, there's different ways to export.
111

111

00:08:55,310  -->  00:09:00,990
So on line 9 we export it to a specific package using the to keyword.
112

112

00:09:01,250  -->  00:09:07,840
So exports academy.learnprogramming.ui to and the name of the module but on line eight, we're just exporting
113

113

00:09:07,840  -->  00:09:09,660
it without specifying the module.
114

114

00:09:10,040  -->  00:09:11,630
Let's go back to data source.
115

115

00:09:12,620  -->  00:09:14,960
And you can see those errors have now disappeared.
116

116

00:09:15,200  -->  00:09:22,070
That's because we've got the correct exports statement in the common module descriptor file.
117

117

00:09:22,340  -->  00:09:29,420
But another problem here is that the controller and the main class also use the data source class so that
118

118

00:09:29,420  -->  00:09:36,910
the main class, the main java because they've got some errors here, scrolling up we can see that the issue
119

119

00:09:36,940  -->  00:09:42,260
really is that the data source-- the import for the data source can't be resolved.
120

120

00:09:42,340  -->  00:09:45,640
Now this is not as easy as you may think to solve.
121

121

00:09:45,910  -->  00:09:53,950
That's because adding the module DB has a dependency, just a common module would result in a cyclic dependency.
122

122

00:09:53,950  -->  00:09:57,160
In other words we'd have two modules where both depend on each other.
123

123

00:09:57,220  -->  00:09:59,680
Now, cyclic dependencies are not a good practice.
124

124

00:09:59,800  -->  00:10:04,370
And Java 9 doesn't actually allow these cyclic module dependencies.
125

125

00:10:04,410  -->  00:10:08,800
Now problem is that our current project won't compile and we can't run it yet.
126

126

00:10:09,160  -->  00:10:12,640
Now one way to solve this issue is to use transitive dependencies.
127

127

00:10:12,820  -->  00:10:16,570
But we're going to be talking more about these transitive dependencies later, so we won't get into
128

128

00:10:16,570  -->  00:10:18,350
too much detail about that now.
129

129

00:10:18,670  -->  00:10:25,360
But the goal now to get around this is to actually move the UI package to the UI module and the process
130

130

00:10:25,360  -->  00:10:28,120
of doing that should resolve some of these other problems.
131

131

00:10:28,210  -->  00:10:30,780
So let's end this video here and in the next one
132

132

00:10:30,780  -->  00:10:37,130
we'll do just that, we'll move the UI package currently in the commons module to its own new UI module.
133

133

00:10:37,400  -->  00:10:42,270
And well actually, you will be doing that because the next video I'm going to set that has a challenge for you.
134

134

00:10:42,330  -->  00:10:43,710
See you in the next video.
