1
1

00:00:05,660  -->  00:00:09,670
so at the end of the previous video I
mentioned that some event handlers can
2

2

00:00:09,670  -->  00:00:14,900
take parameters so if you wanted to do that we
can actually add an action even
3

3

00:00:14,900  -->  00:00:19,290
parameter to our existing event handle methods so lets go and do that and see how that works
4

4

00:00:21,020  -->  00:00:28,580
so I'm just gonna add them in and I'm gonna call it action event which is the name of the class we are going to be using....
5

5

00:00:28,580  -->  00:00:38,860
...now the reason we might want to do this so I just accept
that import the reason why we
6

6

00:00:38,860  -->  00:00:43,920
might want to do this is we might want to use lets say the same event handler for more than one control
7

7

00:00:43,920  -->  00:00:48,110
and if we're going to do that we need to
know which control the user interacted
8

8

00:00:48,110  -->  00:00:53,040
with so if we add this parameters to a method
and then called the get source method we can
9

9

00:00:53,040  -->  00:00:59,310
actually figure out which control was
actually used so it makes our code
10

10

00:00:59,310  -->  00:01:04,340
more concise as we don't certainly have
to create an event handler for every
11

11

00:01:04,340  -->  00:01:09,980
each and every control so lets look at doing that so I've added the action even as a parameter and
12

12

00:01:09,980  -->  00:01:14,670
to actually use it we can just type in something
just to get some information from that
13

13

00:01:14,670  -->  00:01:24,550
action events so I could do something like.....
14

14

00:01:24,550  -->  00:01:30,090
.....
15

15

00:01:30,090  -->  00:01:34,810
which will tell us ultimately which
control was actually pressed
16

16

00:01:34,810  -->  00:01:39,600
the button so if we do that and run it
17

17

00:01:43,890  -->  00:01:53,150
and you can see the following button was pressed button say hello
18

18

00:01:53,150  -->  00:01:57,730
and that has give us some information about the button or in fact that was a button the style class tells us
19

19

00:01:57,730  -->  00:01:58,890
that its a button and its like
20

20

00:01:58,890  -->  00:02:03,190
the standard toString method here that's
been used and that's just meant to be
21

21

00:02:03,190  -->  00:02:06,490
like a memory location where that's
stored in memory that it should change each time
22

22

00:02:06,490  -->  00:02:19,680
just to confirm that if we run it again
notice how its a completely different memory location so
23

23

00:02:19,680  -->  00:02:23,100
that's working for one button and we can use
that to figure out which button
24

24

00:02:23,100  -->  00:02:30,330
ultimately this coming from and if you remember
the say hello go back to our fxml
25

25

00:02:30,330  -->  00:02:34,290
the text = say hello so it was using that to determine
or to show us which button it actually
26

26

00:02:34,290  -->  00:02:42,200
referring to that's because its using the standard toString method from the get source
27

27

00:02:42,200  -->  00:02:46,830
which returns an objects we are actually just
getting the toString representation of
28

28

00:02:46,830  -->  00:02:52,580
what's been returned from e.getSource so
let's actually add a second button just
29

29

00:02:52,580  -->  00:02:58,860
to be able to see how this works in
practice so back into our fxml and add
30

30

00:02:58,860  -->  00:03:10,130
the second button......
31

31

00:03:10,130  -->  00:03:13,500
....
32

32

00:03:14,960  -->  00:03:21,700
.....
33

33

00:03:21,700  -->  00:03:29,500
....
34

34

00:03:29,500  -->  00:03:30,420
.....
35

35

00:03:30,420  -->  00:03:35,050
.....and actually lets add an ID to that as well what we are gonna do is lets
36

36

00:03:35,050  -->  00:03:39,940
change this code around a little bit now so I've got
an ID at the moment for the text field
37

37

00:03:39,940  -->  00:03:44,290
but we haven't actually got ID's defined for the buttons so lets also do that
38

38

00:03:44,290  -->  00:03:51,540
so we can start using those as well so we are gonna put....
39

39

00:03:51,540  -->  00:03:54,340
.....
40

40

00:03:54,340  -->  00:04:02,020
....
41

41

00:04:02,020  -->  00:04:09,750
...so lets go back now
42

42

00:04:09,750  -->  00:04:15,610
and adjust the controller code for
our event handler and we're going to put another field here we
43

43

00:04:15,610  -->  00:04:23,690
got name field we also going to add a hello
button and I buy button so......
44

44

00:04:23,690  -->  00:04:32,150
.....
45

45

00:04:35,570  -->  00:04:47,340
.....bearing in mind this have to be an exact
46

46

00:04:47,340  -->  00:04:52,610
match between what's we've assigned here the name here hello button and buy button to what is in the fxml
47

47

00:04:52,610  -->  00:04:59,870
has to be hello button and buy button like so and next is to
change the code a little bit now so
48

48

00:04:59,870  -->  00:05:04,420
that we can actually bit smarter in what
we're doing so I'm gonna change this and
49

49

00:05:04,420  -->  00:05:11,070
delete that for now and change this to....
50

50

00:05:11,070  -->  00:05:19,310
.....if we have got
the hello button in other words the event
51

51

00:05:19,310  -->  00:05:26,430
handler has been invoked for the
hello button we are going to print....
52

52

00:05:26,430  -->  00:05:46,010
...and if
53

53

00:05:46,010  -->  00:05:49,010
that's the case we need to print out....
54

54

00:05:50,440  -->  00:05:58,030
...so you now see we've got one method that is handling the
55

55

00:05:58,030  -->  00:06:02,890
events or the event handler for two
buttons now and just to confirm this
56

56

00:06:02,890  -->  00:06:08,680
works I can type Tim.....
57

57

00:06:10,260  -->  00:06:16,970
say hello we got hello tim appearing in the bottom of the screen
and click on say bye bye time so you can see
58

58

00:06:16,970  -->  00:06:21,250
that's working as well now we could
have just created another event handler
59

59

00:06:21,250  -->  00:06:26,250
and associated it with a buy button and in
this case probably would have made more
60

60

00:06:26,250  -->  00:06:30,470
sense but I just wanted to show you this
technique how it can be useful depending on the
61

61

00:06:30,470  -->  00:06:35,760
functionality that you are trying to achieve to have one event handler
handling many controls and not just the one method
62

62

00:06:35,760  -->  00:06:41,370
if we have a really long event handler and most of the code would be duplicated if
63

63

00:06:41,370  -->  00:06:45,570
we were to add a similar event handler to the same
type of control and obviously reusing
64

64

00:06:45,570  -->  00:06:49,690
the same hander is an option and it's
probably a good way to go to reduce the
65

65

00:06:49,690  -->  00:06:54,700
amount of code duplication and we could
also assign different handler and put the common
66

66

00:06:54,700  -->  00:06:56,310
code into another method
67

67

00:06:56,310  -->  00:07:01,130
and have both event handlers call that method the best
option would depend on the specific case
68

68

00:07:01,130  -->  00:07:05,280
on what you're trying to actually achieve
and just to be clear you can see that on
69

69

00:07:05,280  -->  00:07:10,380
line 18 and on line 20 we are using the .equals for the .getSource to
70

70

00:07:10,380  -->  00:07:14,230
actually figure out whether we're
actually working with the hello button or
71

71

00:07:14,230  -->  00:07:18,960
the buy button and that is a pretty cool bit of
functionality that checks that and that enables us to
72

72

00:07:18,960  -->  00:07:24,230
actually write code that is specific for that
particular control that appears
73

73

00:07:24,230  -->  00:07:29,680
in our layouts so now we know the basics of event
handling just look at some other controls
74

74

00:07:29,680  -->  00:07:34,300
and the events that we may want
to handle in our code so right now we don;t
75

75

00:07:34,300  -->  00:07:39,010
check to see if the user's type anything
into the text field now our application will not crash
76

76

00:07:39,010  -->  00:07:41,150
if we press one of the buttons when the
field is empty
77

77

00:07:41,150  -->  00:07:47,610
just to demonstrate I'll delete that and just say hello, and then nothing
78

78

00:07:47,610  -->  00:07:52,590
and the bye nothing so it doesn't crash if its
empty but let's make sure the field isn't
79

79

00:07:52,590  -->  00:07:57,480
empty now we could do this by adding
code to our event handler if the field is empty
80

80

00:07:57,480  -->  00:08:01,610
we could do nothing or perhaps we could
inform the user by displaying an error message
81

81

00:08:02,470  -->  00:08:05,590
but its better to prevent the user from doing
something that they shouldn't and to
82

82

00:08:05,590  -->  00:08:08,680
verify user input and report an error
83

83

00:08:08,680  -->  00:08:13,250
so in our case it's better for us to disable the
buttons when the field is empty and only
84

84

00:08:13,250  -->  00:08:17,400
enable the buttons when something has actually been
type into the field that way we can be
85

85

00:08:17,400  -->  00:08:21,960
sure that when our event handler is called the field isn't empty and the user won't do
86

86

00:08:21,960  -->  00:08:26,890
something only to be told they can't do it until they've done something else if that makes sense in other words
87

87

00:08:26,890  -->  00:08:29,890
preventing the user from making
mistakes in the first place will result
88

88

00:08:29,890  -->  00:08:35,020
in a much better experience for users now
when we first run the application we
89

89

00:08:35,020  -->  00:08:38,370
actually want our buttons to be disabled
because we know that the field will
90

90

00:08:38,370  -->  00:08:42,390
initially be empty the text field and when buttons are disabled they won't
91

91

00:08:42,390  -->  00:08:46,040
respond to user input and their
appearance will be different so that the
92

92

00:08:46,040  -->  00:08:50,410
user knows the buttons won't do anything
now when the user types something into the
93

93

00:08:50,410  -->  00:08:54,360
text field of course we want to enable
the buttons at that point so this means
94

94

00:08:54,360  -->  00:08:57,690
we want to be be notified whenever a
character is type into the text field
95

95

00:08:57,690  -->  00:09:01,650
in can you guess what we want to do here
we want to listen for every time a
96

96

00:09:01,650  -->  00:09:05,570
character is typed into a text field
and run an event handler when that
97

97

00:09:05,570  -->  00:09:09,790
happens so first let's write our event
handlers so what we are going to do is we're going
98

98

00:09:09,790  -->  00:09:15,010
to listen for the on keypress event so will
call our event handler handle
99

99

00:09:15,010  -->  00:09:21,220
key released lets close that down so again we are gonna
listen for the on key realeased event
100

100

00:09:21,220  -->  00:09:30,080
and write a handler for that so I'm gonna close it down and making sure I am at controller.java lets write a handler so.....
101

101

00:09:31,070  -->  00:09:43,250
..so how are we going to go about this well firstly lets get
102

102

00:09:43,250  -->  00:09:54,600
the contents so its gonna be string text equals
name field.gettext then we put....
103

103

00:09:54,600  -->  00:10:02,820
.....
104

104

00:10:06,120  -->  00:10:22,300
.....so as you can see we
105

105

00:10:22,300  -->  00:10:27,150
can call the is empty method to actually
check whether its empty or not and
106

106

00:10:27,150  -->  00:10:31,090
that's should have been a proper or their and
107

107

00:10:31,940  -->  00:10:36,360
we also using .trim as well so we are basically
ignoring anyone white spaces that's why we're
108

108

00:10:36,360  -->  00:10:41,210
doing that additional tests so if either of those is true in other words it comes
109

109

00:10:41,210  -->  00:10:42,880
back empty in either case
110

110

00:10:42,880  -->  00:10:48,100
we are going to disable the buttons accordingly otherwise if its set to
false which means it's not empty
111

111

00:10:48,100  -->  00:10:54,130
disabled buttons is gonna be set basically
set to false and that means that when we
112

112

00:10:54,130  -->  00:10:59,650
are the disable is going to be false which effectively means it is going to enable it for us and this may seem
113

113

00:10:59,650  -->  00:11:03,570
inefficient but we have to check every
time the user types a character into the
114

114

00:11:03,570  -->  00:11:09,320
field we could also accept a key event
parameter and that would tell us which key
115

115

00:11:09,320  -->  00:11:13,070
was typed into the field but we don't
really need to know in this case which
116

116

00:11:13,070  -->  00:11:18,990
key was we only care about whether the field
is empty or not and I just need to annotate
117

117

00:11:18,990  -->  00:11:26,500
that.....so that's gonna handle
that for now but we also need to disable
118

118

00:11:26,500  -->  00:11:31,120
the buttons when the application first
runs so what I'm going to do add a initialize
119

119

00:11:31,120  -->  00:11:36,420
method to our controller now the JavaFX
runtime calls this method when it's
120

120

00:11:36,420  -->  00:11:40,860
initializing the UI and the method can't
have any parameters and it must be public
121

121

00:11:40,860  -->  00:11:46,330
and will also have to annotate it with
the @fxml
122

122

00:11:46,330  -->  00:11:58,720
annotation so I'm gonna put that at the top....
123

123

00:12:00,610  -->  00:12:05,290
and the actual code will be quite simple its going to just be.....
124

124

00:12:05,290  -->  00:12:12,310
...so in other words we do want to
125

125

00:12:12,310  -->  00:12:15,430
enable it we do want to disable it I should say the buy button...
126

126

00:12:16,230  -->  00:12:23,990
...so again that is going to be
called automatically our method when the
127

127

00:12:23,990  -->  00:12:29,430
our application is being
initialized so the final step we now
128

128

00:12:29,430  -->  00:12:35,200
need to do is to basically associate the
event handler that we just wrote on line 32
129

129

00:12:35,200  -->  00:12:42,750
to our text field and the fxml so lets do that....
130

130

00:12:42,750  -->  00:12:46,930
....
131

131

00:12:46,930  -->  00:12:51,690
..so this is after a key is pressed but when it's actually released
132

132

00:12:51,690  -->  00:13:03,400
when you take your fingers off the key we want to call....and run it again to check if it works
133

133

00:13:03,400  -->  00:13:08,460
you can see the buttons are correctly disabled
initially and when we type something
134

134

00:13:08,460  -->  00:13:13,840
notice how they actually got enabled so you can see our code and our event handlers is actually
135

135

00:13:13,840  -->  00:13:18,560
working nicely but if we then backspace
to delete the T what actually happens
136

136

00:13:18,560  -->  00:13:22,570
you can see that the buttons do
disable so again that's working well
137

137

00:13:22,570  -->  00:13:26,520
but what happens if we type a blank into the text field in other words space so
138

138

00:13:26,520  -->  00:13:31,330
we click on a space or nothing actually
works here correctly and that's because
139

139

00:13:31,330  -->  00:13:36,160
I've got that second test in play but I were to changed that code and come
140

140

00:13:36,160  -->  00:13:38,260
back down here
141

141

00:13:38,260  -->  00:13:43,300
changes this here and comment that out temporarily so we are now testing to
142

142

00:13:43,300  -->  00:13:46,160
see whether the field is empty
143

143

00:13:46,160  -->  00:13:53,570
click on that run it again put a T in there if that works press delete and its goes away and if I know press space
144

144

00:13:53,570  -->  00:13:58,650
notice how now its now enabled again so in other
words it's not until in this
145

145

00:13:58,650  -->  00:14:02,500
particular case what we want to do is
make sure that a space isn't entered isn't
146

146

00:14:02,500  -->  00:14:06,010
valid effectively that's what the
second method call is doing is basically
147

147

00:14:06,010  -->  00:14:09,560
trimming results getting rid of any
white space which obviously includes spaces
148

148

00:14:09,560  -->  00:14:11,750
and only then
149

149

00:14:11,750  -->  00:14:20,950
enabling that to run so again we check that T, Delete press space
150

150

00:14:21,470  -->  00:14:29,770
no matter how many spaces are press its considered as white space and it won't enable which is the functionality that we are looking for here
151

151

00:14:29,770  -->  00:14:32,550
ok so I'm gonna leave the video here now in
the next video we're going to add a
152

152

00:14:32,550  -->  00:14:35,990
checkbox and start looking at
creating some event handlers to cater
153

153

00:14:35,990  -->  00:14:37,480
for that see you in the next video
