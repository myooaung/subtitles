1
1

00:00:05,420  -->  00:00:08,530
In the previous video we
started work on interfaces and
2

2

00:00:08,530  -->  00:00:11,840
we came up with a base
example of a desk phone.
3

3

00:00:11,840  -->  00:00:15,130
And we obviously implemented
the interface, as you can see in the code.
4

4

00:00:16,600  -->  00:00:20,530
Pretty basic, so what we're going
to do is continue on with this now.
5

5

00:00:20,530  -->  00:00:23,850
I'm actually gonna come up with another
example, and we're gonna create a mobile
6

6

00:00:23,850  -->  00:00:27,750
phone class that also implements
the ITelephone interface.
7

7

00:00:27,750  -->  00:00:31,730
So I'm going to create, new,
java class, and do mobile phone.
8

8

00:00:35,030  -->  00:00:38,090
And what I'm going to do is actually
grab some of the desktop phone code.
9

9

00:00:38,090  -->  00:00:41,430
I'm gonna grab it from that point
onwards and copy that there and
10

10

00:00:41,430  -->  00:00:43,240
then just paste that in just
to save us a bit of time.
11

11

00:00:43,240  -->  00:00:46,130
You know paste it in like that.
12

12

00:00:46,130  -->  00:00:48,940
So I've essentially at this stage
got the exact same functionality.
13

13

00:00:48,940  -->  00:00:51,980
We need to just make a few little
changes so that it obviously works.
14

14

00:00:51,980  -->  00:00:56,380
So with the mobile phone what we're going
to do is we're going to add another field,
15

15

00:00:56,380  -->  00:00:58,740
we're gonna add a boolean
to see whether it's on,
16

16

00:00:58,740  -->  00:01:00,250
cuz obviously you can
turn a mobile phone on.
17

17

00:01:00,250  -->  00:01:01,440
Generally, you do turn it on or
18

18

00:01:01,440  -->  00:01:04,740
off, as opposed to a desktop phone
would normally be on all the time.
19

19

00:01:04,740  -->  00:01:07,040
So boolean is on.
20

20

00:01:07,040  -->  00:01:08,380
Set that to false, initially.
21

21

00:01:08,380  -->  00:01:09,310
So it's not going to be on.
22

22

00:01:09,310  -->  00:01:14,250
But it In the power on section,
we're gonna set that to isOn = true, and
23

23

00:01:14,250  -->  00:01:17,100
we're gonna change the actual message.
24

24

00:01:17,100  -->  00:01:20,330
The other one actually said no
action taken, but this one,
25

25

00:01:20,330  -->  00:01:25,050
we're gonna set it up, so
it actually says mobile phone powered up.
26

26

00:01:25,050  -->  00:01:28,600
Of course, I gotta change the public
constructor, so we need to do that,
27

27

00:01:28,600  -->  00:01:30,420
obviously, cuz that's
still got the old code.
28

28

00:01:30,420  -->  00:01:32,010
So we're gonna set that up and
29

29

00:01:32,010  -->  00:01:36,690
just make that the mobile phone,
mame instead, like so.
30

30

00:01:36,690  -->  00:01:38,460
We'll actually also look at the dial.
31

31

00:01:38,460  -->  00:01:42,110
And with the dial, we'll set it up so
that it has to actually be on,
32

32

00:01:42,110  -->  00:01:44,860
the phone, before we can actually dial.
33

33

00:01:44,860  -->  00:01:46,480
And if it's not on we're
gonna show a message.
34

34

00:01:46,480  -->  00:01:52,600
So we're gonna put if is on, now ringing.
35

35

00:01:52,600  -->  00:01:57,120
And we'll change this instead,
of on desk phone to put on mobile phone.
36

36

00:01:57,120  -->  00:01:58,660
Then we'll change that and put an else.
37

37

00:02:01,320  -->  00:02:02,720
Phone is switched off.
38

38

00:02:05,500  -->  00:02:07,370
Like so, so that's for the dial.
39

39

00:02:07,370  -->  00:02:11,090
And we also will change the answer method,
as well.
40

40

00:02:11,090  -->  00:02:13,150
And also we'll change the call phone.
41

41

00:02:13,150  -->  00:02:15,280
So with answer,
the only thing we need to do there,
42

42

00:02:15,280  -->  00:02:17,920
is we'll actually change the message so
it says mobile phone.
43

43

00:02:19,470  -->  00:02:22,540
Mobile phone like so, and
the call phone method.
44

44

00:02:22,540  -->  00:02:23,550
We'll change that.
45

45

00:02:23,550  -->  00:02:25,240
We'll check to see whether
it's our number, but
46

46

00:02:25,240  -->  00:02:30,120
then we'll also check to see whether
it's is on so we'll put and is on.
47

47

00:02:30,120  -->  00:02:32,140
Like so, so it has to both be on and
48

48

00:02:32,140  -->  00:02:34,110
be our phone number in
order to actually call.
49

49

00:02:34,110  -->  00:02:35,130
Now, we can do something else.
50

50

00:02:35,130  -->  00:02:38,700
We can maybe put melody playing, so it's
obviously a different type of ring tone
51

51

00:02:38,700  -->  00:02:42,020
because it's a mobile phone and
I think that should actually be it.
52

52

00:02:42,020  -->  00:02:45,520
So at this point, then,
we can go back to our main class and
53

53

00:02:45,520  -->  00:02:47,930
our main method, and
we can do something similar.
54

54

00:02:47,930  -->  00:02:49,650
So we can actually do
something we did before.
55

55

00:02:49,650  -->  00:02:54,740
We can set this up now to put Tim's phone,
the same variable,
56

56

00:02:54,740  -->  00:02:58,680
equals new mobile phone 24565, like so.
57

57

00:02:59,740  -->  00:03:05,890
We can initially try it with
timsPhone.call, and for the number,
58

58

00:03:05,890  -->  00:03:11,770
24565 to make sure it's valid,
and timsPhone.answer.
59

59

00:03:11,770  -->  00:03:18,310
Now, I purposely have left out a line
here, which would be timsPhone.powerOn.
60

60

00:03:18,310  -->  00:03:23,160
Leaving that out [INAUDIBLE],
leaving that out for the moment cuz
61

61

00:03:23,160  -->  00:03:26,980
we should be able to see what happens
if we haven't actually got style.
62

62

00:03:26,980  -->  00:03:27,880
I'm gonna run this.
63

63

00:03:32,380  -->  00:03:36,820
And ring, ring no action taken this fine
does not have those initial messages.
64

64

00:03:36,820  -->  00:03:40,610
And what happened with was there
with the call message, call phone.
65

65

00:03:40,610  -->  00:03:42,950
[INAUDIBLE] was false but
we didn't actually print a message, so
66

66

00:03:42,950  -->  00:03:44,770
if we go back to mobile phone.
67

67

00:03:44,770  -->  00:03:45,620
In the call phone,
68

68

00:03:45,620  -->  00:03:49,390
we actually had this successfully
testing to see whether the phone was on.
69

69

00:03:49,390  -->  00:03:52,250
But we didn't actually have a message,
so we'll change it there and
70

70

00:03:52,250  -->  00:03:57,310
we'll put message also to
indicate that mobile phone.
71

71

00:03:59,030  -->  00:04:01,550
Not on or number different.
72

72

00:04:02,890  -->  00:04:04,460
So if now you go back and run that again,
73

73

00:04:04,460  -->  00:04:08,270
we can actually see that message from
the mobile class, mobile phone class.
74

74

00:04:08,270  -->  00:04:10,320
Mobile phone not on or number different.
75

75

00:04:10,320  -->  00:04:14,400
Now the other point I want to make here
is if we go back to the main class again.
76

76

00:04:14,400  -->  00:04:18,220
Notice how I was able to set
a new instance of mobile phone
77

77

00:04:18,220  -->  00:04:21,270
as a completely different class,
but it still worked.
78

78

00:04:21,270  -->  00:04:25,220
Now, normally, if we had come up here and
we actually had assigned that
79

79

00:04:25,220  -->  00:04:28,870
to be the type of desk phone, then this
reassignment wouldn't have worked.
80

80

00:04:28,870  -->  00:04:33,160
So if we hadn't done that, desk phone
we'll actually get an error here and
81

81

00:04:33,160  -->  00:04:34,730
that's because of incompatible types.
82

82

00:04:34,730  -->  00:04:36,700
As you can see one is
obviously desk phone class,
83

83

00:04:36,700  -->  00:04:38,410
the other one is a mobile phone class.
84

84

00:04:38,410  -->  00:04:41,410
But because we didn't do that,
we actually changed it to so
85

85

00:04:41,410  -->  00:04:45,210
the top was the ITelephone interface
we're able to change it, and
86

86

00:04:45,210  -->  00:04:49,040
to actually create a new instance of
what is essentially a different object,
87

87

00:04:49,040  -->  00:04:51,670
different class, and it still
actually works, which is pretty cool.
88

88

00:04:51,670  -->  00:04:54,890
And that's because they both
implement the same interface.
89

89

00:04:54,890  -->  00:04:58,010
And again we didn't actually put,
we didn't call the power method and
90

90

00:04:58,010  -->  00:05:01,560
so correctly come up with synthepone
mobile phone number was not on, while
91

91

00:05:01,560  -->  00:05:06,590
the number was different, so if I add that
code back like so, if we run it again
92

92

00:05:08,730  -->  00:05:12,170
melody ring answering the mobile phone so
that's all working nicely as you can see.
93

93

00:05:12,170  -->  00:05:16,600
And again just to be clear, it's a good
idea to actually put the fact that's in
94

94

00:05:16,600  -->  00:05:20,390
interface by putting the capital I
before the name of the interface,
95

95

00:05:20,390  -->  00:05:24,900
and that really does make it be abundantly
clear that this is actually an interface.
96

96

00:05:24,900  -->  00:05:28,060
But the other thing is to point out,
if you actually have a look over
97

97

00:05:28,060  -->  00:05:31,740
here in the left hand side, and I'll just
zoom it up a little bit so you can see it,
98

98

00:05:31,740  -->  00:05:36,430
you notice how the other classes
have got a C with a blue circle, but
99

99

00:05:36,430  -->  00:05:39,000
the interface is in green with an I.
100

100

00:05:39,000  -->  00:05:41,850
So that does actually tell you that
it's actually an interface at a glance.
101

101

00:05:41,850  -->  00:05:45,000
You can see that, so do look out for
those types of things with IntelliJ.
102

102

00:05:45,000  -->  00:05:49,200
Whenever you see some data, some sort of
presentation, like a variable type or
103

103

00:05:49,200  -->  00:05:50,270
some pop-up window or
104

104

00:05:50,270  -->  00:05:53,870
something like that, IntelliJ will often
tell you at a glance what it's for.
105

105

00:05:53,870  -->  00:05:56,680
In this case you can see that
there's an I there for interface.
106

106

00:05:56,680  -->  00:05:59,890
Okay, so moving on now from this example,
what we're gonna do is we're gonna
107

107

00:05:59,890  -->  00:06:04,510
open the code from the playlist which was
in our link challenge from lecture 64.
108

108

00:06:04,510  -->  00:06:08,210
Now that code is available in this video,
so you can go to the resources section of
109

109

00:06:08,210  -->  00:06:10,240
this video and
you can download that source code.
110

110

00:06:10,240  -->  00:06:13,280
That's probably the best place to grab it,
and
111

111

00:06:13,280  -->  00:06:15,170
you do that and unzip and actually run it.
112

112

00:06:15,170  -->  00:06:17,790
And what we're gonna do is we're
gonna actually change a few things.
113

113

00:06:17,790  -->  00:06:20,680
We're going to take a list, instead of
a linked list and just make a few other
114

114

00:06:20,680  -->  00:06:24,320
changes, and show you how easy it is to
actually use the power of interfaces.
115

115

00:06:24,320  -->  00:06:26,250
So I'm gonna actually close this down now.
116

116

00:06:28,000  -->  00:06:28,730
Close Project.
117

117

00:06:30,200  -->  00:06:34,670
And, you can see here,
I've actually created another one.
118

118

00:06:34,670  -->  00:06:36,270
I've got Interfaces.LinkedList.
119

119

00:06:36,270  -->  00:06:38,730
So, this is the Linked List Challenge
that we did recently
120

120

00:06:38,730  -->  00:06:41,530
in the previous section of this course and
what I'm doing now.
121

121

00:06:41,530  -->  00:06:42,650
I just copied, basically,
122

122

00:06:42,650  -->  00:06:46,160
the code out of that into a new
folder called Interfaces.LinkedList.
123

123

00:06:46,160  -->  00:06:47,830
Now I'm just gonna open that up, so
124

124

00:06:47,830  -->  00:06:51,290
that the changes that we make won't affect
that other code in case you're still
125

125

00:06:51,290  -->  00:06:54,880
working on it or you want to have that
you know version of the code there.
126

126

00:06:54,880  -->  00:06:57,340
So, I now go into my programs.
127

127

00:06:57,340  -->  00:06:59,360
Go into interfaces.linklist.
128

128

00:06:59,360  -->  00:07:00,720
I'm just going to choose.
129

129

00:07:00,720  -->  00:07:03,290
I'll go into the link list
challenge sub folder and
130

130

00:07:03,290  -->  00:07:06,000
choose now,
that should open that up for us.
131

131

00:07:06,000  -->  00:07:08,530
And this code again should
be pretty familiar to you,
132

132

00:07:08,530  -->  00:07:10,830
if you've actually been through
the link list challenge.
133

133

00:07:10,830  -->  00:07:13,270
And again if you haven't that's fine,
there's no problems there.
134

134

00:07:13,270  -->  00:07:16,850
Now, the reason I've opened this code up
is just to show you how Java lava is make
135

135

00:07:16,850  -->  00:07:18,400
extensive use of interfaces, and
136

136

00:07:18,400  -->  00:07:20,960
the one that we used recently
is the list interface.
137

137

00:07:20,960  -->  00:07:25,280
So what we're gonna do is go and open the
enter playlist method in the album class,
138

138

00:07:25,280  -->  00:07:27,890
and I want to actually show you how we
can make something make a change and for
139

139

00:07:27,890  -->  00:07:29,490
it not to actually break anything.
140

140

00:07:29,490  -->  00:07:33,310
We're gonna go to our album and what
we're looking for is the add to playlist.
141

141

00:07:33,310  -->  00:07:35,110
The one that's got the track number and
142

142

00:07:35,110  -->  00:07:38,080
also the list now at the moment we've
got link list there as we talked about.
143

143

00:07:38,080  -->  00:07:42,760
Because we're using interfaces,
we can change that to list and
144

144

00:07:42,760  -->  00:07:44,280
it still works quite nicely.
145

145

00:07:44,280  -->  00:07:45,620
It is just asking for imports.
146

146

00:07:45,620  -->  00:07:47,270
I will import that.
147

147

00:07:47,270  -->  00:07:49,310
But you notice how the code
is still compatible.
148

148

00:07:49,310  -->  00:07:52,260
And if you change that a little bit we get
it back down to the main method where it
149

149

00:07:52,260  -->  00:07:53,300
is actually calling this code.
150

150

00:07:53,300  -->  00:07:57,420
And make a change, we can run this code
virtually without changing anything else.
151

151

00:07:57,420  -->  00:08:01,900
And that's because the java lava are
making extensive usage of interfaces and
152

152

00:08:01,900  -->  00:08:04,070
if they weren't doing that we would
find a lot of this [INAUDIBLE].
153

153

00:08:04,070  -->  00:08:06,670
So if we go back to our main method now.
154

154

00:08:06,670  -->  00:08:11,280
The main method actually what we want to
change is the print list first because
155

155

00:08:11,280  -->  00:08:13,250
that's got a hard coded
link list in there.
156

156

00:08:13,250  -->  00:08:15,860
So we're just gonna make
that just a generic list.
157

157

00:08:15,860  -->  00:08:17,020
And also the play method.
158

158

00:08:19,970  -->  00:08:23,360
That's also using a link list we change
that so it's just a list as well.
159

159

00:08:23,360  -->  00:08:26,790
And also, we need to change the
declaration of the playlist to be a list
160

160

00:08:26,790  -->  00:08:27,970
instead of a linked list.
161

161

00:08:27,970  -->  00:08:30,930
Make that just a list, like so.
162

162

00:08:30,930  -->  00:08:34,320
And lastly, if we go to the playlist,
where we actually set up the playlist,
163

163

00:08:35,910  -->  00:08:37,730
that's this one here,
we're using a linked list there, but
164

164

00:08:37,730  -->  00:08:39,400
we could actually literally
just change that as well,
165

165

00:08:39,400  -->  00:08:43,750
we could change that to a list, list.
166

166

00:08:43,750  -->  00:08:46,980
So we changed the entire type, actually
that one need to be array list, so
167

167

00:08:46,980  -->  00:08:51,360
we're changing it from an array
list because it was a link list.
168

168

00:08:51,360  -->  00:08:54,340
If we do that, there is one thing that
didn't change which was in album,
169

169

00:08:54,340  -->  00:08:55,660
we go back there and have a look at that.
170

170

00:08:55,660  -->  00:08:58,120
We need to change its preferences
where which was a link list,
171

171

00:08:58,120  -->  00:09:01,760
change that to list as well cuz we had an
either loaded method for active playlist.
172

172

00:09:01,760  -->  00:09:03,600
Go back there again and
the error should have disappeared.
173

173

00:09:03,600  -->  00:09:07,190
And you can see we've done all of that and
it's still going to work.
174

174

00:09:07,190  -->  00:09:12,870
And that's because the Java libraries
use interfaces extensively, so
175

175

00:09:12,870  -->  00:09:16,600
we can do something like play next song,
I'm playing Holy Man.
176

176

00:09:16,600  -->  00:09:23,740
To replay the count song, to go to
next song, next song, previous song.
177

177

00:09:23,740  -->  00:09:27,600
The bottom line here,
the thing I wanted to point out is,
178

178

00:09:27,600  -->  00:09:32,430
the java lava do make extensive
usage of interfaces and
179

179

00:09:32,430  -->  00:09:37,200
because they've done that we're able to
change out the entire implementation.
180

180

00:09:37,200  -->  00:09:40,920
From what was a linked list to an array
list very simply, and we've actually just
181

181

00:09:40,920  -->  00:09:44,020
done that with a minimal amount of
changes, which is pretty awesome.
182

182

00:09:44,020  -->  00:09:46,550
So, this is one of the reasons why
you'd want to be using an interface.
183

183

00:09:46,550  -->  00:09:52,150
It just makes it a heck of a lot easier
to make your code work in this case.
184

184

00:09:52,150  -->  00:09:53,870
The Java libraries have set it up so,
185

185

00:09:53,870  -->  00:09:56,180
you can use array lists,
linked lists and so forth.
186

186

00:09:56,180  -->  00:09:57,840
And, make those really interchangeable.
187

187

00:09:57,840  -->  00:10:00,680
You can even use another type and
the reason that this works,
188

188

00:10:00,680  -->  00:10:03,650
is that the contract that's
defined by the list interface.
189

189

00:10:03,650  -->  00:10:05,960
So, just to be clear, if we go into
list interface and have a look.
190

190

00:10:07,610  -->  00:10:10,890
And notice how list is a public
interface because of that contract
191

191

00:10:10,890  -->  00:10:15,240
with these methods that are actually
in the list [INAUDIBLE] or
192

192

00:10:15,240  -->  00:10:17,580
being specified in the interface.
193

193

00:10:17,580  -->  00:10:21,250
So, as long as you create a class
that implements these methods and
194

194

00:10:21,250  -->  00:10:24,510
actually creates real methods,
creates the code in other words
195

195

00:10:24,510  -->  00:10:27,530
that create that functionality,
things are gonna actually work fine and
196

196

00:10:27,530  -->  00:10:29,660
we're able to actually
see in this example,
197

197

00:10:29,660  -->  00:10:33,450
we were quite easily able to change
this to make this a generic list.
198

198

00:10:33,450  -->  00:10:36,320
But then, in the main method
where we actually set it up,
199

199

00:10:36,320  -->  00:10:37,760
we created an array list.
200

200

00:10:37,760  -->  00:10:40,720
Or, I think, that was already set for an
array list, but we made this generic here.
201

201

00:10:40,720  -->  00:10:42,810
But, the playlist,
which was originally a linked list,
202

202

00:10:42,810  -->  00:10:44,530
we changed that to an array list.
203

203

00:10:44,530  -->  00:10:48,560
And because the array list which
implements the base list interface.
204

204

00:10:48,560  -->  00:10:51,080
It's still using and
still supporting all the methods,
205

205

00:10:51,080  -->  00:10:54,090
it has to have implemented those methods.
206

206

00:10:54,090  -->  00:10:57,420
Everything still works nicely, so
that's really the power of an interface.
207

207

00:10:57,420  -->  00:11:00,510
And if Java are using that
a lot internally in their code,
208

208

00:11:00,510  -->  00:11:03,390
you know that it's a good way to
actually code in those scenarios.
209

209

00:11:03,390  -->  00:11:06,410
Now just to give you another example,
you could use another type of list here.
210

210

00:11:06,410  -->  00:11:08,340
We could change this,
instead, to a vector.
211

211

00:11:09,500  -->  00:11:13,780
Vector is another type of list and
we do that and the code still works and
212

212

00:11:13,780  -->  00:11:14,690
it's not broken.
213

213

00:11:14,690  -->  00:11:18,810
So it's very normal when you're
creating lists in your code
214

214

00:11:18,810  -->  00:11:22,710
to define the basic type of type list.
215

215

00:11:22,710  -->  00:11:27,290
Then when you actually create, or
you actually initialize the variable
216

216

00:11:27,290  -->  00:11:29,630
that's when you actually
specify the actual type.
217

217

00:11:29,630  -->  00:11:32,410
In this case, a vector or
a linked list or an array list.
218

218

00:11:32,410  -->  00:11:34,310
So, it's probably a good
habit to get into,
219

219

00:11:34,310  -->  00:11:38,810
just to use just a generic list
as the type as I mentioned there.
220

220

00:11:38,810  -->  00:11:42,410
And then, you just specify the actual
type that you want in your program and
221

221

00:11:42,410  -->  00:11:43,730
you initialize it.
222

222

00:11:43,730  -->  00:11:47,430
In terms of actually deciding
whether to implement an interface or
223

223

00:11:47,430  -->  00:11:49,330
inherit from a base class.
224

224

00:11:49,330  -->  00:11:51,900
Sometimes, it can be a little bit
difficult to decide which one to do.
225

225

00:11:51,900  -->  00:11:55,140
In other words, Should you create
a class and extend from that?
226

226

00:11:55,140  -->  00:11:58,340
In other words, inherit from that class or
should you use an interface?
227

227

00:11:58,340  -->  00:12:00,310
So that one example would have been,
228

228

00:12:00,310  -->  00:12:02,940
that we could have had in
our example the telephone.
229

229

00:12:02,940  -->  00:12:07,180
You could have had that class in
extended it to create a desk phone or
230

230

00:12:07,180  -->  00:12:08,700
mobile phone class or both of them.
231

231

00:12:08,700  -->  00:12:12,180
But in this particular case, it probably
wouldn't have been a good approach.
232

232

00:12:12,180  -->  00:12:16,300
So the way to decide that generally,
is to really consider the relationship
233

233

00:12:16,300  -->  00:12:20,200
of the final class to the object
that it's extending or implementing.
234

234

00:12:20,200  -->  00:12:25,110
So in other words, with our telephone
example both devices have a telephone so
235

235

00:12:25,110  -->  00:12:26,870
the desk phone doesn't have anything else.
236

236

00:12:26,870  -->  00:12:28,950
But the mobile phone is not just a phone,
237

237

00:12:28,950  -->  00:12:32,050
despite it's name because of course,
a modern mobile phone
238

238

00:12:32,050  -->  00:12:35,500
has more computing power than a desktop
computer of only 15 years ago.
239

239

00:12:35,500  -->  00:12:38,170
I mean,
really can do far more than make or
240

240

00:12:38,170  -->  00:12:41,090
receive phone calls, so
it's more accurate to say
241

241

00:12:41,090  -->  00:12:45,640
that a mobile phone is actually
a computer that has a phone interface.
242

242

00:12:45,640  -->  00:12:48,720
So you can say that a desk
phone can telephone and
243

243

00:12:48,720  -->  00:12:52,480
a mobile phone can telephone, which
indicates that they should both implement
244

244

00:12:52,480  -->  00:12:57,600
a phone interface rather than extending
a phone class if that makes sense.
245

245

00:12:57,600  -->  00:12:59,110
The other thing that's
important to understand,
246

246

00:12:59,110  -->  00:13:03,780
is that a class can only inherit from
one's super class, unlike other languages,
247

247

00:13:03,780  -->  00:13:06,710
like c++ for arguments sake,
where you can do that.
248

248

00:13:06,710  -->  00:13:09,910
But you can actually implement
from many interfaces.
249

249

00:13:09,910  -->  00:13:11,630
This is something that's
actually quite powerful.
250

250

00:13:11,630  -->  00:13:14,050
So, you can actually implement
from many interfaces.
251

251

00:13:14,050  -->  00:13:17,620
As I mentioned, some languages allow
moddable inheritance by allowing,
252

252

00:13:17,620  -->  00:13:21,840
I should say, a class to inherit
from several base classes.
253

253

00:13:21,840  -->  00:13:24,250
But, in Java, multiple inheritance
254

254

00:13:24,250  -->  00:13:27,280
is only available by
implementing several interfaces.
255

255

00:13:27,280  -->  00:13:31,430
If you want more details than this,
consider the animal class that we created
256

256

00:13:31,430  -->  00:13:33,610
on the lectures in
the inheritance section.
257

257

00:13:33,610  -->  00:13:35,560
Though not all animals can walk, so
258

258

00:13:35,560  -->  00:13:38,750
we cannot put a walk method
in the animal base class.
259

259

00:13:38,750  -->  00:13:41,100
But we could define, say,
a walk interface, though.
260

260

00:13:41,100  -->  00:13:41,760
So if that was the case,
261

261

00:13:41,760  -->  00:13:46,170
we could then consider birds, they can
walk and most of them can also fly.
262

262

00:13:46,170  -->  00:13:48,800
So we can create a fly interface, as well.
263

263

00:13:48,800  -->  00:13:51,980
A dog would extend animal and
implement walk.
264

264

00:13:51,980  -->  00:13:56,560
A bird would extend animal and implement
both walk and fly if that makes sense.
265

265

00:13:56,560  -->  00:14:00,290
So in this case, a dog is an animal and
a bird is an animal.
266

266

00:14:00,290  -->  00:14:03,030
So they both inherit
from the animal class.
267

267

00:14:03,030  -->  00:14:05,840
But a dog can walk so it implements walk.
268

268

00:14:05,840  -->  00:14:10,760
And a bird can both walk and fly so
that would implement from both interfaces.
269

269

00:14:10,760  -->  00:14:13,470
So I hope that's clarified,
there's an important distinction there.
270

270

00:14:13,470  -->  00:14:15,950
And again the way to decide
is to really look at or
271

271

00:14:15,950  -->  00:14:19,580
really consider the relationship
of the final class
272

272

00:14:19,580  -->  00:14:21,890
to the object that you're extending or
implementing.
273

273

00:14:21,890  -->  00:14:24,680
Okay, so I'm gonna end the video here,
in the next video it's time for
274

274

00:14:24,680  -->  00:14:27,000
a challenge so
we'll do a challenge on interfaces.
275

275

00:14:27,000  -->  00:14:28,510
So, I'll see you on that next video.
