WEBVTT
1
1

00:00:05.218  -->  00:00:06.340
<v Instructor>Right so we're gonna have a talk</v>
2

2

00:00:06.340  -->  00:00:08.650
in this video about white space.
3

3

00:00:08.650  -->  00:00:11.250
And I've created a new project as you can see
4

4

00:00:11.250  -->  00:00:12.850
called white space.
5

5

00:00:12.850  -->  00:00:14.130
So I'm going to start with some examples
6

6

00:00:14.130  -->  00:00:17.150
of how java allows you to use single or multiple lines
7

7

00:00:17.150  -->  00:00:20.020
and then we'll discuss white space in a bit more detail.
8

8

00:00:20.020  -->  00:00:23.020
Firstly I'm gonna start with typing some code on line seven.
9

9

00:00:24.000  -->  00:00:26.790
And I'm gonna have to type system out print in,
10

10

00:00:26.790  -->  00:00:29.733
and put this is a nice chunk of text,
11

11

00:00:31.860  -->  00:00:32.750
exclamation mark.
12

12

00:00:32.750  -->  00:00:35.320
So obviously you've seen codes similar to that in the course
13

13

00:00:35.320  -->  00:00:36.820
and no surprises if we run it,
14

14

00:00:38.220  -->  00:00:40.682
we get this is a nice chunk of text.
15

15

00:00:40.682  -->  00:00:42.700
Or we can actually space this over more than one line
16

16

00:00:42.700  -->  00:00:43.810
so lets do that.
17

17

00:00:43.810  -->  00:00:46.510
So I can actually come up and put this is a
18

18

00:00:46.510  -->  00:00:48.460
and I could press enter there,
19

19

00:00:48.460  -->  00:00:49.870
and notice what happened when I did that
20

20

00:00:49.870  -->  00:00:53.190
IntelliJ helpfully has added a right double quote
21

21

00:00:53.190  -->  00:00:55.726
on the end of line seven and a plus,
22

22

00:00:55.726  -->  00:00:56.559
and for another double quote
23

23

00:00:56.559  -->  00:00:58.370
I'm gonna start on the next line
24

24

00:00:58.370  -->  00:00:59.840
to break this text up.
25

25

00:00:59.840  -->  00:01:00.917
And I can come over here for example
26

26

00:01:00.917  -->  00:01:03.080
and do the same thing after the word of,
27

27

00:01:03.080  -->  00:01:05.590
press enter again and the same thing happens.
28

28

00:01:05.590  -->  00:01:08.070
So we've now got what was all on one line,
29

29

00:01:08.070  -->  00:01:09.410
broken down into three lines,
30

30

00:01:09.410  -->  00:01:10.660
and if I run the programme,
31

31

00:01:11.670  -->  00:01:13.710
we still get the identical result.
32

32

00:01:13.710  -->  00:01:15.900
So java's smart enough here to know
33

33

00:01:15.900  -->  00:01:17.723
that for these two lines, lines seven and eight,
34

34

00:01:17.723  -->  00:01:19.580
that there's no semi-colon
35

35

00:01:19.580  -->  00:01:20.880
and therefore it looks collectively
36

36

00:01:20.880  -->  00:01:22.003
at line seven, three, nine
37

37

00:01:22.003  -->  00:01:24.480
there's a semi-colon on line nine so it knows
38

38

00:01:24.480  -->  00:01:25.800
that that's the end of the statement
39

39

00:01:25.800  -->  00:01:29.480
and it treats lines seven and nine as a complete statement,
40

40

00:01:29.480  -->  00:01:32.420
even though it actually spans multiple lines.
41

41

00:01:32.420  -->  00:01:35.760
So this enables you to space out the code
42

42

00:01:35.760  -->  00:01:36.880
to make it more readable.
43

43

00:01:36.880  -->  00:01:39.028
And that can be very useful from a human perspective.
44

44

00:01:39.028  -->  00:01:41.340
So that's a good way of spacing your output
45

45

00:01:41.340  -->  00:01:44.100
if you've got a lot of text to display on the screen.
46

46

00:01:44.100  -->  00:01:45.360
Just to output,
47

47

00:01:45.360  -->  00:01:47.930
this could be a good way of breaking that down.
48

48

00:01:47.930  -->  00:01:49.810
And again you saw that IntelligJ were smart enough
49

49

00:01:49.810  -->  00:01:51.800
to add those set breaks for us
50

50

00:01:51.800  -->  00:01:54.130
where we went to multiple lines as well.
51

51

00:01:54.130  -->  00:01:56.200
So that's just one way to space things
52

52

00:01:56.200  -->  00:01:57.263
but we can do the same for most statements
53

53

00:01:57.263  -->  00:02:00.400
within java as well.
54

54

00:02:00.400  -->  00:02:03.060
So for example, for a declaration statement,
55

55

00:02:03.060  -->  00:02:05.990
we can come down here say on line 11 and type 'int'
56

56

00:02:05.990  -->  00:02:07.900
and I can press enter there.
57

57

00:02:07.900  -->  00:02:10.630
And the next line I can type alien count,
58

58

00:02:10.630  -->  00:02:14.420
being a variable name into decors on the next line
59

59

00:02:14.420  -->  00:02:16.700
and then 20 semi-colon.
60

60

00:02:16.700  -->  00:02:19.780
You can see that as far as IntelligJ's concerned
61

61

00:02:19.780  -->  00:02:21.060
there's no errors showing,
62

62

00:02:21.060  -->  00:02:23.140
and in fact if we run this programme,
63

63

00:02:23.140  -->  00:02:24.880
we won't see any output obviously,
64

64

00:02:24.880  -->  00:02:26.330
but we don't get any errors.
65

65

00:02:26.330  -->  00:02:28.540
So in other words that's perfectly exceptable
66

66

00:02:28.540  -->  00:02:32.210
from java's perspective to space things out as we've done.
67

67

00:02:32.210  -->  00:02:34.760
Now I wouldn't actually suggest you go to that extreme,
68

68

00:02:34.760  -->  00:02:37.330
but technically you can do that if you wish.
69

69

00:02:37.330  -->  00:02:39.930
And in some cases it may make sense to break up your code
70

70

00:02:39.930  -->  00:02:41.770
like this to make it more readable.
71

71

00:02:41.770  -->  00:02:43.870
The point is from Java's perspective,
72

72

00:02:43.870  -->  00:02:46.000
it doesn't care if your code's on one line
73

73

00:02:46.000  -->  00:02:47.430
or on many lines,
74

74

00:02:47.430  -->  00:02:50.410
provided you're not trying to end the line prematurely.
75

75

00:02:50.410  -->  00:02:53.205
So if I try and put a semi-colon
76

76

00:02:53.205  -->  00:02:56.263
prematurely so after the equal sign for example,
77

77

00:02:57.240  -->  00:02:59.220
suddenly in fact we have got an error there.
78

78

00:02:59.220  -->  00:03:01.010
If we hover over it,
79

79

00:03:01.010  -->  00:03:04.450
expression expected and if I hover over the 20,
80

80

00:03:04.450  -->  00:03:06.560
not a statement and the reason is that,
81

81

00:03:06.560  -->  00:03:09.490
because we've added a semi-colon on line 13,
82

82

00:03:09.490  -->  00:03:10.780
we've ended the line.
83

83

00:03:10.780  -->  00:03:12.860
Not a statement we've started a statement
84

84

00:03:12.860  -->  00:03:15.100
with the numbers two and zero,
85

85

00:03:15.100  -->  00:03:17.980
and java's complaining that line 14
86

86

00:03:17.980  -->  00:03:19.570
is not a balanced statement.
87

87

00:03:19.570  -->  00:03:21.820
And we've got an equals sign and a semi-colon.
88

88

00:03:21.820  -->  00:03:23.750
Java's telling us on line 13,
89

89

00:03:23.750  -->  00:03:25.800
there needed to be an expression there.
90

90

00:03:25.800  -->  00:03:27.060
So clearly we've now got an error
91

91

00:03:27.060  -->  00:03:30.100
because we've put a semi-colon in the wrong place.
92

92

00:03:30.100  -->  00:03:32.550
Now if I remove the semi-colon from line 13
93

93

00:03:32.550  -->  00:03:34.443
and instead put it on line 12,
94

94

00:03:35.810  -->  00:03:38.540
we've still got now a valid declaration statement
95

95

00:03:38.540  -->  00:03:41.920
on lines 11 and 12 it expands to the two lines
96

96

00:03:41.920  -->  00:03:44.200
because if you recall from a previous video,
97

97

00:03:44.200  -->  00:03:45.420
when we declare a variable,
98

98

00:03:45.420  -->  00:03:47.570
we don't have to set the initial value.
99

99

00:03:47.570  -->  00:03:50.640
So lines 11 and 12 are valid and we've got no error
100

100

00:03:50.640  -->  00:03:54.030
but on line 13 we've got an error and expect a token.
101

101

00:03:54.030  -->  00:03:56.123
That's because you can't start a java statement
102

102

00:03:56.123  -->  00:03:58.190
with an equal sign.
103

103

00:03:58.190  -->  00:03:59.040
So that's obviously an error.
104

104

00:03:59.040  -->  00:04:01.340
Okay so I'm just gonna undo those changes now.
105

105

00:04:02.681  -->  00:04:04.093
Back to what we were.
106

106

00:04:05.770  -->  00:04:09.053
Running it again behold there's no longer any errors.
107

107

00:04:10.270  -->  00:04:13.750
So okay that's another example of using extra spaces.
108

108

00:04:13.750  -->  00:04:16.110
Well we can go to the other extreme as well if we want.
109

109

00:04:16.110  -->  00:04:19.040
We can actually have multiple statements on the one line.
110

110

00:04:19.040  -->  00:04:20.600
So for example we could type something like
111

111

00:04:20.600  -->  00:04:25.600
'int' planes destroyed is equal to 50 semi-colon
112

112

00:04:26.690  -->  00:04:31.000
planes destroyed minus, minus semi-colon.
113

113

00:04:31.000  -->  00:04:32.520
So as far as java's concerned,
114

114

00:04:32.520  -->  00:04:35.300
this is still valid because it's found a semi-colon,
115

115

00:04:35.300  -->  00:04:37.950
the first semi-colon and a statement is valid
116

116

00:04:37.950  -->  00:04:39.800
because it's looked at the start of the line,
117

117

00:04:39.800  -->  00:04:41.980
up until, including the semi-colon
118

118

00:04:41.980  -->  00:04:43.330
it knows that that's valid.
119

119

00:04:43.330  -->  00:04:45.040
Then moves on, looks at the next part
120

120

00:04:45.040  -->  00:04:47.970
which is planes destroyed minus minus semi-colon.
121

121

00:04:47.970  -->  00:04:49.820
It's figured out that's valid as well.
122

122

00:04:49.820  -->  00:04:52.920
So therefore even though we've only used one line,
123

123

00:04:52.920  -->  00:04:55.550
We've got two statements and that's completely legal
124

124

00:04:55.550  -->  00:04:57.810
sin text in java as well.
125

125

00:04:57.810  -->  00:04:59.940
And obviously that's identical
126

126

00:04:59.940  -->  00:05:02.770
to us having put these on separate lines like that.
127

127

00:05:02.770  -->  00:05:06.450
So either way that would, as far as java's concerned,
128

128

00:05:06.450  -->  00:05:07.283
will still work, we can have that
129

129

00:05:07.283  -->  00:05:08.950
and that will obviously work,
130

130

00:05:08.950  -->  00:05:11.700
and if I go back and undo that change again and run it.
131

131

00:05:14.070  -->  00:05:15.320
That still works as well.
132

132

00:05:16.230  -->  00:05:19.240
Now in general I recommend you don't put multiple statements
133

133

00:05:19.240  -->  00:05:21.290
on the same line because it can get confusing.
134

134

00:05:21.290  -->  00:05:23.640
Now it takes a bit more effort to figure out
135

135

00:05:23.640  -->  00:05:26.060
what's going on compared to when it's
136

136

00:05:26.060  -->  00:05:28.210
spaced out with one statement per line.
137

137

00:05:28.210  -->  00:05:29.960
But the bottom line here is that you can put
138

138

00:05:29.960  -->  00:05:32.560
many things on the same line if you wanna do that
139

139

00:05:32.560  -->  00:05:34.160
and you may see examples when you
140

140

00:05:34.160  -->  00:05:36.250
start your programming career or you start using
141

141

00:05:36.250  -->  00:05:39.210
java commercially of a code written like that.
142

142

00:05:39.210  -->  00:05:40.850
So again we could continue on here.
143

143

00:05:40.850  -->  00:05:44.480
So we could type south there, tab,
144

144

00:05:44.480  -->  00:05:46.590
and notice what happened when I pressed tab
145

145

00:05:46.590  -->  00:05:48.700
IntelliJ is almost hinting to us,
146

146

00:05:48.700  -->  00:05:49.620
saying well you shouldn't really
147

147

00:05:49.620  -->  00:05:51.010
be putting code on the same line,
148

148

00:05:51.010  -->  00:05:52.990
it's started it on the next line.
149

149

00:05:52.990  -->  00:05:55.400
Let's go back anyway and put this back
150

150

00:05:55.400  -->  00:05:57.237
on the previous line just to prove we can do it.
151

151

00:05:57.237  -->  00:06:01.630
And we can put planes destroyed
152

152

00:06:02.540  -->  00:06:07.540
is equal to plus planes destroyed.
153

153

00:06:07.750  -->  00:06:08.750
And we can run that,
154

154

00:06:11.883  -->  00:06:13.520
and you can see we've got the output,
155

155

00:06:13.520  -->  00:06:16.480
planes destroyed equals 49 so clearly that entire line,
156

156

00:06:16.480  -->  00:06:20.030
line 16 has been processed successfully by java.
157

157

00:06:20.030  -->  00:06:21.670
And we've got the output.
158

158

00:06:21.670  -->  00:06:23.760
So we see now that we can space things out
159

159

00:06:23.760  -->  00:06:25.330
and crunch things together,
160

160

00:06:25.330  -->  00:06:27.210
and as far as java's concerned,
161

161

00:06:27.210  -->  00:06:29.967
provided the sin text of what your topic is valid,
162

162

00:06:29.967  -->  00:06:33.342
it's acceptable and it's got no problems executing the code.
163

163

00:06:33.342  -->  00:06:35.660
So whether you add extra space or not,
164

164

00:06:35.660  -->  00:06:37.810
it's all the same to java.
165

165

00:06:37.810  -->  00:06:39.630
And in case you're wondering does it impact
166

166

00:06:39.630  -->  00:06:42.110
on your programme or make it any larger?
167

167

00:06:42.110  -->  00:06:44.640
That's because java looks at your java code
168

168

00:06:44.640  -->  00:06:48.223
and converts it into a format that can run on a JVM.
169

169

00:06:48.223  -->  00:06:51.220
A JVM by the way is a Java Virtual Machine.
170

170

00:06:51.220  -->  00:06:53.160
Now I've got a useful video on YouTube
171

171

00:06:53.160  -->  00:06:55.260
that explains the core differences between
172

172

00:06:56.294  -->  00:06:58.760
a JVK a JRE and a JVM.
173

173

00:06:58.760  -->  00:07:00.690
So click on the link in the resources section
174

174

00:07:00.690  -->  00:07:02.520
of this video to watch that video,
175

175

00:07:02.520  -->  00:07:03.650
and that should help you understand
176

176

00:07:03.650  -->  00:07:05.860
what happens to a java programme you've typed,
177

177

00:07:05.860  -->  00:07:08.640
when the java compiler does it's thing.
178

178

00:07:08.640  -->  00:07:11.630
The bottom line here though is that the use of white space
179

179

00:07:11.630  -->  00:07:14.590
and white space is any space around your java code,
180

180

00:07:14.590  -->  00:07:16.970
is totally ignored by java
181

181

00:07:16.970  -->  00:07:19.220
and is there basically for your benefit only
182

182

00:07:19.220  -->  00:07:20.413
and for other humans.
183

183

00:07:22.440  -->  00:07:25.170
So as mentioned white space is any extra spacing,
184

184

00:07:25.170  -->  00:07:27.130
horizontally or vertically,
185

185

00:07:27.130  -->  00:07:29.200
placed around java source code.
186

186

00:07:29.200  -->  00:07:32.140
It's usually added for human readability purposes.
187

187

00:07:32.140  -->  00:07:35.830
In java as I mentioned, all these extra spaces are ignored.
188

188

00:07:35.830  -->  00:07:37.152
So java treats code like this,
189

189

00:07:37.152  -->  00:07:39.866
and we saw an example where I talked on the screen
190

190

00:07:39.866  -->  00:07:42.750
so basically all that code scrunched up on the one line,
191

191

00:07:42.750  -->  00:07:45.620
is basically identical to this second example.
192

192

00:07:45.620  -->  00:07:47.470
So as you can see in that second example,
193

193

00:07:47.470  -->  00:07:49.510
that code is identical.
194

194

00:07:49.510  -->  00:07:51.840
Identical in a sense that java will treat it the same
195

195

00:07:51.840  -->  00:07:54.430
but obviously from a perspective of understanding it,
196

196

00:07:54.430  -->  00:07:57.380
I'm sure you agree that one is easier to read
197

197

00:07:57.380  -->  00:07:59.540
at a glance than the other.
198

198

00:07:59.540  -->  00:08:01.130
I think you'd agree that the second case
199

199

00:08:01.130  -->  00:08:03.420
is a lot easier to read for us mere mortals.
200

200

00:08:03.420  -->  00:08:05.820
And that's really the main reason why
201

201

00:08:05.820  -->  00:08:07.823
the use of white space is recommended.
202

202

00:08:09.430  -->  00:08:11.500
So white space doesn't take up any more memory
203

203

00:08:11.500  -->  00:08:12.500
in your final programme.
204

204

00:08:12.500  -->  00:08:15.050
And that's because java reads your java code.
205

205

00:08:15.050  -->  00:08:17.290
It strips out all the extra spaces
206

206

00:08:17.290  -->  00:08:19.660
before converting it, your java programme,
207

207

00:08:19.660  -->  00:08:21.460
into an executable programme.
208

208

00:08:21.460  -->  00:08:24.100
Now it does take up more memory in your source file
209

209

00:08:24.100  -->  00:08:26.070
and that's the file that you're editing in IntelliJ
210

210

00:08:26.070  -->  00:08:27.850
or any IDE for that matter,
211

211

00:08:27.850  -->  00:08:31.350
but it has no impact on the final programme that's run,
212

212

00:08:31.350  -->  00:08:33.380
the execution speed of that programme,
213

213

00:08:33.380  -->  00:08:35.880
or the size of that final programme either.
214

214

00:08:35.880  -->  00:08:38.997
So use white space freely but don't go overboard.
215

215

00:08:38.997  -->  00:08:41.493
And that's because it is possible to use too little
216

216

00:08:41.493  -->  00:08:43.440
or too much white space,
217

217

00:08:43.440  -->  00:08:45.330
and that can have a negative impact
218

218

00:08:45.330  -->  00:08:47.863
on the human readability of your code.
219

219

00:08:49.097  -->  00:08:52.200
Code conventions for white space do exist,
220

220

00:08:52.200  -->  00:08:54.057
which you can refer to for more detail.
221

221

00:08:54.057  -->  00:08:56.180
Now the Google Java Style Guide
222

222

00:08:56.180  -->  00:08:57.640
which was seen previously in this course,
223

223

00:08:57.640  -->  00:08:59.410
has a section on white space,
224

224

00:08:59.410  -->  00:09:01.550
so refer to that for more information,
225

225

00:09:01.550  -->  00:09:03.270
and the link to that is again in the resources
226

226

00:09:03.270  -->  00:09:04.990
section of this video.
227

227

00:09:04.990  -->  00:09:06.570
All right so that's white space,
228

228

00:09:06.570  -->  00:09:08.300
let's end the video here and in the next one,
229

229

00:09:08.300  -->  00:09:10.220
we'll talk about Indentation.
230

230

00:09:10.220  -->  00:09:11.520
See you in the next video.
