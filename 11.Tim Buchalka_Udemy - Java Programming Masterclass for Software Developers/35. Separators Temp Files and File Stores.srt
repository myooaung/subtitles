1
1

00:00:05,670  -->  00:00:07,610
- [Tim] All right, so now we
know how to read directories;
2

2

00:00:07,610  -->  00:00:09,510
we know how to use globs to retrieve paths
3

3

00:00:09,510  -->  00:00:11,890
within a directory that
match a given pattern,
4

4

00:00:11,890  -->  00:00:14,870
and also how to write
a filter that allows us
5

5

00:00:14,870  -->  00:00:19,000
to retrieve paths based on
attributes other than the name.
6

6

00:00:19,000  -->  00:00:21,770
Now, before we learn
how to walk a file tree
7

7

00:00:21,770  -->  00:00:24,920
or a directory tree, let's
tie up a few loose ends.
8

8

00:00:24,920  -->  00:00:27,090
Firstly, the file separator.
9

9

00:00:27,090  -->  00:00:29,740
Now, most of you probably
know that on Windows,
10

10

00:00:29,740  -->  00:00:32,630
you use the backslash to
separate a path segment
11

11

00:00:32,630  -->  00:00:36,590
or path segments, but on
Unix and Linux systems,
12

12

00:00:36,590  -->  00:00:38,160
you use the forward slash.
13

13

00:00:38,160  -->  00:00:40,440
When building paths and/or
writing regular expressions
14

14

00:00:40,440  -->  00:00:44,080
or globs, you may need to
know the file separator.
15

15

00:00:44,080  -->  00:00:46,710
Now unless you're only writing
applications for yourself,
16

16

00:00:46,710  -->  00:00:48,140
as you're doing when you're learning,
17

17

00:00:48,140  -->  00:00:50,110
you generally can assume
that you're on a specific
18

18

00:00:50,110  -->  00:00:52,520
operating system when
you're writing Java code.
19

19

00:00:52,520  -->  00:00:53,980
So there are actually two ways
20

20

00:00:53,980  -->  00:00:56,630
to get the separator for the file system.
21

21

00:00:56,630  -->  00:00:59,750
Now, firstly, you can use
the file separator constant,
22

22

00:00:59,750  -->  00:01:02,690
which is still commonly
used, but another alternative
23

23

00:01:02,690  -->  00:01:07,400
is to call the
FileSystems.getDefault.getSeparator
method.
24

24

00:01:07,400  -->  00:01:11,630
So let's do that both ways
and print out the results.
25

25

00:01:11,630  -->  00:01:13,450
So outside of the try-loop,
26

26

00:01:13,450  -->  00:01:16,290
we're going to do String separator
27

27

00:01:17,540  -->  00:01:19,670
is equal to File.separator.
28

28

00:01:19,670  -->  00:01:22,260
That's using the constant.
29

29

00:01:22,260  -->  00:01:26,840
We can print that out,
(separator), and we do separator
30

30

00:01:26,840  -->  00:01:31,010
is equal to
FileSystems.getDefault().getSeparator().
31

31

00:01:34,190  -->  00:01:37,150
We can also print that out.
32

32

00:01:37,150  -->  00:01:39,320
Let's just check that out.
33

33

00:01:42,170  -->  00:01:43,670
Now, you can see, when
I run this on a Mac,
34

34

00:01:43,670  -->  00:01:45,900
I've got the forward slash,
but if you were running this
35

35

00:01:45,900  -->  00:01:48,600
on Windows, you should see the backslash,
36

36

00:01:48,600  -->  00:01:50,230
and if you're running this on Linux,
37

37

00:01:50,230  -->  00:01:51,960
you should see the forward slash as well,
38

38

00:01:51,960  -->  00:01:55,710
because obviously Mac is
based on Unix as well.
39

39

00:01:55,710  -->  00:01:58,070
So the point here is
that we've got the option
40

40

00:01:58,070  -->  00:02:00,680
to retrieve the separator, and
it's actually good practise
41

41

00:02:00,680  -->  00:02:03,510
to never hard-code the file separator.
42

42

00:02:03,510  -->  00:02:04,960
Now, we've been doing that so far
43

43

00:02:04,960  -->  00:02:07,700
because we're not going to
release our demo applications,
44

44

00:02:07,700  -->  00:02:10,210
and if we had insisted on
using the file separator
45

45

00:02:10,210  -->  00:02:13,330
when testing, the code would
have been pretty ugly to read.
46

46

00:02:13,330  -->  00:02:16,610
Simplicity's obviously
better when you're learning,
47

47

00:02:16,610  -->  00:02:18,820
but in a real-world application,
48

48

00:02:18,820  -->  00:02:20,390
you do the following to build the path,
49

49

00:02:20,390  -->  00:02:23,570
which I'm about to type in,
rather than hard-coding.
50

50

00:02:23,570  -->  00:02:24,760
So let's have a go at doing that.
51

51

00:02:24,760  -->  00:02:26,560
I'm talking about this
code up here specifically
52

52

00:02:26,560  -->  00:02:28,670
on line 20, 'cause you
can see obviously there,
53

53

00:02:28,670  -->  00:02:31,750
the file separator is
hard-coded on line 20,
54

54

00:02:31,750  -->  00:02:34,410
and will only work, currently,
55

55

00:02:34,410  -->  00:02:39,400
for a Unix-derived operating
system, Mac or Linux.
56

56

00:02:39,400  -->  00:02:40,940
But we can actually change
that, so let's do that.
57

57

00:02:40,940  -->  00:02:44,100
I'm going to take a copy of that line,
58

58

00:02:44,100  -->  00:02:45,460
and comment one out.
59

59

00:02:45,460  -->  00:02:46,870
Let's see, we've got
the old version there.
60

60

00:02:46,870  -->  00:02:48,790
So what we're going to do is change this
61

61

00:02:48,790  -->  00:02:51,210
to input FileTree, down here,
62

62

00:02:52,840  -->  00:02:55,010
plus File.separator, plus,
63

63

00:02:57,800  -->  00:02:59,670
and then I'll put the
rest of the path we want,
64

64

00:02:59,670  -->  00:03:00,920
do it that way.
65

65

00:03:02,820  -->  00:03:04,600
Now, that way, we're now
no longer hard-coding
66

66

00:03:04,600  -->  00:03:06,120
the separator character.
67

67

00:03:06,120  -->  00:03:10,200
So if we run this, the
code still obviously works
68

68

00:03:11,800  -->  00:03:13,850
on a Mac, but you'll find
now that we've done this,
69

69

00:03:13,850  -->  00:03:17,200
this would also work
on Windows unmodified.
70

70

00:03:17,200  -->  00:03:18,390
So that's obviously the way to go
71

71

00:03:18,390  -->  00:03:20,310
when you're actually
producing applications
72

72

00:03:20,310  -->  00:03:22,790
and releasing them commercially.
73

73

00:03:22,790  -->  00:03:24,210
Now, when you're building long paths,
74

74

00:03:24,210  -->  00:03:25,240
instead of doing what I've done there,
75

75

00:03:25,240  -->  00:03:26,870
you'd probably use a StreamBuilder,
76

76

00:03:26,870  -->  00:03:29,150
but again, for the purposes of learning
77

77

00:03:29,150  -->  00:03:31,470
and keeping the code readable,
I'm going to continue
78

78

00:03:31,470  -->  00:03:33,710
to hard-code the
separator, but keep in mind
79

79

00:03:33,710  -->  00:03:34,840
that that's how you would do it
80

80

00:03:34,840  -->  00:03:36,900
in a real-world application to make sure
81

81

00:03:36,900  -->  00:03:39,850
that you're supporting
all operating systems.
82

82

00:03:39,850  -->  00:03:41,090
All right, so the other
thing we wanna do now
83

83

00:03:41,090  -->  00:03:44,590
is figure out how to
create temporary files.
84

84

00:03:44,590  -->  00:03:47,000
Now, sometimes, an application
needs to create files
85

85

00:03:47,000  -->  00:03:48,830
that it doesn't want to keep.
86

86

00:03:48,830  -->  00:03:51,460
Now, the files.createTempFile
method creates
87

87

00:03:51,460  -->  00:03:53,290
a temporary file in the operating system's
88

88

00:03:53,290  -->  00:03:56,010
default temporary file directory,
89

89

00:03:56,010  -->  00:03:58,950
so let's have a look at
an example of doing that.
90

90

00:03:58,950  -->  00:04:01,940
When I come down here and
add another try block for it.
91

91

00:04:01,940  -->  00:04:04,940
Try, and we'll catch an IOException.
92

92

00:04:07,270  -->  00:04:11,440
And we'll just print e.getMessage
if there is an exception.
93

93

00:04:12,420  -->  00:04:16,230
The actual code, let's
try Path tempFile is equal
94

94

00:04:16,230  -->  00:04:20,230
to Files.createTempFile,
and we'll call up myapp
95

95

00:04:23,090  -->  00:04:24,480
as the first argument.
96

96

00:04:24,480  -->  00:04:28,060
For the second argument,
we'll put .appext.
97

97

00:04:29,010  -->  00:04:30,670
Then we'll print out
98

98

00:04:32,440  -->  00:04:35,060
Temporary File path is equal to
99

99

00:04:35,060  -->  00:04:37,480
plus tempFile.toAbsolutePath.
100

100

00:04:41,390  -->  00:04:43,670
All right, so the first parameter
101

101

00:04:43,670  -->  00:04:47,580
in the createTempFile method is a prefix.
102

102

00:04:47,580  -->  00:04:49,510
Now, the temporary file
created will have a name
103

103

00:04:49,510  -->  00:04:52,270
that begins with this prefix,
and the second parameter,
104

104

00:04:52,270  -->  00:04:54,500
you can see here, well, that's a suffix,
105

105

00:04:54,500  -->  00:04:56,690
so in this case, you're
passing the file extension,
106

106

00:04:56,690  -->  00:04:58,980
which is usually what's
passed for this parameter.
107

107

00:04:58,980  -->  00:05:00,020
Now, you can actually pass
108

108

00:05:00,020  -->  00:05:03,410
a third optional parameter
of type file attribute
109

109

00:05:03,410  -->  00:05:05,660
that specifies attributes for the file,
110

110

00:05:05,660  -->  00:05:08,710
but for temporary files, there's
often no reason to do that.
111

111

00:05:08,710  -->  00:05:10,710
So we actually run this.
112

112

00:05:14,010  -->  00:05:15,210
And you can see, in my case here,
113

113

00:05:15,210  -->  00:05:19,060
I've got the temporary
file path, being on a Mac,
114

114

00:05:19,060  -->  00:05:21,670
is the /var, and we've got this subfolder,
115

115

00:05:21,670  -->  00:05:25,600
/folders/az, and then this long filename,
116

116

00:05:25,600  -->  00:05:27,790
which is still part of
the path, and then /t,
117

117

00:05:27,790  -->  00:05:30,260
but things there's this
myapp, and that's that prefix
118

118

00:05:30,260  -->  00:05:32,490
that I talked about that we specified here
119

119

00:05:32,490  -->  00:05:34,520
in the part of the file, and then it's got
120

120

00:05:34,520  -->  00:05:38,630
a temporary ID that's been
added automatically by Java,
121

121

00:05:38,630  -->  00:05:41,460
and then the file extension .appext.
122

122

00:05:41,460  -->  00:05:43,580
And the location will actually
be different depending
123

123

00:05:43,580  -->  00:05:45,600
on the operating system
you're running on, obviously.
124

124

00:05:45,600  -->  00:05:47,470
In the case of Windows, you'll probably be
125

125

00:05:47,470  -->  00:05:50,640
something along the
lines of your C folder...
126

126

00:05:50,640  -->  00:05:51,600
I should just type that out,
127

127

00:05:51,600  -->  00:05:52,830
just go you get a rough idea.
128

128

00:05:52,830  -->  00:05:54,210
It'll probably be
something along this lines,
129

129

00:05:54,210  -->  00:05:56,050
I would suspect.
130

130

00:05:56,050  -->  00:05:58,380
So it's C:\Users.
131

131

00:06:00,000  -->  00:06:01,430
Whatever your username is,
132

132

00:06:01,430  -->  00:06:02,650
I'll replace that with the question marks,
133

133

00:06:02,650  -->  00:06:06,820
and then we'll do something
like AppData\Local\Temp,
134

134

00:06:07,820  -->  00:06:08,940
and then it will probably be the filename,
135

135

00:06:08,940  -->  00:06:11,460
'cause you can see here,
something along those lines
136

136

00:06:11,460  -->  00:06:13,340
will actually be appended.
137

137

00:06:13,340  -->  00:06:16,230
So you'd probably see
something like that on Windows,
138

138

00:06:16,230  -->  00:06:17,430
where again, the three question marks
139

139

00:06:17,430  -->  00:06:20,460
would be the username of
the account you're using.
140

140

00:06:20,460  -->  00:06:21,920
But you can see, that will be configured
141

141

00:06:21,920  -->  00:06:24,380
and specified automatically.
142

142

00:06:24,380  -->  00:06:26,920
The bottom line is you've
got access to this file now,
143

143

00:06:26,920  -->  00:06:29,020
which you can use.
144

144

00:06:29,020  -->  00:06:32,000
One thing to note, though, is
that the resulting path name
145

145

00:06:32,000  -->  00:06:35,100
is always associated with
the default file system.
146

146

00:06:35,100  -->  00:06:37,680
Now, if you wanna store the
temporary file somewhere else,
147

147

00:06:37,680  -->  00:06:40,020
you can do that by using another version
148

148

00:06:40,020  -->  00:06:42,820
of the createTempFile method
that accepts more parameters,
149

149

00:06:42,820  -->  00:06:46,320
including a parent directory
path, and there are also
150

150

00:06:46,320  -->  00:06:49,250
files.createTempDirectory methods as well,
151

151

00:06:49,250  -->  00:06:53,200
if you wanna investigate
those at your leisure as well.
152

152

00:06:53,200  -->  00:06:55,900
Now, the other thing I want
to talk about is filestores
153

153

00:06:55,900  -->  00:06:58,890
or what you might be
thinking of as drives.
154

154

00:06:58,890  -->  00:07:00,300
Now, on a Unix system,
155

155

00:07:00,300  -->  00:07:02,960
each mounted system is a filestore.
156

156

00:07:02,960  -->  00:07:06,520
Now, on Windows, each drive
or volume is a filestore.
157

157

00:07:06,520  -->  00:07:08,220
For example, this C:.
158

158

00:07:08,220  -->  00:07:11,230
The C drive, C:, or the D drive, D:.
159

159

00:07:11,230  -->  00:07:13,700
So how do we get the filestores?
160

160

00:07:13,700  -->  00:07:14,530
Well, we can actually use
161

161

00:07:14,530  -->  00:07:17,870
the FileSystem.getFileStores
method for that.
162

162

00:07:17,870  -->  00:07:19,880
So let's go down and go
over the code for that.
163

163

00:07:19,880  -->  00:07:22,300
Let's try Iterable<FileStore>
164

164

00:07:26,740  -->  00:07:28,410
stores is equal to
165

165

00:07:28,410  -->  00:07:32,580
FileSystems.getDefault().getFileStores(),
166

166

00:07:35,950  -->  00:07:38,260
and this code should work
on all operating systems.
167

167

00:07:38,260  -->  00:07:42,180
For(FileStore store : stores),
168

168

00:07:44,160  -->  00:07:48,330
and we can print out store.name().
169

169

00:07:49,700  -->  00:07:52,300
Now, the method returns
an Iterable of FileStore.
170

170

00:07:52,300  -->  00:07:54,950
This is the getFileStores.
171

171

00:07:54,950  -->  00:07:56,770
And I haven't highlighted this,
172

172

00:07:56,770  -->  00:07:59,490
but the FileSystems.getDefault
method, well,
173

173

00:07:59,490  -->  00:08:01,890
that actually returns
a file system object.
174

174

00:08:01,890  -->  00:08:04,390
Now, some systems can have
more than one file system,
175

175

00:08:04,390  -->  00:08:07,490
and when you call getDefault,
you're getting the default
176

176

00:08:07,490  -->  00:08:10,050
and often, only file system.
177

177

00:08:10,050  -->  00:08:10,950
So if I actually run this.
178

178

00:08:10,950  -->  00:08:14,030
I'm obviously get the Mac equivalent.
179

179

00:08:15,810  -->  00:08:19,540
You can see here, I've
got the various filestores
180

180

00:08:19,540  -->  00:08:23,850
for my Mac, but when you
run this on your system,
181

181

00:08:23,850  -->  00:08:25,980
you'll get different results,
depending on basically
182

182

00:08:25,980  -->  00:08:28,020
the filestores that are on your system.
183

183

00:08:28,020  -->  00:08:30,960
So it's basically
system-specific, as I mentioned.
184

184

00:08:30,960  -->  00:08:32,370
On Windows, you'll probably see the names
185

185

00:08:32,370  -->  00:08:34,750
of the volumes printed
out, not the drive letters.
186

186

00:08:34,750  -->  00:08:35,670
Keep that in mind.
187

187

00:08:35,670  -->  00:08:38,320
And it's probably more useful
to get the drive letters,
188

188

00:08:38,320  -->  00:08:40,700
and there's actually two ways to get them.
189

189

00:08:40,700  -->  00:08:41,900
So let's have a look at doing that.
190

190

00:08:41,900  -->  00:08:42,990
So I'm going to leave that code there,
191

191

00:08:42,990  -->  00:08:46,370
but what we can also do is
I'll just take a copy of that,
192

192

00:08:46,370  -->  00:08:47,900
and actually what I'll do
is I'll just leave that
193

193

00:08:47,900  -->  00:08:50,200
in that loop, and we'll
just also print it out here.
194

194

00:08:50,200  -->  00:08:53,530
We'll print out System.out.println(),
and we'll do store.
195

195

00:08:53,530  -->  00:08:55,590
We'll just print out store.
196

196

00:08:55,590  -->  00:08:57,750
Let's have a look at that.
197

197

00:09:01,200  -->  00:09:02,030
You can see, in my case,
198

198

00:09:02,030  -->  00:09:05,170
we've got there /Volumes/Production,
199

199

00:09:05,170  -->  00:09:07,170
and then we've got dev/disk6,
200

200

00:09:07,170  -->  00:09:08,440
so if you're on a Windows machine,
201

201

00:09:08,440  -->  00:09:09,980
you'll probably see that
that will be the driver
202

202

00:09:09,980  -->  00:09:11,670
but that should actually
be the drive letter,
203

203

00:09:11,670  -->  00:09:13,980
actually showing for your machine.
204

204

00:09:13,980  -->  00:09:17,000
So basically, the volume
name and the drive letter.
205

205

00:09:17,000  -->  00:09:18,130
So this one'll give you the volume name
206

206

00:09:18,130  -->  00:09:19,210
and the drive letter.
207

207

00:09:19,210  -->  00:09:20,380
That's that first option there.
208

208

00:09:20,380  -->  00:09:21,210
We'll just clear...
209

209

00:09:21,210  -->  00:09:22,050
Let's actually do that.
210

210

00:09:22,050  -->  00:09:26,210
We'll put "Volume name/Drive letter =."
211

211

00:09:32,190  -->  00:09:35,520
then we'll just put "file store =."
212

212

00:09:36,710  -->  00:09:37,700
Let's just run that again,
213

213

00:09:37,700  -->  00:09:40,290
so that's a little bit clearer.
214

214

00:09:42,340  -->  00:09:43,210
Volume name/Drive letter.
215

215

00:09:43,210  -->  00:09:47,500
In my case, I'm a Mac, and
then also the filestore itself.
216

216

00:09:47,500  -->  00:09:49,910
And what you could do is you
can actually parse the string
217

217

00:09:49,910  -->  00:09:53,300
to get the drive letter if
you're on a Windows machine.
218

218

00:09:53,300  -->  00:09:54,360
Potentially risky.
219

219

00:09:54,360  -->  00:09:55,660
Some developers would consider that risky
220

220

00:09:55,660  -->  00:09:58,520
in the case of the formatting
of the return string,
221

221

00:09:58,520  -->  00:10:01,220
if that ever changes, but the
likelihood of that happening
222

222

00:10:01,220  -->  00:10:03,270
is probably pretty low.
223

223

00:10:03,270  -->  00:10:04,570
And obviously, that's only for Windows
224

224

00:10:04,570  -->  00:10:06,100
that I'm talking about here.
225

225

00:10:06,100  -->  00:10:06,930
If you're not on Windows,
226

226

00:10:06,930  -->  00:10:08,280
you probably don't need to do any parsing
227

227

00:10:08,280  -->  00:10:10,540
for the reasons which you can
see on the screen there now.
228

228

00:10:10,540  -->  00:10:11,770
You're not actually
getting that drive letters,
229

229

00:10:11,770  -->  00:10:14,850
'cause it's not really applicable
for that operating system.
230

230

00:10:14,850  -->  00:10:16,950
Now, there's another way
of doing thing as well.
231

231

00:10:16,950  -->  00:10:18,750
It's not ideal, as you'll see in a minute,
232

232

00:10:18,750  -->  00:10:21,720
but let's actually go
through and do that as well.
233

233

00:10:21,720  -->  00:10:24,990
So we could come down
here and do something like
234

234

00:10:24,990  -->  00:10:26,990
Iterable<Path> rootPaths
235

235

00:10:29,910  -->  00:10:33,560
is equal to FileSystems.getDefault
236

236

00:10:33,560  -->  00:10:37,730
.getRootDirectories()
for(Path path : rootPaths).
237

237

00:10:43,620  -->  00:10:46,540
Then we could do, print out a path.
238

238

00:10:47,800  -->  00:10:49,800
If we actually run that,
239

239

00:10:52,900  -->  00:10:56,400
then perhaps it may be a bit more clearer.
240

240

00:11:03,100  -->  00:11:06,410
That is the root directory,
in the case of my machine.
241

241

00:11:06,410  -->  00:11:08,060
So when you run this on a Windows machine,
242

242

00:11:08,060  -->  00:11:09,850
only the drive letters should be printed,
243

243

00:11:09,850  -->  00:11:11,640
but drive letters for all available drives
244

244

00:11:11,640  -->  00:11:12,780
in this system will be printed
245

245

00:11:12,780  -->  00:11:14,890
whether they're actually available or not.
246

246

00:11:14,890  -->  00:11:17,050
For example, if you had four USB ports
247

247

00:11:17,050  -->  00:11:19,250
but only two of them were
occupied, drive letters
248

248

00:11:19,250  -->  00:11:21,520
for all four would
actually still be printed,
249

249

00:11:21,520  -->  00:11:23,410
and again, it's not really very useful,
250

250

00:11:23,410  -->  00:11:25,890
me showing you this on a
Mac, because you can see here
251

251

00:11:25,890  -->  00:11:27,320
we're really only got this one line,
252

252

00:11:27,320  -->  00:11:31,110
which is a pointer to the
root directory on my system.
253

253

00:11:31,110  -->  00:11:34,770
But you'll get different
results on a Windows machine.
254

254

00:11:34,770  -->  00:11:36,590
The truth is, though, they
usually don't need to get
255

255

00:11:36,590  -->  00:11:38,800
the root drives, because
if you think about it,
256

256

00:11:38,800  -->  00:11:41,760
there aren't many cases,
use cases, for this,
257

257

00:11:41,760  -->  00:11:44,270
and that's because when an
application's installed,
258

258

00:11:44,270  -->  00:11:47,180
it remembers or can
find out where it lives
259

259

00:11:47,180  -->  00:11:50,510
on the file system, and
if it then needs the user
260

260

00:11:50,510  -->  00:11:53,700
to tell it where to save files
or where to load them from,
261

261

00:11:53,700  -->  00:11:56,240
the user will usually be
presented with a dialogue,
262

262

00:11:56,240  -->  00:11:59,570
and can then navigate
to or type in the path.
263

263

00:11:59,570  -->  00:12:00,410
So in other words,
264

264

00:12:00,410  -->  00:12:02,010
you may never need to
get the root directory
265

265

00:12:02,010  -->  00:12:04,100
or directories, but if you do have to,
266

266

00:12:04,100  -->  00:12:05,660
one of these methods that I've shown you
267

267

00:12:05,660  -->  00:12:08,390
will actually work for your application.
268

268

00:12:08,390  -->  00:12:10,220
Right, so let's finish the video here,
269

269

00:12:10,220  -->  00:12:12,040
but in the next video,
we're going to start
270

270

00:12:12,040  -->  00:12:15,370
going through learning
how to walk a file tree.
271

271

00:12:15,370  -->  00:12:17,460
Now, when I'm talking
about walking a file tree,
272

272

00:12:17,460  -->  00:12:18,410
we mean that we're going to visit
273

273

00:12:18,410  -->  00:12:20,690
every file and directory
that can be reached
274

274

00:12:20,690  -->  00:12:23,650
from a starting or root
directory for the tree.
275

275

00:12:23,650  -->  00:12:26,490
So I'll see you in the next video.
