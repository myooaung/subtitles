WEBVTT
0
1
00:00:05.430 --> 00:00:08.170
<v Tim>In the previous video we talked about operators.</v>
1

2
00:00:08.170 --> 00:00:10.400
Let's continue that discussion further,
2

3
00:00:10.400 --> 00:00:13.340
and we'll also get into operator precedence.
3

4
00:00:13.340 --> 00:00:14.270
So, where we finished off,
4

5
00:00:14.270 --> 00:00:18.540
was talking about and using the AND operator on line 59,
5

6
00:00:18.540 --> 00:00:21.210
and how it required both the left condition,
6

7
00:00:21.210 --> 00:00:23.960
the left operand condition, and the right condition,
7

8
00:00:23.960 --> 00:00:25.060
the right operand.
8

9
00:00:25.060 --> 00:00:26.870
They both had to be true,
9

10
00:00:26.870 --> 00:00:28.680
in order for the code that we've defined,
10

11
00:00:28.680 --> 00:00:30.080
in this case in a code block,
11

12
00:00:30.080 --> 00:00:33.230
with the statement line 60 to be executed.
12

13
00:00:33.230 --> 00:00:36.390
So, without the left and the right hand side conditions
13

14
00:00:36.390 --> 00:00:38.940
being true, that code isn't executed.
14

15
00:00:38.940 --> 00:00:41.140
We can confirm that again by running a code,
15

16
00:00:42.160 --> 00:00:44.420
and we can see the output greater than second topScore
16

17
00:00:44.420 --> 00:00:47.410
and less than 100 isn't showing, and that's because we
17

18
00:00:47.410 --> 00:00:50.970
defined second topScore to have the value of 81.
18

19
00:00:50.970 --> 00:00:52.650
That means that the left condition,
19

20
00:00:52.650 --> 00:00:55.720
topScore greater than second topScore is false,
20

21
00:00:55.720 --> 00:00:58.700
and consequently we're not seeing the output.
21

22
00:00:58.700 --> 00:01:00.430
All right, so a useful thing to do with these
22

23
00:01:00.430 --> 00:01:01.850
expressions or conditions,
23

24
00:01:01.850 --> 00:01:05.990
is to use extra parentheses to clarify your meaning.
24

25
00:01:05.990 --> 00:01:08.510
Now, this can also have an effect on your code,
25

26
00:01:08.510 --> 00:01:09.720
due to operator precedence,
26

27
00:01:09.720 --> 00:01:12.170
but we're seeing that in a future video,
27

28
00:01:12.170 --> 00:01:14.480
what I mean by that and what effect it has.
28

29
00:01:14.480 --> 00:01:16.860
For now though, we're talking about enhancing meaning.
29

30
00:01:16.860 --> 00:01:20.333
So, what we can do is come up here to the left condition.
30

31
00:01:23.300 --> 00:01:25.190
And put parentheses around that.
31

32
00:01:25.190 --> 00:01:27.636
We'll do the same for the right operand
32

33
00:01:27.636 --> 00:01:28.753
or the right condition.
33

34
00:01:30.409 --> 00:01:31.620
Like so.
34

35
00:01:31.620 --> 00:01:35.160
This makes the code easier to read because it's now clearer
35

36
00:01:35.160 --> 00:01:37.961
what the condition or expression is for the left and right
36

37
00:01:37.961 --> 00:01:40.030
hand operands of the AND operator.
37

38
00:01:40.030 --> 00:01:42.413
Now, at this stage, we've run the code again.
38

39
00:01:44.240 --> 00:01:45.073
Nothing's changed.
39

40
00:01:45.073 --> 00:01:46.890
We've got exactly the same results.
40

41
00:01:46.890 --> 00:01:47.970
But just in general,
41

42
00:01:47.970 --> 00:01:50.510
is making it bit easy to read and understand,
42

43
00:01:50.510 --> 00:01:53.860
and the idea is to help remove confusion
43

44
00:01:53.860 --> 00:01:56.053
and to clarify your meaning, and as a result of that,
44

45
00:01:56.053 --> 00:01:58.670
that makes it quicker to understand when you look at the
45

46
00:01:58.670 --> 00:02:01.040
code at a glance to know what's going on.
46

47
00:02:01.040 --> 00:02:03.210
And this may be relevant in the future, if someone else is
47

48
00:02:03.210 --> 00:02:05.820
reviewing your code or you're looking at your code in the
48

49
00:02:05.820 --> 00:02:09.130
future where you've forgotten the reasoning for putting that
49

50
00:02:09.130 --> 00:02:11.190
code as it was in the first place.
50

51
00:02:11.190 --> 00:02:13.320
I think these parentheses just kind of make it a little bit
51

52
00:02:13.320 --> 00:02:15.150
easier to understand.
52

53
00:02:15.150 --> 00:02:17.450
All right, so that's the AND operator.
53

54
00:02:17.450 --> 00:02:20.373
Let's now move on and talk about the OR operator.
54

55
00:02:21.490 --> 00:02:24.170
So, the OR operator works in a similar way to the
55

56
00:02:24.170 --> 00:02:26.867
AND operator, but the difference is that it only requires
56

57
00:02:26.867 --> 00:02:29.370
one of the conditions to the left and right hand side
57

58
00:02:29.370 --> 00:02:30.490
to be true.
58

59
00:02:30.490 --> 00:02:33.450
Remembering that AND, the AND operator requires both the
59

60
00:02:33.450 --> 00:02:36.060
left and right upper operands conditions to be true,
60

61
00:02:36.060 --> 00:02:39.010
the OR operator requires only one of the left and right
61

62
00:02:39.010 --> 00:02:41.540
operand conditions to be true.
62

63
00:02:41.540 --> 00:02:42.960
So, let's start some code here.
63

64
00:02:42.960 --> 00:02:44.560
So, I'm going to come down here.
64

65
00:02:45.400 --> 00:02:46.503
I'm going to top, if.
65

66
00:02:47.450 --> 00:02:49.560
I'm gonna add two parentheses because we're gonna do a
66

67
00:02:49.560 --> 00:02:52.660
similar thing by wrapping our conditions in parentheses.
67

68
00:02:52.660 --> 00:02:56.713
I'm going to type if topScore greater than 90,
68

69
00:02:58.240 --> 00:02:59.880
and I put one right parentheses there,
69

70
00:02:59.880 --> 00:03:02.090
and then I'm going to put the OR operator,
70

71
00:03:02.090 --> 00:03:03.893
which is these two pipe characters.
71

72
00:03:04.900 --> 00:03:05.733
Now, just a note here,
72

73
00:03:05.733 --> 00:03:09.290
that you need to use two pipe characters, not one.
73

74
00:03:09.290 --> 00:03:12.760
If you use only a single pipe character like so,
74

75
00:03:12.760 --> 00:03:15.380
well that's actually a bitwise OR operator,
75

76
00:03:15.380 --> 00:03:17.010
and it will return different results.
76

77
00:03:17.010 --> 00:03:20.720
So, here we want to use a logical OR, which needs two.
77

78
00:03:20.720 --> 00:03:21.880
If you recall now,
78

79
00:03:21.880 --> 00:03:25.560
you can see on line 59 when we're using the AND operator,
79

80
00:03:25.560 --> 00:03:27.643
that we also used two ampersands there.
80

81
00:03:29.150 --> 00:03:30.670
All right, so just some clarification on the
81

82
00:03:30.670 --> 00:03:33.300
logical AND and logical OR.
82

83
00:03:33.300 --> 00:03:35.910
The AND operator comes in two flavours in Java,
83

84
00:03:35.910 --> 00:03:38.010
as does the OR operator.
84

85
00:03:38.010 --> 00:03:41.180
The two ampersands, that's the logical AND operator,
85

86
00:03:41.180 --> 00:03:44.020
and that operates on boolean operands,
86

87
00:03:44.020 --> 00:03:46.500
in other words checking if the given condition is true
87

88
00:03:46.500 --> 00:03:47.840
or false.
88

89
00:03:47.840 --> 00:03:50.260
Now, you will almost always want to do this.
89

90
00:03:50.260 --> 00:03:54.219
The single ampersand is a bitwise operator working at the
90

91
00:03:54.219 --> 00:03:55.840
bit level.
91

92
00:03:55.840 --> 00:03:57.620
This is the AND bitwise operator.
92

93
00:03:57.620 --> 00:04:00.690
And that's an advanced concept that we won't get into here.
93

94
00:04:00.690 --> 00:04:04.360
And likewise, the two pipes is the logical OR,
94

95
00:04:04.360 --> 00:04:06.560
which again operates on boolean operands,
95

96
00:04:06.560 --> 00:04:09.930
again checking if the given condition is true or false.
96

97
00:04:09.930 --> 00:04:12.700
And again, you almost be wanting to do this,
97

98
00:04:12.700 --> 00:04:16.110
the single OR, the single pipe, that's a bitwise OR
98

99
00:04:16.110 --> 00:04:18.410
operator working at the bit level, and again,
99

100
00:04:18.410 --> 00:04:20.950
not something you generally would be needing to do.
100

101
00:04:20.950 --> 00:04:23.620
All right, so let's swing back to the code.
101

102
00:04:23.620 --> 00:04:24.620
All right, so back to the code then.
102

103
00:04:24.620 --> 00:04:27.750
I can change this and I can add another parentheses.
103

104
00:04:27.750 --> 00:04:32.482
We'll put second topScore less than equal to 90.
104

105
00:04:32.482 --> 00:04:35.420
We've gotta have two closing parentheses now.
105

106
00:04:35.420 --> 00:04:37.470
And now, we're going to add a code block.
106

107
00:04:39.030 --> 00:04:43.330
And then in the code, we're going to put the print line
107

108
00:04:43.330 --> 00:04:47.863
message either or both of the conditions are true.
108

109
00:04:50.240 --> 00:04:51.770
All right, so looking at the code,
109

110
00:04:51.770 --> 00:04:53.260
we scroll up and look at line 53.
110

111
00:04:53.260 --> 00:04:56.190
We've defined topScore to be 80,
111

112
00:04:56.190 --> 00:04:58.750
so looking down at our code on line 63,
112

113
00:04:58.750 --> 00:05:00.984
if topScore greater than 90, that's gonna return false
113

114
00:05:00.984 --> 00:05:04.070
because, obviously, topScore is 80 and not 90.
114

115
00:05:04.070 --> 00:05:05.560
Because of the test that we're testing this,
115

116
00:05:05.560 --> 00:05:07.140
topScore greater than 90.
116

117
00:05:07.140 --> 00:05:10.440
Now, the second score, you can see that on line 58.
117

118
00:05:10.440 --> 00:05:12.660
We defined that had the value 81.
118

119
00:05:12.660 --> 00:05:15.880
And the test, if it's less than or equal to 90,
119

120
00:05:15.880 --> 00:05:17.940
which is the right hand operand condition,
120

121
00:05:17.940 --> 00:05:19.400
well, that's going to return true,
121

122
00:05:19.400 --> 00:05:21.530
which means we've got one false operand.
122

123
00:05:21.530 --> 00:05:23.660
The left upper operand condition's false,
123

124
00:05:23.660 --> 00:05:26.220
but the right operands condition is true.
124

125
00:05:26.220 --> 00:05:27.790
So therefore, we should still get the output
125

126
00:05:27.790 --> 00:05:31.430
because one of them is true.
126

127
00:05:31.430 --> 00:05:34.880
You can see either or both of the conditions are true.
127

128
00:05:34.880 --> 00:05:35.750
Now, just to confirm that.
128

129
00:05:35.750 --> 00:05:37.780
If we change second topScore.
129

130
00:05:37.780 --> 00:05:39.980
Let's change that to 95 to see what happens.
130

131
00:05:41.100 --> 00:05:43.670
Some arbitrary number that's greater than 90.
131

132
00:05:43.670 --> 00:05:44.503
Run it again.
132

133
00:05:46.230 --> 00:05:48.660
This time, we're not seeing either or both of the conditions
133

134
00:05:48.660 --> 00:05:51.620
are true output, and that's because now both these values,
134

135
00:05:51.620 --> 00:05:54.519
both the left and right hand conditions for the OR operator
135

136
00:05:54.519 --> 00:05:57.430
are false, and we're not seeing the output.
136

137
00:05:57.430 --> 00:05:59.030
All right, so let's finish the video here.
137

138
00:05:59.030 --> 00:06:01.390
In the next video, I've got a mini challenge for you.
138

139
00:06:01.390 --> 00:06:03.760
I want to talk about the differences between the assignment
139

140
00:06:03.760 --> 00:06:07.330
in equal to operators, and how to ensure you don't get
140

141
00:06:07.330 --> 00:06:08.760
into difficulty with those.
141

142
00:06:08.760 --> 00:06:10.610
So, I will see you in the next video.
