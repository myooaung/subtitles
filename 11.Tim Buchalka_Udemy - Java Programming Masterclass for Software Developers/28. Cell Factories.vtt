WEBVTT
1
1

00:00:05.450  -->  00:00:08.660
so as I mention in the last video
we're gonna add an improvement to our user
2

2

00:00:08.660  -->  00:00:13.300
interface and that's too highlight items in
the list that got a deadline on today's date
3

3

00:00:13.300  -->  00:00:16.970
and we are doing that so the users doesn't have to click on every item
4

4

00:00:16.970  -->  00:00:21.300
to find out what they need to
prioritize now theirs couple ways to do that
5

5

00:00:21.300  -->  00:00:26.120
so one way to highlight todays items would be
just a color them red so to do this we
6

6

00:00:26.120  -->  00:00:29.150
were going to use what's called a cell
factory
7

7

00:00:29.150  -->  00:00:33.280
each item in the list view is being
displayed in a cell and what we can do is we
8

8

00:00:33.280  -->  00:00:37.950
can customize how those cell will look
by assigning a custom cell factory to
9

9

00:00:37.950  -->  00:00:42.730
the list view so right now its using the default cell factory and this
10

10

00:00:42.730  -->  00:00:46.160
default factory sets the text to
whatever items toString method
11

11

00:00:46.160  -->  00:00:50.020
returns as you've seen on screen but
also you might have noticed that the
12

12

00:00:50.020  -->  00:00:53.480
background color of the cell alternates
between white and a very light gray
13

13

00:00:53.480  -->  00:00:57.710
depending on the operating system that your running
this on so we are going to change all of this and
14

14

00:00:57.710  -->  00:01:02.870
more so when we create a cell factory we
need to provide the call back or
15

15

00:01:02.870  -->  00:01:08.090
the method that the ListView will call each time it wants to paint one of its cells so lets add the
16

16

00:01:08.090  -->  00:01:11.630
code to set the cell factory and declared the callback method we are gonna do
17

17

00:01:11.630  -->  00:01:14.910
that in the initialization method of the main
18

18

00:01:14.910  -->  00:01:19.330
window's controller and that's over at controllers.java so gonna add this as
19

19

00:01:19.330  -->  00:01:24.240
the last line and within their we're gonna do....
20

20

00:01:25.240  -->  00:01:33.080
...and I just pressed
21

21

00:01:33.080  -->  00:01:39.850
enter their it should populate the rest of the code for us so basically
22

22

00:01:39.850  -->  00:01:44.350
created the callback method for us automatically and all we really need to
23

23

00:01:44.350  -->  00:01:49.740
do then do is actually updated it so we got a call so we need to add some code in here so within
24

24

00:01:49.740  -->  00:01:52.520
this code itself we are gonna add a list...
25

25

00:01:52.520  -->  00:01:55.520
....
26

26

00:01:57.770  -->  00:02:08.620
....and then we going then override a method so within their we are going to do
27

27

00:02:08.620  -->  00:02:13.590
an override and hold down CTRL and press
O or command o depending on your
28

28

00:02:13.590  -->  00:02:18.400
operating system and we can do a search
for update item so type...
29

29

00:02:18.400  -->  00:02:24.070
press Enter its gonna override that method as you can see their and
30

30

00:02:24.070  -->  00:02:26.840
we will come back to that in a minute we are not
gonna leave that there but we're gonna
31

31

00:02:26.840  -->  00:02:30.900
come back to that in a minute for now we're going
to go to here and down here and then
32

32

00:02:30.900  -->  00:02:35.880
before that we need to return something so return the cell which will
33

33

00:02:35.880  -->  00:02:50.660
update so from their...
34

34

00:02:50.660  -->  00:02:55.940
...so lets talk
about what we've just done so in the
35

35

00:02:55.940  -->  00:02:59.930
code we've set to cell factory by calling
the list views set cell factory method
36

36

00:02:59.930  -->  00:03:04.610
and we pass an anonymous class
that implements the callback interface
37

37

00:03:04.610  -->  00:03:12.560
now this interface is part of the JavaFX API
and the interface itself has got 2 type parameters the
38

38

00:03:12.560  -->  00:03:16.860
first parameter is the type of argument provided by the call method and
39

39

00:03:16.860  -->  00:03:20.610
that's a single method within the
interface in our case we are passing it
40

40

00:03:20.610  -->  00:03:25.120
the ListView controller as you can see on
the screen and the second parameters
41

41

00:03:25.120  -->  00:03:29.720
is the types that its gonna be returned from the call
method in our case an instance of the
42

42

00:03:29.720  -->  00:03:36.550
class list cell is gonna be returned you can see we returning that cell on line 63 we also used generics
43

43

00:03:36.550  -->  00:03:42.720
to be more specific about what
type of objects the list view cell will contain hence the
44

44

00:03:42.720  -->  00:03:48.430
the use of to do item which you've seen on line
54 and 55 we've also used an
45

45

00:03:48.430  -->  00:03:51.430
anonymous class to create our list cell
instances
46

46

00:03:52.030  -->  00:03:56.000
and we are overriding the update items as you can
see in the list cell class and that
47

47

00:03:56.000  -->  00:03:59.970
methods can run whenever the list view
wants to paint a single cell
48

48

00:03:59.970  -->  00:04:05.430
so our call method is gonna return the cell instance that we
created and the list view will used that
49

49

00:04:05.430  -->  00:04:08.430
instance to paint the cell as a result this allows us
50

50

00:04:09.990  -->  00:04:14.950
to paint every cell based on the to-do item that
it contained which is pretty cool
51

51

00:04:14.950  -->  00:04:20.750
we've got the basic code skeleton in place we are gonna add the code to update item
52

52

00:04:20.750  -->  00:04:25.870
that's going to color items with the deadline
on today in red so our anonymous classes extending
53

53

00:04:25.870  -->  00:04:31.420
the list cell class as can see and that
class has got the label class in its
54

54

00:04:31.420  -->  00:04:35.760
parent hierarchy and controllers that descend from the label class can
55

55

00:04:35.760  -->  00:04:40.340
display text and graphics now the label
control also has this class in
56

56

00:04:40.340  -->  00:04:44.720
its parents hierarchy many of the methods
that are calling when working with the
57

57

00:04:44.720  -->  00:04:49.280
label controls are actually in the label
class for example the set text set
58

58

00:04:49.280  -->  00:04:54.750
graphic and set text field methods are all
in the label class itself so in the update
59

59

00:04:54.750  -->  00:04:59.970
item method we are going to first call the super method which
is already there as you can see we don't need
60

60

00:04:59.970  -->  00:05:03.480
to change anything for that and we are doing
that because we want to keep most of the
61

61

00:05:03.480  -->  00:05:07.480
default appearance provided by the
parent class for example we may still
62

62

00:05:07.480  -->  00:05:11.630
want the alternating background colors
and since we're providing the cell factory
63

63

00:05:11.630  -->  00:05:16.020
we have to set the text by calling the
set text method and we are gonna do that we
64

64

00:05:16.020  -->  00:05:20.410
are gonna put that code index to do that and before doing that we have to first
65

65

00:05:20.410  -->  00:05:24.680
check for empty cells and if its empty we need to set its text to null
66

66

00:05:24.680  -->  00:05:29.320
and if a cell isn't empty then we have to
set the text to the to
67

67

00:05:29.320  -->  00:05:33.930
-do items short description and
will then used the set text fill method
68

68

00:05:33.930  -->  00:05:38.770
to set the color of the text to red if
the items due today so we do this by
69

69

00:05:38.770  -->  00:05:44.240
we figure it out by comparing the items deadline with value local date.now and
70

70

00:05:44.240  -->  00:05:49.320
because that returns todays date so lets implement that code and its not a lot of code to do that
71

71

00:05:49.320  -->  00:05:54.390
so we still wanna keep the super
call in as I mention because we want to keep most
72

72

00:05:54.390  -->  00:05:57.570
of the default appearance provided by its
parent class and that's what that does
73

73

00:05:57.570  -->  00:06:04.970
but then we override that accent the extra so we test here we are gonna put...
74

74

00:06:04.970  -->  00:06:08.680
....
75

75

00:06:09.270  -->  00:06:20.380
....
76

76

00:06:20.380  -->  00:06:27.140
...and will just do a
test to see whether it's today's date
77

77

00:06:27.140  -->  00:06:33.430
so put....
78

78

00:06:34.060  -->  00:06:45.250
....
79

79

00:06:48.030  -->  00:06:57.230
...and if we run that we should find that our due item will now show in red and I'm not sure why I didn't end up
80

80

00:06:57.230  -->  00:07:00.710
saving that other long item I thought I saved it but for some reason its showing so lets
81

81

00:07:00.710  -->  00:07:07.780
just try setting another creating a new
record again I think I didn't close it down
82

82

00:07:07.780  -->  00:07:10.780
properly and if you remember that the
saving only happens on closed down so
83

83

00:07:10.780  -->  00:07:14.980
probably didn't save the entries permanently
and when I started up again that data is not
84

84

00:07:14.980  -->  00:07:21.090
there so we can put in a Test record set
the deadline to today's date just to see what
85

85

00:07:21.090  -->  00:07:26.090
happens which is the current date their click OK and bingo its actually working its showing in
86

86

00:07:26.090  -->  00:07:30.010
red so that's what we wanted to do
so if its today's date and you substitute
87

87

00:07:30.010  -->  00:07:33.210
the date when you selected
with date that you're running
88

88

00:07:33.210  -->  00:07:37.050
applications is now showing in red and that  proves that the code is being executed
89

89

00:07:37.050  -->  00:07:44.640
the callback code in our update item method and switch back over to the interface again lets just add
90

90

00:07:44.640  -->  00:07:56.480
that really long item so click on new.....go back to the page again and
91

91

00:07:56.480  -->  00:08:02.780
right click and copy and paste that in
there and set the deadline also today's
92

92

00:08:02.780  -->  00:08:09.630
date number click ok and I've got 2 entries in red they're
also going to close down normally and
93

93

00:08:09.630  -->  00:08:15.320
run it again and we should find those entries are back in there again today their we go they are back in so obviously when
94

94

00:08:15.320  -->  00:08:18.930
I closed down at the end of the previous
video I didn't close down properly and
95

95

00:08:18.930  -->  00:08:22.080
the code that was writing it back to a file the
96

96

00:08:22.080  -->  00:08:25.080
to do items wasn't executed so that is good we know its working now
97

97

00:08:26.880  -->  00:08:31.260
moving on can you remember when we change the to
do string method to return the short
98

98

00:08:31.260  -->  00:08:35.580
description so that the ListView will display rather than the object reference
99

99

00:08:35.580  -->  00:08:40.400
at that point we could have added a cell
factory instead and because we've added
100

100

00:08:40.400  -->  00:08:44.580
one their and it sets the text to the item
short description we no longer need to
101

101

00:08:44.580  -->  00:08:49.620
override the to do String method in the
to do item class so we go
102

102

00:08:49.620  -->  00:08:57.080
back to the to-do item class remembering the to do string here we no longer need this because
103

103

00:08:57.080  -->  00:09:06.500
controller code the updates cell method is adding that for us in the item update method from our cell factory
104

104

00:09:06.500  -->  00:09:13.680
we can just comment that out if you
want you should find that everything works as per normal
105

105

00:09:13.680  -->  00:09:19.720
and its working because it's using a custom cell factory that we implemented so when we don't want to use
106

106

00:09:19.720  -->  00:09:24.280
a cell factory for whatever reason overriding the to do String method in
107

107

00:09:24.280  -->  00:09:29.030
our data objects can be quick way to have a
custom or have control display what we
108

108

00:09:29.030  -->  00:09:34.700
want but they will be time where we want to override the to do string method and print the values of all instance variables
109

109

00:09:34.700  -->  00:09:38.560
or do something else other than return
the value of 1 field and that is where the
110

110

00:09:38.560  -->  00:09:42.650
custom cell factory will come in handy and now
we know how to create custom cell
111

111

00:09:42.650  -->  00:09:46.020
factory we want to override the
to do String method for the purposes of
112

112

00:09:46.020  -->  00:09:51.260
customizing our control displays but
in addition to covering items
113

113

00:09:51.260  -->  00:09:54.840
today in red it would be nice if the user
could also see what would be due
114

114

00:09:54.840  -->  00:09:59.870
tomorrow so let's first add a to do item with a deadline of tomorrow and add some
115

115

00:09:59.870  -->  00:10:03.160
code into the it with a different
color so I'm gonna create new to do item
116

116

00:10:03.160  -->  00:10:07.770
....
117

117

00:10:10.060  -->  00:10:15.320
....
118

118

00:10:15.320  -->  00:10:22.500
....confirming that it's not showing in
red or anything so we know its not been processed
119

119

00:10:22.500  -->  00:10:30.000
as todays date its tomorrow date close that down that normally so its saves close down the run window and if you go
120

120

00:10:30.000  -->  00:10:36.700
back to our controller that's actually
update the update item method to show
121

121

00:10:36.700  -->  00:10:40.370
those items that are due tomorrow in a
different color what we can do is this
122

122

00:10:40.370  -->  00:10:44.150
test here that is checking to see when
the deadline is now will put an else after that
123

123

00:10:44.150  -->  00:10:50.860
because we want to test for different
conditions so....
124

124

00:10:52.070  -->  00:11:00.710
.....
125

125

00:11:00.710  -->  00:11:04.740
takes the current day and adds one to it...
126

126

00:11:04.740  -->  00:11:12.820
....
127

127

00:11:12.820  -->  00:11:26.930
....so lets run it and we can see that it has done something we can see a bit of yellow their but that is
128

128

00:11:26.930  -->  00:11:30.450
really a bad choice of color we can't
really read the item anymore other than
129

129

00:11:30.450  -->  00:11:34.820
knowing that's  something for tomorrow
so it really is quite a bad color so lets change
130

130

00:11:34.820  -->  00:11:37.820
yellow and try something a bit better maybe brown
131

131

00:11:38.680  -->  00:12:00.600
try brown and see what that looks like and that is a bit better but their is a bug in our code I'm not sure if you have spotted it but to illustrate it lets add an item that was due last week so.....
132

132

00:12:00.600  -->  00:12:11.820
....
133

133

00:12:11.820  -->  00:12:18.350
...save that and notice there's its not
highlighted in anyway even though it's a
134

134

00:12:18.350  -->  00:12:23.810
overdue so we assumed that our users are super efficient
and always completely theirs items on time
135

135

00:12:23.810  -->  00:12:26.820
so that's color our overdue items in red
136

136

00:12:27.390  -->  00:12:30.640
so we are gonna change the condition in our cell factory so that it checks for dates earlier
137

137

00:12:30.640  -->  00:12:36.390
or equal to today's date so lets go ahead and do that so close it down and looking at the code at the moment
138

138

00:12:36.390  -->  00:12:37.310
we are doing
139

139

00:12:37.310  -->  00:12:42.270
if item.getdeadlines is equal to
localdate.now instead of doing a
140

140

00:12:42.270  -->  00:12:54.910
test for just .equals now we are gonna put...
141

141

00:12:54.910  -->  00:13:02.560
....what we are
142

142

00:13:02.560  -->  00:13:06.640
testing for now is to see whether
there's a date a deadline and that
143

143

00:13:06.640  -->  00:13:11.990
date is before the current to today + 1 so it has to be earlier than tomorrow so any
144

144

00:13:11.990  -->  00:13:19.640
date is equal to today's date or prior
to that date should now be flag in red so lets run that and
145

145

00:13:19.640  -->  00:13:25.700
see what happens and I've you've got a lot
of items in red and all these date should
146

146

00:13:25.700  -->  00:13:34.010
be dates in the past you can see some of this go back to march april may 13 but anything from this date onward that one by
147

147

00:13:34.010  -->  00:13:37.680
the way may 17 was today so
that's working today or prior is working
148

148

00:13:37.680  -->  00:13:42.470
we still got tomorrow date in the future that's
working for tomorrow but also dates
149

149

00:13:42.470  -->  00:13:44.600
that are more than one day in the future
150

150

00:13:44.600  -->  00:13:49.630
are colored in the normal colors because
they're outside of just being tomorrow
151

151

00:13:49.630  -->  00:13:54.900
so we now see that our code is working
properly and as a result at this point
152

152

00:13:54.900  -->  00:13:59.660
the user can view to do items and add new to do items but in a real world application
153

153

00:13:59.660  -->  00:14:04.460
they really should be able to edit and delete
to-do items as well so we are not gonna cover the edit case
154

154

00:14:04.460  -->  00:14:07.620
at the moment because that is really going to be
very similar to the other case we could
155

155

00:14:07.620  -->  00:14:11.390
even use the same FXML file because we
want our dialogue to look the same
156

156

00:14:12.060  -->  00:14:15.990
and the instructions we display in the dialogue might be different but which could
157

157

00:14:15.990  -->  00:14:20.330
lead could be an argument for
putting into each dialog header text rather
158

158

00:14:20.330  -->  00:14:24.520
than into the dialogues header text and we also want to initialize the value of each
159

159

00:14:24.520  -->  00:14:29.190
control with the values from the to do item the user wants to edit but other than
160

160

00:14:29.190  -->  00:14:31.850
that  the UI would pretty much be the same
so its probably something you could
161

161

00:14:31.850  -->  00:14:36.210
figure out so instead of actually
looking at the edit in the next lecture
162

162

00:14:36.210  -->  00:14:40.280
let's start looking at the ability to
delete to do items and then make a few
163

163

00:14:40.280  -->  00:14:43.210
other enhancements to the UI see you in the next video
