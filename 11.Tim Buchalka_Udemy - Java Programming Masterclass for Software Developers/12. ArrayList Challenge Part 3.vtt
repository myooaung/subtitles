WEBVTT
1
1

00:00:05.220  -->  00:00:06.560
So let's now continue on.
2

2

00:00:06.560  -->  00:00:10.860
We've got three methods we need to create,
updateContact, removeContact, and
3

3

00:00:10.860  -->  00:00:13.450
queryContact so
we can finish off our challenge.
4

4

00:00:13.450  -->  00:00:15.860
So the first one, update.
5

5

00:00:15.860  -->  00:00:20.650
You're doing a private static void.
6

6

00:00:20.650  -->  00:00:22.400
UpdateContact.
7

7

00:00:22.400  -->  00:00:26.080
So first thing's first, we need to
get the name you wanna search for,
8

8

00:00:26.080  -->  00:00:29.920
enter existing contact name like so.
9

9

00:00:29.920  -->  00:00:37.090
And we're gonna put
String_name = scanner.nextLine.
10

10

00:00:37.090  -->  00:00:40.030
Like so,
we're gonna retrieve the one we want.
11

11

00:00:40.030  -->  00:00:41.740
Now, the next part, what we could do,
12

12

00:00:41.740  -->  00:00:43.890
is we wanna use something
like the mobile phone.
13

13

00:00:46.420  -->  00:00:50.740
.query and in this case you can
see that we've got an option for
14

14

00:00:50.740  -->  00:00:55.060
that except to contact, but
in this case what we wanna also do,
15

15

00:00:55.060  -->  00:00:59.250
we wanna implement another
version of query contact.
16

16

00:00:59.250  -->  00:01:03.400
We wanna pass just the name and
to return the record, the entire record,
17

17

00:01:03.400  -->  00:01:05.380
the contact record for that name.
18

18

00:01:05.380  -->  00:01:06.970
And the reason for
tha will become apparent.
19

19

00:01:06.970  -->  00:01:09.970
So what I wanna do is go back to
mobile phone and looking at our query,
20

20

00:01:09.970  -->  00:01:14.320
we're gonna do something similar,
we wanna do a public contact,
21

21

00:01:14.320  -->  00:01:20.440
query contact, string name.
22

22

00:01:21.570  -->  00:01:22.230
Like so.
23

23

00:01:22.230  -->  00:01:26.530
So we wanna return, we wanna have a look
for any record that matches the name and
24

24

00:01:26.530  -->  00:01:29.160
actually then return
the contact record for
25

25

00:01:29.160  -->  00:01:31.570
that because we're gonna
need that in the next line.
26

26

00:01:31.570  -->  00:01:36.000
We can actually use the internal method
we created to the find contacts to do so.
27

27

00:01:36.000  -->  00:01:44.200
So we can do something like int position
= findContact, and pass the name to that.
28

28

00:01:44.200  -->  00:01:50.990
Then we can put if(position >= 0),
that means we've found an entry.
29

29

00:01:50.990  -->  00:01:53.500
And what we wanna do at
that point is return.
30

30

00:01:55.460  -->  00:02:00.410
This.myContacts.get that position.
31

31

00:02:00.410  -->  00:02:03.770
So we want to return the contact,
or object I should say,
32

32

00:02:03.770  -->  00:02:06.600
that's in that position in the array list.
33

33

00:02:06.600  -->  00:02:09.880
Failing that, if we weren't able to
find it we're going to return null.
34

34

00:02:09.880  -->  00:02:12.790
So that's our method, so again we're
just getting the position number
35

35

00:02:12.790  -->  00:02:14.460
based on the name to
see whether it exists.
36

36

00:02:14.460  -->  00:02:18.340
If it does exist in the array list
which is that contact record,
37

37

00:02:18.340  -->  00:02:20.850
otherwise we're going to return null.
38

38

00:02:20.850  -->  00:02:23.420
So going back to our main class again.
39

39

00:02:23.420  -->  00:02:25.340
So, what we can now do is, use the query.
40

40

00:02:25.340  -->  00:02:29.340
We can put .query and
we can use the string one like name,
41

41

00:02:32.170  -->  00:02:35.490
and we can do Contact
existingContactRecord,
42

42

00:02:38.210  -->  00:02:41.740
like so.
43

43

00:02:41.740  -->  00:02:47.830
And then what we can do is, we can put
ifexisting contact records == null,
44

44

00:02:47.830  -->  00:02:54.770
we can say contact not found.
45

45

00:02:54.770  -->  00:03:00.760
And then we can return,
just return cuz there's no return type.
46

46

00:03:00.760  -->  00:03:04.260
So basically if we don't find
the entry we can't update it.
47

47

00:03:04.260  -->  00:03:05.250
So we gotta return null.
48

48

00:03:05.250  -->  00:03:08.240
But the good thing about is
now that we've done that is
49

49

00:03:08.240  -->  00:03:12.110
we can now easily proceed because what
we can do now is just we can actually
50

50

00:03:12.110  -->  00:03:16.140
send that contact record ultimately
when we're going to update the record.
51

51

00:03:16.140  -->  00:03:20.010
But the first thing we need to do because
we're replacing the existing contact
52

52

00:03:20.010  -->  00:03:23.370
name with a new one,
we need to actually accept that as input.
53

53

00:03:23.370  -->  00:03:27.350
So we're going to actually print,
54

54

00:03:29.090  -->  00:03:33.290
enter new contact name, like so.
55

55

00:03:33.290  -->  00:03:38.340
And string, new name =
56

56

00:03:38.340  -->  00:03:43.150
scanner.next line.
57

57

00:03:45.160  -->  00:03:48.800
Accept the new contact that we're going to
assign and this could be in the case when
58

58

00:03:48.800  -->  00:03:51.500
someone perhaps got married and
their name changed.
59

59

00:03:51.500  -->  00:03:56.580
And likewise mobile phone number
60

60

00:03:56.580  -->  00:04:01.120
may be the same but may not be,
61

61

00:04:01.120  -->  00:04:06.210
enter new contact phone number,
62

62

00:04:07.480  -->  00:04:15.310
and string number equals like so.
63

63

00:04:15.310  -->  00:04:20.360
So we've got the new number and the new
name so we're going to create a new record
64

64

00:04:20.360  -->  00:04:25.520
for that so
Contact newContact equals we want to
65

65

00:04:25.520  -->  00:04:31.620
use the Contact static method and
pass the new name and the new number.
66

66

00:04:31.620  -->  00:04:32.420
Like so.
67

67

00:04:32.420  -->  00:04:33.930
So we've now got the two entries.
68

68

00:04:33.930  -->  00:04:38.120
We've got the existing record
as a contact object and
69

69

00:04:38.120  -->  00:04:44.250
also the new contact as an object so,
we can just call it update contact
70

70

00:04:44.250  -->  00:04:49.460
doing mobilephone.updatecontact and
we pass the old one first,
71

71

00:04:49.460  -->  00:04:53.110
old existing contact record and
new contact.
72

72

00:04:54.210  -->  00:04:57.970
And then what we really could is put if,
surround that in an if,
73

73

00:04:57.970  -->  00:05:01.310
so because that's returning a true or
false we can put.
74

74

00:05:03.830  -->  00:05:05.430
Successfully updated record.
75

75

00:05:07.880  -->  00:05:13.100
Otherwise if an else
error updating record.
76

76

00:05:13.100  -->  00:05:15.980
Now we shouldn't actually get an error
with the update because we've
77

77

00:05:15.980  -->  00:05:18.870
already done a test beforehand
to see whether it existed,
78

78

00:05:18.870  -->  00:05:22.990
but in a multi-user type world for example
the record could have been deleted since
79

79

00:05:22.990  -->  00:05:27.090
the time that we retrieved, determined
whether it was on file or not so
80

80

00:05:27.090  -->  00:05:29.840
it would be good to actually
still test for that anyway.
81

81

00:05:29.840  -->  00:05:32.380
In this case,
we've now implemented the update contact.
82

82

00:05:32.380  -->  00:05:35.790
So thinking about it, the remove contact
is actually gonna be very similar.
83

83

00:05:35.790  -->  00:05:39.060
We wanna do the same thing, we wanna
just check to see whether it exists.
84

84

00:05:39.060  -->  00:05:40.690
If it does exist then try to delete it.
85

85

00:05:40.690  -->  00:05:42.080
So I'm gonna copy some of this.
86

86

00:05:42.080  -->  00:05:45.950
I'm gonna copy this part and paste that.
87

87

00:05:45.950  -->  00:05:48.060
Like so.
But we're gonna call it remove contact.
88

88

00:05:50.980  -->  00:05:56.070
And we're going to add another bracket
there, so at this point the code
89

89

00:05:56.070  -->  00:06:00.970
prior to that, we're actually testing to
see whether it exists or not so we've got
90

90

00:06:00.970  -->  00:06:04.840
to here, we know that it does exist, so
we've got the existing record so we all we
91

91

00:06:04.840  -->  00:06:09.850
really need to do is just call the method
so we can put mobile phone dot remove and
92

92

00:06:09.850  -->  00:06:13.970
it's asking for the parameter which is
of course the existing contact record.
93

93

00:06:13.970  -->  00:06:15.170
And again we can wrap that in an if.
94

94

00:06:15.170  -->  00:06:21.710
So if, successfully deleted,
95

95

00:06:21.710  -->  00:06:30.790
or else, error deleting record
contact to be more precise.
96

96

00:06:33.930  -->  00:06:36.010
So that's our removeContact.
97

97

00:06:36.010  -->  00:06:38.960
And the last thing we wanna do
now is just do a query, and
98

98

00:06:38.960  -->  00:06:41.800
the queryContact code again
is pretty is pretty similar.
99

99

00:06:41.800  -->  00:06:45.590
So we could do something similar,
I'm just gonna copy that code.
100

100

00:06:48.730  -->  00:06:50.480
Gonna be queryContact.
101

101

00:06:53.890  -->  00:06:57.690
QueryContact into existing name,
and we'll say contact not found.
102

102

00:06:57.690  -->  00:07:00.410
We wouldn't really need to do it
because we've already queried it once.
103

103

00:07:00.410  -->  00:07:06.060
We could actually just print out
a message where's the effect of name,
104

104

00:07:06.060  -->  00:07:09.610
that's the existing
contact record .getName,
105

105

00:07:09.610  -->  00:07:13.500
phone number is
existingRecord.getPhoneNumber and
106

106

00:07:13.500  -->  00:07:18.060
that was sort of confirmed that
we're able to actually retrieve
107

107

00:07:18.060  -->  00:07:22.450
the number because obviously we
already asked for the name and
108

108

00:07:22.450  -->  00:07:27.940
then from the name we're able to determine
obviously the find number because
109

109

00:07:27.940  -->  00:07:33.020
the information that was returned to
us also returned tha tin a string.
110

110

00:07:33.020  -->  00:07:35.920
So I think that's all our functions now.
111

111

00:07:35.920  -->  00:07:38.710
So I think we're ready now to
actually try running this code and
112

112

00:07:38.710  -->  00:07:42.050
seeing whether shock, horror,
it actually works so let's try that now.
113

113

00:07:44.300  -->  00:07:45.890
Okay, so there's our function.
114

114

00:07:45.890  -->  00:07:46.950
So let's make a start of it.
115

115

00:07:46.950  -->  00:07:49.840
So firstly, 1, print contacts.
116

116

00:07:49.840  -->  00:07:51.080
Shouldn't be any, which is correct.
117

117

00:07:51.080  -->  00:07:52.470
So let's add a contact.
118

118

00:07:53.880  -->  00:07:55.100
Contact, we'll say it's Tim.
119

119

00:07:56.130  -->  00:07:59.930
Phone number 12345,
pretty original phone number there.
120

120

00:07:59.930  -->  00:08:03.070
New contact added, name equals Tim,
phone equals 12345, and
121

121

00:08:03.070  -->  00:08:07.420
if we print the contacts, we've now
got a contact list with me on there.
122

122

00:08:07.420  -->  00:08:08.160
Just one record.
123

123

00:08:08.160  -->  00:08:10.210
Let's add another one.
124

124

00:08:10.210  -->  00:08:16.010
Bob, 23890, and
just print that list out again.
125

125

00:08:16.010  -->  00:08:18.890
That seems to be working okay,
add one more shall we?
126

126

00:08:23.030  -->  00:08:25.150
Okay and list that again.
127

127

00:08:25.150  -->  00:08:28.900
It's definitely working and option six so
that we can see our list of options again.
128

128

00:08:28.900  -->  00:08:32.340
All right, so
let's go ahead and do a query,
129

129

00:08:32.340  -->  00:08:34.750
and we'll go option five,
we'll try the queries out.
130

130

00:08:36.070  -->  00:08:38.930
So let's try one that
we know is on file too.
131

131

00:08:38.930  -->  00:08:42.870
Name Tim for our number equals 12345,
so that's good that it found the number.
132

132

00:08:42.870  -->  00:08:45.730
And, we'll just do one more,
so number five for Bob.
133

133

00:08:45.730  -->  00:08:49.900
23890, which is correct for Bob,
you can see that on the screen there.
134

134

00:08:49.900  -->  00:08:51.140
Let's do one that's not on file.
135

135

00:08:53.460  -->  00:08:56.900
Roy contact not found, which is correct.
136

136

00:08:56.900  -->  00:08:58.830
That's good.
So let's do an update.
137

137

00:08:58.830  -->  00:09:02.900
So do an update, firstly we'll
enter something that doesn't exist.
138

138

00:09:02.900  -->  00:09:03.400
Derrick.
139

139

00:09:04.530  -->  00:09:06.470
Contact not found, which is good.
140

140

00:09:06.470  -->  00:09:07.830
And we'll try option three again.
141

141

00:09:07.830  -->  00:09:09.740
This time we'll try Tim.
142

142

00:09:09.740  -->  00:09:12.030
This time it's actually come up and
said, what's the new name?
143

143

00:09:12.030  -->  00:09:14.040
So it's found it, so we'll put Tom.
144

144

00:09:15.330  -->  00:09:19.180
And we'll put 8900000.
145

145

00:09:19.180  -->  00:09:21.840
Tim was replaced with Tom,
successfully updated.
146

146

00:09:21.840  -->  00:09:25.210
And the list of options again, and
we'll just print the contacts out.
147

147

00:09:25.210  -->  00:09:31.680
You can see element one has
been updated to Tom, 8900000.
148

148

00:09:31.680  -->  00:09:33.960
And remove is the only other thing
we need to check, so let's do that.
149

149

00:09:33.960  -->  00:09:35.580
Let's try and remove, say, Bob.
150

150

00:09:37.810  -->  00:09:41.110
Bob was deleted but
lets confirm that was the case.
151

151

00:09:41.110  -->  00:09:43.850
Tom and Mark remain, so
yes it has been deleted.
152

152

00:09:43.850  -->  00:09:46.650
So I think that's all the functions and
it seems to be working nicely.
153

153

00:09:46.650  -->  00:09:47.650
So that's my solution.
154

154

00:09:47.650  -->  00:09:51.270
I hope you've got to learn all this and
that your solution was perhaps similar.
155

155

00:09:51.270  -->  00:09:54.850
I know that I changed a couple of things
I didn't talk about specifically.
156

156

00:09:54.850  -->  00:09:57.450
But, now if you've done
something very similar and
157

157

00:09:57.450  -->  00:10:00.000
you've got the results that were similar
to this, you've actually done very well.
158

158

00:10:00.000  -->  00:10:02.930
No matter what, hopefully you've got
a lot out of this, and important
159

159

00:10:02.930  -->  00:10:06.220
is just to start thinking about when
you're implementing some of this code.
160

160

00:10:06.220  -->  00:10:09.170
So I'll just close this down,
it's just to decide where that code was.
161

161

00:10:09.170  -->  00:10:12.400
I think it was important when we talked
about getting back to the mobile phone and
162

162

00:10:12.400  -->  00:10:17.600
we talked about the print, print
contacts whether that code effectively
163

163

00:10:17.600  -->  00:10:20.430
could have been in the mobile phone, or
whether it should have been there or
164

164

00:10:20.430  -->  00:10:24.500
in here, I think we made the right
decision to actually put that code
165

165

00:10:24.500  -->  00:10:27.360
in the mobile phone because it
was in the mobile phone class.
166

166

00:10:27.360  -->  00:10:29.530
Because it was related
to the mobile phone.
167

167

00:10:29.530  -->  00:10:30.230
So that's it.
168

168

00:10:30.230  -->  00:10:32.220
We're formally done with array list.
169

169

00:10:32.220  -->  00:10:33.820
I know there were a lot
of videos that we did for
170

170

00:10:33.820  -->  00:10:36.660
that but it was very important to cover
a lot of that because we're gonna be
171

171

00:10:36.660  -->  00:10:39.270
going into different types of lists and
we're gonna assume at
172

172

00:10:39.270  -->  00:10:42.330
this point as we move forward that
you understand the basics of lists.
173

173

00:10:42.330  -->  00:10:44.470
We'll just be talking
about the specifics and
174

174

00:10:44.470  -->  00:10:46.700
the different types of
lists that are in Java.
175

175

00:10:46.700  -->  00:10:48.310
So I'll see you in that next video.
