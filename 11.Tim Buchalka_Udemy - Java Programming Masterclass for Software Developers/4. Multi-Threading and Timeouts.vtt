WEBVTT
1
1

00:00:04.870  -->  00:00:07.290
- Alright, so in the last
video, we made some changes
2

2

00:00:07.290  -->  00:00:10.220
so that we've now got a
multi-threaded server that should
3

3

00:00:10.220  -->  00:00:13.270
be able to be responsive
to more than one client.
4

4

00:00:13.270  -->  00:00:14.750
So what we're going to do is run this,
5

5

00:00:14.750  -->  00:00:16.480
and for our first test, we wanna make sure
6

6

00:00:16.480  -->  00:00:18.010
everything's still working.
7

7

00:00:18.010  -->  00:00:21.430
So I'm gonna start by running the server,
8

8

00:00:25.190  -->  00:00:29.360
and then we're going to
actually run a single client.
9

9

00:00:31.690  -->  00:00:33.960
I'm gonna type a few
strings in just to make sure
10

10

00:00:33.960  -->  00:00:36.130
that everything's working.
11

11

00:00:39.200  -->  00:00:40.610
And you can see, over here on the right,
12

12

00:00:40.610  -->  00:00:42.910
if I'm actually correctly
getting the strings
13

13

00:00:42.910  -->  00:00:44.950
that I'm typing, echoed
back from the server,
14

14

00:00:44.950  -->  00:00:46.630
so that's working well.
15

15

00:00:46.630  -->  00:00:48.290
Now let's start a second client.
16

16

00:00:48.290  -->  00:00:52.210
I'm gonna type a few
strings into that as well.
17

17

00:00:57.230  -->  00:00:59.050
And if you recall the
last time we did that
18

18

00:00:59.050  -->  00:01:01.330
with a single-threaded server, each client
19

19

00:01:01.330  -->  00:01:03.840
could only type one
message and see it echoed.
20

20

00:01:03.840  -->  00:01:06.550
Now that each client is
handled in its own thread,
21

21

00:01:06.550  -->  00:01:09.010
the server blocking on the
accept code doesn't result
22

22

00:01:09.010  -->  00:01:11.590
in all the clients being blocked as well.
23

23

00:01:11.590  -->  00:01:13.460
And the same is true,
actually, when a thread
24

24

00:01:13.460  -->  00:01:16.760
blocks on the read line
call, only that client thread
25

25

00:01:16.760  -->  00:01:18.730
will be blocked; the other client threads
26

26

00:01:18.730  -->  00:01:22.090
are still able to service the
clients they're connected to.
27

27

00:01:22.090  -->  00:01:26.250
Now, just to confirm, I'll
go back to the other client.
28

28

00:01:28.420  -->  00:01:32.050
More of the same; that's
still working okay,
29

29

00:01:32.050  -->  00:01:33.130
and likewise,
30

30

00:01:35.420  -->  00:01:39.130
yet another, that's still working as well.
31

31

00:01:39.130  -->  00:01:41.830
Alright, so let's stop each client now.
32

32

00:01:41.830  -->  00:01:44.960
I'm going to just type exit.
33

33

00:01:44.960  -->  00:01:47.710
Let's close that one down,
and go back to the other one.
34

34

00:01:47.710  -->  00:01:49.540
Same deal there: exit.
35

35

00:01:52.730  -->  00:01:55.170
Okay, and we have to close the client,
36

36

00:01:55.170  -->  00:01:58.640
the server, rather, down,
manually, so let's do that.
37

37

00:01:58.640  -->  00:01:59.720
Terminate it.
38

38

00:02:00.610  -->  00:02:01.440
Okay.
39

39

00:02:02.650  -->  00:02:05.720
Now we've got a full screen
with a server code for now.
40

40

00:02:05.720  -->  00:02:07.420
What we're gonna do now is add some code
41

41

00:02:07.420  -->  00:02:11.940
that puts each thread
to sleep for 15 seconds.
42

42

00:02:11.940  -->  00:02:15.830
We're gonna delete this
code that I commented out,
43

43

00:02:15.830  -->  00:02:18.070
and we're gonna go back to our echoer,
44

44

00:02:18.070  -->  00:02:20.400
and we're going to actually
put the code in there.
45

45

00:02:20.400  -->  00:02:22.050
So, at the moment, we've got, below here,
46

46

00:02:22.050  -->  00:02:24.930
the if echo string equals exit then break.
47

47

00:02:24.930  -->  00:02:29.100
We're gonna put the code down
below that, in a try catch.
48

48

00:02:30.080  -->  00:02:33.500
You're gonna catch interrupted exception.
49

49

00:02:40.630  -->  00:02:43.940
Interrupted, and we're
just gonna do a thread
50

50

00:02:43.940  -->  00:02:48.230
dot sleep, 15,000 for 15 seconds.
51

51

00:02:48.230  -->  00:02:50.180
And so that we can see
that there's no delay
52

52

00:02:50.180  -->  00:02:52.410
for client connexions,
we're also gonna add
53

53

00:02:52.410  -->  00:02:55.100
a println statement to
the run method itself,
54

54

00:02:55.100  -->  00:02:57.050
and we'll actually add
that above here, so I've,
55

55

00:02:57.050  -->  00:02:59.460
we've got the line of output.
56

56

00:03:00.490  -->  00:03:02.340
And on the next line, we're
just gonna print out a message,
57

57

00:03:02.340  -->  00:03:04.990
just so we know that the
server has received it.
58

58

00:03:04.990  -->  00:03:07.760
So received client input
59

59

00:03:07.760  -->  00:03:10.930
colon plus echo string.
60

60

00:03:12.020  -->  00:03:15.670
Right, so let's try running it again now.
61

61

00:03:15.670  -->  00:03:19.010
We'll start by running the server first,
62

62

00:03:21.520  -->  00:03:22.880
and let's actually test this now.
63

63

00:03:22.880  -->  00:03:27.040
So I'm going to start by
testing the first client.
64

64

00:03:29.330  -->  00:03:31.600
You can see, the server's
received that input.
65

65

00:03:31.600  -->  00:03:34.360
We'll do another one here.
66

66

00:03:34.360  -->  00:03:38.210
Bob, and I can go back
to the other client,
67

67

00:03:38.210  -->  00:03:40.740
and just wait for the echo to come back,
68

68

00:03:40.740  -->  00:03:43.380
after the 15 second delay.
69

69

00:03:43.380  -->  00:03:45.980
There's our delay, our echo, rather.
70

70

00:03:45.980  -->  00:03:48.480
And likewise for the second client;
71

71

00:03:48.480  -->  00:03:50.840
Bob's come back as well.
72

72

00:03:50.840  -->  00:03:54.160
So the point here is that
one thread taking a while
73

73

00:03:54.160  -->  00:03:56.320
will not result in every
client being blocked until
74

74

00:03:56.320  -->  00:03:59.290
the long-running client is
finished, which is pretty cool.
75

75

00:03:59.290  -->  00:04:00.960
And you can actually test this out and run
76

76

00:04:00.960  -->  00:04:03.120
as many clients as you like here.
77

77

00:04:03.120  -->  00:04:04.780
To try it, let's just do that now.
78

78

00:04:04.780  -->  00:04:06.760
What we're gonna do, is
we're gonna close down
79

79

00:04:06.760  -->  00:04:08.260
our clients first.
80

80

00:04:13.850  -->  00:04:17.500
Okay, then we're gonna
close down our server.
81

81

00:04:17.500  -->  00:04:19.090
Terminate.
82

82

00:04:19.090  -->  00:04:22.170
And let's get rid of the
83

83

00:04:23.640  -->  00:04:26.730
sleep code, I'm gonna comment it out.
84

84

00:04:31.440  -->  00:04:35.250
Now let's actually try testing this.
85

85

00:04:35.250  -->  00:04:36.830
Let's say four clients, just to make sure
86

86

00:04:36.830  -->  00:04:38.830
that it's still working.
87

87

00:04:40.770  -->  00:04:43.850
Okay, and we'll run our first client.
88

88

00:04:45.760  -->  00:04:47.350
Tim.
89

89

00:04:47.350  -->  00:04:51.180
Received client import;
we'll run another one.
90

90

00:04:52.380  -->  00:04:53.220
Bob.
91

91

00:04:54.940  -->  00:04:55.940
Another one.
92

92

00:04:57.100  -->  00:04:57.940
Percy.
93

93

00:05:00.010  -->  00:05:01.830
Another one.
94

94

00:05:01.830  -->  00:05:02.670
Mike.
95

95

00:05:03.920  -->  00:05:05.520
You can see, we're running
four different versions
96

96

00:05:05.520  -->  00:05:06.510
and everything's working fine.
97

97

00:05:06.510  -->  00:05:07.910
And you can see up here, by the way,
98

98

00:05:07.910  -->  00:05:11.120
the number four, there on the run arrow.
99

99

00:05:11.120  -->  00:05:13.240
That shows us that there's four clients
100

100

00:05:13.240  -->  00:05:14.840
actually running, at the moment.
101

101

00:05:14.840  -->  00:05:18.290
Alright, and if we go back
and just test another one.
102

102

00:05:18.290  -->  00:05:19.120
Was here.
103

103

00:05:22.780  -->  00:05:23.860
Bob was here.
104

104

00:05:25.430  -->  00:05:27.290
Clearly, things are working fine.
105

105

00:05:27.290  -->  00:05:28.960
The server's able to
106

106

00:05:30.620  -->  00:05:32.180
came as well.
107

107

00:05:32.180  -->  00:05:34.350
Server's able to cope
with all of these clients
108

108

00:05:34.350  -->  00:05:36.370
without any problems.
109

109

00:05:36.370  -->  00:05:37.730
Alright, so let's exit out of that.
110

110

00:05:37.730  -->  00:05:40.810
We'll close down all the clients now.
111

111

00:05:48.840  -->  00:05:51.000
Okay, that's the last.
112

112

00:05:51.000  -->  00:05:53.890
And obviously, the server
doesn't close down automatically;
113

113

00:05:53.890  -->  00:05:55.920
we need to close it down manually.
114

114

00:05:55.920  -->  00:05:57.660
So hopefully, now you'll
understand why the server
115

115

00:05:57.660  -->  00:05:59.290
doesn't terminate automatically:
116

116

00:05:59.290  -->  00:06:02.230
just because one client wants
out, doesn't mean they all do,
117

117

00:06:02.230  -->  00:06:04.320
and even if all the clients exit,
118

118

00:06:04.320  -->  00:06:06.990
other clients may well want
to connect in the future,
119

119

00:06:06.990  -->  00:06:09.280
and therefore, the server remains alive
120

120

00:06:09.280  -->  00:06:11.350
and listening, for that reason.
121

121

00:06:11.350  -->  00:06:13.780
Note though, that when
a client does send exit,
122

122

00:06:13.780  -->  00:06:15.740
the thread for that client terminates.
123

123

00:06:15.740  -->  00:06:18.280
So to confirm that, you
can actually run the server
124

124

00:06:18.280  -->  00:06:20.460
in debug mode; so what
we want to do first,
125

125

00:06:20.460  -->  00:06:21.900
that we wanna add a break-point
126

126

00:06:21.900  -->  00:06:23.450
on the socket dot close statement.
127

127

00:06:23.450  -->  00:06:25.210
So let's just close this down first,
128

128

00:06:25.210  -->  00:06:27.200
and terminate the server.
129

129

00:06:27.200  -->  00:06:29.720
Go to full screen again.
130

130

00:06:29.720  -->  00:06:31.920
Go to our echoer.
131

131

00:06:31.920  -->  00:06:34.740
And, under the socket
dot close, down here,
132

132

00:06:34.740  -->  00:06:36.420
we wanna add a break point.
133

133

00:06:36.420  -->  00:06:40.250
Then we're gonna run the
server in debug mode.
134

134

00:06:41.960  -->  00:06:45.130
I'm gonna run, and debug.
135

135

00:06:48.720  -->  00:06:51.020
Okay, so we're now running in debug mode.
136

136

00:06:51.020  -->  00:06:52.530
Now we're gonna come
back over to the client
137

137

00:06:52.530  -->  00:06:54.360
we're going to run to.
138

138

00:06:55.940  -->  00:06:58.500
Okay, we have the first one going.
139

139

00:06:58.500  -->  00:06:59.340
Tim.
140

140

00:07:00.360  -->  00:07:02.460
We'll have another one.
141

141

00:07:02.460  -->  00:07:04.810
Good ol' Bob again.
142

142

00:07:04.810  -->  00:07:06.470
Alright, so I've got two clients running,
143

143

00:07:06.470  -->  00:07:08.410
connecting to the server,
and the server's running
144

144

00:07:08.410  -->  00:07:11.380
in debug mode, and if I actually type exit
145

145

00:07:11.380  -->  00:07:13.040
for one of them now,
146

146

00:07:14.940  -->  00:07:19.110
notice that we've hit the
break point for the server.
147

147

00:07:21.100  -->  00:07:22.730
So if I continue, and I'll just go back
148

148

00:07:22.730  -->  00:07:24.040
and close this window down again,
149

149

00:07:24.040  -->  00:07:25.900
so we can see what's going on.
150

150

00:07:25.900  -->  00:07:28.240
Continue by clicking on run.
151

151

00:07:29.620  -->  00:07:31.070
And I've actually closed it down again,
152

152

00:07:31.070  -->  00:07:32.960
so let's actually just start it up again.
153

153

00:07:32.960  -->  00:07:35.430
I'll actually run it in debug
again; I wanted to show you
154

154

00:07:35.430  -->  00:07:37.710
what actually happens,
but before I do that,
155

155

00:07:37.710  -->  00:07:40.040
I'll close down the clients,
156

156

00:07:42.070  -->  00:07:46.420
terminate that, and we'll run
this again, in debug mode.
157

157

00:07:46.420  -->  00:07:47.340
Run, debug.
158

158

00:07:52.420  -->  00:07:54.180
And I actually need to
close this down now,
159

159

00:07:54.180  -->  00:07:55.340
because of the socket's still in use,
160

160

00:07:55.340  -->  00:07:57.960
so let's go ahead and do that.
161

161

00:07:57.960  -->  00:08:00.710
Terminate, didn't actually close it down.
162

162

00:08:00.710  -->  00:08:03.190
Leave that break point on though,
163

163

00:08:03.190  -->  00:08:06.720
because we wanna hit that
again, so we'll go into debug,
164

164

00:08:06.720  -->  00:08:10.590
run, that's better, it's now connecting.
165

165

00:08:10.590  -->  00:08:13.170
And we'll run our client again.
166

166

00:08:16.080  -->  00:08:17.830
And run a second one.
167

167

00:08:21.710  -->  00:08:23.740
Okay, so we've got two running again.
168

168

00:08:23.740  -->  00:08:27.570
And again, if I type in
exit, and press enter,
169

169

00:08:28.940  -->  00:08:30.640
the break point is hit.
170

170

00:08:30.640  -->  00:08:33.020
So that confirms that the
code is being executed
171

171

00:08:33.020  -->  00:08:35.790
on the server side, to close the socket
172

172

00:08:35.790  -->  00:08:38.620
when the client has issued
the, or, has set the text,
173

173

00:08:38.620  -->  00:08:40.510
exit, which of course was our prompt
174

174

00:08:40.510  -->  00:08:43.610
to actually close down
the client connexion.
175

175

00:08:43.610  -->  00:08:45.170
So now, what I wanted to do last time,
176

176

00:08:45.170  -->  00:08:47.800
was click on continue here,
which is the continue button
177

177

00:08:47.800  -->  00:08:50.110
over here to the left,
178

178

00:08:50.110  -->  00:08:53.230
and you can see now that
the server is still running,
179

179

00:08:53.230  -->  00:08:56.730
and I can go back now to the other client,
180

180

00:08:58.260  -->  00:09:00.950
type that in, and then I
can go back to the console,
181

181

00:09:00.950  -->  00:09:03.220
and we can see that it's still running.
182

182

00:09:03.220  -->  00:09:06.710
Alright, so that's the basics
of working with sockets.
183

183

00:09:06.710  -->  00:09:09.000
Now, before we move on to UDP,
184

184

00:09:09.000  -->  00:09:11.580
I wanna discuss timeouts, briefly.
185

185

00:09:11.580  -->  00:09:14.340
Now, when a client is
communicating with a server,
186

186

00:09:14.340  -->  00:09:16.400
it doesn't wanna block forever.
187

187

00:09:16.400  -->  00:09:19.130
If the server's gone
down, or it isn't sending
188

188

00:09:19.130  -->  00:09:21.020
a response for some other reason,
189

189

00:09:21.020  -->  00:09:23.740
then the client will want
to report back to the user,
190

190

00:09:23.740  -->  00:09:26.190
otherwise the user's gonna
think the application's frozen,
191

191

00:09:26.190  -->  00:09:28.340
or it's just died for some reason.
192

192

00:09:28.340  -->  00:09:31.130
So what we can do is, we can
actually set a timeout period
193

193

00:09:31.130  -->  00:09:33.960
on a socket, and the idea
here is that if a socket
194

194

00:09:33.960  -->  00:09:35.930
doesn't respond within the timeout,
195

195

00:09:35.930  -->  00:09:39.920
then we get a java.net.socket
timeout exception thrown.
196

196

00:09:39.920  -->  00:09:41.500
So let's actually try that out.
197

197

00:09:41.500  -->  00:09:44.350
We're gonna set a timeout for the client.
198

198

00:09:44.350  -->  00:09:46.390
So I'm gonna leave the server running,
199

199

00:09:46.390  -->  00:09:48.730
and open up the client code.
200

200

00:09:50.650  -->  00:09:52.440
And what we wanna do is
change this code here,
201

201

00:09:52.440  -->  00:09:54.110
of socket; at the moment, we've got socket
202

202

00:09:54.110  -->  00:09:56.600
local host 5,000.
203

203

00:09:56.600  -->  00:09:59.110
Below that, before the buffered reader,
204

204

00:09:59.110  -->  00:10:03.370
we can type socket dot set
205

205

00:10:03.370  -->  00:10:04.370
S-O timeout,
206

206

00:10:05.780  -->  00:10:08.500
and we'll do 5,000 for five seconds.
207

207

00:10:08.500  -->  00:10:11.210
So again, we're setting a
timeout of five seconds here,
208

208

00:10:11.210  -->  00:10:14.870
and we'll need to handle the
socket timeout exception.
209

209

00:10:14.870  -->  00:10:17.800
In this case, we're gonna
terminate the application,
210

210

00:10:17.800  -->  00:10:20.480
but in the real world, it
will depend on the situation.
211

211

00:10:20.480  -->  00:10:21.740
So you might wanna, for example,
212

212

00:10:21.740  -->  00:10:23.440
try sending the request again.
213

213

00:10:23.440  -->  00:10:25.400
You might want to abort
that particular action,
214

214

00:10:25.400  -->  00:10:27.540
and inform the user, or, perhaps
215

215

00:10:27.540  -->  00:10:29.450
you just might wanna
terminate the application.
216

216

00:10:29.450  -->  00:10:31.000
You might wanna give the user a choice,
217

217

00:10:31.000  -->  00:10:33.320
so there's a couple of
options there, basically.
218

218

00:10:33.320  -->  00:10:35.490
But for this demo app,
what we're gonna do is,
219

219

00:10:35.490  -->  00:10:38.420
we're gonna add a catch block
to the existing try block,
220

220

00:10:38.420  -->  00:10:41.090
and we're gonna catch the
exception outside the loop,
221

221

00:10:41.090  -->  00:10:45.180
and then terminate the client application.
222

222

00:10:45.180  -->  00:10:48.510
So down here, we're actually gonna catch
223

223

00:10:50.840  -->  00:10:54.570
a socket timeout exception, e,
224

224

00:10:54.570  -->  00:10:55.830
and then we're just going
to print out a message
225

225

00:10:55.830  -->  00:10:58.910
to the console, the socket timed out.
226

226

00:11:03.190  -->  00:11:05.700
And we're gonna leave the
other I-O exception in there,
227

227

00:11:05.700  -->  00:11:07.120
as it was before.
228

228

00:11:08.230  -->  00:11:12.390
And what we're gonna do then
is go back to the server code,
229

229

00:11:13.850  -->  00:11:16.750
and I commented this out before,
230

230

00:11:16.750  -->  00:11:19.210
let's put that code in that actually
231

231

00:11:19.210  -->  00:11:21.900
makes things sleep for 15 seconds.
232

232

00:11:21.900  -->  00:11:23.730
Put that code back in.
233

233

00:11:25.550  -->  00:11:28.550
And we'll actually stop this server.
234

234

00:11:31.930  -->  00:11:34.260
And we'll just run it again.
235

235

00:11:36.340  -->  00:11:37.980
And we'll actually take
off the break point
236

236

00:11:37.980  -->  00:11:39.670
this time as well.
237

237

00:11:39.670  -->  00:11:42.780
So again, what we've done
here, is, we've re-enabled
238

238

00:11:42.780  -->  00:11:45.180
the server sleep code so
that the server thread
239

239

00:11:45.180  -->  00:11:47.000
sleeps for 15 seconds.
240

240

00:11:47.000  -->  00:11:48.970
So, we restarted the server, and are about
241

241

00:11:48.970  -->  00:11:51.270
to start the client, and again, we've set
242

242

00:11:51.270  -->  00:11:53.730
the client socket timeout to five seconds.
243

243

00:11:53.730  -->  00:11:55.580
You can see that on line 16.
244

244

00:11:55.580  -->  00:11:57.420
And the server sleeps for 15 seconds
245

245

00:11:57.420  -->  00:11:59.510
each time the client sends a request.
246

246

00:11:59.510  -->  00:12:01.970
So consequently, the
socket should timeout,
247

247

00:12:01.970  -->  00:12:04.740
and the socket timeout
exception should be thrown.
248

248

00:12:04.740  -->  00:12:07.820
So let's actually see whether that works.
249

249

00:12:07.820  -->  00:12:12.800
And I'm just gonna close this
down as well, and start again.
250

250

00:12:12.800  -->  00:12:15.550
Then, we'll run our client again.
251

251

00:12:17.470  -->  00:12:19.560
So I'm gonna type in Tim,
252

252

00:12:20.830  -->  00:12:23.000
and just leave it, and see what happens.
253

253

00:12:23.000  -->  00:12:25.830
And you can see there, we
got the socket timed out.
254

254

00:12:25.830  -->  00:12:28.790
Notice also, that the
client also terminated.
255

255

00:12:28.790  -->  00:12:32.580
So, using timeouts is
a very important tool,
256

256

00:12:32.580  -->  00:12:35.640
and it prevents a client
from blocking forever.
257

257

00:12:35.640  -->  00:12:37.800
Alright, so that's all for TCP/IP.
258

258

00:12:37.800  -->  00:12:39.670
In the next video, we're
gonna start taking a look
259

259

00:12:39.670  -->  00:12:41.920
at another protocol, UDP,
260

260

00:12:41.920  -->  00:12:44.540
which stands for user datagram protocol.
261

261

00:12:44.540  -->  00:12:47.430
So, I'll see you in the next video.
