1
1

00:00:05,590  -->  00:00:06,810
- [Instructor] So far, we've written
2

2

00:00:06,810  -->  00:00:09,800
the locations and directions data as text,
3

3

00:00:09,800  -->  00:00:12,280
as well as a binary stream.
4

4

00:00:12,280  -->  00:00:16,020
Right now, we read and write
each object field individually.
5

5

00:00:16,020  -->  00:00:20,190
For example, we use readInt
and writeInt methods
6

6

00:00:20,190  -->  00:00:22,550
to read and write our location's ID,
7

7

00:00:22,550  -->  00:00:25,920
and we use readUTF and writeUTF methods
8

8

00:00:25,920  -->  00:00:28,920
to read and write a
location's description.
9

9

00:00:28,920  -->  00:00:32,120
Now, if an object had 20 fields,
10

10

00:00:32,120  -->  00:00:34,810
we'd actually have to call 20 methods.
11

11

00:00:34,810  -->  00:00:36,490
So instead of that, we can use
12

12

00:00:36,490  -->  00:00:40,560
the ObjectInputStream and
ObjectOutputStream classes
13

13

00:00:40,560  -->  00:00:43,350
to read and write
objects as a single unit.
14

14

00:00:43,350  -->  00:00:45,510
Now, when we write an object to a file,
15

15

00:00:45,510  -->  00:00:48,220
it has to be translated to a format
16

16

00:00:48,220  -->  00:00:50,390
that can be stored to a file,
17

17

00:00:50,390  -->  00:00:52,650
and then reassembled into an object later
18

18

00:00:52,650  -->  00:00:54,820
when it's read by an application.
19

19

00:00:54,820  -->  00:00:58,420
Now, the process of translating
a data structure or object
20

20

00:00:58,420  -->  00:01:01,410
into a format that can
be stored and recreated
21

21

00:01:01,410  -->  00:01:03,410
is called serialisation.
22

22

00:01:04,250  -->  00:01:06,900
Now, in Java, when we want
to use an object string
23

23

00:01:06,900  -->  00:01:09,490
to write and read the objects of a class,
24

24

00:01:09,490  -->  00:01:12,380
we have to make the class serializable.
25

25

00:01:12,380  -->  00:01:17,200
We do so by making it implement
the Serializable interface.
26

26

00:01:17,200  -->  00:01:19,480
Now this interface has got no methods,
27

27

00:01:19,480  -->  00:01:22,790
it's just used to give the JVM a heads up
28

28

00:01:22,790  -->  00:01:26,560
that we may want to serialise
the object to storage
29

29

00:01:26,560  -->  00:01:29,700
and to read it back again at some point.
30

30

00:01:29,700  -->  00:01:32,050
Now when we make a class serializable,
31

31

00:01:32,050  -->  00:01:33,580
it's strongly recommended
32

32

00:01:33,580  -->  00:01:37,920
that we declare a long field
called serialVersionUID.
33

33

00:01:37,920  -->  00:01:39,650
If we don't do so,
34

34

00:01:39,650  -->  00:01:41,820
the compiler will give us a warning.
35

35

00:01:41,820  -->  00:01:45,480
This warning can usually be
turned off when using an IDE,
36

36

00:01:45,480  -->  00:01:48,930
and are unfortunately
sometimes off by default,
37

37

00:01:48,930  -->  00:01:51,850
and it will let them calculate
a default value for us.
38

38

00:01:51,850  -->  00:01:55,210
However, different
compiler implementations,
39

39

00:01:55,210  -->  00:01:57,900
they calculate different default values,
40

40

00:01:57,900  -->  00:02:00,430
and that can lead to
problems down the road
41

41

00:02:00,430  -->  00:02:02,640
if we change the compiler we're using.
42

42

00:02:02,640  -->  00:02:04,120
Now, there are compilers, for example,
43

43

00:02:04,120  -->  00:02:06,710
rather than the one included with the JDK.
44

44

00:02:06,710  -->  00:02:08,260
For example, a class compiled
45

45

00:02:08,260  -->  00:02:10,370
with the standard Oracle compiler
46

46

00:02:10,370  -->  00:02:12,140
for a desktop application
47

47

00:02:12,140  -->  00:02:14,690
would be compiled by a different compiler
48

48

00:02:14,690  -->  00:02:17,240
if you were to add it
to an android project.
49

49

00:02:17,240  -->  00:02:18,310
So for that reason,
50

50

00:02:18,310  -->  00:02:21,770
it's recommended that if we
care about serialisation,
51

51

00:02:21,770  -->  00:02:26,540
we actually set the
serialVersionUID field ourselves.
52

52

00:02:26,540  -->  00:02:27,940
So we set that value.
53

53

00:02:27,940  -->  00:02:30,520
And it's recommended
that the field be private
54

54

00:02:30,520  -->  00:02:33,020
since no other class
should have to use it.
55

55

00:02:33,020  -->  00:02:37,270
So what is this
serialVersionUID field used for?
56

56

00:02:37,270  -->  00:02:40,540
Well, think of it as a sort of
version number for the class.
57

57

00:02:40,540  -->  00:02:42,940
Now if we don't explicitly set it,
58

58

00:02:42,940  -->  00:02:46,490
the compiler will create
it based on class details
59

59

00:02:46,490  -->  00:02:49,990
such as the number of fields
and methods, et cetera.
60

60

00:02:49,990  -->  00:02:51,680
And if we ever change a class,
61

61

00:02:51,680  -->  00:02:54,270
for example, by adding
another field or method,
62

62

00:02:54,270  -->  00:02:56,090
or change a field type,
63

63

00:02:56,090  -->  00:02:59,370
we'd have to change the
serialVersionUID value.
64

64

00:02:59,370  -->  00:03:01,880
When we read an object from a stream,
65

65

00:03:01,880  -->  00:03:05,140
the runtime checks the
stored serialVersionUID
66

66

00:03:05,140  -->  00:03:09,140
against the one contained
within the compiled class file.
67

67

00:03:09,140  -->  00:03:12,650
If they don't match, then
there's a compatibility problem
68

68

00:03:12,650  -->  00:03:16,180
and the runtime will throw
an InvalidClassException.
69

69

00:03:16,180  -->  00:03:18,930
Now, if we wanted later
versions of an application
70

70

00:03:18,930  -->  00:03:21,990
to be able to load files
created by earlier versions,
71

71

00:03:21,990  -->  00:03:23,570
we'd have to provide custom versions
72

72

00:03:23,570  -->  00:03:26,080
of the writeObject and readObject methods
73

73

00:03:26,080  -->  00:03:27,370
by overriding them,
74

74

00:03:27,370  -->  00:03:30,060
which are methods we use
to read and write objects.
75

75

00:03:30,060  -->  00:03:31,910
The bottom line here is that
76

76

00:03:31,910  -->  00:03:34,360
we don't have to worry about declaring
77

77

00:03:34,360  -->  00:03:37,080
a serialVersionUID field unless A:
78

78

00:03:37,080  -->  00:03:40,130
we explicitly use serialisation
79

79

00:03:40,130  -->  00:03:42,930
as we do when we use ObjectInputStream
80

80

00:03:42,930  -->  00:03:46,310
and the ObjectOutputStream classes, and B:
81

81

00:03:46,310  -->  00:03:49,650
there may be a compatibility
issue down the road.
82

82

00:03:49,650  -->  00:03:52,650
But some developers and
the Java documentation
83

83

00:03:52,650  -->  00:03:56,030
recommend always declaring when A is true,
84

84

00:03:56,030  -->  00:03:58,390
that's when we explicitly
use serialisation,
85

85

00:03:58,390  -->  00:04:01,380
or whether B also is true, and that's
86

86

00:04:01,380  -->  00:04:03,820
if there may be compatibility
issues down the road.
87

87

00:04:03,820  -->  00:04:05,360
So with that theory out of the way,
88

88

00:04:05,360  -->  00:04:07,740
let's actually go ahead
and modify our code
89

89

00:04:07,740  -->  00:04:12,620
to use the ObjectInputStream
and ObjectOutputStream classes.
90

90

00:04:12,620  -->  00:04:15,780
Our first step is to make the
location class serializable
91

91

00:04:15,780  -->  00:04:18,870
by having it implement the
Serializable interface.
92

92

00:04:18,870  -->  00:04:20,120
Let's go and have a look at that.
93

93

00:04:20,120  -->  00:04:21,120
So location.
94

94

00:04:23,660  -->  00:04:25,890
So we just want to change this now
95

95

00:04:25,890  -->  00:04:27,190
public class Location,
96

96

00:04:27,190  -->  00:04:31,470
we're going to do implements Serializable,
97

97

00:04:31,470  -->  00:04:34,630
and noticing that's in
the java.io package.
98

98

00:04:34,630  -->  00:04:37,550
Now we don't get any errors
about unimplemented methods
99

99

00:04:37,550  -->  00:04:40,550
and that's because Serializable
doesn't actually have any.
100

100

00:04:40,550  -->  00:04:43,050
Right, so if we take a
look at our Location class,
101

101

00:04:43,050  -->  00:04:46,240
we notice that at the moment
it's actually got three fields.
102

102

00:04:46,240  -->  00:04:48,580
An int, a String, and a Map.
103

103

00:04:49,620  -->  00:04:51,820
Now int and String are primitive types,
104

104

00:04:51,820  -->  00:04:53,740
but Map is an object,
105

105

00:04:53,740  -->  00:04:55,100
so will that be serialised
106

106

00:04:55,100  -->  00:04:57,530
when a Location object
is written to a file?
107

107

00:04:57,530  -->  00:04:59,460
Well, in our case it will be,
108

108

00:04:59,460  -->  00:05:02,940
because LinkedHashMap implements
the serializable interface.
109

109

00:05:02,940  -->  00:05:04,750
So we're actually lucky.
110

110

00:05:04,750  -->  00:05:06,580
When we write a Location object,
111

111

00:05:06,580  -->  00:05:09,250
the entire contents of the exits field
112

112

00:05:09,250  -->  00:05:11,140
will also be serialised.
113

113

00:05:11,140  -->  00:05:14,500
Now if LinkedHashMap didn't
implement serializable,
114

114

00:05:14,500  -->  00:05:16,520
we'd actually be responsible
for writing the code
115

115

00:05:16,520  -->  00:05:19,490
to store its contents
to the file ourselves.
116

116

00:05:19,490  -->  00:05:23,070
Now, ideally, when we want
an object to be serializable,
117

117

00:05:23,070  -->  00:05:26,130
all of its fields will
also be serializable.
118

118

00:05:26,130  -->  00:05:27,140
So you have to keep that in mind
119

119

00:05:27,140  -->  00:05:29,100
when writing your own classes.
120

120

00:05:29,100  -->  00:05:31,130
If a class we want to serialise
121

121

00:05:31,130  -->  00:05:33,720
will have fields from other
classes that you write,
122

122

00:05:33,720  -->  00:05:34,870
then you need to make sure
123

123

00:05:34,870  -->  00:05:37,760
those other classes are
serializable as well.
124

124

00:05:37,760  -->  00:05:39,940
But as I mentioned, we're
in luck for this application
125

125

00:05:39,940  -->  00:05:42,470
so serialising Location objects to a file
126

126

00:05:42,470  -->  00:05:44,260
will be straightforward.
127

127

00:05:44,260  -->  00:05:45,480
Alright, so our next step
128

128

00:05:45,480  -->  00:05:46,740
is to declare and assign
129

129

00:05:46,740  -->  00:05:50,310
the serialVersionUID field in Location.
130

130

00:05:50,310  -->  00:05:52,650
So we're just going to
start by doing that,
131

131

00:05:52,650  -->  00:05:55,190
and we're going to
assign it the number one,
132

132

00:05:55,190  -->  00:05:57,420
because it's version one,
133

133

00:05:57,420  -->  00:06:00,450
so we'll do that as private long,
134

134

00:06:00,450  -->  00:06:02,620
and it's serialVersionUID,
135

135

00:06:03,760  -->  00:06:06,100
making sure you get the exact
spelling there with case,
136

136

00:06:06,100  -->  00:06:06,930
equals 1L.
137

137

00:06:08,440  -->  00:06:10,190
And at the moment if
we have a look at that,
138

138

00:06:10,190  -->  00:06:13,050
IntelliJ is complaining that
this field is never used,
139

139

00:06:13,050  -->  00:06:15,890
but unfortunately, that's
because it doesn't recognise
140

140

00:06:15,890  -->  00:06:18,030
the field as the recommended one
141

141

00:06:18,030  -->  00:06:20,910
to include with serialisation.
142

142

00:06:20,910  -->  00:06:21,930
So next what we're going to do
143

143

00:06:21,930  -->  00:06:24,470
is modify the Locations.main method
144

144

00:06:24,470  -->  00:06:28,530
to write the Location objects
using an ObjectOutputStream.
145

145

00:06:28,530  -->  00:06:31,950
So let's go and have a look at Locations.
146

146

00:06:33,060  -->  00:06:34,950
So we got our main method here.
147

147

00:06:34,950  -->  00:06:37,520
Now remember that when
the class is loaded,
148

148

00:06:37,520  -->  00:06:39,280
the static initializer
149

149

00:06:39,280  -->  00:06:42,870
will run and read the Locations
from the locations.dat file.
150

150

00:06:42,870  -->  00:06:44,630
So that's this code down here
151

151

00:06:44,630  -->  00:06:46,470
in the static initializer block.
152

152

00:06:46,470  -->  00:06:48,740
So by the time the main method runs,
153

153

00:06:48,740  -->  00:06:52,780
we know the Locations are
loaded and available to use.
154

154

00:06:52,780  -->  00:06:54,800
So looking at the code that's there now,
155

155

00:06:54,800  -->  00:06:58,130
what I'm going to do is comment that out
156

156

00:06:59,070  -->  00:07:00,490
and write the replacement code.
157

157

00:07:00,490  -->  00:07:02,700
So I'm just gonna comment that
out so we've got that there
158

158

00:07:02,700  -->  00:07:05,090
if we need to refer back
to it at some point,
159

159

00:07:05,090  -->  00:07:06,320
and actually, what I'll do
160

160

00:07:06,320  -->  00:07:08,780
is I'll take a copy of this first line,
161

161

00:07:08,780  -->  00:07:12,240
cause that's going to be
the same try with resources,
162

162

00:07:12,240  -->  00:07:15,990
so I'll paste that in
and remove the comment,
163

163

00:07:17,690  -->  00:07:21,090
and in terms of writing the objects,
164

164

00:07:21,090  -->  00:07:24,010
we just type for Location location,
165

165

00:07:26,500  -->  00:07:30,400
it's going to be locations.values(),
166

166

00:07:30,400  -->  00:07:34,570
and it's locFile.writeObject(Location).
167

167

00:07:40,240  -->  00:07:42,740
But instead of using the DataOutputStream,
168

168

00:07:42,740  -->  00:07:46,240
we're going to use the ObjectOutputStream,
169

169

00:07:49,290  -->  00:07:50,120
like so.
170

170

00:07:51,240  -->  00:07:52,430
So I think you'll agree that,
171

171

00:07:52,430  -->  00:07:55,080
looking at the code that we've replaced,
172

172

00:07:55,080  -->  00:07:58,200
that we've considerably
simplified the code.
173

173

00:07:58,200  -->  00:08:00,730
Now since Location is serializable,
174

174

00:08:00,730  -->  00:08:02,180
and all of the non-primitive fields
175

175

00:08:02,180  -->  00:08:04,210
in Location are serializable,
176

176

00:08:04,210  -->  00:08:06,780
all we really have to
do is call writeObject
177

177

00:08:06,780  -->  00:08:10,650
for each Location object as
we've done here on line 31,
178

178

00:08:10,650  -->  00:08:12,190
and we're actually done.
179

179

00:08:12,190  -->  00:08:14,030
And also you can see that
180

180

00:08:14,030  -->  00:08:16,950
we can use a BufferedOutputStream
to buffer the outputs,
181

181

00:08:16,950  -->  00:08:18,310
I'm using that there still.
182

182

00:08:18,310  -->  00:08:20,200
So literally all we have
to do, which you saw me do,
183

183

00:08:20,200  -->  00:08:23,700
was change the DataOutputStream object
184

184

00:08:23,700  -->  00:08:26,620
to an ObjectOutputStream
as we did there and there
185

185

00:08:26,620  -->  00:08:27,540
on line 29.
186

186

00:08:28,850  -->  00:08:32,310
Alright, so let's now run
this Locations main method,
187

187

00:08:32,310  -->  00:08:33,920
and this is not the
application's main method,
188

188

00:08:33,920  -->  00:08:36,540
this is the main method in Locations,
189

189

00:08:36,540  -->  00:08:38,070
so I'm going to right-click that,
190

190

00:08:38,070  -->  00:08:41,240
run Locations.main().
191

191

00:08:43,010  -->  00:08:45,410
Alright, so that's run
okay without any errors,
192

192

00:08:45,410  -->  00:08:47,720
so let's actually have a look
at the locations.dat file,
193

193

00:08:47,720  -->  00:08:50,820
so I'm just going to double-click that.
194

194

00:08:50,820  -->  00:08:54,000
Now you can see here that
it's less human-readable
195

195

00:08:54,000  -->  00:08:55,360
than it was before,
196

196

00:08:55,360  -->  00:08:56,880
and in fact we're getting this error here
197

197

00:08:56,880  -->  00:08:58,130
that IntelliJ is telling us
198

198

00:08:58,130  -->  00:09:00,680
that the document contains very long lines
199

199

00:09:00,680  -->  00:09:02,830
and soft wraps were forcibly enabled
200

200

00:09:02,830  -->  00:09:04,740
to improve editor performance.
201

201

00:09:04,740  -->  00:09:07,340
And also a note here
about the wrong encoding.
202

202

00:09:07,340  -->  00:09:08,960
But that's actually fine,
203

203

00:09:08,960  -->  00:09:11,610
because a file containing
serialised objects
204

204

00:09:11,610  -->  00:09:14,280
is meant to be read by a Java application,
205

205

00:09:14,280  -->  00:09:17,260
and not by a human or
an IDE for that matter.
206

206

00:09:17,260  -->  00:09:19,860
Now we notice that right at
the top of the file here,
207

207

00:09:19,860  -->  00:09:22,400
you can see that the
package name is there.
208

208

00:09:22,400  -->  00:09:23,950
If you look carefully,
you can actually see
209

209

00:09:23,950  -->  00:09:26,650
there's actually some class names as well.
210

210

00:09:26,650  -->  00:09:29,230
So before we move onto
reading the objects,
211

211

00:09:29,230  -->  00:09:31,640
note that the ObjectOutputStream
212

212

00:09:31,640  -->  00:09:34,080
implements the DataOutput interface
213

213

00:09:34,080  -->  00:09:37,810
and the ObjectInputStream
implements the DataInputStream.
214

214

00:09:37,810  -->  00:09:40,880
Now the DataInput and
DataOutput interfaces
215

215

00:09:40,880  -->  00:09:44,180
contain the declarations
for the writeInt, readInt,
216

216

00:09:44,180  -->  00:09:47,160
as well as writeUTF and readUTF methods,
217

217

00:09:47,160  -->  00:09:50,490
and other read/write
specific type methods.
218

218

00:09:50,490  -->  00:09:52,590
Because of that, object
streams can contain
219

219

00:09:52,590  -->  00:09:56,160
a mix of serialised objects
and primitive types.
220

220

00:09:56,160  -->  00:09:58,040
So in other words, they're not limited
221

221

00:09:58,040  -->  00:10:00,580
to only containing serialised objects.
222

222

00:10:00,580  -->  00:10:03,430
In our case, we don't need
to mix objects and primitives
223

223

00:10:03,430  -->  00:10:06,290
but we could do it if
we actually needed to.
224

224

00:10:06,290  -->  00:10:08,740
Alright, so let's close
down this locations.dat file
225

225

00:10:08,740  -->  00:10:11,230
because we really don't need it anymore.
226

226

00:10:11,230  -->  00:10:13,850
The next thing we want to do, though,
227

227

00:10:13,850  -->  00:10:15,340
is back in Locations.java,
228

228

00:10:15,340  -->  00:10:16,340
we want to actually have a look
229

229

00:10:16,340  -->  00:10:19,710
at modifying the static initializer block.
230

230

00:10:19,710  -->  00:10:22,390
And again what I'm going to do here
231

231

00:10:22,390  -->  00:10:26,330
for simplicity I'm going to
actually just comment out
232

232

00:10:26,330  -->  00:10:28,580
the whole while loop because
233

233

00:10:28,580  -->  00:10:31,100
that's basically the major
part that we're changing there,
234

234

00:10:31,100  -->  00:10:33,130
and I'll just type that in again.
235

235

00:10:33,130  -->  00:10:33,960
First thing we'll do
236

236

00:10:33,960  -->  00:10:35,480
is we'll change the DataInputStream again
237

237

00:10:35,480  -->  00:10:37,480
to an ObjectInputStream,
238

238

00:10:40,780  -->  00:10:42,370
and just repeat it.
239

239

00:10:45,240  -->  00:10:46,870
and I'll write it up here, the new code,
240

240

00:10:46,870  -->  00:10:49,940
so we're gonna start with while not eof,
241

241

00:10:49,940  -->  00:10:52,010
so that code doesn't change,
242

242

00:10:52,010  -->  00:10:54,510
and you're going to add a try,
243

243

00:10:55,950  -->  00:11:00,110
a new Location location
equals, cast it as a location,
244

244

00:11:02,160  -->  00:11:06,330
locFile.readObject(), and print out
245

245

00:11:10,470  -->  00:11:11,550
Read location
246

246

00:11:13,590  -->  00:11:17,210
plus location.getLocationID(),
247

247

00:11:17,210  -->  00:11:20,080
plus a colon there to separate it,
248

248

00:11:20,080  -->  00:11:23,840
plus location.getDescription(),
249

249

00:11:23,840  -->  00:11:26,070
then on the next line,
250

250

00:11:26,070  -->  00:11:28,290
we'll print Found
251

251

00:11:28,290  -->  00:11:32,460
plus location.getExits().size()
plus exits.
252

252

00:11:37,190  -->  00:11:39,520
Then we'll do locations.put
253

253

00:11:40,960  -->  00:11:44,640
and it's gonna be
location.getLocationID(),
254

254

00:11:44,640  -->  00:11:46,720
comma, and then location.
255

255

00:11:48,310  -->  00:11:49,630
So the error you wanna catch here
256

256

00:11:49,630  -->  00:11:51,840
will be an end of file exception,
257

257

00:11:51,840  -->  00:11:53,340
so EOFException e,
258

258

00:11:55,830  -->  00:11:57,810
and we'll set eof to be equal to true,
259

259

00:11:57,810  -->  00:12:00,080
which will exit the while loop,
260

260

00:12:00,080  -->  00:12:02,110
an attempt of catching errors,
261

261

00:12:02,110  -->  00:12:03,770
and I might just put
this code at the top here
262

262

00:12:03,770  -->  00:12:05,520
so it's all together.
263

263

00:12:09,760  -->  00:12:11,480
We're catching an IOException,
264

264

00:12:11,480  -->  00:12:13,370
but also we need to catch
this exception as well,
265

265

00:12:13,370  -->  00:12:15,130
the ClassNotFoundException.
266

266

00:12:15,130  -->  00:12:19,220
So we're gonna do a catch
ClassNotFoundException,
267

267

00:12:21,600  -->  00:12:24,210
we're just gonna print out
a message if that happens,
268

268

00:12:24,210  -->  00:12:26,130
ClassNotFoundException,
269

269

00:12:28,580  -->  00:12:29,670
do e.getMessage().
270

270

00:12:29,670  -->  00:12:33,340
Perhaps we'll do that
as well if we get one.
271

271

00:12:37,310  -->  00:12:38,940
Okay.
272

272

00:12:38,940  -->  00:12:40,430
So a few things to note:
273

273

00:12:40,430  -->  00:12:41,930
firstly, once again I'm sure you'd agree
274

274

00:12:41,930  -->  00:12:44,650
the code has been greatly simplified,
275

275

00:12:44,650  -->  00:12:46,870
we changed the DataInputStream
276

276

00:12:46,870  -->  00:12:50,530
that was on line 39 to ObjectInputStream,
277

277

00:12:50,530  -->  00:12:52,040
but the rest of the try statement
278

278

00:12:52,040  -->  00:12:53,910
pretty much remained the same,
279

279

00:12:53,910  -->  00:12:54,750
and that's because we're still
280

280

00:12:54,750  -->  00:12:57,990
using this BufferedInputStream
to buffer the data.
281

281

00:12:57,990  -->  00:13:00,220
Now reading a Location object,
282

282

00:13:00,220  -->  00:13:02,340
which we're doing here on line 43,
283

283

00:13:02,340  -->  00:13:03,170
well that actually takes care
284

284

00:13:03,170  -->  00:13:05,670
of reading all its fields and exits.
285

285

00:13:05,670  -->  00:13:08,010
The readObject method returns an object,
286

286

00:13:08,010  -->  00:13:10,460
so we have to cast it
to a Location object,
287

287

00:13:10,460  -->  00:13:13,130
which again we're doing on line 43,
288

288

00:13:13,130  -->  00:13:14,810
now once the object is read,
289

289

00:13:14,810  -->  00:13:17,200
all we have to do is add
it to the locations map
290

290

00:13:17,200  -->  00:13:19,260
in the Locations class
291

291

00:13:19,260  -->  00:13:22,200
which we're doing right here on line 47.
292

292

00:13:22,200  -->  00:13:23,610
We're also printing out the information
293

293

00:13:23,610  -->  00:13:24,890
as you can see there,
294

294

00:13:24,890  -->  00:13:26,470
on lines 44 and 45,
295

295

00:13:27,450  -->  00:13:28,910
but this time we're getting the values
296

296

00:13:28,910  -->  00:13:30,940
from the location object created
297

297

00:13:30,940  -->  00:13:33,770
by the readObject call on line 43.
298

298

00:13:34,910  -->  00:13:36,640
Now in addition to our other exception,
299

299

00:13:36,640  -->  00:13:39,080
you saw me having to add another catch
300

300

00:13:39,080  -->  00:13:41,380
which was the ClassNotFoundException,
301

301

00:13:41,380  -->  00:13:43,520
and that's here on line 54.
302

302

00:13:43,520  -->  00:13:44,870
Now this is gonna be thrown
303

303

00:13:44,870  -->  00:13:47,010
when the runtime reads
an object from the stream
304

304

00:13:47,010  -->  00:13:50,860
and it can't find the corresponding
class on the classpath.
305

305

00:13:50,860  -->  00:13:52,990
Now for example, if another application
306

306

00:13:52,990  -->  00:13:55,250
that didn't contain the Location class
307

307

00:13:55,250  -->  00:13:58,950
tries to read the objects
inside the locations.dat file,
308

308

00:13:58,950  -->  00:14:01,930
then it will actually get
a ClassNotFoundException.
309

309

00:14:01,930  -->  00:14:03,190
Right, so let's end the video here
310

310

00:14:03,190  -->  00:14:04,710
because it's getting a little bit long.
311

311

00:14:04,710  -->  00:14:06,250
In the next video, we'll come back
312

312

00:14:06,250  -->  00:14:08,520
and we'll run this Locations.main method
313

313

00:14:08,520  -->  00:14:10,930
and check that the static
initializer block code
314

314

00:14:10,930  -->  00:14:12,750
is actually working as well.
315

315

00:14:12,750  -->  00:14:15,350
So I'll see you in the next video.
