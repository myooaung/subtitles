WEBVTT
1
1

00:00:05.420  -->  00:00:08.560
In the previous video,
we talked about the if keyword,
2

2

00:00:08.560  -->  00:00:11.510
and then went into more
detail about the code block.
3

3

00:00:11.510  -->  00:00:15.190
And we also talked about some of
the issues with code blocks and
4

4

00:00:15.190  -->  00:00:16.550
duplication of code.
5

5

00:00:16.550  -->  00:00:19.660
What we're going to do in this
video is talk about methods,
6

6

00:00:19.660  -->  00:00:23.390
which is a better way of ensuring
that your code isn't duplicated, and
7

7

00:00:23.390  -->  00:00:25.820
also makes your code
a lot easier to maintain.
8

8

00:00:25.820  -->  00:00:27.580
So I'm gonna make a bit of space here.
9

9

00:00:27.580  -->  00:00:31.940
And what I'm going to do is I'm
gonna paste the code that we used in
10

10

00:00:31.940  -->  00:00:33.380
the previous video.
11

11

00:00:33.380  -->  00:00:37.430
And if you recall it was this code and
then when we ran it,
12

12

00:00:37.430  -->  00:00:39.240
we got two final scores.
13

13

00:00:39.240  -->  00:00:43.680
So we got a 2,300 and 11,600.
14

14

00:00:43.680  -->  00:00:46.300
And of course the big
issue was if you recall,
15

15

00:00:46.300  -->  00:00:49.660
I changed the code in one place
in the first code block, but
16

16

00:00:49.660  -->  00:00:53.880
not in the second code block, showing
you how easy it was to have errors.
17

17

00:00:53.880  -->  00:00:57.360
Because you've got duplication of code
that is essentially doing the same thing.
18

18

00:00:57.360  -->  00:00:58.820
And it's just not really convenient.
19

19

00:00:58.820  -->  00:01:01.850
And if nothing else,
it's actually more effort for
20

20

00:01:01.850  -->  00:01:04.690
you to have to create
this code multiple times.
21

21

00:01:04.690  -->  00:01:08.290
A lot easier if we can create code once,
put it in an area, and
22

22

00:01:08.290  -->  00:01:09.780
use it time and time again.
23

23

00:01:09.780  -->  00:01:11.350
And that's what a method gives us.
24

24

00:01:11.350  -->  00:01:14.640
So let's have an attempt
at creating a method now.
25

25

00:01:14.640  -->  00:01:19.600
Firstly, you may not be aware of this,
but we've been using a method all along.
26

26

00:01:19.600  -->  00:01:21.950
This entire thing here,
this entire section of code,
27

27

00:01:21.950  -->  00:01:23.810
that is actually a method.
28

28

00:01:23.810  -->  00:01:26.390
And the method has the name of main.
29

29

00:01:26.390  -->  00:01:29.760
And all the code in the middle of it
is the statements that form the method.
30

30

00:01:29.760  -->  00:01:34.620
So if we wanna execute the method main,
this is what's gonna be executed,
31

31

00:01:34.620  -->  00:01:36.430
all that code that's in there.
32

32

00:01:36.430  -->  00:01:39.780
So what we're gonna do is we're
going to create our own method.
33

33

00:01:39.780  -->  00:01:42.200
We're gonna call it calculateScore.
34

34

00:01:42.200  -->  00:01:45.530
So I'm gonna put it down here,
underneath the last brace.
35

35

00:01:45.530  -->  00:01:49.250
And you can see that brace matches
up with the public static void main.
36

36

00:01:49.250  -->  00:01:52.610
This is an IntelliJ's way of saying
that these two things line up.
37

37

00:01:52.610  -->  00:01:56.160
So we have to start our code for
a new method outside of another method.
38

38

00:01:56.160  -->  00:02:01.460
You can't put a method within another
method, they need to be outside of it.
39

39

00:02:01.460  -->  00:02:04.920
And also when you're creating a method,
you don't wanna put it too far down.
40

40

00:02:04.920  -->  00:02:08.080
We don't wanna put it outside
this public class definition, and
41

41

00:02:08.080  -->  00:02:10.620
we'll be talking more about
that in future videos.
42

42

00:02:10.620  -->  00:02:12.620
It has to be within that area there.
43

43

00:02:12.620  -->  00:02:14.220
So, this is where we
would actually type it.
44

44

00:02:14.220  -->  00:02:17.760
So, we're gonna call our
method calculateScore.
45

45

00:02:17.760  -->  00:02:21.850
So, we type it,
we type public static void,
46

46

00:02:21.850  -->  00:02:27.340
I'm putting spaces between all of them,
calculateScore.
47

47

00:02:32.460  -->  00:02:34.750
Now don't worry about public and static,
48

48

00:02:34.750  -->  00:02:37.970
we'll be talking about
those a lot in the future.
49

49

00:02:37.970  -->  00:02:40.960
For now just keep note that you
need to actually specify and
50

50

00:02:40.960  -->  00:02:45.890
use the terms public and
static when you're defining a new method.
51

51

00:02:45.890  -->  00:02:49.810
And void, so, for the three terms
here the public, the static and
52

52

00:02:49.810  -->  00:02:53.310
the void, all in lower case and
all separated by a space.
53

53

00:02:53.310  -->  00:02:56.530
Don't worry what they mean at the moment,
we don't need to know that.
54

54

00:02:56.530  -->  00:02:58.330
We'll come back to that shortly.
55

55

00:02:58.330  -->  00:03:02.230
But, they are all keywords as we
discussed in a previous video.
56

56

00:03:02.230  -->  00:03:06.410
The ones highlighted in blue are keywords,
so they're part of the Java language.
57

57

00:03:06.410  -->  00:03:10.800
So what we need to do is put
our code in between the braces.
58

58

00:03:10.800  -->  00:03:14.540
Anything that’s in between the braces
is a statement that is part
59

59

00:03:14.540  -->  00:03:18.170
of this method that we’ve
called calculateScore.
60

60

00:03:18.170  -->  00:03:20.710
And when we execute this method, and
61

61

00:03:20.710  -->  00:03:25.330
I’ll show you how to do that shortly, all
the code we put in here will be executed.
62

62

00:03:25.330  -->  00:03:26.520
So to do that,
63

63

00:03:26.520  -->  00:03:30.170
I'm gonna copy this first portion of
the code and I'm gonna paste it in.
64

64

00:03:31.820  -->  00:03:34.770
So, I've pasted it into
our calculateScore method.
65

65

00:03:35.890  -->  00:03:41.100
And now what we can do is from within
the main method, we can call this method.
66

66

00:03:41.100  -->  00:03:42.190
So, how do we do that?
67

67

00:03:42.190  -->  00:03:45.750
Well, firstly we'll delete this part
out cuz we don't need this now,
68

68

00:03:45.750  -->  00:03:47.890
because actually that will occur in here.
69

69

00:03:47.890  -->  00:03:54.000
So to execute this calculateScore
method we just type calculateScore.
70

70

00:03:54.000  -->  00:03:56.950
I can see as I started typing,
IntelliJ came up and said oh,
71

71

00:03:56.950  -->  00:03:58.730
do you mean calculateScore?
72

72

00:03:58.730  -->  00:04:02.200
If that's the one we want, you just press
Enter and just put it in there for us.
73

73

00:04:03.660  -->  00:04:08.940
And you also may not have noticed but this
was a light gray before the actual name.
74

74

00:04:08.940  -->  00:04:11.890
But now we've put that
in to turn to black.
75

75

00:04:11.890  -->  00:04:14.080
And what that's saying
is IntelliJ's saying,
76

76

00:04:14.080  -->  00:04:17.200
I can see that this
method is being used now.
77

77

00:04:17.200  -->  00:04:17.830
Just to confirm,
78

78

00:04:17.830  -->  00:04:22.280
if I delete that, it goes to light gray
again and it says it's never been used.
79

79

00:04:22.280  -->  00:04:26.180
So that's a handy way to know if you've
got any methods that aren't being used in
80

80

00:04:26.180  -->  00:04:27.000
your programs.
81

81

00:04:27.000  -->  00:04:29.130
Check to see whether they're
light gray in IntelliJ.
82

82

00:04:29.130  -->  00:04:30.910
We're gonna put that code back.
83

83

00:04:30.910  -->  00:04:34.760
So, what we've done now is we've
actually said, when we get
84

84

00:04:34.760  -->  00:04:39.650
to this portion of the code, I want you
to jump ahead and then run all this code.
85

85

00:04:39.650  -->  00:04:42.200
And once you get to the end,
come back where you left off,
86

86

00:04:42.200  -->  00:04:44.440
then continue on from down here.
87

87

00:04:44.440  -->  00:04:49.110
So what should happen is, look,
it'll define the variables.
88

88

00:04:49.110  -->  00:04:50.640
It'll run this through once and
89

89

00:04:50.640  -->  00:04:53.600
then it'll come through and
run the second part for us.
90

90

00:04:53.600  -->  00:04:55.050
So, let's try it out.
91

91

00:04:55.050  -->  00:04:58.310
We should get the same result.
92

92

00:04:58.310  -->  00:05:00.630
And you can see that
it's worked quite nicely.
93

93

00:05:00.630  -->  00:05:02.600
So, how would we do the second component?
94

94

00:05:02.600  -->  00:05:06.650
Well, we would normally have to
create a second method to do
95

95

00:05:06.650  -->  00:05:08.670
this second part of the code.
96

96

00:05:08.670  -->  00:05:09.500
But of course,
97

97

00:05:09.500  -->  00:05:13.530
doing that would mean that we are
effectively duplicating our work again.
98

98

00:05:13.530  -->  00:05:15.490
So we haven't really fixed anything.
99

99

00:05:15.490  -->  00:05:20.270
All we've really done would have been just
to convert our two code blocks to two
100

100

00:05:20.270  -->  00:05:20.920
methods.
101

101

00:05:20.920  -->  00:05:23.210
So there must be a better
way of doing that.
102

102

00:05:23.210  -->  00:05:24.530
Well there actually is with methods,
103

103

00:05:24.530  -->  00:05:29.290
because we've only started to use
the very basic components of methods.
104

104

00:05:29.290  -->  00:05:33.790
So if you think about it, so what we'd
really wanna do, what would be ideal would
105

105

00:05:33.790  -->  00:05:37.500
be is if we could pass this information,
whether it was gameOver,
106

106

00:05:37.500  -->  00:05:42.510
the score, the level completed, and also
the bonus, to pass this to the method.
107

107

00:05:42.510  -->  00:05:46.360
So it doesn't have to create
the variables, so they're sent to it and
108

108

00:05:46.360  -->  00:05:48.490
that it can actually work
with those variables.
109

109

00:05:48.490  -->  00:05:50.090
Well, as it turns out, we can do that.
110

110

00:05:50.090  -->  00:05:52.460
We can actually pass
information to a method.
111

111

00:05:52.460  -->  00:05:55.890
So what we need to do is we need
to look in this bracket area and
112

112

00:05:55.890  -->  00:05:59.110
we need to define the parameters
that are part of this.
113

113

00:05:59.110  -->  00:06:01.440
I'm just gonna close this so
I've got a bit more space.
114

114

00:06:01.440  -->  00:06:06.510
So, what we need to do is define
in the method what parameters or
115

115

00:06:06.510  -->  00:06:11.350
what information we're sending
through to it from our main method,
116

116

00:06:11.350  -->  00:06:14.050
from where we're actually
calling the method.
117

117

00:06:14.050  -->  00:06:17.780
So to do that, we just type in
the type of the variable and
118

118

00:06:17.780  -->  00:06:19.780
then the name we wanna use it.
119

119

00:06:19.780  -->  00:06:24.520
So we can top Boolean, gameOver.
120

120

00:06:24.520  -->  00:06:29.040
And we separate each variable that we
wanna pass the type of information with
121

121

00:06:29.040  -->  00:06:29.600
a comma.
122

122

00:06:29.600  -->  00:06:34.280
So the second one, we're gonna put
a score, which of course is an int, so
123

123

00:06:34.280  -->  00:06:35.440
it's int score.
124

124

00:06:35.440  -->  00:06:36.970
You notice I'm not
putting the value there,
125

125

00:06:36.970  -->  00:06:40.490
I'm only putting the data type,
and the name of the variable.
126

126

00:06:40.490  -->  00:06:42.740
You'll understand why shortly,
why we're not putting the value.
127

127

00:06:44.110  -->  00:06:48.390
The third one, was the level completed,
also an int, levelCompleted.
128

128

00:06:50.210  -->  00:06:53.170
The last one was a bonus,
we're going to call that int bonus.
129

129

00:06:54.450  -->  00:07:00.350
So, what we've done is we've now said this
method now has to be sent four parameters.
130

130

00:07:01.420  -->  00:07:05.200
And they're a Boolean and three ints.
131

131

00:07:05.200  -->  00:07:08.890
So, you notice by doing that,
first we've got errors here now.
132

132

00:07:08.890  -->  00:07:10.510
But we've also got an error up here now.
133

133

00:07:10.510  -->  00:07:13.770
So it's actually wanting,
it's expecting four parameters and
134

134

00:07:13.770  -->  00:07:16.390
these are the four parameters
we've defined here.
135

135

00:07:16.390  -->  00:07:19.570
But, it's actually saying well,
the arguments that you've actually sent,
136

136

00:07:19.570  -->  00:07:21.070
you haven't sent me any at all.
137

137

00:07:21.070  -->  00:07:23.770
So there's none at all and
that's why it's actually complaining.
138

138

00:07:23.770  -->  00:07:28.620
So, the parameters is what we define in
this section when we're setting up a new
139

139

00:07:28.620  -->  00:07:29.200
method.
140

140

00:07:29.200  -->  00:07:35.310
They're the parameters, but arguments are
the actual values, not the data type and
141

141

00:07:35.310  -->  00:07:40.750
not the variable name but the actual
values that we wanna send to the method.
142

142

00:07:40.750  -->  00:07:42.760
Now, so
we'll come back to that in a second.
143

143

00:07:42.760  -->  00:07:45.670
So what we wanna do here is we
wanna actually send the data
144

144

00:07:46.670  -->  00:07:50.210
by placing the arguments to
the calulateScore function.
145

145

00:07:50.210  -->  00:07:51.200
So how do we do that?
146

146

00:07:51.200  -->  00:07:52.920
We can type the values that we want.
147

147

00:07:52.920  -->  00:07:58.950
So, we can actually just type, true 800.
148

148

00:07:58.950  -->  00:08:00.660
And just to confirm,
if you go back and have a look.
149

149

00:08:02.420  -->  00:08:03.810
We've only typed two parameters.
150

150

00:08:03.810  -->  00:08:07.000
IntelliJ is saying, okay,
you've got two there, I can see gameOver,
151

151

00:08:07.000  -->  00:08:10.630
the actual argument is set to true and
score set to 800.
152

152

00:08:10.630  -->  00:08:14.020
So they're gonna be the values that
match up as we call the method, but
153

153

00:08:14.020  -->  00:08:16.040
there's still two we need to finish off.
154

154

00:08:16.040  -->  00:08:18.340
And they are level completed,
155

155

00:08:18.340  -->  00:08:24.180
noticing I'm putting a comma between
them both, levelCompleted and bonus.
156

156

00:08:24.180  -->  00:08:29.130
As soon as I enter the last one, we
suddenly haven't got any errors anymore,
157

157

00:08:29.130  -->  00:08:34.010
because as far as IntelliJ's concerned,
the actual arguments that we're
158

158

00:08:34.010  -->  00:08:37.990
passing match the parameters
we've defined for the method.
159

159

00:08:37.990  -->  00:08:40.070
And this is really important.
160

160

00:08:40.070  -->  00:08:42.270
If you don't match those entirely,
you will get an error.
161

161

00:08:43.620  -->  00:08:46.770
So in this case,
because we're matched up properly,
162

162

00:08:46.770  -->  00:08:50.890
IntelliJ is happy with that error,
but it's still complaining here.
163

163

00:08:50.890  -->  00:08:54.780
And the thing is when you're
creating a method, and
164

164

00:08:54.780  -->  00:08:59.110
you're defining parameters of
a certain type and a name,
165

165

00:08:59.110  -->  00:09:03.630
you then don't have to create
them in the method at all.
166

166

00:09:03.630  -->  00:09:04.650
So we can actually delete that.
167

167

00:09:06.090  -->  00:09:11.780
Cuz what actually happens is if you define
these parameters, Java will automatically
168

168

00:09:11.780  -->  00:09:16.220
create variables with the appropriate
data type for us, which is really nice.
169

169

00:09:16.220  -->  00:09:19.780
And they'll be deleted when the process
goes back to the line after
170

170

00:09:19.780  -->  00:09:20.990
the calculateScore.
171

171

00:09:20.990  -->  00:09:26.140
So in this case I deleted those variables,
so there's now a variable called gameOver,
172

172

00:09:26.140  -->  00:09:31.300
score, levelCompleted and bonus that have
been created automatically by Java for us.
173

173

00:09:31.300  -->  00:09:34.880
Because we've defined those
as parameters for our method.
174

174

00:09:34.880  -->  00:09:36.600
And now, we've got no errors, so
175

175

00:09:36.600  -->  00:09:39.500
what we should be able to do is
actually just run this code.
176

176

00:09:39.500  -->  00:09:43.900
And we should get the same result
as we had with our code blocks.
177

177

00:09:43.900  -->  00:09:46.300
And you can see,
we got exactly the same answer.
178

178

00:09:46.300  -->  00:09:47.600
So far, so good.
179

179

00:09:47.600  -->  00:09:51.060
And we cleaned up some of the code,
but it's still a little bit messy.
180

180

00:09:51.060  -->  00:09:53.810
And the reason it's messy is we've
still got this extra line here.
181

181

00:09:53.810  -->  00:09:56.170
And I've also got these variables.
182

182

00:09:56.170  -->  00:09:58.500
Let's change the second one by doing this.
183

183

00:09:58.500  -->  00:10:02.850
calculateScore(true,) again,
cuz that's the first parameter.
184

184

00:10:02.850  -->  00:10:04.250
You notice as I'm typing,
185

185

00:10:04.250  -->  00:10:08.300
IntelliJ is highlighting which parameter
you're up to when you're typing.
186

186

00:10:08.300  -->  00:10:09.700
Which is really nice,
it does that automatically.
187

187

00:10:09.700  -->  00:10:11.460
So, the second parameter was 10,000.
188

188

00:10:14.640  -->  00:10:19.230
Third level was 8, and
the fourth one was 200.
189

189

00:10:19.230  -->  00:10:22.130
So they're the four parameters and
they match up to the score,
190

190

00:10:22.130  -->  00:10:23.770
the levelCompleted and the bonus,
191

191

00:10:23.770  -->  00:10:27.870
which is the second statement that
we're actually going to execute.
192

192

00:10:27.870  -->  00:10:31.320
But notice this time,
I'm actually typing the values indirectly,
193

193

00:10:31.320  -->  00:10:33.520
I'm not using variables or
anything like that.
194

194

00:10:34.710  -->  00:10:37.040
So, consequently,
what I can now do is delete that.
195

195

00:10:38.500  -->  00:10:43.430
Then I can actually delete these
cuz we don't need them anymore.
196

196

00:10:43.430  -->  00:10:46.790
And now when I run,
the first value's the same but
197

197

00:10:46.790  -->  00:10:49.520
notice the second value has been fixed.
198

198

00:10:49.520  -->  00:10:50.280
Why has it been fixed?
199

199

00:10:50.280  -->  00:10:53.680
Well, we're calling
the calculateScore method.
200

200

00:10:53.680  -->  00:10:54.650
It's got the fix.
201

201

00:10:55.650  -->  00:10:59.170
So of course the second value
has now got a score plus 1,000,
202

202

00:10:59.170  -->  00:11:01.410
cuz it's correctly got the fix in there.
203

203

00:11:01.410  -->  00:11:05.750
You've noticed that we've only actually
programmed this code once now.
204

204

00:11:05.750  -->  00:11:10.010
So there's only one place that we can make
changes to it and we can make one change,
205

205

00:11:10.010  -->  00:11:12.810
like we could change that
final score to 2,000.
206

206

00:11:12.810  -->  00:11:14.630
Execute it.
207

207

00:11:14.630  -->  00:11:17.970
And both scores automatically get updated.
208

208

00:11:17.970  -->  00:11:21.490
That's because they're both using
the same method, which is pretty cool.
209

209

00:11:21.490  -->  00:11:25.590
Now the other thing we could do here is,
instead of putting half values and half
210

210

00:11:25.590  -->  00:11:29.790
variable names, I could actually finish
this off and actually put five there.
211

211

00:11:29.790  -->  00:11:34.670
Cuz that was the level completed,
five and the bonus was 100.
212

212

00:11:34.670  -->  00:11:39.110
I can make this even more efficient by
deleting these variables because of course
213

213

00:11:39.110  -->  00:11:40.750
we don't need them anymore.
214

214

00:11:40.750  -->  00:11:44.010
And we've now got a far more
efficient looking bit of code.
215

215

00:11:44.010  -->  00:11:48.150
We've literally only got two lines that
actually send information through to
216

216

00:11:48.150  -->  00:11:48.850
the method.
217

217

00:11:48.850  -->  00:11:51.150
And we run it and
we get the same result but
218

218

00:11:51.150  -->  00:11:56.190
of course we've added the final score of
2000, which is why the values are higher.
219

219

00:11:56.190  -->  00:11:59.250
So that's one of the great
features of methods,
220

220

00:11:59.250  -->  00:12:03.060
is that it makes it a lot easier for
you to maintain your code,
221

221

00:12:03.060  -->  00:12:08.020
because we've only got one place now
where our code is modified, one method.
222

222

00:12:08.020  -->  00:12:10.890
And also you notice that we
cleaned up a lot of code,
223

223

00:12:10.890  -->  00:12:13.910
there was a lot of extra code
we had in our main method.
224

224

00:12:13.910  -->  00:12:15.790
We're down literally to two lines.
225

225

00:12:15.790  -->  00:12:19.640
Now incidentally there's nothing stopping
us actually using the variables that way,
226

226

00:12:19.640  -->  00:12:21.050
the way that we had them before.
227

227

00:12:21.050  -->  00:12:26.180
Like for example,
we could paste this in and
228

228

00:12:26.180  -->  00:12:32.280
then we could change our
arguments to put gameOver,
229

229

00:12:32.280  -->  00:12:37.570
score, levelCompleted, bonus, like so.
230

230

00:12:37.570  -->  00:12:40.670
And also down here we
can do the second thing,
231

231

00:12:40.670  -->  00:12:44.270
we can put those new values there,
delete this out.
232

232

00:12:44.270  -->  00:12:49.870
I'm putting that new call, so
this is a good way of also creating code.
233

233

00:12:49.870  -->  00:12:53.810
Cuz looking at this now, you can say okay,
this is the calculateScore method.
234

234

00:12:53.810  -->  00:12:57.860
GameOver must be in some sort of
indicator as to whether it's game over.
235

235

00:12:57.860  -->  00:13:01.660
That's obviously the score we're sending
through the levelCompleted and the bonus.
236

236

00:13:01.660  -->  00:13:04.900
You can see how that would make
more sense from reading that.
237

237

00:13:04.900  -->  00:13:08.350
You get an understanding of what
this particular method does for us.
238

238

00:13:08.350  -->  00:13:12.720
So you're free to use hard coded numbers,
239

239

00:13:12.720  -->  00:13:15.630
literal values that I just
had there previously.
240

240

00:13:15.630  -->  00:13:20.180
Or you can define variables,
if you like, and use the variable name.
241

241

00:13:20.180  -->  00:13:24.240
And what happens is, when the method
is called, if you're typing,
242

242

00:13:24.240  -->  00:13:27.690
if you're using variable
names as arguments.
243

243

00:13:27.690  -->  00:13:32.030
The case of of gameOver, what happens is
the calculateScore method gets called.
244

244

00:13:32.030  -->  00:13:36.930
Boolean gameOver, it looks at the value of
the gameOver, in this case it'll be set to
245

245

00:13:36.930  -->  00:13:40.870
true, and that's what the Boolean
gameOver parameter gets set to.
246

246

00:13:40.870  -->  00:13:44.070
And of course,
that then matches with this in the method.
247

247

00:13:44.070  -->  00:13:45.730
So either way will actually work.
248

248

00:13:45.730  -->  00:13:49.520
Now, that's pretty good in it's own right,
the fact that we can actually call
249

249

00:13:49.520  -->  00:13:53.260
a method and get it to do something and
to make our code look a lot cleaner.
250

250

00:13:53.260  -->  00:13:57.730
But, it does actually get even cooler
than that, because what we can also do is
251

251

00:13:57.730  -->  00:14:02.460
we can get our method to do some
calculations much like it's doing now.
252

252

00:14:02.460  -->  00:14:06.370
But we can send back the result of
that calculation or that processing,
253

253

00:14:06.370  -->  00:14:10.740
whatever we're doing, back to the code
that it was executing that actually had
254

254

00:14:10.740  -->  00:14:12.840
called the method in the first place.
255

255

00:14:12.840  -->  00:14:15.150
So, we can get the two of
them to talk together,
256

256

00:14:15.150  -->  00:14:19.080
so we can calculate something and send the
value back to the code that was actually
257

257

00:14:19.080  -->  00:14:21.000
calling the method in the first place.
258

258

00:14:21.000  -->  00:14:24.140
And it would probably be easier if I show
you rather than try and explain anymore.
259

259

00:14:25.350  -->  00:14:29.150
So to do that, this makes use
returning a value it's called,
260

260

00:14:29.150  -->  00:14:31.320
makes use of this void keyword.
261

261

00:14:31.320  -->  00:14:34.340
So what void means is
don't send any value back.
262

262

00:14:34.340  -->  00:14:36.790
So if you're creating a method and
263

263

00:14:36.790  -->  00:14:39.960
you don't want to return any information,
you use the word void.
264

264

00:14:39.960  -->  00:14:43.350
Void means nothing, either empty,
don't return anything.
265

265

00:14:43.350  -->  00:14:47.770
But if we do wanna return something, we
need to change the word void to the type
266

266

00:14:47.770  -->  00:14:51.860
of data, the data type of the information
that we'll wanna send back.
267

267

00:14:51.860  -->  00:14:56.050
So in this case, let's actually
return what the final score was,
268

268

00:14:56.050  -->  00:14:59.890
return that as a score that we
can use back in its method here.
269

269

00:14:59.890  -->  00:15:03.470
So, in other words, right here,
when we call this calculateScore method,
270

270

00:15:03.470  -->  00:15:05.900
we don't know what this
calculation ends up being.
271

271

00:15:05.900  -->  00:15:08.200
We only see that it's
displayed on the screen.
272

272

00:15:08.200  -->  00:15:13.640
But let's actually get that number that
was calculated here returned back to us.
273

273

00:15:13.640  -->  00:15:16.480
So, what we need to do is
change this void first.
274

274

00:15:16.480  -->  00:15:21.550
We wanna say we want to return some
data that is of data type int.
275

275

00:15:22.880  -->  00:15:25.890
Immediately IntelliJ says,
you've got an error.
276

276

00:15:25.890  -->  00:15:29.660
And the error is that we've
defined it as returning data but
277

277

00:15:29.660  -->  00:15:32.450
we haven't actually
told it to do that yet.
278

278

00:15:32.450  -->  00:15:36.310
So what we need to do is we to add
an additional line of code to tell it to
279

279

00:15:36.310  -->  00:15:37.870
return that information.
280

280

00:15:37.870  -->  00:15:39.050
So how do we do that?
281

281

00:15:39.050  -->  00:15:47.290
We come down here and
we put return finalScore.
282

282

00:15:47.290  -->  00:15:50.430
What that actually does is it sends
back the finalScore back to this part of
283

283

00:15:50.430  -->  00:15:51.390
the program.
284

284

00:15:51.390  -->  00:15:53.530
But the thing is,
we've still got an error.
285

285

00:15:53.530  -->  00:15:55.170
So why have we got an error?
286

286

00:15:55.170  -->  00:15:58.300
Well, when you're sending
some data back with a method,
287

287

00:15:58.300  -->  00:16:02.560
you've gotta make sure no matter
what that some value gets sent back.
288

288

00:16:02.560  -->  00:16:06.920
It's not okay to just if gameOver
is set to true to return a value.
289

289

00:16:06.920  -->  00:16:10.340
We also have to send a value back
even if gameOver isn't true.
290

290

00:16:10.340  -->  00:16:14.130
So in other words, all the program
variations have to be accounted for and
291

291

00:16:14.130  -->  00:16:16.880
we've got to return something every time
292

292

00:16:16.880  -->  00:16:20.600
if we specify that we
are gonna be returning data.
293

293

00:16:20.600  -->  00:16:25.560
So a quick challenge for you,
how do you think we would change
294

294

00:16:25.560  -->  00:16:30.770
the code to return a -1 if
gameOver was equal to false?
295

295

00:16:30.770  -->  00:16:33.040
Pause the video, see if you can
figure that out, and come back and
296

296

00:16:33.040  -->  00:16:33.890
I'll show you how to do that.
297

297

00:16:35.410  -->  00:16:36.590
Okay, how did you go?
298

298

00:16:36.590  -->  00:16:37.970
There's two ways of doing that.
299

299

00:16:37.970  -->  00:16:42.640
We could actually put an else here,
else, and
300

300

00:16:42.640  -->  00:16:45.750
we could just put return -1.
301

301

00:16:45.750  -->  00:16:47.050
That then removes the error, so
302

302

00:16:47.050  -->  00:16:49.980
you can see there's now no longer
a problem as far as Java's concerned.
303

303

00:16:49.980  -->  00:16:53.520
Because if gameOver is set to true,
it's gonna return something.
304

304

00:16:53.520  -->  00:16:58.880
Else, in other words the else here is no
matter what else happens, return a -1.
305

305

00:16:58.880  -->  00:17:00.100
So that's gonna work.
306

306

00:17:00.100  -->  00:17:01.370
But we could also have done it this way.
307

307

00:17:01.370  -->  00:17:03.600
We could also have put a return -1 here.
308

308

00:17:07.860  -->  00:17:09.560
So what happens there
is the same deal here.
309

309

00:17:09.560  -->  00:17:11.870
The return gets executed here.
310

310

00:17:11.870  -->  00:17:15.490
Soon as the return keyword is hit,
soon as it processes that line,
311

311

00:17:15.490  -->  00:17:17.060
it doesn't go any further.
312

312

00:17:17.060  -->  00:17:21.040
It immediately goes back to wherever
the call code was that actually called
313

313

00:17:21.040  -->  00:17:22.690
the method in the first place.
314

314

00:17:22.690  -->  00:17:23.580
So consequently,
315

315

00:17:23.580  -->  00:17:27.830
we'll only get to this line here if
this previous line hadn't been executed.
316

316

00:17:27.830  -->  00:17:30.990
And therefore Java is happy that
we've covered our bases and
317

317

00:17:30.990  -->  00:17:34.350
we've returned something no
matter what the program flow was.
318

318

00:17:35.000  -->  00:17:36.200
now one final point if
319

319

00:17:36.200  -->  00:17:37.820
you're wondering why we're returning
320

320

00:17:37.820  -->  00:17:40.250
negative one here in programming terms
321

321

00:17:40.250  -->  00:17:43.120
negative one is conventionally used to
322

322

00:17:43.120  -->  00:17:45.040
indicate an error and in searching
323

323

00:17:45.040  -->  00:17:47.140
algorithms negative 1 indicates an
324

324

00:17:47.140  -->  00:17:49.780
invalid value or a value not found so
325

325

00:17:49.780  -->  00:17:50.510
that's the reason
326

326

00:17:50.510  -->  00:17:51.900
using negative one here
327

327

00:17:53.320  -->  00:17:55.200
Okay, this video is starting to drag on.
328

328

00:17:55.200  -->  00:17:57.880
So what I'm going to do now
is pause this video and
329

329

00:17:57.880  -->  00:18:00.690
we'll continue on with
methods in the next video.
