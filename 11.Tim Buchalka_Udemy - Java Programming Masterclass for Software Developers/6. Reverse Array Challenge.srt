1
1

00:00:00,000  -->  00:00:06,060
oh it's time for another challenge
2

2

00:00:06,060  -->  00:00:09,389
this is the reverse challenge so firstly
3

3

00:00:09,389  -->  00:00:11,759
write a method called reverse that's got
4

4

00:00:11,759  -->  00:00:14,549
an int array as a parameter now the
5

5

00:00:14,549  -->  00:00:16,859
method shouldn't return any value in
6

6

00:00:16,859  -->  00:00:18,150
other words the method is allowed to
7

7

00:00:18,150  -->  00:00:21,180
modify the array parameter so in main
8

8

00:00:21,180  -->  00:00:23,670
test the reverse method and print the
9

9

00:00:23,670  -->  00:00:27,599
array both reversed and non reversed so
10

10

00:00:27,599  -->  00:00:29,670
to reverse the array you have to swap
11

11

00:00:29,670  -->  00:00:31,769
the elements so that the first element
12

12

00:00:31,769  -->  00:00:33,899
is swapped with the last element and so
13

13

00:00:33,899  -->  00:00:35,850
on so for example if the array contains
14

14

00:00:35,850  -->  00:00:39,390
1 2 3 4 5 then the reversed array would
15

15

00:00:39,390  -->  00:00:41,010
be 5 4 3 2 1
16

16

00:00:41,010  -->  00:00:43,079
and create a new console project with
17

17

00:00:43,079  -->  00:00:45,450
the lam reverse array challenge for this
18

18

00:00:45,450  -->  00:00:47,520
challenge alright so that's it see if
19

19

00:00:47,520  -->  00:00:49,260
you can figure it out pause the video
20

20

00:00:49,260  -->  00:00:51,030
now and try your hand at this challenge
21

21

00:00:51,030  -->  00:00:53,039
and once you've completed come back to
22

22

00:00:53,039  -->  00:00:54,570
see my solution so pause the video now
23

23

00:00:54,570  -->  00:00:58,039
and I'll see you when you get back okay
24

24

00:00:58,039  -->  00:00:59,670
so welcome back
25

25

00:00:59,670  -->  00:01:01,680
hopefully managed to finish that so
26

26

00:01:01,680  -->  00:01:03,300
let's go through and solve this
27

27

00:01:03,300  -->  00:01:05,400
particular challenge so what we need to
28

28

00:01:05,400  -->  00:01:07,080
do is start off by writing the method
29

29

00:01:07,080  -->  00:01:10,159
reverse so let's go ahead and do that
30

30

00:01:10,159  -->  00:01:13,790
let's go ahead and type private static
31

31

00:01:13,790  -->  00:01:18,659
void reverse then in parentheses int
32

32

00:01:18,659  -->  00:01:22,350
lifting right square brackets array then
33

33

00:01:22,350  -->  00:01:23,820
I left to right curly braces as per
34

34

00:01:23,820  -->  00:01:26,430
normal so within this method we're going
35

35

00:01:26,430  -->  00:01:28,590
to use a for loop to go through the
36

36

00:01:28,590  -->  00:01:30,659
array elements the tricky part is the
37

37

00:01:30,659  -->  00:01:33,150
condition needed for the loop so inside
38

38

00:01:33,150  -->  00:01:35,549
the loop we have to swap the elements as
39

39

00:01:35,549  -->  00:01:37,560
in the first element we'll swap it at
40

40

00:01:37,560  -->  00:01:39,869
the last the second with this V next to
41

41

00:01:39,869  -->  00:01:42,509
last and so on now later in this video
42

42

00:01:42,509  -->  00:01:44,850
I'll provide some images demonstrating
43

43

00:01:44,850  -->  00:01:46,680
this swapping pattern so before running
44

44

00:01:46,680  -->  00:01:49,350
the loop let's declare an int variable
45

45

00:01:49,350  -->  00:01:53,159
so int max index you're going to set
46

46

00:01:53,159  -->  00:01:56,280
that to the maximum value that an index
47

47

00:01:56,280  -->  00:01:58,710
can use this variable will represent the
48

48

00:01:58,710  -->  00:02:01,290
maximum index that we can use now we
49

49

00:02:01,290  -->  00:02:02,909
already know that the index ranges from
50

50

00:02:02,909  -->  00:02:06,149
0 to the length of the array minus 1 so
51

51

00:02:06,149  -->  00:02:07,350
that will be the value that we'll store
52

52

00:02:07,350  -->  00:02:10,140
in here so we set that to Ray dot length
53

53

00:02:10,140  -->  00:02:12,140
minus 1
54

54

00:02:12,140  -->  00:02:15,300
now I stated this max index variable
55

55

00:02:15,300  -->  00:02:18,420
represents the maximum index our next
56

56

00:02:18,420  -->  00:02:20,070
variable will be called a half-length
57

57

00:02:20,070  -->  00:02:22,470
which will represent half of the array
58

58

00:02:22,470  -->  00:02:24,390
length now this is where it becomes
59

59

00:02:24,390  -->  00:02:26,520
tricky we need to loop through the array
60

60

00:02:26,520  -->  00:02:29,070
and continue swapping until we get to
61

61

00:02:29,070  -->  00:02:32,490
the halfway point of the array so let's
62

62

00:02:32,490  -->  00:02:34,170
declare that variable now that's going
63

63

00:02:34,170  -->  00:02:39,180
to be int half length is equal to a R a
64

64

00:02:39,180  -->  00:02:42,540
dot length divided by two now you will
65

65

00:02:42,540  -->  00:02:44,580
be wondering here Tim what are we only
66

66

00:02:44,580  -->  00:02:45,870
looped through until we reach the
67

67

00:02:45,870  -->  00:02:48,660
halfway point of the array well the
68

68

00:02:48,660  -->  00:02:51,150
reason is with swapping elements so once
69

69

00:02:51,150  -->  00:02:53,940
we reach halfway the second half has
70

70

00:02:53,940  -->  00:02:56,400
already been swapped with the first so
71

71

00:02:56,400  -->  00:02:58,140
the array is now fully reversed at that
72

72

00:02:58,140  -->  00:03:00,030
point now the image that I'll bring up
73

73

00:03:00,030  -->  00:03:01,940
later in this video will show you and
74

74

00:03:01,940  -->  00:03:04,260
hopefully make that more clearer all
75

75

00:03:04,260  -->  00:03:05,970
right so next let's start generating the
76

76

00:03:05,970  -->  00:03:08,070
code for our for loop so the next time
77

77

00:03:08,070  -->  00:03:10,860
I'm going to type 4 in parentheses int I
78

78

00:03:10,860  -->  00:03:15,440
equals 0 I less than 1/2 length
79

79

00:03:15,440  -->  00:03:20,700
semicolon then an I plus plus an open
80

80

00:03:20,700  -->  00:03:22,680
the code block there now inside the loop
81

81

00:03:22,680  -->  00:03:25,350
we want to swap two elements first to do
82

82

00:03:25,350  -->  00:03:27,900
this we need to create a temporary int
83

83

00:03:27,900  -->  00:03:30,239
variable which I'm going to call temp so
84

84

00:03:30,239  -->  00:03:36,299
the top in int temp equals array I in
85

85

00:03:36,299  -->  00:03:37,860
square bracket so we're saving the
86

86

00:03:37,860  -->  00:03:40,110
current element position or element I as
87

87

00:03:40,110  -->  00:03:42,150
we're cycling through the array so
88

88

00:03:42,150  -->  00:03:43,730
basically since I like the I variable
89

89

00:03:43,730  -->  00:03:46,290
represents index starting from position
90

90

00:03:46,290  -->  00:03:48,870
0 in the first iteration we have to swap
91

91

00:03:48,870  -->  00:03:51,420
the element at index 0 which is our
92

92

00:03:51,420  -->  00:03:53,910
first element with the index at the Max
93

93

00:03:53,910  -->  00:03:56,880
index which is our last element so to
94

94

00:03:56,880  -->  00:03:59,989
accomplish this we want to type array
95

95

00:03:59,989  -->  00:04:03,299
and in square brackets I is equal to
96

96

00:04:03,299  -->  00:04:06,420
array swear brackets again it's going to
97

97

00:04:06,420  -->  00:04:11,190
be max index minus I and closing off the
98

98

00:04:11,190  -->  00:04:12,450
square brackets and semicolon to
99

99

00:04:12,450  -->  00:04:15,690
underline now we're our temp variable we
100

100

00:04:15,690  -->  00:04:18,169
save the element that was at index I
101

101

00:04:18,169  -->  00:04:21,060
then on the next line we moved the
102

102

00:04:21,060  -->  00:04:24,450
element from index max index take I to
103

103

00:04:24,450  -->  00:04:25,710
index I so
104

104

00:04:25,710  -->  00:04:27,600
now all we have to do is move the first
105

105

00:04:27,600  -->  00:04:30,479
element to the last index which is where
106

106

00:04:30,479  -->  00:04:32,880
our temp variable comes into play so we
107

107

00:04:32,880  -->  00:04:36,050
can know type Perret and square brackets
108

108

00:04:36,050  -->  00:04:40,259
max index minus I and square brackets
109

109

00:04:40,259  -->  00:04:40,680
there
110

110

00:04:40,680  -->  00:04:44,759
equals temp so we're putting that value
111

111

00:04:44,759  -->  00:04:46,590
in there because the element originally
112

112

00:04:46,590  -->  00:04:48,660
had index I was saved to the temp
113

113

00:04:48,660  -->  00:04:51,870
variable on line 14 now that's all the
114

114

00:04:51,870  -->  00:04:53,880
code we need to swap the elements
115

115

00:04:53,880  -->  00:04:55,650
it might look strange at first but
116

116

00:04:55,650  -->  00:04:59,220
basically as I progresses from zero to
117

117

00:04:59,220  -->  00:05:01,650
the index of half of the length each
118

118

00:05:01,650  -->  00:05:04,139
element swaps with its mirror element
119

119

00:05:04,139  -->  00:05:06,240
meaning the first with the last the
120

120

00:05:06,240  -->  00:05:08,280
second with the next to last and so on
121

121

00:05:08,280  -->  00:05:10,590
but we no need to test this out to
122

122

00:05:10,590  -->  00:05:12,120
confirm that it does work
123

123

00:05:12,120  -->  00:05:13,919
so let's write some code in the main
124

124

00:05:13,919  -->  00:05:18,449
method to do just that all right so I'm
125

125

00:05:18,449  -->  00:05:20,280
going to start by creating an array we
126

126

00:05:20,280  -->  00:05:22,440
can use for testing purposes so I'm
127

127

00:05:22,440  -->  00:05:24,030
going to type int left to right square
128

128

00:05:24,030  -->  00:05:28,050
brackets array is equal to then we're
129

129

00:05:28,050  -->  00:05:30,000
going to put curly braces there to
130

130

00:05:30,000  -->  00:05:36,990
initialize it to 1 5 3 7 11 9 15 so
131

131

00:05:36,990  -->  00:05:39,599
there's our array you'll obviously
132

132

00:05:39,599  -->  00:05:42,030
that's not ordered at the moment so now
133

133

00:05:42,030  -->  00:05:43,229
that we've got this array we need to
134

134

00:05:43,229  -->  00:05:45,599
reverse it but before we do that we
135

135

00:05:45,599  -->  00:05:47,610
should print it out since the reverse
136

136

00:05:47,610  -->  00:05:49,740
method is modifying the array parameter
137

137

00:05:49,740  -->  00:05:51,659
so let's actually try printing this out
138

138

00:05:51,659  -->  00:05:56,400
first so we'll print out array is equal
139

139

00:05:56,400  -->  00:06:01,469
to plus arrays dot two string passing
140

140

00:06:01,469  -->  00:06:05,340
our array to that document all right so
141

141

00:06:05,340  -->  00:06:07,080
after we've printed out our unmodified
142

142

00:06:07,080  -->  00:06:09,389
array let's call the method reverse and
143

143

00:06:09,389  -->  00:06:12,150
then we'll print out the array again so
144

144

00:06:12,150  -->  00:06:13,020
on the next line i'm going to type
145

145

00:06:13,020  -->  00:06:16,139
reverse alright we're passing our array
146

146

00:06:16,139  -->  00:06:18,690
as an argument then let's just print out
147

147

00:06:18,690  -->  00:06:21,919
the next line we're gonna put reversed
148

148

00:06:21,919  -->  00:06:27,330
array is equal to plus arrays dot two
149

149

00:06:27,330  -->  00:06:31,380
string again and the same array that's
150

150

00:06:31,380  -->  00:06:33,839
an argument all right so let's now run
151

151

00:06:33,839  -->  00:06:35,639
the application to test out our code to
152

152

00:06:35,639  -->  00:06:38,569
see if it works
153

153

00:06:38,569  -->  00:06:40,279
all right so you can see first my
154

154

00:06:40,279  -->  00:06:44,509
original rate 1 5 3 7 11 9 and 15 with
155

155

00:06:44,509  -->  00:06:46,399
the elements then then the next line
156

156

00:06:46,399  -->  00:06:51,949
we've got the reverse version 15 9 11 7
157

157

00:06:51,949  -->  00:06:55,009
3 5 and 1 that means that we've achieved
158

158

00:06:55,009  -->  00:06:57,770
the desired result of reversing the
159

159

00:06:57,770  -->  00:06:59,360
array or the elements I should say in
160

160

00:06:59,360  -->  00:07:02,509
the array now just to see what happens
161

161

00:07:02,509  -->  00:07:04,969
let's go back to our reverse method and
162

162

00:07:04,969  -->  00:07:06,709
let's actually remove this divided by 2
163

163

00:07:06,709  -->  00:07:08,959
component and remove that to show you
164

164

00:07:08,959  -->  00:07:10,429
what happens if we don't divide the
165

165

00:07:10,429  -->  00:07:14,330
array length by 2 you're right so I'm
166

166

00:07:14,330  -->  00:07:19,369
gonna run it again and you can see in
167

167

00:07:19,369  -->  00:07:20,779
this case we're now not getting the
168

168

00:07:20,779  -->  00:07:22,729
correct result since the elements
169

169

00:07:22,729  -->  00:07:24,649
continue to swap until the end of the
170

170

00:07:24,649  -->  00:07:26,869
array even though the original first
171

171

00:07:26,869  -->  00:07:28,819
element correctly swapped with the last
172

172

00:07:28,819  -->  00:07:31,550
when we reach the last element and then
173

173

00:07:31,550  -->  00:07:33,860
swaps back into the first position so in
174

174

00:07:33,860  -->  00:07:35,869
this case we swapped 1 and 15 as the
175

175

00:07:35,869  -->  00:07:38,269
first iteration and swapped them again
176

176

00:07:38,269  -->  00:07:41,149
in the last iteration as a result both
177

177

00:07:41,149  -->  00:07:43,039
lines in the console have the same
178

178

00:07:43,039  -->  00:07:45,349
elements at first glance it might look
179

179

00:07:45,349  -->  00:07:47,509
like our code is not working at all but
180

180

00:07:47,509  -->  00:07:49,399
it actually is working we just happened
181

181

00:07:49,399  -->  00:07:51,050
to swap all the elements back to their
182

182

00:07:51,050  -->  00:07:52,939
initial position again so let's revert
183

183

00:07:52,939  -->  00:07:59,149
that change and run it again you can see
184

184

00:07:59,149  -->  00:08:00,639
we've now got the correct result again
185

185

00:08:00,639  -->  00:08:03,079
so let's a standard earth earlier we're
186

186

00:08:03,079  -->  00:08:04,430
not going to review some images showing
187

187

00:08:04,430  -->  00:08:06,529
the execution steps of the for loop and
188

188

00:08:06,529  -->  00:08:08,449
the functionality of the right of the
189

189

00:08:08,449  -->  00:08:10,369
array just to hopefully clarify any
190

190

00:08:10,369  -->  00:08:12,079
doubts you might have on how it's
191

191

00:08:12,079  -->  00:08:15,169
working now for our example we're going
192

192

00:08:15,169  -->  00:08:17,119
to use an array with the elements 1 2 3
193

193

00:08:17,119  -->  00:08:19,399
4 5 you know for the first iteration
194

194

00:08:19,399  -->  00:08:22,189
that variable I equals 0 and if we look
195

195

00:08:22,189  -->  00:08:24,529
at the lower left box here we could see
196

196

00:08:24,529  -->  00:08:25,939
what this code would look like in the
197

197

00:08:25,939  -->  00:08:27,979
for loop as you can see we're storing
198

198

00:08:27,979  -->  00:08:30,319
the element that is at index 0 in our
199

199

00:08:30,319  -->  00:08:32,959
temp variable so in this case the
200

200

00:08:32,959  -->  00:08:35,599
element at index 0 has a value of 1 next
201

201

00:08:35,599  -->  00:08:37,519
we set the element at index 0 to a value
202

202

00:08:37,519  -->  00:08:40,130
of 5 since that is the value in the last
203

203

00:08:40,130  -->  00:08:43,849
index index 4 finally the last element
204

204

00:08:43,849  -->  00:08:46,610
is set to the value of temp which is 1
205

205

00:08:46,610  -->  00:08:49,279
and which is also the original value at
206

206

00:08:49,279  -->  00:08:51,000
index 0 now these
207

207

00:08:51,000  -->  00:08:52,770
tips are executed during each loop
208

208

00:08:52,770  -->  00:08:55,440
iteration on the right hand side of this
209

209

00:08:55,440  -->  00:08:56,940
image there's an illustration showing
210

210

00:08:56,940  -->  00:08:59,460
how the array transforms when in the
211

211

00:08:59,460  -->  00:09:02,010
line int temp equals array left square
212

212

00:09:02,010  -->  00:09:04,080
bracket I right square bracket is
213

213

00:09:04,080  -->  00:09:06,660
executed we're storing the first element
214

214

00:09:06,660  -->  00:09:09,150
in the temp variable the next line sets
215

215

00:09:09,150  -->  00:09:10,980
the element at index 0 to the value of
216

216

00:09:10,980  -->  00:09:13,680
the last element in other words 5 is now
217

217

00:09:13,680  -->  00:09:16,350
an index 0 and the last line changes the
218

218

00:09:16,350  -->  00:09:19,920
last index to a value of 1 since temp
219

219

00:09:19,920  -->  00:09:22,320
has a value of 1 the neech iteration of
220

220

00:09:22,320  -->  00:09:23,640
the loop follows this process
221

221

00:09:23,640  -->  00:09:25,650
now after the first iteration is
222

222

00:09:25,650  -->  00:09:29,520
complete the array is now 5 2 3 4 1 so
223

223

00:09:29,520  -->  00:09:31,490
let's now move on to the next iteration
224

224

00:09:31,490  -->  00:09:35,340
now in this iteration I equals 1 and our
225

225

00:09:35,340  -->  00:09:38,820
array reads is 5 2 3 4 1 due to the
226

226

00:09:38,820  -->  00:09:42,030
processing in the first iteration so
227

227

00:09:42,030  -->  00:09:43,680
this time temp will be the element at
228

228

00:09:43,680  -->  00:09:46,380
index 1 and the logic will follow that
229

229

00:09:46,380  -->  00:09:48,990
of the first iteration so to sum up the
230

230

00:09:48,990  -->  00:09:50,850
element at index 1 swaps with the
231

231

00:09:50,850  -->  00:09:53,910
element at index 3 in our arrays can
232

232

00:09:53,910  -->  00:09:55,589
tree 5 4 3 2 1
233

233

00:09:55,589  -->  00:09:58,260
meaning it's now fully reversed the I
234

234

00:09:58,260  -->  00:10:00,480
variable will still increment and become
235

235

00:10:00,480  -->  00:10:04,320
2 but the for loop will stop since half
236

236

00:10:04,320  -->  00:10:07,080
length equals 2 so in other words in our
237

237

00:10:07,080  -->  00:10:09,600
loop condition we now have 2 less than 2
238

238

00:10:09,600  -->  00:10:12,060
since that condition is false the loop
239

239

00:10:12,060  -->  00:10:14,400
won't continue and as demonstrated
240

240

00:10:14,400  -->  00:10:15,990
before if we continue looping through
241

241

00:10:15,990  -->  00:10:18,150
the whole array while following the same
242

242

00:10:18,150  -->  00:10:20,160
logic then the elements will actually be
243

243

00:10:20,160  -->  00:10:22,110
moved back to their original index and
244

244

00:10:22,110  -->  00:10:23,760
the array in fact wouldn't have been
245

245

00:10:23,760  -->  00:10:25,980
reversed all right so that's it for the
246

246

00:10:25,980  -->  00:10:28,020
challenge I hope the looping logic made
247

247

00:10:28,020  -->  00:10:29,520
sense and I look forward to seeing you
248

248

00:10:29,520  -->  00:10:32,360
in the next video
