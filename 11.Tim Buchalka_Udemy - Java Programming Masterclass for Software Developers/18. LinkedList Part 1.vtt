WEBVTT
1
1

00:00:05.420  -->  00:00:08.470
So in this video, we're gonna
start talking about a linked list.
2

2

00:00:08.470  -->  00:00:11.640
This is another top list and we've
already dealt with arrays in general.
3

3

00:00:11.640  -->  00:00:14.620
We've talked about those extensively and
of course we also
4

4

00:00:14.620  -->  00:00:18.130
talked about the ArrayList and we've used
them quite a bit in the code as well.
5

5

00:00:18.130  -->  00:00:20.580
So the linked list is
another type of list.
6

6

00:00:20.580  -->  00:00:21.780
So just as a recap,
7

7

00:00:21.780  -->  00:00:24.050
you will need to know this because
of the way that linked lists work.
8

8

00:00:24.050  -->  00:00:27.270
We've already seen that an array's
an index list of items.
9

9

00:00:27.270  -->  00:00:28.710
So they can be primitive types for
10

10

00:00:28.710  -->  00:00:33.700
example, ints, doubles, those types of
things in the case of a normal array.
11

11

00:00:33.700  -->  00:00:36.890
Or of course we can also use objects
in the case of an ArrayList and
12

12

00:00:36.890  -->  00:00:37.860
actually store them like that.
13

13

00:00:37.860  -->  00:00:41.390
So we've seen how to access individual
elements by using an index.
14

14

00:00:41.390  -->  00:00:44.990
So the sixth item, for example,
would be found at index position five.
15

15

00:00:44.990  -->  00:00:47.450
So just as a quick recap,
let's just look at this on the screen.
16

16

00:00:48.700  -->  00:00:53.260
You can see there that we've actually got
an array on screen of seven integers.
17

17

00:00:53.260  -->  00:00:56.190
So in the index position to the left
is the number that we use to
18

18

00:00:56.190  -->  00:00:57.950
access the particular value.
19

19

00:00:57.950  -->  00:01:00.990
So the first element of course
we use index position 0.
20

20

00:01:00.990  -->  00:01:06.580
He grabs the value 34, index position 1,
grabs the value of 18, so on and so forth.
21

21

00:01:06.580  -->  00:01:07.960
Now what happens internally, and
22

22

00:01:07.960  -->  00:01:11.720
this is important to get a good
understanding of linked lists,
23

23

00:01:11.720  -->  00:01:16.360
is that java will actually allocate
four bytes of memory, for each integer.
24

24

00:01:16.360  -->  00:01:20.370
Because it needs up to that amount to be
able to store the highest value integer,
25

25

00:01:20.370  -->  00:01:23.280
and we have talked about that
in much earlier in the course,
26

26

00:01:23.280  -->  00:01:24.880
about how that memory works.
27

27

00:01:24.880  -->  00:01:30.290
So, you can see what happens there is that
Java will try to do this contiguously.
28

28

00:01:30.290  -->  00:01:31.400
So you can see in this case what is,
29

29

00:01:31.400  -->  00:01:36.800
stand is actually a formula that Java can
used to actually figure out which address,
30

30

00:01:36.800  -->  00:01:39.970
which physical memory address
to use to grab the value.
31

31

00:01:39.970  -->  00:01:42.750
So what it can do quite simply,
it can look at the base address.
32

32

00:01:42.750  -->  00:01:45.890
This is actually for
the first element in the array.
33

33

00:01:45.890  -->  00:01:48.230
So this would be index position 0.
34

34

00:01:48.230  -->  00:01:50.250
So you can actually use that formula, and
35

35

00:01:50.250  -->  00:01:54.320
what I can actually do is calculate
the actual address based on that.
36

36

00:01:54.320  -->  00:01:56.220
So in other words,
looking at the base address,
37

37

00:01:56.220  -->  00:01:59.370
which in this case is 100 plus
four times the index number.
38

38

00:01:59.370  -->  00:02:04.510
So for example, if we want to get access
to the actual third index position.
39

39

00:02:04.510  -->  00:02:07.960
Se we would actually would
multiply index position 3
40

40

00:02:07.960  -->  00:02:12.940
by 4 because four bytes in each integer so
that's 3 times 4 is 12.
41

41

00:02:12.940  -->  00:02:16.430
We would add that to our base address
which was 100 which was the first element.
42

42

00:02:16.430  -->  00:02:18.760
And that would give us
an answer of 112 and
43

43

00:02:18.760  -->  00:02:22.630
you can see on the screen that index
position 3, it's value is 112.
44

44

00:02:22.630  -->  00:02:25.630
So that's how Java sort of
handles things internally and
45

45

00:02:25.630  -->  00:02:29.350
this type of thing works for
primitive types much the same way.
46

46

00:02:29.350  -->  00:02:33.420
In the example of a double for
arguments sake well it uses up to eight
47

47

00:02:33.420  -->  00:02:38.560
bytes of memory for each double, because
it needs that for flagging point numbers.
48

48

00:02:38.560  -->  00:02:41.730
So the same format would apply, we would
actually still do the calculation but
49

49

00:02:41.730  -->  00:02:45.590
instead of doing, multiplying by four,
for four bytes for an integer.
50

50

00:02:45.590  -->  00:02:49.400
We multiply by eight,
which is eight bytes for a double.
51

51

00:02:49.400  -->  00:02:53.670
So that works fine for perimeter types
where you've got a known value and
52

52

00:02:53.670  -->  00:02:55.150
it's always gonna be the same link.
53

53

00:02:55.150  -->  00:02:58.560
For example, an integer is always going
to contribute four bytes of memory.
54

54

00:02:58.560  -->  00:03:00.940
A double will always consume eight bytes.
55

55

00:03:00.940  -->  00:03:02.220
But what about strings?
56

56

00:03:02.220  -->  00:03:04.280
Strings don't actually work the same,
do they?
57

57

00:03:04.280  -->  00:03:07.030
Because strings of course
can be a variable size.
58

58

00:03:07.030  -->  00:03:09.940
And this also applies in
general to objects as well.
59

59

00:03:09.940  -->  00:03:13.630
So as you can see on the screen,
now I'm gonna switch to the next slide.
60

60

00:03:13.630  -->  00:03:16.780
What's actually happening here
is that we've got the same
61

61

00:03:16.780  -->  00:03:19.370
index to the left-hand side,
the same array.
62

62

00:03:19.370  -->  00:03:21.660
This time it's actually got
strings instead of integers, and
63

63

00:03:21.660  -->  00:03:22.590
we've got the same number.
64

64

00:03:22.590  -->  00:03:25.680
And you can see that there's
actually a calculation there.
65

65

00:03:25.680  -->  00:03:27.420
It's eight bytes.
66

66

00:03:27.420  -->  00:03:30.960
So what's happening is that
the memory that's being allocated
67

67

00:03:30.960  -->  00:03:33.480
in the array is actually
itself eight bytes.
68

68

00:03:33.480  -->  00:03:37.820
But that actually points to another
location in memory where the string is.
69

69

00:03:37.820  -->  00:03:39.980
So consequently by doing that,
70

70

00:03:39.980  -->  00:03:44.400
Java can actually keep up track of the
actual strings that are in the array and
71

71

00:03:44.400  -->  00:03:49.890
also the strings can each be a variable
link, so they can be different links.
72

72

00:03:49.890  -->  00:03:53.720
Because of course strings can be
a variable link to unlock an integer which
73

73

00:03:53.720  -->  00:03:55.860
has to be and always is four bytes.
74

74

00:03:55.860  -->  00:03:57.440
So, you can see
the important concept there.
75

75

00:03:57.440  -->  00:04:01.690
Array, index position 0,
which is at a memory location, 100.
76

76

00:04:01.690  -->  00:04:06.870
It's got a string address of 1034 and
then, looking at the memory
77

77

00:04:06.870  -->  00:04:11.970
address of a position on the address of
1034, it's actually got the string value.
78

78

00:04:11.970  -->  00:04:13.260
In this case, of 2.
79

79

00:04:13.260  -->  00:04:15.740
And likewise, we looked at another one for
argument's sake.
80

80

00:04:15.740  -->  00:04:16.710
Index position 3.
81

81

00:04:16.710  -->  00:04:19.110
Well, that's got a string
address of 1024 and
82

82

00:04:19.110  -->  00:04:21.260
that points to
the Hello World as a string.
83

83

00:04:21.260  -->  00:04:23.010
So, that's what's happening internally.
84

84

00:04:23.010  -->  00:04:26.770
Now if we actually printed that
out we actually went through and
85

85

00:04:26.770  -->  00:04:28.510
did a full even though
she printed that out.
86

86

00:04:28.510  -->  00:04:32.790
The actual order that would
come out is actually Tim,
87

87

00:04:32.790  -->  00:04:37.950
Australia, Java, Hello World,
Done, Array and ArrayList.
88

88

00:04:37.950  -->  00:04:40.760
Because of course it's actually going
through the index positions from 0 to 6.
89

89

00:04:40.760  -->  00:04:44.490
Plus looking at the first
one pointing 1024, Tim.
90

90

00:04:44.490  -->  00:04:47.340
Looking at the next one,
index position one, 1037, Australia.
91

91

00:04:47.340  -->  00:04:52.570
Looking at position two, 1046 is
the string address, that's gonna be Java.
92

92

00:04:52.570  -->  00:04:53.540
So on and so forth.
93

93

00:04:53.540  -->  00:04:56.240
So requesting the stringed
index position three causes
94

94

00:04:56.240  -->  00:04:58.960
java to calculate the address
of that item in the array.
95

95

00:04:58.960  -->  00:05:02.490
So 100 + 3 x 8 bytes = 124.
96

96

00:05:02.490  -->  00:05:04.760
That's it's dislocation here.
97

97

00:05:04.760  -->  00:05:07.370
But it then actually uses
the string address to actually find
98

98

00:05:07.370  -->  00:05:08.220
the actual string.
99

99

00:05:08.220  -->  00:05:11.620
So that's what's actually happening
internally by Java automatically.
100

100

00:05:11.620  -->  00:05:13.750
It's not something you need
to know too much about.
101

101

00:05:13.750  -->  00:05:16.860
Another thing to note is, with all these
strings over here to the right hand side
102

102

00:05:16.860  -->  00:05:21.260
once your program stops executing, or
goes out of scope in some way, and then
103

103

00:05:21.260  -->  00:05:24.930
the variables are no longer needed and
there's this process called Java's Garbage
104

104

00:05:24.930  -->  00:05:28.310
collection which goes through
automatically and frees up that memory.
105

105

00:05:28.310  -->  00:05:29.480
So it releases it.
106

106

00:05:29.480  -->  00:05:30.790
So it can actually be used again.
107

107

00:05:30.790  -->  00:05:33.420
So that again has all been
happening behind the scenes, and
108

108

00:05:33.420  -->  00:05:34.830
it's not something you
need to worry about.
109

109

00:05:34.830  -->  00:05:37.560
And just a final point
here to make is that
110

110

00:05:37.560  -->  00:05:40.590
the actual string addresses
do not need to be contiguous.
111

111

00:05:40.590  -->  00:05:43.660
So in other words you can see here that
one of the string address here for
112

112

00:05:43.660  -->  00:05:46.750
index position 4 is actually address 4000,
113

113

00:05:46.750  -->  00:05:49.440
but some of the other ones have
got completely different numbers.
114

114

00:05:49.440  -->  00:05:52.480
So the point here is that things
can be completely different, and
115

115

00:05:52.480  -->  00:05:56.280
that's the way that it happens and
it's done internally by Java.
116

116

00:05:56.280  -->  00:05:59.230
So just as a sort of further
understanding, let's go and
117

117

00:05:59.230  -->  00:06:01.770
just write some quick code
to actually go through this.
118

118

00:06:01.770  -->  00:06:04.060
In my window, I've created a new project,
LinkedList, so
119

119

00:06:04.060  -->  00:06:05.870
I'm gonna create a new
class called customer.
120

120

00:06:09.550  -->  00:06:10.820
And it's going to have two fields.
121

121

00:06:10.820  -->  00:06:15.710
It's gonna have a name and
a value or double I should say.
122

122

00:06:15.710  -->  00:06:19.180
Product string name, private double.
123

123

00:06:19.180  -->  00:06:21.200
We'll call that balance.
124

124

00:06:22.740  -->  00:06:24.000
Going to create a constructor.
125

125

00:06:25.400  -->  00:06:29.420
Both of the fields as constructors and
let's just create a getter and
126

126

00:06:29.420  -->  00:06:31.940
a setter for both even though
we probably won't use them but
127

127

00:06:31.940  -->  00:06:33.820
we'll do that anyway just for simplicity.
128

128

00:06:33.820  -->  00:06:34.860
Very basic class and
129

129

00:06:34.860  -->  00:06:38.270
you've seen it a number of times before
but let's go back to our main method now.
130

130

00:06:38.270  -->  00:06:40.520
Actually let's just create some code.
131

131

00:06:40.520  -->  00:06:43.620
So we're gonna start off
by actually creating a new
132

132

00:06:43.620  -->  00:06:46.030
instance of the class a new customer.
133

133

00:06:46.030  -->  00:06:52.250
Customer = new Customer("Tim") and
134

134

00:06:52.250  -->  00:06:57.770
let's try a value of $54.96.
135

135

00:06:57.770  -->  00:07:01.370
Then let's create a second object for
this customer.
136

136

00:07:01.370  -->  00:07:02.630
We'll call it anotherCustomer.
137

137

00:07:05.480  -->  00:07:10.140
Then let's set anotherCustomer
equal to customer.
138

138

00:07:10.140  -->  00:07:14.320
So we're setting it to the customer class,
to the first one as you can see there.
139

139

00:07:14.320  -->  00:07:19.000
But then let's set the other
customer class, the second one,
140

140

00:07:19.000  -->  00:07:25.120
let's use the setBalance method and
change the actual balance to $12.18.
141

141

00:07:25.120  -->  00:07:27.440
And then just to confirm it,
let's actually print out a message.
142

142

00:07:27.440  -->  00:07:31.650
Balance for customer, and
143

143

00:07:31.650  -->  00:07:39.170
customer.getName is customer.getBalance.
144

144

00:07:40.670  -->  00:07:43.580
Now before I execute that,
what do you think will actually happen?
145

145

00:07:43.580  -->  00:07:46.360
Just as a recap,
we've created a new object here,
146

146

00:07:46.360  -->  00:07:51.040
new instance of the customer class,
and we've assigned the value to 54.96.
147

147

00:07:51.040  -->  00:07:55.940
We then created a second customer class
called anotherCustomer, another instance.
148

148

00:07:55.940  -->  00:08:00.050
And we set the value of this
second class to the first object,
149

149

00:08:00.050  -->  00:08:02.130
the first instance that we created.
150

150

00:08:02.130  -->  00:08:06.320
We then actually set the value of
the actual balance field to 12 dollars,
151

151

00:08:06.320  -->  00:08:08.990
18 using the setter for the second class.
152

152

00:08:08.990  -->  00:08:11.630
But what we're doing here is we're
actually printing out the value
153

153

00:08:11.630  -->  00:08:13.130
of the first class.
154

154

00:08:13.130  -->  00:08:15.190
So what do you actually
think will happen here?
155

155

00:08:15.190  -->  00:08:16.440
What value should we get?
156

156

00:08:16.440  -->  00:08:19.120
We get to the value 5496 or 12 dollars 18.
157

157

00:08:19.120  -->  00:08:23.120
Let's just run it and see and
then we'll talk about it.
158

158

00:08:23.120  -->  00:08:25.640
Now you can see what's
actually happened here is,
159

159

00:08:25.640  -->  00:08:28.050
we've actually got a balance of $12.18.
160

160

00:08:28.050  -->  00:08:31.770
And looking at that code, you might first
be wondering, well, why has that happened,
161

161

00:08:31.770  -->  00:08:34.520
because isn't this actually
another class altogether?
162

162

00:08:34.520  -->  00:08:39.990
So why does changing the balance of this
second class affect the first class?
163

163

00:08:39.990  -->  00:08:42.830
And this is an important
point to understand,
164

164

00:08:42.830  -->  00:08:44.690
because it relates to this memory.
165

165

00:08:44.690  -->  00:08:47.200
So what actually happens is when
we actually do this assignment,
166

166

00:08:47.200  -->  00:08:51.970
anotherCustomer = customer, what we
were doing internally, Java was actually
167

167

00:08:51.970  -->  00:08:56.360
assigning the second customer
class to point to the first class.
168

168

00:08:56.360  -->  00:08:59.710
So in other words it just
saved the memory address.
169

169

00:08:59.710  -->  00:09:01.940
It didn't create a separate class.
170

170

00:09:01.940  -->  00:09:04.770
So this is really important to
understand what's working there.
171

171

00:09:04.770  -->  00:09:08.310
So as a result of not only
saving the memory address,
172

172

00:09:08.310  -->  00:09:12.180
when we used the set balance command,
what that actually did was,
173

173

00:09:12.180  -->  00:09:15.710
it actually saved the value
in this original location.
174

174

00:09:15.710  -->  00:09:20.000
So for all intents and purposes,
there's only class here.
175

175

00:09:20.000  -->  00:09:23.380
Customer class is the first class,
and another customer,
176

176

00:09:23.380  -->  00:09:26.730
the second one that we created,
is actually pointing to the first one.
177

177

00:09:26.730  -->  00:09:31.750
So consequently, when we use
the setBalance method on the second class,
178

178

00:09:31.750  -->  00:09:33.420
it actually updated the first class.
179

179

00:09:33.420  -->  00:09:38.340
And that's all because of how memory
is used and allocated within Java.
180

180

00:09:38.340  -->  00:09:39.630
And we'll close that now.
181

181

00:09:39.630  -->  00:09:42.540
So if Java doesn't let us use pointers,
in other words we can't actually
182

182

00:09:42.540  -->  00:09:47.260
point to these objects directly,
why are we discussing them?
183

183

00:09:47.260  -->  00:09:50.140
Look, it's important to understand all
this before we can understand what
184

184

00:09:50.140  -->  00:09:53.730
a linked list is and the advantages
that it can give you over an array.
185

185

00:09:53.730  -->  00:09:55.330
So let's just consider some more code now.
186

186

00:09:55.330  -->  00:09:58.430
Gonna create some code that
creates a basic ArrayList.
187

187

00:10:00.440  -->  00:10:02.210
ArrayList of integers.
188

188

00:10:02.210  -->  00:10:07.630
Of Course intList = new ArrayList.
189

189

00:10:07.630  -->  00:10:09.630
So, let's add some values.
190

190

00:10:09.630  -->  00:10:10.940
IntList.add(1).
191

191

00:10:10.940  -->  00:10:15.140
IntList.add(3).
192

192

00:10:15.140  -->  00:10:18.260
IntList.add(4).
193

193

00:10:18.260  -->  00:10:23.650
Then we use for(int i=0; i<intList.size().
194

194

00:10:23.650  -->  00:10:26.920
You've seen this eight times before.
195

195

00:10:26.920  -->  00:10:31.300
We're just gonna show the values of what
196

196

00:10:31.300  -->  00:10:36.470
element i +": " + intLists.get (i)).
197

197

00:10:36.470  -->  00:10:40.680
That's just gonna show the output
of each element in the array.
198

198

00:10:40.680  -->  00:10:43.370
Next, we'll actually add another entry.
199

199

00:10:43.370  -->  00:10:48.150
IntLists .add, but what we're gonna
do here is we're gonna put 1, 2.
200

200

00:10:48.150  -->  00:10:51.610
And what that actually does,
that's inserting the actual number,
201

201

00:10:51.610  -->  00:10:55.300
in this case the number 2,
in index position one.
202

202

00:10:55.300  -->  00:10:58.730
So in other words it's gonna add the
number starting the first element position
203

203

00:10:58.730  -->  00:11:01.850
was position zero of course
which was at the value of one.
204

204

00:11:01.850  -->  00:11:03.070
We're using element so
205

205

00:11:03.070  -->  00:11:06.110
index position one, which should
start immediately after the one.
206

206

00:11:06.110  -->  00:11:07.400
So in other words it's the second element.
207

207

00:11:07.400  -->  00:11:09.180
And we're storing the value of two.
208

208

00:11:09.180  -->  00:11:10.570
So let's just confirm if that works.
209

209

00:11:10.570  -->  00:11:12.520
And we'll actually do a print
out after that as well.
210

210

00:11:13.650  -->  00:11:14.940
So that's now running.
211

211

00:11:14.940  -->  00:11:16.190
So what should happen is the first time,
212

212

00:11:16.190  -->  00:11:19.700
we get three outputs,
three entries that are in the array list.
213

213

00:11:19.700  -->  00:11:21.490
And the second time we
should get four entries.
214

214

00:11:21.490  -->  00:11:22.290
So let's just run that.
215

215

00:11:24.130  -->  00:11:26.510
So you can see on the screen,
there we've got element zero.
216

216

00:11:26.510  -->  00:11:28.790
Zero's got the value of one,
one's got value of three,
217

217

00:11:28.790  -->  00:11:30.090
two's got the value of four.
218

218

00:11:30.090  -->  00:11:33.110
The second time around you can see
that clearly this has been inserted.
219

219

00:11:33.110  -->  00:11:35.260
So what's actually
happened is in order for
220

220

00:11:35.260  -->  00:11:38.360
that to be inserted, the other
entries all have to be moved down.
221

221

00:11:38.360  -->  00:11:40.410
So the element position two,
222

222

00:11:40.410  -->  00:11:44.360
the value of three in element
position three with a value of four.
223

223

00:11:44.360  -->  00:11:47.780
If it had to be moved down to
make space for this new entry.
224

224

00:11:47.780  -->  00:11:50.940
Now this is not a big deal in terms
of computer processing time when
225

225

00:11:50.940  -->  00:11:53.910
we're dealing with a small array
as you can see on the screen here.
226

226

00:11:53.910  -->  00:11:58.070
We've got three or four elements, but
when we actually start talking about
227

227

00:11:58.070  -->  00:12:02.500
an array containing thousands,
perhaps millions of existing records or
228

228

00:12:02.500  -->  00:12:05.610
existing items is coming
in a lot slower to process.
229

229

00:12:05.610  -->  00:12:09.970
In other words, it's a lot more work the
computer has to do because there's just so
230

230

00:12:09.970  -->  00:12:11.660
many more records to process.
231

231

00:12:11.660  -->  00:12:16.620
And similarly if you have to remove an
item from an array, what actually has to
232

232

00:12:16.620  -->  00:12:19.820
happen is all the other items have
to be moved up to fill the gap.
233

233

00:12:19.820  -->  00:12:23.980
So in other words, if we actually
deleted this position, this element one,
234

234

00:12:23.980  -->  00:12:27.690
then elements two and three would have
to be moved up to fill that space again.
235

235

00:12:27.690  -->  00:12:30.780
So you can see there's a lot of
manipulation by the computer required
236

236

00:12:30.780  -->  00:12:32.240
to actually do that.
237

237

00:12:32.240  -->  00:12:35.600
Now that's not a problem for a small
number of records but when you start
238

238

00:12:35.600  -->  00:12:39.830
dealing with a large numbers of records,
it can quickly become overwhelming for
239

239

00:12:39.830  -->  00:12:43.500
the computer and it starts slowing down
and starts using a lot of resources.
240

240

00:12:43.500  -->  00:12:46.800
So we've finally got to the stage
now of talking about linked lists.
241

241

00:12:46.800  -->  00:12:49.480
Well the linked list is
an alternative to arrays, and
242

242

00:12:49.480  -->  00:12:51.330
it's really useful in some situations.
243

243

00:12:51.330  -->  00:12:55.560
And how it works is it actually stores
the actual link to the next item
244

244

00:12:55.560  -->  00:12:59.710
in the list as well as the actual data,
so hence the name linked list.
245

245

00:12:59.710  -->  00:13:04.810
So in other words each element in the list
actually holds a link to the item that
246

246

00:13:04.810  -->  00:13:08.900
follows it, as well as the actual value
you're wanting to actually store as well.
247

247

00:13:08.900  -->  00:13:10.780
So, good example of that is to go back and
248

248

00:13:10.780  -->  00:13:13.680
look at our lists that
we talked about earlier.
249

249

00:13:13.680  -->  00:13:16.120
And I'll go back on the screen and
show you that.
250

250

00:13:16.120  -->  00:13:19.090
So that's our original string
list that we talked about.
251

251

00:13:19.090  -->  00:13:22.090
If we go to the next screen this
is how a linked list works.
252

252

00:13:22.090  -->  00:13:26.270
So you can see in this case the first
element which was the value of 10 which we
253

253

00:13:26.270  -->  00:13:29.440
had assigned a value of
the memory address of 1,037.
254

254

00:13:29.440  -->  00:13:33.360
You can see that it now points to
the next one, which is Australia,
255

255

00:13:33.360  -->  00:13:36.260
the value of Australia, at position 1046.
256

256

00:13:36.260  -->  00:13:41.200
It then points to the next one,
which is Java at position 1024, and so
257

257

00:13:41.200  -->  00:13:42.320
on and so forth.
258

258

00:13:42.320  -->  00:13:46.880
So if we created a linked list like
this we could literally iterate through
259

259

00:13:46.880  -->  00:13:48.700
the lists of items in it.
260

260

00:13:48.700  -->  00:13:51.460
We could start on the first one, and
what that code would be doing is we'll be
261

261

00:13:51.460  -->  00:13:54.350
checking to see whether the link has
got anything else attached to it.
262

262

00:13:54.350  -->  00:13:56.300
In other words,
whether it's linking to anything.
263

263

00:13:56.300  -->  00:14:01.200
If it does we pick up the string, store it
at the location and actually save that so
264

264

00:14:01.200  -->  00:14:04.070
in that case if you've got a linked
list like this we can literally
265

265

00:14:04.070  -->  00:14:05.950
iterate through the items in it.
266

266

00:14:05.950  -->  00:14:09.860
So you can see starting at a memory
address of 1,034 it has gotten appointed
267

267

00:14:09.860  -->  00:14:13.360
to the value of 10 which is actually
on a different memory address.
268

268

00:14:13.360  -->  00:14:16.920
We then look to see whether there's
something else that particular record,
269

269

00:14:16.920  -->  00:14:21.100
that entry has, is linked to and we can
actually follow that through the list.
270

270

00:14:21.100  -->  00:14:23.720
So you can say that Tim,
effectively the entry Tim,
271

271

00:14:23.720  -->  00:14:27.470
points to Australia which points to Java,
which points to Hello World,
272

272

00:14:27.470  -->  00:14:30.010
which points to Done,
which points to Array, etc.
273

273

00:14:30.010  -->  00:14:32.970
Different completely to
how an ArrayList works.
274

274

00:14:32.970  -->  00:14:36.440
Further example, let's just say that
we're looking at this linked list and
275

275

00:14:36.440  -->  00:14:37.840
it's got some values as you can see there.
276

276

00:14:37.840  -->  00:14:39.310
It's actually a list of places but
277

277

00:14:39.310  -->  00:14:41.160
perhaps you might wanna visit
when you're in Australia.
278

278

00:14:41.160  -->  00:14:44.530
In this case you wanna start at Sydney,
you wanna then go to Melbourne,
279

279

00:14:44.530  -->  00:14:47.710
go to Brisbane and Perth and so
on and ultimately end up in Darwin.
280

280

00:14:47.710  -->  00:14:50.400
Well let's just say that
after creating this list
281

281

00:14:50.400  -->  00:14:54.030
you decided to add a visit to
Alice Springs on the way to Melbourne.
282

282

00:14:54.030  -->  00:14:56.740
So what we need to do is we insert
Alice Springs after Sydney.
283

283

00:14:56.740  -->  00:15:01.120
Now with a traditional array you'd
actually have to move all the other cities
284

284

00:15:01.120  -->  00:15:05.170
down to make room for that, as you saw in
the code we just showed on the screen but
285

285

00:15:05.170  -->  00:15:07.690
with the linked list it's
actually a heck of alot easier.
286

286

00:15:07.690  -->  00:15:12.210
In fact all we would have to do
is actually set Alice Springs,
287

287

00:15:12.210  -->  00:15:15.110
the actual Alice Springs link if you
will to point to wherever Sydney
288

288

00:15:15.110  -->  00:15:17.420
was pointing to originally
which was Melbourne.
289

289

00:15:17.420  -->  00:15:19.950
And then we set Sydney to
point to Alice Springs.
290

290

00:15:19.950  -->  00:15:22.320
So you can see that's
a heck of a lot easier.
291

291

00:15:22.320  -->  00:15:25.890
No records have actually had to be
moved down to make room for anything.
292

292

00:15:25.890  -->  00:15:28.840
All that's happened is we created
a new entry which is Alice Springs,
293

293

00:15:28.840  -->  00:15:33.590
we pointed Alice Springs to where Sydney
used to point to, which was Melbourne, and
294

294

00:15:33.590  -->  00:15:36.580
then we set Sydney to
point to Alice Springs.
295

295

00:15:36.580  -->  00:15:39.210
And therefore, we can still sort
of go through that list and
296

296

00:15:39.210  -->  00:15:40.960
get to all the records that way.
297

297

00:15:40.960  -->  00:15:42.050
And in a similar way,
298

298

00:15:42.050  -->  00:15:45.520
we go to the next screen we can
actually remove entries the same way.
299

299

00:15:45.520  -->  00:15:48.530
So in this example, for example,
if we decided not to visit Perth,
300

300

00:15:48.530  -->  00:15:52.890
then all we would need to do is just
make Brisbane point to wherever
301

301

00:15:52.890  -->  00:15:55.780
Perth was originally pointing to, and
that's literally all you need to do.
302

302

00:15:55.780  -->  00:15:58.930
So in this case you can see that we've
changed Brisbane which was pointing to
303

303

00:15:58.930  -->  00:16:00.370
Perth, to point to Canberra.
304

304

00:16:00.370  -->  00:16:03.900
So we looked at Perth, and figured out
that okay, Perth was pointing to Canberra.
305

305

00:16:03.900  -->  00:16:06.780
We changed Brisbane to
point directly to Canberra.
306

306

00:16:06.780  -->  00:16:10.040
I'm thinking that's
a function of a linked list.
307

307

00:16:10.040  -->  00:16:13.700
It's interesting to note here that
Perth is still pointing to Canberra.
308

308

00:16:13.700  -->  00:16:16.630
But because nothing is now
referring to Perth anymore,
309

309

00:16:16.630  -->  00:16:18.840
because Brisbane is now
referring to Canberra,
310

310

00:16:18.840  -->  00:16:23.080
the object will be automatically destroyed
by Java during its garbage collection.
311

311

00:16:23.080  -->  00:16:25.420
So in other words, it'll figure out
that this is no longer being used,
312

312

00:16:25.420  -->  00:16:28.490
this is Perth I'm talking about,
and remove that automatically.
313

313

00:16:28.490  -->  00:16:30.460
So that's really the idea
of a linked list.
314

314

00:16:30.460  -->  00:16:31.950
So we're gonna stop the video here.
315

315

00:16:31.950  -->  00:16:34.120
In the next video we'll
actually create some code.
316

316

00:16:34.120  -->  00:16:38.400
We'll actually create a linked list in
Java code and go through this example so
317

317

00:16:38.400  -->  00:16:40.290
you can understand it
from a code perspective.
318

318

00:16:40.290  -->  00:16:41.530
So I'll see you in that next video.
