1
1

00:00:05,210  -->  00:00:09,020
so far in this section on the Java
Collections Framework we looked at the
2

2

00:00:09,020  -->  00:00:13,290
list interface and its implementations in
Array List and linked list we also looked at
3

3

00:00:13,290  -->  00:00:19,840
the map interface and hash map and the
set interface and hash set now there's two
4

4

00:00:19,840  -->  00:00:24,130
other collection interfaces queue and dequeue
that I'm gonna leave to later in the
5

5

00:00:24,130  -->  00:00:27,640
course so what we gonna do is finish up
this section by looking at his variant of the
6

6

00:00:27,640  -->  00:00:33,410
hash map and hash set classes which is called
the linked hash map and linked hash set now their
7

7

00:00:33,410  -->  00:00:37,460
also sorted versions of the
map and set interfaces sorted map and
8

8

00:00:37,460  -->  00:00:43,140
sorted set that are implemented in tree
map and tree set so well actually go through
9

9

00:00:43,140  -->  00:00:47,460
and have look at those as well
now because the operations on sets and maps
10

10

00:00:47,460  -->  00:00:53,420
are so similar the examples in here
will concentrate on the maps rather than sets
11

11

00:00:53,420  -->  00:00:58,710
the link variants of hash map and hash set are called linked hash map and linked hash set and
12

12

00:00:58,710  -->  00:01:02,070
any real differences is that they got an
ordering to them now in the Oracle
13

13

00:01:02,070  -->  00:01:06,980
documentation the ordering of items in a
Hash Map or Hash set is described as
14

14

00:01:06,980  -->  00:01:12,820
chaotic but the linked versions maintain
insertion order so once you put items in
15

15

00:01:12,820  -->  00:01:18,090
the collection you know the order that the
results will come back when you iterate over it now we'll take
16

16

00:01:18,090  -->  00:01:21,470
advantage of this in the next example
that we gonna start typing up
17

17

00:01:21,470  -->  00:01:26,820
shortly by adding our items in alphabetical order the examples gonna allows users to add purchases to a
18

18

00:01:26,820  -->  00:01:31,650
shopping basket after choosing them from
the list of all the items on sale now to do
19

19

00:01:31,650  -->  00:01:35,490
this we need to maintain two collections
the first is the list of all the items
20

20

00:01:35,490  -->  00:01:40,320
are in stock and the second is the items
that a customers added to the basket so
21

21

00:01:40,320  -->  00:01:43,890
although it might seem a bit contrived
to add the stock items in alphabetical
22

22

00:01:43,890  -->  00:01:48,250
order in reality the items would
come from a database so they could be at any order
23

23

00:01:48,250  -->  00:01:52,770
we wanted by using an order
by clause and the query the SQL query
24

24

00:01:52,770  -->  00:01:57,530
that retrieves them from the database so lets get with the example to see how a linked hash map can be
25

25

00:01:57,530  -->  00:02:02,280
useful and then will ultimately extend
that to use a tree map I'm gonna start by
26

26

00:02:02,280  -->  00:02:06,850
creating a basic stock on item class I'm
gonna come over here to my package right
27

27

00:02:06,850  -->  00:02:08,670
click
28

28

00:02:08,670  -->  00:02:12,670
Java class and will call it StockItem.....
29

29

00:02:12,670  -->  00:02:17,640
so in this class we are gonna store the name of the items for sale with a price and the
30

30

00:02:17,640  -->  00:02:19,030
quantity in stock
31

31

00:02:19,030  -->  00:02:23,530
also override equals and hash Code and in
addition will also implement comparable
32

32

00:02:23,530  -->  00:02:27,980
so the stock items can be used in
a sorted collections so let's go ahead and
33

33

00:02:27,980  -->  00:02:31,550
start changing this so we need to
implement comparable first so.....
34

34

00:02:31,550  -->  00:02:42,160
...and will get that error until we implement that
35

35

00:02:42,160  -->  00:02:53,310
method so lets starts some variables so....
36

36

00:02:53,310  -->  00:03:27,570
.....
37

37

00:03:27,570  -->  00:03:39,410
all right we need some getters so lets implement some getters first...we do a getter for all 3.....we also one some setters so gonna create the setters and
38

38

00:03:39,410  -->  00:03:42,980
we'll just change a few little
bits and pieces here so.....
39

39

00:03:42,980  -->  00:03:48,820
.....and names is not coming up
40

40

00:03:48,820  -->  00:03:55,220
you notice how IntelliJ is smart enough to figure out that name is a final field so as a result it doesn't
41

41

00:03:55,220  -->  00:03:59,030
come up here and allow us to change it because of course you can't change final fields they
42

42

00:03:59,030  -->  00:04:03,340
to be initialized either on the line
that they declared or in the constructor
43

43

00:04:03,340  -->  00:04:07,010
so again just another nice thing that IntelliJ of helping us
44

44

00:04:07,010  -->  00:04:07,930
automatically
45

45

00:04:07,930  -->  00:04:13,780
so for price I'm just gonna choose price as a setup
but we will add one small bit of validation
46

46

00:04:13,780  -->  00:04:20,950
what we'll do is that we will make sure the price is greater than 0 before you try and save it so......
47

47

00:04:20,950  -->  00:04:23,660
.....
48

48

00:04:23,660  -->  00:04:31,490
...then and only then try and save it so if that way if someone passes a price its
49

49

00:04:31,490  -->  00:04:32,880
less than or equal to 0
50

50

00:04:32,880  -->  00:04:37,750
we are not gonna save it so instead of having a set of for quantity and stock let's change the method
51

51

00:04:37,750  -->  00:04:46,140
and we will call that adjust stock because that would make more sense when you will be calling a loop to adjust the stock so....
52

52

00:04:46,140  -->  00:04:53,970
.....
53

53

00:04:53,970  -->  00:05:04,410
......
54

54

00:05:04,410  -->  00:05:12,360
.....
55

55

00:05:12,360  -->  00:05:20,400
....so just a bit of basic validation the
next we want to override equals method then
56

56

00:05:20,400  -->  00:05:25,210
ultimately will be doing a hash code as well so let's
57

57

00:05:25,210  -->  00:05:31,060
override that override and by now you should know the commands to override if not refer to some
58

58

00:05:31,060  -->  00:05:38,480
of the previous videos where I've been through those so do equals first and will get rid of the super because we
59

59

00:05:38,480  -->  00:05:44,060
actually gonna implementing this
60

60

00:05:44,060  -->  00:05:48,970
and will put a print out here.....
61

61

00:05:48,970  -->  00:05:54,960
.....give us some sort of
notification on the screen that's happening
62

62

00:05:54,960  -->  00:05:59,120
first we will do a test to see whether we actually
testing against the same object in
63

63

00:05:59,120  -->  00:06:05,550
memory so......because its actually the same object the same
64

64

00:06:05,550  -->  00:06:08,430
instance of the object so we don't need
to do any other processing because
65

65

00:06:08,430  -->  00:06:17,090
it's identical its sharing the same
area or memory next we need to do a test so....
66

66

00:06:17,090  -->  00:06:25,940
......
67

67

00:06:25,940  -->  00:06:26,410
.......
68

68

00:06:26,410  -->  00:06:31,780
......
69

69

00:06:31,780  -->  00:06:36,330
.....so obviously equals we know
70

70

00:06:36,330  -->  00:06:40,750
that they aren't equal for that reason either
there's a null because this can't be null
71

71

00:06:40,750  -->  00:06:44,370
because we're actually in the object
running the code so we know
72

72

00:06:44,370  -->  00:06:46,660
that it's not null so if we are comparing it to null we're going to get a
73

73

00:06:46,660  -->  00:06:50,910
different value and it's a different
class ok we also know that that's going to
74

74

00:06:50,910  -->  00:06:57,430
be different and then our equals is gonna just use the name at that points so pretty simple and just
75

75

00:06:57,430  -->  00:07:01,050
for the stock item name and will cast as
a stock item
76

76

00:07:01,050  -->  00:07:06,840
....so we are comparing the
name of our current object we're running
77

77

00:07:06,840  -->  00:07:10,850
in versus the object that's been passed this
method and then we are going to return a standard
78

78

00:07:10,850  -->  00:07:13,280
string equal so....
79

79

00:07:13,280  -->  00:07:20,160
....so that returns TRUE or FALSE as to whether they are the same so assuming that's the case if it returns
80

80

00:07:20,160  -->  00:07:24,810
true then we know that the strings are
equal and therefore in our case where just
81

81

00:07:24,810  -->  00:07:30,470
saying the stock item is equal so its our only comparison
other than testing to see whether it's a
82

82

00:07:30,470  -->  00:07:35,050
same object in memory which would return true but we are also then checking the name and of course
83

83

00:07:35,050  -->  00:07:38,720
on line 49 we are testing to see
whether it's null or its a different class
84

84

00:07:38,720  -->  00:07:45,200
so returning false in that case ok hash code is going to be quite simple
85

85

00:07:45,200  -->  00:07:51,950
override hash code and that's going to be.......so we are
86

86

00:07:51,950  -->  00:07:57,610
return a string hash code.....
87

87

00:07:57,610  -->  00:08:01,460
.....could have been any number I think we use 57 in the previous one previous
88

88

00:08:01,460  -->  00:08:07,150
set challenge but we could be literally
anything their unless it's consistent and we
89

89

00:08:07,150  -->  00:08:14,860
also need to override compared to
so lets do that as well and compared to is overridden from
90

90

00:08:14,860  -->  00:08:20,640
java.lang.comparable because we are implementing that
interface and what we are going to do their
91

91

00:08:20,640  -->  00:08:26,370
first let's put a message to say......
92

92

00:08:26,370  -->  00:08:38,300
....first we do a test wet put...
93

93

00:08:38,300  -->  00:09:01,700
......
94

94

00:09:01,700  -->  00:09:10,070
....so we are using the in-built functionality for a string in using that
95

95

00:09:10,070  -->  00:09:15,950
as a way to compare the stock item and the test on line 69 to test its not null we
96

96

00:09:15,950  -->  00:09:20,570
need to make sure that we do check for
null because if we get a null stock item pass
97

97

00:09:20,570  -->  00:09:26,730
in this method the code on line 65 will still execute because you can compare
98

98

00:09:26,730  -->  00:09:32,070
null variables just fine but as soon as  you
start trying to return something like
99

99

00:09:32,070  -->  00:09:37,100
a method from a string on line 70 will get an error if that's null so that's
100

100

00:09:37,100  -->  00:09:40,350
why we're checking its not null and then we
just using the compared to function of
101

101

00:09:40,350  -->  00:09:45,490
the strings to compare the stock item
name which is in this current object
102

102

00:09:45,490  -->  00:09:50,170
we're running compared to the one that's
been pass to this method that will return the
103

103

00:09:50,170  -->  00:09:54,660
correct value negative 1 0 or 1 depending
on the value whether it's sort of less
104

104

00:09:54,660  -->  00:09:58,520
than the same or greater than ok so that's
returning and then what we'll do is
105

105

00:09:58,520  -->  00:10:01,320
throw and I know we have not talk too much
about exceptions but we are
106

106

00:10:01,320  -->  00:10:10,960
going to do a throw...and again we will be talking about
exceptions a lot more in more detail
107

107

00:10:10,960  -->  00:10:15,060
later on in the course but for now
that's probably not unrealistic to do it
108

108

00:10:15,060  -->  00:10:19,160
throwing a null pointer exception to say if you want
to use to compare to function you have
109

109

00:10:19,160  -->  00:10:25,990
to assume we're not comparing something
that is null ok so that's our compared to function and
110

110

00:10:25,990  -->  00:10:33,320
last one what we will do is just add a to string will override that as well...
111

111

00:10:33,320  -->  00:10:42,700
just so we can actually print something out here and we will return.....
112

112

00:10:42,700  -->  00:10:49,950
....and just to
confirm that lines 9 and line 40
113

113

00:10:49,950  -->  00:10:54,330
we've initialize quantity and stock in
both cases and again you wouldn't
114

114

00:10:54,330  -->  00:10:57,670
normally initialized in both places but
the reason I've done this is because
115

115

00:10:57,670  -->  00:10:59,540
which one to use often confuses
116

116

00:10:59,540  -->  00:11:03,020
students its really down to personal
preference in this case so neither is
117

117

00:11:03,020  -->  00:11:07,010
better than the other so name and price
have to be initialized obviously in the
118

118

00:11:07,010  -->  00:11:10,470
constructor because we are using the
constructors parameters to provide the
119

119

00:11:10,470  -->  00:11:14,600
values but if your not passing a fields
value to the in the constructor then its
120

120

00:11:14,600  -->  00:11:17,840
doesn't really matter where you
initialize it as far as Java is concern so
121

121

00:11:17,840  -->  00:11:21,810
personal preference you wouldn't do it
in both normally but I put up their just
122

122

00:11:21,810  -->  00:11:25,800
to bring it up for a topic for
discussion so just choose one would be my
123

123

00:11:25,800  -->  00:11:29,310
recommendation and stick to that having
said that probably would be useful to
124

124

00:11:29,310  -->  00:11:33,200
allow the quantity in stock to be set
when the stock items are created so we
125

125

00:11:33,200  -->  00:11:36,920
should really include that field in the
Constructors for that reason its also useful
126

126

00:11:36,920  -->  00:11:40,150
to have a constructor that doesn't
include the stock levels with that said
127

127

00:11:40,150  -->  00:11:42,790
and see if it allows some of the spinner
128

128

00:11:42,790  -->  00:11:45,780
perhaps to set up the stock items
before the list was passed to the warehouse
129

129

00:11:45,780  -->  00:11:49,980
for the stop to be done so the code for
this we are gonna overload the constructor
130

130

00:11:49,980  -->  00:11:54,460
so the items can be created with or
without stock levels so we are going to add a constructor
131

131

00:11:54,460  -->  00:12:02,850
for both so we will just come back here
and add the constructor in all three places
132

132

00:12:02,850  -->  00:12:06,500
like so and obviously that's now
updating it based on the quantity in
133

133

00:12:06,500  -->  00:12:10,570
stock that has been passed to and that then
now that we've done that it makes more
134

134

00:12:10,570  -->  00:12:14,470
sense here on line 14 to initialize it
there because we are also initializing it
135

135

00:12:14,470  -->  00:12:19,580
on line 20 so as a result we could
now  removed this line 9 so really
136

136

00:12:19,580  -->  00:12:24,050
just depends on how are you going to
initializing and using the variable
137

137

00:12:24,050  -->  00:12:29,130
when you define it in the initialize in the
constructor like we have or at the
138

138

00:12:29,130  -->  00:12:33,750
declaration line so I'm gonna remove it their
on line 9 for that reason ok so now we've done
139

139

00:12:33,750  -->  00:12:37,990
that we also did the adjust stock method
which I mention was really there to allow our
140

140

00:12:37,990  -->  00:12:42,000
stock levels to be increased or decreased
increase the stock that is added and sold
141

141

00:12:42,000  -->  00:12:45,350
contains a check to make sure the stock
levels can't drop below zero so obviously
142

142

00:12:45,350  -->  00:12:49,020
we're doing it this way so we can
actually pass negative quantities so you
143

143

00:12:49,020  -->  00:12:52,020
literally adjust the stock and not just
adding stock you can also deduct from
144

144

00:12:52,020  -->  00:12:55,820
it as well and we also overrode the
equals and hash Code as well as the compare to
145

145

00:12:55,820  -->  00:13:01,120
method so I'm gonna finish the video here now in the next video
what we'll do is we'll continue on and
146

146

00:13:01,120  -->  00:13:04,020
we'll actually implement a stock list
class and this gonna hold a list of all
147

147

00:13:04,020  -->  00:13:07,970
the stock items in a map than we will need some
methods to add stock and to remove it
148

148

00:13:07,970  -->  00:13:10,740
when it is sold and we will be doing that in the
next video
