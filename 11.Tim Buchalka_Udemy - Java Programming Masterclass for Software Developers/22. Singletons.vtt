WEBVTT
1
1

00:00:05.160  -->  00:00:10.760
ok so at this point we've got the basic UI
working and I'm just going to bring that up on the screens just so
2

2

00:00:10.760  -->  00:00:14.790
we can look at it again and its certainly not
pretty is not going to win any awards
3

3

00:00:14.790  -->  00:00:19.480
for the best UI but it is
functional so it's probably time to
4

4

00:00:19.480  -->  00:00:23.620
think about what a user will want to do
in addition to viewing the to do list so
5

5

00:00:23.620  -->  00:00:28.340
obviously at the moment they can click on and
see the information see the to do list
6

6

00:00:28.340  -->  00:00:34.360
items but obviously they want to add items to
list themselves and of course if you refer
7

7

00:00:34.360  -->  00:00:39.230
back to a few videos ago we hard coded
a few to-do list items because of course
8

8

00:00:39.230  -->  00:00:44.140
we need a data to test the user
interface now if user wants to install this
9

9

00:00:44.140  -->  00:00:47.950
application there wouldn't be any to do
items and it wouldn't be very useful
10

10

00:00:47.950  -->  00:00:52.030
for them and in addition when they add
to do items and then close the
11

11

00:00:52.030  -->  00:00:56.980
application they reasonably expected to
to-do items to be there next time they
12

12

00:00:56.980  -->  00:01:02.340
run the application so what we gonna do is
quickly add some code that will load and store
13

13

00:01:02.340  -->  00:01:08.160
to-do items to a flat files so we are gonna
start with storing the items and then
14

14

00:01:08.160  -->  00:01:12.630
run our application that will save the hard coded
items that we've already coded into our
15

15

00:01:12.630  -->  00:01:19.080
app if you think back to earlier in this
section on JavaFX you probably recall
16

16

00:01:19.080  -->  00:01:23.990
that the application class which our main
class extends from has a stopped method
17

17

00:01:23.990  -->  00:01:29.650
that we can override and that would be a
good logical place to store data however
18

18

00:01:29.650  -->  00:01:34.410
the controller will need the data to
populate the list view and it also has
19

19

00:01:34.410  -->  00:01:38.060
ready access to the list views contents
which when we want to store them
20

20

00:01:38.060  -->  00:01:42.740
so for experience sake and because we are
doing this you know in a quick and dirty
21

21

00:01:42.740  -->  00:01:45.740
way so we can get back to our user interface coding what
22

22

00:01:46.400  -->  00:01:51.630
we are gonna do is added a singleton class that both our main
class and the controller can access
23

23

00:01:51.630  -->  00:01:56.380
in a nut shell we are gonna use a singleton when want
there to be only one instance of a class
24

24

00:01:56.380  -->  00:01:59.960
created over the entire run
of the application
25

25

00:02:00.770  -->  00:02:04.520
because of this the singleton class
creates one instance of itself or
26

26

00:02:04.520  -->  00:02:08.650
creates the one instance of itself and
its got a private constructor to
27

27

00:02:08.650  -->  00:02:12.800
ensure that no other class can create an
instance now there's more to it than that
28

28

00:02:12.800  -->  00:02:14.980
but the important thing for us
29

29

00:02:14.980  -->  00:02:19.610
is that the singleton usually contains a
static method that allows any class to
30

30

00:02:19.610  -->  00:02:24.590
get the single instance and to call its
methods and what this means is that our main
31

31

00:02:24.590  -->  00:02:28.240
class and our controller will have an easy way
to access our dad and that's really the
32

32

00:02:28.240  -->  00:02:31.860
reason that we doing this so what we
gonna do is we are gonna add the singleton
33

33

00:02:31.860  -->  00:02:36.750
class to our data model package so lets go
ahead and start typing some code so gonna
34

34

00:02:36.750  -->  00:02:40.860
closed down our user interface and then
come over here to our data model
35

35

00:02:40.860  -->  00:02:45.490
package and I'm gonna right click that click on new and
select Java class and I'm going to
36

36

00:02:45.490  -->  00:02:53.680
enter...as the name of the class so what we want to do first is we want to create a new
37

37

00:02:53.680  -->  00:03:00.010
instance of this class so.....
38

38

00:03:00.010  -->  00:03:09.480
...
39

39

00:03:09.480  -->  00:03:13.150
....and this is going to be the file name where
ultimately the to do items are gonna
40

40

00:03:13.150  -->  00:03:17.320
be saved so......
41

41

00:03:17.320  -->  00:03:23.380
....
42

42

00:03:25.870  -->  00:03:33.760
...ok so we also want to store our items so....
43

43

00:03:33.760  -->  00:04:08.710
...
44

44

00:04:10.070  -->  00:04:15.980
....which is traditional in
singleton class to do that get single instance...
45

45

00:04:15.980  -->  00:04:22.290
....
46

46

00:04:22.290  -->  00:04:29.000
...
47

47

00:04:29.000  -->  00:04:34.580
....and by setting the
constructor to be private
48

48

00:04:35.400  -->  00:04:40.020
it prevent anyone from being able to instantiate
a new version of this class as an
49

49

00:04:40.020  -->  00:04:47.250
object and so in our private constructor we are going to....
50

50

00:04:47.250  -->  00:04:57.880
....
51

51

00:04:57.880  -->  00:05:03.440
...and bearing in
mind they are case sensitive as well so
52

52

00:05:03.440  -->  00:05:09.280
make sure your typing it exactly like that so that is our private constructor so next
53

53

00:05:09.280  -->  00:05:17.090
we want a method to return our to
do list items so just do....
54

54

00:05:17.090  -->  00:05:27.190
...
55

55

00:05:27.190  -->  00:05:30.380
probably should have actually called the
setter as well so we'll do that as well
56

56

00:05:32.220  -->  00:05:43.640
for our to do list items okay so we can create them okay so that's that created and what we want to do now is create a method that will be used to load our
57

57

00:05:43.640  -->  00:05:50.280
to do items from the file and I'm gonna write this code
using the old try finally syntax and I
58

58

00:05:50.280  -->  00:05:54.590
know we could have used a try with resources
that you've learned earlier in this course but we're going to go
59

59

00:05:54.590  -->  00:05:59.620
back to use to try finally and perhaps that can be an exercise for you later after you've
60

60

00:05:59.620  -->  00:06:04.440
done this when you can actually convert
this try finally to a try with resources so
61

61

00:06:04.440  -->  00:06:11.750
let's go ahead and write the load to-do
items method so....
62

62

00:06:11.750  -->  00:06:12.440
...
63

63

00:06:12.440  -->  00:06:25.590
.....
64

64

00:06:25.590  -->  00:06:33.990
....and will talk a bit more
65

65

00:06:33.990  -->  00:06:38.680
about that as we go through and we
need to specify a path to the files so...
66

66

00:06:38.680  -->  00:06:45.300
...
67

67

00:06:45.300  -->  00:07:03.620
....
68

68

00:07:03.620  -->  00:07:05.930
...
69

69

00:07:05.930  -->  00:07:09.900
...so we are pointing to the location where the
file is and we also want a string which
70

70

00:07:09.900  -->  00:07:14.640
is going to contain the data for each
line so lets move up so that we get a
71

71

00:07:14.640  -->  00:07:21.560
bit more space so we can see what we are doing and we are gonna add a try here so....
72

72

00:07:21.560  -->  00:07:24.560
...
73

73

00:07:25.080  -->  00:07:29.370
....
74

74

00:07:29.370  -->  00:07:37.200
....but within
the try block itself we're going to
75

75

00:07:37.200  -->  00:07:41.390
create the loop that goes through and retrieves the data so.....
76

76

00:07:41.390  -->  00:07:59.440
....
77

77

00:07:59.440  -->  00:08:05.110
ok so the data will use a string
array for that so....
78

78

00:08:05.110  -->  00:08:30.800
...
79

79

00:08:30.800  -->  00:08:42.440
....
80

80

00:08:42.440  -->  00:08:51.190
....I take that back short description is
81

81

00:08:51.190  -->  00:08:52.720
of course the one on the left hand side
82

82

00:08:52.720  -->  00:08:55.980
details is the one on the right hand
side I was one step ahead of myself
83

83

00:08:55.980  -->  00:09:00.920
the second one is the date string...
84

84

00:09:00.920  -->  00:09:07.230
...okay and then what we want to do is
convert the date to a format that we can
85

85

00:09:07.230  -->  00:09:15.370
read it so...
86

86

00:09:15.370  -->  00:09:22.530
.....the formater we set up in the
87

87

00:09:22.530  -->  00:09:27.570
private constructor and then we would just create the to do item so at this point we've got the
88

88

00:09:27.570  -->  00:09:31.630
three pieces of information the short
description the details and the date
89

89

00:09:31.630  -->  00:09:42.700
string we formatted the date so we want to add a to do so....
90

90

00:09:42.700  -->  00:09:45.700
....
91

91

00:09:46.370  -->  00:09:56.630
...
92

92

00:09:58.580  -->  00:10:05.080
....so we built up an array list of our
items and we are good to go so that's the
93

93

00:10:05.080  -->  00:10:10.740
method that retrieves them load to do
items so now we need to create one more
94

94

00:10:10.740  -->  00:10:18.870
method and I'll just go through a couple of things and we will finish this video and what we'll do is we'll
95

95

00:10:18.870  -->  00:10:28.140
come down here and we'll write the next method and the next one last method in
96

96

00:10:28.140  -->  00:10:37.120
this class is...and that is going to be the
97

97

00:10:37.120  -->  00:10:43.160
one that saves the data that's also
gonna throw an IOException and for this
98

98

00:10:43.160  -->  00:10:43.630
one
99

99

00:10:43.630  -->  00:10:48.140
similar we need a path to point through where we're going to save it
100

100

00:10:48.140  -->  00:11:10.380
....
101

101

00:11:11.560  -->  00:11:18.880
....
102

102

00:11:19.640  -->  00:11:24.950
....
103

103

00:11:24.950  -->  00:11:28.430
...
104

104

00:11:28.430  -->  00:11:36.050
....ok so we are going to iterate through the list of to do items
105

105

00:11:36.050  -->  00:11:40.390
and save them one entry at a time to the
text file
106

106

00:11:41.040  -->  00:11:51.890
so we are going to create an iterator so....
107

107

00:11:51.890  -->  00:12:01.170
...so it builds up an iterator that
108

108

00:12:01.170  -->  00:12:06.230
we can then cycle through record by record entry by entry from our list of to do items
109

109

00:12:06.230  -->  00:12:10.320
and retrieve one at a time....
110

110

00:12:10.320  -->  00:12:14.870
testing to see whether there's another
entry in the iterator we can use and if their
111

111

00:12:14.870  -->  00:12:17.810
is this code is going to be executed so we'll...
112

112

00:12:17.810  -->  00:12:26.240
...
113

113

00:12:26.240  -->  00:12:47.670
....
114

114

00:12:49.480  -->  00:13:06.740
...
115

115

00:13:06.740  -->  00:13:25.870
....
116

116

00:13:25.870  -->  00:13:31.230
...
117

117

00:13:31.230  -->  00:13:40.530
....alright so
118

118

00:13:40.530  -->  00:13:45.560
that should be our methods now so again
looking back at the code we've got the load
119

119

00:13:45.560  -->  00:13:52.110
to-do items that reads the to do items from a file so the store items method writes data
120

120

00:13:52.110  -->  00:13:56.380
the to do items to a file and as I
mentioned we are using the tab delimiter
121

121

00:13:56.380  -->  00:14:02.720
to delimit each to do items value we wouldn't do this
probably in a real application what we would do is
122

122

00:14:02.720  -->  00:14:07.850
more than likely store the items as XML
or perhaps even use the data base and
123

123

00:14:07.850  -->  00:14:12.420
particularly if we thought there would be a lot of
them because using a text file for large
124

124

00:14:12.420  -->  00:14:16.430
amounts of record soon becomes very impractical but it's
125

125

00:14:16.430  -->  00:14:19.700
gonna server our purpose quite well for
this sample application
126

126

00:14:19.700  -->  00:14:24.540
now the set to do  items which we saw
here on line 38 is temporary
127

127

00:14:24.540  -->  00:14:27.260
we only needed when we run the
application then closed it to save
128

128

00:14:27.260  -->  00:14:30.550
the hard coded items and getting back to the
singleton
129

129

00:14:31.220  -->  00:14:34.980
because this is a singleton whenever any
part of our application wants to access the
130

130

00:14:34.980  -->  00:14:40.680
data it has to call to do data.getinstance.gettodoitems because
131

131

00:14:40.680  -->  00:14:44.190
of course we set our constructor to be
a private one meaning you can
132

132

00:14:44.190  -->  00:14:49.300
instantiate a new object from this class
by any other means essentially and we
133

133

00:14:49.300  -->  00:14:53.700
are gonna add more methods to this class as we need them
so I'm gonna stop the video here now and
134

134

00:14:53.700  -->  00:14:57.950
in the next video what we'll do is we'll swing
over to the main class and will override
135

135

00:14:57.950  -->  00:15:02.900
the stop method and put some code in
there to start using this to do data so I'll
136

136

00:15:02.900  -->  00:15:03.700
see you in the next video
