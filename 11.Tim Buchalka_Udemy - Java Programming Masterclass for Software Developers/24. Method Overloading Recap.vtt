WEBVTT
1
1

00:00:04.720  -->  00:00:06.939
So let's have a bit of a recap on what
2

2

00:00:06.939  -->  00:00:08.200
we've learnt about method overloading
3

3

00:00:08.200  -->  00:00:11.200
and discuss the benefits of by using
4

4

00:00:11.200  -->  00:00:12.570
method overloading.
5

5

00:00:12.570  -->  00:00:15.309
So confirming again as a recap that
6

6

00:00:15.309  -->  00:00:17.590
method overloading is a feature that
7

7

00:00:17.590  -->  00:00:19.330
allows us to have more than one method
8

8

00:00:19.330  -->  00:00:21.789
with the same name so long as we use
9

9

00:00:21.789  -->  00:00:24.820
different arguments or parameters so
10

10

00:00:24.820  -->  00:00:26.470
it's the ability to create multiple
11

11

00:00:26.470  -->  00:00:29.580
methods of the same name with different
12

12

00:00:29.580  -->  00:00:32.349
implementations, calls to an overloaded
13

13

00:00:32.349  -->  00:00:33.790
method will run a specific
14

14

00:00:33.790  -->  00:00:36.070
implementation or version if you will of
15

15

00:00:36.070  -->  00:00:39.219
that method. Now in the example from the
16

16

00:00:39.219  -->  00:00:41.230
previous video, we hit the calculate
17

17

00:00:41.230  -->  00:00:46.289
score method that had 0 1 & 2 parameters.
18

18

00:00:46.289  -->  00:00:49.030
As an example let's say that you have to
19

19

00:00:49.030  -->  00:00:51.640
create a method which can do the sum of
20

20

00:00:51.640  -->  00:00:54.129
two numbers the sum of three numbers and
21

21

00:00:54.129  -->  00:00:56.859
the sum of four numbers. Now each method
22

22

00:00:56.859  -->  00:00:58.989
would have parameters passed to it with
23

23

00:00:58.989  -->  00:01:02.289
the numbers to sum, so ending up with the
24

24

00:01:02.289  -->  00:01:04.720
following methods in this example is not
25

25

00:01:04.720  -->  00:01:07.360
good practice and actually is not method
26

26

00:01:07.360  -->  00:01:09.340
overloading so you'd never want to write
27

27

00:01:09.340  -->  00:01:11.649
code like I'm showing you below because
28

28

00:01:11.649  -->  00:01:14.020
it's considered bad practice and you can
29

29

00:01:14.020  -->  00:01:16.030
see in a scenario we've got three
30

30

00:01:16.030  -->  00:01:18.580
methods of different names to remember.
31

31

00:01:18.580  -->  00:01:20.560
So the main problem here with these
32

32

00:01:20.560  -->  00:01:21.940
methods is that you have to remember
33

33

00:01:21.940  -->  00:01:24.190
three method names that do the sum. Now
34

34

00:01:24.190  -->  00:01:26.050
imagine that you wanted to have a method
35

35

00:01:26.050  -->  00:01:28.479
that adds up to 20 numbers. You know your
36

36

00:01:28.479  -->  00:01:30.039
victory in up having to write 20
37

37

00:01:30.039  -->  00:01:32.039
different methods with 20 different names,
38

38

00:01:32.039  -->  00:01:34.209
remember ng 20 names would be quite hard
39

39

00:01:34.209  -->  00:01:37.149
so to overcome this problem we can use
40

40

00:01:37.149  -->  00:01:40.119
the same name for the method, let's see
41

41

00:01:40.119  -->  00:01:42.729
it see an example of that so a solution
42

42

00:01:42.729  -->  00:01:44.470
to that problem with method overloading
43

43

00:01:44.470  -->  00:01:46.690
would still end up with three methods
44

44

00:01:46.690  -->  00:01:48.789
but note that they're now all sharing
45

45

00:01:48.789  -->  00:01:50.679
the same method name much easy to
46

46

00:01:50.679  -->  00:01:53.130
remember so we've got a method that sums
47

47

00:01:53.130  -->  00:01:56.380
overloaded twice with two three or four
48

48

00:01:56.380  -->  00:01:58.810
parameters so that's an example of how
49

49

00:01:58.810  -->  00:02:00.670
the method should be written in other
50

50

00:02:00.670  -->  00:02:01.929
words we can use the method overloading
51

51

00:02:01.929  -->  00:02:04.000
feature and write methods with the same
52

52

00:02:04.000  -->  00:02:06.099
name so that way we just need to
53

53

00:02:06.099  -->  00:02:07.929
remember one name of the method which in
54

54

00:02:07.929  -->  00:02:10.360
this case is sum. Alright so let's now
55

55

00:02:10.360  -->  00:02:13.270
see both examples at once so at the top
56

56

00:02:13.270  -->  00:02:14.830
there we've got the bare practice and
57

57

00:02:14.830  -->  00:02:18.140
that's with the three different method names
58

58

00:02:18.140  -->  00:02:19.760
and again the reason we're doing that is
59

59

00:02:19.760  -->  00:02:21.350
firstly it's not method overloading but
60

60

00:02:21.350  -->  00:02:23.780
secondly it's hard to remember method
61

61

00:02:23.780  -->  00:02:25.700
names that are different there in the
62

62

00:02:25.700  -->  00:02:28.010
example below, we've got three methods
63

63

00:02:28.010  -->  00:02:29.660
with the same name we just have to
64

64

00:02:29.660  -->  00:02:31.730
remember one method name and it gives us
65

65

00:02:31.730  -->  00:02:33.590
more flexiblity, you can see how method
66

66

00:02:33.590  -->  00:02:35.120
overloading can be very helpful when
67

67

00:02:35.120  -->  00:02:37.160
scenarios like this you keep in mind
68

68

00:02:37.160  -->  00:02:38.960
that method overloading is a very common
69

69

00:02:38.960  -->  00:02:40.850
thing it's used everywhere and in many
70

70

00:02:40.850  -->  00:02:43.460
other languages as well. So as an
71

71

00:02:43.460  -->  00:02:45.680
example the printing method which of
72

72

00:02:45.680  -->  00:02:47.840
course is part of Java that's a great
73

73

00:02:47.840  -->  00:02:50.180
example of method overloading there's
74

74

00:02:50.180  -->  00:02:52.100
actually ten methods with the same name
75

75

00:02:52.100  -->  00:02:55.220
print line in Java and that's allowing
76

76

00:02:55.220  -->  00:02:57.170
us to print an integer and a double
77

77

00:02:57.170  -->  00:02:59.810
print a string and so on. So you can see
78

78

00:02:59.810  -->  00:03:01.580
that's a good example of method
79

79

00:03:01.580  -->  00:03:04.490
overloading, so it's a formal recap on
80

80

00:03:04.490  -->  00:03:05.330
method overloading,
81

81

00:03:05.330  -->  00:03:07.220
it improves code readability and
82

82

00:03:07.220  -->  00:03:10.459
reusability, it's easier to remember one
83

83

00:03:10.459  -->  00:03:12.080
method name instead of remembering
84

84

00:03:12.080  -->  00:03:15.140
multiple names, it achieves consistency
85

85

00:03:15.140  -->  00:03:17.750
in naming so one name four methods that
86

86

00:03:17.750  -->  00:03:20.360
are commonly used and it's example println
87

87

00:03:20.360  -->  00:03:22.489
from the java language itself and
88

88

00:03:22.489  -->  00:03:24.410
finally overloaded methods give
89

89

00:03:24.410  -->  00:03:26.780
programmers the flexibility to call a
90

90

00:03:26.780  -->  00:03:29.060
similar method with different types of
91

91

00:03:29.060  -->  00:03:31.040
data based on the arguments or
92

92

00:03:31.040  -->  00:03:33.890
parameters that you define so that's the
93

93

00:03:33.890  -->  00:03:36.050
method overloading recap, let's now move
94

94

00:03:36.050  -->  00:03:39.220
on to the next video.
