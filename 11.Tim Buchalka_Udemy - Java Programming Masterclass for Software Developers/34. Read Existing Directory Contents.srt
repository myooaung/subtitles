1
1

00:00:05,150  -->  00:00:05,990
- [Tim] In the last video,
2

2

00:00:05,990  -->  00:00:08,570
we learned how to create a directory.
3

3

00:00:08,570  -->  00:00:09,400
We're now gonna have a look
4

4

00:00:09,400  -->  00:00:11,590
at how to read that existing directory.
5

5

00:00:11,590  -->  00:00:12,940
Now, a directory's content
6

6

00:00:12,940  -->  00:00:15,830
is the list of files that it contains.
7

7

00:00:15,830  -->  00:00:18,310
So, to make sure that
we're on the same page,
8

8

00:00:18,310  -->  00:00:21,080
I've created a new project
called Directories,
9

9

00:00:21,080  -->  00:00:22,520
as you can see on screen.
10

10

00:00:22,520  -->  00:00:24,880
And inside the project, you can see
11

11

00:00:24,880  -->  00:00:26,780
that I've created this project structure,
12

12

00:00:26,780  -->  00:00:29,000
and I'll get you to do the
same so you can follow along.
13

13

00:00:29,000  -->  00:00:30,910
Now, the actual file names
here can all be empty
14

14

00:00:30,910  -->  00:00:32,030
or can have any contents.
15

15

00:00:32,030  -->  00:00:34,350
That doesn't really matter,
so long as they're there.
16

16

00:00:34,350  -->  00:00:37,410
So you can see that I've made
a sub-folder called FileTree,
17

17

00:00:37,410  -->  00:00:41,370
and starting out, a sub-folder
from FileTree, DIR1,
18

18

00:00:41,370  -->  00:00:45,450
and it's got two files,
file1 and file2.txt.
19

19

00:00:45,450  -->  00:00:47,600
We've got a Dir2 folder.
20

20

00:00:47,600  -->  00:00:49,350
The Dir2 folder,
21

21

00:00:49,350  -->  00:00:51,990
again, that's a sub-folder
of the FileTree folder.
22

22

00:00:51,990  -->  00:00:55,800
That's got file1, file2, and file3.txt.
23

23

00:00:55,800  -->  00:00:58,510
So we'll take our subfolder, Dir3,
24

24

00:00:58,510  -->  00:01:02,480
that's got file1 and file2.txt,
and then moving back up,
25

25

00:01:02,480  -->  00:01:06,550
back on the FileTree folder,
we've got a Dir4 folder
26

26

00:01:06,550  -->  00:01:08,960
or subfolder that's got the filename
27

27

00:01:08,960  -->  00:01:10,960
or the folder file3.txt,
28

28

00:01:11,900  -->  00:01:14,940
and then finally, the
FileTree folder itself
29

29

00:01:14,940  -->  00:01:19,630
has actually got two files
in it, file1.txt, file2.txt,
30

30

00:01:19,630  -->  00:01:21,050
in addition to the various folders,
31

31

00:01:21,050  -->  00:01:23,280
and we can just collapse those.
32

32

00:01:23,280  -->  00:01:25,830
And you can see that we've
got those two files as well.
33

33

00:01:25,830  -->  00:01:27,340
So, you basically wanna create
34

34

00:01:27,340  -->  00:01:28,990
that same directory structure,
35

35

00:01:28,990  -->  00:01:30,460
and you've seen in a previous video
36

36

00:01:30,460  -->  00:01:34,830
how to go about the directory
structure within IntelliJ.
37

37

00:01:34,830  -->  00:01:36,720
All right, so now that
we've actually got that,
38

38

00:01:36,720  -->  00:01:39,030
we're going to read the
entries in our directory
39

39

00:01:39,030  -->  00:01:41,960
using the files.newDirectoryStream method.
40

40

00:01:41,960  -->  00:01:44,780
Now, this method actually returns a stream
41

41

00:01:44,780  -->  00:01:46,390
which needs to be closed
once it's finished,
42

42

00:01:46,390  -->  00:01:48,090
and consequently, we're going to use
43

43

00:01:48,090  -->  00:01:50,370
a try-with-resources statement to do that,
44

44

00:01:50,370  -->  00:01:52,300
and then we'll catch an IOException
45

45

00:01:52,300  -->  00:01:54,400
just in case there is one along the way.
46

46

00:01:54,400  -->  00:01:57,650
So, to start that, we're going to start
47

47

00:01:59,230  -->  00:02:02,890
with Path directory is
equal to FileSystems.
48

48

00:02:05,890  -->  00:02:07,660
Accept those imports.
49

49

00:02:07,660  -->  00:02:11,570
.getDefault.getPath, as
we've done in the past,
50

50

00:02:12,660  -->  00:02:16,860
and we're going to use the
FileTree, which is our subfolder,
51

51

00:02:16,860  -->  00:02:17,820
and in my case, I'm a Mac.
52

52

00:02:17,820  -->  00:02:19,620
I'm going to put a forward slash,
53

53

00:02:19,620  -->  00:02:23,700
Dir2, and I need to change
the level to 1.8 here,
54

54

00:02:25,880  -->  00:02:29,710
so I'm just going to go
into Module Settings >
55

55

00:02:30,800  -->  00:02:35,070
Project, and make sure that
I've got Java 8 specified here.
56

56

00:02:35,070  -->  00:02:37,410
If I do that, that should fix that error.
57

57

00:02:37,410  -->  00:02:40,650
But again, if you're on a
PC, the file path will be
58

58

00:02:40,650  -->  00:02:44,820
FileTree\\Dir2, and I'll
just put that in Windows.
59

59

00:02:49,330  -->  00:02:50,860
All right, so that's the path,
and then we wanna do this
60

60

00:02:50,860  -->  00:02:52,520
try-with-resources that I talked about.
61

61

00:02:52,520  -->  00:02:55,970
We'll do try, then in parentheses,
62

62

00:02:55,970  -->  00:02:58,620
it's going to be DirectoryStream,
63

63

00:02:58,620  -->  00:03:01,790
and <Path> contents is equal to Files,
64

64

00:03:06,080  -->  00:03:10,300
dot, and it's
newDirectoryStream(directory)
65

65

00:03:10,300  -->  00:03:13,230
in parentheses as you can see there.
66

66

00:03:13,230  -->  00:03:14,520
And we'll leave that code for now,
67

67

00:03:14,520  -->  00:03:17,850
but we'll actually catch an IOException,
68

68

00:03:19,510  -->  00:03:20,950
and if we get one, let's
just print out the message.
69

69

00:03:20,950  -->  00:03:22,290
So e.getMessage.
70

70

00:03:23,750  -->  00:03:26,260
So firstly, on line 12,
we're actually creating
71

71

00:03:26,260  -->  00:03:28,510
the path to the directory.
72

72

00:03:28,510  -->  00:03:30,600
Now, we're using FileSystems.getDefault
73

73

00:03:30,600  -->  00:03:31,530
to get the working directory
74

74

00:03:31,530  -->  00:03:34,570
so that we don't have to
specify the absolute path,
75

75

00:03:34,570  -->  00:03:35,660
and of course we've talked about that
76

76

00:03:35,660  -->  00:03:37,690
quite a few times in the past.
77

77

00:03:37,690  -->  00:03:38,940
Now, when running the application,
78

78

00:03:38,940  -->  00:03:42,320
the working directory will
be the IntelliJ ID project
79

79

00:03:42,320  -->  00:03:45,080
directory, and so you have to
start up the file directory
80

80

00:03:45,080  -->  00:03:47,510
tree when you get to tack
on the rest of the path.
81

81

00:03:47,510  -->  00:03:50,470
So that's why we've got
FileTree here in the path.
82

82

00:03:50,470  -->  00:03:53,660
Once we've got our path,
after also tacking on Dir2,
83

83

00:03:53,660  -->  00:03:55,640
we'll be going onto line 13.
84

84

00:03:55,640  -->  00:03:57,830
We're creating the DirectoryStream.
85

85

00:03:57,830  -->  00:03:59,880
Now, notice that the new
DirectoryStream method
86

86

00:03:59,880  -->  00:04:02,800
returns a DirectoryStream of paths.
87

87

00:04:03,740  -->  00:04:04,910
You can see that there,
88

88

00:04:04,910  -->  00:04:05,820
so I'll hover over that.
89

89

00:04:05,820  -->  00:04:07,400
DirectoryStream of Path
is getting returned
90

90

00:04:07,400  -->  00:04:09,780
from newDirectoryStream.
91

91

00:04:09,780  -->  00:04:11,840
Now, DirectoryStream is an interface
92

92

00:04:11,840  -->  00:04:15,140
that implements the Iterable
interface, so consequently,
93

93

00:04:15,140  -->  00:04:16,960
you can iterate over the return paths
94

94

00:04:16,960  -->  00:04:20,470
to get the contents of the Dir2 folder.
95

95

00:04:20,470  -->  00:04:22,870
So let's actually put
that Iterable code in,
96

96

00:04:22,870  -->  00:04:24,550
or some code that it'll iterate through.
97

97

00:04:24,550  -->  00:04:28,720
So it'll for, in parentheses,
(Path file: contents),
98

98

00:04:32,670  -->  00:04:33,710
and let's just print it out.
99

99

00:04:33,710  -->  00:04:38,590
So print System.out to
println(file.getFileName).
100

100

00:04:38,590  -->  00:04:40,680
So if we do that, we
should get the output,
101

101

00:04:40,680  -->  00:04:42,180
so let's run that.
102

102

00:04:45,180  -->  00:04:48,350
Let's put this output down the bottom.
103

103

00:04:50,820  -->  00:04:52,450
And ignoring that first
line in red, which is
104

104

00:04:52,450  -->  00:04:55,930
the Mac warning that should
probably go away shortly
105

105

00:04:55,930  -->  00:04:58,420
once they fix it in a
later version of the JDK.
106

106

00:04:58,420  -->  00:05:00,760
You can see that we've
got a Dir entry there
107

107

00:05:00,760  -->  00:05:04,080
that's been returned, as well
as file one, two, and three.
108

108

00:05:04,080  -->  00:05:08,270
So basically, we've passed
the Dir2 folder there,
109

109

00:05:08,270  -->  00:05:11,620
and it's given us an entry for Dir3,
110

110

00:05:11,620  -->  00:05:14,830
which is a folder, obviously,
but also the three file names.
111

111

00:05:14,830  -->  00:05:17,590
But notice that only the contents directly
112

112

00:05:17,590  -->  00:05:20,520
within the Dir2 directory
are within the stream.
113

113

00:05:20,520  -->  00:05:22,190
So in other words, the method only returns
114

114

00:05:22,190  -->  00:05:24,880
the first level of
content, also referred to
115

115

00:05:24,880  -->  00:05:27,160
as the directory's direct descendants.
116

116

00:05:27,160  -->  00:05:29,980
Now, it doesn't go into the
Dir3 directory in this case
117

117

00:05:29,980  -->  00:05:31,770
and return its files as well,
118

118

00:05:31,770  -->  00:05:33,520
but you will see how to walk
119

119

00:05:33,520  -->  00:05:36,830
an entire directory tree
a little bit later on.
120

120

00:05:36,830  -->  00:05:39,210
Now, when iterating
over a DirectoryStream,
121

121

00:05:39,210  -->  00:05:42,910
a DirectoryIteratorException
may be thrown, so
122

122

00:05:42,910  -->  00:05:45,670
it's actually good practise
to explicitly catch that,
123

123

00:05:45,670  -->  00:05:49,820
and we can actually do that
by using the pipe character,
124

124

00:05:49,820  -->  00:05:52,690
so here, in the
catch(IOException), we can put
125

125

00:05:52,690  -->  00:05:56,860
the pipe character and
DirectoryIteratorException,
126

126

00:06:00,300  -->  00:06:02,680
which is another way to catch both.
127

127

00:06:02,680  -->  00:06:04,200
So we haven't really used
that much in the course.
128

128

00:06:04,200  -->  00:06:06,370
We normally use a logical or.
129

129

00:06:06,370  -->  00:06:09,280
The logical or has got
the two pipe characters,
130

130

00:06:09,280  -->  00:06:11,570
but using one like this,
well, this is known
131

131

00:06:11,570  -->  00:06:13,900
as a bitwise-inclusive or.
132

132

00:06:13,900  -->  00:06:15,670
So when you're actually
chaining together exceptions
133

133

00:06:15,670  -->  00:06:16,640
like this, you can use that
134

134

00:06:16,640  -->  00:06:19,030
to put them all on the same line.
135

135

00:06:19,030  -->  00:06:20,300
So that's just a bit of a shorthand way
136

136

00:06:20,300  -->  00:06:24,460
to avoid you having to create
two separate catch statements.
137

137

00:06:25,330  -->  00:06:26,930
Now, what if you only
wanted to list or work
138

138

00:06:26,930  -->  00:06:29,810
on specific types of files in a directory?
139

139

00:06:29,810  -->  00:06:31,760
So, for example, let's say the application
140

140

00:06:31,760  -->  00:06:33,950
works with .DAT files.
141

141

00:06:33,950  -->  00:06:36,320
Now, sure, you could retrieve
everything in the directory
142

142

00:06:36,320  -->  00:06:38,610
and then check in each pathname,
143

143

00:06:38,610  -->  00:06:40,600
but there's actually
a better way to do it.
144

144

00:06:40,600  -->  00:06:43,920
Now, the newDirectoryStream
method accepts a filter
145

145

00:06:43,920  -->  00:06:47,560
as a second parameter, and only
paths that match the filter
146

146

00:06:47,560  -->  00:06:50,680
will actually be included
in the DirectoryStream.
147

147

00:06:50,680  -->  00:06:52,290
Now, the second filtering parameter
148

148

00:06:52,290  -->  00:06:53,920
is referred to as a glob.
149

149

00:06:53,920  -->  00:06:56,840
Now, what a glob is is
a pattern that's similar
150

150

00:06:56,840  -->  00:06:59,540
to a regular expression, but
the syntax is more geared
151

151

00:06:59,540  -->  00:07:00,480
towards the types of things
152

152

00:07:00,480  -->  00:07:03,970
you'd wanna do when working with paths.
153

153

00:07:03,970  -->  00:07:05,770
And I've got a few examples
up on the screen now
154

154

00:07:05,770  -->  00:07:06,870
as you can see there.
155

155

00:07:06,870  -->  00:07:09,480
We've got a star character
to match any string,
156

156

00:07:09,480  -->  00:07:11,680
which can contain any
number of characters.
157

157

00:07:11,680  -->  00:07:13,580
We've got *.dat there, an example,
158

158

00:07:13,580  -->  00:07:16,370
will match any path with a .dat extension.
159

159

00:07:16,370  -->  00:07:18,760
You can see another example there is *.
160

160

00:07:18,760  -->  00:07:22,670
And then  in left
and right curly braces.
161

161

00:07:22,670  -->  00:07:23,810
Well, that'll match any path
162

162

00:07:23,810  -->  00:07:27,400
that's got the extension .dat or .txt.
163

163

00:07:27,400  -->  00:07:30,110
The question mark matches
exactly one character.
164

164

00:07:30,110  -->  00:07:34,490
For example, the glob
??? will actually match
165

165

00:07:34,490  -->  00:07:38,360
any path that contains
exactly three characters.
166

166

00:07:38,360  -->  00:07:41,380
Another example, myfile*,
matches any paths
167

167

00:07:41,380  -->  00:07:44,250
that begin with the text myfile,
168

168

00:07:44,250  -->  00:07:46,500
and the last one, b?*.text,
169

169

00:07:47,460  -->  00:07:50,110
well, that will match
any path that is at least
170

170

00:07:50,110  -->  00:07:54,980
two characters long and
begin with the character b.
171

171

00:07:54,980  -->  00:07:57,750
Now, the question mark here
forces a second character,
172

172

00:07:57,750  -->  00:08:01,410
and the star then matches
zero or more characters.
173

173

00:08:01,410  -->  00:08:02,530
Now, there's a lot more than you can do
174

174

00:08:02,530  -->  00:08:03,750
than what I've shown there.
175

175

00:08:03,750  -->  00:08:05,860
Now, for the complete glob syntax,
176

176

00:08:05,860  -->  00:08:08,290
you can actually check the documentation
177

177

00:08:08,290  -->  00:08:11,810
for the FileSystem.getPathMatcher method,
178

178

00:08:11,810  -->  00:08:13,120
and I'll just bring that
up on the screen quickly
179

179

00:08:13,120  -->  00:08:14,790
so you can see that.
180

180

00:08:21,310  -->  00:08:24,590
And it's this one here,
the getPathMatcher.
181

181

00:08:24,590  -->  00:08:27,270
Now, if the glob syntax isn't
sufficient for you to describe
182

182

00:08:27,270  -->  00:08:29,990
the paths you wanna retrieve,
what you can also do
183

183

00:08:29,990  -->  00:08:32,270
is pass a regular
expression, and therefore
184

184

00:08:32,270  -->  00:08:35,170
really take full advantage
of the power that they offer.
185

185

00:08:35,170  -->  00:08:36,750
But the majority of the
time, I think you'll find
186

186

00:08:36,750  -->  00:08:38,880
that the globs should be enough.
187

187

00:08:38,880  -->  00:08:42,210
All right, so let's go back to IntelliJ.
188

188

00:08:43,460  -->  00:08:45,830
So if you wanted to actually
make a change here and say
189

189

00:08:45,830  -->  00:08:48,070
to retrieve only the filenames
190

190

00:08:48,070  -->  00:08:51,250
with one of the files that
have got a .dat extension,
191

191

00:08:51,250  -->  00:08:54,120
on the newDirectoryStream
method, as the second argument,
192

192

00:08:54,120  -->  00:08:55,710
we could put *.dat,
193

193

00:08:59,950  -->  00:09:01,780
and what I'll do is,
just for that to work,
194

194

00:09:01,780  -->  00:09:04,040
at the moment, we've got
all of these .txt files,
195

195

00:09:04,040  -->  00:09:05,300
but let's just change one.
196

196

00:09:05,300  -->  00:09:07,110
I'm going to actually refactor and rename
197

197

00:09:07,110  -->  00:09:09,850
this one in the Dir2 folder.
198

198

00:09:09,850  -->  00:09:13,600
Let's refactor that to
a .dat file extension.
199

199

00:09:16,320  -->  00:09:17,770
So if we actually run this now,
200

200

00:09:17,770  -->  00:09:21,930
we should find that it will
return only the .dat file.
201

201

00:09:23,050  -->  00:09:25,330
You can see only file3.dat
has returned now,
202

202

00:09:25,330  -->  00:09:27,870
because that's the only file
that meets our criteria,
203

203

00:09:27,870  -->  00:09:30,910
including the directories as well.
204

204

00:09:30,910  -->  00:09:32,650
Now, I said earlier that when you retrieve
205

205

00:09:32,650  -->  00:09:35,260
the entire contents of
a directory, you can use
206

206

00:09:35,260  -->  00:09:37,580
the isDirectory and isRegularFile methods
207

207

00:09:37,580  -->  00:09:39,920
to separate files from directories.
208

208

00:09:39,920  -->  00:09:41,310
I said that in a previous video.
209

209

00:09:41,310  -->  00:09:43,790
But there's actually
an easier way to do it.
210

210

00:09:43,790  -->  00:09:46,140
But this time, a glob won't help,
211

211

00:09:46,140  -->  00:09:48,400
and that's because globs
are used to match patterns
212

212

00:09:48,400  -->  00:09:49,450
against filenames.
213

213

00:09:49,450  -->  00:09:52,250
So in other words, they don't
operate on file attributes,
214

214

00:09:52,250  -->  00:09:54,710
but there's a third version of
the newDirectoryStream method
215

215

00:09:54,710  -->  00:09:58,200
that does accept a
DirectoryStream.Filter parameter,
216

216

00:09:58,200  -->  00:10:00,630
and that allows you to
write your own filters.
217

217

00:10:00,630  -->  00:10:03,030
So, let's just have a
go at writing a filter
218

218

00:10:03,030  -->  00:10:06,830
that only returns files
and not directories.
219

219

00:10:06,830  -->  00:10:08,670
Now, the DirectoryStream.Filter interface
220

220

00:10:08,670  -->  00:10:10,760
has only got one method called accept,
221

221

00:10:10,760  -->  00:10:13,380
so that's the method that
we have to implement.
222

222

00:10:13,380  -->  00:10:15,900
Now, when accept returns true for a path,
223

223

00:10:15,900  -->  00:10:19,640
the path will be included in
the DirectoryStream results.
224

224

00:10:19,640  -->  00:10:20,850
So let's go ahead and do that.
225

225

00:10:20,850  -->  00:10:22,270
So we'll start with this code
226

226

00:10:22,270  -->  00:10:26,740
up above the path directory
code here on line 10.
227

227

00:10:26,740  -->  00:10:29,820
We'll do DirectoryStream<Path> filter
228

228

00:10:34,760  -->  00:10:38,680
is equal to, and we'll
put new DirectoryStream,
229

229

00:10:41,690  -->  00:10:42,910
and as I'm typing, I should be able
230

230

00:10:42,910  -->  00:10:46,250
to select DirectoryStream.Filter, like so,
231

231

00:10:46,250  -->  00:10:49,170
and then I can type in <Path> here,
232

232

00:10:51,780  -->  00:10:53,220
and I'll have to implement
the method myself,
233

233

00:10:53,220  -->  00:10:57,390
so it's going to be public
boolean accept(Path path)
234

234

00:10:59,830  -->  00:11:04,000
throws IOException, and
then I'm just going to do
235

235

00:11:04,000  -->  00:11:08,170
a return Files.isRegularFile(path).
236

236

00:11:17,440  -->  00:11:19,440
Just tidy that up a bit.
237

237

00:11:20,700  -->  00:11:22,380
Now, I need to add that other parenthesis
238

238

00:11:22,380  -->  00:11:24,630
there at the start as well.
239

239

00:11:25,820  -->  00:11:28,260
And up here, DirectoryStream<Path>
should actually be
240

240

00:11:28,260  -->  00:11:31,170
DirectoryStream.Filter,
'cause that's actually
241

241

00:11:31,170  -->  00:11:34,730
what we're working on,
and that keeps it happy.
242

242

00:11:34,730  -->  00:11:36,510
Now that I've done that,
I can actually change
243

243

00:11:36,510  -->  00:11:39,640
the newDirectoryStream method call.
244

244

00:11:39,640  -->  00:11:42,580
We'll get rid of the *.dat there,
245

245

00:11:42,580  -->  00:11:44,750
and we'll change that instead to Filter.
246

246

00:11:44,750  -->  00:11:45,640
And again, what we've done here
247

247

00:11:45,640  -->  00:11:48,110
is with the DirectoryStream.Filter.
248

248

00:11:48,110  -->  00:11:50,640
That interface has only got
one method called accept,
249

249

00:11:50,640  -->  00:11:52,930
and that's the method
that I've implemented,
250

250

00:11:52,930  -->  00:11:54,340
and you have to implement that.
251

251

00:11:54,340  -->  00:11:57,080
And when accept returns
true for a path, the path
252

252

00:11:57,080  -->  00:12:01,050
is going to be included in
the DirectoryStream results.
253

253

00:12:01,050  -->  00:12:02,890
So what we're doing here is
we're actually testing to see
254

254

00:12:02,890  -->  00:12:05,490
whether the particular
path is a regular file.
255

255

00:12:05,490  -->  00:12:07,580
If that returns true, then that means
256

256

00:12:07,580  -->  00:12:09,710
it's going to be shown in
the lists when we go down
257

257

00:12:09,710  -->  00:12:12,980
to print it out here on
lines 20, on line 20.
258

258

00:12:12,980  -->  00:12:15,060
Otherwise, it won't be shown.
259

259

00:12:15,060  -->  00:12:17,640
So if we actually run this now,
260

260

00:12:20,680  -->  00:12:22,340
you can see, we just get
our three files there,
261

261

00:12:22,340  -->  00:12:26,810
file1.txt, file2.txt, and
file3.dat; in other words,
262

262

00:12:26,810  -->  00:12:30,650
the Dir3 subfolder is now not showing,
263

263

00:12:30,650  -->  00:12:33,080
because of course that's
not a regular file.
264

264

00:12:33,080  -->  00:12:34,040
So basically, that filter
265

265

00:12:34,040  -->  00:12:37,490
has now eliminated the Dir directory.
266

266

00:12:37,490  -->  00:12:39,490
And keep in mind that since
there's only one method
267

267

00:12:39,490  -->  00:12:41,380
to implement, we could also have used
268

268

00:12:41,380  -->  00:12:43,810
a Lambda expression instead,
so let's just quickly see
269

269

00:12:43,810  -->  00:12:46,040
how we could have done that as well.
270

270

00:12:46,040  -->  00:12:48,520
So I'm just going to just
temporarily copy these out.
271

271

00:12:48,520  -->  00:12:50,680
Comment these out, rather.
272

272

00:12:51,720  -->  00:12:54,890
So to do the equivalent with a Lambda,
273

273

00:12:54,890  -->  00:12:57,640
we will do DirectoryStream.Filter
274

274

00:13:02,080  -->  00:13:04,580
and then <Path> filter equals,
275

275

00:13:05,580  -->  00:13:07,030
and then write our regular expression,
276

276

00:13:07,030  -->  00:13:10,300
so p, dash, greater than
signs we've one before
277

277

00:13:10,300  -->  00:13:14,050
for regular expressions,
Files.isRegularFile,
278

278

00:13:15,310  -->  00:13:16,420
and p in parentheses.
279

279

00:13:16,420  -->  00:13:18,980
And by the way, depending
on the order of this course,
280

280

00:13:18,980  -->  00:13:21,260
you may not actually have got
up to Lambda expressions yet.
281

281

00:13:21,260  -->  00:13:24,020
There's an entire section on
Lambda expressions in this
282

282

00:13:24,020  -->  00:13:26,710
course, and the reason that
that's happened like that
283

283

00:13:26,710  -->  00:13:29,640
is that I've come back to this I/O section
284

284

00:13:29,640  -->  00:13:31,700
and started adding new content to it,
285

285

00:13:31,700  -->  00:13:33,870
and I did that because students voted
286

286

00:13:33,870  -->  00:13:36,300
for me to stop working on
the I/O section on the time
287

287

00:13:36,300  -->  00:13:38,030
and go back and work on
the Lamdba expressions
288

288

00:13:38,030  -->  00:13:39,480
and other sections of the course,
289

289

00:13:39,480  -->  00:13:40,920
and then I've come back
here and finished it.
290

290

00:13:40,920  -->  00:13:42,890
So, consequently, there's
probably a few things
291

291

00:13:42,890  -->  00:13:44,270
that are out of order.
292

292

00:13:44,270  -->  00:13:46,530
So if you're not understanding
what a Lambda expression is,
293

293

00:13:46,530  -->  00:13:48,790
keep in mind that there's a
future section of the course
294

294

00:13:48,790  -->  00:13:50,480
where we go through that in detail.
295

295

00:13:50,480  -->  00:13:52,820
There's a number of videos
that explain what it is,
296

296

00:13:52,820  -->  00:13:55,280
but for now, this is just
a shortcut, another way
297

297

00:13:55,280  -->  00:13:56,580
of actually achieving the same goal.
298

298

00:13:56,580  -->  00:13:58,690
So if I just do that as I've done there,
299

299

00:13:58,690  -->  00:14:02,430
using a Lambda expression, run it again,
300

300

00:14:02,430  -->  00:14:05,180
we should get the same result.
301

301

00:14:05,180  -->  00:14:07,040
Same result, as you can see on the screen.
302

302

00:14:07,040  -->  00:14:08,980
So it's basically more concise, but again,
303

303

00:14:08,980  -->  00:14:11,330
you get exactly the
same results as before.
304

304

00:14:11,330  -->  00:14:13,530
All right, so let's finish the video here.
305

305

00:14:13,530  -->  00:14:15,430
See you in the next video.
