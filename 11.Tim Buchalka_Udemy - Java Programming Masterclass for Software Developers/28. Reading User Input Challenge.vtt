WEBVTT
1
1

00:00:00.000  -->  00:00:07.470
Alright, it's time now for a challenge this is
2

2

00:00:07.470  -->  00:00:10.230
the reading user input challenge so the
3

3

00:00:10.230  -->  00:00:12.540
challenge goes like this read ten
4

4

00:00:12.540  -->  00:00:14.190
numbers from the console entered by the
5

5

00:00:14.190  -->  00:00:16.800
user and print the sum of those ten
6

6

00:00:16.800  -->  00:00:19.140
numbers and you want to create a scanner
7

7

00:00:19.140  -->  00:00:21.779
like we did in the previous video
8

8

00:00:21.779  -->  00:00:24.150
use the has next int method from the
9

9

00:00:24.150  -->  00:00:26.070
scanner to check if the user has entered
10

10

00:00:26.070  -->  00:00:28.980
an int or an integer value now if has
11

11

00:00:28.980  -->  00:00:31.949
next int returns false print out the
12

12

00:00:31.949  -->  00:00:33.840
message invalid number to the console
13

13

00:00:33.840  -->  00:00:36.090
and you want to continue reading from
14

14

00:00:36.090  -->  00:00:37.649
the console until you've read ten
15

15

00:00:37.649  -->  00:00:40.140
numbers in use the next int method to
16

16

00:00:40.140  -->  00:00:42.059
get each number and add it to the sum
17

17

00:00:42.059  -->  00:00:44.879
before the user enters each number print
18

18

00:00:44.879  -->  00:00:47.789
out a message enter number hash X where
19

19

00:00:47.789  -->  00:00:51.239
X represents the count 1 2 3 4 etc and
20

20

00:00:51.239  -->  00:00:53.070
it's an example there the first message
21

21

00:00:53.070  -->  00:00:54.300
would look something like answer number
22

22

00:00:54.300  -->  00:00:57.510
hash 1 : the next enter number has 2 :
23

23

00:00:57.510  -->  00:01:00.350
and so on and the hints use a while loop
24

24

00:01:00.350  -->  00:01:03.090
secondly use a counter variable for
25

25

00:01:03.090  -->  00:01:05.790
counting valid numbers thirdly close the
26

26

00:01:05.790  -->  00:01:07.740
scanner after you don't need it anymore
27

27

00:01:07.740  -->  00:01:10.770
and the project will be creating should
28

28

00:01:10.770  -->  00:01:12.740
be called reading user input challenge
29

29

00:01:12.740  -->  00:01:15.150
so that's it see if you can figure it
30

30

00:01:15.150  -->  00:01:16.979
out pause the video now and try out that
31

31

00:01:16.979  -->  00:01:18.869
challenge and once you're ready to see
32

32

00:01:18.869  -->  00:01:20.490
my version of the code come back and
33

33

00:01:20.490  -->  00:01:25.390
we'll go through it so pause the video now
34

34

00:01:25.390  -->  00:01:27.830
okay welcome back hopefully you managed
35

35

00:01:27.830  -->  00:01:29.930
to get it working so let's break down
36

36

00:01:29.930  -->  00:01:32.180
this challenge into smaller pieces first
37

37

00:01:32.180  -->  00:01:34.940
off we need to read ten numbers from the
38

38

00:01:34.940  -->  00:01:38.060
console as well as count them and in in
39

39

00:01:38.060  -->  00:01:40.640
addition calculate their sum after we
40

40

00:01:40.640  -->  00:01:43.310
have ten valid numbers we're going to
41

41

00:01:43.310  -->  00:01:45.080
break out of a while loop in this
42

42

00:01:45.080  -->  00:01:47.090
instance we should set a condition in
43

43

00:01:47.090  -->  00:01:49.280
the while loop which checks that a use
44

44

00:01:49.280  -->  00:01:51.560
or when a user has entered ten valid
45

45

00:01:51.560  -->  00:01:53.690
numbers so let's start off by creating
46

46

00:01:53.690  -->  00:01:56.000
the scanner and also it's set close
47

47

00:01:56.000  -->  00:01:57.740
method on the next line so that we have
48

48

00:01:57.740  -->  00:02:00.670
to get to add that later
49

49

00:02:00.670  -->  00:02:05.050
alright so firstly scanner scanner
50

50

00:02:05.050  -->  00:02:09.860
equals new scanner and in parentheses
51

51

00:02:09.860  -->  00:02:13.730
have any system dot in you go to select
52

52

00:02:13.730  -->  00:02:15.640
that option there to bring up the pop-up
53

53

00:02:15.640  -->  00:02:18.110
I'm going to make sure I select Java dot
54

54

00:02:18.110  -->  00:02:19.940
you tool and you can always know that
55

55

00:02:19.940  -->  00:02:20.720
you've got the right one there
56

56

00:02:20.720  -->  00:02:22.130
incidentally if you can see in the
57

57

00:02:22.130  -->  00:02:24.290
import it shows Java dot util dot
58

58

00:02:24.290  -->  00:02:26.480
scanner alright and the next I'm going
59

59

00:02:26.480  -->  00:02:29.930
to type in scanner dot close parentheses
60

60

00:02:29.930  -->  00:02:32.989
to close it off all right now we're
61

61

00:02:32.989  -->  00:02:35.420
going to add two variables counter and
62

62

00:02:35.420  -->  00:02:37.910
some so moving forward all the code will
63

63

00:02:37.910  -->  00:02:40.070
be adding will be written between these
64

64

00:02:40.070  -->  00:02:42.590
lines the scanner definition on line
65

65

00:02:42.590  -->  00:02:44.630
nine and the scanner got close on line
66

66

00:02:44.630  -->  00:02:47.450
12 so for the variables let's start by
67

67

00:02:47.450  -->  00:02:50.800
typing into counter is equal to zero
68

68

00:02:50.800  -->  00:02:53.750
then we'll also do it into some equals
69

69

00:02:53.750  -->  00:02:57.739
zero now the counter variable is going
70

70

00:02:57.739  -->  00:03:00.290
to count the valid numbers and the sum
71

71

00:03:00.290  -->  00:03:02.120
variable represents the sum of the
72

72

00:03:02.120  -->  00:03:04.310
counter numbers so our next step is to
73

73

00:03:04.310  -->  00:03:06.680
loop until we read ten numbers that the
74

74

00:03:06.680  -->  00:03:08.570
user of the application has entered into
75

75

00:03:08.570  -->  00:03:10.820
the console for this purpose we have to
76

76

00:03:10.820  -->  00:03:13.040
use a while loop so I'm going to start
77

77

00:03:13.040  -->  00:03:15.380
with a while loop that never completes
78

78

00:03:15.380  -->  00:03:20.269
so while true if the opening and closing
79

79

00:03:20.269  -->  00:03:23.030
curly braces there so I said that it
80

80

00:03:23.030  -->  00:03:24.560
never completes so what does this while
81

81

00:03:24.560  -->  00:03:27.680
true actually mean well by typing in and
82

82

00:03:27.680  -->  00:03:28.760
as we've done there and I'll just fix
83

83

00:03:28.760  -->  00:03:33.470
this typo before I continue so by typing
84

84

00:03:33.470  -->  00:03:36.560
in while true we're effectively creating
85

85

00:03:36.560  -->  00:03:38.170
an endless loop or
86

86

00:03:38.170  -->  00:03:40.150
that doesn't complete since the
87

87

00:03:40.150  -->  00:03:41.290
condition that we've entered in
88

88

00:03:41.290  -->  00:03:44.530
parentheses on line 14 is always true
89

89

00:03:44.530  -->  00:03:47.020
because true itself is always true in
90

90

00:03:47.020  -->  00:03:49.510
other words the loop never ends and it's
91

91

00:03:49.510  -->  00:03:51.220
a situation we have discussed in
92

92

00:03:51.220  -->  00:03:53.800
previous videos but later in this video
93

93

00:03:53.800  -->  00:03:55.570
I'm going to show you a solution to this
94

94

00:03:55.570  -->  00:03:57.660
challenge without using an endless loop
95

95

00:03:57.660  -->  00:04:00.430
now since this type of loop never ends
96

96

00:04:00.430  -->  00:04:03.130
we need something to break out of it in
97

97

00:04:03.130  -->  00:04:05.440
this case a break statement so when the
98

98

00:04:05.440  -->  00:04:08.170
counter reaches 10 as in once the user
99

99

00:04:08.170  -->  00:04:10.600
has entered 10 valid numbers we can set
100

100

00:04:10.600  -->  00:04:12.580
a break statement to exit out of the
101

101

00:04:12.580  -->  00:04:14.739
loop now we could also accomplish the
102

102

00:04:14.739  -->  00:04:16.989
same thing without a break statement by
103

103

00:04:16.989  -->  00:04:19.329
checking the counter variable but it's a
104

104

00:04:19.329  -->  00:04:21.250
good idea to get used to using a break
105

105

00:04:21.250  -->  00:04:23.200
statement before the user starts
106

106

00:04:23.200  -->  00:04:25.000
entering numbers we should print out a
107

107

00:04:25.000  -->  00:04:26.980
message that instructs the user on what
108

108

00:04:26.980  -->  00:04:29.380
to do first I'm going to create an int
109

109

00:04:29.380  -->  00:04:31.450
variable called order and set it equal
110

110

00:04:31.450  -->  00:04:37.090
to counter plus 1 so int order equals
111

111

00:04:37.090  -->  00:04:43.330
counter plus 1 and notice that we've got
112

112

00:04:43.330  -->  00:04:45.610
an error here we've got this unreachable
113

113

00:04:45.610  -->  00:04:48.400
statement and the problem here is that
114

114

00:04:48.400  -->  00:04:49.840
intellij is telling us that you've
115

115

00:04:49.840  -->  00:04:50.919
written a statement here that never
116

116

00:04:50.919  -->  00:04:53.500
exits it never finishes how it's an
117

117

00:04:53.500  -->  00:04:55.540
endless loop so consequently the code
118

118

00:04:55.540  -->  00:04:57.550
can never get down to here but you'll
119

119

00:04:57.550  -->  00:04:59.530
find that that disappears once we've
120

120

00:04:59.530  -->  00:05:00.940
written some code in this while loop
121

121

00:05:00.940  -->  00:05:03.010
that actually allows us to break out of
122

122

00:05:03.010  -->  00:05:05.410
the loop alright so getting back to this
123

123

00:05:05.410  -->  00:05:08.380
order variable on line 15 well this will
124

124

00:05:08.380  -->  00:05:10.240
impact the message we print to the user
125

125

00:05:10.240  -->  00:05:13.630
so the idea is to substitute order for X
126

126

00:05:13.630  -->  00:05:16.630
in the message enter number has X so
127

127

00:05:16.630  -->  00:05:18.729
that the user is informed and when to
128

128

00:05:18.729  -->  00:05:20.500
enter the first number the second and so
129

129

00:05:20.500  -->  00:05:22.630
on so let's print out this message so
130

130

00:05:22.630  -->  00:05:25.180
we'll do a stem out I'm going to put
131

131

00:05:25.180  -->  00:05:29.860
enter number hash close double quote
132

132

00:05:29.860  -->  00:05:34.180
plus order plus then we'll add a colon
133

133

00:05:34.180  -->  00:05:36.130
there and it close off the double quote
134

134

00:05:36.130  -->  00:05:38.050
like so so that's going to print out
135

135

00:05:38.050  -->  00:05:39.220
that message to the user
136

136

00:05:39.220  -->  00:05:42.789
now since order is equal to count plus 1
137

137

00:05:42.789  -->  00:05:45.070
the number will increment each time it
138

138

00:05:45.070  -->  00:05:47.560
cycles through the loop so this means
139

139

00:05:47.560  -->  00:05:49.780
that after the user enters the first
140

140

00:05:49.780  -->  00:05:51.980
number they'll receive a prompt for the
141

141

00:05:51.980  -->  00:05:54.710
second number and then the third etc now
142

142

00:05:54.710  -->  00:05:56.750
technically we could write this all on
143

143

00:05:56.750  -->  00:05:58.310
one line but it might look a bit
144

144

00:05:58.310  -->  00:06:00.230
complicated and become difficult to read
145

145

00:06:00.230  -->  00:06:02.390
so we've broken it down into two lines
146

146

00:06:02.390  -->  00:06:04.760
here so the next step then is to add an
147

147

00:06:04.760  -->  00:06:07.820
if statement and use the has next line
148

148

00:06:07.820  -->  00:06:11.710
method so that's the file a boolean here
149

149

00:06:11.710  -->  00:06:14.840
it's a boolean and we're a course one is
150

150

00:06:14.840  -->  00:06:20.830
an int equals scanner dot has next int
151

151

00:06:20.830  -->  00:06:24.140
now if you recall this has next int
152

152

00:06:24.140  -->  00:06:26.750
method will check if a valid number has
153

153

00:06:26.750  -->  00:06:29.240
been entered into the console now if the
154

154

00:06:29.240  -->  00:06:31.820
user enters a wrong value then this this
155

155

00:06:31.820  -->  00:06:34.430
has next int method will return false
156

156

00:06:34.430  -->  00:06:37.100
meaning out is an int variable will be
157

157

00:06:37.100  -->  00:06:39.260
set to false if that's the case we don't
158

158

00:06:39.260  -->  00:06:41.990
want to increment the counter so we need
159

159

00:06:41.990  -->  00:06:44.600
another if here to test for that value
160

160

00:06:44.600  -->  00:06:51.410
so we're going to believe isn't it now
161

161

00:06:51.410  -->  00:06:53.300
if pausing does file in other words it's
162

162

00:06:53.300  -->  00:06:55.400
not a number because the users entered
163

163

00:06:55.400  -->  00:06:56.600
something other than a number and then
164

164

00:06:56.600  -->  00:06:58.040
we should print a message stating that
165

165

00:06:58.040  -->  00:07:00.050
an invalid number was entered so to do
166

166

00:07:00.050  -->  00:07:01.940
this we need to add the else and the
167

167

00:07:01.940  -->  00:07:03.470
code block to do that so I'm going to
168

168

00:07:03.470  -->  00:07:06.620
put that down here else over in our code
169

169

00:07:06.620  -->  00:07:08.150
block and we're going to print out a
170

170

00:07:08.150  -->  00:07:12.170
message there invalid number that
171

171

00:07:12.170  -->  00:07:14.810
handles an invalid nothing else let's
172

172

00:07:14.810  -->  00:07:17.000
also take this opportunity outside of
173

173

00:07:17.000  -->  00:07:19.370
that code block down here after the else
174

174

00:07:19.370  -->  00:07:22.160
statement finished to handle the Enter
175

175

00:07:22.160  -->  00:07:23.720
key being pressed and remove any invalid
176

176

00:07:23.720  -->  00:07:25.820
input from the scanner and it's also
177

177

00:07:25.820  -->  00:07:27.590
ensures that we don't accidentally end
178

178

00:07:27.590  -->  00:07:30.170
up in an endless loop due to unforseen
179

179

00:07:30.170  -->  00:07:33.340
input so we're going to types together
180

180

00:07:33.340  -->  00:07:37.940
dot next line or put a note here to
181

181

00:07:37.940  -->  00:07:39.350
remind us what it's for so it's going to
182

182

00:07:39.350  -->  00:07:45.010
be handled end on line enter key now
183

183

00:07:45.010  -->  00:07:47.480
inside of our if statement we can start
184

184

00:07:47.480  -->  00:07:49.250
generating the code that will read the
185

185

00:07:49.250  -->  00:07:51.860
number and save it as a variable this is
186

186

00:07:51.860  -->  00:07:54.530
the code here that's currently empty so
187

187

00:07:54.530  -->  00:07:57.730
we go to begin by typing int number
188

188

00:07:57.730  -->  00:08:05.420
equals scanner dot next int
189

189

00:08:05.420  -->  00:08:07.350
now you might be wondering at this point
190

190

00:08:07.350  -->  00:08:09.690
why I haven't put the next line method
191

191

00:08:09.690  -->  00:08:12.210
that we've got down on line 27 why
192

192

00:08:12.210  -->  00:08:14.940
haven't I put that on line 22 in other
193

193

00:08:14.940  -->  00:08:16.140
words right below the line I've just
194

194

00:08:16.140  -->  00:08:19.080
typed in well if the user was to enter
195

195

00:08:19.080  -->  00:08:21.360
an invalid number the else statement
196

196

00:08:21.360  -->  00:08:22.950
would run in print invalid number
197

197

00:08:22.950  -->  00:08:25.860
however since the user did enter content
198

198

00:08:25.860  -->  00:08:27.900
it would need to be read and removed
199

199

00:08:27.900  -->  00:08:30.270
from the scanner before additional
200

200

00:08:30.270  -->  00:08:32.610
content is entered so since the next
201

201

00:08:32.610  -->  00:08:34.890
line call handles that by reading input
202

202

00:08:34.890  -->  00:08:37.740
and not storing it it needs to be after
203

203

00:08:37.740  -->  00:08:39.690
the else statement not in the if
204

204

00:08:39.690  -->  00:08:42.030
statement otherwise the invalid content
205

205

00:08:42.030  -->  00:08:43.500
would not be removed and our application
206

206

00:08:43.500  -->  00:08:45.360
wouldn't run as desired
207

207

00:08:45.360  -->  00:08:47.160
now another solution would be to add
208

208

00:08:47.160  -->  00:08:48.810
next line right after the next int
209

209

00:08:48.810  -->  00:08:51.120
method here and then add another next
210

210

00:08:51.120  -->  00:08:53.130
line inside of the else statement
211

211

00:08:53.130  -->  00:08:55.440
however generally speaking it's not
212

212

00:08:55.440  -->  00:08:58.050
recommended to duplicate code which
213

213

00:08:58.050  -->  00:08:59.190
would be doing there would be putting
214

214

00:08:59.190  -->  00:09:01.260
two lines of code in when one would
215

215

00:09:01.260  -->  00:09:03.660
suffice so let's leave this next line
216

216

00:09:03.660  -->  00:09:05.640
after the else statement where it is now
217

217

00:09:05.640  -->  00:09:08.130
which again handles invalid input and
218

218

00:09:08.130  -->  00:09:10.260
the enter key by reading the line are
219

219

00:09:10.260  -->  00:09:12.660
not storing the input all right so now
220

220

00:09:12.660  -->  00:09:14.250
that we're retrieving numbers from the
221

221

00:09:14.250  -->  00:09:16.350
user let's work on the remaining steps
222

222

00:09:16.350  -->  00:09:18.260
calculating the sum of the numbers
223

223

00:09:18.260  -->  00:09:20.850
incrementing the count and then breaking
224

224

00:09:20.850  -->  00:09:23.460
over the loop once we've got ten valid
225

225

00:09:23.460  -->  00:09:26.820
numbers first so let's increment our
226

226

00:09:26.820  -->  00:09:29.250
variable counter it's a counter plus
227

227

00:09:29.250  -->  00:09:33.240
plus you've got a valid numbers how are
228

228

00:09:33.240  -->  00:09:34.950
incrementing that count and then we want
229

229

00:09:34.950  -->  00:09:37.860
to add the current number to our sum
230

230

00:09:37.860  -->  00:09:39.660
variable which is of course the sum of
231

231

00:09:39.660  -->  00:09:40.650
all the numbers entered so that's gonna
232

232

00:09:40.650  -->  00:09:46.020
be some plus equals number so a
233

233

00:09:46.020  -->  00:09:48.110
recommended counter and adding some
234

234

00:09:48.110  -->  00:09:50.700
inside of the if statement since we've
235

235

00:09:50.700  -->  00:09:52.230
only got a valid number when the if
236

236

00:09:52.230  -->  00:09:55.530
condition is true on line 20 in other
237

237

00:09:55.530  -->  00:09:57.420
words if parsing succeeds and we have
238

238

00:09:57.420  -->  00:09:59.760
got a valid number then obviously the
239

239

00:09:59.760  -->  00:10:01.800
number is valid for that reason and we
240

240

00:10:01.800  -->  00:10:03.600
can add the number to our sum and
241

241

00:10:03.600  -->  00:10:06.090
increment the counter all right so next
242

242

00:10:06.090  -->  00:10:07.680
we now need to break out of the loop
243

243

00:10:07.680  -->  00:10:10.530
once we reach ten numbers and this is
244

244

00:10:10.530  -->  00:10:12.510
where the counter variable comes into
245

245

00:10:12.510  -->  00:10:14.640
play so let's add the following if
246

246

00:10:14.640  -->  00:10:16.920
statement that breaks out of the loop one
247

247

00:10:16.920  -->  00:10:18.869
counter equals 10 so we're going to
248

248

00:10:18.869  -->  00:10:22.439
check their on that next line we're
249

249

00:10:22.439  -->  00:10:29.899
going to put if counter is equal to 10
250

250

00:10:29.899  -->  00:10:32.189
now the code block I'm going to type
251

251

00:10:32.189  -->  00:10:35.009
break and then that's when I typed in
252

252

00:10:35.009  -->  00:10:36.600
that break there that the error
253

253

00:10:36.600  -->  00:10:39.149
immediately disappeared on line 34 and
254

254

00:10:39.149  -->  00:10:40.470
that's because IntelliJ is now
255

255

00:10:40.470  -->  00:10:42.119
determined that there is a way to break
256

256

00:10:42.119  -->  00:10:44.189
out of this loop and therefore this line
257

257

00:10:44.189  -->  00:10:47.009
of code can be reached this is pretty
258

258

00:10:47.009  -->  00:10:48.749
cool that IntelliJ smart enough to
259

259

00:10:48.749  -->  00:10:51.239
figure that out for us so again to
260

260

00:10:51.239  -->  00:10:53.730
refresh our current loop was endless was
261

261

00:10:53.730  -->  00:10:55.439
an endless loop which would never
262

262

00:10:55.439  -->  00:10:57.809
complete because while true that we've
263

263

00:10:57.809  -->  00:11:00.449
entered on line 14 remained true and
264

264

00:11:00.449  -->  00:11:02.519
therefore kept looping by having this
265

265

00:11:02.519  -->  00:11:04.109
break statement as we've done now on
266

266

00:11:04.109  -->  00:11:06.600
line 25 we can break out of the loop
267

267

00:11:06.600  -->  00:11:09.209
once our counter reaches 10 the last
268

268

00:11:09.209  -->  00:11:10.679
step now we need to add to our program
269

269

00:11:10.679  -->  00:11:12.509
is to print out the sum to the console
270

270

00:11:12.509  -->  00:11:15.449
now we've got two options here we could
271

271

00:11:15.449  -->  00:11:17.669
type it inside of the if statement where
272

272

00:11:17.669  -->  00:11:19.379
we're checking the counter or after the
273

273

00:11:19.379  -->  00:11:21.329
while loop now I'm going to type it
274

274

00:11:21.329  -->  00:11:23.369
after the while loop so I think it's
275

275

00:11:23.369  -->  00:11:25.199
more appropriate to put it there so it's
276

276

00:11:25.199  -->  00:11:27.329
write down literally on the line before
277

277

00:11:27.329  -->  00:11:31.199
the scan about close I'm going to print
278

278

00:11:31.199  -->  00:11:34.290
out some equals in double quotes plus
279

279

00:11:34.290  -->  00:11:38.129
sum alright so that's it one of the
280

280

00:11:38.129  -->  00:11:40.319
possible solutions to this challenge so
281

281

00:11:40.319  -->  00:11:42.149
keep in mind in programming there's
282

282

00:11:42.149  -->  00:11:44.339
almost always multiple ways of doing
283

283

00:11:44.339  -->  00:11:46.559
things one example of that was I just
284

284

00:11:46.559  -->  00:11:48.869
mentioned that I could print out the sum
285

285

00:11:48.869  -->  00:11:50.699
we've given the while loop instead of
286

286

00:11:50.699  -->  00:11:52.199
outside of it alright so let's try
287

287

00:11:52.199  -->  00:11:58.139
running it oh we're down here we've got
288

288

00:11:58.139  -->  00:11:59.759
entered number hash one as you can see
289

289

00:11:59.759  -->  00:12:01.499
in the screen there so I'm getting going
290

290

00:12:01.499  -->  00:12:03.509
to pressed or ain't a rather number 10
291

291

00:12:03.509  -->  00:12:07.079
press ENTER it's asking is for number 2
292

292

00:12:07.079  -->  00:12:09.449
so let's try to enter some characters to
293

293

00:12:09.449  -->  00:12:12.360
test the number checking capabilities so
294

294

00:12:12.360  -->  00:12:14.899
I'm just going to type ABC and press Enter
295

295

00:12:14.899  -->  00:12:17.039
you see it's got invalid number then
296

296

00:12:17.039  -->  00:12:18.449
it's reap romp ting us again to enter
297

297

00:12:18.449  -->  00:12:21.179
number 2 so that's good it means that
298

298

00:12:21.179  -->  00:12:23.639
the counter variable only incremented
299

299

00:12:23.639  -->  00:12:25.259
when the number was valid now if we
300

300

00:12:25.259  -->  00:12:26.970
enter another invalid number the same
301

301

00:12:26.970  -->  00:12:30.810
thing will be printed read same thing again so
302

302

00:12:30.810  -->  00:12:32.460
we got into number two and invalid
303

303

00:12:32.460  -->  00:12:34.620
numbers showing again that was received
304

304

00:12:34.620  -->  00:12:36.300
achieved rather with the help of the
305

305

00:12:36.300  -->  00:12:38.520
order variable if you recall we set
306

306

00:12:38.520  -->  00:12:42.390
order equal to counter plus one and see
307

307

00:12:42.390  -->  00:12:44.670
that there one line 15 and again
308

308

00:12:44.670  -->  00:12:46.110
remembering that counter started with
309

309

00:12:46.110  -->  00:12:47.310
zero which is while we're adding the
310

310

00:12:47.310  -->  00:12:49.110
plus one code there on line 15
311

311

00:12:49.110  -->  00:12:51.120
so changing the number count adds a nice
312

312

00:12:51.120  -->  00:12:52.890
dynamic quality to the messages the
313

313

00:12:52.890  -->  00:12:54.870
users receiving on the console all right
314

314

00:12:54.870  -->  00:12:55.890
so let's go ahead now and finish the
315

315

00:12:55.890  -->  00:12:57.900
program by entering the other numbers so
316

316

00:12:57.900  -->  00:13:07.770
into 20 30 40 50 60 70 80 90 100 and you
317

317

00:13:07.770  -->  00:13:09.690
can see that the program's nicely exited
318

318

00:13:09.690  -->  00:13:13.110
after I entered 100 and some equals 550
319

319

00:13:13.110  -->  00:13:15.090
which is the correct sum for those 10
320

320

00:13:15.090  -->  00:13:17.610
numbers so that's my solution to the
321

321

00:13:17.610  -->  00:13:18.810
challenge hopefully you've got something
322

322

00:13:18.810  -->  00:13:20.970
similar or along those lines bearing in
323

323

00:13:20.970  -->  00:13:22.230
mind it certainly didn't need to be
324

324

00:13:22.230  -->  00:13:24.480
identical now just before I finish the
325

325

00:13:24.480  -->  00:13:26.490
video I mentioned that there's a
326

326

00:13:26.490  -->  00:13:28.380
solution that doesn't involve using a
327

327

00:13:28.380  -->  00:13:30.900
break statement so instead of while true
328

328

00:13:30.900  -->  00:13:33.090
what we can do is change the condition
329

329

00:13:33.090  -->  00:13:34.200
to something that would eventually
330

330

00:13:34.200  -->  00:13:36.960
become false such as counter less than
331

331

00:13:36.960  -->  00:13:39.330
10 for argument's sake so what we could
332

332

00:13:39.330  -->  00:13:41.280
have done instead this is another
333

333

00:13:41.280  -->  00:13:42.930
example we have there's always nearly
334

334

00:13:42.930  -->  00:13:44.400
always multiple solutions to a given
335

335

00:13:44.400  -->  00:13:46.200
problem we can comment this line out
336

336

00:13:46.200  -->  00:13:47.880
actually what I do is I will duplicate
337

337

00:13:47.880  -->  00:13:52.140
it and I'll comment that line out and
338

338

00:13:52.140  -->  00:13:54.150
instead of well true what we'll do is
339

339

00:13:54.150  -->  00:14:00.930
we'll put while counter less than 10 and
340

340

00:14:00.930  -->  00:14:03.510
now that I've done that I could comment
341

341

00:14:03.510  -->  00:14:05.220
out the break statements since we no
342

342

00:14:05.220  -->  00:14:07.020
longer need that we don't need to put a
343

343

00:14:07.020  -->  00:14:08.250
test here for 10 because we're going to
344

344

00:14:08.250  -->  00:14:12.780
test there now on line 15 so let's test
345

345

00:14:12.780  -->  00:14:14.160
that to make sure that it still works
346

346

00:14:14.160  -->  00:14:15.390
but that's the only changes we need to
347

347

00:14:15.390  -->  00:14:21.110
make we'll do the same thing 20 ABC ABC
348

348

00:14:21.110  -->  00:14:27.150
Fred that's still working 20 30 40 50 60
349

349

00:14:27.150  -->  00:14:32.460
70 80 90 100 so as you can see there are
350

350

00:14:32.460  -->  00:14:34.830
different ways to solve a challenge this
351

351

00:14:34.830  -->  00:14:36.630
challenge and literally any code you
352

352

00:14:36.630  -->  00:14:39.120
write and it's going to be true of many
353

353

00:14:39.120  -->  00:14:40.890
perhaps most things that you face in the
354

354

00:14:40.890  -->  00:14:42.960
real world so the point I'm making here
355

355

00:14:42.960  -->  00:14:44.520
is yuko doesn't have to match
356

356

00:14:44.520  -->  00:14:46.620
what might look like 100% it's
357

357

00:14:46.620  -->  00:14:49.140
completely ok as long as the end result
358

358

00:14:49.140  -->  00:14:52.170
is you've managed to meet or exceed the
359

359

00:14:52.170  -->  00:14:54.540
challenge requirements so that's it I
360

360

00:14:54.540  -->  00:14:55.890
hope you've enjoyed this challenge and
361

361

00:14:55.890  -->  00:14:57.930
got a lot out of it let's now move on to
362

362

00:14:57.930  -->  00:14:59.940
the next video and in that one I'm going
363

363

00:14:59.940  -->  00:15:01.680
to set you another challenge this time
364

364

00:15:01.680  -->  00:15:04.500
it's a minimum and maximum challenge so
365

365

00:15:04.500  -->  00:15:07.610
I'll see you in the next video.
