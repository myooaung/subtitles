WEBVTT
1
1

00:00:05.620  -->  00:00:06.810
- [Tim] All right, we're ready to start
2

2

00:00:06.810  -->  00:00:09.790
learning how to walk a file tree.
3

3

00:00:09.790  -->  00:00:12.480
Now, again, when I talk
about walking a file tree,
4

4

00:00:12.480  -->  00:00:13.980
what I mean is that we're going to visit
5

5

00:00:13.980  -->  00:00:16.190
every file and directory
that can be reached
6

6

00:00:16.190  -->  00:00:19.500
from a starting or root
directory for that tree.
7

7

00:00:19.500  -->  00:00:22.230
For example, if we started in that Dir2
8

8

00:00:22.230  -->  00:00:24.790
in the Dir2 folder in our project,
9

9

00:00:24.790  -->  00:00:27.150
we'll visit the following
files and directories,
10

10

00:00:27.150  -->  00:00:29.040
but again, not necessarily in this order.
11

11

00:00:29.040  -->  00:00:31.140
So within the Dir2 folder,
12

12

00:00:31.140  -->  00:00:33.670
then within the Dir2 folder,
13

13

00:00:33.670  -->  00:00:36.420
we've got file1, file2 and file3.
14

14

00:00:38.030  -->  00:00:40.720
Two dot txt files and one dat file.
15

15

00:00:40.720  -->  00:00:43.510
But then, also, we have the Dir3 folder.
16

16

00:00:43.510  -->  00:00:45.080
We go into that subfolder as well
17

17

00:00:45.080  -->  00:00:46.990
and we also have the two files in there,
18

18

00:00:46.990  -->  00:00:50.870
file1.txt and file2.txt.
19

19

00:00:50.870  -->  00:00:52.760
So, in this scenario, because
we're going to be studying
20

20

00:00:52.760  -->  00:00:54.240
on the Dir2 folder,
21

21

00:00:54.240  -->  00:00:56.940
well, that's considered to
be the root of its file tree.
22

22

00:00:56.940  -->  00:00:58.580
So, we'll never going to move up a level
23

23

00:00:58.580  -->  00:00:59.460
from the root directory.
24

24

00:00:59.460  -->  00:01:01.770
We're only going to be moving down levels.
25

25

00:01:01.770  -->  00:01:02.970
But you might be wondering
26

26

00:01:02.970  -->  00:01:05.250
why would you actually want to do this.
27

27

00:01:05.250  -->  00:01:06.480
Well, one use case might be
28

28

00:01:06.480  -->  00:01:08.850
when the application has to find a file.
29

29

00:01:08.850  -->  00:01:10.910
But another use case could be that
30

30

00:01:10.910  -->  00:01:13.230
the application is searching all the files
31

31

00:01:13.230  -->  00:01:16.950
in the directory and below
for a specific stream.
32

32

00:01:16.950  -->  00:01:18.690
Now, I mentioned in the
previous video that,
33

33

00:01:18.690  -->  00:01:20.490
when you want to copy a directory,
34

34

00:01:20.490  -->  00:01:22.420
you have to walk the file tree
35

35

00:01:22.420  -->  00:01:25.860
if you want to copy
everything below it as well.
36

36

00:01:25.860  -->  00:01:27.490
Otherwise, any of the files directly
37

37

00:01:27.490  -->  00:01:30.030
within the directory
itself will be copied.
38

38

00:01:30.030  -->  00:01:32.970
And, as you actually saw
earlier, in an earlier video,
39

39

00:01:32.970  -->  00:01:35.340
when we're using the directory
stream ticket contents
40

40

00:01:35.340  -->  00:01:37.820
of a directory, only
the direct descendants
41

41

00:01:37.820  -->  00:01:39.610
are returned by default.
42

42

00:01:39.610  -->  00:01:41.250
Now, there are other use cases,
43

43

00:01:41.250  -->  00:01:45.950
but those are a few common ones
that you might come across.
44

44

00:01:45.950  -->  00:01:47.420
Right, so I just want to talk briefly
45

45

00:01:47.420  -->  00:01:49.050
about the FileVisitor interface,
46

46

00:01:49.050  -->  00:01:50.980
as you can see on the screen there now.
47

47

00:01:50.980  -->  00:01:54.370
This is what you need to use
to walk the directory tree.
48

48

00:01:54.370  -->  00:01:56.830
So, using the methods in FileVisitor,
49

49

00:01:56.830  -->  00:02:00.830
you can run code at each stage
of its traversal process.
50

50

00:02:00.830  -->  00:02:03.660
And here are the methods that
you'll want to implement.
51

51

00:02:03.660  -->  00:02:06.360
Firstly, we've got the
preVisitDirectory method,
52

52

00:02:06.360  -->  00:02:09.630
and this method accepts a
reference to the directory,
53

53

00:02:09.630  -->  00:02:12.810
and the BasicFileAttributes
instance for the directory.
54

54

00:02:12.810  -->  00:02:14.680
And it's actually called before entries
55

55

00:02:14.680  -->  00:02:16.700
in the directory are visited.
56

56

00:02:16.700  -->  00:02:18.780
We've also got a
postVisitDirectory method,
57

57

00:02:18.780  -->  00:02:21.510
and that accepts a
reference to the directory
58

58

00:02:21.510  -->  00:02:24.530
and also an exception
object when necessary.
59

59

00:02:24.530  -->  00:02:27.730
It's actually called after
entries in the directory,
60

60

00:02:27.730  -->  00:02:29.870
and all its descendants,
have been visited.
61

61

00:02:29.870  -->  00:02:31.850
Now, the exception parameter will be set
62

62

00:02:31.850  -->  00:02:35.160
when an exception happens
during the traversal
63

63

00:02:35.160  -->  00:02:37.570
of the entries and descendants.
64

64

00:02:37.570  -->  00:02:40.060
Now, there's a way to skip
files as you're traversing.
65

65

00:02:40.060  -->  00:02:42.430
So, not every file has
to have been visited
66

66

00:02:42.430  -->  00:02:44.030
for this method to be called.
67

67

00:02:44.030  -->  00:02:47.340
Every file as to be visited
or explicitly skipped.
68

68

00:02:47.340  -->  00:02:49.960
Of course, if an exception
is thrown and not handled,
69

69

00:02:49.960  -->  00:02:51.840
the traversal will prematurely end
70

70

00:02:51.840  -->  00:02:55.370
and postVisitDirectory will be called.
71

71

00:02:55.370  -->  00:02:57.790
Next method, visitFile,
probably the method
72

72

00:02:57.790  -->  00:02:59.430
that you'll care about most.
73

73

00:02:59.430  -->  00:03:01.790
So, this method accepts
a reference to the file
74

74

00:03:01.790  -->  00:03:04.570
and a BasicFileAttributes instance.
75

75

00:03:04.570  -->  00:03:06.270
So, this is where you run the code that
76

76

00:03:06.270  -->  00:03:07.600
will operate on the file.
77

77

00:03:07.600  -->  00:03:09.940
And it's actually only called for files.
78

78

00:03:09.940  -->  00:03:12.200
And lastly, visitFileFailed.
79

79

00:03:12.200  -->  00:03:14.820
This method is called when
a file can't be accessed
80

80

00:03:14.820  -->  00:03:16.020
for some reason.
81

81

00:03:16.020  -->  00:03:19.420
The exception that's thrown
is passed to this method.
82

82

00:03:19.420  -->  00:03:21.200
You can then decide what to do with it.
83

83

00:03:21.200  -->  00:03:22.890
You can throw the method, print it,
84

84

00:03:22.890  -->  00:03:25.100
or anything else that makes
sense for the application
85

85

00:03:25.100  -->  00:03:27.010
and operation being performed.
86

86

00:03:27.010  -->  00:03:30.460
And this can be called for
both files and directories.
87

87

00:03:30.460  -->  00:03:32.800
So as with most interfaces like this,
88

88

00:03:32.800  -->  00:03:35.710
the JDK's got an
implementation that you can use
89

89

00:03:35.710  -->  00:03:37.330
called SimpleFileVisitor.
90

90

00:03:37.330  -->  00:03:39.080
You can extend this class and override
91

91

00:03:39.080  -->  00:03:40.950
just the methods that you require.
92

92

00:03:40.950  -->  00:03:43.470
So let's actually go
ahead and create a class
93

93

00:03:43.470  -->  00:03:45.560
that extends the SimpleFileVisitor
94

94

00:03:45.560  -->  00:03:47.080
and traverses the file tree
95

95

00:03:47.080  -->  00:03:49.290
with Dir2 as its root.
96

96

00:03:49.290  -->  00:03:50.530
And what we'll do is we'll print
97

97

00:03:50.530  -->  00:03:52.520
the name of every file
and directory it visits.
98

98

00:03:52.520  -->  00:03:55.190
So, back to IntelliJ.
99

99

00:03:55.190  -->  00:03:56.320
Let's go ahead and do that.
100

100

00:03:56.320  -->  00:03:58.260
So we'll create a new file.
101

101

00:03:58.260  -->  00:04:00.800
A new Java class.
102

102

00:04:00.800  -->  00:04:03.800
And we'll call it PrintNames.
103

103

00:04:06.640  -->  00:04:09.880
Okay, we're going to extends
104

104

00:04:09.880  -->  00:04:12.960
SimpleFileVisitor Path
105

105

00:04:14.730  -->  00:04:17.550
accept that import.
106

106

00:04:17.550  -->  00:04:22.100
And we're just going to
override the visitFile method.
107

107

00:04:22.100  -->  00:04:25.350
Just the visitFile method.
108

108

00:04:25.350  -->  00:04:26.460
We're going to change this.
109

109

00:04:26.460  -->  00:04:27.710
Instead of returning this super,
110

110

00:04:27.710  -->  00:04:31.370
let's actually stop by printing out
111

111

00:04:31.370  -->  00:04:33.430
file dot toAbsolutePath.
112

112

00:04:33.430  -->  00:04:34.880
So I'll print out the file name.
113

113

00:04:34.880  -->  00:04:38.290
Well, that should return Continue,
114

114

00:04:41.750  -->  00:04:45.390
which is FileVisitResult dot Continue.
115

115

00:04:45.390  -->  00:04:46.370
So, as you can see here,
116

116

00:04:46.370  -->  00:04:48.260
that I've implemented
the class PrintNames,
117

117

00:04:48.260  -->  00:04:50.340
extended SimpleFileVisitor,
118

118

00:04:50.340  -->  00:04:52.930
and I've overriden the visitFile method.
119

119

00:04:52.930  -->  00:04:54.810
Often, it's a good idea to override
120

120

00:04:54.810  -->  00:04:57.080
the PostVisit directory
121

121

00:04:57.080  -->  00:04:59.220
as well as the previous
directory methods as well
122

122

00:04:59.220  -->  00:05:01.660
so that you can print the
name of the directories.
123

123

00:05:01.660  -->  00:05:04.360
So let's go ahead and do that as well.
124

124

00:05:04.360  -->  00:05:07.690
And going to override preVisitDirectory,
125

125

00:05:10.350  -->  00:05:12.050
and we'll give you something
very similar with that code.
126

126

00:05:12.050  -->  00:05:15.550
Let's just copy that code
127

127

00:05:16.750  -->  00:05:20.330
and paste it there instead
of the return statement.
128

128

00:05:20.330  -->  00:05:21.840
But instead of file, of course,
129

129

00:05:21.840  -->  00:05:25.050
that the argument is dir
because it's a directory.
130

130

00:05:25.050  -->  00:05:26.670
We changed it as well.
131

131

00:05:26.670  -->  00:05:29.420
Right, so your method is specifying path
132

132

00:05:29.420  -->  00:05:31.760
as the top of SimpleFileVisitor.
133

133

00:05:31.760  -->  00:05:34.030
Now, this will also be
the path of reference
134

134

00:05:34.030  -->  00:05:36.120
passed to the methods.
135

135

00:05:36.120  -->  00:05:37.730
Now, in this case, as you can see from
136

136

00:05:37.730  -->  00:05:40.010
the visitFile declaration,
137

137

00:05:40.010  -->  00:05:42.540
a path is passed as the first parameter.
138

138

00:05:42.540  -->  00:05:44.440
When we were describing the method,
139

139

00:05:44.440  -->  00:05:46.740
I said that it accepts
a reference to a file.
140

140

00:05:46.740  -->  00:05:48.440
Now, we couldn't be
more specific than that
141

141

00:05:48.440  -->  00:05:50.420
because the parameter top has to match
142

142

00:05:50.420  -->  00:05:53.440
the top you specify for the FileVisitor.
143

143

00:05:53.440  -->  00:05:55.690
Now, inside the visitFile method,
144

144

00:05:55.690  -->  00:05:57.010
you can see that I'm putting
145

145

00:05:57.010  -->  00:05:58.740
the absolute path for the file,
146

146

00:05:58.740  -->  00:06:00.750
and then, we're returning
the FileVisitResult
147

147

00:06:00.750  -->  00:06:02.630
dot Continue constant.
148

148

00:06:02.630  -->  00:06:05.680
Now, you can also return
skip underscore siblings,
149

149

00:06:05.680  -->  00:06:07.880
which means the traversal should skip
150

150

00:06:07.880  -->  00:06:12.270
all the other entries in the
same directory as the file.
151

151

00:06:12.270  -->  00:06:14.160
And skip underscore subtree,
152

152

00:06:14.160  -->  00:06:16.500
which you can use when you
want to skip a directory
153

153

00:06:16.500  -->  00:06:18.530
as well as terminate, which means
154

154

00:06:18.530  -->  00:06:20.460
that you want to stop the traversal.
155

155

00:06:20.460  -->  00:06:22.270
For example, you'd return terminate
156

156

00:06:22.270  -->  00:06:24.410
when you found the file
that you're searching for
157

157

00:06:24.410  -->  00:06:26.730
so that the traversal's actually stopped.
158

158

00:06:26.730  -->  00:06:29.610
Now, it would only make sense
to return underscore subtree
159

159

00:06:29.610  -->  00:06:31.900
from the PreVisit directory method.
160

160

00:06:31.900  -->  00:06:34.050
Returning it from the other methods
161

161

00:06:34.050  -->  00:06:35.770
is equivalent to Continue.
162

162

00:06:35.770  -->  00:06:38.490
Also, if you return
skip underscore siblings
163

163

00:06:38.490  -->  00:06:40.380
from the PreVisit directory,
164

164

00:06:40.380  -->  00:06:42.960
then the directory itself is also skipped,
165

165

00:06:42.960  -->  00:06:46.040
and the postVisit directory
method is never called
166

166

00:06:46.040  -->  00:06:47.340
for that directory.
167

167

00:06:47.340  -->  00:06:49.230
So basically, that's another way of saying
168

168

00:06:49.230  -->  00:06:51.300
that you want to completely
ignore the directory
169

169

00:06:51.300  -->  00:06:54.350
and all its descendants and siblings.
170

170

00:06:54.350  -->  00:06:55.450
All right, you can say that I've got
171

171

00:06:55.450  -->  00:06:58.510
the preVisit directory
method added as well
172

172

00:06:58.510  -->  00:07:02.670
to print the absolute path to
the directory or the folder.
173

173

00:07:03.890  -->  00:07:05.580
Once again, you can
say we're using a path.
174

174

00:07:05.580  -->  00:07:06.850
In this case, it's not to a file,
175

175

00:07:06.850  -->  00:07:08.300
that was to a directory,
176

176

00:07:08.300  -->  00:07:09.450
and all we're doing is printing out
177

177

00:07:09.450  -->  00:07:12.490
the absolute path folder directory.
178

178

00:07:12.490  -->  00:07:16.020
All right, lastly, let's add
the visitFile file method
179

179

00:07:16.020  -->  00:07:19.520
or override it.
180

180

00:07:21.560  -->  00:07:24.740
Now, if we don't implement
this, and an error occurs,
181

181

00:07:24.740  -->  00:07:27.030
then an IOException
will actually be thrown.
182

182

00:07:27.030  -->  00:07:29.030
But, instead, you can notify the user
183

183

00:07:29.030  -->  00:07:30.170
or handle the error
184

184

00:07:30.170  -->  00:07:31.840
and then return Continue
185

185

00:07:31.840  -->  00:07:34.040
if you want a traversal
to actually continue on
186

186

00:07:34.040  -->  00:07:35.820
in the case of an error.
187

187

00:07:35.820  -->  00:07:40.290
So, to do that, we're going
to print out a message here,
188

188

00:07:40.290  -->  00:07:43.920
Error accessing file
189

189

00:07:43.920  -->  00:07:46.590
plus file dot toAbsolutePath
190

190

00:07:46.590  -->  00:07:49.340
plus space plus e dot getMessage,
191

191

00:07:52.090  -->  00:07:54.840
then we can return Continue.
192

192

00:07:56.070  -->  00:07:57.200
All right, so at this point now,
193

193

00:07:57.200  -->  00:07:59.060
with our three overridden methods.
194

194

00:07:59.060  -->  00:08:01.500
We've got a working FileVisitor.
195

195

00:08:01.500  -->  00:08:04.000
So now, what we need to
do is start the traversal,
196

196

00:08:04.000  -->  00:08:05.250
and we're going to do so by using the
197

197

00:08:05.250  -->  00:08:07.580
files dot walkFileTree method.
198

198

00:08:07.580  -->  00:08:10.910
So let's go back to our main class
199

199

00:08:10.910  -->  00:08:12.880
and add some code to do that.
200

200

00:08:12.880  -->  00:08:14.580
So I'll print out a message first
201

201

00:08:14.580  -->  00:08:17.000
to indicate what we're doing.
202

202

00:08:17.890  -->  00:08:20.810
Walking Tree for Dir2.
203

203

00:08:22.830  -->  00:08:24.020
We'll start with a path,
204

204

00:08:24.020  -->  00:08:27.830
Path dir2Path is equal to
205

205

00:08:27.830  -->  00:08:31.530
FileSystems dot getDefault
206

206

00:08:31.530  -->  00:08:33.570
dot getPath,
207

207

00:08:33.570  -->  00:08:35.690
let's go to the fileTree.
208

208

00:08:35.690  -->  00:08:37.620
To control it spelling correctly,
209

209

00:08:37.620  -->  00:08:39.590
let's actually use the separator.
210

210

00:08:39.590  -->  00:08:40.690
And I said I wasn't going to,
211

211

00:08:40.690  -->  00:08:42.060
but let's just use that to make it easier,
212

212

00:08:42.060  -->  00:08:43.810
and it works on both operating systems
213

213

00:08:43.810  -->  00:08:46.980
plus Dir2.
214

214

00:08:48.960  -->  00:08:49.890
Then we have to try here,
215

215

00:08:49.890  -->  00:08:51.940
so it's going to be a try.
216

216

00:08:51.940  -->  00:08:55.270
We're going to do Files dot walkFileTree
217

217

00:08:56.830  -->  00:09:00.340
Dir2Path, being the path,
218

218

00:09:00.340  -->  00:09:02.300
then we're going to draw new,
219

219

00:09:02.300  -->  00:09:05.190
PrintNames being that
class that we just created.
220

220

00:09:05.190  -->  00:09:08.600
Then we need to catch an exception there.
221

221

00:09:10.070  -->  00:09:12.740
It's going to be an IOException,
222

222

00:09:13.580  -->  00:09:16.330
and we'll just do a
printout if we get an error,
223

223

00:09:16.330  -->  00:09:18.970
e dot getMessage.
224

224

00:09:18.970  -->  00:09:22.220
All right, so we created
a path to a Dir2 folder
225

225

00:09:22.220  -->  00:09:24.010
that we want to walk.
226

226

00:09:24.010  -->  00:09:26.910
But then calling, as you
can see here on line 59,
227

227

00:09:26.910  -->  00:09:28.810
the walkFileTree method,
228

228

00:09:28.810  -->  00:09:31.250
and you can see that it's
accepting, in this case,
229

229

00:09:31.250  -->  00:09:35.710
passing two arguments to dir2Path
being the name of the path
230

230

00:09:35.710  -->  00:09:37.830
and PrintNames being the class we're using
231

231

00:09:37.830  -->  00:09:42.170
that actually extends
the SimpleFileVisitor.
232

232

00:09:42.170  -->  00:09:46.000
And we'll just run that
to make sure it works.
233

233

00:09:48.100  -->  00:09:50.550
And you can see the Walking Tree for Dir2,
234

234

00:09:50.550  -->  00:09:51.740
we got all the files.
235

235

00:09:51.740  -->  00:09:53.690
We got Dir2, Dir3,
236

236

00:09:53.690  -->  00:09:56.780
we got our two files for
Dir3 in the Dir3 folder,
237

237

00:09:56.780  -->  00:09:59.060
and also the Dir2, is we've got
238

238

00:09:59.060  -->  00:10:02.060
file1.txt, file2.txt, and file3.dat.
239

239

00:10:03.050  -->  00:10:05.320
So clearly, that's worked okay.
240

240

00:10:05.320  -->  00:10:06.360
Now, there's actually a second version
241

241

00:10:06.360  -->  00:10:09.430
of the walkFileTree that
accepts four parameters.
242

242

00:10:09.430  -->  00:10:11.050
Now, the additional two parameters
243

243

00:10:11.050  -->  00:10:14.460
are laid to specify the
number of levels to a traverse
244

244

00:10:14.460  -->  00:10:16.920
and to pass a set of fileVisit options.
245

245

00:10:16.920  -->  00:10:19.140
Right now, they're the
only option available
246

246

00:10:19.140  -->  00:10:22.460
is whether to follow symbolic links.
247

247

00:10:22.460  -->  00:10:23.560
Now, when you're printing out the names,
248

248

00:10:23.560  -->  00:10:25.160
it doesn't matter whether we use
249

249

00:10:25.160  -->  00:10:28.050
the preVisit directory method
to print directory names
250

250

00:10:28.050  -->  00:10:30.080
or the postVisit directory method.
251

251

00:10:30.080  -->  00:10:32.550
Now, depending on what you want to do,
252

252

00:10:32.550  -->  00:10:33.710
it can matter, though.
253

253

00:10:33.710  -->  00:10:35.850
For example, if you wanted
to copy a file tree,
254

254

00:10:35.850  -->  00:10:37.660
then you'd want to handle the directory
255

255

00:10:37.660  -->  00:10:39.460
before you handle those entries
256

256

00:10:39.460  -->  00:10:42.130
because the copy of the
directory will have to exist
257

257

00:10:42.130  -->  00:10:44.620
before you can copy entries into it.
258

258

00:10:44.620  -->  00:10:46.500
So, in that scenario, you would actually
259

259

00:10:46.500  -->  00:10:50.130
handle the directory using
the preVisit directory method.
260

260

00:10:50.130  -->  00:10:52.820
On the other hand, if you
wanted to traverse a file tree
261

261

00:10:52.820  -->  00:10:54.800
to delete it, then you'd
actually want to handle
262

262

00:10:54.800  -->  00:10:56.920
the directory in the
postVisit directory method
263

263

00:10:56.920  -->  00:10:59.060
because you have to delete all the entries
264

264

00:10:59.060  -->  00:11:01.370
in the directory and all its descendants
265

265

00:11:01.370  -->  00:11:04.040
before you can delete the directory.
266

266

00:11:04.040  -->  00:11:06.870
So whether to handle
directories, pre or post,
267

267

00:11:06.870  -->  00:11:08.410
will actually depend on what makes sense
268

268

00:11:08.410  -->  00:11:10.000
from the top of processing,
269

269

00:11:10.000  -->  00:11:11.790
that you want to do.
270

270

00:11:11.790  -->  00:11:13.410
All right, just one important note.
271

271

00:11:13.410  -->  00:11:16.120
Here, you can't make any
assumptions about the order
272

272

00:11:16.120  -->  00:11:18.410
in which files and
directories are visited.
273

273

00:11:18.410  -->  00:11:20.740
Say, you shouldn't be
making any assumptions
274

274

00:11:20.740  -->  00:11:23.450
which you carry in that scenario.
275

275

00:11:23.450  -->  00:11:24.750
All right, so let's finish the video here,
276

276

00:11:24.750  -->  00:11:26.790
and we'll continue on in the next video
277

277

00:11:26.790  -->  00:11:28.900
and create a copy files method
278

278

00:11:28.900  -->  00:11:31.220
and look at how to stack copying files.
279

279

00:11:31.220  -->  00:11:33.080
See you in the next video.
