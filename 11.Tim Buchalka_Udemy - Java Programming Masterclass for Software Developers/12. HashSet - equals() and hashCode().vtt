WEBVTT
1
1

00:00:05.170  -->  00:00:10.250
so continuing on now with our heavenly
body code and hash sets specifically I just
2

2

00:00:10.250  -->  00:00:13.240
want to point out that the Java
documentation does warn you that if
3

3

00:00:13.240  -->  00:00:17.650
you're using your own objects as either
a key in a map or as an element in the
4

4

00:00:17.650  -->  00:00:23.330
set that you should override the equals
and hash Code methods so what I'm going to do is
5

5

00:00:23.330  -->  00:00:26.090
show you how to do that but before we start
doing that I'm going to show you what
6

6

00:00:26.090  -->  00:00:30.690
happens if we don't actually override
them and the problem you get yourself into so what I'm going to do is
7

7

00:00:30.690  -->  00:00:37.550
go back to our main class and I'm going to talk
about creating a new pluto object
8

8

00:00:37.550  -->  00:00:42.620
and we are going to add it to the project set
as the same way as we have done before so we gonna
9

9

00:00:42.620  -->  00:00:56.620
type..and we are going to make the orbital period 842...
10

10

00:00:56.620  -->  00:01:01.100
now the point I want to make here is the
original one line 73
11

11

00:01:01.100  -->  00:01:04.670
the orbital period was 248 so were adding
another one here
12

12

00:01:04.670  -->  00:01:17.070
with a different orbital period so we going to...and you'd think
13

13

00:01:17.070  -->  00:01:23.990
that all things being equal we got the same name for pluto so
that we established in the previous
14

14

00:01:23.990  -->  00:01:28.770
video that sets are unique and you can only have 1 item the same in a set so if
15

15

00:01:28.770  -->  00:01:33.950
we then put this code in type some code
in to go through the list of planets lets see
16

16

00:01:33.950  -->  00:01:34.490
what happens
17

17

00:01:34.490  -->  00:01:49.720
so I'm going to type...
18

18

00:01:49.720  -->  00:01:59.680
...so let's actually just run this
now
19

19

00:01:59.680  -->  00:02:06.320
so as you can see pluto is shown as twice
now depending on your operating system
20

20

00:02:06.320  -->  00:02:10.130
and version of Java because sets aren't necessarily in order you might have to you may
21

21

00:02:10.130  -->  00:02:14.090
not get them appearing straight after
each other like they are there because you can see the other
22

22

00:02:14.090  -->  00:02:20.090
things aren't ordered in a to z basically the
bottom line here is that there is problem isn't there
23

23

00:02:20.090  -->  00:02:23.780
that pluto is now appearing twice now I didn't
choose that to make it feel better
24

24

00:02:23.780  -->  00:02:25.380
because it's no longer a planet
25

25

00:02:25.380  -->  00:02:31.190
we would get the same result no matter which body we used so again the I made a point out the fact that a set
26

26

00:02:31.190  -->  00:02:36.230
cannot contain duplicates so how come
a face value we got a duplicate well the
27

27

00:02:36.230  -->  00:02:41.870
reason is the two java objects do not compare equal so the set is happy to accept
28

28

00:02:41.870  -->  00:02:46.620
both of them for that reason and if we use them as keys
in a map same thing will happen as well
29

29

00:02:46.620  -->  00:02:51.140
and we will have two entries in a map so
this is why the equals method has to be
30

30

00:02:51.140  -->  00:02:56.120
overwritten our heavenly body class now the
reason that they don't compare equal is
31

31

00:02:56.120  -->  00:03:00.260
because the base object class from which
all other classes are derived just defines
32

32

00:03:00.260  -->  00:03:03.510
a very simple equals method that
performs what is known as referential
33

33

00:03:03.510  -->  00:03:09.150
equality and both references point to
the same object then their equal otherwise
34

34

00:03:09.150  -->  00:03:14.320
they are not that's the default equals that
comes with the base object class and of
35

35

00:03:14.320  -->  00:03:16.760
course all Java classes inherit from
36

36

00:03:16.760  -->  00:03:21.830
so that's to say that it just uses equals to equal to
perform a comparison and this is exactly
37

37

00:03:21.830  -->  00:03:25.910
the same as comparing two strings
using equals equals something
38

38

00:03:25.910  -->  00:03:31.250
that hopefully I've told you not to do that
so the string classes is overridden
39

39

00:03:31.250  -->  00:03:35.260
the equals method so that when we use
is for comparing strings it works as we expected if we looked
40

40

00:03:35.260  -->  00:03:39.610
at the source code for that you would see that
was the case so what we can do is we can go
41

41

00:03:39.610  -->  00:03:44.090
back to our heavenly body and make some
changes but before we do that what I
42

42

00:03:44.090  -->  00:03:48.360
want to do is just show you how this
works by using an object so right at the
43

43

00:03:48.360  -->  00:03:58.380
bottom of here where we typed in our main
method in for our main class we can type...
44

44

00:03:58.380  -->  00:04:03.400
....object is the one that's built
into Java the base object that all other
45

45

00:04:03.400  -->  00:04:09.230
objects inherit from...
46

46

00:04:09.230  -->  00:04:20.780
...and the reason I'm doing that
so we can actually check the code so we
47

47

00:04:20.780  -->  00:04:24.700
can go into the code and see what it's
doing so I can click on equals click that
48

48

00:04:24.700  -->  00:04:29.340
we can see the code and you can see
the base object code their standard
49

49

00:04:29.340  -->  00:04:35.630
equals method is the object this current
object is equal equal to whatever is passed as a parameter
50

50

00:04:35.630  -->  00:04:40.960
so you can see that's very very basic referential equality which isn't
51

51

00:04:40.960  -->  00:04:45.160
generally what we want it's basically saying both references point to the same object
52

52

00:04:45.160  -->  00:04:50.800
then they are equal otherwise they are not  so that is by default in the object class itself but we have a
53

53

00:04:50.800  -->  00:04:54.570
look at the equals for string and because
we put a string there at the start we are going
54

54

00:04:54.570  -->  00:05:00.310
to call string we can click on that and have a look at it and you can see we got a different set of equals so
55

55

00:05:00.310  -->  00:05:05.680
its pretty clear that the string class which
again inherits from the object
56

56

00:05:05.680  -->  00:05:09.880
class has overwritten equals method and
that's the code they are using to actually
57

57

00:05:09.880  -->  00:05:16.260
do a comparison from one string to another
and I think I've said this in a number of times but that is control click so
58

58

00:05:16.260  -->  00:05:21.880
you can hold down CTRL on Windows or
Linux machine on a Mac its command and
59

59

00:05:21.880  -->  00:05:25.030
then click it and you can get into and see the source code so just getting back to
60

60

00:05:25.030  -->  00:05:28.450
the String class again there is actually
some good code to look at it so
61

61

00:05:28.450  -->  00:05:32.630
probably a good starting point is
certainly more complicated but its a
62

62

00:05:32.630  -->  00:05:37.010
good starting point good example for how to write an equals method so the string equals
63

63

00:05:37.010  -->  00:05:41.070
method itself performs a useful
optimization first by checking for
64

64

00:05:41.070  -->  00:05:43.090
string is being compared to itself
65

65

00:05:43.090  -->  00:05:47.510
you can see that on line 165 obviously
it returns true if that's the case and
66

66

00:05:47.510  -->  00:05:51.700
skips any subsequent checking and you
can imagine that an object that's used so
67

67

00:05:51.700  -->  00:05:55.330
much in Java code it really would need
to be optimized as much as possible
68

68

00:05:55.330  -->  00:06:00.010
because virtually every program you write
there's a high likelihood you'll be
69

69

00:06:00.010  -->  00:06:04.720
using string in a few places so the Java
creators that people that created Java
70

70

00:06:04.720  -->  00:06:09.380
language and enhance it and update it
obviously worked on this optimization
71

71

00:06:09.380  -->  00:06:13.630
after that on line 65 after it returns true
if it was the same object
72

72

00:06:13.630  -->  00:06:18.710
what it does is it checks that the object being compared is
a string so its using instance of string which is
73

73

00:06:18.710  -->  00:06:20.720
a way of checking that a particular
object
74

74

00:06:20.720  -->  00:06:25.700
is a string as you can see on line 64
the parameter that was passed to the
75

75

00:06:25.700  -->  00:06:31.360
equals method is of type object so it's
determining now on line 68 whether the
76

76

00:06:31.360  -->  00:06:35.110
object is a string that we comparing it
because in this case there is no point
77

77

00:06:35.110  -->  00:06:41.860
going any further if it is not a
string essentially you can see it will dropout and
78

78

00:06:41.860  -->  00:06:46.830
ultimately return false on line 83 if it
wasn't a string so this code from line
79

79

00:06:46.830  -->  00:06:53.540
63 onwards to line 80 is only going to be executed
if it is a string but in our example when
80

80

00:06:53.540  -->  00:06:57.660
we're dealing with our own class you
need to be careful here thinking about it if
81

81

00:06:57.660  -->  00:07:02.440
our heavenly body class is a sub class
instance of a return true when an object
82

82

00:07:02.440  -->  00:07:06.910
of the subclass type is used here so we
need to look at an alternative checked
83

83

00:07:06.910  -->  00:07:11.550
to perform when we implement equals for our heavenly body
class and you can see the rest of the
84

84

00:07:11.550  -->  00:07:16.140
method pretty straightforward as you can
see it first checks that the links are
85

85

00:07:16.140  -->  00:07:19.590
equal then it checks each character with a
corresponding character in the other
86

86

00:07:19.590  -->  00:07:23.000
string for equality and the method
returns false if any don't match
87

87

00:07:23.000  -->  00:07:27.500
and returns true of course it gets right down
to here and everything has matched and
88

88

00:07:27.500  -->  00:07:31.240
basically the same length and the same
number of characters have been shown to
89

89

00:07:31.240  -->  00:07:36.250
be the case in entire strings
so unfortunately overriding equals is not
90

90

00:07:36.250  -->  00:07:40.410
really straightforward so if two objects
can compare equal then their hash codes
91

91

00:07:40.410  -->  00:07:45.680
must also be the same which is why you
must override the hash code method if you ever
92

92

00:07:45.680  -->  00:07:46.640
override equals
93

93

00:07:46.640  -->  00:07:50.100
so in case it wasn't clear enough on that
lecture I'm going to explain again hash
94

94

00:07:50.100  -->  00:07:58.210
collections towards objects so I'm going to bring this image on the screen so you can see so the essence of this is
95

95

00:07:58.210  -->  00:08:02.530
that when storing objects in a hashed
collections such as hash sets or hash
96

96

00:08:02.530  -->  00:08:07.020
map think if the collection is having a
number of buckets to store the objects in you can
97

97

00:08:07.020  -->  00:08:11.320
see that represented in the graphics on
the screen now the hash code determines
98

98

00:08:11.320  -->  00:08:16.160
which bucket and objects gonna go into
now there is a requirement that any objects that are
99

99

00:08:16.160  -->  00:08:20.740
equal should always had the same hash
code and ultimately so that they will
100

100

00:08:20.740  -->  00:08:25.630
end up in the same bucket but the
opposite is not required so two objects
101

101

00:08:25.630  -->  00:08:30.220
that are equal do not have to have
different hash codes in the diagram
102

102

00:08:30.220  -->  00:08:32.240
object one goes into bucket one
103

103

00:08:32.240  -->  00:08:37.890
object two goes into bucket two and so on now object five has the same has code as object
104

104

00:08:37.890  -->  00:08:43.760
four so goes to the same bucket
which is bucket four and object 6 generates the
105

105

00:08:43.760  -->  00:08:49.480
same hash code as object two so that goes into
the same bucket as object two so when we add
106

106

00:08:49.480  -->  00:08:54.950
an object it's hash Code tells the
collection which bucket it should go into now they may
107

107

00:08:54.950  -->  00:08:58.950
already be objects in that bucket so
each is compared to the new object to
108

108

00:08:58.950  -->  00:09:02.230
make sure that it's not already in there
now because the comparison is performed
109

109

00:09:02.230  -->  00:09:07.030
using the equals method the collection
will only know if it's already there if it's
110

110

00:09:07.030  -->  00:09:11.130
looking in the right bucket so the hash code must be
111

111

00:09:11.130  -->  00:09:12.360
the same
112

112

00:09:12.360  -->  00:09:18.600
and equals returns true now it is now use for equals
returning true if the collection is
113

113

00:09:18.600  -->  00:09:22.690
checking the wrong bucket that is if the
hash code for the new object is not the
114

114

00:09:22.690  -->  00:09:25.790
same as an object that is that it's equal too
115

115

00:09:25.790  -->  00:09:31.060
if we try to add another object that is equal too
object say 6 number then the
116

116

00:09:31.060  -->  00:09:36.670
hash code indicate that bucket 2 is the one to check
the collection class will check all the
117

117

00:09:36.670  -->  00:09:41.790
objects in bucket 2 went it finds object 6
this will compare equal to the new
118

118

00:09:41.790  -->  00:09:46.020
object so that the new object is then
not added to the collection but on the
119

119

00:09:46.020  -->  00:09:50.310
other hand if our new object breaks the
rules and has a different hash code to
120

120

00:09:50.310  -->  00:09:55.160
object 6 even though it compares equal to it that's the important thing then the
121

121

00:09:55.160  -->  00:09:59.290
collection will be looking in the wrong
bucket and ultimately will not find it
122

122

00:09:59.290  -->  00:10:02.690
so the new object will then be added to
the collection and at that point we'll
123

123

00:10:02.690  -->  00:10:07.690
get a duplicate but it can even get worse
than that so if we don't iterate over the
124

124

00:10:07.690  -->  00:10:11.830
collection trying to find that new
object so that we can remove it
125

125

00:10:11.830  -->  00:10:16.170
we may well get to the old objects 6 first
and not the new ones so our code will check if
126

126

00:10:16.170  -->  00:10:20.110
the object we just pulled from the
collection is the same as the one we
127

127

00:10:20.110  -->  00:10:24.810
want to remove and of course equals
will return true so we remove the object
128

128

00:10:24.810  -->  00:10:29.370
from the collection but actually remove
the original not the duplicate so we
129

129

00:10:29.370  -->  00:10:32.590
probably wouldn't iterate over the
collection we already have a reference
130

130

00:10:32.590  -->  00:10:36.540
to the object we wanted to remove but
you can see that it's quite easy or hopefully it is
131

131

00:10:36.540  -->  00:10:40.140
easy for you to see the potential for error
in this scenario so there has to
132

132

00:10:40.140  -->  00:10:45.320
be a strict relationship between hash Code
and equals so two objects compare equal
133

133

00:10:45.320  -->  00:10:49.470
then they must have the same hash code
so I hope that's made it clear so the
134

134

00:10:49.470  -->  00:10:54.940
bottom line with all this waffle that I've just talked
about is that if 2 objects compare
135

135

00:10:54.940  -->  00:10:59.220
equal they must have the same hash code that's
really the bottom line so it's now time to
136

136

00:10:59.220  -->  00:11:05.080
override the equals and hash Code methods
in our heavenly body class and will do first is
137

137

00:11:05.080  -->  00:11:08.970
will start by defining what we mean by
equals so gonna bring up the heavenly body
138

138

00:11:08.970  -->  00:11:13.840
class so in this case for our particular
class this is pretty easy to decide
139

139

00:11:13.840  -->  00:11:18.190
because astronomical objects are named
well two heavenly bodies have the same
140

140

00:11:18.190  -->  00:11:22.360
are the same if they have the same
name but if we're dealing with people we
141

141

00:11:22.360  -->  00:11:25.630
may have to consider additional fields
because many people of course can share
142

142

00:11:25.630  -->  00:11:30.040
the same so that case we may also have a
check of the date of birth Social
143

143

00:11:30.040  -->  00:11:34.450
Security number or other information
that can be used to uniquely identify a person so
144

144

00:11:34.450  -->  00:11:37.950
here's a first candidate for the equals
method in heavenly body let us see if we can
145

145

00:11:37.950  -->  00:11:42.540
actually start of so I'm gonna come down here now
what we could do is I could override
146

146

00:11:42.540  -->  00:11:48.000
this come down here and notice how its got
equals and hash code so intelliJ is also clearly aware
147

147

00:11:48.000  -->  00:11:52.620
here that the equals and hash Code are hand
in hand but if I start clicking on that I
148

148

00:11:52.620  -->  00:11:56.640
get something pretty unique I actually get
a wizard and I can go through and I can select fields
149

149

00:11:56.640  -->  00:11:59.980
and I'm not going to do
that now I'm gonna go through just
150

150

00:11:59.980  -->  00:12:04.100
typed it in manually but this is just another
way to create the equals and hash Code
151

151

00:12:04.100  -->  00:12:08.150
automatically and that is a feature of intelliJ but it's actually a better
152

152

00:12:08.150  -->  00:12:13.100
value for us at the moment if we do this
manually so going to back up here and I'm
153

153

00:12:13.100  -->  00:12:25.240
going to do @override I'm gonna type this manually...
154

154

00:12:25.240  -->  00:12:29.650
...first of all we're going to do that
first check to see whether we're dealing
155

155

00:12:29.650  -->  00:12:33.330
with the same object remember we used
the equals equals you saw that in the
156

156

00:12:33.330  -->  00:12:40.200
String class and obviously also in the
object class we are going to put...
157

157

00:12:40.200  -->  00:12:43.950
...if that is the case then really we don't need to do
any more processing so we return
158

158

00:12:43.950  -->  00:12:49.970
true because we established that this is the
same object so doesn't object equal itself
159

159

00:12:49.970  -->  00:12:56.590
yes it does so at that point we are going to return true so what we are doing now is will print out
160

160

00:12:56.590  -->  00:13:25.270
our message so....
161

161

00:13:25.270  -->  00:13:41.500
...so doing a test to see if object
162

162

00:13:41.500  -->  00:13:46.450
is equal to null and obviously if we're testing the
object that was passed to us against this
163

163

00:13:46.450  -->  00:13:51.740
will this can't be null because this is a current object and we know it has been initialized so if the object is pass
164

164

00:13:51.740  -->  00:13:56.850
as null we can say they aren't equal or
if we saying if the class from heavenly body
165

165

00:13:56.850  -->  00:14:01.780
or the heavenly body class is not equal to this class
if they don't match basically we are going
166

166

00:14:01.780  -->  00:14:12.590
to return false then at that point we do another test
we can do...
167

167

00:14:12.590  -->  00:14:17.740
...
168

168

00:14:17.740  -->  00:14:32.060
...now noticed
this has got an error and thereby design
169

169

00:14:32.060  -->  00:14:37.220
so I want to point out that its a very
common and easy mistake to overload the
170

170

00:14:37.220  -->  00:14:41.750
equals method rather an overriding it
so I'll say that again it is very easy to make a mistake of
171

171

00:14:41.750  -->  00:14:46.820
overloading the equals method instead of
overriding it now when typing the code it's
172

172

00:14:46.820  -->  00:14:50.750
so easy to think that because we can be
comparing heavenly body objects the
173

173

00:14:50.750  -->  00:14:54.410
parameters to equals would be heavenly
body as you can see I've put in line 37
174

174

00:14:54.410  -->  00:14:59.120
but to guard against this always use the
@ override notation when overriding
175

175

00:14:59.120  -->  00:15:02.860
methods and you can see that's coming up
with an error at the moment that and the reason
176

176

00:15:02.860  -->  00:15:06.350
we doing that is that way if you get the
method signature wrong the code is not going
177

177

00:15:06.350  -->  00:15:08.000
to compile and you can see that we clearly got an error their
178

178

00:15:08.000  -->  00:15:12.980
so without the ampersand override our
equals method overloads the one from
179

179

00:15:12.980  -->  00:15:17.160
the base class and ultimately it's never
going to be used by the collection
180

180

00:15:17.160  -->  00:15:21.140
class IntelliJ IDEA will automatically
generated stub for you with the
181

181

00:15:21.140  -->  00:15:27.300
annotation if you use alt insert so looking at this
code we haven't actually overridden
182

182

00:15:27.300  -->  00:15:33.280
method and again we can do an alt insert if you will
if your on a PC or a Linux machine on
183

183

00:15:33.280  -->  00:15:39.150
Mac I'm doing command n and I can go to override methods and I can come down
184

184

00:15:39.150  -->  00:15:43.190
here to make sure I'm overriding it come down here and select equals in the
185

185

00:15:43.190  -->  00:15:45.460
list there and notice when I do that
186

186

00:15:45.460  -->  00:15:49.610
got a different signatures so its public
boolean equals object as opposed to
187

187

00:15:49.610  -->  00:15:53.820
heavenly body so once overloading the
method this one here that we created
188

188

00:15:53.820  -->  00:15:58.400
has actually overloaded you want to
override so we want our code to be
189

189

00:15:58.400  -->  00:16:03.430
executed equals method be executed in
place of the existing equals method that
190

190

00:16:03.430  -->  00:16:08.170
comes with an object class so what we are going to do
is delete the stub I have just created
191

191

00:16:08.170  -->  00:16:13.770
like so and come back here and going to change
heavenly body to be a of type object
192

192

00:16:13.770  -->  00:16:19.630
and if I do that notice how the override error
disappeared and that's because we are
193

193

00:16:19.630  -->  00:16:19.990
now
194

194

00:16:19.990  -->  00:16:25.030
overriding that now of course if you didn't have override there to put that in
195

195

00:16:25.030  -->  00:16:30.380
there you have no way of actually knowing you would assume that the code you have before was working and we
196

196

00:16:30.380  -->  00:16:36.290
change it back to a heavenly body and it would still
work but basically we wouldn't be overriding at that
197

197

00:16:36.290  -->  00:16:41.700
point so I'm gonna undo that so we actually got our right
object and this video is getting quite long
198

198

00:16:41.700  -->  00:16:44.920
so I'm gonna stop the video here in the
next video will continue on with our
199

199

00:16:44.920  -->  00:16:49.730
discussion about equals and look at hash Code and
get our sets working to remove this
200

200

00:16:49.730  -->  00:16:51.570
duplication so I'll see you in the next video
