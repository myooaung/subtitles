1
1

00:00:04,990  -->  00:00:10,090
alright so let's now look at the flat
map method now we've already seen map
2

2

00:00:10,090  -->  00:00:14,700
which can transform one object so that
takes a function as an argument which
3

3

00:00:14,700  -->  00:00:19,420
takes one object and returns a value so
we may want to map a single object more
4

4

00:00:19,420  -->  00:00:24,580
than one object and we can use a flat
map method to actually achieve that the
5

5

00:00:24,580  -->  00:00:28,770
method accepts a function that returns
a stream value so we can pass an object
6

6

00:00:28,770  -->  00:00:33,670
as the function argument and returns a
string containing several objects which
7

7

00:00:33,670  -->  00:00:38,020
means that were effectively mapping one
object too many in fact that's the
8

8

00:00:38,020  -->  00:00:42,580
intended use of the flat map method let's
take a look at an example of using that
9

9

00:00:42,580  -->  00:00:48,220
we're going to add a couple of
classes to our project so i'm going to
10

10

00:00:48,220  -->  00:00:54,580
create a new class employee and you can
create them either as separate files
11

11

00:00:54,580  -->  00:00:57,430
or just add them to the main java file i'm going to create a separate files
12

12

00:00:57,430  -->  00:01:07,240
employee and one this employees
obviously the one that we've used in the
13

13

00:01:07,240  -->  00:01:11,040
past so I'm just going to copy and paste
the code so you can refer to that
14

14

00:01:11,040  -->  00:01:15,850
previous definition for employee we had the string name and the age
15

15

00:01:15,850  -->  00:01:21,340
but whet we are going to do is we're going to
add a two-string method there just to be able
16

16

00:01:21,340  -->  00:01:27,670
to print the name so we're going
to just override that to string we're
17

17

00:01:27,670  -->  00:01:31,060
going....
18

18

00:01:31,060  -->  00:01:35,670
so that's the only change we are making alright
the other thing we're going to do is add
19

19

00:01:35,670  -->  00:01:38,670
another class we're going to call this
one department
20

20

00:01:41,200  -->  00:01:46,840
this is a new class so we're going to
create a string first....
21

21

00:01:46,840  -->  00:01:48,750
....
22

22

00:01:48,750  -->  00:01:54,520
.....
23

23

00:01:54,520  -->  00:02:06,600
....
24

24

00:02:09,880  -->  00:02:50,410
....
25

25

00:02:50,410  -->  00:03:02,650
....so let's start create a few
employees and add them to a couple of
26

26

00:03:02,650  -->  00:03:10,420
department so....
27

27

00:03:11,040  -->  00:03:19,260
....
28

28

00:03:22,600  -->  00:04:10,630
....
29

29

00:04:10,630  -->  00:04:15,670
.....
30

30

00:04:17,260  -->  00:04:35,290
.....
31

31

00:04:35,290  -->  00:04:38,140
....
32

32

00:04:38,140  -->  00:04:45,520
ok so now that we've done that let's
suppose that we want to print all the
33

33

00:04:45,520  -->  00:04:49,840
employees that work for the company
going to start by creating a list called
34

34

00:04:49,840  -->  00:04:55,660
departments and all our department
to it so....
35

35

00:04:55,660  -->  00:05:04,150
....
36

36

00:05:04,150  -->  00:05:14,230
.....and
37

37

00:05:14,230  -->  00:05:18,070
of course we could add a get employees
or print employees method to the
38

38

00:05:18,070  -->  00:05:22,840
department class and then iterate over
this list and print the employees but
39

39

00:05:22,840  -->  00:05:27,430
because we're working on streams let's
use streams and have a look at how the
40

40

00:05:27,430  -->  00:05:32,200
flat map method might help us do that
instead we can do that with....
41

41

00:05:32,200  -->  00:05:34,830
....
42

42

00:05:34,830  -->  00:05:42,620
.....and
noticing we got the option here department
43

43

00:05:42,620  -->  00:05:45,840
I can press ENTER for that first
declaration like so and then for the
44

44

00:05:45,840  -->  00:05:56,960
expression i'm going to put....
45

45

00:05:56,960  -->  00:06:06,780
.....that's how consice
46

46

00:06:06,780  -->  00:06:12,840
it can be so lets actually run
this to see that it works and theres our 4
47

47

00:06:12,840  -->  00:06:19,110
employees so you can see that the flat
map method wants a function that returns
48

48

00:06:19,110  -->  00:06:23,810
a stream now each department in the
source stream becomes the argument to the
49

49

00:06:23,810  -->  00:06:28,620
function for each department we call the
get employees method which returns a
50

50

00:06:28,620  -->  00:06:32,870
list and then we call the stream method
on that list to return a stream of
51

51

00:06:32,870  -->  00:06:37,080
employees now the items in this stream
were added to the stream that will be
52

52

00:06:37,080  -->  00:06:42,500
returned from the flat map method in the
case of a HR department we have gone
53

53

00:06:42,500  -->  00:06:46,650
from one department object to 3 employee
objects method is called flat map
54

54

00:06:46,650  -->  00:06:51,960
because it's often used to flatten
nested lists now in this case there are
55

55

00:06:51,960  -->  00:06:57,020
lists of employees nested within the
department list so the flat map method
56

56

00:06:57,020  -->  00:07:01,340
is the one to use when we want to
perform operations on the list but the
57

57

00:07:01,340  -->  00:07:05,370
list isn't the source so an object
containing the list as a source in this
58

58

00:07:05,370  -->  00:07:10,020
scenario and we use the method to create
a stream of all the objects in those
59

59

00:07:10,020  -->  00:07:15,620
lists now another handy method is the
collect method and this is a terminal
60

60

00:07:15,620  -->  00:07:21,180
operation so it collects the elements in
a stream into a different type of result
61

61

00:07:21,180  -->  00:07:27,560
for example we can add all the items in
the stream to list or set after all
62

62

00:07:27,560  -->  00:07:31,400
unless the purpose of the chain is to
produce a list of items to print we're
63

63

00:07:31,400  -->  00:07:35,250
going to usually want to save the result
somewhere now you might be using streams
64

64

00:07:35,250  -->  00:07:39,440
to selectively reduce and sort a large
list because you may want to use the
65

65

00:07:39,440  -->  00:07:43,910
reduced list in subsequent code so i
would use the collect method to create
66

66

00:07:43,910  -->  00:07:46,350
the reduced list
67

67

00:07:46,350  -->  00:07:50,670
so let's say that we wanted to save the
result of our first example where we
68

68

00:07:50,670  -->  00:07:55,290
uppercase filtered and sorted bingo
numbers instead of printing the list we
69

69

00:07:55,290  -->  00:07:57,030
could call collect
70

70

00:07:57,030  -->  00:08:00,780
the collect method and store their
contents of the stream at the end of the
71

71

00:08:00,780  -->  00:08:04,590
chain into a list and then we'll print
the items in the list so let's actually
72

72

00:08:04,590  -->  00:08:17,580
rewrite that code to do that.....
73

73

00:08:17,580  -->  00:08:24,930
....
74

74

00:08:24,930  -->  00:08:40,020
.....
75

75

00:08:40,020  -->  00:08:53,610
....
76

76

00:08:53,610  -->  00:08:57,750
....and once we've
done that the next line we can put
77

77

00:08:57,750  -->  00:09:05,190
something like.....
78

78

00:09:05,190  -->  00:09:10,770
and just before we do that let's
actually put something here....
79

79

00:09:10,770  -->  00:09:11,670
.....
80

80

00:09:11,670  -->  00:09:19,620
....alright so let's actually try running
that and there's our g numbers and this
81

81

00:09:19,620  -->  00:09:22,920
is just telling us by the way that it could
be replaced with the for each which we
82

82

00:09:22,920  -->  00:09:24,120
discuss previously
83

83

00:09:24,120  -->  00:09:29,010
alright so we got the same result as
last time but we the difference here is
84

84

00:09:29,010  -->  00:09:32,550
using the . collect is that we have a
list that we can continue to work with
85

85

00:09:32,550  -->  00:09:33,840
if we wanted to
86

86

00:09:33,840  -->  00:09:38,280
now there are two versions of the
collect method one accepts a collector
87

87

00:09:38,280  -->  00:09:43,050
which is an interface to the java.util.stream package now underneath the
88

88

00:09:43,050  -->  00:09:47,880
covers this version of the method maps
the collector to the arguments required
89

89

00:09:47,880  -->  00:09:51,900
by the second version of the method
which accepts or expects rather three
90

90

00:09:51,900  -->  00:09:57,720
arguments a supplier a by consumer
accumulator and a by consumer combiner
91

91

00:09:57,720  -->  00:10:00,000
so these arguments that must be
92

92

00:10:00,000  -->  00:10:04,350
specific about how we want the items to
be added to the result of collect the
93

93

00:10:04,350  -->  00:10:08,220
collect method for example let's say we
wanted to end up with an arraylist
94

94

00:10:08,220  -->  00:10:13,260
rather than a list we can use the more
specific collect version of the method to
95

95

00:10:13,260  -->  00:10:19,560
actually do this let's just take a copy
of this i'm going to just commented out
96

96

00:10:19,560  -->  00:10:23,250
so we still got the code and I paste that
back in let's actually make a change to
97

97

00:10:23,250  -->  00:10:28,800
that so the stream the map and the
filter and the assorted are all the same the
98

98

00:10:28,800  -->  00:10:33,420
. collect is what we can change and we
can do that here by changing this out
99

99

00:10:33,420  -->  00:10:40,530
I'm going to delete that we're going to
put....
100

100

00:10:40,530  -->  00:10:42,990
....
101

101

00:10:42,990  -->  00:10:53,790
....so on that line line 79
102

102

00:10:53,790  -->  00:10:58,530
first argument to collect is the
supplier if you recall a supplier create
103

103

00:10:58,530  -->  00:11:03,630
objects now we want an array list so we
passed the arraylist colon colon new as
104

104

00:11:03,630  -->  00:11:08,250
the supplier which will construct a new
arraylist for us by the way I went
105

105

00:11:08,250  -->  00:11:12,960
passing method references we use the
name of the class arraylist in this case
106

106

00:11:12,960  -->  00:11:16,110
colon colon new when we want to pass
the constructor
107

107

00:11:17,040  -->  00:11:22,320
alright so moving on the accumulator is
the arraylist . add method that's how
108

108

00:11:22,320  -->  00:11:26,460
we'll add the items to the arraylist and
finally the add all method is the
109

109

00:11:26,460  -->  00:11:31,380
combiner so the accumulator is used when
the runtime needs to add a single
110

110

00:11:31,380  -->  00:11:37,200
version or a single item into the list
the accumulator is used when the runtime
111

111

00:11:37,200  -->  00:11:42,240
needs to add a single item into a result
the combiner is sometimes used to
112

112

00:11:42,240  -->  00:11:46,800
improve the efficiency of the operation
if and when to do this is really up to
113

113

00:11:46,800  -->  00:11:51,480
the java runtime now there are many APIs that so we can map to the supplier
114

114

00:11:51,480  -->  00:11:55,230
accumulator and combiner and this
allows us to do all sorts of things
115

115

00:11:55,230  -->  00:11:59,940
using collect for example if we have a
lot of employees and their are groups of
116

116

00:11:59,940  -->  00:12:05,330
employees with the same age we can
create a map of lists based on age using
117

117

00:12:05,330  -->  00:12:07,980
the collectors . grouping by method
118

118

00:12:07,980  -->  00:12:11,450
now I won't actually do this but i'll just
show you what the code would look like
119

119

00:12:11,450  -->  00:12:13,010
it will be something like....
120

120

00:12:13,010  -->  00:12:27,260
.....
121

121

00:12:27,260  -->  00:13:10,790
....
122

122

00:13:10,790  -->  00:13:14,670
alright so the last method that we're
going to look at now is the reduced
123

123

00:13:14,670  -->  00:13:20,040
method and that combines all the items
in a string into a single result now
124

124

00:13:20,040  -->  00:13:23,330
they're actually three versions of this
object we're going to take a look at the
125

125

00:13:23,330  -->  00:13:28,580
simplest one which reduces a stream to
one of the elements in the stream for
126

126

00:13:28,580  -->  00:13:31,430
example if you wanted to use a stream to
find the youngest employee in the
127

127

00:13:31,430  -->  00:13:36,660
company would do something like.....
128

128

00:13:36,660  -->  00:14:07,940
....
129

129

00:14:07,940  -->  00:14:15,950
.....
130

130

00:14:15,950  -->  00:14:21,040
....
131

131

00:14:21,040  -->  00:14:27,820
so here we're using the version of
reduce that accepts a by function which if
132

132

00:14:27,820  -->  00:14:33,010
you recall accepts expects two arguments
and returns a result now this function
133

133

00:14:33,010  -->  00:14:38,290
compares the ages of two employees and
returns the younger employee so the
134

134

00:14:38,290  -->  00:14:42,700
result of the reduced method will be the
youngest employee in the stream now we
135

135

00:14:42,700  -->  00:14:48,400
use the if present method on line 93 to
print the result because this form of
136

136

00:14:48,400  -->  00:14:52,330
reduced method has an optional result
the reduce method is a terminal
137

137

00:14:52,330  -->  00:14:56,860
operation so the call to if present
isn't part of the stream operation chain
138

138

00:14:56,860  -->  00:15:01,720
as such here we are just chaining a
non stream method called on to the stream
139

139

00:15:01,720  -->  00:15:10,990
chain result if we run that you can see
we've got the answers Snow White and
140

140

00:15:10,990  -->  00:15:14,140
have a look at numbers again we can see
snow white in this case was the youngest
141

141

00:15:14,140  -->  00:15:22,270
employee alright a few notes about
streams firstly we can't reuse them once
142

142

00:15:22,270  -->  00:15:25,630
we've called a terminal operation on a
stream will receive the
143

143

00:15:25,630  -->  00:15:31,420
illegal state exception if we try to
operate on that stream again operations
144

144

00:15:31,420  -->  00:15:33,820
in streams are lazily evaluated
145

145

00:15:33,820  -->  00:15:37,570
so what that means is that intermediate
operations are not performed until
146

146

00:15:37,570  -->  00:15:41,620
there's a terminal operation and look at
an example of that shortly
147

147

00:15:41,620  -->  00:15:47,050
also we can use more specific stream
interfaces when we're working with lists
148

148

00:15:47,050  -->  00:15:51,670
of numbers so int stream long stream and
double stream for example now these
149

149

00:15:51,670  -->  00:15:56,440
interfaces have additional methods like
sum min Max and a few others that are
150

150

00:15:56,440  -->  00:16:01,360
useful when working with numbers now
there's also parallel streams which we
151

151

00:16:01,360  -->  00:16:06,130
use when we want to increase performance
by executing streams in parallel now
152

152

00:16:06,130  -->  00:16:08,260
whether you needed to do that would be
really depending on your application
153

153

00:16:08,260  -->  00:16:13,240
parallel streams are really outside the
scope of this section I just
154

154

00:16:13,240  -->  00:16:15,760
really want to point out that we can get
a parallel stream from a collection
155

155

00:16:15,760  -->  00:16:18,850
by using the parallel stream method
156

156

00:16:19,690  -->  00:16:24,040
alright so I mentioned operations in
streams are lazy evaluated let's look at
157

157

00:16:24,040  -->  00:16:29,140
that in a bit more detail and I'm going
to create here a list of....
158

158

00:16:29,140  -->  00:16:33,460
create a stream of strings and filter them so....
159

159

00:16:34,060  -->  00:16:52,850
...
160

160

00:16:52,850  -->  00:16:59,470
....
161

161

00:17:00,010  -->  00:17:12,310
....if you recall
162

162

00:17:12,310  -->  00:17:16,030
the filter method accepts a predicate
which takes one argument and returns
163

163

00:17:16,030  -->  00:17:18,130
true or false
164

164

00:17:18,130  -->  00:17:21,310
so there's nothing stopping us from
doing other things inside the predicate
165

165

00:17:21,310  -->  00:17:25,300
now in this case we're printing the
arguments that is passed to the predicate but
166

166

00:17:25,300  -->  00:17:31,970
when we run you can see we've got
nothing printed the last thing printed
167

167

00:17:31,970  -->  00:17:37,460
was the snow white code from my line 93
why didn't we get anything printed here
168

168

00:17:38,770  -->  00:17:43,460
well it's because stream operations are
lazily evaluated in other words nothing
169

169

00:17:43,460  -->  00:17:48,230
happens until there's a terminal
operation now there isn't a terminal
170

170

00:17:48,230  -->  00:17:51,980
operation in this chain and that's why it
was not being evaluated and we think
171

171

00:17:51,980  -->  00:17:52,780
about this
172

172

00:17:52,780  -->  00:17:57,230
hopefully it makes sense if we have
a long chain of intermediate operations
173

173

00:17:57,230  -->  00:18:01,070
but no terminal operation then there's
nothing coming at the bottom of the pipe
174

174

00:18:01,070  -->  00:18:04,730
so it would be a waste of time to
execute all the intermediate operations
175

175

00:18:04,730  -->  00:18:08,920
so let's actually add terminal
operations to the chain so come back
176

176

00:18:08,920  -->  00:18:14,410
here and put.....
177

177

00:18:16,960  -->  00:18:26,200
....so now if we run that we
get our answers and we're actually seeing
178

178

00:18:26,200  -->  00:18:29,200
the argument to the predicate printed on
the console
179

179

00:18:29,740  -->  00:18:35,910
ok so before i close off the
discussions on lambda expressions want
180

180

00:18:35,910  -->  00:18:40,390
to talk a little bit about best
practices now throughout this section I've
181

181

00:18:40,390  -->  00:18:44,200
intentionally written lambda expressions
in different ways and here the
182

182

00:18:44,200  -->  00:18:48,520
variations that I've used first one is must
specify the types of parameters
183

183

00:18:49,170  -->  00:18:53,320
vs letting the compiler infer
them the second one was using a return
184

184

00:18:53,320  -->  00:18:57,970
statement with curly braces for one
statement lambda expressions vs not
185

185

00:18:57,970  -->  00:19:03,460
using return because it's implied and
hencec not requiring curly braces three
186

186

00:19:03,460  -->  00:19:07,960
using lambda expressions that contain
one statement vs lambda expressions that
187

187

00:19:07,960  -->  00:19:12,460
have more than one statement and 4
using parentheses with a lambda
188

188

00:19:12,460  -->  00:19:16,510
expression only has one argument vs not using parentheses since
189

189

00:19:16,510  -->  00:19:20,260
they're optional when there's only one
argument so if you look at the four
190

190

00:19:20,260  -->  00:19:25,120
variations the two alternatives offered
the choice between verbosity or
191

191

00:19:25,120  -->  00:19:29,890
vs conciseness which in turn
often comes down to the choice between
192

192

00:19:29,890  -->  00:19:32,080
readability and conciseness
193

193

00:19:32,080  -->  00:19:36,940
not all the time of course short lambda
expressions are usually readable no
194

194

00:19:36,940  -->  00:19:40,840
matter how concise they are but when
striving for conciseness we can
195

195

00:19:40,840  -->  00:19:45,100
sometimes write lambda expressions that
are difficult to decipher because we
196

196

00:19:45,100  -->  00:19:50,080
left out too much information now there are
a number of articles and tutorials on
197

197

00:19:50,080  -->  00:19:54,820
the internet that discuss best practices
when using lambda expressions now many
198

198

00:19:54,820  -->  00:19:59,110
of them fall on the side of conciseness
but keep in mind that best practices are
199

199

00:19:59,110  -->  00:20:03,660
guidelines not rules so when reading
code that i haven't written or going
200

200

00:20:03,660  -->  00:20:05,980
back to code that I wrote months or
years ago
201

201

00:20:05,980  -->  00:20:09,340
previously it's actually not unusual for
me to come across a lambda expression
202

202

00:20:09,340  -->  00:20:14,140
that's cryptic and takes a lot of work
to figure out the question I would ask
203

203

00:20:14,140  -->  00:20:20,380
is was it concise well yes it was it but was
it readable to the human no so yes we
204

204

00:20:20,380  -->  00:20:24,270
can optionally leave out the parameter types when the compiler can infer them but
205

205

00:20:24,270  -->  00:20:27,610
will it be easier for a developer
reading the code to do the same
206

206

00:20:27,610  -->  00:20:30,430
now we don't have to include the return
key word
207

207

00:20:30,430  -->  00:20:34,420
when a one statement lambda returns a
value but will a developer be able to
208

208

00:20:34,420  -->  00:20:39,880
tell at a glance what the or that
the lambda expression returns a value in
209

209

00:20:39,880  -->  00:20:43,180
my opinion when it comes down to
practices that are syntactic and don't
210

210

00:20:43,180  -->  00:20:46,570
make a difference to the code that's
generated the key thing here is to be
211

211

00:20:46,570  -->  00:20:51,310
consistent so don't use different styles
within the same file if you're working
212

212

00:20:51,310  -->  00:20:55,090
on code someone else wrote and they
always leave out the parameter types then
213

213

00:20:55,090  -->  00:20:58,570
you should do the same now if they always
use the return key word with one
214

214

00:20:58,570  -->  00:21:02,920
statement lambdas do the same if you're
writing code from scratch do what's
215

215

00:21:02,920  -->  00:21:06,940
clearer and the easiest for you and also
what you think will be clear for other
216

216

00:21:06,940  -->  00:21:10,270
developers who may work on the code in
the future
217

217

00:21:10,270  -->  00:21:14,230
personally I'd rather see a verbose lambda than a concise one with a comment
218

218

00:21:14,230  -->  00:21:17,290
because i know from experience that
comments aren't always updated when the
219

219

00:21:17,290  -->  00:21:21,310
code is and that can ultimately lead to
a lot of confusion and waste of time
220

220

00:21:21,970  -->  00:21:25,270
alright so that's it now i'm going to
finish the video here now the next one
221

221

00:21:25,270  -->  00:21:29,500
we're going to start work on the
challenge so see you in the next video
