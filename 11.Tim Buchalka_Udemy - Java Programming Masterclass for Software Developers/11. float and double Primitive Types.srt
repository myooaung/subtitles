1
1

00:00:05,000  -->  00:00:07,960
<v ->So far we've only dealt with whole numbers in this course.</v>
2

2

00:00:07,960  -->  00:00:10,990
It's now time to start looking at floating point numbers.
3

3

00:00:10,990  -->  00:00:12,640
And what I've done here is I've created
4

4

00:00:12,640  -->  00:00:15,150
a new project called FloatAndDouble,
5

5

00:00:15,150  -->  00:00:16,400
so let's go through now talking
6

6

00:00:16,400  -->  00:00:17,850
about floating point numbers.
7

7

00:00:19,870  -->  00:00:21,010
So unlike whole numbers,
8

8

00:00:21,010  -->  00:00:23,740
floating point numbers have fractional parts
9

9

00:00:23,740  -->  00:00:25,850
that we express with a decimal point.
10

10

00:00:25,850  -->  00:00:29,170
3.14159 is an example.
11

11

00:00:29,170  -->  00:00:32,040
So floating point numbers are also known as real numbers.
12

12

00:00:32,040  -->  00:00:33,310
We use a floating point number
13

13

00:00:33,310  -->  00:00:36,760
when we need more precision in calculations.
14

14

00:00:36,760  -->  00:00:39,040
So there's two primitive types in Java
15

15

00:00:39,040  -->  00:00:41,300
for expressing floating point numbers,
16

16

00:00:41,300  -->  00:00:44,310
and that's the float and the double primitive types.
17

17

00:00:44,310  -->  00:00:46,061
The float is a single precision number
18

18

00:00:46,061  -->  00:00:49,233
and the double is a double precision number.
19

19

00:00:51,090  -->  00:00:53,210
So precision here refers to the format
20

20

00:00:53,210  -->  00:00:56,960
and amount of space occupied by the relevant type.
21

21

00:00:56,960  -->  00:00:58,140
So single precision,
22

22

00:00:58,140  -->  00:01:00,000
and that's the float primitive type,
23

23

00:01:00,000  -->  00:01:03,050
occupies 32 bits or four bytes,
24

24

00:01:03,050  -->  00:01:04,940
and as per our discussion previously of width,
25

25

00:01:04,940  -->  00:01:07,410
that means it's got a width of 32.
26

26

00:01:07,410  -->  00:01:08,550
And a double precision,
27

27

00:01:08,550  -->  00:01:11,240
and that's the double primitive type, is double that,
28

28

00:01:11,240  -->  00:01:13,827
so it occupies 64 bits or eight bytes,
29

29

00:01:13,827  -->  00:01:17,150
and that has a width of 64.
30

30

00:01:17,150  -->  00:01:18,170
And you can see on the screen there
31

31

00:01:18,170  -->  00:01:20,225
the float and the double ranges there,
32

32

00:01:20,225  -->  00:01:23,110
and that should confirm to you that the double is,
33

33

00:01:23,110  -->  00:01:25,590
basically has a much larger range
34

34

00:01:25,590  -->  00:01:27,963
and more precision than the float.
35

35

00:01:29,550  -->  00:01:31,360
All right, so now that we're back at the code,
36

36

00:01:31,360  -->  00:01:33,750
let's confirm what we saw on the slide,
37

37

00:01:33,750  -->  00:01:35,270
what those ranges were,
38

38

00:01:35,270  -->  00:01:36,860
and do something similar to what we've been doing
39

39

00:01:36,860  -->  00:01:38,170
for other primitive types
40

40

00:01:38,170  -->  00:01:40,570
by using their min and max values.
41

41

00:01:40,570  -->  00:01:41,780
So what I'm gonna do now,
42

42

00:01:41,780  -->  00:01:43,060
I'm gonna double click up here.
43

43

00:01:43,060  -->  00:01:44,020
You can do that.
44

44

00:01:44,020  -->  00:01:45,720
That puts the code on fullscreen.
45

45

00:01:45,720  -->  00:01:47,250
And I'll try and do that for all future videos
46

46

00:01:47,250  -->  00:01:48,250
just to make it clear,
47

47

00:01:48,250  -->  00:01:51,430
'cause we don't usually need the project pane open,
48

48

00:01:51,430  -->  00:01:53,980
and if we do we can just open it for that purpose.
49

49

00:01:53,980  -->  00:01:55,130
All right, so I'm gonna start by typing
50

50

00:01:55,130  -->  00:02:00,130
float myMinFloatValue is equal to Float.MIN_VALUE,
51

51

00:02:03,290  -->  00:02:05,440
and we'll do the same for max,
52

52

00:02:05,440  -->  00:02:09,903
myMaxFloatValue is equal to Float.MAX_VALUE.
53

53

00:02:11,010  -->  00:02:12,063
Let's print both out.
54

54

00:02:13,510  -->  00:02:18,510
Our Float minimum value is equal to plus myMinFloatValue.
55

55

00:02:21,190  -->  00:02:22,030
And you've probably noticed
56

56

00:02:22,030  -->  00:02:23,180
as we're going through the course now,
57

57

00:02:23,180  -->  00:02:26,035
as I've gone through a concept a number of times,
58

58

00:02:26,035  -->  00:02:28,550
I'm not going to repeat and say all the codes.
59

59

00:02:28,550  -->  00:02:30,269
In that case I didn't talk about the double quotes.
60

60

00:02:30,269  -->  00:02:32,080
Because we've done this a few times,
61

61

00:02:32,080  -->  00:02:33,990
that should be hopefully coming second nature to you.
62

62

00:02:33,990  -->  00:02:36,280
Likewise for the abbreviations for sout.
63

63

00:02:36,280  -->  00:02:37,600
I'm just typing those now,
64

64

00:02:37,600  -->  00:02:39,940
assuming you are familiar with those now.
65

65

00:02:39,940  -->  00:02:44,650
So I'll do the same for Float maximum value equals,
66

66

00:02:44,650  -->  00:02:47,806
and we want myMaxFloatValue.
67

67

00:02:47,806  -->  00:02:49,420
All right, then the other thing we'll do is
68

68

00:02:49,420  -->  00:02:50,970
we'll just take a copy of that,
69

69

00:02:52,010  -->  00:02:52,843
paste the code in,
70

70

00:02:52,843  -->  00:02:54,610
and we'll just do a quick search and replace
71

71

00:02:54,610  -->  00:02:57,113
and do the same for the double primitive type.
72

72

00:02:58,150  -->  00:03:01,010
So I'm gonna replace float with double.
73

73

00:03:01,010  -->  00:03:02,159
You've seen me do this before now.
74

74

00:03:02,159  -->  00:03:04,520
Making sure match case is checked,
75

75

00:03:04,520  -->  00:03:06,470
and the same for the uppercase version.
76

76

00:03:08,490  -->  00:03:09,993
Okay, replace all.
77

77

00:03:11,417  -->  00:03:13,790
All right, and we'll close down the replace window.
78

78

00:03:13,790  -->  00:03:15,040
Search and replace window.
79

79

00:03:15,040  -->  00:03:16,470
All right, so we've now got the capability
80

80

00:03:16,470  -->  00:03:18,050
to check those minimum max values
81

81

00:03:18,050  -->  00:03:21,080
for both the float and double primitive types,
82

82

00:03:21,080  -->  00:03:21,913
so let's do that.
83

83

00:03:21,913  -->  00:03:22,972
We'll run the code,
84

84

00:03:22,972  -->  00:03:24,720
make sure that it works.
85

85

00:03:24,720  -->  00:03:25,630
Okay, there's our output.
86

86

00:03:25,630  -->  00:03:27,220
I'll just put that up a little bit more so we can see.
87

87

00:03:27,220  -->  00:03:29,140
Okay, and that confirms the ranges
88

88

00:03:29,140  -->  00:03:31,350
that you saw on the slides.
89

89

00:03:31,350  -->  00:03:32,611
So you really can see there that double
90

90

00:03:32,611  -->  00:03:35,090
can work with a much bigger range of numbers,
91

91

00:03:35,090  -->  00:03:38,130
and it's also a lot more precise than the float.
92

92

00:03:38,130  -->  00:03:39,250
But of course, on the other hand,
93

93

00:03:39,250  -->  00:03:40,884
it needs twice the amount of memory,
94

94

00:03:40,884  -->  00:03:43,950
64 bits or eight bytes,
95

95

00:03:43,950  -->  00:03:46,216
to store that number compared to the float,
96

96

00:03:46,216  -->  00:03:48,900
which stores, which requires 32 bits
97

97

00:03:48,900  -->  00:03:51,430
or four bytes to store its number.
98

98

00:03:51,430  -->  00:03:52,370
All right, so let's move on now.
99

99

00:03:52,370  -->  00:03:54,980
Let's actually start typing in a bit of code.
100

100

00:03:54,980  -->  00:03:56,930
What we're going to do now is start having a look
101

101

00:03:56,930  -->  00:03:58,920
at how to use some of these variables,
102

102

00:03:58,920  -->  00:04:00,200
and we're gonna actually add an integer,
103

103

00:04:00,200  -->  00:04:03,531
and you'll see why later on in the video.
104

104

00:04:03,531  -->  00:04:04,543
myIntValue.
105

105

00:04:04,543  -->  00:04:06,670
We'll set that equal to five.
106

106

00:04:06,670  -->  00:04:07,940
We'll do the same for float,
107

107

00:04:07,940  -->  00:04:12,020
so myFloatValue is equal to five.
108

108

00:04:12,020  -->  00:04:16,770
Then double, myDoubleValue equal five.
109

109

00:04:16,770  -->  00:04:19,740
Now notice that I haven't put anything on the end there.
110

110

00:04:19,740  -->  00:04:21,520
I haven't put an f or a d or anything there,
111

111

00:04:21,520  -->  00:04:23,160
and that's been accepted.
112

112

00:04:23,160  -->  00:04:25,280
In general, the double data type
113

113

00:04:25,280  -->  00:04:27,660
is accepted as the default,
114

114

00:04:27,660  -->  00:04:29,890
much in the same way that the integer data type
115

115

00:04:29,890  -->  00:04:32,330
is accepted by default for whole numbers.
116

116

00:04:32,330  -->  00:04:36,010
So we can also put a d there or an f there to confirm that,
117

117

00:04:36,010  -->  00:04:37,630
and it's good practise to do that in general
118

118

00:04:37,630  -->  00:04:39,380
if you're typing in literal numbers
119

119

00:04:39,380  -->  00:04:41,816
to make it abundantly clear of the meaning.
120

120

00:04:41,816  -->  00:04:43,380
All right, so that's our way
121

121

00:04:43,380  -->  00:04:45,250
of declaring the three variables,
122

122

00:04:45,250  -->  00:04:46,434
the int, the float, and the double.
123

123

00:04:46,434  -->  00:04:49,000
Now, that works fine for a whole number,
124

124

00:04:49,000  -->  00:04:53,723
but you'll find that if we add a number .25 for 5.25,
125

125

00:04:54,860  -->  00:04:56,170
5.25 decimal,
126

126

00:04:56,170  -->  00:04:57,570
now if I remove the f there,
127

127

00:04:58,630  -->  00:05:00,080
we'll actually get an error.
128

128

00:05:00,080  -->  00:05:02,040
Now, the reason is that the double
129

129

00:05:02,040  -->  00:05:04,750
is assumed to be the default floating point number,
130

130

00:05:04,750  -->  00:05:06,290
so we've got a similar problem that we saw
131

131

00:05:06,290  -->  00:05:08,300
with other data types in previous videos.
132

132

00:05:08,300  -->  00:05:09,730
And if I hover over that,
133

133

00:05:09,730  -->  00:05:12,890
you can see that it's requiring a float,
134

134

00:05:12,890  -->  00:05:15,150
in this case, a literal value that we've typed in,
135

135

00:05:15,150  -->  00:05:16,620
and it found a double.
136

136

00:05:16,620  -->  00:05:18,130
So you can see there that by default,
137

137

00:05:18,130  -->  00:05:21,490
a floating point number is assumed to be a double by Java.
138

138

00:05:21,490  -->  00:05:23,663
All right, so quick challenge there for you.
139

139

00:05:24,780  -->  00:05:27,110
Thinking back to our discussion on casting,
140

140

00:05:27,110  -->  00:05:27,943
which, if you recall,
141

141

00:05:27,943  -->  00:05:30,950
we used to convert an integer both back to a byte
142

142

00:05:30,950  -->  00:05:32,570
and then again to a short,
143

143

00:05:32,570  -->  00:05:34,440
how do you think you'd do the same for the float
144

144

00:05:34,440  -->  00:05:35,900
to remove this error?
145

145

00:05:35,900  -->  00:05:36,880
So have a think about that.
146

146

00:05:36,880  -->  00:05:38,070
Pause the video and try it out
147

147

00:05:38,070  -->  00:05:40,391
and see if you can get it to work and to remove the error.
148

148

00:05:40,391  -->  00:05:42,560
When you're ready, come back and resume the video
149

149

00:05:42,560  -->  00:05:43,690
and we'll go through the solution.
150

150

00:05:43,690  -->  00:05:44,913
So pause the video now.
151

151

00:05:47,260  -->  00:05:48,690
Okay, so welcome back.
152

152

00:05:48,690  -->  00:05:49,890
Let's get this working.
153

153

00:05:49,890  -->  00:05:51,140
And we need to use a cast.
154

154

00:05:51,140  -->  00:05:52,046
If you remember,
155

155

00:05:52,046  -->  00:05:55,060
the format of the cast is left and right parentheses,
156

156

00:05:55,060  -->  00:05:56,380
so I'll start with the left one,
157

157

00:05:56,380  -->  00:05:58,526
the name of the data type you want to convert to,
158

158

00:05:58,526  -->  00:06:00,735
float, and right parentheses,
159

159

00:06:00,735  -->  00:06:03,542
and I want you to put a space there just to make it clear.
160

160

00:06:03,542  -->  00:06:05,860
So what's happened there is the error has disappeared,
161

161

00:06:05,860  -->  00:06:06,693
as you can see there now,
162

162

00:06:06,693  -->  00:06:08,470
and that's because we're telling Java,
163

163

00:06:08,470  -->  00:06:11,200
yes, this is a literal double that's been typed here,
164

164

00:06:11,200  -->  00:06:13,290
but we want you to treat it as a float,
165

165

00:06:13,290  -->  00:06:14,330
and for that reason,
166

166

00:06:14,330  -->  00:06:16,270
the error then disappeared.
167

167

00:06:16,270  -->  00:06:18,050
Generally not recommended to do that.
168

168

00:06:18,050  -->  00:06:18,883
Well, there's two reasons.
169

169

00:06:18,883  -->  00:06:21,540
Firstly, as I'll talk about in the next video,
170

170

00:06:21,540  -->  00:06:23,370
floats aren't usually recommended
171

171

00:06:23,370  -->  00:06:24,580
to be used much these days.
172

172

00:06:24,580  -->  00:06:27,730
Double is the preferred floating point data type to use.
173

173

00:06:27,730  -->  00:06:29,750
But secondly, it's a lot clearer,
174

174

00:06:29,750  -->  00:06:30,780
I think you'd agree,
175

175

00:06:30,780  -->  00:06:33,283
comparing that to adding an f on the end there,
176

176

00:06:34,362  -->  00:06:35,590
it's just easier,
177

177

00:06:35,590  -->  00:06:37,070
it's less to actually look at,
178

178

00:06:37,070  -->  00:06:38,600
and the f right at the end tells you,
179

179

00:06:38,600  -->  00:06:39,710
okay, that's a float.
180

180

00:06:39,710  -->  00:06:40,880
And that's generally the format
181

181

00:06:40,880  -->  00:06:41,960
that most programmers will use.
182

182

00:06:41,960  -->  00:06:43,700
They would use an f to indicate the type
183

183

00:06:43,700  -->  00:06:44,908
rather than try and cast it,
184

184

00:06:44,908  -->  00:06:47,920
which is just a little bit more code to look at.
185

185

00:06:47,920  -->  00:06:49,209
All right, so let's finish the video here.
186

186

00:06:49,209  -->  00:06:50,450
In the next one,
187

187

00:06:50,450  -->  00:06:52,760
we'll start exploring more about these floating point types
188

188

00:06:52,760  -->  00:06:53,970
and we'll start doing some division
189

189

00:06:53,970  -->  00:06:56,920
to see what happens and what those numbers look like.
190

190

00:06:56,920  -->  00:06:58,620
So I'll see you in the next video.
