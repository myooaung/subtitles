1
1

00:00:04,860  -->  00:00:10,320
so continuing with our discussion about
using maps so what we gonna do now is
2

2

00:00:10,320  -->  00:00:15,780
used to remove method to remove a
specific key from a map and to use this
3

3

00:00:15,780  -->  00:00:20,170
probably as you thinking NOW the way to remove is logical is actually
4

4

00:00:20,170  -->  00:00:24,850
two ways of doing so the first way we can do
it is we can do something like, and what will do is
5

5

00:00:24,850  -->  00:00:29,360
will leave the print out on the bottom there
so we confirm that our changes
6

6

00:00:29,360  -->  00:00:34,360
actually work so down here we can put…
7

7

00:00:34,360  -->  00:00:41,310
then we can put… and that's gonna the list entry but we
can also do something else we can remove
8

8

00:00:41,310  -->  00:00:44,950
a key only if it's map to a certain value
so for example we could do something
9

9

00:00:44,950  -->  00:01:07,410
like this we can put…
10

10

00:01:07,410  -->  00:01:18,590
and we put else…
11

11

00:01:18,590  -->  00:01:31,870
so we run this code again, so we can see now from the list we got this
12

12

00:01:31,870  -->  00:01:35,900
message Algol not remove key pair not found, but you can see that Lisp
13

13

00:01:35,900  -->  00:01:41,250
has been successfully removed so just
confirming again on line 34 we checking
14

14

00:01:41,250  -->  00:01:47,460
to see whether Algol and the
value of algorithmic languages was there and only
15

15

00:01:47,460  -->  00:01:51,140
removed under those
circumstances and obviously on line 21
16

16

00:01:51,140  -->  00:01:55,170
when we defined it we didn't defined
it like that and as a result it didn't
17

17

00:01:55,170  -->  00:02:00,500
remove it for that reason, now the other thing to note is that
the remove method does return true or
18

18

00:02:00,500  -->  00:02:03,600
false that's good to know if you wanna
check that to some was removed you can
19

19

00:02:03,600  -->  00:02:09,900
actually put an if then and just check for true or false to indicate if the key is in the map
20

20

00:02:09,900  -->  00:02:14,810
was removed and you see that there on line
34 because we used that function cuz we did
21

21

00:02:14,810  -->  00:02:19,970
an if language was remove and pass
the parameter and that returned true and
22

22

00:02:19,970  -->  00:02:24,790
were able to use if then else just to
confirm that works, I go back here and copy
23

23

00:02:24,790  -->  00:02:33,080
the definition from line 21 and pasted into here
on line 34 in the second parameter and if we run
24

24

00:02:33,080  -->  00:02:40,100
this, this time you can see the message Algol was
removed and we only got 3 items left both
25

25

00:02:40,100  -->  00:02:41,060
Lisp and Algogl
26

26

00:02:41,060  -->  00:02:47,710
was removed from the list of languages ok so
let's just clean up a few thing because i want to talk about a few other
27

27

00:02:47,710  -->  00:02:48,430
methods
28

28

00:02:48,430  -->  00:02:52,810
so what I’m going to do first is to comment out this removal of list
29

29

00:02:52,810  -->  00:02:59,570
then down here just before the for loop what we're
going to do is print a message here and
30

30

00:02:59,570  -->  00:03:04,350
use the dot replace method and what replaced does is it’s used to
31

31

00:03:04,350  -->  00:03:08,870
replace the entry for a specified key if
it's already mapped to a value so you see what I
32

32

00:03:08,870  -->  00:03:12,510
mean by that we can do something along
the lines of here will print out the results
33

33

00:03:12,510  -->  00:03:17,610
languages…
34

34

00:03:17,610  -->  00:03:33,500
…and we do something like…the first one but also
35

35

00:03:33,500  -->  00:03:38,070
another entry as well just to confirm
the results we get out of this and will do
36

36

00:03:38,070  -->  00:03:44,170
something like…
37

37

00:03:44,170  -->  00:03:55,130
and will try Scala…obviously because Scala doesn’t exist and will be replacing on the assumption that the key
38

38

00:03:55,130  -->  00:03:56,110
exists
39

39

00:03:56,110  -->  00:04:01,050
so we run this, so you can see what's
happened, therein lies madness when
40

40

00:04:01,050  -->  00:04:06,440
this first one replaced on line 43 when
that code was executed it return the
41

41

00:04:06,440  -->  00:04:11,820
previous entry which of course was therein lies madness which we configured on line 23 the
42

42

00:04:11,820  -->  00:04:15,700
next entry their returned null which
was its way of saying it did not already
43

43

00:04:15,700  -->  00:04:20,240
exist on file and it's not added as you can see because it doesn't come up
44

44

00:04:20,240  -->  00:04:25,050
with a list because it wasn't already in
existence in the map so it doesn't get
45

45

00:04:25,050  -->  00:04:29,200
added unlike put which does that and
replaces it if it's already there and
46

46

00:04:29,200  -->  00:04:34,510
just like remove we can also specify the
existing value so the mappings only
47

47

00:04:34,510  -->  00:04:39,340
update if the key was map to the Old
value which we originally specify or what we can
48

48

00:04:39,340  -->  00:04:44,550
specify to do this we provide the
expected old value before the new one now what will do
49

49

00:04:44,550  -->  00:04:50,470
will just do it wrong the first time so you can get
an idea on what I mean so on this line here
50

50

00:04:50,470  -->  00:05:01,890
instead of printing it out will change this code a little bit will put an if there…Lisp…
51

51

00:05:01,890  -->  00:05:07,580
notice how its spawning 3 options theres key string value and string old value or we can just
52

52

00:05:07,580  -->  00:05:21,620
do what we did in the past in this case
we put something like the old value of this…and specify the new value like so…
53

53

00:05:21,620  -->  00:05:49,360
else…ok and will just comment the Scala one for now, so we run that and you should find it doesn’t get replaced, so Lisp was not replace and Lisp
54

54

00:05:49,360  -->  00:05:54,530
therein lies madness is still set to the original
value which of course we configured on the
55

55

00:05:54,530  -->  00:05:59,330
line 23 so as a recap on that
particular function so what we're doing
56

56

00:05:59,330  -->  00:06:03,470
is we're passing a third parameter, passing the key, passing the old value
57

57

00:06:03,470  -->  00:06:07,510
and were passing the new value was and thats a way to checked if it really
58

58

00:06:07,510  -->  00:06:11,890
was only updating if the value, this
particularly already existed and just to
59

59

00:06:11,890  -->  00:06:23,450
confirm that we can come back up here and copy and change this will not work, paste it in there like so and we run it, you can see that
60

60

00:06:23,450  -->  00:06:26,550
Lisp was replaced and Lisp is now a functional
programming language with imperative
61

61

00:06:26,550  -->  00:06:28,590
features, so it has obviously
62

62

00:06:28,590  -->  00:06:32,540
work through and updated which is what I
wanted to do you might be wondering why
63

63

00:06:32,540  -->  00:06:37,260
is that useful, one good use would be for example
64

64

00:06:37,260  -->  00:06:41,330
if you're updating someone's name after
they got married you can ensure that the
65

65

00:06:41,330  -->  00:06:45,160
correct persons updated or changing the
address so you just checking to make
66

66

00:06:45,160  -->  00:06:48,950
sure that that exact entry at the
exact right entry before you update it
67

67

00:06:48,950  -->  00:06:54,040
so there is no chance of it accidentally overriding
the wrong info, now for these examples
68

68

00:06:54,040  -->  00:06:58,530
the methods defined by the map interface
we’ve used the map that uses a string type for
69

69

00:06:58,530  -->  00:07:03,850
the key and value now in fact both the
key and the values can be any object we
70

70

00:07:03,850  -->  00:07:08,330
could even use a map type as the values
in another map in actual fact you could
71

71

00:07:08,330  -->  00:07:14,310
add a map as a value to itself, its
important to point out that unlike other
72

72

00:07:14,310  -->  00:07:18,280
languages such as Python for example
there's no requirement that the keys be
73

73

00:07:18,280  -->  00:07:22,930
immutable and just as a recap immutable
objects or things like strings and
74

74

00:07:22,930  -->  00:07:28,420
integers who’s value cant change if it sounds
strange when we saw assign a new string
75

75

00:07:28,420  -->  00:07:32,520
value to a string variable, what
we are doing we’re changing the value that the
76

76

00:07:32,520  -->  00:07:34,360
variable holds we're not
77

77

00:07:34,360  -->  00:07:38,010
changing the string so Algol for
example that we used for one of the
78

78

00:07:38,010  -->  00:07:43,480
keys earlier on line 21 can't be changed
on the other hand an array list can change
79

79

00:07:43,480  -->  00:07:47,730
by having new items added when a new value is assigned to existing entries, that said
80

80

00:07:47,730  -->  00:07:51,930
the Java documentation does warn that
great care must be exercised if
81

81

00:07:51,930  -->  00:07:55,520
immutable objects are used as map keys
so they give you that warning but the not
82

82

00:07:55,520  -->  00:07:59,120
prohibited the reason for the warnings is
that a map object can behave
83

83

00:07:59,120  -->  00:08:03,860
unpredictably if the key objects change
in such a way that equals comparisons
84

84

00:08:03,860  -->  00:08:04,900
are affected
85

85

00:08:04,900  -->  00:08:11,120
remember we talked about equal comparisons in the last
video and actually earlier in this video, so it's worth being aware
86

86

00:08:11,120  -->  00:08:14,740
of this warning but you probably have to
do something fairly advanced before it affect you
87

87

00:08:14,740  -->  00:08:20,720
so using classes as keys is in itself fairly advanced
88

88

00:08:20,720  -->  00:08:25,890
now one thing that's not permitted is for a map
to contain itself as a key and it would be a
89

89

00:08:25,890  -->  00:08:30,780
bizarre program that attempted to do
such a thing to demonstrate some more
90

90

00:08:30,780  -->  00:08:35,020
probably more interesting uses of maps, I’m going to model a small part of the
91

91

00:08:35,020  -->  00:08:39,060
original adventure game called colossal cave which
allows a player to move around in various
92

92

00:08:39,060  -->  00:08:43,050
locations by typing in compass
directions so what we're going to do is
93

93

00:08:43,050  -->  00:08:47,920
create a new project called an adventure
and I'm going to create a new class
94

94

00:08:47,920  -->  00:08:53,470
let's go ahead, so file, new Project, I’m just gonna do standard things that
95

95

00:08:53,470  -->  00:08:56,410
that you've probably seen a million
times now, we’re just going to create
96

96

00:08:56,410  -->  00:09:04,040
the project from template, I'm gonna call
this one Adventure and Finish it
97

97

00:09:04,040  -->  00:09:11,350
And we gonna say, this window, which closed off the other
code because we don’t need it for now, and were gonna go
98

98

00:09:11,350  -->  00:09:12,760
ahead in the package
99

99

00:09:12,760  -->  00:09:22,020
and we are gonna create a new class and call that Location, so lets start by defining some basic
100

100

00:09:22,020  -->  00:09:27,450
information about this location and again
this is the location in an adventure game based
101

101

00:09:27,450  -->  00:09:33,470
on the original colossal cave adventure, which was
one of the first adventure games that came
102

102

00:09:33,470  -->  00:09:36,840
out years and years ago, and feel free to google that if you want to find out more
103

103

00:09:36,840  -->  00:09:43,550
information about that so let's start, we,re gonna have a location ID first, so…
104

104

00:09:44,780  -->  00:09:48,890
lets also have a description so…
105

105

00:09:48,890  -->  00:10:00,530
…this is the description of the location…and were getting that error most likely because we haven’t initialize
106

106

00:10:00,530  -->  00:10:03,760
but we're going to initialize those in a
constructor shortly we also want a map
107

107

00:10:03,760  -->  00:10:21,600
which is gonna be a map of exits so private…let’s add a constructor…
108

108

00:10:21,600  -->  00:10:25,640
and the constructor is going to take just
the two parameters so were going to take the
109

109

00:10:25,640  -->  00:10:29,800
locationID and the description, we're
not going to do the exists because we’re gonna
110

110

00:10:29,800  -->  00:10:33,980
initialise that, and you notice that those two error have gone away now
111

111

00:10:33,980  -->  00:10:39,810
because we initialized it and set our exits up…
112

112

00:10:39,810  -->  00:10:42,900
we initials it to a new HashMap
113

113

00:10:42,900  -->  00:10:47,360
and what we want to do is add a
couple of method we want the ability to
114

114

00:10:47,360  -->  00:10:53,400
add an exit to our location, we want a getter for location, and description and
115

115

00:10:53,400  -->  00:10:58,030
a getter for our list and exits so let's
go ahead and do that as well
116

116

00:10:58,030  -->  00:11:10,680
so getters are easy enough so lets ad those first, select location,description and exits as getters, so we can get access to those from another class, and lets go up here
117

117

00:11:10,680  -->  00:11:15,520
what we want to do is we want to add the ability
to add an exit so to do that we can do
118

118

00:11:15,520  -->  00:11:20,030
public…
119

119

00:11:20,030  -->  00:11:35,240
and then put exits…
120

120

00:11:35,240  -->  00:11:40,680
and our direction is going to be the key and the
location is going to be our value that's a
121

121

00:11:40,680  -->  00:11:45,250
very basic location, so its containing just
to recap the location contains a
122

122

00:11:45,250  -->  00:11:49,620
location ID and the description as well
as a map that we defined in line 12 which is
123

123

00:11:49,620  -->  00:11:53,090
used to store the value of exits when
the location and we've added a method
124

124

00:11:53,090  -->  00:11:56,570
to allow directions to be added to this map so
that we can define the details from the
125

125

00:11:56,570  -->  00:12:00,110
main program no one thing about this
class is that we programming defensively
126

126

00:12:00,110  -->  00:12:03,360
what I mean by that is anything that
doesn't need to be exposed to the
127

127

00:12:03,360  -->  00:12:08,260
outside isn’t exposed and our fields are mark final
so they can't be changed once a
128

128

00:12:08,260  -->  00:12:12,240
constructor has finished creating a
location instance so one useful
129

129

00:12:12,240  -->  00:12:17,490
technique that is in the getter for the exits map and with the get exits what I did
130

130

00:12:17,490  -->  00:12:24,760
there, I want to explain to you why I'm doing this, so what I’m going to do there is
131

131

00:12:24,760  -->  00:12:25,570
return
132

132

00:12:25,570  -->  00:12:29,030
new…
133

133

00:12:29,030  -->  00:12:36,230
of exits, I’m putting exits in the constructor so the reason we're doing
that is that instead of just returning
134

134

00:12:36,230  -->  00:12:40,210
the exits map and creating a new HashMap
and passing out exits in the
135

135

00:12:40,210  -->  00:12:43,940
constructor on line 32 now
we’ve seen that use of the constructor
136

136

00:12:43,940  -->  00:12:47,990
before with lists it does the same thing
here, so in other words a new map created
137

137

00:12:47,990  -->  00:12:52,280
that has all the makings of the exits map
now the reasons that this would be useful
138

138

00:12:52,280  -->  00:12:56,970
useful technique doing that here is that
nothing outside of that class can change
139

139

00:12:56,970  -->  00:13:01,390
exits, so the getter returns a copy of the
exits so if the calling program wants to
140

140

00:13:01,390  -->  00:13:05,290
add or remove mappings from it and the
exits mapping field won't be affected
141

141

00:13:05,290  -->  00:13:11,140
that's really important there so although we won’t be using the location class as a key in the map, we use that later to
142

142

00:13:11,140  -->  00:13:15,180
show some ways to make your classes
immutable and returning immutable object to getter in this
143

143

00:13:15,180  -->  00:13:20,350
way is one of the techniques here to make
sure that works so let's go back to our
144

144

00:13:20,350  -->  00:13:25,390
main method and write some code to add
some locations, so what I’m going to do is start
145

145

00:13:25,390  -->  00:13:41,260
by bringing a scanner in their…scanner…and what I’m going to do is copy
146

146

00:13:41,260  -->  00:13:45,850
and paste some of these locations to
save time and I have six locations to start
147

147

00:13:45,850  -->  00:13:53,520
with, these are locations in the game, and I also need to
define the map here, so its private…
148

148

00:13:53,520  -->  00:14:08,720
static…
149

149

00:14:08,720  -->  00:14:15,730
HashMap…and obviously from lines 13 to 18 we are
150

150

00:14:15,730  -->  00:14:19,820
adding new locations you can see we're
adding a number, we’re putting the original
151

151

00:14:19,820  -->  00:14:24,400
key there which is the integer 012345 which gets converted to an
152

152

00:14:24,400  -->  00:14:28,230
integer object by auto boxing and you
can see that we're creating a new
153

153

00:14:28,230  -->  00:14:32,600
location object using the same technique
we are passing the number which is going to be
154

154

00:14:32,600  -->  00:14:37,100
sort of like a locationID then the description
of what the particular location is all
155

155

00:14:37,100  -->  00:14:37,440
about
156

156

00:14:37,440  -->  00:14:41,610
so lets now add some code that allows us
to type in a number and prints the
157

157

00:14:41,610  -->  00:14:46,510
location description its streaming from
the map so to do that we'll do something like
158

158

00:14:46,510  -->  00:15:16,630
will put int…I’m gonna description of the current room…
159

159

00:15:16,630  -->  00:15:30,630
nextInt…
160

160

00:15:30,630  -->  00:15:40,660
and print out a message…so let just run this and what will have to do is finish this video
161

161

00:15:40,660  -->  00:15:45,290
and continue to continue to writing the code but
you can see we started out because we
162

162

00:15:45,290  -->  00:15:52,210
defined location to be equal to 1 default is going to be that object, we put something like we know that
163

163

00:15:52,210  -->  00:15:58,430
a second location, location 2, on top of a hill, if type 2
164

164

00:15:58,430  -->  00:16:05,320
on top of a hill, if I type 3 it should be inside a
building, 5 your in the forests and
165

165

00:16:05,320  -->  00:16:07,090
4 lets try the other one as well
166

166

00:16:07,090  -->  00:16:15,050
Your in a valley and if I type 0 you can see, in front of a computer learning Java which was the exit to break out of it, so that's a very
167

167

00:16:15,050  -->  00:16:18,880
simple program there, now in the next video
what we're going to do is we're going to
168

168

00:16:18,880  -->  00:16:23,290
enhanced this, we’re going to build the exits, so we’er going
to set up so that when you add a
169

169

00:16:23,290  -->  00:16:27,770
particular location you’ve got a list of
exits and you can only use those exits
170

170

00:16:27,770  -->  00:16:32,080
that are valid for that particular location so
let's look at doing that next video
