WEBVTT
1
1

00:00:05.040  -->  00:00:07.470
ok so it's now go ahead and add another
2

2

00:00:07.470  -->  00:00:09.830
test method to the bank account test
3

3

00:00:09.830  -->  00:00:12.710
class we can do that anytime we don't
4

4

00:00:12.710  -->  00:00:14.630
have to match a test method to a method
5

5

00:00:14.630  -->  00:00:17.160
in the class for testing although in an
6

6

00:00:17.160  -->  00:00:18.750
actual development environment it
7

7

00:00:18.750  -->  00:00:20.490
wouldn't make sense for us to do so
8

8

00:00:20.490  -->  00:00:23.090
test methods have to be annotated though
9

9

00:00:23.090  -->  00:00:25.890
with the org. junit test
10

10

00:00:25.890  -->  00:00:28.610
annotation as you can see that the three
11

11

00:00:28.610  -->  00:00:30.390
methods in the bank account test class
12

12

00:00:30.390  -->  00:00:32.840
currently are they must also be public
13

13

00:00:32.840  -->  00:00:35.880
and must also return void now when
14

14

00:00:35.880  -->  00:00:38.010
working with older test Suites you might
15

15

00:00:38.010  -->  00:00:39.990
see that the test methods begin with the
16

16

00:00:39.990  -->  00:00:42.780
name test and that's because older
17

17

00:00:42.780  -->  00:00:44.790
versions of j unit didn't have a test
18

18

00:00:44.790  -->  00:00:47.310
annotation and so we have to begin test
19

19

00:00:47.310  -->  00:00:49.890
method names with tests in order for the
20

20

00:00:49.890  -->  00:00:52.140
framework to identify test methods we
21

21

00:00:52.140  -->  00:00:53.460
don't have to do that which is why
22

22

00:00:53.460  -->  00:00:55.710
IntelliJ doesn't generate method names
23

23

00:00:55.710  -->  00:00:57.870
that follow that the outdated convention
24

24

00:00:57.870  -->  00:01:00.660
right so let's set add some code going to
25

25

00:01:00.660  -->  00:01:03.660
add another method here that's going to
26

26

00:01:03.660  -->  00:01:08.930
be...
27

27

00:01:08.930  -->  00:01:16.860
...
28

28

00:01:16.860  -->  00:01:17.970
when we did that the highlighted in
29

29

00:01:17.970  -->  00:01:19.440
yellow so intelliJ was telling us that
30

30

00:01:19.440  -->  00:01:22.080
its now valid test notice i mentioned
31

31

00:01:22.080  -->  00:01:24.120
towards the end of the last video when
32

32

00:01:24.120  -->  00:01:25.860
we work with j unit we make assertions
33

33

00:01:25.860  -->  00:01:29.280
about what we expect to happen if these
34

34

00:01:29.280  -->  00:01:31.790
assertions are met then the test passes
35

35

00:01:31.790  -->  00:01:34.200
but if they're not met then the test
36

36

00:01:34.200  -->  00:01:37.530
fails so important implication is
37

37

00:01:37.530  -->  00:01:39.470
that a test can pass even though
38

38

00:01:39.470  -->  00:01:41.700
our code has bugs because none of the
39

39

00:01:41.700  -->  00:01:43.860
tests in our test suite made an
40

40

00:01:43.860  -->  00:01:46.290
assertion that will catch the bug as we
41

41

00:01:46.290  -->  00:01:48.510
seen when an empty test method runs
42

42

00:01:48.510  -->  00:01:50.850
its considered a pass and that's again
43

43

00:01:50.850  -->  00:01:52.970
because null assertions failed when it
44

44

00:01:52.970  -->  00:01:55.020
ran that's really important to remember
45

45

00:01:55.020  -->  00:01:58.380
that the test suites that we write all
46

46

00:01:58.380  -->  00:01:59.460
the methods will only cover the
47

47

00:01:59.460  -->  00:02:01.560
situations that we test against
48

48

00:02:01.560  -->  00:02:02.720
assertions
49

49

00:02:02.720  -->  00:02:04.970
alright so let's now change the
50

50

00:02:04.970  -->  00:02:07.200
dummy test method so that it tests
51

51

00:02:07.200  -->  00:02:09.330
whether two integers are equal so i'm
52

52

00:02:09.330  -->  00:02:13.460
going to type....
53

53

00:02:13.460  -->  00:02:16.690
...
54

54

00:02:16.690  -->  00:02:18.580
now when using these cert equals
55

55

00:02:18.580  -->  00:02:21.100
method the first parameter is the value
56

56

00:02:21.100  -->  00:02:23.740
we expect and the second parameter is
57

57

00:02:23.740  -->  00:02:25.630
the value we want to test or the actual
58

58

00:02:25.630  -->  00:02:28.120
value and obviously this test here is
59

59

00:02:28.120  -->  00:02:29.710
quite a silly one because we have
60

60

00:02:29.710  -->  00:02:32.200
hard-coded values but to let's run it
61

61

00:02:32.200  -->  00:02:34.810
anyway and see what happens but instead
62

62

00:02:34.810  -->  00:02:36.520
of running the entire test suite which
63

63

00:02:36.520  -->  00:02:38.110
we've done in the past by clicking up
64

64

00:02:38.110  -->  00:02:40.330
clicking the Run button up here which we
65

65

00:02:40.330  -->  00:02:43.180
could also do with this junit
66

66

00:02:43.180  -->  00:02:45.700
pane open we can also click down here
67

67

00:02:45.700  -->  00:02:48.190
instead of doing that we can actually
68

68

00:02:48.190  -->  00:02:50.410
click on this little green arrow here to
69

69

00:02:50.410  -->  00:02:53.320
the left in the gutter of the method and
70

70

00:02:53.320  -->  00:02:54.880
then will run the tests just for this one
71

71

00:02:54.880  -->  00:02:56.860
method click on that now and run it
72

72

00:02:56.860  -->  00:02:59.710
and see here i can click on run dummy
73

73

00:02:59.710  -->  00:03:05.740
test and you can see that one test failed
74

74

00:03:05.740  -->  00:03:07.420
this time we haven't got the list of the other
75

75

00:03:07.420  -->  00:03:09.460
tests because we only ran this one
76

76

00:03:09.460  -->  00:03:11.650
single test and we've got a similar
77

77

00:03:11.650  -->  00:03:13.750
error on the right hand side in that we
78

78

00:03:13.750  -->  00:03:15.910
got the insertion failed come up and
79

79

00:03:15.910  -->  00:03:17.110
but it actually showed us that we
80

80

00:03:17.110  -->  00:03:19.570
expected the value 20 but we saw the
81

81

00:03:19.570  -->  00:03:21.880
value of 21 and that's in line with the
82

82

00:03:21.880  -->  00:03:23.320
fact that we put two different
83

83

00:03:23.320  -->  00:03:28.180
numbers on line 27 note also when that
84

84

00:03:28.180  -->  00:03:30.280
happen when we run the test this way this
85

85

00:03:30.280  -->  00:03:32.380
little icons change
86

86

00:03:32.380  -->  00:03:35.440
now and also over here notice that I
87

87

00:03:35.440  -->  00:03:37.690
we've got a different run
88

88

00:03:37.690  -->  00:03:39.670
configuration so once is being created
89

89

00:03:39.670  -->  00:03:41.290
just for that method if we drop down
90

90

00:03:41.290  -->  00:03:42.910
click on the drop-down we can see now
91

91

00:03:42.910  -->  00:03:46.030
we've got main bank account test which
92

92

00:03:46.030  -->  00:03:48.790
we run all the tests in this class and
93

93

00:03:48.790  -->  00:03:50.920
bank account test . dummy tests we will leave
94

94

00:03:50.920  -->  00:03:52.930
that on there and run that now only run
95

95

00:03:52.930  -->  00:03:55.480
just one test for that method but
96

96

00:03:55.480  -->  00:03:56.890
if you want to run all the methods
97

97

00:03:56.890  -->  00:03:58.330
all the tests in the bank account test
98

98

00:03:58.330  -->  00:04:01.300
class select bank account test only run
99

99

00:04:01.300  -->  00:04:03.730
that we're now getting a list of the four
100

100

00:04:03.730  -->  00:04:06.220
methods or the four tests running down
101

101

00:04:06.220  -->  00:04:07.390
the bottom of the screen
102

102

00:04:07.390  -->  00:04:09.510
alright so we have seen how you can add
103

103

00:04:09.510  -->  00:04:11.650
test methods to the test class and
104

104

00:04:11.650  -->  00:04:12.850
hopefully now you've got a bit of a feel
105

105

00:04:12.850  -->  00:04:14.380
for how junit works
106

106

00:04:14.380  -->  00:04:16.480
let's go ahead and delete this dummy
107

107

00:04:16.480  -->  00:04:17.950
test method we really don't need that
108

108

00:04:17.950  -->  00:04:22.480
anymore and what I suggest you do
109

109

00:04:22.480  -->  00:04:24.310
is come over here and click on the
110

110

00:04:24.310  -->  00:04:26.740
drop-down click on edit configurations
111

111

00:04:26.740  -->  00:04:30.250
and you just expande this so you
112

112

00:04:30.250  -->  00:04:33.370
can see what it is just a little bit bigger so we
113

113

00:04:33.370  -->  00:04:37.330
can do that you can actually remove this
114

114

00:04:37.330  -->  00:04:39.160
one as well this dummy test we no longer need
115

115

00:04:39.160  -->  00:04:42.370
click on minus click on ok so
116

116

00:04:42.370  -->  00:04:44.110
that we don't get confuse later down the track now
117

117

00:04:44.110  -->  00:04:46.180
that we've deleted that method
118

118

00:04:46.180  -->  00:04:47.740
alright so let's now go ahead and write
119

119

00:04:47.740  -->  00:04:50.710
a test for the bank account .deposit
120

120

00:04:50.710  -->  00:04:53.080
method going start
121

121

00:04:53.080  -->  00:04:55.630
working up here and we'll start by
122

122

00:04:55.630  -->  00:04:57.940
creating an instance of bank account
123

123

00:04:57.940  -->  00:04:59.740
go ahead and do that i'm going to delete
124

124

00:04:59.740  -->  00:05:01.600
the fail because we're
125

125

00:05:01.600  -->  00:05:03.070
actually at the stage of writing our
126

126

00:05:03.070  -->  00:05:07.000
tests so bank account...
127

127

00:05:07.000  -->  00:05:16.210
....
128

128

00:05:16.210  -->  00:05:18.910
so again i deleted the call to
129

129

00:05:18.910  -->  00:05:20.290
the fail method now because we're
130

130

00:05:20.290  -->  00:05:22.690
actually implementing this test now
131

131

00:05:22.690  -->  00:05:25.090
alright so let's call the deposit method
132

132

00:05:25.090  -->  00:05:27.910
with the value of 200 we're going to set
133

133

00:05:27.910  -->  00:05:29.380
the second parameter the true meaning
134

134

00:05:29.380  -->  00:05:31.090
that the transaction is taking place at
135

135

00:05:31.090  -->  00:05:32.980
a branch with the help of the teller
136

136

00:05:32.980  -->  00:05:35.890
right now the bank account deposit
137

137

00:05:35.890  -->  00:05:38.320
method isn't using that parameter so i'm
138

138

00:05:38.320  -->  00:05:41.910
going to type....
139

139

00:05:41.910  -->  00:05:47.890
...
140

140

00:05:47.890  -->  00:05:50.530
alright so obviously we started with the
141

141

00:05:50.530  -->  00:05:54.280
balance of 1000 on line 11 deposited 200
142

142

00:05:54.280  -->  00:05:57.370
on line 12 so the bank account deposit
143

143

00:05:57.370  -->  00:06:00.400
methods should return 1200 this is where
144

144

00:06:00.400  -->  00:06:03.220
we can call use assert equals method to
145

145

00:06:03.220  -->  00:06:05.590
assert that the expected value should be
146

146

00:06:05.590  -->  00:06:08.160
1200 now the actual value will test
147

147

00:06:08.160  -->  00:06:10.270
against is the value returned by the
148

148

00:06:10.270  -->  00:06:12.880
deposit method note here that when
149

149

00:06:12.880  -->  00:06:15.610
comparing objects the cert equals method
150

150

00:06:15.610  -->  00:06:18.940
uses the equals method of the objects
151

151

00:06:18.940  -->  00:06:20.950
being compared to make the comparison
152

152

00:06:20.950  -->  00:06:23.910
alright so....
153

153

00:06:23.910  -->  00:06:42.210
...
154

154

00:06:42.210  -->  00:06:47.580
....we're going to accept import so
155

155

00:06:47.580  -->  00:06:49.770
when comparing doubles I've chosen to use
156

156

00:06:49.770  -->  00:06:52.080
the version of the method that accepts the
157

157

00:06:52.080  -->  00:06:54.360
third parameter and that's a delta
158

158

00:06:54.360  -->  00:06:56.610
parameter and what that does is allow
159

159

00:06:56.610  -->  00:06:59.400
some leeway in the comparison so as long
160

160

00:06:59.400  -->  00:07:01.140
as the difference between the expected
161

161

00:07:01.140  -->  00:07:03.990
and actual values is is within the Delta
162

162

00:07:03.990  -->  00:07:07.080
we specify the assertion will pass now
163

163

00:07:07.080  -->  00:07:08.640
in this case we expected value to be
164

164

00:07:08.640  -->  00:07:11.880
exactly 1200.00 so you start with the
165

165

00:07:11.880  -->  00:07:13.740
delta of 0 and change it if we discovered
166

166

00:07:13.740  -->  00:07:16.380
that the value returned was like 1199
167

167

00:07:16.380  -->  00:07:20.860
.999999 etc that sometimes happens when
168

168

00:07:20.860  -->  00:07:22.080
you're working with double
169

169

00:07:22.080  -->  00:07:25.440
calculations right so let's rerun our test
170

170

00:07:25.440  -->  00:07:27.240
suite coming here making sure
171

171

00:07:27.240  -->  00:07:30.060
that the run window here you
172

172

00:07:30.060  -->  00:07:32.490
selected bank account test click on run
173

173

00:07:32.490  -->  00:07:37.360
we are now back to three tests because
174

174

00:07:37.360  -->  00:07:39.660
we deleted the fourth one but also i can
175

175

00:07:39.660  -->  00:07:41.430
see here that the deposit method is now
176

176

00:07:41.430  -->  00:07:44.070
successful it's changed to showing okay
177

177

00:07:44.070  -->  00:07:46.320
and is in green indicating that that
178

178

00:07:46.320  -->  00:07:48.180
test has actually succeeded
179

179

00:07:48.180  -->  00:07:50.250
ok so we can have more than one
180

180

00:07:50.250  -->  00:07:53.400
assertion in the test for example we may
181

181

00:07:53.400  -->  00:07:54.990
want to verify that the bank account
182

182

00:07:54.990  -->  00:07:57.210
balance instance variable now equals
183

183

00:07:57.210  -->  00:07:59.610
1200 let's go ahead and add an assertion
184

184

00:07:59.610  -->  00:08:02.610
to that below the first assertion so....
185

185

00:08:02.610  -->  00:08:16.830
....
186

186

00:08:16.830  -->  00:08:18.610
same thing happens we still got the
187

187

00:08:18.610  -->  00:08:20.490
deposit to completed
188

188

00:08:20.490  -->  00:08:22.410
successfully and then withdrawing get
189

189

00:08:22.410  -->  00:08:24.610
balance are failing as expected at this point
190

190

00:08:24.610  -->  00:08:26.220
in time because we haven't implemented
191

191

00:08:26.220  -->  00:08:29.110
them so every test method should be
192

192

00:08:29.110  -->  00:08:31.290
self-contained in other words what
193

193

00:08:31.290  -->  00:08:33.270
happens in one test method shouldn't
194

194

00:08:33.270  -->  00:08:35.070
depend on what happened in another test
195

195

00:08:35.070  -->  00:08:37.680
method so every test method should start
196

196

00:08:37.680  -->  00:08:40.140
fresh and be able to run independently
197

197

00:08:40.140  -->  00:08:43.120
of the other test methods and you saw
198

198

00:08:43.120  -->  00:08:45.810
earlier we were able to run
199

199

00:08:45.810  -->  00:08:49.620
the dummy test method independently and
200

200

00:08:49.620  -->  00:08:51.300
having said that though we can have instance
201

201

00:08:51.300  -->  00:08:54.250
variables in our test class depending on
202

202

00:08:54.250  -->  00:08:56.010
the code it may make sense
203

203

00:08:56.010  -->  00:08:58.020
to create a single instance of a class
204

204

00:08:58.020  -->  00:09:00.450
that we're testing that all the test
205

205

00:09:00.450  -->  00:09:03.300
methods use essentially when writing a
206

206

00:09:03.300  -->  00:09:05.430
test a question you want to ask is
207

207

00:09:05.430  -->  00:09:08.070
whether the test can run and pass on its
208

208

00:09:08.070  -->  00:09:09.910
own and the answer to that question
209

209

00:09:09.910  -->  00:09:11.350
should always be yes
210

210

00:09:11.350  -->  00:09:14.230
alright so in the case of the deposit
211

211

00:09:14.230  -->  00:09:16.230
test even though we can add more than
212

212

00:09:16.230  -->  00:09:18.270
one assert to the same test it's not
213

213

00:09:18.270  -->  00:09:21.220
best practice to do so the best practice
214

214

00:09:21.220  -->  00:09:23.980
is actually one test per test condition
215

215

00:09:23.980  -->  00:09:27.040
or assertion so given that let's copy
216

216

00:09:27.040  -->  00:09:29.040
the body of the deposit test method
217

217

00:09:29.040  -->  00:09:30.420
to the balance method
218

218

00:09:30.420  -->  00:09:31.860
ok let's go ahead and do that i'm going
219

219

00:09:31.860  -->  00:09:35.920
to copy that code and paste it into the
220

220

00:09:35.920  -->  00:09:38.010
balance overwriting the existing fail
221

221

00:09:38.010  -->  00:09:41.010
method what I'm going to do here is
222

222

00:09:41.010  -->  00:09:44.350
delete this second test which we now no longer
223

223

00:09:44.350  -->  00:09:46.980
need and that's because we're
224

224

00:09:46.980  -->  00:09:49.480
about to do that in the get balance test I'm
225

225

00:09:49.480  -->  00:09:51.060
going remove this first assertion in
226

226

00:09:51.060  -->  00:09:53.670
the get balance test because the one
227

227

00:09:53.670  -->  00:09:55.200
that we want to test here is the value
228

228

00:09:55.200  -->  00:09:57.750
getting back coming back from our get
229

229

00:09:57.750  -->  00:09:59.790
balance which is the value coming back
230

230

00:09:59.790  -->  00:10:02.790
from our account object so let's delete
231

231

00:10:02.790  -->  00:10:05.350
also the first part of line 25 since we
232

232

00:10:05.350  -->  00:10:07.560
no longer need to keep the value in a
233

233

00:10:07.560  -->  00:10:09.610
variable anymore unlike what we did on
234

234

00:10:09.610  -->  00:10:11.290
the in the deposit test at the top of
235

235

00:10:11.290  -->  00:10:14.070
the screen right let's run our test suite
236

236

00:10:14.070  -->  00:10:18.360
again we can see that the get balanced
237

237

00:10:18.360  -->  00:10:20.580
test and the deposit method are both
238

238

00:10:20.580  -->  00:10:22.560
working or tests are both
239

239

00:10:22.560  -->  00:10:24.750
working we've got two successes there and
240

240

00:10:24.750  -->  00:10:27.000
only one failure which is the withdraw
241

241

00:10:27.000  -->  00:10:28.990
test and that's correct again we haven't
242

242

00:10:28.990  -->  00:10:30.570
implemented that at this stage
243

243

00:10:30.570  -->  00:10:33.000
alright so let's say that we wanted to
244

244

00:10:33.000  -->  00:10:35.760
verify the value of the bank account
245

245

00:10:35.760  -->  00:10:38.520
deposit after calling the withdrawn method
246

246

00:10:38.520  -->  00:10:40.680
now doing so within the balance test
247

247

00:10:40.680  -->  00:10:42.990
method would be bad practice so we're
248

248

00:10:42.990  -->  00:10:45.040
gonna add another method for that but
249

249

00:10:45.040  -->  00:10:46.380
here's another good practice for you to
250

250

00:10:46.380  -->  00:10:48.870
follow test method name should give some
251

251

00:10:48.870  -->  00:10:51.300
indication of the actual condition
252

252

00:10:51.300  -->  00:10:53.580
they are testing so what I suggest we do
253

253

00:10:53.580  -->  00:10:55.800
here is we the get existing get balance
254

254

00:10:55.800  -->  00:10:58.360
method will actually change that and
255

255

00:10:58.360  -->  00:11:00.910
we'll put an underscore deposit on the
256

256

00:11:00.910  -->  00:11:03.000
end of it to indicate the type of tests
257

257

00:11:03.000  -->  00:11:05.550
were doing for that particular test and
258

258

00:11:05.550  -->  00:11:08.160
then let's add another method to test
259

259

00:11:08.160  -->  00:11:09.400
the withdraw
260

260

00:11:09.400  -->  00:11:11.230
function of our class i'm gonna go ahead and
261

261

00:11:11.230  -->  00:11:15.940
copy that entire method paste it i'm
262

262

00:11:15.940  -->  00:11:17.560
going to change the name where it's got
263

263

00:11:17.560  -->  00:11:23.200
deposit to withdraw now obviously this
264

264

00:11:23.200  -->  00:11:24.430
test will be a bit different in that we
265

265

00:11:24.430  -->  00:11:25.480
going to be calling the withdraw
266

266

00:11:25.480  -->  00:11:32.560
method instead of the deposit withdraw and
267

267

00:11:32.560  -->  00:11:33.970
the assertion here should be a different
268

268

00:11:33.970  -->  00:11:36.040
value the value should now be 800
269

269

00:11:36.040  -->  00:11:37.960
because we started on a thousand dollars
270

270

00:11:37.960  -->  00:11:40.480
taking two hundred dollars out so
271

271

00:11:40.480  -->  00:11:42.130
the balance that we should be asserting
272

272

00:11:42.130  -->  00:11:44.890
or checking against should be 800 like so
273

273

00:11:44.890  -->  00:11:47.920
let's run this again
274

274

00:11:47.920  -->  00:11:52.570
alright we can see now we've got 4 test
275

275

00:11:52.570  -->  00:11:55.240
showing and three succeeding and we can
276

276

00:11:55.240  -->  00:11:57.010
also now tell from the test method name
277

277

00:11:57.010  -->  00:11:58.210
showing down there on the bottom left
278

278

00:11:58.210  -->  00:12:00.280
hand corner of the screen exactly what
279

279

00:12:00.280  -->  00:12:02.740
each method was testing one is testing
280

280

00:12:02.740  -->  00:12:05.320
the deposit method ones verifying the
281

281

00:12:05.320  -->  00:12:07.420
balance after deposit and the others are
282

282

00:12:07.420  -->  00:12:09.280
verifying the balance after withdrawal
283

283

00:12:09.280  -->  00:12:12.400
so now that we've got to a few more
284

284

00:12:12.400  -->  00:12:15.040
tests lets actually try out the toggle above
285

285

00:12:15.040  -->  00:12:17.020
the test results i'm just going to come
286

286

00:12:17.020  -->  00:12:18.700
down over here and the size up the
287

287

00:12:18.700  -->  00:12:19.960
screen so you can see that little bit
288

288

00:12:19.960  -->  00:12:23.110
you see this ok button actually toggle
289

289

00:12:23.110  -->  00:12:25.120
which will show you either all the
290

290

00:12:25.120  -->  00:12:27.280
tests or only the ones that fail so click
291

291

00:12:27.280  -->  00:12:29.980
on that once is now showing only the ones
292

292

00:12:29.980  -->  00:12:32.020
that are failed and that can be useful
293

293

00:12:32.020  -->  00:12:34.360
when there's a large number of tests you
294

294

00:12:34.360  -->  00:12:35.680
can quickly just show the ones that are
295

295

00:12:35.680  -->  00:12:37.210
failing so you can start working on those
296

296

00:12:37.210  -->  00:12:39.790
and in addition if I click that again here
297

297

00:12:39.790  -->  00:12:41.530
to see all of them we can click on a
298

298

00:12:41.530  -->  00:12:43.090
particular method to see its results in
299

299

00:12:43.090  -->  00:12:45.760
the console that's results for a single
300

300

00:12:45.760  -->  00:12:49.240
one in the case of where they worked and
301

301

00:12:49.240  -->  00:12:51.460
there's been no errors we are not
302

302

00:12:51.460  -->  00:12:54.370
getting any output that would change if
303

303

00:12:54.370  -->  00:12:55.690
we've actually got output in the method
304

304

00:12:55.690  -->  00:12:57.700
but where there's just been in an assert
305

305

00:12:57.700  -->  00:12:59.230
and there's been no other output will
306

306

00:12:59.230  -->  00:13:01.420
see nothing for test that
307

307

00:13:01.420  -->  00:13:03.520
have succeeded in the case of one that
308

308

00:13:03.520  -->  00:13:05.590
that has failed will get the assertion in this
309

309

00:13:05.590  -->  00:13:07.960
case based on our failure method that we
310

310

00:13:07.960  -->  00:13:09.910
called and the text that was passed to
311

311

00:13:09.910  -->  00:13:12.970
that ok so let's add a method to the
312

312

00:13:12.970  -->  00:13:15.550
bank account class that returns true if
313

313

00:13:15.550  -->  00:13:17.650
you can as a checking account and false
314

314

00:13:17.650  -->  00:13:19.270
otherwise I'm going to go back to our
315

315

00:13:19.270  -->  00:13:21.940
bank account class so we could use a
316

316

00:13:21.940  -->  00:13:23.150
enum for these
317

317

00:13:23.150  -->  00:13:24.740
types of accounts but since you've
318

318

00:13:24.740  -->  00:13:26.900
only got 2 we are going to use
319

319

00:13:26.900  -->  00:13:29.690
an instant constant for both so let's go ahead
320

320

00:13:29.690  -->  00:13:31.970
and do that so I'm going to do...
321

321

00:13:31.970  -->  00:14:25.880
...
322

322

00:14:25.880  -->  00:14:29.630
so let's go back now and add a
323

323

00:14:29.630  -->  00:14:31.820
test for the is checking method to the
324

324

00:14:31.820  -->  00:14:34.790
bank account test class now notice now
325

325

00:14:34.790  -->  00:14:36.290
because we made changes to the
326

326

00:14:36.290  -->  00:14:38.030
constructor that we've got these errors
327

327

00:14:38.030  -->  00:14:39.650
in our various tests we can go ahead and
328

328

00:14:39.650  -->  00:14:41.870
change that and let's make the default
329

329

00:14:41.870  -->  00:14:43.730
type of account or that account for
330

330

00:14:43.730  -->  00:14:46.130
these calls all to be checking...
331

331

00:14:46.130  -->  00:14:54.380
...
332

332

00:14:54.380  -->  00:14:56.420
like so that's three now let's fix these
333

333

00:14:56.420  -->  00:14:56.990
errors
334

334

00:14:56.990  -->  00:14:59.900
alright we'll go ahead now and do ia
335

335

00:14:59.900  -->  00:15:06.050
test now for is checking.....
336

336

00:15:06.050  -->  00:15:18.170
...
337

337

00:15:18.170  -->  00:15:22.130
...so how do we actually check this well we
338

338

00:15:22.130  -->  00:15:24.760
copy the constructor line the
339

339

00:15:24.760  -->  00:15:27.410
line that actually creates a new object for
340

340

00:15:27.410  -->  00:15:29.000
us because that's going to be the same
341

341

00:15:29.000  -->  00:15:36.050
and we could do....
342

342

00:15:36.050  -->  00:15:39.050
....
343

343

00:15:39.050  -->  00:15:49.910
...
344

344

00:15:49.910  -->  00:15:51.680
when you're testing a value against true
345

345

00:15:51.680  -->  00:15:52.490
or false
346

346

00:15:52.490  -->  00:15:54.110
it's actually preferable instead
347

347

00:15:54.110  -->  00:15:57.010
of using assert equals to use assert true
348

348

00:15:57.010  -->  00:15:59.600
or assert false both are separate methods
349

349

00:15:59.600  -->  00:16:01.070
so.....
350

350

00:16:01.070  -->  00:16:15.680
...
351

351

00:16:15.680  -->  00:16:19.370
we can run that get the same result and
352

352

00:16:19.370  -->  00:16:20.510
likewise if you wanted to test whether
353

353

00:16:20.510  -->  00:16:21.700
something is false
354

354

00:16:21.700  -->  00:16:25.690
change assert true to assert false so
355

355

00:16:25.690  -->  00:16:27.140
when you actually go ahead clicking on
356

356

00:16:27.140  -->  00:16:28.690
these tests that have failes or
357

357

00:16:28.690  -->  00:16:30.050
succeeded
358

358

00:16:30.050  -->  00:16:31.640
it's not really very useful for small
359

359

00:16:31.640  -->  00:16:33.260
test Suites and tests that only got
360

360

00:16:33.260  -->  00:16:35.540
one assertion but when skimming the
361

361

00:16:35.540  -->  00:16:38.690
results of a large test suite coming up
362

362

00:16:38.690  -->  00:16:41.140
to here like so or if we've got tests
363

363

00:16:41.140  -->  00:16:42.380
that are performing more than one assert
364

364

00:16:42.380  -->  00:16:44.480
call then the messages can be really
365

365

00:16:44.480  -->  00:16:47.180
helpful keep in mind that sometimes j
366

366

00:16:47.180  -->  00:16:49.040
unit tests are being run as part of the
367

367

00:16:49.040  -->  00:16:51.680
build process and not manually so as
368

368

00:16:51.680  -->  00:16:53.750
part of that failed test results may be
369

369

00:16:53.750  -->  00:16:56.060
saved to a file or human might have to
370

370

00:16:56.060  -->  00:16:57.190
look at the results which could be
371

371

00:16:57.190  -->  00:16:59.200
numerous and that's when these messages
372

372

00:16:59.200  -->  00:17:01.370
can be really quite useful ones that
373

373

00:17:01.370  -->  00:17:04.270
we're currently added here to fail so in
374

374

00:17:04.270  -->  00:17:06.350
line with that what we can do is we can
375

375

00:17:06.350  -->  00:17:08.270
not only just leave the assert true like
376

376

00:17:08.270  -->  00:17:11.240
this can actually put in a message that
377

377

00:17:11.240  -->  00:17:14.360
will be it will pop up in the failure case
378

378

00:17:14.360  -->  00:17:20.540
so account...
379

379

00:17:20.540  -->  00:17:22.160
that would be the preferable way of
380

380

00:17:22.160  -->  00:17:23.420
writing that so from our point of view
381

381

00:17:23.420  -->  00:17:24.830
nothing will change it
382

382

00:17:24.830  -->  00:17:28.010
that's because with the assertions is
383

383

00:17:28.010  -->  00:17:30.720
returning true but if that didn't return true for
384

384

00:17:30.720  -->  00:17:32.340
some reason and we could simulate that
385

385

00:17:32.340  -->  00:17:34.610
by changing it to savings
386

386

00:17:34.610  -->  00:17:39.890
re running our test you can see now that
387

387

00:17:39.890  -->  00:17:42.210
we are getting the error the account is not
388

388

00:17:42.210  -->  00:17:44.240
a checking account because this
389

389

00:17:44.240  -->  00:17:46.980
assertion has failed so that again can be
390

390

00:17:46.980  -->  00:17:48.260
quite useful to put that back to what
391

391

00:17:48.260  -->  00:17:51.690
it was rerun it again so that
392

392

00:17:51.690  -->  00:17:53.580
its working so again it's part of a
393

393

00:17:53.580  -->  00:17:57.350
big software team or the unit tests
394

394

00:17:57.350  -->  00:17:58.710
are being performed as part of the build
395

395

00:17:58.710  -->  00:18:01.160
process these types of messages can be
396

396

00:18:01.160  -->  00:18:03.500
really useful to help a developer figure
397

397

00:18:03.500  -->  00:18:05.390
out what changes need to be made
398

398

00:18:05.390  -->  00:18:07.230
alright I'm going to finish the video
399

399

00:18:07.230  -->  00:18:09.020
here in the next video we start talking
400

400

00:18:09.020  -->  00:18:12.090
about some other j unit assertion
401

401

00:18:12.090  -->  00:18:14.360
methods and then move on to some more
402

402

00:18:14.360  -->  00:18:17.510
advanced junit testing techniques see you
403

403

00:18:17.510  -->  00:18:23.140
in the next video
