WEBVTT
1
1

00:00:05.550  -->  00:00:06.700
- [Tim] All right, so continuing on
2

2

00:00:06.700  -->  00:00:09.070
with our relative URIs example,
3

3

00:00:09.070  -->  00:00:10.550
we can add more relative URIs,
4

4

00:00:10.550  -->  00:00:11.900
like headed on the same host,
5

5

00:00:11.900  -->  00:00:14.850
and resolve them using the same baseURI,
6

6

00:00:14.850  -->  00:00:16.180
so let's have a go at doing that.
7

7

00:00:16.180  -->  00:00:18.410
So, at the moment we've got a baseURI,
8

8

00:00:18.410  -->  00:00:22.580
and we've got one URI here,
uri1, or the relative path,
9

9

00:00:23.630  -->  00:00:28.610
and let's actually convert
that into a single one,
10

10

00:00:28.610  -->  00:00:31.970
and let's actually convert
or add two additional ones.
11

11

00:00:31.970  -->  00:00:33.890
So the uri2, and three,
12

12

00:00:34.790  -->  00:00:36.190
and we'll make those a
little bit different.
13

13

00:00:36.190  -->  00:00:37.680
So for the second one,
14

14

00:00:37.680  -->  00:00:39.640
we'll make that as
props instead of phones,
15

15

00:00:39.640  -->  00:00:41.560
so we'll make that tvs,
16

16

00:00:42.850  -->  00:00:47.020
there we'll change the
query there to manufacturer.
17

17

00:00:48.670  -->  00:00:52.340
So percent manufacturer
is equal to samsung,
18

18

00:00:53.950  -->  00:00:55.680
and for the third one,
19

19

00:00:55.680  -->  00:00:59.680
let's a have a completely
separate a path there,
20

20

00:01:02.180  -->  00:01:06.350
in fact, change it completely
to /stores/locations,
21

21

00:01:07.840  -->  00:01:10.420
and add a query zip=12345,
22

22

00:01:12.180  -->  00:01:13.110
and then what we could
actually do here is,
23

23

00:01:13.110  -->  00:01:14.680
we got resolvedUri,
24

24

00:01:14.680  -->  00:01:18.850
let's change that to uri1
= baseUri.resolve(uri1),
25

25

00:01:20.740  -->  00:01:23.240
so we can now add more relative URIs,
26

26

00:01:23.240  -->  00:01:27.410
like headed on the same
host and resolve them, so,
27

27

00:01:28.710  -->  00:01:31.370
that to resolvedUri2, and three,
28

28

00:01:32.710  -->  00:01:35.460
and change this to two and three,
29

29

00:01:36.800  -->  00:01:40.930
and I'll change this code
now so it's pointing to url1
30

30

00:01:40.930  -->  00:01:43.340
and we'll make this one url1,
31

31

00:01:45.370  -->  00:01:46.860
and I'm just gonna get
rid of the other code
32

32

00:01:46.860  -->  00:01:49.300
that we commented out now,
33

33

00:01:49.300  -->  00:01:52.760
and let's do the same for
the other two as well.
34

34

00:01:52.760  -->  00:01:55.760
So, url2 now, and into resolvedUri2,
35

35

00:02:01.700  -->  00:02:03.280
with specific here,
36

36

00:02:05.950  -->  00:02:07.470
and we'll fix the third one up as well,
37

37

00:02:07.470  -->  00:02:11.300
as you can see there,
and that's resolvedUri3.
38

38

00:02:13.940  -->  00:02:18.100
All right, so let's actually
check that works; run that.
39

39

00:02:18.950  -->  00:02:19.990
So you can see we've got now,
40

40

00:02:19.990  -->  00:02:23.520
three URLs without any exceptions,
41

41

00:02:23.520  -->  00:02:25.950
and as I talked about in the last video,
42

42

00:02:25.950  -->  00:02:28.150
we can now change the server,
43

43

00:02:28.150  -->  00:02:29.800
and update only one line of code,
44

44

00:02:29.800  -->  00:02:32.670
rather than updating every
line that specifies a URI.
45

45

00:02:32.670  -->  00:02:34.650
So if you go back to our baseURI,
46

46

00:02:34.650  -->  00:02:37.250
currently that's set to myserver.com,
47

47

00:02:37.250  -->  00:02:40.750
well let's change that to mynewserver.com,
48

48

00:02:41.720  -->  00:02:42.810
run it again,
49

49

00:02:45.080  -->  00:02:46.630
and you can see the three URLs
50

50

00:02:46.630  -->  00:02:49.730
have now been successfully
changed to newserver.com
51

51

00:02:49.730  -->  00:02:52.750
and you've only changed
a single line of code.
52

52

00:02:52.750  -->  00:02:54.040
So in a real world application,
53

53

00:02:54.040  -->  00:02:56.930
you'll probably define
the baseURI's constant
54

54

00:02:56.930  -->  00:02:58.130
but I haven't done that here
55

55

00:02:58.130  -->  00:03:00.350
because the code is fairly trivial.
56

56

00:03:00.350  -->  00:03:02.430
The point here, obviously
again, as you saw that,
57

57

00:03:02.430  -->  00:03:04.890
I changed the server to mynewserver,
58

58

00:03:04.890  -->  00:03:06.730
updated only one line of code,
59

59

00:03:06.730  -->  00:03:08.360
rather than having to update
60

60

00:03:08.360  -->  00:03:11.570
every line that specifies a URI.
61

61

00:03:11.570  -->  00:03:13.490
So basically, when working
with many locations
62

62

00:03:13.490  -->  00:03:14.610
on the same host,
63

63

00:03:14.610  -->  00:03:18.370
it's far better to use
the base or a base URI
64

64

00:03:18.370  -->  00:03:19.960
with relative URIs.
65

65

00:03:21.030  -->  00:03:22.380
Now the other thing you can also do
66

66

00:03:22.380  -->  00:03:26.470
is determine a relative URI,
when you know the base URI,
67

67

00:03:26.470  -->  00:03:30.920
and the absolute URI, using
the URI.relativize method,
68

68

00:03:30.920  -->  00:03:32.750
so let's see how that works,
69

69

00:03:32.750  -->  00:03:35.030
and we're gonna add some code down here.
70

70

00:03:35.030  -->  00:03:38.120
So we're gonna do something like URI,
71

71

00:03:38.120  -->  00:03:42.290
we'll call it relativizedURI
= baseUri.relativize,
72

72

00:03:48.590  -->  00:03:50.770
than we pass in the resolved,
73

73

00:03:50.770  -->  00:03:54.890
we'll do a the resolvedUri2,
as a test there,
74

74

00:03:54.890  -->  00:03:56.730
and let's print that out.
75

75

00:03:56.730  -->  00:04:00.890
So we got ("Relative URI
= " + relativizeURI);.
76

76

00:04:05.730  -->  00:04:07.480
So actually run that.
77

77

00:04:09.820  -->  00:04:11.050
So I can see in this case here,
78

78

00:04:11.050  -->  00:04:15.070
we've got the Relative URI
which was basically the same URI
79

79

00:04:15.070  -->  00:04:16.820
we assigned to the variable Uri2,
80

80

00:04:16.820  -->  00:04:19.430
printing out on the screen there.
81

81

00:04:19.430  -->  00:04:22.370
All right, so that's enough
about working with URIs,
82

82

00:04:22.370  -->  00:04:24.940
let's now move on to
how to actually access
83

83

00:04:24.940  -->  00:04:27.210
a location on the Internet.
84

84

00:04:27.210  -->  00:04:29.990
Now earlier, I said that you use a URI
85

85

00:04:29.990  -->  00:04:32.600
until you actually want
to access a resource
86

86

00:04:32.600  -->  00:04:34.960
and you then convert it to a URL.
87

87

00:04:34.960  -->  00:04:37.470
Now, when working with web locations,
88

88

00:04:37.470  -->  00:04:41.570
you'll mainly use URIs
to build absolute URIs
89

89

00:04:41.570  -->  00:04:43.310
from relative ones.
90

90

00:04:43.310  -->  00:04:46.100
Now for our simple
examples moving forward,
91

91

00:04:46.100  -->  00:04:47.900
we're gonna use a URL right away,
92

92

00:04:47.900  -->  00:04:50.140
since we won't be doing
queries or building URIs
93

93

00:04:50.140  -->  00:04:52.420
based on user input.
94

94

00:04:52.420  -->  00:04:53.660
Now, there are a few ways
95

95

00:04:53.660  -->  00:04:56.030
to read a webpage using Java.
96

96

00:04:56.030  -->  00:04:58.100
Let's actually have a go
at reading the webpage
97

97

00:04:58.100  -->  00:05:00.640
like headed at example.org.
98

98

00:05:00.640  -->  00:05:04.480
If we actually go there
and take a quick look,
99

99

00:05:09.330  -->  00:05:11.410
you can see that's a very
simple example of webpage,
100

100

00:05:11.410  -->  00:05:13.360
and it's actually setup by IANA,
101

101

00:05:13.360  -->  00:05:15.890
which is the Internet
Assigned Numbers Authority.
102

102

00:05:15.890  -->  00:05:17.310
All right, so let's go back and have a go
103

103

00:05:17.310  -->  00:05:20.270
at doing that in IntelliJ.
104

104

00:05:20.270  -->  00:05:23.530
All right, so let's comment
out a lot of this code,
105

105

00:05:23.530  -->  00:05:25.870
and I suggest you comment
out rather than delete it,
106

106

00:05:25.870  -->  00:05:27.610
because a we're actually going to be
107

107

00:05:27.610  -->  00:05:30.190
using some of it back again in a minute.
108

108

00:05:30.190  -->  00:05:34.870
All right, so I'm just going
to comment that all out,
109

109

00:05:34.870  -->  00:05:39.030
and I'm also going to comment
out the URISyntaxException,
110

110

00:05:41.480  -->  00:05:44.580
and we're gonna come back
and add one line here,
111

111

00:05:44.580  -->  00:05:45.420
and that's going to be,
112

112

00:05:45.420  -->  00:05:49.580
URL url = new URL("http://example.org");.
113

113

00:05:56.580  -->  00:05:57.890
Simple enough, eh?
114

114

00:05:57.890  -->  00:05:59.550
So you basically just have
to use the constructor
115

115

00:05:59.550  -->  00:06:00.640
and pass the web addresses again,
116

116

00:06:00.640  -->  00:06:02.770
same were using on line 10.
117

117

00:06:02.770  -->  00:06:05.140
Now there are versions
of the URL constructor
118

118

00:06:05.140  -->  00:06:08.520
that accept a protocol,
a host, port, file,
119

119

00:06:08.520  -->  00:06:09.690
and other information,
120

120

00:06:09.690  -->  00:06:11.650
but when reading webpages, an API,
121

121

00:06:11.650  -->  00:06:13.190
or a service on the Internet,
122

122

00:06:13.190  -->  00:06:16.750
you usually just have to
provide a http web address,
123

123

00:06:16.750  -->  00:06:18.350
and include any required parameters
124

124

00:06:18.350  -->  00:06:21.310
that form part of the URL.
125

125

00:06:21.310  -->  00:06:24.430
Now since all URLs are also URIs,
126

126

00:06:24.430  -->  00:06:28.030
you can actually convert the URL to a URI,
127

127

00:06:28.030  -->  00:06:30.420
and call the methods that
return the components
128

128

00:06:30.420  -->  00:06:31.250
of a URI.
129

129

00:06:32.470  -->  00:06:35.740
Let's see, let's see what I mean by that.
130

130

00:06:35.740  -->  00:06:39.660
So we're gonna go URI,
uri, to accepted import,
131

131

00:06:41.610  -->  00:06:43.780
it's gonna be = url.,
132

132

00:06:45.660  -->  00:06:49.050
you see there's the
method there, .toURI(),
133

133

00:06:49.050  -->  00:06:50.350
and now that we've got that back in again,
134

134

00:06:50.350  -->  00:06:52.930
we need to uncomment the code
135

135

00:06:52.930  -->  00:06:56.750
that catches the URISyntaxException,
136

136

00:06:56.750  -->  00:06:59.270
and what we could do, well
in fact what I'm gonna do,
137

137

00:06:59.270  -->  00:07:01.100
is I'm gonna paste in the code
138

138

00:07:01.100  -->  00:07:02.940
that I deleted earlier on.
139

139

00:07:02.940  -->  00:07:04.700
So you can grab this from
the resources section
140

140

00:07:04.700  -->  00:07:05.870
of this video.
141

141

00:07:08.850  -->  00:07:12.810
So we'll come down here, paste that in.
142

142

00:07:12.810  -->  00:07:15.670
So basically we're converting
the URL back into a URI,
143

143

00:07:15.670  -->  00:07:19.320
and again we're able to then
call these specific methods
144

144

00:07:19.320  -->  00:07:21.530
for the URI to see what
they come back with.
145

145

00:07:21.530  -->  00:07:24.280
So let's actually try running it.
146

146

00:07:26.550  -->  00:07:29.610
Now you can see when I do that,
we can see that the Scheme
147

147

00:07:29.610  -->  00:07:32.540
there is http and the output,
console output window,
148

148

00:07:32.540  -->  00:07:35.630
the Scheme's specific path is the //
149

149

00:07:35.630  -->  00:07:37.950
or two forward slashes, example.org
150

150

00:07:37.950  -->  00:07:39.210
and the Host and Authority,
151

151

00:07:39.210  -->  00:07:42.510
are also example.org as you can see there.
152

152

00:07:42.510  -->  00:07:44.690
All right, so let's just
comment that out again now,
153

153

00:07:44.690  -->  00:07:46.420
and what we're going to do is,
154

154

00:07:46.420  -->  00:07:50.090
we're going to have a
go at reading directly
155

155

00:07:50.980  -->  00:07:54.510
from the URL using an InputStreamReader.
156

156

00:07:54.510  -->  00:07:58.180
Actually, I can comment
out the URI as well.
157

157

00:07:59.210  -->  00:08:01.700
So we're gonna start there
with a BufferedReader,
158

158

00:08:01.700  -->  00:08:04.290
so BufferedReader, inputStream,
159

159

00:08:07.220  -->  00:08:09.380
= new BufferedReader,
160

160

00:08:10.260  -->  00:08:13.020
then we're gonna do a
new InputStreamReader
161

161

00:08:13.020  -->  00:08:15.020
and it's url.openStream.
162

162

00:08:20.560  -->  00:08:23.570
Then we'll also need to
catch the IOExceptions,
163

163

00:08:23.570  -->  00:08:26.740
let's just clear up some of this code.
164

164

00:08:29.130  -->  00:08:31.960
So I'm gonna catch an IOException,
165

165

00:08:40.190  -->  00:08:44.350
and we'll get rid of the
MalFormed Syntax Exception,
166

166

00:08:45.930  -->  00:08:48.440
a MalFormed URL Exception rather.
167

167

00:08:48.440  -->  00:08:51.810
All right, so so far, we've
got the BufferedReader
168

168

00:08:51.810  -->  00:08:54.700
InputStream now, so let's
have a go at actually reading
169

169

00:08:54.700  -->  00:08:57.570
the entire output, so we're
gonna start now after that line,
170

170

00:08:57.570  -->  00:09:01.730
String line =, and initialise
it to an empty string,
171

171

00:09:03.770  -->  00:09:04.860
then add a while there,
172

172

00:09:04.860  -->  00:09:09.020
so while(line !=_null),
173

173

00:09:09.020  -->  00:09:13.190
then we're gonna do line
= inputStream.readLine[),
174

174

00:09:14.730  -->  00:09:17.400
then we got to output that line,
175

175

00:09:18.670  -->  00:09:20.130
then outside of the (mumbles),
176

176

00:09:20.130  -->  00:09:23.380
we're going to put inputStream.close[).
177

177

00:09:23.380  -->  00:09:25.550
That should be fairly
straight forward, for you,
178

178

00:09:25.550  -->  00:09:30.200
you can see that we're using
the URL.openStream() method
179

179

00:09:30.200  -->  00:09:31.040
on line 15 there,
180

180

00:09:31.040  -->  00:09:33.950
and that opens a connection to the URL,
181

181

00:09:33.950  -->  00:09:35.130
and underneath the covers,
182

182

00:09:35.130  -->  00:09:37.520
it's gonna be doing all
the loading and stuff,
183

183

00:09:37.520  -->  00:09:38.860
like creating a socket,
184

184

00:09:38.860  -->  00:09:40.970
because we're using a high level API,
185

185

00:09:40.970  -->  00:09:43.780
we're being abstracted away
from the need to do that.
186

186

00:09:43.780  -->  00:09:46.410
So the method actually
returns an InputStream
187

187

00:09:46.410  -->  00:09:48.580
that we can use to read, as you can see,
188

188

00:09:48.580  -->  00:09:50.820
we're using that to read from it,
189

189

00:09:50.820  -->  00:09:54.200
the code, of our code
on line 19, reading what
190

190

00:09:54.200  -->  00:09:56.630
until we actually basically
get to no more output,
191

191

00:09:56.630  -->  00:09:59.050
and we just are outputting
that to the console,
192

192

00:09:59.050  -->  00:10:01.140
and then we're closing
the string on line 22,
193

193

00:10:01.140  -->  00:10:03.520
once we're actually done with it.
194

194

00:10:03.520  -->  00:10:05.950
So we're wrapping the InputStream,
195

195

00:10:05.950  -->  00:10:08.940
which is what this url.openStream returns,
196

196

00:10:08.940  -->  00:10:12.260
and InputStreamReader, and
then we're wrapping that,
197

197

00:10:12.260  -->  00:10:14.190
in a BufferedReader as well.
198

198

00:10:14.190  -->  00:10:16.100
So I think of the url.openStream method
199

199

00:10:16.100  -->  00:10:19.520
as a convenience method that's
actually performing two steps
200

200

00:10:19.520  -->  00:10:21.070
that you can do individually.
201

201

00:10:21.070  -->  00:10:23.610
So you can open a connection to a url,
202

202

00:10:23.610  -->  00:10:26.210
then use the url.openConnection method,
203

203

00:10:26.210  -->  00:10:28.360
and that returns a URLConnection,
204

204

00:10:28.360  -->  00:10:29.740
and we'll look at that in a minute.
205

205

00:10:29.740  -->  00:10:32.540
Then you can get an InputStream
from the URLConnection,
206

206

00:10:32.540  -->  00:10:34.740
but in this case, the
url.openStream method,
207

207

00:10:34.740  -->  00:10:38.740
as a convenience, is
performing those two steps,
208

208

00:10:38.740  -->  00:10:40.120
and again, once we get to that point,
209

209

00:10:40.120  -->  00:10:42.690
we can use a BufferedReader
as we would normally use it
210

210

00:10:42.690  -->  00:10:44.120
in an application.
211

211

00:10:44.120  -->  00:10:46.700
So if we actually run this now,
212

212

00:10:49.670  -->  00:10:51.820
you can see that we've got the html,
213

213

00:10:51.820  -->  00:10:54.650
and there's some style sheet code there,
214

214

00:10:54.650  -->  00:10:56.340
there's the title, et cetera,
215

215

00:10:56.340  -->  00:10:59.170
some CSS, and then as we scroll down,
216

216

00:10:59.170  -->  00:11:00.620
we can see the actual text
217

217

00:11:00.620  -->  00:11:05.230
that is in the body tag
section of the html document,
218

218

00:11:05.230  -->  00:11:07.780
so that's worked nicely.
219

219

00:11:07.780  -->  00:11:11.390
Now depending on your
previous experience with html,
220

220

00:11:11.390  -->  00:11:14.510
that may or may not be
what you expected to see.
221

221

00:11:14.510  -->  00:11:16.550
So maybe you're expecting
to see what you saw
222

222

00:11:16.550  -->  00:11:18.100
when we visited the webpage,
223

223

00:11:18.100  -->  00:11:20.130
but when you're using your browser,
224

224

00:11:20.130  -->  00:11:22.950
it's really the html data
or the file that's returned,
225

225

00:11:22.950  -->  00:11:27.510
that we can see in the console
output here in IntelliJ.
226

226

00:11:27.510  -->  00:11:29.590
So the browser is actually rendering that
227

227

00:11:29.590  -->  00:11:30.690
based on that input,
228

228

00:11:30.690  -->  00:11:33.630
so it's reading the file and
rendering the style information
229

229

00:11:33.630  -->  00:11:35.460
metadata, and other information.
230

230

00:11:35.460  -->  00:11:38.270
So in other words, it's spooling
a more user friendly view,
231

231

00:11:38.270  -->  00:11:40.760
of what we can see in
the console output here.
232

232

00:11:40.760  -->  00:11:42.690
But when we're reading
a webpage pragmatically
233

233

00:11:42.690  -->  00:11:45.320
as we've done here, we're
just getting the raw html,
234

234

00:11:45.320  -->  00:11:48.470
so your application would
then need to pass the html
235

235

00:11:48.470  -->  00:11:51.720
and pick out specific
tags or other information
236

236

00:11:51.720  -->  00:11:54.420
depending on what you're
trying to achieve.
237

237

00:11:54.420  -->  00:11:55.260
So what we've done there,
238

238

00:11:55.260  -->  00:11:57.320
well that's one way to read a webpage.
239

239

00:11:57.320  -->  00:12:01.200
The second way is to use
the URLConnection class,
240

240

00:12:01.200  -->  00:12:02.160
so let's actually have a go at
241

241

00:12:02.160  -->  00:12:04.810
seeing the other way of doing it.
242

242

00:12:04.810  -->  00:12:07.580
So let's actually just
comment out this code for now.
243

243

00:12:07.580  -->  00:12:08.820
All the code we'll add
into the InputStream
244

244

00:12:08.820  -->  00:12:10.400
while doing things,
245

245

00:12:11.490  -->  00:12:15.230
and what we're gonna do
instead, is after the URL,
246

246

00:12:15.230  -->  00:12:16.070
we're gonna put,
247

247

00:12:16.070  -->  00:12:20.230
URLConnection urlConnection
= url.openConnection[),
248

248

00:12:24.560  -->  00:12:27.390
and then we'll also want to catch,
249

249

00:12:29.250  -->  00:12:31.250
a MalformedURLException,
250

250

00:12:39.980  -->  00:12:43.690
and we'll just add some code
for the catch block for that.
251

251

00:12:43.690  -->  00:12:44.520
So if I say good,
252

252

00:12:44.520  -->  00:12:47.060
we've actually created
a URLConnection object,
253

253

00:12:47.060  -->  00:12:49.640
now we want to call the
URLConnection.connect method
254

254

00:12:49.640  -->  00:12:51.590
to connect to the URL.
255

255

00:12:51.590  -->  00:12:54.780
So go ahead and do that after that line,
256

256

00:12:54.780  -->  00:12:57.450
by typing urlConnection.connect.
257

257

00:12:59.610  -->  00:13:02.570
So you might be wondering here,
why two steps are required.
258

258

00:13:02.570  -->  00:13:05.360
So why do we have to call openConnection,
259

259

00:13:05.360  -->  00:13:07.060
which we're doing on line 13,
260

260

00:13:07.060  -->  00:13:10.290
and then the connect method on line 14?
261

261

00:13:10.290  -->  00:13:12.460
Well that's because
the openConnection call
262

262

00:13:12.460  -->  00:13:14.490
doesn't connect to the URL,
263

263

00:13:14.490  -->  00:13:17.020
it returns an openConnection instance,
264

264

00:13:17.020  -->  00:13:18.320
and you can use the instance
265

265

00:13:18.320  -->  00:13:20.070
then to configure the connection.
266

266

00:13:20.070  -->  00:13:22.480
You can say whether you
want to read or write
267

267

00:13:22.480  -->  00:13:25.070
to the connection with
a catch it will be used,
268

268

00:13:25.070  -->  00:13:27.010
if that's available for
the protocol you're using,
269

269

00:13:27.010  -->  00:13:28.920
so on and so forth.
270

270

00:13:28.920  -->  00:13:30.580
So in other words, it
gives you a chance to send
271

271

00:13:30.580  -->  00:13:34.370
any configuration settings
that will ultimately influence
272

272

00:13:34.370  -->  00:13:36.950
how the connection's made.
273

273

00:13:36.950  -->  00:13:38.170
So, you might call a few methods
274

274

00:13:38.170  -->  00:13:40.050
in between the openConnection call
275

275

00:13:40.050  -->  00:13:42.210
and the connect method call.
276

276

00:13:42.210  -->  00:13:45.420
Now, by default, you can
only read from a connection,
277

277

00:13:45.420  -->  00:13:47.530
and if you want to write to a connection,
278

278

00:13:47.530  -->  00:13:51.910
you have to call the
URLConnection.setDoOutput method
279

279

00:13:51.910  -->  00:13:54.220
before you can call the connect method.
280

280

00:13:54.220  -->  00:13:55.050
So let's actually do that,
281

281

00:13:55.050  -->  00:13:57.450
just so that we can figure in something,
282

282

00:13:57.450  -->  00:14:00.690
so do that after the openConnection call,
283

283

00:14:00.690  -->  00:14:04.860
to put something like
urlConnection.setDoOutput[True].
284

284

00:14:08.640  -->  00:14:10.670
All right, so we've
called the connect method,
285

285

00:14:10.670  -->  00:14:12.890
trying to set values on
the connection though,
286

286

00:14:12.890  -->  00:14:14.180
will result in an error.
287

287

00:14:14.180  -->  00:14:15.860
Now, a thing to keep in mind here,
288

288

00:14:15.860  -->  00:14:18.460
is that once you've actually
called the connect method,
289

289

00:14:18.460  -->  00:14:20.200
and you can see that on line 15,
290

290

00:14:20.200  -->  00:14:21.370
once you try to set values
291

291

00:14:21.370  -->  00:14:23.250
on the connection after that call,
292

292

00:14:23.250  -->  00:14:25.260
and it will result in an error,
293

293

00:14:25.260  -->  00:14:26.090
and the point is here is,
294

294

00:14:26.090  -->  00:14:28.120
to make sure you do any configuration
295

295

00:14:28.120  -->  00:14:30.110
after opening the connection
296

296

00:14:30.110  -->  00:14:33.110
but before calling the connect method.
297

297

00:14:33.110  -->  00:14:35.760
All right, so we're using
the URLConnection class,
298

298

00:14:35.760  -->  00:14:37.140
the URL you're connecting to,
299

299

00:14:37.140  -->  00:14:38.600
it doesn't have to be a webpage
300

300

00:14:38.600  -->  00:14:40.770
or a web location, and
you don't have to be
301

301

00:14:40.770  -->  00:14:42.840
using the http scheme,
302

302

00:14:42.840  -->  00:14:45.280
but to many of the methods in the class,
303

303

00:14:45.280  -->  00:14:48.720
already applicable to HTTP connections,
304

304

00:14:48.720  -->  00:14:50.650
and as you'll see in the next video,
305

305

00:14:50.650  -->  00:14:53.540
you actually want to use a
subclass of URLConnection
306

306

00:14:53.540  -->  00:14:55.460
when you're connecting to a web URL,
307

307

00:14:55.460  -->  00:14:58.180
rather than using the
URLConnection directly.
308

308

00:14:58.180  -->  00:14:59.740
But I think it's good to know how to use
309

309

00:14:59.740  -->  00:15:01.150
the more generic class,
310

310

00:15:01.150  -->  00:15:04.080
so let's actually read that webpage.
311

311

00:15:04.080  -->  00:15:06.280
We're gonna connect, and
then what we're gonna do is,
312

312

00:15:06.280  -->  00:15:09.450
change, we'll undo this code again,
313

313

00:15:09.450  -->  00:15:12.470
and we'll just make a few little changes.
314

314

00:15:12.470  -->  00:15:13.350
This time it's gonna be,
315

315

00:15:13.350  -->  00:15:16.450
BufferedReader.InputStream
= new BufferedReader,
316

316

00:15:16.450  -->  00:15:18.820
then we want this new InputStreamReader
317

317

00:15:18.820  -->  00:15:21.520
but instead of url.openStream now,
318

318

00:15:21.520  -->  00:15:23.330
instead what we'll do there is,
319

319

00:15:23.330  -->  00:15:26.740
we'll put a urlConnection.getInputStream.
320

320

00:15:29.220  -->  00:15:31.120
The rest of the code
there, to retrieve it,
321

321

00:15:31.120  -->  00:15:32.900
should be the same.
322

322

00:15:32.900  -->  00:15:34.550
So basically the code is very similar
323

323

00:15:34.550  -->  00:15:37.160
than when we read directly
using an InputStreamReader
324

324

00:15:37.160  -->  00:15:39.380
except for the basic
325

325

00:15:39.380  -->  00:15:41.960
of the urlConnection.getInputStream
method call
326

326

00:15:41.960  -->  00:15:43.610
on line 20,
327

327

00:15:43.610  -->  00:15:46.030
and other than that,
it's pretty identical,
328

328

00:15:46.030  -->  00:15:48.860
and if you actually run that code,
329

329

00:15:50.300  -->  00:15:51.830
you can see they got the same results,
330

330

00:15:51.830  -->  00:15:55.410
the html are correctly downloaded.
331

331

00:15:55.410  -->  00:15:57.090
All right, so let's end the video here.
332

332

00:15:57.090  -->  00:16:00.630
In the next video, I will talk
more about the URLConnection
333

333

00:16:00.630  -->  00:16:03.700
and how you can do more
than just read a webpage,
334

334

00:16:03.700  -->  00:16:05.450
so see you in the next video.
