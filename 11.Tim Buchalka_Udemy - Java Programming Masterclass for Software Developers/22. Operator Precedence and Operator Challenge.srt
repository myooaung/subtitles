1
1

00:00:05,221  -->  00:00:06,600
<v ->Well so let's have a look at a</v>
2

2

00:00:06,600  -->  00:00:09,420
useful web page on Oracle's website
3

3

00:00:09,420  -->  00:00:10,960
to give you a summary of the operators
4

4

00:00:10,960  -->  00:00:13,180
as we've discussed in this section of the course.
5

5

00:00:13,180  -->  00:00:15,010
So we're gonna go to a web browser
6

6

00:00:15,010  -->  00:00:16,630
and we're just gonna do a search for
7

7

00:00:16,630  -->  00:00:19,523
summary of operators Java.
8

8

00:00:21,260  -->  00:00:23,640
So the link is in the resources section of this video
9

9

00:00:23,640  -->  00:00:25,570
and the one we want down here is the second one
10

10

00:00:25,570  -->  00:00:26,710
summary of operators and it's the
11

11

00:00:26,710  -->  00:00:29,830
docs.oracle.com link we want, so I'm gonna click on that
12

12

00:00:31,004  -->  00:00:33,100
and this will give us a handy list of the operators
13

13

00:00:33,100  -->  00:00:35,190
that are available in Java
14

14

00:00:35,190  -->  00:00:36,340
and you can see we pretty well
15

15

00:00:36,340  -->  00:00:38,330
talked about all of those operators now.
16

16

00:00:38,330  -->  00:00:40,620
One that we haven't talked about at this stage
17

17

00:00:40,620  -->  00:00:41,620
lets scroll down and have a look
18

18

00:00:41,620  -->  00:00:43,820
is the Type Comparison the instanceof
19

19

00:00:44,865  -->  00:00:45,840
and there's a reason for that
20

20

00:00:45,840  -->  00:00:47,500
and that's because that really needs you
21

21

00:00:47,500  -->  00:00:49,110
to understand the concept of classes
22

22

00:00:49,110  -->  00:00:50,820
so we'll be talking more about instanceof
23

23

00:00:50,820  -->  00:00:52,450
when we get to the stage of
24

24

00:00:52,450  -->  00:00:54,340
working on classes in the course.
25

25

00:00:54,340  -->  00:00:57,450
And the other ones are the Bitwise and Bit Shift Operators
26

26

00:00:57,450  -->  00:01:00,330
these are ones that are very rarely used in Java
27

27

00:01:00,330  -->  00:01:02,750
the important ones are the conditional operators
28

28

00:01:02,750  -->  00:01:04,320
conditional AND and conditional OR
29

29

00:01:04,320  -->  00:01:07,430
which we've talked about at length in this course.
30

30

00:01:07,430  -->  00:01:09,730
So I say it's a handy list, I suggest you
31

31

00:01:09,730  -->  00:01:11,760
access that if you want to find out more information
32

32

00:01:11,760  -->  00:01:13,370
but you can see that we've pretty well come through
33

33

00:01:13,370  -->  00:01:15,070
and dealt with most of these
34

34

00:01:15,070  -->  00:01:17,290
as we've gone through the course.
35

35

00:01:17,290  -->  00:01:19,220
Alright, next I want to go back
36

36

00:01:19,220  -->  00:01:21,000
and I'm gonna open a new tab here
37

37

00:01:22,080  -->  00:01:25,380
and I'm gonna do a search for java operator precedence table
38

38

00:01:31,582  -->  00:01:35,970
and this first link here, this cs.bilkent.edu.tr
39

39

00:01:35,970  -->  00:01:36,820
we click on that.
40

40

00:01:39,290  -->  00:01:43,620
That gives us a handy list of the precedence table in Java.
41

41

00:01:43,620  -->  00:01:45,190
So what that means is it shows you
42

42

00:01:45,190  -->  00:01:47,750
how Java decides the priority
43

43

00:01:47,750  -->  00:01:50,490
of evaluating things in an expression.
44

44

00:01:50,490  -->  00:01:53,620
So note for example that the highest precedence, 15
45

45

00:01:53,620  -->  00:01:55,960
has parentheses and that's so therefore
46

46

00:01:55,960  -->  00:01:58,150
that's a way to ensure that your condition
47

47

00:01:58,150  -->  00:02:00,670
overrides standard precedence rules
48

48

00:02:00,670  -->  00:02:03,670
for things like you see, in say precedence 12
49

49

00:02:03,670  -->  00:02:05,700
which is multiplication, division and modulus
50

50

00:02:05,700  -->  00:02:09,110
and precedence 11, which is addition and subtraction.
51

51

00:02:09,110  -->  00:02:11,640
So a bit of a hint there to keep that in mind
52

52

00:02:11,640  -->  00:02:12,880
when you get to the stage of
53

53

00:02:12,880  -->  00:02:15,390
solving the challenge which I'm gonna talk about.
54

54

00:02:15,390  -->  00:02:17,310
So you can see that multiplication, division
55

55

00:02:17,310  -->  00:02:19,590
and the modulus, the remainder operator
56

56

00:02:19,590  -->  00:02:23,580
have a higher precedence than do addition and subtraction
57

57

00:02:23,580  -->  00:02:25,900
and that means that you may not get the results you expect
58

58

00:02:25,900  -->  00:02:28,030
using those operators depending on
59

59

00:02:28,030  -->  00:02:31,120
the precedence and the order that you're doing things.
60

60

00:02:31,120  -->  00:02:32,630
Now for now keep in mind
61

61

00:02:32,630  -->  00:02:35,750
that you can use parentheses to override other things
62

62

00:02:35,750  -->  00:02:38,000
like multiplication and sort of to force
63

63

00:02:38,000  -->  00:02:39,350
the condition to be evaluated
64

64

00:02:39,350  -->  00:02:41,150
in the order that you think it would be.
65

65

00:02:41,150  -->  00:02:43,220
So this is one reason why it's often
66

66

00:02:43,220  -->  00:02:46,640
a good idea to put parentheses around conditions.
67

67

00:02:46,640  -->  00:02:49,350
And if you get stuck come back and refer to this table
68

68

00:02:49,350  -->  00:02:50,450
when you're going through the challenge
69

69

00:02:50,450  -->  00:02:53,020
and I'll actually, my solution to the challenge
70

70

00:02:53,020  -->  00:02:55,370
I'll be talking more about operator precedence.
71

71

00:02:57,576  -->  00:03:00,210
Alright so let's test what you've learnt about operators
72

72

00:03:00,210  -->  00:03:02,210
with this operator challenge.
73

73

00:03:02,210  -->  00:03:04,340
There's seven steps to go through this challenge
74

74

00:03:04,340  -->  00:03:07,730
so you might want to have this video paused on this section
75

75

00:03:07,730  -->  00:03:09,610
while you're going through and refer back to this
76

76

00:03:09,610  -->  00:03:11,300
as you're completing the challenge.
77

77

00:03:11,300  -->  00:03:14,270
Step number one is to create a double variable
78

78

00:03:14,270  -->  00:03:16,253
with a value of 20.00.
79

79

00:03:17,350  -->  00:03:20,440
Step two create a second variable of type double
80

80

00:03:20,440  -->  00:03:22,233
with a value 80.00.
81

81

00:03:23,440  -->  00:03:25,210
Step three is to add both numbers together
82

82

00:03:25,210  -->  00:03:28,260
then multiply by 100.00.
83

83

00:03:28,260  -->  00:03:30,530
Step 4 use the remainder operator
84

84

00:03:30,530  -->  00:03:32,340
to figure out what the remainder
85

85

00:03:32,340  -->  00:03:36,823
from the result of the operation in step three and 40.00 is.
86

86

00:03:37,870  -->  00:03:39,020
Now we have used the modulus
87

87

00:03:39,020  -->  00:03:41,820
or remainder operator on ints in this course
88

88

00:03:41,820  -->  00:03:43,320
but I'm confirming here
89

89

00:03:43,320  -->  00:03:45,530
you can also do the same for double
90

90

00:03:45,530  -->  00:03:47,230
a variable of type double.
91

91

00:03:47,230  -->  00:03:49,840
Step 5 create a boolean variable
92

92

00:03:49,840  -->  00:03:51,280
that assigns the value true
93

93

00:03:51,280  -->  00:03:55,610
if the remainder in step four is 0.00
94

94

00:03:55,610  -->  00:03:57,853
or false if it's not zero.
95

95

00:03:59,100  -->  00:04:01,330
Step 6 output the boolean variable
96

96

00:04:01,330  -->  00:04:03,070
just to see what the result is
97

97

00:04:03,070  -->  00:04:05,700
and step seven write an if-then statement
98

98

00:04:05,700  -->  00:04:08,510
that displays a message 'got some remainder'
99

99

00:04:08,510  -->  00:04:12,450
if the boolean in step five is not true.
100

100

00:04:12,450  -->  00:04:14,740
Don't be surprised if you see output for this step
101

101

00:04:14,740  -->  00:04:17,260
where you may expect it not to show
102

102

00:04:17,260  -->  00:04:19,960
I'll explain that in my solution.
103

103

00:04:19,960  -->  00:04:21,390
So pause the video and try it out
104

104

00:04:21,390  -->  00:04:23,470
and come back and I'll go through my solution
105

105

00:04:23,470  -->  00:04:25,180
and I'm gonna show you your potential issue
106

106

00:04:25,180  -->  00:04:27,340
you may come across with operator precedence
107

107

00:04:27,340  -->  00:04:28,650
in my solution as well as I'm sort of
108

108

00:04:28,650  -->  00:04:30,320
giving the game away a little bit there
109

109

00:04:30,320  -->  00:04:32,370
but see how you go, pause the video now
110

110

00:04:32,370  -->  00:04:34,120
and I'll see you when you get back.
111

111

00:04:36,200  -->  00:04:37,390
Alright so welcome back
112

112

00:04:37,390  -->  00:04:39,220
hopefully you managed to finish the challenge
113

113

00:04:39,220  -->  00:04:40,530
or get a lot of it done.
114

114

00:04:40,530  -->  00:04:42,800
So let's step back over to our code again
115

115

00:04:42,800  -->  00:04:44,683
and start solving the challenge.
116

116

00:04:45,820  -->  00:04:48,823
Firstly we're gonna type double myFirstValue
117

117

00:04:51,270  -->  00:04:55,050
which is my first variable, we assign that to 20.00
118

118

00:04:55,980  -->  00:04:58,210
and we'll put a d on the end, just to be specific
119

119

00:04:58,210  -->  00:05:01,000
and for the second variable, it was my second value
120

120

00:05:01,000  -->  00:05:02,070
will be what I'm calling it
121

121

00:05:02,070  -->  00:05:04,340
but of course this can be anything you like
122

122

00:05:04,340  -->  00:05:06,323
we assign that to the value of 80.00.
123

123

00:05:08,141  -->  00:05:09,910
As step three called for us
124

124

00:05:09,910  -->  00:05:13,310
to add both numbers together and multiply them by 100
125

125

00:05:13,310  -->  00:05:15,260
so let's do that, I'm gonna type double
126

126

00:05:16,620  -->  00:05:19,310
I'll call this one myValuesTotal
127

127

00:05:19,310  -->  00:05:24,310
is equal to myFirstValue plus mySecondValue
128

128

00:05:25,040  -->  00:05:27,953
multiplied by 100.00.
129

129

00:05:29,855  -->  00:05:32,560
Alright so step four we need to calculate the remainder
130

130

00:05:32,560  -->  00:05:34,453
that's gonna be double theRemainder
131

131

00:05:39,021  -->  00:05:41,104
is equal to myValuesTotal
132

132

00:05:42,355  -->  00:05:44,350
we use the remainder or modulus operator
133

133

00:05:44,350  -->  00:05:47,563
so it's the percent sign and was 40.00d
134

134

00:05:50,560  -->  00:05:52,210
and this is what I'll do there on
135

135

00:05:53,326  -->  00:05:56,100
add a line after the myValuesTotal definition
136

136

00:05:56,100  -->  00:05:57,710
let's just print out the value.
137

137

00:05:57,710  -->  00:06:02,710
So we say myValuesTotal is equal to plus myValuesTotal.
138

138

00:06:05,892  -->  00:06:08,260
Right so theRemainder let's also print that out
139

139

00:06:10,220  -->  00:06:11,610
I'm not sure whether I told you to do that
140

140

00:06:11,610  -->  00:06:12,570
I don't think I told you to do that
141

141

00:06:12,570  -->  00:06:14,170
but it doesn't hurt to print these things out
142

142

00:06:14,170  -->  00:06:15,910
whether you did or not doesn't matter
143

143

00:06:15,910  -->  00:06:20,910
so theRemainder is equal to plus theRemainder.
144

144

00:06:22,928  -->  00:06:26,310
Right so moving on next we need to create a boolean variable
145

145

00:06:26,310  -->  00:06:30,230
that is true if the remainder was 0 or false otherwise
146

146

00:06:30,230  -->  00:06:32,331
we're using the ternary operator
147

147

00:06:32,331  -->  00:06:33,610
you didn't have to use a ternary operator
148

148

00:06:33,610  -->  00:06:36,410
but hopefully the hint there was to use it
149

149

00:06:36,410  -->  00:06:38,870
because we just talked about it in the last video.
150

150

00:06:38,870  -->  00:06:41,797
So boolean isNoRemainder is equal to
151

151

00:06:45,880  -->  00:06:48,450
and in parentheses, which were optional
152

152

00:06:48,450  -->  00:06:51,090
theRemainder is equal to zero
153

153

00:06:51,090  -->  00:06:54,730
we're using the equals to operator not this hamon operator
154

154

00:06:54,730  -->  00:06:57,840
then we put a question mark and our true answer
155

155

00:06:57,840  -->  00:06:59,500
the value we want signed, in other words
156

156

00:06:59,500  -->  00:07:04,020
if the expression the remainder is equal to 0 is true
157

157

00:07:04,020  -->  00:07:07,523
a colon, false if it's not equal to 0.
158

158

00:07:08,930  -->  00:07:11,524
And then we're going to print that out
159

159

00:07:11,524  -->  00:07:16,524
isNoRemainder equals plus isNoRemainder
160

160

00:07:19,683  -->  00:07:21,540
alright go down that a bit so you can see it
161

161

00:07:21,540  -->  00:07:24,500
and the last thing I'm gonna do is do an if-then statement
162

162

00:07:24,500  -->  00:07:28,940
if parentheses, I wanted to test if the
163

163

00:07:28,940  -->  00:07:32,120
boolean we've defined on line 89--
164

164

00:07:32,120  -->  00:07:33,280
So you could do that a number of ways
165

165

00:07:33,280  -->  00:07:34,960
I'm just going to use the not operator
166

166

00:07:34,960  -->  00:07:38,220
bearing in mind we can do it a few other ways
167

167

00:07:38,220  -->  00:07:39,430
any of those ways is valid
168

168

00:07:39,430  -->  00:07:42,260
so long as it's actually successfully testing for false.
169

169

00:07:42,260  -->  00:07:44,481
So if it's not isNoRemainder
170

170

00:07:44,481  -->  00:07:46,550
so we're testing to see whether it's false
171

171

00:07:46,550  -->  00:07:48,610
we're gonna print out a message if it's false
172

172

00:07:48,610  -->  00:07:53,610
got some remainder, alright so that's our challenge
173

173

00:07:53,960  -->  00:07:55,940
or that's my challenge solution.
174

174

00:07:55,940  -->  00:07:57,670
Right so looking at the code
175

175

00:07:57,670  -->  00:08:00,560
we've got our assignment of 20 on line 83
176

176

00:08:00,560  -->  00:08:04,890
and 80 on line 84, so line 85 we've got
177

177

00:08:04,890  -->  00:08:07,396
FirstValue plus mySecondValue
178

178

00:08:07,396  -->  00:08:10,400
so it's 20 plus 80, is 100.00
179

179

00:08:10,400  -->  00:08:12,170
multiplied by 100.00
180

180

00:08:13,005  -->  00:08:15,410
that should give us the answer 10,000 right?
181

181

00:08:15,410  -->  00:08:19,240
So therefore the remainder 10,000 divided by 40
182

182

00:08:19,240  -->  00:08:21,150
which we're testing on line 87
183

183

00:08:21,150  -->  00:08:23,110
should give us no remainder
184

184

00:08:23,110  -->  00:08:27,330
because 40 goes into 10,000 exactly 250 times.
185

185

00:08:27,330  -->  00:08:29,968
So technically if we run this code we should see
186

186

00:08:29,968  -->  00:08:32,440
myValuesTotal set to 10,000
187

187

00:08:32,440  -->  00:08:34,760
we should see theRemainder set to zero
188

188

00:08:34,760  -->  00:08:37,780
we should see isNoRemainder set to true
189

189

00:08:37,780  -->  00:08:40,140
and then the if-then statement on line 91
190

190

00:08:40,140  -->  00:08:43,710
shouldn't be executed because there isn't any remainder
191

191

00:08:43,710  -->  00:08:46,360
and what we're returning was assigning the value true
192

192

00:08:46,360  -->  00:08:49,300
to our variable if there isn't any remainder.
193

193

00:08:49,300  -->  00:08:51,470
Alright so let's run this and see what happens
194

194

00:08:54,910  -->  00:08:56,940
and we'll just put this low window up a bit
195

195

00:08:56,940  -->  00:08:58,270
so you can see a bit more
196

196

00:08:58,270  -->  00:08:59,983
so what's actually happened there was
197

197

00:08:59,983  -->  00:09:04,440
myValuesTotal printing 8,020 and we got 20 as remainder
198

198

00:09:04,440  -->  00:09:07,320
and therefore our isNoRemainder was set to false
199

199

00:09:07,320  -->  00:09:08,700
so pretty well looking at the code
200

200

00:09:08,700  -->  00:09:11,370
what we thought wouldn't happen has actually happened
201

201

00:09:11,370  -->  00:09:13,763
so why is that doing what it's doing?
202

202

00:09:17,270  -->  00:09:19,540
Well this is operator precedence in action
203

203

00:09:19,540  -->  00:09:21,950
and this is the reason that I've coded it this way
204

204

00:09:21,950  -->  00:09:23,890
to give you an example of it.
205

205

00:09:23,890  -->  00:09:26,984
So firstly we go back to our operator precedence table again
206

206

00:09:26,984  -->  00:09:28,473
let's have a quick look at that again.
207

207

00:09:29,340  -->  00:09:32,460
So I did hint at this a bit, note that multiplication
208

208

00:09:32,460  -->  00:09:34,890
has a higher precedence than addition
209

209

00:09:34,890  -->  00:09:37,640
so what is actually happening if we go back to the code
210

210

00:09:39,270  -->  00:09:42,580
so the code on line 85, what's happening there
211

211

00:09:42,580  -->  00:09:45,630
is that mySecondValues which is value 80
212

212

00:09:45,630  -->  00:09:48,040
has been multiplied by 100 first
213

213

00:09:48,040  -->  00:09:49,360
so Java has evaluated that
214

214

00:09:49,360  -->  00:09:52,060
and looked at the multiplication operator
215

215

00:09:52,060  -->  00:09:54,670
and decided that okay I need to calculate that first
216

216

00:09:54,670  -->  00:09:59,410
so it's defined mySecondValue times 100 to be 8,000.
217

217

00:09:59,410  -->  00:10:00,900
After it's finished the multiplication
218

218

00:10:00,900  -->  00:10:04,550
it's added 20 to that, which is the value for myFirstValue
219

219

00:10:04,550  -->  00:10:08,920
and 8,000 plus 20 is 8,020, so that's the reason
220

220

00:10:08,920  -->  00:10:12,070
why we didn't get the results that we thought we might get.
221

221

00:10:12,070  -->  00:10:15,600
What we wanted to do was get 20 plus 80
222

222

00:10:15,600  -->  00:10:18,210
is 100, times 100 equals 10,000.
223

223

00:10:18,210  -->  00:10:20,110
And by doing that we should probably get no remainder
224

224

00:10:20,110  -->  00:10:22,450
and the message won't be output down the bottom
225

225

00:10:22,450  -->  00:10:24,130
and this is why we can use parentheses here
226

226

00:10:24,130  -->  00:10:26,800
to clarify the meaning, parentheses around
227

227

00:10:26,800  -->  00:10:30,240
myFirstValue plus mySecondValue and we know that
228

228

00:10:30,240  -->  00:10:32,670
parentheses have got a higher precedence than multiplication
229

229

00:10:32,670  -->  00:10:35,000
so that's going to be evaluated first now
230

230

00:10:35,000  -->  00:10:38,780
the result of that will be then multiplied by 100.00.
231

231

00:10:38,780  -->  00:10:39,930
So if we run this again
232

232

00:10:42,300  -->  00:10:43,440
you can see now we've correctly got
233

233

00:10:43,440  -->  00:10:46,090
myValuesTotal equals 10,000
234

234

00:10:46,090  -->  00:10:48,450
theRemainder set or has the value of 0
235

235

00:10:48,450  -->  00:10:52,650
because 40 goes into 10,000 exactly 250 times
236

236

00:10:52,650  -->  00:10:54,080
leaving no remainder.
237

237

00:10:54,080  -->  00:10:56,030
The isNoRemainder variable was set to true
238

238

00:10:56,030  -->  00:10:57,750
because there's no remainder
239

239

00:10:57,750  -->  00:11:00,120
and consequently we now no longer get the output
240

240

00:11:00,120  -->  00:11:01,083
got some remainder.
241

241

00:11:02,050  -->  00:11:04,340
Alright so now it's working as it should.
242

242

00:11:04,340  -->  00:11:05,840
Alright so that's the challenge completed
243

243

00:11:05,840  -->  00:11:07,700
hopefully you managed to complete that
244

244

00:11:07,700  -->  00:11:09,600
and if you had or did run into difficulties
245

245

00:11:09,600  -->  00:11:11,110
because of the operator precedence
246

246

00:11:11,110  -->  00:11:12,490
hopefully you now understand
247

247

00:11:12,490  -->  00:11:14,590
why it's important to use parentheses
248

248

00:11:14,590  -->  00:11:16,740
or to code expressions in a specific order
249

249

00:11:16,740  -->  00:11:18,740
knowing that they're gonna be evaluated
250

250

00:11:18,740  -->  00:11:21,260
with the precedence table that I've shown you.
251

251

00:11:21,260  -->  00:11:23,220
Alright so that's this video and challenge completed
252

252

00:11:23,220  -->  00:11:26,130
and in fact that's the entire section now done and dusted.
253

253

00:11:26,130  -->  00:11:27,940
What we'll do is we'll have a quick summary
254

254

00:11:27,940  -->  00:11:31,170
of what we've actually achieved in the next video
255

255

00:11:31,170  -->  00:11:32,410
and just a reminder that you can grab
256

256

00:11:32,410  -->  00:11:34,570
the slides for all the videos
257

257

00:11:34,570  -->  00:11:36,740
with a handy PDF format that you can review
258

258

00:11:36,740  -->  00:11:39,260
by checking out the lecture at the end of this course.
259

259

00:11:39,260  -->  00:11:41,133
So I'll see you in the next video.
