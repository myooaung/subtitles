1
1

00:00:05,610  -->  00:00:07,700
- [Tim] Alright, so we've
finished our discussion
2

2

00:00:07,700  -->  00:00:09,940
on TCP/IP in the last video.
3

3

00:00:09,940  -->  00:00:13,370
Now it's time to look at
another protocol, UDP,
4

4

00:00:13,370  -->  00:00:17,090
and that stands for
User Datagram Protocol.
5

5

00:00:17,090  -->  00:00:18,510
Now, when using TCP,
6

6

00:00:18,510  -->  00:00:20,620
some handshaking has to take place
7

7

00:00:20,620  -->  00:00:22,470
between the server and the client.
8

8

00:00:22,470  -->  00:00:23,300
So, in other words,
9

9

00:00:23,300  -->  00:00:25,580
the client has to connect to the server,
10

10

00:00:25,580  -->  00:00:28,350
and the server has to
accept that connexion.
11

11

00:00:28,350  -->  00:00:30,100
So, the client sends a request,
12

12

00:00:30,100  -->  00:00:32,030
and the server sends a response.
13

13

00:00:32,030  -->  00:00:33,640
So, it's a two way connexion,
14

14

00:00:33,640  -->  00:00:35,410
and there's tight coupling
15

15

00:00:35,410  -->  00:00:37,380
between the client and the server.
16

16

00:00:37,380  -->  00:00:40,620
Now, the TCP protocol also
performs error checking
17

17

00:00:40,620  -->  00:00:44,080
and will resend messages that
don't make it to the server.
18

18

00:00:44,080  -->  00:00:46,060
So, it's quite a reliable protocol,
19

19

00:00:46,060  -->  00:00:48,690
but that reliability requires overhead
20

20

00:00:48,690  -->  00:00:51,090
which can ultimately affect performance.
21

21

00:00:51,090  -->  00:00:54,320
Now, when using UDP there's
no handshaking at all,
22

22

00:00:54,320  -->  00:00:55,950
and the destination host,
23

23

00:00:55,950  -->  00:00:57,700
which may or may not be a server,
24

24

00:00:57,700  -->  00:01:01,150
doesn't actually send any
responses to the message sender.
25

25

00:01:01,150  -->  00:01:04,110
So, you use it when you don't
need a reliable connexion
26

26

00:01:04,110  -->  00:01:05,470
or a two-way connexion
27

27

00:01:05,470  -->  00:01:07,450
or when speed is essential.
28

28

00:01:07,450  -->  00:01:09,270
So, if you require a response
29

29

00:01:09,270  -->  00:01:11,090
to a message you send over the network,
30

30

00:01:11,090  -->  00:01:13,560
then you wouldn't use UDP.
31

31

00:01:13,560  -->  00:01:15,220
So, UDP uses datagrams,
32

32

00:01:15,220  -->  00:01:18,590
and a datagram is a
self-contained message,
33

33

00:01:18,590  -->  00:01:21,950
and it's not guaranteed to
arrive at its destination.
34

34

00:01:21,950  -->  00:01:25,280
Now, UDP is often used for
time-sensitive communication
35

35

00:01:25,280  -->  00:01:27,560
and when losing the odd message
36

36

00:01:27,560  -->  00:01:29,710
or packet here or there won't matter.
37

37

00:01:29,710  -->  00:01:32,330
For example, voice over IP applications
38

38

00:01:32,330  -->  00:01:36,730
like Skype and video
streaming usually use UDP,
39

39

00:01:36,730  -->  00:01:38,310
because speed is more important
40

40

00:01:38,310  -->  00:01:41,480
than ensuring that absolutely
every package arrives.
41

41

00:01:41,480  -->  00:01:42,530
Our eyes won't notice
42

42

00:01:42,530  -->  00:01:44,810
if the occasional package isn't received,
43

43

00:01:44,810  -->  00:01:47,270
for example, when we're watching a video.
44

44

00:01:47,270  -->  00:01:49,520
Also, the data arriving at the client
45

45

00:01:49,520  -->  00:01:51,830
is immediately replaced by more data
46

46

00:01:51,830  -->  00:01:54,950
so it's not critical that all
the messages reach the client.
47

47

00:01:54,950  -->  00:01:58,840
As mentioned, UDP is used for
time sensitive communication
48

48

00:01:58,840  -->  00:02:01,560
because the overhead involved with TCP
49

49

00:02:01,560  -->  00:02:03,270
is actually significant,
50

50

00:02:03,270  -->  00:02:07,050
and, so, data can be sent
much more quickly using UDP.
51

51

00:02:07,050  -->  00:02:09,280
So, as usual, which protocol to use
52

52

00:02:09,280  -->  00:02:12,500
will depend on the application
that you're looking to write.
53

53

00:02:12,500  -->  00:02:14,120
So, we're going to rewrite
54

54

00:02:14,120  -->  00:02:17,560
the client and server
applications to use UDP.
55

55

00:02:17,560  -->  00:02:19,050
And you can see that I've actually created
56

56

00:02:19,050  -->  00:02:21,240
two new projects here.
57

57

00:02:21,240  -->  00:02:23,410
I've got a UDP server project on the left,
58

58

00:02:23,410  -->  00:02:26,060
and the UDP client project on the right.
59

59

00:02:26,060  -->  00:02:29,280
So, starting with a fresh base basically.
60

60

00:02:29,280  -->  00:02:31,490
And we're not gonna worry
about threads this time
61

61

00:02:31,490  -->  00:02:32,930
since you now know how to do that
62

62

00:02:32,930  -->  00:02:35,690
from the TCP kind that we worked on.
63

63

00:02:35,690  -->  00:02:36,530
And for this demo,
64

64

00:02:36,530  -->  00:02:39,820
I just want to show how to
send data using a datagram.
65

65

00:02:39,820  -->  00:02:41,110
In a real-world application,
66

66

00:02:41,110  -->  00:02:42,550
you would definitely want to use threads
67

67

00:02:42,550  -->  00:02:45,140
like we did in the last few videos.
68

68

00:02:45,140  -->  00:02:49,310
Right, so let's start with
the server side of things.
69

69

00:02:51,320  -->  00:02:54,500
Here we're gonna write our server code.
70

70

00:02:54,500  -->  00:02:56,260
You're gonna start with a try,
71

71

00:02:56,260  -->  00:03:00,430
and we're going to catch,
firstly, a socket exception.
72

72

00:03:04,260  -->  00:03:08,830
And we'll just print out a
message if we do get one,
73

73

00:03:08,830  -->  00:03:11,210
a look at message will do us.
74

74

00:03:11,210  -->  00:03:13,410
We also want to catch an IO exception.
75

75

00:03:13,410  -->  00:03:17,620
We wanna catch 'em in that order as well.
76

76

00:03:17,620  -->  00:03:18,560
Same deal there.
77

77

00:03:18,560  -->  00:03:20,810
We'll just put IO exception
78

78

00:03:22,140  -->  00:03:24,060
plus e dot get message.
79

79

00:03:25,190  -->  00:03:26,710
Alright, in terms of the code,
80

80

00:03:26,710  -->  00:03:29,800
we're gonna start by datagram socket.
81

81

00:03:30,770  -->  00:03:32,820
This is Java dot net as you can see there.
82

82

00:03:32,820  -->  00:03:36,570
Socket is equal to new
datagram socket 5,000.
83

83

00:03:38,460  -->  00:03:40,190
We're gonna create an infinite loop.
84

84

00:03:40,190  -->  00:03:41,440
So, while true.
85

85

00:03:44,760  -->  00:03:45,600
And then we're gonna do
86

86

00:03:45,600  -->  00:03:47,010
byte array buffer
87

87

00:03:48,070  -->  00:03:49,650
equals new byte 50.
88

88

00:03:53,720  -->  00:03:56,720
And, we're gonna do datagram packet.
89

89

00:03:58,520  -->  00:04:01,770
Packet is equal to new datagram packet,
90

90

00:04:02,950  -->  00:04:07,030
and that's going to be
buffer, buffer dot length.
91

91

00:04:09,730  -->  00:04:13,480
And we're gonna do socket
dot receive packet.
92

92

00:04:14,930  -->  00:04:16,790
And then we're just going
to print out that text.
93

93

00:04:16,790  -->  00:04:18,200
So, text received
94

94

00:04:20,070  -->  00:04:20,900
is plus
95

95

00:04:22,470  -->  00:04:23,970
new string buffer.
96

96

00:04:25,430  -->  00:04:27,350
So, just output that the console.
97

97

00:04:27,350  -->  00:04:28,740
Alright, so that's actually our code,
98

98

00:04:28,740  -->  00:04:30,280
pretty straight forward.
99

99

00:04:30,280  -->  00:04:31,110
First thing,
100

100

00:04:31,110  -->  00:04:35,700
notice that we're now creating
a datagram socket on line 12.
101

101

00:04:35,700  -->  00:04:37,450
And that accepts a port number.
102

102

00:04:37,450  -->  00:04:39,600
And inside the loop,
103

103

00:04:39,600  -->  00:04:42,630
we're creating that byte array
that I mentioned on line 15.
104

104

00:04:42,630  -->  00:04:45,560
And that's going to accept
data from the socket.
105

105

00:04:45,560  -->  00:04:50,000
We then create the datagram
packet itself on line 16.
106

106

00:04:50,000  -->  00:04:51,200
And that's going to be populated
107

107

00:04:51,200  -->  00:04:53,330
with whatever is received from the socket.
108

108

00:04:53,330  -->  00:04:54,200
And, finally,
109

109

00:04:54,200  -->  00:04:56,730
we're calling the datagram
socket dot receive method
110

110

00:04:56,730  -->  00:04:58,130
on line 17,
111

111

00:04:58,130  -->  00:04:59,780
passing the packet as a parameter
112

112

00:04:59,780  -->  00:05:02,470
so it can actually fill that
packet with the content.
113

113

00:05:02,470  -->  00:05:05,370
And this method actually
blocks until data is received.
114

114

00:05:05,370  -->  00:05:07,170
You know, once the data has arrived,
115

115

00:05:07,170  -->  00:05:09,970
the buffer you pass to the
datagram packet constructor
116

116

00:05:09,970  -->  00:05:10,900
will contain the data,
117

117

00:05:10,900  -->  00:05:13,520
that packet in this case on line 17,
118

118

00:05:13,520  -->  00:05:15,920
and we're then printing that
to the console on line 18.
119

119

00:05:15,920  -->  00:05:17,420
Now, it's important to note
120

120

00:05:17,420  -->  00:05:19,340
that the socket dot receive method
121

121

00:05:19,340  -->  00:05:21,490
doesn't create an end-to-end connexion
122

122

00:05:21,490  -->  00:05:23,170
between the server and the client.
123

123

00:05:23,170  -->  00:05:24,530
So, it doesn't return anything
124

124

00:05:24,530  -->  00:05:28,050
the server can use to send
data back to the client.
125

125

00:05:28,050  -->  00:05:29,800
Now when using TCP,
126

126

00:05:29,800  -->  00:05:33,370
the accept method did create
an end-to-end connexion.
127

127

00:05:33,370  -->  00:05:34,800
So, it returned a socket
128

128

00:05:34,800  -->  00:05:37,220
the server could use to
communicate with the client,
129

129

00:05:37,220  -->  00:05:39,140
but that's not the case here.
130

130

00:05:39,140  -->  00:05:43,300
Alright, so let's actually go
back and code the client now.
131

131

00:05:49,770  -->  00:05:51,650
Alright, so the actual code:
132

132

00:05:51,650  -->  00:05:53,580
We're gonna do a try again.
133

133

00:05:53,580  -->  00:05:57,250
We're going to catch a
socket timeout exception,
134

134

00:05:57,250  -->  00:06:00,730
which we talked about
in the previous video.
135

135

00:06:00,730  -->  00:06:02,490
And, if we get one of those,
136

136

00:06:02,490  -->  00:06:06,020
we're just gonna print out a
message to socket timed out.
137

137

00:06:06,020  -->  00:06:08,830
And we'll also catch an IO exception
138

138

00:06:08,830  -->  00:06:10,080
if you get one.
139

139

00:06:13,980  -->  00:06:16,700
That should just say client error.
140

140

00:06:16,700  -->  00:06:19,540
That's e dot get message.
141

141

00:06:19,540  -->  00:06:21,780
Alright, now in terms of the code, though,
142

142

00:06:21,780  -->  00:06:24,690
we're gonna start with I net address.
143

143

00:06:24,690  -->  00:06:26,240
Java dot net again.
144

144

00:06:26,240  -->  00:06:28,990
Address is equal to I net address
145

145

00:06:30,240  -->  00:06:31,820
dot get local host.
146

146

00:06:34,060  -->  00:06:37,830
Then we're gonna do datagram socket.
147

147

00:06:37,830  -->  00:06:39,270
Java dot net again.
148

148

00:06:39,270  -->  00:06:43,270
Datagram socket is equal
to new datagram socket.
149

149

00:06:44,670  -->  00:06:46,090
Scanner, scanner.
150

150

00:06:47,500  -->  00:06:49,450
Accepted import.
151

151

00:06:49,450  -->  00:06:52,200
Java dot util equals new scanner.
152

152

00:06:54,290  -->  00:06:56,790
That's gonna be system dot in.
153

153

00:06:58,700  -->  00:07:00,620
And string echo string.
154

154

00:07:01,870  -->  00:07:03,560
Then we need a do while loop.
155

155

00:07:03,560  -->  00:07:04,800
So, do.
156

156

00:07:04,800  -->  00:07:06,550
And we're gonna do...
157

157

00:07:07,590  -->  00:07:08,980
We're gonna print out a message.
158

158

00:07:08,980  -->  00:07:11,150
Enter string to be echoed.
159

159

00:07:14,320  -->  00:07:17,590
Then echo string is equal
to scanner dot next line.
160

160

00:07:17,590  -->  00:07:20,810
So, we're just getting a line of input.
161

161

00:07:20,810  -->  00:07:22,410
That's what we've done previously.
162

162

00:07:22,410  -->  00:07:24,820
We're now gonna create a buffer.
163

163

00:07:24,820  -->  00:07:26,820
So, buffer array.
164

164

00:07:26,820  -->  00:07:30,560
Buffer is equal to echo
string dot get byte.
165

165

00:07:30,560  -->  00:07:33,320
So, we're just converting it
to a byte array essentially.
166

166

00:07:33,320  -->  00:07:36,490
Then we're gonna do a datagram packet.
167

167

00:07:37,430  -->  00:07:40,680
Packet is equal to new datagram packet.
168

168

00:07:41,750  -->  00:07:43,900
And it's buffer,
169

169

00:07:43,900  -->  00:07:46,450
which is gonna be buffer dot length,
170

170

00:07:46,450  -->  00:07:49,550
address, which we defined on line 14,
171

171

00:07:49,550  -->  00:07:50,710
and 5,000,
172

172

00:07:50,710  -->  00:07:52,310
which will obviously be the port there.
173

173

00:07:52,310  -->  00:07:53,350
So, basically, we're just passing
174

174

00:07:53,350  -->  00:07:56,300
the buffer, the length of the
buffer, the I net address,
175

175

00:07:56,300  -->  00:07:57,140
which is local host,
176

176

00:07:57,140  -->  00:07:58,220
and the port.
177

177

00:07:59,300  -->  00:08:00,370
And then we're gonna send it.
178

178

00:08:00,370  -->  00:08:03,620
So, diagram socket dot send our packet.
179

179

00:08:05,760  -->  00:08:07,590
And the condition for the
while loop is gonna be
180

180

00:08:07,590  -->  00:08:08,930
while
181

181

00:08:08,930  -->  00:08:09,890
not
182

182

00:08:09,890  -->  00:08:11,160
echo string
183

183

00:08:11,160  -->  00:08:12,340
dot equals
184

184

00:08:12,340  -->  00:08:13,670
exit.
185

185

00:08:13,670  -->  00:08:14,700
Sounds before we're gonna allow
186

186

00:08:14,700  -->  00:08:16,890
exit, the typing of exit
187

187

00:08:16,890  -->  00:08:20,150
to actually close down the app.
188

188

00:08:20,150  -->  00:08:21,040
Alright, so,
189

189

00:08:21,040  -->  00:08:23,150
firstly, we're actually
getting the address
190

190

00:08:23,150  -->  00:08:25,220
of the host we'd like to send data to.
191

191

00:08:25,220  -->  00:08:26,660
So, we're getting local host
192

192

00:08:26,660  -->  00:08:30,740
because we're gonna be running
the server on this machine.
193

193

00:08:30,740  -->  00:08:32,430
So, obviously, if this was another machine
194

194

00:08:32,430  -->  00:08:34,080
that you wanted to connect to,
195

195

00:08:34,080  -->  00:08:36,600
you'd be setting up the IP address there,
196

196

00:08:36,600  -->  00:08:38,280
but we're using the get local host method
197

197

00:08:38,280  -->  00:08:39,660
to get the local host.
198

198

00:08:39,660  -->  00:08:43,110
Now, there's also an I net
address dot get by name method,
199

199

00:08:43,110  -->  00:08:45,010
and that lets use pass a host name to it.
200

200

00:08:45,010  -->  00:08:48,130
And it actually returns the
I net address of the host.
201

201

00:08:48,130  -->  00:08:49,130
So, it's the
202

202

00:08:50,670  -->  00:08:52,260
get by name.
203

203

00:08:52,260  -->  00:08:53,100
So, you'd use that
204

204

00:08:53,100  -->  00:08:55,430
if you're running the server
on a different machine.
205

205

00:08:55,430  -->  00:08:56,650
Alright, so next after we've done that
206

206

00:08:56,650  -->  00:08:58,990
we're creating a datagram socket to the,
207

207

00:08:58,990  -->  00:09:00,930
or that this client's gonna use.
208

208

00:09:00,930  -->  00:09:02,540
And note that the socket
209

209

00:09:02,540  -->  00:09:05,420
isn't associated with a port number.
210

210

00:09:05,420  -->  00:09:06,250
And after that,
211

211

00:09:06,250  -->  00:09:08,340
we're just going through
getting some input from the user
212

212

00:09:08,340  -->  00:09:10,710
and converting the input to a byte array.
213

213

00:09:10,710  -->  00:09:14,150
And then we're done here
creating the packet.
214

214

00:09:14,150  -->  00:09:16,070
Now, recall that I said
215

215

00:09:16,070  -->  00:09:18,730
the datagram is a self-contained message.
216

216

00:09:18,730  -->  00:09:21,120
Now it's clearer what I
meant by that, hopefully,
217

217

00:09:21,120  -->  00:09:22,730
'cause you can see what we're doing here.
218

218

00:09:22,730  -->  00:09:25,040
The message contains not only the data
219

219

00:09:25,040  -->  00:09:27,900
but also the address and the port number.
220

220

00:09:27,900  -->  00:09:29,470
So, if the server wants to respond,
221

221

00:09:29,470  -->  00:09:31,470
it can get all the information it needs
222

222

00:09:31,470  -->  00:09:32,930
from the datagram packet.
223

223

00:09:32,930  -->  00:09:34,260
In the TCP case,
224

224

00:09:34,260  -->  00:09:36,640
once the end-to-end
connexion was established,
225

225

00:09:36,640  -->  00:09:39,200
the socket had all the
information required
226

226

00:09:39,200  -->  00:09:40,840
to communicate with the client.
227

227

00:09:40,840  -->  00:09:43,070
So, the server didn't have
to get the information
228

228

00:09:43,070  -->  00:09:45,190
from each message.
229

229

00:09:45,190  -->  00:09:47,770
Alright, so after we've
created the datagram packet,
230

230

00:09:47,770  -->  00:09:50,500
we're sending it to the server on line 27.
231

231

00:09:50,500  -->  00:09:52,700
And the rest of the code
is just error handling
232

232

00:09:52,700  -->  00:09:56,320
and enabling us to exit the do while loop.
233

233

00:09:56,320  -->  00:09:59,660
Alright, so let's actually try this out.
234

234

00:10:01,160  -->  00:10:05,320
So, I'm gonna start by
firstly running the server.
235

235

00:10:10,970  -->  00:10:12,920
Move that down to the bottom,
236

236

00:10:12,920  -->  00:10:14,250
and we can see something there.
237

237

00:10:14,250  -->  00:10:15,230
Alright.
238

238

00:10:15,230  -->  00:10:16,400
And let's do the same to the client.
239

239

00:10:16,400  -->  00:10:18,150
Let's run the client.
240

240

00:10:25,820  -->  00:10:27,100
Alright, so I'll type in a string now.
241

241

00:10:27,100  -->  00:10:27,940
We'll see what happens.
242

242

00:10:27,940  -->  00:10:30,020
We'll put "Tim was here."
243

243

00:10:32,180  -->  00:10:34,170
And you can see that
the server has come up
244

244

00:10:34,170  -->  00:10:35,120
and actually put that text
245

245

00:10:35,120  -->  00:10:37,020
or shows us that text on the screen here.
246

246

00:10:37,020  -->  00:10:38,040
"Tim was here."
247

247

00:10:38,040  -->  00:10:40,230
And note that we're not
getting an echo back
248

248

00:10:40,230  -->  00:10:42,440
from the server to the client this time,
249

249

00:10:42,440  -->  00:10:44,620
because it's no longer sending
anything back to the client.
250

250

00:10:44,620  -->  00:10:47,700
But we can type in some more strings.
251

251

00:10:55,350  -->  00:10:56,670
And note, also, that at the moment,
252

252

00:10:56,670  -->  00:10:59,660
we're actually seeing the
complete buffer showing here.
253

253

00:10:59,660  -->  00:11:01,580
So, we've got all these null characters.
254

254

00:11:01,580  -->  00:11:04,530
So, if we just have a
look at the code again.
255

255

00:11:04,530  -->  00:11:06,460
Alright, the problem is at the moment,
256

256

00:11:06,460  -->  00:11:07,580
where we're seeing these characters
257

257

00:11:07,580  -->  00:11:10,650
is we've got a byte array
buffer equals new byte 50.
258

258

00:11:10,650  -->  00:11:14,260
So, we've just allocated 50
bytes for our byte array,
259

259

00:11:14,260  -->  00:11:15,880
and we're saving the packet into that,
260

260

00:11:15,880  -->  00:11:17,820
and when we're trying to
extract only the characters
261

261

00:11:17,820  -->  00:11:19,090
that aren't null there,
262

262

00:11:19,090  -->  00:11:20,690
we're just actually dumping everything
263

263

00:11:20,690  -->  00:11:22,400
and creating a new string called buffer.
264

264

00:11:22,400  -->  00:11:26,420
So, if we wanted to only
output the number of...
265

265

00:11:26,420  -->  00:11:27,560
You know, the information related
266

266

00:11:27,560  -->  00:11:30,140
to the number of characters
received, the actual message,
267

267

00:11:30,140  -->  00:11:32,510
we can change this by me
creating a new string buffer
268

268

00:11:32,510  -->  00:11:35,190
turning return the actual amounts.
269

269

00:11:35,190  -->  00:11:37,950
I will start with zero comma,
270

270

00:11:37,950  -->  00:11:40,990
and then we can do packet dot length
271

271

00:11:40,990  -->  00:11:42,880
or dot get length.
272

272

00:11:42,880  -->  00:11:45,270
And that should now give us
a string of just the actual
273

273

00:11:45,270  -->  00:11:47,600
right size that was actually retrieved
274

274

00:11:47,600  -->  00:11:49,920
instead of actually
trying to dump all output,
275

275

00:11:49,920  -->  00:11:50,960
the entire byte array.
276

276

00:11:50,960  -->  00:11:52,390
So, let's actually just go back
277

277

00:11:52,390  -->  00:11:54,310
and test that with another message.
278

278

00:11:54,310  -->  00:11:55,960
What we'll have to do is just close down
279

279

00:11:55,960  -->  00:11:58,730
our server and client and start again.
280

280

00:11:58,730  -->  00:11:59,860
I guess, technically,
281

281

00:11:59,860  -->  00:12:01,620
we don't have to close down the client,
282

282

00:12:01,620  -->  00:12:04,400
'cause there's not a connexion anymore.
283

283

00:12:04,400  -->  00:12:06,370
But we'll do that anyway.
284

284

00:12:06,370  -->  00:12:09,120
So we'll just run this again now.
285

285

00:12:10,260  -->  00:12:13,850
And we'll go back and
run our client again.
286

286

00:12:17,100  -->  00:12:19,340
"Testing 1, 2, 3."
287

287

00:12:19,340  -->  00:12:21,340
You can see we're now
correctly showing the output
288

288

00:12:21,340  -->  00:12:24,120
minus all the other trailing characters.
289

289

00:12:24,120  -->  00:12:25,370
"Tim was here."
290

290

00:12:26,390  -->  00:12:28,660
So, that's working fine.
291

291

00:12:28,660  -->  00:12:33,100
And let's just also exit to
make sure exit still works.
292

292

00:12:33,100  -->  00:12:35,410
Exit's finished here, and...
293

293

00:12:35,410  -->  00:12:36,240
Obviously we'd need to go back
294

294

00:12:36,240  -->  00:12:39,180
and actually close down the
client, the server rather,
295

295

00:12:39,180  -->  00:12:40,600
manually as well,
296

296

00:12:42,210  -->  00:12:43,910
if you want to do that.
297

297

00:12:43,910  -->  00:12:46,740
And also don't forget again,
in a real-world application,
298

298

00:12:46,740  -->  00:12:48,020
we would be using threads here,
299

299

00:12:48,020  -->  00:12:49,180
but we're not doing that
300

300

00:12:49,180  -->  00:12:50,170
because we've seen how to do that
301

301

00:12:50,170  -->  00:12:53,420
in a previous video in
this section of the course.
302

302

00:12:53,420  -->  00:12:55,800
Alright, now, before I move
on to the high-level API,
303

303

00:12:55,800  -->  00:12:58,180
let's see how the server would
get the information it needs
304

304

00:12:58,180  -->  00:13:01,740
from a packet to be able to
send data back to the client.
305

305

00:13:01,740  -->  00:13:03,710
So, we're gonna actually
update this server code.
306

306

00:13:03,710  -->  00:13:06,880
So, let's go ahead and do that.
307

307

00:13:06,880  -->  00:13:07,940
So, we're gonna add some code now
308

308

00:13:07,940  -->  00:13:10,560
after the system dot out dot print length.
309

309

00:13:10,560  -->  00:13:12,650
And we're gonna do string
310

310

00:13:13,750  -->  00:13:15,280
return string
311

311

00:13:15,280  -->  00:13:16,700
is equal to
312

312

00:13:16,700  -->  00:13:17,530
echo colon
313

313

00:13:18,710  -->  00:13:19,550
space plus
314

314

00:13:20,380  -->  00:13:21,210
new string
315

315

00:13:24,050  -->  00:13:24,880
buffer.
316

316

00:13:26,250  -->  00:13:27,090
And we'll do the same thing:
317

317

00:13:27,090  -->  00:13:29,540
zero and then packet dot get length
318

318

00:13:29,540  -->  00:13:32,060
to return just the data
or send back only the data
319

319

00:13:32,060  -->  00:13:35,220
that was sent back, or
sent to, this server.
320

320

00:13:35,220  -->  00:13:36,050
And we'll
321

321

00:13:36,050  -->  00:13:36,880
byte array
322

322

00:13:37,790  -->  00:13:39,370
buffer two
323

323

00:13:39,370  -->  00:13:42,700
is equal to return string dot get bytes.
324

324

00:13:44,460  -->  00:13:45,290
And we're going
325

325

00:13:45,290  -->  00:13:48,520
I net address, a Java dot net address,
326

326

00:13:48,520  -->  00:13:49,980
is equal to
327

327

00:13:49,980  -->  00:13:51,890
packet dot get address.
328

328

00:13:54,060  -->  00:13:54,900
Then we're going
329

329

00:13:54,900  -->  00:13:55,730
int port
330

330

00:13:55,730  -->  00:13:56,780
is equal to
331

331

00:13:56,780  -->  00:13:58,360
packet dot get port
332

332

00:13:59,980  -->  00:14:00,810
And then we're going
333

333

00:14:00,810  -->  00:14:01,810
packet
334

334

00:14:01,810  -->  00:14:02,650
to be equal to
335

335

00:14:02,650  -->  00:14:04,310
new datagram packet,
336

336

00:14:06,060  -->  00:14:08,730
this time it's gonna be buffer two,
337

337

00:14:08,730  -->  00:14:10,480
buffer two dot length
338

338

00:14:11,630  -->  00:14:13,410
address port.
339

339

00:14:13,410  -->  00:14:14,240
So, we're constructing a packet
340

340

00:14:14,240  -->  00:14:16,440
similar to what we've done in the client.
341

341

00:14:16,440  -->  00:14:17,270
We're gonna be
342

342

00:14:17,270  -->  00:14:19,190
socket dot send packet.
343

343

00:14:22,270  -->  00:14:24,370
So, once the server's received a packet,
344

344

00:14:24,370  -->  00:14:27,080
it uses the address and
port in the received packet
345

345

00:14:27,080  -->  00:14:29,130
to create a new datagram packet
346

346

00:14:29,130  -->  00:14:31,410
which it then sends back to the client.
347

347

00:14:31,410  -->  00:14:33,640
Now, we could've used the same byte array
348

348

00:14:33,640  -->  00:14:34,760
for both input and output,
349

349

00:14:34,760  -->  00:14:37,190
but we're using two different
ones here for clarity.
350

350

00:14:37,190  -->  00:14:38,950
The code gets the I net address
351

351

00:14:38,950  -->  00:14:41,050
and the port from the packet it received,
352

352

00:14:41,050  -->  00:14:41,970
and that's because
353

353

00:14:41,970  -->  00:14:43,720
there's no permanent end-to-end connexion
354

354

00:14:43,720  -->  00:14:45,300
between the server and the client.
355

355

00:14:45,300  -->  00:14:47,220
In fact, UDP's often referred
356

356

00:14:47,220  -->  00:14:50,390
to as a connectionless
protocol for that reason.
357

357

00:14:50,390  -->  00:14:52,740
So, you can see that we've
retrieved the address
358

358

00:14:52,740  -->  00:14:54,730
and the port from the packet
359

359

00:14:54,730  -->  00:14:56,000
that was sent to us.
360

360

00:14:56,000  -->  00:14:57,990
Then we've constructed
a new datagram packet
361

361

00:14:57,990  -->  00:15:00,950
with all the information in
the string which is gonna be,
362

362

00:15:00,950  -->  00:15:03,120
basically, an echo of what was sent to us,
363

363

00:15:03,120  -->  00:15:05,570
which is basically the
contents of the message
364

364

00:15:05,570  -->  00:15:08,540
that was sent to to us with the
words echo colon and a space
365

365

00:15:08,540  -->  00:15:09,740
prefixed to that.
366

366

00:15:09,740  -->  00:15:13,210
And then we're sending it using
a socket dot send package.
367

367

00:15:13,210  -->  00:15:15,710
Right, so now we've done that.
368

368

00:15:16,890  -->  00:15:18,120
We'll actually run the server,
369

369

00:15:18,120  -->  00:15:20,750
and what we need to do
is change the client code
370

370

00:15:20,750  -->  00:15:23,140
so that the client code
can expect a response,
371

371

00:15:23,140  -->  00:15:25,030
or it gets a response
we can actually output
372

372

00:15:25,030  -->  00:15:27,330
something to that...
373

373

00:15:27,330  -->  00:15:28,610
We can actually output the response.
374

374

00:15:28,610  -->  00:15:31,430
So, let's just bring
that up on the screen.
375

375

00:15:31,430  -->  00:15:33,090
Now keep in mind that when using UDP,
376

376

00:15:33,090  -->  00:15:35,030
you often don't want a response.
377

377

00:15:35,030  -->  00:15:36,740
We're setting up the
client at the moment, now,
378

378

00:15:36,740  -->  00:15:39,640
waiting for a response purely
for demonstration purposes.
379

379

00:15:39,640  -->  00:15:41,370
But, again, you wouldn't
necessarily do that
380

380

00:15:41,370  -->  00:15:43,660
in a real-world application.
381

381

00:15:43,660  -->  00:15:45,180
Alright, so we've got
our code at the moment
382

382

00:15:45,180  -->  00:15:47,410
that sends the packet.
383

383

00:15:47,410  -->  00:15:49,050
What we're going to do now
384

384

00:15:49,050  -->  00:15:50,760
is put some code in here
that actually receives it.
385

385

00:15:50,760  -->  00:15:51,600
So,
386

386

00:15:51,600  -->  00:15:52,430
byte array
387

387

00:15:53,500  -->  00:15:54,860
buffer two
388

388

00:15:54,860  -->  00:15:55,700
is equal to
389

389

00:15:55,700  -->  00:15:57,400
new byte array.
390

390

00:15:57,400  -->  00:16:00,770
And we'll make it 50, allow 50 characters.
391

391

00:16:00,770  -->  00:16:04,610
Packet is equal to new datagram packet,
392

392

00:16:04,610  -->  00:16:05,450
and it's gonna be
393

393

00:16:05,450  -->  00:16:07,100
buffer two
394

394

00:16:07,100  -->  00:16:09,150
buffer two dot length,
395

395

00:16:09,150  -->  00:16:13,540
allocating our package, packet
so it can receive the data.
396

396

00:16:13,540  -->  00:16:14,380
And we're gonna do
397

397

00:16:14,380  -->  00:16:17,290
datagram socket dot receive packet.
398

398

00:16:19,410  -->  00:16:21,150
And we can print out a message
399

399

00:16:21,150  -->  00:16:22,490
text received is
400

400

00:16:24,890  -->  00:16:26,140
plus new string
401

401

00:16:28,410  -->  00:16:30,910
buffer two zero buffer two dot
402

402

00:16:32,650  -->  00:16:35,150
Sorry, that should be package,
403

403

00:16:35,150  -->  00:16:36,800
'cause we want to actually get the package
404

404

00:16:36,800  -->  00:16:39,750
to tell us how much or
how long the data was,
405

405

00:16:39,750  -->  00:16:41,000
dot get length.
406

406

00:16:42,230  -->  00:16:44,490
Alright, so that should be it.
407

407

00:16:44,490  -->  00:16:45,910
So, the other code we're adding here
408

408

00:16:45,910  -->  00:16:48,410
from lines 29 through 32
409

409

00:16:48,410  -->  00:16:52,160
includes the byte array
so we can store the data
410

410

00:16:52,160  -->  00:16:53,490
coming back to us.
411

411

00:16:53,490  -->  00:16:56,000
We're creating a packet
based on that byte array
412

412

00:16:56,000  -->  00:16:58,560
so it can be used to receive the data.
413

413

00:16:58,560  -->  00:17:01,680
We're actually receiving
the data itself on line 31
414

414

00:17:01,680  -->  00:17:03,690
and then outputting it on line 32.
415

415

00:17:03,690  -->  00:17:06,730
And, again, note that we're
blocking here on line 31,
416

416

00:17:06,730  -->  00:17:08,010
so it's gonna sit there and wait
417

417

00:17:08,010  -->  00:17:11,220
until it receives or gets
the server's message.
418

418

00:17:11,220  -->  00:17:13,080
So, let's actually try
419

419

00:17:13,080  -->  00:17:13,910
this code out.
420

420

00:17:13,910  -->  00:17:15,360
So, I've got the server still running.
421

421

00:17:15,360  -->  00:17:17,450
Let's now run the client.
422

422

00:17:20,000  -->  00:17:21,920
Type in "Tim was here."
423

423

00:17:24,140  -->  00:17:26,170
We're got the text appearing
over here on the server,
424

424

00:17:26,170  -->  00:17:27,420
"Tim was here" received,
425

425

00:17:27,420  -->  00:17:30,680
and text received is echo
colon space "Tim was here."
426

426

00:17:30,680  -->  00:17:34,120
So, clearly, the server sent
that data back to the client.
427

427

00:17:34,120  -->  00:17:34,960
And, again, to finish,
428

428

00:17:34,960  -->  00:17:37,370
we'll have to just type exit,
429

429

00:17:38,410  -->  00:17:39,720
closes down the client,
430

430

00:17:39,720  -->  00:17:42,130
but we'll need to close
down the server manually,
431

431

00:17:42,130  -->  00:17:42,960
like so.
432

432

00:17:44,600  -->  00:17:46,680
Alright, so that's UDP at a low level.
433

433

00:17:46,680  -->  00:17:47,620
So, at this point
434

434

00:17:47,620  -->  00:17:49,660
we've now finished looking
at the low-level API,
435

435

00:17:49,660  -->  00:17:52,390
and you can see that, even
though it's quite low level,
436

436

00:17:52,390  -->  00:17:54,660
we're still working
with abstractions here.
437

437

00:17:54,660  -->  00:17:57,960
All the complexity of handshaking
in constructing packages
438

438

00:17:57,960  -->  00:18:00,290
is largely taken care of by Java.
439

439

00:18:00,290  -->  00:18:03,250
So, you're free to focus on
the data you want to send,
440

440

00:18:03,250  -->  00:18:05,340
but as you'll start
seeing in the next video,
441

441

00:18:05,340  -->  00:18:06,710
the high-level API
442

442

00:18:06,710  -->  00:18:08,640
hides even more of these details from you.
443

443

00:18:08,640  -->  00:18:10,650
But we'll start working
that high-level API
444

444

00:18:10,650  -->  00:18:12,150
in the next video.
