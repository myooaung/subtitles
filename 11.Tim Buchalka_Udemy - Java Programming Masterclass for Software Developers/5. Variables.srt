0
1
00:00:04,980 --> 00:00:06,820
<v Instructor>In the last few videos we saw how</v>
1

2
00:00:06,820 --> 00:00:09,310
to create our first programme in Java.
2

3
00:00:09,310 --> 00:00:11,680
It was pretty basic to say the least printing out some text
3

4
00:00:11,680 --> 00:00:14,410
on the screen but it was a good place to start.
4

5
00:00:14,410 --> 00:00:16,310
But if we wouldn't start getting the computer to do
5

6
00:00:16,310 --> 00:00:20,180
something useful, we need to start using variables.
6

7
00:00:20,180 --> 00:00:21,980
So what are variables?
7

8
00:00:21,980 --> 00:00:24,560
Well, variables are a way to store information
8

9
00:00:24,560 --> 00:00:25,730
in our computer.
9

10
00:00:25,730 --> 00:00:28,400
Variables that we define in a programme can be accessed
10

11
00:00:28,400 --> 00:00:31,240
by a name we give them, and the computer does the hard work
11

12
00:00:31,240 --> 00:00:33,310
of figuring out where they get stored
12

13
00:00:33,310 --> 00:00:36,480
in the computers Random Access Memory or RAM.
13

14
00:00:36,480 --> 00:00:39,270
Now a variable as the name suggests can be changed,
14

15
00:00:39,270 --> 00:00:42,190
in other words its contents are variable.
15

16
00:00:42,190 --> 00:00:44,330
So what we have to do is tell the computer
16

17
00:00:44,330 --> 00:00:47,290
what type of information we wanna store in the variable
17

18
00:00:47,290 --> 00:00:49,293
and then give the variable a name.
18

19
00:00:50,340 --> 00:00:53,650
There are lots of different types of data that we can define
19

20
00:00:53,650 --> 00:00:54,970
for our variables.
20

21
00:00:54,970 --> 00:00:58,470
Collectively these are known as data types.
21

22
00:00:58,470 --> 00:01:02,220
As you may have guessed data types are key words in Java.
22

23
00:01:02,220 --> 00:01:06,010
So let's start out by defining a variable of type int,
23

24
00:01:06,010 --> 00:01:08,240
int being an abbreviation for integer
24

25
00:01:08,240 --> 00:01:10,230
which was a whole number, that is a number
25

26
00:01:10,230 --> 00:01:12,360
without any decimal points.
26

27
00:01:12,360 --> 00:01:16,070
To define a variable we need to specify the data type
27

28
00:01:16,070 --> 00:01:18,990
then give our variable a name and optionally
28

29
00:01:18,990 --> 00:01:23,090
at an expression to initialise the variable with a value.
29

30
00:01:23,090 --> 00:01:25,510
And we'll talk more about expression shortly.
30

31
00:01:25,510 --> 00:01:27,800
For now though, let's swing back to the code
31

32
00:01:27,800 --> 00:01:30,850
to see how to define our first variable.
32

33
00:01:30,850 --> 00:01:33,450
so I'm gonna start below the printlin line,
33

34
00:01:33,450 --> 00:01:36,410
press Enter there and just put a bit of a gap there
34

35
00:01:36,410 --> 00:01:37,820
so we can see what we're typing.
35

36
00:01:37,820 --> 00:01:41,390
I'm going to type int my first number noting
36

37
00:01:41,390 --> 00:01:45,340
that I'm capitalising the word first and the word number,
37

38
00:01:45,340 --> 00:01:47,470
equals five.
38

39
00:01:47,470 --> 00:01:49,480
I'm putting a semicolon on the end of that line
39

40
00:01:49,480 --> 00:01:51,370
to complete the statement.
40

41
00:01:51,370 --> 00:01:54,070
So here we've defined our first variable.
41

42
00:01:54,070 --> 00:01:56,920
We've specified a data type of int.
42

43
00:01:56,920 --> 00:01:58,840
Again that was an integer, a whole number
43

44
00:01:58,840 --> 00:02:02,800
and we used the equals operator in the literal value five
44

45
00:02:02,800 --> 00:02:06,230
to set the variable to have the value of Five.
45

46
00:02:06,230 --> 00:02:09,110
And finally we added that semicolon to end the line
46

47
00:02:09,110 --> 00:02:11,090
and a former statement.
47

48
00:02:11,090 --> 00:02:13,480
So the semicolon ends the line and tells Java,
48

49
00:02:13,480 --> 00:02:16,070
just that that the lines complete.
49

50
00:02:16,070 --> 00:02:18,850
So this entire line as we've talked is a statement
50

51
00:02:18,850 --> 00:02:21,823
or to be more specific it's a declaration statement.
51

52
00:02:23,130 --> 00:02:26,890
So a declaration statement is used to define a variable
52

53
00:02:26,890 --> 00:02:29,690
by indicating the data type, and the name,
53

54
00:02:29,690 --> 00:02:34,290
then optionally to set the variable to a certain value.
54

55
00:02:34,290 --> 00:02:37,650
So here the type, and type is a shortcut
55

56
00:02:37,650 --> 00:02:40,350
for the word data type is an int,
56

57
00:02:40,350 --> 00:02:43,540
the name is my first number and the value were assigning
57

58
00:02:43,540 --> 00:02:47,300
or initialising our variable with is five.
58

59
00:02:47,300 --> 00:02:49,890
So we're declaring a variable of type int with the name
59

60
00:02:49,890 --> 00:02:52,590
my first number and assigning the value of five to it.
60

61
00:02:53,650 --> 00:02:56,220
The initialization is optional,
61

62
00:02:56,220 --> 00:02:59,370
in other words we could have admitted the equals five
62

63
00:02:59,370 --> 00:03:02,280
with Java in general variables have to be initialised
63

64
00:03:02,280 --> 00:03:04,570
before being used, but we'll talk more about
64

65
00:03:04,570 --> 00:03:06,240
that in an upcoming video.
65

66
00:03:06,240 --> 00:03:09,530
If you are initialising a number, what you type to the right
66

67
00:03:09,530 --> 00:03:14,020
of the equal sign is assigned as a value to the variable.
67

68
00:03:14,020 --> 00:03:16,530
This is known as part after the equal sign
68

69
00:03:16,530 --> 00:03:18,920
as an expression in Java.
69

70
00:03:18,920 --> 00:03:20,470
And we will be using expressions a lot
70

71
00:03:20,470 --> 00:03:21,870
as we go through the course.
71

72
00:03:23,320 --> 00:03:24,930
So what is an expression?
72

73
00:03:24,930 --> 00:03:28,220
What's a construct that evaluates to a single value?
73

74
00:03:28,220 --> 00:03:30,800
And we won't go into a deep discussion of that now
74

75
00:03:30,800 --> 00:03:33,820
because we've got upcoming videos where we'll talk about
75

76
00:03:33,820 --> 00:03:35,770
that in a lot more detail.
76

77
00:03:35,770 --> 00:03:39,300
Now Java has or will when we compile and run the programme,
77

78
00:03:39,300 --> 00:03:42,400
read this statement we've created and allocate a place
78

79
00:03:42,400 --> 00:03:45,490
in memory to store a single whole number,
79

80
00:03:45,490 --> 00:03:49,160
and we'll assign the my first name to that area of memory
80

81
00:03:49,160 --> 00:03:52,010
or more specifically assign that name that we've talked
81

82
00:03:52,010 --> 00:03:54,240
to my first name to that area of memory.
82

83
00:03:54,240 --> 00:03:55,680
So that's how we'll access it.
83

84
00:03:55,680 --> 00:03:57,360
So in other words you don't need to know anything
84

85
00:03:57,360 --> 00:03:59,980
about where in memory this is taking place
85

86
00:03:59,980 --> 00:04:02,480
or where Java is storing the contents.
86

87
00:04:02,480 --> 00:04:05,200
To get access to it you don't refer to a memory location,
87

88
00:04:05,200 --> 00:04:08,960
you refer to a variable name, my first number in this case.
88

89
00:04:08,960 --> 00:04:12,110
We're leaving Java to do all the dirty work there.
89

90
00:04:12,110 --> 00:04:14,300
All right, so now that we've declared the variable,
90

91
00:04:14,300 --> 00:04:16,590
let's see if we can print out the value.
91

92
00:04:16,590 --> 00:04:18,690
So looking at the declaration statement I think we've got
92

93
00:04:18,690 --> 00:04:21,363
a good idea what the value should be output.
93

94
00:04:22,500 --> 00:04:25,080
So the challenge is to look at creating a new system
94

95
00:04:25,080 --> 00:04:28,170
to that top printlin below the declaration
95

96
00:04:28,170 --> 00:04:30,310
for my first number, that variable,
96

97
00:04:30,310 --> 00:04:32,100
and see if you can figure out how to print out
97

98
00:04:32,100 --> 00:04:33,910
the value my first number.
98

99
00:04:33,910 --> 00:04:35,500
So pause the video and have a think about it,
99

100
00:04:35,500 --> 00:04:38,490
and try to get to print out the value that we assigned
100

101
00:04:38,490 --> 00:04:39,880
to our variable.
101

102
00:04:39,880 --> 00:04:42,200
Resume the video when you're ready to see how to do it.
102

103
00:04:42,200 --> 00:04:44,773
Pause the video now and I'll see you when you get back.
103

104
00:04:46,890 --> 00:04:47,840
Welcome back.
104

105
00:04:47,840 --> 00:04:50,430
So you may have thought, when you first started
105

106
00:04:50,430 --> 00:04:51,440
that this would be how to do it.
106

107
00:04:51,440 --> 00:04:53,290
I'm gonna give you a typical example.
107

108
00:04:54,490 --> 00:04:57,640
Now what I'm going to do is top this out.
108

109
00:04:57,640 --> 00:04:59,120
This is the abbreviation in intelligent,
109

110
00:04:59,120 --> 00:05:02,670
if I press tab there, note that tops hand only tops
110

111
00:05:02,670 --> 00:05:04,890
in that entire line system.out.println,
111

112
00:05:04,890 --> 00:05:07,670
and that's a very common thing that we'll be typing
112

113
00:05:07,670 --> 00:05:08,630
in this course.
113

114
00:05:08,630 --> 00:05:10,650
It's good to get used to using those shortcuts.
114

115
00:05:10,650 --> 00:05:12,660
SOUT in tap.
115

116
00:05:12,660 --> 00:05:14,470
Right, so when you first try this, you might have tried
116

117
00:05:14,470 --> 00:05:16,960
putting double quotes in the parenthesis
117

118
00:05:16,960 --> 00:05:20,313
similar to what we did on line four and top my first number.
118

119
00:05:22,576 --> 00:05:24,160
I worked on that and then when you run the programme
119

120
00:05:24,160 --> 00:05:26,640
thinking you get the value, you know,
120

121
00:05:26,640 --> 00:05:28,003
my first number variable.
121

122
00:05:31,290 --> 00:05:33,870
When you run it you saw we in fact got the output
122

123
00:05:33,870 --> 00:05:37,500
my first number and not the contents of our variable
123

124
00:05:37,500 --> 00:05:39,610
that we declared on line six,
124

125
00:05:39,610 --> 00:05:41,480
which of course the value should be five.
125

126
00:05:41,480 --> 00:05:43,380
Just close that window down.
126

127
00:05:43,380 --> 00:05:45,120
Now the reason that we've got my first
127

128
00:05:45,120 --> 00:05:47,280
or had my first number printed, and I just run that again
128

129
00:05:47,280 --> 00:05:49,183
actually publish until closed in window.
129

130
00:05:50,760 --> 00:05:53,260
So the reason we've got my first number printing out
130

131
00:05:53,260 --> 00:05:56,430
and not the contents of our variable is because we put
131

132
00:05:56,430 --> 00:05:59,470
the text in double quotes my first number.
132

133
00:05:59,470 --> 00:06:01,360
And when we put something in double quotes is called
133

134
00:06:01,360 --> 00:06:02,743
a string literal.
134

135
00:06:04,460 --> 00:06:07,840
Now a literal and like a variable cannot be changed.
135

136
00:06:07,840 --> 00:06:10,620
It's an expression and not a variable.
136

137
00:06:10,620 --> 00:06:13,980
So here what we're saying is literally no pun intended
137

138
00:06:13,980 --> 00:06:16,580
print out the text, my first number.
138

139
00:06:16,580 --> 00:06:19,330
And unsurprisingly perhaps, then after that we can see
139

140
00:06:19,330 --> 00:06:21,000
my first number showing.
140

141
00:06:21,000 --> 00:06:23,700
So in essence that's why we're getting that value.
141

142
00:06:23,700 --> 00:06:25,510
But if we actually remove the double quotes,
142

143
00:06:25,510 --> 00:06:26,370
which I'll do now.
143

144
00:06:26,370 --> 00:06:28,770
We remove both the ones at the start,
144

145
00:06:28,770 --> 00:06:30,200
and I think we've now got an error on the end.
145

146
00:06:30,200 --> 00:06:32,890
So we need to remove them both to remove any errors,
146

147
00:06:32,890 --> 00:06:34,630
and we run this again.
147

148
00:06:34,630 --> 00:06:36,600
This time we should see the right value.
148

149
00:06:36,600 --> 00:06:39,600
And we can see the value five, you're showing on the screen.
149

150
00:06:40,540 --> 00:06:43,120
So I made sure that I topped the name identically
150

151
00:06:43,120 --> 00:06:45,860
to the declaration line, on line number six,
151

152
00:06:45,860 --> 00:06:48,560
and you can see we got the value five showing.
152

153
00:06:48,560 --> 00:06:51,360
So just to confirm that if we changed the fivE to attend
153

154
00:06:52,470 --> 00:06:57,470
and run this, we've now got the output showing us number 10.
154

155
00:06:59,070 --> 00:07:01,840
Now the expression to the right of the equal sign
155

156
00:07:01,840 --> 00:07:03,510
can be a lot more complex.
156

157
00:07:03,510 --> 00:07:05,780
At the moment we've just used a literal integer value
157

158
00:07:05,780 --> 00:07:07,790
on number five, and then you saw as we changed
158

159
00:07:07,790 --> 00:07:09,090
it to number 10,
159

160
00:07:09,090 --> 00:07:10,860
but we can get a bit more complex there.
160

161
00:07:10,860 --> 00:07:14,480
So let's add an expression that is the sum of two numbers.
161

162
00:07:14,480 --> 00:07:17,760
So we will change 10, I'm gonna to add a plus
162

163
00:07:17,760 --> 00:07:19,150
and a number five there.
163

164
00:07:19,150 --> 00:07:20,873
It's about an operator and then the number five,
164

165
00:07:20,873 --> 00:07:22,930
so it's 10 plus five.
165

166
00:07:22,930 --> 00:07:24,083
So run the programme now.
166

167
00:07:27,520 --> 00:07:30,683
And we've now got the value 15 output on the screen.
167

168
00:07:31,600 --> 00:07:34,060
So Java has looked at the expression to the right
168

169
00:07:34,060 --> 00:07:35,420
of the equal sign,
169

170
00:07:35,420 --> 00:07:38,520
and figured that that is a mathematical expression,
170

171
00:07:38,520 --> 00:07:40,100
and it's basically calculated,
171

172
00:07:40,100 --> 00:07:42,410
that to be 10 plus five equals 15.
172

173
00:07:42,410 --> 00:07:44,810
And sure enough we get that value assigned it to our map
173

174
00:07:44,810 --> 00:07:47,940
my first number variable, then line 7 prints that out
174

175
00:07:47,940 --> 00:07:49,470
to the screen.
175

176
00:07:49,470 --> 00:07:50,760
Now we can get a lot more complex,
176

177
00:07:50,760 --> 00:07:53,350
let's do that just before we finish the video.
177

178
00:07:53,350 --> 00:07:55,550
So we can change this to something like say,
178

179
00:07:55,550 --> 00:07:57,850
let's put parentheses around the 10 plus five,
179

180
00:07:59,450 --> 00:08:02,480
and then we'll add a plus in another set of parentheses,
180

181
00:08:02,480 --> 00:08:05,073
and then now we're gonna put two multiplied by 10.
181

182
00:08:06,160 --> 00:08:09,580
That should give us 35, 10 plus five, that's 15,
182

183
00:08:09,580 --> 00:08:12,800
plus two times 10, the two times 10 is 20,
183

184
00:08:12,800 --> 00:08:15,513
That's 15 plus 20 is 35, let's run that.
184

185
00:08:17,510 --> 00:08:19,963
And sure enough we get the value 35 showing.
185

186
00:08:20,940 --> 00:08:22,900
So you saw that I introduced an operator there,
186

187
00:08:22,900 --> 00:08:23,770
recorded an operator.
187

188
00:08:23,770 --> 00:08:26,120
In fact we've got a number of operators there.
188

189
00:08:26,120 --> 00:08:27,540
We've got the plus operator
189

190
00:08:27,540 --> 00:08:29,603
and the multiplication operator showing.
190

191
00:08:30,720 --> 00:08:34,150
So Java operators or just operators perform an operation
191

192
00:08:34,150 --> 00:08:37,060
against the word on a variable or value.
192

193
00:08:37,060 --> 00:08:39,500
Plus, minus, divide and the multiplication
193

194
00:08:39,500 --> 00:08:42,390
of four common ones that I feel sure you familiar
194

195
00:08:42,390 --> 00:08:45,180
with, but there are lots more operators,
195

196
00:08:45,180 --> 00:08:47,700
and you'll be seeing those as we go through the course.
196

197
00:08:47,700 --> 00:08:49,540
By the way if you wanna get a downloadable list
197

198
00:08:49,540 --> 00:08:52,190
of all these slides navigate to the last section
198

199
00:08:52,190 --> 00:08:53,370
of the course and look for a lecture
199

200
00:08:53,370 --> 00:08:55,560
called downloading slides.
200

201
00:08:55,560 --> 00:08:56,950
All right, so let's end the video here
201

202
00:08:56,950 --> 00:08:59,330
and in the next one we'll figure out how to use
202

203
00:08:59,330 --> 00:09:01,490
other variables in expressions.
203

204
00:09:01,490 --> 00:09:02,790
See you in the next video.
