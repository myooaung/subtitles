1
1

00:00:05,440  -->  00:00:10,030
So in the previous videos, we went ahead
and found out about the ArrayList, and
2

2

00:00:10,030  -->  00:00:12,660
how useful it is, and
how to use that in Java.
3

3

00:00:12,660  -->  00:00:14,590
It's now time for a challenge.
4

4

00:00:14,590  -->  00:00:17,050
What I'm going to do is
type out a challenge
5

5

00:00:17,050  -->  00:00:20,700
to help you understand
how the ArrayList works.
6

6

00:00:20,700  -->  00:00:23,430
So let's get into what
the challenge is all about.
7

7

00:00:37,260  -->  00:00:39,380
Okay, so here is the challenge.
8

8

00:00:39,380  -->  00:00:44,230
We want to create a program that
implements a very simple mobile phone
9

9

00:00:44,230  -->  00:00:46,010
with the following capabilities.
10

10

00:00:46,010  -->  00:00:50,350
The ability to store, to modify,
to remove, and to query contact names.
11

11

00:00:50,350  -->  00:00:52,660
The contact names are those records for
12

12

00:00:52,660  -->  00:00:56,070
people who have been added as
a contact on the mobile phone.
13

13

00:00:56,070  -->  00:00:59,810
So what you'll wanna do is create
a separate class for contacts.
14

14

00:00:59,810  -->  00:01:02,930
And the actual fields we want
would be name and phone number.
15

15

00:01:02,930  -->  00:01:05,020
So you create that separate class.
16

16

00:01:05,020  -->  00:01:06,730
Then you create a master class,
17

17

00:01:06,730  -->  00:01:10,740
which we'll call mobile phone, and
that holds the ArrayList of contacts.
18

18

00:01:10,740  -->  00:01:14,670
And the mobile phone class itself
has the functionality listed above.
19

19

00:01:14,670  -->  00:01:17,910
And in addition, when we're running
the mobile phone application,
20

20

00:01:17,910  -->  00:01:20,870
you wanna add a menu of options
that are available to quit,
21

21

00:01:20,870  -->  00:01:25,490
to print a list of contacts, to add a new
contact, update an existing contact,
22

22

00:01:25,490  -->  00:01:29,330
to remove a contact, and
also the search slash find a contact.
23

23

00:01:29,330  -->  00:01:31,110
Be sure, when you're adding or
24

24

00:01:31,110  -->  00:01:36,190
updating, that you check if a contact
already exists, by using the name.
25

25

00:01:36,190  -->  00:01:39,210
So you'll just check to see whether
that name is already on file,
26

26

00:01:39,210  -->  00:01:41,730
in a contact record
that's in the ArrayList.
27

27

00:01:41,730  -->  00:01:45,180
And also, be sure not to expose any of
the inner workings of the ArrayList to
28

28

00:01:45,180  -->  00:01:46,750
any class that's accessing this.
29

29

00:01:46,750  -->  00:01:48,660
So in other words, no direct ints.
30

30

00:01:48,660  -->  00:01:50,600
No using .get(i) in the ArrayList.
31

31

00:01:50,600  -->  00:01:54,260
So you'll create a contact
object containing the name and
32

32

00:01:54,260  -->  00:01:56,660
the phone number, and
then you'll parse that through.
33

33

00:01:56,660  -->  00:01:58,210
And that will do all the processing.
34

34

00:01:58,210  -->  00:01:58,820
So in other words,
35

35

00:01:58,820  -->  00:02:03,130
with the mobile phone class we're only
dealing with contact objects only.
36

36

00:02:03,130  -->  00:02:06,430
So we're not exposing any
of that functionality.
37

37

00:02:06,430  -->  00:02:08,650
The private methods may indeed do that.
38

38

00:02:08,650  -->  00:02:12,210
And probably, you will want to do that,
so that you can update appropriately.
39

39

00:02:12,210  -->  00:02:16,170
But in terms of what you're showing
from a public method point of view,
40

40

00:02:16,170  -->  00:02:18,840
you shouldn't be showing integers and
using .get(i).
41

41

00:02:18,840  -->  00:02:23,630
So in other words, the people using
that class from the main method, from
42

42

00:02:23,630  -->  00:02:27,150
the public static void main method that
you're gonna be running your example code,
43

43

00:02:27,150  -->  00:02:30,640
you shouldn't be using ints or anything
like that to access particular elements.
44

44

00:02:30,640  -->  00:02:33,990
And that's all as we talked about in the
previous video, if anything is uncertain.
45

45

00:02:33,990  -->  00:02:35,250
So that's the challenge now.
46

46

00:02:35,250  -->  00:02:38,890
So go away and try that out,
and see how you get on.
47

47

00:02:38,890  -->  00:02:42,580
And pause the video now, and
when you're finished, come back and
48

48

00:02:42,580  -->  00:02:45,310
check your results with
what I've come up with.
49

49

00:02:49,870  -->  00:02:50,780
Okay, how did you get on?
50

50

00:02:50,780  -->  00:02:53,250
Did you figure it out and
get it all working?
51

51

00:02:53,250  -->  00:02:58,740
It's probably the most complex application
that we've actually done in the past.
52

52

00:02:58,740  -->  00:03:00,850
There's quite a few little
factors here to deal with.
53

53

00:03:00,850  -->  00:03:02,030
So let's make a start.
54

54

00:03:02,030  -->  00:03:06,030
So step one was to create that
program which we talked about.
55

55

00:03:06,030  -->  00:03:09,800
But specifically, we want to create
a separate class for contacts, and
56

56

00:03:09,800  -->  00:03:11,730
that's the name and the phone number.
57

57

00:03:11,730  -->  00:03:17,230
So what I'm going to do is just open up,
and select or click on my package.
58

58

00:03:17,230  -->  00:03:19,710
Click on and select New, then Java class.
59

59

00:03:19,710  -->  00:03:21,460
I'm just going to call it contact.
60

60

00:03:23,880  -->  00:03:26,680
And the contact record itself
is going to be very simple.
61

61

00:03:26,680  -->  00:03:28,830
It's going to have two fields.
62

62

00:03:28,830  -->  00:03:29,940
Private string name.
63

63

00:03:29,940  -->  00:03:37,870
Private string, and it'll be phone number.
64

64

00:03:37,870  -->  00:03:44,620
We're going to create a constructor
with both of those fields.
65

65

00:03:44,620  -->  00:03:47,700
And we're also going to
create just getters.
66

66

00:03:47,700  -->  00:03:49,370
We won't actually need to do setters.
67

67

00:03:49,370  -->  00:03:54,520
The reason we won't use setters is any
time we're dealing with a contact record,
68

68

00:03:54,520  -->  00:03:55,860
we're gonna use the constructor.
69

69

00:03:55,860  -->  00:03:57,210
But we do want to use the getter,
70

70

00:03:57,210  -->  00:03:59,930
so that we can actually
print out that information.
71

71

00:03:59,930  -->  00:04:02,080
So I'm just gonna select those.
72

72

00:04:02,080  -->  00:04:05,300
Now the other thing we want to do, which
you may not have thought about, is we want
73

73

00:04:05,300  -->  00:04:10,830
to expose a public static method, so
that we can create a new contact record.
74

74

00:04:10,830  -->  00:04:14,230
And this will be very useful
when we are accessing
75

75

00:04:14,230  -->  00:04:16,960
the functions that are built
into mobile phone.
76

76

00:04:16,960  -->  00:04:20,080
So instead of having to parse
the parameter for the name and
77

77

00:04:20,080  -->  00:04:22,630
the phone number,
we can create a contact record.
78

78

00:04:22,630  -->  00:04:26,570
And we can also create it without
creating a new separate object, and
79

79

00:04:26,570  -->  00:04:27,890
I'll show you as we move through.
80

80

00:04:27,890  -->  00:04:29,650
But for now, let's create that method.
81

81

00:04:29,650  -->  00:04:31,480
And it's really just a one-liner,
so it's public.
82

82

00:04:31,480  -->  00:04:35,600
Static is the important thing here, cuz
that means that we don't have to create
83

83

00:04:35,600  -->  00:04:38,010
a new object instance for
this contact class.
84

84

00:04:38,010  -->  00:04:40,890
It's gonna return a contact record.
85

85

00:04:40,890  -->  00:04:42,300
We're gonna do create contact.
86

86

00:04:42,300  -->  00:04:47,510
Now, this will accept two parameters,
string and the phone number.
87

87

00:04:47,510  -->  00:04:52,520
And we're going to return new
88

88

00:04:53,550  -->  00:04:57,480
contact, name, phone number.
89

89

00:04:57,480  -->  00:04:58,610
So you can see what's happening there.
90

90

00:04:58,610  -->  00:05:02,750
It's really just calling a constructor
to create a new contact record.
91

91

00:05:02,750  -->  00:05:04,730
Pretty simple, and
it returns that contact record.
92

92

00:05:04,730  -->  00:05:07,760
And you'll see this in use
later on in the application.
93

93

00:05:07,760  -->  00:05:10,320
Okay, next we need to create
our mobile phone class.
94

94

00:05:10,320  -->  00:05:11,650
We'll just go back and have a look again.
95

95

00:05:12,860  -->  00:05:15,500
A mobile phone class has
the functionality listed above.
96

96

00:05:15,500  -->  00:05:19,900
The various abilities to add, modify,
or remove and query the contact names.
97

97

00:05:19,900  -->  00:05:22,290
And it also contains
an ArrayList of contacts.
98

98

00:05:22,290  -->  00:05:24,380
So let's create this mobile phone class.
99

99

00:05:25,540  -->  00:05:28,300
New Class > New Java Class > Mobile Phone.
100

100

00:05:30,240  -->  00:05:34,180
And what we're gonna do there,
I didn't actually tell you to do this, but
101

101

00:05:34,180  -->  00:05:38,250
I'm gonna actually create an option for
it to store the mobile phone number,
102

102

00:05:38,250  -->  00:05:39,830
just to put in a constructor.
103

103

00:05:39,830  -->  00:05:42,750
It's certainly optional, and you won't
lose points if haven't got it, but
104

104

00:05:42,750  -->  00:05:44,520
I'll show you how it works shortly.
105

105

00:05:44,520  -->  00:05:47,050
But the important thing
here is the ArrayList.
106

106

00:05:47,050  -->  00:05:51,740
And in this case, it's gonna be ArrayList,
and it's going to be of contact records.
107

107

00:05:51,740  -->  00:05:54,620
So we're selecting contact instead of
string, which you've seen previously.
108

108

00:05:54,620  -->  00:05:58,780
We're going to accept that import,
and we're gonna call that myContacts.
109

109

00:06:00,340  -->  00:06:02,550
We're gonna create a constructor.
110

110

00:06:02,550  -->  00:06:05,550
And the constructor is going to
accept as a parameter the myNumber,
111

111

00:06:05,550  -->  00:06:07,470
and that's gonna be
the mobile phone number.
112

112

00:06:07,470  -->  00:06:10,800
And the other thing we should do in here
is we should initialize our ArrayList.
113

113

00:06:10,800  -->  00:06:13,940
And normally, when you've got an ArrayList
that you're using in a class like this,
114

114

00:06:13,940  -->  00:06:16,420
you want to initialize it In
the constructor, normally.
115

115

00:06:16,420  -->  00:06:18,330
In this case,
we're gonna initialize it with an empty
116

116

00:06:20,110  -->  00:06:22,950
list because we're gonna start off
with a clean slate, so to speak.
117

117

00:06:22,950  -->  00:06:24,570
So it's new ArrayList, like so.
118

118

00:06:24,570  -->  00:06:27,710
And it's just creating an empty list,
as you can see there.
119

119

00:06:27,710  -->  00:06:31,040
So moving on, what we need to do now is
start implementing some of the methods.
120

120

00:06:31,040  -->  00:06:33,860
And the first one I'm gonna start
with is the Add New Contact.
121

121

00:06:33,860  -->  00:06:37,770
So this is where we're actually adding
a new contact to our mobile phone.
122

122

00:06:37,770  -->  00:06:40,900
So to do that,
we're gonna create a public method.
123

123

00:06:40,900  -->  00:06:44,740
Public, and we've got to return Boolean
to see whether it was successful or
124

124

00:06:44,740  -->  00:06:49,670
not, cuz the hint to returning Boolean
was in the message that I left here.
125

125

00:06:49,670  -->  00:06:53,670
When adding or updating, be sure to
check if the contact already exists.
126

126

00:06:53,670  -->  00:06:55,400
And to check,
we're gonna be using the name.
127

127

00:06:56,870  -->  00:07:00,470
If we're checking to see whether it
exists, that implies that we want to tell
128

128

00:07:00,470  -->  00:07:05,090
the process that's calling the methods
whether it successfully added or updated.
129

129

00:07:05,090  -->  00:07:07,710
So what we're doing here is
we're gonna return Boolean.
130

130

00:07:07,710  -->  00:07:10,740
True would mean that it did,
in this case, get added successfully,
131

131

00:07:10,740  -->  00:07:13,610
because we're creating
the add new contact method.
132

132

00:07:13,610  -->  00:07:15,700
And false would mean that
there was a problem with it,
133

133

00:07:15,700  -->  00:07:17,610
that it was already on file.
134

134

00:07:17,610  -->  00:07:21,010
So I'm going to select Boolean, and
it's gonna be called Add New Contact.
135

135

00:07:22,940  -->  00:07:27,060
Now the input parameter is
gonna be Contact contact.
136

136

00:07:28,220  -->  00:07:31,410
So we're not sending the string and
the phone number here.
137

137

00:07:31,410  -->  00:07:33,860
We're actually sending
it a contact record,
138

138

00:07:33,860  -->  00:07:37,500
or contact object, which has been
created outside of this method.
139

139

00:07:37,500  -->  00:07:40,240
Then what we need to do then is test
to see whether it's on file, so
140

140

00:07:40,240  -->  00:07:48,880
we're gonna put
if(FindContact(contact.getName())
141

141

00:07:48,880  -->  00:07:50,570
>=0).
142

142

00:07:50,570  -->  00:07:54,020
And FindContact hasn't
been implemented yet.
143

143

00:07:54,020  -->  00:07:59,010
We're gonna put "Contact
is already on file".
144

144

00:07:59,010  -->  00:08:01,820
And we're going to return false.
145

145

00:08:04,680  -->  00:08:07,210
Otherwise, if it gets down here,
146

146

00:08:07,210  -->  00:08:13,260
then what we're going to do is we're
going to put myContacts.add(Contact).
147

147

00:08:13,260  -->  00:08:14,450
We're gonna add that to
the list of records.
148

148

00:08:14,450  -->  00:08:19,560
And a contact that has been parsed in
this method already contains the details,
149

149

00:08:19,560  -->  00:08:21,890
and the name and the phone number.
150

150

00:08:21,890  -->  00:08:23,680
The last line is going to return true,
151

151

00:08:23,680  -->  00:08:26,490
which means that we
successfully added the record.
152

152

00:08:26,490  -->  00:08:27,480
So that's our add method.
153

153

00:08:27,480  -->  00:08:29,730
And what we'll do next, now,
just to get it out of the way,
154

154

00:08:29,730  -->  00:08:32,260
is we're going to
implement the find contact.
155

155

00:08:32,260  -->  00:08:34,430
And what we need to do is,
as I was showing you before,
156

156

00:08:34,430  -->  00:08:37,120
we're going to implement
two find contact methods.
157

157

00:08:37,120  -->  00:08:39,620
In other words, we're going to
overload one of the methods.
158

158

00:08:39,620  -->  00:08:43,230
We're going to have one that returns
the index position, and we'll need that so
159

159

00:08:43,230  -->  00:08:45,760
we can actually edit that
within the ArrayList.
160

160

00:08:45,760  -->  00:08:47,930
But we're also going to return one,
that in this case,
161

161

00:08:47,930  -->  00:08:51,190
we can just parse the actual name,
and for it to find that in the list.
162

162

00:08:51,190  -->  00:08:54,910
So the first one we're going to implement
is the one that returns the integer.
163

163

00:08:54,910  -->  00:08:58,480
And we're going to make that
a private because it's not gonna
164

164

00:08:58,480  -->  00:08:59,360
be exposed publicly.
165

165

00:08:59,360  -->  00:09:01,210
It's only used within this class.
166

166

00:09:01,210  -->  00:09:03,770
And it's going to be one contact.
167

167

00:09:05,030  -->  00:09:09,450
It's still going to receive
a contact record itself.
168

168

00:09:11,550  -->  00:09:18,250
And we're gonna return
this.myContacts.index(Contact).
169

169

00:09:18,250  -->  00:09:22,510
And that's going to return an integer
showing us what the element
170

170

00:09:22,510  -->  00:09:26,480
position is in the array for
that particular contact object.
171

171

00:09:26,480  -->  00:09:30,100
Now keep in mind that the number that
will be returned will be zero or
172

172

00:09:30,100  -->  00:09:32,430
greater if it exists in the ArrayList, and
173

173

00:09:32,430  -->  00:09:35,690
it will return a number less
than zero if it doesn't exist.
174

174

00:09:35,690  -->  00:09:38,910
So we can just use that number to
determine whether it actually exists or
175

175

00:09:38,910  -->  00:09:40,060
not by doing it that way.
176

176

00:09:40,060  -->  00:09:41,500
So that's the first one.
177

177

00:09:41,500  -->  00:09:43,230
Again, that's returning an integer.
178

178

00:09:43,230  -->  00:09:45,760
And the second one we want
to return is also a private.
179

179

00:09:45,760  -->  00:09:48,170
We're going to overload it this time.
180

180

00:09:48,170  -->  00:09:51,190
It's going to be findContact, but
181

181

00:09:51,190  -->  00:09:56,430
it's going to be accepting a string,
so it's contactName.
182

182

00:09:58,530  -->  00:10:01,600
And what we're going to do is
loop through all the records.
183

183

00:10:01,600  -->  00:10:05,290
And we're gonna extract the name out, and
then compare that to the name that's been
184

184

00:10:05,290  -->  00:10:09,190
parsed, and return the index
position if it's actually on file.
185

185

00:10:09,190  -->  00:10:14,900
So to do that,
we're gonna put for(int i=0)
186

186

00:10:14,900  -->  00:10:19,650
i<this.myContacts.size, i++.
187

187

00:10:19,650  -->  00:10:23,340
We're gonna create a new object, so
188

188

00:10:23,340  -->  00:10:29,410
that's Contact contact =
this.myContacts.get(i).
189

189

00:10:29,410  -->  00:10:31,670
So we're creating a new contact object,
190

190

00:10:31,670  -->  00:10:35,250
which is basically the contact
object that's in the ArrayList.
191

191

00:10:35,250  -->  00:10:36,050
Then we're doing a test.
192

192

00:10:36,050  -->  00:10:40,490
We're gonna put ifcontact.getname.
193

193

00:10:40,490  -->  00:10:44,690
So we get the getname field
from the contact record.
194

194

00:10:44,690  -->  00:10:48,600
If that.= the contact name that
was parsed through this method.
195

195

00:10:48,600  -->  00:10:51,380
If it does, we're gonna return RA.
196

196

00:10:51,380  -->  00:10:53,090
RA being the element,
197

197

00:10:53,090  -->  00:10:56,780
the array position number in the
ArrayLlist that we found this record in.
198

198

00:10:56,780  -->  00:11:01,280
And we're getting that number so we can
decide to actually update it, if we want
199

199

00:11:01,280  -->  00:11:05,590
to, when we write the modifier method, or
in the case of the add new contact, above,
200

200

00:11:05,590  -->  00:11:07,880
we're testing to see whether
that number is greater than or
201

201

00:11:07,880  -->  00:11:10,060
equal to zero,
to determine whether it's on file or not.
202

202

00:11:10,060  -->  00:11:12,900
So the last thing we wanna
do is put a return -1 here.
203

203

00:11:12,900  -->  00:11:17,440
That's the last line, and what that means
is that it wasn't found, and to return -1.
204

204

00:11:17,440  -->  00:11:19,470
So getting back to add new contact,
205

205

00:11:19,470  -->  00:11:21,930
what that means is we're
actually doing a test here.
206

206

00:11:21,930  -->  00:11:25,100
If it's greater than or equal to zero,
the contact is on file.
207

207

00:11:25,100  -->  00:11:27,140
And because it's already on file,
we can't add it again.
208

208

00:11:27,140  -->  00:11:29,860
We should return an error
because it would be a duplicate.
209

209

00:11:29,860  -->  00:11:31,360
So we're returning false.
210

210

00:11:31,360  -->  00:11:34,610
So that's calling this method here
parsing the parameter of the name.
211

211

00:11:34,610  -->  00:11:38,680
Then again, we're just looping through all
the elements in the ArrayList, checking
212

212

00:11:38,680  -->  00:11:42,430
each one, checking the name to see whether
it's equal to the name that's been parsed.
213

213

00:11:42,430  -->  00:11:44,880
If it is,
we're gonna return that position.
214

214

00:11:44,880  -->  00:11:46,700
If it's not there,
we're gonna return negative one.
215

215

00:11:46,700  -->  00:11:47,300
So that's it.
216

216

00:11:47,300  -->  00:11:48,820
That's the find.
217

217

00:11:48,820  -->  00:11:52,200
So the next method we want to implement
now that we've done the add new contact is
218

218

00:11:52,200  -->  00:11:53,480
the update content.
219

219

00:11:53,480  -->  00:11:56,750
And you'll find it's very similar to
the start of the add new contact,
220

220

00:11:56,750  -->  00:11:58,880
so we need to actually
check what's there first.
221

221

00:11:58,880  -->  00:12:02,700
So we're gonna do a public cuz this is
something that we do want to be exposed.
222

222

00:12:03,900  -->  00:12:08,640
Public void update contact.
223

223

00:12:08,640  -->  00:12:10,140
Now, this is gonna have two parameters.
224

224

00:12:10,140  -->  00:12:13,830
Contact oldcontact,
225

225

00:12:13,830  -->  00:12:18,730
contact newcontact.
226

226

00:12:18,730  -->  00:12:21,220
So we've got the old contact
that we're searching for,
227

227

00:12:21,220  -->  00:12:22,620
which we're seeing is on file.
228

228

00:12:22,620  -->  00:12:26,830
And the new contact is the one that
we're gonna actually update it to.
229

229

00:12:26,830  -->  00:12:32,770
So what we're going to do first
is we're going to do a test.
230

230

00:12:32,770  -->  00:12:35,560
Int FoundPosition =
findContact(oldContact), like so.
231

231

00:12:35,560  -->  00:12:40,910
Then if(foundPosition <0).
232

232

00:12:40,910  -->  00:12:46,310
We actually want to return the message,
and the message should
233

233

00:12:46,310  -->  00:12:52,810
say allContact.getName was not found,
because
234

234

00:12:52,810  -->  00:12:56,990
we couldn't find it because the actual
position returned was less than zero.
235

235

00:12:56,990  -->  00:13:00,350
And what we should have done
there is returned false.
236

236

00:13:00,350  -->  00:13:01,430
That shouldn't have been a void.
237

237

00:13:01,430  -->  00:13:02,770
That should have actually been a Boolean,
238

238

00:13:02,770  -->  00:13:06,320
because we're returning a state whether
we succeeded updating it or not.
239

239

00:13:06,320  -->  00:13:07,300
Return false.
240

240

00:13:07,300  -->  00:13:11,930
And so if you've got to here, we know
that the foundPosition is greater than or
241

241

00:13:11,930  -->  00:13:12,560
equal to 0.
242

242

00:13:12,560  -->  00:13:16,470
And if it is, all we need to
do is to update the ArrayList.
243

243

00:13:16,470  -->  00:13:21,200
And to update it, it's .myContacts.set.
244

244

00:13:21,200  -->  00:13:22,370
Parse the found position.
245

245

00:13:22,370  -->  00:13:24,470
So, in other words,
the element we wanna update.
246

246

00:13:24,470  -->  00:13:26,870
And then we also wanna parse the new item.
247

247

00:13:26,870  -->  00:13:27,760
So it's the new contact,
248

248

00:13:27,760  -->  00:13:31,530
and that's going to replace
the old record with the new one.
249

249

00:13:31,530  -->  00:13:37,930
Then we'll print out a message
to put oldContact.getname
250

250

00:13:37,930  -->  00:13:45,250
was replaced with newContact.getName,
and then returned true.
251

251

00:13:46,420  -->  00:13:49,550
So that's the update contact method,
developed.
252

252

00:13:49,550  -->  00:13:51,890
So what I'm going to do is I'm
gonna pause the video here now,
253

253

00:13:51,890  -->  00:13:53,320
cuz it's getting a little bit long.
254

254

00:13:53,320  -->  00:13:56,140
And we'll come back and
hopefully finish this off, and
255

255

00:13:56,140  -->  00:13:58,010
actually run this in the next video.
