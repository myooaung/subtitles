1
1

00:00:05,450  -->  00:00:09,700
So in this video we're going to talk about
the concept of auto boxing and unboxing.
2

2

00:00:09,700  -->  00:00:13,250
So to start with we're just gonna have
a little brief recap of arrays and
3

3

00:00:13,250  -->  00:00:15,560
array lists and
we'll move on to autoboxing.
4

4

00:00:15,560  -->  00:00:18,930
So firstly, you're aware that we can do
something like this, no doubt because
5

5

00:00:18,930  -->  00:00:22,010
we've actually been through this with
a code creating a regular array.
6

6

00:00:22,010  -->  00:00:27,620
Let's just call that stringArray
equals new String(10).
7

7

00:00:27,620  -->  00:00:30,280
And likewise we could do that for
8

8

00:00:30,280  -->  00:00:36,120
an integer if we wanted to new int(10) so
that's creating array.
9

9

00:00:36,120  -->  00:00:39,600
You've seen that before,
I've ten elements starting from position,
10

10

00:00:39,600  -->  00:00:42,420
element 0 through 9 and
we can also create an array list.
11

11

00:00:42,420  -->  00:00:44,720
We can do ArrayList String.
12

12

00:00:44,720  -->  00:00:47,320
You've seen this before and
13

13

00:00:47,320  -->  00:00:52,870
we'll call that string arrayList
= new arrayList like so.
14

14

00:00:52,870  -->  00:01:00,690
And we can use that and then we can do
something like stringArrayList.add "Tim".
15

15

00:01:00,690  -->  00:01:04,530
And that would add an element to
the arrayList and we would actually add
16

16

00:01:04,530  -->  00:01:08,330
an object of the type string to
the arrayList for us automatically.
17

17

00:01:08,330  -->  00:01:11,280
But interestingly enough,
what we can't do is something like this.
18

18

00:01:11,280  -->  00:01:15,820
We can't do an arrayList int
19

19

00:01:15,820  -->  00:01:20,960
inarrayList = new ArrayList.
20

20

00:01:20,960  -->  00:01:21,980
We actually get an error.
21

21

00:01:21,980  -->  00:01:25,710
And the error we actually get is,
type argument cannot be of primitive type.
22

22

00:01:25,710  -->  00:01:31,080
And this, as it turns out, is an issue
because a primitive type is not a class.
23

23

00:01:31,080  -->  00:01:33,180
And we actually need that,
a class reference here,
24

24

00:01:33,180  -->  00:01:36,740
to be able to use that to be able
to save something to an arrayList.
25

25

00:01:36,740  -->  00:01:41,280
So, if we had a list of integers, we
can't save them based on what we know so
26

26

00:01:41,280  -->  00:01:43,180
far of Java, in an arrayList.
27

27

00:01:43,180  -->  00:01:46,190
What we could do, for example,
we could do something like this,
28

28

00:01:46,190  -->  00:01:47,350
we could create a class.
29

29

00:01:47,350  -->  00:01:50,820
I'm just going to create it in here,
we can put create, and
30

30

00:01:50,820  -->  00:01:57,180
we'll do type in class, and
we'll call it intClass.
31

31

00:01:57,180  -->  00:02:01,600
We can have a private int myValue.
32

32

00:02:01,600  -->  00:02:02,610
We can add a constructor.
33

33

00:02:04,900  -->  00:02:07,370
And we can also add a getter and setter.
34

34

00:02:07,370  -->  00:02:09,720
Like so, very simple little class,
35

35

00:02:09,720  -->  00:02:12,000
as you can see there, and
we can do something like this.
36

36

00:02:12,000  -->  00:02:14,280
So we can just comment this line out for
now.
37

37

00:02:14,280  -->  00:02:20,480
And we could do something like arrayList
38

38

00:02:20,480  -->  00:02:25,780
= intClass = intClassArrayList
39

39

00:02:25,780  -->  00:02:30,580
= new ArrayList like so.
40

40

00:02:30,580  -->  00:02:34,120
And then we could do
intClassArrayList.add.
41

41

00:02:34,120  -->  00:02:38,110
So we could do something
like new IntClass(54) and
42

42

00:02:38,110  -->  00:02:43,320
what that would do would be in the first
array element in the array list.
43

43

00:02:43,320  -->  00:02:47,700
It would actually add an object of
type IntClass with the value 54 and
44

44

00:02:47,700  -->  00:02:49,790
obviously this would the class.
45

45

00:02:49,790  -->  00:02:54,010
This would be the class that the objects
being created from that would be added to
46

46

00:02:54,010  -->  00:02:55,970
the arrayList, so that would work.
47

47

00:02:55,970  -->  00:03:00,330
It's a little bit messy because there's
all this extra constructor code and
48

48

00:03:00,330  -->  00:03:03,890
there's getters and setters and so
forth that we'd need to create to do that.
49

49

00:03:03,890  -->  00:03:06,520
So wouldn't it be good if there
was an easier way to do this and
50

50

00:03:06,520  -->  00:03:09,080
for all the primitive types,
the variables,
51

51

00:03:09,080  -->  00:03:12,780
the data types, if there was a way
to actually use those as objects.
52

52

00:03:12,780  -->  00:03:16,440
Well that's what autoboxing is all
about because Java does provide us
53

53

00:03:16,440  -->  00:03:17,540
with that functionality.
54

54

00:03:17,540  -->  00:03:20,630
Now, you might be looking at the string
and saying to yourself, well hang on,
55

55

00:03:20,630  -->  00:03:23,050
string's a primitive type,
why isn't that working?
56

56

00:03:23,050  -->  00:03:24,810
Why is that working you should say.
57

57

00:03:24,810  -->  00:03:28,660
Well if you recall,
String in fact is not a primitive type.
58

58

00:03:28,660  -->  00:03:30,670
It's actually a class in its own right.
59

59

00:03:30,670  -->  00:03:32,690
And usually, you can actually tell that.
60

60

00:03:32,690  -->  00:03:35,800
On the Mac, I'm gonna hold down Ctrl and
hover over it and click.
61

61

00:03:35,800  -->  00:03:39,200
And you can see that String is
actually a class in its own right.
62

62

00:03:39,200  -->  00:03:42,070
It's actually fully a class, and
it's got all these other bits and
63

63

00:03:42,070  -->  00:03:45,420
pieces in it, and this is some of
the Java source code relating to a class.
64

64

00:03:45,420  -->  00:03:46,850
So that's the reason why that is working,
65

65

00:03:46,850  -->  00:03:49,810
and that is because that's
actually a class in its own right.
66

66

00:03:49,810  -->  00:03:52,700
Now contrasting that to going
back to our main again, and
67

67

00:03:52,700  -->  00:03:56,680
if we try to do the same thing to integer,
I'm holding command on my Mac.
68

68

00:03:56,680  -->  00:03:58,010
And I can't click on that.
69

69

00:03:58,010  -->  00:03:59,300
I can hover over the string.
70

70

00:03:59,300  -->  00:04:00,840
But can't have the integer.
71

71

00:04:00,840  -->  00:04:05,100
I can hover over the integer, but
nothing happens when I go to click it.
72

72

00:04:05,100  -->  00:04:07,220
Hover and that's because it isn't a class.
73

73

00:04:07,220  -->  00:04:11,060
So the bottom line is for the arrayList
but also for lots of these classes and
74

74

00:04:11,060  -->  00:04:14,900
lots of other Java classes,
it needs to be passed a class.
75

75

00:04:14,900  -->  00:04:16,190
In other words, passed an object.
76

76

00:04:16,190  -->  00:04:19,580
So it's very common for you to want
to use these primitive types, and
77

77

00:04:19,580  -->  00:04:21,580
to be able to pass those as classes.
78

78

00:04:21,580  -->  00:04:23,840
So again, you could do something
like this example up here,
79

79

00:04:23,840  -->  00:04:28,400
where you could create your own class and
parse it, and yes, that will work.
80

80

00:04:28,400  -->  00:04:29,740
That's not really what we want to do.
81

81

00:04:29,740  -->  00:04:31,350
There's actually a better
way of doing that and
82

82

00:04:31,350  -->  00:04:33,540
we can use the concept of autoboxing.
83

83

00:04:33,540  -->  00:04:39,420
And it turns out that Java supports
some primitive types by using a class,
84

84

00:04:39,420  -->  00:04:43,390
an object wrapper if you will, for
the class because if you think about it,
85

85

00:04:43,390  -->  00:04:47,490
what we've done with this
class here that we created.
86

86

00:04:47,490  -->  00:04:51,480
We actually created a wrapper, so in other
words we wrapped and we sort of said
87

87

00:04:51,480  -->  00:04:56,960
the integer myValue is the variable that's
gonna contain the value for this class.
88

88

00:04:56,960  -->  00:04:58,440
And we wrapped up in a class.
89

89

00:04:58,440  -->  00:05:01,600
We made sure that it wasn't
publicly available with a variable.
90

90

00:05:01,600  -->  00:05:06,030
We can only update the variable using
a constructor initially and then a setter.
91

91

00:05:06,030  -->  00:05:08,550
And you can retrieve the value
only by using the getter.
92

92

00:05:08,550  -->  00:05:10,230
So that's sort of
the concept of a wrapper.
93

93

00:05:10,230  -->  00:05:12,560
Where you're actually wrapping
this functionality and
94

94

00:05:12,560  -->  00:05:15,680
the way to access this
is the access modifier.
95

95

00:05:15,680  -->  00:05:17,550
So that not everyone can access it.
96

96

00:05:17,550  -->  00:05:19,630
Well it turns out that Java's
got a lot of these in built.
97

97

00:05:19,630  -->  00:05:22,590
So for example in the case of Integer,
we can do something like this.
98

98

00:05:22,590  -->  00:05:25,970
We can put Integer, and
99

99

00:05:25,970  -->  00:05:30,880
we can put integer = new Integer.
100

100

00:05:30,880  -->  00:05:32,840
And you can see that
the default option for
101

101

00:05:32,840  -->  00:05:36,770
a new Integer when we're creating a new
object, we can actually pass an int value.
102

102

00:05:36,770  -->  00:05:40,440
So if we do something like that, and
the difference between Integer and
103

103

00:05:40,440  -->  00:05:42,580
int is that Integer's actually a class.
104

104

00:05:42,580  -->  00:05:46,350
So again, if we hover over this we can
see that I can actually click on that.
105

105

00:05:46,350  -->  00:05:48,880
And we get the fact that
it's actually a class.
106

106

00:05:48,880  -->  00:05:51,640
And all this other stuff relating
to how it's set up within Java.
107

107

00:05:51,640  -->  00:05:55,770
So you'll find that there's one of those,
one of these for each primitive type.
108

108

00:05:55,770  -->  00:05:57,700
So there's one there for an int.
109

109

00:05:57,700  -->  00:05:59,510
Which will see is called the Integer.
110

110

00:05:59,510  -->  00:06:00,160
There's a Double.
111

111

00:06:00,160  -->  00:06:01,690
I wanna do a couple.
112

112

00:06:01,690  -->  00:06:02,660
I won't do all of them.
113

113

00:06:02,660  -->  00:06:04,690
But the other one's called Double.
114

114

00:06:04,690  -->  00:06:08,810
We could call that doubleValue
because I can't use the word Double
115

115

00:06:08,810  -->  00:06:13,030
cuz it's already keyword = new Double.
116

116

00:06:13,030  -->  00:06:15,950
And if you hover over you can see
it's hunting for doubleValues so
117

117

00:06:15,950  -->  00:06:20,430
we can put something like (12.25) and that
will quite happily accept that as a value.
118

118

00:06:20,430  -->  00:06:23,860
So that helps us in a sense that
we can now use in array list.
119

119

00:06:23,860  -->  00:06:30,360
So we can do something
like arrayList<i></i>
120

120

00:06:30,360  -->  00:06:36,410
We can call it intArrayList
= new arrayList.
121

121

00:06:36,410  -->  00:06:40,280
And you can see now Java's quite happy
with that because this is actually a valid
122

122

00:06:40,280  -->  00:06:43,850
class unlike what we were trying to do
up here earlier when we were trying to
123

123

00:06:43,850  -->  00:06:45,950
actually assign a primitive type into it.
124

124

00:06:45,950  -->  00:06:48,620
So let's just use it as an example
just to see actually how it works.
125

125

00:06:48,620  -->  00:06:51,890
Let's now we've created our Integer class,
126

126

00:06:51,890  -->  00:06:55,930
let's just do a full loop and
actually add some entries.
127

127

00:06:55,930  -->  00:07:03,150
So a typical way to add them would be
something like for(int i=0; i<=10; i++).
128

128

00:07:03,150  -->  00:07:09,040
We could put intArrayList oops,
intArrayList .add.
129

129

00:07:09,040  -->  00:07:12,020
And noticing here that it's
wanting an Integer now.
130

130

00:07:12,020  -->  00:07:13,240
This is the one we're going to select.
131

131

00:07:13,240  -->  00:07:17,970
The integer is the type for this variable
intArrayList so I'm gonna add or
132

132

00:07:17,970  -->  00:07:24,400
we could do something
like (Integer.valueOf i).
133

133

00:07:24,400  -->  00:07:29,400
And what the .valueOf is actually taking
the value of i as the primitive type and
134

134

00:07:29,400  -->  00:07:33,590
converting it automatically into
the Integer class I should say so
135

135

00:07:33,590  -->  00:07:35,410
that we can use it as a class.
136

136

00:07:35,410  -->  00:07:40,230
Therefore then when we come to execute
this, we can do something like,
137

137

00:07:40,230  -->  00:07:42,320
so we'll just copy that code.
138

138

00:07:45,930  -->  00:07:51,110
And need that first line and
we'll do something like (i + let's
139

139

00:07:51,110  -->  00:07:56,110
just output the contents, and
it will be intArrayList.get,
140

140

00:07:56,110  -->  00:08:00,380
the element that we want to retrieve and
.intValue.
141

141

00:08:00,380  -->  00:08:05,380
And notice there's a int value which is a
value which converts it back from Integer
142

142

00:08:05,380  -->  00:08:08,570
from the Integer class back into
an int type to a primitive type.
143

143

00:08:08,570  -->  00:08:09,670
Again, that's how we convert it.
144

144

00:08:09,670  -->  00:08:13,310
So essentially the two parts that we're
dealing with here is this part here,
145

145

00:08:13,310  -->  00:08:14,730
this is auto boxing.
146

146

00:08:14,730  -->  00:08:18,910
This is when we're creating or
converting an integer,
147

147

00:08:18,910  -->  00:08:22,820
a base primitive type int to an Integer,
that's called auto boxing.
148

148

00:08:22,820  -->  00:08:26,060
So we're taking the primitive type and
we're going to the object wrapper.
149

149

00:08:26,060  -->  00:08:27,890
We're going to the class,
that's called autoboxing.
150

150

00:08:27,890  -->  00:08:32,330
Unboxing is where we're taking it from
the class or from the object wrapper and
151

151

00:08:32,330  -->  00:08:34,790
converting it back to a primitive type.
152

152

00:08:34,790  -->  00:08:38,060
So that's the difference between
autoboxing and unboxing.
153

153

00:08:38,060  -->  00:08:41,490
So looking at that code, you can see
that it's pretty straightforward and
154

154

00:08:41,490  -->  00:08:44,980
if we run that, we should find that we
get the results that we think we'll get.
155

155

00:08:44,980  -->  00:08:48,320
We should just get the output to show
to those integers are being saved.
156

156

00:08:50,130  -->  00:08:53,620
And we can see we get 0,
1, 2, 3, 4, 5, 6, 7, 8, 9,
157

157

00:08:53,620  -->  00:08:57,320
10 as we would expect based on
the code that we have developed.
158

158

00:08:57,320  -->  00:08:59,070
So nothing particularly hard there, but
159

159

00:08:59,070  -->  00:09:02,150
it turns out that Java actually
even makes things easy for you.
160

160

00:09:02,150  -->  00:09:04,710
I wanted to show you the long
way of doing it first.
161

161

00:09:04,710  -->  00:09:09,420
And now I want to show you the short way,
cuz it turns out that it's actually easier
162

162

00:09:09,420  -->  00:09:14,140
than you think to create some code to
convert to using this autoboxing and
163

163

00:09:14,140  -->  00:09:14,830
unboxing.
164

164

00:09:14,830  -->  00:09:22,470
So for example what we can do is something
like this Integer myIntValue = 56.
165

165

00:09:22,470  -->  00:09:26,390
So looking at that, you'll probably
think well hang on, why is that working,
166

166

00:09:26,390  -->  00:09:28,210
because surely that's incorrect.
167

167

00:09:28,210  -->  00:09:32,510
Because we haven't got any reference
that we have up here Integer = new.
168

168

00:09:32,510  -->  00:09:36,510
So that when we're creating a new class
you would normally have to use the new key
169

169

00:09:36,510  -->  00:09:39,910
word and then the name of the class and
then pass in the parameters for
170

170

00:09:39,910  -->  00:09:40,900
the constructor.
171

171

00:09:40,900  -->  00:09:45,570
Well it turns out that Java is helping you
out here by issuing a bit of a shortcut.
172

172

00:09:45,570  -->  00:09:49,850
So when you actually type that command in
what happens is when the code is compiled
173

173

00:09:49,850  -->  00:09:51,380
this code will be executed.
174

174

00:09:51,380  -->  00:09:56,240
So the Integer.value(56) I think I typed.
175

175

00:09:56,240  -->  00:09:58,540
So that's about what
happened at compiled time.
176

176

00:09:58,540  -->  00:10:04,040
So you can type it like this but at
compile time, it gets converted to that.
177

177

00:10:04,040  -->  00:10:05,840
In other words Java's doing
the hard work for you.
178

178

00:10:05,840  -->  00:10:10,390
Because it recognizes and it says okay
this is an integer, an integer object so
179

179

00:10:10,390  -->  00:10:13,220
this is a class and
you entered an integer here, so
180

180

00:10:13,220  -->  00:10:15,370
therefore I know what to do with it.
181

181

00:10:15,370  -->  00:10:19,680
I'm gonna actually use this reference
here to actually create the proper
182

182

00:10:19,680  -->  00:10:22,870
class based on the proper object,
in this case, myIntValue.
183

183

00:10:22,870  -->  00:10:24,670
Now if you typed something like 56.56,
184

184

00:10:24,670  -->  00:10:28,910
that's different because
you've now typed a Double.
185

185

00:10:28,910  -->  00:10:32,080
And it's actually saying to
you there it's looking for
186

186

00:10:32,080  -->  00:10:34,220
an integer and you've typed in a Double.
187

187

00:10:34,220  -->  00:10:36,970
To get that to work,
you'd actually have to use a Double class,
188

188

00:10:36,970  -->  00:10:38,840
the object wrapper Double
to get that to work.
189

189

00:10:38,840  -->  00:10:40,520
And the other thing I
want to show you also is,
190

190

00:10:40,520  -->  00:10:42,420
if I just go back to
make that valid again.
191

191

00:10:42,420  -->  00:10:48,870
We can then type int myInt = myIntValue.
192

192

00:10:48,870  -->  00:10:52,630
And again looking at that you'll say well
hang on, this is a primitive type and
193

193

00:10:52,630  -->  00:10:54,420
this is an object.
194

194

00:10:54,420  -->  00:10:55,670
How is that working?
195

195

00:10:55,670  -->  00:10:59,330
Well what's actually happening is Java's
actually doing something like this.
196

196

00:10:59,330  -->  00:11:05,900
It's actually putting Integer, or
it's actually putting myInt.intValue.
197

197

00:11:05,900  -->  00:11:07,910
It's putting that code in for
us automatically.
198

198

00:11:07,910  -->  00:11:11,750
So in other words, if we put that code,
copy that and we paste it in there, that's
199

199

00:11:11,750  -->  00:11:14,700
essentially what it's actually doing is
oops, that was meant to be myIntValue.
200

200

00:11:16,480  -->  00:11:17,750
That's actually what it's doing.
201

201

00:11:20,260  -->  00:11:21,360
Fix that up.
202

202

00:11:21,360  -->  00:11:24,750
So basically it's looking at myIntValue
and saying, well that's an Integer,
203

203

00:11:24,750  -->  00:11:25,840
an object wrapper.
204

204

00:11:25,840  -->  00:11:27,700
And it's actually putting
the .intValue in.
205

205

00:11:27,700  -->  00:11:31,990
If we have a look at the method .intValue,
you can see that returns an int.
206

206

00:11:31,990  -->  00:11:33,940
So that's why that's working for us.
207

207

00:11:33,940  -->  00:11:36,540
So this is the concept of autoboxing and
unboxing.
208

208

00:11:36,540  -->  00:11:40,240
And you can see that Java is trying to
make things easier for you by actually
209

209

00:11:40,240  -->  00:11:44,130
at compile time changing the code that you
are typing to what the correct code is for
210

210

00:11:44,130  -->  00:11:44,830
it to work.
211

211

00:11:44,830  -->  00:11:47,700
And preventing compile time
errors that come up, and
212

212

00:11:47,700  -->  00:11:49,830
really just generating
some of the code for you.
213

213

00:11:49,830  -->  00:11:53,220
So it's important to understand that
what's happening behind the scenes.
214

214

00:11:53,220  -->  00:11:56,360
Cuz otherwise you'll look at the code and
think well this makes no sense at all.
215

215

00:11:56,360  -->  00:11:59,110
So there's nothing stopping you
from doing things the long way.
216

216

00:11:59,110  -->  00:12:03,480
Doing something like that perhaps to
create a new Double or to use in the case
217

217

00:12:03,480  -->  00:12:07,880
that I showed you up here,
we can actually type Integer.value(56).
218

218

00:12:07,880  -->  00:12:10,760
If you type it like that,
that would certainly work as well but
219

219

00:12:10,760  -->  00:12:14,480
just probably with these days with a
modern compilers it's best to actually use
220

220

00:12:14,480  -->  00:12:16,490
it this way because it's less code.
221

221

00:12:16,490  -->  00:12:19,390
Easier to read, and
just makes a lot of sense.
222

222

00:12:19,390  -->  00:12:21,750
So that's just to show
you that this works.
223

223

00:12:21,750  -->  00:12:25,330
Instead of using integers, because we've
used those a lot in previous examples,
224

224

00:12:25,330  -->  00:12:28,470
let's do something with a Double type,
just so it makes sense in a loop.
225

225

00:12:28,470  -->  00:12:31,130
So we can put something like for.
226

226

00:12:31,130  -->  00:12:33,230
Actually what we'll do first
is we'll create an arrayList.
227

227

00:12:33,230  -->  00:12:35,140
So it's arrayList Double.
228

228

00:12:36,570  -->  00:12:43,920
We'll put myDoubleValues = new
arrayList = new arrayList=DoubleValues.
229

229

00:12:43,920  -->  00:12:49,650
Now we're gonna put something like
for(double we'll call it dbl,
230

230

00:12:49,650  -->  00:12:53,910
our variable,
dbl equals we'll start on 0.0.
231

231

00:12:53,910  -->  00:12:57,740
Then we'll put something
like all dbl>=10.0.
232

232

00:12:57,740  -->  00:12:59,920
Again, we're putting the decimal
points because it's a double.
233

233

00:12:59,920  -->  00:13:03,500
We wanna increment double += 0.5.
234

234

00:13:03,500  -->  00:13:08,320
So we're gonna increment it by0.5 each
time we go through the loop starting at
235

235

00:13:08,320  -->  00:13:10,310
0.0 until we get to 10.0.
236

236

00:13:10,310  -->  00:13:15,810
So with all that boxing we can
type the name of the array,
237

237

00:13:15,810  -->  00:13:23,080
so that's myDouble Values.add,
then we can put Double.value of dbl.
238

238

00:13:23,080  -->  00:13:27,080
And that would certainly work and then
we could actually use that loop again.
239

239

00:13:27,080  -->  00:13:28,700
What we'll do is
a different loop this time.
240

240

00:13:28,700  -->  00:13:33,910
We'll actually iterate
through the entire array so
241

241

00:13:33,910  -->  00:13:38,530
we'll use an integer this time i=0,
i < and
242

242

00:13:38,530  -->  00:13:43,170
it's gonna be myDoubleValues.size i ++.
243

243

00:13:43,170  -->  00:13:49,080
And we're gonna put double
value = myDoubleValues.get(i).,
244

244

00:13:49,080  -->  00:13:55,490
this time it's gonna be .doubleValue,
because we're converting to a double, and
245

245

00:13:55,490  -->  00:13:59,410
you can see on the right over here it's
actually going to be returning a double.
246

246

00:13:59,410  -->  00:14:00,580
So that's correct.
247

247

00:14:00,580  -->  00:14:03,070
So that's gonna return that as a double,
and then we can actually print that out.
248

248

00:14:03,070  -->  00:14:09,410
We could put something like i + value.
249

249

00:14:09,410  -->  00:14:10,540
So that's one way of doing it.
250

250

00:14:10,540  -->  00:14:14,140
So the first example,
double.valueOf, that's autoboxing.
251

251

00:14:14,140  -->  00:14:17,910
We're converting the primitive
type double to the object wrapper,
252

252

00:14:17,910  -->  00:14:20,770
to the object in other words,
that's autoboxing.
253

253

00:14:20,770  -->  00:14:24,970
And here we're using the .doubleValue so
we're actually unboxing,
254

254

00:14:24,970  -->  00:14:27,330
we're converting it from the object.
255

255

00:14:27,330  -->  00:14:29,890
The object wrapper back
into the primitive top of
256

256

00:14:29,890  -->  00:14:31,590
this case the double which is value.
257

257

00:14:31,590  -->  00:14:34,130
So let's just run that,
make sure it works,
258

258

00:14:34,130  -->  00:14:36,310
then we'll just do the shortcuts
to this code again.
259

259

00:14:36,310  -->  00:14:39,800
And I've got a typo here,
should be an i = like that and
260

260

00:14:39,800  -->  00:14:45,380
we'll just try running them again Okay,
so that's better and
261

261

00:14:45,380  -->  00:14:48,700
what I might do just to make things
a little bit easy to read, let's just
262

262

00:14:48,700  -->  00:14:52,040
get rid of those from the output so
that we don't see that in the output.
263

263

00:14:52,040  -->  00:14:55,140
Then we run it again and
there's our example.
264

264

00:14:55,140  -->  00:14:57,840
Starting from 0, we've incremented
by 0.5 each time, 0.5, 1,
265

265

00:14:57,840  -->  00:15:01,410
1.5, right through to 10,
and there's 20 elements.
266

266

00:15:01,410  -->  00:15:03,930
So again, that's the autoboxing and
unboxing.
267

267

00:15:03,930  -->  00:15:07,230
But equally, as I mentioned,
we could also use the shortcut.
268

268

00:15:07,230  -->  00:15:11,660
So the shortcut would actually be to
remove this altogether, and just add dbl.
269

269

00:15:11,660  -->  00:15:13,480
And likewise for this,
we could do the same thing.
270

270

00:15:13,480  -->  00:15:15,680
We could actually get rid of this
.doubleValue if you wanted to,
271

271

00:15:15,680  -->  00:15:17,600
and the code will still compile and run.
272

272

00:15:19,910  -->  00:15:22,890
And the reason that's
running is behind the scenes.
273

273

00:15:22,890  -->  00:15:27,910
Java is actually adding those
commands using the dot value of, and
274

274

00:15:27,910  -->  00:15:32,210
the dot, in this case doubleValue to
actually retrieve those values back and
275

275

00:15:32,210  -->  00:15:33,600
convert them for us automatically.
276

276

00:15:33,600  -->  00:15:37,670
So that's auto boxing, and unboxing, good
concept to understand when you need to
277

277

00:15:37,670  -->  00:15:40,330
actually store the common primitive types.
278

278

00:15:40,330  -->  00:15:44,090
The primitive data types that
are part of Java in array lists or
279

279

00:15:44,090  -->  00:15:48,960
pass them as parameters using objects,
especially to some other Java
280

280

00:15:48,960  -->  00:15:52,270
code that's out there these days that
will actually require you to use these.
281

281

00:15:52,270  -->  00:15:54,050
So they are used quite a bit.
282

282

00:15:54,050  -->  00:15:56,620
The object wrapper equivalence for
the primitive type, so
283

283

00:15:56,620  -->  00:15:58,100
it's certainly good to know those.
284

284

00:15:58,100  -->  00:16:01,500
And just in finishing off,
as I mentioned there's one of these for
285

285

00:16:01,500  -->  00:16:04,760
each primitive type so
you can probably find those easily enough.
286

286

00:16:04,760  -->  00:16:06,750
So I'm going to end the video here.
287

287

00:16:06,750  -->  00:16:10,540
In the next video I'm going to show you
the challenge for this part of the course.
288

288

00:16:10,540  -->  00:16:13,050
And type that out and
then you can have a go at that.
289

289

00:16:13,050  -->  00:16:14,710
So I'll see you in that next video.
