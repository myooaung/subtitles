WEBVTT
0
1
00:00:05.380 --> 00:00:09.200
So back in section nine,
we looked at three of Java's list types.
1

2
00:00:09.200 --> 00:00:14.500
That was the list interface, the array
list, and also the linked list classes.
2

3
00:00:14.500 --> 00:00:18.080
Now those form part of the Java
collections framework, and
3

4
00:00:18.080 --> 00:00:23.750
that framework also includes things
like sets Maps, trees, and ques.
4

5
00:00:23.750 --> 00:00:28.660
So at the top level of the collections
framework is the collections class.
5

6
00:00:28.660 --> 00:00:33.190
Now this exposes static methods
that you can operate on collections
6

7
00:00:33.190 --> 00:00:35.890
such as the sort method that
we've used previously but
7

8
00:00:35.890 --> 00:00:39.690
they also return collection
objects such as list method.
8

9
00:00:39.690 --> 00:00:42.560
Now the interfaces in
the collection framework,
9

10
00:00:42.560 --> 00:00:45.700
what they do is they allow
the framework to be extended.
10

11
00:00:45.700 --> 00:00:50.110
And they actually define methods for
all the fundamental operations that
11

12
00:00:50.110 --> 00:00:53.200
really are required for
the various collection types.
12

13
00:00:53.200 --> 00:00:56.580
Now one of the design goals of
the collections framework was that there
13

14
00:00:56.580 --> 00:01:00.160
should be good interoperability
amongst various collections, so
14

15
00:01:00.160 --> 00:01:02.610
not just the ones included
in the framework.
15

16
00:01:02.610 --> 00:01:06.990
But literally anything that may
also be created in the future
16

17
00:01:06.990 --> 00:01:09.680
that is a reasonable
representation of a collection.
17

18
00:01:09.680 --> 00:01:11.700
Now that also includes arrays.
18

19
00:01:11.700 --> 00:01:15.030
Now a raise themselves couldn't be made
part of the collection framework without
19

20
00:01:15.030 --> 00:01:16.980
changing the Java language.
20

21
00:01:16.980 --> 00:01:19.650
However, the framework
does include methods That
21

22
00:01:19.650 --> 00:01:23.140
enable connections to be move
into arrays and vice versa, and
22

23
00:01:23.140 --> 00:01:26.920
additionally methods to allow
arrays to be viewed as collections.
23

24
00:01:26.920 --> 00:01:28.150
So the main components, or
24

25
00:01:28.150 --> 00:01:31.560
the core elements of the collections
framework are interfaces.
25

26
00:01:31.560 --> 00:01:34.660
Now these are the abstract,
Types that represent collections,
26

27
00:01:34.660 --> 00:01:38.650
including this list interface that we've
already seen, as mentioned previously, and
27

28
00:01:38.650 --> 00:01:41.780
we will be looking at the interface
hierarchy of the collections framework.
28

29
00:01:41.780 --> 00:01:44.200
Also, included is aggregate operations.
29

30
00:01:44.200 --> 00:01:46.900
Now, although we've seen
iterate in its earlier videos,
30

31
00:01:46.900 --> 00:01:49.520
We'll cover them in much more
detail here in this section.
31

32
00:01:49.520 --> 00:01:52.170
In addition,
another core element is implementations.
32

33
00:01:52.170 --> 00:01:55.310
Now this is the concrete
implementations of the interface,
33

34
00:01:55.310 --> 00:01:57.590
including the ArrayList and
Linked List classes.
34

35
00:01:57.590 --> 00:02:00.880
That's two good examples
of an implementation.
35

36
00:02:00.880 --> 00:02:02.440
But also, algorithms.
36

37
00:02:02.440 --> 00:02:06.040
Now the Java JDK provides a range
of polymorphic algorithms
37

38
00:02:06.040 --> 00:02:08.210
that work on collections objects.
38

39
00:02:08.210 --> 00:02:11.660
Technically speaking objects that
implement collection interface and
39

40
00:02:11.660 --> 00:02:14.130
they provide reusable functionality.
40

41
00:02:14.130 --> 00:02:17.610
So I'll be looking at all these
elements in the section, but I'll do so
41

42
00:02:17.610 --> 00:02:21.290
by looking at the framework, rather than
producing a video on each element, so
42

43
00:02:21.290 --> 00:02:24.920
what I'll start with, what I'm gonna
do is review the array list and
43

44
00:02:24.920 --> 00:02:29.580
link list on objects as well as the list
interface that we've covered previously.
44

45
00:02:29.580 --> 00:02:32.970
And consider them within the context
of the Collections Framework.
45

46
00:02:32.970 --> 00:02:37.730
What I will do is use a simple
seatbooking system in theater to see how
46

47
00:02:37.730 --> 00:02:43.110
these classes that we've used earlier
fit into the Java Collections Framework.
47

48
00:02:43.110 --> 00:02:45.290
So theater seats will be
numbered with a row letter, and
48

49
00:02:45.290 --> 00:02:47.250
then a seat number within each row.
49

50
00:02:47.250 --> 00:02:50.670
I'll keep it simple and not have different
numbers of seats, and that type of thing.
50

51
00:02:50.670 --> 00:02:53.590
So I'm gonna start off by
creating our theater class.
51

52
00:02:53.590 --> 00:02:55.690
And that's gonna contain
an inner sync class.
52

53
00:02:55.690 --> 00:03:00.200
So I'm gonna go over as always,
and come into our package,
53

54
00:03:01.260 --> 00:03:04.390
right click it, new class, and
we'll call this first one theater.
54

55
00:03:07.940 --> 00:03:11.150
And we can start by creating a list for
the seats.
55

56
00:03:11.150 --> 00:03:13.500
So that's what we'll do
first is let the names.
56

57
00:03:13.500 --> 00:03:20.960
So it's gonna be private
final String theatrename.
57

58
00:03:20.960 --> 00:03:24.680
Then we're gonna create
a private list of seat objects.
58

59
00:03:24.680 --> 00:03:25.320
So lists.
59

60
00:03:27.000 --> 00:03:30.390
Seat of seats, and
seats we're gonna define shortly.
60

61
00:03:30.390 --> 00:03:39.270
That's gonna be inner class, and
make that a new array list like so.
61

62
00:03:39.270 --> 00:03:44.530
And incidentally that error on
the first line is gonna go away
62

63
00:03:44.530 --> 00:03:48.260
once we initialize it, and
if you are Paying attention and
63

64
00:03:48.260 --> 00:03:51.750
watching the previous section where
I talked about final and so forth.
64

65
00:03:51.750 --> 00:03:56.720
You'll understand why that error's coming
up and that it'll be fixed once we update
65

66
00:03:56.720 --> 00:04:02.420
our constructor and we cut into this area
here, most likely because this is weird.
66

67
00:04:02.420 --> 00:04:04.310
I think it's a bug in IntelliJ.
67

68
00:04:04.310 --> 00:04:08.110
For some reason, even though
I've selected project structure,
68

69
00:04:08.110 --> 00:04:12.600
project language level eight, in my
default settings, it's set it to six.
69

70
00:04:12.600 --> 00:04:14.150
So I'll go back and change it to eight.
70

71
00:04:14.150 --> 00:04:17.440
The error should go away.
71

72
00:04:17.440 --> 00:04:22.030
Obviously, we still need to define that
in a class, which we'll do shortly.
72

73
00:04:22.030 --> 00:04:23.620
So moving on, let's create a constructor,
73

74
00:04:23.620 --> 00:04:27.150
and the constructor is going
to consist of theater.
74

75
00:04:27.150 --> 00:04:29.850
Once I do that, that should fix the other
area you can see that area is gone away
75

76
00:04:29.850 --> 00:04:33.690
now because we have
initialized that object and
76

77
00:04:33.690 --> 00:04:35.180
we're going to have
a couple of parameters.
77

78
00:04:35.180 --> 00:04:42.190
Let's also have the number of rows in this
theater int numRows and int seatsPerRow.
78

79
00:04:44.590 --> 00:04:48.270
And then what we're going to do is,
we're going to allocate.
79

80
00:04:48.270 --> 00:04:52.360
As I mentioned thereâ€™s going to be a seat
number, consists of a row letter and
80

81
00:04:52.360 --> 00:04:53.390
a sear number.
81

82
00:04:53.390 --> 00:04:56.890
Theatre seats will be numbered with a row
letter and a seat number, I should say.
82

83
00:04:56.890 --> 00:05:03.380
So first of all, we're going to create
the last row and do Ent LastRow =
83

84
00:05:04.390 --> 00:05:09.450
A plus num rows type one.
84

85
00:05:09.450 --> 00:05:14.350
Then what we're going to do is
cycle through and create a seat for
85

86
00:05:14.350 --> 00:05:16.530
each one of these theater seats.
86

87
00:05:16.530 --> 00:05:23.910
So that will be four job row equals A.
87

88
00:05:23.910 --> 00:05:27.250
A row is less or equal to last row,
88

89
00:05:28.630 --> 00:05:32.500
row plus plus, so going through all
the rows from A to Z effectively.
89

90
00:05:32.500 --> 00:05:35.870
Okay, then for each,
we've got the row, and for each row,
90

91
00:05:35.870 --> 00:05:39.900
we now need to go through and
allocate the seats for that section, so
91

92
00:05:39.900 --> 00:05:43.980
we need to put 4 int Seat num
92

93
00:05:47.290 --> 00:05:51.320
standing on one, because obviously we
can't have a seat to starting with zero.
93

94
00:05:51.320 --> 00:05:56.220
The seat num is to be less than or equal
to seats per row which gave us pass to
94

95
00:05:56.220 --> 00:06:03.200
the constructor and seat num plus plus
to increment through seat in the row.
95

96
00:06:03.200 --> 00:06:04.980
Then we're going to create seat object.
96

97
00:06:07.780 --> 00:06:12.560
Flow plus string formats row,
the row that we've defined,
97

98
00:06:12.560 --> 00:06:17.160
that we're currently
processing plus string.format.
98

99
00:06:17.160 --> 00:06:22.070
That's going to be percent O2D,
see now I'm just formatting it so
99

100
00:06:22.070 --> 00:06:23.040
it looks correct.
100

101
00:06:24.280 --> 00:06:29.490
And then we're going to add it to our
array list that we've defined on line ten.
101

102
00:06:29.490 --> 00:06:31.470
So it's seats.addseat.
102

103
00:06:31.470 --> 00:06:36.060
There's a basic instructor, so
you can see that's created now.
103

104
00:06:36.060 --> 00:06:40.970
And before we fix this seat error
we'll just create a few other things.
104

105
00:06:40.970 --> 00:06:44.330
What we'll do is first create a getter for
our theater name.
105

106
00:06:46.280 --> 00:06:49.340
I'm just adding the getter there and
actually I'll move that.
106

107
00:06:49.340 --> 00:06:51.240
Below the constructor's probably
a better spot for that.
107

108
00:06:53.260 --> 00:06:55.350
Clean the code up a bit and put it there.
108

109
00:06:55.350 --> 00:06:59.120
And the next one we want,
what we'll do is we'll create a few more.
109

110
00:06:59.120 --> 00:07:02.450
We'll create a reserve seat.
110

111
00:07:02.450 --> 00:07:03.790
Where it does just as you think it would.
111

112
00:07:03.790 --> 00:07:06.260
It reserves a particular seat for
our theater.
112

113
00:07:06.260 --> 00:07:12.170
And we'll also add a get seat where we can
return, or print out the list of seats.
113

114
00:07:12.170 --> 00:07:14.320
And we'll do the reserve seat first.
114

115
00:07:14.320 --> 00:07:15.490
That's gonna be public.
115

116
00:07:15.490 --> 00:07:23.270
Boolean reserve seat string seat number.
116

117
00:07:23.270 --> 00:07:27.520
And we'll start off with seat,
117

118
00:07:27.520 --> 00:07:31.470
requested seat is equally to null.
118

119
00:07:31.470 --> 00:07:38.750
[SOUND]
For Seat and seats.
119

120
00:07:38.750 --> 00:07:42.650
[SOUND]
And we go through all the seats and
120

121
00:07:42.650 --> 00:07:45.630
were going to do a test to see whether
we can find our particular one,
121

122
00:07:45.630 --> 00:07:52.510
seat.getseatnumber Number.equals
122

123
00:07:52.510 --> 00:07:59.040
seat number requested
123

124
00:07:59.040 --> 00:08:03.860
seat equals seat.
124

125
00:08:03.860 --> 00:08:05.650
Then we'll break out of it,
cuz we've found the seat.
125

126
00:08:07.330 --> 00:08:13.410
Then S out of that loop, we're going to
put if Requested seat is equal to null.
126

127
00:08:17.430 --> 00:08:19.570
And I'll put there is no seat,
127

128
00:08:21.590 --> 00:08:25.180
seat num in case has been
an invalid seat sentence method.
128

129
00:08:25.180 --> 00:08:28.830
It returns false in that situation
Because there's no other processing we
129

130
00:08:28.830 --> 00:08:30.390
can do because we've got an invalid seat.
130

131
00:08:30.390 --> 00:08:34.470
Otherwise what we're going to
do is return, requested seat,
131

132
00:08:34.470 --> 00:08:40.510
seat.reserve, and again,
we haven't written the seat class yet,
132

133
00:08:40.510 --> 00:08:43.360
and that will all be reviewed once we
get to that, so that's how you go about
133

134
00:08:43.360 --> 00:08:46.180
reserving a seat, and then the last
method, we're going to, or the next method
134

135
00:08:46.180 --> 00:08:50.210
we're going to create is the get seats,
which is just really for testing purposes.
135

136
00:08:52.010 --> 00:08:57.720
And it's going to be
public void get seats.
136

137
00:08:57.720 --> 00:09:01.470
And we're just going to
go four seat seat seats.
137

138
00:09:04.540 --> 00:09:06.050
And print them out.
138

139
00:09:06.050 --> 00:09:15.210
So I'll do Seat.getseatnumber Like so.
139

140
00:09:16.490 --> 00:09:19.900
Okay, so that's the basic code for
the theater.
140

141
00:09:19.900 --> 00:09:22.360
What we're doing now is
we'll add our private class
141

142
00:09:22.360 --> 00:09:23.830
which has got some of
these other functions and
142

143
00:09:23.830 --> 00:09:26.170
will fix up a lot of these errors
that are showing on the screen.
143

144
00:09:26.170 --> 00:09:30.510
So we're going to go ahead and
do that, so private class seat,
144

145
00:09:33.710 --> 00:09:37.390
And it's going to have
A private final stream.
145

146
00:09:39.590 --> 00:09:40.170
Seat number.
146

147
00:09:41.890 --> 00:09:43.850
We'll get an error until
we initialize that.
147

148
00:09:43.850 --> 00:09:46.500
Private [INAUDIBLE] reserved.
148

149
00:09:46.500 --> 00:09:51.660
It was false so I'm gonna save in one to
indicate whether this particular seat
149

150
00:09:51.660 --> 00:09:52.700
has been reserved or not.
150

151
00:09:56.130 --> 00:10:00.560
So we'll do our constructor now, and we're
just going to get the seat numbers past
151

152
00:10:00.560 --> 00:10:03.460
this method, and you'll see when we've
set that and fixed the area that
152

153
00:10:03.460 --> 00:10:07.430
was showing on long 53, and that's
all our constructor needs to do, and
153

154
00:10:07.430 --> 00:10:11.400
next we need to fix up some of these,
requested C should be, requested C.
154

155
00:10:12.670 --> 00:10:16.980
So we need to basically
import this error and
155

156
00:10:16.980 --> 00:10:23.250
probably the easiest way of doing that
would be to just that fixes that.
156

157
00:10:23.250 --> 00:10:25.000
We could have done a and
157

158
00:10:25.000 --> 00:10:29.160
just imported like that fixes that and
some other things.
158

159
00:10:30.260 --> 00:10:34.410
Just typos but method and
the method that still need to be written.
159

160
00:10:34.410 --> 00:10:35.210
In a class.
160

161
00:10:35.210 --> 00:10:36.600
I'll do that.
161

162
00:10:36.600 --> 00:10:38.360
First, we'll do the reserve.
162

163
00:10:38.360 --> 00:10:43.020
So I'll go public, boolean reserve.
163

164
00:10:45.890 --> 00:10:49.980
and the cover,
it will be if not [INAUDIBLE]
164

165
00:10:49.980 --> 00:10:52.210
.reserve equals true.
165

166
00:10:52.210 --> 00:10:54.590
So obviously, if it's already reserved,
we're not going to retry and
166

167
00:10:54.590 --> 00:10:59.590
process it And if that's the case
we were able to reserve it.
167

168
00:10:59.590 --> 00:11:07.350
We just kinda put a message to the effect
seat + seat number + reserved.
168

169
00:11:07.350 --> 00:11:09.880
It returned true,
our job is done in that case.
169

170
00:11:10.990 --> 00:11:13.600
To get started here that's what we'll
do is we'll put an else in here.
170

171
00:11:13.600 --> 00:11:14.430
We'll put else.
171

172
00:11:17.760 --> 00:11:21.690
Turn false, because obviously there was
a problem reserving it because it was
172

173
00:11:21.690 --> 00:11:22.360
already reserved.
173

174
00:11:23.900 --> 00:11:25.130
You also want to cancel function.
174

175
00:11:25.130 --> 00:11:28.630
We haven't used that code yet, but
we'll want that, so public Berlin cancel.
175

176
00:11:30.420 --> 00:11:31.480
And it does things the other way around.
176

177
00:11:31.480 --> 00:11:33.590
It goes if stop reserve.
177

178
00:11:33.590 --> 00:11:35.060
Somebody tries to cancel.
178

179
00:11:35.060 --> 00:11:36.100
If the seat
179

180
00:11:38.170 --> 00:11:42.000
number has already been reserved well
this particular seat has been reserved.
180

181
00:11:42.000 --> 00:11:44.830
So if stop reserved and
we put if stop reserve.
181

182
00:11:46.420 --> 00:11:48.220
Is equal to false.
182

183
00:11:48.220 --> 00:11:50.900
And reserve it freed up so
I can be allocated again.
183

184
00:11:50.900 --> 00:11:55.400
"Reservation of seat " +
184

185
00:11:55.400 --> 00:12:00.360
seatNumber + " cancelled".
185

186
00:12:01.380 --> 00:12:05.140
Turn true because we
successfully canceled those.
186

187
00:12:05.140 --> 00:12:06.450
Return false.
187

188
00:12:06.450 --> 00:12:10.400
We weren't able to cancel because
the seat wasn't was already reserved.
188

189
00:12:10.400 --> 00:12:13.850
And the last one to fix up
is this get seat number.
189

190
00:12:13.850 --> 00:12:16.060
Which is just a getter.
190

191
00:12:16.060 --> 00:12:19.100
So I'm just gonna do getter for
the seat number.
191

192
00:12:19.100 --> 00:12:22.670
It should fix that and that should
be all the errors that are now fixed
192

193
00:12:22.670 --> 00:12:27.040
in this class in our first theater class
with the inner class of being seat.
193

194
00:12:27.040 --> 00:12:29.040
Again just as a recap
looking back up here.
194

195
00:12:30.080 --> 00:12:30.900
At the top.
195

196
00:12:30.900 --> 00:12:34.140
The constructor takes a theater name
together with the number of rows and
196

197
00:12:34.140 --> 00:12:35.310
the number of seats per row.
197

198
00:12:35.310 --> 00:12:38.230
And it uses these to create
seats which it currently stores
198

199
00:12:38.230 --> 00:12:43.100
as you can see in the array list on
line 10 which is the seats fueled.
199

200
00:12:43.100 --> 00:12:46.060
And you can see that I have defined
a couple of other methods as well that
200

201
00:12:46.060 --> 00:12:47.790
reserve seat.
201

202
00:12:47.790 --> 00:12:50.470
And also we've created
an inner class receipt and
202

203
00:12:50.470 --> 00:12:53.470
got the ability to reserve or
cancel A particular seat.
203

204
00:12:53.470 --> 00:12:57.140
So let's go ahead now and
create the main method.
204

205
00:12:57.140 --> 00:13:00.190
And that's just gonna create a new theater
and then attempt to reserve the same
205

206
00:13:00.190 --> 00:13:02.910
seat twice just to confirm
that things are working.
206

207
00:13:02.910 --> 00:13:07.050
So we'll go back to our menu and here
we're going to create a new reference.
207

208
00:13:07.050 --> 00:13:09.880
So that's gonna be theater.
208

209
00:13:13.860 --> 00:13:14.700
Equals new theater.
209

210
00:13:16.210 --> 00:13:17.040
We'll call it the Olympian.
210

211
00:13:17.040 --> 00:13:22.190
And again, the parameters here,
211

212
00:13:22.190 --> 00:13:25.710
just to go back to confirm those,
the parameters we're looking for
212

213
00:13:25.710 --> 00:13:29.490
here is the number of rows in available
in the theater and the sets per row.
213

214
00:13:29.490 --> 00:13:33.800
So we're going to start with eight,
so eight rows, with 12 seats per row.
214

215
00:13:35.420 --> 00:13:37.180
And we'll do a theater.getseats.
215

216
00:13:37.180 --> 00:13:40.270
We'll call that method just to print
it out, see that it's working.
216

217
00:13:40.270 --> 00:13:41.640
So let's try running that first.
217

218
00:13:46.980 --> 00:13:52.210
And you can see that we've got our very
seats there, starting from row A to 0,
218

219
00:13:52.210 --> 00:13:55.810
1 to 0, 12 and we use that Formatting
class, which I mentioned here,
219

220
00:13:55.810 --> 00:13:59.690
String.format, to make sure they're all
allocated with a leading 0 if necessary,
220

221
00:13:59.690 --> 00:14:02.410
and we're going from row A to row H.
221

222
00:14:02.410 --> 00:14:05.350
Of course that's a total of eight rows.
222

223
00:14:05.350 --> 00:14:07.760
So that part's working okay,
which is good.
223

224
00:14:07.760 --> 00:14:09.530
Let's go back to our main.
224

225
00:14:09.530 --> 00:14:11.560
So let's now try doing a reservation.
225

226
00:14:11.560 --> 00:14:14.470
So we've got something like,
226

227
00:14:14.470 --> 00:14:19.980
if(theatre.reserveSeat()) H11.
227

228
00:14:19.980 --> 00:14:23.680
Please pay.
228

229
00:14:23.680 --> 00:14:24.600
Seats been reserved.
229

230
00:14:26.280 --> 00:14:36.230
Else sorry, seat is taken.
230

231
00:14:37.750 --> 00:14:39.340
So first time you run this,
it should work.
231

232
00:14:39.340 --> 00:14:43.120
We run this, seat H11 reserve.
232

233
00:14:43.120 --> 00:14:44.820
So you can see that's working fine.
233

234
00:14:44.820 --> 00:14:46.210
There's an extra space there.
234

235
00:14:46.210 --> 00:14:48.640
I should actually probably
look at fixing that.
235

236
00:14:48.640 --> 00:14:51.330
I must have added two spaces there,
so I'll fix that.
236

237
00:14:51.330 --> 00:14:52.950
And go back and
run it again just to confirm.
237

238
00:14:55.020 --> 00:14:56.370
Okay Seat H11 reserved.
238

239
00:14:56.370 --> 00:14:58.280
Now if we do try and
do the same thing again if I just copy and
239

240
00:14:58.280 --> 00:15:04.910
paste the same code we should
get an error the second time.
240

241
00:15:04.910 --> 00:15:08.280
Because of course a previous call to
it should have reserved the seat so
241

242
00:15:08.280 --> 00:15:09.330
let's just try running that.
242

243
00:15:11.560 --> 00:15:12.450
Sorry, seat is taken.
243

244
00:15:12.450 --> 00:15:13.620
So the first time it reserved it and
244

245
00:15:13.620 --> 00:15:15.580
the second time you can
see that the seat's taken.
245

246
00:15:15.580 --> 00:15:16.710
So that's good.
That's working fine.
246

247
00:15:16.710 --> 00:15:20.670
And the other thing we'll do now
is we'll comment out line seven.
247

248
00:15:20.670 --> 00:15:22.710
Because we can confirm that
the code's working all right, and
248

249
00:15:22.710 --> 00:15:24.950
the seats are being created correctly.
249

250
00:15:24.950 --> 00:15:25.770
So I'll comment that out.
250

251
00:15:26.780 --> 00:15:30.180
So I'm gonna pause the video now and
in the next video we'll continue on and
251

252
00:15:30.180 --> 00:15:32.490
we're going to look at
changing our data structure,
252

253
00:15:32.490 --> 00:15:37.830
which is defined in heatre.java on line
ten, the seats using the ArrayList.
253

254
00:15:37.830 --> 00:15:40.840
We're gonna start changing that to
a few different formats, a list and
254

255
00:15:40.840 --> 00:15:43.810
then also looking at turning it into
a collection or making it more generic and
255

256
00:15:43.810 --> 00:15:45.110
seeing how that all works.
256

257
00:15:45.110 --> 00:15:46.190
So see you in that next video.
