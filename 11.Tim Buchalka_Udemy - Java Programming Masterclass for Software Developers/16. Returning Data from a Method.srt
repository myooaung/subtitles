1
00:00:04,800 --> 00:00:08,380
Also gut, fangen wir an, über die Rückgabe von Werten für Methoden zu sprechen.

2
00:00:08,380 --> 00:00:14,020
Manchmal ist es nützlich, eine Methode mit dem Wert "Rückgabe" zu haben, wenn das Ergebnis einer Methode an

3
00:00:14,020 --> 00:00:15,440
mehreren Stellen verwendet wird.

4
00:00:15,520 --> 00:00:21,490
Es wäre ideal, die Berechnung in dieser Methode durchzuführen, sobald ein Ergebnis in einer Variablen gespeichert ist, und die

5
00:00:21,490 --> 00:00:26,920
Variable so oft wie nötig verwenden zu können, ohne die Berechnung jedes Mal durchführen zu müssen.

6
00:00:26,920 --> 00:00:34,490
Glücklicherweise ist es einfach, eine Methode einen Wert zurückgeben zu lassen, wie wir in den vorherigen Videos gesehen haben.

7
00:00:34,550 --> 00:00:41,410
Das allgemeine Format zum Definieren einer Methode in Java wurde geändert oder ändert

8
00:00:41,570 --> 00:00:47,960
den Methodennamen des Rückgabetyps und die Liste der Parameter von Null auf

9
00:00:47,960 --> 00:00:55,510
viele Parameter in Klammern links oder rechts wird von der Methode zurückgegeben, damit Ihre Methode

10
00:00:55,510 --> 00:00:57,220
den Wert zurückgibt.

11
00:00:57,220 --> 00:01:03,030
Sie müssen lediglich den Datentyp der Informationen angeben, die von der Methode zurückgegeben werden sollen.

12
00:01:03,040 --> 00:01:08,620
Beachten Sie nun, dass Methoden nur dann einen einzelnen Wert zurückgeben können, wenn der Rückgabetyp nicht

13
00:01:08,620 --> 00:01:09,460
void ist.

14
00:01:09,460 --> 00:01:15,550
Die letzte Anweisung, die in der Methode ausgeführt wird, muss zurückgegeben werden, gefolgt von dem Wert, den

15
00:01:15,550 --> 00:01:18,960
Sie von den Methodenrechten zurückgeben möchten, und dem Code.

16
00:01:19,000 --> 00:01:22,160
Sie können sehen, dass wir den Code haben, wie wir ihn im vorherigen Video hinterlassen haben.

17
00:01:22,180 --> 00:01:27,580
In diesem Video müssen wir also mit unserer Methode "Punktzahl berechnen" die endgültige Punktzahl berechnen und den Wert an

18
00:01:27,610 --> 00:01:32,470
den Code zurücksenden, der die Methode ursprünglich aufgerufen hat. Dies ist der Code, der derzeit in

19
00:01:32,470 --> 00:01:34,470
Zeile sieben und acht aufgeführt ist.

20
00:01:34,630 --> 00:01:38,500
Und es wäre wahrscheinlich einfacher, wenn ich dir hier eher versuche, mehr zu erklären.

21
00:01:38,730 --> 00:01:43,480
Die beiden, die wir verwenden werden, um einen Wert zurückzugeben, wie ich bereits erwähnte, müssen wir eine

22
00:01:43,480 --> 00:01:46,790
Methode in Java löschen, und Sie müssen einen Rückgabetyp 2 angeben.

23
00:01:46,810 --> 00:01:52,210
Jetzt haben wir nur die Verwendung des Schlüsselworts Void gesehen, und wir können sehen, dass es in Zeile fünf und Zeile elf an

24
00:01:52,270 --> 00:01:53,480
zwei Stellen verwendet wird.

25
00:01:53,670 --> 00:01:56,050
Und was Boyd meint, ist, keinen Wert zurückzuschicken.

26
00:01:56,050 --> 00:01:59,150
Mit anderen Worten, der Rückgabetyp sendet nichts zurück.

27
00:01:59,500 --> 00:02:04,320
Wenn Sie also eine Methode erstellen und keine Informationen zurückgeben möchten, haben Sie das Wort void verwendet.

28
00:02:04,360 --> 00:02:06,340
Leer bedeutet auch nichts leer.

29
00:02:06,340 --> 00:02:07,210
Gib nichts zurück.

30
00:02:08,190 --> 00:02:10,360
In diesem Fall möchten wir jedoch etwas zurückgeben.

31
00:02:10,360 --> 00:02:15,580
Wir müssen also das Wort void in den Datentyp der Informationen ändern, die wir zurücksenden

32
00:02:15,580 --> 00:02:20,460
möchten, und was wir hier in unserem Fall für unsere K-Collect-Score-Methode tun, wird zurückgesetzt.

33
00:02:20,470 --> 00:02:23,950
Wie hoch die endgültige Punktzahl hier sein würde, um auf Linie elf zu kommen.

34
00:02:23,950 --> 00:02:28,910
Ich werde die Leere hervorheben und das wollen wir ändern. Ich werde das in eine INT ändern.

35
00:02:28,990 --> 00:02:31,850
Also von leer zu drin.

36
00:02:31,930 --> 00:02:36,520
Der Grund, warum ich das tue, ist, dass wir im Moment nicht wissen, worauf diese Berechnung

37
00:02:36,520 --> 00:02:40,660
hinausläuft. Wir können nur sehen, dass sie auf dem Bildschirm angezeigt wird, wenn wir

38
00:02:40,690 --> 00:02:46,520
sie ausführen, aber wir werden tatsächlich die Zahl erhalten, die in berechnet wurde Diese Rückgabemethode in die Endpunktzahl entspricht der Punktzahl

39
00:02:46,540 --> 00:02:49,450
zuzüglich der in Klammern gesetzten Punkte und dem Bonus.

40
00:02:49,450 --> 00:02:52,000
In diesem Fall entspricht das Endergebnis plus zweitausend.

41
00:02:52,000 --> 00:02:58,080
Wir werden diesen Wert in Zeile 7 und 8 zurückgeben, damit wir diese Informationen von dort aus verwenden können.

42
00:02:58,280 --> 00:03:01,990
Und Sie haben gesehen, wie ich das Schlüsselwort void am 11. September in int geändert habe.

43
00:03:01,990 --> 00:03:04,170
Das ist also der erste Schritt in diesem Prozess.

44
00:03:04,240 --> 00:03:07,550
Wir sagen Java, dass wir ein int zurückgeben möchten.

45
00:03:07,720 --> 00:03:11,240
Und natürlich verwenden wir int, weil das int in Zeile 15 definiert wurde.

46
00:03:11,470 --> 00:03:15,410
In diesem Fall geben wir also für jede Ganzzahl dieselbe Art von Information zurück.

47
00:03:15,670 --> 00:03:20,140
Aber jetzt wo ich getan habe, dass wir einen Fehler haben, ist es ein bisschen ein subtiler Fehler, aber hier unten.

48
00:03:20,350 --> 00:03:21,750
Also Kelly Bryce da.

49
00:03:21,750 --> 00:03:26,030
Wenn wir darüber fahren, können Sie sehen, dass die Return-Anweisung fehlt.

50
00:03:26,030 --> 00:03:28,120
Das sagt uns, dass wir etwas anderes tun müssen.

51
00:03:28,180 --> 00:03:31,700
Wir müssen Java nur mitteilen, welche Informationen wir zurücksenden möchten.

52
00:03:31,740 --> 00:03:35,290
Dies ist ein Fehler, da wir die Leere geändert haben, um online zu essen 11.

53
00:03:35,380 --> 00:03:39,440
Also werden wir nach dem Ausdruck in Zeile 17 hierher kommen.

54
00:03:39,490 --> 00:03:40,020
Wir werden reden.

55
00:03:40,060 --> 00:03:41,340
Rückkehr.

56
00:03:41,500 --> 00:03:43,110
Endstand.

57
00:03:43,120 --> 00:03:45,010
Semikolon am Ende der Zeile dort.

58
00:03:45,200 --> 00:03:47,830
Nun, das ist das Format zum Zurücksenden der Informationen.

59
00:03:47,890 --> 00:03:52,750
Und andere geben einige Daten zurück, aber hier fehlt immer noch eine Fehlermeldung.

60
00:03:53,320 --> 00:03:56,380
Warum haben wir diesen Fehler bekommen, weil ich, wie Sie sagen können, zurückgeschrieben habe?

61
00:03:56,380 --> 00:03:58,580
Endergebnis in Zeile 18.

62
00:03:58,630 --> 00:04:03,680
Nun, wenn Sie einige Daten mit einer Methode zurücksenden, müssen Sie sicherstellen, dass, egal welcher

63
00:04:03,720 --> 00:04:05,350
Wert, diese zurückgesendet werden.

64
00:04:05,350 --> 00:04:09,610
Es ist nicht nur so, als würde man sagen, ob es sich um ein Spiel handelt, bei dem der Wert auf true gesetzt wird.

65
00:04:09,610 --> 00:04:13,330
Wir müssen auch dann einen Wert zurückschicken, wenn das Spiel nicht stimmt.

66
00:04:13,330 --> 00:04:16,690
Mit anderen Worten, alle Programmvarianten müssen berücksichtigt werden.

67
00:04:17,170 --> 00:04:19,060
Das Problem hier ist also, dass wir es haben.

68
00:04:19,060 --> 00:04:24,700
Wenn wir dort testen und nur Daten zurücksenden, ist das Endergebnis, wenn das Spiel

69
00:04:24,700 --> 00:04:31,180
vorbei ist, gleich wahr. Wir müssen auch komplett dafür verantwortlich sein, dass das Spiel vorbei ist, falsch

70
00:04:31,180 --> 00:04:34,480
und geben auch in diesem Szenario etwas zurück.

71
00:04:34,600 --> 00:04:36,540
Es ist also eine schnelle Herausforderung für Sie.

72
00:04:36,650 --> 00:04:42,530
Wie denken Sie, würden wir den Code so ändern, dass er minus eins zurückgibt, wenn die Variable game over gleich

73
00:04:42,530 --> 00:04:43,420
False ist?

74
00:04:43,550 --> 00:04:47,510
Überlegen Sie sich also, halten Sie das Video hier an und sehen Sie, ob wir herausfinden können, wie

75
00:04:47,510 --> 00:04:51,310
das geht. Kommen Sie zurück, wenn Sie bereit sind, und ich zeige Ihnen, wie das geht.

76
00:04:51,350 --> 00:04:52,670
Also gut, wie bist du gelaufen?

77
00:04:52,670 --> 00:04:54,550
Nun, es gibt zwei Möglichkeiten, dies zu tun.

78
00:04:54,590 --> 00:04:55,400
Was könnten wir tun?

79
00:04:55,460 --> 00:05:01,040
Schritt eins wäre, wir könnten hierher kommen und links oder rechts eine L-Anweisung eingeben.

80
00:05:01,040 --> 00:05:07,670
Kelly Price und dann könnten wir oben minus eins zurückkehren und ich werde in Kürze über minus eins sprechen.

81
00:05:07,670 --> 00:05:12,160
Der Grund, warum ich das tue, also könnte ich jetzt sagen, dass der Fehler verschwunden ist.

82
00:05:12,350 --> 00:05:18,290
Wir haben nirgends mehr einen Fehler in unserer Methode, der von Java als gültig und tatsächlich als gültig angesehen wird.

83
00:05:18,380 --> 00:05:24,380
Wir berücksichtigen also, dass der Code in Zeile 18 ausgeführt wird, wenn er wahr ist.

84
00:05:24,380 --> 00:05:30,590
Wenn es jedoch falsch ist, wird der Code ausgeführt, den eine Zeile 20 minus eins zurückgibt.

85
00:05:30,590 --> 00:05:35,450
Wir decken also sozusagen alle Grundlagen und damit Javas Inhalt ab und haben in dieser

86
00:05:35,660 --> 00:05:37,060
Methode keinen Fehler mehr.

87
00:05:37,190 --> 00:05:39,290
Jetzt als Alternative, was wir hätten tun können.

88
00:05:39,650 --> 00:05:44,630
Ich werde diese Zeilen konvertieren, damit sie später für Sie verfügbar sind, falls Sie den

89
00:05:44,630 --> 00:05:45,970
Quellcode herunterladen möchten.

90
00:05:45,970 --> 00:05:49,790
Ich werde auf alle drei kommen. Ich versuche nur, es dir später leichter zu machen,

91
00:05:49,790 --> 00:05:55,080
zu lesen und wir werden stattdessen hier runterkommen und ich werde das Wenn wieder schließen und dann werden wir hier runterkommen.

92
00:05:55,080 --> 00:06:01,280
Ich werde aufhören, minus eins mit einem Semikolon zurückzukehren. Dort können Sie sagen, dass die anderen drei Zeilen, für die ich ein

93
00:06:01,280 --> 00:06:04,140
Commit ausgeführt habe, das Programm nicht mehr verwendet habe.

94
00:06:04,370 --> 00:06:09,620
Obwohl wir es anders gemacht haben, ohne einen LS zu verwenden, ist es hier unter dem Strich

95
00:06:09,620 --> 00:06:09,940
dasselbe.

96
00:06:09,980 --> 00:06:16,130
Das zurückgegebene Endergebnis wird ausgeführt, wenn es herauskommt, dass es gleich wahr ist, aber wenn es darüber hinausgeht, ist es

97
00:06:16,130 --> 00:06:21,980
offensichtlich nicht gleich wahr, dass das Darlehen 18 nicht ausgeführt wird, und die Ausführung geht stattdessen zu Zeile

98
00:06:21,980 --> 00:06:22,790
21 zurück.

99
00:06:23,060 --> 00:06:27,230
Und diese Zeile wird ausgeführt, dann gibt die Methode einen Wert von minus eins zurück.

100
00:06:28,310 --> 00:06:35,390
Die Sache, an die Sie sich hier erinnern sollten, sobald Java den Code mit einem Return ausführt, der die Ausführung in dieser Zeile

101
00:06:35,390 --> 00:06:36,010
beendet.

102
00:06:36,470 --> 00:06:41,010
Für den Fall, dass Sie sich gut gefragt haben, wie es dazu gekommen ist, dass Sie mein Endergebnis in Zeile 18 zurückgegeben haben.

103
00:06:41,120 --> 00:06:43,490
Warum wird nicht minus eins zurückgegeben, um ausgeführt zu werden?

104
00:06:43,490 --> 00:06:49,070
Nun, der Grund dafür ist, dass die Information in diesem Fall, sobald die return-Anweisung ausgeführt wird, in

105
00:06:49,070 --> 00:06:55,070
Zeile 18 an die Zeilen sieben und acht zurückgesendet wird, die diese Methode aufrufen, und die Ausführung dann

106
00:06:55,130 --> 00:06:59,190
sofort stoppt und keinen anderen Code in dieser Methode ausgeführt wird.

107
00:06:59,210 --> 00:07:03,290
Aus diesem Grund können wir hier zwei return-Anweisungen haben, von denen immer nur

108
00:07:03,290 --> 00:07:04,310
eine ausgeführt wird.

109
00:07:04,310 --> 00:07:08,040
Das andere, worüber ich im Moment zu sprechen verspreche, waren die Bergleute.

110
00:07:08,070 --> 00:07:11,060
Warum benutze ich eigentlich einen Bergarbeiter online 21.

111
00:07:11,120 --> 00:07:16,190
Nun minus eins in Bezug auf die Programmierung wird herkömmlicherweise verwendet, um einen Fehler anzuzeigen.

112
00:07:16,250 --> 00:07:21,930
Ein Minuszeichen wird häufig verwendet, um einen ungültigen Wert oder einen nicht gefundenen Wert oder eine andere Ära anzugeben.

113
00:07:21,950 --> 00:07:27,380
Das ist der Grund, warum wir hier minus eins verwenden, weil in der Regel in einem Spiel, in dem ein Punktestand berechnet wird,

114
00:07:27,380 --> 00:07:31,580
eine Zahl von Null angezeigt wird, wenn er in einem Spiel keine Punkte erzielt, dies jedoch selten

115
00:07:31,910 --> 00:07:34,420
der Fall ist ein Spiel, um Ihnen Minuspunkte zu geben.

116
00:07:34,460 --> 00:07:39,560
Das Minuszeichen hier in Zeile 21 zeigt also an, dass hier ein Fehler vorliegt.

117
00:07:39,670 --> 00:07:44,180
In diesem Fall handelt es sich eher um eine Programmbedingung,

118
00:07:44,540 --> 00:07:46,970
die wir als falsch bezeichnen.

119
00:07:46,970 --> 00:07:52,580
Mit anderen Worten, wenn der Code in Zeile 21 ausgeführt wurde, bedeutet dies, dass das Spiel tatsächlich noch nicht beendet war und wir nicht

120
00:07:52,580 --> 00:07:57,020
versuchen sollten, eine endgültige Punktzahl zu berechnen, da das Spiel noch nicht weiter läuft. Dies ist nur ein Beispiel

121
00:07:57,020 --> 00:08:02,420
Sie könnten die Methode zur Rückgabe von 9 9 9 im Falle eines Fehlers in der realen Welt geschrieben haben, sobald Sie mit

122
00:08:02,420 --> 00:08:06,070
der Programmierung beginnen. Es liegt an Ihnen, den richtigen Wert für die Rückgabe zu bestimmen.

123
00:08:06,470 --> 00:08:12,320
Konventionell ist es jedoch oft so, dass Sie eine negative Zahl verwenden, um eine Ära anzugeben,

124
00:08:12,320 --> 00:08:18,260
in der dies sinnvoll ist, oder Sie verwenden nur einen Wert, der normalerweise nicht normal berechnet wird.

125
00:08:18,260 --> 00:08:23,000
In einigen Szenarien können Sie also offensichtlich eine negative Zahl verwenden, um einen Fehler zurückzugeben, da die

126
00:08:23,000 --> 00:08:27,800
Rückgabe einer negativen Zahl für die bestimmte Methode, die Sie in unserem Fall zur Berechnung der Punktzahl tatsächlich

127
00:08:28,160 --> 00:08:30,090
erstellen, eine gültige Maßnahme sein kann.

128
00:08:30,130 --> 00:08:36,110
Wir gehen davon aus, dass eine Punktzahl von null oder mehr eine gültige Punktzahl ist, sodass wir eine negative Zahl zurückgeben können, um darauf

129
00:08:36,320 --> 00:08:40,870
hinzuweisen, dass in diesem Fall etwas Abnormales passiert ist und das Spiel tatsächlich noch nicht vorbei ist.

130
00:08:41,510 --> 00:08:44,670
Also gut, lasst uns das Video hier beenden und das nächste wird fortgesetzt.

131
00:08:44,780 --> 00:08:47,330
An dieser Methode müssen noch einige Änderungen vorgenommen werden.

132
00:08:47,450 --> 00:08:48,460
Wir sehen uns im nächsten Video.
