WEBVTT
1
1

00:00:05.170  -->  00:00:10.500
ok so moving on now what we want
to do is create a stock list class now
2

2

00:00:10.500  -->  00:00:15.380
this is going to hold a list of all the stock items in a
map and will need method in this
3

3

00:00:15.380  -->  00:00:21.210
class to add stock to the stock list
class also to remove it when the
4

4

00:00:21.210  -->  00:00:25.750
actual items the stock item product is actually sold now
5

5

00:00:25.750  -->  00:00:30.100
because the stock item class uses the
name when overriding equals and
6

6

00:00:30.100  -->  00:00:34.680
hash Code we can safety's use the
name as the key for the map which is
7

7

00:00:34.680  -->  00:00:40.120
going to make our life a lot easier so lets go ahead
and do that and then just a note also to
8

8

00:00:40.120  -->  00:00:44.780
make sure because of a current big with
IntelliJ which may or may not be there
9

9

00:00:44.780  -->  00:00:49.640
when you go to check this click on the
actual project in IntelliJ right click
10

10

00:00:49.640  -->  00:00:55.490
click on open module settings go into to
project and just make sure that that's
11

11

00:00:55.490  -->  00:01:01.700
set to 8 when I created a new project
earlier it was 6 and I change it when I wasn't recording to 8
12

12

00:01:01.700  -->  00:01:05.130
so make sure that is on 8 otherwise you
can get some weird things happening and
13

13

00:01:05.130  -->  00:01:10.710
mentioned that in other videos and this seems to be a bug
with new projects even though we have set
14

14

00:01:10.710  -->  00:01:15.390
that in our general defaults it doesn't
always stick when we create a new projects so
15

15

00:01:15.390  -->  00:01:18.560
actually on the project language level is on 8
16

16

00:01:18.560  -->  00:01:29.460
ok let's go ahead and create that class so going to call it stock list and we
17

17

00:01:29.460  -->  00:01:35.240
mentioned that we need a map and the map is gonna store stock items and we're
18

18

00:01:35.240  -->  00:01:39.130
going to use a string as a primary key and that's
ultimately going to be the stock item
19

19

00:01:39.130  -->  00:01:47.670
name so I'm going to do......
20

20

00:01:47.670  -->  00:01:53.790
.....
21

21

00:01:53.790  -->  00:01:59.420
...and we are getting an error
because it wants to be initialized and
22

22

00:01:59.420  -->  00:02:04.250
we just confirmed that Verbal List my not
been initialized because we marked that as final but
23

23

00:02:04.250  -->  00:02:08.310
we're going to do then in the constructor now so....
24

24

00:02:08.310  -->  00:02:21.980
.....
25

25

00:02:21.980  -->  00:02:26.610
...next we want an add stock method
and that's ultimately going to be used
26

26

00:02:26.610  -->  00:02:36.780
to add items to our list of all stock
items so.....
27

27

00:02:36.780  -->  00:02:44.190
.....
28

28

00:02:44.190  -->  00:02:48.660
.....and because if it is null an
we got an item pass to us that is nulll we don't want to
29

29

00:02:48.660  -->  00:02:52.550
do any processing on it so we wrapping this in a test for not
30

30

00:02:52.550  -->  00:02:57.650
equal null so if its not equal to null we are gonna...
31

31

00:02:57.650  -->  00:03:07.450
...and normally we would use get and do
something like.....
32

32

00:03:07.450  -->  00:03:11.480
and that will retrieved the stock item based
on name but we are going to change that we're going
33

33

00:03:11.480  -->  00:03:16.840
use something called getOrDefault and that
needs to parameters the first one is the item name
34

34

00:03:16.840  -->  00:03:23.010
to look up and the second
parameter is going to be item and that method does
35

35

00:03:23.010  -->  00:03:26.570
what you think it would do its get or default so its going to get the item if it
36

36

00:03:26.570  -->  00:03:30.260
already exists in the map and if it
doesn't exist its going to use this
37

37

00:03:30.260  -->  00:03:35.060
item that we actually pass to this
method as the item is going to be in
38

38

00:03:35.060  -->  00:03:39.660
stocks so either way at the end of this
line in stock is going to have an item
39

39

00:03:39.660  -->  00:03:43.850
either the one that has been retrieved from the list
or the one that has been passed to this
40

40

00:03:43.850  -->  00:03:53.320
method and then what we can do is to check if
we already have quantities of this
41

41

00:03:53.320  -->  00:04:02.160
item and what I mean by that is was this already in the list so the way to do is.....
42

42

00:04:02.160  -->  00:04:10.090
.....
43

43

00:04:10.090  -->  00:04:18.500
......
44

44

00:04:18.500  -->  00:04:24.320
...so by putting in stock not equal to item we are checking to see did we
45

45

00:04:24.320  -->  00:04:29.610
actually get the list of the item out of our map and is that the same as in stock item
46

46

00:04:29.610  -->  00:04:32.990
that has been pass so by checking to see
whether they're separate we can
47

47

00:04:32.990  -->  00:04:36.950
determine basically whether the item was
already existing in the map because it
48

48

00:04:36.950  -->  00:04:42.000
was already in the map then what we want
to do is we want to adjust the stock quantity with
49

49

00:04:42.000  -->  00:04:45.670
whatever the quantity that was passed to
this method via the item variable here
50

50

00:04:45.670  -->  00:04:50.720
on line 16 but if we haven't gone an item
that existed in the past then we can just used the
51

51

00:04:50.720  -->  00:04:55.830
quantity that's been passed in this so in
this case if in stock is not equal to
52

52

00:04:55.830  -->  00:05:06.320
item then we do.....so it basically what
53

53

00:05:06.320  -->  00:05:10.100
we're saying there is if they're not the
same in other words it already exists in
54

54

00:05:10.100  -->  00:05:13.630
the map prior to the call of add stock then we are actually going to pass the
55

55

00:05:13.630  -->  00:05:18.930
value of whatever was already in the map
into out current item
56

56

00:05:18.930  -->  00:05:23.610
item.adjustStock so that we actually got the
quantity both that existed prior to the
57

57

00:05:23.610  -->  00:05:27.220
call of this method and also the
quantity that has been passed by the
58

58

00:05:27.220  -->  00:05:34.240
stock item object and we are only doing that if of
course if they are not the same but in either
59

59

00:05:34.240  -->  00:05:41.660
case what we are gonna do is put....
60

60

00:05:41.660  -->  00:05:44.330
so you can see either way whats going to happen
61

61

00:05:44.330  -->  00:05:51.000
is we are going to get an add entry written to our map and if it already exists what automatically the .put method
62

62

00:05:51.000  -->  00:05:57.520
will overwrite that is in their otherwise if it
doesn't exist its just going to add it like normally it would
63

63

00:05:57.520  -->  00:06:02.000
.....
64

64

00:06:02.000  -->  00:06:10.820
outside of the if loop we are just going to return 0 indicating that their was no stop movement so hopefully that made sense
65

65

00:06:10.820  -->  00:06:14.700
so we're adding a new stock items to the
list and updating them essentially if
66

66

00:06:14.700  -->  00:06:19.380
it was already a stocked item with that name
now just out of interest if we
67

67

00:06:19.380  -->  00:06:22.800
wanted to we could actually change his
little bit we could have actually gone
68

68

00:06:22.800  -->  00:06:26.810
ahead and done stock item just comment this out briefly just
to show the old way of doing it it might
69

69

00:06:26.810  -->  00:06:30.210
have been something along these lines....
70

70

00:06:30.210  -->  00:06:42.830
.....
71

71

00:06:42.830  -->  00:06:47.380
.....so you can see the difference here that's
72

72

00:06:47.380  -->  00:06:51.670
really just the other way of writing is we are basically saying you know before we
73

73

00:06:51.670  -->  00:06:55.940
actually go to add the item on line
26 or replace it we are just testing to see
74

74

00:06:55.940  -->  00:06:59.130
whether there's already one in the map
prior to us and inserting whatever is
75

75

00:06:59.130  -->  00:07:03.420
passed to the method and if its not equal to null it means it found something then we
76

76

00:07:03.420  -->  00:07:06.720
adjust that stock that way but we've
done it slightly differently and I'm
77

77

00:07:06.720  -->  00:07:13.790
undo those changes by using get or default
it just saves that extra test for null
78

78

00:07:13.790  -->  00:07:18.520
now because either way that is going to
return a valid stock item but then we have
79

79

00:07:18.520  -->  00:07:22.230
also got this additional check instead
of checking for null we are checking to
80

80

00:07:22.230  -->  00:07:26.590
see that they're not the same which
means that the item already existed
81

81

00:07:26.590  -->  00:07:32.890
in the map prior to the call of this method ok
so that's add stock we also want sell stock
82

82

00:07:32.890  -->  00:07:38.680
so obviously if the stock it's been sold we need to adjust the
83

83

00:07:38.680  -->  00:07:44.300
levels accordingly so we put.....
84

84

00:07:44.300  -->  00:07:53.840
going to be the item which is a string
so we can look up our map and the quantity.....
85

85

00:07:53.840  -->  00:07:58.940
so we are going to use the same thing here we put....we use it in a slightly different way.....
86

86

00:07:58.940  -->  00:07:59.970
....
87

87

00:07:59.970  -->  00:08:04.650
.....
88

88

00:08:04.650  -->  00:08:09.260
....which remember this time item is just the name its a string whereas
89

89

00:08:09.260  -->  00:08:12.720
in the add stock method on line 16 it was
actually stock items so in this case
90

90

00:08:12.720  -->  00:08:17.330
we just use item but we are gonna default it to null if it doesn't already exist because
91

91

00:08:17.330  -->  00:08:22.520
we're just selling stock the assumption
is that the stock item has to exist so
92

92

00:08:22.520  -->  00:08:26.300
we aren't going to actually use the default and then the next line when we
93

93

00:08:26.300  -->  00:08:30.410
actually check this will do a test to make
sure it's not equal to null so put.....
94

94

00:08:30.410  -->  00:08:44.660
.....
95

95

00:08:44.660  -->  00:08:50.360
........and the last test
we need to do is check that the
96

96

00:08:50.360  -->  00:08:53.790
quantity that is passed to this method is
greater than zero because we're not
97

97

00:08:53.790  -->  00:08:57.400
going to allow any negatives or credits
or anything like that so we are just gonna put.....
98

98

00:08:57.400  -->  00:09:04.130
....so that is our test to make sure it is valid and first test should have been if stock
99

99

00:09:04.130  -->  00:09:12.820
....so if in stock is not equal to null and if the get quantity in stock is
100

100

00:09:12.820  -->  00:09:17.610
greater than the quantity that we are
asking for a to be sold and the quantity
101

101

00:09:17.610  -->  00:09:21.260
that we asked for it has to also be
greater than 0 if all of that is true
102

102

00:09:21.260  -->  00:09:25.000
then we are going to do adjustment so put.....
103

103

00:09:25.000  -->  00:09:32.040
.....obviously quantity we determined is
104

104

00:09:32.040  -->  00:09:36.810
going to be a number greater than 0
because we are deducting it we are putting a minus in front of the
105

105

00:09:36.810  -->  00:09:42.150
variable to make sure that the negative
amount gets adjusted and then we return
106

106

00:09:42.150  -->  00:09:49.300
quantity to indicate that's how many
items where taken out of stock and down here if we get this
107

107

00:09:49.300  -->  00:09:52.110
far it means that one of those
conditions wasn't true either we didn't
108

108

00:09:52.110  -->  00:09:55.770
have it in stock or there wasn't
sufficient quantity to take it
109

109

00:09:55.770  -->  00:10:01.140
out of stock or the quantity that was
passed is equal to 0 or less than 0 if that's
110

110

00:10:01.140  -->  00:10:04.770
the case we are just gonna returns 0 to
indicate that there was nothing that was
111

111

00:10:04.770  -->  00:10:12.360
actually taken out of stock let's also
create a getter so put a getter for our
112

112

00:10:12.360  -->  00:10:21.280
stock item actually we have to create that what we area able to do is pass the name of a stock item and return the
113

113

00:10:21.280  -->  00:10:27.450
stock item as an objects so we are going to return a
stock item.....
114

114

00:10:27.450  -->  00:10:34.480
.....
115

115

00:10:34.480  -->  00:10:42.330
....and next we want to be able to return
116

116

00:10:42.330  -->  00:10:50.420
the times so put....
117

117

00:10:50.420  -->  00:11:02.890
....
118

118

00:11:02.890  -->  00:11:10.560
....and come
back in a minute talk about
119

119

00:11:10.560  -->  00:11:17.450
un-modifiable map but it's probably
thinking is that actually mean a map that can't
120

120

00:11:17.450  -->  00:11:21.540
be modified you pretty well spot on so the
other thing I wanted to do then we want to
121

121

00:11:21.540  -->  00:11:31.870
override a toString so lets just do that as well.....
122

122

00:11:31.870  -->  00:11:35.950
so we area going to write a toString method bearing in
mind that this is the stock list class
123

123

00:11:35.950  -->  00:11:38.680
so we are going to do something a little bit
different here the to string is going to
124

124

00:11:38.680  -->  00:11:42.950
return a list of all the items so in other words that is a complete stock list even
125

125

00:11:42.950  -->  00:11:48.070
though it's just 1 methods in the
course so far with to string we are
126

126

00:11:48.070  -->  00:11:51.660
really use that for a single item but
there's no reason we can't override
127

127

00:11:51.660  -->  00:11:56.070
toString for a class like the stock list
class that maintains a quantity of a given
128

128

00:11:56.070  -->  00:12:00.480
number of objects and have it
returned quite a complex bit of
129

129

00:12:00.480  -->  00:12:13.080
output so we are gonna do that so put.....
130

130

00:12:13.080  -->  00:12:33.190
.....
131

131

00:12:33.190  -->  00:12:40.940
...so we are going to iterate through the entire map and we are going  to get each item so....
132

132

00:12:40.940  -->  00:13:05.890
.....
133

133

00:13:05.890  -->  00:13:11.300
...this is going to be the string formatted...
134

134

00:13:11.300  -->  00:13:28.880
....
135

135

00:13:28.880  -->  00:13:48.580
.....
136

136

00:13:48.580  -->  00:13:57.410
.....after we've been through the entire
137

137

00:13:57.410  -->  00:14:06.720
list of items returned......
138

138

00:14:06.720  -->  00:14:11.230
....ok and what I'm also going to do
139

139

00:14:11.230  -->  00:14:16.500
I'm going to take the opportunity to come to this method I'm
gonna go into their command click I'm
140

140

00:14:16.500  -->  00:14:23.120
going to rename that because I don't
like the name of that refactor rename
141

141

00:14:23.120  -->  00:14:30.220
gonna call that quantity in stock which makes more sense
142

142

00:14:30.220  -->  00:14:35.420
because the way we are using it and press ENTER and it
should be changed everywhere so we should
143

143

00:14:35.420  -->  00:14:39.700
find if we go back to our stock list that has been
changed as quantity in stock and again
144

144

00:14:39.700  -->  00:14:43.990
that IntelliJ smart refactoring
has done that for us or automatically and that
145

145

00:14:43.990  -->  00:14:47.360
makes a bit more sense and just a note about
what we just done with to string
146

146

00:14:47.360  -->  00:14:50.780
obviously we have overridden it now as I mentioned
to print the full list of all the stock
147

147

00:14:50.780  -->  00:14:55.870
together with the total value which is pretty
cool but generally its probably not a good
148

148

00:14:55.870  -->  00:14:59.350
idea to do this in practice because two
strings really intended for debugging
149

149

00:14:59.350  -->  00:15:03.980
and with a large stock list especially
you know create a big log
150

150

00:15:03.980  -->  00:15:08.980
files and we are gonna be covering this
more in the section on debugging but for now we are
151

151

00:15:08.980  -->  00:15:11.390
really doing this just to give us a quick way to display a stock list
152

152

00:15:11.390  -->  00:15:15.680
and you wouldn't necessarily do
that in production now the program using
153

153

00:15:15.680  -->  00:15:18.650
the stock list will probably want to
display the list in different ways and
154

154

00:15:18.650  -->  00:15:22.050
so the stock class also has an items
method that provides a map of all
155

155

00:15:22.050  -->  00:15:26.110
items in stock and that's why we've
created that on line 46 know what we
156

156

00:15:26.110  -->  00:15:30.690
haven't discussed yet is the un-modifiable
collections object now on lecture 107
157

157

00:15:30.690  -->  00:15:35.560
on making classes
immutable we returned a Hash Map and we did that by
158

158

00:15:35.560  -->  00:15:38.530
creating a copy so that the
calling code could have access to the
159

159

00:15:38.530  -->  00:15:43.330
list but we couldn't change the exits
in the game not sure if you remember that or not if not
160

160

00:15:43.330  -->  00:15:48.030
it might be a good idea to go back and check that out now
that was fine but the calling code could
161

161

00:15:48.030  -->  00:15:53.100
also add new exits to a map or to the map
so well that didn't bother our class at all
162

162

00:15:53.100  -->  00:15:56.820
because the caller was working with a
copy it's probably bit unkind to let
163

163

00:15:56.820  -->  00:16:00.860
the code think it could make changes when
it actually having no effect so the
164

164

00:16:00.860  -->  00:16:03.870
collections framework provides a wrapper
around the list
165

165

00:16:03.870  -->  00:16:08.340
map and set collection to provide an un-modifiable collection so we control
166

166

00:16:08.340  -->  00:16:15.040
click on un-modifiable map that's command click on a Mac do that now and just look
167

167

00:16:15.040  -->  00:16:20.340
at the notes above it return an un-modifiable view of the specified map
168

168

00:16:20.340  -->  00:16:23.970
this method allows modules to provide
users with read only access to internal
169

169

00:16:23.970  -->  00:16:24.860
maps
170

170

00:16:24.860  -->  00:16:28.400
query operations on the return read through to the specified map and
171

171

00:16:28.400  -->  00:16:32.130
attempts to modify the return map
whether direct or via its collection
172

172

00:16:32.130  -->  00:16:36.880
views result in an unsupported exception
so what we are really returning is actually
173

173

00:16:36.880  -->  00:16:41.480
a read only view into our map but this
prevent other code from adding or removing
174

174

00:16:41.480  -->  00:16:46.050
items and its faster than the previous
way from lecture 107 and the reason its faster is because it
175

175

00:16:46.050  -->  00:16:49.510
doesn't have to make a copy of the
collection ok so time is ticking I'm
176

176

00:16:49.510  -->  00:16:53.690
going to end this video here now but when
we get back we are going to continue through
177

177

00:16:53.690  -->  00:16:57.610
our example we're going to start
building up a basket which was really
178

178

00:16:57.610  -->  00:17:01.690
the idea of this series of lectures was
to go through and create a shopping
179

179

00:17:01.690  -->  00:17:04.310
basket so we'll start doing that in the
next video
