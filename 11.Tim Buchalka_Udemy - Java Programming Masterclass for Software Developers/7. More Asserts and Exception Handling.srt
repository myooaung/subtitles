1
1

00:00:05,010  -->  00:00:07,020
ok so let's have a talk about some other
2

2

00:00:07,020  -->  00:00:10,520
j unit assertion methods first one
3

3

00:00:10,520  -->  00:00:12,150
assert not equals
4

4

00:00:12,150  -->  00:00:13,950
so we can use this instead of assert
5

5

00:00:13,950  -->  00:00:15,960
equals when we don't want the actual
6

6

00:00:15,960  -->  00:00:18,120
value to be equal to a specific value
7

7

00:00:18,120  -->  00:00:21,930
assert array equals when we want to
8

8

00:00:21,930  -->  00:00:24,270
verify the value of an array we have to
9

9

00:00:24,270  -->  00:00:26,430
use the assert array equals method
10

10

00:00:26,430  -->  00:00:29,010
now the assert equals method won't work
11

11

00:00:29,010  -->  00:00:30,930
in that scenario because it will only
12

12

00:00:30,930  -->  00:00:33,330
consider 2 arrays to be equal if they
13

13

00:00:33,330  -->  00:00:36,120
actually are the same instance so the
14

14

00:00:36,120  -->  00:00:38,870
assert array equals method considers two
15

15

00:00:38,870  -->  00:00:41,550
arrays equal when they're links are the
16

16

00:00:41,550  -->  00:00:43,940
same and every element in both arrays
17

17

00:00:43,940  -->  00:00:46,130
are the same as well and in the same
18

18

00:00:46,130  -->  00:00:49,880
order next assert null and assert not
19

19

00:00:49,880  -->  00:00:52,790
null we can use these methods to check
20

20

00:00:52,790  -->  00:00:56,190
for null and non null values we can use
21

21

00:00:56,190  -->  00:00:58,100
assert equal to check for null but
22

22

00:00:58,100  -->  00:01:01,040
as with the assert true and assert
23

23

00:01:01,040  -->  00:01:03,380
false methods using assert null and assert
24

24

00:01:03,380  -->  00:01:05,600
not null makes the intention
25

25

00:01:05,600  -->  00:01:07,550
clearer and we only have to pass the
26

26

00:01:07,550  -->  00:01:11,160
actual value to the method assert same and
27

27

00:01:11,160  -->  00:01:14,100
assert not same now use these when we
28

28

00:01:14,100  -->  00:01:16,140
want to check whether two instances are
29

29

00:01:16,140  -->  00:01:18,960
the exact same instance remember that
30

30

00:01:18,960  -->  00:01:21,150
these assert equals method uses the
31

31

00:01:21,150  -->  00:01:24,420
equals method to test for equality now
32

32

00:01:24,420  -->  00:01:26,550
the assert same method compares the
33

33

00:01:26,550  -->  00:01:30,360
object references only and lastly assert
34

34

00:01:30,360  -->  00:01:33,690
that now this method compares the actual
35

35

00:01:33,690  -->  00:01:36,840
value against a matcher and by the way
36

36

00:01:36,840  -->  00:01:39,480
this is not a matcher in the jdk but a J
37

37

00:01:39,480  -->  00:01:42,630
unit matcher class and think of this is
38

38

00:01:42,630  -->  00:01:44,730
something that's more powerful than the
39

39

00:01:44,730  -->  00:01:46,710
other assert methods since we can
40

40

00:01:46,710  -->  00:01:49,290
compare the actual value against a range
41

41

00:01:49,290  -->  00:01:51,810
of values and note that this method only
42

42

00:01:51,810  -->  00:01:57,150
became available in j unit 4.4 alright
43

43

00:01:57,150  -->  00:01:58,650
so it's time to move on now to look at
44

44

00:01:58,650  -->  00:02:01,800
more annotations that we can use now I
45

45

00:02:01,800  -->  00:02:03,690
said that we want to start each test
46

46

00:02:03,690  -->  00:02:06,630
fresh and so we're creating a bank
47

47

00:02:06,630  -->  00:02:08,040
account instance at the beginning of
48

48

00:02:08,040  -->  00:02:10,530
every test and the exception to that was
49

49

00:02:10,530  -->  00:02:12,230
when i ran that test in the previous video
50

50

00:02:12,230  -->  00:02:14,600
to test to see whether the bank
51

51

00:02:14,600  -->  00:02:16,370
accounts checking was the same as the
52

52

00:02:16,370  -->  00:02:18,780
savings so we're using the same
53

53

00:02:18,780  -->  00:02:21,000
values for the bank account in every
54

54

00:02:21,000  -->  00:02:23,400
test instead of writing the same line of
55

55

00:02:23,400  -->  00:02:25,740
code in each test what we can do is use
56

56

00:02:25,740  -->  00:02:28,860
a method that has the at before
57

57

00:02:28,860  -->  00:02:31,650
annotation now a method with the at
58

58

00:02:31,650  -->  00:02:34,440
before annotation is run before every
59

59

00:02:34,440  -->  00:02:37,980
test so let's try this out by changing
60

60

00:02:37,980  -->  00:02:41,370
the code to use a setup method what
61

61

00:02:41,370  -->  00:02:43,170
we're going to do is remove the creation
62

62

00:02:43,170  -->  00:02:45,030
of the bank account instance from our
63

63

00:02:45,030  -->  00:02:47,100
test methods and instead what we'll do
64

64

00:02:47,100  -->  00:02:48,030
is we'll have an instance variable
65

65

00:02:48,030  -->  00:02:50,670
called account in this class and then
66

66

00:02:50,670  -->  00:02:52,080
the setup method will create the
67

67

00:02:52,080  -->  00:02:54,420
instance and set the instance variable
68

68

00:02:54,420  -->  00:02:57,570
alrights at the top of the bank
69

69

00:02:57,570  -->  00:03:00,420
account test class we're going to put it
70

70

00:03:00,420  -->  00:03:02,160
up in there so we're going to do...
71

71

00:03:02,160  -->  00:03:48,000
....
72

72

00:03:48,000  -->  00:03:49,410
now what we're going to do is go through
73

73

00:03:49,410  -->  00:03:52,070
the other methods and remove the
74

74

00:03:52,070  -->  00:03:55,040
creation of the account of the bank
75

75

00:03:55,040  -->  00:03:56,160
account because we're not gonna need
76

76

00:03:56,160  -->  00:03:59,540
that anymore so remove it entirely now
77

77

00:03:59,540  -->  00:04:02,430
that's from the deposit method also for
78

78

00:04:02,430  -->  00:04:04,350
the get balance _ deposit method
79

79

00:04:04,350  -->  00:04:06,950
same with the get balanced withdraw
80

80

00:04:06,950  -->  00:04:10,980
method and finally to the is
81

81

00:04:10,980  -->  00:04:12,320
checking_true method
82

82

00:04:12,320  -->  00:04:16,200
basically as you can see now we're
83

83

00:04:16,200  -->  00:04:19,140
running setting that up the new field
84

84

00:04:19,140  -->  00:04:21,470
that we've defined here on line 12 is
85

85

00:04:21,470  -->  00:04:24,320
being instantiated with a new object in
86

86

00:04:24,320  -->  00:04:27,530
this setup method so the at before
87

87

00:04:27,530  -->  00:04:30,330
annotation the at org.junit. before
88

88

00:04:30,330  -->  00:04:32,520
is telling the junit
89

89

00:04:32,520  -->  00:04:36,030
framework to run this method
90

90

00:04:36,030  -->  00:04:39,060
set up every time you run the tests so
91

91

00:04:39,060  -->  00:04:40,590
lets actually just now run this to see
92

92

00:04:40,590  -->  00:04:41,220
what happens
93

93

00:04:41,220  -->  00:04:42,240
so I'm going to make sure that bank account
94

94

00:04:42,240  -->  00:04:45,570
test is still selected click on run
95

95

00:04:45,570  -->  00:04:50,100
we should get the same results last time
96

96

00:04:50,100  -->  00:04:52,920
in the each test will run and noting that
97

97

00:04:52,920  -->  00:04:55,650
the same four methods have succeeded in
98

98

00:04:55,650  -->  00:04:57,570
the withdrawal hasn't that's because we
99

99

00:04:57,570  -->  00:04:59,400
haven't really implemented that yet but
100

100

00:04:59,400  -->  00:05:01,020
notice also here we've got this running
101

101

00:05:01,020  -->  00:05:04,080
a test coming up four times and if we
102

102

00:05:04,080  -->  00:05:06,240
scroll up we can see the fifth time and
103

103

00:05:06,240  -->  00:05:08,100
the reason that it's failed one of those
104

104

00:05:08,100  -->  00:05:09,540
times is of course the withdrawal method
105

105

00:05:09,540  -->  00:05:11,820
has still just got that fail code in
106

106

00:05:11,820  -->  00:05:12,900
there because we haven't implemented it
107

107

00:05:12,900  -->  00:05:13,530
yet
108

108

00:05:13,530  -->  00:05:15,270
the bottom line is that you can see now
109

109

00:05:15,270  -->  00:05:18,150
that this setup method has been executed
110

110

00:05:18,150  -->  00:05:21,030
each time a method is tested prior to
111

111

00:05:21,030  -->  00:05:23,100
that tested being executed so therefore
112

112

00:05:23,100  -->  00:05:25,350
we are getting it in this case and new bank
113

113

00:05:25,350  -->  00:05:27,600
account object being instantiated on line
114

114

00:05:27,600  -->  00:05:30,840
16 every time a test runs so
115

115

00:05:30,840  -->  00:05:32,220
that's really great when you want to
116

116

00:05:32,220  -->  00:05:34,140
some code to be executed
117

117

00:05:34,140  -->  00:05:36,900
each time a test runs but what about the
118

118

00:05:36,900  -->  00:05:38,820
case where we want to perform setup code
119

119

00:05:38,820  -->  00:05:41,160
before the tests but we only want to set
120

120

00:05:41,160  -->  00:05:43,410
up code to be run once in other words we
121

121

00:05:43,410  -->  00:05:45,030
don't want to run up before every test
122

122

00:05:45,030  -->  00:05:48,090
and an example that might be when we
123

123

00:05:48,090  -->  00:05:50,340
want to read data that all the tests
124

124

00:05:50,340  -->  00:05:52,530
were used from a database or file or
125

125

00:05:52,530  -->  00:05:53,910
perhaps we may want to open a network
126

126

00:05:53,910  -->  00:05:56,280
socket or do some other setup that we
127

127

00:05:56,280  -->  00:05:58,920
really want to do once per run
128

128

00:05:58,920  -->  00:06:02,370
instead of once per method invocation so
129

129

00:06:02,370  -->  00:06:05,130
in that scenario would use the org. junit
130

130

00:06:05,130  -->  00:06:08,850
. before class annotation and
131

131

00:06:08,850  -->  00:06:11,040
then we use the org.junit . after
132

132

00:06:11,040  -->  00:06:14,190
class annotation to run cleanup code now
133

133

00:06:14,190  -->  00:06:16,200
the app before class method will run
134

134

00:06:16,200  -->  00:06:18,270
before any the test cases in the test
135

135

00:06:18,270  -->  00:06:20,730
class and the after class method and
136

136

00:06:20,730  -->  00:06:22,830
surprisingly will run after all the
137

137

00:06:22,830  -->  00:06:24,540
tests in the test class have completed
138

138

00:06:24,540  -->  00:06:27,120
in this case the methods have to be
139

139

00:06:27,120  -->  00:06:29,490
declared as public static methods and
140

140

00:06:29,490  -->  00:06:30,810
they must return void so a little bit
141

141

00:06:30,810  -->  00:06:31,980
different to how we set up the
142

142

00:06:31,980  -->  00:06:34,260
other classes so let's go ahead and add
143

143

00:06:34,260  -->  00:06:35,340
one so i'm going to set one up here
144

144

00:06:35,340  -->  00:06:38,190
before class i'm going to set up here so
145

145

00:06:38,190  -->  00:06:42,630
...
146

146

00:06:42,630  -->  00:06:43,620
....
147

147

00:06:43,620  -->  00:06:59,160
...
148

148

00:06:59,160  -->  00:07:06,810
...so I don't
149

149

00:07:06,810  -->  00:07:08,460
like to put the two before
150

150

00:07:08,460  -->  00:07:10,350
methods at the top of the class and the
151

151

00:07:10,350  -->  00:07:13,800
after i like to put down the bottom this
152

152

00:07:13,800  -->  00:07:15,690
so its in a logical order was
153

153

00:07:15,690  -->  00:07:16,740
logical to me
154

154

00:07:16,740  -->  00:07:18,570
let's do that for the after so....
155

155

00:07:18,570  -->  00:07:36,270
....
156

156

00:07:36,270  -->  00:07:40,560
....now remember here that
157

157

00:07:40,560  -->  00:07:42,510
the name of the method isn't important
158

158

00:07:42,510  -->  00:07:44,720
before class or after class the
159

159

00:07:44,720  -->  00:07:47,460
annotation is what junit is using
160

160

00:07:47,460  -->  00:07:49,080
to determine whether to run that method
161

161

00:07:49,080  -->  00:07:50,370
whether it's going to be run at the
162

162

00:07:50,370  -->  00:07:51,960
start of the test methods are at the end
163

163

00:07:51,960  -->  00:07:58,260
so let's actually run this if you
164

164

00:07:58,260  -->  00:08:00,150
have a look at the results you can see
165

165

00:08:00,150  -->  00:08:01,710
that we got the messages this executes
166

166

00:08:01,710  -->  00:08:04,050
before any test cases only once and
167

167

00:08:04,050  -->  00:08:06,450
likewise only ones after we've got other
168

168

00:08:06,450  -->  00:08:08,550
tests in there got the we added as a
169

169

00:08:08,550  -->  00:08:11,430
result of adding the setup method as well
170

170

00:08:11,430  -->  00:08:12,570
using the . before
171

171

00:08:12,570  -->  00:08:15,410
annotation but depending on the timing
172

172

00:08:15,410  -->  00:08:17,340
the statement printed by before
173

173

00:08:17,340  -->  00:08:19,190
class may actually appear in the console
174

174

00:08:19,190  -->  00:08:21,380
after the statement printed from the
175

175

00:08:21,380  -->  00:08:22,710
setup method and you can see that is the
176

176

00:08:22,710  -->  00:08:24,990
case here we printed here this is
177

177

00:08:24,990  -->  00:08:27,780
the last two messages printed this
178

178

00:08:27,780  -->  00:08:29,940
executed before any test cases and
179

179

00:08:29,940  -->  00:08:32,580
execute after but this doesn't actually
180

180

00:08:32,580  -->  00:08:34,910
reflect the order of execution
181

181

00:08:34,910  -->  00:08:36,180
what is happening is that the print
182

182

00:08:36,180  -->  00:08:38,720
statements are spooled to an IO thread
183

183

00:08:38,720  -->  00:08:41,030
and so they may appear in the console out
184

184

00:08:41,030  -->  00:08:42,410
of order and they're actually doing that
185

185

00:08:42,410  -->  00:08:45,180
as you can see in this scenario so just
186

186

00:08:45,180  -->  00:08:46,970
to show this lets actually add a
187

187

00:08:46,970  -->  00:08:49,830
static int variable to our class and
188

188

00:08:49,830  -->  00:08:52,440
also a method we're going to annotate with
189

189

00:08:52,440  -->  00:08:54,570
add after each time a method in our
190

190

00:08:54,570  -->  00:08:56,280
class runs what we're going to do is
191

191

00:08:56,280  -->  00:08:57,210
print out the value
192

192

00:08:57,210  -->  00:09:00,090
that variable also increment by 1 so
193

193

00:09:00,090  -->  00:09:01,710
that we can actually see a true test of
194

194

00:09:01,710  -->  00:09:05,400
when these methods are being executed so
195

195

00:09:05,400  -->  00:09:06,780
i'm going to create an instance variable
196

196

00:09:06,780  -->  00:09:07,890
here
197

197

00:09:07,890  -->  00:09:31,230
....
198

198

00:09:31,230  -->  00:09:33,060
because we only want one instance
199

199

00:09:33,060  -->  00:09:34,290
of that variable when we're going
200

200

00:09:34,290  -->  00:09:36,210
through all these methods so we're going
201

201

00:09:36,210  -->  00:09:38,040
to show the value before the classes are
202

202

00:09:38,040  -->  00:09:39,060
executed
203

203

00:09:39,060  -->  00:09:42,000
we got our set up per normal what we
204

204

00:09:42,000  -->  00:09:44,640
want to do is get into the bottom we want
205

205

00:09:44,640  -->  00:09:45,960
to add an after so I'm going to add the
206

206

00:09:45,960  -->  00:09:48,900
after shortly but before we do that in
207

207

00:09:48,900  -->  00:09:50,040
the after class
208

208

00:09:50,040  -->  00:09:51,420
let's also add account there as well
209

209

00:09:51,420  -->  00:09:56,100
....
210

210

00:09:56,100  -->  00:10:02,940
...
211

211

00:10:02,940  -->  00:10:05,310
....so this will be executed this
212

212

00:10:05,310  -->  00:10:07,020
method after each unit test is finished
213

213

00:10:07,020  -->  00:10:09,750
in a similar way to the way that the
214

214

00:10:09,750  -->  00:10:12,180
setup method was executed before every
215

215

00:10:12,180  -->  00:10:15,360
test so...
216

216

00:10:15,360  -->  00:10:17,640
....
217

217

00:10:17,640  -->  00:10:26,190
...
218

218

00:10:26,190  -->  00:10:30,000
okay so that should be that so now if we
219

219

00:10:30,000  -->  00:10:32,460
run our tests again we should be able to
220

220

00:10:32,460  -->  00:10:34,590
keep track of the count now as it goes
221

221

00:10:34,590  -->  00:10:37,050
through so looking at the output we've got
222

222

00:10:37,050  -->  00:10:41,490
count equals one running a test and down
223

223

00:10:41,490  -->  00:10:42,960
the bottom we got this
224

224

00:10:42,960  -->  00:10:44,940
executed before any test cases count
225

225

00:10:44,940  -->  00:10:47,130
equal 0 so that's actually the
226

226

00:10:47,130  -->  00:10:49,770
output from our before class method
227

227

00:10:49,770  -->  00:10:52,320
noting that it actually is set to show
228

228

00:10:52,320  -->  00:10:54,540
the value of count which will be 0 in
229

229

00:10:54,540  -->  00:10:56,040
this case and then increment after that
230

230

00:10:56,040  -->  00:10:58,380
and you can see that each other tests
231

231

00:10:58,380  -->  00:11:00,900
went through as a test was executed
232

232

00:11:00,900  -->  00:11:04,980
count is 12345 and the last one
233

233

00:11:04,980  -->  00:11:07,440
count equals six was executed in the
234

234

00:11:07,440  -->  00:11:09,960
after class method as you can see there
235

235

00:11:09,960  -->  00:11:10,770
with the output on line
236

236

00:11:10,770  -->  00:11:13,590
54 that's confirmation that even though
237

237

00:11:13,590  -->  00:11:15,090
the output is showing a different order
238

238

00:11:15,090  -->  00:11:17,730
the methods are being run in the order
239

239

00:11:17,730  -->  00:11:20,580
that I specified ok so let's go ahead
240

240

00:11:20,580  -->  00:11:22,260
and update the code in the bank account
241

241

00:11:22,260  -->  00:11:24,420
withdraw method and go back to our
242

242

00:11:24,420  -->  00:11:26,640
bank account class and have a look at
243

243

00:11:26,640  -->  00:11:27,870
this withdraw method that we've got
244

244

00:11:27,870  -->  00:11:30,510
here on line 35 right now we're not
245

245

00:11:30,510  -->  00:11:32,850
using that branch parameter and you can
246

246

00:11:32,850  -->  00:11:34,650
see that intellij telling us
247

247

00:11:34,650  -->  00:11:36,570
that the perimeter branch is never used
248

248

00:11:36,570  -->  00:11:39,060
but let's suppose this bank doesn't
249

249

00:11:39,060  -->  00:11:41,430
allow its customers to withdraw more
250

250

00:11:41,430  -->  00:11:43,350
than five hundred dollars from an ATM
251

251

00:11:43,350  -->  00:11:45,990
now the customer tries to withdraw more
252

252

00:11:45,990  -->  00:11:48,240
than 500 and they're not using a teller
253

253

00:11:48,240  -->  00:11:50,400
at a branch we need to thrown an
254

254

00:11:50,400  -->  00:11:52,140
illegal argument exception
255

255

00:11:52,140  -->  00:11:53,760
we're gonna make a bit of a change here
256

256

00:11:53,760  -->  00:11:56,850
we're going to put a test in first so if
257

257

00:11:56,850  -->  00:11:59,520
....
258

258

00:11:59,520  -->  00:12:14,460
...
259

259

00:12:14,460  -->  00:12:18,750
...and then
260

260

00:12:18,750  -->  00:12:19,860
we leave the other code at the bottom as is
261

261

00:12:19,860  -->  00:12:22,440
because the code will only be executed if
262

262

00:12:22,440  -->  00:12:24,540
that doesn't occur put a semicolon to
263

263

00:12:24,540  -->  00:12:25,650
complete that line
264

264

00:12:25,650  -->  00:12:27,540
alright so we now testing to make sure
265

265

00:12:27,540  -->  00:12:30,150
that we are only able to deal withdrawal
266

266

00:12:30,150  -->  00:12:33,120
if the amount is less than or equal to five
267

267

00:12:33,120  -->  00:12:34,860
hundred dollars and it's a branch
268

268

00:12:34,860  -->  00:12:36,900
otherwise as you can see this scenario
269

269

00:12:36,900  -->  00:12:38,250
is going to throw new
270

270

00:12:38,250  -->  00:12:41,070
illegalargumentexception let's go back
271

271

00:12:41,070  -->  00:12:43,110
and update the code in the bank account
272

272

00:12:43,110  -->  00:12:46,140
. withdraw test method then coming
273

273

00:12:46,140  -->  00:12:47,910
back here to our bank account test
274

274

00:12:47,910  -->  00:12:51,060
we got our withdraw methods at the
275

275

00:12:51,060  -->  00:12:52,230
moment we haven't got anything written
276

276

00:12:52,230  -->  00:12:54,510
in their for so go ahead and replace
277

277

00:12:54,510  -->  00:12:56,790
that now i'm going to give another fail
278

278

00:12:56,790  -->  00:13:00,840
there and we'll put....
279

279

00:13:00,840  -->  00:13:12,630
....
280

280

00:13:12,630  -->  00:13:32,120
...
281

281

00:13:32,120  -->  00:13:33,800
the test here is to check to see whether
282

282

00:13:33,800  -->  00:13:35,240
we can withdraw more than five hundred
283

283

00:13:35,240  -->  00:13:37,880
dollars and we are at a branch and the
284

284

00:13:37,880  -->  00:13:40,270
true on line 32 means that we are
285

285

00:13:40,270  -->  00:13:42,380
withdrawing the money from a branch so
286

286

00:13:42,380  -->  00:13:46,700
if we run this now run our tests you see
287

287

00:13:46,700  -->  00:13:48,230
at this point now all our test have
288

288

00:13:48,230  -->  00:13:50,330
actually passed and you can see we've
289

289

00:13:50,330  -->  00:13:51,560
got confirmation on this side as well
290

290

00:13:51,560  -->  00:13:54,080
and we can see now that there's no
291

291

00:13:54,080  -->  00:13:55,430
problems and we can see all the output
292

292

00:13:55,430  -->  00:13:57,890
now interestingly enough in the right
293

293

00:13:57,890  -->  00:14:00,170
order this time you notice how that the
294

294

00:14:00,170  -->  00:14:01,790
output is now appearing in a better
295

295

00:14:01,790  -->  00:14:03,290
order than what it was when we have
296

296

00:14:03,290  -->  00:14:05,950
tests failure previously alright so
297

297

00:14:05,950  -->  00:14:07,490
let's change that will change the name
298

298

00:14:07,490  -->  00:14:09,640
of this one back up through withdrawls say
299

299

00:14:09,640  -->  00:14:13,040
withdraw...
300

300

00:14:13,040  -->  00:14:54,560
....
301

301

00:14:54,560  -->  00:14:55,820
...bearing in mind that we've added the
302

302

00:14:55,820  -->  00:14:58,390
code in the method in bank account . java
303

303

00:14:58,390  -->  00:14:59,720
to throw an exception if that's the case
304

304

00:14:59,720  -->  00:15:05,570
so now if we actually run this you can
305

305

00:15:05,570  -->  00:15:06,620
see what's happening we've got an
306

306

00:15:06,620  -->  00:15:08,870
illegal argument exception which is to
307

307

00:15:08,870  -->  00:15:11,240
be expected because of the amount that
308

308

00:15:11,240  -->  00:15:13,250
we try to withdraw an ATM exceeded the
309

309

00:15:13,250  -->  00:15:15,350
value that we specified in bank account
310

310

00:15:15,350  -->  00:15:18,200
java in the withdrawal method but the
311

311

00:15:18,200  -->  00:15:19,670
problem here though is that the test
312

312

00:15:19,670  -->  00:15:22,070
actually passed in other words we want
313

313

00:15:22,070  -->  00:15:23,750
the method to throw in an illegal
314

314

00:15:23,750  -->  00:15:26,060
argument exception when branches false
315

315

00:15:26,060  -->  00:15:28,820
and the amount is greater than 500 so
316

316

00:15:28,820  -->  00:15:30,700
how do we handle this to correctly
317

317

00:15:30,700  -->  00:15:32,330
indicated the test has passed
318

318

00:15:32,330  -->  00:15:35,420
in this scenario we were expecting an
319

319

00:15:35,420  -->  00:15:37,670
exception to be thrown we actually have
320

320

00:15:37,670  -->  00:15:40,100
to make a modification to the annotation
321

321

00:15:40,100  -->  00:15:42,110
for the method I'm going to do that as
322

322

00:15:42,110  -->  00:15:45,050
follows down here in the withdraw
323

323

00:15:45,050  -->  00:15:47,210
branch what we do is we put
324

324

00:15:47,210  -->  00:15:51,290
....
325

325

00:15:51,290  -->  00:15:59,570
...
326

326

00:15:59,570  -->  00:16:02,360
so now when we run we should find that all
327

327

00:16:02,360  -->  00:16:05,900
our test methods will actually pass and
328

328

00:16:05,900  -->  00:16:07,310
see at this point now because we've told
329

329

00:16:07,310  -->  00:16:09,620
the method to expect an
330

330

00:16:09,620  -->  00:16:11,570
illegalargumentexception we no longer
331

331

00:16:11,570  -->  00:16:14,300
get the exception showing and all our
332

332

00:16:14,300  -->  00:16:16,070
tests are now succeeding and working
333

333

00:16:16,070  -->  00:16:17,450
properly
334

334

00:16:17,450  -->  00:16:18,380
alright I'm going to finish the video
335

335

00:16:18,380  -->  00:16:20,270
here now in the next video we're just
336

336

00:16:20,270  -->  00:16:21,650
going to come up with another little bit
337

337

00:16:21,650  -->  00:16:24,140
of a scenario to optimize this withdraw
338

338

00:16:24,140  -->  00:16:26,180
underscore not branch method and going
339

339

00:16:26,180  -->  00:16:27,890
to show you the old way of testing
340

340

00:16:27,890  -->  00:16:30,380
exceptions that I used to have to do in
341

341

00:16:30,380  -->  00:16:32,600
older versions of j unit see you in the
342

342

00:16:32,600  -->  00:16:38,050
next video
