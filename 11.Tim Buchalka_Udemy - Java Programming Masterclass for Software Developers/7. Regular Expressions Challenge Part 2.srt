1
1

00:00:04,280  -->  00:00:08,210
ok so on with our challenges challenge
2

2

00:00:08,210  -->  00:00:11,760
number 8
3

3

00:00:11,760  -->  00:00:13,770
now this challenge is to modify the
4

4

00:00:13,770  -->  00:00:16,470
regular expression from challenge 7 to
5

5

00:00:16,470  -->  00:00:18,870
use a group so that we can print all the
6

6

00:00:18,870  -->  00:00:20,820
digits that occur in a string that
7

7

00:00:20,820  -->  00:00:23,010
contains multiple occurrences of the
8

8

00:00:23,010  -->  00:00:25,680
pattern so write all the code required
9

9

00:00:25,680  -->  00:00:27,750
to accomplish this so create a pattern
10

10

00:00:27,750  -->  00:00:30,630
matcher etc and use the following string
11

11

00:00:30,630  -->  00:00:32,360
that you can see on screen to test your
12

12

00:00:32,360  -->  00:00:34,830
code now there are three occurrences of
13

13

00:00:34,830  -->  00:00:36,440
the pattern we looked at for in
14

14

00:00:36,440  -->  00:00:38,520
challenge 7 when you run your code
15

15

00:00:38,520  -->  00:00:42,330
you should see 1357 and 999 printed to
16

16

00:00:42,330  -->  00:00:43,170
the console
17

17

00:00:43,170  -->  00:00:45,000
let's see how you go with that one pause the
18

18

00:00:45,000  -->  00:00:46,730
video and I'll see you when you get back
19

19

00:00:46,730  -->  00:00:50,330
alright so onto the solution for
20

20

00:00:50,330  -->  00:00:52,260
challenge eight first we're going to
21

21

00:00:52,260  -->  00:00:54,440
create the string so challenge eight
22

22

00:00:54,440  -->  00:01:13,530
...
23

23

00:01:13,530  -->  00:01:19,740
....
24

24

00:01:19,740  -->  00:02:10,320
...
25

25

00:02:10,320  -->  00:02:13,500
...and note in the previous
26

26

00:02:13,500  -->  00:02:16,500
section I use
27

27

00:02:16,500  -->  00:02:19,230
their two groups separated by the braced
28

28

00:02:19,230  -->  00:02:21,060
by the square brackets but you can do it
29

29

00:02:21,060  -->  00:02:22,400
all in one like what I've done here as well
30

30

00:02:22,400  -->  00:02:24,510
....
31

31

00:02:24,510  -->  00:02:35,430
...
32

32

00:02:35,430  -->  00:02:38,280
so we are now interested in matching parts
33

33

00:02:38,280  -->  00:02:39,870
of the string rather than the string as
34

34

00:02:39,870  -->  00:02:41,610
a whole and you'll notice that I have
35

35

00:02:41,610  -->  00:02:43,700
removed the carrot and dollar boundary
36

36

00:02:43,700  -->  00:02:45,360
matches from the previous challenges
37

37

00:02:45,360  -->  00:02:47,220
regular expression now we're obviously
38

38

00:02:47,220  -->  00:02:48,870
interested in printing the numbers part
39

39

00:02:48,870  -->  00:02:50,940
of the pattern and so I put the part of
40

40

00:02:50,940  -->  00:02:52,590
the pattern that matches the digits into
41

41

00:02:52,590  -->  00:02:54,680
a group by surrounding that part of the
42

42

00:02:54,680  -->  00:02:57,720
regular expression with parentheses and
43

43

00:02:57,720  -->  00:02:59,600
I compile our regular expressions into a
44

44

00:02:59,600  -->  00:03:01,370
pattern and create a matcher using
45

45

00:03:01,370  -->  00:03:03,180
that string and then looping over the
46

46

00:03:03,180  -->  00:03:05,340
matches using the find method for each
47

47

00:03:05,340  -->  00:03:07,040
match we're printing a group one which
48

48

00:03:07,040  -->  00:03:08,760
will be the digits group remembering
49

49

00:03:08,760  -->  00:03:10,530
that group 0 is always the entire string
50

50

00:03:10,530  -->  00:03:12,930
let's just run this and see that it
51

51

00:03:12,930  -->  00:03:18,230
actually works so you can see we've got
52

52

00:03:18,230  -->  00:03:21,090
our three occurrences 135 which is from this
53

53

00:03:21,090  -->  00:03:23,340
group here seven which is from the next
54

54

00:03:23,340  -->  00:03:28,010
group and the last one 999
55

55

00:03:28,010  -->  00:03:31,690
on to the next challenge
56

56

00:03:31,690  -->  00:03:35,120
now challenged 9
57

57

00:03:35,120  -->  00:03:37,280
let's suppose that we're reading strings
58

58

00:03:37,280  -->  00:03:39,650
have to match the patterns we used in
59

59

00:03:39,650  -->  00:03:42,530
challenge seven challenges 7 and 8 from a
60

60

00:03:42,530  -->  00:03:45,040
file so tabs are used to separate the
61

61

00:03:45,040  -->  00:03:47,900
matches with one exception the last
62

62

00:03:47,900  -->  00:03:51,440
match is followed by a new line so that's
63

63

00:03:51,440  -->  00:03:54,110
your challenge is to solve this and the
64

64

00:03:54,110  -->  00:03:55,570
revised challenge 8 string is going to
65

65

00:03:55,570  -->  00:03:57,310
look like you see on the screen now
66

66

00:03:57,310  -->  00:03:59,320
so basically the challenges to revise
67

67

00:03:59,320  -->  00:04:01,450
the regular expression accordingly and
68

68

00:04:01,450  -->  00:04:03,260
extract all the numbers as we did
69

69

00:04:03,260  -->  00:04:05,650
in challenge 8 see how you go with that one
70

70

00:04:05,650  -->  00:04:07,340
pause the video now and i'll see you
71

71

00:04:07,340  -->  00:04:09,950
when you get back alright so how do we
72

72

00:04:09,950  -->  00:04:12,100
do that one we're going to start by
73

73

00:04:12,100  -->  00:04:17,510
putting pattern....
74

74

00:04:17,510  -->  00:05:18,340
...
75

75

00:05:18,340  -->  00:05:21,650
....
76

76

00:05:21,650  -->  00:05:25,090
...
77

77

00:05:25,090  -->  00:05:26,060
....
78

78

00:05:26,060  -->  00:05:30,320
...
79

79

00:05:30,320  -->  00:05:31,970
alright so that's a challenge so the
80

80

00:05:31,970  -->  00:05:35,690
actual regular expression would be....
81

81

00:05:35,690  -->  00:05:37,880
....
82

82

00:05:37,880  -->  00:05:55,750
...
83

83

00:05:55,750  -->  00:05:58,870
..
84

84

00:05:58,870  -->  00:06:01,060
...
85

85

00:06:01,060  -->  00:06:05,330
....so basically all we're
86

86

00:06:05,330  -->  00:06:06,830
really doing here is updating the
87

87

00:06:06,830  -->  00:06:08,960
regular expression to use the character
88

88

00:06:08,960  -->  00:06:11,380
class / S which is going to catch
89

89

00:06:11,380  -->  00:06:13,120
the white space character that occurs
90

90

00:06:13,120  -->  00:06:15,400
after each occurrence of letters periods
91

91

00:06:15,400  -->  00:06:18,800
digits so both tab and the new line are
92

92

00:06:18,800  -->  00:06:20,960
considered white space so I know I type that
93

93

00:06:20,960  -->  00:06:22,810
all in to make it look like harder than what it
94

94

00:06:22,810  -->  00:06:24,680
was but it's really quite a simple
95

95

00:06:24,680  -->  00:06:26,210
solution as you can see so lets actually
96

96

00:06:26,210  -->  00:06:28,400
run that importantly to check that this
97

97

00:06:28,400  -->  00:06:30,940
does work and I need to change the while
98

98

00:06:30,940  -->  00:06:32,590
for some reason I thought I change
99

99

00:06:32,590  -->  00:06:37,130
that.....ok
100

100

00:06:37,130  -->  00:06:38,500
that's obviously the one that we're
101

101

00:06:38,500  -->  00:06:44,990
working on let's try running it and we still got
102

102

00:06:44,990  -->  00:06:46,090
three matches so obviously that's
103

103

00:06:46,090  -->  00:06:48,770
working well as which is excellent
104

104

00:06:48,770  -->  00:06:50,360
alright so let's move on to the next
105

105

00:06:50,360  -->  00:06:52,900
challenge
106

106

00:06:52,900  -->  00:06:54,790
hitting double-figures challenge number
107

107

00:06:54,790  -->  00:06:58,060
10 alright so instead of printing out the
108

108

00:06:58,060  -->  00:06:59,830
numbers themselves print out this
109

109

00:06:59,830  -->  00:07:02,650
started and indices so use the same
110

110

00:07:02,650  -->  00:07:04,270
string we used to challenge 9 here
111

111

00:07:04,270  -->  00:07:06,720
you want to make these indices inclusive
112

112

00:07:06,720  -->  00:07:09,190
for example the start index printed for
113

113

00:07:09,190  -->  00:07:12,490
135 should be five and the end index should
114

114

00:07:12,490  -->  00:07:14,710
be seven as a hint here you need to
115

115

00:07:14,710  -->  00:07:17,050
look at the documentation for the matcher
116

116

00:07:17,050  -->  00:07:19,960
. start and matcher . end methods and
117

117

00:07:19,960  -->  00:07:21,280
there's more than one version of these
118

118

00:07:21,280  -->  00:07:23,470
methods as well you can see the link to
119

119

00:07:23,470  -->  00:07:25,990
the documentation for the matcher class
120

120

00:07:25,990  -->  00:07:28,000
and their also linked in the video so pause
121

121

00:07:28,000  -->  00:07:30,720
the video now and try that out and when
122

122

00:07:30,720  -->  00:07:31,960
you're ready to see my solution come
123

123

00:07:31,960  -->  00:07:34,120
back I'll see you when you get back
124

124

00:07:34,120  -->  00:07:40,180
ok so solution for challenge 10 now this
125

125

00:07:40,180  -->  00:07:41,590
is a tricky challenge for a couple
126

126

00:07:41,590  -->  00:07:44,130
reasons first of all we have to use the
127

127

00:07:44,130  -->  00:07:46,090
versions of the start and end methods
128

128

00:07:46,090  -->  00:07:48,400
that accept a group number because we
129

129

00:07:48,400  -->  00:07:50,470
interested in the indices of the group
130

130

00:07:50,470  -->  00:07:52,720
matches not the pattern matches as a
131

131

00:07:52,720  -->  00:07:56,020
whole second the end method returns the
132

132

00:07:56,020  -->  00:07:58,990
first index after the match ends to get
133

133

00:07:58,990  -->  00:08:00,250
the index of the final matching
134

134

00:08:00,250  -->  00:08:02,160
character we have to subtract one from
135

135

00:08:02,160  -->  00:08:05,340
the end method return value so lets
136

136

00:08:05,340  -->  00:08:07,240
actually try typing this in see if we get
137

137

00:08:07,240  -->  00:08:08,190
to work
138

138

00:08:08,190  -->  00:08:10,380
i'm going to do is take a copy of
139

139

00:08:10,380  -->  00:08:14,740
challenge 9 and just change it so
140

140

00:08:14,740  -->  00:08:18,400
challenge 10 here hasn't changed and the
141

141

00:08:18,400  -->  00:08:23,440
pattern won't change either and matcher 10 is
142

142

00:08:23,440  -->  00:08:26,940
going to be equal to...
143

143

00:08:26,940  -->  00:09:00,540
...
144

144

00:09:00,540  -->  00:09:02,250
alright so let's try running this first
145

145

00:09:02,250  -->  00:09:07,700
and you can see we've got the output
146

146

00:09:07,700  -->  00:09:09,060
there for the first occurrence start
147

147

00:09:09,060  -->  00:09:13,760
equals 5 and equals 7 the second occurence 14 and is 14
148

148

00:09:13,760  -->  00:09:15,420
is the start didn't actually put in the word
149

149

00:09:15,420  -->  00:09:16,320
start there should probably do that
150

150

00:09:16,320  -->  00:09:20,510
should I just do that and run
151

151

00:09:20,510  -->  00:09:27,020
again so with start equals 5 and equals 7 start equals 14
152

152

00:09:27,020  -->  00:09:29,610
and equals 14 and then the third one
153

153

00:09:29,610  -->  00:09:33,770
start equals 21 and equals 23 so that is
154

154

00:09:33,770  -->  00:09:34,980
challenge 10
155

155

00:09:34,980  -->  00:09:38,210
let's now move on to the next challenge
156

156

00:09:38,210  -->  00:09:42,750
challenge number 11
157

157

00:09:42,750  -->  00:09:44,880
so suppose we have the following string
158

158

00:09:44,880  -->  00:09:47,550
containing points on a graph within
159

159

00:09:47,550  -->  00:09:50,430
curly braces your challenges to extract
160

160

00:09:50,430  -->  00:09:53,190
what in the curly braces only see if you
161

161

00:09:53,190  -->  00:09:54,480
can figure that one out pause the video
162

162

00:09:54,480  -->  00:09:57,450
now and i'll see you when you get back
163

163

00:09:57,450  -->  00:10:02,400
ok so what we're looking for string....
164

164

00:10:02,400  -->  00:10:07,410
...
165

165

00:10:07,410  -->  00:10:09,240
....
166

166

00:10:09,240  -->  00:10:33,300
...
167

167

00:10:33,300  -->  00:10:37,740
if you run that again we get the
168

168

00:10:37,740  -->  00:10:39,090
same results so more or less be a luck
169

169

00:10:39,090  -->  00:10:41,340
that we happen to use the same
170

170

00:10:41,340  -->  00:10:43,320
challenge string for both challenges
171

171

00:10:43,320  -->  00:10:45,330
alright so moving on to finishing challenge 11
172

172

00:10:45,330  -->  00:10:47,880
so we need a
173

173

00:10:47,880  -->  00:10:50,580
pattern now....
174

174

00:10:50,580  -->  00:10:55,020
....
175

175

00:10:55,020  -->  00:11:12,180
...
176

176

00:11:12,180  -->  00:11:13,320
....
177

177

00:11:13,320  -->  00:11:26,160
...
178

178

00:11:26,160  -->  00:11:31,410
alright so the actual pattern here
179

179

00:11:31,410  -->  00:11:34,620
is going to be...
180

180

00:11:34,620  -->  00:11:43,590
...
181

181

00:11:43,590  -->  00:11:47,550
...so here
182

182

00:11:47,550  -->  00:11:48,930
what we're saying is we want anything
183

183

00:11:48,930  -->  00:11:51,780
inside the curly braces to match and
184

184

00:11:51,780  -->  00:11:53,580
since the opening and closing curly
185

185

00:11:53,580  -->  00:11:55,980
braces characters are used in regular
186

186

00:11:55,980  -->  00:11:56,520
expression
187

187

00:11:56,520  -->  00:11:59,280
with quantifiers I have escaped them when
188

188

00:11:59,280  -->  00:12:00,570
we want to match the literal characters
189

189

00:12:00,570  -->  00:12:01,710
that's why there's a backslash backslash
190

190

00:12:01,710  -->  00:12:04,560
before the left curly brace and the same
191

191

00:12:04,560  -->  00:12:06,900
for the right curly brace remember to
192

192

00:12:06,900  -->  00:12:08,370
put the contents of the curly braces
193

193

00:12:08,370  -->  00:12:10,980
into a group by using parentheses I've
194

194

00:12:10,980  -->  00:12:14,250
done and I've used plus dot ? to get the
195

195

00:12:14,250  -->  00:12:17,640
contents of the braces now the plus
196

196

00:12:17,640  -->  00:12:20,610
matches any character the dot or
197

197

00:12:20,610  -->  00:12:23,130
period matches any character the plus
198

198

00:12:23,130  -->  00:12:24,780
says that we expect at least one character
199

199

00:12:24,780  -->  00:12:26,790
and the question mark turns the plus
200

200

00:12:26,790  -->  00:12:29,670
quantifier into a lazy quantifier and it
201

201

00:12:29,670  -->  00:12:31,170
prevented for matching more characters
202

202

00:12:31,170  -->  00:12:33,570
and we want essentially so will it will
203

203

00:12:33,570  -->  00:12:35,370
actually limit the match to the content
204

204

00:12:35,370  -->  00:12:38,190
of the curly braces if we were to remove
205

205

00:12:38,190  -->  00:12:41,160
the ? quantifier the can only be one match
206

206

00:12:41,160  -->  00:12:43,200
because the plus quantifier would gobble ip
207

207

00:12:43,200  -->  00:12:44,730
everything between the first opening
208

208

00:12:44,730  -->  00:12:48,600
brace and the last closing brace so when
209

209

00:12:48,600  -->  00:12:51,090
we run this we should get four
210

210

00:12:51,090  -->  00:12:56,010
occurrences and you can see we've got
211

211

00:12:56,010  -->  00:13:00,390
4 appearance's showing...
212

212

00:13:00,390  -->  00:13:03,480
which is the contents for this 4 curly
213

213

00:13:03,480  -->  00:13:04,440
braces
214

214

00:13:04,440  -->  00:13:07,650
alright so that worked fine if we know
215

215

00:13:07,650  -->  00:13:09,750
that our data only contains points within
216

216

00:13:09,750  -->  00:13:11,790
curly braces but if we want to be more
217

217

00:13:11,790  -->  00:13:14,100
precise and only match a digit followed
218

218

00:13:14,100  -->  00:13:16,770
by a comma and space followed by digits we
219

219

00:13:16,770  -->  00:13:18,180
could do something like this
220

220

00:13:18,180  -->  00:13:20,340
let's go ahead and change that we're
221

221

00:13:20,340  -->  00:13:23,610
going to take a copy of this and call it
222

222

00:13:23,610  -->  00:13:30,640
challenge 11 a
223

223

00:13:30,640  -->  00:13:32,710
ok so the difference is here let's
224

224

00:13:32,710  -->  00:13:35,470
actually add some more content to our
225

225

00:13:35,470  -->  00:13:36,670
challenge 11 a going to
226

226

00:13:36,670  -->  00:13:38,170
actually add some invalid input as well
227

227

00:13:38,170  -->  00:13:42,100
so we're going to try....
228

228

00:13:42,100  -->  00:13:46,990
...
229

229

00:13:46,990  -->  00:13:50,320
....so we need to change our
230

230

00:13:50,320  -->  00:13:52,150
regular expression to cope with that so
231

231

00:13:52,150  -->  00:13:53,350
I'm going to just delete and type in again....
232

232

00:13:53,350  -->  00:14:00,010
....
233

233

00:14:00,010  -->  00:14:13,990
...
234

234

00:14:13,990  -->  00:14:16,300
im using the backslash d character class followed by
235

235

00:14:16,300  -->  00:14:19,570
the plus quantifier to indicate that we
236

236

00:14:19,570  -->  00:14:21,100
want more than one one or more digits
237

237

00:14:21,100  -->  00:14:23,350
followed by a comma followed by space
238

238

00:14:23,350  -->  00:14:26,500
followed by one or more digits and you
239

239

00:14:26,500  -->  00:14:28,150
saw that i also modified the test string
240

240

00:14:28,150  -->  00:14:31,840
by adding xy 11-12 into the mix so
241

241

00:14:31,840  -->  00:14:33,400
when we run we should see only the
242

242

00:14:33,400  -->  00:14:35,500
numerics that are part are within those
243

243

00:14:35,500  -->  00:14:36,820
curly braces
244

244

00:14:36,820  -->  00:14:41,440
let's just run that and perhaps
245

245

00:14:41,440  -->  00:14:44,140
confusingly can actually put 2.4 in
246

246

00:14:44,140  -->  00:14:45,730
twice there's so lets put it in a different
247

247

00:14:45,730  -->  00:14:47,380
number in there something that we're not
248

248

00:14:47,380  -->  00:14:51,250
using 634 and the other thing I'll do is
249

249

00:14:51,250  -->  00:14:52,660
I'll just to put a bit of a separator
250

250

00:14:52,660  -->  00:15:00,880
here just run that again so you can see
251

251

00:15:00,880  -->  00:15:06,400
we've got 0205 1324 it skipped X&Y
252

252

00:15:06,400  -->  00:15:08,860
because it doesn't match the regular
253

253

00:15:08,860  -->  00:15:12,640
expression we got to 6 34 11-12 alright
254

254

00:15:12,640  -->  00:15:14,260
so that's obviously working we didn't
255

255

00:15:14,260  -->  00:15:16,450
see the XY printed to the console and
256

256

00:15:16,450  -->  00:15:18,400
just as a final thought if we wanted to
257

257

00:15:18,400  -->  00:15:20,140
extract only the digits
258

258

00:15:20,140  -->  00:15:22,090
without comma and space would actually
259

259

00:15:22,090  -->  00:15:24,070
put each set of digits into its own
260

260

00:15:24,070  -->  00:15:24,850
group
261

261

00:15:24,850  -->  00:15:27,040
alright we got three challenges left
262

262

00:15:27,040  -->  00:15:28,720
let's work on those last three in the
263

263

00:15:28,720  -->  00:15:34,170
next video
