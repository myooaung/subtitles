WEBVTT
1
1

00:00:05.010  -->  00:00:08.520
so in this lecture we're going to look
at the Java.util.function
2

2

00:00:08.520  -->  00:00:13.290
package which was added in Java 8
now that package contains functional
3

3

00:00:13.290  -->  00:00:17.910
interfaces that are meant to be used
with lambda expressions now the
4

4

00:00:17.910  -->  00:00:20.490
interfaces aren't meant to do anything
specific
5

5

00:00:20.490  -->  00:00:24.300
they represent the structure of lambda
expressions that are commonly used in
6

6

00:00:24.300  -->  00:00:27.930
java and you'll see what I mean as we
look at some of the available interfaces
7

7

00:00:27.930  -->  00:00:35.300
going to start by creating a new project
i'm going to call this one employees
8

8

00:00:35.300  -->  00:00:40.760
gonna be a regular java project create the
template which we normally do so
9

9

00:00:40.760  -->  00:00:46.850
employees is what i'm going to call it
finish and open up in a new window and
10

10

00:00:46.850  -->  00:00:51.230
that's because i'm going to copy some
code from the current or the last
11

11

00:00:51.230  -->  00:00:55.580
project we worked on into here just to
save a bit of typing so the first one
12

12

00:00:55.580  -->  00:01:03.950
is i'm going to create a class in here
called employee in the new project and
13

13

00:01:03.950  -->  00:01:08.400
i'm just going to swing over to the
other project and this the lambdas
14

14

00:01:08.400  -->  00:01:11.670
project we worked on in the previous
video and i'm just going to grab the
15

15

00:01:11.670  -->  00:01:16.590
code for that class and i'm just going
to grab the entire code because i'm
16

16

00:01:16.590  -->  00:01:19.650
using exactly the same package name and
I can do that
17

17

00:01:19.650  -->  00:01:25.770
come back over here and select all and
paste and we are getting this error
18

18

00:01:25.770  -->  00:01:29.760
about lambda expressions not being supported so just
need to make sure that I'm running it
19

19

00:01:29.760  -->  00:01:36.030
the right I'll language level open module settings and I'm gonna go to project
20

20

00:01:36.030  -->  00:01:41.010
and make sure we're on lambdas version
8 for the project language level and
21

21

00:01:41.010  -->  00:01:45.570
that should fix these errors right so
let's fix those and the other thing I
22

22

00:01:45.570  -->  00:01:50.490
want to copy over from the other project
is the code that creates and populates
23

23

00:01:50.490  -->  00:01:54.300
the list and as well as the code that
iterates over the list and print out the
24

24

00:01:54.300  -->  00:02:00.510
employee's name and age and that was in
the main class oops the main class
25

25

00:02:00.510  -->  00:02:04.440
from the lambdas project and so that's
just this code here so i'm going to copy
26

26

00:02:04.440  -->  00:02:12.230
that and swing back over to the new
project and I think when copying I
27

27

00:02:12.230  -->  00:02:14.790
accidentally copied the wrong file so
let me just fix that up again so i'm
28

28

00:02:14.790  -->  00:02:18.510
going to go back and what i will do first is I'm
in the lambda projects i'm just going
29

29

00:02:18.510  -->  00:02:18.700
to
30

30

00:02:18.700  -->  00:02:27.840
copy that to the right place to main i'm
just going to undo these changes
31

31

00:02:29.050  -->  00:02:34.230
alright so we've now got the main package
i'm going to paste it in first the code that
32

32

00:02:34.230  -->  00:02:38.980
I copy and pasted and that's
gonna have some errors until we copy the
33

33

00:02:38.980  -->  00:02:43.300
class now we're going to go back to
employee again and this time i'm going
34

34

00:02:43.300  -->  00:02:47.170
to do i'm just going to copy the class
you don't need all the other associated
35

35

00:02:47.170  -->  00:02:51.610
stuff so i'm going to copy just that
then go back to the new
36

36

00:02:51.610  -->  00:02:59.440
project going to create a new class
called employee and i'm going to paste
37

37

00:02:59.440  -->  00:03:04.560
this in over-the-top their like so now
just make that a public class that's
38

38

00:03:04.560  -->  00:03:06.510
what I was trying to do the first time
39

39

00:03:06.510  -->  00:03:11.040
alright that should fix the other errors
now in main as well and we're good to go
40

40

00:03:11.040  -->  00:03:14.790
alright so just to confirm that it's
working let's run this to see that it
41

41

00:03:14.790  -->  00:03:21.190
does work and we see that we're getting
the results that we talked about in the
42

42

00:03:21.190  -->  00:03:26.130
last video and i'll just move the run
window down to the bottom you can see it
43

43

00:03:26.130  -->  00:03:26.700
easier
44

44

00:03:26.700  -->  00:03:31.630
alright and the code on screen you can
see we use the for each method to iterate
45

45

00:03:31.630  -->  00:03:37.350
over the employees list so if we put the
cursor over the top of the for each and
46

46

00:03:37.350  -->  00:03:42.790
on windows i believe its control q and
on a Mac it's actually f1 so if I press f1
47

47

00:03:42.790  -->  00:03:46.350
I can see you can see that I've got the
documentation that's come up so i press
48

48

00:03:46.350  -->  00:03:50.790
that or control q depending on which
operating system your running but we can see
49

49

00:03:50.790  -->  00:03:56.100
here that the method is actually looking
for a parameter of type Java.util.function
50

50

00:03:56.100  -->  00:04:01.120
.consumer and a diamond
and we've got a super t in the middle
51

51

00:04:01.120  -->  00:04:05.200
so let's actually have a look at the
consumer documentation to see what
52

52

00:04:05.200  -->  00:04:08.200
that's all about
53

53

00:04:09.550  -->  00:04:14.950
and you can see on screen it says that
this is a functional interface and if we
54

54

00:04:14.950  -->  00:04:18.340
look at the section of the document
above the method summary this part here
55

55

00:04:18.340  -->  00:04:24.610
we see that the function method is
accept down here form this operation on
56

56

00:04:24.610  -->  00:04:29.860
the given argument the interface has an
additional method called and then down
57

57

00:04:29.860  -->  00:04:35.560
here but it has a default implementation
so what that means is consumer has one
58

58

00:04:35.560  -->  00:04:39.880
method that needs to be implemented and
so it's a functional interface and
59

59

00:04:39.880  -->  00:04:45.760
lambdas can therefore map to it now
according to the documentation the accept
60

60

00:04:45.760  -->  00:04:50.200
method performs this operation on a given
argument or on the given argument
61

61

00:04:50.200  -->  00:04:55.660
but we're not actually calling accept
though we're calling for each now if you
62

62

00:04:55.660  -->  00:05:00.280
take a look at the code for each and going to do an alt tab here to go back to
63

63

00:05:00.280  -->  00:05:08.230
our project if we have a look at code
for each and I'm pressing either command
64

64

00:05:08.230  -->  00:05:11.770
or control depending on your operating
system to have a look at the source code
65

65

00:05:11.770  -->  00:05:15.970
and click on that and have a look you
can see that for each method calls
66

66

00:05:15.970  -->  00:05:21.970
accept and that it returns void so what
does all this actually mean we pass for
67

67

00:05:21.970  -->  00:05:26.140
each a lambda expression that meets the
requirements of the consumer interface
68

68

00:05:26.140  -->  00:05:31.900
so a consumer accepts one argument and
performs an action that doesn't return a
69

69

00:05:31.900  -->  00:05:37.840
value now it's called a consumer because
its object in nothing out now this is
70

70

00:05:37.840  -->  00:05:41.620
perfect for when we want to do something
like iterate a list and print the
71

71

00:05:41.620  -->  00:05:46.600
contents sure we could write an old-style
or an enhanced for loop to do the
72

72

00:05:46.600  -->  00:05:52.060
work but doing it on one line of code is
concise and clear the lambda were using
73

73

00:05:52.060  -->  00:05:57.490
takes an employee object go back to the
code again in the case of the for each
74

74

00:05:57.490  -->  00:06:02.560
the lambda we're using takes an employee
object and it doesn't return anything so
75

75

00:06:02.560  -->  00:06:07.540
it matches what the for each method
expects consumer now when we call for
76

76

00:06:07.540  -->  00:06:12.910
each it iterates over the list on each
iteration it calls the consumers accept
77

77

00:06:12.910  -->  00:06:18.130
method passing the employee object as
the parameter now the accept method
78

78

00:06:18.130  -->  00:06:22.840
evaluates the lambda expression using
the past employee object as
79

79

00:06:22.840  -->  00:06:27.970
the argument the employee's name and age
are printed to the console and nothing is
80

80

00:06:27.970  -->  00:06:33.370
returned the employee is consumed and
the iterator moves to the next employee
81

81

00:06:33.370  -->  00:06:38.200
in the list now as I said in the last
lecture is quite a bit going on under
82

82

00:06:38.200  -->  00:06:41.860
covers when we use for each but
essentially it boils down to the
83

83

00:06:41.860  -->  00:06:46.240
iterator calling the consumers accept
method for each object in the list
84

84

00:06:46.240  -->  00:06:51.160
accept method evaluates the lambda
expression pass to by the for each
85

85

00:06:51.160  -->  00:06:57.190
method using the pass object as the
argument now have just seen an example
86

86

00:06:57.190  -->  00:07:01.810
of how the consumer interfaces used the
Java.util.function package
87

87

00:07:01.810  -->  00:07:06.730
contains over 30 functional interfaces
and don't worry we'll we won't actually be
88

88

00:07:06.730  -->  00:07:09.940
looking at all of them but we'll touch
on a few representative ones though
89

89

00:07:09.940  -->  00:07:15.250
before we move on making sure that
you are still in main java lets come over here
90

90

00:07:15.250  -->  00:07:19.150
to the lambda sender in the gutter over
here if you actually click on that
91

91

00:07:19.150  -->  00:07:25.360
notice that it takes us to the accept
method in the consumer class just as we
92

92

00:07:25.360  -->  00:07:26.500
expected
93

93

00:07:26.500  -->  00:07:31.180
ultimately it's the consumer which was
passed as a lambda expression that does
94

94

00:07:31.180  -->  00:07:35.860
the work so how else are the interfaces
in the Java.util.function
95

95

00:07:35.860  -->  00:07:41.770
package used let's suppose we want to
print all employees older than 30 to the console
96

96

00:07:41.770  -->  00:07:45.070
so what we do first is we will add a
couple more employees just to make it a
97

97

00:07:45.070  -->  00:07:48.040
bit more interesting closed down this
consumer file
98

98

00:07:48.040  -->  00:08:03.820
let's just add a few more here.....
99

99

00:08:03.820  -->  00:08:35.260
....
100

100

00:08:35.260  -->  00:08:39.970
now lets start by using an enhanced for loop so
what we'll do is we'll just delete this
101

101

00:08:39.970  -->  00:08:48.400
for loop their for now and we'll just create a
new one.....
102

102

00:08:48.400  -->  00:08:56.290
....
103

103

00:08:56.290  -->  00:09:03.250
.....
104

104

00:09:03.250  -->  00:09:11.800
....
105

105

00:09:11.800  -->  00:09:19.480
.....
106

106

00:09:19.480  -->  00:09:25.480
....so we run that we should see looking at the
107

107

00:09:25.480  -->  00:09:29.680
list here we've got one two three
employees that are 30 or above
108

108

00:09:33.810  -->  00:09:37.440
I have got 3
109

109

00:09:37.440  -->  00:09:42.000
I've got Red Riding Hood 35 prince charming 31
and Jack hill 40 so that's correct
110

110

00:09:42.000  -->  00:09:46.920
we're getting the results back for 3
they're so lets change this code now to use
111

111

00:09:46.920  -->  00:09:51.330
a lambda expression so I'm just going to
comment this part this code out for now
112

112

00:09:51.330  -->  00:09:58.230
enhanced for loop and put the lambda above so we do something like....
113

113

00:09:58.230  -->  00:10:06.750
....
114

114

00:10:06.750  -->  00:10:15.150
.....
115

115

00:10:15.150  -->  00:10:18.150
....
116

116

00:10:21.300  -->  00:10:28.050
ok we'll just run this again to confirm
that it works and we got the same
117

117

00:10:28.050  -->  00:10:33.420
results three employees so once again
we pass the for each method a lambda
118

118

00:10:33.420  -->  00:10:38.400
expression that meets the requirements
of a consumer interface but let's say we
119

119

00:10:38.400  -->  00:10:42.540
want to print out all the employees who are
30 or younger than 30 so let's actually
120

120

00:10:42.540  -->  00:10:48.030
do that as well so I'm going to leave
that first one in there then we can also
121

121

00:10:48.030  -->  00:10:52.920
create a second loop which is for
employees 30 and younger so we're going
122

122

00:10:52.920  -->  00:10:59.520
to start out by printing a message here....
123

123

00:11:00.990  -->  00:11:18.510
....
124

124

00:11:18.510  -->  00:11:25.110
...
125

125

00:11:25.110  -->  00:11:30.990
....
126

126

00:11:30.990  -->  00:11:38.520
....so lets run that to make
127

127

00:11:38.520  -->  00:11:44.490
sure that works as well you can see
there that we've got both of them
128

128

00:11:44.490  -->  00:11:49.380
returning the right results so
while that does work we are repeating
129

129

00:11:49.380  -->  00:11:50.380
ourselves
130

130

00:11:50.380  -->  00:11:55.150
the only difference between the first
and second lambda expressions is the if
131

131

00:11:55.150  -->  00:11:59.800
condition so what we could do is we
could move the code into a method and
132

132

00:11:59.800  -->  00:12:03.580
pass a boolean parameter that tells the
method whether we want the younger or older
133

133

00:12:03.580  -->  00:12:07.510
employees for example we could pass a
true if you want greater then and
134

134

00:12:07.510  -->  00:12:11.380
false if you wanted less than or equal
to it would work but it feels like a
135

135

00:12:11.380  -->  00:12:12.160
hack
136

136

00:12:12.160  -->  00:12:16.360
perhaps there is a better way and this
looks like a great place to use the
137

137

00:12:16.360  -->  00:12:20.710
predicate interface that's built into
the Java.util.function package
138

138

00:12:20.710  -->  00:12:25.480
now the test method is the functional
method in this case and it accepts a
139

139

00:12:25.480  -->  00:12:30.460
predicate that returns a boolean value
we can replace the if conditions were
140

140

00:12:30.460  -->  00:12:35.230
using in our two for each calls with a
predicate going to start by moving the
141

141

00:12:35.230  -->  00:12:39.520
code into a method called print
employees by age and we'll assume we
142

142

00:12:39.520  -->  00:12:43.120
want to print the older employees so
let's do that first going to create
143

143

00:12:43.120  -->  00:12:51.250
that method....so it's going to be private....
144

144

00:12:51.250  -->  00:13:09.760
.....
145

145

00:13:09.760  -->  00:13:16.420
.....so I haven't made any
146

146

00:13:16.420  -->  00:13:21.010
changes whatsoever to that at the moment
and also delete the second code block as well
147

147

00:13:21.010  -->  00:13:29.200
.....we want to pass our employees over
string as a parameter we're going to add
148

148

00:13:29.200  -->  00:13:34.690
that we also need to somehow passed the
condition will test the employees age
149

149

00:13:34.690  -->  00:13:38.890
against and that's where the predicate
will come in now we can't use the for
150

150

00:13:38.890  -->  00:13:43.000
each loop because it expects a consumer
so instead we need to go back to using
151

151

00:13:43.000  -->  00:13:47.350
an enhanced for loop so let's try that
and see what actually happens so i'm
152

152

00:13:47.350  -->  00:13:52.540
going to change the parameters first the parameters us going to be second
153

153

00:13:52.540  -->  00:13:56.890
problem is going to be string....
154

154

00:13:56.890  -->  00:14:00.250
....
155

155

00:14:00.940  -->  00:14:41.800
....
156

156

00:14:41.800  -->  00:14:46.660
...
157

157

00:14:47.260  -->  00:14:54.790
...ok so our if statement is now using the predicate parameter the for
158

158

00:14:54.790  -->  00:15:00.040
loop passes each employee to the predicate
test method which in turn uses the
159

159

00:15:00.040  -->  00:15:04.750
employee as a parameter or as the
parameter for the lambda expression that
160

160

00:15:04.750  -->  00:15:09.970
maps to the predicate so hopefully that
sounds familiar it's the same way you
161

161

00:15:09.970  -->  00:15:14.830
have for each it uses consumer now back
to predicate if the test method returns
162

162

00:15:14.830  -->  00:15:19.570
true the employee will be printed so
let's now use the method to print out
163

163

00:15:19.570  -->  00:15:24.610
employees older than 30 and employees 30
or younger will add this code to the
164

164

00:15:24.610  -->  00:15:28.420
main method just below the definitions
where we've added the employees to the
165

165

00:15:28.420  -->  00:15:34.480
arraylist we can do that by calling the\function.....
166

166

00:15:34.480  -->  00:15:40.810
....
167

167

00:15:40.810  -->  00:15:57.910
.....
168

168

00:15:57.910  -->  00:16:06.880
....
169

169

00:16:07.890  -->  00:16:14.370
....
170

170

00:16:14.370  -->  00:16:21.180
....so you can see now that the predicate arguments are
171

171

00:16:21.180  -->  00:16:24.180
just lambda expressions that match the
predicate interface
172

172

00:16:24.870  -->  00:16:28.440
alright so I'm going to finish the video
here now in the next video will continue
173

173

00:16:28.440  -->  00:16:31.860
on looking at this code and will
actually start running this and
174

174

00:16:31.860  -->  00:16:36.060
discussing the predicate a little bit
further so we'll see you in the next
175

175

00:16:36.060  -->  00:16:36.450
video
