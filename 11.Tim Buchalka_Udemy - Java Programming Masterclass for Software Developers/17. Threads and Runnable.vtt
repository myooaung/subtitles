WEBVTT
1
1

00:00:05.380  -->  00:00:10.920
in the previous video we saw how the
application we developed could end up in
2

2

00:00:10.920  -->  00:00:15.790
the you know showing a bad user
experience and again that's because the
3

3

00:00:15.790  -->  00:00:20.830
event handlers code that we write runs
on the UI thread and just a note in here
4

4

00:00:20.830  -->  00:00:24.510
that there is going to be a future
section of the course that deals with
5

5

00:00:24.510  -->  00:00:28.390
its concept of threads in detail for now
just think of it as a process that sort
6

6

00:00:28.390  -->  00:00:31.940
of runs by itself on the computer but
we'll be talking about that a lot more
7

7

00:00:31.940  -->  00:00:36.020
in detail but basically the event
handler which is still running on the UI
8

8

00:00:36.020  -->  00:00:40.410
thread isn't the optimal solution for
process that takes some time to complete
9

9

00:00:40.410  -->  00:00:44.000
in other words if our event handlers needs to do
something that it will take more than let's
10

10

00:00:44.000  -->  00:00:48.890
say a second then what it should really
be doing is starting another thread now this
11

11

00:00:48.890  -->  00:00:53.680
new thread would do the work that's gonna take
a while to process so the event handler
12

12

00:00:53.680  -->  00:00:58.360
which is still running on the UI thread
will be able to return and the UI thread
13

13

00:00:58.360  -->  00:01:03.290
can listen to a user input again so from a perspective of the user who is
14

14

00:01:03.290  -->  00:01:07.070
running the application they won't see the
pauses and the delays and the weird
15

15

00:01:07.070  -->  00:01:10.990
things that are happening in the last video
when our application was waiting for
16

16

00:01:10.990  -->  00:01:14.780
something to happen so we refer to the
thread that's going to do the work that
17

17

00:01:14.780  -->  00:01:19.800
will take awhile as the background thread as
opposed to the UI thread now when the
18

18

00:01:19.800  -->  00:01:24.730
background thread is completed the work
it notify the user interface so for
19

19

00:01:24.730  -->  00:01:28.700
example if the event handler needed to
retrieve data from a data base well you
20

20

00:01:28.700  -->  00:01:32.310
know perhaps the internet what it would
do is kick off this background thread to do
21

21

00:01:32.310  -->  00:01:36.310
the data retrieval and when the background
thread has the data and it's completed
22

22

00:01:36.310  -->  00:01:41.240
what it needs to do it will inform the UI
and then the data can then be loaded into
23

23

00:01:41.240  -->  00:01:46.740
the user interface so I know that sounded a
bit complex but lets code an example
24

24

00:01:46.740  -->  00:01:51.120
of how we go about this so instead of
putting the UI thread to sleep as we did
25

25

00:01:51.120  -->  00:01:54.880
previously what we can do is we gonna
kick off a background thread and put
26

26

00:01:54.880  -->  00:01:59.580
that to sleep and when it wakes back up we are gonna notify the user interface we are
27

27

00:01:59.580  -->  00:02:04.190
gonna update a controller on the screen to say
that process is actually completed so what
28

28

00:02:04.190  -->  00:02:09.270
we need to do to start this working is to
add a label control to a our grid pane and
29

29

00:02:09.270  -->  00:02:14.470
lets go and do that first and we want to add
that below the check box so down here
30

30

00:02:14.470  -->  00:02:16.610
we are gonna add the label.....
31

31

00:02:16.610  -->  00:02:39.790
....
32

32

00:02:39.790  -->  00:02:46.140
..so that's gonna be our notification that
33

33

00:02:46.140  -->  00:02:52.320
something's working so lets swim back over
to our controller class and lets
34

34

00:02:52.320  -->  00:02:57.320
actually add the fxml annotation first....
35

35

00:02:57.320  -->  00:03:05.400
....so you can add the @fxml
36

36

00:03:05.400  -->  00:03:11.320
annotation before you actually done the
declaration that's quite acceptable and we need to
37

37

00:03:11.320  -->  00:03:16.610
accept that label which making sure its a java fx control which it is so that's
38

38

00:03:16.610  -->  00:03:21.600
good what we need to do is going to go
to our button class code because you
39

39

00:03:21.600  -->  00:03:25.710
still want the code to be executed or
invoke from here but we don't worry want
40

40

00:03:25.710  -->  00:03:29.440
to run in here so what we need to
do is to do something a bit different and
41

41

00:03:29.440  -->  00:03:34.180
we are going to create a runnable called
task that will ultimately going to
42

42

00:03:34.180  -->  00:03:37.680
contain the code that we want to run
in the background thread and again in
43

43

00:03:37.680  -->  00:03:40.980
terms of runnables and threads and so
forth there is a section or will be a
44

44

00:03:40.980  -->  00:03:44.930
section in the Java course detailing
this so you don't really need to
45

45

00:03:44.930  -->  00:03:49.570
understand you know in intricate detail
what we are talking about with threads so
46

46

00:03:49.570  -->  00:03:52.450
long as your understanding that is
basically just a process that's working
47

47

00:03:52.450  -->  00:03:56.880
on your computer somewhere so let's go
ahead and do that so we are gonna changes this code
48

48

00:03:56.880  -->  00:04:01.150
where we had this try and catch we are gonna
change that a little bit and we are going to
49

49

00:04:01.150  -->  00:04:09.170
actually make that create a runnable....we are gonna press enter
50

50

00:04:09.170  -->  00:04:12.830
their and when I do that you should find
it will generate some code for us I'm just gonna
51

51

00:04:12.830  -->  00:04:17.860
press enter and notice when I did that it
created all that code for us so that's
52

52

00:04:17.860  -->  00:04:21.530
the something else that IntelliJ
would do for you automatically and this
53

53

00:04:21.530  -->  00:04:25.280
process is going to actually do the work
of setting up and running this
54

54

00:04:26.140  -->  00:04:30.800
code in the background so its no longer
gonna be running on a UI thread its gonna
55

55

00:04:30.800  -->  00:04:34.420
create another process virtually another
program another instance of something
56

56

00:04:34.420  -->  00:04:37.820
running in the background on your
computer to do whatever processing we want
57

57

00:04:37.820  -->  00:04:42.240
and in this case the only processing we do
want is to run that thread.sleep....
58

58

00:04:42.240  -->  00:04:47.790
so.....and actually what I should have done
59

59

00:04:47.790  -->  00:04:52.700
probably better to copy this code and I
just pasted it in there because its
60

60

00:04:52.700  -->  00:04:56.900
identical code the differences is were
putting this in a runnable so that is
61

61

00:04:56.900  -->  00:05:00.830
actually running in the background thread
so everything is the same as it was before other
62

62

00:05:00.830  -->  00:05:03.390
than the fact that its in a runnable and
the other thing you need to do to make
63

63

00:05:03.390  -->  00:05:11.160
this valid we need to put a semi colon at the end of that runnable line their and that's now set up our task and you can see this automatically
64

64

00:05:11.160  -->  00:05:15.580
a method that was created in there when I
created the runnable task and that's
65

65

00:05:15.580  -->  00:05:20.520
telling the background process what it
has to do so you put your code you want executed
66

66

00:05:20.520  -->  00:05:26.100
within in that run method so we want to
obtain our label when the thread wakes up
67

67

00:05:26.100  -->  00:05:31.410
so we are gonna set the text to our label
right after thread.sleep returns so the code
68

68

00:05:31.410  -->  00:05:35.510
is gonna sit there and not do
anything and when it's finished after
69

69

00:05:35.510  -->  00:05:42.080
that ten seconds then we want to update our label so we can see that it's actually updated so...
70

70

00:05:42.080  -->  00:05:49.720
...and we should be able to see that
71

71

00:05:49.720  -->  00:05:52.700
on the screen so at the moment we've now
got our
72

72

00:05:52.700  -->  00:05:57.530
runnable task we've sort of declared
what needs to happen we've said that it's
73

73

00:05:57.530  -->  00:06:02.510
going to be sit their and pause for
10 seconds after 10 seconds it's gonna
74

74

00:06:02.510  -->  00:06:06.520
update our label on the screen but what we
haven't done yet is invoked it because
75

75

00:06:06.520  -->  00:06:11.460
what we need to do is actually start it
so it actually start the process just like
76

76

00:06:11.460  -->  00:06:16.460
declaring a variable declaring it is one
step but using its another one so we need to
77

77

00:06:16.460  -->  00:06:21.090
actually start using it so to actually start
this we need to come over here and
78

78

00:06:21.090  -->  00:06:29.480
underneath the declaration we type....
79

79

00:06:29.480  -->  00:06:36.710
...and that's the
code to start that now so not only
80

80

00:06:36.710  -->  00:06:39.160
have we defined we've now put the code in to
actually
81

81

00:06:39.160  -->  00:06:43.250
run it so what we going to do now is
we're gonna run this and we should
82

82

00:06:43.250  -->  00:06:48.530
be able to see that it will run and our UI should still be responsive and after 10
83

83

00:06:48.530  -->  00:06:52.000
seconds have elapsed we should be able
to see it automatically update the
84

84

00:06:52.000  -->  00:06:57.620
screen so lets run this now so now that
we're putting the background thread to
85

85

00:06:57.620  -->  00:07:01.680
sleep and not the UI thread the UI
shouldn't freeze for 10 seconds when we
86

86

00:07:01.680  -->  00:07:05.460
press a button so we should still be able to
press the buttons and see our message printed on
87

87

00:07:05.460  -->  00:07:09.670
the console you know right away and our label
will update when the background threads
88

88

00:07:09.670  -->  00:07:13.980
finished running or basically pausing for
10 seconds or sleeping for 10 seconds
89

89

00:07:13.980  -->  00:07:18.220
every time we press a button our event
handle will kick off another background thread but
90

90

00:07:18.220  -->  00:07:21.490
we'll only see our label update once and
that's because every background thread
91

91

00:07:21.490  -->  00:07:25.820
will say the same text so you won't know which background thread has
92

92

00:07:25.820  -->  00:07:29.870
updated the label because the same
content each time so we got this running on
93

93

00:07:29.870  -->  00:07:34.270
the screen now so lets see if it actually
works as we expected to so type Tim in
94

94

00:07:34.270  -->  00:07:41.070
the text field press the say hello button and
now I'm gonna click on say bye so that's good that's
95

95

00:07:41.070  -->  00:07:46.230
working so lets wait until our label updates and watch that on the screen and oops we
96

96

00:07:46.230  -->  00:07:49.990
actually got an error so the label in fact didn't update instead if we have a
97

97

00:07:49.990  -->  00:07:56.400
look at our stack trace our error you can see
that the exception there is the legal
98

98

00:07:56.400  -->  00:08:00.690
state exception not on ethics
application thread and just a number
99

99

00:08:00.690  -->  00:08:04.220
there which may be different for you in
this case is current thread equals thread five
100

100

00:08:04.220  -->  00:08:08.680
so what's going on here what does that
actually mean well it turns out that the
101

101

00:08:08.680  -->  00:08:14.450
scene graph isn't thread-safe in other
words the code assumes that nodes in the
102

102

00:08:14.450  -->  00:08:19.630
screen graph will only ever be updated
by the same thread mainly the UI thread
103

103

00:08:19.630  -->  00:08:25.410
and which we've learned is also known as
the JavaFX application thread so if more
104

104

00:08:25.410  -->  00:08:29.110
than one thread could update the node it
would be possible for the internal
105

105

00:08:29.110  -->  00:08:32.410
integrity of the node to be compromised
if you think about it so for example
106

106

00:08:32.410  -->  00:08:38.540
with thread a runs and starts to change the
state of a node and then it suspended
107

107

00:08:38.540  -->  00:08:43.620
so that thread b can run nothing in the
JavaFX code prevents thread b from also
108

108

00:08:43.620  -->  00:08:45.020
updating the same node
109

109

00:08:45.020  -->  00:08:49.010
so in other words thread b could wipe
out what thread a started so
110

110

00:08:49.010  -->  00:08:52.850
there'd be some sort of compromise these
two processes on the computer running at
111

111

00:08:52.850  -->  00:08:56.650
the same time and that is sort of conflicting
with each other so basically thread
112

112

00:08:56.650  -->  00:09:00.860
b could wipe out what thread a has started as I
mentioned and when thread a runs again it
113

113

00:09:00.860  -->  00:09:05.350
continues its updates not knowing that
its previous updates were overwritten by
114

114

00:09:05.350  -->  00:09:09.900
thread b so you can see how the
internal state or integrity of a node
115

115

00:09:09.900  -->  00:09:15.040
could be compromised in that situation
now because of that the developers of JavaFX
116

116

00:09:15.040  -->  00:09:20.100
well you know keenly aware that this is being a problem and
so whenever we want to work with nodes
117

117

00:09:20.100  -->  00:09:25.910
on the scene graph we actually must do so on
the JavaFX application thread now if we
118

118

00:09:25.910  -->  00:09:29.880
don't in other words if we try to update something as I have done here that's not in the UI thread
119

119

00:09:29.880  -->  00:09:33.990
then we are going to actually get an
exception like this one which was caused
120

120

00:09:33.990  -->  00:09:40.160
was the IllegalStateException and again
in our code we are trying to update the label you can see
121

121

00:09:40.160  -->  00:09:44.980
that on line 41and that's a node obviously in the scene graph from the background thread
122

122

00:09:44.980  -->  00:09:49.000
that's what why we are actually getting the
error now this incidentally an improvement over
123

123

00:09:49.000  -->  00:09:53.780
swing which was Java's old UI took kit
the same restriction existed there but
124

124

00:09:53.780  -->  00:09:57.720
the runtime didn't throw an exception so
in other words it just let us go ahead and
125

125

00:09:57.720  -->  00:10:01.660
do the update and weird bugs weren't actually resolved so although this is an
126

126

00:10:01.660  -->  00:10:06.190
error at least JavaFX is actually stopping us
from doing it knowing that down the tract their would be
127

127

00:10:06.190  -->  00:10:10.340
getting all sorts of
problems with your code anyway but enough about the theory
128

128

00:10:10.340  -->  00:10:15.160
how do we actually fix this well when we're
doing a long task on a background thread
129

129

00:10:15.160  -->  00:10:20.620
you usually want to update a part of the
UI when the tasks finish so what we
130

130

00:10:20.620  -->  00:10:24.960
really need here is a way to force code
to run on the UI thread and JavaFX
131

131

00:10:24.960  -->  00:10:29.440
actually provides us with a way to do
this and we are going to use the run later
132

132

00:10:29.440  -->  00:10:34.180
method in the platform class and the
run later method actually accept a
133

133

00:10:34.180  -->  00:10:42.340
runnable parameter and again runnables is an interface that
we've actually used already on line 36 and its basically
134

134

00:10:42.340  -->  00:10:45.730
an interface that classes implement when
their instances will be executed on a
135

135

00:10:45.730  -->  00:10:49.630
thread as we saw with our code there and
also the developer doesn't want the
136

136

00:10:49.630  -->  00:10:54.290
class to inherit from the Thread class
so the platform.runlater methods
137

137

00:10:54.290  -->  00:10:56.570
is gonna put the runnable parameter that's
passed
138

138

00:10:56.570  -->  00:11:00.830
onto the UI threads queue so in other
words it's gonna force the runnable objects
139

139

00:11:00.830  -->  00:11:05.340
to run on the UI thread and in this
process that's exactly what we want to
140

140

00:11:05.340  -->  00:11:10.030
do so in the run method
itself that we've defined on line
141

141

00:11:10.030  -->  00:11:15.940
38 of our background thread we are gonna use platform.runlater to update the label and when
142

142

00:11:15.940  -->  00:11:19.820
the long-running task if the background thread has finished executing in other
143

143

00:11:19.820  -->  00:11:23.750
words were not gonna put this first
runnable using platform.runlater but
144

144

00:11:23.750  -->  00:11:26.780
because we got the same issues and
in fact its effectively gonna be running on the
145

145

00:11:26.780  -->  00:11:31.410
UI thread it's only after we've finish our
processing sort of as the last line we
146

146

00:11:31.410  -->  00:11:40.130
execute in the run method that we are gonna do this extra bit of code so lets actually closed it down and try it
147

147

00:11:40.130  -->  00:11:47.340
so basically instead of trying to put update our label right here on line 42 instead what we are
148

148

00:11:47.340  -->  00:11:55.570
going to do is put....
149

149

00:11:55.570  -->  00:12:00.190
...
150

150

00:12:00.190  -->  00:12:08.440
.....
151

151

00:12:08.440  -->  00:12:13.200
...so basically what we're doing
here is we're actually pausing still
152

152

00:12:13.200  -->  00:12:17.880
for 10 seconds as you can see there on
line 41 but then after that we are
153

153

00:12:17.880  -->  00:12:21.530
basically invoking the command so
that the actual label is gonna be
154

154

00:12:21.530  -->  00:12:27.120
updated on the UI thread so we don't get any exception so its a little bit more code but essentially that's the
155

155

00:12:27.120  -->  00:12:32.750
way that the JavaFX developers want us
to actually update things so lets try running
156

156

00:12:32.750  -->  00:12:35.750
this again now we should find it
actually works
157

157

00:12:37.150  -->  00:12:47.260
so we got our code running so type Tim and click on say hello and I should now be able to click on say bye say hello clear say hello
158

158

00:12:47.260  -->  00:12:52.190
that's all working nicely types something else in and lets just wait a bit longer and you
159

159

00:12:52.190  -->  00:12:55.550
can see the screen then update we did
something so it actually worked this
160

160

00:12:55.550  -->  00:12:59.130
time so our thread quite happily paused
for 10 seconds while I was doing other
161

161

00:12:59.130  -->  00:13:04.450
things and you notice that the user interface
was quite responsive during that time
162

162

00:13:04.450  -->  00:13:06.360
we didn't have any slowdowns or pauses
163

163

00:13:06.360  -->  00:13:10.420
or weird things happening it was all running like you
would have expected to do so
164

164

00:13:11.620  -->  00:13:17.740
now their is fx application thread method is
a useful method in the platform class and it
165

165

00:13:17.740  -->  00:13:21.980
returns true when the code is
running on the JavaFX application thread
166

166

00:13:21.980  -->  00:13:27.170
and false otherwise and you can actually
use that method when we try to debug our code because
167

167

00:13:27.170  -->  00:13:31.570
we're not getting the exception anymore
and we're not really sure which thread of
168

168

00:13:31.570  -->  00:13:36.750
code block is running on so let's actually
add this code just us to see how you go about
169

169

00:13:36.750  -->  00:13:45.280
doing that so come down here now to we are actually
in now in our button click code again the code up here that actually
170

170

00:13:45.280  -->  00:13:48.880
creates the runnable this is actually
within the run methods so creates the run
171

171

00:13:48.880  -->  00:13:58.220
later with the new runnable so within
their I'm gonna put...
172

172

00:13:58.220  -->  00:14:06.940
....
173

173

00:14:06.940  -->  00:14:14.600
.....
174

174

00:14:16.770  -->  00:14:26.970
....
175

175

00:14:26.970  -->  00:14:35.900
...
176

176

00:14:35.900  -->  00:14:48.090
..so let's
177

177

00:14:48.090  -->  00:14:54.430
actually checked that and see our output when we run that and put something in there
178

178

00:14:54.430  -->  00:15:00.920
....and click on say hello you can see it says I'm going to sleep
on the background thread which is what
179

179

00:15:00.920  -->  00:15:05.860
we expect so now we need to just wait until
that returns which we will get a notification
180

180

00:15:05.860  -->  00:15:10.540
that its on the UI thread there it is I am updating the label on the UI thread so
181

181

00:15:10.540  -->  00:15:15.640
that's a very useful way to debug code
because we are not getting any exception because
182

182

00:15:15.640  -->  00:15:18.160
it's working correctly if you want to
try and figure out where your code is
183

183

00:15:18.160  -->  00:15:20.970
being executed and basically using
184

184

00:15:20.970  -->  00:15:25.590
platform.runlater is one way to ensure the
code runs on the UI thread and JavaFX
185

185

00:15:25.590  -->  00:15:29.570
also provides a set of a APIs that
helped us run background threads and
186

186

00:15:29.570  -->  00:15:35.120
also to communicate with the UI and the APIs are in the JavaFx.concurrent
187

187

00:15:35.120  -->  00:15:39.720
package and this isn't really much more
advanced topics that we are not going to cover here now we may look
188

188

00:15:39.720  -->  00:15:44.110
at that when we get to the concurrency threads in a separate section so if
189

189

00:15:44.110  -->  00:15:46.130
you're interested in learning more about
it too can actually read the
190

190

00:15:46.130  -->  00:15:49.130
documentation on that bring that up on the screen
191

191

00:15:51.540  -->  00:15:59.310
you can go to the link their concurrency.htm in the oracle documentation and you can actually read more about that in their
192

192

00:15:59.310  -->  00:16:02.310
links is actually in the Resources
section as well
193

193

00:16:03.720  -->  00:16:06.970
ok so at this point now we've learned
the fundamentals of how to build a
194

194

00:16:06.970  -->  00:16:11.150
JavaFX application so its time to put it
all together and what we gonna do is
195

195

00:16:11.150  -->  00:16:15.690
build an application that actually does
something meaningful so we are gonna start doing
196

196

00:16:15.690  -->  00:16:17.050
that in the next lecture
