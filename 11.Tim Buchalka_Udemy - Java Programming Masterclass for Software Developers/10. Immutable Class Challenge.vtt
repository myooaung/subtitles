WEBVTT
1
1

00:00:05.210  -->  00:00:09.040
so lets finish up our discussion about
immutable objects before we go on to the
2

2

00:00:09.040  -->  00:00:13.590
challenge I just wanna make it clear to
the question what exactly is wrong with
3

3

00:00:13.590  -->  00:00:17.010
allowing a class to be extended so have
a look at the declaration of our location
4

4

00:00:17.010  -->  00:00:26.000
map, one line 8 our locations map in main now the map is
declared using generic so that accepts
5

5

00:00:26.000  -->  00:00:31.340
an integer key and a value of type location
but if location is extended then
6

6

00:00:31.340  -->  00:00:35.750
instances of the new class could also be
used so this is generally not a problem
7

7

00:00:35.750  -->  00:00:40.260
in fact it's actually incredibly useful
but if we use the location type for the
8

8

00:00:40.260  -->  00:00:45.100
key instead of the value we wanted to
ensure that only completely
9

9

00:00:45.100  -->  00:00:48.710
immutable objects could be used as the
keys then we have to prevent
10

10

00:00:48.710  -->  00:00:53.990
subclasses over which we have got no control
from being used so anyone who wants to use
11

11

00:00:53.990  -->  00:00:58.070
the functionality of the locations class
once we prevent them from extending it
12

12

00:00:58.070  -->  00:01:03.530
can still to do so using composition they
create methods that then call the
13

13

00:01:03.530  -->  00:01:07.510
locations class methods from an instance of
a location that could still do almost
14

14

00:01:07.510  -->  00:01:11.610
everything that's subclassing would have
allowed them to do except use their own
15

15

00:01:11.610  -->  00:01:16.680
class where location object was expected
and most of the time you do not want
16

16

00:01:16.680  -->  00:01:20.320
your classes to be immutable a bank
account class where the balanced where
17

17

00:01:20.320  -->  00:01:24.500
the changes would be of little use
no matter how we love to check on such an
18

18

00:01:24.500  -->  00:01:28.240
account but even if we don't want an
immutable class you can use these
19

19

00:01:28.240  -->  00:01:32.070
techniques in various combinations to
make your classes certainly more robust
20

20

00:01:32.070  -->  00:01:35.680
than if you didn't do anything at all now the
challenge is that there's still a
21

21

00:01:35.680  -->  00:01:40.000
problem with location it's possible to
crash the program as a result the
22

22

00:01:40.000  -->  00:01:43.530
problem is with the location class
itself so don't waste time trying to
23

23

00:01:43.530  -->  00:01:47.280
crash it by entering invalid input there is
also no consistency checking in the
24

24

00:01:47.280  -->  00:01:51.110
main method so if we created exits
that refer to a location say for
25

25

00:01:51.110  -->  00:01:55.710
example location 6 that doesn't exist in
our locations map then program will also
26

26

00:01:55.710  -->  00:01:59.880
crash but this challenge is about
finding a problem with the location
27

27

00:01:59.880  -->  00:02:04.070
class, so here is your challenge and the
challenges to work out what is wrong
28

28

00:02:04.070  -->  00:02:09.650
with the location constructor that would
allow the program to compile and crash
29

29

00:02:09.650  -->  00:02:14.320
at runtime so when you identify the problem modify the code to fix it so I just i’ll just say that again
30

30

00:02:14.320  -->  00:02:18.030
your challenge here is to work out what
is wrong with the location
31

31

00:02:18.030  -->  00:02:21.910
constructor that you can see on screen line 14
that will allow the program to
32

32

00:02:21.910  -->  00:02:26.640
compile but crush on run time when you
identify the problem modify the code to fix it
33

33

00:02:26.640  -->  00:02:30.150
and so I’ll pause the video now and when
you come back I'll show you what the
34

34

00:02:30.150  -->  00:02:36.160
problem was and how to fix
it
35

35

00:02:36.160  -->  00:02:39.650
ok so did you figure it out what the
problem was well the problem is that the
36

36

00:02:39.650  -->  00:02:44.600
constructi crash with a
NullPointerException at line  17 if
37

37

00:02:44.600  -->  00:02:49.820
null is passed instead of the map and to see
this lets modify the method, i’ll go back to the
38

38

00:02:49.820  -->  00:02:55.720
main method, i’ll closed down
the run window and will change temp exit
39

39

00:02:55.720  -->  00:03:04.430
to null we're now passing a null map
so if we run, we get a crash 10 NullPointer
40

40

00:03:04.430  -->  00:03:09.280
Exception and we are getting a crash on line
17 but the program crashes as a result
41

41

00:03:09.280  -->  00:03:12.450
so you might look at the code and think well it's probably reasonable
42

42

00:03:12.450  -->  00:03:18.900
on line 22 to have a null passed
because there aren't any exits because
43

43

00:03:18.900  -->  00:03:25.000
it's a special sort of location that
were using to indicate that the program has quit but
44

44

00:03:25.000  -->  00:03:29.310
obviously having crashes is a bad thing so
the solution, go back to the location
45

45

00:03:29.310  -->  00:03:34.720
constructor is to test the constructors
argument and don't try to
46

46

00:03:34.720  -->  00:03:38.560
initialize the new map if null is passed for the exits
47

47

00:03:38.560  -->  00:03:45.380
so consider what I mean there we put a test here
we put if exits not equal to null so if
48

48

00:03:45.380  -->  00:03:49.610
there is some valid map from that was
pass to this method and we're going to
49

49

00:03:49.610  -->  00:04:00.040
initialize it with that map else we put
this…
50

50

00:04:00.040  -->  00:04:04.950
with an empty constructor meaning it's going
to create a new HashMap but obviously
51

51

00:04:04.950  -->  00:04:09.700
because there is no valid data pass to this constructor
52

52

00:04:09.700  -->  00:04:13.160
and everything else can remain the same the
code on line 22 will still work because
53

53

00:04:13.160  -->  00:04:17.190
it's got a valid map because it has been initialised correctly so to confirm that we
54

54

00:04:17.190  -->  00:04:21.080
run that again we are no longer getting an error and we can still navigate
55

55

00:04:21.080  -->  00:04:28.720
and do things as you have have normally done so that’s it I hope you got a lot out of immutability and out of
56

56

00:04:28.720  -->  00:04:31.010
this adventure challenges and I'll see
you in the next video
