WEBVTT
1
1

00:00:05.180  -->  00:00:10.080
so lets have a talked about the set interface
as well as hash set said so sets are
2

2

00:00:10.080  -->  00:00:14.450
generally used less often than lists and
maps that they can in themselves be
3

3

00:00:14.450  -->  00:00:19.090
extremely useful now where a list is as
an ordered collection of items that can
4

4

00:00:19.090  -->  00:00:24.180
contain duplicates a set has no defined
ordering number one and the order or
5

5

00:00:24.180  -->  00:00:28.530
the Oracle documentation define it as
chaotic but secondly a set cannot
6

6

00:00:28.530  -->  00:00:32.730
contain duplicates so very important
distinctions there in actual fact the lack of
7

7

00:00:32.730  -->  00:00:36.840
duplicates is the most important
differentiator as there are ordered sets
8

8

00:00:36.840  -->  00:00:41.040
such as the link hash set and tree set that
will look at together with the
9

9

00:00:41.040  -->  00:00:45.000
corresponding map objects in a later
video now if you want to ensure that
10

10

00:00:45.000  -->  00:00:49.120
there is no duplicates in your new
collection then a good way of doing that
11

11

00:00:49.120  -->  00:00:53.890
is to use a set rather than a list
now the set interface just like
12

12

00:00:53.890  -->  00:00:57.420
everything else in the collections
framework is generic and it takes single
13

13

00:00:57.420  -->  00:01:02.410
type just like maps and lists it's
possible to create a raw set but this
14

14

00:01:02.410  -->  00:01:05.870
is intended really for backwards
compatibility with code created before
15

15

00:01:05.870  -->  00:01:09.720
generics were added to the Java language and
generally speaking it's not a good idea
16

16

00:01:09.720  -->  00:01:10.890
to do that
17

17

00:01:10.890  -->  00:01:17.270
now the set interface defines the basic
methods add remove and clear to maintain
18

18

00:01:17.270  -->  00:01:22.390
the items in the set as well as offering
a size method and is empty to provide some
19

19

00:01:22.390  -->  00:01:26.930
information about how much or how many
items are actually in the set whether it is
20

20

00:01:26.930  -->  00:01:30.450
empty or not now we can also check
if a specific item is in the
21

21

00:01:30.450  -->  00:01:34.470
set using the contains method now
interesting enough there's no way to
22

22

00:01:34.470  -->  00:01:38.770
retrieve an item from a set you can check
if something exists and you can iterate
23

23

00:01:38.770  -->  00:01:42.680
over all the elements in the set but
attempting to get say for example the
24

24

00:01:42.680  -->  00:01:47.360
10th element from a set isn't possible
you need to use a list for that and we've already
25

25

00:01:47.360  -->  00:01:51.990
used a set when looking at maps the
keys in the map can be retrieved as set using
26

26

00:01:51.990  -->  00:01:56.180
the key set method we talked about
before so its therefore not surprising that
27

27

00:01:56.180  -->  00:02:01.150
everything we said about keys in a map
also applies to items in a set the using
28

28

00:02:01.150  -->  00:02:05.990
immutable objects as elements in a set to
can cause problems and the behaviors is
29

29

00:02:05.990  -->  00:02:10.280
undefined if changing an object affects
equal comparisons just as a map
30

30

00:02:10.280  -->  00:02:15.180
cannot contain itself as a key a set
can't be an element of itself although once
31

31

00:02:15.180  -->  00:02:17.170
again it will be a bizarre program if it
32

32

00:02:17.170  -->  00:02:20.590
needed to actually do that now the
best-performing implementation of a set
33

33

00:02:20.590  -->  00:02:25.410
interface is the hash set class and that
uses hashes to store the items now this
34

34

00:02:25.410  -->  00:02:29.020
is just like a Hash Map class that we
looked at and in fact the hash set
35

35

00:02:29.020  -->  00:02:33.600
implementation currently uses a Hash Map
as of Java 8 although of course
36

36

00:02:33.600  -->  00:02:37.450
implementations may of course change in future
versions of Java now with a set it can be
37

37

00:02:37.450  -->  00:02:41.260
implemented using a map and it's not
hard to work out that you can actually
38

38

00:02:41.260  -->  00:02:47.390
use the corresponding map object and use
only the keys ignoring the values so this
39

39

00:02:47.390  -->  00:02:52.010
is what hash set does and whenever an
element is added to the set it becomes a key
40

40

00:02:52.010  -->  00:02:57.010
in the underlying Hash Map and a dummy object
is stored as the value so sets can be
41

41

00:02:57.010  -->  00:03:00.730
useful because operations on them are very
fast and if you're dealing with the
42

42

00:03:00.730  -->  00:03:05.680
mathematical notion of a set then the Java
collection set types really allow the
43

43

00:03:05.680  -->  00:03:09.720
usual set operation such as union and
intersection which is pretty cool so
44

44

00:03:09.720  -->  00:03:13.970
what we going to do is put some of this
theory into practice
45

45

00:03:13.970  -->  00:03:17.510
gonna create a program to model the
bodies in the solar system and to save
46

46

00:03:17.510  -->  00:03:20.920
time we won't try and create every
object even without considering
47

47

00:03:20.920  -->  00:03:24.060
asteroids and comets are nearly two
hundred in our solar systems so we'll just
48

48

00:03:24.060  -->  00:03:28.690
use a very small set no pun intended there
objects in the solar system can be
49

49

00:03:28.690  -->  00:03:33.260
grouped into various ways just planets
moons asteroids comets et-cetera also
50

50

00:03:33.260  -->  00:03:36.780
some of the moons belong to another
group so the moons orbiting a particular
51

51

00:03:36.780  -->  00:03:40.450
planet so Gettemy for example
belongs to a set of moons in the solar
52

52

00:03:40.450  -->  00:03:45.140
system and also the set of moons
orbiting Jupiter if that makes sense so to
53

53

00:03:45.140  -->  00:03:48.320
represent this the program's going to
use a map to store all the heavenly body
54

54

00:03:48.320  -->  00:03:53.540
objects then declares sets to perform the
grouping of the objects into into a
55

55

00:03:53.540  -->  00:03:59.070
different types so the actual class I'm going to implement
just has fields for name and the number of earth days
56

56

00:03:59.070  -->  00:04:02.510
in a year but obviously could contain
far more information about each body but
57

57

00:04:02.510  -->  00:04:07.570
we don't get into that so what we going
to do is create a first class which is gonna
58

58

00:04:07.570  -->  00:04:11.070
be called heavenly body so we're gonna do
is open this up now and go to our
59

59

00:04:11.070  -->  00:04:16.410
package right click the package new java
class we are gonna call this one heavenly
60

60

00:04:16.410  -->  00:04:23.510
body and were going to make that a final
class
61

61

00:04:23.510  -->  00:04:38.870
of course we've talk about final now and we are going first create a name so...and will make this final as well...
62

62

00:04:38.870  -->  00:04:42.160
and we are getting those errors because it hasn't been initialized
but we will initialized in the constructor
63

63

00:04:42.160  -->  00:04:48.970
...
64

64

00:04:48.970  -->  00:05:00.630
and we want a set for satellites so....
65

65

00:05:00.630  -->  00:05:13.190
and we'll import allow that import and we will call this one satellites so let's
create the constructor now and the constructor
66

66

00:05:13.190  -->  00:05:17.250
we are going to use is just the name in the
orbital period we're not going to have
67

67

00:05:17.250  -->  00:05:22.440
the set for the satellites variable which is a set pass as
68

68

00:05:22.440  -->  00:05:28.330
a parameter just those 2 but what we can do in the constructor is initialized it so....
69

69

00:05:28.330  -->  00:05:36.990
.....and note we don't have to include that that's optional
70

70

00:05:36.990  -->  00:05:42.380
and we are getting an error most likely because
of the package by default default
71

71

00:05:42.380  -->  00:05:50.500
options go to project structure and change this to
8 we should find now that's valid
72

72

00:05:50.500  -->  00:05:53.400
we don't enforce to
actually to put the type in to
73

73

00:05:53.400  -->  00:05:57.090
generics here because it will default to the
type we've defined on line12 which is a
74

74

00:05:57.090  -->  00:06:04.780
heavenly body and I made a type their....
75

75

00:06:04.780  -->  00:06:11.050
...so there is our
initialization for our constructor we also
76

76

00:06:11.050  -->  00:06:19.660
want a getter for both name and orbital
periods so will just add getters for those
77

77

00:06:19.660  -->  00:06:25.090
next what we want to do is we want to have the option to add a moon and this is why
78

78

00:06:25.090  -->  00:06:30.520
we want to pass a parameter which
will be a heavenly body and will call it moon and
79

79

00:06:30.520  -->  00:06:35.080
we wanna added it to effectively to the hash set so
we're going to put....
80

80

00:06:35.080  -->  00:06:45.330
...so it is going to accept a heavenly body.....
81

81

00:06:45.330  -->  00:06:52.250
....so we are returning
whether we succeeded with the addition which of
82

82

00:06:52.250  -->  00:06:55.420
course should always be the case and
lastly we want to just to return
83

83

00:06:55.420  -->  00:07:01.340
a getter for satellites probably should have done that previously
with the constructor so will just do a getter and we return
84

84

00:07:01.340  -->  00:07:06.430
that for satellites like so
85

85

00:07:06.430  -->  00:07:09.750
instead of returning our object we're
going to create a new to object and
86

86

00:07:09.750  -->  00:07:15.660
return it so there can be no weird things
happening with our own object and
87

87

00:07:15.660  -->  00:07:20.630
just for security reasons and we
talked about that in a previously video....
88

88

00:07:20.630  -->  00:07:28.610
...essentially we are creating a new
hash set of the current
89

89

00:07:28.610  -->  00:07:35.340
contents of our satellite which again
means that the oode that is calling this object
90

90

00:07:35.340  -->  00:07:39.070
doesn't have access to our original hash set and we have determined in previous
91

91

00:07:39.070  -->  00:07:42.340
videos that it would be possible to do
that unless we have specifically do
92

92

00:07:42.340  -->  00:07:45.340
something like this create a new
hash set so they can't make any changes
93

93

00:07:45.340  -->  00:07:50.500
let's go back to our main class we are gonna store the heavenly bodies in a map
94

94

00:07:50.500  -->  00:07:55.500
and also gonna contain a set containing the ones in
the planets so we are going back to the main
95

95

00:07:55.500  -->  00:08:04.070
and actually we are gonna create a couple of
variables and will put those up here because they are going to be static
96

96

00:08:04.070  -->  00:08:13.220
private fields for this class so.....
97

97

00:08:13.220  -->  00:08:17.000
.....
98

98

00:08:17.000  -->  00:08:29.780
....accept import and its gonna be Java util map standard map and its gonna be...
99

99

00:08:29.780  -->  00:08:34.190
....
100

100

00:08:34.190  -->  00:08:40.090
.....
101

101

00:08:40.090  -->  00:08:47.490
...and will accept that import as well...
102

102

00:08:47.490  -->  00:08:54.240
alright so let's go ahead and put some
entries in so lets put mercury in so....
103

103

00:08:54.240  -->  00:09:04.670
...and we are gonna start with Mercury and the orbital period for that is going
104

104

00:09:04.670  -->  00:09:18.550
to be 88 days and add it to the solar system
so....
105

105

00:09:18.550  -->  00:09:22.920
...so we are storing it with the key-value pair
into our map again we've seen that code before and
106

106

00:09:22.920  -->  00:09:29.020
add couple of other ones actually what we do before that we need to add it also
to our set as well because we added it to
107

107

00:09:29.020  -->  00:09:38.300
the MAP we are gonna add it to the set so....and lets just copy a bit of this code so we can actually do a bit more
108

108

00:09:38.300  -->  00:09:46.230
instead of typing it we can just do a copy and paste we are gonna add a couple more
lets add two more plants Venus and Earth
109

109

00:09:46.230  -->  00:09:53.790
so will put Venus and Earth..so will change this to Venus....
110

110

00:09:53.790  -->  00:09:57.350
...and the days rotation is 225...
111

111

00:09:57.350  -->  00:10:08.760
..and earth of course is 365 and call that earth and we've added three
planets the next let's actually add a
112

112

00:10:08.760  -->  00:10:24.190
moon so we're going to put....
113

113

00:10:24.190  -->  00:10:38.250
....and we should be a little bit different this time we are gonna type....
114

114

00:10:38.250  -->  00:10:40.020
...
115

115

00:10:40.020  -->  00:10:45.190
because we got earth up there in line 21 we wanna add
this moon to earth as opposed to adding it
116

116

00:10:45.190  -->  00:10:48.870
as a planet because of course it's a moon so....
117

117

00:10:48.870  -->  00:10:56.940
...so what I'm going to do is just grab a whole
bunch of code were going to actually define Mars
118

118

00:10:56.940  -->  00:11:02.600
Jupiter and various other planets as
well as their moons right down to up to and
119

119

00:11:02.600  -->  00:11:08.350
including pluto we won't get into a debate about whether
pluto is a planet or not but for now place the code
120

120

00:11:08.350  -->  00:11:13.570
in and you can see we got the ones we entered we got mars here
on line 29
121

121

00:11:13.570  -->  00:11:18.930
we've added the 2 moons of mars there and
on line 41 Jupiter and the various
122

122

00:11:18.930  -->  00:11:24.810
moons part of Jupiter and Saturn Uranus
Neptune and Pluto and again we won't get into a
123

123

00:11:24.810  -->  00:11:28.010
debate about whether Pluto is a planet for
now so now that we've done that let's actually
124

124

00:11:28.010  -->  00:11:41.130
do a print out to see that's working so...
125

125

00:11:41.130  -->  00:12:04.160
...and will put planet in our list of planets....and will just run that to make sure that works and it gives us a list of planets, see planets I've just indented there
126

126

00:12:04.160  -->  00:12:11.930
so you can see them so that's working ok let's add
some code to display a list of moons lets say
127

127

00:12:11.930  -->  00:12:26.160
the ones for Jupiter so we can type...
128

128

00:12:26.160  -->  00:12:35.010
so we are grabbing the Planet jupiter and we are going to put...
129

129

00:12:35.010  -->  00:12:42.950
.....
130

130

00:12:42.950  -->  00:12:51.890
...returns list of moons for that particular
131

131

00:12:51.890  -->  00:13:09.730
object and will indent that as well...so if we run that now you can see we got the planet's working and also the
132

132

00:13:09.730  -->  00:13:15.170
moons of Jupiter showing Io Gamymede Callisto and Europa so the
133

133

00:13:15.170  -->  00:13:18.110
program's obviously quite simple at the
moment just creating the heavenly body
134

134

00:13:18.110  -->  00:13:22.370
objects and adding into the solar
system map and by creating the moons
135

135

00:13:22.370  -->  00:13:25.410
after of the planet we can also add them to
planets set of moons and the print out
136

136

00:13:25.410  -->  00:13:29.610
shows that we've done that now it's
interesting that set interface supported
137

137

00:13:29.610  -->  00:13:33.770
iteration you can see that there with our
code that we are actually dumping out so as
138

138

00:13:33.770  -->  00:13:36.680
a result displaying all the planets is quite
easy by either adding them which
139

139

00:13:36.680  -->  00:13:40.510
we've done and similarly we can display
the moons of a planet again as you saw on
140

140

00:13:40.510  -->  00:13:46.140
lines 84 and quite easy we can
change that we could put Jupiter to Mars there
141

141

00:13:46.140  -->  00:13:54.560
...change the reference and we should get a list
of moons of Mars and we get the two moons of Mars so obviously
142

142

00:13:54.560  -->  00:13:59.790
quite useful having that iteration ability
in sets as well so the planet set groups all the
143

143

00:13:59.790  -->  00:14:03.760
planets together but at the moment there is no
collection representing all the moons in
144

144

00:14:03.760  -->  00:14:07.620
the solar system now although that would have
been possible to have moon set in main
145

145

00:14:07.620  -->  00:14:12.140
and add the moons to it as they are created you
can actually easily generate the union
146

146

00:14:12.140  -->  00:14:18.070
of the set of each planets moons so on set theory
a union of two or more sets is a set
147

147

00:14:18.070  -->  00:14:22.360
containing all the elements of the sets
so because sets don't contain
148

148

00:14:22.360  -->  00:14:27.360
duplicates each element in a union will
only appear once even if it was present in
149

149

00:14:27.360  -->  00:14:31.370
more than one of the sets if that makes
sense so to generate a set union we can use the
150

150

00:14:31.370  -->  00:14:35.380
add all method of a set so that by looping through the
all the planets and calling there get
151

151

00:14:35.380  -->  00:14:38.660
satellites method we can generate a set
of moons even though we didn't actually
152

152

00:14:38.660  -->  00:14:44.020
create one when initializing the data that is
sort of a cool feature of sets so the way we go
153

153

00:14:44.020  -->  00:14:46.610
about that is after printing down here
on line
154

154

00:14:46.610  -->  00:14:57.790
88 we can type....so
155

155

00:14:57.790  -->  00:15:04.880
we are gonna create a new set here a new hash set....and go
through the list of planets....
156

156

00:15:04.880  -->  00:15:21.820
....and display all the moons
157

157

00:15:21.820  -->  00:15:38.970
at that point we can put a message there....the list of moons of our hash set on line 88
158

158

00:15:38.970  -->  00:15:42.730
..and we can just print it out...
159

159

00:15:42.730  -->  00:15:52.820
.....and if we run that code now you can see
we now got an all moon set effectively hash set
160

160

00:15:52.820  -->  00:15:58.060
which contains all our moons from all
planets so again we're using it we
161

161

00:15:58.060  -->  00:16:03.440
are creating a set union with that add all method as you saw their we added on line 90
162

162

00:16:03.440  -->  00:16:07.830
and again the reason that works is that
sets don't contain duplicates and each
163

163

00:16:07.830  -->  00:16:11.110
element in a union will only appear once even
if it was present in more than one of
164

164

00:16:11.110  -->  00:16:15.510
the sets and that's just the beauty of using sets now of
courses more named objects in the solar
165

165

00:16:15.510  -->  00:16:19.890
system than just planets and moons so the main
class could have included asteroid and
166

166

00:16:19.890  -->  00:16:23.890
comet sets that would be useful in the
same way as the plant set now a good case
167

167

00:16:23.890  -->  00:16:27.540
can be made for including a destination
field in heavenly body which will
168

168

00:16:27.540  -->  00:16:32.320
identify the body as a planet a moon
a comet etc the set will then be built up
169

169

00:16:32.320  -->  00:16:36.260
by iterating through the entire solar
system and checking the destination
170

170

00:16:36.260  -->  00:16:39.830
before adding each body to the
appropriate set so the code to assign the
171

171

00:16:39.830  -->  00:16:44.910
moons in their respective planets would have
got very complicated at that point and
172

172

00:16:44.910  -->  00:16:48.850
this lectures is about sets not astronomy
so I really tried to keep it
173

173

00:16:48.850  -->  00:16:53.260
simple here one thing that sometimes
confuses people with code like this is that it's
174

174

00:16:53.260  -->  00:16:57.080
only references to the objects that are
being stored in the sets so you Europa
175

175

00:16:57.080  -->  00:16:59.000
for example appears in the solar system map
176

176

00:16:59.000  -->  00:17:03.250
and the set of satellites for Jupiter
but there's really only one instance of
177

177

00:17:03.250  -->  00:17:08.920
the heavenly body class for Europa
so this confusion can lead to a common mistake
178

178

00:17:08.920  -->  00:17:13.440
when dealing with collections where in this
example in our example the sets would
179

179

00:17:13.440  -->  00:17:17.530
contain the names of the bodies rather
than references so code like that
180

180

00:17:17.530  -->  00:17:20.990
works but it's the reason behind that is
incorrect
181

181

00:17:20.990  -->  00:17:25.150
so with the heavenly body class contained
kilobytes information on each body the
182

182

00:17:25.150  -->  00:17:29.110
faulty reasoning is that it's more efficient
to just store the string name and the sets
183

183

00:17:29.110  -->  00:17:33.270
or whatever collection type your using for that
matter but a reference to a string is
184

184

00:17:33.270  -->  00:17:38.120
exactly the same size as a reference to
any other object so nothing is gained and
185

185

00:17:38.120  -->  00:17:41.830
the code becomes more complex because the
actual object has to be retrieved
186

186

00:17:41.830  -->  00:17:45.470
from the map before you can get any of its details so that's really an important consideration
187

187

00:17:45.470  -->  00:17:49.730
now if the ID of the object was an integer rather
than a string then it might be
188

188

00:17:49.730  -->  00:17:53.370
tempting to store that in the sets but
this is also a false
189

189

00:17:53.370  -->  00:17:58.130
optimization so on a 32 bit Java Virtual
Machine an object reference
190

190

00:17:58.130  -->  00:18:04.510
both take 4 bytes which of course we
know a byte is 8 bit so 4 bytes is 32 bits on
191

191

00:18:04.510  -->  00:18:08.960
a 64 bit machine the object reference
would only be 64 bits which of course is
192

192

00:18:08.960  -->  00:18:13.940
8 bytes but interestingly enough Java 7
uses compressed pointers that can even
193

193

00:18:13.940  -->  00:18:19.740
end up using less space than the 32 bit
int now there is actually a brief discussion which I just want to pop up for
194

194

00:18:19.740  -->  00:18:23.180
you and I put a link to this in the
Resources section in this video so that you can
195

195

00:18:23.180  -->  00:18:32.930
actually have a look at it so open up a browser and paste that in and you can
see the link and you can find out more
196

196

00:18:32.930  -->  00:18:38.500
about compressed pointers and how they default in
14 Java version 7 which is interesting
197

197

00:18:38.500  -->  00:18:42.510
having said all that there is one good reason
for using the body's name in the sets and that's
198

198

00:18:42.510  -->  00:18:45.280
got nothing to do with using memory more
efficiently
199

199

00:18:45.280  -->  00:18:50.040
now in previous sections we discussed
making classes immutable and that because
200

200

00:18:50.040  -->  00:18:53.540
earlier in this section the reason we're
doing that is so they can be used as the
201

201

00:18:53.540  -->  00:18:56.790
keys in a map and a set of course has a
same restrictions and warnings
202

202

00:18:56.790  -->  00:19:03.850
as map keys unfortunately though we are gonna go back to the code unfortunately our heavenly
203

203

00:19:03.850  -->  00:19:07.780
body code can't be made immutable because
new information is constantly being
204

204

00:19:07.780  -->  00:19:10.750
discovered about planets even in our
solar system
205

205

00:19:10.750  -->  00:19:14.970
some modeling a more distant solar
system will result in information about
206

206

00:19:14.970  -->  00:19:18.940
the body changing so we've allowed moons to
be added to planets which is what makes
207

207

00:19:18.940  -->  00:19:24.070
our heavenly bodies class mutable but that
necessary so to taking Saturn as an
208

208

00:19:24.070  -->  00:19:28.120
example currently over 60 millions have
been identified many of those have been
209

209

00:19:28.120  -->  00:19:31.690
discovered since 2000 so it's very
likely that more will have to be added
210

210

00:19:31.690  -->  00:19:32.610
in the future
211

211

00:19:32.610  -->  00:19:37.250
also there's quite a few haven't been named yet
and those will be added at some
212

212

00:19:37.250  -->  00:19:40.480
point so there's a good reason I stopped
adding moons when I got to Jupiter
213

213

00:19:40.480  -->  00:19:45.070
for that reason so Java doesn't
prohibit using immutable objects and sets
214

214

00:19:45.070  -->  00:19:48.550
and it's map keys but there is some
recommendations that should be followed
215

215

00:19:48.550  -->  00:19:50.850
and we'll look at those recommendations
in the next video
