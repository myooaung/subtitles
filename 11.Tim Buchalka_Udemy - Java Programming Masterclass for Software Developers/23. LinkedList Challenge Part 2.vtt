WEBVTT
1
1

00:00:05.570  -->  00:00:06.380
In the previous video,
2

2

00:00:06.380  -->  00:00:11.140
we actually implemented the song class as
well as the album class for our challenge.
3

3

00:00:11.140  -->  00:00:14.310
Now, time to continue on, and what we're
going to do now is we're going to just
4

4

00:00:14.310  -->  00:00:17.370
test the album class is
actually working correctly.
5

5

00:00:17.370  -->  00:00:20.910
So, to do that we're gonna go to our
main class and look for our main method.
6

6

00:00:20.910  -->  00:00:23.250
So, what we're going to do
now is create some albums.
7

7

00:00:23.250  -->  00:00:25.120
We're going to add some
songs to the albums.
8

8

00:00:25.120  -->  00:00:29.000
And then ultimately we're going
to actually creat a linked list.
9

9

00:00:29.000  -->  00:00:31.240
And add those albums to the linked list.
10

10

00:00:31.240  -->  00:00:32.750
So, let's make a start.
11

11

00:00:32.750  -->  00:00:38.310
So I'm going to type album,
album = new Album.
12

12

00:00:38.310  -->  00:00:43.790
String, and the name of the album is going
to be Stormbringer, and Stormbringer.
13

13

00:00:43.790  -->  00:00:45.550
Probably showing my age here.
14

14

00:00:45.550  -->  00:00:47.980
And the band name is Deep Purple.
15

15

00:00:47.980  -->  00:00:54.620
Okay, then, album.addSong and
16

16

00:00:54.620  -->  00:00:58.210
the parameters, you can see,
with addSong, is the title and duration.
17

17

00:00:58.210  -->  00:00:59.740
So, we're going to actually
going to add the song.
18

18

00:00:59.740  -->  00:01:06.270
So, we're going to do The first
one's Stormbringer 4.6 and
19

19

00:01:06.270  -->  00:01:11.930
add some extra songs there and
20

20

00:01:11.930  -->  00:01:14.650
add the tabs.
21

21

00:01:21.150  -->  00:01:22.750
Soldier of Fortune.
22

22

00:01:36.330  -->  00:01:37.150
Albums.
23

23

00:01:37.150  -->  00:01:40.180
And, we also need, up here,
a private variable called.
24

24

00:01:40.180  -->  00:01:41.070
Field, I should say.
25

25

00:01:41.070  -->  00:01:45.520
Called albums, which is going to be
an arrayList of our album objects.
26

26

00:01:45.520  -->  00:01:48.590
So, private Array list.
27

27

00:01:51.050  -->  00:01:52.040
It's going album.
28

28

00:01:52.040  -->  00:02:00.330
"albums=new array list of album,
objects, like so.
29

29

00:02:00.330  -->  00:02:01.910
It's up here, or down here.
30

30

00:02:01.910  -->  00:02:05.900
If so we can type albums .add, and
we can actually add each album.
31

31

00:02:05.900  -->  00:02:08.780
So I'm going to add two albums, so
I'm going to do this one first, add.
32

32

00:02:08.780  -->  00:02:09.890
Album.
33

33

00:02:09.890  -->  00:02:12.340
And that should have been static.
34

34

00:02:13.610  -->  00:02:15.870
Because we're actually the static method.
35

35

00:02:15.870  -->  00:02:18.820
Okay?
So, we'll actually create a second one.
36

36

00:02:18.820  -->  00:02:20.370
Album equals new album.
37

37

00:02:20.370  -->  00:02:26.660
For those about to rock,
one of my favorite bands.
38

38

00:02:28.900  -->  00:02:32.310
And that's Aussie band there, AC/DC.
39

39

00:02:32.310  -->  00:02:36.890
Let's add some songs, album.addSong.
40

40

00:02:40.670  -->  00:02:42.510
For those about to rock.
41

41

00:02:45.270  -->  00:02:48.270
Oops, semicolon there, and
let's just add a couple more.
42

42

00:02:51.630  -->  00:02:52.800
Okay that should be enough.
43

43

00:02:52.800  -->  00:02:55.240
And we'll just quickly fixes.
44

44

00:02:55.240  -->  00:02:56.720
Hit one, two, five.
45

45

00:03:01.540  -->  00:03:04.700
Course you could put whatever songs
you want to put in place of this.
46

46

00:03:14.580  -->  00:03:15.520
Okay, last one.
47

47

00:03:15.520  -->  00:03:17.950
And I just sped that up just
to make it a bit easier so
48

48

00:03:17.950  -->  00:03:19.420
you didn't have to see
me typing all of that.
49

49

00:03:20.520  -->  00:03:23.010
But you can actually use whatever songs
you want obviously in your challenge.
50

50

00:03:23.010  -->  00:03:24.560
But that's the ones
that I've come up with.
51

51

00:03:24.560  -->  00:03:25.600
All right, so we've got that.
52

52

00:03:25.600  -->  00:03:29.550
And of course we then need to also
add that to the album as well,
53

53

00:03:29.550  -->  00:03:31.500
to the albums ArrayList.
54

54

00:03:31.500  -->  00:03:37.450
So it's albums .addAlbum again, like so.
55

55

00:03:37.450  -->  00:03:40.030
And just a note there,
you might be wondering,
56

56

00:03:40.030  -->  00:03:41.750
well how come we're adding album twice.
57

57

00:03:41.750  -->  00:03:44.050
But we actually created
a new object at this point.
58

58

00:03:44.050  -->  00:03:46.950
So, by creating a brand new object,
that's going to be completely
59

59

00:03:46.950  -->  00:03:50.130
different to the previous album
object that we created above.
60

60

00:03:50.130  -->  00:03:50.720
So, that's now.
61

61

00:03:50.720  -->  00:03:54.830
We now have an array list with two
songs in it, By two different artists.
62

62

00:03:54.830  -->  00:03:57.630
And what we are doing now we
can songs to the play list.
63

63

00:03:57.630  -->  00:03:59.980
And if you recall the play list
is going to be a link list.
64

64

00:03:59.980  -->  00:04:03.130
And of course the albums
are stored in an array list.
65

65

00:04:03.130  -->  00:04:09.210
So, the link lists,
will be link list Song.
66

66

00:04:09.210  -->  00:04:15.120
Play list equals new
LinkedList of song like so.
67

67

00:04:15.120  -->  00:04:18.090
So, to actually add something
we can type albums.
68

68

00:04:19.840  -->  00:04:23.860
First way of doing it, albums.get,
69

69

00:04:23.860  -->  00:04:26.690
zero which is the first album we
actually added to the array list.
70

70

00:04:26.690  -->  00:04:29.320
So, that would be the Deep Purple album.
71

71

00:04:29.320  -->  00:04:31.200
.addToPlayList.
72

72

00:04:31.200  -->  00:04:32.860
Now, we're going to use
the second one first.
73

73

00:04:32.860  -->  00:04:35.150
The title And
we're going to put the name in.
74

74

00:04:35.150  -->  00:04:38.600
And this is where you need to get the name
exactly the same or it won't work, so.
75

75

00:04:38.600  -->  00:04:43.690
And we'll try You can't do it.
76

76

00:04:43.690  -->  00:04:44.260
Whoops.
77

77

00:04:47.660  -->  00:04:48.810
You can't do it right.
78

78

00:04:48.810  -->  00:04:53.480
And of course we pass our playList to it.
79

79

00:04:53.480  -->  00:04:57.940
And so if this name here,
that name there doesn't correspond exactly
80

80

00:04:57.940  -->  00:05:01.730
to the actual name that's actually in
the album, in this case this one here.
81

81

00:05:01.730  -->  00:05:03.020
Then it's actually gonna get an error.
82

82

00:05:03.020  -->  00:05:03.770
It's going to get an error and
83

83

00:05:03.770  -->  00:05:05.730
it's not gonna find it cuz
it has to actually match.
84

84

00:05:05.730  -->  00:05:09.040
So, it has to, firstly it has to match but
secondly it has to be a song.
85

85

00:05:09.040  -->  00:05:12.400
That was added to that album, so
in other words, if you put let's go here,
86

86

00:05:12.400  -->  00:05:16.400
and you're trying to reference
element zero, which is the album for
87

87

00:05:16.400  -->  00:05:18.370
Deep Purple, you'll actually get an error.
88

88

00:05:18.370  -->  00:05:19.150
So, that's the first one.
89

89

00:05:19.150  -->  00:05:23.490
Let's just add a couple more, so
we'll just do a copy and paste here.
90

90

00:05:23.490  -->  00:05:24.620
Two more.
91

91

00:05:24.620  -->  00:05:27.140
So, next one we can do is Holy Man.
92

92

00:05:28.570  -->  00:05:34.290
Type incorrect there, and the next one is
create or type in one that doesn't exist.
93

93

00:05:34.290  -->  00:05:35.610
The one that's not in that first album.
94

94

00:05:35.610  -->  00:05:38.380
So, if I type in say, Speed king.
95

95

00:05:40.500  -->  00:05:43.800
Does not exist, just to remember or
to remind us that, that's the case.
96

96

00:05:43.800  -->  00:05:45.070
So, that should work.
97

97

00:05:45.070  -->  00:05:46.530
So, that's one way of doing it.
98

98

00:05:46.530  -->  00:05:49.290
So, the second way would
be to type albums.
99

99

00:05:49.290  -->  00:05:53.120
And remember we overloaded
the addToPlayList method.
100

100

00:05:53.120  -->  00:05:58.810
So, we can type albums.get(0), so
again it's the Deep Purple album,
101

101

00:05:58.810  -->  00:06:02.230
.addToPlayList this time
we use the trackNumber, so
102

102

00:06:02.230  -->  00:06:05.580
trackNumber Our nine,
which should be Soldier of fortune.
103

103

00:06:05.580  -->  00:06:08.820
So, it's one, two, three, four,
five, six, seven, eight, nine.
104

104

00:06:08.820  -->  00:06:10.230
Should be the last one there.
105

105

00:06:10.230  -->  00:06:11.760
There, that's track nine.
106

106

00:06:11.760  -->  00:06:15.270
So, if we just type now nine cuz
that was the second overload method.
107

107

00:06:15.270  -->  00:06:17.090
And I'll just do that again so
you can see it.
108

108

00:06:17.090  -->  00:06:19.700
Using this one here,
which is the first one.
109

109

00:06:19.700  -->  00:06:23.490
So track 9, and it'll still be linked, a
playList actually that's actually sent to.
110

110

00:06:23.490  -->  00:06:26.080
So, that's just another way of doing it.
111

111

00:06:26.080  -->  00:06:29.430
So, doing the same now to add
some songs from another album,
112

112

00:06:29.430  -->  00:06:30.300
let's add a couple more.
113

113

00:06:30.300  -->  00:06:33.870
We'll add another four, but
we'll actually use the other album,
114

114

00:06:33.870  -->  00:06:35.890
so album one which was the AC/DC album.
115

115

00:06:39.390  -->  00:06:43.340
So, let's go back there now and
first one we'll do is song eight.
116

116

00:06:43.340  -->  00:06:48.980
Which does exist, song three which
does exist, song two which does exist,
117

117

00:06:48.980  -->  00:06:50.680
and song six.
118

118

00:06:50.680  -->  00:06:54.660
Actually what we'll do for the last one is
to higher number we know doesn't exist.
119

119

00:06:54.660  -->  00:06:56.020
So, that obviously doesn't exist.
120

120

00:06:56.020  -->  00:07:01.200
There's not 24 tracks in the AC/DC album,
so that should fire all of a sudden.
121

121

00:07:01.200  -->  00:07:05.150
There is no track 24, like so.
122

122

00:07:05.150  -->  00:07:08.820
At this point we can actually
now try actually playing this.
123

123

00:07:10.250  -->  00:07:13.000
Play playlist.
124

124

00:07:13.000  -->  00:07:17.740
So, but of course, we haven't actually
written the playlist method yet, so
125

125

00:07:17.740  -->  00:07:19.350
we need to actually quickly write that, so
126

126

00:07:19.350  -->  00:07:21.250
what I'm going to do is just write
a really quick version of that,
127

127

00:07:21.250  -->  00:07:23.480
and then we'll actually
enhance it in the next video.
128

128

00:07:23.480  -->  00:07:25.570
So, I'm just going to make
a bit more space here.
129

129

00:07:29.940  -->  00:07:31.950
Okay, so, first one's gonna be private.
130

130

00:07:33.320  -->  00:07:36.350
static void play.
131

131

00:07:36.350  -->  00:07:40.590
And the parameter I'm gonna be passing is
a LinkedList, LinkedList of Song objects,
132

132

00:07:40.590  -->  00:07:41.980
which of course is our playList.
133

133

00:07:44.410  -->  00:07:46.000
So, we're gonna start off
with something basic.
134

134

00:07:46.000  -->  00:07:50.800
ListIterator, which will be Song.
135

135

00:07:51.810  -->  00:07:56.930
listIterator cuz that's that top of
object = playList .listIterator.
136

136

00:07:56.930  -->  00:08:00.930
And, we'll put if listIterator.size.
137

137

00:08:00.930  -->  00:08:03.490
Actually, not listIterator, sorry.
138

138

00:08:03.490  -->  00:08:08.060
playList.size, but that's equal to 0.
139

139

00:08:08.060  -->  00:08:10.370
We're going to return a message.
140

140

00:08:11.500  -->  00:08:12.790
No songs in playlist.
141

141

00:08:14.820  -->  00:08:20.260
Return, else, what we're going to do is,
we're gonna start on parameters for
142

142

00:08:20.260  -->  00:08:26.400
the first one,
we'll put now playing, ListIterator.
143

143

00:08:27.430  -->  00:08:29.630
Next dot two string.
144

144

00:08:29.630  -->  00:08:31.980
Now, this is the important part here,
the two string.
145

145

00:08:31.980  -->  00:08:34.980
If you remember in the example for
all linked lists,
146

146

00:08:34.980  -->  00:08:37.590
that before the challenge,
we were actually dealing with strings.
147

147

00:08:37.590  -->  00:08:41.070
It was easy using dot next,
because we new it was actually a type.
148

148

00:08:41.070  -->  00:08:43.770
Of string so
automatically worked some dot out.
149

149

00:08:43.770  -->  00:08:47.840
But in this case we're using .net of
course we're using a song object.
150

150

00:08:47.840  -->  00:08:50.730
So, what we've implemented is this two
string method of which I've talked about
151

151

00:08:50.730  -->  00:08:52.480
in the previous video, two string.
152

152

00:08:52.480  -->  00:08:55.350
If you go back and actually have
a look at the actual song object
153

153

00:08:55.350  -->  00:08:58.580
Remember that the two string,
its function is just to print out for
154

154

00:08:58.580  -->  00:09:02.730
a particular object, the title, the colon,
the space, and then the duration.
155

155

00:09:02.730  -->  00:09:04.800
So, that's why we've
implemented two string.
156

156

00:09:04.800  -->  00:09:08.960
When I run it I'll show you what output
looks like without two string and
157

157

00:09:08.960  -->  00:09:10.440
with two string as well.
158

158

00:09:10.440  -->  00:09:13.210
Okay, so going back to the playlist,
what we'll do for
159

159

00:09:13.210  -->  00:09:15.300
now is we'll just literally
just play the first one.
160

160

00:09:15.300  -->  00:09:18.970
We're just going to play that first song
just to confirm it actually is working and
161

161

00:09:18.970  -->  00:09:21.120
we haven't actually got an error
message so we'll do that.
162

162

00:09:21.120  -->  00:09:24.100
We'll actually go back to main and
we'll actually just run that.
163

163

00:09:30.180  -->  00:09:34.050
I mean, I could get some message,
the song speaking is not in the album.
164

164

00:09:34.050  -->  00:09:35.020
Which is correct.
165

165

00:09:35.020  -->  00:09:37.690
Because remember that up here,
the song doesn't exist.
166

166

00:09:37.690  -->  00:09:41.840
We actually purposely typed in a song
that didn't exist in the album.
167

167

00:09:41.840  -->  00:09:43.410
And I'll just put that on the screen so
you can see it.
168

168

00:09:43.410  -->  00:09:44.330
So, that's good.
169

169

00:09:44.330  -->  00:09:46.200
This album does not have a track 24.
170

170

00:09:46.200  -->  00:09:48.470
Remember we used a number that
we knew there wouldn't be.
171

171

00:09:48.470  -->  00:09:50.190
Track four from the second album.
172

172

00:09:50.190  -->  00:09:51.850
Now playing You Can't Do it Right.
173

173

00:09:51.850  -->  00:09:54.650
And that was the first entry
that we actually added.
174

174

00:09:54.650  -->  00:09:57.070
So, that's actually working
correctly which is great.
175

175

00:09:57.070  -->  00:10:01.060
And notice that this is the actual
two string message there.
176

176

00:10:01.060  -->  00:10:03.830
The name of the song, a colon and
then the actual duration, so
177

177

00:10:03.830  -->  00:10:04.600
that's working as well.
178

178

00:10:04.600  -->  00:10:05.810
That's using the song object.
179

179

00:10:05.810  -->  00:10:08.090
And just to show you what happens
if I actually comment that out.
180

180

00:10:09.090  -->  00:10:09.590
Sorry.
181

181

00:10:11.680  -->  00:10:14.110
Should get rid of the override as
well to get rid of that message.
182

182

00:10:14.110  -->  00:10:16.350
And we get back to mine again and
rerun this.
183

183

00:10:16.350  -->  00:10:19.060
You'll actually see that
the code will still work.
184

184

00:10:19.060  -->  00:10:23.710
But we now get now playing conduct
timber tracker.song@ 3d1 blah blah blah.
185

185

00:10:23.710  -->  00:10:26.500
That number will probably vary if
you are running in on your computer.
186

186

00:10:26.500  -->  00:10:30.630
And that is because if you go
back to our code again For Song,
187

187

00:10:30.630  -->  00:10:34.770
we overrode a function if you recall,
toString was actually part of the Object
188

188

00:10:34.770  -->  00:10:39.740
that is a class that is extended by
all other Objects you create in Java.
189

189

00:10:39.740  -->  00:10:43.640
So, this is the default
implementation of the toString method.
190

190

00:10:43.640  -->  00:10:46.830
That's what Java does, gives you the name
of the package the name of the class.
191

191

00:10:46.830  -->  00:10:51.420
And a number which is meant to represent
the memory location of where that
192

192

00:10:51.420  -->  00:10:52.870
particular object is in memory.
193

193

00:10:52.870  -->  00:10:56.810
But what we've done, of course,
is we've overridden that functionality, so
194

194

00:10:56.810  -->  00:10:58.580
it's actually printing
out something useful, so
195

195

00:10:58.580  -->  00:11:01.380
that's what toString is used for, and
we could just run that again and see.
196

196

00:11:02.490  -->  00:11:03.040
That looks like.
197

197

00:11:04.250  -->  00:11:06.520
And we actually get the proper
representation showing.
198

198

00:11:06.520  -->  00:11:09.830
So, what we need to do now
is actually continue on and
199

199

00:11:09.830  -->  00:11:11.310
actually extend this player method.
200

200

00:11:11.310  -->  00:11:13.260
Cuz obviously that is
showing the first song.
201

201

00:11:13.260  -->  00:11:15.620
But we would like to have
a mechanism to add here so
202

202

00:11:15.620  -->  00:11:18.500
that we can actually top in and
go forward in our playlist.
203

203

00:11:18.500  -->  00:11:19.530
Go back in our playlist.
204

204

00:11:19.530  -->  00:11:22.330
And actually have access to the other
songs that actually are part of that
205

205

00:11:22.330  -->  00:11:23.290
playlist.
206

206

00:11:23.290  -->  00:11:24.350
So, let's go ahead and do that now.
207

207

00:11:24.350  -->  00:11:27.120
Let's actually extend out this
play function, play method.
208

208

00:11:27.120  -->  00:11:28.100
So, we've actually got that.
209

209

00:11:28.100  -->  00:11:29.170
So, we need to add a scanner.
210

210

00:11:30.400  -->  00:11:32.170
Because we're going to need that for
input.
211

211

00:11:32.170  -->  00:11:34.570
Scanner, equals new scanner.
212

212

00:11:36.610  -->  00:11:37.770
System done, of course.
213

213

00:11:39.340  -->  00:11:42.440
And we want a couple other variables,
quit, which we saw in the previous video,
214

214

00:11:42.440  -->  00:11:44.370
quit equals false.
215

215

00:11:44.370  -->  00:11:48.100
And, we want to maintain or
find out which direction we're going in.
216

216

00:11:48.100  -->  00:11:51.200
Maintain the actual variable to tell
us which direction we're never getting,
217

217

00:11:51.200  -->  00:11:52.110
forward or back.
218

218

00:11:52.110  -->  00:11:53.650
For reasons explained
in the previous video.
219

219

00:11:53.650  -->  00:11:56.170
So, I'm going to set that forward
initially to true because normally,
220

220

00:11:56.170  -->  00:11:58.950
when you start a playlist,
you have to go forward.
221

221

00:11:58.950  -->  00:12:01.680
Because you're at the first element,
you can't physically go backwards.
222

222

00:12:01.680  -->  00:12:03.240
And I'll just accept that import.
223

223

00:12:03.240  -->  00:12:05.810
Java to the scanner okay
we've got a Sonia Derader.
224

224

00:12:05.810  -->  00:12:10.710
So, what we're going to do now is down
here is add some more code while not quit
225

225

00:12:10.710  -->  00:12:15.540
because of course with the playlist you
can continue until you actually exit
226

226

00:12:15.540  -->  00:12:19.860
out and we're going to put into
action equals scanner dot next hit.
227

227

00:12:22.620  -->  00:12:26.540
Then we're going to do scanner.nextLine.
228

228

00:12:26.540  -->  00:12:28.450
Again, clear.
229

229

00:12:28.450  -->  00:12:30.220
Now, the actions we actually want this,
230

230

00:12:30.220  -->  00:12:33.110
we're going to start with
something pretty simple.
231

231

00:12:33.110  -->  00:12:36.140
We're actually going to start off
with obviously the ability to
232

232

00:12:36.140  -->  00:12:36.990
exit out of the loop.
233

233

00:12:36.990  -->  00:12:40.100
And we're gonna add some other cases and
continue to add that as we go through.
234

234

00:12:40.100  -->  00:12:47.070
So, I'm going to start with switch on
action, case zero will be our quit.
235

235

00:12:47.070  -->  00:12:53.740
So, we're just going to type
system out playlist complete.
236

236

00:12:53.740  -->  00:13:00.810
And, quit = true and break.
237

237

00:13:00.810  -->  00:13:07.160
And, we also want a case 1.
238

238

00:13:07.160  -->  00:13:13.600
1 break case 2 break case 3 break case 4.
239

239

00:13:13.600  -->  00:13:17.210
We're going to do print the lists.
240

240

00:13:17.210  -->  00:13:18.670
Playlist.
241

241

00:13:18.670  -->  00:13:20.570
And break, and I'll explain that shortly.
242

242

00:13:20.570  -->  00:13:23.540
And case 5, we're going to print the menu.
243

243

00:13:23.540  -->  00:13:26.500
And we're also going to
add a break after that.
244

244

00:13:26.500  -->  00:13:27.460
And I'll put that on the next line.
245

245

00:13:27.460  -->  00:13:28.990
Doesn't really matter,
that would still work.
246

246

00:13:28.990  -->  00:13:31.870
It's still valid, that looks nice,
we're being consistent there.
247

247

00:13:31.870  -->  00:13:32.870
Likewise for this one.
248

248

00:13:32.870  -->  00:13:35.560
So, that's our basic menu at this point.
249

249

00:13:35.560  -->  00:13:37.420
So, the actual options
we're going to be adding.
250

250

00:13:37.420  -->  00:13:41.150
So, we've got the first one which
is the being able to actually exit.
251

251

00:13:41.150  -->  00:13:44.860
The next option, option one,
we're gonna, is going to be a forward.
252

252

00:13:44.860  -->  00:13:46.080
So, we're actually gonna go forward.
253

253

00:13:46.080  -->  00:13:47.680
So, we're going to do that.
254

254

00:13:47.680  -->  00:13:52.760
If not forward, you remember this
code from the previous video.
255

255

00:13:52.760  -->  00:13:58.470
If listIterator.hasnext,
listIterator.forward,
256

256

00:13:58.470  -->  00:14:02.190
sorry .next, I should say, not .forward.
257

257

00:14:02.190  -->  00:14:04.660
And then forward Equals true.
258

258

00:14:04.660  -->  00:14:09.230
So we're checking to see with we're not
going forward we need to actually change
259

259

00:14:09.230  -->  00:14:12.780
directions to set it to going forward so
that the next line actually works.
260

260

00:14:12.780  -->  00:14:18.200
And of course the next line is if this
iterator, if this iterator dot has next.
261

261

00:14:20.980  -->  00:14:24.530
I'm actually gonna go to now playing.
262

262

00:14:24.530  -->  00:14:25.240
+
263

263

00:14:25.240  -->  00:14:35.080
ListIterator.next.toString
264

264

00:14:35.080  -->  00:14:41.500
else we have reached
the end of the playlist.
265

265

00:14:44.190  -->  00:14:48.500
And we set forward to false, cuz we
cannot literally go forward anymore.
266

266

00:14:48.500  -->  00:14:51.170
So, that's the first one, and what we'll
do quickly before we end this video,
267

267

00:14:51.170  -->  00:14:55.590
we'll do the second case, which is going
backwards, going back in the previous
268

268

00:14:55.590  -->  00:14:59.520
direction, or going to the previous
entries, if there are any in the playlist.
269

269

00:14:59.520  -->  00:15:01.180
So, of course,
the code we need to do there is to say,
270

270

00:15:01.180  -->  00:15:02.630
if we're currently going forward.
271

271

00:15:02.630  -->  00:15:09.010
if (forward),
if(listIterator.hasPrevious())
272

272

00:15:09.010  -->  00:15:13.870
then we need to change that direction, so
it goes to the previous entry, previous.
273

273

00:15:13.870  -->  00:15:16.170
Again this was all explained in
detail in the previous video so
274

274

00:15:16.170  -->  00:15:17.480
I won't do it again now.
275

275

00:15:17.480  -->  00:15:19.960
Then we set forward to false.
276

276

00:15:19.960  -->  00:15:25.720
And then we just add our test,
if(listIterator .hasPrevious.
277

277

00:15:28.060  -->  00:15:29.590
But, you can go back, in other words.
278

278

00:15:29.590  -->  00:15:37.280
We're going to put Now playing
listIterator.previous.toString.
279

279

00:15:37.280  -->  00:15:41.540
And of course, the else will
be if we've reached the start.
280

280

00:15:43.650  -->  00:15:47.090
We are at the start of the playlist.
281

281

00:15:48.850  -->  00:15:50.830
And of course, we're just gonna
hit forward to true at that point.
282

282

00:15:52.640  -->  00:15:56.330
So let's, now that we've done that,
let's actually run this code and
283

283

00:15:56.330  -->  00:15:59.140
I'll comment these out briefly and
we'll do those in the next video.
284

284

00:15:59.140  -->  00:16:00.820
So, that it will actually compile.
285

285

00:16:00.820  -->  00:16:05.530
So, we'll run this just to make sure that
forward and previous, or next and previous
286

286

00:16:05.530  -->  00:16:08.480
in other words, going forward into the
list or going backwards actually works.
287

287

00:16:08.480  -->  00:16:11.330
Now, what I haven't done at this stage
is I haven't actually got it showing
288

288

00:16:11.330  -->  00:16:13.360
the menus, so
it's not showing any options.
289

289

00:16:13.360  -->  00:16:16.440
So, we can actually type these,
we know that zero will exit so
290

290

00:16:16.440  -->  00:16:17.420
we'll test if that works.
291

291

00:16:17.420  -->  00:16:19.700
Zero actually Exits, that's good.
292

292

00:16:19.700  -->  00:16:24.480
So, if we run this again, and this time if
we type 1, it should go to the next one.
293

293

00:16:24.480  -->  00:16:26.900
And we'll just go up here and have a look,
the next one was Holy Man, so
294

294

00:16:26.900  -->  00:16:27.730
that's correct.
295

295

00:16:27.730  -->  00:16:32.310
Then the next one, now playing Soldier
of Fortune, and Soldier of Fortune,
296

296

00:16:32.310  -->  00:16:36.100
we can check that that's actually
working by looking at that third entry.
297

297

00:16:36.100  -->  00:16:37.230
Speaking was an invalid.
298

298

00:16:37.230  -->  00:16:39.680
So, of course, that hasn't been added,
which is correct.
299

299

00:16:39.680  -->  00:16:42.860
And track nine was Soldier of Fortune,
from this album.
300

300

00:16:42.860  -->  00:16:45.810
And you can see that that's working,
so we'll do another one.
301

301

00:16:45.810  -->  00:16:47.350
Now playing Breaking the Rules.
302

302

00:16:47.350  -->  00:16:51.110
Breaking the Rules was Track eight for
this one and
303

303

00:16:51.110  -->  00:16:53.740
you can see that's breaking the rules
which is track eight which is correct.
304

304

00:16:53.740  -->  00:16:57.370
And just quickly going backwards we should
be able to go back to Soldier of Fortune,
305

305

00:16:57.370  -->  00:17:01.490
go back to Holy Man, and go back one
more time To You Can't Do It Right.
306

306

00:17:01.490  -->  00:17:03.270
And now plying, you can't do it right.
307

307

00:17:03.270  -->  00:17:04.990
And press two again,
we should get an error.
308

308

00:17:04.990  -->  00:17:07.150
We're at the start of the list,
so we can't do any more.
309

309

00:17:07.150  -->  00:17:09.630
So, that's good,
we have a lot of our code working.
310

310

00:17:09.630  -->  00:17:11.120
So, I'm going to stop the video here.
311

311

00:17:11.120  -->  00:17:12.970
In the next video, we'll continue on.
312

312

00:17:12.970  -->  00:17:16.750
And hopefully we'll get
close to finish this code.
313

313

00:17:16.750  -->  00:17:19.000
I think that we're just about done,
so we'll do that in the next video.
