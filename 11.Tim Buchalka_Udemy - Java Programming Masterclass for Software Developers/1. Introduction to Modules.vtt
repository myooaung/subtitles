WEBVTT
1
1

00:00:05.070  -->  00:00:09.750
So let's talk about a brand new feature in Java nine modules.
2

2

00:00:10.590  -->  00:00:16.140
So one of the most important and exciting features of JDK 9 is the module system that was developed
3

3

00:00:16.140  -->  00:00:23.370
under a project called time of jigsaw. So now Java 9 introduced a new program component known as a module.
4

4

00:00:23.610  -->  00:00:27.730
So think of a job application as a collection of modules.
5

5

00:00:27.920  -->  00:00:33.910
There's a module system was designed to have a reliable configuration, strong encapsulation and a
6

6

00:00:33.990  -->  00:00:36.070
modular JDK/JRE.
7

7

00:00:36.420  -->  00:00:42.120
So the purpose is to solve the problems typically involved with developing and deploying Java applications
8

8

00:00:42.320  -->  00:00:43.720
prior to Java 9.
9

9

00:00:44.160  -->  00:00:50.250
Now these modularity features in Java are collectively known as the Java platform module system
10

10

00:00:50.250  -->  00:00:52.660
or JPMS.
11

11

00:00:52.780  -->  00:00:57.940
So what is a module? So much it was a named collection of data and code.
12

12

00:00:57.950  -->  00:01:04.680
Now much does it contain Java code that's organized as a set of packages which package tank classes
13

13

00:01:04.690  -->  00:01:06.430
interfaces and so on.
14

14

00:01:06.430  -->  00:01:11.380
So I think ultimately of a module as a container of packages.
15

15

00:01:11.410  -->  00:01:18.310
Each module needs to have some configuration, name unique name of the module, inputs, what the module
16

16

00:01:18.310  -->  00:01:24.270
needs to use and what is required for the module to be compiled or run as well as outputs.
17

17

00:01:24.280  -->  00:01:27.800
So what the module output exports to other modules.
18

18

00:01:28.210  -->  00:01:32.620
So doing it this way you don't have to specify every package that your module needs.
19

19

00:01:32.640  -->  00:01:39.610
I know the name of a module you depend on, so that we create our own first modeling code.
20

20

00:01:41.270  -->  00:01:47.230
So Java 9 platform is divided into a set of modules that are known as platform modules.
21

21

00:01:47.310  -->  00:01:53.120
So this provides scalable Java Runtime the standard modules have names prefix with Java for example
22

22

00:01:53.130  -->  00:01:56.390
Java dot base, Java dot sql as well and so on.
23

23

00:01:56.600  -->  00:02:01.980
And its an example of this course Java FX to create graphical user interfaces.
24

24

00:02:02.000  -->  00:02:06.010
Now the Jever effects module names are prefixed with Java FX.
25

25

00:02:06.350  -->  00:02:13.000
Let's see a diagram on the next slide that illustrates the input and output definitions of a module.
26

26

00:02:13.210  -->  00:02:18.580
So I could see the slide here and get inputs and outputs from a module.
27

27

00:02:18.660  -->  00:02:25.300
So the much less self definition that we the inputs for the modules as well as the exports which are
28

28

00:02:25.300  -->  00:02:32.410
packages and then we came down to the module code or internal packages as well as export packages.
29

29

00:02:32.710  -->  00:02:37.410
So each module comes with a module script to follow and we'll talk more about the module descriptor
30

30

00:02:37.540  -->  00:02:38.840
for this video.
31

31

00:02:39.070  -->  00:02:46.030
And as I mentioned we have internal packages and also external packages and also export packages which
32

32

00:02:46.030  -->  00:02:51.220
can obviously be exported that enables other modules to use export packages.
33

33

00:02:52.370  -->  00:02:57.950
Alright so every module comes with a module to script to fall that describes the module and contains
34

34

00:02:57.950  -->  00:03:00.300
meditator about the module.
35

35

00:03:00.300  -->  00:03:06.200
Now that module script to follow is always located directly at the module root folder and always has
36

36

00:03:06.200  -->  00:03:08.500
the name module-info.java.
37

37

00:03:08.650  -->  00:03:12.740
So let's say a minimalistic module descriptor example.
38

38

00:03:13.130  -->  00:03:18.620
Take a seat on the screen there there's a new keyword introduced module and that's followed by the module
39

39

00:03:18.620  -->  00:03:23.810
name and curly braces and in this example you can say that I've used academy dot learn programming
40

40

00:03:23.820  -->  00:03:30.680
dot common as the module name, inside curly braces, as you can optionally add meta data about modules.
41

41

00:03:30.800  -->  00:03:32.420
In other words inputs and outputs.
42

42

00:03:32.510  -->  00:03:39.800
But I'll talk more about that later in this section, so module declaration introduces a module name that
43

43

00:03:39.800  -->  00:03:46.450
can be used in other multiple declarations to express relationships between modules. So module name,
44

44

00:03:46.660  -->  00:03:53.210
java identifiers separated by a period or dot tokens no different to how you declare a package
45

45

00:03:53.890  -->  00:03:58.020
and two kind of modules normal modules and open modules.
46

46

00:03:58.060  -->  00:04:03.970
Now the normal module determines access to the modules types and the members of those types for
47

47

00:04:03.980  -->  00:04:06.800
code outside the module.
48

48

00:04:06.870  -->  00:04:12.930
So a normal module without the up and modifier grunt's access at compile time and runtime to tops in
49

49

00:04:12.990  -->  00:04:17.180
only those packages which are explicitly exported.
50

50

00:04:17.310  -->  00:04:23.910
Now an open module with the open modifier runs success at compile time tops and only those packages
51

51

00:04:23.910  -->  00:04:25.620
which are explicitly exported.
52

52

00:04:25.650  -->  00:04:33.020
However it also grants access at runtime on tops in all its packages as if all packages had been exported.
53

53

00:04:33.330  -->  00:04:39.670
So let's see a perfect structure with and without modules you can sit in the left hand side got a project
54

54

00:04:39.670  -->  00:04:46.620
structure as it looked for a java 9 and on the right hand side you've got a project structure with java 9.
55

55

00:04:46.990  -->  00:04:54.040
Now before java 9 we had a source directory with packages that contained java files but with java 9 is
56

56

00:04:54.040  -->  00:04:59.710
another directory, module root directory which will contain module info dot java which we talked about
57

57

00:04:59.830  -->  00:05:01.730
as well as package directories.
58

58

00:05:02.050  -->  00:05:07.170
Now with Java on much of the programming we don't have to build applications as one big Java project.
59

59

00:05:07.270  -->  00:05:12.110
We can create much of the units that work together to form an application.
60

60

00:05:12.160  -->  00:05:18.550
Some modules are ideally components that are reusable that solves specific requirements for that app
61

61

00:05:18.760  -->  00:05:21.460
so I can think of much higher level packages.
62

62

00:05:21.460  -->  00:05:24.770
Keep in mind that there are actually not packages.
63

63

00:05:25.070  -->  00:05:27.170
So in summary project,
64

64

00:05:27.200  -->  00:05:32.720
so I had the following primary goals, to create a scalable platform and that's to give the ability
65

65

00:05:32.720  -->  00:05:36.320
to scale the platform down to smaller computing devices.
66

66

00:05:36.330  -->  00:05:39.400
And I achieved that by moving from a monolithic runtime.
67

67

00:05:39.500  -->  00:05:45.110
The second goal was security and maintainability it to make it more maintainable pet from code base
68

68

00:05:45.110  -->  00:05:50.270
that had better organization and also has its internal API hidden so that we've got better much better
69

69

00:05:50.330  -->  00:05:53.830
interfaces to improve platform security.
70

70

00:05:53.840  -->  00:06:00.290
Third goal was improved application performance so a platform that smaller with only the necessary run
71

71

00:06:00.290  -->  00:06:06.450
times which then results in faster performance and number for easier development experience.
72

72

00:06:06.770  -->  00:06:10.510
So it's a result of the module system and the much of the platform combination.
73

73

00:06:10.510  -->  00:06:15.090
It's made it easy for developers to create applications and libraries.
74

74

00:06:15.300  -->  00:06:16.910
So let's move on to the next video.
75

75

00:06:17.200  -->  00:06:19.600
We've got to look at the much declaration and statements.
76

76

00:06:19.670  -->  00:06:20.760
So see you in the next video.
