0
1
00:00:05,500 --> 00:00:08,120
Okay, so in the previous couple of videos,
1

2
00:00:08,120 --> 00:00:11,630
we learned what Packages were and
how to actually use them.
2

3
00:00:11,630 --> 00:00:14,050
It's now time to actually
have a look at Scope and
3

4
00:00:14,050 --> 00:00:17,160
that looks like granting
a restricting access to our objects.
4

5
00:00:17,160 --> 00:00:20,360
So the thing is with Scope it's probably
one of the easiest things about
5

6
00:00:20,360 --> 00:00:23,850
programming, once you understand it,
but it's actually also one of
6

7
00:00:23,850 --> 00:00:27,690
the most confusing Until you
do actually understand it.
7

8
00:00:27,690 --> 00:00:32,930
So scope here actually refers to
the visibility of a class, member,
8

9
00:00:32,930 --> 00:00:33,800
or variable.
9

10
00:00:33,800 --> 00:00:37,520
So to consider that in non-computing
terms, let's imagine you're going to buy
10

11
00:00:37,520 --> 00:00:40,290
a particular computer, and
you find a local store and
11

12
00:00:40,290 --> 00:00:43,760
let's just say it's got the computer for
20% off, 20% discount.
12

13
00:00:43,760 --> 00:00:48,000
Now, the same computer in another store
would still be at the full price, though.
13

14
00:00:48,000 --> 00:00:52,750
So the scope, in other words, or the price
reduction is just that one local store.
14

15
00:00:52,750 --> 00:00:56,480
But, contrast that to a situation
where you've got a large company, and
15

16
00:00:56,480 --> 00:00:59,220
let's use Wal Mart as an example.
16

17
00:00:59,220 --> 00:01:01,310
Huge company in the United States,
17

18
00:01:01,310 --> 00:01:05,780
and say if they decided to
discount a particular computer, so
18

19
00:01:05,780 --> 00:01:10,440
the discount then would actually apply
in about 4,500 stores across America.
19

20
00:01:10,440 --> 00:01:16,090
So in that context the scope of
the discount is therefore much much wider.
20

21
00:01:16,090 --> 00:01:19,120
And that actually asks what made
us a multi national company.
21

22
00:01:19,120 --> 00:01:23,740
If they applied the discount world wide,
the scope would be over 11,000 stores.
22

23
00:01:23,740 --> 00:01:26,970
So the important thing here is that
Walmart's discount does not apply to any
23

24
00:01:26,970 --> 00:01:28,150
other stores.
24

25
00:01:28,150 --> 00:01:31,830
So the scope is limited to the stores
controlled only by Walmart.
25

26
00:01:31,830 --> 00:01:35,480
And the same with the local example,
the local store that had the 20% off.
26

27
00:01:35,480 --> 00:01:38,440
The scope there is just for
that one local store.
27

28
00:01:38,440 --> 00:01:42,650
So the same computer and in a Java
context would be the same variable.
28

29
00:01:42,650 --> 00:01:44,230
In other stores, it's not discounted.
29

30
00:01:44,230 --> 00:01:45,750
I hope that makes sense.
30

31
00:01:45,750 --> 00:01:49,850
Our Java objects have got
scope in much the same way.
31

32
00:01:49,850 --> 00:01:53,120
So what we're going to do now is code
up an example To discuss the scope.
32

33
00:01:53,120 --> 00:01:55,960
I'll show you the scope of
various objects to help you
33

34
00:01:55,960 --> 00:01:58,090
sort of understand scope
a little bit better.
34

35
00:01:58,090 --> 00:02:01,970
So we're going to start off
by creating a new class and
35

36
00:02:01,970 --> 00:02:05,010
we're just going to call that ScopeCheck.
36

37
00:02:05,010 --> 00:02:09,200
So I'm just going to click on a new class,
ScopeCheck is the name of it.
37

38
00:02:10,900 --> 00:02:15,190
And what your going to do is create
a few variables for this one.
38

39
00:02:15,190 --> 00:02:21,540
Remember variable public, int,
of course when public equals zero.
39

40
00:02:21,540 --> 00:02:27,270
Probably also have a private
privateVar equals one.
40

41
00:02:27,270 --> 00:02:29,790
We'll add a constructor.
41

42
00:02:31,830 --> 00:02:34,220
This constructor won't
have any parameters.
42

43
00:02:34,220 --> 00:02:35,000
But what we'll do is,
43

44
00:02:35,000 --> 00:02:39,610
we'll actually just print out a message
to say that, scope check created.
44

45
00:02:41,860 --> 00:02:45,400
And just show the variable values.
45

46
00:02:45,400 --> 00:02:50,470
So public var equals + publicVar + and
46

47
00:02:50,470 --> 00:02:56,260
": privateVar = " + privateVar,
47

48
00:02:56,260 --> 00:03:00,200
just to show the values.
48

49
00:03:00,200 --> 00:03:02,990
And we'll also create a getter as well,
we'll need that shortly.
49

50
00:03:02,990 --> 00:03:05,600
And the getter will be just for
the privateVar.
50

51
00:03:06,810 --> 00:03:09,890
Like so, so there's our basic scope check.
51

52
00:03:09,890 --> 00:03:14,960
So what we're gonna do now is go to
the Main class and to the main method, and
52

53
00:03:14,960 --> 00:03:19,480
check and create a new instance, and then
check the value of privateVar in main.
53

54
00:03:19,480 --> 00:03:21,040
So to do that, gonna go back to main.
54

55
00:03:22,180 --> 00:03:27,690
And here in the main method,
we're gonna do String privateVar.
55

56
00:03:29,590 --> 00:03:33,190
Actually, the name is the name
as typed into the Scopecheck.
56

57
00:03:33,190 --> 00:03:41,150
this is private to main().
57

58
00:03:41,150 --> 00:03:43,150
Then we'll create
an instance of Scopecheck.
58

59
00:03:43,150 --> 00:03:48,280
So Scopecheck Scope instance,
59

60
00:03:48,280 --> 00:03:51,210
doesn't matter what we call it,
equals new, scope check.
60

61
00:03:51,210 --> 00:03:55,980
And we'll just talk some output,
the first one we'll put is scope instance.
61

62
00:03:55,980 --> 00:04:01,130
Scope instance privateVar is
62

63
00:04:01,130 --> 00:04:09,130
scopeInstance.getPrivateVar, using
the getter.
63

64
00:04:09,130 --> 00:04:13,500
And then we also want to print
out our value from privateVar.
64

65
00:04:13,500 --> 00:04:18,910
And of course we're noticing that
the privateVar there and privateVar
65

66
00:04:18,910 --> 00:04:24,000
here are the same named variables, but
they're actually separate variables.
66

67
00:04:24,000 --> 00:04:26,470
So we've got two variables
called privateVar.
67

68
00:04:26,470 --> 00:04:29,050
One's the string which I'll have to find
68

69
00:04:29,050 --> 00:04:31,230
above in the main method
you'll see on the screen.
69

70
00:04:31,230 --> 00:04:34,810
And the other is the int in our scope
check object that we created.
70

71
00:04:34,810 --> 00:04:36,470
It's just going to be scope instance.
71

72
00:04:36,470 --> 00:04:38,520
And we can only access the private file.
72

73
00:04:38,520 --> 00:04:40,110
The scope [INAUDIBLE] getter.
73

74
00:04:40,110 --> 00:04:42,250
Again the getter was what we created here.
74

75
00:04:42,250 --> 00:04:43,440
We can't access that directly.
75

76
00:04:43,440 --> 00:04:44,610
So we will actually run this.
76

77
00:04:48,720 --> 00:04:50,150
And surprisingly we get the first one.
77

78
00:04:50,150 --> 00:04:52,200
scopeInstance as privateVar is one and
78

79
00:04:52,200 --> 00:04:54,510
that was called form
the constructor through a call.
79

80
00:04:54,510 --> 00:04:55,800
We put that message in there.
80

81
00:04:55,800 --> 00:04:57,130
And this is private to main.
81

82
00:04:57,130 --> 00:04:58,580
It's the same variable name, but
82

83
00:04:58,580 --> 00:05:01,740
a different variable that is
local to the main method.
83

84
00:05:01,740 --> 00:05:03,040
And that's got a different value and
84

85
00:05:03,040 --> 00:05:06,050
is actually a different type in
this case it's actually a string.
85

86
00:05:06,050 --> 00:05:09,630
So within the main method itself,
whatever we refer to privateVar,
86

87
00:05:09,630 --> 00:05:13,180
Java actually knows that must be
referring to the one declared with main,
87

88
00:05:13,180 --> 00:05:16,730
as that's the only one that's
available in the current scope.
88

89
00:05:16,730 --> 00:05:21,950
So, in that, in other words, it's referred
to Variables that refer to in scope.
89

90
00:05:21,950 --> 00:05:25,860
So access modifiers such as public,
private, and protected.
90

91
00:05:25,860 --> 00:05:29,340
There's actually one way to
restrict the scope of an object and
91

92
00:05:29,340 --> 00:05:32,370
looking at these access modifiers
in more detail shortly.
92

93
00:05:32,370 --> 00:05:36,870
But as it turns out, scope is even more
important within the same class or method.
93

94
00:05:36,870 --> 00:05:41,120
So what we're gonna do now is shoot over
to ScopeCheck, our ScopeCheck class, and
94

95
00:05:41,120 --> 00:05:43,220
we're gonna create a new method there.
95

96
00:05:43,220 --> 00:05:48,740
And we'll call that one public
void timesTwo, and it's just
96

97
00:05:48,740 --> 00:05:52,330
gonna be a simple method that actually
prints out some of the two times tables.
97

98
00:05:52,330 --> 00:05:56,220
So we're gonna start with a definition,
privateVar Equals 2.
98

99
00:05:56,220 --> 00:05:58,520
Note the name of the variable.
99

100
00:05:58,520 --> 00:06:02,610
And note the fact that on line eight we've
also got a variable of the same name.
100

101
00:06:02,610 --> 00:06:04,730
For int i=0; i<10 i++.
101

102
00:06:04,730 --> 00:06:10,200
And we're just going to output i
102

103
00:06:10,200 --> 00:06:16,640
plus [SOUND] Times two is,
plus i times privateVar.
103

104
00:06:18,270 --> 00:06:19,850
Very very simple as you can see there.
104

105
00:06:19,850 --> 00:06:22,860
So the method as you can see as I
mentioned also declares a variable called
105

106
00:06:22,860 --> 00:06:25,380
privateVar, and
sets the initial value of two.
106

107
00:06:25,380 --> 00:06:26,450
So when we use it in the loop,
107

108
00:06:26,450 --> 00:06:29,910
i is multiplied by the value of this one,
of this variable here.
108

109
00:06:31,280 --> 00:06:33,750
And not this variable here.
109

110
00:06:33,750 --> 00:06:37,140
And that's because privateVar that's
actually local to this method
110

111
00:06:37,140 --> 00:06:38,380
is actually in scope.
111

112
00:06:38,380 --> 00:06:41,400
So just to confirm that actually is
the case we're going to go back to
112

113
00:06:41,400 --> 00:06:42,080
our main method.
113

114
00:06:42,080 --> 00:06:44,720
And let's actually just print that out.
114

115
00:06:44,720 --> 00:06:47,440
We'll just run this method so
scopeInstance.timesTwo.
115

116
00:06:47,440 --> 00:06:51,380
So if you run that you should
actually confirm that that's working.
116

117
00:06:52,420 --> 00:06:53,970
Zero times two is zero.
117

118
00:06:53,970 --> 00:06:55,720
One times two is two.
118

119
00:06:55,720 --> 00:06:56,610
Two times two is four.
119

120
00:06:56,610 --> 00:06:59,020
And so on.
So, it's clearly multiplying by two.
120

121
00:06:59,020 --> 00:07:01,760
And if you go back and
actually look at our code.
121

122
00:07:01,760 --> 00:07:04,760
We've got this line here on
line nineteen setting the local
122

123
00:07:04,760 --> 00:07:07,130
variable private file to two.
123

124
00:07:07,130 --> 00:07:10,660
And obviously if Java wasn't reading that,
it'd be coming back up here.
124

125
00:07:10,660 --> 00:07:13,180
And looking for
private var which is the of the value one.
125

126
00:07:13,180 --> 00:07:16,820
So, you can actually see that in our
example it clearly did work in and multiplied by
126

127
00:07:16,820 --> 00:07:17,660
two.
127

128
00:07:17,660 --> 00:07:21,170
So, by declaring that private var
again inside the times two method
128

129
00:07:21,170 --> 00:07:24,090
we created the new variable who's
scope is the current method.
129

130
00:07:24,090 --> 00:07:27,800
So, any time we refer to private
var inside the two times method But
130

131
00:07:27,800 --> 00:07:31,680
now actually referring to the variable
within the most local scope.
131

132
00:07:31,680 --> 00:07:33,090
So, there they got the same name.
132

133
00:07:33,090 --> 00:07:36,810
The rules of scope ensure that
the variable with the narrow scope
133

134
00:07:36,810 --> 00:07:37,940
is the one that is used.
134

135
00:07:37,940 --> 00:07:39,660
Narrow being the one that is most local.
135

136
00:07:39,660 --> 00:07:41,410
So, in this case private file.
136

137
00:07:41,410 --> 00:07:42,740
In the times 2 method.
137

138
00:07:42,740 --> 00:07:46,420
So another way to consider this to
use the concept of enclosing blocks.
138

139
00:07:46,420 --> 00:07:49,080
So when Java sees a reference
to a variable, what it does,
139

140
00:07:49,080 --> 00:07:51,920
it starts by checking
the current block of code to
140

141
00:07:51,920 --> 00:07:54,030
see if the variable was
actually declared there.
141

142
00:07:54,030 --> 00:07:57,460
Now if it is declared there,
then that variable is used.
142

143
00:07:57,460 --> 00:08:00,720
But if there's no such declaration and
it's not there, then Java actually checks
143

144
00:08:00,720 --> 00:08:05,660
any block that encloses the current one
to see if there's a declaration there.
144

145
00:08:05,660 --> 00:08:09,520
So it keeps doing this working backwards
until it finds the variable declaration.
145

146
00:08:09,520 --> 00:08:12,380
And if it doesn't actually find one, then
you'll actually get an error in your code.
146

147
00:08:12,380 --> 00:08:17,060
And, of course, the code won't be able to
run because the variable won't be found.
147

148
00:08:17,060 --> 00:08:18,990
So in this times two example,
148

149
00:08:18,990 --> 00:08:22,780
there's no declaration of privateVar
within the current block.
149

150
00:08:22,780 --> 00:08:25,170
The current block being
the fall of I'm talking about.
150

151
00:08:25,170 --> 00:08:26,760
There's no declaration in there so
151

152
00:08:26,760 --> 00:08:29,720
Java actually takes the enclosing
block which is the method itself.
152

153
00:08:29,720 --> 00:08:33,950
So this would be the current block
The block in braces for the four loop and
153

154
00:08:33,950 --> 00:08:38,850
obviously where the brace starts and
ends that sort of that group of code,
154

155
00:08:38,850 --> 00:08:43,890
there's no private variable to find,
there's no variable without name define so
155

156
00:08:43,890 --> 00:08:47,880
then take it out to the next level which
is the next enclosing block which in this
156

157
00:08:47,880 --> 00:08:52,100
case is the entire method and
it does actually find the variable private
157

158
00:08:52,100 --> 00:08:55,530
file and that's why it's able to use it
because that's the next most local one.
158

159
00:08:55,530 --> 00:08:58,370
Now there's two variables as you
can see within this four loop that
159

160
00:08:58,370 --> 00:08:59,200
are actually being used.
160

161
00:08:59,200 --> 00:09:03,690
We've got private var as we've discussed
just now and also I, so I's actually
161

162
00:09:03,690 --> 00:09:08,450
declared in the for loop so here in
this loop here is actually defined,
162

163
00:09:08,450 --> 00:09:11,940
it's actually in that loop, so it's in
that scope the scope of the two braces in
163

164
00:09:11,940 --> 00:09:15,400
other words, so
the scope is limited to that block
164

165
00:09:15,400 --> 00:09:18,820
plus any contained block if there were
any in which there isn't in this case.
165

166
00:09:18,820 --> 00:09:22,650
So to check that, we can actually try
doing this and we should get an error.
166

167
00:09:22,650 --> 00:09:23,850
So if we try doing something like
167

168
00:09:25,690 --> 00:09:30,760
value of i is now plus i we're
immediately gonna get an error.
168

169
00:09:30,760 --> 00:09:32,380
As you can see, it's in red.
169

170
00:09:32,380 --> 00:09:36,710
That intelligent actually showing there's
an error because it cannot result in and
170

171
00:09:36,710 --> 00:09:39,910
if we actually tried to run it with
actually getting the same error as well.
171

172
00:09:39,910 --> 00:09:44,260
Because ours was declared in the full loop
but a scope is actually restricted to within
172

173
00:09:44,260 --> 00:09:47,930
that loop and it's not actually
available outside that loop.
173

174
00:09:47,930 --> 00:09:49,280
So as soon as the loop terminates.
174

175
00:09:49,280 --> 00:09:53,080
In other words, as soon as it actually
finishes off 9 times 2 is 18.
175

176
00:09:53,080 --> 00:09:59,180
So once it's done that, and it's exited
that block of code effectively that's it.
176

177
00:09:59,180 --> 00:10:01,730
The variable I then goes out of the scope.
177

178
00:10:01,730 --> 00:10:03,510
So just to confirm again with the scope.
178

179
00:10:03,510 --> 00:10:06,370
So what we'll do now is we'll comment this
line out because we'll not need it because
179

180
00:10:06,370 --> 00:10:07,600
it's not going to work.
180

181
00:10:07,600 --> 00:10:11,270
If I was to comment this line out here,
the privateVar equals two,
181

182
00:10:11,270 --> 00:10:15,150
which is the local variable we
introduced with the times two method,
182

183
00:10:15,150 --> 00:10:16,300
obviously we haven't got an error.
183

184
00:10:16,300 --> 00:10:19,550
The reason now is, what's happening
is Gyro's looked at that and
184

185
00:10:19,550 --> 00:10:22,760
determined there's no local variable and
kept looking above,
185

186
00:10:22,760 --> 00:10:27,530
sort of expanding its search, and it's
found this privateVar in scopeCheck as
186

187
00:10:27,530 --> 00:10:32,190
a member variable, so if we run this
now Even though now it says times two.
187

188
00:10:32,190 --> 00:10:33,530
That's because we eventually typed that times two.
188

189
00:10:33,530 --> 00:10:37,500
But you can see the calculations
clearly are now multiplying by one.
189

190
00:10:37,500 --> 00:10:40,660
So it's actually using the value of privateVar
190

191
00:10:40,660 --> 00:10:45,300
the member variable on line 8 instead of the
local variable that we defined on line 19.
191

192
00:10:45,300 --> 00:10:47,830
We'll just uncomment that again, so
it's actually working.
192

193
00:10:47,830 --> 00:10:52,700
And obviously if you run it again We
now get the correct answers again.
193

194
00:10:52,700 --> 00:10:56,200
Now note here in this
situation that the class field privateVar
194

195
00:10:56,200 --> 00:11:00,140
with the value one still exists,
and it retains it value.
195

196
00:11:00,140 --> 00:11:02,870
And it can actually be used
outside of the two times method.
196

197
00:11:02,870 --> 00:11:06,790
And as it turns out we can actually even
use it within in the two times method
197

198
00:11:06,790 --> 00:11:09,570
even if we've also got
a variable of the same name.
198

199
00:11:09,570 --> 00:11:13,710
And what we have to do in that scenario
is we need to tell Java that we wanna use
199

200
00:11:13,710 --> 00:11:16,610
that privateVar rather than the local one.
200

201
00:11:16,610 --> 00:11:20,670
So what we do is we do that by
qualifying the variable name with this.
201

202
00:11:20,670 --> 00:11:24,380
So in other words, if we did it
specifically you had this variable on
202

203
00:11:24,380 --> 00:11:28,880
line 19 int private var equals two, but you specifically
wanted to use this variable that we
203

204
00:11:28,880 --> 00:11:31,830
defined at class level and
we can do that we can change this and
204

205
00:11:31,830 --> 00:11:36,580
we just actually type the word this
dot in front of privateVar and
205

206
00:11:36,580 --> 00:11:40,620
that actually tells java Use
this variable on line eight,
206

207
00:11:40,620 --> 00:11:44,810
even if you've got a variable of
the same name, in scope effectively.
207

208
00:11:44,810 --> 00:11:47,640
And you've seen that in the course
a lot of times with getters and
208

209
00:11:47,640 --> 00:11:51,520
setters, when we refer to this type of
field then to actually specify the field.
209

210
00:11:51,520 --> 00:11:55,960
And obviously if you run that,
we're back to multiplying by one again,
210

211
00:11:55,960 --> 00:11:58,650
and that's because we use this dot and
211

212
00:11:58,650 --> 00:12:03,630
Java knows then what we're actually
talking about This variable on line 8.
212

213
00:12:03,630 --> 00:12:06,910
And incidentally, if I commented that out,
we didn't get an error,
213

214
00:12:06,910 --> 00:12:11,090
this.privateVar doesn't exist anymore,
because as far as Java's concerned,
214

215
00:12:11,090 --> 00:12:15,710
you've told it to look for a field in
this class by the name of privateVar,
215

216
00:12:15,710 --> 00:12:18,410
and there's no longer one
because we've commented it out.
216

217
00:12:18,410 --> 00:12:19,270
So I'll just undo that again.
217

218
00:12:19,270 --> 00:12:21,980
And I'll just set this back
to where it was as well.
218

219
00:12:22,990 --> 00:12:25,860
Now the concept of scope doesn't
just apply to variables.
219

220
00:12:25,860 --> 00:12:28,470
Methods also have scope, as do classes.
220

221
00:12:28,470 --> 00:12:30,530
Class scope can be a little bit confusing,
but
221

222
00:12:30,530 --> 00:12:34,210
let's actually start by adding an inner
class to our ScopeCheck class and
222

223
00:12:34,210 --> 00:12:36,290
have a look at what it does
to the scope of things.
223

224
00:12:36,290 --> 00:12:40,060
So I'm gonna come down here to bottom
of ScopeCheck and add an inner class.
224

225
00:12:40,060 --> 00:12:46,020
So I'm gonna call that
public class InnerClass {.
225

226
00:12:46,020 --> 00:12:49,290
Let's set up a public variable,
public int private var.
226

227
00:12:49,290 --> 00:12:53,640
And assing it the value of three, so
it's distinct from anywhere else.
227

228
00:12:53,640 --> 00:12:59,640
We'll create a constructor and
we'll just do a simple output
228

229
00:12:59,640 --> 00:13:04,660
inner class Created
229

230
00:13:04,660 --> 00:13:11,090
privateVar or is privateVar.
230

231
00:13:11,090 --> 00:13:14,950
And let's also add exactly
the same method we had there.
231

232
00:13:14,950 --> 00:13:18,510
The times two method and
i'm going to paste that in here.
232

233
00:13:18,510 --> 00:13:21,390
Again, that's a method for inner class.
233

234
00:13:21,390 --> 00:13:22,140
And I'll just delete that.
234

235
00:13:22,140 --> 00:13:25,080
[SOUND] It's a little bit confusing
with that, now I'll comment that out, so
235

236
00:13:25,080 --> 00:13:26,490
I'm gonna delete that there as well.
236

237
00:13:26,490 --> 00:13:29,160
Making sure that I haven't got this
specified anymore in either of
237

238
00:13:29,160 --> 00:13:30,540
the timesTwo methods.
238

239
00:13:30,540 --> 00:13:34,260
And what we want to do then is create
an instance, of this inner class, and
239

240
00:13:34,260 --> 00:13:36,120
we'll go back to do that in the main.
240

241
00:13:36,120 --> 00:13:39,340
When you do that using that slightly odd
syntax we covered previously,
241

242
00:13:39,340 --> 00:13:45,690
and with previous videos, within the
classes so we use scopecheck.innerclass.
242

243
00:13:45,690 --> 00:13:54,010
InnerClass equals
scopeInstance.new InnerClass.
243

244
00:13:54,010 --> 00:13:57,790
Plus on notes with instant text but we
have talked about that in previous videos
244

245
00:13:57,790 --> 00:14:01,740
and let's now run that
code innerClass .timesTwo.
245

246
00:14:01,740 --> 00:14:02,720
And if we run that.
246

247
00:14:02,720 --> 00:14:09,780
What's we'll do here is we'll
actually put some formation.
247

248
00:14:09,780 --> 00:14:12,170
Some asterisks here just to make it clear.
248

249
00:14:12,170 --> 00:14:13,090
And we actually run this.
249

250
00:14:14,700 --> 00:14:17,950
So the inner class was created and
we've got the same calculations happening.
250

251
00:14:17,950 --> 00:14:19,500
So, that's all working fine.
251

252
00:14:19,500 --> 00:14:21,660
Once again, getting back to the code.
252

253
00:14:21,660 --> 00:14:22,820
The rule of scope applies and
253

254
00:14:22,820 --> 00:14:28,750
because private declared this a field of
the inner class, this has we're talking.
254

255
00:14:28,750 --> 00:14:31,650
And actually what i'll do make this
clear i'll actually delete this
255

256
00:14:31,650 --> 00:14:32,680
declaration here.
256

257
00:14:32,680 --> 00:14:33,800
That's what you want it to do.
257

258
00:14:33,800 --> 00:14:39,100
So, in the times two method for inner
class i'm actually deleting the privateVar, if we run that.
258

259
00:14:41,170 --> 00:14:42,240
This is what I wanted to show you.
259

260
00:14:42,240 --> 00:14:45,450
So in this case, what's happening
well previously when I had the local
260

261
00:14:45,450 --> 00:14:47,240
variable in there, you used that.
261

262
00:14:47,240 --> 00:14:50,560
But soon as I've actually deleted that,
of course the scope,
262

263
00:14:50,560 --> 00:14:54,010
the Java's going back and checking what
the scope is, and it comes back and
263

264
00:14:54,010 --> 00:14:57,420
finds privateVar which is defined here,
in the inner class as a field.
264

265
00:14:57,420 --> 00:14:58,430
And it's using the 3 for
265

266
00:14:58,430 --> 00:15:01,820
calculations as you can see there,
3, 6, 9, 12, 15, et cetera.
266

267
00:15:01,820 --> 00:15:06,150
So in this case with the inner class,
this definition here public int, privateVar
267

268
00:15:06,150 --> 00:15:11,490
equals 3, overrides the private int privateVar
which is in our scope check class And just
268

269
00:15:11,490 --> 00:15:14,990
out of interest it doesn't actually shadow
the privateVar in ScopeCheck times two.
269

270
00:15:14,990 --> 00:15:17,440
So on this first on here at all.
270

271
00:15:17,440 --> 00:15:20,740
Those two blocks are not enclosed by or
enclosing each other so there's no actual
271

272
00:15:20,740 --> 00:15:24,620
possibility of either variable
being in scope in the other method.
272

273
00:15:24,620 --> 00:15:27,760
And once again, we can actually
comment this out if we wanted to here.
273

274
00:15:27,760 --> 00:15:29,320
We don't get an error
as you can see there.
274

275
00:15:29,320 --> 00:15:34,560
And if we run it again We're getting
the calculations multiplied by 1,
275

276
00:15:34,560 --> 00:15:38,360
so what's happening again is, it's
looking for privateVar, cannot find it in
276

277
00:15:38,360 --> 00:15:44,090
the inner class or couldn't find it as
a local variable in the timesTwo method,
277

278
00:15:44,090 --> 00:15:48,800
so it's come up here to privateVar in
ScopeCheck and retrieved the value of 1,
278

279
00:15:48,800 --> 00:15:51,000
and our calculations
actually use that again.
279

280
00:15:51,000 --> 00:15:56,320
Now we actually came back here to time two
within the inner class and we use this, we
280

281
00:15:57,510 --> 00:16:01,810
actually get an error and that's because
it's looking for the field in inner class.
281

282
00:16:01,810 --> 00:16:04,850
Now obviously that hasn't got a value
because it hasn't been defined with
282

283
00:16:04,850 --> 00:16:12,390
an inner class so what we can do is
example, we can type scope check dot this.
283

284
00:16:12,390 --> 00:16:15,350
.privateVar, which
284

285
00:16:15,350 --> 00:16:18,180
confirms that this is the variable up
here that we're actually talking about.
285

286
00:16:18,180 --> 00:16:20,940
You could run that and
286

287
00:16:20,940 --> 00:16:23,850
you can see that's calculating
correctly based on the value of 1.
287

288
00:16:23,850 --> 00:16:27,280
And if we actually
uncomment this out again.
288

289
00:16:27,280 --> 00:16:30,840
So we now have got a field in
the inner class called privateVar.
289

290
00:16:30,840 --> 00:16:35,690
If we run this We're still getting
the same calculations based on
290

291
00:16:35,690 --> 00:16:40,410
one multiplying by one because that
variable's been defined in scope check and
291

292
00:16:40,410 --> 00:16:43,430
because we've used the name
of the class.this.
292

293
00:16:43,430 --> 00:16:48,950
I would have explicitly said Use
this field in the scope check class.
293

294
00:16:48,950 --> 00:16:53,100
And just out of interest, in the times
two method we could use scope as well.
294

295
00:16:53,100 --> 00:16:56,680
We could actually if we wanted to
actually call the times two method.
295

296
00:16:56,680 --> 00:17:02,360
We could do scope check dot this
dot times two if you wanted to.
296

297
00:17:04,150 --> 00:17:10,050
To specifically call that method that is
a method in the scope check class itself.
297

298
00:17:10,050 --> 00:17:12,810
So, what i'm gonna do is actually
finish this video here and
298

299
00:17:12,810 --> 00:17:14,070
now it's gonna be a bit long.
299

300
00:17:14,070 --> 00:17:17,020
In the next video we're just going to
finish off a few minor things to do with
300

301
00:17:17,020 --> 00:17:19,860
scope, and
then we're going to talk about visibility.
301

302
00:17:19,860 --> 00:17:21,610
And then we're gonna start on a challenge.
302

303
00:17:21,610 --> 00:17:23,140
So I'll see you in the next video.
