1
1

00:00:05,250  -->  00:00:07,950
- So in the last video, we actually binded
2

2

00:00:07,950  -->  00:00:10,570
the results of the task,
the artist's observable
3

3

00:00:10,570  -->  00:00:13,820
list, to the table views items property.
4

4

00:00:13,820  -->  00:00:15,680
Or we actually worked
on that by creating the
5

5

00:00:15,680  -->  00:00:17,470
listArtists() method, as you can see
6

6

00:00:17,470  -->  00:00:19,770
on the screen, but also
putting those changes
7

7

00:00:19,770  -->  00:00:23,350
for the cell value
factory in our main.fxml
8

8

00:00:24,770  -->  00:00:27,980
here using the property value factory.
9

9

00:00:27,980  -->  00:00:30,950
Now because the controller
isn't created until
10

10

00:00:30,950  -->  00:00:33,560
this fxml is loaded, and that happens
11

11

00:00:33,560  -->  00:00:35,960
in the start method, and also because we
12

12

00:00:35,960  -->  00:00:37,890
want to be sure that the user interface
13

13

00:00:37,890  -->  00:00:40,430
has been built before
we try and load these
14

14

00:00:40,430  -->  00:00:43,640
results, the ones that
we've been working on.
15

15

00:00:43,640  -->  00:00:44,970
So we really wanna make sure that the UI
16

16

00:00:44,970  -->  00:00:47,180
has been built before we try and
17

17

00:00:47,180  -->  00:00:49,310
load those results into a table.
18

18

00:00:49,310  -->  00:00:50,580
Because of that, we're going to initiate
19

19

00:00:50,580  -->  00:00:53,280
the query of the artists from the start()
20

20

00:00:53,280  -->  00:00:56,210
method in our main.java class.
21

21

00:00:56,210  -->  00:00:57,830
So we're gonna work on that in here.
22

22

00:00:57,830  -->  00:01:00,410
Now what we need to do is get access
23

23

00:01:00,410  -->  00:01:02,270
to the controller, so we're gonna
24

24

00:01:02,270  -->  00:01:04,470
change this code around just a little
25

25

00:01:04,470  -->  00:01:07,330
bit to be able to achieve that.
26

26

00:01:07,330  -->  00:01:11,170
So we're gonna start
with FXMLLoader loader is
27

27

00:01:12,110  -->  00:01:15,950
equal to new FXMLLoader(), and then
28

28

00:01:15,950  -->  00:01:17,730
I'm gonna copy this code here that's
29

29

00:01:17,730  -->  00:01:19,110
currently on the next
slide, this getClass()
30

30

00:01:19,110  -->  00:01:22,490
after the load and left parentheses.
31

31

00:01:22,490  -->  00:01:24,640
I'm gonna cut that out and paste that
32

32

00:01:24,640  -->  00:01:28,540
into the parentheses on the line above.
33

33

00:01:28,540  -->  00:01:30,060
And I'm gonna change this line a little
34

34

00:01:30,060  -->  00:01:33,160
bit to read where it reads currently
35

35

00:01:33,160  -->  00:01:36,070
parent route equals FXMLLoader.load().
36

36

00:01:36,070  -->  00:01:37,390
We're gonna get rid of that and use the
37

37

00:01:37,390  -->  00:01:39,880
variable we created on the previous line,
38

38

00:01:39,880  -->  00:01:44,040
so that's gonna be loader.load().
39

39

00:01:45,480  -->  00:01:46,630
Then next, we want to get access to
40

40

00:01:46,630  -->  00:01:48,630
the controller as I mentioned, so we
41

41

00:01:48,630  -->  00:01:52,070
can do that by typing
Controller controller is
42

42

00:01:52,070  -->  00:01:56,120
equal to that's loader.getController().
43

43

00:01:56,120  -->  00:01:58,490
That's how we get an
instance of the controller.
44

44

00:01:58,490  -->  00:02:01,890
And lastly, we want to
query the artists now.
45

45

00:02:01,890  -->  00:02:06,060
So to do that, controller.listArtists().
46

46

00:02:08,360  -->  00:02:09,370
All right, so that's how we do that
47

47

00:02:09,370  -->  00:02:12,840
from the start() method
from our main class.
48

48

00:02:12,840  -->  00:02:15,580
Now as the code exists at the moment,
49

49

00:02:15,580  -->  00:02:19,410
it's got an error, so
if we actually run this,
50

50

00:02:22,320  -->  00:02:23,870
we'll see that we got a problem here
51

51

00:02:23,870  -->  00:02:27,580
in the simple integer property in our
52

52

00:02:27,580  -->  00:02:29,690
data source, and that's because I didn't
53

53

00:02:29,690  -->  00:02:32,550
go through the artist class,
properly setting that up.
54

54

00:02:32,550  -->  00:02:35,320
So let's go ahead now and fix that up.
55

55

00:02:35,320  -->  00:02:37,500
So we're gonna go to artist.
56

56

00:02:37,500  -->  00:02:38,720
Now at the moment what we're doing here
57

57

00:02:38,720  -->  00:02:41,430
is we're sending and receiving while
58

58

00:02:41,430  -->  00:02:44,760
the setter and getters to simple name
59

59

00:02:44,760  -->  00:02:46,140
integer property, but we should
60

60

00:02:46,140  -->  00:02:47,720
be actually sending the type.
61

61

00:02:47,720  -->  00:02:51,540
The int and the string to other
classes that are using this.
62

62

00:02:51,540  -->  00:02:54,900
So what I'm gonna do there is change this.
63

63

00:02:54,900  -->  00:02:57,020
So instead of returning a simple
64

64

00:02:57,020  -->  00:02:59,790
integer property, it's
gonna return an int.
65

65

00:02:59,790  -->  00:03:01,310
Then we need to make little
change here to return
66

66

00:03:01,310  -->  00:03:05,470
ID.get(), same for the getName().
67

67

00:03:07,470  -->  00:03:11,960
We can return a string in name.get().
68

68

00:03:11,960  -->  00:03:14,660
Now in terms of the setter,
we're gonna do a similar thing.
69

69

00:03:14,660  -->  00:03:17,510
This time we're going to receive the type,
70

70

00:03:17,510  -->  00:03:20,240
as an argument, which will be int.
71

71

00:03:20,240  -->  00:03:23,200
And then to save that back into
our SimpleInteger property,
72

72

00:03:23,200  -->  00:03:27,360
we use .set() and pass the int to it.
73

73

00:03:28,550  -->  00:03:30,730
Now a similar thing with setName().
74

74

00:03:30,730  -->  00:03:33,050
Convert that to a string.
75

75

00:03:33,050  -->  00:03:37,210
Then use the .set() like so, and then
76

76

00:03:40,760  -->  00:03:43,360
lastly, what we need to do now is create
77

77

00:03:43,360  -->  00:03:45,370
a constructor to make sure that we
78

78

00:03:45,370  -->  00:03:47,950
initialise both the ID and the name
79

79

00:03:47,950  -->  00:03:51,030
to avoid, say, getting
a NullPointerException
80

80

00:03:51,030  -->  00:03:52,230
or something along those lines.
81

81

00:03:52,230  -->  00:03:53,980
So I'm gonna create a constructor.
82

82

00:03:53,980  -->  00:03:56,110
We're gonna select none, 'cause we're not
83

83

00:03:56,110  -->  00:03:58,700
going to be getting these as arguments.
84

84

00:03:58,700  -->  00:04:00,610
Rather, we're initialising them.
85

85

00:04:00,610  -->  00:04:04,770
So this.id is equal to new,
simple integer property.
86

86

00:04:06,030  -->  00:04:10,190
And this.name is equal to
new simple string property.
87

87

00:04:11,210  -->  00:04:14,080
So I've now initialised that
in the constructor as well.
88

88

00:04:14,080  -->  00:04:15,920
And if you go back to
data source, you can see
89

89

00:04:15,920  -->  00:04:18,360
the error has disappeared, and we're
90

90

00:04:18,360  -->  00:04:21,410
actually creating a new
instance here on line 202
91

91

00:04:21,410  -->  00:04:25,070
of the artist object, or
creating an object, I should say.
92

92

00:04:25,070  -->  00:04:27,420
So that's gonna be using that constructor,
93

93

00:04:27,420  -->  00:04:28,960
which we can then be sure has
94

94

00:04:28,960  -->  00:04:32,150
initialised the ID and name fields.
95

95

00:04:32,150  -->  00:04:34,240
Okay, so at the moment,
there's one other problem.
96

96

00:04:34,240  -->  00:04:36,750
And we won't get an error anymore, but
97

97

00:04:36,750  -->  00:04:40,660
we'll find if we go to
run this, it won't work.
98

98

00:04:42,350  -->  00:04:45,370
So I'm gonna run it, and
when I say it doesn't
99

99

00:04:45,370  -->  00:04:47,600
work, we're not getting
our artists appearing here.
100

100

00:04:47,600  -->  00:04:50,000
For some reason, so this is actually gonna
101

101

00:04:50,000  -->  00:04:51,320
be your challenge to figure out why
102

102

00:04:51,320  -->  00:04:53,380
we're not seeing the list of
103

103

00:04:53,380  -->  00:04:56,410
artists showing here automatically.
104

104

00:04:56,410  -->  00:04:58,640
Because what we've done
now, again, is we've
105

105

00:04:58,640  -->  00:05:01,130
setup and changed our start() method
106

106

00:05:01,130  -->  00:05:03,630
to invoke the list of artists.
107

107

00:05:04,850  -->  00:05:08,060
And obviously in the
previous video, we setup
108

108

00:05:08,060  -->  00:05:10,350
a cell factory, cell value
factory and a property
109

109

00:05:10,350  -->  00:05:12,920
value factory to associate that, and
110

110

00:05:12,920  -->  00:05:15,890
we should be returning from our artist,
111

111

00:05:15,890  -->  00:05:17,690
and should be returning a name.
112

112

00:05:17,690  -->  00:05:19,700
So clearly something's amiss there and
113

113

00:05:19,700  -->  00:05:21,760
something's not working, and again that's
114

114

00:05:21,760  -->  00:05:23,790
the listArtist() method that is
115

115

00:05:23,790  -->  00:05:26,450
being invoked by the controller.
116

116

00:05:27,310  -->  00:05:29,020
So your mission, if you
choose to accept it,
117

117

00:05:29,020  -->  00:05:31,140
is to figure out why this is happening.
118

118

00:05:31,140  -->  00:05:33,190
Why aren't we seeing a list of artists?
119

119

00:05:33,190  -->  00:05:34,560
To give you a little bit of a hint there,
120

120

00:05:34,560  -->  00:05:38,320
there's an extra line of code
that we need to add somewhere.
121

121

00:05:38,320  -->  00:05:39,160
All right?
122

122

00:05:39,160  -->  00:05:39,990
So that's the challenge.
123

123

00:05:39,990  -->  00:05:41,790
See if you can figure
out and fix this so that
124

124

00:05:41,790  -->  00:05:44,550
the artist does actually,
or the artists do
125

125

00:05:44,550  -->  00:05:47,980
show in the application when
it starts automatically.
126

126

00:05:47,980  -->  00:05:50,950
So pause the video now and
come back once you've fixed
127

127

00:05:50,950  -->  00:05:53,130
that, or if you're stuck,
play the video again
128

128

00:05:53,130  -->  00:05:54,480
and I'll show you how to do it.
129

129

00:05:54,480  -->  00:05:56,400
So pause the video now.
130

130

00:05:58,360  -->  00:05:59,590
Okay, so how did you get on?
131

131

00:05:59,590  -->  00:06:01,710
Did you find out how to do that?
132

132

00:06:01,710  -->  00:06:04,710
Well, the trick here is that firstly,
133

133

00:06:04,710  -->  00:06:06,980
the controller, going
back to the controller.
134

134

00:06:06,980  -->  00:06:09,230
That is calling this method successfully.
135

135

00:06:09,230  -->  00:06:11,040
Sorry, I'm saying controller, but the
136

136

00:06:11,040  -->  00:06:13,480
main start() method I'm talking about.
137

137

00:06:13,480  -->  00:06:16,050
So this is actually calling
the Controller.listArtists()
138

138

00:06:16,050  -->  00:06:19,900
method, and the listArtists()
method seemingly
139

139

00:06:19,900  -->  00:06:22,850
is creating a task and it's doing the bind
140

140

00:06:22,850  -->  00:06:26,040
to bind it to our FXML,
but actually the problem
141

141

00:06:26,040  -->  00:06:28,840
here is we're not actually
kicking off the task.
142

142

00:06:28,840  -->  00:06:30,900
So what we need to do is here,
143

143

00:06:30,900  -->  00:06:34,990
type in new Thread task.start().
144

144

00:06:37,170  -->  00:06:38,340
So we need to kick off the task so it
145

145

00:06:38,340  -->  00:06:41,380
actually does actually go
through and start that for us.
146

146

00:06:41,380  -->  00:06:44,040
And actually then go through the process
147

147

00:06:44,040  -->  00:06:48,290
of retrieving the records
from our SQLite database.
148

148

00:06:48,290  -->  00:06:49,910
So now that we've done that, we should
149

149

00:06:49,910  -->  00:06:52,410
find hopefully this will work.
150

150

00:06:55,530  -->  00:06:58,070
Now, weirdly enough, sometimes, you will
151

151

00:06:58,070  -->  00:06:59,760
find that this actually happens.
152

152

00:06:59,760  -->  00:07:01,920
Now looking at this,
you can see that it has
153

153

00:07:01,920  -->  00:07:04,410
tried to load some records in,
154

154

00:07:04,410  -->  00:07:07,420
but for some reason, they're blank.
155

155

00:07:07,420  -->  00:07:09,470
So you might be wondering,
"Well, why are they blank?"
156

156

00:07:09,470  -->  00:07:11,000
They shouldn't be blank, 'cause
157

157

00:07:11,000  -->  00:07:13,110
clearly it's tried to do something.
158

158

00:07:13,110  -->  00:07:15,530
And I've found this to
occasionally be a bug
159

159

00:07:15,530  -->  00:07:18,610
with the -- seemingly, with IntelliJ.
160

160

00:07:19,590  -->  00:07:23,200
Because if I go back, and if
I paste the code in again.
161

161

00:07:23,200  -->  00:07:25,710
So we've got this columns code here.
162

162

00:07:25,710  -->  00:07:29,100
And if I just come through
in here and paste this code.
163

163

00:07:29,100  -->  00:07:31,940
This code we've used before,
and just to be clear,
164

164

00:07:31,940  -->  00:07:33,600
looking at that, we should see that
165

165

00:07:33,600  -->  00:07:37,230
both those, to my eyes, it's identical.
166

166

00:07:37,230  -->  00:07:38,160
As you can see, there doesn't seem
167

167

00:07:38,160  -->  00:07:39,910
to be anything different there.
168

168

00:07:39,910  -->  00:07:41,730
But if I actually then do that,
169

169

00:07:41,730  -->  00:07:44,060
leave the new pasted byte in there.
170

170

00:07:44,060  -->  00:07:47,140
Now if we go back and run this again.
171

171

00:07:50,380  -->  00:07:52,830
We find that it works,
which is very bizarre.
172

172

00:07:52,830  -->  00:07:54,380
So I'm not too sure what's going on there,
173

173

00:07:54,380  -->  00:07:56,030
but if I close this down again,
174

174

00:07:56,030  -->  00:07:59,280
and go back, and if I undo the changes,
175

175

00:08:01,250  -->  00:08:03,150
so I've undone it, so we've definitely got
176

176

00:08:03,150  -->  00:08:05,320
back to the original version of this file.
177

177

00:08:05,320  -->  00:08:06,520
Even if, for some reason, I couldn't
178

178

00:08:06,520  -->  00:08:08,080
see what the change was.
179

179

00:08:08,080  -->  00:08:09,170
So we're now dealing with this
180

180

00:08:09,170  -->  00:08:11,800
exact code from the previous video.
181

181

00:08:11,800  -->  00:08:15,300
And if I run this again, we find it works.
182

182

00:08:17,380  -->  00:08:18,210
So there you go.
183

183

00:08:18,210  -->  00:08:19,270
That seems to be a bug somewhere, so
184

184

00:08:19,270  -->  00:08:21,560
if you get something like
that and I'm wondering
185

185

00:08:21,560  -->  00:08:24,530
whether it's something you've
done wrong, no it's not.
186

186

00:08:24,530  -->  00:08:25,920
It seems to be a bug with IntelliJ
187

187

00:08:25,920  -->  00:08:28,110
or something of that nature.
188

188

00:08:28,110  -->  00:08:29,280
But anyway, the good thing here now
189

189

00:08:29,280  -->  00:08:31,090
is at this point, we have finally
190

190

00:08:31,090  -->  00:08:34,340
got a list of artists correctly showing
191

191

00:08:35,300  -->  00:08:37,950
when we boot up our music
database application.
192

192

00:08:37,950  -->  00:08:39,650
So that's a good thing.
193

193

00:08:39,650  -->  00:08:41,840
So at this point, you
now know how to perform
194

194

00:08:41,840  -->  00:08:43,770
a potentially long running query
195

195

00:08:43,770  -->  00:08:46,440
and bind the results to a table.
196

196

00:08:46,440  -->  00:08:47,920
So now that we've done that, let's
197

197

00:08:47,920  -->  00:08:51,240
now implement the show
albums artist button,
198

198

00:08:51,240  -->  00:08:54,280
so just this button here, this second one.
199

199

00:08:54,280  -->  00:08:58,100
So what do we need to do when
a user presses this button?
200

200

00:08:58,100  -->  00:08:59,140
Well, what we need to do is get
201

201

00:08:59,140  -->  00:09:01,440
the ID of the selected artist, and
202

202

00:09:01,440  -->  00:09:04,370
so the user will select the
potential artist over here.
203

203

00:09:04,370  -->  00:09:05,990
So we need to get the ID.
204

204

00:09:05,990  -->  00:09:07,560
Then we need to query the database
205

205

00:09:07,560  -->  00:09:10,520
for all albums by that artist, and
206

206

00:09:10,520  -->  00:09:13,200
then we need to populate the table view.
207

207

00:09:13,200  -->  00:09:14,030
But hang on a minute.
208

208

00:09:14,030  -->  00:09:15,130
Our current table view, as you
209

209

00:09:15,130  -->  00:09:18,040
can see on screen, is showing artists.
210

210

00:09:18,040  -->  00:09:19,260
Well, we'll actually look at how to
211

211

00:09:19,260  -->  00:09:22,050
deal with that and
handle that in a minute.
212

212

00:09:22,050  -->  00:09:23,770
Now, we already have a method in the
213

213

00:09:23,770  -->  00:09:27,060
data source that queries
the albums by an artist.
214

214

00:09:27,060  -->  00:09:27,990
We have a look at that.
215

215

00:09:27,990  -->  00:09:29,320
Close this down.
216

216

00:09:31,740  -->  00:09:34,660
That's our query albums for artist.
217

217

00:09:36,950  -->  00:09:38,530
This one here.
218

218

00:09:38,530  -->  00:09:41,060
So I've already got that method existing.
219

219

00:09:41,060  -->  00:09:43,150
But the thing here is
that it uses the artist's
220

220

00:09:43,150  -->  00:09:45,190
name correctly, so it passes that to
221

221

00:09:45,190  -->  00:09:47,640
what gets passed in as an argument.
222

222

00:09:47,640  -->  00:09:50,000
But it actually doesn't inter-join.
223

223

00:09:50,000  -->  00:09:52,230
Now we could use it, but since we know
224

224

00:09:52,230  -->  00:09:56,360
what the artist ID is,
let's use that instead.
225

225

00:09:56,360  -->  00:09:58,150
And that's because querying based on
226

226

00:09:58,150  -->  00:09:59,990
an integer and without using a join
227

227

00:09:59,990  -->  00:10:02,240
will actually be much quicker.
228

228

00:10:02,240  -->  00:10:05,160
And that could make a
significant difference,
229

229

00:10:05,160  -->  00:10:07,840
especially if you're dealing
with larger data-sets.
230

230

00:10:07,840  -->  00:10:10,270
Now we'll still use a
prepared statement, and
231

231

00:10:10,270  -->  00:10:12,280
since the user can't sort the data,
232

232

00:10:12,280  -->  00:10:14,410
or tell us how they want it sorted,
233

233

00:10:14,410  -->  00:10:18,390
we'll always display the results
sorted in ascending order.
234

234

00:10:18,390  -->  00:10:20,200
Now when it comes to sorting, we may
235

235

00:10:20,200  -->  00:10:22,260
want the results returned sorted.
236

236

00:10:22,260  -->  00:10:23,240
That's what you do.
237

237

00:10:23,240  -->  00:10:26,560
Or alternatively, we may want
the application to sort them.
238

238

00:10:26,560  -->  00:10:28,380
We then have to decide based on the
239

239

00:10:28,380  -->  00:10:30,370
characteristics of the application
240

240

00:10:30,370  -->  00:10:32,410
we're working on, for example,
241

241

00:10:32,410  -->  00:10:33,840
how large we expect the returned
242

242

00:10:33,840  -->  00:10:35,650
datasets to be, or whether the
243

243

00:10:35,650  -->  00:10:37,930
user can change the sort order.
244

244

00:10:37,930  -->  00:10:41,320
But let's go back talking
now about this query.
245

245

00:10:41,320  -->  00:10:43,040
And we're gonna go back up to the top
246

246

00:10:43,040  -->  00:10:46,860
and we're going to add a few constants.
247

247

00:10:46,860  -->  00:10:48,220
So the one we want is going to be
248

248

00:10:48,220  -->  00:10:52,590
public static final
String, and that's going
249

249

00:10:52,590  -->  00:10:54,920
to be queryAlbumsByArtistId.
250

250

00:10:58,310  -->  00:11:00,250
And that's going to be equal to --
251

251

00:11:00,250  -->  00:11:03,420
that's gonna be SELECT * FROM and it's
252

252

00:11:05,810  -->  00:11:07,640
gonna be plus from table, underscore
253

253

00:11:07,640  -->  00:11:10,050
albums plus WHERE, and I need
254

254

00:11:13,700  -->  00:11:15,010
a space there before I start typing
255

255

00:11:15,010  -->  00:11:17,850
WHERE, a space after, plus column.
256

256

00:11:19,070  -->  00:11:21,820
And it's gonna be album_artist.
257

257

00:11:21,820  -->  00:11:25,070
Plus space then equals ?, so we can use
258

258

00:11:27,110  -->  00:11:30,750
a prepared statement,
ORDER BY, space again
259

259

00:11:30,750  -->  00:11:33,580
plus column album_name plus space.
260

260

00:11:37,280  -->  00:11:39,870
That's gonna be COLLATE NOCASE.
261

261

00:11:41,720  -->  00:11:44,150
All right, so there's our query.
262

262

00:11:44,150  -->  00:11:46,940
So that query's gonna result in this.
263

263

00:11:46,940  -->  00:11:48,150
So SELECT * FROM albums WHERE artist
264

264

00:11:48,150  -->  00:11:51,770
= ? ORDER BY NAME COLLATE NOCASE.
265

265

00:11:51,770  -->  00:11:55,840
And obviously the prepared
statement will insert the ID.
266

266

00:11:55,840  -->  00:11:58,010
Okay, so that's our query.
267

267

00:11:59,240  -->  00:12:02,080
So let's add a prepared statement.
268

268

00:12:03,710  -->  00:12:07,190
That's gonna be private PreparedStatement.
269

269

00:12:07,190  -->  00:12:11,020
And we'll call this one
queryAlbumsByArtistId.
270

270

00:12:13,680  -->  00:12:17,010
And in our open() method, we're going
271

271

00:12:17,010  -->  00:12:18,600
to initialise that, so it's going to
272

272

00:12:18,600  -->  00:12:21,600
be queryAlbumsByArtistId is equal to
273

273

00:12:22,950  -->  00:12:26,120
com.preparestatement, and the argument
274

274

00:12:27,940  -->  00:12:29,370
or the parameter, rather, that we're
275

275

00:12:29,370  -->  00:12:30,840
going to be sending to that is going
276

276

00:12:30,840  -->  00:12:34,010
to be query_albums_by_artist_id, which
277

277

00:12:35,180  -->  00:12:37,580
is the one, again, we created.
278

278

00:12:37,580  -->  00:12:40,040
And then also in the close() method,
279

279

00:12:40,040  -->  00:12:42,220
we want to make sure that
we are trying to close that.
280

280

00:12:42,220  -->  00:12:43,630
We do that before we close the connexion.
281

281

00:12:43,630  -->  00:12:46,290
So if query happens while artist ID is
282

282

00:12:46,290  -->  00:12:48,960
not equal to null, it'd be query
283

283

00:12:50,750  -->  00:12:54,050
happens while artist ID dot close.
284

284

00:12:54,050  -->  00:12:55,760
All right, so let's end the video here,
285

285

00:12:55,760  -->  00:12:57,210
but we'll just quickly run it.
286

286

00:12:57,210  -->  00:12:58,350
And then in the next video, we'll
287

287

00:12:58,350  -->  00:13:01,180
continue on to running our method.
288

288

00:13:01,180  -->  00:13:02,120
So let's just run it to make sure
289

289

00:13:02,120  -->  00:13:04,200
there weren't any errors.
290

290

00:13:06,440  -->  00:13:07,930
It looks fine.
291

291

00:13:07,930  -->  00:13:09,710
And we'll close this down.
292

292

00:13:09,710  -->  00:13:11,420
We've got no errors, it
closed down successfully.
293

293

00:13:11,420  -->  00:13:12,810
So we know that everything's
294

294

00:13:12,810  -->  00:13:14,720
working with our prepared statement.
295

295

00:13:14,720  -->  00:13:16,160
So as I mentioned in the next video,
296

296

00:13:16,160  -->  00:13:18,040
we'll start looking at writing the method.
297

297

00:13:18,040  -->  00:13:20,900
And that's gonna be our
queryAlbumsForArtistID method.
298

298

00:13:20,900  -->  00:13:23,930
I'll see you as always in the next video.
