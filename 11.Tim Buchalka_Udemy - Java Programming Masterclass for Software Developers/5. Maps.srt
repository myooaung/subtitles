1
1

00:00:05,170  -->  00:00:10,290
just before we move forward and start
talking about maps and the maps interface
2

2

00:00:10,290  -->  00:00:14,760
and hash maps I did allude to a
potential problem that could come up
3

3

00:00:14,760  -->  00:00:18,960
when you're using the compare to
function or compared method I should say
4

4

00:00:18,960  -->  00:00:23,490
and I just wanna go to that briefly before
we actually move on to the map
5

5

00:00:23,490  -->  00:00:27,580
issue so if you actually go ahead and
read the Java documentation on the
6

6

00:00:27,580  -->  00:00:31,720
collections frame work you find that
there's a lot of talk about it and they
7

7

00:00:31,720  -->  00:00:35,980
used words like and ordering being
consistent with equals the sort of their
8

8

00:00:35,980  -->  00:00:40,100
phrase and much of the discussion doesn't do a
great deal to shed light on what that
9

9

00:00:40,100  -->  00:00:44,990
phrase actually means and again the
phrase an ordering being consistent with
10

10

00:00:44,990  -->  00:00:48,350
equals but it really comes out to be
quite simple, a method that produces
11

11

00:00:48,350  -->  00:00:52,970
ordering that is consistent with equals
will only return 0 if the elements
12

12

00:00:52,970  -->  00:00:59,010
being compared actually are equal now our
compared method to behave in this respect
13

13

00:00:59,010  -->  00:01:01,340
so looking at our compareTo method
14

14

00:01:01,340  -->  00:01:05,200
so our compareTo method behaves well
in this respect so as you can see on the
15

15

00:01:05,200  -->  00:01:09,760
screen there so too seed objects have the
same seat number then they have same
16

16

00:01:09,760  -->  00:01:14,170
seats effectively and the string dot
compareTo method will return 0 and that's
17

17

00:01:14,170  -->  00:01:18,280
quite correct but looking at are
comparators compare method though we go back up to
18

18

00:01:18,280  -->  00:01:22,540
the top here, this is the compare method here I'm
talking about this is definitely not
19

19

00:01:22,540  -->  00:01:27,580
consistent with the equals so comparing
any of the seats with the same price will
20

20

00:01:27,580  -->  00:01:32,040
return 0 when they are obviously not the same
seat because of course we can add
21

21

00:01:32,040  -->  00:01:36,430
multiple seats with the same price so
this causes problems with sorted sets
22

22

00:01:36,430  -->  00:01:41,160
and maps if the sorted maps use a comparator such as ours then that's
23

23

00:01:41,160  -->  00:01:45,570
inconsistent with equals now actually it
turned out to be quite easy to fix all
24

24

00:01:45,570  -->  00:01:48,750
you need to do is do a further tests on the
seat number whenever the price is equal
25

25

00:01:48,750  -->  00:01:54,190
just as I described for last and first
names in the previous video, but I'm gonna
26

26

00:01:54,190  -->  00:01:58,310
leave it as it is for now so that we can
see the problems that can arise with sorted
27

27

00:01:58,310  -->  00:02:04,070
sets and sorted maps later in this
video the bottom line is you can't use
28

28

00:02:04,070  -->  00:02:07,720
the compare method as we got here
without more work by using the
29

29

00:02:07,720  -->  00:02:11,970
price because it's gonna be more than
one seat that would return an equals
30

30

00:02:11,970  -->  00:02:15,270
returning a zero because the process the prices the same, we need to break it down further
31

31

00:02:15,270  -->  00:02:18,950
so lets move on now and start talking
about the map interface and again you see an
32

32

00:02:18,950  -->  00:02:22,840
example of what I mean by of this error
later on so right now we're gonna leave
33

33

00:02:22,840  -->  00:02:26,720
the collection side of the Java
Collections Framework for now, I'm gonna have a
34

34

00:02:26,720  -->  00:02:31,810
look at the map interface and also some
of the Java classes that implement it
35

35

00:02:31,810  -->  00:02:35,740
now the map interface part of the collections framework
even though it's not a true collection in
36

36

00:02:35,740  -->  00:02:42,630
a true sense of the word as we've talked
about in the previous videos
37

37

00:02:42,630  -->  00:02:49,360
and just to say what I mean lets just open a browser, paste in this link
38

38

00:02:49,360  -->  00:02:53,050
which will be available for you, so you can see
obviously a map is out here on it's own its not
39

39

00:02:53,050  -->  00:02:59,050
part of the collection exactly like it says
a list of q and a dq is
40

40

00:02:59,050  -->  00:03:03,200
now the map interface replaces the now obsolete
dictionaries abstract class and like the
41

41

00:03:03,200  -->  00:03:07,810
class that replaces it maps keys to
values, so a language dictionary is a
42

42

00:03:07,810  -->  00:03:12,090
classic example of a map with the keys
being the words in the dictionaries and
43

43

00:03:12,090  -->  00:03:13,950
the values being of course the
definition
44

44

00:03:13,950  -->  00:03:18,480
of the words now unfortunately the analogy falls a bit with the
45

45

00:03:18,480  -->  00:03:22,150
English language and the reason for that
is many English words have the same
46

46

00:03:22,150  -->  00:03:26,930
meanings, so the word put for example has
four different points two is a ver two
47

47

00:03:26,930  -->  00:03:27,910
is a noun
48

48

00:03:27,910  -->  00:03:34,010
now a java map cannot contain duplicate keys and each
key can only map to a single value
49

49

00:03:34,010  -->  00:03:37,690
so in the next few lectures we gonna have a look at the
two classes that implement the map interface
50

50

00:03:37,690  -->  00:03:42,340
And they are Hash Map as well as
Linked Hash Map in as well as going into
51

51

00:03:42,340  -->  00:03:47,030
Tree Map that implements the sorted map interface
52

52

00:03:47,030  -->  00:03:51,690
now maps like all the core collection
interfaces are generic they take two types
53

53

00:03:51,690  -->  00:03:55,450
one for the key and one for the value
know it is possible to use raw maps
54

54

00:03:55,450  -->  00:04:00,200
where the types aren’t specified but as we've seen in the
lectures in generics this isn't a good idea
55

55

00:04:00,200  -->  00:04:04,720
So what I’m going to do I’m going to start with
an example using hash map to store descriptions
56

56

00:04:04,720  -->  00:04:10,370
of a few computer languages so I go back to college IntelliJ
57

57

00:04:10,370  -->  00:04:16,950
And we create a new class name and notice I got collections code open
58

58

00:04:16,950  -->  00:04:21,840
so for now we're going to be using the same project
were just going to create a new file in here
59

59

00:04:21,840  -->  00:04:31,690
so new java class he was gonna call this map
and what we are going to do is to add a public static
60

60

00:04:31,690  -->  00:04:37,500
void main so we can actually run our code so we can do psvm and press tab
61

61

00:04:37,500  -->  00:04:40,560
and that creates the definition for us
automatically as you can see on the
62

62

00:04:40,560  -->  00:04:41,630
screen
63

63

00:04:41,630  -->  00:04:47,970
so let go on ahead and type some coding now so
we are going start creating our map object
64

64

00:04:47,970  -->  00:04:53,880
so… ,
65

65

00:04:53,880  -->  00:04:57,610
we are getting an error there because I need to change my language level
66

66

00:04:57,610  -->  00:05:04,530
but will see how i go, so…
67

67

00:05:04,530  -->  00:05:12,830
and just looking at the error, ok I see what the problem is here now
and what i was gonna do is restart the
68

68

00:05:12,830  -->  00:05:15,560
video but I think I might be better to
just to show you this scenario
69

69

00:05:15,560  -->  00:05:21,040
how to get out of it so what
I've done there I use the name map
70

70

00:05:21,040  -->  00:05:25,620
To be the name of the class and I'm trying
to add a variable called map as well
71

71

00:05:25,620  -->  00:05:28,910
what we can do to get out of that is
two ways firstly we can
72

72

00:05:28,910  -->  00:05:30,910
refactor it we can just click on that
73

73

00:05:30,910  -->  00:05:36,380
refactor, rename, that's probably the quickest way
to rename the class to get out it
74

74

00:05:36,380  -->  00:05:40,700
but the other thing we could also do is
we could do something like…
75

75

00:05:40,700  -->  00:05:50,580
…and we could put…
76

76

00:05:50,580  -->  00:05:58,580
… do something like that and that should actually fix the problem so if you run into
a situation again where you've used a
77

77

00:05:58,580  -->  00:06:02,970
reserved word for a class name this is a way
to get around it by typing in the
78

78

00:06:02,970  -->  00:06:07,400
actual name and by typing in the
complete declaration if you happen to
79

79

00:06:07,400  -->  00:06:11,960
know what the package name is you can fix that, with that said
I'm going to changes this anyway
80

80

00:06:11,960  -->  00:06:16,500
because it's just gonna save a bit of typing
so refactor, rename I'm gonna call this
81

81

00:06:16,500  -->  00:06:22,850
map program and then I can actually
remove the definition here at this point
82

82

00:06:22,850  -->  00:06:30,240
and just delete and java will come up and ask do you mean this import java.util yes thats the one
83

83

00:06:30,240  -->  00:06:36,280
so moving on we have defined a map with two generic parameters there a string
84

84

00:06:36,280  -->  00:06:40,500
that's the key and the value
that's the types and the objects we
85

85

00:06:40,500  -->  00:06:46,440
are gonna be using and to add something we
just add… and we can start with…
86

86

00:06:46,440  -->  00:06:56,330
and we can say a compile high level, object-orientated platform
87

87

00:06:56,330  -->  00:07:07,930
independent language, so lets add a few more
languages so we are gonna do… and again the first
88

88

00:07:07,930  -->  00:07:11,870
parameter in there is the key and the second is
89

89

00:07:11,870  -->  00:07:14,250
the value associated with it
90

90

00:07:14,250  -->  00:07:26,440
so we type… Python, and interpreted object-orientated high-level programming language
91

91

00:07:26,440  -->  00:07:55,960
with dynamic semantics, ok so… Algol, an algorithmic language, and I’ll do a couple more… BASIC, YES I’m not to
92

92

00:07:55,960  -->  00:08:01,810
proud to admit that and of course that’s
beginners all-purpose symbolic
93

93

00:08:01,810  -->  00:08:21,060
instruction code, and one more lets do Lisp, and will say Lisp, therein lies madness, ok thats our languages and that has stored
94

94

00:08:21,060  -->  00:08:31,130
each of those references a key and value
pair into the map object and I made a typo there
95

95

00:08:31,130  -->  00:08:35,640
so how to retrieve them?
well we obviously certainly using the
96

96

00:08:35,640  -->  00:08:39,700
put we retrieve them using a get so
we can to type in something like
97

97

00:08:39,700  -->  00:08:49,800
languages… and if we run that
98

98

00:08:49,800  -->  00:08:55,310
I need to right-click this first and run the
new program so it gives us an option to run it on here
99

99

00:08:55,310  -->  00:09:01,080
so run that first and you can see that we've
compiled high-level object-oriented
100

100

00:09:01,080  -->  00:09:07,380
platforming language which was clearly the setting the value
I should say that we define for Java
101

101

00:09:07,380  -->  00:09:08,090
so that's good
102

102

00:09:08,090  -->  00:09:10,530
and obviously if you want to get access
to the other ones you have to do the
103

103

00:09:10,530  -->  00:09:14,630
same thing you have to specify that the key
and by default .get returns the value
104

104

00:09:14,630  -->  00:09:20,000
associated with the key so that's good but one
important feature of maps is the keys are
105

105

00:09:20,000  -->  00:09:24,800
unique so in other words if you try and
use a value again what happens is the
106

106

00:09:24,800  -->  00:09:29,580
new value gets overwritten now you don't
get an error but the the new or old
107

107

00:09:29,580  -->  00:09:38,580
gets overwritten, so we put languages…
108

108

00:09:38,580  -->  00:09:50,780
lets put java again… and put this course is about Java, and now if we reprint it again
109

109

00:09:50,780  -->  00:09:58,180
after doing the change and run that, you
can see what happened there
110

110

00:09:58,180  -->  00:10:01,390
we didn’t get an error it didn’t come up with it already exist or  anything but clearly what's
111

111

00:10:01,390  -->  00:10:04,590
happened it's overwritten the value so
that's the important thing to remember
112

112

00:10:04,590  -->  00:10:09,690
is that for a particularly key can only be
one value and if you try and insert more
113

113

00:10:09,690  -->  00:10:15,090
than ones using the put more the once then
the value gets overwritten, now the put method itself
114

114

00:10:15,090  -->  00:10:19,160
can be used to tell if a value is being
added for the first time it can be
115

115

00:10:19,160  -->  00:10:23,160
useful in certain circumstances to know
that the reason it returns the
116

116

00:10:23,160  -->  00:10:27,380
previous value if the was one so, we changes
lines here to show you what I mean
117

117

00:10:27,380  -->  00:10:32,590
lets changes this two here and instead of just
putting the language put will put a System.out
118

118

00:10:32,590  -->  00:10:41,660
there, will around it in that like that will do the same for the Lisp as well
119

119

00:10:41,660  -->  00:10:53,330
So were now surroundings that in brackets and if we comment this out briefly and run this again now we got the returned object null
120

120

00:10:53,330  -->  00:10:57,150
for both cases and that essentially
means is that this was a brand new
121

121

00:10:57,150  -->  00:11:02,380
reference a brand new key value pair
that was added to the dictionary but again
122

122

00:11:02,380  -->  00:11:06,430
if we know un comment this again
123

123

00:11:06,430  -->  00:11:14,810
and run this again, actually what I’ll do is I’ll comment this out we don’t need those
124

124
00:11:11,560 --> 00:11:21,120
those are just print outs but what I want to
show you is this line here System out print out
124

125

00:11:24,370  -->  00:11:28,490
results of running that, you should find it because we've
added java the first time on line
125

126

00:11:28,490  -->  00:11:34,300
13 when do it again on line 20 we should get a different response, so we run this
126

127

00:11:34,300  -->  00:11:37,160
and you see what happens with that
printout we actually get the version
127

128

00:11:37,160  -->  00:11:42,330
the value that already existed prior to this
being added so the lines gets process
128

129

00:11:42,330  -->  00:11:47,170
the line 20 output, if we actually this line out
129

130

00:11:47,170  -->  00:11:52,180
so we can print it we will find that the value has been changed, so its changed
130

131

00:11:52,180  -->  00:11:55,930
as you can see but has returned what previous value was, so this is just a way for you to determine
131

132

00:11:55,930  -->  00:12:00,770
whether you need to know that a value is being added for the first time that how you go
132

133

00:12:00,770  -->  00:12:05,220
about doing it, so that's obviously helpful to tell
you what the previous value was but it
133

134

00:12:05,220  -->  00:12:08,830
didn't prevent you from adding it, in other
words it's still got added whether or not
134

135

00:12:08,830  -->  00:12:14,190
you wanted to or not so if you do want
to determine an unpragmatically only
135

136

00:12:14,190  -->  00:12:19,990
add a key if it's not already there we can
do that as well and we go about that is used the
136

137

00:12:19,990  -->  00:12:24,110
contains key method to check to see
whether it exists
137

138

00:12:24,110  -->  00:12:30,440
so we could do something, so I just delete that line now, and up here we put something
like if…
138

139

00:12:30,440  -->  00:12:45,200
…I can print…Java is already in the map…else…
139

140

00:12:45,200  -->  00:12:48,510
that where we can put our languages put again
140

141

00:12:48,510  -->  00:12:53,980
and fix it like that, so that would be a way
to pragmaticly ensure that your only adding an
141

142

00:12:53,980  -->  00:13:00,160
item once and its never gonna be
overridden by adding it a second time to
142

143

00:13:00,160  -->  00:13:04,390
check in that works we run it
java is already on the map has come up
143

144

00:13:04,390  -->  00:13:08,130
successfully and told us that and just to be
really hundred percent sure we can
144

145

00:13:08,130  -->  00:13:10,250
also put something here
145

146

00:13:10,250  -->  00:13:16,400
if…Java…
146

147

00:13:16,400  -->  00:13:27,840
Java already exists…else…and we can just put the java line in there, and obviously its pretty clear that
147

148

00:13:27,840  -->  00:13:32,170
should return the normal
message, the else here, because we just
148

149

00:13:32,170  -->  00:13:37,010
created the map on line 12 but just to confirm that it does anyway and I didn’t
149

150

00:13:37,010  -->  00:13:48,360
put a message there i need to put message there to say, Java added successfully and of course we added code on line 16
150

151

00:13:48,360  -->  00:13:54,280
but we didn’t put any message on the screen, so run again,  Java added
successfully and the two nulls
151

152

00:13:54,280  -->  00:14:02,150
relating to basic enlist and we got Java on the map down the bottom line
on line 25 so that's how you go about doing
152

153

00:14:02,150  -->  00:14:07,600
that there's also another method called put if absent and
153

154

00:14:07,600  -->  00:14:11,000
that's only gonna add to the
map if the key is not already present but
154

155

00:14:11,000  -->  00:14:14,390
that's really intended to prevent
concurrency issues that one thread does
155

156

00:14:14,390  -->  00:14:19,470
not add to the map only for that entry to be
overwritten by another thread, so it doesn't help in the null case
156

157

00:14:19,470  -->  00:14:20,240
because it will overwrite
157

158

00:14:20,240  -->  00:14:24,300
keys with no values now the other thing
we can do is we can also remove items
158

159

00:14:24,300  -->  00:14:29,350
from the map but before doing that would
be really useful to print our maps contents
159

160

00:14:29,350  -->  00:14:32,900
so that we can checked that the item are gone when we remove
them one way to do that is to look
160

161

00:14:32,900  -->  00:14:37,860
through the keys in a map using the key
set method and it returns a set of all the keys
161

162

00:14:37,860  -->  00:14:42,210
and we are going to cover sets in detail
later in this section so all we doing
162

163

00:14:42,210  -->  00:14:45,450
here in this code I’m writing is looping through the contents of the
163

164

00:14:45,450  -->  00:14:57,530
set of keys case so what I’m going to do is add
some code, so right down here… print out…lets just add some equals signs to separate
164

165

00:14:57,530  -->  00:15:02,910
our code like so and let's go use the key set method so to
165

166

00:15:02,910  -->  00:15:12,720
print out all our keys and values we can put…
166

167

00:15:12,720  -->  00:15:16,960
and you can see that returns a set, and will be taking about sets in
167

168

00:15:16,960  -->  00:15:18,450
this section
168

169

00:15:18,450  -->  00:15:24,350
and we can do something like…
169

170

00:15:24,350  -->  00:15:32,130
and that’s gonna loop
170

171

00:15:32,130  -->  00:15:35,990
through the map and return all the values so lets run that to confirm that it does work
171

172

00:15:35,990  -->  00:15:43,810
and we go through and they all work fine, and in with the code in line
172

173

00:15:43,810  -->  00:15:48,830
25 we didn’t redo Java, so java is already being added once, so
173

174

00:15:48,830  -->  00:15:52,770
the result is showing the original
interpretation of Java because we've
174

175

00:15:52,770  -->  00:15:56,790
added some code to pragmatically check to
see whether Java exists and we printed the message
175

176

00:15:56,790  -->  00:16:00,920
we didn't actually updated so that's
what its showing the original one but as you can see that's
176

177

00:16:00,920  -->  00:16:06,030
going through the list of objects printing up the
key and also the associated values
177

178

00:16:06,030  -->  00:16:09,780
now if you looked at that there is no specific
order there, bviously the order does not
178

179

00:16:09,780  -->  00:16:14,350
relate to how we entered them the first time because we started of
179

180

00:16:14,350  -->  00:16:18,080
with Java which is still does in this case two dozen this case but
basic obviously wasn't at the top of the list
180

181

00:16:18,080  -->  00:16:22,600
it still towards the bottom and there's no guarantee
181

182

00:16:22,600  -->  00:16:26,940
in ordering I guess what I'm saying with the hash map so
the key has appeared in the order we added
182

183

00:16:26,940  -->  00:16:31,680
nor in alphabetical order and that's the thing to point out
with it with default hash map is you can’t
183

184

00:16:31,680  -->  00:16:35,310
presume that objects are gonna
184

185

00:16:35,310  -->  00:16:38,870
return to you in the correct order so I’m to finish this video here in
185

186

00:16:38,870  -->  00:16:44,840
the next video we are going to talk
about ways to remove items from maps and
186

187

00:16:44,840  -->  00:16:48,240
look at some other bits and pieces
relating to getting the most out of
187

188

00:16:48,240  -->  00:16:49,760
maps so see you in that next video
