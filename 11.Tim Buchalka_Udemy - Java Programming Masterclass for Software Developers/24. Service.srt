1
1

00:00:04,460  -->  00:00:10,100
alright so let's implement this employee
service class i'm going to come over to
2

2

00:00:10,100  -->  00:00:15,260
sample right click click on new select
java class and we'll call this one
3

3

00:00:15,260  -->  00:00:28,790
employee service it needs to extends....
4

4

00:00:28,790  -->  00:00:33,380
...
5

5

00:00:33,380  -->  00:00:40,340
...like so
6

6

00:00:40,340  -->  00:00:48,170
making sure that i'm using the javafx
version of these service all right and
7

7

00:00:48,170  -->  00:00:55,240
we need to create a task so we're going
to use to create task method control I
8

8

00:00:55,240  -->  00:01:02,710
and select that so that's created the
task instead of returning null we're
9

9

00:01:02,710  -->  00:01:14,420
going to return here new......and then we need
10

10

00:01:14,420  -->  00:01:21,460
to implement the core method so control I again press enter because we
11

11

00:01:21,460  -->  00:01:24,950
want to return the observable list of type
12

12

00:01:24,950  -->  00:01:31,360
string and create or override the
call method and what that's going to do is
13

13

00:01:31,360  -->  00:01:35,140
use the code that we've defined
controller in the initialize i'm just
14

14

00:01:35,140  -->  00:01:39,590
going to grab all the code starting with
the string array declaration down to
15

15

00:01:39,590  -->  00:01:41,710
and including the return employees
16

16

00:01:41,710  -->  00:01:45,890
copy that go back to employees service
and i'm just going
17

17

00:01:45,890  -->  00:01:50,060
selected paste over the top of that
return null with our code as you can
18

18

00:01:50,060  -->  00:01:54,920
see and that's added the relevant
imports automatically for us and we've
19

19

00:01:54,920  -->  00:02:00,320
now got our code and then I just to make
this valid need to put a semicolon there
20

20

00:02:00,320  -->  00:02:05,860
to close off the create task method that
we created or to be more precise the new
21

21

00:02:05,860  -->  00:02:08,060
task that we created here on line 14
22

22

00:02:08,060  -->  00:02:14,480
alright so the employees service will
now return the employee names now all
23

23

00:02:14,480  -->  00:02:17,840
we've done here is moved the task
declaration from the
24

24

00:02:17,840  -->  00:02:22,810
initialize method and dropped it inside the
create task method now when we start the
25

25

00:02:22,810  -->  00:02:28,310
service the jvm will call the create
task method to create the task the
26

26

00:02:28,310  -->  00:02:32,260
service will run now instead of
declaring a task variable in the
27

27

00:02:32,260  -->  00:02:36,730
controller though we have to declare the
service variable let's go back to the
28

28

00:02:36,730  -->  00:02:41,150
controller and before you do to much more
we're going to comment out this code
29

29

00:02:41,150  -->  00:02:45,500
that's in the initialize method because
again we move that to the employees
30

30

00:02:45,500  -->  00:02:50,510
service class instead comment that out
we won't be using that and that last line we
31

31

00:02:50,510  -->  00:02:56,420
need to comment out as well and what I can
actually do is just undo that change and
32

32

00:02:56,420  -->  00:03:01,510
everything within the initialize i'm
going to comment out there excluding the
33

33

00:03:01,510  -->  00:03:06,140
last three references which
are linking or data binding the various
34

34

00:03:06,140  -->  00:03:09,680
properties so I'm going to leave that code in everything else i'm gonna comment out as you can
35

35

00:03:09,680  -->  00:03:13,160
see they're all right so we need to
declare this task variable in the
36

36

00:03:13,160  -->  00:03:17,660
controller so let's go ahead and do that
and we will add that just above the
37

37

00:03:17,660  -->  00:03:24,730
initialize method actually that's going
to be private.....
38

38

00:03:24,730  -->  00:03:31,700
....
39

39

00:03:31,700  -->  00:03:37,480
.....now in the initialization
40

40

00:03:37,480  -->  00:03:41,690
method this is where we're going to
create service instance rather than the
41

41

00:03:41,690  -->  00:03:45,700
task instance i've commented that
appetizer as you saw me do so just now below
42

42

00:03:45,700  -->  00:03:50,200
that to commented out code before the
data binding of the various tasks
43

43

00:03:50,200  -->  00:03:59,450
properties we type...and
44

44

00:03:59,450  -->  00:04:02,320
technically what we should do to be
consistent here is we can also remove
45

45

00:04:02,320  -->  00:04:05,590
task from here because we're not going
to be using that i'm going to delete
46

46

00:04:05,590  -->  00:04:11,260
that out what that means is we need to
change these references here where it's
47

47

00:04:11,260  -->  00:04:15,790
task.progress property task.
message property and that will need to
48

48

00:04:15,790  -->  00:04:20,450
be serviced instead so....
49

49

00:04:20,450  -->  00:04:23,870
....
50

50

00:04:23,870  -->  00:04:28,640
the last thing we need to do is down
here for the button press method
51

51

00:04:28,640  -->  00:04:31,130
instead of starting a thread
52

52

00:04:31,130  -->  00:04:37,580
we need to start the service so we just
change that to the service....
53

53

00:04:37,580  -->  00:04:44,300
....so you can see we've now
completely swapped out the task out of
54

54

00:04:44,300  -->  00:04:48,710
the controller all that codes is now in the
employee service and when the button is
55

55

00:04:48,710  -->  00:04:53,540
pressed we're going to start the service
that we defined here on line 49 and we
56

56

00:04:53,540  -->  00:04:58,220
should be good to go so let's just run
it and we should get the same results we
57

57

00:04:58,220  -->  00:05:03,980
got with the previous example when the
task was in the controller let's try again
58

58

00:05:03,980  -->  00:05:10,250
you can see that worked perfectly
with the same results when we had the
59

59

00:05:10,250  -->  00:05:14,150
task in the controller the difference
here is of course we're using a service
60

60

00:05:14,150  -->  00:05:18,470
to run the task rather than directly
creating a thread and this is the
61

61

00:05:18,470  -->  00:05:24,440
recommended way to work with tasks in
javafx now we can use tasks directly but
62

62

00:05:24,440  -->  00:05:30,680
using a service allows the javafx
runtime to manage threads for us now
63

63

00:05:30,680  -->  00:05:33,860
what happens if we actually
already got this once i click on get
64

64

00:05:33,860  -->  00:05:37,430
employee names again and when we do that
65

65

00:05:37,430  -->  00:05:42,860
oops we actually get an error here i'm
going to close it down and looking at
66

66

00:05:42,860  -->  00:05:48,020
the error invocation target exception
and if you scroll down and have a bit of
67

67

00:05:48,020  -->  00:05:52,130
a look I'm just taking note of the messages down here on the bottom
68

68

00:05:52,130  -->  00:05:57,200
can only start service in the ready
state was in state succeeded in other
69

69

00:05:57,200  -->  00:06:01,190
words already processed and the service
had updated itself to the state of
70

70

00:06:01,190  -->  00:06:02,390
succeeded
71

71

00:06:02,390  -->  00:06:06,230
we're trying to run it again and that's
why we got an exception so we can
72

72

00:06:06,230  -->  00:06:10,340
restart the service multiple times but
it must actually be in the ready state
73

73

00:06:10,340  -->  00:06:15,050
when we start it when the service is
running and completed its task it's in the
74

74

00:06:15,050  -->  00:06:21,140
succeeded state so lets make a change
to the button action handler so that it
75

75

00:06:21,140  -->  00:06:25,850
checks the state of the service and then
resets the service as necessary so
76

76

00:06:25,850  -->  00:06:28,760
our code sort of obviously very simple at
the moment the button press method
77

77

00:06:28,760  -->  00:06:37,250
let's change that here to do a test so....
78

78

00:06:37,250  -->  00:06:42,800
....
79

79

00:06:43,370  -->  00:06:51,440
....and then
we can follow that up with the service....
80

80

00:06:51,440  -->  00:07:01,370
....and otherwise...
81

81

00:07:01,370  -->  00:07:16,700
.....so the code here should be if services
82

82

00:07:16,700  -->  00:07:21,920
in the succeeded state we just reset it
and then start it otherwise
83

83

00:07:21,920  -->  00:07:26,210
if its in the ready state we're just going
to start it and if its in any other state
84

84

00:07:26,210  -->  00:07:30,440
we're not going to do anything so it was
already running it means the users
85

85

00:07:30,440  -->  00:07:34,250
mashing the button so the service
could also be in a failed scheduled or
86

86

00:07:34,250  -->  00:07:38,810
cancelled state and if the service
failed or scheduled then we wouldn't want
87

87

00:07:38,810  -->  00:07:41,610
to start it again and if it was cancelled
88

88

00:07:41,610  -->  00:07:45,170
we could reset it and start it again but
since there's no way to cancel the
89

89

00:07:45,170  -->  00:07:49,460
service in our application we are not going
to check for it in the code we could
90

90

00:07:49,460  -->  00:07:52,250
add a cancel button to the
interface that would let the user cancel
91

91

00:07:52,250  -->  00:07:54,500
the task when it takes too long
92

92

00:07:54,500  -->  00:07:58,070
let's just run that confirm that it does
work then we can run multiple times now
93

93

00:07:58,070  -->  00:08:06,770
click on get employee names that works
the first time so it will now be in the
94

94

00:08:06,770  -->  00:08:14,690
succeeded states if we run again you can
see we can't get into trouble then
95

95

00:08:14,690  -->  00:08:17,840
clicking multiple times and I was clicking
it while it was still going
96

96

00:08:17,840  -->  00:08:22,160
it's ignoring those extra clicks and
still processing that current 1 so the
97

97

00:08:22,160  -->  00:08:28,910
service is working well now the service
class has got methods that allow us to
98

98

00:08:28,910  -->  00:08:33,500
run code every time the state of the
service changes so what we could do is
99

99

00:08:33,500  -->  00:08:37,620
hide the progress bar and label when the
application is initialized then perhaps
100

100

00:08:37,620  -->  00:08:41,750
when the server state changes to a
running we can show them and when it
101

101

00:08:41,750  -->  00:08:46,050
changes to succeeded will hide them
again so let's add the following code to
102

102

00:08:46,050  -->  00:08:51,020
the initialize method to
implement that so after the service
103

103

00:08:51,020  -->  00:08:56,520
equals new employee when we set up we are going
to start by putting....
104

104

00:08:56,520  -->  00:09:03,000
.....and I can just press enter there
105

105

00:09:03,000  -->  00:09:09,300
it should create the code for us so its
created the handler for us so in there
106

106

00:09:09,300  -->  00:09:17,430
this is when the services running
going to do....
107

107

00:09:17,430  -->  00:09:20,910
true and we're also going to do
108

108

00:09:20,910  -->  00:09:26,130
oops too many a parentheses there
and we're going to do progress...
109

109

00:09:26,130  -->  00:09:32,040
....and just before I
continue I need to actually put this
110

110

00:09:32,040  -->  00:09:36,780
code above that this should be below
that code because you want this service
111

111

00:09:36,780  -->  00:09:41,760
to be initialized and the various
progress bars and so forth to be
112

112

00:09:41,760  -->  00:09:46,290
declared and setup before i'm putting this code in so I'm going to just put their
113

113

00:09:46,290  -->  00:09:49,500
as I have done their which probably makes
more sense putting it there anyway so
114

114

00:09:49,500  -->  00:09:51,270
that's if the service is running
115

115

00:09:51,270  -->  00:09:54,690
let's add another one the next one will
be if the services succeed so....
116

116

00:09:54,690  -->  00:09:57,690
....
117

117

00:09:58,230  -->  00:10:04,680
....
118

118

00:10:04,680  -->  00:10:09,300
and this one is when it succeeded we want
to hide the progress bar....
119

119

00:10:09,300  -->  00:10:20,910
.....we also wanted do a progress label.....then
120

120

00:10:20,910  -->  00:10:27,510
outside of that so when its run for the
first time we want to do....
121

121

00:10:27,510  -->  00:10:35,610
....
122

122

00:10:35,610  -->  00:10:39,690
....so in other words we've written
the code here whether
123

123

00:10:39,690  -->  00:10:44,070
the service changes to running or succeeded
but we also when this form is
124

124

00:10:44,070  -->  00:10:48,690
initialized by default we setting
visibility off to false for the progress
125

125

00:10:48,690  -->  00:10:49,740
bar on the label
126

126

00:10:49,740  -->  00:10:52,740
let's try that and see if it works
127

127

00:10:55,550  -->  00:10:58,550
alright so we don't see the progress bar
initially and obviously we can't confirm
128

128

00:10:58,550  -->  00:11:02,000
about the label because it wasn't
showing any way until we actually click
129

129

00:11:02,000  -->  00:11:07,940
the button but let's just try running
this clicking on the button you can
130

130

00:11:07,940  -->  00:11:11,270
see that did work the label was there as
was a progress bar then they're both
131

131

00:11:11,270  -->  00:11:16,490
changed and click it again now same
thing there that it's actually showing
132

132

00:11:16,490  -->  00:11:18,290
when it's working and its hiding
133

133

00:11:18,290  -->  00:11:22,730
once we finish processing once the
state's changed now there is also just
134

134

00:11:22,730  -->  00:11:26,540
to let you know there's a set on method
for each possible service state so you
135

135

00:11:26,540  -->  00:11:29,810
can actually track all of those you know cancelled if you wanted to schedule etc
136

136

00:11:29,810  -->  00:11:34,550
now remember that we remember that
I said when we are tying 2 things together
137

137

00:11:34,550  -->  00:11:38,840
meaning that we want one thing to change
when the other thing changes we should
138

138

00:11:38,840  -->  00:11:42,620
always check the documentation to see if
we can accomplish what we want to do
139

139

00:11:42,620  -->  00:11:44,630
by binding properties together
140

140

00:11:44,630  -->  00:11:48,920
well in this case we're tying the
visibility of the progress bar and label
141

141

00:11:48,920  -->  00:11:54,050
to the running state of the service so
can we bind the two things together
142

142

00:11:54,050  -->  00:11:56,480
rather than using a set on method
143

143

00:11:56,480  -->  00:12:01,160
why yes yes we can so we can delete
the code that we've just added and
144

144

00:12:01,160  -->  00:12:05,540
replace it with a much simpler way of
doing it so close this down and will
145

145

00:12:05,540  -->  00:12:20,030
temporarily comment out that code and also
comment out these two lines here so we could
146

146

00:12:20,030  -->  00:12:28,100
do instead is we could put progress bar.....and we can bind that
147

147

00:12:28,100  -->  00:12:33,560
too .bind to service.running
how cool is that
148

148

00:12:34,940  -->  00:12:43,160
and likewise for progress label...
149

149

00:12:43,160  -->  00:12:47,870
.....so now we're
binding the visibility of the progress
150

150

00:12:47,870  -->  00:12:53,060
bar and label to the running state of
the service only when the running state
151

151

00:12:53,060  -->  00:12:57,050
of services set so depending on the
value of the running properly that's
152

152

00:12:57,050  -->  00:13:00,950
going to be reflected in the visible
property for both our progress bar and
153

153

00:13:00,950  -->  00:13:04,970
label let's just try running that
should give us the same results
154

154

00:13:07,690  -->  00:13:13,660
and you can see we got the same results
on the screen there you can see that i
155

155

00:13:13,660  -->  00:13:19,690
compared to the code that i commented
out the binding the binding of
156

156

00:13:19,690  -->  00:13:24,460
properties is much cleaner and also uses
a lot less code and of course we still
157

157

00:13:24,460  -->  00:13:27,640
often need to use the set on methods
because we wouldn't always be able to
158

158

00:13:27,640  -->  00:13:32,050
accomplish what we wanted to do by just
binding it the code to the services
159

159

00:13:32,050  -->  00:13:34,480
running property but if you are doing
something that's relatively
160

160

00:13:34,480  -->  00:13:38,560
straightforward you can see that
it's a more elegant solution using a lot
161

161

00:13:38,560  -->  00:13:43,750
less code so one last note note here
before we leave services if you want to
162

162

00:13:43,750  -->  00:13:48,520
pass parameters to the task that the
service runs we have to expose those
163

163

00:13:48,520  -->  00:13:53,950
parameters as properties of the service
sub class now since
164

164

00:13:53,950  -->  00:13:59,020
properties are a general java
topic and not a javafx topic we won't
165

165

00:13:59,020  -->  00:14:02,710
discuss how to do that in this lecture
but i just wanted to make you aware that
166

166

00:14:02,710  -->  00:14:07,270
it is possible to pass information to
the task by adding properties to the
167

167

00:14:07,270  -->  00:14:08,560
server sub class
168

168

00:14:08,560  -->  00:14:13,840
alright so thanks for following
along in this lecture and for java
169

169

00:14:13,840  -->  00:14:18,670
concurrency in general so now that we've
been through so much of this java
170

170

00:14:18,670  -->  00:14:24,280
concurrency information it's time to put
into practice of what we've learn and
171

171

00:14:24,280  -->  00:14:28,150
we're going to start in the next video
with some code challenges to hopefully
172

172

00:14:28,150  -->  00:14:32,440
solidify your understanding of a java
concurrency to see you in the next video
