WEBVTT
1
1

00:00:05.210  -->  00:00:10.370
ok so continuing on with our example in the main method we just finishing
2

2

00:00:10.370  -->  00:00:15.170
off the code so that we can actually test
this we're going to add....
3

3

00:00:15.170  -->  00:00:22.640
....and we're going to
4

4

00:00:22.640  -->  00:00:30.410
set this up initially for worker one
then we're going to do a new....
5

5

00:00:31.000  -->  00:00:36.020
....then in the run method we're
going to do worker...
6

6

00:00:36.640  -->  00:00:40.760
...
7

7

00:00:40.760  -->  00:00:45.230
...and of course we're going to
8

8

00:00:45.230  -->  00:00:50.830
add .start at the end of the thread
to make it to kick off and do the same
9

9

00:00:50.830  -->  00:00:57.100
for the second one's so new thread.....and we're going to do worker
10

10

00:00:57.100  -->  00:00:59.740
2 this time....
11

11

00:00:59.740  -->  00:01:06.980
....
12

12

00:01:06.980  -->  00:01:11.240
at this point we've created 2 worker
instances and then we created a
13

13

00:01:11.240  -->  00:01:16.570
thread for each instance and started the
threads when we construct the worker
14

14

00:01:16.570  -->  00:01:20.210
instances where passing true for active
you can probably guess what's going to
15

15

00:01:20.210  -->  00:01:24.250
happen here given what we spoke about in
the last video when we ran it and yes
16

16

00:01:24.250  -->  00:01:27.920
this is a contrived example but it does
illustrate a live lock
17

17

00:01:28.460  -->  00:01:34.960
so let's run just to see what happens and
as we expect since both workers are
18

18

00:01:34.960  -->  00:01:38.930
active both keep handing the shared
resource to the other thread and can't
19

19

00:01:38.930  -->  00:01:40.390
actually make any progress
20

20

00:01:40.390  -->  00:01:44.570
so just move this over a little
bit more so it's giving the resource to
21

21

00:01:44.570  -->  00:01:45.320
the other one
22

22

00:01:45.320  -->  00:01:49.490
and if you recall with our code we went
to get this message
23

23

00:01:49.490  -->  00:01:53.680
working on the common resource if we got
to the stage of actually working
24

24

00:01:54.200  -->  00:01:58.490
but we're not getting that and that's
because neither of them is blocked
25

25

00:01:58.490  -->  00:02:02.860
they're both constantly running or live
so hence the name live lock rather than
26

26

00:02:02.860  -->  00:02:03.920
deadlock
27

27

00:02:03.920  -->  00:02:07.720
when none of the threads can run so we
have to stop this application manually
28

28

00:02:10.640  -->  00:02:13.780
now a solution to this is going to
depend on the code
29

29

00:02:13.780  -->  00:02:17.750
there isn't actually a solution where
one size fits all answer here but now
30

30

00:02:17.750  -->  00:02:21.830
that we know about live lock we'll have in mind when we
31

31

00:02:21.830  -->  00:02:27.170
write code that uses multiple threads
and there doesn't have to be a loop
32

32

00:02:27.170  -->  00:02:31.040
anytime threads have to wait for other
threads to complete something they don't
33

33

00:02:31.040  -->  00:02:32.480
block while they wait
34

34

00:02:32.480  -->  00:02:35.480
there's a potential for live lock
35

35

00:02:36.510  -->  00:02:41.040
so the next potential problem that can
arise in a multi-threaded application is
36

36

00:02:41.040  -->  00:02:42.840
called a slip condition
37

37

00:02:42.840  -->  00:02:46.890
now this is a specific type of race condition also known as a thread
38

38

00:02:46.890  -->  00:02:49.590
interference or also known as thread
interference
39

39

00:02:49.590  -->  00:02:53.700
this can occur when a thread can be
suspended between reading a condition
40

40

00:02:53.700  -->  00:02:56.700
and acting upon that condition
41

41

00:02:57.730  -->  00:03:01.950
let's say we've got two threads reading
from a buffer each thread does the
42

42

00:03:01.950  -->  00:03:03.310
following one
43

43

00:03:03.310  -->  00:03:08.260
check the status 2 if it's okay it reads
data from the buffer three
44

44

00:03:08.260  -->  00:03:13.200
if the data is end of file it sends the
status to the end of file and terminates if
45

45

00:03:13.200  -->  00:03:16.200
the data isn't end of file it sets the
status to ok
46

46

00:03:18.300  -->  00:03:22.230
now if we haven't synchronized the code
properly the following can happen
47

47

00:03:22.770  -->  00:03:27.840
one thread one checks the status and
gets ok then it suspends thread 2 check
48

48

00:03:27.840  -->  00:03:29.790
the status and gets ok
49

49

00:03:29.790  -->  00:03:34.230
it reads end of file from the buffer and
sets the status to end of file then
50

50

00:03:34.230  -->  00:03:37.260
terminates thread one runs again
51

51

00:03:37.260  -->  00:03:41.370
it tries to read data from the buffer
but oops there's no data is thrown an
52

52

00:03:41.370  -->  00:03:44.370
exception or crashes
53

53

00:03:46.080  -->  00:03:49.620
because the threads can interfere with
each other when checking and setting the
54

54

00:03:49.620  -->  00:03:54.360
condition thread one tried to do
something based on obsolete information
55

55

00:03:54.360  -->  00:03:59.640
when a check the status it was ok but by
the time it acted upon the condition it
56

56

00:03:59.640  -->  00:04:05.460
checked the status has been updated by
thread 2 now unfortunately thread one
57

57

00:04:05.460  -->  00:04:10.260
doesn't see the updated information and
because of that does something erronous
58

58

00:04:13.020  -->  00:04:16.110
so we're not going to code an example
because we've already seen plenty of
59

59

00:04:16.110  -->  00:04:19.770
examples of thread interference but we
can see how the sequence of events have
60

60

00:04:19.770  -->  00:04:22.110
just described will cause a problem
61

61

00:04:22.110  -->  00:04:26.490
so a slip condition is a particular
type of race condition
62

62

00:04:26.490  -->  00:04:30.210
the solution to this is the same as it
is forward literally any type of thread
63

63

00:04:30.210  -->  00:04:35.220
interference use synchronized blocks or
locks to synchronize the critical
64

64

00:04:35.220  -->  00:04:38.330
section of code
65

65

00:04:38.330  -->  00:04:38.950
now if the
66

66

00:04:38.950  -->  00:04:42.250
code is already synchronized then
sometimes the placement of the
67

67

00:04:42.250  -->  00:04:46.720
synchronization may be causing the
problem when using multiple locks the
68

68

00:04:46.720  -->  00:04:51.580
order in which the locks can be acquired
can also result in a slip condition
69

69

00:04:51.580  -->  00:04:56.710
so that's it for common problems that
can occur when working with threads so
70

70

00:04:56.710  -->  00:04:59.740
next we're going to take a look at a few
thread related topics that we haven't
71

71

00:04:59.740  -->  00:05:02.950
yet covered so we'll see you in the next
video
