1
1

00:00:04,610  -->  00:00:08,480
so now that we've added this call and
created a new callable class
2

2

00:00:08,480  -->  00:00:11,480
lets actually run this and see what
happens
3

3

00:00:13,280  -->  00:00:22,460
so we can see here that our producer and
consumer threads run and then the callable
4

4

00:00:22,460  -->  00:00:27,080
code the callable doesn't run
while the producer is sleeping and the
5

5

00:00:27,080  -->  00:00:30,560
consumers are looping because when we
created the service
6

6

00:00:30,560  -->  00:00:35,090
we passed three to the method and so the
service only allows three active threads
7

7

00:00:35,090  -->  00:00:35,960
at a time
8

8

00:00:35,960  -->  00:00:40,700
consequently the callable had to wait
till the other methods are finished
9

9

00:00:40,700  -->  00:00:44,030
let's change that to five just to see
what happens we're going to come back up
10

10

00:00:44,030  -->  00:00:48,820
to the definition on here and we'll
change that instead to 5
11

11

00:00:48,820  -->  00:00:57,710
let's run it and notice immediately that we see
the callable code run straightaway right
12

12

00:00:57,710  -->  00:01:01,910
at the top of the screen and the output
so clearly it the number of threads that
13

13

00:01:01,910  -->  00:01:05,420
we've allocated to our thread poll made a
difference and enabled the callable
14

14

00:01:05,420  -->  00:01:10,130
code to run as well as our producer and
consumer tasks so there is a lot more to
15

15

00:01:10,130  -->  00:01:13,610
working with executor services in the
future objects and i'll leave it up to
16

16

00:01:13,610  -->  00:01:17,600
you to explore this topic further good
place to start that would be the
17

17

00:01:17,600  -->  00:01:21,860
executive service documentation so I
just bring that up on the screen and
18

18

00:01:21,860  -->  00:01:26,930
browser the link will be in the resources
section you can check that out and you can
19

19

00:01:26,930  -->  00:01:30,200
find out more information about the
executor service
20

20

00:01:30,200  -->  00:01:33,890
so before we leave our introduction to some of what's available in the
21

21

00:01:33,890  -->  00:01:36,470
java.util.concurrent package
22

22

00:01:36,470  -->  00:01:41,090
let's take a quick look at an example of
another set of classes available in the
23

23

00:01:41,090  -->  00:01:44,990
package that allows us to simplify our
application considerably
24

24

00:01:45,530  -->  00:01:50,840
now the package contains thread-safe
queues which a perfect for a producer
25

25

00:01:50,840  -->  00:01:54,770
consumer type applications for
or situations like we've got with our
26

26

00:01:54,770  -->  00:01:55,720
current code
27

27

00:01:55,720  -->  00:01:59,290
now all the queue classes implement
the blocking queue interface
28

28

00:01:59,290  -->  00:02:04,340
so we are going to change our example to use
an array blocking queue now it processes
29

29

00:02:04,340  -->  00:02:07,540
elements in a FIFO order that stands
for first in first out
30

30

00:02:08,110  -->  00:02:11,530
and that's exactly what we want here
because our consumers is always
31

31

00:02:11,530  -->  00:02:14,140
remove the first element of the array
list
32

32

00:02:14,140  -->  00:02:16,970
so let's go back and look at changing
some code
33

33

00:02:16,970  -->  00:02:20,720
first we're going to change the main
method we're going to create an instance
34

34

00:02:20,720  -->  00:02:23,510
of array blocking queue rather than a array list
35

35

00:02:23,510  -->  00:02:28,160
so close down the run window and our
code here on line 15 will change that
36

36

00:02:28,160  -->  00:02:33,380
so again instead of a array list is
going to be an array
37

37

00:02:33,380  -->  00:02:37,160
blocking queue so change this so...
38

38

00:02:39,320  -->  00:02:46,940
....as a result
of doing this we no longer need our
39

39

00:02:46,940  -->  00:02:47,960
buffer lock
40

40

00:02:47,960  -->  00:02:54,440
i'm going to delete that...
41

41

00:02:54,440  -->  00:02:56,950
....because we're no longer have that
42

42

00:02:56,950  -->  00:03:01,280
ultimately we need to change our classes
as well to accommodate that change
43

43

00:03:01,790  -->  00:03:04,790
scrolling down a little bit and looking
at our producer code
44

44

00:03:05,330  -->  00:03:08,450
it's now a lot easier let's code now
45

45

00:03:08,450  -->  00:03:12,530
so we're going to change this to this
list to instead being array blocking
46

46

00:03:12,530  -->  00:03:14,420
queue list
47

47

00:03:14,420  -->  00:03:20,450
we're going to delete our re-entrant lock our buffer lock we're going to change
48

48

00:03:20,450  -->  00:03:27,590
the constructor as well so.....
49

49

00:03:27,590  -->  00:03:34,480
....which we no longer need then...
50

50

00:03:34,480  -->  00:03:38,390
....now incidentally array blocking queues are
51

51

00:03:38,390  -->  00:03:42,650
bounded and that means that we have to
pass in the number of elements the arrays
52

52

00:03:42,650  -->  00:03:47,290
should be able to hold its capacity in
other words to the constructor that
53

53

00:03:47,290  -->  00:03:51,950
don't grow like arrays lists do now
since the producer could potentially
54

54

00:03:51,950  -->  00:03:57,170
add the strings 1 to 5 and in a file before
any consumers have a chance to remove
55

55

00:03:57,170  -->  00:03:58,160
elements
56

56

00:03:58,160  -->  00:04:01,580
we're going to create a array blocking queue
that can hold six elements
57

57

00:04:01,580  -->  00:04:04,480
so probably should have done that earlier
so go back up to the top where we
58

58

00:04:04,480  -->  00:04:07,100
defined it and I set that up there
59

59

00:04:07,100  -->  00:04:10,100
to 6
60

60

00:04:11,770  -->  00:04:16,270
and for our run method that's now going
to be dramatically simplified we're
61

61

00:04:16,270  -->  00:04:22,090
going to remove the buffer lock code
going to come down here and we're going
62

62

00:04:22,090  -->  00:04:24,820
to leave our try loop in but we're going
to change it a little bit so what we're
63

63

00:04:24,820  -->  00:04:32,590
going to do is leave the adding then we
just need to put buffer....
64

64

00:04:33,280  -->  00:04:39,940
we don't need any of this other
catch block code in there will leave the
65

65

00:04:39,940  -->  00:04:44,770
sleep in there and we'll leave in the
interrupted exception to catch because we
66

66

00:04:44,770  -->  00:04:48,100
still need to do that in case the thread
is interrupted
67

67

00:04:48,100  -->  00:04:52,930
moving on down we're going to delete the
buffer lock down here we're going to
68

68

00:04:52,930  -->  00:04:56,710
leave the try block but that's instead
of an add its going to be a put...which is
69

69

00:04:56,710  -->  00:05:03,190
how we add an element to an array blocking queue going to get rid of the
70

70

00:05:03,190  -->  00:05:07,480
unlock which was for the old buffer lock
which we removed
71

71

00:05:07,480  -->  00:05:11,740
i'm going to change that to an
interrupted exception...
72

72

00:05:11,740  -->  00:05:15,760
...I won't put any code for now
73

73

00:05:16,360  -->  00:05:19,750
so that's now our new my producer
code
74

74

00:05:20,320  -->  00:05:23,740
so the blocking queue in this case the
array blocking queue
75

75

00:05:23,740  -->  00:05:29,140
you can see that we're using .put and
we also use remove and take methods as
76

76

00:05:29,140  -->  00:05:29,680
well
77

77

00:05:29,680  -->  00:05:33,670
now the add and remove methods would
throw an exception if the operation can't
78

78

00:05:33,670  -->  00:05:37,450
be performed immediately because in
other threads got the queue locked the
79

79

00:05:37,450  -->  00:05:40,510
put and take methods will block when
the queue is locked so that's the reason
80

80

00:05:40,510  -->  00:05:44,350
I'm using a put there is that it will
automatically block for us rather than
81

81

00:05:44,350  -->  00:05:45,850
throwing an exception
82

82

00:05:45,850  -->  00:05:50,890
now the same applies when the queue is
full or empty the add and remove methods
83

83

00:05:50,890  -->  00:05:54,280
were thrown exception and the put and
take methods will just do a block
84

84

00:05:54,850  -->  00:05:58,390
now if we didn't want to check for the
end of file string without removing
85

85

00:05:58,390  -->  00:06:01,720
it from the queue we wouldn't need to
call is empty anymore
86

86

00:06:01,720  -->  00:06:07,330
we could instead just call take and
block until something's in the queue but
87

87

00:06:07,330  -->  00:06:11,140
the method we used to check for end of
file doesn't block so we still need to
88

88

00:06:11,140  -->  00:06:13,840
take elements off the queue using 2
method calls
89

89

00:06:13,840  -->  00:06:17,770
checking for empty and actually removing
an element when the queue is empty now
90

90

00:06:17,770  -->  00:06:21,190
we want the producers and consumers to
block when the queue is locked by
91

91

00:06:21,190  -->  00:06:22,210
another thread
92

92

00:06:22,210  -->  00:06:25,780
and that's why I'm using the put method
to add elements to the queue and shortly
93

93

00:06:25,780  -->  00:06:29,500
when I update the consumer class i'm
going to use the take method to remove
94

94

00:06:29,500  -->  00:06:30,660
elements from the queue
95

95

00:06:30,660  -->  00:06:34,560
you might also be wondering about
synchronization with put well we don't
96

96

00:06:34,560  -->  00:06:38,470
have to worry about synchronizing calls
to put because it's a thread safe method
97

97

00:06:38,470  -->  00:06:42,130
so we don't need to put a synchronized
block or a lock objects and that's why i
98

98

00:06:42,130  -->  00:06:43,500
was able to remove that
99

99

00:06:43,500  -->  00:06:48,340
so you can see that by doing that
greatly simplifies the producer code but
100

100

00:06:48,340  -->  00:06:52,060
we still need to leave the catching
because thread can be interrupted while
101

101

00:06:52,060  -->  00:06:55,630
it's blocked on a put call so we have to
handle interrupted
102

102

00:06:55,630  -->  00:07:00,370
exceptions when we do call put all right
so let's move on to the consumer code
103

103

00:07:00,370  -->  00:07:03,780
and update that
104

104

00:07:03,780  -->  00:07:06,550
so I'm going to get rid of buffer lock all
together because you won't be using that
105

105

00:07:06,550  -->  00:07:16,500
we need to change list to....
106

106

00:07:16,500  -->  00:07:30,070
....
107

107

00:07:30,070  -->  00:07:34,720
...we can greatly simplify this as well
108

108

00:07:34,720  -->  00:07:37,720
we got an if in there at the moment so
we're just going to remove the if
109

109

00:07:44,570  -->  00:07:52,220
.....i'm going to do a first
we are gonna check if buffer is empty
110

110

00:07:52,220  -->  00:07:55,610
we only need to do the continue we don't need to do
anything extra there
111

111

00:07:55,610  -->  00:08:00,230
what we can do here actually lets just remove the counter we
112

112

00:08:00,230  -->  00:08:03,230
don't really need to do that anymore we
saw how that worked previously and i'll
113

113

00:08:03,230  -->  00:08:06,170
delete the printouts of the counter
114

114

00:08:06,170  -->  00:08:10,250
instead of using buffer.get we're
going to use buffer.peak
115

115

00:08:11,300  -->  00:08:18,080
so if buffer.peak we don't need to specify the
element if that equals end of
116

116

00:08:18,080  -->  00:08:21,350
file then we do the normal processing to
exit
117

117

00:08:22,010  -->  00:08:27,530
else what we're going to do is we're
going to remove the item we're going to
118

118

00:08:27,530  -->  00:08:37,090
use .take remembering that take
actually blocks for us automatically so
119

119

00:08:37,090  -->  00:08:47,840
instead of a finally what we want to do
is catch the interrupted exception and I
120

120

00:08:47,840  -->  00:08:54,170
can just delete the rest of that code
and leave that one also for our while
121

121

00:08:54,170  -->  00:08:54,800
loop
122

122

00:08:54,800  -->  00:08:58,070
so you can see that I've now remove the
locking code as well as the counting
123

123

00:08:58,070  -->  00:09:03,230
code and i'm using the tape method to
remove elements and you might be
124

124

00:09:03,230  -->  00:09:06,140
wondering how come we don't need to
specify the element anymore
125

125

00:09:06,140  -->  00:09:10,430
this is in the .take method and
also in the .peak method well
126

126

00:09:10,430  -->  00:09:14,870
remembering that the array blocking queue is
a FIFO queue first in first out
127

127

00:09:14,870  -->  00:09:18,320
so we don't need to specify that we want
the first element it automatically knows
128

128

00:09:18,320  -->  00:09:19,640
to take that element out
129

129

00:09:19,640  -->  00:09:23,600
speaking of the peak method when we
check for end of file using that method
130

130

00:09:23,600  -->  00:09:27,410
and let's just look at the next element
without actually removing it from the
131

131

00:09:27,410  -->  00:09:28,190
queue
132

132

00:09:28,190  -->  00:09:31,610
remember that we need to leave the end
of file in the queue for the other
133

133

00:09:31,610  -->  00:09:34,610
consumer the peak method doesn't block
when the queue is empty
134

134

00:09:35,210  -->  00:09:39,050
it returns null and that's why we still have to
check to see whether the queue is empty
135

135

00:09:39,050  -->  00:09:42,050
so let's run this and see what happens
136

136

00:09:44,770  -->  00:09:47,810
notice that we've got an error there and
that's probably gonna be a null pointer
137

137

00:09:47,810  -->  00:09:50,830
exception...
138

138

00:09:51,680  -->  00:09:55,690
depending on timing in might or might
not see this null pointer exception in the
139

139

00:09:55,690  -->  00:09:59,770
consumer code and you might need to re run it
to see that that comes up
140

140

00:09:59,770  -->  00:10:03,820
so why are we getting this error in the
consumer code as you can see that we
141

141

00:10:03,820  -->  00:10:08,930
were crushing on line 93 which is
clearly part of our consumer class now
142

142

00:10:08,930  -->  00:10:12,920
isn't the queue thread-safe so why are
we actually getting this error well
143

143

00:10:12,920  -->  00:10:17,120
remember that thread safe means that we
can be confident that our call to one of
144

144

00:10:17,120  -->  00:10:21,620
the class methods will complete before
another thread can run a method in the
145

145

00:10:21,620  -->  00:10:26,740
class so the producer code only
calls the put method and the code
146

146

00:10:26,740  -->  00:10:30,230
following the put doesn't depend on the
result of the put
147

147

00:10:30,230  -->  00:10:33,940
however in the consumer code what we're
doing is we check to see if the queue is
148

148

00:10:33,940  -->  00:10:34,630
empty
149

149

00:10:34,630  -->  00:10:39,980
if it isn't we then peak at the next
element but the consumer thread can be
150

150

00:10:39,980  -->  00:10:46,610
suspended between calling is empty and
calling peak while it suspended the
151

151

00:10:46,610  -->  00:10:50,950
other consumer thread can run and take
the next element from the queue when the
152

152

00:10:50,950  -->  00:10:55,370
suspended consumer thread runs again
peak returns null and consequently we
153

153

00:10:55,370  -->  00:10:59,080
get a null pointer exception when we
call the equals method and that's what
154

154

00:10:59,080  -->  00:11:02,800
happened in this scenario because you
can see that the errors on line 93
155

155

00:11:02,800  -->  00:11:08,120
which is the peak method so what that all
means is that we may still have to add
156

156

00:11:08,120  -->  00:11:12,250
synchronization code when using
thread-safe classes like array blocking
157

157

00:11:12,250  -->  00:11:13,000
queue
158

158

00:11:13,000  -->  00:11:19,000
so let's add a synchronized block and
synchronized on the queue so the best
159

159

00:11:19,000  -->  00:11:29,050
place to put that would be under the
while and put synchronized....
160

160

00:11:29,050  -->  00:11:32,050
then we'll put the rest of our code in
that synchronize block
161

161

00:11:34,540  -->  00:11:44,700
run that and we're just running a
few times just to be sure that we're not
162

162

00:11:44,700  -->  00:11:55,020
going to be getting that null pointer
exception any more one more time so we
163

163

00:11:55,020  -->  00:11:58,420
can see that our application is now not
throwing any exceptions
164

164

00:11:58,420  -->  00:12:03,490
so we still need some synchronization
but by using one of the queues in the java
165

165

00:12:03,490  -->  00:12:05,010
util concurrent package
166

166

00:12:05,010  -->  00:12:08,380
we didn't have to synchronize the
producer code at all
167

167

00:12:08,380  -->  00:12:12,270
so that's it for the java.util.concurrent package
168

168

00:12:12,270  -->  00:12:16,540
there are lots of classes and interfaces
in the package so definitely take a look
169

169

00:12:16,540  -->  00:12:20,110
at what's available when you need to
synchronize code especially when you're
170

170

00:12:20,110  -->  00:12:23,640
working with an application that's going
to be using a lot of threads so in the
171

171

00:12:23,640  -->  00:12:26,740
next video we're going to look at some
common problems that can arise when
172

172

00:12:26,740  -->  00:12:27,790
using threads
173

173

00:12:27,790  -->  00:12:28,830
see you in the next video
