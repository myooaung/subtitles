1
1

00:00:05,180  -->  00:00:10,060
so we went through some of the drawbacks
to using synchronized blocks and I
2

2

00:00:10,060  -->  00:00:14,900
talked just at the end of the last video
about another way of using or
3

3

00:00:14,900  -->  00:00:18,590
preventing thread interference and
that's by using classes that implement
4

4

00:00:18,590  -->  00:00:23,240
the java.util.concurrent.locks lock interface
5

5

00:00:23,240  -->  00:00:26,900
so this package contains several
implementations of the lock interface
6

6

00:00:26,900  -->  00:00:27,920
that we can use
7

7

00:00:27,920  -->  00:00:32,750
and as we're about to see the lock
implementations that java provide don't
8

8

00:00:32,750  -->  00:00:34,940
have the drawbacks that
9

9

00:00:34,940  -->  00:00:40,390
I outlined in the previous video about
that synchronized blocks have so let's
10

10

00:00:40,390  -->  00:00:44,960
change our application now to use a lock
object we use an instance of the
11

11

00:00:44,960  -->  00:00:48,890
reentrant lock class so let's go have a
look at that we're going to close this
12

12

00:00:48,890  -->  00:00:56,600
down so I'm going to add a line just
after the buffer in our main method
13

13

00:00:56,600  -->  00:01:07,390
re-entrant lock to call this one buffer
lock equals....
14

14

00:01:07,390  -->  00:01:13,100
now you can probably guess by the
name that this lock is reentrant if its
15

15

00:01:13,100  -->  00:01:17,210
thread is already holding a reentrant
lock when it reaches the code that requires
16

16

00:01:17,210  -->  00:01:22,100
the same lock it can continue executing
it doesn't have to obtain the lock again
17

17

00:01:22,100  -->  00:01:26,780
now that might sound as if it should be a
given but to in fact not all
18

18

00:01:26,780  -->  00:01:31,150
implementations of the lock interface
are re-entrant so we are going to create the lock
19

19

00:01:31,150  -->  00:01:34,880
instances as I have done their on line 15 and
we're going to share that with the
20

20

00:01:34,880  -->  00:01:40,150
producer and the consumer remember that
all the threads have to be competing for
21

21

00:01:40,150  -->  00:01:43,460
the same lock to prevent thread
interference
22

22

00:01:43,460  -->  00:01:47,090
i'm going to create an instance of that
in the main method as you saw me do and
23

23

00:01:47,090  -->  00:01:50,420
we have to pass the lock to the producer
and consumer instances
24

24

00:01:50,420  -->  00:01:55,280
let's do that as well....
25

25

00:01:56,740  -->  00:02:01,570
....
26

26

00:02:02,220  -->  00:02:05,560
let's then change the classes that the producer and the consumer
27

27

00:02:05,560  -->  00:02:13,920
classes we want to add a private...
28

28

00:02:13,920  -->  00:02:22,510
so that so we can store that in our
class will change the constructor...
29

29

00:02:22,510  -->  00:02:27,940
....
30

30

00:02:27,940  -->  00:02:34,660
....the next let's look at our run method
31

31

00:02:35,290  -->  00:02:38,860
so we're going to do first is take out
the synchronize blocks that we
32

32

00:02:38,860  -->  00:02:41,560
previously added or we added in the
previous video
33

33

00:02:41,560  -->  00:02:44,560
....
34

34

00:02:51,260  -->  00:02:55,700
ok so how do we actually use this
buffer lock it turns out it's quite
35

35

00:02:55,700  -->  00:03:01,180
simple so we just come up to the code
above where we had the synchronized code
36

36

00:03:01,180  -->  00:03:04,060
and we just type in buffer lock
37

37

00:03:04,060  -->  00:03:08,260
....then execute the buffer.add
38

38

00:03:08,260  -->  00:03:14,360
then we do....then we'll come down and do exactly the same
39

39

00:03:14,360  -->  00:03:22,250
thing in the end of file after the
system that out to print line...
40

40

00:03:22,250  -->  00:03:32,620
...so very similar to
the synchronized block in that we are
41

41

00:03:32,620  -->  00:03:36,980
surrounding the code that we ultimately
want to be thread-safe to avoid thread
42

42

00:03:36,980  -->  00:03:39,920
interference with .lock and .unlock
43

43

00:03:39,920  -->  00:03:43,730
that's for the code for the producer
class and just want to clarify something
44

44

00:03:43,730  -->  00:03:48,260
here that we're using the lock method to
acquire the lock and the unlock method
45

45

00:03:48,260  -->  00:03:52,940
to release the lock but this is very
important when using lock objects
46

46

00:03:52,940  -->  00:03:56,870
we're responsible for releasing the lock
it won't happen automatically it doesn't
47

47

00:03:56,870  -->  00:04:00,010
happen automatically as it would when we
use the synchronized block
48

48

00:04:00,530  -->  00:04:04,540
so the intrinsic locks we use with
synchronized blocks are always released
49

49

00:04:04,540  -->  00:04:08,620
when the thread holding the lock exits
the synchronized block
50

50

00:04:08,620  -->  00:04:12,340
so this is one drawback to using lock
objects in that we have to manage this
51

51

00:04:12,340  -->  00:04:16,310
lock process themselves by making sure
we call the .lock and the unlock
52

52

00:04:16,310  -->  00:04:21,380
methods now when a thread calls the lock
method it will either obtain the lock
53

53

00:04:21,380  -->  00:04:25,780
and continue executing or it won't be
able to get the lock because of thread
54

54

00:04:25,780  -->  00:04:27,110
already has it
55

55

00:04:27,110  -->  00:04:31,880
so in that case the thread that called lock
will be suspended until it can get that
56

56

00:04:31,880  -->  00:04:32,720
lock
57

57

00:04:32,720  -->  00:04:36,860
if we forget to release the lock threads
waiting for the lock will then start
58

58

00:04:36,860  -->  00:04:38,120
blocking forever
59

59

00:04:38,120  -->  00:04:42,650
so in our producers as you saw the code I've
just changed their we get the lock
60

60

00:04:42,650  -->  00:04:46,460
before we added a number string after
adding the string we then release the
61

61

00:04:46,460  -->  00:04:51,320
lock and the same goes for when we get
the end of file indicator so lets go
62

62

00:04:51,320  -->  00:04:57,080
and do similar change now to our consumer
class and we need to add our private...
63

63

00:04:57,080  -->  00:05:01,430
....
64

64

00:05:02,520  -->  00:05:26,850
....
65

65

00:05:27,600  -->  00:05:31,080
instead we're going to do after the
while true
66

66

00:05:31,080  -->  00:05:37,560
you guessed it buffer....and write down at the end after the last
67

67

00:05:37,560  -->  00:05:44,460
statement has been executed...
68

68

00:05:44,460  -->  00:05:49,650
so you've seen here we've essentially
replace the synchronized statement with
69

69

00:05:49,650  -->  00:05:53,940
a call to lock and replace the end of
the synchronized block with a call to
70

70

00:05:53,940  -->  00:05:54,690
unlock
71

71

00:05:54,690  -->  00:06:01,920
so let's run and see what happens and we
can see that there's a problem and this
72

72

00:06:01,920  -->  00:06:06,660
could depend on timing because you might
find this all sort of running on a
73

73

00:06:06,660  -->  00:06:10,140
little bit further but in this case it's
done as a suspected it would
74

74

00:06:10,140  -->  00:06:14,190
the producer adds the first string you
can see that the output is indicated that
75

75

00:06:14,190  -->  00:06:18,900
happen then nothing happens for quite a
while and then eventually I will leave it long
76

76

00:06:18,900  -->  00:06:22,260
enough we should probably get a maximum
lock count exceeded message with an
77

77

00:06:22,260  -->  00:06:24,900
exception and may or may not come out
78

78

00:06:24,900  -->  00:06:29,580
come on but the bottom there it is there
now so does take some time but what
79

79

00:06:29,580  -->  00:06:31,860
happened and i'll just move that over so
you can see that message a bit more
80

80

00:06:31,860  -->  00:06:37,770
maximum lock count exceeded so clearly
we've got a problem with this code as it
81

81

00:06:37,770  -->  00:06:38,970
stands
82

82

00:06:38,970  -->  00:06:42,420
so what actually going on at this
point
83

83

00:06:43,140  -->  00:06:46,440
well we got the consumer
code on the screen
84

84

00:06:46,440  -->  00:06:52,080
now looking at the produce lock code
again it seems to be pretty well okay
85

85

00:06:52,080  -->  00:06:54,870
because we got a lock and then
were performing that one line of code
86

86

00:06:54,870  -->  00:06:56,910
and then unlocking we're doing that
87

87

00:06:56,910  -->  00:07:00,270
obviously twice once to add the numbers
and once to add the end of file
88

88

00:07:00,270  -->  00:07:05,100
indicator but in the consumer code come
down there and have a look at that we
89

89

00:07:05,100  -->  00:07:08,580
enter the loop and then we get the lock
the lock is the first thing we do after
90

90

00:07:08,580  -->  00:07:09,630
entering the loop
91

91

00:07:09,630  -->  00:07:14,190
that's on line 74 we then check to
see if there's any data in the buffer
92

92

00:07:14,810  -->  00:07:19,490
if there is data we continue executing
the loop code if there isn't
93

93

00:07:19,490  -->  00:07:22,970
we loop back and get the lock again
because we're still holding the lock
94

94

00:07:22,970  -->  00:07:26,330
so you can you see what the problem is
here we've never released the lock as
95

95

00:07:26,330  -->  00:07:27,050
such
96

96

00:07:27,050  -->  00:07:31,790
so the buffer lock.unlock code is
never executed because that's only the
97

97

00:07:31,790  -->  00:07:36,080
moment written on line 84 after the
while loop exits
98

98

00:07:36,080  -->  00:07:40,730
when we were using a synchronized block
the lock was released because we exited
99

99

00:07:40,730  -->  00:07:45,130
the synchronized block when we return to
the beginning of the while loop by just
100

100

00:07:45,130  -->  00:07:49,910
exiting the synchronized block that
automatically released the lock but when we
101

101

00:07:49,910  -->  00:07:54,200
are using the lock object
ourselves we skip over the unlock code
102

102

00:07:54,200  -->  00:07:58,720
and keep getting the lock again and
again the problem here is this line 76
103

103

00:07:58,720  -->  00:08:02,840
we are continuing which essentially is
in calling this unlock code
104

104

00:08:02,840  -->  00:08:07,400
so re-entrant lock objects can keep
track of how many times they locked if the
105

105

00:08:07,400  -->  00:08:10,610
thread gets the same lock twice it has
to release it twice before another
106

106

00:08:10,610  -->  00:08:15,020
thread can get the lock and i just want
to give you a pseudo example of what I
107

107

00:08:15,020  -->  00:08:19,250
mean here we are just going to paste is
this code in but we won't need to do
108

108

00:08:19,250  -->  00:08:21,710
anything with it just so you can get an
idea of what I'm talking about
109

109

00:08:21,710  -->  00:08:27,410
so there's an example of what I'm
talking about so when method B calls
110

110

00:08:27,410  -->  00:08:28,220
unlock
111

111

00:08:28,220  -->  00:08:32,630
we wouldn't want any other threads to be
able to get lock one because method
112

112

00:08:32,630  -->  00:08:37,550
a still expect to be holding the lock
surrounded a section of code with lock
113

113

00:08:37,550  -->  00:08:43,070
and unlock because the code itself is a
critical section now because the same
114

114

00:08:43,070  -->  00:08:46,550
thread can acquire the same lock
multiple times
115

115

00:08:46,550  -->  00:08:51,260
the unlock method won't actually release
the lock until the lock count
116

116

00:08:51,260  -->  00:08:55,730
also known as also called the hold
count reaches zero so in our consumer
117

117

00:08:55,730  -->  00:09:00,140
case we get the lock so many times that
eventually we exceed the maximum lock
118

118

00:09:00,140  -->  00:09:01,310
count allowed
119

119

00:09:01,310  -->  00:09:05,720
also since we never release the lock the
producer is never able to add more data
120

120

00:09:05,720  -->  00:09:09,680
and that's why you saw it sitting there
sort of frozen after adding one item so
121

121

00:09:09,680  -->  00:09:17,120
just delete the code so clearly we need
to add more unlock statements to our
122

122

00:09:17,120  -->  00:09:18,740
consumer class
123

123

00:09:18,740  -->  00:09:23,300
we need one when the buffer is empty and
we continue the loop but we also need
124

124

00:09:23,300  -->  00:09:27,350
when we read end of file and break out
of the loop as well so let's add those
125

125

00:09:27,350  -->  00:09:33,380
statements again the first one here is
here after the test to see whether it's
126

126

00:09:33,380  -->  00:09:35,830
empty before the continued
127

127

00:09:35,830  -->  00:09:43,070
we're going to do a buffer lock....and also down here after the break before
128

128

00:09:43,070  -->  00:09:48,080
the break I should say we do a buffer....
129

129

00:09:48,680  -->  00:09:56,770
let's just run that to see what happens
so this you can see that we
130

130

00:09:56,770  -->  00:09:59,770
were successful application is behaving again
131

131

00:09:59,770  -->  00:10:03,290
so you might be thinking that you know
this could get messy and perhaps you
132

132

00:10:03,290  -->  00:10:06,890
should be sticking with synchronized
blocks we could have unlocked statement
133

133

00:10:06,890  -->  00:10:08,570
scattered throughout our code
134

134

00:10:08,570  -->  00:10:12,620
so our code and in doing that potentially
could be more error-prone and difficult
135

135

00:10:12,620  -->  00:10:13,550
to maintain
136

136

00:10:13,550  -->  00:10:17,570
but that's because we're not using locks
in the recommended way so i wanted to
137

137

00:10:17,570  -->  00:10:21,200
show you this so that we can see why we
always want to enclose the critical
138

138

00:10:21,200  -->  00:10:26,060
sections of code with a try finally
block but let's talk more about that in
139

139

00:10:26,060  -->  00:10:26,690
the next video
