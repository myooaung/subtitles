1
1

00:00:05,850  -->  00:00:08,320
- [Tim] Alright, so the last
video we finished off queries,
2

2

00:00:08,320  -->  00:00:11,800
and we've got our
application working okay,
3

3

00:00:11,800  -->  00:00:15,830
but how about inserts,
updates, and deletes of data.
4

4

00:00:15,830  -->  00:00:16,690
How do we go about doing that
5

5

00:00:16,690  -->  00:00:19,650
given that we only really
worked on queries today?
6

6

00:00:19,650  -->  00:00:22,080
So, we do handle them the
same way, but the question is,
7

7

00:00:22,080  -->  00:00:25,070
how and when do we update
the user interface?
8

8

00:00:25,070  -->  00:00:27,700
Usually we'll already be displaying data,
9

9

00:00:27,700  -->  00:00:28,770
and the user will do something
10

10

00:00:28,770  -->  00:00:31,040
that will add a new
record, update a record,
11

11

00:00:31,040  -->  00:00:34,230
or delete a record, there they
would think of it that way.
12

12

00:00:34,230  -->  00:00:36,850
In our case, they'd want
to update an artist name,
13

13

00:00:36,850  -->  00:00:38,550
perhaps to correct a spelling error
14

14

00:00:38,550  -->  00:00:39,700
or delete an artist
15

15

00:00:39,700  -->  00:00:41,200
because they gave away the only album
16

16

00:00:41,200  -->  00:00:42,690
they had by that artist
17

17

00:00:42,690  -->  00:00:44,230
or they'll want to add a new album,
18

18

00:00:44,230  -->  00:00:46,830
which could result in
also adding a new record
19

19

00:00:46,830  -->  00:00:48,490
to the artist's table.
20

20

00:00:48,490  -->  00:00:52,690
So, we wanna keep the
database and the UR in sync.
21

21

00:00:52,690  -->  00:00:54,890
There are a couple of ways to do this.
22

22

00:00:54,890  -->  00:00:57,300
The first is to re-querie the database
23

23

00:00:57,300  -->  00:01:00,580
after every successful
insert, update and delete.
24

24

00:01:00,580  -->  00:01:02,220
And when working with a small data set
25

25

00:01:02,220  -->  00:01:04,400
like the artist's table, that's okay,
26

26

00:01:04,400  -->  00:01:07,630
but for larger data sets,
it may not make sense.
27

27

00:01:07,630  -->  00:01:11,400
Now this is one area where it
will depend on the databases
28

28

00:01:11,400  -->  00:01:13,850
and application you're working on.
29

29

00:01:13,850  -->  00:01:14,680
So another alternative
30

30

00:01:14,680  -->  00:01:17,090
would be to perform the database operation
31

31

00:01:17,090  -->  00:01:19,870
and then manually update
the user interface.
32

32

00:01:19,870  -->  00:01:23,000
We wouldn't re-querie the
database, in our case,
33

33

00:01:23,000  -->  00:01:25,100
when doing an insert, we get the list
34

34

00:01:25,100  -->  00:01:26,930
the table view is displaying
35

35

00:01:26,930  -->  00:01:29,370
and add the new artist record.
36

36

00:01:29,370  -->  00:01:31,510
And because we're using data binding,
37

37

00:01:31,510  -->  00:01:33,240
when we add the new record to the list,
38

38

00:01:33,240  -->  00:01:36,510
it will then automatically
be displayed in the table.
39

39

00:01:36,510  -->  00:01:37,940
So that was for an insert.
40

40

00:01:37,940  -->  00:01:38,910
For an update,
41

41

00:01:38,910  -->  00:01:41,190
we kept the list the
table view is displaying,
42

42

00:01:41,190  -->  00:01:42,580
find the record,
43

43

00:01:42,580  -->  00:01:44,610
and update the field.
44

44

00:01:44,610  -->  00:01:46,350
Once again, because of data binding,
45

45

00:01:46,350  -->  00:01:48,840
the change will be reflected in the table.
46

46

00:01:48,840  -->  00:01:51,610
And lastly, for a delete,
same deal as insert,
47

47

00:01:51,610  -->  00:01:54,820
except I would actually delete the record.
48

48

00:01:54,820  -->  00:01:57,000
So, we'll update the user interface
49

49

00:01:57,000  -->  00:02:00,450
after the database operation
has successfully completed.
50

50

00:02:00,450  -->  00:02:02,530
Now if something is going to go wrong,
51

51

00:02:02,530  -->  00:02:05,940
it's more likely that the
database operation will fail.
52

52

00:02:05,940  -->  00:02:08,370
So we don't want to update
the user interface first,
53

53

00:02:08,370  -->  00:02:10,630
because if the database operation fails,
54

54

00:02:10,630  -->  00:02:14,140
the user interface will be
out of sync with the database.
55

55

00:02:14,140  -->  00:02:16,460
But if the database operation succeeds,
56

56

00:02:16,460  -->  00:02:19,220
but for some reason the
user interface update fails,
57

57

00:02:19,220  -->  00:02:21,110
that's not really as bad.
58

58

00:02:21,110  -->  00:02:22,780
The user won't see the change,
59

59

00:02:22,780  -->  00:02:25,210
but most likely there
will be a refresh button,
60

60

00:02:25,210  -->  00:02:26,460
either a new application,
61

61

00:02:26,460  -->  00:02:28,050
or the browser they're using,
62

62

00:02:28,050  -->  00:02:30,150
if they're using a web application,
63

63

00:02:30,150  -->  00:02:31,000
in which case though,
64

64

00:02:31,000  -->  00:02:34,390
they'd have to manually refresh
the data to see the change,
65

65

00:02:34,390  -->  00:02:36,110
just as we sometimes have to do that
66

66

00:02:36,110  -->  00:02:37,910
when using the sequel lite browser.
67

67

00:02:37,910  -->  00:02:39,400
And they don't even have to do this
68

68

00:02:39,400  -->  00:02:41,550
if the user interface update failed,
69

69

00:02:41,550  -->  00:02:45,000
and that would probably be pretty rare.
70

70

00:02:45,000  -->  00:02:47,670
So how does that all translate to code?
71

71

00:02:47,670  -->  00:02:49,150
So it would run the insert,
72

72

00:02:49,150  -->  00:02:51,370
the update would delete using a task,
73

73

00:02:51,370  -->  00:02:54,680
and then would run the UI
update using the task.set
74

74

00:02:54,680  -->  00:02:56,400
on succeeded method.
75

75

00:02:56,400  -->  00:02:59,190
So lets go ahead and do
that method of updating,
76

76

00:02:59,190  -->  00:03:02,370
and we're going to start by
coding an update example.
77

77

00:03:02,370  -->  00:03:05,340
Now, to avoid having
to code a dialogue box,
78

78

00:03:05,340  -->  00:03:06,690
we're gonna assume that the user wants
79

79

00:03:06,690  -->  00:03:10,090
to change the name of AC DC, AC space DC
80

80

00:03:10,090  -->  00:03:11,420
to AC slash DC.
81

81

00:03:12,910  -->  00:03:14,300
Now we're gonna assume that the user's
82

82

00:03:14,300  -->  00:03:16,170
pressed the button called update,
83

83

00:03:16,170  -->  00:03:18,060
we've displayed a dialogue box
84

84

00:03:18,060  -->  00:03:20,550
showing the current name
of the selected list,
85

85

00:03:20,550  -->  00:03:24,520
and then typed in AC slash DC
and pressed the okay button.
86

86

00:03:24,520  -->  00:03:26,880
Now, because we have the selected artist,
87

87

00:03:26,880  -->  00:03:28,930
we know what the artist ID is,
88

88

00:03:28,930  -->  00:03:31,280
and we'd use it to update
the appropriate record
89

89

00:03:31,280  -->  00:03:32,570
in the database,
90

90

00:03:32,570  -->  00:03:35,290
and we'd then update the
selected artist record
91

91

00:03:35,290  -->  00:03:37,460
and the table would update.
92

92

00:03:37,460  -->  00:03:39,610
Alright, so we need to
open our data source,
93

93

00:03:39,610  -->  00:03:41,220
and we need a new prepared statement
94

94

00:03:41,220  -->  00:03:43,050
and associated constants.
95

95

00:03:43,050  -->  00:03:45,220
And we also have to create
the prepared statements
96

96

00:03:45,220  -->  00:03:48,480
in the open method, and close
it in the closed method.
97

97

00:03:48,480  -->  00:03:51,230
Lets go ahead and do that.
98

98

00:03:51,230  -->  00:03:52,080
So to start off with,
99

99

00:03:52,080  -->  00:03:55,520
we want a string containing
our prepared statement,
100

100

00:03:55,520  -->  00:03:57,410
in fact through the sequel
code we're gonna be using.
101

101

00:03:57,410  -->  00:03:59,320
That's going to be PSF,
102

102

00:04:00,400  -->  00:04:02,830
and my course would update.
103

103

00:04:02,830  -->  00:04:03,750
Artist name
104

104

00:04:06,280  -->  00:04:08,450
equals this will be update
105

105

00:04:09,760  -->  00:04:12,510
space plus table and it's graphs.
106

106

00:04:13,440  -->  00:04:15,680
There would be a name here.
107

107

00:04:15,680  -->  00:04:19,050
Her top product, so string that will be.
108

108

00:04:19,050  -->  00:04:21,050
A table and its artists.
109

109

00:04:22,300  -->  00:04:25,730
Plus, space and set in double quotes,
110

110

00:04:25,730  -->  00:04:28,590
plus, there's gonna be column
111

111

00:04:28,590  -->  00:04:32,020
underscore artist underscore name.
112

112

00:04:32,020  -->  00:04:35,080
I'm sorry, plus in double quotes,
113

113

00:04:35,080  -->  00:04:37,310
space equals question mark space,
114

114

00:04:37,310  -->  00:04:40,230
where space, plus column artist ID.
115

115

00:04:42,190  -->  00:04:44,440
Plus equals question mark.
116

116

00:04:46,490  -->  00:04:49,640
Alright we want our
private prepared statement,
117

117

00:04:49,640  -->  00:04:52,720
that's gonna be private
prepared statement,
118

118

00:04:52,720  -->  00:04:56,880
and we're going to call
this one update artist name.
119

119

00:04:58,880  -->  00:05:00,760
Alright they are now open.
120

120

00:05:00,760  -->  00:05:04,500
Our method, we want to
put update artist name
121

121

00:05:04,500  -->  00:05:07,330
equals conn dot prepare statement.
122

122

00:05:09,560  -->  00:05:14,000
And there's going to be our
update underscore artist name
123

123

00:05:14,000  -->  00:05:16,960
and then for the close, the close method,
124

124

00:05:16,960  -->  00:05:19,570
just before we close the connexion,
125

125

00:05:19,570  -->  00:05:21,180
we'll test to see whether the
126

126

00:05:21,180  -->  00:05:24,050
update artist name
prepared statement is open.
127

127

00:05:24,050  -->  00:05:27,960
If the update artist name
is not equal to null,
128

128

00:05:29,240  -->  00:05:31,660
update artist name dot close.
129

129

00:05:33,550  -->  00:05:35,620
So basically, the update state
we're gonna be running here
130

130

00:05:35,620  -->  00:05:38,570
is gonna be update artists
131

131

00:05:38,570  -->  00:05:42,070
set name equals question mark space where,
132

132

00:05:43,260  -->  00:05:44,930
ID equals question mark.
133

133

00:05:44,930  -->  00:05:48,710
That's effectively what we've done here.
134

134

00:05:48,710  -->  00:05:51,610
Alright so next what we
need to do is add the method
135

135

00:05:51,610  -->  00:05:53,070
to update an artist name,
136

136

00:05:53,070  -->  00:05:56,170
which will be very similar to
methods you have already seen.
137

137

00:05:56,170  -->  00:05:57,910
So its going to accept the artist ID,
138

138

00:05:57,910  -->  00:05:59,740
and the new name as parameters,
139

139

00:05:59,740  -->  00:06:02,140
and return true if the update succeeded,
140

140

00:06:02,140  -->  00:06:03,470
and false otherwise.
141

141

00:06:03,470  -->  00:06:07,640
So were gonna write that
down at the end of the class.
142

142

00:06:08,880  -->  00:06:11,530
Actually what I'll do, we got some,
143

143

00:06:11,530  -->  00:06:13,880
I'll actually put it in
here after the insert album.
144

144

00:06:13,880  -->  00:06:14,710
Because insert,
145

145

00:06:14,710  -->  00:06:16,920
so technically we can get rid
of that method all together,
146

146

00:06:16,920  -->  00:06:18,200
but I won't do that now.
147

147

00:06:18,200  -->  00:06:20,940
That was relating to a previous app.
148

148

00:06:20,940  -->  00:06:22,870
But we're working on the non-gooey part
149

149

00:06:22,870  -->  00:06:25,520
of this music database,
150

150

00:06:25,520  -->  00:06:27,870
and of course we deleted the song classes
151

151

00:06:27,870  -->  00:06:29,600
earlier in the section.
152

152

00:06:29,600  -->  00:06:32,140
Alright so, the update artist name
153

153

00:06:32,140  -->  00:06:36,220
is going to be public
boolean update artist name,
154

154

00:06:38,400  -->  00:06:41,320
and we need an ID and the new name.
155

155

00:06:43,800  -->  00:06:45,060
Wanna try there,
156

156

00:06:45,060  -->  00:06:46,300
and we'll add the catch already,
157

157

00:06:46,300  -->  00:06:50,650
so the catch is going
to be SQL exception E,
158

158

00:06:50,650  -->  00:06:51,740
then we'll do
159

159

00:06:52,700  -->  00:06:54,350
bring out a message with query,
160

160

00:06:54,350  -->  00:06:57,430
and we'll put update failed
rather than query failed.
161

161

00:06:57,430  -->  00:07:00,430
Take failed, plus E dot get message.
162

162

00:07:02,270  -->  00:07:04,110
Then the actual code is going to be
163

163

00:07:04,110  -->  00:07:06,360
updateartistname.setstring.
164

164

00:07:08,270  -->  00:07:09,550
First one's going to be the IDs
165

165

00:07:09,550  -->  00:07:13,190
so its going to be one comma new name
166

166

00:07:13,190  -->  00:07:16,530
'cause the first parameter was new name,
167

167

00:07:17,770  -->  00:07:20,170
or rather the first part of that query
168

168

00:07:20,170  -->  00:07:23,800
if you go back to the top and have a look,
169

169

00:07:23,800  -->  00:07:25,390
we've got the first one here is
170

170

00:07:25,390  -->  00:07:28,420
where column artist name
equals and a question mark.
171

171

00:07:28,420  -->  00:07:29,760
So that's our first one we need to use
172

172

00:07:29,760  -->  00:07:31,290
and then the second
one is gonna be the ID,
173

173

00:07:31,290  -->  00:07:33,080
so that's right, we're in the right place,
174

174

00:07:33,080  -->  00:07:34,390
doing the right thing.
175

175

00:07:34,390  -->  00:07:35,630
So one's going to be the new name,
176

176

00:07:35,630  -->  00:07:38,880
and then update artist name dot set int
177

177

00:07:39,750  -->  00:07:41,220
for the second one for the key,
178

178

00:07:41,220  -->  00:07:43,970
for what the ID is to come up ID.
179

179

00:07:45,480  -->  00:07:47,560
Then int affected records
180

180

00:07:48,780  -->  00:07:52,430
is equal to update artist
name dot execute update
181

181

00:07:52,430  -->  00:07:53,930
'cause we're updating it obviously.
182

182

00:07:53,930  -->  00:07:57,830
And we gotta return, affected
records is equal to one.
183

183

00:07:57,830  -->  00:08:00,860
So returning true if we
only updated one record
184

184

00:08:00,860  -->  00:08:03,930
for the artist, otherwise false.
185

185

00:08:03,930  -->  00:08:06,720
Then right down here,
if we get down to here,
186

186

00:08:06,720  -->  00:08:09,220
well actually what we'll do is
187

187

00:08:10,610  -->  00:08:12,830
we'll put it in there, so return false.
188

188

00:08:12,830  -->  00:08:14,270
So we get an exception
we gotta return false
189

189

00:08:14,270  -->  00:08:17,110
because there was some sort
of problem updating it.
190

190

00:08:17,110  -->  00:08:19,440
Alright so that keeps intelliger happy.
191

191

00:08:19,440  -->  00:08:22,660
Alright so next we need
to update the vent handler
192

192

00:08:22,660  -->  00:08:25,200
for the update artist
button to the controller.
193

193

00:08:25,200  -->  00:08:26,270
And that's also gonna look similar
194

194

00:08:26,270  -->  00:08:27,260
to what we've done before,
195

195

00:08:27,260  -->  00:08:30,180
So let's go back to our controller,
196

196

00:08:31,070  -->  00:08:32,980
and we'll add the code.
197

197

00:08:37,640  -->  00:08:42,160
Like so, and it's gonna be public void
198

198

00:08:42,160  -->  00:08:43,330
update artist.
199

199

00:08:45,600  -->  00:08:46,960
Alright so the code for this is gonna be
200

200

00:08:46,960  -->  00:08:51,120
final artist artist, is equal to
201

201

00:08:52,750  -->  00:08:55,780
that's going to be casting as an artist,
202

202

00:08:55,780  -->  00:08:59,860
then it's artist table
dot get items dot get two.
203

203

00:09:02,960  -->  00:09:05,460
That's gonna be task, boolean,
204

204

00:09:11,440  -->  00:09:12,780
equals new task,
205

205

00:09:13,980  -->  00:09:15,770
and we're just going to press enter there,
206

206

00:09:15,770  -->  00:09:17,290
to get the code written for us.
207

207

00:09:17,290  -->  00:09:19,440
How I've written in method call,
208

208

00:09:19,440  -->  00:09:22,520
and we got a return here, data source
209

209

00:09:25,740  -->  00:09:28,990
dot get instance dot update artist name
210

210

00:09:30,120  -->  00:09:33,210
and we're gonna do artist dot get ID.
211

211

00:09:34,790  -->  00:09:39,240
And then we're going to have
the new name be AC slash DC.
212

212

00:09:39,240  -->  00:09:40,080
Like so.
213

213

00:09:41,650  -->  00:09:42,990
Finish that off.
214

214

00:09:46,250  -->  00:09:50,130
And once I wanna set up that
task dot set on succeeded
215

215

00:09:50,130  -->  00:09:52,630
so, task dot set on succeeded.
216

216

00:09:54,030  -->  00:09:55,780
So set up our lambda,
217

217

00:09:56,710  -->  00:09:58,750
lambda I should say.
218

218

00:09:58,750  -->  00:10:02,580
And its going to be if
task dot value property
219

219

00:10:04,600  -->  00:10:07,680
dot get, oops dot get that should be.
220

220

00:10:11,600  -->  00:10:14,080
Then in that case, we're gonna do artist
221

221

00:10:14,080  -->  00:10:15,080
dot set name
222

222

00:10:17,720  -->  00:10:19,220
ACDC with a slash.
223

223

00:10:21,440  -->  00:10:23,940
And artist table dot refresh.
224

224

00:10:27,040  -->  00:10:28,330
And of course, right down the bottom,
225

225

00:10:28,330  -->  00:10:30,090
all importantly, we need
to invoke the threads.
226

226

00:10:30,090  -->  00:10:31,260
So new thread,
227

227

00:10:32,670  -->  00:10:33,920
task dot start.
228

228

00:10:36,690  -->  00:10:38,860
Alright, so that's our
update artist method.
229

229

00:10:38,860  -->  00:10:40,780
Alright, so let's just
go through this briefly
230

230

00:10:40,780  -->  00:10:42,520
but we're actually done here.
231

231

00:10:42,520  -->  00:10:44,990
So first thing we're
getting the actual record
232

232

00:10:44,990  -->  00:10:46,300
that we wanna update.
233

233

00:10:46,300  -->  00:10:47,130
Now normally we'd get this
234

234

00:10:47,130  -->  00:10:49,890
by calling the table view selection model,
235

235

00:10:49,890  -->  00:10:50,960
and that would be the code
236

236

00:10:50,960  -->  00:10:53,950
that will actually look like this.
237

237

00:10:53,950  -->  00:10:54,780
And I'll actually leave this in here,
238

238

00:10:54,780  -->  00:10:58,110
so normally we'd do final artist, artist
239

239

00:10:59,190  -->  00:11:02,560
and you've seen this code
before, equals artist.
240

240

00:11:02,560  -->  00:11:06,230
Gonna be artist table
dot get selection model
241

241

00:11:06,230  -->  00:11:08,690
dot get selected item.
242

242

00:11:08,690  -->  00:11:10,030
So that would be what
we would normally do,
243

243

00:11:10,030  -->  00:11:11,920
but I'll comment that out.
244

244

00:11:11,920  -->  00:11:13,950
And again the reason that
we're doing it this way,
245

245

00:11:13,950  -->  00:11:16,220
with code on line 57,
246

246

00:11:16,220  -->  00:11:17,150
is we're simulating this
247

247

00:11:17,150  -->  00:11:18,650
to avoid having to create a dialogue
248

248

00:11:18,650  -->  00:11:20,230
that accepts a new name.
249

249

00:11:20,230  -->  00:11:23,260
But, as an optional exercise
you can go ahead and do that.
250

250

00:11:23,260  -->  00:11:25,390
Then we can see from the
data being displayed,
251

251

00:11:25,390  -->  00:11:27,130
or we will be able to see that shortly,
252

252

00:11:27,130  -->  00:11:29,530
that AC DC is in position three,
253

253

00:11:29,530  -->  00:11:32,240
so we're gonna get that record
from the table views items,
254

254

00:11:32,240  -->  00:11:34,670
which will actually be index two.
255

255

00:11:34,670  -->  00:11:38,830
So let's just run that to
confirm that that is the case.
256

256

00:11:42,890  -->  00:11:45,100
Okay, so there's AC DC,
it's the third element,
257

257

00:11:45,100  -->  00:11:46,990
the third entry in the table view,
258

258

00:11:46,990  -->  00:11:48,590
and it's going to be
in index position two,
259

259

00:11:48,590  -->  00:11:50,670
so that's where the
dot get two comes from,
260

260

00:11:50,670  -->  00:11:51,950
and notice that it doesn't got a slash
261

261

00:11:51,950  -->  00:11:53,500
in the name at the moment.
262

262

00:11:53,500  -->  00:11:55,580
Alright so we'll close that down.
263

263

00:11:55,580  -->  00:11:57,840
So when we run the task
that we've defined,
264

264

00:11:57,840  -->  00:11:59,860
it's going to be calling
the update artist name,
265

265

00:11:59,860  -->  00:12:01,630
passing the ID.
266

266

00:12:01,630  -->  00:12:04,630
So it's passing the ID which
from this entry alone 57,
267

267

00:12:04,630  -->  00:12:06,020
so we know that's the right one.
268

268

00:12:06,020  -->  00:12:07,390
And we're passing the new name
269

269

00:12:07,390  -->  00:12:10,440
which is gonna have a slash
between the AC and DC,
270

270

00:12:10,440  -->  00:12:13,910
and notice that the actual task
actually returns a boolean,
271

271

00:12:13,910  -->  00:12:16,520
and that's because the
update artist name method
272

272

00:12:16,520  -->  00:12:18,610
returns boolean.
273

273

00:12:18,610  -->  00:12:20,450
Now, when the task succeeds,
274

274

00:12:20,450  -->  00:12:22,530
we gotta trick the value
return mother method
275

275

00:12:22,530  -->  00:12:24,070
from the tasks value property,
276

276

00:12:24,070  -->  00:12:26,160
that's here on line 67.
277

277

00:12:26,160  -->  00:12:29,410
If it's true, meaning
that the update succeeded,
278

278

00:12:29,410  -->  00:12:31,740
then we go ahead and
actually update the UI.
279

279

00:12:31,740  -->  00:12:34,260
So we change the artist
name to AC slash DC,
280

280

00:12:34,260  -->  00:12:35,760
as you can see there
281

281

00:12:35,760  -->  00:12:37,880
and we then refresh the table.
282

282

00:12:37,880  -->  00:12:40,450
Now, we should not have to
manually refresh the table,
283

283

00:12:40,450  -->  00:12:41,620
I just want to point that out,
284

284

00:12:41,620  -->  00:12:44,820
but there is a bug in the
current version of Java Effects,
285

285

00:12:44,820  -->  00:12:48,010
when it comes to table
views and observable lists.
286

286

00:12:48,010  -->  00:12:50,510
Now the table view is not always noticing
287

287

00:12:50,510  -->  00:12:52,390
when an element in the list changes.
288

288

00:12:52,390  -->  00:12:55,470
So this is actually a
workaround to force a refresh,
289

289

00:12:55,470  -->  00:12:59,690
and in fact the refresh method
was only added in Java 8U60,
290

290

00:12:59,690  -->  00:13:01,390
perhaps in response to this bug.
291

291

00:13:01,390  -->  00:13:04,310
So maybe fixing this bug will
be complex we don't know,
292

292

00:13:04,310  -->  00:13:07,300
the documentation of
interest suggests or states
293

293

00:13:07,300  -->  00:13:09,110
that its useful in cases,
294

294

00:13:09,110  -->  00:13:11,560
this is the refresh method,
295

295

00:13:11,560  -->  00:13:13,520
where the underlying data
source will change in a way
296

296

00:13:13,520  -->  00:13:16,520
that's not observed by
the table view itself.
297

297

00:13:16,520  -->  00:13:19,420
So, the way that I read
that leads me to suspect
298

298

00:13:19,420  -->  00:13:22,140
that yes, the method was added,
because the developers know
299

299

00:13:22,140  -->  00:13:25,020
that data binding is broken in some cases.
300

300

00:13:25,020  -->  00:13:28,810
So we're adding the refresh
share to force that update.
301

301

00:13:28,810  -->  00:13:31,250
So the refresh method
forces the table view
302

302

00:13:31,250  -->  00:13:33,510
to redraw its visible area.
303

303

00:13:33,510  -->  00:13:36,430
And, it won't redraw rows
that are off the screen,
304

304

00:13:36,430  -->  00:13:38,100
but since those will redraw,
305

305

00:13:38,100  -->  00:13:40,090
if and when the user scrolls to them,
306

306

00:13:40,090  -->  00:13:42,290
it doesn't matter in our case.
307

307

00:13:42,290  -->  00:13:46,460
Alright, so let's actually
run this and see if it works.
308

308

00:13:52,100  -->  00:13:54,200
So it should be up, now we
have to click on update artist
309

309

00:13:54,200  -->  00:13:58,200
and we should see AC DC
change to AC slash DC.
310

310

00:13:58,200  -->  00:13:59,640
And when you run this, you wanna make sure
311

311

00:13:59,640  -->  00:14:01,490
this is visible on the screen,
312

312

00:14:01,490  -->  00:14:04,050
otherwise the refresh method
is not going to redraw the row.
313

313

00:14:04,050  -->  00:14:06,220
Alright, so update artist.
314

314

00:14:07,060  -->  00:14:08,600
And of course, what we haven't done,
315

315

00:14:08,600  -->  00:14:10,730
you might be wondering, "Well
Tim, why isn't that working?"
316

316

00:14:10,730  -->  00:14:13,680
we haven't actually
bound the actual control
317

317

00:14:13,680  -->  00:14:15,940
to our new method, have we?
318

318

00:14:15,940  -->  00:14:16,790
So we need to do that,
319

319

00:14:16,790  -->  00:14:19,900
we need to add the event
handler in the fxml.
320

320

00:14:19,900  -->  00:14:20,960
So lets go ahead and do that,
321

321

00:14:20,960  -->  00:14:22,580
so the third button update artist,
322

322

00:14:22,580  -->  00:14:25,780
we need to add our on action.
323

323

00:14:25,780  -->  00:14:28,030
On action is equal to hash,
324

324

00:14:28,030  -->  00:14:31,330
and that's gonna be update artist.
325

325

00:14:31,330  -->  00:14:34,080
Alright, so let's try that again.
326

326

00:14:38,610  -->  00:14:42,200
Okay, AC DC on the screen,
we click on update artist,
327

327

00:14:42,200  -->  00:14:45,340
and there you can see that
it's been updated, AC slash DC,
328

328

00:14:45,340  -->  00:14:49,510
and if we actually close
this down and run it again,
329

329

00:14:52,430  -->  00:14:53,710
in reloading the data,
330

330

00:14:53,710  -->  00:14:57,600
we should find the AC slash DC is showing,
331

331

00:14:57,600  -->  00:15:02,270
which tells us the database
was updated correctly.
332

332

00:15:02,270  -->  00:15:03,790
Alright so that's it for using a database
333

333

00:15:03,790  -->  00:15:05,250
from a gooey application.
334

334

00:15:05,250  -->  00:15:06,420
You now know the basics
335

335

00:15:06,420  -->  00:15:07,750
and I think you've got enough knowledge
336

336

00:15:07,750  -->  00:15:10,880
to research anything that
we haven't covered here.
337

337

00:15:10,880  -->  00:15:14,630
Alright so, as always, I'll
see you in the next video.
