
1

00:00:05,210  -->  00:00:06,130
<v Tim>All right so I'm gonna continue</v>
2

2

00:00:06,130  -->  00:00:07,650
exploring some more operators.
3

3

00:00:07,650  -->  00:00:09,850
But to do that I need to talk firstly
4

4

00:00:09,850  -->  00:00:11,533
about the if-then statement.
5

5

00:00:12,700  -->  00:00:14,820
So the if-then statement is the most basic
6

6

00:00:14,820  -->  00:00:18,280
of all the control flow statements available in Java.
7

7

00:00:18,280  -->  00:00:20,460
And it tells your programme to execute a certain
8

8

00:00:20,460  -->  00:00:21,940
section of the code
9

9

00:00:21,940  -->  00:00:24,340
only if a particular test
10

10

00:00:24,340  -->  00:00:26,960
which is an expression evaluates to true.
11

11

00:00:26,960  -->  00:00:28,910
Now this is known as conditional logic.
12

12

00:00:30,150  -->  00:00:33,067
So conditional logic uses specific statements in Java
13

13

00:00:33,067  -->  00:00:34,970
to allow us to check a condition
14

14

00:00:34,970  -->  00:00:36,980
and to execute certain code
15

15

00:00:36,980  -->  00:00:38,350
based on whether that condition
16

16

00:00:38,350  -->  00:00:39,680
the expression is true.
17

17

00:00:39,680  -->  00:00:42,510
So let's see how this works in practise.
18

18

00:00:42,510  -->  00:00:44,400
Right so I'm gonna start by continuing on
19

19

00:00:44,400  -->  00:00:46,100
down here on line 47.
20

20

00:00:46,100  -->  00:00:49,023
I'm going to type Boolean, isAlieN,
21

21

00:00:50,570  -->  00:00:52,600
equals false.
22

22

00:00:52,600  -->  00:00:54,150
Then on the next line I'm gonna type if
23

23

00:00:54,150  -->  00:00:57,240
in parentheses, isAlien
24

24

00:00:57,240  -->  00:00:58,320
equals equals,
25

25

00:00:58,320  -->  00:01:00,950
note the two equals signs there,
26

26

00:01:00,950  -->  00:01:02,810
press enter then after the right parentheses,
27

27

00:01:02,810  -->  00:01:05,370
noting that IntelliJ indents the code
28

28

00:01:05,370  -->  00:01:07,320
and we'll print out the message
29

29

00:01:07,320  -->  00:01:08,653
it is not an alien.
30

30

00:01:09,860  -->  00:01:12,200
And put an exclamation mark there as well.
31

31

00:01:12,200  -->  00:01:13,890
So notice a few things here
32

32

00:01:13,890  -->  00:01:16,870
firstly the if statement does not have a semicolon
33

33

00:01:16,870  -->  00:01:18,440
on the line where you'd normally expect it to
34

34

00:01:18,440  -->  00:01:19,470
we normally on each line
35

35

00:01:19,470  -->  00:01:22,350
so far in the course we've putting a semicolon.
36

36

00:01:22,350  -->  00:01:26,190
The semicolon doesn't get added until the following line
37

37

00:01:26,190  -->  00:01:28,940
which in this case is a system.out.println.
38

38

00:01:28,940  -->  00:01:32,040
So you don't put a semicolon after the parentheses.
39

39

00:01:32,040  -->  00:01:33,650
So what's happening here is the statement's
40

40

00:01:33,650  -->  00:01:35,740
actually spanning two lines
41

41

00:01:35,740  -->  00:01:37,970
which is perfectly valid to do in Java
42

42

00:01:37,970  -->  00:01:39,410
and we'll talk more about whitespace
43

43

00:01:39,410  -->  00:01:41,390
which is the concept of using multiple lines
44

44

00:01:41,390  -->  00:01:44,880
and any number of spaces, later in the course.
45

45

00:01:44,880  -->  00:01:46,660
But check out the operators that we've used
46

46

00:01:46,660  -->  00:01:48,940
in these three lines of code.
47

47

00:01:48,940  -->  00:01:50,690
So you can see that the one line
48

48

00:01:50,690  -->  00:01:52,220
is a single equals
49

49

00:01:52,220  -->  00:01:54,040
and that's on line 47.
50

50

00:01:54,040  -->  00:01:57,010
And on the second line it's using two equals
51

51

00:01:57,010  -->  00:01:57,850
put together.
52

52

00:01:57,850  -->  00:02:00,700
So the first one, the equals on line 47
53

53

00:02:00,700  -->  00:02:02,350
well that's an assignment operator
54

54

00:02:02,350  -->  00:02:04,260
and we've seen that quite a few times.
55

55

00:02:04,260  -->  00:02:06,400
It assigns the value of an expression
56

56

00:02:06,400  -->  00:02:09,660
to the variable on the left of the equals operator.
57

57

00:02:09,660  -->  00:02:12,250
So isAlien is that variable in this case
58

58

00:02:12,250  -->  00:02:13,270
it's been set to false
59

59

00:02:13,270  -->  00:02:15,730
which is the value of our expression
60

60

00:02:15,730  -->  00:02:17,800
on the right hand side of the equals sign.
61

61

00:02:17,800  -->  00:02:19,430
But the second line's a bit more interesting
62

62

00:02:19,430  -->  00:02:21,330
that's got two equals signs
63

63

00:02:21,330  -->  00:02:23,500
so it does something completely different.
64

64

00:02:23,500  -->  00:02:24,333
What it's doing,
65

65

00:02:24,333  -->  00:02:26,990
it's testing to see whether the particular value
66

66

00:02:26,990  -->  00:02:28,100
is false.
67

67

00:02:28,100  -->  00:02:29,960
So is in this line here we're saying
68

68

00:02:29,960  -->  00:02:33,870
if the contents of the variable, isAlien, is false.
69

69

00:02:33,870  -->  00:02:35,950
So the two equals operator
70

70

00:02:35,950  -->  00:02:38,160
it asks if the operands
71

71

00:02:38,160  -->  00:02:41,170
are identical or equal to each other.
72

72

00:02:41,170  -->  00:02:42,730
So here the operands as you can see
73

73

00:02:42,730  -->  00:02:44,490
the left hand operator isAlien
74

74

00:02:44,490  -->  00:02:46,680
the right hand one is false.
75

75

00:02:46,680  -->  00:02:48,120
So are they the same?
76

76

00:02:48,120  -->  00:02:50,900
In other words, does isAlien equal
77

77

00:02:50,900  -->  00:02:52,700
or have the value false?
78

78

00:02:52,700  -->  00:02:54,000
So in this case yes it does
79

79

00:02:54,000  -->  00:02:56,360
because we know that isAlien was defined as false
80

80

00:02:56,360  -->  00:02:57,920
on line 47.
81

81

00:02:57,920  -->  00:03:00,820
So therefore the expression isAlien
82

82

00:03:00,820  -->  00:03:02,570
is false is true.
83

83

00:03:02,570  -->  00:03:04,900
And that can be a bit confusing to grasp
84

84

00:03:04,900  -->  00:03:07,060
but again we're checking if two operands
85

85

00:03:07,060  -->  00:03:08,240
equal each other
86

86

00:03:08,240  -->  00:03:09,750
and if that is the case
87

87

00:03:09,750  -->  00:03:12,860
a true is returned, the expression returns the value true,
88

88

00:03:12,860  -->  00:03:16,183
otherwise returns false to say that they aren't equal.
89

89

00:03:17,020  -->  00:03:20,230
So the if keyword, getting back to our if-then statement,
90

90

00:03:20,230  -->  00:03:22,170
well that takes what's in parentheses
91

91

00:03:22,170  -->  00:03:26,130
and if and only if the result of that expression is true
92

92

00:03:26,130  -->  00:03:28,700
will the next line be executed.
93

93

00:03:28,700  -->  00:03:30,130
So a better way of reading this is
94

94

00:03:30,130  -->  00:03:32,660
do the contents of what's in the parentheses
95

95

00:03:32,660  -->  00:03:34,240
evaluate to true?
96

96

00:03:34,240  -->  00:03:35,750
So let's try it.
97

97

00:03:35,750  -->  00:03:37,230
So if we run this we should see
98

98

00:03:37,230  -->  00:03:39,380
this'll come back and say it's not an alien on the screen.
99

99

00:03:39,380  -->  00:03:43,970
So we'll just run it.
100

100

00:03:43,970  -->  00:03:45,300
You can see it is not an alien.
101

101

00:03:45,300  -->  00:03:47,160
Now if you scroll down to see our code again
102

102

00:03:47,160  -->  00:03:49,160
I'm gonna just hover over there
103

103

00:03:49,160  -->  00:03:51,300
note also that IntelliJ is telling us
104

104

00:03:51,300  -->  00:03:52,360
there's a way to abbreviate
105

105

00:03:52,360  -->  00:03:55,470
isAlien equals equals false by using the
106

106

00:03:55,470  -->  00:03:57,160
exclamation isAlien
107

107

00:03:57,160  -->  00:03:59,510
but we'll talk more about that later in the course.
108

108

00:03:59,510  -->  00:04:02,360
For now what we're doing is still valid as well.
109

109

00:04:02,360  -->  00:04:05,590
But IntelliJ's always there trying to give you ways to
110

110

00:04:05,590  -->  00:04:07,813
do things in a more efficient manner.
111

111

00:04:08,960  -->  00:04:10,410
Right so the other things I wanna show you though
112

112

00:04:10,410  -->  00:04:12,090
is what happens if I add a semicolon
113

113

00:04:12,090  -->  00:04:15,780
on the if line after the right parentheses.
114

114

00:04:15,780  -->  00:04:18,350
Notice when I do that everything's still valid
115

115

00:04:18,350  -->  00:04:21,090
we have got a little potential warning over here
116

116

00:04:21,090  -->  00:04:22,400
but there's no errors.
117

117

00:04:22,400  -->  00:04:23,300
Now if we run this
118

118

00:04:27,019  -->  00:04:28,210
all right so you can see what's happened there
119

119

00:04:28,210  -->  00:04:29,370
we've still got the same output
120

120

00:04:29,370  -->  00:04:33,610
so at first glance you would assume that nothing's changed
121

121

00:04:33,610  -->  00:04:36,150
and the program's still working as it should.
122

122

00:04:36,150  -->  00:04:38,320
However if I change this
123

123

00:04:38,320  -->  00:04:41,490
so if we instead of testing for isAlien equals false
124

124

00:04:41,490  -->  00:04:43,483
let's change this to test for true,
125

125

00:04:45,240  -->  00:04:47,200
we need to know if that's obviously not going to be true
126

126

00:04:47,200  -->  00:04:48,033
that's going to be false
127

127

00:04:48,033  -->  00:04:50,190
because we know isAlien is set to false
128

128

00:04:50,190  -->  00:04:52,700
and we're comparing true so that should give us a false.
129

129

00:04:52,700  -->  00:04:55,026
So what that should mean is that this line
130

130

00:04:55,026  -->  00:04:56,700
won't be executed.
131

131

00:04:56,700  -->  00:04:57,533
I'll run this
132

132

00:04:58,870  -->  00:05:00,330
we still get the output.
133

133

00:05:00,330  -->  00:05:01,700
So that's the confusing part about
134

134

00:05:01,700  -->  00:05:03,560
putting a semicolon where there shouldn't be one.
135

135

00:05:03,560  -->  00:05:06,600
After the if or the right of the parentheses.
136

136

00:05:06,600  -->  00:05:08,090
By doing, putting the semicolon there
137

137

00:05:08,090  -->  00:05:10,520
you're closing off that line of code
138

138

00:05:10,520  -->  00:05:11,570
and completing it
139

139

00:05:11,570  -->  00:05:13,950
and that means that this line 49 then
140

140

00:05:13,950  -->  00:05:16,580
is basically a line that's gonna be executed no matter what.
141

141

00:05:16,580  -->  00:05:18,150
So in other words it's no longer using
142

142

00:05:18,150  -->  00:05:19,600
any conditional logic
143

143

00:05:19,600  -->  00:05:22,020
it's just going to be executed no matter what.
144

144

00:05:22,020  -->  00:05:25,113
So that's just the syntax of Java to allow you
145

145

00:05:25,113  -->  00:05:26,390
to get away with that
146

146

00:05:26,390  -->  00:05:28,920
but basically we've created an if-then statement
147

147

00:05:28,920  -->  00:05:29,980
which doesn't do anything there
148

148

00:05:29,980  -->  00:05:32,890
and that's what's confusing about adding the semicolon.
149

149

00:05:32,890  -->  00:05:34,550
And that's the reason why you don't wanna put
150

150

00:05:34,550  -->  00:05:35,383
a semicolon there
151

151

00:05:35,383  -->  00:05:36,216
so I'll put that back
152

152

00:05:36,216  -->  00:05:37,820
and again we'll still get the same output
153

153

00:05:38,830  -->  00:05:40,670
but we know that now
154

154

00:05:40,670  -->  00:05:43,410
we're not seeing anything with it set to true,
155

155

00:05:43,410  -->  00:05:44,690
which is correct now
156

156

00:05:44,690  -->  00:05:46,350
because it's now correctly evaluating this
157

157

00:05:46,350  -->  00:05:49,110
and only outputting line 49
158

158

00:05:49,110  -->  00:05:51,027
in the case of isAlien being set to true
159

159

00:05:51,027  -->  00:05:52,320
and we know that's not the case
160

160

00:05:52,320  -->  00:05:53,930
'cause on line 47.
161

161

00:05:53,930  -->  00:05:56,293
So I'll put this back to false again.
162

162

00:05:59,260  -->  00:06:00,093
Run it again
163

163

00:06:02,181  -->  00:06:03,014
and now we're getting the output
164

164

00:06:03,014  -->  00:06:05,203
because of course isAlien is set to false.
165

165

00:06:06,090  -->  00:06:08,650
Now I wanted to show you this particular method
166

166

00:06:08,650  -->  00:06:11,690
of having an if-then statement as you can see there
167

167

00:06:11,690  -->  00:06:13,520
without using a code block
168

168

00:06:13,520  -->  00:06:14,630
but you can see that here you can
169

169

00:06:14,630  -->  00:06:15,620
run into difficulties with that
170

170

00:06:15,620  -->  00:06:17,050
because it's not always immediately clear
171

171

00:06:17,050  -->  00:06:18,370
looking at the code
172

172

00:06:18,370  -->  00:06:19,230
as to what's going on
173

173

00:06:19,230  -->  00:06:21,130
and this is one of the disadvantages
174

174

00:06:21,130  -->  00:06:24,210
of using an if without using a code block.
175

175

00:06:24,210  -->  00:06:25,740
What I will show you here is
176

176

00:06:25,740  -->  00:06:27,090
if I actually add a second line here
177

177

00:06:27,090  -->  00:06:29,470
so say we wanted to display two lines
178

178

00:06:29,470  -->  00:06:32,260
in the case of isAlien being set to false
179

179

00:06:32,260  -->  00:06:35,200
we're gonna do system.out.println
180

180

00:06:35,200  -->  00:06:36,080
as we normally do
181

181

00:06:37,127  -->  00:06:39,853
and I'm going to put and I am scared of aliens.
182

182

00:06:41,910  -->  00:06:43,860
Let's just assume we wanted to do that.
183

183

00:06:45,548  -->  00:06:47,070
At first glance we'll think that it'll work
184

184

00:06:47,070  -->  00:06:47,903
we'll run it.
185

185

00:06:50,070  -->  00:06:51,060
We're still getting the two lines,
186

186

00:06:51,060  -->  00:06:53,110
but let's change this back to true again.
187

187

00:06:54,900  -->  00:06:55,783
Run the code.
188

188

00:06:58,240  -->  00:07:02,970
Confusingly we only get and I am scared of aliens showing
189

189

00:07:02,970  -->  00:07:04,510
and not the other line
190

190

00:07:04,510  -->  00:07:05,580
and we know that the first line
191

191

00:07:05,580  -->  00:07:07,680
it is not an alien shouldn't be printed
192

192

00:07:07,680  -->  00:07:09,020
because we're comparing isAlien
193

193

00:07:09,020  -->  00:07:11,690
which has been set to false on line 47
194

194

00:07:11,690  -->  00:07:14,430
with the literal Boolean value true on line 48
195

195

00:07:14,430  -->  00:07:15,760
so it shouldn't work
196

196

00:07:15,760  -->  00:07:18,130
but why has this extra line worked?
197

197

00:07:18,130  -->  00:07:20,040
Why have we got the output for that?
198

198

00:07:20,040  -->  00:07:21,917
Well the reason is we haven't used a code block
199

199

00:07:21,917  -->  00:07:24,850
in our if-then statement if we don't use a code block
200

200

00:07:24,850  -->  00:07:28,320
then only one line of code can be added
201

201

00:07:28,320  -->  00:07:29,760
to this if-then statement.
202

202

00:07:29,760  -->  00:07:31,584
So what we can do and what you should do
203

203

00:07:31,584  -->  00:07:33,070
a hundred per cent of the time
204

204

00:07:33,070  -->  00:07:34,520
is actually add a code block.
205

205

00:07:36,290  -->  00:07:38,440
So instead of using the if statement as you can see here
206

206

00:07:38,440  -->  00:07:40,480
we should be using instead a code block.
207

207

00:07:40,480  -->  00:07:43,080
So a code block allows more than one statement
208

208

00:07:43,080  -->  00:07:43,913
to be executed.
209

209

00:07:43,913  -->  00:07:46,460
A block of code, that's why it's called a code block.
210

210

00:07:46,460  -->  00:07:49,140
So the format here is to add the left and right parentheses
211

211

00:07:49,140  -->  00:07:51,000
as you can see in the example
212

212

00:07:51,000  -->  00:07:53,130
and we can put the statements we want executed
213

213

00:07:53,130  -->  00:07:54,750
if that expression is true
214

214

00:07:54,750  -->  00:07:56,930
in between left and right curly braces.
215

215

00:07:56,930  -->  00:07:58,040
So let's swing back to the code
216

216

00:07:58,040  -->  00:08:01,290
and introduce a code block before we end the video.
217

217

00:08:01,290  -->  00:08:02,410
So I'm gonna come back here and do that
218

218

00:08:02,410  -->  00:08:05,120
I'm going to add a left curly brace there
219

219

00:08:05,120  -->  00:08:05,967
and on the end of the line
220

220

00:08:05,967  -->  00:08:08,780
I'm gonna add a right curly brace to close it off.
221

221

00:08:08,780  -->  00:08:11,060
And you can see that IntelliJ's shown you
222

222

00:08:11,060  -->  00:08:13,530
that in blue now to indicate that that's a block.
223

223

00:08:13,530  -->  00:08:14,363
Now that I've done that,
224

224

00:08:14,363  -->  00:08:15,710
first thing we'll try running it with
225

225

00:08:15,710  -->  00:08:17,480
isAlien set to true.
226

226

00:08:17,480  -->  00:08:20,023
We should technically get no output at all.
227

227

00:08:22,300  -->  00:08:23,940
That's now correct, we're not getting any output
228

228

00:08:23,940  -->  00:08:25,647
because isAlien is set to true
229

229

00:08:25,647  -->  00:08:27,350
now if I change this back to false
230

230

00:08:28,200  -->  00:08:31,143
we should now see both lines of output.
231

231

00:08:32,310  -->  00:08:34,740
And there it is we can see both lines of output.
232

232

00:08:34,740  -->  00:08:38,500
So using code blocks makes the code easy to understand
233

233

00:08:38,500  -->  00:08:41,350
but also enables us to have more than one statement execute
234

234

00:08:41,350  -->  00:08:43,160
if in this case
235

235

00:08:43,160  -->  00:08:45,237
isAlien was set to false and we're checking it for false
236

236

00:08:45,237  -->  00:08:48,210
and you can see we've got the two lines of output.
237

237

00:08:48,210  -->  00:08:49,150
So in general
238

238

00:08:49,150  -->  00:08:50,440
I would always suggest using an if,
239

239

00:08:50,440  -->  00:08:51,510
when you're using an if-then statement
240

240

00:08:51,510  -->  00:08:52,970
to always use a code block
241

241

00:08:52,970  -->  00:08:55,260
even if you are only executing one line
242

242

00:08:55,260  -->  00:08:57,690
because if you come back to this code in the future
243

243

00:08:57,690  -->  00:08:58,810
and decide to add another line
244

244

00:08:58,810  -->  00:09:00,380
you may not realise you've introduced a bug
245

245

00:09:00,380  -->  00:09:01,705
as you saw what happened to me
246

246

00:09:01,705  -->  00:09:03,080
when I didn't use a code block.
247

247

00:09:03,080  -->  00:09:05,193
So bottom line, always use a code block.
248

248

00:09:06,200  -->  00:09:07,570
All right so let's move on now,
249

249

00:09:07,570  -->  00:09:08,950
in the next video we're gonna switch
250

250

00:09:08,950  -->  00:09:12,260
to another primitive type to continue our exploration
251

251

00:09:12,260  -->  00:09:13,920
of the if-then statement.
252

252

00:09:13,920  -->  00:09:15,620
So I'll see you in the next video.
