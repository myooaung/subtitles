1
1

00:00:04,990  -->  00:00:07,720
ok so we can further optimize this
2

2

00:00:07,720  -->  00:00:09,970
method a little bit more if we're
3

3

00:00:09,970  -->  00:00:11,500
actually expecting an exception to be
4

4

00:00:11,500  -->  00:00:12,340
thrown
5

5

00:00:12,340  -->  00:00:14,670
we'd have to modify the annotation line
6

6

00:00:14,670  -->  00:00:18,280
as you saw on line 36 we can also remove
7

7

00:00:18,280  -->  00:00:20,680
these assert equals as well because
8

8

00:00:20,680  -->  00:00:21,970
we're not testing for equality in this
9

9

00:00:21,970  -->  00:00:24,730
case we just testing to see whether the
10

10

00:00:24,730  -->  00:00:26,590
exception is thrown in the case of
11

11

00:00:26,590  -->  00:00:29,170
invalid input i'm going to remove that
12

12

00:00:29,170  -->  00:00:31,990
remove that completely and the test can
13

13

00:00:31,990  -->  00:00:34,020
literally just be that one line there
14

14

00:00:34,020  -->  00:00:37,480
and in fact we can even remove the local
15

15

00:00:37,480  -->  00:00:38,590
variable because we don't need that
16

16

00:00:38,590  -->  00:00:40,960
anymore as well we're really just purely
17

17

00:00:40,960  -->  00:00:43,690
just testing in this particular test to
18

18

00:00:43,690  -->  00:00:44,890
see whether that exception is thrown
19

19

00:00:44,890  -->  00:00:47,200
given that the parameters are invalid
20

20

00:00:47,200  -->  00:00:50,200
for the amount of money to be
21

21

00:00:50,200  -->  00:00:52,030
withdrawn from an ATM
22

22

00:00:52,030  -->  00:00:56,530
let's just run that you can see that the
23

23

00:00:56,530  -->  00:00:58,750
test is still passing there working fine
24

24

00:00:58,750  -->  00:01:02,770
now not that annotations were only introduced
25

25

00:01:02,770  -->  00:01:06,520
in j unit 4 when using earlier units or
26

26

00:01:06,520  -->  00:01:08,650
versions of j unit what would have to do
27

27

00:01:08,650  -->  00:01:10,090
is surround the code that would throw an
28

28

00:01:10,090  -->  00:01:12,720
exception with a try-catch block and we
29

29

00:01:12,720  -->  00:01:14,140
wouldn't do anything in the catch block
30

30

00:01:14,140  -->  00:01:16,290
remember that if you don't assert
31

31

00:01:16,290  -->  00:01:18,670
anything the test will pass so in that
32

32

00:01:18,670  -->  00:01:20,560
case we do the following working with an
33

33

00:01:20,560  -->  00:01:22,530
early version just want to show you this
34

34

00:01:22,530  -->  00:01:24,130
because you may come across the code
35

35

00:01:24,130  -->  00:01:26,350
along those lines I want to do first is
36

36

00:01:26,350  -->  00:01:29,280
comment this bit out here for now and
37

37

00:01:29,280  -->  00:01:31,710
we're going to write the extra code
38

38

00:01:31,710  -->  00:01:33,720
assuming we're in the scenario an older
39

39

00:01:33,720  -->  00:01:37,920
version of j unit we need to introduce a try
40

40

00:01:37,920  -->  00:01:41,040
...
41

41

00:01:41,040  -->  00:01:42,490
....
42

42

00:01:42,490  -->  00:01:51,900
...
43

43

00:01:51,900  -->  00:01:53,850
...so we'll do it that way we
44

44

00:01:53,850  -->  00:01:55,350
run it we should see that we get the same
45

45

00:01:55,350  -->  00:01:59,250
result you can see we get the same tests test
46

46

00:01:59,250  -->  00:02:01,560
results that all our tests pass because
47

47

00:02:01,560  -->  00:02:03,280
we've caught the exception in this case
48

48

00:02:03,280  -->  00:02:05,920
because we're expecting it and we don't
49

49

00:02:05,920  -->  00:02:07,470
need to do any processing the method
50

50

00:02:07,470  -->  00:02:10,380
because we caught the exception but the
51

51

00:02:10,380  -->  00:02:11,530
other thing i want to show you what we
52

52

00:02:11,530  -->  00:02:12,910
should really be doing here to be more
53

53

00:02:12,910  -->  00:02:13,840
specific
54

54

00:02:13,840  -->  00:02:15,190
we should really have a fail here as
55

55

00:02:15,190  -->  00:02:17,020
well
56

56

00:02:17,020  -->  00:02:19,150
and the fail....
57

57

00:02:19,150  -->  00:02:27,640
...I'm gonna
58

58

00:02:27,640  -->  00:02:31,720
run the tests and just to confirm that
59

59

00:02:31,720  -->  00:02:33,550
this code will work will put a true
60

60

00:02:33,550  -->  00:02:38,680
their run it we get that fail you
61

61

00:02:38,680  -->  00:02:39,850
should've thrown an illegal argument
62

62

00:02:39,850  -->  00:02:40,720
exception
63

63

00:02:40,720  -->  00:02:41,980
that's how we would have had to do it in
64

64

00:02:41,980  -->  00:02:44,710
the past it's a lot easier than that
65

65

00:02:44,710  -->  00:02:45,880
these days i'm just going to put the
66

66

00:02:45,880  -->  00:02:52,660
code back to how it was
67

67

00:02:52,660  -->  00:02:54,700
so again this is the j unit 4 way of
68

68

00:02:54,700  -->  00:02:56,500
doing it which is a heck of a lot easier
69

69

00:02:56,500  -->  00:02:59,530
I guess to be correct
70

70

00:02:59,530  -->  00:03:09,260
we also put a fail here as well
71

71

00:03:09,260  -->  00:03:16,760
run the test again and again it passes
72

72

00:03:16,760  -->  00:03:18,400
because the exception is thrown and this
73

73

00:03:18,400  -->  00:03:24,310
code is actually bypassed ok alright
74

74

00:03:24,310  -->  00:03:26,260
so the final j unit topic that I want
75

75

00:03:26,260  -->  00:03:29,750
to cover is parameterize tests so we
76

76

00:03:29,750  -->  00:03:32,150
want every test to start fresh that can
77

77

00:03:32,150  -->  00:03:34,970
result in a lot of repetitive code for
78

78

00:03:34,970  -->  00:03:36,470
example let's suppose we want to try
79

79

00:03:36,470  -->  00:03:38,590
depositing five different amounts and
80

80

00:03:38,590  -->  00:03:41,180
verifying the resulting balance we could
81

81

00:03:41,180  -->  00:03:43,280
write five different test cases but we
82

82

00:03:43,280  -->  00:03:46,120
can also write a parameterised test now
83

83

00:03:46,120  -->  00:03:48,260
we have to use a class annotation to run
84

84

00:03:48,260  -->  00:03:50,560
parameterize test so let's create a new
85

85

00:03:50,560  -->  00:03:53,230
task a new test class open the
86

86

00:03:53,230  -->  00:03:57,820
project pane new class will call this
87

87

00:03:57,820  -->  00:04:00,500
one bank account
88

88

00:04:00,500  -->  00:04:08,560
test parameterised like so and let's
89

89

00:04:08,560  -->  00:04:10,760
start by creating an instance variable
90

90

00:04:10,760  -->  00:04:51,780
...
91

91

00:04:51,780  -->  00:04:55,830
okay what we need to do now though is tell
92

92

00:04:55,830  -->  00:04:58,560
junit this isn't a normal test class we want
93

93

00:04:58,560  -->  00:04:59,970
to tell it that we want to use it to run
94

94

00:04:59,970  -->  00:05:02,730
a parameterised test so we need to use
95

95

00:05:02,730  -->  00:05:05,660
the at run with annotation on the class
96

96

00:05:05,660  -->  00:05:08,370
definition itself come up here to the top
97

97

00:05:08,370  -->  00:05:12,030
we're going to put....
98

98

00:05:12,030  -->  00:05:15,270
...
99

99

00:05:15,270  -->  00:05:20,520
...and as a confirmation if
100

100

00:05:20,520  -->  00:05:21,750
you got this right you should see
101

101

00:05:21,750  -->  00:05:23,700
these two little green arrows in the
102

102

00:05:23,700  -->  00:05:25,320
gutter to the left of the class
103

103

00:05:25,320  -->  00:05:26,250
definition
104

104

00:05:26,250  -->  00:05:30,030
ok so let's so let's suppose we're going
105

105

00:05:30,030  -->  00:05:32,220
to call the deposit method with branch
106

106

00:05:32,220  -->  00:05:35,490
equal to true and a number of values so
107

107

00:05:35,490  -->  00:05:37,440
five different values what we have to
108

108

00:05:37,440  -->  00:05:39,330
do is tell j unit that these are the
109

109

00:05:39,330  -->  00:05:42,060
parameters we want to use we're going to
110

110

00:05:42,060  -->  00:05:43,440
do so by adding a static method
111

111

00:05:43,440  -->  00:05:45,750
annotated with the at parameters
112

112

00:05:45,750  -->  00:05:48,900
annotation and that method is so we need
113

113

00:05:48,900  -->  00:05:51,300
to return a collection so we're going to
114

114

00:05:51,300  -->  00:05:54,330
come down below the setup method we're
115

115

00:05:54,330  -->  00:06:00,060
gonna put...
116

116

00:06:00,060  -->  00:07:20,540
....
117

117

00:07:20,540  -->  00:07:23,930
ok so what have we done here well each row as you can see
118

118

00:07:23,930  -->  00:07:27,200
on line 26 to 30 is the set of parameters
119

119

00:07:27,200  -->  00:07:29,840
we want to test followed by the expected
120

120

00:07:29,840  -->  00:07:32,180
value now when we run the parameterize
121

121

00:07:32,180  -->  00:07:34,490
test junit will create a new
122

122

00:07:34,490  -->  00:07:36,200
instance of the bank account test
123

123

00:07:36,200  -->  00:07:39,080
parameterised class for each set of test
124

124

00:07:39,080  -->  00:07:41,810
data and I will use the class constructor
125

125

00:07:41,810  -->  00:07:44,750
just too set instance variables to
126

126

00:07:44,750  -->  00:07:47,870
the values specified now we need to do
127

127

00:07:47,870  -->  00:07:50,600
two things add instance variables for
128

128

00:07:50,600  -->  00:07:52,820
the deposit amount the branch value and
129

129

00:07:52,820  -->  00:07:55,010
the expected value and we also need to
130

130

00:07:55,010  -->  00:07:56,840
add a constructor that accepts the
131

131

00:07:56,840  -->  00:07:59,300
values and sets the instance variables
132

132

00:07:59,300  -->  00:08:01,760
so let's go ahead and do that i'm going
133

133

00:08:01,760  -->  00:08:04,340
to below here below the bank account
134

134

00:08:04,340  -->  00:08:07,880
going to type....
135

135

00:08:07,880  -->  00:08:36,830
...
136

136

00:08:36,830  -->  00:08:39,560
created that constructor let's go back to
137

137

00:08:39,560  -->  00:08:44,300
the bank account test class like so and
138

138

00:08:44,300  -->  00:08:45,710
what we want to do is grab a copy of the
139

139

00:08:45,710  -->  00:08:50,130
deposit test so just copy that
140

140

00:08:50,130  -->  00:08:54,270
now back to the bank account test
141

141

00:08:54,270  -->  00:08:58,440
parameterised java file and will paste
142

142

00:08:58,440  -->  00:09:01,530
that method in there accept that import
143

143

00:09:01,530  -->  00:09:07,590
and we just need to modify this to use
144

144

00:09:07,590  -->  00:09:09,960
the instance variables rather than hard
145

145

00:09:09,960  -->  00:09:11,310
coding the values so i'm going to change
146

146

00:09:11,310  -->  00:09:15,360
this...
147

147

00:09:15,360  -->  00:09:26,160
...
148

148

00:09:26,160  -->  00:09:30,600
...so the 3
149

149

00:09:30,600  -->  00:09:32,400
values that coming from here which
150

150

00:09:32,400  -->  00:09:35,100
ultimately are being created from our
151

151

00:09:35,100  -->  00:09:37,020
collection objects for the test
152

152

00:09:37,020  -->  00:09:39,720
conditions method what we can do now is
153

153

00:09:39,720  -->  00:09:42,210
we can actually run the test by clicking
154

154

00:09:42,210  -->  00:09:44,400
on this green arrow to the left of
155

155

00:09:44,400  -->  00:09:46,920
the get deposit lets actually just change
156

156

00:09:46,920  -->  00:09:48,480
that will just call the method deposit
157

157

00:09:48,480  -->  00:09:52,020
for simplicity and we'll run it run
158

158

00:09:52,020  -->  00:09:57,750
deposit and you can see that ran various
159

159

00:09:57,750  -->  00:09:59,910
tests and we've actually got some output
160

160

00:09:59,910  -->  00:10:01,530
here to the left showing the
161

161

00:10:01,530  -->  00:10:03,690
various tests in fact that was run 5 times
162

162

00:10:03,690  -->  00:10:06,660
but this third one is interesting and you
163

163

00:10:06,660  -->  00:10:09,210
see a deposit 2 and the problem with
164

164

00:10:09,210  -->  00:10:11,640
that is we've got this expected value 13
165

165

00:10:11,640  -->  00:10:15,690
25.14 but the actual values 1325.1
166

166

00:10:15,690  -->  00:10:18,450
39999 and this is where the
167

167

00:10:18,450  -->  00:10:22,170
Delta option actually comes in terms of
168

168

00:10:22,170  -->  00:10:23,880
the tests that mark fail in my case you
169

169

00:10:23,880  -->  00:10:25,740
can see was the third one but you might
170

170

00:10:25,740  -->  00:10:27,210
find that the fourth one actually fails
171

171

00:10:27,210  -->  00:10:29,730
here it does really depends on your system
172

172

00:10:29,730  -->  00:10:31,350
as to which one will fail or which  one could
173

173

00:10:31,350  -->  00:10:33,720
fail so we need to do now is just change
174

174

00:10:33,720  -->  00:10:36,150
this Delta parameter to take that into
175

175

00:10:36,150  -->  00:10:37,110
account
176

176

00:10:37,110  -->  00:10:39,270
I can change that to make that .01
177

177

00:10:39,270  -->  00:10:42,630
run the test method again
178

178

00:10:42,630  -->  00:10:47,790
run deposit we can see that this time
179

179

00:10:47,790  -->  00:10:49,560
with actually allowed the delta to be .01
180

180

00:10:49,560  -->  00:10:51,960
which is enough now to actually
181

181

00:10:51,960  -->  00:10:54,000
cover for the fact that it was so close
182

182

00:10:54,000  -->  00:10:56,010
enough dealing with the double precision
183

183

00:10:56,010  -->  00:11:00,570
that is part of double primitive type so
184

184

00:11:00,570  -->  00:11:02,100
in most cases you won't need to do that
185

185

00:11:02,100  -->  00:11:03,270
but you can see where this delta
186

186

00:11:03,270  -->  00:11:03,770
optional
187

187

00:11:03,770  -->  00:11:05,730
comes in to play if you do need to do
188

188

00:11:05,730  -->  00:11:07,290
that when you're testing double
189

189

00:11:07,290  -->  00:11:08,670
primitive type
190

190

00:11:08,670  -->  00:11:10,820
alright so that's how we run a bunch of
191

191

00:11:10,820  -->  00:11:12,680
tests on the same method as you can see
192

192

00:11:12,680  -->  00:11:14,670
there you saw that there was a bit of
193

193

00:11:14,670  -->  00:11:16,920
work to set it all up but then it does
194

194

00:11:16,920  -->  00:11:18,770
cut down on the amount of test code that
195

195

00:11:18,770  -->  00:11:20,850
we have to maintain and just to confirm
196

196

00:11:20,850  -->  00:11:22,430
if you look over to the left hand side
197

197

00:11:22,430  -->  00:11:23,240
here
198

198

00:11:23,240  -->  00:11:25,920
intellij created a new run configuration
199

199

00:11:25,920  -->  00:11:27,720
for the class so if you want to run this
200

200

00:11:27,720  -->  00:11:31,290
again now we've got this bank account
201

201

00:11:31,290  -->  00:11:33,120
test parameterised deposit that we can
202

202

00:11:33,120  -->  00:11:35,630
run at any time and over here to the
203

203

00:11:35,630  -->  00:11:38,240
left the five tests showing having run
204

204

00:11:38,240  -->  00:11:40,640
and the test pane also labels each test
205

205

00:11:40,640  -->  00:11:43,880
using its index in the collection
206

206

00:11:43,880  -->  00:11:45,320
alright so now that you've seen how j
207

207

00:11:45,320  -->  00:11:47,850
unit gets the test values and passes
208

208

00:11:47,850  -->  00:11:50,040
them to the test method hoping it now
209

209

00:11:50,040  -->  00:11:51,500
you can understand why we have to create
210

210

00:11:51,500  -->  00:11:54,020
a class for each parameterised test that
211

211

00:11:54,020  -->  00:11:56,180
we want to run alright so that
212

212

00:11:56,180  -->  00:11:57,930
concludes our tour of j unit
213

213

00:11:57,930  -->  00:11:59,510
obviously we can't go through every
214

214

00:11:59,510  -->  00:12:01,980
detail of the junit as its quite
215

215

00:12:01,980  -->  00:12:03,320
extensive and there's a lot more that
216

216

00:12:03,320  -->  00:12:05,450
could be covered now there's certainly
217

217

00:12:05,450  -->  00:12:06,830
more that you can do with the framework
218

218

00:12:06,830  -->  00:12:09,120
but you now have the basics and coupled with
219

219

00:12:09,120  -->  00:12:11,250
you spending some time looking at
220

220

00:12:11,250  -->  00:12:12,660
the documentation and playing
221

221

00:12:12,660  -->  00:12:14,490
around with it i'm sure you'll get a lot
222

222

00:12:14,490  -->  00:12:16,370
out of it in the next video we're going
223

223

00:12:16,370  -->  00:12:18,440
to start working on a J unit challenge
224

224

00:12:18,440  -->  00:12:25,450
i'll see you in the next video
