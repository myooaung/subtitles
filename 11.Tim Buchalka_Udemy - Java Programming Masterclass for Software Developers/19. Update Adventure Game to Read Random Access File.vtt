WEBVTT
1
1

00:00:05.180  -->  00:00:06.240
- [Tim] Alright, so, at this point
2

2

00:00:06.240  -->  00:00:08.340
we're actually done, well, that's what
3

3

00:00:08.340  -->  00:00:09.660
I said in the last video.
4

4

00:00:09.660  -->  00:00:11.600
No, we're not done, and in fact,
5

5

00:00:11.600  -->  00:00:14.280
our application won't work at the moment.
6

6

00:00:14.280  -->  00:00:16.690
Now, remember that the
way it's currently written
7

7

00:00:16.690  -->  00:00:19.380
it assumes that the
locations are all available
8

8

00:00:19.380  -->  00:00:20.690
in memory, so it actually loads
9

9

00:00:20.690  -->  00:00:22.430
all the locations in memory.
10

10

00:00:22.430  -->  00:00:25.380
But, of course, that's now no longer true.
11

11

00:00:25.380  -->  00:00:27.350
What we need to do is now, when a player
12

12

00:00:27.350  -->  00:00:29.930
moves to a location, we have to load that
13

13

00:00:29.930  -->  00:00:32.020
location from the random access file
14

14

00:00:32.020  -->  00:00:33.310
that we've created.
15

15

00:00:33.310  -->  00:00:35.380
So, to achieve that, what we need firstly
16

16

00:00:35.380  -->  00:00:38.980
is a getLocation method,
in the locations class,
17

17

00:00:38.980  -->  00:00:41.340
and we also have to close the file
18

18

00:00:41.340  -->  00:00:42.690
when the player quits.
19

19

00:00:42.690  -->  00:00:46.250
So, we'll need to add a
close method, as well.
20

20

00:00:46.250  -->  00:00:48.820
So, let's start off by
adding the close method,
21

21

00:00:48.820  -->  00:00:50.090
mainly because it's easy.
22

22

00:00:50.090  -->  00:00:53.590
So, we're gonna go back to Locations.java,
23

23

00:00:55.160  -->  00:00:58.080
and we'll just add one
right on the bottom,
24

24

00:00:58.080  -->  00:00:58.910
public
25

25

00:01:00.090  -->  00:01:00.920
void close
26

26

00:01:02.550  -->  00:01:05.380
you're gonna throw the IOException
27

27

00:01:06.590  -->  00:01:09.300
and it's gonna be, simply, ra.close.
28

28

00:01:09.300  -->  00:01:11.260
Closing the random access file
29

29

00:01:11.260  -->  00:01:13.390
when the player quits the game.
30

30

00:01:13.390  -->  00:01:14.700
Now, the reason that we're throwing
31

31

00:01:14.700  -->  00:01:16.730
the IOException is that we're going
32

32

00:01:16.730  -->  00:01:18.710
to let all the exceptions bubble up
33

33

00:01:18.710  -->  00:01:20.230
to the operating system.
34

34

00:01:20.230  -->  00:01:21.880
Meaning that the application's going
35

35

00:01:21.880  -->  00:01:23.650
to exit and the exception will be
36

36

00:01:23.650  -->  00:01:24.850
written to the console.
37

37

00:01:24.850  -->  00:01:25.730
So, in other words, we're not going to be
38

38

00:01:25.730  -->  00:01:28.150
doing any processing with any exceptions
39

39

00:01:28.150  -->  00:01:29.680
we do get.
40

40

00:01:29.680  -->  00:01:31.900
Alright, so next thing we need to add,
41

41

00:01:31.900  -->  00:01:34.600
is a getLocation method.
42

42

00:01:34.600  -->  00:01:36.460
And this is going to be used any time
43

43

00:01:36.460  -->  00:01:38.910
the player moves to a new location.
44

44

00:01:38.910  -->  00:01:40.530
And what I might do, is just put
45

45

00:01:40.530  -->  00:01:43.650
that code back up here, towards the top.
46

46

00:01:43.650  -->  00:01:45.350
And I'm going to delete this old static
47

47

00:01:45.350  -->  00:01:48.350
initializer block code, because we don't
48

48

00:01:48.350  -->  00:01:51.150
likely need that, we
obviously replaced that.
49

49

00:01:51.150  -->  00:01:53.950
And, so let's use this location
50

50

00:01:53.950  -->  00:01:56.800
for our getLocation method.
51

51

00:01:56.800  -->  00:01:59.190
So we'll need to return a location object,
52

52

00:01:59.190  -->  00:02:01.230
so we're gonna do public
53

53

00:02:01.230  -->  00:02:02.060
location
54

54

00:02:03.190  -->  00:02:04.990
getLocation.
55

55

00:02:04.990  -->  00:02:07.110
Now, we're going to get the location ID
56

56

00:02:07.110  -->  00:02:08.320
passed as an argument.
57

57

00:02:08.320  -->  00:02:11.150
So, locationId, and we're also going to
58

58

00:02:11.150  -->  00:02:13.690
throw an IOException,
59

59

00:02:13.690  -->  00:02:17.060
and not deal with those
directly, in this method.
60

60

00:02:17.060  -->  00:02:18.250
Alright, so firstly we need to get
61

61

00:02:18.250  -->  00:02:20.680
the index record for this location,
62

62

00:02:20.680  -->  00:02:22.990
so it's gonna be IndexRecord,
63

63

00:02:22.990  -->  00:02:24.490
record is equal to
64

64

00:02:26.030  -->  00:02:26.860
index.get
65

65

00:02:28.650  -->  00:02:30.010
and it's gonna be the location ID
66

66

00:02:30.010  -->  00:02:32.540
that passed as an argument to this method.
67

67

00:02:32.540  -->  00:02:35.930
And next, we want to
start accessing the file,
68

68

00:02:35.930  -->  00:02:37.500
the random access file, so it's gonna be
69

69

00:02:37.500  -->  00:02:38.330
ra.seek,
70

70

00:02:40.820  -->  00:02:42.490
record.getStartByte.
71

71

00:02:43.560  -->  00:02:45.330
So, we're pointing to the correct offset
72

72

00:02:45.330  -->  00:02:47.700
so that we've got access to this location
73

73

00:02:47.700  -->  00:02:49.350
for the random access file.
74

74

00:02:49.350  -->  00:02:52.200
Let's read the ID, int id is equal to
75

75

00:02:52.200  -->  00:02:53.120
ra.readInt.
76

76

00:02:56.250  -->  00:03:00.260
Then, we want to read the
description of the room
77

77

00:03:00.260  -->  00:03:02.510
that's equal to ra.readUTF.
78

78

00:03:03.410  -->  00:03:06.250
Exits is the next thing,
so we're gonna do String,
79

79

00:03:06.250  -->  00:03:10.010
exits is equal to ra.readUTF, again,
80

80

00:03:10.010  -->  00:03:11.860
'cause it's a string.
81

81

00:03:11.860  -->  00:03:15.260
And then we want to
extract the various exits,
82

82

00:03:15.260  -->  00:03:17.190
which if you remember are, actually, saved
83

83

00:03:17.190  -->  00:03:18.600
with commas between them.
84

84

00:03:18.600  -->  00:03:21.230
So, we'll create a
string array to do that.
85

85

00:03:21.230  -->  00:03:25.120
String array, exitPart
is equal to new String,
86

86

00:03:25.120  -->  00:03:27.220
(keyboard clacking)
87

87

00:03:27.220  -->  00:03:29.640
and it's gonna be exits.split
88

88

00:03:33.350  -->  00:03:34.740
and a comma so we're
actually getting all the
89

89

00:03:34.740  -->  00:03:38.080
various exits for this particular location
90

90

00:03:38.080  -->  00:03:41.970
and storing them in a
string array exit part.
91

91

00:03:41.970  -->  00:03:43.290
Alright, next thing we need to do, now,
92

92

00:03:43.290  -->  00:03:45.340
is create a new location.
93

93

00:03:45.340  -->  00:03:47.820
It's gonna be Location,
94

94

00:03:47.820  -->  00:03:50.900
location is equal to new Location,
95

95

00:03:50.900  -->  00:03:53.330
we're going to pass the locationId,
96

96

00:03:53.330  -->  00:03:56.760
the ID of the room, and
then also the description
97

97

00:03:56.760  -->  00:03:58.370
and for the third argument, for the exits,
98

98

00:03:58.370  -->  00:04:02.290
we're gonna pass that null, initially.
99

99

00:04:02.290  -->  00:04:03.500
And the reason for that, if you go back
100

100

00:04:03.500  -->  00:04:06.700
and have a look at our location class,
101

101

00:04:06.700  -->  00:04:08.280
We can see that the constructor,
102

102

00:04:08.280  -->  00:04:10.200
the third parameter, is exits,
103

103

00:04:10.200  -->  00:04:12.960
and from previous videos in this course
104

104

00:04:12.960  -->  00:04:15.340
we've worked on the location class
105

105

00:04:15.340  -->  00:04:16.230
and you can see here we've gotta
106

106

00:04:16.230  -->  00:04:19.400
test that if the the exits are passed
107

107

00:04:19.400  -->  00:04:21.040
to the constructor, then we're creating
108

108

00:04:21.040  -->  00:04:22.400
a new LinkedHashMap.
109

109

00:04:22.400  -->  00:04:24.100
Otherwise, we're just creating a new,
110

110

00:04:24.100  -->  00:04:26.940
empty HashMap, a LinkedHashMap,
111

111

00:04:26.940  -->  00:04:28.240
and then we're actually adding,
112

112

00:04:28.240  -->  00:04:30.750
in either case, a
default exit for quitting
113

113

00:04:30.750  -->  00:04:32.860
which is for location ID zero.
114

114

00:04:32.860  -->  00:04:34.760
So, in other words, we're using the
115

115

00:04:34.760  -->  00:04:37.010
constructor, here, where we haven't yet
116

116

00:04:37.010  -->  00:04:37.840
got the exits.
117

117

00:04:37.840  -->  00:04:38.960
And that's because, so we're going to
118

118

00:04:38.960  -->  00:04:41.740
create those and manually update them.
119

119

00:04:41.740  -->  00:04:42.950
Alright, so, we're passing null,
120

120

00:04:42.950  -->  00:04:44.410
as I mentioned, is the third argument.
121

121

00:04:44.410  -->  00:04:46.190
So, it is still initialising the exits
122

122

00:04:46.190  -->  00:04:47.930
in the location.
123

123

00:04:47.930  -->  00:04:49.790
So, consequently, what we need to do now
124

124

00:04:49.790  -->  00:04:52.210
is we need to send the exits.
125

125

00:04:53.340  -->  00:04:54.740
So, we'll do a test here to make sure
126

126

00:04:54.740  -->  00:04:57.510
we're not dealing with, locationId zero,
127

127

00:04:57.510  -->  00:04:59.960
which is the one we've
set up to quit the game.
128

128

00:04:59.960  -->  00:05:03.310
So, if locationId is not equal to zero,
129

129

00:05:03.310  -->  00:05:04.770
then we're going to go through all the
130

130

00:05:04.770  -->  00:05:06.960
exits that we find and add them,
131

131

00:05:06.960  -->  00:05:08.570
one at a time, to the location.
132

132

00:05:08.570  -->  00:05:10.000
So, for
133

133

00:05:10.000  -->  00:05:12.100
int i equals zero,
134

134

00:05:12.100  -->  00:05:15.480
i is less than exitPart, our array,
135

135

00:05:15.480  -->  00:05:19.400
dot length, i plus plus,
and then for each one,
136

136

00:05:20.580  -->  00:05:21.980
let's actually print out a message.
137

137

00:05:21.980  -->  00:05:26.100
So, we'll start with exitPart is equal to
138

138

00:05:26.100  -->  00:05:27.180
plus exitPart
139

139

00:05:28.710  -->  00:05:29.540
i.
140

140

00:05:31.190  -->  00:05:32.770
Then, we'll also do
141

141

00:05:33.740  -->  00:05:34.580
exitPart,
142

142

00:05:36.700  -->  00:05:38.120
plus one,
143

143

00:05:38.120  -->  00:05:39.040
is equal to
144

144

00:05:40.400  -->  00:05:42.570
plus exitPart, i plus one.
145

145

00:05:43.810  -->  00:05:46.040
So, we're just printing out what we can
146

146

00:05:46.040  -->  00:05:47.460
see in the array.
147

147

00:05:48.740  -->  00:05:49.750
Let's, now, get the direction,
148

148

00:05:49.750  -->  00:05:51.880
so that's gonna be String direction
149

149

00:05:51.880  -->  00:05:53.540
is equal to exitPart
150

150

00:05:54.650  -->  00:05:55.560
i,
151

151

00:05:55.560  -->  00:05:58.390
so we're grabbing the,
just the actual direction
152

152

00:05:58.390  -->  00:05:59.700
for the location.
153

153

00:05:59.700  -->  00:06:03.210
And then the destination is equal to
154

154

00:06:03.210  -->  00:06:04.620
Integer.parseInt,
155

155

00:06:09.060  -->  00:06:11.230
and it's gonna be exitPart
156

156

00:06:12.910  -->  00:06:15.880
and plus plus i, so we're
incrementing i first,
157

157

00:06:15.880  -->  00:06:17.430
and then grabbing that element.
158

158

00:06:17.430  -->  00:06:20.370
'cause if you recall, the exits, it is the
159

159

00:06:20.370  -->  00:06:23.880
actual direction, and
then also the locationId,
160

160

00:06:23.880  -->  00:06:25.950
where that direction goes to which room,
161

161

00:06:25.950  -->  00:06:28.570
effectively, or which
location it leads to.
162

162

00:06:28.570  -->  00:06:29.750
Alright, so we've now got our direction
163

163

00:06:29.750  -->  00:06:31.750
and our our destination, we can add that
164

164

00:06:31.750  -->  00:06:32.580
to the location.
165

165

00:06:32.580  -->  00:06:35.550
So, location.addExit, and that's
166

166

00:06:35.550  -->  00:06:38.220
gonna be direction, destination.
167

167

00:06:39.660  -->  00:06:40.780
And then, all importantly, we need to
168

168

00:06:40.780  -->  00:06:43.890
return the location that
we've actually built up
169

169

00:06:43.890  -->  00:06:45.140
in this method.
170

170

00:06:46.190  -->  00:06:48.670
So, that should now grab the location
171

171

00:06:48.670  -->  00:06:50.150
from the random access file.
172

172

00:06:50.150  -->  00:06:53.580
It builds up the,
obviously, the description
173

173

00:06:53.580  -->  00:06:55.900
and the exits, creates a location object,
174

174

00:06:55.900  -->  00:06:58.740
and then adds the various
exits to the location
175

175

00:06:58.740  -->  00:07:00.540
and then returns that.
176

176

00:07:00.540  -->  00:07:01.740
So, again, just going through this.
177

177

00:07:01.740  -->  00:07:04.250
We're starting off here on line 87.
178

178

00:07:04.250  -->  00:07:06.150
We're getting the
StartByte, so we're moving
179

179

00:07:06.150  -->  00:07:08.190
the far pointer to the locations offset
180

180

00:07:08.190  -->  00:07:10.770
by using the seek method, from our
181

181

00:07:10.770  -->  00:07:12.470
random access file.
182

182

00:07:12.470  -->  00:07:13.870
And as I mentioned previously,
183

183

00:07:13.870  -->  00:07:15.500
even though we know the ID, we're actually
184

184

00:07:15.500  -->  00:07:18.340
retrieving the locationId
because we stored
185

185

00:07:18.340  -->  00:07:20.390
that when we wrote, and I mentioned that's
186

186

00:07:20.390  -->  00:07:22.790
good practise to do that anyway, in case,
187

187

00:07:22.790  -->  00:07:24.750
for some reason, that
you wanted to access it
188

188

00:07:24.750  -->  00:07:26.820
without knowing the locationId.
189

189

00:07:26.820  -->  00:07:28.700
We've got that information on file,
190

190

00:07:28.700  -->  00:07:30.250
so it's really more or less a sanity test,
191

191

00:07:30.250  -->  00:07:31.750
is what we're using that for.
192

192

00:07:31.750  -->  00:07:32.930
So, we have to skip past that,
193

193

00:07:32.930  -->  00:07:34.850
because we've recorded that, then move on
194

194

00:07:34.850  -->  00:07:37.590
to the description on line 89.
195

195

00:07:37.590  -->  00:07:39.220
And, by the way, in case you're wondering
196

196

00:07:39.220  -->  00:07:41.450
how the readUTF method knows how many
197

197

00:07:41.450  -->  00:07:43.300
bytes to read, because after all,
198

198

00:07:43.300  -->  00:07:44.860
if you think about it,
it can't really know
199

199

00:07:44.860  -->  00:07:46.960
how long the description is, by magic.
200

200

00:07:46.960  -->  00:07:48.530
Well, the reason it knows is because
201

201

00:07:48.530  -->  00:07:51.150
the writeUTF method, it actually writes
202

202

00:07:51.150  -->  00:07:53.390
the link to the string, followed by
203

203

00:07:53.390  -->  00:07:54.870
the string itself.
204

204

00:07:54.870  -->  00:07:57.260
So, therefore, the readUTF method
205

205

00:07:57.260  -->  00:07:59.680
reads the link first and then it reads the
206

206

00:07:59.680  -->  00:08:00.920
appropriate number of bytes.
207

207

00:08:00.920  -->  00:08:02.310
So, that's all happening
behind the scenes,
208

208

00:08:02.310  -->  00:08:04.150
which is pretty cool.
209

209

00:08:04.150  -->  00:08:06.530
Right, so after getting the description
210

210

00:08:06.530  -->  00:08:10.540
on line 89, we're then
retrieving the exits.
211

211

00:08:10.540  -->  00:08:12.380
And then we're extracting that into a
212

212

00:08:12.380  -->  00:08:14.880
string array, which you saw on line 91,
213

213

00:08:14.880  -->  00:08:16.890
and creating a new location object that
214

214

00:08:16.890  -->  00:08:18.640
initially has no exits.
215

215

00:08:18.640  -->  00:08:21.470
And then from lines 96 through 101
216

216

00:08:22.330  -->  00:08:25.600
we're actually adding the
exits to the location.
217

217

00:08:25.600  -->  00:08:27.330
And I added new string exits here,
218

218

00:08:27.330  -->  00:08:28.690
I could have just, I
didn't have to do that,
219

219

00:08:28.690  -->  00:08:29.750
I could have just changed that,
220

220

00:08:29.750  -->  00:08:32.830
by the way, and just made that exits.
221

221

00:08:34.080  -->  00:08:34.910
Either way will actually work,
222

222

00:08:34.910  -->  00:08:35.850
then it's probably better to do it
223

223

00:08:35.850  -->  00:08:38.200
that way to avoid any confusion.
224

224

00:08:38.200  -->  00:08:39.450
Right, so at this point, now, we've got
225

225

00:08:39.450  -->  00:08:41.730
a method, getLocation, that we can use
226

226

00:08:41.730  -->  00:08:43.620
any time we move the player, or the player
227

227

00:08:43.620  -->  00:08:46.330
moves to a different location.
228

228

00:08:46.330  -->  00:08:47.400
So, what we now need to do is go
229

229

00:08:47.400  -->  00:08:50.040
to the main class' Main method to get,
230

230

00:08:50.040  -->  00:08:51.390
or to actually add the call to the
231

231

00:08:51.390  -->  00:08:53.810
getLocation method, rather than getting
232

232

00:08:53.810  -->  00:08:55.820
location information from map.
233

233

00:08:55.820  -->  00:08:57.810
So, let's go back to the Main method.
234

234

00:08:57.810  -->  00:09:01.220
Gonna have a look at our Main code, here.
235

235

00:09:02.340  -->  00:09:04.570
So, basically before the while true
236

236

00:09:04.570  -->  00:09:05.610
what we need to do is we're gonna
237

237

00:09:05.610  -->  00:09:09.140
start off by creating the first location
238

238

00:09:09.140  -->  00:09:11.220
so it's gonna be, we'll
actually get rid of this
239

239

00:09:11.220  -->  00:09:13.390
commented out, int location equals one,
240

240

00:09:13.390  -->  00:09:16.550
so after the loc equals 64, on line 29
241

241

00:09:16.550  -->  00:09:18.880
we're going to add Location,
242

242

00:09:20.510  -->  00:09:21.760
currentLocation
243

243

00:09:23.160  -->  00:09:24.010
is equal to
244

244

00:09:24.010  -->  00:09:25.850
locations.getLocation,
245

245

00:09:27.360  -->  00:09:29.100
the method we just wrote, and we'll pass
246

246

00:09:29.100  -->  00:09:30.520
loc to that, which is going to be the
247

247

00:09:30.520  -->  00:09:33.410
location 64, which is our start.
248

248

00:09:33.410  -->  00:09:35.090
And what we're going to do is, up here,
249

249

00:09:35.090  -->  00:09:36.380
we're going to throw the exception
250

250

00:09:36.380  -->  00:09:37.220
while I mention this we're going to
251

251

00:09:37.220  -->  00:09:38.990
do that for our exceptions.
252

252

00:09:38.990  -->  00:09:40.730
If you wanted to handle that, you could.
253

253

00:09:40.730  -->  00:09:42.450
But, we're just going to
keep that simple, there.
254

254

00:09:42.450  -->  00:09:43.370
Throw the exceptions from Main
255

255

00:09:43.370  -->  00:09:44.900
to remove that error.
256

256

00:09:44.900  -->  00:09:45.860
Right, so we've currently, we've got
257

257

00:09:45.860  -->  00:09:47.980
our first location.
258

258

00:09:47.980  -->  00:09:50.580
And we're still going
to leave this locations
259

259

00:09:50.580  -->  00:09:52.430
getDescription, but we
just need to change it
260

260

00:09:52.430  -->  00:09:53.890
marginally, and it's gonna be,
261

261

00:09:53.890  -->  00:09:55.840
instead of Locations.get loc, we're gonna
262

262

00:09:55.840  -->  00:10:00.150
change that to be
currentLocation.getDescription.
263

263

00:10:00.150  -->  00:10:03.220
And, for the break, instead of checking
264

264

00:10:03.220  -->  00:10:04.690
for the variable loc, and in actual fact,
265

265

00:10:04.690  -->  00:10:06.860
what I'll do here is I'm
going to remove that.
266

266

00:10:06.860  -->  00:10:08.600
We don't really need that anymore.
267

267

00:10:08.600  -->  00:10:10.690
And I'm gonna change that to be 64,
268

268

00:10:10.690  -->  00:10:12.380
which is our starting room.
269

269

00:10:12.380  -->  00:10:14.720
And again that's, you might want to
270

270

00:10:14.720  -->  00:10:16.880
code that as a constant, to, you know,
271

271

00:10:16.880  -->  00:10:18.090
call it starting room or something
272

272

00:10:18.090  -->  00:10:19.430
along those lines.
273

273

00:10:19.430  -->  00:10:20.500
And we're gonna change this, instead of
274

274

00:10:20.500  -->  00:10:21.980
loc equals zero, we're going, what if,
275

275

00:10:21.980  -->  00:10:24.390
currentLocation.getLocationID
276

276

00:10:26.190  -->  00:10:27.450
is equal to zero, then break.
277

277

00:10:27.450  -->  00:10:28.630
So, we'll know, automatically, if we've
278

278

00:10:28.630  -->  00:10:31.040
reached the room with
the location ID zero.
279

279

00:10:31.040  -->  00:10:32.110
We know that we can, actually,
280

280

00:10:32.110  -->  00:10:33.890
break out of this altogether.
281

281

00:10:33.890  -->  00:10:36.810
And then this map here that, on line 38,
282

282

00:10:36.810  -->  00:10:40.310
that currently is using
locations.get(loc).getExits,
283

283

00:10:40.310  -->  00:10:42.290
well we can change that, again, to use
284

284

00:10:42.290  -->  00:10:44.930
the current location that we've created.
285

285

00:10:44.930  -->  00:10:46.830
So, it's gonna be
286

286

00:10:46.830  -->  00:10:48.920
currentLocation.getExits.
287

287

00:10:50.260  -->  00:10:51.880
And then down here on line 57,
288

288

00:10:51.880  -->  00:10:53.650
you can see that we're
updating the loc variable,
289

289

00:10:53.650  -->  00:10:55.730
well in actual fact what we wanna do here
290

290

00:10:55.730  -->  00:10:56.840
is change that.
291

291

00:10:56.840  -->  00:10:58.640
Instead of the loc variable being updated,
292

292

00:10:58.640  -->  00:11:00.920
we actually wanna update
our currentLocation object.
293

293

00:11:00.920  -->  00:11:04.010
So we top currentLocation, it equals,
294

294

00:11:05.240  -->  00:11:08.820
and it's going to be
locations.getLocation,
295

295

00:11:10.250  -->  00:11:14.170
and we're going to do
currentLocation.getExits,
296

296

00:11:15.250  -->  00:11:18.670
then dot get(direction).
297

297

00:11:20.820  -->  00:11:21.940
So, you can see there we're updating our
298

298

00:11:21.940  -->  00:11:23.600
currentLocation, we're moving to
299

299

00:11:23.600  -->  00:11:25.530
whatever direction was actually
300

300

00:11:25.530  -->  00:11:27.640
selected by the user, and updating our
301

301

00:11:27.640  -->  00:11:29.410
currentLocation, so consequently when the
302

302

00:11:29.410  -->  00:11:30.790
while loop goes through again,
303

303

00:11:30.790  -->  00:11:32.590
we can print out the
description of the new room
304

304

00:11:32.590  -->  00:11:34.460
and we've got all these other tests here,
305

305

00:11:34.460  -->  00:11:36.200
testing to see whether
that location's zero,
306

306

00:11:36.200  -->  00:11:38.940
to break out, and also updating our exits
307

307

00:11:38.940  -->  00:11:41.660
while using the
currentLocation.getExits method
308

308

00:11:41.660  -->  00:11:42.580
on line 38.
309

309

00:11:43.930  -->  00:11:45.130
And one last thing we need to do
310

310

00:11:45.130  -->  00:11:48.970
is right after we've
actually exited the loop,
311

311

00:11:48.970  -->  00:11:51.980
so, basically down here,
what we wanna do is
312

312

00:11:51.980  -->  00:11:53.310
locations.close.
313

313

00:11:55.040  -->  00:11:56.570
So, we wanna actually close that file
314

314

00:11:56.570  -->  00:11:59.740
when the player's
actually exited the game.
315

315

00:11:59.740  -->  00:12:00.970
Alright, so at this point, with the
316

316

00:12:00.970  -->  00:12:03.420
various changes we've made, we should be
317

317

00:12:03.420  -->  00:12:05.140
able to run the application and play it
318

318

00:12:05.140  -->  00:12:07.300
exactly the same as we've done before.
319

319

00:12:07.300  -->  00:12:08.440
Let's just try running it to see
320

320

00:12:08.440  -->  00:12:09.640
that it'll actually work.
321

321

00:12:09.640  -->  00:12:11.020
So, I'm running the Main method
322

322

00:12:11.020  -->  00:12:12.690
from the Main class.
323

323

00:12:15.210  -->  00:12:16.090
And we've got our print out, there,
324

324

00:12:16.090  -->  00:12:17.770
just showing the various locations
325

325

00:12:17.770  -->  00:12:18.870
just as a test.
326

326

00:12:18.870  -->  00:12:21.070
And we've started off okay, so, we're at
327

327

00:12:21.070  -->  00:12:24.390
a complex junction, let's just try moving.
328

328

00:12:24.390  -->  00:12:25.770
(keyboard clacking)
329

329

00:12:25.770  -->  00:12:26.830
And if we move down again,
330

330

00:12:26.830  -->  00:12:28.190
(keyboard clacking)
331

331

00:12:28.190  -->  00:12:30.360
Complex junction, if we just change this,
332

332

00:12:30.360  -->  00:12:32.150
also, we'll quit out of that, just to
333

333

00:12:32.150  -->  00:12:33.490
make sure that it is working.
334

334

00:12:33.490  -->  00:12:36.970
And we'll go back and we'll change the ID.
335

335

00:12:36.970  -->  00:12:39.540
We'll get location 64
with, which you may recall
336

336

00:12:39.540  -->  00:12:41.650
from some videos ago, we changed it
337

337

00:12:41.650  -->  00:12:43.280
so we got to a different part of the game,
338

338

00:12:43.280  -->  00:12:44.950
change it to location one, which is
339

339

00:12:44.950  -->  00:12:46.490
the starting location.
340

340

00:12:46.490  -->  00:12:49.200
And let's just run that, to make sure
341

341

00:12:49.200  -->  00:12:51.200
we are starting in the right place.
342

342

00:12:51.200  -->  00:12:52.480
You're standing at the end of a road
343

343

00:12:52.480  -->  00:12:54.100
before a small, brick building.
344

344

00:12:54.100  -->  00:12:57.740
So that's good, so can go, say, west here.
345

345

00:12:57.740  -->  00:12:58.990
You walked up a hill, still in the forest,
346

346

00:12:58.990  -->  00:13:01.570
east, we're back to where we were before.
347

347

00:13:01.570  -->  00:13:02.400
South,
348

348

00:13:03.390  -->  00:13:04.790
north,
349

349

00:13:04.790  -->  00:13:06.410
up,
350

350

00:13:06.410  -->  00:13:07.990
down,
351

351

00:13:07.990  -->  00:13:09.890
We can't walk down it again, we need to
352

352

00:13:09.890  -->  00:13:11.260
move to another location due to the way
353

353

00:13:11.260  -->  00:13:12.410
the game's been programmed.
354

354

00:13:12.410  -->  00:13:14.510
East, we're back to where we were before.
355

355

00:13:14.510  -->  00:13:17.290
Okay, then we quit out of it.
356

356

00:13:17.290  -->  00:13:18.570
Alright, so you can see that we've
357

357

00:13:18.570  -->  00:13:21.550
now modified our entire application,
358

358

00:13:21.550  -->  00:13:23.680
here, and we're no longer reading
359

359

00:13:23.680  -->  00:13:25.030
all the locations from memory.
360

360

00:13:25.030  -->  00:13:28.120
So, we've now got the
basic shell of a game
361

361

00:13:28.120  -->  00:13:29.850
that could potentially have thousands,
362

362

00:13:29.850  -->  00:13:31.030
or perhaps even tens of thousands
363

363

00:13:31.030  -->  00:13:33.010
of different locations and we haven't
364

364

00:13:33.010  -->  00:13:34.220
got any problems with the amount of
365

365

00:13:34.220  -->  00:13:35.720
memory we're consuming for that
366

366

00:13:35.720  -->  00:13:38.110
because we're only
loading in the locations
367

367

00:13:38.110  -->  00:13:39.510
one at a time, directly from our
368

368

00:13:39.510  -->  00:13:40.550
random access file.
369

369

00:13:40.550  -->  00:13:43.600
So, in other words,
they're loaded on demand.
370

370

00:13:43.600  -->  00:13:44.620
So, at this point, you know, now,
371

371

00:13:44.620  -->  00:13:46.910
how to use a random access file
372

372

00:13:46.910  -->  00:13:49.230
to load data on demand.
373

373

00:13:49.230  -->  00:13:51.280
Now we move the file pointer to the offset
374

374

00:13:51.280  -->  00:13:53.510
and we want to read, and then we read it.
375

375

00:13:53.510  -->  00:13:55.550
And as you learned, if we're reading
376

376

00:13:55.550  -->  00:13:57.380
and writing data sequentially,
377

377

00:13:57.380  -->  00:13:59.170
we don't have to explicitly move
378

378

00:13:59.170  -->  00:14:00.660
the file pointer ourselves.
379

379

00:14:00.660  -->  00:14:02.230
But in a random file access scenario,
380

380

00:14:02.230  -->  00:14:04.430
of course, we'll need to do that.
381

381

00:14:04.430  -->  00:14:05.580
So, that's all the coverage I have
382

382

00:14:05.580  -->  00:14:08.590
for the java.IO package, but starting in
383

383

00:14:08.590  -->  00:14:09.960
the next video, I'm gonna take a look
384

384

00:14:09.960  -->  00:14:12.220
at the java.NIO package.
385

385

00:14:12.220  -->  00:14:13.220
So, we're gonna talk about what
386

386

00:14:13.220  -->  00:14:15.280
the java NIO is, and then we'll
387

387

00:14:15.280  -->  00:14:17.560
actually get stuck into how to use it.
388

388

00:14:17.560  -->  00:14:20.060
So, see you in the next video.
