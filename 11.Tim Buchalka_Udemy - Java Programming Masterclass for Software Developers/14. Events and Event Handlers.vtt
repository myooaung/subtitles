WEBVTT
1
1

00:00:05.330  -->  00:00:09.970
so we've now seen some of the controls
that we can use to build our
2

2

00:00:09.970  -->  00:00:14.890
UIs and then also the layout
managers that manage those controls
3

3

00:00:14.890  -->  00:00:19.580
for us but when we interacted with the
controls in the controls project
4

4

00:00:19.580  -->  00:00:23.700
that we work on last time we could see
sometimes that the state of a control
5

5

00:00:23.700  -->  00:00:28.540
changed but the application was unaware
of this for example nothing happened when
6

6

00:00:28.540  -->  00:00:33.070
we press the click me button and nothing
also happen when we selected a
7

7

00:00:33.070  -->  00:00:37.770
radio button or type text into the text
field so we build a user interface so
8

8

00:00:37.770  -->  00:00:42.740
that the user can interact with it and provide
information or data for the application
9

9

00:00:42.740  -->  00:00:47.010
to process and when we press the run button
in IntelliJ then IntelliJ runs the
10

10

00:00:47.010  -->  00:00:50.390
application we're working on and we
type into the editor area
11

11

00:00:51.490  -->  00:00:55.010
IntelliJ does actually syntax checking
and colors the code to make it easy for
12

12

00:00:55.010  -->  00:00:59.060
us to read so we can ask IntelliJ to
open projects to show us the Settings
13

13

00:00:59.060  -->  00:01:04.700
and dialogs etc so how does IntelliJ
know what code to run when we press one
14

14

00:01:04.700  -->  00:01:10.510
of its toolbar buttons so this is where
events and event handling start coming
15

15

00:01:10.510  -->  00:01:15.660
into play when the application wants to do
something because the users interacted
16

16

00:01:15.660  -->  00:01:19.840
with a control it will run a
method that's known as the event handler
17

17

00:01:19.840  -->  00:01:24.100
so what we gonna do here is write an event handler for a button just to see how this
18

18

00:01:24.100  -->  00:01:28.770
works so I've created a new JavaFX project so do that as you would
19

19

00:01:28.770  -->  00:01:34.400
normally do and I've used events for the
name here so we are going to start by adding a button
20

20

00:01:34.400  -->  00:01:39.740
to our grid pane and we go to the FXML and add a button with the text that has a
21

21

00:01:39.740  -->  00:01:43.200
message and we are gonna placed it in the first row so lets go to the sample.fxml
22

22

00:01:43.200  -->  00:01:50.660
...I'm gonna add this button so....
23

23

00:01:52.150  -->  00:01:55.560
.....
24

24

00:01:55.560  -->  00:02:11.400
...and when we run this the first time as you've seen in previous
25

25

00:02:11.400  -->  00:02:17.190
videos we got a button nothing actually happens when we
click the button that's because we
26

26

00:02:17.190  -->  00:02:22.180
haven't added any event handling for
that at this stage close that down so in other
27

27

00:02:22.180  -->  00:02:26.300
words we haven't added the code its gonna
make our application pay attention to
28

28

00:02:26.300  -->  00:02:30.190
when the button is clicked now before
we do we have to talk about the concept
29

29

00:02:30.190  -->  00:02:35.240
of a procedural driven program versus an event driven program so console
30

30

00:02:35.240  -->  00:02:40.410
applications that we've used primarily in
this course prior to this section or
31

31

00:02:40.410  -->  00:02:44.150
other ones that don't have a user interface are procedural driven so in other
32

32

00:02:44.150  -->  00:02:47.810
words they run from the entry point of
the application to the last line of the
33

33

00:02:47.810  -->  00:02:51.890
code so it may be conditional statement
that influence exactly which code is
34

34

00:02:51.890  -->  00:02:56.830
executed but when the application runs we'll know roughly what order each method and
35

35

00:02:56.830  -->  00:03:01.730
line of code will actually be executed
but UI applications are event driven
36

36

00:03:01.730  -->  00:03:07.500
and that's because the user dictates
what code will be run and when and that's by
37

37

00:03:07.500  -->  00:03:12.830
clicking on particular controls on the
screen so to use an analogy let's think
38

38

00:03:12.830  -->  00:03:16.720
about IntelliJ again so when we run IntelliJ it doesn't run it's code
39

39

00:03:16.720  -->  00:03:20.630
from beginning to end and then stop executing the window remains up and the
40

40

00:03:20.630  -->  00:03:25.580
application has no idea what the user
i.e. us the programmers want to do with it so
41

41

00:03:25.580  -->  00:03:30.690
one user might start by creating
a new file but another user might open
42

42

00:03:30.690  -->  00:03:34.630
the settings dialog someone else might
create a new project the go to help then
43

43

00:03:34.630  -->  00:03:38.890
rearranged the layout of the main window
perhaps so IntelliJ will only close or
44

44

00:03:38.890  -->  00:03:43.450
stop executing when the user tells it to
by closing the main window of course by
45

45

00:03:43.450  -->  00:03:47.420
going into file and selecting exit which
no doubt you have done before
46

46

00:03:47.420  -->  00:03:53.580
so typically the life cycle of a UI
program is as follows you will run the
47

47

00:03:53.580  -->  00:03:58.330
initialization code it will then build the
main user interface and it will then
48

48

00:03:58.330  -->  00:04:02.440
wait for user input when the user
does something for example pressing a
49

49

00:04:02.440  -->  00:04:04.510
button or typing something into a field
50

50

00:04:04.510  -->  00:04:08.580
or perhaps selecting a menu item the
application will run the code that handles
51

51

00:04:08.580  -->  00:04:12.900
that particular event based on what the
user has actually done what they have click or
52

52

00:04:12.900  -->  00:04:18.410
what they interacted with the controller on the screen so its gonna run
53

53

00:04:18.410  -->  00:04:22.420
event handler for that particular event
when the user closes the main window
54

54

00:04:22.420  -->  00:04:26.680
or indicates that in some other way that
they like to exit the application any cleanup
55

55

00:04:26.680  -->  00:04:31.250
code will run and the application will then exit at that point so in this lecture
56

56

00:04:31.250  -->  00:04:35.210
we are interested in that part of the cycle where
the application is waiting for user
57

57

00:04:35.210  -->  00:04:36.460
input
58

58

00:04:36.460  -->  00:04:42.850
so in JavaFX the JavaFX application thread
also known as the UI thread waits for
59

59

00:04:42.850  -->  00:04:46.570
user input so later on and we'll come back
to this thread and actually the later
60

60

00:04:46.570  -->  00:04:50.870
section of the course we will be going to
threads in more detail but for now lets go
61

61

00:04:50.870  -->  00:04:55.350
back to this example that we've got our say hello app button so when the user
62

62

00:04:55.350  -->  00:04:59.930
presses a button or interacts with any
type of control an event is actually
63

63

00:04:59.930  -->  00:05:05.920
raise on the UI thread so in other words
the UI thread notices that the users
64

64

00:05:05.920  -->  00:05:09.970
done something and then check to see if
any part of the application has
65

65

00:05:09.970  -->  00:05:13.630
expressed interest in handling whatever
the user is done for that or
66

66

00:05:13.630  -->  00:05:17.720
interacted with for that particular
control so if it finds something its
67

67

00:05:17.720  -->  00:05:20.910
going to run the event handler the
application has associated with that
68

68

00:05:20.910  -->  00:05:25.730
event in our case what we like to do is we like
to run an event handler when the
69

69

00:05:25.730  -->  00:05:32.340
user presses the say hello button so the first step
is to write the event handler so do we
70

70

00:05:32.340  -->  00:05:36.270
put this method in main.java well actually no we don't do that this is
71

71

00:05:36.270  -->  00:05:42.080
where the controller.java file comes in and I'll put it on the screen now and we haven't really
72

72

00:05:42.080  -->  00:05:46.600
done anything with this in the past so
far it has remained empty for pretty well
73

73

00:05:46.600  -->  00:05:50.110
everything that we've done that in this
section of the course but now we're at
74

74

00:05:50.110  -->  00:05:53.990
the stage of needing to use it you
probably recall that JavaFX was
75

75

00:05:53.990  -->  00:05:58.080
designated with the MVC or
model-view-controller patent in mind so
76

76

00:05:58.080  -->  00:06:01.980
the control if you recall is the part of
the application that handles user input
77

77

00:06:01.980  -->  00:06:06.750
so obviously makes sense then that our event handlers are actually put into the
78

78

00:06:06.750  -->  00:06:11.260
controller class for that reason so
we've got the controller.java class
79

79

00:06:11.260  -->  00:06:13.700
open on the screen now so lets add a method
called
80

80

00:06:13.700  -->  00:06:17.560
OnButtonAction and what we're going to do is
when this method is run its just going to
81

81

00:06:17.560  -->  00:06:25.180
print a simple message on the console so
we're gonna go into the their and type....
82

82

00:06:25.180  -->  00:06:40.970
...so if we run this now click on say hello nothing happens so
83

83

00:06:40.970  -->  00:06:45.840
why does anything happen well its because we haven't associated the event handler with the button yet so
84

84

00:06:46.790  -->  00:06:51.880
we created our code we've created our event handler
but we haven't added that the
85

85

00:06:51.880  -->  00:06:55.900
association so the button knows to call that particular method
86

86

00:06:55.900  -->  00:07:01.710
when it's actually pressed to do that we
need to go back to our FXML file and
87

87

00:07:01.710  -->  00:07:05.640
select the button's on action property in
the event handler so lets go and have a look at that
88

88

00:07:05.640  -->  00:07:17.750
....so going back to our button we need to add.....
89

89

00:07:17.750  -->  00:07:22.090
......and that IntelliJ is way of telling us that there was
90

90

00:07:22.090  -->  00:07:29.150
actually a method their called on button clicked so if we run this now we've written the event handler and we've
91

91

00:07:29.150  -->  00:07:34.470
associated the event click on say hello
notice the hello is appearing on the console down the bottom
92

92

00:07:34.470  -->  00:07:38.070
left hand corner of the screen so we've now got an
association and that code has been
93

93

00:07:38.070  -->  00:07:43.570
invoked each time the button is clicked
so that is so we've now written that event handler
94

94

00:07:43.570  -->  00:07:47.590
and we have associated with our button and when we press
the button the UI thread checks to see
95

95

00:07:47.590  -->  00:07:51.070
if there's an event handler for that
particular event so in our case there
96

96

00:07:51.070  -->  00:07:55.050
is so it dispatches that event to the
event handler and as you saw on the screen our
97

97

00:07:55.050  -->  00:08:00.050
method then runs so another way of saying that an
application is interested in handing
98

98

00:08:00.050  -->  00:08:04.460
our even is saying that its listing for
an event and for that reason event
99

99

00:08:04.460  -->  00:08:08.650
handlers are sometimes referred to as
event listeners and you'll see that terminology
100

100

00:08:08.650  -->  00:08:12.950
a lot an Android app development and I've
talk about that extensively in my
101

101

00:08:12.950  -->  00:08:17.670
android course so let's continue
on now so go back to FXML I'm going to close the application
102

102

00:08:17.670  -->  00:08:22.920
down and lets add a text field to our grid pane so we are going to move our button down to
103

103

00:08:22.920  -->  00:08:23.610
the second row
104

104

00:08:23.610  -->  00:08:32.430
and place a text field into the first
row so I'm going to make the button now....
105

105

00:08:32.430  -->  00:08:45.890
....
106

106

00:08:45.890  -->  00:08:52.490
....and lets now change our event handler so that when the button is pressed
107

107

00:08:52.490  -->  00:08:56.600
hello comma followed by whether it was
typed in the fields is going to be written to
108

108

00:08:56.600  -->  00:09:01.240
to the console so I'm gonna go back to controler.java to modify this event handler so lets do
109

109

00:09:01.240  -->  00:09:06.740
that for the moment you can see its only printing hello
but now we can reference the
110

110

00:09:06.740  -->  00:09:11.480
text field in our code but actually before
that will go back to our FXML
111

111

00:09:11.480  -->  00:09:18.900
for the text field because what we're gonna do is change
it now so whatever has been typed
112

112

00:09:18.900  -->  00:09:24.570
into the text field is shown on the console so we are gonna put hello comma and whatever the content was type
113

113

00:09:24.570  -->  00:09:28.850
to the text field so to do that we need
to know how to associate and retrieve
114

114

00:09:28.850  -->  00:09:32.770
the value in the text field so what we need to
do is to go to the text field and we need to
115

115

00:09:32.770  -->  00:09:39.130
assign and fx id to it  so we do that by typing...and whenever you
116

116

00:09:39.130  -->  00:09:48.930
want to assign it to I'm just gonna call it name field....so we've now got that ID and then we go back now to our controller now we've done
117

117

00:09:48.930  -->  00:09:53.630
that and we're going to create an
instance variable or field for this
118

118

00:09:53.630  -->  00:09:58.910
controls ultimately we can actually
retrieve the data out of it now the important thing
119

119

00:09:58.910  -->  00:10:02.700
here is to make sure that the variable
has the exact same name as the fx ID
120

120

00:10:02.700  -->  00:10:14.090
which we have assigned so we do....
121

121

00:10:14.090  -->  00:10:17.500
...
122

122

00:10:17.500  -->  00:10:27.600
...and just being careful to make sure
the ID matches exactly to whats in here and we will come back to
123

123

00:10:27.600  -->  00:10:30.930
this particular error and why that's coming up
in a minute so we will go back to the controller
124

124

00:10:30.930  -->  00:10:35.310
code and now what we can do is on button click is we can
put hello...
125

125

00:10:35.310  -->  00:10:45.860
...and then we can get data basically from
126

126

00:10:45.860  -->  00:10:47.060
text field by doing that
127

127

00:10:47.060  -->  00:10:55.670
so if we try to run this and type in say Tim so it should come up and say hello
128

128

00:10:55.670  -->  00:10:59.940
comma space Tim click on that we
actually get an exception we actually
129

129

00:10:59.940  -->  00:11:05.200
get a null pointer exception basically
on line 9 and that's because we're going to
130

130

00:11:05.200  -->  00:11:08.130
talk about why that is but that's the
namefield.gettext which is
131

131

00:11:08.130  -->  00:11:12.350
actually erroring out at the moment so we
need to tell the Java Runtime that when
132

132

00:11:12.350  -->  00:11:16.440
we run our application it then creates the
instance of our controller class it
133

133

00:11:16.440  -->  00:11:20.220
should have assigned the text field it
created from the fxml to the
134

134

00:11:20.220  -->  00:11:26.220
name field instance variables just to make that clear we've got a field we have created here
135

135

00:11:26.220  -->  00:11:30.930
instance variable name field we've also got one
in the fxml but at the moment
136

136

00:11:30.930  -->  00:11:34.530
there's no real association with the two
because they're actually separate things
137

137

00:11:34.530  -->  00:11:38.370
so theirs one that's been created in the
fxml and effectively one that's
138

138

00:11:38.370  -->  00:11:42.470
been created in our controller.java
but we haven't really associated that's
139

139

00:11:42.470  -->  00:11:46.520
and that is what what we need to do we need to tell the JavaFX runtime that when
140

140

00:11:46.520  -->  00:11:51.700
we run our application it creates the
controller class instance of it needs to assign
141

141

00:11:51.700  -->  00:11:56.050
the text field it created from the fxml
to the name field instance variable
142

142

00:11:56.050  -->  00:12:01.160
and the way we do that is we annotate the instance variable declaration we
143

143

00:12:01.160  -->  00:12:07.620
the @fxml in the controller code so
will come up here and we actually type it....
144

144

00:12:07.620  -->  00:12:12.520
.....and accept the import
145

145

00:12:14.540  -->  00:12:19.500
we just have a look at our fxml again notice that error disappeared and if
146

146

00:12:19.500  -->  00:12:31.290
run our code now and type in something Tim you can see it actually worked on the screen now
147

147

00:12:31.290  -->  00:12:41.010
....so when the JavaFX runtime
instantiated our controller what it
148

148

00:12:41.010  -->  00:12:45.680
did was it assigned or another term
for this is injected the reference to
149

149

00:12:45.680  -->  00:12:50.820
the text field into the name field variable
so it matches fxml definitions
150

150

00:12:50.820  -->  00:12:54.860
to variables by looking for exact
name matches between the fx ID values
151

151

00:12:54.860  -->  00:12:59.500
and the variable names so in other words
you need to make sure that this is
152

152

00:12:59.500  -->  00:13:06.130
type exactly so we could this one name field 2 and run this again
153

153

00:13:06.130  -->  00:13:17.640
notice how that's now assigned now if we run that.....we actually get an error and that's because this name
154

154

00:13:17.640  -->  00:13:25.460
here name field is different to this
name in their but if I delete that notice how that is now
155

155

00:13:25.460  -->  00:13:38.510
folded which we know the association their and of course when we run it actually works just fine so that said
156

156

00:13:38.510  -->  00:13:39.700
it's also a good idea
157

157

00:13:39.700  -->  00:13:44.020
to annotate event handlers its not actually
a requirement but it really helps
158

158

00:13:44.020  -->  00:13:47.920
developers who might read our code at a later time and then this includes
159

159

00:13:47.920  -->  00:13:52.180
yourself as well and the reason for it
is that they will be able to see at a glance the
160

160

00:13:52.180  -->  00:13:56.300
method is an event handler associated
with the controller and the fxml
161

161

00:13:56.300  -->  00:14:03.990
so lets add the annotation to the event handler now so we come up here and we put...
162

162

00:14:03.990  -->  00:14:11.050
...so I'm gonna end this
video here in the next video we're
163

163

00:14:11.050  -->  00:14:14.750
going to continue on we are gonna start
looking at using parameters for event
164

164

00:14:14.750  -->  00:14:18.310
handlers and will actually start by modifying this method actually the on
165

165

00:14:18.310  -->  00:14:22.270
button click method to have a parameter
and so we can understand a little bit more
166

166

00:14:22.270  -->  00:14:24.580
about the events and so forth that are
167

167

00:14:24.580  -->  00:14:28.630
actually passed to this method so let's
get cracking on that in the next video
