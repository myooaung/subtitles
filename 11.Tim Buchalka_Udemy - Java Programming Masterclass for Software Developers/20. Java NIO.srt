1
1

00:00:05,550  -->  00:00:08,590
- [Tim Buchalka] In Java 1.4,
a new I/O package was added
2

2

00:00:08,590  -->  00:00:10,940
to the Java Software Development Kit.
3

3

00:00:10,940  -->  00:00:12,910
Now they called it java.nio,
4

4

00:00:12,910  -->  00:00:15,350
and the package was described
back then as an improvement
5

5

00:00:15,350  -->  00:00:17,230
to Java I/O,
6

6

00:00:17,230  -->  00:00:20,920
and that's because the classes
in the package perform I/O
7

7

00:00:20,920  -->  00:00:23,200
in a non-blocking manner.
8

8

00:00:23,200  -->  00:00:26,350
Now, java.nio was also
meant to fix some of
9

9

00:00:26,350  -->  00:00:28,640
the inherent problems
developers could run into
10

10

00:00:28,640  -->  00:00:33,120
when using the java.io classes
to work with the file system.
11

11

00:00:33,120  -->  00:00:36,570
Now, the java.nio classes
fall into one of two buckets:
12

12

00:00:36,570  -->  00:00:38,720
those that deal with the file system,
13

13

00:00:38,720  -->  00:00:41,740
and also those that deal with
reading and writing data.
14

14

00:00:41,740  -->  00:00:43,870
In this video, we're gonna
start looking at the classes
15

15

00:00:43,870  -->  00:00:48,030
that read data from, and
write data to, a data source.
16

16

00:00:50,530  -->  00:00:53,770
Now, when using classes
in the java.io package,
17

17

00:00:53,770  -->  00:00:56,320
a thread will block while
it's waiting to read
18

18

00:00:56,320  -->  00:00:58,140
or write to a stream or buffer.
19

19

00:00:58,140  -->  00:01:01,350
However, threads using the java.nio class
20

20

00:01:01,350  -->  00:01:03,490
or classes will not block.
21

21

00:01:03,490  -->  00:01:06,000
In other words, they're
free to continue executing,
22

22

00:01:06,000  -->  00:01:09,630
and consequently could
really say that Java.nio
23

23

00:01:09,630  -->  00:01:12,730
was introduced as a
performance improvement.
24

24

00:01:12,730  -->  00:01:14,940
That said, many developers have argued
25

25

00:01:14,940  -->  00:01:18,190
that the java.nio package
was a step backwards,
26

26

00:01:18,190  -->  00:01:20,600
and in fact, there's
examples on the internet
27

27

00:01:20,600  -->  00:01:22,730
that people have shown that blocking I/O,
28

28

00:01:22,730  -->  00:01:24,400
which is in the java.io package,
29

29

00:01:24,400  -->  00:01:27,550
is often faster than the non-blocking I/O
30

30

00:01:27,550  -->  00:01:30,230
in the java.nio package.
31

31

00:01:30,230  -->  00:01:33,230
The discussion on threads,
and blocking, etc.,
32

32

00:01:33,230  -->  00:01:35,440
is covered in the threads section
of the course, by the way,
33

33

00:01:35,440  -->  00:01:38,700
just in case you haven't seen
that section of the course yet
34

34

00:01:38,700  -->  00:01:42,770
and are wondering what that's all about.
35

35

00:01:42,770  -->  00:01:46,950
Now, also working with the
java.nio class is more complex,
36

36

00:01:46,950  -->  00:01:48,460
and you'll see that when we go through
37

37

00:01:48,460  -->  00:01:50,290
to start writing some code.
38

38

00:01:50,290  -->  00:01:51,970
Now, as has happened with other additions
39

39

00:01:51,970  -->  00:01:53,320
to the java language,
40

40

00:01:53,320  -->  00:01:55,470
many developers still prefer to write code
41

41

00:01:55,470  -->  00:01:58,110
using the older java.io classes,
42

42

00:01:58,110  -->  00:02:00,610
and you may very well
decide to do that as well,
43

43

00:02:00,610  -->  00:02:02,480
but I do feel it's important
44

44

00:02:02,480  -->  00:02:04,640
to understand the new way of doing I/O
45

45

00:02:04,640  -->  00:02:06,510
with the java.nio package,
46

46

00:02:06,510  -->  00:02:07,930
just in case you're ever asked
47

47

00:02:07,930  -->  00:02:10,510
to work with code that uses it.
48

48

00:02:12,080  -->  00:02:15,760
Now, previously, you learned
that the java.io classes
49

49

00:02:15,760  -->  00:02:19,630
work with streams, that
is, character and binary.
50

50

00:02:19,630  -->  00:02:22,600
Now, data is read one byte
or character at a time,
51

51

00:02:22,600  -->  00:02:26,550
and sometimes buffered depending
on what classes are used.
52

52

00:02:26,550  -->  00:02:29,410
Now when using java.nio,
however, you'll deal
53

53

00:02:29,410  -->  00:02:31,030
with data in blocks,
54

54

00:02:31,030  -->  00:02:32,910
and rather than processing a single byte
55

55

00:02:32,910  -->  00:02:34,510
or character at a time,
56

56

00:02:34,510  -->  00:02:37,060
one block will be processed at a time.
57

57

00:02:37,060  -->  00:02:38,920
Now to accomplish this, you'll need
58

58

00:02:38,920  -->  00:02:40,490
to use channels and buffers,
59

59

00:02:40,490  -->  00:02:42,240
and you'll see what they
are and how to use those
60

60

00:02:42,240  -->  00:02:45,320
in later videos in this
section of the course.
61

61

00:02:45,320  -->  00:02:48,090
So with all that said about java.nio,
62

62

00:02:48,090  -->  00:02:52,260
you can use java.nio methods
to create a java.io stream.
63

63

00:02:53,150  -->  00:02:54,750
But, more on that later.
64

64

00:02:54,750  -->  00:02:57,260
For now though, make a copy
of the adventure game project
65

65

00:02:57,260  -->  00:03:00,070
that we've been working on in
this section of the course,
66

66

00:03:00,070  -->  00:03:02,530
that we last used to
read and write the data
67

67

00:03:02,530  -->  00:03:04,060
as an object stream.
68

68

00:03:04,060  -->  00:03:06,950
In other words, before we
looked into Random access.
69

69

00:03:06,950  -->  00:03:10,630
Now to save you a bit of
time, I've put a zip file,
70

70

00:03:10,630  -->  00:03:12,390
a link to the zip file
in the resources section
71

71

00:03:12,390  -->  00:03:15,340
of this video, of the
appropriate zip file,
72

72

00:03:15,340  -->  00:03:16,530
for that video.
73

73

00:03:16,530  -->  00:03:18,220
Just to save you a bit of time.
74

74

00:03:18,220  -->  00:03:22,110
Alright, so, I've already
unzipped that particular file,
75

75

00:03:22,110  -->  00:03:23,130
and put it on my computer,
76

76

00:03:23,130  -->  00:03:25,640
so I'm gonna switch back now to IntelliJ,
77

77

00:03:25,640  -->  00:03:29,800
and wipe it up, and we'll
get started with java.nio .
78

78

00:03:30,800  -->  00:03:32,640
Alright, so I've already got the package.
79

79

00:03:32,640  -->  00:03:34,020
I've actually unzipped it,
80

80

00:03:34,020  -->  00:03:36,090
and I'm using the input, well,
81

81

00:03:36,090  -->  00:03:38,520
I've actually called the
folder input/output NIO,
82

82

00:03:38,520  -->  00:03:39,350
so I know that it's different
83

83

00:03:39,350  -->  00:03:40,770
and distinct to the other projects.
84

84

00:03:40,770  -->  00:03:42,690
I'm going to open that.
85

85

00:03:45,430  -->  00:03:47,220
Here we're gonna start
making some changes to this,
86

86

00:03:47,220  -->  00:03:48,880
to support java.nio.
87

87

00:03:50,130  -->  00:03:52,530
Alright, so now that we've
opened that other project,
88

88

00:03:52,530  -->  00:03:53,530
let's just quickly run it,
89

89

00:03:53,530  -->  00:03:56,700
just to make sure that it still works.
90

90

00:03:59,140  -->  00:04:00,980
And of course, it should do,
it should work just fine,
91

91

00:04:00,980  -->  00:04:04,540
but it's good for us to check that.
92

92

00:04:04,540  -->  00:04:07,790
Looking okay, so I'll exit out of that.
93

93

00:04:10,280  -->  00:04:11,530
Alright, so now that we've done that,
94

94

00:04:11,530  -->  00:04:14,110
let's start working with java.nio.
95

95

00:04:14,110  -->  00:04:15,640
Now, the first thing that we're gonna do
96

96

00:04:15,640  -->  00:04:17,630
is update the locations class,
97

97

00:04:17,630  -->  00:04:21,820
so that it reads data from
the directions_big.txt
98

98

00:04:21,820  -->  00:04:24,150
and locations_big.txt files.
99

99

00:04:25,340  -->  00:04:27,700
Now these files are text
files, as you recall,
100

100

00:04:27,700  -->  00:04:29,710
and we've done this many times now,
101

101

00:04:29,710  -->  00:04:32,510
but you'll first run the
locations.main class,
102

102

00:04:32,510  -->  00:04:33,820
to write out the data,
103

103

00:04:33,820  -->  00:04:36,930
and then we'll change the
locations class static initializer
104

104

00:04:36,930  -->  00:04:38,260
which loads the data,
105

105

00:04:38,260  -->  00:04:41,220
where the first instance of
the locations class is created.
106

106

00:04:41,220  -->  00:04:42,050
Then, once that's done,
107

107

00:04:42,050  -->  00:04:45,260
we can call the main
method from the main class
108

108

00:04:45,260  -->  00:04:46,810
to run the game.
109

109

00:04:46,810  -->  00:04:50,010
Alright, so let's go
to our locations class,
110

110

00:04:50,010  -->  00:04:52,340
and the first thing we're going to do
111

111

00:04:52,340  -->  00:04:55,960
is delete the code from
the locations.main method,
112

112

00:04:55,960  -->  00:04:59,480
so I'm just gonna delete all that out.
113

113

00:04:59,480  -->  00:05:02,390
I'll take this comment out as well,
114

114

00:05:03,650  -->  00:05:05,990
and then we'll get started.
115

115

00:05:05,990  -->  00:05:08,690
So, we just start by typing Path.
116

116

00:05:08,690  -->  00:05:13,510
That's a java.nio, what's
from the java.nio package.
117

117

00:05:13,510  -->  00:05:17,680
And, locpath, location path
is equal to fileSystems.
118

118

00:05:18,580  -->  00:05:21,290
And we'll talk about this
as we go through, but again,
119

119

00:05:21,290  -->  00:05:25,390
fileSystems is another
java.nio package or class.
120

120

00:05:25,390  -->  00:05:29,170
fileSystems.getDefault()
121

121

00:05:29,170  -->  00:05:33,000
.getPath("locations_big.txt")
122

122

00:05:37,060  -->  00:05:40,650
And, do the same for
directions, so dirPath
123

123

00:05:42,400  -->  00:05:43,310
is equal to
124

124

00:05:44,540  -->  00:05:49,220
fileSystems.getDefault() .getPath
125

125

00:05:49,220  -->  00:05:53,390
This time it's gonna be
("directions_big.txt").
126

126

00:05:54,560  -->  00:05:56,090
Then we oughta try with
resources, so that's gonna be
127

127

00:05:56,090  -->  00:05:59,090
Try (BufferedWriter
128

128

00:06:00,850  -->  00:06:01,690
locFile
129

129

00:06:02,680  -->  00:06:04,240
equals Files
130

130

00:06:04,240  -->  00:06:05,470
dot
131

131

00:06:05,470  -->  00:06:06,880
newBufferedWriter
132

132

00:06:08,140  -->  00:06:10,300
(dirPath)
133

133

00:06:11,460  -->  00:06:15,650
And then the second one is going to be...
134

134

00:06:15,650  -->  00:06:19,570
Actually that should be
locpath, the first one.
135

135

00:06:20,820  -->  00:06:22,510
Using both the files, so we need
136

136

00:06:22,510  -->  00:06:25,600
to have a BufferedWriter set up for both,
137

137

00:06:25,600  -->  00:06:26,430
so
138

138

00:06:27,510  -->  00:06:28,670
BufferedWriter
139

139

00:06:31,260  -->  00:06:32,640
dirFiles
140

140

00:06:32,640  -->  00:06:36,130
is equal to Files.newBufferedWriter,
141

141

00:06:36,130  -->  00:06:40,800
that's gonna be (dirPath), this time.
142

142

00:06:40,800  -->  00:06:41,740
Then we're going to go through,
143

143

00:06:41,740  -->  00:06:43,270
and loop through all the locations,
144

144

00:06:43,270  -->  00:06:46,070
so for(Location :
145

145

00:06:46,070  -->  00:06:47,570
location
146

146

00:06:47,570  -->  00:06:50,710
location.values())
147

147

00:06:50,710  -->  00:06:51,550
Then locFile
148

148

00:06:51,550  -->  00:06:52,910
dot
149

149

00:06:52,910  -->  00:06:53,740
write
150

150

00:06:54,850  -->  00:06:57,350
and it's going to be location,
151

151

00:06:59,160  -->  00:07:01,200
so we location it,
152

152

00:07:01,200  -->  00:07:03,860
and everyone else is going to be location
153

153

00:07:03,860  -->  00:07:05,100
dot
154

154

00:07:05,100  -->  00:07:06,260
getLocationID,
155

155

00:07:06,260  -->  00:07:08,080
we're writing that out, plus
156

156

00:07:08,080  -->  00:07:09,190
comma
157

157

00:07:09,190  -->  00:07:10,310
plus
158

158

00:07:10,310  -->  00:07:11,670
the location desriptions,
159

159

00:07:11,670  -->  00:07:13,920
so location.getDescription,
160

160

00:07:15,130  -->  00:07:18,190
and now, add an end of line
character to the end of that.
161

161

00:07:18,190  -->  00:07:19,020
Slash end.
162

162

00:07:20,130  -->  00:07:22,560
And the arrow we're getting
at the moment is a topper,
163

163

00:07:22,560  -->  00:07:24,240
it should've been one there.
164

164

00:07:24,240  -->  00:07:25,720
One right parentheses, not two.
165

165

00:07:25,720  -->  00:07:27,660
Let's fix that up.
166

166

00:07:27,660  -->  00:07:30,450
And, then we're gonna go through all
167

167

00:07:30,450  -->  00:07:31,780
the directions of the exits.
168

168

00:07:31,780  -->  00:07:34,580
So for(String direction
169

169

00:07:34,580  -->  00:07:38,740
Hold on, this time it's gonna
be location.getExits().keySet
170

170

00:07:42,110  -->  00:07:42,950
Then, we're gonna do a test
171

171

00:07:42,950  -->  00:07:44,990
to make sure it's not
the default location,
172

172

00:07:44,990  -->  00:07:47,710
so if( !direction
173

173

00:07:47,710  -->  00:07:48,840
dot
174

174

00:07:48,840  -->  00:07:52,170
equalsIgnoreCase("Q")).
175

175

00:07:54,840  -->  00:07:57,840
Then we've gotta do a dirFile.write.
176

176

00:07:58,890  -->  00:08:01,320
Then we're going to
write the location of it,
177

177

00:08:01,320  -->  00:08:04,330
so location.getLocationID + ","
178

178

00:08:04,330  -->  00:08:06,580
+ direction + ","
179

179

00:08:09,800  -->  00:08:12,590
Plus, we'll just go to
a new line for this;
180

180

00:08:12,590  -->  00:08:16,760
that's gonna be
location.getExits().getDirection,
181

181

00:08:20,180  -->  00:08:24,640
and then we're gonna do
an end of line character.
182

182

00:08:24,640  -->  00:08:27,770
Now that should be it, and
then we just need our catch.
183

183

00:08:27,770  -->  00:08:31,020
We're just gonna catch an IR Exception.
184

184

00:08:32,470  -->  00:08:33,890
And if we happen to get an error,
185

185

00:08:33,890  -->  00:08:35,620
we've just gotta print out the message.
186

186

00:08:35,620  -->  00:08:36,540
IRException
187

187

00:08:38,340  -->  00:08:39,420
e.getMessage.
188

188

00:08:40,340  -->  00:08:41,790
Alright, now what I'm going to do
189

189

00:08:41,790  -->  00:08:44,250
is just paste in the code that we used
190

190

00:08:44,250  -->  00:08:46,530
when we read the file using the java.io,
191

191

00:08:46,530  -->  00:08:48,920
that BufferedReader, just so
we can see the difference,
192

192

00:08:48,920  -->  00:08:50,700
even though we ultimately
aren't gonna use that,
193

193

00:08:50,700  -->  00:08:54,290
I'm just going to include
everything but the final catch,
194

194

00:08:54,290  -->  00:08:55,690
so this is what we did.
195

195

00:08:55,690  -->  00:08:57,100
Even though it's at a
different indent level,
196

196

00:08:57,100  -->  00:08:58,860
we should still be able to
get the gist of it here,
197

197

00:08:58,860  -->  00:09:01,290
so we're comparing the
code starting at line 22,
198

198

00:09:01,290  -->  00:09:04,360
to the code that's starting on line 35.
199

199

00:09:04,360  -->  00:09:05,380
So, all that's really changed
200

200

00:09:05,380  -->  00:09:09,490
is the way that we create
the BufferedWriter.
201

201

00:09:09,490  -->  00:09:11,430
Instead of creating one directly,
202

202

00:09:11,430  -->  00:09:13,230
by calling the BufferedWriter constructor,
203

203

00:09:13,230  -->  00:09:17,260
which we've done here on line 35 and 36,
204

204

00:09:17,260  -->  00:09:22,180
we're using the java.nio.file
class to create the instance.
205

205

00:09:22,180  -->  00:09:25,190
Here's Files here,
files.newBufferedReader(locpath),
206

206

00:09:25,190  -->  00:09:28,260
on line 22, and same for line 23.
207

207

00:09:28,260  -->  00:09:30,840
So the Files.newBufferedWriter method
208

208

00:09:30,840  -->  00:09:33,670
accepts a java.nio.path instance,
209

209

00:09:33,670  -->  00:09:37,040
and we obviously declared
those a path instance
210

210

00:09:37,040  -->  00:09:40,290
on line 20 and 21, locpath and dirpath.
211

211

00:09:42,090  -->  00:09:43,270
Now, we are gonna look at the Path
212

212

00:09:43,270  -->  00:09:46,640
and the fileSystems classes
in more depth later,
213

213

00:09:46,640  -->  00:09:48,950
when you learn how to
work with the fileSystem.
214

214

00:09:48,950  -->  00:09:50,870
For now, just understand
that the Path class
215

215

00:09:50,870  -->  00:09:54,620
is meant as a replacement
for the File class,
216

216

00:09:54,620  -->  00:09:56,560
so it's a more robust class when it comes
217

217

00:09:56,560  -->  00:09:58,150
to working with files.
218

218

00:09:58,150  -->  00:10:01,100
Now classes in the java.nio package work
219

219

00:10:01,100  -->  00:10:04,610
with path instances,
and not file instances.
220

220

00:10:04,610  -->  00:10:07,160
It's recommended practise
to work with the Path class
221

221

00:10:07,160  -->  00:10:10,940
if using java.nio wherever possible.
222

222

00:10:10,940  -->  00:10:13,660
Now sometimes you will
have to use the file class.
223

223

00:10:13,660  -->  00:10:15,650
That's because the method or constructor
224

224

00:10:15,650  -->  00:10:17,730
wants to file instance as a parameter,
225

225

00:10:17,730  -->  00:10:19,220
but when you do have a choice,
226

226

00:10:19,220  -->  00:10:21,970
make sure you use path over file.
227

227

00:10:23,280  -->  00:10:25,010
So, creating a BufferedWriter this way
228

228

00:10:25,010  -->  00:10:29,390
creates a writer that uses
java.nio to do its output.
229

229

00:10:29,390  -->  00:10:32,490
Now remember that the BufferedWriter
reps another I/O class,
230

230

00:10:32,490  -->  00:10:35,340
So when we use the Files
stuck to a new BufferedWriter,
231

231

00:10:35,340  -->  00:10:37,760
here on line 22 and line 23,
232

232

00:10:37,760  -->  00:10:40,990
a BufferedWriter is
returned that performs I/O
233

233

00:10:40,990  -->  00:10:45,160
using an instance of the java.nio
class called bytechannel,
234

234

00:10:46,180  -->  00:10:48,180
and you'll learn more about channels later
235

235

00:10:48,180  -->  00:10:50,140
in this section of the course.
236

236

00:10:50,140  -->  00:10:51,840
So let's get rid of that extra code
237

237

00:10:51,840  -->  00:10:53,340
that I copied and pasted in.
238

238

00:10:53,340  -->  00:10:55,590
Clean this up a little bit.
239

239

00:10:57,000  -->  00:10:58,410
Alright, so what we can do now,
240

240

00:10:58,410  -->  00:11:00,430
is we can actually run this class,
241

241

00:11:00,430  -->  00:11:03,930
or run this method rather, locations.main.
242

242

00:11:06,280  -->  00:11:09,540
You can see that it's seemed
to have processed something.
243

243

00:11:09,540  -->  00:11:14,330
If you have a look at the files,
they're still pretty much,
244

244

00:11:14,330  -->  00:11:17,310
I'm sorry, directions_big was one of them,
245

245

00:11:17,310  -->  00:11:19,930
and also locations_big.
246

246

00:11:19,930  -->  00:11:22,280
Now, the two files, they're pretty much
247

247

00:11:22,280  -->  00:11:24,110
like they were before.
248

248

00:11:25,810  -->  00:11:28,780
The situation is the same
when reading from a stream,
249

249

00:11:28,780  -->  00:11:30,340
so what we will do now
is we're gonna update
250

250

00:11:30,340  -->  00:11:32,600
the static initializer so that it uses the
251

251

00:11:32,600  -->  00:11:37,460
files.newBufferedReader method
to create the BufferedReader.
252

252

00:11:37,460  -->  00:11:41,120
The actual method will
want a path instance.
253

253

00:11:42,040  -->  00:11:44,310
Looking at our static intializer,
254

254

00:11:44,310  -->  00:11:47,980
I'm just gonna delete all that code out.
255

255

00:11:47,980  -->  00:11:50,040
I'm gonna start again.
256

256

00:11:50,040  -->  00:11:51,630
So we wanna have two paths,
257

257

00:11:51,630  -->  00:11:53,580
and they're gonna be pretty
much the same as they were
258

258

00:11:53,580  -->  00:11:57,750
prior to us changing the code
here, or after, I should say.
259

259

00:11:59,570  -->  00:12:04,340
We have those two paths again,
then we're gonna do a try,
260

260

00:12:04,340  -->  00:12:08,510
(Scanner scanner = new
scanner(files.newBufferedReader
261

261

00:12:13,790  -->  00:12:16,370
We're gonna start with locpath.
262

262

00:12:18,160  -->  00:12:20,660
We're gonna accept that input.
263

263

00:12:23,010  -->  00:12:26,460
We're getting a java.io.IOException,
264

264

00:12:26,460  -->  00:12:28,790
we'll look at that shortly.
265

265

00:12:28,790  -->  00:12:32,950
So this scanner.usedelimiter(","),
266

266

00:12:34,240  -->  00:12:36,820
let's mix this up a little bit.
267

267

00:12:41,510  -->  00:12:43,470
What I was trying to do there
was a Try with resources,
268

268

00:12:43,470  -->  00:12:45,550
so I fix it up like that,
269

269

00:12:47,820  -->  00:12:51,670
tab that over, and put
another right curly brace.
270

270

00:12:51,670  -->  00:12:54,610
We've still got our IOException
that we need to fix.
271

271

00:12:54,610  -->  00:12:56,900
So, we've specified that the scanner
272

272

00:12:56,900  -->  00:12:59,290
is gonna use the delimiter of a comma.
273

273

00:12:59,290  -->  00:13:00,310
We're gonna go through now,
274

274

00:13:00,310  -->  00:13:04,470
so do while(scanner.hasNextLine).
275

275

00:13:07,690  -->  00:13:10,270
Int loc = scanner.nextInt.
276

276

00:13:14,500  -->  00:13:18,720
Scanner.skip, and we'll be
talking about this shortly.
277

277

00:13:18,720  -->  00:13:20,220
Scanner.delimiter.
278

278

00:13:22,270  -->  00:13:25,850
String description = scanner.nextline.
279

279

00:13:30,300  -->  00:13:31,390
Then you're gonna print it out,
280

280

00:13:31,390  -->  00:13:35,550
and we'll type it out as
imported location + loc + ":"
281

281

00:13:39,520  -->  00:13:42,740
+ description, starting to
see some output on the screen.
282

282

00:13:42,740  -->  00:13:46,900
Then we're gonna do
locations.put(loc new Location
283

283

00:13:49,910  -->  00:13:54,520
It's loc and description
as the two parameters.
284

284

00:13:54,520  -->  00:13:56,540
Then we need to put a null there,
285

285

00:13:56,540  -->  00:13:58,050
and that's because our code at the moment,
286

286

00:13:58,050  -->  00:13:59,700
if we look at our constructor,
287

287

00:13:59,700  -->  00:14:01,280
we talked about this previously,
288

288

00:14:01,280  -->  00:14:02,580
it's got the code built in
289

289

00:14:02,580  -->  00:14:05,000
to test to see whether null's passed,
290

290

00:14:05,000  -->  00:14:06,230
and it's going to create a new
291

291

00:14:06,230  -->  00:14:08,580
LinkedHashMap for our exits if it has,
292

292

00:14:08,580  -->  00:14:10,400
otherwise it will just decide the value,
293

293

00:14:10,400  -->  00:14:14,180
or save the map if one
was sent to this method,
294

294

00:14:14,180  -->  00:14:15,960
but in our case, that's not happening,
295

295

00:14:15,960  -->  00:14:17,550
because we're not passing that,
296

296

00:14:17,550  -->  00:14:20,590
so we go back to our locations code,
297

297

00:14:20,590  -->  00:14:21,670
leaving this null,
298

298

00:14:21,670  -->  00:14:23,000
and what we still need to do,
299

299

00:14:23,000  -->  00:14:24,450
is just finish this off,
300

300

00:14:24,450  -->  00:14:28,130
so we got at least code
catching some errors.
301

301

00:14:28,130  -->  00:14:32,290
IOException e, then we're
just gonna e.printStackTrace.
302

302

00:14:34,170  -->  00:14:36,580
So what I'll do is, I'll
finish the video here now.
303

303

00:14:36,580  -->  00:14:39,360
When we come back, we'll
actually add the code,
304

304

00:14:39,360  -->  00:14:41,460
using the Files new BufferedReader,
305

305

00:14:41,460  -->  00:14:43,770
and this time we're going to
add it for the directions,
306

306

00:14:43,770  -->  00:14:45,760
i.e. the exits, and
actually add those as well,
307

307

00:14:45,760  -->  00:14:48,600
so I'll see you in the next video.
