1
1

00:00:05,560  -->  00:00:08,510
So, in the previous set of videos,
we had a discussion about and
2

2

00:00:08,510  -->  00:00:09,980
learned about inheritance.
3

3

00:00:09,980  -->  00:00:13,490
It's time now to talk about composition.
4

4

00:00:13,490  -->  00:00:16,560
Composition is another component of
object orientated programming and
5

5

00:00:16,560  -->  00:00:18,720
is very useful in day-to-day programming.
6

6

00:00:18,720  -->  00:00:20,720
But just as a refresher,
I'm gonna start off and
7

7

00:00:20,720  -->  00:00:24,420
just go over inheritance very briefly
before we move into composition.
8

8

00:00:25,550  -->  00:00:30,310
Best way to do that would be an example,
so let's create two quick classes.
9

9

00:00:30,310  -->  00:00:31,580
First one is going to be Vehicle.
10

10

00:00:35,290  -->  00:00:38,550
Your Vehicle is going to be very simple,
it's going to have one field.
11

11

00:00:38,550  -->  00:00:40,970
Private String name, and
it's going to have a constructor.
12

12

00:00:42,250  -->  00:00:44,560
Very simple concept of the Vehicle.
13

13

00:00:44,560  -->  00:00:47,790
Let's also create another class,
call it Car.
14

14

00:00:48,900  -->  00:00:52,060
We're going to extend from Vehicle.
15

15

00:00:54,860  -->  00:00:56,910
And add a couple of fields.
16

16

00:00:58,020  -->  00:01:03,280
So the number of doors,
private int_engineCapacity.
17

17

00:01:03,280  -->  00:01:05,080
Let's set up a constructor.
18

18

00:01:05,080  -->  00:01:07,470
And there we go.
19

19

00:01:07,470  -->  00:01:09,890
A very simple little example.
20

20

00:01:09,890  -->  00:01:12,230
So, the Car extends from Vehicle.
21

21

00:01:12,230  -->  00:01:15,790
Now it's got a is
a relationship with Vehicle.
22

22

00:01:15,790  -->  00:01:18,620
Is a meaning that a Car is a Vehicle.
23

23

00:01:18,620  -->  00:01:21,200
So that's the relationship
between the two.
24

24

00:01:21,200  -->  00:01:23,880
So you can quite correctly say,
Car is a Vehicle.
25

25

00:01:23,880  -->  00:01:26,520
And that's essentially
what inheritance is.
26

26

00:01:26,520  -->  00:01:28,870
The composition deals with
something different, and
27

27

00:01:28,870  -->  00:01:30,880
that deals with a has a relationship.
28

28

00:01:30,880  -->  00:01:34,390
And the best way to do this
is to go through an example.
29

29

00:01:34,390  -->  00:01:36,900
So let's look at
the scenario of a computer.
30

30

00:01:36,900  -->  00:01:39,800
So our computer has a motherboard,
a case, and
31

31

00:01:39,800  -->  00:01:43,330
a monitor, three example
things that it's got with it.
32

32

00:01:43,330  -->  00:01:44,820
So the motherboard, the case, and
33

33

00:01:44,820  -->  00:01:50,120
the monitor are not computers in
the same sense that a Car is a Vehicle.
34

34

00:01:50,120  -->  00:01:54,440
But a computer has a motherboard,
a computer has a case, and
35

35

00:01:54,440  -->  00:01:55,440
a computer has a monitor.
36

36

00:01:55,440  -->  00:01:57,590
So that's what composition is,
37

37

00:01:57,590  -->  00:02:01,060
is actually modeling parts, if you will,
parts of the greater whole.
38

38

00:02:01,060  -->  00:02:02,730
So in this case we're
gonna model the computer.
39

39

00:02:02,730  -->  00:02:05,560
And we're gonna model
the has a relationship.
40

40

00:02:05,560  -->  00:02:07,740
So the motherboard,
the case, and the monitor.
41

41

00:02:07,740  -->  00:02:12,130
So let's start off by actually
creating those three classes.
42

42

00:02:12,130  -->  00:02:15,380
The motherboard, the case,
and the monitor.
43

43

00:02:15,380  -->  00:02:18,670
So I'm going to start
with the motherboard.
44

44

00:02:18,670  -->  00:02:21,580
New Java class, Motherboard.
45

45

00:02:25,200  -->  00:02:26,810
We're gonna create some fields.
46

46

00:02:26,810  -->  00:02:29,470
String model,
47

47

00:02:29,470  -->  00:02:35,010
private String manufacturer.
48

48

00:02:39,620  -->  00:02:41,050
That's the manufacturer
of the motherboard.
49

49

00:02:43,070  -->  00:02:48,960
Private int the number of ramslots
that the motherboard's got.
50

50

00:02:48,960  -->  00:02:54,310
And the number of cardslots for
video cards and so on.
51

51

00:02:54,310  -->  00:02:56,710
And lastly, the name of the bios,
52

52

00:02:56,710  -->  00:03:00,780
just some typical things you
would find in a motherboard.
53

53

00:03:01,960  -->  00:03:03,720
So we're going to create
our public constructor
54

54

00:03:05,180  -->  00:03:06,600
which will just be all the fields.
55

55

00:03:08,530  -->  00:03:12,240
We're going to create getters for
all our fields so we don't need setters.
56

56

00:03:12,240  -->  00:03:16,680
But what we're going to do is add one
public method which we're going to call
57

57

00:03:16,680  -->  00:03:17,660
a loadProgram.
58

58

00:03:20,480  -->  00:03:23,140
We're going to pass a parameter
which will be the program name.
59

59

00:03:23,140  -->  00:03:28,860
And we're just going to
print out that "Program "
60

60

00:03:28,860  -->  00:03:33,530
programName "is now loading...".
61

61

00:03:36,380  -->  00:03:39,020
So that's our Motherboard class,
pretty straight forward as you can see.
62

62

00:03:39,020  -->  00:03:41,290
Nothing particularly complicated there.
63

63

00:03:41,290  -->  00:03:44,870
So let's now move onto our Monitor
class and create another new class.
64

64

00:03:45,920  -->  00:03:46,760
Monitor is the name.
65

65

00:03:48,270  -->  00:03:49,490
It's also got some fields.
66

66

00:03:49,490  -->  00:03:53,820
We're going to start with
the private String for the model.
67

67

00:03:53,820  -->  00:03:59,430
Private string manufacturer.
68

68

00:03:59,430  -->  00:04:05,320
Private int size,
that'll be the size of the screen.
69

69

00:04:05,320  -->  00:04:09,220
And let's go with another one, which
is going to be the native resolution.
70

70

00:04:09,220  -->  00:04:14,690
And we're gonna call that
Resolution nativeResolution.
71

71

00:04:14,690  -->  00:04:17,420
And resolution is going to be a class.
72

72

00:04:17,420  -->  00:04:23,640
And we're gonna create
a constructor like so.
73

73

00:04:23,640  -->  00:04:26,570
And we're gonna fix up that
Resolution class in a minute.
74

74

00:04:26,570  -->  00:04:27,660
We're gonna create that class.
75

75

00:04:28,730  -->  00:04:31,780
And what we're gonna here is we're
gonna create a public method.
76

76

00:04:34,510  -->  00:04:39,530
DrawPixel at, and it's going to have an x,
77

77

00:04:39,530  -->  00:04:42,820
y location, and let's just say a color.
78

78

00:04:46,590  -->  00:04:53,790
And we'll just do a simple
message that says,
79

79

00:04:53,790  -->  00:04:58,220
"Drawing pixel at " x the x y
80

80

00:04:58,220  -->  00:05:03,070
position "in color " color.
81

81

00:05:03,070  -->  00:05:05,500
Very simple method and then we'll
just create some guesses as well.
82

82

00:05:06,660  -->  00:05:09,040
Just to get us for this class.
83

83

00:05:10,340  -->  00:05:14,890
So next we need to create the Resolution
class, and with the Resolution class.
84

84

00:05:19,050  -->  00:05:23,160
That's gonna be the native resolution,
so what is the maximum width and
85

85

00:05:23,160  -->  00:05:24,520
height of the monitor?
86

86

00:05:26,000  -->  00:05:28,850
How many pixels wide and
how many pixels down so to speak.
87

87

00:05:28,850  -->  00:05:36,500
So we can go from width and height.
88

88

00:05:36,500  -->  00:05:39,540
Let's just keep it simple there so
89

89

00:05:39,540  -->  00:05:45,190
that would be the resolution,
constructors and some getters.
90

90

00:05:45,190  -->  00:05:47,220
So that's our resolution.
91

91

00:05:47,220  -->  00:05:50,060
So going back now to the monitor.
92

92

00:05:50,060  -->  00:05:52,130
We find that error's now gone away.
93

93

00:05:52,130  -->  00:05:54,800
So this is an early example, we're
gonna talk more about this shortly, but
94

94

00:05:54,800  -->  00:05:57,250
this is composition.
95

95

00:05:57,250  -->  00:06:00,800
So the resolution class
is part of a monitor, but
96

96

00:06:00,800  -->  00:06:02,610
the monitor isn't a resolution.
97

97

00:06:02,610  -->  00:06:03,610
But it has a resolution.
98

98

00:06:03,610  -->  00:06:05,470
So this is what composition is.
99

99

00:06:05,470  -->  00:06:09,040
So we're saying that the resolution
is a component of a monitor.
100

100

00:06:09,040  -->  00:06:12,230
The monitor has a resolution,
which is the native resolution.
101

101

00:06:12,230  -->  00:06:13,120
But more on that shortly.
102

102

00:06:14,360  -->  00:06:17,430
So, next we need to create our class for
case.
103

103

00:06:17,430  -->  00:06:23,320
New class, Case, and
we're going to have model
104

104

00:06:25,960  -->  00:06:30,680
Private String manufacturer,
105

105

00:06:30,680  -->  00:06:35,230
private String powerSupply.
106

106

00:06:35,230  -->  00:06:40,890
And let's also have a dimensions,
107

107

00:06:40,890  -->  00:06:43,730
Dimensions, just a new
class we're gonna create.
108

108

00:06:48,180  -->  00:06:50,680
Just gonna be the dimensions,
the width, height, and
109

109

00:06:50,680  -->  00:06:52,180
depth of the actual case itself.
110

110

00:06:52,180  -->  00:06:55,500
This is the case that contains
all of the components.
111

111

00:06:56,790  -->  00:07:01,420
And so the constructor is going to have
to accept those parameters like so.
112

112

00:07:01,420  -->  00:07:05,450
We're gonna create a function
called pressPowerButton.
113

113

00:07:11,720  -->  00:07:15,760
And we're just gonna add
a simple print line that
114

114

00:07:15,760  -->  00:07:19,120
says "Power button pressed" like so.
115

115

00:07:19,120  -->  00:07:21,400
And we'll just do our
getters as we normally do.
116

116

00:07:23,970  -->  00:07:25,280
Okay, so we're making good progress now.
117

117

00:07:25,280  -->  00:07:28,170
So the last thing we need to implant
before we can start seeing how some of
118

118

00:07:28,170  -->  00:07:31,130
this works,
is of course the dimensions class.
119

119

00:07:31,130  -->  00:07:34,100
And that's gonna have a width,
a height, and a depth.
120

120

00:07:34,100  -->  00:07:38,290
Now let's create that.
121

121

00:07:38,290  -->  00:07:39,740
So Dimensions.
122

122

00:07:43,140  -->  00:07:48,010
So that'll be width,
123

123

00:07:48,010  -->  00:07:52,640
height, and depth.
124

124

00:07:52,640  -->  00:07:54,070
Create a constructor for
the three of them.
125

125

00:07:54,070  -->  00:07:57,040
And let's create a getter as well.
126

126

00:07:57,040  -->  00:08:00,800
Oops, like so.
127

127

00:08:00,800  -->  00:08:01,610
So there's that Dimensions.
128

128

00:08:01,610  -->  00:08:04,830
So now if I go back to
case the error goes away.
129

129

00:08:04,830  -->  00:08:08,350
The case has got a model,
a manufacturer, and a power supply.
130

130

00:08:08,350  -->  00:08:12,940
A case has got dimensions, so
the width and the height and the depth.
131

131

00:08:12,940  -->  00:08:14,710
That is what the dimensions is.
132

132

00:08:14,710  -->  00:08:17,390
So of course the case has
got all these things.
133

133

00:08:17,390  -->  00:08:21,850
It has got a model, has got a
manufacturer, has got a power supply, and
134

134

00:08:21,850  -->  00:08:23,220
of course it does have dimensions.
135

135

00:08:23,220  -->  00:08:26,310
And that's what we're doing here
again with our composition is we're
136

136

00:08:26,310  -->  00:08:31,760
actually creating something, in this case
another object, that is part of the case.
137

137

00:08:31,760  -->  00:08:35,200
So now we get to the fun part
where we actually create
138

138

00:08:35,200  -->  00:08:39,470
a class that is comprised of the case,
the monitor, and the motherboard.
139

139

00:08:39,470  -->  00:08:42,340
So let's create another new class,
we're going to call that PC.
140

140

00:08:43,530  -->  00:08:45,080
This will be our personal computer.
141

141

00:08:46,710  -->  00:08:49,910
And instead of using extends,
142

142

00:08:49,910  -->  00:08:54,480
we're going to type private case theCase.
143

143

00:08:54,480  -->  00:08:56,700
I have to use the word theCase,
144

144

00:08:56,700  -->  00:09:00,730
there by the way because if I just
type case, as you know by now,
145

145

00:09:00,730  -->  00:09:03,150
case is actually a reserved K word so
we'll actually get an error.
146

146

00:09:05,570  -->  00:09:08,370
So we need to put theCase, we could
call it something else but that will do.
147

147

00:09:08,370  -->  00:09:13,830
So private Case, so our PC has got a case,
it has got a monitor.
148

148

00:09:15,870  -->  00:09:17,190
We'll just call these monitors.
149

149

00:09:18,430  -->  00:09:20,320
And, of course, motherboard.
150

150

00:09:20,320  -->  00:09:21,930
Motherboard motherboard.
151

151

00:09:23,630  -->  00:09:26,150
And we'll create our constructor
like we normally do.
152

152

00:09:26,150  -->  00:09:30,460
This time we're creating a constructor
that's gonna accept three objects,
153

153

00:09:30,460  -->  00:09:31,870
three different objects.
154

154

00:09:31,870  -->  00:09:33,300
And let's create our getters as well.
155

155

00:09:35,510  -->  00:09:37,380
So this is composition again.
156

156

00:09:37,380  -->  00:09:39,680
So we've created a new class called PC.
157

157

00:09:39,680  -->  00:09:46,030
It has a case so that's theCase variable
which is the field that we have defined.
158

158

00:09:46,030  -->  00:09:50,030
It has a monitor, a field monitor,
and a field called monitor and
159

159

00:09:50,030  -->  00:09:51,310
of course it has a motherboard.
160

160

00:09:51,310  -->  00:09:55,060
Which is this case a field
called motherboard.
161

161

00:09:55,060  -->  00:09:58,670
And you can see the obvious advantage
here, because if you're using the extends
162

162

00:09:58,670  -->  00:10:02,910
option to inherit, you can only, in Java,
inherit from one class at a time.
163

163

00:10:02,910  -->  00:10:06,090
So you could see that we
run into difficulties and
164

164

00:10:06,090  -->  00:10:08,180
run into limitations quite quickly.
165

165

00:10:08,180  -->  00:10:10,410
If we're using standard Java inheritance,
166

166

00:10:10,410  -->  00:10:14,340
like we used in the last few videos,
where we can only extend from one class.
167

167

00:10:14,340  -->  00:10:18,740
In this case, what we've said is, the PC
comprises of these three other classes,
168

168

00:10:18,740  -->  00:10:21,210
namely the case, the monitor,
and the motherboard.
169

169

00:10:21,210  -->  00:10:23,180
So, the PC has in this case,
170

170

00:10:23,180  -->  00:10:28,130
is going to have the objects that
we create based off this class.
171

171

00:10:28,130  -->  00:10:30,600
We'll have an object, case, monitor, and
172

172

00:10:30,600  -->  00:10:32,570
motherboard in each
instance that we create.
173

173

00:10:34,030  -->  00:10:37,560
So let's actually run some code now and
see how we would use this in reality.
174

174

00:10:40,120  -->  00:10:44,950
So what we want to do
first is create a case,
175

175

00:10:44,950  -->  00:10:49,250
so we can put Case theCase = new Case.
176

176

00:10:49,250  -->  00:10:56,000
So it actually needs the model number,
so let's start with "220B".
177

177

00:10:56,000  -->  00:11:00,060
Manufacturer, well let's use "Dell" for
want of a better name.
178

178

00:11:00,060  -->  00:11:01,010
Power supply, we'll say "240".
179

179

00:11:01,010  -->  00:11:05,210
And lastly it wants the dimensions.
180

180

00:11:05,210  -->  00:11:06,860
So it actually wants to know
what the dimensions are.
181

181

00:11:06,860  -->  00:11:08,250
So we can just type dimensions in there.
182

182

00:11:10,020  -->  00:11:13,350
And of course what we'll need to do is
create a new dimensions class, so you put.
183

183

00:11:20,730  -->  00:11:26,140
So the dimensions, let's go with a width
of 20, a height of 20 and a depth of 5.
184

184

00:11:26,140  -->  00:11:27,820
That would be our case.
185

185

00:11:27,820  -->  00:11:31,030
Weird size case but for
this example it'll be fine.
186

186

00:11:31,030  -->  00:11:32,880
So that's our definition for a case now.
187

187

00:11:32,880  -->  00:11:34,930
Remembering that when we create the PC,
188

188

00:11:34,930  -->  00:11:38,220
which we're going to be doing shortly,
it needs this reference.
189

189

00:11:38,220  -->  00:11:42,760
It needs to know what the case is and
think of that as putting a PC together.
190

190

00:11:42,760  -->  00:11:45,510
PCs generally can't be put
together without a case so
191

191

00:11:45,510  -->  00:11:49,250
what we're doing here is creating,
what we have done is created a case.
192

192

00:11:49,250  -->  00:11:52,610
So next we need to create a monitor, so
193

193

00:11:52,610  -->  00:11:57,360
Monitor, we'll call it
theMonitor = new Monitor.
194

194

00:11:57,360  -->  00:12:02,340
And the parameters for
this one is a model so
195

195

00:12:02,340  -->  00:12:06,900
I will call it the "27inch Beast",
196

196

00:12:06,900  -->  00:12:11,210
manufacturer let's try "Acer".
197

197

00:12:11,210  -->  00:12:15,580
Size we'll go 27 for 27 inch and
it also needs a nativeResolution.
198

198

00:12:18,600  -->  00:12:21,860
And I create that, so
we need to create that class.
199

199

00:12:21,860  -->  00:12:23,210
And let's do that a different way.
200

200

00:12:23,210  -->  00:12:26,160
I want to show you another way
of creating a class on the fly.
201

201

00:12:26,160  -->  00:12:28,860
If you don't need to create a variable,
you're not going to use it for
202

202

00:12:28,860  -->  00:12:31,390
anything else,
you only want to pass it to a method.
203

203

00:12:31,390  -->  00:12:36,120
You can just type new Resolution.
204

204

00:12:36,120  -->  00:12:39,730
And this guy for 2540, 1440,
which is the size of my monitor.
205

205

00:12:39,730  -->  00:12:44,790
So that's created a instance of a class
without using a variable,
206

206

00:12:44,790  -->  00:12:46,280
which we don't need in this case.
207

207

00:12:46,280  -->  00:12:50,180
And I'll just fix that typo,
that's monitor.
208

208

00:12:51,880  -->  00:12:52,930
So we've now got a case and
209

209

00:12:52,930  -->  00:12:56,640
a monitor that ultimately are gonna
be used to create our PC.
210

210

00:12:56,640  -->  00:12:59,450
Of course, we now need a motherboard,
so let's create a motherboard.
211

211

00:12:59,450  -->  00:13:00,280
So, motherboard.
212

212

00:13:02,970  -->  00:13:07,100
Motherboard = new Motherboard.
213

213

00:13:07,100  -->  00:13:10,600
We need a model.
214

214

00:13:10,600  -->  00:13:12,670
We'll go to 200, and let's go with Asus.
215

215

00:13:14,150  -->  00:13:16,850
Number of RAM spots,
well there's four RAM slots in this one.
216

216

00:13:16,850  -->  00:13:20,200
Number of card slots,
let's just say there's six.
217

217

00:13:20,200  -->  00:13:24,880
And bios, let's say it's version 2.44.
218

218

00:13:24,880  -->  00:13:26,640
So there's our motherboard.
219

219

00:13:26,640  -->  00:13:29,280
So now we're at the stage
where we can create our PC.
220

220

00:13:29,280  -->  00:13:31,240
Let's put our PC together.
221

221

00:13:31,240  -->  00:13:31,850
How do we do that?
222

222

00:13:31,850  -->  00:13:35,680
Well we type PC, thePC =new PC.
223

223

00:13:38,620  -->  00:13:40,710
And of course it then needs the case.
224

224

00:13:40,710  -->  00:13:42,420
TheCase, theMonitor, and
225

225

00:13:42,420  -->  00:13:47,570
theMotherboard are the three parameters
that will collectively make up our PC.
226

226

00:13:47,570  -->  00:13:54,400
So we've now created the PC class by
passing those three other objects to it.
227

227

00:13:54,400  -->  00:13:54,920
Now, of course,
228

228

00:13:54,920  -->  00:13:58,560
you've seen in previous videos with
inheritance where we're able to use
229

229

00:13:58,560  -->  00:14:03,400
a method name that is part of the basic
class, the super class, in other words.
230

230

00:14:03,400  -->  00:14:04,610
But how do we get access to it?
231

231

00:14:04,610  -->  00:14:05,940
So, for example,
232

232

00:14:05,940  -->  00:14:10,190
if I wanna draw something using
the monitor, how do I access this method?
233

233

00:14:10,190  -->  00:14:12,910
So of course,
we've the method drawPixelAt.
234

234

00:14:12,910  -->  00:14:14,060
But how do we access that?
235

235

00:14:15,080  -->  00:14:16,790
How do we access that from our PC?
236

236

00:14:16,790  -->  00:14:23,190
Cuz of course the PC has got getters, but
it hasn't got any way to access that.
237

237

00:14:23,190  -->  00:14:26,160
We're not overriding a method or
anything like that.
238

238

00:14:26,160  -->  00:14:27,850
So how do we access it?
239

239

00:14:27,850  -->  00:14:32,530
Well what we do, one way of using it,
240

240

00:14:32,530  -->  00:14:39,030
we could type
thePC.getMonitor.drawPixelAt.
241

241

00:14:39,030  -->  00:14:45,270
So we could do it this way, we could
say drawPixelAt 1500, 1200 in "red".
242

242

00:14:45,270  -->  00:14:47,880
That's one way of accessing it,
so what that is,
243

243

00:14:47,880  -->  00:14:52,510
is it's just using the getter function
from here which is returning theMonitor.
244

244

00:14:52,510  -->  00:14:55,510
Which is the class that has already
been initialized, the object which
245

245

00:14:55,510  -->  00:15:00,470
has been created in this class,
is returning that to the calling process.
246

246

00:15:00,470  -->  00:15:04,160
And from there what we're using,
we're then calling the method drawPixelAt,
247

247

00:15:04,160  -->  00:15:08,530
which is from that object that's
stored within the PC class itself,
248

248

00:15:08,530  -->  00:15:11,440
in the PC object,
the instance that we've actually created.
249

249

00:15:11,440  -->  00:15:14,120
And that's invoking that method for us.
250

250

00:15:14,120  -->  00:15:21,950
So likewise we could put
thePC.getMotherboard.loadProgram.
251

251

00:15:21,950  -->  00:15:27,580
How would we load the program,
Windows 1.0.
252

252

00:15:27,580  -->  00:15:30,700
We're doing the same thing in there,
we're getting the class,
253

253

00:15:30,700  -->  00:15:33,700
the object that's been created
when we created the PC class.
254

254

00:15:33,700  -->  00:15:36,590
So we're accessing it
within the PC object and
255

255

00:15:36,590  -->  00:15:39,670
we're getting it to call
the method loadProgram.
256

256

00:15:39,670  -->  00:15:43,740
Which is in that object, which of course
is in the PC object that we've created.
257

257

00:15:43,740  -->  00:15:47,510
And of course, likewise for theCase,
258

258

00:15:47,510  -->  00:15:51,740
thePC.getTheCase.pressPowerButton.
259

259

00:15:51,740  -->  00:15:53,120
We can do the same thing there.
260

260

00:15:53,120  -->  00:15:57,850
So I'm accessing ultimately these
functions that are in these base classes,
261

261

00:15:57,850  -->  00:16:03,250
theCase, theMotherboard or theMonitor,
but accessing them via thePC object.
262

262

00:16:03,250  -->  00:16:06,840
So this is what composition is,
this is the difference than inheritance.
263

263

00:16:06,840  -->  00:16:10,800
The PC object that we've created here,
so what we did to call the PC object was
264

264

00:16:10,800  -->  00:16:14,200
we created our case, our monitor,
and our motherboard.
265

265

00:16:14,200  -->  00:16:14,790
And in reality,
266

266

00:16:14,790  -->  00:16:17,190
when you're putting a computer together,
that's what you'd be doing.
267

267

00:16:17,190  -->  00:16:20,660
You'd go away and you'd actually buy
the case, you'd buy the monitor, and
268

268

00:16:20,660  -->  00:16:24,190
you'd buy the motherboard, and you're
then putting it together to build the PC.
269

269

00:16:24,190  -->  00:16:28,290
In this case, what we're doing is we're
passing these to the constructor which
270

270

00:16:28,290  -->  00:16:32,470
essentially is getting those items and
putting them together which forms our PC.
271

271

00:16:32,470  -->  00:16:38,050
So the PC has a case,
has a motherboard, and has a monitor.
272

272

00:16:38,050  -->  00:16:42,390
So this is the way when you're thinking of
whether to use inheritance or composition.
273

273

00:16:42,390  -->  00:16:43,930
Think about what you're trying to do here.
274

274

00:16:43,930  -->  00:16:47,800
In this case, we're trying to build
a computer and we need to access the case,
275

275

00:16:47,800  -->  00:16:48,830
the monitor, and the motherboard.
276

276

00:16:48,830  -->  00:16:53,250
We know that things, te computer has
got a case, has got a monitor, and
277

277

00:16:53,250  -->  00:16:54,110
has a motherboard.
278

278

00:16:54,110  -->  00:16:58,000
And so therefore composition is probably
a great way to go but, of course,
279

279

00:16:58,000  -->  00:17:00,870
a case by itself isn't just a computer.
280

280

00:17:00,870  -->  00:17:05,720
A monitor isn't a computer, and of
course the motherboard isn't a computer.
281

281

00:17:05,720  -->  00:17:09,040
They're part of a computer, but
not actually the whole computer,
282

282

00:17:09,040  -->  00:17:11,510
which is why we're using composition
here instead of inheritance.
283

283

00:17:11,510  -->  00:17:13,490
So I'm gonna end this video here.
284

284

00:17:13,490  -->  00:17:16,870
We'll continue on talking about
composition in the next video.
