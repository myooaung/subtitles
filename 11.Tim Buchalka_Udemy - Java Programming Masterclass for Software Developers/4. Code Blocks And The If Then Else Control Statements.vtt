WEBVTT
0
1
00:00:05.470 --> 00:00:09.150
In the previous video we went ahead and
discussed statements, white space and
1

2
00:00:09.150 --> 00:00:10.110
indenting.
2

3
00:00:10.110 --> 00:00:12.500
It's now time to move on
to the if keyword and
3

4
00:00:12.500 --> 00:00:14.770
also discuss code blocks in more detail.
4

5
00:00:14.770 --> 00:00:17.150
So, as you can see,
I've created a new project.
5

6
00:00:17.150 --> 00:00:20.140
I've called it if keyword and code blocks.
6

7
00:00:20.140 --> 00:00:23.410
So what I wanna do first is just go
through the if keyword a little bit
7

8
00:00:23.410 --> 00:00:26.690
more so you're familiar with the various
ways that you can actually use it.
8

9
00:00:26.690 --> 00:00:30.600
So what we're going to do is create
some code and then go through it.
9

10
00:00:30.600 --> 00:00:34.630
So, I'm going to start with some code and
then delete that comment and
10

11
00:00:34.630 --> 00:00:39.460
put boolean gameOver = true.
11

12
00:00:41.370 --> 00:00:43.860
Int score equals 5000.
12

13
00:00:43.860 --> 00:00:48.550
Int levelCompleted = 5.
13

14
00:00:48.550 --> 00:00:51.610
Int bonus = 100.
14

15
00:00:51.610 --> 00:00:57.660
So we can use the if keyword to create
a statement something along the lines of,
15

16
00:00:57.660 --> 00:01:04.090
if score equals, double equals because
we're doing a test, equals 5,000.
16

17
00:01:05.530 --> 00:01:08.400
We can use the brace to
create a code block or
17

18
00:01:08.400 --> 00:01:09.600
we can put something like printin.
18

19
00:01:10.870 --> 00:01:13.830
Your score was 5000.
19

20
00:01:13.830 --> 00:01:15.830
Okay, so we can just run that.
20

21
00:01:18.970 --> 00:01:20.880
So as you can see,
the if statement was pretty basic and
21

22
00:01:20.880 --> 00:01:22.330
it printed out your score was 5000.
22

23
00:01:22.330 --> 00:01:24.460
Just making more space here.
23

24
00:01:24.460 --> 00:01:27.090
So, that's the first use
of the if that you've seen.
24

25
00:01:27.090 --> 00:01:29.480
But we can actually also do this.
25

26
00:01:29.480 --> 00:01:33.090
We can get rid of these braces, in other
words, get rid of the code block if we've
26

27
00:01:33.090 --> 00:01:38.320
only got one line, one statement that
we want to get executed after the test.
27

28
00:01:38.320 --> 00:01:41.200
So in this case,
if the score equals 5,000,
28

29
00:01:41.200 --> 00:01:46.030
if that's true, it's going to run that and
execute that, like you just saw me run.
29

30
00:01:46.030 --> 00:01:49.950
If it's not true, it's just going to
ignore that and go on to the next line.
30

31
00:01:49.950 --> 00:01:51.740
So again we can run it,
just to confirm that it's gonna work.
31

32
00:01:54.620 --> 00:01:57.840
We still get the same response,
we still get the score is 5000.
32

33
00:01:57.840 --> 00:02:01.960
What we can't do without the code block,
without adding the braces,
33

34
00:02:01.960 --> 00:02:04.060
is we can't put another line here.
34

35
00:02:04.060 --> 00:02:05.480
Cuz what happens?
35

36
00:02:12.740 --> 00:02:15.240
As you'll see, run that again.
36

37
00:02:19.060 --> 00:02:24.880
This was executed as well, but
if we change this if so that it's 4000.
37

38
00:02:24.880 --> 00:02:29.400
And of course we set the score to 5000 so
we shouldn't see your score is 5000 on
38

39
00:02:29.400 --> 00:02:31.870
screen now because
the comparison will fail.
39

40
00:02:33.260 --> 00:02:37.510
But the output this was
executed was still executed.
40

41
00:02:37.510 --> 00:02:42.530
So what's happening is that this is being
executed no matter what because it's not
41

42
00:02:42.530 --> 00:02:44.830
on the line after the if test.
42

43
00:02:44.830 --> 00:02:46.890
And that's because only
one line without a code,
43

44
00:02:46.890 --> 00:02:52.290
like without adding these braces, we can
literally only process one line at a time.
44

45
00:02:52.290 --> 00:02:56.120
If I add the braces, so in other words,
if I create a code block and
45

46
00:02:56.120 --> 00:03:00.320
put that code in there, then that
will quite happily work here on that.
46

47
00:03:00.320 --> 00:03:07.080
And you get no output because, of course,
the score isn't 4000, it's 5000.
47

48
00:03:07.080 --> 00:03:09.740
If we change the comparison so
48

49
00:03:09.740 --> 00:03:15.950
that it's 5000, we get both because
it´s actually in the code block.
49

50
00:03:15.950 --> 00:03:18.510
So, the use of code blocks
50

51
00:03:18.510 --> 00:03:21.580
are optional if you´ve only got
one statement you want to process.
51

52
00:03:21.580 --> 00:03:24.650
What I generally recommend is even
if you've got only the one line,
52

53
00:03:25.840 --> 00:03:27.500
to probably use a code block anyway.
53

54
00:03:27.500 --> 00:03:32.310
And that's because I believe it
actually makes the code clearer and
54

55
00:03:32.310 --> 00:03:33.240
easy to understand.
55

56
00:03:33.240 --> 00:03:34.330
So, removing the code block.
56

57
00:03:36.790 --> 00:03:40.740
Just sometimes, at a glance, if there's
a space there which Java accepts,
57

58
00:03:40.740 --> 00:03:44.390
sometimes you might get a little bit
confused at first glance and wonder
58

59
00:03:44.390 --> 00:03:48.610
whether this is all part and parcel of the
same if keyword statement, if you will.
59

60
00:03:48.610 --> 00:03:51.790
But the other thing you can do,
if I put the code block back now,
60

61
00:03:51.790 --> 00:03:53.470
let's change this around a bit.
61

62
00:03:53.470 --> 00:03:56.660
I wanna show you the other parts of
the if, which I know we've talked about
62

63
00:03:56.660 --> 00:03:59.940
a little bit, but
just to make it a little more clearer.
63

64
00:03:59.940 --> 00:04:03.550
So I can put something like if
score is less the 5000, score was.
64

65
00:04:05.930 --> 00:04:13.270
Less than 5000, or we can also just put
an else, else, and put a code block.
65

66
00:04:13.270 --> 00:04:16.390
So what will happen there,
we can put something like.
66

67
00:04:19.110 --> 00:04:20.750
Got here.
67

68
00:04:20.750 --> 00:04:23.890
Well, just to see what happens,
and if we run that.
68

69
00:04:23.890 --> 00:04:29.240
We got here, and the reason that we
got here and we didn't see any other
69

70
00:04:29.240 --> 00:04:34.790
output is the first if test was checked,
so is score less than 5000?
70

71
00:04:34.790 --> 00:04:35.690
No, it wasn't.
71

72
00:04:35.690 --> 00:04:39.790
So this line, this code block was
not executed as a result of that.
72

73
00:04:39.790 --> 00:04:42.470
So what happens then is
the computer goes on and,
73

74
00:04:42.470 --> 00:04:45.180
to the next part here
which is an l statement.
74

75
00:04:45.180 --> 00:04:47.660
And because we've got no other
condition there, it says okay,
75

76
00:04:47.660 --> 00:04:50.660
in all other circumstances I'm
going to just print got here.
76

77
00:04:50.660 --> 00:04:52.800
And that's why it printed got here.
77

78
00:04:52.800 --> 00:04:56.360
If we then change this to put
it less than or equal to 5000.
78

79
00:05:00.740 --> 00:05:04.950
We get the message, your score was less
than 5000, and now the else wasn't
79

80
00:05:04.950 --> 00:05:09.610
executed So this line didn't get executed
because the first condition was fulfilled.
80

81
00:05:09.610 --> 00:05:11.890
So you can see that the if is
useful from that scenario, but
81

82
00:05:11.890 --> 00:05:13.010
we can even expand it further.
82

83
00:05:13.010 --> 00:05:15.920
What we can do is we can put
something like so we'll do that test,
83

84
00:05:15.920 --> 00:05:17.180
it was less than 5000.
84

85
00:05:17.180 --> 00:05:21.490
We can also do something like
85

86
00:05:21.490 --> 00:05:26.340
else if(score < 1000).
86

87
00:05:26.340 --> 00:05:28.260
Create another one.
87

88
00:05:28.260 --> 00:05:32.060
And I'll change that so it's < 5000.
88

89
00:05:32.060 --> 00:05:36.960
Then we use and > 1000.
89

90
00:05:39.920 --> 00:05:41.040
Then we can put this here.
90

91
00:05:41.040 --> 00:05:46.280
Your score was less than 5000 but
91

92
00:05:46.280 --> 00:05:49.840
greater than 1000.
92

93
00:05:49.840 --> 00:05:54.260
Then we can put else if(score less than
93

94
00:05:54.260 --> 00:05:59.490
1000), we can put some output,
94

95
00:05:59.490 --> 00:06:04.450
your score was less than 1000.
95

96
00:06:04.450 --> 00:06:06.130
You'll need to put
a variable name in there.
96

97
00:06:06.130 --> 00:06:08.990
Score.
So now what will happen is if the score is
97

98
00:06:08.990 --> 00:06:12.810
less than 5000 but it's greater than 1000,
it's gonna put that message.
98

99
00:06:12.810 --> 00:06:16.130
Notice if the score was less than 1000,
the score is gonna show that message,
99

100
00:06:16.130 --> 00:06:18.110
your score was less than one thousand.
100

101
00:06:18.110 --> 00:06:19.520
Otherwise, it's gonna go to got here.
101

102
00:06:19.520 --> 00:06:21.020
So let's try and see what happens there.
102

103
00:06:24.200 --> 00:06:25.310
Got here.
It was executed because,
103

104
00:06:25.310 --> 00:06:29.850
of course, these first two lines aren't
processed because in both cases,
104

105
00:06:29.850 --> 00:06:32.560
the comparison tests there have failed.
105

106
00:06:32.560 --> 00:06:36.400
So, score is 5000 and
score is greater than 1000.
106

107
00:06:36.400 --> 00:06:41.030
And what neither of us know is because
score is currently set to 5000.
107

108
00:06:41.030 --> 00:06:44.790
We could change that to check that
it's working by making that 4000.
108

109
00:06:44.790 --> 00:06:51.710
So if you run that, your score was
less than 5000 but greater than 1000.
109

110
00:06:51.710 --> 00:06:55.160
So it's now executed its first component,
and you can see that it's
110

111
00:06:55.160 --> 00:06:58.840
automatically jumping out of the section
after it's executed something.
111

112
00:06:58.840 --> 00:07:02.920
So as soon as it's found something,
it's going to ignore the else if and
112

113
00:07:02.920 --> 00:07:06.040
any other subsequent elses along the way.
113

114
00:07:06.040 --> 00:07:12.590
And just to confirm that we can then
make the score to be 800 and run that.
114

115
00:07:15.500 --> 00:07:17.040
We've now got your score
was less than 1000, so
115

116
00:07:17.040 --> 00:07:20.230
you can see there so
that's only executed this section here.
116

117
00:07:20.230 --> 00:07:24.040
So this can be very useful,
to use the if keyword
117

118
00:07:24.040 --> 00:07:28.870
to build up statements to test a lot
of scenarios and to proceed and
118

119
00:07:28.870 --> 00:07:33.180
execute certain code based on what
the results of those comparisons were.
119

120
00:07:33.180 --> 00:07:33.770
So that's the if keyword.
120

121
00:07:33.770 --> 00:07:36.180
I hope that's given you
a bit more clarification.
121

122
00:07:36.180 --> 00:07:38.010
So let's now just take
it to the next level.
122

123
00:07:38.010 --> 00:07:39.440
What I am going to do
is highlight that code.
123

124
00:07:39.440 --> 00:07:41.390
I'm just gonna comment that out.
124

125
00:07:41.390 --> 00:07:43.610
On a Mac I can hold down Cmd+/.
125

126
00:07:43.610 --> 00:07:45.570
You could also have gone
up to the code menu and
126

127
00:07:45.570 --> 00:07:47.230
selected Comment with Line Comment.
127

128
00:07:47.230 --> 00:07:49.770
And you can see to the right
there is the command slash,
128

129
00:07:49.770 --> 00:07:51.940
is the keyboard shortcut on a Mac.
129

130
00:07:51.940 --> 00:07:55.990
So check that out on your operating
system to see what the shortcut is.
130

131
00:07:55.990 --> 00:07:57.150
So what we wanna do is,
is we wanna do a test here.
131

132
00:07:57.150 --> 00:08:02.160
We wanna put if(gameOver = true)
132

133
00:08:13.200 --> 00:08:19.260
You wanna print out,
your final score was, final score.
133

134
00:08:19.260 --> 00:08:20.260
So if you run that.
134

135
00:08:22.560 --> 00:08:25.070
We can see that the final
score is 1300 and
135

136
00:08:25.070 --> 00:08:30.150
that's because the final score equals the
score, which was 800 plus levelCompleted,
136

137
00:08:30.150 --> 00:08:33.010
which is five,
times our bonus, which is 100.
137

138
00:08:33.010 --> 00:08:37.750
So therefore, it's 800 plus 500 and
the finalScore was 1300.
138

139
00:08:37.750 --> 00:08:41.790
So you can see that the code block,
as we've done before,
139

140
00:08:41.790 --> 00:08:45.250
was executed because gameOver,
of course, was set to true.
140

141
00:08:45.250 --> 00:08:48.310
But notice how we've created
a variable in the code block.
141

142
00:08:48.310 --> 00:08:51.760
And the thing to remember about code
blocks is, as you can see here,
142

143
00:08:51.760 --> 00:08:55.870
they're able to access variables that
were created outside of the code block.
143

144
00:08:56.880 --> 00:08:58.500
So you can see that we've accessed score,
144

145
00:08:58.500 --> 00:09:01.960
as you can see score there,
level completed and bonus.
145

146
00:09:01.960 --> 00:09:05.460
All these variables were created
outside of the code block.
146

147
00:09:05.460 --> 00:09:09.890
But final score was created,
the variable Inside the code block.
147

148
00:09:09.890 --> 00:09:16.120
What we can't do is we can't
put something like this,
148

149
00:09:16.120 --> 00:09:20.290
int savedFinalScore=finalScore.
149

150
00:09:20.290 --> 00:09:24.830
And IntelliJ comes up with an error and
it says cannot resolve symbol finalScore.
150

151
00:09:24.830 --> 00:09:28.680
And that's because once this
section of code has finished,
151

152
00:09:28.680 --> 00:09:31.630
in other words the computer
has processed it,
152

153
00:09:31.630 --> 00:09:36.720
it will automatically delete any variables
that it creates in that code block.
153

154
00:09:37.760 --> 00:09:38.840
So, the reverse isn't true.
154

155
00:09:38.840 --> 00:09:43.590
While you can access variables created
outside of the code block in the code
155

156
00:09:43.590 --> 00:09:49.650
block, what you can't do is
access variables created in
156

157
00:09:49.650 --> 00:09:53.120
the code block outside of the code block
as you can see in this scenario there.
157

158
00:09:54.410 --> 00:09:58.740
And just as another abbreviation, you can
also, when you see something like this,
158

159
00:09:58.740 --> 00:10:04.370
game over equals equals true,
that can be abbreviated to, if game over.
159

160
00:10:04.370 --> 00:10:10.740
So, that essentially is exactly the same
as typing if gameOver equals equals true.
160

161
00:10:10.740 --> 00:10:12.830
So keep that in mind as a way
to abbreviate your code.
161

162
00:10:12.830 --> 00:10:15.710
You'll see that commonly
used in Java code.
162

163
00:10:15.710 --> 00:10:20.460
There's just a shortcut to test to see
whether gameOver has the value true.
163

164
00:10:20.460 --> 00:10:25.240
So this concept of variables inside
a code block is called scope.
164

165
00:10:25.240 --> 00:10:28.800
And scope is something that requires
video as a sign of arrival.
165

166
00:10:28.800 --> 00:10:31.590
We'll be talking more about
scope in future videos.
166

167
00:10:31.590 --> 00:10:36.270
And scope really deals with accessibility
of variables in certain situations or
167

168
00:10:36.270 --> 00:10:39.680
in certain places in the code for
example, in a code block.
168

169
00:10:39.680 --> 00:10:43.020
The bottom line for now is,
in a code block if you create a variable,
169

170
00:10:43.020 --> 00:10:46.850
you can't access that variable you've
created outside of that code block.
170

171
00:10:46.850 --> 00:10:48.860
But of course, you can as you saw,
171

172
00:10:48.860 --> 00:10:52.190
still access variables that
were created previously and
172

173
00:10:52.190 --> 00:10:57.330
prior to going into the code block
whilst you're in the code block itself.
173

174
00:10:57.330 --> 00:10:58.140
Okay, so, it's challenge time.
174

175
00:11:06.500 --> 00:11:11.460
Okay, so the challenge for you now is to
create a second printout on the screen,
175

176
00:11:11.460 --> 00:11:16.710
this time with the score set to 10,000
with the level completed set to eight and
176

177
00:11:16.710 --> 00:11:18.580
with the bonus set to 200.
177

178
00:11:18.580 --> 00:11:22.010
So you need to do something very similar
to what we've done here in this first
178

179
00:11:22.010 --> 00:11:25.020
example, but you need to also make
sure that this still displays.
179

180
00:11:25.020 --> 00:11:29.950
So that essentially you'll have this first
one displaying, you'll then below that,
180

181
00:11:29.950 --> 00:11:33.750
have a second line with
the scenario here also displaying.
181

182
00:11:33.750 --> 00:11:36.110
And both of them should be displaying
here in the right-hand corner.
182

183
00:11:36.110 --> 00:11:36.970
All right, so go to it.
183

184
00:11:36.970 --> 00:11:40.790
Pause the video and go ahead and
see if you can implement that.
184

185
00:11:40.790 --> 00:11:44.490
And when you're ready, start the video
again and come back and see my solution.
185

186
00:11:44.490 --> 00:11:47.270
So how did you get on,
did you figure it out?
186

187
00:11:47.270 --> 00:11:50.220
Well, there's a couple of
ways to go about this.
187

188
00:11:50.220 --> 00:11:50.960
What we could do,
188

189
00:11:50.960 --> 00:11:56.090
the first approach would be to create
a complete new set of variables and
189

190
00:11:56.090 --> 00:12:01.660
to essentially do a copy and paste of that
code but use all the new variable names.
190

191
00:12:01.660 --> 00:12:02.640
So that would work.
191

192
00:12:02.640 --> 00:12:08.410
We could do something like Copy,
and we'll call this,
192

193
00:12:11.590 --> 00:12:15.700
New game over, new score,
193

194
00:12:15.700 --> 00:12:20.900
new level completed, new bonus.
194

195
00:12:23.980 --> 00:12:25.060
And then we could do something like.
195

196
00:12:28.700 --> 00:12:33.900
And then we could do something like new
196

197
00:12:33.900 --> 00:12:40.910
score equals new level
completed times new bonus.
197

198
00:12:43.010 --> 00:12:47.300
And note how I can still use the int
final score in this second code block,
198

199
00:12:47.300 --> 00:12:50.580
because if you remember as soon
as the code block is finished,
199

200
00:12:50.580 --> 00:12:52.460
Java will automatically delete that.
200

201
00:12:52.460 --> 00:12:56.370
So, that's why we're able to re-create
another variable with the same name again.
201

202
00:12:56.370 --> 00:13:00.900
Of course, we weren't able to do that
with these variables because they're
202

203
00:13:00.900 --> 00:13:04.470
in the same scope, effectively,
the same part of the code.
203

204
00:13:04.470 --> 00:13:07.080
And the other thing I need to do is
change that gameOver to newGameOver.
204

205
00:13:07.080 --> 00:13:11.930
So we could do that,
and if we run that, so
205

206
00:13:11.930 --> 00:13:16.840
far we've got, oops,
newScore was meant to be 10,000.
206

207
00:13:16.840 --> 00:13:22.520
Change these to the level is 8 and
200, that is what we're looking for.
207

208
00:13:22.520 --> 00:13:26.280
So we run that again,
get the answer 11,600,
208

209
00:13:26.280 --> 00:13:30.400
which is 10,000 plus 8 times 200 is 1600.
209

210
00:13:30.400 --> 00:13:33.420
10,000 plus 1600 equals 11,600.
210

211
00:13:33.420 --> 00:13:38.080
So that's certainly one solution to it,
creating all new variables.
211

212
00:13:38.080 --> 00:13:42.430
The disadvantage with that approach
is you're using excess memory so
212

213
00:13:42.430 --> 00:13:46.360
you're creating new variables
that you don't potentially need.
213

214
00:13:46.360 --> 00:13:48.380
So what you could do as an alternative,
214

215
00:13:48.380 --> 00:13:50.880
we could have just reused
those variables again.
215

216
00:13:50.880 --> 00:13:54.570
So what we could have done is I'm
just gonna cut that code out.
216

217
00:13:54.570 --> 00:13:55.460
I could have just copied these.
217

218
00:14:01.120 --> 00:14:05.300
This time I'll get rid of the definitions
because we're not redefining them,
218

219
00:14:05.300 --> 00:14:07.120
we're just changing the values.
219

220
00:14:07.120 --> 00:14:11.350
So we can make that 10,000 Level 8 and
200.
220

221
00:14:14.390 --> 00:14:17.780
And then we can literally just copy and
paste this section of code again.
221

222
00:14:19.520 --> 00:14:24.070
Paste that in because it's exactly the
same, we're using the same variable names.
222

223
00:14:24.070 --> 00:14:26.850
Everything else should be the same, so
we should get the same output here.
223

224
00:14:26.850 --> 00:14:27.350
So we run that.
224

225
00:14:29.470 --> 00:14:30.570
So that's another way of doing it.
225

226
00:14:30.570 --> 00:14:32.760
That's just literally copying and pasting.
226

227
00:14:32.760 --> 00:14:37.760
The advantage with that approach is it was
quicker, we didn't create new variables.
227

228
00:14:37.760 --> 00:14:40.850
So we used the memory more efficiently.
228

229
00:14:40.850 --> 00:14:44.740
But the disadvantages, firstly, we haven't
got a permanent record of these variables.
229

230
00:14:44.740 --> 00:14:47.930
So if we wanted to keep the fact
that this first goal was 800 and
230

231
00:14:47.930 --> 00:14:50.540
the level was completed was 5 and
bonus was 100,
231

232
00:14:50.540 --> 00:14:54.500
we can't do that because we have
now redefined the variables.
232

233
00:14:54.500 --> 00:14:58.650
Secondly, we've used game over equals true
for both and if you were tracking two
233

234
00:14:58.650 --> 00:15:02.170
players' scores maybe game over
was only the case for one of them.
234

235
00:15:02.170 --> 00:15:04.880
So in this case you may not have
actually printed this out at all because
235

236
00:15:04.880 --> 00:15:06.410
it was set to false.
236

237
00:15:06.410 --> 00:15:09.820
But the other disadvantage is
we're copying and pasting code.
237

238
00:15:09.820 --> 00:15:15.180
And the disadvantage with copying and
pasting code is we're duplicating code.
238

239
00:15:15.180 --> 00:15:17.740
And what that means if we
need to make a change,
239

240
00:15:17.740 --> 00:15:20.970
then what we need to do is change
it in more than one place, and
240

241
00:15:20.970 --> 00:15:25.530
if you forget that your code is,
your code has been duplicated.
241

242
00:15:25.530 --> 00:15:27.050
You may forget to change in one place,
242

243
00:15:27.050 --> 00:15:29.840
which means your scores may
not be calculated correctly.
243

244
00:15:29.840 --> 00:15:33.540
For example, let's just say we've
decided to change the formula for
244

245
00:15:33.540 --> 00:15:35.000
defining our final score.
245

246
00:15:35.000 --> 00:15:40.770
And we're gonna add a bonus of 1000 to
the final score that was calculated.
246

247
00:15:40.770 --> 00:15:42.910
So we come along here and we put +.
247

248
00:15:44.650 --> 00:15:47.170
So just on the next line
we could put final score.
248

249
00:15:50.050 --> 00:15:52.620
Plus equals 1000.
249

250
00:15:52.620 --> 00:15:54.220
So that's an overall final bonus.
250

251
00:15:54.220 --> 00:15:55.000
So if we run this.
251

252
00:15:58.120 --> 00:16:01.080
You can see the first
score was correctly set
252

253
00:16:01.080 --> 00:16:05.500
to 2300 which was the 1300
plus the 1000 bonus.
253

254
00:16:05.500 --> 00:16:09.230
But down here we forgot to make
the change in this particular code block.
254

255
00:16:09.230 --> 00:16:13.040
And as a result that final score
didn't have the final 1000 points
255

256
00:16:13.040 --> 00:16:14.580
added to it correctly.
256

257
00:16:14.580 --> 00:16:16.360
That's the disadvantage with duplication.
257

258
00:16:16.360 --> 00:16:20.220
You need to go back and remember all the
places where the code is duplicated and
258

259
00:16:20.220 --> 00:16:21.550
to make your change.
259

260
00:16:21.550 --> 00:16:24.720
So you're really asking for errors in
the long term because, let's face it,
260

261
00:16:24.720 --> 00:16:25.840
we're all human.
261

262
00:16:25.840 --> 00:16:28.040
We make mistakes, we forget things.
262

263
00:16:28.040 --> 00:16:29.810
And it is very common in programming,
263

264
00:16:29.810 --> 00:16:32.650
particularly as the code you
work on gets more complicated.
264

265
00:16:32.650 --> 00:16:36.310
To forget, if you are duplicating
a lot of code, where all that code is.
265

266
00:16:36.310 --> 00:16:40.460
So you definitely don't wanna get into
that scenario of duplicating your code.
266

267
00:16:40.460 --> 00:16:43.040
And there are lots of ways
to help really reduce or
267

268
00:16:43.040 --> 00:16:46.490
eliminate the need pretty much for
any duplicate code.
268

269
00:16:46.490 --> 00:16:49.960
So, in the next video, I'm going
to expand on from this example and
269

270
00:16:49.960 --> 00:16:55.010
show you how you can remove duplication
by using the concept of methods.
270

271
00:16:55.010 --> 00:16:59.090
So, methods is taking the concept of
a code block to the next level, and
271

272
00:16:59.090 --> 00:17:02.250
it's going to effectively
allow you to reuse that code.
272

273
00:17:02.250 --> 00:17:05.120
So type the code once and
reuse it multiple times.
273

274
00:17:05.120 --> 00:17:06.400
So we'll do that in the next video.
