1
1

00:00:05,510  -->  00:00:07,460
alright so it's time for a lambda
2

2

00:00:07,460  -->  00:00:10,270
challenge or rather this case challenges
3

3

00:00:10,270  -->  00:00:12,620
because what I've done is I've set up
4

4

00:00:12,620  -->  00:00:14,960
a series of smaller lambda challenges
5

5

00:00:14,960  -->  00:00:16,730
to help you really understand what
6

6

00:00:16,730  -->  00:00:19,160
lambda expressions are and hopefully you
7

7

00:00:19,160  -->  00:00:20,570
can get through all these challenges so
8

8

00:00:20,570  -->  00:00:25,240
let's start off with the first challenge
9

9

00:00:25,240  -->  00:00:27,430
the challenge number one is to write the
10

10

00:00:27,430  -->  00:00:29,230
following anonymous class that you can
11

11

00:00:29,230  -->  00:00:31,860
see on screen as the Lambda expression
12

12

00:00:31,860  -->  00:00:33,580
so another words convert that so it's a
13

13

00:00:33,580  -->  00:00:36,160
lambda expression so pause the video now
14

14

00:00:36,160  -->  00:00:38,290
and try that out and i'll see you when
15

15

00:00:38,290  -->  00:00:43,570
you get back alright so let's solve that
16

16

00:00:43,570  -->  00:00:46,620
so firstly the runnable class so this
17

17

00:00:46,620  -->  00:00:48,190
was the class was going to paste this
18

18

00:00:48,190  -->  00:00:51,120
onto into the source code so
19

19

00:00:51,120  -->  00:00:52,510
that's what we're trying to convert so
20

20

00:00:52,510  -->  00:00:53,940
how do we convert that to lambda
21

21

00:00:53,940  -->  00:00:54,790
expression
22

22

00:00:54,790  -->  00:00:57,330
ok so let's convert that to a lambda
23

23

00:00:57,330  -->  00:00:59,350
expressions going to be runnable will
24

24

00:00:59,350  -->  00:01:01,960
call this.....
25

25

00:01:01,960  -->  00:01:05,260
....and we need to
26

26

00:01:05,260  -->  00:01:07,750
put semicolon at the end of the runnable
27

27

00:01:07,750  -->  00:01:10,470
line and then we just take the code that
28

28

00:01:10,470  -->  00:01:11,890
we want executed which will be
29

29

00:01:11,890  -->  00:01:14,590
exactly the same in this case gonna paste that
30

30

00:01:14,590  -->  00:01:18,490
directly into the code block and they're
31

31

00:01:18,490  -->  00:01:20,650
our runnable and just in case you're wondering
32

32

00:01:20,650  -->  00:01:22,840
we don't have any arguments so we have
33

33

00:01:22,840  -->  00:01:24,610
to use empty parenthesis that's why i've
34

34

00:01:24,610  -->  00:01:26,610
used the parentheses there on line
35

35

00:01:26,610  -->  00:01:29,280
17 the body of the lambda is the
36

36

00:01:29,280  -->  00:01:31,210
same body of the anonymous classes run
37

37

00:01:31,210  -->  00:01:33,460
method and since there was more than
38

38

00:01:33,460  -->  00:01:35,790
one statement in the body we have to use
39

39

00:01:35,790  -->  00:01:39,100
curly braces around so it does this lambda
40

40

00:01:39,100  -->  00:01:40,570
map to any of the interfaces in the
41

41

00:01:40,570  -->  00:01:42,700
java.util.function package
42

42

00:01:42,700  -->  00:01:44,530
well actually no it doesn't it doesn't
43

43

00:01:44,530  -->  00:01:46,210
take any arguments and it doesn't return
44

44

00:01:46,210  -->  00:01:48,960
the value all the interfaces in the java
45

45

00:01:48,960  -->  00:01:51,030
.util.function package either
46

46

00:01:51,030  -->  00:01:53,250
take an argument or arguments or return
47

47

00:01:53,250  -->  00:01:55,030
a value or do both
48

48

00:01:55,030  -->  00:01:56,460
alright so let's move on to the next
49

49

00:01:56,460  -->  00:02:02,350
challenge alright so challenge number 2
50

50

00:02:02,350  -->  00:02:06,210
i'm going to write the following method
51

51

00:02:06,210  -->  00:02:09,420
as a lambda expression you don't worry about
52

52

00:02:09,420  -->  00:02:12,390
a signing into anything at this stage so
53

53

00:02:12,390  -->  00:02:14,200
pause the video and I'll see you when
54

54

00:02:14,200  -->  00:02:15,100
you come back
55

55

00:02:15,100  -->  00:02:18,880
alright so how do we go about doing that
56

56

00:02:18,880  -->  00:02:22,060
so we start with the parameter so.....
57

57

00:02:22,060  -->  00:02:24,130
....
58

58

00:02:24,130  -->  00:02:27,160
....
59

59

00:02:27,160  -->  00:02:28,510
...
60

60

00:02:28,510  -->  00:02:29,950
.....
61

61

00:02:29,950  -->  00:02:32,020
....
62

62

00:02:32,020  -->  00:02:34,420
....
63

63

00:02:34,420  -->  00:02:36,220
.....
64

64

00:02:36,220  -->  00:02:38,440
....
65

65

00:02:38,440  -->  00:02:42,460
....
66

66

00:02:42,460  -->  00:02:43,780
alternatively we could have actually
67

67

00:02:43,780  -->  00:02:46,090
been a little bit more verbose and we
68

68

00:02:46,090  -->  00:02:47,800
could have indicated the type here so in
69

69

00:02:47,800  -->  00:02:49,750
parentheses string.....
70

70

00:02:49,750  -->  00:02:53,710
.....so we have got
71

71

00:02:53,710  -->  00:02:54,880
an error here about the lambda
72

72

00:02:54,880  -->  00:02:56,680
expression not expected but that's ok
73

73

00:02:56,680  -->  00:02:58,900
and i will be looking at that next
74

74

00:02:58,900  -->  00:03:00,700
challenge the main thing was to tell you
75

75

00:03:00,700  -->  00:03:03,100
figured out how to write that method as a
76

76

00:03:03,100  -->  00:03:06,190
lambda expression so here the parameter
77

77

00:03:06,190  -->  00:03:08,140
becomes the lambdas argument and the
78

78

00:03:08,140  -->  00:03:10,420
body of the every second child method
79

79

00:03:10,420  -->  00:03:12,970
became the lambdas body and this code
80

80

00:03:12,970  -->  00:03:14,320
prints out every second character of the
81

81

00:03:14,320  -->  00:03:16,570
string in case you're wondering and
82

82

00:03:16,570  -->  00:03:18,370
again in the second scenario where i
83

83

00:03:18,370  -->  00:03:20,830
indicated the type of the argument have
84

84

00:03:20,830  -->  00:03:23,140
to use parentheses with the first case i
85

85

00:03:23,140  -->  00:03:26,590
just use the S so does this lambda map
86

86

00:03:26,590  -->  00:03:28,570
to any of the interfaces in the java .
87

87

00:03:28,570  -->  00:03:31,630
.util.function package in this case
88

88

00:03:31,630  -->  00:03:32,890
yes it does it takes one argument
89

89

00:03:32,890  -->  00:03:35,140
parameter in other words and returns a
90

90

00:03:35,140  -->  00:03:38,290
value so it maps to function string comma
91

91

00:03:38,290  -->  00:03:40,960
string so to actually get this working
92

92

00:03:40,960  -->  00:03:43,510
we can do the following so i can
93

93

00:03:43,510  -->  00:03:45,070
actually put that references so...
94

94

00:03:45,070  -->  00:03:51,730
.....
95

95

00:03:51,730  -->  00:03:57,280
.....
96

96

00:03:57,280  -->  00:03:59,500
that should fix the errors and of course where we've
97

97

00:03:59,500  -->  00:04:00,880
got the parameter type
98

98

00:04:00,880  -->  00:04:03,310
we can also remove that and just go back
99

99

00:04:03,310  -->  00:04:04,510
to the native tyoe where parentheses
100

100

00:04:04,510  -->  00:04:07,510
and the type is implied
101

101

00:04:07,510  -->  00:04:10,120
because of the function definition that
102

102

00:04:10,120  -->  00:04:11,830
we've set up on line 27
103

103

00:04:11,830  -->  00:04:14,800
alright so that's challenge 2 complete
104

104

00:04:14,800  -->  00:04:15,280
....
105

105

00:04:15,280  -->  00:04:22,590
let's move on now to the next challenge
106

106

00:04:22,590  -->  00:04:25,860
alright challenge number three
107

107

00:04:25,860  -->  00:04:27,620
so right now the function that we just
108

108

00:04:27,620  -->  00:04:29,930
created doesn't do anything going to
109

109

00:04:29,930  -->  00:04:31,220
write the code that will execute the
110

110

00:04:31,220  -->  00:04:32,930
function the argument as you can see
111

111

00:04:32,930  -->  00:04:36,590
on screen of 1234567890
112

112

00:04:36,590  -->  00:04:38,150
so go ahead and do that pause the
113

113

00:04:38,150  -->  00:04:39,990
video now and i'll see you when you get
114

114

00:04:39,990  -->  00:04:44,520
back alright so how do we do that how do
115

115

00:04:44,520  -->  00:04:46,620
we actually are execute the function
116

116

00:04:46,620  -->  00:04:49,560
that we've created on line 27 well to do
117

117

00:04:49,560  -->  00:04:51,990
that give a space first so we can see
118

118

00:04:51,990  -->  00:04:57,930
this we just do lambda function.....
119

119

00:04:57,930  -->  00:04:59,870
....
120

120

00:04:59,870  -->  00:05:07,050
......
121

121

00:05:07,050  -->  00:05:09,590
nothing happens because we haven't
122

122

00:05:09,590  -->  00:05:12,380
indicated is going to be the output and
123

123

00:05:12,380  -->  00:05:13,880
if we wanted to actually output on the
124

124

00:05:13,880  -->  00:05:19,400
screen we could do a.....
125

125

00:05:19,400  -->  00:05:21,560
run that and we should now see the
126

126

00:05:21,560  -->  00:05:28,020
output in this case 24680 alright so
127

127

00:05:28,020  -->  00:05:29,000
let's move on to the next challenge
128

128

00:05:29,000  -->  00:05:36,810
alright challenge number four
129

129

00:05:36,810  -->  00:05:38,880
so instead of executing this function
130

130

00:05:38,880  -->  00:05:40,380
directly the one that we just created
131

131

00:05:40,380  -->  00:05:42,750
suppose that we want to pass it to a
132

132

00:05:42,750  -->  00:05:45,720
method so your task is to write a method
133

133

00:05:45,720  -->  00:05:48,000
called every second character that
134

134

00:05:48,000  -->  00:05:50,490
accepts the function as a parameter and
135

135

00:05:50,490  -->  00:05:53,880
execute it with the argument 123456789
136

136

00:05:53,880  -->  00:05:56,790
0 and it should return the result of
137

137

00:05:56,790  -->  00:05:59,040
the function for bonus points don't
138

138

00:05:59,040  -->  00:06:01,080
hardcode the argument string within the
139

139

00:06:01,080  -->  00:06:01,980
method
140

140

00:06:01,980  -->  00:06:03,540
alright so that's challenge number for
141

141

00:06:03,540  -->  00:06:04,950
go ahead and try that out pause the
142

142

00:06:04,950  -->  00:06:06,810
video and I'll see you when you get back
143

143

00:06:06,810  -->  00:06:11,660
alright so let's go ahead now and
144

144

00:06:11,660  -->  00:06:13,530
write that function so what we need to
145

145

00:06:13,530  -->  00:06:17,220
do write that method should say so we
146

146

00:06:17,220  -->  00:06:18,450
want to write this method called every
147

147

00:06:18,450  -->  00:06:19,770
second character so it's going to be
148

148

00:06:19,770  -->  00:06:22,110
public....
149

149

00:06:22,110  -->  00:06:24,570
....
150

150

00:06:24,570  -->  00:06:26,550
.....
151

151

00:06:26,550  -->  00:06:29,040
...so we need to make it
152

152

00:06:29,040  -->  00:06:31,380
a static so we can do that and it's
153

153

00:06:31,380  -->  00:06:32,310
going to be string because we're
154

154

00:06:32,310  -->  00:06:34,050
returning a string it's going to be
155

155

00:06:34,050  -->  00:06:38,250
every second character and the parameter
156

156

00:06:38,250  -->  00:06:44,430
function....
157

157

00:06:44,430  -->  00:06:48,470
....and then
158

158

00:06:48,470  -->  00:06:50,250
how do we actually return the result we
159

159

00:06:50,250  -->  00:06:53,430
do.....
160

160

00:06:53,430  -->  00:06:59,550
.....so that's it
161

161

00:06:59,550  -->  00:07:02,490
you can see we just needed to pass that
162

162

00:07:02,490  -->  00:07:04,650
function to the method inside the method
163

163

00:07:04,650  -->  00:07:06,380
we actually called the apply method with
164

164

00:07:06,380  -->  00:07:08,580
what we want to process in this case
165

165

00:07:08,580  -->  00:07:12,570
1234567890 so that's the first one the
166

166

00:07:12,570  -->  00:07:14,820
bonus points 1 when we wanted to
167

167

00:07:14,820  -->  00:07:16,770
actually pass the argument as a
168

168

00:07:16,770  -->  00:07:19,220
parameter just a matter of passing the
169

169

00:07:19,220  -->  00:07:21,090
second parameter so pass it as a
170

170

00:07:21,090  -->  00:07:24,210
string source....
171

171

00:07:24,210  -->  00:07:26,280
.....
172

172

00:07:26,280  -->  00:07:29,520
well then change that to source you can
173

173

00:07:29,520  -->  00:07:32,700
see that....
174

174

00:07:32,700  -->  00:07:35,130
alright so that is challenge 4 completed
175

175

00:07:35,130  -->  00:07:44,690
let's move now on to challenge 5
176

176

00:07:44,690  -->  00:07:46,590
so using the bonus version that we just
177

177

00:07:46,590  -->  00:07:48,900
coded call the method with the lambda
178

178

00:07:48,900  -->  00:07:50,960
function we created earlier and the
179

179

00:07:50,960  -->  00:07:54,180
string 1234567890 then print the
180

180

00:07:54,180  -->  00:07:57,300
result returned from the method so that is
181

181

00:07:57,300  -->  00:07:58,880
challenge 5 go ahead and try that out
182

182

00:07:58,880  -->  00:08:00,870
and pause the video now and i'll see you
183

183

00:08:00,870  -->  00:08:05,210
when you get back alright so let's go
184

184

00:08:05,210  -->  00:08:07,550
ahead now and call the method that
185

185

00:08:07,550  -->  00:08:09,380
we've created with our lambda function
186

186

00:08:09,380  -->  00:08:11,900
and print the result and you can
187

187

00:08:11,900  -->  00:08:13,940
probably figure out that would be
188

188

00:08:13,940  -->  00:08:16,080
something like this....
189

189

00:08:16,080  -->  00:08:20,630
.....
190

190

00:08:20,630  -->  00:08:22,310
....
191

191

00:08:22,310  -->  00:08:33,120
....
192

192

00:08:33,120  -->  00:08:37,190
and if you just printed it out directly
193

193

00:08:37,190  -->  00:08:39,830
like I did on line 38 that would be ok
194

194

00:08:39,830  -->  00:08:42,260
as well so let's just comment out that
195

195

00:08:42,260  -->  00:08:44,570
first code and let's just run
196

196

00:08:44,570  -->  00:08:49,520
this and we get our results to 24680
197

197

00:08:49,520  -->  00:08:52,560
alright so let's move on to the next
198

198

00:08:52,560  -->  00:08:55,660
challenge
199

199

00:08:55,660  -->  00:09:00,750
alright challenge number six
200

200

00:09:00,750  -->  00:09:03,000
so now write a lambda expression that
201

201

00:09:03,000  -->  00:09:05,400
maps to the java.util.supply
202

202

00:09:05,400  -->  00:09:08,010
interface now this lambda should return
203

203

00:09:08,010  -->  00:09:10,950
the string i love java and assign it to a
204

204

00:09:10,950  -->  00:09:13,410
variable called I love java so go
205

205

00:09:13,410  -->  00:09:14,880
ahead and try out that challenge number
206

206

00:09:14,880  -->  00:09:17,280
six pause the video and I'll see you
207

207

00:09:17,280  -->  00:09:20,880
when you get back
208

208

00:09:20,880  -->  00:09:22,980
ok so let's go and try this so write
209

209

00:09:22,980  -->  00:09:24,420
a lambda expression that maps to the
210

210

00:09:24,420  -->  00:09:28,320
java.util.supplier interface so
211

211

00:09:28,320  -->  00:09:33,930
we're going to do....
212

212

00:09:33,930  -->  00:09:37,650
.....
213

213

00:09:37,650  -->  00:09:41,100
....
214

214

00:09:41,100  -->  00:09:48,990
....
215

215

00:09:48,990  -->  00:09:52,560
....so that is it so
216

216

00:09:52,560  -->  00:09:54,570
recall that a supplier produces
217

217

00:09:54,570  -->  00:09:56,760
objects it doesn't actually accept any
218

218

00:09:56,760  -->  00:09:58,980
arguments and since the lambda body here
219

219

00:09:58,980  -->  00:10:00,900
is a single statement we don't have to
220

220

00:10:00,900  -->  00:10:03,210
include the return key word because it's
221

221

00:10:03,210  -->  00:10:05,340
implied but if we wanted to include the
222

222

00:10:05,340  -->  00:10:07,830
clarity we could change this slightly to
223

223

00:10:07,830  -->  00:10:11,130
do that and let's just take a copy of
224

224

00:10:11,130  -->  00:10:17,670
this line first copy of that and we're
225

225

00:10:17,670  -->  00:10:19,320
going to comment that so its still there and
226

226

00:10:19,320  -->  00:10:20,910
the source code which should be able to
227

227

00:10:20,910  -->  00:10:23,790
download so changing this now to
228

228

00:10:23,790  -->  00:10:27,090
actually include the return statement we
229

229

00:10:27,090  -->  00:10:29,460
need to add code block to do that we're doing
230

230

00:10:29,460  -->  00:10:31,110
it on one line if you want....
231

231

00:10:31,110  -->  00:10:33,840
....
232

232

00:10:33,840  -->  00:10:37,680
....
233

233

00:10:37,680  -->  00:10:40,770
....and again we're using return
234

234

00:10:40,770  -->  00:10:42,840
statement we have to use curly braces to
235

235

00:10:42,840  -->  00:10:44,610
open a code block then we also have to
236

236

00:10:44,610  -->  00:10:46,230
include the semicolon at the end of the
237

237

00:10:46,230  -->  00:10:48,870
body statement as well as at the end of
238

238

00:10:48,870  -->  00:10:50,520
the code block to complete the line
239

239

00:10:50,520  -->  00:10:53,070
alright so let's now move on to the
240

240

00:10:53,070  -->  00:10:54,720
next challenge the last one for this
241

241

00:10:54,720  -->  00:10:57,110
video
242

242

00:10:57,110  -->  00:10:59,080
alright next challenge challenge number
243

243

00:10:59,080  -->  00:11:01,800
seven
244

244

00:11:01,800  -->  00:11:04,170
now as with function the supplier
245

245

00:11:04,170  -->  00:11:06,990
won't do anything until we use it so use
246

246

00:11:06,990  -->  00:11:09,260
this supplier to assign a string i love java
247

247

00:11:09,260  -->  00:11:12,200
to a variable called supplier result and
248

248

00:11:12,200  -->  00:11:14,130
then print that variable to the console
249

249

00:11:14,130  -->  00:11:15,630
so that's your challenge
250

250

00:11:15,630  -->  00:11:17,430
pause the video now and i'll see you
251

251

00:11:17,430  -->  00:11:21,950
when you get back alright so as you saw
252

252

00:11:21,950  -->  00:11:23,910
the supplier won't do anything until we
253

253

00:11:23,910  -->  00:11:26,570
use it so let's use the supplier to assign
254

254

00:11:26,570  -->  00:11:28,140
the string i love java to a variable
255

255

00:11:28,140  -->  00:11:30,300
called supplier result we're going to do
256

256

00:11:30,300  -->  00:11:35,570
that it's going to be....
257

257

00:11:35,570  -->  00:11:40,260
....
258

258

00:11:40,260  -->  00:11:46,230
....
259

259

00:11:46,230  -->  00:11:50,130
and just run that to make sure it works
260

260

00:11:50,130  -->  00:11:58,290
i love java so that's it
261

261

00:11:58,290  -->  00:12:00,480
alright so let's move on now to the next
262

262

00:12:00,480  -->  00:12:01,740
video and we still got some more
263

263

00:12:01,740  -->  00:12:04,050
challenges to complete so i'll see you
264

264

00:12:04,050  -->  00:12:09,740
in the next video
