WEBVTT
1
1

00:00:04.910  -->  00:00:05.860
- [Buckalka] Alright, so at this point
2

2

00:00:05.860  -->  00:00:07.050
we're going to start taking a look
3

3

00:00:07.050  -->  00:00:11.300
at using JDBC from
within a UI application.
4

4

00:00:11.300  -->  00:00:14.980
Now the JDBC calls themselves are the same
5

5

00:00:14.980  -->  00:00:17.240
but when do we create
the data source class
6

6

00:00:17.240  -->  00:00:21.170
and how do classes in the
application access it?
7

7

00:00:21.170  -->  00:00:23.380
How do we perform database operations
8

8

00:00:23.380  -->  00:00:25.590
so that the user interface doesn't freeze?
9

9

00:00:25.590  -->  00:00:27.230
And how do we report the results
10

10

00:00:27.230  -->  00:00:28.750
back to the user?
11

11

00:00:28.750  -->  00:00:30.270
Well, the purpose of these videos
12

12

00:00:30.270  -->  00:00:32.450
is to answer those questions.
13

13

00:00:32.450  -->  00:00:33.280
So note here
14

14

00:00:33.280  -->  00:00:35.800
that the goal isn't to create
a pretty user interface
15

15

00:00:35.800  -->  00:00:37.640
the focus is on the questions
16

16

00:00:37.640  -->  00:00:39.780
that I mentioned previously
17

17

00:00:39.780  -->  00:00:42.440
using a functional user interface.
18

18

00:00:42.440  -->  00:00:44.240
So I'm going to assume at this point
19

19

00:00:44.240  -->  00:00:46.450
that you've watched the
Java Effects section
20

20

00:00:46.450  -->  00:00:47.960
of the course and there from
21

21

00:00:47.960  -->  00:00:48.860
I'm only going to
22

22

00:00:48.860  -->  00:00:50.800
explain the user
interface specific concept
23

23

00:00:50.800  -->  00:00:51.870
if it's new
24

24

00:00:51.870  -->  00:00:53.400
and hasn't been previously covered
25

25

00:00:53.400  -->  00:00:54.760
in that section.
26

26

00:00:54.760  -->  00:00:55.620
So therefore I advise
27

27

00:00:55.620  -->  00:00:56.730
if you haven't been through
28

28

00:00:56.730  -->  00:00:58.740
the Java Effects section of the course
29

29

00:00:58.740  -->  00:01:00.920
make sure you do check that out
30

30

00:01:00.920  -->  00:01:01.750
at least go through
31

31

00:01:01.750  -->  00:01:03.550
like a number of the initial videos
32

32

00:01:03.550  -->  00:01:04.660
to get a bit of an idea
33

33

00:01:04.660  -->  00:01:06.580
on what to expect
34

34

00:01:06.580  -->  00:01:09.080
and also what Java Effects is.
35

35

00:01:10.030  -->  00:01:10.930
And if you don't do that
36

36

00:01:10.930  -->  00:01:11.870
I think may find
37

37

00:01:11.870  -->  00:01:12.730
that you possibly might get
38

38

00:01:12.730  -->  00:01:13.630
a little bit lost
39

39

00:01:13.630  -->  00:01:16.400
so I think it is important to do that.
40

40

00:01:16.400  -->  00:01:17.240
So what I've done
41

41

00:01:17.240  -->  00:01:20.080
is I've created a new Java Effects project
42

42

00:01:20.080  -->  00:01:21.840
called Music UI
43

43

00:01:21.840  -->  00:01:23.390
and the user interface itself
44

44

00:01:23.390  -->  00:01:24.460
we're going to be creating
45

45

00:01:24.460  -->  00:01:26.260
is fairly simple.
46

46

00:01:26.260  -->  00:01:27.970
So, we're going to be using a border pane
47

47

00:01:27.970  -->  00:01:29.030
with a table view
48

48

00:01:29.030  -->  00:01:30.940
in the sent position.
49

49

00:01:30.940  -->  00:01:33.170
Now we're also gonna have a progress bar
50

50

00:01:33.170  -->  00:01:34.080
which won't be visible
51

51

00:01:34.080  -->  00:01:36.090
when the application starts
52

52

00:01:36.090  -->  00:01:37.890
for reasons that will become apparent
53

53

00:01:37.890  -->  00:01:40.060
and at the bottom of the window
54

54

00:01:40.060  -->  00:01:41.250
will be where that resides
55

55

00:01:41.250  -->  00:01:42.170
in a h-box.
56

56

00:01:43.010  -->  00:01:44.490
Now in the right position
57

57

00:01:44.490  -->  00:01:45.590
we'll place a v-box
58

58

00:01:45.590  -->  00:01:47.550
containing several buttons.
59

59

00:01:47.550  -->  00:01:49.310
Now pressing a button
60

60

00:01:49.310  -->  00:01:50.330
is gonna essentially perform
61

61

00:01:50.330  -->  00:01:51.940
a SQL operation
62

62

00:01:51.940  -->  00:01:53.990
so we're going to have three buttons.
63

63

00:01:53.990  -->  00:01:57.580
List artists, the second
button to show albums
64

64

00:01:57.580  -->  00:01:59.300
for a selected artist
65

65

00:01:59.300  -->  00:02:02.500
and thirdly a an update artist button.
66

66

00:02:02.500  -->  00:02:04.290
Now that may not sound like much
67

67

00:02:04.290  -->  00:02:05.150
but each one here's
68

68

00:02:05.150  -->  00:02:06.870
going to demonstrate something different
69

69

00:02:06.870  -->  00:02:09.860
that can be extended
to similar operations.
70

70

00:02:09.860  -->  00:02:11.000
So the list artists button
71

71

00:02:11.000  -->  00:02:12.380
will query all the data
72

72

00:02:12.380  -->  00:02:13.610
in a table and present that
73

73

00:02:13.610  -->  00:02:14.610
to the user.
74

74

00:02:15.530  -->  00:02:18.070
Now the show artist button
75

75

00:02:18.070  -->  00:02:19.590
will need to do a query
76

76

00:02:19.590  -->  00:02:21.830
based on a selected record
77

77

00:02:21.830  -->  00:02:23.800
and then display the results.
78

78

00:02:23.800  -->  00:02:25.720
And finally, the update artist button
79

79

00:02:25.720  -->  00:02:27.390
will demonstrate what's involved
80

80

00:02:27.390  -->  00:02:29.930
when performing one of the crud operations
81

81

00:02:29.930  -->  00:02:32.960
that changes existing data in the table.
82

82

00:02:32.960  -->  00:02:33.790
So let's start out now
83

83

00:02:33.790  -->  00:02:36.980
by renaming the sample .fxml file.
84

84

00:02:36.980  -->  00:02:38.450
So we'll come over here
85

85

00:02:38.450  -->  00:02:39.970
right click that as we've done before
86

86

00:02:39.970  -->  00:02:42.130
refactor, rename
87

87

00:02:42.130  -->  00:02:44.630
and we'll call that main.fxml.
88

88

00:02:47.860  -->  00:02:51.690
And now let's go ahead
and add some fxml talk.
89

89

00:02:53.410  -->  00:02:55.090
Now just to save a bit of time
90

90

00:02:55.090  -->  00:02:57.420
I'm just going to copy
and paste the code here
91

91

00:02:57.420  -->  00:02:59.470
and I crafted this fxml
92

92

00:02:59.470  -->  00:03:01.310
using the same builder
93

93

00:03:01.310  -->  00:03:02.370
so if you're looking at this coding
94

94

00:03:02.370  -->  00:03:03.560
that I'm about to paste in
95

95

00:03:03.560  -->  00:03:04.930
and comparing that save to code
96

96

00:03:04.930  -->  00:03:08.040
that we have created manually
97

97

00:03:08.040  -->  00:03:10.040
in the Java Effects section
98

98

00:03:10.040  -->  00:03:10.930
of the course
99

99

00:03:10.930  -->  00:03:12.340
so it might be a bit wordier
100

100

00:03:12.340  -->  00:03:13.240
and that's because again
101

101

00:03:13.240  -->  00:03:15.320
it would credit it the same buildup.
102

102

00:03:15.320  -->  00:03:17.170
Alright, so I'm just
gonna paste that code in.
103

103

00:03:17.170  -->  00:03:18.000
And this code is available
104

104

00:03:18.000  -->  00:03:19.380
in the resources section
105

105

00:03:19.380  -->  00:03:21.100
of this video as well.
106

106

00:03:21.100  -->  00:03:23.440
So you haven't to type it all in.
107

107

00:03:23.440  -->  00:03:24.300
So let's just go back now
108

108

00:03:24.300  -->  00:03:26.640
to our main.java file
109

109

00:03:26.640  -->  00:03:27.780
and what we're gonna do is
110

110

00:03:27.780  -->  00:03:30.700
make a few changes to the start method
111

111

00:03:30.700  -->  00:03:34.500
and set the main windows title and size.
112

112

00:03:34.500  -->  00:03:35.330
So for the title,
113

113

00:03:35.330  -->  00:03:36.170
we're gonna change that
114

114

00:03:36.170  -->  00:03:38.590
from where it's currently
on 'Hello World'.
115

115

00:03:38.590  -->  00:03:41.590
We'll change that to Music Database.
116

116

00:03:42.590  -->  00:03:44.920
And for the setScene
117

117

00:03:44.920  -->  00:03:45.760
let's change the size.
118

118

00:03:45.760  -->  00:03:47.510
Instead of 300 by 275
119

119

00:03:48.400  -->  00:03:49.920
we'll change it to 800
120

120

00:03:49.920  -->  00:03:52.250
by let's put it at 600.
121

121

00:03:52.250  -->  00:03:53.170
800 by 600.
122

122

00:03:54.300  -->  00:03:55.320
Alright, so let's just run this
123

123

00:03:55.320  -->  00:03:57.000
just to see what the user interface
124

124

00:03:57.000  -->  00:03:58.330
is looking like.
125

125

00:04:04.720  -->  00:04:07.500
There's our basic interface.
126

126

00:04:07.500  -->  00:04:08.330
So you can see
127

127

00:04:08.330  -->  00:04:09.260
we've got an area here for contents
128

128

00:04:09.260  -->  00:04:10.900
we've got our buttons to the right
129

129

00:04:10.900  -->  00:04:12.570
and of course we've got this progress bar.
130

130

00:04:12.570  -->  00:04:14.330
Now, I did actually mention
131

131

00:04:14.330  -->  00:04:16.870
that the progress bar's gonna be invisible
132

132

00:04:16.870  -->  00:04:18.720
but I wanted to leave it by default
133

133

00:04:18.720  -->  00:04:20.510
the first time to just
show you what it looks like
134

134

00:04:20.510  -->  00:04:21.870
and where it's positioned
135

135

00:04:21.870  -->  00:04:22.700
now that you've seen it
136

136

00:04:22.700  -->  00:04:23.960
down here at the bottom
137

137

00:04:23.960  -->  00:04:25.160
let's close down the app
138

138

00:04:25.160  -->  00:04:27.160
and make that invisible
139

139

00:04:27.160  -->  00:04:29.910
so we'll go back to the main.fxml
140

140

00:04:32.370  -->  00:04:33.840
and we'll change this
progress bar over here
141

141

00:04:33.840  -->  00:04:35.450
on line 40
142

142

00:04:35.450  -->  00:04:36.470
and what we'll do is
143

143

00:04:36.470  -->  00:04:38.880
we'll put a new property here,
144

144

00:04:38.880  -->  00:04:40.550
visible="false"
145

145

00:04:43.830  -->  00:04:44.660
spelled.
146

146

00:04:46.400  -->  00:04:47.390
Alright, so now that we've done that
147

147

00:04:47.390  -->  00:04:49.070
we'll go back to our main
148

148

00:04:49.070  -->  00:04:49.900
and run it again
149

149

00:04:49.900  -->  00:04:51.290
we should find that progress bar
150

150

00:04:51.290  -->  00:04:52.870
is now disappeared.
151

151

00:04:53.790  -->  00:04:55.550
'Kay, no progress bar
152

152

00:04:55.550  -->  00:04:56.740
and we'll actually make that visible
153

153

00:04:56.740  -->  00:04:57.800
when it's appropriate
154

154

00:04:57.800  -->  00:05:00.350
in this application that we're building.
155

155

00:05:00.350  -->  00:05:01.860
Okay.
156

156

00:05:01.860  -->  00:05:02.700
And incidentally
157

157

00:05:02.700  -->  00:05:03.710
in a real world application
158

158

00:05:03.710  -->  00:05:04.540
we'll probably do it
159

159

00:05:04.540  -->  00:05:05.380
in such a way
160

160

00:05:05.380  -->  00:05:07.380
that there was an empty
space near the bottom
161

161

00:05:07.380  -->  00:05:08.610
but okay, we're not focusing
162

162

00:05:08.610  -->  00:05:09.670
on the user interface
163

163

00:05:09.670  -->  00:05:12.010
in this particular set of videos.
164

164

00:05:12.010  -->  00:05:13.770
Now, the other thing I
want to point out here
165

165

00:05:13.770  -->  00:05:17.570
is we just got back to our main.fxml again
166

166

00:05:17.570  -->  00:05:19.050
and look at our table up here
167

167

00:05:19.050  -->  00:05:20.730
on line 16.
168

168

00:05:20.730  -->  00:05:21.830
I want you to see
169

169

00:05:21.830  -->  00:05:23.880
how we're setting the table column
170

170

00:05:23.880  -->  00:05:26.250
prefWidth property over here
171

171

00:05:26.250  -->  00:05:27.920
on line 18.
172

172

00:05:27.920  -->  00:05:28.910
What we're doing here
173

173

00:05:28.910  -->  00:05:30.060
is we're setting the width
174

174

00:05:30.060  -->  00:05:32.220
to the same width as the table view
175

175

00:05:32.220  -->  00:05:33.650
so that the name column
176

176

00:05:33.650  -->  00:05:36.220
will occupy the entire table width.
177

177

00:05:36.220  -->  00:05:37.620
Now we've used a notation there
178

178

00:05:37.620  -->  00:05:40.200
$.
179

179

00:05:42.410  -->  00:05:43.270
Now what that means
180

180

00:05:43.270  -->  00:05:45.610
is that we want to set the prefWidth
181

181

00:05:45.610  -->  00:05:47.370
to the width of the control
182

182

00:05:47.370  -->  00:05:50.900
with the effects ID of artist table
183

183

00:05:50.900  -->  00:05:52.090
which in this case
184

184

00:05:52.090  -->  00:05:53.270
is our table view
185

185

00:05:53.270  -->  00:05:54.900
on line 16.
186

186

00:05:54.900  -->  00:05:55.760
You can actually do that
187

187

00:05:55.760  -->  00:05:57.440
with any property.
188

188

00:05:57.440  -->  00:05:58.630
Right, so now let's turn
189

189

00:05:58.630  -->  00:05:59.790
to using jdbc.
190

190

00:06:00.760  -->  00:06:01.620
What we're going to do first
191

191

00:06:01.620  -->  00:06:04.820
is copy the model classes we created
192

192

00:06:04.820  -->  00:06:06.330
in the previous set of videos
193

193

00:06:06.330  -->  00:06:08.290
in this section of the course.
194

194

00:06:08.290  -->  00:06:09.130
So I'm gonna go
195

195

00:06:09.130  -->  00:06:12.260
and look at our music
project model's directory.
196

196

00:06:12.260  -->  00:06:13.090
So what I'm gonna do
197

197

00:06:13.090  -->  00:06:14.380
is actually open up the project
198

198

00:06:14.380  -->  00:06:15.400
and I'll open
199

199

00:06:15.400  -->  00:06:16.670
do open recent
200

200

00:06:16.670  -->  00:06:18.460
and I'm gonna go to Music
201

201

00:06:18.460  -->  00:06:20.670
which is our previous project.
202

202

00:06:20.670  -->  00:06:24.170
And we're gonna open that in a new window.
203

203

00:06:25.130  -->  00:06:27.300
Again, that's the project
204

204

00:06:27.300  -->  00:06:28.570
that we we're working on previously
205

205

00:06:28.570  -->  00:06:30.040
I'm just gonna open the
project pane over here
206

206

00:06:30.040  -->  00:06:32.580
so we can see that it is.
207

207

00:06:32.580  -->  00:06:33.440
What I'm gonna do then
208

208

00:06:33.440  -->  00:06:35.320
is never get to the location
209

209

00:06:35.320  -->  00:06:37.490
of the music properties model directory
210

210

00:06:37.490  -->  00:06:38.670
copy it and then paste it
211

211

00:06:38.670  -->  00:06:40.920
into our new project.
212

212

00:06:40.920  -->  00:06:41.750
So what I'm gonna do
213

213

00:06:41.750  -->  00:06:42.580
is just come over here
214

214

00:06:42.580  -->  00:06:45.740
and right-click on the package for model
215

215

00:06:45.740  -->  00:06:47.060
Reveal in Finder
216

216

00:06:47.060  -->  00:06:49.380
I think it will be show
in Explorer Windows
217

217

00:06:49.380  -->  00:06:51.720
or something to that words that effect.
218

218

00:06:51.720  -->  00:06:53.670
Basically I'm going to actually just copy
219

219

00:06:53.670  -->  00:06:55.070
that entire folder
220

220

00:06:55.070  -->  00:06:56.560
copy that.
221

221

00:06:56.560  -->  00:06:57.390
Then I'm just going to
222

222

00:06:57.390  -->  00:06:59.680
just close down this
223

223

00:06:59.680  -->  00:07:01.810
leaving out our original project.
224

224

00:07:01.810  -->  00:07:02.910
Now I'm going to
225

225

00:07:02.910  -->  00:07:03.750
just paste that into
226

226

00:07:03.750  -->  00:07:05.360
whatever the project
227

227

00:07:05.360  -->  00:07:06.930
into whatever the package line is
228

228

00:07:06.930  -->  00:07:08.480
in our case it's sample here.
229

229

00:07:08.480  -->  00:07:10.120
I'm just gonna click on sample
230

230

00:07:10.120  -->  00:07:11.950
right-click and paste.
231

231

00:07:14.120  -->  00:07:15.720
Click on OK.
232

232

00:07:15.720  -->  00:07:16.560
Now you can see
233

233

00:07:16.560  -->  00:07:17.390
that it's pasted
234

234

00:07:17.390  -->  00:07:19.710
in the not only the model directory
235

235

00:07:19.710  -->  00:07:21.180
but also on the source code
236

236

00:07:21.180  -->  00:07:22.620
that we we're working on
237

237

00:07:22.620  -->  00:07:24.700
in those previous videos.
238

238

00:07:25.620  -->  00:07:30.080
So we'll go to Datasource,
Artist, Album, SongArtist,
239

239

00:07:30.080  -->  00:07:32.100
as well as Song is called.
240

240

00:07:32.100  -->  00:07:34.320
Now we don't actually need the Song
241

241

00:07:34.320  -->  00:07:36.380
and SongArtist classes.
242

242

00:07:36.380  -->  00:07:37.210
So for that reason
243

243

00:07:37.210  -->  00:07:38.520
I'm just going to just click on those
244

244

00:07:38.520  -->  00:07:39.940
and delete those.
245

245

00:07:45.890  -->  00:07:46.720
So we've just got now
246

246

00:07:46.720  -->  00:07:49.500
Album, Artist, and Datasource.
247

247

00:07:49.500  -->  00:07:50.960
Now we want the controller
248

248

00:07:50.960  -->  00:07:51.800
to be able to use
249

249

00:07:51.800  -->  00:07:53.880
the Datasource class.
250

250

00:07:53.880  -->  00:07:55.890
Now in a real world application
251

251

00:07:55.890  -->  00:07:57.820
you'd probably have
more than one controller
252

252

00:07:57.820  -->  00:07:59.870
and they'd all need access.
253

253

00:07:59.870  -->  00:08:00.710
So, we could have
254

254

00:08:00.710  -->  00:08:01.640
each one create
255

255

00:08:01.640  -->  00:08:03.130
an instance of the class
256

256

00:08:03.130  -->  00:08:03.960
but which one then
257

257

00:08:03.960  -->  00:08:05.260
would be responsible
258

258

00:08:05.260  -->  00:08:06.860
for managing the connexion
259

259

00:08:06.860  -->  00:08:09.160
on calling the open and close methods?
260

260

00:08:09.160  -->  00:08:10.680
Well, when working with a datasource
261

261

00:08:10.680  -->  00:08:12.160
it's actually quite common
262

262

00:08:12.160  -->  00:08:13.860
to use a Singleton pattern
263

263

00:08:13.860  -->  00:08:15.960
for the datasource class.
264

264

00:08:15.960  -->  00:08:17.320
Now it's called a Singleton pattern
265

265

00:08:17.320  -->  00:08:18.380
and we have talked about this
266

266

00:08:18.380  -->  00:08:19.570
in the course previously
267

267

00:08:19.570  -->  00:08:20.750
because we use it
268

268

00:08:20.750  -->  00:08:21.580
when we want an application
269

269

00:08:21.580  -->  00:08:23.370
to create only one instance
270

270

00:08:23.370  -->  00:08:25.110
of a particular class.
271

271

00:08:25.110  -->  00:08:25.980
So, every object
272

272

00:08:25.980  -->  00:08:27.330
that needs to call methods
273

273

00:08:27.330  -->  00:08:28.160
in the Singleton
274

274

00:08:28.160  -->  00:08:29.800
will use the same instance
275

275

00:08:29.800  -->  00:08:32.870
of the datasource to do so.
276

276

00:08:32.870  -->  00:08:35.970
So, to actually turn our datasource class
277

277

00:08:35.970  -->  00:08:38.350
into a Singleton is actually
quite straightforward
278

278

00:08:38.350  -->  00:08:40.810
so I'm gonna double click type in it.
279

279

00:08:40.810  -->  00:08:41.790
And what we need to do
280

280

00:08:41.790  -->  00:08:44.650
is create a private constructor first
281

281

00:08:44.650  -->  00:08:45.510
so let's go ahead and do that
282

282

00:08:45.510  -->  00:08:46.340
so I'm just gonna go down
283

283

00:08:46.340  -->  00:08:49.280
past all these constants set ups
284

284

00:08:49.280  -->  00:08:51.940
and what I've brought up here
285

285

00:08:51.940  -->  00:08:55.520
so I'm just going to
do private Datasource.
286

286

00:09:00.770  -->  00:09:01.610
Now, since it's private
287

287

00:09:01.610  -->  00:09:03.080
only the class will be able
288

288

00:09:03.080  -->  00:09:05.170
to create instances of itself.
289

289

00:09:05.170  -->  00:09:06.010
In other words
290

290

00:09:06.010  -->  00:09:06.840
no other class
291

291

00:09:06.840  -->  00:09:08.990
will be able to construct
an instance of Datasource
292

292

00:09:08.990  -->  00:09:10.510
and that's what we want here.
293

293

00:09:10.510  -->  00:09:11.340
So, now that we've done that
294

294

00:09:11.340  -->  00:09:13.060
we need to create the variable
295

295

00:09:13.060  -->  00:09:14.290
that will hold that one instance
296

296

00:09:14.290  -->  00:09:15.440
of the class
297

297

00:09:15.440  -->  00:09:16.280
that every other class
298

298

00:09:16.280  -->  00:09:17.990
in the application will use.
299

299

00:09:17.990  -->  00:09:18.820
Now this variable
300

300

00:09:18.820  -->  00:09:20.370
will need to be static.
301

301

00:09:20.370  -->  00:09:23.680
So we're going to put that
above the private definition
302

302

00:09:23.680  -->  00:09:27.850
in there so it's gonna be
private static Datasource
303

303

00:09:32.140  -->  00:09:33.910
and we'll call it instance
304

304

00:09:33.910  -->  00:09:35.550
which is what it is.
305

305

00:09:35.550  -->  00:09:37.380
Alright, we now need to add the method
306

306

00:09:37.380  -->  00:09:38.570
that every other class we used
307

307

00:09:38.570  -->  00:09:40.450
to access the instance.
308

308

00:09:40.450  -->  00:09:42.000
Now we can create the Singleton instance
309

309

00:09:42.000  -->  00:09:43.910
when we declare the variable
310

310

00:09:43.910  -->  00:09:44.980
or we can create it
311

311

00:09:44.980  -->  00:09:46.870
in the static access method
312

312

00:09:46.870  -->  00:09:48.130
and that's where we're actually
313

313

00:09:48.130  -->  00:09:49.200
going to do it in this case
314

314

00:09:49.200  -->  00:09:50.480
we're going to call that get instance
315

315

00:09:50.480  -->  00:09:52.770
so let's create that.
316

316

00:09:52.770  -->  00:09:54.610
Gonna put that after
the private constructor
317

317

00:09:54.610  -->  00:09:57.310
so it will be public static
318

318

00:09:57.310  -->  00:10:00.090
Datasource cause we're
returning the Datasource
319

319

00:10:00.090  -->  00:10:00.930
making sure by the way
320

320

00:10:00.930  -->  00:10:03.730
that we're using the
right datasource here.
321

321

00:10:03.730  -->  00:10:06.610
Sample.model and getInstance
322

322

00:10:06.610  -->  00:10:09.150
as a matter of the method
323

323

00:10:09.150  -->  00:10:10.180
and the code's going to be
324

324

00:10:10.180  -->  00:10:14.180
if (instance == null)
325

325

00:10:15.960  -->  00:10:20.120
Gonna put instance = new Datasource():
326

326

00:10:23.140  -->  00:10:26.940
and then below that we're
gonna return instance.
327

327

00:10:26.940  -->  00:10:27.780
So, when an object
328

328

00:10:27.780  -->  00:10:29.270
wants to use the Singleton instance
329

329

00:10:29.270  -->  00:10:30.700
it calls getInstance
330

330

00:10:30.700  -->  00:10:31.690
the public static method
331

331

00:10:31.690  -->  00:10:32.800
we've just created
332

332

00:10:32.800  -->  00:10:34.190
the method checks to see
333

333

00:10:34.190  -->  00:10:35.120
if the Singleton instance
334

334

00:10:35.120  -->  00:10:36.960
has been previously created.
335

335

00:10:36.960  -->  00:10:39.860
That's the code on line 126.
336

336

00:10:39.860  -->  00:10:41.510
If it has, it returns it,
337

337

00:10:41.510  -->  00:10:42.400
but if it hasn't
338

338

00:10:42.400  -->  00:10:44.950
then it creates the instance
and then returns it.
339

339

00:10:44.950  -->  00:10:47.460
Now, this is called a lazy instantiation
340

340

00:10:47.460  -->  00:10:49.750
because the instance isn't created
341

341

00:10:49.750  -->  00:10:52.420
until the first time it's needed.
342

342

00:10:52.420  -->  00:10:54.470
Now this is perfectly valid code
343

343

00:10:54.470  -->  00:10:55.300
but keep in mind
344

344

00:10:55.300  -->  00:10:56.750
it's not thread safe.
345

345

00:10:56.750  -->  00:10:57.590
In other words
346

346

00:10:57.590  -->  00:11:00.220
it's possible for a
thread to be interrupted
347

347

00:11:00.220  -->  00:11:03.120
after a check for null here.
348

348

00:11:03.120  -->  00:11:04.600
Another thread could then run
349

349

00:11:04.600  -->  00:11:05.430
check for null
350

350

00:11:05.430  -->  00:11:06.650
and create instance.
351

351

00:11:06.650  -->  00:11:08.120
Then the first thread can run
352

352

00:11:08.120  -->  00:11:09.870
and create the second instance.
353

353

00:11:09.870  -->  00:11:11.180
So our application would then
354

354

00:11:11.180  -->  00:11:12.020
have two instances
355

355

00:11:12.020  -->  00:11:12.870
on the go
356

356

00:11:12.870  -->  00:11:14.630
and of course that defeats the purpose
357

357

00:11:14.630  -->  00:11:17.000
of using a Singleton in the first place.
358

358

00:11:17.000  -->  00:11:18.560
So consequentially instead
359

359

00:11:18.560  -->  00:11:19.630
what we should really do here
360

360

00:11:19.630  -->  00:11:21.350
is we can correct the instance
361

361

00:11:21.350  -->  00:11:23.850
when the instance variable is declared
362

362

00:11:23.850  -->  00:11:26.050
and that will actually be thread safe.
363

363

00:11:26.050  -->  00:11:26.890
So what I'm going to do
364

364

00:11:26.890  -->  00:11:28.060
is come up here
365

365

00:11:28.060  -->  00:11:29.580
to line 119
366

366

00:11:29.580  -->  00:11:32.400
and change that to lead the declaration
367

367

00:11:32.400  -->  00:11:34.980
private static Datasource instance
368

368

00:11:34.980  -->  00:11:38.730
then we'll just put it = new Datasource.
369

369

00:11:39.570  -->  00:11:41.890
Now this way's also lazy instantiation
370

370

00:11:41.890  -->  00:11:43.950
because the instance won't be created
371

371

00:11:43.950  -->  00:11:46.420
until the first time the class is loaded
372

372

00:11:46.420  -->  00:11:47.530
which will be the first time
373

373

00:11:47.530  -->  00:11:49.910
some other instance references the class
374

374

00:11:49.910  -->  00:11:52.560
by calling the get instance method.
375

375

00:11:52.560  -->  00:11:54.280
So now that we've actually done that
376

376

00:11:54.280  -->  00:11:56.530
we can update the get instance method
377

377

00:11:56.530  -->  00:11:57.570
which is gonna be a lot simpler
378

378

00:11:57.570  -->  00:11:59.530
because we can remove this code here
379

379

00:11:59.530  -->  00:12:02.120
this if instance equals null check
380

380

00:12:02.120  -->  00:12:04.950
and just return the instance only.
381

381

00:12:04.950  -->  00:12:07.330
So whatever class now
wants to call a method
382

382

00:12:07.330  -->  00:12:08.880
in the Datasource class
383

383

00:12:08.880  -->  00:12:10.230
it will do the following,
384

384

00:12:10.230  -->  00:12:12.640
it's gonna be using basically
385

385

00:12:14.610  -->  00:12:18.110
Datasource.getInstance().
386

386

00:12:19.870  -->  00:12:21.060
And whatever the method name is.
387

387

00:12:21.060  -->  00:12:23.110
That's going to be the
calling convention used
388

388

00:12:23.110  -->  00:12:24.500
to access all of the methods
389

389

00:12:24.500  -->  00:12:26.700
in this particular class.
390

390

00:12:26.700  -->  00:12:28.450
So let's remove that.
391

391

00:12:32.580  -->  00:12:33.890
We're just getting this error here
392

392

00:12:33.890  -->  00:12:37.240
about the Try-with-resources
are not supported
393

393

00:12:37.240  -->  00:12:38.830
at this language level.
394

394

00:12:38.830  -->  00:12:39.660
So, that's an error
395

395

00:12:39.660  -->  00:12:40.630
that we've seen before in the course.
396

396

00:12:40.630  -->  00:12:41.460
We're gonna fix it up
397

397

00:12:41.460  -->  00:12:45.440
by right-clicking on the project name.
398

398

00:12:45.440  -->  00:12:47.190
Open Module Settings.
399

399

00:12:48.800  -->  00:12:50.270
Project.
400

400

00:12:50.270  -->  00:12:51.950
Making sure that we're using Lambdas
401

401

00:12:51.950  -->  00:12:54.640
and type annotation et cetera.
402

402

00:12:54.640  -->  00:12:56.980
That fixes that error.
403

403

00:12:56.980  -->  00:12:58.370
And because I've deleted
404

404

00:12:58.370  -->  00:13:00.000
those two other classes
405

405

00:13:00.000  -->  00:13:01.180
we're actually getting some errors here
406

406

00:13:01.180  -->  00:13:03.920
so I'm just going to remove those.
407

407

00:13:03.920  -->  00:13:05.510
Song Artist.
408

408

00:13:05.510  -->  00:13:09.350
I'm gonna remove that method all together.
409

409

00:13:09.350  -->  00:13:11.810
We've also got another one down here.
410

410

00:13:11.810  -->  00:13:12.640
Now these of course
411

411

00:13:12.640  -->  00:13:13.470
are all the methods
412

412

00:13:13.470  -->  00:13:15.730
that we've written previously
413

413

00:13:15.730  -->  00:13:17.850
which we're not gonna be
using those particular methods
414

414

00:13:17.850  -->  00:13:19.730
in this part of the course.
415

415

00:13:19.730  -->  00:13:20.960
Alright, so let's clear that up now
416

416

00:13:20.960  -->  00:13:23.650
so we haven't got anymore errors.
417

417

00:13:23.650  -->  00:13:24.480
So, now that we've done that
418

418

00:13:24.480  -->  00:13:25.370
we come back down here
419

419

00:13:25.370  -->  00:13:26.270
and look at our methods
420

420

00:13:26.270  -->  00:13:28.560
our open and close methods.
421

421

00:13:28.560  -->  00:13:29.400
We still have a question
422

422

00:13:29.400  -->  00:13:32.370
of where to call the
open and close methods.
423

423

00:13:32.370  -->  00:13:33.400
Now it would make sense
424

424

00:13:33.400  -->  00:13:35.230
to open a connexion to the database
425

425

00:13:35.230  -->  00:13:37.450
when an application is started
426

426

00:13:37.450  -->  00:13:38.430
because our main window
427

427

00:13:38.430  -->  00:13:40.720
wants to show data from the database.
428

428

00:13:40.720  -->  00:13:42.190
And it would also make sense
429

429

00:13:42.190  -->  00:13:43.750
to close the connexion
430

430

00:13:43.750  -->  00:13:46.210
when the user shuts down the application
431

431

00:13:46.210  -->  00:13:48.300
by closing the main window.
432

432

00:13:48.300  -->  00:13:49.270
So what we're gonna do here
433

433

00:13:49.270  -->  00:13:52.260
is make use of the Java
Effects life cycle methods
434

434

00:13:52.260  -->  00:13:55.260
to open and close the database connexion
435

435

00:13:55.260  -->  00:13:56.570
and if you recall
436

436

00:13:56.570  -->  00:13:58.090
the application class
437

437

00:13:58.090  -->  00:13:59.770
contains life cycle methods
438

438

00:13:59.770  -->  00:14:02.110
that are either abstract or concrete
439

439

00:14:02.110  -->  00:14:03.910
but don't actually do anything.
440

440

00:14:03.910  -->  00:14:05.060
So consequentially we're gonna
441

441

00:14:05.060  -->  00:14:06.790
overwrite the omit method
442

442

00:14:06.790  -->  00:14:09.460
to call the datasource.open method
443

443

00:14:09.460  -->  00:14:11.310
it will override the stop method
444

444

00:14:11.310  -->  00:14:14.260
to call the datasource.close method.
445

445

00:14:14.260  -->  00:14:15.090
Now the omit method
446

446

00:14:15.090  -->  00:14:17.180
runs before the start method
447

447

00:14:17.180  -->  00:14:19.080
that creates the user interface
448

448

00:14:19.080  -->  00:14:20.970
and the stop method runs
449

449

00:14:20.970  -->  00:14:22.780
when the application is shutting down
450

450

00:14:22.780  -->  00:14:24.470
either because the application
451

451

00:14:24.470  -->  00:14:26.850
has explicitly done somthing to close it
452

452

00:14:26.850  -->  00:14:29.640
or because the code called platform.exit
453

453

00:14:29.640  -->  00:14:30.910
both the init and stop methods
454

454

00:14:30.910  -->  00:14:33.290
are implemented in the application class
455

455

00:14:33.290  -->  00:14:35.860
but by default they don't do anything.
456

456

00:14:35.860  -->  00:14:38.360
So, let's go back to the main class
457

457

00:14:38.360  -->  00:14:41.380
and we'll actually get IntelliJ
458

458

00:14:41.380  -->  00:14:42.610
to create some methods for us
459

459

00:14:42.610  -->  00:14:44.160
in the main class.
460

460

00:14:44.160  -->  00:14:45.300
So, I'm just gonna click in here
461

461

00:14:45.300  -->  00:14:47.880
right-click and select generate
462

462

00:14:48.770  -->  00:14:49.610
and we're gonna click on
463

463

00:14:49.610  -->  00:14:51.140
select override methods.
464

464

00:14:51.140  -->  00:14:52.610
And the ones here that we want
465

465

00:14:52.610  -->  00:14:54.090
are the init and stop method.
466

466

00:14:54.090  -->  00:14:57.450
So, I'm just gonna click on init and stop.
467

467

00:14:57.450  -->  00:14:58.800
And click on OK.
468

468

00:14:58.800  -->  00:14:59.630
And you can see
469

469

00:14:59.630  -->  00:15:02.400
that's created those stubs for us.
470

470

00:15:02.400  -->  00:15:03.610
Alright, so now that that created
471

471

00:15:03.610  -->  00:15:04.800
in the init method
472

472

00:15:04.800  -->  00:15:07.170
we're gonna connect to the database
473

473

00:15:07.170  -->  00:15:08.440
and I'm gonna start by doing that.
474

474

00:15:08.440  -->  00:15:09.270
Now, know here
475

475

00:15:09.270  -->  00:15:10.110
that there's really no need
476

476

00:15:10.110  -->  00:15:11.340
to call the super method.
477

477

00:15:11.340  -->  00:15:12.650
They don't really do anything
478

478

00:15:12.650  -->  00:15:14.570
both the super.init
479

479

00:15:14.570  -->  00:15:16.370
and the super.stop
480

480

00:15:16.370  -->  00:15:17.480
but we'll leave the super calls there
481

481

00:15:17.480  -->  00:15:18.760
just in case this changes
482

482

00:15:18.760  -->  00:15:21.460
in a future Java Effects release.
483

483

00:15:21.460  -->  00:15:22.840
So, to open the database
484

484

00:15:22.840  -->  00:15:24.860
we're gonna do Datasource.
485

485

00:15:24.860  -->  00:15:26.040
Whoops, that was the wrong datasource.
486

486

00:15:26.040  -->  00:15:27.640
So, Datasource
487

487

00:15:27.640  -->  00:15:30.050
using the sample.model package here.
488

488

00:15:30.050  -->  00:15:33.050
.getInstance().open
489

489

00:15:35.040  -->  00:15:36.150
Down on the stop method
490

490

00:15:36.150  -->  00:15:39.220
we'll again leave the
super.stop method call there.
491

491

00:15:39.220  -->  00:15:43.390
And we'll put
Datasource.getinstance().close
492

492

00:15:46.610  -->  00:15:47.440
Alright, so let's run this
493

493

00:15:47.440  -->  00:15:49.270
to make sure it works.
494

494

00:15:53.670  -->  00:15:55.390
And we got an error down here.
495

495

00:15:55.390  -->  00:15:56.220
And that's because
496

496

00:15:56.220  -->  00:15:57.960
we didn't add the jdbc driver
497

497

00:15:57.960  -->  00:15:59.110
to the class path
498

498

00:15:59.110  -->  00:16:00.870
and I deliberately did that
499

499

00:16:00.870  -->  00:16:02.300
because I wanted to show you how
500

500

00:16:02.300  -->  00:16:03.680
the UI still appeared
501

501

00:16:03.680  -->  00:16:05.850
even though we actually got that error.
502

502

00:16:05.850  -->  00:16:07.860
Now, if we can't connect to the database
503

503

00:16:07.860  -->  00:16:10.350
we don't want the user interface to appear
504

504

00:16:10.350  -->  00:16:13.630
because anything the user
tries to do would fail.
505

505

00:16:13.630  -->  00:16:14.460
What we want to do
506

506

00:16:14.460  -->  00:16:15.710
is inform the user
507

507

00:16:15.710  -->  00:16:17.710
that there's been a
fatal error of some kind
508

508

00:16:17.710  -->  00:16:20.010
and then shut down the application.
509

509

00:16:20.010  -->  00:16:20.910
Now, normally we would do this
510

510

00:16:20.910  -->  00:16:22.420
just using a pop-up dialogue
511

511

00:16:22.420  -->  00:16:24.490
but since this isn't a UI
512

512

00:16:24.490  -->  00:16:26.260
set of videos at this point
513

513

00:16:26.260  -->  00:16:27.090
what we're gonna do
514

514

00:16:27.090  -->  00:16:30.050
is just really just write
a message to the console.
515

515

00:16:30.050  -->  00:16:31.260
Now the init method boolean
516

516

00:16:31.260  -->  00:16:32.920
I'll have to check the return value
517

517

00:16:32.920  -->  00:16:33.980
from the open method
518

518

00:16:33.980  -->  00:16:36.200
and take appropriate
action when necessary.
519

519

00:16:36.200  -->  00:16:37.040
So let's go ahead
520

520

00:16:37.040  -->  00:16:37.890
and implement that
521

521

00:16:37.890  -->  00:16:39.570
and then we'll finish off the video.
522

522

00:16:39.570  -->  00:16:42.190
We're gonna close this down.
523

523

00:16:42.190  -->  00:16:44.080
Back to our init method
524

524

00:16:44.080  -->  00:16:46.770
we need to just change
it a little bit here now.
525

525

00:16:46.770  -->  00:16:48.660
And instead of just calling it
526

526

00:16:48.660  -->  00:16:49.970
we're going to return
527

527

00:16:49.970  -->  00:16:51.030
we're going to make use
528

528

00:16:51.030  -->  00:16:52.010
of the return code.
529

529

00:16:52.010  -->  00:16:56.180
So, I'm gonna put if not
datasource.getInstance().open()
530

530

00:16:58.830  -->  00:17:00.750
And we'll sys out there
531

531

00:17:00.750  -->  00:17:02.220
and we'll just put 'FATAL ERROR'
532

532

00:17:02.220  -->  00:17:04.030
again normally you would
actually have a pop-up
533

533

00:17:04.030  -->  00:17:05.420
a dialogue or something of that nature
534

534

00:17:05.420  -->  00:17:08.040
to inform the user of the problem,
535

535

00:17:08.040  -->  00:17:09.720
but we're not focusing on the UI here
536

536

00:17:09.720  -->  00:17:10.900
so we just going kinda
537

537

00:17:10.900  -->  00:17:12.130
keep it pretty simple.
538

538

00:17:12.130  -->  00:17:14.830
Couldn't connect to database
539

539

00:17:14.830  -->  00:17:16.420
database
540

540

00:17:16.420  -->  00:17:19.840
Then we'll do Platform, capital P, .exit.
541

541

00:17:21.290  -->  00:17:24.620
Alright, so let's just try running that.
542

542

00:17:26.290  -->  00:17:27.120
So this time
543

543

00:17:27.120  -->  00:17:27.950
we've now got
544

544

00:17:27.950  -->  00:17:29.690
the same error message we had previously
545

545

00:17:29.690  -->  00:17:31.650
about not being able to
connect to the database.
546

546

00:17:31.650  -->  00:17:32.870
Programme here got this fatal error,
547

547

00:17:32.870  -->  00:17:35.010
couldn't connect to database.
548

548

00:17:35.010  -->  00:17:36.610
So, it's done what we want it to do
549

549

00:17:36.610  -->  00:17:37.440
and this point now
550

550

00:17:37.440  -->  00:17:38.730
the user interface doesn't appear
551

551

00:17:38.730  -->  00:17:41.150
because we couldn't get
access to the database.
552

552

00:17:41.150  -->  00:17:43.420
Alright, so let's finish
the video here now.
553

553

00:17:43.420  -->  00:17:44.250
In the next video
554

554

00:17:44.250  -->  00:17:46.530
we'll add the SQlite to JDBC driver
555

555

00:17:46.530  -->  00:17:47.760
to our class path
556

556

00:17:47.760  -->  00:17:48.750
and then continue on
557

557

00:17:48.750  -->  00:17:50.680
with creating this application.
558

558

00:17:50.680  -->  00:17:51.530
So, we'll see you as always
559

559

00:17:51.530  -->  00:17:53.120
in the next video.
