WEBVTT
1
1

00:00:05.070  -->  00:00:06.040
- [Tim] All right, so we found out
2

2

00:00:06.040  -->  00:00:07.470
at the end of the last video
3

3

00:00:07.470  -->  00:00:11.420
that some methods implicitly
perform the connectMethod step.
4

4

00:00:11.420  -->  00:00:14.610
So let's move on now and
try reading a webpage
5

5

00:00:14.610  -->  00:00:16.600
that doesn't exist to see that
6

6

00:00:16.600  -->  00:00:20.130
or see if we actually get
the 404 response code back.
7

7

00:00:20.130  -->  00:00:24.830
So what we're going to do is
put a bogus page on line 14.
8

8

00:00:24.830  -->  00:00:27.990
So we're going to make the
URL as it was, example.org,
9

9

00:00:27.990  -->  00:00:32.150
but we're gonna put
/somepage.html instead.
10

10

00:00:33.650  -->  00:00:36.570
So if we actually try running that,
11

11

00:00:39.950  -->  00:00:41.950
you can see we got a response code of 404,
12

12

00:00:41.950  -->  00:00:43.550
Error reading web page.
13

13

00:00:43.550  -->  00:00:46.080
We've returned at that
point, so we don't do any
14

14

00:00:46.080  -->  00:00:48.990
more processing, and we don't
try and retrieve or read
15

15

00:00:48.990  -->  00:00:53.040
the contents of the page, which
in this case, doesn't exist.
16

16

00:00:53.040  -->  00:00:55.070
And incidentally, what we can do is call
17

17

00:00:55.070  -->  00:00:59.070
the HttpURLConnection.getResponseMessage
method.
18

18

00:01:00.110  -->  00:01:01.790
We can get more information
about the error.
19

19

00:01:01.790  -->  00:01:04.210
So we can change that and put
20

20

00:01:06.280  -->  00:01:10.200
on the next line
connection.getResponseMessage.
21

21

00:01:12.770  -->  00:01:16.770
So let's do that and see
what it outputs for us.
22

22

00:01:18.450  -->  00:01:21.060
You can see there it's come
back and said not found.
23

23

00:01:21.060  -->  00:01:22.550
Not very exciting, in this case,
24

24

00:01:22.550  -->  00:01:25.250
but depending on the response,
you might get information
25

25

00:01:25.250  -->  00:01:28.530
that will help you figure
out actually what went wrong.
26

26

00:01:28.530  -->  00:01:30.350
Now, if you were doing a post,
27

27

00:01:30.350  -->  00:01:33.550
you'd call the
connection.geOutputStream method to get
28

28

00:01:33.550  -->  00:01:37.180
an output stream which you'd
use to write to the connection.
29

29

00:01:37.180  -->  00:01:39.070
And you can also wrap the output stream
30

30

00:01:39.070  -->  00:01:41.440
in DataOutputStream if you want to.
31

31

00:01:41.440  -->  00:01:43.740
You're gonna see some sample
post code in a minute,
32

32

00:01:43.740  -->  00:01:47.070
but let's actually try
passing parameters as part
33

33

00:01:47.070  -->  00:01:50.510
of the URL, which is something
you'll often wanna do.
34

34

00:01:50.510  -->  00:01:53.130
Now, we're gonna use the
Flickr API service to fetch
35

35

00:01:53.130  -->  00:01:57.000
the most recently uploaded
photos tagged with cats.
36

36

00:01:57.000  -->  00:02:00.100
Now, if I click on this link,
go to this link in the browser
37

37

00:02:00.100  -->  00:02:04.260
first, let's just take a
look at what that looks like.
38

38

00:02:04.260  -->  00:02:05.930
So there's the link.
39

39

00:02:06.970  -->  00:02:09.610
And looking at that, you
can see that we can use
40

40

00:02:09.610  -->  00:02:11.540
this URL here on the page,
41

41

00:02:11.540  -->  00:02:14.560
and we can pass various
parameters to that.
42

42

00:02:14.560  -->  00:02:15.990
So the query parameters, we can include
43

43

00:02:15.990  -->  00:02:19.140
to specify which photos
you'd like returned.
44

44

00:02:19.140  -->  00:02:21.910
So what we wanna do is perhaps
use this tags option here,
45

45

00:02:21.910  -->  00:02:25.170
a comma delimited list of
tags to filter the feed by.
46

46

00:02:25.170  -->  00:02:29.130
So we could take a copy of that first,
47

47

00:02:29.130  -->  00:02:33.300
paste it into a new link, and
then we'll put ?tags=cats,
48

48

00:02:34.590  -->  00:02:37.300
just to confirm that actually works,
49

49

00:02:37.300  -->  00:02:39.310
and you can see that
we've got a feed there,
50

50

00:02:39.310  -->  00:02:41.680
an XML feed of various photos.
51

51

00:02:41.680  -->  00:02:44.860
And when you go to do this,
this is updated in real time,
52

52

00:02:44.860  -->  00:02:48.020
so you'll be getting different content
53

53

00:02:48.020  -->  00:02:50.740
than you can see in my
particular case here.
54

54

00:02:50.740  -->  00:02:53.280
And what I've done here
it always a good idea
55

55

00:02:53.280  -->  00:02:54.360
when you're testing.
56

56

00:02:54.360  -->  00:02:57.590
Try out the URL that you're
working with using a browser
57

57

00:02:57.590  -->  00:02:59.550
before using it in the code.
58

58

00:02:59.550  -->  00:03:02.870
That way, you can see for
sure that you've got the URL
59

59

00:03:02.870  -->  00:03:04.710
correct, and its functioning
and it's returning
60

60

00:03:04.710  -->  00:03:07.710
the right data instead of,
you know, just pasting it
61

61

00:03:07.710  -->  00:03:10.410
directly into your code and
then not knowing if something
62

62

00:03:10.410  -->  00:03:12.680
doesn't work whether it's the URL at fault
63

63

00:03:12.680  -->  00:03:15.320
or something you've
done wrong in your code.
64

64

00:03:15.320  -->  00:03:17.140
But in our case, you can see
that that's working nicely,
65

65

00:03:17.140  -->  00:03:20.070
and you can see under the title for HTML,
66

66

00:03:20.070  -->  00:03:22.860
recently uploaded tagged cats,
67

67

00:03:22.860  -->  00:03:26.480
and you can see this first entry here.
68

68

00:03:26.480  -->  00:03:30.340
Entry, the first bit of
HTML tag there for entry.
69

69

00:03:30.340  -->  00:03:32.350
And we see that there's
a link there as well.
70

70

00:03:32.350  -->  00:03:34.140
If we scroll down a little bit further,
71

71

00:03:34.140  -->  00:03:36.070
there's a link there, as you can see.
72

72

00:03:36.070  -->  00:03:39.630
So I could take a copy of
that link if I wanted to,
73

73

00:03:39.630  -->  00:03:41.810
paste it in, and have a look at it,
74

74

00:03:41.810  -->  00:03:43.730
and there's a picture of
a cat, as you can see.
75

75

00:03:43.730  -->  00:03:45.090
So you'll be able to do something similar
76

76

00:03:45.090  -->  00:03:47.640
if you wanted to with the code
77

77

00:03:47.640  -->  00:03:51.680
that you'll get back from
using this particular URL.
78

78

00:03:51.680  -->  00:03:54.430
And incidentally, in case you're
wondering why it's updated,
79

79

00:03:54.430  -->  00:03:57.940
this is actually a recent
list, as the title says.
80

80

00:03:57.940  -->  00:04:00.490
Recently uploaded or recent uploads
81

81

00:04:00.490  -->  00:04:03.100
of photos that are tagged cats.
82

82

00:04:03.100  -->  00:04:05.700
So because Flickr is an
image site that retrieves
83

83

00:04:05.700  -->  00:04:09.170
or receives tens of
thousands of images a day,
84

84

00:04:09.170  -->  00:04:10.440
you'll find that when you go to run this,
85

85

00:04:10.440  -->  00:04:13.510
you'll be getting different
images showing there.
86

86

00:04:13.510  -->  00:04:15.500
So you can see that there's
quite a few entries here.
87

87

00:04:15.500  -->  00:04:16.740
So that's the first entry.
88

88

00:04:16.740  -->  00:04:20.180
There's another one.
89

89

00:04:20.180  -->  00:04:21.560
There's another one,
90

90

00:04:21.560  -->  00:04:23.070
and another one, and I'm
not gonna do any more,
91

91

00:04:23.070  -->  00:04:25.050
but it's quite a few
there, as you can see.
92

92

00:04:25.050  -->  00:04:28.540
Now, if you were to read
this URL into an application,
93

93

00:04:28.540  -->  00:04:31.550
you could display the photos
or display a list of links
94

94

00:04:31.550  -->  00:04:33.910
or literally whatever else you wanna do
95

95

00:04:33.910  -->  00:04:35.650
within your application.
96

96

00:04:35.650  -->  00:04:38.090
And actually, within my Android course,
97

97

00:04:38.090  -->  00:04:39.330
I actually do just that.
98

98

00:04:39.330  -->  00:04:41.960
We do a similar thing, and in the course,
99

99

00:04:41.960  -->  00:04:43.620
we actually create an app that actually
100

100

00:04:43.620  -->  00:04:46.790
extracts the contents out of this XML,
101

101

00:04:47.760  -->  00:04:48.960
which you can see on the screen there,
102

102

00:04:48.960  -->  00:04:53.130
and enables you to display the
photo on an Android device.
103

103

00:04:54.490  -->  00:04:56.400
So you can see that we've
got the information.
104

104

00:04:56.400  -->  00:04:58.870
You could actually use that to do
105

105

00:04:58.870  -->  00:05:01.810
whatever you'd wanna do
within your application.
106

106

00:05:01.810  -->  00:05:03.480
And if you were going to
do that, as we've done
107

107

00:05:03.480  -->  00:05:06.150
in the Android app that
is in my Android course,
108

108

00:05:06.150  -->  00:05:09.310
you'd use XML or an XML/RSS library
109

109

00:05:09.310  -->  00:05:12.150
to read the feed rather than
writing code to parse it.
110

110

00:05:12.150  -->  00:05:14.310
No point reinventing the wheel
when there's code out there
111

111

00:05:14.310  -->  00:05:16.890
to do that for you automatically.
112

112

00:05:16.890  -->  00:05:18.670
All right, so now you
know that the URL works
113

113

00:05:18.670  -->  00:05:20.560
and takes you to something valid,
114

114

00:05:20.560  -->  00:05:23.990
what we can do is write the
code to get the most recently
115

115

00:05:23.990  -->  00:05:26.870
uploaded photos tagged
with cats at Flickr.
116

116

00:05:26.870  -->  00:05:30.760
So all we really need to
do here is change that URL
117

117

00:05:30.760  -->  00:05:33.470
that showed there and add a query to that,
118

118

00:05:33.470  -->  00:05:37.400
?tags=cats to actually get
the specific data relating,
119

119

00:05:37.400  -->  00:05:39.030
in this case, to recent photos
120

120

00:05:39.030  -->  00:05:41.200
that are tagged with the word cats.
121

121

00:05:41.200  -->  00:05:43.840
So I go back to the code again there now.
122

122

00:05:43.840  -->  00:05:45.570
All right, so what I'm
gonna do now is change
123

123

00:05:45.570  -->  00:05:49.220
this example here, the code on line 14.
124

124

00:05:49.220  -->  00:05:51.060
Let's go ahead and go back to the browser.
125

125

00:05:51.060  -->  00:05:53.770
We're gonna copy that URL.
126

126

00:05:53.770  -->  00:05:56.430
We're gonna paste that in there,
127

127

00:05:58.480  -->  00:05:59.960
and then what we can do
is, on the end of that,
128

128

00:05:59.960  -->  00:06:04.910
we can add ?tags=cats as
we've done in the browser.
129

129

00:06:04.910  -->  00:06:06.540
We'll open the connection.
130

130

00:06:06.540  -->  00:06:07.750
We'll leave the get in there.
131

131

00:06:07.750  -->  00:06:08.970
We'll leave the request property
132

132

00:06:08.970  -->  00:06:12.410
for the user agent as well as the timeout.
133

133

00:06:12.410  -->  00:06:14.220
and you should be able
to leave everything else
134

134

00:06:14.220  -->  00:06:16.700
as it is now and run this,
and we should be able to see
135

135

00:06:16.700  -->  00:06:20.120
the XML that's returned from that link.
136

136

00:06:20.120  -->  00:06:23.030
So let's actually try running that.
137

137

00:06:24.800  -->  00:06:28.720
And you can see there that
we've got the XML data
138

138

00:06:28.720  -->  00:06:31.470
that's come back from that link.
139

139

00:06:31.470  -->  00:06:33.400
You can see there's quite
a bit there, and right up
140

140

00:06:33.400  -->  00:06:36.020
to the top there, you can see
we got a response code of 200.
141

141

00:06:36.020  -->  00:06:38.040
And of course we could
change that as well.
142

142

00:06:38.040  -->  00:06:39.870
Instead of cats, dogs.
143

143

00:06:41.620  -->  00:06:44.220
Run the same programme again.
144

144

00:06:44.220  -->  00:06:47.300
Because Flickr is updating
that feed in real time,
145

145

00:06:47.300  -->  00:06:49.320
we'll get some data back relating to dogs
146

146

00:06:49.320  -->  00:06:50.420
in this particular case.
147

147

00:06:50.420  -->  00:06:51.790
So if I go back up to the top,
148

148

00:06:51.790  -->  00:06:54.830
you can see recent uploads tagged dogs,
149

149

00:06:54.830  -->  00:06:56.770
and you'd find, if we actually had a look
150

150

00:06:56.770  -->  00:06:59.140
at some of these links, we'd find the data
151

151

00:06:59.140  -->  00:07:02.490
would be be relating to dogs
in this particular case.
152

152

00:07:02.490  -->  00:07:03.540
Pretty easy, as you can see,
153

153

00:07:03.540  -->  00:07:06.570
to extract data the way we have there.
154

154

00:07:06.570  -->  00:07:10.530
Now, at the moment, we've
got a URL that's HTTPS,
155

155

00:07:10.530  -->  00:07:14.560
but it's actually using
the HTTP URL connection,
156

156

00:07:14.560  -->  00:07:17.260
and not the HTTPS URL connection.
157

157

00:07:17.260  -->  00:07:20.790
So what's happening is that
we're not really truly using
158

158

00:07:20.790  -->  00:07:22.710
the HTTPS protocol.
159

159

00:07:22.710  -->  00:07:24.500
Now, that's actually becoming more common,
160

160

00:07:24.500  -->  00:07:27.640
so you'd need to use the
HTTPS URL connection instance
161

161

00:07:27.640  -->  00:07:28.990
to actually achieve that.
162

162

00:07:28.990  -->  00:07:32.380
And out of interest, that
connection class, the HTTPS
163

163

00:07:32.380  -->  00:07:35.840
URL connection class, isn't
in the java.net package.
164

164

00:07:35.840  -->  00:07:38.870
It's in the the javax.net.ssl.
165

165

00:07:38.870  -->  00:07:39.830
But we won't do that now,
166

166

00:07:39.830  -->  00:07:42.420
but that is something you can actually do.
167

167

00:07:42.420  -->  00:07:43.590
All right, before we move on,
168

168

00:07:43.590  -->  00:07:45.750
let's take a quick look on
the screen now and a slide
169

169

00:07:45.750  -->  00:07:48.230
at how you go about
writing tool connection.
170

170

00:07:48.230  -->  00:07:50.480
Now, I'm not actually
going to demonstrate this,
171

171

00:07:50.480  -->  00:07:51.470
but the code will give you
172

172

00:07:51.470  -->  00:07:54.510
a pretty good idea of how it's done.
173

173

00:07:54.510  -->  00:07:55.980
All right, so you can see the code there.
174

174

00:07:55.980  -->  00:07:59.350
We start off on line
one, creating a new URL,
175

175

00:07:59.350  -->  00:08:02.290
and then we create a HTTP URL connection.
176

176

00:08:02.290  -->  00:08:05.740
We set the request method
to post on line three,
177

177

00:08:05.740  -->  00:08:08.790
and we set the user agent
to Chrome on line four,
178

178

00:08:08.790  -->  00:08:13.540
and we actually set on line
five the content type as well.
179

179

00:08:13.540  -->  00:08:14.880
So we're basically telling the server
180

180

00:08:14.880  -->  00:08:16.800
the content type that we'll be sending
181

181

00:08:16.800  -->  00:08:20.570
as well as the length of
the content on line eight.
182

182

00:08:20.570  -->  00:08:24.450
Now, you could pass these
parameters are part of the URL,
183

183

00:08:24.450  -->  00:08:26.260
but there are times
when you wanna pass 'em
184

184

00:08:26.260  -->  00:08:27.660
separately as we're doing here.
185

185

00:08:27.660  -->  00:08:29.730
It gives you a few more options.
186

186

00:08:29.730  -->  00:08:32.490
The parameter string is the
part of the URL, by the way,
187

187

00:08:32.490  -->  00:08:34.770
that appears after a question mark,
188

188

00:08:34.770  -->  00:08:37.660
and you saw just previously
when we ran our cats and dogs
189

189

00:08:37.660  -->  00:08:41.500
Flickr application, I did a ?tags=dogs.
190

190

00:08:41.500  -->  00:08:44.840
So that's the parameter
that I'm talking about.
191

191

00:08:44.840  -->  00:08:47.200
And in the case of the code
on line seven and eight,
192

192

00:08:47.200  -->  00:08:50.050
that's a way to actually
send multiple parameters.
193

193

00:08:50.050  -->  00:08:53.690
Firstly on line eight, we're
sending the parameter's length,
194

194

00:08:53.690  -->  00:08:56.750
but if you look down the
code there down on line 15,
195

195

00:08:56.750  -->  00:08:59.100
we're actually writing out the bytes
196

196

00:08:59.100  -->  00:09:01.770
relating to the parameters there as well.
197

197

00:09:01.770  -->  00:09:03.990
Now, there are other
ways to write this code.
198

198

00:09:03.990  -->  00:09:05.840
Depending on the server and the request,
199

199

00:09:05.840  -->  00:09:07.650
you might have to set more properties
200

200

00:09:07.650  -->  00:09:09.390
when you're configuring the connection.
201

201

00:09:09.390  -->  00:09:11.260
But this should give you
an example of how you'd
202

202

00:09:11.260  -->  00:09:14.200
pass parameters separately from the URL.
203

203

00:09:14.200  -->  00:09:17.400
Now, in this particular case,
the URL is a PHP script,
204

204

00:09:17.400  -->  00:09:19.860
which could be the action that's performed
205

205

00:09:19.860  -->  00:09:22.950
when a user submits a form, for example.
206

206

00:09:22.950  -->  00:09:24.560
And looking back to that code,
207

207

00:09:24.560  -->  00:09:29.490
you'll see that on lines 11,
we set the output to be true,
208

208

00:09:29.490  -->  00:09:31.790
so that's where the system
would then ultimately know
209

209

00:09:31.790  -->  00:09:34.750
to write the code out, and
then of course we're using
210

210

00:09:34.750  -->  00:09:37.630
the output.writeBytes on
line 15 to start writing
211

211

00:09:37.630  -->  00:09:40.100
some output, and that's
wrapped around the data output
212

212

00:09:40.100  -->  00:09:42.740
stream, as you can see,
because output.writeBytes
213

213

00:09:42.740  -->  00:09:46.620
is obviously using the
data output stream itself.
214

214

00:09:46.620  -->  00:09:48.170
All right, so at this point,
you've seen how to use
215

215

00:09:48.170  -->  00:09:52.550
the HttpUrlConnection
and UrlConnection classes
216

216

00:09:52.550  -->  00:09:56.020
to read webpages and retrieve
specific data from webpages
217

217

00:09:56.020  -->  00:09:59.100
by passing parameters,
and that's actually great.
218

218

00:09:59.100  -->  00:10:00.940
But here's the thing to keep in mind:
219

219

00:10:00.940  -->  00:10:03.630
many Java developers don't use the classes
220

220

00:10:03.630  -->  00:10:07.580
in the java.net package when
they wanna work with URLs.
221

221

00:10:07.580  -->  00:10:09.960
So the java.net package
has been in the JDK
222

222

00:10:09.960  -->  00:10:13.550
all the way back since Java
1.0, and unfortunately,
223

223

00:10:13.550  -->  00:10:16.020
it really hasn't changed much since then.
224

224

00:10:16.020  -->  00:10:16.860
Under the covers,
225

225

00:10:16.860  -->  00:10:20.490
it's just an older version
of the HTTP protocol.
226

226

00:10:20.490  -->  00:10:24.630
So classes that use the
newer HTTP/2.0 protocol
227

227

00:10:24.630  -->  00:10:28.740
were proposed and worked on
for Java 9, and the proposal
228

228

00:10:28.740  -->  00:10:31.290
listed the following problems,
as you can see on the screen,
229

229

00:10:31.290  -->  00:10:33.280
and I've taken this from
the link you can see
230

230

00:10:33.280  -->  00:10:37.440
on the screen there,
open.jdk.java.net/jeps/110.
231

231

00:10:39.050  -->  00:10:41.800
So the problems that they found
were the base UrlConnection
232

232

00:10:41.800  -->  00:10:45.360
API was designed with
multiple protocols in mind,
233

233

00:10:45.360  -->  00:10:47.270
nearly all of which are now defunct,
234

234

00:10:47.270  -->  00:10:49.490
and that's ftp, gopher, et cetera.
235

235

00:10:49.490  -->  00:10:53.660
The API predates HTTP/1.1 and
is too abstract as a result.
236

236

00:10:55.100  -->  00:10:57.770
It's hard to use, with many
undocumented behaviours,
237

237

00:10:57.770  -->  00:10:59.900
and it works in blocking modes only;
238

238

00:10:59.900  -->  00:11:02.790
that is, one thread per
request or response,
239

239

00:11:02.790  -->  00:11:06.410
and most importantly, it's
very hard to maintain.
240

240

00:11:06.410  -->  00:11:08.980
Unfortunately, the
behaviour of the java.net
241

241

00:11:08.980  -->  00:11:12.010
HTTP classes can be frustrating.
242

242

00:11:12.010  -->  00:11:14.500
Try sending parameters
using the POST method,
243

243

00:11:14.500  -->  00:11:16.650
as in the sample code that
I showed on the screen,
244

244

00:11:16.650  -->  00:11:19.120
and you could be tearing your hair out.
245

245

00:11:19.120  -->  00:11:20.670
That's because it doesn't always work,
246

246

00:11:20.670  -->  00:11:23.890
and when developers go to the
web and try to find out why,
247

247

00:11:23.890  -->  00:11:26.860
other developers will usually
say words to the effect of,
248

248

00:11:26.860  -->  00:11:28.570
don't use the java.net classes.
249

249

00:11:28.570  -->  00:11:30.830
Use a third-party library.
250

250

00:11:30.830  -->  00:11:34.650
Now, unfortunately, the
proposed Java 9 API has been
251

251

00:11:34.650  -->  00:11:37.180
placed in what's called the
incubator, meaning that,
252

252

00:11:37.180  -->  00:11:39.650
based on the feedback from
developers who tried the early
253

253

00:11:39.650  -->  00:11:43.200
access Java 9 features, it's
not ready for primetime.
254

254

00:11:43.200  -->  00:11:46.780
In other words, the API won't
be in the base Java 9 JDK
255

255

00:11:46.780  -->  00:11:49.010
but developers will still
be able to try it out
256

256

00:11:49.010  -->  00:11:50.980
by adding it to their projects.
257

257

00:11:50.980  -->  00:11:53.060
Now, based on the feedback the API team
258

258

00:11:53.060  -->  00:11:55.200
expects to get from even more developers,
259

259

00:11:55.200  -->  00:11:58.260
the API may well be revised
and then added to the JDK
260

260

00:11:58.260  -->  00:12:00.410
or it may also be deleted.
261

261

00:12:00.410  -->  00:12:02.870
So it's not a good idea
to use a new API in any
262

262

00:12:02.870  -->  00:12:06.680
applications you plan to
release to users in the future.
263

263

00:12:06.680  -->  00:12:10.340
But in the meantime, many
developers are using third-party
264

264

00:12:10.340  -->  00:12:13.340
libraries when they want to
work with a HTTP protocol.
265

265

00:12:13.340  -->  00:12:17.050
So two popular ones I wanna
talk about briefly are jetty,
266

266

00:12:17.050  -->  00:12:21.450
and that's available from
www.eclipse.org/jetty,
267

267

00:12:21.450  -->  00:12:24.760
and as well as the Apache HTTPClient,
268

268

00:12:24.760  -->  00:12:28.930
hc.apache.org/httpcomponenets-client-ga.
269

269

00:12:31.090  -->  00:12:33.110
Keep in mind that even
though the Apache library
270

270

00:12:33.110  -->  00:12:37.480
only supports HTTP/1.1,
overall, developers like it,
271

271

00:12:37.480  -->  00:12:41.330
because it's much easier to
use than the java.net classes.
272

272

00:12:41.330  -->  00:12:43.280
So, it's important that you got a taste
273

273

00:12:43.280  -->  00:12:46.240
of the high-level API though
in the java.net classes
274

274

00:12:46.240  -->  00:12:48.480
so that you can read code that uses them,
275

275

00:12:48.480  -->  00:12:51.110
but when you wanna work
with the HTTP protocol,
276

276

00:12:51.110  -->  00:12:52.830
you might wanna consider using jetty
277

277

00:12:52.830  -->  00:12:56.220
or the Apache HTTPClient libraries.
278

278

00:12:56.220  -->  00:12:59.820
Now, to give you a taste of
the Apache HTTPClient library,
279

279

00:12:59.820  -->  00:13:04.720
let's use it to read the example
site of http://example.org.
280

280

00:13:04.720  -->  00:13:06.170
So what I'm going to do is download
281

281

00:13:06.170  -->  00:13:08.430
what is the current latest release.
282

282

00:13:08.430  -->  00:13:11.430
So let's go to the page and do that.
283

283

00:13:13.250  -->  00:13:14.670
There's the link.
284

284

00:13:16.220  -->  00:13:18.210
So I'm going to download
the latest version
285

285

00:13:18.210  -->  00:13:21.950
of the Apache HTTPClient
library, and you can see
286

286

00:13:21.950  -->  00:13:26.280
at the time that I'm doing
this, the version's 4.5.3,
287

287

00:13:26.280  -->  00:13:28.520
but if the versions change
when you go to do it,
288

288

00:13:28.520  -->  00:13:30.760
just download the latest version.
289

289

00:13:30.760  -->  00:13:32.240
I'm just going to download the zip.
290

290

00:13:32.240  -->  00:13:34.180
It doesn't really matter
which one you download.
291

291

00:13:34.180  -->  00:13:37.310
And I'm just going to
put it on my desktop.
292

292

00:13:37.310  -->  00:13:38.140
Save.
293

293

00:13:39.580  -->  00:13:41.200
You can see, it's only a small file,
294

294

00:13:41.200  -->  00:13:43.910
and I'm going to go to that location.
295

295

00:13:43.910  -->  00:13:45.740
I'm going to unzip it.
296

296

00:13:47.730  -->  00:13:48.900
All right, now that I'm unzipped it,
297

297

00:13:48.900  -->  00:13:51.210
I'm going to go back to IntelliJ,
298

298

00:13:51.210  -->  00:13:55.370
and I go back and select
File > Project Structure,
299

299

00:13:57.100  -->  00:13:59.440
and we're going to select Libraries,
300

300

00:13:59.440  -->  00:14:00.470
and we're going to add that.
301

301

00:14:00.470  -->  00:14:02.960
Click on the plus to add it as a library.
302

302

00:14:02.960  -->  00:14:06.180
Click on Java, and I'm going
to navigate to that folder,
303

303

00:14:06.180  -->  00:14:08.640
which in my case, was the desktop.
304

304

00:14:08.640  -->  00:14:10.470
Go into the lib folder,
and I'm going to select
305

305

00:14:10.470  -->  00:14:12.750
all the jars that were part of that.
306

306

00:14:12.750  -->  00:14:14.210
It's quite a few there, as you can see.
307

307

00:14:14.210  -->  00:14:15.370
Click on Open.
308

308

00:14:16.290  -->  00:14:18.160
We'll add it to the selected
module, which in this case,
309

309

00:14:18.160  -->  00:14:20.400
is Networking, for this
particular project.
310

310

00:14:20.400  -->  00:14:22.320
You can see all the files are there now,
311

311

00:14:22.320  -->  00:14:23.910
and we click on OK.
312

312

00:14:25.300  -->  00:14:27.040
IntelliJ's indexed those briefly,
313

313

00:14:27.040  -->  00:14:29.500
and we've now added them to the project.
314

314

00:14:29.500  -->  00:14:34.130
So what I'm going to do
now is create a new class,
315

315

00:14:34.130  -->  00:14:37.130
and I'll call this class ApacheTest.
316

316

00:14:40.210  -->  00:14:41.810
And I'm going to create a public method,
317

317

00:14:41.810  -->  00:14:44.720
public main method here, psvm, tab,
318

318

00:14:46.140  -->  00:14:48.600
public static void main,
and let's actually see
319

319

00:14:48.600  -->  00:14:53.210
what the equivalent code
is to retrieve the webpage.
320

320

00:14:53.210  -->  00:14:54.810
Instead of using java.net,
321

321

00:14:54.810  -->  00:14:58.520
we're going to be using
the Apache HTTPClient.
322

322

00:14:58.520  -->  00:15:00.410
So we've added that as an option here.
323

323

00:15:00.410  -->  00:15:02.350
We've created a new class, ApacheTest,
324

324

00:15:02.350  -->  00:15:04.430
and I've created a new main method.
325

325

00:15:04.430  -->  00:15:07.560
So the actual code to do the equivalent,
326

326

00:15:07.560  -->  00:15:11.310
we're going to start
with CloseableHttpClient
327

327

00:15:12.240  -->  00:15:15.910
httpClient = HttpClients.createDefault;
328

328

00:15:20.260  -->  00:15:23.180
HttpGet request = new HttpGet,
329

329

00:15:27.670  -->  00:15:29.740
and we're gonna pass the website.
330

330

00:15:29.740  -->  00:15:33.900
In this case, it's going
to be http://example.org.
331

331

00:15:36.800  -->  00:15:37.990
Next, we're going to add a header.
332

332

00:15:37.990  -->  00:15:42.160
So request.addHeader, and that's
going to be the User-Agent.
333

333

00:15:44.450  -->  00:15:47.850
We'll go with Chrome again,
remembering you don't actually
334

334

00:15:47.850  -->  00:15:50.250
have to be running on Chrome
or anything like that.
335

335

00:15:50.250  -->  00:15:52.170
But we're just passing something there.
336

336

00:15:52.170  -->  00:15:55.870
Lets execute this response,
and we're gonna return
337

337

00:15:55.870  -->  00:15:59.700
or get returned to us a
CloseableHttpResponse.
338

338

00:16:01.240  -->  00:16:02.320
We'll call that response,
339

339

00:16:02.320  -->  00:16:06.490
and it's equal to
httpClient.execute, and our request.
340

340

00:16:09.570  -->  00:16:13.140
Then we need to add a try,
and what we'll actually do
341

341

00:16:13.140  -->  00:16:16.720
is we'll put that
CloseableHttpResponse in the try,
342

342

00:16:16.720  -->  00:16:19.420
'cause it really needs to
catch, as you can see there,
343

343

00:16:19.420  -->  00:16:22.170
it wants to catch an IOException.
344

344

00:16:23.390  -->  00:16:26.550
Then we're gonna start by
printing out the response code.
345

345

00:16:26.550  -->  00:16:29.660
So response code = +,
346

346

00:16:29.660  -->  00:16:33.830
and it's
response.getStatusLine().getStatusCode();
347

347

00:16:37.860  -->  00:16:41.780
then we're gonna do
BufferedReader inputReader,
348

348

00:16:43.540  -->  00:16:45.360
and we can actually
probably copy a lot of this
349

349

00:16:45.360  -->  00:16:48.430
from the other one, so
let's actually do that.
350

350

00:16:48.430  -->  00:16:52.270
I'm gonna copy that line,
those lines of code,
351

351

00:16:52.270  -->  00:16:54.100
and we'll paste that in here,
352

352

00:16:54.100  -->  00:16:57.530
and we'll paste that over the
top of the BufferedReader.
353

353

00:16:57.530  -->  00:16:59.360
Then we'll just make a few
changes to the code there,
354

354

00:16:59.360  -->  00:17:01.960
and let's close down the run window.
355

355

00:17:01.960  -->  00:17:05.540
Let's also catch the
IOException, just to remove that
356

356

00:17:05.540  -->  00:17:07.020
as an error in the code.
357

357

00:17:07.020  -->  00:17:08.190
IOException e.
358

358

00:17:10.970  -->  00:17:15.400
We'll just print out
IOException = + e.getMessage();
359

359

00:17:15.400  -->  00:17:18.050
and in terms of the code,
we've got BufferedReader
360

360

00:17:18.050  -->  00:17:20.500
inputReader = new, BufferedReader,
361

361

00:17:20.500  -->  00:17:22.220
it's gonna be new InputStreamReader,
362

362

00:17:22.220  -->  00:17:23.800
but it's not going to
be connection this time.
363

363

00:17:23.800  -->  00:17:24.680
It's going to be a bit different there.
364

364

00:17:24.680  -->  00:17:25.580
It's going to be...
365

365

00:17:25.580  -->  00:17:27.220
I'll just delete that out.
366

366

00:17:27.220  -->  00:17:31.390
It's going to be
response.getEntity().getContent().
367

367

00:17:35.740  -->  00:17:37.310
Okay, then we've got
the string line there.
368

368

00:17:37.310  -->  00:17:40.610
while line is not equal
to inputReader.readLine,
369

369

00:17:40.610  -->  00:17:41.510
not equal to null,
370

370

00:17:41.510  -->  00:17:44.790
and we're outputting
the content retrieved,
371

371

00:17:44.790  -->  00:17:47.630
ending the while loop, and
then closing at the end there.
372

372

00:17:47.630  -->  00:17:49.920
The other thing we'll do down here,
373

373

00:17:49.920  -->  00:17:51.570
we'll add a finally.
374

374

00:17:51.570  -->  00:17:55.490
We're gonna do a
response.close, and then we're
375

375

00:17:57.100  -->  00:18:00.080
just gonna make a bit of a change here.
376

376

00:18:00.080  -->  00:18:04.080
There, and we can assign
that variable there,
377

377

00:18:04.080  -->  00:18:06.090
outside of the try,
and then we'll actually
378

378

00:18:06.090  -->  00:18:08.150
just update the variable that way.
379

379

00:18:08.150  -->  00:18:09.010
And therefore, we're going to be able
380

380

00:18:09.010  -->  00:18:11.260
to actually close it there.
381

381

00:18:19.500  -->  00:18:23.000
And we'll just catch an IOException there.
382

382

00:18:26.030  -->  00:18:27.510
Because we're not using a
try-with-resources there,
383

383

00:18:27.510  -->  00:18:30.220
we just need to make
sure that we can close it
384

384

00:18:30.220  -->  00:18:32.460
successfully in case
it wasn't initialised.
385

385

00:18:32.460  -->  00:18:37.120
So there's the code using
the Apache HTTPClient.
386

386

00:18:37.120  -->  00:18:39.310
So you can see that it's similar
to what we've had before,
387

387

00:18:39.310  -->  00:18:44.070
except that we're creating this
CloseableHttpClient instance
388

388

00:18:44.070  -->  00:18:46.860
on line 18, and then we're
using or we're getting
389

389

00:18:46.860  -->  00:18:50.980
a HttpGet instance for
the URL again on line 19.
390

390

00:18:50.980  -->  00:18:54.220
Now, we configure the request
object, not the HttpClient,
391

391

00:18:54.220  -->  00:18:55.810
so it's a little bit different.
392

392

00:18:55.810  -->  00:18:58.350
Once we've configured it, then
all we're doing here again
393

393

00:18:58.350  -->  00:19:01.110
is just setting the User-Agent on line 20.
394

394

00:19:01.110  -->  00:19:04.190
We're then calling the
CloseableHttpClient.execute
395

395

00:19:04.190  -->  00:19:06.440
method on line 24.
396

396

00:19:06.440  -->  00:19:08.160
That sends off the request.
397

397

00:19:08.160  -->  00:19:10.910
Now, when using the CloseableHttpResponse,
398

398

00:19:10.910  -->  00:19:13.930
it is highly recommended that
you call the close method
399

399

00:19:13.930  -->  00:19:16.090
in a finally block as I've done down here.
400

400

00:19:16.090  -->  00:19:18.410
The reason is that
otherwise, system resources
401

401

00:19:18.410  -->  00:19:20.630
may not be released correctly.
402

402

00:19:20.630  -->  00:19:22.430
The other way I could have
done this, by the way,
403

403

00:19:22.430  -->  00:19:23.560
I could have actually changed this
404

404

00:19:23.560  -->  00:19:26.820
to the throws IOException here,
405

405

00:19:26.820  -->  00:19:28.800
which is something that
you'll see is done regularly,
406

406

00:19:28.800  -->  00:19:32.960
and by doing that, I could
have actually had this in here
407

407

00:19:34.650  -->  00:19:37.220
outside of the try loop.
408

408

00:19:37.220  -->  00:19:38.050
Response.
409

409

00:19:40.570  -->  00:19:45.350
Remove that altogether, I can
then remove this final try
410

410

00:19:45.350  -->  00:19:49.040
and catch and clean it up that way,
411

411

00:19:49.040  -->  00:19:51.900
because we've thrown the
IOException at this level.
412

412

00:19:51.900  -->  00:19:52.890
So that's another way of doing it
413

413

00:19:52.890  -->  00:19:54.630
if you didn't want to
handle the extra call
414

414

00:19:54.630  -->  00:19:56.180
outside of the try as I did there.
415

415

00:19:56.180  -->  00:19:58.620
Makes the finally look
a little bit more tidy
416

416

00:19:58.620  -->  00:20:02.060
because we're throwing the
IOException from the method
417

417

00:20:02.060  -->  00:20:04.320
instead of trying to catch
that in the finally block.
418

418

00:20:04.320  -->  00:20:06.470
But in any event, once
we've got the response
419

419

00:20:06.470  -->  00:20:10.700
we get the response code by
calling the getStatus line.
420

420

00:20:10.700  -->  00:20:13.860
You can see that here on line
25, and then getting from that
421

421

00:20:13.860  -->  00:20:16.810
the StatusCode call on the result.
422

422

00:20:16.810  -->  00:20:18.050
And the rest of the code then you saw
423

423

00:20:18.050  -->  00:20:19.600
was pretty much a copy and paste.
424

424

00:20:19.600  -->  00:20:20.750
The only real change was this
425

425

00:20:20.750  -->  00:20:25.270
response.getEntity().getContent
for the actual method.
426

426

00:20:25.270  -->  00:20:27.180
Now, there are other ways
of handling the content,
427

427

00:20:27.180  -->  00:20:29.380
but we're doing it this way
because it's very similar
428

428

00:20:29.380  -->  00:20:31.060
to how we handle the response
429

429

00:20:31.060  -->  00:20:35.170
when using the java.net
HttpURLConnection class.
430

430

00:20:35.170  -->  00:20:37.120
So let's actually just run this,
431

431

00:20:37.120  -->  00:20:39.050
making sure that it actually works.
432

432

00:20:39.050  -->  00:20:40.720
Run ApacheTest.main.
433

433

00:20:43.950  -->  00:20:45.850
And you can see we're able to retrieve
434

434

00:20:45.850  -->  00:20:48.190
our example.org page with no problems,
435

435

00:20:48.190  -->  00:20:52.080
so we got our response
code correctly of 200.
436

436

00:20:52.080  -->  00:20:53.630
So that's a taste of one of the popular
437

437

00:20:53.630  -->  00:20:55.850
third-party libraries
and also that's the end
438

438

00:20:55.850  -->  00:20:58.550
of how to work with a
high-level API and the end
439

439

00:20:58.550  -->  00:21:01.210
of this section on the
Java network programming.
440

440

00:21:01.210  -->  00:21:02.590
I hope you got a lot out of it.
441

441

00:21:02.590  -->  00:21:06.120
Thanks very much for watching,
and let's move on now.
