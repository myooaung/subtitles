1
1

00:00:05,210  -->  00:00:08,340
so this is a continuation from the
previous video where we are talking about
2

2

00:00:08,340  -->  00:00:12,360
equals and hash Code now just before I go
any further I want to make sure that I add
3

3

00:00:12,360  -->  00:00:17,340
the @ override before so we talked about
how that is essential to make sure that
4

4

00:00:17,340  -->  00:00:21,820
the compiler is checking to see whether
you have the right signature for the
5

5

00:00:21,820  -->  00:00:25,470
method and I deleted it right at the end of the last video when I was showing you how
6

6

00:00:25,470  -->  00:00:31,570
to create an empty stub using
the intelliJ functionality so again just as a
7

7

00:00:31,570  -->  00:00:37,980
recap command N which is alt insert
on a PC now I can go to override methods and I can go  through and
8

8

00:00:37,980  -->  00:00:41,320
override I can't do equals now because it's
not in the list and that's because I've
9

9

00:00:41,320  -->  00:00:45,260
already successfully overridden it that's
normally where you choose it and we can take it
10

10

00:00:45,260  -->  00:00:48,080
from there so anyway I put that back so
that's good to so now that we've written
11

11

00:00:48,080  -->  00:00:54,140
our first equals method we change it now to use
an object instead of a heavenly body
12

12

00:00:54,140  -->  00:00:58,260
because we talked about how we need it to
do that because we weren't
13

13

00:00:58,260  -->  00:01:02,210
overloading the method we are overriding it is an
important distinction between the two there
14

14

00:01:02,210  -->  00:01:07,710
so what does this equals method do
first or do in general it first checks
15

15

00:01:07,710  -->  00:01:12,110
to see if it's been compared to itself we
talked about that that's on line 39
16

16

00:01:12,110  -->  00:01:16,250
if it's checking for itself it's going
to return true because we discussed how from
17

17

00:01:16,250  -->  00:01:21,170
an object's point of view equals equals
just returns true if the object you're
18

18

00:01:21,170  -->  00:01:25,340
comparing is the same object in memory
next it does a similar tests to the
19

19

00:01:25,340  -->  00:01:28,560
instance of tests we saw in the last
video when we're looking at the string
20

20

00:01:28,560  -->  00:01:33,680
class with that said in order to make
sure that sub classes do not compare
21

21

00:01:33,680  -->  00:01:37,950
equal what we doing is we check the actual class of the object being
22

22

00:01:37,950  -->  00:01:43,070
compared against the class of the object
the method is in now if we tried to call the
23

23

00:01:43,070  -->  00:01:48,000
get class method of null we get a null
pointer exception so that's why we have
24

24

00:01:48,000  -->  00:01:51,930
to have a test first on that line
45 the first part to test for
25

25

00:01:51,930  -->  00:01:56,640
null first null will fail the instance of checks
so an explicit test for null is required
26

26

00:01:56,640  -->  00:02:00,320
when using instant off and obviously
so that we know what's going on we
27

27

00:02:00,320  -->  00:02:05,170
are printing out the results on line 43 and
44 but we won't leave that in the final code
28

28

00:02:05,170  -->  00:02:09,100
but it's also useful to see when our
equals method is called as well as
29

29

00:02:09,100  -->  00:02:12,860
explaining what the test is doing and
finally because we've just we just
30

30

00:02:12,860  -->  00:02:14,440
comparing names
31

31

00:02:14,440  -->  00:02:17,310
we establish that's going to be our
criteria for an equals
32

32

00:02:17,310  -->  00:02:21,870
match in the heavenly body given that the
string class already has an equals
33

33

00:02:21,870  -->  00:02:27,040
method we can cast the object we comparing to a
heavenly body and then use a string
34

34

00:02:27,040  -->  00:02:30,090
equals method to compare its name
against the name of the current object
35

35

00:02:30,090  -->  00:02:35,680
which has of course is this.name so we know this class is safe and won't throw an exception because
36

36

00:02:35,680  -->  00:02:41,370
we've already checked on line 45 for null
and also ensure that object is a
37

37

00:02:41,370  -->  00:02:45,570
heavenly body as well on that same line
so you think that we're ready to run
38

38

00:02:45,570  -->  00:02:49,900
this but actually we are not really ready to run
this yet and that's because if you recall
39

39

00:02:49,900  -->  00:02:54,150
I talked about it in length in the previous
video about needing the hash code how
40

40

00:02:54,150  -->  00:02:59,250
we need to override both equals and hash Code
methods at the same time so technically
41

41

00:02:59,250  -->  00:03:03,010
it's not going to be correct but because
it's very informative lets us run it now
42

42

00:03:03,010  -->  00:03:07,400
anyway but bearing in mind that of course it's
not going to be valid completely until
43

43

00:03:07,400  -->  00:03:17,410
we implement the hash code methods so we go back to main
and I'm going to run it so there's two things we
44

44

00:03:17,410  -->  00:03:21,470
can actually see from this output and
number one and most importantly our
45

45

00:03:21,470  -->  00:03:25,070
equals method was not called so how do we
know well if you go back and have a
46

46

00:03:25,070  -->  00:03:29,060
look at our heavenly body code we
added some system out print lines there to
47

47

00:03:29,060  -->  00:03:33,260
actually check to see or to tell us
what was being checked and that has
48

48

00:03:33,260  -->  00:03:36,660
shown in the log as you on
the right hand side so that's number one
49

49

00:03:36,660  -->  00:03:42,220
and secondly pluto is still showing
twice so this is the reason why you want
50

50

00:03:42,220  -->  00:03:46,290
to implement hash code because we haven't
done that we haven't overwritten hash code
51

51

00:03:46,290  -->  00:03:49,430
the second Pluto was put into a
different bucket now because there wasn't
52

52

00:03:49,430  -->  00:03:53,030
already something in the bucket there's
no need to call equals so both
53

53

00:03:53,030  -->  00:03:58,190
observations come down to the same cause
so effectively the Pluto is being
54

54

00:03:58,190  -->  00:03:59,430
repeated twice
55

55

00:03:59,430  -->  00:04:03,000
so lets go back and look at implementing that
I'll close down the string java source
56

56

00:04:03,000  -->  00:04:09,650
code we don't need it anymore we go back to heavenly body and let's implement our hash code so I'm just going
57

57

00:04:09,650  -->  00:04:15,370
to use the command and go to override
methods and incidentally I can also use
58

58

00:04:15,370  -->  00:04:20,260
I believe it's ALT insert on a PC but I
can also use control O on a Mac
59

59

00:04:20,260  -->  00:04:23,830
and that will come up automatically to
the override as opposed to that extra
60

60

00:04:23,830  -->  00:04:28,530
menu if you want to see what it is on
your operating system
61

61

00:04:28,530  -->  00:04:33,760
you can see up here it will be override methods for me
that's the command o for a Mac look at what the equivalent
62

62

00:04:33,760  -->  00:04:38,260
key shortcut is on your PC or Linux
machine and you can do that as a
63

63

00:04:38,260  -->  00:04:43,250
shortcut so I'm gonna do command o again and I'm
going to override the hash code and
64

64

00:04:43,250  -->  00:04:46,990
that's giving us some basic code there as you
can see but we're going to change that so
65

65

00:04:46,990  -->  00:04:52,060
in terms of the implementation it
actually appears extremely easy and the
66

66

00:04:52,060  -->  00:04:55,600
reason is because the String class has a
hash Code method and because we're
67

67

00:04:55,600  -->  00:05:00,460
comparing only strings because we
decided in the equals method our comparison
68

68

00:05:00,460  -->  00:05:04,090
is going to be just the name of the
heavenly body so you think that we could
69

69

00:05:04,090  -->  00:05:07,840
just would seem that we just generate
the hash code for the body's name so in
70

70

00:05:07,840  -->  00:05:09,350
other words we could do something like
this
71

71

00:05:09,350  -->  00:05:19,720
....so the hash
code in this case that we're calling is
72

72

00:05:19,720  -->  00:05:23,560
the hash code method from the String
class now this would actually work here
73

73

00:05:23,560  -->  00:05:28,170
and that's because we've typed the sets
and the map using generics so there's
74

74

00:05:28,170  -->  00:05:31,940
little danger of comparing say a
heavenly body to a string but it's not
75

75

00:05:31,940  -->  00:05:36,050
really good practice though to do this because a
heavenly body called pluto would
76

76

00:05:36,050  -->  00:05:40,600
probably have a different hash code to the
string pluto now how you generate hash codes
77

77

00:05:40,600  -->  00:05:44,490
is pretty much up to you as long as the
same object will always generate the
78

78

00:05:44,490  -->  00:05:50,090
same hash code during any execution of
your program and also as long as objects
79

79

00:05:50,090  -->  00:05:53,840
that compare equal have the same hash code once that's done then the
80

80

00:05:53,840  -->  00:05:57,990
requirement is satisfied now if you search for
overriding on the internet you
81

81

00:05:57,990  -->  00:06:01,930
will actually find some recommendations that
you can just return 0 every instances of
82

82

00:06:01,930  -->  00:06:06,390
an object will have the same hash code
which certainly meets the
83

83

00:06:06,390  -->  00:06:10,840
requirement that two objects that
compared equal have the same hash code and also
84

84

00:06:10,840  -->  00:06:14,700
means that no matter how many times you
generate a hash Code from an object it would
85

85

00:06:14,700  -->  00:06:19,260
always be the same in that scenario so with
that suggestion returning 0 in other
86

86

00:06:19,260  -->  00:06:23,850
words meets the requirements for a hash code method but you think about it sort
87

87

00:06:23,850  -->  00:06:26,540
of misses the purpose of hashing in the
first place
88

88

00:06:26,540  -->  00:06:32,710
now if every object of a hash collection ends up in the same bucket and you totally lose
89

89

00:06:32,710  -->  00:06:33,580
the performance benefits
90

90

00:06:33,580  -->  00:06:37,910
of using hash collection class
the performance in that case will drop
91

91

00:06:37,910  -->  00:06:42,160
to that of a linked list or a similar
structure and that's because once the
92

92

00:06:42,160  -->  00:06:47,460
single bucket has been located which is bucket 0 the
items will each need to be compared to see
93

93

00:06:47,460  -->  00:06:53,370
if the required one is in their so it's very
much less sufficient to doing it that way
94

94

00:06:53,370  -->  00:06:57,310
now adding a number to the names hash code will
make it different and that's what we
95

95

00:06:57,310  -->  00:07:01,680
will actually do here so any number that
doesn't risk overflowing an integer will do so
96

96

00:07:01,680  -->  00:07:07,000
will just use 57 in this case is just enough not to
cause problems and well also print out a message
97

97

00:07:07,000  -->  00:07:11,990
temporarily so that you can see the hash code is
being used so what would do is go back to our
98

98

00:07:11,990  -->  00:07:15,940
hash code method and we're going to add
to the end of that a number and as I
99

99

00:07:15,940  -->  00:07:20,620
mentioned we will use the number 57 because it is small
enough not to cause any problems and
100

100

00:07:20,620  -->  00:07:24,210
that then guarantees that we've got a
number a non-zero number that's been
101

101

00:07:24,210  -->  00:07:28,520
returned for each of our hashes so again
we're using the code that comes back
102

102

00:07:28,520  -->  00:07:33,710
from a string but we're adding 57 to that as well so its a non-zero number because hash code from the
103

103

00:07:33,710  -->  00:07:37,930
string source code is returning
its own hash code and we're adding the number 57
104

104

00:07:37,930  -->  00:07:43,360
to that so lets also print a message in their or we will just
indicate that it has been called so....
105

105

00:07:43,360  -->  00:07:48,620
....and now in theory if you go
back to our main now we have
106

106

00:07:48,620  -->  00:07:54,440
implemented both equals and hash Code we
should see our debugging codes
107

107

00:07:54,440  -->  00:07:55,900
showing when we run the app or when we run the
108

108

00:07:55,900  -->  00:08:02,060
application so to do that we run it and now you can
see hashcode called so that's good and then we
109

109

00:08:02,060  -->  00:08:06,830
can also see over here
110

110

00:08:06,830  -->  00:08:11,500
object class is class.com.timbuchalka.HeavenlyBody you can see the comparisons
111

111

00:08:11,500  -->  00:08:17,020
object and this is returning the same
information and the good of course down here now
112

112

00:08:17,020  -->  00:08:21,690
that we've done that you can see that Pluto is now only in the list once its only been added once
113

113

00:08:21,690  -->  00:08:28,090
now and the other thing to note is if you recall with our code we had added our second pluto
114

114

00:08:28,090  -->  00:08:31,280
that we added we use
115

115

00:08:31,280  -->  00:08:35,580
842 for the orbital period but 248 which was the first entry for pluto has
116

116

00:08:35,580  -->  00:08:39,210
been added which is the correct one and
that tells us that the duplicate the
117

117

00:08:39,210  -->  00:08:43,800
second one wasn't added and the this now
fits the behavior of a set that an object
118

118

00:08:43,800  -->  00:08:47,550
will not be added if already exists and we
can clearly say their that only the
119

119

00:08:47,550  -->  00:08:51,160
original pluto has been added now we have looked
at the two rules for hash code method
120

120

00:08:51,160  -->  00:08:56,180
we have not fully discuss the rules for equals
so the 5 rules father I'm going to just bring up a
121

121

00:08:56,180  -->  00:09:02,380
link here it can be found and this is a
resource there will be a link to in this video
122

122

00:09:02,380  -->  00:09:08,820
Resources section and you can open that up
but I'll go and put it in a new tab
123

123

00:09:08,820  -->  00:09:17,660
come down to equals as you can see their we got some
code there for information about hash
124

124

00:09:17,660  -->  00:09:23,740
code but also some information about
equals as well looking here you can see
125

125

00:09:23,740  -->  00:09:27,500
that the various description about the
equals now you can see that it's using
126

126

00:09:27,500  -->  00:09:32,470
mathematical terms like reflexive
symmetric and transitive and then
127

127

00:09:32,470  -->  00:09:36,270
explain what it means by them as you can
see so reflex for any non null
128

128

00:09:36,270  -->  00:09:42,640
reference value x.equals(x) should return
true in that case if its symmetric for every
129

129

00:09:42,640  -->  00:09:47,760
non-null reference values X&Y then
x.equals(y) should return true if
130

130

00:09:47,760  -->  00:09:52,810
only if y.equals(x) returns true so on
and so forth and if you read those through
131

131

00:09:52,810  -->  00:09:58,020
they actually makes sense and by that we can say
for example pluto.equals
132

132

00:09:58,020  -->  00:10:03,600
pluto passing pluto must return
true and if earth equals terra is true
133

133

00:10:03,600  -->  00:10:07,180
then of course terra.equals(earth) must also be
true that's really what this sort of
134

134

00:10:07,180  -->  00:10:11,040
saying here so the rules make sense and its
just really a formal description of the
135

135

00:10:11,040  -->  00:10:15,720
way we expect to equals to work anyway but it can be
useful just if you wanna clear reference
136

136

00:10:15,720  -->  00:10:20,640
of what we are trying to achieve in the
equals method now there's a note as you can see
137

137

00:10:20,640  -->  00:10:25,190
here that it's generally necessary
to override the hash code method if equals
138

138

00:10:25,190  -->  00:10:28,810
is overridden and we've talked about
that before and we have seen what can happen if
139

139

00:10:28,810  -->  00:10:33,890
that suggestion is not followed and you
saw that our equals method in fact wasn't being
140

140

00:10:33,890  -->  00:10:40,490
called until we implemented or overrode I
should say the hash code method itself so
141

141

00:10:40,490  -->  00:10:43,940
I'm going to finish this video here now
in the next video what we're going to
142

142

00:10:43,940  -->  00:10:47,140
do is we are going to come up with a mini
challenge to challenge your
143

143

00:10:47,140  -->  00:10:51,810
understanding of what has been taught in
these last few videos and hopefully that
144

144

00:10:51,810  -->  00:10:54,950
will help you understand things a little bit better so I'll
see you in that next video
