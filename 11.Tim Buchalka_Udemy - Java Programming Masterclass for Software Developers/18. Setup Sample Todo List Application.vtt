WEBVTT
1
1

00:00:05.500  -->  00:00:09.730
so now that we've learned how to use layouts
and controls to create a user interface
2

2

00:00:09.730  -->  00:00:14.900
and also how to handle user interaction
using event handlers we're going to put
3

3

00:00:14.900  -->  00:00:19.590
this all together and build a UI
application that someone might actually
4

4

00:00:19.590  -->  00:00:25.660
use let's do some level setting first so
this won't be a real world application in a
5

5

00:00:25.660  -->  00:00:30.010
sense that we would sell it the UI is
gonna be rough because we're not going
6

6

00:00:30.010  -->  00:00:35.180
to spend time fiddling with insets
spacing and layout in addition we won't do
7

7

00:00:35.180  -->  00:00:37.610
any validation of the user input
8

8

00:00:37.610  -->  00:00:42.230
we won't handle exceptions and we won't perform many of the other
tasks that we would do in a real-world
9

9

00:00:42.230  -->  00:00:47.070
application because there are strictly
related to coding a user interface what
10

10

00:00:47.070  -->  00:00:50.670
we gonna do is spend our time driving
home what we've already learned and
11

11

00:00:50.670  -->  00:00:55.680
introducing new concepts and controls in
addition as well in a nutshell the UI
12

12

00:00:55.680  -->  00:00:59.050
won't be pretty but it will be
functional now the application code won't
13

13

00:00:59.050  -->  00:01:03.500
be comprehensive and since this section isn't about
application architecture will also takes some
14

14

00:01:03.500  -->  00:01:06.520
shortcuts that we wouldn't take if your
designing and coding a real-world
15

15

00:01:06.520  -->  00:01:11.100
application with that in mind let's get
started so we are gonna write a application that
16

16

00:01:11.100  -->  00:01:15.930
will keep a todo list and when we finish the
application is gonna look something like this I'm just
17

17

00:01:15.930  -->  00:01:20.610
gonna bring up a screenshot on the screen here and
you can see that we've got a to do
18

18

00:01:20.610  -->  00:01:24.710
list so we got the ability to enter in
items with the date that they are due
19

19

00:01:24.710  -->  00:01:29.700
and you notice the color coding when
things become close to being due or over due the
20

20

00:01:29.700  -->  00:01:34.720
color-coding charges and the
information is recorded and saved as
21

21

00:01:34.720  -->  00:01:40.150
well so what you need to do is create a
new project so I've created that I've
22

22

00:01:40.150  -->  00:01:43.860
called it to do list so you want to
create a new Java
23

23

00:01:43.860  -->  00:01:50.220
fx project we're gonna change this
package to something more meaningful I'm
24

24

00:01:50.220  -->  00:01:56.040
going to do is refactor and rename it and I'm gonna call mine....
25

25

00:01:56.040  -->  00:02:00.060
....
26

26

00:02:00.910  -->  00:02:03.910
....
27

27

00:02:04.420  -->  00:02:07.820
now you can of course call that whatever
you like but that's just what I come up
28

28

00:02:07.820  -->  00:02:13.960
with for this demo now the FXML
file that we've got on board is for our main
29

29

00:02:13.960  -->  00:02:22.490
Windows we are gonna call that main window so I'm gonna right click that refactor rename call it...
30

30

00:02:22.490  -->  00:02:31.270
and if we double-click into main you notice that
IntelliJ was smart enough to handle the
31

31

00:02:31.270  -->  00:02:36.110
renaming so it took the change the
refactor named main window and
32

32

00:02:36.110  -->  00:02:41.080
applied it their which is exactly what we want in
this case so gonna use a border pane
33

33

00:02:41.080  -->  00:02:45.550
as a top-level layout so we are gonna switch back
to our FXML file and change that so
34

34

00:02:45.550  -->  00:02:51.130
lets go to main window we are gonna change the grid pane
35

35

00:02:51.910  -->  00:02:58.360
to a border pane so we are going to type that in...and of course h gap
36

36

00:02:58.360  -->  00:03:01.790
and v gap properties is no longer
apply to a border pane so we need to
37

37

00:03:01.790  -->  00:03:09.290
remove those and of course we also learned
previously that an alignment property
38

38

00:03:09.290  -->  00:03:12.290
doesn't work with a border pane so we remove that as well
39

39

00:03:13.510  -->  00:03:21.350
now we just fix the closing tag their and let's go back to main now just before we run it to make sure
40

40

00:03:21.350  -->  00:03:26.630
it works and will change the title instead of hello world well change that to to do list
41

41

00:03:26.630  -->  00:03:40.190
because that is the name of our application and we will change size and lets make it 900 by 500 and run it quickly to make sure it
42

42

00:03:40.190  -->  00:03:47.330
still works now from time to time when you're
running programs this will come up now if it
43

43

00:03:47.330  -->  00:03:50.330
does come up what we need to do is just go
back to the run window
44

44

00:03:51.510  -->  00:03:54.720
edit configurations I can actually go into main
45

45

00:03:54.720  -->  00:03:58.730
but I will click on edit configuration and select main over here and notice how its still looking for the main
46

46

00:03:58.730  -->  00:04:03.820
class sample.main so we just need to delete
in this case the sample and change it
47

47

00:04:03.820  -->  00:04:04.230
to what I've
48

48

00:04:04.230  -->  00:04:12.050
called it....and notice IntelliJ is
helping us as I type that...
49

49

00:04:13.950  -->  00:04:14.730
....
50

50

00:04:14.730  -->  00:04:22.640
you can see that is the one their once we do that and ok it...and
51

51

00:04:22.640  -->  00:04:27.650
now when we run and it should work ok we got a base application working so that is good so we want to close that run window down
52

52

00:04:31.830  -->  00:04:37.140
next thing we are going to add is a list view control and that is there to display a
list of items that is what the list view does
53

53

00:04:37.140  -->  00:04:42.740
does in our case its just gonna display a list of
to-do items so we'll learn how to use the list
54

54

00:04:42.740  -->  00:04:43.880
view as we go along
55

55

00:04:43.880  -->  00:04:48.030
creating this application so let's add it
to the left position on the border pane so
56

56

00:04:48.030  -->  00:04:53.760
go back to our FXML main window and within
the border pane so gonna add it to the left
57

57

00:04:53.760  -->  00:04:59.550
hand side of the screen as you saw in the
screenshot earlier so.....
58

58

00:05:00.610  -->  00:05:07.800
then within their we are going to add... and just a closing and I'm going to
59

59

00:05:07.800  -->  00:05:17.020
accept the import and just to confirm if you run this you
can see now we've got this little list view area here to
60

60

00:05:17.020  -->  00:05:20.240
the left hand side that is going to
contain our to do list
61

61

00:05:21.220  -->  00:05:24.220
or our to do list items so that's working good
62

62

00:05:26.680  -->  00:05:31.540
now of course we want to populate the list view with our to-do
items so what we need to do you need to
63

63

00:05:31.540  -->  00:05:35.220
start thinking about our data model so
what we'll do is we'll create a new
64

64

00:05:35.220  -->  00:05:40.120
package called data models so let's go ahead and
do that so I'm gonna come in to here so click
65

65

00:05:40.120  -->  00:05:45.640
on the package name here right
click new package I'm gonna type...
66

66

00:05:45.640  -->  00:05:53.800
and notice how it has created this new package from
their I am going to create a new class we are gonna
67

67

00:05:53.800  -->  00:06:04.170
call it to do items so right click on data model new
Java class.....now each to do item has
68

68

00:06:04.170  -->  00:06:08.130
got a short description that will show in the
list view so we need an instance variable
69

69

00:06:08.130  -->  00:06:12.720
of type string and in addition we are gonna allow the
user to enter more details about to do
70

70

00:06:12.720  -->  00:06:18.730
item and that will also be a string and lastly we will
also use a local date field
71

71

00:06:18.730  -->  00:06:23.270
that will store the due date or deadline for
the to do item as well so let's do that so
72

72

00:06:23.270  -->  00:06:26.500
let's create these three field so the
first one's is gonna be...
73

73

00:06:26.500  -->  00:06:27.200
....
74

74

00:06:27.200  -->  00:06:37.130
....that's the description
that appear in the list view....
75

75

00:06:37.130  -->  00:06:46.100
....
76

76

00:06:46.100  -->  00:06:52.070
...so what we want here is local date so make sure you select local date from java.time....
77

77

00:06:52.070  -->  00:06:59.320
....and I think we are getting an error because this is 1.7
and my packages i still looking at an older
78

78

00:06:59.320  -->  00:07:07.220
version so right click the package and going to
module settings project and make sure that is
79

79

00:07:07.220  -->  00:07:16.440
set to 8 click on ok and that has now fixed that error as well we also
need to create a constructor and also
80

80

00:07:16.440  -->  00:07:22.280
some getters and setters so do the constructoir first and all three
81

81

00:07:22.280  -->  00:07:27.790
fields are going to be part of the
constructor and lets also add the
82

82

00:07:27.790  -->  00:07:34.900
getters and setters as well.....so that
we can use those elsewhere in the
83

83

00:07:34.900  -->  00:07:39.400
program now we need to go back to the
controller and start doing some work in
84

84

00:07:39.400  -->  00:07:43.130
their so remember the
controller also handles the interaction
85

85

00:07:43.130  -->  00:07:50.190
between the user interface and the data model so we wanna go ahead and add....
86

86

00:07:50.190  -->  00:07:56.820
....
87

87

00:07:58.970  -->  00:08:06.700
...
88

88

00:08:06.700  -->  00:08:17.400
....so lets add now the initialize method
for our controller and that's going to
89

89

00:08:17.400  -->  00:08:23.970
initialize our application with some
sample data so....
90

90

00:08:23.970  -->  00:08:30.000
...we talked about that in
previous videos and lets creates some to do items
91

91

00:08:30.000  -->  00:08:33.230
so.....
92

92

00:08:33.230  -->  00:08:47.140
.....
93

93

00:08:47.140  -->  00:08:58.860
...
94

94

00:08:58.860  -->  00:09:01.030
....
95

95

00:09:01.030  -->  00:09:16.990
.....
96

96

00:09:18.970  -->  00:09:27.480
....and lets add several more what I'll do is another 4 so we got a few items to show in our interface
97

97

00:09:27.480  -->  00:09:35.660
....
98

98

00:09:38.910  -->  00:09:48.410
....
99

99

00:09:51.320  -->  00:10:33.980
....
100

100

00:10:35.830  -->  00:10:39.190
....
101

101

00:10:39.190  -->  00:10:53.610
.....
102

102

00:10:56.330  -->  00:10:59.480
....
103

103

00:11:05.000  -->  00:11:15.730
....
104

104

00:11:15.730  -->  00:11:30.000
...
105

105

00:11:30.000  -->  00:11:53.630
....
106

106

00:11:53.630  -->  00:12:07.070
...ok so we got our 5 items now so we are gonna
create initialize the ArrayList that
107

107

00:12:07.070  -->  00:12:15.920
we created on line 11 so....
108

108

00:12:15.920  -->  00:12:24.110
...
109

109

00:12:24.110  -->  00:12:27.110
....
110

110

00:12:30.970  -->  00:12:39.720
....so really the exact data doesn't matter this is just placeholder data until we
111

111

00:12:39.720  -->  00:12:45.090
coded the UI that will let the users add the to do item because that is what we are going to do in this application but
112

112

00:12:45.090  -->  00:12:49.370
for now we want to be able to test the
UI with some sample data so really
113

113

00:12:49.370  -->  00:12:51.920
whatever whatever you put in here
doesn't really matter it's just
114

114

00:12:51.920  -->  00:12:57.110
their for testing purposes so we can now
populate our list view so will start work on
115

115

00:12:57.110  -->  00:12:58.680
doing just that in the next video
