WEBVTT
1
1

00:00:05.540  -->  00:00:08.790
In the previous video,
we started out in a classes discussion.
2

2

00:00:08.790  -->  00:00:10.810
So we've created the gearbox class.
3

3

00:00:10.810  -->  00:00:15.100
So let's now go back to the main class in
our main method and actually add some code
4

4

00:00:15.100  -->  00:00:18.620
to actually test some of this
functionality that we've actually added.
5

5

00:00:18.620  -->  00:00:21.490
So now that we've actually made those
changes, we need to delete some of
6

6

00:00:21.490  -->  00:00:23.950
the way that we've done things
in the past and change that.
7

7

00:00:23.950  -->  00:00:24.920
So I'm gonna delete that.
8

8

00:00:24.920  -->  00:00:28.230
And we're gonna come up now and
start entering some code.
9

9

00:00:28.230  -->  00:00:29.760
So the first line's still correct.
10

10

00:00:29.760  -->  00:00:34.230
We're going to actually add a set of
Gearbox, or a Gearbox to a mcLaren car.
11

11

00:00:34.230  -->  00:00:39.050
So it's got 6 gears,
let's now add 3 to it, so we type mcLaren.
12

12

00:00:40.500  -->  00:00:41.120
Do a addGear.
13

13

00:00:41.120  -->  00:00:44.270
And the first one's gonna be 1,
the ratio's gonna be 5.3.
14

14

00:00:47.130  -->  00:00:50.370
Second one, 10.6.
15

15

00:00:50.370  -->  00:00:55.850
And the third one,
we're going to make that 15.9.
16

16

00:00:55.850  -->  00:01:01.830
Let's now operate the clutch, so
we'll do mcLaren Laren.operateClutch.
17

17

00:01:01.830  -->  00:01:02.670
True.
18

18

00:01:02.670  -->  00:01:04.860
Like so, otherwise we can change gears and
19

19

00:01:04.860  -->  00:01:08.010
get a print out of how fast
the wheels are actually spinning.
20

20

00:01:08.010  -->  00:01:10.880
So we'll do that first, then we're gonna
do an example of not changing the gears to
21

21

00:01:10.880  -->  00:01:12.820
see what happens,
to make sure the code's working.
22

22

00:01:12.820  -->  00:01:14.750
So we'll change the gears now
that we've operated the clutch.
23

23

00:01:14.750  -->  00:01:18.930
So mcLaren.changegear1.
24

24

00:01:18.930  -->  00:01:24.480
So change into first gear but now if
we actually set the clutch to false so
25

25

00:01:24.480  -->  00:01:28.010
mcLaren.change gear sorry
operate clutch I should say.
26

26

00:01:28.010  -->  00:01:35.520
Operate clutch to false.
27

27

00:01:35.520  -->  00:01:38.080
I'm trying to change into second gear.
28

28

00:01:38.080  -->  00:01:41.580
What we'll do, after the operate clutch,
we'll actually print out,
29

29

00:01:45.160  -->  00:01:51.250
WheelSpeed(1000), 1000 revs, and
then we'll do that afterwards as well,
30

30

00:01:51.250  -->  00:01:55.080
after we've changed the gear to second,
at 3000.
31

31

00:01:55.080  -->  00:01:57.530
We'll then set the, well actually
let's try running that first, and
32

32

00:01:57.530  -->  00:01:58.720
see that it's actually working.
33

33

00:02:02.360  -->  00:02:04.680
As you can see, we've gear one selected.
34

34

00:02:04.680  -->  00:02:07.580
If then you have 5,300,
as the rules state, and
35

35

00:02:07.580  -->  00:02:11.060
of course the calculation there
is 1,000 times the ratio.
36

36

00:02:11.060  -->  00:02:13.380
1,000 times the 5.3 is 5,300.
37

37

00:02:13.380  -->  00:02:16.320
We are going to grind and that's because
we weren't operating the clutch.
38

38

00:02:16.320  -->  00:02:17.750
We set that to false and
39

39

00:02:17.750  -->  00:02:21.610
therefore the actual wheels, the wheel
speed is actually zero at that point.
40

40

00:02:21.610  -->  00:02:28.390
So we've actually changed that again
to McLaren.operateClutch to true again.
41

41

00:02:28.390  -->  00:02:33.300
Car into third gear, third part so,
42

42

00:02:33.300  -->  00:02:38.380
and McLaren.operateClutch false.
43

43

00:02:38.380  -->  00:02:45.860
And we'll do a printout of the new
speed again mcLaren.wheelSpeed(6000).
44

44

00:02:45.860  -->  00:02:47.660
If we run that, so still up here.
45

45

00:02:49.850  -->  00:02:52.770
Again you can see Gear 3 was
actually selected successfully, and
46

46

00:02:52.770  -->  00:02:56.380
operating clutch is false, but we haven't
actually tried to change the gear, so
47

47

00:02:56.380  -->  00:02:58.120
therefore the speed is still correct.
48

48

00:02:58.120  -->  00:03:03.200
It's just now 95,400,
which is 6,000 times 15.9.
49

49

00:03:03.200  -->  00:03:06.510
So basically as you can see there,
we added gears to our gearbox.
50

50

00:03:06.510  -->  00:03:07.450
We can change the gear,
51

51

00:03:07.450  -->  00:03:09.890
we can get a printout of how
fast the wheel is spinning.
52

52

00:03:09.890  -->  00:03:12.730
And we forgot to operate
the clutch when changing gears,
53

53

00:03:12.730  -->  00:03:14.680
it'll either grind the gears, or
54

54

00:03:14.680  -->  00:03:17.800
cause the engine to scream when it hits
the red line and bounces off the limiter.
55

55

00:03:17.800  -->  00:03:21.000
Now notice that we didn't have any
reference now to the Gear class
56

56

00:03:21.000  -->  00:03:21.900
in order to drive the car,
57

57

00:03:21.900  -->  00:03:26.310
and that's because the Gear class is
local to that Gearbox class itself now.
58

58

00:03:26.310  -->  00:03:27.380
Actually in either class.
59

59

00:03:27.380  -->  00:03:31.720
So really, the addGear calls
a part of using the Gearbox.
60

60

00:03:31.720  -->  00:03:36.340
So if you go back to our Gearbox class
again, back up to the constructor,
61

61

00:03:36.340  -->  00:03:41.460
you can see there that really,
the addGear calls, here, calls to that.
62

62

00:03:41.460  -->  00:03:44.760
They're really part of building
the gearbox and not actually using it.
63

63

00:03:44.760  -->  00:03:48.470
So therefore, you could consider that it'd
be better to put them in the constructor
64

64

00:03:48.470  -->  00:03:49.990
of our GearBox class.
65

65

00:03:49.990  -->  00:03:52.100
Rather than actually having
them as separate calls,
66

66

00:03:52.100  -->  00:03:53.110
which they actually are now.
67

67

00:03:53.110  -->  00:03:54.200
When we've actually added them here.
68

68

00:03:55.960  -->  00:03:57.070
So let's actually go ahead and do that.
69

69

00:03:57.070  -->  00:03:59.150
So what we're gonna do is change that.
70

70

00:03:59.150  -->  00:04:03.990
Some code here, for(int i=0; i<maxgears;
71

71

00:04:03.990  -->  00:04:10.450
i++)<="" div=""></maxgears;> + addGear(i,
72

72

00:04:10.450  -->  00:04:15.730
i * 5.3),
machine ratio's the same for all.
73

73

00:04:15.730  -->  00:04:18.130
That's now actually adding
individual gears to the gearbox.
74

74

00:04:18.130  -->  00:04:21.510
Once we've done that, we can of course
then remove the calls to addGear in main,
75

75

00:04:21.510  -->  00:04:23.510
cuz it's no longer
appropriate to have those.
76

76

00:04:23.510  -->  00:04:24.650
So I'm gonna delete those there now.
77

77

00:04:24.650  -->  00:04:27.350
And of course we can run it,
and it should still work.
78

78

00:04:27.350  -->  00:04:28.990
And as you can see,
it's still actually working.
79

79

00:04:28.990  -->  00:04:33.190
So, as you can see going our example of
actually adding the gear class, private
80

80

00:04:33.190  -->  00:04:37.410
party, the inner class, it really can
be a good way to improve encapsulation.
81

81

00:04:37.410  -->  00:04:41.230
So, objects only know about other
objects that they need to know about.
82

82

00:04:41.230  -->  00:04:45.840
So, in this particular example, nothing
apart from the gearbox needs to have any
83

83

00:04:45.840  -->  00:04:48.970
details about the actual gear,
so we hide the gear class
84

84

00:04:48.970  -->  00:04:52.810
completely by making it a private
in-class of the gear class.
85

85

00:04:52.810  -->  00:04:55.630
So, you're not accessing
the gear class at all
86

86

00:04:55.630  -->  00:04:58.230
in anything other than
the actual gear class itself.
87

87

00:04:58.230  -->  00:05:00.880
That's really a great way to
encapsulate that functionality and
88

88

00:05:00.880  -->  00:05:02.740
to restrict other people
from accessing it.
89

89

00:05:02.740  -->  00:05:05.300
Now, obviously if we were
writing a stuck control program,
90

90

00:05:05.300  -->  00:05:07.690
then the program would have to have
some knowledge of the different gears so
91

91

00:05:07.690  -->  00:05:11.270
they could be ordered or request sent to
a manufacturer to make them for example.
92

92

00:05:11.270  -->  00:05:14.100
So you really need to decide how your
programs should be designed to work
93

93

00:05:14.100  -->  00:05:15.750
doing that or figuring out how to do that,
94

94

00:05:15.750  -->  00:05:18.630
that's really the great skill of
object orientated programming.
95

95

00:05:18.630  -->  00:05:19.590
So that's inner classes.
96

96

00:05:19.590  -->  00:05:21.810
But now there's two special
cases of inner classes.
97

97

00:05:21.810  -->  00:05:24.780
And that's local classes and
anonymous classes.
98

98

00:05:24.780  -->  00:05:28.950
So, local classes are declared
inside a block, such as a method or
99

99

00:05:28.950  -->  00:05:31.980
an if statement, and
their scope is restricted
100

100

00:05:31.980  -->  00:05:35.310
completely to that particular block,
so I like anonymous classes,
101

101

00:05:35.310  -->  00:05:38.070
which can be very useful and
we're going to be seeing them shortly.
102

102

00:05:38.070  -->  00:05:40.200
These local classes are used less often.
103

103

00:05:40.200  -->  00:05:44.340
Theoretically, you could argue that
they increase encapsulation because
104

104

00:05:44.340  -->  00:05:47.000
they're already declared within
the block that uses them, but
105

105

00:05:47.000  -->  00:05:50.060
in practice, you, probably not often
that you'll need to or wanna use one.
106

106

00:05:50.060  -->  00:05:51.940
But let's actually show
an example of this.
107

107

00:05:51.940  -->  00:05:56.270
So one example that might be useful is as
a comparator, when trying to sort objects.
108

108

00:05:56.270  -->  00:05:59.170
To demonstrate, what I'm gonna do
is create our own button class.
109

109

00:05:59.170  -->  00:06:00.710
I'm gonna attach a listener to it, so
110

110

00:06:00.710  -->  00:06:02.730
our code will execute when
the button is clicked.
111

111

00:06:02.730  -->  00:06:08.570
Now we go ahead and create a new class and
then we call that button.
112

112

00:06:08.570  -->  00:06:12.770
I'll just close down the run window for
now, and
113

113

00:06:12.770  -->  00:06:16.480
we'll create string field called title.
114

114

00:06:17.830  -->  00:06:23.280
Then private OnClickListener
onClickListener.
115

115

00:06:23.280  -->  00:06:25.330
And we'll fix that error in a minute,
116

116

00:06:25.330  -->  00:06:28.190
we'll create that class, and
we'll actually add a constructor.
117

117

00:06:29.380  -->  00:06:32.610
Constructor be just for the title,
and we'll also add a getter.
118

118

00:06:32.610  -->  00:06:37.370
And the getter is just going to be for
the title as well.
119

119

00:06:37.370  -->  00:06:40.810
Okay, then we wanna add a function
to set our on click listener, and
120

120

00:06:40.810  -->  00:06:48.280
also one to handle the click, so we'll
do public, void, set on click listener.
121

121

00:06:58.020  -->  00:06:59.320
On click listener, on click listener, and
122

122

00:06:59.320  -->  00:07:00.790
it's gonna be this dot on click
listener equals on click listener.
123

123

00:07:02.310  -->  00:07:04.880
Then we wanna do public void onClick.
124

124

00:07:04.880  -->  00:07:10.030
this.OnClickListener.onClick.
125

125

00:07:10.030  -->  00:07:11.910
this.title.
126

126

00:07:11.910  -->  00:07:14.010
So, the buttons.
127

127

00:07:14.010  -->  00:07:17.310
Just gonna sit on click listen to method
that I just created that's used to assign
128

128

00:07:17.310  -->  00:07:18.940
an object to the button.
129

129

00:07:18.940  -->  00:07:20.300
In order we have to handle those clicks.
130

130

00:07:20.300  -->  00:07:22.920
So what we're gonna do is we're gonna
create an interface for that so,
131

131

00:07:22.920  -->  00:07:23.970
you can add that here.
132

132

00:07:23.970  -->  00:07:32.100
Public interface unclick listener.
133

133

00:07:32.100  -->  00:07:37.780
And public void unclick and
passing the parameter string.
134

134

00:07:37.780  -->  00:07:38.930
That now fixes that all up, so
135

135

00:07:38.930  -->  00:07:41.230
we can see now we've implemented
a setOnClickListener,
136

136

00:07:41.230  -->  00:07:43.980
which is passed the parameter
of the OnClickListener itself.
137

137

00:07:43.980  -->  00:07:46.710
And we set that field that
we've defined up here
138

138

00:07:46.710  -->  00:07:48.370
to be equal to the value
that's passed to it.
139

139

00:07:48.370  -->  00:07:49.900
And likewise in clicking,
140

140

00:07:49.900  -->  00:07:52.540
what we're doing is we're passing
on the fact there's been a click,
141

141

00:07:52.540  -->  00:07:56.290
which is using the OnClickListener field
Calling the OnClick method itself.
142

142

00:07:56.290  -->  00:07:59.410
So to see how that works,
let's go back to our main method.
143

143

00:07:59.410  -->  00:08:01.250
And we'll comment this out,
cuz we don't need that for now.
144

144

00:08:01.250  -->  00:08:05.570
And what we'll do is we'll
actually add some code.
145

145

00:08:05.570  -->  00:08:07.540
We need a scalar first.
146

146

00:08:07.540  -->  00:08:12.440
And I've got the static up here,
private static
147

147

00:08:12.440  -->  00:08:17.450
scanner, scanner equals new scanner.
148

148

00:08:20.710  -->  00:08:21.530
The systems button.
149

149

00:08:23.260  -->  00:08:29.580
There's also credit button
private static button,
150

150

00:08:29.580  -->  00:08:33.790
button print, equals new button.
151

151

00:08:33.790  -->  00:08:37.830
Print, set that import, so at this point
we can now create a local class that
152

152

00:08:37.830  -->  00:08:41.930
implements that on click listener
interface, and assign an instance of it to
153

153

00:08:41.930  -->  00:08:45.750
our button, and how we will do that
is we'll do that in our main method.
154

154

00:08:45.750  -->  00:08:49.540
So I'm gonna delete this code now so
it clears up a bit of screen space, so
155

155

00:08:49.540  -->  00:08:53.760
we'll do class, and notice how I'm typing
this within the method main class.
156

156

00:08:53.760  -->  00:09:01.680
ClickListener implements OnClickListener,
157

157

00:09:01.680  -->  00:09:06.590
public ClickListener,
this is our constructor.
158

158

00:09:06.590  -->  00:09:09.490
We could have actually used generic,
but I'll just type that out now.
159

159

00:09:10.860  -->  00:09:13.080
We'll say, I've been attached.
160

160

00:09:13.080  -->  00:09:15.030
When the constructor is actually called,
161

161

00:09:15.030  -->  00:09:18.430
that's the point where the list
has been connected to the button.
162

162

00:09:18.430  -->  00:09:20.450
And the onClick,
we're gonna write that function.
163

163

00:09:20.450  -->  00:09:24.690
Even if we wanted to, we could do
an override, or implement I should say.
164

164

00:09:24.690  -->  00:09:28.940
Click on onClick, and we'll change
that to actually show the message.
165

165

00:09:28.940  -->  00:09:31.720
We'll say title + was clicked.
166

166

00:09:34.000  -->  00:09:37.560
So that's how a local class that we've
actually defined within the method.
167

167

00:09:37.560  -->  00:09:42.240
We then need to attach it to our button
field, which was initialized up here.
168

168

00:09:42.240  -->  00:09:46.040
So we're doing button,
print .set on ClickListener.
169

169

00:09:46.040  -->  00:09:47.670
New ClickListener.
170

170

00:09:48.680  -->  00:09:52.330
So we've created that class and at this
point, normally what would happen is,
171

171

00:09:52.330  -->  00:09:55.010
assuming that we're using some
sort of graphic framework
172

172

00:09:55.010  -->  00:09:57.730
that will actually automatically
respond when a button is clicked and
173

173

00:09:57.730  -->  00:10:01.220
that the unclick method would
actually be invoked for us.
174

174

00:10:01.220  -->  00:10:03.460
But because we're not using
a graphics framework,
175

175

00:10:03.460  -->  00:10:05.950
we're gonna simulate that listen
method from the keyboard.
176

176

00:10:05.950  -->  00:10:07.740
So let's actually create
a method to do that.
177

177

00:10:07.740  -->  00:10:12.310
It will be private, static, void listen.
178

178

00:10:15.790  -->  00:10:18.000
Boolean quit equals false.
179

179

00:10:18.000  -->  00:10:20.170
You've seen character
symbols these before.
180

180

00:10:20.170  -->  00:10:20.950
While not quit.
181

181

00:10:22.630  -->  00:10:29.740
Int choice equals scanner.nextInt
Scanner dot next line.
182

182

00:10:31.960  -->  00:10:34.840
Switch choice.
183

183

00:10:36.150  -->  00:10:37.420
We're just gonna have two simple options.
184

184

00:10:37.420  -->  00:10:40.130
Option zero is gonna enable us to quit.
185

185

00:10:40.130  -->  00:10:42.450
So, quit equals true, we case it.
186

186

00:10:42.450  -->  00:10:43.120
Case zero.
187

187

00:10:44.650  -->  00:10:48.050
And then we do a break, like so,
that should have been there.
188

188

00:10:48.050  -->  00:10:51.210
And case one is going to
simulate the actual button print.
189

189

00:10:51.210  -->  00:10:56.080
So button print dot unclick, and then
what we'll do then is add the code here,
190

190

00:10:56.080  -->  00:10:58.140
to actually call this function to the top.
191

191

00:10:58.140  -->  00:11:01.180
This one up here is actually
going to call the method.
192

192

00:11:01.180  -->  00:11:02.080
So now if we run this.
193

193

00:11:05.480  -->  00:11:09.520
I've been attached, which is the call from
the constructor within the class listener.
194

194

00:11:09.520  -->  00:11:11.400
And first you type in 1.
195

195

00:11:11.400  -->  00:11:14.340
Print was clicked.
196

196

00:11:14.340  -->  00:11:18.180
And that's obviously at that point using
the OnClick method, which has been
197

197

00:11:18.180  -->  00:11:22.400
implemented from the interface, and
it's actually been executed each time.
198

198

00:11:22.400  -->  00:11:24.630
The main thing to notice here,
is with the local class,
199

199

00:11:24.630  -->  00:11:26.010
how it's actually been defined.
200

200

00:11:26.010  -->  00:11:28.320
Is applicable just for that block only.
201

201

00:11:28.320  -->  00:11:31.170
Of course we can enter 0
to quit out of our program.
202

202

00:11:31.170  -->  00:11:34.610
So this particular method using a local
class could probably be pretty useful if
203

203

00:11:34.610  -->  00:11:37.930
you want to assign exactly the same
object, say to several buttons,
204

204

00:11:37.930  -->  00:11:40.580
if you had several buttons on the screen
at the same time, for example.
205

205

00:11:40.580  -->  00:11:41.840
The class is not used anywhere, so
206

206

00:11:41.840  -->  00:11:44.490
making it local in this
particular scenario makes sense.
207

207

00:11:44.490  -->  00:11:47.710
Cuz we're not actually using this in
a shared environment or anywhere else,
208

208

00:11:47.710  -->  00:11:51.490
implementing it as a local class within
this method does actually make sense.
209

209

00:11:51.490  -->  00:11:53.520
So, let's move on now to
our anonymous classes.
210

210

00:11:53.520  -->  00:11:56.940
So, an anonymous class is also
a local class, but it's got no name.
211

211

00:11:56.940  -->  00:11:59.570
They have to be declared and
instantiated at the same time,
212

212

00:11:59.570  -->  00:12:00.960
because they haven't got a name.
213

213

00:12:00.960  -->  00:12:03.430
And I've used what a local
class has required only once.
214

214

00:12:03.430  -->  00:12:07.940
Now this might sound like it's of even
less use than the local class but
215

215

00:12:07.940  -->  00:12:11.930
in fact they're very common for touching
event handlers to use in an interface.
216

216

00:12:11.930  -->  00:12:14.040
For example if you're
programming Android apps.
217

217

00:12:14.040  -->  00:12:16.880
I do use these a lot on my Android
course just out of interest.
218

218

00:12:16.880  -->  00:12:17.560
That's quite likely,
219

219

00:12:17.560  -->  00:12:20.920
as if we do have several buttons that each
would require a different on-click method.
220

220

00:12:20.920  -->  00:12:23.640
So using a local class might
not be the better solution.
221

221

00:12:23.640  -->  00:12:24.870
In other words if you got four or
222

222

00:12:24.870  -->  00:12:28.060
five buttons on the screen,
chances are you don't want the exact same
223

223

00:12:28.060  -->  00:12:30.930
functionality to be called each
time that button is clicked.
224

224

00:12:30.930  -->  00:12:33.630
For example one button is
to quit out of the program,
225

225

00:12:33.630  -->  00:12:35.420
another one might be to print something.
226

226

00:12:35.420  -->  00:12:38.740
For the code to actually execute, it might
be different depending on the button.
227

227

00:12:38.740  -->  00:12:42.660
So, this is where an anonymous class can
come into use or can become quite handy,
228

228

00:12:42.660  -->  00:12:45.550
cuz what we could do in that example is,
rather than define a class for
229

229

00:12:45.550  -->  00:12:49.200
each button, we could use an anonymous
inner class to declare an object and
230

230

00:12:49.200  -->  00:12:50.540
assign it to a button.
231

231

00:12:50.540  -->  00:12:52.840
In the one expression, so
let's see how that would work.
232

232

00:12:52.840  -->  00:12:56.070
So I'm gonna comment this out, the local
class, let's look at the syntax for
233

233

00:12:56.070  -->  00:12:58.770
an anonymous class,
we'll do that by putting but
234

234

00:12:58.770  -->  00:13:03.930
print, print dot set on click listener,
and again that's very similar to the line
235

235

00:13:03.930  -->  00:13:09.010
above that's commented out, but what we're
doing now is we put new OnClickListener.
236

236

00:13:09.010  -->  00:13:10.520
Now, as I'm starting to type,
you'll notice,
237

237

00:13:10.520  -->  00:13:12.540
IntelliJ actually does this for us.
238

238

00:13:12.540  -->  00:13:15.580
It actually comes up with the braces and
the three dots, and
239

239

00:13:15.580  -->  00:13:16.820
what that actually means is,
240

240

00:13:16.820  -->  00:13:20.380
if you press return here now, it's gonna
create that anonymous class for us.
241

241

00:13:20.380  -->  00:13:23.340
So, I'll press enter, and
you notice what it did?
242

242

00:13:23.340  -->  00:13:25.640
It actually created that for
us automatically.
243

243

00:13:25.640  -->  00:13:27.410
So, it created the OnClickListener.
244

244

00:13:27.410  -->  00:13:29.460
It also created the override, and
245

245

00:13:29.460  -->  00:13:31.670
it actually created the on
click method itself,
246

246

00:13:31.670  -->  00:13:36.220
which of course we have to implement for
this on click listener interface, and
247

247

00:13:36.220  -->  00:13:40.860
from there we can actually
type title was clicked.
248

248

00:13:40.860  -->  00:13:44.850
So in all other aspects it'll
work the same if we run this.
249

249

00:13:48.790  -->  00:13:52.120
Pressing one there, and
zero I can still exit the program.
250

250

00:13:52.120  -->  00:13:53.070
So the main syntax,
251

251

00:13:53.070  -->  00:13:56.670
the main difference rather,
was we're not creating a separate class.
252

252

00:13:56.670  -->  00:14:00.300
In this case, in the first case of
the local class we're created one.
253

253

00:14:00.300  -->  00:14:03.480
We used the name Click Listener,
and that's a local class, but
254

254

00:14:03.480  -->  00:14:05.040
this one here is a second example.
255

255

00:14:05.040  -->  00:14:06.530
That's an anonymous class and
256

256

00:14:06.530  -->  00:14:10.480
that's because we used a new one click
list w button dot on click listener.
257

257

00:14:10.480  -->  00:14:13.520
Which was added by Intelli j and
there's no name there because it's been
258

258

00:14:13.520  -->  00:14:15.980
implemented there and
then within the brackets.
259

259

00:14:15.980  -->  00:14:17.700
So that's what an anonymous class is for.
260

260

00:14:17.700  -->  00:14:21.630
And you can say that we overrode the on
click method which we needed to do in
261

261

00:14:21.630  -->  00:14:26.950
order to actually ensure that we actually
implemented the interface correctly.
262

262

00:14:26.950  -->  00:14:28.370
And it actually does that quite nicely.
263

263

00:14:28.370  -->  00:14:31.840
So the new objects got no name, and
it's declared in the expression passed as
264

264

00:14:31.840  -->  00:14:34.580
a parameter,
to the button set unclick list or method.
265

265

00:14:34.580  -->  00:14:37.950
So you've now seen the various
types of inner classes.
266

266

00:14:37.950  -->  00:14:40.700
I'm gonna end this video here, and in
the next video, it's time for a challenge.
267

267

00:14:40.700  -->  00:14:44.360
We're going to test your understanding of
this so, I'll see you in the next video.
