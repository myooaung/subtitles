1
1

00:00:05,500  -->  00:00:08,130
Okay, it's challenge time for arrays.
2

2

00:00:08,130  -->  00:00:10,610
This is the challenge video for arrays.
3

3

00:00:10,610  -->  00:00:13,140
I'm gonna type out what
the challenge is now.
4

4

00:00:27,400  -->  00:00:31,850
Okay, so the challenge is to
create a program using arrays, and
5

5

00:00:31,850  -->  00:00:35,650
it should sort a list of
integers in descending order.
6

6

00:00:35,650  -->  00:00:38,590
Now, descending order is
highest value to lowest.
7

7

00:00:38,590  -->  00:00:42,210
In other words, if the array
was five elements in length and
8

8

00:00:42,210  -->  00:00:47,000
had the values of 106, 26, 81,
5 and 15, then your program should
9

9

00:00:47,000  -->  00:00:51,780
ultimately have the array sorted so
that element position 0 would be 106,
10

10

00:00:51,780  -->  00:00:57,390
position 1 would be 81, position 2 would
be 26, 3 15, and position 4 number 5.
11

11

00:00:57,390  -->  00:00:58,760
In other words, highest to lowest.
12

12

00:00:58,760  -->  00:01:02,610
Now, in terms of the numbers that you're
gonna be sorting, set up the program so
13

13

00:01:02,610  -->  00:01:05,020
that these numbers are read
in from the keyboard.
14

14

00:01:05,020  -->  00:01:07,600
I showed you in the last
video how to do that.
15

15

00:01:07,600  -->  00:01:11,190
The methods you actually wanna implement
are getIntegers, printArray, and
16

16

00:01:11,190  -->  00:01:12,120
sortIntegers.
17

17

00:01:12,120  -->  00:01:16,000
Get integers is gonna return the array of
the entered integers from the keyboard
18

18

00:01:16,000  -->  00:01:19,340
that have been typed in, print array will
print out the contents of the array,
19

19

00:01:19,340  -->  00:01:22,770
and the sort integers method
should sort the array and
20

20

00:01:22,770  -->  00:01:25,320
return a new array containing
the sorted numbers.
21

21

00:01:25,320  -->  00:01:28,940
What you'll have to do apart from figuring
out how to actually sort the array,
22

22

00:01:28,940  -->  00:01:33,220
you'll have to figure out how to copy
the array elements from the past array and
23

23

00:01:33,220  -->  00:01:36,680
create a new array that you
can actually work on and sort,
24

24

00:01:36,680  -->  00:01:39,550
and then you gotta return
that new sorted array.
25

25

00:01:39,550  -->  00:01:43,610
It's time now to pause the video, go away,
and actually try out this challenge.
26

26

00:01:43,610  -->  00:01:45,890
When you're stuck or
when you're finished and
27

27

00:01:45,890  -->  00:01:48,370
you're ready to check my version
of the solution, come back,
28

28

00:01:48,370  -->  00:01:53,600
and I'll show you how to do it, so pause
the video now and I'll see you shortly.
29

29

00:01:53,600  -->  00:01:54,460
Okay, so how did you get on.
30

30

00:01:54,460  -->  00:01:55,490
Did you figure it out?
31

31

00:01:55,490  -->  00:01:58,280
Let's go through and create our solutions.
32

32

00:01:58,280  -->  00:02:02,100
The first thing we want to do
is create a private field so
33

33

00:02:02,100  -->  00:02:07,100
that we can actually import some
data from the console, the keyboard.
34

34

00:02:07,100  -->  00:02:09,540
We're gonna create our Scanner
class again, our field.
35

35

00:02:14,390  -->  00:02:20,280
It's System.in again, and
I'm going to actually start down here.
36

36

00:02:20,280  -->  00:02:21,040
Leave that in there, so
37

37

00:02:21,040  -->  00:02:23,960
we can refer back to it and
make sure we haven't forgotten anything.
38

38

00:02:23,960  -->  00:02:25,070
Create our integer array.
39

39

00:02:25,070  -->  00:02:30,510
We're gonna call it
myIntegers = get integers.
40

40

00:02:30,510  -->  00:02:32,780
Let's start with, say, five numbers.
41

41

00:02:32,780  -->  00:02:34,310
We can always change that later.
42

42

00:02:34,310  -->  00:02:36,080
Pick five numbers that
we're going to sort.
43

43

00:02:37,590  -->  00:02:42,090
What we need to do is,
create our getIntegers method.
44

44

00:02:42,090  -->  00:02:44,390
You saw that in the last video,
but we're gonna create that again.
45

45

00:02:44,390  -->  00:02:49,120
Public static int, we wanna return
the array, getIntegers, and
46

46

00:02:49,120  -->  00:02:53,020
int capacity,
that's gonna be the size of our array.
47

47

00:02:53,020  -->  00:02:57,920
In this case, it's going to be five, and
48

48

00:02:57,920  -->  00:03:02,680
so define our array, new int capacity,
49

49

00:03:02,680  -->  00:03:07,180
and we'll type in a message, Enter.
50

50

00:03:14,290  -->  00:03:17,550
Put our \r there again
to go to the new line.
51

51

00:03:17,550  -->  00:03:22,830
Then we're going to create our for
52

52

00:03:22,830  -->  00:03:28,660
loop for i = 0, i < array.length,
53

53

00:03:28,660  -->  00:03:35,050
i++ Array[i] = scanner.nextInt.
54

54

00:03:35,050  -->  00:03:39,370
Lastly, we wanna return our array.
55

55

00:03:39,370  -->  00:03:40,470
That's our getIntegers.
56

56

00:03:40,470  -->  00:03:44,570
Nothing particularly complex there cuz
you saw that in the previous video.
57

57

00:03:44,570  -->  00:03:48,750
Well, next we'll create our print array,
and that's gonna be also very simple.
58

58

00:03:48,750  -->  00:03:53,950
It's going to accept an array and
just print out the contents,
59

59

00:03:53,950  -->  00:03:59,370
so we're gonna type public static
void printarray, int array.
60

60

00:03:59,370  -->  00:04:02,180
Then we're gonna put a four loop.
61

61

00:04:02,180  -->  00:04:10,670
For int i=0, i<array.length,
62

62

00:04:10,670  -->  00:04:15,860
i++ and we'll put,
63

63

00:04:15,860  -->  00:04:23,260
Element contents array [i].
64

64

00:04:23,260  -->  00:04:24,540
Pretty simple, as you can see there.
65

65

00:04:24,540  -->  00:04:28,360
Nothing particularly
difficult about that at all.
66

66

00:04:28,360  -->  00:04:33,360
That's the first two methods, and the,
the third one, that is the new one.
67

67

00:04:33,360  -->  00:04:36,670
This is the sortIntegers method
that's going to sort the array and
68

68

00:04:36,670  -->  00:04:40,820
return a new array containing the sorted
numbers, but we've got to figure out a way
69

69

00:04:40,820  -->  00:04:44,320
how to copy the array elements from
the past array into a new array, and
70

70

00:04:44,320  -->  00:04:46,480
sort them and return the new sorted array.
71

71

00:04:46,480  -->  00:04:49,900
In other words, we need to copy
the contents of that array into a new one.
72

72

00:04:49,900  -->  00:04:52,540
We haven't actually seen how to do that
yet, so how did you get on with that?
73

73

00:04:52,540  -->  00:04:54,430
Did you ever think about how to do that?
74

74

00:04:54,430  -->  00:04:57,340
I'll just come up and
show you my version of the code,
75

75

00:04:57,340  -->  00:05:01,440
and what we'll do is
we'll put public static.
76

76

00:05:02,830  -->  00:05:07,420
It's gonna be an int because ultimately
you're gonna be returning that array,
77

77

00:05:07,420  -->  00:05:10,730
sortIntegers, but
it's also going to be past the array,
78

78

00:05:10,730  -->  00:05:13,960
and the array is the unsorted
numbers from the keyboard,
79

79

00:05:13,960  -->  00:05:17,160
essentially that have been
typed in from the keyboard.
80

80

00:05:17,160  -->  00:05:21,270
There's a number of ways of actually doing
this, so one of the first things we need
81

81

00:05:21,270  -->  00:05:24,920
to do is, we're gonna put int,
create a variable called sortedArray.
82

82

00:05:24,920  -->  00:05:32,230
What we're gonna do is, we're gonna set
it up and put it = new int array.length.
83

83

00:05:32,230  -->  00:05:36,900
We're creating an array that is exactly
the same size as the array that has been
84

84

00:05:36,900  -->  00:05:37,750
passed to us.
85

85

00:05:37,750  -->  00:05:44,650
At the moment, that hasn't got any
values in it, so it's going to use a for
86

86

00:05:44,650  -->  00:05:49,920
loop, for(int i = 0; i
< array.length; i++).
87

87

00:05:49,920  -->  00:05:57,420
Then we can just put sortedArray[i]
= array[i], and that's it.
88

88

00:05:57,420  -->  00:06:02,370
That's creating a copy of the contents
that are in the array that's passed to us
89

89

00:06:02,370  -->  00:06:04,940
into our new array that we've created.
90

90

00:06:04,940  -->  00:06:09,780
Again, the first line creates the array
called sortedArray of type integer, and
91

91

00:06:09,780  -->  00:06:13,030
we're setting it to the same
capacity as the array that's been
92

92

00:06:13,030  -->  00:06:14,360
passed to this method.
93

93

00:06:14,360  -->  00:06:18,400
Then we're using a for loop to go through
and retrieve each element out of array[i],
94

94

00:06:18,400  -->  00:06:23,070
and we're actually saving the contents of
array at element i into our sorted array.
95

95

00:06:23,070  -->  00:06:25,540
Consequently, at the end of that for
statement,
96

96

00:06:25,540  -->  00:06:29,680
we've actually got an array that contains
the same values as has been passed to us.
97

97

00:06:29,680  -->  00:06:32,830
The next thing we need to do now is,
this is where the complex part comes in.
98

98

00:06:32,830  -->  00:06:35,850
This is sorting the array,
so what we need to do is,
99

99

00:06:35,850  -->  00:06:38,700
we actually need to create a while loop.
100

100

00:06:38,700  -->  00:06:40,210
Within that, we need to create a for
101

101

00:06:40,210  -->  00:06:42,440
loop, and
I'm gonna tell you why as we go through.
102

102

00:06:42,440  -->  00:06:45,130
First, I'm gonna create
our boolean called flag.
103

103

00:06:47,760  -->  00:06:49,730
Now set that to true, and
104

104

00:06:49,730  -->  00:06:54,060
our while loop is gonna continue
processing until flag is actually false.
105

105

00:06:54,060  -->  00:06:55,870
Now, we also need a temporary variable,
106

106

00:06:55,870  -->  00:06:59,020
which I'll talk to you about
shortly as to why we need that.
107

107

00:06:59,020  -->  00:07:01,650
Let's make a bit more space here for
this method.
108

108

00:07:01,650  -->  00:07:05,400
What we now need to do, again,
is we need to go through the sorted array.
109

109

00:07:05,400  -->  00:07:08,500
We need to figure out a way for
this to be automatically updated so
110

110

00:07:08,500  -->  00:07:12,350
that we end up having the highest values
at the start of the array right through,
111

111

00:07:12,350  -->  00:07:15,870
element by element, to the end of
the array's got the smallest amount.
112

112

00:07:15,870  -->  00:07:17,010
Let’s start off with our while loop.
113

113

00:07:17,010  -->  00:07:21,440
It’s gonna be while(flag).
114

114

00:07:21,440  -->  00:07:24,310
Now, first thing we're gonna
do in the while(flag) is,
115

115

00:07:24,310  -->  00:07:28,100
we're gonna set it to false, and the
reason is, we're gonna have a for loop.
116

116

00:07:28,100  -->  00:07:31,700
If the for
loop hasn't sorted all the numbers,
117

117

00:07:31,700  -->  00:07:35,300
we're going to assign that
back to true again so
118

118

00:07:35,300  -->  00:07:39,960
that the actual while method,
or while loop, continues.
119

119

00:07:39,960  -->  00:07:43,140
By default we're setting it to false,
which means if we don't reset flag,
120

120

00:07:43,140  -->  00:07:46,980
the variable to true, we're gonna
automatically end the while loop.
121

121

00:07:46,980  -->  00:07:49,350
Next comes the code we need to check.
122

122

00:07:49,350  -->  00:07:53,010
We need to actually do a for loop, so
123

123

00:07:53,010  -->  00:07:58,020
for(int i = 0; i<sortedArray
because we did
124

124

00:07:58,020  -->  00:08:04,140
it with sorted array now,
sortedArray.length, i++.
125

125

00:08:04,140  -->  00:08:05,010
Next we're going to do a test.
126

126

00:08:05,010  -->  00:08:13,330
We're going to put,
if (sortedArray(i) < sortedArray(i+1),
127

127

00:08:13,330  -->  00:08:20,160
but the other thing I should have
done here is put a minus one,
128

128

00:08:20,160  -->  00:08:26,070
and again, I'm gonna explain that shortly.
129

129

00:08:26,070  -->  00:08:28,490
We're gonna type temp = sortedArray.
130

130

00:08:28,490  -->  00:08:31,190
I think it's easier if I type in the code,
and
131

131

00:08:31,190  -->  00:08:32,350
then I'm gonna go through and
explain it all.
132

132

00:08:32,350  -->  00:08:39,300
So, sortedArray(i) = sortedArray(i+1),
133

133

00:08:39,300  -->  00:08:45,040
and then sortedArray(i+1) = temp,
134

134

00:08:45,040  -->  00:08:49,890
=temp, and
then we're going to assign flag to true.
135

135

00:08:53,590  -->  00:08:56,690
Okay, the last thing we're gonna do
down here at the end of the while loop,
136

136

00:08:56,690  -->  00:09:01,050
we're going to return our sortedArray.
137

137

00:09:01,050  -->  00:09:04,730
Okay, that's the code, so
let's go through this while loop and
138

138

00:09:04,730  -->  00:09:06,030
then the embedded for loop.
139

139

00:09:06,030  -->  00:09:08,430
The first thing is,
we have a while flag, so
140

140

00:09:08,430  -->  00:09:13,180
we're basically gonna only continue this
loop until a while flag is set to true.
141

141

00:09:13,180  -->  00:09:16,590
Initially, when we first created this
method, or we first go into that while
142

142

00:09:16,590  -->  00:09:20,240
loop for the first time, it's set to true,
so it's gonna execute at least once.
143

143

00:09:20,240  -->  00:09:23,140
Then we immediately set that to false,
and the reason,
144

144

00:09:23,140  -->  00:09:25,910
is we've got to test in here,
and we're only going to
145

145

00:09:25,910  -->  00:09:29,630
try to continue the while loop if we
actually assigned flagged to true.
146

146

00:09:29,630  -->  00:09:33,880
What we're trying to do here is,
we're gonna go through each element of
147

147

00:09:33,880  -->  00:09:36,890
the entire array each time
we go through this pass.
148

148

00:09:36,890  -->  00:09:40,720
One pass at a time, and we're only going
to exit the loop if we've actually sorted
149

149

00:09:40,720  -->  00:09:43,240
all the numbers, and
there's nothing left to sort.
150

150

00:09:43,240  -->  00:09:44,660
How does this actually work?
151

151

00:09:44,660  -->  00:09:47,710
Well, how it works is,
first, with our four loop,
152

152

00:09:47,710  -->  00:09:51,960
we start out always at element zero,
and we're always going to finish.
153

153

00:09:51,960  -->  00:09:56,350
Our ending element is always on less
than the total length of the array, and
154

154

00:09:56,350  -->  00:09:59,210
the reason is, we've got this (i+1) here.
155

155

00:09:59,210  -->  00:10:04,070
What we're testing is, we're saying, if
the sortedArray at element 0 is less than
156

156

00:10:04,070  -->  00:10:06,790
the sorted array at
the next element in number.
157

157

00:10:06,790  -->  00:10:09,330
In this case, if we started on 0,
it would be element 1.
158

158

00:10:09,330  -->  00:10:14,190
What that means is, the number in the next
element position is actually higher than
159

159

00:10:14,190  -->  00:10:17,820
that first element, so
consequently, we need to swap them.
160

160

00:10:17,820  -->  00:10:21,550
What we then do is we actually store
the current value of the sortedArray into
161

161

00:10:21,550  -->  00:10:22,970
a temporary variable.
162

162

00:10:22,970  -->  00:10:25,980
It's there just to actually
store that number temporarily.
163

163

00:10:25,980  -->  00:10:30,660
We then actually move, effectively,
the element that's in this (i+1) position
164

164

00:10:30,660  -->  00:10:33,360
into that area, so
we're actually swapping them, and
165

165

00:10:33,360  -->  00:10:36,160
then we actually assign
the temporary variable back.
166

166

00:10:36,160  -->  00:10:39,510
Really, these three lines of code here,
what we're doing is,
167

167

00:10:39,510  -->  00:10:43,400
we're taking the entry that is at element
position 1, for argument's sake, and
168

168

00:10:43,400  -->  00:10:45,060
swapping it with element position 0.
169

169

00:10:45,060  -->  00:10:47,520
Then what we're doing,
because we've made a change,
170

170

00:10:47,520  -->  00:10:51,090
what that means is, we're not sure that
there's not more changes to be made, so
171

171

00:10:51,090  -->  00:10:53,350
we need to use the while
loop to go through and test,
172

172

00:10:53,350  -->  00:10:57,010
which ultimately will actually go
through this entire for loop again.
173

173

00:10:57,010  -->  00:11:01,820
Looking to see whether any numbers at
a certain position have got high numbers
174

174

00:11:01,820  -->  00:11:04,880
in one element above them,
if that makes sense.
175

175

00:11:04,880  -->  00:11:09,940
Just to make it so this makes a little bit
more sense, let's just presume we've got,
176

176

00:11:09,940  -->  00:11:13,680
say, element 0, and
we'll say that it had the value of 50.
177

177

00:11:13,680  -->  00:11:19,580
Element 1 had the value of 160.
178

178

00:11:19,580  -->  00:11:23,010
Element 2, a value of 40.
179

179

00:11:23,010  -->  00:11:25,610
Let's just say we had
those three elements.
180

180

00:11:25,610  -->  00:11:29,280
Basically, we're going through our loop,
we're starting on position 0, and
181

181

00:11:29,280  -->  00:11:31,530
we're saying if sortedArray[i],
and i is 0.
182

182

00:11:31,530  -->  00:11:35,100
We're saying,
if sortedArray[i], which is 50,
183

183

00:11:35,100  -->  00:11:38,680
is less than sortedArray(i+1),
which is 160.
184

184

00:11:38,680  -->  00:11:44,100
In other words, what we're saying
there is, is 50 less than 160?
185

185

00:11:44,100  -->  00:11:46,100
In that case, that is true.
186

186

00:11:46,100  -->  00:11:49,230
Then what we do is, we're actually
swapping the values around, so,
187

187

00:11:49,230  -->  00:11:52,590
in this case, we're putting temp
= sortedArray[i], again, i is 0.
188

188

00:11:52,590  -->  00:11:57,390
sortedArray[i] = sortedArray(i+1),
and sortedArray(i+1) = temp.
189

189

00:11:57,390  -->  00:12:01,960
What we're basically doing is,
we're going on 60, 50, like so, so
190

190

00:12:01,960  -->  00:12:03,930
we swap those elements around.
191

191

00:12:03,930  -->  00:12:05,280
We're setting that flag to true so
192

192

00:12:05,280  -->  00:12:08,030
that we know that's gonna be going
through at least one more time, and
193

193

00:12:08,030  -->  00:12:10,330
then that actually goes through
the rest of the elements.
194

194

00:12:10,330  -->  00:12:13,910
The second case, i will be set to one,
so it's gonna look at 50.
195

195

00:12:13,910  -->  00:12:17,760
It's gonna say, is 50,
it that less than 40?
196

196

00:12:17,760  -->  00:12:20,390
Cuz 40 is gonna be element 2, (i+1).
197

197

00:12:20,390  -->  00:12:23,920
In that case, that's gonna be false,
so this code doesn't get executed, and
198

198

00:12:23,920  -->  00:12:25,990
that's because we've got them
in the right order already.
199

199

00:12:25,990  -->  00:12:28,650
But, because flag has already
been set true the first time,
200

200

00:12:28,650  -->  00:12:30,430
it's gonna go through and start again.
201

201

00:12:30,430  -->  00:12:33,750
The next time it goes through,
we're assigning flag to false again, and
202

202

00:12:33,750  -->  00:12:36,660
this time, the second time it
goes through, it does this test.
203

203

00:12:36,660  -->  00:12:40,640
It's going to start again at element 0 and
say, element 0 is 160.
204

204

00:12:40,640  -->  00:12:42,730
Is 160 less than 50?
205

205

00:12:42,730  -->  00:12:46,510
Well, this case that's not true anymore,
so this code isn't going to be executed,
206

206

00:12:46,510  -->  00:12:50,050
and likewise for the next test,
that's also not gonna be executed.
207

207

00:12:50,050  -->  00:12:52,570
Flag is gonna continue to be false, and
208

208

00:12:52,570  -->  00:12:55,960
we're gonna exit out of the while loop at
that point and then return to sortedArray.
209

209

00:12:55,960  -->  00:12:57,190
That's how that actually works.
210

210

00:12:57,190  -->  00:12:58,830
That's what that sort is doing.
211

211

00:12:58,830  -->  00:13:01,570
It's just going through one
element at a time in the array and
212

212

00:13:01,570  -->  00:13:04,250
figuring out what needs to change,
so that's basically it.
213

213

00:13:04,250  -->  00:13:09,290
That's our method, our code, to actually
perform this, get this to work.
214

214

00:13:09,290  -->  00:13:14,690
What we now need to do is update our
main method above to process this.
215

215

00:13:14,690  -->  00:13:16,560
What we're going to do is actually,
we've got one higher.
216

216

00:13:16,560  -->  00:13:20,980
At the moment, we've only got the numbers,
so we're gonna print those out after we've
217

217

00:13:20,980  -->  00:13:24,430
sorted them cuz we'll be able to
see on the screen what we've typed.
218

218

00:13:24,430  -->  00:13:28,250
We're going to put int sorted =
219

219

00:13:28,250  -->  00:13:33,350
sortIntegers(myIntegers), like so,
220

220

00:13:33,350  -->  00:13:39,380
and we're going to put printArray(sorted).
221

221

00:13:39,380  -->  00:13:40,780
Let's run that and see what it does.
222

222

00:13:43,660  -->  00:13:44,570
Enter five values.
223

223

00:13:44,570  -->  00:13:47,870
Let's enter the values, we'll do
the values that we had on the screen.
224

224

00:13:50,140  -->  00:13:51,500
I'll actually end that.
225

225

00:13:51,500  -->  00:13:53,280
I'll stop the program, and
we'll actually run it again.
226

226

00:13:55,180  -->  00:13:57,680
Okay, so we're going to enter 50,
which is what we had initially.
227

227

00:13:57,680  -->  00:14:03,640
160, 40, and let's say, 23, 200,
and you can see what's done there.
228

228

00:14:03,640  -->  00:14:05,020
It's actually element 0.
229

229

00:14:05,020  -->  00:14:10,030
The contents is now 200, 160,
50, 40, and 23, so it's actually
230

230

00:14:10,030  -->  00:14:15,180
gone through this loop there multiple
times until it had nothing else to change.
231

231

00:14:15,180  -->  00:14:20,290
It's actually sorted in the right order,
highest values to lowest values.
232

232

00:14:20,290  -->  00:14:24,400
That's what the sortArray method,
the sortIntegers method is actually doing.
233

233

00:14:24,400  -->  00:14:25,840
One last thing I'm gonna show you.
234

234

00:14:25,840  -->  00:14:29,000
We're gonna be talking more
about this in future videos, but
235

235

00:14:29,000  -->  00:14:32,710
the method that I showed you here to
create, actually this line as well,
236

236

00:14:32,710  -->  00:14:35,590
to actually copy an array,
that's one way of doing it.
237

237

00:14:35,590  -->  00:14:40,950
There's actually a number of built-in ways
to do this sort of thing, to copy methods.
238

238

00:14:40,950  -->  00:14:43,580
More and more as you become
more familiar with Java,
239

239

00:14:43,580  -->  00:14:46,850
you'll be wanting to use some of the
features that are built in to Java because
240

240

00:14:46,850  -->  00:14:49,050
it just actually saves you a lot of time.
241

241

00:14:49,050  -->  00:14:52,480
Less code, and you're actually using
code that has been heavily optimized,
242

242

00:14:52,480  -->  00:14:55,110
much faster, and
it's just less code to debug.
243

243

00:14:55,110  -->  00:14:58,850
An alternative method to copy an array,
copy the past array to
244

244

00:14:58,850  -->  00:15:01,280
the sorted array method,
would be to do something like this.
245

245

00:15:01,280  -->  00:15:03,380
I'm gonna comment that bit of code out.
246

246

00:15:03,380  -->  00:15:05,770
Certainly optional, but
it's just for future reference, so
247

247

00:15:05,770  -->  00:15:09,050
I'm gonna put sorted Array =.
248

248

00:15:09,050  -->  00:15:12,130
This time I'm gonna use
a class called arrays,
249

249

00:15:12,130  -->  00:15:15,690
which is built into Java.util,
so you can see there.
250

250

00:15:15,690  -->  00:15:18,120
Arrays., and we can type copy of, and
251

251

00:15:18,120  -->  00:15:23,300
you can see by looking at a lot of these
different methods, they're overwritten.
252

252

00:15:23,300  -->  00:15:25,610
You can booleans, bytes,
characters, doubles, floats,
253

253

00:15:25,610  -->  00:15:26,730
there's lots of them there.
254

254

00:15:26,730  -->  00:15:28,620
We're gonna use the first one, copy of.
255

255

00:15:28,620  -->  00:15:31,480
Copy of, and
all we need to do is pass in the array and
256

256

00:15:33,290  -->  00:15:36,410
then how many characters we
want the new array to be.
257

257

00:15:36,410  -->  00:15:39,630
We're just gonna put array.length, so
258

258

00:15:39,630  -->  00:15:44,890
that one line there affectively takes
a copy of the array with the right length
259

259

00:15:44,890  -->  00:15:49,720
and automatically creates the new
array called sortedArray for us.
260

260

00:15:49,720  -->  00:15:52,890
We're looking a lot more at,
as we go through the course as I said,
261

261

00:15:52,890  -->  00:15:55,470
at different functions
that do things like this
262

262

00:15:55,470  -->  00:15:57,760
that are built into Java
that save you a lot of time.
263

263

00:15:57,760  -->  00:16:03,670
Just to confirm that 50, 160,
264

264

00:16:03,670  -->  00:16:09,310
200, 43, 770, and
you can see it still works.
265

265

00:16:09,310  -->  00:16:12,030
770, 200, 160, 50, and 43.
266

266

00:16:12,030  -->  00:16:13,960
That's the solution to
the array challenge.
267

267

00:16:13,960  -->  00:16:17,570
I hope you enjoyed that, and
I will see you in the next video.
