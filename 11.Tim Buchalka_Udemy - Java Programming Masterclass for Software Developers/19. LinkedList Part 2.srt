1
1

00:00:05,420  -->  00:00:08,090
In the previous video, we actually
talked about the linked list, and
2

2

00:00:08,090  -->  00:00:10,870
in this video what we're gonna do is
actually start using it in our code.
3

3

00:00:10,870  -->  00:00:15,920
So if I open the project that I opened, or
created originally in the previous video,
4

4

00:00:15,920  -->  00:00:20,770
I'm gonna create a new class to leave the
other one as it was, gonna call it demo.
5

5

00:00:20,770  -->  00:00:24,300
And when you're creating a new class in
IntelliJ, if you want a main method so
6

6

00:00:24,300  -->  00:00:27,350
that you can actually execute it,
there's actually a shortcut.
7

7

00:00:27,350  -->  00:00:31,170
You type psvm, which stands for
public static void main.
8

8

00:00:31,170  -->  00:00:34,750
And if you press Tab, before I do that you
can see on the screen it actually tells
9

9

00:00:34,750  -->  00:00:37,350
you what it's going to do
main method declaration.
10

10

00:00:37,350  -->  00:00:39,640
Press Tab now, actually creates that for
11

11

00:00:39,640  -->  00:00:42,800
us cuz it's something that you
wanna do in a lot of Java programs,
12

12

00:00:42,800  -->  00:00:47,470
until it just makes life easier for
you, but allowing you to work.
13

13

00:00:47,470  -->  00:00:50,180
So next, let's create a link list.
14

14

00:00:50,180  -->  00:00:53,210
And what we're gonna do is create a link
list of the places to visit, which is
15

15

00:00:53,210  -->  00:00:56,240
the capital cities in Australia that
we talked about in the previous video.
16

16

00:00:56,240  -->  00:00:57,400
And I'll type in LinkedList.
17

17

00:01:01,650  -->  00:01:07,510
String, gonna call it placesToVisit = new,
it's gonna be LinkedList
18

18

00:01:07,510  -->  00:01:12,630
that was presented there,
that's the default declaration.
19

19

00:01:12,630  -->  00:01:16,540
And it looks very similar to an array
list but of course it's a LinkedList.
20

20

00:01:16,540  -->  00:01:19,130
So adding records is very similar as well.
21

21

00:01:19,130  -->  00:01:24,220
We type in the name of the variable
plus ToVisit.add and we just type
22

22

00:01:24,220  -->  00:01:28,390
in Australia's places, so we've got Sydney
and I'm gonna add a few entries here.
23

23

00:01:28,390  -->  00:01:32,960
I'm going to add,
do a couple different ones.
24

24

00:01:32,960  -->  00:01:39,930
We're gonna do Melbourne, Brisbane,
25

25

00:01:39,930  -->  00:01:44,490
let's do Perth, Canberra.
26

26

00:01:47,010  -->  00:01:50,510
Got Adelaide where I live and
we'll do Darwin as well.
27

27

00:01:50,510  -->  00:01:53,370
So we've got one too many there.
28

28

00:01:53,370  -->  00:01:55,880
So that's enough now.
29

29

00:01:55,880  -->  00:01:58,580
We can actually create a method,
I'm gonna do with such,
30

30

00:01:58,580  -->  00:02:00,900
we create a method that
actually prints them out.
31

31

00:02:00,900  -->  00:02:03,380
I'm gonna type printList(placesToVisit) so
32

32

00:02:03,380  -->  00:02:05,920
I'm gonna pass the parameter
of the LinkedList.
33

33

00:02:05,920  -->  00:02:09,890
So I'm gonna create that method and the
printList is going to accept the parameter
34

34

00:02:09,890  -->  00:02:13,170
of our LinkedList and it's going
to use the concept of an iterator.
35

35

00:02:13,170  -->  00:02:20,660
I'm gonna type in private static void.
36

36

00:02:20,660  -->  00:02:26,910
Void, because we don't need to
return anything, printList.
37

37

00:02:26,910  -->  00:02:33,860
And the value we're going to be accepting
as a parameter is LinkedList<s>.</s>
38

38

00:02:33,860  -->  00:02:38,960
And we'll just call it linkedList,
like so.
39

39

00:02:38,960  -->  00:02:41,690
And what we're gonna do is just
use this concept of an iterator.
40

40

00:02:41,690  -->  00:02:45,810
So an iterator is another way of accessing
and going through all entries that are in
41

41

00:02:45,810  -->  00:02:49,000
a particular array, or
an arrayList, or a linkedList, etc.
42

42

00:02:49,000  -->  00:02:52,010
So it's got a concept, well actually on
top of that, and then we'll go through it.
43

43

00:02:52,010  -->  00:02:56,580
So type Iterator<s>,</s>
44

44

00:02:56,580  -->  00:03:00,970
i= linkedList.iterator.
45

45

00:03:00,970  -->  00:03:05,430
So notice that the .iterator, that method
is actually part of the linkedList,
46

46

00:03:05,430  -->  00:03:07,150
comes with it automatically.
47

47

00:03:07,150  -->  00:03:08,940
We're doing the equivalent to a four leap.
48

48

00:03:08,940  -->  00:03:12,920
Four leap four, i equals zero,
i less than placesToVisit.size.
49

49

00:03:12,920  -->  00:03:15,310
We're doing something like that, but
we're doing it in a different way.
50

50

00:03:15,310  -->  00:03:20,650
So what we're gonna do is
type in while i.hasNext,
51

51

00:03:20,650  -->  00:03:24,190
and we're gonna do System.out.
52

52

00:03:24,190  -->  00:03:28,880
Now visiting, i.next.
53

53

00:03:28,880  -->  00:03:29,740
Then we're gonna do at the end,
54

54

00:03:29,740  -->  00:03:33,230
we'll just print out some equal signs
just to show that we're at the end.
55

55

00:03:33,230  -->  00:03:36,780
So what this is actually doing and
going back to link this,
56

56

00:03:36,780  -->  00:03:40,980
do you remember that the linkedList
entry pointed to another entry?
57

57

00:03:40,980  -->  00:03:45,030
So what we're doing is we're saying while
that entry,while an element that's in this
58

58

00:03:45,030  -->  00:03:47,820
linkedList is pointing to something else,
in other words,
59

59

00:03:47,820  -->  00:03:51,210
there's at least one more record to
actually visit, while that is true,
60

60

00:03:51,210  -->  00:03:53,480
we're actually gonna
show the current record.
61

61

00:03:53,480  -->  00:03:55,780
And that i.next is actually part of that.
62

62

00:03:55,780  -->  00:03:58,280
So what that actually does,
it actually sets it,
63

63

00:03:58,280  -->  00:04:00,200
then as we go through you use i.next.
64

64

00:04:00,200  -->  00:04:03,010
That actually also changes
the value of the iterator.
65

65

00:04:03,010  -->  00:04:07,240
That's equivalent to typing
i++ i equals i plus 1.
66

66

00:04:07,240  -->  00:04:11,040
We're actually saying I'll put
that i.next which actually
67

67

00:04:11,040  -->  00:04:15,490
gives you the current record but that also
then moves onto the next record as well.
68

68

00:04:15,490  -->  00:04:20,000
So consequently hasNext is just
to say is there another entry,
69

69

00:04:20,000  -->  00:04:22,890
but .next is actually
moving to the next entry,
70

70

00:04:22,890  -->  00:04:27,260
but it's actually returning what
the current value is before it moves on.
71

71

00:04:27,260  -->  00:04:28,850
So that's why we can
actually put Now visiting,
72

72

00:04:28,850  -->  00:04:32,630
and that will show in, the first time
we run this, it'll actually show city.
73

73

00:04:32,630  -->  00:04:35,190
So it will show a city but
then automatically move to Brisbane.
74

74

00:04:35,190  -->  00:04:36,640
So that's actually how it works.
75

75

00:04:36,640  -->  00:04:39,150
So let's just try running this to
make sure that it actually does work.
76

76

00:04:42,240  -->  00:04:45,950
And you can see it's now visiting Sydney,
Melbourne, Brisbane, Perth, Canberra,
77

77

00:04:45,950  -->  00:04:46,630
Adelaide, and Darwin.
78

78

00:04:46,630  -->  00:04:49,390
So it's going through the whole list
automatically as you can see and
79

79

00:04:49,390  -->  00:04:50,570
it's working nicely.
80

80

00:04:50,570  -->  00:04:52,230
So let's actually go back here and
add some more code.
81

81

00:04:52,230  -->  00:04:53,820
Let's actually insert records.
82

82

00:04:53,820  -->  00:04:57,210
So what we're going to do is we're
going to insert Alice Springs and
83

83

00:04:57,210  -->  00:05:01,270
that's gonna be in index position 1 which
of course immediately after Sydney.
84

84

00:05:01,270  -->  00:05:05,730
So if we do that,
if we type placesToVisit.add, we sign,
85

85

00:05:05,730  -->  00:05:08,600
add element at the index position 1.
86

86

00:05:08,600  -->  00:05:10,350
We're going to add Alice Springs.
87

87

00:05:11,390  -->  00:05:13,430
Let's do that.
88

88

00:05:13,430  -->  00:05:17,010
Let's then also print out the result.
89

89

00:05:17,010  -->  00:05:18,680
Let's try that and see what happens.
90

90

00:05:21,980  -->  00:05:25,520
You can see the first time we have Sydney,
Melbourne, Brisbane, Perth, etc.
91

91

00:05:25,520  -->  00:05:28,840
The second time we've now got
numbers in Sydney, Alice Springs.
92

92

00:05:28,840  -->  00:05:33,310
And notice how Alice Springs is now
automatically linking to Melbourne.
93

93

00:05:33,310  -->  00:05:34,460
So this has happened automatically.
94

94

00:05:34,460  -->  00:05:35,840
We've inserted that entry.
95

95

00:05:35,840  -->  00:05:38,370
So you can see what's happened
when we inserted Alice Springs.
96

96

00:05:38,370  -->  00:05:40,800
Sydney is now pointing to Alice Springs.
97

97

00:05:40,800  -->  00:05:42,210
And Alice Springs is
pointing to Melbourne.
98

98

00:05:42,210  -->  00:05:46,170
Whereas the first time, we actually ran
through, Sydney was pointing to Melbourne.
99

99

00:05:46,170  -->  00:05:49,740
So just by you typing in that
command to insert that record with
100

100

00:05:49,740  -->  00:05:54,420
the index position, the actual linked list
functionality in Java has done that for
101

101

00:05:54,420  -->  00:05:55,930
you automatically, which is pretty cool.
102

102

00:05:55,930  -->  00:05:57,130
That it's sort of built in to do that.
103

103

00:05:57,130  -->  00:06:02,200
So let's head to add a new
entry to insert a new record.
104

104

00:06:02,200  -->  00:06:07,390
If we wanna remove one, similarly, we can
do something like placesToVisit.remove,
105

105

00:06:07,390  -->  00:06:10,200
and we wanna remove
the element at position 4.
106

106

00:06:10,200  -->  00:06:12,480
So we do that, and
we actually run the code again.
107

107

00:06:12,480  -->  00:06:14,830
Well, actually what we'll do
is actually add a print first.
108

108

00:06:16,750  -->  00:06:17,630
We'll run the code again now.
109

109

00:06:20,280  -->  00:06:22,170
And we can see automatically
what's happened there.
110

110

00:06:22,170  -->  00:06:24,780
The first list we had Sydney,
Melbourne, Brisbane then we had Sydney,
111

111

00:06:24,780  -->  00:06:26,280
Alice Springs, Melbourne.
112

112

00:06:26,280  -->  00:06:30,810
This time we've got Sydney, Alice Springs,
Melbourne, Brisbane but this is not Perth
113

113

00:06:30,810  -->  00:06:34,940
and Perth was of course index position 4,
which is actually the fifth element.
114

114

00:06:34,940  -->  00:06:37,060
So one, two, three, four, five.
115

115

00:06:37,060  -->  00:06:38,180
That was Perth,
116

116

00:06:38,180  -->  00:06:42,460
that was the index position 4
which of course is element five.
117

117

00:06:42,460  -->  00:06:45,800
So by typing the remove, you can see
that what happened was Brisbane,
118

118

00:06:45,800  -->  00:06:49,180
which was pointing to Perth,
Brisbane is now pointing to Canberra, so
119

119

00:06:49,180  -->  00:06:52,920
Perth has been sort of removed completely
and that's how a linked list works.
120

120

00:06:52,920  -->  00:06:56,640
I can say it's pretty cool that it does
a lot of that for you automatically and
121

121

00:06:56,640  -->  00:06:59,780
it handles the linking to the next
records the next one in the list
122

122

00:06:59,780  -->  00:07:01,200
automatically for you.
123

123

00:07:01,200  -->  00:07:05,260
And of course with this mechanism
if you have thousands of records,
124

124

00:07:05,260  -->  00:07:08,100
there's not really gonna be
any slowdown in performance
125

125

00:07:08,100  -->  00:07:11,790
because it's literally only changing
one or two entries at the most.
126

126

00:07:11,790  -->  00:07:13,370
Everything else remains
at the same position.
127

127

00:07:13,370  -->  00:07:17,060
Now at the moment we haven't really
done anything that couldn't be done with
128

128

00:07:17,060  -->  00:07:18,230
an array or arrayList.
129

129

00:07:18,230  -->  00:07:20,100
And actually in fact when it
comes to adding other strings,
130

130

00:07:20,100  -->  00:07:23,700
we have to count into the list to find out
the entry, the index position to add to.
131

131

00:07:23,700  -->  00:07:26,320
So we have to actually tell it we
want it added in this position.
132

132

00:07:26,320  -->  00:07:29,600
Likewise for deleting Perth we have to
count the number of items and actually
133

133

00:07:29,600  -->  00:07:34,180
decide their selves by passing the number
as to which element we wanted to remove.
134

134

00:07:34,180  -->  00:07:36,970
Let me now show you
the advantages of a linked list.
135

135

00:07:36,970  -->  00:07:39,650
What I'm gonna do is add
the cities in alphabet order.
136

136

00:07:39,650  -->  00:07:42,910
Now alphabetically it may not be the best
way to visit the cities in a country
137

137

00:07:42,910  -->  00:07:43,970
the size of Australia.
138

138

00:07:43,970  -->  00:07:46,620
But really the important thing here
is we're gonna be imposing an order.
139

139

00:07:46,620  -->  00:07:49,820
So what we're gonna be doing is
we're gonna be saying that every
140

140

00:07:49,820  -->  00:07:51,880
time an entry is added to the linked list,
141

141

00:07:51,880  -->  00:07:55,710
we're gonna make sure that it's
actually added in alphabetical order.
142

142

00:07:55,710  -->  00:07:58,670
So this was where you use some other
algorithm to work out the distances or
143

143

00:07:58,670  -->  00:07:59,600
something like that.
144

144

00:07:59,600  -->  00:08:02,580
And figure out the most efficient way and
perhaps add it in that way.
145

145

00:08:02,580  -->  00:08:06,090
But in this case just as an example we
ended up doing it in alphabetical order.
146

146

00:08:06,090  -->  00:08:09,030
We're gonna start off an empty list,
that means that the first
147

147

00:08:09,030  -->  00:08:11,200
item to be added is always gonna
be added right from the start.
148

148

00:08:11,200  -->  00:08:14,310
But when it comes to add the second
item what we're gonna do is,
149

149

00:08:14,310  -->  00:08:17,760
we're gonna compare it to the first and
then three things can actually happen.
150

150

00:08:17,760  -->  00:08:20,200
Firstly, if it's the same as the first,
in other words,
151

151

00:08:20,200  -->  00:08:22,990
if it's a duplicate, we don't
wanna visit the same city twice so
152

152

00:08:22,990  -->  00:08:26,270
if that's the case we're gonna ignore
that entry and not actually accept it.
153

153

00:08:26,270  -->  00:08:30,100
If it sorts alphabetically before
the first city, if that's the case,
154

154

00:08:30,100  -->  00:08:32,700
we want to insert it
before the current city.
155

155

00:08:32,700  -->  00:08:36,010
And if it alphabetically is greater than
the current city, if that's the case,
156

156

00:08:36,010  -->  00:08:38,890
we wanna move it to the next city,
and then we wanna repeat the process.
157

157

00:08:38,890  -->  00:08:41,540
So I can say that by comparing that
as we're actually inserting it,
158

158

00:08:41,540  -->  00:08:43,360
we can put it in the right
place each time.
159

159

00:08:43,360  -->  00:08:46,580
So eventually when we get to the end of
the list if the item has not been added by
160

160

00:08:46,580  -->  00:08:48,310
now, then it belongs to the end.
161

161

00:08:48,310  -->  00:08:50,080
So I'll add it there and implement it.
162

162

00:08:50,080  -->  00:08:51,990
And we're gonna be using something
similar to an iterator and
163

163

00:08:51,990  -->  00:08:53,030
that's called a list iterator.
164

164

00:08:53,030  -->  00:08:55,170
So what I'm gonna do now is just
type in some of the code and
165

165

00:08:55,170  -->  00:08:57,230
then we'll go through it and
actually try running it.
166

166

00:08:57,230  -->  00:08:59,100
So I'm gonna create this method.
167

167

00:08:59,100  -->  00:09:01,990
Now close down this run window for now.
168

168

00:09:01,990  -->  00:09:09,860
We're gonna use private
static boolean addInOrder.
169

169

00:09:09,860  -->  00:09:13,060
So the parameters we're going
to have here are the parameters,
170

170

00:09:13,060  -->  00:09:15,390
it's gonna be the new city,
String newCity.
171

171

00:09:15,390  -->  00:09:17,820
But for
purposes I'll also add another one.
172

172

00:09:17,820  -->  00:09:21,710
We're gonna add a parameter which we,
the actual linked list itself,
173

173

00:09:21,710  -->  00:09:23,790
that we want to actually add.
174

174

00:09:23,790  -->  00:09:28,340
So, we'll call that linkedList, like so.
175

175

00:09:28,340  -->  00:09:31,020
So, the first thing we need to
do is create a new iterator and
176

176

00:09:31,020  -->  00:09:33,230
you saw that in the previous
code example above.
177

177

00:09:33,230  -->  00:09:34,770
We used linkedList.iterator.
178

178

00:09:34,770  -->  00:09:37,570
Well, we're gonna use what's
called a list iterator.
179

179

00:09:37,570  -->  00:09:38,450
And, as you say,
180

180

00:09:38,450  -->  00:09:42,750
list iterator gives you some more
flexibility then a traditional iterator.
181

181

00:09:42,750  -->  00:09:46,690
And it's really made for situations
like this where we're inserting and
182

182

00:09:46,690  -->  00:09:48,130
inserting certain records and so forth.
183

183

00:09:48,130  -->  00:09:54,440
So we can type stringListIterator equals
it's gonna be linkedList.iterator.
184

184

00:09:56,690  -->  00:10:01,810
We're gonna type while and
that should have been list iterator,
185

185

00:10:01,810  -->  00:10:07,230
listIterator, like so, while,
stringListIterator.hasNext.
186

186

00:10:07,230  -->  00:10:08,550
I'm gonna go through all the records.
187

187

00:10:10,030  -->  00:10:12,940
And I'll just make a bit of space here so
we can see what we're typing a bit better.
188

188

00:10:14,880  -->  00:10:18,280
So we've got out listed array there
remembering that the first entry or
189

189

00:10:18,280  -->  00:10:19,190
when you create this for
190

190

00:10:19,190  -->  00:10:21,750
the first time, when you point it
to the listed array there, it's
191

191

00:10:21,750  -->  00:10:25,990
automatically gonna go to the very first
entry that's stored in the linked list.
192

192

00:10:25,990  -->  00:10:29,730
Then we're gonna use the .hasNext, and
using the while loop we're gonna navigate
193

193

00:10:29,730  -->  00:10:33,030
through all entries that are in
this string list iterator.
194

194

00:10:33,030  -->  00:10:34,510
Then, we're gonna use
a compare two function,
195

195

00:10:34,510  -->  00:10:35,760
which we haven't talked about before.
196

196

00:10:35,760  -->  00:10:44,080
So I'm gonna type int comparison
= stringListIterator.next.
197

197

00:10:44,080  -->  00:10:46,420
So, we're moving to the next record.
198

198

00:10:46,420  -->  00:10:51,030
.compareTo(newCity), which of course,
was the variable that was
199

199

00:10:51,030  -->  00:10:56,530
passed to this method, which is
the city that we're looking to insert.
200

200

00:10:56,530  -->  00:10:58,620
So what that gives us is a number.
201

201

00:10:58,620  -->  00:10:59,680
So it gives us a number.
202

202

00:10:59,680  -->  00:11:03,730
If the number that's returned,
the integer, if it's 0 it means that
203

203

00:11:03,730  -->  00:11:08,730
both the value that's in the string is in
the linked list the current index entry
204

204

00:11:08,730  -->  00:11:13,510
that we're searching for is equal to
the newCity variable in this case.
205

205

00:11:13,510  -->  00:11:15,930
So there's no other words,
0 means that they actually matched.
206

206

00:11:15,930  -->  00:11:20,880
If that's the case we don't
wanna add anything so
207

207

00:11:20,880  -->  00:11:25,350
we're gonna put if
comparison equals zero so
208

208

00:11:25,350  -->  00:11:29,370
that means they're equal, do not add.
209

209

00:11:29,370  -->  00:11:33,130
So that would mean for example if we
had the city being Adelaide already,
210

210

00:11:33,130  -->  00:11:36,530
we're actually using that as
a parameter to pass to this method.
211

211

00:11:36,530  -->  00:11:40,070
If that was also the entry, the count
goes through the wall loop that we were
212

212

00:11:40,070  -->  00:11:42,960
currently looking at,
we don't wanna add Adelaide again.
213

213

00:11:42,960  -->  00:11:47,350
So if that's the case, we're gonna
214

214

00:11:47,350  -->  00:11:52,310
print out a message that says newCity + is
215

215

00:11:52,310  -->  00:11:57,290
already included, or as a destination.
216

216

00:11:59,880  -->  00:12:01,110
Don't wanna add it again.
217

217

00:12:01,110  -->  00:12:03,530
And we're gonna type return false.
218

218

00:12:03,530  -->  00:12:05,780
False meaning that it
wasn't successfully added.
219

219

00:12:05,780  -->  00:12:10,210
Otherwise we can do else if comparison,
if it's greater than 0,
220

220

00:12:10,210  -->  00:12:14,760
what that means is the new item
should appear before this one.
221

221

00:12:14,760  -->  00:12:20,620
So if that's the case,
we'll say it's the new City should appear
222

222

00:12:22,900  -->  00:12:28,360
before this one and
the example of that would be if we can't
223

223

00:12:28,360  -->  00:12:34,680
really looking at the record for Brisbane,
but if Adelaide was parsed as a parameter,
224

224

00:12:34,680  -->  00:12:39,880
then Adelaide, alphabetically, starts
before Brisbane, so A comes before B.
225

225

00:12:39,880  -->  00:12:43,260
So the comparison would return a number
greater than 0 if that was the case, so
226

226

00:12:43,260  -->  00:12:44,220
we'd wanna then add it.
227

227

00:12:44,220  -->  00:12:45,940
But we've actually got
a problem at this point.
228

228

00:12:45,940  -->  00:12:49,570
And the problem is,
we've already used .next.
229

229

00:12:49,570  -->  00:12:52,050
So in other words we've already
moved onto the next record.
230

230

00:12:52,050  -->  00:12:53,550
So we've done the comparison.
231

231

00:12:53,550  -->  00:12:54,360
We've actually checked it but
232

232

00:12:54,360  -->  00:12:58,160
the comparison was chosen when we
used .next so we used the .next
233

233

00:12:58,160  -->  00:13:02,600
which returned the current entry but then
it moved to the next entry automatically.
234

234

00:13:02,600  -->  00:13:06,150
So what we actually need to do in this
case if comparison's greater than 0,
235

235

00:13:06,150  -->  00:13:10,560
we to move back to the previous
entry again, the one that we're at.
236

236

00:13:10,560  -->  00:13:13,940
In other word, in this case Brisbane,
and we wanna add new city.
237

237

00:13:13,940  -->  00:13:18,720
So to do that we type
stringListIterator.previous.
238

238

00:13:18,720  -->  00:13:22,460
Commit previous means go back to
the previous entry, the previous match.
239

239

00:13:22,460  -->  00:13:26,050
So in other words, go back to
the record that's linked to this one.
240

240

00:13:26,050  -->  00:13:30,990
stringListIterator.add(newCity), then
we add
241

241

00:13:30,990  -->  00:13:35,710
the city at that point so that ultimately
it's going to appear before that entry.
242

242

00:13:35,710  -->  00:13:39,340
So in this case, again, if we're looking
at Brisbane and we've found Adelaide,
243

243

00:13:39,340  -->  00:13:42,490
Adelaide was passed as a parameter and
by using the .previous,
244

244

00:13:42,490  -->  00:13:44,560
it goes back to the Brisbane record.
245

245

00:13:44,560  -->  00:13:48,190
And, by using .add, that's actually gonna
go and add it at the right position.
246

246

00:13:48,190  -->  00:13:51,070
It's gonna add it in that entry and
that's what the .previous does.
247

247

00:13:51,070  -->  00:13:54,920
So, we're using this special type
of list iterator because normally,
248

248

00:13:54,920  -->  00:13:56,790
you can't do that with a regular iterator.
249

249

00:13:56,790  -->  00:13:58,960
Normally, you've just gotta
go through all the records.
250

250

00:13:58,960  -->  00:14:01,670
There's no way for
you to go back to a previous record.
251

251

00:14:01,670  -->  00:14:04,770
But, the list iterator is
a special type of iterator
252

252

00:14:04,770  -->  00:14:06,110
that enables us to actually do that.
253

253

00:14:06,110  -->  00:14:07,550
So, that's why we're actually doing that.
254

254

00:14:07,550  -->  00:14:10,160
So if that's the case, we were able
to add the record, so that was good.
255

255

00:14:10,160  -->  00:14:15,600
So the record was added successfully,
so we can return true, else
256

256

00:14:15,600  -->  00:14:21,690
if comparison, if it's less than
257

257

00:14:21,690  -->  00:14:27,750
0 move on to next city, in other words you
don't need to actually do anything there.
258

258

00:14:27,750  -->  00:14:30,350
So that was a situation where we actually
259

259

00:14:30,350  -->  00:14:33,770
found in a case that said Brisbane
must pass as a parameter and
260

260

00:14:33,770  -->  00:14:37,320
where actually Adelaide, well Brisbane
doesn't come before Adelaide.
261

261

00:14:37,320  -->  00:14:40,090
So we don't wanna do anything in that
case because obviously we need to move
262

262

00:14:40,090  -->  00:14:42,920
onto the next record because
that record can't be added in.
263

263

00:14:42,920  -->  00:14:47,240
And because we've done the .next
up here automatically,
264

264

00:14:47,240  -->  00:14:49,520
it's already moved on to
the next record anyway.
265

265

00:14:49,520  -->  00:14:52,080
So we don't need to actually do
any processing at that point.
266

266

00:14:52,080  -->  00:14:54,750
And finally,
at the end of the wild loop, so
267

267

00:14:54,750  -->  00:14:59,460
here if we get down this far, what that
means is we've gone through the entire
268

268

00:14:59,460  -->  00:15:02,330
list without finding a suitable
point to insert the entry.
269

269

00:15:02,330  -->  00:15:05,960
So the new item actually has to go
to the end of the list in that case.
270

270

00:15:05,960  -->  00:15:13,410
So what we really need to do there is
type stringListIterator.add(newCity).
271

271

00:15:13,410  -->  00:15:14,180
That's actually it.
272

272

00:15:14,180  -->  00:15:16,040
So what I'm gonna do
is end the video here.
273

273

00:15:16,040  -->  00:15:19,780
In the next video we'll come back and
we'll actually just discuss this a little
274

274

00:15:19,780  -->  00:15:21,690
bit more and we'll actually go and
change it so
275

275

00:15:21,690  -->  00:15:24,980
that we're actually running our code using
this method and just see whether it does
276

276

00:15:24,980  -->  00:15:28,240
work, whether it does actually convert
things and put them in alphabetical order.
277

277

00:15:28,240  -->  00:15:29,350
So I'll see you in the next video.
