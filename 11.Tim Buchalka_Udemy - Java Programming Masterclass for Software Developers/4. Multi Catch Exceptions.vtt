WEBVTT
1
1

00:00:05.210  -->  00:00:09.990
so continuing on with exceptions so i
mentioned at the end of the last program
2

2

00:00:09.990  -->  00:00:14.510
we're going to look at modifying the
divide method because the code is a
3

3

00:00:14.510  -->  00:00:18.320
little bit clumsy right now we can see
that we've actually got 2 trys we've
4

4

00:00:18.320  -->  00:00:24.480
got a try block on line 19 that ends
with the catch on line 24 and we also
5

5

00:00:24.480  -->  00:00:28.700
got another one starting on line 26 in
finishing on line 30 so there's no
6

6

00:00:28.700  -->  00:00:32.640
reason why we can't combine those into a
single try catch block and in fact
7

7

00:00:32.640  -->  00:00:36.800
that's the recommended way of doing
things so to change it its actually quite
8

8

00:00:36.800  -->  00:00:41.370
simple because we just really need to
add another catch statement here so we put...
9

9

00:00:41.370  -->  00:00:47.390
we already got no such element exception caught their so will do....
10

10

00:00:47.390  -->  00:00:59.390
..and we can just copy the code that was in their and pasted it into their like so and
11

11

00:00:59.390  -->  00:01:03.330
obviously we gotta catch here that we don't
need anymore but before I do that I'm just
12

12

00:01:03.330  -->  00:01:06.330
going to copy this code also that was in
the second part
13

13

00:01:06.870  -->  00:01:13.180
paste that into the try block and likewise
for the result as well and paste that in their and that means
14

14

00:01:13.180  -->  00:01:17.860
we've now got this empty try catch which we can
now delete so that's actually a much
15

15

00:01:17.860  -->  00:01:21.840
neater way of doing things and the main
code of the method is all in one place
16

16

00:01:21.840  -->  00:01:26.320
as well so it's easier to read so you can
sort of see at a glance that the main
17

17

00:01:26.320  -->  00:01:30.950
part of the code is on line 20 to 23 now
that's the code that is going to be executed
18

18

00:01:30.950  -->  00:01:34.920
if there aren't any exceptions and the
multiple exceptions that are caught
19

19

00:01:34.920  -->  00:01:40.250
three lines 24 to 27 makes it clear what we
try to actually catch the potential
20

20

00:01:40.250  -->  00:01:45.960
errors are their so when an exception happens each
of the catch block is checked in order to
21

21

00:01:45.960  -->  00:01:49.710
see if one of them handles the particular
exception so as soon as a catch
22

22

00:01:49.710  -->  00:01:54.780
handles an exceptions found that code
is actually executed and any remaining catch
23

23

00:01:54.780  -->  00:01:59.030
blocks are ignored so that's an important
thing to remember their now starting
24

24

00:01:59.030  -->  00:02:03.070
with Java 7 it's actually possible to
handle multiple exceptions with a single
25

25

00:02:03.070  -->  00:02:07.390
catch block and I will actually be showing you how to do that in a little bit later but here that
26

26

00:02:07.390  -->  00:02:11.220
wouldn't have been appropriate because we
want to place additional information in
27

27

00:02:11.220  -->  00:02:15.490
the exceptions before throwing them so
the program should now behave as it should
28

28

00:02:15.490  -->  00:02:18.460
do with a final decision on what to do
about exception
29

29

00:02:18.460  -->  00:02:23.010
where it belongs is actually now in the
main method so basically here we can
30

30

00:02:23.010  -->  00:02:27.600
decide to how we are going to actually cope with a
particular error bearing in mind that we know
31

31

00:02:27.600  -->  00:02:31.520
throwing the error as we're not dealing
with them as such in the divide method so
32

32

00:02:31.520  -->  00:02:37.200
what I'm going to do now is actually
put some code in the main method itself
33

33

00:02:38.050  -->  00:02:44.930
so let's at actually doing that so.....
34

34

00:02:44.930  -->  00:03:08.950
....
35

35

00:03:08.950  -->  00:03:20.940
.....so
let's run the program and just try a few
36

36

00:03:20.940  -->  00:03:23.940
different combinations to see that it
actually works
37

37

00:03:25.800  -->  00:03:34.790
so if we enter some valid code first 10 valid numbers I should say 5 that works correctly
38

38

00:03:36.670  -->  00:03:41.510
let's try putting in some random stuff
please enter numbers only using the
39

39

00:03:41.510  -->  00:03:46.990
digits 0 through 9 and we can't proceed until we do something
40

40

00:03:46.990  -->  00:03:51.930
100 and make sure he second number is
also working that is working fine 50 that is working ok
41

41

00:03:54.470  -->  00:03:59.710
and lets continue on and let's do the equivalent
of a ctrl d which is command D
42

42

00:03:59.710  -->  00:04:06.000
on a MAC need to be in that window and we now the right area you can see how we've actually
43

43

00:04:06.000  -->  00:04:12.090
caught the error that error was thrown
for arithmetic exception on line 32 and we've now caught
44

44

00:04:12.090  -->  00:04:17.340
the error in our main method and that is now being outputted the catch block for the arithmetic
45

45

00:04:17.340  -->  00:04:23.190
exception the code on line 17 and 18 is
now being performed when we exited out
46

46

00:04:23.190  -->  00:04:25.670
that way notice the input was actually found
47

47

00:04:25.670  -->  00:04:31.260
so that's actually correct so that's
pretty well all there is two exceptions
48

48

00:04:31.260  -->  00:04:35.540
so I haven't mentioned the differences
between checked and unchecked exceptions
49

49

00:04:35.540  -->  00:04:38.890
and I will be doing that later but
that's certainly enough to be getting on
50

50

00:04:38.890  -->  00:04:42.090
with what we come to look at in this
section which of course is input-output
51

51

00:04:42.090  -->  00:04:46.900
operations now you will get some more practice
with exceptions in the next few videos
52

52

00:04:46.900  -->  00:04:50.530
and because we'll be using real numbers
and performing operations that throw
53

53

00:04:50.530  -->  00:04:54.470
exceptions we won't end up with
such a contrived example that would
54

54

00:04:54.470  -->  00:04:59.110
actually got here so but it has served
this example to introduce the concept of
55

55

00:04:59.110  -->  00:05:03.660
exceptions and how we can handle it
throw them them and even if the use of
56

56

00:05:03.660  -->  00:05:07.840
them to this extent has been a little
bit over the top and in fact you wouldn't
57

57

00:05:07.840  -->  00:05:11.480
probably bother catching exceptions in
the divide method and in a real world application
58

58

00:05:11.480  -->  00:05:15.970
probably a more realistic way to handle this
would be to remove all the exception
59

59

00:05:15.970  -->  00:05:21.170
handling from divide all together and catch them
both in main so probably you'd end up in a
60

60

00:05:21.170  -->  00:05:25.000
real-world app getting rid of the catches
here
61

61

00:05:25.000  -->  00:05:28.500
altogether so just basically the 4 lines of code I'm just gonna comment them out now
62

62

00:05:28.500  -->  00:05:33.440
so that their there if you need to download
the source code but that's probably what you
63

63

00:05:33.440  -->  00:05:38.220
would actually do you have something like that that's those 4 lines of code then in the main method
64

64

00:05:38.220  -->  00:05:46.180
and this is the way to actually catch
multiple exceptions logical or no such
65

65

00:05:46.180  -->  00:05:50.060
element exception so that's the two
errors there and I need to make a change
66

66

00:05:50.060  -->  00:05:53.600
to this because this is a feature that was
introduced in Java 7 and it looks like
67

67

00:05:53.600  -->  00:05:59.400
my source isn't selected at that level
so I need to go into their and make that change so
68

68

00:05:59.400  -->  00:06:03.370
open-source settings project
69

69

00:06:04.090  -->  00:06:08.540
and I need changed that to version 7 I mean 8 which I've done in the course but if we get
70

70

00:06:08.540  -->  00:06:09.650
that error
71

71

00:06:09.650  -->  00:06:12.340
relating to something that was
introduced in Java 7 but obviously version 8
72

72

00:06:12.340  -->  00:06:16.010
will work as well you can see the error
is now disappeared because we've done
73

73

00:06:16.010  -->  00:06:19.820
that and I think I might have said it was a logical
or but of course that is a bit wise
74

74

00:06:19.820  -->  00:06:23.390
inclusive or so it's not the the
standard or that we use a
75

75

00:06:23.390  -->  00:06:28.670
conditional or with two pipe characters we are just using the one which is a bit wise
76

76

00:06:28.670  -->  00:06:33.250
inclusive or and that's the way to
check for multiple exceptions so that
77

77

00:06:33.250  -->  00:06:36.840
this is how what you'd
probably do in a real world application
78

78

00:06:36.840  -->  00:06:39.840
and run this
79

79

00:06:43.930  -->  00:06:52.110
so that it works now if we put some invalid input do a command d no such element exception
80

80

00:06:52.110  -->  00:06:59.440
so its still being caught as you can see but
likewise if we put a valid number in we are still
81

81

00:06:59.440  -->  00:07:04.780
getting that back because we're putting in some
invalid in we should be able to put 0 in and we still get
82

82

00:07:04.780  -->  00:07:11.380
our arithmetic exception so
basically this code can be read you can read
83

83

00:07:11.380  -->  00:07:18.060
that as catch arithmetic exception or no such element exception but again it's the single
84

84

00:07:18.060  -->  00:07:23.130
pipe and not the double pipe characters now and I
just showed you that if there was an error
85

85

00:07:23.130  -->  00:07:26.270
coming up with multiple catches and not
supported in this language level you need to
86

86

00:07:26.270  -->  00:07:30.300
go back into the project structure as I
did and make sure that your using at least Java 7
87

87

00:07:30.300  -->  00:07:34.270
but in fact in this course we've been using
Java 8 and I do recommended select
88

88

00:07:34.270  -->  00:07:38.750
that because obviously Java 8 has got
all the features that Java 7 had as well
89

89

00:07:38.750  -->  00:07:42.860
and just a confirmation the reason we needed to do
that was this catching of multiple
90

90

00:07:42.860  -->  00:07:48.960
exceptions on one line or in one catch block
wasn't an option until Java 7 alright so
91

91

00:07:48.960  -->  00:07:53.310
now that you've seen the basics of
catching exceptions it's time to move on
92

92

00:07:53.310  -->  00:07:57.120
to I/O in Java so when dealing with input and output there's so many things
93

93

00:07:57.120  -->  00:08:01.270
that can go wrong and so we'll have
plenty of opportunities to examine
94

94

00:08:01.270  -->  00:08:04.770
exception handling in much more detail
so I'll see you in the next video
