WEBVTT
1
1

00:00:04.780  -->  00:00:07.190
- [Man] All right, so continuing
on from the last video,
2

2

00:00:07.190  -->  00:00:11.610
what we need to do is
finish off and add the code
3

3

00:00:11.610  -->  00:00:13.240
to the static initializer block
4

4

00:00:13.240  -->  00:00:16.570
to process the exits, the directions.
5

5

00:00:16.570  -->  00:00:20.690
So we're gonna do this
below the first try,
6

6

00:00:20.690  -->  00:00:23.840
the first try with the resources block.
7

7

00:00:23.840  -->  00:00:25.160
So we're gonna do it down there,
8

8

00:00:25.160  -->  00:00:27.750
and we're gonna start with try,
9

9

00:00:28.700  -->  00:00:31.450
and it's gonna be BufferedReader.
10

10

00:00:33.100  -->  00:00:37.070
D-I-R file equals,
that's gonna be Files dot
11

11

00:00:37.070  -->  00:00:38.710
newBufferedReader again
12

12

00:00:38.710  -->  00:00:41.620
and D-I-R Path this time.
13

13

00:00:42.700  -->  00:00:45.930
Then we're gonna do a String input.
14

14

00:00:45.930  -->  00:00:49.600
And: while input equals D-I-R File
15

15

00:00:51.210  -->  00:00:52.210
dot readLine
16

16

00:00:54.230  -->  00:00:56.820
while that's not equal to null.
17

17

00:00:58.400  -->  00:00:59.320
And I got that wrong.
18

18

00:00:59.320  -->  00:01:01.340
It's the parentheses,
slightly wrong with that.
19

19

00:01:01.340  -->  00:01:03.740
It should be one parenthesis
at the end of the line
20

20

00:01:03.740  -->  00:01:05.900
and an extra parenthesis to the right
21

21

00:01:05.900  -->  00:01:09.310
of the D-I-R File dot readLine.
22

22

00:01:10.530  -->  00:01:13.420
All right, so then we're
going to do a string array.
23

23

00:01:13.420  -->  00:01:16.090
Data is equal to input dot split
24

24

00:01:17.770  -->  00:01:18.600
comma.
25

25

00:01:20.260  -->  00:01:21.090
And then we're gonna do:
26

26

00:01:21.090  -->  00:01:24.510
int loc is equal to Integer dot parseInt,
27

27

00:01:25.850  -->  00:01:28.350
and that's gonna be data zero.
28

28

00:01:29.460  -->  00:01:30.720
First element.
29

29

00:01:30.720  -->  00:01:33.000
So string, then direction
equals the second element,
30

30

00:01:33.000  -->  00:01:34.590
so equals data one.
31

31

00:01:37.530  -->  00:01:41.690
And int destination is equal
to Integer dot parseInt.
32

32

00:01:44.500  -->  00:01:47.170
Then the next element, data two.
33

33

00:01:48.720  -->  00:01:50.890
Let's just print those out then.
34

34

00:01:50.890  -->  00:01:55.060
So I'm gonna print out loc
plus colon plus direction
35

35

00:01:57.190  -->  00:02:01.180
plus another colon, space,
then plus the destination,
36

36

00:02:01.180  -->  00:02:04.440
just so that we can see it
is being retrieved okay.
37

37

00:02:04.440  -->  00:02:05.920
And next we're gonna create a location.
38

38

00:02:05.920  -->  00:02:10.090
So: Location location equals
locations dot get loc.
39

39

00:02:12.770  -->  00:02:14.660
So we're using that as the key to get it,
40

40

00:02:14.660  -->  00:02:16.650
the loc, the first element
41

41

00:02:16.650  -->  00:02:18.810
that we retrieve for the location.
42

42

00:02:18.810  -->  00:02:19.840
Then we want to add some exits.
43

43

00:02:19.840  -->  00:02:21.510
So location.addExit.
44

44

00:02:23.190  -->  00:02:26.440
That's gonna be direction, destination.
45

45

00:02:28.280  -->  00:02:30.590
Okay, and then to get rid of
that other error at the top,
46

46

00:02:30.590  -->  00:02:34.420
both errors, we need to
catch the IOException.
47

47

00:02:38.070  -->  00:02:41.900
And we need another right
curly bracket there.
48

48

00:02:43.000  -->  00:02:45.670
Catch and e dot printStackTrace.
49

49

00:02:47.050  -->  00:02:49.300
And I'll just tidy that up.
50

50

00:02:50.990  -->  00:02:52.280
Okay.
51

51

00:02:52.280  -->  00:02:55.730
And of course that should
have been newBufferedReader,
52

52

00:02:55.730  -->  00:02:58.230
because we're reading not writing.
53

53

00:02:58.230  -->  00:02:59.060
Okay.
54

54

00:03:02.650  -->  00:03:04.640
And I seem to be having
a bad day with coding.
55

55

00:03:04.640  -->  00:03:06.340
We've got an extra one in there.
56

56

00:03:06.340  -->  00:03:09.270
So I'll just reformat the code again.
57

57

00:03:09.270  -->  00:03:10.100
And that should be good to go.
58

58

00:03:10.100  -->  00:03:11.510
Nothing needed to be changed.
59

59

00:03:11.510  -->  00:03:12.520
Okay.
60

60

00:03:12.520  -->  00:03:14.530
So even though we topped in a lot of code,
61

61

00:03:14.530  -->  00:03:16.640
really the only thing we've changed here
62

62

00:03:16.640  -->  00:03:19.730
is the files that
newBufferedReader method call
63

63

00:03:19.730  -->  00:03:21.350
in both try statements.
64

64

00:03:21.350  -->  00:03:24.280
Also we had to declare
the two path variables.
65

65

00:03:24.280  -->  00:03:26.720
Otherwise the code's pretty
much identical to what it was
66

66

00:03:26.720  -->  00:03:28.640
when you called the
BufferedReader constructor
67

67

00:03:28.640  -->  00:03:31.980
directly in the two try statements.
68

68

00:03:31.980  -->  00:03:33.050
Now, as I mentioned before,
69

69

00:03:33.050  -->  00:03:36.580
when you use the Files.newBufferedReader
or Writer methods
70

70

00:03:36.580  -->  00:03:39.270
to create the buffered
reader and buffered writer,
71

71

00:03:39.270  -->  00:03:42.220
the underlying instance used to do the IO
72

72

00:03:42.220  -->  00:03:46.380
is a Java.nio instance rather
than a Java.io instance.
73

73

00:03:47.480  -->  00:03:50.230
All right, so what about
reading and writing objects?
74

74

00:03:50.230  -->  00:03:51.060
Well firstly,
75

75

00:03:51.060  -->  00:03:53.420
there isn't a Files dot
newObjectInputStream
76

76

00:03:53.420  -->  00:03:56.750
or Files dot newObjectOutputStream method.
77

77

00:03:56.750  -->  00:03:58.160
But there are new input stream
78

78

00:03:58.160  -->  00:04:00.400
and new output stream methods,
79

79

00:04:00.400  -->  00:04:01.990
which return an input stream
80

80

00:04:01.990  -->  00:04:04.240
and an output stream respectively.
81

81

00:04:04.240  -->  00:04:05.070
So, in other words,
82

82

00:04:05.070  -->  00:04:06.950
you can construct an object input stream
83

83

00:04:06.950  -->  00:04:08.370
from an input stream
84

84

00:04:08.370  -->  00:04:11.920
and an object output stream
from an output stream.
85

85

00:04:11.920  -->  00:04:13.230
So, with that said, you should be able
86

86

00:04:13.230  -->  00:04:17.030
to create an object input
stream or an output stream
87

87

00:04:17.030  -->  00:04:19.890
from a path using a two-step process.
88

88

00:04:19.890  -->  00:04:23.670
So you call the files method
to get the appropriate stream
89

89

00:04:23.670  -->  00:04:25.800
and then call the object input stream
90

90

00:04:25.800  -->  00:04:28.580
or object output stream
constructor directly
91

91

00:04:28.580  -->  00:04:31.330
using the stream you got
from the files method.
92

92

00:04:31.330  -->  00:04:32.170
Sounds like a mouthful,
93

93

00:04:32.170  -->  00:04:35.910
but let's actually try
that to see how it works.
94

94

00:04:35.910  -->  00:04:38.600
All right, so this time you're
gonna be writing and reading
95

95

00:04:38.600  -->  00:04:40.710
the locations dot dat file.
96

96

00:04:40.710  -->  00:04:42.130
Now you no longer need two files,
97

97

00:04:42.130  -->  00:04:44.210
because you're gonna
serialise the contents
98

98

00:04:44.210  -->  00:04:45.860
of every location object
99

99

00:04:45.860  -->  00:04:48.350
to the locations dot dat file.
100

100

00:04:48.350  -->  00:04:49.190
So, to do that,
101

101

00:04:49.190  -->  00:04:51.830
we need to go into our
locations dot main method
102

102

00:04:51.830  -->  00:04:53.530
to write the file.
103

103

00:04:53.530  -->  00:04:54.400
So I'm gonna go back up there.
104

104

00:04:54.400  -->  00:04:56.820
So we're in Locations and
looking at this main code.
105

105

00:04:56.820  -->  00:04:57.880
So what we're going to do here
106

106

00:04:57.880  -->  00:05:00.440
is we're going to just
comment this code out
107

107

00:05:00.440  -->  00:05:02.670
to show you how to do it using objects.
108

108

00:05:02.670  -->  00:05:04.860
So we're going to
comment that out entirely
109

109

00:05:04.860  -->  00:05:07.050
so we've got a copy of it.
110

110

00:05:07.050  -->  00:05:09.710
And I'll actually start coding at the top.
111

111

00:05:09.710  -->  00:05:11.070
All right, so again we're working now
112

112

00:05:11.070  -->  00:05:12.730
with locations dot dat.
113

113

00:05:12.730  -->  00:05:13.700
So I'm gonna start by typing:
114

114

00:05:13.700  -->  00:05:16.700
Path locPath is equal to FileSystems
115

115

00:05:19.030  -->  00:05:20.880
dot getDefault
116

116

00:05:20.880  -->  00:05:21.880
dot getPath.
117

117

00:05:22.960  -->  00:05:27.520
This time, as I said,
it's locations dot dat.
118

118

00:05:27.520  -->  00:05:29.050
Then we just do a try.
119

119

00:05:29.050  -->  00:05:32.640
We start with an
ObjectOutputStream locFile
120

120

00:05:34.710  -->  00:05:38.260
is equal to new ObjectOutputStream.
121

121

00:05:38.260  -->  00:05:41.430
Then we do a new BufferedOutputStream.
122

122

00:05:42.560  -->  00:05:46.730
And then we pass to that the
Files dot newOutputStream
123

123

00:05:47.820  -->  00:05:49.650
and the location path.
124

124

00:05:52.320  -->  00:05:53.900
And in terms of writing it out,
125

125

00:05:53.900  -->  00:05:55.030
it'll be code that you've seen before.
126

126

00:05:55.030  -->  00:05:56.300
So for location:
127

127

00:05:56.300  -->  00:05:59.970
Location location colon
locations dot values
128

128

00:06:02.410  -->  00:06:04.320
locFile dot writeObject
129

129

00:06:07.520  -->  00:06:08.360
location.
130

130

00:06:09.760  -->  00:06:11.220
So the two things to
notice with this code.
131

131

00:06:11.220  -->  00:06:12.220
First of all,
132

132

00:06:12.220  -->  00:06:14.870
you're using the Files dot
newOutputStream method,
133

133

00:06:14.870  -->  00:06:17.180
this one up here on line 21.
134

134

00:06:17.180  -->  00:06:19.110
We're using that to get an output stream
135

135

00:06:19.110  -->  00:06:21.110
using a path instance,
136

136

00:06:21.110  -->  00:06:23.510
because passing locPath,
137

137

00:06:23.510  -->  00:06:25.330
of course that's using the path,
138

138

00:06:25.330  -->  00:06:27.410
the Java.nio path object,
139

139

00:06:28.480  -->  00:06:30.150
or path instance I should say.
140

140

00:06:30.150  -->  00:06:32.970
And secondly, what we're
doing is exactly what we did
141

141

00:06:32.970  -->  00:06:34.750
when we created a file output stream
142

142

00:06:34.750  -->  00:06:37.020
using the file output stream constructor.
143

143

00:06:37.020  -->  00:06:40.140
So you're wrapping it up still
in this BufferedOutputStream.
144

144

00:06:40.140  -->  00:06:41.860
So the IO will be buffered.
145

145

00:06:41.860  -->  00:06:45.530
Then you're wrapping that
in an ObjectOutputStream.
146

146

00:06:45.530  -->  00:06:49.830
So really the only change
you've made to the code
147

147

00:06:49.830  -->  00:06:52.380
is to call the Files dot newOutputStream
148

148

00:06:52.380  -->  00:06:54.290
rather than the file
output stream constructor.
149

149

00:06:54.290  -->  00:06:57.620
So that's where the
Java.nio code comes in.
150

150

00:06:57.620  -->  00:07:00.860
All right, so we've got an
existing location dot dat file.
151

151

00:07:00.860  -->  00:07:01.950
If we wanted to, we could delete it.
152

152

00:07:01.950  -->  00:07:03.270
But we're just going to run it again.
153

153

00:07:03.270  -->  00:07:05.480
And it should be recreated.
154

154

00:07:05.480  -->  00:07:06.980
So let's run that.
155

155

00:07:09.830  -->  00:07:12.500
Okay, the code has been written.
156

156

00:07:14.500  -->  00:07:17.420
And the static initializer
block also was executed,
157

157

00:07:17.420  -->  00:07:19.490
which in case you were wondering
158

158

00:07:19.490  -->  00:07:21.180
where that output had come from.
159

159

00:07:21.180  -->  00:07:22.800
Obviously we didn't have any output here
160

160

00:07:22.800  -->  00:07:27.140
for locations dot dat while
we were creating that.
161

161

00:07:27.140  -->  00:07:28.360
All right, so now that we've done that,
162

162

00:07:28.360  -->  00:07:31.480
let's now modify the static initializer
163

163

00:07:31.480  -->  00:07:34.440
so that it uses the
Files dot newInputStream.
164

164

00:07:34.440  -->  00:07:37.950
So let's go down and have a look at that.
165

165

00:07:37.950  -->  00:07:39.620
And the code is going to be a lot easier,
166

166

00:07:39.620  -->  00:07:40.800
because we're reading objects
167

167

00:07:40.800  -->  00:07:44.380
instead using delimiters and so forth
168

168

00:07:44.380  -->  00:07:45.590
to retrieve the data.
169

169

00:07:45.590  -->  00:07:47.720
So I'm gonna copy that all,
170

170

00:07:47.720  -->  00:07:48.690
comment that out.
171

171

00:07:48.690  -->  00:07:50.420
And let's have a look at it.
172

172

00:07:50.420  -->  00:07:52.420
The code to do that now:
173

173

00:07:53.330  -->  00:07:54.330
Path locPath
174

174

00:07:56.220  -->  00:07:58.810
is equal to FileSystems
175

175

00:07:58.810  -->  00:08:01.060
dot getDefault dot getPath.
176

176

00:08:02.490  -->  00:08:04.380
This time it's locations dot dat,
177

177

00:08:04.380  -->  00:08:06.470
which you've just created
in the main method
178

178

00:08:06.470  -->  00:08:08.470
for the locations class.
179

179

00:08:09.580  -->  00:08:12.260
And now we're gonna do try.
180

180

00:08:12.260  -->  00:08:16.310
And it's going to be
ObjectInputStream this time.
181

181

00:08:16.310  -->  00:08:20.480
And locFile is equal to new
ObjectInputStream this time,
182

182

00:08:21.820  -->  00:08:24.210
new BufferedInputStream
183

183

00:08:24.210  -->  00:08:27.290
and Files dot newInputStream locPath.
184

184

00:08:31.040  -->  00:08:34.150
All right, then let's write the
code now to get the objects:
185

185

00:08:34.150  -->  00:08:36.590
boolean E-O-F equals false.
186

186

00:08:36.590  -->  00:08:40.310
And then we'll do a while
and not end of file.
187

187

00:08:40.310  -->  00:08:41.620
We want a try there.
188

188

00:08:41.620  -->  00:08:45.620
And we're gonna catch the
end of file exception.
189

189

00:08:47.700  -->  00:08:50.570
And we'll put E-O-F equals
true for that whole exception.
190

190

00:08:50.570  -->  00:08:51.720
And the code in here is gonna be:
191

191

00:08:51.720  -->  00:08:53.810
Location location equals,
192

192

00:08:56.440  -->  00:08:58.070
casting it to location
193

193

00:08:58.070  -->  00:08:59.990
locfile dot readObject.
194

194

00:09:03.420  -->  00:09:06.420
Then we want to do locations dot put
195

195

00:09:07.330  -->  00:09:10.830
location dot getLocationID comma location.
196

196

00:09:12.480  -->  00:09:15.250
And we've got another exception
that we need to catch here.
197

197

00:09:15.250  -->  00:09:16.080
And another one here.
198

198

00:09:16.080  -->  00:09:17.210
Because, if you remember the code
199

199

00:09:17.210  -->  00:09:18.800
when we've done this previously,
200

200

00:09:18.800  -->  00:09:20.340
we had a number of exceptions.
201

201

00:09:20.340  -->  00:09:21.750
We do a catch.
202

202

00:09:21.750  -->  00:09:25.330
This one is InvalidClassException.
203

203

00:09:25.330  -->  00:09:28.960
We get that and we'll
just print out a message.
204

204

00:09:28.960  -->  00:09:30.710
InvalidClassException
205

205

00:09:31.970  -->  00:09:33.560
plus e.getMessage.
206

206

00:09:33.560  -->  00:09:34.700
You could have just put
it down the stack trace
207

207

00:09:34.700  -->  00:09:35.920
if you wanted to.
208

208

00:09:35.920  -->  00:09:39.080
We also want to catch the IOException.
209

209

00:09:45.810  -->  00:09:47.220
For that, we print out
the message as well.
210

210

00:09:47.220  -->  00:09:49.690
And then the third one
we do want to catch here
211

211

00:09:49.690  -->  00:09:52.450
is the ClassNotFoundException.
212

212

00:09:52.450  -->  00:09:54.370
ClassNotFoundException.
213

213

00:09:56.780  -->  00:10:00.690
And that was going to be
ClassNotFoundException
214

214

00:10:03.400  -->  00:10:04.480
e.getMessage.
215

215

00:10:05.400  -->  00:10:06.670
So the code is very similar,
216

216

00:10:06.670  -->  00:10:09.150
almost identical to
what we used previously
217

217

00:10:09.150  -->  00:10:11.730
to read objects from locations dot dat,
218

218

00:10:11.730  -->  00:10:14.510
except we're using the
Files dot newInputStream
219

219

00:10:14.510  -->  00:10:16.450
up here on line 51,
220

220

00:10:16.450  -->  00:10:18.830
using that method to
create an input stream.
221

221

00:10:18.830  -->  00:10:21.950
And then we're wrapping that
with a BufferedInputStream.
222

222

00:10:21.950  -->  00:10:24.180
And then we're finally wrapping that
223

223

00:10:24.180  -->  00:10:26.430
with an ObjectInputStream.
224

224

00:10:26.430  -->  00:10:27.620
Okay, so if we run that,
225

225

00:10:27.620  -->  00:10:31.040
we should find that our code still works.
226

226

00:10:33.550  -->  00:10:35.380
And obviously we're
not getting any errors,
227

227

00:10:35.380  -->  00:10:36.350
which is a good thing.
228

228

00:10:36.350  -->  00:10:37.910
We're also not getting any output anymore,
229

229

00:10:37.910  -->  00:10:41.580
because we didn't put any
debugging code in our main code,
230

230

00:10:41.580  -->  00:10:46.500
but also not in our static
initializer block either.
231

231

00:10:46.500  -->  00:10:49.250
So, essentially you can use
Files dot newInputStream
232

232

00:10:49.250  -->  00:10:52.870
and Files dot newOutputStream
to create any stream
233

233

00:10:52.870  -->  00:10:54.780
that descends from input stream
234

234

00:10:54.780  -->  00:10:57.460
and output stream respectively.
235

235

00:10:57.460  -->  00:10:58.800
All right, so at this
point you now know how
236

236

00:10:58.800  -->  00:11:01.050
to use Java.nio classes
237

237

00:11:01.050  -->  00:11:04.790
to create commonly-used Java.io streams.
238

238

00:11:04.790  -->  00:11:06.380
In the next video, we're
going to start looking
239

239

00:11:06.380  -->  00:11:08.580
at how to read and write text files
240

240

00:11:08.580  -->  00:11:11.470
using Java.nio exclusively.
241

241

00:11:11.470  -->  00:11:12.950
And if you recall, a few videos ago
242

242

00:11:12.950  -->  00:11:16.170
I said that doing IO using Java.nio
243

243

00:11:16.170  -->  00:11:18.700
means the data is processed in blocks
244

244

00:11:18.700  -->  00:11:21.120
rather than one byte
or character at a time.
245

245

00:11:21.120  -->  00:11:24.570
So, to accomplish this, Java.nio
uses channels and buffers
246

246

00:11:24.570  -->  00:11:26.450
and sometimes selectors.
247

247

00:11:26.450  -->  00:11:29.670
So let's start looking at
channels, buffers, and selectors
248

248

00:11:29.670  -->  00:11:34.280
in figuring out how to use
Jave.nio to do all our IO
249

249

00:11:34.280  -->  00:11:35.780
in the next video.
