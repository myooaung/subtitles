WEBVTT
1
1

00:00:05.360  -->  00:00:07.660
So another useful Java keyword is final.
2

2

00:00:07.660  -->  00:00:11.160
You use that generally to
define constant values.
3

3

00:00:11.160  -->  00:00:14.530
So strictly speaking,
final fields are not actually constants,
4

4

00:00:14.530  -->  00:00:17.890
because they can be modified but
only once, and
5

5

00:00:17.890  -->  00:00:22.090
any modification must be performed
before the class constructor finishes.
6

6

00:00:22.090  -->  00:00:25.350
So what that means is that we can
assign a final field it's value
7

7

00:00:25.350  -->  00:00:28.970
either when we first declare it,
or in the constructor.
8

8

00:00:28.970  -->  00:00:31.690
So as an example,
we'll create a test class here.
9

9

00:00:31.690  -->  00:00:34.040
We'll just call it some class.
10

10

00:00:34.040  -->  00:00:35.050
Some class.
11

11

00:00:36.230  -->  00:00:38.540
So we can create a final variable here.
12

12

00:00:39.560  -->  00:00:43.190
And we can create the final
field as a private,
13

13

00:00:43.190  -->  00:00:48.590
final int instanceNumber equals 1.
14

14

00:00:48.590  -->  00:00:50.610
So I can do it in there.
15

15

00:00:55.030  -->  00:00:59.040
I'll just tidy that up a bit...we could
also do it in the constructor, like so,
16

16

00:00:59.040  -->  00:01:02.120
we could put something
like...instanceNumber equals 1.
17

17

00:01:02.120  -->  00:01:05.730
Now, both of these examples
obviously do the same thing.
18

18

00:01:05.730  -->  00:01:09.550
The field instance number set to 1 and
because it was marked
19

19

00:01:09.550  -->  00:01:13.640
final its value can't be changed
any where else in the class, or
20

20

00:01:13.640  -->  00:01:16.430
if we made it public from any
where outside of the class either.
21

21

00:01:16.430  -->  00:01:19.690
But in this case it's usual to assign
the value and declaring the field,
22

22

00:01:19.690  -->  00:01:22.400
but if you prefer you can
use a constructor instead.
23

23

00:01:22.400  -->  00:01:26.120
Now one reason why you might want to and
might need to initialize the variable in
24

24

00:01:26.120  -->  00:01:30.890
the constructor Would be if its value is a
result of some calculation that you know,
25

25

00:01:30.890  -->  00:01:34.990
perhaps relies on some other code as
such as a method from another class.
26

26

00:01:34.990  -->  00:01:37.510
As an example,
when reading a record from a database,
27

27

00:01:37.510  -->  00:01:42.100
you might wanna store the class instances
unique database's key which wouldn't be
28

28

00:01:42.100  -->  00:01:45.930
available until you read the record from
 the database but then ready to create
29

29

00:01:45.930  -->  00:01:50.730
the class instance from the database field
So we haven't created databases yet.
30

30

00:01:50.730  -->  00:01:52.680
So that's a mechanism to
show how this would work.
31

31

00:01:52.680  -->  00:01:54.920
What we'll do is we'll
create a mechanism for
32

32

00:01:54.920  -->  00:01:59.730
ensuring that every instance of a class
has a unique instance number, or ID.
33

33

00:01:59.730  -->  00:02:01.620
What this will require is for
34

34

00:02:01.620  -->  00:02:06.360
us to track a variable each time
a new class instance is created.
35

35

00:02:06.360  -->  00:02:09.660
So this is an ideal candidate for
using a class variable.
36

36

00:02:09.660  -->  00:02:11.520
As we saw in the previous lecture.
37

37

00:02:11.520  -->  00:02:13.910
So what we'll do is we'll
make instance number public,
38

38

00:02:13.910  -->  00:02:16.070
to make it easy to demonstrate
that it can't be changed.
39

39

00:02:16.070  -->  00:02:19.520
But normally,
when doing this you'd make it private.
40

40

00:02:19.520  -->  00:02:23.400
So I'm gonna change this now,
this public final and instance number.
41

41

00:02:23.400  -->  00:02:24.750
I'm gonna remove the initialization.
42

42

00:02:26.430  -->  00:02:28.060
And as I mentioned I'm
gonna change it to public.
43

43

00:02:29.330  -->  00:02:32.930
So what we'll also do is we'll, how about,
44

44

00:02:32.930  -->  00:02:38.310
study variable...call it class counter.
45

45

00:02:38.310  -->  00:02:40.120
Set that equal to 0.
46

46

00:02:40.120  -->  00:02:46.770
Then we need a string for a name,
so private--final string name.
47

47

00:02:46.770  -->  00:02:48.070
So, we're gonna have constructor.
48

48

00:02:48.070  -->  00:02:49.360
We know we're going accept a parameter.
49

49

00:02:49.360  -->  00:02:52.490
And this is IntelliiJ complaining
that it may not be initialized but
50

50

00:02:52.490  -->  00:02:54.980
we'll fix that in our code shortly.
51

51

00:02:54.980  -->  00:02:58.740
So, we use a parameter for
the constructor.
52

52

00:02:58.740  -->  00:03:04.660
This.name = name and
now IntelliJ's happy on line 10.
53

53

00:03:04.660  -->  00:03:06.830
And we'll increment the class counter.
54

54

00:03:06.830  -->  00:03:10.040
Because we're instantiating
a new version of this class and
55

55

00:03:10.040  -->  00:03:15.340
we'll say instanceNumber
equal to classCounter.
56

56

00:03:15.340  -->  00:03:22.260
Then what we'll do is,
we'll output name
57

57

00:03:22.260  -->  00:03:28.640
created, instance is + instanceNumber.
58

58

00:03:28.640  -->  00:03:31.270
So that's our constructor.
59

59

00:03:31.270  -->  00:03:33.030
Now we just want to put
a getter there as well.
60

60

00:03:33.030  -->  00:03:37.120
So we're going to put getter for
our instance number.
61

61

00:03:38.130  -->  00:03:38.980
Like so.
62

62

00:03:38.980  -->  00:03:42.220
So let's go back now to main and
create some instances of this class.
63

63

00:03:44.120  -->  00:03:52.380
So we'll put SomeClass one
equals new SomeClass "one".
64

64

00:03:52.380  -->  00:04:00.070
SomeClass two equals
new SomeClass "two" and
65

65

00:04:00.070  -->  00:04:06.680
SomeClass three is new SomeClass "three"
66

66

00:04:08.080  -->  00:04:12.520
So if we run that, We
67

67

00:04:12.520  -->  00:04:16.590
can see unlike in the discussion of static
where we had a getter for the static field and
68

68

00:04:16.590  -->  00:04:20.320
we always got the same value,
whichever class this is recorded on,
69

69

00:04:20.320  -->  00:04:24.860
here we're actually storing the
incremented static value in a class field.
70

70

00:04:24.860  -->  00:04:28.550
And so each instance of a class
will maintain its own value, For
71

71

00:04:28.550  -->  00:04:29.990
instance number, as we can see.
72

72

00:04:29.990  -->  00:04:34.050
So, just to demonstrate that,
what I mean, is we can put
73

73

00:04:35.350  -->  00:04:39.680
one.getInstanceNumber...two.
74

74

00:04:39.680  -->  00:04:44.990
two.getInstanceNumber and
three.getInstanceNumber.
75

75

00:04:44.990  -->  00:04:48.290
So, if we run that, And
76

76

00:04:48.290  -->  00:04:52.390
notice how they're all maintaining
their own value for instance number.
77

77

00:04:52.390  -->  00:04:54.140
So by making instance number final,
78

78

00:04:54.140  -->  00:04:59.160
the value, its value can't be changed
once the class instance has been created.
79

79

00:04:59.160  -->  00:05:02.600
So, attempting to do so will give
an error, and the code won't even compile.
80

80

00:05:02.600  -->  00:05:03.700
As an example.
81

81

00:05:03.700  -->  00:05:06.750
For instance,
we set instance number to a public.
82

82

00:05:06.750  -->  00:05:09.900
one.InstanceNumber
InstanceNumber equal four,
83

83

00:05:09.900  -->  00:05:12.890
we actually get an error immediately.
84

84

00:05:12.890  -->  00:05:16.430
Cannot assign a value to final
variable instanceNumber.
85

85

00:05:16.430  -->  00:05:19.670
So it's actually a good idea to mark
variables as final whenever you
86

86

00:05:19.670  -->  00:05:23.610
know that the value shouldn't be changed
once the initial value's been set.
87

87

00:05:23.610  -->  00:05:27.200
And a constant value Would be
an ideal candidate for that.
88

88

00:05:27.200  -->  00:05:30.670
That said though, you may be used to
seeing constant values in Java you have
89

89

00:05:30.670  -->  00:05:35.030
done some coding before declared using
static final and that is more normal for
90

90

00:05:35.030  -->  00:05:39.660
constant, our instance number
here going back to the code
91

91

00:05:39.660  -->  00:05:43.260
was not being treated as a constant
because we didn't want to assign its value but
92

92

00:05:43.260  -->  00:05:46.620
we only wanted to assign it once and we
didn't want it to change after that point.
93

93

00:05:46.620  -->  00:05:50.310
And that is also why we didn't use
uppercase for the variable name
94

94

00:05:50.310  -->  00:05:52.680
If you remember from the discussion
on naming conventions,
95

95

00:05:52.680  -->  00:05:55.570
constant variable names
should be in upper case.
96

96

00:05:55.570  -->  00:05:57.700
So why are constants
declared a static final?
97

97

00:05:57.700  -->  00:06:02.020
Well the reason is that if the value
really is a constant and won't change,
98

98

00:06:02.020  -->  00:06:06.740
then it doesn't make sense to store a copy
of that in every single class instance.
99

99

00:06:06.740  -->  00:06:08.420
They all hold the same value so
100

100

00:06:08.420  -->  00:06:11.350
it makes sense to store it
only once at the class level.
101

101

00:06:11.350  -->  00:06:15.790
So hence, values that are constant
are usually declared using static final.
102

102

00:06:15.790  -->  00:06:19.400
We can see examples of this right
throughout the Java framework.
103

103

00:06:19.400  -->  00:06:20.780
One example is in the Math package.
104

104

00:06:20.780  -->  00:06:22.420
So if we go back to our main method.
105

105

00:06:22.420  -->  00:06:24.970
And I'll just out that error.
106

106

00:06:24.970  -->  00:06:30.000
We could do something like print out math
107

107

00:06:31.520  -->  00:06:34.600
using the Java Math library.pi.
108

108

00:06:34.600  -->  00:06:36.410
And that's pi in uppercase there.
109

109

00:06:36.410  -->  00:06:39.490
And if we just hover over that and
have a look, public, static,
110

110

00:06:39.490  -->  00:06:42.910
final, double pi you can see there and
it's obviously got the value of pi.
111

111

00:06:42.910  -->  00:06:47.120
So it's declared as a public
static final double.
112

112

00:06:47.120  -->  00:06:50.170
So it's usual to assign the value
of static field variables at
113

113

00:06:50.170  -->  00:06:54.370
the time they're declared but again they
can be done after in a similar manner
114

114

00:06:54.370  -->  00:06:57.480
to non-static final fields and
we'll see that shortly.
115

115

00:06:57.480  -->  00:06:59.040
First, though,
we'll stay with the Math class,
116

116

00:06:59.040  -->  00:07:00.780
because we want to have a look
at another use of final, so
117

117

00:07:00.780  -->  00:07:04.010
what we're going to do is we'll just
make a little bit of a change here,
118

118

00:07:04.010  -->  00:07:06.290
to create an instance of Math so
we can do some sums.
119

119

00:07:06.290  -->  00:07:11.590
So, we're gonna type after that line,
Math m equals new Math.
120

120

00:07:15.940  -->  00:07:16.960
Oh dear.
121

121

00:07:16.960  -->  00:07:19.360
Unfortunately that doesn't work,
and we get the error.
122

122

00:07:19.360  -->  00:07:21.800
Math has private access in Java.Lang.Math.
123

123

00:07:21.800  -->  00:07:23.140
So, we just hover over that.
124

124

00:07:23.140  -->  00:07:29.010
So, if we right click on that now to go
to the class declaration Declaration.
125

125

00:07:29.010  -->  00:07:32.020
You can see there,
there's actually a comment above the code.
126

126

00:07:32.020  -->  00:07:35.610
And it says,
don't let anyone instantiate this class.
127

127

00:07:35.610  -->  00:07:38.810
And so the reason we're getting that
error is the constructor has been
128

128

00:07:38.810  -->  00:07:39.570
marked private.
129

129

00:07:39.570  -->  00:07:43.880
And that's to prevent, as you saw in our code
130

130

00:07:43.880  -->  00:07:48.880
instances of it being created and
the reason I did that in the next class
131

131

00:07:48.880  -->  00:07:53.940
is all the next Math class' methods
are static as well and they are all
132

132

00:07:53.940  -->  00:07:58.890
available without requiring instance. So to
make that clear and to actually enforce it,
133

133

00:07:58.890  -->  00:08:02.740
the creators of this class, the math
class, made the constructor private and
134

134

00:08:02.740  -->  00:08:06.770
that prevents any instances from being created.
Now, ah! you might think,
135

135

00:08:06.770  -->  00:08:11.910
I can get around that by creating a
subclass of math Which I can instantiate.
136

136

00:08:11.910  -->  00:08:15.340
Unfortunately or actually fortunately,
creators have thought of this as well and
137

137

00:08:15.340  -->  00:08:19.560
have stopped you from wasting your time by
declaring the Math class up here as final.
138

138

00:08:19.560  -->  00:08:21.620
So, by marking a class as final,
139

139

00:08:21.620  -->  00:08:25.620
applying that to a class, it prevents
the class from being sub-classed so
140

140

00:08:25.620  -->  00:08:28.990
any attempt to extend Math will fail
because it's been marked final.
141

141

00:08:28.990  -->  00:08:29.940
So just to confirm that.
142

142

00:08:31.900  -->  00:08:35.620
Try extends math and
you are going to get an error.
143

143

00:08:35.620  -->  00:08:39.870
There is no default constructor available and
that also has to do with the fact that it
144

144

00:08:39.870  -->  00:08:43.220
is only when you have got
a private instructor.
145

145

00:08:43.220  -->  00:08:44.440
So I'm just gonna undo that.
146

146

00:08:44.440  -->  00:08:47.620
The bottom line is that anyway
by marking a class as final,
147

147

00:08:47.620  -->  00:08:50.950
you can prevent your class
from being subclassed.
148

148

00:08:50.950  -->  00:08:56.420
Now its possible that you might wish that
a class you're creating to be extended or
149

149

00:08:56.420  -->  00:09:00.170
subclassed, but you might have one or more
methods that are crucial to the correct
150

150

00:09:00.170  -->  00:09:04.050
operation of your class But you don't
want just those to be overridden.
151

151

00:09:04.050  -->  00:09:07.260
So, in that case, marking the methods
as final will prevent them
152

152

00:09:07.260  -->  00:09:11.350
from being overridden, even if you do
allow the class itself to be subclassed.
153

153

00:09:11.350  -->  00:09:14.990
So, just to demonstrate that, I'll close
down this Math.java now, and
154

154

00:09:14.990  -->  00:09:16.950
we'll create a new class.
155

155

00:09:18.730  -->  00:09:21.200
We'll call it public,
we'll call it password.
156

156

00:09:22.410  -->  00:09:23.000
And I'll just close down the wrong window.
157

157

00:09:23.000  -->  00:09:27.000
So, let's firstly create
a static final int key.
158

158

00:09:27.000  -->  00:09:33.920
Key equals 748576362, could be any number.
159

159

00:09:35.910  -->  00:09:41.710
Private final int encrypted password.
160

160

00:09:43.650  -->  00:09:47.980
We'll create a constructor, and
we'll pass the password in.
161

161

00:09:47.980  -->  00:09:50.710
What we'll do is we'll also
have an encrypt function so,
162

162

00:09:50.710  -->  00:09:55.130
the password would come in just
as a password and encrypted and
163

163

00:09:55.130  -->  00:10:01.440
move our function to
encrypt the password so
164

164

00:10:01.440  -->  00:10:05.450
So I'm writing a function that
will encrypt or decrypt and
165

165

00:10:05.450  -->  00:10:08.940
then save it into the encrypted password,
which is encrypted at that point.
166

166

00:10:08.940  -->  00:10:12.890
And let's do something really simple
there with the encryptDecrypt.
167

167

00:10:12.890  -->  00:10:13.810
This is just an example.
168

168

00:10:13.810  -->  00:10:19.460
Private int encryptDecrypt setting
a parameter of the password
169

169

00:10:21.170  -->  00:10:24.450
And, which return password.
170

170

00:10:24.450  -->  00:10:27.160
key.set.
171

171

00:10:27.160  -->  00:10:30.820
And, that's using an XOR
to XOR the values there.
172

172

00:10:30.820  -->  00:10:34.960
And, then we'll store the passwords so
we need another one, more public.
173

173

00:10:34.960  -->  00:10:39.620
public void
174

174

00:10:39.620  -->  00:10:45.010
storePassword
175

175

00:10:45.010  -->  00:10:49.780
Saving password as
176

176

00:10:49.780  -->  00:10:52.800
This dot encrypted password.
177

177

00:10:52.800  -->  00:10:55.090
Sorry, encrypted password.
178

178

00:10:56.840  -->  00:11:00.910
And we would test it to confirm, or
to check whether the password's valid.
179

179

00:11:00.910  -->  00:11:01.960
So I'm gonna type public.
180

180

00:11:01.960  -->  00:11:10.240
public boolean letMeIn which accepts
a password as a parameter.
181

181

00:11:10.240  -->  00:11:15.780
Then we will put if encrypted--
encryptDecrypt
182

182

00:11:15.780  -->  00:11:21.160
password is equal to password on file.
183

183

00:11:23.110  -->  00:11:29.940
Then we will print some sort of
welcome message, welcome return true,
184

184

00:11:29.940  -->  00:11:37.310
else "Nope you cannot come in" return false
185

185

00:11:39.090  -->  00:11:40.510
And that should have up there,
that shouldn't change,
186

186

00:11:40.510  -->  00:11:42.070
that should be just password.
187

187

00:11:42.070  -->  00:11:46.320
We're passing the unencrypted password
to the encryptDecrypt method.
188

188

00:11:46.320  -->  00:11:47.850
So, the encryption, as I mentioned,
189

189

00:11:47.850  -->  00:11:51.780
is a very basic XOR Which just
checks the bits in the two values and
190

190

00:11:51.780  -->  00:11:55.770
returns a 1 in any position where there
is a 1 in only one of the values.
191

191

00:11:55.770  -->  00:12:00.140
So if you apply the XOR operation to the
result you get back your original value.
192

192

00:12:00.140  -->  00:12:03.710
It does have applications in
the field of cryptography.
193

193

00:12:03.710  -->  00:12:07.840
Although used in a much, much more
complex manner than what I've done there.
194

194

00:12:07.840  -->  00:12:09.270
So in main, go back to main now.
195

195

00:12:10.660  -->  00:12:11.480
Get rid of the other error
196

196

00:12:11.480  -->  00:12:17.890
I am going to create a new password instance,
called storePassword so
197

197

00:12:17.890  -->  00:12:22.860
we are going to put password equals
674312 equal
198

198

00:12:24.420  -->  00:12:29.730
Password password= new Password (pw).
199

199

00:12:29.730  -->  00:12:35.280
Then we'll put password.storePassword.
200

200

00:12:35.280  -->  00:12:40.210
So if you run that Saving
password as 747902050,
201

201

00:12:40.210  -->  00:12:45.200
and of course that's completely different
to the number that we passed to it.
202

202

00:12:45.200  -->  00:12:48.150
Now this is an example of why you'd
want to prevent one of your methods
203

203

00:12:48.150  -->  00:12:53.070
from being overwritten, not as an example
of how to encrypt storing in a database.
204

204

00:12:53.070  -->  00:12:55.940
So cryptography is a very complex subject.
205

205

00:12:55.940  -->  00:12:59.950
And I would strongly advise you to use an
existing cryptography library, if you ever
206

206

00:12:59.950  -->  00:13:02.900
really needed to encrypt passwords or
anything else for that matter.
207

207

00:13:02.900  -->  00:13:06.200
By all means, write your own cryptography
library once you've completed [LAUGH]
208

208

00:13:06.200  -->  00:13:08.890
a PhD in the subject, but
until then don't be tempted.
209

209

00:13:08.890  -->  00:13:09.890
Trust me on this one.
210

210

00:13:09.890  -->  00:13:11.830
So anyway, getting back to our example,
211

211

00:13:11.830  -->  00:13:16.460
the constructor getting back to our code
So the constructor takes the password and
212

212

00:13:16.460  -->  00:13:21.180
encrypts it as you can see and encrypts it
setting a field storing the encryptability
213

213

00:13:21.180  -->  00:13:24.040
so that can be checked when
the user attempts to log in.
214

214

00:13:24.040  -->  00:13:28.430
So lets call the letMeIn method, with a few passwords
to check to see if it is working.
215

215

00:13:28.430  -->  00:13:32.280
So I came back down here Now,
main, so, we stored the passwords,
216

216

00:13:32.280  -->  00:13:38.470
we'll now see if we can,
get in the password.letMein 1.
217

217

00:13:38.470  -->  00:13:43.000
password.letMeIn 523266
218

218

00:13:43.000  -->  00:13:45.680
And this makes this a bit easier for
copying.
219

219

00:13:47.260  -->  00:13:49.400
We'll try another one, 9773.
220

220

00:13:49.400  -->  00:13:52.830
Try another one, maybe 0.
221

221

00:13:52.830  -->  00:13:53.570
-1.
222

222

00:13:55.790  -->  00:14:00.000
Then we'll do our correct currently 674312.
223

223

00:14:00.000  -->  00:14:04.950
So if we run that, we should get an error
on all of them other than the last one.
224

224

00:14:04.950  -->  00:14:08.230
Nope, you cannot come into the first five,
and then the last one Welcome,
225

225

00:14:08.230  -->  00:14:10.790
we're able to get in because we
specific the right password.
226

226

00:14:10.790  -->  00:14:13.890
So you can see that work and
the last example correctly logged us in.
227

227

00:14:13.890  -->  00:14:18.360
The first five entries, the first
five passwords we tried all failed.
228

228

00:14:18.360  -->  00:14:21.000
But the problem actually comes
if someone overrides the stored
229

229

00:14:21.000  -->  00:14:23.140
password method in the sub class.
230

230

00:14:23.140  -->  00:14:26.640
So I'm gonna end the video here, but in
the next video we'll extend on from that.
231

231

00:14:26.640  -->  00:14:30.370
And talk about the problems, and want to
actually create a new class that extends
232

232

00:14:30.370  -->  00:14:33.950
from this one, and show you how to
get around the issues that will come up.
233

233

00:14:33.950  -->  00:14:35.030
So, see you in the next video.
