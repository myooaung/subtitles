1
1

00:00:05,167  -->  00:00:06,010
<v Tim>All right, so moving on</v>
2

2

00:00:06,010  -->  00:00:08,260
in our discussion of expression statements,
3

3

00:00:08,260  -->  00:00:10,020
we ended the last video talking about
4

4

00:00:10,020  -->  00:00:11,950
the first expression group
5

5

00:00:11,950  -->  00:00:14,340
that could be converted to an expression statement.
6

6

00:00:14,340  -->  00:00:15,920
The second type that can be converted
7

7

00:00:15,920  -->  00:00:18,277
is the use of the increment, ++,
8

8

00:00:18,277  -->  00:00:20,793
or decrement, --, operators.
9

9

00:00:21,890  -->  00:00:24,080
So let's have a look at some code to understand that.
10

10

00:00:24,080  -->  00:00:25,867
So I'm going to start by typing int
11

11

00:00:26,940  -->  00:00:28,963
playerLives is equal to three,
12

12

00:00:30,240  -->  00:00:32,650
and we're going to use a decrement operator
13

13

00:00:32,650  -->  00:00:34,290
to subtract a score from the player.
14

14

00:00:34,290  -->  00:00:36,340
So let's assume we've got a game.
15

15

00:00:36,340  -->  00:00:38,290
We wanna deduct a life from the player.
16

16

00:00:38,290  -->  00:00:39,172
We could use this.
17

17

00:00:39,172  -->  00:00:43,313
We could type playersLives-- semicolon.
18

18

00:00:44,200  -->  00:00:45,160
So what we've done there is
19

19

00:00:45,160  -->  00:00:47,460
we've created an expression statement,
20

20

00:00:47,460  -->  00:00:49,780
and it deductions one from the current value
21

21

00:00:49,780  -->  00:00:51,740
of playersLives.
22

22

00:00:51,740  -->  00:00:53,930
Now we can also use that as an expression.
23

23

00:00:53,930  -->  00:00:55,790
Clearly here, because we've got a semicolon
24

24

00:00:55,790  -->  00:00:56,900
on the end of the line,
25

25

00:00:56,900  -->  00:00:59,680
we're using it as an expression statement,
26

26

00:00:59,680  -->  00:01:01,290
but let's comment that out for now
27

27

00:01:01,290  -->  00:01:02,693
and use it in an expression.
28

28

00:01:04,240  -->  00:01:06,680
So what I'm going to do instead is type
29

29

00:01:06,680  -->  00:01:08,530
System.out.println,
30

30

00:01:08,530  -->  00:01:12,960
then put double quotes Lives remaining equals.
31

31

00:01:12,960  -->  00:01:13,940
Then outside of the double quotes,
32

32

00:01:13,940  -->  00:01:17,410
I'm going to put plus and our variable playersLives,
33

33

00:01:17,410  -->  00:01:19,537
and I'm gonna add the decrement operator, --,
34

34

00:01:19,537  -->  00:01:21,706
to the end of that line,
35

35

00:01:21,706  -->  00:01:25,420
and here, what we're doing is we're using playersLives--
36

36

00:01:25,420  -->  00:01:27,090
as an expression.
37

37

00:01:27,090  -->  00:01:31,180
So it's not playersLives-- on a line by itself anymore
38

38

00:01:31,180  -->  00:01:33,340
as we've got commented out on line 17.
39

39

00:01:33,340  -->  00:01:35,327
It's now part of line 18,
40

40

00:01:35,327  -->  00:01:36,993
and it's used as an expression.
41

41

00:01:37,830  -->  00:01:39,270
So looking at this code,
42

42

00:01:39,270  -->  00:01:41,560
you'd probably think that if we run this,
43

43

00:01:41,560  -->  00:01:44,580
we should see the value two being outputted on the screen.
44

44

00:01:44,580  -->  00:01:46,793
Let's actually run this and see what happens.
45

45

00:01:48,319  -->  00:01:50,810
Now weirdly, you can see the output shows
46

46

00:01:50,810  -->  00:01:53,070
Lives remaining equals three,
47

47

00:01:53,070  -->  00:01:55,070
even though we can clearly see on line 15
48

48

00:01:55,070  -->  00:01:57,940
that we've defined the playersLives equals three,
49

49

00:01:57,940  -->  00:02:00,840
and on line 18, we've used the decrement operator,
50

50

00:02:00,840  -->  00:02:04,230
the --, to deduct one from playersLives,
51

51

00:02:04,230  -->  00:02:08,330
so in fact, why is lives remaining showing as three?
52

52

00:02:08,330  -->  00:02:09,860
Well, this is a good time to talk more about
53

53

00:02:09,860  -->  00:02:12,143
the increment and decrement operators.
54

54

00:02:14,550  -->  00:02:18,330
So when we add a -- or a ++ to a variable,
55

55

00:02:18,330  -->  00:02:21,007
it decrements or increments the value by one,
56

56

00:02:21,007  -->  00:02:23,530
and we have seen that earlier in the course,
57

57

00:02:23,530  -->  00:02:27,260
but we can dictate when the decrement or increment happens,
58

58

00:02:27,260  -->  00:02:31,450
either before or after the expression is evaluated,
59

59

00:02:31,450  -->  00:02:34,663
and this is referred to as prefix and postfix.
60

60

00:02:36,060  -->  00:02:37,760
So let's review the code below.
61

61

00:02:37,760  -->  00:02:40,140
So we've got int playerLives equals three.
62

62

00:02:40,140  -->  00:02:41,617
System.out.println.
63

63

00:02:41,617  -->  00:02:45,370
Then we've got Lives equal plus playerLives--.
64

64

00:02:45,370  -->  00:02:47,420
Now that currently outputs the value of three.
65

65

00:02:47,420  -->  00:02:50,240
We saw that IntelliJ a moment ago.
66

66

00:02:50,240  -->  00:02:52,830
Now the reason that returns the value three
67

67

00:02:52,830  -->  00:02:56,060
is because the variable playersLives was read
68

68

00:02:56,060  -->  00:02:58,570
and the value obtained, three in this case,
69

69

00:02:58,570  -->  00:03:02,260
before the decrement was executed or processed.
70

70

00:03:02,260  -->  00:03:05,910
So the decrement was considered, it was postfix.
71

71

00:03:05,910  -->  00:03:07,650
In other words, it was done or completed
72

72

00:03:07,650  -->  00:03:09,640
after the value was returned
73

73

00:03:09,640  -->  00:03:11,460
to the System.out.println process
74

74

00:03:11,460  -->  00:03:13,230
and outputted on the screen.
75

75

00:03:13,230  -->  00:03:15,160
Now we can confirm that or we could confirm that
76

76

00:03:15,160  -->  00:03:17,810
by adding another line of code directly below
77

77

00:03:17,810  -->  00:03:20,750
which is just, as you can see, a System.out.println.
78

78

00:03:20,750  -->  00:03:21,730
Basically, what we've got,
79

79

00:03:21,730  -->  00:03:24,600
we just removed the decrement operator, the --.
80

80

00:03:24,600  -->  00:03:26,580
Now if we put that in IntelliJ and run that,
81

81

00:03:26,580  -->  00:03:28,780
the output of that will then be two.
82

82

00:03:28,780  -->  00:03:31,320
Now the reason it'll show two on the second line
83

83

00:03:31,320  -->  00:03:33,480
is because playersLives or playerLives
84

84

00:03:33,480  -->  00:03:36,150
was decremented by one on the first line.
85

85

00:03:36,150  -->  00:03:38,040
So that's postfix.
86

86

00:03:38,040  -->  00:03:39,683
Let's now look at prefix.
87

87

00:03:41,000  -->  00:03:42,640
So looking at the code again,
88

88

00:03:42,640  -->  00:03:44,080
it's pretty well identical to what you saw
89

89

00:03:44,080  -->  00:03:45,110
in the previous slide,
90

90

00:03:45,110  -->  00:03:48,960
but in this case, we put the -- to the left-hand side
91

91

00:03:48,960  -->  00:03:50,987
of the playerLives variable.
92

92

00:03:50,987  -->  00:03:52,600
Now what will happen in this case
93

93

00:03:52,600  -->  00:03:55,610
is we'll immediately get the outputted value two,
94

94

00:03:55,610  -->  00:03:57,300
and the reason that we get two on that line
95

95

00:03:57,300  -->  00:03:59,300
is that the value two is returned
96

96

00:03:59,300  -->  00:04:02,020
because playerLives was read and decremented by one
97

97

00:04:02,020  -->  00:04:03,460
and only at that point
98

98

00:04:03,460  -->  00:04:06,020
was the result of the operation returned.
99

99

00:04:06,020  -->  00:04:08,150
So the decrement was prefix,
100

100

00:04:08,150  -->  00:04:09,950
done before the value was outputted,
101

101

00:04:09,950  -->  00:04:11,490
in other words, or sent back
102

102

00:04:11,490  -->  00:04:13,820
to the System.out.println process
103

103

00:04:13,820  -->  00:04:15,690
for outputting on the screen.
104

104

00:04:15,690  -->  00:04:18,403
So let's go back to IntelliJ and type in some code
105

105

00:04:18,403  -->  00:04:20,053
just to test how this works.
106

106

00:04:21,191  -->  00:04:22,024
All right, so firstly,
107

107

00:04:22,024  -->  00:04:24,080
here we are with the code we finished on
108

108

00:04:24,080  -->  00:04:26,200
previously with our playerLives--,
109

109

00:04:26,200  -->  00:04:27,560
and we've still got the output
110

110

00:04:27,560  -->  00:04:28,830
at the bottom left of the screen
111

111

00:04:28,830  -->  00:04:31,590
showing that lives remaining equals three.
112

112

00:04:31,590  -->  00:04:33,430
So just to verify that playerLives
113

113

00:04:33,430  -->  00:04:35,830
is now set to a value of two,
114

114

00:04:35,830  -->  00:04:39,100
on the next line, I'm going to type System.out.println
115

115

00:04:40,100  -->  00:04:44,387
and Lives is now plus playerLives.
116

116

00:04:44,387  -->  00:04:46,030
Now I'm not adding the decrement operator.
117

117

00:04:46,030  -->  00:04:48,840
I'm just purely outputting what the current value
118

118

00:04:48,840  -->  00:04:49,673
of playerLives is,
119

119

00:04:49,673  -->  00:04:51,950
so we should see two lines of output now.
120

120

00:04:51,950  -->  00:04:53,750
Let's run this and see what happens,
121

121

00:04:55,640  -->  00:04:57,610
and you can see that the first line,
122

122

00:04:57,610  -->  00:04:59,960
or first line that talks about lives,
123

123

00:04:59,960  -->  00:05:01,050
Lives remaining equals three,
124

124

00:05:01,050  -->  00:05:03,587
which is occurring on line 18, returns three,
125

125

00:05:03,587  -->  00:05:05,680
but on the next line, you can see that in fact,
126

126

00:05:05,680  -->  00:05:09,000
what did happen, playerLives was decremented
127

127

00:05:09,000  -->  00:05:10,940
or reduced by one.
128

128

00:05:10,940  -->  00:05:12,880
One was taken from the current value
129

129

00:05:12,880  -->  00:05:15,160
and showing Lives is now two.
130

130

00:05:15,160  -->  00:05:18,150
So we can see that playerLives was actually decremented
131

131

00:05:18,150  -->  00:05:19,430
on line 18,
132

132

00:05:19,430  -->  00:05:21,750
but that happened after the output.
133

133

00:05:21,750  -->  00:05:24,210
That's because the value was done postfix,
134

134

00:05:24,210  -->  00:05:27,323
in other words, after the value was evaluated.
135

135

00:05:28,980  -->  00:05:33,230
All right, so let's now see how the prefix actually works.
136

136

00:05:33,230  -->  00:05:36,080
So we know at this point playerScore
137

137

00:05:38,480  -->  00:05:40,150
is currently set to two.
138

138

00:05:40,150  -->  00:05:41,780
We can see that from our output
139

139

00:05:41,780  -->  00:05:43,720
down at the bottom of the screen.
140

140

00:05:43,720  -->  00:05:46,770
So now we're gonna use the prefix operator
141

141

00:05:46,770  -->  00:05:47,603
and see what happens.
142

142

00:05:47,603  -->  00:05:49,420
So I'm just gonna System.out.println,
143

143

00:05:51,040  -->  00:05:56,040
And subtracting one from lives equals,
144

144

00:05:56,370  -->  00:05:58,210
plus, this time, I'm gonna put a space
145

145

00:05:58,210  -->  00:06:00,057
and then --playerLives.
146

146

00:06:03,120  -->  00:06:05,040
So we're using the prefix version,
147

147

00:06:05,040  -->  00:06:07,640
which, in this case, is the decrement operator
148

148

00:06:07,640  -->  00:06:10,978
to the left of the variable playerLives,
149

149

00:06:10,978  -->  00:06:12,178
and now, if we run that,
150

150

00:06:15,650  -->  00:06:18,100
we can see And subtracting one from lives equals one,
151

151

00:06:18,100  -->  00:06:21,090
so clearly, because we've used the prefix,
152

152

00:06:21,090  -->  00:06:23,150
in other words, we've used it to the left-hand side
153

153

00:06:23,150  -->  00:06:24,930
of the playerLives variable,
154

154

00:06:24,930  -->  00:06:27,440
what's happened is the value has been updated
155

155

00:06:27,440  -->  00:06:30,186
before the line was outputted.
156

156

00:06:30,186  -->  00:06:31,019
You can see the difference.
157

157

00:06:31,019  -->  00:06:33,370
We've got postfix, which doesn't really get,
158

158

00:06:33,370  -->  00:06:35,150
doesn't get updated until afterwards,
159

159

00:06:35,150  -->  00:06:38,583
but prefix gets updated before the output.
160

160

00:06:39,950  -->  00:06:42,190
All right, so that's the decrement operator.
161

161

00:06:42,190  -->  00:06:44,890
Now the ++, so increment operator,
162

162

00:06:44,890  -->  00:06:47,130
can be used in an identical fashion
163

163

00:06:47,130  -->  00:06:48,670
with the only difference being that
164

164

00:06:48,670  -->  00:06:51,200
it's going to increment instead of decrement.
165

165

00:06:51,200  -->  00:06:53,600
So let's print out some code just to confirm it.
166

166

00:06:54,496  -->  00:06:55,580
So we know at the moment,
167

167

00:06:55,580  -->  00:06:57,973
so what I'll do is I'll just take a copy of that line,
168

168

00:07:01,060  -->  00:07:04,357
and we know that playerScore is currently set to one now,
169

169

00:07:04,357  -->  00:07:06,020
and we can see that in the output,
170

170

00:07:06,020  -->  00:07:08,740
the last line of output down the bottom of the screen.
171

171

00:07:08,740  -->  00:07:09,810
So let's type some code.
172

172

00:07:09,810  -->  00:07:14,380
We're going to put System.out.println
173

173

00:07:14,380  -->  00:07:18,867
Lives remaining equals, plus,
174

174

00:07:18,867  -->  00:07:21,630
and we're gonna do playersLives++,
175

175

00:07:21,630  -->  00:07:24,460
and we know from how the decrement operator worked before
176

176

00:07:24,460  -->  00:07:25,563
that we should see,
177

177

00:07:27,060  -->  00:07:30,660
should be the value one there because we're using postfix
178

178

00:07:30,660  -->  00:07:33,130
which doesn't update until the next line,
179

179

00:07:33,130  -->  00:07:35,330
and then, we'll just confirm that by putting
180

180

00:07:36,430  -->  00:07:40,610
Lives is now plus playerLives,
181

181

00:07:40,610  -->  00:07:43,320
and that should be giving,
182

182

00:07:43,320  -->  00:07:44,820
should give us a value of two,
183

183

00:07:46,030  -->  00:07:47,120
and we'll continue on with this,
184

184

00:07:47,120  -->  00:07:50,220
and this time, we'll use the prefix version,
185

185

00:07:50,220  -->  00:07:52,920
so we'll use it on the left-hand side of the variable.
186

186

00:07:54,580  -->  00:07:59,313
And adding one to lives equals plus.
187

187

00:08:00,222  -->  00:08:02,830
So outside of the double quotes, we'll put our plus,
188

188

00:08:02,830  -->  00:08:05,710
space ++playerLives.
189

189

00:08:05,710  -->  00:08:07,150
You can get into difficulty with Java
190

190

00:08:07,150  -->  00:08:09,160
if you try and not put a space between the plus
191

191

00:08:09,160  -->  00:08:10,370
and the other plus.
192

192

00:08:10,370  -->  00:08:11,450
It's gonna get itself confused,
193

193

00:08:11,450  -->  00:08:13,550
so make sure you've got a space there
194

194

00:08:13,550  -->  00:08:15,260
'cause we know that we're actually adding
195

195

00:08:15,260  -->  00:08:16,940
the output playerLives,
196

196

00:08:16,940  -->  00:08:21,030
but we're also using the increment operator as well.
197

197

00:08:21,030  -->  00:08:22,860
All right, so, and we know the output for that.
198

198

00:08:22,860  -->  00:08:25,690
Because we're using the prefix version,
199

199

00:08:25,690  -->  00:08:29,403
the output should be three.
200

200

00:08:32,070  -->  00:08:35,603
All right, so let's run this now and confirm that it works.
201

201

00:08:39,170  -->  00:08:41,130
So looking at the code on line 25,
202

202

00:08:41,130  -->  00:08:42,710
Lives remaining equals one,
203

203

00:08:42,710  -->  00:08:45,080
we expected it to show as one,
204

204

00:08:45,080  -->  00:08:48,500
and that's because the value was calculated postfix
205

205

00:08:48,500  -->  00:08:49,470
after the output,
206

206

00:08:49,470  -->  00:08:52,640
so playersLives is actually set to the value two.
207

207

00:08:52,640  -->  00:08:55,810
It just wasn't output and was still showed as the value one,
208

208

00:08:55,810  -->  00:08:57,570
and we saw that on line 25,
209

209

00:08:57,570  -->  00:09:00,900
and on line 26, Lives is now two is correct
210

210

00:09:00,900  -->  00:09:03,300
because we know that the value playerLives
211

211

00:09:03,300  -->  00:09:05,610
was actually updated on the previous line,
212

212

00:09:05,610  -->  00:09:08,460
and thirdly, because we're using the prefix version
213

213

00:09:08,460  -->  00:09:09,870
of playerLives increment,
214

214

00:09:09,870  -->  00:09:11,710
in other words, the ++ to the left-hand side
215

215

00:09:11,710  -->  00:09:12,870
of the variable,
216

216

00:09:12,870  -->  00:09:15,780
we know that straightaway, we gain the value of three,
217

217

00:09:15,780  -->  00:09:17,050
and obviously, I've added a plus there
218

218

00:09:17,050  -->  00:09:17,883
where I shouldn't have added
219

219

00:09:17,883  -->  00:09:19,030
which makes things a little bit confusing,
220

220

00:09:19,030  -->  00:09:20,530
so let me just run that again,
221

221

00:09:22,940  -->  00:09:24,070
and we're now seeing correctly
222

222

00:09:24,070  -->  00:09:26,160
that adding one to lives equals three
223

223

00:09:26,160  -->  00:09:28,220
because we're using the prefix.
224

224

00:09:28,220  -->  00:09:30,780
So that's pre and post increment and decrement now,
225

225

00:09:30,780  -->  00:09:33,450
so hopefully, that makes sense as to what I've done there.
226

226

00:09:33,450  -->  00:09:36,610
So how does this relate to expression statements?
227

227

00:09:36,610  -->  00:09:39,370
Well, these increment and decrement operators
228

228

00:09:39,370  -->  00:09:40,203
that we've used here,
229

229

00:09:40,203  -->  00:09:42,310
we've used them as expressions,
230

230

00:09:42,310  -->  00:09:44,260
but what we can do is we can do the same thing
231

231

00:09:44,260  -->  00:09:45,400
as what we've done there
232

232

00:09:45,400  -->  00:09:47,000
but put them on a line by themselves
233

233

00:09:47,000  -->  00:09:48,440
to make them an expression statement,
234

234

00:09:48,440  -->  00:09:51,480
and we saw that briefly earlier in the course.
235

235

00:09:51,480  -->  00:09:54,670
So what I can do is change the code.
236

236

00:09:54,670  -->  00:09:55,690
So let's go ahead and do that.
237

237

00:09:55,690  -->  00:09:57,020
At the moment, we know that,
238

238

00:09:57,020  -->  00:09:59,060
actually, I'll just take a copy of this line again,
239

239

00:09:59,060  -->  00:10:00,110
save a bit of typing.
240

240

00:10:03,380  -->  00:10:05,310
So we know the playerScore is currently
241

241

00:10:05,310  -->  00:10:07,270
set to three at this point.
242

242

00:10:07,270  -->  00:10:09,040
We saw that in the output window.
243

243

00:10:09,040  -->  00:10:10,030
So we can type
244

244

00:10:12,580  -->  00:10:15,580
Lives remaining equals
245

245

00:10:16,460  -->  00:10:17,583
plus playerLives.
246

246

00:10:17,583  -->  00:10:19,620
This is gonna be the long version,
247

247

00:10:19,620  -->  00:10:21,063
and what I'll do is I'll,
248

248

00:10:22,100  -->  00:10:25,057
we'll do playersLives++.
249

249

00:10:25,057  -->  00:10:26,580
We'll output it.
250

250

00:10:26,580  -->  00:10:28,340
Then we'll do a playerLives--,
251

251

00:10:30,479  -->  00:10:31,479
and we'll output it.
252

252

00:10:33,920  -->  00:10:35,270
So the output for this one,
253

253

00:10:36,700  -->  00:10:38,000
the output should be four,
254

254

00:10:39,984  -->  00:10:42,180
and output should be three
255

255

00:10:43,240  -->  00:10:45,620
'cause you can see, we're using the increment operator
256

256

00:10:45,620  -->  00:10:48,640
on line 30 and the decrement on line 32,
257

257

00:10:48,640  -->  00:10:51,460
and we're using, and that's using the postfix version,
258

258

00:10:51,460  -->  00:10:53,200
the ones on the right-hand side,
259

259

00:10:53,200  -->  00:10:54,070
and if we do the same thing,
260

260

00:10:54,070  -->  00:10:54,990
I'm gonna take a copy of that
261

261

00:10:54,990  -->  00:10:58,290
whole entire block of four lines.
262

262

00:10:58,290  -->  00:10:59,683
Copy and paste,
263

263

00:11:00,620  -->  00:11:02,180
and this time, I'm going to change that.
264

264

00:11:02,180  -->  00:11:05,950
Instead of --, instead of ++ on the right-hand side,
265

265

00:11:05,950  -->  00:11:06,790
we're gonna put it on the left,
266

266

00:11:06,790  -->  00:11:08,980
so we're using the prefix version,
267

267

00:11:08,980  -->  00:11:10,530
and the same for the decrement,
268

268

00:11:14,030  -->  00:11:15,687
and we'll run this,
269

269

00:11:15,687  -->  00:11:18,037
and we should see that we get the same results.
270

270

00:11:19,370  -->  00:11:21,777
Lives equals four, lives equals three,
271

271

00:11:21,777  -->  00:11:24,900
lives equals four, lives remaining equals three,
272

272

00:11:24,900  -->  00:11:26,700
and that's as we would expect
273

273

00:11:26,700  -->  00:11:29,233
from the code on lines 30 through 37.
274

274

00:11:30,870  -->  00:11:33,770
So again, this is now an expression statement,
275

275

00:11:33,770  -->  00:11:38,130
the code on lines 30, 32, 34, and 36,
276

276

00:11:38,130  -->  00:11:40,340
because we've added a semicolon to the end
277

277

00:11:40,340  -->  00:11:42,020
of what was an expression.
278

278

00:11:42,020  -->  00:11:44,810
So we've got two examples of it being used as an expression
279

279

00:11:44,810  -->  00:11:48,120
on line 25 and also on line 27.
280

280

00:11:48,120  -->  00:11:50,470
So again, semicolon to the end of that
281

281

00:11:50,470  -->  00:11:52,920
makes it an expression statement.
282

282

00:11:52,920  -->  00:11:55,190
All right, so what about the two other expression groups
283

283

00:11:55,190  -->  00:11:57,283
that can become expression statements?
284

284

00:11:58,950  -->  00:12:00,270
So going back to the slide,
285

285

00:12:00,270  -->  00:12:03,060
method calls and object creation expressions,
286

286

00:12:03,060  -->  00:12:05,300
we're going to discuss later in the course
287

287

00:12:05,300  -->  00:12:07,320
because we need to cover other material first
288

288

00:12:07,320  -->  00:12:09,040
for that to make sense.
289

289

00:12:09,040  -->  00:12:10,220
So we'll leave that for now,
290

290

00:12:10,220  -->  00:12:11,053
and that brings us on
291

291

00:12:11,053  -->  00:12:13,340
to the third type of expression statement,
292

292

00:12:13,340  -->  00:12:15,563
and that's the control flow statement.
293

293

00:12:18,440  -->  00:12:22,570
Now as a recap, control flow statements are as follows.
294

294

00:12:22,570  -->  00:12:24,120
So based on what we've learnt so far,
295

295

00:12:24,120  -->  00:12:25,250
we can really only talk about
296

296

00:12:25,250  -->  00:12:27,630
the if-then control flow statement.
297

297

00:12:27,630  -->  00:12:30,650
The rest we'll introduce and discuss later in detail,
298

298

00:12:30,650  -->  00:12:32,207
so let's swing over now to IntelliJ
299

299

00:12:32,207  -->  00:12:34,007
and have another quick look at that.
300

300

00:12:35,350  -->  00:12:37,450
So we're going to type a quick example
301

301

00:12:37,450  -->  00:12:38,750
of a control flow statement
302

302

00:12:38,750  -->  00:12:40,660
that we've covered so far in the course.
303

303

00:12:40,660  -->  00:12:42,980
Now we have explored the if-then in detail,
304

304

00:12:42,980  -->  00:12:45,250
so I'm just going go through this quickly at this point.
305

305

00:12:45,250  -->  00:12:48,010
We still have the else component of the if-then-else
306

306

00:12:48,010  -->  00:12:49,720
to discuss in detail as well as
307

307

00:12:49,720  -->  00:12:51,590
those other control flow statements.
308

308

00:12:51,590  -->  00:12:53,600
Again, we'll be doing that a little bit later,
309

309

00:12:53,600  -->  00:12:54,570
but in terms of the code,
310

310

00:12:54,570  -->  00:12:55,430
let's come down here,
311

311

00:12:55,430  -->  00:12:59,020
and we're going to type if, parentheses,
312

312

00:12:59,020  -->  00:13:02,960
calculatedScore, if that's greater than 59,
313

313

00:13:02,960  -->  00:13:04,700
have that in parentheses,
314

314

00:13:04,700  -->  00:13:05,820
then we'll introduce a code block
315

315

00:13:05,820  -->  00:13:07,630
with a left and right curly braces,
316

316

00:13:07,630  -->  00:13:09,680
and we're going to do a printout,
317

317

00:13:09,680  -->  00:13:12,640
and we'll put I calculate your score
318

318

00:13:14,150  -->  00:13:16,653
as being more than 59!
319

319

00:13:19,390  -->  00:13:21,270
And looking up at our code,
320

320

00:13:21,270  -->  00:13:24,080
calculatedScore, if you recall,
321

321

00:13:24,080  -->  00:13:25,400
on line 10, we've defined it,
322

322

00:13:25,400  -->  00:13:26,890
and that was equal to the value
323

323

00:13:26,890  -->  00:13:29,210
of the expression finalScore equals 60,
324

324

00:13:29,210  -->  00:13:33,770
so clearly, that should be true in the scenario on line 39.
325

325

00:13:33,770  -->  00:13:34,843
So if we run this,
326

326

00:13:38,790  -->  00:13:39,720
we get the output,
327

327

00:13:39,720  -->  00:13:42,163
I calculate your score as being more than 59!
328

328

00:13:44,800  -->  00:13:46,870
All right, so that's a control flow statement,
329

329

00:13:46,870  -->  00:13:49,690
the code on line 39, so why?
330

330

00:13:49,690  -->  00:13:53,050
Well, because depending on the expression in parentheses,
331

331

00:13:53,050  -->  00:13:56,050
we're altering the standard flow of our programme,
332

332

00:13:56,050  -->  00:13:58,720
which is done usually from top to bottom.
333

333

00:13:58,720  -->  00:14:00,161
So with the rest of this code,
334

334

00:14:00,161  -->  00:14:02,600
going to be going right up to where we first started typing,
335

335

00:14:02,600  -->  00:14:03,680
back on line seven,
336

336

00:14:03,680  -->  00:14:05,940
each line was executed in order
337

337

00:14:07,150  -->  00:14:11,190
until we get down to line 39 with a control flow statement.
338

338

00:14:11,190  -->  00:14:15,230
Now this code will only be executed, the code on line 40,
339

339

00:14:15,230  -->  00:14:18,070
if the expression calculatedScore is greater than 59.
340

340

00:14:18,070  -->  00:14:20,020
So that's a control flow statement,
341

341

00:14:20,020  -->  00:14:23,130
enabling us to alter the flow of a typical programme
342

342

00:14:23,130  -->  00:14:25,060
which is usually top to bottom.
343

343

00:14:25,060  -->  00:14:27,540
All right, so that's the control flow statement.
344

344

00:14:27,540  -->  00:14:29,050
Let's end the video here, and in the next one,
345

345

00:14:29,050  -->  00:14:32,710
we're going to discuss what's space and indentation.
346

346

00:14:32,710  -->  00:14:34,063
See you in the next video.
