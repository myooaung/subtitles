WEBVTT
1
1

00:00:04.740  -->  00:00:07.080
so let's recap what we've learned about
2

2

00:00:07.080  -->  00:00:10.170
the for statement so here we have a
3

3

00:00:10.170  -->  00:00:12.600
for loop structure on screen so we've
4

4

00:00:12.600  -->  00:00:14.700
got the initialization part where we
5

5

00:00:14.700  -->  00:00:16.800
initialize variables or variable in this
6

6

00:00:16.800  -->  00:00:19.680
case then the condition which determines
7

7

00:00:19.680  -->  00:00:22.619
when the loop ends the last part is the
8

8

00:00:22.619  -->  00:00:25.230
increment also known as the iterator or
9

9

00:00:25.230  -->  00:00:27.329
iterator step so in other words one
10

10

00:00:27.329  -->  00:00:29.759
execution of the loop step is known as
11

11

00:00:29.759  -->  00:00:32.220
one iteration so in the increment part
12

12

00:00:32.220  -->  00:00:35.040
we could increment by one or five or or
13

13

00:00:35.040  -->  00:00:37.800
decrement by any number it depends on
14

14

00:00:37.800  -->  00:00:39.480
the situation and specifically what you
15

15

00:00:39.480  -->  00:00:41.519
type in there so we say that the loop
16

16

00:00:41.519  -->  00:00:43.530
iterates in other words it loops or
17

17

00:00:43.530  -->  00:00:46.379
executes a block of code when the
18

18

00:00:46.379  -->  00:00:48.960
condition is true in steps and those
19

19

00:00:48.960  -->  00:00:51.420
steps are called iterations and then the
20

20

00:00:51.420  -->  00:00:53.359
loop stops when the condition is false
21

21

00:00:53.359  -->  00:00:56.129
the block of code is defined by curly
22

22

00:00:56.129  -->  00:00:58.829
braces in the loop body we can have
23

23

00:00:58.829  -->  00:01:01.289
multiple statements those statements
24

24

00:01:01.289  -->  00:01:03.749
will execute every step or we can say
25

25

00:01:03.749  -->  00:01:06.300
that they'll execute every iteration and
26

26

00:01:06.300  -->  00:01:08.759
notice this semicolon after the init
27

27

00:01:08.759  -->  00:01:11.369
and the condition those semicolons are
28

28

00:01:11.369  -->  00:01:14.009
required alright so in this scenario
29

29

00:01:14.009  -->  00:01:16.140
in this case we've got the for loop that
30

30

00:01:16.140  -->  00:01:18.060
just prints out the value of some number
31

31

00:01:18.060  -->  00:01:21.479
of the number variable the init part is
32

32

00:01:21.479  -->  00:01:24.240
int number equals one so we're standing
33

33

00:01:24.240  -->  00:01:25.950
at one condition
34

34

00:01:25.950  -->  00:01:27.810
showing on the screen is number less
35

35

00:01:27.810  -->  00:01:30.540
than seven and the increment is number
36

36

00:01:30.540  -->  00:01:33.000
plus equal to so in other words we're
37

37

00:01:33.000  -->  00:01:34.950
incrementing the number variable by two
38

38

00:01:34.950  -->  00:01:38.009
so this for loop will print every second
39

39

00:01:38.009  -->  00:01:39.869
number so as you can see the outputs
40

40

00:01:39.869  -->  00:01:41.100
showing at the bottom of the screen is
41

41

00:01:41.100  -->  00:01:43.380
number equals one number equals three
42

42

00:01:43.380  -->  00:01:45.930
number equals five it just prints those
43

43

00:01:45.930  -->  00:01:48.090
three numbers and noting that it didn't
44

44

00:01:48.090  -->  00:01:50.250
print the number seven because the
45

45

00:01:50.250  -->  00:01:52.049
condition was less than seven but let's
46

46

00:01:52.049  -->  00:01:54.090
just go through step by step through the
47

47

00:01:54.090  -->  00:01:56.159
loop iterations so it's easy to
48

48

00:01:56.159  -->  00:01:58.560
understand so on this screen we've got
49

49

00:01:58.560  -->  00:02:00.180
different numbers showing what the
50

50

00:02:00.180  -->  00:02:01.469
different steps are so I'm going to call
51

51

00:02:01.469  -->  00:02:03.479
those steps just to make it clear so the
52

52

00:02:03.479  -->  00:02:06.179
first one if the highlight the red
53

53

00:02:06.179  -->  00:02:08.100
circle in number one that's where we
54

54

00:02:08.100  -->  00:02:10.350
initialize the variable number two one
55

55

00:02:10.350  -->  00:02:13.140
next number two is we're checking the
56

56

00:02:13.140  -->  00:02:14.550
condition and the condition we're
57

57

00:02:14.550  -->  00:02:16.530
checking for is if number is less than
58

58

00:02:16.530  -->  00:02:17.100
seven
59

59

00:02:17.100  -->  00:02:18.540
now if the condition is true
60

60

00:02:18.540  -->  00:02:20.700
and in this case we've got number less
61

61

00:02:20.700  -->  00:02:23.220
than seven our number is 1 because we've
62

62

00:02:23.220  -->  00:02:25.500
initialized that in step 1 so therefore
63

63

00:02:25.500  -->  00:02:28.560
that's true since 1 is less than 7 so
64

64

00:02:28.560  -->  00:02:30.299
the loop executes a block of code in
65

65

00:02:30.299  -->  00:02:32.400
this case and the code we've got in
66

66

00:02:32.400  -->  00:02:33.959
there is a system dot out dot print line
67

67

00:02:33.959  -->  00:02:36.420
and it prints the number one to console
68

68

00:02:36.420  -->  00:02:38.849
or prints number equals 1 to the console
69

69

00:02:38.849  -->  00:02:40.980
so the current outport is number equals
70

70

00:02:40.980  -->  00:02:43.680
1 then it increments the number by 2 in
71

71

00:02:43.680  -->  00:02:46.319
other words the iteration step executes
72

72

00:02:46.319  -->  00:02:48.150
and that was step four and just to be
73

73

00:02:48.150  -->  00:02:49.859
clear step three there on the screen was
74

74

00:02:49.859  -->  00:02:51.269
where it was actually executing the line
75

75

00:02:51.269  -->  00:02:53.459
in the code block to print out the
76

76

00:02:53.459  -->  00:02:56.340
number so at the end of the fourth step
77

77

00:02:56.340  -->  00:02:58.859
we've added two to the number and number
78

78

00:02:58.859  -->  00:03:00.720
was one we've added two to that so its
79

79

00:03:00.720  -->  00:03:03.450
now 3 so now the value of number is 3
80

80

00:03:03.450  -->  00:03:05.879
and we start the next iteration we're
81

81

00:03:05.879  -->  00:03:07.920
going back to step 2 to check for that
82

82

00:03:07.920  -->  00:03:10.290
condition alright so here we are with a
83

83

00:03:10.290  -->  00:03:12.420
number now set to 3 this is the second
84

84

00:03:12.420  -->  00:03:14.849
iteration again it's 3 because it was
85

85

00:03:14.849  -->  00:03:16.470
incremented in the previous step so
86

86

00:03:16.470  -->  00:03:18.659
again the conditions checked and we're
87

87

00:03:18.659  -->  00:03:20.159
checking in step 1 there on the screen
88

88

00:03:20.159  -->  00:03:22.650
and we've got now number less than 7
89

89

00:03:22.650  -->  00:03:24.930
which is 3 less than 7 so that condition
90

90

00:03:24.930  -->  00:03:27.329
is also true so it prints a number equal
91

91

00:03:27.329  -->  00:03:28.109
3
92

92

00:03:28.109  -->  00:03:31.230
to the console and again in steps 3 on
93

93

00:03:31.230  -->  00:03:32.549
the screen we were executing the
94

94

00:03:32.549  -->  00:03:35.970
iteration or we're adding 2 to 3 the
95

95

00:03:35.970  -->  00:03:37.859
current value of number so number now
96

96

00:03:37.859  -->  00:03:40.650
becomes 5 3 plus 2 is obviously 5
97

97

00:03:40.650  -->  00:03:43.079
so the number variable we set to 5 and
98

98

00:03:43.079  -->  00:03:44.489
then we actually go through the next
99

99

00:03:44.489  -->  00:03:48.030
iteration of the for loop ok so here we
100

100

00:03:48.030  -->  00:03:50.639
are with the number now being a 5 so
101

101

00:03:50.639  -->  00:03:52.889
we've had 2 iterations and again the
102

102

00:03:52.889  -->  00:03:54.419
condition is checked and 5 is less than
103

103

00:03:54.419  -->  00:03:57.030
7 that condition is true so it prints
104

104

00:03:57.030  -->  00:03:58.949
the number equals 5 to the console and
105

105

00:03:58.949  -->  00:04:00.030
you can see the output at the bottom
106

106

00:04:00.030  -->  00:04:01.829
of the screen there and obviously step 2
107

107

00:04:01.829  -->  00:04:03.930
is executing that code to print the
108

108

00:04:03.930  -->  00:04:06.480
output and again in step 3 of the
109

109

00:04:06.480  -->  00:04:09.120
increment side of things we're adding 2
110

110

00:04:09.120  -->  00:04:11.220
to the number variable again currently
111

111

00:04:11.220  -->  00:04:14.129
it's 5 so 5 plus 2 is 7 so the value of
112

112

00:04:14.129  -->  00:04:15.930
the number variable after the increment
113

113

00:04:15.930  -->  00:04:18.120
is now 7 then we move on to the next
114

114

00:04:18.120  -->  00:04:21.419
iteration okay so here we've got the 3
115

115

00:04:21.419  -->  00:04:23.280
lines of output number equals 1 number
116

116

00:04:23.280  -->  00:04:25.320
equals 3 number equals 5 so now the
117

117

00:04:25.320  -->  00:04:27.389
number is 7 since it was incremented in
118

118

00:04:27.389  -->  00:04:29.280
the previous step so since it was
119

119

00:04:29.280  -->  00:04:31.800
incremented it's now 7 so again the
120

120

00:04:31.800  -->  00:04:32.370
condition is
121

121

00:04:32.370  -->  00:04:34.139
checked in step one on the screen and
122

122

00:04:34.139  -->  00:04:36.540
we've got seven less than seven but now
123

123

00:04:36.540  -->  00:04:38.729
that condition is false so the loop
124

124

00:04:38.729  -->  00:04:41.850
exits at this point and the code in the
125

125

00:04:41.850  -->  00:04:44.280
code block is not executed the code will
126

126

00:04:44.280  -->  00:04:46.199
continue after the closing curly brace
127

127

00:04:46.199  -->  00:04:47.490
and you can see the arrow pointing to
128

128

00:04:47.490  -->  00:04:48.990
that in step two it jumps to that part
129

129

00:04:48.990  -->  00:04:51.240
of the code and in this scenario we
130

130

00:04:51.240  -->  00:04:52.710
don't have any other code after the last
131

131

00:04:52.710  -->  00:04:55.199
curly brace right so that's one scenario
132

132

00:04:55.199  -->  00:04:57.060
here's another four loop in this case
133

133

00:04:57.060  -->  00:04:59.760
this for loop will never execute can you
134

134

00:04:59.760  -->  00:05:02.010
figure out why it won't execute you can
135

135

00:05:02.010  -->  00:05:03.600
pause the video here and try to figure
136

136

00:05:03.600  -->  00:05:05.430
it out so pause the video now and then
137

137

00:05:05.430  -->  00:05:07.470
come back when you're done and I'll show
138

138

00:05:07.470  -->  00:05:09.539
you the reason why and also show
139

139

00:05:09.539  -->  00:05:13.710
you the output so how did you go did you
140

140

00:05:13.710  -->  00:05:15.479
manage to figure out why this code will
141

141

00:05:15.479  -->  00:05:18.020
never execute well this was a tricky one
142

142

00:05:18.020  -->  00:05:21.360
there's really no output at all so let's
143

143

00:05:21.360  -->  00:05:23.220
move on to the next slide and see why
144

144

00:05:23.220  -->  00:05:26.520
there isn't any output so the loop will
145

145

00:05:26.520  -->  00:05:28.500
never execute in other words it'll never
146

146

00:05:28.500  -->  00:05:30.960
print out anything and that's because
147

147

00:05:30.960  -->  00:05:33.810
the condition is false so firstly in
148

148

00:05:33.810  -->  00:05:36.030
step one we're initializing the number
149

149

00:05:36.030  -->  00:05:37.889
variable to one the conditions then
150

150

00:05:37.889  -->  00:05:40.500
tested it in step two and the condition
151

151

00:05:40.500  -->  00:05:43.050
is number less than zero but since one
152

152

00:05:43.050  -->  00:05:44.789
which is the value of number is not less
153

153

00:05:44.789  -->  00:05:47.250
than zero the code block will never
154

154

00:05:47.250  -->  00:05:49.410
execute so in other words that's false
155

155

00:05:49.410  -->  00:05:53.760
and the code jumps out and bypasses the
156

156

00:05:53.760  -->  00:05:56.789
code in the code block and jumps as you
157

157

00:05:56.789  -->  00:05:58.800
can see to the next line after the
158

158

00:05:58.800  -->  00:06:01.740
closing brace so you really have to be
159

159

00:06:01.740  -->  00:06:04.500
careful with conditions in a for loop as
160

160

00:06:04.500  -->  00:06:06.389
you can see if the condition is wrong
161

161

00:06:06.389  -->  00:06:09.840
it'll never execute at all so to fix
162

162

00:06:09.840  -->  00:06:12.419
this loop to execute the code block we
163

163

00:06:12.419  -->  00:06:14.639
have to change the condition for example
164

164

00:06:14.639  -->  00:06:17.580
number less than five so in that case it
165

165

00:06:17.580  -->  00:06:18.990
would then printing up the numbers one
166

166

00:06:18.990  -->  00:06:21.510
and three before closing down and
167

167

00:06:21.510  -->  00:06:24.810
exiting so here's another for loop can
168

168

00:06:24.810  -->  00:06:26.460
you guess what this will print if you
169

169

00:06:26.460  -->  00:06:28.080
like pause the video and try to figure
170

170

00:06:28.080  -->  00:06:30.300
out what will be printed from this pause
171

171

00:06:30.300  -->  00:06:31.470
the video now and come back when you're
172

172

00:06:31.470  -->  00:06:33.419
done and I'll show you the output and
173

173

00:06:33.419  -->  00:06:36.630
explain what will happen so how did you
174

174

00:06:36.630  -->  00:06:38.010
go did you manage to figure that out
175

175

00:06:38.010  -->  00:06:39.840
well this was again a tricky one so
176

176

00:06:39.840  -->  00:06:42.150
let's see what is happening with this
177

177

00:06:42.150  -->  00:06:45.060
one so in this case the loop will
178

178

00:06:45.060  -->  00:06:46.649
basically loop forever
179

179

00:06:46.649  -->  00:06:49.080
so here we've got condition greater than
180

180

00:06:49.080  -->  00:06:51.389
zero but we're also incrementing the
181

181

00:06:51.389  -->  00:06:53.969
number so every number greater than 100
182

182

00:06:53.969  -->  00:06:57.300
is always greater than zero so in other
183

183

00:06:57.300  -->  00:06:59.279
words this kind of loop is called an
184

184

00:06:59.279  -->  00:07:01.080
endless loop but the program will
185

185

00:07:01.080  -->  00:07:02.879
actually stop once it gets to a maximum
186

186

00:07:02.879  -->  00:07:05.009
value of an integer in many cases with
187

187

00:07:05.009  -->  00:07:06.509
endless loops programs might block
188

188

00:07:06.509  -->  00:07:08.460
forever or crash when it runs out of
189

189

00:07:08.460  -->  00:07:10.949
memory so how would we fix this to avoid
190

190

00:07:10.949  -->  00:07:13.559
the program effectively hanging and not
191

191

00:07:13.559  -->  00:07:16.259
actually exiting well what we could do
192

192

00:07:16.259  -->  00:07:17.729
there is for example change the
193

193

00:07:17.729  -->  00:07:21.270
condition to number 130 so that way
194

194

00:07:21.270  -->  00:07:24.749
we print the hundred 110 and 120 and the
195

195

00:07:24.749  -->  00:07:26.099
console so you can see in the output on
196

196

00:07:26.099  -->  00:07:27.719
the screen and that's because we've
197

197

00:07:27.719  -->  00:07:29.129
changed the condition which was number
198

198

00:07:29.129  -->  00:07:31.259
greater than zero to now number less
199

199

00:07:31.259  -->  00:07:33.240
than 130 all right so I hope you got a
200

200

00:07:33.240  -->  00:07:35.339
lot out of this video and just one last
201

201

00:07:35.339  -->  00:07:35.699
thing
202

202

00:07:35.699  -->  00:07:37.889
there's also another variation of the
203

203

00:07:37.889  -->  00:07:40.559
for loop called the for each but we're
204

204

00:07:40.559  -->  00:07:42.569
not discussing that here the reason for
205

205

00:07:42.569  -->  00:07:43.800
that is we really need to be talking
206

206

00:07:43.800  -->  00:07:46.199
about arrays and objects before going
207

207

00:07:46.199  -->  00:07:48.719
into for each and then we'll make sense
208

208

00:07:48.719  -->  00:07:51.089
later and you'll see the for each which
209

209

00:07:51.089  -->  00:07:53.610
again is a variation of the for loop in
210

210

00:07:53.610  -->  00:07:56.009
future videos in this course so that's
211

211

00:07:56.009  -->  00:07:57.509
it I'm going to end this video now and
212

212

00:07:57.509  -->  00:08:00.889
I'll see you in the next one
