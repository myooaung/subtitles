WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.939
Continuing where we left off in this video,

00:00:02.939 --> 00:00:07.635
we will discuss flexbox and how to apply it to our hero section layout.

00:00:07.635 --> 00:00:12.075
Flexbox is a way to arrange and distribute content inside that box.

00:00:12.075 --> 00:00:17.940
The flex settings affect only the children of that diblock and not the diblock itself.

00:00:17.940 --> 00:00:19.934
So in our case those paragraphs,

00:00:19.934 --> 00:00:22.050
the container itself is unaffected.

00:00:22.050 --> 00:00:24.195
The moment you select flex layout,

00:00:24.195 --> 00:00:26.145
the new options will be displayed.

00:00:26.145 --> 00:00:29.220
This is how we distribute children inside the flexbox.

00:00:29.220 --> 00:00:32.655
You'll recognize many of the symbols from sigma.

00:00:32.655 --> 00:00:36.885
Here we have four different boxes inside a flex container.

00:00:36.885 --> 00:00:42.335
They have different heights in the are aligned in the horizontal center.

00:00:42.335 --> 00:00:48.445
Next to this center alignment we have start which is same as top alignment in sigma.

00:00:48.445 --> 00:00:52.255
Then we have n, which is same as bottom alignment.

00:00:52.255 --> 00:00:59.455
We have stretch, which is going to stretch the heights from top to bottom edges.

00:00:59.455 --> 00:01:02.619
This is usually the default alignment of a flexbox.

00:01:02.619 --> 00:01:06.280
Children are stretched across the height of the flex container.

00:01:06.280 --> 00:01:09.100
In this case, it's stretched to the tallest child

00:01:09.100 --> 00:01:12.220
because that's what's defining the height of the parent box.

00:01:12.220 --> 00:01:18.100
You can see that orange box is the tallest based on its 150 pixel minimum height.

00:01:18.100 --> 00:01:20.320
If we increase or decrease it,

00:01:20.320 --> 00:01:25.490
the entire thing will change with it until some other child is the tallest.

00:01:28.330 --> 00:01:31.264
Then there is this baseline alignment.

00:01:31.264 --> 00:01:32.885
This is something to do with texts.

00:01:32.885 --> 00:01:35.885
It's invisible line on which characters are aligned.

00:01:35.885 --> 00:01:38.480
I don't think I've ever had a need for this alignment.

00:01:38.480 --> 00:01:41.090
Underneath the alignment option there is justified,

00:01:41.090 --> 00:01:43.625
which is sort of like a vertical alignment and

00:01:43.625 --> 00:01:48.360
distribution option like in sigma, there is center.

00:01:48.730 --> 00:01:53.810
And we have space between.

00:01:53.810 --> 00:01:55.760
And then we have space around,

00:01:55.760 --> 00:01:56.960
which is slightly different.

00:01:56.960 --> 00:02:00.245
It adds even spacing around each box.

00:02:00.245 --> 00:02:04.160
On hover, there are tooltips that explain what each option does.

00:02:04.160 --> 00:02:06.425
So you can always get help if you're lost.

00:02:06.425 --> 00:02:09.290
This we're all horizontal alignment options.

00:02:09.290 --> 00:02:12.830
We also have an option to switch direction to vertical,

00:02:12.830 --> 00:02:16.400
and then we have all the different vertical alignment options.

00:02:16.400 --> 00:02:21.000
As you'd expect, they work in the same way, just different direction.

00:02:22.810 --> 00:02:26.600
Justify option one have any effects in this case

00:02:26.600 --> 00:02:29.704
because there is no extra space for them to distribute.

00:02:29.704 --> 00:02:33.125
The parent container is wrapped tightly around the children.

00:02:33.125 --> 00:02:38.180
The reason why there are gaps between them is because I have given margins to the boxes.

00:02:38.180 --> 00:02:41.315
Without those margins, there will be fixed tightly together.

00:02:41.315 --> 00:02:44.840
But if we increase the actual height of the parent container,

00:02:44.840 --> 00:02:46.490
then they will have more room.

00:02:46.490 --> 00:02:49.025
But a love about web design is that it's like a puzzle.

00:02:49.025 --> 00:02:52.430
Things often can act strangely and you're trying to figure out

00:02:52.430 --> 00:02:56.600
why find a solution to a problem quite satisfying when you do solve the puzzle,

00:02:56.600 --> 00:02:59.270
but a big, annoying head-scratcher when you're staring at

00:02:59.270 --> 00:03:02.540
the screen trying to figure out what the heck is going on.

00:03:02.540 --> 00:03:03.800
In other optional flags,

00:03:03.800 --> 00:03:05.149
Bach is a reversal.

00:03:05.149 --> 00:03:08.285
We can do that both horizontally or vertically.

00:03:08.285 --> 00:03:11.180
To basically reverse the order,

00:03:11.180 --> 00:03:13.280
final, we have an option to wrap.

00:03:13.280 --> 00:03:15.380
Wrapping means when there is no space,

00:03:15.380 --> 00:03:18.050
children will just jump to the next line.

00:03:18.050 --> 00:03:22.355
Wrapping only works if there is a necessity to push elements on the next line.

00:03:22.355 --> 00:03:25.520
If the elements have an option to shrink indefinitely,

00:03:25.520 --> 00:03:27.875
the necessity to wrap will never arise.

00:03:27.875 --> 00:03:32.765
There will maintain on one line and shrink no matter how many of them you put inside.

00:03:32.765 --> 00:03:37.115
But if they have some sort of minimum width that they can't go below,

00:03:37.115 --> 00:03:39.590
then they will start jumping on to the next line.

00:03:39.590 --> 00:03:44.270
What is happening here is that first-line tries to contain as many boxes as possible

00:03:44.270 --> 00:03:50.820
until it can't hold anymore and sends extra boxes one by one to the next line.

00:03:51.430 --> 00:03:54.200
If you click on one of the boxes,

00:03:54.200 --> 00:03:58.145
you'll see in the Properties panel special options for the flex child.

00:03:58.145 --> 00:04:03.530
This gives us even more fine grain control over individual items inside the flexbox.

00:04:03.530 --> 00:04:06.410
But let's not worry about flex shot options for now.

00:04:06.410 --> 00:04:10.280
Flexbox can be a little handful to understand in one go.

00:04:10.280 --> 00:04:14.240
So don't worry if you feel a little confused or not understanding

00:04:14.240 --> 00:04:18.980
exactly or not following every single layout option that I have covered right now.

00:04:18.980 --> 00:04:21.395
Once you start building in and playing around with it,

00:04:21.395 --> 00:04:23.825
you'll get the hang of it in one of the assignments.

00:04:23.825 --> 00:04:26.300
After this, I have put a flexbox game,

00:04:26.300 --> 00:04:32.420
which is a sort of a puzzle game built when inside web flow by Web Flow team.

00:04:32.420 --> 00:04:35.690
It's a great flexbox exercise in

00:04:35.690 --> 00:04:39.845
a great way to practice flexbox and different alignment options.

00:04:39.845 --> 00:04:43.475
So let's go back to our hero section and see how we can use flexbox.

00:04:43.475 --> 00:04:45.455
In our case, it's pretty simple actually.

00:04:45.455 --> 00:04:47.750
We just have two blocks, left and right.

00:04:47.750 --> 00:04:50.195
We can apply flex layout to the container.

00:04:50.195 --> 00:04:55.085
But remember, we made this container to be a standard container throughout our page,

00:04:55.085 --> 00:04:57.020
even for non flex items,

00:04:57.020 --> 00:04:58.520
so we don't want to mess with it.

00:04:58.520 --> 00:05:00.590
We can simply add yep,

00:05:00.590 --> 00:05:02.570
you guessed it. Another box.

00:05:02.570 --> 00:05:08.370
Dropped those left and right blocks inside and apply flex layout to that.

00:05:17.410 --> 00:05:19.925
It's in an opposite direction.

00:05:19.925 --> 00:05:22.880
We can of course reverse this using flexbox option,

00:05:22.880 --> 00:05:26.420
but we should instead arranged them correctly inside the navigator.

00:05:26.420 --> 00:05:28.670
Just drag one on top of the other.

00:05:28.670 --> 00:05:32.945
Now we have our flex options so we can align this blocks as we want.

00:05:32.945 --> 00:05:36.425
Horizontal direction is exactly what we want, so we keep it there.

00:05:36.425 --> 00:05:41.880
And then center alignment and pushing them to the address is going to look just spot on.

00:05:52.360 --> 00:05:56.435
In FDMA we have content sitting a little higher.

00:05:56.435 --> 00:06:00.500
We can achieve this by adding a button margin on the left block.

00:06:00.500 --> 00:06:02.970
This will push the content up.

00:06:07.000 --> 00:06:10.010
Let's check this on a smaller screen.

00:06:10.010 --> 00:06:12.200
There are two things that need some styling.

00:06:12.200 --> 00:06:14.690
First, the left content is a little messy.

00:06:14.690 --> 00:06:16.160
Buttons got all screwed up.

00:06:16.160 --> 00:06:20.765
That's because there is not enough space on one line and the second button jumps below.

00:06:20.765 --> 00:06:23.645
And I don't like how headline looks on three lines.

00:06:23.645 --> 00:06:25.760
It looks like it's giving us a finger.

00:06:25.760 --> 00:06:29.600
We can easily fix this by giving the left block minimum width.

00:06:29.600 --> 00:06:33.590
Then it's now going to shrink to a point where this needs to happen.

00:06:33.590 --> 00:06:36.035
400 pixels looked like a good idea.

00:06:36.035 --> 00:06:38.645
Now the left block doesn't shrink beyond that point.

00:06:38.645 --> 00:06:40.370
And if there is not enough space,

00:06:40.370 --> 00:06:41.690
the image is going to take

00:06:41.690 --> 00:06:45.395
the hit second bit is that they are a bit too close to each other.

00:06:45.395 --> 00:06:50.760
We can add an extra margin to the left block so it pushes the image away.

00:06:52.870 --> 00:06:55.890
That looks quite good.

00:06:57.340 --> 00:07:00.860
Tablet and mobile screens are a little more messy,

00:07:00.860 --> 00:07:04.310
but we will take care of those in mobile optimization lessons.

00:07:04.310 --> 00:07:06.950
All right, this looks just the way we want it to be.

00:07:06.950 --> 00:07:09.200
Yes, the image has a little different dimensions

00:07:09.200 --> 00:07:11.900
compared to Fichman design, but that's expected.

00:07:11.900 --> 00:07:16.340
We are making things responsive so it shrinks and adjust to the screen sizes.

00:07:16.340 --> 00:07:19.805
So to recap, flexbox is what it says. Flexible box.

00:07:19.805 --> 00:07:24.155
It can distribute children elements either in vertical or horizontal direction.

00:07:24.155 --> 00:07:26.720
Once you set display flex on an element,

00:07:26.720 --> 00:07:29.855
alignment and justification options show up.

00:07:29.855 --> 00:07:34.160
Nailing down the right options from here is a matter of trial and error.

00:07:34.160 --> 00:07:39.450
Just play around with all of the options until you find the right layout for you.
