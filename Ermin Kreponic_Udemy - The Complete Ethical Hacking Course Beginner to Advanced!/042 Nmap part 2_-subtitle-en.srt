1
00:00:00,000 --> 00:00:03,300
Hello everybody and welcome to this tutorial.

2
00:00:03,300 --> 00:00:05,700
Today I will do some actual scanning

3
00:00:05,700 --> 00:00:11,000
and for that, I have picked a domain outside of my local area network.

4
00:00:11,000 --> 00:00:16,369
You can find this on the nmap official site, so it's scanme.nmap.org

5
00:00:16,369 --> 00:00:21,000
This domain they have given, and you can feel free to scan it.

6
00:00:21,000 --> 00:00:25,000
Well not as much as you wish, because you know a hundred times a day is not okay

7
00:00:25,000 --> 00:00:27,300
but a couple of times a day is okay

8
00:00:27,300 --> 00:00:32,790
and you can test out whether your nmap works and how it works.

9
00:00:32,790 --> 00:00:35,200
So I need to take this domain.

10
00:00:35,200 --> 00:00:38,000
You cannot use Ctrl C or Ctrl V in the terminal

11
00:00:38,000 --> 00:00:43,200
primarily because Ctrl C is the universal interrupt and Ctrl V will simply not work.

12
00:00:43,200 --> 00:00:46,000
You will need to use a mouse and manually do it.

13
00:00:46,000 --> 00:00:48,000
In any case, we need to trim this down.

14
00:00:48,000 --> 00:00:51,300
We don't need any of these things, we just want the domain name to remain

15
00:00:51,300 --> 00:00:55,969
and now I'm gonna go ahead and type in nmap, space, and there we go.

16
00:00:55,969 --> 00:00:57,200
We're gonna now scan this domain.

17
00:00:57,200 --> 00:01:03,500
However, if I just press enter like this, it's gonna conduct some scanning

18
00:01:03,500 --> 00:01:08,500
It will do the job, I assure you, but it will give us no output whatsoever.

19
00:01:08,500 --> 00:01:13,500
So this will be continuously empty until the scan is actually complete

20
00:01:13,500 --> 00:01:17,200
Now on short scans, such as these, that's probably okay

21
00:01:17,200 --> 00:01:23,000
but if you're conducting a scan that can last up to a day or something of a kind

22
00:01:23,000 --> 00:01:26,000
it's pretty worrying to see that there is nothing here

23
00:01:26,000 --> 00:01:31,400
I mean, you're not sure whether it's working, is it bugged or what not.

24
00:01:31,400 --> 00:01:36,800
That's why it is always better to pass a V option for verbose output.

25
00:01:36,800 --> 00:01:42,600
I have a preference to pass the VV option for extra verbose output pretty much.

26
00:01:42,600 --> 00:01:47,000
It tells me pretty much everything that it is doing and how it is functioning

27
00:01:47,000 --> 00:01:49,400
and I can see it as it goes on

28
00:01:49,400 --> 00:01:55,140
and I can see that some ports are open a bit earlier prior to the completion of the scan.

29
00:01:55,140 --> 00:01:57,000
Let's just go ahead and start to scan

30
00:01:57,000 --> 00:01:59,200
and you can see immediately before it finished the scan

31
00:01:59,200 --> 00:02:06,500
it has told me that the port 22 and port 80 are open.

32
00:02:06,500 --> 00:02:11,400
Now by default, nmap will scan for 1000 ports.

33
00:02:11,400 --> 00:02:14,200
You can tell it to scan for more ports, no problems.

34
00:02:14,200 --> 00:02:18,500
You can tell it to scan for the maximum range of ports -- It's 65,000 something

35
00:02:18,500 --> 00:02:21,400
I'm not exactly sure what the end number is

36
00:02:21,400 --> 00:02:26,450
but it's 65,000 something, and you can find it on the net if you wish.

37
00:02:26,450 --> 00:02:32,640
You can pass an option to nmap to do a full port scan, so all of the ports will be scanned

38
00:02:32,640 --> 00:02:35,100
although rarely anybody does that.

39
00:02:35,100 --> 00:02:36,800
It's time-consuming

40
00:02:36,800 --> 00:02:40,000
Usually you have an idea of what sort of services you want to target

41
00:02:40,000 --> 00:02:46,000
and then you scan for the ports on which the services are likely to run

42
00:02:46,000 --> 00:02:50,000
For example, port 22, that would be ssh

43
00:02:50,000 --> 00:02:53,200
and port 25, that's sntp

44
00:02:53,200 --> 00:02:57,200
If you don't know what that is, it's a mail server 80 http

45
00:02:57,200 --> 00:03:01,200
and you have nping-echo as well, on port 9929

46
00:03:01,200 --> 00:03:04,700
and now the states of these ports are rather clear.

47
00:03:04,700 --> 00:03:09,400
So it's open open open, and you can also get a state closed

48
00:03:09,400 --> 00:03:15,840
because it says here "Not shown: 996 closed ports"

49
00:03:15,840 --> 00:03:24,200
and when it says "filtered", well usually there's a firewall setting which is dropping the packets.

50
00:03:24,200 --> 00:03:29,700
It's not closing the port perhaps, but it's definitely doing something to the packets coming on that port.

51
00:03:29,700 --> 00:03:34,500
It's perhaps blocking them from a certain IP of something of a kind.

52
00:03:34,500 --> 00:03:36,400
There can be a lot of options here.

53
00:03:36,400 --> 00:03:40,500
In any case, the general meaning of this filtered flag here

54
00:03:40,500 --> 00:03:46,260
is that the nmap can not determine whether the port is open or closed.

55
00:03:46,260 --> 00:03:49,000
Usually you want to stay away from those ports

56
00:03:49,000 --> 00:03:52,800
or you can do some extra research and find out how you can access them.

57
00:03:52,800 --> 00:03:58,800
Maybe they require a particular app or particular protocol or something of a kind to be accessed

58
00:03:58,800 --> 00:04:03,500
and that's why nmap cannot actually figure pretty much anything out of it.

59
00:04:03,500 --> 00:04:05,170
That can be a bit problematic.

60
00:04:05,170 --> 00:04:08,200
I would definitely, as I said, advise to stay away from them.

61
00:04:08,200 --> 00:04:13,800
Stick to the open ones and see what you can do with the open ports here.

62
00:04:13,800 --> 00:04:21,690
Now nmap also has a option to create grep full output.

63
00:04:21,690 --> 00:04:30,300
Basically what that means is that you can sort whatever you results you get into a file

64
00:04:30,300 --> 00:04:33,000
you can store it and sort it as well

65
00:04:33,000 --> 00:04:40,600
and then you gain an ability to actually extract pretty much separate bits and pieces of information

66
00:04:40,600 --> 00:04:44,300
For example, you just want the IP addresses of hosts that are up

67
00:04:44,300 --> 00:04:50,200
or you want the IP addresses of hosts that have port 22 open or filtered

68
00:04:50,200 --> 00:04:56,500
or that are running a certain service, like ssh or sntp or http or something of a kind.

69
00:04:56,500 --> 00:05:01,000
However, I won't be doing that for scanme.nmap.org

70
00:05:01,000 --> 00:05:04,400
I believe I have used their system enough

71
00:05:04,400 --> 00:05:12,200
and for this example, I require a range of IP addresses to to give you a meaningful result.

72
00:05:12,200 --> 00:05:17,000
So what I'm going to do is scan my local subnet, and if you don't know what yours is

73
00:05:17,000 --> 00:05:26,200
well it's most likely configured as mine is, but if it's not, clear the screen and type in "ifconfig"

74
00:05:26,200 --> 00:05:33,500
and you will get a result here for eth0 or for whatever interface you are using.

75
00:05:33,500 --> 00:05:38,500
Just take a look at this IP address that has been assigned to this interface.

76
00:05:38,500 --> 00:05:48,000
So the lowest and the maximum value of the first octet here will be the range of your local summits.

77
00:05:48,000 --> 00:05:51,000
So from 0 to 255

78
00:05:51,000 --> 00:05:55,000
Let me just show you how that looks like, in case you do not understand here.

79
00:05:55,000 --> 00:06:13,500
Type in "nmap -oG - 192.168.1.0-255"

80
00:06:13,500 --> 00:06:21,000
So it's gonna scan for all the IP addresses that have this and that go from 0 to 255.

81
00:06:21,000 --> 00:06:24,480
Now keep in mind that I can customize the range anyway I want.

82
00:06:24,480 --> 00:06:31,000
For example, here where it says one, I can type in "-67"

83
00:06:31,000 --> 00:06:36,300
So it's gonna use this octet and this octet in combination

84
00:06:36,300 --> 00:06:38,300
and it's gonna scan for all possibilities

85
00:06:38,300 --> 00:06:43,500
although that might take a lot of time because that's a lot of IP addresses.

86
00:06:43,500 --> 00:06:47,000
Anyway, I'm not just done yet.

87
00:06:47,000 --> 00:06:51,800
What  I need to do is actually cause a redirect

88
00:06:51,800 --> 00:06:55,500
Before I cause a redirect, I'm just gonna give it a double verbose mode

89
00:06:55,500 --> 00:06:58,400
and why am I redirecting my standard output?

90
00:06:58,400 --> 00:07:04,700
Well I don't want all the information to just be printed out on the terminal screen

91
00:07:04,700 --> 00:07:08,500
where eventually it will be lost pretty much as soon as I close a terminal

92
00:07:08,500 --> 00:07:10,969
or as soon as enough commands are passed

93
00:07:10,969 --> 00:07:15,370
that the cache needs to be rewritten for the terminal or something of a kind.

94
00:07:15,370 --> 00:07:21,300
Furthermore, if it's written out in standard output on the terminal itself

95
00:07:21,300 --> 00:07:23,500
I can't do anything else with it.

96
00:07:23,500 --> 00:07:24,800
I cannot manipulate it.

97
00:07:24,800 --> 00:07:29,200
It's not a file I can take or something of a kind.

98
00:07:29,200 --> 00:07:31,200
Rather instead, it's just standard output.

99
00:07:31,200 --> 00:07:37,900
What I want to do is cause a redirect with a greater-than sign into some sort of a file.

100
00:07:37,900 --> 00:07:44,500
So I'm just gonna go ahead and type in "home" and I don't know...maybe not home

101
00:07:44,500 --> 00:07:50,000
Well no, maybe that's a good idea. Let's just leave it at "home". That's better.

102
00:07:50,000 --> 00:07:55,500
I'm gonna name this file "scan"

103
00:07:55,500 --> 00:08:06,500
So all the results that nmap gathers now will be stored into this file here

104
00:08:06,500 --> 00:08:09,200
and this is the path to the file

105
00:08:09,200 --> 00:08:12,400
and since I have passed a good amount of hosts here

106
00:08:12,400 --> 00:08:15,500
I mean, I've given it 255 hosts

107
00:08:15,500 --> 00:08:18,000
because I'm in lan, it's gonna go faster

108
00:08:18,000 --> 00:08:21,909
but when you're doing this over the Internet

109
00:08:21,909 --> 00:08:27,200
a very good idea is to pass a port, or at least a port range.

110
00:08:27,200 --> 00:08:35,900
Don't let it scan all 1000 ports or even worse, do not specify that it should scan a full port range

111
00:08:35,900 --> 00:08:40,300
primarily because, regardless of what sort of internet connection you have

112
00:08:40,300 --> 00:08:43,510
it will take a good amount of time to finish.

113
00:08:43,510 --> 00:08:49,000
I mean, you're bound to trigger some red flags or something of a kind.

114
00:08:49,000 --> 00:08:54,000
So you should define a port here, in order to save yourself a lot of time

115
00:08:54,000 --> 00:08:57,500
and I mean, generally you will know which service you want to attack.

116
00:08:57,500 --> 00:08:59,500
You will have some sort of an idea there.

117
00:08:59,500 --> 00:09:02,500
I am going to go ahead and pass port 22.

118
00:09:02,500 --> 00:09:05,300
That is the port that I wish to scan for

119
00:09:05,300 --> 00:09:09,000
and press Enter and hope to god that it works.

120
00:09:09,000 --> 00:09:09,820
There we go

121
00:09:09,820 --> 00:09:11,000
It is functioning

122
00:09:11,000 --> 00:09:15,000
It has finished rather fast, but even though I passed double verbose mode

123
00:09:15,000 --> 00:09:23,000
everything here is being redirected here, so I will see nothing.

124
00:09:23,000 --> 00:09:26,000
If this scan takes longer when you're doing it over the internet

125
00:09:26,000 --> 00:09:28,720
and it will take longer if you're doing it over the Internet

126
00:09:28,720 --> 00:09:35,000
don't think immediately that something is bugged just because because nothing is being written below.

127
00:09:35,000 --> 00:09:40,000
If we just change to home and list what is there...

128
00:09:40,000 --> 00:09:40,800
There we go

129
00:09:40,800 --> 00:09:44,100
We have the scan, so let's just do this.

130
00:09:44,100 --> 00:09:50,000
Now look what I'm doing here -- I'm gonna do a very similar thing with our scan file

131
00:09:50,000 --> 00:09:55,200
I'm going to type in "grep SCAN", press Enter, there we go.

132
00:09:55,200 --> 00:10:01,000
I have now passed the ls command to list pretty much everything within the home directory

133
00:10:01,000 --> 00:10:07,000
and then I have piped the output of ls to grep.

134
00:10:07,000 --> 00:10:09,200
Basically pipe means just pass it.

135
00:10:09,200 --> 00:10:15,800
I've passed the output to grep, and what grep does is basically pulls whatever you specify here.

136
00:10:15,800 --> 00:10:19,000
It just pulls it from the output.

137
00:10:19,000 --> 00:10:22,700
I have told it to pull whatever is in there

138
00:10:22,700 --> 00:10:27,000
that has a name scan or that has a string scan within it.

139
00:10:27,000 --> 00:10:32,500
So I could have had a name like "AAA SCAN BBB"

140
00:10:32,500 --> 00:10:36,000
It would still pull it, no problems.

141
00:10:36,000 --> 00:10:41,100
This is one of the ways in which you can make sure that the file is located within a certain folder

142
00:10:41,100 --> 00:10:46,500
especially in situations where you have hundreds of files in a single folder

143
00:10:46,500 --> 00:10:48,500
and you just can't go through them all manually.

144
00:10:48,500 --> 00:10:50,200
Use a grep, if you know the name

145
00:10:50,200 --> 00:10:54,500
or if you know partial name, in order to figure out what is where.

146
00:10:54,500 --> 00:10:56,500
So let's just go ahead and clear the screen

147
00:10:56,500 --> 00:10:59,899
and let me just show you what is located within our scan files

148
00:10:59,899 --> 00:11:04,200
So "less SCAN", press Enter, and there we go.

149
00:11:04,200 --> 00:11:08,439
So we have pretty much all the hosts within my LAN network

150
00:11:08,439 --> 00:11:11,000
within my local subnet

151
00:11:11,000 --> 00:11:16,700
They're all down of course, because I don't have 255 computers or devices within my home network.

152
00:11:16,700 --> 00:11:19,000
Rather instead, you see what it has found.

153
00:11:19,000 --> 00:11:21,400
It has found this is the router IP

154
00:11:21,400 --> 00:11:26,500
The router that I am using for this test

155
00:11:26,500 --> 00:11:31,829
and it says "Ports: 22/filtered/tcp//ssh///"

156
00:11:31,829 --> 00:11:36,000
That one has an open port of 22

157
00:11:36,000 --> 00:11:40,000
Also, its status is up

158
00:11:40,000 --> 00:11:49,800
and I also have on 100 status is up, 22 is closed, 102 is up, it's filtered, and so on and so forth.

159
00:11:49,800 --> 00:11:53,100
So let me just go ahead and quit this

160
00:11:53,100 --> 00:11:56,000
and I'm gonna do a very similar thing here

161
00:11:56,000 --> 00:11:59,000
because I want to leave it on the screen so I can explain it to you.

162
00:11:59,000 --> 00:12:03,000
The less command is very nice, but when you exit, it disappears.

163
00:12:03,000 --> 00:12:07,300
Cat, however, just brings everything within a file to standard output

164
00:12:07,300 --> 00:12:12,000
and it stays here pretty much for the duration of the terminal

165
00:12:12,000 --> 00:12:15,300
The reason why I did this will become apparent quite soon.

166
00:12:15,300 --> 00:12:21,500
So what you want to do now is type in "cat SCAN" as before

167
00:12:21,500 --> 00:12:27,500
and now we want to pipe the output of scanned grep in order to pull something out of here.

168
00:12:27,500 --> 00:12:30,089
Some sort of useful information.

169
00:12:30,089 --> 00:12:34,100
Let's say that I want to pull all the hosts that are up.

170
00:12:34,100 --> 00:12:36,100
I want to pull all live hosts.

171
00:12:36,100 --> 00:12:38,500
I want to see their IP addresses

172
00:12:38,500 --> 00:12:41,000
and when I type in grep

173
00:12:41,000 --> 00:12:44,600
what is the universal marcation for all the hosts that are up?

174
00:12:44,600 --> 00:12:50,000
Well, you have a flag here next to the status, and then flag up.

175
00:12:50,000 --> 00:12:53,000
So just go ahead and type in "Up" and press Enter.

176
00:12:53,000 --> 00:12:54,500
Excellent

177
00:12:54,500 --> 00:12:57,149
I'll just give you a bit of clarity

178
00:12:57,149 --> 00:12:59,000
There we go

179
00:12:59,000 --> 00:13:02,000
You have these flags which are up.

180
00:13:02,000 --> 00:13:07,939
So I all the hosts here that are currently up and running, that are alive on the network

181
00:13:07,939 --> 00:13:10,000
but this is not what I want.

182
00:13:10,000 --> 00:13:15,200
If I wanted to pass these IP addresses to another program or something of a kind

183
00:13:15,200 --> 00:13:19,280
I wouldn't be able to pass this whole line because it would make no sense

184
00:13:19,290 --> 00:13:23,200
if the other program is requesting only the IP address of the host

185
00:13:23,200 --> 00:13:28,000
because you can do one nmap scan to see just to see which hosts are alive

186
00:13:28,000 --> 00:13:31,200
and then once you've figured out which hosts are alive

187
00:13:31,200 --> 00:13:35,400
then you can do a more detailed scan on those particular hosts

188
00:13:35,400 --> 00:13:39,000
and in such a way you would save a lot of time.

189
00:13:39,000 --> 00:13:40,500
So we have these hosts here

190
00:13:40,500 --> 00:13:46,000
but we want to pull these IP addresses, and I'm afraid I just can't do that with grep.

191
00:13:46,000 --> 00:13:53,699
Perhaps I even could, but it would be just too complicated and too complex

192
00:13:53,699 --> 00:13:56,000
and it really wouldn't be practical.

193
00:13:56,000 --> 00:14:03,000
That is why Linux has something that is called awk.

194
00:14:03,000 --> 00:14:06,700
It's basically used for formatting text

195
00:14:06,700 --> 00:14:14,300
and pulling out certain parts of a file that you need or something of a kind.

196
00:14:14,300 --> 00:14:17,500
Now you can make a separate tutorial on awk.

197
00:14:17,500 --> 00:14:25,000
You can have hundreds of hours and there would still be features of it that you would not know.

198
00:14:25,000 --> 00:14:28,700
I would strongly advise you to familiarize yourselves with awk.

199
00:14:28,700 --> 00:14:31,200
Take a look at the man pages for awk.

200
00:14:31,200 --> 00:14:35,000
However, for the time being and for the purposes of this tutorial

201
00:14:35,000 --> 00:14:40,200
we will be using some basic awk commands, which pretty much everybody uses

202
00:14:40,200 --> 00:14:44,400
and which are a necessary part of pen testing

203
00:14:44,400 --> 00:14:47,800
primarily because you need to do stuff of a kind that we're gonna do here.

204
00:14:47,800 --> 00:14:54,200
So cat SCAN, print everything to standard output, grep up

205
00:14:54,200 --> 00:14:58,000
grep all lines that contain the word "Up"

206
00:14:58,000 --> 00:15:05,300
and then what I want to do here is eliminate this part, leave this part in, and eliminate this part.

207
00:15:05,300 --> 00:15:06,500
Now how shall I do that?

208
00:15:06,500 --> 00:15:12,000
Well, the first thing that we need to specify is a field delimiter.

209
00:15:12,000 --> 00:15:13,800
What a field delimiter is

210
00:15:13,800 --> 00:15:19,800
Basically if you say that the colon here is a field delimiter, this will be one field

211
00:15:19,800 --> 00:15:23,700
this will be another field, and this would be yet another field.

212
00:15:23,700 --> 00:15:26,600
So you will have three fields in total.

213
00:15:26,600 --> 00:15:29,200
However, that doesn't really work for us, does it?

214
00:15:29,200 --> 00:15:33,300
Because if we say that the colon is a delimiter

215
00:15:33,300 --> 00:15:38,700
this entire section that I've highlighted will be considered a field

216
00:15:38,700 --> 00:15:43,900
and we will have parentheses and status - The parts that we don't really want.

217
00:15:43,900 --> 00:15:47,200
What you can use as a field delimiter here is a space.

218
00:15:47,200 --> 00:15:49,000
So space here

219
00:15:49,000 --> 00:15:52,000
This is one field, this is gonna be another

220
00:15:52,000 --> 00:15:56,000
and this is gonna be, again, a field delimiter because there's a space

221
00:15:56,000 --> 00:15:58,800
and this will be the third one, and then you have again space

222
00:15:58,800 --> 00:16:01,000
and the forth one, and so on and so forth.

223
00:16:01,000 --> 00:16:04,800
So in order to specify a field delimiter to be space

224
00:16:04,800 --> 00:16:09,700
well, simply leave an empty space in between the quotation marks.

225
00:16:09,700 --> 00:16:13,700
Generally you would put quotation marks and you would specify a field delimiter in between them.

226
00:16:13,700 --> 00:16:17,500
If you wanted to a colon, this is how you would do it

227
00:16:17,500 --> 00:16:21,300
but we don't want a colon, we just want a space and that's it.

228
00:16:21,300 --> 00:16:25,200
Open single quotation marks, open curly brackets

229
00:16:25,200 --> 00:16:31,000
type in "print", space, dollar sign

230
00:16:31,000 --> 00:16:36,700
and then you just need to type in the number of the field that you would like to print out.

231
00:16:36,700 --> 00:16:40,200
So we would like to print out the second field

232
00:16:40,200 --> 00:16:46,900
2, close curly brackets, close quotation marks list, press ENTER, and there we go.

233
00:16:46,900 --> 00:16:54,000
We have all the IP addresses listed of the hosts that are up, without anything else.

234
00:16:54,000 --> 00:16:59,500
Now what you can do with this is pass it to another file.

235
00:16:59,500 --> 00:17:04,500
It's called SCAN2

236
00:17:04,500 --> 00:17:05,300
press ENTER

237
00:17:05,300 --> 00:17:13,000
and then you can type in "nmap -iL SCAN2"

238
00:17:13,000 --> 00:17:24,500
and then you can do a full nmap scan for just four hosts.

239
00:17:24,500 --> 00:17:31,000
So now you can so a full scan for just four hosts instead of doing it for all 255 hosts.

240
00:17:31,000 --> 00:17:32,800
Just figure out which hosts are alive

241
00:17:32,800 --> 00:17:37,500
and you don't need to do that port 22 or something of a kind.

242
00:17:37,500 --> 00:17:42,000
Just do a ping sweep and that's going to be it.

243
00:17:42,000 --> 00:17:47,400
You will be able to figure out which hosts are alive, perform detailed analysis of this particular host

244
00:17:47,400 --> 00:17:50,800
and you can see I'm already receiving information here.

245
00:17:50,800 --> 00:17:53,200
It says port 21...

246
00:17:53,200 --> 00:18:00,400
Yeah, that's not the best of ideas, but this is my home router that using for these testing purposes.

247
00:18:00,400 --> 00:18:02,500
It is filled with holes

248
00:18:02,500 --> 00:18:07,200
and don't worry about it, I'm gonna switch it as soon as I'm done with the tutorial.

249
00:18:07,200 --> 00:18:10,400
I have 431 on 102

250
00:18:10,400 --> 00:18:12,679
so I probably have some ssl going on there

251
00:18:12,679 --> 00:18:16,300
Port 80 here, port 23

252
00:18:16,300 --> 00:18:19,400
We will soon see what all these services mean

253
00:18:19,400 --> 00:18:26,500
However, you can experience these flags here and usually you will get them delays

254
00:18:26,500 --> 00:18:29,300
because, you know, there are some packets that are being dropped

255
00:18:29,300 --> 00:18:34,400
some that are being refused by the servers on the other side.

256
00:18:34,400 --> 00:18:38,200
You can also have time limiters and so on and so forth.

257
00:18:38,200 --> 00:18:48,000
So here you can see the scans and what they have revealed thus far.

258
00:18:48,000 --> 00:18:50,500
They've given me details scans

259
00:18:50,500 --> 00:18:57,700
and they can tell me pretty much everything that I want to know in regards to the local area network.

260
00:18:57,700 --> 00:19:03,000
It even gives out the MAC addresses, which I'm gonna cover up and you won't be able to see them

261
00:19:03,000 --> 00:19:05,900
but in any case, you see how much information do you get

262
00:19:05,900 --> 00:19:09,600
and how much time you can save.

263
00:19:09,600 --> 00:19:16,000
Now I'm going to call the tutorial here and we will move on to the next one.

264
00:19:16,000 --> 00:19:18,000
I hope that you enjoyed this one

265
00:19:18,000 --> 00:19:22,000
and I'll see you next time.

