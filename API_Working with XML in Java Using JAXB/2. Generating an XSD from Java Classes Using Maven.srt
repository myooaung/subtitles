1
00:00:02,130 --> 00:00:06,467
Maven is the most widely used build and dependency

2
00:00:06,467 --> 00:00:08,877
management tool for Java projects.

3
00:00:08,877 --> 00:00:11,362
When you're a professional Java developer,

4
00:00:11,362 --> 00:00:14,512
you'll undoubtedly work with Maven at some point.

5
00:00:14,512 --> 00:00:18,308
When you're going to use JAXB in your Maven project,

6
00:00:18,308 --> 00:00:20,483
and you're using the code-first approach,

7
00:00:20,483 --> 00:00:27,187
you'll want to be able to let Maven call schemagen during the build process.

8
00:00:27,187 --> 00:00:32,236
In this clip, I'll show you how you can set up your Maven project for this.

9
00:00:32,236 --> 00:00:34,929
To make it easier to explain the example,

10
00:00:34,929 --> 00:00:38,808
I'll first give you a super quick overview of Maven.

11
00:00:38,808 --> 00:00:45,768
The central concept that Maven is based around is the concept of a lifecycle.

12
00:00:45,768 --> 00:00:50,262
A Maven lifecycle consists of a number of phases.

13
00:00:50,262 --> 00:00:57,888
When you run Maven, it's going to go through all the phases of a lifecycle.

14
00:00:57,888 --> 00:01:04,448
Maven's default build lifecycle consists of a long list of more than 20 phases.

15
00:01:04,448 --> 00:01:09,393
Some of the phases in the default build lifecycle are,

16
00:01:09,393 --> 00:01:13,374
for example, validate, compile, test, package,

17
00:01:13,374 --> 00:01:14,506
and install.

18
00:01:14,506 --> 00:01:20,997
During each phase, Maven executes a number of tasks called goals.

19
00:01:20,997 --> 00:01:27,247
These goals can, for example, be compile Java source files,

20
00:01:27,247 --> 00:01:33,340
run unit tests, and package the compiled classes into a JAR file.

21
00:01:33,340 --> 00:01:35,980
The goals are provided by plugins.

22
00:01:35,980 --> 00:01:41,756
There are a number of plugins that are provided with Maven itself to perform

23
00:01:41,756 --> 00:01:46,355
the common tasks that are needed to build a Java project.

24
00:01:46,355 --> 00:01:50,888
Each goal belongs to a particular phase in the lifecycle,

25
00:01:50,888 --> 00:01:56,932
and the sequence of phases determines in which order the goals are executed.

26
00:01:56,932 --> 00:02:00,084
There are many plugins available for Maven,

27
00:02:00,084 --> 00:02:01,919
and for working with JAXB,

28
00:02:01,919 --> 00:02:09,795
we are going to use a plugin that provides goals for running schemagen and xjc.

29
00:02:09,795 --> 00:02:15,823
You configure a Maven project using an XML file named pom.

30
00:02:15,823 --> 00:02:16,371
xml.

31
00:02:16,371 --> 00:02:21,196
In the POM file, you configure the build lifecycle in a declarative way,

32
00:02:21,196 --> 00:02:26,501
which means that you don't specify a list of tasks or commands to execute,

33
00:02:26,501 --> 00:02:32,031
you only specify the structure of your project and what dependencies it has.

34
00:02:32,031 --> 00:02:33,276
In other words,

35
00:02:33,276 --> 00:02:41,181
in the POM file you just describe the what and not the how of the build process.

36
00:02:41,181 --> 00:02:46,689
It's the lifecycle and the activated plugins that determine the how.

37
00:02:46,689 --> 00:02:50,165
The advantage of this is that it makes it easy to

38
00:02:50,165 --> 00:02:52,632
understand the structure of the project.

39
00:02:52,632 --> 00:02:56,301
Finally, Maven is not only a build tool,

40
00:02:56,301 --> 00:02:58,601
but also a dependency management tool,

41
00:02:58,601 --> 00:03:02,491
which means that it can automatically download and keep

42
00:03:02,491 --> 00:03:05,946
track of libraries that your project needs.

43
00:03:05,946 --> 00:03:09,773
If you're not familiar with Maven and you want to learn more,

44
00:03:09,773 --> 00:03:13,754
then there's a Pluralsight course available,

45
00:03:13,754 --> 00:03:17,071
Maven Fundamentals by Bryan Hansen.

46
00:03:17,071 --> 00:03:20,761
You can find Maven on the web on maven.

47
00:03:20,761 --> 00:03:21,171
apache.

48
00:03:21,171 --> 00:03:21,581
org.

49
00:03:21,581 --> 00:03:28,193
Now let's get to work with example ps-jaxb-30-maven-schemagen to see

50
00:03:28,193 --> 00:03:33,008
how we can set up the plugin to call schemagen.

51
00:03:33,008 --> 00:03:34,039
In this example,

52
00:03:34,039 --> 00:03:40,287
we have a set of Java source files with JAXB annotations in the package com.

53
00:03:40,287 --> 00:03:40,850
jesperdj.

54
00:03:40,850 --> 00:03:41,412
jaxb.

55
00:03:41,412 --> 00:03:48,939
domain, and we would like to generate an XSD from these sources using Maven.

56
00:03:48,939 --> 00:03:52,965
The aim of this example is to have a JAR file that

57
00:03:52,965 --> 00:03:58,895
contains not only the compiled classes, but also the generated XSD.

58
00:03:58,895 --> 00:04:04,138
Let's take a look at the POM file and see how we can configure this.

59
00:04:04,138 --> 00:04:08,191
First, we have to activate the JAXB plugin.

60
00:04:08,191 --> 00:04:14,037
There are several different Maven plugins available for working with JAXB.

61
00:04:14,037 --> 00:04:19,765
The one I'm using here is jaxb2-maven-plugin from MojoHaus,

62
00:04:19,765 --> 00:04:23,308
which provides goals for calling schemagen,

63
00:04:23,308 --> 00:04:25,670
as well as xjc.

64
00:04:25,670 --> 00:04:28,356
In the pluginManagement section of the POM,

65
00:04:28,356 --> 00:04:33,186
I've specified that I want to use jaxb2-maven-plugin version 2.

66
00:04:33,186 --> 00:04:33,769
3.

67
00:04:33,769 --> 00:04:38,544
1, which is the latest version at the moment.

68
00:04:38,544 --> 00:04:41,958
To configure what the plugin will do exactly,

69
00:04:41,958 --> 00:04:45,029
we will need to add a configuration for the plugin

70
00:04:45,029 --> 00:04:48,124
in the plugin section of the POM.

71
00:04:48,124 --> 00:04:52,648
Besides the groupId and artifactId that identify the plugin,

72
00:04:52,648 --> 00:04:56,442
we will have to add a few things here.

73
00:04:56,442 --> 00:04:57,487
First of all,

74
00:04:57,487 --> 00:05:02,359
we have to define an execution in which we specify which goal of the

75
00:05:02,359 --> 00:05:05,475
plugin we want to run during the build process,

76
00:05:05,475 --> 00:05:08,559
which is, in this case, the schemagen goal.

77
00:05:08,559 --> 00:05:13,264
Note that we don't need to say during which phase in the

78
00:05:13,264 --> 00:05:15,947
build lifecycle this has to be called.

79
00:05:15,947 --> 00:05:19,111
The plugin binds this goal to a default phase,

80
00:05:19,111 --> 00:05:22,465
which is, in this case, the generate resources phase,

81
00:05:22,465 --> 00:05:25,798
which is part of the standard build lifecycle,

82
00:05:25,798 --> 00:05:31,210
and which is executed before Java source files are compiled.

83
00:05:31,210 --> 00:05:32,668
Besides the execution,

84
00:05:32,668 --> 00:05:39,004
we have to specify some configuration parameters in the configuration section.

85
00:05:39,004 --> 00:05:43,473
For this example, there are three things to configure.

86
00:05:43,473 --> 00:05:43,877
First,

87
00:05:43,877 --> 00:05:48,514
I want to tell the plugin where to find the Java source

88
00:05:48,514 --> 00:05:50,734
files of the domain model classes.

89
00:05:50,734 --> 00:05:51,424
By default,

90
00:05:51,424 --> 00:05:55,592
the plugin will pick up all source files in the directory src/main/java,

91
00:05:55,592 --> 00:06:00,451
but I want it to look at only the files in the package

92
00:06:00,451 --> 00:06:03,235
that contains the domain model classes.

93
00:06:03,235 --> 00:06:09,804
Second, I specify the output directory that I want the XSD file to be written to.

94
00:06:09,804 --> 00:06:11,070
For this example,

95
00:06:11,070 --> 00:06:15,292
I'll let the plugin write the XSD to the directory

96
00:06:15,292 --> 00:06:19,984
that's specified by the Maven property, project.

97
00:06:19,984 --> 00:06:20,654
build.

98
00:06:20,654 --> 00:06:26,323
outputDirectory, which means that it will go into the target/classes directory.

99
00:06:26,323 --> 00:06:27,803
By putting it there,

100
00:06:27,803 --> 00:06:32,628
the JAR plugin will automatically find it and add it to the JAR

101
00:06:32,628 --> 00:06:35,993
file in a later phase in the build process.

102
00:06:35,993 --> 00:06:40,681
Finally, I'll add a transformSchemas section.

103
00:06:40,681 --> 00:06:45,274
Here I can specify that I want the schema for our example

104
00:06:45,274 --> 00:06:49,865
namespace to be written to a file named purchaseOrder.

105
00:06:49,865 --> 00:06:50,412
xsd.

106
00:06:50,412 --> 00:06:54,024
That's all for the configuration of the plugin.

107
00:06:54,024 --> 00:06:58,647
Let's run the example and see what output we get exactly.

108
00:06:58,647 --> 00:07:04,647
I'll open a terminal and compile the project using mvn clean package.

109
00:07:04,647 --> 00:07:06,536
If you look at the Maven login,

110
00:07:06,536 --> 00:07:11,599
you'll see that a number of goals have been executed to build the project.

111
00:07:11,599 --> 00:07:16,354
First, the target directory is deleted by the maven-clean plugin.

112
00:07:16,354 --> 00:07:20,808
Then the schemagen goal of the jaxb-2-maven-plugin is called.

113
00:07:20,808 --> 00:07:27,401
Then there are a few more steps, such as copying resource files,

114
00:07:27,401 --> 00:07:31,715
compiling Java sources, some steps for unit tests,

115
00:07:31,715 --> 00:07:32,739
and finally,

116
00:07:32,739 --> 00:07:37,771
the maven-jar-plugin is called to package everything into a JAR file.

117
00:07:37,771 --> 00:07:43,418
If I look at what's inside the JAR file which is in the target directory,

118
00:07:43,418 --> 00:07:46,184
I see that besides the compiled classes,

119
00:07:46,184 --> 00:07:50,069
it indeed also contains the purchaseOrder.

120
00:07:50,069 --> 00:07:51,364
xsd file.

121
00:07:51,364 --> 00:07:55,082
That's what I wanted to show you in this example.

122
00:07:55,082 --> 00:07:59,815
This is just a simple example to give you an idea of how this works,

123
00:07:59,815 --> 00:08:04,689
but the plugin has many more possibilities for other scenarios.

124
00:08:04,689 --> 00:08:08,050
You can find the documentation and more information

125
00:08:08,050 --> 00:08:20,000
about this plugin at the following URL. You can find this link also in the readme file that's included with example 30.

