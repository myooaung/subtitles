WEBVTT
1
00:00:02.097 --> 00:00:05.571
Just like with the annotations that you use to customize

2
00:00:05.571 --> 00:00:07.727
mappings when using the code-first approach,

3
00:00:07.727 --> 00:00:12.472
there are many different things you can customize using a bindings

4
00:00:12.472 --> 00:00:16.303
file when you use the schema-first approach.

5
00:00:16.303 --> 00:00:21.015
Let's take a look at a number of different things that you can customize.

6
00:00:21.015 --> 00:00:24.891
We're going to look at the following topics.

7
00:00:24.891 --> 00:00:27.741
How to specify the package name in the bindings file

8
00:00:27.741 --> 00:00:29.841
instead of on the command line,

9
00:00:29.841 --> 00:00:35.739
how to customize the names of generated classes with a prefix or suffix,

10
00:00:35.739 --> 00:00:40.139
how to map a complex type to a class that you wrote

11
00:00:40.139 --> 00:00:43.530
yourself instead of a class generated by xjc,

12
00:00:43.530 --> 00:00:47.370
how to map a simple type to a class,

13
00:00:47.370 --> 00:00:53.194
how to customize the name of a field or property in a class,

14
00:00:53.194 --> 00:00:58.511
how to specify that you don't want a field to be a JAXBElement if its

15
00:00:58.511 --> 00:01:06.288
corresponding XmlElement has minOccurs=0 and nillable=true in the XSD.

16
00:01:06.288 --> 00:01:14.183
Let's go to example ps-jaxb-20-bindings in the IDE.

17
00:01:14.183 --> 00:01:16.037
We have our purchaseOrder.

18
00:01:16.037 --> 00:01:16.964
xsd file.

19
00:01:16.964 --> 00:01:22.253
Now let's add a bindings file again with the name bindings.

20
00:01:22.253 --> 00:01:22.755
xjb.

21
00:01:22.755 --> 00:01:26.712
As you already saw in the previous clip,

22
00:01:26.712 --> 00:01:32.487
this is an XML file with a jaxb:bindings element as the root element.

23
00:01:32.487 --> 00:01:37.061
We define prefixes for the jaxb:bindings namespace and also

24
00:01:37.061 --> 00:01:39.778
for the standard XML Schema namespace,

25
00:01:39.778 --> 00:01:44.970
and we have to add a version attribute to the root element.

26
00:01:44.970 --> 00:01:47.210
According to the JAXB standard,

27
00:01:47.210 --> 00:01:52.534
the only allowed values for the version attribute are 1.

28
00:01:52.534 --> 00:01:54.240
0 and 2.

29
00:01:54.240 --> 00:01:54.809
0.

30
00:01:54.809 --> 00:01:56.587
We are using 2.

31
00:01:56.587 --> 00:01:57.476
0 here.

32
00:01:57.476 --> 00:02:01.460
Note that this does not directly correspond to the

33
00:02:01.460 --> 00:02:04.451
version of JAXB that you are using.

34
00:02:04.451 --> 00:02:07.659
Java 8 comes with JAXB version 2.

35
00:02:07.659 --> 00:02:12.481
2, and Java 9 comes with JAXB version 2.

36
00:02:12.481 --> 00:02:13.017
3.

37
00:02:13.017 --> 00:02:17.513
The version number that you specify here is really the version number

38
00:02:17.513 --> 00:02:21.865
of the jaxb:bindings schema that you are using.

39
00:02:21.865 --> 00:02:24.408
Within the bindings root element of this file,

40
00:02:24.408 --> 00:02:27.508
we can specify a number of bindings declarations.

41
00:02:27.508 --> 00:02:31.609
Let's add one that refers to the purchaseOrder.

42
00:02:31.609 --> 00:02:37.373
xsd since we want to customize bindings for that XSD.

43
00:02:37.373 --> 00:02:39.129
Within this bindings element,

44
00:02:39.129 --> 00:02:44.292
we can add a schemaBindings element to specify a number of

45
00:02:44.292 --> 00:02:46.905
customizations for the whole schema.

46
00:02:46.905 --> 00:02:51.059
One of the things we can add there is a package element to

47
00:02:51.059 --> 00:02:55.186
specify the name of the package that we want the target

48
00:02:55.186 --> 00:02:57.898
namespace of the schema to map to.

49
00:02:57.898 --> 00:03:01.500
Remember that in the previous examples where we used xjc,

50
00:03:01.500 --> 00:03:08.102
we had to provide the package name on the command line using the -p option.

51
00:03:08.102 --> 00:03:12.035
When we specify the package name here in the bindings file,

52
00:03:12.035 --> 00:03:15.781
we don't have to provide it on the command line anymore.

53
00:03:15.781 --> 00:03:18.769
Another thing that you can add to the schema bindings

54
00:03:18.769 --> 00:03:21.055
element is the nameXmlTransform element.

55
00:03:21.055 --> 00:03:23.140
Using this element,

56
00:03:23.140 --> 00:03:29.391
you can configure that you want the classes that are generated for XML Schema

57
00:03:29.391 --> 00:03:34.470
types and root level elements to have a prefix or suffix.

58
00:03:34.470 --> 00:03:35.300
For example,

59
00:03:35.300 --> 00:03:40.163
I can add a jaxb:typeName element here to configure that I want

60
00:03:40.163 --> 00:03:44.081
the names of all classes that correspond to complex or simple

61
00:03:44.081 --> 00:03:47.075
types to end with the word Type.

62
00:03:47.075 --> 00:03:47.502
Likewise,

63
00:03:47.502 --> 00:03:54.869
I can add a jaxb:elementName element to do the same for root level elements.

64
00:03:54.869 --> 00:03:58.583
When I now generate the classes again by running xjc,

65
00:03:58.583 --> 00:04:01.999
I don't have to specify the package name anymore,

66
00:04:01.999 --> 00:04:08.940
but I do have to use the -b option to tell xjc to use the bindings file.

67
00:04:08.940 --> 00:04:10.239
As you see,

68
00:04:10.239 --> 00:04:14.637
the generated classes for the complex and simple types now all have

69
00:04:14.637 --> 00:04:19.907
names that end with Type such as AddressType,

70
00:04:19.907 --> 00:04:22.433
CustomerType, ItemType, etc.

71
00:04:22.433 --> 00:04:23.709
For the PurchaseOrder element,

72
00:04:23.709 --> 00:04:27.814
which is defined in the XSD as a root level element

73
00:04:27.814 --> 00:04:34.605
with an anonymous complexType, we now get a class named PurchaseOrderElement.

74
00:04:34.605 --> 00:04:38.572
Let's continue with the next customization.

75
00:04:38.572 --> 00:04:40.166
Suppose that, for whatever reason,

76
00:04:40.166 --> 00:04:44.178
you are not happy with one of the classes that xjc generates,

77
00:04:44.178 --> 00:04:49.530
and you would rather want to write the Java code for this class yourself.

78
00:04:49.530 --> 00:04:50.339
For example,

79
00:04:50.339 --> 00:04:55.713
one of the things that's not so nice is that XJC generates a wrapper

80
00:04:55.713 --> 00:04:58.411
class for the items element over purchaseOrder.

81
00:04:58.411 --> 00:05:03.263
One thing we could do is to write a class for the

82
00:05:03.263 --> 00:05:04.564
purchaseOrder element ourselves,

83
00:05:04.564 --> 00:05:08.749
which has an items field with an XmlElementWrapper annotation,

84
00:05:08.749 --> 00:05:15.588
and then tell JAXB to use this class instead of automatically generating one.

85
00:05:15.588 --> 00:05:21.208
I'll copy the PurchaseOrder class that we wrote ourselves in one of the earlier

86
00:05:21.208 --> 00:05:25.938
examples to this example and rename it to MyPurchaseOrder.

87
00:05:25.938 --> 00:05:30.257
To customize how JAXB handles the PurchaseOrder element,

88
00:05:30.257 --> 00:05:34.544
I'll add a jaxb:bindings element to the bindings file

89
00:05:34.544 --> 00:05:38.005
inside the bindings element for the schema.

90
00:05:38.005 --> 00:05:39.814
On this new bindings element,

91
00:05:39.814 --> 00:05:44.941
I'll set a node attribute with an XPath expression that points to the

92
00:05:44.941 --> 00:05:49.184
element declaration of the PurchaseOrder element in the XSD.

93
00:05:49.184 --> 00:05:51.194
Inside this bindings element,

94
00:05:51.194 --> 00:05:57.645
I can now specify customizations specifically for the PurchaseOrder element.

95
00:05:57.645 --> 00:06:01.196
To tell JAXB that I wanted to use the MyPurchaseOrder

96
00:06:01.196 --> 00:06:03.573
class instead of generating a class,

97
00:06:03.573 --> 00:06:09.014
I'll add a jaxb:class element here with a ref attribute that contains

98
00:06:09.014 --> 00:06:13.529
the fully qualified domain name of my custom class.

99
00:06:13.529 --> 00:06:18.276
Note that my IDE makes the ref attribute red because for some

100
00:06:18.276 --> 00:06:20.908
reason it thinks this attribute is not allowed here,

101
00:06:20.908 --> 00:06:23.906
but that looks like a bug in the IDE.

102
00:06:23.906 --> 00:06:25.906
When I run xjc again,

103
00:06:25.906 --> 00:06:30.795
I see that it now indeed doesn't generate a class for

104
00:06:30.795 --> 00:06:32.786
the PurchaseOrder element anymore.

105
00:06:32.786 --> 00:06:34.199
Earlier in the course,

106
00:06:34.199 --> 00:06:38.786
you learned how you can use the XmlValue annotation to map a

107
00:06:38.786 --> 00:06:43.186
class to a simple type instead of a complex type.

108
00:06:43.186 --> 00:06:46.439
When you generate Java classes from an XSD,

109
00:06:46.439 --> 00:06:51.098
then simple types will normally either be mapped to Java enums in

110
00:06:51.098 --> 00:06:53.851
case the simple type has enumeration facets,

111
00:06:53.851 --> 00:07:00.282
or to the Java type that corresponds to the base type of the simple type.

112
00:07:00.282 --> 00:07:05.358
To see this, let's add a simpleType named phoneNumber to the XSD.

113
00:07:05.358 --> 00:07:09.115
The base type for the phoneNumber type is xs:string,

114
00:07:09.115 --> 00:07:14.146
and it will have an xs:pattern restriction that says that a

115
00:07:14.146 --> 00:07:18.386
phoneNumber must consist of exactly 10 digits.

116
00:07:18.386 --> 00:07:22.074
Let's also add a phoneNumber element that uses this

117
00:07:22.074 --> 00:07:24.123
type to the customer element.

118
00:07:24.123 --> 00:07:28.025
When I now run xjc again and look at class CustomerType,

119
00:07:28.025 --> 00:07:31.188
I see that a field phoneNumber has been added,

120
00:07:31.188 --> 00:07:36.059
which is a string, which is the base type of the simpleType phoneNumber.

121
00:07:36.059 --> 00:07:40.526
Suppose that I would want to have a separate class

122
00:07:40.526 --> 00:07:43.119
generated for the simpleType phoneNumber.

123
00:07:43.119 --> 00:07:47.162
It's possible to do that by adding another bindings element to the

124
00:07:47.162 --> 00:07:51.211
bindings file with a node attribute that points to the phoneNumber

125
00:07:51.211 --> 00:07:55.861
type and adding a jaxb:class element in there.

126
00:07:55.861 --> 00:07:58.686
When I generate the classes again using xjc,

127
00:07:58.686 --> 00:08:03.397
I will now get a separate class for the phoneNumber type,

128
00:08:03.397 --> 00:08:07.546
which has one field with an XmlValue annotation.

129
00:08:07.546 --> 00:08:13.234
In class CustomerType, this type is now used for the phoneNumber field.

130
00:08:13.234 --> 00:08:18.171
You've now seen a few customizations that are possible for the whole schema,

131
00:08:18.171 --> 00:08:21.831
or for specific complex or simple type.

132
00:08:21.831 --> 00:08:23.386
It is, of course,

133
00:08:23.386 --> 00:08:29.129
also possible to customize things for specific fields or properties in a type.

134
00:08:29.129 --> 00:08:33.159
Let's quickly look at some examples of that.

135
00:08:33.159 --> 00:08:35.856
Suppose that, for example, in our Java code,

136
00:08:35.856 --> 00:08:40.604
we would want to use a custom name for a field that is different from

137
00:08:40.604 --> 00:08:44.189
the name of the corresponding element in the XSD.

138
00:08:44.189 --> 00:08:45.139
For example,

139
00:08:45.139 --> 00:08:50.858
suppose that in class ItemType we want the name of the

140
00:08:50.858 --> 00:08:53.586
field productName to be productDescription.

141
00:08:53.586 --> 00:08:57.490
You probably won't be surprised by how you can do that.

142
00:08:57.490 --> 00:09:01.225
We add another bindings element that refers to the

143
00:09:01.225 --> 00:09:03.783
corresponding element declaration in the XSD,

144
00:09:03.783 --> 00:09:08.991
and then we add a jaxb:property element there with a name

145
00:09:08.991 --> 00:09:12.155
attribute to specify the custom name.

146
00:09:12.155 --> 00:09:17.064
There is one more customization that I want to show you right now.

147
00:09:17.064 --> 00:09:18.871
Remember that in the XSD,

148
00:09:18.871 --> 00:09:23.265
the comment field of the Item element is defined with

149
00:09:23.265 --> 00:09:26.270
both minOccurs=0 and nillable=true,

150
00:09:26.270 --> 00:09:32.961
which causes xjc to generate a field which is of type

151
00:09:32.961 --> 00:09:36.121
JAXBElement of String in class ItemType.

152
00:09:36.121 --> 00:09:40.559
Maybe in your application you don't really care about being able to see if

153
00:09:40.559 --> 00:09:44.810
the element is absent or explicitly set to nil in the XML,

154
00:09:44.810 --> 00:09:49.028
and the JAXBElement wrapper is just inconvenient.

155
00:09:49.028 --> 00:09:54.120
There is a way to tell xjc that it shouldn't generate the JAXBElement wrapper,

156
00:09:54.120 --> 00:09:58.652
and just generate a field of type String instead.

157
00:09:58.652 --> 00:10:02.150
You can do this by setting the generateElementProperty

158
00:10:02.150 --> 00:10:05.953
attribute of the property customization for the comment

159
00:10:05.953 --> 00:10:09.370
element to false in the bindings file.

160
00:10:09.370 --> 00:10:11.994
When you do this and run xjc again,

161
00:10:11.994 --> 00:10:16.986
you'll see that the comment field in class ItemType is now just

162
00:10:16.986 --> 00:10:21.018
a String instead of a JAXBElement of String.

163
00:10:21.018 --> 00:10:24.883
And now the very last point of this clip.

164
00:10:24.883 --> 00:10:26.172
In these examples,

165
00:10:26.172 --> 00:10:30.556
you saw how you can customize mappings for the whole schema for

166
00:10:30.556 --> 00:10:35.240
specific types and elements and for specific fields.

167
00:10:35.240 --> 00:10:41.404
It is also possible to specify some customizations at a global level.

168
00:10:41.404 --> 00:10:46.401
You do this by using a globalBindings element in the bindings file.

169
00:10:46.401 --> 00:10:50.137
These customizations will take effect for all schemas,

170
00:10:50.137 --> 00:10:50.604
types,

171
00:10:50.604 --> 00:10:54.673
and elements that xjc processes unless they are

172
00:10:54.673 --> 00:10:57.724
overridden in a more narrow scope.

173
00:10:57.724 --> 00:10:59.398
In the last example,

174
00:10:59.398 --> 00:11:04.521
we disabled the generation of our JAXBElement wrapper for one specific field.

175
00:11:04.521 --> 00:11:09.970
Maybe you'll want to disable this for all fields in all types.

176
00:11:09.970 --> 00:11:12.824
You could do that by specifying

177
00:11:12.824 --> 00:11:18.418
generateElementProperty=false on the globalBindings element.

178
00:11:18.418 --> 00:11:19.468
That's, of course,

179
00:11:19.468 --> 00:11:22.618
more convenient than having to specify it for each

180
00:11:22.618 --> 00:11:24.808
individual field that needs this.

181
00:11:24.808 --> 00:11:28.697
There's much more that you can customize than what you

182
00:11:28.697 --> 00:11:30.903
saw in the examples in this clip,

183
00:11:30.903 --> 00:11:34.909
but you now have an idea of how customizing bindings works

184
00:11:34.909 --> 00:11:44.000
when you use the schema-first approach. There will be more examples in the next clips.

