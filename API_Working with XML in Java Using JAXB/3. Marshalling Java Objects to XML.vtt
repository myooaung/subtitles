WEBVTT
1
00:00:01.839 --> 00:00:06.893
It is now time to start writing our first JAXB programs.

2
00:00:06.893 --> 00:00:10.763
We will start with marshalling.

3
00:00:10.763 --> 00:00:16.956
Take a look at the example named ps-jaxb-02-marshalling.

4
00:00:16.956 --> 00:00:18.846
In the package com.

5
00:00:18.846 --> 00:00:19.319
jesperdj.

6
00:00:19.319 --> 00:00:19.791
jaxb.

7
00:00:19.791 --> 00:00:25.136
domain, there are a few classes that represent our domain model.

8
00:00:25.136 --> 00:00:31.792
These are just simple Java classes with some fields and getters and setters.

9
00:00:31.792 --> 00:00:34.902
The PurchaseOrder class represents a purchase order,

10
00:00:34.902 --> 00:00:39.351
which contains a list of items and information about the customer.

11
00:00:39.351 --> 00:00:42.392
Let's take a look at class MarshallingExample1,

12
00:00:42.392 --> 00:00:49.474
which shows you how you can convert a purchaseOrder object into XML using JAXB.

13
00:00:49.474 --> 00:00:55.413
First, we need a purchaseOrder object with some information in it.

14
00:00:55.413 --> 00:00:58.230
There is a createPurchaseOrder method,

15
00:00:58.230 --> 00:01:01.611
which creates an example purchaseOrder object.

16
00:01:01.611 --> 00:01:05.056
We will not look at that method in detail.

17
00:01:05.056 --> 00:01:07.736
Let's focus on how to use JAXB.

18
00:01:07.736 --> 00:01:12.254
The first thing we need to do is create a JAXBContext.

19
00:01:12.254 --> 00:01:16.976
The newInstanceFactory method needs to know the domain model classes,

20
00:01:16.976 --> 00:01:19.520
so we pass it PurchaseOrder.

21
00:01:19.520 --> 00:01:20.029
class.

22
00:01:20.029 --> 00:01:24.523
JAXB will analyze this class and the other domain model

23
00:01:24.523 --> 00:01:28.013
classes that are referenced by class PurchaseOrder in

24
00:01:28.013 --> 00:01:31.334
order to create the JAXBContext.

25
00:01:31.334 --> 00:01:34.954
The next step is to create a marshaller by calling the

26
00:01:34.954 --> 00:01:37.668
createMarshaller method on the context.

27
00:01:37.668 --> 00:01:40.633
Class Marshaller has a setProperty method,

28
00:01:40.633 --> 00:01:46.222
which you can use to set options which modify the behavior of the marshaller.

29
00:01:46.222 --> 00:01:52.185
One of the standard options you can set is whether you want the XML formatted.

30
00:01:52.185 --> 00:01:54.538
By default, this is turned off,

31
00:01:54.538 --> 00:01:58.621
which means that there won't be any unnecessary spaces or

32
00:01:58.621 --> 00:02:01.093
line breaks between the XML elements.

33
00:02:01.093 --> 00:02:06.605
To make the output easier to read, let's set this property to true.

34
00:02:06.605 --> 00:02:08.889
To marshal the purchaseOrder object,

35
00:02:08.889 --> 00:02:13.269
we'll first need to create a JAXBElement object,

36
00:02:13.269 --> 00:02:17.686
which holds the purchaseOrder object and a QName object,

37
00:02:17.686 --> 00:02:21.278
which specifies the name of the XML element.

38
00:02:21.278 --> 00:02:28.186
A QName is a qualified name, which is a combination of a namespace and a name.

39
00:02:28.186 --> 00:02:32.642
To keep it simple, we are not specifying a namespace in this example,

40
00:02:32.642 --> 00:02:37.837
so the first argument to the constructor of the QName object is null.

41
00:02:37.837 --> 00:02:41.292
The last line does the actual marshalling.

42
00:02:41.292 --> 00:02:44.909
We need to pass two things to the marshal method,

43
00:02:44.909 --> 00:02:49.100
the object to marshal and where the output should go.

44
00:02:49.100 --> 00:02:52.319
The object to marshal is the JAXBElement,

45
00:02:52.319 --> 00:02:55.821
and the output goes directly to System.

46
00:02:55.821 --> 00:02:58.322
out, which is the console.

47
00:02:58.322 --> 00:03:00.220
Let's run this little program.

48
00:03:00.220 --> 00:03:04.881
The output is printed in the console window of my IDE.

49
00:03:04.881 --> 00:03:10.389
As you can see, the XML contains the purchase order information.

50
00:03:10.389 --> 00:03:13.768
Take a look at class PurchaseOrder and the other domain

51
00:03:13.768 --> 00:03:17.272
model classes and compare them to the XML.

52
00:03:17.272 --> 00:03:21.513
For each field, there is a corresponding XML element.

53
00:03:21.513 --> 00:03:22.669
If you look closely,

54
00:03:22.669 --> 00:03:28.053
then you might notice a few things that are not as you would want or expect.

55
00:03:28.053 --> 00:03:33.976
For example, the customer element is first in the XML before the items,

56
00:03:33.976 --> 00:03:40.487
even though in class PurchaseOrder, the items field is before the customer field.

57
00:03:40.487 --> 00:03:44.168
Also for each item, there is an items element,

58
00:03:44.168 --> 00:03:47.909
which doesn't sound logical since each of these

59
00:03:47.909 --> 00:03:50.925
elements is really a single item.

60
00:03:50.925 --> 00:03:52.045
In the next module,

61
00:03:52.045 --> 00:03:57.381
you're going to learn how to use the JAXB annotations to fix these problems.

62
00:03:57.381 --> 00:04:01.325
Let's go back to the Marshal method.

63
00:04:01.325 --> 00:04:04.805
There's actually not just one Marshal method.

64
00:04:04.805 --> 00:04:08.982
Class Marshaller contains a number of different overloaded

65
00:04:08.982 --> 00:04:11.732
versions for different kinds of outputs.

66
00:04:11.732 --> 00:04:15.858
What's interesting is that there are not just versions to

67
00:04:15.858 --> 00:04:18.761
write to an output string or a file,

68
00:04:18.761 --> 00:04:24.454
but also versions that integrate with the other Java XML APIs.

69
00:04:24.454 --> 00:04:26.132
So there are, for example,

70
00:04:26.132 --> 00:04:30.390
versions of the Marshal method that takes a SAX ContentHandler,

71
00:04:30.390 --> 00:04:37.464
a DOM Node, or a StAX XMLStreamWriter or XMLEventWriter.

72
00:04:37.464 --> 00:04:41.058
Let's take a closer look at how this works.

73
00:04:41.058 --> 00:04:44.052
Take a look at class MarshallingExample2.

74
00:04:44.052 --> 00:04:49.038
This example shows you how you can use JAXB to

75
00:04:49.038 --> 00:04:52.525
marshal an object into a StAX stream.

76
00:04:52.525 --> 00:04:55.557
Let's start at line 40 in this example.

77
00:04:55.557 --> 00:05:00.184
Here we are using the StAX API to create an XML document.

78
00:05:00.184 --> 00:05:04.226
Suppose that at some point we want to write a

79
00:05:04.226 --> 00:05:06.942
purchase order into the XML stream.

80
00:05:06.942 --> 00:05:13.040
To do that, we can simply pass the XMLStreamWriter object to the marshaller.

81
00:05:13.040 --> 00:05:17.668
Note that there's one property we have to set on the marshaller here.

82
00:05:17.668 --> 00:05:22.744
We have to set the property JAXB_FRAGMENT to true so that the marshaller

83
00:05:22.744 --> 00:05:26.848
doesn't output a complete document including an XML header,

84
00:05:26.848 --> 00:05:28.786
but just the purchaseOrder element.

85
00:05:28.786 --> 00:05:35.609
Why would you want to do something like this where you mix StAX and JAXB?

86
00:05:35.609 --> 00:05:36.591
As an example,

87
00:05:36.591 --> 00:05:41.997
think of a program that needs to make a database dump into an XML file.

88
00:05:41.997 --> 00:05:46.055
There could be millions of records in the database.

89
00:05:46.055 --> 00:05:48.101
If you would use only JAXB,

90
00:05:48.101 --> 00:05:52.440
what you would probably do is read all the records and put them

91
00:05:52.440 --> 00:05:55.693
into a list and then marshal that list using JAXB,

92
00:05:55.693 --> 00:06:01.160
but this would get you into trouble because your program would need a huge

93
00:06:01.160 --> 00:06:05.221
amount of memory to hold that list with millions of objects.

94
00:06:05.221 --> 00:06:09.661
A better way to do it would be to use StAX to write the XML and

95
00:06:09.661 --> 00:06:13.501
then fetch the database records in batches of,

96
00:06:13.501 --> 00:06:16.045
for example, 100 records each.

97
00:06:16.045 --> 00:06:25.000
You would then marshal the 100 objects in each batch where you would marshal them into the StAX stream.

