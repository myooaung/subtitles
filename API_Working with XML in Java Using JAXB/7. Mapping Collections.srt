1
00:00:01,833 --> 00:00:06,824
Collections are, of course, an essential element in almost any piece of software,

2
00:00:06,824 --> 00:00:11,815
so it's important to understand how JAXB handles collections.

3
00:00:11,815 --> 00:00:16,121
For this clip, there are a number of examples to work with.

4
00:00:16,121 --> 00:00:20,708
We are first going to see how JAXB marshals and unmarshals lists,

5
00:00:20,708 --> 00:00:24,547
and then we are going to examine how it works with maps.

6
00:00:24,547 --> 00:00:33,047
Let's open the first one, ps-jaxb-08-anno-lists-1 in the IDE.

7
00:00:33,047 --> 00:00:35,612
In the marshaling example of the previous module,

8
00:00:35,612 --> 00:00:39,962
we saw that the list of items in the purchaseOrder was

9
00:00:39,962 --> 00:00:43,166
mapped to XML in a peculiar way.

10
00:00:43,166 --> 00:00:46,725
For each item, an items element was generated,

11
00:00:46,725 --> 00:00:50,837
which doesn't look right because each items element

12
00:00:50,837 --> 00:00:54,169
is really just a single item.

13
00:00:54,169 --> 00:00:58,092
Let's see how we can improve this and what other possibilities there

14
00:00:58,092 --> 00:01:02,229
are for mapping lists and other kinds of collections,

15
00:01:02,229 --> 00:01:04,626
such as arrays, sets, and maps.

16
00:01:04,626 --> 00:01:04,965
First,

17
00:01:04,965 --> 00:01:11,013
let's look at how we can make it so that each item in the XML is

18
00:01:11,013 --> 00:01:15,181
in an item element instead of an items element.

19
00:01:15,181 --> 00:01:16,993
This is really easy.

20
00:01:16,993 --> 00:01:23,405
We just have to put an XmlElement annotation on the items field in

21
00:01:23,405 --> 00:01:28,073
class purchaseOrder and specify the element name item.

22
00:01:28,073 --> 00:01:33,811
When we now run the application, we get an item element for each item.

23
00:01:33,811 --> 00:01:36,174
Next, think about the following problem.

24
00:01:36,174 --> 00:01:41,913
What if we wanted the list of items in the XML to be inside an

25
00:01:41,913 --> 00:01:46,718
element that represents the whole list instead of having them in

26
00:01:46,718 --> 00:01:48,671
the purchaseOrder element directly?

27
00:01:48,671 --> 00:01:53,109
There is a straightforward, but cumbersome solution to this.

28
00:01:53,109 --> 00:01:55,027
Let's first look at that solution,

29
00:01:55,027 --> 00:02:00,100
and then after that we'll see a much better way to solve this problem.

30
00:02:00,100 --> 00:02:08,217
Take a look at example ps-jaxb-08-anno-lists-1 for the cumbersome solution.

31
00:02:08,217 --> 00:02:13,204
First, I'll run the example to make it more clear what I mean.

32
00:02:13,204 --> 00:02:15,707
In the output of this example,

33
00:02:15,707 --> 00:02:19,231
the purchaseOrder element contains an items element,

34
00:02:19,231 --> 00:02:22,825
which contains the item elements.

35
00:02:22,825 --> 00:02:26,733
How can we make JAXB do this?

36
00:02:26,733 --> 00:02:28,966
Let's open class PurchaseOrder.

37
00:02:28,966 --> 00:02:34,162
I've added an extra class named items and changed the field

38
00:02:34,162 --> 00:02:39,469
items in class PurchaseOrder to be of the type items instead

39
00:02:39,469 --> 00:02:42,764
of list item like we had before.

40
00:02:42,764 --> 00:02:48,191
Class Items is simply a wrapper class for the list of items.

41
00:02:48,191 --> 00:02:49,895
It contains just one field,

42
00:02:49,895 --> 00:02:55,446
which is the list of items that was previously in class PurchaseOrder.

43
00:02:55,446 --> 00:02:58,975
This works, but it's cumbersome.

44
00:02:58,975 --> 00:03:02,935
This extra wrapper class items makes it hard to work with the list of

45
00:03:02,935 --> 00:03:07,797
items in a purchase order in Java code because we have to go through

46
00:03:07,797 --> 00:03:10,241
this extra wrapper object every time.

47
00:03:10,241 --> 00:03:16,065
Fortunately, there is a better way to do this.

48
00:03:16,065 --> 00:03:22,988
Open the next example, ps-jaxb-09-anno-lists-2, to see the better solution.

49
00:03:22,988 --> 00:03:27,337
There's a special annotation to solve exactly this problem.

50
00:03:27,337 --> 00:03:32,503
Open class PurchaseOrder and look at the items field.

51
00:03:32,503 --> 00:03:37,305
I've added the XmlElementWrapper annotation on the field.

52
00:03:37,305 --> 00:03:40,244
This annotation does exactly what we need here,

53
00:03:40,244 --> 00:03:45,705
which is generate a wrapper element around the elements for the items.

54
00:03:45,705 --> 00:03:47,302
If you run this example,

55
00:03:47,302 --> 00:03:52,354
you'll see that the output is exactly the same as with the first solution

56
00:03:52,354 --> 00:03:56,099
without the need to have a cumbersome wrapper class.

57
00:03:56,099 --> 00:04:00,396
Besides lists, there are, of course, other kinds of connections,

58
00:04:00,396 --> 00:04:02,597
such as arrays and sets.

59
00:04:02,597 --> 00:04:06,119
There is not much to say about these.

60
00:04:06,119 --> 00:04:11,193
JAXB treats arrays and sets the same way as lists.

61
00:04:11,193 --> 00:04:14,578
I could've made the items field in class

62
00:04:14,578 --> 00:04:18,056
PurchaseOrder an array or even a hash set,

63
00:04:18,056 --> 00:04:21,625
and the output would be exactly the same.

64
00:04:21,625 --> 00:04:25,415
Let's take a look at what JAXB does with maps.

65
00:04:25,415 --> 00:04:31,164
There's no direct equivalent of a Java HashMap in XML schema.

66
00:04:31,164 --> 00:04:39,749
Open example ps-jaxb-10-anno-maps to see how JAXB marshals a HashMap to XML.

67
00:04:39,749 --> 00:04:41,091
In this example,

68
00:04:41,091 --> 00:04:46,532
I've changed the items field in class PurchaseOrder to a map with

69
00:04:46,532 --> 00:04:50,259
strings as keys and item objects as values.

70
00:04:50,259 --> 00:04:52,451
In the create PurchaseOrder method,

71
00:04:52,451 --> 00:04:57,655
I create a HashMap with two items with product codes as the keys.

72
00:04:57,655 --> 00:05:02,048
Let's see how the XML looks when we run this example.

73
00:05:02,048 --> 00:05:07,523
As you see, the items element now contains two entry elements,

74
00:05:07,523 --> 00:05:13,362
and each entry element contains a key element with a key and a value

75
00:05:13,362 --> 00:05:17,062
element with the fields of the corresponding item object.

76
00:05:17,062 --> 00:05:22,591
That works, and it's a straightforward and generic way to translate a map to XML,

77
00:05:22,591 --> 00:05:26,089
but maybe you want to do this differently.

78
00:05:26,089 --> 00:05:31,771
There are no specific annotations to customize how maps are translated to XML,

79
00:05:31,771 --> 00:05:37,818
but it is possible to customize what JAXB does in a way that allows you

80
00:05:37,818 --> 00:05:47,000
to map fields and properties almost any way you want. You'll learn how that works in the next clip.

