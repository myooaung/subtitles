1
00:00:01,812 --> 00:00:06,357
Let's quickly go over the most important concepts of XML.

2
00:00:06,357 --> 00:00:10,743
XML is pretty simple, and you've most likely worked with XML files before,

3
00:00:10,743 --> 00:00:15,337
so I'm not going to go into too much detail.

4
00:00:15,337 --> 00:00:19,697
XML stands for Extensible Markup Language.

5
00:00:19,697 --> 00:00:25,628
It's the standard text-based format for storing arbitrary structure data.

6
00:00:25,628 --> 00:00:32,043
To explain it, I'm going to start up my IDE and show you an example XML file.

7
00:00:32,043 --> 00:00:37,707
As you can see, this XML file contains information about a purchase order.

8
00:00:37,707 --> 00:00:39,597
It's easy to understand.

9
00:00:39,597 --> 00:00:43,377
Let's look at the main features of XML.

10
00:00:43,377 --> 00:00:50,227
An XML document contains elements, and each element starts and ends with a tag.

11
00:00:50,227 --> 00:00:55,791
The start tag consists of the name of the element between angle brackets.

12
00:00:55,791 --> 00:00:59,104
The end tag is the same as the start tag except that there is

13
00:00:59,104 --> 00:01:01,959
a forward slash before the element name.

14
00:01:01,959 --> 00:01:05,121
The start tag can optionally have attributes,

15
00:01:05,121 --> 00:01:10,160
such as the orderDate attribute on this purchaseOrder start tag,

16
00:01:10,160 --> 00:01:16,316
which are specified after the element name and separated by spaces.

17
00:01:16,316 --> 00:01:19,167
Attributes have a name and a value.

18
00:01:19,167 --> 00:01:24,831
The content of an element is what's between the start and end tags.

19
00:01:24,831 --> 00:01:28,053
This can be text or other elements.

20
00:01:28,053 --> 00:01:34,189
The element's productName, quantity, price, and so on here have text content.

21
00:01:34,189 --> 00:01:35,536
The items, customer,

22
00:01:35,536 --> 00:01:39,752
purchaseOrder element and more have other elements as their content.

23
00:01:39,752 --> 00:01:44,247
The fact that you can nest elements is a very powerful idea,

24
00:01:44,247 --> 00:01:47,469
and that's what makes it possible to store almost

25
00:01:47,469 --> 00:01:50,579
any kind of structure data in XML.

26
00:01:50,579 --> 00:01:53,245
If an element has no content,

27
00:01:53,245 --> 00:01:56,966
the start and end tag can be combined into a single tag with

28
00:01:56,966 --> 00:01:59,386
a forward slash after the element name.

29
00:01:59,386 --> 00:02:04,115
That's just a shorter way to write the start and end tag right

30
00:02:04,115 --> 00:02:06,951
next to each other with nothing in between.

31
00:02:06,951 --> 00:02:12,052
One other feature that I briefly want to explain is namespaces.

32
00:02:12,052 --> 00:02:16,854
Namespaces in XML are a bit like packages in Java.

33
00:02:16,854 --> 00:02:20,483
A namespace keeps a set of related tag names together,

34
00:02:20,483 --> 00:02:25,104
just like a Java package keeps related classes together.

35
00:02:25,104 --> 00:02:28,404
When you define a set of tag names for your application,

36
00:02:28,404 --> 00:02:33,876
it's a good idea to define a namespace to contain your tag names.

37
00:02:33,876 --> 00:02:38,949
Let's look at the syntax that is used to refer to namespaces.

38
00:02:38,949 --> 00:02:44,612
A start tag can have a special attribute with a name xmlns.

39
00:02:44,612 --> 00:02:48,484
The value of this attribute is the name of a namespace,

40
00:02:48,484 --> 00:02:54,473
and it specifies that the tag and its child tags belong to that namespace.

41
00:02:54,473 --> 00:03:00,633
The name of a namespace is a URI, a uniform resource identifier.

42
00:03:00,633 --> 00:03:02,628
It often looks like a URL,

43
00:03:02,628 --> 00:03:07,004
and it's a good idea to choose a URL that refers to a

44
00:03:07,004 --> 00:03:09,811
world wide web domain name that you own.

45
00:03:09,811 --> 00:03:14,804
This is exactly the same as with Java package names where you usually

46
00:03:14,804 --> 00:03:19,826
use a package name that corresponds to a web domain,

47
00:03:19,826 --> 00:03:20,831
like com.

48
00:03:20,831 --> 00:03:21,333
mycompany.

49
00:03:21,333 --> 00:03:21,835
mysoftware.

50
00:03:21,835 --> 00:03:26,520
Note that the URL does not need to point to any real resource on the web,

51
00:03:26,520 --> 00:03:31,408
so you don't need to have a server running that responds to the URL.

52
00:03:31,408 --> 00:03:33,390
Through the XML parser,

53
00:03:33,390 --> 00:03:37,849
it's just a string that uniquely identifies the namespace.

54
00:03:37,849 --> 00:03:40,929
Sometimes you'll need to use text from multiple

55
00:03:40,929 --> 00:03:43,647
different namespaces in your XML document.

56
00:03:43,647 --> 00:03:47,640
You can use namespace prefixes to indicate explicitly

57
00:03:47,640 --> 00:03:51,141
to which namespace a tag belongs.

58
00:03:51,141 --> 00:03:53,727
To declare a namespace with a prefix,

59
00:03:53,727 --> 00:03:58,124
you have to modify the xmlns attribute slightly by putting a

60
00:03:58,124 --> 00:04:01,612
colon and then a prefix name after it.

61
00:04:01,612 --> 00:04:06,174
You then use this prefix name in front of tag names

62
00:04:06,174 --> 00:04:08,663
that should be in that namespace.

63
00:04:08,663 --> 00:04:10,764
That's the super quick overview of XML.

64
00:04:10,764 --> 00:04:13,824
If you feel you need to know more about XML,

65
00:04:13,824 --> 00:04:22,000
then please take a look at the other Pluralsight courses about XML that I mentioned before.

