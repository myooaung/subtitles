WEBVTT
1
00:00:02.114 --> 00:00:07.738
Another build tool that's often used for building Java projects is Gradle.

2
00:00:07.738 --> 00:00:13.770
In this clip, I'll show you how you can call schemagen in a Gradle project.

3
00:00:13.770 --> 00:00:17.473
Gradle works in a different way than Maven.

4
00:00:17.473 --> 00:00:22.545
Instead of having a fixed build lifecycle consisting of phases like Maven,

5
00:00:22.545 --> 00:00:23.777
it's task-oriented.

6
00:00:23.777 --> 00:00:31.782
When you build a project using Gradle, it's going to run a series of tasks.

7
00:00:31.782 --> 00:00:35.261
Each task can be dependent on other tasks,

8
00:00:35.261 --> 00:00:41.756
which means that if you want to run some Task A that depends on Tasks B and C,

9
00:00:41.756 --> 00:00:47.541
then Gradle will have to run Tasks B and C before it runs Task A.

10
00:00:47.541 --> 00:00:49.565
When you build your project,

11
00:00:49.565 --> 00:00:53.730
Gradle is going to gather all the tasks that need to be executed,

12
00:00:53.730 --> 00:00:59.935
and determines the order by working out the dependencies between the tasks.

13
00:00:59.935 --> 00:01:05.452
You configure a Gradle project by providing a file named build.

14
00:01:05.452 --> 00:01:05.954
gradle.

15
00:01:05.954 --> 00:01:06.943
In this file,

16
00:01:06.943 --> 00:01:11.102
you specify the tasks that you want to be executed and what

17
00:01:11.102 --> 00:01:14.305
the dependencies between the tasks are.

18
00:01:14.305 --> 00:01:15.073
The build.

19
00:01:15.073 --> 00:01:20.063
gradle file is actually a file written in the Groovy programming language,

20
00:01:20.063 --> 00:01:25.769
or more specifically, in a domain-specific language based on Groovy.

21
00:01:25.769 --> 00:01:30.231
Gradle tasks can be provided either by plugins,

22
00:01:30.231 --> 00:01:37.036
similar to Maven, or by defining the tasks yourself in Groovy in the build.

23
00:01:37.036 --> 00:01:37.874
gradle file.

24
00:01:37.874 --> 00:01:43.173
On the one hand, because Gradle doesn't have a fixed lifecycle like Maven,

25
00:01:43.173 --> 00:01:49.042
it's more flexible and gives you more precise control over the build process.

26
00:01:49.042 --> 00:01:51.657
But on the other hand, because the build.

27
00:01:51.657 --> 00:01:55.285
gradle file is not a declarative specification of the

28
00:01:55.285 --> 00:01:58.277
project like the Maven POM file,

29
00:01:58.277 --> 00:02:03.208
it can be harder to understand the structure of a Gradle project.

30
00:02:03.208 --> 00:02:05.610
If you want to learn more about Gradle,

31
00:02:05.610 --> 00:02:08.739
then you can follow the Pluralsight course,

32
00:02:08.739 --> 00:02:12.807
Gradle Fundamentals by Kevin Jones.

33
00:02:12.807 --> 00:02:16.695
You can find Gradle on the web at gradle.

34
00:02:16.695 --> 00:02:17.127
org.

35
00:02:17.127 --> 00:02:24.122
Let's take a look at example ps-jaxb-32-gradle-schemagen.

36
00:02:24.122 --> 00:02:27.915
This example does the same as the Maven schemagen example,

37
00:02:27.915 --> 00:02:31.977
but it, of course, uses Gradle instead of Maven.

38
00:02:31.977 --> 00:02:35.169
Just like in the Maven schemagen example,

39
00:02:35.169 --> 00:02:39.446
we have our domain model classes in the package com.

40
00:02:39.446 --> 00:02:39.980
jesperdj.

41
00:02:39.980 --> 00:02:40.515
jaxb.

42
00:02:40.515 --> 00:02:41.049
domain,

43
00:02:41.049 --> 00:02:47.867
and we want to use schemagen via Gradle to generate the file purchaseOrder.

44
00:02:47.867 --> 00:02:48.368
xsd.

45
00:02:48.368 --> 00:02:50.876
Let's look at the build.

46
00:02:50.876 --> 00:02:54.362
gradle file to see how this is configured.

47
00:02:54.362 --> 00:02:55.641
Similar to Maven,

48
00:02:55.641 --> 00:03:01.704
we need a plugin to provide the tasks to work with the JAXB tools.

49
00:03:01.704 --> 00:03:08.033
Also like Maven, there are several plugins available from different parties.

50
00:03:08.033 --> 00:03:12.446
I've used a plugin here from Intershop Communications AG,

51
00:03:12.446 --> 00:03:15.934
which provides what we need for this example.

52
00:03:15.934 --> 00:03:21.092
For running schemagen, the plugin provides a jaxb.

53
00:03:21.092 --> 00:03:22.381
schemaGen task.

54
00:03:22.381 --> 00:03:27.763
To use this task, we create an example configuration.

55
00:03:27.763 --> 00:03:29.017
In this configuration,

56
00:03:29.017 --> 00:03:35.887
we specify where the Java source files are that we want schemagen to use for

57
00:03:35.887 --> 00:03:40.549
generating the XSD by setting the Java files property.

58
00:03:40.549 --> 00:03:43.717
We'll also specify a namespaceconfigs property,

59
00:03:43.717 --> 00:03:48.223
which is similar to the transformSchema configuration setting

60
00:03:48.223 --> 00:03:53.012
that we used in the Maven schemagen example.

61
00:03:53.012 --> 00:03:57.111
Here we specify that the schema for our example namespace

62
00:03:57.111 --> 00:04:01.711
should be written to a file named purchaseOrder.

63
00:04:01.711 --> 00:04:02.341
xsd.

64
00:04:02.341 --> 00:04:05.977
Then there are two more things to add.

65
00:04:05.977 --> 00:04:07.887
First I'm configuring sourceSets.

66
00:04:07.887 --> 00:04:13.255
main to include the directory that contains the generated XSD

67
00:04:13.255 --> 00:04:18.649
file so that the generated XSD is packaged into the JAR file

68
00:04:18.649 --> 00:04:20.759
along with the compiled classes.

69
00:04:20.759 --> 00:04:21.174
Finally,

70
00:04:21.174 --> 00:04:28.893
I'll add a few lines to make the JavaCompile task dependent on the jaxb task.

71
00:04:28.893 --> 00:04:30.165
By doing this,

72
00:04:30.165 --> 00:04:34.689
Gradle will automatically call the jaxb task to generate the

73
00:04:34.689 --> 00:04:38.651
XSD before it compiles the Java classes.

74
00:04:38.651 --> 00:04:45.437
We can now let Gradle build the project by using the command gradle clean build.

75
00:04:45.437 --> 00:04:51.235
The JAR file is written into the directory build/libs.

76
00:04:51.235 --> 00:04:54.517
When we look at what's in the JAR file, we see that,

77
00:04:54.517 --> 00:04:57.249
indeed, the generated file purchaseOrder.

78
00:04:57.249 --> 00:04:59.708
xsd is in there.

79
00:04:59.708 --> 00:05:01.654
Just like with the Maven examples,

80
00:05:01.654 --> 00:05:06.886
this is just a starting point to show you the basic idea of how

81
00:05:06.886 --> 00:05:10.272
you can run schemagen in a Gradle project.

82
00:05:10.272 --> 00:05:15.843
The plugin has many more possibilities than what I've shown you in this example.

83
00:05:15.843 --> 00:05:19.590
You can find documentation and more information about the plugin

84
00:05:19.590 --> 00:05:32.000
that we've used here on the following web page. This link is also included in the readme file that's included with example 32.

