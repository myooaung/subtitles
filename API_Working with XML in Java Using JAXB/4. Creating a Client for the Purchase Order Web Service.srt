1
00:00:02,065 --> 00:00:05,608
We now have a small purchase order web service up and running,

2
00:00:05,608 --> 00:00:10,496
so let's see how we can write a client that calls the web service.

3
00:00:10,496 --> 00:00:14,508
To create the client, we are going to use wsimport,

4
00:00:14,508 --> 00:00:19,837
which is a JAX-WS tool which is included with the JDK.

5
00:00:19,837 --> 00:00:25,130
The wsimport tool reads a WSDL and any XSDs that it

6
00:00:25,130 --> 00:00:29,403
refers to and then generates a web service client class

7
00:00:29,403 --> 00:00:32,344
and classes for the domain model.

8
00:00:32,344 --> 00:00:38,687
It calls xjc to generate the domain model classes.

9
00:00:38,687 --> 00:00:46,820
Let's open example ps-jaxb-35-jaxws-client to see how we can use

10
00:00:46,820 --> 00:00:51,253
wsimport to create a client for our web service.

11
00:00:51,253 --> 00:00:55,732
In this example, we are starting with an empty project.

12
00:00:55,732 --> 00:00:59,909
In the background, I still have the web service running.

13
00:00:59,909 --> 00:01:05,122
The first thing we'll do is use the wsimport tool to generate

14
00:01:05,122 --> 00:01:09,059
client and domain model classes for the web service.

15
00:01:09,059 --> 00:01:12,231
Let's open a terminal and run wsimport.

16
00:01:12,231 --> 00:01:16,693
I have to pass this command a number of options.

17
00:01:16,693 --> 00:01:18,843
First, using the -s option,

18
00:01:18,843 --> 00:01:24,786
I tell it where I want it to write the generated source files,

19
00:01:24,786 --> 00:01:27,669
which is in the directory src\main\java.

20
00:01:27,669 --> 00:01:33,477
By default, what wsimport does is generate source files,

21
00:01:33,477 --> 00:01:38,261
then compile the generated files by invoking the Java compiler,

22
00:01:38,261 --> 00:01:42,039
and then delete the generated source files.

23
00:01:42,039 --> 00:01:46,259
In this example, we don't need it to compile the generated source files,

24
00:01:46,259 --> 00:01:49,510
so we use the option -Xnocompile,

25
00:01:49,510 --> 00:01:55,174
and we also need to use -keep to prevent wsimport

26
00:01:55,174 --> 00:01:58,293
from deleting the generated files.

27
00:01:58,293 --> 00:02:03,208
Then we use the -p option to specify the package for the generated classes,

28
00:02:03,208 --> 00:02:08,710
the -encoding option, the -verbose option to get detailed information,

29
00:02:08,710 --> 00:02:15,122
and finally, the URL where wsimport can get the WSDL from.

30
00:02:15,122 --> 00:02:19,170
Of course, for this to work, the web service needs to be running.

31
00:02:19,170 --> 00:02:22,277
Otherwise, it won't be able to get the WSDL.

32
00:02:22,277 --> 00:02:28,571
As you see, wsimport has called xjc to generate the domain model classes,

33
00:02:28,571 --> 00:02:32,698
and it has also generated a class PurchaseOrderService

34
00:02:32,698 --> 00:02:34,868
and an interface PurchaseOrders,

35
00:02:34,868 --> 00:02:40,400
which represent the web service and the port that we need

36
00:02:40,400 --> 00:02:43,018
to be able to call the web service.

37
00:02:43,018 --> 00:02:49,041
Let's add a class PurchaseOrderClient and see how we can call the web service.

38
00:02:49,041 --> 00:02:53,109
We first need to create an instance of the generated class PurchaseOrderService,

39
00:02:53,109 --> 00:02:58,705
and then we call getPurchaseOrderPort on the PurchaseOrderService object,

40
00:02:58,705 --> 00:03:02,766
which returns a PurchaseOrders object.

41
00:03:02,766 --> 00:03:05,991
The interface PurchaseOrders declares the four methods

42
00:03:05,991 --> 00:03:10,358
that are available in the web service, to get the list of orders,

43
00:03:10,358 --> 00:03:15,618
to get a specific order, and to add and delete an order.

44
00:03:15,618 --> 00:03:17,294
We can now, for example,

45
00:03:17,294 --> 00:03:22,025
call the addOrder method on the port object to add an order and

46
00:03:22,025 --> 00:03:25,714
call getOrders to get the list of current orders.

47
00:03:25,714 --> 00:03:28,724
The web service is holding all the orders in memory,

48
00:03:28,724 --> 00:03:31,889
so if I run this client application multiple times,

49
00:03:31,889 --> 00:03:35,794
you'll see that every time a new order is added,

50
00:03:35,794 --> 00:03:37,460
and the list gets longer.

51
00:03:37,460 --> 00:03:43,954
That is all that I wanted to show you about using JAX-WS web services.

52
00:03:43,954 --> 00:03:47,248
This was, of course, just a quick demo.

53
00:03:47,248 --> 00:03:50,685
There is much more to JAX-WS web services,

54
00:03:50,685 --> 00:03:59,000
and if you're interested in XML-based web services, there's a lot more that you can learn about.

