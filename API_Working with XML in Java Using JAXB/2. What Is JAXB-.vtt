WEBVTT
1
00:00:01.925 --> 00:00:05.014
Let's take a look at what JAXB is.

2
00:00:05.014 --> 00:00:06.945
What does the name mean,

3
00:00:06.945 --> 00:00:11.661
what is its relation to other APIs for processing XML in Java,

4
00:00:11.661 --> 00:00:16.999
and when would you want to use JAXB over one of the other APIs?

5
00:00:16.999 --> 00:00:19.051
Let's start with the name.

6
00:00:19.051 --> 00:00:25.679
The name JAXB is an acronym that stands for Java Architecture for XML Binding.

7
00:00:25.679 --> 00:00:33.360
It is obviously about Java and XML, but what does the word binding mean?

8
00:00:33.360 --> 00:00:40.550
What you can do with JAXB is convert Java objects to XML and vice versa.

9
00:00:40.550 --> 00:00:44.265
The word binding refers to the mapping between Java

10
00:00:44.265 --> 00:00:47.675
classes and fields to structures in XML,

11
00:00:47.675 --> 00:00:50.391
such as elements and attributes.

12
00:00:50.391 --> 00:00:53.568
Java has different APIs for working with XML,

13
00:00:53.568 --> 00:00:57.587
which means that there are different ways that you can

14
00:00:57.587 --> 00:01:00.827
read or write data in XML in Java.

15
00:01:00.827 --> 00:01:04.852
Which one of the APIs is best for the job depends on what

16
00:01:04.852 --> 00:01:07.425
exactly you need to do with the XML.

17
00:01:07.425 --> 00:01:13.059
I'll give you a quick overview of the XML APIs in Java so that you

18
00:01:13.059 --> 00:01:17.115
understand the main ideas and where JAXB fits in.

19
00:01:17.115 --> 00:01:24.350
Let's first take a look at the lower-level APIs: DOM, SAX, and StAX.

20
00:01:24.350 --> 00:01:27.171
DOM stands for Document Object Model.

21
00:01:27.171 --> 00:01:32.109
When you use the DOM API to read an XML file,

22
00:01:32.109 --> 00:01:35.993
you're building a tree in-memory that consists of nodes

23
00:01:35.993 --> 00:01:39.554
that directly correspond to the elements,

24
00:01:39.554 --> 00:01:43.215
attributes, text, and other items in the XML.

25
00:01:43.215 --> 00:01:47.978
This is a straightforward and relatively easy way to work with the XML.

26
00:01:47.978 --> 00:01:53.078
You read the XML and then you get a tree of nodes that you

27
00:01:53.078 --> 00:01:56.098
can process as needed in your application.

28
00:01:56.098 --> 00:02:00.021
The DOM API consists of the org.

29
00:02:00.021 --> 00:02:00.581
w3c.

30
00:02:00.581 --> 00:02:05.092
dom package in the JDK, which, for example,

31
00:02:05.092 --> 00:02:08.540
contains interfaces such as document, element,

32
00:02:08.540 --> 00:02:13.422
and attr, which are representations of an XML document,

33
00:02:13.422 --> 00:02:15.022
element, and attribute.

34
00:02:15.022 --> 00:02:17.404
The DOM API is easy to use,

35
00:02:17.404 --> 00:02:22.926
but a disadvantage is that is doesn't scale well to large XML documents.

36
00:02:22.926 --> 00:02:26.484
Before your program can process the XML,

37
00:02:26.484 --> 00:02:29.779
the whole document is loaded into memory.

38
00:02:29.779 --> 00:02:34.662
If the document is very large, this can take up a lot of memory.

39
00:02:34.662 --> 00:02:37.579
Therefore, if you need to process large documents,

40
00:02:37.579 --> 00:02:43.727
you can choose to use the SAX or StAX API instead.

41
00:02:43.727 --> 00:02:48.416
SAX stands for Simple API for XML.

42
00:02:48.416 --> 00:02:52.710
It works in a completely different way than the DOM API.

43
00:02:52.710 --> 00:02:57.866
Instead of converting the XML document into a tree of nodes in-memory,

44
00:02:57.866 --> 00:02:59.925
it's an event-based API.

45
00:02:59.925 --> 00:03:05.307
The SAX parser reads the XML and calls callback methods in

46
00:03:05.307 --> 00:03:08.259
your program whenever it encounters, for example,

47
00:03:08.259 --> 00:03:13.585
the start tag, text, and end tag or something else in the XML.

48
00:03:13.585 --> 00:03:17.115
The callback methods in your program then inspect what is

49
00:03:17.115 --> 00:03:19.641
found and take the appropriate action.

50
00:03:19.641 --> 00:03:23.429
The SAX API consists of the package org.

51
00:03:23.429 --> 00:03:24.031
xml.

52
00:03:24.031 --> 00:03:28.244
sax and related packages in the JDK.

53
00:03:28.244 --> 00:03:30.161
If you use the SAX API,

54
00:03:30.161 --> 00:03:33.352
you'll most likely want to implement the ContentHandler interface,

55
00:03:33.352 --> 00:03:38.201
which defines the callback methods that the SAX parser will call.

56
00:03:38.201 --> 00:03:43.195
The SAX API is a bit more cumbersome to use than the DOM API,

57
00:03:43.195 --> 00:03:47.198
but since it doesn't need to load the whole document into memory,

58
00:03:47.198 --> 00:03:53.759
it works on large XML files just as well as on small XML files.

59
00:03:53.759 --> 00:03:57.594
StAX stands for Streaming API for XML.

60
00:03:57.594 --> 00:04:05.097
The idea of the StAX API is similar to that of the SAX API.

61
00:04:05.097 --> 00:04:06.669
It's event based.

62
00:04:06.669 --> 00:04:11.360
The main difference between the SAX and the StAX APIs is that

63
00:04:11.360 --> 00:04:15.646
SAX is push based while StAX is pull based.

64
00:04:15.646 --> 00:04:21.075
This means that with SAX it's the parser that is in control and that

65
00:04:21.075 --> 00:04:23.654
calls the callback methods in your application,

66
00:04:23.654 --> 00:04:27.377
so it pushes events to your application,

67
00:04:27.377 --> 00:04:30.690
while with StAX, your program is in control,

68
00:04:30.690 --> 00:04:35.366
and it calls the StAX API to get the next event out

69
00:04:35.366 --> 00:04:37.559
of the XML that's being processed,

70
00:04:37.559 --> 00:04:41.432
so you're pulling the events out of the parser.

71
00:04:41.432 --> 00:04:45.633
The StAX API consists of the package javax.

72
00:04:45.633 --> 00:04:46.159
xml.

73
00:04:46.159 --> 00:04:49.684
stream and related packages in the JDK.

74
00:04:49.684 --> 00:04:53.790
The most important interfaces are XMLStreamReader and

75
00:04:53.790 --> 00:04:58.796
XMLStreamWriter for reading and writing XML.

76
00:04:58.796 --> 00:04:59.779
In my experience,

77
00:04:59.779 --> 00:05:06.157
the StAX API is a bit more convenient to use than the SAX API in many cases,

78
00:05:06.157 --> 00:05:08.929
but it's still a low-level API,

79
00:05:08.929 --> 00:05:12.524
which means that you have to deal with all the details of parsing,

80
00:05:12.524 --> 00:05:16.346
and you'll likely end up writing a lot of boilerplate code,

81
00:05:16.346 --> 00:05:20.902
even for parsing relatively simple XML documents.

82
00:05:20.902 --> 00:05:27.253
In contrast to DOM, SAX, and StAX, JAXB is a higher-level API,

83
00:05:27.253 --> 00:05:30.900
which means that it takes care of a lot of details for you so that

84
00:05:30.900 --> 00:05:34.597
you don't have to write and maintain so much code.

85
00:05:34.597 --> 00:05:40.276
JAXB can automatically convert Java objects to XML and vice versa,

86
00:05:40.276 --> 00:05:43.789
mapping the field of a domain model class to child

87
00:05:43.789 --> 00:05:47.003
elements or attributes in the XML.

88
00:05:47.003 --> 00:05:50.770
JAXB works with XML schema files.

89
00:05:50.770 --> 00:05:52.439
When you work with JAXB,

90
00:05:52.439 --> 00:05:55.816
you are working with two representations of your domain model.

91
00:05:55.816 --> 00:06:01.331
On the Java side, you have a number of Java classes that define the domain model,

92
00:06:01.331 --> 00:06:08.166
and on the XML side, you have an XML schema that defines the same domain model.

93
00:06:08.166 --> 00:06:09.114
It would, of course,

94
00:06:09.114 --> 00:06:11.684
be cumbersome if you had to manually keep the Java

95
00:06:11.684 --> 00:06:13.862
and XML domain models synchronized.

96
00:06:13.862 --> 00:06:19.329
It's better to start from either Java or an XML schema and

97
00:06:19.329 --> 00:06:23.769
then generate either schema from your Java classes or

98
00:06:23.769 --> 00:06:27.010
generate Java classes from your schema.

99
00:06:27.010 --> 00:06:31.949
This corresponds to the two approaches to work with JAXB: the

100
00:06:31.949 --> 00:06:35.646
code-first approach and the schema-first approach.

101
00:06:35.646 --> 00:06:39.752
With the code-first approach, you generate an XML schema,

102
00:06:39.752 --> 00:06:43.356
an XSD file, from your Java domain model classes.

103
00:06:43.356 --> 00:06:47.483
You give this XSD file to your business partner who needs to

104
00:06:47.483 --> 00:06:51.714
work with the XML that your software produces so that he or

105
00:06:51.714 --> 00:06:54.658
she knows what the XML looks like.

106
00:06:54.658 --> 00:06:58.384
With the schema-first approach, it's the other way around.

107
00:06:58.384 --> 00:07:02.024
You start with an XML schema, an XSD file,

108
00:07:02.024 --> 00:07:05.982
and you generate the source code for your Java

109
00:07:05.982 --> 00:07:08.885
domain model classes from the schema.

110
00:07:08.885 --> 00:07:10.523
This is useful, for example,

111
00:07:10.523 --> 00:07:15.422
if you get the XSD file from a business partner or from an

112
00:07:15.422 --> 00:07:19.321
information analyst or architect in your own company.

113
00:07:19.321 --> 00:07:24.727
JAXB is fairly useful for many applications that need to work with XML.

114
00:07:24.727 --> 00:07:28.666
It's especially useful if you have a more elaborate domain model

115
00:07:28.666 --> 00:07:32.546
because you won't need to write a lot of boilerplate code to convert

116
00:07:32.546 --> 00:07:36.844
your domain model objects from and to XML.

117
00:07:36.844 --> 00:07:41.441
Having an XSD that describes your domain model is also a good thing,

118
00:07:41.441 --> 00:07:46.865
especially if you use XML to exchange data with systems built by other

119
00:07:46.865 --> 00:07:51.095
people who need to know what your domain model looks like.

120
00:07:51.095 --> 00:07:53.774
You can then just give them your XSD.

121
00:07:53.774 --> 00:07:54.109
However,

122
00:07:54.109 --> 00:07:58.305
there are a few reasons why for some applications you might want to

123
00:07:58.305 --> 00:08:02.588
use one of the lower-level APIs instead of JAXB.

124
00:08:02.588 --> 00:08:04.396
For writing XML,

125
00:08:04.396 --> 00:08:09.862
the low-level APIs give you more precise control over what the XML

126
00:08:09.862 --> 00:08:14.266
looks like since they are closer to the XML itself.

127
00:08:14.266 --> 00:08:15.192
For example,

128
00:08:15.192 --> 00:08:20.537
normally it shouldn't matter to your application if text is in a CDATA

129
00:08:20.537 --> 00:08:24.639
section or represented in a different way in the XML since

130
00:08:24.639 --> 00:08:27.913
semantically the meaning of the XML is the same.

131
00:08:27.913 --> 00:08:30.450
But if for some reason it matters,

132
00:08:30.450 --> 00:08:34.099
the low-level APIs will let you make the distinction,

133
00:08:34.099 --> 00:08:36.853
while JAXB tends to hide such details.

134
00:08:36.853 --> 00:08:40.747
When you need to deal with very large XML documents,

135
00:08:40.747 --> 00:08:55.000
the SAX or StAX APIs might be more suitable than DOM or JAXB since SAX and StAX don't require loading the complete document into memory.

