WEBVTT
1
00:00:02.151 --> 00:00:06.849
Web services are a standard way for computers to exchange information

2
00:00:06.849 --> 00:00:10.684
over the internet and are used by many different companies and

3
00:00:10.684 --> 00:00:14.613
organizations for business and other purposes.

4
00:00:14.613 --> 00:00:17.167
To prepare you with some background knowledge for

5
00:00:17.167 --> 00:00:19.084
the examples in the next clips,

6
00:00:19.084 --> 00:00:24.417
in this clip I'll give you a quick overview of web services in general and

7
00:00:24.417 --> 00:00:28.950
how you can work with web services in Java specifically.

8
00:00:28.950 --> 00:00:33.451
Let's first look at the basic concepts of web services.

9
00:00:33.451 --> 00:00:37.064
When you use your browser to surf the web,

10
00:00:37.064 --> 00:00:42.747
then your browser uses HTTP to send a request to a web server which responds

11
00:00:42.747 --> 00:00:47.472
by sending a web page in HTML format back to your browser.

12
00:00:47.472 --> 00:00:52.636
Web services work in a similar way, but instead of HTML,

13
00:00:52.636 --> 00:00:59.185
a different format is used named SOAP, which is based on XML.

14
00:00:59.185 --> 00:01:02.526
Officially, SOAP isn't an acronym anymore,

15
00:01:02.526 --> 00:01:07.447
but originally it meant Simple Object Access Protocol,

16
00:01:07.447 --> 00:01:12.609
and sometimes people use the alternative meaning,

17
00:01:12.609 --> 00:01:14.821
Service-Oriented Architecture Protocol.

18
00:01:14.821 --> 00:01:19.381
When computers communicate using XML-based web services,

19
00:01:19.381 --> 00:01:24.844
they send each other SOAP messages over HTTP connections.

20
00:01:24.844 --> 00:01:27.983
SOAP is a format and protocol which defines the

21
00:01:27.983 --> 00:01:30.698
structure for the messages to be exchanged,

22
00:01:30.698 --> 00:01:36.062
but it doesn't by itself define what the content of a message means.

23
00:01:36.062 --> 00:01:40.424
The meaning of the content of a message is specific to

24
00:01:40.424 --> 00:01:43.045
the business domain of the web service.

25
00:01:43.045 --> 00:01:49.237
A web service can offer a number of business-specific operations.

26
00:01:49.237 --> 00:01:50.058
For example,

27
00:01:50.058 --> 00:01:55.085
a purchase order web service might define an operation to create a

28
00:01:55.085 --> 00:01:59.685
purchase order or to get information about an existing order.

29
00:01:59.685 --> 00:02:03.824
There is a standard XML-based format to describe what

30
00:02:03.824 --> 00:02:09.373
business operations a web service has, which is WSDL,

31
00:02:09.373 --> 00:02:15.764
pronounced as WSDL, which means Web Services Description Language.

32
00:02:15.764 --> 00:02:21.108
This plays an important role in working with XML-based web services in Java,

33
00:02:21.108 --> 00:02:26.324
as you'll see in the examples in the next clips in this module.

34
00:02:26.324 --> 00:02:33.017
Java has a standard API for working with XML-based web services called JAX-WS,

35
00:02:33.017 --> 00:02:39.555
which stands for Java API for XML Web Services.

36
00:02:39.555 --> 00:02:43.266
JAX-WS provides APIs for writing the server side,

37
00:02:43.266 --> 00:02:48.218
as well as the client side of a web service.

38
00:02:48.218 --> 00:02:54.440
It uses JAXB to marshal and unmarshal Java domain model objects to and from

39
00:02:54.440 --> 00:02:58.796
the XML that is used in the body of the SOAP messages.

40
00:02:58.796 --> 00:03:00.168
In the next clips,

41
00:03:00.168 --> 00:03:05.930
we are going to take our purchaseOrder domain model and use JAX-WS and

42
00:03:05.930 --> 00:03:10.213
JAXB to create a simple purchase order web service.

43
00:03:10.213 --> 00:03:10.623
First,

44
00:03:10.623 --> 00:03:16.249
we are going to create the server side and then the client for the web

45
00:03:16.249 --> 00:03:25.000
service using the WSDL that the web service provides. Let's go ahead and build a web service.

