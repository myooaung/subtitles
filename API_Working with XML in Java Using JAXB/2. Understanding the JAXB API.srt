1
00:00:01,803 --> 00:00:03,683
Before we start writing code,

2
00:00:03,683 --> 00:00:07,876
it's important to understand how the JAXB API is organized

3
00:00:07,876 --> 00:00:12,232
and what the main concepts of the API are.

4
00:00:12,232 --> 00:00:16,350
The JAXB API is in the package javax.

5
00:00:16,350 --> 00:00:16,864
xml.

6
00:00:16,864 --> 00:00:20,724
bind and related packages in Java Standard Edition.

7
00:00:20,724 --> 00:00:25,455
Take a look at the API reference documentation of this package,

8
00:00:25,455 --> 00:00:28,494
which you can find on Oracle's website.

9
00:00:28,494 --> 00:00:32,623
The entry point into the API is the class JAXBContext,

10
00:00:32,623 --> 00:00:35,796
so we'll take a look at that class first.

11
00:00:35,796 --> 00:00:41,316
The first thing you need to do if you want to use the JAXB API

12
00:00:41,316 --> 00:00:44,782
is get an instance of class JAXBContext.

13
00:00:44,782 --> 00:00:50,637
The JAXBContext object will give you access to everything else in the API.

14
00:00:50,637 --> 00:00:55,424
You get an instance of JAXBContext by calling one of the new

15
00:00:55,424 --> 00:00:59,148
instance static factory methods in the class itself.

16
00:00:59,148 --> 00:01:03,306
In the next clip, you'll see exactly how this works.

17
00:01:03,306 --> 00:01:05,238
When you have a JAXBContext object,

18
00:01:05,238 --> 00:01:09,084
you can call a number of other factory methods on

19
00:01:09,084 --> 00:01:12,267
it to create other JAXB objects.

20
00:01:12,267 --> 00:01:18,461
The two most important ones are the Marshaller and Unmarshaller objects.

21
00:01:18,461 --> 00:01:26,335
In JAXB terminology, converting from Java objects to XML is called marshalling.

22
00:01:26,335 --> 00:01:31,643
So when you want to write XML, what you need to do is create a Marshaller object,

23
00:01:31,643 --> 00:01:38,101
which has methods that you can call to marshal your Java objects into XML.

24
00:01:38,101 --> 00:01:43,991
Vice versa, converting XML back to Java objects is called unmarshalling.

25
00:01:43,991 --> 00:01:49,141
When you want to read XML, you create an Unmarshaller object,

26
00:01:49,141 --> 00:01:54,752
which, of course, has methods for unmarshalling XML into Java objects.

27
00:01:54,752 --> 00:02:00,162
Besides factory methods to create Marshaller and Unmarshaller objects,

28
00:02:00,162 --> 00:02:05,888
class JAXBContext has a few more methods to create

29
00:02:05,888 --> 00:02:08,604
Binder and JAXBIntrospector objects.

30
00:02:08,604 --> 00:02:11,265
These objects are for more advanced purposes,

31
00:02:11,265 --> 00:02:14,307
and we'll take a look at them later.

32
00:02:14,307 --> 00:02:18,685
The reason that creating all these objects works via factory

33
00:02:18,685 --> 00:02:24,128
methods is because the JAXB API was designed to have

34
00:02:24,128 --> 00:02:25,796
multiple possible implementations.

35
00:02:25,796 --> 00:02:30,478
Besides the default implementation, which is included with Java Standard Edition,

36
00:02:30,478 --> 00:02:34,099
there are indeed other implementations available,

37
00:02:34,099 --> 00:02:36,070
for example, EclipseLink MOXy.

38
00:02:36,070 --> 00:02:40,832
Reasons to use a different implementation of JAXB rather than the

39
00:02:40,832 --> 00:02:44,382
default are because a different implementation might offer extra

40
00:02:44,382 --> 00:02:50,039
features that are not part of the default or because a different

41
00:02:50,039 --> 00:02:52,836
implementation might have better performance.

42
00:02:52,836 --> 00:02:56,262
In this course, we'll use the default implementation.

43
00:02:56,262 --> 00:02:59,164
But if you're going to use JAXB in a real project,

44
00:02:59,164 --> 00:03:03,934
it might be worth it to investigate if using a different

45
00:03:03,934 --> 00:03:07,119
implementation has benefits for your project.

46
00:03:07,119 --> 00:03:11,144
There's one more important thing to mention about the JAXBContext,

47
00:03:11,144 --> 00:03:13,234
Marshaller, and Unmarshaller objects.

48
00:03:13,234 --> 00:03:18,728
You should normally create a JAXBContext object only once in your

49
00:03:18,728 --> 00:03:23,978
application and then reuse the same object whenever you need it.

50
00:03:23,978 --> 00:03:27,519
The JAXBContext object is guaranteed to be thread-safe,

51
00:03:27,519 --> 00:03:32,592
so it's safe to reuse the same instance for multiple threads.

52
00:03:32,592 --> 00:03:37,958
Creating a JAXBContext object is a relatively heavy operation.

53
00:03:37,958 --> 00:03:41,771
So if you would do that every time your application needs it,

54
00:03:41,771 --> 00:03:45,330
then it will degrade the performance of your application.

55
00:03:45,330 --> 00:03:49,919
Marshaller and Unmarshaller objects are not guaranteed to be thread- safe,

56
00:03:49,919 --> 00:03:54,384
so you should not use these objects for multiple threads.

57
00:03:54,384 --> 00:04:06,000
Creating Marshaller and Unmarshaller objects are not heavy operations, so creating them when needed does not cause a performance problem.

