1
00:00:02,119 --> 00:00:03,387
In the previous example,

2
00:00:03,387 --> 00:00:07,268
you learned how you can call schemagen in your Maven

3
00:00:07,268 --> 00:00:10,630
project using the jaxb2-maven plugin.

4
00:00:10,630 --> 00:00:11,488
Of course,

5
00:00:11,488 --> 00:00:16,204
it's also possible to call xjc in the Maven build process

6
00:00:16,204 --> 00:00:19,323
to generate Java classes from an XSD.

7
00:00:19,323 --> 00:00:23,334
You'll learn how to do that in this clip.

8
00:00:23,334 --> 00:00:28,326
We'll be using the same Maven plugin as in the previous example.

9
00:00:28,326 --> 00:00:36,823
Take a look at the next example, which is ps-jaxb-31-maven-xjc.

10
00:00:36,823 --> 00:00:41,495
What we want to achieve in this example is generate

11
00:00:41,495 --> 00:00:44,078
Java source files from purchaseOrder.

12
00:00:44,078 --> 00:00:49,398
xsd using xjc and then compile the generated sources

13
00:00:49,398 --> 00:00:51,780
along with class MarshalExample,

14
00:00:51,780 --> 00:00:57,194
which uses the generated classes into a JAR file.

15
00:00:57,194 --> 00:01:02,047
Class MarshalExample right now doesn't compile because it refers

16
00:01:02,047 --> 00:01:05,690
to the classes that haven't been generated yet.

17
00:01:05,690 --> 00:01:07,818
I've put purchaseOrder.

18
00:01:07,818 --> 00:01:13,632
xsd in the src/main/resources directory and also a

19
00:01:13,632 --> 00:01:17,525
bindings file with binding customizations,

20
00:01:17,525 --> 00:01:18,304
bindings.

21
00:01:18,304 --> 00:01:19,083
xjb.

22
00:01:19,083 --> 00:01:24,014
Let's first take a look at the POM file and see how we can configure the

23
00:01:24,014 --> 00:01:29,521
plugin to call xjc and then run the build and see what we get.

24
00:01:29,521 --> 00:01:30,287
This time,

25
00:01:30,287 --> 00:01:36,361
we want to use the xjc goal instead of the schemagen goal of the plugin.

26
00:01:36,361 --> 00:01:41,775
What we put in the configuration section is also slightly different.

27
00:01:41,775 --> 00:01:42,212
First,

28
00:01:42,212 --> 00:01:49,329
we specify in the sources element where the XSD is located that we want to use.

29
00:01:49,329 --> 00:01:51,663
Also, using the xjbSources element,

30
00:01:51,663 --> 00:01:55,688
we tell the plugin where the bindings file is.

31
00:01:55,688 --> 00:01:56,564
And finally,

32
00:01:56,564 --> 00:02:02,799
we set the package name for the generated classes in the packageName element.

33
00:02:02,799 --> 00:02:06,731
That's all there is to it for this example.

34
00:02:06,731 --> 00:02:11,986
Let's open a terminal again and run mvn clean package.

35
00:02:11,986 --> 00:02:15,722
Xjc has generated the source files in the directory

36
00:02:15,722 --> 00:02:16,890
target/generatedsources/jaxb.

37
00:02:16,890 --> 00:02:24,296
The generated source files are automatically being picked up

38
00:02:24,296 --> 00:02:28,368
and compiled along with our class MarshalExample so that

39
00:02:28,368 --> 00:02:31,243
everything works as it should.

40
00:02:31,243 --> 00:02:34,711
The JAR file that has been built by Maven contains the

41
00:02:34,711 --> 00:02:37,459
class files from the generated sources,

42
00:02:37,459 --> 00:02:42,222
as well as the class file for class MarshalExample.

43
00:02:42,222 --> 00:02:47,634
This is again a simple example which just gives you a starting point to

44
00:02:47,634 --> 00:02:52,671
see how you can set up calling xjc in a Maven project.

45
00:02:52,671 --> 00:02:57,444
The plugin's xjc goal has more configuration options than what I've

46
00:02:57,444 --> 00:03:08,000
shown you here if you need to customize things further. You can find more information in the documentation of the plugin.

