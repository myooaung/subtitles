WEBVTT
1
00:00:02.058 --> 00:00:06.585
We saw the XmlType annotation earlier where we used its

2
00:00:06.585 --> 00:00:10.821
propOrder attribute to specify in which order we want the

3
00:00:10.821 --> 00:00:13.343
fields to be written to XML.

4
00:00:13.343 --> 00:00:18.513
Let's take a look at this annotation again to see what more we can do with it.

5
00:00:18.513 --> 00:00:25.871
The example we are going to look at now is ps-jaxb-14-xmltype.

6
00:00:25.871 --> 00:00:29.862
Let's open this example in the IDE.

7
00:00:29.862 --> 00:00:35.856
When you generate a schema, JAXB generates names for complex and simple types,

8
00:00:35.856 --> 00:00:39.757
and elements and attributes that I derived from the

9
00:00:39.757 --> 00:00:41.910
corresponding class and field names.

10
00:00:41.910 --> 00:00:47.138
We already saw that you can change the name of an element or

11
00:00:47.138 --> 00:00:52.509
attribute by specifying it using the name attribute of the

12
00:00:52.509 --> 00:00:55.614
XmlElement or XmlAttribute annotation.

13
00:00:55.614 --> 00:00:57.278
In the same way,

14
00:00:57.278 --> 00:01:02.893
the XmlType annotation has a name attribute that you can use to specify

15
00:01:02.893 --> 00:01:07.573
the name of a complexType that corresponds to a class.

16
00:01:07.573 --> 00:01:08.395
For example,

17
00:01:08.395 --> 00:01:11.684
we can put an XmlType annotation on the

18
00:01:11.684 --> 00:01:14.864
PurchaseOrder class with POType as the name.

19
00:01:14.864 --> 00:01:19.348
When you now run the example to generate the schema,

20
00:01:19.348 --> 00:01:23.775
you'll see in the XSD that the complexType for the

21
00:01:23.775 --> 00:01:27.774
PurchaseOrder element is now named POType.

22
00:01:27.774 --> 00:01:34.014
In XML Schema, types can be defined as named types, as you see here.

23
00:01:34.014 --> 00:01:37.889
But it's also possible, as you've seen earlier in the course,

24
00:01:37.889 --> 00:01:43.646
to define the type of an element directly inside the element declaration.

25
00:01:43.646 --> 00:01:49.132
In that case, the type does not have a name, so it's an anonymous type.

26
00:01:49.132 --> 00:01:52.332
It's possible to tell JAXB that it should generate

27
00:01:52.332 --> 00:01:54.477
an anonymous type for an element.

28
00:01:54.477 --> 00:01:58.908
You do this by specifying an empty string as the name of

29
00:01:58.908 --> 00:02:01.772
the type in the XmlType annotation.

30
00:02:01.772 --> 00:02:06.323
Let's set the name attribute of the XmlType annotation on

31
00:02:06.323 --> 00:02:10.751
class PurchaseOrder to an empty string and run the example

32
00:02:10.751 --> 00:02:13.085
again to generate the schema.

33
00:02:13.085 --> 00:02:15.341
As you see in the XSD,

34
00:02:15.341 --> 00:02:19.864
the complexType of the PurchaseOrder element is now defined as an

35
00:02:19.864 --> 00:02:23.037
anonymous type in the element declaration itself.

36
00:02:23.037 --> 00:02:26.194
This is useful for specific purposes, for example,

37
00:02:26.194 --> 00:02:32.973
if you are using the XSD with the schema-first approach of JAXB.

38
00:02:32.973 --> 00:02:34.588
In the schema-first approach,

39
00:02:34.588 --> 00:02:39.430
it's more convenient if your root element is defined with an

40
00:02:39.430 --> 00:02:42.818
anonymous type rather than a name type.

41
00:02:42.818 --> 00:02:51.000
You'll learn exactly why this is in the next module, which is going to be about the schema-first approach.

