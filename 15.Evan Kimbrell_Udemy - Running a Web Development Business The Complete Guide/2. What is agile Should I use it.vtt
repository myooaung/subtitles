WEBVTT
1
00:00:05.670 --> 00:00:10.980
Hey guys welcome back to the course so in this lecture we're going to talk about what is at Jayal.

2
00:00:10.980 --> 00:00:14.050
So what does this add to our thing that you might have heard of.

3
00:00:14.100 --> 00:00:19.050
So you might have heard of it and you might not have heard if you know what agile is you even used it

4
00:00:19.050 --> 00:00:19.500
before.

5
00:00:19.500 --> 00:00:22.490
Skip this lecture save yourself some time.

6
00:00:22.620 --> 00:00:27.450
I'm going to cover very basically what it is what you should know about it and whether or not it should

7
00:00:27.450 --> 00:00:29.460
apply to your development business.

8
00:00:29.520 --> 00:00:29.790
OK.

9
00:00:29.790 --> 00:00:35.730
So the best way of explaining it with regards to a project is to explain that there's two ways of delivering

10
00:00:35.730 --> 00:00:36.210
a product.

11
00:00:36.210 --> 00:00:41.760
The first one would be to have all of your specifications have all your project requirements built up

12
00:00:41.760 --> 00:00:46.610
front you analyze them give an estimate and then you build the entire thing.

13
00:00:46.620 --> 00:00:51.150
And at the very end you have a big hurrah you pop champagne and the project's done.

14
00:00:51.180 --> 00:00:57.870
In that scenario you deliver the application in one big final piece and then you go and do feedback

15
00:00:57.870 --> 00:01:00.740
rounds where they say fix this fix this change this change this.

16
00:01:00.780 --> 00:01:07.110
Now the alternative is what's called agile and agile what you do is you work on separate chunks of the

17
00:01:07.110 --> 00:01:12.660
application and you deliver each one at a time and then go through feedback rounds.

18
00:01:12.660 --> 00:01:18.690
So the way that you do this is by listing out tasks and features and then trying to figure out how long

19
00:01:18.690 --> 00:01:24.060
each individual feature or task is going to take then what you do is you take all of those features

20
00:01:24.090 --> 00:01:29.760
and you gather them into essentially what are bundles and each individual agile methodology has a different

21
00:01:29.760 --> 00:01:33.090
name for them but with scrum we call them sprints.

22
00:01:33.090 --> 00:01:36.480
You can also call them iterations but they're basically burst of work.

23
00:01:36.480 --> 00:01:39.560
So maybe we have a hundred different features.

24
00:01:39.630 --> 00:01:45.150
We'll bundle up these ones into eight because they're bigger ones and these ones into 12 and these ones

25
00:01:45.150 --> 00:01:49.460
into 20 etc etc. and then we'll tackle each individual chunk of work at a time.

26
00:01:49.500 --> 00:01:56.700
Now with agile what you're focusing on is making each individual chunk of work or a sprint or iteration

27
00:01:57.330 --> 00:02:03.960
and making whatever you build in that section fully tested and ready to be deployed by the end of that

28
00:02:03.960 --> 00:02:04.770
session.

29
00:02:04.770 --> 00:02:11.310
So in our scenario we do sprints and so what we'll do is we'll take features for a two week sprint the

30
00:02:11.310 --> 00:02:16.740
end of the two weeks everything should be fully designed fully tested and if we deploy it it should

31
00:02:16.890 --> 00:02:19.160
act as if the whole thing was finished.

32
00:02:19.270 --> 00:02:26.100
Andrew when you post a big chunk of work nothing should have dependencies on other sections of the application

33
00:02:26.340 --> 00:02:29.590
everything should deploy as if it's 100 percent done.

34
00:02:29.610 --> 00:02:37.800
Now typically a truly agile team will develop with a designer in pair and the designer then will design

35
00:02:37.890 --> 00:02:41.040
as the developers create requirements.

36
00:02:41.040 --> 00:02:45.960
So traditionally what you'll do is you'll do one of big design once that's okayed then you'll go and

37
00:02:45.960 --> 00:02:52.580
actually develop an agile and traditional Jayal you'll have a designer who designs as it's being developed.

38
00:02:52.590 --> 00:02:55.220
Now there are some obvious advantages to that.

39
00:02:55.410 --> 00:03:01.380
The designer will only spend time on requirements as they're needed and also it allows them to be more

40
00:03:01.380 --> 00:03:02.050
flexible.

41
00:03:02.070 --> 00:03:05.050
As things change they can change it on the fly.

42
00:03:05.070 --> 00:03:07.170
So that's the basics of what agile is.

43
00:03:07.170 --> 00:03:09.450
It's a very very very basic thing.

44
00:03:09.450 --> 00:03:14.900
A lot of people even specialize and teach courses on agile that is just a crash course.

45
00:03:14.910 --> 00:03:19.980
Now the way that it applies to development businesses is you have the option of following an agile methodology

46
00:03:20.250 --> 00:03:26.610
and then offering chunks of work to your clients having multiple feedback arounds depending on which

47
00:03:26.610 --> 00:03:31.560
Chunk's been done as opposed to having one big hurrah the end of your project.

48
00:03:31.560 --> 00:03:36.840
Now here at Sprint Qik we're obviously big fans of agile and that's what we use and actually caught

49
00:03:36.840 --> 00:03:38.030
on our name is sprint.

50
00:03:38.060 --> 00:03:45.330
It's just a play on words because we deliver breads and Sprint Qik is just another way of showing acceleration

51
00:03:45.330 --> 00:03:46.070
or speed.

52
00:03:46.080 --> 00:03:49.430
Now as a project in general agile has a lot of benefits.

53
00:03:49.470 --> 00:03:55.320
It's generally faster and in general it's going to deliver code that's better produced and better tested.

54
00:03:55.320 --> 00:04:01.380
It allows you to reassess your project mid progression and make any changes along the way that you need

55
00:04:01.380 --> 00:04:01.670
to.

56
00:04:01.710 --> 00:04:07.980
It's a much more flexible modular way of looking at a project and that's probably why most development

57
00:04:07.980 --> 00:04:13.540
teams out there use some form of this methodology and that's probably why there's so many courses on

58
00:04:13.540 --> 00:04:15.870
you to worry about running agile teams.

59
00:04:15.870 --> 00:04:19.830
But what's the biggest reason why this is a good thing for a development business.

60
00:04:19.830 --> 00:04:25.640
Well agile and building your project in an agile way makes it a lot easier to sell.

61
00:04:25.680 --> 00:04:30.030
Now when you estimate out your project you can do it in an agile way which means that you estimate it

62
00:04:30.030 --> 00:04:36.660
out in hours hours are much more transparent and they're much more digestible for the client hours in

63
00:04:36.660 --> 00:04:42.780
general also are much harder to argue with a client can say $500 is too much for they can't say four

64
00:04:42.780 --> 00:04:44.160
hours is too long.

65
00:04:44.160 --> 00:04:47.330
What you can do then is you can apply individual hourly estimates.

66
00:04:47.340 --> 00:04:53.400
Every single task that allows your client to visualize how big the project is how big Certain sections

67
00:04:53.400 --> 00:04:58.950
are and they can really just do an add drop pick which ones they want and drop the ones they don't.

68
00:04:58.950 --> 00:05:04.940
The biggest benefit so is that you can periodically during the project deliver code that's 100 percent

69
00:05:04.940 --> 00:05:09.500
fully deployable untested and allow your client to actually play around with it.

70
00:05:09.500 --> 00:05:13.670
Now if you do this in one big batch that means that your client just big writes you a big check goes

71
00:05:13.670 --> 00:05:16.450
to sleep wakes up in a couple of months when it's done.

72
00:05:16.460 --> 00:05:23.090
But with agile they get to see progress during every single iteration every single Sprint they get to

73
00:05:23.090 --> 00:05:26.460
see visual reinforcement that your project is progressing.

74
00:05:26.480 --> 00:05:31.100
What's great about Agile is you can say this individual chunk of work because I've done an itemized

75
00:05:31.100 --> 00:05:36.820
estimation is going to cost this much but you can also do is you can also say since we're building out

76
00:05:36.830 --> 00:05:42.380
in chunks we'll only charge you for the first sprint at the end of the Sprint or iteration or chunk

77
00:05:42.380 --> 00:05:47.750
of work where you can say is if you're not happy in any way since it's fully deployable fully tested

78
00:05:47.750 --> 00:05:53.810
and it's done you can take that code base and have an easier time integrating that with a different

79
00:05:53.810 --> 00:05:55.580
firm or different contractor.

80
00:05:55.580 --> 00:06:00.890
In general they don't really need to understand the deeper codebase at least especially at first.

81
00:06:00.890 --> 00:06:05.930
Now we've never had that actually happen to us but for your client to know that there's a way that they

82
00:06:05.930 --> 00:06:07.010
can back out.

83
00:06:07.100 --> 00:06:12.380
That's a big problem and a big worry that they have is that they can't ever get out of a project once

84
00:06:12.380 --> 00:06:14.430
they know it's going to be a disaster.

85
00:06:14.450 --> 00:06:20.770
Being able to show off your work every two weeks also allows you to tell much earlier on if something's

86
00:06:20.780 --> 00:06:25.330
wrong with your project and whether or not you need to make a pivot or make some serious changes.

87
00:06:25.340 --> 00:06:30.830
It saves everyone time and it saves you from running into some really hard project decisions down the

88
00:06:30.830 --> 00:06:31.660
line.

89
00:06:31.880 --> 00:06:34.310
If you miss something early and became a big problem.

90
00:06:34.340 --> 00:06:36.120
So should you use Adya.

91
00:06:36.140 --> 00:06:40.220
Well I strongly prefer using it because it's easier to sell.

92
00:06:40.280 --> 00:06:43.970
It's easier to show your clients exactly what you're paying for.

93
00:06:43.970 --> 00:06:48.830
This is when it's going to be done and it also makes the whole experience more interactive with more

94
00:06:48.830 --> 00:06:53.450
transparency and in general I've experienced it makes our clients a lot happier.

95
00:06:53.450 --> 00:06:56.310
Now if you need to build this into your system how do you go about doing that.

96
00:06:56.330 --> 00:06:57.760
Well it's actually quite simple.

97
00:06:57.770 --> 00:07:03.110
The vast majority of developers and subcontractors out there know how to build and least somewhat in

98
00:07:03.110 --> 00:07:04.190
an agile fashion.

99
00:07:04.190 --> 00:07:07.300
Now you don't need to follow agile traditionally to a T.

100
00:07:07.310 --> 00:07:13.940
What you can simply do is say we need to follow a basic agile system build out individual features deliver

101
00:07:13.940 --> 00:07:19.530
those features and just follow a basic path of chunk of work chunk of work chunk of work.

102
00:07:19.670 --> 00:07:24.740
Now any true clients not going to know whether or not you're doing traditional scrum or traditional

103
00:07:24.800 --> 00:07:26.260
extreme programming.

104
00:07:26.390 --> 00:07:30.830
They're not going to know that all they know is that you're delivering in chunks which is essentially

105
00:07:30.830 --> 00:07:32.170
the same thing.

106
00:07:32.180 --> 00:07:37.220
So if you want to do agile look for contractors that have experience with Andile and make them know

107
00:07:37.220 --> 00:07:39.670
that this is how you want to deliver the project.

108
00:07:39.680 --> 00:07:44.210
This is how they should be doing their estimates and this is how they should be timing their updates

109
00:07:44.210 --> 00:07:45.240
and their check ins.

110
00:07:45.350 --> 00:07:45.630
OK.

111
00:07:45.630 --> 00:07:49.700
And for some reason you guys want to become an expert and agile there's a lot of great use to me courses

112
00:07:49.760 --> 00:07:50.130
on it.

113
00:07:50.150 --> 00:07:52.180
They can teach you all about it.

114
00:07:52.460 --> 00:07:57.410
Probably more helpful if you are a developer or a programmer yourself but also quite educational if

115
00:07:57.410 --> 00:07:57.910
you're not.

116
00:07:57.980 --> 00:07:58.340
All right guys.

117
00:07:58.340 --> 00:08:00.410
Any questions post in the group discussion.

118
00:08:00.440 --> 00:08:01.940
Otherwise send me a private message.

119
00:08:01.940 --> 00:08:11.430
See the next lecture.
