WEBVTT

00:05.420 --> 00:10.690
A case or in this video we're going to take a look at what normalization actually is.

00:11.130 --> 00:16.650
So normalization is the process of efficiently organizing data in a database.

00:16.920 --> 00:18.440
And what do we want to do this.

00:18.600 --> 00:24.390
What we want to do this to eliminate redundant data so we don't want to be storing repeated rows of

00:24.390 --> 00:25.890
data in a table.

00:26.130 --> 00:33.660
And we also don't want to be storing the same data in different tables and we only want to store related

00:33.660 --> 00:35.630
data in a single table.

00:35.820 --> 00:44.220
So for example if we had order and customer details in one single table it's actually better to split

00:44.220 --> 00:52.200
this into two or multiple tables rather than storing this unrelated data in a single table.

00:52.200 --> 00:56.640
So here's an example of a table which hasn't been normalized properly.

00:56.850 --> 01:05.250
So it's a student table and we have the student name the year they're in classes they attend and also

01:05.250 --> 01:07.360
the class is teacher.

01:07.470 --> 01:16.860
So you can see here straightaway that every time we entered geography as students class we also have

01:16.860 --> 01:25.690
to enter the same value for the teacher so we're repeating data here every time we enter class joke.

01:25.800 --> 01:33.720
We also have to enter teacher Mr. Green or every time we have to enter physics we have to enter teacher

01:34.080 --> 01:35.910
Mrs. Einstein.

01:35.910 --> 01:39.680
So we have data redundancy in this table.

01:40.320 --> 01:46.260
So to actually be better to split this table into to have a student table with the student name year

01:46.260 --> 01:52.710
in class and then have a second table for the teacher which would have the teacher's name and the class

01:52.740 --> 01:54.320
they teach.

01:54.360 --> 02:00.120
So that's an example of how you could reduce data redundancy and normalize this table.

02:00.120 --> 02:02.940
So what are the benefits of normalizing your database.

02:03.150 --> 02:08.250
Well the first benefit is that you're reducing the storage space that your database needs.

02:08.250 --> 02:11.690
Obviously it takes space to store any data.

02:11.940 --> 02:17.410
And if you're reducing redundant data you're also reducing the overall storage space that your database

02:17.420 --> 02:18.800
needs.

02:19.050 --> 02:24.000
A second benefit is that you would use the insert update and deletion anomalies.

02:24.240 --> 02:30.690
And basically what this means is you're reducing any errors that could occur when you're inserting updating

02:30.720 --> 02:33.200
or deleting data from your database.

02:33.570 --> 02:41.840
So an example of an anomaly would be in the previous table we had the class and the teacher.

02:42.120 --> 02:46.940
So every time we have to insert the class we also have to insert the teacher.

02:47.130 --> 02:52.810
So in effect we're doubling the amount of data we need to insert in one query.

02:52.920 --> 03:00.540
And this obviously increases the chances of an era of someone making a mistake when they're inserting

03:00.960 --> 03:03.750
class or teacher into this table.

03:04.140 --> 03:11.310
So normalizing this table would reduce the chances of an arrow and an example of an update and deletion

03:11.310 --> 03:16.870
or normally would be if you had the same data in multiple tables.

03:16.870 --> 03:24.240
So for example if you were storing the teacher's home address in multiple tables so you had let's say

03:24.240 --> 03:29.370
you have three tables which stored the teacher's home address.

03:29.370 --> 03:36.150
If they were to move address you would have to update this address in three separate tables or if they

03:36.150 --> 03:42.670
left school you'd have to delete that information in three separate tables as well.

03:43.050 --> 03:49.710
So obviously if you could normalize this data and have the address stored in just one table you would

03:49.710 --> 03:52.300
only have to do one day or one daily.

03:52.650 --> 03:59.610
So you would reduce the chances of an era when you were updating or deleting this data from the database.

03:59.610 --> 04:03.180
And another benefit is that it actually improves query performance.

04:03.210 --> 04:10.200
So not only does it improve the query performance for inserting updating and deleting data into tables

04:10.680 --> 04:17.790
it also improves retrieving data from the database so selecting from tables is the performance is actually

04:17.790 --> 04:19.440
improved as well.

04:19.440 --> 04:26.370
Now there are different levels of normalization which a database can be in and each level has a set

04:26.370 --> 04:32.520
of rules that the tables must adhere to to be in the normal form.

04:32.520 --> 04:39.090
So the first level of normalization is first of all and then second normal form third normal form and

04:39.090 --> 04:44.340
then there's higher levels of normalization So there's the Boysen quote normal form which is sometimes

04:44.340 --> 04:46.260
called forth normal form.

04:46.260 --> 04:49.770
And then there's even fear for sick normal form.

04:49.770 --> 04:56.400
But in this section we're just going to be looking first second and third normal form and 90 percent

04:56.400 --> 04:56.990
of the time.

04:57.000 --> 05:03.310
If your data is in normal form this is a high enough level of normalization.

05:03.310 --> 05:09.670
Most of databases you encounter in real life we'll be in third normal form.

05:09.740 --> 05:14.420
So in the next couple of videos we're going to be looking at the rules for the first second and third

05:14.420 --> 05:18.620
normal form and we're going to be looking at examples of each.

05:19.040 --> 05:22.310
So let's get started with looking at the first normal form.
