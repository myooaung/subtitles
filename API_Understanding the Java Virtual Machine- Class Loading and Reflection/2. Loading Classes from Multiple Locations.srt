1
00:00:02,040 --> 00:00:05,610
So I'd like to cover a couple of things just before we start writing code.

2
00:00:05,610 --> 00:00:06,430
First of all,

3
00:00:06,430 --> 00:00:10,790
there's a method on Class called forName, and forName allows us to

4
00:00:10,790 --> 00:00:14,730
load classes based on the class name. By default, forName takes the

5
00:00:14,730 --> 00:00:17,290
name of the class and a Boolean parameter,

6
00:00:17,290 --> 00:00:20,340
specifying whether to define that class or not.

7
00:00:20,340 --> 00:00:23,600
But there's a threeâ€‘parameter version of class.forName.

8
00:00:23,600 --> 00:00:25,380
There's a third parameter,

9
00:00:25,380 --> 00:00:29,240
takes a classloader, and class.forName then uses

10
00:00:29,240 --> 00:00:31,900
that classloader to load the class.

11
00:00:31,900 --> 00:00:33,540
So it looks something like this.

12
00:00:33,540 --> 00:00:34,040
We create,

13
00:00:34,040 --> 00:00:37,920
for example here, a new URLClassLoader, call it ucl, call

14
00:00:37,920 --> 00:00:40,980
Class.forName, passing the name of the class, and then as

15
00:00:40,980 --> 00:00:43,140
the third parameter, passing ucl.

16
00:00:43,140 --> 00:00:44,080
In this case,

17
00:00:44,080 --> 00:00:48,300
the class is loaded by the classloader defined using the

18
00:00:48,300 --> 00:00:52,580
URLClassLoader we created, not the application classloader that

19
00:00:52,580 --> 00:00:54,380
was loaded when the application started up.

20
00:00:54,380 --> 00:00:58,860
This makes it slightly easier to use classloaders and provide some isolation.

21
00:00:58,860 --> 00:01:02,890
So something else we've mentioned and something I'd like to emphasize is

22
00:01:02,890 --> 00:01:09,780
the idea of using interfaces in our code while using base classes to

23
00:01:09,780 --> 00:01:13,240
allow us to make calls on classes that we load.

24
00:01:13,240 --> 00:01:14,000
So, for example,

25
00:01:14,000 --> 00:01:18,390
here, we're using Class.forName to load a Rocket class, and we're

26
00:01:18,390 --> 00:01:21,900
passing this thing a classloader. The ucl is a reference to a

27
00:01:21,900 --> 00:01:26,050
URLClassLoader. But when we call newInstance,

28
00:01:26,050 --> 00:01:30,210
we cast this to be of type Rocket, but Rocket here, the type

29
00:01:30,210 --> 00:01:33,440
Rocket, is visible to the application's classloader,

30
00:01:33,440 --> 00:01:36,600
and that really defeats the purpose of using the

31
00:01:36,600 --> 00:01:39,350
URLClassLoader to load the class in the first place.

32
00:01:39,350 --> 00:01:43,000
Instead, we do what we've already done in our demos.

33
00:01:43,000 --> 00:01:46,510
We still use the URLClassLoader to load the class Rocket.

34
00:01:46,510 --> 00:01:52,190
But now, when we call newInstance, we cast this to be of type Rocket interface.

35
00:01:52,190 --> 00:01:56,320
So Rocket interface is visible to the application's classloader

36
00:01:56,320 --> 00:02:00,330
delegation, but Rocket is only visible to the URLClassLoader's

37
00:02:00,330 --> 00:02:05,040
delegation. So we could load Rocket using one URLClassLoader and

38
00:02:05,040 --> 00:02:07,240
cast it to be of type Rocket interface.

39
00:02:07,240 --> 00:02:09,240
We could then load another copy of Rocket,

40
00:02:09,240 --> 00:02:12,930
a different version using a different URLClassLoader, but

41
00:02:12,930 --> 00:02:15,200
cast it to the same Rocket interface.

42
00:02:15,200 --> 00:02:17,510
So we did a previous demonstration where we use a

43
00:02:17,510 --> 00:02:20,170
URLClassLoader to load a class file.

44
00:02:20,170 --> 00:02:21,520
This code is similar,

45
00:02:21,520 --> 00:02:25,450
except here, we're using Class.forName, and we're passing the

46
00:02:25,450 --> 00:02:29,720
URLClassLoader as the third parameter to Class.forName.

47
00:02:29,720 --> 00:02:30,410
So in this case,

48
00:02:30,410 --> 00:02:34,830
com.pluralsight.Quote where we load it as a class from the

49
00:02:34,830 --> 00:02:38,240
location specified in the URLClassLoader,

50
00:02:38,240 --> 00:02:38,730
which is simply

51
00:02:38,730 --> 00:02:45,630
demos/ClassloadingWithItf/out/artifacts/Implementations_jar/Implementations.jar.

52
00:02:45,630 --> 00:02:50,410
If I take this code and duplicate it, but just change the name so we have url2

53
00:02:50,410 --> 00:02:55,310
rather than url1 and classloader 2, but we still do Class.forName, we keep all

54
00:02:55,310 --> 00:02:58,920
the locations the same, so we're still loading from Implementations.jar for

55
00:02:58,920 --> 00:03:05,430
both URLs, I can create an instance here using clazz1, and I can create an

56
00:03:05,430 --> 00:03:10,680
instance using clazz2. And these are both cast to be of type IQuote.

57
00:03:10,680 --> 00:03:14,270
And we know that Quote, com.pluralsight.Quote, indeed

58
00:03:14,270 --> 00:03:18,180
implements IQuote. And then at the end here,

59
00:03:18,180 --> 00:03:24,070
I'll print out two checks, a check to see if something of type clazz1

60
00:03:24,070 --> 00:03:30,480
is equal to clazz2, and I also call quote1.getClass and

61
00:03:30,480 --> 00:03:34,810
quote2.getClass and check to see if they are the same.

62
00:03:34,810 --> 00:03:38,190
So at the command prompt, if I run this code, so again,

63
00:03:38,190 --> 00:03:42,110
just pointing my application classpath at the interface's JAR file and

64
00:03:42,110 --> 00:03:47,960
the location, out\production\Client, where the main classes are held and

65
00:03:47,960 --> 00:03:54,960
then run com.mantiso.Main, we see that clazz1 == clazz2 is false and

66
00:03:54,960 --> 00:03:58,810
quote1.class == quote2.class == false.

67
00:03:58,810 --> 00:04:02,730
So here, clazz1 and clazz2 are not the same.

68
00:04:02,730 --> 00:04:07,200
So the class loaded here and the class loaded here are not the same,

69
00:04:07,200 --> 00:04:10,690
which is sort of unusual. As you saw that when we create a class,

70
00:04:10,690 --> 00:04:13,540
that class should be cached by the classloader.

71
00:04:13,540 --> 00:04:14,490
So in this case,

72
00:04:14,490 --> 00:04:19,160
we might expect clazz1 to be the same as clazz2. When we call

73
00:04:19,160 --> 00:04:23,810
Class.forName here, we'd expect the same class instance to be

74
00:04:23,810 --> 00:04:26,530
returned in the clazz1 and clazz2,

75
00:04:26,530 --> 00:04:29,020
but as we're using different classloader delegations,

76
00:04:29,020 --> 00:04:30,220
that's not the case.

77
00:04:30,220 --> 00:04:36,020
So here, our URLClassLoader created on this line will load clazz2 and the

78
00:04:36,020 --> 00:04:40,490
URLClassLoader created on this line will load clazz1. So they can't be

79
00:04:40,490 --> 00:04:43,530
the same. And the same for the calls here.

80
00:04:43,530 --> 00:04:46,650
It's the same for the second check. When we check to see if

81
00:04:46,650 --> 00:04:52,230
quote1.getClass is the same as quote2.getClass, quote1.getClass

82
00:04:52,230 --> 00:04:56,820
returns clazz1, and quote2.getClass returns clazz2. So we'd

83
00:04:56,820 --> 00:04:59,510
expect to see the same result.

84
00:04:59,510 --> 00:05:03,090
So using this technique, we get a degree of isolation.

85
00:05:03,090 --> 00:05:07,000
So the class is loaded by this classloader delegation here. Using one

86
00:05:07,000 --> 00:05:10,810
URLClassLoader can be different to the classes loaded by this

87
00:05:10,810 --> 00:05:14,590
delegation here loaded by a second URL classloader.

88
00:05:14,590 --> 00:05:24,000
That lets us load classes in isolation and, therefore, to load different versions of the same class at runtime.

