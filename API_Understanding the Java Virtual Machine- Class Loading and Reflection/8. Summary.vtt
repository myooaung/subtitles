WEBVTT
1
00:00:03.440 --> 00:00:07.620
So we've seen in this module that an application will have multiple class

2
00:00:07.620 --> 00:00:12.990
loaders, and we've seen how those class loaders will delegate.

3
00:00:12.990 --> 00:00:14.890
So when we try and load a class,

4
00:00:14.890 --> 00:00:16.510
it will ask the application class loader, that will

5
00:00:16.510 --> 00:00:20.820
delegate app to the extensions class loader in Java 8 or

6
00:00:20.820 --> 00:00:22.470
the platform class loader in Java.

7
00:00:22.470 --> 00:00:27.190
11, which will further delegate to the Bootstrap class loader.

8
00:00:27.190 --> 00:00:29.560
If the Bootstrap class loader first loads the class. that goes

9
00:00:29.560 --> 00:00:32.440
back to the next class loader in the delegation,

10
00:00:32.440 --> 00:00:34.260
and if that class loader fails to load the class,

11
00:00:34.260 --> 00:00:36.940
it goes back to the application class loader.

12
00:00:36.940 --> 00:00:40.340
And that's when we get our chance to try and load the class.

13
00:00:40.340 --> 00:00:43.030
We've talked about the fact there's an extensions class loader in

14
00:00:43.030 --> 00:00:46.480
Java 8 that loads extensions from an extensions directory, which

15
00:00:46.480 --> 00:00:48.480
we could set on the command line.

16
00:00:48.480 --> 00:00:52.960
We've talked about that in Java 11, that extensions class loader is

17
00:00:52.960 --> 00:00:56.300
replaced by the platform class loader, and these both have a similar

18
00:00:56.300 --> 00:01:00.440
job to try and load classes that are not part of the standard Java

19
00:01:00.440 --> 00:01:04.730
runtime, but can be considered by the platform classes in Java 11 terms

20
00:01:04.730 --> 00:01:08.660
or extension classes in Java 8 terms. And then we've looked at the

21
00:01:08.660 --> 00:01:10.200
Bootstrap class loader.

22
00:01:10.200 --> 00:01:12.600
This class loader is not written in Java, it's written in

23
00:01:12.600 --> 00:01:16.190
C, and the job of this is to load the base classes. so

24
00:01:16.190 --> 00:01:24.000
things in java.lang, for example. So now that we've seen this, let's go on and write our own class loader.

