1
00:00:00,340 --> 00:00:05,540
So in the previous code, we saw that we could just use a reference to an object.

2
00:00:05,540 --> 00:00:08,130
We can't actually make use of any of the methods on

3
00:00:08,130 --> 00:00:09,550
the quote class that we loaded,

4
00:00:09,550 --> 00:00:13,900
and this is a general problem when using our own class loaders.

5
00:00:13,900 --> 00:00:16,330
So if we're using our own class loader,

6
00:00:16,330 --> 00:00:19,730
we can't reference the implementation classes in the code,

7
00:00:19,730 --> 00:00:21,530
because if we do,

8
00:00:21,530 --> 00:00:24,770
that will cause a class to be loaded with the application class loader,

9
00:00:24,770 --> 00:00:27,960
and that will then defeat the purpose of using our own class loader.

10
00:00:27,960 --> 00:00:29,240
So typically,

11
00:00:29,240 --> 00:00:33,230
the way we avoid this problem is to split our code into an

12
00:00:33,230 --> 00:00:36,440
implementation class and an interface.

13
00:00:36,440 --> 00:00:39,110
The interface definitions go on to the class path,

14
00:00:39,110 --> 00:00:43,660
and the implementation is loaded by our class loader.

15
00:00:43,660 --> 00:00:48,540
So what we have here is a slightly more complex project.

16
00:00:48,540 --> 00:00:51,840
We have a main still, and this is in com.mantiso.

17
00:00:51,840 --> 00:00:55,810
We have quote, which is in com.pluralsight,

18
00:00:55,810 --> 00:00:59,180
and quote is going to be an implementation class,

19
00:00:59,180 --> 00:01:00,920
and then we have an interface called IQuote,

20
00:01:00,920 --> 00:01:05,840
and IQuote is also in com.pluralsight.

21
00:01:05,840 --> 00:01:12,680
So on IQuote, we're going to add a string method called getQuote,

22
00:01:12,680 --> 00:01:16,640
and then we'll implement this inside the Quote class.

23
00:01:16,640 --> 00:01:22,110
So inside Quote, we'll provide an implementation of IQuote,

24
00:01:22,110 --> 00:01:25,810
and then we let IntelliJ implement the method from us,

25
00:01:25,810 --> 00:01:28,520
and from here we'll just return a famous quote,

26
00:01:28,520 --> 00:01:32,240
something like, a rolling stone gathers no moss.

27
00:01:32,240 --> 00:01:36,030
So we don't want main, IQuote, and Quote all on the class path,

28
00:01:36,030 --> 00:01:37,000
because if we did that,

29
00:01:37,000 --> 00:01:42,630
then we're back to the original demo in the previous module where

30
00:01:42,630 --> 00:01:44,600
we load everything from a single class path,

31
00:01:44,600 --> 00:01:47,540
and we're trying to load things using different class loaders here.

32
00:01:47,540 --> 00:01:50,150
So we need to split the applications into three parts.

33
00:01:50,150 --> 00:01:52,530
So Main will be compiled with our .class file,

34
00:01:52,530 --> 00:01:55,200
and we'll load that from the application class path.

35
00:01:55,200 --> 00:01:59,360
The interfaces will be compiled to a jar file,

36
00:01:59,360 --> 00:02:01,530
and we'll load that from the application class path.

37
00:02:01,530 --> 00:02:04,330
The implementation will load from a separate class path.

38
00:02:04,330 --> 00:02:07,640
We'll use our URL class loader for that.

39
00:02:07,640 --> 00:02:11,550
So to do that, I do access Build and then artifacts.

40
00:02:11,550 --> 00:02:16,680
So I do a Build Artifacts here, and say, All Artifacts, and we'll do a rebuild.

41
00:02:16,680 --> 00:02:19,240
So what we end up with is an Artifacts folder that

42
00:02:19,240 --> 00:02:23,570
contains an implementations jar, and also contains an interfaces jar,

43
00:02:23,570 --> 00:02:25,220
and we can load those separately.

44
00:02:25,220 --> 00:02:26,900
We could load one on the class path,

45
00:02:26,900 --> 00:02:30,740
and we could load one using our own class loader.

46
00:02:30,740 --> 00:02:34,250
We also have production client com.mantiso Main.class.

47
00:02:34,250 --> 00:02:38,440
So that also will be on the application class path.

48
00:02:38,440 --> 00:02:40,580
So how do we use this?

49
00:02:40,580 --> 00:02:43,170
So in Main, we'll have code like before.

50
00:02:43,170 --> 00:02:45,740
We'll need to add a try/catch block.

51
00:02:45,740 --> 00:02:48,380
So the initial code is similar to the previous code,

52
00:02:48,380 --> 00:02:53,260
but in this case, we are adding a reference to our implementation's jar file.

53
00:02:53,260 --> 00:02:55,280
So just give us a little more space here.

54
00:02:55,280 --> 00:02:57,790
This jar file is in my demos folder,

55
00:02:57,790 --> 00:02:59,590
and there's a project folder and then

56
00:02:59,590 --> 00:03:04,620
out/artifactImplementations_jar/Implementations.jar.

57
00:03:04,620 --> 00:03:09,360
So we create that as the URL, we create our new URL class loader,

58
00:03:09,360 --> 00:03:12,980
and then we load, in this case com.pluralsight.quote.

59
00:03:12,980 --> 00:03:17,630
Once we have that in place, and again we can call class.newInstance,

60
00:03:17,630 --> 00:03:23,550
but now I can define this as being something of type IQuote,

61
00:03:23,550 --> 00:03:29,290
and we'll call this quote, and we'll need to add a class to this,

62
00:03:29,290 --> 00:03:30,680
and this is all fine,

63
00:03:30,680 --> 00:03:34,810
because IQuote will be in a jar file that will be on our class path,

64
00:03:34,810 --> 00:03:36,960
on the application class path.

65
00:03:36,960 --> 00:03:40,750
And then once I have that, we can then do System.out again,

66
00:03:40,750 --> 00:03:46,170
and then print out quote.getQuote, and just print out that message.

67
00:03:46,170 --> 00:03:51,110
So if we make the project, and we build the artifacts,

68
00:03:51,110 --> 00:03:53,820
and I'll do a rebuild just to be on the safe side,

69
00:03:53,820 --> 00:03:57,360
we can now run this from the command line with the correct class path,

70
00:03:57,360 --> 00:04:01,800
and we should find that we actually get the quote printed out.

71
00:04:01,800 --> 00:04:05,580
So when we run the application, we have to ensure we have the right class path.

72
00:04:05,580 --> 00:04:06,280
We do java â€‘cp,

73
00:04:06,280 --> 00:04:17,340
and it's going to be an out\production\client will be one of the class paths,

74
00:04:17,340 --> 00:04:20,220
and then out\artifact\interfaces_jar\interfaces.jar.

75
00:04:20,220 --> 00:04:26,290
So that's just the interfaces jar file,

76
00:04:26,290 --> 00:04:29,540
and we don't have the implementations jar file on the class path.

77
00:04:29,540 --> 00:04:36,100
And then I can do com.mantiso.Main, and we get the result.

78
00:04:36,100 --> 00:04:41,220
We got the quote printed out, and this is typically how we do class loading.

79
00:04:41,220 --> 00:04:43,450
We need something on the class path that we can use,

80
00:04:43,450 --> 00:04:45,090
and that's going to be our interface definitions,

81
00:04:45,090 --> 00:04:49,630
and then we load an implementation from a specific location to make use of that.

82
00:04:49,630 --> 00:04:54,740
So as well as loading classes from a file U,RL, we can load it from any URL.

83
00:04:54,740 --> 00:04:57,350
So I'm going to copy this line of code,

84
00:04:57,350 --> 00:05:01,030
and comment this out so it just stays in the demo,

85
00:05:01,030 --> 00:05:03,240
and then change this file URL to point at a web

86
00:05:03,240 --> 00:05:05,440
server I have running on this machine.

87
00:05:05,440 --> 00:05:08,240
We have Tomcat running on port 8080.

88
00:05:08,240 --> 00:05:12,440
So if I go to my browser and just go to localhost 8080,

89
00:05:12,440 --> 00:05:14,530
we'll see we have an instance of Tomcat.

90
00:05:14,530 --> 00:05:18,140
And I can use that inside my code.

91
00:05:18,140 --> 00:05:20,970
So back in the application,

92
00:05:20,970 --> 00:05:28,960
if I change the URL to http://localhost:8080, and

93
00:05:28,960 --> 00:05:33,540
specify the name of the jar file.

94
00:05:33,540 --> 00:05:37,480
So I need to place that jar file at that, at the root of the server.

95
00:05:37,480 --> 00:05:39,410
So this is my server root.

96
00:05:39,410 --> 00:05:43,340
So it's in C:\home\kevinj\dev\tomcat\ and the webapps root.

97
00:05:43,340 --> 00:05:46,870
If I go back to the application and build it, and then

98
00:05:46,870 --> 00:05:48,740
running it again, then it fails.

99
00:05:48,740 --> 00:05:50,740
It can't find the quote class.

100
00:05:50,740 --> 00:05:52,330
So I need to take that artifact,

101
00:05:52,330 --> 00:05:58,600
which was in the artifact open directory, and load that Into the Tomcat

102
00:05:58,600 --> 00:06:02,140
folder, and that's now here so implementations.jar.

103
00:06:02,140 --> 00:06:07,480
So if I go back to my command prompt and run the code again, our code now works.

104
00:06:07,480 --> 00:06:19,000
So now the jar file is being loaded from an http URL. So we can see, we can actually load these class files across the network.

