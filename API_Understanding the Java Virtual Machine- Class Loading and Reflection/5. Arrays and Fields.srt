1
00:00:02,440 --> 00:00:05,500
So we can also get and set the values of fields.

2
00:00:05,500 --> 00:00:08,260
So I can create a new Car, and we've seen this before,

3
00:00:08,260 --> 00:00:15,250
so I can say Car car = cls.newInstance and cast this to be of type car.

4
00:00:15,250 --> 00:00:18,540
And then I can use a field object.

5
00:00:18,540 --> 00:00:25,480
I can say field f = class.getDeclaredField and give it the name of the field.

6
00:00:25,480 --> 00:00:29,740
And there's a speed field in the in the car class,

7
00:00:29,740 --> 00:00:32,940
double quotes of course for the string.

8
00:00:32,940 --> 00:00:35,230
Once we have that, we can get the value of the field.

9
00:00:35,230 --> 00:00:41,100
So I can say Object obj = f.get.

10
00:00:41,100 --> 00:00:45,010
And again, this relies on the value for the specific instance,

11
00:00:45,010 --> 00:00:48,790
so we can't pass in the car we created previously.

12
00:00:48,790 --> 00:00:51,050
I can then print out the value of the fields, so we can just say

13
00:00:51,050 --> 00:00:57,150
sout and just do obj, and that will call obj.toString. And if I go

14
00:00:57,150 --> 00:01:01,350
to the menu and run the application, we haven't driven the car yet,

15
00:01:01,350 --> 00:01:04,910
so when this executes it should print out the value 0, and indeed it does.

16
00:01:04,910 --> 00:01:06,300
So now let's try something like this.

17
00:01:06,300 --> 00:01:08,160
So I just copy these two lines,

18
00:01:08,160 --> 00:01:14,140
get rid of the declaration, and here in between the two, do

19
00:01:14,140 --> 00:01:19,340
car.drive. And car.drive, at this point,

20
00:01:19,340 --> 00:01:23,490
we'll set the, specify the value as 0. And we drive of the car,

21
00:01:23,490 --> 00:01:27,440
passing in the correct parameters, so let's I want this to go up to,

22
00:01:27,440 --> 00:01:29,510
say, 33 miles an hour.

23
00:01:29,510 --> 00:01:35,150
At this point, when I get the value of the field again,

24
00:01:35,150 --> 00:01:37,510
then we should now print out 33.

25
00:01:37,510 --> 00:01:39,070
So if I run the code again, sure enough,

26
00:01:39,070 --> 00:01:44,450
we see 0 followed by 33. We can similarly set the value of the field. So I

27
00:01:44,450 --> 00:01:49,410
can say f.set, and again we give it the instance to set the value on, which

28
00:01:49,410 --> 00:01:51,910
is going to be car and the value we want to set,

29
00:01:51,910 --> 00:01:54,330
so let's say 44.

30
00:01:54,330 --> 00:01:57,790
Run the code and again print out those two values, and we

31
00:01:57,790 --> 00:02:02,540
should see 0, 33, and then finally, 44.

32
00:02:02,540 --> 00:02:05,620
One of the fields of the Car type that we have is an

33
00:02:05,620 --> 00:02:08,440
array of strings called people.

34
00:02:08,440 --> 00:02:10,740
So how do we process that?

35
00:02:10,740 --> 00:02:11,460
Well,

36
00:02:11,460 --> 00:02:16,530
we get the reference in the same ways. I can say Field field =

37
00:02:16,530 --> 00:02:22,640
cls.getDeclaredField and give it the field of people, and that

38
00:02:22,640 --> 00:02:24,380
gives me access to the array.

39
00:02:24,380 --> 00:02:29,590
And again I can set values on this. But to set the values on the array we need

40
00:02:29,590 --> 00:02:33,130
to use something from the java.lang.reflect.array class.

41
00:02:33,130 --> 00:02:37,250
So I do Array.set, and inside Array.set we pass it

42
00:02:37,250 --> 00:02:39,540
the array that we want to use,

43
00:02:39,540 --> 00:02:44,740
which is going to be field.get for that particular object. That's

44
00:02:44,740 --> 00:02:49,030
going to be for car. We pass in the index that we'd like to set and

45
00:02:49,030 --> 00:02:52,420
then the name we'd like to set in the array, so let's say Kevin. And

46
00:02:52,420 --> 00:02:54,360
then to get a value, again,

47
00:02:54,360 --> 00:03:01,750
we can say Object obj = array.get. Again, the field we want to

48
00:03:01,750 --> 00:03:06,400
get the value from, so we'll just take the field.get(car) and

49
00:03:06,400 --> 00:03:08,850
pass that as the first value, and again,

50
00:03:08,850 --> 00:03:12,350
the index we want to get out. And again, let's print that out

51
00:03:12,350 --> 00:03:14,940
to see that we get the same correct value.

52
00:03:14,940 --> 00:03:17,930
And we run this, and we print out the string Kevin. So we're

53
00:03:17,930 --> 00:03:20,190
setting in the value in the array by using the

54
00:03:20,190 --> 00:03:23,440
java.lang.reflect.array class to do that.

55
00:03:23,440 --> 00:03:27,990
Just a couple more things on arrays. To get a class for an array, we'd

56
00:03:27,990 --> 00:03:33,510
say something like Class clazz, say equals, and then something like

57
00:03:33,510 --> 00:03:38,630
String[].class will give us back the class type.

58
00:03:38,630 --> 00:03:41,910
We can also do a class.forName on arrays as well.

59
00:03:41,910 --> 00:03:46,840
So I could say clazz = class.forName.

60
00:03:46,840 --> 00:03:49,210
But in this case, the syntax is slightly unusual.

61
00:03:49,210 --> 00:03:50,920
It takes a string,

62
00:03:50,920 --> 00:03:55,070
and that string says something like, I'm an array of type int, so I for

63
00:03:55,070 --> 00:03:58,780
int. And if we print out the name of this class, so do something like

64
00:03:58,780 --> 00:04:05,400
System.out.println, clazz.getName, and run the code again, we'll see we end

65
00:04:05,400 --> 00:04:12,030
end up with this weird syntax, this [I, so an array of integers. To get the

66
00:04:12,030 --> 00:04:13,860
class for a nonâ€‘primitive type,

67
00:04:13,860 --> 00:04:18,070
we'd say [L, and then something like java.lang.string,

68
00:04:18,070 --> 00:04:21,940
and then that string with a semicolon.

69
00:04:21,940 --> 00:04:25,040
And if we run the code again,

70
00:04:25,040 --> 00:04:29,370
we now have the class type for string arrays, where left angle

71
00:04:29,370 --> 00:04:32,220
bracket means, again, this is an array type, and the string

72
00:04:32,220 --> 00:04:41,000
following the L and before the semicolon gives the name of the type. And this will work for any type.

