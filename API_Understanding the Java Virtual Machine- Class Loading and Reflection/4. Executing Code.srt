1
00:00:04,830 --> 00:00:10,400
We've seen that we can create instances by doing cls.newInstance,

2
00:00:10,400 --> 00:00:14,640
and that's fine so long as the class has a default constructor.

3
00:00:14,640 --> 00:00:16,900
If the class doesn't have a default constructor,

4
00:00:16,900 --> 00:00:19,850
instead we can use the constructor properties of the class.

5
00:00:19,850 --> 00:00:26,680
So I can say Constructor, array, ctors = cls.getDeclaredConstructors.

6
00:00:26,680 --> 00:00:30,420
Then from here, we know in this case the class has two constructors,

7
00:00:30,420 --> 00:00:31,760
as we've seen this previously.

8
00:00:31,760 --> 00:00:34,630
We know we have the default constructor and one that

9
00:00:34,630 --> 00:00:38,060
takes an int as the parameter.

10
00:00:38,060 --> 00:00:44,830
So in my code, I can say ctors [1], so take the first constructor,

11
00:00:44,830 --> 00:00:46,950
which will be the one with a single parameter,

12
00:00:46,950 --> 00:00:47,840
and then call newInstance.

13
00:00:47,840 --> 00:00:52,540
And to newInstance, this is a variadic method,

14
00:00:52,540 --> 00:00:55,850
so I can just pass in the arguments that we need for that constructor.

15
00:00:55,850 --> 00:00:56,280
So in this case,

16
00:00:56,280 --> 00:00:59,480
let's just pass in the value 6, let's say, and we know

17
00:00:59,480 --> 00:01:01,590
this will give me back a Car object.

18
00:01:01,590 --> 00:01:04,220
Now this obviously defeats the purpose slightly,

19
00:01:04,220 --> 00:01:09,940
as I'm using reflection to create an instance of a car when I already

20
00:01:09,940 --> 00:01:13,590
have the Car type actually in my code. Instead,

21
00:01:13,590 --> 00:01:16,820
we again do something like code against an interface, if we

22
00:01:16,820 --> 00:01:18,650
were doing this in a realâ€‘world example.

23
00:01:18,650 --> 00:01:21,430
This is just to show that we can actually do a constructor using

24
00:01:21,430 --> 00:01:23,840
reflection, and we don't get any exceptions.

25
00:01:23,840 --> 00:01:28,010
If I try and call this with too many parameters and run the code,

26
00:01:28,010 --> 00:01:30,600
we end up with an IllegalArgumentException, wrong number of

27
00:01:30,600 --> 00:01:34,640
arguments. And if I try and call it with an invalid argument,

28
00:01:34,640 --> 00:01:39,520
passing the string string, again, we end up with an IllegalArgumentException,

29
00:01:39,520 --> 00:01:41,700
this time with an argument type mismatch.

30
00:01:41,700 --> 00:01:46,020
So we're definitely doing something right by passing in a single integer

31
00:01:46,020 --> 00:01:49,540
parameter to this. We are calling that constructor.

32
00:01:49,540 --> 00:01:51,230
So now that we have the Car,

33
00:01:51,230 --> 00:01:55,160
how about calling a method on that Car using reflection?

34
00:01:55,160 --> 00:02:02,380
So to do that, we'd say Method method = cls.getDeclaredMethod.

35
00:02:02,380 --> 00:02:04,470
So just like getDeclaredField,

36
00:02:04,470 --> 00:02:07,940
we give this thing the name of the method, so that's going to be drive.

37
00:02:07,940 --> 00:02:11,860
However, for getDeclaredMethod, methods could be overloaded,

38
00:02:11,860 --> 00:02:16,860
so we also have to specify an array of the types that identify the

39
00:02:16,860 --> 00:02:20,640
parameters this particular method will take.

40
00:02:20,640 --> 00:02:26,360
So if I look in Car here, our drive method takes a char and an int,

41
00:02:26,360 --> 00:02:31,340
but let's say we had an overloaded version of this that just took an int.

42
00:02:31,340 --> 00:02:34,850
We'd need to tell reflection which version of the drive

43
00:02:34,850 --> 00:02:37,940
method we'd like to use, the one that just took an int, or

44
00:02:37,940 --> 00:02:40,140
the one that took a char and an int.

45
00:02:40,140 --> 00:02:42,740
So putting this back as it was,

46
00:02:42,740 --> 00:02:48,200
if we go back into Main, so here we have to tell this which method we want

47
00:02:48,200 --> 00:02:52,520
to use, and we do that by passing an array of classes. So we can say

48
00:02:52,520 --> 00:02:57,890
char.class that identifies the first variable, and int.class, and that

49
00:02:57,890 --> 00:03:00,150
identifies the type of the second variable.

50
00:03:00,150 --> 00:03:05,640
Once we have the method we can then invoke it, so we do method.invoke.

51
00:03:05,640 --> 00:03:07,330
When you call invoke,

52
00:03:07,330 --> 00:03:12,240
you have to pass both the parameters to the method you're trying to invoke.

53
00:03:12,240 --> 00:03:17,090
But you also have to pass the instance on which you'd like this method invoked.

54
00:03:17,090 --> 00:03:23,590
So we say car, and then we have a char, so let's say D, and

55
00:03:23,590 --> 00:03:25,920
the speed we'd like the car to get to,

56
00:03:25,920 --> 00:03:31,440
let's say 6. And if I go in, if I put a breakpoint on the invoke call,

57
00:03:31,440 --> 00:03:35,370
go into Car and put a breakpoint on the drive call,

58
00:03:35,370 --> 00:03:40,750
then go to the debugger and debug this application, then we break at

59
00:03:40,750 --> 00:03:44,550
invoke. If I just leave this guy to run, then we're now inside the

60
00:03:44,550 --> 00:03:49,470
drive call. And inside here if we look at drive, we see that's been

61
00:03:49,470 --> 00:03:54,450
set to the value of D and desired speed that we pass here is set to

62
00:03:54,450 --> 00:03:56,340
the value of 6.

63
00:03:56,340 --> 00:03:59,500
A couple more things to think about when invoking methods.

64
00:03:59,500 --> 00:04:01,750
Firstly, what about static methods?

65
00:04:01,750 --> 00:04:04,810
So on Car, I have a little a static void method called

66
00:04:04,810 --> 00:04:07,620
print, and that just prints out Hello World.

67
00:04:07,620 --> 00:04:09,570
We can invoke this in a very similar way.

68
00:04:09,570 --> 00:04:14,030
So again I can say method = cls.getDeclaredMethod

69
00:04:14,030 --> 00:04:17,520
and pass the name of the method,

70
00:04:17,520 --> 00:04:20,690
which in this case is print. Print takes no arguments,

71
00:04:20,690 --> 00:04:23,720
so we don't need to pass anything extra to getDeclaredMethod.

72
00:04:23,720 --> 00:04:28,440
I have the method object back, I can say method.invoke,

73
00:04:28,440 --> 00:04:30,580
but now we're invoking the method,

74
00:04:30,580 --> 00:04:34,680
and we don't have to use an instance, as it's as it a static method.

75
00:04:34,680 --> 00:04:37,140
So to this, I can just pass null.

76
00:04:37,140 --> 00:04:42,470
So null here says treat whichever method is being referenced

77
00:04:42,470 --> 00:04:45,700
by the method type here as a static method.

78
00:04:45,700 --> 00:04:48,180
And if I run this code, it prints out Hello World.

79
00:04:48,180 --> 00:04:50,590
So how about invoking a private method?

80
00:04:50,590 --> 00:04:56,540
Let's say I do method = cls.getDeclaredMethod.

81
00:04:56,540 --> 00:04:59,370
And in the Car class we have a couple of private methods.

82
00:04:59,370 --> 00:05:04,510
Let's use accelerate that takes no parameters. So we can say

83
00:05:04,510 --> 00:05:11,100
method.accelerate and then try and do method.invoke.

84
00:05:11,100 --> 00:05:14,430
I will invoke it again on the Car object, and accelerate

85
00:05:14,430 --> 00:05:16,200
doesn't take any parameters either.

86
00:05:16,200 --> 00:05:17,700
So if I run this code,

87
00:05:17,700 --> 00:05:20,250
the code explodes, and it throws an exception. It throws

88
00:05:20,250 --> 00:05:24,800
an IllegalAccessException. So by default we're not allowed

89
00:05:24,800 --> 00:05:28,040
to execute private methods.

90
00:05:28,040 --> 00:05:30,220
However, there's a simple way to get around that.

91
00:05:30,220 --> 00:05:35,770
We can say method.setAccessible to be true. So by default

92
00:05:35,770 --> 00:05:39,760
setAccessible is false, and you can't access private methods.

93
00:05:39,760 --> 00:05:41,530
But by setting the flag to true,

94
00:05:41,530 --> 00:05:44,110
then we're allowed to do this. Again, if I run the code,

95
00:05:44,110 --> 00:05:47,760
the method executes. Now be aware, this is not a free lunch.

96
00:05:47,760 --> 00:05:51,140
We can't simply go ahead and access private methods.

97
00:05:51,140 --> 00:06:00,000
It's possible that a security manager might be involved, and the security manager can prevent this behavior.

