1
00:00:01,940 --> 00:00:04,130
Hi, my name is Kevin Jones,

2
00:00:04,130 --> 00:00:08,880
and this is The Basics of Classloading module from the Java

3
00:00:08,880 --> 00:00:12,180
Virtual Machine: Class Learning and Reflection course from

4
00:00:12,180 --> 00:00:15,350
Pluralsight. So in this module,

5
00:00:15,350 --> 00:00:18,040
we're going to take a look at class loading, and we're

6
00:00:18,040 --> 00:00:20,970
going to cover a few things. We want to take a look at how

7
00:00:20,970 --> 00:00:23,440
class loading works in Java 8,

8
00:00:23,440 --> 00:00:27,860
including something called a delegation model and how that works in Java 8.

9
00:00:27,860 --> 00:00:29,520
And then we're going to take a look at how class

10
00:00:29,520 --> 00:00:31,830
loading works in Java 11, in fact,

11
00:00:31,830 --> 00:00:36,940
from Java 9 onwards, and how delegation works in Java 11.

12
00:00:36,940 --> 00:00:41,140
So for Java 8, we want to take a look at a number of things.

13
00:00:41,140 --> 00:00:44,080
We want to take a look at what are known as core classes.

14
00:00:44,080 --> 00:00:48,220
So these are the classes that are loaded as part of the standard Java Runtime,

15
00:00:48,220 --> 00:00:52,670
if you like, so things like the String class. We are then going to take a

16
00:00:52,670 --> 00:00:56,140
look at extension classes and the extensions directory.

17
00:00:56,140 --> 00:01:00,250
These classes don't necessarily ship along with the Runtime,

18
00:01:00,250 --> 00:01:03,520
but that may be used as if they were Runtime classes.

19
00:01:03,520 --> 00:01:07,970
And examples of these are things like the cryptography classes in Java. Once

20
00:01:07,970 --> 00:01:11,740
we've done this, we want to take a look at delegation.

21
00:01:11,740 --> 00:01:14,720
So delegation is how class loading works in Java.

22
00:01:14,720 --> 00:01:18,090
You have a hierarchy of class loaders, and each class loader in that

23
00:01:18,090 --> 00:01:22,730
hierarchy delegates to his parents. My parent could try and load extension

24
00:01:22,730 --> 00:01:25,650
classes, or it could try and load the core classes.

25
00:01:25,650 --> 00:01:28,380
I'm going to take a look at how this works in Java 8 in a

26
00:01:28,380 --> 00:01:33,550
moment. And we can also display this delegation. So we can walk

27
00:01:33,550 --> 00:01:37,020
this hierarchy of class loaders in Java 8 and display

28
00:01:37,020 --> 00:01:38,920
information about those class loaders,

29
00:01:38,920 --> 00:01:40,990
such as the name of the class loader and where they're

30
00:01:40,990 --> 00:01:49,000
trying to load their classes from. So let's see some demos and see how we do this.

