WEBVTT
1
00:00:00.440 --> 00:00:04.890
We can also, using the class, discover the classes that we

2
00:00:04.890 --> 00:00:07.840
derive from all the interfaces we implement.

3
00:00:07.840 --> 00:00:08.690
So in the code,

4
00:00:08.690 --> 00:00:11.380
I've created an empty Vehicle class, and I've had

5
00:00:11.380 --> 00:00:13.640
our Car class derive from this.

6
00:00:13.640 --> 00:00:17.630
So now inside Main, we could say something like this.

7
00:00:17.630 --> 00:00:29.490
We can say Class superClass = cls.getSuperclass and then say while(superClass !=

8
00:00:29.490 --> 00:00:36.100
null), print out the name of the class. We can print out into this as a println,

9
00:00:36.100 --> 00:00:43.060
superClass.getName, and then finally say superClass = superClass.getSuperclass,

10
00:00:43.060 --> 00:00:46.130
so we keep walking up the hierarchy.

11
00:00:46.130 --> 00:00:50.870
Then if you run this code, we'll see that superClass of Car is Vehicle, the

12
00:00:50.870 --> 00:00:55.490
superClass of Vehicle is Object, and Object has no superClass, so getSuperclass

13
00:00:55.490 --> 00:00:58.720
here returns null. Once we have the class object,

14
00:00:58.720 --> 00:01:02.540
we can then go ahead and discover which constructors the class has.

15
00:01:02.540 --> 00:01:06.270
We saw at the start of this module that trying to create an instance of

16
00:01:06.270 --> 00:01:08.890
the class will try and use the default constructor.

17
00:01:08.890 --> 00:01:11.060
We'll see in a moment there are ways of using other

18
00:01:11.060 --> 00:01:13.390
constructors within the class.

19
00:01:13.390 --> 00:01:17.760
So there's a Constructor type. We can get the list of constructors from

20
00:01:17.760 --> 00:01:23.200
the class by saying cls.getConstructors. And the same as before, we can

21
00:01:23.200 --> 00:01:26.940
use getDeclaredConstructors or we can use getConstructors to get the

22
00:01:26.940 --> 00:01:30.310
constructors from this object. So let's use getDeclaredConstructors to

23
00:01:30.310 --> 00:01:31.840
find our constructors.

24
00:01:31.840 --> 00:01:32.720
And then, again,

25
00:01:32.720 --> 00:01:38.770
we can enter a for loop, so we can say for (Constructor c: ctors).

26
00:01:38.770 --> 00:01:39.360
And initially,

27
00:01:39.360 --> 00:01:42.150
again, we'll just print out the name of the constructor,

28
00:01:42.150 --> 00:01:44.990
so c.getName. And if I run this code,

29
00:01:44.990 --> 00:01:48.550
we know that we have two constructors, so com.pluralsight.Car and

30
00:01:48.550 --> 00:01:53.400
com.pluralsight.Car. So just as with the methods, we'll use printf to

31
00:01:53.400 --> 00:01:56.600
print out the name of the constructor, and then from the constructor,

32
00:01:56.600 --> 00:02:00.340
we can call getParameterCount, and we can print that out. So we can do

33
00:02:00.340 --> 00:02:05.410
System.out.printf("%d") and print out the number of parameters here.

34
00:02:05.410 --> 00:02:05.790
And, again,

35
00:02:05.790 --> 00:02:09.790
we put this in brackets and, again, at the end we put a

36
00:02:09.790 --> 00:02:12.100
semicolon, and then we print out a blank line.

37
00:02:12.100 --> 00:02:12.500
So again,

38
00:02:12.500 --> 00:02:16.630
if I run this, we'll see we have a Car constructor with 0 parameters

39
00:02:16.630 --> 00:02:19.660
and a Car constructor with a single parameter.

40
00:02:19.660 --> 00:02:22.520
So, as well as getting the count of parameters,

41
00:02:22.520 --> 00:02:27.040
there's also a parameter type, and we can get the collection of parameters.

42
00:02:27.040 --> 00:02:28.640
So from the constructor,

43
00:02:28.640 --> 00:02:32.670
I can call getParameters, and that returns back the collection, And, again,

44
00:02:32.670 --> 00:02:38.990
I can loop over this collection of parameters. We'll say for (Parameter p :

45
00:02:38.990 --> 00:02:43.740
parameters), and then each parameter we get,

46
00:02:43.740 --> 00:02:46.150
we can print out information about the parameter.

47
00:02:46.150 --> 00:02:50.440
So again, for example, we can print out the name of the parameter,

48
00:02:50.440 --> 00:02:55.640
and we can also print out the type of the parameter, so p.getType

49
00:02:55.640 --> 00:02:59.480
prints out the type information, and let's just comma separate these,

50
00:02:59.480 --> 00:03:02.790
so we can do %s in both cases. So, again,

51
00:03:02.790 --> 00:03:06.640
I can rerun the code. So we know this has no parameters.

52
00:03:06.640 --> 00:03:08.300
So nothing printed out there.

53
00:03:08.300 --> 00:03:10.550
This one, the parameter is called arg0.

54
00:03:10.550 --> 00:03:11.850
We don't get the full name.

55
00:03:11.850 --> 00:03:15.310
We just get arg0 here, so we know that in this case it's an

56
00:03:15.310 --> 00:03:19.240
integer parameter, and we'll see a little later on that we can

57
00:03:19.240 --> 00:03:21.550
use that information to actually call the constructor and to

58
00:03:21.550 --> 00:03:22.940
create one of these objects.

59
00:03:22.940 --> 00:03:26.090
We can also get the parameters from methods.

60
00:03:26.090 --> 00:03:28.720
So here I just brought the method code back in. We're calling

61
00:03:28.720 --> 00:03:32.140
getDeclaredMethods, and we're printing out the name of the

62
00:03:32.140 --> 00:03:35.240
method and the number of parameters.

63
00:03:35.240 --> 00:03:38.870
And if I just paste in the code from the constructor, we can

64
00:03:38.870 --> 00:03:44.300
change this from c to method, method.getParameters.

65
00:03:44.300 --> 00:03:44.630
Again,

66
00:03:44.630 --> 00:03:47.900
we get the list of parameters, and we can print the name and the

67
00:03:47.900 --> 00:03:51.040
type of the parameter for each of the declared methods that we

68
00:03:51.040 --> 00:03:54.570
have. And, again, if I run this code, we'll again find the three

69
00:03:54.570 --> 00:03:56.690
methods of drive for two methods.

70
00:03:56.690 --> 00:04:01.680
One was a char and one was an int, and selectDrive at a single parameter, and

71
00:04:01.680 --> 00:04:06.320
that's just a char. So similarly to methods and constructors, we can get the

72
00:04:06.320 --> 00:04:12.760
fields of a type as well. So I can say Field fields = cls.getFields. And,

73
00:04:12.760 --> 00:04:16.070
again, we have getFields and we have getDeclaredFields. So in this case,

74
00:04:16.070 --> 00:04:21.290
we'll use getDeclaredFields. And, again, from here, if we put a loop in, so

75
00:04:21.290 --> 00:04:24.260
for field : fields.

76
00:04:24.260 --> 00:04:27.610
So here we can do a printout of the name of the field, and we can also get

77
00:04:27.610 --> 00:04:31.800
the type of the field as well. So we can say field.getType. And, again, if we

78
00:04:31.800 --> 00:04:34.740
separate these two, so we do %s %s, and in fact,

79
00:04:34.740 --> 00:04:37.490
let's put the second one in brackets to show the type, and add

80
00:04:37.490 --> 00:04:40.240
a new line here, and then run this code.

81
00:04:40.240 --> 00:04:42.940
We print the fields from the field called speed that's named

82
00:04:42.940 --> 00:04:46.850
a field called driveType that's a char. If I go and look

83
00:04:46.850 --> 00:04:51.910
inside my Car class, sure enough, we have int and char inside here.

84
00:04:51.910 --> 00:04:56.730
So what about arrays? Here in the Car class, I've added a people field,

85
00:04:56.730 --> 00:04:58.800
which is an array of String.

86
00:04:58.800 --> 00:05:01.850
If I go back into Main.Java, we can grab a reference in

87
00:05:01.850 --> 00:05:05.300
that field, so I can say class.getField.

88
00:05:05.300 --> 00:05:12.150
I can say Field field = cls.getDeclaredField and pass in the name of the field,

89
00:05:12.150 --> 00:05:13.090
which is people.

90
00:05:13.090 --> 00:05:14.280
Once I have that,

91
00:05:14.280 --> 00:05:16.970
I can get the type of the class, so I can say Type t =

92
00:05:16.970 --> 00:05:22.130
field.getType. I can then print out the type of the field,

93
00:05:22.130 --> 00:05:24.630
so we can say t.getTypeName,

94
00:05:24.630 --> 00:05:27.140
print out the type of this field. If I run this code,

95
00:05:27.140 --> 00:05:30.460
this prints out as java.lang.String array, so we know

96
00:05:30.460 --> 00:05:34.620
that the field is a string array.

97
00:05:34.620 --> 00:05:37.730
So, of course, we don't want to look at the string representation of

98
00:05:37.730 --> 00:05:42.310
the type to discover whether this thing is an array. GetType actually

99
00:05:42.310 --> 00:05:46.450
returns a type Class. So, as well as printing out the name of the type

100
00:05:46.450 --> 00:05:50.340
using t.getType, we could also print out another property of this

101
00:05:50.340 --> 00:05:53.960
thing called isArray. And from this, we can see whether or not we have

102
00:05:53.960 --> 00:05:54.470
an array.

103
00:05:54.470 --> 00:05:58.600
So now we get java.lang.String array, and we also get true.

104
00:05:58.600 --> 00:06:02.470
So isArray for this particular field tells us that we have an

105
00:06:02.470 --> 00:06:09.000
array value. And, again, a little later, we'll see how we can set the value of the array.

