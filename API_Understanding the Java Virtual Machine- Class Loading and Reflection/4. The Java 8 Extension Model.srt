1
00:00:03,040 --> 00:00:06,450
Java class loaders support the delegation model when it comes to loading

2
00:00:06,450 --> 00:00:11,550
classes. Typically in an application, there are more than one class loader. For

3
00:00:11,550 --> 00:00:14,680
example, there's the class loader that needs load extension classes and the

4
00:00:14,680 --> 00:00:18,470
class loader that needs to load the base classes.

5
00:00:18,470 --> 00:00:22,360
And these class loaders typically exist as a hierarchy. And each

6
00:00:22,360 --> 00:00:25,680
of these class loaders has a parent apart from the base class

7
00:00:25,680 --> 00:00:29,590
class loader. That's the top of this hierarchy. And a class loader

8
00:00:29,590 --> 00:00:31,940
may delegate to its parents.

9
00:00:31,940 --> 00:00:33,390
Now we say may.

10
00:00:33,390 --> 00:00:33,770
Typically,

11
00:00:33,770 --> 00:00:37,230
this is the behavior. And if you use the built‑in class loaders and

12
00:00:37,230 --> 00:00:39,450
if you derive from the built‑in class loaders,

13
00:00:39,450 --> 00:00:41,160
this is the behavior you will get.

14
00:00:41,160 --> 00:00:41,650
However,

15
00:00:41,650 --> 00:00:43,410
there's nothing to say that when you write your own

16
00:00:43,410 --> 00:00:45,490
class loader that you have to delegate.

17
00:00:45,490 --> 00:00:49,240
You can do anything you want to in your own class loader.

18
00:00:49,240 --> 00:00:52,370
When a class loader delegates to its parents, then that

19
00:00:52,370 --> 00:00:54,780
parent may load the class. And again,

20
00:00:54,780 --> 00:00:58,200
the parent does not have to load the class. There are some rules

21
00:00:58,200 --> 00:01:02,010
however. If a class loader loads a particular class once,

22
00:01:02,010 --> 00:01:04,120
it must load it in the future.

23
00:01:04,120 --> 00:01:04,980
And typically,

24
00:01:04,980 --> 00:01:08,130
class loaders load a class once. So once the class has been loaded,

25
00:01:08,130 --> 00:01:11,550
it's cached. And the same instance of that class is returned

26
00:01:11,550 --> 00:01:14,590
when it's asked to be loaded a second time.

27
00:01:14,590 --> 00:01:16,960
And again, if you use the built‑in class loaders,

28
00:01:16,960 --> 00:01:18,890
this is the behavior you'll get.

29
00:01:18,890 --> 00:01:23,910
So, for example, if you load a very basic Java console application,

30
00:01:23,910 --> 00:01:26,330
you'll end up with three class loaders.

31
00:01:26,330 --> 00:01:29,370
You'll end up with the application class loader whose job it is to load

32
00:01:29,370 --> 00:01:33,880
your classes and any classes loaded from the local classpath site,

33
00:01:33,880 --> 00:01:37,590
you'll end up with the extension class loader that we've seen already

34
00:01:37,590 --> 00:01:40,580
loads from the extension directory, and you'll end up with something

35
00:01:40,580 --> 00:01:42,640
called a bootstrap class loader.

36
00:01:42,640 --> 00:01:47,270
Now the bootstrap class loader in the Oracle Java VM is written in C,

37
00:01:47,270 --> 00:01:49,060
so it's not actually written in Java.

38
00:01:49,060 --> 00:01:50,830
The other class loaders, the extension class loader

39
00:01:50,830 --> 00:01:52,580
and the application class loader, however,

40
00:01:52,580 --> 00:01:56,640
are written in Java. And typically what happens is this.

41
00:01:56,640 --> 00:02:00,630
The virtual machine asks the application class loader to load a

42
00:02:00,630 --> 00:02:03,930
class, and the application class loader will delegate.

43
00:02:03,930 --> 00:02:05,840
They will delegate to the extension class loader,

44
00:02:05,840 --> 00:02:08,780
which will delegate to the bootstrap class loader.

45
00:02:08,780 --> 00:02:09,830
At this point,

46
00:02:09,830 --> 00:02:12,400
the bootstrap class loader may load the class. So if it's

47
00:02:12,400 --> 00:02:16,530
java.lang.String, the class will find the String class, load it,

48
00:02:16,530 --> 00:02:19,440
and return that data back down the delegation.

49
00:02:19,440 --> 00:02:21,810
However, it may not be able to find the class,

50
00:02:21,810 --> 00:02:25,920
in which case that load will fail and come back to the extension class loader.

51
00:02:25,920 --> 00:02:28,080
And the extension class loader will know try and load the class

52
00:02:28,080 --> 00:02:31,200
itself. So it will look in its set of JAR files and its set the

53
00:02:31,200 --> 00:02:32,720
directories to find the class.

54
00:02:32,720 --> 00:02:35,350
And again, if it finds the class, it will load it.

55
00:02:35,350 --> 00:02:36,050
If not,

56
00:02:36,050 --> 00:02:38,790
it will fail. And that gets passed back to the application

57
00:02:38,790 --> 00:02:41,460
class loader. And the application class loader at this

58
00:02:41,460 --> 00:02:43,190
point again has the same option.

59
00:02:43,190 --> 00:02:45,620
It will try and load the class from its set of directories,

60
00:02:45,620 --> 00:02:48,450
its set of JAR files and, if it succeeds,

61
00:02:48,450 --> 00:02:54,640
loads the class, or it can fail. We'll get our famous NoClassDefFoundError.

62
00:02:54,640 --> 00:02:59,120
Each time one of these class loaders is asked to load a class, it will,

63
00:02:59,120 --> 00:02:59,950
first of all,

64
00:02:59,950 --> 00:03:03,900
check to see if it has previously loaded that class and, if it has, just

65
00:03:03,900 --> 00:03:07,480
return the same class from the cache. So in this case,

66
00:03:07,480 --> 00:03:11,390
when we load the class up, we only ever get one instance of the class in memory.

67
00:03:11,390 --> 00:03:14,870
So the class type for the class is essentially a singleton, or at

68
00:03:14,870 --> 00:03:21,000
least you can think of it that way. And we can write code to see this delegation, and we'll do that now.

