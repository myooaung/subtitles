1
00:00:03,040 --> 00:00:06,620
So we've just done a fairly basic introduction to class loading.

2
00:00:06,620 --> 00:00:08,150
So we've seen that we can set, for example,

3
00:00:08,150 --> 00:00:11,070
a global class path, and we've seen the biggest set a class path

4
00:00:11,070 --> 00:00:15,030
when an application runs. In the rest of this class, we'll cover

5
00:00:15,030 --> 00:00:16,940
some more classloading basics.

6
00:00:16,940 --> 00:00:19,970
So we'll talk about the Bootstrap class loader and the extension class

7
00:00:19,970 --> 00:00:24,420
loader. We'll talk about classloading delegation and how we can see

8
00:00:24,420 --> 00:00:27,140
the delegation within the class loaders.

9
00:00:27,140 --> 00:00:29,440
We'll take a look at how we can write our own class loader

10
00:00:29,440 --> 00:00:31,780
and we can use that to load classes, for example,

11
00:00:31,780 --> 00:00:33,740
from a database.

12
00:00:33,740 --> 00:00:36,430
We'll see how we can use classloading delegation to our

13
00:00:36,430 --> 00:00:39,640
benefit so we can isolate class loaders.

14
00:00:39,640 --> 00:00:43,070
Use this to do things like hot deploying Java code.

15
00:00:43,070 --> 00:00:46,700
So you're running application and you want to update the application while

16
00:00:46,700 --> 00:00:50,600
it's still running, we can do that by using class loaders.

17
00:00:50,600 --> 00:00:53,030
This is the sort of thing that Java web applications do

18
00:00:53,030 --> 00:00:54,480
when you want to deploy a new service,

19
00:00:54,480 --> 00:00:58,950
for example. And finally in the class, we'll take a look at Java

20
00:00:58,950 --> 00:01:02,020
reflection and we'll see how Java reflection works.

21
00:01:02,020 --> 00:01:05,160
And then we'll use reflection to implement a simple IoC container,

22
00:01:05,160 --> 00:01:09,060
an inversion of control container, to get a really good handle on

23
00:01:09,060 --> 00:01:16,000
how we can use reflection to create instances of types and to load those types at runtime.

