1
00:00:04,570 --> 00:00:05,970
Hello and welcome.

2
00:00:05,980 --> 00:00:09,220
In this lecture we have got a client on the left server on the right.

3
00:00:09,250 --> 00:00:14,950
What I'm going to be doing is making it so that when I have my clients selected and I'm moving my arrow

4
00:00:14,950 --> 00:00:22,270
keys that the movement will get propagated up to the server and change the state on the server as you

5
00:00:22,330 --> 00:00:28,870
are seeing here the car that is in control that is moving around in the distance is actually the client

6
00:00:28,900 --> 00:00:29,710
on the left.

7
00:00:29,770 --> 00:00:34,960
Obviously there is a problem the client on the left is not being updated but we'll be dealing with that

8
00:00:34,960 --> 00:00:35,470
later on.

9
00:00:35,470 --> 00:00:41,300
For now we are interested in making sure that the movement gets propagated up to the state on the server.

10
00:00:41,530 --> 00:00:43,810
Let's dive in and see how that's done.

11
00:00:44,800 --> 00:00:48,190
Okay so it works great in single player.

12
00:00:48,190 --> 00:00:53,890
How about in multiplayer if we go and select from the dropdown that we have a number of two players

13
00:00:54,370 --> 00:00:58,640
and we go aimed at who are launching a new editor window.

14
00:00:58,690 --> 00:01:03,390
So we get to game side by side and I'm going to have to bring them all onto the same screen.

15
00:01:03,420 --> 00:01:04,700
So here's one.

16
00:01:04,750 --> 00:01:11,340
And here comes a second I'll come on again and I'm going to put them side by side like so.

17
00:01:11,650 --> 00:01:11,950
Okay.

18
00:01:11,950 --> 00:01:14,780
So I believe the one on the left is at the server.

19
00:01:15,700 --> 00:01:18,570
No it is yes it is the server.

20
00:01:20,140 --> 00:01:21,280
Which one do I have selected.

21
00:01:21,280 --> 00:01:23,040
No I have the one on the right selected.

22
00:01:23,470 --> 00:01:24,190
Yes that's right.

23
00:01:24,190 --> 00:01:30,220
And that one is the server because it's moving in both now and in fact it says off the top.

24
00:01:30,250 --> 00:01:33,320
And if I go to the client and try and move.

25
00:01:35,270 --> 00:01:39,350
You will notice that I'm moving on the client but I can't.

26
00:01:39,350 --> 00:01:42,100
The car isn't showing up at all on the server.

27
00:01:42,440 --> 00:01:46,530
If I switch back over to the server and try and rotate round to look at where the car is.

28
00:01:46,670 --> 00:01:50,780
As far as the servers concerned it's still in the same place as it started.

29
00:01:50,780 --> 00:01:56,630
Now the reason for this is the client is receiving input from me from my mouse and keyboard but it is

30
00:01:56,630 --> 00:02:04,010
not its just changing its own state and that state does not get propagated up to the server.

31
00:02:04,100 --> 00:02:09,250
The state from the server get its propagated down to the client but not the other way round.

32
00:02:09,260 --> 00:02:15,410
So let's revise how this all works and how we might go about actually getting it so that we can change

33
00:02:15,410 --> 00:02:17,230
state from the client.

34
00:02:17,300 --> 00:02:22,880
So if you'll recall in a multiplayer game obviously we have multiple clients but we also have a server

35
00:02:23,180 --> 00:02:26,510
in the middle that communicates between them all.

36
00:02:26,510 --> 00:02:32,570
Now on this server it's authoritative which means that it has the canonical view of the state of the

37
00:02:32,570 --> 00:02:33,440
game.

38
00:02:33,500 --> 00:02:38,000
What it says goes and how does it communicate this state to all the clients.

39
00:02:38,000 --> 00:02:43,730
Well it sends messages to the clients and the clients keep a copy of the state and when the state changes

40
00:02:44,030 --> 00:02:49,820
the server sends out state change messages telling the clients what they should update what they should

41
00:02:49,820 --> 00:02:53,220
change on their version of the state.

42
00:02:53,240 --> 00:02:58,670
So this is how it works this is how state gets propagated through all of the different clients connected

43
00:02:59,150 --> 00:03:05,840
and that's why on our clients we're seeing the server move because the server is updating its own version

44
00:03:05,870 --> 00:03:11,320
of the car based on the user input and it is sending out to all the clients.

45
00:03:11,310 --> 00:03:14,620
Now this only happens because we've got a client that's also the server.

46
00:03:14,930 --> 00:03:21,590
But you'll also remember that when we had our puzzle platforms game there we were modifying the position

47
00:03:21,590 --> 00:03:26,420
of the platform only on the server and the state was getting propagated out to all the clients.

48
00:03:26,420 --> 00:03:31,580
What happens when we want to change the state on one of the clients from user input for example.

49
00:03:31,750 --> 00:03:38,330
Well what we can do is we can actually send a message up to the server and ask the server could you

50
00:03:38,330 --> 00:03:43,160
please change the state for me and then if the server agrees it will change the state and that state

51
00:03:43,160 --> 00:03:45,650
will get propagated to all the clients.

52
00:03:45,650 --> 00:03:49,280
So that's what we intend to do that's what we're trying to achieve.

53
00:03:49,430 --> 00:03:53,860
And the way we achieve this in unreel is using something called arpey see.

54
00:03:53,870 --> 00:03:58,220
So let's get an introduction to our Peacey server functions.

55
00:03:58,220 --> 00:04:00,890
I've got this documentation page linked for you.

56
00:04:00,890 --> 00:04:04,850
We're not going to be using all the different types of our Peacey but it does give you a quick overview

57
00:04:04,850 --> 00:04:06,170
of what our policy is.

58
00:04:06,230 --> 00:04:13,400
It says that our P C are functions that basically are called remote procedure calls and they do what

59
00:04:13,400 --> 00:04:14,590
they say on the tin.

60
00:04:14,660 --> 00:04:19,140
When you call them locally they get executed on a different machine.

61
00:04:19,160 --> 00:04:24,710
That's why they're called remote procedure calls and the particular class that we're interested in is

62
00:04:24,860 --> 00:04:31,330
mentioned here in using our species section and the one we're looking at is the u function server.

63
00:04:31,370 --> 00:04:33,630
So a server Peacey function.

64
00:04:33,650 --> 00:04:39,140
Now what happens with a server ipc function as you call it on a client and when you call it on a client

65
00:04:39,710 --> 00:04:45,110
the body of that RBC function gets executed on the server.

66
00:04:45,110 --> 00:04:49,280
So there's lots of other types of IP seen will be digging into those at a later date.

67
00:04:49,280 --> 00:04:51,730
They do very similar things you could probably work it out for yourself.

68
00:04:51,860 --> 00:04:57,710
But the most important one by far is the server arpey C function because it's the only way we can change

69
00:04:57,710 --> 00:05:00,260
stay on the server from a client.

70
00:05:00,290 --> 00:05:03,550
So how do we go ahead and implement one of these.

71
00:05:03,750 --> 00:05:10,100
Well we'll go over in to our head of file first of all for the go cart and I'm just going to change

72
00:05:10,220 --> 00:05:18,740
the MOVE FORWARD TO BE a message to be something that we call on a client and then gets executed on

73
00:05:18,740 --> 00:05:19,260
the server.

74
00:05:19,270 --> 00:05:25,250
To do this we turn it into a u function it doesn't have to become public to do this and we give it the

75
00:05:25,250 --> 00:05:26,500
key word server.

76
00:05:26,510 --> 00:05:29,160
That means that it's a server arpey function.

77
00:05:29,720 --> 00:05:37,010
And what we also tend to do as a convention is we prefix with the word server underscore so we get server

78
00:05:37,070 --> 00:05:38,540
underscore move forward.

79
00:05:38,540 --> 00:05:44,300
This now means that when I'm calling it it's very clear to me as a programmer that this isn't going

80
00:05:44,300 --> 00:05:47,300
to be executed here it's going to be executed on the server.

81
00:05:47,600 --> 00:05:49,400
Okay so that's one thing.

82
00:05:49,400 --> 00:05:56,870
We've got a server move forward now there is one caveat that by default these functions are what's known

83
00:05:56,870 --> 00:05:58,570
as not reliable.

84
00:05:58,670 --> 00:06:02,190
And if you go and scroll down the page you'll see there's a section on reliability.

85
00:06:02,330 --> 00:06:06,830
And what this means is that when you call it there's no guarantee that it's actually going to execute

86
00:06:06,830 --> 00:06:07,540
on the server.

87
00:06:07,670 --> 00:06:10,450
Now obviously for our move forward function that's no good.

88
00:06:10,460 --> 00:06:15,080
You don't want to be holding down the excelerate key and it's not accelerating you want it to always

89
00:06:15,080 --> 00:06:15,670
get there.

90
00:06:15,800 --> 00:06:22,200
So what you have to do is as well as the server key word you have to add the reliable keyword to.

91
00:06:22,610 --> 00:06:25,090
Okay that's all fine.

92
00:06:25,340 --> 00:06:26,240
I'm happy with that.

93
00:06:26,240 --> 00:06:29,400
We need to add reliable it's a strange default but we can do it.

94
00:06:29,420 --> 00:06:33,210
Let's go ahead and bill and see what the first errors we get are.

95
00:06:33,260 --> 00:06:34,630
So as Quincy went.

96
00:06:34,860 --> 00:06:36,090
Build fails.

97
00:06:36,090 --> 00:06:44,190
The first error in our output log is that the server our P.S. is missing be with a validation keyword

98
00:06:44,250 --> 00:06:45,120
in the you property.

99
00:06:45,120 --> 00:06:49,810
Now this is a requirement for security and we'll talk about that in a little bit.

100
00:06:49,830 --> 00:06:55,610
But for now we can just add that key word to get further into the build and see if it covers any höller

101
00:06:55,620 --> 00:06:56,300
Errors.

102
00:06:57,470 --> 00:07:00,530
So now we see some different errors in the output log.

103
00:07:00,530 --> 00:07:04,250
Again look at our output log you will see that.

104
00:07:07,290 --> 00:07:07,720
Okay.

105
00:07:07,730 --> 00:07:13,070
Move forward is not a member of a go kart because it changed the name.

106
00:07:13,070 --> 00:07:16,410
So let's go over and change the name in the C++.

107
00:07:16,430 --> 00:07:20,880
And also in the bind axis changer in the bind axis two.

108
00:07:21,200 --> 00:07:26,990
And this time we get a rather different error and a hopefully more informative one but also slightly

109
00:07:26,990 --> 00:07:28,280
harder to read so bear with me.

110
00:07:28,280 --> 00:07:30,310
Let's pick it apart a little bit at a time.

111
00:07:30,350 --> 00:07:37,820
So the first thing it's saying is that we can't you define Servat move forward because it's already

112
00:07:37,820 --> 00:07:38,800
defined.

113
00:07:39,020 --> 00:07:40,630
Okay that's a bit strange.

114
00:07:40,640 --> 00:07:42,900
Maybe the next errors will elucidate.

115
00:07:43,220 --> 00:07:48,590
Then it's saying unresolved external symbol server move forward underscore validate.

116
00:07:48,620 --> 00:07:53,780
So that's saying it can't find something called server move forward underscore validate and then again

117
00:07:53,810 --> 00:07:58,490
we've got unresolved symbol server move forward implementation.

118
00:07:58,550 --> 00:08:02,220
Now that's giving us some idea of what's going on here.

119
00:08:02,300 --> 00:08:09,530
What server underscore move forward is is just a stub that we call on the clients in order to execute

120
00:08:09,530 --> 00:08:10,510
something on the server.

121
00:08:10,520 --> 00:08:17,150
So we can't actually implement that but we can implement server move forward underscore implementation.

122
00:08:17,150 --> 00:08:21,190
So let's copy that and make sure we are implementing that.

123
00:08:21,230 --> 00:08:22,970
But what about the second error.

124
00:08:22,970 --> 00:08:27,110
What about this server move forward underscore validate.

125
00:08:27,170 --> 00:08:32,090
You've also noticed that the return type for that server move forward unschool validate if you can read

126
00:08:32,090 --> 00:08:37,110
through these rather terse looking logs is that it is a boolean.

127
00:08:37,160 --> 00:08:43,220
So we'll have a little look into what validation actually means shall we because about time we've been

128
00:08:43,220 --> 00:08:47,480
able to see that here this server move forward underscore implantation that's what gets called on the

129
00:08:47,480 --> 00:08:53,660
server when we call on the client server move forward which we're doing in our bind access.

130
00:08:53,660 --> 00:08:54,010
Okay.

131
00:08:54,050 --> 00:08:59,920
So let's go over and have a little bit of a look at what this validation thing is anyway.

132
00:09:00,170 --> 00:09:05,380
So validation is all about cheap protection it's about stopping the client from being able to cheat.

133
00:09:05,390 --> 00:09:10,760
Why do we need to stop the client from being able to cheat because basically a client can be modded.

134
00:09:10,760 --> 00:09:11,940
It can be hacked.

135
00:09:11,990 --> 00:09:17,630
We can't trust anything that's coming from the client and we can only allow them to play to the best

136
00:09:17,630 --> 00:09:18,350
of their ability.

137
00:09:18,350 --> 00:09:25,220
So what we expose them as serve our policy needs to be really locked down and it needs to stop them

138
00:09:25,220 --> 00:09:28,880
from being able to cheat so functions like set throttle are fine.

139
00:09:29,030 --> 00:09:31,490
You can't cheat by setting the throttle.

140
00:09:31,520 --> 00:09:33,530
That's just how you play the game.

141
00:09:33,620 --> 00:09:36,010
You can't cheat by jumping you.

142
00:09:36,020 --> 00:09:43,400
These are very high level actions which you are allowed to perform even in a cheating game and an attack

143
00:09:43,520 --> 00:09:47,700
no matter how you mod this these actions are validated.

144
00:09:47,780 --> 00:09:53,090
Well basically we'll update the server's state and they'll only update the service date in the correct

145
00:09:53,090 --> 00:09:59,780
way so you can't cheat but functions that are a bad idea are things like set location say enemy health

146
00:10:00,020 --> 00:10:01,040
and kill enemy.

147
00:10:01,160 --> 00:10:07,100
This means that a modded client could try and move much faster than it would be allowed to it could

148
00:10:07,100 --> 00:10:12,530
just teleport somewhere randomly in a level with that location completely circumventing any of the game

149
00:10:12,530 --> 00:10:18,440
logic you could have it set the enemy health to zero because that again would circumvent any of the

150
00:10:18,440 --> 00:10:20,380
damage that the player is actually allowed to do.

151
00:10:20,380 --> 00:10:21,750
So these are bad ideas.

152
00:10:21,770 --> 00:10:25,830
We need to be going for functions first of all that are like the ones on the left.

153
00:10:25,940 --> 00:10:32,060
But beyond this we need to validate though the input to those functions so that the player cannot cheat

154
00:10:32,390 --> 00:10:36,090
so that the input to these is a valid set of inputs.

155
00:10:36,290 --> 00:10:37,960
That's what validation means.

156
00:10:37,970 --> 00:10:40,000
So how do we create a validate function.

157
00:10:40,010 --> 00:10:43,230
Well we can go ahead and copy as a starting point.

158
00:10:43,370 --> 00:10:48,880
The move forward implementation we can change the word implementation over to validate.

159
00:10:48,890 --> 00:10:55,470
And that's here in our logs output error logs I'm going to copy and paste that and rename it validate

160
00:10:55,790 --> 00:10:58,180
and remember that the return value now is Boolean.

161
00:10:58,190 --> 00:11:05,420
Basically whether or not the input to this is valid or not and then we need to return a boolean from

162
00:11:05,420 --> 00:11:05,970
here.

163
00:11:06,230 --> 00:11:11,030
So by default we'll just say that this is a fairly good level of abstraction.

164
00:11:11,050 --> 00:11:16,220
This move forward won't allow us to cheat so we're going to validate to true and that's often the default

165
00:11:16,220 --> 00:11:17,590
that you're going to be going for.

166
00:11:17,600 --> 00:11:23,450
It's going to be saying well any valid any input to this function from the client is a valid input and

167
00:11:23,450 --> 00:11:26,400
they can apply it to the game we can apply it to the game state.

168
00:11:26,480 --> 00:11:27,860
So it will return true.

169
00:11:28,160 --> 00:11:28,590
Okay.

170
00:11:28,640 --> 00:11:34,940
So that is validation Let's go ahead and build and we'll see how it actually plays with and move forward

171
00:11:34,970 --> 00:11:36,560
being replicated.

172
00:11:36,560 --> 00:11:42,070
So I'm going to go over into one real going to go ahead and play with our client and server.

173
00:11:42,340 --> 00:11:47,690
It does appear that one of the two hasn't spawned Let's try playing again sometimes they don't spawn

174
00:11:48,050 --> 00:11:53,080
because they overlap with each other or they overlap with the ground or something like that.

175
00:11:53,360 --> 00:11:53,680
Okay.

176
00:11:53,690 --> 00:12:00,830
So we've got a client we've got a server let's go into our client put it over on the left and server

177
00:12:00,830 --> 00:12:03,790
on the right and in the client.

178
00:12:03,800 --> 00:12:05,510
That's how our clients select it.

179
00:12:05,510 --> 00:12:06,460
I'm going to try and move.

180
00:12:06,780 --> 00:12:12,930
You'll notice that my client is no longer moving but the car on the server is moving which means that

181
00:12:12,930 --> 00:12:15,630
we have successfully updated the state on the server.

182
00:12:15,690 --> 00:12:20,220
Don't worry that we aren't moving on the client we're going to deal with that in the next lecture.

183
00:12:20,520 --> 00:12:20,850
Okay.

184
00:12:20,850 --> 00:12:25,280
So we successfully updated slate on the server from input on the client.

185
00:12:25,290 --> 00:12:26,040
What's next.

186
00:12:26,040 --> 00:12:31,180
Well we want to make sure that we have validation of our input and that the player is unable to cheat.

187
00:12:31,320 --> 00:12:35,850
And that's going to be your challenge to cheat protect the game you're going to need to implement steering

188
00:12:35,880 --> 00:12:39,780
I've left as a challenge for you as well because I've only done moved forward.

189
00:12:39,780 --> 00:12:40,850
I want you to implement.

190
00:12:40,920 --> 00:12:43,350
Move left and right as well essentially.

191
00:12:43,350 --> 00:12:49,800
And I then want you to think of how the client might cheat using these methods and what kind of validation

192
00:12:49,800 --> 00:12:51,690
you can put in place to prevent it.

193
00:12:51,900 --> 00:12:53,370
Implement the validation.

194
00:12:53,370 --> 00:12:57,580
And what happens if the validation fails what happens if the client actually cheats.

195
00:12:57,600 --> 00:13:02,640
Maybe you can test this by putting in an overly stringent validation condition pause a video and have

196
00:13:02,640 --> 00:13:03,160
a go.

197
00:13:04,680 --> 00:13:05,610
Okay welcome back.

198
00:13:05,610 --> 00:13:07,980
So first things first let's implement that steering.

199
00:13:08,010 --> 00:13:09,510
It's very very straightforward.

200
00:13:09,510 --> 00:13:11,110
Pretty much done it already.

201
00:13:11,190 --> 00:13:18,330
In fact I am going to go ahead and copy these two functions from our server move forward because all

202
00:13:18,330 --> 00:13:21,270
I need to change actually is the word move forward to move.

203
00:13:21,270 --> 00:13:22,220
Right.

204
00:13:22,320 --> 00:13:29,970
So I'm just going to change that and I just need it also change the body hopes of over overstepped my

205
00:13:29,970 --> 00:13:31,650
mark and removed the server.

206
00:13:31,710 --> 00:13:36,660
So we've got server me right server move right implementations have move right validation yet that looks

207
00:13:36,660 --> 00:13:42,180
fine and then we want to update the body of server move right implementation to change the steering

208
00:13:42,180 --> 00:13:45,710
throw and we can get rid of the old server the old move.

209
00:13:45,710 --> 00:13:46,270
Right.

210
00:13:47,040 --> 00:13:49,050
And then we need to update the head of file.

211
00:13:49,040 --> 00:13:55,920
We need to put the same new function server reliable with validation in front of move right and we need

212
00:13:55,920 --> 00:14:01,860
to put the prefix of underscore or server underscore in front of me right then we can copy that and

213
00:14:01,860 --> 00:14:08,350
make sure that that is what's being called by our bind axis function and we can go ahead and build that

214
00:14:08,400 --> 00:14:10,110
should work just fine.

215
00:14:10,110 --> 00:14:13,090
I'm pretty confident it's going to work okay.

216
00:14:13,140 --> 00:14:15,290
So that is going to work.

217
00:14:15,300 --> 00:14:22,290
And what we want to do now is make sure that we have validated the input coming in to move forward and

218
00:14:22,290 --> 00:14:23,000
move right.

219
00:14:23,190 --> 00:14:28,510
What could be invalid input have a little think about that if you haven't thought about it already.

220
00:14:28,650 --> 00:14:30,390
What could we used to cheat.

221
00:14:30,390 --> 00:14:39,030
Well for example if we had a value that was greater than 1 or less than minus 1 that would be cheating

222
00:14:39,150 --> 00:14:43,330
because we would be able to basically have more throttle than is allowed.

223
00:14:43,350 --> 00:14:46,870
Remember arthropod values are between minus 1 and positive what.

224
00:14:47,100 --> 00:14:54,780
So one way that I can prevent this is by creating a expression that is only true when the values are

225
00:14:54,780 --> 00:15:01,890
between minus 1 and positive 1 and the way I'm going to do this is with an F maths amps of the value

226
00:15:02,460 --> 00:15:05,100
which makes just gets rid of the minus sign.

227
00:15:05,100 --> 00:15:06,980
So if you got a minus one it will be 1.

228
00:15:07,020 --> 00:15:11,700
He got positive 1 it will be 1 and then were going to check that this absolute value is less than or

229
00:15:11,730 --> 00:15:13,250
equal to 1.

230
00:15:14,120 --> 00:15:19,620
That's basically a short way of saying that it's less than one but greater than minus one.

231
00:15:20,000 --> 00:15:24,470
So I'm going to take this and I'm going to do exactly the same thing for and move right validation.

232
00:15:24,500 --> 00:15:27,100
Go ahead and build that as well.

233
00:15:28,320 --> 00:15:34,770
But as I said this is going to work because we are only ever calling it where the values between minus

234
00:15:34,770 --> 00:15:35,990
1 and 1.

235
00:15:36,030 --> 00:15:40,850
So what happens if we call it with something that makes this expression false.

236
00:15:40,860 --> 00:15:44,160
Well to do that very simply we do have an error here.

237
00:15:44,160 --> 00:15:45,850
Let's find out what the error is.

238
00:15:45,850 --> 00:15:48,930
I know double colon after f man.

239
00:15:49,010 --> 00:15:49,950
You probably caught that.

240
00:15:49,950 --> 00:15:51,460
Let's go ahead and build it again.

241
00:15:51,500 --> 00:15:52,850
And now built correctly.

242
00:15:52,860 --> 00:16:00,600
So what we want to do is change the expression just temporarily so that it will be false when we put

243
00:16:00,690 --> 00:16:02,480
our full furrow on.

244
00:16:02,610 --> 00:16:07,070
So we're going to do less than or equal to point five.

245
00:16:07,350 --> 00:16:09,530
And we are going to build again.

246
00:16:09,660 --> 00:16:16,200
And what should happen now is when we're moving forward everything will be valid when we move full lock

247
00:16:16,290 --> 00:16:17,710
left and right.

248
00:16:17,850 --> 00:16:23,590
Now that statement should fail and we'll be able to see what happens when our validation fails.

249
00:16:23,610 --> 00:16:26,750
So let's hop over into one real with an newly built game.

250
00:16:26,760 --> 00:16:32,800
Go ahead and play with these two side by side if I can get the two cars to spawn.

251
00:16:33,020 --> 00:16:35,830
We have to do something about this collision error won't be.

252
00:16:36,030 --> 00:16:38,810
Okay so let's get them side by side first of all.

253
00:16:38,850 --> 00:16:45,120
So I'm going to have a server on the left and the clock on the right and the client on the left and

254
00:16:45,120 --> 00:16:46,120
go into the client.

255
00:16:46,140 --> 00:16:49,370
And we should see that he moves forward and backwards just fine.

256
00:16:50,270 --> 00:16:55,670
But as soon as I try and steer I disappear and I end up on my own in the game and if we go and have

257
00:16:55,670 --> 00:17:03,050
a look at the logs that happened at that time you can see that there was first of all a get last a fail

258
00:17:03,050 --> 00:17:04,890
reason and server move right.

259
00:17:04,940 --> 00:17:10,370
Validate and then it says closing the connection and you can see that basically the connection is has

260
00:17:10,370 --> 00:17:15,320
been closed down by the server it said nope you're a cheating so and so I'm not going to play with you

261
00:17:15,620 --> 00:17:16,940
and closed the connection.

262
00:17:16,940 --> 00:17:19,070
So that's what happens when validation fails.

263
00:17:19,070 --> 00:17:23,660
So before we go on let's make sure that validate is going to succeed so I'm going to change that over

264
00:17:23,660 --> 00:17:29,660
to one again like so and build and we can be fairly certain that that is going to work.

265
00:17:29,660 --> 00:17:34,170
Now obviously it's not replicating back to the kleiber we're going to deal with that in the next lecture.

266
00:17:34,190 --> 00:17:35,360
And I'll see you there.
