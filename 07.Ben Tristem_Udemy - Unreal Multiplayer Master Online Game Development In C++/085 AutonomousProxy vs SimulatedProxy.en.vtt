WEBVTT
1
00:00:04.850 --> 00:00:07.840
Hello and welcome in this lecture we are going to be learning.

2
00:00:07.850 --> 00:00:12.680
What on earth is an autonomous proxy's you can see there is a label of above two of my cars which is

3
00:00:12.680 --> 00:00:14.200
saying autonomous proxy.

4
00:00:14.220 --> 00:00:19.940
Well then what authority roles are what simulated proxies are how were going to use this to allow us

5
00:00:19.970 --> 00:00:27.780
to move our car locally on the client and make sure that this gets updated on the server as well as

6
00:00:27.780 --> 00:00:31.030
he can see I'm moving on my clients it's moving on the server too.

7
00:00:31.130 --> 00:00:34.020
And we're going to figure out how we can make this happen.

8
00:00:34.040 --> 00:00:37.670
It's going to be learning what this simulated proxy thing is that's happening on Client Number two down

9
00:00:37.940 --> 00:00:39.330
on the bottom left.

10
00:00:39.350 --> 00:00:44.480
So let's dive in and start seeing what these words are all about.

11
00:00:45.850 --> 00:00:52.290
So as we saw in the last lecture we have a bit of a strange behaviour and bug if I go and get our two

12
00:00:52.300 --> 00:00:58.060
clients next to each other need to first of all make sure they both spawn and I will get a client and

13
00:00:58.060 --> 00:01:04.810
I have got a server and we noticed that with Client Number one as I try and drive it it is only driving

14
00:01:04.810 --> 00:01:09.640
on the server and it's not driving at all here on the client's own screen.

15
00:01:09.640 --> 00:01:15.280
Now to understand why this is happening we need to understand a little bit more about actor roles an

16
00:01:15.280 --> 00:01:21.220
actor role is quite simply an extension of what we've seen before with authority.

17
00:01:21.240 --> 00:01:23.250
But it goes a little bit beyond that.

18
00:01:23.500 --> 00:01:24.470
So let's have a look.

19
00:01:24.550 --> 00:01:29.290
There is a whole page on this linked in your resources about actor roles and remote roles and if you're

20
00:01:29.290 --> 00:01:34.140
really interested you can go ahead and read that whole page and it will be very informative to you.

21
00:01:34.330 --> 00:01:38.470
But let's just overview it from a more visual point of view.

22
00:01:38.710 --> 00:01:48.400
So here we've got a diagram that shows in the green box the state on the server in the blue box is the

23
00:01:48.400 --> 00:01:51.350
state on client number one.

24
00:01:51.430 --> 00:01:55.010
And in the red box is the state on client number two.

25
00:01:55.240 --> 00:01:59.860
And then what I've got inside the state is we've got a green box.

26
00:01:59.860 --> 00:02:05.420
That green box is like a moving platform from section number one it's controlled entirely on the server.

27
00:02:05.500 --> 00:02:07.980
Then we've got the little blue man.

28
00:02:07.990 --> 00:02:13.540
Now he is a pawn that is controlled by our client number one.

29
00:02:13.540 --> 00:02:18.910
And then we've got a little red man which is a porn controlled by our client number two.

30
00:02:19.140 --> 00:02:20.890
So okay what happens here.

31
00:02:20.890 --> 00:02:23.130
Well quite clearly on the server.

32
00:02:23.230 --> 00:02:29.980
All of our actors are going to have authority because the server is authoritative and that means that

33
00:02:30.040 --> 00:02:37.200
anything any state change on these Authoritative actors gets replicated down to the clients.

34
00:02:37.570 --> 00:02:38.590
What about the clients.

35
00:02:38.590 --> 00:02:43.830
Well in the simplest case of the cube This is entirely controlled by the server.

36
00:02:43.990 --> 00:02:47.350
So these are known as simulated proxies.

37
00:02:47.350 --> 00:02:53.920
That is because on these clients they entirely take their all their state from the server and all they

38
00:02:53.920 --> 00:02:59.320
can do is try and simulator as best they can try and interpolate as best they can but all the information

39
00:02:59.350 --> 00:03:02.220
they get comes directly from the server.

40
00:03:02.500 --> 00:03:08.440
That same thing goes for the play a pawn that is not being controlled locally.

41
00:03:08.440 --> 00:03:15.310
So here we've got the red pawn on the blue client and the red pawn on the blue client is also a simulated

42
00:03:15.310 --> 00:03:18.500
proxy because he is not being controlled by this client.

43
00:03:18.640 --> 00:03:25.000
However Same thing goes on at the read client the blue pawn now on the red line is a simulated proxy

44
00:03:25.000 --> 00:03:27.150
because it's not being controlled locally.

45
00:03:27.440 --> 00:03:35.200
However the blue pawn on the blue client and the red pawn on the red client are what is known as an

46
00:03:35.260 --> 00:03:37.290
autonomous proxy.

47
00:03:37.300 --> 00:03:42.190
What this means is that they don't just get their information about the state in how to update the state

48
00:03:42.190 --> 00:03:46.760
from the server but they also can get it from the local play a controller.

49
00:03:46.810 --> 00:03:47.520
Think about it.

50
00:03:47.620 --> 00:03:53.630
You've got these these players being controlled by your mouse and keyboard on your client.

51
00:03:53.650 --> 00:03:59.200
You can use some of that information to update the state of your autonomous proxy.

52
00:03:59.200 --> 00:04:03.250
And the same thing is going to happen on the server but you can do it a little bit ahead of time you

53
00:04:03.250 --> 00:04:08.560
can beat the server to it and make sure that there's a really smooth experience so that is why there

54
00:04:08.560 --> 00:04:12.680
is this distinction between these autonomous proxies and these simulated proxies.

55
00:04:12.700 --> 00:04:18.520
All it means is that the autonomous proxy has the added information of your play controller whereas

56
00:04:18.520 --> 00:04:22.390
the simulated proxies have to go off the state from the server.

57
00:04:22.390 --> 00:04:25.470
So how do we actually use these actor roles.

58
00:04:25.690 --> 00:04:27.010
Well it's quite straightforward.

59
00:04:27.010 --> 00:04:29.470
Every actor has two variables.

60
00:04:29.470 --> 00:04:35.820
The role and the remote role now is very straightforward the role will always be whatever.

61
00:04:35.830 --> 00:04:37.710
I've just shown you on this diagram here.

62
00:04:37.720 --> 00:04:40.180
So on the server it will be authority on the client.

63
00:04:40.180 --> 00:04:43.040
It may be simulated proxy or autonomous proxy.

64
00:04:43.330 --> 00:04:47.010
And then you have another variable which is the remote role which basically tells you what the flip

65
00:04:47.010 --> 00:04:48.580
side of that equation would be.

66
00:04:48.580 --> 00:04:54.940
So on the server the remote roll of this cube would be simulated proxy and on the client the remote

67
00:04:54.970 --> 00:04:58.300
role would be authority and so on and so forth.

68
00:04:58.690 --> 00:05:00.250
Okay so that makes sense.

69
00:05:00.250 --> 00:05:03.760
We're only really interested in what the role is on the current machine.

70
00:05:03.760 --> 00:05:09.970
So that's what we're going to be using and what we want to do is actually show the role of the given

71
00:05:10.000 --> 00:05:15.060
actor somewhere on the screen so that we can see what they are.

72
00:05:15.070 --> 00:05:15.850
So how can we do this.

73
00:05:15.850 --> 00:05:17.610
Well we could try logging out.

74
00:05:17.620 --> 00:05:22.600
But the problem with the logs is that they're going to be all bunched together so we're going to get

75
00:05:22.600 --> 00:05:26.010
the same logs for the client and for the server in the same place.

76
00:05:26.020 --> 00:05:31.500
So we won't be able to tell who was the autonomous proxy who was the simulated and so on and so forth.

77
00:05:31.510 --> 00:05:37.750
So what we need to do is make use of this lovely debug function here called draw a debug string.

78
00:05:37.870 --> 00:05:42.710
You can see it is in the header drawer debug header help us.

79
00:05:42.760 --> 00:05:43.440
So we're going to go ahead.

80
00:05:43.480 --> 00:05:45.150
Include that header and.

81
00:05:45.260 --> 00:05:47.860
Go into our code and I'm going to be doing this in tic.

82
00:05:47.870 --> 00:05:51.080
But I can obviously include at the top so hash include.

83
00:05:51.960 --> 00:06:00.210
And then I'm going to hash include my draw debug helpers and then down in teak I am going to try and

84
00:06:00.210 --> 00:06:01.970
print out the role.

85
00:06:01.980 --> 00:06:04.230
Now obviously the role has no text.

86
00:06:04.230 --> 00:06:09.180
So we're going to have to go ahead and convert the roll into text because that's actually an even if

87
00:06:09.180 --> 00:06:13.810
we go and have a look at the type of role if we can do that I think I can do that by hovering.

88
00:06:14.070 --> 00:06:15.460
Then you can see that it is.

89
00:06:15.690 --> 00:06:18.150
It's got some weird template around it.

90
00:06:18.150 --> 00:06:24.120
The T genome as byte but we can see that the type essentially is E-Net role.

91
00:06:24.120 --> 00:06:30.780
So we want to convert that in some of the type of role into some text which is descriptive of the type

92
00:06:30.780 --> 00:06:31.260
of role.

93
00:06:31.260 --> 00:06:34.800
So I'm going to do this with a little function and a switch statement.

94
00:06:34.830 --> 00:06:38.610
So I'm going to actually declare this function tiny in the C++ so we don't have to declare it in the

95
00:06:38.610 --> 00:06:39.890
head file at all.

96
00:06:40.020 --> 00:06:49.380
And I'm going to make it a return string and it is going to be get in some text and we're going to take

97
00:06:49.380 --> 00:06:59.130
the E net and what do we say it was called E net roll and then we can just have the roll in there and

98
00:06:59.190 --> 00:07:07.260
then we can define the body of that which is going to switch on the role so use the switch statement

99
00:07:07.260 --> 00:07:12.450
expansion if you've got one if not is going to be Switch open brackets close brackets and then curly

100
00:07:12.450 --> 00:07:16.420
brackets and the different cases of ascertainment through and right in a second.

101
00:07:16.440 --> 00:07:17.990
So it's going to be roll.

102
00:07:18.030 --> 00:07:23.080
And we're going to do the first case look it's automatically filled how all my roles for me.

103
00:07:23.100 --> 00:07:25.170
Thank you visual studio that was really helpful.

104
00:07:25.170 --> 00:07:32.250
Now I don't need anything for Max but I will need something for none simulated or autonomous authority

105
00:07:32.610 --> 00:07:37.560
and the default and instead of doing all the breaks what I'm going to do to make it really easy is just

106
00:07:37.560 --> 00:07:43.090
return the text so I'm going to go ahead and return none for the none roll.

107
00:07:43.200 --> 00:07:50.820
Going to return as just copy that over these returns statements for all of our switch cases.

108
00:07:50.970 --> 00:07:55.030
I'm going to have simulated proxy over here.

109
00:07:55.200 --> 00:07:57.370
I'm going to have autonomous proxy.

110
00:07:58.980 --> 00:08:00.080
Like so.

111
00:08:01.020 --> 00:08:04.170
I'm going to have authority as the last one.

112
00:08:05.590 --> 00:08:08.710
And I'm going to have error.

113
00:08:09.570 --> 00:08:13.830
For the default case we shouldn't get a default case basically.

114
00:08:14.370 --> 00:08:22.820
Okay so we can now get the text from an in-home text which is helpful so we can get on to what we're

115
00:08:22.840 --> 00:08:27.210
doing here is investigating the network role there and forgot to update the bar at the bottom and we've

116
00:08:27.210 --> 00:08:30.250
got a draw debug string.

117
00:08:30.250 --> 00:08:34.030
That's what we are doing so let's go ahead and draw the debug string.

118
00:08:34.080 --> 00:08:39.330
It's going to take in the world so I'm going to do a Get world on the actor to get hold of our world.

119
00:08:39.510 --> 00:08:45.770
Then you've got a location but this location can also be an offset from an actor that we give later

120
00:08:45.790 --> 00:08:49.680
you can see that there is an actor that defaults to being an old Pointer the base actor.

121
00:08:49.680 --> 00:08:56.390
So what I can actually go ahead and do is create an vector which is going to be above this current porn.

122
00:08:56.550 --> 00:08:57.710
So it's X Y Z.

123
00:08:57.720 --> 00:09:04.810
I want to go up in the Z dimension so it's going to be 0 0 and then one meter above the actor.

124
00:09:06.120 --> 00:09:08.720
Then we've got the actual text itself.

125
00:09:08.730 --> 00:09:12.800
So the text I can very easily just get with our get.

126
00:09:14.070 --> 00:09:19.260
In some text and then we're going to pass in the name which is our role.

127
00:09:19.620 --> 00:09:19.980
Okay.

128
00:09:19.980 --> 00:09:24.770
And then we can give the actor which is just this we can give a text colour.

129
00:09:24.780 --> 00:09:29.370
And I am going to give a duration because I wanted to last only this tick and then update the position

130
00:09:29.430 --> 00:09:31.110
as our car moves around.

131
00:09:31.110 --> 00:09:32.170
So we'll give it an F..

132
00:09:32.170 --> 00:09:37.050
Colour you can just follow along with this if you want to see the effects as well or you can just watch

133
00:09:37.050 --> 00:09:37.970
on my screen.

134
00:09:38.190 --> 00:09:43.410
And then were going to give it a duration which is going to be the delta time in this given tick.

135
00:09:43.620 --> 00:09:45.840
And that should do the trick.

136
00:09:45.840 --> 00:09:52.110
Let's go ahead and save and build and see what the roles are of our different cars from the point of

137
00:09:52.110 --> 00:09:54.350
view of the different clients.

138
00:09:54.390 --> 00:10:00.570
So my build has completed without any errors Let's go in to unreel and hit play and see what's going

139
00:10:00.570 --> 00:10:00.840
on.

140
00:10:00.840 --> 00:10:02.520
Make sure both my cars load up.

141
00:10:02.520 --> 00:10:04.860
I've got bit of an error there which will fix later.

142
00:10:05.100 --> 00:10:10.400
But let's get our cars side by side and you can see that in our client sure enough above his head.

143
00:10:10.410 --> 00:10:13.740
We have got autonomous proxy on the server.

144
00:10:13.740 --> 00:10:20.130
We have got authority and if I drive my car around you can see that the car being driven around the

145
00:10:20.130 --> 00:10:23.510
text above its head also says Authority.

146
00:10:23.520 --> 00:10:28.310
So that is very much corresponding to what the diagram was saying on my lights.

147
00:10:28.350 --> 00:10:31.390
Basically saying that everything on the server is going to have authority.

148
00:10:31.560 --> 00:10:36.690
But what about those simulated proxy's at the moment we don't have any simulated proxy's least none

149
00:10:36.780 --> 00:10:38.350
that we can easily see.

150
00:10:38.460 --> 00:10:46.020
Let's go ahead and move our server around and get it in front of our autonomous proxy there and sure

151
00:10:46.020 --> 00:10:53.570
enough it is a car that is not being simulated here locally so it is being a simulated proxy.

152
00:10:53.580 --> 00:10:57.420
It's coming down from the authority of the server coming down to us.

153
00:10:57.570 --> 00:11:01.480
So let's actually try playing with one more player in the mix another player.

154
00:11:01.500 --> 00:11:04.160
That is not going to be on the server.

155
00:11:05.790 --> 00:11:12.900
So that's going to be 3 in total let's go ahead and play and try and put more side by side and see if

156
00:11:12.900 --> 00:11:14.650
we can indeed.

157
00:11:14.660 --> 00:11:15.060
There we go.

158
00:11:15.060 --> 00:11:20.970
We've got client one client too and we have got a server and you can see that each of the clients is

159
00:11:20.970 --> 00:11:23.900
seeing their own car as being an autonomous proxy.

160
00:11:23.940 --> 00:11:30.620
And we can see that on the server can just about make out that they are or indeed authority.

161
00:11:30.750 --> 00:11:37.230
But what if we go and drive one of our autonomous proxy's in front of the other client.

162
00:11:37.230 --> 00:11:43.580
You can see that his car is also a simulated proxy so that's starting to make sense.

163
00:11:43.590 --> 00:11:49.530
Now I'm getting the updates of all the simulated proxy's coming down to my clients both the ones that

164
00:11:49.530 --> 00:11:53.110
work simulator on server and the ones that were simulator on the other client.

165
00:11:53.130 --> 00:11:57.470
The only thing that's not getting updated here is the autonomous proxy.

166
00:11:57.720 --> 00:12:03.090
And you might well guess that this is because the autonomous proxy should be updating its own position.

167
00:12:03.120 --> 00:12:08.190
It should be using its own logic to try and update the position a bit more cleverly than just getting

168
00:12:08.190 --> 00:12:10.680
the replicated position.

169
00:12:10.680 --> 00:12:15.840
So with that said we can easily go ahead and make sure that the position on our autonomous proxy is

170
00:12:15.840 --> 00:12:17.080
being updated.

171
00:12:17.280 --> 00:12:19.350
So let's go ahead and do that.

172
00:12:19.350 --> 00:12:21.090
Update our autonomous.

173
00:12:21.570 --> 00:12:26.040
So it's a fairly straightforward challenge for you to update the autonomous proxy you need to handle

174
00:12:26.040 --> 00:12:32.220
the bindings locally first and then pass them up to the server so the first things is going to be updating

175
00:12:32.220 --> 00:12:36.820
your state locally because that's not getting passed back down and propagated back down from the server.

176
00:12:37.050 --> 00:12:41.220
And then you can add up to the server who will propagate it to all the other clients and then I'd like

177
00:12:41.220 --> 00:12:48.600
you to check that your test to check that your positions coincide with your own and with all the other

178
00:12:48.600 --> 00:12:53.990
clients and with the position calculated on the server so pause a video and have a go at this challenge.

179
00:12:55.270 --> 00:12:58.270
Okay Welcome back let's dive into the challenge and have a go at this together.

180
00:12:58.450 --> 00:12:59.970
So the first thing first.

181
00:13:00.010 --> 00:13:03.820
We are currently from our bind access is calling the server move forward.

182
00:13:03.820 --> 00:13:10.070
We clearly need to calculate do our own move forward first which will then call up to the server's own.

183
00:13:10.090 --> 00:13:11.290
Move forward.

184
00:13:11.350 --> 00:13:17.140
Now there's no need to actually check which roll we are because the only roll that has this autonomous

185
00:13:17.140 --> 00:13:21.670
proxy behaviour is the one that has a play controller attached and so it is the only one that can actually

186
00:13:21.670 --> 00:13:24.520
receive input from the player controller.

187
00:13:24.520 --> 00:13:25.920
So we don't actually have to check this.

188
00:13:25.930 --> 00:13:29.050
If we're going the bind axes then we are the autonomous proxy.

189
00:13:29.050 --> 00:13:33.690
At least we can assume that if you want to you can put some assert in to make sure of this.

190
00:13:33.820 --> 00:13:36.940
So I'm going to go ahead and create a void.

191
00:13:37.030 --> 00:13:41.230
Move forward function in fact I'm going to go and copy it from and move forward.

192
00:13:41.230 --> 00:13:44.210
You function and copy it from and move right.

193
00:13:44.230 --> 00:13:45.710
You function as well.

194
00:13:46.120 --> 00:13:46.810
Whoops.

195
00:13:46.810 --> 00:13:48.150
Copying and pasting unfortunately.

196
00:13:48.370 --> 00:13:53.120
And I'm going to remove the server underscore prefix from both of these.

197
00:13:53.960 --> 00:13:58.490
And I am going to go ahead and copy them both in two AC plus plus to implement them.

198
00:13:58.490 --> 00:14:03.830
I'm going to put them above actually our server implementations going from be higher level of abstraction

199
00:14:03.860 --> 00:14:10.730
to the lower level of abstraction or what calls what and we are going to add in some and name spaces

200
00:14:10.820 --> 00:14:18.930
to both of these functions and implement their bodies in the C plus plus all the usual kind of thing

201
00:14:18.930 --> 00:14:20.570
or which Visual Studio will do for you.

202
00:14:20.570 --> 00:14:24.870
I find Intellisense to be slower than my copying and pasting so i tend to do it manually.

203
00:14:24.890 --> 00:14:30.320
So let's go ahead and remove the server underscore on a binding so that we are going to be calling these

204
00:14:30.320 --> 00:14:35.450
local functions first and then what are we going to do once we have done this.

205
00:14:35.470 --> 00:14:39.840
Well we are going to first of all update our throttle here locally.

206
00:14:39.950 --> 00:14:43.120
So I'm going to do a throttle equals value.

207
00:14:43.130 --> 00:14:52.220
And then after we've done that I'm going to call this server underscore move forward with our own value

208
00:14:52.310 --> 00:14:53.390
right here.

209
00:14:53.390 --> 00:14:56.540
Now you might say Sam doesn't this allow the player to cheat.

210
00:14:56.540 --> 00:15:02.780
Well yes it does in a sense it does mean that they could set a weird throttle value for themselves but

211
00:15:02.780 --> 00:15:07.100
all they would be doing is cheating themselves because on the server we still have all the validation

212
00:15:07.100 --> 00:15:14.180
in place to keep that value within a sensible throttle threshold which means that they won't be able

213
00:15:14.180 --> 00:15:15.750
to go any faster on the server side.

214
00:15:15.770 --> 00:15:20.020
They're still not going to be able to win the game that by cheating on their local inserts.

215
00:15:20.060 --> 00:15:23.180
So then we're going to do the same thing with move right except on move right.

216
00:15:23.180 --> 00:15:31.070
We are going to update our steering throw and then we are going to call our server move right and we're

217
00:15:31.070 --> 00:15:31.960
going to pass it.

218
00:15:32.000 --> 00:15:34.490
The value as well.

219
00:15:34.490 --> 00:15:39.050
So you can see here we are first handling the input locally then we're calling up to the server so it

220
00:15:39.320 --> 00:15:40.670
can handle input too.

221
00:15:40.900 --> 00:15:43.840
Let's go ahead and build that and see if it works.

222
00:15:43.970 --> 00:15:46.430
Okay so that build went ahead and succeeded.

223
00:15:46.430 --> 00:15:50.070
Let's dive into in real and that's sporn up our three instances.

224
00:15:50.090 --> 00:15:52.550
Make sure that they all spawned up correctly.

225
00:15:52.580 --> 00:15:54.640
We got our server on the right.

226
00:15:54.920 --> 00:15:59.560
Got Game number one on the left and then we got game number.

227
00:15:59.570 --> 00:16:02.480
So that was Game number two and game of 1 hasn't borne correctly.

228
00:16:02.480 --> 00:16:07.190
So again had to launch that up on one more time note so we're getting a few sporn issues actually let's

229
00:16:07.250 --> 00:16:12.050
fix those born issues here go and have a look at the log you can see that it is because the spawn out

230
00:16:12.050 --> 00:16:15.790
of failed because of Culex collision in the spawn location.

231
00:16:15.810 --> 00:16:21.480
I believe what's going on here on might correct me if I'm wrong but it's randomly choosing a spawn point.

232
00:16:21.530 --> 00:16:27.320
And if there's another player already in that spawn point well tough luck you are going to fail to spawn

233
00:16:27.410 --> 00:16:29.330
at least that's what I think's going on here.

234
00:16:29.330 --> 00:16:34.250
So what we can do is just reduce that probability by increasing the number of spawn points I'm going

235
00:16:34.250 --> 00:16:38.570
to ducks spawn point out and drag and that will duplicate it.

236
00:16:38.570 --> 00:16:44.450
So if I Oulton drag a few times then we're going to add in quite a few spawn points which should allow

237
00:16:44.450 --> 00:16:47.800
us to reduce that chance of collision.

238
00:16:47.810 --> 00:16:48.980
That's go ahead play.

239
00:16:49.460 --> 00:16:55.430
And this time sure enough we have got lots of those instances and we haven't had problems so we've got

240
00:16:55.490 --> 00:17:00.840
our client to top left client one bottom left and on the right we've got a server.

241
00:17:01.180 --> 00:17:03.740
Okay so let's try and drive one of these autonomous proxies.

242
00:17:03.800 --> 00:17:10.100
Now if I'm driving my hat on as proxy you can see that I am getting the reaction that I deserve.

243
00:17:10.340 --> 00:17:17.740
And if I go up and bump into a higher authority you can see that on both the client and the server that.

244
00:17:18.460 --> 00:17:23.890
Proxy has actually come through perfectly fine because he's very smooth on the server not so smooth

245
00:17:23.950 --> 00:17:25.550
on our client.

246
00:17:25.870 --> 00:17:29.450
It's coming through a bit jolting just like all the simulator stuff does.

247
00:17:29.650 --> 00:17:33.670
And but we can see that the position is coming through quite all right.

248
00:17:33.670 --> 00:17:37.430
Let's come all the way back in front of our chaps.

249
00:17:38.240 --> 00:17:42.290
And you can see there's a bit of lag there is in fact quite a lot of lag coming in here.

250
00:17:42.300 --> 00:17:45.090
We'll see why this is and how we can fix it.

251
00:17:45.150 --> 00:17:50.360
And in fact you can see it's definitely lost something it's definitely not quite in the same position.

252
00:17:50.480 --> 00:17:56.690
We're going to figure out how we can reconcile these differences between our local simulation and the

253
00:17:56.780 --> 00:17:59.550
remote simulation in the next lecture.

254
00:17:59.570 --> 00:18:01.360
But for now this is good enough.

255
00:18:01.370 --> 00:18:07.550
We have got to the stage where we are simulating our autonomous proxy and we're trying to pass up at

256
00:18:07.550 --> 00:18:11.990
least we're doing our best to try and pass those values up to the server.

257
00:18:11.990 --> 00:18:13.840
So that's I'll see you in the next lecture.

258
00:18:13.850 --> 00:18:17.650
Well we'll be trying to work out how to make these two coincide.
