1
00:00:04,720 --> 00:00:09,100
Welcome in this lecture we're going to be getting into the details of how our platform is working and

2
00:00:09,100 --> 00:00:14,890
how it's not working so that we can make it go backwards and forwards between the target and the start

3
00:00:14,950 --> 00:00:18,580
location were going to be creating a target and start location were going to be swapping them round

4
00:00:18,940 --> 00:00:24,770
when certain conditions are met such as having gone past our end location at target location.

5
00:00:24,770 --> 00:00:27,730
So we're going to get an effect that looks roughly like this.

6
00:00:27,730 --> 00:00:32,200
We've got the platform going up from a start location up to a target location which is up there and

7
00:00:32,200 --> 00:00:35,380
then back down to the start location and vice versa.

8
00:00:35,400 --> 00:00:38,580
And it keeps going backwards and forwards ad infinitum.

9
00:00:38,580 --> 00:00:40,270
So we are going to be implementing that.

10
00:00:40,270 --> 00:00:41,720
Let's dive right in.

11
00:00:42,220 --> 00:00:49,720
Okay so at the moment our target our target our platform isn't moving to the target and back.

12
00:00:49,720 --> 00:00:55,330
In fact you'll notice that it is simply just moving off and let's see whether it stops at our target

13
00:00:55,330 --> 00:00:56,830
location or not.

14
00:00:56,950 --> 00:00:59,590
I would expect it to stop Let's go and have a look.

15
00:00:59,590 --> 00:01:00,470
Why.

16
00:01:00,700 --> 00:01:04,650
Because if we go to my visual studio then you'll see that we are doing.

17
00:01:04,690 --> 00:01:12,210
The direction is the global target location minus the location get safe normal.

18
00:01:13,550 --> 00:01:20,660
So I would expect that this target location my location gets smaller and smaller as we approach our

19
00:01:20,660 --> 00:01:27,680
target and eventually the get safe normal won't be safe anymore and it will return zero for the direction

20
00:01:27,740 --> 00:01:31,280
meaning that we will update our location by zero as well.

21
00:01:31,280 --> 00:01:34,210
So let's see if that's what's happening that jump into unreel.

22
00:01:34,320 --> 00:01:35,560
And you can follow along with this.

23
00:01:35,570 --> 00:01:40,720
I'm just going to increase the speed of my moving platform to 1000 centimetres a second.

24
00:01:40,770 --> 00:01:43,970
Go ahead hit play go shooting up towards the target.

25
00:01:44,180 --> 00:01:47,380
And well it's definitely gone well beyond the target hasn't it.

26
00:01:47,390 --> 00:01:51,200
Because if we click on it you can see the target location was just here.

27
00:01:51,410 --> 00:01:53,860
Not very far up at all.

28
00:01:53,870 --> 00:01:58,750
So why has that happened why is it gone shooting up and gone well past the target location.

29
00:01:58,880 --> 00:02:01,390
Contrary to what I was expecting.

30
00:02:01,700 --> 00:02:08,540
The reason for this is that the global target location is being recalculated every frame and it's being

31
00:02:08,540 --> 00:02:13,450
recalculated from the target location which as we said before is in local space.

32
00:02:13,550 --> 00:02:18,470
So we've updated the location of the actor and then have recalculated the target location which has

33
00:02:18,470 --> 00:02:24,800
moved with the actor Meaning that basically we can never reach this target So this is seeming to indicate

34
00:02:24,800 --> 00:02:29,180
that if we want to be able to reach the target now that we've reached it and turn back we're going to

35
00:02:29,180 --> 00:02:35,360
need to make a note of where that target was initially as well as where we want to move back to let's

36
00:02:35,360 --> 00:02:37,790
have a look at this in a little bit more detail.

37
00:02:37,850 --> 00:02:43,520
We've got Target A and B which we have already said we want to take a note of right at the beginning

38
00:02:43,730 --> 00:02:50,630
of our platforms lifetime and then we want to start moving towards it which will give us a current location

39
00:02:50,930 --> 00:02:58,420
of C and then we want to say what happens when we reach B and turn back towards C..

40
00:02:58,430 --> 00:03:01,490
So let's put this in in action.

41
00:03:01,490 --> 00:03:09,140
Let's create a starting point and a finishing point to do that I'm going to go to my moving platform.

42
00:03:09,170 --> 00:03:10,300
Dot H.

43
00:03:12,000 --> 00:03:20,010
And we are going to we've got a target location and we're going to have a start location as well.

44
00:03:20,040 --> 00:03:24,920
In fact we're going to make a we've got a target location which tells us the offset.

45
00:03:24,980 --> 00:03:31,230
So the kind of local target location I want to also have some private variables.

46
00:03:32,340 --> 00:03:39,360
Which are going to be the global target location and the global start location.

47
00:03:39,360 --> 00:03:40,980
So let's go ahead and do that.

48
00:03:40,980 --> 00:03:46,740
I'm going to make them just fxi as they don't need to be you properties don't need to edit them anywhere.

49
00:03:47,010 --> 00:03:50,430
So an EF vector global target.

50
00:03:51,300 --> 00:03:52,380
Location.

51
00:03:53,980 --> 00:03:55,410
And an F vector.

52
00:03:56,680 --> 00:04:00,190
Global start location.

53
00:04:01,340 --> 00:04:07,280
Like so I'll go over in to the C plus plus file and one going to do is on begin play.

54
00:04:07,280 --> 00:04:11,220
I'm going to set the target and the start location fairly simple.

55
00:04:11,420 --> 00:04:23,580
So first let's do the start location that's going to be global start location equal to get actor location.

56
00:04:25,350 --> 00:04:28,000
You'll be following along here if you like.

57
00:04:28,200 --> 00:04:33,920
And then again in begin play we're going to set up our global target location.

58
00:04:35,130 --> 00:04:36,180
Equal to.

59
00:04:36,240 --> 00:04:39,610
Now I am going to take that from our tick.

60
00:04:39,690 --> 00:04:44,940
We're currently setting the global target location to we're going to set it to get transform transform

61
00:04:44,940 --> 00:04:48,540
position of the target location so it's going to do that.

62
00:04:48,720 --> 00:04:55,650
Transforming into a global coordinance only once and let's remove that global target location local

63
00:04:55,650 --> 00:04:58,190
variable from tick my line.

64
00:04:58,190 --> 00:04:59,290
Thirty three.

65
00:04:59,670 --> 00:05:03,750
So now it's going to be using the global target location.

66
00:05:04,230 --> 00:05:04,610
Okay.

67
00:05:04,650 --> 00:05:08,730
So let's go ahead and save and hit build for this.

68
00:05:08,730 --> 00:05:16,610
Now you'll notice I haven't replaced the use of location in our calculation of the direction vector.

69
00:05:16,650 --> 00:05:21,970
So what I would expect at this point is that it goes up to our target n then stops.

70
00:05:21,980 --> 00:05:23,760
Let's see if that is the case.

71
00:05:27,090 --> 00:05:27,520
Okay.

72
00:05:27,540 --> 00:05:29,210
That is a build success.

73
00:05:29,210 --> 00:05:32,710
Let's go over into one and real and hit play.

74
00:05:33,630 --> 00:05:34,080
Okay.

75
00:05:34,080 --> 00:05:38,580
As expected it stopped at the target location but it is glitching out somewhat.

76
00:05:38,580 --> 00:05:44,130
So what I would like it to do is to continue past that target location let me explain a little bit why

77
00:05:44,610 --> 00:05:50,730
because here we've got see which is and midpoint it or it's a position along the way it's the location

78
00:05:51,140 --> 00:05:55,140
and it's going towards be is going toward It's going towards B and then at some point it's becoming

79
00:05:55,140 --> 00:05:59,850
zero and stopping but that's not a very clear thing.

80
00:05:59,850 --> 00:06:06,420
It hasn't gone past be it's just nearly and B and that's not very exact will be much better if it carried

81
00:06:06,420 --> 00:06:11,140
on shooting past B and we could detect that now it's gone past B.

82
00:06:11,250 --> 00:06:14,090
So we need to head back.

83
00:06:14,220 --> 00:06:19,410
So I would like it to shoot on past the target to do that.

84
00:06:19,410 --> 00:06:20,740
What we're going to have to do.

85
00:06:21,490 --> 00:06:25,750
Because that's looking rather weird and I don't like the look of that one bit is if we go over to visual

86
00:06:25,750 --> 00:06:33,130
studio is if we replace the location with the global start location then what we're going to get is

87
00:06:33,130 --> 00:06:33,720
a vector.

88
00:06:33,720 --> 00:06:35,600
There is always going to be the same intake.

89
00:06:35,710 --> 00:06:40,330
It's still going to be the right direction and it's going to shoot past our target location.

90
00:06:40,330 --> 00:06:42,180
So let's go ahead and do that.

91
00:06:42,370 --> 00:06:45,560
Global start location.

92
00:06:47,790 --> 00:06:50,430
And just have a little think about why that must be true.

93
00:06:50,580 --> 00:06:56,820
Because now we're not calculating the difference between C and B which is what we were doing before.

94
00:06:56,820 --> 00:07:03,330
So as C got very close to B we ended up with a very small vector and it was hard to normalize that and

95
00:07:03,330 --> 00:07:11,020
turn it into a direction because it was so small and the errors start to accumulate in our machines.

96
00:07:11,250 --> 00:07:17,850
But instead we're just taking this much longer vector from a to b which stays constant no matter where

97
00:07:17,850 --> 00:07:18,500
c is.

98
00:07:18,510 --> 00:07:23,240
And so it's always easy to find a direction from it and we don't get this weird jittering effect.

99
00:07:23,280 --> 00:07:28,670
So let's go back into one real now with it compile and let's hit play.

100
00:07:29,520 --> 00:07:29,820
Right.

101
00:07:29,820 --> 00:07:34,560
Shooting off into the distance and going well past the target point exactly as I expect.

102
00:07:34,590 --> 00:07:38,880
No glitching and I understand why it's doing it this time whereas at the beginning of the lecture lecture

103
00:07:38,910 --> 00:07:43,210
I didn't really understand why it was shooting off past so much better.

104
00:07:43,230 --> 00:07:49,440
Much cleaner way of doing the direction in my opinion and it allows us now to do something very cool

105
00:07:49,620 --> 00:07:52,990
which is where we want to go back in the other direction.

106
00:07:53,070 --> 00:07:57,280
We can just swap around the start location and target location very very simple.

107
00:07:57,390 --> 00:08:02,190
So that's the main reason that I wanted to do this and I kind of did it led you on there a little bit

108
00:08:02,220 --> 00:08:09,390
but there's also other good reasons such as the fact that we want to shoot past in order to know better

109
00:08:09,840 --> 00:08:15,810
whether we are got we've got to head back rather than just putting some arbitrary limit on how close

110
00:08:16,050 --> 00:08:18,790
to the target location we end up getting.

111
00:08:19,880 --> 00:08:26,690
So it is time for us to start swapping the start and target around based on some conditions and I'm

112
00:08:26,690 --> 00:08:31,430
going to leave that up to you as a challenge a little bit of a tricky challenge but a challenge I'm

113
00:08:31,430 --> 00:08:33,060
sure and confident you can do.

114
00:08:33,410 --> 00:08:37,910
So swapping the start and target what condition will you use.

115
00:08:37,920 --> 00:08:42,950
Have a little bit of a think about how you might be able to tell that you've gone past be gone past

116
00:08:42,950 --> 00:08:46,280
the target and need to turn back.

117
00:08:47,600 --> 00:08:54,230
Have a little research in the vector API and see well what you could use if you're stuck that could

118
00:08:54,230 --> 00:08:58,010
help you out see what the better api has to offer.

119
00:08:59,570 --> 00:09:05,870
Then I'd like you to implement the condition and implement swapping that variable around.

120
00:09:05,870 --> 00:09:11,660
Now remember that when you swap two variables around you sometimes need to have a temporary variable

121
00:09:11,900 --> 00:09:14,320
to store one of the variables into.

122
00:09:14,330 --> 00:09:19,580
Because otherwise you're going to overwrite a value that was stored in one of the variables.

123
00:09:19,670 --> 00:09:23,280
So go and have a go at this little challenge.

124
00:09:25,200 --> 00:09:26,490
Okay welcome back.

125
00:09:26,490 --> 00:09:28,560
So first things first.

126
00:09:28,650 --> 00:09:35,250
What I'm going to do is I'm going to make sure that the let's have a look at our vector diagram just

127
00:09:35,250 --> 00:09:36,910
to elucidate.

128
00:09:37,200 --> 00:09:38,910
Just to make it clearer.

129
00:09:39,330 --> 00:09:48,600
When C has gone beyond be one thing that I know is that the length from C to the start location is now

130
00:09:48,600 --> 00:09:52,050
longer than the length from a to b.

131
00:09:52,140 --> 00:09:55,250
So that's what I'm going to use as my condition.

132
00:09:57,370 --> 00:10:03,240
So let's create a variable to hold that length from a to b which I'm going to call the journey length.

133
00:10:03,410 --> 00:10:04,610
It's going to be a float.

134
00:10:05,410 --> 00:10:07,130
Journey length.

135
00:10:08,490 --> 00:10:10,790
And it is just this vector again.

136
00:10:10,800 --> 00:10:14,670
The global target location minus the start location.

137
00:10:15,470 --> 00:10:19,640
But then we want to get the length of that vector and to do that we need to have a little look at the

138
00:10:19,850 --> 00:10:22,010
vector documentation.

139
00:10:22,040 --> 00:10:28,200
So here are the docs that I've handly got in a background window and let's go over to it.

140
00:10:28,220 --> 00:10:31,770
We've got an F vector and I want to find out.

141
00:10:31,940 --> 00:10:34,860
It's either called the size or the magnitude.

142
00:10:35,880 --> 00:10:42,630
And you could scan through the documentation's to find that and I think in our case it is actually called

143
00:10:42,630 --> 00:10:46,530
the size so the size or the length the magnitude of this vector.

144
00:10:46,860 --> 00:10:56,250
Let's go back into visual studio and just do a dot size which should get as a float of the size of that

145
00:10:56,250 --> 00:11:04,920
vector of the journey length as we said and then we are going to have another float called Journey travel.

146
00:11:04,950 --> 00:11:07,760
So float journey.

147
00:11:08,980 --> 00:11:09,700
Travelled.

148
00:11:11,810 --> 00:11:16,490
And that is going to be equal to rather than the target location.

149
00:11:16,490 --> 00:11:20,180
It's going to be from the start to the current location.

150
00:11:20,180 --> 00:11:28,100
So let's just copy and paste what was above but we will replace the global target location with as simply

151
00:11:28,100 --> 00:11:29,290
our location.

152
00:11:30,790 --> 00:11:31,100
Okay.

153
00:11:31,100 --> 00:11:34,380
And now the condition to turn back is going to be.

154
00:11:34,390 --> 00:11:38,010
But the journey travelled is longer than the journey length.

155
00:11:38,940 --> 00:11:46,140
So if that happens then on the next line after I've created my two floats I'm going to have an if statement

156
00:11:46,440 --> 00:11:50,490
saying if journey travelled.

157
00:11:52,240 --> 00:11:56,500
My auto complete Give me a little bit of grief there and also completely the wrong thing.

158
00:11:56,620 --> 00:12:03,070
Joint journey travelled is greater than the journey length Valis make this greater than or equal to

159
00:12:03,070 --> 00:12:05,350
it shouldn't really matter too much with floats.

160
00:12:05,350 --> 00:12:06,380
But just in case.

161
00:12:06,600 --> 00:12:09,230
So it's great and are equal to the journey length.

162
00:12:09,670 --> 00:12:12,590
Well then in that case let me put my.

163
00:12:13,990 --> 00:12:19,140
Curly brackets on separate lines to keep in with unveils coding convention.

164
00:12:19,140 --> 00:12:24,790
Well in that case we want to swap our global target location and our global star location now as I mentioned

165
00:12:25,180 --> 00:12:31,510
we're gonna need a temporary variable for doing the swap so I'm going to create an F vector called swap.

166
00:12:32,490 --> 00:12:36,110
And I'm going to put the in global start location in there.

167
00:12:40,170 --> 00:12:44,430
And then I am going to fill the global start location.

168
00:12:46,090 --> 00:12:48,850
With the target location.

169
00:12:53,550 --> 00:12:57,560
I'm just going to copy and paste because there long names and I can't be bothered to type them all out

170
00:12:58,030 --> 00:13:00,630
and the altar completes not helping very much so.

171
00:13:00,720 --> 00:13:04,950
Just to recall this is quite a common paradigm.

172
00:13:04,950 --> 00:13:09,960
When you wanting to swap variables we are putting the global target location into start location which

173
00:13:09,990 --> 00:13:11,390
overwrites what's in the start.

174
00:13:11,400 --> 00:13:11,790
Okay.

175
00:13:11,820 --> 00:13:19,080
But that's fine because we've got that saved in our swap variable and then we can overwrite our global

176
00:13:19,140 --> 00:13:23,220
target location because now it's safely in the start location.

177
00:13:23,220 --> 00:13:29,510
So I global target location is going to be written overwritten with our swap temporary variable so that

178
00:13:29,510 --> 00:13:32,950
swapped the global and target around.

179
00:13:33,820 --> 00:13:34,780
That's fantastic.

180
00:13:35,080 --> 00:13:42,640
And we then can carry on and do our getting the direction and updating the location as we were doing

181
00:13:42,640 --> 00:13:43,410
before.

182
00:13:43,660 --> 00:13:46,730
Let's build that and see if it has the desired effect.

183
00:13:47,580 --> 00:13:48,550
Kate build success.

184
00:13:48,550 --> 00:13:52,130
Let's go over into the unreel editor and hit play.

185
00:13:52,900 --> 00:13:53,490
Excellent.

186
00:13:53,490 --> 00:13:57,230
It's ping pong back and forth between the start and that target.

187
00:13:57,310 --> 00:13:58,530
That's fantastic.

188
00:13:58,660 --> 00:14:01,180
And I don't want it to go quite so fast.

189
00:14:01,180 --> 00:14:04,920
Let's say let's just turn it speed down to 20.

190
00:14:04,920 --> 00:14:12,010
Going into the details pane phone in speed and going to 20 hit play and watch it go in maybe a little

191
00:14:12,010 --> 00:14:17,590
bit monumentally slow so let's up that again to 100 rather than 1000 this time.

192
00:14:17,650 --> 00:14:18,770
Let's hit play.

193
00:14:19,060 --> 00:14:19,350
Okay.

194
00:14:19,360 --> 00:14:20,440
That's looking much better.

195
00:14:20,440 --> 00:14:23,290
100 centimetres a second about one meter per second.

196
00:14:23,290 --> 00:14:28,300
It's going to the target and then it's bouncing right back to the start and back to the target again.

197
00:14:28,300 --> 00:14:31,640
Exactly how we want our moving platforms to work.

198
00:14:31,720 --> 00:14:36,340
So I'm going to save my mat and that's a job well done and a challenge well completed and I'll see you

199
00:14:36,340 --> 00:14:37,660
in the next lecture.
