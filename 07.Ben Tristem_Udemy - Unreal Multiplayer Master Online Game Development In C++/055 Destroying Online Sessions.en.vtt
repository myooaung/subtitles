WEBVTT
1
00:00:04.610 --> 00:00:08.880
Why hello there and welcome to another unknown real session with me.

2
00:00:08.880 --> 00:00:15.230
Sam let's go ahead and hit play and you'll notice that if I host it's no longer complaining at me about

3
00:00:15.230 --> 00:00:20.630
that session already existing and the reason for this I can do it as many times as I like is that we

4
00:00:20.630 --> 00:00:22.620
have destroyed the session.

5
00:00:22.670 --> 00:00:26.360
We're going to learn how to destroy the session in fact we've got to learn how to check whether a settlement

6
00:00:26.360 --> 00:00:28.720
exists before we destroy it.

7
00:00:28.970 --> 00:00:34.880
And we're going to see what the difficulty is around destroying things asynchronously can be and some

8
00:00:34.880 --> 00:00:36.320
of the ways that we can get around it.

9
00:00:36.320 --> 00:00:39.080
So let's dig in and see what we've got.

10
00:00:40.890 --> 00:00:47.080
So in the last lecture we left it here we had this mike session game already exists.

11
00:00:47.100 --> 00:00:52.770
And so we can't create our hosts so we're going to need to make sure that this doesn't happen by destroying

12
00:00:52.770 --> 00:00:55.430
that session once we are done with it.

13
00:00:55.470 --> 00:01:01.800
And in fact he is a little bit of an issue because the destruction just like creation is an asynchronous

14
00:01:02.130 --> 00:01:02.930
operation.

15
00:01:02.940 --> 00:01:04.290
So that seems fine doesn't it.

16
00:01:04.290 --> 00:01:05.140
That seems okay.

17
00:01:05.160 --> 00:01:12.240
Sure enough it's an asynchronous operation but the problem is and the big problem is that when destructor

18
00:01:12.240 --> 00:01:19.290
is called and when our base we on destroy call-backs are being called we're not being given an asynchronous

19
00:01:19.410 --> 00:01:24.010
destroy we're not being told oh destroy whenever you like and then tell me when you're finished.

20
00:01:24.030 --> 00:01:26.370
No we're getting by the time we've returned.

21
00:01:26.370 --> 00:01:27.810
We have to finish destroying.

22
00:01:27.900 --> 00:01:33.990
So it doesn't really blend very well with this asynchronous destruction that the session interfaces

23
00:01:34.020 --> 00:01:35.160
trying to give us.

24
00:01:35.190 --> 00:01:41.460
So an alternative to trying to clear up after ourselves is simply to clear up before ourselves.

25
00:01:41.460 --> 00:01:44.850
So what I will say is oh if this session already exists.

26
00:01:44.850 --> 00:01:48.530
Well just go ahead and delete it because it's probably from before.

27
00:01:48.750 --> 00:01:52.190
So that's what we're going to go ahead and try and do.

28
00:01:52.290 --> 00:01:54.810
We're going to check if a session exists.

29
00:01:54.810 --> 00:01:57.720
Now how are we going to check if a session exists.

30
00:01:57.720 --> 00:02:04.390
Let's go over to the online session interface and see if we can find any functions that are useful.

31
00:02:04.440 --> 00:02:08.350
We've got things like add a named session that's kind of interesting.

32
00:02:08.360 --> 00:02:11.930
Maybe we've got something like a get named session get names there.

33
00:02:11.950 --> 00:02:12.360
Yes.

34
00:02:12.360 --> 00:02:14.160
Sure enough using the f name.

35
00:02:14.160 --> 00:02:16.610
We can go ahead and get a named session.

36
00:02:16.770 --> 00:02:24.010
And this returns a funny struct to call an F named at this online session.

37
00:02:24.930 --> 00:02:27.270
Fair enough I believe.

38
00:02:28.000 --> 00:02:33.360
This is a subtype of the F online sessions frocked.

39
00:02:33.410 --> 00:02:36.940
But if we go to get named session you'll see that it's actually a pointer.

40
00:02:37.120 --> 00:02:40.710
So if there is nothing found it's going to return the null pointer.

41
00:02:40.720 --> 00:02:42.090
That's what we can use.

42
00:02:42.160 --> 00:02:46.300
We can tell whether it's a null point or not that'll tell us whether the section exists or not.

43
00:02:46.300 --> 00:02:48.100
So let's go ahead and code that up.

44
00:02:48.100 --> 00:02:54.780
I'm going to go over in there to visual studio and we're going to go to our host method.

45
00:02:54.990 --> 00:03:03.070
So just check the validity of our session in face so we can go ahead and do session interface dot dot

46
00:03:03.100 --> 00:03:04.300
dot arrow.

47
00:03:04.780 --> 00:03:10.120
And we are going to do get named session and we need to get the name for the session.

48
00:03:10.120 --> 00:03:15.760
Now we are using this name session name in too many places so I'm going to extract that out and I'm

49
00:03:15.760 --> 00:03:17.560
going to make it just a constant.

50
00:03:17.560 --> 00:03:21.090
I mean I call it Session name and I actually don't know.

51
00:03:21.090 --> 00:03:25.480
It doesn't even need to be a constant on the class this can just be a global constant up here at the

52
00:03:25.480 --> 00:03:26.790
top is what I'm going to do.

53
00:03:26.800 --> 00:03:30.230
So this is going to be a contest.

54
00:03:30.490 --> 00:03:31.530
Static.

55
00:03:32.880 --> 00:03:33.570
Name.

56
00:03:35.790 --> 00:03:37.000
And it's going to be.

57
00:03:37.000 --> 00:03:38.800
Call is going to have that value.

58
00:03:38.820 --> 00:03:46.620
And I'm going to be calling it all in capitals just make it clear it's a constant session name session

59
00:03:46.650 --> 00:03:51.380
underscore name and it's going to be equal to that text macro.

60
00:03:51.390 --> 00:03:52.260
And there we go.

61
00:03:52.320 --> 00:03:57.980
Some come at the end and we have defined that constant which we can now use in our create session.

62
00:03:57.990 --> 00:04:05.640
But we can also use an urn get named session which is what I'm going to do and it's going to return

63
00:04:05.670 --> 00:04:07.820
a pointer to that thingy.

64
00:04:07.890 --> 00:04:10.840
Bob which I'm actually not too interested in.

65
00:04:10.860 --> 00:04:13.020
What exact kind of pointer it is.

66
00:04:13.020 --> 00:04:19.590
So for now I'm asking you is the auto key word and I'm going to call this existing.

67
00:04:20.480 --> 00:04:21.380
Session.

68
00:04:23.060 --> 00:04:25.600
That's going to be equal to the get names there.

69
00:04:25.600 --> 00:04:30.200
Now auto just automatically fills in a type for me because I'm not too interested in what it is.

70
00:04:30.200 --> 00:04:35.850
I just know that it's a pointer and then I'm just going to say if existing.

71
00:04:36.840 --> 00:04:40.670
Session equals no pointer.

72
00:04:42.130 --> 00:04:44.950
Well then were you going to have to go ahead and delete the session.

73
00:04:44.950 --> 00:04:48.550
Somehow I'm going to leave that to you to do in a bit.

74
00:04:48.550 --> 00:04:56.730
And if our ELT's need to make sure my brackets are unreel styling convention I always get this wrong.

75
00:04:56.750 --> 00:05:02.410
Else we are going to go ahead and create the session as we normally would.

76
00:05:02.690 --> 00:05:06.640
Okay so that's going to work just hunky dory.

77
00:05:06.640 --> 00:05:10.840
Now I'm going to challenge you to destroy the session if we need to.

78
00:05:10.840 --> 00:05:15.190
Is very similar to creating the session so I am sure you will be able to do it.

79
00:05:15.220 --> 00:05:21.910
Am I going to put up a challenge slider I just want you to make sure that you create the session after

80
00:05:22.000 --> 00:05:23.660
the destruction is complete.

81
00:05:23.680 --> 00:05:28.270
You going to have to use some delegates to do that and you may want to factor this session creation

82
00:05:28.270 --> 00:05:31.060
out in to a separate function.

83
00:05:31.330 --> 00:05:33.630
Okay so pause the video and have a go.

84
00:05:35.620 --> 00:05:37.670
Okay welcome back.

85
00:05:37.690 --> 00:05:39.260
So how are we going to do this.

86
00:05:39.370 --> 00:05:45.670
So the first thing that I said is we're going to want a Dell gets so let's go ahead up to the top and

87
00:05:45.790 --> 00:05:48.300
where we currently registered our on complete douget.

88
00:05:48.310 --> 00:05:53.470
I'm going to also register on destroyed delegates.

89
00:05:54.930 --> 00:05:56.320
Soldiers change the name.

90
00:05:56.400 --> 00:06:00.330
They're complete on session create session complete.

91
00:06:00.360 --> 00:06:02.250
Maybe I won't actually do.

92
00:06:03.150 --> 00:06:06.040
Let's do that again on destroy.

93
00:06:07.790 --> 00:06:08.320
Session.

94
00:06:08.330 --> 00:06:09.270
Complete.

95
00:06:10.160 --> 00:06:17.330
And we're going to want to call a different call back and for clarity sake I am just going to use on

96
00:06:17.780 --> 00:06:20.890
destroying session complete.

97
00:06:21.020 --> 00:06:27.160
Let's see what that colebatch actually takes whether it takes the same arguments as on.

98
00:06:27.990 --> 00:06:29.850
Create session is complete.

99
00:06:31.880 --> 00:06:34.480
If I follow the F on destroy section complete.

100
00:06:34.490 --> 00:06:36.080
Yes it does take the same argument.

101
00:06:36.080 --> 00:06:37.560
So that should just be fine.

102
00:06:37.900 --> 00:06:46.710
Okay so I'm going to go back over to our head a file and copy that and create it in the C++ file so

103
00:06:46.710 --> 00:06:52.140
let's go down to see just after our host.

104
00:06:52.250 --> 00:06:55.780
We're going to have on that destroy session complete.

105
00:06:55.790 --> 00:06:57.510
I'm going to add the name space.

106
00:06:59.150 --> 00:07:01.500
And I am going to define the body.

107
00:07:02.770 --> 00:07:03.410
Okay.

108
00:07:03.580 --> 00:07:04.970
And then.

109
00:07:05.900 --> 00:07:07.140
Fairly straightforward.

110
00:07:07.140 --> 00:07:09.940
We can say that if it was successful.

111
00:07:11.300 --> 00:07:14.760
In destroying We want to go ahead and create.

112
00:07:17.260 --> 00:07:18.210
The session.

113
00:07:19.020 --> 00:07:23.710
Now this I haven't defined yet so let's go ahead and create a create session function.

114
00:07:23.870 --> 00:07:28.930
Can I add it to the private sections going to be void create session.

115
00:07:29.680 --> 00:07:32.650
Because we have everything we need in member variables.

116
00:07:32.650 --> 00:07:38.490
And I'm going to go and take this and hate it in our C++.

117
00:07:39.670 --> 00:07:42.550
Had a body had a namespace.

118
00:07:43.380 --> 00:07:45.030
The class name namespace.

119
00:07:46.140 --> 00:07:52.140
And this is where I'm going to take my create my session settings and the create session call.

120
00:07:52.310 --> 00:07:57.790
And I am going to stick that in there this function just for clarity and I'm going to call create a

121
00:07:57.790 --> 00:08:03.690
session from a host if the session didn't exist and if it didn't exist.

122
00:08:03.690 --> 00:08:06.690
Well that's where we get to call destroy isn't it.

123
00:08:06.720 --> 00:08:09.180
That's where we get to say sesshin interface.

124
00:08:10.650 --> 00:08:11.440
Arrow.

125
00:08:13.180 --> 00:08:17.590
Destroy session which takes just be Session names.

126
00:08:17.590 --> 00:08:18.100
That's easy.

127
00:08:18.100 --> 00:08:22.120
I can just in the session name you can see that in the documentation.

128
00:08:23.520 --> 00:08:29.820
So destroy it just destroys that named session that we've given it which we know exists because Whoops

129
00:08:29.880 --> 00:08:33.730
I've got this the wrong way around existing session is null pointer.

130
00:08:34.020 --> 00:08:36.340
It's actually if it's not null pointer.

131
00:08:37.300 --> 00:08:39.670
That's when we want to destroy any if it is no point to it.

132
00:08:39.700 --> 00:08:41.680
That's when we can go ahead and create it.

133
00:08:41.970 --> 00:08:47.830
Let's have a look at what is currently complaining about saying member function may not be declared

134
00:08:48.160 --> 00:08:50.970
outside of its class.

135
00:08:51.080 --> 00:08:52.370
I see what's going on here.

136
00:08:52.390 --> 00:08:57.250
We have forgotten to remove the semicolon Forbes That's the error that you get Apparently when you forget

137
00:08:57.250 --> 00:08:58.150
to remove the semicolon.

138
00:08:58.150 --> 00:09:01.620
Clearly haven't done that enough to realize that that's what's going on.

139
00:09:01.630 --> 00:09:04.500
Okay so we have got that now.

140
00:09:04.780 --> 00:09:10.990
One little check that I want to do in creates session because we're calling in on destroy session complete.

141
00:09:11.050 --> 00:09:15.220
Is that I want to check that we still got a valid session interface.

142
00:09:15.220 --> 00:09:19.730
So if the session interface is valid.

143
00:09:22.960 --> 00:09:25.900
And then that's when we can actually do the creation.

144
00:09:25.900 --> 00:09:27.750
Because this happened they synchronously you never know.

145
00:09:27.770 --> 00:09:32.910
They might just have disappeared in the intervening time which is not ideal.

146
00:09:33.010 --> 00:09:38.770
Shouldn't disappear because we have a shared pointer so it should be okay but I'm just going to be extra

147
00:09:38.770 --> 00:09:40.230
paranoid and wrap it in a bullet.

148
00:09:40.240 --> 00:09:43.120
Validity check just in case.

149
00:09:43.180 --> 00:09:43.860
Just in case.

150
00:09:43.870 --> 00:09:49.750
And also because if somebody go ahead and create calls create session without first having checked if

151
00:09:49.750 --> 00:09:56.890
the session is valid and if we call it before in it for example then this check is just cannot save

152
00:09:56.890 --> 00:09:58.110
our bacon isn't it.

153
00:09:58.120 --> 00:10:00.220
So that is what I'm gonna do it for.

154
00:10:00.550 --> 00:10:02.690
Let's go ahead and hit behold.

155
00:10:03.490 --> 00:10:10.090
And let's just review the changes that we have made so far what we've got is that when we hit host we

156
00:10:10.090 --> 00:10:17.140
are first checking whether a name session already exists and if it does exist so we're not.

157
00:10:17.140 --> 00:10:22.660
No pointer to the existing session is not null point and then we go ahead and call destroy session if

158
00:10:22.660 --> 00:10:29.320
it if it doesn't exist then we can just create a session at after we have destroyed the session.

159
00:10:29.380 --> 00:10:35.230
We get a call back saying on destroy session complete in which case if it is successful we can go ahead

160
00:10:35.230 --> 00:10:40.150
and create the session creating the session happens like this which we saw in the last lecture and when

161
00:10:40.150 --> 00:10:46.090
the session completes that's when we can go ahead and get the create session complete and actually load

162
00:10:46.120 --> 00:10:46.780
our level.

163
00:10:46.780 --> 00:10:52.260
So let's go over inland to real and see where all of this is actually working out as intended.

164
00:10:52.270 --> 00:10:53.520
Go ahead hit host.

165
00:10:53.620 --> 00:10:55.390
Sure enough it is now.

166
00:10:55.390 --> 00:10:56.290
Not complaining.

167
00:10:56.290 --> 00:11:01.050
We didn't go and change the name so it must have gone ahead and deleted at session.

168
00:11:01.270 --> 00:11:04.430
If I go ahead and hit play again.

169
00:11:05.890 --> 00:11:07.470
He can see I can do it as many times.

170
00:11:07.480 --> 00:11:11.040
MIKE So our destroying has worked.

171
00:11:11.050 --> 00:11:16.930
You'll probably find some logs to the effect of that session having been created in the session being

172
00:11:16.930 --> 00:11:18.520
destroyed.

173
00:11:18.550 --> 00:11:19.120
You may do.

174
00:11:19.120 --> 00:11:21.840
You may not do depend on the logging level.

175
00:11:21.850 --> 00:11:28.750
We can find out about how to do higher logging levels in other lectures we don't need it just yet but

176
00:11:28.780 --> 00:11:32.980
we can see that it's clearly working we've clearly have destroyed the session.

177
00:11:33.040 --> 00:11:38.650
If we need to perfect Congratulations pats on the back all round and let's move on to the next lecture

178
00:11:38.650 --> 00:11:43.500
where we'll try and see if we can get a list of currently active sessions.
