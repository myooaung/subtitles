1
00:00:04,380 --> 00:00:08,970
Welcome to another exciting lecture of one real multiplayer in this one.

2
00:00:08,970 --> 00:00:13,340
I am going to show you how we can differentiate between server and client.

3
00:00:13,340 --> 00:00:16,830
So here we've got a moving platform that we're going to code in this lecture and you can see that on

4
00:00:16,830 --> 00:00:19,160
the left I have my server in on the server.

5
00:00:19,170 --> 00:00:21,090
The platform is moving.

6
00:00:21,090 --> 00:00:27,000
Whereas if I switch over to my client which is on the right and go and have a look at the same queue

7
00:00:27,000 --> 00:00:30,680
you can see for a start it's not in the same position but it's also not moving.

8
00:00:30,690 --> 00:00:36,660
And that's because we've written some conditional code that will only run on the server and doesn't

9
00:00:36,660 --> 00:00:37,700
run on the client.

10
00:00:37,710 --> 00:00:43,260
So in fact you get some weird glitching when you try and run through this queue because as far as the

11
00:00:43,290 --> 00:00:48,930
server is concerned this dude can move freely through it but as far as the client is concerned you can't

12
00:00:48,930 --> 00:00:49,910
move through it.

13
00:00:49,920 --> 00:00:54,600
Got to be dealing with all those sorts of issues around replication in the next lecture.

14
00:00:54,610 --> 00:00:59,550
But in this lecture we're going to be just looking at how we can make different behaviours on server

15
00:00:59,580 --> 00:01:02,810
and client So let's dive right in and see how it's done.

16
00:01:02,820 --> 00:01:08,880
So let's start adding the first real gameplay element the moving platform which is going to be the core

17
00:01:08,910 --> 00:01:10,410
of our game.

18
00:01:10,900 --> 00:01:18,120
I'm going to use a static mesh actor as the basis for this so that it can have some kind of position

19
00:01:18,150 --> 00:01:20,090
some kind of thing in the world.

20
00:01:20,100 --> 00:01:21,510
The static mesh.

21
00:01:21,510 --> 00:01:26,980
So let's begin with that let's go and create a static mesh actor as the base class.

22
00:01:26,980 --> 00:01:32,370
Now the idea of this platform by the way is it's going to be moving just between two points at a fixed

23
00:01:32,370 --> 00:01:32,780
velocity.

24
00:01:32,790 --> 00:01:38,850
So if it RIGHT starts a point A goes to point B it's going to then stop at point B and then go back

25
00:01:38,850 --> 00:01:39,810
to Point A.

26
00:01:39,840 --> 00:01:43,120
That's the kind of moving platform we've seen them in all sorts of games.

27
00:01:43,140 --> 00:01:44,490
I don't have to explain it too much though.

28
00:01:44,520 --> 00:01:51,450
Let's go to the content browser in your own real editor and new and then new seapass plus class at this

29
00:01:51,450 --> 00:01:53,110
point you can be following along with me.

30
00:01:53,130 --> 00:01:59,910
Now once you get that dialogue I would like to go to show all classes because the actors static mesh

31
00:02:00,000 --> 00:02:06,840
is not a Under the normal classes shown without doing a show or classes.

32
00:02:06,840 --> 00:02:09,360
So it's called static mash act.

33
00:02:10,210 --> 00:02:14,560
So let the static mesh act then go to next.

34
00:02:14,960 --> 00:02:16,560
I'm going to give it a name.

35
00:02:16,570 --> 00:02:18,280
Mine's going to be called Burt.

36
00:02:18,310 --> 00:02:21,150
No it's not it's going to be called moving platform.

37
00:02:22,480 --> 00:02:24,580
A very obvious name.

38
00:02:24,640 --> 00:02:27,820
And then we're going to go ahead and create the class and let it compile.

39
00:02:27,850 --> 00:02:32,960
Now at this stage this should be the kind of stuff that you're familiar with and comfortable with.

40
00:02:32,980 --> 00:02:38,230
So I'm going to give you a little mini challenge to go through and do this for yourself or you can follow

41
00:02:38,230 --> 00:02:41,880
along with me if you're feeling pretty confident you can do it quickly because I'm going to zoom through.

42
00:02:42,190 --> 00:02:48,430
So the thing that we're going to do is create a moving platform that just has basically a constant velocity

43
00:02:48,460 --> 00:02:48,900
at the moment.

44
00:02:48,900 --> 00:02:54,040
It's not going to go to Point A and B it's just going to go away from point A at constant velocity.

45
00:02:54,040 --> 00:02:56,610
In for example the x direction.

46
00:02:56,710 --> 00:03:03,110
So it's just going to move at five centimetres per second in the x direction just continuously going

47
00:03:03,100 --> 00:03:07,330
to through walls it's going to not care about any kind of physics obstacles there's just going to move

48
00:03:07,330 --> 00:03:08,740
super super simple.

49
00:03:08,740 --> 00:03:14,410
Now I'd like you to remember just a couple of caveats here we've got the moving platform actor and I'd

50
00:03:14,410 --> 00:03:21,130
like you to remember that moving objects need to have a mobile mobility that's one thing.

51
00:03:21,130 --> 00:03:25,320
And also remember that by default not all actors tick.

52
00:03:25,450 --> 00:03:30,700
So if you're having issues getting something going in the tick then that might be the reason for it.

53
00:03:31,010 --> 00:03:36,360
Okay so you can play a video and have a go at it putting together your own static mesh actor.

54
00:03:37,300 --> 00:03:42,580
Okay if you've done that or are just going through with me then let's go through.

55
00:03:42,580 --> 00:03:48,790
So I am going to go over in two visual studio and advance the bar at the bottom because we're adding

56
00:03:48,790 --> 00:03:51,430
mobility in C++.

57
00:03:51,550 --> 00:03:58,990
So the first thing I want to do is enable ticking on this object so I'm going to use the public specifier.

58
00:03:59,560 --> 00:04:04,540
For the constructor and in the construct we'll set up ticking.

59
00:04:04,540 --> 00:04:06,310
So it's going to be a moving platform.

60
00:04:06,310 --> 00:04:12,610
I like to copy and paste so copy and paste the moving platform definition and go into the C plus plus

61
00:04:12,610 --> 00:04:18,880
file and would be a moving actor platform coelen code a moving actor platform no arguments to the constructor

62
00:04:18,910 --> 00:04:21,130
and curly braces for the body.

63
00:04:21,130 --> 00:04:30,160
Then we are going to set it to tick so that is primary actor tick dot B can ever tick equals true.

64
00:04:30,430 --> 00:04:32,160
Basically yes we can tick.

65
00:04:32,250 --> 00:04:35,620
Now if you don't remember that then you can look it up in the documentation.

66
00:04:35,620 --> 00:04:38,990
It's a fairly standard thing to do with new actors.

67
00:04:39,160 --> 00:04:44,150
Then we are going to create an override the ticking method.

68
00:04:44,210 --> 00:04:49,890
In fact I think I'll leave that one as Verch as a public function.

69
00:04:49,930 --> 00:04:54,520
Tell me about that tell me what your feelings are on whether tick should be virtual or public.

70
00:04:54,520 --> 00:05:00,460
It's kind of an ambiguous one so it's going to be a virtual void of the return type of tick.

71
00:05:00,730 --> 00:05:03,770
It's going to take a float which is a delta time.

72
00:05:06,060 --> 00:05:08,000
And it is going to.

73
00:05:08,010 --> 00:05:13,690
I'm just going to put override on the end as a kind of safety guard to make sure that indeed I'm overriding

74
00:05:13,740 --> 00:05:18,480
and haven't missed belts and the tick and I'm not creating something new.

75
00:05:18,630 --> 00:05:21,470
Now I'm actually copying this definition from off screen.

76
00:05:21,480 --> 00:05:27,690
I don't expect you to remember it off by heart so do go and copy and paste it from unreel documentation

77
00:05:27,720 --> 00:05:29,830
or from other engine code.

78
00:05:30,390 --> 00:05:32,300
So take that Tich definition.

79
00:05:32,300 --> 00:05:39,120
Everything after virtual before override paste it into the C++ file and then copy and paste the class

80
00:05:39,120 --> 00:05:46,950
name just for name spacing Matt and remove the at sign that I accidentally typed there and then we're

81
00:05:46,950 --> 00:05:49,090
going to implement the body with curly braces again.

82
00:05:49,110 --> 00:05:55,620
Now I want to make sure now I know that in this case with a static mesh actor there is no supertech

83
00:05:55,660 --> 00:06:02,070
but just for being in the habit I want to make sure I call the super method when overriding classes

84
00:06:02,160 --> 00:06:03,750
and I'm going to pass it.

85
00:06:03,750 --> 00:06:10,380
The argument that was passed to me which is the delta time and then we can actually getting to implementing

86
00:06:10,380 --> 00:06:11,660
this thing.

87
00:06:11,700 --> 00:06:16,940
So what we want to do is go ahead and get the actor locations sell-outs get actor location.

88
00:06:18,920 --> 00:06:26,300
Which you can find in any good documentation for unreal like its own and that go ahead save that location

89
00:06:26,300 --> 00:06:29,150
into a variable which is going to be of type f vector.

90
00:06:29,300 --> 00:06:32,410
You can see that again in the documentation.

91
00:06:32,510 --> 00:06:38,810
I'm not going to regurgitate all this stuff which is fairly basic knowledge then we're going to location

92
00:06:39,200 --> 00:06:40,430
plus equals.

93
00:06:40,640 --> 00:06:47,840
And it's I'm going to increment it by an F vector So I'm going to add an F vector to it which is only

94
00:06:47,840 --> 00:06:52,130
in the x direction so let's have a look at the constructor is available here.

95
00:06:52,130 --> 00:06:55,270
We've got three of them and I'm going to.

96
00:06:55,480 --> 00:06:56,850
Got 11 of them actually.

97
00:06:56,930 --> 00:07:04,040
I'm going for the one with three arguments which is the X Y Z floats and I'm going to pass in a distance

98
00:07:04,040 --> 00:07:10,430
to move in X which is going to be my velocity of five centimetres per second centimetre remember.

99
00:07:10,430 --> 00:07:14,890
Are the units in unreel at five cents per second multiplied by Delta.

100
00:07:14,890 --> 00:07:19,470
Time will give me the distance to move because I've got a meters per second.

101
00:07:19,610 --> 00:07:24,830
Multiplied by a unit which is in seconds which tells me how much to move in this frame and then I'm

102
00:07:24,830 --> 00:07:26,860
going to put 0 for Y and Z.

103
00:07:26,870 --> 00:07:29,830
So it's just moving in the x axis.

104
00:07:29,900 --> 00:07:34,220
Now that I have taken a copy of location I have incremental that copy of location I want to set that

105
00:07:34,220 --> 00:07:40,940
back to the actual location to update our location so that's going to be a set at a location.

106
00:07:42,720 --> 00:07:50,800
Or I can type set at location location semco and that could be hit.

107
00:07:50,810 --> 00:07:55,760
You might be tempted to think that's it but remember that this is not an immovable object.

108
00:07:55,760 --> 00:07:58,690
It's by default all actors are going to be static objects.

109
00:07:58,820 --> 00:08:02,390
So want to set them ability in the constructor.

110
00:08:02,390 --> 00:08:08,420
Now if you not come across sensibility before don't worry it is basically if we take this moving platform

111
00:08:08,480 --> 00:08:15,290
that I've got in I just created in my content browser and go to unreal content browser get a moon platform

112
00:08:15,290 --> 00:08:17,590
drop it into the world and they go.

113
00:08:17,590 --> 00:08:24,560
It's created a object in the world a moving platform and that moving platform hasn't got a static mesh.

114
00:08:24,560 --> 00:08:29,170
So first of all let's go and add a cube as a static mesh so that we can see it better.

115
00:08:29,240 --> 00:08:31,080
And there's my moving platform.

116
00:08:31,100 --> 00:08:32,100
Fair enough.

117
00:08:32,180 --> 00:08:33,920
And if you look at the details.

118
00:08:33,920 --> 00:08:34,740
Pain.

119
00:08:35,950 --> 00:08:42,010
You will notice that under the transform category we have a mobility property which is static.

120
00:08:42,010 --> 00:08:48,010
Now if you try and you can try this now to move it without setting that mobility it's going to give

121
00:08:48,010 --> 00:08:50,380
you an error in the output lock.

122
00:08:50,410 --> 00:08:57,500
So let's go back in two moving platforms constructor and do a set mobility.

123
00:08:57,600 --> 00:09:04,480
It can look in the documentation perhaps if you weren't sure what that method call was e component.

124
00:09:06,330 --> 00:09:07,670
Mobility is the type.

125
00:09:07,670 --> 00:09:10,900
It says it's taking it's a nun.

126
00:09:11,220 --> 00:09:17,940
So Ian punnett mobility chalong Coleman moveable and then semco on to end that off.

127
00:09:17,990 --> 00:09:20,880
So that's just going to make our component movable.

128
00:09:21,090 --> 00:09:26,010
Let's go ahead and compile those changes.

129
00:09:27,240 --> 00:09:32,340
Now if that was all moving a little bit faster for you you might want to go through and look at it again.

130
00:09:32,400 --> 00:09:36,990
But definitely I recommend taking these challenges these many challenges when I suggest you take them

131
00:09:37,350 --> 00:09:42,870
so that you can have had a look at the relevant documentation for things like settlor ability for set

132
00:09:42,870 --> 00:09:45,140
actor location get out to location.

133
00:09:45,150 --> 00:09:49,980
Before I go through it because this is slightly more advanced course we don't want to be getting stuck

134
00:09:50,070 --> 00:09:52,630
in the details we want to be up at a higher level.

135
00:09:53,070 --> 00:09:54,690
So says my campath has failed.

136
00:09:54,690 --> 00:09:59,040
Let's go and have a look at what compile failure is I'm going to show the log because this is a little

137
00:09:59,040 --> 00:10:00,410
bit easier to read.

138
00:10:00,870 --> 00:10:04,610
Okay syntax errors I have mistyped clearly.

139
00:10:04,620 --> 00:10:06,630
So let's go and see what that syntax error is.

140
00:10:06,660 --> 00:10:08,220
Yes you probably saw it.

141
00:10:08,250 --> 00:10:10,320
I did not see it while I was typing.

142
00:10:10,410 --> 00:10:13,540
So it is just a square bracket.

143
00:10:13,680 --> 00:10:17,890
For those of you just listening rather than watching my video ID my mistakes.

144
00:10:18,090 --> 00:10:20,540
So you were probably screaming Sam it's not going to compile.

145
00:10:20,550 --> 00:10:23,030
Well now it has indeed compiled.

146
00:10:23,220 --> 00:10:25,500
So let's see if it actually works.

147
00:10:25,500 --> 00:10:31,440
I'm going to go ahead and hit play and go up to my slow moving platform and see whether it is indeed

148
00:10:31,440 --> 00:10:32,790
slow moving.

149
00:10:32,790 --> 00:10:34,440
No it's not an escape.

150
00:10:35,100 --> 00:10:42,570
And see what could the matter be now often what the matter can be is that the constructer doesn't get

151
00:10:42,570 --> 00:10:46,080
called again when we just play quick edit.

152
00:10:46,080 --> 00:10:48,500
It actually does get called again.

153
00:10:48,510 --> 00:10:53,820
But the reason it's not getting updated is because changing the variable in the constructor won't change

154
00:10:53,850 --> 00:11:00,450
the values that have already existed in the world and in the derived BPL these will stay there as you

155
00:11:00,450 --> 00:11:05,850
will now get a little yellow arrow which you can check off which will allow you to go back the defaults

156
00:11:05,910 --> 00:11:07,130
set in the constructor.

157
00:11:07,140 --> 00:11:09,860
Thanks to Dan M for pointing that out.

158
00:11:10,000 --> 00:11:14,850
So let's make sure that we can refresh this moving platform going to delete the moving platform.

159
00:11:14,850 --> 00:11:18,410
Go back to the content browser and place it again.

160
00:11:18,550 --> 00:11:24,130
Raise it a little bit off the ground and add in the static mesh and go ahead and hit play.

161
00:11:24,390 --> 00:11:27,350
And now let's see whether that refresh has helped move.

162
00:11:27,480 --> 00:11:28,110
Yes it has.

163
00:11:28,110 --> 00:11:28,820
Look at it go.

164
00:11:28,820 --> 00:11:34,080
It is rocketing away at 5 centimetres per second.

165
00:11:34,080 --> 00:11:40,020
Mega slow So do tune your eye into it as you may not be able to see the cube moving at all on a first

166
00:11:40,020 --> 00:11:40,800
pass.

167
00:11:40,800 --> 00:11:45,720
But that is enough for us to test the next thing which is actually the purpose of this lecture which

168
00:11:45,750 --> 00:11:54,420
is to understand where the code is running here in the client or whether it's running on the server

169
00:11:54,450 --> 00:11:58,470
whether we are a server or a client.

170
00:11:58,590 --> 00:12:03,280
So let's just back up there just a minute and change gears.

171
00:12:03,330 --> 00:12:10,770
What I'm talking about is that when we have multiple players playing and we have these multiple windows

172
00:12:11,520 --> 00:12:17,350
there is no dedicated server running one of the clients is the server for the other client.

173
00:12:17,670 --> 00:12:24,300
And what I'm asking here is how can we tell whether we are the server client or just the client client

174
00:12:24,780 --> 00:12:27,190
and what what should we do about that.

175
00:12:27,210 --> 00:12:34,080
And in fact when we have a server whereas the code for that server and how is it different to the client

176
00:12:34,080 --> 00:12:37,500
and when we write code is it on the server or is it on the client.

177
00:12:37,680 --> 00:12:39,260
Well as the question I want to answer.

178
00:12:39,270 --> 00:12:45,740
Basically the code that we write runs both on the server and the client in exactly the same way.

179
00:12:46,020 --> 00:12:47,360
Exactly the same way.

180
00:12:47,370 --> 00:12:52,500
The only difference being that there are some method calls that allow us to detect whether we are the

181
00:12:52,500 --> 00:12:54,790
client or whether we are the server.

182
00:12:55,020 --> 00:12:58,800
Namely that method call is has authority.

183
00:12:58,800 --> 00:13:01,980
Let me just go over into visual studio and show you what I mean.

184
00:13:02,040 --> 00:13:05,360
We've got a method called intech called has authority.

185
00:13:06,300 --> 00:13:13,300
Has authority in fact not just intake it's anywhere on an actor and that has authority method.

186
00:13:13,320 --> 00:13:16,930
As you can see is on a actor and returns boolean.

187
00:13:17,040 --> 00:13:22,200
When it's the server remember that we said the server is authoritative It keeps is the one with the

188
00:13:22,200 --> 00:13:24,880
true state that tells everybody else what the state should be.

189
00:13:24,880 --> 00:13:26,630
So that's why it's called has authority.

190
00:13:26,660 --> 00:13:31,320
Say you've got something to link it to and it returns it and so if it's true it's a server.

191
00:13:31,320 --> 00:13:35,350
If it's false it's a client because you can either be assigned or you can be applied.

192
00:13:35,700 --> 00:13:37,920
And that explains it okay.

193
00:13:38,610 --> 00:13:40,650
Time for another small challenge this time.

194
00:13:40,650 --> 00:13:46,140
To do with the actual meat of the lecture I'd like you to make it so that we are only moving on the

195
00:13:46,140 --> 00:13:51,930
server and on the client that cube doesn't move at all so it should only be on the server.

196
00:13:51,960 --> 00:13:54,210
That's the definition of the challenge.

197
00:13:54,210 --> 00:13:58,470
Remember that you've got has authority that you can use to do that or any other method that you might

198
00:13:58,470 --> 00:13:58,790
know of.

199
00:13:58,790 --> 00:14:02,970
If you know a little bit about unreal multiplayer already then you can use any other method just to

200
00:14:02,970 --> 00:14:04,250
achieve this.

201
00:14:04,560 --> 00:14:08,790
And then I would like you to just abstract the speak because we've got hard coded five centimetres per

202
00:14:08,790 --> 00:14:09,120
second.

203
00:14:09,120 --> 00:14:10,550
What is that that's arbitrary.

204
00:14:10,560 --> 00:14:14,350
Let's make that into a blueprint editable variable as well while we're at it.

205
00:14:14,430 --> 00:14:15,730
So pause a video and have a go.

206
00:14:17,880 --> 00:14:18,860
Okay welcome back.

207
00:14:18,860 --> 00:14:25,270
Now if this isn't working for you do remember to first of all go and check with the code.

208
00:14:25,290 --> 00:14:29,420
Check your code against the link attached to every lecture.

209
00:14:29,440 --> 00:14:33,350
That's always very helpful if you have any issues with the coding challenges.

210
00:14:33,360 --> 00:14:37,490
Now with a bit of testing you should be able to do this fairly easily.

211
00:14:37,530 --> 00:14:40,630
So it has authority is obviously returning boolean.

212
00:14:40,710 --> 00:14:48,980
So I'm going to just wrap our movement code inside and if statement so I'm going to say if it has authority.

213
00:14:52,010 --> 00:14:53,140
And then.

214
00:14:53,210 --> 00:14:58,370
Be curly brackets I'm going to put my curly brackets on a new line to be in line with an Real's coding

215
00:14:58,370 --> 00:14:59,270
conventions.

216
00:14:59,420 --> 00:15:09,370
And I'm going to nest my movement code under the has authority if statement and then remove lines 23

217
00:15:09,380 --> 00:15:12,670
through 24 which was just for showing you.

218
00:15:13,960 --> 00:15:17,670
Okay so this should now if we go ahead and build it.

219
00:15:17,800 --> 00:15:20,220
Only run on the server.

220
00:15:21,260 --> 00:15:22,260
Things crossed.

221
00:15:22,430 --> 00:15:29,150
And while we're at this let's go ahead and abstract out this number five which I do not like one bit

222
00:15:30,380 --> 00:15:35,140
of course for being a hard coded value so let's go ahead and do it you property.

223
00:15:37,020 --> 00:15:40,590
That will give us the actual speed of the object.

224
00:15:40,620 --> 00:15:43,460
And it's going to be an edit anywhere.

225
00:15:45,390 --> 00:15:49,890
So that we can edit both in blue prints but also in the map.

226
00:15:50,160 --> 00:15:57,570
And then I want to do a float speed equals five is a bit slow let's do 20.

227
00:15:58,160 --> 00:15:58,870
That's correct.

228
00:15:58,870 --> 00:16:04,680
The indentation that visual studio so incessantly wants to put into our header files and then I'm going

229
00:16:04,680 --> 00:16:09,090
to replace the five with the speed that we just defined.

230
00:16:09,140 --> 00:16:13,180
Let's go ahead and make sure that that's included in the compile as well.

231
00:16:13,910 --> 00:16:14,870
Compellation complete.

232
00:16:14,870 --> 00:16:17,440
Let's go ahead and hit play.

233
00:16:17,810 --> 00:16:23,330
And I'm going to move up to this dude and see that he is moving so I reckon I am the server.

234
00:16:23,600 --> 00:16:29,420
Let's go and have a look at the other dude which I reckon is the client and see whether he sees the

235
00:16:29,420 --> 00:16:31,050
Q Moving or not.

236
00:16:31,070 --> 00:16:31,970
No you see.

237
00:16:32,120 --> 00:16:35,640
So this is the difference that we have going on here.

238
00:16:35,710 --> 00:16:41,480
Now what's actually happening here is that the cube is not getting pushed from the server down to the

239
00:16:41,480 --> 00:16:45,140
client because by default actually actors don't get updated.

240
00:16:45,140 --> 00:16:45,590
Unreal.

241
00:16:45,660 --> 00:16:52,130
Optimizers that way and you have to tell explicitly to do it so what's happening here is that cube is

242
00:16:52,130 --> 00:16:59,540
saying well I'm on a server so I will move or I'm not on a server so I won't move and nothing else happens.

243
00:16:59,540 --> 00:17:02,810
There are no kind of replication that state happens to the client.

244
00:17:02,870 --> 00:17:08,240
So from the client's point of view that cube does not move because he doesn't get the code running that

245
00:17:08,240 --> 00:17:09,800
says it should move.

246
00:17:10,040 --> 00:17:15,110
Just get that into your head and if you really want to just cement a little bit more you can stick some

247
00:17:15,110 --> 00:17:19,400
logging statements in there as well and you should be able to see what I'm talking about.

248
00:17:19,400 --> 00:17:23,930
Or you can do some other things like getting it to move in the other direction.

249
00:17:24,020 --> 00:17:30,590
If it's a client and that should help understand things but you can see that actors are indeed being

250
00:17:30,590 --> 00:17:35,600
shown the same on both screens but that cube is not as he can see the cube totally disappeared from

251
00:17:35,600 --> 00:17:40,910
ISO has probably gone through the wall at this point so that gives us some idea of whether code is running

252
00:17:40,940 --> 00:17:46,400
on the server or not and in the next we can talk a little bit more about this tricky issue of why the

253
00:17:46,400 --> 00:17:53,090
cube doesn't stay the same between the client and server whereas these two characters are in exactly

254
00:17:53,090 --> 00:17:53,930
the same position.

255
00:17:53,930 --> 00:17:55,600
We're going to deal with that in the next lecture.

256
00:17:55,610 --> 00:17:57,230
So see you there.
