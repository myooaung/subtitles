1
00:00:04,910 --> 00:00:06,520
Hello and welcome in this lecture.

2
00:00:06,530 --> 00:00:11,500
We are going to be learning about a technique called meche offsetting At least that's what I call it.

3
00:00:11,630 --> 00:00:17,930
And it's for client appellation to make sure that the position of our Collider doesn't go through different

4
00:00:17,930 --> 00:00:22,190
routes because we're using this approximation of clear interpellation for the smoothness.

5
00:00:22,190 --> 00:00:28,730
So what you're going to see here as I move my authority around you can see that the collider is moving

6
00:00:28,730 --> 00:00:35,000
ahead of the simulated proxy so the collider is actually moving through the route advertise to us from

7
00:00:35,000 --> 00:00:35,630
the server.

8
00:00:35,660 --> 00:00:38,380
So it's never in an incorrect position.

9
00:00:38,480 --> 00:00:44,810
However the mesh is being offset against that Collider location so the Calli location is at the root

10
00:00:45,180 --> 00:00:46,760
is the active location.

11
00:00:46,910 --> 00:00:53,720
But the mesh is having a different offset so that it gives the illusion of the actor moving smoothly.

12
00:00:53,720 --> 00:00:56,020
So we're going to figure out how we can achieve this.

13
00:00:56,030 --> 00:00:57,920
Let's dive in and see how.

14
00:00:58,710 --> 00:01:01,880
So let's highlight the issue that we're trying to fix in this lecture.

15
00:01:01,890 --> 00:01:09,150
If we go ahead and play and I if I just open it up again this time hopefully we'll on positive will

16
00:01:09,150 --> 00:01:09,720
show up.

17
00:01:09,840 --> 00:01:14,490
But the authority on the rights or Torse proxy on the left and I'm going to drive the authority around

18
00:01:14,940 --> 00:01:20,100
so here goes my authority I'm going to do the pins are going to go between the pins and you can see

19
00:01:20,120 --> 00:01:25,740
that authority or the simulated proxy rather is knocking over pins left right and centre even though

20
00:01:26,250 --> 00:01:28,690
on the server I've dodged them all.

21
00:01:28,740 --> 00:01:29,540
Now why is that.

22
00:01:29,590 --> 00:01:34,350
That's because the kubik interpolation is going through a different path than what's on the server it's

23
00:01:34,350 --> 00:01:35,050
still smooth.

24
00:01:35,060 --> 00:01:38,100
It looks good but it's not the same path.

25
00:01:38,310 --> 00:01:44,220
And we don't want to fix that issue but we do want to fix the issue where the collider of the simulated

26
00:01:44,220 --> 00:01:47,280
proxy goes through that path.

27
00:01:47,280 --> 00:01:49,560
That's different to that on the server.

28
00:01:49,620 --> 00:01:53,480
And the problem that that creates obviously is that sometimes it can knock over things.

29
00:01:53,490 --> 00:01:54,660
It's not meant to.

30
00:01:54,750 --> 00:01:57,980
Sometimes it can cause false collisions etc..

31
00:01:58,200 --> 00:02:06,600
So what we want to do and if we go ahead to our See our credit card folder and open the BP Go Card is

32
00:02:06,600 --> 00:02:13,530
we want to make sure that we only ever change the location of the actor and therefore the box Collider

33
00:02:13,560 --> 00:02:19,800
off the actor when there is a server updates so we know that that is a legitimate position that the

34
00:02:19,800 --> 00:02:21,580
server has been in.

35
00:02:22,140 --> 00:02:29,100
However we want our skeletal mesh to move smoothly through our client interpellation.

36
00:02:29,100 --> 00:02:29,910
So how can we do that.

37
00:02:29,910 --> 00:02:35,640
Well quite simply we can position that skeletal mesh in a different place to the box Collider and that's

38
00:02:35,640 --> 00:02:38,410
what we're going to attempt to achieve.

39
00:02:38,460 --> 00:02:46,110
Now there is a slight catch here is that this skeletal mesh is offset against our box.

40
00:02:46,110 --> 00:02:51,630
So what we really want to do is not move the skeletal mesh itself but rather something else that is

41
00:02:51,690 --> 00:02:57,780
at zero so I'm going to select the box I'm going to go to add component and create a new scene component

42
00:02:57,780 --> 00:03:00,000
here and is seen component.

43
00:03:00,000 --> 00:03:05,400
I am going to call the name of this technique which is meche offsetting.

44
00:03:05,400 --> 00:03:08,290
So I'm going to call this the mesh offset route.

45
00:03:08,460 --> 00:03:09,350
Do that.

46
00:03:11,000 --> 00:03:11,300
Okay.

47
00:03:11,300 --> 00:03:16,230
Like so and then I want to child discuss full mesh to that mesh offset route.

48
00:03:16,370 --> 00:03:21,620
And as you can see the mesh of that route is now at 0 0 0 and the scuttleful mesh has got its offset

49
00:03:21,620 --> 00:03:27,130
which is fine and that means that if I move the mesh offset route to any location.

50
00:03:27,860 --> 00:03:33,200
It is going to keep that relative offset of the skeletal mesh so that it's about the right height off

51
00:03:33,200 --> 00:03:35,890
the ground which is what we want.

52
00:03:35,900 --> 00:03:41,960
So what we're going to be doing essentially is ENaC interpellation code we're going to be setting the

53
00:03:41,960 --> 00:03:47,640
offset of this mesh offset route in global space coordinates.

54
00:03:47,720 --> 00:03:52,880
And when we get an update from the server We will update the location of an actor and therefore our

55
00:03:52,880 --> 00:03:53,390
box.

56
00:03:53,390 --> 00:03:59,420
This means that our box will not be moving the same route as the mesh which is okay and casing the mesh

57
00:03:59,420 --> 00:04:00,810
may pass through things.

58
00:04:00,860 --> 00:04:01,850
That's fine.

59
00:04:01,850 --> 00:04:03,830
It'll look more or less okay.

60
00:04:03,860 --> 00:04:09,920
So again this is just an approximation technique we are really only sending an update once every second

61
00:04:10,080 --> 00:04:12,640
and it's impossible to get things perfect.

62
00:04:12,650 --> 00:04:15,500
It's all about trade-offs and just making it look right.

63
00:04:15,650 --> 00:04:20,150
So I'm going to go ahead and save this and compile it because what we want to do next is set up the

64
00:04:20,150 --> 00:04:26,720
mesh offset route component and connect it up to app movement replicator.

65
00:04:26,750 --> 00:04:34,640
So let's go to Visual Studio and open up movement replicated that s.p. and go to the head of file down

66
00:04:34,640 --> 00:04:39,200
at the bottom of the head of file and going to create a new you prompt and it is going to point to a

67
00:04:39,200 --> 00:04:41,850
you seen component.

68
00:04:44,080 --> 00:04:44,740
Asterisk.

69
00:04:44,770 --> 00:04:49,200
And then we are going to call this obviously the same as we've called it in.

70
00:04:49,280 --> 00:04:53,970
BP go kart which is going to be the mesh offset route.

71
00:04:54,010 --> 00:04:57,810
So mesh offset route.

72
00:04:57,980 --> 00:04:58,790
Mike so.

73
00:04:59,320 --> 00:04:59,820
Okay.

74
00:05:00,040 --> 00:05:01,840
Now this measure offset route.

75
00:05:02,020 --> 00:05:07,210
We haven't got it set here how we're going to go ahead and set it well actually because we've created

76
00:05:07,210 --> 00:05:12,640
it in the blueprint we haven't created it in C++ and because the box Collider is also created in blueprint

77
00:05:12,640 --> 00:05:14,110
so it's going to be complicated.

78
00:05:14,110 --> 00:05:16,450
Basically if I try and create the scene root anywhere.

79
00:05:16,540 --> 00:05:22,450
But blueprint I'm going to create a setter in blueprint as well so it's going to be a u function so

80
00:05:22,450 --> 00:05:23,620
we can call it from blueprint.

81
00:05:23,620 --> 00:05:25,810
I'm going to make it blueprint callable.

82
00:05:27,410 --> 00:05:34,480
And the signature is going to be void and just going to be basically a setter for this mesh offset route

83
00:05:34,490 --> 00:05:43,040
so he's going to copy mesh offset route set and I am going to take a you seen component star.

84
00:05:43,960 --> 00:05:47,490
And I'm not going to call it meche offset route but rather just route.

85
00:05:47,650 --> 00:05:54,930
And then I can implement it here in line some going to get the mesh offset route is equal to that route

86
00:05:56,050 --> 00:06:01,470
semicolon and that should be good enough.

87
00:06:01,570 --> 00:06:08,050
I'm going to go ahead and build here and see if we've got this you function to call from our blueprint

88
00:06:08,810 --> 00:06:09,990
was built successfully.

89
00:06:10,000 --> 00:06:15,910
Let's go over to the BP go cart and go to the event graph and begin play which is where we are going

90
00:06:15,940 --> 00:06:20,750
to try to call this set mesh offset route.

91
00:06:21,010 --> 00:06:26,920
So drag off the pin from begin play selected the mesh the movement replicator component and we're going

92
00:06:26,920 --> 00:06:34,060
to call set mesh offset route to go that seems to have worked and we're going to drag in a mesh offset

93
00:06:34,060 --> 00:06:39,190
rate component to activate this setup song and go ahead save compile that.

94
00:06:39,190 --> 00:06:41,010
This is just the easy way out.

95
00:06:41,140 --> 00:06:42,450
We've got little warning here.

96
00:06:42,460 --> 00:06:47,230
It's saying that it isn't the mesh replicator is not blueprint visible.

97
00:06:47,230 --> 00:06:56,200
So we do want it to be blueprint visible and to do that we have to go in to our go cart or H and find

98
00:06:56,790 --> 00:06:57,430
out.

99
00:06:57,850 --> 00:07:00,730
Two components which are visible anywhere.

100
00:07:00,760 --> 00:07:04,300
We also want them to be blue print visible.

101
00:07:05,470 --> 00:07:10,780
We can do that for both the components while we're at it no point them not being visible in blue print

102
00:07:10,780 --> 00:07:13,560
Let's go ahead and build it again and see.

103
00:07:13,640 --> 00:07:18,700
So it looks like blue print visible is not the term it's actually read only I believe so going to have

104
00:07:18,850 --> 00:07:20,810
a blueprint read only for both of these.

105
00:07:21,010 --> 00:07:22,420
Let's go and build that.

106
00:07:22,720 --> 00:07:27,700
Okay and finally saying the blueprint read only cannot be used on private members so let's move that

107
00:07:27,760 --> 00:07:29,780
in to the public section.

108
00:07:29,950 --> 00:07:34,960
Although it pains me slightly then do tell me if you can think of a better way than moving it into the

109
00:07:34,960 --> 00:07:37,790
public section let's go ahead build and see if that works.

110
00:07:38,700 --> 00:07:39,380
Okay great.

111
00:07:39,390 --> 00:07:43,380
That did actually finally compile and go over to our go car.

112
00:07:43,380 --> 00:07:45,240
And sure enough we compile it.

113
00:07:45,240 --> 00:07:48,750
The error has gone away so I'm happy with that.

114
00:07:48,780 --> 00:07:54,210
So one more thing that I want to do is make a box Collider visible so I'm going to go and select the

115
00:07:54,210 --> 00:07:59,250
box Collider in the BP go cart and I'm going to go down to a rendering where you can see it is visible

116
00:07:59,280 --> 00:08:00,690
but it's hidden in game.

117
00:08:00,690 --> 00:08:05,070
So let's compile and save that blueprint and move it into the main window.

118
00:08:05,070 --> 00:08:09,810
And then I'm going to go ahead and play with our colliders posable and you can see that if I move the

119
00:08:09,810 --> 00:08:15,480
authority in front of the autonomous proxy his Collider is moving along with him what we want to happen

120
00:08:15,480 --> 00:08:21,510
is for that Collider to be moving in jumps as the server updates come through and the car to still be

121
00:08:21,510 --> 00:08:22,620
moving smoothly.

122
00:08:22,920 --> 00:08:29,090
So I'm actually going to leave this up to you in a fairly open ended challenge to manipulate the offset.

123
00:08:29,220 --> 00:08:33,650
So what you're going to do you're going to reset the actor location on rep.

124
00:08:33,720 --> 00:08:36,670
So that's the only time we're going to change the location I want.

125
00:08:36,690 --> 00:08:42,810
Everywhere else you need to strip out the use of the at location instead use the component location

126
00:08:42,810 --> 00:08:46,110
both getting the component location and setting the location.

127
00:08:46,170 --> 00:08:52,080
Beware that you'll need to make sure it's the global location and not the local location and you need

128
00:08:52,080 --> 00:08:54,780
to do obviously rotation as well.

129
00:08:54,780 --> 00:08:58,690
So pause the video and have a go at this challenge.

130
00:08:59,760 --> 00:09:00,440
Okay welcome back.

131
00:09:00,440 --> 00:09:06,900
Hopefully you managed okay with that challenge it's a little bit tricky but I'm sure you got at least

132
00:09:06,960 --> 00:09:09,550
some headway which is the most important thing.

133
00:09:09,840 --> 00:09:12,200
Let's go to the replicator s.p..

134
00:09:12,220 --> 00:09:16,590
I've got to open some reason but this year seems to be liking giving me two files at the moment.

135
00:09:16,590 --> 00:09:20,930
Probably something to do with checking in and checking out and stashing and so on and so forth.

136
00:09:21,180 --> 00:09:28,440
So first of all I said on rep server state is where we are going to be setting our actors transform

137
00:09:29,310 --> 00:09:30,710
and that is what were going to do.

138
00:09:30,710 --> 00:09:41,060
So I'm going to say the get owner just at the end of this function and do get own a set actor transform

139
00:09:41,070 --> 00:09:45,150
Now I don't like that we've got these reds quigley's and I can't auto complete so I'm going to actually

140
00:09:45,150 --> 00:09:51,660
go ahead and include the head of file for the acto shouldn't be strictly necessary because we compile

141
00:09:52,040 --> 00:09:57,860
but it is in the game framework folder and it is game framework.

142
00:09:58,040 --> 00:10:00,120
Actor Don H.

143
00:10:00,390 --> 00:10:06,720
Like so and that should hopefully they go remove the Reds greeley's from all those get owner calls and

144
00:10:06,710 --> 00:10:09,050
it's just to help out with autocomplete really.

145
00:10:09,280 --> 00:10:10,880
So then where was I.

146
00:10:10,880 --> 00:10:14,400
I was in the on rep for the simulated proxy.

147
00:10:14,400 --> 00:10:19,350
Were going to then do a set actor transforms somewhere.

148
00:10:19,380 --> 00:10:22,010
Let's find out where that is.

149
00:10:22,040 --> 00:10:24,810
I guess I asked a transform and what are we setting it from.

150
00:10:24,810 --> 00:10:28,710
We're selling it from the server state DOT transform.

151
00:10:28,710 --> 00:10:35,480
So we're going to be jolting this actor with every successive update like we had been doing previously.

152
00:10:35,700 --> 00:10:40,780
But the difference is that we're going to be changing a mesh offset in between these updates.

153
00:10:40,780 --> 00:10:45,300
This is actually what happens in the character component with the interpolation if you care to go and

154
00:10:45,300 --> 00:10:52,620
read back that countermovement opponent is a very long file so I warn you that it might not be the lightest

155
00:10:52,620 --> 00:10:54,430
reading that there is now.

156
00:10:54,450 --> 00:11:00,350
The next thing I said is we want to change the references to act a transformer location elsewhere.

157
00:11:00,540 --> 00:11:06,990
So one of the first places where this occurs is with our simulated proxy on rep service state.

158
00:11:06,990 --> 00:11:13,640
We've got the client transform being set here from the actor current actor transform.

159
00:11:13,640 --> 00:11:17,490
We don't want to be doing it from a current act transform Well we actually want to do is do it from

160
00:11:17,520 --> 00:11:20,510
the location of our mesh offset.

161
00:11:20,520 --> 00:11:27,210
So I'm going to do an if mesh offset route Wint be careful of null pointers so and say is not equal

162
00:11:27,510 --> 00:11:29,390
to no pointer.

163
00:11:30,140 --> 00:11:31,710
They see things on going to work very well.

164
00:11:31,710 --> 00:11:37,240
If you don't have a mesh root offset and we want to then set our transform.

165
00:11:37,250 --> 00:11:42,630
But the way I'm going to do it here is I to do it as the location and the rotation so it's going to

166
00:11:42,630 --> 00:11:51,530
be the transform dot set location and the location is going to be a mesh route offset arrow.

167
00:11:52,830 --> 00:11:56,620
And then we can get components.

168
00:11:57,440 --> 00:12:04,520
Location and that if you hover over it or look in the documentation for the you seen component is in

169
00:12:04,520 --> 00:12:05,380
worldspace.

170
00:12:05,390 --> 00:12:07,560
So that is what we are looking for.

171
00:12:07,580 --> 00:12:08,930
That's all I see.

172
00:12:08,930 --> 00:12:13,570
So we've got worldspace there and I'm going to do the same thing for set rotation.

173
00:12:14,500 --> 00:12:17,280
MIKE So that rotation and set component.

174
00:12:18,060 --> 00:12:19,640
Rotation as well.

175
00:12:20,700 --> 00:12:26,640
Well get component rotation from our offset route notice is actually saying it can't convert from F

176
00:12:26,850 --> 00:12:32,430
rotators to f quat That's because get compan rotation returns an F rotate so if you actually do get

177
00:12:32,430 --> 00:12:40,540
component I believe it's called the get component what it'll return you the global space rotation instead.

178
00:12:40,620 --> 00:12:48,600
So that has replaced the use of the transform in a simulated proxy on reps state.

179
00:12:48,600 --> 00:12:51,410
Next up we need to do the same thing for our clients.

180
00:12:51,430 --> 00:12:57,900
Tic so inclined tick now we spread out into different functions so looking down where have we got instances

181
00:12:57,960 --> 00:13:01,740
of our location where we using the client start transform location.

182
00:13:01,740 --> 00:13:05,390
That's okay because we've just set that from the correct thing.

183
00:13:05,450 --> 00:13:09,470
The velocity we're not interested in the interpolate location.

184
00:13:09,480 --> 00:13:11,430
Yes this might be interesting let's have a look.

185
00:13:11,430 --> 00:13:14,210
Yes we're setting the actor location here.

186
00:13:14,400 --> 00:13:18,510
That's not what we want to be doing what we want to do instead is we want to check again to this nold

187
00:13:18,510 --> 00:13:26,670
check let me copy the nold check for our meche route offset or meche offset route and place it in here

188
00:13:26,720 --> 00:13:28,360
and then we want to do.

189
00:13:28,530 --> 00:13:34,800
Within that if statement we're going to have a block and in that block we are going to say mesh offset

190
00:13:34,800 --> 00:13:42,540
route arrow and then the mesh offset route arrow we're going to set I think world locations so this

191
00:13:42,540 --> 00:13:43,510
is a bit of a strange one.

192
00:13:43,530 --> 00:13:49,290
There's not a set component location but rather a set world location.

193
00:13:49,290 --> 00:13:53,390
So they are getting and setting has a different name.

194
00:13:53,460 --> 00:13:54,250
That's fine.

195
00:13:54,270 --> 00:13:56,120
You can we can deal with that.

196
00:13:56,130 --> 00:13:57,140
But it is a little bit.

197
00:13:57,220 --> 00:14:03,210
It probably could have found this all in the documentation which is why I didn't tell you about it.

198
00:14:03,510 --> 00:14:03,800
Okay.

199
00:14:03,810 --> 00:14:08,010
So this is the mesh of set setting the location I'm going to copy this code because we need a very similar

200
00:14:08,010 --> 00:14:14,730
one for these setting the active rotation here instead of doing the set world location we can set the

201
00:14:14,730 --> 00:14:21,960
world rotation and I'm going to give it the new rotation could turning on and you'll see that the cell

202
00:14:22,110 --> 00:14:25,810
world rotation with aquitania on worked just fine.

203
00:14:25,830 --> 00:14:27,580
So we're going to leave it at that.

204
00:14:27,600 --> 00:14:32,100
Is there anywhere else we need to change out our location.

205
00:14:32,100 --> 00:14:32,970
I think not.

206
00:14:32,970 --> 00:14:38,320
Let's go ahead and build see if it builds as a starting point and then see if it works nicely.

207
00:14:38,460 --> 00:14:41,400
Well it did build so that is a good side point.

208
00:14:41,400 --> 00:14:44,370
Let's head on over into the vehicle example map.

209
00:14:44,520 --> 00:14:52,110
I'm going to go and hit play and put my authority on the right and my Thomas proxy on the left.

210
00:14:52,130 --> 00:14:57,110
Now let's drive our authority around and all this is looking promising.

211
00:14:57,100 --> 00:15:03,240
You can see that the box is leading the movements of the simulated proxy mesh which is exactly what

212
00:15:03,240 --> 00:15:07,980
we want we can tell that the rotation is working because the box is coming out with different rotations

213
00:15:08,010 --> 00:15:14,970
to the mesh but the mesh is moving smoothly behind it and moving very well.

214
00:15:14,970 --> 00:15:21,030
I would say which does mean that let's do a little test of the slalom that if we try and go through

215
00:15:21,060 --> 00:15:27,810
our slalom Okay that was interesting you see when I came at it with some force it kind of extrapolated

216
00:15:27,810 --> 00:15:32,100
past the end of our pillar and the mesh moved through it.

217
00:15:32,100 --> 00:15:33,270
I'm trying to replicate that.

218
00:15:33,270 --> 00:15:35,230
I think I need to be going a little bit faster.

219
00:15:35,580 --> 00:15:44,160
So the mesh tried to move through it but it didn't knock it over because our Collider didn't move.

220
00:15:44,310 --> 00:15:45,780
So that's a good sign.

221
00:15:45,780 --> 00:15:50,820
So I'm kind of going through the slalom here and so far I'm not hitting any of the pins which makes

222
00:15:50,820 --> 00:15:57,000
sense because on the collider on the server we're not hitting the pins so that's not getting replicated

223
00:15:57,000 --> 00:15:59,700
down to these simulated proxy.

224
00:15:59,700 --> 00:16:04,560
And so we're never actually hitting it with a collider we're only of hitting it with a mesh and we know

225
00:16:04,590 --> 00:16:07,580
this mesh won't cause any collisions.

226
00:16:07,680 --> 00:16:09,480
So that's all fantastic.

227
00:16:09,480 --> 00:16:15,420
We've now corrected for that problem where our mesh was knocking things over because of the different

228
00:16:15,420 --> 00:16:20,760
route taken by the client interpellation pats on the back in the next lecture we're going to fix up

229
00:16:21,030 --> 00:16:24,960
that little bit of anti cheat code that we've left as a to do.

230
00:16:24,960 --> 00:16:26,120
So I'll see you there.
