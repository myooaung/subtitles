WEBVTT
1
00:00:04.400 --> 00:00:08.510
Hello there and welcome in this lecture we are going to be doing something nice and visual.

2
00:00:08.510 --> 00:00:10.930
You can see here I've got some tests serve servers showing.

3
00:00:11.060 --> 00:00:14.520
And when I hover over them something new happens when I hover over them.

4
00:00:14.540 --> 00:00:19.930
We actually get a change of colour and I can select them by clicking on them.

5
00:00:19.970 --> 00:00:25.190
We'll only select one server at a time but it will select a server and show me which one I've got selected

6
00:00:25.430 --> 00:00:29.090
so that when I click Join I know what I'm joining.

7
00:00:29.090 --> 00:00:33.350
Fantastic So we've figured out how to represent this to the users.

8
00:00:33.350 --> 00:00:34.100
That's what we're going to do.

9
00:00:34.100 --> 00:00:36.630
Let's dive in and get it done.

10
00:00:36.980 --> 00:00:42.770
So as promised we are going to circle back to our selection list which is currently a bit rubbish because

11
00:00:42.770 --> 00:00:49.880
when we select something it isn't really selected per say it's just we notionally have it selected.

12
00:00:49.880 --> 00:00:51.660
We just can't see it on the screen.

13
00:00:51.950 --> 00:00:57.020
So we're going to make sure that that is now fixed the game to do this in three steps the first one

14
00:00:57.020 --> 00:01:01.010
is to make sure that we've got some affordance so that when we hover over things we can see that we

15
00:01:01.430 --> 00:01:05.690
should be able to select them by clicking and then the other one is going to be actually making sure

16
00:01:06.500 --> 00:01:10.280
that it is visible which one is currently selected.

17
00:01:10.310 --> 00:01:16.190
So let's begin with step number one which is to making the text colour on click I dont mean on click

18
00:01:16.190 --> 00:01:17.450
I mean on hover.

19
00:01:18.540 --> 00:01:20.250
Thats changed that.

20
00:01:20.250 --> 00:01:26.700
What we often do is update the text colour on hover and say I'm going to go in to unreal Ed go to our

21
00:01:26.790 --> 00:01:28.140
server row widget.

22
00:01:28.140 --> 00:01:32.340
We're going to do this in blueprint Now obviously you can do this stuff in C++.

23
00:01:32.340 --> 00:01:35.390
It's perfectly easy to do it in C++ as well.

24
00:01:35.520 --> 00:01:41.880
But I find that it's just easier quicker to iterate when you're doing y stuff in blueprint in general

25
00:01:41.880 --> 00:01:46.320
and the maintainability doesn't take a big hit because we're not going to be doing a great deal of stuff

26
00:01:46.320 --> 00:01:47.290
in here anyway.

27
00:01:47.520 --> 00:01:52.740
So let's start off by going to our designer selecting our ROE button which is the thing that we click

28
00:01:52.740 --> 00:01:59.450
on and we hover over and you know say here we've got two events we have on hover and on on hovered.

29
00:01:59.520 --> 00:02:03.580
Now the first thing I want to check we could use those events to change the colour of the text.

30
00:02:03.720 --> 00:02:10.790
Or we could do it by checking against a variable based on hover or an hover.

31
00:02:11.040 --> 00:02:16.220
So let's have a look at the graph and see whether we can get something to do with hover.

32
00:02:16.500 --> 00:02:22.750
Go we've got an is hovered and from is hovered what I can do is we can go and create a branch.

33
00:02:22.750 --> 00:02:24.150
So I'm going to do this in event.

34
00:02:24.160 --> 00:02:24.710
Tick.

35
00:02:25.670 --> 00:02:27.730
And I'm going to create a branch.

36
00:02:28.640 --> 00:02:30.140
Flow control node.

37
00:02:30.350 --> 00:02:32.650
Can you use the boolean from is hovered.

38
00:02:32.990 --> 00:02:41.810
And when it is hovered I'm going to go to set colour opacity and I am going to set it to yellow.

39
00:02:41.840 --> 00:02:46.400
When it's hovered and I'm going to set it to white when it is hovered.

40
00:02:46.430 --> 00:02:51.260
Now you might be wondering why am I doing this on click rather than doing it based on an event.

41
00:02:51.290 --> 00:02:52.770
Surely that's less efficient.

42
00:02:53.000 --> 00:02:59.150
Well it is at the moment but we are going to be dealing with a second event in a second which is whether

43
00:02:59.150 --> 00:03:03.920
it's selected or not and it doesn't necessarily coincide with any of the events that were getting in

44
00:03:03.920 --> 00:03:05.030
the event graph.

45
00:03:05.030 --> 00:03:07.340
So for simplicity sake we're doing on tick.

46
00:03:07.340 --> 00:03:09.480
There's not very much going on in the game.

47
00:03:09.590 --> 00:03:14.200
Obviously if you want to do it based on events you can do that is going to add a little bit more complication.

48
00:03:14.400 --> 00:03:17.090
But it is obviously possible as well.

49
00:03:17.090 --> 00:03:21.470
Now if we go ahead and play we're actually not going to see anything because our join menu is currently

50
00:03:21.470 --> 00:03:24.110
empty because there are no games playing.

51
00:03:24.110 --> 00:03:29.210
So I'm going to go and rectify that by adding in some test data.

52
00:03:29.210 --> 00:03:33.980
Basically if were going to go to let's see we'll be in the game isn't CB.

53
00:03:34.060 --> 00:03:37.550
Is where we're currently adding things to the server names.

54
00:03:37.680 --> 00:03:38.100
Array.

55
00:03:38.120 --> 00:03:44.610
So in that server names teh array I'm going to go ahead and add a couple of mock servers which hours

56
00:03:44.660 --> 00:03:48.170
to test whether we are selecting the right things.

57
00:03:48.170 --> 00:03:51.510
I'm going to have test server one.

58
00:03:52.660 --> 00:03:54.130
As the first thing.

59
00:03:54.190 --> 00:04:01.250
And then I'm going to do it as server 2 and 3 by just copying and pasting them and making sure that's

60
00:04:01.270 --> 00:04:07.030
okay while we go and compile so the idea here is that one we do a find session and when it completes

61
00:04:07.030 --> 00:04:10.170
it's going to add in these three servers that weren't in the list.

62
00:04:10.360 --> 00:04:16.360
And it's going to just add them in for us to be able to test out our hovering and selecting logic.

63
00:04:16.480 --> 00:04:18.790
So that has worked out okay.

64
00:04:18.910 --> 00:04:21.250
Go and see if this works in the editor.

65
00:04:21.250 --> 00:04:23.230
I'm going to go play and join.

66
00:04:23.260 --> 00:04:26.130
Wait for that server list refresh it to happen.

67
00:04:27.040 --> 00:04:29.950
Which Take might take a few seconds and here it is.

68
00:04:29.950 --> 00:04:36.520
We've got our cervalis which when we hover over each item it goes yellow and then it goes back to being

69
00:04:36.550 --> 00:04:37.080
white.

70
00:04:37.120 --> 00:04:38.530
So I can click on them.

71
00:04:38.530 --> 00:04:39.660
They don't do anything.

72
00:04:39.660 --> 00:04:45.580
When I click on them at the moment but they are definitely there they are buttons their buttons that

73
00:04:45.580 --> 00:04:49.020
I can hover over and it changed the text the whole wrote when I hover on it.

74
00:04:49.330 --> 00:04:53.230
So the next thing we're going to need we already got whether it is hovered or not.

75
00:04:53.230 --> 00:04:58.750
We want to know whether it is selected or not to change the colour based on that as well.

76
00:04:58.780 --> 00:05:04.250
Now the way we got to do that is to do that in C++ that's where that logic resides.

77
00:05:04.330 --> 00:05:12.160
But we can expose a boolean to the server row at this level from as C plus plus So lets go into visual

78
00:05:12.160 --> 00:05:17.860
studio get our server row a dot H and what we're going to do is we're gonna add a new public property

79
00:05:17.860 --> 00:05:23.540
public because I want to set it in the main menu key without having to bother with setter's because

80
00:05:23.540 --> 00:05:26.440
we've got a very light weight server road or cvp.

81
00:05:26.590 --> 00:05:34.390
So what we're going to do is create a new property for a boolean and it's going to be a blue print.

82
00:05:34.870 --> 00:05:36.780
Read only property.

83
00:05:36.970 --> 00:05:41.000
Because we want to be able to read it but not set it from the blue print.

84
00:05:41.320 --> 00:05:42.930
And it's going to be a boolean.

85
00:05:42.940 --> 00:05:45.910
As I already said and it's going to be called Selected.

86
00:05:46.840 --> 00:05:50.110
Telling us whether or not this particular surber Road is selected.

87
00:05:50.110 --> 00:05:55.330
Now obviously this is not the actual place this state resides.

88
00:05:55.330 --> 00:06:01.030
This state resides in the lair above in our main menu where we have our selected index.

89
00:06:01.270 --> 00:06:08.250
But we're going to pass that information down into the side of the road so that it can update its colour.

90
00:06:08.470 --> 00:06:12.670
So we've got our selected boolean currently set to false as default.

91
00:06:12.940 --> 00:06:18.970
And what we want to do is go into our main menu C++ and every time our selected index is updated we

92
00:06:18.970 --> 00:06:24.280
want to make sure we go through and update all the server rows on whether they are selected or not.

93
00:06:24.280 --> 00:06:31.960
So I'm going to go and create here a method just for clarity's sake called Update.

94
00:06:32.840 --> 00:06:33.730
Rose.

95
00:06:34.680 --> 00:06:36.860
Or update children I think I'll call it.

96
00:06:38.140 --> 00:06:41.010
And this is just going to take no arguments return void.

97
00:06:41.020 --> 00:06:43.600
But I'm going to go into a head a file and create it.

98
00:06:43.600 --> 00:06:51.280
I'm going to create at the bottom near the selected index as a privat void of date children and I can

99
00:06:51.340 --> 00:06:59.350
implement void update children in the C++ just after I will just do it right after our selected index

100
00:06:59.350 --> 00:07:02.250
because that is chronologically where it is happening.

101
00:07:02.260 --> 00:07:04.510
For me that makes sense chronologically.

102
00:07:04.510 --> 00:07:05.440
They should go in order.

103
00:07:05.440 --> 00:07:12.250
They can't go in order in the h h file because one of them is a public method and one of them is private.

104
00:07:12.250 --> 00:07:17.920
So we are going to update children after we have done the selected index and what are we going to do

105
00:07:17.950 --> 00:07:22.450
with Update children where we're going to get do a for loop over all of the children and we are going

106
00:07:22.450 --> 00:07:29.530
to set their selected in their selected boolean depending on whether or not they are the current selected

107
00:07:29.530 --> 00:07:30.470
child.

108
00:07:30.550 --> 00:07:34.870
So this is actually something that you could do yourself so if you fancy the challenge posed a video

109
00:07:34.900 --> 00:07:40.420
and have a go at doing this remet a look at that documentation for selected index to see if you can

110
00:07:40.420 --> 00:07:45.010
figure out how to get the children by index and find out how many there are so that you can do a full

111
00:07:45.010 --> 00:07:50.830
loop over them and you may need to revise the for loop syntax that uses indexes both video and have

112
00:07:50.830 --> 00:07:51.090
a go.

113
00:07:51.090 --> 00:07:53.070
If you want this mini challenge.

114
00:07:53.680 --> 00:07:56.440
Okay Welcome back let's do the milit mini challenge now.

115
00:07:56.440 --> 00:08:04.530
So a flip over an index has three parts it has first of all the index itself which we are going to use.

116
00:08:04.540 --> 00:08:05.970
You want an int.

117
00:08:06.070 --> 00:08:10.570
32 rather sets to zero as the starting index.

118
00:08:10.570 --> 00:08:17.380
The reason we're using an int 32 rather than a you in 32 which is what our selected index is is because

119
00:08:17.380 --> 00:08:18.730
of we'll see in a second actually.

120
00:08:18.730 --> 00:08:21.290
So the next thing we do is I.

121
00:08:21.310 --> 00:08:26.670
Is less than what it needs to be less than where it needs to be less than the number of children because

122
00:08:26.670 --> 00:08:28.580
we want to iterate over the number of children.

123
00:08:28.720 --> 00:08:34.770
So if we go into a you panel widget which is the type of our server list.

124
00:08:35.690 --> 00:08:41.030
You will see that there is a property in here called we've got one property called Get child out which

125
00:08:41.030 --> 00:08:42.450
takes an int 32.

126
00:08:42.500 --> 00:08:48.620
That's why we're using it 32 because it's index type is in into 32 and the other thing it has is get

127
00:08:48.830 --> 00:08:49.950
children count.

128
00:08:50.000 --> 00:08:51.520
That also returns in thirty two.

129
00:08:51.530 --> 00:09:02.330
So you want to do selected and not select index rather but serve a list arrow and we want that to basically

130
00:09:02.810 --> 00:09:03.430
get.

131
00:09:04.470 --> 00:09:07.770
Child children count.

132
00:09:07.770 --> 00:09:12.690
So were going to iterate until we hit the end of the children count.

133
00:09:12.690 --> 00:09:14.280
And women do a plus plus.

134
00:09:14.390 --> 00:09:18.580
I wish is the third part of a for loop which is what we do to increment I.

135
00:09:19.540 --> 00:09:23.250
Okay so now we are iterating over all the children.

136
00:09:24.140 --> 00:09:27.890
And we need to actually go ahead and get hold of one of these children.

137
00:09:27.980 --> 00:09:33.170
So to get hold of one of the children we are going to do our server list arrow.

138
00:09:34.030 --> 00:09:36.510
Get child at.

139
00:09:36.720 --> 00:09:39.960
And then we can pass it I which is the index of that child.

140
00:09:40.130 --> 00:09:43.490
Now what comes back from get child that it's a you widget.

141
00:09:43.490 --> 00:09:47.750
Now we actually want a user a song and do you serve a row.

142
00:09:48.440 --> 00:09:50.770
Our pointer called Roe.

143
00:09:50.920 --> 00:09:55.760
It's going to be equal to that obviously is going to complain because what's coming back is a you widget

144
00:09:55.910 --> 00:10:01.040
the parent class of you have a row because that's what we put into the cervalis that's what it takes

145
00:10:01.050 --> 00:10:06.940
when we do add child it takes a you which say it's fine to add to put a use of Roshi's a child in there

146
00:10:06.980 --> 00:10:10.970
but it's not fine to go the other way because we could have put other types of you widget him there

147
00:10:10.970 --> 00:10:13.520
as well not just the use of rote.

148
00:10:13.640 --> 00:10:20.870
So what we need to do is a cast say you can use cath's with a capital C and this takes a template parameter

149
00:10:20.870 --> 00:10:25.570
which is going to be the type to cast it to which can be you server row.

150
00:10:25.580 --> 00:10:29.610
You don't have to bother with the pointer it automatically assumes that it's a pointer.

151
00:10:29.960 --> 00:10:34.670
And then we pass in the thing that we want to cast which is the child that we are getting.

152
00:10:35.320 --> 00:10:40.160
Now because there's some repetition here because it's casting to use server row and the type is you

153
00:10:40.160 --> 00:10:40.740
serve a row.

154
00:10:40.740 --> 00:10:41.980
I like to use auto.

155
00:10:41.980 --> 00:10:47.090
In this case to just avoid having the repetition it's clear what type it is because we're casting and

156
00:10:47.090 --> 00:10:48.790
that the type is you serve a row.

157
00:10:48.790 --> 00:10:54.010
So we getting a useable road point to come back and then what we need do after a cast.

158
00:10:54.010 --> 00:10:55.070
We always need to do this.

159
00:10:55.090 --> 00:10:58.780
We need to check that Roe is not null.

160
00:10:58.780 --> 00:11:06.580
The reason for that is because if it were not of the type use of a row it would fail to cast to use

161
00:11:06.580 --> 00:11:10.150
of Roe and would instead return a null pointer that's very safe.

162
00:11:10.150 --> 00:11:16.240
But it does mean that if we put something else in the server list that wasn't a row we would need to

163
00:11:16.360 --> 00:11:18.150
we would return and ballpoints basically.

164
00:11:18.160 --> 00:11:24.970
And so we need to not be dereferencing our ROE at that point and then we can do Roe dereference and

165
00:11:24.970 --> 00:11:30.830
we can get it's selected boolean and we can set it to either true or false depending on whether this

166
00:11:30.830 --> 00:11:34.020
selected index is the current index.

167
00:11:34.060 --> 00:11:39.010
That's why we're doing a full loop with I because then we can have an index for the current child and

168
00:11:39.010 --> 00:11:41.350
we can compare it to our selected index.

169
00:11:41.350 --> 00:11:42.090
Okay.

170
00:11:42.340 --> 00:11:43.690
So let's do that.

171
00:11:43.750 --> 00:11:51.040
We're going to do selected index dot get value has Remember it is an optional type so it could have

172
00:11:51.100 --> 00:11:52.200
no value at all.

173
00:11:52.480 --> 00:11:56.240
And we're going to set that where we're going to check whether that is equal to.

174
00:11:56.260 --> 00:12:01.750
I so this statement checking whether it's equal to I is going to return a boolean which is great because

175
00:12:01.750 --> 00:12:07.450
as selected is a boolean going to put it in brackets just make it double clear that we're saying this

176
00:12:07.450 --> 00:12:15.220
statement is returning a boolean can end with a semicolon and I've mis typed does not select index but

177
00:12:15.220 --> 00:12:19.800
rather selective indexing and a copy to make sure I've got that right now.

178
00:12:19.810 --> 00:12:21.750
Get value as we've said is there.

179
00:12:21.750 --> 00:12:26.860
As a reminder that this could be null and this could be an invalid value to try and get the value and

180
00:12:26.860 --> 00:12:28.180
checketts equality.

181
00:12:28.240 --> 00:12:33.430
So what we need to do is make sure that it is indeed selected.

182
00:12:33.430 --> 00:12:40.000
So the way we do that is we do a selected index.

183
00:12:40.000 --> 00:12:43.210
Dot is valid or is set.

184
00:12:43.210 --> 00:12:46.900
I believe Knot's is bad because it's not a pointer and then we can do.

185
00:12:46.920 --> 00:12:47.230
And.

186
00:12:47.230 --> 00:12:53.990
And which is just going to do a Boolean and between is set I can't type selected in next day it seems.

187
00:12:54.340 --> 00:12:56.700
Between is set and this value of.

188
00:12:56.710 --> 00:12:58.020
Here now you might say what.

189
00:12:58.090 --> 00:12:59.430
Hang on Sam.

190
00:12:59.440 --> 00:13:04.840
Surely it will evaluate value anyway to find out whether this and statement is true or not.

191
00:13:05.110 --> 00:13:11.470
Well this is where the semantics of this and SEC statement is very interesting because it's called a

192
00:13:11.470 --> 00:13:12.910
short circuit operator.

193
00:13:12.910 --> 00:13:18.760
That means that if it evaluates the first thing and it already knows what the result is going to be

194
00:13:18.760 --> 00:13:22.970
it doesn't bother evaluating the thing on the right.

195
00:13:23.060 --> 00:13:28.370
Now the same is true with all but slightly differently so with and how does this work.

196
00:13:28.610 --> 00:13:36.160
Well if we have false on the left hand side of and so if it is not set then what we're going to get

197
00:13:36.280 --> 00:13:43.480
is that there's no way that the whole statement can return true because and requires that both things

198
00:13:43.480 --> 00:13:47.790
are true and if one of them is false then we already know that the whole thing is going to be false.

199
00:13:47.860 --> 00:13:53.380
So this is why it's called short circuit because when this thing on the left is false it's not even

200
00:13:53.380 --> 00:13:56.430
going to look at the thing on the right to see whether it's true or not.

201
00:13:56.440 --> 00:13:58.790
So this is quite a common programming paradigm.

202
00:13:58.810 --> 00:14:01.460
Obviously you can do this an if statement if you feel more comfortable.

203
00:14:01.510 --> 00:14:02.410
But this is quite common.

204
00:14:02.410 --> 00:14:08.710
You will see it around using the short circuit and that basically means that if this is not set don't

205
00:14:08.710 --> 00:14:10.190
even bother getting the value.

206
00:14:10.190 --> 00:14:11.740
So that's why this is safe.

207
00:14:11.860 --> 00:14:16.190
And by the way this happens the same but opposite with an OR statement.

208
00:14:16.210 --> 00:14:17.880
So if this were an or.

209
00:14:19.010 --> 00:14:20.770
It wouldn't be safe and it wouldn't be right.

210
00:14:20.900 --> 00:14:27.770
But if it were an or what we are saying is that if you can see that the thing on the left is true you

211
00:14:27.770 --> 00:14:31.580
don't even need to evaluate the second thing because you already know that the whole statement is going

212
00:14:31.580 --> 00:14:32.380
to be true.

213
00:14:32.420 --> 00:14:34.700
So that's what I mean by short circuit operators.

214
00:14:34.700 --> 00:14:36.650
That's quite an interesting little concept.

215
00:14:36.870 --> 00:14:40.480
Okay so we have got the set out.

216
00:14:40.610 --> 00:14:46.370
It's definitely a set and that is value that means that the row is selected by the way this has the

217
00:14:46.700 --> 00:14:53.150
side effect that if there is no selected row then we are going to be false for all of the rows were

218
00:14:53.150 --> 00:14:54.320
going to set forth for all the rows.

219
00:14:54.320 --> 00:14:55.740
Which is correct.

220
00:14:55.760 --> 00:15:00.250
Let's go ahead and build this and see whether it's giving us the desired behaviour.

221
00:15:00.350 --> 00:15:03.970
In fact you're going to see whether this is giving us the desired behaviour yourself.

222
00:15:04.130 --> 00:15:10.430
In that the challenge coming up for selecting the colours for hovered and selected Let's have a look

223
00:15:10.430 --> 00:15:13.420
at Challenge in fact to set the row colour.

224
00:15:13.430 --> 00:15:17.370
So you are going to have to choose the colours you want for the different states.

225
00:15:17.370 --> 00:15:23.360
You're going to have to consider the states hovered and selected because now we have two boolean parameters.

226
00:15:23.360 --> 00:15:28.390
How many possible states are there going to be and how many colours are you going to choose.

227
00:15:28.430 --> 00:15:31.490
So pause the video and have a go at this chat.

228
00:15:32.820 --> 00:15:33.290
Okay.

229
00:15:33.310 --> 00:15:34.060
Welcome back.

230
00:15:34.060 --> 00:15:40.630
So we're going to have a look at these two states that we now have in our survey right.

231
00:15:40.720 --> 00:15:41.280
So.

232
00:15:42.340 --> 00:15:46.830
If I asked you how many states there are going to be well if you've got two booleans and one can be

233
00:15:46.830 --> 00:15:49.130
true or false and the second one can be true or false.

234
00:15:49.260 --> 00:15:55.830
Then we have to multiply those two possibilities by two possibilities we end up with four possibilities.

235
00:15:55.830 --> 00:15:59.980
I can demonstrate this to you with our branch statement so what we're saying.

236
00:16:00.870 --> 00:16:08.220
Is that in the case that hovered is true then we're going to get another branch that is going to ask

237
00:16:08.220 --> 00:16:14.460
the question of whether selected which we can now get because it's been exposed as a read only blueprint

238
00:16:14.460 --> 00:16:15.520
property.

239
00:16:15.870 --> 00:16:19.810
We're going to get the cases where selected is both true and false.

240
00:16:19.830 --> 00:16:26.910
And similarly in the false case we are also going to get another branch the but a branch on the same

241
00:16:26.910 --> 00:16:29.750
value of selected which is either true or false.

242
00:16:29.760 --> 00:16:36.090
So in the end the execution pins that we get out of here are true false and true false for both the

243
00:16:36.090 --> 00:16:39.420
cases of is hovet.

244
00:16:39.480 --> 00:16:43.230
So that means that we're going to have to choose four different colours.

245
00:16:43.230 --> 00:16:49.710
Now the false false case is where we don't have a selected and we don't have a hovered.

246
00:16:49.740 --> 00:16:56.370
That's where I'm going to choose to set the colour and a pastie to white then we are going to have the

247
00:16:56.370 --> 00:17:02.220
case where we are selected but not hovered that I am going.

248
00:17:02.220 --> 00:17:03.470
I'm working up from the bottom here.

249
00:17:03.470 --> 00:17:06.590
By the way for some reason and the colour there.

250
00:17:06.600 --> 00:17:09.300
I'm going to choose is going to be a green.

251
00:17:09.840 --> 00:17:17.280
Just a vibrant green then we are going to have the case where we are not selected but we are hovered.

252
00:17:17.280 --> 00:17:19.840
That's where I'm going to have yellow like we had before.

253
00:17:19.890 --> 00:17:24.980
And finally we have the case where we are both selected and hovered over in this case.

254
00:17:25.020 --> 00:17:27.010
I'm going to use a lighter green.

255
00:17:28.040 --> 00:17:29.720
So let's go ahead and do that.

256
00:17:29.720 --> 00:17:35.900
Just select a slightly lighter green to indicate that we are both hovered and selected for go ahead

257
00:17:35.930 --> 00:17:38.540
and compile this and play.

258
00:17:38.540 --> 00:17:45.040
Go to add join menu and wait for the server find to finish and join variables to come up.

259
00:17:45.110 --> 00:17:49.110
Then when we're hovering over we can see that indeed we've got a yellow hover as we did before.

260
00:17:49.130 --> 00:17:53.770
But now if we click then you can see one event turns into a light green.

261
00:17:53.780 --> 00:17:58.700
But if I move away from that it turns into a dark green and the other items go yellow.

262
00:17:58.760 --> 00:18:04.370
So it's still showing the hovering behaviour but it's also showing me which server is currently selected

263
00:18:04.430 --> 00:18:12.110
which gives us plenty more affordance on which item we're actually joining when we hit join.

264
00:18:12.110 --> 00:18:13.100
Fantastic stuff.

265
00:18:13.100 --> 00:18:14.730
So this is great.

266
00:18:14.720 --> 00:18:20.090
We've been able to create a UI where it actually explains to the user which server is currently selected

267
00:18:20.120 --> 00:18:25.100
and we only have one join button without having to have lots and lots of repetition PI selves on the

268
00:18:25.100 --> 00:18:28.520
back that was actually quite tricky you can be quite tricky sometimes.

269
00:18:28.590 --> 00:18:35.330
Now see you in the next lecture will be making these numbers actually mean something and also have things

270
00:18:35.330 --> 00:18:39.160
like the username and give a server name to a server.
