1
00:00:04,610 --> 00:00:07,980
Welcome to another exciting episode of crazy cartes.

2
00:00:07,980 --> 00:00:12,760
Here we're going to be looking at rotation so you can see we've got this funky kind of non-physical

3
00:00:12,770 --> 00:00:16,610
rotation where I can just rotate here on the spot without moving my car.

4
00:00:16,610 --> 00:00:20,710
Obviously not very realistic but it's going to be fun enough for us for now.

5
00:00:20,900 --> 00:00:27,050
So we're going to be using this so that we can accelerate our car and we can rotate and move around

6
00:00:27,050 --> 00:00:30,130
our obstacles very much like a real car would.

7
00:00:30,140 --> 00:00:36,560
So let's go ahead and dive in and see how we're going to create these rotations so the car rotates as

8
00:00:36,560 --> 00:00:40,790
well as the velocity that we are using here.

9
00:00:40,790 --> 00:00:41,180
Okay.

10
00:00:41,330 --> 00:00:42,520
Let's dive in and see it.

11
00:00:43,950 --> 00:00:50,270
So as have been already mentioned in this video we want to get our car rotating.

12
00:00:50,430 --> 00:00:54,780
Let's talk about how are going to do that going and drop in a car into our scene.

13
00:00:54,780 --> 00:00:55,650
Here it is.

14
00:00:55,740 --> 00:00:59,430
And let's talk about how we want this to rotate.

15
00:00:59,570 --> 00:01:05,660
Basically we want to just rotate it about the pivot the simplest kind of rotation you can possibly do.

16
00:01:05,780 --> 00:01:08,040
If we go to the right rotate tool.

17
00:01:08,040 --> 00:01:10,650
I just want to rotate it like this.

18
00:01:10,650 --> 00:01:19,710
When I hit the A and the D keys and I want to do that at a constant rate per second so say 90 degrees

19
00:01:19,710 --> 00:01:24,540
per second is how quickly it should be rotating in this direction if I hold down a.

20
00:01:24,540 --> 00:01:28,350
And if I hold down the it should be rotating at 90 degrees per second.

21
00:01:28,350 --> 00:01:29,800
In the other direction.

22
00:01:30,160 --> 00:01:30,550
Okay.

23
00:01:30,600 --> 00:01:31,740
So that's what we want to do.

24
00:01:31,740 --> 00:01:38,820
How do we achieve this with rotation how do we define a rotation in a way that is sensible and intelligible

25
00:01:39,150 --> 00:01:42,130
and not at all ambiguous.

26
00:01:42,890 --> 00:01:49,490
But this there is a concept called an angle axis rotation and we can represent this using the f quat

27
00:01:49,670 --> 00:01:55,220
used in unreel which is a slightly more complicated than f rotator and we'll talk about that.

28
00:01:55,250 --> 00:01:56,510
So how do we do this.

29
00:01:56,510 --> 00:02:03,050
Well the angle axis rotation is a very straightforward way of defining a rotation.

30
00:02:03,050 --> 00:02:05,340
Now imagine you had an orange in front of you.

31
00:02:05,390 --> 00:02:12,200
Or maybe go and grab an orange angle axis rotation is where you say I'm going to stick a pen through

32
00:02:12,200 --> 00:02:18,740
this orange that's the axis as you can see here denoted by the vector E and that's the pen.

33
00:02:18,740 --> 00:02:25,130
That's the direction the pen goes through the orange and then the angle is going to be the number of

34
00:02:25,130 --> 00:02:26,570
degrees that you rate.

35
00:02:26,570 --> 00:02:32,180
Rotate it around this pen so imagine you're holding onto the pen on the top and the bottom on your orange

36
00:02:32,510 --> 00:02:37,320
and you are rotating it by a number of degrees around that pen.

37
00:02:37,340 --> 00:02:45,190
This is actually a way of defining any rotation imaginable just by the angle and the angle and the Axis

38
00:02:45,200 --> 00:02:46,190
that's enough.

39
00:02:46,190 --> 00:02:52,190
And you can see here we end up with a if we started off with a unit vector So a vector of lect at length

40
00:02:52,220 --> 00:02:58,700
one then you could multiply it by the angle and that would give you a vector which fully defined the

41
00:02:58,700 --> 00:02:59,360
rotation.

42
00:02:59,360 --> 00:03:04,280
Now we're not going to be using it quite like that but that's the basic idea that you got one vector

43
00:03:04,430 --> 00:03:10,340
which is the pen that you stamp the orange with and then a number which is the angle that you want to

44
00:03:10,340 --> 00:03:11,490
rotate around.

45
00:03:11,570 --> 00:03:17,830
For us it's fairly straightforward the pen that we're stabbing through this car is the up vector the

46
00:03:17,850 --> 00:03:24,770
vector that goes straight up or straight down and then we are rotating by a number of angles around

47
00:03:24,770 --> 00:03:25,790
that pen.

48
00:03:25,790 --> 00:03:27,400
That's what we're trying to achieve.

49
00:03:27,410 --> 00:03:31,480
So let's go over into our code and see if we can code it up.

50
00:03:31,940 --> 00:03:37,130
We'll go into the go kart C++ and I'm going to do this in that tick then we can abstract it out and

51
00:03:37,130 --> 00:03:38,320
make it a bit more pretty.

52
00:03:38,480 --> 00:03:44,060
In just a second but I want to build my rotation first of all so for that we're going to use the type

53
00:03:44,060 --> 00:03:51,890
as I've already mentioned called F quat which stands for f core tourney on so akwa turning on is a rather

54
00:03:51,890 --> 00:03:59,540
complicated algebraic construction which allows you to define rotations and apply them to each other

55
00:03:59,550 --> 00:04:03,310
and it's what unreal uses under the hood to do its rotations in.

56
00:04:03,310 --> 00:04:07,250
It is very very expressive and for many many reasons.

57
00:04:07,340 --> 00:04:12,980
We can do more things with F quat But one of the reasons is that we can do angle axis rotation with

58
00:04:13,160 --> 00:04:18,380
quads and we can't really do that with rotators so easily because they are just basically three numbers

59
00:04:18,450 --> 00:04:21,030
just X Y and Z rotation.

60
00:04:21,470 --> 00:04:27,290
So we'll start with an F quat we're going to create an F quote and we're going to call this the rotation

61
00:04:27,770 --> 00:04:28,510
Delta.

62
00:04:32,300 --> 00:04:35,180
Because we're going to be using it to rotate some.

63
00:04:35,270 --> 00:04:40,420
A certain number of degrees depending on the delta time and then what are we going to do.

64
00:04:40,430 --> 00:04:44,230
We are going to have a look at what its various constructs are.

65
00:04:45,020 --> 00:04:47,550
So you can find the documentation accompanying the lecture.

66
00:04:47,570 --> 00:04:52,880
Let's go and see what it's constructor's are down in the constructor section so we could give it an

67
00:04:52,880 --> 00:04:55,800
F quat we could give it a matrix we could even construct it from an F..

68
00:04:55,820 --> 00:05:03,870
Rotate out but the one I'm interested in is the one that takes an axis and an angle in radians notice.

69
00:05:03,990 --> 00:05:09,260
Now you may know about the difference between degrees and radians but will just cover that in a second.

70
00:05:09,330 --> 00:05:14,920
So we're going to take in an axis which as we've already mentioned is the upper vector.

71
00:05:14,930 --> 00:05:17,520
So go and do get actor up.

72
00:05:17,720 --> 00:05:24,980
Vector is going to be the pen through which we're going to stab our car and then we are going to rotate

73
00:05:25,010 --> 00:05:27,800
by a number of degrees.

74
00:05:27,800 --> 00:05:34,880
Now this degrees is going to depend on our throttle so our Or rather our steering angle so that's going

75
00:05:34,880 --> 00:05:37,100
to be the a different axis isn't it.

76
00:05:37,100 --> 00:05:44,580
So we'll go over to our car crazy can't pawn C++ and have a look at what they are using for their steering.

77
00:05:44,690 --> 00:05:50,750
They've got their move right axis so I'm going to go ahead and bind that in my plus as well so I need

78
00:05:50,750 --> 00:05:58,010
to create a move right function so I'm going to update the namespace that it's referring to in this

79
00:05:58,010 --> 00:05:58,780
bind axis.

80
00:05:58,790 --> 00:06:03,680
I'm going to go ahead and create that function underneath my move forwards of going to return FOID.

81
00:06:03,740 --> 00:06:06,780
It's going to take a float value.

82
00:06:07,640 --> 00:06:08,920
You can follow along with me.

83
00:06:08,930 --> 00:06:13,490
You guys know how to do this and we're gonna call this the steering throw.

84
00:06:15,900 --> 00:06:17,520
And we're going to use that to set.

85
00:06:17,610 --> 00:06:20,100
We're gonna use the value to set the steering throw.

86
00:06:20,100 --> 00:06:23,960
I'm going to have to define both the steering flow and the move.

87
00:06:23,970 --> 00:06:26,000
Right so let's go over into the header.

88
00:06:26,250 --> 00:06:31,050
Having copied move right I'm going to put it in my just underneath.

89
00:06:31,110 --> 00:06:34,050
Move forward and I'm going to put a semicolon.

90
00:06:34,100 --> 00:06:39,050
The end and remove the namespace so that it is header compatible then we are going to go and find our

91
00:06:39,050 --> 00:06:39,850
steering throw.

92
00:06:39,860 --> 00:06:43,620
And were going to go up to the head of file again and I'm going to put that underneath the throttle

93
00:06:43,620 --> 00:06:47,340
so it's gonna be float staring throw good.

94
00:06:47,730 --> 00:06:51,700
So were going to be updating that from our move right.

95
00:06:51,720 --> 00:06:55,390
We're going have a steering throw and we're going to want to have.

96
00:06:55,410 --> 00:07:01,050
We've currently got a max driving force we want to have some other eligible property here.

97
00:07:01,070 --> 00:07:02,970
It's going to be a new property anywhere.

98
00:07:03,000 --> 00:07:04,990
It's going to be float as well.

99
00:07:05,520 --> 00:07:11,580
But what we want it to be for is the maximum number of degrees that can be rotated per second so we'll

100
00:07:11,580 --> 00:07:12,650
call it Max.

101
00:07:13,430 --> 00:07:14,340
Degree.

102
00:07:15,230 --> 00:07:16,390
What degrees.

103
00:07:17,210 --> 00:07:19,010
Per second.

104
00:07:19,610 --> 00:07:20,130
Like so.

105
00:07:20,150 --> 00:07:25,730
And I think the max degrees per second at a good starting point will be around the 90 mark.

106
00:07:25,730 --> 00:07:29,720
So we'll start off with 90 and let's give it a good comment.

107
00:07:31,110 --> 00:07:36,150
So the number of degrees rotated per second at full control fros going to be my comment in brackets

108
00:07:36,150 --> 00:07:42,580
I've put degrees per second as the units for this Max degrees per second.

109
00:07:42,620 --> 00:07:48,720
Okay let's go over into the C++ with this because that is what we're going to be putting into our rotation

110
00:07:48,750 --> 00:07:49,330
Delta.

111
00:07:49,380 --> 00:07:55,160
The angle that we're going to rotate so that actually creates a float rotation.

112
00:07:56,510 --> 00:07:57,340
Angle.

113
00:07:58,430 --> 00:08:03,760
Is going to be equal to the max degrees per second multiplied by the delta time.

114
00:08:03,760 --> 00:08:06,910
So remember that Delta times units are seconds.

115
00:08:06,920 --> 00:08:11,810
So when we've got degrees per second multiply by seconds it's going to give us the number of degrees

116
00:08:11,870 --> 00:08:13,530
to rotate in this frame.

117
00:08:13,790 --> 00:08:21,340
And then were going to multiply that by itself by the steering throw which is that control throw.

118
00:08:21,560 --> 00:08:27,850
And then we can use our rotation angle in our rotation Delta to construct that rotation Delta.

119
00:08:27,950 --> 00:08:30,980
So ended up this quat rotation Delta.

120
00:08:31,010 --> 00:08:35,980
And finally we need to apply this rotation to the actor.

121
00:08:36,170 --> 00:08:36,950
How do we do that.

122
00:08:36,950 --> 00:08:38,030
I hear you ask.

123
00:08:38,870 --> 00:08:44,920
So let's take a look at the documentation for a actor for looking at how we can add a rotation to our

124
00:08:44,920 --> 00:08:45,380
actor.

125
00:08:45,380 --> 00:08:53,160
So let's have a look at ad rotation LOL Just look for rotation and see if we can find something useful.

126
00:08:53,200 --> 00:09:00,030
K we've got asked a local rotation and we have an outer world rotation so what's the difference.

127
00:09:00,030 --> 00:09:04,810
Well if we had some hierarchy of transforms this would make a bit of a difference.

128
00:09:04,820 --> 00:09:05,820
But in this case.

129
00:09:06,020 --> 00:09:10,610
Doesn't really matter too much but we're going to go with world because we know that the UPA vector

130
00:09:10,610 --> 00:09:18,560
that we're using is in world coordinates space so it should be fine to go ahead and use a world level

131
00:09:18,560 --> 00:09:26,530
rotation so I'm to use the an outer world rotation and we can do that right after our go kart.

132
00:09:26,600 --> 00:09:33,380
We've created a rotation Delta so add actor world rotation and then we add in the rotation delta that

133
00:09:33,410 --> 00:09:36,200
we have just created and that should pretty much do the trick.

134
00:09:36,200 --> 00:09:40,600
Let's go ahead and build that make sure there's no build errors and test it out.

135
00:09:41,460 --> 00:09:47,310
Okay so the build was successful Let's go over into unreel delete the actor I was playing around with

136
00:09:47,310 --> 00:09:48,980
to show you how rotations work.

137
00:09:48,990 --> 00:09:50,320
Let's go ahead and hit play.

138
00:09:50,650 --> 00:09:54,080
And oh that's looking rather weird.

139
00:09:54,210 --> 00:09:58,200
When I hit rotation we seem to be rotating far too quickly.

140
00:09:58,290 --> 00:09:59,960
So whats going on there then.

141
00:10:00,330 --> 00:10:03,590
Well remember that I said the number of the degrees.

142
00:10:03,600 --> 00:10:08,490
Basically the rotation angle that we take in here is in radians.

143
00:10:08,490 --> 00:10:13,440
And what weve given is the max degrees per second so we actually had to convert that into radians.

144
00:10:13,440 --> 00:10:13,940
Don't worry.

145
00:10:13,950 --> 00:10:14,760
It's very easy.

146
00:10:14,760 --> 00:10:20,670
There is an F maths function just for doing that called F maths and then is going to be.

147
00:10:20,690 --> 00:10:28,050
Degrees to radians and that will allow us to convert between the two formats essentially of an angle.

148
00:10:28,050 --> 00:10:35,040
The difference is that radians are what one couple of raly and basically has a whole circle of rotation

149
00:10:35,160 --> 00:10:39,320
where as the degrees are as we know 360.

150
00:10:39,330 --> 00:10:41,820
So it was rotating incredibly quickly.

151
00:10:41,820 --> 00:10:47,970
Let's go and update that code and see it work with radians rather than degrees.

152
00:10:48,000 --> 00:10:52,970
By the way a full rotation in a circle is to pi radians.

153
00:10:54,310 --> 00:10:56,360
Okay so no problem with that bill.

154
00:10:56,370 --> 00:10:59,330
Let's go ahead and stop the game and hit play again.

155
00:10:59,430 --> 00:11:06,630
Now when I rotate you can see we're getting a much more sensible one to a 90 degree every second of

156
00:11:06,630 --> 00:11:09,170
rotation which is a pretty decent staring rate.

157
00:11:09,180 --> 00:11:13,890
Obviously it would dry steering in a very bizarre way here without applying any acceleration.

158
00:11:13,890 --> 00:11:20,760
So if I accelerate myself forward you'll notice that as I turn I keep going in the direction I was going

159
00:11:20,760 --> 00:11:25,250
which kind of leads to a very strange way of driving.

160
00:11:25,440 --> 00:11:31,360
So what we actually need to have here is basically complete slippage is what's going on here.

161
00:11:31,410 --> 00:11:38,520
But what we need to do as a basic approximation which feels about right is we are going to have to rotate

162
00:11:38,550 --> 00:11:46,290
our velocity vector with the nose of our vehicle so as we rotate our vehicle we need to also rotate

163
00:11:46,710 --> 00:11:48,050
the velocity vector.

164
00:11:48,120 --> 00:11:53,790
So that's going to be your challenge actually is pretty straightforward so you're rotating the velocity

165
00:11:53,790 --> 00:12:00,600
vector reads the quat documentation to see what functions you need to help you help update the velocity

166
00:12:00,640 --> 00:12:06,770
as we want and test it and see whether it feels right based on updating it and then refactor.

167
00:12:06,780 --> 00:12:08,890
So pause video and have a go at this challenge.

168
00:12:10,070 --> 00:12:11,420
Okay welcome back.

169
00:12:11,420 --> 00:12:15,040
So if we go into the documentation for what.

170
00:12:15,080 --> 00:12:16,910
What is it that we are looking for.

171
00:12:16,910 --> 00:12:22,700
I'm going to go to the ATF quat documentation then the function that we're looking for is actually called

172
00:12:23,300 --> 00:12:28,550
very helpfully rotate a vector I believe or let's see vector.

173
00:12:30,270 --> 00:12:32,440
I say just search of extern somewhere in here.

174
00:12:32,460 --> 00:12:33,650
I will have.

175
00:12:35,490 --> 00:12:35,760
Yeah.

176
00:12:35,760 --> 00:12:37,000
Rotate vector.

177
00:12:37,050 --> 00:12:38,490
That's the one we're looking for.

178
00:12:38,820 --> 00:12:45,830
So very simply what we need to do is get an F quality is our rotation Delta.

179
00:12:47,070 --> 00:12:53,320
And do a rotate vector taking in our velocity.

180
00:12:54,970 --> 00:13:00,380
And the outputs of that is going to be an F vector which we can set at velocity 2.

181
00:13:00,400 --> 00:13:07,660
So based on that rotation we have just rotated our vector by exactly the same amount as we have rotated

182
00:13:08,000 --> 00:13:12,610
our our car which should give us a good effect.

183
00:13:12,610 --> 00:13:16,080
Now what I'm going to go ahead and do now is refactored some of this.

184
00:13:16,090 --> 00:13:18,900
So all this section which is talking about rotation.

185
00:13:19,060 --> 00:13:25,570
I'm going to refactor right into its own method using Visual Studio refactored function so extract function.

186
00:13:25,660 --> 00:13:31,790
I'm just going to call it apply a rotation that's go ahead and refactor that out below this function.

187
00:13:32,260 --> 00:13:32,670
Okay.

188
00:13:32,680 --> 00:13:33,550
Looking good.

189
00:13:33,550 --> 00:13:37,300
So let's go into the head of file make sure that it's in the right place because it obviously isn't.

190
00:13:37,300 --> 00:13:40,190
It's gone and put itself in the public section which we don't want.

191
00:13:40,450 --> 00:13:46,030
I'm going to put it right above our update location from velocity in the head a file and I can go ahead

192
00:13:46,060 --> 00:13:47,540
and save the C++.

193
00:13:47,560 --> 00:13:49,850
Now ATIC is looking fairly clean.

194
00:13:49,870 --> 00:13:53,730
We've got an apply rotation function going to go ahead and build and test it out.

195
00:13:55,180 --> 00:13:57,090
Okay well the build at least the successful.

196
00:13:57,100 --> 00:13:59,740
Let's go and test it in the editor.

197
00:13:59,780 --> 00:14:01,010
Let me go ahead and play.

198
00:14:01,760 --> 00:14:10,520
If we are rotating You can see that as we rotate the velocity is rotating with us which means that we're

199
00:14:10,520 --> 00:14:16,580
able to do what we usually would do in a car which is use the steering to rotate around the obstacles

200
00:14:16,580 --> 00:14:20,300
so it's starting to feel like a good sensible car now.

201
00:14:20,480 --> 00:14:25,210
The only problem is that once we've accelerated We never decelerate because there's no sort of resistance

202
00:14:25,250 --> 00:14:28,680
no rolling resistance no no air resistance.

203
00:14:28,700 --> 00:14:33,200
Both of which basically mean well no air resistance means that we'd have no top speed.

204
00:14:33,200 --> 00:14:38,600
We just keep accelerating until we hit something and no rolling resistance means that we don't just

205
00:14:38,690 --> 00:14:42,290
start rolling to a stop which doesn't feel right either.

206
00:14:42,320 --> 00:14:45,800
We're going to be looking at those two types of resistance as resistance.

207
00:14:45,800 --> 00:14:48,410
In the next few video so I will see you in.
