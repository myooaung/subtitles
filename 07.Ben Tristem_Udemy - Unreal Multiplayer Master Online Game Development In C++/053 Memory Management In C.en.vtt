WEBVTT
1
00:00:01.780 --> 00:00:08.880
Welcome to an exciting lecture on memory management in C++ as promised to you in the last lecture we're

2
00:00:08.880 --> 00:00:13.200
going to talk a little bit more about what that t shared pointer is about in this lecture.

3
00:00:13.200 --> 00:00:16.870
So let's dive right in without further ado.

4
00:00:16.890 --> 00:00:22.920
The first thing to note is that if you are very well versed in the C++ and unreal memory management

5
00:00:22.920 --> 00:00:26.880
you may just want to watch this video at double speed just as a quick revision.

6
00:00:26.880 --> 00:00:32.100
If you're not so well versed then do take a good long hard look at it and they'll be an exercise in

7
00:00:32.100 --> 00:00:34.910
the middle that should really help consolidate your knowledge.

8
00:00:35.250 --> 00:00:39.680
Okay so the first thing we need to talk about is the stack and the heap now.

9
00:00:39.690 --> 00:00:44.370
You may be familiar with this as a C++ programmer already but I'm just going to review what goes on

10
00:00:44.370 --> 00:00:45.760
with the stack and heap.

11
00:00:45.780 --> 00:00:49.980
These are two segments of memory that are used very differently.

12
00:00:49.980 --> 00:00:56.760
The stack is used in a very structured way and the heap is used in a very messy way so the stack for

13
00:00:56.760 --> 00:01:04.110
example is a slot of memory per function call so you'd have the main function it might create some variables

14
00:01:04.110 --> 00:01:05.170
within the function.

15
00:01:05.460 --> 00:01:11.580
And this would go on the stack in a little block of memory then the main function calls the game loop

16
00:01:11.580 --> 00:01:17.780
and the game loop may create some more memory and put it after the block of memory where Main put its

17
00:01:17.780 --> 00:01:24.630
stuff and then the game loop might call tick and tick will be able to go ahead and create some more

18
00:01:24.630 --> 00:01:31.560
memory and as you can see a pattern here as we go down we are as adding more and more memory and then

19
00:01:31.590 --> 00:01:36.530
take my call dot product to help it get its job done and what product will all call memory and so on

20
00:01:36.570 --> 00:01:37.840
so forth down the stack.

21
00:01:37.920 --> 00:01:43.850
But the important thing here is that when dot product has finished doing its job it can clear up.

22
00:01:43.860 --> 00:01:48.870
It's what's called the stack frame which is this box here a round up product which has all the memory

23
00:01:48.900 --> 00:01:50.580
that it created for itself.

24
00:01:50.700 --> 00:01:55.890
So it's very organized as you go down the stack you start to add memory to the bottom of the stack and

25
00:01:55.920 --> 00:02:01.440
as you return from these functions you can remove the memory that they were using from the stacks so

26
00:02:01.440 --> 00:02:05.280
very nice very orderly leads to a very unfair lag mentored memory.

27
00:02:05.280 --> 00:02:07.270
But there is a problem sometimes.

28
00:02:07.350 --> 00:02:13.200
You want memory to go between function calls so for example you might have called dot product but then

29
00:02:13.200 --> 00:02:16.840
you want to call to something else and you want to share a bit of memory.

30
00:02:16.840 --> 00:02:23.790
Let's give a more concrete example for example you might have play a 1 and he might have a mesh and

31
00:02:23.790 --> 00:02:27.090
you might have play two and he might have a mesh as well.

32
00:02:27.090 --> 00:02:31.800
And these guys are going to want that mesh to hang around really between function calls.

33
00:02:31.800 --> 00:02:37.530
He came to want it to be there between different ticks of the game loop so that's quite important.

34
00:02:37.530 --> 00:02:42.570
And these players might have pointers to each to their own guy and you can see this is much more messy.

35
00:02:42.570 --> 00:02:44.610
This would go on the heap.

36
00:02:44.610 --> 00:02:50.220
This is called dynamic memory allocation because you aren't doing it just when you call a function.

37
00:02:50.310 --> 00:02:56.460
You are doing it when but basically whenever when you when there is a game event for example you might

38
00:02:56.460 --> 00:02:57.920
spawn a new player in return.

39
00:02:57.930 --> 00:03:05.280
In response to one player getting shot in the head and you may change out the guns based on the player

40
00:03:05.580 --> 00:03:08.790
scrolling the scroll wheel to swap the guns and so on and so forth.

41
00:03:08.790 --> 00:03:10.890
You might even swap out the mesh and things like that.

42
00:03:10.950 --> 00:03:17.190
So this is dynamic because we are allocating deallocated memory as we go based on real time input whereas

43
00:03:17.190 --> 00:03:23.160
here on the stack were much more traditional about how were allocating memory which is doing it based

44
00:03:23.220 --> 00:03:25.920
on every new function a bit more memory.

45
00:03:25.950 --> 00:03:26.750
It's very straightforward.

46
00:03:26.760 --> 00:03:29.410
That's the stack versus the heap one is messy.

47
00:03:29.430 --> 00:03:30.570
One is organized.

48
00:03:30.570 --> 00:03:34.470
We're going to be talking about how we can make a little bit of order out of the chaos that's going

49
00:03:34.470 --> 00:03:35.270
on the heap.

50
00:03:35.280 --> 00:03:36.420
The stack doesn't need much order.

51
00:03:36.420 --> 00:03:39.780
It's very straightforward how you allocate and then allocate that memory.

52
00:03:39.780 --> 00:03:42.700
The heap on the other hand we have to talk about a little bit more.

53
00:03:42.810 --> 00:03:50.460
So one approach the C++ approach by itself is that you do everything manually so when you want to create

54
00:03:50.490 --> 00:03:55.170
a new player you would have to allocate the memory for the new player on the heap and you would need

55
00:03:55.170 --> 00:04:00.630
to keep track of that pointer and it would be your responsibility to make sure that that pointer is

56
00:04:00.630 --> 00:04:07.830
then deallocated before you are deallocated So in the destructor of your class which is being called

57
00:04:07.860 --> 00:04:12.760
when you are being destroyed you need to make sure you destroy anything that you have pointers to.

58
00:04:12.780 --> 00:04:14.770
Otherwise you're going to end up with memory leaks.

59
00:04:14.770 --> 00:04:19.950
Now obviously this relies on people's memories so it's not a very good process because it's going to

60
00:04:19.950 --> 00:04:25.830
mean that you need to remember to deallocate everything you allocate.

61
00:04:25.830 --> 00:04:29.970
So people invented a process called reference counting.

62
00:04:29.970 --> 00:04:32.490
This is what reference counting is a match and you had the stack.

63
00:04:32.490 --> 00:04:37.140
That looks very much like this except at the top level we've got the map pointing back to both of the

64
00:04:37.170 --> 00:04:38.020
players.

65
00:04:38.220 --> 00:04:44.430
Now in a reference counting example what happens is for every object that is reference from the top

66
00:04:44.430 --> 00:04:47.120
level will assume that the top level is the map.

67
00:04:47.160 --> 00:04:48.600
Every object reference from there.

68
00:04:48.750 --> 00:04:54.540
We give it a reference count that's how many people are currently using this object so we've got player

69
00:04:54.540 --> 00:04:59.500
1 and play two are both got one reference because the map references them.

70
00:04:59.810 --> 00:05:04.260
Got the Mesha has got two references because that's referenced by both players player one player to

71
00:05:04.690 --> 00:05:05.610
a ref by reference.

72
00:05:05.610 --> 00:05:07.620
I mean it has a pointer to it.

73
00:05:07.620 --> 00:05:11.880
Somebody has a pointer to this and the guns also just have one reference each.

74
00:05:11.880 --> 00:05:17.490
So what happens in this case if the map decides oh I'm going to drop my reference to play it too.

75
00:05:17.490 --> 00:05:22.220
I'm going to stop caring about Player 2 so we cut off that reference what happens.

76
00:05:22.230 --> 00:05:28.860
Well we decrements the reference count for Play a 2 and when there are zero references we know that

77
00:05:28.860 --> 00:05:33.190
nobody is carrying about this player 2 anymore so we can get rid of it.

78
00:05:33.270 --> 00:05:38.790
So that's what we do we get rid of player too and we make sure that when we're in the calling the destructor

79
00:05:38.790 --> 00:05:45.090
for Play a two will also be getting rid of the references to the meche and the gun.

80
00:05:45.720 --> 00:05:49.860
And that means that we are going to go ahead and decrement those we get the gun down to zero the meche

81
00:05:49.860 --> 00:05:50.940
goes down to one.

82
00:05:50.940 --> 00:05:55.020
So because the Met has gone down to one it can stay alive it's not gone down to zero and somebody still

83
00:05:55.020 --> 00:06:00.620
needs it and that the gun we have the decrements to zero so that can get destroyed.

84
00:06:00.810 --> 00:06:01.710
So that's great.

85
00:06:01.710 --> 00:06:03.040
And you'd think perfect.

86
00:06:03.060 --> 00:06:05.340
We've got that whole memory thing sorted.

87
00:06:05.340 --> 00:06:07.200
There's no more need to worry.

88
00:06:07.290 --> 00:06:09.840
Well there are some disadvantages to this approach.

89
00:06:09.840 --> 00:06:13.260
One of the disadvantages is what happens if you have a circular reference.

90
00:06:13.260 --> 00:06:19.920
What if play are two references gun and gun references play a two then they would always have a reference

91
00:06:19.980 --> 00:06:21.140
of greater than zero.

92
00:06:21.150 --> 00:06:24.580
And so you get a memory leak you're never going to free up that memory.

93
00:06:24.600 --> 00:06:28.140
There's ways of making sure that you never end up with those cycles.

94
00:06:28.140 --> 00:06:31.230
But again you have to remember not to end up with those cycles.

95
00:06:31.230 --> 00:06:33.180
And that can be very problematic.

96
00:06:33.180 --> 00:06:38.760
Another problem that is specifically very important in game engines is that when you delete something

97
00:06:38.760 --> 00:06:45.150
like a player too it might set off a cascade of deletions which could pause your game essentially make

98
00:06:45.150 --> 00:06:50.640
your tic last for a very long time while you go ahead and clear up the player in all its guns and all

99
00:06:50.640 --> 00:06:55.530
of its armour and or its inventory and all those things get destroyed while you wait for that.

100
00:06:55.550 --> 00:07:00.330
You have players just sitting there twiddling their thumbs and wondering why all of a sudden the game

101
00:07:00.330 --> 00:07:01.380
has frozen.

102
00:07:01.440 --> 00:07:03.580
This is obviously not a great approach.

103
00:07:03.630 --> 00:07:08.940
So there is another way of doing memory management called garbage collection.

104
00:07:08.940 --> 00:07:11.360
Now you may have heard of garbage collection before.

105
00:07:11.460 --> 00:07:14.580
Let's just talk about how it works in garbage collection.

106
00:07:14.580 --> 00:07:18.360
You have a set of objects that you know to exist.

107
00:07:18.540 --> 00:07:24.020
In this case its all these objects here we've got the map player one player two mesh gun one gun.

108
00:07:24.180 --> 00:07:27.570
Then called it gun one gun one I did not mean to call them Gun one and gun two.

109
00:07:27.870 --> 00:07:32.880
So you have got this set of objects that you know to be alive.

110
00:07:33.330 --> 00:07:42.900
And what we do is we cut off one of our references here and we try and determine which of these objects

111
00:07:42.960 --> 00:07:45.850
can no longer be reached from the top level.

112
00:07:46.080 --> 00:07:52.140
And we do is quite simply by walking down through each of these links and saying Okay well the map can

113
00:07:52.140 --> 00:07:53.530
be reached because its the top level.

114
00:07:53.550 --> 00:07:56.930
Its part of what real would call the root set.

115
00:07:56.970 --> 00:08:02.360
And then we walk down all the references it has and set and mark them as reachable as well.

116
00:08:02.550 --> 00:08:08.490
So we say a player one we can reach that one and then we'd walk down from there with say the mesh and

117
00:08:08.490 --> 00:08:10.590
the gun one are both reachable.

118
00:08:10.920 --> 00:08:12.650
Okay that's great.

119
00:08:12.660 --> 00:08:19.350
That means that everything that we know of that we can't reach is now possible.

120
00:08:19.410 --> 00:08:21.440
We can delete and we can delete it whenever we like.

121
00:08:21.440 --> 00:08:22.970
We don't have to delete it right now.

122
00:08:22.980 --> 00:08:24.550
We can postpone it to later.

123
00:08:24.840 --> 00:08:27.770
We can postpone it to when there's not very much going on in the tick.

124
00:08:27.810 --> 00:08:34.050
So that allows us to load balance essentially some of the work that was going on previously had to be

125
00:08:34.050 --> 00:08:36.530
going on straightaway as soon as you got rid of the reference.

126
00:08:36.540 --> 00:08:44.070
Now it can go on a bit slower so you can go ahead and delete player one player to sorry and gun and

127
00:08:44.070 --> 00:08:49.020
his gun at the earliest convenience so that is garbage collection there's lots of advantages to that.

128
00:08:49.200 --> 00:08:49.940
And that's why.

129
00:08:49.950 --> 00:08:55.710
And real does make heavy use of garbage collection in fact let's challenge you to how unreel actually

130
00:08:55.920 --> 00:08:56.950
does do it.

131
00:08:57.060 --> 00:09:01.740
Let's see if you can go ahead do a little bit of independent research and see if you can find out how

132
00:09:01.740 --> 00:09:07.000
unreal does reference cattycorner how do we reference count an object in unreal.

133
00:09:07.010 --> 00:09:11.060
How do we ask it to do that what code are we going to use to.

134
00:09:11.220 --> 00:09:15.360
How does unreel know what objects to scan for garbage collection.

135
00:09:15.360 --> 00:09:20.550
So I said here in the pre In this example that it has a set of objects that it knows about.

136
00:09:20.550 --> 00:09:25.530
So that it can say essentially well I know about these objects but I couldn't reach them so I can delete

137
00:09:25.530 --> 00:09:26.000
them.

138
00:09:26.010 --> 00:09:29.310
It needs to first start off with a set of things that it knows about.

139
00:09:29.430 --> 00:09:31.720
How does it know what that set of things is.

140
00:09:32.590 --> 00:09:37.750
And then how does unreel know which pointers it should follow because obviously it's going to have all

141
00:09:37.750 --> 00:09:44.200
sorts of pointers in C plus plus not all of them are going to be pointers to things inside this set.

142
00:09:44.200 --> 00:09:48.700
How does it know which ones of these pointers should actually be following See if you can answer these

143
00:09:48.700 --> 00:09:49.330
three questions.

144
00:09:49.330 --> 00:09:54.640
Pause the video do this challenge will really help you cement your knowledge of garbage collection and

145
00:09:54.640 --> 00:09:58.720
reference counting that you've just seen in this video and I'll see you on the flipside.

146
00:10:00.230 --> 00:10:00.900
Okay.

147
00:10:00.910 --> 00:10:01.690
Welcome back.

148
00:10:01.690 --> 00:10:05.380
On the flipside I did mean the challenge solution which I'm going to take you through right now.

149
00:10:05.650 --> 00:10:10.100
Let's have a look at a reference counting in unreal as a starting point.

150
00:10:10.420 --> 00:10:13.260
The think you would be using is a t shared pointer.

151
00:10:13.300 --> 00:10:19.480
Exactly as we saw in the last lecture so far a teacher pointer is actually this slightly inferior form

152
00:10:19.750 --> 00:10:21.150
of memory management.

153
00:10:21.250 --> 00:10:23.440
That is the reference counting approach.

154
00:10:23.440 --> 00:10:28.660
Now it's not exactly inferior It just has some disadvantages but it's also quite light weight and quite

155
00:10:28.690 --> 00:10:29.530
easy to use.

156
00:10:29.560 --> 00:10:32.380
So teacher pointer is great.

157
00:10:32.390 --> 00:10:34.030
We can use two shared pointer.

158
00:10:34.030 --> 00:10:39.460
It's much better than doing everything manually the way a teacher pointer works is very simple you construct

159
00:10:39.730 --> 00:10:44.020
a teacher pointers you create a shared point that actually exists on the stack.

160
00:10:44.080 --> 00:10:45.640
It's a pointer.

161
00:10:45.640 --> 00:10:50.620
So it exists here on the stack but it is pointing to an object out on the heap.

162
00:10:50.620 --> 00:10:56.590
When you construct a T shed pointer it will increment the reference count of the object it's pointing

163
00:10:56.590 --> 00:10:57.220
to.

164
00:10:57.220 --> 00:11:02.260
So you know that when you've got a shared point hanging around that object on the heap is never going

165
00:11:02.260 --> 00:11:02.950
to disappear.

166
00:11:03.060 --> 00:11:06.050
You can have as many shared points as the same object as you like.

167
00:11:06.100 --> 00:11:07.610
The reference counts just going to go up.

168
00:11:07.720 --> 00:11:12.760
But then what happens is very interesting as you roll back the stack as you delete objects from the

169
00:11:12.760 --> 00:11:13.490
stack.

170
00:11:13.510 --> 00:11:19.000
You may end up deleting the teacher pointer and so when distracting the teacher point a decrements the

171
00:11:19.000 --> 00:11:20.290
reference count.

172
00:11:20.470 --> 00:11:21.400
Very very useful.

173
00:11:21.400 --> 00:11:26.260
That means if you decrement the reference count then eventually that will go down to zero and eventually

174
00:11:26.260 --> 00:11:27.630
will clear up the memory on the stack.

175
00:11:27.630 --> 00:11:32.770
And we will not end up with leaking memory at least if we don't have cycles.

176
00:11:33.110 --> 00:11:36.490
Okay then we're going to go to garbage collection in unreal.

177
00:11:36.490 --> 00:11:37.980
How do we do that.

178
00:11:38.380 --> 00:11:43.670
Well garbage collection in real is automatically on for all you objects.

179
00:11:43.690 --> 00:11:48.750
All you objects in unreel will be part of that garbage collection set in inverted commas.

180
00:11:49.680 --> 00:11:52.340
Unreel starts from a so-called roots set.

181
00:11:52.350 --> 00:11:58.410
Now there are functions that we can call to put objects you object in the root set and this means that

182
00:11:58.410 --> 00:12:03.000
they will never be garbage collected because they are believed to be right at the top of the hierarchy

183
00:12:03.030 --> 00:12:06.600
absolutely integral to the working of your program.

184
00:12:06.930 --> 00:12:09.940
So this is the root set and that's where it starts from.

185
00:12:09.960 --> 00:12:13.070
That's where it starts walking and it walks down.

186
00:12:13.070 --> 00:12:18.780
What links does it walk down it walks down the you property point is so anything that is a U property

187
00:12:18.780 --> 00:12:24.510
on a U object is automatically going to be subject to garbage collection.

188
00:12:24.510 --> 00:12:30.780
If you have a new property pointer to another you object then you can be safely sure that your object

189
00:12:30.810 --> 00:12:38.630
isn't going to disappear at least at least if that object has not been d allocated.

190
00:12:38.630 --> 00:12:44.040
If you as in if nobody is pointing to you then that object might be fair game to remove as well.

191
00:12:44.560 --> 00:12:50.090
And so any object not found when walking through that set.

192
00:12:50.100 --> 00:12:55.860
Going through each of you property that is fair game it can be deleted by the garbage collection whenever

193
00:12:55.860 --> 00:12:58.320
unreel feels like it wants to.

194
00:12:58.320 --> 00:13:01.810
So that is how garbage collection is done in unreal.

195
00:13:01.830 --> 00:13:02.670
Very useful to know.

196
00:13:02.670 --> 00:13:10.260
Now we know why we're using that t shared pointer because we're dealing with an interface that isn't

197
00:13:10.740 --> 00:13:15.850
going to be a new object so we need to use something that doesn't use this new object mechanism.

198
00:13:16.050 --> 00:13:20.710
But we still want it to be easier than just using a raw pointer and having to allocate an deallocate.

199
00:13:20.880 --> 00:13:23.640
So in that case we use a shared pointer.

200
00:13:23.790 --> 00:13:24.330
Perfect.

201
00:13:24.360 --> 00:13:29.040
So we've got the idea of why we're using a shared pointer in and real and in the next lecturn we can

202
00:13:29.040 --> 00:13:31.110
go on and actually make use of it.
