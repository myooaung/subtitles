WEBVTT
1
00:00:04.430 --> 00:00:07.820
Welcome to yet another exciting lecture and this one.

2
00:00:07.820 --> 00:00:13.250
We are going to be hooking up some functionality and they'll be very basic to our main menu that when

3
00:00:13.250 --> 00:00:15.890
we click host it adds to this list.

4
00:00:15.890 --> 00:00:20.090
Let me just clear the log so that we can see that it's logging out when I hit host.

5
00:00:20.300 --> 00:00:23.270
And it's doing this entirely in the C++.

6
00:00:23.330 --> 00:00:25.700
So let's find out how that's done.

7
00:00:25.700 --> 00:00:27.220
I'm looking forward to it.

8
00:00:28.820 --> 00:00:37.340
So we are here in the you use a widget documentation because I want us to get some clue of how we can

9
00:00:37.340 --> 00:00:42.860
start to register for call-backs when a button is clicked.

10
00:00:42.860 --> 00:00:48.650
Now my first indication would be to try out a few of the different places you might do this.

11
00:00:48.650 --> 00:00:53.890
I would look for begin play for example and notice that there isn't a big in play.

12
00:00:53.900 --> 00:01:01.400
And in fact there isn't in any of the super classes and in fact the constructor is too early to be accessing

13
00:01:01.460 --> 00:01:04.430
the buttons so we shouldn't be doing it in the constructor either.

14
00:01:04.430 --> 00:01:09.710
However there is a method that's appropriate and that method is called initialise.

15
00:01:09.890 --> 00:01:14.430
So initialise is not immediately obvious.

16
00:01:14.430 --> 00:01:21.080
It's further down the list and it doesn't really have very much documentation but it is the one that

17
00:01:21.080 --> 00:01:22.820
you should be using to bind to.

18
00:01:22.970 --> 00:01:24.410
It's virtual and it returns.

19
00:01:24.430 --> 00:01:29.290
Ball so ball because it can succeed or it can fail to initialize.

20
00:01:29.360 --> 00:01:35.210
Let's go ahead and have a go at implementing this initialize in a user a widget So I'm going to take

21
00:01:35.480 --> 00:01:44.630
first of all a copy of the signature and go over to the head of file of our main menu dot H and in there.

22
00:01:44.630 --> 00:01:52.340
I am going to create ourselves a signature of initialise and I'm going to actually make these properties

23
00:01:52.340 --> 00:01:53.100
while we're at it.

24
00:01:53.120 --> 00:01:57.350
I'm going to make the properties private not part of the public interface are they.

25
00:01:57.740 --> 00:01:59.570
And I'm going to make initialise.

26
00:02:00.270 --> 00:02:01.240
Protected.

27
00:02:03.670 --> 00:02:04.930
And then what are we going to do.

28
00:02:04.940 --> 00:02:07.720
Well initialize these semicolon the end of the line.

29
00:02:07.720 --> 00:02:14.200
I'm going to copy that signature everything after virtual as virtual then go in the C plus plus go over

30
00:02:14.200 --> 00:02:23.560
to to the C++ and paste initialize in there and copy the class name u u main menu and put that as the

31
00:02:23.860 --> 00:02:29.370
namespace for initialize and then put some brackets after that.

32
00:02:29.410 --> 00:02:37.650
So we've got a bool returning super class and we do want to call our super class act super initialise

33
00:02:37.660 --> 00:02:43.400
So first port of call is to do that to call the super.

34
00:02:44.320 --> 00:02:46.680
Come on colon initialise.

35
00:02:47.750 --> 00:02:50.570
Doesn't take any arguments so that's fairly easy.

36
00:02:50.580 --> 00:02:52.370
BI Does return a boolean.

37
00:02:52.370 --> 00:02:55.370
So we should be careful that we don't proceed.

38
00:02:55.370 --> 00:03:05.150
If the super initialise has failed the way to do this is to do bull then store the variable and then

39
00:03:05.150 --> 00:03:06.820
just check if.

40
00:03:07.810 --> 00:03:09.670
Not success.

41
00:03:09.970 --> 00:03:13.180
Then we want to return early with false.

42
00:03:13.180 --> 00:03:21.070
Now I'm going to do this all on one line because it's fairly straightforward that if it's not successful

43
00:03:21.070 --> 00:03:25.150
then we should return and we don't need to be looking further.

44
00:03:25.580 --> 00:03:32.590
Okay so that is the first port of call we've called Super which means that now what we can do is do

45
00:03:32.590 --> 00:03:36.670
as set up as we need to so poor to do in here.

46
00:03:36.670 --> 00:03:42.580
To do set up and then at the end we do need to always return something out.

47
00:03:42.580 --> 00:03:48.070
This method because it is a boolean So I'm going to return true if all set up succeeded and we haven't

48
00:03:48.070 --> 00:03:48.540
failed.

49
00:03:48.550 --> 00:03:53.380
In the interim so that's how we do initialised Let's go ahead and build and make sure that that's all

50
00:03:53.380 --> 00:03:54.060
okay.

51
00:03:55.250 --> 00:03:56.900
Excellent our build at succeeders.

52
00:03:56.900 --> 00:04:02.210
I'm fairly happy that we are doing the right thing by calling initialise here now our set up what is

53
00:04:02.210 --> 00:04:09.140
our set up going to be where we're going to bind to our Basically the button being clicked event that

54
00:04:09.320 --> 00:04:11.870
what is that event and how do we get hold of it.

55
00:04:11.870 --> 00:04:15.630
Well let's go and have a look at the button documentation over here.

56
00:04:16.100 --> 00:04:18.490
So again resources always in the lectures.

57
00:04:18.590 --> 00:04:26.180
So here we've got a numerous number of events we got on clicked on hovered on pressed on released very

58
00:04:26.360 --> 00:04:28.700
very straightforward lots of ones for us to go for.

59
00:04:28.700 --> 00:04:33.140
Whether we want to go for clicked or pressed I'm not entirely sure it makes a difference.

60
00:04:33.140 --> 00:04:34.590
I think clicked is better.

61
00:04:34.750 --> 00:04:37.010
I think clicked means released as well.

62
00:04:37.010 --> 00:04:38.440
Perhaps we will see.

63
00:04:38.720 --> 00:04:42.710
And so we've got all of that and that's what we want to be getting hold of.

64
00:04:42.770 --> 00:04:50.950
Okay so let's go over in to the C++ and let's start off by we're trying to access the host.

65
00:04:51.350 --> 00:04:52.640
I believe so.

66
00:04:53.620 --> 00:04:55.870
It's actually a host button really.

67
00:04:55.990 --> 00:05:00.430
But just stick with the naming for now host and then samee.

68
00:05:00.600 --> 00:05:07.720
Okay doing my arrow doesn't seem to be doing anything if I hover over roadsweepers it's an incomplete

69
00:05:07.720 --> 00:05:09.580
class because before declared it.

70
00:05:09.910 --> 00:05:17.170
So if we go back in to the docs and find what the header is at the bottom of the file it's components

71
00:05:17.500 --> 00:05:23.130
but under H cells go back into visual studio and just make sure we include that.

72
00:05:23.140 --> 00:05:30.110
I like to leave my blank line in between includes and that would include the button.

73
00:05:30.130 --> 00:05:38.320
An action be an incomplete type anymore so let's arrow to that and look for the on click on click can

74
00:05:38.410 --> 00:05:39.340
from on click.

75
00:05:39.430 --> 00:05:46.220
It is basically just a dynamic handler but I have broken my paranoia rule.

76
00:05:46.250 --> 00:05:48.700
I haven't checked for NULL on the host.

77
00:05:48.730 --> 00:05:49.950
It could always be possible.

78
00:05:49.960 --> 00:05:52.670
So we want to do a null RET.

79
00:05:53.540 --> 00:05:55.290
Expanding out to do the ensure.

80
00:05:55.610 --> 00:06:00.330
And there I'm going to check that host is not now.

81
00:06:00.350 --> 00:06:02.710
Now one thing we're going to have to do too.

82
00:06:03.950 --> 00:06:05.270
Didn't properly work.

83
00:06:07.430 --> 00:06:11.060
Sometimes my text expander doesn't like to do what it's told.

84
00:06:11.060 --> 00:06:13.810
So let's try that one more time.

85
00:06:13.820 --> 00:06:14.740
There we go.

86
00:06:14.750 --> 00:06:20.930
And one thing we have to note is that when returning we can't just return empty you can't return void

87
00:06:20.930 --> 00:06:22.760
here it's a boolean return type.

88
00:06:22.790 --> 00:06:24.770
So we need to actually return false.

89
00:06:24.800 --> 00:06:31.190
So what we're saying is that if the host is a no pointer then we fail to initialize.

90
00:06:31.190 --> 00:06:32.830
So that should work just fine.

91
00:06:32.840 --> 00:06:39.790
And what we want to do is now bind to that on Click event and handle it in this C++.

92
00:06:39.800 --> 00:06:44.220
And that's something I'm going to leave to you to do as a button on click handler.

93
00:06:44.970 --> 00:06:50.460
So the challenge definition is super simple just like any other dynamic events.

94
00:06:50.460 --> 00:06:52.390
You know how to bind dynamic events by now.

95
00:06:52.410 --> 00:06:54.150
And if not you can look it up.

96
00:06:54.150 --> 00:07:01.020
Print out to the console when the button is clicked and test test test test.

97
00:07:01.080 --> 00:07:03.070
Pause the video and have a go at this.

98
00:07:04.560 --> 00:07:05.730
Okay welcome back.

99
00:07:05.730 --> 00:07:06.990
We're going to dive right in.

100
00:07:06.990 --> 00:07:13.850
So binding dynamic events requires a new function to call so I'm going to go to the main dot H.

101
00:07:14.040 --> 00:07:17.300
And in the private section I'm going to create that you function.

102
00:07:18.530 --> 00:07:22.410
Which doesn't need to be public or anything like that is just a function.

103
00:07:23.640 --> 00:07:25.370
So let's do that.

104
00:07:25.410 --> 00:07:31.560
I'm going to go for a void return type because it shouldn't be passing back anything.

105
00:07:31.560 --> 00:07:34.990
And we need to see what the signature of that on click is.

106
00:07:35.010 --> 00:07:44.180
So let's go over to the you button documentation then go and have a look at our on click and see that

107
00:07:44.180 --> 00:07:47.140
it is of type F on button clicked.

108
00:07:49.300 --> 00:07:50.430
She isn't being very helpful.

109
00:07:50.430 --> 00:07:54.350
F on button clicked event is not a very useful one.

110
00:07:55.950 --> 00:08:00.030
I wonder whether we can find something a bit more useful in this.

111
00:08:00.180 --> 00:08:05.970
One thing that you can do is you can go and look in the document in the documentation in the actual

112
00:08:06.030 --> 00:08:14.630
engine so in Visual Studio the way you would do this is to right click and go to the definition which

113
00:08:14.640 --> 00:08:19.360
gets us to the R F on button clicked event which I can go to definition again.

114
00:08:20.150 --> 00:08:25.000
And after a bit of spinning and maybe a bit of Intellisense it's going to take us to the right destination.

115
00:08:26.190 --> 00:08:31.830
Quick tip if you cancel Intellisense often it will give you just a list of results and you'll be able

116
00:08:31.830 --> 00:08:34.580
to find something if that's not what happens then.

117
00:08:34.740 --> 00:08:39.730
Sometimes if you're impatient you can just do a find and file that'll get you there just as quick.

118
00:08:39.960 --> 00:08:46.650
Now you'll see that it's a Declare dynamic multicast delegate and basically doesn't have any arguments.

119
00:08:46.740 --> 00:08:51.000
Now the reason I say it doesn't have any arguments is because if you look at this piece of documentation

120
00:08:51.030 --> 00:08:58.100
on delegates in general on how to use them and scroll on down to the section about where is it.

121
00:08:58.110 --> 00:09:00.820
Example I think example usage.

122
00:09:00.870 --> 00:09:07.500
You can see that the way that you declare delegates is with these macros that we've seen in the code

123
00:09:07.500 --> 00:09:08.000
base.

124
00:09:08.190 --> 00:09:13.710
But if you want to have more arguments you typically put a suffix on the end such as one parameter 2

125
00:09:13.710 --> 00:09:20.130
parameter and then they have the type of the argument there as well as the name of the delegates so

126
00:09:20.130 --> 00:09:23.750
when it doesn't have that in it's just declared delegate would declare multicast delegate.

127
00:09:23.940 --> 00:09:27.210
Then you know that it takes no arguments.

128
00:09:27.210 --> 00:09:31.180
So that's why we don't need to worry about passing any arguments.

129
00:09:31.190 --> 00:09:39.120
It's just going to be basically saying host server is going to be function with no arguments.

130
00:09:39.450 --> 00:09:48.780
Okay so we're going to go ahead and use this signature to declare it in hassey plus plus file and use

131
00:09:48.780 --> 00:09:56.220
the namespace you main menu and then we're going to go and create a body to this and it's going to be

132
00:09:56.230 --> 00:09:59.850
huie and score log log temp.

133
00:10:02.300 --> 00:10:10.870
Can't type it seems on fingers go temp warning and then it's just got some text saying.

134
00:10:13.350 --> 00:10:15.160
Ghana host a server.

135
00:10:18.230 --> 00:10:20.250
Or something to that effect.

136
00:10:20.500 --> 00:10:24.030
I semicolons for just for effect.

137
00:10:24.080 --> 00:10:28.000
And then we're going to bind this dynamic thing.

138
00:10:28.050 --> 00:10:31.350
There's going to be on click dot and dynamic.

139
00:10:33.080 --> 00:10:39.390
Always wants to alter complete it for me so how to hit controls enter on auto complete and then we want

140
00:10:39.440 --> 00:10:48.620
it to be bound to this and we want it to be bound to you main menu host server so we get the address

141
00:10:48.680 --> 00:10:56.090
of that with the address of operator and then the fully qualified name of host server and then the close

142
00:10:56.150 --> 00:10:57.620
and semicolon.

143
00:10:58.010 --> 00:11:00.040
And I don't have my cap lock on.

144
00:11:00.050 --> 00:11:05.090
Hopefully Okay so let's go ahead and build that hopefully there will be no errors and this is going

145
00:11:05.090 --> 00:11:05.900
to print out.

146
00:11:05.900 --> 00:11:09.380
I'm going to host a server when we click the host button.

147
00:11:09.380 --> 00:11:10.960
Let's see if that is actually the case.

148
00:11:10.970 --> 00:11:12.390
And that's what we're going to get.

149
00:11:12.590 --> 00:11:13.400
Build success.

150
00:11:13.400 --> 00:11:19.710
Let's go over in to unreel and in unreel I'm going to.

151
00:11:19.780 --> 00:11:20.230
Let's see.

152
00:11:20.240 --> 00:11:22.110
Open up my main menu.

153
00:11:22.640 --> 00:11:26.710
Go to the output log that ready and hit play.

154
00:11:27.690 --> 00:11:29.700
And then I'm going to click host.

155
00:11:29.700 --> 00:11:30.230
Yay.

156
00:11:30.240 --> 00:11:32.220
I'm going to have to serve that one works.

157
00:11:32.310 --> 00:11:36.030
Joined doesn't work but we've got one of them working so we know how to do the other one.

158
00:11:36.030 --> 00:11:41.070
No need to do it at this point until we're actually got something to call with joint but HOST We're

159
00:11:41.070 --> 00:11:45.960
going to be using in the next lecture so we're going to be looking at how to connect up that main menu

160
00:11:46.530 --> 00:11:51.470
to our game instance which is actually the thing responsible for doing that hosting.

161
00:11:51.480 --> 00:11:52.380
That's exciting stuff.

162
00:11:52.380 --> 00:11:54.300
Let's see you in the next lecture.
