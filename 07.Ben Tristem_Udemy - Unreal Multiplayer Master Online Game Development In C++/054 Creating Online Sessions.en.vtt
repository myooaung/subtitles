WEBVTT
1
00:00:04.670 --> 00:00:05.880
Welcome in this lecture.

2
00:00:05.920 --> 00:00:12.560
We are going to be learning all about creating sessions these things that allow us to have multi player

3
00:00:12.590 --> 00:00:17.690
match making and we're going to learn a little bit about what a synchronicity is why we use it in networking

4
00:00:17.720 --> 00:00:19.820
and how we use it in unreel.

5
00:00:19.820 --> 00:00:23.170
So without further ado let's dive in and see what's up.

6
00:00:23.880 --> 00:00:29.790
So now that we're equipped with a knowledge of shared pointers I feel like we are ready to tackle this

7
00:00:29.790 --> 00:00:35.490
shit session interface and start creating some sessions of our own that's going to be our first agenda

8
00:00:35.520 --> 00:00:36.330
item.

9
00:00:36.330 --> 00:00:43.140
So the point of the session interface is all outlined here in this documentation linked called us sessions

10
00:00:43.200 --> 00:00:50.340
and matchmaking and it talks about what a session is is basically the thing that starts us in a match

11
00:00:50.340 --> 00:00:56.760
making session starts as one wanting to matchmake with other players so it could be for example creating

12
00:00:56.760 --> 00:00:57.300
a server.

13
00:00:57.300 --> 00:01:03.240
It could be lobbying basically a session encompasses both of these aspects of match making.

14
00:01:03.240 --> 00:01:08.580
It says I want to create a new area in which people can matchmake.

15
00:01:08.870 --> 00:01:13.950
Okay so creating sessions that sort of makes sense now I want to draw your attention to the section

16
00:01:13.950 --> 00:01:19.980
on creating sessions where we talk about the interfaces used as you can see here it says that it is

17
00:01:19.980 --> 00:01:26.370
using the online session colon colon create session function which will create the session but it also

18
00:01:26.370 --> 00:01:28.080
says something about these.

19
00:01:28.080 --> 00:01:31.620
Once the session is created it called a delegates that's a bit strange.

20
00:01:31.620 --> 00:01:33.790
Why not just return something out create session.

21
00:01:33.930 --> 00:01:36.360
We'll cover that in just a moment.

22
00:01:36.360 --> 00:01:41.460
First let's go and have a look at how create session work so I'm going to open up the online session

23
00:01:41.490 --> 00:01:42.360
documentation.

24
00:01:42.390 --> 00:01:49.920
We're going to look for the this create session malarkey and see if we can find out what it does what

25
00:01:49.990 --> 00:01:51.620
it's how we call it.

26
00:01:51.990 --> 00:01:58.800
Okay so we've got create session turns bull it takes in a hosting player number a session name and something

27
00:01:58.800 --> 00:02:02.400
which we can't decipher so let's open up the documentation and see what that thing we can't decipher

28
00:02:02.430 --> 00:02:05.570
is it is the new sessions settings.

29
00:02:05.580 --> 00:02:12.270
It is a struct and we construct it obviously on the stack and it takes a reference a constant reference

30
00:02:12.600 --> 00:02:14.630
to that struct.

31
00:02:14.890 --> 00:02:17.310
Okay so that's what we are going to try and do.

32
00:02:17.310 --> 00:02:20.740
I'm going to try and use the shared a pointer that we have got.

33
00:02:20.750 --> 00:02:25.050
Now we know what a shared point it is to construct to create a session.

34
00:02:25.050 --> 00:02:28.980
So we've got our session that pointer which is valid.

35
00:02:28.980 --> 00:02:35.610
Now we know that our online session pointer is just a shared pointer to an online session which means

36
00:02:35.610 --> 00:02:38.100
that the online session is being all reference counted.

37
00:02:38.100 --> 00:02:43.320
And while we have this shared pointer there always going to be more than one references available.

38
00:02:43.320 --> 00:02:49.950
So we've got the dot is valid that's just a function on the structure that is the shared point out and

39
00:02:49.950 --> 00:02:52.360
it checks whether it is null or not.

40
00:02:52.380 --> 00:02:53.580
Now I can remove the log message.

41
00:02:53.580 --> 00:02:54.860
We no longer need that.

42
00:02:55.020 --> 00:03:03.810
But what we can do is we can do a session interface and then we can do an arrow to go ahead and dereference

43
00:03:04.050 --> 00:03:06.730
the t shared pointer.

44
00:03:06.900 --> 00:03:09.550
You can do it exactly the same as you would with a normal pointer.

45
00:03:09.570 --> 00:03:10.530
That's great.

46
00:03:10.590 --> 00:03:13.830
And then we can go ahead and do a create session.

47
00:03:14.280 --> 00:03:15.800
And this is going to take.

48
00:03:16.440 --> 00:03:19.990
First the player number which we're just going to use play as zero.

49
00:03:20.280 --> 00:03:23.040
Then it takes a name per session so you can do that.

50
00:03:23.070 --> 00:03:28.860
You can create a name with a text macro the text macro to convert it into many of the different types

51
00:03:29.190 --> 00:03:31.490
of text that you have in and real.

52
00:03:31.590 --> 00:03:41.780
So you can just do that and you can call it my session game and then we are going to add in the settings.

53
00:03:41.920 --> 00:03:44.510
Now let's go back into the documentation have a look.

54
00:03:44.560 --> 00:03:50.550
It's called The F online session settings and that's a struct so we can go ahead and create that structure

55
00:03:50.580 --> 00:03:52.940
just before we call create session.

56
00:03:53.010 --> 00:04:00.390
And I'm going to quote this session settings that ago defined and constructed and we can pass that on

57
00:04:00.420 --> 00:04:02.860
in to the function.

58
00:04:03.240 --> 00:04:05.370
Okay that seems fair enough.

59
00:04:05.370 --> 00:04:09.770
Let's have a go at building that and seeing if it works and makes some errors here.

60
00:04:09.780 --> 00:04:15.480
Let's have a look at what they are going to go to the output log and just read at what those errors

61
00:04:15.510 --> 00:04:16.480
are.

62
00:04:17.070 --> 00:04:23.760
Let's find it somewhere in here was the first meaningful error session settings use is undefined class

63
00:04:24.210 --> 00:04:28.940
f online session settings Okay so f online session settings needs a header.

64
00:04:29.130 --> 00:04:33.090
Now you can go ahead and search through your code.

65
00:04:33.110 --> 00:04:37.500
It doesn't tell you on the documentation unfortunately you can search through your code in the engine

66
00:04:37.500 --> 00:04:40.270
to try and find the header in which this is declared.

67
00:04:40.380 --> 00:04:45.840
Or you can do an F 12 in Visual Studio if you're using Visual Studio and you can see that it is the

68
00:04:45.900 --> 00:04:52.350
online sessions settings that dot H that were looking for so let's go up and add that to our list of

69
00:04:52.380 --> 00:04:53.450
Includes.

70
00:04:54.260 --> 00:04:56.090
To do that include.

71
00:04:57.670 --> 00:04:59.120
On line.

72
00:04:59.710 --> 00:05:01.290
Session settings.

73
00:05:01.410 --> 00:05:01.930
H.

74
00:05:01.940 --> 00:05:02.670
How again.

75
00:05:02.760 --> 00:05:08.350
I was also completing forming and you'll see it also says there's an undefined type of IE online set.

76
00:05:08.350 --> 00:05:13.510
Well let's see if that's gone away with the build it's still got some errors so let's go ahead to the

77
00:05:13.540 --> 00:05:16.150
output and have a look at what the error is.

78
00:05:16.360 --> 00:05:21.890
Yep sure enough it is the undefined ie online session so we can use the same trick to try and find out.

79
00:05:21.890 --> 00:05:24.080
I on line this session.

80
00:05:24.370 --> 00:05:26.060
So I am going to follow the pointer.

81
00:05:26.110 --> 00:05:33.130
The online session pointer I am going to follow the on line session itself which is unsurprisingly in

82
00:05:33.310 --> 00:05:34.710
online session interface.

83
00:05:34.720 --> 00:05:39.850
Dot H so we can go ahead and included that as well and just got a copy of the online session settings

84
00:05:39.880 --> 00:05:48.200
and have the online session interface so you can see that these headers e are very very small indeed.

85
00:05:48.220 --> 00:05:50.890
You need to basically include one for every object it seems.

86
00:05:50.900 --> 00:05:55.450
Go ahead and build that and now see whether that's going to work out a few.

87
00:05:55.480 --> 00:05:56.700
Alas that built.

88
00:05:56.860 --> 00:05:58.090
Now that's great.

89
00:05:58.090 --> 00:06:00.850
Now what we're going to do now is have a look at that thing.

90
00:06:00.850 --> 00:06:06.460
I brushed aside which is the delal get a chance at something we need to understand is about asynchronous

91
00:06:06.640 --> 00:06:11.320
operations because this creates session is actually going out to the network and as we know or you may

92
00:06:11.320 --> 00:06:16.660
know doing things on the network can take quite a long time like needs to travel a large distance across

93
00:06:16.660 --> 00:06:18.900
the globe in order to get response from servers.

94
00:06:19.060 --> 00:06:24.610
So things don't happen nearly as fast as they happen on your own CPU or on your own graphics card because

95
00:06:24.610 --> 00:06:26.390
those distances are very small.

96
00:06:26.560 --> 00:06:33.370
So what we need to do is be able to carry on playing our game while the server is trying to respond

97
00:06:33.370 --> 00:06:33.780
to us.

98
00:06:33.790 --> 00:06:39.610
And this is where something called a synchronicity comes in a synchronous means not at the same time

99
00:06:39.660 --> 00:06:46.090
a synchronous and it basically means that when this creates Session returns we haven't actually created

100
00:06:46.090 --> 00:06:52.750
the session yet the session is still in progress of being created and we will get a delegate call back

101
00:06:52.750 --> 00:06:56.380
to us when the session has successfully completed.

102
00:06:56.610 --> 00:06:59.640
Okay so how do we deal with that session.

103
00:06:59.890 --> 00:07:00.740
Call back.

104
00:07:00.820 --> 00:07:04.630
Well we've got the documentation here for online session.

105
00:07:04.630 --> 00:07:11.000
We can search for on Create session complete delegates let's have a look at the documentation for that.

106
00:07:11.200 --> 00:07:18.100
It has itself the type of F on Create session complete so we can go and have a look at f aren't create

107
00:07:18.100 --> 00:07:19.240
session complete.

108
00:07:19.340 --> 00:07:24.730
This is a little bit complicated but it is basically a T multicast delegate which takes two parameters

109
00:07:25.120 --> 00:07:28.420
an F name and a ball and its return type is void.

110
00:07:28.420 --> 00:07:31.200
That's how you read this definition here.

111
00:07:31.210 --> 00:07:32.940
This typedef definition.

112
00:07:33.100 --> 00:07:40.180
So the point of this is it's a T multicast delegate not a dynamic delegate by the way it is just a static

113
00:07:40.180 --> 00:07:46.510
delegate which means we don't have to faff around with you functions in this case we can just use normal

114
00:07:46.510 --> 00:07:53.740
C++ functions which are actually quite refreshing and in your documentation links I have included the

115
00:07:53.770 --> 00:07:59.170
reference about multi cast delegates here and how you bind to them.

116
00:07:59.170 --> 00:08:03.130
We bind to them with a variety of functions depending on what you want to bind.

117
00:08:03.250 --> 00:08:07.140
You can bind a raw C plus global functions if you like.

118
00:08:07.210 --> 00:08:14.800
You can bind shared pointers you can bind you objects your objects are probably the best one we definitely

119
00:08:14.800 --> 00:08:19.450
have a you object we've got our game instance and we know that that's going to be memory managed and

120
00:08:19.450 --> 00:08:22.770
garbage collected automatically for us and all that's going to be dealt with.

121
00:08:22.840 --> 00:08:27.910
So I'm fairly happy that we want to be using our you object.

122
00:08:28.480 --> 00:08:30.510
Okay so how do we go ahead do this.

123
00:08:30.580 --> 00:08:33.080
We're going to go to our session interface.

124
00:08:34.570 --> 00:08:39.160
And we are going to go very much like we did with multicast delegates.

125
00:08:39.220 --> 00:08:45.870
We're going to do the on Create session complete delegates and we can do a dot.

126
00:08:46.120 --> 00:08:52.510
And you function or actually a new object is what I want to do what I want to add this new object and

127
00:08:52.510 --> 00:08:55.210
very much exactly the same as dynamic delegate.

128
00:08:55.210 --> 00:09:02.080
We would add this and then we would add with dereference do address off and we would get the address

129
00:09:02.080 --> 00:09:06.520
of say whatever we want it to call say you puzzle platform game instance load menu except that doesn't

130
00:09:06.520 --> 00:09:08.640
have the right number of arguments.

131
00:09:08.650 --> 00:09:11.110
So you would have to declare that correctly.

132
00:09:11.270 --> 00:09:12.740
That's what you are going to do.

133
00:09:12.760 --> 00:09:18.520
We are going to be creating a session on host when we hit the host button on the UI.

134
00:09:18.550 --> 00:09:24.280
I want you to go ahead and create a session and then what I want you to do the very interesting bit

135
00:09:24.310 --> 00:09:29.740
is that when that session has finished being created and when the on Create session complete delegate

136
00:09:29.770 --> 00:09:30.610
is called.

137
00:09:30.760 --> 00:09:36.020
That's when I want you to do all the stuff that's currently in host all that tear down on the menu that

138
00:09:36.060 --> 00:09:37.450
printing a debug message.

139
00:09:37.450 --> 00:09:42.910
The travelling to the server I want you to do that after the session has finished completing which might

140
00:09:42.910 --> 00:09:44.590
take a few seconds.

141
00:09:44.800 --> 00:09:45.350
Okay.

142
00:09:45.370 --> 00:09:51.140
And we also want to make sure that it only does it when it's successfully complete Not just any time.

143
00:09:52.310 --> 00:09:55.610
So let's just restate that challenge for you.

144
00:09:55.790 --> 00:10:02.240
Well I am saying here is that I want you to use players there like I did use any name for the session

145
00:10:02.630 --> 00:10:06.670
use default settings for now and only go into the game.

146
00:10:06.710 --> 00:10:09.190
If we succeed in creating said session.

147
00:10:09.230 --> 00:10:11.330
So pause the video and have a go.

148
00:10:12.820 --> 00:10:13.470
Okay.

149
00:10:13.480 --> 00:10:16.190
Let's dive in and make this happen.

150
00:10:16.390 --> 00:10:21.670
So the first thing I'm going to need is a call back function so I'm going to go into game instance dot

151
00:10:21.700 --> 00:10:26.680
H and in my private functions I am going to go ahead and create a call back.

152
00:10:26.680 --> 00:10:28.550
Now the return type was void.

153
00:10:28.610 --> 00:10:30.740
You can check in the documentation if you don't remember.

154
00:10:30.940 --> 00:10:34.700
And it was on Create session complete.

155
00:10:36.700 --> 00:10:38.090
Is the name of the call-back.

156
00:10:38.110 --> 00:10:41.430
And it's going to take an F name which is going to be the session name.

157
00:10:42.160 --> 00:10:45.720
And it's going to take a ball of whether it succeeded or not.

158
00:10:46.790 --> 00:10:47.200
Okay.

159
00:10:47.210 --> 00:10:53.260
And I'm going to take that definition and I'm going to find it in my C++ file.

160
00:10:53.270 --> 00:10:56.320
I'm going to define it just underneath our host function.

161
00:10:56.390 --> 00:11:00.720
In fact it's going to be basically the host function so I'm going to replace the house function leave

162
00:11:00.720 --> 00:11:03.680
intact because we need it as well.

163
00:11:03.680 --> 00:11:08.440
We're going to need that to create the session and launch this whole process off.

164
00:11:08.900 --> 00:11:09.470
Okay.

165
00:11:09.470 --> 00:11:13.230
And so that's now on create such an is going to call all of this code.

166
00:11:13.370 --> 00:11:20.600
But host is going to be something else host is going to have our session creation code in it so if we

167
00:11:20.600 --> 00:11:25.540
go up to it where our special creation code is currently we can go ahead and take that sation session

168
00:11:25.580 --> 00:11:28.800
create and the session settings set up.

169
00:11:29.000 --> 00:11:32.300
I'm going to cut that and paste that in house.

170
00:11:32.330 --> 00:11:37.900
Now obviously we have a problem here because our session interface is not declared here.

171
00:11:38.060 --> 00:11:43.960
So what we need to do is we need to pull that session interface up to be a class member.

172
00:11:44.860 --> 00:11:46.380
So I'm going to do that.

173
00:11:46.550 --> 00:11:49.650
I'm going to take our eye online from point to session interface.

174
00:11:49.660 --> 00:11:50.260
Copy that.

175
00:11:50.260 --> 00:11:56.290
Go up to header and I'm going to stick it just above our on Create session complete in the private area

176
00:11:56.350 --> 00:12:04.120
of our head a file and just declare that I online session pointer session interface and that should

177
00:12:04.120 --> 00:12:04.720
do the trick.

178
00:12:04.720 --> 00:12:11.420
Let's go back into it and we can now use that rather than a local variable check is valid.

179
00:12:11.440 --> 00:12:13.960
We're going to still set up our delegate here.

180
00:12:13.960 --> 00:12:15.830
That's a good place to set up the delegates.

181
00:12:15.940 --> 00:12:18.220
So it's going to be on Create session complete delegates.

182
00:12:18.260 --> 00:12:19.800
And you object this.

183
00:12:19.900 --> 00:12:22.660
And finally we can actually use the.

184
00:12:23.510 --> 00:12:29.740
The fully names spaced on creates session complete that you puzzle platforms game instance on session

185
00:12:29.800 --> 00:12:36.580
complete so ampersand and then that is going to be ad you object.

186
00:12:36.580 --> 00:12:39.000
So we can on the end of the line to complete that.

187
00:12:39.160 --> 00:12:45.760
And so that's set up at delegates so there's going to be listening on Create session with that function.

188
00:12:45.760 --> 00:12:48.460
When we hit host it's going to create the session.

189
00:12:48.460 --> 00:12:54.500
Now we do want to make sure that our session is valid so I'm going to do an if session interface.

190
00:12:57.540 --> 00:12:58.940
Is valid.

191
00:13:00.120 --> 00:13:06.410
Because we dont want to be dereferencing it is null and we can then create a session inside that if

192
00:13:06.420 --> 00:13:07.220
statement.

193
00:13:07.960 --> 00:13:11.880
Like so let's go ahead and build and see whether this is going to work.

194
00:13:12.340 --> 00:13:12.730
Okay.

195
00:13:12.730 --> 00:13:14.550
Some errors here to handle.

196
00:13:14.560 --> 00:13:21.610
So its saying that this session interface unknown override specifier thats a little bit odd.

197
00:13:24.030 --> 00:13:27.510
And seem to be complaining in the interface that's just Bill that again just in case.

198
00:13:28.760 --> 00:13:29.150
No no.

199
00:13:29.150 --> 00:13:31.610
That is still the error we are getting.

200
00:13:31.610 --> 00:13:32.740
So what's going on here.

201
00:13:32.750 --> 00:13:34.050
What's it saying.

202
00:13:34.280 --> 00:13:40.490
Not particularly obvious from this error message but basically what it's warning us of is that we don't

203
00:13:40.490 --> 00:13:45.390
have the header included that's really quite hard if you came a cropper on this issue don't worry.

204
00:13:45.410 --> 00:13:48.660
Basically we need to include that online subsystem.

205
00:13:48.720 --> 00:13:49.340
H.

206
00:13:49.490 --> 00:13:55.770
In our head of file because we can't forward declare this it's an online session pointer.

207
00:13:55.880 --> 00:14:00.370
It doesn't it will need the definition of what that means.

208
00:14:00.380 --> 00:14:06.080
So we need to put that in our head a file I'm going to do it just underneath an engine for Flash game

209
00:14:06.080 --> 00:14:12.930
instance include Let's go ahead and build that and see if that sorts out issue has are build success.

210
00:14:12.950 --> 00:14:16.650
So let's go over into one real and see whether our endeavours have worked.

211
00:14:16.680 --> 00:14:18.200
Going to go ahead hit play.

212
00:14:18.410 --> 00:14:19.880
Now I'm going to go ahead hit host.

213
00:14:19.880 --> 00:14:21.820
Moment of Truth.

214
00:14:21.980 --> 00:14:23.560
There was a brief pause.

215
00:14:23.570 --> 00:14:29.510
There was only brief but if you look at the logs you can see that it's saying that the SS did an auto

216
00:14:29.510 --> 00:14:33.520
log in and it said no game present to join for session game.

217
00:14:33.590 --> 00:14:39.200
That is a bit of gobbledygook at the moment but that's how we know that it has called a create session

218
00:14:39.200 --> 00:14:40.040
at least for now.

219
00:14:40.160 --> 00:14:45.430
And the other way we know is that if we exit the game now go ahead and hit play and try and host again.

220
00:14:46.570 --> 00:14:49.410
How it works just fine let me just try that one more time.

221
00:14:53.110 --> 00:14:54.030
See what's happening here.

222
00:14:54.030 --> 00:14:59.560
I wanted to teach you guys a lesson but have forgotten to do a little bit of the code that is necessary

223
00:14:59.890 --> 00:15:05.920
which is if we go down to online on Create session complete we're actually creating this whether or

224
00:15:05.920 --> 00:15:06.920
not we succeeded.

225
00:15:06.910 --> 00:15:11.700
So what we need to do in here is do an if success or if not success.

226
00:15:12.470 --> 00:15:20.300
Now my lecturer University always used to call this exclamation mark playing and I like that song Enter

227
00:15:20.420 --> 00:15:21.730
you call it pling as well.

228
00:15:21.730 --> 00:15:30.790
So if polings success then we are going to return early and I am going to log out a warning saying that

229
00:15:30.790 --> 00:15:33.470
we were not able to create the session.

230
00:15:33.670 --> 00:15:35.940
So let's go ahead and do that.

231
00:15:36.040 --> 00:15:43.180
Log out that warning saying could not create session and we can remove the parameters to that log message.

232
00:15:43.200 --> 00:15:44.720
We no longer need those.

233
00:15:44.840 --> 00:15:48.490
Go ahead and build and see whether that's going to work instead now.

234
00:15:48.850 --> 00:15:51.100
Well at the very least the build succeeds.

235
00:15:51.100 --> 00:15:54.190
Let's go over into one real and see whether it's going to work.

236
00:15:54.200 --> 00:15:58.000
So I'm going to go ahead hit play host.

237
00:15:58.030 --> 00:16:01.810
Sure enough it isn't allowing us to host now.

238
00:16:01.930 --> 00:16:05.280
And the reason is it's saying cannot create session my session game.

239
00:16:05.380 --> 00:16:09.360
The session already exists because we created it in the previous game and we didn't.

240
00:16:09.400 --> 00:16:11.010
We basically forgot to destroy it.

241
00:16:11.170 --> 00:16:12.850
So we're going to be doing in the next lecture.

242
00:16:12.850 --> 00:16:18.100
But it does show us that there are reasons for it to not succeed in creating the session.

243
00:16:18.250 --> 00:16:23.650
And sure enough when we hit host and it hasn't created the session it doesn't start the game which is

244
00:16:23.650 --> 00:16:26.080
perfect that's exactly what we want it to do.

245
00:16:26.080 --> 00:16:27.850
I'm very pleased with that.

246
00:16:27.850 --> 00:16:31.290
Congratulations pat yourselves on the back that was actually quite a tricky challenge.

247
00:16:31.300 --> 00:16:36.310
But now we have been able to create sessions and asynchronously know whether they have been created

248
00:16:36.640 --> 00:16:37.590
or not.

249
00:16:37.630 --> 00:16:39.890
I'll see you in the next lecture or be destroying them.
