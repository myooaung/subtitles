WEBVTT
1
00:00:04.570 --> 00:00:05.770
Welcome in this lecture.

2
00:00:05.770 --> 00:00:09.290
I can barely contain my excitement for what we're going to achieve here.

3
00:00:09.400 --> 00:00:12.090
I'm going to host again and over.

4
00:00:12.100 --> 00:00:20.530
In another instance of our game I'm going to go to the join menu and it is going to scan for games which

5
00:00:20.620 --> 00:00:23.210
currently doesn't show us that it's getting four games but that's okay.

6
00:00:23.320 --> 00:00:28.290
And there's going to have found a game now I'm going to select that game when hit join and boom we're

7
00:00:28.300 --> 00:00:32.890
in the same game without having to have typed a single IP address.

8
00:00:32.890 --> 00:00:38.140
Now I'm very excited about this probably more excited than I should be but this means that we've got

9
00:00:38.140 --> 00:00:46.080
the whole online subsystem working its allowed us to connect and join in a game over the online subsystem

10
00:00:46.090 --> 00:00:51.520
the online Knowles subsystem which means that we're just one step away from steam and being able to

11
00:00:51.520 --> 00:00:52.720
connect over the Internet.

12
00:00:52.720 --> 00:00:55.490
So let's dive in and see how this is achieved.

13
00:00:55.660 --> 00:00:59.770
So we've finally got to the stage where we know which Session we want to join.

14
00:00:59.770 --> 00:01:03.650
We just need to go ahead and join it so we can figure out how to do that.

15
00:01:03.740 --> 00:01:11.650
The joining session bit now if you look at the overarching documentation for session matching and session

16
00:01:11.650 --> 00:01:17.010
and match making rather which is you've seen before but is links against this letter as well.

17
00:01:17.050 --> 00:01:22.690
Now if we go to the last section you can see the joint sessions section that's quite important as well

18
00:01:22.690 --> 00:01:28.960
which can be doing in this lecture basically is this arch which is to start off by calling a joint session

19
00:01:29.290 --> 00:01:36.180
which triggers a joint session on whatever platform you're working with and you pass it.

20
00:01:36.190 --> 00:01:40.560
The number of the player that you want to join and also the sessions search results so that's where

21
00:01:40.560 --> 00:01:45.910
an index can come in to use that to index our list of search results and get the search result back

22
00:01:45.940 --> 00:01:48.730
and join that search result basically.

23
00:01:48.820 --> 00:01:53.440
And then when you've done that when that joining process is complete there will be a call-back very

24
00:01:53.440 --> 00:01:59.860
much like we've dealt with in the past with everything else and then where the logic gets me where the

25
00:01:59.860 --> 00:02:03.850
logic gets to the player into the match is performed blah blah blah.

26
00:02:03.850 --> 00:02:09.790
But the important thing is that's where we need to do a client travel and what we've got the most we

27
00:02:09.790 --> 00:02:15.400
need to do a client travel still the joint session doesn't do it for us but to do that we need to call

28
00:02:15.460 --> 00:02:22.210
this get resolved connect string which will get us basically the address that we then need to travel

29
00:02:22.240 --> 00:02:23.010
to.

30
00:02:23.350 --> 00:02:26.790
Hopefully that adds a little bit of clarity to what we're going to be doing this lecture.

31
00:02:26.800 --> 00:02:30.580
If it doesn't then it will certainly be clear as it goes along.

32
00:02:30.580 --> 00:02:35.770
Now the first thing we're gonna need is the index in the game instance so let's go and pass the index

33
00:02:35.770 --> 00:02:41.920
over to the game instance to do that we're going to go through our menu interface dot H at the moment

34
00:02:41.950 --> 00:02:47.260
we've got joint pacing up and address what we actually want it to pass up is the index to the search

35
00:02:47.260 --> 00:02:47.730
result.

36
00:02:47.740 --> 00:02:55.660
So it's going to be you in 32 an equal index and now I can copy this and I'm going to make sure that

37
00:02:55.660 --> 00:03:03.830
this is implemented in our game instance H where we currently are implementing join with the address.

38
00:03:04.030 --> 00:03:08.740
We wanted to implement with the index we'll go into the C++ and make sure the implementation does the

39
00:03:08.740 --> 00:03:09.870
same thing.

40
00:03:10.000 --> 00:03:11.800
It and Hammond dress anymore basically.

41
00:03:11.890 --> 00:03:15.130
So we dont have an address which is fine because we weren't using in the past.

42
00:03:15.310 --> 00:03:20.980
But we also need to change it in our See the main menu key is where we're calling it at the moment.

43
00:03:20.980 --> 00:03:25.530
We've got this join which at present is just passing in a string obviously that's not a work seeing

44
00:03:25.530 --> 00:03:27.620
as we got a unit now.

45
00:03:27.670 --> 00:03:34.650
So what we want to be doing here is we want to be passing in the selected index and get value.

46
00:03:34.660 --> 00:03:38.670
But obviously the get value is reminding us that this could be null.

47
00:03:38.680 --> 00:03:43.900
So we want to make sure this is only when the selected index is set so to do that I'm going to make

48
00:03:43.900 --> 00:03:47.400
sure that we have selected indexes set and and.

49
00:03:48.370 --> 00:03:54.190
The menu interface is not an old pointer which means that in this if statement I can use both the many

50
00:03:54.190 --> 00:03:59.530
interface the reference and the selected index get value I can keep the log message for when there is

51
00:03:59.530 --> 00:04:05.040
not a selected index just to make it super clear that why the join server is not doing anything.

52
00:04:05.230 --> 00:04:06.090
We have anything selected.

53
00:04:06.120 --> 00:04:07.800
Its not going to be doing anything.

54
00:04:08.320 --> 00:04:13.510
Okay so we got selected in next we got our menu and face it calling up to it which means that the index

55
00:04:13.540 --> 00:04:18.630
is getting all the way into the game instance dont see p p in this method here.

56
00:04:18.640 --> 00:04:22.910
Thats where we need to do our next the next step of joining the session.

57
00:04:22.990 --> 00:04:24.640
So how do we do the joint session.

58
00:04:24.640 --> 00:04:28.970
Well Ive got the documentation for you if I can open up the documentation.

59
00:04:28.970 --> 00:04:33.630
Here it is this tamping I online session joint session very much like the others.

60
00:04:33.640 --> 00:04:38.200
It takes a local plan and we're going to use 0 7 name which is going to use our default session name

61
00:04:38.200 --> 00:04:42.020
because we're not starting multiple not trying to join multiple simultaneously.

62
00:04:42.460 --> 00:04:46.870
And then it's got the search result as a constant reference that's what we are going to pass in with

63
00:04:46.870 --> 00:04:50.000
an index so this should be fairly straightforward.

64
00:04:50.290 --> 00:04:51.430
Let's go in here.

65
00:04:51.430 --> 00:04:57.550
We're going to be tearing down the menu first of all and we are not going to be setting this dph fault

66
00:04:57.670 --> 00:05:00.790
server list for testing anymore we don't need that.

67
00:05:01.760 --> 00:05:06.380
And we are going to be I'm leaving the comments in there for now because we're going to be using some

68
00:05:06.380 --> 00:05:10.520
of them in on joint session complete or you're going to be using them there.

69
00:05:10.880 --> 00:05:12.420
And what we're going to do here.

70
00:05:12.440 --> 00:05:17.250
We're going to make sure first of all that we don't have a null interface.

71
00:05:17.270 --> 00:05:23.690
So I'm going to make sure that we return earlier we don't know and tear down the menu if we have a null

72
00:05:24.170 --> 00:05:25.520
session interface.

73
00:05:25.520 --> 00:05:27.040
So I'm going to do an if.

74
00:05:28.200 --> 00:05:31.460
On what is the court's session interface.

75
00:05:32.920 --> 00:05:35.270
Not equal to null pointer.

76
00:05:36.050 --> 00:05:36.390
Right.

77
00:05:36.420 --> 00:05:39.950
So and if that's the case then I'm just going to return early.

78
00:05:43.080 --> 00:05:46.740
What I say actually if it's equal to no point then I want to return early.

79
00:05:46.740 --> 00:05:49.370
Why is this giving me a problem.

80
00:05:50.560 --> 00:05:52.910
Because I'm treating it like a raw C++ pointer.

81
00:05:52.930 --> 00:05:57.570
So what I actually want to say is if not is valid.

82
00:05:58.330 --> 00:06:05.330
So I am going to put the knot at the front pling and is valid and then we will return early which means

83
00:06:05.330 --> 00:06:09.520
that in the rest of the body we can use session interface which I'm going to say it's going to be Session

84
00:06:09.550 --> 00:06:19.180
interface arrow join session with play zero and the session name just going to be Session underscored

85
00:06:19.210 --> 00:06:21.490
name which we have as a constant.

86
00:06:21.490 --> 00:06:23.090
And then it's a search result.

87
00:06:23.140 --> 00:06:28.060
So the search result again we need to make sure that our search results are not null song and do another

88
00:06:28.300 --> 00:06:33.280
here saying if not and this time it's search.

89
00:06:34.730 --> 00:06:38.970
SESSIONS search I think it's what it's called section search.

90
00:06:39.150 --> 00:06:41.750
Dot is valid again.

91
00:06:41.960 --> 00:06:44.690
And if that's the case then return.

92
00:06:45.550 --> 00:06:47.040
Because we don't want to be doing this.

93
00:06:47.040 --> 00:06:53.400
Joining without any session search results then we can dereference happily seven session search arrow

94
00:06:53.460 --> 00:06:58.240
and we're going get the search result or Hopefully we will.

95
00:06:58.500 --> 00:07:06.210
If I type sessions search rudland search search arrow search results and then we can just get the one

96
00:07:06.810 --> 00:07:12.410
using the index operators like so of the index that we want to join.

97
00:07:12.750 --> 00:07:14.870
So we can go ahead and do that.

98
00:07:15.960 --> 00:07:20.620
Join the session for us and we're going to get an asynchronous call back.

99
00:07:20.620 --> 00:07:23.350
Very much like we've got for everything else.

100
00:07:23.480 --> 00:07:26.030
And I've got the documentation for that.

101
00:07:26.330 --> 00:07:32.690
Here the on join session complete tells you it takes two parameters it takes an F name which is going

102
00:07:32.690 --> 00:07:34.440
to be the name of the session.

103
00:07:34.610 --> 00:07:39.380
And an E on join session complete results which is an e-mail in which you can go and have a look at

104
00:07:39.740 --> 00:07:43.160
what the types of that in-home might be.

105
00:07:43.160 --> 00:07:46.750
Now I'm going to implement this because it is a little bit of a tricky thing.

106
00:07:46.760 --> 00:07:50.200
I'm going to implement the version in the head file.

107
00:07:50.330 --> 00:07:58.820
So it's going to be void on what did what do we say it's called on join session complete hunger.

108
00:07:58.820 --> 00:08:00.130
Copy that.

109
00:08:00.170 --> 00:08:05.510
So on joint session complete and then we are going to take an F name which I'm going to call the session

110
00:08:05.510 --> 00:08:08.830
name and then what's this funky type.

111
00:08:08.830 --> 00:08:14.300
This funky type It's E on joint session complete result code on kahlon type.

112
00:08:14.630 --> 00:08:17.730
So we are going to put that in there too.

113
00:08:17.900 --> 00:08:21.520
And we are going to go over and it's going to call this.

114
00:08:21.530 --> 00:08:23.930
The result is what I'm going to call it.

115
00:08:24.490 --> 00:08:27.770
The result of the join operation is essentially what it is.

116
00:08:28.150 --> 00:08:34.180
Now this ain't going to work just like so we're going to go into the C++ file and actually pull up one

117
00:08:34.180 --> 00:08:37.410
of that includes going to have to pull up the online session in space.

118
00:08:37.460 --> 00:08:44.300
H includes going to take that out of the C plus plus go up to their head and save it in the header.

119
00:08:44.320 --> 00:08:50.350
And now we compile warn you obviously that on join session complete is not implemented in the C++.

120
00:08:50.380 --> 00:08:53.600
But it won't complain about the include.

121
00:08:53.830 --> 00:08:58.050
That's how we're going to be doing our on joint session comp..

122
00:08:58.060 --> 00:09:00.090
Now you are going to be doing the rest.

123
00:09:00.190 --> 00:09:07.480
Making sure that on joint session complete then it gets a hold of an address and joins.

124
00:09:07.480 --> 00:09:12.490
So you've got the documentation here on get resolves connects thring see if you can figure how that

125
00:09:12.490 --> 00:09:16.290
works and see if you can figure out how to actually join the session.

126
00:09:16.630 --> 00:09:18.520
So here's your challenge definition.

127
00:09:18.580 --> 00:09:22.210
You are going to join a session so handle the join call back as I've said.

128
00:09:22.210 --> 00:09:23.770
Get the Connect string.

129
00:09:23.770 --> 00:09:26.050
See if you can work out how to use that API.

130
00:09:26.290 --> 00:09:31.000
Do a client travel to the Connect string that you can just use as an extra and as the address that's

131
00:09:31.000 --> 00:09:36.220
the whole point and then test it sporn up to game instances see if he can find each other without having

132
00:09:36.220 --> 00:09:38.480
to type in any IP addresses this time.

133
00:09:38.560 --> 00:09:40.230
Pause the video and have a go.

134
00:09:40.240 --> 00:09:41.370
Exciting challenge.

135
00:09:43.210 --> 00:09:44.550
Okay welcome back.

136
00:09:44.710 --> 00:09:50.620
So I'm going to go jump in and get started so it's telling me that I need to implement this thang so

137
00:09:50.640 --> 00:09:58.510
I'm going to copy it and go over into my cbp and I'm going to put after my join so that it's chronological.

138
00:09:58.510 --> 00:10:02.980
With these call-backs it's often helpful to have them organized crime or logically like this.

139
00:10:02.980 --> 00:10:07.180
At least I find that helpful for my mental model and for knowing.

140
00:10:07.510 --> 00:10:10.850
Often you need them together you need to know that I called this and then this thing got called.

141
00:10:10.880 --> 00:10:12.450
It's often very helpful way.

142
00:10:12.640 --> 00:10:15.400
So I'm going to namespace this function.

143
00:10:15.400 --> 00:10:19.730
I am going to remove my semicolon because that leads the really weird errors.

144
00:10:19.840 --> 00:10:21.760
So we got a result we got the session name.

145
00:10:21.760 --> 00:10:30.460
Now this commented out code I'm going to take that and pop it in to this new method because that's basically

146
00:10:30.460 --> 00:10:32.430
what I want to do is all this client travel stuff.

147
00:10:32.440 --> 00:10:34.410
I'm going to uncomment it in fact.

148
00:10:35.570 --> 00:10:43.220
And I am going to need to define an address the address actually we are going to get from this connect

149
00:10:43.220 --> 00:10:43.550
string.

150
00:10:43.550 --> 00:10:45.490
But let's deal with that in just a sec.

151
00:10:45.500 --> 00:10:51.880
We want to first make sure that on Section complete is going to get called by registering it for a call-back.

152
00:10:51.980 --> 00:10:56.360
So I'm going to go up to the top where we're doing all our call-backs for the session.

153
00:10:56.570 --> 00:11:02.430
The session interface so I'm going to do a session interface arrow on.

154
00:11:03.630 --> 00:11:09.860
Join session complete delegates and you object this.

155
00:11:10.670 --> 00:11:12.360
And Ben B.

156
00:11:13.340 --> 00:11:14.700
Address of operator.

157
00:11:15.560 --> 00:11:16.450
And then.

158
00:11:17.460 --> 00:11:21.640
We are going to need to paste in the fully qualified.

159
00:11:22.950 --> 00:11:25.070
On joins ocean complete.

160
00:11:27.070 --> 00:11:30.150
And once that's done I can put some semicolons on the end of the line.

161
00:11:30.160 --> 00:11:32.700
That should all be hunky dory and the.

162
00:11:33.540 --> 00:11:38.010
Signature should match because we basically copied it from the definition.

163
00:11:38.220 --> 00:11:40.770
So that is handling on join session complete.

164
00:11:40.770 --> 00:11:42.480
Now let's get that platform straight.

165
00:11:42.480 --> 00:11:45.780
So I've got the documentation here.

166
00:11:45.840 --> 00:11:47.480
Get resolved.

167
00:11:47.490 --> 00:11:48.150
Connect strings.

168
00:11:48.150 --> 00:11:49.520
I'm going to copy that.

169
00:11:49.620 --> 00:11:52.980
I'm going to go over into on joint session complete.

170
00:11:52.980 --> 00:11:59.310
Now I'm going to make sure first of all that we do indeed have a session song and do an if.

171
00:12:00.080 --> 00:12:04.680
Not session interface is valid.

172
00:12:07.470 --> 00:12:09.910
Long things to type aren't they in return.

173
00:12:10.110 --> 00:12:13.650
We don't want to be dealing with this method if we don't have a certain interface because we're gonna

174
00:12:13.650 --> 00:12:18.330
need it and this session interface we're going to need to produce this string.

175
00:12:18.820 --> 00:12:20.250
That's string address.

176
00:12:21.690 --> 00:12:27.060
And if you look at the documentation for our get resolved connect string you'll see that it takes an

177
00:12:27.090 --> 00:12:27.810
out parameter.

178
00:12:27.810 --> 00:12:31.120
So we're going to do is this session interface arrow.

179
00:12:33.750 --> 00:12:35.510
Get resolve connect string.

180
00:12:36.250 --> 00:12:37.420
Now what does it take.

181
00:12:37.420 --> 00:12:46.210
It takes a it's not a session search result I can take an F name which we've got so our session name

182
00:12:46.270 --> 00:12:54.280
has passed in to our on session complete and then it takes the Connect info as a reference so that's

183
00:12:54.280 --> 00:12:55.520
an out parameter.

184
00:12:55.690 --> 00:13:01.210
If you hadn't seen that come in now gone out parameter always a little bit dodgy when they're there

185
00:13:01.540 --> 00:13:03.000
but they are sometimes.

186
00:13:03.010 --> 00:13:07.160
So we've got seven resolve complete Now obviously the fact that it's gone out parameter tells you that

187
00:13:07.160 --> 00:13:09.900
this might fail because it's actually returning boolean.

188
00:13:09.940 --> 00:13:18.930
So we might want to say if not Session connects string and complete then we want to do some logging

189
00:13:18.940 --> 00:13:21.510
basically So I'm going to do a eui Log.

190
00:13:22.380 --> 00:13:23.340
Log temp.

191
00:13:24.230 --> 00:13:31.370
And then I'm going to put warning level and I'm going to put the text to be something along the lines

192
00:13:31.430 --> 00:13:35.590
of let's say could not get to connects ring.

193
00:13:38.200 --> 00:13:38.850
Fabulous.

194
00:13:38.890 --> 00:13:40.820
So could not get a connect string.

195
00:13:41.020 --> 00:13:45.850
And we want to make sure that we are returning if we could not get the Connect string because we're

196
00:13:45.850 --> 00:13:51.310
going to need that set when we actually use the address when we print the debug address.

197
00:13:51.310 --> 00:13:54.370
And when we connect to the client.

198
00:13:54.580 --> 00:13:55.600
So that should do the trick.

199
00:13:55.600 --> 00:13:57.910
Let's go ahead and build and see if it works.

200
00:13:57.970 --> 00:13:59.320
Has are the build works.

201
00:13:59.320 --> 00:14:01.080
Let's go over to the unreal editor.

202
00:14:01.240 --> 00:14:05.070
Well actually not the unreal editor we're going to go to puzzle platforms and right click on the you

203
00:14:05.080 --> 00:14:10.970
project and launch a couple of games so that we can try and get them to connect to each other.

204
00:14:11.350 --> 00:14:16.210
So my two games have launched up Im going to host in one of them in the other one.

205
00:14:16.210 --> 00:14:18.310
Im going to go to my Join menu.

206
00:14:18.760 --> 00:14:22.850
Now Im going to wait for the list of games to show up here.

207
00:14:22.960 --> 00:14:27.880
Now go got a list of games and it's got a number out of something we know that's false at the moment.

208
00:14:27.880 --> 00:14:36.760
If I click on this item and go and hit join then boom I have gone and joined into the same session.

209
00:14:36.760 --> 00:14:37.630
How cool is this.

210
00:14:37.630 --> 00:14:38.920
And here's my other character.

211
00:14:39.040 --> 00:14:44.080
He too is in this session as we can tell because he's just standing on the block right now.

212
00:14:44.260 --> 00:14:46.010
So that's awesome.

213
00:14:46.010 --> 00:14:51.760
We've managed to join a session without having to type a single IP address this is one step closer to

214
00:14:51.760 --> 00:14:54.600
being really really easy to use.

215
00:14:54.730 --> 00:14:57.700
Quick both of these games are really easy to use.

216
00:14:57.700 --> 00:14:59.000
Anybody could use this now.

217
00:14:59.140 --> 00:15:00.570
There's no need to.

218
00:15:00.820 --> 00:15:02.690
Well anyone could use it over land that is.

219
00:15:02.740 --> 00:15:04.960
And that's something I'd like you to check if you've got multiple computers.

220
00:15:04.960 --> 00:15:10.220
Try it out on a LAN because you will be able to find the other computers on a LAN using this method.

221
00:15:10.240 --> 00:15:16.180
And if you've got amachi then try it out on amachi as well and see whether you can connect to players

222
00:15:16.960 --> 00:15:21.340
across the Internet using this join session method.

223
00:15:21.350 --> 00:15:22.450
That's fantastic stuff.

224
00:15:22.450 --> 00:15:28.450
I'm really excited that we've got this far and we can basically be looking at how we can turn the no

225
00:15:28.480 --> 00:15:33.650
interface into steam which means connecting over the internet without any amachi or VPN.

226
00:15:33.640 --> 00:15:34.690
How cool is that.

227
00:15:34.690 --> 00:15:36.140
Let's press forward.

228
00:15:36.160 --> 00:15:37.880
I'll see you in the next lecture lecture.
