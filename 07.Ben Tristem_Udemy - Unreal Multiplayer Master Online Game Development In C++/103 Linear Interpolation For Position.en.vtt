WEBVTT
1
00:00:04.410 --> 00:00:06.080
Hello and welcome in this lecture.

2
00:00:06.090 --> 00:00:12.990
We are going to be looking at an algorithm for smooth client interpellation using something called linear

3
00:00:13.170 --> 00:00:17.760
interpolation so we gonna learn what linear interpolation is going to look at the algorithm outline

4
00:00:17.760 --> 00:00:21.750
There's a diagram and then we're going to implement some pseudocode or rather you're going to have a

5
00:00:21.750 --> 00:00:26.740
go at implementing the pseudo code for this algorithm that we're going to implement in future lectures.

6
00:00:26.820 --> 00:00:29.040
So let's dive in and see how it works.

7
00:00:30.410 --> 00:00:37.520
So now that we have got past the stage of having to refactor our code we can actually get into the details

8
00:00:37.520 --> 00:00:43.120
of how we are going to be creating this linear interpolation on the client.

9
00:00:43.250 --> 00:00:48.350
And for that we obviously need to understand what linear interpolation is and what interpolation is

10
00:00:48.350 --> 00:00:49.220
in general.

11
00:00:49.520 --> 00:00:56.910
So interpellation is just the act of trying to find a path between here a and here B.

12
00:00:56.960 --> 00:01:03.350
Now the simplest thing to do is to draw a line straight between them and this is the essence of what

13
00:01:03.350 --> 00:01:06.580
linear interpolation is that is linear interpolation right there.

14
00:01:06.590 --> 00:01:10.100
Well I did drawing that line from point A to Point B.

15
00:01:10.100 --> 00:01:12.320
Point A and Point B could be vectors.

16
00:01:12.350 --> 00:01:15.040
They could be lots of other things they could be floating point numbers.

17
00:01:15.040 --> 00:01:22.460
They could be anything that we could interpolate between like best try and find the values in between

18
00:01:22.810 --> 00:01:23.270
now.

19
00:01:23.300 --> 00:01:29.210
This is called linear interpolation it's the simplest kind it's often abbreviated down at to Lerp which

20
00:01:29.210 --> 00:01:35.690
is a really funny contraction of linear interpolation so if you see things in code called learning then

21
00:01:35.690 --> 00:01:41.240
you know how to essentially pronounce it in your head as a linear interpolation instead of some other

22
00:01:41.240 --> 00:01:45.820
funny contractions like slurping which is spherical linear interpolation and so on.

23
00:01:45.830 --> 00:01:48.560
But we're not going to go into those in great detail just yet.

24
00:01:48.860 --> 00:01:51.550
So point A point B we draw a straight line through them.

25
00:01:51.550 --> 00:01:52.460
And how do we do that.

26
00:01:52.470 --> 00:01:58.640
Well we do this with a series of points and we have a parameter that we tweak to get all the points

27
00:01:58.640 --> 00:02:04.850
along this line and that parameter is often called Alpha as it is in the unreel engine function.

28
00:02:04.850 --> 00:02:08.260
So when Alpha is set to 0 we get the first point.

29
00:02:08.270 --> 00:02:09.860
We get a point.

30
00:02:10.280 --> 00:02:15.820
And when we increase Alpha we start to move along this line towards been.

31
00:02:15.840 --> 00:02:20.890
So 2.5 is a quarter of the way along this line and point.

32
00:02:20.900 --> 00:02:21.350
Sorry.

33
00:02:21.440 --> 00:02:28.100
Point to 5 and point five is halfway along the line you get the idea until we get up to 1 which is the

34
00:02:28.100 --> 00:02:32.300
maximum and that gets us to the end of the line at B.

35
00:02:32.720 --> 00:02:37.020
So that is how we use a Lerp function to get from point A to Point B.

36
00:02:37.040 --> 00:02:43.990
But how are we going to use it in the context of trying to make our movement look smooth on the fly.

37
00:02:44.010 --> 00:02:49.250
Well for that we're going to have to look at a time diagram So here we've got the position of our client

38
00:02:49.250 --> 00:02:57.890
and I'm just taking one of the three position dimensions x and this is how we're going to do climb interpellation

39
00:02:57.980 --> 00:02:58.680
over time.

40
00:02:58.940 --> 00:03:05.030
So we get updates from our server coming in like this and it's saying okay our position currently is

41
00:03:05.030 --> 00:03:08.360
at x equals zero at this given time here.

42
00:03:08.650 --> 00:03:11.890
Okay and then we don't do anything at this stage.

43
00:03:11.900 --> 00:03:18.610
We don't have enough information to do any interpolation because we need two points in order to do interpellation.

44
00:03:18.890 --> 00:03:19.850
So what do we do.

45
00:03:19.850 --> 00:03:26.660
We wait for the next server update which comes through and says Oh you've moved on your now at X is

46
00:03:26.660 --> 00:03:29.900
3 or something like that were basically moved on further along x.

47
00:03:29.930 --> 00:03:35.930
This is an x position now and it's moved along in time as well obviously because time incessantly moves

48
00:03:35.930 --> 00:03:37.060
on.

49
00:03:37.100 --> 00:03:39.200
So what do we do when we receive the second update.

50
00:03:39.200 --> 00:03:40.330
Now we've got two points.

51
00:03:40.340 --> 00:03:46.400
We can do interpellation between these we can do linear interpolation for example and that's what we're

52
00:03:46.400 --> 00:03:46.820
going to do.

53
00:03:46.820 --> 00:03:48.860
We're going to say what was this time period.

54
00:03:48.860 --> 00:03:51.740
How long does it take between our two server updates.

55
00:03:52.070 --> 00:03:59.180
And let's take that amount of time to interpolate between the two positions so that what we'll get is

56
00:03:59.320 --> 00:04:05.020
a straight line that replicates the straight line that would have happened between these two updates.

57
00:04:05.180 --> 00:04:07.510
But because we didn't have the information we couldn't do it then.

58
00:04:07.610 --> 00:04:13.100
So were doing a little bit delayed as you can see it happening after a delay of that server update.

59
00:04:13.100 --> 00:04:20.540
So in the worst case on our server update being one second then our updates will happen one second delayed

60
00:04:20.630 --> 00:04:21.860
which is okay.

61
00:04:21.980 --> 00:04:27.440
It's a bit not great but it is better to be smooth or at least in certain games is besley we move in

62
00:04:27.440 --> 00:04:28.120
a certain games.

63
00:04:28.140 --> 00:04:33.740
It's better to be instant So you have to make those trade off decisions with your own game play in when

64
00:04:33.770 --> 00:04:39.160
deciding and creating multiplayer games this is why we often say multiplayer needs to be a design consideration

65
00:04:39.170 --> 00:04:42.930
from the outset because there's certain restrictions that you need to play with.

66
00:04:43.540 --> 00:04:44.520
Okay so what do we do now.

67
00:04:44.520 --> 00:04:48.210
Well we are doing this interpellation and hopefully we're waiting.

68
00:04:48.210 --> 00:04:52.580
We have said that this time interval is how long it took between the server updates.

69
00:04:52.620 --> 00:04:57.360
We're hoping that the next server update will come after the same time interval again.

70
00:04:57.360 --> 00:05:03.600
And if it does yeah there we go then we have got a new position to interpolate to and that's what we're

71
00:05:03.600 --> 00:05:04.520
going to do.

72
00:05:04.650 --> 00:05:10.350
We're going to look over how long it took between our last two updates and we are going to linearly

73
00:05:10.350 --> 00:05:15.840
interpolate to try and replicate the slope that we had between these two updates so you can see it's

74
00:05:15.900 --> 00:05:21.220
all happening just a little bit delayed by that update cycle and so on so forth.

75
00:05:21.240 --> 00:05:27.840
Now what happens if there is a little bit of a variation in our updates coming through what happens

76
00:05:27.840 --> 00:05:34.110
for example if we have an up day come through early if we have an update come through early like we

77
00:05:34.110 --> 00:05:41.670
do in this case then what we're going to do is we are going to cut short what we have been doing at

78
00:05:41.670 --> 00:05:48.030
the current location where we got to in our interpellation you can see we didn't quite make it to this

79
00:05:48.030 --> 00:05:53.670
point that the server updated us too but instead we are going to start from the location where we were

80
00:05:54.720 --> 00:06:00.300
cut short stop there and we're going to use that location as the starting point for an interpolation

81
00:06:00.660 --> 00:06:08.220
to the point that the server data's with and the time interval for that is going to be still the time

82
00:06:08.220 --> 00:06:15.630
between the last two updates which is this new update coming in and it's slightly shorter than the updates

83
00:06:15.630 --> 00:06:19.860
that we've had previously because maybe an network conditions have changed maybe an update Interpol

84
00:06:19.860 --> 00:06:20.520
has changed.

85
00:06:20.580 --> 00:06:23.470
So we are going to use the new Intervale basically.

86
00:06:24.270 --> 00:06:25.860
What about if they come later.

87
00:06:25.860 --> 00:06:27.080
These updates come later.

88
00:06:27.090 --> 00:06:29.290
Well you can kind of see what's going to happen.

89
00:06:29.310 --> 00:06:34.620
We got our update come through later than expected which means that we've actually carried on moving

90
00:06:34.620 --> 00:06:36.910
past the point that the server told us.

91
00:06:37.970 --> 00:06:48.560
Because it took longer and we're similarly going to use that longer time interval to extend our interpellation

92
00:06:49.010 --> 00:06:49.640
a little bit longer.

93
00:06:49.640 --> 00:06:54.940
So we got a slightly gentler slope here going back up to this late update.

94
00:06:54.950 --> 00:07:01.970
So that's the idea that's how we're going to be doing linear interpolation by storing the last location.

95
00:07:02.470 --> 00:07:08.470
That we received from the server and the next location that we receive from the service in the last

96
00:07:08.470 --> 00:07:17.260
two locations and the time it took them and we are going to be interpolating smoothly over that time.

97
00:07:17.850 --> 00:07:20.600
And for that we're going to be using a linear interpolation.

98
00:07:21.380 --> 00:07:28.550
So I'm actually going to challenge you to come up with the pseudo code for the algorithm to implement

99
00:07:28.550 --> 00:07:29.840
this approach.

100
00:07:29.840 --> 00:07:32.390
Now don't worry this is a hard challenge.

101
00:07:32.390 --> 00:07:36.080
And if you don't come up with the exact pseudocode that's not a failure.

102
00:07:36.080 --> 00:07:41.660
I actually just want you to attempt to come up with the pseudocode because that already having battled

103
00:07:41.660 --> 00:07:47.810
with the problem and having turned over in your mind is going to help you understand the pseudo code

104
00:07:47.930 --> 00:07:50.450
that I do write so much better.

105
00:07:50.450 --> 00:07:55.100
So the important thing is to try as hard as you can and if you get stuck Don't worry.

106
00:07:55.100 --> 00:07:57.850
The important thing is to have tried really hard.

107
00:07:57.860 --> 00:08:01.090
So with that said here are the points to consider.

108
00:08:01.090 --> 00:08:06.880
You need to consider what you're going to do on tick on the client in order to implement this interpellation

109
00:08:06.890 --> 00:08:09.400
what's going to happen every single tick.

110
00:08:10.350 --> 00:08:15.660
Then think about how about on rep when a new server updates come through.

111
00:08:15.720 --> 00:08:21.230
What are you going to do what you're going to do with that new information that just arrived.

112
00:08:21.750 --> 00:08:27.750
You going to use the Lerp function rembert the alert function takes two arguments the out a and the

113
00:08:27.750 --> 00:08:27.990
B.

114
00:08:27.990 --> 00:08:33.690
So the point we're starting at and the point that we are ending at and it takes an alpha which ranges

115
00:08:33.690 --> 00:08:41.250
between 0 and 1 which allows us to go smoothly between point eight and point b c you're going to use

116
00:08:41.250 --> 00:08:47.070
that function to try and get that linear interpolation between the points that the server has told us.

117
00:08:48.340 --> 00:08:53.950
And what data are you going to need to store so that you can set it in on rep and access it on tick

118
00:08:53.950 --> 00:08:56.350
or access between ticks.

119
00:08:56.410 --> 00:09:01.510
So post a video and try embattle with this pseudo code see if you can come up with something workable

120
00:09:01.720 --> 00:09:02.180
again.

121
00:09:02.200 --> 00:09:04.990
Don't worry if you don't come up with anything.

122
00:09:05.080 --> 00:09:10.650
Just try and make note of the areas where you got stuck and what the kind of problem space looks like.

123
00:09:10.650 --> 00:09:12.660
That's the idea of doing these challenges.

124
00:09:14.870 --> 00:09:15.710
Okay welcome back.

125
00:09:15.710 --> 00:09:19.820
So we're going to look through my pseudo code let me know how you did with that challenge again I'm

126
00:09:19.820 --> 00:09:22.860
not expecting you to have solved this.

127
00:09:22.880 --> 00:09:24.440
Not 100 percent anyway.

128
00:09:25.630 --> 00:09:26.980
So on tick.

129
00:09:27.040 --> 00:09:28.440
This is what we are going to do.

130
00:09:28.440 --> 00:09:31.770
This is the bulk of the interpellation by the way most of it happens on tick.

131
00:09:31.990 --> 00:09:37.240
And what we're going to do is first of all we're going to take our target location which is just going

132
00:09:37.240 --> 00:09:43.570
to be that what was said in the last sir but update so we take the service stay in get its location.

133
00:09:43.570 --> 00:09:46.460
That's where we're aiming to interpolate towards.

134
00:09:47.420 --> 00:09:55.340
Then we take our Lerp ratio or the Alpher that we were talking about in the explanation of lumping.

135
00:09:55.370 --> 00:09:57.860
And we calculate it and how do we calculate it.

136
00:09:57.890 --> 00:10:03.510
Well it's the time that we've had since the last update.

137
00:10:03.530 --> 00:10:05.030
So what do I mean by the last update.

138
00:10:05.040 --> 00:10:06.330
Let me show you.

139
00:10:06.410 --> 00:10:08.630
So here this is our last update.

140
00:10:08.660 --> 00:10:14.470
And we're saying how long has elapsed between this update and where we're trying to render this tick.

141
00:10:14.480 --> 00:10:22.910
So it's this part of the whole time interval and we're dividing it by the whole time interval so that

142
00:10:22.940 --> 00:10:26.340
at the beginning when no time has elapsed it's going to be zero.

143
00:10:26.420 --> 00:10:30.880
And at the end when all the time has elapsed it's going to be one because remember a number divided

144
00:10:30.890 --> 00:10:32.660
by itself is one.

145
00:10:32.720 --> 00:10:39.080
So that is why we are doing this Lerp ratio like so the time since the update divided between the time

146
00:10:39.320 --> 00:10:43.000
between the last updates and that's what we're aiming for.

147
00:10:43.100 --> 00:10:47.630
Then we can calculate the next location already using our Lerp function.

148
00:10:47.630 --> 00:10:49.430
We're going to have this start location.

149
00:10:49.430 --> 00:10:54.850
Notice I'm using green to denote variables that are on the clas.

150
00:10:54.860 --> 00:11:01.640
So they are the data that we are transferring between ticks or between on rep and um using white for

151
00:11:01.640 --> 00:11:03.800
local variables declared here.

152
00:11:03.980 --> 00:11:08.150
So the start location is something that we have already stored and we're going to store that on rep

153
00:11:08.150 --> 00:11:13.520
not show you how and the target location which we've just calculated here in the Lerp ratio which we've

154
00:11:13.520 --> 00:11:14.690
just calculated here.

155
00:11:15.580 --> 00:11:18.490
Then we're just going to set that location to the actor.

156
00:11:18.520 --> 00:11:25.450
So our access moves to the location that we have linearly interpolated fairly straightforward right.

157
00:11:26.220 --> 00:11:27.570
How about on rep.

158
00:11:27.680 --> 00:11:29.990
Well on rep is going to be really really easy.

159
00:11:30.000 --> 00:11:34.980
What we do is we take our start location and we reset it to the current location so that gives us the

160
00:11:34.980 --> 00:11:40.910
behaviour that we wanted for the early update and the late update basically that we reset and hit our

161
00:11:40.910 --> 00:11:46.420
start location to be where we currently are when these sub update came in.

162
00:11:48.100 --> 00:11:52.570
Now of course here there are a few little details that I've left out the pseudo code I mean pseudo code

163
00:11:52.570 --> 00:11:54.190
it is meant to be higher level.

164
00:11:54.220 --> 00:12:00.430
Those details are the time since update and the time between last update that's fairly straightforward.

165
00:12:00.430 --> 00:12:04.840
The time since update we're simply going to be incrementing every tick based on the delta time.

166
00:12:04.840 --> 00:12:05.860
That's very easy.

167
00:12:06.040 --> 00:12:11.800
And the time between last update is just going to be the time since update on rep.

168
00:12:11.830 --> 00:12:16.690
So we're going to work on rep set the time between last updates to be the current time since update

169
00:12:16.750 --> 00:12:19.170
and reset the time since update very straightforward.

170
00:12:19.240 --> 00:12:22.030
I'll be showing you how to do that exactly in the next video.

171
00:12:22.030 --> 00:12:22.920
That's not a problem.

172
00:12:23.020 --> 00:12:27.190
And then I'm going to be challenging it to implement this pseudocode but not for this video for the

173
00:12:27.190 --> 00:12:27.850
next one.

174
00:12:27.880 --> 00:12:28.840
I'll see you there.
