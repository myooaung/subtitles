1
1

00:00:04,069  -->  00:00:06,540
One of the other functions that Guido van
2

2

00:00:06,540  -->  00:00:08,340
Rossum wanted to remove from the
3

3

00:00:08,340  -->  00:00:10,830
standard library, is filter. So in this
4

4

00:00:10,830  -->  00:00:12,540
video, we're going to have a look at what
5

5

00:00:12,540  -->  00:00:14,820
it does and how a comprehension can be
6

6

00:00:14,820  -->  00:00:17,490
used to achieve the same result. Now what
7

7

00:00:17,490  -->  00:00:19,170
we'll do is, we'll start with an example
8

8

00:00:19,170  -->  00:00:20,820
from an earlier video, this
9

9

00:00:20,820  -->  00:00:24,240
time filtering out meals that contain spam. So
10

10

00:00:24,240  -->  00:00:25,740
I'm going to paste in this code that we
11

11

00:00:25,740  -->  00:00:27,359
used in the earlier video now, and I'll
12

12

00:00:27,359  -->  00:00:30,420
create a new python file. So I'm going
13

13

00:00:30,420  -->  00:00:33,030
to call the file, selecting Python file
14

14

00:00:33,030  -->  00:00:37,770
there, it's going to be filtertest. Now
15

15

00:00:37,770  -->  00:00:39,510
I'm going to paste in the sample
16

16

00:00:39,510  -->  00:00:43,050
code into there. Now as you can see, this uses
17

17

00:00:43,050  -->  00:00:45,059
a for loop and a list of comprehension
18

18

00:00:45,059  -->  00:00:47,910
to extract only those meals that don't
19

19

00:00:47,910  -->  00:00:50,579
contain spam. Let's just run this and
20

20

00:00:50,579  -->  00:00:55,260
make sure that it does work. So you can
21

21

00:00:55,260  -->  00:00:57,590
see there that it has successfully only
22

22

00:00:57,590  -->  00:00:59,760
extracted the meals that don't contain
23

23

00:00:59,760  -->  00:01:02,699
spam. Now the filter function can be used
24

24

00:01:02,699  -->  00:01:05,100
to do the same thing. I used the word
25

25

00:01:05,100  -->  00:01:07,140
filter in that earlier video, and again
26

26

00:01:07,140  -->  00:01:08,760
a minute ago, so it's no surprise that the
27

27

00:01:08,760  -->  00:01:11,909
filter function does the same thing.
28

28

00:01:11,909  -->  00:01:13,890
It's a bit more complicated though, because we
29

29

00:01:13,890  -->  00:01:16,080
need to create a function that only
30

30

00:01:16,080  -->  00:01:19,020
returns true if an item is what we want.
31

31

00:01:19,020  -->  00:01:22,979
So let's go ahead and do that. I'm going
32

32

00:01:22,979  -->  00:01:27,810
to start on line now 25 here; def not
33

33

00:01:27,810  -->  00:01:31,409
underscore spam then parenthesis meal
34

34

00:01:31,409  -->  00:01:35,579
underscore list column list right
35

35

00:01:35,579  -->  00:01:38,460
parenthesis and then a colon. Then we
36

36

00:01:38,460  -->  00:01:41,509
want to return and in double quotes spam
37

37

00:01:41,509  -->  00:01:47,220
not in meal underscore list. Okay and
38

38

00:01:47,220  -->  00:01:49,799
then on line 29 I'm going to type
39

39

00:01:49,799  -->  00:01:54,560
spamless meals is equal to list
40

40

00:01:54,560  -->  00:01:58,079
parenthesis filter parenthesis not
41

41

00:01:58,079  -->  00:02:01,439
underscore spam comma menu, then the two
42

42

00:02:01,439  -->  00:02:02,909
right closing parentheses and then
43

43

00:02:02,909  -->  00:02:05,149
let's print out that output. So print
44

44

00:02:05,149  -->  00:02:08,360
parentheses spamless underscore meals.
45

45

00:02:08,360  -->  00:02:11,280
Okay. So you can see there, that our not
46

46

00:02:11,280  -->  00:02:13,920
underscore spam function is very simple,
47

47

00:02:13,920  -->  00:02:16,140
and they often are when using filter. It
48

48

00:02:16,140  -->  00:02:18,720
returns true if there's no spam in the
49

49

00:02:18,720  -->  00:02:21,480
meal and false if there is. Just like map,
50

50

00:02:21,480  -->  00:02:23,910
filter takes two arguments; the function
51

51

00:02:23,910  -->  00:02:26,069
that does the filtering and an interable
52

52

00:02:26,069  -->  00:02:28,260
to iterate over. So I'm going to run the
53

53

00:02:28,260  -->  00:02:30,239
program, and we'll just confirm that the
54

54

00:02:30,239  -->  00:02:32,040
list produced by our filter function is
55

55

00:02:32,040  -->  00:02:36,300
identical to the comprehension. And
56

56

00:02:36,300  -->  00:02:38,190
you can see there that we've got the same
57

57

00:02:38,190  -->  00:02:40,920
output. You may not have agreed that map
58

58

00:02:40,920  -->  00:02:42,989
was particularly harder to read than the
59

59

00:02:42,989  -->  00:02:45,269
corresponding comprehension, but there's
60

60

00:02:45,269  -->  00:02:47,160
no doubt that the filter code is more
61

61

00:02:47,160  -->  00:02:49,170
difficult. Calling the function not
62

62

00:02:49,170  -->  00:02:51,480
underscore spam helps a lot, because you
63

63

00:02:51,480  -->  00:02:53,549
can take a reasonable guess as to what
64

64

00:02:53,549  -->  00:02:55,620
it does without reading its code but
65

65

00:02:55,620  -->  00:02:58,620
even so, the comprehension on line 19
66

66

00:02:58,620  -->  00:03:01,620
is easier to read. I've tried to make the
67

67

00:03:01,620  -->  00:03:04,019
filter code easier to understand,
68

68

00:03:04,019  -->  00:03:06,239
by calling the list spamless underscore
69

69

00:03:06,239  -->  00:03:09,810
meals on line 29. Using informative
70

70

00:03:09,810  -->  00:03:11,790
variable names like that is a great
71

71

00:03:11,790  -->  00:03:13,590
technique for making code readable.
72

72

00:03:13,590  -->  00:03:15,480
Anyone reading this code doesn't even
73

73

00:03:15,480  -->  00:03:17,610
have to bother checking what the filter
74

74

00:03:17,610  -->  00:03:19,530
function is doing. It's obviously
75

75

00:03:19,530  -->  00:03:21,420
intended to return a list of meals that
76

76

00:03:21,420  -->  00:03:24,870
don't contain spam. Or is it obvious? To a
77

77

00:03:24,870  -->  00:03:27,299
native English speaker, the made-up word,
78

78

00:03:27,299  -->  00:03:30,420
spamless, does imply that the meals won't
79

79

00:03:30,420  -->  00:03:32,910
contain spam, but as programmers, we're
80

80

00:03:32,910  -->  00:03:35,250
part of an international community. To a
81

81

00:03:35,250  -->  00:03:37,769
non-native English speaker, spamless
82

82

00:03:37,769  -->  00:03:40,320
probably means very little. A sensible
83

83

00:03:40,320  -->  00:03:41,700
choice of variable names can only
84

84

00:03:41,700  -->  00:03:43,829
accomplish so much. You can't rely
85

85

00:03:43,829  -->  00:03:45,900
on that alone to make your code readable.
86

86

00:03:45,900  -->  00:03:47,940
Alright so let's time the functions now.
87

87

00:03:47,940  -->  00:03:51,079
So I'll start by adding the timeit
88

88

00:03:51,079  -->  00:03:55,410
module as the first line, so import timeit.
89

89

00:03:55,410  -->  00:03:57,810
Next we want to wrap the two pieces
90

90

00:03:57,810  -->  00:03:59,430
of code in function definitions and
91

91

00:03:59,430  -->  00:04:01,019
return the values instead of printing
92

92

00:04:01,019  -->  00:04:03,930
them, so let's go ahead and do that.
93

93

00:04:03,930  -->  00:04:09,150
And then come down here to line 20, and actually,
94

94

00:04:09,150  -->  00:04:10,829
I'll make that line 21, and we're going
95

95

00:04:10,829  -->  00:04:16,200
to type def spamless comp parenthesis
96

96

00:04:16,200  -->  00:04:17,639
colon.
97

97

00:04:17,639  -->  00:04:19,709
Then these two lines, I'm going to tab
98

98

00:04:19,709  -->  00:04:21,090
over to indent them because they're
99

99

00:04:21,090  -->  00:04:23,460
part of the function. Then the print, instead
100

100

00:04:23,460  -->  00:04:25,080
of printing out the output, we're in fact,
101

101

00:04:25,080  -->  00:04:26,639
going to just return it so return
102

102

00:04:26,639  -->  00:04:29,849
meals. I'll add another line there, to
103

103

00:04:29,849  -->  00:04:32,159
keep Python happy. Then we've got our not
104

104

00:04:32,159  -->  00:04:34,139
spam definition there, which we can
105

105

00:04:34,139  -->  00:04:36,210
leave in, but down here we want to change
106

106

00:04:36,210  -->  00:04:38,490
this line here, so I'm gonna go down to
107

107

00:04:38,490  -->  00:04:41,819
line, start on line 33, def spamless
108

108

00:04:41,819  -->  00:04:45,779
underscore filter parentheses colon,
109

109

00:04:45,779  -->  00:04:46,979
then we'll indent these two lines of code
110

110

00:04:46,979  -->  00:04:50,909
again, but then we'll return spamless
111

111

00:04:50,909  -->  00:04:53,159
underscore meals instead of printing it
112

112

00:04:53,159  -->  00:04:53,580
out.
113

113

00:04:53,580  -->  00:04:56,969
That leaves us on line 36. So as always,
114

114

00:04:56,969  -->  00:04:58,650
I'm going to call the functions
115

115

00:04:58,650  -->  00:05:00,870
before timing them, to make sure I'm timing
116

116

00:05:00,870  -->  00:05:02,400
a code that works, and then we'll add the
117

117

00:05:02,400  -->  00:05:04,830
code to do the timing. So we go
118

118

00:05:04,830  -->  00:05:09,000
down to line 38 there, and we'll type if
119

119

00:05:09,000  -->  00:05:12,089
underscore underscore name underscore
120

120

00:05:12,089  -->  00:05:14,490
equals single quote underscore underscore
121

121

00:05:14,490  -->  00:05:16,529
main underscore underscore - we've done
122

122

00:05:16,529  -->  00:05:18,409
this countless times now - colon.
123

123

00:05:18,409  -->  00:05:20,699
So we'll print out the values, as I said,
124

124

00:05:20,699  -->  00:05:22,560
so the values from the function calls.
125

125

00:05:22,560  -->  00:05:24,569
The spamless underscore comp, we'll
126

126

00:05:24,569  -->  00:05:25,919
call that first and print out the
127

127

00:05:25,919  -->  00:05:28,199
value, then print parenthesis and do the
128

128

00:05:28,199  -->  00:05:29,969
same for our filter, spamless
129

129

00:05:29,969  -->  00:05:32,789
underscore filter, and then we'll add the
130

130

00:05:32,789  -->  00:05:35,310
code to do the timing. I needed the two
131

131

00:05:35,310  -->  00:05:38,339
equal signs there, on line 38, to fix that
132

132

00:05:38,339  -->  00:05:40,520
error. Alright then we want to do print
133

133

00:05:40,520  -->  00:05:44,180
parentheses timeit dot timeit.
134

134

00:05:44,180  -->  00:05:46,979
That's gonna be parentheses spamless
135

135

00:05:46,979  -->  00:05:49,919
comp, but no parentheses, comma
136

136

00:05:49,919  -->  00:05:54,509
and number equals 100,000. Then on the next line,
137

137

00:05:54,509  -->  00:05:58,469
print timeit dot timeit. That's going to be
138

138

00:05:58,469  -->  00:06:00,419
spamless underscore filter
139

139

00:06:00,419  -->  00:06:07,379
comma number equals 100,000. Okay. Alright
140

140

00:06:07,379  -->  00:06:12,689
and let's run it and see what we get.
141

141

00:06:12,689  -->  00:06:14,069
Alright, so you may have found the numbers
142

142

00:06:14,069  -->  00:06:15,719
surprising there, the result surprising.
143

143

00:06:15,719  -->  00:06:17,219
You can see that there's a huge
144

144

00:06:17,219  -->  00:06:18,870
difference between the two approaches.
145

145

00:06:18,870  -->  00:06:21,449
With the filter function, as you can see,
146

146

00:06:21,449  -->  00:06:24,029
they're taking roughly twice as long as
147

147

00:06:24,029  -->  00:06:26,129
a comprehension. The main reason for that
148

148

00:06:26,129  -->  00:06:28,500
is the additional overhead of the
149

149

00:06:28,500  -->  00:06:30,419
function call, but let's just run it
150

150

00:06:30,419  -->  00:06:32,300
a few more times.
151

151

00:06:32,300  -->  00:06:35,190
And we can confirm there that
152

152

00:06:35,190  -->  00:06:38,460
it's fairly consistently the comprehension
153

153

00:06:38,460  -->  00:06:41,160
is pretty well, half the speed
154

154

00:06:41,160  -->  00:06:44,310
of the filter, as you can see there.
155

155

00:06:44,310  -->  00:06:45,840
But again as I mentioned, the main reason
156

156

00:06:45,840  -->  00:06:47,370
for this is the added overhead of the
157

157

00:06:47,370  -->  00:06:49,350
function call, and we can check that by
158

158

00:06:49,350  -->  00:06:51,060
changing the comprehension to use the
159

159

00:06:51,060  -->  00:06:54,120
same function as filter's using. That's
160

160

00:06:54,120  -->  00:06:55,380
something you may need to do, by the way,
161

161

00:06:55,380  -->  00:06:57,060
if the filter function is quite complex.
162

162

00:06:57,060  -->  00:07:00,300
Let's go back up to our spamless underscore
163

163

00:07:00,300  -->  00:07:02,840
comp method and we'll change that.
164

164

00:07:02,840  -->  00:07:04,950
So at the moment, you can see it's got meal
165

165

00:07:04,950  -->  00:07:07,890
for meal in menu if "spam" not in meal so
166

166

00:07:07,890  -->  00:07:10,470
let's actually just duplicate that line
167

167

00:07:10,470  -->  00:07:13,650
and comment the first one out, and we'll
168

168

00:07:13,650  -->  00:07:16,680
change this instead to be meal for meal
169

169

00:07:16,680  -->  00:07:20,160
in menu if, then we'll get rid of the
170

170

00:07:20,160  -->  00:07:22,710
if condition there, and we'll change that
171

171

00:07:22,710  -->  00:07:25,770
to not underscore spam then parentheses
172

172

00:07:25,770  -->  00:07:27,180
meal. So in other words we're using
173

173

00:07:27,180  -->  00:07:29,700
that function now instead. And again this
174

174

00:07:29,700  -->  00:07:31,260
is something you may need to do if the
175

175

00:07:31,260  -->  00:07:33,510
filter function is quite complex. So
176

176

00:07:33,510  -->  00:07:36,690
we run this again now, and you can see
177

177

00:07:36,690  -->  00:07:39,090
now, that the timings are now a lot
178

178

00:07:39,090  -->  00:07:41,310
closer. The comprehension was a little bit
179

179

00:07:41,310  -->  00:07:42,450
faster there and I'll just run it
180

180

00:07:42,450  -->  00:07:44,430
again, and you can see, in fact in
181

181

00:07:44,430  -->  00:07:45,990
that case, we got the reverse true - the
182

182

00:07:45,990  -->  00:07:48,270
filter was actually slightly faster. This
183

183

00:07:48,270  -->  00:07:49,860
time you can see that the comprehension
184

184

00:07:49,860  -->  00:07:53,730
is faster, filter's faster, comprehension's
185

185

00:07:53,730  -->  00:07:55,320
faster, so it's very very close as you
186

186

00:07:55,320  -->  00:07:57,480
can see. Basically, calling the not
187

187

00:07:57,480  -->  00:07:59,100
underscore spam function for each item
188

188

00:07:59,100  -->  00:08:01,800
in the list has slowed it down, just as
189

189

00:08:01,800  -->  00:08:04,170
it does when using filter. Okay, so
190

190

00:08:04,170  -->  00:08:05,400
I think it's pretty clear that we
191

191

00:08:05,400  -->  00:08:07,830
should favor comprehensions over the filter
192

192

00:08:07,830  -->  00:08:09,630
function, so I'm going to stop the video
193

193

00:08:09,630  -->  00:08:12,030
here now. In the next one, we're going
194

194

00:08:12,030  -->  00:08:14,700
to take a look at the reduce function. So I'll
195

195

00:08:14,700  -->  00:08:17,780
see you in the next video.
