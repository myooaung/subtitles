1
00:00:05,370 --> 00:00:08,940
No último vídeo, mencionei que deveríamos escrever documentação para nossas funções.

2
00:00:09,390 --> 00:00:13,020
Isso diz três propósitos, embora um deles provavelmente seja óbvio.

3
00:00:15,090 --> 00:00:20,930
Documentar suas funções e classes facilita muito o uso de outras pessoas sem documentação.

4
00:00:21,000 --> 00:00:26,400
Outros programadores terão que adivinhar o que suas funções fazem e como chamá-las se beijar é muito

5
00:00:26,400 --> 00:00:26,850
trabalho.

6
00:00:27,150 --> 00:00:28,320
Eles não usarão suas funções.

7
00:00:28,710 --> 00:00:34,030
Se eu perder tempo escrevendo as mesmas funções novamente, você será demitido e seus filhos vão parar de

8
00:00:34,310 --> 00:00:34,670
rir.

9
00:00:34,860 --> 00:00:36,630
Mas na verdade é um problema sério.

10
00:00:38,450 --> 00:00:40,130
Esse outro programador pode ser você.

11
00:00:40,160 --> 00:00:44,540
Meses ou anos depois, lembre-se de que seu cartão pode estar em uso por anos.

12
00:00:44,930 --> 00:00:47,510
A documentação o ajudará a entender seu código.

13
00:00:47,900 --> 00:00:49,400
Quando você vier a modificá-lo mais tarde.

14
00:00:51,530 --> 00:00:56,330
Se você escrever a documentação para suas funções antes de escrever o código, terá uma idéia clara

15
00:00:56,720 --> 00:00:58,310
do que sua função fará.

16
00:00:58,960 --> 00:01:02,600
Você descreverá quaisquer parâmetros e retornará valores, se houver algum.

17
00:01:02,960 --> 00:01:05,060
Mas também o que a função deve fazer.

18
00:01:05,750 --> 00:01:08,150
Essa é a razão que pode não ter sido óbvia.

19
00:01:08,570 --> 00:01:14,270
Se você começar a escrever código com uma ideia clara do que esse código deve alcançar, é muito mais provável

20
00:01:14,270 --> 00:01:15,770
que produza algo que funcione.

21
00:01:17,740 --> 00:01:21,570
Se você começar a codificar sem ter uma ideia clara do que seu código deve fazer.

22
00:01:21,810 --> 00:01:23,250
Como você realmente saberá se faz isso?

23
00:01:24,120 --> 00:01:25,620
A documentação é importante.

24
00:01:26,850 --> 00:01:26,910
Oh

25
00:01:27,310 --> 00:01:32,460
Vamos parar de dar uma olhada em algumas das documentações das funções internas que vão parar

26
00:01:32,550 --> 00:01:37,920
abrindo um jogo de adivinhação no perfil que modificamos quando adicionamos a função get integer a ele.

27
00:01:43,870 --> 00:01:49,170
A primeira coisa que faço é excluir esse psicopata aqui em baixo, começando na linha 32, porque não precisamos mais dele.

28
00:01:51,800 --> 00:01:56,440
O encanto inteligente e de peça tem uma maneira de chamar a documentação enquanto você lê um código sênior.

29
00:01:57,460 --> 00:02:00,100
Então, se você voltar para a linha seis e clicarmos em input.

30
00:02:02,030 --> 00:02:06,410
Em seguida, o controle de notícias em um Jeyes de controle de teste do Mac, uma chave de controle para mim.

31
00:02:07,500 --> 00:02:10,700
E, a propósito, você também pode ir ao menu Exibir e escolher a documentação rápida.

32
00:02:11,300 --> 00:02:13,340
Vamos ver de onde esse texto vem daqui a pouco.

33
00:02:13,820 --> 00:02:19,610
Começa, no entanto, com a assinatura da função mostrando o parâmetro que fornecemos, o tipo de propriedades

34
00:02:19,610 --> 00:02:21,020
listadas como qualquer outra.

35
00:02:21,680 --> 00:02:25,400
Isso é verdade porque você pode passar a lista como um prompt para a função de entrada.

36
00:02:25,490 --> 00:02:28,220
Se você quisesse, normalmente você passa uma string.

37
00:02:28,550 --> 00:02:33,380
Essa é a maneira mais útil de informar ao usuário que o que eles devem divulgar, a documentação

38
00:02:33,380 --> 00:02:35,360
deve descrever com precisão a função.

39
00:02:35,360 --> 00:02:40,160
Parâmetros e entrada podem aceitar qualquer coisa que possa ser impressa em Python.

40
00:02:40,190 --> 00:02:40,970
Isso significa qualquer coisa.

41
00:02:41,600 --> 00:02:44,750
No final da primeira linha, obtemos a parte superior de retorno da função.

42
00:02:45,170 --> 00:02:48,350
Então, depois da seta à direita, pode-se dizer que a entrada retorna.

43
00:02:48,350 --> 00:02:50,600
Uma corda já sabia disso.

44
00:02:50,690 --> 00:02:52,820
E é por isso que temos que converter seqüências de caracteres em números inteiros.

45
00:02:53,070 --> 00:02:54,230
Essa é a função?

46
00:02:54,560 --> 00:02:55,310
Se queremos um número.

47
00:02:56,430 --> 00:03:00,090
Após a assinatura da função, há uma descrição do que a função faz.

48
00:03:00,900 --> 00:03:02,640
Tudo bem, então é hora de ver de onde tudo isso veio.

49
00:03:03,090 --> 00:03:04,230
Leia rapidamente este texto.

50
00:03:04,440 --> 00:03:05,520
Não tente memorizá-lo.

51
00:03:05,880 --> 00:03:08,310
Só precisamos reconhecê-lo quando o vermos novamente.

52
00:03:09,520 --> 00:03:13,830
Lá, podemos pular para o código fonte da função de entrada, mantendo pressionada a tecla Control e clicando

53
00:03:13,830 --> 00:03:16,510
na entrada. Usar um Mac é a chave de comando.

54
00:03:16,770 --> 00:03:17,540
Então faça isso agora.

55
00:03:19,550 --> 00:03:23,790
Agora, isso nos levou à definição da função de entrada no módulo INS incorporado.

56
00:03:24,210 --> 00:03:26,270
O editor Tapps construiu estoques.

57
00:03:26,310 --> 00:03:29,310
Você pode ver que a função de entrada está embutida no Python.

58
00:03:29,830 --> 00:03:32,550
O texto após a definição da função deve parecer familiar.

59
00:03:32,970 --> 00:03:34,230
Era para isso que estávamos olhando.

60
00:03:34,890 --> 00:03:38,940
Todo o texto entre as aspas triplas de abertura e fechamento é uma sequência de encaixe.

61
00:03:39,660 --> 00:03:44,550
É usado para gerar a documentação para funções e muitas outras coisas também, como módulos

62
00:03:44,550 --> 00:03:45,270
e classes.

63
00:03:45,600 --> 00:03:46,590
Veremos isso mais tarde.

64
00:03:47,100 --> 00:03:51,360
Acabamos de ver duas maneiras rápidas de visualizar a documentação do objeto Python.

65
00:03:51,720 --> 00:03:56,070
Podemos usar a sugestão de controle ou controlar o clique para ler a sequência de encaixe no código-fonte.

66
00:03:56,550 --> 00:03:59,230
Como você pode ver, a documentação foi criada a partir deste exame.

67
00:03:59,760 --> 00:04:04,530
Quando documentamos nossas funções, faremos isso adicionando uma sequência de encaixe ao início

68
00:04:04,890 --> 00:04:09,360
da função, exatamente como chegamos aqui, alinhadas de 248 a 256.

69
00:04:09,990 --> 00:04:15,210
Se falarmos sobre as principais strings com mais detalhes, esclarecerei algumas confusões que o código-fonte pode

70
00:04:15,210 --> 00:04:15,990
estar criando.

71
00:04:16,740 --> 00:04:20,250
A primeira coisa que você pode achar estranho é que não há código nessa função.

72
00:04:21,000 --> 00:04:24,190
Ele contém apenas a declaração anterior, como você pode ver na linha 257.

73
00:04:25,050 --> 00:04:29,130
Não demorou muito para dizer que a maioria das funções deste módulo interno é a mesma.

74
00:04:29,550 --> 00:04:34,780
A razão disso é que a maioria das coisas incorporadas, digamos, Python, são escritas em C e é por

75
00:04:34,790 --> 00:04:37,830
isso que a implementação do Python é chamada C Python.

76
00:04:38,310 --> 00:04:42,210
A segunda coisa é para o Trinity de linguagens de programação como C ++ ou Java.

77
00:04:42,730 --> 00:04:45,360
É sobre a convenção de colocação de strings doch.

78
00:04:46,200 --> 00:04:49,590
Observe que as doutrinas da função estão dentro da definição da função.

79
00:04:51,820 --> 00:04:56,590
A convenção e C ++ e Java devem colocar as strings de dock antes da declaração da função.

80
00:04:58,060 --> 00:05:00,760
No Python, a doutrina entra na função.

81
00:05:02,910 --> 00:05:03,930
Há uma boa razão para isso.

82
00:05:04,200 --> 00:05:06,210
Eles se tornam um atributo da função.

83
00:05:06,690 --> 00:05:11,910
Lembre-se de que tudo no Python é um objeto que significa que funções podem ter atributos e / ou demonstrar isso

84
00:05:11,910 --> 00:05:12,540
em breve.

85
00:05:13,870 --> 00:05:15,760
Se você não programou antes, não se preocupe.

86
00:05:16,000 --> 00:05:17,560
Provavelmente não fará muito sentido.

87
00:05:17,790 --> 00:05:22,390
O importante é que as doutrinas entrem na definição da função imediatamente antes do código.

88
00:05:23,400 --> 00:05:23,650
Tudo certo.

89
00:05:23,650 --> 00:05:25,570
Então, agora vimos um exemplo de uma corda de cachorro.

90
00:05:25,900 --> 00:05:30,670
E agora, para colocá-los no próximo vídeo, começaremos a rodar por conta própria antes de passarmos para esse vídeo,

91
00:05:31,070 --> 00:05:35,340
leia o PIP até as cinco e sete, que descreve as convenções para cordas de cães.

92
00:05:36,170 --> 00:05:37,330
Deixe isso aparecer na tela agora.

93
00:05:40,230 --> 00:05:42,650
Não, não é muito longo e você pode pular parte dele.

94
00:05:43,130 --> 00:05:47,530
Você pode pular a seção de indentação das cordas de doca de manuseio pelo restante do poço.

95
00:05:47,630 --> 00:05:51,530
Vamos dar uma idéia do que deve aparecer em suas principais strings e como organizá-las.

96
00:05:52,470 --> 00:05:54,590
Agora, vou marcar tock strings por exemplo.

97
00:05:54,920 --> 00:05:57,890
Adicionaremos strings doch à maioria das funções que criamos.

98
00:05:58,280 --> 00:06:00,770
E você aprenderá o que pensamos ser uma boa documentação.

99
00:06:01,460 --> 00:06:02,470
Vejo você no próximo vídeo.
