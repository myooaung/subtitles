1
1

00:00:04,730  -->  00:00:10,210
In the previous videos, we stored some strings in variables, without really explaining what was going on.
2

2

00:00:10,550  -->  00:00:13,899
So let's have another look at strings.py. I'll open that up.
3

3

00:00:14,900  -->  00:00:16,950
We created that of course, if you recall, in an earlier video.
4

4

00:01:34,970  -->  00:01:37,490
If you want to download these slides.
5

5

00:01:37,650  -->  00:01:42,560
In fact the entire slides for the course, go to the very last video this one here in the course.
6

6

00:01:42,560  -->  00:01:47,650
Right down the bottom there, and watch that video? It's only a short one, and it gives the details of how to go about downloading,
7

7

00:01:48,230  -->  00:01:55,690
these slides. And it also has got access to, or gives you access to a document with lots of other information career advice,
8

8

00:01:55,700  -->  00:01:59,350
and so on and so forth. So watch that bonus video to download the slides.
9

9

00:02:00,960  -->  00:02:05,600
So in this code, strings.py, we've got a
string with the value Hello.
10

10

00:02:05,600  -->  00:02:07,960
That's on line 6 as you can see.
11

11

00:02:07,960  -->  00:02:10,720
We've attached the name greeting to it.
12

12

00:02:10,720  -->  00:02:12,880
Whenever we use the name greeting in our code,
13

13

00:02:13,240  -->  00:02:16,100
Python knows that we're referring to the string, Hello.
14

14

00:02:16,890  -->  00:02:21,500
On line 7, we use the input function to get some text from the user.
15

15

00:02:22,060  -->  00:02:28,280
Whatever they type in will be stored in memory, and we attach the name, name, to it.
16

16

00:02:28,280  -->  00:02:32,020
And you can see there on lines 8 and also on lines 11,
17

17

00:02:32,020  -->  00:02:34,440
we use those variables to print out the strings.
18

18

00:02:35,320  -->  00:02:39,380
The Python documentation uses the word bound instead of attached.
19

19

00:02:39,380  -->  00:02:43,200
It would say that the variable greeting is bound to the string Hello
20

20

00:02:43,860  -->  00:02:50,600
So what we can do is create another variable called age and bind, or attach it, to the value 24,
21

21

00:02:50,600  -->  00:02:53,000
and then print it out. So let's have a go at doing that.
22

22

00:02:53,320  -->  00:02:56,560
I'm gonna come down on line 14 and type age equals 24
23

23

00:02:57,520  -->  00:03:00,780
And the next line, print parentheses age.
24

24

00:03:02,340  -->  00:03:06,680
Alright, I don't want to have to keep typing my name in every time we run this program,
25

25

00:03:06,680  -->  00:03:09,500
so I'm going to go ahead and change line 7 here.
26

26

00:03:09,500  -->  00:03:15,000
I'm just going to change the input just to a double quote, or set of double quotes and the word Tim.
27

27

00:03:15,460  -->  00:03:21,580
Alright. So if we run this now, I need to right-click because we're now using strings instead of escapechar,py.
28

28

00:03:24,620  -->  00:03:30,020
There's no surprises when we run the program. We get the two greetings printed, followed now by the value 24.
29

29

00:03:30,720  -->  00:03:36,960
In the introduction to Python video, I said that Python is a dynamically typed language,
30

30

00:03:36,960  -->  00:03:38,800
and also a strongly typed language.
31

31

00:03:39,430  -->  00:03:44,060
This is a good time to see what that means. So I'll start by explaining what we mean by type.
32

32

00:03:44,680  -->  00:03:50,010
There are a number of data types built into Python. We've already seen the string and integer types.
33

33

00:03:50,920  -->  00:03:54,820
Greeting is a string type, and age is an int.
34

34

00:03:54,820  -->  00:03:59,480
But you don't have to take my word for that. We can ask Python what type it thinks they are.
35

35

00:03:59,880  -->  00:04:02,440
I'm going to go ahead and type some code for that.
36

36

00:04:03,420  -->  00:04:11,920
So we'll come down here on line 17, I'm going to type print parentheses type parentheses greeting,
37

37

00:04:12,280  -->  00:04:14,880
And the two closing parentheses, right parenthesis.
38

38

00:04:15,760  -->  00:04:21,780
Then line 18, print, same thing there but this time with age, so type parentheses and age,
39

39

00:04:21,780  -->  00:04:23,680
and the two closing right parenthesis.
40

40

00:04:24,160  -->  00:04:26,160
So if you run this code now,
41

41

00:04:28,380  -->  00:04:35,660
and you can see that Python reports that greeting is an object of type string, str, while age is an object of type int.
42

42

00:04:36,540  -->  00:04:40,010
And it's using the term class there, but we'll talk more about class a little bit later.
43

43

00:04:40,260  -->  00:04:46,010
But these abbreviations, str and int, are Python abbreviations for string and integer, respectively.
44

44

00:04:46,660  -->  00:04:49,120
Python's got other types built-in as well.
45

45

00:04:49,120  -->  00:04:53,000
The float type, for example, that lets you work with numbers that have a decimal part.
46

46

00:04:53,200  -->  00:04:56,120
We can also create our own types, and we'll be doing that later
47

47

00:04:56,530  -->  00:05:02,170
So type, which is also called data type, describes the kind of information that we're storing.
48

48

00:05:03,060  -->  00:05:06,610
It's so usual to talk about a variable being of a certain type,
49

49

00:05:06,900  -->  00:05:12,080
but it can be more useful to think of values having a type, rather than variables.
50

50

00:05:12,080  -->  00:05:17,160
When we use the value 24 in our code, Python stores that value somewhere.
51

51

00:05:17,160  -->  00:05:20,800
The type of the value is int, it's an integer value.
52

52

00:05:20,800  -->  00:05:26,080
We bound the name age to it, which makes age have the type int.
53

53

00:05:26,420  -->  00:05:29,020
In Python, you can rebind a name to a different value.
54

54

00:05:29,780  -->  00:05:41,340
So, for example, we can come down here, and on line 20, I can type age equals, and double quotes, 2 years.
55

55

00:05:41,340  -->  00:05:46,860
So that stores now, the string value 2 years in memory, and binds the label age to it.
56

56

00:05:47,330  -->  00:05:49,870
That wouldn't be possible in many other languages.
57

57

00:05:49,880  -->  00:05:54,900
Once a variable has a type, you can only assign values of that type to it.
58

58

00:05:54,900  -->  00:05:58,500
Java and C are examples of languages that behave in that fashion.
59

59

00:05:58,500  -->  00:06:04,260
And that's why I said it can be more useful to think of the value as having the type, than the variable in Python.
60

60

00:06:04,760  -->  00:06:12,040
Here, age is now bound to a string value. It's no longer an int, it's a string, so let's confirm that.
61

61

00:06:12,040  -->  00:06:14,180
I'm going to print it out, and then print its type out.
62

62

00:06:14,430  -->  00:06:17,770
So I'll start on line 21, typing print parentheses age,
63

63

00:06:18,620  -->  00:06:22,540
on line 22, print parentheses type parentheses age.
64

64

00:06:24,300  -->  00:06:26,300
And we'll run the code.
65

65

00:06:29,840  -->  00:06:35,050
Alright, and as you can see, we've now got 2 years and class string showing for our variable age.
66

66

00:06:35,720  -->  00:06:37,460
So line 20
67

67

00:06:37,460  -->  00:06:42,620
looks like we're assigning the string value two years to a variable called age,
68

68

00:06:42,620  -->  00:06:45,760
and that would be true in other languages such as C and Java.
69

69

00:06:46,160  -->  00:06:52,100
In Python though, it's more helpful to say that we've rebound the label age to the string value 2 years.
70

70

00:06:53,060  -->  00:06:58,500
So I'll finish by saying that programmers have been talking about assigning values to variables
71

71

00:06:58,820  -->  00:07:00,960
for, now, over 60 years.
72

72

00:07:00,960  -->  00:07:05,340
It's become the way we speak and you'll find Python programmers talking in that way.
73

73

00:07:05,340  -->  00:07:07,900
And you'll probably notice me do it too, in these videos.
74

74

00:07:07,900  -->  00:07:14,060
It's not wrong, but some things will make more sense if think about a variable as a name or label,
75

75

00:07:14,060  -->  00:07:16,240
that's bound to a value.
76

76

00:07:16,240  -->  00:07:22,220
Alright, so I'll stop the video here, and in  the next one, we'll see why python is a strongly typed language.
77

77

00:07:22,620  -->  00:07:24,620
See you in the next video.
