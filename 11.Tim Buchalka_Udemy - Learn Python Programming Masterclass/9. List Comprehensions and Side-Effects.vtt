WEBVTT
1
00:00:05.360 --> 00:00:05.630
OK,

2
00:00:05.640 --> 00:00:08.910
so at this point we know what list comprehensions are.

3
00:00:09.210 --> 00:00:14.250
So let's have a look at how they differ from a for loop and how useful they can be.

4
00:00:14.250 --> 00:00:19.680
Now an important difference is that comprehensions don't have the side effects that you can get with

5
00:00:19.680 --> 00:00:20.680
a for loop.

6
00:00:20.720 --> 00:00:23.310
Now this course focuses on Python 3.

7
00:00:23.640 --> 00:00:28.920
We have been covering many of the differences from Python 2, and we've tried to make many of the examples

8
00:00:28.920 --> 00:00:34.740
work with Python 2, but it's really Python 3 that we're working with in this course. And now I'm mentioning

9
00:00:34.740 --> 00:00:39.550
that because this next bit won't work in Python 2. The behavior

10
00:00:39.570 --> 00:00:42.420
we're about to see doesn't happen in Python 2.

11
00:00:42.510 --> 00:00:48.900
In fact, the author of Python, Guido van Rossum, called it one of Python's, or Python 2's, "dirty little

12
00:00:48.900 --> 00:00:50.720
secrets" in a blog post.

13
00:00:50.740 --> 00:00:52.100
So I'm going to come back to that.

14
00:00:52.440 --> 00:00:59.130
First what I'll do is I'm going to close down centre_text.py.  We're going to open listcomp.py and

15
00:00:59.130 --> 00:01:05.270
listfor.py from the previous video, so listcomp. Then I'm going to come up here and do a split again to

16
00:01:05.270 --> 00:01:07.350
open it split vertically.

17
00:01:07.620 --> 00:01:13.310
So I'm going to click over here to the right hand side, double click listfor and close down listcomp there.

18
00:01:13.460 --> 00:01:18.270
So basically, we've now got listcomp and listfor open on the screen. Alright,

19
00:01:18.290 --> 00:01:23.360
now as you probably recall they're very simple programs that create a list of squares.

20
00:01:23.360 --> 00:01:25.570
Now this example's a bit contrived.

21
00:01:25.580 --> 00:01:30.380
There aren't many lines of code so you probably wouldn't make the deliberate mistake that I'm about

22
00:01:30.380 --> 00:01:31.300
to make.

23
00:01:31.310 --> 00:01:36.290
Remember that your programs could have hundreds or even thousands of lines of code, and not all of it

24
00:01:36.290 --> 00:01:38.680
may be written by the same person.

25
00:01:38.720 --> 00:01:42.360
So bear that in mind as you watch this simple example.

26
00:01:42.500 --> 00:01:49.100
What I'm going to do is change the programs to allow a user to specify which number they'd like to see

27
00:01:49.100 --> 00:01:50.050
the square of.

28
00:01:50.300 --> 00:01:53.050
So let's start with listfor.py.

29
00:01:53.290 --> 00:01:55.660
So I'm going to change that code a little bit.

30
00:01:55.700 --> 00:02:01.060
Basically, I'm going to add a new line of code on line five and push down the other code to line 7.

31
00:02:05.160 --> 00:02:07.790
That line of code's going to be number

32
00:02:08.790 --> 00:02:15.840
equals int parentheses input parentheses double quotes.

33
00:02:15.840 --> 00:02:16.650
Please enter a number,

34
00:02:19.920 --> 00:02:25.690
and I'll tell you its square,

35
00:02:26.050 --> 00:02:30.010
and then a colon and a space there, and obviously, two closing parentheses.

36
00:02:32.400 --> 00:02:37.240
Alright, now I'll just close down the project pane to give us a bit more space there. And then down here,

37
00:02:37.240 --> 00:02:41.090
instead of printing squares I'm actually going to put some other code in there, I'm going to put - well actually

38
00:02:41.120 --> 00:02:42.040
I'll leave that in there,

39
00:02:42.190 --> 00:02:49.960
on that line. The line above I'm going to type index underscore pos is equal to numbers dot index parentheses

40
00:02:50.330 --> 00:02:51.420
number.

41
00:02:51.840 --> 00:02:58.840
Then we're going to adjust line 12 slightly and print squares, and left and right square brackets, index underscore

42
00:02:58.840 --> 00:02:59.910
pos.

43
00:03:00.610 --> 00:03:03.370
So both lists now contain the same number of items.

44
00:03:03.520 --> 00:03:06.080
Squares has being created from the list in numbers,

45
00:03:06.310 --> 00:03:10.360
so it will contain an item for each item in numbers.

46
00:03:10.460 --> 00:03:18.700
Now on line 11, we find the index position of the required number in the numbers list, and on the

47
00:03:18.700 --> 00:03:24.670
next line, line 12, we get the item at the same position from the squares list.

48
00:03:24.670 --> 00:03:29.260
Now I haven't cluttered the code with error handling, to make sure you only enter valid numbers.

49
00:03:29.260 --> 00:03:32.270
The input has to be a number from 1 to 6 inclusive.

50
00:03:32.270 --> 00:03:33.450
So let's go ahead and run this,

51
00:03:37.680 --> 00:03:38.300
and down here

52
00:03:38.300 --> 00:03:41.540
we'll start with the number four.

53
00:03:41.910 --> 00:03:43.420
Now that doesn't look right,

54
00:03:43.950 --> 00:03:48.180
and in fact any number from 1 to 6 will give the same result here,

55
00:03:48.420 --> 00:03:57.000
36. So let's just try another example there. We'll try number one, 36 again, and we'll just try one other one just to confirm

56
00:03:57.000 --> 00:03:58.170
this.

57
00:03:58.160 --> 00:04:03.900
Let's say the number six, and still returning 36.

58
00:04:03.900 --> 00:04:10.170
Now the reason for this bug is because the variable number is also used as the loop control variable.

59
00:04:10.530 --> 00:04:13.300
So we've got number up here defined on line 5,

60
00:04:13.330 --> 00:04:18.060
and we're also using number here on line 8, as the loop control variable.

61
00:04:18.360 --> 00:04:25.480
So when the for loop terminates, number has the value of the last item in numbers, up here.

62
00:04:25.950 --> 00:04:27.130
So that's a 6.

63
00:04:27.250 --> 00:04:28.620
And that's not good.

64
00:04:29.160 --> 00:04:34.010
So let's see what happens with our list comprehension in listcomp.py.

65
00:04:34.350 --> 00:04:37.420
Now the code I'm going to add is exactly the same as I've added in listfor,

66
00:04:37.560 --> 00:04:43.100
and therefore I can just copy and paste it. So I'm going to copy that line 5, copy, come back on here,

67
00:04:43.550 --> 00:04:44.180
over to here.

68
00:04:44.450 --> 00:04:52.650
I'm going to remove that commented out code there. Alright I'm going to paste that on line 5, pushing down this code to line 7.

69
00:04:52.880 --> 00:04:58.260
And what I'll do then is uncomment that change so we're not using a range anymore, and I'm going to delete

70
00:04:58.260 --> 00:04:59.030
that range.

71
00:04:59.250 --> 00:05:04.010
So we're back to using our standard, back to using numbers instead of a range.

72
00:05:04.020 --> 00:05:08.050
Now I didn't have to do that. I didn't need to make that change but it makes the code the same as list

73
00:05:08.060 --> 00:05:09.120
for.

74
00:05:09.120 --> 00:05:17.310
So now if I try running this, running listcomp, then enter the number four. Then actually, what I need to

75
00:05:17.330 --> 00:05:17.550
do

76
00:05:17.550 --> 00:05:18.460
then is also copy

77
00:05:18.460 --> 00:05:23.810
this other code over, so let's do that as well, replacing the code from line nine,

78
00:05:27.360 --> 00:05:36.150
and run it again. Then we're going to use the number four. This time we get the correct value 16, and just try one

79
00:05:36.150 --> 00:05:36.980
more.

80
00:05:37.150 --> 00:05:48.500
This now should work correctly from all the values from 1 to 6, so we'll just try 1, one more, and we'll just

81
00:05:48.530 --> 00:05:51.860
try 6, 36.

82
00:05:51.870 --> 00:05:58.440
Alright, so our list comprehension treats the variable number just like a loop control variable in languages

83
00:05:58.440 --> 00:05:59.610
like C or Java.

84
00:05:59.790 --> 00:06:06.330
Now there's no side effect, and the value of any existing variable with the same name isn't modified.

85
00:06:06.360 --> 00:06:12.760
Now that's an important difference and a good reason to use a list comprehension rather than a for loop.

86
00:06:13.090 --> 00:06:19.260
Now as well as more concise code, you get automatic protection from bugs caused by side effects like

87
00:06:19.260 --> 00:06:20.080
this one.

88
00:06:20.100 --> 00:06:25.110
Now as I mentioned, Python 2 does leak the loop control variable.

89
00:06:25.110 --> 00:06:30.570
It's available in the outer scope, and would replace the value of any existing variable with the same

90
00:06:30.570 --> 00:06:31.300
name.

91
00:06:31.460 --> 00:06:37.140
Now that was fixed in Python 3, and you can find Guido van Rossum's comments on it in a blog post. I'll just

92
00:06:37.140 --> 00:06:37.770
quickly

93
00:06:37.770 --> 00:06:46.360
briefly bring them up on the screen.

94
00:06:46.410 --> 00:06:51.260
Now I'm not going to read through that now, but it's always interesting to read anything that the creator

95
00:06:51.260 --> 00:06:56.320
of your programming language has to say about a particular feature. Alright so we've now covered

96
00:06:56.420 --> 00:07:01.420
the basics of comprehensions but there's still more to look at.

97
00:07:01.430 --> 00:07:03.380
Now we're going to do that in the next few videos.

98
00:07:03.620 --> 00:07:09.120
At the moment though it's time for a challenge - some exercises to practice what we've covered so far.

99
00:07:09.240 --> 00:07:15.140
Now I've created a new Python file called challenge one dot python for this first exercise, and you can

100
00:07:15.140 --> 00:07:18.070
get that from the resources section of this video.

101
00:07:18.380 --> 00:07:25.040
But I'm going to, basically, close down this listfor, and I'm going to open the project pane, and I'm going to close down the

102
00:07:25.040 --> 00:07:27.930
other file, and I'm just going to create this new file now.

103
00:07:27.980 --> 00:07:33.080
But you can just grab this from the resources section of this video, and I'm calling it challenge1.

104
00:07:37.280 --> 00:07:43.630
Now I'm going to paste the code in.

105
00:07:43.780 --> 00:07:45.600
Alright so that's the first challenge1,

106
00:07:45.810 --> 00:07:51.440
that's the first exercise, and I'm going to paste in the code for the second one as well.

107
00:07:52.200 --> 00:07:58.500
And then we'll actually go through the solutions in the next video. So New, Python File, challenge2 -

108
00:08:01.500 --> 00:08:06.150
paste that in, and what I'll do is I'll stop the video here.

109
00:08:06.400 --> 00:08:11.360
And that's so you can download the files without the answers, and in the next video we'll go through

110
00:08:11.360 --> 00:08:13.260
the solutions to these challenges.

111
00:08:13.340 --> 00:08:14.720
So I'll see you in the next video.
