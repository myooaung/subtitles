WEBVTT
1
00:00:05.350 --> 00:00:10.060
Prima di esaminare le funzioni in modo più dettagliato, ora ci vorranno alcuni minuti per vedere cosa succede quando

2
00:00:10.060 --> 00:00:11.170
si chiama una funzione.

3
00:00:11.980 --> 00:00:16.840
Probabilmente hai capito che l'esecuzione salterà alla riga due quando chiameremo la funzione moltiplicatore.

4
00:00:17.140 --> 00:00:18.160
Quindi diciamo che sta succedendo.

5
00:00:18.810 --> 00:00:23.200
Farò un set di breakpoint sulla riga sei, quindi eseguirò il programma nel debugger.

6
00:00:27.060 --> 00:00:29.850
Quindi i debugger sono in cima alla linea sei dove chiamiamo moltiplicare.

7
00:00:30.270 --> 00:00:34.950
In un precedente video nella sezione di controllo del flusso del programma, ho detto che avrei spiegato il

8
00:00:34.950 --> 00:00:37.950
passaggio nei miei pulsanti cappotto più tardi fino a dopo.

9
00:00:38.430 --> 00:00:41.190
Fino ad ora, abbiamo usato il passaggio, Puttan.

10
00:00:42.940 --> 00:00:43.490
Questo qui.

11
00:00:44.210 --> 00:00:48.590
Quindi cominciamo dicendo ciò che non significa, un passo veloce sia per eseguire la riga sei.

12
00:00:50.580 --> 00:00:54.400
Otteniamo la risposta nella scheda della console e anche a destra della riga sei.

13
00:00:54.880 --> 00:01:00.100
Quindi il pulsante Passa sopra esegue una linea senza entrare in nessuna funzione su quella linea.

14
00:01:00.550 --> 00:01:01.810
Quindi, se lo riavvi di nuovo.

15
00:01:06.320 --> 00:01:07.890
E ci siamo fermati di nuovo sulla linea sei.

16
00:01:08.260 --> 00:01:12.810
Vuoi assicurarti che la scheda DeBacker sia selezionata questa volta quello che farò è usare per

17
00:01:12.810 --> 00:01:15.540
entrare nel mio pulsante di codice e fermarlo qui.

18
00:01:16.350 --> 00:01:18.720
È quello a destra che inserisce il mio codice.

19
00:01:19.500 --> 00:01:25.150
Una volta che ho cliccato su nessuna impostazione questa volta, l'esecuzione del programma è passata alla riga due.

20
00:01:25.780 --> 00:01:28.050
Abbiamo inserito il codice nella nostra funzione di moltiplicazione.

21
00:01:28.560 --> 00:01:32.940
Quando vuoi controllare il codice e le tue funzioni, ricordati di usare il passaggio nel mio pulsante di

22
00:01:32.940 --> 00:01:39.180
codice come ho appena fatto, è un passaggio, eseguirà il codice nella tua funzione senza passare attraverso di esso per entrare nel pulsante fa la stessa

23
00:01:39.240 --> 00:01:42.930
cosa al momento a uno a sinistra del pulsante su cui ho fatto clic.

24
00:01:43.290 --> 00:01:48.360
Vedresti una differenza e inizi a costruire un codice in moduli diversi per prendere l'abitudine di usare il passo

25
00:01:48.750 --> 00:01:52.890
nel mio codice, perché questo è generalmente il codice che vuoi eseguire il debug.

26
00:01:53.550 --> 00:01:53.790
Tutto ok.

27
00:01:53.790 --> 00:02:00.360
Quindi ora siamo alla seconda riga all'interno della funzione di moltiplicazione che sta per moltiplicare i due numeri e

28
00:02:00.360 --> 00:02:03.090
memorizzare il risultato nella variabile chiamata risultato.

29
00:02:03.450 --> 00:02:09.090
Quindi questo sondaggio che abbiamo fatto per usare il passaggio o entrare nel mio codice qui, entrambi faranno la stessa cosa quando non

30
00:02:09.390 --> 00:02:11.490
c'è una chiamata di funzione sulla linea corrente.

31
00:02:12.030 --> 00:02:17.220
Quindi, come risultato di noi, puoi passare qui a sinistra solo perché è una descrizione migliore di ciò che

32
00:02:17.340 --> 00:02:18.300
stiamo effettivamente facendo?

33
00:02:20.080 --> 00:02:20.920
Possiamo vedere quel risultato.

34
00:02:20.960 --> 00:02:27.580
Ora ha la valle quarantadue punti zero lassù sulla linea due e siamo pronti per eseguire la linea tre prima di

35
00:02:27.580 --> 00:02:28.720
scavalcare quella linea.

36
00:02:29.050 --> 00:02:31.000
Dai un'occhiata alle variabili nel debugger.

37
00:02:31.000 --> 00:02:32.200
Dolore al fondo.

38
00:02:32.560 --> 00:02:34.150
Abbiamo il risultato variabile lì dentro.

39
00:02:34.870 --> 00:02:38.860
Tieni d'occhio quel dolore, perché voglio parlare dell'ambito delle variabili.

40
00:02:39.250 --> 00:02:41.170
Questo è un buon modo per capire l'ambito.

41
00:02:41.860 --> 00:02:45.640
Quella variabile esiste solo all'interno della funzione moltiplica.

42
00:02:45.850 --> 00:02:47.770
Lo vedrai svanire quando lasciamo la funzione.

43
00:02:48.260 --> 00:02:48.880
Facciamolo.

44
00:02:49.350 --> 00:02:49.530
Clic.

45
00:02:49.600 --> 00:02:50.420
Passa di nuovo.

46
00:02:51.910 --> 00:02:54.090
Tornerò alla linea sei, come puoi vedere lì adesso.

47
00:02:54.570 --> 00:02:58.060
Si noti che il risultato è scomparso dal riquadro delle variabili.

48
00:02:58.650 --> 00:02:59.670
Quindi è importante.

49
00:02:59.880 --> 00:03:01.020
Non esiste più

50
00:03:01.410 --> 00:03:05.640
Tornerò su questo argomento e parlerò dell'ambito in modo più dettagliato nel prossimo video.

51
00:03:06.300 --> 00:03:10.680
Quindi torniamo alla riga sei e il codice nella nostra funzione di moltiplicazione è stato eseguito.

52
00:03:11.160 --> 00:03:13.050
Ritorna al valore LNT.

53
00:03:13.050 --> 00:03:14.370
Parker ha molto da fare.

54
00:03:14.790 --> 00:03:17.790
Quando premiamo di nuovo la punta, cosa che farò ora.

55
00:03:19.110 --> 00:03:24.310
Nove sei terminano annullando la risposta variabile alla valle restituita dalla nostra funzione.

56
00:03:24.550 --> 00:03:30.700
Ora possiamo dire la risposta in una variabile dolore legato alla valle, quarantadue punti zero Dio sette non è

57
00:03:30.700 --> 00:03:31.420
molto eccitante.

58
00:03:31.890 --> 00:03:37.000
Fai di nuovo un passo avanti per prevedere che Valley avrebbe terminato il programma o incoraggiato alla console.

59
00:03:37.000 --> 00:03:38.410
Ha fatto un giro della valle.

60
00:03:38.410 --> 00:03:40.630
Quarantadue punti zero sono stati stampati.

61
00:03:42.800 --> 00:03:47.220
Va bene, quindi questo ha dimostrato come cambia il flusso del tuo programma quando chiami una funzione.

62
00:03:47.670 --> 00:03:54.030
Abbiamo visto come l'esecuzione passa alla funzione ed esegue il suo codice quando termina la funzione.

63
00:03:54.300 --> 00:04:00.310
L'esecuzione riprende nel punto dopo la funzione, chiamala recitando il valore restituito o la funzione come

64
00:04:00.310 --> 00:04:01.110
facciamo qui.

65
00:04:01.440 --> 00:04:04.140
Il debugger si arresterà sulla stessa linea della chiamata di funzione.

66
00:04:04.560 --> 00:04:07.320
Questo perché il compito è ancora in attesa di accadere.

67
00:04:08.340 --> 00:04:12.150
Non tutte le funzioni restituiscono un valore utile e ne scriveranno alcune non successive.

68
00:04:13.210 --> 00:04:17.870
Nel prossimo video, spiegherò un po 'più di gergo che ti imbatterai nella lettura delle funzioni.

69
00:04:18.260 --> 00:04:22.400
Passa attraverso questo codice alcune altre volte fino a quando non sei felice di capire cosa sta succedendo.

70
00:04:22.790 --> 00:04:24.050
E ci vediamo nel prossimo video.
