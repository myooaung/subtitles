1

00:00:04,670  -->  00:00:08,990
Alright, so to see some more things we
can do with tuples, we need to open up

2

00:00:08,990  -->  00:00:19,189
the tuples_intro.py file. Now
we're going to keep the five tuples but

3

00:00:19,189  -->  00:00:24,679
delete everything else after line eleven,
and I'm going to comment out these four

4

00:00:24,679  -->  00:00:32,900
lines, as well. Alright, so each tuple
represents an album, with three items for

5

00:00:32,900  -->  00:00:38,539
the title, artist and year. So instead of
actually printing out metallica 0

6

00:00:38,540  -->  00:00:42,500
through to metallica 2,  as we did
earlier in the commented out code,

7

00:00:42,500  -->  00:00:46,960
we can actually unpack the tuple. Let's
have a go at doing that. So on line 12, I'm

8

00:00:46,969  -->  00:00:56,809
going to type title comma artist comma
year equals metallica, and let's print

9

00:00:56,809  -->  00:01:05,570
the three items. So print title print
artist and print year. Alright, let's run

10

00:01:05,570  -->  00:01:10,920
the program to make sure that we've
unpacked the tuple correctly.

11

00:01:10,920  -->  00:01:16,520
We get Ride the Lightening as the title of the
album, Metallica for the artist and 1984

12

00:01:16,520  -->  00:01:20,680
as the year that it was released.
It's much easier to see what the values

13

00:01:20,680  -->  00:01:27,000
represent now, rather than those index
values on lines 8 through 10.

14

00:01:27,000  -->  00:01:31,720
You're far less likely to make a mistake using
these names. Having to remember which

15

00:01:31,720  -->  00:01:37,080
item number corresponds to the item you
want, makes it very easy to make a mistake.

16

00:01:37,080  -->  00:01:43,000
Now, just as an example here, let
me put some code in. So we're going to type table

17

00:01:43,000  -->  00:01:49,980
is equal to parentheses, and we'll start
with Coffee table in double quotes,

18

00:01:49,980  -->  00:02:02,020
then we want a comma 200 comma 100 comma 75
comma 34.50, 34.50, and print

19

00:02:02,020  -->  00:02:09,960
parenthesis on the next line, table square brackets 1,
within the square brackets, * table

20

00:02:09,960  -->  00:02:17,620
square brackets 2. So if we run this,
then we get the result of 20,000,

21

00:02:17,620  -->  00:02:22,680
the code's calculating the area of a coffee
table, but it's not easy to see that when

22

00:02:22,680  -->  00:02:27,400
you look at the code. And it's also very
easy to get the index numbers wrong,

23

00:02:27,400  -->  00:02:32,040
especially if you're dealing with a
tuple that contains lots of items.

24

00:02:32,040  -->  00:02:36,320
What we can do is make the code more readable,
and a lot easier to work with,

25

00:02:36,320  -->  00:02:46,240
by unpacking the tuple. So I'm going to
type, on line 20, name comma length comma

26

00:02:46,240  -->  00:02:54,940
width comma height comma and price is
equal to table, and print parentheses

27

00:02:54,940  -->  00:03:02,100
length * width. Run the program again.
We'll check that we've got the same value,

28

00:03:02,100  -->  00:03:05,820
and it's now I think, a lot more
obvious, what we're actually printing out

29

00:03:05,820  -->  00:03:10,980
on line 21. When we come to use those
values, we don't have to remember whether

30

00:03:10,980  -->  00:03:15,690
the width is at position two or position
three. We unpack the tuple into

31

00:03:15,690  -->  00:03:21,230
variables on line 20, and then we're
using those variable names in our code.

32

00:03:21,230  -->  00:03:27,100
I can't stress enough how useful this is,
but it's also very easy to forget.

33

00:03:27,100  -->  00:03:31,379
JP suggests that I include a reply he gave
to a student's question, when he forgot

34

00:03:31,379  -->  00:03:36,299
to unpack a tuple. So both myself and JP
are certainly not ashamed to admit our

35

00:03:36,299  -->  00:03:40,199
mistakes, if it will help you to learn.
Alright, so here's the question;

36

00:03:40,200  -->  00:03:43,460
I'm going to paste in the link in a browser.

37

00:03:45,900  -->  00:03:51,160
Alright, so here we are. So Aatif had
mentioned using a list comprehension,

38

00:03:51,160  -->  00:03:56,240
so JP added one to the end of his first reply.

39

00:03:58,800  -->  00:04:02,280
So in the code that appears after "If you
want to use a comprehension", which you

40

00:04:02,280  -->  00:04:05,370
can see on screen now,
there was references - you can see there,

41

00:04:05,370  -->  00:04:10,440
value zero in square brackets, value 1 in
square brackets and value 2 in square

42

00:04:10,440  -->  00:04:18,920
brackets. Now in his second reply, and you
can see Aatif's reply there, then JP,

43

00:04:18,920  -->  00:04:25,560
mentions here that he wasn't thinking
about unpacking value in the comprehension.

44

00:04:25,560  -->  00:04:31,940
So you can see here, x, y &amp; z are unpacked
inside the comprehension. Below that you

45

00:04:31,949  -->  00:04:36,150
can also see the equivalent for loop
down here. That also unpacks the values

46

00:04:36,150  -->  00:04:41,180
into x, y and z - that's on line two.
Now, I've mentioned this for a few

47

00:04:41,180  -->  00:04:45,400
reasons, not just to mock JP.

48

00:06:04,820  -->  00:06:08,300
We'll look at that in the next video.
