1
00:00:05,350 --> 00:00:07,330
Hablemos de depuración con parámetros.

2
00:00:08,170 --> 00:00:12,220
Si ha utilizado funciones en otros idiomas, puede reproducir este video a doble velocidad.

3
00:00:12,640 --> 00:00:17,170
Es algo que muchos programadores nuevos encuentran confuso al principio, por lo que me tomaré el

4
00:00:17,170 --> 00:00:19,000
tiempo para demostrar lo que sucede.

5
00:00:20,880 --> 00:00:25,770
Para aquellos estudiantes que han programado antes de Python, los argumentos se pasan por asignación.

6
00:00:26,490 --> 00:00:32,880
Este comportamiento es similar a pasar por referencia al pasar un objeto mutable por objetos inmutables.

7
00:00:33,150 --> 00:00:35,510
El comportamiento está más cerca de pasar por Valley.

8
00:00:36,150 --> 00:00:41,310
Pero tenga en cuenta que ninguno de estos términos realmente describe cómo se pasan los argumentos en Python, pasados por

9
00:00:41,310 --> 00:00:42,810
referencia y valor de pasaporte.

10
00:00:43,170 --> 00:00:45,270
No tiene ningún significado sensible en Python.

11
00:00:46,050 --> 00:00:47,460
Si entiendes lo que eso significa.

12
00:00:47,840 --> 00:00:51,650
Espera algo pasando por alto este video, pero es posible que aún quieras ver este enlace.

13
00:00:51,790 --> 00:00:52,800
Tengo que poner en la pantalla ahora.

14
00:00:58,050 --> 00:01:02,640
Y se ve muy bien cuando una descripción de llamada al compartir que se introdujo

15
00:01:02,640 --> 00:01:09,390
por primera vez en un lenguaje de programación le vende la documentación de Python, usa el término asignación CORBA, pero es básicamente

16
00:01:09,390 --> 00:01:10,110
lo mismo.

17
00:01:10,800 --> 00:01:15,180
Ahora, este siglo en el camino de tres F a Q, así que estoy a punto de ponerlo en pantalla, también es interesante.

18
00:01:16,050 --> 00:01:19,530
Si quisieras producir el efecto de Kobar por referencia, échale un vistazo también.

19
00:01:20,430 --> 00:01:23,790
Si nada de eso tiene sentido y nunca has escrito una función antes.

20
00:01:24,150 --> 00:01:26,430
Veamos el código y veamos qué está pasando.

21
00:01:27,970 --> 00:01:33,010
Así que todavía tenemos que romper el punto establecido en la línea seis, así que ejecutemos el programa en el

22
00:01:33,010 --> 00:01:36,880
Dipankar y veamos cómo se reemplaza nuestro perímetro con los valores que pasamos como argumentos.

23
00:01:41,370 --> 00:01:45,110
Parker se detiene en la línea seis, listo para ingresar a nuestra función de multiplicación.

24
00:01:45,620 --> 00:01:48,380
Estamos acostumbrados a entrar en el botón de mi abrigo para ingresar a la función.

25
00:01:50,190 --> 00:01:52,050
Entonces Dipankar ahora se ha detenido en la línea dos.

26
00:01:52,370 --> 00:01:53,540
Antes de seguir adelante.

27
00:01:53,780 --> 00:01:56,880
Eche un vistazo ahora a las variables paint y al resultado final.

28
00:01:56,890 --> 00:01:57,110
Seis.

29
00:01:57,170 --> 00:02:02,060
Pasamos los argumentos diez punto cinco y cuatro a la función en la línea uno.

30
00:02:02,210 --> 00:02:09,950
Y en el panel de variables, puede ver que X tiene el valor diez punto cinco Y es lo que tenemos.

31
00:02:09,950 --> 00:02:14,390
Aquí hay dos variables ordinarias que solo existen dentro de la función.

32
00:02:15,230 --> 00:02:21,320
Eso es todo lo que es un parámetro, es una variable que existe dentro de la función, dentro de la función.

33
00:02:21,560 --> 00:02:23,750
Puede usarlos al igual que cualquier otra variable.

34
00:02:23,990 --> 00:02:25,370
No hay nada especial en ellos.

35
00:02:25,970 --> 00:02:31,280
Cuando se pasa un argumento a la función como lo hacemos en la línea seis, el parámetro obtiene el

36
00:02:31,280 --> 00:02:33,920
valor del argumento que se pasa a la función.

37
00:02:34,570 --> 00:02:37,300
En la línea seis, el primer argumento es diez punto cinco.

38
00:02:37,910 --> 00:02:40,330
El primer parámetro en la línea uno es X.

39
00:02:40,610 --> 00:02:42,800
Por lo tanto, X está vinculado al valor.

40
00:02:42,830 --> 00:02:43,840
Diez punto cinco.

41
00:02:44,390 --> 00:02:48,440
El segundo argumento pasado a la función es que el segundo parámetro es Y.

42
00:02:48,740 --> 00:02:55,100
Entonces, ¿por qué está vinculado al valor? Los valores de los argumentos se asignan a los parámetros en orden.

43
00:02:55,670 --> 00:02:59,150
Cada argumento se asigna al parámetro en la misma posición.

44
00:03:00,200 --> 00:03:02,010
Su primer argumento es diez punto cinco.

45
00:03:02,330 --> 00:03:04,770
Y eso se asigna al primer parámetro X.

46
00:03:05,180 --> 00:03:08,780
Por esa razón, estos argumentos son argumentos posicionales.

47
00:03:10,790 --> 00:03:14,840
Los argumentos posicionales se asignan a los parámetros en el orden en que aparecen.

48
00:03:15,440 --> 00:03:21,260
De hecho, los argumentos en este ejemplo se llaman realmente argumentos posicionales o de palabras clave, pero eso

49
00:03:21,260 --> 00:03:22,310
es solo posicional.

50
00:03:22,310 --> 00:03:26,270
Los argumentos no aparecieron formalmente en el idioma hasta Pather tres punto ocho.

51
00:03:26,570 --> 00:03:29,780
A menudo los encontrará referidos como argumentos posicionales.

52
00:03:30,620 --> 00:03:32,400
Muy bien, así que sigamos revisando el código.

53
00:03:32,490 --> 00:03:35,880
Cuando pasa por alto, compruebe que el resultado tenía el valor 40.

54
00:03:37,630 --> 00:03:38,910
Y puedes ver que tiene allí.

55
00:03:39,420 --> 00:03:41,320
Ahora mira lo que sucede cuando paso de nuevo.

56
00:03:43,100 --> 00:03:46,810
Las variables x y resultado final ya no existen.

57
00:03:47,140 --> 00:03:49,670
La inteligencia ya no muestra su valor en la línea uno.

58
00:03:50,050 --> 00:03:52,380
Y tampoco aparecen en el panel de variables.

59
00:03:52,910 --> 00:03:56,020
Este alcance es la función en la que están definidos.

60
00:03:56,530 --> 00:03:57,640
Eso es todo el alcance significa.

61
00:03:57,700 --> 00:04:01,060
Cuando se encontró con ese término, es donde existe una variable.

62
00:04:01,420 --> 00:04:03,910
¿Hablaremos más sobre el alcance más adelante en el curso?

63
00:04:04,460 --> 00:04:04,610
Correcto.

64
00:04:04,670 --> 00:04:06,880
Pasemos dos veces más para llegar a la línea nueve.

65
00:04:09,600 --> 00:04:14,250
Esta vez, sin embargo, argumenta que los seis y siete deberían poder trabajar en Veliz, que X e

66
00:04:14,250 --> 00:04:16,080
Y ayudarán cuando entremos en la función.

67
00:04:16,500 --> 00:04:18,570
Asegúrese de resolverlo antes de hacer clic.

68
00:04:18,780 --> 00:04:19,630
Entra en mi auto.

69
00:04:20,970 --> 00:04:23,340
Entonces estamos pasando los valores seis y siete en ese orden.

70
00:04:23,670 --> 00:04:29,040
Eso significa que X debería obtener el primer valor porque X aparece primero en la lista de parámetros en la línea uno.

71
00:04:29,750 --> 00:04:31,200
Haga clic en el paso en mi código.

72
00:04:34,480 --> 00:04:35,000
Y teníamos razón.

73
00:04:35,090 --> 00:04:36,970
X tiene seis años y tenía siete.

74
00:04:37,750 --> 00:04:41,680
La función está a punto de multiplicar X por Y y por una variable llamada resultado.

75
00:04:41,740 --> 00:04:43,130
La respuesta irá a hacer clic.

76
00:04:43,150 --> 00:04:44,920
Da un paso para ejecutar esa línea.

77
00:04:45,790 --> 00:04:49,090
Ahora tenemos X e Y y damos como resultado las variables dolor.

78
00:04:49,910 --> 00:04:52,840
Tenemos que pasar cuatro veces más ahora para llevarnos a la línea 14.

79
00:04:56,250 --> 00:05:02,580
Antes de continuar comprobando el juego de variables, no se creó ninguna respuesta en línea seis cuando estaba vinculada al valle,

80
00:05:02,880 --> 00:05:06,060
devuelta por la primera llamada a la función de multiplicación.

81
00:05:06,410 --> 00:05:09,360
Cuarenta y un puntaje dos fueron creados en la línea nueve.

82
00:05:10,080 --> 00:05:12,360
Estas dos variables existen en todo nuestro programa.

83
00:05:12,820 --> 00:05:14,960
Su alcance es el programa completo.

84
00:05:15,600 --> 00:05:20,910
Las variables X, Y y el resultado no aparecen en el panel de variables porque ya no existen.

85
00:05:21,210 --> 00:05:25,860
Este alcance es la función de multiplicación que puede existir fuera de él, ¿verdad?

86
00:05:25,890 --> 00:05:32,850
Entonces, estamos a punto de crear una nueva variable llamada Vow inútil que estará vinculada a cada uno de los números, uno

87
00:05:32,850 --> 00:05:37,560
a cuatro a su vez, ya que las ejecuciones del bucle for pueden pasar.

88
00:05:39,190 --> 00:05:44,590
Podríamos decir que Val aparece en nuestras variables, la inteligencia del dolor también está mostrando su valor al final de la ley

89
00:05:44,590 --> 00:05:45,330
en 14.

90
00:05:45,880 --> 00:05:49,300
Ahora estamos en la línea quince y estamos a punto de ingresar nuevamente a la función de multiplicación.

91
00:05:50,230 --> 00:05:53,320
Esta vez estamos pasando una variable para el segundo argumento.

92
00:05:53,950 --> 00:05:58,780
Hemos incluido este ejemplo para dejar en claro que no tiene que pasar solo valores literales.

93
00:05:59,260 --> 00:06:03,520
Puede usar cualquier expresión que evalúe el tipo correcto para el parámetro.

94
00:06:04,210 --> 00:06:06,760
En este caso, nuestra función espera un número.

95
00:06:07,150 --> 00:06:09,580
Entonces puede usar cualquier cosa que se evalúe como un número.

96
00:06:10,340 --> 00:06:13,750
Sin embargo, estamos utilizando la variable, que actualmente tiene el valor uno.

97
00:06:14,320 --> 00:06:16,540
Así que ven aquí y haz clic en Paso a mi código.

98
00:06:18,020 --> 00:06:21,600
Y no debería sorprenderte, por lo tanto, ver que X también tiene el valle.

99
00:06:22,050 --> 00:06:23,530
Y tenemos el Valle del Voto.

100
00:06:23,950 --> 00:06:27,300
Eso no es necesario que lo multipliquemos por uno.

101
00:06:27,370 --> 00:06:29,350
Le mostraré otra de las funciones del depurador.

102
00:06:29,650 --> 00:06:32,540
Esa es la flecha que apunta hacia arriba que sale por aquí.

103
00:06:33,280 --> 00:06:37,960
Puede ser útil si ingresa a una función por error o si ha visto todo lo que

104
00:06:38,150 --> 00:06:43,870
desea en una función y desea volver al código principal, CitiPower ejecutará el resto del código en la función y volverá

105
00:06:44,170 --> 00:06:46,930
a la función punto donde se llamó la función.

106
00:06:47,560 --> 00:06:50,350
En nuestro caso, la función fue llamada en la línea quince.

107
00:06:51,070 --> 00:06:54,880
Actualmente no podemos decir eso, pero cuando hago clic en Salir, volveré a la línea quince.

108
00:06:55,900 --> 00:07:00,070
Muy bien, entonces el valle también habrá sido devuelto de la función.

109
00:07:00,100 --> 00:07:01,540
Y cuando paso una vez más ahora.

110
00:07:03,820 --> 00:07:10,750
La variable para subrayar los tiempos ahora está obligada a pasar nuevamente una vez más para fingir.

111
00:07:10,870 --> 00:07:12,010
Para subrayar los tiempos.

112
00:07:13,370 --> 00:07:14,600
Regresamos a LA en 40.

113
00:07:15,390 --> 00:07:19,880
Podemos comprobar en la consola que a su salida de dolor, de vuelta al depurador.

114
00:07:20,690 --> 00:07:20,960
Correcto.

115
00:07:20,970 --> 00:07:26,020
Así que estamos en la línea 14 y podemos decir que eso unirá el voto al siguiente número, la secuencia un paso más

116
00:07:26,020 --> 00:07:26,360
allá.

117
00:07:26,660 --> 00:07:28,400
Y Val ahora también debería tener el valle.

118
00:07:29,310 --> 00:07:32,810
Podemos decir que es el caso esta vez cuando entramos en Marko.

119
00:07:34,360 --> 00:07:37,290
Puede ver que ambos parámetros ahora también tienen el valle.

120
00:07:37,850 --> 00:07:40,970
Debe saber dónde pararse, qué sucede cuando llama a una función en su código.

121
00:07:41,430 --> 00:07:46,400
Python ejecutará el código en su función, luego regresará al punto donde se llamó su función.

122
00:07:47,210 --> 00:07:48,410
Dejo este video aquí.

123
00:07:48,860 --> 00:07:52,400
Continúe entrando en la función de oferta de dinero y verifique que el parámetro.

124
00:07:52,400 --> 00:07:52,910
¿Por qué?

125
00:07:53,180 --> 00:07:56,450
KITZ Cada valor de ti cada vez alrededor del ciclo.

126
00:07:57,140 --> 00:07:58,730
Y nos vemos en el próximo video.
