1
1

00:00:05,480  -->  00:00:07,100
In the previous video, we checked that
2

2

00:00:07,100  -->  00:00:09,170
python was installed and then went ahead
3

3

00:00:09,170  -->  00:00:11,300
and installed idle on this computer, so now
4

4

00:00:11,300  -->  00:00:12,400
we're going to have a bit more of a look
5

5

00:00:12,400  -->  00:00:15,050
at idle. Now when developing software in
6

6

00:00:15,050  -->  00:00:17,120
any programming language, an integrated
7

7

00:00:17,120  -->  00:00:19,400
development environment or IDE makes
8

8

00:00:19,400  -->  00:00:21,220
life a lot easier for developers and
9

9

00:00:21,220  -->  00:00:23,330
that's because it allows you to enter
10

10

00:00:23,330  -->  00:00:25,610
compile and run your programs without
11

11

00:00:25,610  -->  00:00:28,400
having to leave the editor and really
12

12

00:00:28,400  -->  00:00:30,320
saves you having to go to a command line
13

13

00:00:30,320  -->  00:00:32,530
for a lot of programming. Now Python
14

14

00:00:32,530  -->  00:00:34,460
provides a very simple idea called idle
15

15

00:00:34,460  -->  00:00:36,170
which we installed and talked about
16

16

00:00:36,170  -->  00:00:38,240
briefly in the previous video. Now the
17

17

00:00:38,240  -->  00:00:39,950
name idle incidentally is a homage to
18

18

00:00:39,950  -->  00:00:42,080
Eric Idle one of the members of the
19

19

00:00:42,080  -->  00:00:44,960
comedy group Monty Python. Now idle
20

20

00:00:44,960  -->  00:00:46,670
interfaces directly with the Python
21

21

00:00:46,670  -->  00:00:49,100
interpreter. Now for a number of reasons
22

22

00:00:49,100  -->  00:00:51,560
that will become apparent as we progress
23

23

00:00:51,560  -->  00:00:53,660
through the course, we actually suggest
24

24

00:00:53,660  -->  00:00:56,750
using IntelliJ IDEA or pycharm instead
25

25

00:00:56,750  -->  00:00:58,870
of idle and in fact in the next video,
26

26

00:00:58,870  -->  00:00:59,930
we're going to be showing you how to go
27

27

00:00:59,930  -->  00:01:02,870
about installing IntelliJ IDEA, but that
28

28

00:01:02,870  -->  00:01:04,460
said if you'd prefer to stick with idle
29

29

00:01:04,460  -->  00:01:06,200
for any reason or if you have to access
30

30

00:01:06,200  -->  00:01:09,410
idle, it can sometimes be very useful.
31

31

00:01:09,410  -->  00:01:10,490
So in this video we're going to show you
32

32

00:01:10,490  -->  00:01:13,850
how to use the basics of idle. So I'm
33

33

00:01:13,850  -->  00:01:15,040
going to assume that you've installed it
34

34

00:01:15,040  -->  00:01:17,290
as shown in the last video, so you can
35

35

00:01:17,290  -->  00:01:19,000
start idle by going over to the
36

36

00:01:19,000  -->  00:01:21,500
applications menu and just type in
37

37

00:01:21,500  -->  00:01:24,170
idle, you can see that brings it up there
38

38

00:01:24,170  -->  00:01:25,930
I can just click on that now to start it
39

39

00:01:25,930  -->  00:01:29,450
up, there's my Python shell coming up
40

40

00:01:29,450  -->  00:01:31,340
which is actually idle running or we can
41

41

00:01:31,340  -->  00:01:32,180
go to the command line
42

42

00:01:32,180  -->  00:01:34,220
just type idle.
43

43

00:01:34,220  -->  00:01:36,410
And just a note that we talked about this
44

44

00:01:36,410  -->  00:01:39,560
but Linux systems will usually also have
45

45

00:01:39,560  -->  00:01:42,980
Python 2.7 installed so and as you saw
46

46

00:01:42,980  -->  00:01:44,320
in the last video that that was the case
47

47

00:01:44,320  -->  00:01:46,640
with my Linux distribution so make sure
48

48

00:01:46,640  -->  00:01:47,990
you if you are running from the command
49

49

00:01:47,990  -->  00:01:50,390
line your type idle 3 to get the latest
50

50

00:01:50,390  -->  00:01:52,540
version at version 3 which we need and
51

51

00:01:52,540  -->  00:01:53,990
not just order which will be the older
52

52

00:01:53,990  -->  00:01:55,610
versions and you can see here
53

53

00:01:55,610  -->  00:01:57,320
confirmation Python three point five
54

54

00:01:57,320  -->  00:01:59,380
point two and that was the version that
55

55

00:01:59,380  -->  00:02:01,640
we will talked about in the last video.
56

56

00:02:01,640  -->  00:02:02,630
So I'm definitely running the right
57

57

00:02:02,630  -->  00:02:05,570
version. Alright so once idle is running,
58

58

00:02:05,570  -->  00:02:07,430
anything it type will be passed to the
59

59

00:02:07,430  -->  00:02:09,460
Python interpreter and the results
60

60

00:02:09,460  -->  00:02:12,340
displayed on the screen. Now ordinarily,
61

61

00:02:12,340  -->  00:02:14,230
in a program you need to use the print
62

62

00:02:14,230  -->  00:02:16,430
statement to display a result and you'll
63

63

00:02:16,430  -->  00:02:18,550
learn more about that in a later video,
64

64

00:02:18,550  -->  00:02:20,350
but you don't really need to do that in
65

65

00:02:20,350  -->  00:02:22,390
the idle, so I just come here and
66

66

00:02:22,390  -->  00:02:27,070
just type 2 plus 4 and press enter,
67

67

00:02:27,070  -->  00:02:28,630
you can see I immediately get the answer
68

68

00:02:28,630  -->  00:02:30,940
of 6 there. So what happened there was that
69

69

00:02:30,940  -->  00:02:32,920
let me type the command in the
70

70

00:02:32,920  -->  00:02:35,350
expression 2 plus 4 was passed to Python
71

71

00:02:35,350  -->  00:02:37,510
and Python came back with the result 6
72

72

00:02:37,510  -->  00:02:39,430
all right so I'm going to type in some
73

73

00:02:39,430  -->  00:02:41,770
code here now, now don't worry too much
74

74

00:02:41,770  -->  00:02:44,320
about exactly what this code means,
75

75

00:02:44,320  -->  00:02:45,670
you don't need to understand it at this
76

76

00:02:45,670  -->  00:02:47,710
stage, this is just really showing you
77

77

00:02:47,710  -->  00:02:50,110
how idle works and in later videos
78

78

00:02:50,110  -->  00:02:51,280
you're going to be learning the syntax
79

79

00:02:51,280  -->  00:02:54,310
of Python. This video is demonstrating
80

80

00:02:54,310  -->  00:02:56,590
idle, not explaining the Python language
81

81

00:02:56,590  -->  00:02:59,590
at this stage. Now in the course examples
82

82

00:02:59,590  -->  00:03:01,150
you'll often have to enter code blocks
83

83

00:03:01,150  -->  00:03:03,940
and that just blocks of code spanning
84

84

00:03:03,940  -->  00:03:06,580
several lines. Now idle knows when you're
85

85

00:03:06,580  -->  00:03:08,170
typing in such a block and what
86

86

00:03:08,170  -->  00:03:09,940
immediately executes anything until
87

87

00:03:09,940  -->  00:03:11,290
you've finished typing all the block
88

88

00:03:11,290  -->  00:03:13,390
code in and you'll know it's expecting
89

89

00:03:13,390  -->  00:03:15,130
more text because of Chevron's and 3
90

90

00:03:15,130  -->  00:03:16,480
greater than signs as you can see on the
91

91

00:03:16,480  -->  00:03:18,340
screen there weren't appear until you're
92

92

00:03:18,340  -->  00:03:21,280
finished. And to see that working I'm
93

93

00:03:21,280  -->  00:03:23,860
going to type the code now, for space i
94

94

00:03:23,860  -->  00:03:27,790
space in space range left parentheses
95

95

00:03:27,790  -->  00:03:30,790
the number 10 right parenthesis and a
96

96

00:03:30,790  -->  00:03:34,270
colon, once I press enter note bow
97

97

00:03:34,270  -->  00:03:36,730
chevron aren't appearing anymore and that's
98

98

00:03:36,730  -->  00:03:39,010
because idle was aware that this is a
99

99

00:03:39,010  -->  00:03:40,900
code block, so I could type in my code
100

100

00:03:40,900  -->  00:03:44,680
and hasn't executed anything unlike the
101

101

00:03:44,680  -->  00:03:46,780
previous example and wait until I've
102

102

00:03:46,780  -->  00:03:48,040
actually finished typing in the code
103

103

00:03:48,040  -->  00:03:50,710
block, there's a colon by the way when I
104

104

00:03:50,710  -->  00:03:53,590
typed in is very important and also the
105

105

00:03:53,590  -->  00:03:55,300
indentation is very important as well
106

106

00:03:55,300  -->  00:03:56,860
and we'll be talking more about that a
107

107

00:03:56,860  -->  00:03:58,590
little bit later, so I'm going to press
108

108

00:03:58,590  -->  00:04:01,330
enter again now and look at the cursor
109

109

00:04:01,330  -->  00:04:02,740
moves to the next line but it remains
110

110

00:04:02,740  -->  00:04:05,410
indented at the same level as cp of
111

111

00:04:05,410  -->  00:04:07,690
print on the previous line, this time I'm
112

112

00:04:07,690  -->  00:04:09,310
going to press the backspace button and
113

113

00:04:09,310  -->  00:04:11,470
notice that the cursor moves back to the
114

114

00:04:11,470  -->  00:04:13,540
left-hand side and this tells idle
115

115

00:04:13,540  -->  00:04:15,620
that you finished the code block and
116

116

00:04:15,620  -->  00:04:17,430
consequently when I press enter again,
117

117

00:04:17,430  -->  00:04:19,360
it's going to execute the code, so I'm
118

118

00:04:19,360  -->  00:04:22,360
going to do that now and you can see the
119

119

00:04:22,360  -->  00:04:24,430
code was executed and what this
120

120

00:04:24,430  -->  00:04:25,990
particular bit of code does is for each
121

121

00:04:25,990  -->  00:04:28,150
element in the range, it prints out the
122

122

00:04:28,150  -->  00:04:29,950
values, so consequently we get the value
123

123

00:04:29,950  -->  00:04:31,610
0 through 9 printed out in
124

124

00:04:31,610  -->  00:04:33,650
the screen. Again don't worry too much
125

125

00:04:33,650  -->  00:04:35,690
about understanding the code, you really
126

126

00:04:35,690  -->  00:04:36,920
don't need to understand the code at
127

127

00:04:36,920  -->  00:04:38,750
this stage, so you can see that I don't
128

128

00:04:38,750  -->  00:04:40,790
have some basic capabilities to run
129

129

00:04:40,790  -->  00:04:43,160
Python code and this is all very useful
130

130

00:04:43,160  -->  00:04:45,680
for checking simple instructions but
131

131

00:04:45,680  -->  00:04:47,330
editing what you've typed isn't very
132

132

00:04:47,330  -->  00:04:49,520
intuitive, so let's just say we wanted to
133

133

00:04:49,520  -->  00:04:52,010
change the number 10 to 11 in the code
134

134

00:04:52,010  -->  00:04:54,080
that we typed in, to do that we actually
135

135

00:04:54,080  -->  00:04:57,200
move our cursor up up to that line of
136

136

00:04:57,200  -->  00:05:00,130
code and then I press enter
137

137

00:05:00,130  -->  00:05:02,660
and notice that it's duplicated the code
138

138

00:05:02,660  -->  00:05:04,640
that was originally top here up on
139

139

00:05:04,640  -->  00:05:06,950
the screen and change the number 10 till
140

140

00:05:06,950  -->  00:05:08,300
eleven, now I can just move the cursor up
141

141

00:05:08,300  -->  00:05:12,170
and move it over and delete the zero and
142

142

00:05:12,170  -->  00:05:15,260
replace it with a 1 and to complete this,
143

143

00:05:15,260  -->  00:05:16,970
I need to go down with my arrow keys,
144

144

00:05:16,970  -->  00:05:19,790
press enter after the code indent and
145

145

00:05:19,790  -->  00:05:22,280
press backspace and there at the stage
146

146

00:05:22,280  -->  00:05:23,930
we're ready to execute the program again,
147

147

00:05:23,930  -->  00:05:26,390
I can press enter and you can see the
148

148

00:05:26,390  -->  00:05:28,550
code is now executed this time we've got
149

149

00:05:28,550  -->  00:05:30,550
an additional number that's been shown
150

150

00:05:30,550  -->  00:05:32,240
on the screen because we've increased
151

151

00:05:32,240  -->  00:05:34,610
the range by one, so that's one way of
152

152

00:05:34,610  -->  00:05:36,860
executing code and it can be very useful
153

153

00:05:36,860  -->  00:05:38,210
if you just want to check out a bit of
154

154

00:05:38,210  -->  00:05:40,460
code quickly, however you'll often want
155

155

00:05:40,460  -->  00:05:43,070
to save programs in a separate file,
156

156

00:05:43,070  -->  00:05:45,050
run them from there, so from the file menu
157

157

00:05:45,050  -->  00:05:46,910
I'm going to create a new file,
158

158

00:05:46,910  -->  00:05:51,230
click on file then new file and I'm
159

159

00:05:51,230  -->  00:05:54,440
going to type some code in here,
160

160

00:05:54,440  -->  00:05:58,150
I'm going to type print left parenthesis
161

161

00:05:58,150  -->  00:06:03,170
double quote hello world exclamation
162

162

00:06:03,170  -->  00:06:05,570
mark, another double quote then right
163

163

00:06:05,570  -->  00:06:07,300
parenthesis and then press enter.
164

164

00:06:07,300  -->  00:06:09,950
Now, to execute this program we just
165

165

00:06:09,950  -->  00:06:11,800
typed in, we can either come up here to
166

166

00:06:11,800  -->  00:06:14,540
the run menu and select run module or we
167

167

00:06:14,540  -->  00:06:16,880
can press f5, so I'm in the menu,
168

168

00:06:16,880  -->  00:06:18,080
I'm just going to select an option but
169

169

00:06:18,080  -->  00:06:20,900
either will work there because this is
170

170

00:06:20,900  -->  00:06:22,400
the first time that we're running this
171

171

00:06:22,400  -->  00:06:24,680
program and we selected a new file
172

172

00:06:24,680  -->  00:06:26,720
as with most programs the most word
173

173

00:06:26,720  -->  00:06:29,110
processors etc, it's asking us do we want
174

174

00:06:29,110  -->  00:06:31,130
to save the file? Well, it's actually saying
175

175

00:06:31,130  -->  00:06:32,860
we must that- the file must be saved
176

176

00:06:32,860  -->  00:06:34,670
before we can execute it, so I'm going to
177

177

00:06:34,670  -->  00:06:37,670
click on ok and what I'm going to do is
178

178

00:06:37,670  -->  00:06:40,960
put this on my desktop
179

179

00:06:40,960  -->  00:06:45,370
I'm gonna call this one HelloWorld, note that
180

180

00:06:45,370  -->  00:06:47,260
the bottom it says file dot py, so I'm
181

181

00:06:47,260  -->  00:06:49,290
just going to press I'll click on save
182

182

00:06:49,290  -->  00:06:51,400
and you can see how HelloWorld dot
183

183

00:06:51,400  -->  00:06:53,890
py's now saved, firstly allow a
184

184

00:06:53,890  -->  00:06:55,600
desktop which was the folder I selected,
185

185

00:06:55,600  -->  00:06:57,490
but secondly notice down the bottom here
186

186

00:06:57,490  -->  00:06:59,740
we've got this restart we want to path
187

187

00:06:59,740  -->  00:07:02,470
to the file that we just saved but also
188

188

00:07:02,470  -->  00:07:04,240
the output, so not only did it save the
189

189

00:07:04,240  -->  00:07:06,670
file it executed it, that's of course
190

190

00:07:06,670  -->  00:07:09,640
because we selected the run option.
191

191

00:07:09,640  -->  00:07:11,320
Now again, we'd recommend that you start
192

192

00:07:11,320  -->  00:07:14,110
using IntelliJ IDEA instead that's
193

193

00:07:14,110  -->  00:07:15,610
because idle is fairly basic
194

194

00:07:15,610  -->  00:07:17,890
it doesn't really provide any hint code
195

195

00:07:17,890  -->  00:07:19,600
checking or all the other features of a
196

196

00:07:19,600  -->  00:07:22,420
full IDE like IntelliJ does, but if you
197

197

00:07:22,420  -->  00:07:23,890
want to stick with idle though this
198

198

00:07:23,890  -->  00:07:25,300
brief introduction will got you
199

199

00:07:25,300  -->  00:07:28,660
started and the installing IntelliJ IDEA
200

200

00:07:28,660  -->  00:07:30,550
will be covered in the next video, but I
201

201

00:07:30,550  -->  00:07:31,690
want to give you a few reasons why you
202

202

00:07:31,690  -->  00:07:33,280
should consider using that rather than
203

203

00:07:33,280  -->  00:07:35,800
using idle, firstly code checking as you
204

204

00:07:35,800  -->  00:07:38,500
type, so IntelliJ IDES checks your
205

205

00:07:38,500  -->  00:07:41,170
code as you type it and the flags errors
206

206

00:07:41,170  -->  00:07:43,630
with a marker in the right margin it
207

207

00:07:43,630  -->  00:07:45,640
also suggests improvements in both the
208

208

00:07:45,640  -->  00:07:47,860
styling your code and the content and
209

209

00:07:47,860  -->  00:07:49,660
that's incredibly useful especially when
210

210

00:07:49,660  -->  00:07:51,600
starting out with a new language,
211

211

00:07:51,600  -->  00:07:53,710
auto-completion works across the various
212

212

00:07:53,710  -->  00:07:55,840
Python libraries to provide rapid
213

213

00:07:55,840  -->  00:07:57,130
selection of the methods and functions
214

214

00:07:57,130  -->  00:07:59,530
and hints on the system, idle on the
215

215

00:07:59,530  -->  00:08:00,730
other hand only copes with core
216

216

00:08:00,730  -->  00:08:03,970
functionality, so auto indenting it also
217

217

00:08:03,970  -->  00:08:06,640
allows editing of xml and text files so
218

218

00:08:06,640  -->  00:08:07,930
the same tool can be used to examine
219

219

00:08:07,930  -->  00:08:10,390
data for some excellent refactoring
220

220

00:08:10,390  -->  00:08:13,120
tools integrated python debugger support
221

221

00:08:13,120  -->  00:08:16,150
for django and google app engine projects,
222

222

00:08:16,150  -->  00:08:18,310
it also supports many languages in
223

223

00:08:18,310  -->  00:08:20,710
addition to python such as java, scaler
224

224

00:08:20,710  -->  00:08:23,650
pearl and groovy and many frameworks so
225

225

00:08:23,650  -->  00:08:25,240
they really only need to learn one IDE
226

226

00:08:25,240  -->  00:08:27,520
for all development. And also keep in
227

227

00:08:27,520  -->  00:08:29,920
mind google's Android studio which is
228

228

00:08:29,920  -->  00:08:31,000
a tool for Android app development
229

229

00:08:31,000  -->  00:08:33,520
that's basically IntelliJ IDEA under the
230

230

00:08:33,520  -->  00:08:35,590
hood. So now I'm going to be using
231

231

00:08:35,590  -->  00:08:37,630
IntelliJ IDEA in this course, you can
232

232

00:08:37,630  -->  00:08:39,760
still use your favorite IDE instead
233

233

00:08:39,760  -->  00:08:41,650
if you prefer so if you're already using
234

234

00:08:41,650  -->  00:08:43,780
something like eclipse or pycharm or
235

235

00:08:43,780  -->  00:08:46,360
one of the many other Python IDE then by
236

236

00:08:46,360  -->  00:08:49,060
all means carry on using them. Alright so
237

237

00:08:49,060  -->  00:08:51,130
I'm going to finish this video now with
238

238

00:08:51,130  -->  00:08:53,410
a short program that we've created just
239

239

00:08:53,410  -->  00:08:54,660
to demonstrate some of the
240

240

00:08:54,660  -->  00:08:56,760
power of the Python language. So the
241

241

00:08:56,760  -->  00:08:58,710
program's going to collect exchange rate
242

242

00:08:58,710  -->  00:09:00,880
data from the internet and produce a
243

243

00:09:00,880  -->  00:09:02,520
graph showing three currencies for the
244

244

00:09:02,520  -->  00:09:05,320
last 12 months now the complete programs
245

245

00:09:05,320  -->  00:09:07,770
less than 100 lines of code, I think
246

246

00:09:07,770  -->  00:09:09,240
that's pretty impressive given that it's
247

247

00:09:09,240  -->  00:09:12,370
doing that all in real time and clicking
248

248

00:09:12,370  -->  00:09:14,700
that real data from the internet.
249

249

00:09:14,700  -->  00:09:16,770
Now generally I really strongly recommend
250

250

00:09:16,770  -->  00:09:18,570
that you type in the code when watching
251

251

00:09:18,570  -->  00:09:20,820
the videos in this course and personally
252

252

00:09:20,820  -->  00:09:22,990
I can't stress that enough typing in
253

253

00:09:22,990  -->  00:09:24,550
code rather than just watching me type
254

254

00:09:24,550  -->  00:09:26,910
it really does help you learn faster and
255

255

00:09:26,910  -->  00:09:29,380
consolidate what you're doing and that
256

256

00:09:29,380  -->  00:09:31,410
really is important and without going
257

257

00:09:31,410  -->  00:09:33,570
into a lot of Education Theory,
258

258

00:09:33,570  -->  00:09:35,580
you retain about 80% of the things you do
259

259

00:09:35,580  -->  00:09:38,320
compared to about 30% of things you just
260

260

00:09:38,320  -->  00:09:40,650
see, and if that doesn't persuade you I'm
261

261

00:09:40,650  -->  00:09:43,120
going to add that myself and Jean Paul
262

262

00:09:43,120  -->  00:09:44,620
learn by typing in code,
263

263

00:09:44,620  -->  00:09:46,570
the reason was starting out we didn't
264

264

00:09:46,570  -->  00:09:49,630
have the interne, so to learn stuff we
265

265

00:09:49,630  -->  00:09:51,330
need to copy code from magazines and
266

266

00:09:51,330  -->  00:09:53,740
books so the act of typing it in makes
267

267

00:09:53,740  -->  00:09:55,260
you focus on every word that you're
268

268

00:09:55,260  -->  00:09:57,490
typing and correcting the typing errors
269

269

00:09:57,490  -->  00:09:58,830
afterwards really does help you learn
270

270

00:09:58,830  -->  00:10:00,270
what's going on.
271

271

00:10:00,270  -->  00:10:02,520
And I'd also recommend that you watch
272

272

00:10:02,520  -->  00:10:04,390
each video again after you've typed the
273

273

00:10:04,390  -->  00:10:06,820
code, so you can focus on the explanation
274

274

00:10:06,820  -->  00:10:09,610
of what that code is doing. With that
275

275

00:10:09,610  -->  00:10:11,340
said, this next bits an exception to that
276

276

00:10:11,340  -->  00:10:13,410
and that's because the code I'm about to
277

277

00:10:13,410  -->  00:10:15,780
say is quite complex but I would produce
278

278

00:10:15,780  -->  00:10:17,440
this program to show you the power of
279

279

00:10:17,440  -->  00:10:19,440
Python and there's a lot of things in
280

280

00:10:19,440  -->  00:10:20,860
the code that just won't make sense at
281

281

00:10:20,860  -->  00:10:22,120
the moment at this stage of the course.
282

282

00:10:22,120  -->  00:10:24,190
Now this program uses functions
283

283

00:10:24,190  -->  00:10:26,560
generators external modules and things
284

284

00:10:26,560  -->  00:10:28,830
like lists and tuples then by the time
285

285

00:10:28,830  -->  00:10:30,690
you finish this course, you'll understand
286

286

00:10:30,690  -->  00:10:32,280
what all those things are and more
287

287

00:10:32,280  -->  00:10:33,940
importantly, how to use them in your own
288

288

00:10:33,940  -->  00:10:36,190
programs and in fact you'll understand a
289

289

00:10:36,190  -->  00:10:38,860
lot more than that. But now though, relax
290

290

00:10:38,860  -->  00:10:40,390
and run the program they're going to
291

291

00:10:40,390  -->  00:10:43,160
feel for what you can do with Python.
292

292

00:10:43,160  -->  00:10:44,780
Alright, so what we need to do is open
293

293

00:10:44,780  -->  00:10:47,030
a browser we need to download this file,
294

294

00:10:47,030  -->  00:10:48,980
so we can actually run it so I'm
295

295

00:10:48,980  -->  00:10:53,180
just opening my Firefox and I'm going to
296

296

00:10:53,180  -->  00:10:59,420
go to learn programming dot academy forward slash py
297

297

00:10:59,420  -->  00:11:01,940
download or one word in lower case dot
298

298

00:11:01,940  -->  00:11:05,810
html press enter that brings up a very
299

299

00:11:05,810  -->  00:11:07,190
simple file there, we can right click
300

300

00:11:07,190  -->  00:11:12,380
this, click on Save Link As and I'm going
301

301

00:11:12,380  -->  00:11:14,450
to save that on my desktop. You can see
302

302

00:11:14,450  -->  00:11:17,180
the file in there, exchange rate py, click on
303

303

00:11:17,180  -->  00:11:21,170
save. You can see that it's already
304

304

00:11:21,170  -->  00:11:23,510
downloaded, it is a very small file so
305

305

00:11:23,510  -->  00:11:25,070
I'm going to click on over here to close
306

306

00:11:25,070  -->  00:11:27,440
the browser down and you can see we're
307

307

00:11:27,440  -->  00:11:29,090
going to exchange rate to py showing the
308

308

00:11:29,090  -->  00:11:32,150
other screen. Alright so back in idle for
309

309

00:11:32,150  -->  00:11:34,070
the Python 3.5.2 shell,
310

310

00:11:34,070  -->  00:11:37,340
it's called on Linux we're going to open,
311

311

00:11:37,340  -->  00:11:39,680
I'm going to go to the desktop I'm going to
312

312

00:11:39,680  -->  00:11:41,600
open or select the exchange rate to py
313

313

00:11:41,600  -->  00:11:47,210
and here's the actual code for that,
314

314

00:11:47,210  -->  00:11:48,590
so to expand it out of the list you can see
315

315

00:11:48,590  -->  00:11:51,290
there and you can see it probably looks
316

316

00:11:51,290  -->  00:11:53,150
very complicated to you if you
317

317

00:11:53,150  -->  00:11:54,890
haven't seen program code before,
318

318

00:11:54,890  -->  00:11:56,900
haven't seen Python. As I've said
319

319

00:11:56,900  -->  00:11:58,610
previously in this video, you will
320

320

00:11:58,610  -->  00:12:00,230
understand all of this and what's going
321

321

00:12:00,230  -->  00:12:01,910
and what it's actually doing as you work
322

322

00:12:01,910  -->  00:12:04,280
through the course, for now though run
323

323

00:12:04,280  -->  00:12:06,770
the program and again you can press f5
324

324

00:12:06,770  -->  00:12:08,060
or you can come up here to the run menu
325

325

00:12:08,060  -->  00:12:10,580
and click on run module so I'm going to
326

326

00:12:10,580  -->  00:12:14,630
click on select an option now and that's
327

327

00:12:14,630  -->  00:12:16,940
now running the program and that's now
328

328

00:12:16,940  -->  00:12:18,800
downloading the current exchange rates
329

329

00:12:18,800  -->  00:12:21,380
in real time and drawing up a chart.
330

330

00:12:21,380  -->  00:12:23,810
So there you go, you can see now that after
331

331

00:12:23,810  -->  00:12:25,520
a short delay well then that was what
332

332

00:12:25,520  -->  00:12:26,600
the data was getting fetched from
333

333

00:12:26,600  -->  00:12:28,310
internet, we're now seeing a chart on
334

334

00:12:28,310  -->  00:12:29,750
screen showing exchange rate for
335

335

00:12:29,750  -->  00:12:31,730
Australian dollars Great Britain pairs
336

336

00:12:31,730  -->  00:12:34,730
of the Euro against the US dollar,
337

337

00:12:34,730  -->  00:12:35,930
and the program's actually displaying the
338

338

00:12:35,930  -->  00:12:37,510
data for the last twelve months and
339

339

00:12:37,510  -->  00:12:40,730
you're getting different month showing
340

340

00:12:40,730  -->  00:12:43,370
on this x-axis over here and obviously
341

341

00:12:43,370  -->  00:12:45,950
I'm running this in August 2017, as I
342

342

00:12:45,950  -->  00:12:48,620
record this video, so the last date in
343

343

00:12:48,620  -->  00:12:50,210
will be August but depending when you're
344

344

00:12:50,210  -->  00:12:51,200
running this you'll see that this will
345

345

00:12:51,200  -->  00:12:53,570
be updated to what is the current date
346

346

00:12:53,570  -->  00:12:55,370
on your computer.
347

347

00:12:55,370  -->  00:12:56,540
And personally I think that's pretty
348

348

00:12:56,540  -->  00:12:59,980
impressive for any 95 lines of code,
349

349

00:12:59,980  -->  00:13:02,240
and again I'm not going to explain how it
350

350

00:13:02,240  -->  00:13:04,160
works at the moment because it does use
351

351

00:13:04,160  -->  00:13:06,680
a lot of Python features but everything
352

352

00:13:06,680  -->  00:13:08,120
that it does will be explained in the
353

353

00:13:08,120  -->  00:13:09,950
course, so it will certainly all make
354

354

00:13:09,950  -->  00:13:12,580
sense as you work through the course,
355

355

00:13:12,580  -->  00:13:15,230
there's some of the coding again so
356

356

00:13:15,230  -->  00:13:16,310
basically going through this course
357

357

00:13:16,310  -->  00:13:17,720
you'll be understanding pretty well
358

358

00:13:17,720  -->  00:13:20,720
everything in here, what it means and you
359

359

00:13:20,720  -->  00:13:22,310
can use concepts like this in your own
360

360

00:13:22,310  -->  00:13:24,440
programs. Alright so that's it, that's a
361

361

00:13:24,440  -->  00:13:26,750
brief tour of idle. In the next video,
362

362

00:13:26,750  -->  00:13:28,130
we're going to go ahead and install and
363

363

00:13:28,130  -->  00:13:29,920
configure the IDE that I've talked about
364

364

00:13:29,920  -->  00:13:33,230
IntelliJ IDEA and also talked a little
365

365

00:13:33,230  -->  00:13:35,510
bit about pycharm instead which looks
366

366

00:13:35,510  -->  00:13:38,240
pretty much identical to IntelliJ IDEA,
367

367

00:13:38,240  -->  00:13:40,490
but it only supports Python programming.
368

368

00:13:40,490  -->  00:13:42,260
As I said that, if you're already using
369

369

00:13:42,260  -->  00:13:44,360
an IDE that supports Python and you're
370

370

00:13:44,360  -->  00:13:45,650
happy with that, you can actually
371

371

00:13:45,650  -->  00:13:47,150
continue to use that for the entire
372

372

00:13:47,150  -->  00:13:49,370
course. Now obviously, if you do that your
373

373

00:13:49,370  -->  00:13:50,510
screens will look different to the
374

374

00:13:50,510  -->  00:13:52,880
videos but the code that you type in was
375

375

00:13:52,880  -->  00:13:54,380
still function and work exactly the same.
376

376

00:13:54,380  -->  00:13:59,050
Alright, so I'll see you in the next video.
