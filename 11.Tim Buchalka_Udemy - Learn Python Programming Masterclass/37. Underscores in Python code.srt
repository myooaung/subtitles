1
1

00:00:05,360  -->  00:00:09,760
so just when you thought we were able to actually move on from
2

2

00:00:09,760  -->  00:00:13,980
blackjack but actually we got a little bit
more to talk about and we are gonna use
3

3

00:00:13,980  -->  00:00:18,890
blackjack as this example now this is
specifically talking about underscores
4

4

00:00:18,890  -->  00:00:23,100
in variable names now we've had a look
at a few of the modules in the Python Standard
5

5

00:00:23,100  -->  00:00:26,910
library in previous lectures
and we jumped into the source to check
6

6

00:00:26,910  -->  00:00:31,140
out how to use a few things and when we did
that you may have noticed that many
7

7

00:00:31,140  -->  00:00:36,410
object names start or end with
underscores or even start and end
8

8

00:00:36,410  -->  00:00:40,440
underscores and you might be wondering
what that's all about and obviously you can
9

9

00:00:40,440  -->  00:00:43,780
see on line 3 we are using underscore underscore name underscore underscore now
10

10

00:00:43,780  -->  00:00:46,800
we've discussed ending a name with a
single underscore when we looked at the
11

11

00:00:46,800  -->  00:00:51,580
spin box widget in the Tkinter video
and you can set the range of values
12

12

00:00:51,580  -->  00:00:56,770
that appears in the spin box using the to and from
underscore arguments but because from
13

13

00:00:56,770  -->  00:01:03,010
is a Python keyword we used from
underscore rather than from now a convention
14

14

00:01:03,010  -->  00:01:07,640
is to use a single underscore after a name
if it would otherwise conflict with the
15

15

00:01:07,640  -->  00:01:11,720
name that's built into Python so
reserved a keyword in other words it's
16

16

00:01:11,720  -->  00:01:15,120
probably better to use a different name
of course but if the name that Python
17

17

00:01:15,120  -->  00:01:20,430
already uses makes sense for your
particular use then probably adding
18

18

00:01:20,430  -->  00:01:22,580
an underscore to the end of the name is the
way to go
19

19

00:01:22,580  -->  00:01:27,440
you can do that quite easily so in the
case of specifying a range of values
20

20

00:01:27,440  -->  00:01:31,040
from a spin box widget to and from a
probably the best names to use so the
21

21

00:01:31,040  -->  00:01:35,080
creators of the Tkinter module uses
convention adding an underscore in this
22

22

00:01:35,080  -->  00:01:40,510
case to the from keyword so that's the
easy one out of the way now for other uses of
23

23

00:01:40,510  -->  00:01:42,090
underscores around
24

24

00:01:42,090  -->  00:01:47,700
names now unlike many other languages
Python has actually got no concept of
25

25

00:01:47,700  -->  00:01:52,110
private or protected variables that
means that it's possible to do things
26

26

00:01:52,110  -->  00:01:55,610
with a module that you probably
shouldn't do so let's have a look at a few
27

27

00:01:55,610  -->  00:02:00,560
ways we can miss with our blackjack
module so we've got the project open from
28

28

00:02:00,560  -->  00:02:05,250
the previous video we made the changes
in the previous video to it so we are able to
29

29

00:02:05,250  -->  00:02:09,900
import it as a module and the project
should now have 2 Python files as
30

30

00:02:09,900  -->  00:02:14,530
you can see on the screen now blackjack.py and import_test.py so
31

31

00:02:14,530  -->  00:02:17,920
it's useful to be able to call the play
function as you can see me doing on line
32

32

00:02:17,920  -->  00:02:22,750
4 and also using the cards list to
create decks for other games is also
33

33

00:02:22,750  -->  00:02:26,610
extremely useful but beyond that though
their is not much else in the
34

34

00:02:26,610  -->  00:02:30,750
Blackjack module that really makes any
sense to use once it's actually been
35

35

00:02:30,750  -->  00:02:35,590
imported now there is a score_hand
function but that's really very specific
36

36

00:02:35,590  -->  00:02:39,550
to blackjack and couldn't be used to
decide which of 2 poker hands are better for
37

37

00:02:39,550  -->  00:02:42,550
argument sake because it's a completely
different algorithm
38

38

00:02:43,250  -->  00:02:47,630
now in Java for example only the play function
and cards list would be made available to
39

39

00:02:47,630  -->  00:02:51,410
other programs everything else would
have been marked private so that it was
40

40

00:02:51,410  -->  00:02:55,360
hidden and then it wouldn't actually
show but as I said Python doesn't
41

41

00:02:55,360  -->  00:03:00,000
have any or doesn't have private objects
and that means that we can do silly
42

42

00:03:00,000  -->  00:03:04,110
things after importing the blackjack module so we are going to start by calling the deal_cards
43

43

00:03:04,110  -->  00:03:07,950
function just to show you that it can be
done and not suggesting it's actually
44

44

00:03:07,950  -->  00:03:15,330
a wise thing to do so come down here if we wanted to we
could do something like....
45

45

00:03:15,330  -->  00:03:24,980
....and so let's run that just to
46

46

00:03:24,980  -->  00:03:29,790
confirm that it does actually work so right click this and click run to make sure
47

47

00:03:29,790  -->  00:03:34,130
we're running import_test and not
blackjack so do that we run it and tab over and
48

48

00:03:34,130  -->  00:03:37,880
have a look and obviously we've got two
cards now the dealer has actually got 2
49

49

00:03:37,880  -->  00:03:42,160
cards although at this stage due to the way
we designed it only the second one
50

50

00:03:42,160  -->  00:03:46,310
is actually included in the dealer score and as a result that does look really
51

51

00:03:46,310  -->  00:03:49,780
strange and that is because we've got a
total score of 13 for the dealer
52

52

00:03:49,780  -->  00:03:53,500
but only the second one is calculated
again this is an ideal basically
53

53

00:03:53,500  -->  00:03:59,420
giving access to areas of the game that
we wouldn't ordinarily want someone
54

54

00:03:59,420  -->  00:04:03,470
who's imported this blackjack module to be able to
access our code that way because it's
55

55

00:04:03,470  -->  00:04:07,000
sort of breaking the game as such this is
compounded by the fact there's really
56

56

00:04:07,000  -->  00:04:10,510
nothing to indicate that we shouldn't be
calling this function so from that
57

57

00:04:10,510  -->  00:04:15,290
perspective of someone who's imported
the blackjack module and is wanting to use
58

58

00:04:15,290  -->  00:04:18,660
it their's no clear indication that you know
maybe I shouldn't be actually calling
59

59

00:04:18,660  -->  00:04:23,190
this method here and obviously by
calling and then by trial and error
60

60

00:04:23,190  -->  00:04:26,430
and running through and testing it and seeing that
it doesn't work they will eventually figure
61

61

00:04:26,430  -->  00:04:29,380
it out but there's no easy way to know ahead of time if
62

62

00:04:29,380  -->  00:04:36,700
that's the case by convention starting a name with an underscore indicates
63

63

00:04:36,700  -->  00:04:40,460
that it should be treated as protected which means it's not intended to be
64

64

00:04:40,460  -->  00:04:45,280
used outside the modules existence so
it's really a standard in Python now theirs a
65

65

00:04:45,280  -->  00:04:48,990
little bit more to that when using
classes and we'll talk about that in the
66

66

00:04:48,990  -->  00:04:53,180
next section when we start object oriented
programming but if we go back into the
67

67

00:04:53,180  -->  00:04:54,240
blackjack module
68

68

00:04:54,240  -->  00:04:58,950
we can actually refactor the deal_card
function so that it's called _deal_
69

69

00:04:58,950  -->  00:05:08,500
card so we go back their go to our deal card and if I refactor that right
70

70

00:05:08,500  -->  00:05:21,730
click it refactor rename and put an underscore in
front of it and refactor it...that should
71

71

00:05:21,730  -->  00:05:25,100
have changed everywhere even here
72

72

00:05:25,100  -->  00:05:29,890
back in the import_test.py but notice
what happened now IntelliJ has actually come
73

73

00:05:29,890  -->  00:05:34,380
up and help us now its access to a
protected member_deal_
74

74

00:05:34,380  -->  00:05:39,460
card of a module so we are now
correctly getting a warning that this is
75

75

00:05:39,460  -->  00:05:45,270
a protected member in so much as far as Python is actually concerned so their is still
76

76

00:05:45,270  -->  00:05:48,430
nothing preventing the access just wanna
make that clear we can still run it and
77

77

00:05:48,430  -->  00:05:55,360
if we do run it the game still actually work so unlike Java or another programming language
78

78

00:05:55,360  -->  00:05:58,820
where once we set it to like private or
protected we can actually restrict the
79

79

00:05:58,820  -->  00:06:03,730
uses here we can't do that so it's still
gonna work but you do get a warning
80

80

00:06:03,730  -->  00:06:07,790
that it's quite prominent its not just a little warning on the right hand side its actually
81

81

00:06:07,790  -->  00:06:09,400
underscoring
82

82

00:06:09,400  -->  00:06:12,670
you know the little underscore on the actual method name we are trying to access which will hopefully
83

83

00:06:12,670  -->  00:06:18,220
get you to look at and think what have I done wrong here
so if you find yourself using an object
84

84

00:06:18,220  -->  00:06:22,170
whos name starts with an underscore now
bear in mind that you probably shouldn't
85

85

00:06:22,170  -->  00:06:29,150
be doing that the developer of the module
has defined it that way for you probably not
86

86

00:06:29,150  -->  00:06:32,700
to access it that way of course if the
object is in your own code then you
87

87

00:06:32,700  -->  00:06:36,880
probably know what you doing then its ok
but just be very careful if it existed
88

88

00:06:36,880  -->  00:06:38,500
in a module that you didn't actually write
89

89

00:06:38,500  -->  00:06:42,650
yourself and as you can see IntelliJ is
aware of this convention and provides us
90

90

00:06:42,650  -->  00:06:46,190
with this very useful warning so that at
least we are aware of what
91

91

00:06:46,190  -->  00:06:50,030
we're actually doing so just close it
down because there is actually another
92

92

00:06:50,030  -->  00:06:56,150
implication of using underscored at the
start of a name so if your using
93

93

00:06:56,150  -->  00:06:59,750
alternate way of importing blackjack
anything whose name starts with an
94

94

00:06:59,750  -->  00:07:03,570
underscore is not actually imported
now we've recommended before that you
95

95

00:07:03,570  -->  00:07:07,130
don't do an import* from a module
because all of the names from the
96

96

00:07:07,130  -->  00:07:10,910
imported modules then have become part of your
modules namespace and it's then very
97

97

00:07:10,910  -->  00:07:15,670
easy to lose track of what names belong
to what because the way we imported blackjack
98

98

00:07:15,670  -->  00:07:20,110
we need to use blackjack. to access any
of the Blackjack objects which makes it
99

99

00:07:20,110  -->  00:07:24,630
very obvious that we're actually dealing
with code that's part of blackjack
100

100

00:07:24,630  -->  00:07:27,870
and you can see on lines 5 and 6 we are actually inputting the . their to
101

101

00:07:27,870  -->  00:07:31,190
access that blackjack specific functionality so we can now
102

102

00:07:31,190  -->  00:07:35,790
look at the difference in more detail so
what we are gonna do is comment out all this
103

103

00:07:35,790  -->  00:07:42,560
code for now just leave the import in we are gonna
have a look at what's in global so I want
104

104

00:07:42,560  -->  00:07:46,020
to list all the names separately rather
than in one long line that we get if
105

105

00:07:46,020  -->  00:07:50,940
we just used print globals which have
used previously so gonna create a
106

106

00:07:50,940  -->  00:08:00,660
loop here so...
107

107

00:08:00,660  -->  00:08:07,880
...so if we run this but we get
an error straightaway so x is meant to
108

108

00:08:07,880  -->  00:08:11,650
iterate through all the keys in the
dictionary but as soon as we've used X the
109

109

00:08:11,650  -->  00:08:14,920
dictionary changes and Python gives
us an error so this code does not actually work
110

110

00:08:14,920  -->  00:08:19,060
because obviously we knew very well that
we defined that has actually altered the
111

111

00:08:19,060  -->  00:08:24,250
dictionary itself so we can't actually access the
the globals that why so one quick way
112

112

00:08:24,250  -->  00:08:28,230
around this is to take a copy of the
globals dictionary then iterate through that
113

113

00:08:28,230  -->  00:08:33,560
so that means we won't see our variable X
in that list but as a quick way to make a
114

114

00:08:33,560  -->  00:08:37,040
copy is to use the sorted function then
the actual code has the added advantage
115

115

00:08:37,040  -->  00:08:42,220
of producing a sorted list so let's go
ahead and do that so.....
116

116

00:08:42,220  -->  00:08:43,540
....
117

117

00:08:43,540  -->  00:08:54,840
.....so that way
118

118

00:08:54,840  -->  00:08:58,730
there's nothing being added to the
dictionary when we go to iterate
119

119

00:08:58,730  -->  00:09:03,100
through G and we should find that
it actually works without an error so
120

120

00:09:03,100  -->  00:09:09,540
if we run this this time it actually has
worked so the list itself is pretty
121

121

00:09:09,540  -->  00:09:13,180
small and a part from a few things underscore before and after their names
122

122

00:09:13,180  -->  00:09:17,150
the only object that's present in here
is blackjack which of course we
123

123

00:09:17,150  -->  00:09:21,310
imported on line 1 but let's just change
the import and see what happens if we
124

124

00:09:21,310  -->  00:09:22,820
added a start so...
125

125

00:09:22,820  -->  00:09:25,820
.....
126

126

00:09:26,530  -->  00:09:38,410
...we do it that way and we run it....you can see we got a completely
127

127

00:09:38,410  -->  00:09:43,110
different result but all our functions
as you can see and the variables are
128

128

00:09:43,110  -->  00:09:47,530
showing up basically everything from the
blackjacks module namespace now appears
129

129

00:09:47,530  -->  00:09:52,100
in our modules namespace so if we
created an object called cards for
130

130

00:09:52,100  -->  00:09:56,500
example then the blackjack modules card
would no longer be available so I said
131

131

00:09:56,500  -->  00:10:00,510
that everything from the blackjacks
module namespace is imported but to be
132

132

00:10:00,510  -->  00:10:03,970
precise that's not strictly true for
example there's no assign there if you have a
133

133

00:10:03,970  -->  00:10:08,410
look at the screen of our _deal_card function and if we
134

134

00:10:08,410  -->  00:10:23,170
try and use it now we actually get an error so if we try and do that....and we got an error their unresolved
135

135

00:10:23,170  -->  00:10:28,080
reference so the Python import
mechanism does actually take note of
136

136

00:10:28,080  -->  00:10:31,290
this convention and it won't import any
objects that start with an underscore
137

137

00:10:31,290  -->  00:10:36,850
when you import star now when we
import blackjack the objects from the
138

138

00:10:36,850  -->  00:10:41,280
blackjack module aren't imported separately so
everything even names beginning with
139

139

00:10:41,280  -->  00:10:45,360
underscores are available by the prefixing them with blackjack. so we
140

140

00:10:45,360  -->  00:10:48,130
put the import back as to what it was like
before
141

141

00:10:48,130  -->  00:10:54,110
....that's not gonna work
because it's an unresolved reference but we
142

142

00:10:54,110  -->  00:10:56,440
go back and put blackjack in front of it
143

143

00:10:56,440  -->  00:11:01,380
to tell Python that it's the
Blackjack module we are dealing with it and
144

144

00:11:01,380  -->  00:11:09,870
for the frame....the error goes away and we are good to go we still get a warning here
145

145

00:11:09,870  -->  00:11:16,360
from IntelliJ telling us that its accessing a protected member but it does work again now lets get rid
146

146

00:11:16,360  -->  00:11:31,550
of this code......our app is running again all being with two cards again with
147

147

00:11:31,550  -->  00:11:36,880
only one being scored so using a double
underscores at the start of a name invokes
148

148

00:11:36,880  -->  00:11:41,860
Python's name mangling rules so this
convention really exists to prevent name
149

149

00:11:41,860  -->  00:11:46,190
clashes when subclassing objects and
again we'll look at this in more detail
150

150

00:11:46,190  -->  00:11:50,830
in the next section when we start dealing with
object oriented programming but in a
151

151

00:11:50,830  -->  00:11:55,150
blackjack module two underscore would
really serve no useful purpose but of
152

152

00:11:55,150  -->  00:11:59,860
course anything that starts with two underscores
automatically also starts with one so
153

153

00:11:59,860  -->  00:12:04,140
import* wouldn't actually import
them now the final underscore naming
154

154

00:12:04,140  -->  00:12:08,860
convention to discuss here is names that
start and end with two underscores now
155

155

00:12:08,860  -->  00:12:12,860
basically things that
you shouldn't be changing now we've seen just
156

156

00:12:12,860  -->  00:12:17,640
deleted it __name__ and use it to restrict the code
157

157

00:12:17,640  -->  00:12:21,230
that was executed when our module was imported so it should be obvious from
158

158

00:12:21,230  -->  00:12:26,330
the example that changing the value of
the __name__ isn't a
159

159

00:12:26,330  -->  00:12:31,690
good idea so of course I will just go ahed and do just that
now to show you what happens the
160

160

00:12:31,690  -->  00:12:35,500
same is generally true of anything
that's name with double underscores that
161

161

00:12:35,500  -->  00:12:40,740
at the start and end they can be useful to use but they should never be change so we are gonna go ahead
162

162

00:12:40,740  -->  00:12:51,320
now to our code and make sure that it's set correctly and I'll actually get rid of this code their....so now we've got our import we got our blackjack deal_card and blackjack.py
163

163

00:12:51,320  -->  00:12:55,740
so we are ready to go with that so we tested
that will just test one more time to make
164

164

00:12:55,740  -->  00:13:03,810
sure that it does work obviously our app is working nicely so that is good and of course we're
165

165

00:13:03,810  -->  00:13:07,270
getting two cards because we're using
line 3 calling that method when we
166

166

00:13:07,270  -->  00:13:10,890
shouldn't be doing that so next what we
gonna do is we are going to break things by
167

167

00:13:10,890  -->  00:13:18,370
changing the value of name the __name__ in blackjack.py so we are going to their and close this run window down
168

168

00:13:19,200  -->  00:13:28,650
just below the play method what I'm
going to do is change this variables so...
169

169

00:13:28,650  -->  00:13:40,710
....
170

170

00:13:40,710  -->  00:13:42,980
so obviously this is something you
shouldn't be doing good just making the
171

171

00:13:42,980  -->  00:13:47,170
point that these two underscores at the start and end of the variable names is something
172

172

00:13:47,170  -->  00:13:50,990
is Python way of saying you should never
change this but we are just doing this to see what
173

173

00:13:50,990  -->  00:13:51,980
happens
174

174

00:13:51,980  -->  00:13:59,500
if we run our import_test and have a look so you can see that the
175

175

00:13:59,500  -->  00:14:06,190
game starts up fine but notice that the
dealers has got only one card so the code
176

176

00:14:06,190  -->  00:14:10,030
the import_test hasn't yet
executed and that this is the original
177

177

00:14:10,030  -->  00:14:14,310
effect that we saw when we first imported
blackjack because __name__
178

178

00:14:14,310  -->  00:14:18,800
has been set to main or the __name__
179

179

00:14:18,800  -->  00:14:21,800
I'm talking about this code
180

180

00:14:22,750  -->  00:14:27,870
code we added to line 125 because we change that
the test that restricts code execution
181

181

00:14:27,870  -->  00:14:31,540
on import is no longer valid and the
code runs when we import the module
182

182

00:14:31,540  -->  00:14:40,330
so then if we actually get back to our
code and close this we then get an error because
183

183

00:14:40,330  -->  00:14:44,010
by closing the window we've destroyed all
the TKinter objects so that nothing
184

184

00:14:44,010  -->  00:14:50,430
works and the game cannot be played by calling
the play function so Python doesn't prevent you
185

185

00:14:50,430  -->  00:14:53,740
as such from modify these variables but
if you do so then the results are
186

186

00:14:53,740  -->  00:14:57,570
undefined and you can run into all sorts
of problems like I just introduced
187

187

00:14:57,570  -->  00:15:03,300
to you the only thing you can be reasonably sure of is that their is something that is going to break so before
188

188

00:15:03,300  -->  00:15:06,640
moving on i'm just gonna remove this offending line again because that shouldn't be
189

189

00:15:06,640  -->  00:15:14,180
in their deleted that like so close this run
window so we just about done here and what I'm going to
190

190

00:15:14,180  -->  00:15:18,570
leave you with now is one more use of
the underscore that will quickly go
191

191

00:15:18,570  -->  00:15:23,470
through so a variable that's just name_ with nothing else indicates
192

192

00:15:23,470  -->  00:15:29,230
a throwaway value so underscore by
itself is a valid variable name and
193

193

00:15:29,230  -->  00:15:29,790
rather than
194

194

00:15:29,790  -->  00:15:32,820
thinking of a name for something that's
not gonna be used the convention is to
195

195

00:15:32,820  -->  00:15:35,820
call it either that underscore or underscore
underscore
196

196

00:15:36,370  -->  00:15:41,060
so examples of things that you might have
to access but are not going to use include
197

197

00:15:41,060  -->  00:15:44,180
tuples we want to use some of the
values of a tuple but not all of them
198

198

00:15:44,180  -->  00:15:49,510
let's just write a simple code I'm just
going to comment out blackjack for now and put it below that
199

199

00:15:49,510  -->  00:15:54,410
and will put.....
200

200

00:15:54,410  -->  00:16:13,380
....
201

201

00:16:13,380  -->  00:16:14,590
...
202

202

00:16:14,590  -->  00:16:21,720
.....so as we saw in the tuples
video at the start of this course you can
203

203

00:16:21,720  -->  00:16:25,810
assign all the values of a tuple to a
variables using a single assignment that
204

204

00:16:25,810  -->  00:16:30,730
I have actually done here on line 8
but this code isn't really
205

205

00:16:30,730  -->  00:16:35,440
interested in my age just my name and
country and so I've put an underscore
206

206

00:16:35,440  -->  00:16:41,430
where the age would actually be now we could actually add another line to print the age if we wanted to
207

207

00:16:41,430  -->  00:16:47,840
so....and that would
still quite happily work run it to make sure it
208

208

00:16:47,840  -->  00:16:48,540
does work
209

209

00:16:48,540  -->  00:16:54,600
Tim Australia and 24 so it is working
but the point here is that it's just a
210

210

00:16:54,600  -->  00:16:59,800
way for you to name something as a
throwaway value that you know that you
211

211

00:16:59,800  -->  00:17:03,820
are not gonna be using for the rest of your programs
obviously in the case of the age which
212

212

00:17:03,820  -->  00:17:09,110
was just a second part their that is set to 24
currently if we actually gonna use the value then
213

213

00:17:09,110  -->  00:17:13,230
you probably give it a better name than the
underscore so the single underscore
214

214

00:17:13,230  -->  00:17:16,950
or 2 underscores as variable names are
used when you would not be doing
215

215

00:17:16,950  -->  00:17:20,970
anything else with the value but you
have to specify the variable ok so
216

216

00:17:20,970  -->  00:17:23,770
that's it I'm gonna finish here now and I'll see
you in the next video
