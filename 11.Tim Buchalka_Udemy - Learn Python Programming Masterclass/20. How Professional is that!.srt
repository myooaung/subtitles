1
00:00:05,560 --> 00:00:08,040
Entrar em sua função agora parece muito profissional.

2
00:00:08,580 --> 00:00:09,590
Tem uma corda escura.

3
00:00:09,920 --> 00:00:14,850
As ferramentas, como inteligência e PI charm, podem ser usadas para fornecer documentação sobre a função.

4
00:00:15,590 --> 00:00:18,190
Ao chamar a função novamente, desça para a linha 30.

5
00:00:18,930 --> 00:00:22,890
Apenas passe o mouse sobre o portão e entre na sua função para ver a documentação.

6
00:00:23,460 --> 00:00:28,380
Como alternativa, como eu disse algumas vezes, agora você também pode usar a sugestão de controle no topo.

7
00:00:28,740 --> 00:00:30,960
Temos o módulo de onde vem a função.

8
00:00:31,620 --> 00:00:34,350
Nós criamos, sentamos em uma cadeira em nosso programa de jogos de adivinhação.

9
00:00:34,620 --> 00:00:35,430
Então esse é o módulo.

10
00:00:36,120 --> 00:00:37,380
Esse é um caminho de link clicável.

11
00:00:37,860 --> 00:00:42,280
Se quisermos visualizar o código fonte, você pode clicar no jogo do beijo na parte superior da documentação e

12
00:00:42,300 --> 00:00:43,650
pular diretamente para esse módulo.

13
00:00:44,490 --> 00:00:47,520
Eu faria isso aqui porque você já abriu o módulo no ED.

14
00:00:49,390 --> 00:00:55,720
Então, o que faz um módulo ou a partir da documentação do Python, um módulo era um arquivo contendo definições e instruções

15
00:00:55,720 --> 00:00:56,590
do Python.

16
00:00:57,130 --> 00:01:04,930
O nome do telefone é o nome do módulo com o sufixo superior anexado a cada arquivo superior que você cria se

17
00:01:04,930 --> 00:01:11,460
torna um novo caminho e os módulos podem ser importados para outros módulos ou executados com funções importantes

18
00:01:11,470 --> 00:01:12,940
do módulo aleatório.

19
00:01:13,360 --> 00:01:16,480
E com executamos todos os módulos que criamos.

20
00:01:17,730 --> 00:01:22,620
Então, abaixo disso, em nossa documentação, encontra-se o texto de nossas funções.

21
00:01:23,100 --> 00:01:27,870
Observe que a palavra aparece ligeiramente diferente do restante do texto.

22
00:01:28,560 --> 00:01:32,010
Quando você fecha e eu uso táticas, ele é formatado de maneira diferente.

23
00:01:32,370 --> 00:01:38,130
Táticas únicas, como as que usamos no nosso forint de texturização, representam algo que é o nome da

24
00:01:38,370 --> 00:01:39,630
variável classe funcional.

25
00:01:40,560 --> 00:01:43,650
Se você não pode dar táticas no teclado, não é o fim do mundo.

26
00:01:43,920 --> 00:01:46,860
Você simplesmente não receberia essa alteração de fonte na sua documentação.

27
00:01:47,200 --> 00:01:51,780
Mas se você pode digitá-lo, o pacote de notícias inclui os nomes de qualquer coisa a que você se refere.

28
00:01:53,220 --> 00:01:56,520
Então, continuando abaixo, temos a seção de parâmetros.

29
00:01:57,360 --> 00:02:02,640
Observe que a palavra Prem é agradável em cinza e que o texto a seguir é recuado.

30
00:02:03,000 --> 00:02:04,230
Tudo isso é feito automaticamente.

31
00:02:04,720 --> 00:02:07,470
O mesmo acontece com o texto de devoluções.

32
00:02:08,160 --> 00:02:09,710
Não precisamos nos preocupar com o Medicare.

33
00:02:09,720 --> 00:02:13,470
Envie um texto para os utilitários de documentos para cuidar de tudo isso para nós.

34
00:02:13,980 --> 00:02:18,570
Mais precisamente, a formatação de texto reestruturada cuida de tudo isso para nós.

35
00:02:18,870 --> 00:02:19,590
Isso é um absurdo.

36
00:02:19,710 --> 00:02:22,920
UMA. M. Traço após prompt na seção PERENT.

37
00:02:23,320 --> 00:02:25,410
Ele cuidou da fonte diferente para impressão.

38
00:02:27,760 --> 00:02:32,700
Não há muito o que você precise saber ao criar suas cordas de cachorro, que a Intel J ou sua ideia

39
00:02:32,700 --> 00:02:37,210
geram o material para você, e ele está de volta em qualquer nome de usuário que você se referir.

40
00:02:37,570 --> 00:02:39,280
O sistema cuida de tudo o resto.

41
00:02:39,850 --> 00:02:42,850
Mencionei que as doutrinas Python aparecem dentro da função.

42
00:02:43,210 --> 00:02:45,580
Eles se tornam um atributo da função.

43
00:02:46,300 --> 00:02:51,580
Não se preocupe muito com o atributo que ficará claro na seção de programação orientada

44
00:02:51,580 --> 00:02:53,130
a objetos deste curso.

45
00:02:53,710 --> 00:02:56,090
O que ele fará aqui, no entanto, é demonstrar por que isso é uma coisa boa.

46
00:02:57,570 --> 00:03:02,570
E o que especificamente são algumas linhas de código após nossa definição de função, deixando duas linhas em

47
00:03:02,570 --> 00:03:04,010
branco após a função.

48
00:03:04,160 --> 00:03:05,000
Vamos dar uma olhada nisso.

49
00:03:07,060 --> 00:03:17,240
Faça backup aqui para começar a codificar 923, cobrindo impressão, parênteses, entrada, ponto, sublinhado, sublinhado, conversa,

50
00:03:17,720 --> 00:03:19,310
sublinhado, sublinhado.

51
00:03:20,560 --> 00:03:21,850
Impressão em linha.

52
00:03:23,140 --> 00:03:24,330
Parênteses, aspas duplas.

53
00:03:24,390 --> 00:03:28,500
Vou colocar uma estrela entre aspas duplas e multiplicada por 80.

54
00:03:29,170 --> 00:03:31,750
Temos muitos asteriscos na saída.

55
00:03:32,100 --> 00:03:39,380
Iremos para o topo imprimir parênteses, obter Alesco, ponto inteiro e, em seguida, sublinhar e pontuar o tipo de pontuação

56
00:03:39,380 --> 00:03:41,710
doc e a pontuação fechando parênteses.

57
00:03:42,740 --> 00:03:46,010
E pegue uma cópia da linha 24 e poste-a na linha 26.

58
00:03:48,420 --> 00:03:49,990
Portanto, não estamos chamando as funções aqui.

59
00:03:50,430 --> 00:03:52,230
Estamos nos referindo aos atributos.

60
00:03:52,920 --> 00:03:55,570
Isso significa que não usamos parênteses após o nome da função.

61
00:03:56,330 --> 00:03:57,370
Resultados do programa.

62
00:03:57,420 --> 00:03:58,310
E vamos verificar a saída.

63
00:04:02,160 --> 00:04:04,940
E role para cima e veja nosso painel de saída.

64
00:04:05,700 --> 00:04:07,140
O primeiro bloco pode parecer familiar.

65
00:04:07,590 --> 00:04:10,830
Isso ocorre porque é para encaixar a string da função de entrada interna.

66
00:04:10,830 --> 00:04:13,950
E vimos isso mais cedo após a hora dos asteriscos.

67
00:04:14,160 --> 00:04:16,560
Nós obtemos a string dock da nossa função get integer.

68
00:04:17,100 --> 00:04:18,240
Você pode dizer que há uma rolagem para baixo.

69
00:04:19,330 --> 00:04:20,870
Não, isso não é algo que você faria normalmente.

70
00:04:21,200 --> 00:04:24,430
É muito mais rápido usar a sugestão de controle ou passar o mouse sobre o nome da função.

71
00:04:24,470 --> 00:04:29,220
Mas explica por que o Doctrine entra na definição da função e não antes dela.

72
00:04:30,190 --> 00:04:34,220
Há outra coisa que você pode fazer para obter um resultado semelhante é usar a ajuda interna.

73
00:04:34,890 --> 00:04:36,830
Então, o que vou fazer é substituir os do Lawrence.

74
00:04:39,880 --> 00:04:41,770
Além disso, aqueles dispostos a trocar ajuda.

75
00:04:43,300 --> 00:04:48,010
Parênteses obtêm o Classico inteiro, mas menos os parênteses novamente.

76
00:04:48,970 --> 00:04:49,840
Se você estiver no programa.

77
00:04:52,240 --> 00:04:55,080
Você pode dizer que publicamos o doutorado em bate-papo novamente.

78
00:04:55,870 --> 00:05:01,330
Isso pode ser útil quando você estiver trabalhando no programa interativo Python, em vez de executar um RTA; ajude a

79
00:05:01,710 --> 00:05:04,180
passar o nome do objeto Python como argumento.

80
00:05:04,630 --> 00:05:06,610
E você dirá os documentos para esse objeto.

81
00:05:07,630 --> 00:05:12,130
Ok, então o que vou fazer agora é adivinhado corretamente para encerrar o programa ou parar o vídeo aqui.

82
00:05:14,340 --> 00:05:19,110
Nos próximos vídeos, escreveremos mais algumas funções para praticar o que aprendemos até agora.

83
00:05:19,830 --> 00:05:24,780
Eu queria cobrir as strings do docs primeiro, para que possamos escrever strings do docs para nossas funções no futuro.

84
00:05:25,350 --> 00:05:27,660
A maneira de ensinar as melhores práticas por exemplo.

85
00:05:28,010 --> 00:05:29,460
E eu queria dar um bom exemplo.

86
00:05:30,600 --> 00:05:32,060
Então, vou terminar agora com um desafio.

87
00:05:33,960 --> 00:05:39,020
O desafio é criar bebidas do dock para as três funções que escrevemos na função Parar as doutrinas

88
00:05:39,030 --> 00:05:45,480
de verificação do módulo Pi usando o cue de controle ou o controle J em um microfone ou passando o mouse sobre a

89
00:05:45,480 --> 00:05:50,250
função para garantir que estejam formatados corretamente e fornecer todas as informações alguém precisaria usar essas

90
00:05:50,250 --> 00:05:50,820
funções.

91
00:05:51,630 --> 00:05:56,760
E agora aqui para garantir que testamos suas funções após adicionar o médico apenas para garantir que você não tenha

92
00:05:56,760 --> 00:05:57,450
quebrado nada.

93
00:05:58,110 --> 00:06:00,390
Agora, não vou analisar minha solução em vídeo.

94
00:06:00,750 --> 00:06:05,760
Você pode ver as doutrinas que criamos no próximo vídeo, que é um documento mostrando o código.

95
00:06:09,100 --> 00:06:10,050
Então você está no próximo vídeo.
