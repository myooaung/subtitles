WEBVTT
1

00:00:04.200  -->  00:00:10.120
Let's talk about performance of your
code in Python. So you can take a break

2

00:00:10.120  -->  00:00:13.839
from writing code in this video. Rather,
sit back and relax while I demonstrate

3

00:00:13.839  -->  00:00:18.850
why I write all this code in outliers.py.
If we ignore all the test data

4

00:00:18.850  -->  00:00:24.400
on lines 1 to 11, there's still a lot more
code in here, compared to our three line

5

00:00:24.400  -->  00:00:27.650
loops from the last two videos.

6

00:01:06.049  -->  00:01:08.829
So don't worry about typing along.
This code will be

7

00:01:08.829  -->  00:01:11.560
available in the resources section for
this video, if you want to run it

8

00:01:11.560  -->  00:01:15.310
yourself, but don't worry about how it
works at this time. It all makes sense

9

00:01:15.310  -->  00:01:18.850
in due course. If you want to use the code
from the resources to put on your

10

00:01:18.850  -->  00:01:23.350
computer, make sure you watch the entire
video first, before doing so. Alright, so I'm

11

00:01:23.350  -->  00:01:27.069
going to quickly create the new file
that this code is going to be in and

12

00:01:27.069  -->  00:01:31.240
paste it directly in. So it's New, Python
file - we're gonna be calling this

13

00:01:31.240  -->  00:01:39.069
one timing_delete. I'll
paste the code in, and go back up to the

14

00:01:39.069  -->  00:01:43.240
top of the file. Alright, so you can see I've
created a new python file - timing_delete

15

00:01:43.240  -->  00:01:47.289
timing_delete - and pasted in the code.
You'll learn about that import statement

16

00:01:47.289  -->  00:01:51.520
on line 1 later. We'll also be looking
at how to use the timeit module, in a

17

00:01:51.520  -->  00:01:55.500
later section. Below that, though, on
lines 7 through 9,

18

00:01:55.500  -->  00:01:59.820
I create three lists, to remove items
from. We need a separate list for each

19

00:01:59.829  -->  00:02:04.479
method, because the code strips values
from the lists. Obviously, it wouldn't be

20

00:02:04.479  -->  00:02:09.369
a valid test, unless we used the same list
to test each approach. The second and

21

00:02:09.369  -->  00:02:11.920
third lists of this scenario would
already have the outlying values

22

00:02:11.920  -->  00:02:15.820
stripped out, which we don't want.
We wrote our code so that it works with

23

00:02:15.820  -->  00:02:20.290
very large lists, but to date, we've only really
tested it with small ones. On lines

24

00:02:20.290  -->  00:02:24.880
7 to 8, I've used the list
function to create a list from a range.

25

00:02:24.880  -->  00:02:29.400
At the moment, the range will go up to
100, and you can see that set on line 3.

26

00:02:29.400  -->  00:02:32.740
The comment probably gives away what
I'll do next - we increase the list to

27

00:02:32.740  -->  00:02:37.600
contain 100 million items.
We'll strip out values is less than 10,

28

00:02:37.600  -->  00:02:41.470
and greater than 97. With the
large list, the max_valid value will also

29

00:02:41.470  -->  00:02:47.260
increase, as the comment on line five shows.
Alright, so below that I've created a

30

00:02:47.260  -->  00:02:50.980
function, using each of the approaches
that we've seen. The first one starts on

31

00:02:50.980  -->  00:02:56.890
line 12. It uses the long method with two
loops there - you can see there's two for loops.

32

00:02:56.890  -->  00:03:02.380
If you compare that code to outliers.py -
we'll quickly go over there - you can see it's

33

00:03:02.380  -->  00:03:06.490
just about the same there. It doesn't
print anything, but the code's pretty much

34

00:03:06.490  -->  00:03:12.940
the same otherwise. So moving on down,
lines 34 to 38 - that's the code that used

35

00:03:12.940  -->  00:03:16.300
reversed to iterate backwards over the
list. That's the code we wrote in the

36

00:03:16.300  -->  00:03:20.440
last video. I said that was slightly more
efficient than using a range, and that's

37

00:03:20.440  -->  00:03:25.120
the code on lines 41 through 44. I've
included that as well, so that we

38

00:03:25.120  -->  00:03:30.550
can see if what I said was correct. Below
that, moving on down, line 47, we've

39

00:03:30.550  -->  00:03:35.980
got this weird test; if underscore underscore name,
etc. That's something else

40

00:03:35.980  -->  00:03:39.490
we'll be learning about later. It's needed
because of the way we use the timeit

41

00:03:39.490  -->  00:03:42.970
function but don't worry about it now. I
also don't want you to worry about all

42

00:03:42.970  -->  00:03:47.980
that commented out code, that you can see
our lines 48 through 63. That's what

43

00:03:47.980  -->  00:03:51.360
will be timing our three functions, so
we can see how efficient they are.

44

00:03:51.360  -->  00:03:54.520
It's commented out at the moment because the
first thing we should do is test that

45

00:03:54.520  -->  00:04:01.209
the functions work. So on lines 65 through 70, I
call each of the functions and pass the

46

00:04:01.209  -->  00:04:05.020
list of numbers to it. We print out the
list, after they've had their items

47

00:04:05.020  -->  00:04:10.860
removed, so we can check that they work. So let's do that first. I'm gonna run the program,

48

00:04:12.140  -->  00:04:16.260
and you can see there, we've got the same
output from each function call -

49

00:04:16.260  -->  00:04:19.000
exactly the same.

50

00:04:21.420  -->  00:04:26.140
Alright, so now we can time them. So
what I'm going to do is uncomment

51

00:04:26.140  -->  00:04:36.910
that test code. Basically, the code, lines 47 through 63 - uncomment. I'm also going to comment

52

00:04:36.910  -->  00:04:47.400
out this code on lines 65 through 70. Alright, so let's see how each of our approaches performs.

53

00:04:47.400  -->  00:04:50.880
So I'm going to run the program.
That's quite a difference with the first

54

00:04:50.880  -->  00:04:55.160
timing. Don't worry about the exact
numbers because they'll change each time

55

00:04:55.160  -->  00:04:58.980
you run the program, and will also be
very different on different hardware.

56

00:04:58.990  -->  00:05:01.990
If you run this code, you'll certainly get
different numbers to what you see on

57

00:05:01.990  -->  00:05:06.120
screen. What's important here, is how the
three values relate to each other.

58

00:05:06.120  -->  00:05:10.080
So here the first method, which is the
complicated code using two loops, is

59

00:05:10.080  -->  00:05:14.680
faster than the other two. All three
still execute in less than a millisecond -

60

00:05:14.680  -->  00:05:19.870
much less - but our list only contains 100
items. Before we increase the size of the

61

00:05:19.870  -->  00:05:25.780
lists, compare the last two values. I said
that using enumerate is more efficient,

62

00:05:25.780  -->  00:05:29.500
but that function might be slower than
the other one. I did say it would be more

63

00:05:29.500  -->  00:05:33.670
efficient, once the lists had more than
about a thousand items. So I'm going to

64

00:05:33.670  -->  00:05:43.390
go and increase the list sizes, and try
again. I'll add two zeros. So we've now

65

00:05:43.390  -->  00:05:49.060
got 10,000 items for our max value, and max
valid, instead of being 97, we're going to

66

00:05:49.060  -->  00:05:56.980
add two nines, to make it 9997. So
our list now contains 10,000 items and the

67

00:05:56.980  -->  00:06:02.480
max_valid value is 9997. Let's run the program again.

68

00:06:02.480  -->  00:06:06.130
Now the second method is a
lot faster than the third. The difference

69

00:06:06.130  -->  00:06:09.430
is still less than a millisecond, but
enumerate is proving to be more

70

00:06:09.430  -->  00:06:13.930
efficient with larger lists. Our first
approach, the more complicated one, is

71

00:06:13.930  -->  00:06:19.000
significantly faster than the other two -
orders of magnitude faster. Alright, time

72

00:06:19.000  -->  00:06:23.290
to go really big. Before I do that,
though, I want to comment out the third

73

00:06:23.290  -->  00:06:26.740
method. It's the slowest of the three and we're
really interested in how much more

74

00:06:26.740  -->  00:06:30.820
efficient our complicated code is. I
don't want you to spend a long time

75

00:06:30.820  -->  00:06:33.129
watching this video, waiting for our code to finish,

76

00:06:33.129  -->  00:06:39.020
which is why I'm only going to test the
first and second approaches.

77

00:06:39.020  -->  00:06:43.740
And we also need to comment out the code down here,

78

00:06:44.369  -->  00:06:52.330
lines 59 through 63. Alright, so I'm gonna run the
program again now, just to make sure that

79

00:06:52.330  -->  00:06:58.449
I've commented out the right code. As you
can see, there's still quite a difference

80

00:06:58.449  -->  00:07:02.139
between our long code and the most
efficient of the shorter ones. Let's now

81

00:07:02.139  -->  00:07:08.889
try 100 million items in the list. I'm
gonna change this now, to use the

82

00:07:08.889  -->  00:07:17.309
commented values, commented out values.
Let's run this and see how long it takes.

83

00:07:18.149  -->  00:07:22.119
There'll be a slight pause while the
lists are being created. When the text

84

00:07:22.120  -->  00:07:25.760
timing appears, which it has now on the
output, the first timing result appears -

85

00:07:25.760  -->  00:07:30.760
pretty soon after, you saw that. Our longer
code takes less than one second to execute.

86

00:07:30.760  -->  00:07:34.200
The second function's still running. When it finishes you can see there,

87

00:07:34.200  -->  00:07:39.579
we've got a huge difference - close
to nine seconds longer. Now most of that

88

00:07:39.579  -->  00:07:44.110
time is spent while Python shuffles the
items down in the list. Our long code

89

00:07:44.110  -->  00:07:48.660
only removes items from the list twice,
so there's far less work to do.

90

00:07:48.660  -->  00:07:53.229
The shorter code deletes the items one
by one. Every time something's deleted,

91

00:07:53.229  -->  00:07:57.640
the list has to be shuffled down and
that takes time. When the list gets large,

92

00:07:57.640  -->  00:08:01.949
that time becomes very significant, as
we've just seen.

93

00:08:50.660  -->  00:08:53.580
Alright, so let's finish the video
here. In the next video, we've got a bit

94

00:08:53.590  -->  00:08:59.040
of a summary of what's happened so far.
See you in the next video.
