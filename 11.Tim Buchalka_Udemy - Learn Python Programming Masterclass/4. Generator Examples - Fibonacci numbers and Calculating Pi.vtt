WEBVTT
1
1

00:00:05.410  -->  00:00:10.100
Alright, so in this video, we're going to look at some more uses for generators, to get a feel for how
2

2

00:00:10.100  -->  00:00:11.630
they can be useful.
3

3

00:00:11.630  -->  00:00:17.370
Now the usual examples tend to be things like returning Fibonacci numbers or some other series.
4

4

00:00:17.420  -->  00:00:22.460
So I'm not going to break with tradition but I'm going to start by showing a neat trick that you can
5

5

00:00:22.460  -->  00:00:23.810
do in Python.
6

6

00:00:23.840  -->  00:00:28.430
And we're going to use, in a new python file, which I'm going to call scratchpad.py,
7

7

00:00:32.170  -->  00:00:34.890
scratchpad.py.
8

8

00:00:35.100  -->  00:00:40.030
Now you may have seen this before or worked it out, but if not, here's an efficient way to swap two values
9

9

00:00:40.120  -->  00:00:40.930
in Python.
10

10

00:00:41.200  -->  00:00:48.940
So I'm going to start by typing on line 1, a equals 2. Next line, b equals 3. We're going to do a print on line
11

11

00:00:48.950  -->  00:00:51.480
three parentheses double quote,
12

12

00:00:51.630  -->  00:01:02.000
a equals, or a is will be better, then left and right curly braces comma and b is, left and right curly braces
13

13

00:01:02.170  -->  00:01:04.320
dot format.
14

14

00:01:04.610  -->  00:01:05.160
That's gonna be
15

15

00:01:05.210  -->  00:01:07.860
a comma space b.
16

16

00:01:08.720  -->  00:01:11.760
And then the line following will do the swaps.
17

17

00:01:11.800  -->  00:01:17.080
That's a comma space b equals b comma space a.
18

18

00:01:17.150  -->  00:01:20.350
Now if we just copy line three again,
19

19

00:01:20.350  -->  00:01:22.390
so it prints out exactly the same.
20

20

00:01:22.600  -->  00:01:29.700
And if we actually run this, you can see that a started having the value of 2, b started having
21

21

00:01:29.700  -->  00:01:35.540
the value of 3 and the values are reversed after the code on line 5 is executed.
22

22

00:01:35.550  -->  00:01:40.350
So in many other computer languages you'd have to introduce a temporary variable to store one of the
23

23

00:01:40.350  -->  00:01:40.840
values.
24

24

00:01:40.860  -->  00:01:46.530
So in other words, you'd have to do something like this to achieve the same goal: so you'd normally have
25

25

00:01:46.530  -->  00:01:50.880
to do temp equals, or some temporary variable, then a
26

26

00:01:51.360  -->  00:01:58.350
equals b on the next line and then b equals ten. If you run that we get the same results as we got previously
27

27

00:01:58.360  -->  00:02:00.480
when we ran this program.
28

28

00:02:00.480  -->  00:02:01.820
And if I just comment those lines out again.
29

29

00:02:06.530  -->  00:02:11.720
So essentially, this technique relies on the fact that the right hand side of an assignment is evaluated
30

30

00:02:11.720  -->  00:02:17.320
first, then the result's assigned to the variable, or variables in this case, on the left.
31

31

00:02:17.330  -->  00:02:23.410
So effectively, in this case what we're getting is the equivalent of this; three comma space two, and I'll just comment
32

32

00:02:23.410  -->  00:02:25.510
that out for now.
33

33

00:02:25.640  -->  00:02:31.970
And that's due to the fact that Pythons evaluation of the right hand side of an assignment first.
34

34

00:02:32.030  -->  00:02:37.090
Now, I've done that for a reason, and that's because we're going to be using this technique in our generator,
35

35

00:02:37.280  -->  00:02:39.920
and that's because it makes the code a fair bit simpler.
36

36

00:02:40.550  -->  00:02:45.830
Alright, so a Fibonacci number is the sum of the previous two numbers in the sequence, with the first
37

37

00:02:45.830  -->  00:02:49.320
two values being either a 0 1, or 1 and 1.
38

38

00:02:49.510  -->  00:02:52.470
Now there's a good definition, which I'll very quickly open and show you,
39

39

00:02:55.590  -->  00:02:59.020
the link there to Fibonacci number on Wikipedia.
40

40

00:02:59.020  -->  00:03:03.420
Now I'm not going to read through the whole article, but it's a fascinating sequence with all sorts of
41

41

00:03:03.420  -->  00:03:05.090
useful applications.
42

42

00:03:05.190  -->  00:03:09.750
Now Fibonacci numbers actually appear in nature too and there's examples of things like the way 
43

43

00:03:09.750  -->  00:03:11.750
pineapples and artichokes grow.
44

44

00:03:12.130  -->  00:03:14.450
Now a bit further down there, as we have a look,
45

45

00:03:15.820  -->  00:03:21.100
you can see here, there's this list of fibonacci numbers, and it's a table showing the first 21 Fibonacci
46

46

00:03:21.100  -->  00:03:22.430
numbers in the sequence.
47

47

00:03:22.450  -->  00:03:27.010
So we're going to use that to check our values to make sure that our program is working correctly.
48

48

00:03:27.010  -->  00:03:33.220
Alright, so back to Intellij, and we're going to create a new python file, and this time we'll actually
49

49

00:03:33.220  -->  00:03:36.250
create one called fibgen.py.
50

50

00:03:40.030  -->  00:03:46.030
And let's define a function - fibonacci - so def space fibonacci,
51

51

00:03:46.090  -->  00:03:51.800
a double c i, and then parentheses no parameters and a colon.
52

52

00:03:51.850  -->  00:03:58.510
I'm gonna start by putting current equals zero, previous equals 1.
53

53

00:03:58.510  -->  00:04:03.610
Now we can actually combine them into a single statement by unpacking a tuple, which is what that technique
54

54

00:04:03.610  -->  00:04:10.180
I showed earlier is actually doing. So to initialize that, we can do current and change that to comma previous
55

55

00:04:11.440  -->  00:04:13.590
equals zero comma 1.
56

56

00:04:13.920  -->  00:04:16.620
So that's the equivalent of what I typed previously.
57

57

00:04:16.640  -->  00:04:17.780
That would certainly work.
58

58

00:04:18.220  -->  00:04:26.470
And let's go ahead now and we're going to type while true capital T. Then we're going to type current comma
59

59

00:04:26.510  -->  00:04:38.410
space previous is equal to current plus previous comma space current. Then we're gonna do yield current.
60

60

00:04:38.920  -->  00:04:46.180
And you can see now why we talked about yield earlier in this section. So in this code on line four, current gets
61

61

00:04:46.180  -->  00:04:52.240
the value zero plus 1, and previous gets the old value of current, which the first time it runs is
62

62

00:04:52.240  -->  00:04:53.070
zero.
63

63

00:04:53.230  -->  00:04:56.260
Next time around current becomes 1 plus zero,
64

64

00:04:56.470  -->  00:05:00.240
so one again, in other words, and previous this time, becomes one.
65

65

00:05:00.510  -->  00:05:06.250
And third time around, current becomes two and previous is one. Then we get three and two, followed by five and
66

66

00:05:06.250  -->  00:05:07.410
three and so on.
67

67

00:05:07.660  -->  00:05:10.680
So the big test now will be to see whether this works.
68

68

00:05:10.690  -->  00:05:14.300
So let's actually try adding some code to check that out.
69

69

00:05:14.380  -->  00:05:20.840
We're going to type fib equals fibonacci to call our function,
70

70

00:05:20.950  -->  00:05:30.220
and then we're going to print the 21 Fibonacci numbers. Sp print next fib, and we want to do 21 so
71

71

00:05:30.220  -->  00:05:33.050
we're going to actually copy and paste this another 20 times so we've got
72

72

00:05:33.280  -->  00:05:34.530
21 lines in total.
73

73

00:05:39.650  -->  00:05:45.230
That should be 21 there. Now you can add some more if you wanted to but I'm going to add 21 in this case.
74

74

00:05:45.230  -->  00:05:53.540
Alright, so let's just run this, and have a look at some of those numbers there; 1 1 2 3 5 8 13, and if
75

75

00:05:53.580  -->  00:05:59.290
we go back and have a look at the table; 0 1 1 2 3 5 8 13.
76

76

00:05:59.410  -->  00:06:03.180
And just to be consistent, if you want the sequence to start with 0,
77

77

00:06:03.310  -->  00:06:04.900
we just swap lines 4 and 5 around.
78

78

00:06:04.900  -->  00:06:08.080
So we return the value of current before calculating the next number.
79

79

00:06:08.170  -->  00:06:17.890
So you could go back there to Intellij and we could put the yield before the actual lines that change the
80

80

00:06:17.890  -->  00:06:19.600
values, and actually run that again.
81

81

00:06:22.900  -->  00:06:33.960
And now we've quickly got the zero starting, so 0 1 1 2 3 5 8 13. 0 1 1 2 3 5 8 13 and 21 34 55 89,
82

82

00:06:33.970  -->  00:06:38.180
21, 34, 55, 89.
83

83

00:06:38.240  -->  00:06:47.960
You can see right through to the last three there; 2 5 8 4 4 and 1 8 1 6 7 6 5. 2 5 8 4 4 and 1 8 1 6 7
84

84

00:06:47.960  -->  00:06:48.470
6 5.
85

85

00:06:48.470  -->  00:06:50.690
So you can see that's working nicely.
86

86

00:06:50.840  -->  00:06:51.110
Alright.
87

87

00:06:51.110  -->  00:06:57.560
So that's actually a generator that returns successive Fibonacci numbers each time we call next to get
88

88

00:06:57.560  -->  00:06:58.870
the next value.
89

89

00:06:59.380  -->  00:07:07.020
Now note that what we've defined here, on line one in our function - and I've spelt that wrong, by the way. Let's just get that
90

90

00:07:07.020  -->  00:07:13.010
and fix that up, and change the function call as well. Calculating Fibonacci numbers,
91

91

00:07:13.040  -->  00:07:15.920
we should actually get the name of the function correct.
92

92

00:07:16.140  -->  00:07:19.530
Alright, so notice that this is an infinite generator.
93

93

00:07:19.530  -->  00:07:23.580
In other words, it'll keep on generating the next number in the sequence, and that's why I've used
94

94

00:07:23.580  -->  00:07:30.360
next here in our calls between lines 10 through 30, rather than trying to loop through the values.
95

95

00:07:30.540  -->  00:07:35.410
We definitely wouldn't, for example, want to do something like this - which I'll just put in temporarily.
96

96

00:07:36.180  -->  00:07:42.420
So we wouldn't want to do for f in fib colon then print f.
97

97

00:07:42.770  -->  00:07:46.770
If we actually do that and just temporarily comment out these prints, and if
98

98

00:07:49.520  -->  00:07:56.370
we actually run this, very quickly we get huge numbers as you can see, and it's definitely not the output that
99

99

00:07:56.370  -->  00:08:02.580
we're actually looking for so I'm going to stop that. Now many languages would overflow the maximum
100

100

00:08:02.580  -->  00:08:07.800
value that you can store in an int, but Python doesn't have that limitation. Eventually though, a single value would
101

101

00:08:07.800  -->  00:08:12.210
get so large that it takes the full 32 gigabytes of my computers RAM to store it.
102

102

00:08:12.360  -->  00:08:15.000
But that would take a long time. If we had enough memory,
103

103

00:08:15.000  -->  00:08:16.600
this is an infinite series.
104

104

00:08:16.860  -->  00:08:21.060
Alright, you can see that I stopped that anyway, otherwise this video would go on for a very long time. So I'm
105

105

00:08:21.060  -->  00:08:28.100
going to do that and undo those changes - go back to what we had previously, like so. So an infinite series can
106

106

00:08:28.100  -->  00:08:33.770
be useful, even though you'll never get around to generating an infinite number of values. To see how
107

107

00:08:33.770  -->  00:08:34.640
they can be useful, though,
108

108

00:08:34.670  -->  00:08:37.100
let's have a go at calculating the value of pi.
109

109

00:08:37.460  -->  00:08:43.760
Now Maths may not be your thing, but this is a simple example and it includes a neat way that a generator can
110

110

00:08:43.760  -->  00:08:45.020
make code simpler.
111

111

00:08:45.280  -->  00:08:50.220
And it also provides a simple challenge, just to get you used to creating your own generators.
112

112

00:08:50.240  -->  00:08:52.840
Now there's loads of ways to calculate pi.
113

113

00:08:52.880  -->  00:08:58.490
We're going to use an infinite series attributed to Leibnitz, who's expanding on the work of Madhava
114

114

00:08:58.520  -->  00:09:04.820
of Sangamagrama - if I've pronounced it right - who was an Indian mathematician from about 300 years ago.
115

115

00:09:05.210  -->  00:09:08.160
Now we can have a look at Leibnitz's series.
116

116

00:09:08.210  -->  00:09:17.280
I'm just going to quickly open a link - it's a Wikipedia link. Open a new tab and paste that in. That's his formula for working
117

117

00:09:17.290  -->  00:09:22.660
out pi. Now the series overall is quite simple, and it gives pi divided by 4.
118

118

00:09:22.680  -->  00:09:23.940
So we want pi,
119

119

00:09:23.940  -->  00:09:24.970
so we want to multiply, 
120

120

00:09:24.970  -->  00:09:28.040
therefore, both sides by 4 for that to happen.
121

121

00:09:28.080  -->  00:09:34.950
So Py can be calculated, in other words, as 4, minus four thirds, plus four fifths, minus four sevenths,
122

122

00:09:35.220  -->  00:09:40.390
plus five ninths, and so on. Now 4 is the same as 4 divied by one,
123

123

00:09:40.410  -->  00:09:44.670
so we need to start with a sequence of the odd numbers; 1 3 5 7 etc.
124

124

00:09:44.730  -->  00:09:50.480
Right, so let's talk about the challenge, and you're going to need a new python file for this. Alright,
125

125

00:09:50.480  -->  00:09:56.530
so the challenge is to create a generator, to return an infinite sequence of odd numbers starting at
126

126

00:09:56.540  -->  00:09:57.460
1.
127

127

00:09:57.510  -->  00:10:01.170
So print the first 100 numbers to check that the generator is working correctly.
128

128

00:10:01.550  -->  00:10:03.640
And note that this is just for testing.
129

129

00:10:03.710  -->  00:10:08.040
We're going to need far more than 100 numbers, and we don't know in advance how many,
130

130

00:10:08.060  -->  00:10:12.040
so that's why we're creating our own generator instead of just using a range.
131

131

00:10:12.050  -->  00:10:14.700
So that's the challenge. See how you go. Pause the video.
132

132

00:10:14.750  -->  00:10:17.360
I'll see you when you get back with the solution.
133

133

00:10:19.540  -->  00:10:19.870
Alright.
134

134

00:10:19.870  -->  00:10:25.240
So there's not actually too many ways to write this, so your code should end up looking similar to this:
135

135

00:10:25.450  -->  00:10:28.120
So I'm going to create that new file that I talked about.
136

136

00:10:28.200  -->  00:10:33.840
I'm going to call this one pi generation, or pigen.py
137

137

00:10:36.010  -->  00:10:42.060
And we're going to define an odd numbers function, so it's def space odd numbers parentheses
138

138

00:10:42.120  -->  00:10:48.800
colon, and n equals one. Then we're going to type while true, with a capital T,
139

139

00:10:49.490  -->  00:10:50.950
and yield
140

140

00:10:52.030  -->  00:10:55.080
n, then n space.
141

141

00:10:55.270  -->  00:10:59.110
Oops, next line n plus equals 2.
142

142

00:10:59.450  -->  00:11:08.420
And then in terms of the code, odds is equal to odd numbers, so we're going to call our function. Then
143

143

00:11:08.440  -->  00:11:11.030
we're going to do a test here to make sure it's working by using a range,
144

144

00:11:11.030  -->  00:11:28.520
so for i in range, 100 parentheses colon print next odds. And if we actually run that, you can see 1 3 5 9 11 13 15
145

145

00:11:28.520  -->  00:11:31.670
17 19 21 23 - that seems to be working fine.
146

146

00:11:32.030  -->  00:11:35.950
Alright, so that's just an odd number generator, of course. We're not actually calculating the value of pi
147

147

00:11:36.000  -->  00:11:36.920
next.
148

148

00:11:36.920  -->  00:11:42.550
So let's go ahead and see how we can use this odd number generator to calculate the value of pi.
149

149

00:11:42.980  -->  00:11:49.200
So we don't need this test code, so I'm going to delete that. Instead what I'm going to do is define another
150

150

00:11:49.200  -->  00:11:50.040
function.
151

151

00:11:50.220  -->  00:11:57.840
We're going to define, actually delete this code as well, the method call, because we don't need that there; define or def space
152

152

00:11:58.000  -->  00:11:59.340
def pi underscore series,
153

153

00:12:02.250  -->  00:12:07.170
series parentheses colon, and we're gonna do odds equals oddnumbers, so
154

154

00:12:07.170  -->  00:12:16.140
I'm going to call our oddnumbers function. Then approximation is equal to zero, while True.
155

155

00:12:16.910  -->  00:12:21.480
Now we're going to need to use our odd number generator but also set the initial value to zero, so that's
156

156

00:12:21.480  -->  00:12:23.570
what I've done there with the approximation.
157

157

00:12:23.730  -->  00:12:24.970
And we need an infinite loop,
158

158

00:12:24.970  -->  00:12:28.050
so that's why I've added the while true on line 11.
159

159

00:12:28.050  -->  00:12:32.770
Now the body of the loop will get the next odd number in the sequence and divide it into four.
160

160

00:12:33.010  -->  00:12:39.420
Now we're going to continue doing that, and alternately adding and subtracting the result to our approximation.
161

161

00:12:39.570  -->  00:12:45.450
Now using conventional code, you may try to keep track of whether the last value was added or subtracted,
162

162

00:12:45.790  -->  00:12:46.650
and do the opposite
163

163

00:12:46.650  -->  00:12:47.770
next time around.
164

164

00:12:48.060  -->  00:12:54.420
It's not that hard - just a bit fiddly - but it's also unnecessary, because if you remember that a generator
165

165

00:12:54.420  -->  00:12:58.090
will continue from where it left off after yielding a value.
166

166

00:12:58.350  -->  00:13:04.350
So we can add the opposite code after the yield and then yield again. So let's go ahead and do that and
167

167

00:13:04.350  -->  00:13:05.840
see if that makes sense.
168

168

00:13:05.850  -->  00:13:13.850
So we can do while True, that we've got there, then we're going to do approximation plus equals parentheses 4
169

169

00:13:14.280  -->  00:13:20.260
divided by next odds, two parentheses.
170

170

00:13:20.260  -->  00:13:21.440
Close it off.
171

171

00:13:21.480  -->  00:13:25.830
Then we're going to do a yield approximation.
172

172

00:13:25.830  -->  00:13:32.340
Then on the next line, we're going to do the other one; approximation minus equals 4 divided by
173

173

00:13:32.340  -->  00:13:35.500
next odds, like so,
174

174

00:13:36.060  -->  00:13:45.450
with the two parentheses closing it off. Then we're also going to yield that again, so yield approximation.
175

175

00:13:45.450  -->  00:13:52.050
So the first time round the loop, the code will have a 4 divided by the first odd number. When it yields the
176

176

00:13:52.050  -->  00:13:52.670
result,
177

177

00:13:52.770  -->  00:13:59.220
the generator remembers its state and exits. When we ask for the next approximation, it'll actually continue
178

178

00:13:59.340  -->  00:14:01.900
from line 14, down here.
179

179

00:14:02.190  -->  00:14:04.180
So this time the value's subtracted.
180

180

00:14:04.320  -->  00:14:08.200
Then next time around the loop, the value's added then subtracted and so on.
181

181

00:14:08.280  -->  00:14:13.650
Now you can actually have as many yields as you need, inside conditions if necessary, and the generator picks
182

182

00:14:13.650  -->  00:14:18.720
up the code after the last time it yields a result. And that, I think, is a very useful feature,
183

183

00:14:18.870  -->  00:14:22.660
so bear that in mind even if you're not interested in calculating the value of pi.
184

184

00:14:23.160  -->  00:14:25.790
And I should point out that there's no need to calculate it.
185

185

00:14:25.800  -->  00:14:28.130
People have actually been doing that for centuries.
186

186

00:14:28.260  -->  00:14:33.960
It's been calculated to billions of digits, but NASA only uses 16 significant digits to put a probe
187

187

00:14:33.960  -->  00:14:38.880
around Saturn, to an accuracy of within a metre or so over a distance of more than a billion kilometers.
188

188

00:14:39.240  -->  00:14:42.500
Of course, there are other mathematical uses for infinite series.
189

189

00:14:42.720  -->  00:14:46.220
So if you are a more mathematically inclined student you should find this useful.
190

190

00:14:46.500  -->  00:14:51.150
But if you're not into maths, I'll come back to why you'd want to use an infinite series in a moment,
191

191

00:14:51.150  -->  00:14:55.210
but first though, importantly, let's actually see whether this is going to work or not.
192

192

00:14:55.380  -->  00:14:59.870
So what I'm going to do is add some code now, to call our pi series.
193

193

00:15:00.510  -->  00:15:02.700
Let's go ahead on line 18 and add approx.
194

194

00:15:02.700  -->  00:15:08.370
underscore pi is equal to pi underscore series - we'll call our function.
195

195

00:15:08.460  -->  00:15:14.790
Then we're going to use a range, a for loop to add a range. So for x in range.
196

196

00:15:15.540  -->  00:15:22.130
Start off with one, and print next approx underscore pi.
197

197

00:15:22.950  -->  00:15:29.530
So if we actually run that, and we get the value 4.0, which is neither accurate or useful.
198

198

00:15:29.920  -->  00:15:33.670
So obviously, we need to generate a few more terms to get closer to pi.
199

199

00:15:34.030  -->  00:15:41.880
So if I actually change 1 in the range to 10. If we actually run that. Well that's looking a little bit better:
200

200

00:15:42.090  -->  00:15:47.820
that's 3.04 not 3.14. Now the value we're looking for is 
201

201

00:15:47.820  -->  00:15:48.640
3.1415926,
202

202

00:15:48.990  -->  00:15:55.040
So let's try it with a hundred and see what that comes out at. We'll just run that again. This time we've
203

203

00:15:55.040  -->  00:15:56.590
got 3.13,
204

204

00:15:56.690  -->  00:16:01.810
and then in the range there, 3.151693, 3.13159290.
205

205

00:16:01.950  -->  00:16:05.070
So it's getting better but let's actually try it with a thousand,
206

206

00:16:08.140  -->  00:16:10.340
and this time we're up to 3.14.
207

207

00:16:10.620  -->  00:16:16.190
So getting pretty close now, 3.1415, so it's still out a little bit, so if we try 10000.
208

208

00:16:16.200  -->  00:16:17.360
Let's try running that again.
209

209

00:16:18.560  -->  00:16:23.120
So 3.14149 is close to 3.1415,
210

210

00:16:23.150  -->  00:16:25.260
so the series is starting to converge.
211

211

00:16:25.370  -->  00:16:27.230
And one other one, if I try say 100000 -
212

212

00:16:30.070  -->  00:16:33.440
3.14158 is getting much closer.
213

213

00:16:33.500  -->  00:16:35.850
And let's just try one other one. We'll try a million,
214

214

00:16:40.050  -->  00:16:44.700
and you can see the value's at 3.14159 instead of 2616, so it's
215

215

00:16:44.740  -->  00:16:50.900
obviously getting really close, and you can see also that it took a while to actually to calculate. OK,
216

216

00:16:50.920  -->  00:16:55.510
so one more zero to take us to 10 million terms.
217

217

00:16:55.860  -->  00:17:00.150
Let's run that. So that's actually not bad is it.
218

218

00:17:00.430  -->  00:17:05.390
We're getting this sort of level of accuracy with just a few lines of code, which is pretty cool.
219

219

00:17:06.450  -->  00:17:10.110
So while that's executing, we'll talk about why I'd want to use an infinite generator.
220

220

00:17:10.200  -->  00:17:13.970
So just why would you want to use an infinite generator, unless you're into mathematics?
221

221

00:17:14.280  -->  00:17:16.830
Well consider that infinite doesn't have to mean infinite.
222

222

00:17:16.830  -->  00:17:18.780
It can just mean unknown.
223

223

00:17:19.200  -->  00:17:23.260
As an example, consider Google indexing web pages on the Internet.
224

224

00:17:23.280  -->  00:17:29.510
They send out robots, basically code that visits all the pages on a site, and indexes the content.
225

225

00:17:29.530  -->  00:17:33.360
Now the code itself, you can see now - I'll get back to that in a minute, because you can see now that we've actually
226

226

00:17:33.360  -->  00:17:36.940
finished here; 3.1415925.
227

227

00:17:37.170  -->  00:17:43.560
So we've got a range of 3.1415927, 3.1415925 and obviously, the value we're looking
228

228

00:17:43.560  -->  00:17:46.390
for is 3.1415926.
229

229

00:17:46.730  -->  00:17:50.390
So I think that's seriously impressive to get that level of accuracy
230

230

00:17:50.490  -->  00:17:51.690
with just a few lines of code.
231

231

00:17:51.690  -->  00:17:54.000
That's the power of using generators.
232

232

00:17:54.570  -->  00:17:59.580
But getting back to the Google example though, and indexing, or visiting all pages on a site and indexing the
233

233

00:17:59.580  -->  00:18:04.530
content. Well the code's got no idea in advance, how many pages there are on each site.
234

234

00:18:04.740  -->  00:18:07.630
So there's no use passing a number to the generator.
235

235

00:18:07.770  -->  00:18:09.970
Now, of course, the generator's not really infinite.
236

236

00:18:10.050  -->  00:18:11.840
There will be a terminating condition,
237

237

00:18:11.970  -->  00:18:14.710
once it starts visiting pages that have already been indexed.
238

238

00:18:14.910  -->  00:18:20.040
So the point here is that the generator will decide when to terminate - the calling program hasn't got
239

239

00:18:20.040  -->  00:18:23.380
any idea. We're going to see that in action in the next video,
240

240

00:18:23.550  -->  00:18:28.510
when we use a generator to work with the computer's filing system. So I'll see you in the next video.
