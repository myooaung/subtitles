1

00:00:03,980  -->  00:00:08,260
Alright, so in this video we're going to
talk about sorting lists. So lists have

2

00:00:08,269  -->  00:00:10,960
another method that doesn't appear in
the table that we were looking at

3

00:00:10,970  -->  00:00:15,410
previously. The reason that it doesn't
appear there, is because not all mutable

4

00:00:15,410  -->  00:00:20,510
sequence types have it. The method is
called sort and it unsurprisingly, sorts

5

00:00:20,510  -->  00:00:25,420
the list. Now that sounds simple enough,
so why am I devoting an entire video to it.

6

00:00:25,420  -->  00:00:29,600
Well the reason is, that there's another
way to sort things in Python, and the

7

00:00:29,600  -->  00:00:34,370
difference often confuses new Python
programmers. So let's start with sorting

8

00:00:34,370  -->  00:00:38,810
a list. We're going to open our number
underscore list.py program. I'm

9

00:00:38,810  -->  00:00:44,270
going to delete all but the first two
lines. Now there's not much point sorting

10

00:00:44,270  -->  00:00:48,320
either of those lists because they're
already both sorted. What I'm going to do

11

00:00:48,320  -->  00:00:51,829
is combine them by using the extend
method, and that's another one of the

12

00:00:51,829  -->  00:00:55,680
operations in the mutable sequence types
table that we were looking at previously.

13

00:00:55,680  -->  00:01:00,260
Okay I'll move down to line four and
type even.extend, and in

14

00:01:00,260  -->  00:01:06,710
parentheses, odd. Then I'll add print
parentheses even, and if you run the

15

00:01:06,710  -->  00:01:13,249
program now, we've got a list containing
the values from one to nine, but note

16

00:01:13,249  -->  00:01:17,569
that they're not in order, though. So the
extend method takes all the items from

17

00:01:17,569  -->  00:01:22,490
the iterable that we pass it, and adds
them to the list. So in this case, on line

18

00:01:22,490  -->  00:01:28,039
four, we pass the list odd to the extend
method. That adds each item from odd to

19

00:01:28,039  -->  00:01:34,039
even. To sort the list, we call it sort
method. On line seven, I'm going to type

20

00:01:34,039  -->  00:01:39,560
even.sort
parentheses, and let's print parentheses

21

00:01:39,560  -->  00:01:45,529
even again to see what the list looks
like after the sort. Run the program, and

22

00:01:45,529  -->  00:01:50,240
you can see now the list is sorted. The
sort method has two key arguments that

23

00:01:50,240  -->  00:01:54,349
we can use. One of those won't make sense
until we've covered functions, so I'll

24

00:01:54,349  -->  00:01:58,459
come back to it later. I will discuss
keyword arguments in more detail, in the

25

00:01:58,460  -->  00:02:04,800
section on functions. The reverse
argument is used to sort in reverse order.

26

00:02:04,800  -->  00:02:10,840
So what we can do, in parentheses
on line seven, we can type reverse equals

27

00:02:10,849  -->  00:02:15,829
true with a capital T. This time when I run
the program, we'll see that the list is

28

00:02:15,829  -->  00:02:19,010
sorted in reverse order. You can see
it's nine, eight, seven, six, five, four, three,

29

00:02:19,010  -->  00:02:25,370
two, one. Now note here that the list has
been changed. We didn't get a new list

30

00:02:25,370  -->  00:02:30,319
created - the contents of even have been
rearranged. Now that can be important

31

00:02:30,319  -->  00:02:34,970
when dealing with very large lists. The
items in the list are sorted without

32

00:02:34,970  -->  00:02:39,440
creating a copy of the list. In the next
video, we'll see another way to sort

33

00:02:39,440  -->  00:02:44,180
things that does create a copy. Now if
your list is several gigabytes in size, for

34

00:02:44,180  -->  00:02:48,840
example, and you have to create a copy to
sort it, you could run out of memory.

35

00:02:48,840  -->  00:02:54,200
The sort method doesn't create a copy of the
list - it rearranges the items in the list.

36

00:02:54,200  -->  00:02:58,850
You'll also see this technique described
as sorting the list in place. Remember

37

00:02:58,850  -->  00:03:03,290
that lists are mutable and their
contents can be changed. That explains

38

00:03:03,290  -->  00:03:07,220
the behavior we get, after making a
couple of changes to our code. What I'm

39

00:03:07,220  -->  00:03:12,080
going to do is bind another variable to
the list and print it out. So after the

40

00:03:12,080  -->  00:03:17,959
first print there on line 5, down to line
6, I'm going to type another underscore

41

00:03:17,959  -->  00:03:26,480
even equals even, and print parentheses
another underscore even. Then we'll leave

42

00:03:26,480  -->  00:03:34,800
the code on lines 9 and 10 to sort and
print out the values.

43

00:03:34,800  -->  00:03:38,680
So I can see that when we run the program we get the same list printed out twice. That's our first

44

00:03:38,690  -->  00:03:43,100
two lines of output. Now there shouldn't
be any surprises if I print another even

45

00:03:43,100  -->  00:03:46,670
at the end of the program, which I'll do
now, and the code for that on line 11,

46

00:03:46,670  -->  00:03:51,500
print parentheses another underscore even.
So make sure you understand what that

47

00:03:51,500  -->  00:03:56,150
will print before running the program.
Now if you're not sure, then review the

48

00:03:56,150  -->  00:03:59,870
earlier videos in this section. The ones
titled Mutable objects and How many

49

00:03:59,870  -->  00:04:05,380
lists are there. Run the program, which
I'll do now, to see if you were right.

50

00:04:05,380  -->  00:04:09,040
When we print another underscore even,
that's also sorted in reverse order.

51

00:04:09,040  -->  00:04:13,220
That's because there's only one list and
we mutated the list by sorting it on

52

00:04:13,220  -->  00:04:18,530
line 9. If that's not clear, again review
those earlier videos in this section of

53

00:04:18,530  -->  00:04:21,620
the course.
In the next video we'll have a quick

54

00:04:21,620  -->  00:04:25,460
look at the documentation about Pythons
built-in functions, and see another way

55

00:04:25,460  -->  00:04:29,710
to sort things. See you in the next video.
