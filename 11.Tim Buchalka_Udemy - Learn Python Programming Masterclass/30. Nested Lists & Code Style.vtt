WEBVTT
1
00:00:05.290 --> 00:00:09.220
Let's look at nested lists and then
go into more detail on code style.

2
00:00:10.510 --> 00:00:16.760
Earlier, we concatenated lists of even and odd numbers,
and that produced a new list called numbers,

3
00:00:16.780 --> 00:00:21.910
With all the items from both lists. Let's go
back to that earlier file, number_lists.py.

4
00:00:26.170 --> 00:00:34.420
And we're going to delete all the code after line 7.
Alright, so at line 5, we concatenate even

5
00:00:34.420 --> 00:00:38.200
and odd. Run the program, just to remind ourselves of what it did.

6
00:00:39.130 --> 00:00:39.790
What it does.

7
00:00:40.630 --> 00:00:42.010
Hopefully that was fairly straightforward.

8
00:00:42.040 --> 00:00:44.320
But see if you can guess what this code will do.

9
00:00:44.350 --> 00:00:46.050
I'm going to make a change here.

10
00:00:46.220 --> 00:00:51.730
Firstly, I'll surround even and odd in square brackets,
but then I'm gonna change the plus,

11
00:00:53.580 --> 00:00:55.770
and make that a comma instead.

12
00:00:56.380 --> 00:00:57.780
So what do you think the output will be?

13
00:00:58.110 --> 00:01:02.340
Pause the video and come back when you think you've
worked it out, without running the program.

14
00:01:05.180 --> 00:01:07.530
So let's run the program to see what it does produce.

15
00:01:09.390 --> 00:01:15.480
And you can see what it's done there, in fact, it's
produced a list containing two lists.  I've deliberately

16
00:01:15.480 --> 00:01:17.970
been a bit vague, when talking about items in the list.

17
00:01:18.360 --> 00:01:21.400
I haven't said things like list of strings or list of ints.

18
00:01:22.020 --> 00:01:26.760
You can store either of those types in a list,
but you can store just about anything else as well.

19
00:01:27.720 --> 00:01:31.640
Here, the items in our numbers list are themselves lists.

20
00:01:32.940 --> 00:01:39.600
This next example, I'm about to type in, uses a for loop
to print each list, then an inner for loop to print

21
00:01:39.600 --> 00:01:41.430
the contents of each inner list.

22
00:01:42.060 --> 00:01:43.470
So let's start with some code.

23
00:01:45.110 --> 00:01:50.520
So I'm gonna type for number_list in numbers

24
00:01:50.620 --> 00:01:52.110
So I'm working on the outer loop at the moment.

25
00:01:54.350 --> 00:01:56.070
Then on line 9, just going to print

26
00:01:56.990 --> 00:01:58.260
number_list.

27
00:02:01.630 --> 00:02:02.300
So in the outer loop,

28
00:02:02.390 --> 00:02:03.800
We iterate over numbers.

29
00:02:04.550 --> 00:02:08.090
number_list gets each of the members of numbers.

30
00:02:08.180 --> 00:02:10.160
So it's bound to each of the two lists,

31
00:02:10.250 --> 00:02:14.700
in turn. Then we can use an inner loop, to iterate over those two lists.

32
00:02:14.720 --> 00:02:15.440
So let's do that.

33
00:02:16.490 --> 00:02:23.120
So under the print on line 10, for value in number_list

34
00:02:24.280 --> 00:02:26.180
colon, print(value).

35
00:02:31.920 --> 00:02:36.570
value was bound to each of the even numbers, first time
around the loop, then to each of the odd numbers.

36
00:02:37.310 --> 00:02:38.010
Run the program.

37
00:02:40.980 --> 00:02:45.730
We've confirmed that that does happen. So we can see the
first there, the even list and the four individual

38
00:02:45.900 --> 00:02:49.010
values from that list and the same for the odd list, down the bottom.

39
00:02:49.450 --> 00:02:51.070
So this is an important concept.

40
00:02:51.430 --> 00:02:53.380
So let's see another example to see it in action.

41
00:02:53.900 --> 00:02:59.590
This one will also show how to create nested lists using a literal.
To do this, we need to create a new file,

42
00:02:59.710 --> 00:03:01.100
new python file, called spam.

43
00:03:01.280 --> 00:03:02.080
Let's go ahead and do that.

44
00:03:09.600 --> 00:03:14.380
So I'm pasting the list that we'll be using, but don't try to
type it in just yet, because it won't all fit on my screen.

45
00:03:14.890 --> 00:03:17.980
I'm going to refer back to that Python style guide, PEP 8, in a moment.

46
00:03:18.420 --> 00:03:19.570
First, though, Here's the list.

47
00:03:20.050 --> 00:03:20.970
Alright. So that's horrible.

48
00:03:21.010 --> 00:03:22.240
I'll go back to the start of the line.

49
00:03:23.260 --> 00:03:25.150
It really is hard for you to read on the video.

50
00:03:25.180 --> 00:03:27.820
And it's also hard to me to work with in my IDE.

51
00:03:28.420 --> 00:03:29.650
I'm going to switch to my browser.

52
00:03:30.250 --> 00:03:32.860
Let's see what the Python style guide has to say about lists.

53
00:03:33.270 --> 00:03:38.470
Now, if you haven't bookmarked the style guide page yet, just type PEP 8 into Google.

54
00:03:41.320 --> 00:03:42.990
That first result here Will take you,

55
00:03:43.030 --> 00:03:45.060
or should take you, to the style guide.

56
00:03:46.400 --> 00:03:52.460
Once you're there, use your browser's search, which is
usually Ctrl-F (Cmd-F on a Mac) and search for list.

57
00:03:53.500 --> 00:03:54.980
This first entry here is the one we want.

58
00:03:56.210 --> 00:03:58.490
I'm gonna close down that search pane, to make a bit more space.

59
00:03:59.330 --> 00:04:01.880
So make sure you get to the first occurrence of list, as I've done here.

60
00:04:02.240 --> 00:04:04.310
The second one is talking about an argument list.

61
00:04:04.550 --> 00:04:06.320
So there's two style guides shown here.

62
00:04:06.350 --> 00:04:09.860
And in both cases, the opening bracket is at the end of the line.

63
00:04:10.690 --> 00:04:13.370
The items in the construct are each on a separate line.

64
00:04:13.900 --> 00:04:17.630
Where the two examples differ is in the position of the closing bracket.

65
00:04:18.230 --> 00:04:21.530
Now, it can be either indented to the same level as the start of the items.

66
00:04:21.830 --> 00:04:23.510
That's the example in the first box.

67
00:04:23.900 --> 00:04:25.920
Or it can appear against the left margin.

68
00:04:26.330 --> 00:04:27.710
And that's the second example.

69
00:05:29.480 --> 00:05:30.020
Right, so let's go back to our code.

70
00:05:31.790 --> 00:05:34.820
Modern IDEs often have a way to reformat your code for you.

71
00:05:35.150 --> 00:05:38.420
It's not always perfect, but let's see what IntelliJ makes of that long line.

72
00:05:38.790 --> 00:05:42.410
So you can find the reformat code option in the code menu.

73
00:05:42.680 --> 00:05:47.990
This one down here, there's also a shortcut,
which you can see, that's Ctrl-Alt-L on windows.

74
00:05:48.210 --> 00:05:49.580
And it's actually the same for Linux.

75
00:05:50.420 --> 00:05:52.430
I believe it's Cmd-Alt-L for Mac.

76
00:05:52.460 --> 00:05:57.230
But you can check that by going to the code menu,
and you'll see the relevant keyboard shortcut.

77
00:05:57.900 --> 00:06:02.290
Now be careful on some Linux distros.
Ubuntu versions, before 18,

78
00:06:02.690 --> 00:06:04.550
use that key combination to lock the screen.

79
00:06:05.690 --> 00:06:08.990
So I'm going to choose that option to reformat
the screen, to reformat the code, rather.

80
00:06:09.620 --> 00:06:15.290
And you can see that we've got an improvement there,
but it still doesn't conform to the style guide.

81
00:06:15.770 --> 00:06:20.780
The IDE's concentrated on keeping the line lengths
short, but it hasn't put each list on a new line.

82
00:06:21.290 --> 00:06:23.840
So what we'll do is split the list up and then reformat the code again.

83
00:06:24.280 --> 00:06:27.680
I'm gonna add a long break here after the first left square bracket.

84
00:06:28.540 --> 00:06:31.350
I'm also going to add one just before the last

85
00:06:31.400 --> 00:06:32.690
right square bracket.

86
00:06:34.020 --> 00:06:37.920
And then for each entry, each list effectively, after the comma,

87
00:06:38.280 --> 00:06:40.700
I'm going to press ENTER to put it on a separate line.

88
00:06:41.100 --> 00:06:41.850
So this one here.

89
00:06:44.210 --> 00:06:48.650
You can see me going through, doing it to each one,
making sure that each is on a separate line.

90
00:06:49.960 --> 00:06:51.660
You can see we've got a list on each line.

91
00:06:52.030 --> 00:06:53.440
I'm going to use the reformat option again.

92
00:06:56.030 --> 00:06:59.550
You saw that I needed to do that,
because things still weren't quite right.

93
00:07:00.120 --> 00:07:01.650
There are some that weren't indented correctly.

94
00:07:02.340 --> 00:07:07.380
So notice now that the first item starts on line
2 rather than immediately after the opening left

95
00:07:07.380 --> 00:07:08.460
square bracket on line one.

96
00:07:08.970 --> 00:07:11.730
Also note that each item is also indented 4 spaces.

97
00:07:12.240 --> 00:07:16.650
So I suggest you always start a new line for
the first item, if it's enclosed in brackets.

98
00:07:17.100 --> 00:07:18.030
If it's something like a list,

99
00:07:18.030 --> 00:07:20.820
in other words.  Now to see what I said you shouldn't do,

100
00:07:21.090 --> 00:07:22.830
let's open up buy_computer.

101
00:07:26.810 --> 00:07:30.980
So notice that each item lines up with start of computer on line 1.

102
00:07:31.640 --> 00:07:33.800
So what you shouldn't do is something like this.

103
00:07:41.750 --> 00:07:46.130
Under indenting, which we're doing here, the other
items, is only acceptable if you don't have an item

104
00:07:46.130 --> 00:07:50.060
immediately after the opening bracket,
so I'll reformat the code there.

105
00:07:52.110 --> 00:07:53.910
And we'll go back to spam.py again.

106
00:07:56.100 --> 00:07:57.360
So you may have noticed, in the PEP 8

107
00:07:57.460 --> 00:08:00.860
guide we were just looking at, that the
last item in the list ended with a comma.

108
00:08:01.550 --> 00:08:04.580
I'm going to add a comma here, to our last entry on line 9.

109
00:08:05.940 --> 00:08:07.730
Now, the comma is technically redundant.

110
00:08:08.270 --> 00:08:11.840
Python will ignore it, but it can make the list easier to work with.

111
00:08:12.410 --> 00:08:15.140
We can add a new item to the list,
without having to edit that last line.

112
00:08:15.850 --> 00:08:18.290
Now you can also rearrange the list without getting an error.

113
00:08:19.110 --> 00:08:21.890
So making sure that my cursor is positioned on line 9, which it is.

114
00:08:22.370 --> 00:08:26.900
I can do an Alt-Shift-Up to move that line up in the lists.

115
00:08:27.570 --> 00:08:31.080
Now, the code's still valid, which it
wouldn't have been without that extra comma.

116
00:08:31.490 --> 00:08:36.020
I know it's a small thing, but if you see redundant
commas at the end of lists and other structures,

117
00:08:36.350 --> 00:08:37.130
now you know why.

118
00:08:37.800 --> 00:08:42.020
It's also discussed further in the
"When to use trailing commas" section of the style guide.

119
00:08:42.560 --> 00:08:47.690
In fact, Google's style guide recommends always
including that trailing comma, as long as the last item

120
00:08:47.750 --> 00:08:50.390
isn't immediately before a closing bracket.

121
00:08:51.290 --> 00:08:54.940
Let's swing back to the browser, noting those last commas there,

122
00:08:55.260 --> 00:08:59.720
that I was talking about. Ok, I'll open a new tab,
and I'll paste in a link to the Google style guide.

123
00:09:00.660 --> 00:09:02.180
So you might want to bookmark that as well.

124
00:09:02.330 --> 00:09:05.480
And I've stored the link in the resources
section for this video as well.

125
00:09:06.050 --> 00:09:07.250
Very useful document to look at.

126
00:09:07.770 --> 00:09:08.000
All right.

127
00:09:08.000 --> 00:09:11.480
So moving on, in the next video we're
going to look at processing this list.

128
00:09:11.720 --> 00:09:12.830
See you in the next video.
