1

00:00:04,680  -->  00:00:10,160
Alright, so let's continue now with our
mutable.py file, from the last video.

2

00:00:10,160  -->  00:00:14,460
I want to start with a question here - how
many lists are there in this program?

3

00:00:14,469  -->  00:00:18,189
If you're not sure, keep watching. If you
think you can work out the answer, then

4

00:00:18,189  -->  00:00:22,060
pause the video and come back when you
have an answer. Okay, the question doesn't

5

00:00:22,060  -->  00:00:25,300
make much sense. Another way you could
have asked it is, what will be the

6

00:00:25,300  -->  00:00:28,840
contents of another_list? So
pause the video and come back when you

7

00:00:28,840  -->  00:00:32,010
have an answer to that question.

8

00:00:34,039  -->  00:00:38,449
So did you get the answer? Well there's
only one list, and we can confirm that by

9

00:00:38,449  -->  00:00:43,219
printing another_list. So let's
do that on line 15: print parentheses and

10

00:00:43,219  -->  00:00:49,699
another_list. So if we run this now, another_list also

11

00:00:49,699  -->  00:00:54,110
contains cookies, as you can see. So we've
got one list and we've added cookies to it

12

00:00:54,110  -->  00:00:59,180
on line 12 - let's just bring the rest of
the program into view. It doesn't matter

13

00:00:59,180  -->  00:01:03,080
whether we refer to our list using
shopping_list or another_list -

14

00:01:03,080  -->  00:01:07,190
both names have been bound
to the same object, and that object now

15

00:01:07,190  -->  00:01:11,780
has cookies added to it. To labor the
point, let's create a few more references

16

00:01:11,780  -->  00:01:19,369
to our shopping list. I'm gonna start on line 17.
I'm going to type a equals b equals c

17

00:01:19,369  -->  00:01:29,450
equals d equals e equals f equals
another_list. Python allows us

18

00:01:29,450  -->  00:01:32,540
to do that - chain assignments, as I've
done on line 17 -

19

00:01:32,540  -->  00:01:36,880
and that's actually equivalent to the
code I'm about to paste in here,

20

00:01:37,330  -->  00:01:41,360
absolutely identical to that code as
well. But obviously, that's a lot more

21

00:01:41,360  -->  00:01:44,989
typing, so I'm going to delete those
lines because line 17 does the same

22

00:01:44,989  -->  00:01:51,200
thing and it's a lot more concise. So all
six of those names; a, b, c, d, e and f,

23

00:01:51,200  -->  00:01:55,250
are now bound to the same object, as
another_list. That means we've

24

00:01:55,250  -->  00:01:59,179
now got eight references to the same
list. There's still only one list though.

25

00:01:59,179  -->  00:02:03,440
We haven't copied the list -
we've just bound more names to it. We can

26

00:02:03,440  -->  00:02:07,900
use any of those names to refer to the
list, so let's type in some more code.

27

00:02:07,900  -->  00:02:14,379
So on line 18, print parentheses, with a in
the parentheses, line 20, print

28

00:02:14,380  -->  00:02:23,720
parentheses double quotes Adding cream,
line 21, b.append parentheses

29

00:02:23,720  -->  00:02:30,980
double quotes cream - do that in lowercase -
line 22, print c in parentheses, line 23,

30

00:02:30,980  -->  00:02:38,690
print d in parentheses. If we run the
program now, you can see we've got cream

31

00:02:38,690  -->  00:02:42,580
in the list - no matter which of the names
we use to refer to it, we've got cream,

32

00:02:42,580  -->  00:02:49,440
as you can see there. I used b to append cream
to the list, on line 21.

33

00:02:49,440  -->  00:02:54,960
When we print c and d on lies 22 and 23,
we get the same list printed with cream.

34

00:02:54,960  -->  00:02:57,840
So try printing out the other names to
check that they're all the same.

35

00:02:57,840  -->  00:03:01,940
Pause the video and come back when you've
tried that. So there's still only one

36

00:03:01,940  -->  00:03:06,410
list with eight aliases, that we can use
to refer to it. Now having eight names

37

00:03:06,410  -->  00:03:09,830
for the same object, isn't probably
something you'd often do. That's a bit

38

00:03:09,830  -->  00:03:14,060
excessive, but having two or three
aliases can be quite common. You'll see

39

00:03:14,060  -->  00:03:19,010
why that's useful later, when we look at
lists that contain lists. Alright, so I've

40

00:03:19,010  -->  00:03:21,520
promised that we'd look at other things
that we can do with lists,

41

00:03:21,520  -->  00:03:25,420
and we'll start on that in the next video.
