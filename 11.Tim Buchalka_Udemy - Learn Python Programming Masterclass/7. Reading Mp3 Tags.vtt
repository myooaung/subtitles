WEBVTT
1
1

00:00:05.460  -->  00:00:09.610
In this video, we're going to take a different approach to getting a list of all the songs for a particular
2

2

00:00:09.610  -->  00:00:11.580
album or artist.
3

3

00:00:11.590  -->  00:00:17.080
So one problem with the previous approach, which relied on the file and directory names, is that you may
4

4

00:00:17.080  -->  00:00:21.790
not have such a neatly organized file structure. And if you get your music from different sources,
5

5

00:00:21.820  -->  00:00:25.740
the file names might well not use the same pattern, for example. 
6

6

00:00:25.910  -->  00:00:30.370
So although the last couple of videos have been great for demonstrating how to work with files and
7

7

00:00:30.370  -->  00:00:31.140
directories,
8

8

00:00:31.390  -->  00:00:36.790
that's not necessarily the best way to achieve the original objective, and that was to populate the music
9

9

00:00:36.790  -->  00:00:38.830
database from a record collection.
10

10

00:00:38.830  -->  00:00:43.930
So in this video, we're going to read the ID3 tags from the mp3 files on the disk.
11

11

00:00:44.040  -->  00:00:49.260
Now in order to do that, we're going to need a generator that will return the full path and name of each
12

12

00:00:49.480  -->  00:00:50.410
mp3 file,
13

13

00:00:50.530  -->  00:00:51.780
so that's your challenge.
14

14

00:00:53.490  -->  00:00:59.100
Alright, so the challenge is to create a generator that will return the complete file name of all
15

15

00:00:59.110  -->  00:01:05.430
mp3 files. Now the generator should start at the specified directory, the start, which will be provided
16

16

00:01:05.430  -->  00:01:08.130
as an argument to the generator function.
17

17

00:01:08.130  -->  00:01:13.170
Now the filenames should include the full path from the specified start directory.
18

18

00:01:13.290  -->  00:01:16.620
So it should return a relative path.
19

19

00:01:16.620  -->  00:01:20.140
Now it's a good idea to make your generator function a bit more generic,
20

20

00:01:20.160  -->  00:01:23.490
so that it can handle files with any extension.
21

21

00:01:23.490  -->  00:01:27.660
So pass the extension as a second parameter to that function.
22

22

00:01:27.660  -->  00:01:29.240
Now as an optional extra,
23

23

00:01:29.310  -->  00:01:35.680
you could make the paths absolute so that they specify the filename from the root of the drive or volume.
24

24

00:01:35.680  -->  00:01:39.390
Check out the documentation for the os module if you want to do that.
25

25

00:01:39.440  -->  00:01:45.270
Now if you haven't got any real mp3 files ,you can use the music directory from the previous videos and
26

26

00:01:45.270  -->  00:01:48.850
search for emp3 files instead of mp3 files.
27

27

00:01:49.030  -->  00:01:50.370
Right so that's the challenge.
28

28

00:01:50.370  -->  00:01:51.450
See here you go with it.
29

29

00:01:51.450  -->  00:01:54.610
Pause the video and come back when you're ready to go through my solution.
30

30

00:01:56.820  -->  00:02:01.540
Alright, so the solution to this challenge is very similar to what we've already done.
31

31

00:02:01.740  -->  00:02:06.890
So we're going to use the os.walk up generator to walk the directories from start, and then we're
32

32

00:02:06.890  -->  00:02:09.640
going to filter the files that match the extension.
33

33

00:02:09.640  -->  00:02:10.840
So I'm going to create a new filem
34

34

00:02:14.260  -->  00:02:15.680
and I'm going to call this one
35

35

00:02:17.480  -->  00:02:18.970
mp3scan.py.
36

36

00:02:22.710  -->  00:02:31.150
We're going to start by importing os. We're going to import fnmatch, then we're going to start -
37

37

00:02:31.590  -->  00:02:41.460
first I'll create our first function - and we'll call this one find_music parenthesis start comma
38

38

00:02:41.470  -->  00:02:45.900
space extension, end parenthesis and a colon.
39

39

00:02:46.150  -->  00:02:55.360
Then we're going to type for path comma space directories comma space files in os.walk, start in parentheses,
40

40

00:02:55.900  -->  00:03:06.560
colon for file in fnmatch.filter files comma space,
41

41

00:03:06.750  -->  00:03:10.720
a single quote. Then we want star dot,
42

42

00:03:10.870  -->  00:03:16.930
then we want left and right curly braces, end a single quote, or ending single quote I should say, dot format
43

43

00:03:17.860  -->  00:03:25.570
extension colon, after closing off the two parentheses, right parentheses. Then we're gonna do yield,
44

44

00:03:25.690  -->  00:03:32.400
os.path.join, and in parentheses, path comma space file,
45

45

00:03:35.010  -->  00:03:41.560
and let's actually try this out. So I'm going to type for f, on line 11, in find_music
46

46

00:03:44.590  -->  00:03:52.770
and single quote music single quote comma space emp3 single quotes and then end the parentheses,
47

47

00:03:52.820  -->  00:04:01.050
the right parentheses. And actually we want to do a print, f in parentheses, and on the end of that line, of course, we need a colon.
48

48

00:04:01.520  -->  00:04:08.110
OK. So in the previous video, we passed the Asterix, the wildcard character, as part of the parameter string.
49

49

00:04:08.250  -->  00:04:15.070
So here what I've done, is I've decided - this was on line 7 - decided to restrict the format by including
50

50

00:04:15.070  -->  00:04:17.650
the Asterix in the filter pattern.
51

51

00:04:17.670  -->  00:04:21.340
Now I guess you could make arguments for and against each approach.
52

52

00:04:21.340  -->  00:04:26.950
In this case, the caller doesn't have to worry about the format of the pattern - I just passed the extension
53

53

00:04:26.950  -->  00:04:28.030
as an argument.
54

54

00:04:28.030  -->  00:04:33.580
It does mean that find_music isn't as flexible as it could be, though. It only allows the file extension to be
55

55

00:04:33.610  -->  00:04:34.380
filtered.
56

56

00:04:34.960  -->  00:04:37.440
But you've already seen two different approaches to filtering.
57

57

00:04:37.450  -->  00:04:41.010
You can choose whichever is more appropriate for your particular application.
58

58

00:04:41.260  -->  00:04:46.320
Alright, so that's returning all the file names relative to our current working directory, so they
59

59

00:04:46.320  -->  00:04:47.540
all start with music.
60

60

00:04:47.860  -->  00:04:53.870
But if we want absolute paths, we'd use the os.path.abspath function.
61

61

00:04:53.950  -->  00:04:55.790
So let's actually just try running that 
62

62

00:04:55.950  -->  00:05:01.820
first, before we do that. You can see that we're getting our output there. That's working alright so I'll stop that.
63

63

00:05:01.840  -->  00:05:03.590
So again, talking about absolute paths,
64

64

00:05:03.590  -->  00:05:04.910
how would we deal with that?
65

65

00:05:05.240  -->  00:05:07.430
Well there's actually a function we can use for that.
66

66

00:05:07.430  -->  00:05:11.720
So what we'll do is, after the for loop, or the for file 
67

67

00:05:11.720  -->  00:05:19.620
in fnmatch.filter line, we'll put, or after I should say, absolute_path is equal to
68

68

00:05:19.690  -->  00:05:22.590
os.path.abspath -
69

69

00:05:23.030  -->  00:05:28.040
absolute path is what it stands for - path, and then we don't need to change the next line at all.
70

70

00:05:28.280  -->  00:05:29.240
So we're creating, 
71

71

00:05:33.230  -->  00:05:34.580
we're creating absolute path
72

72

00:05:34.590  -->  00:05:35.370
on line 8,
73

73

00:05:38.590  -->  00:05:42.440
and then we use it in yielded
74

74

00:05:42.450  -->  00:05:42.990
values.
75

75

00:05:45.550  -->  00:05:47.880
So let's go ahead and change that. Instead of path
76

76

00:05:47.880  -->  00:05:58.820
now - that of course, should be absolute path. So if we actually run this just to see that it does work. I'm gonna go up to the top there -
77

77

00:05:58.820  -->  00:06:01.560
you can see I've got quite a long path on my Mac,
78

78

00:06:01.600  -->  00:06:06.840
but you can see that, obviously, that path is working. We've got an absolute path now and the tree to each file.
79

79

00:06:06.920  -->  00:06:08.430
So I'll just stop that.
80

80

00:06:08.560  -->  00:06:14.440
Alright, so we now get the full path of each matching file, and that could be more useful if we wanted
81

81

00:06:14.440  -->  00:06:20.360
to store the paths in a database so that our music player program could play the songs, for example.
82

82

00:06:20.370  -->  00:06:24.040
Notice how we didn't explicitly create a generator object either.
83

83

00:06:24.370  -->  00:06:30.940
You can just use your generators in a for loop and take care of creating the generator, and the for
84

84

00:06:30.940  -->  00:06:35.130
takes care of creating the generator and repeatedly calling next on it.
85

85

00:06:35.210  -->  00:06:39.500
Now if you did create the generator object and loop over it, though, that's also fine.
86

86

00:06:39.790  -->  00:06:42.870
So you could've done something like this:
87

87

00:06:43.060  -->  00:06:49.990
so my_music_files is equal to find_music,
88

88

00:06:52.810  -->  00:06:58.030
music in single quotes, comma space and emp3.
89

89

00:06:58.120  -->  00:07:02.110
So if you did it that way, that would be entirely acceptable as well.
90

90

00:07:02.200  -->  00:07:05.360
And obviously, if you did do it that way, then you probably changed the loop there so it's for f 
91

91

00:07:05.380  -->  00:07:15.550
in my_music_files. We can run that and, obviously, we get the same result.
92

92

00:07:15.560  -->  00:07:20.020
So basically, I'm saying that way is also fine - we get the same results each way.
93

93

00:07:20.060  -->  00:07:22.760
Alright, so that's the challenge completed.
94

94

00:07:22.760  -->  00:07:27.830
Now the reason for creating that generator, is so that we can loop through all our mp3 files
95

95

00:07:28.160  -->  00:07:30.830
and get the song details from the tags.
96

96

00:07:30.830  -->  00:07:35.360
Now in case you're not familiar with tags and music files, they're actually how music players are able
97

97

00:07:35.360  -->  00:07:40.610
to display the song title, or even an image of the album, of the album cover.
98

98

00:07:40.610  -->  00:07:46.470
Now there's a standard detailing of the ID3 tags used in mp3 files.
99

99

00:07:46.550  -->  00:07:47.890
So I'm just going to open a browser.
100

100

00:07:48.050  -->  00:07:49.210
Let's just have a quick look.
101

101

00:07:53.640  -->  00:07:59.100
So this Web site contains everything you need to, everything you'll need if you wanted to write your own
102

102

00:07:59.100  -->  00:08:01.080
programs to read and write the tags.
103

103

00:08:01.080  -->  00:08:05.130
So if you want to do that, have a good read of the information on this site to find out the format of the
104

104

00:08:05.130  -->  00:08:08.510
data, that ultimately, you're going to be dealing with.
105

105

00:08:08.630  -->  00:08:11.980
We're not gonna delve into the binary format of mp3 files,
106

106

00:08:12.120  -->  00:08:17.210
but one question we get asked often is, why do we need to read and write binary data in Python.
107

107

00:08:17.750  -->  00:08:23.420
Well, reading the ID3 tags from the music files is one example where you'd need to do that.
108

108

00:08:23.550  -->  00:08:30.450
And in fact, if any of your music files were missing some tags such as the artist or song title, then
109

109

00:08:30.450  -->  00:08:35.450
you actually could use the earlier technique and attempt to work out the correct values from the file
110

110

00:08:35.450  -->  00:08:36.090
names.
111

111

00:08:36.240  -->  00:08:40.230
Your program could then write the tags back to the file with the correct files added.
112

112

00:08:40.230  -->  00:08:45.090
Now working with a binary file format to deal with ID3 tags is more fiddly than difficult,
113

113

00:08:45.240  -->  00:08:50.670
but fortunately, Ned Batchelder has created a Python 2 module that does a pretty good job of
114

114

00:08:50.670  -->  00:08:51.200
reading
115

115

00:08:51.270  -->  00:08:56.730
the most common tags. Now there are other Python libraries, and most of them will also let you
116

116

00:08:56.730  -->  00:09:02.760
write tags as well as reading them. Now in the case of Ned's module, it will only read the tags, but that's a good
117

117

00:09:02.760  -->  00:09:07.710
thing because there's no chance of destroying your music collection by working with this video.
118

118

00:09:07.740  -->  00:09:12.500
In other words, your mp3 files will be open for reading only, so they'll be quite safe.
119

119

00:09:12.720  -->  00:09:19.800
Now if you're interested in his Python program, id3reader.py, I'm gonna put the link to this as well and
120

120

00:09:20.190  -->  00:09:27.880
you can go and grab it there - paste it as you can see there. That loads up. Now if you're using Python 2.7,
121

121

00:09:27.980  -->  00:09:33.520
you can download the dot py file from the link on that page and copy it into the project directory.
122

122

00:09:33.800  -->  00:09:37.200
Now unfortunately, it doesn't work as Python 3.
123

123

00:09:37.220  -->  00:09:43.040
So what we've done is we've actually produced a Python 3 version from Ned's original code.
124

124

00:09:43.130  -->  00:09:46.740
So if you're using Python 3, download 
125

125

00:09:46.740  -->  00:09:49.080
id3reader underscore
126

126

00:09:49.130  -->  00:09:56.030
p3.py from the resources section of this video, and place that in your project directories, itself.
127

127

00:09:56.450  -->  00:09:59.600
Now using the id3reader's module is easy.
128

128

00:09:59.660  -->  00:10:05.900
You just really create a new object and provide it with a path to an mp3 file and we have to obviously
129

129

00:10:05.900  -->  00:10:07.690
import the module first, of course.
130

130

00:10:08.820  -->  00:10:10.130
Let's go back to Intellij -
131

131

00:10:10.130  -->  00:10:17.190
I'm going to actually paste that code in. I'm going to create the new file - New, Python File - and I'm going
132

132

00:10:17.190  -->  00:10:19.850
to call this one, which I mentioned, id3reader
133

133

00:10:19.900  -->  00:10:24.380
underscore p3.
134

134

00:10:24.420  -->  00:10:29.210
This is the Python 3 version of the file - and that didn't work.
135

135

00:10:29.310  -->  00:10:34.110
Just let me copy this. OK, try again. That's better.
136

136

00:10:34.110  -->  00:10:38.040
It looks like it's actually pasted in correctly this time, and again, you can grab this from the resources
137

137

00:10:38.040  -->  00:10:39.290
section.
138

138

00:10:39.340  -->  00:10:44.750
Alright, so that's the file. If we go back to our example here, our mp3scan,
139

139

00:10:44.760  -->  00:10:48.010
we just need to create a new object and provide it with a path to an mp3
140

140

00:10:48.010  -->  00:10:52.090
file. It'll actually do the rest, but obviously to start off with,
141

141

00:10:52.150  -->  00:10:53.500
you've to import the module first.
142

142

00:10:53.520  -->  00:10:54.520
Let's go to do that.
143

143

00:10:54.600  -->  00:11:01.930
So we're going to id3reader_ p3 as id3reader -
144

144

00:11:02.520  -->  00:11:09.570
this is the Python 3 version. Then what we do is, down here under our for loop,
145

145

00:11:09.630  -->  00:11:13.260
we put id3r is equal to id3reader
146

146

00:11:13.320  -->  00:11:22.090
dot Reader with a capital R, then f in double quotes, in parentheses rather. Let's do a print.
147

147

00:11:22.140  -->  00:11:31.580
Let's expand the print. We'll do a print double quotes, in parentheses artist, colon space,
148

148

00:11:31.730  -->  00:11:35.730
left and right curly braces, comma space, Album with a capital A,
149

149

00:11:35.820  -->  00:11:43.670
left and right curly braces, space after the comma, Track colon space,
150

150

00:11:43.790  -->  00:11:46.800
left and right curly braces comma space,
151

151

00:11:46.800  -->  00:11:53.550
Song with a capital S colon, left and right curly braces after the space and then double quote dot format,
152

152

00:11:55.050  -->  00:11:57.790
but in the format we'll start with id3
153

153

00:11:57.840  -->  00:11:59.000
r
154

154

00:11:59.050  -->  00:12:01.340
dot get_value.
155

155

00:12:01.760  -->  00:12:07.240
The first one's going to be performer in single quotes, lower case, comma,
156

156

00:12:07.290  -->  00:12:16.020
then it's id3r.get_value - dot get underscore value - parentheses single quote album
157

157

00:12:18.450  -->  00:12:20.170
id3r dot
158

158

00:12:20.920  -->  00:12:28.980
get_value parentheses and two single quotes, track and comma. Then the last one will be id3r dot
159

159

00:12:29.040  -->  00:12:32.460
get_value parentheses and two single quotes, title. OK,
160

160

00:12:37.020  -->  00:12:42.040
so that should be it. That's pretty straightforward. Our generator takes care of getting the file names for us,
161

161

00:12:42.200  -->  00:12:47.960
and our main loop can focus on, then, using the id3reader module to read the tag information. Now
162

162

00:12:47.980  -->  00:12:50.250
we're going to get an error with this code when I run it,
163

163

00:12:50.380  -->  00:12:55.220
and that's because I'm pointing it to an emp3 file, and not at real
164

164

00:12:55.250  -->  00:13:01.610
mp3 files. So the emp3 files are just plain text and don't actually contain any tag information, which
165

165

00:13:01.870  -->  00:13:07.520
the id3reader module doesn't seem to handle too well. So I'll run it just to confirm but we should get
166

166

00:13:07.520  -->  00:13:08.610
an error here.
167

167

00:13:08.990  -->  00:13:13.110
Unsurprisingly, we do get one - an OSError, as you can see there, invalid argument.
168

168

00:13:13.310  -->  00:13:15.180
And again, that's not really surprising,
169

169

00:13:15.200  -->  00:13:20.120
and we shouldn't be trying to read id3 tags from small text files. But we really should handle that,
170

170

00:13:20.550  -->  00:13:25.650
and gracefully move onto the next file if we get an invalid one in the list.
171

171

00:13:25.670  -->  00:13:27.670
So that sounds like another good challenge.
172

172

00:13:28.920  -->  00:13:34.080
Alright, so the challenge is to modify the program to handle any exceptions that are raised by the
173

173

00:13:34.080  -->  00:13:35.830
id3reader module.
174

174

00:13:35.850  -->  00:13:40.970
So if an exception is found, record the file name in a list and move on to the next file.
175

175

00:13:41.190  -->  00:13:45.180
Then once the loop finishes, print out all the files that caused an error.
176

176

00:13:45.510  -->  00:13:46.820
So that's your challenge.
177

177

00:13:46.830  -->  00:13:47.610
So here you go with it.
178

178

00:13:47.610  -->  00:13:51.840
Pause the video and come back when you're ready to see my version of the solution.
179

179

00:13:51.840  -->  00:13:52.960
Pause the video now.
180

180

00:13:54.590  -->  00:13:59.250
Alright, so for my solution, I'm going to start by creating an empty list.
181

181

00:14:00.360  -->  00:14:04.520
And this is going to be to store the names of any problem files that we try to process.
182

182

00:14:04.520  -->  00:14:17.570
So I'm going to come down here, and put this on line 16 down here, on line 15 rather. So I'm going to type error_list
183

183

00:14:17.620  -->  00:14:20.010
equals left and right square braces -
184

184

00:14:20.270  -->  00:14:26.770
so adding an empty list, or creating an empty list. Then we've still got the next line there, that actually loops through.
185

185

00:14:27.110  -->  00:14:30.440
And what we need to do then is, under our for loop,
186

186

00:14:30.440  -->  00:14:34.500
we need to add a try. So try colon,
187

187

00:14:34.730  -->  00:14:39.370
then we want to put all this code, we want to indent it to the next level, like
188

188

00:14:39.520  -->  00:14:44.060
so. Then we want to add an except, so the except is going to be
189

189

00:14:47.110  -->  00:14:50.050
error_list.append f.
190

190

00:14:50.410  -->  00:14:56.380
Now in the videos on exception handling, I did suggest that they shouldn't generally catch all exceptions.
191

191

00:14:56.790  -->  00:15:00.270
Normally you should be specific and handle specific exceptions.
192

192

00:15:00.280  -->  00:15:01.680
Now there are always exceptions -
193

193

00:15:01.690  -->  00:15:03.350
pun intended - to any rule,
194

194

00:15:03.490  -->  00:15:06.450
and here we need to record any files that cause a problem,
195

195

00:15:06.550  -->  00:15:12.560
whatever the problem may be. In cases like this, it's valid to just catch every exception.
196

196

00:15:12.880  -->  00:15:17.970
If something goes wrong, we're recording the name of the file so that the user can investigate the problem.
197

197

00:15:17.970  -->  00:15:22.030
So catching all exceptions is actually acceptable in this case.
198

198

00:15:22.030  -->  00:15:25.570
Alright, so the last step now is just to print out any names in our error lists.
199

199

00:15:25.690  -->  00:15:28.170
So let's go ahead and do that.
200

200

00:15:29.470  -->  00:15:35.470
So we're going to do, down the bottom, for space error_list space in, or error underscore
201

201

00:15:35.480  -->  00:15:37.960
file, actually, in error_list
202

202

00:15:37.960  -->  00:15:46.360
colon, then print error_file.
203

203

00:15:46.360  -->  00:15:48.640
And if we run this program, we should find that
204

204

00:15:48.850  -->  00:15:54.940
we get every emp3 filename printed, which isn't surprising, as they're all invalid mp3 files
205

205

00:15:54.940  -->  00:15:58.890
But let's just confirm this - leave that a second to finish.
206

206

00:15:58.890  -->  00:16:04.940
And keep in mind also, that you can actually run this with real mp3 files and see how this actually works.
207

207

00:16:04.940  -->  00:16:10.520
so if you have got some of your own mp3 files, I'd suggest it's a good idea to actually go ahead and test
208

208

00:16:10.520  -->  00:16:10.720
that
209

209

00:16:10.730  -->  00:16:13.810
with those real mp3 files, just to confirm that this does actually work.
210

210

00:16:15.500  -->  00:16:20.310
Alright, so you can see here, we've got a list of all the files that were invalid, which is basically
211

211

00:16:20.310  -->  00:16:25.210
every file, again because of the emp3 not being a valid file.
212

212

00:16:25.290  -->  00:16:32.610
Now the other thing you might notice, though, is right at the top, we've actually got a small number of files - you can see there -
213

213

00:16:33.120  -->  00:16:34.850
returning None for the tags.
214

214

00:16:34.900  -->  00:16:39.690
And that's because if a file's large enough, then the attempt to read the tags doesn't cause an error - it
215

215

00:16:39.690  -->  00:16:41.230
just won't return the valid tag either.
216

216

00:16:41.240  -->  00:16:43.070
And of course, that's why we're getting None there.
217

217

00:16:43.230  -->  00:16:46.440
Alright, so that's what it looks like with invalid mp3 files,
218

218

00:16:46.440  -->  00:16:50.750
but let's actually just run this, just to make sure it does work with valid mp3 files.
219

219

00:16:50.790  -->  00:16:54.430
So I've actually got some on my computer, to run as a test, that I've purchased.
220

220

00:16:54.450  -->  00:17:00.390
So you'll need to have some valid mp3 files yourself, if you want to actually do this test. And just to see
221

221

00:17:00.390  -->  00:17:01.140
it,
222

222

00:17:01.200  -->  00:17:04.550
I've actually got a folder here, and I've got some of my favorites,
223

223

00:17:04.560  -->  00:17:13.230
ACDC and Adele - contrasters there. You can see, we've got apollo, Main, Users, timbuchalka, Desktop, TestMusic.
224

224

00:17:13.390  -->  00:17:17.640
So what I want to do now is change this to point to that folder.
225

225

00:17:17.790  -->  00:17:23.210
What I'm going to do is duplicate that, and comment that first line out, and I'm going to change this to
226

226

00:17:23.220  -->  00:17:34.740
point to some valid mp3 files. So it's User, Users/timbuchalka/Desktop/TestMusic. It's importandt to have the
227

227

00:17:34.740  -->  00:17:36.010
final forward slash as
228

228

00:17:36.020  -->  00:17:40.090
well. So if we run this now, hopefully we'll get some good results.
229

229

00:17:40.660  -->  00:17:41.180
OK.
230

230

00:17:41.190  -->  00:17:45.120
And the reason for that is, we're getting no errors which is good, but of course, I didn't change the file type
231

231

00:17:45.420  -->  00:17:49.470
to be mp3 because, obviously, now we are dealing with valid mp3 files.
232

232

00:17:49.470  -->  00:17:51.930
Let's just go ahead and run that again.
233

233

00:17:52.590  -->  00:17:56.840
And we're now getting some data, as you can see now, which we would expect to get.
234

234

00:17:56.870  -->  00:18:00.210
So we've got ACDC and a couple of Adele songs in there as well. And you can see,
235

235

00:18:00.300  -->  00:18:05.980
it's clearly between the artist name, the album, the track and also the name of the song. So obviously, it just goes
236

236

00:18:06.000  -->  00:18:08.140
to show that this is working nicely.
237

237

00:18:08.330  -->  00:18:15.630
Alright, what I'll do is, I'll just comment that out, to say you can run this using the emp3 format if you want to on your computer
238

238

00:18:15.650  -->  00:18:20.640
and I'll just uncomment that. But you can, obviously, change that path to whatever is appropriate for your operating
239

239

00:18:20.640  -->  00:18:21.860
system.
240

240

00:18:21.860  -->  00:18:22.620
Alright so that's it.
241

241

00:18:22.620  -->  00:18:23.690
That's generators,
242

242

00:18:23.730  -->  00:18:29.430
and as you've seen, I think they're a great way to deal with huge amounts of data, without using up
243

243

00:18:29.430  -->  00:18:30.940
all your computer's memory.
244

244

00:18:30.970  -->  00:18:35.570
Now I'm sure you can think of all sorts of applications where generators will be useful; streaming data,
245

245

00:18:35.580  -->  00:18:37.670
for example, would be a good use for a generator.
246

246

00:18:37.980  -->  00:18:40.740
Now when you search for something using Google search engine,
247

247

00:18:40.770  -->  00:18:46.290
it displays the results one page at a time. When you click to get the next page of data, that's downloaded
248

248

00:18:46.290  -->  00:18:47.410
once you request it.
249

249

00:18:47.640  -->  00:18:52.360
So the Google search engine doesn't download all the thousands of search results to your computer.
250

250

00:18:52.580  -->  00:18:57.510
Now I don't have access to Google source code so I can't guarantee that they're using Python generators
251

251

00:18:57.900  -->  00:19:01.740
for retaining search results, but as Python was developed by Guido van
252

252

00:19:01.740  -->  00:19:03.770
Rossum was working at Google,
253

253

00:19:03.780  -->  00:19:08.240
it's a good guess that they actually are using that. And it's certainly an application where a generator
254

254

00:19:08.270  -->  00:19:10.210
would be very appropriate.
255

255

00:19:10.380  -->  00:19:14.880
Alright, so I'm going to finish this video and our discussions of generators here. In the next video, we're going
256

256

00:19:14.880  -->  00:19:16.790
to look at list comprehensions.
257

257

00:19:16.860  -->  00:19:21.420
Now I mentioned them a couple of times in the course and now it's time to find out what they are and how to use
258

258

00:19:21.420  -->  00:19:21.970
them.
259

259

00:19:21.990  -->  00:19:23.650
So I'll see you in that next video.
