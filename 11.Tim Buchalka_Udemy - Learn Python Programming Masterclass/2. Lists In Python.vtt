WEBVTT
1
1

00:00:05.420  -->  00:00:08.500
In this video we're going to go
through an introduction to lists.
2

2

00:00:08.500  -->  00:00:11.860
You've already looked at one sequence
type, which is the tech sequence type,
3

3

00:00:11.860  -->  00:00:13.340
STR or string, and
4

4

00:00:13.340  -->  00:00:16.190
we also looked at some of the operations
that can be performed on the string.
5

5

00:00:16.190  -->  00:00:20.020
Now Python actually provides six
additional built in sequence types.
6

6

00:00:20.020  -->  00:00:23.100
And they are the List,
the Range, the Tuple and
7

7

00:00:23.100  -->  00:00:24.920
these three types we'll be
discussing in this section.
8

8

00:00:24.920  -->  00:00:28.520
And there's also three binary sequence
types that will be the subject of future
9

9

00:00:28.520  -->  00:00:29.820
sections, but we'll talk about those.
10

10

00:00:29.820  -->  00:00:32.980
So there's actually useful summary of
the operations that can be performed on
11

11

00:00:32.980  -->  00:00:34.040
sequences.
12

12

00:00:34.040  -->  00:00:37.280
What I'm going to do is just open up
some documentation and show you that.
13

13

00:00:38.400  -->  00:00:42.950
Gonna paste the link there and you can see
the link now just by making it a little
14

14

00:00:42.950  -->  00:00:45.050
bit larger so
you can read it on the screen.
15

15

00:00:45.050  -->  00:00:48.280
If you go to that page and have a look,
you can see that there's a good summary as
16

16

00:00:48.280  -->  00:00:51.320
I mentioned of the various
operations that can be performed.
17

17

00:00:51.320  -->  00:00:54.380
And the table itself is
actually quite useful, but
18

18

00:00:54.380  -->  00:00:58.110
unfortunately the actual text itself
is written as a formal definition.
19

19

00:00:58.110  -->  00:01:01.670
And it's really not that
easy to understand.
20

20

00:01:01.670  -->  00:01:04.940
Good news is that we'll be explaining
it all in this course here anyway.
21

21

00:01:04.940  -->  00:01:06.700
You're looking at these
operations on the screen.
22

22

00:01:06.700  -->  00:01:10.470
Even though they're a little bit hard, bit
cryptic to read what they actually mean,
23

23

00:01:10.470  -->  00:01:13.860
we've actually used the first
eight already in the course.
24

24

00:01:13.860  -->  00:01:15.530
And if you look at the next two,
min and max,
25

25

00:01:15.530  -->  00:01:17.580
they're probably fairly
obvious as to what they do.
26

26

00:01:17.580  -->  00:01:20.280
Give you the smallest item and
the largest item.
27

27

00:01:20.280  -->  00:01:23.240
And even if the results are reduced,
they are not always what you might expect.
28

28

00:01:23.240  -->  00:01:25.050
Which you'll actually find
we're not actually using them.
29

29

00:01:25.050  -->  00:01:27.800
But count could've been useful
in our previous change as well.
30

30

00:01:27.800  -->  00:01:31.320
This is the s.count, total number of
occurrences, and we could've actually used
31

31

00:01:31.320  -->  00:01:34.890
that to check that the input string
contained exactly three full stops.
32

32

00:01:34.890  -->  00:01:38.730
So let's actually go back and check that
out and see how to do that in some code.
33

33

00:01:38.730  -->  00:01:44.230
So, what we could've done is started
off and put ipAddress = input.
34

34

00:01:46.920  -->  00:01:52.140
Please enter an IP address, like so.
35

35

00:01:52.140  -->  00:01:54.370
In terms of validating it,
36

36

00:01:54.370  -->  00:01:59.620
we could've done print ipaddress.count and
put dot in there.
37

37

00:01:59.620  -->  00:02:02.620
So we're counting how many dots,
full stops are actually in there.
38

38

00:02:02.620  -->  00:02:03.560
So if we actually run that.
39

39

00:02:04.800  -->  00:02:08.910
Please enter an IP address 192.168.0.1.
40

40

00:02:08.910  -->  00:02:10.510
You can see we got the number three there.
41

41

00:02:10.510  -->  00:02:13.320
And again we can just try another one.
42

42

00:02:13.320  -->  00:02:16.940
We could just try a bogus
one 10.5.4.3.2.1.
43

43

00:02:16.940  -->  00:02:19.880
And that's returning five even,
that's an invalid IP address.
44

44

00:02:19.880  -->  00:02:22.780
You can see that it's actually
correctly returning the right number
45

45

00:02:22.780  -->  00:02:23.850
from stops it's found.
46

46

00:02:23.850  -->  00:02:25.230
So that would have been very useful.
47

47

00:02:25.230  -->  00:02:27.530
There's also another I want that
we're gonna look at in this section.
48

48

00:02:27.530  -->  00:02:31.620
If we go back to the form again,
we're gonna be using index.
49

49

00:02:31.620  -->  00:02:34.020
Index or the first occurrence of x in s.
50

50

00:02:34.020  -->  00:02:38.010
So all these operations that I'm showing
you can be performed on any sequence type,
51

51

00:02:38.010  -->  00:02:40.120
but we're actually gonna be
using them with lists here.
52

52

00:02:40.120  -->  00:02:41.160
Let's go back to the code again.
53

53

00:02:41.160  -->  00:02:44.680
It probably helps though if we start
off by talking about what is a list.
54

54

00:02:44.680  -->  00:02:46.510
So what actually is a list in Python?
55

55

00:02:46.510  -->  00:02:48.930
Think of a list as a sequence of things.
56

56

00:02:48.930  -->  00:02:51.650
Now those things could be strings,
numbers, classes, or
57

57

00:02:51.650  -->  00:02:53.340
pretty much anything else.
58

58

00:02:53.340  -->  00:02:55.860
So if a list can be a sequence of strings,
and
59

59

00:02:55.860  -->  00:02:59.340
a string is itself a sequence type
which we talked about earlier,
60

60

00:02:59.340  -->  00:03:02.850
then it makes sense that a list can also
be a sequence of lists, which it can.
61

61

00:03:02.850  -->  00:03:04.310
So this makes an incredibly useful,
62

62

00:03:04.310  -->  00:03:06.520
if a little bit confusing initially,
as we're about to see.
63

63

00:03:06.520  -->  00:03:10.040
So we're gonna actually start by looking
at the dead parrot list we used when
64

64

00:03:10.040  -->  00:03:11.890
discussing four loops
in a previous section.
65

65

00:03:11.890  -->  00:03:14.700
We're gonna make a slight change and
assign the list to a variable So
66

66

00:03:14.700  -->  00:03:16.440
I'm just going to comment this code out.
67

67

00:03:17.870  -->  00:03:22.840
So let's type parent_list =
68

68

00:03:22.840  -->  00:03:28.580
["non pinin'", "no more",
69

69

00:03:28.580  -->  00:03:33.950
"a stiff", bereft of love".
70

70

00:03:35.370  -->  00:03:37.470
Again, Monty Python references there.
71

71

00:03:37.470  -->  00:03:40.340
And this time I've assigned it,
as you can see, to a variable.
72

72

00:03:40.340  -->  00:03:48.000
And we can use our for loop, for
state in parrot list: and print.
73

73

00:03:48.000  -->  00:03:52.700
This parrot is + state.
74

74

00:03:52.700  -->  00:03:55.510
So again, the list on line three it's
75

75

00:03:55.510  -->  00:03:59.020
created when closing the individual items
in square brackets as you can see there.
76

76

00:03:59.020  -->  00:04:02.260
It's separating each item
in the list with a comma.
77

77

00:04:02.260  -->  00:04:04.830
And we can actually run this
to confirm that it works.
78

78

00:04:04.830  -->  00:04:07.520
As parrot is, you can see
non-pointing is the first entry,
79

79

00:04:07.520  -->  00:04:10.630
no more was the second one,
stiff and bereft of love.
80

80

00:04:10.630  -->  00:04:16.140
So it actually went through the flow each
entry is a separate entry in the list and
81

81

00:04:16.140  -->  00:04:17.660
we're able to print a message out.
82

82

00:04:17.660  -->  00:04:21.730
It's also quite easy to append to
a list after you've created it.
83

83

00:04:21.730  -->  00:04:24.820
So if you wanted to do that elsewhere in
the code, you could actually come down in
84

84

00:04:24.820  -->  00:04:31.320
here and type parrot_list.append and
type in something like Norwegian Blue.
85

85

00:04:31.320  -->  00:04:36.800
And then if we run that, we can
86

86

00:04:36.800  -->  00:04:41.500
see that we successfully added an entry to
the end of the list by using the .append.
87

87

00:04:41.500  -->  00:04:43.400
Now the other thing we can do
is have a list of numbers.
88

88

00:04:43.400  -->  00:04:45.130
So, obviously we've used strings there.
89

89

00:04:45.130  -->  00:04:47.620
But there's nothing stopping us
from actually having numbers so
90

90

00:04:47.620  -->  00:04:51.280
we can do something like,
even equals 2, 4, 6, 8.
91

91

00:04:51.280  -->  00:04:58.630
And we can say odd equals 1,
3, 5, 7, 9, like so.
92

92

00:04:59.920  -->  00:05:08.290
And we could put numbers = even + odd,
print numbers.
93

93

00:05:08.290  -->  00:05:11.050
So here we are actually concatenating
the even and odd lists and
94

94

00:05:11.050  -->  00:05:14.800
we're assigning the result to a third
list, a new list, called numbers.
95

95

00:05:14.800  -->  00:05:17.140
So let's actually try running that first.
96

96

00:05:17.140  -->  00:05:22.040
And you notice we've actually got
246813579 so it successfully appended it
97

97

00:05:22.040  -->  00:05:26.480
to numbers that were in the odd list
at the end of the even list and
98

98

00:05:26.480  -->  00:05:29.490
actually created a third list when
we actually added to the numbers.
99

99

00:05:29.490  -->  00:05:32.800
So the actual numbers list
contains the sum of both of them.
100

100

00:05:32.800  -->  00:05:34.230
And we've got a couple of errors so
101

101

00:05:34.230  -->  00:05:36.900
I should actually make an attempt
to actually fix those.
102

102

00:05:36.900  -->  00:05:40.330
So we need to be adding that as white
space we have to get in to do this for
103

103

00:05:40.330  -->  00:05:44.170
all our code, to make sure
the code's actually valid each time.
104

104

00:05:44.170  -->  00:05:47.320
And this is actually telling us that
the list creation could be rewritten as
105

105

00:05:47.320  -->  00:05:48.380
a list literal.
106

106

00:05:48.380  -->  00:05:50.200
So I think and
that's some more advice from IntelliJ, but
107

107

00:05:50.200  -->  00:05:51.900
we'll actually leave that for
the time being anyway.
108

108

00:05:51.900  -->  00:05:52.970
We'll come back to that.
109

109

00:05:52.970  -->  00:05:55.810
But looking at the list
that's been combined there,
110

110

00:05:55.810  -->  00:05:57.950
as you can see,
they're not actually in order.
111

111

00:05:57.950  -->  00:06:00.760
So obviously it'd be nice if we could
automatically get those in order so
112

112

00:06:00.760  -->  00:06:03.120
they actually started from
lowest number to highest number.
113

113

00:06:03.120  -->  00:06:04.630
And that's actually quite easy to do.
114

114

00:06:04.630  -->  00:06:08.750
So we can actually, very simply use the
sort method which is part of a list and
115

115

00:06:08.750  -->  00:06:12.070
type numbers.sort, like so.
116

116

00:06:12.070  -->  00:06:13.360
And once we do that and
117

117

00:06:13.360  -->  00:06:17.420
run it again you can see we've now
got the numbers correctly in order.
118

118

00:06:17.420  -->  00:06:21.600
Now the sort method itself doesn't
return the sorted list, and
119

119

00:06:21.600  -->  00:06:24.540
if you've actually used other
languages this may be what you expect.
120

120

00:06:24.540  -->  00:06:27.730
You may expect the sort method to
actually return the sorted list, so
121

121

00:06:27.730  -->  00:06:29.230
in other words this is not going to work.
122

122

00:06:29.230  -->  00:06:32.010
So, if I give you an example,
if we actually remove that,
123

123

00:06:32.010  -->  00:06:34.070
and actually comment that line out.
124

124

00:06:35.070  -->  00:06:39.150
And if you did something like this, print
numbers.sort, you might assume that that
125

125

00:06:39.150  -->  00:06:42.700
would actually print out the contents
of what was a sort of numbers.
126

126

00:06:42.700  -->  00:06:45.030
And certainly that would be the case
in other programming language.
127

127

00:06:45.030  -->  00:06:48.670
But if you run that we actually get None,
we get something completely different.
128

128

00:06:48.670  -->  00:06:51.610
And the reason for
that is that Guido Van Rossum,
129

129

00:06:51.610  -->  00:06:55.540
the guy who invented Python,
he chose this behavior deliberately, and
130

130

00:06:55.540  -->  00:06:58.470
the idea was to provide a hint that the
sort method works on the object that it
131

131

00:06:58.470  -->  00:07:01.890
was called upon,
rather than creating a new object.
132

132

00:07:01.890  -->  00:07:05.300
And that's very important here that
It's not actually creating anything.
133

133

00:07:05.300  -->  00:07:06.730
So the sort method or
134

134

00:07:06.730  -->  00:07:11.130
function, the idea of it is that it
actually works on the existing variable,
135

135

00:07:11.130  -->  00:07:14.370
the object in other words,
it doesn't actually create a new object.
136

136

00:07:14.370  -->  00:07:17.870
And that's why in this
case .sort returns nothing.
137

137

00:07:17.870  -->  00:07:21.540
So, we would then delete that code
out again and come back here.
138

138

00:07:21.540  -->  00:07:24.180
And so, we've got at this point, our list.
139

139

00:07:24.180  -->  00:07:28.040
Numbers.sort works on that list, and
resorts out, and then printing it out
140

140

00:07:28.040  -->  00:07:31.490
obviously prints out the same variable,
which has now been sorted.
141

141

00:07:31.490  -->  00:07:33.920
And I've got the numbers
in the right order like so.
142

142

00:07:33.920  -->  00:07:37.750
So if you are new to programming, some of
this discussion may not make much sense.
143

143

00:07:37.750  -->  00:07:40.930
You might be wondering what I'm talking
about when I'm talking about the .sort
144

144

00:07:40.930  -->  00:07:42.090
returning an object.
145

145

00:07:42.090  -->  00:07:43.900
And you are probably quite
happy with the way it works.
146

146

00:07:43.900  -->  00:07:46.620
And I think indeed it actually does
make sense and it's quite intuitive.
147

147

00:07:46.620  -->  00:07:49.780
But the reason I'm bringing it up is
because it's particularly important if you
148

148

00:07:49.780  -->  00:07:53.180
have a seen this in other languages
you have to get used to this type of
149

149

00:07:53.180  -->  00:07:54.320
behavior [INAUDIBLE].
150

150

00:07:54.320  -->  00:07:59.240
Generally speaking if a method
acts on an object and changes it,
151

151

00:07:59.240  -->  00:08:01.340
mutates it in other words.
152

152

00:08:01.340  -->  00:08:04.400
Then the method is going
to return none but
153

153

00:08:04.400  -->  00:08:06.840
the actual variable
object has been updated.
154

154

00:08:06.840  -->  00:08:10.190
Now there is a way around this if you
want to create a new object rather than
155

155

00:08:10.190  -->  00:08:11.000
sorting the one you have,
156

156

00:08:11.000  -->  00:08:14.360
there's actually a built in function
sorter that's going to do that.
157

157

00:08:14.360  -->  00:08:16.340
So we could actually change this code out.
158

158

00:08:16.340  -->  00:08:20.780
So we'll get rid of .sort and
what we'll do is actually come up here and
159

159

00:08:20.780  -->  00:08:24.800
delete that code and put numbers but
use a method called sorted.
160

160

00:08:27.140  -->  00:08:31.960
Like so and sorted is a function
that's built in to Python.
161

161

00:08:31.960  -->  00:08:34.590
If we run that,
you can see we've got the same result,
162

162

00:08:34.590  -->  00:08:37.750
we've actually got it sorted, and
that does actually return and the number,
163

163

00:08:37.750  -->  00:08:39.100
cuz obviously we're printing this out.
164

164

00:08:39.100  -->  00:08:42.990
So it's returned a new list
containing the sorted numbers.
165

165

00:08:42.990  -->  00:08:46.270
So that's different than
the .sort function you saw before.
166

166

00:08:46.270  -->  00:08:49.670
This sorted function actually
returns the actual new object.
167

167

00:08:49.670  -->  00:08:51.960
And of course, with that said,
we're printing it there, but
168

168

00:08:51.960  -->  00:08:55.610
there's nothing stopping
us actually just putting
169

169

00:08:55.610  -->  00:09:00.160
numbers_in_order = sorted(numbers),
like so.
170

170

00:09:00.160  -->  00:09:01.120
And then just printing.
171

171

00:09:02.160  -->  00:09:05.900
Print numbers in order,
which essentially is the same thing, so
172

172

00:09:05.900  -->  00:09:06.950
that's going to work as well.
173

173

00:09:06.950  -->  00:09:10.210
If we run that, we get the numbers
at sorted in the right order.
174

174

00:09:10.210  -->  00:09:11.880
So, at that point, obviously,
we've got two lists.
175

175

00:09:11.880  -->  00:09:15.600
We've got numbers, and numbers in order,
and they've got the same items, but,
176

176

00:09:15.600  -->  00:09:16.590
obviously, different orders.
177

177

00:09:16.590  -->  00:09:19.610
The first one,
numbers has got the numbers unsorted, and
178

178

00:09:19.610  -->  00:09:22.330
numbers in order has obviously
has got the sorted numbers.
179

179

00:09:22.330  -->  00:09:24.190
The other thing to keep
in mind is at this point,
180

180

00:09:24.190  -->  00:09:28.020
even though they can both contain
the same items, Python will
181

181

00:09:28.020  -->  00:09:31.100
not treat them as equal as we can see
with this code we're about to write.
182

182

00:09:31.100  -->  00:09:36.080
And this important distinction is,
183

183

00:09:36.080  -->  00:09:41.060
over top, if numbers equals numbers
184

184

00:09:41.060  -->  00:09:45.890
in order Print the lists are equal.
185

185

00:09:45.890  -->  00:09:49.820
And again they've got the same numbers in
them so you'd think maybe that would work,
186

186

00:09:49.820  -->  00:09:51.320
but we'll try putting an else in there.
187

187

00:09:52.670  -->  00:09:54.530
The lists are not equal.
188

188

00:09:56.900  -->  00:09:57.890
So, I've actually run that.
189

189

00:09:59.240  -->  00:10:01.810
We actually get the message back,
the lists are not equal.
190

190

00:10:01.810  -->  00:10:04.580
And that's because even though
we've got the same numbers,
191

191

00:10:04.580  -->  00:10:06.360
they're actually in a different order.
192

192

00:10:06.360  -->  00:10:09.620
So obviously the first set of
numbers was unordered, and
193

193

00:10:09.620  -->  00:10:11.600
the second set of numbers was ordered.
194

194

00:10:11.600  -->  00:10:14.250
And as far as Python is concerned,
they aren't equal.
195

195

00:10:14.250  -->  00:10:15.890
But we could do something like this.
196

196

00:10:15.890  -->  00:10:21.610
We could actually do a test for
if numbers_in_order
197

197

00:10:21.610  -->  00:10:24.670
is equal to sorted numbers.
198

198

00:10:26.510  -->  00:10:28.500
Print, and we'll actually copy
the rest of the code there, so
199

199

00:10:28.500  -->  00:10:30.320
we'll just do exactly the same.
200

200

00:10:30.320  -->  00:10:32.510
Copy that, paste that.
201

201

00:10:32.510  -->  00:10:35.810
So now we're actually testing numbers in
an order which has already been sorted,
202

202

00:10:35.810  -->  00:10:38.930
and we're comparing that to
the return from this sorted function,
203

203

00:10:38.930  -->  00:10:43.150
which will actually be numbers,
sorting the unsorted list or sorted lists,
204

204

00:10:43.150  -->  00:10:44.600
that should now come back and
say they're equal.
205

205

00:10:44.600  -->  00:10:46.450
And the lists are equal at this point,
206

206

00:10:46.450  -->  00:10:50.730
because obviously we've got same numbers
and also they're both sorted as well.
207

207

00:10:50.730  -->  00:10:53.210
So again, if you're used to
other programming languages,
208

208

00:10:53.210  -->  00:10:55.330
this may well be very confusing to you.
209

209

00:10:55.330  -->  00:10:59.280
The two objects are not the same and they
would not test equal in Java for example.
210

210

00:10:59.280  -->  00:11:02.830
But Python works as you would intuitively
would expect if you're new to programming.
211

211

00:11:02.830  -->  00:11:05.370
And it's obviously a bonus for you,
if you actually are new to programming.
212

212

00:11:05.370  -->  00:11:07.160
So, I'm gonna end this video here.
213

213

00:11:07.160  -->  00:11:10.530
In the next video we're going
to continue our work on lists.
214

214

00:11:10.530  -->  00:11:12.610
And we're going to look at
some different formats and
215

215

00:11:12.610  -->  00:11:15.880
ways to actually use replacement fields,
lists, and so on and so forth.
216

216

00:11:15.880  -->  00:11:17.100
So, I'll see you in that next video.
