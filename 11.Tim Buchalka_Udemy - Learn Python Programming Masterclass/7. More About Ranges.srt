0
1
00:00:05,340 --> 00:00:08,710
So in this video we're gonna
continue on talking about ranges.
1

2
00:00:08,710 --> 00:00:12,200
And just at the end of the previous
video we started talking about
2

3
00:00:12,200 --> 00:00:13,350
equality with ranges.
3

4
00:00:13,350 --> 00:00:15,850
And just to run this example again.
4

5
00:00:15,850 --> 00:00:19,110
So you can see that,
I'll just make it more space here.
5

6
00:00:19,110 --> 00:00:24,030
That my range which was set here, you can
see under decimals which is the range
6

7
00:00:24,030 --> 00:00:29,490

8
3:40:3 and using a range actually topping
it out actually returned the same result.
7

9
00:00:29,490 --> 00:00:30,980
So we actually returned true,
in other words,
8

10
00:00:30,980 --> 00:00:35,140
saying both ranges were the same
effectively, or equal in other words.
9

11
00:00:35,140 --> 00:00:41,620
What would actually happen,
do you think, if we actually typed this?
10

12
00:00:41,620 --> 00:00:50,220
Print range 052 equal to range 062.
11

13
00:00:50,220 --> 00:00:52,010
So, what do you think
that's going to print?
12

14
00:00:52,010 --> 00:00:53,030
True or false?
13

15
00:00:53,030 --> 00:00:53,710
Let's just run that.
14

16
00:00:54,850 --> 00:00:57,630
If there the numbers are different,
we're actually gonna get true.
15

17
00:00:57,630 --> 00:01:00,690
So why you might be asking, is that equal
when clearly they numbers are different?
16

18
00:01:00,690 --> 00:01:04,350
Well it's all got to do with
the same sequence of values.
17

19
00:01:04,350 --> 00:01:08,410
So it's regardless of how the values were
specified, it's what the end result is.
18

20
00:01:08,410 --> 00:01:09,000
So in other words,
19

21
00:01:09,000 --> 00:01:14,210
it's what the range actually returns
that is important here to test equality.
20

22
00:01:14,210 --> 00:01:16,610
Obviously, it was quite easy on
line three, testing equality,
21

23
00:01:16,610 --> 00:01:17,470
because they're identical.
22

24
00:01:17,470 --> 00:01:22,140
But on line four, of course, we've got
one which has got 052 as the range,
23

25
00:01:22,140 --> 00:01:23,940
and the second one is 062.
24

26
00:01:23,940 --> 00:01:26,430
Can easily see what's going on here
by actually printing out a list.
25

27
00:01:26,430 --> 00:01:32,870
So if we do a print, list, range, 052, and
26

28
00:01:32,870 --> 00:01:37,880
then we do the same thing for 062.
27

29
00:01:37,880 --> 00:01:41,060
It'll actually become clear why that is
actually equal when you think maybe at
28

30
00:01:41,060 --> 00:01:42,380
first glance it shouldn't be.
29

31
00:01:42,380 --> 00:01:47,160
And you can see that because
we're stepping by two,
30

32
00:01:47,160 --> 00:01:51,830
the actual sequence that ended up
being generated was 024 in both cases.
31

33
00:01:51,830 --> 00:01:54,310
And, that's actually what the test for
equality is.
32

34
00:01:54,310 --> 00:01:56,570
So, it was actually testing what
the result of the range is,
33

35
00:01:56,570 --> 00:01:59,910
not the actual numbers that were
typed in to come up with the range.
34

36
00:01:59,910 --> 00:02:01,640
So, it's very important distinction there.
35

37
00:02:01,640 --> 00:02:04,830
And just in relation to slicing again,
we did start doing that.
36

38
00:02:04,830 --> 00:02:08,990
So a slice connects to the step value
of a slice could also be negative.
37

39
00:02:08,990 --> 00:02:14,750
So it can go r equals range, 0 comma 100,
38

40
00:02:14,750 --> 00:02:19,750
print r, and we're gonna do for i in r,
39

41
00:02:19,750 --> 00:02:24,470
colon, colon, minus 2, print i.
40

42
00:02:24,470 --> 00:02:27,920
And if you run that,
you can say basically we're stepping back,
41

43
00:02:27,920 --> 00:02:30,000
going backwards to start two at a time.
42

44
00:02:30,000 --> 00:02:33,530
Starting from the hundred and
basically going down to one.
43

45
00:02:33,530 --> 00:02:38,470
Which of course is identical to typing for
i in range.
44

46
00:02:38,470 --> 00:02:42,360
99, 0, -2,
45

47
00:02:42,360 --> 00:02:47,970
print i, and fix the typo.
46

48
00:02:49,420 --> 00:02:52,050
So you can see those two commands
were basically identical.
47

49
00:02:52,050 --> 00:02:53,580
Okay we see that they're both the same,
and
48

50
00:02:53,580 --> 00:02:55,510
we can actually confirm
that by just doing a print.
49

51
00:02:59,380 --> 00:03:03,080
Separate them and you can see we got one
counting down to one and standing for
50

52
00:03:03,080 --> 00:03:07,090
99 and the second one is 99 counting
down to one so that's actually working.
51

53
00:03:10,180 --> 00:03:13,880
And do another space there, and
take careful note of this line.
52

54
00:03:13,880 --> 00:03:18,690
To print(range(0,
53

55
00:03:18,690 --> 00:03:24,460
100)[::-2] ==
54

56
00:03:24,460 --> 00:03:31,680
is equal to range 99, 0, -2.
55

57
00:03:31,680 --> 00:03:34,880
And if you run that, we should get true.
56

58
00:03:34,880 --> 00:03:36,260
And you can see we
actually get true there.
57

59
00:03:36,260 --> 00:03:37,600
So that's correct.
58

60
00:03:37,600 --> 00:03:42,220
But if we actually do this for
i in range, 0, 100,
59

61
00:03:42,220 --> 00:03:49,240
-2, print i.
60

62
00:03:49,240 --> 00:03:51,180
We gonna run that.
61

63
00:03:51,180 --> 00:03:52,190
We actually get nothing.
62

64
00:03:52,190 --> 00:03:54,990
We only get the true which
is from this line here.
63

65
00:03:54,990 --> 00:03:56,880
We don't actually get
any output from that.
64

66
00:03:56,880 --> 00:03:59,650
The reason is because in
the negative slice example,
65

67
00:03:59,650 --> 00:04:02,440
a negative step causes
a slice to be reversed.
66

68
00:04:02,440 --> 00:04:06,610
Now, the same effect is obtained by
specifying a negative step in the range,
67

69
00:04:06,610 --> 00:04:08,450
and you can see whether we've done that.
68

70
00:04:08,450 --> 00:04:11,690
But the start and
end values must also be reversed,
69

71
00:04:11,690 --> 00:04:15,160
otherwise the reading,
the way it's coming across,
70

72
00:04:15,160 --> 00:04:19,930
is that it starts at 0 and moves in
steps of minus 2, until you hit 100.
71

73
00:04:19,930 --> 00:04:22,910
So you can see what the problem is there
and that's never gonna obviously work if
72

74
00:04:22,910 --> 00:04:25,740
it's moving back from zero,
which is why we didn't get any output.
73

75
00:04:25,740 --> 00:04:30,070
But the slice, in contrast to that,
is returning items from a sequence and
74

76
00:04:30,070 --> 00:04:34,250
that as we saw if a negative index
is specified then you start counting
75

77
00:04:34,250 --> 00:04:35,430
from the end of the sequence.
76

78
00:04:35,430 --> 00:04:39,500
So it's -1 being the last item,
-2 second to last, etc.
77

79
00:04:39,500 --> 00:04:42,390
So, a range with a negative step can
be very useful for counting a for
78

80
00:04:42,390 --> 00:04:46,210
loop backwards, but a negative
slice is also extremely useful, and
79

81
00:04:46,210 --> 00:04:47,110
I'm gonna show you why.
80

82
00:04:47,110 --> 00:04:49,930
So, we're gonna first
comment out this code.
81

83
00:04:49,930 --> 00:04:52,420
And let's try an example.
82

84
00:04:52,420 --> 00:04:53,930
So, I would type backstring.
83

85
00:04:55,070 --> 00:04:58,270
So, what I will do, for reasons that will
come up is I am going to paste this in.
84

86
00:04:58,270 --> 00:05:00,740
I will paste that in, backstring.
85

87
00:05:00,740 --> 00:05:06,400
Then I will actually type, print
backstring colon, colon, negative one.
86

88
00:05:07,860 --> 00:05:11,010
We'll actually run that,
Python is a very powerful language.
87

89
00:05:11,010 --> 00:05:12,270
So you can see what it's
actually done there.
88

90
00:05:12,270 --> 00:05:15,930
It's basically a simple way to
process the range in reverse order,
89

91
00:05:15,930 --> 00:05:19,840
as you can see in that example where the
words were deliberately typed in reverse.
90

92
00:05:19,840 --> 00:05:21,130
It was that one line,
91

93
00:05:21,130 --> 00:05:23,940
we managed to get it to actually appear
as Python is a very powerful language.
92

94
00:05:23,940 --> 00:05:27,680
So applying a slice to a negative step
to an existing range is also,
93

95
00:05:27,680 --> 00:05:30,390
is a very simple way to process
that range in reverse order.
94

96
00:05:30,390 --> 00:05:35,580
And as another example, r = range(0,
95

97
00:05:35,580 --> 00:05:39,890
10), for i in r[::-1],
96

98
00:05:39,890 --> 00:05:44,050
print(i), and we can do that.
97

99
00:05:44,050 --> 00:05:45,430
And we get a similar result.
98

100
00:05:45,430 --> 00:05:48,810
We get it reverse, so we get the results
of the range respectively reversed
99

101
00:05:48,810 --> 00:05:52,870
from 9 to 0, in the same way that
when we actually printed the string,
100

102
00:05:52,870 --> 00:05:54,600
we actually got the results
backward as well.
101

103
00:05:54,600 --> 00:05:57,450
So that's actually it, so
it's now time for a challenge.
102

104
00:05:57,450 --> 00:05:59,690
So, the challenge is gonna be
a little bit different this time.
103

105
00:05:59,690 --> 00:06:02,850
It's gonna get you to,
well I'm gonna type in what to do, but
104

106
00:06:02,850 --> 00:06:06,730
it's more a bit of experimentation
required on your behalf.
105

107
00:06:06,730 --> 00:06:08,510
So basically I want you to experiment.
106

108
00:06:11,640 --> 00:06:14,940
With different ranges,
107

109
00:06:14,940 --> 00:06:20,300
and slices to get a feel for how they work.
108

110
00:06:35,180 --> 00:06:38,990
So basically the challenge is not so
much a challenge, it's more a way,
109

111
00:06:38,990 --> 00:06:43,300
it's more of a request to actually get you
to experiment with different ranges and
110

112
00:06:43,300 --> 00:06:44,220
slices.
111

113
00:06:44,220 --> 00:06:46,180
The idea is to get a feel for
how they're gonna work.
112

114
00:06:46,180 --> 00:06:49,580
So remember that you can actually print
the range as well as iterating through it
113

115
00:06:49,580 --> 00:06:50,740
to print the values.
114

116
00:06:50,740 --> 00:06:53,050
And also you can actually check
that also checks that you,
115

117
00:06:53,050 --> 00:06:55,300
the range is actually what you expected.
116

118
00:06:55,300 --> 00:06:58,000
Because as you can see in some
circumstances, as I've shown in this
117

119
00:06:58,000 --> 00:07:01,110
video, ranges don't always come
back as you would think they would.
118

120
00:07:01,110 --> 00:07:04,090
And you might also want to include
things like I've shown there,
119

121
00:07:04,090 --> 00:07:07,670
o = range(0, 100, 4),
printing out for contents of o, and
120

122
00:07:07,670 --> 00:07:12,840
actually using the slice with the colon
colon 5 I have there on line 8,
121

123
00:07:12,840 --> 00:07:17,010
printing out the values of p, and
using a for i in p and printing out i.
122

124
00:07:17,010 --> 00:07:19,910
And basically see if you can work out
what this code is going to do and
123

125
00:07:19,910 --> 00:07:22,460
what's gonna be printed before
you actually run the program.
124

126
00:07:22,460 --> 00:07:25,160
Now if you're unsure what's gonna happen,
you can actually use for
125

127
00:07:25,160 --> 00:07:29,710
loop to print out the values of o to see
why p actually returns what it does.
126

128
00:07:29,710 --> 00:07:30,700
We're gonna actually run this, and
127

129
00:07:30,700 --> 00:07:33,240
then I'll leave this with you
to actually experiment with.
128

130
00:07:33,240 --> 00:07:37,240
This is one of those things, range is
where it becomes a lot more familiar and
129

131
00:07:37,240 --> 00:07:40,300
makes more sense once you've actually
spent some time testing it and
130

132
00:07:40,300 --> 00:07:41,280
going through it.
131

133
00:07:41,280 --> 00:07:43,570
So, let's just run this result or
run this little program.
132

134
00:07:43,570 --> 00:07:46,090
And there's the results that
it printed out, which may or
133

135
00:07:46,090 --> 00:07:47,690
may not be what you thought it would be.
134

136
00:07:47,690 --> 00:07:50,600
All right, so I'm going to actually
leave this video here now,
135

137
00:07:50,600 --> 00:07:52,830
leave it to do some experimentation.
136

138
00:07:52,830 --> 00:07:56,040
In the next video, we're gonna talk about
tuples or tuples, depending on how you
137

139
00:07:56,040 --> 00:08:00,990
pronounce it, which is something that is
a very, very useful concept in Python.
