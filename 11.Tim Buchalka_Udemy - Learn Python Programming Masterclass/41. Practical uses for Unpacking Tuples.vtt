WEBVTT
1

00:00:04.630  -->  00:00:09.760
Let's look, now, at some practical uses
for unpacking tuples. Although I hadn't

2

00:00:09.760  -->  00:00:14.379
covered it at the time, we unpacked a
tuple a few lectures ago, when we looked

3

00:00:14.379  -->  00:00:19.359
at the enumerate function. enumerate is a
very useful function, when you need the

4

00:00:19.360  -->  00:00:24.980
index positions, while iterating over a
sequence. So let's open that file,

5

00:00:24.980  -->  00:00:29.240
and the name of the file was enumerate_example.

6

00:00:30.510  -->  00:00:36.640
Let's see how the tuple's being unpacked
in that code. So on line 1, we've got two

7

00:00:36.640  -->  00:00:41.679
variables in our for loop; we've got
index and character. Each time around the

8

00:00:41.679  -->  00:00:46.300
loop, index gets the index position, and
character gets the next character from

9

00:00:46.300  -->  00:00:51.039
the string. To see how that works, it'll
be helpful to see exactly what enumerate

10

00:00:51.040  -->  00:00:58.040
is returning. So what we're going to do is,
comment out both lines here, lines one and two.

11

00:00:58.040  -->  00:01:01.280
Then we're going to use a loop
instead, so on line four I'm going to type

12

00:01:01.280  -->  00:01:11.400
for t in enumerate, and in parentheses
I'm going to type abcdefgh.

13

00:01:11.400  -->  00:01:17.040
Then we'll print t on the next line. We're still
using enumerate here, to iterate

14

00:01:17.049  -->  00:01:22.210
over our string, but this time we're only
using one variable. t will get the value

15

00:01:22.210  -->  00:01:26.920
of whatever the next value of enumerate
is, as it iterates. So if we run the

16

00:01:26.920  -->  00:01:33.090
program, and put a colon there, to make
the code valid, on line four. Run it.

17

00:01:33.090  -->  00:01:38.380
You can see we've now got eight tuples in
the output. Each tuple contains the

18

00:01:38.380  -->  00:01:43.750
index position and a character at that
position. I'm going to labour the point a

19

00:01:43.750  -->  00:01:47.620
bit, here, and that's partly because this
can take a little while to understand

20

00:01:47.620  -->  00:01:52.600
but also, unpacking tuples is a very
valuable technique. It's something that

21

00:01:52.600  -->  00:01:56.500
programmers often forget, and they end up
writing pretty horrible code, as a result.

22

00:01:56.500  -->  00:02:01.119
We're all guilty of that sometimes.
In the next video, I'll show a link to a

23

00:02:01.120  -->  00:02:06.360
question in the Q&amp;A section, where JP
forgot to unpack tuples in his answer.

24

00:02:06.360  -->  00:02:12.480
So labouring the point here, our first line of
output is 0 comma and a in single quotes,

25

00:02:12.480  -->  00:02:17.700
surrounded by parentheses, and that is a
tuple. Looking at our commented out code,

26

00:02:17.700  -->  00:02:20.950
on line one, the first time around the loop

27

00:02:20.950  -->  00:02:26.769
we'll do something like this code, which I'll
add. So on line 7, I'm going to type index

28

00:02:26.769  -->  00:02:33.909
comma character, is equal to, and in
parentheses, zero comma and a in single

29

00:02:33.909  -->  00:02:43.959
quotes and a right parenthesis, print index
and print character. So again, the first

30

00:02:43.960  -->  00:02:47.960
time around the loop in this code, then
I'll do something like you can see.

31

00:02:47.960  -->  00:02:51.620
You can see that two values are unpacked
from the tuple, each time around the loop.

32

00:02:51.620  -->  00:02:55.140
We run the program now, just to
check that we get the value 0 for index

33

00:02:55.140  -->  00:03:00.699
and a for character, and you can see,
that is the case at the bottom of the

34

00:03:00.700  -->  00:03:04.260
output there. So that's what's happening
on line one.

35

00:03:04.260  -->  00:03:08.820
Each time around the loop, index and
character are unpacked from the tuple

36

00:03:08.820  -->  00:03:13.880
that enumerate creates. Now we can do
that inside our second for loop,

37

00:03:13.880  -->  00:03:17.900
just to emphasize what's happening on
line one. So I'm going to add some code,

38

00:03:17.900  -->  00:03:25.220
after line four there. I'm going to type
index comma character is equal to t,

39

00:03:25.220  -->  00:03:32.920
and instead of printing t, what we're going
to do, we're going to print index comma character.

40

00:03:32.920  -->  00:03:37.460
So now on line five, we unpack
the tuple to the two variables -

41

00:03:37.460  -->  00:03:43.880
index and character - and we're then printing them out on line six. Run the program now.

42

00:03:44.720  -->  00:03:48.040
You can see that we've got the correct
values in the output pane, each time

43

00:03:48.040  -->  00:03:54.310
around the loop. So line one is just a
shorthand version of that. Instead of

44

00:03:54.310  -->  00:04:00.430
storing each tuple in t, we unpack it as
we're iterating. Alright, let's end the

45

00:04:00.430  -->  00:04:04.600
video here in the next one, we'll look at
another way to use tuples.

46

00:04:04.600  -->  00:04:07.560
See you in the next video.
