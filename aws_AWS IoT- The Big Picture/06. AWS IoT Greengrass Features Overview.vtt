WEBVTT
1
00:00:01.850 --> 00:00:04.220
So now that we have an understanding of some of the

2
00:00:04.220 --> 00:00:05.575
context surrounding Greengrass,

3
00:00:05.575 --> 00:00:09.791
let's go ahead and review some of the main features and components of it.

4
00:00:09.791 --> 00:00:11.253
So first, when we're looking at Greengrass,

5
00:00:11.253 --> 00:00:14.692
we're going to have to put it in the context of other IoT devices.

6
00:00:14.692 --> 00:00:18.628
Now we might have many different IoT devices and a bunch of different settings,

7
00:00:18.628 --> 00:00:22.565
but when we're using Greengrass, we'll also have a Greengrass Core.

8
00:00:22.565 --> 00:00:26.296
Now that will actually be another device which will

9
00:00:26.296 --> 00:00:28.127
run Greengrass Core software.

10
00:00:28.127 --> 00:00:28.916
Now inside of that device,

11
00:00:28.916 --> 00:00:32.822
one thing we can do with Greengrass is to use the lambda runtime to actually

12
00:00:32.822 --> 00:00:36.569
process bits of information coming in from IoT devices.

13
00:00:36.569 --> 00:00:40.816
So any events that they emit might get sent over to the Greengrass Core

14
00:00:40.816 --> 00:00:44.618
and those events can then be processed and acted upon.

15
00:00:44.618 --> 00:00:47.551
Potentially we could use the lambda runtime to send pieces of

16
00:00:47.551 --> 00:00:51.577
information into the AWS cloud and interact with other IoT Core

17
00:00:51.577 --> 00:00:53.309
services like the Message Broker.

18
00:00:53.309 --> 00:00:55.008
Now with the lambda runtime,

19
00:00:55.008 --> 00:00:58.765
you'll write code that responds to events that IoT devices emit.

20
00:00:58.765 --> 00:00:59.451
Now with that,

21
00:00:59.451 --> 00:01:02.766
you'll need to be able to update the code that you're writing in there.

22
00:01:02.766 --> 00:01:05.605
So you'll be able to do this with the Greengrass service in

23
00:01:05.605 --> 00:01:09.120
the AWS cloud and whenever you have a new function with new

24
00:01:09.120 --> 00:01:10.451
bits of code that you write,

25
00:01:10.451 --> 00:01:14.709
you'll be able to use over the air updates to send that lambda function into

26
00:01:14.709 --> 00:01:19.372
your Greengrass Core and then replace the existing function so that it can

27
00:01:19.372 --> 00:01:20.753
take different actions depending on your needs,

28
00:01:20.753 --> 00:01:23.496
or you can patch it appropriately to make it more

29
00:01:23.496 --> 00:01:26.206
efficient or other things along those lines.

30
00:01:26.206 --> 00:01:29.729
So what are some characteristics of Greengrass lambda functions and how do they

31
00:01:29.729 --> 00:01:33.572
compare to the cloud-based lambda functions that AWS offers?

32
00:01:33.572 --> 00:01:37.249
These are two distinct categories that we should be sure to keep apart.

33
00:01:37.249 --> 00:01:42.224
So cloud-based lambda functions are cloud-based serverless computing,

34
00:01:42.224 --> 00:01:45.531
also the code that you write in the AWS cloud will run

35
00:01:45.531 --> 00:01:47.553
in response to configurable events.

36
00:01:47.553 --> 00:01:49.695
You'll also be able to update the code in your

37
00:01:49.695 --> 00:01:52.318
lambda functions with the AWS CLIs, SDKs,

38
00:01:52.318 --> 00:01:54.099
and the console.

39
00:01:54.099 --> 00:01:58.273
Inside of cloud-based lambda functions, you can write functions in Node.js,

40
00:01:58.273 --> 00:02:04.400
Java, C#, Go, Python, and many other languages now supported by lambda layers.

41
00:02:04.400 --> 00:02:06.700
And finally, you'll have access to do aliasing,

42
00:02:06.700 --> 00:02:11.018
integrations, and versioning, all with these cloud-based lambda functions.

43
00:02:11.018 --> 00:02:12.730
When we're working with Greengrass lambda functions,

44
00:02:12.730 --> 00:02:17.205
on the other hand, those will be for edge device-based local computing,

45
00:02:17.205 --> 00:02:19.110
as opposed to cloud-based computing.

46
00:02:19.110 --> 00:02:21.739
You'll also be able to take action on local device

47
00:02:21.739 --> 00:02:23.854
events without a cloud connection.

48
00:02:23.854 --> 00:02:26.339
So you won't be necessarily interacting with a cloud

49
00:02:26.339 --> 00:02:27.626
initially to trigger these events,

50
00:02:27.626 --> 00:02:31.948
and they're also running on that Greengrass Core itself.

51
00:02:31.948 --> 00:02:34.542
Instead of updating the code inside of the console in the cloud,

52
00:02:34.542 --> 00:02:37.637
you'll be able to configure and schedule lambda

53
00:02:37.637 --> 00:02:40.311
updates over the air with Greengrass.

54
00:02:40.311 --> 00:02:44.692
Finally, you'll also be able to write functions in a smaller set of languages,

55
00:02:44.692 --> 00:02:47.811
including Python, Node.js, Java, and C.

56
00:02:47.811 --> 00:02:48.374
Now, of course,

57
00:02:48.374 --> 00:02:50.293
all of these different languages might change in the

58
00:02:50.293 --> 00:02:53.055
future as AWS adds more functionality, however,

59
00:02:53.055 --> 00:02:56.418
this is the current setup as of early 2019.

60
00:02:56.418 --> 00:02:59.815
Now with Greengrass lambda functions, if you decide to push an update,

61
00:02:59.815 --> 00:03:02.352
there will be a fail safe that will allow you to revert to previous versions

62
00:03:02.352 --> 00:03:05.901
if for some reason that update isn't working as expected.

63
00:03:05.901 --> 00:03:06.584
And finally,

64
00:03:06.584 --> 00:03:11.135
you can track update progress inside of the AWS console with Greengrass,

65
00:03:11.135 --> 00:03:13.796
so essentially keeping track of whether or not those functions inside

66
00:03:13.796 --> 00:03:17.710
of your Greengrass Cores are updated successfully.

67
00:03:17.710 --> 00:03:19.091
So in addition to Greengrass lambda functions,

68
00:03:19.091 --> 00:03:22.415
what are some of the benefits we get out of using Greengrass?

69
00:03:22.415 --> 00:03:26.274
Well one of the other areas that we benefit from is in relation to security.

70
00:03:26.274 --> 00:03:30.257
There's a few features that Greengrass provides that up our security levels.

71
00:03:30.257 --> 00:03:33.137
The first is TLS mutual authentication.

72
00:03:33.137 --> 00:03:35.875
Now this is going to allow us to securely encrypt traffic between

73
00:03:35.875 --> 00:03:39.629
our Greengrass Core devices and the AWS cloud.

74
00:03:39.629 --> 00:03:43.094
We're also going to get access to local lambda authentication.

75
00:03:43.094 --> 00:03:45.842
Now these local lambda functions will be able to use sigv4,

76
00:03:45.842 --> 00:03:51.309
which is a method for authenticating actions to AWS services.

77
00:03:51.309 --> 00:03:53.766
Now that'll essentially allow those local lambda functions to

78
00:03:53.766 --> 00:03:57.995
take actions on AWS cloud services as well.

79
00:03:57.995 --> 00:04:01.727
In addition to this, we'll be able to leverage the Greengrass Secrets Manager,

80
00:04:01.727 --> 00:04:04.805
which will move secrets from the cloud to the edge on your

81
00:04:04.805 --> 00:04:07.412
Greengrass Core devices and enforce the same policies that

82
00:04:07.412 --> 00:04:09.312
the cloud was enforcing.

83
00:04:09.312 --> 00:04:11.930
So essentially we could make sure that particular devices have

84
00:04:11.930 --> 00:04:15.705
access to only the secrets they're supposed to and we can do the

85
00:04:15.705 --> 00:04:18.915
exact same thing with any policies and keys we provide to the

86
00:04:18.915 --> 00:04:20.775
Greengrass Secrets Manager.

87
00:04:20.775 --> 00:04:22.279
Now outside of the Greengrass Secrets Manager,

88
00:04:22.279 --> 00:04:26.121
we also have the ability to use hardware security integration.

89
00:04:26.121 --> 00:04:29.594
Now this is for devices that have a secure element,

90
00:04:29.594 --> 00:04:32.977
which is related to the Public Key cryptography Standards,

91
00:04:32.977 --> 00:04:34.087
or PKCS,

92
00:04:34.087 --> 00:04:37.376
that improves security because of where the data is stored physically

93
00:04:37.376 --> 00:04:41.307
on the device in a particular security module there.

94
00:04:41.307 --> 00:04:45.339
So this means that we can have even an advanced level of security with our

95
00:04:45.339 --> 00:04:49.764
Greengrass Core devices and their physical capabilities as well.

96
00:04:49.764 --> 00:04:50.707
But in addition to security,

97
00:04:50.707 --> 00:04:54.105
we also get a lot of added functionality when it comes to Greengrass Core.

98
00:04:54.105 --> 00:04:57.369
Now this comes from Greengrass connectors.

99
00:04:57.369 --> 00:05:01.326
When we have a Greengrass Core and some Greengrass Core software running on it,

100
00:05:01.326 --> 00:05:04.058
we might have a bunch of IoT devices that are still generating that data

101
00:05:04.058 --> 00:05:07.305
and it could just be piling up on our Greengrass Core.

102
00:05:07.305 --> 00:05:09.637
Now we might want to do something with this data,

103
00:05:09.637 --> 00:05:13.400
perhaps send it in to the AWS cloud, and fortunately for us,

104
00:05:13.400 --> 00:05:17.362
AWS provides these connectors which will make creating applications that

105
00:05:17.362 --> 00:05:20.503
integrate with things like Amazon Kinesis much easier.

106
00:05:20.503 --> 00:05:23.296
Now these are provided for a variety of different applications,

107
00:05:23.296 --> 00:05:27.381
including Kinesis, CloudWatch Logs, and also Device Defender,

108
00:05:27.381 --> 00:05:30.077
and many others like Splunk and third party vendors

109
00:05:30.077 --> 00:05:32.561
that aren't even related to AWS.

110
00:05:32.561 --> 00:05:35.488
So effectively this speeds up the process of developing

111
00:05:35.488 --> 00:05:37.656
applications on Greengrass Core devices.

112
00:05:37.656 --> 00:05:41.560
Now in addition to speeding up the development of application with connectors,

113
00:05:41.560 --> 00:05:45.063
we also have the ability to take advantage of AWS's machine learning

114
00:05:45.063 --> 00:05:47.930
capabilities when we're working with Greengrass.

115
00:05:47.930 --> 00:05:50.132
We start off with our Greengrass Core one more time,

116
00:05:50.132 --> 00:05:53.132
and those IoT devices that are generating bits of data.

117
00:05:53.132 --> 00:05:54.930
Now in this particular use case,

118
00:05:54.930 --> 00:05:57.574
we might want to be able to analyze this data in real time and

119
00:05:57.574 --> 00:05:59.793
determine if there are any anomalies within it.

120
00:05:59.793 --> 00:06:04.520
But in order to do that, we'd probably want to create a machine learning model.

121
00:06:04.520 --> 00:06:06.747
Now we could do this by working with Amazon Sagemaker,

122
00:06:06.747 --> 00:06:09.235
another service unrelated to Greengrass,

123
00:06:09.235 --> 00:06:13.818
and we could use that to generate an algorithm using a

124
00:06:13.818 --> 00:06:15.947
lot of compute power in the cloud,

125
00:06:15.947 --> 00:06:18.856
something that would be completely impossible to do on

126
00:06:18.856 --> 00:06:21.100
IoT devices or the AWS Greengrass Core.

127
00:06:21.100 --> 00:06:24.554
And once we've computed a machine learning model out,

128
00:06:24.554 --> 00:06:27.388
that itself could be deployed over to the Greengrass Core,

129
00:06:27.388 --> 00:06:30.532
along with any software that's required to run the

130
00:06:30.532 --> 00:06:33.064
different models that we might create.

131
00:06:33.064 --> 00:06:33.864
Now from that,

132
00:06:33.864 --> 00:06:36.698
we could actually output live data and detect any

133
00:06:36.698 --> 00:06:39.509
anomalies that are happening within our data,

134
00:06:39.509 --> 00:06:40.412
and then eventually if we wanted to,

135
00:06:40.412 --> 00:06:43.779
we could send that back into the cloud and act on that information or

136
00:06:43.779 --> 00:06:47.918
simply act on it locally in the Greengrass Core as well.

137
00:06:47.918 --> 00:06:50.849
So hopefully by now you'll see how Greengrass can really be effective

138
00:06:50.849 --> 00:06:54.021
at helping you take actions on local IoT devices,

139
00:06:54.021 --> 00:06:57.876
and how you can leverage its existing abilities to connect to the AWS cloud,

140
00:06:57.876 --> 00:07:00.947
and also how you can leverage the AWS cloud to provide things

141
00:07:00.947 --> 00:07:07.000
like machine learning models to Greengrass Core to make its decision making more effective.

