1
00:00:01,114 --> 00:00:03,820
Let's take a look at the Device Shadow service.

2
00:00:03,820 --> 00:00:07,208
Now before we do, we'll need to know what device shadows themselves are,

3
00:00:07,208 --> 00:00:10,393
and their JSON documents that are used to store and retrieve

4
00:00:10,393 --> 00:00:12,602
current state information for a device.

5
00:00:12,602 --> 00:00:16,707
So it kind of follows that the Device Shadow service is a service that

6
00:00:16,707 --> 00:00:22,384
maintains the shadows for each device that you connect to AWS IoT.

7
00:00:22,384 --> 00:00:24,484
So let's try and visualize this a little bit.

8
00:00:24,484 --> 00:00:26,736
Let's first imagine that we have device shadows and

9
00:00:26,736 --> 00:00:29,116
they're in the Device Shadow service.

10
00:00:29,116 --> 00:00:32,390
So we have lots of these, we have one for maybe our construction arm,

11
00:00:32,390 --> 00:00:37,130
one for a microprocessor, and another one for a connected light bulb.

12
00:00:37,130 --> 00:00:39,902
And each of these are connected to AWS IoT.

13
00:00:39,902 --> 00:00:42,210
But let's dive in this a little bit more and let's take a

14
00:00:42,210 --> 00:00:44,522
closer look just at our light bulb here.

15
00:00:44,522 --> 00:00:46,751
Now like any other AWS IoT device,

16
00:00:46,751 --> 00:00:51,002
this light bulb is going to have a shadow document associated with it.

17
00:00:51,002 --> 00:00:53,083
Now the shadow document in this case might have

18
00:00:53,083 --> 00:00:54,985
part of it be including the state.

19
00:00:54,985 --> 00:00:58,135
Now there's more involved in the shadow document than just this,

20
00:00:58,135 --> 00:01:01,373
including things like versioning and other parts of the shadow document,

21
00:01:01,373 --> 00:01:02,665
but in this particular case,

22
00:01:02,665 --> 00:01:06,124
let's just pretend it's simplified down to the state Now

23
00:01:06,124 --> 00:01:08,504
the state in this particular case says it's reported and

24
00:01:08,504 --> 00:01:10,472
the color of the state is white.

25
00:01:10,472 --> 00:01:13,926
So this means that currently our light is just emitting white light.

26
00:01:13,926 --> 00:01:16,134
But what happens if we want to connect, say,

27
00:01:16,134 --> 00:01:19,306
a mobile application to change the color of the light?

28
00:01:19,306 --> 00:01:20,070
Well in that case,

29
00:01:20,070 --> 00:01:22,874
we'd need an application that actually goes and interacts with the

30
00:01:22,874 --> 00:01:26,927
shadow document from that mobile device and then it actually

31
00:01:26,927 --> 00:01:28,441
retrieves the reported state of the light.

32
00:01:28,441 --> 00:01:31,108
Now this might make that available inside of our mobile application,

33
00:01:31,108 --> 00:01:34,930
but with shadow documents, we can do more than just retrieve the current state.

34
00:01:34,930 --> 00:01:38,099
What we could actually do is we could say we want a new desired state

35
00:01:38,099 --> 00:01:41,624
and then our application could go and it could set both a desired

36
00:01:41,624 --> 00:01:44,203
state and a reported state for the light.

37
00:01:44,203 --> 00:01:45,015
So in this case,

38
00:01:45,015 --> 00:01:48,669
it would see that the state currently desired is the color purple now

39
00:01:48,669 --> 00:01:51,665
after the application updated that in our shadow document,

40
00:01:51,665 --> 00:01:54,716
and then our light could subscribe to the topics for the shadow

41
00:01:54,716 --> 00:01:58,257
service that tell us when this document is changed and it could

42
00:01:58,257 --> 00:02:01,071
see that there is a difference between the desired and reported

43
00:02:01,071 --> 00:02:02,863
states and once it does this,

44
00:02:02,863 --> 00:02:06,749
it can take an action on the device itself and then change the state of the

45
00:02:06,749 --> 00:02:09,996
device to the color that was requested in the application.

46
00:02:09,996 --> 00:02:11,037
Now after that happens,

47
00:02:11,037 --> 00:02:14,343
the shadow document itself will once again be updated and the

48
00:02:14,343 --> 00:02:16,558
application can check for changes in that state,

49
00:02:16,558 --> 00:02:18,159
and then once that has been updated,

50
00:02:18,159 --> 00:02:22,076
can re-report that to the mobile device and let it know that the new

51
00:02:22,076 --> 00:02:25,691
state of the light is indeed purple like it requested.

52
00:02:25,691 --> 00:02:28,141
Now this is definitely a little bit of an over simplification.

53
00:02:28,141 --> 00:02:29,774
There's a few other components involved when you're

54
00:02:29,774 --> 00:02:31,211
working with the Device Shadow service,

55
00:02:31,211 --> 00:02:35,154
including some MQTT topics that would actually manage some of

56
00:02:35,154 --> 00:02:37,417
the interaction between the device itself,

57
00:02:37,417 --> 00:02:38,290
the shadow document,

58
00:02:38,290 --> 00:02:42,027
and the mobile application that's involved with the shadow document as well.

59
00:02:42,027 --> 00:02:45,400
There's also different parts of those topics that let you get the document,

60
00:02:45,400 --> 00:02:49,738
update it, determine whether or not the update is accepted or rejected,

61
00:02:49,738 --> 00:02:51,412
and some complications there.

62
00:02:51,412 --> 00:03:01,000
But this general overview gives you an idea of part of the workflow that would happen when you're using device shadows in AWS IoT.

