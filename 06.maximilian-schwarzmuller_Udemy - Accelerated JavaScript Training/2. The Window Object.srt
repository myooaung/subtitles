1

00:00:01,590  -->  00:00:03,500
Let's start with the window object,

2

00:00:03,510  -->  00:00:11,820
so the overall holding container and remember that I've already said that the global scope is the window

3

00:00:11,820  -->  00:00:17,540
object, so this global object is the window object in the browser and this is the case.

4

00:00:17,670  -->  00:00:25,700
Therefore, you can log many things, like for example the width of the window, you can access it either

5

00:00:25,830  -->  00:00:28,710
by using window.innerWidth

6

00:00:31,560  -->  00:00:38,460
and the value you see here depends on if you click on output here, the size of this container,

7

00:00:38,470  -->  00:00:41,310
so how big you make this container

8

00:00:41,310  -->  00:00:44,070
here. Now it's 510 as you can also see here,

9

00:00:44,090  -->  00:00:45,860
as this increases and decreases,

10

00:00:45,860  -->  00:00:49,950
this is only here on JSBin but that's just the setup here.

11

00:00:50,010  -->  00:00:56,140
Generally, this will be your whole window width here, not just something like that,

12

00:00:56,160  -->  00:01:02,420
so if you create your own index.html file and import a script and run window.innerWidth,

13

00:01:02,670  -->  00:01:04,630
you'll get the full width here.

14

00:01:05,100  -->  00:01:08,180
You can also use this without the window object

15

00:01:08,170  -->  00:01:10,790
since again, we're on the global scope here anyways

16

00:01:10,830  -->  00:01:13,800
and the global object is the window,

17

00:01:13,800  -->  00:01:18,540
therefore you might just use innerWidth like this.

18

00:01:21,710  -->  00:01:25,520
So clear this, execute it and you see this is the same

19

00:01:25,710  -->  00:01:32,210
and I'm just going to uncheck Auto-run JS to stop all these errors while I'm typing.

20

00:01:32,220  -->  00:01:35,990
You also have outerWidth,

21

00:01:36,030  -->  00:01:37,710
let's try this,

22

00:01:37,710  -->  00:01:42,170
what will happen if I run JS now? And I'll hit clear first, so what'll

23

00:01:42,210  -->  00:01:44,330
we see if I hit run?

24

00:01:45,510  -->  00:01:51,870
Well now here, we got as outerWidth the full size as innerWidth is.

25

00:01:51,870  -->  00:01:54,730
Now again, this is just because we're on JSBin here

26

00:01:54,960  -->  00:02:02,700
but generally, the difference is in outerWidth is only what you see on your webpage, including the scrolling

27

00:02:02,700  -->  00:02:09,460
side bar and outerWidth is all of that plus any borders your browser might have

28

00:02:09,660  -->  00:02:14,640
and this is why in this case here in JSBin, we have this huge difference because innerWidth is

29

00:02:14,640  -->  00:02:18,100
simply this tiny output

30

00:02:18,490  -->  00:02:22,030
container here and outerWidth is the complete page. Normally

31

00:02:22,320  -->  00:02:27,150
the difference is not that big but the difference are possible borders you might have

32

00:02:27,150  -->  00:02:28,880
and so on.

33

00:02:29,090  -->  00:02:36,790
You of course not only have width, you we also have innerHeight and outerHeight

34

00:02:38,670  -->  00:02:46,470
and if I execute this, you also got the difference, including the borders and so on when using the outerHeight

35

00:02:46,770  -->  00:02:49,160
or just the field itself

36

00:02:49,170  -->  00:02:56,010
if using the or just the webpage itself using the innerHeight. Now what else could you use on the

37

00:02:56,170  -->  00:02:56,620
window?

38

00:02:56,910  -->  00:03:04,400
Well try it out, simply and I'll get rid of output for now,

39

00:03:05,130  -->  00:03:07,570
hit run now and log the complete window,

40

00:03:07,830  -->  00:03:09,020
so here you go.

41

00:03:09,030  -->  00:03:14,310
These are all the available properties and methods and so on

42

00:03:14,310  -->  00:03:17,010
you can use on the window object.

43

00:03:17,010  -->  00:03:18,460
So quite a lot

44

00:03:18,470  -->  00:03:24,120
and no worries, a lot of that won't be needed and this includes for example the complete DOM because

45

00:03:24,180  -->  00:03:28,440
that is a property of the window object as well.

46

00:03:28,470  -->  00:03:35,040
So the window object is a really complex object, giving you access to a lot of high level features here

47

00:03:35,060  -->  00:03:35,360
and

48

00:03:35,670  -->  00:03:41,430
for example as mentioned before, the setTimeout and setInterval are also methods available

49

00:03:41,430  -->  00:03:43,690
on the window object here.

50

00:03:44,330  -->  00:03:54,510
Another important or useful property you may access is the local storage which is a built-in storage

51

00:03:54,510  -->  00:04:00,110
which will save certain values in your browser as long as the application is running here,

52

00:04:00,150  -->  00:04:06,700
for example you can store something by using the setItem method on the storage, give this a name because

53

00:04:06,700  -->  00:04:09,900
your save key-value pairs here. So

54

00:04:09,990  -->  00:04:13,380
you have a key here, key1 for example

55

00:04:13,380  -->  00:04:15,780
and then the value, let's say 1000

56

00:04:16,320  -->  00:04:25,530
and I'm not logging this but I will log the following where I get the value, so I will log

57

00:04:26,550  -->  00:04:31,730
localStorage.getItem and then the name of the key, key1 for example.

58

00:04:31,740  -->  00:04:37,020
So what do you think we'll now see if I hit run? Well we get 1000,

59

00:04:37,020  -->  00:04:44,220
this is how we can store some data to keep it in our running application and use it from different points

60

00:04:44,220  -->  00:04:49,110
in our application because in whichever script file we call local storage,

61

00:04:49,110  -->  00:04:56,270
we only have one local storage and this is why this is a great way to store values you want to use throughout

62

00:04:56,550  -->  00:04:59,550
our application at different points of time.

63

00:04:59,580  -->  00:05:01,400
We don't only have local storage,

64

00:05:01,530  -->  00:05:08,950
we also have session storage and as you can see if I hit run, this works in the same way and the difference is

65

00:05:08,970  -->  00:05:16,860
that local storage should persist whereas session storage will be deleted or emptied when the

66

00:05:16,860  -->  00:05:29,520
user closes a tab or the browser. The window object also has, as mentioned before, this location property

67

00:05:29,520  -->  00:05:29,810
and

68

00:05:29,850  -->  00:05:34,700
if I hit run, you get the location, I'll comeback to that in separate lectures

69

00:05:34,890  -->  00:05:39,240
but here, you have access to the location you're currently at

70

00:05:39,240  -->  00:05:44,090
and of course very important too, it has access to the document, the DOM

71

00:05:44,160  -->  00:05:50,490
and this will have its own lectures as well of course. Another very important thing or cool feature

72

00:05:50,490  -->  00:05:50,520
is

73

00:05:50,550  -->  00:06:01,650
you can run window.open and then just enter some address, let's say google.com and let's see

74

00:06:01,650  -->  00:06:04,180
what happens if I hit run.

75

00:06:04,950  -->  00:06:07,470
Well, a pop-up was blocked,

76

00:06:07,470  -->  00:06:14,820
so this tries to open a pop-up with this new address which of course nowadays won't work too often but

77

00:06:14,820  -->  00:06:22,180
you've got this possibility and you will see other methods of navigating in the location lecture.

78

00:06:22,500  -->  00:06:23,980
So that's the window object

79

00:06:24,000  -->  00:06:28,280
and as we saw, there are a lot more available properties and so on

80

00:06:28,560  -->  00:06:31,610
but the goal is not really to go through them all,

81

00:06:31,680  -->  00:06:39,990
the goal is to show you how you can work with it and what kind of properties and methods it stores and

82

00:06:40,060  -->  00:06:42,780
you learned about the most important ones already.

83

00:06:42,990  -->  00:06:48,270
If you want to learn more, definitely check out the cheatsheet as always and there, you'll find a link

84

00:06:48,300  -->  00:06:54,360
to a full article on the window object which will allow you to dive deeper into that and find out if

85

00:06:54,360  -->  00:06:57,540
it has that specific method you are looking for.

86

00:06:57,840  -->  00:07:04,410
Also keep in mind, the global scope in which we are working here refers to the window object, so the global

87

00:07:04,410  -->  00:07:11,070
object is the window object and therefore, you don't need to specify window dot anything, you

88

00:07:11,070  -->  00:07:18,120
can directly use the dot anything without the dot because again, we're on that object already by default

89

00:07:18,140  -->  00:07:18,600
.

90

00:07:19,050  -->  00:07:21,770
So that's the window object.
