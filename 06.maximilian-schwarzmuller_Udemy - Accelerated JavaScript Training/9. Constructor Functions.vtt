WEBVTT
1

00:00:01.320  -->  00:00:04.050
Well we already learned a lot about objects,

2

00:00:04.170  -->  00:00:10.620
we learned three different ways of creating them; literal notation, new object and object create

3

00:00:10.830  -->  00:00:15.300
and you learned the important role of prototypes.

4

00:00:15.300  -->  00:00:22.500
You learned how to access properties of objects, how to have objects inside objects and how to have methods

5

00:00:22.500  -->  00:00:26.020
on objects, so functions inside objects.

6

00:00:26.100  -->  00:00:33.330
You also learned that with the this keyword, you can access properties of an app object from inside of that

7

00:00:33.330  -->  00:00:34.230
object,

8

00:00:34.320  -->  00:00:36.140
that really is a lot.

9

00:00:36.150  -->  00:00:42.710
Now I want to show you yet another way to create objects and you might think 'why another way',

10

00:00:42.780  -->  00:00:47.700
this way really makes sense and is pretty powerful,

11

00:00:47.700  -->  00:00:50.430
I'm talking about constructor functions.

12

00:00:50.640  -->  00:00:53.270
What is that? Here you go.

13

00:00:54.030  -->  00:00:57.210
I'm creating a constructor function here like this;

14

00:00:57.210  -->  00:01:00.080
I create a normal function and I'll name it Person,

15

00:01:00.090  -->  00:01:06.390
notice that I chose to make good start with a capital P though that is of course my personal preference

16

00:01:06.420  -->  00:01:12.200
but it's also the style you'll commonly see in the Javascript world for constructor functions.

17

00:01:12.270  -->  00:01:13.400
So I have this function

18

00:01:13.440  -->  00:01:16.420
and for now I'm not going to enter anything here,

19

00:01:16.800  -->  00:01:21.240
this might not seem super useful but I'll extend this soon.

20

00:01:21.450  -->  00:01:28.230
I now create a new variable called person with a lowercase P at the beginning and I'll set this equal to

21

00:01:28.260  -->  00:01:30.840
new person.

22

00:01:31.980  -->  00:01:32.680
That's strange,

23

00:01:32.700  -->  00:01:39.750
remember that I used this with new object before? There I was using the built-in object object

24

00:01:39.780  -->  00:01:42.520
Javascript ships with, here

25

00:01:42.740  -->  00:01:49.710
I'm building something which is called a constructor function of which I can create new objects.

26

00:01:50.040  -->  00:01:55.920
This is another way Javascript offers to create objects and it has one big advantage which I will soon

27

00:01:55.920  -->  00:01:57.290
show.

28

00:01:57.300  -->  00:02:03.330
Now here, I can set person.name equal to Max

29

00:02:06.120  -->  00:02:13.500
and then if I print out person, let's see what's shown in the console,

30

00:02:13.620  -->  00:02:19.380
I get an object with name Max, so that looks exactly the same as in all the other lectures and it

31

00:02:19.380  -->  00:02:23.070
is, it's just a different way to create an object.

32

00:02:23.070  -->  00:02:28.920
However, let's check something; if I access the proto of this object,

33

00:02:28.920  -->  00:02:33.760
let's see if it is equal to Object.prototype.

34

00:02:33.780  -->  00:02:36.480
What do you think we'll see here?

35

00:02:36.580  -->  00:02:43.050
We get false because the prototype probably is equal to person,

36

00:02:43.050  -->  00:02:44.870
could that be?

37

00:02:46.020  -->  00:02:48.310
No, that's also false,

38

00:02:48.360  -->  00:02:51.650
so person is not the prototype.

39

00:02:52.080  -->  00:02:53.970
What is the prototype then?

40

00:02:54.510  -->  00:02:59.430
The prototype is person.prototype

41

00:03:02.130  -->  00:03:03.520
as you can see here.

42

00:03:03.570  -->  00:03:09.600
Now we didn't create person.prototype, Javascript kind of created it for us.

43

00:03:09.810  -->  00:03:13.680
As I explained, this function here is a constructor function,

44

00:03:13.710  -->  00:03:19.360
it's a normal function here but we use it as a constructor function by adding the new keyword here

45

00:03:19.710  -->  00:03:27.080
and this means we're constructing an object using this function here.

46

00:03:27.450  -->  00:03:36.330
Javascript automatically gives us a prototype for each of our functions here or of our objects created

47

00:03:36.390  -->  00:03:37.070
of

48

00:03:37.140  -->  00:03:43.560
this constructor functions which we can access at person, or whatever the name of our constructor function

49

00:03:43.560  -->  00:03:45.770
is, .prototype.

50

00:03:46.080  -->  00:03:54.000
So that is a certain prototype automatically created for us here which we can use and I can for example

51

00:03:54.000  -->  00:04:03.830
then say person.prototype.greet and again create my greet function here, console log

52

00:04:03.930  -->  00:04:14.240
Hello and I would be able to call person.greet here as you will see

53

00:04:14.370  -->  00:04:17.180
once I hit the run button here,

54

00:04:17.840  -->  00:04:20.440
Hello.

55

00:04:20.460  -->  00:04:27.460
So now we set our own prototype and we created an object of our own constructor,

56

00:04:27.930  -->  00:04:29.130
so very nice.

57

00:04:29.130  -->  00:04:34.320
What's the advantage? We could have set our own prototype with object create,

58

00:04:34.320  -->  00:04:40.350
we wouldn't have that fancy person.prototype thing but we would be able to set our own prototype

59

00:04:40.350  -->  00:04:43.620
anyways, so what is the advantage of this approach?

60

00:04:44.100  -->  00:04:49.260
Well the advantage is if we work with this function a bit more, currently it's empty and therefore, we

61

00:04:49.260  -->  00:04:56.780
can certainly discuss about its advantages but we can configure our object here,

62

00:04:57.120  -->  00:05:04.110
we can use this inside here too and for example set name equal to an empty string.

63

00:05:04.110  -->  00:05:10.590
Now this was used before and we used it inside an object but it's not only available inside an object,

64

00:05:10.630  -->  00:05:10.940
indeed

65

00:05:11.010  -->  00:05:14.970
we can even use it outside of anything,

66

00:05:14.970  -->  00:05:27.820
we can just log this here too. So let's see what now shows up in a console, we got quite a big object

67

00:05:27.820  -->  00:05:27.840
and

68

00:05:27.850  -->  00:05:31.270
this actually is our window object,

69

00:05:31.270  -->  00:05:33.560
this is our global scope,

70

00:05:33.730  -->  00:05:36.630
our window object when working in a browser,

71

00:05:36.790  -->  00:05:39.730
this is why we have this huge thing here,

72

00:05:40.180  -->  00:05:51.160
so I'm just going to clear this. This simply by default refers to itself and itself in the outer scope

73

00:05:51.160  -->  00:05:54.860
here or on the top level where we can write code in the editor

74

00:05:54.870  -->  00:06:05.520
here is the global object. In an object, we can refer to the object itself when using this

75

00:06:05.680  -->  00:06:12.130
and here in the constructor, we're referring to our person here

76

00:06:12.190  -->  00:06:14.920
when using this.

77

00:06:15.100  -->  00:06:27.100
So if I set Max here and I get rid of Max here and I now just log out my name,

78

00:06:27.580  -->  00:06:32.310
what will show up in a console? Max,

79

00:06:32.650  -->  00:06:38.080
because I'm setting it up here in my constructor function with which I'm creating the object and therefore

80

00:06:38.080  -->  00:06:41.050
I have access to this name here.

81

00:06:41.230  -->  00:06:51.460
Now if I go to my prototype and set up the name here too and set it to Anna, what's going to show up now?

82

00:06:51.470  -->  00:06:52.460
Still

83

00:06:53.230  -->  00:06:57.520
Max because here I'm setting it to Max.

84

00:06:57.520  -->  00:07:02.410
So this sets it to the object itself whereas this sets it to the prototype,

85

00:07:02.410  -->  00:07:09.610
so this is not overwriting this setting here, it's setting it on a higher level, to the prototype instead

86

00:07:09.610  -->  00:07:11.190
of the object.

87

00:07:11.620  -->  00:07:13.960
So here you see what constructor functions are

88

00:07:14.010  -->  00:07:18.170
therefore, we can create our own object,

89

00:07:18.190  -->  00:07:22.050
we can preconfigure them and then use this constructor

90

00:07:22.060  -->  00:07:27.880
to create objects based on it, to use it as such a blueprint,

91

00:07:27.880  -->  00:07:29.440
like in other languages,

92

00:07:29.470  -->  00:07:35.980
if you are familiar with them, you could have the class keyword to create classes as blueprints

93

00:07:36.160  -->  00:07:38.270
of which you can then create instances

94

00:07:38.380  -->  00:07:39.720
and this is what we're doing here,

95

00:07:39.850  -->  00:07:47.200
we're creating a person object of this blueprint and this blueprint still has its prototype and

96

00:07:47.200  -->  00:07:47.740
so on,

97

00:07:47.740  -->  00:07:52.750
so this prototype thing is not interfering with constructor functions, constructor functions are

98

00:07:52.750  -->  00:07:56.850
just an addition to create objects. Of course in here,

99

00:07:56.860  -->  00:07:59.270
I can not only set up this name,

100

00:07:59.380  -->  00:08:09.770
I could also set up this greet, set it equal to a function and log something, for example

101

00:08:09.950  -->  00:08:16.730
Hello I am, and then again referring this name, to my name.

102

00:08:17.170  -->  00:08:24.670
If I now call person.greet, what do you think will show up if I hit run?

103

00:08:25.480  -->  00:08:26.750
Hello I'm Max.

104

00:08:26.770  -->  00:08:29.120
So I'm executing this function here

105

00:08:29.650  -->  00:08:38.920
and this.name refers to the same this.name I'm setting here, so to the name of this object.

106

00:08:38.920  -->  00:08:48.460
Of course if I overwrite the name here, set it equal to Anna and I run this code, you see Hello I am Anna

107

00:08:48.520  -->  00:08:51.360
because I'm overwriting the name of this object.

108

00:08:51.370  -->  00:08:58.840
Notice though, I'm not overwriting the name of the blueprint object here, just of this instance.

109

00:08:58.990  -->  00:09:10.510
If I create another person, new person and I just copy this to also greet with this person, what

110

00:09:10.510  -->  00:09:13.660
do you think we'll see now?

111

00:09:14.620  -->  00:09:18.280
We see Anna and Max. This newly created person,

112

00:09:18.320  -->  00:09:22.020
another person, also uses this constructor

113

00:09:22.240  -->  00:09:29.260
and since I'm not overwriting the constructor here but only this instance which was created with this

114

00:09:29.260  -->  00:09:32.810
constructor, this instance here doesn't care,

115

00:09:32.950  -->  00:09:38.120
it still uses Max from the constructor function here

116

00:09:38.680  -->  00:09:48.940
and it also wouldn't care if I set person.prototype.name to Chris for example. If I run this,

117

00:09:49.310  -->  00:09:56.170
we still see only Anna and Max because the prototype is one level higher and we're not reaching it here because

118

00:09:56.200  -->  00:10:03.820
Javascript has no need to look up in a higher level because we get name in the object itself.

119

00:10:04.090  -->  00:10:09.760
So what's the relation between prototypes and constructor functions? Constructor functions allow us to

120

00:10:10.030  -->  00:10:15.990
create objects with some default fields and values if you want to put it like this

121

00:10:16.120  -->  00:10:21.840
and prototypes allow us to inherit from objects, so they are on different levels.

122

00:10:22.060  -->  00:10:26.970
Whereas here, we're just providing some blueprints which we can reuse,

123

00:10:27.010  -->  00:10:34.180
prototypes are more than just blueprints, they can act as blueprints but we always inherit them some

124

00:10:34.180  -->  00:10:39.460
kind of so, we're on a lower level if you want to put it like this.

125

00:10:39.790  -->  00:10:44.840
If I change this function here to greetGeneral for example,

126

00:10:44.860  -->  00:10:54.250
so on the prototype here and I now call greetGeneral on another person, let's see what gets printed

127

00:10:54.250  -->  00:10:55.470
now,

128

00:10:56.260  -->  00:10:57.330
Hello I'm Anna

129

00:10:57.400  -->  00:10:58.600
and hello.

130

00:10:58.600  -->  00:11:01.980
So greet is of course still available since we have it here

131

00:11:02.320  -->  00:11:09.550
but greetGeneral is also available since it's set up in the prototype of our blueprint, of our constructor

132

00:11:09.550  -->  00:11:10.140
function here,

133

00:11:10.150  -->  00:11:14.760
so the prototype of the object on which this instance here is based.

134

00:11:14.830  -->  00:11:17.950
Now since I'm talking about instances all the time,

135

00:11:17.950  -->  00:11:27.490
Javascript got a convenient little keyword to let us check if a certain variable is an instance of

136

00:11:27.490  -->  00:11:29.950
such a constructor function.

137

00:11:29.950  -->  00:11:36.730
I can do this just by checking if person is instanceOf,

138

00:11:36.730  -->  00:11:39.880
that's the keyword, person here.

139

00:11:39.970  -->  00:11:47.350
Remember that when I checked if person is the prototype of this, we got false because person.prototype

140

00:11:47.350  -->  00:11:49.090
was the prototype.

141

00:11:49.090  -->  00:11:56.830
However here if I run this, I get true because person here is 

142

00:11:56.830  -->  00:12:03.490
an instance of this person constructor functions and again, constructor functions are really

143

00:12:03.490  -->  00:12:13.330
just helpers to allow us to create our own objects and they ship with their own prototype, .prototype

144

00:12:13.420  -->  00:12:16.280
on our constructor function here.
