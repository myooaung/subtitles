1

00:00:01,970  -->  00:00:07,740
So you know the basics about objects and you know that this prototypes thing seems to be important,

2

00:00:07,760  -->  00:00:07,940
let's

3

00:00:08,100  -->  00:00:11,070
have a look at this in a little more detail now.

4

00:00:11,700  -->  00:00:14,470
Here's where I left, with object create and so on,

5

00:00:14,520  -->  00:00:15,840
I'll get rid of that,

6

00:00:15,870  -->  00:00:23,340
back to my basic object and I already mentioned that all objects in Javascript by default have a prototype

7

00:00:23,700  -->  00:00:27,870
which is Object.prototype

8

00:00:27,870  -->  00:00:31,730
and this again also is an object on its own.

9

00:00:32,250  -->  00:00:35,340
So can we check this?

10

00:00:35,340  -->  00:00:39,030
Can we access the prototype of this person here in some way?

11

00:00:39,270  -->  00:00:49,050
Well we do have a property on person, on each object called prototype, though we're not really able to

12

00:00:49,050  -->  00:00:50,020
access this,

13

00:00:50,040  -->  00:00:53,530
if I run this, you see I undefined,

14

00:00:53,550  -->  00:00:55,830
so that's not really working.

15

00:00:56,280  -->  00:01:04,170
Well, some browsers implemented a custom property which we can access to get the prototype but you should

16

00:01:04,170  -->  00:01:10,670
never ever use that in production as it is not safe, as this is added by the browsers and not part of the Javascript

17

00:01:10,670  -->  00:01:12,250
specification.

18

00:01:12,570  -->  00:01:15,850
This property I'm talking of looks a bit strange,

19

00:01:15,870  -->  00:01:24,060
it's __proto__, also sometimes referred to as dunder proto,

20

00:01:24,480  -->  00:01:30,470
so double underscore, double underscore at beginning and end and then proto in the middle.

21

00:01:30,470  -->  00:01:37,560
If I now click on run, you see we get some kind of object and this is the prototype, which is an object

22

00:01:37,560  -->  00:01:40,230
itself, of person.

23

00:01:40,230  -->  00:01:46,260
Now before we get too abstract here because I think this is, yes it's nice, we have this prototype, but it's

24

00:01:46,260  -->  00:01:51,390
more important to understand what is this prototype therefore, what's the sense of a prototype?

25

00:01:51,390  -->  00:01:58,680
We know we can kind of access it with this unsave method here or this unsave property,

26

00:01:58,680  -->  00:02:03,670
but why do we have this prototype in the first place?

27

00:02:03,690  -->  00:02:05,150
I'll show you something,

28

00:02:05,610  -->  00:02:09,520
I'll first call anything as a method here

29

00:02:09,990  -->  00:02:13,080
and unsurprisingly, I get an error.

30

00:02:13,200  -->  00:02:22,250
Next I call toString here and now watch what happens if I hit run,

31

00:02:22,970  -->  00:02:26,060
we get object object as a string here.

32

00:02:26,580  -->  00:02:34,800
So this person seems to have some kind of toString method which basically prints it as a string and

33

00:02:34,800  -->  00:02:41,370
this is just Chrome's way of displaying it for example. toString is not a method we wrote

34

00:02:41,370  -->  00:02:43,940
on this object, we only have two properties, 

35

00:02:43,980  -->  00:02:45,260
no method at all,

36

00:02:45,270  -->  00:02:49,270
there is no function inside this object here.

37

00:02:49,650  -->  00:02:56,520
So something else seems to be going on here and the something else is the prototype indeed, the prototype

38

00:02:56,520  -->  00:03:01,980
has some built-in methods which are available to all objects.

39

00:03:02,010  -->  00:03:03,710
That is what the prototype is

40

00:03:03,720  -->  00:03:12,390
there for, we can inherit from it and this is Javascript's form of inheritance to get certain methods

41

00:03:12,810  -->  00:03:21,750
which the object we're creating itself might not implement on its own but the parent object and that

42

00:03:21,750  -->  00:03:23,300
is a difficult term here

43

00:03:23,310  -->  00:03:25,450
but you can think of it as the parent

44

00:03:25,560  -->  00:03:27,310
the prototype has.

45

00:03:27,630  -->  00:03:34,860
So like the name implies, it's the prototype of which we built other object and we can add custom methods or

46

00:03:34,860  -->  00:03:42,290
fields to our objects but they will always have access to the prototypes, objects and methods.

47

00:03:43,170  -->  00:03:53,280
If I now try the following and I go to object prototype and I create a new field, greet which I set

48

00:03:53,300  -->  00:03:56,460
equal to a function

49

00:03:56,460  -->  00:04:08,620
and here I log Hello there to the console and I now try to access person greet,

50

00:04:08,820  -->  00:04:16,020
what do you think will happen if I hit run? We see Hello there because I now added a new method, greet,

51

00:04:16,560  -->  00:04:22,460
to object prototype which as I mentioned before is the root prototype

52

00:04:22,650  -->  00:04:30,390
all objects have in Javascript by default and therefore, we can access greet on person, even though person

53

00:04:30,390  -->  00:04:34,550
itself doesn't have this greet method here

54

00:04:34,590  -->  00:04:38,660
It's set up on a prototype but therefore it is available on person.

55

00:04:38,670  -->  00:04:41,910
So we have kind of a prototype chain here,

56

00:04:42,600  -->  00:04:49,250
we have here our greet call on our object which doesn't have this greet function.

57

00:04:49,350  -->  00:04:56,360
So Javascript will first, when it finds this code, see if object has agreed method which it doesn't,

58

00:04:56,490  -->  00:05:02,950
it will then reach out to the prototype of object and that doesn't always have to be Object.prototype

59

00:05:02,950  -->  00:05:04,160
directly,

60

00:05:04,200  -->  00:05:11,700
we might have another prototype in between for example or we might have set our own prototype.

61

00:05:11,850  -->  00:05:18,810
If it doesn't find it on the prototype of object, it will look to the prototype of the prototype and

62

00:05:18,810  -->  00:05:19,830
so on.

63

00:05:19,830  -->  00:05:27,660
So this is this chain where Javascript will work its way up through all the levels of prototypes an object

64

00:05:27,660  -->  00:05:30,060
might have inherited from.

65

00:05:30,090  -->  00:05:34,790
Now of course, our person object here only has one prototype, Object.prototype

66

00:05:34,800  -->  00:05:41,550
but you will later see examples for objects which have a custom prototype in between.
