WEBVTT
1

00:00:01.280  -->  00:00:07.080
But it's really important to understand how all that works together and that constructors are blueprints

2

00:00:07.110  -->  00:00:14.100
for your objects of which you can create instance of, so that you can create instances of your constructor

3

00:00:14.100  -->  00:00:19.440
functions and that you've got prototypes which allow you to implement inheritance which sit on a higher

4

00:00:19.440  -->  00:00:26.170
level and provide kind of a fallback mechanism to find missing functions or fields.

5

00:00:26.580  -->  00:00:30.200
So you learned four different ways of creating objects,

6

00:00:30.330  -->  00:00:34.570
here is the first one; using literal notation.

7

00:00:34.620  -->  00:00:39.530
It's one you'll often use, it's straightforward, easy, you directly see what you created.

8

00:00:39.720  -->  00:00:44.160
You got Object.prototype as a prototype

9

00:00:44.310  -->  00:00:47.940
and by the way, this has a constructor function too.

10

00:00:48.180  -->  00:00:48.970
You can see it

11

00:00:48.990  -->  00:00:57.990
if you check if person is an instance of object, so not Object.prototype which is a prototype but

12

00:00:57.990  -->  00:00:59.450
just object.

13

00:00:59.460  -->  00:01:02.640
If I run this, you'll see that this is true.

14

00:01:02.640  -->  00:01:09.030
This of course makes sense if you have a look at the second way of creating an object, with new object

15

00:01:09.030  -->  00:01:09.530
.

16

00:01:09.570  -->  00:01:16.080
This is identical to the literal notation you saw before and here, you directly see that object seems to be

17

00:01:16.080  -->  00:01:19.520
the constructor function used with new here.

18

00:01:19.620  -->  00:01:23.330
The third method shown was using object create, here

19

00:01:23.580  -->  00:01:29.760
you can pick your prototype and you can set it to null if you don't want this to have a prototype,

20

00:01:29.910  -->  00:01:37.650
then you would not even have Object.prototype as a fallback mechanism, as you can see if you try to

21

00:01:37.920  -->  00:01:43.430
log person.toString which would work on all objects

22

00:01:43.440  -->  00:01:47.520
but here, you get an error that you don't have that function

23

00:01:47.520  -->  00:01:55.070
since this doesn't have Object.prototype as a fallback mechanism. If you check if this is an instance

24

00:01:55.070  -->  00:02:00.700
of object, you see that this is also false.

25

00:02:00.960  -->  00:02:06.180
So this is a way to create an object which is pretty standalone,

26

00:02:06.210  -->  00:02:11.100
the last method you saw was using a constructor function or your own constructor function,

27

00:02:11.130  -->  00:02:17.260
so you're not using the built-in new object but instead new person based on this function set up here

28

00:02:17.270  -->  00:02:17.530
.

29

00:02:17.880  -->  00:02:20.490
And I just talked a lot about this,

30

00:02:20.570  -->  00:02:26.820
so this has the advantage of allowing you to build your own blueprint of which you create objects

31

00:02:27.000  -->  00:02:30.260
and of course you can create multiple objects of that blueprint.

32

00:02:30.390  -->  00:02:37.380
It also ships with its own prototype, person.prototype but it also would have Object.prototype as

33

00:02:37.380  -->  00:02:44.610
a high level fallback which all objects have besides the exception you just saw created with object.create

34

00:02:44.670  -->  00:02:46.680
passed null.
