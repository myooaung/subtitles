WEBVTT
1

00:00:00.930  -->  00:00:07.200
So that have been the window object and the location object, time for the document object which of course

2

00:00:07.290  -->  00:00:14.460
is not really the important one but the one you will work with a lot because you want to

3

00:00:14.460  -->  00:00:17.490
interact with the DOM, with the HTML code.

4

00:00:18.030  -->  00:00:25.370
So the document object is just another object on the window object, so which has another property,

5

00:00:25.470  -->  00:00:30.710
so I can print it like this, console log document. If I hit run,

6

00:00:30.840  -->  00:00:40.270
our screen is crowded by stuff because the document object holds the complete DOM, the complete HTML

7

00:00:40.290  -->  00:00:43.740
code and a bunch of other properties and methods

8

00:00:43.770  -->  00:00:48.130
and events we may use and I'll come into events soon enough too.

9

00:00:48.420  -->  00:00:51.000
So this is not really helpful.

10

00:00:51.030  -->  00:00:56.670
The document does have some other things, for example we can access a URL property to get our URL

11

00:00:56.760  -->  00:01:04.430
but we could use location for that too of course. Document also has a title property,

12

00:01:04.710  -->  00:01:10.730
if I print this, we get JSBin and this of course refer to the title of this page

13

00:01:10.730  -->  00:01:18.480
you can also see up here in the tab. The document also of course has its body,

14

00:01:18.480  -->  00:01:31.380
so if I log this, we get our DOM, our translated HTML code and all the events attached

15

00:01:31.390  -->  00:01:32.880
there and so on,

16

00:01:32.880  -->  00:01:35.870
so this is a very important part

17

00:01:36.090  -->  00:01:41.570
and on that body for example, we may access the children.

18

00:01:41.700  -->  00:01:51.420
Now if we print this, then we see an array of all the HTML tags represented of course as objects

19

00:01:51.420  -->  00:01:58.030
here because again, they are translated into objects by the browser with their own attributes and properties

20

00:01:58.040  -->  00:01:58.370
and

21

00:01:58.950  -->  00:02:04.960
we can work with that and manipulate this. To show this, I'll open up my HTML

22

00:02:05.040  -->  00:02:11.420
view here and I'll add h1 tag where I say hello

23

00:02:12.030  -->  00:02:16.780
and now I want to log the first children,

24

00:02:17.040  -->  00:02:18.630
let's see what happens if I hit run.

25

00:02:22.500  -->  00:02:30.000
As you can see down here, the tag name is h1 and the text content is hello, so I'm kind of selecting

26

00:02:30.000  -->  00:02:31.520
this element

27

00:02:31.530  -->  00:02:36.370
I just created because it's a first child in the body here,

28

00:02:36.720  -->  00:02:42.600
so I'm selecting this with the index of 0 and then I can access any of the properties you see here,

29

00:02:42.600  -->  00:02:49.470
for example text content if I clear which just gives me hello,

30

00:02:49.470  -->  00:02:53.560
so the text content of that element and that's important.

31

00:02:54.000  -->  00:03:01.560
Each of the HTML elements you write here is transformed into its own object by the browser with all the

32

00:03:01.560  -->  00:03:09.000
properties you just saw and the properties and objects you have depends on the type of HTML element

33

00:03:09.000  -->  00:03:16.680
is. A link element has other properties than a button and you can use all those properties and methods

34

00:03:16.720  -->  00:03:24.420
and whatever this element might have by simply accessing them here on the object which they are in the

35

00:03:24.420  -->  00:03:29.520
end, the object created by the browser, the object you may access through Javascript

36

00:03:29.520  -->  00:03:32.970
and that of course means you cannot only log it,

37

00:03:33.060  -->  00:03:42.600
you could also set the text content to something else and now I'll need the output for that to show up and

38

00:03:42.600  -->  00:03:46.200
watch this hello text here, if I hit run,

39

00:03:46.590  -->  00:03:48.610
it's changed to something else.

40

00:03:48.900  -->  00:03:57.060
And this is how you can interact with your DOM, with the HTML code and change it using runtime which

41

00:03:57.060  -->  00:04:03.990
of course creates all those fancy effects users like so much because you don't need to reload the page,

42

00:04:03.990  -->  00:04:06.250
you don't need to get a new page from the server,

43

00:04:06.330  -->  00:04:13.110
you change the existing page and single page applications frameworks like Angular 2, if you have heard

44

00:04:13.110  -->  00:04:16.470
of that, do exactly this.

45

00:04:16.470  -->  00:04:23.400
They have one single page and they change it all the time and you can do this on your own as well.

46

00:04:23.400  -->  00:04:31.360
You access the properties of your HTML elements and you change them or you just get them or whatever

47

00:04:31.440  -->  00:04:33.220
you need to do.

48

00:04:33.240  -->  00:04:37.090
Now how do you find out which properties an element has?

49

00:04:37.350  -->  00:04:44.510
Well you saw one method, you can simply log it to the console like we did, right,

50

00:04:44.520  -->  00:04:46.940
document body

51

00:04:47.150  -->  00:04:51.790
children zero, this is the h1 element

52

00:04:51.790  -->  00:04:56.640
and if I log this again, here you go.

53

00:04:56.640  -->  00:04:59.600
These are all the properties you may access

54

00:04:59.790  -->  00:05:07.710
and now before you fall off your chair, you don't really need access to all of them.

55

00:05:07.980  -->  00:05:16.230
The most important ones are the ones you know from HTML coding, like setting the style or setting

56

00:05:16.230  -->  00:05:19.320
the text through text content here of course

57

00:05:19.320  -->  00:05:23.280
and yes let's set the style for example to see this.

58

00:05:23.580  -->  00:05:31.610
So I'll again get rid of the log and instead access the style property

59

00:05:31.830  -->  00:05:38.180
and here, this style property itself is an object with all the available CSS styles,

60

00:05:38.400  -->  00:05:41.350
for example the background color.

61

00:05:41.400  -->  00:05:47.980
Now notice, we don't have a dash here, it's not background-color,

62

00:05:48.240  -->  00:05:55.410
it's with a capital C because we can't use dashes in Javascript variable or property names

63

00:05:55.530  -->  00:06:01.230
but I could set it to red and if I hit run, we got this red background

64

00:06:01.250  -->  00:06:04.090
now. And this is how you can interact with it

65

00:06:04.170  -->  00:06:10.950
and it's really just diving in, looking it up and learning it because as you can see, it's a bit of a too long

66

00:06:10.950  -->  00:06:19.170
list to go through its details here but here for example, you have the style object, this is still the object from

67

00:06:19.170  -->  00:06:21.730
before which I printed, this h1 element

68

00:06:21.810  -->  00:06:28.470
and here you see all the CSS styles you can set, the background color which wasn't set before

69

00:06:28.500  -->  00:06:30.310
but now would be set to red here.

70

00:06:30.310  -->  00:06:38.220
Now rightfully, you might say this is all nice but it's a bit difficult to select all the elements

71

00:06:38.220  -->  00:06:44.880
like this because imagine you don't have this but you have an unordered list where you have a list item,

72

00:06:44.880  -->  00:06:52.800
where you have a link, where you then want to access something like this link and you have multiple

73

00:06:52.800  -->  00:06:59.940
list items and you certainly don't want to say document children, then here this is the first children,

74

00:06:59.970  -->  00:07:03.690
then the children of this element because you can also chain this,

75

00:07:03.690  -->  00:07:11.580
you can select children of a child element and then this one, that is really difficult.

76

00:07:11.700  -->  00:07:16.000
So we'll learn other ways of doing this soon.
