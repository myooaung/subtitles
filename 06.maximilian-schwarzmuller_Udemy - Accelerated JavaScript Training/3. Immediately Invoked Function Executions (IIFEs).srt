1

00:00:01,680  -->  00:00:06,590
Besides closures, we also got another special thing about functions.

2

00:00:06,750  -->  00:00:13,880
We can write functions that will immediately get executed when the code runs through our Javascript file,

3

00:00:13,880  -->  00:00:14,420
these

4

00:00:14,490  -->  00:00:23,580
functions are called immediately invoked function executions or IIFES or iifes.

5

00:00:23,630  -->  00:00:24,600
How does this work

6

00:00:24,630  -->  00:00:26,560
and why could we need that?

7

00:00:26,940  -->  00:00:38,880
Let's have an example; I'll create a function and it'll be a function named calc and I will just log

8

00:00:38,900  -->  00:00:39,610
.

9

00:00:40,320  -->  00:00:46,590
Now if I hit run, you of course didn't see anything because this function doesn't get executed automatically

10

00:00:46,590  -->  00:00:48,000
.

11

00:00:48,030  -->  00:00:54,900
Now however, I can add parentheses around it and add parentheses after it.

12

00:00:54,900  -->  00:01:00,300
Now this looks strange but it looks a bit like a function call where

13

00:01:00,300  -->  00:01:01,950
this would be the name

14

00:01:02,100  -->  00:01:06,710
and then we have parentheses to execute this function if we imagine it like this.

15

00:01:06,870  -->  00:01:10,610
If I now hit run, what do you think we'll see?

16

00:01:11,010  -->  00:01:12,070
We see calc,

17

00:01:12,270  -->  00:01:19,120
so this function here inside the first pair of parentheses gets executed immediately.

18

00:01:19,310  -->  00:01:22,790
Now rightfully, you might say why do I need this,

19

00:01:22,800  -->  00:01:28,170
I could have just written console log

20

00:01:29,010  -->  00:01:31,260
calc, right?

21

00:01:31,350  -->  00:01:37,880
Because all the code here, besides function, gets executed immediately anyways, so why would I do it 

22

00:01:37,920  -->  00:01:41,290
this way, this is just more characters and it looks a bit strange.

23

00:01:41,310  -->  00:01:44,620
So what's the advantage of this approach?

24

00:01:44,670  -->  00:01:50,720
The advantage of this approach simply is that we are using local scope here.

25

00:01:50,820  -->  00:01:54,660
Remember that functions create their own scope, the local scope,

26

00:01:54,660  -->  00:02:01,170
so by doing it this way, we make sure that we don't pollute the global scope with our variables and I'll showcase

27

00:02:01,170  -->  00:02:07,480
this. I'll set up a variable here which I will call number and this will be just 10

28

00:02:08,040  -->  00:02:12,310
and then I will simply log number here.

29

00:02:12,840  -->  00:02:18,330
Now I will also try to log number outside of this function then,

30

00:02:18,330  -->  00:02:24,000
so this line here will get executed after this function and we'll see if number is available here too.

31

00:02:24,000  -->  00:02:33,540
What do you think I'll get if I hit run? 10 and then that number is not defined, an error because it's

32

00:02:33,780  -->  00:02:38,680
registered in the local scope of this function here and not on the global scope

33

00:02:38,820  -->  00:02:45,660
and that is the reason why you would use iifes, just to make sure that you're not polluting the global

34

00:02:45,720  -->  00:02:47,730
scope with variables

35

00:02:47,880  -->  00:02:55,380
or maybe you might have variables in the global scope that interfere with some other variables,

36

00:02:55,380  -->  00:02:55,410
maybe

37

00:02:55,410  -->  00:03:01,140
you have a third-party package which uses certain local variables and you accidentally overwrite

38

00:03:01,140  -->  00:03:04,520
them or in your application because it's very complex,

39

00:03:04,530  -->  00:03:07,080
you do the same and overwrite global values,

40

00:03:07,080  -->  00:03:14,360
so by doing this, you make sure that the variable is only available inside this local scope and not everywhere

41

00:03:14,390  -->  00:03:14,620
.

42

00:03:14,790  -->  00:03:20,820
Now I'm not saying you should write all your code as iifes but it might be a good approach

43

00:03:21,030  -->  00:03:27,810
if global scale pollution could be an issue in your application, which of course depends on the

44

00:03:27,810  -->  00:03:29,270
size of your project

45

00:03:29,280  -->  00:03:33,900
and as I said, maybe the inclusion of third-party packages.

46

00:03:33,900  -->  00:03:38,590
Now another interesting thing is you can also pass a value to an iife,

47

00:03:38,730  -->  00:03:46,830
so if I add the input here and I set number equal to input and then I pass 10 here in the second

48

00:03:46,830  -->  00:03:53,520
pair of parentheses, I get rid of this console log function which was throwing the error, if I now hit

49

00:03:53,550  -->  00:03:54,700
run,

50

00:03:54,960  -->  00:03:56,100
we still see 10,

51

00:03:56,100  -->  00:04:02,490
so we're able to pass the 10 into this iife and then use it in this function.

52

00:04:02,490  -->  00:04:06,160
Now what do you think happens if I do the following;

53

00:04:06,750  -->  00:04:08,250
I create an object

54

00:04:12,210  -->  00:04:14,430
and I pass this object into my function

55

00:04:17,580  -->  00:04:25,350
and in here what I do is I'm not logging anything but I'm setting object.name equal to Max and

56

00:04:25,350  -->  00:04:29,970
now I log object.

57

00:04:30,060  -->  00:04:31,370
What do you think I'll get if I hit

58

00:04:31,390  -->  00:04:39,090
run? I get the object with the name because we created the object on the global scope, so it

59

00:04:39,090  -->  00:04:41,340
is registered in the global scope

60

00:04:41,580  -->  00:04:47,730
and then yes I'm using an iife but in the iife I'm only changing this object which is already

61

00:04:48,150  -->  00:04:53,850
existing on a global scope, therefore I am able to print it here and I do see the changes because again,

62

00:04:53,940  -->  00:04:59,580
I'm changing the global scope object, not a local scope variable here,

63

00:04:59,580  -->  00:05:03,990
I'm not creating a new variable inside this function.

64

00:05:03,990  -->  00:05:05,620
So that are iifes

65

00:05:05,870  -->  00:05:08,450
and that is how you use them and why you could use them

66

00:05:08,470  -->  00:05:12,890
and as I said, you don't have to write all your code in iifes, you may do it of course,

67

00:05:12,930  -->  00:05:20,380
it really depends on your requirements and if the global scope should be kind of cleaned up or if

68

00:05:20,430  -->  00:05:25,140
you might have problems with other parts of your app or other packages

69

00:05:25,140  -->  00:05:29,910
or if this isn't an issue in which case you probably don't need iifes for that.
