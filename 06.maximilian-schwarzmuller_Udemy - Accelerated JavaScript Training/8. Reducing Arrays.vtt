WEBVTT
1

00:00:01.620  -->  00:00:06.860
The final method I want to show you is the reduce method,

2

00:00:07.020  -->  00:00:08.940
that's an interesting one too.

3

00:00:08.940  -->  00:00:21.120
This again takes function as an argument and now this function takes two arguments, the value as well

4

00:00:21.120  -->  00:00:24.680
but before that, the total

5

00:00:25.410  -->  00:00:32.820
and before I explain what this means, I'll quickly show what's the output of this method here,

6

00:00:32.970  -->  00:00:37.550
so I'll get rid of new array here and here I will return something,

7

00:00:37.740  -->  00:00:40.970
I will return total plus value.

8

00:00:41.010  -->  00:00:46.430
Now for this to work correctly, I'll also get rid of all of this code, so that I'm only working with numbers

9

00:00:46.440  -->  00:00:48.600
here for this example.

10

00:00:48.810  -->  00:00:50.290
If I now hit run,

11

00:00:50.430  -->  00:00:55.530
do you have an idea of what might be the result of this?

12

00:00:55.620  -->  00:01:00.300
I get 10 and then you see the original array wasn't changed.

13

00:01:00.300  -->  00:01:10.950
So why do I get 10? Reduce reduces an array to a single value and with the function we pass here, we

14

00:01:10.950  -->  00:01:15.190
specify the logic by which this array should be reduced.

15

00:01:15.330  -->  00:01:25.750
So here for example, by adding all the values up because four plus three plus two plus one is 10.

16

00:01:25.800  -->  00:01:33.690
So this will automatically pass in the current total result, this is a recursive function so it's called

17

00:01:33.720  -->  00:01:36.480
over and over again until it's done

18

00:01:37.030  -->  00:01:42.790
and at the beginning for the first element, total is of course 0, value will be 1,

19

00:01:42.810  -->  00:01:46.100
it then adds zero plus one

20

00:01:46.450  -->  00:01:56.740
and in the next step, total is 1 because 0 plus 1, we're returning the new total here and the new value is 2.

21

00:01:56.760  -->  00:02:02.440
So now it adds 1 plus 2 and it returns three as the new total and so on.

22

00:02:02.670  -->  00:02:05.790
And I can show this by printing total

23

00:02:08.790  -->  00:02:18.120
or let's say I print a little text here, total which should be my total, I can of course use addition here

24

00:02:18.120  -->  00:02:27.030
as you learned and then value just to have a nice log here to see what's going on.

25

00:02:27.060  -->  00:02:36.660
If I now hit run, you see the total is 1, the value is 2 because it kind of skips the first step where

26

00:02:36.660  -->  00:02:43.110
the total is 0, it right away starts with the first element and infers that the total has to be

27

00:02:43.110  -->  00:02:47.520
one, the first element in this case, then it gets to the two,

28

00:02:47.670  -->  00:02:51.820
so to this element here, adds it to the total, we get a total of three,

29

00:02:51.840  -->  00:02:57.440
it gets to the next element, it gets a total of six before it gets to the last element,

30

00:02:57.540  -->  00:02:58.620
total of four

31

00:02:58.680  -->  00:02:59.810
and then we're done,

32

00:02:59.810  -->  00:03:04.350
it has no more elements and therefore it returns this overall sum, 10.

33

00:03:04.590  -->  00:03:06.340
So this is what reduce does,

34

00:03:06.420  -->  00:03:12.780
it helps you to shrink down an array, to a single element or a single value and you define how this should

35

00:03:12.780  -->  00:03:18.930
happen, how you want this array to be transformed into a single value, how you want to reduce it to a

36

00:03:18.930  -->  00:03:19.280
number

37

00:03:19.280  -->  00:03:19.980
in this case.
