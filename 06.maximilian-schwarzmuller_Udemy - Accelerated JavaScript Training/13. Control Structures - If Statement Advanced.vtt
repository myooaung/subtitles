WEBVTT
1

00:00:01.590  -->  00:00:09.960
Now what do you think happens if I set condition to one, instead of false or true?

2

00:00:09.960  -->  00:00:15.090
What do you think we'll see if I hit run? We get executed,

3

00:00:15.090  -->  00:00:16.980
so we're reaching this part.

4

00:00:17.070  -->  00:00:22.260
The reason for this is that one is interpreted as true

5

00:00:22.440  -->  00:00:30.190
and on the other hand zero, as you will see if I hit run, is interpreted as false.

6

00:00:30.510  -->  00:00:39.750
That's common in a lot of languages and Javascript is kind of casting your value here, 0 or 1 into

7

00:00:39.750  -->  00:00:40.540
a boolean,

8

00:00:40.650  -->  00:00:43.980
so it's translating it into true or false.

9

00:00:43.980  -->  00:00:47.550
Now what happens if I set condition to two?

10

00:00:48.270  -->  00:00:54.250
Let's see what happens if I hit run. Well we also get executed,

11

00:00:54.300  -->  00:01:03.920
so two also gets interpreted as true here but this is a bit intriguing to be honest.

12

00:01:04.080  -->  00:01:12.960
Let me add a console log statement and print something else. I want to print if one equals true,

13

00:01:13.140  -->  00:01:16.940
so if I run this, we get executed and then we get true,

14

00:01:16.980  -->  00:01:18.340
so one equals true

15

00:01:18.690  -->  00:01:26.760
and if I add one extra equal sign, we get false of course because this is a boolean and this is a number

16

00:01:26.780  -->  00:01:27.220
.

17

00:01:27.630  -->  00:01:33.100
What happens if I check if two equals true?

18

00:01:33.240  -->  00:01:40.390
You see we get false but here, if we set it to two, this gets executed nonetheless

19

00:01:40.410  -->  00:01:48.900
even though this seems to be not equal to true. So 2 is not equal to true, whilst one was equal to true

20

00:01:48.920  -->  00:01:49.360
but

21

00:01:49.830  -->  00:01:57.570
if we set the condition here to two, it somehow still is interpreted as being true even though we

22

00:01:57.570  -->  00:01:59.840
just checked that this is not the case.

23

00:01:59.940  -->  00:02:01.570
What's happening here?

24

00:02:02.130  -->  00:02:06.850
Well what's happening here is, it's working the other way around,

25

00:02:07.170  -->  00:02:16.460
zero is equal to false and therefore Javascript will treat everything not being equal to zero

26

00:02:16.740  -->  00:02:19.780
as fulfilling this if condition.

27

00:02:19.920  -->  00:02:28.590
So basically two is not the same as true but it's enough to fulfill this condition, only if we set this

28

00:02:28.590  -->  00:02:29.990
to zero

29

00:02:30.000  -->  00:02:34.020
are we explicitly telling Javascript that this is false,

30

00:02:34.050  -->  00:02:42.960
so everything besides zero will be interpreted as true, even though technically only one is equal to true,

31

00:02:42.970  -->  00:02:43.120
the

32

00:02:43.260  -->  00:02:47.970
rest is only treated as such but it's not the same.

33

00:02:47.970  -->  00:02:57.930
That is important to understand when working with these numbers as booleans, only 0 and 1 can be cast

34

00:02:57.960  -->  00:02:59.210
into booleans,

35

00:02:59.220  -->  00:03:02.850
the rest is only treated as true,

36

00:03:03.060  -->  00:03:06.400
that is really important to understand.

37

00:03:07.260  -->  00:03:12.830
So what if I'm assigning this to a negative value of -1?

38

00:03:12.990  -->  00:03:14.370
It's still getting executed,

39

00:03:14.430  -->  00:03:18.010
so negative values are treated as true as well

40

00:03:18.390  -->  00:03:22.610
and that is important to understand and be aware of.

41

00:03:24.060  -->  00:03:25.100
So I'll get rid of this

42

00:03:25.110  -->  00:03:28.560
but what happens if I set this equal to

43

00:03:31.500  -->  00:03:35.530
some text and now I'm checking condition which is text.

44

00:03:35.550  -->  00:03:38.400
What do you think we'll now see?

45

00:03:39.120  -->  00:03:41.970
We still get executed, so text,

46

00:03:42.020  -->  00:03:45.880
a string, is also interpreted as true

47

00:03:45.900  -->  00:03:50.320
and what happens if I set this to false?

48

00:03:51.540  -->  00:03:55.220
Still, any text is interpreted as true.

49

00:03:55.770  -->  00:03:57.480
And what if I set this equal to null,

50

00:03:57.480  -->  00:04:01.850
what do you think we'll see now if I hit run?

51

00:04:02.910  -->  00:04:05.040
Well now we get to not executed,

52

00:04:05.040  -->  00:04:13.350
so null is treated like false and this is an important behavior because in more complex applications, you'll

53

00:04:13.440  -->  00:04:19.740
often have the case that you want to check if a certain variable is set or if a certain variable is

54

00:04:19.740  -->  00:04:20.010
not null.

55

00:04:20.010  -->  00:04:25.860
For example if you're reaching out to some kind of server and you get back the answers sometimes

56

00:04:25.860  -->  00:04:29.990
in the future but you are using the variable before having your answer,

57

00:04:30.180  -->  00:04:34.170
you might want to check if it is actually set and not execute any code

58

00:04:34.170  -->  00:04:41.880
if it is not set, so if it is null and therefore it's important that null is treated like false. So that

59

00:04:41.880  -->  00:04:43.770
was quite a lot of talking about a 

60

00:04:44.100  -->  00:04:52.260
generally simple statement but it is key to understand what is interpreted as true and false because

61

00:04:52.290  -->  00:04:54.470
otherwise you will run into nasty bugs

62

00:04:54.600  -->  00:04:59.530
when you try to do something and suddenly, things are treated as true or false

63

00:04:59.550  -->  00:05:02.400
even though you did not expect that to happen.
