WEBVTT
1

00:00:02.310  -->  00:00:04.200
So we had to look at conditionals,

2

00:00:04.230  -->  00:00:12.240
so control structures which allowed us to change the flow of code execution based on certain conditions

3

00:00:12.240  -->  00:00:14.110
being true or false.

4

00:00:14.460  -->  00:00:21.780
Another important control structure are loops, which allow us to execute code multiple times, so more

5

00:00:21.780  -->  00:00:26.010
than once. I'll have a look at the for loop first

6

00:00:26.010  -->  00:00:33.050
and you might know this loop from other languages of course. A for loop is created like this,

7

00:00:33.060  -->  00:00:38.120
we use the for keyword and then we have parentheses. Here

8

00:00:38.340  -->  00:00:43.370
we set up a variable which will be used inside this loop,

9

00:00:43.670  -->  00:00:47.360
typically i and we set it to an initial value,

10

00:00:47.370  -->  00:00:56.460
for example 0 which is a common case. Then we have a semi-colon and then we specify the condition which

11

00:00:56.460  -->  00:00:59.350
defines how long the loop should be running,

12

00:00:59.400  -->  00:01:05.740
for example that i, the variable we just set up here, should be smaller than 5.

13

00:01:05.880  -->  00:01:08.950
So this loop will execute as long as i

14

00:01:09.000  -->  00:01:11.500
is smaller than 5.

15

00:01:11.670  -->  00:01:16.390
Again, we have a semi-colon and then we specify what we want to do with

16

00:01:16.410  -->  00:01:19.880
i upon each iteration. Here

17

00:01:19.980  -->  00:01:26.540
I want to increment it by one and we can use the increment operator for this by simply adding two plus

18

00:01:26.540  -->  00:01:28.270
signs right after i

19

00:01:28.290  -->  00:01:30.510
which of course is the variable name.

20

00:01:30.570  -->  00:01:35.040
This will count up i by one upon

21

00:01:35.070  -->  00:01:39.040
each code execution or each loop round here.

22

00:01:39.270  -->  00:01:46.350
So whenever we start a new round in this loop or whenever we finish a round to be precise, we won't count

23

00:01:46.440  -->  00:01:46.810
up

24

00:01:46.830  -->  00:01:48.300
i by one,

25

00:01:48.300  -->  00:01:50.520
so add 1 to it.

26

00:01:50.520  -->  00:01:56.550
Then I have curly braces again to define the code which should get executed inside this loop and I will

27

00:01:56.550  -->  00:01:58.540
just print out i,

28

00:01:58.830  -->  00:02:01.050
so this variable here.

29

00:02:01.470  -->  00:02:05.650
What do you think we'll see if I hit run?

30

00:02:05.840  -->  00:02:09.480
We see is 0, 1, 2, 3 and 4,

31

00:02:09.750  -->  00:02:11.410
so we're not seeing 5

32

00:02:11.730  -->  00:02:17.550
but as you can see, we executed it five times and we started at zero which is the initial value

33

00:02:17.560  -->  00:02:18.090
.

34

00:02:18.600  -->  00:02:28.710
So technically, what happened here is that we set i to zero, print it out, add 1 to it because that is

35

00:02:28.710  -->  00:02:34.710
what we do upon each time we finish one round of this loop and we finished around after this code

36

00:02:34.710  -->  00:02:37.440
line since we have no additional code coming

37

00:02:38.100  -->  00:02:41.110
and then we got i equaled to 1.

38

00:02:41.400  -->  00:02:47.790
So we continue since it is still smaller than five and we continue as long until it is

39

00:02:47.790  -->  00:02:53.070
four, then we print out this value a last time, four

40

00:02:53.220  -->  00:02:55.220
and then we add 1 to it again.

41

00:02:55.440  -->  00:02:56.420
Now it's five

42

00:02:56.430  -->  00:02:59.240
and therefore this condition is no longer satisfied, i

43

00:02:59.290  -->  00:03:02.000
is not smaller than 5 anymore and

44

00:03:02.100  -->  00:03:07.050
therefore this loop is now quit or we exit out of the loop.

45

00:03:07.050  -->  00:03:10.830
This is why we print 1 to 4 here.
