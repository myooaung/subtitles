1

00:00:01,560  -->  00:00:09,960
So you now learned about the basic values you can assign to variables, which data structures and types

2

00:00:09,960  -->  00:00:12,300
you got available.

3

00:00:12,300  -->  00:00:19,680
Now before we dive deeper, let's have a look at some syntactical things which are important

4

00:00:19,680  -->  00:00:21,740
to know in Javascript.

5

00:00:21,750  -->  00:00:27,070
Until now, we had kind of straightforward code here

6

00:00:27,390  -->  00:00:32,580
but let's see what we could change about this code and if it would still run or not.

7

00:00:32,580  -->  00:00:36,050
So I'll change this back to just being assigned to 5

8

00:00:36,300  -->  00:00:41,220
and of course if I print this to the console, we see 5.

9

00:00:41,480  -->  00:00:44,870
Now notice I have semi-colons at the end of the lines,

10

00:00:45,330  -->  00:00:48,810
what happens if I delete those semi-colons?

11

00:00:48,810  -->  00:00:50,210
So I hit clear,

12

00:00:50,310  -->  00:00:53,740
what do you think I'll get now if I hit run?

13

00:00:54,900  -->  00:00:56,330
Well I still get 5,

14

00:00:56,580  -->  00:00:59,370
so the code works without them as well.

15

00:00:59,370  -->  00:01:03,190
Javascript will determine or will infer

16

00:01:03,210  -->  00:01:05,020
where are your lines end

17

00:01:05,370  -->  00:01:08,750
and will still be able to execute this code fine.

18

00:01:08,760  -->  00:01:15,360
So of course, this code here would throw an error because it's never ending

19

00:01:15,570  -->  00:01:23,010
but by simply adding a line break here, Javascript is able to execute this code or the browser running

20

00:01:23,430  -->  00:01:28,940
over your Javascript and actually executing it is able to run it.

21

00:01:28,950  -->  00:01:31,670
Now what happens if I get rid of var

22

00:01:31,770  -->  00:01:33,190
keyword here?

23

00:01:33,870  -->  00:01:37,010
What do you think we'll see now if I hit run?

24

00:01:37,920  -->  00:01:45,510
Well we still see 5, so even though I don't have the var keyword, Javascript still seems to

25

00:01:45,510  -->  00:01:52,230
have this variable because it automatically creates it and assigns it to the global scope

26

00:01:52,230  -->  00:01:58,970
and I'll come back to global and local which is the opposite or the other possible scope soon

27

00:01:59,250  -->  00:02:04,920
but basically for now, it's important to understand Javascript automatically creates this variable and

28

00:02:04,920  -->  00:02:08,790
saves it like it did when we had the var keyword.

29

00:02:08,850  -->  00:02:17,580
So even though this code does run fine, it's not really the best way to write it because it is very

30

00:02:17,700  -->  00:02:18,790
unexpressive 

31

00:02:18,870  -->  00:02:25,060
and it'll also decrease the performance when this code gets executed a bit because when the Javascript

32

00:02:25,080  -->  00:02:31,500
engine in the browser runs over this code, it has to do more things than it would have to

33

00:02:31,500  -->  00:02:37,230
do if we explicitly tell it where the lines end, explicitly tell it that this is a variable,

34

00:02:37,260  -->  00:02:39,790
it will have to figure out these things on its own

35

00:02:39,930  -->  00:02:47,420
and that's one extra step which of course also costs performance. Javascript therefore offers us the strict

36

00:02:47,490  -->  00:02:54,570
mode which we can enter to basically tell ourselves when writing the code and browser when running

37

00:02:54,570  -->  00:03:01,620
through it that we have to use strict mode or in the browser's case, that strict mode was used which makes

38

00:03:01,620  -->  00:03:08,350
sure that certain syntactical things have to be considered and won't work

39

00:03:08,370  -->  00:03:16,110
if we're doing it over. So to demonstrate this, I'll head over to plnkr again

40

00:03:19,140  -->  00:03:27,080
and I'll again launch a new editor and then here I'll go to my script.js file here in preview mode.

41

00:03:27,300  -->  00:03:33,270
So I'll go to my script.js file and I'll just copy this code and I'm doing this in plnkr

42

00:03:33,270  -->  00:03:36,800
because I can't show it in JSBin unfortunately.

43

00:03:37,260  -->  00:03:45,610
So now if I open up my Javascript console in the developer tools and I'll clear it for now,

44

00:03:46,050  -->  00:03:48,090
if I hit refresh,

45

00:03:48,150  -->  00:03:56,460
you see we get 5, so this code still executes. If I now enter the strict mode by specifying a string at

46

00:03:56,460  -->  00:03:57,860
the top of the file,

47

00:03:57,870  -->  00:04:00,960
use strict like this,

48

00:04:00,960  -->  00:04:03,990
now you see we get an uncaught reference error,

49

00:04:04,020  -->  00:04:06,150
var1 is not defined.

50

00:04:06,450  -->  00:04:15,570
So now, strict mode enforces us to explicitly tell Javascript that this is a variable by adding the var

51

00:04:15,570  -->  00:04:16,490
keyword,

52

00:04:16,560  -->  00:04:18,780
so now it works again,

53

00:04:18,810  -->  00:04:23,450
also we should use semi-colons at the end of each line.

54

00:04:23,580  -->  00:04:24,890
It work without

55

00:04:25,050  -->  00:04:30,440
but that's also part of the strict mode and depending on the browser, you might need to do this

56

00:04:30,450  -->  00:04:32,960
for strict mode to work correctly.

57

00:04:33,060  -->  00:04:40,390
So it's important now to be explicit with your code, tell Javascript when you create a variable, tell

58

00:04:40,390  -->  00:04:42,450
it where the line ends.

59

00:04:42,450  -->  00:04:48,570
So while this might look strange to just have a string, not assigned to a variable or anything like this,

60

00:04:48,570  -->  00:04:51,130
just some text at the top of the file,

61

00:04:51,150  -->  00:04:59,040
this is a very key thing to make sure that you are writing better code or safer code, more optimized

62

00:04:59,040  -->  00:05:07,050
code at least. Be aware that if you are using some third-party library which might not use strict

63

00:05:07,050  -->  00:05:14,430
mode, you could run into problems here but in reality, most libraries should be written in a clean way

64

00:05:14,490  -->  00:05:16,480
using strict mode as well

65

00:05:16,590  -->  00:05:24,540
but you should at least, well if you get an error, think about this possible error source, that you're using

66

00:05:24,540  -->  00:05:28,260
strict mode and your third-party library is not.
