1

00:00:01,770  -->  00:00:09,810
What is a function? A function basically is some kind of enclosed code which you can execute whenever

2

00:00:09,840  -->  00:00:13,110
you want, even multiple times.

3

00:00:13,110  -->  00:00:19,890
So remember that before, whichever code you put here was executed immediately by the browser, whenever the

4

00:00:20,020  -->  00:00:25,770
browser finds this code, be that in an imported file or directly in the index.html file, it will

5

00:00:25,770  -->  00:00:28,350
directly execute the code.

6

00:00:28,350  -->  00:00:35,490
Now we can create a function like this, with the function keyword and then the name of the function,

7

00:00:35,900  -->  00:00:40,780
let's name it calc for calculate maybe,

8

00:00:41,150  -->  00:00:48,270
then you have parentheses and then curly braces and now don't mistake these curly braces with the ones

9

00:00:48,300  -->  00:00:54,750
we were using when creating an object. Curly braces generally just mean we're creating kind of a block

10

00:00:54,750  -->  00:01:00,750
here which belongs together, so we can have multi-line statements in here which all belong to this

11

00:01:00,750  -->  00:01:01,290
block,

12

00:01:01,380  -->  00:01:03,840
that's all we do with these curly braces.

13

00:01:04,200  -->  00:01:10,280
So inside these curly braces, we might write the logic this function should execute.

14

00:01:10,560  -->  00:01:18,350
So I'll again write console log inside function here,

15

00:01:19,290  -->  00:01:24,090
now what do you think will happen if I click run?

16

00:01:24,090  -->  00:01:24,930
Nothing,

17

00:01:25,230  -->  00:01:33,830
because even though the code gets executed instantly, functions don't get called automatically, that is

18

00:01:33,830  -->  00:01:35,880
not really what functions are good for,

19

00:01:35,880  -->  00:01:41,870
instead we have to call them, like this, using their name

20

00:01:42,060  -->  00:01:49,830
and then with parentheses here. Now if I click run, you'll see inside function because now the function

21

00:01:49,830  -->  00:01:51,900
gets executed.

22

00:01:52,020  -->  00:01:56,480
Does it also get executed if I leave out the parentheses here?

23

00:01:57,780  -->  00:01:59,340
No, nothing happens.

24

00:01:59,400  -->  00:02:03,890
So the parentheses here are important to actually call a function

25

00:02:04,110  -->  00:02:11,430
and as you later see, we can also do more with these parentheses than just define and call it. An interesting

26

00:02:11,430  -->  00:02:14,670
thing is you can also use a function

27

00:02:14,670  -->  00:02:17,650
if you define it after calling it.

28

00:02:17,880  -->  00:02:22,050
So if I hit run now, you still see inside function

29

00:02:22,230  -->  00:02:27,450
and here again, we have hoisting. Now with functions, unlike with variables,

30

00:02:27,600  -->  00:02:33,990
it's not that uncommon to have function definitions like this one here after the usage,

31

00:02:34,170  -->  00:02:40,850
so that is a fine behavior and you might actually used this in your code as well.

32

00:02:40,860  -->  00:02:48,070
Now I'll put it back to the top anyways and I want to show you another way of creating such a function

33

00:02:48,080  -->  00:02:48,300
.

34

00:02:48,600  -->  00:02:51,760
So you can use the function keyword and then the name here

35

00:02:52,200  -->  00:03:01,080
but another way to do exactly the same would be to create a variable, name it calc and assign it to a

36

00:03:01,080  -->  00:03:01,740
function

37

00:03:01,800  -->  00:03:04,730
but notice that now here, we don't have a name,

38

00:03:04,740  -->  00:03:07,400
we just have function and then parentheses.

39

00:03:07,830  -->  00:03:12,430
So now if I run this, what do you think we'll see?

40

00:03:13,260  -->  00:03:21,450
We still see inside function but we also should now put a semicolon here because now, we're technically

41

00:03:21,450  -->  00:03:25,650
creating a variable and we're assigning this function to this variable.

42

00:03:25,650  -->  00:03:28,450
We can then still call the function with

43

00:03:28,560  -->  00:03:30,870
calc and then parentheses,

44

00:03:30,870  -->  00:03:38,260
so that doesn't change, it's just a different type of creating a function but we may use both types.

45

00:03:38,360  -->  00:03:45,550
Now speaking of this, what do you think we'll see if I log the type of this function?

46

00:03:45,570  -->  00:03:50,940
Notice that I don't have parentheses here, so I'm not executing the function,

47

00:03:51,120  -->  00:03:54,690
I just want to refer to this function variable.

48

00:03:54,930  -->  00:03:58,410
So if I hit run now, we see function,

49

00:03:58,410  -->  00:04:06,490
so this is of type function and is the same true if I use the other way to create a function?

50

00:04:06,510  -->  00:04:09,860
What do you think we'll see now?

51

00:04:10,250  -->  00:04:12,030
This is also of type function.

52

00:04:12,030  -->  00:04:18,460
So it is the same and it has this special function type in Javascript,

53

00:04:18,540  -->  00:04:22,170
so it's a variable of type function here.

54

00:04:22,290  -->  00:04:24,300
Now can I do the following,

55

00:04:24,300  -->  00:04:30,080
create another function and assign the first function to it

56

00:04:30,090  -->  00:04:38,320
but without parentheses here and then I try to execute another function, which should be this function

57

00:04:38,320  -->  00:04:38,850
here, right?

58

00:04:38,850  -->  00:04:42,230
I assign this function to this variable.

59

00:04:42,540  -->  00:04:45,610
So if I now hit run, what do you think we'll see?

60

00:04:46,500  -->  00:04:50,630
Well we'll see inside function because this works exactly in this way.

61

00:04:50,630  -->  00:04:56,580
We're creating a new variable and we're just assigning it another variable and this variable happens

62

00:04:56,580  -->  00:04:58,620
to be a function.

63

00:04:58,620  -->  00:05:01,640
Now what happens if I use parentheses here,

64

00:05:01,830  -->  00:05:05,190
what do you think we'll now see if I hit run?

65

00:05:06,600  -->  00:05:10,110
Well now we get inside function but then we get an error

66

00:05:10,170  -->  00:05:15,270
and the reason is we get inside function here because we're executing the function here

67

00:05:15,570  -->  00:05:20,610
but then we're trying to assign the returned value to this new variable.

68

00:05:20,610  -->  00:05:22,860
Now this function doesn't return anything,

69

00:05:22,950  -->  00:05:25,050
it just executes some code,

70

00:05:25,050  -->  00:05:32,010
therefore another function is now not set to this and therefore we correctly get the error that another

71

00:05:32,010  -->  00:05:35,930
function is not a function, so we can't execute it.

72

00:05:36,240  -->  00:05:38,020
So what is another function

73

00:05:38,040  -->  00:05:43,260
if we log out another function here?

74

00:05:46,370  -->  00:05:51,870
It's undefined because we're setting it to something which isn't there, we're setting it to the return

75

00:05:52,260  -->  00:05:56,410
value of this function and as I said, this function doesn't return anything,

76

00:05:56,490  -->  00:05:58,760
therefore we're returning nothing,

77

00:05:58,760  -->  00:06:00,330
therefore it's undefined

78

00:06:00,450  -->  00:06:03,420
and that's why we could not execute it like a function.
