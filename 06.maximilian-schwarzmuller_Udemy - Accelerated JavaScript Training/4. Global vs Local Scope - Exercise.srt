1

00:00:01,560  -->  00:00:09,410
I'll first start very simple, I'll create a new variable which I will just name test and I'll assign a string

2

00:00:09,410  -->  00:00:11,970
value of global scope.

3

00:00:12,390  -->  00:00:17,820
This variable indeed is registered in the global scope since I'm just writing it here and

4

00:00:17,820  -->  00:00:20,130
this by default is the global scope,

5

00:00:20,130  -->  00:00:24,840
therefore I'm of course able to just log it out like this

6

00:00:24,840  -->  00:00:31,040
and it shouldn't be surprising that we see global scope being printed to the console.

7

00:00:31,030  -->  00:00:39,930
Now if I create a function and I name this function local scope, just an arbitrary name here

8

00:00:39,930  -->  00:00:49,860
by the way. If I try to print out test inside this function and I get rid of this printing here and then

9

00:00:49,920  -->  00:00:52,230
I call this function of course,

10

00:00:52,230  -->  00:00:54,240
otherwise nothing will happen for sure,

11

00:00:54,690  -->  00:01:04,110
what do you think we'll see in the console? We see global scope because as I said, you are able to use

12

00:01:04,110  -->  00:01:11,520
global elements inside a function, so this direction is opened but you're not able to use elements from

13

00:01:11,520  -->  00:01:13,390
within the function outside of it

14

00:01:13,400  -->  00:01:15,040
and I'll show that in a second.

15

00:01:15,300  -->  00:01:19,450
So global scope can be printed here since we can access test.

16

00:01:20,010  -->  00:01:29,550
What happens if I create another variable in here, test, where I say local scope? What do you think we'll

17

00:01:29,550  -->  00:01:33,080
now see if I click run?

18

00:01:33,080  -->  00:01:34,790
We see local scope,

19

00:01:34,790  -->  00:01:41,160
I am redeclaring a variable and depending on browser and strict mode, you would even see an error

20

00:01:41,220  -->  00:01:44,130
when trying to do something like this on global scope,

21

00:01:44,130  -->  00:01:54,510
so if I do this here, test and I run this, we would get an error on some systems and with strict mode

22

00:01:54,510  -->  00:02:00,590
enabled, so it doesn't throw an error if we do it inside local scope inside a function

23

00:02:00,600  -->  00:02:01,970
because this is what I meant,

24

00:02:01,980  -->  00:02:06,250
this function has its own scope and it has its own registry

25

00:02:06,270  -->  00:02:10,570
therefore if you want to think of scope like this, where it registers this variable.

26

00:02:10,590  -->  00:02:16,170
Now I am able to use the test variable from the global scope as I just showed but I can overwrite this

27

00:02:16,170  -->  00:02:18,420
and set my own variables.

28

00:02:18,420  -->  00:02:27,750
The question is if I now print test here on the global scope again, notice that I am redefining it in

29

00:02:27,750  -->  00:02:30,840
the function and then I'm calling the function,

30

00:02:30,840  -->  00:02:33,470
so what do we expect to see when I reach this line,

31

00:02:33,470  -->  00:02:42,690
what will get printed to the console? Local scope and global scope, local scope of course comes from this

32

00:02:42,810  -->  00:02:50,850
console log statement whereas global scope comes from here because as I said, this variable is only

33

00:02:50,850  -->  00:02:55,020
available within this scope here inside the function,

34

00:02:55,140  -->  00:02:58,010
therefore test here isn't overwritten

35

00:02:58,530  -->  00:03:02,450
and if I get rid of this first test variable,

36

00:03:02,670  -->  00:03:05,870
so we have no test variable on the global scope,

37

00:03:05,940  -->  00:03:08,510
what do you think will happen now?

38

00:03:09,570  -->  00:03:10,990
Well now we simply get an error

39

00:03:11,010  -->  00:03:15,780
that test isn't defined because again, we don't have access to this variable,

40

00:03:15,870  -->  00:03:18,380
it doesn't flow out of the local scope,

41

00:03:18,390  -->  00:03:20,240
it stays inside it.

42

00:03:20,310  -->  00:03:24,240
Something interesting happens if I remove the var keyword,

43

00:03:24,540  -->  00:03:28,100
what do you think will happen now?

44

00:03:28,140  -->  00:03:33,690
Now all of a sudden, I don't get that error but instead I see local scope here as well

45

00:03:33,690  -->  00:03:38,720
even though I still don't have the test variable outside of this function.

46

00:03:39,000  -->  00:03:40,660
So what's happening here?

47

00:03:41,040  -->  00:03:47,760
Well that's the behavior of Javascript which is possible if you're not using strict mode. When you

48

00:03:47,760  -->  00:03:54,550
are leaving out the var keyword, Javascript will automatically generate a new global variable

49

00:03:54,570  -->  00:04:00,720
and I was mentioning this earlier in this course, that a new variable is automatically generated by

50

00:04:00,720  -->  00:04:00,990
Javascript

51

00:04:00,990  -->  00:04:07,680
if you try to use a variable which hasn't been declared before. Such variables always have global scope

52

00:04:07,770  -->  00:04:09,720
no matter where you use them,

53

00:04:09,990  -->  00:04:15,230
therefore this actually becomes a global variable and therefore can be accessed here.

54

00:04:15,690  -->  00:04:20,070
So by turning on strict mode, you would make sure that this is not possible

55

00:04:20,070  -->  00:04:26,690
and of course always just give your best to remember putting var in front of it.

56

00:04:27,090  -->  00:04:33,180
So that's scope and it's just important to understand that you can use variables inside functions which

57

00:04:33,180  -->  00:04:37,560
are not available outside of functions which is a functionality in turn

58

00:04:37,560  -->  00:04:39,260
you'll often need

59

00:04:39,630  -->  00:04:46,710
and it's also important to understand that local variables however are accessible inside functions, so

60

00:04:46,710  -->  00:04:53,610
you have access to all the global scope things inside a function but a global scope doesn't have access

61

00:04:53,610  -->  00:04:55,190
to the local scope

62

00:04:55,230  -->  00:04:56,580
things or elements.

63

00:04:56,580  -->  00:04:57,930
That's how we can think of it

64

00:04:58,020  -->  00:04:59,920
and that's important to understand.
