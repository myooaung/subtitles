1

00:00:01,470  -->  00:00:11,250
I was already highlighting that the this keyword has its own head in Javascript and that it's not always

2

00:00:11,250  -->  00:00:18,660
referring to the same thing. On the top level, it was was referring to the global object, to the window object

3

00:00:18,660  -->  00:00:24,480
in the browser and in an object, it was referring to this object

4

00:00:24,480  -->  00:00:34,410
but a general rule of thumb could be this always refers to the left part of the dot which executes something

5

00:00:34,410  -->  00:00:36,750
where this is included.

6

00:00:36,750  -->  00:00:42,500
Now I'm not sure if anyone was able to understand this so let me show this example here.

7

00:00:42,930  -->  00:00:48,340
I have a function where I log this and then I call this function.

8

00:00:48,360  -->  00:00:49,980
Now I already did this before,

9

00:00:49,980  -->  00:00:53,770
so you probably know what we'll see now,

10

00:00:54,660  -->  00:00:59,590
the window object of course because this refers to the global object here,

11

00:00:59,700  -->  00:01:06,480
to the window in our browser and since I'm calling function here directly in the highest possible level

12

00:01:06,480  -->  00:01:12,700
in my source code, this still refers to this. Now I'll add a bit here,

13

00:01:12,750  -->  00:01:20,520
I'll add an object and in this object, I set up a function which simply uses this function

14

00:01:20,520  -->  00:01:20,850
here,

15

00:01:20,910  -->  00:01:24,820
so it holds a reference to this function.

16

00:01:25,410  -->  00:01:27,930
I'll get rid of this function call here,

17

00:01:28,320  -->  00:01:33,610
what do you think we'll now see? Will we still see the window here?

18

00:01:33,660  -->  00:01:36,020
Now we see this object,

19

00:01:36,030  -->  00:01:39,290
so now this refers to this object

20

00:01:39,870  -->  00:01:45,750
and this is what I meant with it refers to the thing on the left of the dot, object here. We're calling this

21

00:01:45,750  -->  00:01:51,600
function which of course refers to this function which refers to this function here

22

00:01:52,110  -->  00:01:58,920
and I could rename this to make things clearer, so obfn here, the function in the object,

23

00:02:00,300  -->  00:02:02,160
I'm just calling that,

24

00:02:02,550  -->  00:02:06,170
so I'll still see that here.

25

00:02:06,270  -->  00:02:10,970
So that's referring to that, which again has this value which refers to this function

26

00:02:10,980  -->  00:02:16,620
but this now is not referring to the global object but instead to the part on the left of the dot, which

27

00:02:16,620  -->  00:02:21,240
is this object here and this object is what calls this function

28

00:02:21,630  -->  00:02:24,520
and that's a key thing to understand with this.

29

00:02:24,630  -->  00:02:27,550
It's not always referring to the same thing,

30

00:02:27,720  -->  00:02:32,920
it's referring to whatever calls something where this is used in,

31

00:02:33,060  -->  00:02:41,280
so whichever calls a function where this is used in, that is what this refers to.

32

00:02:41,760  -->  00:02:51,200
Now let's say I wanted to make sure that this still refers to the window object

33

00:02:51,480  -->  00:02:57,690
because here in this function, I'm doing something with that window object and I still want to do that if

34

00:02:57,690  -->  00:03:03,200
I use this function in an object, I don't want this to point to the object.

35

00:03:03,210  -->  00:03:08,500
Javascript has a solution built-in since this often leads to problems,

36

00:03:08,670  -->  00:03:20,970
I can use bind on my function here, recognize that I remove the parentheses and then I pass this

37

00:03:20,980  -->  00:03:21,640
here.

38

00:03:22,020  -->  00:03:29,880
With that, I'm telling Javascript rebind this inside this object

39

00:03:30,120  -->  00:03:33,750
and then here I pass to what I want to bind this.

40

00:03:33,810  -->  00:03:39,720
Now I admit that it's a bit confusing because I'm passing this here because I'm referring to the global 

41

00:03:39,720  -->  00:03:39,860
object.

42

00:03:39,960  -->  00:03:46,290
If I now add parentheses here too, to execute this function and I run this code, you again see the window

43

00:03:46,300  -->  00:03:46,480
,

44

00:03:46,770  -->  00:03:55,570
so I rebound this and as this is a bit confusing with this being used here too,

45

00:03:55,580  -->  00:04:06,240
I'll demonstrate this with another object I'll quickly create, name should be Max and I bind to this 

46

00:04:06,240  -->  00:04:06,270
object

47

00:04:06,270  -->  00:04:13,720
now. If I rerun the code, you'll see now this refers to this object with the name of Max.

48

00:04:14,130  -->  00:04:21,130
So with bind, I can pass whatever this here should refer to,

49

00:04:21,180  -->  00:04:24,030
that could be this to refer to the window,

50

00:04:24,090  -->  00:04:31,680
it could be person to refer to this person object or of course, I'll leave it out and then again, it will

51

00:04:31,680  -->  00:04:37,130
refer to the part on the left of the dot, object here.
