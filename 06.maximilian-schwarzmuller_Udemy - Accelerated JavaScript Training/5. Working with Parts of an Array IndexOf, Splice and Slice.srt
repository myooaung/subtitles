1

00:00:01,470  -->  00:00:07,160
Well what if I want to find out where a specific element lives inside an array?

2

00:00:07,440  -->  00:00:15,090
So I want to find out which index new has and let's say I wouldn't know. I have a method to find this

3

00:00:15,090  -->  00:00:15,860
out,

4

00:00:15,930  -->  00:00:23,190
I can call indexof on my array and pass the value of which I want to get the index.

5

00:00:23,220  -->  00:00:30,600
So what do you think I'll see in the console if I hit run? I see 0 because that is the index of the

6

00:00:30,600  -->  00:00:37,050
array item here because new gets inserted as the first item of the array and therefore has the index

7

00:00:37,050  -->  00:00:38,730
0.

8

00:00:39,080  -->  00:00:49,440
Of course you can combine things like let's say array, then square brackets and between square brackets

9

00:00:49,440  -->  00:00:55,230
you have to insert the index you want to access and then getting the index with the indexof method

10

00:00:55,240  -->  00:00:55,510
and

11

00:00:55,860  -->  00:00:58,910
I'm now setting this equal to old

12

00:00:59,400  -->  00:01:03,320
and then I print my array here.

13

00:01:03,780  -->  00:01:05,940
What do you think we'll see in the console now?

14

00:01:06,190  -->  00:01:08,890
We got old,

15

00:01:08,880  -->  00:01:13,580
1, 2, 3, 4 because I'm finding the index of new here

16

00:01:13,830  -->  00:01:21,310
and this gets returned and is 0 , therefore here I'm technically calling array 0,

17

00:01:21,660  -->  00:01:24,390
that's what this will resolve to in this case and

18

00:01:24,600  -->  00:01:28,820
I'm setting it equal to old, so I'm replacing the first element with old here.

19

00:01:29,370  -->  00:01:36,960
What if I wanted to extract a part of an array and assign it to a new array, is that possible?

20

00:01:37,320  -->  00:01:40,410
Well I'm pretty confident it is.

21

00:01:40,710  -->  00:01:45,650
I'll create a new array here and I could set it equal to array

22

00:01:45,660  -->  00:01:51,930
but now it would be the same. What if I only wanted to get the last two elements, 3 and 4 in this

23

00:01:51,930  -->  00:02:03,750
case? I can call the splice method for one and I can insert or pass an argument which defines at which position

24

00:02:03,780  -->  00:02:07,250
I want to start to splice a bit of that array.

25

00:02:07,500  -->  00:02:10,800
So remember, I'm inserting a new item here at the beginning,

26

00:02:10,920  -->  00:02:15,610
so technically I will have index 0, 1, 2, 3,

27

00:02:15,630  -->  00:02:19,380
I want to start at index 3.

28

00:02:19,380  -->  00:02:27,120
Now let's see what happens if I print out new array here. I get 3 and 4, the two items I wanted.

29

00:02:27,330  -->  00:02:29,380
Now what if I wanted only a part of the array,

30

00:02:29,400  -->  00:02:32,010
let's say the two and three here,

31

00:02:32,040  -->  00:02:40,050
so in the middle of the array? I would start at index two which would refer to this element

32

00:02:40,050  -->  00:02:43,950
here since I'm inserting a new element at the beginning, don't forget that

33

00:02:44,400  -->  00:02:51,420
and then I can pass another argument to this splice method, which indicates how many elements beginning

34

00:02:51,450  -->  00:02:58,250
from this index on I want to take, in this case two elements, two and three,

35

00:02:58,260  -->  00:03:02,930
so this includes the indexed element here itself.

36

00:03:02,930  -->  00:03:10,320
So if I now print this or run this, here you see that I got two and three. Now however, have a look at what happens

37

00:03:10,350  -->  00:03:14,320
if I now also logout the old array.

38

00:03:14,400  -->  00:03:17,210
What do you think we will see in the console?

39

00:03:17,850  -->  00:03:21,240
Well you see that the old array misses the two and three,

40

00:03:21,330  -->  00:03:28,530
it really got spliced up so we took two and three and pulled it out of the old array and the old array

41

00:03:28,590  -->  00:03:32,490
is therefore only old, 1 and 4.

42

00:03:32,640  -->  00:03:36,840
Now maybe you want that behavior and maybe you don't,

43

00:03:37,110  -->  00:03:41,370
if you don't want it, then the splice method is the wrong method

44

00:03:41,430  -->  00:03:44,130
and you should use slice instead.

45

00:03:44,220  -->  00:03:48,050
However the slice method works a bit different, here

46

00:03:48,090  -->  00:03:57,720
we're not specifying from which index how many items but instead from which index to which index.

47

00:03:57,720  -->  00:04:00,870
So we're starting at index 2

48

00:04:01,290  -->  00:04:05,420
and again, this is only index 2 because we're inserting a new item at the beginning,

49

00:04:05,430  -->  00:04:08,220
otherwise this would be index one of course.

50

00:04:08,220  -->  00:04:11,990
So we're starting at two and then now we would end at two

51

00:04:12,090  -->  00:04:15,390
which of course would give us no element at all,

52

00:04:15,390  -->  00:04:17,950
so I want to end at four here.

53

00:04:18,330  -->  00:04:20,800
Let's see what's now printed if I hit run;

54

00:04:21,450  -->  00:04:27,010
now you see I'm getting the values 2 and 3 and I store them into a new array

55

00:04:27,240  -->  00:04:32,720
but the old array remains untouched and it still has all its values

56

00:04:32,850  -->  00:04:37,790
and again depending on your idea or what you want to achieve,

57

00:04:37,850  -->  00:04:41,390
either splice or slice might be the correct method.

58

00:04:41,640  -->  00:04:49,680
Only keep in mind that you have to change the arguments because slice expect starting and ending index

59

00:04:49,970  -->  00:04:50,200
whereas

60

00:04:50,300  -->  00:04:55,560
splice expects starting index and number of elements.

61

00:04:55,590  -->  00:04:57,510
So there is a slight difference here.
