1

00:00:01,770  -->  00:00:06,190
So what is this return value I'm talking of?

2

00:00:06,960  -->  00:00:14,280
Well let's say I change this here to not print something out but instead, I want to return a string

3

00:00:14,430  -->  00:00:21,540
and this is a common scheme because oftentimes, your functions will just do something and return a value

4

00:00:21,780  -->  00:00:24,840
for the caller of the function to use,

5

00:00:25,170  -->  00:00:29,430
I can return a value by adding the return keyword.

6

00:00:29,730  -->  00:00:32,250
So now I'm just returning a string,

7

00:00:32,270  -->  00:00:34,820
this is no variable assigned to a string or anything,

8

00:00:34,820  -->  00:00:36,210
it's just a string.

9

00:00:36,480  -->  00:00:44,670
So I'm returning this string here and then I'm assigning this returned value to another function which

10

00:00:44,670  -->  00:00:51,040
now is not a function so maybe I should name it returned to make this less confusing.

11

00:00:51,300  -->  00:00:57,270
So returned is now what this function calc returns, which again is the string.

12

00:00:57,490  -->  00:01:02,530
So now if I print returned, what do you think we'll see?

13

00:01:03,500  -->  00:01:09,300
Well of course we see inside function because now, I'm printing what this function returned to me, which

14

00:01:09,320  -->  00:01:10,850
is this string.

15

00:01:10,860  -->  00:01:12,570
Of course I could also return

16

00:01:21,600  -->  00:01:23,770
a variable defined inside calc,

17

00:01:24,120  -->  00:01:27,690
so return stringVar,

18

00:01:28,050  -->  00:01:31,450
what do you think we'll see now?

19

00:01:31,470  -->  00:01:35,850
We still get inside function because I haven't really changed anything,

20

00:01:35,850  -->  00:01:40,610
I'm just using a variable inside this function which is perfectly fine and I may do that.

21

00:01:40,830  -->  00:01:48,300
Now there is something special about the scope of this variable but I'll come back to this in one

22

00:01:48,310  -->  00:01:48,460
of

23

00:01:48,660  -->  00:01:50,100
the next lessons.

24

00:01:50,550  -->  00:01:55,480
So I'm now returning stuff inside this function and that's cool

25

00:01:55,740  -->  00:02:02,980
but sometimes, I also want to pass something into a function and not just return values,

26

00:02:03,090  -->  00:02:09,580
I can do this by adding arguments here between the parentheses in my function definition.

27

00:02:09,780  -->  00:02:16,580
So maybe, since this function is called calc, I want to calculate something, so I'll pass two numbers let's

28

00:02:16,590  -->  00:02:19,060
say, number one and number two.

29

00:02:19,110  -->  00:02:27,060
Now here, I'm not assigning any string variable but instead, I want to return let's say the addition of

30

00:02:27,240  -->  00:02:28,720
number one and number two

31

00:02:28,800  -->  00:02:31,830
and this is just the addition operator here of course.

32

00:02:32,370  -->  00:02:37,350
So now, if I execute this, what do you think we'll see?

33

00:02:40,060  -->  00:02:44,210
Well this might not have been straightforward but we get NaN,

34

00:02:44,220  -->  00:02:49,250
the reason is we're still calling this function without passing any arguments here,

35

00:02:49,360  -->  00:02:56,240
right, but we try to add the arguments we get and we return the result.

36

00:02:56,250  -->  00:03:01,590
Now we did not get an error which would be the case in some other languages which is because we're calling

37

00:03:01,590  -->  00:03:05,420
a function which expects arguments by not passing arguments

38

00:03:05,880  -->  00:03:11,250
but what gets passed indirectly are two undefined numbers.

39

00:03:11,280  -->  00:03:17,700
So technically we were adding undefined plus undefined which will, since we're doing a mathematical

40

00:03:17,850  -->  00:03:24,660
operation here, result in an error and return NaN because we can't add undefined and undefined,

41

00:03:25,080  -->  00:03:30,900
therefore we are returning this result which is not a number and then reprinting it,

42

00:03:30,930  -->  00:03:33,550
this is why we see not a number here.

43

00:03:34,170  -->  00:03:39,590
So to make this function call here more useful and not get not a number,

44

00:03:39,870  -->  00:03:41,680
I will add arguments to it,

45

00:03:41,730  -->  00:03:48,850
let's say 10 and 8 and I do this by simply specifying them here when I call the function separated with commas

46

00:03:48,870  -->  00:03:49,300
.

47

00:03:49,950  -->  00:03:58,140
If I now run this, what do you think we'll see? We get 18 because we're adding 10 and 8 inside this function

48

00:03:58,200  -->  00:04:00,930
and returning the value which we then print here,

49

00:04:01,380  -->  00:04:03,140
so now this works

50

00:04:03,600  -->  00:04:11,130
What happens if I pass too many arguments, so if I pass one extra 10 here, what do you think we'll see

51

00:04:11,130  -->  00:04:17,080
now? Well we still get 18 and the other argument is just ignored.

52

00:04:17,100  -->  00:04:19,460
We don't get an error like we would get in other languages

53

00:04:19,530  -->  00:04:21,320
but it's not getting used either

54

00:04:21,720  -->  00:04:24,310
and now, what do you think happens

55

00:04:24,360  -->  00:04:32,670
if I change this a bit and here, I create my variable named calculator and assign this to this calc function

56

00:04:32,700  -->  00:04:35,940
but I'm not executing the function here

57

00:04:35,940  -->  00:04:38,220
and then I log out

58

00:04:40,830  -->  00:04:46,350
calculator 15 and 2.

59

00:04:47,130  -->  00:04:51,080
What do you think we'll now get in the console here?

60

00:04:51,890  -->  00:04:59,190
Well we get 17 because what I'm doing here is, I'm just assigning this function here to a new variable,

61

00:04:59,200  -->  00:04:59,240
so

62

00:04:59,280  -->  00:05:02,800
this variable is now also pointing to this function

63

00:05:03,240  -->  00:05:09,390
and then I'm executing this function and I pass two arguments and therefore, I get back the addition

64

00:05:09,390  -->  00:05:15,000
of the two arguments since I'm simply just executing this function here.

65

00:05:16,470  -->  00:05:20,730
So that were the basics about functions and how you can use functions.

66

00:05:20,730  -->  00:05:22,790
Now why would you use such functions?

67

00:05:22,950  -->  00:05:29,430
Well as you already saw, functions allow you to enclose some code and you can of course call functions

68

00:05:29,430  -->  00:05:30,760
more than once,

69

00:05:30,840  -->  00:05:40,020
therefore it's a useful utility for repetitive tasks or more complex calculations or calculations or

70

00:05:40,020  -->  00:05:40,700
code

71

00:05:40,710  -->  00:05:48,510
you don't want to execute right at startup because remember, generally all your code will be executed

72

00:05:48,660  -->  00:05:50,840
once the browser runs through it.
