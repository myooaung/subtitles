WEBVTT
1

00:00:01.460  -->  00:00:03.070
Now an interesting question will be the following;

2

00:00:03.150  -->  00:00:13.230
if I change this to Max and this to 27 and then I'll log out if another person is equal to person and

3

00:00:13.230  -->  00:00:16.740
they do have the exact same fields and so on,

4

00:00:16.950  -->  00:00:19.990
what would you expect to happen?

5

00:00:21.270  -->  00:00:22.540
We get false.

6

00:00:22.770  -->  00:00:25.220
Well maybe it's because we used new object here,

7

00:00:25.230  -->  00:00:36.540
so what if I simply copy this person here, name it person1 and I'll quickly check if person1 is equal

8

00:00:36.540  -->  00:00:37.320
to person, so

9

00:00:37.320  -->  00:00:40.310
now it's exactly the same notation, it looks exactly the same,

10

00:00:40.310  -->  00:00:41.980
we should get true I think.

11

00:00:42.300  -->  00:00:51.660
So let's see, we still get false, that we're using reference types here. We're creating a new object here

12

00:00:51.780  -->  00:00:56.910
and we store this in memory and we get back a pointer pointing to this object.

13

00:00:57.270  -->  00:01:03.030
Here, we also create a value, an object and we store this in memory too.

14

00:01:03.150  -->  00:01:07.140
It's not the same storage place as this one, since a new object was created.

15

00:01:07.200  -->  00:01:10.740
We know that it is exactly the same but Javascript doesn't

16

00:01:10.740  -->  00:01:19.800
and it's good that it doesn't because imagine we were to add a field here to this object. All of a sudden,

17

00:01:19.800  -->  00:01:25.020
it wouldn't be the same anymore and we would change this object too even though it has no relation to it

18

00:01:25.040  -->  00:01:25.210
.

19

00:01:25.380  -->  00:01:29.490
So it's a good thing that we have two different places in memory to store it.

20

00:01:29.880  -->  00:01:35.580
So therefore, we have two different places in memory and we get two different pointers pointing to different

21

00:01:35.580  -->  00:01:36.780
places in memory

22

00:01:37.050  -->  00:01:42.150
and therefore if we compare both objects, we're actually comparing the pointers here,

23

00:01:42.210  -->  00:01:42.470
right.

24

00:01:42.480  -->  00:01:49.440
Because remember that for reference types, we only store the pointer in the variable, not the value itself

25

00:01:50.190  -->  00:01:55.310
and the pointers point to different locations and therefore, they are not equal

26

00:01:55.350  -->  00:01:57.420
which is why we get false.

27

00:01:57.750  -->  00:02:05.010
So I hope this is clear, how objects are reference types and how that influences what the variables

28

00:02:05.070  -->  00:02:07.230
actually hold.
