1

00:00:01,270  -->  00:00:09,750
I want it finish this variables and typings and syntax thing with one other very important syntax

2

00:00:09,770  -->  00:00:16,480
feature Javascript ships with. I'll get rid of this reassignment here and now I'll change something,

3

00:00:16,890  -->  00:00:24,650
I'll get rid of the var keyword and instead, I'll set var var1 below the log here.

4

00:00:25,020  -->  00:00:28,910
So here, I am declaring the variable and I can do this,

5

00:00:28,910  -->  00:00:32,720
I don't have to assign a value upon declaration

6

00:00:33,240  -->  00:00:38,620
and here, I am assigning the value but I'm doing this before the variable was actually declared.

7

00:00:38,880  -->  00:00:42,730
So what do you think we'll see in the console?

8

00:00:44,310  -->  00:00:55,220
Well we still see number and if I change this to view the type, we see 5. So probably that is because we're

9

00:00:55,230  -->  00:00:56,550
not using strict mode, right?

10

00:00:56,550  -->  00:01:02,920
So let's copy this and head over to plnkr and paste it in here.

11

00:01:03,480  -->  00:01:05,750
No, it's still working here,

12

00:01:06,120  -->  00:01:08,090
so this has nothing to do with strict mode,

13

00:01:08,370  -->  00:01:14,710
this behavior here is called hoisting and it's a special behviour Javascript offers.

14

00:01:14,730  -->  00:01:21,660
Basically, you can think of the browser doing the falling thing with your Javascript code, it runs

15

00:01:21,660  -->  00:01:22,830
over it two times

16

00:01:22,830  -->  00:01:30,030
if you want to think of it like this. In the first time, it will just fetch all your declarations, like

17

00:01:30,030  -->  00:01:34,570
this one. So wherever in your code you declare a variable,

18

00:01:34,590  -->  00:01:42,120
the browser will fetch this and in the second turn, when it runs over the code the second time, it will use

19

00:01:42,120  -->  00:01:49,710
all those fetched declarations and put them to the top of your code. So it will kind of do this

20

00:01:49,710  -->  00:01:50,670
and

21

00:01:51,150  -->  00:01:53,530
this of course would be valid Javascript

22

00:01:53,580  -->  00:01:57,250
either way as we're declaring it before assigning it.

23

00:01:57,720  -->  00:02:02,970
So now if I run this, this still works and it's important to know this behavior.

24

00:02:02,980  -->  00:02:08,730
Now technically of course, the browser is not running over it two times, it's a bit more elaborate

25

00:02:08,730  -->  00:02:14,400
than this but you can think of it this way and therefore, the code we had before with the declaration

26

00:02:15,000  -->  00:02:23,070
being written after the initialization will work because at runtime, this part here will be pulled up

27

00:02:23,490  -->  00:02:26,680
and that is what's meant with the term of hoisting.

28

00:02:26,910  -->  00:02:32,250
We can declare variables after using them or assigning a value

29

00:02:32,580  -->  00:02:34,960
but technically, it's not really

30

00:02:34,970  -->  00:02:39,260
after doing that because it will be pulled to the top by the browser.

31

00:02:39,960  -->  00:02:45,580
Now what happens if I do this?

32

00:02:45,660  -->  00:02:48,400
What do you think we'll see in the console?

33

00:02:49,410  -->  00:02:51,000
Well now we get undefined,

34

00:02:51,210  -->  00:02:56,370
so the initialization here has to happen before we use it.

35

00:02:56,370  -->  00:03:02,950
We can't use a variable with the value it might have before it being initialized with a value,

36

00:03:03,000  -->  00:03:08,580
we can only put the declaration after the initialization here.

37

00:03:08,820  -->  00:03:16,230
So that's the initialization, that's the declaration and the declaration may come after the initialization but the initialization

38

00:03:16,230  -->  00:03:22,890
here may not come after the usage because Javascript has no chance of knowing if we want this value

39

00:03:23,070  -->  00:03:27,450
or imagine we assign this value a second time here.

40

00:03:27,510  -->  00:03:28,650
So it can't just 

41

00:03:28,650  -->  00:03:34,560
pull it up like with the declaration because it doesn't know where it should actually put it and therefore,

42

00:03:34,560  -->  00:03:38,530
the position of the initialization, so when assigning a value, is important,

43

00:03:38,610  -->  00:03:40,660
that declaration is not.

44

00:03:40,860  -->  00:03:48,230
That being said, for variables, it is a good practice to either define it in one step,

45

00:03:48,240  -->  00:03:51,360
so do this like we did before

46

00:03:51,480  -->  00:03:54,990
or at least have the declaration before the initialization.

47

00:03:55,200  -->  00:04:01,150
So try to use this style even though the other style would work.

48

00:04:01,270  -->  00:04:08,770
And with this, we covered a lot about variables and types in Javascript and these were the very

49

00:04:08,770  -->  00:04:08,890
basics,

50

00:04:08,910  -->  00:04:11,370
of course these basics are important

51

00:04:11,400  -->  00:04:14,020
since that's what we work with all the time

52

00:04:14,040  -->  00:04:19,000
we work with variables and we need to know how the syntax works. With that,

53

00:04:19,110  -->  00:04:21,480
let's continue to the next part,

54

00:04:21,510  -->  00:04:24,250
another very important part, functions.
