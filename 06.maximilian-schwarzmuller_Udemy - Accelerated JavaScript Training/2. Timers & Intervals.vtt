WEBVTT
1

00:00:01.440  -->  00:00:07.020
I'll start with two of the most important built-in functions right away,

2

00:00:07.020  -->  00:00:15.240
I will start with the setTimeout function here and as I explained, this is a built-in function or a method

3

00:00:15.270  -->  00:00:17.900
on the window object to be precise.

4

00:00:17.910  -->  00:00:23.940
So on this window object and again in the browser, you are on this window object by default, this is

5

00:00:23.940  -->  00:00:25.450
your global scope,

6

00:00:25.530  -->  00:00:28.000
you can execute the setTimeout method.

7

00:00:28.110  -->  00:00:30.370
Now what will this method do?

8

00:00:30.420  -->  00:00:38.770
It will wait for a certain amount of milliseconds you specify and then it will execute a function.

9

00:00:38.820  -->  00:00:43.330
Therefore this method here expects two arguments,

10

00:00:43.380  -->  00:00:46.300
the first argument is the function it should execute

11

00:00:46.490  -->  00:00:52.620
and now here you could either point towards a function you created in your code with the traditional

12

00:00:52.620  -->  00:00:59.970
approaches you learned or you can pass a closure, so an anonymous function here. I'll do the latter and

13

00:00:59.970  -->  00:01:04.810
I will just provide a function, then the code which should get executed

14

00:01:05.010  -->  00:01:08.450
and remember, we're still inside the argument list here,

15

00:01:08.610  -->  00:01:12.750
so then I will add a comma to add the second argument. Here

16

00:01:12.780  -->  00:01:19.500
I specify the amount of milliseconds this timeout or this timer should wait before executing this function

17

00:01:19.520  -->  00:01:19.780
.

18

00:01:20.070  -->  00:01:28.630
So I'll specify 2000, so two seconds and then I want to print finished.

19

00:01:28.710  -->  00:01:32.190
Now what do you think we'll see if I hit run?

20

00:01:34.380  -->  00:01:41.720
Well nothing for two seconds but then finished because as explained, the setTimeout function will

21

00:01:41.730  -->  00:01:48.900
wait for two seconds and then execute all the code inside this function which has passed as the first

22

00:01:48.900  -->  00:01:49.850
argument

23

00:01:50.130  -->  00:01:58.980
and this is a very important built-in method which of course allows you to trigger some events in your application,

24

00:01:59.280  -->  00:02:09.000
to create little animations, for example to fetch some code after a specific time has passed and so on,

25

00:02:09.000  -->  00:02:09.360
so

26

00:02:09.360  -->  00:02:15.030
really something important which allows you to create awesome user experiences and which you'll often

27

00:02:15.030  -->  00:02:17.320
use in your application.

28

00:02:17.810  -->  00:02:24.650
Now another very important built-in function is setInterval.

29

00:02:24.650  -->  00:02:32.050
Now as setTimeout, this is registered on the window object, it's a method of the window object

30

00:02:32.310  -->  00:02:35.850
and it works very similar.

31

00:02:35.850  -->  00:02:38.960
It also expects a function as the first argument

32

00:02:38.990  -->  00:02:41.260
and again you don't have to use a closure here,

33

00:02:41.400  -->  00:02:47.100
you could just point towards a function you created in the code like you learned it before

34

00:02:47.610  -->  00:02:53.640
and then as a second argument, you provide the interval in milliseconds,

35

00:02:53.640  -->  00:02:56.440
for example 500 for half a second.

36

00:02:56.730  -->  00:03:04.980
Now what this function will do is it will run this function you specify as the first argument,

37

00:03:04.980  -->  00:03:08.520
so this function here every 500 milliseconds,

38

00:03:08.670  -->  00:03:12.950
so twice a second basically and it won't stop by default,

39

00:03:13.140  -->  00:03:22.240
so if I now print Ping! here for example, to show each individual ping, I can hit

40

00:03:22.300  -->  00:03:32.030
run, you get a lot of pings and that won't stop.

41

00:03:32.070  -->  00:03:39.170
So in order to stop, I'll get rid of the code here, hit run again to run the new code

42

00:03:39.170  -->  00:03:44.730
and now I finish this, then I just revert it back to the old state.

43

00:03:44.760  -->  00:03:49.830
Now of course as you saw, this function keeps running so it executes this code twice a second

44

00:03:49.830  -->  00:03:56.070
in this case and maybe you want this behavior, maybe you do need an interval which has to run some code

45

00:03:56.100  -->  00:04:01.380
every five seconds or whatever in your application but maybe you want to stop it at some time in the

46

00:04:01.380  -->  00:04:02.260
future.

47

00:04:02.640  -->  00:04:10.530
To do this, I'll create a variable named interval and I just assign setInterval to this variable.

48

00:04:10.530  -->  00:04:14.320
So now I just have a reference to the setInterval method here

49

00:04:14.640  -->  00:04:20.870
and then let's say at some point in my code, I run a certain check where I see if I still need

50

00:04:20.870  -->  00:04:24.780
the interval and I will demonstrate this with the timeout function here.

51

00:04:25.020  -->  00:04:29.350
So I'll have timeout function from before

52

00:04:29.790  -->  00:04:39.450
and let's say after 2500 seconds, I'll want to stop the interval and I can do this with the clearInterval

53

00:04:39.470  -->  00:04:39.800
method, also

54

00:04:40.270  -->  00:04:44.360
available on the window object and I pass the interval,

55

00:04:44.520  -->  00:04:50.320
so this variable, in which I stored this interval.

56

00:04:50.340  -->  00:04:55.140
So now if I hit run, what do you think we'll see?

57

00:04:57.450  -->  00:05:06.600
Well, we got ping five times because we're executing it 5 times, 2500 milliseconds by 500, divided

58

00:05:06.600  -->  00:05:07.770
by 500.

59

00:05:07.770  -->  00:05:14.160
So we have this timeout which will stop the interval here after two and a half seconds which of course

60

00:05:14.160  -->  00:05:17.550
means that the interval got fired five times until then.

61

00:05:17.550  -->  00:05:24.750
And this is how you can work with setTimeout and setInterval to execute code depending on some

62

00:05:24.750  -->  00:05:32.070
timing and which, again as mentioned before, might be used for creating nice animations, fetching some

63

00:05:32.070  -->  00:05:33.070
data, whatever, 

64

00:05:33.120  -->  00:05:38.990
you will probably often use this and it's important to know how to use it, how to clear this interval

65

00:05:39.000  -->  00:05:44.370
if you don't need it anymore and how both functions can interact with each other, like this.

66

00:05:44.370  -->  00:05:50.420
Of course you could also call setTimeout inside an interval or the other way around,

67

00:05:50.430  -->  00:05:52.090
there are no limitations.

68

00:05:52.260  -->  00:05:56.900
These are just built-in methods and can be used as such.
