WEBVTT
1

00:00:01.980  -->  00:00:08.240
So we had a look at the very basic data structures; numbers, strings, booleans

2

00:00:08.610  -->  00:00:13.020
but Javascript offers us more data structures than these.

3

00:00:13.440  -->  00:00:16.140
Let's have a look at the following;

4

00:00:16.530  -->  00:00:24.630
if I have square brackets and then 1, 2 and 3,

5

00:00:27.400  -->  00:00:36.320
what do you think I'll see in the console if I hit run now? Well I get it printed like this but what is this?

6

00:00:36.750  -->  00:00:40.880
Well let's check it with typeof,

7

00:00:43.110  -->  00:00:44.260
it's an object

8

00:00:44.580  -->  00:00:53.820
but actually, yes it's an object but specifically, it's an array. An array is a collection of values

9

00:00:53.820  -->  00:00:54.110
and

10

00:00:54.180  -->  00:00:56.620
this clearly is a collection of numbers here,

11

00:00:56.640  -->  00:00:58.930
so we have three numbers in this array

12

00:00:59.370  -->  00:01:06.550
and the cool thing about an array is that it allows us to store multiple values in one variable,

13

00:01:06.660  -->  00:01:09.920
as you see here, we have three numbers in one variable.

14

00:01:09.930  -->  00:01:12.920
We also may mix different data types,

15

00:01:13.050  -->  00:01:18.550
so I may add '4' but notice that 4 is in quotation marks,

16

00:01:18.570  -->  00:01:21.360
so 4 actually is a string here.

17

00:01:21.780  -->  00:01:26.640
So if I run this, you see we still get it printed out

18

00:01:26.670  -->  00:01:32.580
but now we have an array of mixed data types which might have its uses in your program too.

19

00:01:32.610  -->  00:01:37.920
Now while it's certainly cool to have such a collection, you most of the time won't need the complete collection

20

00:01:37.950  -->  00:01:43.550
but you want to store several values there but then want to be able to access the different values.

21

00:01:43.830  -->  00:01:50.370
You can easily access values by putting square brackets after your variable name when you are accessing

22

00:01:50.370  -->  00:01:51.140
it

23

00:01:51.150  -->  00:01:56.460
and between the square brackets, you put the index of the value you want to access.

24

00:01:56.460  -->  00:02:01.760
Now here's an important thing and I will come back to arrays in a later stage of this course,

25

00:02:01.900  -->  00:02:04.880
arrays start with an index of zero,

26

00:02:05.160  -->  00:02:10.150
so the first element, one here, has an index of zero.

27

00:02:10.170  -->  00:02:17.040
So if I tried this, accessing the first element as you might think, what do you think I'll see in the console

28

00:02:17.040  -->  00:02:20.970
here? Two,

29

00:02:21.330  -->  00:02:25.930
so we're actually accessing the second element even though I type one here

30

00:02:26.100  -->  00:02:30.190
and the reason of course is that the first index actually is zrro.

31

00:02:30.420  -->  00:02:32.780
So if I hit run now,

32

00:02:33.330  -->  00:02:34.880
now you see we're getting one

33

00:02:35.130  -->  00:02:37.320
and that's just important to keep in mind.

34

00:02:37.530  -->  00:02:40.000
Therefore the last element is not 4,

35

00:02:40.200  -->  00:02:49.440
and if I were to try accessing the 4th index here or index 4 here, what do you think we'll see in

36

00:02:49.440  -->  00:02:51.550
the console?

37

00:02:52.650  -->  00:03:00.090
Well, we're not seeing four but we're getting undefined and undefined is a pretty clear message, we're

38

00:03:00.120  -->  00:03:02.780
accessing a value which is not defined,

39

00:03:02.880  -->  00:03:05.420
we're accessing the last index here

40

00:03:05.520  -->  00:03:09.020
and you can think of this like having an extra comma here,

41

00:03:09.150  -->  00:03:12.920
so now here we have a new element but there is nothing there.

42

00:03:13.350  -->  00:03:21.120
So what do you think shows in a console if I now click run? Still undefined, because now I just made

43

00:03:21.120  -->  00:03:26.030
clear what happened before. We have this extra element but there's nothing here,

44

00:03:26.070  -->  00:03:28.370
so it's undefined.

45

00:03:28.380  -->  00:03:30.940
Now we also get some other types we can use,

46

00:03:31.070  -->  00:03:32.610
this is an array here,

47

00:03:33.090  -->  00:03:43.020
if I get rid of it and I instead try this, undefined, that was what we just got a couple of times, right,

48

00:03:43.020  -->  00:03:43.680
what

49

00:03:43.800  -->  00:03:47.010
do you think I'll see if I now hit run?

50

00:03:48.120  -->  00:03:52.450
Well we still get undefined, so we can set a variable to being undefined

51

00:03:52.560  -->  00:03:59.580
but we should not do this because undefined really is Javascript's error message of telling us 'hey, you

52

00:03:59.590  -->  00:04:03.320
are accessing something which isn't there, which wasn't defined'

53

00:04:03.750  -->  00:04:07.280
and if we want to set a variable to being empty

54

00:04:07.320  -->  00:04:12.580
and there are cases where we want to do this, where we want to reset it, where we want to clear it,

55

00:04:12.660  -->  00:04:20.070
we should not use undefined but instead null which also is a keyword and tells Javascript 'hey this

56

00:04:20.070  -->  00:04:25.970
variable is now not set or it is empty but it is not undefined',

57

00:04:26.010  -->  00:04:34.980
so what do you think I'll see in a console if I now hit run? I get null because now it is set to null

58

00:04:35.070  -->  00:04:37.800
and not to undefined.

59

00:04:37.800  -->  00:04:40.880
Now is null the same as undefined?

60

00:04:41.220  -->  00:04:46.530
Let's check this and I'll use an operator which I'll explain in more depth later on

61

00:04:46.590  -->  00:04:51.530
but basically, I'll compare null to undefined

62

00:04:51.930  -->  00:04:54.770
and I'm printing the result of this comparison.

63

00:04:55.080  -->  00:05:01.130
Now I'm comparing it with two equal signs, which means check if the value is equal

64

00:05:01.530  -->  00:05:04.210
and what do you think I'll see in the console?

65

00:05:06.990  -->  00:05:07.310
I get

66

00:05:07.310  -->  00:05:08.040
true,

67

00:05:08.220  -->  00:05:17.210
so internally Javascript has the same value for null and undefined, which means it's kind of the same

68

00:05:17.220  -->  00:05:19.580
if we only have a look at the value

69

00:05:19.800  -->  00:05:23.390
but if I add another equal sign here,

70

00:05:23.790  -->  00:05:28.870
I not only check for the values being equal but also for the types being equal

71

00:05:29.130  -->  00:05:33.820
and if I now run this code, I get false.

72

00:05:33.960  -->  00:05:40.580
So null is not exactly the same as undefined but value-wise, it's handled in the same way.

73

00:05:40.590  -->  00:05:50.720
So we had undefined and null, we have one other special type. I'm going back to printing out the variable

74

00:05:50.830  -->  00:05:51.190
and

75

00:05:51.450  -->  00:06:00.300
I can also set it to capital n, lowercase a, capital n and that refers to Not A Number. Not A Number

76

00:06:00.300  -->  00:06:03.760
as the name says is well simply just not a number

77

00:06:03.800  -->  00:06:08.330
and what do you think I'll get when I hit run now?

78

00:06:09.360  -->  00:06:13.100
Well I get not a number, but what's the sense of this type?

79

00:06:13.120  -->  00:06:18.210
Well typically you would set a variable equal to Not A Number but you might get not a number as the

80

00:06:18.210  -->  00:06:22.080
result of of some kind of mathematical calculation.

81

00:06:22.080  -->  00:06:28.530
If something goes wrong there or for example, you try to multiply a number with a string, which doesn't

82

00:06:28.530  -->  00:06:31.400
work since you can't multiply these two types,

83

00:06:31.560  -->  00:06:38.130
then you would get Not A Number as the result since the result isn't a number since

84

00:06:38.130  -->  00:06:40.680
Javascript isn't able to get a result,

85

00:06:40.710  -->  00:06:46.680
so it's mostly an error message from mathematical equations or mathematical operations.

86

00:06:46.680  -->  00:06:53.840
Now with null undefined and Not A Number, what is the type of Not A Number,

87

00:06:55.260  -->  00:07:01.100
what do you think we'll see in a console?

88

00:07:01.110  -->  00:07:05.970
It's actually a number, which is pretty confusing since this is called Not A Number,

89

00:07:06.000  -->  00:07:06.520
right?

90

00:07:06.780  -->  00:07:14.070
But as I said, it's the result of a mathematical calculation and therefore technically, it's a number

91

00:07:14.070  -->  00:07:19.290
but it's a special number, a kind of undefined number if you want to put it like this.

92

00:07:19.290  -->  00:07:23.110
So actually, a number which isn't a number

93

00:07:23.160  -->  00:07:24.960
and yes, this is a bit confusing

94

00:07:25.110  -->  00:07:31.810
but basically think of it as an error message from a mathematical calculation.

95

00:07:32.700  -->  00:07:40.840
And whilst we're at it, what is the type of null? What do you think we'll see if I hit run?

96

00:07:41.970  -->  00:07:43.570
It's an object,

97

00:07:43.680  -->  00:07:45.570
and what's the type of undefined?

98

00:07:50.730  -->  00:07:52.340
It's undefined.

99

00:07:52.680  -->  00:07:58.580
So this is why I was getting this error when comparing both with three equal signs

100

00:07:58.710  -->  00:08:07.710
which also checks on type equality. The types of undefined and null are not equal, undefined is of type

101

00:08:07.770  -->  00:08:13.250
undefined and null is of type object. The values are equal

102

00:08:13.500  -->  00:08:16.690
and that's important to understand here.
