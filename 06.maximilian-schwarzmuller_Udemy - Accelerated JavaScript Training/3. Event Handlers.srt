1

00:00:02,220  -->  00:00:09,750
I'll go back to the Javascript code here and I'll start by showing this with one very important

2

00:00:09,750  -->  00:00:13,770
event for example. On the window object,

3

00:00:13,860  -->  00:00:21,330
we have the load event and I can add an event handler to this event with onload property here on

4

00:00:21,330  -->  00:00:22,550
the window object.

5

00:00:22,740  -->  00:00:28,880
I then assign a function, an anonymous function here which should handle this loading event whenever

6

00:00:28,900  -->  00:00:30,210
it occurs,

7

00:00:30,530  -->  00:00:38,670
I will then print out window loaded. If I now run this code,

8

00:00:38,670  -->  00:00:42,060
what do you think will happen?

9

00:00:42,180  -->  00:00:49,950
I get window loaded because it's initially being executed which means this onload handler is being

10

00:00:50,190  -->  00:00:54,800
recognized, is registered and then when the window actually loads,

11

00:00:55,250  -->  00:00:57,560
this code here is run.

12

00:00:57,720  -->  00:01:03,270
So this is an event handler which is always executed whenever the window loads, which is of course an important

13

00:01:03,270  -->  00:01:08,210
event because at this point of time, we know that the window was loaded, the code is available,

14

00:01:08,220  -->  00:01:10,420
we can safely work with it.

15

00:01:10,530  -->  00:01:16,100
Therefore you might sometimes need this onload listener to do certain initialization tasks

16

00:01:16,140  -->  00:01:20,640
as you can be sure that there window was successfully loaded at this point of time.

17

00:01:20,760  -->  00:01:24,900
You can also see very well how events are actually handled,

18

00:01:24,900  -->  00:01:31,040
we use the onload property on the window object and we assign an anonymous function which is therefore

19

00:01:31,110  -->  00:01:33,030
registered as such an event handler

20

00:01:33,030  -->  00:01:38,430
and of course we not only have the onload event handler, we can also listen to other events.

21

00:01:38,790  -->  00:01:46,650
Let's say I add a new button element in my HTML code and this button says Click Me but it doesn't have

22

00:01:46,710  -->  00:01:49,200
any other logic attached to it.

23

00:01:49,200  -->  00:01:55,170
If I wanted to listen to any events on this button or if I want to handle the click event on this button,

24

00:01:55,630  -->  00:02:04,950
I'll first fetch the button with a query selector here, button, I'm just selecting by the tag name here,

25

00:02:04,950  -->  00:02:15,600
so by this name here, button and then I can access my button and with onclick, I can set up an onclick event

26

00:02:15,600  -->  00:02:25,230
handler and I can then print something, for example clicked. If I now click on clear and then on run,

27

00:02:25,230  -->  00:02:25,260
what

28

00:02:25,260  -->  00:02:27,250
do you think will happen?

29

00:02:28,170  -->  00:02:34,200
Well nothing for now because I only set up this onclick handler, so this should only get executed if I

30

00:02:34,200  -->  00:02:36,720
actually click on the button which I haven't done yet.

31

00:02:36,960  -->  00:02:40,990
So now if I click on the button, now we see clicked,

32

00:02:41,310  -->  00:02:45,790
so now this function which is set up as an onclick listener is executed

33

00:02:45,930  -->  00:02:50,120
and of course this function is executed every time I click on this button.

34

00:02:50,940  -->  00:02:52,980
So that's really powerful

35

00:02:53,040  -->  00:02:59,760
but of course you might ask, how do I know which functions are available on a specific HTML element?

36

00:02:59,760  -->  00:03:00,060
The

37

00:03:00,090  -->  00:03:05,940
answer to this is you can either log out the element to the console and then have a look at all

38

00:03:05,940  -->  00:03:11,940
the properties and you will identify the event handlers by the on at the beginning and then the name

39

00:03:11,940  -->  00:03:17,400
of the event or of course and that is no joke but a valid approach,

40

00:03:17,400  -->  00:03:23,940
you simply google for Javascript and then the element name and then events and you should find lists

41

00:03:23,940  -->  00:03:29,580
with all the events and that is a very valid approach to finding out about them because there are a

42

00:03:29,580  -->  00:03:37,020
lot but of course the most common ones like clicking, mouse enter, mouse leave and so on are always included

43

00:03:37,020  -->  00:03:37,460
.

44

00:03:37,470  -->  00:03:44,160
Also note, you can not only listen to onclick on buttons or links, you can add these event handlers on

45

00:03:44,160  -->  00:03:48,900
any HTML element, even if it normally isn't clickable

46

00:03:48,930  -->  00:03:51,620
but in the end, you can click everywhere in the browser right,

47

00:03:51,660  -->  00:03:53,330
so you can listen to it everywhere.

48

00:03:53,490  -->  00:04:02,400
You can even set up an event handler, an onclick event handler on the document itself. If I now hit run,

49

00:04:02,770  -->  00:04:05,770
you will see I get clicked no matter where I click,

50

00:04:05,850  -->  00:04:08,000
so that will work too.

51

00:04:08,010  -->  00:04:12,420
This is how you set up an event handler and I will change this back to button

52

00:04:12,420  -->  00:04:16,800
but there is one major disadvantage of this approach here.

53

00:04:16,830  -->  00:04:21,820
Imagine I want to execute two functions whenever I click this button,

54

00:04:22,140  -->  00:04:30,570
so I have another event handler here which says also clicked. If I now, after hitting run with js, click

55

00:04:30,570  -->  00:04:31,210
on this button,

56

00:04:31,230  -->  00:04:35,460
what do you think we'll see in the console?

57

00:04:35,460  -->  00:04:37,500
We only see also clicked.

58

00:04:37,560  -->  00:04:41,300
So the first event handler here is simply overwritten,

59

00:04:41,310  -->  00:04:42,560
it's no longer there

60

00:04:42,630  -->  00:04:48,300
and that is a problem because oftentimes, you'll need multiple listeners and you don't only want to have

61

00:04:48,300  -->  00:04:49,460
one handler.

62

00:04:49,770  -->  00:04:55,290
So while this approach works fine as long as you only have one thing you want to execute,

63

00:04:55,320  -->  00:04:57,030
it certainly has its problems

64

00:04:57,060  -->  00:05:02,460
if you have multiple functions you want to call. Therefore in the next lecture, we'll have a look at an

65

00:05:02,460  -->  00:05:03,150
alternative.
