WEBVTT
1

00:00:01.320  -->  00:00:03.530
I'll start with closures.

2

00:00:03.570  -->  00:00:13.410
Now what are inclosures closures are basically functions which are defined in for example a number function

3

00:00:13.420  -->  00:00:13.470
.

4

00:00:13.500  -->  00:00:22.890
So in a local scope which have access to the variables defined around them or even if those rules are

5

00:00:22.890  -->  00:00:26.600
defined in the local scope off the outer function.

6

00:00:26.640  -->  00:00:34.080
So they are aware of their environment the closures and closures are a very useful tool for example

7

00:00:34.080  -->  00:00:41.530
when having callbacks in functions where you want to execute a function as a whole bag as is called

8

00:00:41.540  -->  00:00:44.010
that function is aware of its environment.

9

00:00:44.010  -->  00:00:51.030
So off the function which Well resulted in the callback or in any other function where you have a function

10

00:00:51.030  -->  00:00:52.890
inside a function.

11

00:00:52.950  -->  00:00:55.850
Now I could imagine that this is not 100 percent clear.

12

00:00:55.860  -->  00:01:00.720
So why don't we just have a look at it and learn it while using it.

13

00:01:00.780  -->  00:01:09.070
So I will create a new function here in my chalice script code and I will name it generator.

14

00:01:09.120  -->  00:01:17.310
Now this generator will take an input and then here I will define let's say a variable named number

15

00:01:17.400  -->  00:01:19.310
which which is set equal to input.

16

00:01:19.530  -->  00:01:23.840
And that's just to demonstrate what I was just talking about with the local scope.

17

00:01:23.910  -->  00:01:31.200
This function will then return something and it will return a number function.

18

00:01:31.200  -->  00:01:36.330
Now notice that this function here doesn't have a name.

19

00:01:36.510  -->  00:01:40.010
It's just a function and then parentheses.

20

00:01:40.350  -->  00:01:44.210
So this function here is an anonymous function.

21

00:01:44.340  -->  00:01:48.850
We don't know its name and we don't need you because we're not calling it from outside.

22

00:01:48.930  -->  00:01:54.160
We're just returning it here and we will be able to use it as such a return value.

23

00:01:54.180  -->  00:01:56.030
But we don't need a name for it.

24

00:01:56.430  -->  00:01:58.380
And this function here is a closure.

25

00:01:58.380  -->  00:02:03.210
It's inside that function and it's aware of its environment.

26

00:02:03.210  -->  00:02:06.900
We can use number or input inside this function.

27

00:02:07.110  -->  00:02:08.940
And it's an anonymous function.

28

00:02:09.180  -->  00:02:18.660
So here in this function I could then again return something I could return number times to.

29

00:02:18.690  -->  00:02:23.820
Now this might look strange but what do you think will happen if I create a new variable which Haikal

30

00:02:23.820  -->  00:02:27.970
calc and I set it equal to generator.

31

00:02:28.380  -->  00:02:30.680
Let's say 900.

32

00:02:31.950  -->  00:02:42.730
And what do you think will happen if I print Konsole log calc what do we see if I hit run.

33

00:02:43.680  -->  00:02:45.160
We see the function.

34

00:02:45.390  -->  00:02:53.160
Well maybe you expected an error or are you expected to see one thousand eight hundred but never a staircase

35

00:02:53.520  -->  00:02:58.610
because we were executing generator which is dysfunction of course and we're passing 100.

36

00:02:58.680  -->  00:03:03.990
Now this function simply returns as a function and overdoing as we're binding this return function to

37

00:03:03.990  -->  00:03:08.520
Kalik and then we're printing it therefore we get the function which was returned.

38

00:03:09.000  -->  00:03:15.870
But since we do get a function as a return value we can execute this function and I do this by adding

39

00:03:15.870  -->  00:03:20.810
parentheses after Kelk of course because Kelk this variable is just referring to a function.

40

00:03:20.850  -->  00:03:26.680
The function we're getting back from generator to disclosure is referring to disclosure here.

41

00:03:27.240  -->  00:03:32.090
So if a clear day is run again what happens now.

42

00:03:32.460  -->  00:03:37.930
Now I get one thousand eight hundred and maybe just looks straightforward maybe it doesn't.

43

00:03:38.310  -->  00:03:45.150
But it's kind of surprising what's happening here because I'm calling a function here generator and

44

00:03:45.150  -->  00:03:54.890
I'm passing 900 and it's not absolutely clear that the return function here which uses number will story

45

00:03:55.050  -->  00:03:56.440
is 900.

46

00:03:56.460  -->  00:04:00.560
This value and keep it until we call it.

47

00:04:00.600  -->  00:04:03.220
It could also happen that we get this function.

48

00:04:03.300  -->  00:04:06.720
And at that time we call it it's not aware of number.

49

00:04:07.050  -->  00:04:09.210
But that's not the case in javascript.

50

00:04:09.210  -->  00:04:11.290
That is what a closure is all about.

51

00:04:11.400  -->  00:04:19.500
It is aware of its environment and store it so that when we use that function here which is bound to

52

00:04:19.500  -->  00:04:27.170
the calc very variable it will still know what number was equal at the time it was well returned.

53

00:04:27.780  -->  00:04:31.690
So this is really really amazing in my opinion.

54

00:04:31.920  -->  00:04:39.070
I can even show it as if I add another very low Kellock number which is let's say generator.

55

00:04:39.170  -->  00:04:46.150
That wasn't if I hit run again you still get 1800.

56

00:04:46.200  -->  00:04:53.310
So even though I'm now rerunning this function and I'm resetting number and binding it to a number variable

57

00:04:53.370  -->  00:05:00.090
and therefore this old variable this old closure is not touched by that as I said it stores it's environment

58

00:05:00.110  -->  00:05:00.370
.

59

00:05:00.600  -->  00:05:08.070
And this is a really powerful tool and that is as I said why it's often used for callbacks which have

60

00:05:08.070  -->  00:05:13.000
to execute a function because you're able to store the environment
