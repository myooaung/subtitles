WEBVTT
1

00:00:01.320  -->  00:00:08.790
Finally, the last built-in object or feature I want to show you are regular expressions.

2

00:00:08.980  -->  00:00:16.200
Now what are regular expressions? Regular expressions are patterns used to match character combinations in

3

00:00:16.200  -->  00:00:17.620
strings,

4

00:00:17.670  -->  00:00:25.620
so basically like little search methods to search for certain characters or character combinations in

5

00:00:25.620  -->  00:00:26.130
a string,

6

00:00:26.130  -->  00:00:34.230
so in some text and regular expressions and how to write them are a topic for its own course to be honest

7

00:00:34.610  -->  00:00:39.690
and you will find links to this or to some more information in a cheatsheet

8

00:00:39.870  -->  00:00:47.390
but here, I want to show you how to use them and how Javascript supports regular expressions.

9

00:00:47.850  -->  00:00:56.460
So let's start by creating a little string here and I'll keep it simple, it's just abc and then I create

10

00:00:56.460  -->  00:01:02.640
a pattern, so a regular expression and here we can use a special syntax where we have forward slash

11

00:01:03.300  -->  00:01:09.570
and another forward slash and between both slashes, we can write our regular expression which you want

12

00:01:09.570  -->  00:01:10.970
to use.

13

00:01:11.250  -->  00:01:24.580
For example if I use ab here and I now log pattern, what do you think we'll get if I hit run? We get

14

00:01:24.720  -->  00:01:26.930
object RegExp.

15

00:01:27.270  -->  00:01:31.140
So this is an object, indeed it's not a string or anything like this,

16

00:01:31.140  -->  00:01:36.810
this is just a different syntax but it creates an object, it creates a regular expression and we can

17

00:01:36.810  -->  00:01:38.720
use this pattern.

18

00:01:38.730  -->  00:01:40.550
Now how can we use it?

19

00:01:40.800  -->  00:01:49.400
We can run pattern.exec and pass the string on which we want to execute it.

20

00:01:49.470  -->  00:01:55.340
Now in order to see something, I'll log whatever we get back from this execution here,

21

00:01:55.550  -->  00:01:59.960
so I'll hit clear and I'll show you what we'll see,

22

00:02:00.970  -->  00:02:02.460
we got ab,

23

00:02:02.460  -->  00:02:04.730
notice that we have it in an array.

24

00:02:05.190  -->  00:02:12.080
So this basically tells us that ab, our pattern here, was found in this array.

25

00:02:12.420  -->  00:02:18.040
What if I remove the b here and I have ac, what will happen if I now hit run?

26

00:02:18.180  -->  00:02:23.240
Now we get null because we don't find this pattern in this string, right?

27

00:02:23.280  -->  00:02:31.470
If I change the pattern to bc and the string back to abc and I hit run, I of course find bc. What if

28

00:02:31.470  -->  00:02:35.190
I change it to ac but I have the b in the middle and the string, notice that,

29

00:02:35.190  -->  00:02:45.990
so what happens now? I get null because this specific pattern, an a followed by a c isn't found here.

30

00:02:45.990  -->  00:02:52.200
Of course there are also ways to write regular expressions which use wildcards to allow for this case

31

00:02:52.200  -->  00:02:55.320
where you would have a character between two other characters

32

00:02:55.440  -->  00:03:00.860
but this basic expression here is just looking for an a followed by b. 

33

00:03:01.290  -->  00:03:04.740
What if I have this string abab

34

00:03:04.800  -->  00:03:06.600
and now I it run?

35

00:03:08.100  -->  00:03:10.210
Well I still only get ab,

36

00:03:10.620  -->  00:03:14.910
we also can use the test function here

37

00:03:15.120  -->  00:03:18.930
and what could you imagine that this function gives us?

38

00:03:19.980  -->  00:03:20.880
It gives us true,

39

00:03:20.880  -->  00:03:24.010
so basically test if this pattern matches the string.

40

00:03:24.250  -->  00:03:28.340
It's not giving us back the match, just a true or false

41

00:03:28.350  -->  00:03:35.430
if it was successful and we can also do it the other way around. We can use the string and then use the

42

00:03:35.430  -->  00:03:39.670
match function here and I'll pass a pattern here.

43

00:03:40.170  -->  00:03:44.720
What do you think we'll now get if I hit run? I get ab,

44

00:03:44.730  -->  00:03:50.970
so it's like pattern.exec, just the other way around, that I just use my string and then say hey I want

45

00:03:50.970  -->  00:03:58.530
to match this string with a certain pattern, instead of using a pattern and executing on a string.

46

00:03:58.590  -->  00:03:59.520
Now as explained,

47

00:03:59.520  -->  00:04:04.100
regular expressions are kind of a science for their own

48

00:04:04.140  -->  00:04:13.080
and there are a lot of special characters you can use to build very complex queries and queries

49

00:04:13.080  -->  00:04:16.050
can get as complex as this.

50

00:04:16.320  -->  00:04:25.020
If you for example search for validate email regex and this is generally a good approach to learn

51

00:04:25.020  -->  00:04:32.280
regular expressions, by searching for the problem you want to solve and then appending regex, and

52

00:04:32.280  -->  00:04:37.380
then you get probably some forum discussions like this one here

53

00:04:37.620  -->  00:04:43.390
and you get an example which regular expression you might want to use and this is the reason why I

54

00:04:43.390  -->  00:04:46.790
am not diving super deep into this here,

55

00:04:46.860  -->  00:04:54.030
I want to show you that it exists and how you can use it but learning regular expressions is much

56

00:04:54.030  -->  00:05:00.100
more than this course could ever do for you because it's no regular expressions course and as you can

57

00:05:00.120  -->  00:05:08.520
see or as you can tell by this expression, you could create a course of that but what's the use of regular expressions?

58

00:05:09.120  -->  00:05:14.430
The use is that you can for example validate user input if you're having a form

59

00:05:14.520  -->  00:05:20.010
and like the thing I just googled for, you want to make sure that the e-mail address the user entered

60

00:05:20.430  -->  00:05:22.650
is a valid email address.

61

00:05:22.680  -->  00:05:27.470
So he's not tricking you or he did not forget the @ sign or anything like this,

62

00:05:27.630  -->  00:05:34.230
you can use a regular expression to do this because the other option would be to loop through the string

63

00:05:34.230  -->  00:05:41.640
you get back and check each character for being an @ sign to find out if there is an @ sign and

64

00:05:41.640  -->  00:05:42.540
so on

65

00:05:42.780  -->  00:05:44.480
or use the indexof method

66

00:05:44.490  -->  00:05:51.280
but all these methods are kind of hard, especially as you have to combine them to really validate an

67

00:05:51.630  -->  00:05:53.760
email address for example

68

00:05:53.760  -->  00:05:58.190
and then on the other hand, patterns like regular expressions make this very simple.

69

00:05:58.230  -->  00:06:03.540
Yes the pattern looks difficult but for one, you can Google for help,

70

00:06:03.750  -->  00:06:09.160
secondly if you know how to use it, it isn't that difficult anymore and it is really quick,

71

00:06:09.180  -->  00:06:11.980
it offers a great performance and it's a one-liner.

72

00:06:12.000  -->  00:06:19.800
It's really simple then and you don't have to write multiple nested loops to achieve the same with a

73

00:06:19.810  -->  00:06:22.080
slower performance.

74

00:06:22.080  -->  00:06:25.340
So that is where regular expressions are really helpful

75

00:06:25.470  -->  00:06:32.310
and with exec and match here as well as the test method, you have three important methods to find out if a certain

76

00:06:32.310  -->  00:06:34.320
string matches this.

77

00:06:34.380  -->  00:06:37.900
Of course you can not only use it for matching user input,

78

00:06:37.980  -->  00:06:44.250
you might also be interested in finding a certain piece of text in a longer text and here, regular expressions

79

00:06:44.250  -->  00:06:45.220
can help too,

80

00:06:45.360  -->  00:06:48.800
so that is why they are really useful.
