WEBVTT
1

00:00:01.160  -->  00:00:06.130
So we had a look at addition, subtraction, multiplication and division,

2

00:00:06.240  -->  00:00:11.150
the basic mathematic operations but there are other operators as well

3

00:00:11.160  -->  00:00:18.870
and you already saw some of them, for example operators to compare values like the following one.

4

00:00:19.350  -->  00:00:25.480
If I have this statement and I want to see if one equals one,

5

00:00:25.660  -->  00:00:29.550
what do you think we'll get? Well of course we get true.

6

00:00:29.850  -->  00:00:37.170
So this here is a comparison operator and we have the equal operator with two equal signs and with

7

00:00:37.170  -->  00:00:38.460
three equal signs,

8

00:00:38.520  -->  00:00:40.320
I already showed this before.

9

00:00:40.800  -->  00:00:44.390
If I hit run again, we still get true.

10

00:00:44.730  -->  00:00:50.790
The reason for this is that with three equal signs, we're not only checking if the value is the same

11

00:00:51.000  -->  00:00:53.250
but also if the type is the same

12

00:00:53.250  -->  00:00:55.220
and here of course both is true,

13

00:00:55.320  -->  00:00:57.800
the value is one and the type is number.

14

00:00:58.080  -->  00:01:07.070
If we turn this one here into a string, we would get false because it's not the same type,

15

00:01:07.080  -->  00:01:09.670
this is a string and this is a number.

16

00:01:09.810  -->  00:01:18.480
If I remove one equal sign and I only check for value equality and I don't care about the type, then

17

00:01:18.480  -->  00:01:25.410
I would get true again because the value is the same since Javascript is able to turn this string with

18

00:01:25.410  -->  00:01:30.960
a value of 1 into a number with value of 1 if you want to put it like that.

19

00:01:30.990  -->  00:01:37.170
You can also check if something is not equal by adding an exclamation mark in front of the equal

20

00:01:37.170  -->  00:01:37.380
sign,

21

00:01:37.380  -->  00:01:42.390
notice that I only have one equal sign here to check for value equality.

22

00:01:42.390  -->  00:01:44.760
So now if I hit run, I get

23

00:01:44.760  -->  00:01:48.300
true because one is not equal to two.

24

00:01:48.300  -->  00:01:56.460
Now if I check if one is equal to one as a string but I use the exclamation mark and two equal signs,

25

00:01:56.820  -->  00:02:03.040
I'm checking if the values and the types are not equal in this case.

26

00:02:03.090  -->  00:02:07.400
So what do you think I'll get here? I'll get true

27

00:02:07.530  -->  00:02:13.550
because the number one is not completely equal to the string one,

28

00:02:13.590  -->  00:02:15.410
it doesn't have the same type.

29

00:02:15.600  -->  00:02:21.900
So as with three equal signs, we got the same for the opposite when checking if something is not the

30

00:02:21.900  -->  00:02:22.050
case,

31

00:02:22.050  -->  00:02:27.650
of course only with two equal signs since one of them is replaced with the exclamation mark here.

32

00:02:27.810  -->  00:02:33.690
Of course we may not only check if something is equal or not equal, we can also check if something

33

00:02:33.690  -->  00:02:40.970
is greater, like if one is greater than zero which would give us true

34

00:02:41.340  -->  00:02:50.010
and is one greater than one? Certainly not. Of course we can change this to one being greater than

35

00:02:50.220  -->  00:02:52.410
or equal to one,

36

00:02:53.040  -->  00:02:55.060
in this case we would get true,

37

00:02:55.320  -->  00:02:59.880
since it is greater or equal, it is equal in the end.

38

00:03:00.180  -->  00:03:04.160
Does this also work with the string here?

39

00:03:04.740  -->  00:03:05.870
Yes and

40

00:03:05.870  -->  00:03:09.510
does it work if I add another exclamation marks so that we get false again

41

00:03:09.510  -->  00:03:12.790
because it's not the same type?

42

00:03:12.810  -->  00:03:14.070
No, we get an error,

43

00:03:14.070  -->  00:03:15.560
we don't have that operator.

44

00:03:15.750  -->  00:03:22.690
So with the greater or smaller or greater than and smaller than operators, we can't check the types,

45

00:03:22.710  -->  00:03:25.170
we can only check the values here

46

00:03:25.440  -->  00:03:33.390
and that of course makes sense because if you think about it, you would not check if it's equal but if

47

00:03:33.390  -->  00:03:34.940
it's greater or equal

48

00:03:34.980  -->  00:03:39.300
and how would you check if one type is greater than the other types?

49

00:03:39.300  -->  00:03:42.570
Types have no such order in this case

50

00:03:42.570  -->  00:03:45.090
or in this sense.

51

00:03:45.090  -->  00:03:46.770
So this won't work.
