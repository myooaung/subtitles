1

00:00:01,090  -->  00:00:08,730
So other useful built-in functions and methods are some parsers or functions or methods which allow

2

00:00:08,730  -->  00:00:14,120
you to transform certain values. Now I want to explain some of these built-in functions too.

3

00:00:14,430  -->  00:00:21,550
So imagine you have a variable a which is a string of '5'

4

00:00:21,660  -->  00:00:23,850
but it's not a number, it's a string

5

00:00:24,300  -->  00:00:27,870
and then I could print this variable of course

6

00:00:27,900  -->  00:00:31,650
and unsurprisingly, we would see a string of five.

7

00:00:31,680  -->  00:00:39,480
Now I can also call the parseInt method which is also available on the window object, so in the global

8

00:00:39,480  -->  00:00:40,500
scope

9

00:00:40,650  -->  00:00:44,000
and if I now hit run, what do you think we'll see now?

10

00:00:44,940  -->  00:00:46,480
Well now I get 5 as a number,

11

00:00:46,500  -->  00:00:50,750
so this transforms a string into a number or at least tries to.

12

00:00:51,090  -->  00:00:56,760
What do you think we'll see if I have some text which should be hard to be transformed into a number?

13

00:00:59,010  -->  00:01:04,430
We get another number because it's not possible but it'll try it's best to

14

00:01:04,470  -->  00:01:07,330
get your string into a number.

15

00:01:07,590  -->  00:01:15,090
You're not only able to transform let's say something like this but imagine you have a string of

16

00:01:17,650  -->  00:01:18,480
fbb123

17

00:01:18,870  -->  00:01:19,850
so some

18

00:01:19,860  -->  00:01:26,330
hexadecimal string here, what do you think we'll now get

19

00:01:26,370  -->  00:01:27,090
if I hit run?

20

00:01:29,990  -->  00:01:36,720
NaN because still, this is some string it doesn't know but parseInt takes another argument optionally.

21

00:01:37,440  -->  00:01:46,140
Here I can specify the base number of digits, so in which system I'm operating and the default is

22

00:01:46,140  -->  00:01:52,360
of course the decimal system but I can change this to hexadecimal for example

23

00:01:52,740  -->  00:01:53,880
and now if I hit run,

24

00:01:58,680  -->  00:01:59,580
I get a number.

25

00:01:59,580  -->  00:02:08,280
So this is now transformed from hexadecimal to an integer and you will probably not need this all

26

00:02:08,280  -->  00:02:14,670
the time but there might be use cases where you do need it and it's important to understand that Javascript

27

00:02:14,670  -->  00:02:22,920
offers you the tools to transform text in general into integers or even something like hexadecimal

28

00:02:22,920  -->  00:02:31,980
numbers or text here into an intger. Other useful functions would be let's say if we have a real

29

00:02:32,160  -->  00:02:40,470
number here and we want to transform this into a string, we can call toString on that because toString

30

00:02:40,830  -->  00:02:45,120
is a method defined in the Object.prototype

31

00:02:45,120  -->  00:02:52,050
and as explained, this is the base prototype of all the objects, therefore every object by default has

32

00:02:52,050  -->  00:02:53,870
this toString method here.

33

00:02:54,180  -->  00:03:02,190
So if I clear this and run it now, what do you think we'll get? We get a string of 10, so this number

34

00:03:02,190  -->  00:03:04,430
was now transformed into a string.

35

00:03:04,490  -->  00:03:09,560
Again, this is possible on each object in Javascript.

36

00:03:09,780  -->  00:03:15,480
And what do you think I'll get if I have 10.3 and I execute toFixed

37

00:03:15,690  -->  00:03:20,910
and we saw this function being used earlier in this course when we had this problem with the floating

38

00:03:20,910  -->  00:03:22,000
point number.

39

00:03:22,320  -->  00:03:30,390
So what you think we'll now get if it hit run? Well 10, toFixed just basically rounds it

40

00:03:30,540  -->  00:03:37,230
and we have to specify the number of decimal places here as an argument, for example 2 which would give

41

00:03:37,230  -->  00:03:39,660
us this result

42

00:03:39,900  -->  00:03:45,980
but the default if we don't specify any argument is just to round it without any decimal places, just

43

00:03:45,980  -->  00:03:48,360
to in this case 10.

44

00:03:48,420  -->  00:03:55,170
So these were some basic built-in parsers or ways to transform values and there are more and you will

45

00:03:55,170  -->  00:04:01,380
find a more detailed list or a link to that in the cheatsheet attached to the end of this module of

46

00:04:01,380  -->  00:04:02,700
course.
