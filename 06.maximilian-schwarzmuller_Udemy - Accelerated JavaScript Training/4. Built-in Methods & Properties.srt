1

00:00:01,900  -->  00:00:08,550
Recovered closures and if he's not want to close this module with some very important things about functions

2

00:00:08,580  -->  00:00:16,650
or some nice Meffert and properties we can use with functions for this I will again just create a little

3

00:00:16,890  -->  00:00:24,060
dummy function here which I would call a message and this will take a message as an input let's say

4

00:00:25,000  -->  00:00:26,430
and and simply again

5

00:00:29,430  -->  00:00:32,000
log it to Tikhon's.

6

00:00:32,010  -->  00:00:41,940
Now of course if I hit run we won't see anything but if I pass dummy message into there and now it run

7

00:00:42,300  -->  00:00:46,750
we see high of course so that shouldn't be too surprising.

8

00:00:46,770  -->  00:00:55,020
However inside a function we also will have access to a certain variable if you want to call it like

9

00:00:55,030  -->  00:00:59,510
this I can print out arguments not arguments.

10

00:00:59,520  -->  00:01:04,340
Isn't the variable I created I didn't create it anywhere.

11

00:01:04,380  -->  00:01:06,630
And what do you think I'll see if I now run

12

00:01:09,750  -->  00:01:19,110
I get an object which basically like an array has key value pairs with just an index which is incrementing

13

00:01:19,590  -->  00:01:26,100
and then be passed in argument so high here of course because I passed one argument.

14

00:01:26,100  -->  00:01:31,760
Now what happens if I pass another argument even though this message here of course only takes one argument

15

00:01:31,760  -->  00:01:34,800
as function only expects a message nothing else.

16

00:01:34,800  -->  00:01:35,670
What do you think on that.

17

00:01:35,670  -->  00:01:43,830
See if I hit run now I get both arguments because in javascript as explained earlier in this course

18

00:01:44,100  -->  00:01:48,900
I'm not getting an error if I pass more arguments then expect that I'm caught.

19

00:01:48,960  -->  00:01:53,460
I'm of course not using them here but I could use them.

20

00:01:53,460  -->  00:02:01,260
And with the arguments very well here at the reval could use it because I could check if you have the

21

00:02:01,440  -->  00:02:07,260
extra argument or I could in generally check how many arguments I got and then I could simply access

22

00:02:07,260  -->  00:02:12,990
them like this for example to access the first argument and I would print 10.

23

00:02:13,020  -->  00:02:20,790
So this gives me a way to at runtime during runtime determine how many arguments I have which arguments

24

00:02:20,790  -->  00:02:22,690
these are and use them.

25

00:02:22,710  -->  00:02:29,180
Now if I use this with two and try to access an argument I haven't passed into this function.

26

00:02:29,190  -->  00:02:32,210
What do I think I'll get now and run.

27

00:02:33,300  -->  00:02:36,920
Well I get undefined because I'm trying to access an argument which isn't there.

28

00:02:37,110  -->  00:02:43,650
So this argument's variable here kind of has like an array even though it technically is an object here

29

00:02:43,890  -->  00:02:47,290
where I can access my different arguments and use them.

30

00:02:47,430  -->  00:02:54,970
And this again gives me a way to dynamically expand the functionality of my function and well consider

31

00:02:55,020  -->  00:02:58,210
the number of arguments I got and even use them.

32

00:02:58,500  -->  00:03:05,460
Of course I can also check how many arguments I got by accessing the length property.

33

00:03:05,720  -->  00:03:10,190
So now I get to because I pull past two arguments here.

34

00:03:10,560  -->  00:03:14,450
So let's see arguments property here are already arguments.

35

00:03:14,450  -->  00:03:16,390
Variable if you want to call it like that.

36

00:03:16,650  -->  00:03:22,510
What our useful helpers or things can you use with functions.

37

00:03:22,740  -->  00:03:32,710
Well for example I can't get rid of this function call and instead I could print message Darnay.

38

00:03:32,940  -->  00:03:39,810
What do you think we'll now see if I hit run message because this is the name of the function so I can

39

00:03:39,810  -->  00:03:41,500
access the name of a function.

40

00:03:41,500  -->  00:03:43,680
Now you might say Well that is a bit stupid right.

41

00:03:43,680  -->  00:03:46,460
I have the name here where would I access that here.

42

00:03:46,920  -->  00:03:51,390
Again you might have some kind of functions you are creating dynamically during runtime or anything

43

00:03:51,390  -->  00:03:52,290
like that.

44

00:03:52,590  -->  00:04:00,690
And then while this could be very useful to use it of course will also be useful if you have this case

45

00:04:00,690  -->  00:04:01,040
.

46

00:04:01,170  -->  00:04:08,450
So you create a new variable which you seiners message function.

47

00:04:08,820  -->  00:04:11,730
And now what happens if I run this.

48

00:04:11,730  -->  00:04:16,490
What do I see in the console still message.

49

00:04:16,500  -->  00:04:22,650
So now I'm not referring to the name on the left of this name call or just name property but the real

50

00:04:22,650  -->  00:04:25,190
function which is bound to this variable.

51

00:04:25,200  -->  00:04:31,830
So this is why a name could be useful due to find out which function actually will get executed and

52

00:04:31,830  -->  00:04:36,000
this might allow you to write more dynamic code for example.

53

00:04:36,000  -->  00:04:39,800
I also have access to length.

54

00:04:40,290  -->  00:04:42,420
Now what do you think we'll now see if I hit run

55

00:04:45,380  -->  00:04:46,040
one.

56

00:04:46,440  -->  00:04:52,350
And length refers to the number of arguments this function expects it expects.

57

00:04:52,350  -->  00:04:57,750
Not the are a number of arguments it gets because well it does no what with how many arguments you will

58

00:04:57,750  -->  00:05:02,530
call this function eventually but it doesn't know how many arguments it expects.

59

00:05:02,610  -->  00:05:07,560
And if I add numbers here well what will we see now.

60

00:05:07,590  -->  00:05:14,970
To of course because we are now expecting two arguments so this could also be very useful to again in

61

00:05:14,970  -->  00:05:20,280
a dynamic context where you for example loop through an array of functions and for each function you

62

00:05:20,280  -->  00:05:23,330
want to find out how many arguments you have to pass.

63

00:05:23,340  -->  00:05:27,920
This is a great way to do it or to find out how many arguments this function expects.

64

00:05:27,930  -->  00:05:29,840
Now here's something else.

65

00:05:30,090  -->  00:05:30,620
Consider.

66

00:05:30,610  -->  00:05:36,900
I'm well I'm taking this function here and I'm setting it equal to message very well that get rid of

67

00:05:36,900  -->  00:05:37,480
the name here.

68

00:05:37,500  -->  00:05:41,550
So this is the other way we can create functions if you remember this.

69

00:05:41,640  -->  00:05:44,040
Now avoid printed name.

70

00:05:44,040  -->  00:05:46,590
What do you think was now see.

71

00:05:47,310  -->  00:05:52,590
Actually nothing because the name is looking for something here.

72

00:05:52,590  -->  00:05:59,640
So by setting up a function like this we're basically binding an anonymous function.

73

00:05:59,640  -->  00:06:05,120
This part here to a variable and an anonymous function doesn't have a name as well.

74

00:06:05,160  -->  00:06:11,940
The name Anonymous implies therefore we're not able to print the name because the name is not the variable

75

00:06:11,940  -->  00:06:17,220
name but the name of the function which isn't there so that's important to keep in mind that there is

76

00:06:17,220  -->  00:06:21,780
a tiny difference between both ways of setting up a function.

77

00:06:22,200  -->  00:06:24,140
If I had turned us back

78

00:06:27,840  -->  00:06:35,810
and I print out this dot name inside the function at the end I simply execute message.

79

00:06:35,900  -->  00:06:39,380
What do you think we'll will now see.

80

00:06:41,760  -->  00:06:51,660
Well not a function name here I'm just referring to the name of this app here so to the global object

81

00:06:51,730  -->  00:06:53,680
the window object name.

82

00:06:53,820  -->  00:06:55,940
So this name does not work.

83

00:06:55,940  -->  00:07:05,700
You can access the name outside of this function not inside though so that verst some tiny but yet important

84

00:07:05,790  -->  00:07:14,250
additions about functions in Chava script and which built in helper's are properties you can use to

85

00:07:14,700  -->  00:07:19,730
well enhance your functions or to write more dynamic code.

86

00:07:19,740  -->  00:07:23,820
It's very important to be aware of all the tools Schulthess could offer you here.

87

00:07:24,090  -->  00:07:30,810
Therefore this was a very important module to get you on the next level regarding function usage so

88

00:07:30,810  -->  00:07:36,150
that you're now able to use closures to know what they are and what the advantages are that you are

89

00:07:36,150  -->  00:07:36,770
able to use.

90

00:07:36,780  -->  00:07:41,790
If he doesn't know what they are and what the advantages are and that you're able to use all the built

91

00:07:41,820  -->  00:07:44,100
in helper is provided by java script
