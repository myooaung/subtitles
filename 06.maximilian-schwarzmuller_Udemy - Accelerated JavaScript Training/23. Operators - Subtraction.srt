1

00:00:01,260  -->  00:00:03,400
Now let's have a look at subtraction

2

00:00:03,570  -->  00:00:07,350
and of course, first the very basics, for subtraction,

3

00:00:07,350  -->  00:00:15,440
we also got this syntax where we have a quick way of subtracting b from a,

4

00:00:15,510  -->  00:00:17,470
so if I now print a,

5

00:00:17,940  -->  00:00:20,520
what do you think we'll get? Well we'll get 11

6

00:00:20,520  -->  00:00:29,790
because this is just a short way to write a equals a - b

7

00:00:30,510  -->  00:00:38,800
and as you already saw before as well, we also get this -- syntax here to subtract one.

8

00:00:39,390  -->  00:00:47,840
So that's all great but it's definitely interesting to see what happens if we subtract a minus b

9

00:00:48,180  -->  00:00:51,390
and now we have two strings,

10

00:00:51,390  -->  00:00:59,630
so for example split us and hear us,

11

00:01:00,120  -->  00:01:03,780
what do you think? Do you think we'll get just split?

12

00:01:04,190  -->  00:01:05,500
We get NaN.

13

00:01:05,610  -->  00:01:10,680
Subtraction doesn't work like addition, Javascript can't figure out that much as it is able to do

14

00:01:10,680  -->  00:01:12,390
with addition.

15

00:01:12,480  -->  00:01:16,700
Addition is simple with strings, it just concatenates them. Here,

16

00:01:16,740  -->  00:01:22,800
it would have to search for us in the first string and it's not doing that, therefore we simply get

17

00:01:22,800  -->  00:01:23,540
not a number,

18

00:01:23,550  -->  00:01:27,090
it's not able to do subtraction with strings.

19

00:01:27,360  -->  00:01:28,400
What do you think we get

20

00:01:28,410  -->  00:01:35,040
if I have 12 and then b being 1 but as a string?

21

00:01:35,040  -->  00:01:43,160
Remember when you were adding this, we got a result of a string being 121 but a string again.

22

00:01:43,350  -->  00:01:45,910
So what do you think we'll get now?

23

00:01:46,500  -->  00:01:47,900
Well now we get 11.

24

00:01:48,030  -->  00:01:55,360
So when subtracting, as I already said, Javascript is not able to construct new strings out of that,

25

00:01:55,560  -->  00:02:01,890
therefore it falls back to the other way of subtraction it knows, using numbers and it tries

26

00:02:01,890  -->  00:02:09,000
if it is able to cast this string into a number which is of course possible with 1 and therefore, it's

27

00:02:09,000  -->  00:02:15,690
actually doing this calculation, even though the second argument, b, isn't a number.

28

00:02:15,690  -->  00:02:20,300
Of course we can still also use true and null and NaN and undefined

29

00:02:20,370  -->  00:02:27,090
but here, the behavior doesn't change compared to the addition case where we would get back NaN

30

00:02:27,090  -->  00:02:34,200
if using undefined or NaN or where we would be able to use True or False as one

31

00:02:34,260  -->  00:02:37,490
or zero or use null as zero,

32

00:02:37,490  -->  00:02:44,070
so that all doesn't change. The important parts were the ones I just showed here when using strings with

33

00:02:44,070  -->  00:02:45,810
numbers.
