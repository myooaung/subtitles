WEBVTT
1
00:00:01.040 --> 00:00:05.050
[Autogenerated] and I am role is similar to an I am user in

2
00:00:05.050 --> 00:00:09.540
that it is an AWS identity with a name and policies to

3
00:00:09.540 --> 00:00:12.840
determine what actions it can and cannot do.

4
00:00:12.840 --> 00:00:16.250
However, Rolls do not have permanent credentials,

5
00:00:16.250 --> 00:00:20.140
and they cannot make direct requests to AWS services.

6
00:00:20.140 --> 00:00:25.020
I am roles are meant to delegate access to a trusted entity without

7
00:00:25.020 --> 00:00:28.910
having to share long term access keys with that entity.

8
00:00:28.910 --> 00:00:31.140
When a trusted entity assumes a role,

9
00:00:31.140 --> 00:00:34.990
that entity gains a temporary ability to perform actions

10
00:00:34.990 --> 00:00:40.180
authorized by the role I am Rolls can do be used by an I am

11
00:00:40.180 --> 00:00:43.640
user in the same AWS account as the role.

12
00:00:43.640 --> 00:00:49.620
And I am username a different AWS account than the role and AWS service,

13
00:00:49.620 --> 00:00:54.040
like Easy to or an authenticated external user.

14
00:00:54.040 --> 00:00:58.310
We're going to take a look at how an I am user in the same account

15
00:00:58.310 --> 00:01:01.940
and in a W S service used roles in this module,

16
00:01:01.940 --> 00:01:07.740
then cover cross account access and external users later on in this course.

17
00:01:07.740 --> 00:01:12.020
An important thing to keep in mind is that when a user assumes a role,

18
00:01:12.020 --> 00:01:15.850
that user temporarily gives up their normal permissions and

19
00:01:15.850 --> 00:01:18.910
assumes only those permissions given to the role.

20
00:01:18.910 --> 00:01:20.030
For example,

21
00:01:20.030 --> 00:01:24.970
suppose a user only has access to S3 if they try to access

22
00:01:24.970 --> 00:01:27.940
Easy to they get a permissions error.

23
00:01:27.940 --> 00:01:33.540
Suppose the user assumes a role that only has access to easy to.

24
00:01:33.540 --> 00:01:38.040
Now they can access E C two, but if they try to access S3,

25
00:01:38.040 --> 00:01:39.580
they'll get a permissions error.

26
00:01:39.580 --> 00:01:44.470
This is because they left their previous permissions when they assumed the role.

27
00:01:44.470 --> 00:01:47.980
Permissions do not combine when a user assumes a role.

28
00:01:47.980 --> 00:01:53.740
A user assuming a role operates only with the permissions granted to the role.

29
00:01:53.740 --> 00:01:58.210
Once you've created a role in order for an entity to assume that role,

30
00:01:58.210 --> 00:02:00.230
you must give it permission.

31
00:02:00.230 --> 00:02:03.780
Here's an example of a policy that allows a principle to

32
00:02:03.780 --> 00:02:07.800
assume the EEC to admin role defined in this A.

33
00:02:07.800 --> 00:02:09.440
W s account.

34
00:02:09.440 --> 00:02:14.920
AWS tracks which principles assume a role and when they last assumed the role.

35
00:02:14.920 --> 00:02:17.800
This could be helpful for auditing account activity and

36
00:02:17.800 --> 00:02:21.040
determining ever role is getting used or not.

37
00:02:21.040 --> 00:02:24.230
You can also revoke active sessions for a role.

38
00:02:24.230 --> 00:02:29.440
If you notice a problem happening related to that role,

39
00:02:29.440 --> 00:02:33.810
let's go create a role and give a user permission to assume that role will

40
00:02:33.810 --> 00:02:37.240
then see how their access changes when they assume the role.

41
00:02:37.240 --> 00:02:42.540
And we'll also see how you can revoke active sessions for a role.

42
00:02:42.540 --> 00:02:48.940
Select roles from the AM menu, then scroll down to create role.

43
00:02:48.940 --> 00:02:51.930
We're going to do this for another AWS account,

44
00:02:51.930 --> 00:02:56.050
even though we'll be using it in our own account and

45
00:02:56.050 --> 00:03:00.340
supply the account ID for this AWS account.

46
00:03:00.340 --> 00:03:02.440
Next, we'll set permissions.

47
00:03:02.440 --> 00:03:05.190
This role is going to allow full access to E.

48
00:03:05.190 --> 00:03:05.440
C.

49
00:03:05.440 --> 00:03:11.910
Two will select the AWS managed policy, Amazon, etc.

50
00:03:11.910 --> 00:03:15.340
To full access.

51
00:03:15.340 --> 00:03:22.740
We won't add any tags, and we'll call this role e c to admin.

52
00:03:22.740 --> 00:03:26.140
Select, Create role.

53
00:03:26.140 --> 00:03:28.860
And now we have our easy to admin role.

54
00:03:28.860 --> 00:03:32.100
Now that the role is created in order for anyone to use it,

55
00:03:32.100 --> 00:03:35.540
we need to provide permissions to assume that role.

56
00:03:35.540 --> 00:03:39.090
Remember that you'll need the role a RN In order to create the

57
00:03:39.090 --> 00:03:43.340
policy that allows a user to assume this role,

58
00:03:43.340 --> 00:03:50.750
I'll copy the role error n then create a policy will add a statement

59
00:03:50.750 --> 00:03:55.240
that allows the assume roll action on our resource.

60
00:03:55.240 --> 00:04:05.400
The two admin role will give the policy and name and description,

61
00:04:05.400 --> 00:04:11.390
then create the policy in order to allow the Dev one user to assume this policy

62
00:04:11.390 --> 00:04:14.910
will attach it to the group where the Dev one user belongs.

63
00:04:14.910 --> 00:04:21.460
Go to groups, developers and will attach.

64
00:04:21.460 --> 00:04:26.740
The policy will filter by customer managed policy.

65
00:04:26.740 --> 00:04:30.040
Since that's a much shorter list.

66
00:04:30.040 --> 00:04:32.350
Now we'll switch over to the Dev want to count.

67
00:04:32.350 --> 00:04:33.810
Recall from the last demo,

68
00:04:33.810 --> 00:04:37.770
the user got an error When trying to do anything with easy to use,

69
00:04:37.770 --> 00:04:40.180
the user can now assume the role.

70
00:04:40.180 --> 00:04:43.840
Then be able to operate on SC 2D.

71
00:04:43.840 --> 00:04:49.540
Select the username than switch role,

72
00:04:49.540 --> 00:04:54.240
and the user will need to enter the information about the role

73
00:04:54.240 --> 00:04:57.950
display name is for how it will show up for this user in their

74
00:04:57.950 --> 00:05:00.660
selection of roles that they can switch to.

75
00:05:00.660 --> 00:05:01.870
I'll go ahead and just call it E.

76
00:05:01.870 --> 00:05:04.440
C to admin.

77
00:05:04.440 --> 00:05:10.190
They can select a color, then switch role.

78
00:05:10.190 --> 00:05:13.080
Notice the EEC to admin in yellow.

79
00:05:13.080 --> 00:05:16.570
That shows that we error assuming the EEC to admin role.

80
00:05:16.570 --> 00:05:22.440
Right now, we can also see this under roll history.

81
00:05:22.440 --> 00:05:25.920
Now this user has access to do things in two,

82
00:05:25.920 --> 00:05:30.740
including launching instances or anything else that this role permits.

83
00:05:30.740 --> 00:05:34.330
However, the user does not have their old permissions.

84
00:05:34.330 --> 00:05:36.540
If we were to go to S3,

85
00:05:36.540 --> 00:05:40.640
notice how they do not have permissions to list the buckets.

86
00:05:40.640 --> 00:05:44.840
This is because when the user assumes the to admin role,

87
00:05:44.840 --> 00:05:46.720
they have only those permissions.

88
00:05:46.720 --> 00:05:50.140
Associate ID with the two admin role.

89
00:05:50.140 --> 00:05:54.240
In order to exercise the permissions that the user normally has,

90
00:05:54.240 --> 00:05:57.340
they'll need to switch out of the EEC to admin role

91
00:05:57.340 --> 00:05:59.940
and back to their normal user.

92
00:05:59.940 --> 00:06:04.540
Bacca's their normal user we can see that the buckets are listing.

93
00:06:04.540 --> 00:06:11.540
Let's switch back to the EEC to admin role to see how the revoke sessions works.

94
00:06:11.540 --> 00:06:15.320
We'll go back to Ec2 and note that we don't get any

95
00:06:15.320 --> 00:06:18.080
permission errors from the admin account.

96
00:06:18.080 --> 00:06:26.840
Go to roles select E C to admin, then revoke sessions.

97
00:06:26.840 --> 00:06:32.240
You can revoke the active sessions by selecting the button.

98
00:06:32.240 --> 00:06:38.840
This will add a policy to the account that will revoke all active sessions.

99
00:06:38.840 --> 00:06:44.340
If we refresh the Dev one user, notice how they get an error.

100
00:06:44.340 --> 00:06:48.340
It still shows that they're on the role, but they're session has been revoked.

101
00:06:48.340 --> 00:06:51.440
Note that it only revokes active sessions.

102
00:06:51.440 --> 00:06:54.740
The user can go ahead, switch back to themselves,

103
00:06:54.740 --> 00:06:58.440
then assume the role again, and it will start a new session.

104
00:06:58.440 --> 00:07:00.350
To completely block access,

105
00:07:00.350 --> 00:07:06.060
the admin would need to remove the policy from the developers group that

106
00:07:06.060 --> 00:07:11.340
allows members of that group to assume the EEC to admin role.

107
00:07:11.340 --> 00:07:16.640
The other admin tool that can come in handy is the access adviser.

108
00:07:16.640 --> 00:07:21.120
Notice how this shows that the Amazon S3 full access policy

109
00:07:21.120 --> 00:07:24.640
was accessed by the Dev one user to day.

110
00:07:24.640 --> 00:07:26.390
As you evaluate your roles,

111
00:07:26.390 --> 00:07:31.020
the access advisor can be helpful to see if a role is being used or not.

112
00:07:31.020 --> 00:07:40.000
Just keep in mind that there can be up to a four hour delay for activity to show up in the access advisor for roles.

