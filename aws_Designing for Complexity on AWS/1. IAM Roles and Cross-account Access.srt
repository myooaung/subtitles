1
00:00:01,140 --> 00:00:01,690
[Autogenerated] Hi.

2
00:00:01,690 --> 00:00:08,040
This is Craig Google lightly and welcome to managing cross account access.

3
00:00:08,040 --> 00:00:11,920
Let's dive into more detail about different strategies for using

4
00:00:11,920 --> 00:00:16,920
multiple accounts within your AWS organization and how to manage

5
00:00:16,920 --> 00:00:22,510
cross account access using I Am Rolls will then see how resource

6
00:00:22,510 --> 00:00:27,190
based policies differ from roles and how you can also use them for

7
00:00:27,190 --> 00:00:29,440
cross account access.

8
00:00:29,440 --> 00:00:33,550
With AWS organizations, you can go from a single,

9
00:00:33,550 --> 00:00:38,110
messy account with several potential problems to multiple AWS

10
00:00:38,110 --> 00:00:41,340
accounts grouped by organizational units.

11
00:00:41,340 --> 00:00:45,550
For example, suppose you had a couple of different applications,

12
00:00:45,550 --> 00:00:48,880
each with a dev stage and prod account.

13
00:00:48,880 --> 00:00:52,340
You also have several individual sandbox accounts.

14
00:00:52,340 --> 00:00:54,920
How do you manage access to all of these accounts?

15
00:00:54,920 --> 00:00:57,680
Do you have to create users in every single account?

16
00:00:57,680 --> 00:01:02,490
So now each person in your organization might have 10 different I am users.

17
00:01:02,490 --> 00:01:03,330
Nope.

18
00:01:03,330 --> 00:01:07,590
You can create all of the I am users in one account.

19
00:01:07,590 --> 00:01:09,300
Let's call it security,

20
00:01:09,300 --> 00:01:15,930
then use I am rolls to manage access to other accounts in your organization.

21
00:01:15,930 --> 00:01:20,580
This allows you to define exactly who is allowed to access each A

22
00:01:20,580 --> 00:01:24,340
W s account and what actions they can take.

23
00:01:24,340 --> 00:01:28,150
Let's go over some terminology with cross account access.

24
00:01:28,150 --> 00:01:31,630
The trusting account is the account that owns the

25
00:01:31,630 --> 00:01:34,260
resource that needs to be accessed.

26
00:01:34,260 --> 00:01:40,250
The trusted account is the account with users who need to access the resource.

27
00:01:40,250 --> 00:01:41,680
In the other account,

28
00:01:41,680 --> 00:01:46,720
you can use an I am role to allow users from one account to access.

29
00:01:46,720 --> 00:01:48,870
Resource is in a different account.

30
00:01:48,870 --> 00:01:52,890
The I am role will have to policies attached to it.

31
00:01:52,890 --> 00:01:58,580
First, the permissions policy, which defines what access the user of the role,

32
00:01:58,580 --> 00:02:00,890
will have to the particular resource.

33
00:02:00,890 --> 00:02:03,640
And second, the trust policy,

34
00:02:03,640 --> 00:02:08,180
which lists trusted entities who can assume the role in order for a

35
00:02:08,180 --> 00:02:11,380
user in the trusted account to assume the role,

36
00:02:11,380 --> 00:02:15,170
they must be given permission to assume the role by

37
00:02:15,170 --> 00:02:18,040
a policy in the trusted account.

38
00:02:18,040 --> 00:02:23,620
Let me say that again, without both of these policies correctly in place,

39
00:02:23,620 --> 00:02:28,790
the user in the trusted account will not be able to assume the role.

40
00:02:28,790 --> 00:02:33,350
This trust policy allows all users in this trusted

41
00:02:33,350 --> 00:02:35,900
AWS account to assume the role.

42
00:02:35,900 --> 00:02:40,250
This is the policy attached to the role in the trusting account.

43
00:02:40,250 --> 00:02:44,610
To state which principles can assume the role in the trusted account,

44
00:02:44,610 --> 00:02:48,100
you'll need to decide which users can assume the role

45
00:02:48,100 --> 00:02:50,240
that the trusting account has granted.

46
00:02:50,240 --> 00:02:54,570
One way to manage this is to create a group in the trusted account,

47
00:02:54,570 --> 00:02:57,270
then attach a policy to that group,

48
00:02:57,270 --> 00:03:00,350
which allows members of the group to assume the role.

49
00:03:00,350 --> 00:03:07,000
This allows you to move users in and out of the group, whether they need to assume the role or not.

