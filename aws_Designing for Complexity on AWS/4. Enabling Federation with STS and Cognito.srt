1
00:00:01,940 --> 00:00:04,260
[Autogenerated] AWS Security Token Service,

2
00:00:04,260 --> 00:00:05,570
or STS,

3
00:00:05,570 --> 00:00:09,820
allows you to request temporary credentials for limited access to

4
00:00:09,820 --> 00:00:14,140
your resource is without creating an I am user.

5
00:00:14,140 --> 00:00:17,140
STS Credentials are generated on demand,

6
00:00:17,140 --> 00:00:21,590
so you don't have to embed any long term access keys in your application.

7
00:00:21,590 --> 00:00:23,700
Since they are temporary credentials,

8
00:00:23,700 --> 00:00:26,420
you don't have to rotate them or remember to remove

9
00:00:26,420 --> 00:00:28,540
them when they're no longer need it.

10
00:00:28,540 --> 00:00:31,970
There's an STS endpoint you can interact with directly,

11
00:00:31,970 --> 00:00:35,610
and the AWS SdK s have libraries and functions to

12
00:00:35,610 --> 00:00:38,840
create programmatic access to STS.

13
00:00:38,840 --> 00:00:43,790
STS also supports AWS CloudTrail so you can log requests

14
00:00:43,790 --> 00:00:46,000
and information about the request,

15
00:00:46,000 --> 00:00:48,860
such as who made the request and when it was made.

16
00:00:48,860 --> 00:00:52,140
And those logs will be placed in an S3 bucket.

17
00:00:52,140 --> 00:00:55,940
STS is what enables the Samel 2D a to federation

18
00:00:55,940 --> 00:00:58,240
we've been discussing in this module.

19
00:00:58,240 --> 00:01:03,380
Let's take a closer look at the conceptual flow a client authenticates with an

20
00:01:03,380 --> 00:01:09,110
identity provider and the identity provider returns a sample token that token

21
00:01:09,110 --> 00:01:13,540
can do then be used to call assume role with XAML.

22
00:01:13,540 --> 00:01:17,270
The role must be defined in the account that has the resource is the

23
00:01:17,270 --> 00:01:22,580
client wants access to and will determine what permissions the client has

24
00:01:22,580 --> 00:01:26,040
to access resource is when it resumes the role.

25
00:01:26,040 --> 00:01:29,820
STS returns a temporary security credential that can be

26
00:01:29,820 --> 00:01:32,690
used to assume the requested roll.

27
00:01:32,690 --> 00:01:36,510
The client uses the STS credential to assume a role

28
00:01:36,510 --> 00:01:39,460
to access the desired service, in this case,

29
00:01:39,460 --> 00:01:40,640
S3.

30
00:01:40,640 --> 00:01:43,540
To retrieve an object from a bucket,

31
00:01:43,540 --> 00:01:47,230
you can also use federation to allow external users

32
00:01:47,230 --> 00:01:50,550
access to services in your AWS account.

33
00:01:50,550 --> 00:01:55,180
Using Amazon Cognito Cognito allows users to authenticate with

34
00:01:55,180 --> 00:01:57,990
third-party identity providers like Amazon,

35
00:01:57,990 --> 00:02:01,470
Facebook and Google then exchange the token from the

36
00:02:01,470 --> 00:02:04,410
identity provider for a cognito token.

37
00:02:04,410 --> 00:02:07,760
The cognito token can then be used to get temporary

38
00:02:07,760 --> 00:02:10,930
credentials from STS to access.

39
00:02:10,930 --> 00:02:13,840
Resource is in your AWS account.

40
00:02:13,840 --> 00:02:18,010
Cognito also allows you to create an unauthenticated profile to

41
00:02:18,010 --> 00:02:22,860
still allow some access to unauthenticated users of your application

42
00:02:22,860 --> 00:02:25,340
without making your resource is public.

43
00:02:25,340 --> 00:02:28,610
Cognito is a great solution to offload common user

44
00:02:28,610 --> 00:02:32,270
management tasks like user creation, verification,

45
00:02:32,270 --> 00:02:35,340
authentication and password reset.

46
00:02:35,340 --> 00:02:38,070
This can save you a lot of time and maintenance,

47
00:02:38,070 --> 00:02:42,910
not to mention that cognito is very secure and can scale to millions of users.

48
00:02:42,910 --> 00:02:49,940
With these, you've got some additional options now for user management.

49
00:02:49,940 --> 00:02:53,790
You've seen how to use a W s s S O to create Federated

50
00:02:53,790 --> 00:02:56,690
users and how to manage what access.

51
00:02:56,690 --> 00:03:02,440
Those users have two different AWS accounts in your A W s organization.

52
00:03:02,440 --> 00:03:05,630
You can also integrate with other third-party services

53
00:03:05,630 --> 00:03:08,140
with your single sign on experience.

54
00:03:08,140 --> 00:03:11,360
You've seen how STS enables federation and some of the

55
00:03:11,360 --> 00:03:15,510
advantages of using temporary credentials from STS.

56
00:03:15,510 --> 00:03:18,920
Finally, if you have external users to manage,

57
00:03:18,920 --> 00:03:24,120
you can leverage cognito to offload those tasks from your applications and

58
00:03:24,120 --> 00:03:29,940
grant secure temporary access to your AWS resource is join me in the next

59
00:03:29,940 --> 00:03:39,000
module to learn about how you can maintain compliance and some of the tools AWS provides to make that easier.

