WEBVTT
1
00:00:01.040 --> 00:00:03.420
[Autogenerated] service control policies or s E.

2
00:00:03.420 --> 00:00:07.460
P s act as a guard rail for your AWS accounts.

3
00:00:07.460 --> 00:00:11.480
They define the maximum available permissions in an account,

4
00:00:11.480 --> 00:00:17.130
but do not specifically grant any permissions by themselves by default and SCP

5
00:00:17.130 --> 00:00:21.780
named full AWS access is attached to every organization,

6
00:00:21.780 --> 00:00:22.440
route,

7
00:00:22.440 --> 00:00:27.420
organizational unit and account service control policies can be

8
00:00:27.420 --> 00:00:32.070
used as both a cost and security control measure by limiting what

9
00:00:32.070 --> 00:00:34.300
services are allowed in an account,

10
00:00:34.300 --> 00:00:39.090
you reduce the potential attack surface of that AWS account as well as

11
00:00:39.090 --> 00:00:42.340
the number of things that you could be charged for.

12
00:00:42.340 --> 00:00:47.030
You can attach an SCP to an individual account or organizational

13
00:00:47.030 --> 00:00:50.250
unit when you attach it to an organizational unit.

14
00:00:50.250 --> 00:00:54.950
These SCP will apply to all accounts in that organizational unit.

15
00:00:54.950 --> 00:01:00.930
S CPS affect all users and roles in attached accounts, including the root user.

16
00:01:00.930 --> 00:01:05.650
Ever they do not affect services linked roles in an account.

17
00:01:05.650 --> 00:01:08.970
Let's take a look at a service control policy that limits

18
00:01:08.970 --> 00:01:12.390
and account to only launch T to micro E.

19
00:01:12.390 --> 00:01:12.590
C.

20
00:01:12.590 --> 00:01:16.330
Two instances version is always going to be the same unless

21
00:01:16.330 --> 00:01:19.570
AWS releases and new version of the syntax,

22
00:01:19.570 --> 00:01:24.440
an SCP contains an array of one or more statement elements.

23
00:01:24.440 --> 00:01:28.530
The statement IDE or S IDE is an optional user provided

24
00:01:28.530 --> 00:01:31.180
identify error for the policy statement.

25
00:01:31.180 --> 00:01:37.530
Effect is going to be allowed or deny action identifies the AWS services and

26
00:01:37.530 --> 00:01:41.340
actions that error allowed or denied by the statement.

27
00:01:41.340 --> 00:01:44.700
Resource identifies the AWS resource Is that error

28
00:01:44.700 --> 00:01:47.360
affected by the allow or deny?

29
00:01:47.360 --> 00:01:53.380
Finally, condition is where you can specify certain criteria that need to match.

30
00:01:53.380 --> 00:01:56.080
For the statement to apply in this case,

31
00:01:56.080 --> 00:02:00.500
all requests to run an easy to instantiate error denied.

32
00:02:00.500 --> 00:02:02.260
If they're not 82.

33
00:02:02.260 --> 00:02:05.930
Micro note that you would need to provide valid JSON

34
00:02:05.930 --> 00:02:08.340
for an actual service control policy.

35
00:02:08.340 --> 00:02:12.640
I've just removed the closing braces to fit the example on the screen.

36
00:02:12.640 --> 00:02:16.540
Let's review how service control policies are evaluated as you

37
00:02:16.540 --> 00:02:19.810
start working with multiple service control policies with

38
00:02:19.810 --> 00:02:22.900
different accounts in your AWS organization.

39
00:02:22.900 --> 00:02:27.060
It's important to understand the evaluation rules so you don't create

40
00:02:27.060 --> 00:02:30.560
unintended permission situations in your member accounts.

41
00:02:30.560 --> 00:02:31.380
First,

42
00:02:31.380 --> 00:02:34.910
any action that isn't explicitly allowed by a service

43
00:02:34.910 --> 00:02:38.510
control policy is implicitly denied,

44
00:02:38.510 --> 00:02:42.440
even if in I am policy grants something to a user,

45
00:02:42.440 --> 00:02:45.570
it will be denied unless the service control policy

46
00:02:45.570 --> 00:02:48.420
lists it as an allow by default.

47
00:02:48.420 --> 00:02:53.310
All actions are allowed by the full AWS access SCP,

48
00:02:53.310 --> 00:02:55.380
depending on what you want to do with your S E.

49
00:02:55.380 --> 00:02:56.140
P s,

50
00:02:56.140 --> 00:02:59.780
you may want to remove that policy and replace it with s

51
00:02:59.780 --> 00:03:03.810
apps that contain explicit allow statements for only those

52
00:03:03.810 --> 00:03:06.240
services you need in an account.

53
00:03:06.240 --> 00:03:10.530
Also, keep in mind that just because an SCP allows something,

54
00:03:10.530 --> 00:03:16.350
the user must also have an I am policy that allows theatrics in since S E.

55
00:03:16.350 --> 00:03:19.840
P s by themselves do not grant permissions.

56
00:03:19.840 --> 00:03:20.530
Next,

57
00:03:20.530 --> 00:03:27.830
an explicit deny in an SCP will override any allow that other S CPS might grant.

58
00:03:27.830 --> 00:03:32.040
If you did leave the full AWS access SCP in place,

59
00:03:32.040 --> 00:03:34.420
you could blacklist certain services.

60
00:03:34.420 --> 00:03:39.430
And those deny statements would override the explicit grant from the full

61
00:03:39.430 --> 00:03:46.810
AWS access SCP Finally nes cps attached to an organizational unit apply to

62
00:03:46.810 --> 00:03:49.940
all accounts in that organizational unit.

63
00:03:49.940 --> 00:03:53.930
If you can't figure out why something isn't behaving as expected,

64
00:03:53.930 --> 00:03:57.980
be sure to check out how your AWS accounts are organized.

65
00:03:57.980 --> 00:04:06.000
As any policies in parent organizational units apply to all accounts in that organizational unit,

