WEBVTT
1
00:00:02.740 --> 00:00:05.490
[Autogenerated] Let's try creating an attaching service

2
00:00:05.490 --> 00:00:08.880
control policies in our AWS organization.

3
00:00:08.880 --> 00:00:13.400
Note that will need to log in to the master account to set S C.

4
00:00:13.400 --> 00:00:18.300
P s for the organization First will restrict the instance type

5
00:00:18.300 --> 00:00:21.540
that could be launched with an explicit deny.

6
00:00:21.540 --> 00:00:22.790
Then we'll show how S E.

7
00:00:22.790 --> 00:00:23.070
P.

8
00:00:23.070 --> 00:00:26.640
S are inherited from parent organizational units.

9
00:00:26.640 --> 00:00:31.500
Finally, we'll look at an example where an I am policy allows an action,

10
00:00:31.500 --> 00:00:35.120
but the SCP doesn't list theatrics in as allowed.

11
00:00:35.120 --> 00:00:37.940
So it is implicitly denied.

12
00:00:37.940 --> 00:00:41.420
I'm signed in to the master account of my AWS

13
00:00:41.420 --> 00:00:44.920
organization to create a service control policy,

14
00:00:44.920 --> 00:00:50.620
select policies, then service control policies.

15
00:00:50.620 --> 00:00:53.740
Note that the current status is disabled.

16
00:00:53.740 --> 00:00:58.240
I need to first enable service control policies in order to attach

17
00:00:58.240 --> 00:01:03.340
these to the accounts in my AWS organization.

18
00:01:03.340 --> 00:01:05.760
When service control policies are enabled,

19
00:01:05.760 --> 00:01:10.460
a full AWS access policy that allows access to every

20
00:01:10.460 --> 00:01:13.510
operation is automatically created.

21
00:01:13.510 --> 00:01:17.430
If I select that policy I can view the accounts or organizational

22
00:01:17.430 --> 00:01:22.700
units to which that policy is attached by default,

23
00:01:22.700 --> 00:01:28.900
it attaches to all accounts and all organizational units

24
00:01:28.900 --> 00:01:31.870
to create a new service control policy, select,

25
00:01:31.870 --> 00:01:39.740
create policy, provide a policy name and description.

26
00:01:39.740 --> 00:01:43.940
Then edit the policy.

27
00:01:43.940 --> 00:01:46.760
Once your service control policy has been created,

28
00:01:46.760 --> 00:01:50.540
you can select it to view the details.

29
00:01:50.540 --> 00:01:53.730
You can also view what accounts organizational units

30
00:01:53.730 --> 00:01:56.370
or roots have this policy attached.

31
00:01:56.370 --> 00:01:59.340
We just created it so it's not attached anywhere yet.

32
00:01:59.340 --> 00:02:03.940
To attach a policy to an account, go to accounts,

33
00:02:03.940 --> 00:02:07.980
select the account, then under policies,

34
00:02:07.980 --> 00:02:11.740
select service control policies.

35
00:02:11.740 --> 00:02:14.440
You'll see a list of available policies.

36
00:02:14.440 --> 00:02:18.250
Notice that the full AWS access is attached.

37
00:02:18.250 --> 00:02:22.990
I could detach that if I wanted to, and the policy that we just created Limit E.

38
00:02:22.990 --> 00:02:23.180
C.

39
00:02:23.180 --> 00:02:26.340
To Micro is available to attach.

40
00:02:26.340 --> 00:02:30.640
I'll go ahead and attach that to this account.

41
00:02:30.640 --> 00:02:34.000
Now this account has two different service control policies.

42
00:02:34.000 --> 00:02:37.940
Full AWS access and limit Easy to micro.

43
00:02:37.940 --> 00:02:42.100
Let's try to launch an instance that is not a T to micro

44
00:02:42.100 --> 00:02:46.820
To see how the explicit deny overrides the allow in a

45
00:02:46.820 --> 00:02:48.810
different service control policy,

46
00:02:48.810 --> 00:02:53.240
I'm logged in as the root user in the Global app Deva account,

47
00:02:53.240 --> 00:02:56.870
which is the account that we just attached our limit e.

48
00:02:56.870 --> 00:02:57.070
C.

49
00:02:57.070 --> 00:02:59.140
Two service control policy.

50
00:02:59.140 --> 00:03:07.610
Let's go to Easy to and try to launch an instance instead of tea to micro.

51
00:03:07.610 --> 00:03:12.750
I'm going to try to launch a T too small because the service control policy

52
00:03:12.750 --> 00:03:18.670
that we created explicitly denied any e C two's to be launched that did not

53
00:03:18.670 --> 00:03:24.040
match T to micro trying to launch a T two small failed,

54
00:03:24.040 --> 00:03:29.520
Even though the other service control policy allows all actions.

55
00:03:29.520 --> 00:03:30.330
Remember,

56
00:03:30.330 --> 00:03:36.220
an explicit Deny in one service control policy will always override an

57
00:03:36.220 --> 00:03:40.040
explicit allow in a different service control policy.

58
00:03:40.040 --> 00:03:42.080
Let's go back and change the instance.

59
00:03:42.080 --> 00:03:54.840
Type two t two Micro now we can See, We were able to launch Thean stints.

60
00:03:54.840 --> 00:03:57.430
It was within the boundaries that the service control

61
00:03:57.430 --> 00:03:59.610
policy had set for this account.

62
00:03:59.610 --> 00:04:01.140
So it was allowed.

63
00:04:01.140 --> 00:04:03.890
Now let's create a service control policy and

64
00:04:03.890 --> 00:04:10.240
attach it to an organizational unit.

65
00:04:10.240 --> 00:04:13.240
This policy is going to deny the terminate

66
00:04:13.240 --> 00:04:18.240
instantiate action for all two instances.

67
00:04:18.240 --> 00:04:22.080
We want to attach this to an organizational unit so

68
00:04:22.080 --> 00:04:27.000
we'll go to organize accounts, then select the global app.

69
00:04:27.000 --> 00:04:32.940
One organizational unit under service control policies,

70
00:04:32.940 --> 00:04:36.900
we can see the same options to detach or attach service

71
00:04:36.900 --> 00:04:40.100
control policies to this organizational unit.

72
00:04:40.100 --> 00:04:46.140
I'm going to attach to deny instantiate Armin eight policy that we just created.

73
00:04:46.140 --> 00:04:49.640
If I select the account that's in this organizational unit,

74
00:04:49.640 --> 00:04:56.570
our global app DevOps count under service control policies notice that

75
00:04:56.570 --> 00:05:00.770
you can see policies inherited from other sources.

76
00:05:00.770 --> 00:05:01.070
Here.

77
00:05:01.070 --> 00:05:04.460
We can see the deny instantiate Kirm innate policy that's

78
00:05:04.460 --> 00:05:08.720
inherited from the global app One organizational unit.

79
00:05:08.720 --> 00:05:10.280
Let's see what happens in that account.

80
00:05:10.280 --> 00:05:15.140
Now when we try to terminate an instance,

81
00:05:15.140 --> 00:05:19.130
I'll confirm that I want to terminate these instantiate and I'll get an error

82
00:05:19.130 --> 00:05:23.740
because it is explicitly denied by the service control policy.

83
00:05:23.740 --> 00:05:29.710
If we go back to our organizational unit and detach the deny instantiate Armin

84
00:05:29.710 --> 00:05:37.540
eight now a remember account no longer inherits that policy.

85
00:05:37.540 --> 00:05:37.920
We can.

86
00:05:37.920 --> 00:05:44.540
Now terminate these instance.

87
00:05:44.540 --> 00:05:49.630
If we look at the member account called Security and the S apps attached to

88
00:05:49.630 --> 00:05:55.000
that notice how full AWS access is attached to that account,

89
00:05:55.000 --> 00:05:58.480
there are no restrictions from the organization about what

90
00:05:58.480 --> 00:06:01.740
services can be used in the security account.

91
00:06:01.740 --> 00:06:03.850
If we take a look at an individual,

92
00:06:03.850 --> 00:06:08.710
I am user in that account under permissions we can see that this

93
00:06:08.710 --> 00:06:12.340
user has very limited permissions granted to them.

94
00:06:12.340 --> 00:06:14.020
When this user logs in,

95
00:06:14.020 --> 00:06:18.100
they can't do things like list E C two instances because they

96
00:06:18.100 --> 00:06:21.070
don't have that permission granted in there.

97
00:06:21.070 --> 00:06:23.140
I am policies.

98
00:06:23.140 --> 00:06:23.930
However,

99
00:06:23.930 --> 00:06:29.860
if we were to go to the global app Deva account and detach the full AWS

100
00:06:29.860 --> 00:06:35.500
access service control policy when we go back to that account as the

101
00:06:35.500 --> 00:06:39.640
root user which has all I am permissions,

102
00:06:39.640 --> 00:06:42.270
then try to do something as simple as list e.

103
00:06:42.270 --> 00:06:51.610
C two's notice how this is now denied even though the AM permissions granted if

104
00:06:51.610 --> 00:06:56.080
a service control policy does not also explicitly granted,

105
00:06:56.080 --> 00:06:58.640
then it is implicitly denied.

106
00:06:58.640 --> 00:07:05.730
If we go back and attach the full AWS access policy when we refresh now,

107
00:07:05.730 --> 00:07:10.920
our route user can perform the action because it is both permitted by I

108
00:07:10.920 --> 00:07:17.840
am policies and allowed by the service Control Policy.

109
00:07:17.840 --> 00:07:21.870
We've covered the shared responsibility model and how AWS is

110
00:07:21.870 --> 00:07:24.770
responsible for security of the cloud.

111
00:07:24.770 --> 00:07:28.940
While you are responsible for security in the cloud,

112
00:07:28.940 --> 00:07:32.580
you now know about a W s artifact as a resource to

113
00:07:32.580 --> 00:07:34.820
help with your compliance needs.

114
00:07:34.820 --> 00:07:39.760
And you've also seen how to set a password policy as well as service control

115
00:07:39.760 --> 00:07:44.300
policies as guard rails to better manage user activity,

116
00:07:44.300 --> 00:07:49.540
control costs and reduce the attack surface for threats to your AWS

117
00:07:49.540 --> 00:07:53.760
accounts in the next module will cover several different strategies

118
00:07:53.760 --> 00:07:56.990
you can use to monitor and manage costs,

119
00:07:56.990 --> 00:08:06.000
including some common mistakes people make as they scale up their AWS accounts and how you can avoid those mistakes.

