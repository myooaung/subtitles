1
00:00:01,140 --> 00:00:02,960
Before we move off this class,

2
00:00:02,960 --> 00:00:07,140
I want to add one more call inside the InitializeAsync method.

3
00:00:07,140 --> 00:00:11,110
I call to the TestDataSetup class, and also, we'll

4
00:00:11,110 --> 00:00:14,640
chain on a call to CreateTable.

5
00:00:14,640 --> 00:00:16,790
Once we have our container running,

6
00:00:16,790 --> 00:00:21,740
we want to add a table and data to our local instance of DynamoDB.

7
00:00:21,740 --> 00:00:26,940
We don't yet have the class or method to do this, so let's create that now.

8
00:00:26,940 --> 00:00:33,770
Inside our Setup folder, if we add a class and call this TestDataSetup. We need

9
00:00:33,770 --> 00:00:38,290
to make sure that we've set our class to public, and at the top of our class, we

10
00:00:38,290 --> 00:00:42,440
want to create an IAmazonDynamoDB client.

11
00:00:42,440 --> 00:00:46,540
This will allow us to use DynamoDB operations.

12
00:00:46,540 --> 00:00:51,140
We will also add the IAmazonDynamoDB using statement.

13
00:00:51,140 --> 00:00:56,140
We want to add the service URL that our DynamoDB client will be using.

14
00:00:56,140 --> 00:00:57,040
In our case,

15
00:00:57,040 --> 00:01:00,830
we want to use localhost with the same port that our local

16
00:01:00,830 --> 00:01:06,740
DynamoDB has been spun up on, port 8000.

17
00:01:06,740 --> 00:01:10,980
We want to create a MovieRank table inside our local DynamoDB

18
00:01:10,980 --> 00:01:15,990
instance. We first need to create a method named CreateTable. We'll

19
00:01:15,990 --> 00:01:19,840
also add the Threading.Tasks using statement.

20
00:01:19,840 --> 00:01:20,960
Inside our method,

21
00:01:20,960 --> 00:01:25,680
we want to new up a CreateTableRequest and add the DynamoDBv2.Model

22
00:01:25,680 --> 00:01:32,020
using statement. We covered creating our table and the working with

23
00:01:32,020 --> 00:01:35,640
items and DynamoDB using the low‑level model.

24
00:01:35,640 --> 00:01:38,500
So, I'll copy and paste the code needed here to

25
00:01:38,500 --> 00:01:41,940
first create our CreateTableRequest.

26
00:01:41,940 --> 00:01:45,610
If you want to see creating tables in more detail and you

27
00:01:45,610 --> 00:01:47,920
haven't already viewed the previous module,

28
00:01:47,920 --> 00:01:52,840
I'd suggest watching that as it better explains what we're setting up here.

29
00:01:52,840 --> 00:01:57,000
If we have a quick look at what we're setting up, in our request,

30
00:01:57,000 --> 00:02:02,440
we have added two attribute definitions, a UserId of type number

31
00:02:02,440 --> 00:02:05,540
and the MovieName of type string.

32
00:02:05,540 --> 00:02:08,980
We want to set our UserId as the partition key,

33
00:02:08,980 --> 00:02:12,530
which is sometimes referred to as the hash key, and

34
00:02:12,530 --> 00:02:18,140
the MovieName as our sort key, which is sometimes referred to as the range key.

35
00:02:18,140 --> 00:02:23,140
We'll set our read and write capacity to 1. And we

36
00:02:23,140 --> 00:02:26,040
have set our TableName as MovieRank.

37
00:02:26,040 --> 00:02:29,430
There is one part that we didn't cover in the previous module,

38
00:02:29,430 --> 00:02:33,540
and that's adding our secondary index when creating our table.

39
00:02:33,540 --> 00:02:37,530
We need to set up a secondary index, as one of our tests will be

40
00:02:37,530 --> 00:02:42,870
using the secondary index. Inside our CreateTableRequest, we will

41
00:02:42,870 --> 00:02:46,640
set the GlobalSecondaryIndexes property.

42
00:02:46,640 --> 00:02:49,410
We want to add our secondary index name,

43
00:02:49,410 --> 00:02:54,690
MovieName‑index, and then set our KeySchema, i.e., the

44
00:02:54,690 --> 00:02:58,440
partition and sort key of our secondary index.

45
00:02:58,440 --> 00:03:01,850
We only have a partition key set for our secondary index,

46
00:03:01,850 --> 00:03:08,440
so we'll set that to MovieName, and we set the read and write capacity units.

47
00:03:08,440 --> 00:03:10,380
We need to set the projection.

48
00:03:10,380 --> 00:03:14,400
This specifies the attributes that are copied or projected

49
00:03:14,400 --> 00:03:17,640
from the table into our secondary index.

50
00:03:17,640 --> 00:03:20,940
We want all of these copied into our secondary index,

51
00:03:20,940 --> 00:03:26,800
so we'll set this to ALL. Using the DynamoDB client, we will use the

52
00:03:26,800 --> 00:03:33,840
CreateTableAsync method and pass in our CreateTableRequest.

53
00:03:33,840 --> 00:03:37,230
When creating tables, they won't be created instantly.

54
00:03:37,230 --> 00:03:40,540
We want to add some code that will wait for the table

55
00:03:40,540 --> 00:03:43,740
to be created before continuing on.

56
00:03:43,740 --> 00:03:46,920
Otherwise, we could run into the situation of running our

57
00:03:46,920 --> 00:03:50,640
tests against a table that doesn't exist.

58
00:03:50,640 --> 00:03:54,140
Let's create a method, WaitUntilTableActive.

59
00:03:54,140 --> 00:03:58,540
We want to add a parameter of string tableName.

60
00:03:58,540 --> 00:04:02,910
We will add a string variable and set it to null and create a

61
00:04:02,910 --> 00:04:08,640
do while loop. Inside this loop, we want to set a Thread.Sleep

62
00:04:08,640 --> 00:04:11,590
and set it to 5000 milliseconds.

63
00:04:11,590 --> 00:04:16,310
This is so we can wait for 5 seconds each time before checking if the table

64
00:04:16,310 --> 00:04:21,720
has been created. We will add a try catch statement. Inside our catch

65
00:04:21,720 --> 00:04:26,140
statement, we want to catch ResourceNotFoundException.

66
00:04:26,140 --> 00:04:30,270
We're adding this catch as we're about to do a DescribeTable.

67
00:04:30,270 --> 00:04:33,730
And since DescribeTable is eventually consistent,

68
00:04:33,730 --> 00:04:37,240
we could get back a ResourceNotFoundException.

69
00:04:37,240 --> 00:04:40,040
So we catch this and handle it.

70
00:04:40,040 --> 00:04:44,840
We will set our while to be of (status != "ACTIVE").

71
00:04:44,840 --> 00:04:50,340
When the table is ready for us to use, we will get back a status of active.

72
00:04:50,340 --> 00:04:54,370
Let's add a check inside our try statement that uses the description

73
00:04:54,370 --> 00:04:58,840
table operation to check if the table was active.

74
00:04:58,840 --> 00:05:02,760
We will call off to a method that doesn't yet exist named

75
00:05:02,760 --> 00:05:06,740
GetTableStatus and pass in the table name.

76
00:05:06,740 --> 00:05:10,570
We save the response that we get back from the status to our local

77
00:05:10,570 --> 00:05:16,740
variable. Let's create our GetTableStatus method.

78
00:05:16,740 --> 00:05:20,710
This will have a string parameter named tableName. Using our

79
00:05:20,710 --> 00:05:25,530
DynamoDB client, we will use the DescribeTableAsync method and

80
00:05:25,530 --> 00:05:30,100
new up a DescribeTableRequest and set our tableName that is

81
00:05:30,100 --> 00:05:32,440
being passed into this method.

82
00:05:32,440 --> 00:05:36,880
Once we have been returned a response, we want to return the table status.

83
00:05:36,880 --> 00:05:43,340
So, we will say response.Table.TableStatus.

84
00:05:43,340 --> 00:05:45,750
And we want to add a call to this method to the

85
00:05:45,750 --> 00:05:48,090
bottom of our CreateTable method.

86
00:05:48,090 --> 00:05:54,000
This will wait for the table to be created before continuing on and running our tests.

