1
00:00:01,952 --> 00:00:02,675
For our next endpoint,

2
00:00:02,675 --> 00:00:07,471
we will get all movies that a user has ranked using the UserId

3
00:00:07,471 --> 00:00:09,601
and the movieName like we did previously,

4
00:00:09,601 --> 00:00:16,228
but this time we'll use a sort filter with a ScanCondition of BeginsWith.

5
00:00:16,228 --> 00:00:18,967
This will allow a user to query a movie that they have

6
00:00:18,967 --> 00:00:22,548
ranked by entering only the first letter or the first word

7
00:00:22,548 --> 00:00:27,356
of a movie they have ranked, as they might have forgotten the full movie name.

8
00:00:27,356 --> 00:00:32,099
This is also a good opportunity to show how the query filters work.

9
00:00:32,099 --> 00:00:36,493
In our controller class, we will add an HttpGet decorator,

10
00:00:36,493 --> 00:00:42,466
and add a route, the route that we will use will be Route user/ curly braces,

11
00:00:42,466 --> 00:00:50,419
userId, so we can pass in the userId/rankedMovies/ curly braces,

12
00:00:50,419 --> 00:00:52,999
movieName, so we can pass in the movie name as well.

13
00:00:52,999 --> 00:00:58,592
Our method will have a return type of Task IEnumerable MovieResponse,

14
00:00:58,592 --> 00:01:04,913
and our method name will be GetUsersRankedMoviesByMovieTitle.

15
00:01:04,913 --> 00:01:08,891
We'll accept two parameters, userId and movieName.

16
00:01:08,891 --> 00:01:09,472
Inside our method,

17
00:01:09,472 --> 00:01:13,103
we will call off to our MovieRankService class to a method inside

18
00:01:13,103 --> 00:01:17,792
that class called GetUsersRankedMoviesByMovieTitle,

19
00:01:17,792 --> 00:01:21,486
and pass in our userId and movieName arguments.

20
00:01:21,486 --> 00:01:25,875
We will also return the results back to our user.

21
00:01:25,875 --> 00:01:29,466
Heading over to our MovieRankService class,

22
00:01:29,466 --> 00:01:35,270
we want to create a method with a return type of Task IEnumerable MovieResponse,

23
00:01:35,270 --> 00:01:40,997
and a method name of GetUsersRankedMoviesByMovieTitle.

24
00:01:40,997 --> 00:01:45,961
This method will also accept a userId and a movieName as parameters.

25
00:01:45,961 --> 00:01:47,027
And inside our method,

26
00:01:47,027 --> 00:01:50,410
we will call off to our Repository class to a method

27
00:01:50,410 --> 00:01:54,486
named GetUsersRankedMoviesByMovieTitle.

28
00:01:54,486 --> 00:01:58,629
And we'll also pass in the userId and the movieName.

29
00:01:58,629 --> 00:01:59,645
Like in our previous methods,

30
00:01:59,645 --> 00:02:03,343
we want to map the response that we get back from DynamoDB

31
00:02:03,343 --> 00:02:08,489
into our IEnumerable MovieResponse contract.

32
00:02:08,489 --> 00:02:12,058
We also need to add this method to our interface.

33
00:02:12,058 --> 00:02:14,472
Heading over to our MovieRankRepository,

34
00:02:14,472 --> 00:02:20,750
let's create a method that will have a return type of Task IEnumerable MovieDb,

35
00:02:20,750 --> 00:02:24,542
and we'll call our method GetUsersRankedMoviesByMovieTitle.

36
00:02:24,542 --> 00:02:27,630
We'll add a userId and movieName,

37
00:02:27,630 --> 00:02:32,439
and in this method we're going to use DynamoDB's query function.

38
00:02:32,439 --> 00:02:34,196
We'll pass in a ScanCondition,

39
00:02:34,196 --> 00:02:38,012
and we'll set up our ScanCondition to query movies from a user based on the

40
00:02:38,012 --> 00:02:42,552
movie name where the user wasn't sure of the full movie name,

41
00:02:42,552 --> 00:02:44,837
but they might know what it begins with.

42
00:02:44,837 --> 00:02:48,863
We'll first new up a DynamoDBOperationConfig.

43
00:02:48,863 --> 00:02:51,879
Inside here, we can set a query filter.

44
00:02:51,879 --> 00:02:57,726
We then new up a ScanCondition list, and new up a ScanCondition.

45
00:02:57,726 --> 00:03:03,263
Inside our ScanCondition, we will specify our DynamoDB table's property name,

46
00:03:03,263 --> 00:03:08,927
in our case it's MovieName, and we'll add the ScanOperator.BeginsWith.

47
00:03:08,927 --> 00:03:12,844
The ScanOperator is borrowed from the DynamoDB's document model.

48
00:03:12,844 --> 00:03:18,399
So we need to add a using statement pointing to DynamoDB's document model,

49
00:03:18,399 --> 00:03:22,860
as the Object Persistence model doesn't have a ScanOperator that we can use.

50
00:03:22,860 --> 00:03:28,150
This also shows that we can use different models and combine them together.

51
00:03:28,150 --> 00:03:30,388
I would normally try and use one model and stick to it,

52
00:03:30,388 --> 00:03:32,392
unless I run into situations like this,

53
00:03:32,392 --> 00:03:37,238
where a certain model doesn't contain a function that we need.

54
00:03:37,238 --> 00:03:41,329
The ScanOperator contains other operators such as greater than,

55
00:03:41,329 --> 00:03:43,855
less than, contains, etc.

56
00:03:43,855 --> 00:03:48,208
And we'll also query on the partial movieName that was passed through to us.

57
00:03:48,208 --> 00:03:52,396
We will set a return await, and using our DynamoDB's context,

58
00:03:52,396 --> 00:03:54,713
we will use the QueryAsync method.

59
00:03:54,713 --> 00:03:57,098
Our search is based on the userId,

60
00:03:57,098 --> 00:04:00,868
so we'll add userId inside the QueryAsync's parameters,

61
00:04:00,868 --> 00:04:04,232
and we'll also pass in our config that we created

62
00:04:04,232 --> 00:04:06,852
above that contains our ScanCondition.

63
00:04:06,852 --> 00:04:10,136
We also add GetRemainingAsync to tell DynamoDB that we

64
00:04:10,136 --> 00:04:12,572
want all items that it finds back.

65
00:04:12,572 --> 00:04:17,421
We also need to make sure that we've added our new method to our interface.

66
00:04:17,421 --> 00:04:22,844
I'll save our application, and I'll build it as well.

67
00:04:22,844 --> 00:04:29,093
If we run our application, head over to Postman,

68
00:04:29,093 --> 00:04:33,600
we will add our localhost, and using the route that we created,

69
00:04:33,600 --> 00:04:38,046
I'll add a userId of 1 and the first letter of a

70
00:04:38,046 --> 00:04:40,101
movie name that user has ranked.

71
00:04:40,101 --> 00:04:42,077
So I'll add F.

72
00:04:42,077 --> 00:04:43,065
Hit Send.

73
00:04:43,065 --> 00:04:46,258
And we're given back results based on the userId and movieNames that

74
00:04:46,258 --> 00:04:58,000
the user has ranked that start with the letter F. I'll also save this query to our Postman collection.

