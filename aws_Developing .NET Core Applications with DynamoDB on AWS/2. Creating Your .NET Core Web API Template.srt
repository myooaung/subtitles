1
00:00:01,440 --> 00:00:06,940
In our demo, we will create a new .NET Core web application.

2
00:00:06,940 --> 00:00:11,240
We will then create the folders and classes that we will use in the next

3
00:00:11,240 --> 00:00:15,940
module to add the code needed to interact with DynamoDB.

4
00:00:15,940 --> 00:00:22,540
We will install the AWS SDKs and set up our DynamoDB client.

5
00:00:22,540 --> 00:00:27,430
We will then jump into the AWS Management Console where we will create an

6
00:00:27,430 --> 00:00:32,210
IAM role. This will allow us to get credentials. We will add these

7
00:00:32,210 --> 00:00:37,600
credentials to our credentials file that our DynamoDB client will use.

8
00:00:37,600 --> 00:00:41,500
Here I have Visual Studio 2019 opened.

9
00:00:41,500 --> 00:00:48,460
We want to create our MovieRank application so head along to File, New, Project.

10
00:00:48,460 --> 00:00:54,450
And if you're using Visual Studio 2019 and have the .NET Core SDK installed,

11
00:00:54,450 --> 00:01:00,790
you'll be able to search for and find the ASP.NET Core Web Application.

12
00:01:00,790 --> 00:01:03,990
We're going to select this and click Next.

13
00:01:03,990 --> 00:01:09,080
We will enter MovieRank as our solution name and click Create.

14
00:01:09,080 --> 00:01:12,700
When creating a .NET Core project, we are offered different

15
00:01:12,700 --> 00:01:15,110
starting templates that we can use.

16
00:01:15,110 --> 00:01:18,470
We're going to use the Empty template.

17
00:01:18,470 --> 00:01:20,340
Once our solution has loaded,

18
00:01:20,340 --> 00:01:25,720
we're going to head along to the Startup class. In .NET Core 3,

19
00:01:25,720 --> 00:01:30,820
Microsoft has changed the way that we add our MVC pipeline.

20
00:01:30,820 --> 00:01:36,750
Previously, we would add services.AddMvc. This would load up a bunch of stuff,

21
00:01:36,750 --> 00:01:39,480
including stuff that you might not need.

22
00:01:39,480 --> 00:01:43,840
Microsoft has decided to split this out. For us, we're

23
00:01:43,840 --> 00:01:48,540
creating a web API, so we only need to load up the

24
00:01:48,540 --> 00:01:50,880
controllers. Inside the ConfigureServices method,

25
00:01:50,880 --> 00:01:55,080
we can add services.AddControllers.

26
00:01:55,080 --> 00:01:57,900
And if we head down to our Configure method,

27
00:01:57,900 --> 00:02:03,760
we can replace what's inside the UseEndoints with endpoints.MapControllers.

28
00:02:03,760 --> 00:02:07,200
This is going to map our controller endpoints for us.

29
00:02:07,200 --> 00:02:11,780
So when a request comes into our web API, our API knows where

30
00:02:11,780 --> 00:02:16,390
to direct this request to. Now we are ready to add some

31
00:02:16,390 --> 00:02:19,030
classes and folders to our Solution.

32
00:02:19,030 --> 00:02:22,270
We'll first add a folder in a controller class.

33
00:02:22,270 --> 00:02:25,490
If we right‑click on our MovieRank project,

34
00:02:25,490 --> 00:02:30,370
select Folder, we'll name this Controllers. Inside this

35
00:02:30,370 --> 00:02:33,350
folder, we'll add a controller class.

36
00:02:33,350 --> 00:02:37,380
We want to add the API Controller ‑ Empty option and

37
00:02:37,380 --> 00:02:41,620
name this controller MovieController.

38
00:02:41,620 --> 00:02:44,980
We will now add a folder named Services. If we

39
00:02:44,980 --> 00:02:47,520
right‑click on our MovieRank solution,

40
00:02:47,520 --> 00:02:52,920
select Add and Folder, and name this Services, this folder will contain an

41
00:02:52,920 --> 00:02:58,500
IMovieRankService interface and also a MovieRankService class.

42
00:02:58,500 --> 00:03:03,850
We will right‑click on our folder and select Add, New Item. Here we'll

43
00:03:03,850 --> 00:03:10,400
select an interface and name our interface IMovieRankService.

44
00:03:10,400 --> 00:03:13,830
We will set our interface to be public.

45
00:03:13,830 --> 00:03:19,340
Once we have created our interface, we will add a new item and select

46
00:03:19,340 --> 00:03:23,100
Class. Here we'll name our class MovieRankService.

47
00:03:23,100 --> 00:03:25,770
Once we have our interface and class created,

48
00:03:25,770 --> 00:03:31,840
we will implement the IMovieRankService interface inside our MovieRankService

49
00:03:31,840 --> 00:03:35,340
class. We will now add another project to our solution.

50
00:03:35,340 --> 00:03:38,570
If we right‑click on the MovieRank solution,

51
00:03:38,570 --> 00:03:40,910
select Add and New Project,

52
00:03:40,910 --> 00:03:45,640
this will be a Class Library, and we'll name it MovieRank.Libs.

53
00:03:45,640 --> 00:03:50,320
This project will hold code that we will write to interact with AWS

54
00:03:50,320 --> 00:03:55,540
using the AWS SDK for .NET. There are a few reasons that I like to

55
00:03:55,540 --> 00:03:57,920
separate this out into separate projects,

56
00:03:57,920 --> 00:04:03,960
one of them being that if we keep all code that we write that uses the AWS SDK,

57
00:04:03,960 --> 00:04:06,800
then we could, at a later stage, decide to swap out

58
00:04:06,800 --> 00:04:10,010
the AWS SDK code for something else.

59
00:04:10,010 --> 00:04:13,890
We would simply remove this project and add another that contains the

60
00:04:13,890 --> 00:04:17,240
code relating to whatever we've swapped it out for.

61
00:04:17,240 --> 00:04:20,760
We will delete the Class1.cs file that was

62
00:04:20,760 --> 00:04:23,660
automatically generated for us as well.

63
00:04:23,660 --> 00:04:29,990
Inside our MovieRank.Libs project, we will add a folder named Repositories.

64
00:04:29,990 --> 00:04:37,090
And inside this folder, we'll be adding an interface named IMovieRankRepository.

65
00:04:37,090 --> 00:04:41,510
We will make sure that our interface is set to public.

66
00:04:41,510 --> 00:04:46,380
Then we create a class named MovieRankRepository.

67
00:04:46,380 --> 00:04:51,740
We make sure that that implements our IMovieRankRepository interface.

68
00:04:51,740 --> 00:04:55,940
We'll also want to make sure this class is set to public. We'll

69
00:04:55,940 --> 00:05:00,540
be mapping the results that will be returned by DynamoDB into

70
00:05:00,540 --> 00:05:04,150
properties that we want to return back to our user, so we'll add

71
00:05:04,150 --> 00:05:07,450
a folder called Mappers.

72
00:05:07,450 --> 00:05:11,740
And inside that folder, we'll create an interface called IMapper.

73
00:05:11,740 --> 00:05:19,350
We'll make sure that's set to public, and we want to add a class named Mapper.

74
00:05:19,350 --> 00:05:24,140
We need to be sure that that implements our IMapper interface, and we

75
00:05:24,140 --> 00:05:29,290
also need to make sure that our class is set to public. We'll be now

76
00:05:29,290 --> 00:05:32,270
creating a Contracts class library project.

77
00:05:32,270 --> 00:05:34,880
We'll be adding four classes to this project,

78
00:05:34,880 --> 00:05:43,280
a MovieRankRequest, MovieRankResponse, MovieResponse, and a MovieUpdateRequest.

79
00:05:43,280 --> 00:05:47,560
We'll make sure that each of these classes have been set to public.

80
00:05:47,560 --> 00:05:51,410
These are the contracts that we'll be using inside our application.

81
00:05:51,410 --> 00:05:54,660
These will contain properties that we'll be using for

82
00:05:54,660 --> 00:05:58,590
what we accept inside a request or what we want to pass

83
00:05:58,590 --> 00:06:01,780
back to the user as a response.

84
00:06:01,780 --> 00:06:01,970
Normally,

85
00:06:01,970 --> 00:06:06,130
I would create classes and interfaces when I need them, as I'm writing the

86
00:06:06,130 --> 00:06:12,020
code to interact with AWS' DynamoDB, but I want to try and separate out

87
00:06:12,020 --> 00:06:16,950
creating our classes and interfaces so we can focus as much as possible in the

88
00:06:16,950 --> 00:06:24,560
next module on the AWS‑specific code. We will now install our AWS SDKs. First

89
00:06:24,560 --> 00:06:30,860
will be the DynamoDB SDK. Remember, this provides us with .NET APIs that we

90
00:06:30,860 --> 00:06:36,500
can use to interact with DynamoDB. If we head to Package Manager Console and

91
00:06:36,500 --> 00:06:43,940
use the install‑package command to install the awssdk.dynamodbv2 NuGet

92
00:06:43,940 --> 00:06:48,780
package, we also want to install this in our MovieRank.Libs project as well.

93
00:06:48,780 --> 00:06:52,680
So if we select our default project to install this in as

94
00:06:52,680 --> 00:06:57,160
MovieRank.Libs and use the same install‑package command as above,

95
00:06:57,160 --> 00:07:00,780
we'll install it in our MovieRank.Libs project.

96
00:07:00,780 --> 00:07:07,010
We now want to install the extensions.netcore.setup NuGet package. This

97
00:07:07,010 --> 00:07:10,680
package allows us to integrate with the .NET Core's configuration and

98
00:07:10,680 --> 00:07:16,840
dependency injection framework to load our AWS credentials into our .NET Core

99
00:07:16,840 --> 00:07:21,330
client. In Package Manager Console, I'll set our default project to MovieRank

100
00:07:21,330 --> 00:07:26,200
and install this package as well.

101
00:07:26,200 --> 00:07:31,440
Now we can head back into our Startup class. Inside the ConfigureServices

102
00:07:31,440 --> 00:07:38,840
method, we need to add the AddAWSService and bind that to our IAmazonDynamoDB

103
00:07:38,840 --> 00:07:45,660
interface. AddAWSService has come from our extensions.netcore.setup SDK and

104
00:07:45,660 --> 00:07:51,090
the IAmazonDynamoDB from our DynamoDB SDK.

105
00:07:51,090 --> 00:07:58,880
If we add services.AddAWSService and bind that to IAmazonDynamoDB.

106
00:07:58,880 --> 00:08:02,940
We also want to set the region where our DynamoDB table

107
00:08:02,940 --> 00:08:08,740
lives. Using the awssdk.extensions.netcore.setup library

108
00:08:08,740 --> 00:08:10,700
that we installed previously,

109
00:08:10,700 --> 00:08:17,340
we'll add services.AddDefaultAWSOptions, we'll new up the

110
00:08:17,340 --> 00:08:19,400
AWSOptions, and will set the Region.

111
00:08:19,400 --> 00:08:24,350
We'll do this by GetBySystemName, and we'll set it to us‑west‑2.

112
00:08:24,350 --> 00:08:27,430
This is where our DynamoDB table lives.

113
00:08:27,430 --> 00:08:29,330
Once we have our region set,

114
00:08:29,330 --> 00:08:34,080
we need to ensure that we add all the appropriate using statements.

115
00:08:34,080 --> 00:08:36,760
I've hardcoded the region in here; however,

116
00:08:36,760 --> 00:08:42,000
you might want to look at moving this into the appsettings.json file and reading it from there.

