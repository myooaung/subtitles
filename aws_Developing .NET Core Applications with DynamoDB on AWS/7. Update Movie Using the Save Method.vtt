WEBVTT
1
00:00:02.329 --> 00:00:07.458
We want to allow our users to update movies that they have already ranked.

2
00:00:07.458 --> 00:00:10.168
So we'll start off in our MovieController class,

3
00:00:10.168 --> 00:00:16.867
and we'll add the HttpPatch attribute, and add userId to our route.

4
00:00:16.867 --> 00:00:19.291
Our method has a return type of Task IActionResult,

5
00:00:19.291 --> 00:00:23.460
and we'll call this method UpdateMovie.

6
00:00:23.460 --> 00:00:28.255
We'll take in two parameters, a userId, and using the FromBody attribute,

7
00:00:28.255 --> 00:00:32.999
we'll also pass in the MovieUpdateRequest.

8
00:00:32.999 --> 00:00:37.778
We need to head over to our MovieUpdateRequest class and add in two properties,

9
00:00:37.778 --> 00:00:40.734
MovieName and Ranking.

10
00:00:40.734 --> 00:00:43.877
These are the properties that we'll accept when a user is making the

11
00:00:43.877 --> 00:00:47.386
request to update a movie that they have already ranked.

12
00:00:47.386 --> 00:00:48.729
Back in our Controller class,

13
00:00:48.729 --> 00:00:55.133
we will call off to our MovieRankService class to a method named UpdateMovie.

14
00:00:55.133 --> 00:00:58.543
We'll pass through userId and MovieUpdateRequest.

15
00:00:58.543 --> 00:01:04.450
Once the update has been successful, we'll return OK.

16
00:01:04.450 --> 00:01:10.137
Inside our MovieRankService class,

17
00:01:10.137 --> 00:01:13.863
we will create the method UpdateMovie with two parameters,

18
00:01:13.863 --> 00:01:17.396
userId and MovieUpdateRequest.

19
00:01:17.396 --> 00:01:18.151
Inside our method,

20
00:01:18.151 --> 00:01:23.075
we first need to call off to our DynamoDB table and get the existing record.

21
00:01:23.075 --> 00:01:26.945
We have already added the code needed to get a movie

22
00:01:26.945 --> 00:01:28.313
based on userId and MovieName,

23
00:01:28.313 --> 00:01:32.153
so we can use our existing code to call off to our

24
00:01:32.153 --> 00:01:37.337
MovieRankRepository class to get the existing movie for our user.

25
00:01:37.337 --> 00:01:40.233
Once we have the existing movie back from our DynamoDB table,

26
00:01:40.233 --> 00:01:45.473
MovieRank, we need to add the update to the response.

27
00:01:45.473 --> 00:01:51.357
So we'll call off to our Mapper class to a method named ToMovieDbModel.

28
00:01:51.357 --> 00:01:54.423
We'll pass through our userId and the response that we got

29
00:01:54.423 --> 00:01:56.694
back from the existing DynamoDB item.

30
00:01:56.694 --> 00:02:01.639
We also need to add in the movie update request

31
00:02:01.639 --> 00:02:04.035
that contains the updated ranking.

32
00:02:04.035 --> 00:02:06.145
Inside our Mapper class,

33
00:02:06.145 --> 00:02:10.974
we need to create an overload method that accepts three parameters.

34
00:02:10.974 --> 00:02:14.802
Inside our overload method, we will add userId,

35
00:02:14.802 --> 00:02:18.649
MovieDb, and also the movieUpdateRequest.

36
00:02:18.649 --> 00:02:28.077
We will create a new MovieDb, and we want to map the userId,

37
00:02:28.077 --> 00:02:29.547
MovieName, Description,

38
00:02:29.547 --> 00:02:33.728
and Actors using the response that we got back from

39
00:02:33.728 --> 00:02:37.172
DynamoDB for our existing record.

40
00:02:37.172 --> 00:02:37.828
For our ranking,

41
00:02:37.828 --> 00:02:42.891
we want to map this using the new ranking that the user has given the movie.

42
00:02:42.891 --> 00:02:45.379
So we'll use our movieUpdateRequest,

43
00:02:45.379 --> 00:02:50.056
and map this to our Ranking property in our MovieDb model.

44
00:02:50.056 --> 00:02:52.075
For RankedDateTime,

45
00:02:52.075 --> 00:02:59.396
we want to use DateTime.UtcNow to update the time the movie was ranked.

46
00:02:59.396 --> 00:03:02.531
We will add this method to our interface and head

47
00:03:02.531 --> 00:03:05.353
back to our MovieRankService class.

48
00:03:05.353 --> 00:03:07.147
We now want to call off to our MovieRankRepository

49
00:03:07.147 --> 00:03:09.923
class to a method named UpdateMovie,

50
00:03:09.923 --> 00:03:15.398
and we'll pass in our newly-created movieDb model.

51
00:03:15.398 --> 00:03:20.669
And we'll add this method to our IMovieRankService interface.

52
00:03:20.669 --> 00:03:23.360
In our MovieRankRepository class,

53
00:03:23.360 --> 00:03:25.450
we will use the SaveAsync method that we used to

54
00:03:25.450 --> 00:03:28.095
add our movie to also update it.

55
00:03:28.095 --> 00:03:33.006
We'll create our method UpdateMovie with MovieDb as our parameter,

56
00:03:33.006 --> 00:03:38.227
and using the DynamoDB context, we'll call off to the SaveAsync method,

57
00:03:38.227 --> 00:03:41.489
passing in our MovieDb request.

58
00:03:41.489 --> 00:03:44.684
We'll make sure that we've added this method to our interface,

59
00:03:44.684 --> 00:03:47.666
we'll save our application, and build it,

60
00:03:47.666 --> 00:03:51.743
and now we're ready to run it.

61
00:03:51.743 --> 00:03:54.680
We'll run our application.

62
00:03:54.680 --> 00:03:58.352
And inside Postman, if we add our localhost and port,

63
00:03:58.352 --> 00:04:01.923
along with the movie's route and userId of 3,

64
00:04:01.923 --> 00:04:05.336
we will use the PATCH method.

65
00:04:05.336 --> 00:04:11.448
We will add a JSON body to our request, and pass in movieName of Fast Draw,

66
00:04:11.448 --> 00:04:14.771
and we'll add an updated ranking of 9 down from 10.

67
00:04:14.771 --> 00:04:19.992
We'll hit Send, and we get a 200 OK back.

68
00:04:19.992 --> 00:04:23.529
We will save our request.

69
00:04:23.529 --> 00:04:25.848
And using the GetMovieRequest that we've created earlier,

70
00:04:25.848 --> 00:04:36.000
we'll just make sure that the update was successful. And as you can see, the ranking has now changed from 10 down to 9.

