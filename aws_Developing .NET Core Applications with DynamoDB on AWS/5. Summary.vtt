WEBVTT
1
00:00:01.540 --> 00:00:02.580
In this module,

2
00:00:02.580 --> 00:00:05.340
we looked at the different tools that we can use to

3
00:00:05.340 --> 00:00:08.040
build our .NET Core application.

4
00:00:08.040 --> 00:00:13.940
These included Visual Studio 2019 and Visual Studio Code.

5
00:00:13.940 --> 00:00:17.840
We are using the DynamoDB SDK for .NET.

6
00:00:17.840 --> 00:00:23.440
This takes some of the challenges out of writing code to interact with DynamoDB.

7
00:00:23.440 --> 00:00:27.740
We installed the AWS extension's .NET Core library that

8
00:00:27.740 --> 00:00:30.740
extends the IServiceCollection interface.

9
00:00:30.740 --> 00:00:34.330
This allows us to use dependency injection to get our AWS

10
00:00:34.330 --> 00:00:38.740
credentials and to create our DynamoDB client.

11
00:00:38.740 --> 00:00:44.140
Inside Visual Studio, we created a .NET Core Web API template.

12
00:00:44.140 --> 00:00:47.400
This will be our starting point in the next module that we

13
00:00:47.400 --> 00:00:50.630
will use to start writing code that will interact with our

14
00:00:50.630 --> 00:00:53.640
MovieRank DynamoDB table.

15
00:00:53.640 --> 00:00:55.850
When interacting with DynamoDB,

16
00:00:55.850 --> 00:00:59.540
we need to have a set of credentials that allows us to gain

17
00:00:59.540 --> 00:01:03.940
access to our DynamoDB table from our application.

18
00:01:03.940 --> 00:01:06.080
Inside the AWS Management Console,

19
00:01:06.080 --> 00:01:10.730
we created an IAM role and stored our access and secret keys

20
00:01:10.730 --> 00:01:14.530
inside a credentials file located on our computer that our

21
00:01:14.530 --> 00:01:17.940
application will read when it is run.

22
00:01:17.940 --> 00:01:19.080
In the next module,

23
00:01:19.080 --> 00:01:22.970
we will start adding the code needed to interact with DynamoDB

24
00:01:22.970 --> 00:01:29.000
using one of DynamoDB's SDK for .NET models, the object persistence model.

