1
00:00:02,328 --> 00:00:05,611
There is a key feature that the low-level model offers that the

2
00:00:05,611 --> 00:00:07,859
Object Persistence and document model don't,

3
00:00:07,859 --> 00:00:11,449
and that is the ability to create, update,

4
00:00:11,449 --> 00:00:13,100
and delete tables.

5
00:00:13,100 --> 00:00:16,108
Let's have a look at how we can create and delete tables.

6
00:00:16,108 --> 00:00:20,933
We'll start off by creating a new Controller class inside our

7
00:00:20,933 --> 00:00:25,314
Controller folder named SetupController.

8
00:00:25,314 --> 00:00:26,191
Inside our Controller,

9
00:00:26,191 --> 00:00:29,830
we want to call off to methods that will exist in the SetupService class.

10
00:00:29,830 --> 00:00:33,711
We don't yet have this class or any methods inside it,

11
00:00:33,711 --> 00:00:37,481
but we'll be creating those shortly.

12
00:00:37,481 --> 00:00:41,232
We'll create a field at the top of our class with the type

13
00:00:41,232 --> 00:00:45,593
IsetupService and name our field SetupService.

14
00:00:45,593 --> 00:00:51,630
Inside our constructor, we want to dependency inject our ISetupService.

15
00:00:51,630 --> 00:00:55,494
Let's create our ISetupService interface and setup

16
00:00:55,494 --> 00:00:59,198
Service class in our Services folder.

17
00:00:59,198 --> 00:01:02,460
Make sure that the ISetupService interface is set to public.

18
00:01:02,460 --> 00:01:08,381
We need to make sure that we bind our ISetupService to our SetupService class,

19
00:01:08,381 --> 00:01:13,470
and we'll register our ISetupService inside our Startup class,

20
00:01:13,470 --> 00:01:18,009
and bind it to our SetupService class.

21
00:01:18,009 --> 00:01:19,911
Back in our SetupService Controller,

22
00:01:19,911 --> 00:01:24,259
we will add the MovieRank.Services using statement.

23
00:01:24,259 --> 00:01:26,772
Our first method in our Controller class,

24
00:01:26,772 --> 00:01:29,127
we will look at how we can create a DynamoDB table.

25
00:01:29,127 --> 00:01:31,566
We will have two attributes,

26
00:01:31,566 --> 00:01:38,287
the HttpPost and the Route of createTable/ squiggly brackets,

27
00:01:38,287 --> 00:01:39,073
dynamoDbTableName.

28
00:01:39,073 --> 00:01:46,487
We will also set a controller-wide Route setup at the top of our class.

29
00:01:46,487 --> 00:01:50,774
Our method will have a return type of Task IActionResult

30
00:01:50,774 --> 00:01:54,342
and a method name of CreateDynamoDbTable,

31
00:01:54,342 --> 00:01:59,777
and we'll pass in a string parameter.

32
00:01:59,777 --> 00:02:00,271
Inside our method,

33
00:02:00,271 --> 00:02:03,557
we will call off to our newly-created Setup Service to a

34
00:02:03,557 --> 00:02:11,661
method called CreateDynamoDbTable, and pass in our dynamoDbTableName parameter.

35
00:02:11,661 --> 00:02:18,750
Once our table has been created successfully, we will return a status of OK.

36
00:02:18,750 --> 00:02:19,628
Inside our SetupService class,

37
00:02:19,628 --> 00:02:23,733
we want to call off to our MovieRankRepository class,

38
00:02:23,733 --> 00:02:28,163
so we'll set our IMovieRankRepository field at the top of our class,

39
00:02:28,163 --> 00:02:31,903
we want to make sure we have we have the appropriate using statements added,

40
00:02:31,903 --> 00:02:35,404
and we'll dependency inject our IMovieRankRepository

41
00:02:35,404 --> 00:02:39,418
inside our class's constructor.

42
00:02:39,418 --> 00:02:47,099
Inside our SetupService Class, we create a method named CreateDynamoDbTable,

43
00:02:47,099 --> 00:02:51,687
and pass in the string dynamoDbTableName parameter.

44
00:02:51,687 --> 00:02:54,011
Our method will call off to our MovieRankRepository class

45
00:02:54,011 --> 00:02:56,789
to emit the name CrateDynamoDbTable.

46
00:02:56,789 --> 00:03:03,669
We will also pass through our dynamoDbTableName.

47
00:03:03,669 --> 00:03:07,395
We add this method to our interface and head over to

48
00:03:07,395 --> 00:03:09,453
our MovieRankRepository class.

49
00:03:09,453 --> 00:03:14,848
Here we'll create a method at the bottom of our class, CreateDynamoDbTable.

50
00:03:14,848 --> 00:03:19,749
We will add a parameter to our method of type string tableName.

51
00:03:19,749 --> 00:03:24,285
When creating a table, we need to build up a CreateTableRequest.

52
00:03:24,285 --> 00:03:30,158
We will say new CreateTableRequest, and set the TableName.

53
00:03:30,158 --> 00:03:32,182
We add the AttributeDefinitions,

54
00:03:32,182 --> 00:03:34,867
these are the properties that we want to set on our

55
00:03:34,867 --> 00:03:37,463
table during the creation of the table.

56
00:03:37,463 --> 00:03:43,801
Remember, when creating tables, we only need to set the partition and sort key.

57
00:03:43,801 --> 00:03:48,622
The other properties will be added when adding items to our database.

58
00:03:48,622 --> 00:03:54,601
We will set the AttributeName as Id and the AttributeType as N for number.

59
00:03:54,601 --> 00:03:58,537
We add the KeySchema that will set our partition key,

60
00:03:58,537 --> 00:04:01,576
which is sometimes referred to as the hash key.

61
00:04:01,576 --> 00:04:07,373
We new up a KeySchema element List, then new up a single KeySchemaElement.

62
00:04:07,373 --> 00:04:11,503
Inside our KeySchemaElement, we will set our AttributeName to Id,

63
00:04:11,503 --> 00:04:14,402
and the key type as HASH.

64
00:04:14,402 --> 00:04:17,801
This will set our partition key on our table.

65
00:04:17,801 --> 00:04:20,611
We need to set the read and WriteCapacity,

66
00:04:20,611 --> 00:04:24,939
we do this by setting the provisioned throughput property.

67
00:04:24,939 --> 00:04:30,504
We will set Read and WriteCapacity to 1.

68
00:04:30,504 --> 00:04:34,190
We make a call off using our dynamoDbClient to

69
00:04:34,190 --> 00:04:37,222
DynamoDB's CreateTableAsync method,

70
00:04:37,222 --> 00:04:40,447
and pass in the request that we have just built.

71
00:04:40,447 --> 00:04:47,000
We'll add this method to our interface, and we now have the ability to create a table.

