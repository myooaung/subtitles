1
00:00:03,514 --> 00:00:04,453
Our final endpoint,

2
00:00:04,453 --> 00:00:09,933
we will get the overall ranking for a movie based on all user's rankings.

3
00:00:09,933 --> 00:00:12,599
Inside our Controller class, like with the other methods,

4
00:00:12,599 --> 00:00:14,883
we don't need to touch any of this code.

5
00:00:14,883 --> 00:00:19,147
So we can head straight to the MovieRankService class.

6
00:00:19,147 --> 00:00:25,069
Inside the method GetMovieRank, we'll call off to get a specific movie.

7
00:00:25,069 --> 00:00:29,952
We will be returned the movie and all user's rankings for this movie.

8
00:00:29,952 --> 00:00:33,469
We want to add some C# code here to get an average of all

9
00:00:33,469 --> 00:00:36,626
the user's rankings for that movie.

10
00:00:36,626 --> 00:00:39,915
We will then use the Math.Round method and use the response that

11
00:00:39,915 --> 00:00:45,463
we got back from DynamoDB in our previous call.

12
00:00:45,463 --> 00:00:51,057
We'll say .Select r, lambda, r, open square brackets,

13
00:00:51,057 --> 00:00:54,290
Ranking.AsInt, and we'll also add the .Average.

14
00:00:54,290 --> 00:01:00,467
This will take all user's rankings and give us back an average rating.

15
00:01:00,467 --> 00:01:05,349
We will then return a new MovieRankResponse and map the MovieName to

16
00:01:05,349 --> 00:01:08,390
the movieName the user gave us in the request,

17
00:01:08,390 --> 00:01:11,601
and map OverallRanking to the overallMovieRanking that

18
00:01:11,601 --> 00:01:15,757
we worked out in the previous step.

19
00:01:15,757 --> 00:01:18,247
Inside our MovieRankingRepository class,

20
00:01:18,247 --> 00:01:22,602
we want to create a method with a return type of Task IEnumberable

21
00:01:22,602 --> 00:01:25,660
Document with a method name of GetMovieRank,

22
00:01:25,660 --> 00:01:29,368
and add in the movieName parameter.

23
00:01:29,368 --> 00:01:32,875
We will create a new query filter and say MovieName,

24
00:01:32,875 --> 00:01:37,449
this is the property in our MovieRank DynamoDB table.

25
00:01:37,449 --> 00:01:42,173
We'll say QueryOperator.Equal to the movieName that we

26
00:01:42,173 --> 00:01:45,898
passed in as our method's parameters.

27
00:01:45,898 --> 00:01:48,907
We will create a query operation config,

28
00:01:48,907 --> 00:01:51,526
as remember, this endpoint is using our secondary index,

29
00:01:51,526 --> 00:01:57,672
so we need to set our IndexName to be our secondary index name,

30
00:01:57,672 --> 00:01:58,180
MovieName-Index,

31
00:01:58,180 --> 00:02:02,472
and well set our query Filter that we set above

32
00:02:02,472 --> 00:02:04,709
inside our query operation config.

33
00:02:04,709 --> 00:02:08,634
Now we'll use our DynamoDB Query method,

34
00:02:08,634 --> 00:02:13,073
and pass in our config, and add the GetRemainingAsync method,

35
00:02:13,073 --> 00:02:21,000
allowing us to get all results back from DynamoDB. We'll add this method to our IMovieRankRepository interface.

