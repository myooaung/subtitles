1
00:00:00,000 --> 00:00:04,035
Now that we have our table set up,

2
00:00:04,035 --> 00:00:10,587
let's have a look around the DynamoDB service inside the AWS Management Console.

3
00:00:10,587 --> 00:00:13,109
If we start on the left-hand side and we select Dashboard,

4
00:00:13,109 --> 00:00:17,985
this is the main landing page that we will see when

5
00:00:17,985 --> 00:00:20,512
navigating to DynamoDB from the main page,

6
00:00:20,512 --> 00:00:23,651
providing we have a table set up.

7
00:00:23,651 --> 00:00:26,205
This page allows us to create more tables,

8
00:00:26,205 --> 00:00:30,903
it also shows us if we have any Recent alerts from the CloudWatch metrics.

9
00:00:30,903 --> 00:00:34,156
We'll be covering metrics shortly.

10
00:00:34,156 --> 00:00:36,048
We can also see what our Provisioned read and write

11
00:00:36,048 --> 00:00:40,053
capacity that we have set for our tables are.

12
00:00:40,053 --> 00:00:42,808
Let's talk about provision capacity a little more.

13
00:00:42,808 --> 00:00:49,937
DynamoDB allows you to set read and write capacity for your DynamoDB tables.

14
00:00:49,937 --> 00:00:52,929
Settings these will assign resources for your table.

15
00:00:52,929 --> 00:00:57,683
This ensures that the read and write requests to your table have enough

16
00:00:57,683 --> 00:01:02,669
provision resources to serve this amount of requests.

17
00:01:02,669 --> 00:01:06,416
The higher your throughput capacity, the higher the costs.

18
00:01:06,416 --> 00:01:11,366
One read capacity unit represents 1 strongly-consistent read per second,

19
00:01:11,366 --> 00:01:17,496
or 2 eventual consistent reads per second for items up to 4 KB in size.

20
00:01:17,496 --> 00:01:19,775
For anything larger than 4 KB,

21
00:01:19,775 --> 00:01:23,696
then DynamoDB will consume additional read capacity units.

22
00:01:23,696 --> 00:01:27,391
One write capacity unit represents 1 write per

23
00:01:27,391 --> 00:01:30,465
second for items up to 1 KB in size.

24
00:01:30,465 --> 00:01:35,865
Again, if you need to write items that are larger than 1 KB in size,

25
00:01:35,865 --> 00:01:42,652
then DynamoDB will consume additional write capacity units.

26
00:01:42,652 --> 00:01:44,372
Back in the AWS Management Console,

27
00:01:44,372 --> 00:01:49,718
we are able to set our read and write capacity by heading along to Tables,

28
00:01:49,718 --> 00:01:53,286
and selecting our table, MovieRank in our case.

29
00:01:53,286 --> 00:01:56,574
Then heading along to the Capacity tab,

30
00:01:56,574 --> 00:01:59,394
here we can set the Read and Write capacity units for

31
00:01:59,394 --> 00:02:03,379
both our table and our secondary index.

32
00:02:03,379 --> 00:02:06,298
DynamoDB also shows you an estimated cost associated

33
00:02:06,298 --> 00:02:08,691
with your set read and writes.

34
00:02:08,691 --> 00:02:15,610
For our demo application, let's set our Dynamo read and writes from 5 to 1,

35
00:02:15,610 --> 00:02:17,372
and hit Save.

36
00:02:17,372 --> 00:02:21,232
A good way to see what your read and write capacity is versus what your

37
00:02:21,232 --> 00:02:26,118
consumed read and writes are is by looking at the Metrics tab.

38
00:02:26,118 --> 00:02:29,535
If we head along to the Metrics tab,

39
00:02:29,535 --> 00:02:34,230
we can see both the Read and Write capacity graphs.

40
00:02:34,230 --> 00:02:36,264
Since we have only just created this table,

41
00:02:36,264 --> 00:02:40,331
and we haven't yet started using it, our consumed rate is at 0,

42
00:02:40,331 --> 00:02:43,747
but it would be represented as a blue line,

43
00:02:43,747 --> 00:02:46,785
whereas the red line is our provisioned amount.

44
00:02:46,785 --> 00:02:49,402
If we scroll down the Metrics page,

45
00:02:49,402 --> 00:02:53,656
we can see the Read and Write metrics for our secondary index as well.

46
00:02:53,656 --> 00:02:55,889
Scrolling down a bit further,

47
00:02:55,889 --> 00:03:00,014
we get Latency metrics letting us know what the request times are,

48
00:03:00,014 --> 00:03:05,326
and further down we can also see what the Scan and Query counts are.

49
00:03:05,326 --> 00:03:13,000
Another useful metric is the Errors metrics, where you're able to see if we have had any errors being returned.

