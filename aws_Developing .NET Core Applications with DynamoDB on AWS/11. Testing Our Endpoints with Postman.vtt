WEBVTT
1
00:00:02.408 --> 00:00:04.331
Like we did when we replaced the Object Persistence

2
00:00:04.331 --> 00:00:06.858
model code with the document model,

3
00:00:06.858 --> 00:00:11.216
we will test to make sure each of our endpoints are working as expected.

4
00:00:11.216 --> 00:00:14.714
I've started up our application and have Postman opened.

5
00:00:14.714 --> 00:00:19.018
When we added and tested our Object Persistence model,

6
00:00:19.018 --> 00:00:22.329
we created a MovieRank collection and saved each of these

7
00:00:22.329 --> 00:00:25.281
calls that we are making into this collection.

8
00:00:25.281 --> 00:00:28.921
So we can go through each of these to ensure that we

9
00:00:28.921 --> 00:00:31.255
get the expected results back.

10
00:00:31.255 --> 00:00:32.376
If we start at the top of our collection,

11
00:00:32.376 --> 00:00:36.450
we will load up the GetAllItemsFromDatabase and hit Send.

12
00:00:36.450 --> 00:00:42.854
That looks to be working correctly, let's try our GetMovie endpoint.

13
00:00:42.854 --> 00:00:47.934
Now our GetUsersRankedMoviesByMovieTitle,

14
00:00:47.934 --> 00:00:53.667
let's see if we can add a movie, a movie with the name We Want It All.

15
00:00:53.667 --> 00:00:56.747
Now we'll update the movie we have just added that

16
00:00:56.747 --> 00:01:00.219
have a ranking of 4 down from 7.

17
00:01:00.219 --> 00:01:04.607
And we'll test our overall ranking endpoint.

18
00:01:04.607 --> 00:01:07.588
We also added the ability to create and delete tables

19
00:01:07.588 --> 00:01:10.594
when using the DynamoDB low-level model,

20
00:01:10.594 --> 00:01:13.683
so let's test each of these out.

21
00:01:13.683 --> 00:01:16.368
We will change our Request method to be POST,

22
00:01:16.368 --> 00:01:19.227
and add in our localhost and port number,

23
00:01:19.227 --> 00:01:21.342
along with the route, setup/createTable.

24
00:01:21.342 --> 00:01:25.638
We'll add a TableName of SongRank.

25
00:01:25.638 --> 00:01:32.137
If we head over to AWS Console inside the DynamoDB service,

26
00:01:32.137 --> 00:01:35.926
we can see that our table has been created.

27
00:01:35.926 --> 00:01:39.136
Back inside Postman, let's now delete our table.

28
00:01:39.136 --> 00:01:41.384
We will change our Request method to be DELETE,

29
00:01:41.384 --> 00:01:45.977
and add our localhost and port number, along with the route,

30
00:01:45.977 --> 00:01:50.679
setup/deleteTable, and the TableName that we just created.

31
00:01:50.679 --> 00:01:54.237
If we head back into our AWS Management Console,

32
00:01:54.237 --> 00:01:59.349
we can see that the table has now been deleted.

33
00:01:59.349 --> 00:02:07.000
Everything looks to be working as expected. We have successfully replaced the document model code with the low-level model.

