WEBVTT
1
00:00:00.940 --> 00:00:04.370
We want to reuse the add movie code in a few of our tests.

2
00:00:04.370 --> 00:00:08.660
So, let's move this logic out into its own method so it makes it

3
00:00:08.660 --> 00:00:12.360
easy for us to call this method whenever we need to add a movie to

4
00:00:12.360 --> 00:00:15.140
our test before using another endpoint.

5
00:00:15.140 --> 00:00:17.830
If we create a method with a return type of

6
00:00:17.830 --> 00:00:22.070
TaskHttpResponseMessage and name our method

7
00:00:22.070 --> 00:00:28.540
AddMovieRankData, we will add an int testUserId parameter.

8
00:00:28.540 --> 00:00:31.930
Then, we'll copy our creation of the movieDb model,

9
00:00:31.930 --> 00:00:35.640
along with everything else but the assert, and paste it into this

10
00:00:35.640 --> 00:00:46.590
method. We'll return a PostAsync method call. Then inside our

11
00:00:46.590 --> 00:00:51.590
AddMovieRankDataReturnsOkStatus test, we will call off to the

12
00:00:51.590 --> 00:00:56.980
AddMovieRankData and pass in our userId. We want to capture the

13
00:00:56.980 --> 00:01:00.440
response, enter a variable named response.

14
00:01:00.440 --> 00:01:04.990
Let's run our test to make sure it's still passes.

15
00:01:04.990 --> 00:01:10.040
Let's carry on and create our second test.

16
00:01:10.040 --> 00:01:15.340
We now want to add a test for our GetAllItemsFromDatabase endpoint.

17
00:01:15.340 --> 00:01:18.670
We will add the Fact attribute and create a method named

18
00:01:18.670 --> 00:01:24.140
GetAllItemsFromDatabaseReturnsNotNullMovieResponse.

19
00:01:24.140 --> 00:01:29.740
We will add a constant for userId and set this to userId 2.

20
00:01:29.740 --> 00:01:36.140
We call off to our AddMovieRankData method, passing in the userId of 2. We

21
00:01:36.140 --> 00:01:40.140
will use our test context and call the GetAsync method.

22
00:01:40.140 --> 00:01:44.440
We will call off to the GetAllItemsFromDatabase endpoint.

23
00:01:44.440 --> 00:01:48.940
The response that we get back from this endpoint will be in JSON format,

24
00:01:48.940 --> 00:01:55.540
so we want to read the JSON and deserialize it into our MovieResponse contract.

25
00:01:55.540 --> 00:01:59.440
We will add a local variable of MovieResponse.

26
00:01:59.440 --> 00:02:01.920
We will add square brackets, as the results that we

27
00:02:01.920 --> 00:02:04.540
get back will be a collection.

28
00:02:04.540 --> 00:02:08.850
We will be wrapping our deserialize call inside a using statement,

29
00:02:08.850 --> 00:02:14.140
as the calls we're about to make implement the IDisposable interface.

30
00:02:14.140 --> 00:02:18.050
Whenever a method inside a class implements IDisposable,

31
00:02:18.050 --> 00:02:21.750
you should wrap these calls within a using statement, allowing

32
00:02:21.750 --> 00:02:25.160
proper disposal of the object after the completion of the call.

33
00:02:25.160 --> 00:02:30.360
We want to read the content from our response and store it inside

34
00:02:30.360 --> 00:02:32.740
a variable named Content.

35
00:02:32.740 --> 00:02:34.470
Inside our using statement,

36
00:02:34.470 --> 00:02:38.760
we will use JsonConvert.DeserializedObject and add

37
00:02:38.760 --> 00:02:42.040
MovieResponse, then add content.

38
00:02:42.040 --> 00:02:46.100
This will deserialize our object into a MovieResponse contract

39
00:02:46.100 --> 00:02:49.440
and save it to the result's local variable.

40
00:02:49.440 --> 00:02:54.540
We add an assert. You can assert on anything you think is worthwhile here.

41
00:02:54.540 --> 00:02:58.040
We are going to assert that the results are not null.

42
00:02:58.040 --> 00:03:02.440
You might want to add more asserts or more tests for this endpoint that tests

43
00:03:02.440 --> 00:03:06.340
specific things, such as the correct properties are returned,

44
00:03:06.340 --> 00:03:09.740
or that you are, in fact, returned a list of items.

45
00:03:09.740 --> 00:03:13.440
I want to keep these tests simple for demonstration purposes.

46
00:03:13.440 --> 00:03:17.140
I want to make it clear, though, that if you are adding tests like these,

47
00:03:17.140 --> 00:03:19.570
then you want to make sure that you are testing the

48
00:03:19.570 --> 00:03:23.140
application thoroughly and testing the right things.

49
00:03:23.140 --> 00:03:31.000
Let's run both of our tests and make sure they both pass. Great! We now have two passing tests.

