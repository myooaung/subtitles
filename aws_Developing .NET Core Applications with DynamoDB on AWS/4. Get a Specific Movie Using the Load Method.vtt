WEBVTT
1
00:00:02.432 --> 00:00:05.705
Now that we're able to grab all movies based on the scan function,

2
00:00:05.705 --> 00:00:10.332
we want to be able to grab a movie back based on the partition key,

3
00:00:10.332 --> 00:00:13.205
userId, and the sort key MovieName.

4
00:00:13.205 --> 00:00:17.352
We'll be using DynamoDB's LoadAsync method.

5
00:00:17.352 --> 00:00:22.497
This is basically a get function from DynamoDB's Object Persistent model.

6
00:00:22.497 --> 00:00:25.601
The LoadAsync requires us to pass in the partition,

7
00:00:25.601 --> 00:00:28.893
and if we have one, a sort key as well.

8
00:00:28.893 --> 00:00:32.549
Let's create a method inside our Controller class.

9
00:00:32.549 --> 00:00:37.982
We'll add the HttpGet decorator, and we'll also add a route.

10
00:00:37.982 --> 00:00:44.545
We'll pass in curly braces UserId/ curly braces, movieName.

11
00:00:44.545 --> 00:00:48.830
Along with the route that we have set up at the top of our Controller class,

12
00:00:48.830 --> 00:00:52.289
we'll also be required to pass in a UserId and MovieName when

13
00:00:52.289 --> 00:00:56.859
we call off to this method inside Postman.

14
00:00:56.859 --> 00:01:00.344
We will create a method with a return type of Task MovieResponse,

15
00:01:00.344 --> 00:01:06.516
a method name of GetMovie, and our method will have two parameters,

16
00:01:06.516 --> 00:01:09.910
userId and movieName.

17
00:01:09.910 --> 00:01:12.995
Inside our method, we want to create a variable named result,

18
00:01:12.995 --> 00:01:18.516
and call off to a method inside our movieRankService class called GetMovie.

19
00:01:18.516 --> 00:01:23.735
We'll also pass the UserId and movieName through as well,

20
00:01:23.735 --> 00:01:27.343
and we want to return the results back to our user.

21
00:01:27.343 --> 00:01:34.203
Heading over to our MovieRankService class, we want to create a method.

22
00:01:34.203 --> 00:01:40.282
The return type will be Task MovieResponse, with a method name of GetMovie.

23
00:01:40.282 --> 00:01:44.021
We'll accept two parameters, UserId and movieName.

24
00:01:44.021 --> 00:01:47.494
Inside our method, we want to create a variable named response,

25
00:01:47.494 --> 00:01:52.971
and call off to our Repository class to a method named GetMovie.

26
00:01:52.971 --> 00:01:56.864
We also want to pass through the UserId and movieName.

27
00:01:56.864 --> 00:01:59.734
We want to map the results that we get back from DynamoDB.

28
00:01:59.734 --> 00:02:01.751
So we'll say return,

29
00:02:01.751 --> 00:02:06.211
and call off to our mapper that we created to map our MovieDb

30
00:02:06.211 --> 00:02:10.237
object into our MovieResponse contract.

31
00:02:10.237 --> 00:02:15.146
We also need to make sure that we've added this method to our interface.

32
00:02:15.146 --> 00:02:17.104
Inside our MovieRankRepository,

33
00:02:17.104 --> 00:02:21.505
we will create a method with a return type of Task MovieDb,

34
00:02:21.505 --> 00:02:25.307
and name this method GetMovie.

35
00:02:25.307 --> 00:02:28.924
This method will take two parameters, UserId and movieName,

36
00:02:28.924 --> 00:02:33.602
and using our DynamoDB context that we created earlier,

37
00:02:33.602 --> 00:02:38.761
we'll call off to the LoadAsync method with a type argument of MovieDb.

38
00:02:38.761 --> 00:02:43.533
The LoadAsync method is from DynamoDB SDK.

39
00:02:43.533 --> 00:02:45.761
This is part of the Object Persistent model.

40
00:02:45.761 --> 00:02:48.313
The LoadAsync command is a get command.

41
00:02:48.313 --> 00:02:52.735
This is a lot less expensive than the scan function that we used earlier,

42
00:02:52.735 --> 00:02:58.559
as it uses your partition and sort key to locate the items that we are after.

43
00:02:58.559 --> 00:03:02.817
However, the load or get command requires us to pass in a partition,

44
00:03:02.817 --> 00:03:06.325
and if we have one set, a sort key as well.

45
00:03:06.325 --> 00:03:09.046
So this can be quite limited to what you can search for.

46
00:03:09.046 --> 00:03:14.689
We will also pass in our UserId and movieName parameter arguments.

47
00:03:14.689 --> 00:03:17.742
We need to add our newly-created method to our interface,

48
00:03:17.742 --> 00:03:24.984
so we'll add that now inside our IMovieRankRepository interface.

49
00:03:24.984 --> 00:03:29.144
We now want to save our application and also build it.

50
00:03:29.144 --> 00:03:31.702
Let's run our application.

51
00:03:31.702 --> 00:03:32.366
Inside of Postman,

52
00:03:32.366 --> 00:03:35.998
we are going to use our localhost and the port that we grabbed earlier,

53
00:03:35.998 --> 00:03:40.488
and we're also going to add movies, and the userId of 1,

54
00:03:40.488 --> 00:03:43.195
and the movie name Fallen Name.

55
00:03:43.195 --> 00:03:47.583
This assumes that you already have movies loaded up inside your MovieRank table.

56
00:03:47.583 --> 00:03:52.464
Remember, we added some demo data in an earlier module.

57
00:03:52.464 --> 00:04:02.000
Hit Send, and we are returned back results based on our UserId and movieName. We're also going to save this to our collection as well.

