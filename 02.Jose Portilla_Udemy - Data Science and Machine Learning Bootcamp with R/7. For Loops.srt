1

00:00:00,560  -->  00:00:06,030
Hello everyone and welcome to the lecture on four loops for loops will allow us to iterate over an object

2

00:00:06,100  -->  00:00:09,940
to perform and execute blocks of codes for every loop we go through.

3

00:00:10,260  -->  00:00:13,100
Let's go ahead and jump to our studio and see how they work.

4

00:00:13,620  -->  00:00:13,910
All right.

5

00:00:13,920  -->  00:00:15,470
So here we are our studio.

6

00:00:15,720  -->  00:00:20,430
And in order to show what a for loop syntax looks like in case you're already familiar of programming

7

00:00:20,960  -->  00:00:23,600
I'm going to go ahead and create a vector real quick.

8

00:00:23,700  -->  00:00:27,930
Keep in mind this is just for people that are already familiar for the for loop is adjusting the syntax

9

00:00:28,160  -->  00:00:30,530
will break down how to construct a for loop.

10

00:00:30,600  -->  00:00:33,250
No more basic manner right after this.

11

00:00:33,360  -->  00:00:36,830
So the syntax is for.

12

00:00:37,830  -->  00:00:42,640
And then if you just go ahead and click tab and enter you should see our studio complete it for you

13

00:00:42,650  -->  00:00:42,700
.

14

00:00:42,720  -->  00:00:48,190
So you can say for variable in vector and then you'll go ahead and have your curly brackets and execute

15

00:00:48,190  -->  00:00:49,760
some block of code.

16

00:00:49,800  -->  00:00:55,950
So for example if we just call this vector the sun sets one already looking for we say for variable

17

00:00:55,960  -->  00:01:06,180
in v we'll go ahead and just say grants that variable you shouldn't usually call variables just the

18

00:01:06,180  -->  00:01:11,580
straight term variable but this is for demonstration purposes and there when you run the source you

19

00:01:11,580  -->  00:01:16,770
see 1 2 and 3 that's all there is for the syntax of a for loop in our.

20

00:01:16,950  -->  00:01:21,000
Now for those of you who are new to programming Let's go ahead and break this down and see how to create

21

00:01:21,000  -->  00:01:22,380
this.

22

00:01:22,710  -->  00:01:23,150
All right.

23

00:01:23,220  -->  00:01:24,570
So what is a for loop.

24

00:01:24,570  -->  00:01:27,410
A for loop again allows us to iterate over an object.

25

00:01:27,480  -->  00:01:32,520
In this case which is a vector and then we can perform an execute blocks of code for every loop we go

26

00:01:32,520  -->  00:01:33,990
through.

27

00:01:33,990  -->  00:01:36,990
So let's go ahead and show a simple example with a vector.

28

00:01:36,990  -->  00:01:39,050
Here we have a vector one two three.

29

00:01:39,120  -->  00:01:46,010
Let's go ahead and add a few more elements to it for five and I'm going to say four.

30

00:01:46,290  -->  00:01:51,810
And in parentheses The syntax is going to be some temporary variable name or some variable name you

31

00:01:51,810  -->  00:01:52,320
create.

32

00:01:52,410  -->  00:01:57,190
So I'm going to go ahead and say TNP Diyar.

33

00:01:57,450  -->  00:02:05,130
So for TNP that V.R. and then you have a keyword in and then whatever the object you're iterating over

34

00:02:05,130  -->  00:02:05,320
.

35

00:02:05,340  -->  00:02:08,590
For example the which is a vector that we just created.

36

00:02:08,610  -->  00:02:13,680
You're going to have some curly brackets and then inside these curly brackets you're going to execute

37

00:02:14,550  -->  00:02:16,150
some code.

38

00:02:16,800  -->  00:02:21,810
But what's different about a for loop vs a while loop is that you're going to execute this code for

39

00:02:21,900  -->  00:02:24,510
every temporary variable annuity.

40

00:02:24,690  -->  00:02:30,180
So for every temp the are in the end what you mean by temp.

41

00:02:30,290  -->  00:02:34,830
The are some temporary variable name that's just going to be the variable name and you can make this

42

00:02:34,830  -->  00:02:35,320
up.

43

00:02:35,340  -->  00:02:41,070
Doesn't have to be temped up V.R. and it's going to be every variable inside of this iterable object

44

00:02:41,100  -->  00:02:43,860
which in this case is that vector b.

45

00:02:43,920  -->  00:02:50,300
So we could do a say print like we should earlier the temporary variable.

46

00:02:50,310  -->  00:02:56,070
So if I go ahead and run this source I get one two three four five.

47

00:02:56,130  -->  00:03:01,540
So for example if I also just say a print statement so prints hello.

48

00:03:01,890  -->  00:03:05,190
Even though this doesn't have anything to do with the temporary variable.

49

00:03:05,190  -->  00:03:11,250
This lock of code inside this curly brackets is going to execute every single variable inside of this

50

00:03:11,430  -->  00:03:12,010
object.

51

00:03:12,060  -->  00:03:12,450
The.

52

00:03:12,480  -->  00:03:13,590
Which is a vector.

53

00:03:13,590  -->  00:03:16,910
So we should see prints hello five times.

54

00:03:17,030  -->  00:03:23,420
Now if I go ahead and run the source I see 5 Hello's here and that's really all there is.

55

00:03:23,460  -->  00:03:26,680
As far as for loops go that's the basic idea of a for loop.

56

00:03:26,820  -->  00:03:31,660
You say for an imprint sees some variable name that you choose.

57

00:03:31,800  -->  00:03:36,090
The keyword in in the object you're iterating through an in curly brackets.

58

00:03:36,090  -->  00:03:41,190
You go ahead and execute some code for every single variable in that object.

59

00:03:41,250  -->  00:03:46,110
So usually throughout this block of code you're probably going to be using the temporary variable in

60

00:03:46,110  -->  00:03:48,580
some way or in some manner.

61

00:03:48,630  -->  00:03:53,450
Let's go ahead and show another example of how we could do this.

62

00:03:53,610  -->  00:03:58,730
We could say something like this will have a result.

63

00:03:58,800  -->  00:04:06,270
Objects Nells say that's equal to the R plus one.

64

00:04:06,270  -->  00:04:12,060
Now we're going to have to print statements or prints the VR.

65

00:04:12,110  -->  00:04:13,110
What's the temp.

66

00:04:13,210  -->  00:04:21,070
The are plus 1 is equal to colon and then right below.

67

00:04:21,090  -->  00:04:24,320
I'm just going to go in and prints that result.

68

00:04:24,910  -->  00:04:27,820
So let's go in and see what we have here.

69

00:04:28,260  -->  00:04:34,340
So I'm running the source and I get the temp var plus one is equal to 2 then to 3 to 4 to 5 to 6.

70

00:04:34,530  -->  00:04:36,360
So it's actually going on for a loop.

71

00:04:36,450  -->  00:04:42,100
I'm saying for each of these variable are these temporary V.R. variables in this vector v.

72

00:04:42,330  -->  00:04:46,180
I'm assigning results to tempt V.R. plus one.

73

00:04:46,290  -->  00:04:54,240
I print the line and then I print that result and this executes for every single element in that vector

74

00:04:54,240  -->  00:04:54,800
.

75

00:04:54,890  -->  00:04:59,610
It can use for loops for not just vectors which can be used for loops for a list or a Matrix or other

76

00:04:59,610  -->  00:05:00,010
objects.

77

00:05:00,030  -->  00:05:05,010
Well let's go to an example of a list with a for loop.

78

00:05:05,010  -->  00:05:08,930
Now can I just show that easily by just saying list here.

79

00:05:08,970  -->  00:05:18,050
So here's a list of let's say we'll put in a vector one to three in our list.

80

00:05:18,210  -->  00:05:19,380
We'll put in a data frame.

81

00:05:19,380  -->  00:05:22,810
Let's go out and say empty cars on our list.

82

00:05:22,950  -->  00:05:25,730
Al put in just the number 12 on our list.

83

00:05:28,300  -->  00:05:33,240
We'll call this my list now.

84

00:05:33,260  -->  00:05:41,120
Now I can just say let's say for item in my list and in curly brackets I'm just going to go ahead and

85

00:05:41,120  -->  00:05:42,880
print the item.

86

00:05:42,930  -->  00:05:46,910
So if I run the source here scroll all the way up.

87

00:05:46,940  -->  00:05:51,230
You'll notice we get one to three which was that first vector that gets printed.

88

00:05:51,440  -->  00:05:56,130
Then we print an entire data frame over here and then all the way at the end we print the single integer

89

00:05:56,240  -->  00:05:57,190
12.

90

00:05:57,310  -->  00:06:03,030
The key thing to note here is that this variable name that you choose as you iterate through this object

91

00:06:03,360  -->  00:06:04,560
is totally up to you.

92

00:06:04,620  -->  00:06:08,150
So you're really going to want to take advantage of this and name it's something that makes sense to

93

00:06:08,150  -->  00:06:10,490
you.

94

00:06:10,500  -->  00:06:15,190
Now let's go ahead and show an example of using a for loop with the Matrix.

95

00:06:15,260  -->  00:06:17,510
I'm going to go ahead and delete this.

96

00:06:17,550  -->  00:06:29,490
Say M-80 or matrix call my matrix function pass in one call and 25 a label number of rows equal to 5

97

00:06:29,500  -->  00:06:31,310
in that matrix.

98

00:06:31,310  -->  00:06:33,960
Let's go ahead and just see with that matrix looks like real quick.

99

00:06:34,400  -->  00:06:40,220
So going to good in WIPs need to save Prince Max.

100

00:06:41,030  -->  00:06:42,750
And here is what my matrix looks like.

101

00:06:42,750  -->  00:06:45,500
Just one two three four five and it's filled out by columns.

102

00:06:45,500  -->  00:06:49,460
They go in and clear out the consul and see what we can do with this.

103

00:06:49,460  -->  00:06:51,920
So instead of just print to them I'm going to iterate through it.

104

00:06:51,930  -->  00:06:53,190
So we're going to say four.

105

00:06:53,570  -->  00:06:59,240
Let's just go ahead and say for numb in mats and all I'm going to do is print that numb to it it looks

106

00:06:59,250  -->  00:07:03,780
like I should just get a single stream of all those numbers in that matrix printed out.

107

00:07:04,040  -->  00:07:06,640
So again my matrix looks like this.

108

00:07:07,480  -->  00:07:13,460
And what I'm going to do is go ahead and run this source and notice I just get a single stream of that

109

00:07:13,460  -->  00:07:18,350
printed out for all those elements in that matrix.

110

00:07:18,480  -->  00:07:22,760
So it's important to note here is that for the matrix what it's going to do when you iterate through

111

00:07:22,760  -->  00:07:26,910
this matrix it's going to go by columns is going to the first column then the second column then the

112

00:07:26,900  -->  00:07:34,340
third caudal column etc. that's where we get 1 2 3 4 5 6 instead of 1 6 11 16 21.

113

00:07:34,380  -->  00:07:37,790
So it's going to iterate through the columns first.

114

00:07:37,790  -->  00:07:38,240
OK.

115

00:07:38,330  -->  00:07:43,800
Now let's briefly discuss nested for loops so you can actually nest for loops inside of one another

116

00:07:45,780  -->  00:07:47,300
and I'll show you an example of that.

117

00:07:47,330  -->  00:07:48,540
Let me go to delete this.

118

00:07:48,560  -->  00:07:51,440
Prince NUMP statement and a set of that statement.

119

00:07:51,480  -->  00:07:57,110
I'm going to create another for loop in and you'll notice that our studio kind of says 4 and then highlights

120

00:07:57,140  -->  00:07:57,790
for you.

121

00:07:57,890  -->  00:08:03,800
You go ahead and just click that will automatically fill in the default values for a for loop some variable

122

00:08:03,870  -->  00:08:04,970
in a vector.

123

00:08:05,030  -->  00:08:16,190
This case I'm also going to say just fill in there for a little bit and I'm going to say C L loops.

124

00:08:17,380  -->  00:08:24,380
OK so we're going to do here is iterate with a nested for loop and I'll show you an example of how we

125

00:08:24,380  -->  00:08:26,000
can do this.

126

00:08:26,010  -->  00:08:37,800
Now let's say for row in and I'm actually going to make a vector one column and row math.

127

00:08:38,510  -->  00:08:42,740
So what does this actually stand for this and colon and romance.

128

00:08:43,080  -->  00:08:48,630
Well if I put it into the con. You go in and clear the console and just put this in one colon and romance

129

00:08:48,630  -->  00:08:48,810
.

130

00:08:49,040  -->  00:08:51,230
That's just a vector of one.

131

00:08:51,260  -->  00:08:54,590
All the way to the number of rows of that matrix.

132

00:08:54,730  -->  00:08:59,530
So and Rahmat is just five scissors five rows in that matrix.

133

00:08:59,540  -->  00:09:05,850
If I do one call and five I get this sequence of integers so that's all this line is doing just give

134

00:09:05,850  -->  00:09:07,420
me the number of rows.

135

00:09:07,740  -->  00:09:12,710
So I'm saying for row 1 and row that then I'm going to say for a call.

136

00:09:12,700  -->  00:09:18,500
And similarly one colon and see a well of Matt.

137

00:09:18,600  -->  00:09:23,450
Now I need to add that second set of parentheses the right balance everything.

138

00:09:23,750  -->  00:09:30,720
What I'm going to go ahead and do is put a print statement here and I'll add in a paste.

139

00:09:32,750  -->  00:09:37,850
And in this case I'm going to put in a string that says the elements row

140

00:09:40,830  -->  00:09:47,070
and then I'm going to go ahead and put in row since that's what the temporary variable here is.

141

00:09:47,580  -->  00:09:58,210
And then I'll say and call Khama see well put is comma.

142

00:09:58,590  -->  00:10:01,420
And then finally I'm going to call that object off match.

143

00:10:01,460  -->  00:10:03,930
So say RHO comma see.

144

00:10:03,960  -->  00:10:06,720
Well let's go ahead and run this mixture.

145

00:10:06,720  -->  00:10:09,490
We put everything in correctly and then break it down.

146

00:10:10,160  -->  00:10:12,420
So for I the source knows what happens here.

147

00:10:12,410  -->  00:10:20,190
I say the elements at row 1 column one is one the elements at row 1 column 2 is six in a row 1 column

148

00:10:20,210  -->  00:10:22,940
3 is 11 etc. etc..

149

00:10:22,970  -->  00:10:25,460
And if we take a look at our map again one more time.

150

00:10:25,520  -->  00:10:27,430
Sure matrix.

151

00:10:28,910  -->  00:10:30,100
Let's go ahead and check out.

152

00:10:30,360  -->  00:10:34,040
Let's say this one the El-Amir row 5 and column for is 20.

153

00:10:34,050  -->  00:10:36,950
So the element at row 5 and column 4.

154

00:10:37,050  -->  00:10:37,620
That's correct.

155

00:10:37,620  -->  00:10:38,760
It is 20.

156

00:10:38,780  -->  00:10:42,920
So it does for a loop actually doing well if we look at Rho.

157

00:10:42,920  -->  00:10:45,270
It says For row in 1 through 5.

158

00:10:45,260  -->  00:10:47,640
So it's basically just the numbers 1 through five.

159

00:10:47,750  -->  00:10:50,300
And then we have a nested for loop inside of it as well.

160

00:10:50,320  -->  00:10:56,540
Let's say for a call in number of columns which in this case it's the square matrix was also five and

161

00:10:56,550  -->  00:11:01,740
say so were actually saying here is four row in the number of rows in the Matrix.

162

00:11:01,760  -->  00:11:05,340
And then for column from one to the number of columns that matrix.

163

00:11:05,510  -->  00:11:10,890
Go ahead and imprints this Pace's statement where we said the element that row number and the column

164

00:11:10,990  -->  00:11:13,000
at that column number is equal to.

165

00:11:13,130  -->  00:11:18,560
And then we're just using these temporary variables row column a column in order to actually call that

166

00:11:18,570  -->  00:11:20,990
particular value here.

167

00:11:21,000  -->  00:11:26,200
So in this case we can actually add some more print statements if we wanted to to get a clear right

168

00:11:26,340  -->  00:11:27,570
understanding of what's going on.

169

00:11:27,570  -->  00:11:40,490
So we can say something like this current paste the selected row is and then we could just put in row

170

00:11:40,500  -->  00:11:41,030
like that.

171

00:11:41,030  -->  00:11:44,280
So if we go ahead and run this well say the selected rows 5.

172

00:11:44,300  -->  00:11:49,230
And notice how it keeps saying 5 for every column in that matrix.

173

00:11:49,250  -->  00:11:54,190
And likewise I'll say for row four for recall them in the matrix row three for column matrix etc..

174

00:11:54,200  -->  00:11:58,920
So each of those numbers will show up essentially five times as far as this particular print statement

175

00:11:58,910  -->  00:12:01,700
the selected row is all right.

176

00:12:01,940  -->  00:12:06,390
So go ahead and review the notes and review this code in case it's still unclear for you.

177

00:12:06,380  -->  00:12:10,280
But this pretty basic example of a nested for loop should look like.

178

00:12:10,760  -->  00:12:12,110
That's it for for loops.

179

00:12:12,120  -->  00:12:17,720
Again just a quick review of what a for loop is a for loop allows you to iterate over an object such

180

00:12:17,720  -->  00:12:23,250
as a vector into the most basic case and then you can perform and execute blocks of codes for every

181

00:12:23,250  -->  00:12:25,190
loop that you go through.

182

00:12:25,190  -->  00:12:28,010
All right thanks everyone and I'll see you at the next lecture
