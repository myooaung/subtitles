1

00:00:00,750  -->  00:00:03,420
This video it's continued from part one.

2

00:00:03,450  -->  00:00:10,620
Next one up we want to learn about is select going to go ahead and clear this data frame so often you

3

00:00:10,620  -->  00:00:15,180
want to work with large data sets that have a lot of columns like the ones we're working with but only

4

00:00:15,180  -->  00:00:19,980
a few of the columns are actually interesting to you at a certain period of your analysis.

5

00:00:20,010  -->  00:00:25,680
The select function allows you to quickly zoom in on a useful subset using operations that will usually

6

00:00:25,680  -->  00:00:28,190
only work for numeric variable positions.

7

00:00:28,200  -->  00:00:34,140
So for example I'm going to pass and heads only get the first six rows.

8

00:00:34,140  -->  00:00:42,120
I'm going to go ahead and say select you passing your data and then just pass in the column you want

9

00:00:42,120  -->  00:00:42,180
.

10

00:00:42,180  -->  00:00:49,500
So for instance I want to just select carrier and there is the first four six rows of my carrier column

11

00:00:49,500  -->  00:00:50,420
.

12

00:00:50,510  -->  00:00:52,250
So I want to do this with more than one column.

13

00:00:52,260  -->  00:00:56,920
I could just continue adding those in as additional parameters in that select function.

14

00:00:57,090  -->  00:01:03,310
So we can say select the carrier column and the arrival time column.

15

00:01:04,200  -->  00:01:08,180
And there you have it you can also keep adding columns as you wish.

16

00:01:08,220  -->  00:01:09,970
Please.

17

00:01:11,080  -->  00:01:11,640
OK.

18

00:01:11,790  -->  00:01:13,460
So that's it for the select.

19

00:01:13,560  -->  00:01:18,870
It's just an easier way to quickly grab your data and then just in the columns you want to select from

20

00:01:18,870  -->  00:01:19,350
it.

21

00:01:19,500  -->  00:01:26,610
Moving on we have the rename function the rename function allows us to quickly rename columns.

22

00:01:26,610  -->  00:01:29,670
So for example note and clear this.

23

00:01:29,670  -->  00:01:36,890
Let's say I want to rename that Harrier column to airline carrier just so it's a little more clear.

24

00:01:37,020  -->  00:01:44,250
I'll go ahead and just ask for the head we pasand the rename function first argument for pretty much

25

00:01:44,280  -->  00:01:45,850
all of these functions that we've been working with.

26

00:01:45,870  -->  00:01:46,960
Is your data.

27

00:01:47,130  -->  00:01:51,790
And then the syntax is the new column name you want.

28

00:01:51,810  -->  00:01:59,970
So for instance I want airline carrier to be in my new column name equals and then your old column name

29

00:01:59,970  -->  00:02:00,500
.

30

00:02:00,660  -->  00:02:03,670
In this case the original column was called carrier.

31

00:02:03,900  -->  00:02:10,860
So all rename does is you pass in your data and then as parameters are functions arguments into this

32

00:02:10,860  -->  00:02:17,570
rename function you in the new column name you want equal to the old column name.

33

00:02:17,580  -->  00:02:20,060
And if I go ahead and check this out.

34

00:02:20,550  -->  00:02:29,010
Notice we get airline carrier as the new column name and carrier is no longer showed here and that's

35

00:02:29,010  -->  00:02:33,480
it for the basics of renaming a column using renamed function.

36

00:02:33,480  -->  00:02:38,780
Now let's talk about the state which is another really useful function with the player.

37

00:02:39,000  -->  00:02:46,710
So the distinct function is going to allow us to select the distinct values or unique values in a column

38

00:02:46,770  -->  00:02:48,310
or table.

39

00:02:48,390  -->  00:02:52,950
So I'm going to go ahead and just say distinct in this case I don't actually have to call ahead since

40

00:02:52,950  -->  00:02:57,590
I'm not going to get a huge number back so I'm just asking for distinct.

41

00:02:57,720  -->  00:03:05,780
And then we'll go ahead and say let's just get the distinct carriers in our flights dataset.

42

00:03:06,210  -->  00:03:14,670
So say flights here and there we have it we have the 16 distinct airlines.

43

00:03:14,760  -->  00:03:16,480
So what is actually going on here.

44

00:03:16,710  -->  00:03:22,980
Well first I say select flights carrier and if you remember back to how the select function works for

45

00:03:22,980  -->  00:03:28,950
the plier you passing your data first and then the actual column you want to select or list of columns

46

00:03:28,950  -->  00:03:30,080
you want to select.

47

00:03:30,150  -->  00:03:37,410
So this internal command is just the same thing as saying flights dollar sign carrier and then passing

48

00:03:37,410  -->  00:03:44,550
that into distinct were returned the unique values in the results which is this case all the unique

49

00:03:44,580  -->  00:03:46,020
airline names.

50

00:03:46,020  -->  00:03:48,870
And that's a really useful way to use distinct.

51

00:03:48,870  -->  00:03:54,420
So it's really common to use distinct along with some select function in order to grab all sync values

52

00:03:54,420  -->  00:03:57,000
of a particular column.

53

00:03:57,000  -->  00:03:58,560
All right so we learned about distinct.

54

00:03:58,560  -->  00:04:01,000
Now let's learn about mutate.

55

00:04:01,680  -->  00:04:07,710
So besides selecting sets of existing columns it's often useful to add new columns that are functions

56

00:04:07,710  -->  00:04:13,660
of existing columns and this is where the job of mutate comes into play.

57

00:04:13,890  -->  00:04:16,690
So you pass in mutates again.

58

00:04:16,680  -->  00:04:19,350
First argument is always the data you're working with.

59

00:04:19,740  -->  00:04:27,180
And then what you go ahead and do is say new call or whatever your new column name sort of like when

60

00:04:27,180  -->  00:04:28,910
you were using the rename function.

61

00:04:29,100  -->  00:04:35,400
But in this case instead of just passing a single column like we didn't rename with mutate you can actually

62

00:04:35,700  -->  00:04:38,850
make a new column that's a function of existing columns.

63

00:04:38,850  -->  00:04:45,870
So for example let's say I wanted to create this new column that was equal to the arrival.

64

00:04:45,970  -->  00:04:56,990
Whoops delay minus the the partridge Dilley So if muet say I can actually pass in these sort of functions

65

00:04:57,010  -->  00:05:02,600
of the existing columns and assign them to a new column and I'm going to going to go ahead or just call

66

00:05:02,710  -->  00:05:11,880
head of this so we don't get a huge output and notice all the way over here I get new column.

67

00:05:12,310  -->  00:05:19,150
Great and this new column is going to be the resulting of a rival delay column minus departure delay

68

00:05:19,160  -->  00:05:19,470
.

69

00:05:19,780  -->  00:05:25,730
So this is kind of a nice quick way to create new columns that are not just renamed versions of old

70

00:05:25,720  -->  00:05:31,180
columns but are actually built off with some sort of formula of the old columns in your data frame.

71

00:05:31,330  -->  00:05:36,670
So we could have also done something like Time's departure delay even though it doesn't really make

72

00:05:36,680  -->  00:05:37,080
sense.

73

00:05:37,090  -->  00:05:44,210
But you still can create new columns that way and this mutate function is related to the transmit function

74

00:05:44,200  -->  00:05:44,770
.

75

00:05:44,890  -->  00:05:50,440
If you only want the new columns that you created back you just use transmutes instead of mutate.

76

00:05:50,470  -->  00:05:54,190
So for example we just go ahead and copy paste this.

77

00:05:54,190  -->  00:05:59,380
If I only want this new column back instead of calling me I'd say you call transmute

78

00:06:02,000  -->  00:06:05,200
trans mute.

79

00:06:06,640  -->  00:06:09,850
And there are the first six rows of that new column.

80

00:06:09,860  -->  00:06:15,730
Again the only difference here being mutate will return the entire data frame along with that new column

81

00:06:15,740  -->  00:06:20,480
you created and transmute will only return the new column you created.

82

00:06:20,530  -->  00:06:24,940
So they're related and the same functionality on what happens inside the function.

83

00:06:24,940  -->  00:06:27,860
They just differ in what you actually get in return.

84

00:06:28,510  -->  00:06:31,030
OK we just have a few functions left to talk about.

85

00:06:31,030  -->  00:06:33,890
Summarize sample and sample frac.

86

00:06:34,120  -->  00:06:37,390
It's good and clear the cons. And quickly discuss those.

87

00:06:37,390  -->  00:06:42,850
So summarize allows us to quickly collapse data frames into single rows using some sort of function

88

00:06:42,860  -->  00:06:44,610
that aggregates a result.

89

00:06:44,650  -->  00:06:50,860
This is really similar to the built in aggregate function in our or something like a group by statements

90

00:06:51,040  -->  00:06:54,390
in a sequel like language.

91

00:06:54,400  -->  00:07:01,810
So for instance we can say summarize past and the data we want comma and the name of your new column

92

00:07:01,810  -->  00:07:01,940
.

93

00:07:02,020  -->  00:07:07,820
I'm going to go in and say average air time I'll say equals two.

94

00:07:07,850  -->  00:07:10,860
And then I need some sort of aggregate function.

95

00:07:10,880  -->  00:07:17,330
So for instance I can take mean which is the average and I'll go ahead and pass in the airtime column

96

00:07:17,320  -->  00:07:25,860
that's already existed in my data frame and I'll add one more argument and a dot r m equals true.

97

00:07:25,940  -->  00:07:32,450
And that's an argument for the mean function which is built into our in order to just remove any values

98

00:07:32,440  -->  00:07:32,890
.

99

00:07:32,890  -->  00:07:37,390
Since in my data frame not every single row has a value for every time.

100

00:07:37,510  -->  00:07:41,300
So if I say any that remove it will just go ahead and remove those values.

101

00:07:41,380  -->  00:07:46,010
But that's part of the mean function not to summarize function.

102

00:07:46,000  -->  00:07:51,640
So if I go in and show this we get one Roback And that's basically how summerize works.

103

00:07:51,640  -->  00:07:57,370
It should be some sort of group by function or some sort of aggregate function that allows us to get

104

00:07:57,380  -->  00:08:04,330
our data passed in the column we want back as the new name and then some sort of aggregate function

105

00:08:04,330  -->  00:08:04,490
.

106

00:08:04,510  -->  00:08:09,270
So we could then say something like lips.

107

00:08:09,380  -->  00:08:13,450
Let's say we wanted total air time by all the flights.

108

00:08:13,730  -->  00:08:23,890
We could then say something like total underscore time is equal to some of the air time column and that's

109

00:08:23,890  -->  00:08:25,370
the total time spent in the air.

110

00:08:25,370  -->  00:08:30,190
But all these planes again you should only really be getting one row back when you're using summerize

111

00:08:30,250  -->  00:08:32,990
because it's an aggregate of all the data.

112

00:08:33,320  -->  00:08:36,280
You're quickly collapsing that data.

113

00:08:36,280  -->  00:08:41,180
Finally we have two functions left which are related to each other sample underscore n and sample underscore

114

00:08:41,170  -->  00:08:42,130
frac.

115

00:08:42,130  -->  00:08:47,740
And basically what these do is allow you to take a random number of rows or a random fraction of rows

116

00:08:47,750  -->  00:08:48,400
.

117

00:08:48,400  -->  00:08:56,900
So for instance I can say sample let me go in and clear the con. I can say sample underscore and pass

118

00:08:56,890  -->  00:08:57,770
in my data frame.

119

00:08:57,790  -->  00:09:03,650
In this case its flights and pass in the number of rows I want to randomly sample from my data frame

120

00:09:03,640  -->  00:09:04,270
.

121

00:09:04,270  -->  00:09:06,400
So this returns 10 random rows.

122

00:09:06,430  -->  00:09:10,630
So this isn't like head or tail which returns the top or the bottom 10.

123

00:09:10,630  -->  00:09:15,280
This returns a random n number of rows so just a random sample of.

124

00:09:15,280  -->  00:09:19,040
In this case I just set 10 rows if you want to do it by percentage.

125

00:09:19,070  -->  00:09:24,390
You can use sample underscore frac in order to receive a fraction of the rows.

126

00:09:24,880  -->  00:09:31,160
So again you just pass in flights whatever your data is and the fraction you want back.

127

00:09:31,150  -->  00:09:38,690
So if I wanted back 10 percent of my rows you would just point point 1 in there.

128

00:09:38,680  -->  00:09:39,170
OK.

129

00:09:39,220  -->  00:09:40,730
So that's it for the plier.

130

00:09:41,000  -->  00:09:47,630
Hopefully you can see how it really simplifies the syntax and makes rereading your old code a lot easier

131

00:09:47,620  -->  00:09:48,370
.

132

00:09:48,380  -->  00:09:50,540
Go ahead and check out the notes for this lecture.

133

00:09:50,600  -->  00:09:56,870
In case you want to ever refresh on how to use any of these functions later on we'll have an exercise

134

00:09:56,870  -->  00:10:01,250
that will show you and re-affirm you're learning on how to actually use all of these.

135

00:10:01,440  -->  00:10:01,960
OK.

136

00:10:02,170  -->  00:10:04,020
Thanks everyone and I'll see you at the next lecture
