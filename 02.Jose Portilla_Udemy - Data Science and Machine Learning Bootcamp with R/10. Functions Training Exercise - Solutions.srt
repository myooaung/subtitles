1

00:00:00,270  -->  00:00:05,640
Hello everyone and welcome to the function exercises solution's walk through video in this lecture.

2

00:00:05,650  -->  00:00:10,100
We're going to be doing is walking through and explaining the solutions for the R function exercises

3

00:00:10,100  -->  00:00:10,580
.

4

00:00:10,590  -->  00:00:13,160
Let's go ahead and get started by jumping into our studio.

5

00:00:13,470  -->  00:00:15,320
OK so here we are our studio.

6

00:00:15,360  -->  00:00:19,700
I'm going to go ahead and get started by going to the first exercise question.

7

00:00:19,740  -->  00:00:24,240
So in the actual exercises the first two examples were done for you.

8

00:00:24,240  -->  00:00:29,100
So let's go ahead and jump to our first function which was create a function that will return the product

9

00:00:29,100  -->  00:00:30,380
of two integers.

10

00:00:30,660  -->  00:00:36,240
So this one's actually pretty simple we start off by just naming your function we'll call it pro-the

11

00:00:38,160  -->  00:00:39,950
and assigning it with the key word.

12

00:00:39,970  -->  00:00:48,060
Function well needs taken two arguments or two parameters will be number one and number two curly brackets

13

00:00:48,060  -->  00:00:48,150
.

14

00:00:48,150  -->  00:00:50,840
And this is where the code is actually going to be executed.

15

00:00:50,840  -->  00:00:58,200
So we're going to say return on say return number one times number two and we can go ahead and test

16

00:00:58,200  -->  00:00:59,940
it just by calling.

17

00:01:00,180  -->  00:01:05,440
We'll say Prince Prod. will they will say three and four.

18

00:01:05,520  -->  00:01:06,840
Go ahead and run the source.

19

00:01:06,840  -->  00:01:10,710
We get 12 out check in one more time 120.

20

00:01:10,740  -->  00:01:12,900
It looks like everything's working well.

21

00:01:12,900  -->  00:01:13,360
All right.

22

00:01:13,470  -->  00:01:15,210
Well that was pretty straightforward for you.

23

00:01:15,210  -->  00:01:19,500
So let's go ahead move on to exercise too.

24

00:01:19,520  -->  00:01:19,780
All right.

25

00:01:19,800  -->  00:01:25,310
So the second exercise was to create a function that accepts two arguments an integer and the vector

26

00:01:25,370  -->  00:01:26,220
integers.

27

00:01:26,400  -->  00:01:29,520
It returns true if the integers present in the vector.

28

00:01:29,580  -->  00:01:35,310
Otherwise it returns false and also a quick note to make sure you pay careful attention to your placement

29

00:01:35,310  -->  00:01:37,790
of the return line in your function.

30

00:01:37,830  -->  00:01:42,990
Let's go ahead clear the cons. expand our script a little more and begin to build out this function

31

00:01:42,990  -->  00:01:44,270
.

32

00:01:44,280  -->  00:01:48,930
First thing I want to say is the actual name of the function we'll call it name check for checking if

33

00:01:48,930  -->  00:01:53,750
the number is inside of that vector and the caller function keyword.

34

00:01:53,760  -->  00:01:59,400
And then we accept two arguments we'll say and U-M number for the number we're looking for and v for

35

00:01:59,400  -->  00:02:00,880
the vector we're checking.

36

00:02:00,930  -->  00:02:03,630
So basically we are just checking if that number is in the vector.

37

00:02:03,630  -->  00:02:10,380
So we have to do is use a for loop to go through the vector and then check if the item or element we're

38

00:02:10,380  -->  00:02:15,210
checking in that vector at that moment in time is equal to the number we're looking for.

39

00:02:15,210  -->  00:02:20,420
So say for that said E L E for elements.

40

00:02:20,460  -->  00:02:26,550
So for every elements in the vector if

41

00:02:29,370  -->  00:02:33,980
the element really is equal to.

42

00:02:33,990  -->  00:02:40,950
Now we turn true.

43

00:02:40,950  -->  00:02:45,420
All right so what are we doing with this little for loop we're saying for every element in the vector

44

00:02:45,420  -->  00:02:45,640
.

45

00:02:45,780  -->  00:02:51,370
If the element is equality with the number then we just return true.

46

00:02:51,870  -->  00:02:56,400
If none of this actually happens what we want to do is return false meaning if this elf's statement

47

00:02:56,430  -->  00:02:58,310
never actually occurs will return false.

48

00:02:58,310  -->  00:03:05,550
So at this curly bracket read outside of it are going to say return false.

49

00:03:06,060  -->  00:03:09,440
So let's go in and run this and check to make sure it makes sense.

50

00:03:09,480  -->  00:03:13,830
So say check 2 and then pasan of vector 1 to 3.

51

00:03:13,830  -->  00:03:15,460
So this should return true.

52

00:03:15,840  -->  00:03:20,970
We run it looks like I forgot to print the actual results.

53

00:03:20,970  -->  00:03:24,000
Now let's run this and we return true.

54

00:03:24,000  -->  00:03:31,350
Let's go ahead and get rid of the to make sure slow returns now should return false actually false.

55

00:03:31,350  -->  00:03:33,890
So looks like the checks are working correctly.

56

00:03:33,930  -->  00:03:38,070
Let's break it down so we can actually explain what's happening here.

57

00:03:38,070  -->  00:03:42,170
So we say function nomine vector for every element in V.

58

00:03:42,390  -->  00:03:48,840
If the element is equal to return true we have to be careful with as mentioned the last line is where

59

00:03:48,840  -->  00:03:51,080
we actually put this return false statement.

60

00:03:51,300  -->  00:03:53,490
So we want a place to return false statement.

61

00:03:53,490  -->  00:03:59,640
Outside of this entire for loop and the way this function is actually going to work is if this condition

62

00:03:59,910  -->  00:04:02,570
becomes true we immediately return true.

63

00:04:02,640  -->  00:04:06,570
And that essentially just finishes the function once the function returns something.

64

00:04:06,570  -->  00:04:08,670
It won't continue on.

65

00:04:08,670  -->  00:04:14,100
What that means is if this for loop completely goes without returning anything then we return false

66

00:04:14,220  -->  00:04:17,460
meaning there was no element that matched our number.

67

00:04:17,820  -->  00:04:21,460
OK it's good to move on to exercise number three.

68

00:04:22,370  -->  00:04:22,750
OK.

69

00:04:22,800  -->  00:04:29,310
Exercise 3 was to create a function that accepts two arguments an integer and a vector of integers.

70

00:04:29,310  -->  00:04:34,030
It returns the count of the number of occurrences of the integer in the input vector.

71

00:04:34,080  -->  00:04:39,180
So it's pretty similar to the exercise we just did except now we're going to count the number of occurrences

72

00:04:39,180  -->  00:04:40,560
.

73

00:04:40,560  -->  00:04:48,040
So we're going to say this function is called Number underscore counts have the keyword function.

74

00:04:48,270  -->  00:04:51,930
Same inputs as last time a number and a vector.

75

00:04:52,110  -->  00:04:55,500
In this case what we want to do is count the number of occurrences.

76

00:04:55,500  -->  00:05:01,650
So we'll start off with counts is.

77

00:05:02,580  -->  00:05:11,280
And then we're going to go and say Is this for we'll say Elly in the so every element in that vector

78

00:05:13,050  -->  00:05:18,460
if just like last time the element is equal to.

79

00:05:18,460  -->  00:05:21,120
Now we're going to add 1 to our count.

80

00:05:21,120  -->  00:05:27,820
So we're just going to say counts and reassign it to count plus 1.

81

00:05:28,090  -->  00:05:34,000
And then finally after that entire four loop is done running will just return the value of the count

82

00:05:34,010  -->  00:05:34,610
.

83

00:05:35,200  -->  00:05:43,540
So let's go ahead and make sure this all works out by saying Prince name counts El pass in.

84

00:05:43,550  -->  00:05:50,650
Let's say two and a vector will go in and pass a vector that has two 3 times in it.

85

00:05:50,650  -->  00:05:53,490
So if you run the source we get three perfect.

86

00:05:53,530  -->  00:05:56,250
Let's go ahead and remove one of these twos with one.

87

00:05:56,260  -->  00:05:59,780
Make sure it doesn't actually get counted to looks good.

88

00:05:59,770  -->  00:06:04,470
Let's make sure if we have no instances of that number it returns zero.

89

00:06:04,540  -->  00:06:05,620
And there it is.

90

00:06:06,040  -->  00:06:08,040
Let's quickly break the saddle one more time.

91

00:06:08,240  -->  00:06:13,750
We're saying no count was name or a function function accepts a variable and u m which is going to be

92

00:06:13,750  -->  00:06:17,950
the number and a vector v we count to start off as 0.

93

00:06:17,950  -->  00:06:23,220
Then we go iterate through that vector and then we check every every element in that vector.

94

00:06:23,310  -->  00:06:28,600
If the element at that particular instance in the vector is equal to the number we're looking for we

95

00:06:28,610  -->  00:06:34,360
add once the counts and then finally after we run this entire for loop and we can check that by selecting

96

00:06:34,370  -->  00:06:35,410
one of the curly brackets.

97

00:06:35,410  -->  00:06:39,070
Notice will automatically highlight the curly bracket that it's linked to.

98

00:06:39,070  -->  00:06:43,930
So once this for loops done completely we just return count meaning where there was no instance of that

99

00:06:43,940  -->  00:06:45,580
number count stays at zero.

100

00:06:45,570  -->  00:06:46,850
So we just returned 0.

101

00:06:47,020  -->  00:06:49,460
Otherwise we actually just keep adding to counts.

102

00:06:49,730  -->  00:06:50,200
Right.

103

00:06:50,410  -->  00:06:53,630
Let's go ahead and move on to next exercise.

104

00:06:53,620  -->  00:06:56,680
All right exercise 4 is a little trickier.

105

00:06:56,710  -->  00:06:59,290
We want to ship bars of aluminum.

106

00:06:59,380  -->  00:07:03,830
We're going to do is create a function that accepts an integer representing the requests that kilograms

107

00:07:03,820  -->  00:07:08,030
of aluminum for the package to be shipped to fulfill these orders.

108

00:07:08,020  -->  00:07:09,850
We have two types of bars.

109

00:07:09,880  -->  00:07:16,180
One is a small bar with one kilogram of aluminum and the other one is a big bar with five kilograms

110

00:07:16,210  -->  00:07:17,990
of aluminum each.

111

00:07:18,010  -->  00:07:21,240
We want to return the least number of bars needed.

112

00:07:21,580  -->  00:07:25,760
So it will return false if the required load cannot be created with the bars.

113

00:07:25,750  -->  00:07:29,680
So for example 0.5 kilograms can't be created with those bars.

114

00:07:29,770  -->  00:07:32,790
We won't worry too much about that return false requirement.

115

00:07:32,810  -->  00:07:38,890
We'll worry more about the actual structure of fulfilling for the number of bars.

116

00:07:38,920  -->  00:07:44,500
So a couple of the examples let's say the load required was six kilograms.

117

00:07:44,620  -->  00:07:48,260
So that will require a minimum of two bars.

118

00:07:48,440  -->  00:07:54,100
We can have one five kilogram bar and then 1 1 kilogram bar.

119

00:07:54,110  -->  00:08:01,060
Then for instance the load is 17 kilograms acquires a minimum of five bars so we can have three five

120

00:08:01,060  -->  00:08:07,720
kilogram bars and then two 1 kilogram bars you could have also filled out the six kilogram load using

121

00:08:07,730  -->  00:08:09,670
six small bars.

122

00:08:09,880  -->  00:08:14,860
But that's not the best way to do this if we're trying to minimize the number of bars.

123

00:08:14,950  -->  00:08:20,060
So we have to figure out is a couple of things for the logic of our code and then I didn't write it

124

00:08:20,990  -->  00:08:22,870
in some comment form.

125

00:08:22,900  -->  00:08:33,670
We want to figure out how many five kilogram bars can we use because we want to maximize the amount

126

00:08:33,670  -->  00:08:40,990
of five kilogram bars before we start filling in the rest of the gap with one kilogram bars and then

127

00:08:41,000  -->  00:08:54,220
we want to say well how many 1 kilogram bars do we need to essentially fill that gap.

128

00:08:54,400  -->  00:08:55,960
So how can we actually figure this out.

129

00:08:56,000  -->  00:09:03,790
Well we can use the Mada capabilities or modular capabilities to figure out how many times 5 goes into

130

00:09:04,180  -->  00:09:07,040
the kilogram package number.

131

00:09:07,030  -->  00:09:19,660
So we really want to answer is how many times does five go into required load number.

132

00:09:19,660  -->  00:09:23,380
Once we figure that out we'll know that the remainder

133

00:09:26,360  -->  00:09:31,750
will be the number of 1 kilogram bars.

134

00:09:32,200  -->  00:09:37,420
So let's go ahead and try to code this out.

135

00:09:37,420  -->  00:09:44,560
So again I wouldn't say bar underscore count is the name function pasand function and we'll go in except

136

00:09:44,650  -->  00:09:46,450
pack as the argument.

137

00:09:46,460  -->  00:09:55,150
So pack represents that is the kilogram load to fill up.

138

00:09:55,390  -->  00:10:01,160
Let's call it to start by just grabbing the remainder of how much the one kilogram bar number we're

139

00:10:01,150  -->  00:10:01,620
going to need.

140

00:10:01,630  -->  00:10:05,180
So we can say the amounts of one's

141

00:10:08,300  -->  00:10:15,300
So that's the amount of one kilogram bars we need is going to be equal to the actual load modified.

142

00:10:15,480  -->  00:10:18,800
So what that ends up returning is the remainder.

143

00:10:18,800  -->  00:10:25,970
So for instance we're going to show you the cons. If I say 15 modified I get zero.

144

00:10:25,980  -->  00:10:31,760
So that makes sense because if our package load was 15 kilograms I would only need three five kilogram

145

00:10:31,760  -->  00:10:35,730
bars and I wouldn't need to fill in with any one kilogram bars.

146

00:10:35,730  -->  00:10:41,510
Let's go in and say our package is 16 kilograms so we can already just tell by looking at this.

147

00:10:41,510  -->  00:10:47,900
We should pack this with three five kilogram bars or three large bars and then fill in that gap with

148

00:10:47,900  -->  00:10:49,220
one bar.

149

00:10:49,230  -->  00:10:53,210
And the way we can figure out that gap is just by using that model function says it give us it gives

150

00:10:53,220  -->  00:10:54,380
us the remainder.

151

00:10:54,800  -->  00:10:58,610
So I want to go ahead and assign that to the amount of ones we need.

152

00:10:59,150  -->  00:11:04,880
And then I just need to figure out the amount of we'll go in and say fives we need.

153

00:11:04,880  -->  00:11:13,010
So the amount of fives is just going to be the total package minus the amount of once

154

00:11:15,800  -->  00:11:17,970
divided then by five kilograms.

155

00:11:18,120  -->  00:11:19,630
So what does that actually represent.

156

00:11:19,880  -->  00:11:23,440
Well we'll know that the amount of ones is going to be the remainder.

157

00:11:23,450  -->  00:11:28,980
So we're looking for that gap to fill and then we want the amount of five kilogram bars we can take

158

00:11:28,980  -->  00:11:35,480
the entire load subtract that gap that we essentially already filled up and then divide it by 5 kilograms

159

00:11:35,490  -->  00:11:35,520
.

160

00:11:35,510  -->  00:11:42,660
Since every large bar in take five kilograms of weight and then we just return as our final answer.

161

00:11:42,650  -->  00:11:50,340
So we're returning the amount of bars will return amount of ones plus the amounts of fives.

162

00:11:50,340  -->  00:11:51,620
So that's it.

163

00:11:51,620  -->  00:11:54,010
Let's go ahead and test this make sure it works out.

164

00:11:54,020  -->  00:11:59,520
So if I say Bahrke count 17 let's go in and print out the result.

165

00:12:00,010  -->  00:12:02,960
Read the source we get five bars.

166

00:12:02,970  -->  00:12:03,360
All right.

167

00:12:03,380  -->  00:12:06,520
And that's really all there is for this particular function.

168

00:12:06,570  -->  00:12:11,820
The main trick to this is figuring out this sort of logic that you can use this modular function or

169

00:12:11,820  -->  00:12:17,400
maade function are really statements to percentage science to get the remainder value.

170

00:12:17,630  -->  00:12:21,570
Go ahead and look at the arithmetic lecture in case you're a little rusty on this.

171

00:12:22,010  -->  00:12:25,000
Let's go to and jump to exercise 5.

172

00:12:25,880  -->  00:12:28,570
All right exercise five for exercise five.

173

00:12:28,590  -->  00:12:33,260
We want to create a function that accepts three integer values and returns their sum.

174

00:12:33,260  -->  00:12:39,110
However there's a caveat to this if an integer values evenly divisible by three then it won't count

175

00:12:39,120  -->  00:12:40,210
towards the sum.

176

00:12:40,330  -->  00:12:46,100
And we want to return 0 if all numbers are evenly divisible by three and there's a hint here you may

177

00:12:46,110  -->  00:12:47,920
want to use the append function.

178

00:12:48,000  -->  00:12:50,410
So there's lots of ways we can solve this problem.

179

00:12:50,420  -->  00:12:56,980
I'll try to use the pen function along the vector to split out this function into as many steps possible

180

00:12:57,000  -->  00:13:01,080
so it's really clear what we're doing along as we go.

181

00:13:01,080  -->  00:13:06,590
So I want to create a function called summer instead of just saying SU M because I don't want to overwrite

182

00:13:06,680  -->  00:13:14,540
the SU function that's built into our then we'll call function and we accept three integer values.

183

00:13:14,570  -->  00:13:23,120
I'll go ahead to label them a B and C and then what I'm going to do is start off by creating our output

184

00:13:24,140  -->  00:13:31,590
as a vector 0 and then as we go along what I'm going to do is check for a b and see if they're evenly

185

00:13:31,590  -->  00:13:32,870
divisible by three.

186

00:13:32,880  -->  00:13:35,790
I won't put them into this out vector.

187

00:13:35,820  -->  00:13:41,040
If they are not evenly divisible by 3 then I will put them in.

188

00:13:41,420  -->  00:13:46,370
And then finally one of them is just return the sum of that output vector.

189

00:13:46,430  -->  00:13:48,200
So some outs.

190

00:13:48,380  -->  00:13:53,270
So let's go ahead now and use if statements to check all of these integers.

191

00:13:53,270  -->  00:14:00,140
So I may say if a mod 3 is not equal to zero

192

00:14:03,200  -->  00:14:07,080
meaning it's not evenly divisible by 3 then I know it's going to count.

193

00:14:07,090  -->  00:14:13,490
So then I'm going to go ahead and append this to our vectors and when I say a out.

194

00:14:13,790  -->  00:14:18,860
So if in case you aren't familiar of a pen you can always just go to the council type and help append

195

00:14:21,200  -->  00:14:23,790
search for it and it'll basically just tell you how it works.

196

00:14:23,800  -->  00:14:28,720
So with adding elements to a vector and is shown example here again.

197

00:14:28,970  -->  00:14:33,550
First argument is the vector to be modified and then values to be added to that vector.

198

00:14:33,570  -->  00:14:36,240
Really easy.

199

00:14:36,310  -->  00:14:37,570
OK so we have a.

200

00:14:37,620  -->  00:14:40,640
And you can also reverse this order if you want outcome a.

201

00:14:41,000  -->  00:14:46,550
And then we'll go ahead and say if and then we just essentially copy and paste this for the rest of

202

00:14:46,640  -->  00:14:47,760
our two values.

203

00:14:47,750  -->  00:14:59,420
So I'm going to go in and do that and then I'll change this to B and B and then C and C.

204

00:14:59,960  -->  00:15:03,610
And then finally I return to some about what's actually happening here.

205

00:15:03,690  -->  00:15:07,570
Again I created this initial vector with just eight values zero.

206

00:15:07,830  -->  00:15:12,970
And then I'm going along for a b and c checking if to evenly divisible by three.

207

00:15:13,050  -->  00:15:17,600
If they're not evenly divisible by three then they can go to the sum.

208

00:15:17,610  -->  00:15:23,880
And so I append them to or out doctor and I do that for a b and c and then I just return the final Some

209

00:15:23,880  -->  00:15:24,760
of that vector.

210

00:15:24,900  -->  00:15:27,010
So let's go ahead and check this out.

211

00:15:27,480  -->  00:15:38,820
So go ahead and call Prince summer and I'm going to pasan let's say 7 2 and 3.

212

00:15:38,970  -->  00:15:44,460
So this should print out free run source 9 because we're adding 7 we're adding two but we're not going

213

00:15:44,460  -->  00:15:48,440
to add three and same if I change this to 9 for instance.

214

00:15:48,450  -->  00:15:52,790
It just so I output 9 because nines evenly divisible by three.

215

00:15:52,960  -->  00:16:03,330
And if I have let's say 1 on 6 1 that should output 2 because 6 evenly divisible by three.

216

00:16:03,420  -->  00:16:05,750
So it's not going to go to the final output.

217

00:16:05,790  -->  00:16:06,120
All right.

218

00:16:06,120  -->  00:16:11,380
And that's one method you could use for this function just going along using if statements to check

219

00:16:11,380  -->  00:16:15,710
all of them appending it to a vector and then finally summing the output vector.

220

00:16:15,720  -->  00:16:20,570
Let's go ahead to move on to the next function exercise.

221

00:16:20,630  -->  00:16:25,710
All right so here we are at our final exercise which is a classic one to create a functional return

222

00:16:25,710  -->  00:16:29,940
true with IMPA integers prime or otherwise return false.

223

00:16:29,940  -->  00:16:34,650
There's lots of ways to solve this one Gronau we won't worry too much about certain edge cases like

224

00:16:34,640  -->  00:16:36,530
checking negative numbers.

225

00:16:36,540  -->  00:16:39,990
They can feel free to add a bunch if statements to check for that kind of thing.

226

00:16:39,990  -->  00:16:45,110
Right now we're just going to be worried about the basic logic of this function.

227

00:16:45,420  -->  00:16:52,190
So let's go ahead and start by creating a function called Prime check and the function just takes in

228

00:16:52,200  -->  00:16:53,740
a number.

229

00:16:54,090  -->  00:16:58,440
And what we're going to go ahead and do is the first thing we're going to check is if the number is

230

00:16:58,440  -->  00:17:04,840
equal to 2 since if the number is equal to 2 2 is a prime number.

231

00:17:04,890  -->  00:17:11,790
So we will immediately return true if that's not the case.

232

00:17:11,790  -->  00:17:16,440
You can also start putting if statements for checking if it's a negative number or returning false etc.

233

00:17:16,430  -->  00:17:16,810
.

234

00:17:16,860  -->  00:17:22,590
We'll go ahead and just skip forward to actually cycling through numbers to check if it's a prime number

235

00:17:22,590  -->  00:17:23,100
.

236

00:17:23,100  -->  00:17:27,660
So a prime number is only divisible by itself or 1.

237

00:17:27,680  -->  00:17:38,330
Meaning that if we were to say for x in two colon to numb minus one.

238

00:17:38,340  -->  00:17:43,010
So let's think about what the statement actually is creating this creating a vector of integers that

239

00:17:43,020  -->  00:17:49,230
goes from two all the way to the number right before the input number so minus one.

240

00:17:49,290  -->  00:18:03,020
We know that if the input number maade x is equal to zero it means it's evenly divisible by a number

241

00:18:03,300  -->  00:18:06,020
that is not either 1 or itself.

242

00:18:06,170  -->  00:18:09,080
And in this case we want to return false.

243

00:18:09,120  -->  00:18:11,720
It's not a prime number if that's the case.

244

00:18:11,760  -->  00:18:19,500
Otherwise if we go through this entire four loop and that's not the case we can return true.

245

00:18:20,340  -->  00:18:24,410
All right and that's the basic naive method of checking for a prime.

246

00:18:24,410  -->  00:18:27,030
There's other more sophisticated methods of doing this.

247

00:18:27,030  -->  00:18:32,020
And you can check out the links in these solutions note book and the explanations of solutions in a

248

00:18:32,040  -->  00:18:35,390
book or some other more sophisticated ways of checking for prime numbers.

249

00:18:35,390  -->  00:18:38,140
But this is the most basic way of doing this.

250

00:18:38,250  -->  00:18:40,660
As long as you can get this then you're good to go.

251

00:18:40,830  -->  00:18:45,960
So again we just have some checks at the beginning to check if it's a legit prime number or at least

252

00:18:45,950  -->  00:18:48,390
an option to be checking for a prime number.

253

00:18:48,430  -->  00:18:55,580
We just cycle from to all the way to right before the prime number if the number is divisible by one

254

00:18:55,590  -->  00:19:00,240
of those numbers evenly equal to zeros all return false on prime number.

255

00:19:00,330  -->  00:19:02,870
Let's go in and check to make sure this works we'll say prime.

256

00:19:02,870  -->  00:19:05,580
Check our Passons 7.

257

00:19:05,610  -->  00:19:13,680
Let's go in and print the results of this run that looks like 7 is true and we know 7 is a prime number

258

00:19:13,670  -->  00:19:14,100
.

259

00:19:14,120  -->  00:19:14,870
What if we do.

260

00:19:14,890  -->  00:19:16,720
It's false.

261

00:19:16,740  -->  00:19:17,640
That makes sense.

262

00:19:17,660  -->  00:19:20,730
Basically any even number should return false.

263

00:19:20,990  -->  00:19:23,300
So if we say this.

264

00:19:23,340  -->  00:19:25,820
So this is false it's also not a prime number.

265

00:19:25,830  -->  00:19:26,870
We'll have to check it on line.

266

00:19:26,870  -->  00:19:27,950
But I believe it.

267

00:19:28,080  -->  00:19:35,390
Let's do let's do a number that we know for instance ninety nine is divisible by 3 and 33.

268

00:19:35,790  -->  00:19:37,840
So that's also false etc..

269

00:19:38,070  -->  00:19:38,520
Right.

270

00:19:38,520  -->  00:19:44,500
And that's basically how you can solve the prime check function in the most simple Knabe way.

271

00:19:44,550  -->  00:19:48,200
Like I mentioned go ahead and check the solutions in that book if you want more info on other ways of

272

00:19:48,200  -->  00:19:49,430
going about it.

273

00:19:50,070  -->  00:19:50,540
OK.

274

00:19:50,660  -->  00:19:53,970
Hopefully you are able to succeed in this functions exercise.

275

00:19:54,000  -->  00:19:55,670
If not take your time.

276

00:19:55,700  -->  00:20:02,280
This is probably the most programmatically intensive portion of this course as far as the way to think

277

00:20:02,550  -->  00:20:07,110
in a logical procedure of a program created its functions for a lot of the course.

278

00:20:07,110  -->  00:20:11,040
We actually won't be touching on this sort of thinking because data frames will do a lot of the stuff

279

00:20:11,070  -->  00:20:12,660
automatically for us.

280

00:20:12,750  -->  00:20:13,300
OK.

281

00:20:13,640  -->  00:20:15,290
Thanks everyone and I'll see it in its lecture
