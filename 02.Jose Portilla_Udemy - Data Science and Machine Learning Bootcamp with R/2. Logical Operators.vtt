WEBVTT
1

00:00:00.360  -->  00:00:05.880
Hello everyone and welcome to the lecture or logical operators logical operators will allow us to combine

2

00:00:05.940  -->  00:00:08.220
multiple comparison operators.

3

00:00:08.220  -->  00:00:11.060
Let's go ahead and jump to our studio and see how they work.

4

00:00:11.490  -->  00:00:11.840
All right.

5

00:00:11.850  -->  00:00:16.650
So here we are our studio and the three logical operators are going to be learning about is the and

6

00:00:16.650  -->  00:00:21.340
operator the OR operator and then the NOT operator.

7

00:00:21.540  -->  00:00:24.270
The best way to explain these is through some examples.

8

00:00:24.300  -->  00:00:29.840
Imagine we have a variable x which is just the integer 10.

9

00:00:29.880  -->  00:00:37.290
Now I want to know if this variable x is less than 20 and if it's greater than a five I could type two

10

00:00:37.290  -->  00:00:45.480
commands and I could say X less than 20 will return true and then X greater than 5 also returns true

11

00:00:45.480  -->  00:00:46.340
.

12

00:00:46.350  -->  00:00:51.610
What I really want to do though is write this all in one line using the and logical operator.

13

00:00:51.630  -->  00:00:58.400
So what I would then do something like this x less than 20 and then have the answer symbol.

14

00:00:58.460  -->  00:01:07.340
So usually above the 7 so shift 7 and then the next comparison operator which is X greater than 5.

15

00:01:08.060  -->  00:01:12.760
And so this sort of logical operator will return true when both statements are true.

16

00:01:13.050  -->  00:01:20.700
And sometimes people also like to use parentheses in order to organize their logical operations so we

17

00:01:20.700  -->  00:01:21.900
could do something like this.

18

00:01:21.930  -->  00:01:24.690
And it will still work.

19

00:01:24.690  -->  00:01:26.550
Whichever one you prefer is up to you.

20

00:01:26.700  -->  00:01:33.090
I personally like the parentheses makes it a little more readable in other know of logical operators

21

00:01:33.090  -->  00:01:33.180
.

22

00:01:33.180  -->  00:01:35.960
It doesn't just have to be only two comparisons.

23

00:01:35.970  -->  00:01:37.800
We can have multiple comparisons.

24

00:01:37.800  -->  00:01:44.580
So I could then add a third one cell say and x is equal to 10.

25

00:01:44.580  -->  00:01:45.960
So check for equality on that.

26

00:01:46.050  -->  00:01:53.100
And that will also return True the and statement requires that all of the comparison operators are conditional

27

00:01:53.100  -->  00:01:55.230
statements to be true.

28

00:01:55.230  -->  00:02:01.980
So for example in this last operation I said and equals to nine will return false.

29

00:02:02.070  -->  00:02:04.770
Because even though these first two statements are true.

30

00:02:04.890  -->  00:02:12.290
This last one is false and this and requires that both conditions are true in order to return true.

31

00:02:12.720  -->  00:02:18.720
So we can essentially think of these as a series of logical boolean values where we have true and true

32

00:02:19.020  -->  00:02:21.100
and false in the second case.

33

00:02:21.120  -->  00:02:23.700
True in this first case.

34

00:02:23.760  -->  00:02:34.130
So for instance I could just say true and true and return back true if I say true and false.

35

00:02:34.140  -->  00:02:36.210
Notice I'll get back false.

36

00:02:36.240  -->  00:02:40.760
Now let's say you wanted or so we wanted something to return true.

37

00:02:40.920  -->  00:02:45.870
If either or those two conditional statements were true I'm going to go ahead and clear this to show

38

00:02:45.870  -->  00:02:47.360
you what I'm talking about.

39

00:02:47.940  -->  00:02:49.150
Let's see.

40

00:02:49.710  -->  00:02:57.410
I'm checking for X to be equal to either 100 which it's not 410 which it is.

41

00:02:57.420  -->  00:03:01.980
So I want to write some sort of statement that will return true if either of those statements is true

42

00:03:01.980  -->  00:03:02.080
.

43

00:03:02.130  -->  00:03:04.630
And that's where the OR operator comes into play.

44

00:03:04.710  -->  00:03:07.830
I can say X is going to make parentheses.

45

00:03:07.840  -->  00:03:19.050
That's really clear X equal to 10 or X equal to 100 and they'll return true because one of these statements

46

00:03:19.140  -->  00:03:21.130
at least one of these statements is true.

47

00:03:21.150  -->  00:03:24.940
So either this is true or this is true or they're both true.

48

00:03:25.050  -->  00:03:29.940
But one of them at least has to be true or logical operator works.

49

00:03:29.940  -->  00:03:31.530
However if they were both false.

50

00:03:31.560  -->  00:03:38.630
For instance we had the first one set to 10000 enter it will get false.

51

00:03:38.670  -->  00:03:40.760
So that's just how to use the logical operator.

52

00:03:40.800  -->  00:03:46.090
We need one or the other to be true or they can both be true in the and statement.

53

00:03:46.200  -->  00:03:52.260
We needed everything to be true in order to return a final logical value of true.

54

00:03:52.260  -->  00:03:56.170
Finally we have the knot which is that exclamation mark.

55

00:03:56.370  -->  00:04:00.520
So you can think of about not as reversing any logical value in front of it.

56

00:04:00.570  -->  00:04:03.720
It's basically asking is this not true.

57

00:04:03.960  -->  00:04:06.820
Might be a little confusing because of the use of the double negatives.

58

00:04:06.930  -->  00:04:09.070
So let's show you some examples.

59

00:04:09.120  -->  00:04:14.820
I'm going to go ahead and start off with a very simple statement print CS 10 check for equality with

60

00:04:14.820  -->  00:04:16.130
one.

61

00:04:16.170  -->  00:04:18.490
Now obviously that's going to return false.

62

00:04:18.810  -->  00:04:28.250
If I apply the not operator to this however 10 equals one it returns true.

63

00:04:28.680  -->  00:04:33.510
So again we can think of this is basically asking is this not true.

64

00:04:33.570  -->  00:04:35.730
And in that case is it not true.

65

00:04:35.730  -->  00:04:37.310
Well it does return true.

66

00:04:37.440  -->  00:04:42.580
So you can think of it again is just asking is this not the conditional case.

67

00:04:42.630  -->  00:04:46.650
You can also stack exclamation marks together.

68

00:04:47.400  -->  00:04:48.840
I would advise against this.

69

00:04:48.840  -->  00:04:54.870
So there's no real good reason to be stacking multiple exclamation marks as not checks but just keep

70

00:04:54.870  -->  00:04:59.520
in mind your programs won't throw any errors if you keep stacking them like this.

71

00:04:59.760  -->  00:05:01.240
And that's just constantly checking.

72

00:05:01.260  -->  00:05:01.710
Is it not.

73

00:05:01.710  -->  00:05:03.530
Not not not not not not true.

74

00:05:03.690  -->  00:05:06.830
But obviously it's very hard to understand very hard to read.

75

00:05:06.870  -->  00:05:09.680
So you should avoid doing that kind of operation.

76

00:05:09.750  -->  00:05:15.270
Now that we've seen some simple examples of these sort of logical operators Let's see some more realistic

77

00:05:15.270  -->  00:05:19.140
use cases for these to start up with these new examples.

78

00:05:19.140  -->  00:05:25.490
We'll start with saying T.F. so the variable def will sign empty cars to it.

79

00:05:25.500  -->  00:05:33.480
So if I say headier if it's just the anti-course data frame imagine I wanted to ask what models of cars

80

00:05:33.480  -->  00:05:34.770
have a mpg.

81

00:05:34.800  -->  00:05:37.510
That's greater than 20 mpg.

82

00:05:37.680  -->  00:05:49.140
What we could do is say DMF square brackets for indexing DF mpg greater than 20 Khama.

83

00:05:49.380  -->  00:05:55.560
And if we break down what this operation is actually doing all this trying to say is data frame return

84

00:05:55.560  -->  00:06:02.280
all the rows where the depth of the miles per gallon column is greater than 20 Khama all the columns

85

00:06:02.280  -->  00:06:03.620
for those values.

86

00:06:03.710  -->  00:06:11.880
If we wanted to only get certain columns back we could say mpg and I would just return those specific

87

00:06:11.960  -->  00:06:13.750
mpg.

88

00:06:13.770  -->  00:06:14.320
All right.

89

00:06:14.520  -->  00:06:18.690
Good and clear that notice the these of the indexing with that comma.

90

00:06:18.720  -->  00:06:27.260
We could have also used subset cycled could've done something like this subset our data frame mpg greater

91

00:06:27.270  -->  00:06:30.560
than 20 and that returns the same results.

92

00:06:31.110  -->  00:06:33.870
That's using one comparison operation.

93

00:06:33.870  -->  00:06:38.790
Now we can do if these new logical operators is combine these sort of filters.

94

00:06:38.910  -->  00:06:40.880
So I want to go ahead and show how to do that.

95

00:06:41.370  -->  00:06:47.620
Well good and clear that will say DMF square brackets less square.

96

00:06:47.640  -->  00:06:53.450
MPG is greater than 20 hands.

97

00:06:53.520  -->  00:07:00.720
So Note the use of the logical operator and they're all as square the horsepower column is greater than

98

00:07:00.720  -->  00:07:02.160
100.

99

00:07:02.300  -->  00:07:06.790
And then I going to put a comma there because I want all the columns returned.

100

00:07:07.440  -->  00:07:13.830
And now I can filter out on multiple conditions on my data frame using the logical operators in conjunction

101

00:07:13.830  -->  00:07:16.790
with comparison operators.

102

00:07:16.790  -->  00:07:23.850
We could have also used another logical operator such as or to select cars where the MPG are greater

103

00:07:23.850  -->  00:07:28.220
than 20 or the horsepower is greater than 100.

104

00:07:28.710  -->  00:07:30.810
And notice we get back way more values.

105

00:07:30.810  -->  00:07:34.840
So that's a way more flexible condition filter to pass.

106

00:07:35.250  -->  00:07:36.090
OK.

107

00:07:36.090  -->  00:07:39.090
That's really all we're going to discuss right now for the logical operators.

108

00:07:39.180  -->  00:07:44.190
Don't worry too much if you didn't fully understand the sort of filtering on the data frame we're going

109

00:07:44.190  -->  00:07:50.250
to practice and learn much more about that when we talk about a data frame overview of all the operations

110

00:07:50.250  -->  00:07:53.250
we can perform on data frames in a subsequent lecture.

111

00:07:53.250  -->  00:07:59.250
For now just remember that you can use logical operators like and or and then the not logical operator

112

00:07:59.520  -->  00:08:02.310
in order to combine comparison filters.

113

00:08:02.370  -->  00:08:05.010
OK thanks everyone and I'll see you at the next lecture
