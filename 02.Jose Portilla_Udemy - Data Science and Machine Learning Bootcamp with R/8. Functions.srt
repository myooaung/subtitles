1

00:00:00,690  -->  00:00:05,970
Hello everyone and welcome to the functions lecture in this lecture we're going to explain what a function

2

00:00:05,970  -->  00:00:10,950
is an art and how to create one functions will be our main building blocks when we construct larger

3

00:00:10,950  -->  00:00:13,590
and larger amounts of code to solve problems.

4

00:00:13,860  -->  00:00:15,790
Let's go ahead and jump to our studio.

5

00:00:16,140  -->  00:00:17,910
OK so here we are studio.

6

00:00:17,940  -->  00:00:23,490
Before we explain in more detail how to construct functions and what a function is and are in case you're

7

00:00:23,520  -->  00:00:27,510
already familiar with functions from a different programming language and just want to quickly get the

8

00:00:27,510  -->  00:00:30,640
syntax I'm going to go over the syntax quickly now.

9

00:00:31,230  -->  00:00:35,310
So function the syntax of a function are looks like this.

10

00:00:35,400  -->  00:00:44,910
You have the name of your function in assignment operator and then the keyword function corrent sees

11

00:00:45,480  -->  00:00:46,210
the inputs.

12

00:00:46,220  -->  00:00:46,980
You want to take.

13

00:00:46,980  -->  00:00:48,940
Separated by a comma.

14

00:00:49,140  -->  00:00:54,840
If you want an input to have a default for instance the input stream has a default use an equal sign

15

00:00:55,050  -->  00:01:00,110
and then some so have a default value then you have curly brackets.

16

00:01:00,110  -->  00:01:06,750
Whatever code you want to execute and then finally if you want to return something from that function

17

00:01:06,930  -->  00:01:13,800
you'll use the return keyword or the return function statement and then just return whatever result

18

00:01:13,850  -->  00:01:20,000
you want back from whatever code you had here.

19

00:01:20,820  -->  00:01:25,150
For instance something like this would be a really simple summation function.

20

00:01:25,180  -->  00:01:28,180
Ok that's a very basic syntax of a function.

21

00:01:28,230  -->  00:01:30,120
Or you can go ahead and check up the notes.

22

00:01:30,120  -->  00:01:34,190
This is only for people that are already familiar functions from a different programming language.

23

00:01:34,190  -->  00:01:39,330
Now I want to get a quick write down what the actual syntax looks like and are going to go ahead and

24

00:01:39,330  -->  00:01:43,740
clear all of this now and discuss functions as if you've never programmed before and never seen them

25

00:01:43,740  -->  00:01:44,370
before.

26

00:01:44,370  -->  00:01:49,710
For people who are new to programming and are going unclear this and discuss functions in a little more

27

00:01:49,710  -->  00:01:50,650
detail.

28

00:01:51,140  -->  00:01:54,260
OK so what is a function.

29

00:01:54,270  -->  00:01:56,510
Formally a function is just a useful device.

30

00:01:56,510  -->  00:02:00,770
The groups together are a set of statements so that they can be run more than once.

31

00:02:00,780  -->  00:02:04,800
They can also let us specify parameters that can serve as inputs to the functions.

32

00:02:04,860  -->  00:02:07,360
We've actually seen a lot of built in functions.

33

00:02:07,560  -->  00:02:10,240
For example the SUM function.

34

00:02:10,590  -->  00:02:12,260
We've actually already experienced it.

35

00:02:12,810  -->  00:02:19,770
So I could sum all the elements in a vector like so and then I could also call help on my function such

36

00:02:19,780  -->  00:02:23,640
as help some and I get this nice helpful pop out here.

37

00:02:23,820  -->  00:02:28,970
For instance some vector elements or description usage etc..

38

00:02:29,100  -->  00:02:34,410
So in a really fundamental level functions basically allow us to not have to repeatedly write the same

39

00:02:34,410  -->  00:02:36,000
code again and again.

40

00:02:36,240  -->  00:02:42,210
We can store blocks of code as a function and then we can just call a singular function instead of having

41

00:02:42,210  -->  00:02:47,940
to rewrite that code over and over again if we want to use the same sort of functionality of that code

42

00:02:47,940  -->  00:02:48,870
.

43

00:02:48,870  -->  00:02:54,690
Let's go ahead and show a couple of examples and build up in complexity of just examples of functions

44

00:02:54,690  -->  00:02:57,950
and are going to go ahead and push it to the right.

45

00:02:57,950  -->  00:03:00,250
So we're just dealing with the.

46

00:03:00,420  -->  00:03:02,550
Script or here.

47

00:03:02,580  -->  00:03:06,550
First thing I'm going to do may push this a little more to the right so it's a little cleaner.

48

00:03:06,660  -->  00:03:12,570
OK first thing to do is create a very simple function that takes no inputs.

49

00:03:12,600  -->  00:03:16,840
For example this sum function took an input of a vector.

50

00:03:16,980  -->  00:03:21,160
In our case we're going to create a very simple function that doesn't take any inputs.

51

00:03:22,260  -->  00:03:23,780
The syntax goes like this.

52

00:03:23,790  -->  00:03:26,390
We create some sort of function name.

53

00:03:26,400  -->  00:03:27,720
In this case we'll call her function.

54

00:03:27,720  -->  00:03:28,580
Hello.

55

00:03:28,830  -->  00:03:36,180
The assignment operator and then the keyword function and then Apprentice's we're going to have input

56

00:03:36,240  -->  00:03:36,350
.

57

00:03:36,360  -->  00:03:40,090
In this case we're starting off simple so it has no inputs.

58

00:03:40,170  -->  00:03:47,310
Then curly brackets and the block of code that we want to execute when we actually call hello.

59

00:03:47,520  -->  00:03:52,110
In this case I'm just going to have it be a simple function that says Hello.

60

00:03:52,980  -->  00:03:58,600
All right that's our Hello function so we can go ahead and call hello.

61

00:03:59,260  -->  00:04:05,520
Like so hello close parentheses in front of it since it doesn't take any other inputs.

62

00:04:05,840  -->  00:04:07,700
So you go ahead and run the source here.

63

00:04:07,980  -->  00:04:11,370
Well notice we get low as an output again.

64

00:04:11,370  -->  00:04:17,190
Hello is a function that takes no inputs which is why there's nothing in the parentheses and then just

65

00:04:17,220  -->  00:04:19,140
prints hello.

66

00:04:19,140  -->  00:04:24,690
If I were to call hello with no parentheses there I wouldn't get anything out.

67

00:04:24,810  -->  00:04:29,220
It's basically just saying oh is a function but you didn't actually call the function.

68

00:04:29,280  -->  00:04:32,240
You'll need parentheses to call the function.

69

00:04:32,520  -->  00:04:37,920
Most functions take in some sort of input so will be more obvious to use the parentheses.

70

00:04:37,920  -->  00:04:39,450
Let's now create a function.

71

00:04:39,450  -->  00:04:42,660
Building off our Hello function that actually takes in it.

72

00:04:43,380  -->  00:04:48,500
So when you want your function to take taken inputs for example the sum function took an input of a

73

00:04:48,510  -->  00:04:49,680
vector.

74

00:04:49,800  -->  00:04:56,900
You'll say here inside your function some sort of temporary variable name for the input you want.

75

00:04:56,920  -->  00:05:02,940
In this case we'll just say name it so I'm going to say print and I'll use paste

76

00:05:05,770  -->  00:05:06,830
and I'll say hello.

77

00:05:06,840  -->  00:05:15,290
Comma name parentheses so now you'll notice we can pass on a name and say hello.

78

00:05:15,330  -->  00:05:19,530
So we'll go ahead and say Sammy.

79

00:05:20,070  -->  00:05:24,050
So if we go ahead and run this code notice the output is.

80

00:05:24,060  -->  00:05:25,170
Hello Sammy.

81

00:05:25,180  -->  00:05:32,560
So what's actually going on line by line is we have hello as our name for a function the function keyword

82

00:05:32,900  -->  00:05:37,780
we pass in name as an argument or parameter into the function.

83

00:05:37,770  -->  00:05:40,200
And you're free to call these whatever you want.

84

00:05:40,260  -->  00:05:43,610
Just be careful not to overwrite some default function.

85

00:05:43,620  -->  00:05:49,710
So for example probably wouldn't be a good idea to call some here since some is already a function.

86

00:05:49,710  -->  00:05:53,380
Likewise you wouldn't want to say summary etc..

87

00:05:53,380  -->  00:05:56,230
You want to just have some unique thing name.

88

00:05:56,250  -->  00:05:59,280
In this case is simple enough that we'll just go ahead and use it.

89

00:05:59,460  -->  00:06:05,640
So we pass in our first arguments or parameter into the function and then we can play around with it

90

00:06:05,680  -->  00:06:08,330
or use it inside the function itself.

91

00:06:08,760  -->  00:06:15,570
So this is going to be code that executes when the function is called.

92

00:06:16,240  -->  00:06:19,910
And below here we call the function using parentheses.

93

00:06:20,280  -->  00:06:25,770
If we accidentally didn't pass anything into the function and just left the empty we'll get an error

94

00:06:26,620  -->  00:06:34,150
in else say error and paste Osei argument name is missing with no default and that no default is basically

95

00:06:34,140  -->  00:06:40,030
saying hey this name was missing and you didn't have a default here for it.

96

00:06:40,140  -->  00:06:46,200
What a default means is a default value for these variables inside of your function in case you're not

97

00:06:46,200  -->  00:06:47,440
actually passed.

98

00:06:47,560  -->  00:06:50,460
Now we can assign them using an equal sign.

99

00:06:50,520  -->  00:06:54,820
So I'll go ahead and say a default name is Frank.

100

00:06:54,840  -->  00:07:00,280
So now if I run hello with no arguments I'll say hello Frank.

101

00:07:00,330  -->  00:07:10,210
However I can overwrite the default by passing in Cmin And now when I run it I'll say hello Samie.

102

00:07:10,240  -->  00:07:17,370
So this equal sign notation along your parameters or whatever inputs you want is a nice way to set defaults

103

00:07:17,380  -->  00:07:17,470
.

104

00:07:17,460  -->  00:07:22,100
In case you don't expect the user to have to put in the argument every single time.

105

00:07:22,320  -->  00:07:27,600
And a lot of the built in functions we use have some sort of default parameter for other arguments or

106

00:07:27,610  -->  00:07:30,370
parameters inside of that function.

107

00:07:30,370  -->  00:07:36,990
Let's go ahead and show a totally different example of building a function want to create a very simple

108

00:07:37,000  -->  00:07:45,810
function called add underscore or make my keyword function and my functional taken two arguments number

109

00:07:45,810  -->  00:07:46,620
one.

110

00:07:46,890  -->  00:07:49,570
Number two with no defaults here.

111

00:07:49,650  -->  00:07:53,230
Notice separate arguments are separated by a comma.

112

00:07:53,250  -->  00:08:01,560
When I'm calling them into the function and what I want to go ahead and do is print out number one plus

113

00:08:01,620  -->  00:08:03,570
number two.

114

00:08:03,570  -->  00:08:09,740
Now let's go ahead and call and underscore and pasand two numbers let's say four or five.

115

00:08:09,920  -->  00:08:16,260
And if I run this from the source notice I get output printed for plus 5 which is 9.

116

00:08:16,360  -->  00:08:21,330
Let's go ahead and clear the console so we can keep working on some more examples.

117

00:08:21,880  -->  00:08:27,370
Something to notice is that in all or previous examples that we've shown so far we've been printing

118

00:08:27,630  -->  00:08:34,350
the actual result to the function where we actually usually want to do is return the result so we can

119

00:08:34,360  -->  00:08:42,840
store as a variable and you can do that by using the return keyword and this return keyword is essentially

120

00:08:42,850  -->  00:08:48,690
a built in function that will return the result of whatever you're doing inside of your function.

121

00:08:48,690  -->  00:08:59,260
So for example have something like this will say my some and I'll say that's number one class number

122

00:08:59,300  -->  00:09:00,150
two.

123

00:09:00,510  -->  00:09:04,810
And then we're going to return my that sum.

124

00:09:05,280  -->  00:09:12,310
And with this return statement or we're going to be able to do is assign the output of the function

125

00:09:12,340  -->  00:09:15,770
what it returns to a variable.

126

00:09:15,780  -->  00:09:19,440
Let's go ahead and run the source and then break it down.

127

00:09:19,440  -->  00:09:25,180
Notice when I run that source I don't actually see Nine come out because I'm never printing nine.

128

00:09:25,200  -->  00:09:29,020
I'm just returning it and then storing it as this variable result.

129

00:09:29,280  -->  00:09:32,520
So I'm saying Adnams is this function that takes an number one.

130

00:09:32,620  -->  00:09:39,810
Number two I go ahead and add them together so I get my that sum back and then I'm going to return my

131

00:09:39,820  -->  00:09:47,290
that sum and this return function statement allows me to then store that whatever was in that return

132

00:09:47,280  -->  00:09:53,970
function to a variable result then I can later on if I wanted to print that result so I could print

133

00:09:54,000  -->  00:09:57,580
the result that sales going to print it twice.

134

00:09:57,610  -->  00:09:59,730
So if I run courtesy 9:9.

135

00:10:00,070  -->  00:10:06,610
So the result of this add underscore function was returned and then saved as this variable result and

136

00:10:06,610  -->  00:10:09,410
then I can play around it do whatever I want it etc..

137

00:10:10,140  -->  00:10:14,340
So keep that in mind if you're working the functions and creating and building your own functions you're

138

00:10:14,340  -->  00:10:18,930
probably usually going to want to use return instead of just printing out the value.

139

00:10:19,290  -->  00:10:23,940
Otherwise you'll be storing a print statement when you do something like this instead of the actual

140

00:10:24,270  -->  00:10:29,500
summation or whatever value or whatever output you want your function to really use.

141

00:10:29,500  -->  00:10:29,970
All right.

142

00:10:30,000  -->  00:10:36,030
So we've learned the syntax to use for functions when we want to pass arguments to them or set default

143

00:10:36,030  -->  00:10:40,140
arguments and then get some sort of result in return.

144

00:10:40,140  -->  00:10:46,410
Now let's discuss scope scope is the term we're going to use to describe how objects and variables get

145

00:10:46,410  -->  00:10:52,340
defined within our When discussing scope with functions as a general rule.

146

00:10:52,360  -->  00:10:58,570
We can say that if a variable is defined only inside a function then its scope is limited to that function

147

00:10:58,560  -->  00:10:59,520
.

148

00:10:59,520  -->  00:11:01,930
Let's go ahead and show this through some examples.

149

00:11:01,940  -->  00:11:10,180
Are good and clear the con. and clear my scripts imagine we create a function called times 5.

150

00:11:10,500  -->  00:11:19,830
We'll put in our keyword function and let's say it takes in some value and then it's going to go ahead

151

00:11:19,830  -->  00:11:22,600
and return now.

152

00:11:24,630  -->  00:11:28,220
Times five.

153

00:11:28,750  -->  00:11:32,360
And then we'll just go and say print times 5.

154

00:11:32,380  -->  00:11:34,840
This is a very basic function.

155

00:11:34,920  -->  00:11:35,850
That's what it looks like.

156

00:11:35,860  -->  00:11:36,600
Times five.

157

00:11:36,630  -->  00:11:40,860
So what I'm going to go do is now pass in 20.

158

00:11:40,870  -->  00:11:42,950
So now we should get the results 20 times five.

159

00:11:42,960  -->  00:11:50,130
When I run this which is 100 note the first time I was just asking print out the function so I was calling

160

00:11:50,130  -->  00:11:52,740
it without any prints is there.

161

00:11:52,770  -->  00:11:53,640
So it prints it out.

162

00:11:53,670  -->  00:11:55,390
Oh this is what your function looks like.

163

00:11:55,440  -->  00:11:59,550
Second time actually asked that print out the result of times 5.

164

00:11:59,720  -->  00:12:03,750
Just input 20 which is then 20 times five 100.

165

00:12:03,810  -->  00:12:04,660
All right.

166

00:12:04,650  -->  00:12:10,840
Now imagine I wrote that function like this.

167

00:12:11,190  -->  00:12:18,990
I said for instance my thought result and I assigned the numb

168

00:12:22,000  -->  00:12:33,820
times 5 and I'm going to go ahead and return my result for the function and then going to continue by

169

00:12:33,810  -->  00:12:38,270
assigning the result of times 5 to some variable.

170

00:12:38,550  -->  00:12:46,550
We'll go ahead and call it my the output and assign it times 5.

171

00:12:46,800  -->  00:12:48,620
We'll go ahead and put in 100.

172

00:12:49,020  -->  00:12:58,030
And then finally we'll go ahead and say print my output let's clear the console and run the source.

173

00:12:59,220  -->  00:13:01,300
OK so we get out 500.

174

00:13:01,460  -->  00:13:03,000
Everything everything's good.

175

00:13:03,030  -->  00:13:07,990
So even here in the console if we say my the output call it we get five hundred.

176

00:13:08,190  -->  00:13:09,770
Everything's looking great.

177

00:13:09,780  -->  00:13:15,990
Now what if I call my dart result notice we get object my result not found.

178

00:13:16,000  -->  00:13:21,630
You may find that strange because you can see it here and your script might not result in looks to you

179

00:13:21,660  -->  00:13:23,110
like you've defined it.

180

00:13:23,190  -->  00:13:31,050
This is where scope comes into play scope indicates that these variables are only defined inside the

181

00:13:31,050  -->  00:13:34,180
scope of this function here.

182

00:13:34,290  -->  00:13:41,010
So variables defined inside of a function are only defined or perhaps redefined inside of that function

183

00:13:41,010  -->  00:13:41,610
.

184

00:13:41,620  -->  00:13:48,180
However variables are assigned outside of the function are known as global variables and the function

185

00:13:48,180  -->  00:13:51,120
will have access to them due to their scope.

186

00:13:51,120  -->  00:13:58,230
Let's go ahead and show an example of a global variable and a function being able to access it in order

187

00:13:58,230  -->  00:13:59,580
to show this properly.

188

00:13:59,580  -->  00:14:04,110
I'm going to go ahead and just clear my environment workspace by clicking on this broom.

189

00:14:05,600  -->  00:14:07,350
And now my environment is empty.

190

00:14:07,420  -->  00:14:09,010
I would suggest you go ahead and do the same.

191

00:14:09,010  -->  00:14:18,360
Now let's clear the console and let's work on a simple function to show scope and then we create some

192

00:14:18,370  -->  00:14:29,980
variable v and it's going to be a string called I Am a global variable and then we're going to go ahead

193

00:14:29,970  -->  00:14:39,390
and say another variable stuff and we'll go ahead and say I'm global stuff.

194

00:14:39,390  -->  00:14:44,190
So these are going to be two global variables because in their scope they're not defined within any

195

00:14:44,190  -->  00:14:45,420
function.

196

00:14:45,420  -->  00:14:47,220
They're on a global scope.

197

00:14:47,460  -->  00:14:57,640
Then I'm going to create a function called Fun my function we'll taken we'll say stuff it's going to

198

00:14:57,630  -->  00:14:58,920
go ahead and print the

199

00:15:02,030  -->  00:15:16,590
will take stuff and we're actually going to say re-assign stuff inside of this function fun and then

200

00:15:16,600  -->  00:15:25,750
I'm going to go ahead and add whip's one more line where I go ahead and just print stuff.

201

00:15:25,750  -->  00:15:33,400
Finally I'm going to go ahead and call sun on stuff.

202

00:15:33,690  -->  00:15:38,890
Take a moment to think what this should output when you run the source.

203

00:15:38,920  -->  00:15:45,660
Or let's go ahead and run this and we get I'm a global variable and then we also get reassigned stuff

204

00:15:45,750  -->  00:15:47,910
inside of this function fun.

205

00:15:48,210  -->  00:15:50,280
So it actually happened here.

206

00:15:50,460  -->  00:15:57,150
We called at the very bottom Passons stuff which starts off as I'm global stuff.

207

00:15:57,150  -->  00:15:59,770
And then inside that function call we have a print statement.

208

00:15:59,760  -->  00:16:06,330
The notice we never pass the V into the function fun which means the function will now look into the

209

00:16:06,340  -->  00:16:11,370
global namespace over here which is v is a global variable.

210

00:16:11,380  -->  00:16:16,610
And if you want an idea of your global namespace you come over here to your global environment.

211

00:16:16,620  -->  00:16:18,390
Notice Hertz's global environment.

212

00:16:18,390  -->  00:16:21,770
It will show you the variables you have such as stuff in V.

213

00:16:21,940  -->  00:16:27,400
It'll tell you what they actually are and then also report functions fun.

214

00:16:27,610  -->  00:16:32,670
So now that we know what values we have globally the function can actually look for stuff that's in

215

00:16:32,670  -->  00:16:34,590
this global environment.

216

00:16:34,600  -->  00:16:40,540
So if we didn't assign V inside of this function we'll look for it in the global namespace and we have

217

00:16:40,530  -->  00:16:41,630
it right here.

218

00:16:41,860  -->  00:16:46,970
Then we reassign stuff inside of the function fun and then we print stuff.

219

00:16:46,980  -->  00:16:52,370
So we get a global variable and we reassign stuff instead of this function fun.

220

00:16:52,500  -->  00:16:54,570
Now here comes the tricky part.

221

00:16:54,930  -->  00:17:03,170
What if right after I call fun stuff I say print stuff.

222

00:17:03,540  -->  00:17:10,570
Take a moment and try to think what you expect to show here after we say fun stuff we know.

223

00:17:10,620  -->  00:17:13,710
I'm a global variable re-assign stuff inside of this function.

224

00:17:13,710  -->  00:17:18,080
Fun but what's going to happen on line 11 where we say print stuff.

225

00:17:18,210  -->  00:17:22,720
Will it be this line or line number two.

226

00:17:22,800  -->  00:17:25,330
Let's go ahead and run it and find out.

227

00:17:25,840  -->  00:17:26,370
OK.

228

00:17:26,500  -->  00:17:33,120
We get I'm a global variable re-assign stuff inside is function fun but notice when you say print stuff

229

00:17:33,280  -->  00:17:39,180
outside of this function you still get I'm global stuff and that's because stuff has been defined as

230

00:17:39,180  -->  00:17:45,400
a global variable in the global environment which means the reassignments of that stuff.

231

00:17:45,390  -->  00:17:53,940
Term only affects the scope of the stuff variable inside of the function meaning lines 4 through 8.

232

00:17:53,940  -->  00:17:57,180
It won't affect anything outside of the function.

233

00:17:57,370  -->  00:18:04,830
So that fun function does is it first checks to see if for instance this V is defined at the function

234

00:18:04,840  -->  00:18:05,780
scope.

235

00:18:05,840  -->  00:18:07,180
So it it's not.

236

00:18:07,300  -->  00:18:08,470
Which is this case.

237

00:18:08,460  -->  00:18:15,100
We then search the global scope over here for a variable v and then that leads us to saying Oh I'm a

238

00:18:15,100  -->  00:18:18,530
global variable and we go ahead and print that out on the next line.

239

00:18:18,550  -->  00:18:24,400
We do the re-assignment And then when we say print stuff it looks for the stuff term in the scope of

240

00:18:24,390  -->  00:18:27,240
the function and it finds its rate here.

241

00:18:27,300  -->  00:18:33,000
If it didn't find that here it would then look for it in I'm global stuff.

242

00:18:33,000  -->  00:18:40,090
Now in line 11 we say print stuff we're first going to search the global very environment for stuff

243

00:18:40,530  -->  00:18:45,030
it will never actually find the scope of things inside of function.

244

00:18:45,120  -->  00:18:51,830
Since again this reassignment is limited to the scope of only being inside the function.

245

00:18:51,840  -->  00:18:52,640
All right.

246

00:18:52,920  -->  00:18:55,800
So that's it for this lecture on functions.

247

00:18:55,840  -->  00:18:57,140
Go ahead and check out the notes.

248

00:18:57,180  -->  00:19:03,390
If you want more examples of this topic of scope the scope is a really important topic to understand

249

00:19:03,390  -->  00:19:03,890
.

250

00:19:03,930  -->  00:19:08,970
Otherwise you'll be expecting things to be affected inside of your function when you're actually only

251

00:19:08,970  -->  00:19:11,100
limited to the scope of that function.

252

00:19:11,620  -->  00:19:14,870
OK thanks everyone and I'll see you at the next lecture
