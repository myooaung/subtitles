1

00:00:01,380  -->  00:00:05,000
Hello everyone and welcome to the lecture guide to using the plier.

2

00:00:05,100  -->  00:00:09,960
This lecture will cover how to install the player as well as installing a data set and then we'll go

3

00:00:09,960  -->  00:00:13,070
over various functions we can use with the player.

4

00:00:13,080  -->  00:00:15,670
Let's go ahead and jump to our studio and get started.

5

00:00:16,050  -->  00:00:22,200
OK so here we are our studio and the first thing we need to do is actually install the the player package

6

00:00:22,200  -->  00:00:23,000
.

7

00:00:23,340  -->  00:00:27,430
So then the player package actually one of the most popular packages for our.

8

00:00:27,810  -->  00:00:32,910
And the way to install is just by saying install bot packages and it quotes inside the parentheses.

9

00:00:33,140  -->  00:00:33,540
You're right.

10

00:00:33,540  -->  00:00:35,950
D p l y r.

11

00:00:36,150  -->  00:00:37,450
Go ahead and click enter.

12

00:00:37,710  -->  00:00:39,410
And it should install for you.

13

00:00:39,450  -->  00:00:43,840
I'm going to go ahead and fast forward to the end of the installation.

14

00:00:43,890  -->  00:00:44,320
All right.

15

00:00:44,340  -->  00:00:47,220
Looks like everything's successfully unpacked everything's checked.

16

00:00:47,230  -->  00:00:50,530
We have a downloaded binary package great again.

17

00:00:50,760  -->  00:00:54,500
All you have to say is install that packages the player.

18

00:00:54,810  -->  00:00:56,430
Go ahead and put that appear.

19

00:00:56,580  -->  00:00:58,260
OK you want to reference it later.

20

00:00:58,320  -->  00:01:00,270
It's also in the notes.

21

00:01:00,270  -->  00:01:06,750
Let me go and clear the console and next thing I want to do is actually install some package data.

22

00:01:06,750  -->  00:01:15,250
So I'm going to go out and say install packages again and I'm going to specify N.Y.C. flights 13.

23

00:01:15,690  -->  00:01:21,130
And this package is basically just a large dataset of a bunch of flights from 2013.

24

00:01:21,360  -->  00:01:25,760
So I'm going to go out and click enter here in Sulla packages and again I'll go ahead.

25

00:01:25,770  -->  00:01:30,540
Fast forward to the finished downloading and installation.

26

00:01:30,540  -->  00:01:34,530
All right so he finished installing everything going to go ahead and copy and paste this line in case

27

00:01:34,530  -->  00:01:36,430
you want to reference it later.

28

00:01:36,440  -->  00:01:38,400
Again this is also in the notes.

29

00:01:38,400  -->  00:01:41,220
So we installed the player package and we installed the dataset.

30

00:01:41,220  -->  00:01:44,490
We're going to play around with this N.Y.C. flights 13.

31

00:01:44,610  -->  00:01:46,350
Let me go ahead and do a control alt.

32

00:01:46,350  -->  00:01:48,750
Clear the console and I'm going to get a call.

33

00:01:48,750  -->  00:02:00,960
Library the player and tell me what it's attaching and I will go ahead and say library and why see flights

34

00:02:00,960  -->  00:02:02,330
13.

35

00:02:03,150  -->  00:02:07,290
Something to note here is when you say library the player.

36

00:02:07,350  -->  00:02:14,640
You'll notice it says the falling objects are masked and that's these two functions filter and lag.

37

00:02:14,940  -->  00:02:21,390
And the reason these two are masked as well as intersects set if set equal in union is because basically

38

00:02:21,450  -->  00:02:29,270
the player is going to have its own filter function and its own lag object or intersect object that's

39

00:02:29,280  -->  00:02:33,020
going to overwrite the default filter for our.

40

00:02:33,060  -->  00:02:34,800
So just keep that in mind.

41

00:02:35,160  -->  00:02:42,810
And I'm going to go ahead and clear this and just keep in mind that we had to call library the player

42

00:02:44,430  -->  00:02:49,570
and library NYC flights 13.

43

00:02:49,950  -->  00:02:53,940
So now that we have those two libraries called Let's actually take a look at this example data that

44

00:02:53,940  -->  00:02:56,930
we just installed with NYC flights 13.

45

00:02:56,940  -->  00:02:57,490
OK.

46

00:02:57,510  -->  00:03:05,250
Since I previously called Library NYC flights 13 I can actually call flights and that will result in

47

00:03:05,250  -->  00:03:07,120
a built in data frame.

48

00:03:07,530  -->  00:03:12,560
What I'm going to do instead is just call head of flights so we can see what it looks like.

49

00:03:12,710  -->  00:03:16,470
If you combine flights is quite a large data frame so you probably will want to call head or tail of

50

00:03:16,470  -->  00:03:17,930
it.

51

00:03:17,940  -->  00:03:18,260
All right.

52

00:03:18,300  -->  00:03:20,250
So what does this actually look like.

53

00:03:20,250  -->  00:03:26,430
We have a year column a month Day column and then some other columns just on flight information.

54

00:03:26,430  -->  00:03:32,150
This flight information includes stuff like departure time schedule departure time the delay.

55

00:03:32,160  -->  00:03:37,950
So the difference between your scheduled and your actual departure time same suffer arrival the carrier

56

00:03:37,950  -->  00:03:37,970
.

57

00:03:37,980  -->  00:03:42,600
So what airline they were on and a bunch of other variables actually aren't shown here since the state

58

00:03:42,600  -->  00:03:46,340
of frame's too large Shusha everything such as flight the hour.

59

00:03:46,350  -->  00:03:51,310
How long it would take the minute how long that it's a tail number origin destination etc..

60

00:03:51,540  -->  00:03:56,280
So lots of information we can play with in this flight's data frame and that's the reason we're going

61

00:03:56,280  -->  00:03:57,600
to be using it.

62

00:03:57,630  -->  00:04:04,860
You want to get a better idea of what flights looks like it can go ahead and call summary on it and

63

00:04:04,860  -->  00:04:09,870
this will show you a summary statistical summary of all the columns in that data frame.

64

00:04:09,870  -->  00:04:13,930
Again we have some time information some departure and arrival information.

65

00:04:13,950  -->  00:04:19,710
The caregiver information origin the situation air time distance etc..

66

00:04:19,740  -->  00:04:20,430
OK.

67

00:04:20,640  -->  00:04:23,660
So now that we get a feeling of what our data looks like.

68

00:04:23,880  -->  00:04:27,060
Let's go ahead and learn how to use the player.

69

00:04:27,900  -->  00:04:32,850
So if the player we're going to focus on a few key functions that allow us to easily manipulate our

70

00:04:32,850  -->  00:04:37,190
data we're going to get a copy and paste them from the notes here.

71

00:04:37,440  -->  00:04:46,500
So we have filter and slice arrange select and rename distinct mutate and transmute summerize and then

72

00:04:46,500  -->  00:04:49,020
sample and sample frac.

73

00:04:49,080  -->  00:04:54,840
Let's go ahead and work our way through all of these built in functions with supplier again you're only

74

00:04:54,840  -->  00:04:59,580
going to be able to use these functions after you call library the player either in your script or in

75

00:04:59,580  -->  00:05:00,630
the con..

76

00:05:00,630  -->  00:05:06,060
Otherwise you may be using normal built in functions of our such as a normal filter which is why the

77

00:05:06,060  -->  00:05:08,530
normal filter is actually masked now.

78

00:05:08,670  -->  00:05:13,980
And we're going to be using the pliers filter whenever we call a filter because we imported library

79

00:05:13,980  -->  00:05:14,920
to plier.

80

00:05:15,330  -->  00:05:15,780
OK.

81

00:05:16,020  -->  00:05:19,080
Let's go ahead and move on and actually show you how filter works.

82

00:05:19,080  -->  00:05:23,730
So filter allows you to select a subset of rows in a data frame.

83

00:05:23,730  -->  00:05:28,770
Previously we have been using the subset function in order to do this but it's actually a lot easier

84

00:05:28,770  -->  00:05:31,200
to use filter the player.

85

00:05:31,230  -->  00:05:38,040
So I'm actually going to just say filter and the first argument pass in is your data.

86

00:05:38,180  -->  00:05:40,770
In this case it's flights.

87

00:05:41,130  -->  00:05:44,270
And then you go ahead and just in column names.

88

00:05:44,280  -->  00:05:47,460
And what the conditional statement you want to filter by.

89

00:05:47,460  -->  00:05:55,040
So for instance I want a filter flights to happened in November so I'll say month equals equals 11.

90

00:05:55,250  -->  00:06:00,600
And notice I put two equal signs because I'm checking for equality and let's say also want day to be

91

00:06:00,600  -->  00:06:01,590
equal to the third.

92

00:06:01,590  -->  00:06:11,310
So flights happened on November 3rd and let's go ahead and say carrier is equal to the character string

93

00:06:11,460  -->  00:06:14,240
capital capitally for American Airlines.

94

00:06:14,550  -->  00:06:15,780
And that's how filter works.

95

00:06:15,780  -->  00:06:17,790
I'm going to go ahead and call ahead on this.

96

00:06:17,790  -->  00:06:20,130
So they don't want the entire data to show up.

97

00:06:20,160  -->  00:06:21,920
At least the inter filter data frame.

98

00:06:22,020  -->  00:06:26,750
I just want the first filtered six rows and see what that looks like.

99

00:06:27,300  -->  00:06:32,760
So again all we're actually doing here with filter is selecting a subset of rows in a data frame.

100

00:06:32,790  -->  00:06:38,040
The first argument is the name of the data frame and the second and subsequent arguments or the expressions

101

00:06:38,100  -->  00:06:41,210
or conditions that are filtering that data frame.

102

00:06:41,220  -->  00:06:47,160
So here we select that all flights from American Airlines that occurred on November 3rd and you just

103

00:06:47,160  -->  00:06:50,760
separate your conditional statements with a comma in between.

104

00:06:50,880  -->  00:06:56,280
So hopefully you realize that this looks a lot easier to read versus a subset call.

105

00:06:56,400  -->  00:07:01,200
Now a subset call is actually really similar but you would have to add a lot of logical operators such

106

00:07:01,200  -->  00:07:01,380
as.

107

00:07:01,410  -->  00:07:06,930
And statements in order to do this you could have also used fragen notation to do this sort of filtering

108

00:07:06,930  -->  00:07:07,140
.

109

00:07:07,170  -->  00:07:09,880
But again it also would have been a little more complex.

110

00:07:09,980  -->  00:07:14,310
I'll go ahead and copy from the notes what the bracket notation for the similar commands would look

111

00:07:14,310  -->  00:07:15,510
like.

112

00:07:15,660  -->  00:07:17,340
So it would look like this.

113

00:07:17,340  -->  00:07:20,980
And when we went in run this just to show you that it's the same output.

114

00:07:21,350  -->  00:07:22,910
Well what's the difference here.

115

00:07:22,920  -->  00:07:29,730
So with the player package we're able to just say philtre pass in my data and then separated by a bunch

116

00:07:29,730  -->  00:07:36,410
of commas whatever the conditions I want to filter on are here using bracket notation.

117

00:07:36,410  -->  00:07:42,870
I had to keep calling the data frame and the column using that dollar sign notation using some sort

118

00:07:42,870  -->  00:07:48,150
of conditional statement and then logical operators to basically glue all of these together and then

119

00:07:48,150  -->  00:07:52,640
finally a comma in order to call all the columns for these rows.

120

00:07:52,710  -->  00:07:58,650
So this can get really messy if you want to filter on a bunch of columns while filter still always keeps

121

00:07:58,650  -->  00:08:00,660
a clean readable syntax.

122

00:08:00,750  -->  00:08:02,990
And this is the whole basic idea of the plier.

123

00:08:03,000  -->  00:08:06,970
It makes these sort of operations easier and cleaner to read.

124

00:08:07,350  -->  00:08:13,860
Let's go out and continue with the next function which is slice slice is going to allow us to select

125

00:08:13,860  -->  00:08:18,470
rows by position 1 or go ahead and clear the con..

126

00:08:18,540  -->  00:08:24,630
So filter allows us to filter out based on conditions slice will just return rows by position.

127

00:08:24,630  -->  00:08:31,890
So you say slice passing your data this case its flights and then you just go ahead and pass in what

128

00:08:31,890  -->  00:08:32,520
rows you want.

129

00:08:32,520  -->  00:08:38,040
So for instance if I want the first 10 rows you pass in a vector of the slice of rows you want.

130

00:08:38,040  -->  00:08:43,560
So there are then my first 10 rows and that's really the basics of slice just allows you store select

131

00:08:43,560  -->  00:08:47,790
rows by position using the plier slice function.

132

00:08:47,910  -->  00:08:48,600
OK.

133

00:08:48,990  -->  00:08:53,370
And again you can check the notes in case you want a reference to all of these functions or you can

134

00:08:53,370  -->  00:08:58,730
just say help the player and I'll also bring you a bunch of these helpful hints.

135

00:08:58,740  -->  00:09:05,280
Now let's talk about the arr. function with the player arr. works really similarly to filter except

136

00:09:05,280  -->  00:09:09,540
that instead of filtering or selecting rows it orders the rows.

137

00:09:09,540  -->  00:09:14,850
It takes a data frame and a set of column names or more complicated expressions to order by.

138

00:09:14,850  -->  00:09:19,950
If you provide more than one column name each additional column is going to be used to break ties in

139

00:09:19,950  -->  00:09:22,190
the values of the preceding columns.

140

00:09:22,200  -->  00:09:25,210
Let me go in and show an example of what I mean by that.

141

00:09:25,230  -->  00:09:29,130
So again I'm only calling ahead because I just want the first six rows.

142

00:09:29,310  -->  00:09:33,080
Otherwise the state of frame has so many rows it's going to be a huge output.

143

00:09:33,240  -->  00:09:35,330
So I'm just going to call ahead on stuff.

144

00:09:35,870  -->  00:09:36,120
OK.

145

00:09:36,120  -->  00:09:41,580
So a range really similar syntax to filter except now instead of filtering we're going to order stuff

146

00:09:42,390  -->  00:09:43,070
first argument.

147

00:09:43,080  -->  00:09:48,900
As always you just pass in your data and now you just pass in the columns you want to order by.

148

00:09:48,900  -->  00:09:56,860
So for instance I want to order by year then month then day and then let's go ahead and say error time

149

00:10:03,510  -->  00:10:09,960
and if we see the output we see that well since every row in this data set or a data frame has 2013

150

00:10:09,960  -->  00:10:10,710
for the year.

151

00:10:10,770  -->  00:10:16,890
That's our first year notice months are all one's days are all ones and if we go to air time which is

152

00:10:16,890  -->  00:10:21,150
right here we get order or excuse me that's actually arrival time.

153

00:10:21,220  -->  00:10:22,710
Time is over here.

154

00:10:22,710  -->  00:10:23,810
Not being shown.

155

00:10:23,850  -->  00:10:25,450
So let's go ahead instead of saying.

156

00:10:25,470  -->  00:10:27,820
Ordered by airtime will order by arrival times.

157

00:10:27,810  -->  00:10:30,520
It's a little more clear.

158

00:10:32,800  -->  00:10:35,210
Let's go in and show that we actually see the results.

159

00:10:35,400  -->  00:10:35,730
OK.

160

00:10:35,730  -->  00:10:41,370
Here it's really clear that we're ordering an ascending order 3 6 8 16 20 21 et cetera.

161

00:10:41,730  -->  00:10:47,250
So again we just take a range pass in our data in this case flights and then the order that we want

162

00:10:47,250  -->  00:10:48,120
to sort stuff by.

163

00:10:48,120  -->  00:10:52,150
So I want to first order by year then order it by the month then by the day.

164

00:10:52,200  -->  00:10:55,720
Then the arrival time and that's all there is to it.

165

00:10:55,920  -->  00:11:01,680
If you want one of these columns to be in descending order you can just pass in the DSC function to

166

00:11:01,690  -->  00:11:03,540
arrange in descending order.

167

00:11:03,570  -->  00:11:09,570
So imagine I wanted to say arrange it by the year the month in the day but instead of sending arrival

168

00:11:09,600  -->  00:11:16,830
time I want descending arrival time I just pass in D E S C for descending and pass that around that

169

00:11:16,830  -->  00:11:20,910
column that I want to make descending.

170

00:11:20,910  -->  00:11:28,440
And now we can see arrival time is in descending Ceasars of four hundred hours 23 58 etc. So that's

171

00:11:28,440  -->  00:11:31,790
it for arr. we learned about filter slice and arrange.

172

00:11:31,920  -->  00:11:39,060
Next one up we want to learn about is select going to go ahead and clear this data frame in order to

173

00:11:39,060  -->  00:11:39,930
fit time limits.

174

00:11:39,930  -->  00:11:41,460
We'll continue this in part to
