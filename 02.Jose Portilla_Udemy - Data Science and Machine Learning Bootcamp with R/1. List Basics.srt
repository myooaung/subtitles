1

00:00:00,420  -->  00:00:02,470
Hello everyone and welcome to this lecture.

2

00:00:02,500  -->  00:00:07,580
Unlist basics we've already covered vectors matrices and data frames.

3

00:00:07,590  -->  00:00:12,740
Now we're going to learn about our final basic built in our data structure known as the list.

4

00:00:12,870  -->  00:00:17,420
The list is going to allow us to store a variety of data structures under a single variable.

5

00:00:17,430  -->  00:00:20,800
Let's jump to our studio and see how it works.

6

00:00:20,850  -->  00:00:22,580
OK here are studio.

7

00:00:22,590  -->  00:00:26,490
Notice that I have just the console displaying here because that's really all we need for right now

8

00:00:26,510  -->  00:00:27,230
.

9

00:00:27,840  -->  00:00:30,610
I'm going to create a couple of data structures.

10

00:00:30,630  -->  00:00:35,360
First one I'm going to create a basic vector with one two three.

11

00:00:35,430  -->  00:00:42,060
I'm also going to create a matrix using the matrix function and it's just going to be the numbers one

12

00:00:42,060  -->  00:00:50,580
through 10 number of rows equals to two and then finally I'm going to create a data frame and I'm going

13

00:00:50,580  -->  00:00:54,310
to assign it a built in data frame we'll call it empty cars.

14

00:00:54,420  -->  00:00:58,230
So I have three separate data structures.

15

00:00:58,560  -->  00:01:07,590
I have my vector of numerics I have my matrix and then finally I have my data frame.

16

00:01:07,620  -->  00:01:13,510
So what if we wanted to put all of these different data structures into a single variable.

17

00:01:13,590  -->  00:01:18,840
That way I can call a single variable and call things out of that single variable in order to store

18

00:01:18,840  -->  00:01:20,130
a bunch of information.

19

00:01:20,490  -->  00:01:22,200
That's where the list comes in.

20

00:01:22,380  -->  00:01:27,660
The list is going to allow us to combine all these data structures into a single variable.

21

00:01:27,660  -->  00:01:34,470
So we're going to go ahead and create a variable called my dot list in order to create a list.

22

00:01:34,500  -->  00:01:41,070
I just put in the list function and then pass in essentially a list of the different data structures

23

00:01:41,070  -->  00:01:41,460
I want.

24

00:01:41,460  -->  00:01:44,070
So I passed the variable names separated by a comma.

25

00:01:44,170  -->  00:01:51,090
Want my vector the matrix am comma and then finally my data frame the f..

26

00:01:51,120  -->  00:01:54,090
So if we print out my list directly to the consul.

27

00:01:54,090  -->  00:01:57,080
Usually you won't print out an entire list like I'm showing you right now.

28

00:01:57,270  -->  00:02:02,460
But if we just go ahead and do that those who have a ton of information here but we have all the information

29

00:02:02,460  -->  00:02:06,360
we assigned to this list we have the vector the matrix.

30

00:02:06,360  -->  00:02:12,330
And then finally the data frame and the Consul's going to display each item in the list with this double

31

00:02:12,330  -->  00:02:14,210
bracket notation.

32

00:02:14,310  -->  00:02:20,490
So the list is going to show double brackets 1 and then display the first item in your list then double

33

00:02:20,490  -->  00:02:26,200
brackets to the second item in your list which is the matrix in this case double brackets 3.

34

00:02:26,820  -->  00:02:30,490
And the third final item in our list which is this of free.

35

00:02:30,660  -->  00:02:37,400
We can also name these items instead of having the automatically assigned numbers.

36

00:02:37,410  -->  00:02:40,620
Let me go in and clear the consul and show you how to do that.

37

00:02:41,070  -->  00:02:52,530
Well go ahead and make a variable called my name that list will call list and if I want to actually

38

00:02:52,530  -->  00:02:59,160
assign names instead of those automatic variable numbers I can do that when I'm calling or passing in

39

00:02:59,310  -->  00:03:01,890
those data structures into the list function.

40

00:03:01,890  -->  00:03:08,910
So I can say something like sample underscore the E.C equals and then I pass in the variable or data

41

00:03:08,910  -->  00:03:10,410
structure that I'm referring to.

42

00:03:10,410  -->  00:03:20,490
So V in this case will say my dot matrix as the next label call it m and then we can say something like

43

00:03:20,490  -->  00:03:20,510
.

44

00:03:20,510  -->  00:03:27,930
Sample DMF it's up to you how you want to label DS will say the f you can use underscores or dots.

45

00:03:27,960  -->  00:03:29,770
Surely what works best for you.

46

00:03:30,300  -->  00:03:31,660
I'll go ahead and make this all dot.

47

00:03:31,660  -->  00:03:35,220
So it's the same here but that's all there is to it.

48

00:03:35,220  -->  00:03:43,530
So if I say my dog named list now we scroll back up you'll notice we get names off of this list and

49

00:03:43,530  -->  00:03:45,210
they have dollar signs in front of them.

50

00:03:45,480  -->  00:03:50,970
Meaning we can actually call similar to calling a column off of a data frame we can call entire data

51

00:03:50,970  -->  00:03:53,600
structures or objects off of a list.

52

00:03:53,610  -->  00:03:59,160
So this is more of an organizational tool than an actual tool where you're going to be doing operations

53

00:03:59,250  -->  00:04:01,680
like a data frame or a matrix or a vector.

54

00:04:01,680  -->  00:04:06,120
You're going to be using a list to organize your work and organize the various data frames or matrices

55

00:04:06,120  -->  00:04:11,040
or vectors or whatever data structures or objects are working with you'll pass to a list and call them

56

00:04:11,040  -->  00:04:13,890
off the list in order to access them.

57

00:04:13,890  -->  00:04:23,260
So I can say my named list dollar sign and then our studio is going to have since really helpful dropdown

58

00:04:23,280  -->  00:04:27,820
menus that show you oh you have sampled that VEC in this list my matrix and this list sampled the F

59

00:04:27,840  -->  00:04:33,720
in this list and it says a little symbol here denoting what kind of data structure it is and then we

60

00:04:33,720  -->  00:04:35,460
can just call stuff offer a list.

61

00:04:35,490  -->  00:04:37,010
In this fashion.

62

00:04:37,380  -->  00:04:41,140
Now let's briefly discuss how to select objects from a list.

63

00:04:41,400  -->  00:04:44,630
We talked about this dollar sign method sample.

64

00:04:44,850  -->  00:04:47,660
But if you want it you could also use bracket notation.

65

00:04:47,700  -->  00:04:55,350
So if we go back to my list the original list had the numbers we could call using bracket notation the

66

00:04:55,350  -->  00:04:56,530
numbers off of that.

67

00:04:56,910  -->  00:05:03,330
So I can say something like my lists or my that list one inside of the brackets and it returns that

68

00:05:03,330  -->  00:05:04,400
vector.

69

00:05:04,410  -->  00:05:10,620
I can also do the same for the named list and I'll return the first item.

70

00:05:10,620  -->  00:05:17,610
Now notice here the first item actually has a name sample back which I could have also said my name

71

00:05:17,610  -->  00:05:25,840
that list with brackets passed then sampled back the sea.

72

00:05:26,070  -->  00:05:28,880
And that would have returned the exact same thing.

73

00:05:29,550  -->  00:05:30,180
OK.

74

00:05:30,180  -->  00:05:39,990
Now a quick no is the class of this statement going to go in and copy and paste it into the class function

75

00:05:40,510  -->  00:05:43,200
is still a list.

76

00:05:43,350  -->  00:05:49,710
If you actually want to grab those data structures of those objects out of your list so you can manipulate

77

00:05:49,710  -->  00:05:51,110
them or operate with them.

78

00:05:51,270  -->  00:05:55,510
You'll use either two brackets or the dollar sign notation we showed earlier.

79

00:05:55,530  -->  00:06:03,260
So if I take out my named list again and I use dollar sign notation to grab that sample that Visi notice

80

00:06:03,330  -->  00:06:03,390
.

81

00:06:03,390  -->  00:06:08,040
Now we actually get the vector object instead of this list.

82

00:06:08,040  -->  00:06:11,260
Class object showing you the first item the list.

83

00:06:11,280  -->  00:06:13,740
So it's a really important thing to note here.

84

00:06:13,770  -->  00:06:16,990
Again if I use this bracket notation that's just going to return.

85

00:06:17,010  -->  00:06:23,070
Hey you have the sample vector in your list and it's called sampled up the see if I use the dollar sign

86

00:06:23,070  -->  00:06:23,980
notation.

87

00:06:24,070  -->  00:06:26,750
It's actually going to return that vector itself.

88

00:06:26,760  -->  00:06:35,460
So let's go in and confirm that by checking class of this statement and now we get back numeric because

89

00:06:35,460  -->  00:06:40,730
it's a numeric vector versus here we got back a list class object.

90

00:06:41,130  -->  00:06:46,460
And with this sort of notation we can also duplicate it by saying double brackets.

91

00:06:46,650  -->  00:06:48,900
So I say my named list.

92

00:06:48,900  -->  00:06:55,630
One set of brackets and another set of brackets and then say sample visi.

93

00:06:56,700  -->  00:07:01,950
And that's another way to directly grab the object so you can either use the dollar sign notation or

94

00:07:01,950  -->  00:07:05,060
this double bracket notation if you want to get in return.

95

00:07:05,190  -->  00:07:10,830
The actual object that stored in that list if you either just use single brackets with either the name

96

00:07:11,430  -->  00:07:15,160
or the index value you'll get back a class of list.

97

00:07:15,300  -->  00:07:19,710
Meaning I'll tell you the name of the objects in your list but you won't be able to manipulate it like

98

00:07:19,710  -->  00:07:25,320
it was just a vector matrix or they are afraid that you stored in that list.

99

00:07:25,320  -->  00:07:26,440
Finally a quick note.

100

00:07:26,460  -->  00:07:32,130
You can actually combine lists so lists can hold other lists and I'll show you that by using the combined

101

00:07:32,130  -->  00:07:40,380
function I'll make an object called Double list and I will go ahead and assign it the list I created

102

00:07:40,380  -->  00:07:47,180
which was my that named list I'll assign it twice.

103

00:07:47,180  -->  00:07:51,640
So now I have a list which is two instances of my lane list.

104

00:07:51,900  -->  00:07:58,980
So if I called Double list I should get a very large output into the console with things shown twice

105

00:07:58,980  -->  00:07:59,160
.

106

00:07:59,160  -->  00:08:06,010
So there's my sample VEC my matrix sample T.F. second instance and here's the first one again.

107

00:08:06,060  -->  00:08:10,270
So that was my double list just to show you that you can combine lists together.

108

00:08:10,290  -->  00:08:15,780
You have to separate this into a single variable which is just essentially a combination of those two

109

00:08:15,780  -->  00:08:16,410
lists.

110

00:08:16,470  -->  00:08:22,510
The best way to get information about a list is just by using the structure as TR function.

111

00:08:22,620  -->  00:08:29,280
We'll go ahead and pass in my named list and I'll report back how many objects in a list and then what

112

00:08:29,280  -->  00:08:30,930
kind of objects they have.

113

00:08:31,380  -->  00:08:35,220
OK that's really all there is to the list object.

114

00:08:35,220  -->  00:08:39,100
Keep in keep it in mind when you're trying to organize a bunch of different data structures.

115

00:08:39,270  -->  00:08:43,590
But you should also keep in mind that it's mainly used for organizational purposes.

116

00:08:43,770  -->  00:08:50,010
You won't be using a list directly for the purposes of working and trying to manipulate data directly

117

00:08:50,010  -->  00:08:50,380
.

118

00:08:50,430  -->  00:08:54,200
That's better suited for things like data framework matrix or even a vector.

119

00:08:54,250  -->  00:08:57,090
A list is more of an organizational tool.

120

00:08:57,090  -->  00:09:00,410
All right thanks everyone and I'll see the next lecture.
