WEBVTT
1
00:00:01.140 --> 00:00:04.150
Now that we know more about Kinesis Data Analytics,

2
00:00:04.150 --> 00:00:06.740
let's look at a more concrete visualization of how we

3
00:00:06.740 --> 00:00:09.170
might use it in a realâ€‘world scenario.

4
00:00:09.170 --> 00:00:11.280
First, we need an input source.

5
00:00:11.280 --> 00:00:13.840
Let's say we have a Kinesis Data Stream that receives a

6
00:00:13.840 --> 00:00:17.360
completed stock trade from an upstream application.

7
00:00:17.360 --> 00:00:21.420
The stream then ingests all of the incoming upstream data and makes it

8
00:00:21.420 --> 00:00:25.500
available to Kinesis Data Analytics for processing. At this point, Kinesis

9
00:00:25.500 --> 00:00:29.940
Data Analytics can start by running an aggregation to organize the total

10
00:00:29.940 --> 00:00:32.900
number of trades for a particular stock.

11
00:00:32.900 --> 00:00:36.260
This aggregation could then be bound to a window of time that

12
00:00:36.260 --> 00:00:39.800
resets periodically to summarize the data.

13
00:00:39.800 --> 00:00:42.080
Then, whenever the window resets,

14
00:00:42.080 --> 00:00:45.110
the aggregation would continue against the streaming

15
00:00:45.110 --> 00:00:47.330
data source in the next window.

16
00:00:47.330 --> 00:00:48.240
Additionally,

17
00:00:48.240 --> 00:00:52.330
the aggregation can then be configured to output to another stream

18
00:00:52.330 --> 00:00:55.960
and sent along to a user's dashboard or some downstream application

19
00:00:55.960 --> 00:00:59.040
for further processing or storage.

20
00:00:59.040 --> 00:01:02.430
So now you should have a better understanding of how Kinesis Data

21
00:01:02.430 --> 00:01:06.030
Analytics works in action and how it integrates with all these other

22
00:01:06.030 --> 00:01:14.000
Kinesis services and other AWS services to make the most of collecting and storing information in AWS.

