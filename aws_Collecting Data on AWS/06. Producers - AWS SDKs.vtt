WEBVTT
1
00:00:01.140 --> 00:00:04.560
Now let's take a closer look at the AWS SDKs and how they

2
00:00:04.560 --> 00:00:07.640
can be used to send data into Kinesis.

3
00:00:07.640 --> 00:00:10.230
So, why would we use the AWS SDKs?

4
00:00:10.230 --> 00:00:11.090
Well, to start,

5
00:00:11.090 --> 00:00:14.560
there are a variety of different AWS SDKs for many

6
00:00:14.560 --> 00:00:16.200
different programming languages.

7
00:00:16.200 --> 00:00:18.450
You can create applications using Python,

8
00:00:18.450 --> 00:00:22.340
PHP, Go, Node.js, and others when you're using the SDKs,

9
00:00:22.340 --> 00:00:24.020
rather than just Java,

10
00:00:24.020 --> 00:00:27.360
like some of the previous tools I mentioned,/ You can also embed some

11
00:00:27.360 --> 00:00:30.070
of these libraries directly in mobile applications,

12
00:00:30.070 --> 00:00:32.940
which makes them useful when you're creating mobile applications

13
00:00:32.940 --> 00:00:35.740
that need to stream data directly to Kinesis.

14
00:00:35.740 --> 00:00:40.170
AWS SDKs are also typically favored when you have a lower rate producers,

15
00:00:40.170 --> 00:00:45.040
like mobile devices, some IoT devices, and some web clients.

16
00:00:45.040 --> 00:00:48.120
Now, there's a few options for the AWS SDKs.

17
00:00:48.120 --> 00:00:52.860
You can either send in a single record to Kinesis with the PutRecord operation,

18
00:00:52.860 --> 00:00:57.040
or you can send in multiple records at once with the PutRecords operation.

19
00:00:57.040 --> 00:00:59.920
Regardless of the SDK and programming language you use,

20
00:00:59.920 --> 00:01:03.440
you should have equivalent options when you're interacting with Kinesis.

21
00:01:03.440 --> 00:01:08.040
So now let's visualize how the AWS SDKs work with Kinesis.

22
00:01:08.040 --> 00:01:11.920
There's a variety of different scenarios in which the AWS SDK

23
00:01:11.920 --> 00:01:14.540
might be used to get our data into Kinesis.

24
00:01:14.540 --> 00:01:18.640
We might have a very similar example where we have an Amazon EC2 instance

25
00:01:18.640 --> 00:01:22.400
that contains something like a Python application or any other language

26
00:01:22.400 --> 00:01:25.610
that's a supportive language for the AWS SDKs.

27
00:01:25.610 --> 00:01:28.960
Now that application might leverage the AWS SDK for Python,

28
00:01:28.960 --> 00:01:30.560
in this case Boto 3,

29
00:01:30.560 --> 00:01:33.690
in order to send data over to Kinesis using the

30
00:01:33.690 --> 00:01:35.750
PutRecords or PutRecord operations.

31
00:01:35.750 --> 00:01:39.300
Now, once it gets over into the Kinesis Data Stream,

32
00:01:39.300 --> 00:01:42.340
we can then use a variety of tools to get it back out.

33
00:01:42.340 --> 00:01:45.220
We might also have something very similar when creating mobile

34
00:01:45.220 --> 00:01:48.870
applications using something like the iOS SDKs.

35
00:01:48.870 --> 00:01:51.320
This would allow us to directly put information into the

36
00:01:51.320 --> 00:01:53.360
stream from the mobile application.

37
00:01:53.360 --> 00:01:55.980
As a final example, we could have an IoT device,

38
00:01:55.980 --> 00:02:00.120
like an IoTâ€‘enabled camera or some sensor data that wants to send

39
00:02:00.120 --> 00:02:03.340
data into Kinesis using the IoT Device SDK.

40
00:02:03.340 --> 00:02:04.410
Behind the scenes,

41
00:02:04.410 --> 00:02:06.470
there would be a bit more configuration with some of these

42
00:02:06.470 --> 00:02:09.160
scenarios to work out the permissions and the configuration

43
00:02:09.160 --> 00:02:11.200
required for these things to happen.

44
00:02:11.200 --> 00:02:12.050
But overall,

45
00:02:12.050 --> 00:02:19.000
these are other options when we want a more customized solution for sending data over to a Kinesis Data Stream.

