WEBVTT
1
00:00:01.240 --> 00:00:04.050
Now let's look at how to stream data into our Kinesis data

2
00:00:04.050 --> 00:00:08.300
stream. Inside of data.py, we'll be copying and pasting some of

3
00:00:08.300 --> 00:00:11.710
the lines from data.py to import the rest of the dependencies

4
00:00:11.710 --> 00:00:13.540
we'll need for this script.

5
00:00:13.540 --> 00:00:17.170
These will be a bunch of built‑in libraries inside of Python 3.

6
00:00:17.170 --> 00:00:18.970
Now after we import these dependencies,

7
00:00:18.970 --> 00:00:21.830
we're going to set up what we want our stream to be called.

8
00:00:21.830 --> 00:00:22.700
In this case,

9
00:00:22.700 --> 00:00:26.510
I want to call it sales because we'll have our product sales data in it,

10
00:00:26.510 --> 00:00:29.910
so I'm going to set a variable called stream_name equal to sales. And

11
00:00:29.910 --> 00:00:32.180
then we're going to create a Kinesis client,

12
00:00:32.180 --> 00:00:35.990
in this case by using the boto3.client method to create a

13
00:00:35.990 --> 00:00:38.990
Kinesis client in the region of us‑east‑1.

14
00:00:38.990 --> 00:00:43.440
Now, make sure that if you're doing this, when you go over to the AWS console,

15
00:00:43.440 --> 00:00:47.190
if you're creating your client in us‑east‑1, that inside of the AWS

16
00:00:47.190 --> 00:00:51.320
console you have N. Virginia selected for us‑east‑1,

17
00:00:51.320 --> 00:00:53.470
and not one of the other AWS regions.

18
00:00:53.470 --> 00:00:55.170
If you need to use one of the other regions,

19
00:00:55.170 --> 00:00:57.710
you'll have to make sure that everything is supported the same way

20
00:00:57.710 --> 00:01:01.300
for the Kinesis streams as it is in us‑east‑1.

21
00:01:01.300 --> 00:01:02.480
It's likely that it is,

22
00:01:02.480 --> 00:01:06.140
but I don't want to waste too much time looking at this in different regions.

23
00:01:06.140 --> 00:01:09.840
So, now that we've created this Kinesis client in us‑east‑1,

24
00:01:09.840 --> 00:01:11.730
we're going to use it to create a stream.

25
00:01:11.730 --> 00:01:15.420
We'll use the Kinesis.create_stream method,

26
00:01:15.420 --> 00:01:18.030
and then we'll use the stream_name we defined earlier,

27
00:01:18.030 --> 00:01:20.830
as well as setting a ShardCount, in this case equal to 1,

28
00:01:20.830 --> 00:01:25.140
which is the minimal amount of capacity we can assign to this stream.

29
00:01:25.140 --> 00:01:28.040
Now remember that Kinesis streams aren't necessarily

30
00:01:28.040 --> 00:01:29.650
included in the AWS free tier,

31
00:01:29.650 --> 00:01:33.040
so be sure to delete these resources when we're done with this demo.

32
00:01:33.040 --> 00:01:34.780
I'll show you how towards the end.

33
00:01:34.780 --> 00:01:38.820
So, in order to create the stream, we can just run this operation here,

34
00:01:38.820 --> 00:01:40.970
and we should get a response that says, okay,

35
00:01:40.970 --> 00:01:42.080
this request was successful.

36
00:01:42.080 --> 00:01:47.880
In this case, you can tell this by looking at the HTTPStatusCode of 200.

37
00:01:47.880 --> 00:01:51.570
Now, once this request has gone through, we can go back to the AWS console.

38
00:01:51.570 --> 00:01:55.500
Now, we won't initially see the data stream until we refresh the page,

39
00:01:55.500 --> 00:01:59.220
because right now it needs to be creating the data stream in the background.

40
00:01:59.220 --> 00:02:01.600
Now, it's possible that if we take too long,

41
00:02:01.600 --> 00:02:03.380
it might already be an active stream,

42
00:02:03.380 --> 00:02:06.250
but you might also see this in the creating state.

43
00:02:06.250 --> 00:02:09.260
So, as soon as it's done and is in the active stream,

44
00:02:09.260 --> 00:02:11.650
and there's no issues with the creation process,

45
00:02:11.650 --> 00:02:13.310
then we can go on to the next step.

46
00:02:13.310 --> 00:02:15.190
Now, this might take up to a few minutes,

47
00:02:15.190 --> 00:02:18.210
so just make sure you go back to the AWS console and confirm

48
00:02:18.210 --> 00:02:20.740
it's in the active state before you continue.

49
00:02:20.740 --> 00:02:23.950
Now back in my VS Code editor, we can move on to the next step,

50
00:02:23.950 --> 00:02:26.340
which will be to create a function that's going to put

51
00:02:26.340 --> 00:02:28.380
data inside of the Kinesis stream.

52
00:02:28.380 --> 00:02:29.510
Inside of here,

53
00:02:29.510 --> 00:02:32.990
it's going to allow us to create a record with a sale_id that

54
00:02:32.990 --> 00:02:36.300
is a randomly generated uuid; a timestamp,

55
00:02:36.300 --> 00:02:40.540
which will be an epoch value; and a product_sold value,

56
00:02:40.540 --> 00:02:43.690
which will just be a random.choice from one of these products that we expect

57
00:02:43.690 --> 00:02:47.040
these online vendors to be able to sell for Globomantics.

58
00:02:47.040 --> 00:02:50.340
Now, the rest of what it's doing is determining a number of items

59
00:02:50.340 --> 00:02:52.990
that are associated with that particular product,

60
00:02:52.990 --> 00:02:57.730
so are you buying 3 jeans or 1 jean or 2 shirts or something else like that.

61
00:02:57.730 --> 00:03:02.870
From here, it runs the kinesis.put_record operation with the stream_name,

62
00:03:02.870 --> 00:03:05.960
which is the stream_name we defined earlier, and then it dumps out the

63
00:03:05.960 --> 00:03:09.610
record that we just created in this function and it sends it into a

64
00:03:09.610 --> 00:03:12.540
particular partition inside of the Kinesis stream.

65
00:03:12.540 --> 00:03:13.700
So, that's really it.

66
00:03:13.700 --> 00:03:17.860
It goes in and creates a random piece of data and then sends it over to Kinesis.

67
00:03:17.860 --> 00:03:22.240
So let's copy this entire function and put it into our terminal here. Inside

68
00:03:22.240 --> 00:03:25.050
of our Python interpreter, we'll paste it in and hit Enter,

69
00:03:25.050 --> 00:03:28.040
and this will have us use this function later on.

70
00:03:28.040 --> 00:03:33.310
So now, on line 43, we can actually have this go through and send a bunch

71
00:03:33.310 --> 00:03:37.310
of different automatically generated records into our stream to mimic the

72
00:03:37.310 --> 00:03:40.060
sales of products inside of a web back end.

73
00:03:40.060 --> 00:03:41.740
Now keep your terminal open here,

74
00:03:41.740 --> 00:03:48.000
and in the next video we'll start sending data into Kinesis data streams using this function.

