WEBVTT
1
00:00:01.040 --> 00:00:04.460
Let's take a look at a few of the ways that we can use Kinesis Firehose to

2
00:00:04.460 --> 00:00:08.480
send data to an Amazon ElasticSearch service destination.

3
00:00:08.480 --> 00:00:12.140
Now keep in mind that this is the Amazon ElasticSearch service, not

4
00:00:12.140 --> 00:00:14.840
any ElasticSearch cluster anywhere in the world.

5
00:00:14.840 --> 00:00:16.110
So to get started,

6
00:00:16.110 --> 00:00:17.920
let's look at some of the entities we might interact

7
00:00:17.920 --> 00:00:20.040
with when taking this approach.

8
00:00:20.040 --> 00:00:23.530
First, we might have a Kinesis Firehose already set up.

9
00:00:23.530 --> 00:00:25.300
If we don't have one, we'll have to create it.

10
00:00:25.300 --> 00:00:25.960
Also,

11
00:00:25.960 --> 00:00:29.350
we'll need an Amazon ElasticSearch service cluster already set

12
00:00:29.350 --> 00:00:33.090
up too. And we might have an S3 bucket. And I'll get to how we

13
00:00:33.090 --> 00:00:34.620
might use this in a little bit.

14
00:00:34.620 --> 00:00:38.360
But to start, let's imagine data comes into our Kinesis Firehose.

15
00:00:38.360 --> 00:00:41.310
It'll either fill up the buffer size or the buffer interval

16
00:00:41.310 --> 00:00:44.160
will run out, and then that will trigger data to go from

17
00:00:44.160 --> 00:00:46.990
Kinesis Firehose to Amazon ElasticSearch.

18
00:00:46.990 --> 00:00:48.540
Now this is the simplest of examples,

19
00:00:48.540 --> 00:00:51.860
but it might be what ends up happening. Now, alternatively,

20
00:00:51.860 --> 00:00:55.000
we might have data that starts in Kinesis Firehose, and some of

21
00:00:55.000 --> 00:00:57.240
it gets moved over to Amazon ElasticSearch.

22
00:00:57.240 --> 00:01:01.020
But a particular record or a few different records might cause an issue

23
00:01:01.020 --> 00:01:04.400
when they're trying to get ingested into ElasticSearch.

24
00:01:04.400 --> 00:01:05.450
In that case,

25
00:01:05.450 --> 00:01:09.250
the data would then be sent from Kinesis Firehose to an S3 bucket

26
00:01:09.250 --> 00:01:12.710
where we could look at it more closely and determine why it failed

27
00:01:12.710 --> 00:01:15.880
to get indexed in Amazon ElasticSearch.

28
00:01:15.880 --> 00:01:18.090
Now we could do a few other things too.

29
00:01:18.090 --> 00:01:21.340
Let's imagine we started out with the same setup with our data.

30
00:01:21.340 --> 00:01:24.590
Now instead of sending it to Amazon ElasticSearch right away,

31
00:01:24.590 --> 00:01:27.620
we might send it to Lambda and do something pretty similar to the

32
00:01:27.620 --> 00:01:30.370
other ways we've use Lambda where we take that data,

33
00:01:30.370 --> 00:01:34.600
we have Lambda functions go ahead and act on it and change it around.

34
00:01:34.600 --> 00:01:38.070
And then we might have records that we've modified, like the green

35
00:01:38.070 --> 00:01:40.920
record here, or records that we've dropped, like the purple one, that

36
00:01:40.920 --> 00:01:43.040
simply disappears and we don't send it anywhere.

37
00:01:43.040 --> 00:01:45.750
And we could have the same sort of failures happen in the

38
00:01:45.750 --> 00:01:48.300
transformation stage that we had when we were trying to

39
00:01:48.300 --> 00:01:50.150
send it to Amazon ElasticSearch.

40
00:01:50.150 --> 00:01:50.920
In this case,

41
00:01:50.920 --> 00:01:54.700
we'd send the successfully transformed data to Amazon ElasticSearch

42
00:01:54.700 --> 00:01:57.740
and then send the failed data to an S3 bucket so that we could look

43
00:01:57.740 --> 00:02:00.050
at it more closely, and we'd know that it failed at the

44
00:02:00.050 --> 00:02:03.080
transformation stage because Lambda and Kinesis Firehose would

45
00:02:03.080 --> 00:02:06.240
label it like that for us.

46
00:02:06.240 --> 00:02:09.890
Now we could have all this process happen basically identically,

47
00:02:09.890 --> 00:02:14.430
except before we send data anywhere, we send a backup copy of it to the S3

48
00:02:14.430 --> 00:02:18.450
bucket without any changes and including all the data just in case we didn't

49
00:02:18.450 --> 00:02:22.060
want to throw any particular records away when we either sent them to Amazon

50
00:02:22.060 --> 00:02:26.760
ElasticSearch or we changed them around using Lambda. You'll see some similar

51
00:02:26.760 --> 00:02:30.290
patterns when we take a look at other destinations that we can use with Kinesis

52
00:02:30.290 --> 00:02:36.000
Firehose. In the next video, let's take a look at Amazon Redshift as a destination.

