WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.190 --> 00:00:05.010
The controlled method we looked at in the last video,

00:00:05.010 --> 00:00:08.175
is the generally preferred way to handle forms.

00:00:08.175 --> 00:00:13.080
Since react is in full control and can also handle any updates.

00:00:13.080 --> 00:00:17.865
Now we will discover an alternative way of creating a form in react,

00:00:17.865 --> 00:00:21.195
and this is called an uncontrolled component.

00:00:21.195 --> 00:00:25.470
This way, the form data is handled by the DOM and it can be

00:00:25.470 --> 00:00:30.840
a useful alternative to avoid writing event handlers for every form inputs.

00:00:30.840 --> 00:00:35.455
For this example, we will build in the forms and a new list.

00:00:35.455 --> 00:00:39.150
We do this over in the board.js components,

00:00:39.150 --> 00:00:40.625
and on this slide here,

00:00:40.625 --> 00:00:44.045
this is the new list inputs we see at the bottom left,

00:00:44.045 --> 00:00:49.510
so looking at this at the bottom of the bowl components after the list wrapper div.

00:00:49.510 --> 00:00:55.445
Let's head over there now into our project in Visual Studio Code.

00:00:55.445 --> 00:00:58.145
Let's open up the board.js,

00:00:58.145 --> 00:01:04.265
and then if we go to the closing div for this list wrapper which is this one here.

00:01:04.265 --> 00:01:06.610
We can then create our form.

00:01:06.610 --> 00:01:11.270
Inside this form, we're going to add a submit event handler.

00:01:11.270 --> 00:01:15.335
On Submit isn't going to fire off a custom method,

00:01:15.335 --> 00:01:16.985
which is called the star,

00:01:16.985 --> 00:01:18.940
creates a new list.

00:01:18.940 --> 00:01:21.530
If we scroll up to the top of these components,

00:01:21.530 --> 00:01:24.920
we already have create new lists inside of our methods,

00:01:24.920 --> 00:01:27.650
so we can make use of this very soon.

00:01:27.650 --> 00:01:30.740
After this, we can also add a class name for

00:01:30.740 --> 00:01:35.790
our styling and set this to new list wrapper.

00:01:39.650 --> 00:01:44.675
Now after the former gone to nest inside a form input,

00:01:44.675 --> 00:01:50.280
the input is going to have the type of text it self closes.

00:01:50.280 --> 00:01:53.530
On new line we can add the type of text.

00:01:53.530 --> 00:01:56.240
Since all we receive in by the user is

00:01:56.240 --> 00:02:01.020
the text inputs for a new list, we also need a name.

00:02:01.020 --> 00:02:03.465
We can simply call his name,

00:02:03.465 --> 00:02:08.300
and then a placeholder value to let the user know exactly what's typing

00:02:08.300 --> 00:02:14.070
and add a plus symbol and then the text off new list.

00:02:14.410 --> 00:02:18.590
Here, currently we have our surrounded div,

00:02:18.590 --> 00:02:21.460
followed by a form element just afterwards.

00:02:21.460 --> 00:02:26.270
As we already know, react won't let us do this because it needs a parent's elements.

00:02:26.270 --> 00:02:29.240
That's add a div as a wrapper.

00:02:29.240 --> 00:02:34.800
Let's cross out the closing tag and places just after our form.

00:02:36.310 --> 00:02:40.405
Let's save this, and then over to the browser.

00:02:40.405 --> 00:02:44.455
Inside the browser we have our new list on inputs,

00:02:44.455 --> 00:02:47.030
and also this button which we have from earlier,

00:02:47.030 --> 00:02:49.190
which is triggering the same method.

00:02:49.190 --> 00:02:51.950
Let's go down into our random method.

00:02:51.950 --> 00:02:57.125
We can remove this button from earlier since we now have our form input.

00:02:57.125 --> 00:03:00.435
Then scroll up to our create new list method,

00:03:00.435 --> 00:03:02.155
which will set the state.

00:03:02.155 --> 00:03:06.200
Since in this version we're not using state to manage the form inputs,

00:03:06.200 --> 00:03:12.025
we need a way to access the DOM elements and then set them to this list object,

00:03:12.025 --> 00:03:18.295
ie we need to grab the input which the user has entered and set this to our list object,

00:03:18.295 --> 00:03:21.695
and react gives us a way to do this using refs.

00:03:21.695 --> 00:03:26.345
Refs are ways access to the DOM and they give us all the information we need,

00:03:26.345 --> 00:03:29.950
including the value entered into a form input.

00:03:29.950 --> 00:03:34.545
We can create a new ref with the create ref method.

00:03:34.545 --> 00:03:37.200
Let's do this above create new lists.

00:03:37.200 --> 00:03:39.075
We give our ref name,

00:03:39.075 --> 00:03:41.995
I want to call mine addboardinputs.

00:03:41.995 --> 00:03:48.510
To keep the descriptive name can set a ref with react.create ref,

00:03:49.360 --> 00:03:52.340
and the brackets used afterwards.

00:03:52.340 --> 00:03:56.690
We can then pass it to our inputs as a ref attributes.

00:03:56.690 --> 00:03:59.545
Let's call onboard inputs,

00:03:59.545 --> 00:04:03.665
go down to the elements which you want the information from.

00:04:03.665 --> 00:04:06.335
I'm going to add this anywhere as an attribute.

00:04:06.335 --> 00:04:12.745
We can set the ref equal to these dots add board input.

00:04:12.745 --> 00:04:17.240
This will attach this reference to this HTML input,

00:04:17.240 --> 00:04:20.420
and we can access it above in our method to drop

00:04:20.420 --> 00:04:25.040
the properties which we need up in it creates a new list.

00:04:25.040 --> 00:04:29.195
We can also now pass in the event info with the e variable,

00:04:29.195 --> 00:04:32.645
then we can access this to prevent the default behavior.

00:04:32.645 --> 00:04:37.070
This will basically stop the page from reloading when we submit the form.

00:04:37.070 --> 00:04:42.440
To test this, I'm going to comment out the code and then console log the ref.

00:04:42.440 --> 00:04:49.710
Let's remove the set states and also our list,

00:04:50.390 --> 00:04:59.070
and assume a console log with the value of our ref, which is this,.addBoardInputs.

00:04:59.200 --> 00:05:03.390
We don't need the semicolon, so let's go to the browser.

00:05:04.970 --> 00:05:07.460
We have an arrow inside of the board,

00:05:07.460 --> 00:05:11.220
so we got the brand new list,

00:05:12.170 --> 00:05:16.350
uncomment out this closing brace, and there we go.

00:05:16.350 --> 00:05:18.305
Now inside of our new list,

00:05:18.305 --> 00:05:20.525
without anything inside here,

00:05:20.525 --> 00:05:24.140
go to the console, and then we get the value of our ref,

00:05:24.140 --> 00:05:26.770
which points to our current input.

00:05:26.770 --> 00:05:30.425
Now is a lot of information about the input just here.

00:05:30.425 --> 00:05:34.145
But the one we're particularly interested in is the current value,

00:05:34.145 --> 00:05:36.350
so up in our console log,

00:05:36.350 --> 00:05:39.360
we can now release down to.current.value.

00:05:39.670 --> 00:05:43.735
This will give us the value entered by the user,

00:05:43.735 --> 00:05:46.890
let's type anything into this input.

00:05:46.890 --> 00:05:50.410
We now get the text which has been entered by the user.

00:05:50.410 --> 00:05:54.615
Back over to our ball, we can now uncomment out this code.

00:05:54.615 --> 00:05:57.890
That's like all the lines when commented out,

00:05:57.890 --> 00:06:01.900
which is the list, all the way down to set state.

00:06:01.900 --> 00:06:05.470
We can also remove the console log,

00:06:05.780 --> 00:06:12.190
and now we can use the ref value inside our title instead of this hard-coded value.

00:06:12.190 --> 00:06:15.405
We can do this by removing the string,

00:06:15.405 --> 00:06:19.725
and then instead we can point to this.addBoardInputs,

00:06:19.725 --> 00:06:22.130
and then just as we've seen before in the console log,

00:06:22.130 --> 00:06:24.310
we can grab the current value.

00:06:24.310 --> 00:06:29.380
Now save this and let's go over to the browser.

00:06:29.380 --> 00:06:32.060
Let's try anything inside here,

00:06:32.060 --> 00:06:35.980
new list two, and now again error.

00:06:35.980 --> 00:06:39.920
The reason for this is over in the list components.

00:06:39.920 --> 00:06:44.985
Inside here we're looping through any available cards inside of our list.

00:06:44.985 --> 00:06:47.530
However, inside of this ball components,

00:06:47.530 --> 00:06:49.615
when we create a new list,

00:06:49.615 --> 00:06:53.140
we have no card's setup inside this object.

00:06:53.140 --> 00:06:57.590
Therefore, react cannot find any values and causes an error.

00:06:57.590 --> 00:07:01.360
Later on if I based these cars will separate from the lists,

00:07:01.360 --> 00:07:02.935
so as a temporary measure,

00:07:02.935 --> 00:07:07.280
I'm going to add some simple cards when creating a new list.

00:07:07.280 --> 00:07:11.710
Just after new days we'll temporarily add in

00:07:11.710 --> 00:07:16.795
some cards which is going to be an array of objects.

00:07:16.795 --> 00:07:19.175
Let's add id 1,

00:07:19.175 --> 00:07:22.865
some text and say card 1.

00:07:22.865 --> 00:07:26.800
Separate by common, we can add a second object with an id of

00:07:26.800 --> 00:07:32.270
2 and also some text of card 2,

00:07:32.690 --> 00:07:37.290
and also add the comma just after created at.

00:07:37.290 --> 00:07:39.630
Let's go to the browser,

00:07:39.630 --> 00:07:45.105
and now if we add a new list, it answers.

00:07:45.105 --> 00:07:48.580
The new list is now added inside the browser.

00:07:48.580 --> 00:07:50.450
Just before we wrap this up,

00:07:50.450 --> 00:07:52.910
there is a few small issues to fix.

00:07:52.910 --> 00:07:58.025
First of all, if we delete the contents from our form inputs and hit enter,

00:07:58.025 --> 00:08:00.875
we see we can now add an empty list,

00:08:00.875 --> 00:08:05.750
and also number 2 the input doesn't clear after we add a new list.

00:08:05.750 --> 00:08:11.315
Hit enter, and we want this value to be then cleared for the next list.

00:08:11.315 --> 00:08:14.240
These are pretty simple things to fix.

00:08:14.240 --> 00:08:17.960
First, we can add a if statement to check if the title is present,

00:08:17.960 --> 00:08:20.365
before we set a state.

00:08:20.365 --> 00:08:23.900
We can do this in side of the board.js.

00:08:23.900 --> 00:08:27.365
Let's look for our set fake call, which is just here.

00:08:27.365 --> 00:08:34.470
On the line above we can create an if statement to check if the list.title is present.

00:08:34.520 --> 00:08:39.815
If this.set state and then move this inside,

00:08:39.815 --> 00:08:43.595
this will enter, stop an empty list being added.

00:08:43.595 --> 00:08:45.460
We can test this.

00:08:45.460 --> 00:08:47.540
If we hit enter on this new list,

00:08:47.540 --> 00:08:50.515
we see that no new list has been added.

00:08:50.515 --> 00:08:54.785
Next one is clear the input after we submit a new list,

00:08:54.785 --> 00:08:58.430
we can do this over inside of the board,.js.

00:08:58.430 --> 00:09:00.860
Just after this stage,

00:09:00.860 --> 00:09:08.455
we can refresh or reset the value of our ref so these dots are board input.

00:09:08.455 --> 00:09:11.045
We can set the column value,

00:09:11.045 --> 00:09:17.580
just like we used before to be equal to an empty string. Test this out.

00:09:17.580 --> 00:09:19.815
Anything inside here.

00:09:19.815 --> 00:09:23.550
And now our new list inputs is now empty.

00:09:23.550 --> 00:09:26.930
Now this is working, we can get a little bit more practice in

00:09:26.930 --> 00:09:31.230
the next video by creating the new card form.
