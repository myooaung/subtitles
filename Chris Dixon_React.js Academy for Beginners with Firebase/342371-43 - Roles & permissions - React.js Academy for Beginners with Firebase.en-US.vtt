WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.100 --> 00:00:05.730
Now it's time to add some security rules to our database.

00:00:05.730 --> 00:00:10.125
Showing and hiding things on the front end when a user is logged in,

00:00:10.125 --> 00:00:13.695
is fine for keeping the user interface looking as it should.

00:00:13.695 --> 00:00:17.760
But we also need to setup our backend security just in

00:00:17.760 --> 00:00:22.710
case somebody bypasses these by creating a fake or modified request.

00:00:22.710 --> 00:00:25.980
This means the database will only send data when

00:00:25.980 --> 00:00:29.205
the user is logged in and only show the cards,

00:00:29.205 --> 00:00:32.610
listen boards, if they match the current user.

00:00:32.610 --> 00:00:36.000
I've gone ahead and removed the lists and cards

00:00:36.000 --> 00:00:39.525
from our database to give us a clean start for this video,

00:00:39.525 --> 00:00:41.905
since we're going to be adding a new field.

00:00:41.905 --> 00:00:45.020
The new field we're going to be adding is going to be just

00:00:45.020 --> 00:00:48.340
like the boards where we added a user ID.

00:00:48.340 --> 00:00:52.205
We're going to begin over in the boards.js components,

00:00:52.205 --> 00:00:54.350
where we create a new list.

00:00:54.350 --> 00:00:56.750
Inside here when we create a new list,

00:00:56.750 --> 00:01:00.880
we can make use of this user which is passed in via the context.

00:01:00.880 --> 00:01:07.385
To do this, let's scroll down to our form and on the onSubmit method,

00:01:07.385 --> 00:01:10.305
we're currently calling the createNewList method.

00:01:10.305 --> 00:01:16.025
I'm going to cut this out and then add a inline function inside here,

00:01:16.025 --> 00:01:18.835
which is going to take in the event information.

00:01:18.835 --> 00:01:24.820
Adding this inline will allow us to pass the user ID when calling this method.

00:01:24.820 --> 00:01:28.420
We can add back in our createNewList method,

00:01:28.420 --> 00:01:33.845
passing in the event information and also the user.id.

00:01:33.845 --> 00:01:39.460
Now with this we can go up to createNewList outside of the render,

00:01:39.460 --> 00:01:41.625
which is just inside of here.

00:01:41.625 --> 00:01:44.555
We currently receiving the event information,

00:01:44.555 --> 00:01:51.405
we also need to receive the user ID as a second parameter just after our events.

00:01:51.405 --> 00:01:53.060
Then when we create a new list,

00:01:53.060 --> 00:01:55.385
we want to add the user field,

00:01:55.385 --> 00:01:58.290
which is going to be equal to this userId,

00:01:59.330 --> 00:02:02.640
and the same for adding a new card too.

00:02:02.640 --> 00:02:06.185
Let's go to the list.js components.

00:02:06.185 --> 00:02:09.725
Inside here we currently not using any context.

00:02:09.725 --> 00:02:15.060
Let's begin by importing the off consumer at the top of this file.

00:02:15.320 --> 00:02:18.135
Let's go up to the very top.

00:02:18.135 --> 00:02:26.685
We can import Authconsumer from the file path which is.

00:02:26.685 --> 00:02:32.120
/AuthContext. Scroll down and we can now

00:02:32.120 --> 00:02:37.555
make use of this AuthConsumer component to wrap our code inside of the random method.

00:02:37.555 --> 00:02:41.200
Just have to return create our AuthConsumer,

00:02:41.200 --> 00:02:43.285
which has an opening and closing tag.

00:02:43.285 --> 00:02:45.364
Then we can create our function,

00:02:45.364 --> 00:02:50.155
which is going to be the child passing in the user inside of the curly braces.

00:02:50.155 --> 00:02:52.874
Setup the rest of our function.

00:02:52.874 --> 00:02:57.860
Then we can grab the rest of our code from this div with the class of list.

00:02:57.860 --> 00:02:59.675
Let's grab all of this,

00:02:59.675 --> 00:03:03.995
all the way down to the closing div. We can cut this out.

00:03:03.995 --> 00:03:07.530
Then paste this inside of our function.

00:03:07.940 --> 00:03:11.795
Now have access to the user via our context.

00:03:11.795 --> 00:03:14.735
If we now scroll down to where we create a new card,

00:03:14.735 --> 00:03:17.750
we can do exactly what we did in the last video.

00:03:17.750 --> 00:03:22.210
We put out our current method from the onSubmit.

00:03:22.210 --> 00:03:26.590
We can then pass in an inline function take in the event information,

00:03:26.590 --> 00:03:31.250
calling createNewCard, and then passing in the event information.

00:03:31.250 --> 00:03:33.605
Then also the user.id,

00:03:33.605 --> 00:03:36.695
which was passed in from context.

00:03:36.695 --> 00:03:40.825
Helping createNewCard, this is going to now receive this userId.

00:03:40.825 --> 00:03:45.675
We can pass this in as the second argument.

00:03:45.675 --> 00:03:48.415
Then just after createdAt,

00:03:48.415 --> 00:03:51.390
we can also add our user field,

00:03:51.530 --> 00:03:55.585
which is going to be equal to the userId.

00:03:55.585 --> 00:03:59.525
It is now in place. We can give this a try over in the browser.

00:03:59.525 --> 00:04:03.710
Let's head over to our projects and we can create a new board.

00:04:03.710 --> 00:04:08.560
Let's just go for a, b,

00:04:08.630 --> 00:04:11.565
and also log out.

00:04:11.565 --> 00:04:14.940
We can now sign in with a different user.

00:04:16.960 --> 00:04:22.470
We now redirected, that's at c and also

00:04:22.470 --> 00:04:27.740
d. Now this is going to leave us with various boards for different users.

00:04:27.740 --> 00:04:31.720
We can also add some lists and cards to test this out too.

00:04:31.720 --> 00:04:35.890
In fact, we want to go to one of the boards which was created.

00:04:35.890 --> 00:04:39.905
Let's go for c, so 1, 2,

00:04:39.905 --> 00:04:47.120
and 3 and add some cards inside here all to the console.

00:04:47.120 --> 00:04:51.415
Let's now refresh and take a look at our new descent cards.

00:04:51.415 --> 00:04:57.195
Let's go through all cards to begin with and we now have the user Id linked in these.

00:04:57.195 --> 00:04:59.955
Let's just check the list are working too.

00:04:59.955 --> 00:05:02.410
These are all working fine.

00:05:02.410 --> 00:05:04.340
Now we have these user fields.

00:05:04.340 --> 00:05:06.280
We can add our permissions.

00:05:06.280 --> 00:05:12.385
Let's click on the rules tab and we can set these inside of the database. Click on this.

00:05:12.385 --> 00:05:17.600
These default rules will allow anybody to read and write to our database,

00:05:17.600 --> 00:05:20.800
regardless of if they are registered or not.

00:05:20.800 --> 00:05:24.365
My install will allow us to match documents or collections,

00:05:24.365 --> 00:05:27.455
and also setup rules for each when reading,

00:05:27.455 --> 00:05:30.985
creating, updating, or deleting data.

00:05:30.985 --> 00:05:34.760
We first have this surrounding outer match,

00:05:34.760 --> 00:05:37.655
which will point to our database documents.

00:05:37.655 --> 00:05:41.375
You can think of this as a file path to our database.

00:05:41.375 --> 00:05:44.645
These curly braces which we have inside of here,

00:05:44.645 --> 00:05:46.985
are basically variables which can change,

00:05:46.985 --> 00:05:49.630
such as the document Id.

00:05:49.630 --> 00:05:52.280
Then nested inside, we can specify

00:05:52.280 --> 00:05:56.435
certain documents or collections which you want to secure.

00:05:56.435 --> 00:06:01.055
This example is pointing to all of the documents in our database.

00:06:01.055 --> 00:06:03.175
It's a pretty general rule.

00:06:03.175 --> 00:06:06.710
Then inside here we are allowing anybody to read and write to

00:06:06.710 --> 00:06:10.730
our database and of course this is not very secure.

00:06:10.730 --> 00:06:14.390
I have provided with this course a set of rules which you can use to

00:06:14.390 --> 00:06:18.255
replace these and I have these available on my desktop.

00:06:18.255 --> 00:06:20.990
I'm going to open these up.

00:06:21.290 --> 00:06:23.745
This is a text file.

00:06:23.745 --> 00:06:25.190
If you haven't done so yet,

00:06:25.190 --> 00:06:27.905
go ahead and download these from the course,

00:06:27.905 --> 00:06:31.025
and I'm going to copy all of these.

00:06:31.025 --> 00:06:36.175
Go back over to our database and then paste these in place.

00:06:36.175 --> 00:06:40.610
We can then hit publish to apply these to our database.

00:06:40.610 --> 00:06:44.090
These rules are broken down into three sections,

00:06:44.090 --> 00:06:46.644
one for each one of our collections.

00:06:46.644 --> 00:06:48.975
We'll have the match section which is here,

00:06:48.975 --> 00:06:52.535
where we going to match all the documents inside of our boards collection.

00:06:52.535 --> 00:06:56.560
We also have the same for our lists and also our cards.

00:06:56.560 --> 00:07:01.565
Nested inside of here we have various rules for when we want to read data,

00:07:01.565 --> 00:07:03.515
create or update data,

00:07:03.515 --> 00:07:06.579
and also delete anything from our database.

00:07:06.579 --> 00:07:10.180
Two things to note here when using these Firebase rules,

00:07:10.180 --> 00:07:12.130
we have both a request,

00:07:12.130 --> 00:07:15.444
which we see here, and a resource object,

00:07:15.444 --> 00:07:18.685
which we use quite a lot inside of these rules.

00:07:18.685 --> 00:07:23.560
This resource object contains data which currently lives in our database,

00:07:23.560 --> 00:07:27.545
such as here where we're grabbing at the board and then the user field.

00:07:27.545 --> 00:07:30.910
We then have the request object, which is just here.

00:07:30.910 --> 00:07:34.150
This request object contains an off object nested

00:07:34.150 --> 00:07:38.495
inside which holds information about the current logged in user.

00:07:38.495 --> 00:07:41.380
This line of code is checking if the current logged in

00:07:41.380 --> 00:07:44.965
user matches the user Id linked with the board.

00:07:44.965 --> 00:07:49.005
If it does, it will allow the user to read from the database.

00:07:49.005 --> 00:07:50.540
If there is no match,

00:07:50.540 --> 00:07:55.760
the request will fail and the user cannot read the information which they are requesting.

00:07:55.760 --> 00:08:00.650
Next, we have some rules for creating or updating the board.

00:08:00.650 --> 00:08:02.884
They can be also kept separate,

00:08:02.884 --> 00:08:06.230
but in our case, it will contain the same set of rules.

00:08:06.230 --> 00:08:08.260
I've grouped them together.

00:08:08.260 --> 00:08:13.160
We said before that this request object contains the incoming data.

00:08:13.160 --> 00:08:17.750
Request also has a resource object too which we're use in here,

00:08:17.750 --> 00:08:22.990
and this contains the data we are sending when creating or updating our boards.

00:08:22.990 --> 00:08:26.585
Accessing these will allow us to provide some validation

00:08:26.585 --> 00:08:30.775
to check that the data is formatted correctly before saving.

00:08:30.775 --> 00:08:34.370
Here we check in if the boards title is a string,

00:08:34.370 --> 00:08:36.545
we checking if the background is a string,

00:08:36.545 --> 00:08:39.350
the created At field is a timestamp,

00:08:39.350 --> 00:08:42.800
and also checking if the user which we've added to

00:08:42.800 --> 00:08:47.630
the board object is also equal to the user which is logged in.

00:08:47.630 --> 00:08:51.335
Then we only allow users to actually delete a board

00:08:51.335 --> 00:08:55.115
if the ball was created by the current logged in user.

00:08:55.115 --> 00:08:57.470
Everything else below is pretty similar.

00:08:57.470 --> 00:09:00.410
We setup a similar set of rules for our cards

00:09:00.410 --> 00:09:04.580
and also our lists to also secure these two.

00:09:04.580 --> 00:09:07.920
Setting up our rules is not too bad.

00:09:07.920 --> 00:09:11.510
Once we understand we adjust often comparing what we have in

00:09:11.510 --> 00:09:16.460
our database using the resource object with the data which is coming in,

00:09:16.460 --> 00:09:20.120
and this is available from the request objects.

00:09:20.120 --> 00:09:25.190
Now if we publish this and go to our project,

00:09:25.190 --> 00:09:27.110
click on the home icon.

00:09:27.110 --> 00:09:31.355
I'm logged in with one user and we can still see the boards which we created.

00:09:31.355 --> 00:09:35.120
Let's open up a second browser with a different user.

00:09:35.120 --> 00:09:38.600
If we refresh, we see the Firebase still

00:09:38.600 --> 00:09:42.110
allows us to access the balls created by each user.

00:09:42.110 --> 00:09:44.780
We can also go into each one of these.

00:09:44.780 --> 00:09:47.770
Let's try checking for our list in cards.

00:09:47.770 --> 00:09:50.280
Let's try deleting information,

00:09:50.280 --> 00:09:52.335
and this is all working.

00:09:52.335 --> 00:09:57.320
We can also test that if we copy a link from one logged in user,

00:09:57.320 --> 00:09:59.045
and paste this in to

00:09:59.045 --> 00:10:04.920
a different browser that we're not allowed to view the board information.

00:10:04.920 --> 00:10:09.710
This is now added some backend security to our application,

00:10:09.710 --> 00:10:13.960
along with some front end checks to keep the user interface in line.

00:10:13.960 --> 00:10:17.585
You can of course, add more complex rules to Firebase,

00:10:17.585 --> 00:10:21.560
but these are a good starting point to only allow logged in users,

00:10:21.560 --> 00:10:26.100
and also the board creators to view their own data.
