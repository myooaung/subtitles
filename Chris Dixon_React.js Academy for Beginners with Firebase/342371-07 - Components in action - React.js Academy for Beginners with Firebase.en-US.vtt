WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.200 --> 00:00:02.625
Back over to our project,

00:00:02.625 --> 00:00:06.550
I'm going to create a components folder in the source directory.

00:00:06.550 --> 00:00:11.865
In the sidebar, let's create a new folder called components.

00:00:11.865 --> 00:00:18.495
This folder is purely for organization and is not a requirement when using react.

00:00:18.495 --> 00:00:22.379
We can also break this up into sub-folders two,

00:00:22.379 --> 00:00:24.375
and we'll do this later in the course.

00:00:24.375 --> 00:00:27.325
For example, you could have a header folder

00:00:27.325 --> 00:00:31.070
inside containing all of the header components and so on.

00:00:31.070 --> 00:00:35.060
If we wanted to, just to keep our files more organized.

00:00:35.060 --> 00:00:37.190
Next, our three components,

00:00:37.190 --> 00:00:40.930
which we looked up from the slides are board, card, and list.

00:00:40.930 --> 00:00:44.635
Inside the Components directory, create a new file.

00:00:44.635 --> 00:00:50.740
The first one is going to be Board.js, uppercase B.

00:00:50.740 --> 00:00:53.060
Again in the components folder,

00:00:53.060 --> 00:00:59.765
the Card.js with capital C. The third one is for

00:00:59.765 --> 00:01:03.980
List.js with a capital L. It is

00:01:03.980 --> 00:01:09.790
a common naming convention to begin a React component with a capital letter.

00:01:09.790 --> 00:01:13.940
First of all, let's go over to the Board.js.

00:01:13.940 --> 00:01:16.420
For each components where we use react,

00:01:16.420 --> 00:01:21.520
we first need to import the React package from the Node Modules folder.

00:01:21.520 --> 00:01:27.780
We can do this with import React from React.

00:01:27.780 --> 00:01:31.110
React here being the name of the Node Module.

00:01:31.110 --> 00:01:35.065
Then this one is an alias which we're going to use in this file.

00:01:35.065 --> 00:01:39.325
Even though we are requiring React every file we use,

00:01:39.325 --> 00:01:42.220
it's only included once in the final build.

00:01:42.220 --> 00:01:46.705
We don't need to worry about multiple copies in our project.

00:01:46.705 --> 00:01:50.635
Also, if we just add the module name, just like react,

00:01:50.635 --> 00:01:52.975
rather than using a file path,

00:01:52.975 --> 00:01:57.835
it will be assumed that this is stored in the Node Modules folder.

00:01:57.835 --> 00:02:01.690
Next, we need to create a class which looks like this.

00:02:01.690 --> 00:02:10.155
The class name of Board extends React dot Components.

00:02:10.155 --> 00:02:13.030
Then open up the curly braces.

00:02:13.030 --> 00:02:17.165
This is a typical React class-based components.

00:02:17.165 --> 00:02:20.570
Later on, we'll also look at another type of component.

00:02:20.570 --> 00:02:22.070
But for now we're going to be using

00:02:22.070 --> 00:02:27.765
a class-based component as it has a few extra features which we'll get into.

00:02:27.765 --> 00:02:32.995
Then at the bottom after these curly braces, export default,

00:02:32.995 --> 00:02:35.925
another name of our class which is Board,

00:02:35.925 --> 00:02:42.700
export in this components will then allow it to be imported and reused in other files.

00:02:42.700 --> 00:02:49.595
Above we are extending or inheriting all of the properties from React dot Components.

00:02:49.595 --> 00:02:54.025
React dot Components will give us access to various optional methods,

00:02:54.025 --> 00:02:56.005
such as life-cycle methods,

00:02:56.005 --> 00:02:57.550
which we'll get into soon.

00:02:57.550 --> 00:03:01.295
But the one which is required is the render method.

00:03:01.295 --> 00:03:03.625
The render method, as it sounds,

00:03:03.625 --> 00:03:07.610
is one which we need to render some JSX to the browser.

00:03:07.610 --> 00:03:10.675
Let's add the random method inside here,

00:03:10.675 --> 00:03:13.405
which is going to return some data.

00:03:13.405 --> 00:03:18.215
The data we're going to return is going to be some simple JSX code.

00:03:18.215 --> 00:03:24.045
Let's add some HTMLP elements with the text of board components.

00:03:24.045 --> 00:03:28.610
If we save this file and then go over to the browser,

00:03:28.610 --> 00:03:32.705
and we don't see any of the board components on the screen.

00:03:32.705 --> 00:03:34.760
To be able to see this,

00:03:34.760 --> 00:03:38.125
we need to tell React where we want this to be placed.

00:03:38.125 --> 00:03:41.820
Let's go for the parent's app.js,

00:03:41.820 --> 00:03:46.445
since we've exported this board components down at the very bottom,

00:03:46.445 --> 00:03:50.065
we can now import it into the file where we want to use it.

00:03:50.065 --> 00:03:54.330
We're going to do this in the app.js,

00:03:54.330 --> 00:03:57.915
need to import our board components.

00:03:57.915 --> 00:04:00.700
Since this is not a Node Module,

00:04:00.700 --> 00:04:03.670
we also need to specify the file path.

00:04:03.670 --> 00:04:08.385
This is inside of the components folder and the name was Board.

00:04:08.385 --> 00:04:12.760
We don't need the dot js extension since this is assumed.

00:04:12.760 --> 00:04:17.315
We can then place this board components exactly where we want it to display.

00:04:17.315 --> 00:04:20.985
Let's go and place of the text which we added earlier.

00:04:20.985 --> 00:04:27.340
Slash remove this and then the name of our component which was Board.

00:04:27.340 --> 00:04:29.615
This is a self-closing element.

00:04:29.615 --> 00:04:32.315
Which means add the forward slash at the end.

00:04:32.315 --> 00:04:36.695
This is how we can place a component into our code using React.

00:04:36.695 --> 00:04:39.770
It just looks like a self-closing HTML tag,

00:04:39.770 --> 00:04:41.555
such as an image.

00:04:41.555 --> 00:04:43.325
As a quick side note,

00:04:43.325 --> 00:04:47.585
you may have noticed this app.js file has no render method.

00:04:47.585 --> 00:04:51.785
This is because it's called a functional based component,

00:04:51.785 --> 00:04:54.675
and we'll take a look at these later on.

00:04:54.675 --> 00:04:58.865
Let's save this file and head back over to the browser.

00:04:58.865 --> 00:05:04.610
We can now see our board component is playing in place of our text.

00:05:04.610 --> 00:05:09.140
You can also now do the same for the list component too.

00:05:09.140 --> 00:05:12.045
Back over to the side bar,

00:05:12.045 --> 00:05:15.190
go to the List.js.

00:05:15.190 --> 00:05:20.730
Just as before, we need to first import React from react.

00:05:21.110 --> 00:05:26.635
This is also going to be a class-based components which is going to be called List.

00:05:26.635 --> 00:05:31.160
This will also extend React dot components.

00:05:31.640 --> 00:05:36.365
We can then use all of the methods which is provided by React.

00:05:36.365 --> 00:05:41.810
Inside here we're also going to add the render method to display our JSX on the screen.

00:05:41.810 --> 00:05:46.490
We are then going to return some JSX inside here.

00:05:46.490 --> 00:05:52.450
Just like before some simple text will do to just list component.

00:05:52.450 --> 00:05:58.585
Then right out at the end we also need to export default,

00:05:58.585 --> 00:06:00.530
the name of our component,

00:06:00.530 --> 00:06:02.345
which is going to be List.

00:06:02.345 --> 00:06:06.515
This will be nested inside of the board components.

00:06:06.515 --> 00:06:10.525
You can import it inside of the Board.js,

00:06:10.525 --> 00:06:14.080
save this file and head over to the Board.

00:06:14.080 --> 00:06:21.180
Right at the very top we're also going to add an import for our list.

00:06:21.180 --> 00:06:25.355
Again, since this is not inside the Node Modules folder,

00:06:25.355 --> 00:06:27.955
we also need to add the file path.

00:06:27.955 --> 00:06:30.775
This list component is alongside the Board,

00:06:30.775 --> 00:06:34.760
so we'll just add a slash and then the name of list.

00:06:34.760 --> 00:06:39.335
The final step for this to display is to go into our render method,

00:06:39.335 --> 00:06:43.075
and then we can add it as a self-closing element.

00:06:43.075 --> 00:06:45.960
List, as we already know,

00:06:45.960 --> 00:06:51.710
components are reusable, meaning we can add this in as many times as you want.

00:06:51.710 --> 00:06:57.190
Let's duplicate this, and let's save this and go over to the browser.

00:06:57.190 --> 00:07:00.470
I'm see an error inside of the browser.

00:07:00.470 --> 00:07:03.530
Generally, as far as error messages go,

00:07:03.530 --> 00:07:07.250
React is pretty good at letting us know where the problem lies,

00:07:07.250 --> 00:07:10.240
and giving us a hint on how to fix things.

00:07:10.240 --> 00:07:11.790
The error message says,

00:07:11.790 --> 00:07:16.490
"Adjacent JSX elements must be wrapped in an enclosing tag.

00:07:16.490 --> 00:07:19.025
Did you want a JSX fragment?"

00:07:19.025 --> 00:07:22.015
We will look at this JSX fragment soon.

00:07:22.015 --> 00:07:26.090
But this error is basically caused by a component not

00:07:26.090 --> 00:07:30.960
having a wrapper over in the Board.js.

00:07:30.960 --> 00:07:32.330
In our render method,

00:07:32.330 --> 00:07:35.300
we are returning three different elements.

00:07:35.300 --> 00:07:39.505
All these three elements are effectively side-by-side.

00:07:39.505 --> 00:07:41.280
When using React though,

00:07:41.280 --> 00:07:45.675
a component must have one parent element as a wrapper.

00:07:45.675 --> 00:07:48.335
It can be any element which we choose,

00:07:48.335 --> 00:07:50.905
but a div here would be fine.

00:07:50.905 --> 00:07:55.360
Let's add a div, opening tag at the top.

00:07:55.360 --> 00:08:00.175
We can move the closing tag right down to the bottom,

00:08:00.175 --> 00:08:03.425
and then nest inside our three elements.

00:08:03.425 --> 00:08:08.945
If we now save this and go back over to the browser, we see a error.

00:08:08.945 --> 00:08:11.975
This should be extends with an S on the end.

00:08:11.975 --> 00:08:14.555
So to our list.

00:08:14.555 --> 00:08:19.445
There we go. Save this and then over to the browser.

00:08:19.445 --> 00:08:23.480
Now we'll see our board components and then nested inside we have

00:08:23.480 --> 00:08:29.210
our two lists components since we added this into our render method twice.

00:08:29.210 --> 00:08:32.780
We can now move on to the card components,

00:08:32.780 --> 00:08:36.815
which will also follow a similar pattern to the board and list.

00:08:36.815 --> 00:08:43.980
We first import React at the top from the Node Modules folder.

00:08:43.980 --> 00:08:47.890
Then we can create a class-based component.

00:08:48.440 --> 00:08:56.310
Class Card extends React dot Component,

00:08:56.480 --> 00:09:01.980
we curly braces, and then we can add our required render method,

00:09:04.180 --> 00:09:08.430
which is going to return some JSX.

00:09:08.660 --> 00:09:12.395
Just like before we'll also add the p elements,

00:09:12.395 --> 00:09:16.019
simply outputting the card components.

00:09:16.090 --> 00:09:18.650
Then don't forget, down at the bottom,

00:09:18.650 --> 00:09:23.180
we need to export this file so we can use it in other components.

00:09:23.180 --> 00:09:27.905
Export default, the name of our class, which is Card.

00:09:27.905 --> 00:09:31.660
These cards are nested inside of the list component

00:09:31.660 --> 00:09:35.735
so let's import it over in the List.js.

00:09:35.735 --> 00:09:37.890
We can import this.

00:09:37.890 --> 00:09:40.090
Now the top of the file.

00:09:40.140 --> 00:09:43.180
This is also alongside the list,

00:09:43.180 --> 00:09:48.075
so we just need the dot slash and then the name of the file, which is Card.

00:09:48.075 --> 00:09:54.085
Now down in the render method we are putting in the p element that just cut this out,

00:09:54.085 --> 00:09:59.710
and then we can add a surrounding div so we don't get any error messages in the console.

00:09:59.710 --> 00:10:05.950
We can paste this back in and then add inside as many Card components as we like.

00:10:05.950 --> 00:10:09.544
I'm going to copy and paste this in three times,

00:10:09.544 --> 00:10:11.470
then over to the browser.

00:10:11.470 --> 00:10:15.630
Now we'll see our board component output once.

00:10:15.630 --> 00:10:18.245
We then have our two lists components,

00:10:18.245 --> 00:10:24.745
which is this one and also this one because we outputted the list two times here.

00:10:24.745 --> 00:10:29.495
Each List components then has three Cards nested inside,

00:10:29.495 --> 00:10:32.480
which is why we see so many components on the screen.

00:10:32.480 --> 00:10:34.460
If we go over to the developer tools,

00:10:34.460 --> 00:10:37.295
we'd right-click and then inspect.

00:10:37.295 --> 00:10:42.215
Inside of the Elements tab if we look at the HTML structure,

00:10:42.215 --> 00:10:46.670
we have a surrounding div with a board component nested inside.

00:10:46.670 --> 00:10:48.305
Then we have a full div,

00:10:48.305 --> 00:10:49.775
which is for our list,

00:10:49.775 --> 00:10:53.655
which contains the three card components inside.

00:10:53.655 --> 00:10:55.820
After this we have a second div,

00:10:55.820 --> 00:10:58.250
which is for our second list components.

00:10:58.250 --> 00:11:02.785
Again, this also has our three card components inside.

00:11:02.785 --> 00:11:06.540
Also in the console we'll see we have some error messages.

00:11:06.540 --> 00:11:10.999
If we go to the top, we see a p elements cannot appear as a descendant

00:11:10.999 --> 00:11:15.695
of p. This is because of the way we structured our components.

00:11:15.695 --> 00:11:19.310
If we go to the main wrapper, which is app.js,

00:11:19.310 --> 00:11:24.870
we have the outer Board components nested inside of these p elements.

00:11:24.870 --> 00:11:27.340
We can just move this up outside.

00:11:27.340 --> 00:11:29.990
Save this file so it appears along side

00:11:29.990 --> 00:11:35.140
the elements and now we have no more areas inside of the console.

00:11:35.140 --> 00:11:38.825
Now we'll have our first look at how components work.

00:11:38.825 --> 00:11:42.050
Now we're going to step things up in the next section,

00:11:42.050 --> 00:11:47.550
where we'll begin to work with data and also pass it to components.
