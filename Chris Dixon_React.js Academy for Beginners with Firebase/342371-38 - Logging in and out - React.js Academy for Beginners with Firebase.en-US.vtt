WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.770 --> 00:00:03.540
Once a user has signed up,

00:00:03.540 --> 00:00:05.670
they also need to login and out.

00:00:05.670 --> 00:00:09.900
We also going to do this in the off context as custom methods,

00:00:09.900 --> 00:00:11.970
starting with the login.

00:00:11.970 --> 00:00:15.870
Let's allow it to the off context.js file.

00:00:15.870 --> 00:00:18.570
Then inside here under the sign-up,

00:00:18.570 --> 00:00:20.625
we create a new method,

00:00:20.625 --> 00:00:23.325
it's going to be called login,

00:00:23.325 --> 00:00:25.650
it's going to be a sync,

00:00:25.650 --> 00:00:29.369
also taking in the e-mail and password,

00:00:29.369 --> 00:00:31.945
along with the event information,

00:00:31.945 --> 00:00:34.470
which we're going to pass when calling this,

00:00:34.470 --> 00:00:37.125
as at the try section,

00:00:37.125 --> 00:00:39.730
and then just like the sign-up section above,

00:00:39.730 --> 00:00:41.800
we're going to pass in any errors,

00:00:41.800 --> 00:00:44.365
but we'll deal with this section very soon.

00:00:44.365 --> 00:00:47.030
Inside the try section, we're first going to use

00:00:47.030 --> 00:00:51.180
this event information to prevent the default behavior,

00:00:52.880 --> 00:00:59.430
and then we going to wait, our firebase off and then we can use

00:00:59.430 --> 00:01:01.745
the firebase authentication method called

00:01:01.745 --> 00:01:05.270
sign-in with email and password, all camel-case.

00:01:05.270 --> 00:01:11.650
Sign-in with e-mail and password,

00:01:11.780 --> 00:01:13.970
and then inside here,

00:01:13.970 --> 00:01:15.800
just like with the sign-up,

00:01:15.800 --> 00:01:17.705
this takes in an e-mail,

00:01:17.705 --> 00:01:21.110
and also the password and the sign up form.

00:01:21.110 --> 00:01:26.195
Just below this, we can do a test to check if this is working with a console log,

00:01:26.195 --> 00:01:28.825
with the text of logged in,

00:01:28.825 --> 00:01:32.280
and we'll come back to testing these in just a moment.

00:01:32.280 --> 00:01:38.140
Logout, we're going to add the log-out method, suitable function,

00:01:38.150 --> 00:01:44.775
the try section, the cut section just afterwards,

00:01:44.775 --> 00:01:48.315
as an in the error, we'll come back to this soon.

00:01:48.315 --> 00:01:50.580
All we need to do in the try section,

00:01:50.580 --> 00:01:53.425
is to access the firebase off,

00:01:53.425 --> 00:01:57.180
and then call a method called sign-out.

00:01:57.700 --> 00:02:02.750
Once this is done, we can then update the state with this dot setState,

00:02:02.750 --> 00:02:08.135
[inaudible] of objects, and the state we want to obtain is the user.

00:02:08.135 --> 00:02:11.290
I'm going to set this back to a empty objects.

00:02:11.290 --> 00:02:14.120
Again for testing, we can add a console log,

00:02:14.120 --> 00:02:20.040
which will output a string of sign-out, down to the provider.

00:02:20.040 --> 00:02:22.505
We also need to provide these two methods,

00:02:22.505 --> 00:02:25.745
so these can be accessed inside of other components,

00:02:25.745 --> 00:02:28.145
so as a value we have login,

00:02:28.145 --> 00:02:31.450
which is equal to this dot login,

00:02:31.450 --> 00:02:33.620
and then also separated by a comma,

00:02:33.620 --> 00:02:39.825
we have logout, over in the use of form components,

00:02:39.825 --> 00:02:43.485
we can then press in the login method to the consumer.

00:02:43.485 --> 00:02:47.385
Just have to sign-up, we can also add login,

00:02:47.385 --> 00:02:49.785
we can also add in the user,

00:02:49.785 --> 00:02:55.130
and now this means we can now trigger this login method inside of these components,

00:02:55.130 --> 00:02:59.875
and we're going to do this by adding in a button just above the sign-up.

00:02:59.875 --> 00:03:03.710
Let's scroll down to the sign-up button, and then just above this,

00:03:03.710 --> 00:03:05.525
we can also add a new button,

00:03:05.525 --> 00:03:07.430
which is going to be for logging in.

00:03:07.430 --> 00:03:11.555
Just like the sign-up below this is going to pass in a onclick event handler,

00:03:11.555 --> 00:03:13.955
which is going to trigger a method.

00:03:13.955 --> 00:03:16.310
We're going to pass in our events.

00:03:16.310 --> 00:03:18.710
I denote an inline arrow function,

00:03:18.710 --> 00:03:21.185
with the method name of login.

00:03:21.185 --> 00:03:24.290
The login needs access to the email input,

00:03:24.290 --> 00:03:25.880
and also the password input,

00:03:25.880 --> 00:03:27.365
just like we have below,

00:03:27.365 --> 00:03:29.120
along with the event information.

00:03:29.120 --> 00:03:31.735
I'm going to copy these three lines,

00:03:31.735 --> 00:03:34.890
paste these in, and in between the button tags,

00:03:34.890 --> 00:03:37.245
we going to add the text of login.

00:03:37.245 --> 00:03:40.155
Save this, and then go to the browser,

00:03:40.155 --> 00:03:43.910
into our projects, we now see a login button.

00:03:43.910 --> 00:03:46.500
Let's open up the console.

00:03:47.810 --> 00:03:51.180
We can now then our e-mail and password combination,

00:03:51.180 --> 00:03:52.980
and then we sign-up with.

00:03:52.980 --> 00:03:54.750
Before we click on login,

00:03:54.750 --> 00:03:58.625
let's change this to be a wrong e-mail. Click on login.

00:03:58.625 --> 00:04:01.385
We see an error message down in the console.

00:04:01.385 --> 00:04:05.030
Let's try a different password, login.

00:04:05.030 --> 00:04:07.285
We also get a second error.

00:04:07.285 --> 00:04:10.550
Now we can answer the correct sign up information,

00:04:10.550 --> 00:04:14.795
click login, and then we've get our console log of logged in.

00:04:14.795 --> 00:04:17.660
We will come back to these error messages very soon.

00:04:17.660 --> 00:04:20.935
To be more clear to the user, what's gone wrong.

00:04:20.935 --> 00:04:22.500
The next thing I'm going to do,

00:04:22.500 --> 00:04:24.520
is to create a header component,

00:04:24.520 --> 00:04:27.605
which is going to display the current logged in user,

00:04:27.605 --> 00:04:30.880
and this will also be where we can add a logout button.

00:04:30.880 --> 00:04:33.530
Let's create the header component now.

00:04:33.530 --> 00:04:36.440
Inside the sidebar, under components,

00:04:36.440 --> 00:04:39.690
we can create our header.js.

00:04:42.650 --> 00:04:47.815
As ever, we import react from reacts.

00:04:47.815 --> 00:04:50.990
We're also going to use the off consumer,

00:04:50.990 --> 00:04:52.820
so I'm going import this.

00:04:52.820 --> 00:04:56.525
This will give us access to the user's login information,

00:04:56.525 --> 00:05:00.000
which we can access from a law of context.

00:05:00.130 --> 00:05:03.695
We don't need to create a class-based components,

00:05:03.695 --> 00:05:06.755
since this is going to simply take in some information,

00:05:06.755 --> 00:05:08.855
and then render it to the screen.

00:05:08.855 --> 00:05:12.415
Let's set up a function based components.

00:05:12.415 --> 00:05:16.035
We can ad the HTML header elements inside here,

00:05:16.035 --> 00:05:22.045
as a wrapper, the authconsumer pass in the child,

00:05:22.045 --> 00:05:25.610
which is going to be a function inside the curly braces,

00:05:25.610 --> 00:05:27.095
this takes in the user,

00:05:27.095 --> 00:05:30.100
and also the logout method,

00:05:30.100 --> 00:05:32.880
set-up our arrow function.

00:05:32.880 --> 00:05:38.110
The brackets, as a wrapper we can pass in the react fragments.

00:05:38.660 --> 00:05:42.350
Let's begin at the top left of our application.

00:05:42.350 --> 00:05:44.255
We're going to add a home button,

00:05:44.255 --> 00:05:46.340
which is going to be a home emoji,

00:05:46.340 --> 00:05:50.665
where the user can click on and be redirected to our homepage.

00:05:50.665 --> 00:05:52.365
Let's have a element,

00:05:52.365 --> 00:05:54.615
since this will be a link,

00:05:54.615 --> 00:05:59.845
the href is going to be equal to forward slash.

00:05:59.845 --> 00:06:04.145
Then inside of the span elements we're going to have a HTML entity,

00:06:04.145 --> 00:06:05.995
which is the ampersands.

00:06:05.995 --> 00:06:13.820
The hash, then the value of 127968, the semicolon.

00:06:13.820 --> 00:06:16.220
Respond can also have a role,

00:06:16.220 --> 00:06:18.470
which is equal to image,

00:06:18.470 --> 00:06:21.410
and then for accessibility you can add a label,

00:06:21.410 --> 00:06:24.360
which is going to be equal to house emoji.

00:06:25.490 --> 00:06:28.390
Alongside this, we can add a level one heading,

00:06:28.390 --> 00:06:32.660
which is going to be for the project name of [inaudible].

00:06:32.660 --> 00:06:35.120
Now over on the right-hand side of this header,

00:06:35.120 --> 00:06:38.255
we're going to add a section which is for the user area.

00:06:38.255 --> 00:06:42.665
We're going to use the context to display the user's email when logged in.

00:06:42.665 --> 00:06:44.120
A button to log-out,

00:06:44.120 --> 00:06:46.670
and also the text of please sign in,

00:06:46.670 --> 00:06:50.720
which we're going to conditionally render when the user is not logged in.

00:06:50.720 --> 00:06:54.015
Let's start with the small elements.

00:06:54.015 --> 00:06:56.010
We're going to display the user,

00:06:56.010 --> 00:06:59.810
and then we're going to output the user dot e-mail,

00:06:59.810 --> 00:07:02.270
which we're going to grab it from context.

00:07:02.270 --> 00:07:04.925
After this, a button,

00:07:04.925 --> 00:07:07.925
which is going to have a onclick event handler,

00:07:07.925 --> 00:07:10.670
and this is going to take in the event information,

00:07:10.670 --> 00:07:13.070
and then run our logout function,

00:07:13.070 --> 00:07:15.475
and then inside of here we can pass in e,

00:07:15.475 --> 00:07:18.945
to in ease thanks, we can also add the text of logout,

00:07:18.945 --> 00:07:21.785
and then the third thing we're going to add into here,

00:07:21.785 --> 00:07:23.585
in between the small elements,

00:07:23.585 --> 00:07:26.730
is going to be the text of please sign-in.

00:07:27.440 --> 00:07:29.615
Very similar groups together,

00:07:29.615 --> 00:07:31.580
the button and the user,

00:07:31.580 --> 00:07:35.050
and will only display these when the user is logged in.

00:07:35.050 --> 00:07:36.965
When the user is logged out,

00:07:36.965 --> 00:07:38.180
these will both be removed,

00:07:38.180 --> 00:07:40.790
and then will only output the text of please sign in.

00:07:40.790 --> 00:07:45.780
Save this file, and now we can import this in our app.js.

00:07:45.880 --> 00:07:52.490
Right at the very top, at import our header from the file path,

00:07:52.490 --> 00:07:56.750
which is dot slash components, and then the header.

00:07:56.750 --> 00:08:00.575
This component will always show on our application,

00:08:00.575 --> 00:08:05.049
therefore we need to add this outside of the routers switch components,

00:08:05.049 --> 00:08:08.595
so just go switch add any header,

00:08:08.595 --> 00:08:13.380
closes off, save this and now reload the browser.

00:08:13.600 --> 00:08:18.025
I may also need to export default inside the header.

00:08:18.025 --> 00:08:20.670
Let's go there now,

00:08:20.670 --> 00:08:25.154
right at the bottom, so export default,

00:08:25.154 --> 00:08:27.825
and the name of header.

00:08:27.825 --> 00:08:33.065
Let's try this once more. Now we have the header showing inside the application.

00:08:33.065 --> 00:08:35.120
We can now try logging in,

00:08:35.120 --> 00:08:37.625
using the correct information.

00:08:37.625 --> 00:08:39.830
We get the message of logged in.

00:08:39.830 --> 00:08:41.750
Let's try the logout button,

00:08:41.750 --> 00:08:44.420
and I will get the message of signed out.

00:08:44.420 --> 00:08:48.380
In the next video, we'll be using another Firebase method,

00:08:48.380 --> 00:08:50.975
to listen out for when a user logs in or out,

00:08:50.975 --> 00:08:54.510
and then obtain the state with the current user.
