WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.890 --> 00:00:04.590
As ab become large and more complex,

00:00:04.590 --> 00:00:07.770
we often need a better way to manage our states.

00:00:07.770 --> 00:00:11.730
Passing props down many levels which is often referred to as

00:00:11.730 --> 00:00:15.825
prop drilling can add a layer of complexity.

00:00:15.825 --> 00:00:18.660
This is where state management libraries such as

00:00:18.660 --> 00:00:22.050
Redux have played a part to help manage this.

00:00:22.050 --> 00:00:25.740
Redux is fine, but it also means learning new things,

00:00:25.740 --> 00:00:28.275
add into our ab's overall size,

00:00:28.275 --> 00:00:33.990
and it can also add complexity if we were only using it to pass around state.

00:00:33.990 --> 00:00:38.535
A solution to use the React Context API.

00:00:38.535 --> 00:00:44.565
Context was created to share data that we need in multiple parts of our app.

00:00:44.565 --> 00:00:49.790
In this section, we're going to be using Firebase to provide user authentication.

00:00:49.790 --> 00:00:52.580
Users can log in and sign up,

00:00:52.580 --> 00:00:56.030
and then only see the boards which they have created.

00:00:56.030 --> 00:00:58.100
This would be a good use case for

00:00:58.100 --> 00:01:03.730
the Context API since the logged in state is needed on multiple pages.

00:01:03.730 --> 00:01:07.800
When using Context, we no longer needs pass down data,

00:01:07.800 --> 00:01:13.580
in our case, the logged in states from the parent component through the child components.

00:01:13.580 --> 00:01:18.350
Instead, we basically have a component with global state,

00:01:18.350 --> 00:01:25.040
which we can import directly into any other components so we can access the data.

00:01:25.040 --> 00:01:27.350
The first thing you might be thinking is,

00:01:27.350 --> 00:01:31.460
"Why not just move all of our states into this Context?"

00:01:31.460 --> 00:01:33.545
This is a good question.

00:01:33.545 --> 00:01:35.524
While this is certainly possible,

00:01:35.524 --> 00:01:41.535
the creators of React do discourage this since it can make components less reusable,

00:01:41.535 --> 00:01:44.680
and passing down props only a few levels,

00:01:44.680 --> 00:01:47.585
can be a much simpler solution.

00:01:47.585 --> 00:01:50.374
Over in the Components Directory,

00:01:50.374 --> 00:01:53.590
let's create a new file for our Context.

00:01:53.590 --> 00:01:57.030
In the Components, New file,

00:01:57.030 --> 00:02:00.250
I'm going to call this the AuthContext.js.

00:02:02.990 --> 00:02:06.540
This filename is up to us but I have name this

00:02:06.540 --> 00:02:11.145
the AuthContext since it will handle the user authentication.

00:02:11.145 --> 00:02:18.600
Up at the top of the file, the first thing we do as ever is to import React from React.

00:02:19.480 --> 00:02:24.635
This React package will allow us to access the Create context method,

00:02:24.635 --> 00:02:29.105
which we can now store in a constant called AuthContext,

00:02:29.105 --> 00:02:38.265
so that is equal to React.createContext with the brackets just afterwards.

00:02:38.265 --> 00:02:40.965
So now we have this context object.

00:02:40.965 --> 00:02:42.705
We can create two things.

00:02:42.705 --> 00:02:46.955
We need both a provider component and also a consumer.

00:02:46.955 --> 00:02:48.560
As both of these sound,

00:02:48.560 --> 00:02:52.400
the provider will provide the data to other components,

00:02:52.400 --> 00:02:58.100
and the consumer will get the data and also be subscribed to any changes.

00:02:58.100 --> 00:03:01.009
First, we can create the provider component,

00:03:01.009 --> 00:03:04.760
just as we would with any normal React components.

00:03:04.760 --> 00:03:13.540
We can create a class called AuthProvider, which extends React.Components.

00:03:16.430 --> 00:03:20.645
Since this provider is responsible for providing data,

00:03:20.645 --> 00:03:23.105
we can also add in any state.

00:03:23.105 --> 00:03:26.390
So let's set up our states object where we are going to set

00:03:26.390 --> 00:03:29.980
the initial user to be an empty object.

00:03:29.980 --> 00:03:33.335
We also need to pass in a random method too,

00:03:33.335 --> 00:03:35.435
just as we normally would.

00:03:35.435 --> 00:03:41.245
Inside here, we're going to return some JSX data in between the brackets.

00:03:41.245 --> 00:03:46.460
However, this is not going to render out JSX like we've done previously.

00:03:46.460 --> 00:03:50.720
Instead, we're going to return a context provider component,

00:03:50.720 --> 00:03:52.535
which looks like this.

00:03:52.535 --> 00:03:56.190
So we can grab the AuthContext,

00:03:56.190 --> 00:04:00.030
AuthContext is the variable which we set just above,

00:04:00.030 --> 00:04:05.265
then we're to access the Provider with a capital P, close this off.

00:04:05.265 --> 00:04:11.000
This component will allow other components to subscribe to any data changes.

00:04:11.000 --> 00:04:12.760
Inside of the opening tag,

00:04:12.760 --> 00:04:14.650
it takes in a value,

00:04:14.650 --> 00:04:18.580
and this value can be anything which won't pass over components.

00:04:18.580 --> 00:04:21.850
I'm going to use it to pass down the user from states,

00:04:21.850 --> 00:04:23.515
which we just set before.

00:04:23.515 --> 00:04:25.405
Inside this opening tag,

00:04:25.405 --> 00:04:29.735
we can set the value inside the double curly braces.

00:04:29.735 --> 00:04:36.130
The value name of user who's going to be equal to this.state.user.

00:04:36.130 --> 00:04:37.795
Down at the very bottom,

00:04:37.795 --> 00:04:40.195
we have all we can use this in our components,

00:04:40.195 --> 00:04:42.790
we also need to export this provider.

00:04:42.790 --> 00:04:44.390
Inside the curly braces,

00:04:44.390 --> 00:04:47.205
we can export our AuthProvider.

00:04:47.205 --> 00:04:50.720
So I've added this as a named export inside

00:04:50.720 --> 00:04:55.450
these curly braces since we'll also export a consumer very soon.

00:04:55.450 --> 00:04:59.375
So now we can take this provider and also the data,

00:04:59.375 --> 00:05:02.180
which is the user, and make it available to

00:05:02.180 --> 00:05:06.340
the rest of our application over in the app.js.

00:05:06.340 --> 00:05:11.365
Inside here, we can first import this provider at the very top.

00:05:11.365 --> 00:05:17.765
Import inside the curly braces, our AuthProvider.

00:05:17.765 --> 00:05:21.695
The file path is going to be equal to.slash,

00:05:21.695 --> 00:05:24.110
this is in the components folder,

00:05:24.110 --> 00:05:27.125
and the name of AuthContext.

00:05:27.125 --> 00:05:30.020
The way we make this data available to

00:05:30.020 --> 00:05:34.370
all components is by using this as a wrapper component.

00:05:34.370 --> 00:05:37.010
Let's go down to our browser router,

00:05:37.010 --> 00:05:39.780
and then we can add this inside here.

00:05:40.370 --> 00:05:44.040
So up at the top, the browser router.

00:05:44.040 --> 00:05:47.150
We can add this just like a normal component.

00:05:47.150 --> 00:05:50.410
This is the name of provider.

00:05:50.410 --> 00:05:53.235
This has an opening and closing tag,

00:05:53.235 --> 00:05:58.325
so we can take the closing tag and wrap all of the content inside of this provider.

00:05:58.325 --> 00:06:04.210
To take this down, just above the browser router at this end, and then save this.

00:06:04.210 --> 00:06:06.525
If we now go over to our application,

00:06:06.525 --> 00:06:08.225
and if we do a refresh,

00:06:08.225 --> 00:06:11.300
we don't see any content on the screen.

00:06:11.300 --> 00:06:16.610
This is because since we've now used this AuthProvider as a wrapper,

00:06:16.610 --> 00:06:22.175
all the components which are now inside are now a child of this components.

00:06:22.175 --> 00:06:26.575
So let's take a look at what is going on over in the AuthContext.

00:06:26.575 --> 00:06:30.180
Inside here we have this AuthContext.Provider,

00:06:30.180 --> 00:06:34.225
which will provide any value to all of the child components.

00:06:34.225 --> 00:06:39.125
This component has no content in between the opening and closing tags,

00:06:39.125 --> 00:06:42.625
and this is why we don't see any content on the screen.

00:06:42.625 --> 00:06:47.570
So how do we tell React this component should also render

00:06:47.570 --> 00:06:52.540
out all of the components which are nested inside the app.js?

00:06:52.540 --> 00:06:56.415
Well, we can do this with this.props.children,

00:06:56.415 --> 00:07:01.720
which we can add inside the curly braces.

00:07:02.420 --> 00:07:04.575
Now give this file a save,

00:07:04.575 --> 00:07:06.135
and then over to the browser.

00:07:06.135 --> 00:07:10.205
We can now see all of the components are working as expected.

00:07:10.205 --> 00:07:13.850
This now leaves us providing the content to other components.

00:07:13.850 --> 00:07:19.015
So we can now set up the consumer which will go ahead and use this data.

00:07:19.015 --> 00:07:22.550
In the AuthContext is where we are going to be setting this up.

00:07:22.550 --> 00:07:23.930
Let's do this at the bottom,

00:07:23.930 --> 00:07:26.060
just after our class.

00:07:26.060 --> 00:07:32.095
So the first thing to do is to create a constant called AuthConsumer.

00:07:32.095 --> 00:07:35.100
We're again going to use the AuthContext,

00:07:35.100 --> 00:07:38.270
which we set up at the top here but this time we're going to grab

00:07:38.270 --> 00:07:42.305
consumer rather than provider, which we used before.

00:07:42.305 --> 00:07:45.510
So AuthContext.Consumer,

00:07:47.900 --> 00:07:52.205
and then the second thing to do is to add this AuthConsumer

00:07:52.205 --> 00:07:57.240
to our export so it's available to use in other files.

00:07:57.620 --> 00:08:02.415
So just before we go and test this is working in other components,

00:08:02.415 --> 00:08:05.785
let's add some initial data to work with.

00:08:05.785 --> 00:08:09.225
At the moment, we've got a blank user object.

00:08:09.225 --> 00:08:11.965
Let's simply add a name inside here,

00:08:11.965 --> 00:08:15.575
so we can test the data is reaching the components.

00:08:15.575 --> 00:08:18.870
So now save this. In the app.js,

00:08:18.870 --> 00:08:24.055
we'll now provide in this data to all of our child components using this provider.

00:08:24.055 --> 00:08:28.730
So now we can go into any of these components nested inside and then

00:08:28.730 --> 00:08:34.015
take advantage of the consumer which we created to access this information.

00:08:34.015 --> 00:08:37.440
Let's do this Auth in the board component.

00:08:37.440 --> 00:08:41.115
The first thing we need to do up at the top is to import

00:08:41.115 --> 00:08:50.550
our AuthConsumer from our file name which is./AuthContext,

00:08:50.550 --> 00:08:53.560
scroll down to the render.

00:08:53.960 --> 00:08:59.010
We then use this AuthConsumer as a wrapper to all of our content.

00:08:59.010 --> 00:09:01.410
So just under return,

00:09:01.410 --> 00:09:04.840
we can add in our AuthConsumer.

00:09:05.330 --> 00:09:09.450
Close this off. Let's grab this,

00:09:09.450 --> 00:09:14.305
cut this out of place and add this right at the very bottom of our content.

00:09:14.305 --> 00:09:20.630
This AuthConsumer component lets us subscribe to any changes inside the context.

00:09:20.630 --> 00:09:24.485
So if a user was updated in our AuthContext file,

00:09:24.485 --> 00:09:27.215
this would then be passed down to this consumer.

00:09:27.215 --> 00:09:28.975
Each time there is a change,

00:09:28.975 --> 00:09:32.715
this AuthConsumer takes in a function as a child.

00:09:32.715 --> 00:09:38.345
So let's start by cutting out all of the data inside the AuthConsumer.

00:09:38.345 --> 00:09:42.375
Cut this out of place, I'm going to add this back here in just a moment.

00:09:42.375 --> 00:09:46.570
Then we can pass in a function inside of the curly braces.

00:09:46.570 --> 00:09:48.505
So open up the brackets,

00:09:48.505 --> 00:09:50.765
set up the arrow function.

00:09:50.765 --> 00:09:55.600
This function takes in any value which is being passed in from the Context.

00:09:55.600 --> 00:09:58.134
So currently inside of the provider,

00:09:58.134 --> 00:10:00.755
we're only passing in the user value,

00:10:00.755 --> 00:10:02.934
so back over here in the consumer,

00:10:02.934 --> 00:10:05.750
we can pass in the user inside the curly braces,

00:10:05.750 --> 00:10:07.840
and then inside of this function body,

00:10:07.840 --> 00:10:11.155
we can now paste in the content which we had before.

00:10:11.155 --> 00:10:14.380
So add this in, and now all of the values which you passed

00:10:14.380 --> 00:10:18.560
in to the function should now be available inside this code.

00:10:18.560 --> 00:10:23.555
We can test this is working by outputting this user anywhere inside here.

00:10:23.555 --> 00:10:26.600
Let's do this just above the board header,

00:10:26.600 --> 00:10:28.594
inside the curly braces,

00:10:28.594 --> 00:10:33.140
we can output the user and then access the name from our object,

00:10:33.140 --> 00:10:35.950
save this file, over to the browser,

00:10:35.950 --> 00:10:39.490
and now we see the name which had been provided from our state.

00:10:39.490 --> 00:10:44.030
So we will make use of this data inside this consumer in just a while,

00:10:44.030 --> 00:10:47.845
but for now I'm going to remove this name since this is all now working.

00:10:47.845 --> 00:10:49.640
So just as a quick recap,

00:10:49.640 --> 00:10:51.500
we are creating a context file,

00:10:51.500 --> 00:10:55.100
which is going to store our user into states.

00:10:55.100 --> 00:10:58.085
We're going to be grabbing this user soon from Firebase,

00:10:58.085 --> 00:11:02.040
but for now we've hard-coded in a value just below.

00:11:02.040 --> 00:11:04.260
We've then set up our AuthContext,

00:11:04.260 --> 00:11:07.355
which has then got a provider and a consumer.

00:11:07.355 --> 00:11:12.865
The provider is responsible for passing down data to any child components.

00:11:12.865 --> 00:11:17.205
Currently the only value which we're passing down is this user object,

00:11:17.205 --> 00:11:20.195
we then create a consumer which then takes in

00:11:20.195 --> 00:11:23.790
the data inside of any component which needs it,

00:11:23.790 --> 00:11:26.240
then over in the app.js,

00:11:26.240 --> 00:11:30.970
we imported the provider and then wrapped our whole application with this.

00:11:30.970 --> 00:11:37.035
So all of the child components have access to this data in the board.js.

00:11:37.035 --> 00:11:39.764
We then use the consumer which we created,

00:11:39.764 --> 00:11:42.285
which then has a child as a function,

00:11:42.285 --> 00:11:44.780
and then pass down this user into our code

00:11:44.780 --> 00:11:47.905
so it's available to use anywhere which we like.

00:11:47.905 --> 00:11:52.550
As you can see, there is a little setup required with Context.

00:11:52.550 --> 00:11:55.640
This is why it is recommended to maybe only use,

00:11:55.640 --> 00:11:58.310
if passing down props, multiple levels.

00:11:58.310 --> 00:12:00.800
However, though, once this setup is done,

00:12:00.800 --> 00:12:03.680
we can now access this data just by adding in

00:12:03.680 --> 00:12:07.145
a consumer to any components which will need it.

00:12:07.145 --> 00:12:08.990
Next, we'll begin to look at using

00:12:08.990 --> 00:12:13.415
Firebase authentication to allow users to sign up and login.

00:12:13.415 --> 00:12:16.535
We will use this logged in states and then pass it down to

00:12:16.535 --> 00:12:20.730
any components which needs it via Context.
