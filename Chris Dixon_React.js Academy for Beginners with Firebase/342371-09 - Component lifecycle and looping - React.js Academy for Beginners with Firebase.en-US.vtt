WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.920 --> 00:00:04.115
Having a button like we have here to load

00:00:04.115 --> 00:00:08.905
our initial state is not something which is very practical for this use.

00:00:08.905 --> 00:00:13.510
We need a way to set the state as soon as the component loads,

00:00:13.510 --> 00:00:18.240
and we can do this using a life-cycle method called componentDidMount.

00:00:18.240 --> 00:00:21.220
When we created our class components,

00:00:21.220 --> 00:00:26.045
we said the one and only required method we need is the random method.

00:00:26.045 --> 00:00:29.155
There are also some optional methods too,

00:00:29.155 --> 00:00:33.715
and one which we're going to now look at is called componentDidMount.

00:00:33.715 --> 00:00:35.605
As its name suggests,

00:00:35.605 --> 00:00:40.985
it will run any code we add after the component has been mounted to the DOM.

00:00:40.985 --> 00:00:43.920
A good example of one we can use this,

00:00:43.920 --> 00:00:47.720
it's going to be to load the sample data into our state.

00:00:47.720 --> 00:00:53.155
We are going to add this one in the app.js just below our state objects.

00:00:53.155 --> 00:00:56.380
Let's add the componentDidMount.

00:00:57.490 --> 00:01:02.315
This is method, so add the brackets and the curly braces.

00:01:02.315 --> 00:01:05.270
I often add my state at the top,

00:01:05.270 --> 00:01:08.540
followed by any life-cycle methods such as this,

00:01:08.540 --> 00:01:10.400
then any custom methods,

00:01:10.400 --> 00:01:12.680
and then followed by the render.

00:01:12.680 --> 00:01:17.495
This is completely optional and it's up to you how you'd like to lay these out.

00:01:17.495 --> 00:01:20.645
But this is just something I've gotten in habits of doing.

00:01:20.645 --> 00:01:26.455
ComponentDidMount needs to update the state so let's copy this line from before,

00:01:26.455 --> 00:01:30.015
paste our set state method inside here.

00:01:30.015 --> 00:01:35.765
We can also remove this update state method, save this file.

00:01:35.765 --> 00:01:39.230
If we now go off to the browser and refresh,

00:01:39.230 --> 00:01:46.560
we now see our state has been updated with the console.table without click on a button.

00:01:46.560 --> 00:01:52.270
There are other life-cycle methods available too, such as componentDidUpdates,

00:01:52.270 --> 00:01:54.890
which will run some code after a change has caused

00:01:54.890 --> 00:01:58.700
the component to update such as changing states.

00:01:58.700 --> 00:02:02.390
We also have components will amount to perform

00:02:02.390 --> 00:02:08.165
any actions we need to do after a component has been mounted from the DOM.

00:02:08.165 --> 00:02:12.185
These now leaves us with the three boards from our sample data.

00:02:12.185 --> 00:02:16.129
Set the states and typically what we would now want to do,

00:02:16.129 --> 00:02:19.730
is to loop through these and then display the data in the browser.

00:02:19.730 --> 00:02:22.640
Since our data is in an array format,

00:02:22.640 --> 00:02:26.035
we can use the JavaScript array method called Map.

00:02:26.035 --> 00:02:30.805
This is just regular JavaScript and nothing specific to react.

00:02:30.805 --> 00:02:33.620
If we go to the app.js,

00:02:33.620 --> 00:02:36.275
we can go down to the random method

00:02:36.275 --> 00:02:40.015
and we're going to replace all the contents with our map.

00:02:40.015 --> 00:02:43.970
Remove the three elements inside of our div wrapper.

00:02:43.970 --> 00:02:46.505
Then inside of here, since we're using JavaScript,

00:02:46.505 --> 00:02:48.725
we can use the curly braces.

00:02:48.725 --> 00:02:51.350
We can access state just like before,

00:02:51.350 --> 00:02:53.140
with the start of state.

00:02:53.140 --> 00:02:56.870
Remember, this is pointing to our component instance.

00:02:56.870 --> 00:03:02.765
So we can access state with this dot state and then the name of boards,

00:03:02.765 --> 00:03:06.325
but I did not call the dots mock method.

00:03:06.325 --> 00:03:12.965
Inside here we can pass in a variable name of board for each item it finds in the array,

00:03:12.965 --> 00:03:15.520
then create an arrow function.

00:03:15.520 --> 00:03:20.195
This is going to be responsible for display in each one of our boards,

00:03:20.195 --> 00:03:22.865
so let's add a div which is going to surround

00:03:22.865 --> 00:03:26.540
each one of the free boards in our sample data.

00:03:26.540 --> 00:03:29.344
Then we're going to output three elements.

00:03:29.344 --> 00:03:35.320
One for the ID, one for the title and then one for the background.

00:03:35.320 --> 00:03:38.255
First of all, let's create a span element,

00:03:38.255 --> 00:03:41.615
which is going to display the board ID.

00:03:41.615 --> 00:03:46.009
We can access each board with this board variable,

00:03:46.009 --> 00:03:48.955
then pass in the ID.

00:03:48.955 --> 00:03:52.200
Next stop, a level three heading which is going to display

00:03:52.200 --> 00:03:56.800
the board title again in the curly braces.

00:03:56.990 --> 00:03:59.180
Then third and finally,

00:03:59.180 --> 00:04:00.905
we can add a p element,

00:04:00.905 --> 00:04:04.530
which is going to display the board backgrounds.

00:04:06.340 --> 00:04:11.065
Now we can see this and then go over to our project in the browser.

00:04:11.065 --> 00:04:15.390
If we refresh we do see our free boards on the screen.

00:04:15.390 --> 00:04:17.115
We've got the garden ideas,

00:04:17.115 --> 00:04:18.660
we have the house ideas,

00:04:18.660 --> 00:04:23.195
and also the course ideas at the top with our board title,

00:04:23.195 --> 00:04:26.000
our ID, and the background color.

00:04:26.000 --> 00:04:29.630
However, inside of the browser we do see the console has

00:04:29.630 --> 00:04:35.005
an error message of each child in a list should have a unique key prop.

00:04:35.005 --> 00:04:38.825
When rendering out a list of items just like this,

00:04:38.825 --> 00:04:42.845
we need to also add a unique key for each elements.

00:04:42.845 --> 00:04:49.010
This helps React identify which items have been added, updated, or removed.

00:04:49.010 --> 00:04:52.040
Now we can use the board ID as a key,

00:04:52.040 --> 00:04:57.715
but later we'll use the Firebase unique ID for our items.

00:04:57.715 --> 00:05:00.360
Back to the app.js,

00:05:00.360 --> 00:05:02.479
we can go to the wrapper,

00:05:02.479 --> 00:05:04.115
which is this div.

00:05:04.115 --> 00:05:09.540
We can then add a key which is going to be equal to the board.ID.

00:05:09.880 --> 00:05:12.530
Then back on to the browser,

00:05:12.530 --> 00:05:15.970
I will now see our error message has now disappeared.

00:05:15.970 --> 00:05:21.010
These keys must be unique so if we had more than one board with the same key,

00:05:21.010 --> 00:05:23.915
this will cause an error in the console too.

00:05:23.915 --> 00:05:28.970
In the next video, we're going to replace these rendered outs elements with

00:05:28.970 --> 00:05:34.530
an actual component and discover how we can pass data using props.
