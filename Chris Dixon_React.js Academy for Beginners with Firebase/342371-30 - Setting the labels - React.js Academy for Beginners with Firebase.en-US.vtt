WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.650 --> 00:00:04.950
Updates in the labels inside of our card components will

00:00:04.950 --> 00:00:09.375
involve a little bit more work than in the last video where we updated the text.

00:00:09.375 --> 00:00:13.470
This is because we will be toggling the labels on and off.

00:00:13.470 --> 00:00:14.895
When a label is clicked,

00:00:14.895 --> 00:00:18.810
we first need to check if the label needs to be added or removed.

00:00:18.810 --> 00:00:23.985
To do this, I'm going to add a in line click handler inside of our model.

00:00:23.985 --> 00:00:26.130
When the edit card model,

00:00:26.130 --> 00:00:27.840
in this section we created in

00:00:27.840 --> 00:00:31.589
the last video where we loop through all the available labels.

00:00:31.589 --> 00:00:34.995
We can also add an on-click event handler.

00:00:34.995 --> 00:00:37.874
This is going to be an inline arrow function,

00:00:37.874 --> 00:00:42.660
which is going to call a method called this dot set Lebel.

00:00:42.660 --> 00:00:46.100
Also passing in the current label value.

00:00:46.100 --> 00:00:49.735
As soon as the user clicks on any of these labels,

00:00:49.735 --> 00:00:52.495
it's n going to trigger this set label method,

00:00:52.495 --> 00:00:55.855
which we can now create outside of our random method.

00:00:55.855 --> 00:01:01.810
So set Label, which takes in the label which is passed to it,

00:01:01.810 --> 00:01:04.075
sets up our arrow function.

00:01:04.075 --> 00:01:09.325
The first step inside here is to create a constant which is going to be called labels.

00:01:09.325 --> 00:01:14.874
This is going to store as an array all of the currently selected labels,

00:01:14.874 --> 00:01:17.035
which is stored in the states.

00:01:17.035 --> 00:01:24.825
We're going spread these in with this dot state, dot selected Labels.

00:01:24.825 --> 00:01:27.845
The next step is to check if this passed in

00:01:27.845 --> 00:01:31.295
label is currently stored inside of this array.

00:01:31.295 --> 00:01:34.415
Let's do this by creating a if - statement.

00:01:34.415 --> 00:01:39.230
We can check if labels, dots includes,

00:01:39.230 --> 00:01:43.355
which is a JavaScript method taken in the current label,

00:01:43.355 --> 00:01:45.185
open up the code eraces.

00:01:45.185 --> 00:01:48.320
If this passed in label is stored inside of our labels

00:01:48.320 --> 00:01:52.525
array with M12 call the filter method to remove it.

00:01:52.525 --> 00:01:57.275
We can store this inside of a new array called new labels.

00:01:57.275 --> 00:02:00.455
We can grab our current array called labels,

00:02:00.455 --> 00:02:02.940
called the JavaScript filter method.

00:02:02.940 --> 00:02:08.275
Then we can store each value inside here into a variable called elements.

00:02:08.275 --> 00:02:11.600
That's about function, it's a run for each one,

00:02:11.600 --> 00:02:18.020
which is going to return any elements which is not equal to our label.

00:02:18.020 --> 00:02:22.385
We can then update our state with this dot set state,

00:02:22.385 --> 00:02:28.770
where we are going to obtain the selected labels to be equal to our new array.

00:02:29.120 --> 00:02:33.410
This is what's happening if the label is included in the array.

00:02:33.410 --> 00:02:36.260
If it isn't, we're then going to add a L section,

00:02:36.260 --> 00:02:39.260
which is going to push the new label into state.

00:02:39.260 --> 00:02:41.540
So we have the labels.

00:02:41.540 --> 00:02:44.180
We can then call the JavaScript push method,

00:02:44.180 --> 00:02:47.525
which is going to push the new label to our array.

00:02:47.525 --> 00:02:50.580
We can then update the state.

00:02:50.620 --> 00:02:57.480
Once again, updating the selected labels with the value of our labels, array.

00:02:57.760 --> 00:03:01.220
So just to recap what we are doing here,

00:03:01.220 --> 00:03:04.730
we have the selected labels stored into states which

00:03:04.730 --> 00:03:08.510
would then taken a copy of and saved known to this constant.

00:03:08.510 --> 00:03:14.740
We then check and if the label which the user has clicked on is stored inside this array.

00:03:14.740 --> 00:03:18.425
If it is, we're going to go ahead and run this section of code,

00:03:18.425 --> 00:03:22.160
which is going to be responsible for filtering out the current label,

00:03:22.160 --> 00:03:26.125
and install on the rest of the values into this new labels array.

00:03:26.125 --> 00:03:30.775
We'll then finally push this to state once the label has been removed.

00:03:30.775 --> 00:03:35.990
If the label which is being clicked on is not stored inside the states,

00:03:35.990 --> 00:03:39.080
we then run this l section which is just below.

00:03:39.080 --> 00:03:45.235
Instead, this is going to push our new label to our array and then save this state.

00:03:45.235 --> 00:03:49.205
Now, we can go back to our update card method, which is just above.

00:03:49.205 --> 00:03:52.085
We can update this to add our labels.

00:03:52.085 --> 00:03:54.140
Just after the new text,

00:03:54.140 --> 00:04:01.085
we can create a constant call labels and set this equal to the value stored in state.

00:04:01.085 --> 00:04:04.820
This dot state dot selected labels.

00:04:04.820 --> 00:04:09.195
We can also push this to Firebase inside our update method.

00:04:09.195 --> 00:04:11.820
We can also select the card dots,

00:04:11.820 --> 00:04:16.450
labels fields, and set this equal to o labels.

00:04:16.580 --> 00:04:20.240
So save this and let's go over to the modal.

00:04:20.240 --> 00:04:22.240
Click on any of these,

00:04:22.240 --> 00:04:24.225
and then select label.

00:04:24.225 --> 00:04:27.545
We currently don't have this interstate. So it's added.

00:04:27.545 --> 00:04:29.210
If we click on it again,

00:04:29.210 --> 00:04:33.110
it will then remove this from states by calling the filter method.

00:04:33.110 --> 00:04:35.795
Let's see if any of these are up here in your Firebase,

00:04:35.795 --> 00:04:39.095
we can click on these to save the changes.

00:04:39.095 --> 00:04:41.360
Then we load our cards.

00:04:41.360 --> 00:04:45.965
This card 100 is now being updated with our two colors.

00:04:45.965 --> 00:04:47.875
Before we go any further,

00:04:47.875 --> 00:04:50.875
this modal component is also receiving props.

00:04:50.875 --> 00:04:53.260
So we can add some prop validation.

00:04:53.260 --> 00:04:58.540
So as ever, we can import the prop types from our module,

00:04:58.540 --> 00:05:01.100
which is called prop types.

00:05:01.370 --> 00:05:05.590
So this card modal is receiving three different props.

00:05:05.590 --> 00:05:07.720
If we take look into card that dropped a yes.

00:05:07.720 --> 00:05:09.580
We have the modal open,

00:05:09.580 --> 00:05:13.300
we have toggle modal and also the card data.

00:05:13.300 --> 00:05:16.750
So back down to the very bottom of the modal.

00:05:16.750 --> 00:05:19.900
We can set up our prop validation.

00:05:19.900 --> 00:05:22.970
So edit Card model.

00:05:23.480 --> 00:05:29.710
The prop types, lowercase b, setup our objects.

00:05:29.710 --> 00:05:32.060
The first one is going to be modal open,

00:05:32.060 --> 00:05:34.775
which is going to be equal to prop types.

00:05:34.775 --> 00:05:38.599
This is a Boolean value so we can select w,

00:05:38.599 --> 00:05:40.760
this is also required.

00:05:40.760 --> 00:05:43.980
The second one is toggle modal.

00:05:44.720 --> 00:05:50.845
This prop type is a function so we add that func.

00:05:50.845 --> 00:05:52.970
This is also required.

00:05:52.970 --> 00:05:56.640
A third and final is our card data.

00:05:57.970 --> 00:06:05.795
The prop type is an object which is also required too once we set the Prop types.

00:06:05.795 --> 00:06:09.620
The final piece of this video will be to display inside of

00:06:09.620 --> 00:06:13.940
our application the selected labels just above the context.

00:06:13.940 --> 00:06:18.160
For this, we need to create a loop inside of the card.js.

00:06:18.160 --> 00:06:20.885
Remember inside of this card components,

00:06:20.885 --> 00:06:23.300
if we open up the react developer tools,

00:06:23.300 --> 00:06:25.010
if we search for the card,

00:06:25.010 --> 00:06:29.515
this is where we store all of our current data inside of this Dataproc.

00:06:29.515 --> 00:06:35.010
Inside here we have the labels which we're going to loop through for each card.

00:06:35.420 --> 00:06:38.460
So up at the top of our render,

00:06:38.460 --> 00:06:40.540
just underneath the class of card,

00:06:40.540 --> 00:06:42.380
we're going to create a new div,

00:06:42.380 --> 00:06:45.980
which is going to be a new section that contains all these labels.

00:06:45.980 --> 00:06:50.970
The class name is going to be equal to card labels.

00:06:51.380 --> 00:06:53.985
Open up the card eraces.

00:06:53.985 --> 00:06:59.380
We can access our props and the data dot labels.

00:06:59.380 --> 00:07:02.690
To be approved and we can use the map method,

00:07:02.690 --> 00:07:05.590
which takes in the label.

00:07:05.590 --> 00:07:08.145
So it's above arrow function.

00:07:08.145 --> 00:07:12.005
Then it's going to return a span elements for each one.

00:07:12.005 --> 00:07:14.150
We can pass in our key,

00:07:14.150 --> 00:07:18.600
which can simply be the value of each label, the style.

00:07:18.600 --> 00:07:20.275
So we have the color value,

00:07:20.275 --> 00:07:25.885
we can set the background color to be also equal to our label.

00:07:25.885 --> 00:07:28.805
Then finally, we can ask a class name to this,

00:07:28.805 --> 00:07:31.230
which is going to be label.

00:07:33.410 --> 00:07:37.410
Good. Now, I'll give this file a save and then go over to the browser.

00:07:37.410 --> 00:07:39.920
We can instantly see that the two colors which were

00:07:39.920 --> 00:07:43.115
added as being updated in the card components.

00:07:43.115 --> 00:07:52.135
Let's try to move in the blue color and add in a green and save the changes, refresh.

00:07:52.135 --> 00:07:56.170
This is now reflected inside of the card components.

00:07:56.170 --> 00:07:59.975
So all of the updating features are now complete.

00:07:59.975 --> 00:08:02.105
I will see you next where we will improve on

00:08:02.105 --> 00:08:06.120
this card by allowing multiple lines of text.
