WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.580 --> 00:00:06.405
In the last video, we mentioned the word component quite a few times.

00:00:06.405 --> 00:00:09.210
If you're still not sure what a component is,

00:00:09.210 --> 00:00:13.165
we are now going to take a better look at what they are.

00:00:13.165 --> 00:00:17.764
A component is a typical small part of your website,

00:00:17.764 --> 00:00:21.520
which you can group together and place in it to its own file.

00:00:21.520 --> 00:00:23.970
It can also be reusable.

00:00:23.970 --> 00:00:26.219
If we had a blog, for example,

00:00:26.219 --> 00:00:28.665
component could be a blog post.

00:00:28.665 --> 00:00:33.715
This blog post components would then be re-used for each post which we have.

00:00:33.715 --> 00:00:36.285
Even though they are reusable,

00:00:36.285 --> 00:00:40.550
we can still feed data into it to make them dynamic.

00:00:40.550 --> 00:00:43.295
We could feed into blog components,

00:00:43.295 --> 00:00:46.145
a blog title, a blog text,

00:00:46.145 --> 00:00:48.355
and also an image.

00:00:48.355 --> 00:00:51.194
To see a real world example,

00:00:51.194 --> 00:00:54.970
this is the project which you will be building in this course.

00:00:54.970 --> 00:00:58.624
Using something such as static HTML,

00:00:58.624 --> 00:01:01.385
we'll end up with a lot of duplicate code.

00:01:01.385 --> 00:01:06.035
Each list, which is the free sections of garden, bedroom, and kitchen,

00:01:06.035 --> 00:01:12.410
and also each one of the individual cards on the list would need its own HTML markup.

00:01:12.410 --> 00:01:16.190
This would mean a lot of duplicate HTML code.

00:01:16.190 --> 00:01:22.135
However, the React way is to break things up into smaller pieces called components.

00:01:22.135 --> 00:01:25.060
At the top, a header is a component,

00:01:25.060 --> 00:01:28.790
and we're going to store this in a Header dot js file.

00:01:28.790 --> 00:01:32.390
These components can also be rendered on every page,

00:01:32.390 --> 00:01:35.255
avoiding coordinates into each page,

00:01:35.255 --> 00:01:38.610
as we would do with regular HTML.

00:01:38.750 --> 00:01:41.180
Below the header for this page,

00:01:41.180 --> 00:01:45.680
we also have board components in a file called bought Board dot js.

00:01:45.680 --> 00:01:49.025
A a user can have multiple boards,

00:01:49.025 --> 00:01:52.090
so these components can also be reused.

00:01:52.090 --> 00:01:55.670
It is passed in data called props to allow

00:01:55.670 --> 00:01:59.585
things such as the board title to change for each view.

00:01:59.585 --> 00:02:02.230
In this case, the title is house.

00:02:02.230 --> 00:02:04.120
Nested inside of this board,

00:02:04.120 --> 00:02:06.335
we have a list components.

00:02:06.335 --> 00:02:11.770
Again, we have one component rendered for each list in our database.

00:02:11.770 --> 00:02:14.915
This is another good use for a component,

00:02:14.915 --> 00:02:17.120
since we can again reuse it,

00:02:17.120 --> 00:02:20.690
and then passing data or props to each one,

00:02:20.690 --> 00:02:25.345
such as the title and the functionality to add a new card.

00:02:25.345 --> 00:02:27.395
Next up, as you will have guessed,

00:02:27.395 --> 00:02:29.855
each card is a component too,

00:02:29.855 --> 00:02:34.735
receiving props such as the text and also the labels.

00:02:34.735 --> 00:02:38.265
Each time a new list or card is added,

00:02:38.265 --> 00:02:41.460
the component will again be reused.

00:02:41.460 --> 00:02:44.040
Everything we see here is a child of

00:02:44.040 --> 00:02:48.000
the main App dot js components, which we looked at earlier.

00:02:48.000 --> 00:02:51.220
This is how components are used in React.

00:02:51.220 --> 00:02:56.165
There is no hard and fast rule to when some things should be made into components.

00:02:56.165 --> 00:03:01.790
It's something you generally have to figure out for yourself as you create a project.

00:03:01.790 --> 00:03:04.220
As a very general guide,

00:03:04.220 --> 00:03:06.560
we should use components if something will be

00:03:06.560 --> 00:03:10.865
reused or to group together related functionality.

00:03:10.865 --> 00:03:14.675
There's also occasions when a file is getting too big.

00:03:14.675 --> 00:03:19.570
This can also be a case for breaking things up into smaller components, too.

00:03:19.570 --> 00:03:23.660
Now, we have an overview of how our components will look.

00:03:23.660 --> 00:03:27.569
Let's get to work on creating them in our projects.
