WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.020 --> 00:00:03.180
Okay, so let's get started with the grid.

00:00:03.180 --> 00:00:04.890
To begin, I'm going to duplicate

00:00:04.890 --> 00:00:08.925
the flexbox project folder and then rename this the grid.

00:00:08.925 --> 00:00:13.695
So over to the desktop or the location where you saved your project,

00:00:13.695 --> 00:00:18.315
I'm going to duplicate this project and then once that's done,

00:00:18.315 --> 00:00:21.120
let's rename this, the grid.

00:00:21.120 --> 00:00:25.090
Open this up in Visual Studio Code.

00:00:25.310 --> 00:00:31.320
Then we can also open up the index or HTML inside of the browser.

00:00:31.320 --> 00:00:35.545
This will say we're setting up all the boilerplate HTML code,

00:00:35.545 --> 00:00:37.545
which we need to get started.

00:00:37.545 --> 00:00:41.275
Let's go over to the index or HTML.

00:00:41.275 --> 00:00:47.135
We can close the sidebar down and then make some changes to clean this up.

00:00:47.135 --> 00:00:50.785
So the title the grid.

00:00:50.785 --> 00:00:55.265
Then we can remove all the styles from the container.

00:00:55.265 --> 00:00:57.515
Just leaving in this background color.

00:00:57.515 --> 00:01:00.240
We can also reuse this.

00:01:00.820 --> 00:01:03.630
Lots of reused items too,

00:01:03.630 --> 00:01:06.690
select remove the flex properties,

00:01:06.690 --> 00:01:11.445
leaving in just a background color and also the pattern is fine.

00:01:11.445 --> 00:01:14.300
Down to the div, will again use

00:01:14.300 --> 00:01:18.380
the div container and also the individual items so let's just

00:01:18.380 --> 00:01:25.740
remove the style property from inside there and then we're good to go.

00:01:26.000 --> 00:01:29.345
Good. Just like with the flexbox,

00:01:29.345 --> 00:01:32.525
first we need to change the display type of the container,

00:01:32.525 --> 00:01:37.460
but this time, rather than set it to be flex, we use the grid.

00:01:37.460 --> 00:01:45.410
So display with the type of grid and let's see what happens over in the browser.

00:01:45.410 --> 00:01:49.385
If we reload, we don't see any changes as of yet.

00:01:49.385 --> 00:01:51.200
When we set the grid,

00:01:51.200 --> 00:01:54.640
the child items of the container at block level,

00:01:54.640 --> 00:01:57.465
so do the full width of the page.

00:01:57.465 --> 00:01:59.935
If you want the items to be inline,

00:01:59.935 --> 00:02:02.855
we can change the grid type to be inline.

00:02:02.855 --> 00:02:07.290
Let's go over to here and change this to be inline-grid,

00:02:09.320 --> 00:02:14.625
reload and then all items now inline rather than block.

00:02:14.625 --> 00:02:17.310
I'm going to stick with grids for now though.

00:02:17.310 --> 00:02:22.145
Let's remove this inline and restore this back to normal.

00:02:22.145 --> 00:02:25.450
Then declare how we want these items to be laid out.

00:02:25.450 --> 00:02:29.530
We set the number of columns and rows that we want to use.

00:02:29.530 --> 00:02:35.420
I'm going to start with the columns and this is done inside of the main container.

00:02:35.420 --> 00:02:38.885
We do this with the CSS property called

00:02:38.885 --> 00:02:44.190
grid-template-columns and then I'm going to

00:02:44.190 --> 00:02:50.350
set this to be 100 pixels and also the browser.

00:02:50.690 --> 00:02:53.275
To see these items better,

00:02:53.275 --> 00:02:59.530
let's add a border around the outside of each and this needs to be done inside the items.

00:02:59.530 --> 00:03:07.095
Just a simple border of one pixel and solid line. There we go.

00:03:07.095 --> 00:03:11.260
We've only specified one column at the moment,

00:03:11.260 --> 00:03:13.775
which is a 100 pixels wide.

00:03:13.775 --> 00:03:17.840
This is why we see them all stacked in one column like this.

00:03:17.840 --> 00:03:20.035
If we want more than one column,

00:03:20.035 --> 00:03:22.330
we specify more numbers.

00:03:22.330 --> 00:03:27.390
So just after the 100 pixels for the grid-template-columns,

00:03:27.390 --> 00:03:37.200
let's add a second column of 300 pixels and then a third one of 80.

00:03:37.200 --> 00:03:39.315
This is how this looks in the browser.

00:03:39.315 --> 00:03:42.330
We have specified three sizes here.

00:03:42.330 --> 00:03:45.045
The first three items of these sizes.

00:03:45.045 --> 00:03:47.100
We have the first 100,

00:03:47.100 --> 00:03:50.700
then 300, and then 80.

00:03:50.700 --> 00:03:56.180
Then any extra items will be repeated like we see for this fourth item down here,

00:03:56.180 --> 00:03:59.950
which falls into the first column of 100 pixels.

00:03:59.950 --> 00:04:03.150
This can be better seen with more items.

00:04:03.150 --> 00:04:05.400
Let's go down to the HTML.

00:04:05.400 --> 00:04:08.860
Now, we can duplicate one of these divs.

00:04:08.860 --> 00:04:12.420
Let's paste this in a couple more times.

00:04:12.700 --> 00:04:22.900
So 5, 6 and then 7 and there's our repeated items on the second row.

00:04:22.900 --> 00:04:28.140
Then we're left with one extra item which defaults to the first column.

00:04:28.580 --> 00:04:31.770
These columns and also rows,

00:04:31.770 --> 00:04:35.205
which we'll look at next are known as tracks.

00:04:35.205 --> 00:04:38.450
At the moment, we have a 100 pixels by track,

00:04:38.450 --> 00:04:44.330
a 300 pixels wide track and then a 80 pixel wide track on the right.

00:04:44.330 --> 00:04:48.485
Also, these don't need to be sized in pixels either.

00:04:48.485 --> 00:04:51.065
We can't use things we already know.

00:04:51.065 --> 00:04:58.415
So five percent or even auto to automatically take up the remaining space.

00:04:58.415 --> 00:05:01.370
Rather than 80 pixels here,

00:05:01.370 --> 00:05:05.225
we can set this third track to be auto

00:05:05.225 --> 00:05:10.385
and then this third track will automatically take up the remaining space.

00:05:10.385 --> 00:05:13.760
Now, onto rows, at the moment,

00:05:13.760 --> 00:05:18.005
the height of each one of the rows is set by the content,

00:05:18.005 --> 00:05:20.255
this includes a part in two.

00:05:20.255 --> 00:05:22.400
Using Visual Studio Code,

00:05:22.400 --> 00:05:26.225
we can add some sample text called Lorem Ipsum.

00:05:26.225 --> 00:05:29.225
Let's go down to one of our items.

00:05:29.225 --> 00:05:33.960
Let's say item two and if we typed lorem with a temp,

00:05:33.960 --> 00:05:36.570
we then gets more text content.

00:05:36.570 --> 00:05:40.130
Let's see what effect this has on the browser.

00:05:40.130 --> 00:05:45.340
This first row is now taller because of the extra content.

00:05:45.340 --> 00:05:47.655
We don't always want this though,

00:05:47.655 --> 00:05:51.665
we often want to have control over this ourselves.

00:05:51.665 --> 00:05:55.265
This is where grid-template-rows comes in.

00:05:55.265 --> 00:05:58.100
If we go back over to our container,

00:05:58.100 --> 00:06:06.300
we can also set the grid-template-rows and let's set this to be a value of 100 pixels.

00:06:06.350 --> 00:06:14.295
Then back over and all three rows are now set to 100 pixels high.

00:06:14.295 --> 00:06:17.720
Now, the content is no longer in control of

00:06:17.720 --> 00:06:21.880
the height because we've set it to be exactly what we want.

00:06:21.880 --> 00:06:27.560
Just like columns, only setting one value will only affect the first row.

00:06:27.560 --> 00:06:30.710
I can go ahead and add our values.

00:06:30.710 --> 00:06:33.725
Let's go ahead and add the first one.

00:06:33.725 --> 00:06:36.755
Let's say 250 pixels,

00:06:36.755 --> 00:06:41.820
150 pixels, and then 100.

00:06:43.010 --> 00:06:48.510
Okay. Good. Now have three individually side road tracks.

00:06:48.510 --> 00:06:50.345
In just a few lines,

00:06:50.345 --> 00:06:54.245
we've controlled the layout for our content in two dimensions,

00:06:54.245 --> 00:06:56.720
using both columns and rows.

00:06:56.720 --> 00:06:59.495
This is in contrast to the flexbox,

00:06:59.495 --> 00:07:03.830
which is designed to be only used on one dimension at a time,

00:07:03.830 --> 00:07:06.745
either a row or column.

00:07:06.745 --> 00:07:09.675
This is our first look at the grids.

00:07:09.675 --> 00:07:15.180
There is so much more still to cover though and will continue in the next video.
