WEBVTT
1
00:00:01.050 --> 00:00:01.870
Welcome back.

2
00:00:02.040 --> 00:00:04.990
Let's go over the solution to this flag application.

3
00:00:05.010 --> 00:00:09.720
So I want to start by looking in the re-act developer tools to see what the structure of that looks

4
00:00:09.720 --> 00:00:10.260
like.

5
00:00:12.980 --> 00:00:17.550
Now at the top level of course we have an app component inside of that.

6
00:00:17.560 --> 00:00:20.770
At first there's the header and the header is just the markup.

7
00:00:20.770 --> 00:00:24.420
We put a background image of that world and then say guess the flag.

8
00:00:24.420 --> 00:00:26.720
So not much going on there.

9
00:00:26.770 --> 00:00:29.760
The majority of the logic is in this country game component

10
00:00:33.760 --> 00:00:39.010
and inside of there there's a flag question component and the country game itself doesn't really do

11
00:00:39.010 --> 00:00:39.850
much visually.

12
00:00:39.850 --> 00:00:42.420
So what's the point of having these two different components.

13
00:00:42.820 --> 00:00:50.080
Well the country game is the one responsible for getting the data from our API and the flag question

14
00:00:50.080 --> 00:00:51.870
doesn't make any API requests.

15
00:00:52.030 --> 00:00:56.130
It just receives data as props from the country game.

16
00:00:56.200 --> 00:00:58.420
Now the flag question still has some state.

17
00:00:58.420 --> 00:01:02.980
It keeps track of things like what your selection is for the four possible answers.

18
00:01:02.980 --> 00:01:08.280
It also shows whether or not you got the question correct or incorrect but the distinction there is

19
00:01:08.290 --> 00:01:12.450
again this own state about what you got back from the API.

20
00:01:12.460 --> 00:01:15.200
And this one does not.

21
00:01:15.550 --> 00:01:23.050
Now inside of flag question there is a flag choice and the flag choices you can see is just the form

22
00:01:23.050 --> 00:01:26.170
there that gives you the four choices.

23
00:01:26.170 --> 00:01:33.790
Once I make a choice I know Germany is wrong it will say incorrect answer and the correct answer being

24
00:01:33.790 --> 00:01:35.190
Norway.

25
00:01:35.230 --> 00:01:40.720
Now if you look in this flag question the component inside is now changed to a flag answer before it

26
00:01:40.720 --> 00:01:42.040
was a flag choice.

27
00:01:42.040 --> 00:01:46.120
Now its a flag answer and this flag question component.

28
00:01:46.120 --> 00:01:50.920
Does the logic to figure out whether or not it should show you the choices or the answers depending

29
00:01:50.920 --> 00:01:55.910
on what the state of the application is right now.

30
00:01:55.910 --> 00:01:58.640
Now lets go over the code.

31
00:01:59.020 --> 00:02:04.990
First we'll start with the app the app component and like we mentioned before it's a header with not

32
00:02:04.990 --> 00:02:07.530
much going on in the country game inside of that.

33
00:02:07.540 --> 00:02:10.950
So let's look at the country.

34
00:02:11.540 --> 00:02:14.830
Now this is where the interesting lifecycle events happen.

35
00:02:14.930 --> 00:02:18.600
So when we care about here is in component did mount

36
00:02:22.030 --> 00:02:25.760
in our constructor we've got some state about first of all the countries.

37
00:02:25.810 --> 00:02:28.740
This is the data that we'll get back from the API request.

38
00:02:28.840 --> 00:02:33.120
And then secondly the options for each question.

39
00:02:33.220 --> 00:02:37.420
Now there's a reason we want to keep the options here and that's because it's easier for the game to

40
00:02:37.420 --> 00:02:41.920
figure out which one is correct or incorrect based on the user selection

41
00:02:44.580 --> 00:02:44.880
OK.

42
00:02:44.880 --> 00:02:46.650
Let's look at component in Mt.

43
00:02:47.310 --> 00:02:53.460
So make a get request to this your L.D. you're able to get all the country information just like normal

44
00:02:53.460 --> 00:03:00.000
we're converting it to J-Zone and then from here we do something a little interesting we get a random

45
00:03:00.000 --> 00:03:02.540
country out of the country's array.

46
00:03:02.550 --> 00:03:07.920
So we're just picking a random index from the array length.

47
00:03:08.550 --> 00:03:15.060
And then we're passing that random index into a function called Get options which gives us our four

48
00:03:15.060 --> 00:03:17.800
options for our question.

49
00:03:18.030 --> 00:03:22.630
Let's look at that function.

50
00:03:22.730 --> 00:03:29.130
So get options we'll take our correct option and all the countries it will loop through and then it

51
00:03:29.130 --> 00:03:31.970
will generate 4 random options.

52
00:03:31.980 --> 00:03:36.410
Now the first option will always be our correct option but the end will shuffle it.

53
00:03:36.570 --> 00:03:42.690
So somewhere in the group of four answers we'll have the correct answer.

54
00:03:42.690 --> 00:03:47.400
Also it's important to notice here we're only keeping track of the index of the correct answer in the

55
00:03:47.400 --> 00:03:49.040
index of our options.

56
00:03:49.070 --> 00:03:51.090
We're not actually saving the whole object.

57
00:03:51.270 --> 00:03:56.640
So this array that we're shuffling at the end are just numbers that represent four indices into our

58
00:03:57.270 --> 00:03:58.690
country's array.

59
00:03:58.950 --> 00:04:04.790
And one of them is the correct answer.

60
00:04:04.800 --> 00:04:10.290
Now once we have four options and we have the correct option we'll set the state so the state that we

61
00:04:10.290 --> 00:04:19.320
care about is all the countries data from the API are correct option currently are for options which

62
00:04:19.410 --> 00:04:24.070
include the correct option and then a question state value.

63
00:04:24.090 --> 00:04:25.380
So one of the questions States

64
00:04:30.640 --> 00:04:38.470
so question can be in one of three states it's either being asked it's wrong or it's correct and we

65
00:04:38.470 --> 00:04:40.790
saw this pattern Similarly in the memory game.

66
00:04:40.960 --> 00:04:46.030
I tend to make objects like this when I know that the state of something in my application can take

67
00:04:46.030 --> 00:04:52.000
on more than two values if it's not just a boolean if I have more options besides just true or false

68
00:04:54.470 --> 00:04:57.740
so we want to start out our questions day in asking state

69
00:05:03.490 --> 00:05:07.640
now in render method we're going to have a couple of things that we need to render.

70
00:05:07.640 --> 00:05:13.510
So first of all we always want a sane default value until we get the results of our API requests.

71
00:05:13.520 --> 00:05:15.830
So at first countries will be undefined.

72
00:05:16.040 --> 00:05:22.740
And while countries undefined We want to say loading just so the user sees something on the page.

73
00:05:22.760 --> 00:05:27.590
Now once we have the correct option we know that the countries have been defined and the first thing

74
00:05:27.590 --> 00:05:35.000
we're doing here is we're getting the flag image the SVGA from the data and then the name of the country

75
00:05:35.000 --> 00:05:36.470
for the correct option.

76
00:05:36.980 --> 00:05:42.950
Next we're mapping over all the options and getting out the name and also the idea of that option.

77
00:05:42.950 --> 00:05:49.370
So remember this options array starts out as just IDs and we're turning into an object with IDS and

78
00:05:49.370 --> 00:05:56.790
names.

79
00:05:56.830 --> 00:06:04.750
After that we'll change the output from what was default to a loading div into a flag question and the

80
00:06:04.750 --> 00:06:07.210
flag question takes a few props here.

81
00:06:07.210 --> 00:06:09.700
So the first is our answer text.

82
00:06:09.700 --> 00:06:13.520
This is the string that should be displayed for the correct answer.

83
00:06:13.540 --> 00:06:15.580
The second is on guess.

84
00:06:15.700 --> 00:06:22.530
So this is the callback function that will get called when the user clicks on guess on next is a function

85
00:06:22.530 --> 00:06:26.180
that we'll get called when the user clicks next after they've guessed.

86
00:06:26.580 --> 00:06:29.490
Options are four options.

87
00:06:29.550 --> 00:06:31.830
That is the array that we just created.

88
00:06:31.830 --> 00:06:34.650
Of objects with IDS and names.

89
00:06:34.740 --> 00:06:37.380
The question state is the state we saw earlier.

90
00:06:37.380 --> 00:06:39.750
So it all started out as a question.

91
00:06:39.750 --> 00:06:44.590
We're asking a question and then we'll transition to either correct or incorrect.

92
00:06:44.640 --> 00:06:51.930
And finally the flag is just a URL for the flag image that we want to show.

93
00:06:51.950 --> 00:06:56.830
Now let's check out how flag question works.

94
00:06:56.860 --> 00:07:03.010
The only state in this component is the choice for the user the the option that the user has clicked

95
00:07:03.010 --> 00:07:05.720
on.

96
00:07:05.940 --> 00:07:09.960
The majority of the logic is in render so will map over the options.

97
00:07:10.200 --> 00:07:15.760
And if the state is in question then will show the flag choices component.

98
00:07:16.230 --> 00:07:21.810
And if it is not in a question state will show the answer and depending on what the current state is

99
00:07:22.110 --> 00:07:24.230
the answer is either correct or incorrect.

100
00:07:24.380 --> 00:07:24.620
Right.

101
00:07:24.630 --> 00:07:31.500
The question state if it is equal to correct answer then this is true if it is not equal the correct

102
00:07:31.500 --> 00:07:33.660
answer is false.

103
00:07:33.660 --> 00:07:37.260
The other important thing going on here is that we have two callback functions that were passing the

104
00:07:37.260 --> 00:07:40.930
flag choice and that is handled change and handle submit.

105
00:07:41.340 --> 00:07:48.480
So for handle change it's implemented right here and we're just setting state for wherever these are

106
00:07:48.480 --> 00:07:55.230
choices now handle submit is invoking on guess which has passed in from the parent component the country

107
00:07:55.230 --> 00:07:55.790
game.

108
00:07:55.920 --> 00:07:58.150
Let's go look at the flag choice component.

109
00:08:00.120 --> 00:08:05.400
Now this computer is a stateless functional component and all it is rendering is the four options.

110
00:08:05.420 --> 00:08:07.690
And then a button to say guess.

111
00:08:08.070 --> 00:08:09.420
So fairly simple.

112
00:08:09.420 --> 00:08:17.280
We're mapping over those four inputs and we're creating some GSX with input tag wrapped in a label and

113
00:08:17.280 --> 00:08:22.420
notice this check property checked is either true or false.

114
00:08:22.580 --> 00:08:29.110
And whereas that being set well back in the flag question we're mapping over our options.

115
00:08:29.400 --> 00:08:33.720
And if the user choice is equals that option ID then checked is true.

116
00:08:33.780 --> 00:08:35.370
Otherwise it's false.

117
00:08:35.410 --> 00:08:37.540
In fact there's a silly bit of code here.

118
00:08:37.680 --> 00:08:45.480
We don't even need this ternary the boolean expression triple equals is good enough.

119
00:08:45.540 --> 00:08:47.990
Lastly let's look at the flag answer component.

120
00:08:51.250 --> 00:08:52.850
And that's a pretty simple one.

121
00:08:52.880 --> 00:08:57.710
It's basically correct or incorrect depending on the props or passed in here.

122
00:08:57.710 --> 00:09:02.230
And the answer is just the string that represents the correct answer.

123
00:09:02.270 --> 00:09:06.950
And finally we've got an on next which is coming all the way from our country game components.

124
00:09:06.960 --> 00:09:08.210
Let's take a look at that function

125
00:09:13.200 --> 00:09:20.580
so on next is this next question and what it does is it gets the countries out of state gets a new correct

126
00:09:20.580 --> 00:09:27.240
option a new set of options including that correct option and then sets the state again with that new

127
00:09:27.240 --> 00:09:31.030
correct option and new questions state of question.

128
00:09:31.490 --> 00:09:32.620
So that's all for this one.

129
00:09:32.620 --> 00:09:34.920
And congratulations on making it this far.

130
00:09:34.920 --> 00:09:37.230
Next up we're going to talk about the re-act router.
