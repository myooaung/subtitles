1
00:00:00,750 --> 00:00:04,980
Are right and this screencast we're going to build a small redux to do application.

2
00:00:04,980 --> 00:00:06,300
We're going to do this with a query.

3
00:00:06,360 --> 00:00:10,130
And then the next video we're really going to start integrating re-act into the mix.

4
00:00:10,140 --> 00:00:15,030
So what we're going to do right now I'm just going to make a copy of the last application that I had

5
00:00:15,420 --> 00:00:19,760
which was the redux counter.

6
00:00:19,920 --> 00:00:23,520
And then I'm going to copy that into a folder called redux to use.

7
00:00:23,940 --> 00:00:31,530
I'm going to UCD into redux to use and I'm just going to open this up and have one particular look at

8
00:00:31,530 --> 00:00:32,490
the files that I have.

9
00:00:32,490 --> 00:00:34,540
It looks a lot like my counter code.

10
00:00:35,070 --> 00:00:38,020
But what I want to do now is change up this HDMI out.

11
00:00:38,640 --> 00:00:43,240
And I want to change up some of that javascript but I still want to keep these three scripts right here.

12
00:00:43,740 --> 00:00:49,890
So what I'm going to start off with is in an ordered list that will call to use and inside of here we're

13
00:00:49,890 --> 00:00:51,800
going to start appending some list items.

14
00:00:51,900 --> 00:00:54,220
But in order to do that we need a form.

15
00:00:54,330 --> 00:00:59,890
So I'm going to make a form that pretty much goes nowhere and I'll give this a label.

16
00:01:00,150 --> 00:01:07,050
Let me spell that correctly a label for a task a task and I will give this an input with a type of text.

17
00:01:07,230 --> 00:01:10,680
We'll make sure the name is task and the idea is task.

18
00:01:10,680 --> 00:01:17,370
And finally we'll just make one button that says add a to do and when we're done with it we should be

19
00:01:17,370 --> 00:01:19,330
able to focus on our job script.

20
00:01:19,410 --> 00:01:22,080
So let's just quickly open this up in the browser.

21
00:01:22,080 --> 00:01:26,850
We shouldn't really see much here except for a little form to add a to do but we're going to do now

22
00:01:26,850 --> 00:01:28,980
is work on some of the javascript here.

23
00:01:29,340 --> 00:01:34,440
So we need to think about what our initial state looks like and our initial stage should be relatively

24
00:01:34,440 --> 00:01:36,670
similar to what we had before.

25
00:01:36,690 --> 00:01:41,790
It's going to be an object but we're going to have a property called to Dewes which starts off as some

26
00:01:41,790 --> 00:01:46,540
empty array and then we're going to need a way to keep track of each to do that we create.

27
00:01:46,740 --> 00:01:50,180
So I'll make a property called ID and set it to be zero.

28
00:01:50,520 --> 00:01:55,740
We then want our root producer to start with some kind of initial state which looks good but let's do

29
00:01:55,740 --> 00:02:01,950
this again from scratch by default we want to see what the actual type is.

30
00:02:01,950 --> 00:02:06,810
So we are going to switch on the action type we could use false statements if you're more comfortable

31
00:02:06,810 --> 00:02:07,130
with that.

32
00:02:07,140 --> 00:02:08,260
That's totally fine.

33
00:02:08,700 --> 00:02:18,780
In the case that we have had to do we are going to do something here will add to do what other situations

34
00:02:18,780 --> 00:02:22,050
might we have we might want to remove or to do.

35
00:02:22,050 --> 00:02:27,330
And when that happens we'll do something here or move it to do that by default.

36
00:02:27,330 --> 00:02:33,650
If it's none of those let's just return whatever our state is keep it real simple for now.

37
00:02:35,630 --> 00:02:38,450
Let's go back and take out some of this code that we have right here.

38
00:02:38,480 --> 00:02:41,230
We're just going to start with a document ready.

39
00:02:41,510 --> 00:02:45,470
And what do we need to think about with regards to our DOM manipulation.

40
00:02:45,470 --> 00:02:48,500
We need to think about when the form is submitted.

41
00:02:48,500 --> 00:02:51,580
We need to dispatch the ad to do action.

42
00:02:51,980 --> 00:02:52,820
So how do we do that.

43
00:02:52,820 --> 00:02:55,130
Well let's start with an event listener on the form.

44
00:02:55,400 --> 00:03:02,170
And when that form is submitted we're going to run a function with some kind of event object.

45
00:03:02,180 --> 00:03:04,340
The first thing we want to do is prevent the default.

46
00:03:04,550 --> 00:03:09,500
To make sure that the page doesn't refresh so it will prevent the default here.

47
00:03:09,500 --> 00:03:15,200
And then we want to think about actually grabbing what was typed in in that input.

48
00:03:15,200 --> 00:03:20,930
So if you look back at our index that each TNL this has an ID task so we could say something like make

49
00:03:20,930 --> 00:03:29,120
our new task to be whatever the idea of task has which is an input and it's value whatever the user

50
00:03:29,120 --> 00:03:30,370
typed in.

51
00:03:30,380 --> 00:03:37,570
We're then going to dispatch an action call store dispatch and what action do we want.

52
00:03:37,610 --> 00:03:42,200
Well remember all of our actions have to be objects and they always have to have the key of type.

53
00:03:42,200 --> 00:03:43,190
And what do we want to do here.

54
00:03:43,190 --> 00:03:44,810
Well we probably want to to do.

55
00:03:45,380 --> 00:03:51,620
But when we think about adding it to do we're going to want to grab whatever the user typed in.

56
00:03:51,860 --> 00:03:54,690
So we're going to add another key inside of here.

57
00:03:54,770 --> 00:04:01,040
We can call that task and that is going to be some new task.

58
00:04:01,190 --> 00:04:03,550
We're going to send this information to the store.

59
00:04:04,130 --> 00:04:08,940
So why don't we for now just simply put a debugger right here and let's just return state.

60
00:04:08,990 --> 00:04:14,020
We'll keep it real simple but we added to do let's see what we actually dispatch right here.

61
00:04:14,030 --> 00:04:18,920
And to keep it real simple the last thing I'm going to do is just grab that form and we're going to

62
00:04:18,920 --> 00:04:21,360
trigger the reset event.

63
00:04:21,500 --> 00:04:24,690
And this will simply just clear any form values that I have.

64
00:04:25,070 --> 00:04:30,950
So one more time when the form I submitted don't let the page refresh grab whatever the user typed in

65
00:04:31,280 --> 00:04:39,110
and send an action to the reducer who gets to send those actions the store will give it a type because

66
00:04:39,110 --> 00:04:43,640
they always always have to have a type and will give it some property called Task We'll see how we use

67
00:04:43,640 --> 00:04:44,360
that.

68
00:04:44,420 --> 00:04:46,040
So I'll save this right now.

69
00:04:46,040 --> 00:04:50,340
I'll head back and refresh the page and open my chrome dev tools so I can see a debugger happen.

70
00:04:50,420 --> 00:04:56,560
I'll go trying to add something like eat dinner when I add that to do I make it to the root reducer.

71
00:04:56,630 --> 00:04:57,270
Great.

72
00:04:57,620 --> 00:05:03,000
And you can see right here that my action has a property called tape as well as a property called task.

73
00:05:03,020 --> 00:05:06,820
This is the first time that we're seeing passing additional keys in an action.

74
00:05:06,980 --> 00:05:09,920
Aside from type but you can pass in whatever you'd like.

75
00:05:09,950 --> 00:05:17,040
That's really nice because now our reducer can take that task and put it in to our to do's in the there's

76
00:05:17,040 --> 00:05:18,480
going to be a little bit of work to do that.

77
00:05:18,510 --> 00:05:20,150
So let's see how we can do that.

78
00:05:20,160 --> 00:05:25,680
Your first thought might be something like let's go take this state and let's just go push in whatever

79
00:05:25,680 --> 00:05:31,160
the action and the task Propertius member task is what we just got back in our action.

80
00:05:31,590 --> 00:05:33,060
But that wouldn't be good.

81
00:05:33,060 --> 00:05:36,570
Remember we always always want to keep our functions pure.

82
00:05:36,570 --> 00:05:38,500
So what we're going to do is keep it real simple.

83
00:05:38,640 --> 00:05:41,570
Let's start by making some kind of new state.

84
00:05:41,700 --> 00:05:43,980
And this is going to be a direct copy of state.

85
00:05:44,100 --> 00:05:51,580
We're going to spread out whatever state was we can then take whatever the ideas of state and increment

86
00:05:51,590 --> 00:05:54,610
it because this did you should have an idea of one.

87
00:05:54,660 --> 00:05:56,250
And we're starting at zero.

88
00:05:56,850 --> 00:06:02,560
What we're then going to do is return an object because remember our state is always an object.

89
00:06:02,790 --> 00:06:05,960
But inside this object what keys are we going to have.

90
00:06:06,360 --> 00:06:10,010
We're going to have whatever new state has.

91
00:06:10,350 --> 00:06:12,980
That should include any to do's and an ID.

92
00:06:13,320 --> 00:06:20,510
And we're going to pass in another key of to use now what we need to do here is make to use an array.

93
00:06:20,640 --> 00:06:26,850
And what we're going to do is grab all of the previous to views that we had we're going to spread out

94
00:06:26,880 --> 00:06:32,880
all of those to do's as well as a new to do that we're going to make each to do should be an object

95
00:06:32,880 --> 00:06:36,180
that has some kind of task and some corresponding ID.

96
00:06:36,300 --> 00:06:43,260
So we'll say that this task is going to be whatever is passed in in the action and the idea is going

97
00:06:43,260 --> 00:06:46,830
to be whatever we're storing in our state.

98
00:06:46,860 --> 00:06:50,540
Remember we've just incremented this by one.

99
00:06:50,790 --> 00:06:55,450
So let's go try this out and add a couple to do's and let's go see our state change.

100
00:06:55,530 --> 00:06:57,260
There's a lot of it is 2015.

101
00:06:57,330 --> 00:07:01,130
Even more that we're doing right now we're spreading out whatever is in state.

102
00:07:01,170 --> 00:07:03,120
This is the idea of just making a copy.

103
00:07:03,240 --> 00:07:08,340
We're going to increment that ID by one because remember our dues always need a unique ID.

104
00:07:08,430 --> 00:07:12,650
We're then going to take that ID and just put it in a new object.

105
00:07:12,660 --> 00:07:16,170
I'm being very explicit here remember you can always refactor this a little bit but want to go step

106
00:07:16,170 --> 00:07:19,850
by step to Doo's is going to be an array like it always is.

107
00:07:19,860 --> 00:07:25,500
But this time it's going to be whatever was in that state as well as a new to do that we're about to

108
00:07:25,500 --> 00:07:31,380
make that's going to include some kind of task and some kind of ID.

109
00:07:31,620 --> 00:07:35,430
So let's save this and tried out our first page.

110
00:07:35,430 --> 00:07:38,850
Head over to the council and I will go home.

111
00:07:39,720 --> 00:07:42,460
Let's go take a look at Stuart Dockett state.

112
00:07:42,540 --> 00:07:48,680
We can see right now that our two do has a task to go home and an idea of one was try something else.

113
00:07:48,990 --> 00:07:51,430
Let's go eat more dinner.

114
00:07:51,660 --> 00:07:52,700
When I had that to do.

115
00:07:52,740 --> 00:07:54,300
Let's go take a look at our state.

116
00:07:54,570 --> 00:07:55,650
And that looks great.

117
00:07:55,650 --> 00:07:58,100
Our to do's now are go home and eat more dinner.

118
00:07:58,110 --> 00:08:03,030
And we're incrementing the ID so it looks like we are correctly modifying the state and everything that

119
00:08:03,030 --> 00:08:04,440
we're doing is a pure function.

120
00:08:04,440 --> 00:08:06,300
We're not overriding any existing state.

121
00:08:06,300 --> 00:08:09,680
We're always starting by making a copy of that state.

122
00:08:10,470 --> 00:08:12,390
But now we actually have to put that on the page.

123
00:08:12,420 --> 00:08:17,130
So our next step is actually to work with some great Querrey before we bother resetting all of these

124
00:08:17,130 --> 00:08:17,960
foreign values.

125
00:08:18,000 --> 00:08:22,160
Why don't we get whatever the current state is at that time.

126
00:08:22,260 --> 00:08:27,570
Because remember after we dispatch that action we should have our new to do in redux the what we'll

127
00:08:27,570 --> 00:08:30,370
then do is make some kind of new list item.

128
00:08:30,600 --> 00:08:32,950
This is just going to be pretty simple.

129
00:08:32,970 --> 00:08:41,910
Jay Cuore last item and we're going to give it the text says object will give that the text of whatever

130
00:08:41,910 --> 00:08:44,670
our new text is that we got in this case.

131
00:08:44,670 --> 00:08:46,650
That's the task.

132
00:08:46,650 --> 00:08:47,720
What else do we have to do here.

133
00:08:47,730 --> 00:08:56,190
We are going to append that new list item to our ID of to do.

134
00:08:56,610 --> 00:09:01,500
So we're going to append that new data and we can be a little more particular and actually give these

135
00:09:01,590 --> 00:09:06,450
a dollar sign so that we know that these are J.A.G. elements that we're making and working with.

136
00:09:06,480 --> 00:09:09,600
So I'll refresh the page I'll go eat.

137
00:09:09,600 --> 00:09:15,510
ALEX Good of you to sleep and I'll go keep recording more.

138
00:09:15,510 --> 00:09:16,460
That looks good.

139
00:09:16,800 --> 00:09:20,070
Let's go take a step back and see how we made this all work.

140
00:09:20,100 --> 00:09:25,990
We started with some initial state our initial state contains not just a counter now but multiple properties.

141
00:09:26,370 --> 00:09:31,680
An array of to do's each of which will be an object with its own ID and some kind of way of keeping

142
00:09:31,680 --> 00:09:34,120
track of what that ideas over time.

143
00:09:34,350 --> 00:09:37,270
We could try to put the idea here for the first time and change it.

144
00:09:37,290 --> 00:09:38,820
But I'm just keeping it real simple.

145
00:09:38,820 --> 00:09:40,210
Moving it out over here.

146
00:09:40,500 --> 00:09:42,800
Remember that we can't create a store without a reducer.

147
00:09:42,810 --> 00:09:44,570
So we have our producer right here.

148
00:09:44,700 --> 00:09:49,230
When you start working on larger applications your reducers are moved to separate files and folders

149
00:09:49,500 --> 00:09:54,620
and your store is in another file and even some of your action creators those functions that make actions

150
00:09:54,900 --> 00:09:55,930
live in another file.

151
00:09:56,100 --> 00:10:00,680
But I'm putting it all in one so we can work through this line by line what we're going to do in the

152
00:10:00,680 --> 00:10:01,690
reducer.

153
00:10:01,690 --> 00:10:03,600
You see what the action type is.

154
00:10:03,800 --> 00:10:10,160
If it's had to do make a copy of the state like we always do increment the id property and then return

155
00:10:10,190 --> 00:10:15,830
a new object with whatever was in that state before which is going to have a new ID as well as the to

156
00:10:15,830 --> 00:10:19,230
do property which is whatever all those old to do were.

157
00:10:19,400 --> 00:10:23,650
And a new to do with a task property and an ID property.

158
00:10:23,690 --> 00:10:27,550
The task is going to be whatever the user typed in that comes in in the action.

159
00:10:27,740 --> 00:10:30,770
And the idea is going to be whatever we just changed our ID to be.

160
00:10:30,770 --> 00:10:32,950
We're always going to increment that by one.

161
00:10:33,020 --> 00:10:35,260
In the case of a move to do what we haven't got there yet.

162
00:10:35,450 --> 00:10:40,610
But in the case of a action where it's not and to do or a move to do we're just going to return the

163
00:10:40,610 --> 00:10:46,220
state 9:22 we make our store and whenever we make a store we always have to pass in that route reducer.

164
00:10:46,220 --> 00:10:50,590
And here we actually read some J.A.G. when the downloads and a form is submitted.

165
00:10:50,660 --> 00:10:52,620
Stop it from being refreshed.

166
00:10:52,700 --> 00:10:58,560
Grab whatever the user typed in and dispatch an action whereas that dispatch coming from our Reebok

167
00:10:58,590 --> 00:11:03,770
store who gets to dispatch the actions the redux store what our actions objects that always contain

168
00:11:03,770 --> 00:11:05,090
a key of type.

169
00:11:05,090 --> 00:11:10,340
In our case we're dispatching had to do and we're passing in a property of task which will come in as

170
00:11:10,400 --> 00:11:11,660
action that task.

171
00:11:12,050 --> 00:11:17,930
And this new task which is whatever the user typed in in the input when we're done with that we're going

172
00:11:17,930 --> 00:11:22,490
to go see what our redux state looks like we're going to make a new list item with whatever the user

173
00:11:22,490 --> 00:11:27,580
typed in and we're going to append that new list item to the page.

174
00:11:27,590 --> 00:11:32,000
Now you might be wondering why would we want to get the current state at that point.

175
00:11:32,000 --> 00:11:38,000
Now if you wanted to do something like append new information to the page or change anything that we

176
00:11:38,000 --> 00:11:43,130
need in the state we'd want to do that and you might be wondering Well one of my actually going to be

177
00:11:43,130 --> 00:11:43,800
doing that.

178
00:11:43,880 --> 00:11:51,410
We're going to need to know specifically what the state is when we start actually deleting those new

179
00:11:51,470 --> 00:11:51,860
use.

180
00:11:51,860 --> 00:11:55,880
So right now we're going to get that state but we might not be using it just yet.

181
00:11:55,880 --> 00:12:01,290
We're going to see where to use it in the next what I love to do right now is every time that I make

182
00:12:01,290 --> 00:12:08,580
it to do like eat and sleep I'd like to have a button next to it that I can click to delete those tissues.

183
00:12:09,000 --> 00:12:15,140
And each one of these buttons should have an ID that corresponds to whatever ID that to do house.

184
00:12:15,180 --> 00:12:16,580
So how do I do that.

185
00:12:16,620 --> 00:12:21,930
We've got to make about what's going to make a new button and this button right here is going to be

186
00:12:21,930 --> 00:12:30,180
once again a worry button and it's going to have the text of an X and it's going to have an ID property

187
00:12:30,630 --> 00:12:35,370
which is what ever current state DOT ID is.

188
00:12:35,370 --> 00:12:36,960
So what are we doing here.

189
00:12:37,500 --> 00:12:44,520
Current state that Id just refers to whatever the latest ID property is in our redox state.

190
00:12:44,780 --> 00:12:49,680
And what that means is that each time we make a to do we'll make a list item and a button with whatever

191
00:12:49,680 --> 00:12:51,940
the ideas in our state.

192
00:12:51,940 --> 00:12:52,900
That might seem like a lot.

193
00:12:52,910 --> 00:12:57,540
Let's go to the browser and see what's happening in the elements tab will seek a look at what's inside.

194
00:12:57,540 --> 00:13:01,260
To do this I'm going to need to open this up.

195
00:13:01,340 --> 00:13:04,170
We take a look at our list item what where is our button.

196
00:13:04,170 --> 00:13:06,010
Looks like we've got to append our button.

197
00:13:06,160 --> 00:13:12,750
It's the last thing we want to do is grab our new list item and we actually can do this right here and

198
00:13:12,750 --> 00:13:14,560
we're going to append that new button.

199
00:13:14,670 --> 00:13:18,160
Let's put the button inside of here so that way we can see that.

200
00:13:18,180 --> 00:13:20,760
Let's try this one more time.

201
00:13:21,510 --> 00:13:22,900
Let's take a look inside of here.

202
00:13:23,280 --> 00:13:26,430
And notice that there is an ID of one.

203
00:13:26,940 --> 00:13:29,640
Let's go try to sleep.

204
00:13:29,640 --> 00:13:32,200
Notice inside of here there's an ID of two.

205
00:13:32,300 --> 00:13:34,470
Well where's that I.D. coming from.

206
00:13:34,470 --> 00:13:40,590
If we take a look at our store state we can see the ideas too which means if we make another to do we

207
00:13:40,590 --> 00:13:46,830
should expect the state to have an ID of three and we should expect this button to also have an ID of

208
00:13:46,830 --> 00:13:47,670
three.

209
00:13:47,760 --> 00:13:49,320
You could use a data attribute or something.

210
00:13:49,320 --> 00:13:53,580
I'm just using an ID to keep it real simple but what's the purpose of this ID.

211
00:13:53,610 --> 00:13:57,300
Why do we need to uniquely identify every single to do.

212
00:13:57,720 --> 00:14:01,510
Well when we remove it to do we need to know which one to remove.

213
00:14:01,530 --> 00:14:07,890
So what we're going to do is add an event listener on those buttons inside of this form we could make

214
00:14:07,890 --> 00:14:11,610
a new event listener but we're going to use a little bit of event delegation.

215
00:14:11,610 --> 00:14:19,950
We are going to say that for any unordered list when there is a click on any button inside of here that

216
00:14:19,950 --> 00:14:24,610
can be created at any point run a function without event object.

217
00:14:24,960 --> 00:14:28,280
What we'll do right now is dispatch an action.

218
00:14:28,290 --> 00:14:35,730
We are going to dispatch the action with a type of remove to do and we need to pass in some kind of

219
00:14:35,730 --> 00:14:36,430
ID.

220
00:14:36,660 --> 00:14:43,950
We're going to use squirty to get whichever button was clicked and we are going to get whatever ID attribute

221
00:14:44,030 --> 00:14:50,520
is we're going to stop right here and throw a debugger and make sure that we make it to remove to do.

222
00:14:50,540 --> 00:14:52,730
This is a really good way to work dispatch an action.

223
00:14:52,760 --> 00:14:57,260
See if you're getting the data that you want and just return the state and not actually removing anything

224
00:14:57,260 --> 00:14:57,430
here.

225
00:14:57,440 --> 00:15:00,150
But we just want to see whatever our state is at that point.

226
00:15:00,470 --> 00:15:05,510
So I'll refresh the page I'll eat a click on this button and it looks like we're successfully making

227
00:15:05,510 --> 00:15:07,370
it to remove to do.

228
00:15:07,850 --> 00:15:15,290
But what's happening here inside of our action you have a type of removed to do and an idea of one where

229
00:15:15,290 --> 00:15:21,590
is that idea of one coming from well event that target refers to that button that was clicked and the

230
00:15:21,590 --> 00:15:24,830
button that was clicked has an attribute called ID.

231
00:15:24,830 --> 00:15:26,130
Let's take a look at that.

232
00:15:26,180 --> 00:15:29,800
That refers to this attribute ID right over here.

233
00:15:30,260 --> 00:15:34,310
What we've done is send a string to redox because our ID is turned into a string.

234
00:15:34,310 --> 00:15:38,800
So we're going to have to deal with converting that string to a number.

235
00:15:38,810 --> 00:15:40,430
So what do we do with this ID.

236
00:15:40,790 --> 00:15:47,510
Well what we'd like to do is go through all of our to do's and remove the one with an ID of one.

237
00:15:47,810 --> 00:15:49,440
So you might be thinking once again.

238
00:15:49,610 --> 00:15:50,500
Oh that's easy.

239
00:15:50,540 --> 00:15:53,680
Well we can just simply get that specific ID.

240
00:15:53,790 --> 00:15:57,620
We could do something like that to do that splice.

241
00:15:57,710 --> 00:16:03,560
We just want to remove one thing starting from whatever index that we got.

242
00:16:03,560 --> 00:16:04,990
So what's our starting point.

243
00:16:04,990 --> 00:16:11,030
Well that's going to be action that ID and then more remove one thing and we'll be very fancy we'll

244
00:16:11,030 --> 00:16:16,940
convert this to a number to make sure that we get the right index and then we'll return our stay positive

245
00:16:16,940 --> 00:16:20,310
video and see if you can figure out what's wrong here.

246
00:16:22,650 --> 00:16:28,600
Well let's see I'm going to save this or refresh the page or I'll eat a click on this right here and

247
00:16:28,600 --> 00:16:34,210
take a look at my state and it's still there looks like that's still there.

248
00:16:34,210 --> 00:16:35,460
That idea of 0.

249
00:16:35,770 --> 00:16:43,030
Well what I did here is just simply trying to splice from my to do's and return that state not only

250
00:16:43,030 --> 00:16:45,670
is this code incorrect but the function is also impure.

251
00:16:45,670 --> 00:16:52,450
So I don't even want to bother debugging this because I'm directly mutating or changing my state a better

252
00:16:52,450 --> 00:16:55,560
way to do this is to make a copy of our to do this.

253
00:16:55,750 --> 00:16:56,980
And how can we do that.

254
00:16:56,980 --> 00:17:04,300
How can we take our two do's and make a copy of it without that specific one inside of it.

255
00:17:04,480 --> 00:17:08,190
We could write a for loop but there's also a really nice array method that helps us do that.

256
00:17:08,200 --> 00:17:09,200
And that's filter.

257
00:17:09,490 --> 00:17:17,470
We're going to say grab all of the traduce where the id property is not whatever idea we passed in right

258
00:17:17,470 --> 00:17:18,020
now.

259
00:17:18,520 --> 00:17:22,890
And then we can simply return a copy of the state with our two do.

260
00:17:22,960 --> 00:17:26,360
This is the same thing as doing to do is to do this right here.

261
00:17:26,590 --> 00:17:31,700
We're just going to pass in an object and right here are two use.

262
00:17:31,780 --> 00:17:36,870
So what we're doing here is simply filtering out any of those to do that don't have that ID.

263
00:17:37,200 --> 00:17:37,860
Let's see this.

264
00:17:37,860 --> 00:17:41,830
And our first page we're not actually going to see it removed from the page because that's where his

265
00:17:41,830 --> 00:17:46,020
job but let's go take a look at what our redux date is right now.

266
00:17:46,090 --> 00:17:47,690
We have an array where ideas too.

267
00:17:47,760 --> 00:17:49,160
I mean have these two.

268
00:17:49,360 --> 00:17:54,010
When I click on it and take a look at my steed notice that that one is actually gone.

269
00:17:55,030 --> 00:17:57,410
And my Adey still stays the same.

270
00:17:57,470 --> 00:18:00,220
I've used filter to make a copy of this array.

271
00:18:00,230 --> 00:18:04,630
You're going to see very commonly when you do remove operations with redox that filter is a wonderful

272
00:18:04,630 --> 00:18:08,630
operation when you're working on an array because filter is a pure function.

273
00:18:08,650 --> 00:18:11,310
It always returns a new array just like map.

274
00:18:11,500 --> 00:18:15,370
You'll see map as well when you do things like updating which I really encourage you to try to implement

275
00:18:15,430 --> 00:18:21,450
omni's to use to the last part that we need here is to actually have some jay query remove those specific

276
00:18:21,460 --> 00:18:24,890
to do this and that really just requires a little bit of Jey query.

277
00:18:25,000 --> 00:18:29,380
What we're gonna do is get whatever was clicked on the event at Target.

278
00:18:29,380 --> 00:18:33,500
We're going to go up to its parent which is the list item and we're going to remove it.

279
00:18:33,620 --> 00:18:35,100
So I'm going to save that.

280
00:18:35,140 --> 00:18:36,210
We're going to go back here.

281
00:18:36,370 --> 00:18:40,680
Let's try to first take a look at our state an array with zero idea.

282
00:18:40,870 --> 00:18:41,880
Let's go eat.

283
00:18:42,400 --> 00:18:43,710
Let's go to sleep.

284
00:18:43,950 --> 00:18:44,880
Let's go home.

285
00:18:47,140 --> 00:18:51,850
Go take a look at our state and we have three items inside and an ID of three that looks good.

286
00:18:51,850 --> 00:18:56,540
The idea is incrementing it staying at three so that the next time it will go up to 4 let's go remove

287
00:18:56,540 --> 00:18:57,140
these.

288
00:18:57,280 --> 00:18:58,700
Looks like the query is working.

289
00:18:58,810 --> 00:19:00,710
So all those three things are being removed.

290
00:19:00,850 --> 00:19:06,080
Looks like I have nothing left in my to do array but my ID is three so I have had another.

291
00:19:07,090 --> 00:19:11,080
We can see right here we have an idea for and that to do right there.

292
00:19:11,080 --> 00:19:15,400
One thing that you really want to try to make sure is that you're not mutating state.

293
00:19:15,700 --> 00:19:20,350
And sometimes you'll get some UI issues around that but sometimes you may actually find yourself changing

294
00:19:20,350 --> 00:19:24,190
state and realizing that it's still all kind of works.

295
00:19:24,190 --> 00:19:29,560
So what I want to introduce is a wonderful Chrome extension called a redux dev tools and what we're

296
00:19:29,560 --> 00:19:32,680
going to look at is the second one break here.

297
00:19:32,950 --> 00:19:37,510
I have this already installed so feel free to take a look at the documentation and install the redux

298
00:19:37,520 --> 00:19:38,260
dev tools.

299
00:19:38,290 --> 00:19:43,090
It's a Chrome extension so grab it from the Chrome Web store using Firefox grab it from the Firefox

300
00:19:43,150 --> 00:19:49,960
add ons what you want to do right after you do that is simply add this line right here to where we call

301
00:19:49,960 --> 00:19:51,640
create store.

302
00:19:51,670 --> 00:19:57,250
The second thing that you want to do and doing this Ancrum is I'll go over here and I'll click on this

303
00:19:57,250 --> 00:19:58,570
extension right here.

304
00:19:58,930 --> 00:20:02,620
I'll go to manage extensions inside of here.

305
00:20:02,620 --> 00:20:08,020
You want to make sure that you have this checked right there allow access to file you are.

306
00:20:08,050 --> 00:20:12,250
Since we're just running things off the file system we want to make sure that redux dev tool still picks

307
00:20:12,250 --> 00:20:15,520
up what we've done so back over here once you've installed it.

308
00:20:15,610 --> 00:20:20,020
You want to make sure once again that once it's installed you click on this right here.

309
00:20:20,260 --> 00:20:25,450
Manage extensions and make sure that allow access the file you are as is clicked.

310
00:20:25,510 --> 00:20:28,090
You can also just run this on a server and you'll be fine.

311
00:20:28,090 --> 00:20:33,270
We're then going to grab this line right here and we're going to see the reduction of tools in action.

312
00:20:33,400 --> 00:20:34,330
And where does that go.

313
00:20:34,330 --> 00:20:35,150
Take a look again.

314
00:20:35,170 --> 00:20:40,390
When you call create store so when you create store we're going to pass in this line right here.

315
00:20:40,420 --> 00:20:42,240
This is not something you're going to memorize.

316
00:20:42,240 --> 00:20:45,680
This is something you find yourself copying and pasting quite a bit.

317
00:20:45,700 --> 00:20:52,120
So if we have this loaded we should be able to go back and we should have a tab with redox that has

318
00:20:52,210 --> 00:20:54,340
this item right here.

319
00:20:54,350 --> 00:20:57,390
Now it's really cool about this is using this application.

320
00:20:57,400 --> 00:21:00,280
We can actually see changes in our redux.

321
00:21:00,640 --> 00:21:07,950
So I'm going to eat some dinner or not now but hopefully after I record this what I just did is dispatch

322
00:21:07,950 --> 00:21:10,510
an action with the task of eat dinner.

323
00:21:10,540 --> 00:21:13,100
And here's what my state looks like right now.

324
00:21:13,480 --> 00:21:14,380
That's pretty awesome.

325
00:21:17,720 --> 00:21:22,360
Brings out a little bit so we can see in a little bit more detail on this over here.

326
00:21:22,640 --> 00:21:24,690
And I'll go actually hide my crumb chrome tools.

327
00:21:25,080 --> 00:21:26,630
I'll bring this over here.

328
00:21:26,630 --> 00:21:28,760
I'm going to click on this right here.

329
00:21:29,150 --> 00:21:35,450
And what you can see here is that we just dispatched that removed to do what I'll do now is just add

330
00:21:35,450 --> 00:21:36,660
another to do.

331
00:21:37,550 --> 00:21:50,000
So once again I'll eat and I'll remove all sleep and remove and I'll go home and we can see all of these

332
00:21:50,000 --> 00:21:51,330
tasks that have happened.

333
00:21:52,500 --> 00:21:58,420
What I can do here as well is simply act as if I didn't do that I can skip that.

334
00:21:58,530 --> 00:22:04,540
And if you take a look at the idea right now is back to Moscow and skip that and it's back to three.

335
00:22:04,740 --> 00:22:08,210
Now since I'm using Jay Querrey for Dominic violation things are a little different.

336
00:22:08,520 --> 00:22:13,830
But if you want to see changes in your state you can always see what would happen if you didn't run

337
00:22:13,860 --> 00:22:15,080
these actions.

338
00:22:15,090 --> 00:22:18,550
This is the idea of time traveling that we spoke about a little while ago.

339
00:22:19,540 --> 00:22:23,570
You can see that as I is my state actually changes.

340
00:22:23,650 --> 00:22:28,660
What's really cool about this is you can go back in your application and see what changes have been

341
00:22:28,660 --> 00:22:30,610
made.

342
00:22:31,020 --> 00:22:35,320
If you want to look at this right here it's a little bit of a more verbose way of seeing all the things

343
00:22:35,320 --> 00:22:36,130
that have happened.

344
00:22:36,430 --> 00:22:40,430
If I actually reset everything I can go back to my default state.

345
00:22:40,630 --> 00:22:43,070
Now since I'm using Querrey for dominant violation.

346
00:22:43,180 --> 00:22:47,010
It's really hard to keep a query and redux in sync.

347
00:22:47,110 --> 00:22:51,880
This is where we're going to start bringing re-act back into the mix because if we can sync up react

348
00:22:51,910 --> 00:22:58,030
with our redux state we should be able to not only make sure we're writing pure functions but also see

349
00:22:58,030 --> 00:23:01,570
changes in our re-act application when we change our read state.

350
00:23:01,570 --> 00:23:04,330
So don't worry too much if you're not super comfortable with these tools.

351
00:23:04,330 --> 00:23:08,620
I just wanted to introduce them at a very high level because when you start connecting react we'll see

352
00:23:08,620 --> 00:23:10,260
it all come back together.

353
00:23:10,570 --> 00:23:14,860
So one more time let's go over the code that we wrote inside our index that each you know we have a

354
00:23:14,860 --> 00:23:19,570
list of to do's here we're just going to append some list items in our form.

355
00:23:19,570 --> 00:23:20,770
We don't go anywhere.

356
00:23:20,770 --> 00:23:25,610
We see what the user types in with an idea of task and then we have a button to submit the form.

357
00:23:25,630 --> 00:23:27,200
We then have some queries I'm redux.

358
00:23:27,220 --> 00:23:33,040
And our own script file we make some initial state and we have a producer which accepts that initial

359
00:23:33,040 --> 00:23:34,690
state as a default parameter.

360
00:23:34,930 --> 00:23:41,260
When we add it to do we make a copy of the state add one to the ID and return a new object with that

361
00:23:41,290 --> 00:23:46,990
updated ID and whatever else was in state and overwrite the to use property with all the other to use

362
00:23:47,050 --> 00:23:51,810
and a new one that we make every to do has a task property and an id property.

363
00:23:51,880 --> 00:23:53,990
You're not sure where some of these things are coming from.

364
00:23:54,100 --> 00:23:57,600
Throw debuggers and see how data flows through a redux app.

365
00:23:57,700 --> 00:23:58,640
How does it work.

366
00:23:58,810 --> 00:24:02,080
Actions are dispatched they're dispatched by a store.

367
00:24:02,290 --> 00:24:07,900
Once the action is dispatched it goes to the producer and some new state is returned.

368
00:24:07,900 --> 00:24:10,180
How do we even figure out what our initial state is.

369
00:24:10,270 --> 00:24:13,310
We call create store with our producer.

370
00:24:13,310 --> 00:24:16,510
What's this whole thing here doing grabbing our redux dev tools.

371
00:24:16,540 --> 00:24:17,970
Those instructions are right here.

372
00:24:17,980 --> 00:24:21,700
If you google redux dev tools you want to make sure you're using this one specifically

373
00:24:24,640 --> 00:24:25,030
next.

374
00:24:25,090 --> 00:24:27,750
We have a little bit of query handling some damning tabulation.

375
00:24:27,820 --> 00:24:31,750
We're really going to bring reactance to the mix in a little bit because I can think of much more nicely

376
00:24:31,750 --> 00:24:36,580
with redux but you can use redox with Jay query with angular with backbone with whatever you'd like.

377
00:24:36,580 --> 00:24:40,000
It's just a centralized place to manage your city.

378
00:24:40,570 --> 00:24:45,790
What we have here is a little bit of advance delegation when in an ordered list Lewisohn's for a click

379
00:24:45,820 --> 00:24:46,700
and it's on a button.

380
00:24:46,720 --> 00:24:50,390
This way we don't replace an event with on every button and we can save some more space.

381
00:24:50,440 --> 00:24:52,080
We are going to dispatch an action.

382
00:24:52,350 --> 00:24:57,220
It's going to be called remove to do and it's going to have an additional property called ID which is

383
00:24:57,220 --> 00:24:58,750
whatever button was clicked downs.

384
00:24:58,750 --> 00:25:00,080
ID attribute.

385
00:25:00,700 --> 00:25:04,900
We're then going to go to the parent of that element which is a list item and we're going to remove

386
00:25:04,900 --> 00:25:05,260
it.

387
00:25:05,260 --> 00:25:08,670
This is the query and this right here is the redux.

388
00:25:08,710 --> 00:25:13,390
Remember we want to keep our redux state in sync with anything that we're doing in the DOM.

389
00:25:13,600 --> 00:25:18,140
So whenever we remove elements we also want to make sure we remove them from our redux date.

390
00:25:18,270 --> 00:25:21,460
The next thing we're listening for which we started with is that form submission.

391
00:25:21,610 --> 00:25:27,670
Stop the page from refreshing grab with the user typed in dispatch an action of ad to do and send to

392
00:25:27,670 --> 00:25:29,810
redux whatever the user typed in.

393
00:25:29,830 --> 00:25:35,220
We then want to get that current state so we know what that idea is so we can add it to a button.

394
00:25:35,400 --> 00:25:38,740
But before we make the button we make a list item with some text.

395
00:25:38,740 --> 00:25:44,930
We then make a button with a simple text of X and an ID attribute of whatever the redux date ideas.

396
00:25:45,010 --> 00:25:48,720
That's important because we need to know which to do to remove.

397
00:25:48,910 --> 00:25:53,750
We then append that button to the list item and then we append the list item to our traduce.

398
00:25:53,800 --> 00:25:56,440
And finally we reset our foreign values.

399
00:25:56,440 --> 00:25:58,600
So here's what it should look like when we have it working.

400
00:25:58,630 --> 00:25:59,840
We should be able to eat.

401
00:26:00,190 --> 00:26:06,260
We should be able to sleep with a P and we should be able to get rid of these right here.

402
00:26:06,280 --> 00:26:07,980
So that's it for our to do application.

403
00:26:07,990 --> 00:26:12,370
I encourage you to implement functionality for updating so you can use functions like map to make sure

404
00:26:12,370 --> 00:26:16,600
you're still using pure functions and in a little bit we're going to bring back re-act who are going

405
00:26:16,600 --> 00:26:17,890
to connect it with redux.

406
00:26:17,890 --> 00:26:19,510
And that's where things really get funny.

407
00:26:19,600 --> 00:26:20,710
I'll see you next week at.
