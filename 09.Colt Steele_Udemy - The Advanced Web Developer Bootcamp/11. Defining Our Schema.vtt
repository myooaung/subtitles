WEBVTT
1
00:00:00.300 --> 00:00:00.590
All right.

2
00:00:00.630 --> 00:00:06.300
So in this video we're going to connecter app to our Mongo database using mongoose and we're also going

3
00:00:06.300 --> 00:00:08.660
to define the schema for our to do.

4
00:00:08.910 --> 00:00:12.760
And we could add all of that code into our indexed G-S file.

5
00:00:12.930 --> 00:00:19.350
But as you'll see it's a solid 15 or so lines just to connect to the database and that's just for one

6
00:00:19.350 --> 00:00:20.520
model to do.

7
00:00:20.640 --> 00:00:26.910
But if we had users and I don't know tags and comments and a bunch of other things it would be 100 plus

8
00:00:26.910 --> 00:00:29.130
lines which would overwhelm this file.

9
00:00:29.250 --> 00:00:33.900
Not to mention the fact that we have zero routes zero other code at this moment.

10
00:00:33.900 --> 00:00:38.290
Aside from the bare bones for the simplest possible app so we're not going to do that.

11
00:00:38.310 --> 00:00:42.390
We're going to try and be structured logical about how we create this app.

12
00:00:42.480 --> 00:00:49.790
So we're going to make a new directory called models and inside of models we're going to have two files.

13
00:00:50.070 --> 00:00:55.880
So you can either create them in cloud 9 using this right click and we're going to have our index data.

14
00:00:55.950 --> 00:00:56.510
Yes.

15
00:00:56.640 --> 00:01:02.850
Which is important when we require a model's directory which will be doing a peer we'll be importing

16
00:01:02.850 --> 00:01:03.240
it.

17
00:01:03.340 --> 00:01:10.860
It will automatically look for it indexed out Geass file first and then we also want to have new file

18
00:01:11.520 --> 00:01:13.110
to do that.

19
00:01:13.220 --> 00:01:16.100
Yes and that will be where we put our to do model.

20
00:01:16.110 --> 00:01:23.220
So in this index yes file is where we're going to connect to mongoose and to do that and to start with

21
00:01:23.740 --> 00:01:30.360
our mongoose equals and we're going to require mongoose.

22
00:01:30.360 --> 00:01:32.580
So that's the most basic thing possible.

23
00:01:32.580 --> 00:01:39.870
I'm going to set the debug mode to true and all that that does is allow us to see what's happening at

24
00:01:39.870 --> 00:01:44.790
any given point when things are being sent to a database when they're failing instead of just silently

25
00:01:44.790 --> 00:01:50.190
failing then we're going to connect to our database server this thing over here.

26
00:01:50.190 --> 00:01:57.390
And then what would we do that with Mongoose dot connect and then argue well since we don't have a hosted

27
00:01:57.390 --> 00:02:00.860
thing somewhere using Mangalam we don't have our own server set up.

28
00:02:01.160 --> 00:02:08.790
It's just localhost so monkhood D-B colon slash slash local host slash and then whatever you want to

29
00:02:08.790 --> 00:02:10.980
call your applications database.

30
00:02:10.980 --> 00:02:12.940
So I'm going to do to do API.

31
00:02:13.190 --> 00:02:18.000
It doesn't matter and it doesn't exist we haven't created this database but that's fine.

32
00:02:18.030 --> 00:02:22.560
It will be created for us automatically if we try to connect something and insert something into a database

33
00:02:22.560 --> 00:02:23.190
that doesn't exist.

34
00:02:23.190 --> 00:02:28.350
It will make it so name something it doesn't really matter as long as you don't change it once you from

35
00:02:28.350 --> 00:02:29.660
your code.

36
00:02:30.240 --> 00:02:37.640
And the last thing we'll do here is actually set mongoose promise equals promise.

37
00:02:37.650 --> 00:02:41.410
And this is just to allow us to use the promise syntax.

38
00:02:41.460 --> 00:02:50.190
So we'll have things like this DBI to do that find and we can chain on then and don't catch rather than

39
00:02:50.190 --> 00:02:52.360
having to do a callback function.

40
00:02:52.530 --> 00:02:55.000
And this single line allows us to do that.

41
00:02:55.020 --> 00:02:59.490
We're going to use that promise rather than some other external promise library.

42
00:02:59.550 --> 00:03:04.560
This is all we need to require mongoose to set the debug mode to true which you don't have to have to

43
00:03:04.560 --> 00:03:09.310
connect to our actual database server and then to tell mongoose we're going to use promises.

44
00:03:09.450 --> 00:03:16.230
And then finally we need to go to our to do file and and here is where we actually do all of the logic

45
00:03:16.230 --> 00:03:17.960
to create our to do schema.

46
00:03:17.970 --> 00:03:21.320
So remember each to do there are three things we care about.

47
00:03:21.440 --> 00:03:22.840
And I'll just write them as comments.

48
00:03:22.950 --> 00:03:32.880
So we have our name we have our completed which is a boolean and then we have our created date just

49
00:03:32.880 --> 00:03:34.530
like that.

50
00:03:34.530 --> 00:03:36.960
So before we can go anywhere we need to require mongoose.

51
00:03:36.960 --> 00:03:40.180
I'm just going to copy this sexually when I type that.

52
00:03:40.530 --> 00:03:41.040
OK.

53
00:03:41.040 --> 00:03:46.080
So we're going to define our schema we'll just call it to do schema.

54
00:03:46.680 --> 00:03:51.370
And that's going to be equal to new mongoose dot schema.

55
00:03:51.630 --> 00:03:58.380
And and here is where we pass in an object with the key value pairs and you can add name first and we

56
00:03:58.380 --> 00:04:00.780
can do this for we just Pessin string.

57
00:04:00.900 --> 00:04:09.650
But I'm actually going to add an object in and say type is string so that I can also say it's required.

58
00:04:09.810 --> 00:04:16.750
So if I pass an object I can give it other pieces of data like if it's required and give a message.

59
00:04:16.800 --> 00:04:19.110
I mean you say please how about this.

60
00:04:19.140 --> 00:04:23.710
I'll say name cannot be blank.

61
00:04:24.660 --> 00:04:26.570
Perfect after name.

62
00:04:26.790 --> 00:04:31.710
We have completed and I'll do the same thing because I want that to have a default value.

63
00:04:31.800 --> 00:04:37.950
So type is going to be boolean and you going to have default of false when you add a new to do.

64
00:04:38.040 --> 00:04:41.700
You shouldn't have to specify you haven't done it yet because why would you be adding it if you've already

65
00:04:41.700 --> 00:04:42.270
done it.

66
00:04:42.630 --> 00:04:44.720
So it will be default false.

67
00:04:44.910 --> 00:04:48.000
And that way we won't have to manually set that either.

68
00:04:48.000 --> 00:04:50.170
Mongoose and Monga will take care of it.

69
00:04:50.280 --> 00:04:56.430
And then finally we'll have our created date which is going to be set equal to another object and type

70
00:04:56.430 --> 00:04:57.030
here.

71
00:04:57.060 --> 00:05:03.530
It's going to be date and we're also going to take advantage of default and set it to date dot now.

72
00:05:03.930 --> 00:05:09.740
So that will give us the current date whenever a new to do is created it will have a name it's a string

73
00:05:10.140 --> 00:05:16.530
and it's required if you think we had an error you will have completed which is a boolean true or false

74
00:05:16.650 --> 00:05:17.760
and the default is false.

75
00:05:17.790 --> 00:05:23.280
So we don't have to specify that and create a date is a date and the default is the current time when

76
00:05:23.280 --> 00:05:24.040
it's inserted.

77
00:05:24.150 --> 00:05:28.410
So really all we have to provide is name and the other two are taken care of.

78
00:05:28.410 --> 00:05:35.550
So that's our schema but we're still have another step which is to compile it into a model save it to

79
00:05:35.550 --> 00:05:43.650
a variable so capital T to do is a standard mongoose model and then we give it the name of the model

80
00:05:43.680 --> 00:05:50.520
which is in our case to do and then the schema which is coming from right here.

81
00:05:50.520 --> 00:05:52.160
So we'll save that.

82
00:05:52.170 --> 00:06:01.110
And then the last thing we'll do is add it to module that exports equals to do this model here.

83
00:06:01.110 --> 00:06:04.200
So when we acquired this file to do that.

84
00:06:04.380 --> 00:06:11.370
S what we're actually getting is just the to do model comp. with the end from here that's why we want

85
00:06:11.370 --> 00:06:14.290
to send out and to actually be using that here.

86
00:06:14.310 --> 00:06:24.350
So we'll add a module that exports to do equals require and see we need to use dot slash to do.

87
00:06:25.170 --> 00:06:26.380
So what's happening here.

88
00:06:26.470 --> 00:06:31.050
Okay let's overview our structure in a file like this.

89
00:06:31.050 --> 00:06:36.550
We're going to require the models directory which has two files by default when we require a directory

90
00:06:36.550 --> 00:06:38.270
that looks for indexed Yes.

91
00:06:38.340 --> 00:06:45.650
So it run this code and then we're also requiring the to do J S file and exploiting that out.

92
00:06:45.780 --> 00:06:53.330
So when we require the models directory we're getting require slashed to do which in turn has all this

93
00:06:53.340 --> 00:06:59.820
code where we create the schema compile the model and set that in modules to experts equal to that to

94
00:06:59.820 --> 00:07:00.590
do model.

95
00:07:01.140 --> 00:07:07.350
So all of this is to say we have it across two files in a directory but when we require the models directory

96
00:07:07.590 --> 00:07:11.890
we are getting our to do model and that we're getting the model out.

97
00:07:11.970 --> 00:07:13.730
So we're not actually doing anything with it.

98
00:07:13.770 --> 00:07:15.320
If I run the code right now

99
00:07:18.210 --> 00:07:24.030
node index SJS we won't know really if it's working or not because we're not requiring this code.

100
00:07:24.030 --> 00:07:24.780
We're not running it.

101
00:07:24.780 --> 00:07:29.760
We're not doing anything with to do in the next video we're going to define our first drought that actually

102
00:07:29.760 --> 00:07:31.830
uses the code in our to do model.
