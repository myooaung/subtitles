1
00:00:00,660 --> 00:00:05,550
In the previous function we were able to authenticate users and make sure that they had actually logged

2
00:00:05,550 --> 00:00:11,660
in with a valid token but we still want to make sure now that users can't modify other users information

3
00:00:11,700 --> 00:00:13,110
even if they've logged in.

4
00:00:13,140 --> 00:00:18,310
This is a process known as authorisation and it's going to follow pretty similar to what we did before.

5
00:00:18,310 --> 00:00:23,430
We are going to try once again to get the token will also make sure that we catch any potential errors

6
00:00:24,170 --> 00:00:32,460
and we are going to grab from the headers that are called authorization bill split by space and grab

7
00:00:32,460 --> 00:00:34,760
whatever is at index 1.

8
00:00:34,890 --> 00:00:39,180
We're then going to call the verify method just like we did before which excepts as its first parameter

9
00:00:39,210 --> 00:00:41,460
some kind of string some kind of Gees on what token.

10
00:00:41,730 --> 00:00:46,130
And then the secret key just to make sure that we can decode it correctly.

11
00:00:46,290 --> 00:00:50,880
The secret key is important for encoding and decoding it has to be the same for both of those.

12
00:00:51,030 --> 00:00:57,110
And then we're going to run a function to see if everything went well or if we get back in here what

13
00:00:57,120 --> 00:01:03,920
we're going to say here is instead of just if it decoded we want to make sure that if there is a token

14
00:01:04,530 --> 00:01:13,560
and inside of the token the ID in the payload is the same as whatever is coming in the you are then

15
00:01:13,560 --> 00:01:15,060
we let to go.

16
00:01:15,060 --> 00:01:16,870
Then we'll allow the user to move on.

17
00:01:17,070 --> 00:01:21,510
So what does this mean inside of R U R L is probably going to look something like what we saw before.

18
00:01:21,510 --> 00:01:26,300
Slashy API users slash some ID slash messages.

19
00:01:26,880 --> 00:01:32,370
And what we want to think about here is what happens if user ID number two tries to make a message for

20
00:01:32,370 --> 00:01:37,630
user ID number four while they still might be logged in user to be logged in.

21
00:01:37,740 --> 00:01:43,890
But the ID and their payload is going to be to read up harams is going to be for this is going to prevent

22
00:01:43,950 --> 00:01:46,950
users from tampering with other users information.

23
00:01:46,980 --> 00:01:52,000
And this is the idea of authorization it's essential when building more secure applications.

24
00:01:52,920 --> 00:01:55,320
So what happens if you don't have the right ID.

25
00:01:55,330 --> 00:01:57,610
Well we can still return next.

26
00:01:57,630 --> 00:02:01,980
But this time we're going to pass something to it a status once again of 401 unauthorized.

27
00:02:02,070 --> 00:02:06,180
But this time the message will simply just say unauthorized.

28
00:02:07,710 --> 00:02:12,840
And if that happens as well inside of here if we try to decode the token and it fails let's do that

29
00:02:12,840 --> 00:02:14,430
same exact thing.

30
00:02:14,460 --> 00:02:17,030
So where are we actually going to use this middleware.

31
00:02:17,050 --> 00:02:18,640
Well we're going to go back to our index that.

32
00:02:18,690 --> 00:02:19,110
Yes.

33
00:02:19,110 --> 00:02:22,150
And we're going to import it and inside of our X-ray eyes.

34
00:02:22,170 --> 00:02:25,680
We're simply going to grab a log in required

35
00:02:29,030 --> 00:02:32,330
and ensure correct user

36
00:02:35,110 --> 00:02:40,910
and those will both come from requiring that flash middleware flash off.

37
00:02:41,990 --> 00:02:45,890
And where are we going to use this log in required and ensure correct user.

38
00:02:46,190 --> 00:02:53,310
Well before you get to messages routes Let's first make sure that you're logged in.

39
00:02:53,780 --> 00:03:00,660
Let's then make sure that there is actually the correct user.

40
00:03:00,760 --> 00:03:01,890
So what's the idea here.

41
00:03:01,900 --> 00:03:04,900
We're going to make sure that you're logged in before you start creating a message.

42
00:03:04,990 --> 00:03:07,460
We're going to make sure that you are the correct user.

43
00:03:07,570 --> 00:03:11,680
And then we'll let you start actually creating messages.

44
00:03:11,680 --> 00:03:15,360
So let's test this out in the terminal and see if it does what we want it to do.

45
00:03:15,400 --> 00:03:21,220
We saw previously that someone could just simply write a message for someone else.

46
00:03:21,730 --> 00:03:26,450
So we're going to try to do is change to does this work.

47
00:03:26,620 --> 00:03:31,710
And let's see if we can successfully post as someone else and we see right away please log in first.

48
00:03:31,820 --> 00:03:33,820
Well how can we get that please logon first.

49
00:03:33,820 --> 00:03:36,440
That's coming from our in required middleware.

50
00:03:36,640 --> 00:03:39,890
We're not just going to let you start creating a message until you've logged in.

51
00:03:40,420 --> 00:03:47,330
So what I'm going to try to do now is make a new user and I'm going to make a post to a local host E

52
00:03:47,360 --> 00:03:57,310
one slash API slash off or sign up with a user name of hacker a password of hacker and an email of hacker

53
00:03:57,360 --> 00:04:02,310
and haggard Artyom and this should create a valid software token.

54
00:04:02,350 --> 00:04:08,860
But what I'm going to try to do now is try to write a message as L.E. using the hackers token hacker

55
00:04:08,860 --> 00:04:12,820
doesn't have my token they only have theirs but we're going to try to take this token and see if we

56
00:04:12,820 --> 00:04:23,130
can kind of forge a request as we go to host 1881 slash API flash users slash my user ID slash messages.

57
00:04:23,170 --> 00:04:31,360
This is the post that should create a message will pass in an authorization Hetter there and then the

58
00:04:31,360 --> 00:04:31,720
hackers

59
00:04:35,140 --> 00:04:39,010
will then pass on the text of that.

60
00:04:39,110 --> 00:04:41,290
See what happens when I do this.

61
00:04:41,290 --> 00:04:42,910
It tells me an authorized.

62
00:04:43,030 --> 00:04:44,300
Why is this happening.

63
00:04:44,320 --> 00:04:51,430
This part of the token is getting decoded it's getting decoded by the server using the same secret key

64
00:04:51,430 --> 00:04:59,320
that it used to encrypt it and inside of my middle where it simply telling me that the ID of the user

65
00:04:59,770 --> 00:05:07,420
with that token is not the same as the ID in the Perrins and that is the idea of authorization stopping

66
00:05:07,420 --> 00:05:13,150
someone with a certain ID from accessing someone else's information with a different ID.

67
00:05:13,150 --> 00:05:17,440
So even if we made sure you were logged in and you use a totally valid token we still need a little

68
00:05:17,440 --> 00:05:22,060
bit more authorization to make sure you're not allowed to write other messages for people.

69
00:05:22,210 --> 00:05:27,280
It's a really tricky concept so I encourage you to practice H.E. pire postman see what these tokens

70
00:05:27,280 --> 00:05:28,050
look like.

71
00:05:28,060 --> 00:05:30,600
You can also if you'd like go to JWT.

72
00:05:30,650 --> 00:05:34,930
I go and take this token and decode it with the secret key that you've made to see how it's all working

73
00:05:34,990 --> 00:05:35,640
under the hood.
