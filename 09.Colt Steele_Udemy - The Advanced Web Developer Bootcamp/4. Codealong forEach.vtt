WEBVTT
1
00:00:01.710 --> 00:00:07.620
OK in the last section we discuss callbacks and now we'll look at an application of callbacks for each

2
00:00:07.620 --> 00:00:08.910
function.

3
00:00:09.720 --> 00:00:12.090
So our objective for this one are pretty simple.

4
00:00:12.090 --> 00:00:17.160
First we're going to describe and use the for each function and then we're going to implement that for

5
00:00:17.160 --> 00:00:20.400
each function.

6
00:00:20.400 --> 00:00:23.200
Let's start out with an example of something that's not using for each.

7
00:00:23.220 --> 00:00:29.620
And then we'll see how we can refactor that code into something that we'll use for each In this example.

8
00:00:29.620 --> 00:00:31.450
We've got a function called double.

9
00:00:31.630 --> 00:00:36.310
It takes an array as input and it multiplies it by two.

10
00:00:36.310 --> 00:00:42.520
So in this case we'll get to four six eight ten and twelve princes of the con.

11
00:00:45.400 --> 00:00:49.280
OK let's take a look at this in the console.

12
00:00:49.410 --> 00:00:50.880
So first time I create my array

13
00:00:54.130 --> 00:01:00.440
I've already got loads here and then my double function is just going to loop through every element

14
00:01:00.440 --> 00:01:04.110
of that array and multiply attempts to cancel log that result.

15
00:01:04.110 --> 00:01:12.140
So when I invoke this function and pass in the array I'll get two four six eight 10 12.

16
00:01:12.190 --> 00:01:13.990
So that's our double function.

17
00:01:13.990 --> 00:01:20.430
Next up we're going to see how we can refactor this to use for each as you can see the code that uses

18
00:01:20.430 --> 00:01:25.990
for each is similar to the last example except that we no longer have to implement the loop ourselves.

19
00:01:26.190 --> 00:01:33.450
Instead for each will implement a loop for us and the way it works is for every element in that array

20
00:01:34.080 --> 00:01:41.370
that callback that were provided providing will be invoked and the number that is passed here is first

21
00:01:41.460 --> 00:01:46.960
the first element number one and then the second element number two the third element 3.

22
00:01:47.190 --> 00:01:51.490
The fourth element for the Fifth Element 5 and finally is 6 6.

23
00:01:51.600 --> 00:01:54.470
So this callback function will be invoked.

24
00:01:54.630 --> 00:01:59.840
One two three four five six times.

25
00:02:00.080 --> 00:02:01.960
Now the definition of for each.

26
00:02:02.000 --> 00:02:06.190
So for each is a function that takes an array as a parameter and a callback.

27
00:02:06.290 --> 00:02:11.760
And remember the callback is not something for each implements it's given to for each as a parameter.

28
00:02:11.780 --> 00:02:14.130
So for each doesn't care what the callback will do.

29
00:02:14.210 --> 00:02:16.740
It just invokes it for each element in the array.

30
00:02:18.110 --> 00:02:22.190
For each will invoke your callback with three parameters every time.

31
00:02:22.190 --> 00:02:27.890
So you always get the current element the current index and your entire array as a parameter.

32
00:02:27.890 --> 00:02:32.360
Now it's up to you when you implement your callback function whether or not you want to use all three

33
00:02:32.360 --> 00:02:34.600
parameters.

34
00:02:35.270 --> 00:02:42.650
Here's an example of for each With all the callback parameters the example iterates through the array

35
00:02:42.650 --> 00:02:50.240
of strings and builds a result string with spaces between each word and for the final word instead of

36
00:02:50.240 --> 00:02:53.180
adding a space we had three exclamation points.

37
00:02:53.420 --> 00:02:58.280
So for this example we need to know the current element that we're on we need to know the index that

38
00:02:58.280 --> 00:02:58.890
we're on.

39
00:02:58.970 --> 00:03:02.850
And we also need to know the length of the entire array.

40
00:03:02.870 --> 00:03:08.060
Let's walk through this code step by step and see what's going on here the for each function is going

41
00:03:08.060 --> 00:03:17.240
to invoke this callback on the first element in the array which in this case is my the string my index

42
00:03:17.240 --> 00:03:18.600
of that element is 0.

43
00:03:18.920 --> 00:03:27.080
And we're also going to get the entire array which is this entire string's array so in this case the

44
00:03:27.080 --> 00:03:32.380
element that we're on is not equal to a rate length minus one.

45
00:03:32.390 --> 00:03:35.050
In other words it's not the last element in the array.

46
00:03:35.330 --> 00:03:43.130
So we're going to append that string the string that we're currently on with an empty space to our results.

47
00:03:43.130 --> 00:03:46.560
Now our results by the end will be the entire string.

48
00:03:46.850 --> 00:03:50.860
So so far we've got MY with a space after it.

49
00:03:51.830 --> 00:03:54.740
OK moving on to the next iteration.

50
00:03:56.210 --> 00:04:00.270
Now we see that we're on the for each element in IRA.

51
00:04:00.380 --> 00:04:03.020
So we finished with my callback.

52
00:04:03.080 --> 00:04:07.680
Now moving on to the for each string is equal to for each.

53
00:04:07.710 --> 00:04:09.350
The indexes equal to 1.

54
00:04:09.440 --> 00:04:12.940
And again the array is equal to the whole string's array.

55
00:04:13.220 --> 00:04:14.410
The same thing happens here.

56
00:04:14.420 --> 00:04:16.650
The element that we're on is not the last element.

57
00:04:16.940 --> 00:04:23.330
So we're going to concatenate the string for each with a space at the end to the result that we already

58
00:04:23.330 --> 00:04:23.920
had.

59
00:04:24.200 --> 00:04:29.010
So 4 result is now my space for each space

60
00:04:32.340 --> 00:04:37.210
and finally we're on the the last element in the array example.

61
00:04:37.590 --> 00:04:42.040
So string is equal to example indexes equal to 2.

62
00:04:42.120 --> 00:04:44.690
And again the array is the same strings right.

63
00:04:45.300 --> 00:04:47.630
This time the if statement is false.

64
00:04:47.820 --> 00:04:51.100
So the index that we're on is equal to the last element in the array.

65
00:04:51.360 --> 00:04:57.740
We'll go down to this L section and rather than adding a blank space at the end of our string we had

66
00:04:57.750 --> 00:04:59.610
three exclamation marks.

67
00:04:59.610 --> 00:05:05.610
So by the time this for each loop is all done we're going to get a result that looks like my space for

68
00:05:05.610 --> 00:05:12.710
each space example exclamation exclamation exclamation.

69
00:05:12.730 --> 00:05:13.250
All right.

70
00:05:13.450 --> 00:05:22.150
So now it's time to implement for each Let's do that in the con..

71
00:05:22.200 --> 00:05:29.570
So the first thing we're going to want to do is define our for each function and remember it takes first

72
00:05:29.570 --> 00:05:36.400
an array and second call callback.

73
00:05:36.430 --> 00:05:42.470
Now what does for each do well on every element in the array and invokes that callback given the element

74
00:05:42.470 --> 00:05:44.520
the index and the entire array.

75
00:05:44.530 --> 00:05:49.480
So in order to make this work we're going to need to loop through every element in the array all use

76
00:05:49.480 --> 00:05:51.620
a for loop here.

77
00:05:51.740 --> 00:05:53.240
I'll start at zero.

78
00:05:53.410 --> 00:06:01.930
I use less than the array length and I will keep incrementing.

79
00:06:02.410 --> 00:06:03.790
And now all we have to do here

80
00:06:06.850 --> 00:06:10.460
is invoke our callback with the parameters.

81
00:06:10.660 --> 00:06:17.620
So I'm going to invoke the callback with the first element being the element that we're on right array

82
00:06:17.620 --> 00:06:18.780
of I.

83
00:06:18.980 --> 00:06:20.690
That's our element.

84
00:06:20.750 --> 00:06:25.330
The second parameter is going to be itself index that we're currently on.

85
00:06:25.640 --> 00:06:28.060
And the third parameter is the entire array.

86
00:06:31.590 --> 00:06:33.640
OK so that'll do it.

87
00:06:33.750 --> 00:06:35.710
That's our implementation for for each.

88
00:06:35.740 --> 00:06:39.630
We're looping through every element in the array we're invoking the callback.

89
00:06:39.630 --> 00:06:42.120
We don't care what the callback is or what it's doing.

90
00:06:42.300 --> 00:06:47.040
We just know that it should be a function and then we're going to pass the element that we're on the

91
00:06:47.070 --> 00:06:50.970
index that we're on and the array to that callback.

92
00:06:50.970 --> 00:06:55.390
And then this should work with all of our examples that we've seen so far.
