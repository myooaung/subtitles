WEBVTT
1
00:00:00.240 --> 00:00:00.780
All right.

2
00:00:00.780 --> 00:00:01.500
Welcome back.

3
00:00:01.650 --> 00:00:07.800
So up until this point over items are flex items in a flex container whether they're squares or rectangles

4
00:00:07.800 --> 00:00:10.150
or some other shape have been equally sized.

5
00:00:10.290 --> 00:00:15.390
They take up the same space and they grow together sometimes or they would shrink together depending

6
00:00:15.390 --> 00:00:21.990
on the constraints that's going to change now because we might want a lay out like this same three items.

7
00:00:22.230 --> 00:00:28.830
Let's say this is a lay out for the main column or the main row on a web page like a blog or a game

8
00:00:28.830 --> 00:00:35.430
review website where we have a main column that has some article content and then we have a left and

9
00:00:35.430 --> 00:00:35.930
right.

10
00:00:35.980 --> 00:00:37.060
Maybe this is a side bar.

11
00:00:37.080 --> 00:00:38.440
And this is an advertisement.

12
00:00:38.610 --> 00:00:41.870
We don't want them all to take up the same real estate the same proportion.

13
00:00:42.030 --> 00:00:47.910
What we could do is say OK this main content should get more of the space allocated to it and needs

14
00:00:47.910 --> 00:00:53.730
to get less and then we can also control how it behaves as we shrink the screen.

15
00:00:53.730 --> 00:00:57.560
Should the advertisement shrink at the same rate as the main content.

16
00:00:57.900 --> 00:01:03.600
I would assume most cases you want the ads to shrink a little bit faster than the article because the

17
00:01:03.600 --> 00:01:05.810
articles are the most important part of your page.

18
00:01:05.850 --> 00:01:10.770
Maybe you're terrible to your readers and you make the ads more important but the idea is that we have

19
00:01:10.770 --> 00:01:13.970
control using Fluxbox in particular.

20
00:01:13.990 --> 00:01:19.620
There's a property called fooks defines how a flex item will grow or shrink to fit the available space

21
00:01:19.620 --> 00:01:20.220
in a container.

22
00:01:20.220 --> 00:01:21.330
And that's the key part.

23
00:01:21.360 --> 00:01:27.060
The available space and it's actually a shorthand property for three other properties.

24
00:01:27.060 --> 00:01:27.960
We'll take a look at.

25
00:01:28.110 --> 00:01:35.010
So just like Transition is a shorthand for transition delay transition duration and so on Flex is shorthand

26
00:01:35.040 --> 00:01:39.630
for these three flex grow flex shrink and flex basis.

27
00:01:39.690 --> 00:01:44.340
So we're going to go through these and we'll actually start with the last one flex basis.

28
00:01:44.550 --> 00:01:46.610
It's on paper the easiest one.

29
00:01:46.920 --> 00:01:49.760
It's kind of a weird name and it throws a lot of people off.

30
00:01:49.860 --> 00:01:51.990
But essentially it's like with.

31
00:01:52.140 --> 00:01:58.430
But it's not with it's different but in a lot of ways it works the same way except when it doesn't.

32
00:01:58.740 --> 00:02:04.350
So what it does is really imagine we have a flex container and we're trying to fit five items in there.

33
00:02:05.550 --> 00:02:12.360
We can set flex bases to be the initial ideal with the hypothetical ideal which we want them to take

34
00:02:12.360 --> 00:02:19.110
up if they're in a row and that's before they're put in the container and then reality happens and maybe

35
00:02:19.110 --> 00:02:24.690
the container is too small or too large and then that's where we come to flex grow and flex shrink but

36
00:02:24.690 --> 00:02:30.860
Flex basis is our starting condition our initial ideal size for flex item.

37
00:02:30.900 --> 00:02:33.340
So let me just quickly demonstrate what I mean.

38
00:02:33.720 --> 00:02:42.270
So here we have zoom in a bit for boxes and each box right now has no flex basis assigned or with.

39
00:02:42.540 --> 00:02:43.400
OK.

40
00:02:44.010 --> 00:02:45.390
There's a bunch of empty space here.

41
00:02:45.510 --> 00:02:52.740
But what I can do is say OK the ideal size for each one before they go in should be about 200 pixels

42
00:02:53.100 --> 00:02:54.490
fact in type.

43
00:02:54.520 --> 00:02:55.120
There we go.

44
00:02:56.140 --> 00:02:57.760
You'll see OK that's fine.

45
00:02:57.860 --> 00:03:00.600
There's enough room for them to take up 200 pixels each.

46
00:03:00.770 --> 00:03:02.000
So that's what happens.

47
00:03:02.270 --> 00:03:05.250
Or I could change it to be you know 300 pixels.

48
00:03:05.390 --> 00:03:07.560
And there's still enough room so they all fit in there.

49
00:03:07.600 --> 00:03:15.440
Or each 300 pixels or I could give them each 200 pixels but then say that box three should have a flex

50
00:03:15.440 --> 00:03:21.050
basis of 100 pixels and that's the ideal size for it.

51
00:03:21.050 --> 00:03:22.490
And so that's what happens.

52
00:03:22.490 --> 00:03:23.840
So there's no problem so far.

53
00:03:23.840 --> 00:03:25.420
This is just like with.

54
00:03:25.580 --> 00:03:28.600
But where is different in one sense.

55
00:03:28.700 --> 00:03:32.390
If I delete this if we're working with a column.

56
00:03:32.390 --> 00:03:39.290
So rather than Flex direction row I can set flex direction column and let's give it a height so that

57
00:03:39.290 --> 00:03:40.350
we're working with that.

58
00:03:40.340 --> 00:03:50.890
So let's do height let's do maybe 80 VH OK and let me Slim this down just to add two boxes so it's easier

59
00:03:50.890 --> 00:03:51.910
to see what's happening.

60
00:03:52.810 --> 00:04:02.070
And if we go back up here and change our font size down to 50 pixels OK I can assign a flex basis and

61
00:04:02.080 --> 00:04:10.860
let's do 150 pixels and save make this a bit bigger so you can see that each take up 150 pixels vertically

62
00:04:11.130 --> 00:04:15.060
which is actually beat would be controlled by height and remember not with.

63
00:04:15.390 --> 00:04:16.700
So that's one key distinction.

64
00:04:16.710 --> 00:04:22.470
Flex basis is like with when you're working with Rose but it's also like height when you're working

65
00:04:22.470 --> 00:04:23.790
with columns.

66
00:04:24.390 --> 00:04:28.510
But you can also have a height defined just to show you.

67
00:04:28.650 --> 00:04:36.270
So if I had height defined as 100 pixels and flex basis as 150 flex basis wins because remember this

68
00:04:36.270 --> 00:04:37.460
is the ideal.

69
00:04:37.470 --> 00:04:43.080
In our case height because it's a column the ideal height that we want but if we didn't have that it

70
00:04:43.080 --> 00:04:44.910
would fall back on the height.

71
00:04:44.910 --> 00:04:46.910
So Flex basis wins out.

72
00:04:47.520 --> 00:04:48.570
It's the ideal height.

73
00:04:48.570 --> 00:04:55.050
In this case but change it back to row.

74
00:04:55.190 --> 00:05:00.320
And now what we have a bunch of extra space but now it's using flex bases to control the width

75
00:05:03.560 --> 00:05:04.420
you get the picture.

76
00:05:04.580 --> 00:05:10.400
Now point out there was a great article called The Difference Between with flex basis that I found online

77
00:05:10.720 --> 00:05:11.610
by Ged.

78
00:05:11.630 --> 00:05:17.450
Jet Ski guides he sorry from butchering that and then goes into a bunch of detail about how it's different

79
00:05:17.720 --> 00:05:18.810
and how they're similar.

80
00:05:18.910 --> 00:05:23.570
And there's a couple of things I'm not going to talk about right now but Flex basis is limited by Max

81
00:05:23.570 --> 00:05:28.880
with so you can set a min and max with and you can have that work with flex basis.

82
00:05:29.030 --> 00:05:32.490
But then the key thing is what happens when there's not enough space.

83
00:05:32.600 --> 00:05:35.440
So let's see right now and this should be review.

84
00:05:35.690 --> 00:05:40.670
If I gave flex basis something insane like a thousand pixels.

85
00:05:40.760 --> 00:05:42.920
These are not a thousand pixels each.

86
00:05:42.920 --> 00:05:43.860
What happens.

87
00:05:44.060 --> 00:05:46.410
Well they shrink down to fit in there.

88
00:05:46.580 --> 00:05:52.250
So we'll come back to how that works and how it decides how to shrink them and then the property flex

89
00:05:52.250 --> 00:05:55.380
shrink is what's going to dictate that and what proportion they shrink.

90
00:05:55.610 --> 00:05:58.480
But before we get there we're actually going to talk about flex growth.

91
00:05:58.610 --> 00:05:59.410
So that's next step.
