1
00:00:00,300 --> 00:00:06,540
Welcome back in the next few videos we'll explore some helper functions that can be useful for specific

2
00:00:06,540 --> 00:00:07,760
types of graphs.

3
00:00:08,670 --> 00:00:16,650
First we'll talk about creating histograms D3 a histogram is a special type of bar chart in which values

4
00:00:16,650 --> 00:00:19,060
in a dataset are placed into bins.

5
00:00:19,320 --> 00:00:24,780
The height of a rectangle in histogram represents the number of data points in that bin.

6
00:00:27,250 --> 00:00:33,430
In this video we'll build the histogram to visualize birthdate and by region for a specific year.

7
00:00:33,570 --> 00:00:36,020
Here's a link to some starter code.

8
00:00:37,400 --> 00:00:42,260
Here I've got some data from a different UN data set on birth's by country and year.

9
00:00:42,260 --> 00:00:43,970
The data set isn't complete.

10
00:00:43,970 --> 00:00:50,390
Only four regions have data reported from 1967 for example but it's still instructive to try to visualize

11
00:00:50,390 --> 00:00:56,840
this data in order to bucket our data into the bins we need for a histogram.

12
00:00:56,860 --> 00:00:58,600
I could go through this data.

13
00:00:58,600 --> 00:01:04,300
Create arrays of arrays based on year and based on the birth ranges I am curious about and then plot

14
00:01:04,300 --> 00:01:05,800
that data.

15
00:01:05,810 --> 00:01:11,630
Fortunately I don't have to do all of that work on my own D-3 comes with some built in methods to help

16
00:01:11,630 --> 00:01:18,430
take some work off of my plate this process will look very similar to the way we built a bar chart but

17
00:01:18,440 --> 00:01:24,920
with one key difference we'll be using the dot histogram to automatically buchen our values into groups

18
00:01:24,920 --> 00:01:28,210
for us to get started.

19
00:01:28,210 --> 00:01:31,580
Let's set up our with height and bar padding.

20
00:01:31,630 --> 00:01:37,090
We also need to determine the width of the rectangles in our histogram and create a y scale so that

21
00:01:37,090 --> 00:01:40,610
we can be sure that the bins all fit in our SVGA.

22
00:01:40,840 --> 00:01:46,030
But in order to do this we need to know how many bins will have and how many pieces of data will be

23
00:01:46,060 --> 00:01:48,290
each bin.

24
00:01:48,640 --> 00:01:51,810
Here's where D-3 got histogram can help us out.

25
00:01:52,030 --> 00:01:59,330
D-3 got histogram is a function that returns a function to us if we pass our dataset into the function

26
00:01:59,330 --> 00:02:03,490
that is returned D-3 will create bins from our values.

27
00:02:04,970 --> 00:02:07,980
If we pass the histogram generator an array of numbers.

28
00:02:08,030 --> 00:02:14,750
This process is automatic but more commonly our data will be an array of objects and in this case we'll

29
00:02:14,750 --> 00:02:20,680
need to specify for D-3 how it should be polling data from each object in our array.

30
00:02:20,690 --> 00:02:28,540
For this we can use the value method on D-3 histogram which accepts a callback that specifies how D-3

31
00:02:28,640 --> 00:02:31,660
should obtain a value from each object.

32
00:02:31,730 --> 00:02:37,340
In our case I'll start by generating histogram for just the first year in our dataset to do this.

33
00:02:37,340 --> 00:02:43,880
I'll use D-3 dot main to graph the first year then filter out any data that doesn't come from this first

34
00:02:43,880 --> 00:02:48,850
year and store the filtered array in a variable called year data.

35
00:02:48,850 --> 00:02:51,850
Now let's use the histogram generator.

36
00:02:51,880 --> 00:02:58,030
I'll create a variable called histogram and set it equal to the return value of the 3 histogram.

37
00:02:58,030 --> 00:03:06,420
Also to Unical to the values so that I can specify that I want a histogram of birth counts Finally I'll

38
00:03:06,530 --> 00:03:14,520
pass my data into this histogram generator and store the result in a variable called bin's.

39
00:03:14,540 --> 00:03:20,860
Let's dig into this output of it as you can see Benz's an array with two elements.

40
00:03:21,290 --> 00:03:23,780
Each of these elements is again an array.

41
00:03:23,810 --> 00:03:29,730
This time the arrays have birth data these arrays also have two additional properties.

42
00:03:29,860 --> 00:03:31,860
X zero and x1.

43
00:03:32,280 --> 00:03:37,200
For instance the first array inside of bins consists of three data points.

44
00:03:37,320 --> 00:03:40,870
Each one has a birth total between 161.

45
00:03:40,950 --> 00:03:49,510
The value of x 0 and 100000 the value of x 1 with the data placed into bins.

46
00:03:49,540 --> 00:03:54,650
We now know how many rectangles we need to draw and what are y scale should be.

47
00:03:54,750 --> 00:03:57,060
So let's calculate the width.

48
00:03:57,090 --> 00:04:03,540
We can also generate a y scale for the birth counts using scale linear per domain will go from zero

49
00:04:03,540 --> 00:04:11,460
to the length of the largest been and the range will go from the SPG height to zero next.

50
00:04:11,500 --> 00:04:17,710
Let's select the SPG set the width and height and then join our data to elements with a class of bar

51
00:04:19,170 --> 00:04:20,190
for each enter node.

52
00:04:20,220 --> 00:04:26,480
We'll now append to group L I'm doing this because I want two elements in the SPG for each data point

53
00:04:26,900 --> 00:04:33,360
a rectangle and a text element with the description of the data inside of each group.

54
00:04:33,360 --> 00:04:36,170
Let's now append our histogram rectangles.

55
00:04:36,270 --> 00:04:40,590
This pattern should look very similar to what we did when we first learned about our charts.

56
00:04:40,860 --> 00:04:47,390
Set the attribute so that each rectangle was offset by the bar with plus the bar padding for the Y attribute.

57
00:04:47,400 --> 00:04:54,530
We'll use our scale Similarly the height will just be equal to the SVGA height minus the scaled value.

58
00:04:54,570 --> 00:04:57,710
Finally the width will just equal the bar with.

59
00:04:58,170 --> 00:05:05,440
While I'm at it I'll also adjust the fill as I mentioned earlier there isn't a ton of data from 1967

60
00:05:06,320 --> 00:05:11,760
but already we can see that most regions that reported data had a relatively small number of births.

61
00:05:12,840 --> 00:05:17,520
Before we move on it's worth pointing out that you'll very often see histograms created with the help

62
00:05:17,520 --> 00:05:23,880
of scales as well as y scales whether you want to use an X scale is totally up to you but it's fairly

63
00:05:23,880 --> 00:05:28,480
common and allows us to do a bit less arithmetic involving our rectangles.

64
00:05:28,500 --> 00:05:32,110
It also allows us to fix a small issue with our current approach.

65
00:05:32,340 --> 00:05:37,410
Right now both of our bodies have the same width even though the second one spans a larger range of

66
00:05:37,410 --> 00:05:39,220
values than the first.

67
00:05:39,510 --> 00:05:45,740
So before adding text labels Let's quickly refactor what we have to use a scale.

68
00:05:45,920 --> 00:05:49,750
I'll create the scale before defining the histogram function.

69
00:05:49,940 --> 00:05:53,640
I'll have the scale go from zero to the largest value in the dataset.

70
00:05:53,900 --> 00:06:01,300
And as we've seen before we'll have the range go from zero to the SPG with once we have this scale we

71
00:06:01,300 --> 00:06:04,120
can avoid calculating the bar with directly.

72
00:06:04,150 --> 00:06:11,770
Instead we can use the zero and x 1 properties of each bin to calculate the appropriate width specifically.

73
00:06:11,770 --> 00:06:17,660
We can pass x 0 into the scale to figure out where the x coordinate of each bar should be.

74
00:06:17,680 --> 00:06:22,960
As for the what it should be equal to the difference between the scaled value of x 1 and the scaled

75
00:06:22,960 --> 00:06:25,720
value of x 0 minus the padding

76
00:06:29,300 --> 00:06:30,530
so far so good.

77
00:06:30,530 --> 00:06:35,310
However while the bar with are now more accurate they also look a little weird.

78
00:06:35,420 --> 00:06:40,640
It would be better if we could simply generate bins that have approximately the same range so that the

79
00:06:40,640 --> 00:06:45,030
rectangles would automatically have similar widths.

80
00:06:45,030 --> 00:06:51,720
There are a few things we can do to get our wits more consistent First we can specify the domain of

81
00:06:51,720 --> 00:06:54,780
our histogram by using the domain method.

82
00:06:54,780 --> 00:07:00,180
This method is called on the histogram generator and it allows you to specify the domain of values that

83
00:07:00,180 --> 00:07:03,720
you'd like the generator to use when it creates bins.

84
00:07:03,780 --> 00:07:08,980
If you don't specify a domain the generator will default to using the extent of the data set.

85
00:07:11,080 --> 00:07:14,540
Let's modify the domain so that it uses the domain of our scale.

86
00:07:15,380 --> 00:07:20,580
This will help ensure the first Baine is the correct size to avoid duplication.

87
00:07:20,650 --> 00:07:23,040
We'll just call domain on our scale.

88
00:07:23,080 --> 00:07:26,690
This will get the domain we used when we originally created the scale.

89
00:07:27,510 --> 00:07:33,300
We can override the default thresholds or ranges of each band using the threshold method on the histogram

90
00:07:33,300 --> 00:07:34,010
generator.

91
00:07:35,000 --> 00:07:38,040
We'll talk more about this method in the next video.

92
00:07:38,330 --> 00:07:43,150
For now all you need to know is that you'll often see the tick marks of the scale used to overwrite

93
00:07:43,160 --> 00:07:44,900
the default thresholds.

94
00:07:44,960 --> 00:07:51,260
We can get these ticks by calling X scale ticks which just returns an array of evenly spaced intermediate

95
00:07:51,260 --> 00:07:52,820
values to us.

96
00:07:52,940 --> 00:07:57,050
Don't worry we'll talk about this text method more in the next video too.

97
00:07:58,900 --> 00:08:04,000
Lastly you'll often see range round used on the X scale instead of range.

98
00:08:04,000 --> 00:08:07,660
This method is very similar to the range method we've seen before.

99
00:08:07,690 --> 00:08:14,030
The only difference is it makes sure that the wits are all round into the nearest whole number with

100
00:08:14,030 --> 00:08:14,960
these changes.

101
00:08:14,960 --> 00:08:17,900
You can see there are more rectangles the floor.

102
00:08:17,990 --> 00:08:21,910
We'll talk more about controlling the number of rectangles with the thresholds method.

103
00:08:21,980 --> 00:08:29,100
In the next video for now let's finish things up by adding a text label to each group in our labels.

104
00:08:29,100 --> 00:08:31,210
Let's include the endpoints of the bin.

105
00:08:31,620 --> 00:08:36,240
Let's also include a count of the number of regions inside of the bin.

106
00:08:36,290 --> 00:08:41,790
This will wind up being a lot of text so I'll rotate the text 90 degrees and align it so that it'll

107
00:08:41,810 --> 00:08:45,950
show up in the middle of each bar and at the bottom of the SVGA.

108
00:08:46,090 --> 00:08:50,070
In practice getting the positioning right will probably take some guess and check.

109
00:08:50,080 --> 00:08:53,540
So don't worry if you don't get this exactly right on the first try.

110
00:08:55,740 --> 00:08:56,280
Cool.

111
00:08:56,340 --> 00:08:58,450
That looks pretty good for now.

112
00:08:58,470 --> 00:09:01,860
This seems like a good place to pause in the next video.

113
00:09:01,860 --> 00:09:05,760
We'll talk more about the threshold I said and finish up this histogram.

114
00:09:05,790 --> 00:09:06,710
I'll see you there.
