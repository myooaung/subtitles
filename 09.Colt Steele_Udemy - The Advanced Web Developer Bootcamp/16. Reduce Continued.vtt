WEBVTT
1
00:00:00.450 --> 00:00:01.270
Welcome back.

2
00:00:01.290 --> 00:00:05.790
In this video we're going to take a look at how we can use Reduce to return different data types like

3
00:00:05.790 --> 00:00:07.610
strings and objects.

4
00:00:07.620 --> 00:00:11.790
Here we have an array called names and have assigned it to be an array of strings with the values.

5
00:00:11.790 --> 00:00:14.270
Tim Matt Holt and Ellie.

6
00:00:14.370 --> 00:00:20.460
Our goal is to take this array and return a single string which outputs the instructors are Tim Matt

7
00:00:20.640 --> 00:00:24.800
called Ellie will reduce this array and pass in a callback function.

8
00:00:25.140 --> 00:00:28.490
Let's not worry too much about what we return inside of the callback function.

9
00:00:28.650 --> 00:00:31.720
Let's just take a look at the second parameter which is the string.

10
00:00:31.740 --> 00:00:33.290
The instructors are.

11
00:00:33.540 --> 00:00:39.400
This is going to be the value of the accumulator in the first iteration as we iterate through the array.

12
00:00:39.420 --> 00:00:41.160
We want to keep building up the string.

13
00:00:41.340 --> 00:00:47.670
So we're going to return the accumulator plus equals an empty space and the next value if you're not

14
00:00:47.670 --> 00:00:52.980
sure what we're doing here that's OK let's break it down step by step in the first iteration the value

15
00:00:52.980 --> 00:00:57.510
of accumulator is the instructors are and the value of next value is the string.

16
00:00:57.510 --> 00:01:03.120
TIM So when we concatenate or add these strings together with the space the return value will be the

17
00:01:03.120 --> 00:01:05.080
instructors are Tim.

18
00:01:05.130 --> 00:01:05.890
We now return.

19
00:01:05.910 --> 00:01:11.130
The instructors are Tim which means the value of the accumulator in the next iteration will be the instructors

20
00:01:11.130 --> 00:01:16.230
are Tim and next value will be met when we add those two strings together we return.

21
00:01:16.230 --> 00:01:21.680
The instructors are Tim Matt and that will be the value of the accumulator in the next iteration and

22
00:01:21.690 --> 00:01:24.600
next value will be called will then return.

23
00:01:24.600 --> 00:01:29.910
The instructors are Tim Matt colt and that will be the value of the accumulator in the final iteration

24
00:01:30.570 --> 00:01:35.940
will then return the accumulator Plus the string L.E. for a final return value of the instructors or

25
00:01:35.940 --> 00:01:36.540
Tim.

26
00:01:36.540 --> 00:01:42.030
Matt cold Ellie This may seem strange at first but the more you practice with it the easier it will

27
00:01:42.030 --> 00:01:42.500
get.

28
00:01:43.240 --> 00:01:44.410
Let's look at one more example.

29
00:01:44.440 --> 00:01:50.050
Before we practice with some exercises Let's create an array of numbers called Our with the values 5

30
00:01:50.080 --> 00:01:56.980
4 1 4 and 5 imagine that we want to build an object with the key as each number and the value as the

31
00:01:56.980 --> 00:01:59.400
count of each number in the array.

32
00:01:59.410 --> 00:02:04.090
This is an efficient way to see if there are any duplicates or to count how many occurrences of a value

33
00:02:04.090 --> 00:02:09.550
exist in an array what we would need to do here is reduce our array into an object.

34
00:02:09.640 --> 00:02:15.320
So let's reduce our array and pass in as a second parameter an empty object in our function.

35
00:02:15.340 --> 00:02:20.420
We'll need to see if the value we're at already exists as a key in the object.

36
00:02:20.530 --> 00:02:25.410
One of the ways to check if the key exists in an object is to use an if in condition.

37
00:02:25.420 --> 00:02:31.810
So we'll see if next value is in accumulator and if it is we will increase the value at that key by

38
00:02:31.810 --> 00:02:32.980
1.

39
00:02:32.980 --> 00:02:38.410
Notice we're using bracket notation because we want javascript to evaluate next value for us and not

40
00:02:38.410 --> 00:02:40.600
hard code a key of next round.

41
00:02:40.930 --> 00:02:46.420
If that does not exist then the object left at the keys of the object with the value of whatever next

42
00:02:46.420 --> 00:02:49.750
value is and assign it to the number 1.

43
00:02:49.780 --> 00:02:55.320
Finally the most important step is to make sure we keep returning that object that we build up let's

44
00:02:55.390 --> 00:03:00.040
see what this looks like when we step through it in the first iteration the value of accumulator will

45
00:03:00.040 --> 00:03:03.290
be an empty object and next value will be the number five.

46
00:03:03.520 --> 00:03:09.100
Since our object does not have a key of five we will add a key of 5 and a value of 1 will then return

47
00:03:09.130 --> 00:03:15.460
that object in the second iteration accumulator is the object returned to us with a key of 5 and a value

48
00:03:15.460 --> 00:03:18.320
of 1 and next value is the number four.

49
00:03:18.460 --> 00:03:24.580
Just like before our object does not have a key or for select Add a new key a for and a value of 1 and

50
00:03:24.580 --> 00:03:27.400
return that object in the next iteration.

51
00:03:27.430 --> 00:03:28.780
Next value was 1.

52
00:03:28.870 --> 00:03:33.360
And since we don't have that key either we add a new key of one with the value of 1.

53
00:03:33.400 --> 00:03:38.310
We now return an object with the keys of 5 4 and 1 in the next iteration.

54
00:03:38.320 --> 00:03:39.660
Next value is four.

55
00:03:39.900 --> 00:03:42.080
But our object already has a key of four.

56
00:03:42.130 --> 00:03:48.340
So what increment that value by one and return an object with a key of five and value of one here for

57
00:03:48.400 --> 00:03:51.830
and value of two and of one value of one.

58
00:03:51.850 --> 00:03:55.480
We're building up a counter for each number in the final iteration.

59
00:03:55.510 --> 00:03:56.910
Next value is five.

60
00:03:56.950 --> 00:04:01.900
And since we already have a key of five we'll increment the value by one and return an object with a

61
00:04:01.900 --> 00:04:03.900
key of five and a value of two.

62
00:04:04.050 --> 00:04:10.050
A key a four and a value of two and a key of one and a value of 1 since there is no next you.

63
00:04:10.060 --> 00:04:13.200
This object is returned from reduce and we're all done.

64
00:04:13.490 --> 00:04:17.590
As you can see the more you can step through each Kabaka produce the easier it will be to understand

65
00:04:17.590 --> 00:04:18.650
what's going on.

66
00:04:18.670 --> 00:04:23.650
Krome developer tools are wonderful for this as is just trying to diagram or write down what's happening

67
00:04:23.680 --> 00:04:25.000
in each function.

68
00:04:25.300 --> 00:04:29.140
Before we practice with traduce Let's see how we can use it in our own functions.

69
00:04:29.140 --> 00:04:33.640
Here we have a function called some odd numbers which is going to accept an array of numbers and return

70
00:04:33.640 --> 00:04:34.860
the sum of the audience.

71
00:04:35.120 --> 00:04:39.970
Our accumulator starts at zero and is either going to be itself plus the next value if the next value

72
00:04:39.970 --> 00:04:41.710
is odd or just itself.

73
00:04:41.800 --> 00:04:47.110
If that statement is not true when we invoke it on our array we see a total of nine.

74
00:04:47.130 --> 00:04:50.780
Let's see another function called create for name which accepts an array.

75
00:04:50.790 --> 00:04:56.130
Here we are reducing this array into another array and adding to it the value of the first property

76
00:04:56.160 --> 00:04:59.230
and the last property on each value in the array.

77
00:04:59.430 --> 00:05:04.320
We're assuming here that we're passing in an array of objects that have a first and last property when

78
00:05:04.320 --> 00:05:06.330
we invoke this with our array of objects.

79
00:05:06.420 --> 00:05:09.310
We'll get back an array of strings returned to us.

80
00:05:09.330 --> 00:05:12.620
Now you've seen some examples with reduce and it's time for you to practice.

81
00:05:12.810 --> 00:05:14.330
Good luck and I'll see you in the next video.
