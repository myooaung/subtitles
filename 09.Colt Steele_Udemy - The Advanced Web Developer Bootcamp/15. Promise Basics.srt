1
00:00:04,720 --> 00:00:06,980
Next up we'll talk about promises.

2
00:00:07,210 --> 00:00:12,850
Now We'll also visit this topic later in the course but it's important to see it here before we talk

3
00:00:12,850 --> 00:00:16,180
about asynchronous code and Ajax in the next section.

4
00:00:16,540 --> 00:00:19,570
So let's get two objectives.

5
00:00:19,570 --> 00:00:27,430
First will define and promise then we'll add a dot then call back to a promise then a dot catch call

6
00:00:27,430 --> 00:00:30,270
back to a promise.

7
00:00:30,710 --> 00:00:37,860
Lastly will wrap a set time out with a promise to create an asynchronous example.

8
00:00:38,020 --> 00:00:39,610
So what is a promise.

9
00:00:39,790 --> 00:00:44,590
A promise is an object that represents a task that will be completed in the future.

10
00:00:44,590 --> 00:00:51,190
So you're getting back an object that isn't the solution to your problem but it will be the solution

11
00:00:51,220 --> 00:00:52,570
in the future.

12
00:00:52,570 --> 00:00:57,620
An analogy here is if you go into a government office and you take a number to get helped.

13
00:00:57,640 --> 00:01:03,040
That is like your promise that piece of paper represents a promise to be helped and once you actually

14
00:01:03,040 --> 00:01:07,020
go to the counter and get help hopefully pretty quickly.

15
00:01:07,180 --> 00:01:09,480
That's like your callback being invoked.

16
00:01:09,520 --> 00:01:14,800
So getting the ticket is your promise and getting help or getting the resolution to your problem later

17
00:01:14,800 --> 00:01:17,620
on is the callback later getting invoked.

18
00:01:20,060 --> 00:01:22,440
Here's an example of creating a promise.

19
00:01:22,490 --> 00:01:24,850
First we are using the promise constructor.

20
00:01:24,860 --> 00:01:32,180
The constructor takes a single callback function that function has two parameters either a resolve function

21
00:01:32,240 --> 00:01:33,830
or a reject function.

22
00:01:34,310 --> 00:01:41,330
So our asynchronous task will decide whether or not to call or invoke resolve or reject depending on

23
00:01:41,330 --> 00:01:43,330
how the asynchronous task goes.

24
00:01:43,340 --> 00:01:49,520
So if the asynchronous task completed successfully resolve will be invoked but if it didn't complete

25
00:01:49,520 --> 00:01:53,360
successfully if there was some error reject will be invoked.

26
00:01:53,360 --> 00:01:57,340
Now once we've created this problem is we have the object as one.

27
00:01:57,470 --> 00:02:02,380
The next thing we want to do is define a callback in the then function.

28
00:02:02,750 --> 00:02:10,070
So with this one dot then we're defining a callback that will be invoked when resolve is invoked inside

29
00:02:10,070 --> 00:02:11,990
of the promise.

30
00:02:12,020 --> 00:02:18,670
So one two three four here gets passed into this callback that gets invoked and then you can see here

31
00:02:18,690 --> 00:02:24,370
will cancel log promised P1 resolve with data 1 2 3 4.

32
00:02:24,380 --> 00:02:26,710
Let's take a look at that in the console as well.

33
00:02:30,430 --> 00:02:37,330
So I got my promise P1 and then I'm going to specify that then callback which will invoke this callback

34
00:02:37,330 --> 00:02:40,510
function whenever resolve is invoked.

35
00:02:42,810 --> 00:02:46,560
And as you can see P1 has been resolved with the data.

36
00:02:46,560 --> 00:02:48,160
One two three four.

37
00:02:48,210 --> 00:02:52,800
So this console that log came from within our callback function inside of then

38
00:02:56,680 --> 00:03:00,310
our previous example only handled the successful promise.

39
00:03:00,310 --> 00:03:06,530
So it only handled the case where resolve was invoked but reject can also be invoked from the promise.

40
00:03:06,700 --> 00:03:12,010
So in this example we've got our same promis setup we're creating a new promis with the constructor

41
00:03:12,430 --> 00:03:16,410
and we have either resolved function that we can invoke or the regex function.

42
00:03:16,510 --> 00:03:21,310
And here we're invoking rejects when reject is invoked from within the promise.

43
00:03:21,460 --> 00:03:24,370
None of the data then callbacks will be invoked.

44
00:03:24,370 --> 00:03:31,570
So instead we'll go directly to this catch section catch is the callback that will be invoked whenever

45
00:03:31,570 --> 00:03:38,820
reject is invoked from within the promise so in this example we'll only see promise one was rejected

46
00:03:38,820 --> 00:03:41,180
with data air in the con..

47
00:03:41,420 --> 00:03:42,850
And where did that air come from.

48
00:03:42,870 --> 00:03:49,680
Well just like before when we invoke rejects the string the replacing here air will be passed into this

49
00:03:49,710 --> 00:03:51,370
callback in the catch.

50
00:03:51,570 --> 00:03:57,030
So our data here is going to be equal to the string air that was passed from object and then it will

51
00:03:57,030 --> 00:04:02,550
be Konsole logged here in our consul.

52
00:04:02,770 --> 00:04:06,840
In this example we're combining both the resolve and the reject.

53
00:04:06,940 --> 00:04:14,440
So here we have a 50/50 chance of either invoking resolve or invoking reject depending on what our random

54
00:04:14,440 --> 00:04:15,990
number returns.

55
00:04:16,000 --> 00:04:21,370
So if resolve is invoked we'll pass that number that was randomly generated and we should see in the

56
00:04:21,370 --> 00:04:28,990
con. success and whenever that number was if we get a number that's greater than 0.5 and reject is invoked

57
00:04:29,500 --> 00:04:34,810
then we'll see console log air and we'll see whatever value we've got there.

58
00:04:34,810 --> 00:04:36,400
So let's see this running in the consul

59
00:04:40,310 --> 00:04:44,590
so because we're using a random number here we don't know if we'll get a success or an error.

60
00:04:44,630 --> 00:04:47,030
Let's take a look.

61
00:04:47,030 --> 00:04:53,700
All right we've got success which means our random number was point to five and resolve was in boats.

62
00:04:53,840 --> 00:04:54,790
Let's try again.

63
00:04:56,080 --> 00:04:57,040
Success again.

64
00:04:57,040 --> 00:04:58,470
Let's try to get on air.

65
00:04:58,830 --> 00:04:59,470
There we go.

66
00:04:59,680 --> 00:05:05,770
So now we got a random number that was greater than 0.5 which then invoked rejects and we got our air

67
00:05:05,780 --> 00:05:09,280
Prince the consul air points 7 9 1 1 etc..

68
00:05:14,800 --> 00:05:18,190
Next we'll see an example that actually use asynchronous code.

69
00:05:18,280 --> 00:05:22,490
So all the examples we've seen so far don't really have an asynchronous component.

70
00:05:22,520 --> 00:05:25,360
Whether invoking resolve or reject right away.

71
00:05:25,360 --> 00:05:29,090
But here we've got a set time out inside of the promise.

72
00:05:29,200 --> 00:05:35,470
So this promise will be created the set time out will be invoked and then four seconds later four thousand

73
00:05:35,470 --> 00:05:38,230
milliseconds will invoke resolve.

74
00:05:38,470 --> 00:05:44,620
So now you can begin to see the beauty of the promise even though this code won't have finished running

75
00:05:44,620 --> 00:05:49,770
yet will have an object already that we can attach a callback on to.

76
00:05:49,800 --> 00:05:56,280
So this promise objects will immediately be returned even though the set time out is not done and resolve

77
00:05:56,280 --> 00:05:57,340
has not been called.

78
00:05:57,660 --> 00:06:02,030
And then we can decide what callback functions we want to add to that then.

79
00:06:02,040 --> 00:06:08,940
So inside this DOD then function we're providing this callback which will console log random pass to

80
00:06:08,940 --> 00:06:11,360
resolve and be random and that we got.

81
00:06:11,700 --> 00:06:15,050
Let's see how this looks and the consul.

82
00:06:15,120 --> 00:06:16,920
So I've got a code here.

83
00:06:16,920 --> 00:06:23,280
And remember this promise will be created first before the set time out finishes and resolves.

84
00:06:23,280 --> 00:06:30,060
So when I hit enter here we've got our promise and we're going to wait for seconds before we see the

85
00:06:30,060 --> 00:06:32,260
results which is now printed here.

86
00:06:32,280 --> 00:06:34,730
Random passed to resolve three.

87
00:06:34,770 --> 00:06:37,020
So think about the stack again.

88
00:06:37,140 --> 00:06:43,440
All of these functions are off of the stack before the set timeout gets invoked and then resolve gets

89
00:06:43,440 --> 00:06:46,390
invoked which will in turn call callback function

90
00:06:49,350 --> 00:06:50,970
will end our video here.

91
00:06:50,970 --> 00:06:53,940
Next up we'll talk about more advanced concepts with promises.
