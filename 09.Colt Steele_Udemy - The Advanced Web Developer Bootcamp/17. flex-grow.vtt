WEBVTT
1
00:00:00.100 --> 00:00:00.600
OK.

2
00:00:00.810 --> 00:00:05.260
So the next property goes hand-in-hand with flex spaces is called Flex grow.

3
00:00:05.430 --> 00:00:10.440
So imagine that we have we've assigned to flex bases let's say 100 pixels to a couple of different things

4
00:00:10.530 --> 00:00:15.600
and we've put them in a container so the flex bases is the ideal size before they go in.

5
00:00:15.780 --> 00:00:17.560
But there's a bunch of extra space.

6
00:00:17.670 --> 00:00:19.830
Do we want that extra space to be taken up.

7
00:00:19.990 --> 00:00:25.680
And if we do how do we assign is it evenly split up or does the middle section get all of it and everything

8
00:00:25.680 --> 00:00:27.120
else gets none of it.

9
00:00:27.240 --> 00:00:28.400
You see where I'm going with this.

10
00:00:28.410 --> 00:00:30.150
That's what flex growth dictates.

11
00:00:30.240 --> 00:00:35.200
It allows us to specify how the unused space should be spread amongst flex items.

12
00:00:35.370 --> 00:00:37.700
And it comes down to ratios.

13
00:00:37.920 --> 00:00:40.140
So I'll explain the math in just a bit.

14
00:00:40.140 --> 00:00:41.450
So here's flex grow again.

15
00:00:41.640 --> 00:00:48.430
If we assign a number like flex grow one to everything all boxes they will take up that even or they

16
00:00:48.430 --> 00:00:53.670
will evenly divide the space amongst them and this number could be anything as long as they have the

17
00:00:53.670 --> 00:00:54.680
same number.

18
00:00:54.780 --> 00:01:00.780
So I could have said flex grow 99 as long as they don't have flex grow something else set anywhere else

19
00:01:01.500 --> 00:01:03.780
and they all are sharing that same number.

20
00:01:03.780 --> 00:01:07.890
The ratio is the exact same so they split it up evenly.

21
00:01:07.890 --> 00:01:14.070
So here's another example I get that flex grow one for all boxes but then override that for the middle

22
00:01:14.070 --> 00:01:16.560
one and set flex grow equal to 2.

23
00:01:17.100 --> 00:01:23.190
And what it will do is it will take that unused space and get two times as much compared to the others.

24
00:01:23.490 --> 00:01:30.180
But I should point out in this case it does happen that it is twice as large but this does not mean

25
00:01:30.480 --> 00:01:33.590
make this box twice as large as the other boxes.

26
00:01:33.810 --> 00:01:38.670
It means use twice as much of the available space as the other boxes.

27
00:01:38.670 --> 00:01:44.730
So it does not mean double in size like if it was 500 pixels it won't automatically become 1000 pixels

28
00:01:45.180 --> 00:01:47.910
it just depends how much space is available.

29
00:01:48.240 --> 00:01:49.790
So let me show you again here.

30
00:01:49.830 --> 00:01:56.020
Just hitting the point home that its about the ratio using 9 and 8 instead of 1 and 2.

31
00:01:56.100 --> 00:01:57.350
Same idea.

32
00:01:57.960 --> 00:01:58.760
So the math.

33
00:01:59.070 --> 00:02:00.520
Okay here's a container.

34
00:02:00.510 --> 00:02:01.930
1000 pixels.

35
00:02:02.280 --> 00:02:09.040
We have two things that have a with or more accurately it should be like spaces set to 100 pixels.

36
00:02:09.150 --> 00:02:14.970
So they take up 100 pixels at the beginning meaning we have eight hundred pixels of free space.

37
00:02:15.000 --> 00:02:18.460
So if I don't set flex grow this is what we'll see.

38
00:02:19.510 --> 00:02:23.760
But if I do assign them a flex grow let's say flex grow of one.

39
00:02:24.130 --> 00:02:24.810
Both of them.

40
00:02:24.970 --> 00:02:27.550
That means they share this space evenly.

41
00:02:27.700 --> 00:02:34.830
So there's 800 pixels so we cut it in half and 400 goes to this guy and 400 goes to this guy.

42
00:02:34.900 --> 00:02:37.970
So they end up as 500 pixels each.

43
00:02:38.400 --> 00:02:39.060
OK.

44
00:02:39.790 --> 00:02:41.780
But then here's another example.

45
00:02:42.310 --> 00:02:50.140
In this case what I've done is I start off as 100 pixels each but I've assigned flex grow one to this

46
00:02:50.140 --> 00:02:54.210
one and flex go up 4 to this one here.

47
00:02:54.250 --> 00:02:58.640
Now the first thing I want you to notice it is not four times as large as this guy.

48
00:02:58.750 --> 00:03:02.130
I think it's closer to 2.8 or three times as large.

49
00:03:02.140 --> 00:03:02.950
I just did the math.

50
00:03:02.950 --> 00:03:10.000
But essentially what's happening if we go back we have 800 pixels or free space and we have flex growth

51
00:03:10.000 --> 00:03:11.630
for an Flexcar of 1.

52
00:03:11.680 --> 00:03:13.360
You can add those together.

53
00:03:13.630 --> 00:03:17.530
Meaning that we're going to split that free space into five chunks.

54
00:03:17.530 --> 00:03:24.990
So one two three four five each one whatever eight 800 divided by five is gets what 160 or so.

55
00:03:25.180 --> 00:03:26.700
Yep it 260.

56
00:03:26.740 --> 00:03:35.440
So five sections of 160 pixels are left and one of them goes to this guy and four of them go to this

57
00:03:35.440 --> 00:03:36.080
guy.

58
00:03:36.460 --> 00:03:38.200
So again it's not four times as large.

59
00:03:38.200 --> 00:03:41.770
It's all about the extra unused space.

60
00:03:41.770 --> 00:03:43.820
So let's play around with it.

61
00:03:43.960 --> 00:03:44.670
Here we are.

62
00:03:44.860 --> 00:03:51.780
Let's assign flex basis to all of our boxes we have four of them let's do 200 pixels OK.

63
00:03:51.930 --> 00:03:54.930
So they take up roughly 800 pixels.

64
00:03:55.170 --> 00:04:01.380
So if we go down here and let's say I want them all to grow evenly to take up this space and share it

65
00:04:01.410 --> 00:04:07.160
amongst them I just can assign flex grow to be any number as long as they all share it.

66
00:04:07.200 --> 00:04:08.980
And the easiest one is one.

67
00:04:09.090 --> 00:04:12.950
So now they split up that space evenly and they all grow together.

68
00:04:13.110 --> 00:04:14.730
So they're no longer 200 pixels.

69
00:04:14.740 --> 00:04:25.960
If we inspect them in our case they are 306 pixels each one.

70
00:04:26.060 --> 00:04:29.110
So what we could do is also come down here.

71
00:04:29.270 --> 00:04:34.970
And if I didn't assign Flexer one to all of them I could give flex grow 1 to the first box.

72
00:04:35.010 --> 00:04:36.040
What do you think will happen.

73
00:04:37.670 --> 00:04:42.500
It gets all of this space because the default value is flex grow zero.

74
00:04:42.710 --> 00:04:47.770
So none of these take up any of that unused space just box 1 does.

75
00:04:47.780 --> 00:04:53.580
So it grows to encompass all of that space and it gets a lot larger.

76
00:04:53.960 --> 00:04:54.820
OK.

77
00:04:55.190 --> 00:05:01.060
So a common use case though has to do something like this will set flex grow.

78
00:05:01.070 --> 00:05:08.910
Let's go to a parks to give that a flex grow of two.

79
00:05:09.170 --> 00:05:14.660
So it gets twice as much space as these other three.

80
00:05:14.660 --> 00:05:20.240
But you'll notice it barely gets bigger but it's getting double the space that these other ones get

81
00:05:20.270 --> 00:05:25.160
from its share of go back to it.

82
00:05:27.020 --> 00:05:28.260
Oh what do you.

83
00:05:28.390 --> 00:05:31.280
Get from this space here.

84
00:05:31.280 --> 00:05:33.910
So it got split up into five portions.

85
00:05:33.990 --> 00:05:38.260
This one this got one this got two portions and this got one as well.

86
00:05:38.510 --> 00:05:38.880
OK.

87
00:05:38.900 --> 00:05:41.160
So that's the very basics of flex grow.

88
00:05:41.210 --> 00:05:43.810
It does apply also to columns of course.

89
00:05:44.060 --> 00:05:50.830
So if we change this to a column layout and I'm actually going to open this in a separate full page.

90
00:05:51.070 --> 00:05:51.490
OK.

91
00:05:51.560 --> 00:05:54.100
So I've switched over to a column layout.

92
00:05:54.150 --> 00:05:58.370
I didn't change anything else but I'm going to call them up just to show you that the same thing works

93
00:05:58.370 --> 00:05:59.530
with like scroll.

94
00:05:59.600 --> 00:06:03.860
I've decided to split it over here in the left just because it's hard to show columns in this little

95
00:06:03.860 --> 00:06:04.980
preview done here.

96
00:06:05.250 --> 00:06:05.530
OK.

97
00:06:05.540 --> 00:06:09.490
So what I've done or what I'm going to do is come up here.

98
00:06:09.700 --> 00:06:16.360
You can give it a flex basis of let's say 150 pixels have to refresh.

99
00:06:16.570 --> 00:06:17.100
OK.

100
00:06:17.420 --> 00:06:21.070
So first thing you might notice is there's a little space here.

101
00:06:21.410 --> 00:06:27.140
So let's say I want box for to grow to encompass all that additional space whenever there is additional

102
00:06:27.140 --> 00:06:28.160
space.

103
00:06:28.160 --> 00:06:37.830
So I can come up or you come down to box four and just say flex grow is one refresh and box for grows

104
00:06:37.830 --> 00:06:40.230
to encompass all that space.

105
00:06:40.290 --> 00:06:44.870
So whenever there's free space box for gets it all however much there is.

106
00:06:44.880 --> 00:06:53.150
So if I zoom way out not much free space but now there's a ton and it all goes to four but I could change

107
00:06:53.150 --> 00:06:58.110
that of course I could give everything a 5 0 of one.

108
00:06:58.490 --> 00:07:04.250
And I'm very zoomed out but I'm giving all boxes like Seagrove on and then I'm going to give box one

109
00:07:04.430 --> 00:07:09.630
flex grow of three OK.

110
00:07:09.850 --> 00:07:11.570
So here's where they start.

111
00:07:12.160 --> 00:07:16.970
And now there's a bunch of whitespace coming and I have to refresh the page.

112
00:07:17.200 --> 00:07:17.760
OK.

113
00:07:17.980 --> 00:07:22.910
So there's a bunch of whitespace and it's being distributed across all of them.

114
00:07:22.960 --> 00:07:29.410
So this gets one share one chair one chair and then this gets three shares of the white space so gross

115
00:07:29.440 --> 00:07:30.650
three times as fast.

116
00:07:30.790 --> 00:07:32.770
Not necessarily three times as large.

117
00:07:33.090 --> 00:07:33.490
OK.

118
00:07:33.580 --> 00:07:34.480
So you get it by now.

119
00:07:34.540 --> 00:07:38.320
That's flex grow the last component we need to look at is flex shrink.

120
00:07:38.470 --> 00:07:42.640
And so I'll show you that in the next video and I'll show you how to combine that with flex pro and

121
00:07:42.640 --> 00:07:46.480
flex bases using the shorthand flex almost there promise.
