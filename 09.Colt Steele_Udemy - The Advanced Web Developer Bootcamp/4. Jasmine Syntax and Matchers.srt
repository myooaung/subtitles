1
00:00:00,390 --> 00:00:05,940
Welcome back in the last video we introduce Jasmine which is our testing framework and saw how to include

2
00:00:05,940 --> 00:00:09,630
the necessary CSSA and Javascript links to get up and running.

3
00:00:09,990 --> 00:00:14,340
Now that we have an idea of how to start with Jasmine let's learn a bit about some important keywords

4
00:00:14,370 --> 00:00:17,820
and functions when writing tests when we write our tests.

5
00:00:17,820 --> 00:00:20,740
There are a few functions that we'll be using quite frequently.

6
00:00:20,760 --> 00:00:23,270
Here are three of the most important ones.

7
00:00:23,310 --> 00:00:29,130
First we have describe this function is given to us by jazzmen and it is what we use to organize our

8
00:00:29,130 --> 00:00:30,060
tests.

9
00:00:30,090 --> 00:00:33,590
You can think of the described function like talking to someone and telling them.

10
00:00:33,660 --> 00:00:35,820
Let me describe something to you.

11
00:00:36,150 --> 00:00:41,490
Very often when you're reading unit tests you'll have one described block her function or unit that

12
00:00:41,490 --> 00:00:42,940
you're testing.

13
00:00:42,960 --> 00:00:48,510
The second important function that we will examine is it the IT function is used inside of described

14
00:00:48,510 --> 00:00:54,690
functions and inside of the IT function we write code that explains in more detail what we expect this

15
00:00:54,690 --> 00:00:56,820
piece of functionality to do.

16
00:00:56,820 --> 00:01:01,440
You can think of the IT function like you're talking to someone and telling them now that I describe

17
00:01:01,540 --> 00:01:04,900
something let me tell you about it in more detail.

18
00:01:05,220 --> 00:01:10,300
Each IT function corresponds to a test and is often also called a spec.

19
00:01:10,350 --> 00:01:15,930
The last function we'll be looking at is the expect function expect function lives inside of the IT

20
00:01:15,930 --> 00:01:21,960
function and is where we make expectations or assertions about the functionality we are testing.

21
00:01:21,960 --> 00:01:28,440
If one of our expectations inside of the function isn't met the test or spec fails this might sound

22
00:01:28,440 --> 00:01:29,220
a little strange.

23
00:01:29,220 --> 00:01:33,740
So before we get into a javascript example let's look at an example in English.

24
00:01:33,930 --> 00:01:35,530
Here's how we make unit test.

25
00:01:35,540 --> 00:01:38,800
Earth First will describe earth.

26
00:01:38,940 --> 00:01:42,490
We will then say it is round inside of here.

27
00:01:42,510 --> 00:01:49,250
We will expect that Earth is round we can write another spec that says it is the third planet from the

28
00:01:49,250 --> 00:01:51,130
sun inside of here.

29
00:01:51,140 --> 00:01:56,510
We'll expect that it is the third planet from the sun now that we have seen the pseudo code.

30
00:01:56,650 --> 00:01:58,800
Let's take a look at some actual test code.

31
00:01:59,080 --> 00:02:02,900
Here's an example of test code written in javascript using jazzier.

32
00:02:03,340 --> 00:02:06,370
Let's make a simple object called Gerth and give it some properties.

33
00:02:06,400 --> 00:02:12,450
Is round and number from Sun will then use the described function to wrap all of our tests.

34
00:02:12,450 --> 00:02:16,070
Notice that described in it except a string as their first parameter.

35
00:02:16,080 --> 00:02:19,520
This is what will appear in the browser when we look at these tests.

36
00:02:19,530 --> 00:02:25,800
The second parameter is always the callback function for both describe and think of this as we describe

37
00:02:25,800 --> 00:02:29,520
something and then we run a function and we explain what it can do.

38
00:02:29,760 --> 00:02:35,400
And then we run a function where we make assertions or expectations about our code inside of the callback

39
00:02:35,400 --> 00:02:36,510
to our described function.

40
00:02:36,510 --> 00:02:43,770
We place our functions and inside of the callback to our function we place our expect function the expect

41
00:02:43,770 --> 00:02:50,130
function returns and object to us which we can attach other methods to these methods we attach onto

42
00:02:50,130 --> 00:02:53,840
the result of the expect function are called matchers.

43
00:02:54,000 --> 00:03:00,510
The first matter we are looking at is to be which uses the triple equal comparison operator and compares

44
00:03:00,510 --> 00:03:05,400
the result of the expect function with the value we passed to that to be function.

45
00:03:05,400 --> 00:03:12,280
Remember describe it expect and matchers are all given to us by jazzmen.

46
00:03:12,280 --> 00:03:14,050
Now let's see how this all comes together.

47
00:03:14,290 --> 00:03:18,610
Here we place our code inside of the script tags and loaded all of our jazzmen code.

48
00:03:18,640 --> 00:03:21,920
Let's see what this looks like in the browser.

49
00:03:22,030 --> 00:03:24,340
Here we can see that we have two specs.

50
00:03:24,340 --> 00:03:29,550
Remember spec is another word for test and each function we use is considered a spec.

51
00:03:29,760 --> 00:03:35,050
You can see that inside of the word earth we have our two specs and everything is green which means

52
00:03:35,050 --> 00:03:36,560
that our tests are passing.

53
00:03:36,940 --> 00:03:41,350
I'm going to change one of the tests so you can see what it looks like when our tests fail.

54
00:03:41,740 --> 00:03:43,770
Notice here things are now red.

55
00:03:43,930 --> 00:03:44,560
If you'd like.

56
00:03:44,560 --> 00:03:47,470
Feel free to pause the video and try to write some more tests.

57
00:03:48,390 --> 00:03:52,360
In practice you won't be writing javascript inside of your Each team or files.

58
00:03:52,380 --> 00:03:57,870
Instead you'll typically have a couple of external javascript files one of them is called a spec file

59
00:03:58,020 --> 00:04:01,800
short for specification and will contain all of your tests.

60
00:04:01,800 --> 00:04:06,450
The other will be the code that you're actually testing in later sections on testing with the node and

61
00:04:06,450 --> 00:04:07,590
re-act applications.

62
00:04:07,620 --> 00:04:08,960
You'll see those in more detail.

63
00:04:09,840 --> 00:04:13,350
Now that we've gotten to a point where we understand the basic structure of our tests.

64
00:04:13,530 --> 00:04:15,690
Let's talk a bit more about matchers.

65
00:04:15,960 --> 00:04:21,360
Remember that matters are the functions that we attach to the result of the expect function.

66
00:04:21,360 --> 00:04:27,210
We were previously using a matter called 2B But what if we want to see if a value is defined or greater

67
00:04:27,210 --> 00:04:28,130
than some value.

68
00:04:28,160 --> 00:04:33,620
Or maybe we want to check the type of something thankfully Jasmine has quite a few matchers we can use.

69
00:04:33,840 --> 00:04:39,630
Let's take a look at some the first natural will examine is to be or not to be to be.

70
00:04:39,660 --> 00:04:42,720
We'll use triple equals to compare a value with another.

71
00:04:42,960 --> 00:04:49,310
The next matter is to be close to this we'll compare two values and accepts a second parameter for precision.

72
00:04:49,320 --> 00:04:54,660
This is useful when we only care if something is similar to another and not exactly the same.

73
00:04:54,660 --> 00:04:56,730
The next matter is to be defined.

74
00:04:56,730 --> 00:05:02,290
This is helpful in making sure certain variables have a specific value and not undefined.

75
00:05:02,340 --> 00:05:04,840
Next is to be falsie and to be truthy.

76
00:05:05,070 --> 00:05:10,860
These are handy when we expect a value when converted to a boolean to be true or false.

77
00:05:10,860 --> 00:05:15,780
We also have to be greater then to be less than which are pretty self-explanatory and helpful when working

78
00:05:15,780 --> 00:05:17,020
with numbers.

79
00:05:17,170 --> 00:05:20,760
The next one we have here is very useful when working with arrays.

80
00:05:21,000 --> 00:05:25,800
If we want to see if a value is contained in an array we can use to contain.

81
00:05:25,800 --> 00:05:30,600
Sometimes we don't know all the values in an array but we want to just make sure that something is there

82
00:05:31,080 --> 00:05:33,560
to contain is a great matcher.

83
00:05:33,770 --> 00:05:36,720
The next one to equal might seem a bit strange.

84
00:05:36,800 --> 00:05:39,650
We saw that to be a triple equal comparison.

85
00:05:39,650 --> 00:05:41,790
So what does two equal do.

86
00:05:41,840 --> 00:05:47,290
Remember that when you compare two objects using triple equals you will not always get what you expect.

87
00:05:47,390 --> 00:05:52,670
Even if they look the same if the two objects are different references in memory triple equals will

88
00:05:52,670 --> 00:05:54,350
always be false.

89
00:05:54,350 --> 00:05:55,840
Let's quickly see what I mean by that.

90
00:05:56,820 --> 00:06:02,040
I'll open up the chrome console and create an array called our one and then create another array called

91
00:06:02,100 --> 00:06:03,100
are two.

92
00:06:03,300 --> 00:06:08,910
If I compare our one with two using triple equals I will actually get false.

93
00:06:08,910 --> 00:06:12,750
The reason is because these objects are different references in memory.

94
00:06:12,810 --> 00:06:18,780
If I create a variable called R 3 and make it an empty array and then create another variable called

95
00:06:18,810 --> 00:06:24,840
R for and assign it to are three then these will be the same references in memory.

96
00:06:24,840 --> 00:06:29,000
And when I use triple equals to compare each one it will return true.

97
00:06:29,340 --> 00:06:33,120
Always be mindful of how objects are compared using triple equals.

98
00:06:33,380 --> 00:06:38,650
Now back in Jasmine what happens if we want to compare values in an object or array with another.

99
00:06:38,780 --> 00:06:41,130
They are different references in memory.

100
00:06:41,130 --> 00:06:45,780
This is where two equal helps to equal all except two different objects.

101
00:06:45,810 --> 00:06:51,570
And if there are values inside are the same it will return true even if they are different references

102
00:06:51,630 --> 00:06:52,320
in memory.

103
00:06:53,310 --> 00:06:57,120
Two equal is a great way to compare objects and arrays.

104
00:06:57,260 --> 00:07:02,040
The last thing we'll look at is not exactly a matter but a helpful tool when doing type checking.

105
00:07:02,300 --> 00:07:08,240
If we want to make sure some value is an array or function or constructed from a specific function we

106
00:07:08,240 --> 00:07:11,260
can use Jasmine that any to check the type.

107
00:07:11,630 --> 00:07:16,690
Remember typeof does not work for arrays since arrays are a type of object.

108
00:07:16,730 --> 00:07:20,220
So let's see what these look like inside a describe and it block.

109
00:07:20,540 --> 00:07:23,910
Feel free to pause the video and check out the code on this lot.

110
00:07:23,990 --> 00:07:28,940
Here we are using some of the matters before and making sure that all of our tests pass.

111
00:07:28,970 --> 00:07:33,260
You can look through this code and see in a little more detail about each of these matters that we've

112
00:07:33,260 --> 00:07:34,300
spoken about.

113
00:07:34,760 --> 00:07:40,050
If we open this up in the browser we'll see that all of our tests are passing.

114
00:07:40,200 --> 00:07:44,610
If you'd like to play around with these examples just click on the code Penn link below.

115
00:07:44,610 --> 00:07:50,550
These are also included in the section notes now that you've seen the syntax and matters it's time to

116
00:07:50,550 --> 00:07:52,440
practice a bit with these concepts.

117
00:07:52,440 --> 00:07:53,690
See you in the next video.
