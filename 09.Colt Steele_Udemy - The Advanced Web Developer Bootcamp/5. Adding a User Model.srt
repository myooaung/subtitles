1
00:00:01,080 --> 00:00:05,010
All right we've set up a very simple error handler but we don't even have any routes.

2
00:00:05,040 --> 00:00:10,490
We don't even have any data going on here so let's bring in a mongo database into the mix.

3
00:00:10,500 --> 00:00:13,600
So inside of the models folder I'm going to make it a couple of files.

4
00:00:13,670 --> 00:00:18,510
We to make an index that yes which is going to be responsible for connecting to a mango database and

5
00:00:18,510 --> 00:00:19,710
setting up mongoose.

6
00:00:19,860 --> 00:00:25,470
And also going to make a file called user dodgy apps which will refer to my user model and I'm going

7
00:00:25,470 --> 00:00:27,500
to make one more file here while we're there.

8
00:00:27,540 --> 00:00:28,750
We'll call that message.

9
00:00:28,800 --> 00:00:29,630
Yes.

10
00:00:29,640 --> 00:00:33,540
I'm not going to be using this too much but I'm going to eventually need a model for my message.

11
00:00:33,570 --> 00:00:35,460
So let's put this here for now.

12
00:00:35,460 --> 00:00:36,950
Inside my index yes.

13
00:00:36,990 --> 00:00:40,770
I need some pretty standard boilerplate to bring in mongoose.

14
00:00:40,770 --> 00:00:42,190
Mongoose is our idea.

15
00:00:42,210 --> 00:00:47,830
It's essentially a little wrapper on top of Mongo that allows us to make queries a little bit more efficiently.

16
00:00:48,060 --> 00:00:50,050
So we're going to bring in mongoose.

17
00:00:50,430 --> 00:00:56,470
We're then going to use the set function and we'll pass in Debug of true.

18
00:00:56,760 --> 00:01:01,230
And this is really useful if you ever want to see the actual Mongo queries that are being run in the

19
00:01:01,230 --> 00:01:02,340
terminal.

20
00:01:02,340 --> 00:01:05,740
We're also going to specify what promise library we want to use.

21
00:01:05,740 --> 00:01:10,060
And those are going to be the needed years 2015 promises so that we don't have to use a callback pattern.

22
00:01:10,230 --> 00:01:15,690
In fact this line of code is very important because we're going to be using as 20:17 async functions

23
00:01:15,690 --> 00:01:16,990
to build this application.

24
00:01:17,130 --> 00:01:19,790
And remember that our easing functions return promises.

25
00:01:19,890 --> 00:01:24,210
So we really want to make sure that our mongoose methods are returning promises so everything works

26
00:01:24,210 --> 00:01:25,270
correctly.

27
00:01:25,470 --> 00:01:31,200
We're going to do is connect to a database and that protocol is going to be Mangu D-B colon slash slash

28
00:01:31,930 --> 00:01:36,640
localhost and then whatever data base we'd like I'll call this warbler.

29
00:01:37,680 --> 00:01:41,670
What we're going to specify here as well are a couple of things to make sure that our connection is

30
00:01:41,670 --> 00:01:42,320
stable.

31
00:01:42,370 --> 00:01:49,770
Set in keepalive of true and we're also going to specify the property or use of Mangino client of true

32
00:01:49,800 --> 00:01:50,490
as well.

33
00:01:50,490 --> 00:01:53,640
And this is important just so we don't get some warnings about Mongo.

34
00:01:53,640 --> 00:01:57,990
Don't worry too much about this stuff is really just the idea of connecting through mongoose with the

35
00:01:57,990 --> 00:02:01,060
latest technology with Mongo.

36
00:02:01,190 --> 00:02:03,190
Now let's go make our user model number.

37
00:02:03,200 --> 00:02:07,670
All we've done here is simply just connected to a database set up some code to debug a bit easier and

38
00:02:07,670 --> 00:02:09,020
make sure that we use promises.

39
00:02:09,230 --> 00:02:10,650
But let's go make a user.

40
00:02:11,000 --> 00:02:13,250
And you've seen this pattern before with models.

41
00:02:13,400 --> 00:02:14,660
So let's do it right now.

42
00:02:14,750 --> 00:02:17,210
We're going to bring in a mongoose.

43
00:02:17,510 --> 00:02:20,270
We're also going to bring in the secret library.

44
00:02:20,270 --> 00:02:24,520
Remember that the secret library is going to be used for password hashing.

45
00:02:24,590 --> 00:02:29,390
It's going to take a plain text password and turn it into something that can not be reversed or you

46
00:02:29,380 --> 00:02:32,860
could require be.

47
00:02:33,050 --> 00:02:34,030
So we'll save this.

48
00:02:34,040 --> 00:02:42,320
And let's go make our user schema our user schema is a new mongoose schema and this excepts an object

49
00:02:42,400 --> 00:02:47,540
and inside of this object we're going to specify the fields that we want each document to have.

50
00:02:47,840 --> 00:02:50,330
We want every user to have an email.

51
00:02:50,390 --> 00:02:54,500
And what about this email that should be a type of a string.

52
00:02:54,500 --> 00:02:59,750
We should also make sure that it's required.

53
00:02:59,750 --> 00:03:06,810
We should also make sure that it's unique because we might want to log in users by their email.

54
00:03:06,860 --> 00:03:10,580
And if so we want to make sure that they have an email and that it's unique.

55
00:03:10,580 --> 00:03:15,530
We all want to people with the same email will also have a user name property so that if we display

56
00:03:15,530 --> 00:03:19,250
that maybe and warble we can do that as well.

57
00:03:19,250 --> 00:03:21,340
So we'll also give that type of string.

58
00:03:21,620 --> 00:03:26,570
And just like before we'll get that required of true as well as a unique of true.

59
00:03:26,970 --> 00:03:29,990
Don't want to users with the same username.

60
00:03:30,050 --> 00:03:31,330
What other fields are we going to need.

61
00:03:31,340 --> 00:03:37,820
We're going to need three more password and this password is simply going to be some kind of string

62
00:03:38,780 --> 00:03:41,830
also going to be required.

63
00:03:43,610 --> 00:03:45,510
And I'm sure that's true.

64
00:03:46,040 --> 00:03:47,150
One more property.

65
00:03:47,150 --> 00:03:50,420
I said there were two more that we needed after this but we're just going to do one because we're not

66
00:03:50,420 --> 00:03:52,190
bringing messages into the mix yet.

67
00:03:52,190 --> 00:03:54,540
We're going to simply have a profile image.

68
00:03:54,550 --> 00:03:59,900
You are out and that way we can have a nice picture of ourselves in this application will give that

69
00:04:00,020 --> 00:04:01,210
type of string.

70
00:04:01,640 --> 00:04:07,750
So every single object that I make from this schema is going to be done through a model.

71
00:04:07,910 --> 00:04:09,260
And how do we create a model.

72
00:04:09,260 --> 00:04:11,130
You've probably seen this pattern before.

73
00:04:11,130 --> 00:04:12,950
We're going to make a new model.

74
00:04:12,950 --> 00:04:15,090
We'll call that capital you user.

75
00:04:15,490 --> 00:04:20,060
And that's going to be a mongoose that model the first parameter here is what we want to reference that

76
00:04:20,060 --> 00:04:22,190
model adds and that is the string user.

77
00:04:22,220 --> 00:04:26,220
And then the schema that we created with it is going to be our user schema.

78
00:04:26,430 --> 00:04:30,120
We are then going to export our user.

79
00:04:30,230 --> 00:04:33,530
And if you'd like you could just add a module that exports Rayder here.

80
00:04:33,560 --> 00:04:34,760
I'd like to put this on two lines.

81
00:04:34,760 --> 00:04:36,730
It's a little bit more readable for me.

82
00:04:37,190 --> 00:04:39,610
So we've made a simple user schema.

83
00:04:39,650 --> 00:04:46,190
What does this mean when we use our user model we can now create queery find update delete whatever

84
00:04:46,190 --> 00:04:49,520
we like to do using all these wonderful mongoose methods.

85
00:04:49,730 --> 00:04:54,680
The problem is if we were to create a user right now we'd be doing something that's very very bad.

86
00:04:54,740 --> 00:04:57,990
We would be storing the password in plain text in our database.

87
00:04:58,100 --> 00:05:00,520
And that's something that will actually get you fired on the job.

88
00:05:00,770 --> 00:05:05,270
So in the next week we're going to talk about the idea of password hashing so that we can make sure

89
00:05:05,270 --> 00:05:09,350
that when we store passwords in the database they're secure and can not be reversed.

90
00:05:09,350 --> 00:05:14,270
This is the idea of a one way password hashing the way that someone's going to log in they're going

91
00:05:14,270 --> 00:05:15,870
to put in a plain text password.

92
00:05:16,010 --> 00:05:20,000
We're going to run that same hashing algorithm and we're going to see if whatever that ends up with

93
00:05:20,060 --> 00:05:22,060
is the same thing we have in the database.

94
00:05:22,190 --> 00:05:25,600
So we'll talk about that a bit more in the next video and introduce be correct.
