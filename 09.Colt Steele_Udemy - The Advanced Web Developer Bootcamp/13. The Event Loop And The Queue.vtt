WEBVTT
1
00:00:00.810 --> 00:00:06.170
Let's take another step back and learn about the fundamentals of how asynchronous code works in javascript.

2
00:00:06.270 --> 00:00:13.710
By learning about the event loop and the queue our objectives will be to define the event loop in the

3
00:00:13.710 --> 00:00:15.030
queue.

4
00:00:15.090 --> 00:00:21.650
Describe how the event loop in the queue worked together with the stack and finally to define javascript

5
00:00:21.680 --> 00:00:25.300
as a single threaded language.

6
00:00:25.340 --> 00:00:27.080
We'll start off with the queue.

7
00:00:27.140 --> 00:00:31.670
The queue is an ordered list of functions waiting to be placed on the stack function in the queue are

8
00:00:31.670 --> 00:00:34.310
processed in a first in first out basis.

9
00:00:34.490 --> 00:00:39.940
This is often called FIFO first in first out.

10
00:00:40.020 --> 00:00:45.300
In addition to the queue we will also need to understand the event loop so the event loop is a piece

11
00:00:45.300 --> 00:00:50.030
of functionality in the javascript runtime that checks the queue when the stack is empty.

12
00:00:50.130 --> 00:00:54.870
If the stack is empty the front of the queue is placed on the stack so the function that's waiting in

13
00:00:54.870 --> 00:01:00.910
the queue will be taken off and put on the stack and that's the event loop's job.

14
00:01:01.340 --> 00:01:04.230
Let's see how this queue actually works in practice.

15
00:01:04.490 --> 00:01:06.800
So here we've got an example of set.

16
00:01:06.800 --> 00:01:07.970
Time out.

17
00:01:08.090 --> 00:01:13.580
Pretty simple example we're just calling this callback function that will cancel log Hello world.

18
00:01:13.580 --> 00:01:17.730
But the key here is that we're going to invoke it zero seconds from now.

19
00:01:17.960 --> 00:01:23.780
So most people sort of in their minds intuitively think log is going to happen immediately.

20
00:01:23.780 --> 00:01:27.010
Well not exactly let's see what actually happens.

21
00:01:27.080 --> 00:01:32.330
So we got our main function on the stack and that main function is going to start out by invoking the

22
00:01:32.340 --> 00:01:34.230
set timeout method.

23
00:01:34.520 --> 00:01:40.880
So set time will be placed on the stack and also that timeout does is takes that callback function that

24
00:01:40.880 --> 00:01:43.880
we want to run and places it in the queue.

25
00:01:43.880 --> 00:01:47.350
In this example it will be placed in the queue 0 seconds from now.

26
00:01:47.360 --> 00:01:49.830
So immediately placed in the queue.

27
00:01:50.780 --> 00:01:53.140
OK now we're finishing up with set time out.

28
00:01:53.140 --> 00:01:57.870
It will be popped off the stack and then after that our main function will finish up.

29
00:01:58.040 --> 00:02:00.980
So we're all done there and now our stack is empty.

30
00:02:01.580 --> 00:02:05.660
So the next step here is how does the function get from the queue to the stack.

31
00:02:05.930 --> 00:02:11.060
Well as we talked about before that's the job of the event loop the event loop will check the queue

32
00:02:11.480 --> 00:02:13.160
and see if there's anything there.

33
00:02:13.160 --> 00:02:18.530
If there is it will take it out of the queue and place it on the stack so our callback function that

34
00:02:18.650 --> 00:02:24.670
just cancel logs hello world will be taken from the queue and placed in the stack by the event loop.

35
00:02:24.860 --> 00:02:29.740
So cancel that log will be placed on the stack as another function that gets invoked.

36
00:02:30.350 --> 00:02:35.080
We will print Hello World to the console and then cancel that log will come off the stack.

37
00:02:36.660 --> 00:02:39.880
And finally our callback function will finish up.

38
00:02:40.440 --> 00:02:41.220
And now we're all done.

39
00:02:41.220 --> 00:02:44.790
The stack is empty and the queue is empty so there's no more work to do.

40
00:02:44.790 --> 00:02:50.790
For the time being let's take a look at a little more complicated example now.

41
00:02:51.160 --> 00:02:52.030
So in this one.

42
00:02:52.060 --> 00:02:57.940
This again illustrates how the stack in the queue work together and specifically a common error that

43
00:02:57.940 --> 00:03:04.020
people run into again is when you invoke set time out with a wait time of 0.

44
00:03:04.030 --> 00:03:07.430
It's not actually zero seconds it doesn't run immediately.

45
00:03:07.510 --> 00:03:11.430
It only runs after the stack is empty and we'll see that again.

46
00:03:11.890 --> 00:03:18.670
So in this example we've got some code that squares a number and before that we've also got her invocation

47
00:03:18.670 --> 00:03:20.090
of said time out.

48
00:03:20.620 --> 00:03:24.950
Let's take a look and see what happens.

49
00:03:25.150 --> 00:03:29.960
First our main function is on the stack and we're going to invoke that timeout.

50
00:03:30.100 --> 00:03:32.770
So set time out will be placed on the stack.

51
00:03:33.430 --> 00:03:36.800
Next set time out will place that function on the queue.

52
00:03:36.880 --> 00:03:43.280
So our callback function with the console log will be added to the queue and then said time out will

53
00:03:43.280 --> 00:03:49.440
finish and come off of the stack.

54
00:03:49.480 --> 00:03:54.700
After that we're done with a set time function will move onto line number 7 and 9 7.

55
00:03:54.700 --> 00:03:57.230
The first thing we have to do is square a number.

56
00:03:57.310 --> 00:04:02.980
Now notice here that nothing's happened to the console yet and nothing nothing has been placed on the

57
00:04:02.980 --> 00:04:04.230
stack from the queue.

58
00:04:04.330 --> 00:04:07.130
So this callback function down here is still waiting to be run.

59
00:04:07.210 --> 00:04:09.480
Waiting for the stack to empty.

60
00:04:09.690 --> 00:04:17.990
So now we're going to invoke square one line number two and we're passing in the number two for N.

61
00:04:18.030 --> 00:04:20.970
So two times two will give us four.

62
00:04:21.050 --> 00:04:27.230
Once we return four squares going to come off of the stack and we'll be back on line number seven in

63
00:04:27.230 --> 00:04:30.440
our main function and then we'll put Konsole log on the stack

64
00:04:33.750 --> 00:04:40.360
console log will add four to the console because that's the result of our square function.

65
00:04:40.440 --> 00:04:47.200
So we'll see for and then console log will come off of the stack.

66
00:04:47.370 --> 00:04:51.250
And finally our main function will come off of the stack.

67
00:04:51.480 --> 00:04:56.250
So now there's no more work to be done in the stack and the next thing that happens again is the event

68
00:04:56.250 --> 00:04:56.890
loop.

69
00:04:57.000 --> 00:05:02.670
So the event loop checks the queue once the stack is empty and sees if there's anything to be done in

70
00:05:02.670 --> 00:05:03.250
the queue.

71
00:05:05.800 --> 00:05:10.950
The event loop sees that there's a function in the queue and then places that on the stack.

72
00:05:11.230 --> 00:05:15.550
And at this point we finally have our callback function running.

73
00:05:15.550 --> 00:05:21.450
So we're on line number five in our callback and console log will be placed on the stack.

74
00:05:21.610 --> 00:05:28.660
We'll see callback was placed on the queue in our consul and then cancel log will be taken off the stack

75
00:05:29.550 --> 00:05:33.810
or callback function will be taken off the stack and then our code is done.

76
00:05:34.060 --> 00:05:39.640
So the key thing there in that example was that this callback even though we set a set time out of 0

77
00:05:39.970 --> 00:05:46.450
did not actually get invoked until after the stack was empty and after the event loop has taken it off

78
00:05:46.450 --> 00:05:48.780
the queue and placed it on the stack.

79
00:05:48.790 --> 00:05:50.300
Very important concept there.

80
00:05:52.560 --> 00:05:55.260
This leads to the next important point in javascript.

81
00:05:55.260 --> 00:06:01.170
The fact that javascript is a single threaded language so single threaded means that code execution

82
00:06:01.170 --> 00:06:06.400
is linear code that is running cannot be interrupted by something else going on in the program.

83
00:06:06.570 --> 00:06:13.130
And that's sort of illustrated in the last example you saw that there was a callback function that was

84
00:06:13.140 --> 00:06:18.000
supposed to be run 0 seconds from now but it can't be run until other work finishes.

85
00:06:18.000 --> 00:06:22.760
Let's see another example that helps illustrate that.

86
00:06:22.800 --> 00:06:28.440
So in this single threaded example we again have a set time out that's going to be invoked 0 seconds

87
00:06:28.440 --> 00:06:28.900
from now.

88
00:06:28.910 --> 00:06:32.300
But that's not really zero seconds it's approximately zero seconds.

89
00:06:32.370 --> 00:06:36.750
It really means invoke that callback function after the stack is empty.

90
00:06:41.380 --> 00:06:45.430
So after we've invoked set timeout we have this for loop.

91
00:06:45.430 --> 00:06:49.580
And the point here is that this for loop is going to take a while.

92
00:06:49.600 --> 00:06:55.270
So even though the set time out said run in zero seconds it can't run until this for loop finishes.

93
00:06:55.300 --> 00:07:00.580
And this for loop is going to take some time because if you notice here we're going from equal zero

94
00:07:00.820 --> 00:07:03.800
to equals I think 1 billion.

95
00:07:03.990 --> 00:07:05.340
One a lot of zeros.

96
00:07:05.530 --> 00:07:07.700
So this loop is going to take some time.

97
00:07:07.900 --> 00:07:11.860
And then after that we'll cancel out of the loop and only after that.

98
00:07:11.940 --> 00:07:14.040
Our callback function run.

99
00:07:14.050 --> 00:07:18.950
So lots of steps here before this callback function actually gets invoked.

100
00:07:18.970 --> 00:07:22.010
Let's see that in the consul.

101
00:07:22.110 --> 00:07:23.560
So I've got our code right here.

102
00:07:23.760 --> 00:07:29.340
And the thing to notice again is that the done with the loop and then the hello from the time out won't

103
00:07:29.340 --> 00:07:33.720
be invoked or won't be put in the console until after our loop is finished.

104
00:07:37.760 --> 00:07:43.010
So as you can see here the done with loop took some time and then only after everything was off the

105
00:07:43.010 --> 00:07:43.570
stack.

106
00:07:43.790 --> 00:07:48.330
Hello from the time out was invoked and put in the consul.

107
00:07:49.050 --> 00:07:50.160
Great work so far.

108
00:07:50.160 --> 00:07:53.140
Next up we're going to take a quiz on the concepts you learned in this section.

109
00:07:53.160 --> 00:07:54.300
Good luck.
