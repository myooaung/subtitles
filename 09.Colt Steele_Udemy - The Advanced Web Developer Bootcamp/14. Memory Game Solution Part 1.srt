1
00:00:00,930 --> 00:00:03,500
Welcome back I hope that was a good exercise.

2
00:00:03,950 --> 00:00:07,470
So let's take a look at the solution.

3
00:00:07,470 --> 00:00:08,730
This is indexed Yes.

4
00:00:08,750 --> 00:00:13,470
So this is where I'm using react on Brender and I've got my main component memory games so let's look

5
00:00:13,470 --> 00:00:15,270
at that.

6
00:00:15,720 --> 00:00:20,550
Now if you check out the hints you probably already have seen this but just go over it one more time

7
00:00:20,550 --> 00:00:21,750
in case you didn't.

8
00:00:21,750 --> 00:00:27,730
I've got a card state object which is the three states that my card can currently be in.

9
00:00:27,870 --> 00:00:32,480
It can be hiding meaning that it's greyed out right now you can't see the color.

10
00:00:32,580 --> 00:00:37,970
It can be showing meaning you can see the color but it's not currently matched or it could be matching.

11
00:00:37,980 --> 00:00:40,490
Meaning that the card should stay up.

12
00:00:40,560 --> 00:00:45,200
Now down here in the constructor making an array of 16 card objects.

13
00:00:45,390 --> 00:00:51,060
So each card has an ID card state mentioned above and then a color.

14
00:00:51,060 --> 00:00:58,210
So there are eight pairs of colors here red Navy green yellow black purple pink and light blue.

15
00:00:58,440 --> 00:01:03,260
And then I use this shuffle method here to shuffle up that array.

16
00:01:03,270 --> 00:01:10,790
Now shuffle I got from importing shuffle from shuffle array and that I've installed using NPM.

17
00:01:10,800 --> 00:01:15,280
So shuffle register pensee for apage just an easy way to shuffle that array for us

18
00:01:21,320 --> 00:01:23,800
and then so far my render method doesn't do much.

19
00:01:23,840 --> 00:01:29,030
I render nav bar which we'll talk about in a second and then I iterate over those cards and I render

20
00:01:29,030 --> 00:01:32,520
a card component and I card component right now doesn't do anything.

21
00:01:32,520 --> 00:01:34,610
So let's take a look at that.

22
00:01:35,840 --> 00:01:37,680
So a rendering 16 of these.

23
00:01:37,940 --> 00:01:41,030
But right now it's just an empty div it doesn't have anything.

24
00:01:41,030 --> 00:01:44,230
Let's check out the nav bar.

25
00:01:44,270 --> 00:01:48,950
So here's my nav bar so far it just says memory game and then on the right side it says new game.

26
00:01:48,950 --> 00:01:51,570
Now we're going to have to hook this new game link up to the state.

27
00:01:51,590 --> 00:01:54,560
So when it's clicked it can reset the game for us.

28
00:01:54,890 --> 00:01:56,240
OK so that's what we've got so far.

29
00:01:56,240 --> 00:01:57,460
Let's get started in the car.

30
00:01:57,470 --> 00:01:59,250
Let's make the cards visible.

31
00:02:02,790 --> 00:02:09,950
The first thing we'll do is add a class to this div so that.

32
00:02:10,270 --> 00:02:16,660
So if we take a look at card that CSSA which we're importing here we have this card container class

33
00:02:17,150 --> 00:02:22,800
and it essentially just gives our div some size and makes it display inline block.

34
00:02:22,920 --> 00:02:25,600
And the important thing here is the background color is gray.

35
00:02:25,620 --> 00:02:29,100
So by default our card is gray it's it's hiding right now.

36
00:02:30,480 --> 00:02:32,770
The next thing we want to do is add some props.

37
00:02:32,790 --> 00:02:36,140
The first prop we want is whether or not the card should be showing.

38
00:02:36,390 --> 00:02:43,250
So let's add a prop type for that.

39
00:02:43,290 --> 00:02:47,730
So this would be a boolean that just says is this card showing or not.

40
00:02:48,570 --> 00:02:50,210
Secondly we'll need a background color

41
00:02:55,450 --> 00:02:59,920
and this will be a CSSA background color that we'll use to overwrite the gray.

42
00:03:00,230 --> 00:03:02,730
OK so now what should we do with these two.

43
00:03:03,560 --> 00:03:08,630
Well let's add a style object that will conditionally add a background color to

44
00:03:20,830 --> 00:03:21,180
OK.

45
00:03:21,180 --> 00:03:27,630
Now we've created the the style object and if the card is showing we've given a background color which

46
00:03:27,630 --> 00:03:30,030
is equal to the prop that we're passing in.

47
00:03:30,030 --> 00:03:43,460
Now we want to render our component with that style.

48
00:03:43,480 --> 00:03:45,820
All right let's see if we have something visible now.

49
00:03:52,780 --> 00:03:53,020
All right.

50
00:03:53,020 --> 00:03:54,160
These are apps so far.

51
00:03:54,190 --> 00:03:56,880
We've got our 16 cards and we've got our now.

52
00:03:57,160 --> 00:03:59,240
I can't click on any of the cards though.

53
00:03:59,770 --> 00:04:01,370
So let's start working on that.

54
00:04:03,360 --> 00:04:08,700
So inside this card I want to respond to a click event and the state won't be owned by this card.

55
00:04:08,700 --> 00:04:13,280
All I want to do is expose a click event as a prop so that a prop type for one click

56
00:04:17,160 --> 00:04:19,260
and then add that prop to our div

57
00:04:23,210 --> 00:04:29,430
and I'll make multiple lines.

58
00:04:29,550 --> 00:04:30,110
There we go.

59
00:04:30,120 --> 00:04:33,680
Now our card component is either showing or not showing.

60
00:04:33,690 --> 00:04:37,080
And it will also invoke a click callback.

61
00:04:37,740 --> 00:04:43,560
Let's test out to make sure the showing and not showing is working just by hard coding some values in

62
00:04:43,560 --> 00:04:44,350
the memory game

63
00:04:57,560 --> 00:05:00,950
so Ideally this should show us the background color for each card.

64
00:05:00,950 --> 00:05:05,790
We also have to put a function in there just to make sure it all works.

65
00:05:09,950 --> 00:05:11,060
And we'll fill this in later

66
00:05:14,410 --> 00:05:14,720
okay.

67
00:05:14,720 --> 00:05:19,910
Now I see all 16 colors and they're shuffled so that looks good.

68
00:05:20,120 --> 00:05:21,980
Let's try hiding them.

69
00:05:27,560 --> 00:05:30,240
All right so it looks like the showing and hiding is working.

70
00:05:30,470 --> 00:05:32,560
And it looks like our shuffling is working.

71
00:05:32,570 --> 00:05:34,440
Next up we need to make them clickable.

72
00:05:37,830 --> 00:05:39,510
Now let's start hooking this up to the state.

73
00:05:39,510 --> 00:05:40,700
A little bit more.

74
00:05:40,800 --> 00:05:44,720
So rather than making showing true or false let's only show the card.

75
00:05:44,730 --> 00:05:46,200
If it's not equal to hiding

76
00:05:51,430 --> 00:05:57,340
that way we can see all the cards being clicked and turned over and we can also implement the new game

77
00:05:57,340 --> 00:06:01,450
function.

78
00:06:01,450 --> 00:06:06,430
Now let's add an unclick function into the constructor that will place here and we'll build on this

79
00:06:06,430 --> 00:06:06,910
function.

80
00:06:06,920 --> 00:06:12,410
It'll start out as just a function that changes the cards state from hiding to showing and vice versa.

81
00:06:12,640 --> 00:06:15,600
And this function will take the idea of the card that was clicked.

82
00:06:15,670 --> 00:06:19,930
So you know which one to modify in the state array.

83
00:06:19,990 --> 00:06:23,630
So I've implemented said stay here and we won't keep this function.

84
00:06:23,650 --> 00:06:27,580
But essentially what it does is it goes through each card using a map.

85
00:06:27,970 --> 00:06:34,990
And if the card were matches the ID that we're looking for we'll change that card to either change a

86
00:06:34,990 --> 00:06:40,450
state from hiding the matching or matching the hiding depending on what the state currently is.

87
00:06:40,450 --> 00:06:43,940
If the card that we're looking for is not equal to the card.

88
00:06:43,960 --> 00:06:48,670
Excuse me if the card that we're on is not equal to the current ID then we'll just return the card as

89
00:06:48,670 --> 00:06:49,870
is.

90
00:06:49,870 --> 00:06:52,210
So essentially this will make the card clickable.

91
00:06:52,330 --> 00:06:54,970
And when you click on it it will show it.

92
00:06:55,000 --> 00:06:57,140
And when you click on it again it will hide it.

93
00:06:57,140 --> 00:06:59,290
Let's put that up inside of the unclick

94
00:07:04,780 --> 00:07:06,340
and see if it works.

95
00:07:08,980 --> 00:07:10,600
OK looks good so far.

96
00:07:10,720 --> 00:07:17,020
When the video here on the next video will implement the new game functionality in the nav and then

97
00:07:17,020 --> 00:07:22,670
also make our game playable so that cards are hiding and showing appropriately depending on how many

98
00:07:22,670 --> 00:07:23,800
you're matching or non-matching.
