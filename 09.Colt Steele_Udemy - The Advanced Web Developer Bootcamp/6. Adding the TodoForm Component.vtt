WEBVTT
1
00:00:00.120 --> 00:00:00.660
All right.

2
00:00:00.660 --> 00:00:01.590
Welcome back.

3
00:00:01.590 --> 00:00:04.030
Next we're going to focus on the to do forum.

4
00:00:04.240 --> 00:00:06.850
You want to be able to have an input button.

5
00:00:06.930 --> 00:00:11.250
You can type something we need to do like Walk the dog feed the fish.

6
00:00:11.430 --> 00:00:15.850
Hit that button and it should create a new to do item simultaneously.

7
00:00:15.870 --> 00:00:20.790
It should also send a request to actually insert a new tattoo into our database.

8
00:00:20.790 --> 00:00:25.380
Technically shouldn't happen simultaneously because we want to make sure that it is inserted first and

9
00:00:25.380 --> 00:00:26.800
then we'll show it on the screen.

10
00:00:26.880 --> 00:00:31.770
And if there's a problem we don't want to just have it show up and give the user a false positive only

11
00:00:31.770 --> 00:00:34.140
to have them refresh the page and not have it be there.

12
00:00:34.410 --> 00:00:39.120
So it's not quite simultaneous but it should be almost instantaneous for the user.

13
00:00:39.330 --> 00:00:40.320
So let's get started.

14
00:00:40.320 --> 00:00:44.060
First thing we need to do of course is to find this true form component.

15
00:00:44.090 --> 00:00:50.130
Hook it up correctly get some simple input in there and then actually work on the API functionality.

16
00:00:50.130 --> 00:00:53.710
So this will probably be the the most complicated video here.

17
00:00:53.720 --> 00:00:55.860
But a lot of it is kind of basic bare bones things.

18
00:00:55.950 --> 00:01:04.920
So let's start by going to do list and let's add an R to do form component that doesn't exist yet let's

19
00:01:04.920 --> 00:01:06.740
do it underneath the H-1.

20
00:01:06.810 --> 00:01:10.170
But before that to do it are displayed truly just a matter of preference.

21
00:01:10.470 --> 00:01:12.980
But I'm going to do error driven development here.

22
00:01:13.020 --> 00:01:17.590
So to do form it's going to cause some problems because it's not defined.

23
00:01:17.850 --> 00:01:27.660
So let's write our import statement well to import to do form from dot slash to do form and also that

24
00:01:27.660 --> 00:01:32.210
causes a problem because it can't find that module because it doesn't exist.

25
00:01:32.520 --> 00:01:38.830
So the next step is to make that file and we'll call it to do form.

26
00:01:38.890 --> 00:01:42.020
J.S. OK.

27
00:01:42.400 --> 00:01:46.870
Now what I'm going to do is just copy over our import statement into to do form.

28
00:01:47.110 --> 00:01:55.660
So we have re-act there and I'm going to at the bottom export defaults to do form.

29
00:01:55.660 --> 00:01:57.950
Now we need to define to do for him.

30
00:01:58.750 --> 00:01:59.870
So let's do that now.

31
00:02:00.160 --> 00:02:12.120
It's going to be class to do form extends component and let's start super simple by just having render

32
00:02:12.810 --> 00:02:19.860
and all render we'll do is return start with just a simple input.

33
00:02:20.060 --> 00:02:27.350
So let's do input type equals text just like that.

34
00:02:27.350 --> 00:02:28.920
And how about a button as well.

35
00:02:33.310 --> 00:02:35.370
And let's have that say add to do

36
00:02:38.140 --> 00:02:43.560
and we're not going to worry about functionality for now we're just going to have that most basic possible.

37
00:02:43.760 --> 00:02:47.340
Oh I need to wrap them in a div or something as well.

38
00:02:47.580 --> 00:02:49.360
So let's do that now.

39
00:02:49.360 --> 00:02:50.440
We could also use a form

40
00:02:53.410 --> 00:02:55.460
and I mean change the spacing on this file.

41
00:02:55.510 --> 00:02:58.850
Drives me crazy and lets them get everything

42
00:03:02.680 --> 00:03:06.110
it good enough for now.

43
00:03:06.650 --> 00:03:07.960
So what are we missing here.

44
00:03:08.210 --> 00:03:17.000
We have a syntax error and put because text so we need this year chess does not like that when we have

45
00:03:17.000 --> 00:03:21.690
a self-closing tag we need to put that there even though it's optional in plain HMO.

46
00:03:22.120 --> 00:03:27.130
OK so if this all works correctly we should have a form of top and we do.

47
00:03:27.260 --> 00:03:28.250
It doesn't do anything.

48
00:03:28.250 --> 00:03:30.210
When I click it or type in here.

49
00:03:30.620 --> 00:03:32.180
But that's coming up next.

50
00:03:32.600 --> 00:03:38.330
So the way that this is going to work similar to some of the other forms and input we've connected in

51
00:03:38.330 --> 00:03:46.130
this class so far is that we're actually going to pass in if we go to our to do list component when

52
00:03:46.130 --> 00:03:47.680
we create the form here.

53
00:03:47.840 --> 00:03:56.480
We're going to pass in a function as a prop that inside the form when we click this button it will trigger

54
00:03:56.480 --> 00:04:00.840
that function and pass in the value of the input.

55
00:04:00.860 --> 00:04:06.980
So whatever is currently typed in there like I don't know a clean fish tank when we click the button

56
00:04:07.580 --> 00:04:11.140
there will be an on click here that will take that value.

57
00:04:11.420 --> 00:04:16.050
But really that value is going to be coming from the state of art form.

58
00:04:16.120 --> 00:04:19.880
So the only thing to do form state is the current input values.

59
00:04:20.180 --> 00:04:22.010
So we can actually start there.

60
00:04:22.460 --> 00:04:27.740
So let's go down here and start off by adding Excuse me down here.

61
00:04:27.740 --> 00:04:29.950
Start off by adding just our basic constructor

62
00:04:32.660 --> 00:04:39.170
and do our super props boiler plate and let's define state

63
00:04:42.080 --> 00:04:45.890
and let's call it input value will be an empty string to start.

64
00:04:45.920 --> 00:04:55.100
And now let's go down to this input and hook that up so that we have value equals this state that input

65
00:04:55.580 --> 00:04:56.610
value.

66
00:04:56.960 --> 00:05:03.250
And I'm actually going to do this on separate lines just for formatting purposes.

67
00:05:03.250 --> 00:05:03.890
There we go.

68
00:05:04.070 --> 00:05:06.390
So the value of this form or the input.

69
00:05:06.440 --> 00:05:12.180
Let's change this instead of and put value being an empty string that say hello ha ha ha.

70
00:05:12.380 --> 00:05:13.670
Something like that.

71
00:05:13.670 --> 00:05:17.510
Now if I were fresh you can see our initial value there is EHLO ha ha ha.

72
00:05:17.840 --> 00:05:26.000
Now the thing is if I change this let's go to our reactive tools and go to to do form and put value

73
00:05:26.000 --> 00:05:27.690
in the state is Helliwell ha ha.

74
00:05:27.770 --> 00:05:33.700
But if I change here it actually doesn't allow me to edit this at all.

75
00:05:33.800 --> 00:05:34.700
I'm trying to.

76
00:05:35.000 --> 00:05:40.170
But we're not actually updating the state and the state is linked to the value of this form.

77
00:05:40.250 --> 00:05:44.140
So it doesn't allow us to update it because we're not changing the state.

78
00:05:44.510 --> 00:05:49.640
So let's fix that first because we're going to need this form to be able to change of course we need

79
00:05:49.640 --> 00:05:55.850
to take that date value of input value and then send that off to the to do list component to send to

80
00:05:55.850 --> 00:05:56.600
the API.

81
00:05:56.750 --> 00:06:01.810
And then hopefully get a good response back so it updates the DOM here with a new to do.

82
00:06:02.480 --> 00:06:06.490
So back here we're going to start with L-L haha that's fine.

83
00:06:06.530 --> 00:06:08.290
We're not just going to bind the value though.

84
00:06:08.420 --> 00:06:15.590
We're also going to add an event here on change and we don't have any sort of function defined yet or

85
00:06:15.590 --> 00:06:19.140
method but let's call it handle change.

86
00:06:19.250 --> 00:06:23.550
We need this handled change and now we need to define Andal change.

87
00:06:23.660 --> 00:06:27.930
So let's go ahead and define that up here.

88
00:06:29.000 --> 00:06:34.610
And it takes an event object and let's just start by setting the state

89
00:06:38.360 --> 00:06:46.430
to update input value and set it equal to whatever the target value is.

90
00:06:46.430 --> 00:06:54.290
So in that event no semicolon there we're going to extract the value of that input and update the state

91
00:06:54.440 --> 00:06:58.780
the input value part of our state to reflect that change.

92
00:06:58.790 --> 00:07:02.580
So now the last thing we need to do is actually bind this.

93
00:07:02.600 --> 00:07:11.630
So this handle change equals the start and all changed up bind this hopefully that's reviewed by now.

94
00:07:11.630 --> 00:07:14.910
Put that in the constructor and we go over here.

95
00:07:14.930 --> 00:07:24.430
We won't see anything but if we go to the re-act tools and look at our state let's change this to.

96
00:07:24.790 --> 00:07:25.330
Hello.

97
00:07:25.390 --> 00:07:27.960
And you can see that it's updating the state.

98
00:07:27.970 --> 00:07:29.200
So that's our first step.

99
00:07:29.210 --> 00:07:34.690
All that really allows us to do is have our reac component know what's happening in this input kind

100
00:07:34.690 --> 00:07:40.970
of manage the input here as well as be able to extract that value at any point and pass it on.

101
00:07:41.020 --> 00:07:42.750
Which is what we need to do next.

102
00:07:42.760 --> 00:07:47.050
So we want to add our on click to our button.

103
00:07:47.290 --> 00:07:50.790
So this button when we click on it we want something to happen.

104
00:07:50.890 --> 00:07:55.840
We're not going to actually write the logic for the API call in here because remember our state is managed

105
00:07:55.840 --> 00:07:58.530
by this list or the to do state at least.

106
00:07:58.780 --> 00:08:00.730
But we're going to trigger a function.

107
00:08:00.760 --> 00:08:08.080
So let's start by defining something called handle submit and here and handle submit can be super simple

108
00:08:08.080 --> 00:08:11.550
for now it's just going to cancel that log.

109
00:08:11.620 --> 00:08:24.420
This state DOT input value and then down here are going to on our button add simple on click equals

110
00:08:25.410 --> 00:08:29.850
this state and will submit.

111
00:08:29.960 --> 00:08:32.310
And then lastly appear are you in a bind.

112
00:08:32.330 --> 00:08:39.990
So will do this that handle submit equals this debt handle submit that bind this.

113
00:08:40.460 --> 00:08:40.960
OK.

114
00:08:41.150 --> 00:08:47.540
So at this point we're telling this button when you're clicked on let's do it like this.

115
00:08:47.960 --> 00:08:49.370
It's really just a matter of personal taste.

116
00:08:49.370 --> 00:08:54.800
But when this button is clicked we're going to call this up handle submit and had to submit just print

117
00:08:54.800 --> 00:08:55.160
it out.

118
00:08:55.160 --> 00:08:56.800
This does state that input value.

119
00:08:57.020 --> 00:09:01.430
Oh I'm calling this state that Hendel submit doesn't make sense.

120
00:09:01.430 --> 00:09:02.440
It's not in the state.

121
00:09:02.480 --> 00:09:05.450
We're trying to call our function and will submit.

122
00:09:05.620 --> 00:09:06.280
OK.

123
00:09:06.590 --> 00:09:07.730
Now let's give it a shot.

124
00:09:09.050 --> 00:09:12.160
I click it starts out as well haha I update it.

125
00:09:12.520 --> 00:09:12.960
OK.

126
00:09:13.030 --> 00:09:18.430
So we're basically now able to take that value and all that we want to do is when we click on that button

127
00:09:18.610 --> 00:09:23.470
rather than just printing it out we're going to call a function that's going to be passed in through

128
00:09:23.470 --> 00:09:24.460
prompts.

129
00:09:24.520 --> 00:09:30.540
So let's actually hop over to our to do list and define a simple function.

130
00:09:30.550 --> 00:09:32.740
It won't do the API call just yet.

131
00:09:32.740 --> 00:09:40.030
Let's go down after load to do's and just write one called had to do and we'll take in a value from

132
00:09:40.030 --> 00:09:41.720
our input.

133
00:09:41.860 --> 00:09:48.130
You could call it whatever you know text or new to do text or something I'll just call it now and let's

134
00:09:48.130 --> 00:09:59.590
do a simple conference call log again here just to say adding to do from to do list component and then

135
00:09:59.770 --> 00:10:01.830
let's add in Vau.

136
00:10:02.050 --> 00:10:06.880
So all that we're really doing is shifting the responsibility the constant log up to the to do list

137
00:10:06.880 --> 00:10:07.680
component.

138
00:10:08.080 --> 00:10:14.020
So we define ad to do now what we need to do first is binded up here.

139
00:10:14.350 --> 00:10:20.860
So when our constructor again will do this that add to do equals.

140
00:10:21.010 --> 00:10:25.280
And do not find this.

141
00:10:25.620 --> 00:10:26.210
OK.

142
00:10:26.500 --> 00:10:30.970
Then we need to pass it in when we actually render our to do form.

143
00:10:31.000 --> 00:10:32.370
So I'll do that now.

144
00:10:32.500 --> 00:10:43.260
We'll just call it add to do equals this dot add to do so we're passing in this under.

145
00:10:43.370 --> 00:10:44.860
Add to do in the props.

146
00:10:44.890 --> 00:10:53.530
So then inside our form inside of the handle submit we'll now have access to this props that add to

147
00:10:53.530 --> 00:10:54.400
do.

148
00:10:55.360 --> 00:11:00.570
And we want to pass in this state input value.

149
00:11:00.820 --> 00:11:06.010
So whatever is currently in that input we're going to extract it out because it's in this state that

150
00:11:06.010 --> 00:11:11.740
input value take that value and then we're going to send it on along to this stop prop's that Ed to

151
00:11:11.740 --> 00:11:19.370
do which again is being passed in right here from the parent and all that it does is come to about log.

152
00:11:19.510 --> 00:11:24.610
So it's not a big improvement but we're setting the structures that we can at our API call in here because

153
00:11:24.610 --> 00:11:26.970
we need this to happen in the to do it component.

154
00:11:27.040 --> 00:11:29.590
That's where the state is managed.

155
00:11:29.590 --> 00:11:30.760
So let's see what happens.

156
00:11:31.970 --> 00:11:32.540
There we go.

157
00:11:32.640 --> 00:11:35.600
It is adding to do from to do this component.

158
00:11:36.490 --> 00:11:37.210
It's working.

159
00:11:37.480 --> 00:11:37.810
Okay.

160
00:11:37.810 --> 00:11:39.980
So now for the fun part.

161
00:11:40.170 --> 00:11:43.590
When I delete this now we need to make our API call.

162
00:11:43.990 --> 00:11:51.390
So going back to the slides here the route that we need to send our data to the Create route we need

163
00:11:51.390 --> 00:11:54.740
to send a post request to slash API slash traduce.

164
00:11:54.760 --> 00:12:03.160
And then we need to of course include as Jason in the body of the request the name of that to do whether

165
00:12:03.160 --> 00:12:05.730
it's walk dog or feed cat we need to include that data.

166
00:12:05.800 --> 00:12:10.160
So whatever's in that input which for us is just going to be called Vau.

167
00:12:10.660 --> 00:12:10.860
OK.

168
00:12:10.870 --> 00:12:12.250
So this will take a bit to type.

169
00:12:12.250 --> 00:12:20.110
I'm actually just going to copy our existing fetch an update at just a slight little tiny change.

170
00:12:20.140 --> 00:12:28.660
So rather than just fetching API you RL As is I'm actually going to need to add in some options and

171
00:12:28.660 --> 00:12:35.190
the first one is going to be method is now post the default method for Fetch is get.

172
00:12:35.200 --> 00:12:40.030
So let's change it to post and the other thing we're going to need to do.

173
00:12:40.170 --> 00:12:50.130
Let's add headers make a new headers object and we're just going to say Content-Type

174
00:12:56.100 --> 00:13:00.590
is application slash Jaison.

175
00:13:00.910 --> 00:13:01.550
Right.

176
00:13:01.590 --> 00:13:04.240
And then after that we need to include the data.

177
00:13:04.260 --> 00:13:09.870
So remember we're trying to send the value so we can't just send the value on its own because the way

178
00:13:09.870 --> 00:13:14.370
our API works it's expecting it to be under the key name.

179
00:13:14.580 --> 00:13:19.080
Each to do has a name and it completed it completed and a created date.

180
00:13:19.080 --> 00:13:21.520
And so we're just going to include it under name.

181
00:13:21.600 --> 00:13:32.060
So we're going to do body Jason dot string of phi name colon though so we're just building a trace on

182
00:13:32.050 --> 00:13:35.130
string and sending that along in the body.

183
00:13:36.560 --> 00:13:41.780
And we can actually start with that and we're not doing anything afterwards which is fine we're just

184
00:13:41.780 --> 00:13:45.560
returning the parsed version of the response.

185
00:13:45.620 --> 00:13:50.840
We're not updating the state so we won't actually see any changes on the page but if we look in our

186
00:13:50.840 --> 00:13:53.930
network tab Let's send a new one.

187
00:13:54.110 --> 00:13:57.490
Let's do that and I'm really running out of ideas here.

188
00:13:57.650 --> 00:14:02.780
Let's go oh grocery shopping and click add to do.

189
00:14:02.780 --> 00:14:08.780
You can see here I think I clicked it twice but you can see that our response request is sent to slash

190
00:14:08.810 --> 00:14:11.360
API slash dues as a.

191
00:14:11.900 --> 00:14:17.230
And if we scroll down and see our body here name is go grocery shopping.

192
00:14:17.360 --> 00:14:17.960
Perfect.

193
00:14:18.020 --> 00:14:21.310
And then we actually get a response which is the newly created to do.

194
00:14:21.540 --> 00:14:28.710
So we have to do is take that data and update the to do's in our state object to reflect this new to

195
00:14:28.710 --> 00:14:29.600
do.

196
00:14:30.500 --> 00:14:40.460
So to do that down here we just add in our then format that and let's just call it let's call it new

197
00:14:40.460 --> 00:14:40.810
to do

198
00:14:43.800 --> 00:14:45.340
and then it's pretty simple.

199
00:14:45.600 --> 00:14:47.480
You just need to do a set.

200
00:14:47.490 --> 00:14:52.090
State and to.

201
00:14:53.260 --> 00:14:55.230
We want all the existing to use.

202
00:14:55.590 --> 00:15:03.240
So this that state to use plus the new to do that just came back.

203
00:15:03.270 --> 00:15:08.600
So that's going to be this data just lost it.

204
00:15:08.850 --> 00:15:13.090
But if we send off another one let's do do laundry.

205
00:15:13.620 --> 00:15:14.760
You can see it here.

206
00:15:14.850 --> 00:15:17.910
This is what's coming back and we're just adding that to the state.

207
00:15:17.910 --> 00:15:25.620
So if we look at the state now in our to do us component of our most recent one we're simply just adding

208
00:15:25.620 --> 00:15:27.830
it in at the end.

209
00:15:27.840 --> 00:15:28.630
By the way.

210
00:15:29.000 --> 00:15:29.460
Okay.

211
00:15:29.520 --> 00:15:32.540
So that's pretty much it for creating it to do.

212
00:15:32.700 --> 00:15:37.890
Honestly the bulk of the code is reduced reused just the error handling for our fetch.

213
00:15:37.890 --> 00:15:43.950
What's different is that post request rather than a get request and we're passing in some data as well.

214
00:15:44.100 --> 00:15:47.210
But then afterwards error handling same.

215
00:15:47.400 --> 00:15:54.090
And then we're just updating the state and to use to reflect the new to do as well as the existing to

216
00:15:54.090 --> 00:15:59.740
use in the state and react to takes care of the rest and adds in a new item for us.

217
00:16:00.270 --> 00:16:00.870
Okay.
