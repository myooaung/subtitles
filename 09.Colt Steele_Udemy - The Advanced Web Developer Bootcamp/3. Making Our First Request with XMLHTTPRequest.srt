1
00:00:00,270 --> 00:00:00,650
All right.

2
00:00:00,650 --> 00:00:01,370
Welcome back.

3
00:00:01,560 --> 00:00:07,050
And welcome to our first main event of the section where we'll actually see how to make our first request

4
00:00:07,170 --> 00:00:08,610
using javascript.

5
00:00:08,610 --> 00:00:09,840
Good stuff.

6
00:00:09,870 --> 00:00:14,000
So outside of the JavaScript world there are a ton of ways of making requests.

7
00:00:14,040 --> 00:00:16,140
You can make them from an iOS app.

8
00:00:16,140 --> 00:00:17,640
There are libraries to do it.

9
00:00:17,850 --> 00:00:20,220
You can do it from an Android app from.

10
00:00:20,430 --> 00:00:26,520
From refreshing your browser from a Java app or rails out from your command line using curl or some

11
00:00:26,520 --> 00:00:27,380
other utility.

12
00:00:27,450 --> 00:00:33,060
So many ways of making requests and that's kind of the point is that it's a standard way of communicating

13
00:00:33,060 --> 00:00:33,800
between computers.

14
00:00:33,810 --> 00:00:39,960
But how it's actually done the actual thing that initiates that request is different usually at least

15
00:00:40,170 --> 00:00:42,810
and in javascript that applies.

16
00:00:42,900 --> 00:00:45,470
There are multiple ways of making requests.

17
00:00:45,480 --> 00:00:50,360
You can see a couple of them here and in this section we're going to survey a couple of them.

18
00:00:50,490 --> 00:00:56,880
The key important ones and you'll kind of come to learn both the history of Ajax is we're going about

19
00:00:56,880 --> 00:00:58,180
them in a particular order.

20
00:00:58,320 --> 00:01:03,090
But you'll also see how things are built on top of one another and how things have gotten much easier

21
00:01:03,120 --> 00:01:04,430
as time has gone on.

22
00:01:04,800 --> 00:01:08,500
So we're going to start off with the worst named one of all the options.

23
00:01:08,590 --> 00:01:14,910
SML HTP requests such a mouthful to say just call it X H R for short.

24
00:01:14,910 --> 00:01:18,240
This was the original way of making requests from the browser.

25
00:01:18,240 --> 00:01:20,010
I think it was in Netscape.

26
00:01:20,010 --> 00:01:25,470
If you're familiar with that one the old early browsers I think that was the first browser to include

27
00:01:25,470 --> 00:01:28,110
this way of making requests.

28
00:01:28,110 --> 00:01:35,580
And so when Ajax first came around back in 2004 2005 and when gmail came out with kind of its live updating

29
00:01:35,970 --> 00:01:42,690
e-mail inbox and a couple of other apps as well it was using X-amount HTP requests to power it.

30
00:01:42,690 --> 00:01:45,700
So let's see how to make one VND talking about this.

31
00:01:45,750 --> 00:01:47,840
It's not the nicest syntax.

32
00:01:48,000 --> 00:01:49,410
I'll be blunt about it.

33
00:01:49,500 --> 00:01:55,230
This is not how I ever I mean pretty much never make requests this way anymore but that doesn't mean

34
00:01:55,230 --> 00:02:00,810
you shouldn't know how it works because libraries that will use things like Jay Querrey or X-ers another

35
00:02:00,810 --> 00:02:04,260
one are built using this underneath the hood.

36
00:02:04,740 --> 00:02:05,700
So it's good to know.

37
00:02:06,090 --> 00:02:10,180
And it also explains a lot about how the request actually works.

38
00:02:10,200 --> 00:02:12,780
So the syntax like I said is not great.

39
00:02:12,780 --> 00:02:17,460
To help us make the most sense of all this I think it's best just to type it and kind of talk about

40
00:02:17,460 --> 00:02:18,510
it as we go.

41
00:02:18,510 --> 00:02:20,240
So I have an empty code pen here.

42
00:02:20,460 --> 00:02:21,540
I've minimized everything.

43
00:02:21,540 --> 00:02:23,790
We're just going to be writing javascript in this video.

44
00:02:23,940 --> 00:02:29,550
So our end goal is to request an API and get data back and the API we're going to work with to start

45
00:02:29,580 --> 00:02:31,080
is a very very simple one.

46
00:02:31,080 --> 00:02:32,210
It's kind of a joke.

47
00:02:32,520 --> 00:02:33,860
It's put out by get help.

48
00:02:33,900 --> 00:02:39,960
It's part of their much larger get have API that contains way more information but the endpoint API

49
00:02:40,150 --> 00:02:41,990
get hub slashes.

50
00:02:42,210 --> 00:02:47,010
Every time you hit that end point every time you request it you get a little zen quote.

51
00:02:47,010 --> 00:02:55,010
Usually it's not just traditional Zen it's tech Zen or business and they focus over features of Word

52
00:02:55,050 --> 00:02:56,750
administrative distraction.

53
00:02:57,090 --> 00:02:59,020
Yeah not the most interesting thing ever.

54
00:02:59,100 --> 00:03:02,760
But it's a really nice quick API for us to just play around with.

55
00:03:02,760 --> 00:03:04,590
So we're not getting bogged down with the data.

56
00:03:04,740 --> 00:03:08,310
But we will be working with more interesting data in this section.

57
00:03:08,310 --> 00:03:14,030
So what we want to do is request that you are all just like I'm doing here except through Javascript.

58
00:03:14,310 --> 00:03:17,600
So to do that we're going to use the next H.R..

59
00:03:17,850 --> 00:03:21,240
So the first thing we want to do is create a new variable.

60
00:03:21,240 --> 00:03:22,450
Call it whatever you want.

61
00:03:22,530 --> 00:03:29,380
I usually call mine x h r but that's totally up to you and it needs to be equal to new XM.

62
00:03:29,430 --> 00:03:32,330
H TTP request

63
00:03:34,980 --> 00:03:39,840
and this will be totally honest with you has always thrown me off that the Exham is capitalized but

64
00:03:40,150 --> 00:03:48,180
HTP isn't even though HTP is also an abbreviation or an acronym very confusing to me.

65
00:03:48,340 --> 00:03:53,750
But anyway this makes us a new instance of the SML HDP request.

66
00:03:53,830 --> 00:03:58,540
So our end goal is going to be to request this API API.

67
00:03:58,590 --> 00:03:59,200
I get updates.

68
00:03:59,200 --> 00:04:00,250
Com slash then.

69
00:04:00,430 --> 00:04:06,400
So what we want to do to actually make that happen is reference our ex-aide char variable whatever you

70
00:04:06,400 --> 00:04:09,520
named it Dot open.

71
00:04:09,520 --> 00:04:10,900
That's the first important part.

72
00:04:10,900 --> 00:04:13,500
And then there's a second thing ex-aide Charcot send.

73
00:04:13,510 --> 00:04:19,760
So this is in complete just yet but send is what will actually send it off will actually initiate everything.

74
00:04:19,960 --> 00:04:24,400
But ex-aide Charcot open is where we tell it what type of request to make.

75
00:04:24,400 --> 00:04:28,850
If you're not familiar with HTP request verb's there's a couple of different options.

76
00:04:28,960 --> 00:04:30,530
We're going to make a get request.

77
00:04:30,550 --> 00:04:34,440
There's other things like post request put patch delete a couple of others.

78
00:04:34,600 --> 00:04:37,910
We want to make a request because we are retrieving information.

79
00:04:38,050 --> 00:04:39,950
And that's how the API is set up.

80
00:04:40,000 --> 00:04:44,790
We're not sending data we're not updating or deleting data we're simply retrieving it.

81
00:04:44,830 --> 00:04:47,700
Then the second thing we need to provide is that you are out.

82
00:04:47,860 --> 00:04:49,360
What are we requesting.

83
00:04:49,660 --> 00:04:51,910
So in quotes we'll put our API.

84
00:04:51,940 --> 00:04:54,770
You are well and safe.

85
00:04:54,860 --> 00:04:59,110
So on its own this is kind of the bare bones to actually make that request.

86
00:04:59,110 --> 00:05:04,970
So if I open up the console let me also refresh the page to make that code run.

87
00:05:04,970 --> 00:05:08,770
Nothing happens and that doesn't mean that the request isn't being made.

88
00:05:08,770 --> 00:05:10,950
It just means that we're not doing anything about it.

89
00:05:10,990 --> 00:05:15,880
We're not retrieving the data we're not displaying it we're certainly not counseled not logging in to

90
00:05:15,880 --> 00:05:16,480
do that.

91
00:05:16,510 --> 00:05:20,880
We need to understand a little bit more about how the requests actually work.

92
00:05:20,890 --> 00:05:24,090
So there's a property called Ready state on every request.

93
00:05:24,220 --> 00:05:26,450
It can be one of five different options.

94
00:05:26,500 --> 00:05:32,400
They're all numbered starting with zero up to four and they correspond to a different state of the request.

95
00:05:32,590 --> 00:05:37,780
So it starts off with unsent all the way up to done along the way.

96
00:05:37,780 --> 00:05:39,040
There are a couple of steps.

97
00:05:39,280 --> 00:05:45,140
So if you care about the details basically the order is this the request is unsent.

98
00:05:45,250 --> 00:05:50,590
The Open method has not been called then open has been called that's the next step.

99
00:05:50,590 --> 00:05:58,550
Then after that send has been called Finally not quite finally but after that we get content downloading.

100
00:05:58,840 --> 00:06:00,710
So it's on its way back.

101
00:06:00,710 --> 00:06:04,110
It just might be taking a bit depending on how much data is coming back.

102
00:06:04,330 --> 00:06:07,610
And then there's done where everything is finished.

103
00:06:08,050 --> 00:06:13,900
So what we want to do most of the time at least is basically have the record go off and then do something

104
00:06:13,990 --> 00:06:14,870
when it's done.

105
00:06:15,160 --> 00:06:17,280
That's what we care about when our data is back.

106
00:06:17,530 --> 00:06:23,470
So we want to be able to check is the ready state done and the way we do that is by taking advantage

107
00:06:23,830 --> 00:06:26,890
of an event called on ready state change.

108
00:06:26,920 --> 00:06:28,690
So this will call a function.

109
00:06:28,690 --> 00:06:34,600
Every time the ready state changes so it goes from zero to 1 1 to 2 2 to 3 3 to 4.

110
00:06:34,700 --> 00:06:38,950
And then inside of that we'll be able to check ok is the ready state done is it done is it done.

111
00:06:38,960 --> 00:06:43,220
And as soon as it is done we can do whatever you'd like with the code.

112
00:06:43,250 --> 00:06:51,230
So let's go back to code pen and we add this event listener so ex-aide Charcot on ready state change

113
00:06:52,340 --> 00:06:58,280
equals and then we give it a function and then whatever we do in here will happen any time that ready

114
00:06:58,280 --> 00:06:59,320
state changes.

115
00:06:59,750 --> 00:07:01,950
So let's do a console Dalt log.

116
00:07:04,150 --> 00:07:06,610
Ready state is.

117
00:07:07,090 --> 00:07:13,090
And then add X H.R. dot ready state.

118
00:07:13,480 --> 00:07:19,520
So if we do this and that's actually capitalized I believe and I move my semi-colon to the end.

119
00:07:19,770 --> 00:07:21,590
We open up our con..

120
00:07:22,210 --> 00:07:25,610
I have a bunch of them already but let me clear that out.

121
00:07:25,790 --> 00:07:33,000
Refresh the page once you can see we get the first change where it starts from zero and it changed to

122
00:07:33,000 --> 00:07:34,620
one triggering event.

123
00:07:34,620 --> 00:07:36,760
Then it changed to two to three into four.

124
00:07:37,020 --> 00:07:38,300
And then it's finished.

125
00:07:38,310 --> 00:07:39,500
That's it.

126
00:07:39,510 --> 00:07:42,300
So what we want to do is check if the ready state is for.

127
00:07:42,300 --> 00:07:50,190
That means it's done so we can just do a simple IF statement if and then we do X a chart ready state

128
00:07:50,520 --> 00:07:56,780
equals equals number four then we'll save and we'll do something in here.

129
00:07:56,910 --> 00:08:05,070
And the magic line if we want the data that's actually coming back it's an x 8 char dot response text

130
00:08:06,300 --> 00:08:07,580
capital-T.

131
00:08:08,070 --> 00:08:10,220
So that let's consider log it

132
00:08:15,670 --> 00:08:18,120
exit X age our response text.

133
00:08:18,170 --> 00:08:24,110
So if we just tried doing this from the very beginning without this if statement there won't be response

134
00:08:24,110 --> 00:08:27,380
text when the response hasn't finished.

135
00:08:27,440 --> 00:08:32,920
So we want to make sure we're waiting until ready state is exactly for meeting that the request is done.

136
00:08:33,110 --> 00:08:33,710
OK.

137
00:08:33,710 --> 00:08:38,230
Refresh the page check our council over here and we get our data back.

138
00:08:38,260 --> 00:08:39,670
Every time I refresh.

139
00:08:39,770 --> 00:08:42,960
Every time I run this code which right now that's how the code is running.

140
00:08:43,130 --> 00:08:48,600
We're getting a new set of Zen API whatever you want to call this little tidbit coming back.

141
00:08:48,860 --> 00:08:53,680
So the last thing I want to talk about is what happens if the request doesn't actually work.

142
00:08:53,990 --> 00:08:57,750
What if are you are our requesting is down the servers down.

143
00:08:57,750 --> 00:09:01,470
It doesn't exist anymore or potentially we have a typo.

144
00:09:01,520 --> 00:09:09,300
You know what if I tried to go to get up about com slash Zann 10 blah something like that.

145
00:09:09,900 --> 00:09:12,630
Well we don't have a way of handling that just yet.

146
00:09:12,640 --> 00:09:19,620
In fact if I tried that and open up my console it clear this out just to make it clearer and I refresh

147
00:09:20,660 --> 00:09:27,680
can see you get this get 4 or 4 not found but then more importantly my response text is wittered.

148
00:09:27,680 --> 00:09:30,110
So we can actually handle that in our code.

149
00:09:30,140 --> 00:09:34,840
We could have an edge case where we're checking did the response or did it actually work to the request

150
00:09:34,850 --> 00:09:35,740
go through.

151
00:09:35,780 --> 00:09:38,430
And what signifies that to us is the status code.

152
00:09:38,600 --> 00:09:43,570
So you've probably seen four or four pages before or some other status codes.

153
00:09:43,670 --> 00:09:45,540
If we want to check if something worked.

154
00:09:45,830 --> 00:09:48,300
We're going to check if the status codes 200.

155
00:09:48,320 --> 00:09:52,900
And then we'll have an otherwise so if it's 200 that means we're good.

156
00:09:52,930 --> 00:09:54,900
Otherwise there's a problem.

157
00:09:55,240 --> 00:09:56,900
So we can just write x h.

158
00:09:56,920 --> 00:09:58,920
Our dot status.

159
00:09:59,020 --> 00:10:11,070
So if it equals 200 then we'll cancel that log the response text perfect and we can add an else that

160
00:10:11,070 --> 00:10:15,670
just checks or that says otherwise let's do consulate log.

161
00:10:15,690 --> 00:10:20,060
There was a problem just like that.

162
00:10:20,060 --> 00:10:23,230
So again we're checking first if the request is done.

163
00:10:23,240 --> 00:10:24,260
Ready state equals four.

164
00:10:24,260 --> 00:10:28,740
And then within that we have an extra layer to check was the status code.

165
00:10:28,760 --> 00:10:34,990
OK 200 if it was then do something and we're only constant logging so that won't break things.

166
00:10:35,000 --> 00:10:42,320
But if we were trying to insert an image into our into the DOM if we're trying to update an H1 maybe

167
00:10:42,770 --> 00:10:49,040
add a UI card manipulating the DOM and we need to use response text and it's not there or we're getting

168
00:10:49,040 --> 00:10:49,860
something weird back.

169
00:10:49,880 --> 00:10:55,060
It could potentially break your app so you want to make sure that something will be there.

170
00:10:55,490 --> 00:10:56,870
Otherwise there's a problem.

171
00:10:56,870 --> 00:11:00,290
So right now are you or Al is ridiculous.

172
00:11:00,500 --> 00:11:04,820
Refresh the page and we get there was a problem.

173
00:11:04,820 --> 00:11:05,420
Cool.

174
00:11:05,450 --> 00:11:12,910
So if we go back to our normal API to get have dotcom now we get faver focus over features.

175
00:11:14,140 --> 00:11:15,740
Speak like a human.

176
00:11:15,790 --> 00:11:16,320
Cool.

177
00:11:16,450 --> 00:11:16,820
OK.

178
00:11:16,840 --> 00:11:18,070
So let's wrap it up.

179
00:11:18,100 --> 00:11:23,290
There's a lot of syntax here but it really comes down to the way that these requests work.

180
00:11:23,350 --> 00:11:24,530
They're very bare bones.

181
00:11:24,820 --> 00:11:29,100
All the innards are exposed to you can see every state that it goes through.

182
00:11:29,230 --> 00:11:34,060
It starts off at zero where the request hasn't been opened or has it been sent.

183
00:11:34,060 --> 00:11:35,790
It's basically just waiting.

184
00:11:36,150 --> 00:11:40,780
And it goes all the way up to done we're just ready state for that's the one we care about.

185
00:11:40,840 --> 00:11:47,830
Basically these two bits if you want to write requests your typical S.H. our request will be using these

186
00:11:47,830 --> 00:11:53,790
two things a lot checking if it finished and checking if it was OK if it worked.

187
00:11:53,820 --> 00:11:58,250
There are so commonly used that you often just have them in a single line like this.

188
00:11:58,510 --> 00:12:02,070
But like I mentioned there are better easier ways of writing requests.

189
00:12:02,080 --> 00:12:03,430
This is kind of a lot of work.

190
00:12:03,430 --> 00:12:06,970
There are better ways that we're going to see in just a couple of videos.

191
00:12:06,970 --> 00:12:07,580
All righty.

192
00:12:07,600 --> 00:12:08,620
Take a break.

193
00:12:08,650 --> 00:12:09,360
It's kind of a lot.
