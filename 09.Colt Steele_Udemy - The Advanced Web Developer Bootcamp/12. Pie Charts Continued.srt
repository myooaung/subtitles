1
00:00:00,330 --> 00:00:07,560
Welcome back in the last video we built a simple pie chart now that we've got the basics in this video.

2
00:00:07,560 --> 00:00:12,870
I'd like to get the range impot working so that we can see how our data changes over time.

3
00:00:12,870 --> 00:00:18,900
I'd also like to talk about a few other enhancements we can make to our pie charts with D-3.

4
00:00:18,910 --> 00:00:25,390
First let's tackle this range and put to start I'll calculate the maximum year using D-3.

5
00:00:25,390 --> 00:00:32,640
This will then allow me to set the min max and value properties on the input with javascript next.

6
00:00:32,650 --> 00:00:36,620
I'd like to add an event listener for input events on the range input.

7
00:00:36,760 --> 00:00:38,980
Here's where I'd like to do things a bit differently.

8
00:00:39,740 --> 00:00:45,320
As you may recall from the histogram videos I ended up with a fair amount of duplication between the

9
00:00:45,320 --> 00:00:50,230
code that set up the graph and the code that updated the graph inside of my event handler.

10
00:00:51,520 --> 00:00:57,220
In the solution video to the histogram exercise we saw that one way to avoid this duplication was to

11
00:00:57,220 --> 00:01:02,200
write a helper function that's responsible for rendering the graph using the general update pattern

12
00:01:03,310 --> 00:01:04,890
so that's what I'd like to do here.

13
00:01:06,640 --> 00:01:13,640
I'll write a function called Make Grath which takes a year as its argument inside of this function.

14
00:01:13,660 --> 00:01:18,540
I'll move the code that filters my data set so that only values matching the year variable are kept

15
00:01:19,850 --> 00:01:27,170
also moved my code that uses D-3 that pie and D-3 got arc into this function in the last video.

16
00:01:27,220 --> 00:01:32,440
We only needed to use the Enter selection to get our graphs to show up but in order to make our code

17
00:01:32,440 --> 00:01:37,420
more flexible we'll need to use the general update pattern as we've seen before.

18
00:01:37,420 --> 00:01:41,540
First need to grab the update selection and store it in a variable.

19
00:01:41,740 --> 00:01:49,990
Then I'll hop into the exits and remove any unnecessary arcs next or move to the enter selection.

20
00:01:49,990 --> 00:01:56,040
Append a path element for each new piece of data and give any new arcs a class of Arc.

21
00:01:56,190 --> 00:02:03,480
Finally merge the enter an update selections and set each Arc's fill stroke and D attribute just like

22
00:02:03,480 --> 00:02:04,080
before.

23
00:02:05,070 --> 00:02:09,060
Now that I have this function I can use it in two places first.

24
00:02:09,120 --> 00:02:13,000
I'll use it when the script loads and passing me near.

25
00:02:13,180 --> 00:02:18,760
Second I can use this function inside of my event handler and pass it the event target value converted

26
00:02:18,760 --> 00:02:28,600
into a number let's save and refresh great this range input seems to be working.

27
00:02:28,600 --> 00:02:31,910
There are a couple of small enhancements we can make to our graphs as well.

28
00:02:32,290 --> 00:02:39,260
If you want to set padding between wedges you can set it either on D-3 that guy or D-3 that arc on D-3

29
00:02:39,340 --> 00:02:39,690
are.

30
00:02:39,720 --> 00:02:43,460
You can also run the corners if your wages which can be a nice enhancement.

31
00:02:43,470 --> 00:02:50,170
If you're using padding take a look at how these two lines change the shape of our graph.

32
00:02:53,470 --> 00:02:59,500
Also it's important to note that you can change the default sort order for your arcs in the last video.

33
00:02:59,560 --> 00:03:05,920
We learned that the PI generator automatically sorts arx by value larger arcs come first.

34
00:03:06,140 --> 00:03:11,930
But if you want to sort by something other than value you can use the sort method on the generator and

35
00:03:11,930 --> 00:03:14,080
passing your own comparator function.

36
00:03:14,880 --> 00:03:17,700
The sort method will run over pairs of data points.

37
00:03:17,700 --> 00:03:21,810
Call them a and b if A's should come before B in the chart.

38
00:03:21,810 --> 00:03:27,870
The competitor should return a negative number if a should come after me the comparatives should return

39
00:03:27,870 --> 00:03:28,980
a positive number.

40
00:03:29,810 --> 00:03:35,440
And if you are indifferent between a and b the function should return 0.

41
00:03:35,440 --> 00:03:37,350
Here's a quick example.

42
00:03:37,360 --> 00:03:42,900
Suppose you wanted to visualize your data group by continent and then by birth count.

43
00:03:43,070 --> 00:03:47,920
We could use the sort method and pass in a competitor that checks the continent property on a and b

44
00:03:49,040 --> 00:03:52,250
if A's continent comes before B's alphabetically.

45
00:03:52,250 --> 00:04:00,600
This comp. should return minus one if A's continent comes after the comp. should return plus one.

46
00:04:00,630 --> 00:04:05,700
Otherwise the two data points have the same continent and we can simply return the difference in their

47
00:04:05,700 --> 00:04:06,720
birth counts.

48
00:04:08,130 --> 00:04:15,990
Let's save and refresh as you can see now all of the arcs of the same color are grouped together.

49
00:04:16,000 --> 00:04:17,740
That's it for pie charts.

50
00:04:17,740 --> 00:04:24,140
By this point you've seen how to create a wide variety of visualizations with the three try to apply

51
00:04:24,140 --> 00:04:26,490
what you've learned in the exercises for this section.

52
00:04:27,400 --> 00:04:31,690
In our next set of ideas we'll talk about some enhancements you can make to the graphs you've already

53
00:04:31,690 --> 00:04:32,530
created.

54
00:04:32,860 --> 00:04:34,500
I'll see you in the next video.
