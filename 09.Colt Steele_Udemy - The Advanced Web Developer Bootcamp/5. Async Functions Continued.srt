1
00:00:00,480 --> 00:00:01,310
Welcome back.

2
00:00:01,470 --> 00:00:06,480
In this video we're going to continue learning about 20:17 async functions.

3
00:00:06,480 --> 00:00:11,820
And there's a bit of a gotcha with Issing functions and the Awake keyword when Meeking HTP requests

4
00:00:12,330 --> 00:00:14,060
that we take a look at the code below.

5
00:00:14,210 --> 00:00:19,950
We are making two requests sequentially since the Awake keyword will wait for a promise to be resolved.

6
00:00:19,980 --> 00:00:23,010
Response 2 will not begin until the entire response.

7
00:00:23,010 --> 00:00:25,490
One promise is resolved the second.

8
00:00:25,500 --> 00:00:30,660
Each TDP request here does not get made until the first promise is resolved.

9
00:00:30,660 --> 00:00:35,700
Imagine if each of these requests took a couple of seconds to make our application with slow down quite

10
00:00:35,700 --> 00:00:36,300
a bit.

11
00:00:36,600 --> 00:00:41,950
So how can we be smarter about making each DDP requests when using the Awake keyword.

12
00:00:41,970 --> 00:00:47,580
The answer is that we can return the promises right away and make these requests in parallel and then

13
00:00:47,580 --> 00:00:50,560
simply await the promises once they are done resolving.

14
00:00:50,760 --> 00:00:52,760
Here's what that code would look like.

15
00:00:53,010 --> 00:00:55,700
Even though it's quite similar to what we've seen before.

16
00:00:55,700 --> 00:01:00,960
There is a tremendous performance difference when you're making each TDP requests sequentially versus

17
00:01:00,960 --> 00:01:02,050
in parallel.

18
00:01:02,430 --> 00:01:08,010
If you find yourself making lots of HTP requests using the Awake keyword and your application is slowing

19
00:01:08,010 --> 00:01:08,760
down.

20
00:01:08,760 --> 00:01:10,970
Be mindful of this refactor.

21
00:01:11,040 --> 00:01:15,820
The last thing we're going to discuss is how to combine the promise all method with the Awake keyword.

22
00:01:16,080 --> 00:01:18,530
And here's where you can do some pretty incredible stuff.

23
00:01:18,870 --> 00:01:25,050
In the example below we're waiting for an array of promises to resolve using the Awake keyword and promised.

24
00:01:25,120 --> 00:01:31,360
All remember promised not all accepts an array of promises and returns a promise which when resolve

25
00:01:31,650 --> 00:01:37,080
returns an array of resolved values instead of using a dot then and a callback function.

26
00:01:37,200 --> 00:01:42,760
We can simply await the resolution of promised at all and then access those values in our movies list

27
00:01:42,780 --> 00:01:48,660
array using async functions with promised not all is quite common when you have multiple promises that

28
00:01:48,660 --> 00:01:50,890
you want to await resolution for.

29
00:01:50,910 --> 00:01:56,340
Although the code here is asynchronous it reads very synchronously and once you get used to async functions

30
00:01:56,520 --> 00:01:58,480
they become more and more readable.

31
00:01:58,800 --> 00:02:02,790
At the time of this recording Issing functions are not supported in every browser.

32
00:02:02,920 --> 00:02:08,740
They will be in the near future and in more recent versions of Chrome Firefox Safari and Noj yes there

33
00:02:08,750 --> 00:02:09,890
already support it.

34
00:02:09,930 --> 00:02:12,080
So you're only going to see them more and more.

35
00:02:12,360 --> 00:02:18,820
If you look at modern re-act redux node and angular code bases you'll see async functions quite a bit.

36
00:02:18,930 --> 00:02:23,430
Now that you've seen how to use async functions it's time for you to practice with some exercises.

37
00:02:23,430 --> 00:02:25,240
Good luck and I'll see you in the next video.
