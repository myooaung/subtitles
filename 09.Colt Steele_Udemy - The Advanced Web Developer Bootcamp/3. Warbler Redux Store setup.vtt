WEBVTT
1
00:00:00.120 --> 00:00:05.880
So it just finish off by creating reducers action types and now it's time to create our store.

2
00:00:06.030 --> 00:00:11.160
So remember we have to create our store by passing and our producer can't co-create store without passing

3
00:00:11.160 --> 00:00:12.030
in a function.

4
00:00:14.010 --> 00:00:22.860
So first we're going to import our reproducer from Flash producers seem as producers slash index.

5
00:00:22.860 --> 00:00:23.860
You've seen that before.

6
00:00:26.130 --> 00:00:33.120
We're also going to import a few things from the Reebok's library create store apply middleware and

7
00:00:33.210 --> 00:00:39.690
compose and these are from redox.

8
00:00:40.740 --> 00:00:43.060
Now composed going to allow us to combine functions together.

9
00:00:43.080 --> 00:00:47.220
This is going to be useful for the second parameter of create store and apply middleware is going to

10
00:00:47.220 --> 00:00:49.660
be very useful for any kind of middleware that we want.

11
00:00:49.830 --> 00:00:55.610
Specifically we want to think middleware this is going to come in from redux stock.

12
00:00:55.620 --> 00:01:01.170
This will allow us to delay the evaluation of some expression and it's essential for working with asynchronous

13
00:01:01.170 --> 00:01:03.620
code in redux.

14
00:01:03.660 --> 00:01:07.850
There are other libraries that do this but I think dunk is the easiest to get up and running with.

15
00:01:07.880 --> 00:01:15.020
So we're now going to export a function we can call this configure store and it's going to make us more

16
00:01:16.230 --> 00:01:21.500
which is the result of the create store function that we brought in from redox first parameter is always

17
00:01:21.510 --> 00:01:26.250
some kind of function or reduce or let's pass and introduce her as a second parameter.

18
00:01:26.250 --> 00:01:31.740
We're going to enhance the store will Passons of Middler what we're going to compose two pieces of middleware

19
00:01:31.740 --> 00:01:36.910
together we're going to first passen apply middleware and hasn't done.

20
00:01:37.440 --> 00:01:42.880
We're also going to pass in the ability to debug using the redux dev tools.

21
00:01:46.280 --> 00:01:50.810
So it's going can look like this is usually some code that no copy and or link to in the section notes

22
00:01:51.030 --> 00:01:55.200
or type and window that dev tools that extension you can see why we don't want to copy and paste is

23
00:01:55.230 --> 00:01:57.650
I'm already making typos if that exists.

24
00:01:57.710 --> 00:02:02.660
We'll go with windowed dev tools that extension and call that otherwise we'll just make a function and

25
00:02:02.660 --> 00:02:05.830
call that.

26
00:02:05.880 --> 00:02:08.880
So once again this is code OKB in Arlington to the section notes.

27
00:02:08.910 --> 00:02:13.830
This is going to be really useful for debugging or application in the redox of tools.

28
00:02:13.830 --> 00:02:16.410
Finally let's just return that story.

29
00:02:17.100 --> 00:02:22.410
So he simply brought in our reproducer brought in some redox tools and middleware and we brought in

30
00:02:22.490 --> 00:02:23.360
we think Middler

31
00:02:29.670 --> 00:02:33.320
So what we configured our store we're in pretty good shape from a redux standpoint.

32
00:02:33.650 --> 00:02:34.200
We're not going away.

33
00:02:34.270 --> 00:02:37.160
Is there any kind of actions are getting to producers.

34
00:02:37.170 --> 00:02:42.300
We're just going to do some setups that we can actually create a store and pass that in to our objects.

35
00:02:42.360 --> 00:02:47.750
So let's head over to our Actually yes yes will do here is take out some of that logo and CSSA stuff

36
00:02:47.810 --> 00:02:48.330
muzhik out.

37
00:02:48.330 --> 00:02:54.060
Actually most of this each Tiano here what we're really going to do is first import a couple of things

38
00:02:54.480 --> 00:03:00.650
let's import the provider component that comes from re-act read us.

39
00:03:00.790 --> 00:03:04.740
We need a provider component so we can map our entire application using the redux store.

40
00:03:04.870 --> 00:03:12.820
We'll also import the configure store function and that came from that flash store.

41
00:03:13.020 --> 00:03:14.530
So what are we going to do with this provider.

42
00:03:14.650 --> 00:03:17.790
Well let's make sure that we first create the store.

43
00:03:18.090 --> 00:03:25.700
So we'll call configure store and we'll then inside of our application pass in that story.

44
00:03:26.460 --> 00:03:31.230
So we can actually this a stateless functional component and we'll create a variable called app which

45
00:03:31.230 --> 00:03:36.240
is going to be a function and you will return our provider component and that provider component always

46
00:03:36.240 --> 00:03:38.210
accepts a prop called store

47
00:03:41.320 --> 00:03:45.050
so that in a problem store and its value is the store that we created online 5s.

48
00:03:46.430 --> 00:03:51.230
So we'll just make a diff as a bit of a placeholder before we put in some additional components.

49
00:03:51.260 --> 00:03:53.500
So the next thing you want to configure is the reactor.

50
00:03:53.630 --> 00:03:57.270
So let's import browser router and we'll Elyas that as router.

51
00:03:57.320 --> 00:04:00.300
See this commonly done from reata router.

52
00:04:02.690 --> 00:04:05.510
We're going to have the router so we can navigate from page to page.

53
00:04:06.730 --> 00:04:09.970
And have a really nice client side router.

54
00:04:10.010 --> 00:04:16.380
So what do we do with the provider inside the provider we're going to pass in our router the router

55
00:04:16.380 --> 00:04:19.580
component is going to be the provider component.

56
00:04:19.610 --> 00:04:24.790
So if you will please a div and inside of this div well place in the string Hello world.

57
00:04:24.830 --> 00:04:26.370
We'll keep it real simple.

58
00:04:26.450 --> 00:04:29.410
We have the provider of the router and a simple device that says Hello world.

59
00:04:29.740 --> 00:04:31.130
Let's try to run our application.

60
00:04:33.090 --> 00:04:37.630
And I see Minutes errors and it's a great time to debug the.

61
00:04:37.810 --> 00:04:39.280
So we go to lose 3000.

62
00:04:39.360 --> 00:04:41.000
We'll see if we get.

63
00:04:41.150 --> 00:04:44.510
And it looks like we're getting an airfield to compile cannot resolve dot slash

64
00:04:47.390 --> 00:04:49.300
So let's go back toward anextra Yes.

65
00:04:49.460 --> 00:04:53.130
And this refers to the application that starts our entire application.

66
00:04:53.420 --> 00:05:00.350
And that's because you can't find app remember replace the app inside of data flash containers slash

67
00:05:00.440 --> 00:05:01.630
app.

68
00:05:01.670 --> 00:05:06.030
It would take it like this right now we're going to get another error cannot resolve react in our component's

69
00:05:06.030 --> 00:05:06.970
file.

70
00:05:07.500 --> 00:05:12.700
Let's make sure that we've actually NPM installed to make sure that we include react and react on.

71
00:05:12.750 --> 00:05:19.800
We have all these other modules but we just forgot to install react and react on OSes to make sure that

72
00:05:19.850 --> 00:05:21.900
Muncey's create re-adapt you NPM install.

73
00:05:21.930 --> 00:05:23.550
I get too excited to build this.

74
00:05:23.580 --> 00:05:25.230
I forgot to install.

75
00:05:25.230 --> 00:05:25.630
That's OK.

76
00:05:25.630 --> 00:05:27.260
It just happens.

77
00:05:27.300 --> 00:05:29.070
So let's start again and we'll see what we have.

78
00:05:29.220 --> 00:05:29.960
And it looks like we are.

79
00:05:29.970 --> 00:05:30.680
Hello world.

80
00:05:30.690 --> 00:05:31.820
Great.

81
00:05:32.420 --> 00:05:35.520
Well I also want to take a look at these Roxton of tools.

82
00:05:35.820 --> 00:05:38.460
So it looks like be configured or stored correctly.

83
00:05:38.460 --> 00:05:40.800
We have a current user with this authenticated.

84
00:05:40.800 --> 00:05:45.250
We also have an errors key as well with a message of no.

85
00:05:45.380 --> 00:05:50.090
We're going to using these tools quite a bit to see changes to our state and make sure that we're dispatching

86
00:05:50.120 --> 00:05:51.630
actions correctly.

87
00:05:52.190 --> 00:05:57.110
So that was all configured where we created and configured our store.

88
00:05:57.260 --> 00:06:03.320
So that happened inside of next that yes where we configured store and passed in that window deductables

89
00:06:03.400 --> 00:06:04.670
extension.

90
00:06:04.760 --> 00:06:07.370
You also have to make sure that you install that Chrome extension.

91
00:06:07.370 --> 00:06:11.220
You can use it in Firefox as well I believe but I'm just using Chrome right now.

92
00:06:11.540 --> 00:06:16.220
So we've set up a very small actually yes connects to our read store.

93
00:06:16.220 --> 00:06:17.860
It uses the re-act router.

94
00:06:18.060 --> 00:06:23.480
Now we're going to start including some components that allow for routing as well as a simple app or.
