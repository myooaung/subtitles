WEBVTT
1
00:00:00.490 --> 00:00:04.080
In order to build their final project the first thing we need to do is understand a little bit more

2
00:00:04.080 --> 00:00:06.950
about authentication.

3
00:00:06.990 --> 00:00:14.100
Our objectives are to define one way password hashing and to find Jason Webb tokens.

4
00:00:14.100 --> 00:00:20.310
So what is one way hashing one way or hashing is converting data into a fixed length hash string and

5
00:00:20.310 --> 00:00:23.700
you can recreate the hash if you know the original data.

6
00:00:24.030 --> 00:00:26.910
In other words the hashing is one way.

7
00:00:26.970 --> 00:00:31.830
Once you have the hash you can't go back and figure out what the original data was.

8
00:00:31.920 --> 00:00:37.620
And this is very useful for saving passwords on a server because one of the first rules of saving passwords

9
00:00:37.620 --> 00:00:45.090
is that you never ever want to save the actual password if my password on a site were password 1 2 3.

10
00:00:45.150 --> 00:00:48.560
The site should never know that my password was password 1 2 3.

11
00:00:48.600 --> 00:00:54.020
The data that the site saves should just be the hash and nothing else.

12
00:00:54.030 --> 00:01:01.560
So here's an example of hashing the password password the string password will be given to a one way

13
00:01:01.560 --> 00:01:08.190
hash library called decrypts Beecroft will generate a hash that looks something like this.

14
00:01:08.190 --> 00:01:10.920
Now that definitely doesn't look anything like the word password.

15
00:01:10.960 --> 00:01:13.980
But how does that help us with signing and how does that help us with authentication

16
00:01:16.610 --> 00:01:17.090
well.

17
00:01:17.160 --> 00:01:20.370
Once you've saved that password as a hash.

18
00:01:20.460 --> 00:01:23.240
The process of signing in goes something like this.

19
00:01:23.400 --> 00:01:29.920
You have that that hash saved in your database and then a user comes along and wants to sign in.

20
00:01:29.940 --> 00:01:35.110
So they provide you with their password the password again goes through be corrupt.

21
00:01:35.430 --> 00:01:38.300
And again generates the hash.

22
00:01:38.310 --> 00:01:44.190
Now in order to verify that the person is authenticated correctly you have to compare those two hashes.

23
00:01:44.190 --> 00:01:49.200
The one you have saved in the database and the one that the user just generated with their current password.

24
00:01:49.320 --> 00:01:55.090
And if those two hashes match up exactly then that user can log in.

25
00:01:55.620 --> 00:02:00.120
Of course the trouble with passwords is that users don't want to enter passwords on every page.

26
00:02:00.120 --> 00:02:05.240
So there needs to be a more user friendly workaround to prove that you've logged in in the past

27
00:02:08.530 --> 00:02:10.810
to help us prove the logged in in the past.

28
00:02:10.810 --> 00:02:16.580
We use a Jason web token or JWT or often called Jott.

29
00:02:16.610 --> 00:02:23.210
This is the web standard for storing sign data so we can use Giat as proof that you've logged in before

30
00:02:24.200 --> 00:02:26.630
and a job consists of three pieces.

31
00:02:26.630 --> 00:02:34.460
The first part of the Giat the part from here to the period is the letter the next part is the payload.

32
00:02:34.460 --> 00:02:39.150
And finally the signature and the signature is used to make sure that the header in the payload has

33
00:02:39.150 --> 00:02:40.610
not been tampered with.

34
00:02:40.760 --> 00:02:47.480
Both the header the payload and then also a secret key are inputs to generate the signature.

35
00:02:47.480 --> 00:02:53.240
Now the server is the one that keeps track of that secret key and only it can know about the secret.

36
00:02:53.240 --> 00:03:00.770
If a hacker were to get access to that key then the hacker could also make fake dots with whatever header

37
00:03:00.770 --> 00:03:02.260
and payload that they want.

38
00:03:02.570 --> 00:03:09.230
So the thing that keeps this secure is the fact that this signature generation can only be done by the

39
00:03:09.230 --> 00:03:10.220
server.

40
00:03:10.220 --> 00:03:13.090
It can't be done by the client or by anyone else.

41
00:03:14.580 --> 00:03:17.210
So how does the server use this for authentication.

42
00:03:17.580 --> 00:03:23.480
Well the server verifies the payload in the header to make sure it hasn't been tampered with.

43
00:03:23.630 --> 00:03:29.360
And if it hasn't it looks in the payload to see that it has something like a user ID stored.

44
00:03:29.430 --> 00:03:35.950
And if the user id is there that verifies that you've logged in in the past let's inspect jots more

45
00:03:35.950 --> 00:03:39.850
using this Web site JWT Dyo.

46
00:03:40.120 --> 00:03:46.650
So this site gives you a nice interactive way of generating jots and verifying them.

47
00:03:46.660 --> 00:03:51.240
So let's start by making our secret reacts.

48
00:03:51.340 --> 00:03:54.790
So this is the secret that only the server can know about.

49
00:03:54.910 --> 00:04:07.680
And if I changed something about this payload let's say I'll make it user ID and 8 8 8 4 4 4.

50
00:04:07.910 --> 00:04:09.100
So that's my user ID.

51
00:04:09.110 --> 00:04:11.720
And this is the job that gets generated.

52
00:04:11.930 --> 00:04:17.810
Now when the user signs in or give this job back to the client every authenticated request after that

53
00:04:18.110 --> 00:04:21.930
the client needs to send me the job back if I'm the server.

54
00:04:22.190 --> 00:04:27.500
As long as the client sends a jot for which that signature matches the signature that I generate on

55
00:04:27.500 --> 00:04:31.500
the server then you are authenticated.

56
00:04:33.060 --> 00:04:40.140
And once I look in this payload I can see what the user ID has to figure out which user is authenticated

57
00:04:40.920 --> 00:04:42.010
just to test it out.

58
00:04:42.150 --> 00:04:46.020
Let's try changing something about the signature and seeing if it fails.

59
00:04:47.340 --> 00:04:54.090
So as you can see my signature is now different which tells my server hey this token is not valid

60
00:04:58.770 --> 00:05:01.350
if I also change something about the header in the payload.

61
00:05:01.350 --> 00:05:02.820
The signature will then change

62
00:05:06.350 --> 00:05:10.880
since both the header and the payload are inputs to generate the signature.

63
00:05:10.880 --> 00:05:15.920
This will result in the server trying to generate a different signature which will lead to an invalid

64
00:05:15.920 --> 00:05:17.510
signature problem.

65
00:05:17.510 --> 00:05:22.550
So as you can see either changing the signature that I-PASS or changing the header in the payload that

66
00:05:22.550 --> 00:05:24.740
I pass up will result in an error.

67
00:05:24.770 --> 00:05:30.720
You can't change the job only the server has the ability to generate jots.

68
00:05:30.810 --> 00:05:35.350
Lastly it's important to know how the client should send the Giat up to the server.

69
00:05:35.850 --> 00:05:41.340
Well the standard way of doing it is to include the Giat in the authorization header and the first part

70
00:05:41.370 --> 00:05:45.890
of the authorization header seen here is typically bear.

71
00:05:45.960 --> 00:05:50.400
So we don't need to go into why that is but this is the type portion of authorization.

72
00:05:50.490 --> 00:05:56.930
And usually when you're using jati you'd put bear First you put a space and then you put your JWT that

73
00:05:56.930 --> 00:05:58.470
you got back in the server.

74
00:05:58.470 --> 00:06:05.880
So this was our JWT that we just saw with two periods a head or a payload and a signature.

75
00:06:05.910 --> 00:06:06.810
That's it for this one.

76
00:06:06.810 --> 00:06:09.990
Next up we're going to build some of this in no Jap's.
