WEBVTT
1
00:00:00.300 --> 00:00:02.430
Welcome back to the last video.

2
00:00:02.490 --> 00:00:04.940
We started working on a histogram.

3
00:00:04.980 --> 00:00:09.350
Let's jump back into it and get our range input working along the way.

4
00:00:09.360 --> 00:00:13.260
We'll dig into the threshold and Tick's methods a bit more.

5
00:00:13.330 --> 00:00:17.940
Here are a couple of links to the current state of the project.

6
00:00:17.970 --> 00:00:22.950
You may remember that last time we created an X Stael to help us make our histogram.

7
00:00:22.950 --> 00:00:29.040
In doing so the number of bins increased because we passed X scale ticks into the threshold method of

8
00:00:29.040 --> 00:00:31.150
our histogram generator.

9
00:00:31.170 --> 00:00:38.720
Let's take a deeper look at the thresholds and ticks methods before adding any new features to our visualization.

10
00:00:38.750 --> 00:00:42.090
The thresholds method can take in different types of inputs.

11
00:00:42.270 --> 00:00:44.900
If you know exactly how you want to separate your data.

12
00:00:44.970 --> 00:00:51.700
One option is to pass in an array of values that will be used to set the end points for each bin.

13
00:00:51.720 --> 00:00:54.070
That's what we've done with scaled up ticks.

14
00:00:54.360 --> 00:00:58.490
But you can also pass in any other array of values to create the thresholds.

15
00:00:58.800 --> 00:01:06.170
Here's an example of how it would look with thresholds in every 90000 versus if you don't know how you

16
00:01:06.170 --> 00:01:07.850
want to put your data into bins.

17
00:01:07.850 --> 00:01:11.650
But you know that you want more or fewer bids than the default.

18
00:01:11.660 --> 00:01:18.310
You can also pass a single number into thresholds if you do this D-3 will try to create uniformly sized

19
00:01:18.310 --> 00:01:24.610
bins based on the number you've provided the number of bins it makes will be roughly the same as the

20
00:01:24.610 --> 00:01:26.000
value you pass in.

21
00:01:26.230 --> 00:01:32.600
But there's no guarantee you'll get exactly that and any with our current data set for example if I

22
00:01:32.680 --> 00:01:37.100
and the number five I'll get exactly 5 bins.

23
00:01:37.260 --> 00:01:41.600
But if I pass an 8 I'll still only get 5 bins.

24
00:01:41.630 --> 00:01:48.690
Here's a breakdown of how many bins I'll get for different values passed into the thresholds method.

25
00:01:48.710 --> 00:01:54.380
Basically when you pass a number the thresholds D-3 will do its best to accommodate you but there's

26
00:01:54.380 --> 00:01:57.900
no guarantee you'll get the exact number of thresholds you've requested.

27
00:01:58.250 --> 00:02:05.360
If you need an exact count use an array and not a single number that ticks method on a scale behaves

28
00:02:05.360 --> 00:02:10.880
in a similar way in that you can pass a number to specify how many values from the scales domain you'd

29
00:02:10.880 --> 00:02:17.540
like to receive as intermediate values D-3 will do its best to accommodate you but you're not guaranteed

30
00:02:17.540 --> 00:02:21.910
to get the exact number of values you've specified per example.

31
00:02:21.910 --> 00:02:28.420
You can see that when I call ticks on the scale and passing 5 I get an array with six elements but the

32
00:02:28.420 --> 00:02:29.130
same is true.

33
00:02:29.140 --> 00:02:37.600
If I pass an 8 OK let's move on to the next important piece of functionality being able to adjust the

34
00:02:37.600 --> 00:02:46.920
year to start in our age TNL I'll create a tad for the range input and give it a step size of 1 in my

35
00:02:46.920 --> 00:02:48.350
javascript file.

36
00:02:48.390 --> 00:02:52.960
I'll first remove this bar with variable since I no longer need it.

37
00:02:52.970 --> 00:02:57.920
Next I'll calculate the maximum year using D-3 x.

38
00:02:57.940 --> 00:03:06.520
After that I'll then use the min and max year from the birth data to set a min max an initial value

39
00:03:06.850 --> 00:03:09.660
for our range input.

40
00:03:09.670 --> 00:03:13.890
Now let's add an event listener to our input on input events.

41
00:03:13.900 --> 00:03:17.780
I want to grab the new year and then update the histogram accordingly.

42
00:03:18.510 --> 00:03:23.920
But since the number of bins I'll have may change on me to use the general update pattern to update

43
00:03:23.920 --> 00:03:29.170
the graph first I'll filter my data set by the new year.

44
00:03:29.310 --> 00:03:36.070
Then I need to update the domain of my X scale based on this new data once I've updated my scale.

45
00:03:36.070 --> 00:03:44.100
I can update the histogram generator and in turn I can then update the bins once I've done that I can

46
00:03:44.100 --> 00:03:47.100
then update the widescale next.

47
00:03:47.210 --> 00:03:54.580
I can grab the update selection and begin to update the Grath Let's review the general update pattern.

48
00:03:55.580 --> 00:04:03.940
First we can remove any elements in the exit selection next for any Enter nodes will need to append

49
00:04:03.940 --> 00:04:10.750
a new group into each new group will need to append a rectangle in the text element because I need to

50
00:04:10.750 --> 00:04:11.930
append twice.

51
00:04:12.070 --> 00:04:17.630
I'm storing my entire selection in a variable called G.

52
00:04:17.720 --> 00:04:24.140
Finally we need to merge our entire selection with our update selection and update the rectangle and

53
00:04:24.140 --> 00:04:30.510
the text for each bar the attributes that we're updating will be the same as the ones when we initially

54
00:04:30.510 --> 00:04:32.330
created the histogram.

55
00:04:32.340 --> 00:04:39.030
In fact there is a fair amount of code duplication here in the exercises you'll learn about one pattern

56
00:04:39.030 --> 00:04:42.310
you can use to clean up this code.

57
00:04:42.410 --> 00:04:49.430
If we save our file and refresh the page we can see that the range input works well almost.

58
00:04:49.620 --> 00:04:54.970
There is one small bug when your throw is an error to the console because the last bar has a negative

59
00:04:54.970 --> 00:04:56.120
wait.

60
00:04:56.170 --> 00:05:01.630
This is happening because the last threshold is very close to the maximum value of the dataset for that

61
00:05:01.630 --> 00:05:02.270
year.

62
00:05:03.500 --> 00:05:07.050
Also the text label for this last bar is getting cut off.

63
00:05:08.290 --> 00:05:11.800
There are a few ways to fix this problem for now.

64
00:05:11.950 --> 00:05:18.010
I'll give the SPG a little bit of padding in the x direction so that the text labels don't get cropped.

65
00:05:18.010 --> 00:05:20.410
Also take a little more care with the width.

66
00:05:20.830 --> 00:05:29.660
If the width calculate inside of this all back is negative or return 0 let's save and refresh as you

67
00:05:29.660 --> 00:05:33.590
can see this fixes the error.

68
00:05:33.600 --> 00:05:36.780
This is as far as will go when it comes to histograms.

69
00:05:36.930 --> 00:05:40.560
Try to complete the histogram exercise when you're finished.

70
00:05:40.590 --> 00:05:44.640
We'll move on and use D-3 to create another common visualization.

71
00:05:44.820 --> 00:05:45.610
A pie chart.
