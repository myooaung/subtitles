1
00:00:01,010 --> 00:00:08,090
Welcome back in the previous video we learned about the basics of force directed graphs using SVGA.

2
00:00:08,240 --> 00:00:13,440
Now that we've got a handle on the basics it's time to add some links to our graphs.

3
00:00:13,450 --> 00:00:16,600
Here are some links to our code where we left it off.

4
00:00:16,600 --> 00:00:20,140
I've added a few lines of code compared to the end of the last video.

5
00:00:20,380 --> 00:00:25,360
Here you can see I have an array of objects stored in a variable called links.

6
00:00:25,360 --> 00:00:31,410
Each link object has a source and a target D-3 requires links to have both these keys.

7
00:00:31,420 --> 00:00:36,420
In order to incorporate them into a force directed graph.

8
00:00:36,510 --> 00:00:42,840
When we created our for simulation in the last video we only passed in our nodes not our links.

9
00:00:42,930 --> 00:00:45,510
So how do links fit into the picture.

10
00:00:45,540 --> 00:00:50,070
It turns out that if you want to add links to your nodes and have them influence the behavior of the

11
00:00:50,070 --> 00:00:57,790
nodes you need to add another force D-3 provides a way to add link forces with the slinky method.

12
00:00:57,930 --> 00:01:03,540
You can pass an array of links into the method directly or pass them in later by calling the links method

13
00:01:03,540 --> 00:01:06,680
on the forest and passing in your links.

14
00:01:06,680 --> 00:01:08,140
Let's try this out.

15
00:01:08,180 --> 00:01:13,470
I allowed a third force to my simulation code lengths and passing my links to the source link method

16
00:01:14,780 --> 00:01:17,070
while that seemed to make things worse.

17
00:01:17,360 --> 00:01:18,650
If I happened to the con..

18
00:01:18,650 --> 00:01:24,650
I can see there's an error missing read in case it's not clear what this error is referring to.

19
00:01:24,650 --> 00:01:30,260
In order for the simulation to apply the proper force between the two connected nodes D-3 needs to be

20
00:01:30,260 --> 00:01:33,790
able to translate between the link in the source and target nodes.

21
00:01:34,160 --> 00:01:39,140
By default it assumes that the values for source and target are indices in the nodes array.

22
00:01:39,290 --> 00:01:42,530
But in our current example our values aren't indices.

23
00:01:42,690 --> 00:01:44,220
Are the colors of each node.

24
00:01:46,030 --> 00:01:51,550
One way to fix this is to change our lengths array so that the values for each object are indices.

25
00:01:51,550 --> 00:01:57,550
But another approach is to use the ID method on the force which lets you specify how D-3 should find

26
00:01:57,550 --> 00:02:00,490
nodes based on the source and target values.

27
00:02:00,670 --> 00:02:08,940
In this case we could use the ID method and specify the D-3 should find nodes based on the color property.

28
00:02:09,030 --> 00:02:12,410
The strength of the forth between links is determined by two values.

29
00:02:12,540 --> 00:02:17,540
Distance and strength distance determines how long the link was.

30
00:02:18,030 --> 00:02:23,860
Interactions with other forces however can cause the links actual distance to vary from its ideal length.

31
00:02:23,880 --> 00:02:29,430
In this case the strength attribute is proportional to the difference between the lengths actual distance

32
00:02:29,550 --> 00:02:31,710
and its desired distance.

33
00:02:31,710 --> 00:02:33,550
This is similar to a spring.

34
00:02:33,600 --> 00:02:39,840
The more you stretch or compress the link the more it's going to want to return to its original length.

35
00:02:39,840 --> 00:02:42,500
Both of these parameters have default values.

36
00:02:42,540 --> 00:02:48,640
For now let's change the default distance to 300 as you can see.

37
00:02:48,790 --> 00:02:50,820
Now the nodes are much more spread out.

38
00:02:52,980 --> 00:02:57,810
The link forces are present now but it would be nice if we could also see the links in our visualization

39
00:02:58,530 --> 00:02:59,240
to do this.

40
00:02:59,250 --> 00:03:02,870
We'll need to add some line segments for each of our links.

41
00:03:02,930 --> 00:03:08,090
I'll create a selection very similar to our node selection and I'll put it above my notes selections

42
00:03:08,090 --> 00:03:10,270
of the links get drawn first.

43
00:03:10,580 --> 00:03:16,590
After appending my lines I'll set the stroke to black in the stroke with one.

44
00:03:16,750 --> 00:03:19,940
When I refresh the page though everything looks the same as before.

45
00:03:20,860 --> 00:03:29,610
My lines are there but I need to use the simulation to set the X-1 why 1 x 2 and why 2 attributes dynamically.

46
00:03:29,620 --> 00:03:30,870
How can I do this.

47
00:03:31,300 --> 00:03:34,810
Well if I grab one of the lines and look at the data join to it.

48
00:03:34,820 --> 00:03:41,080
D-3 has done something helpful to replace the original string values of source and target with all of

49
00:03:41,080 --> 00:03:45,250
the know data including the data added by the simulation.

50
00:03:45,250 --> 00:03:49,600
This means that I can use the positions of the source and target nodes to tell my link where it should

51
00:03:49,600 --> 00:03:51,880
go to do this.

52
00:03:51,880 --> 00:03:57,030
I'll hop into the callback from my tick handler and for each line in the link selection update the X1

53
00:03:57,120 --> 00:04:00,050
y one X to Y two properties.

54
00:04:00,870 --> 00:04:10,280
I'll map x 1 and y one to the coordinates of the source and x to and y to the coordinates of the target.

55
00:04:10,330 --> 00:04:12,450
One last trick before we move on.

56
00:04:12,790 --> 00:04:17,800
Since we see now that links have access to the properties on the source and the target node we can use

57
00:04:17,800 --> 00:04:20,380
these properties when setting up the linked force.

58
00:04:20,500 --> 00:04:26,200
For example in the distance method I could pass in a callback where the distance between two nodes should

59
00:04:26,200 --> 00:04:30,260
be based on their sizes with this expression.

60
00:04:30,260 --> 00:04:38,130
Large nodes have a greater repulsive force when connected by links and smaller nodes do OK.

61
00:04:38,190 --> 00:04:40,900
That's all for now in the next video.

62
00:04:40,950 --> 00:04:46,320
We'll throw another wrench into these simulations by making the nodes interactive so that we can drag

63
00:04:46,320 --> 00:04:48,700
them around the SPG area.

64
00:04:48,720 --> 00:04:50,570
I'll see you in the next video.
