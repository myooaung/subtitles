WEBVTT
1
00:00:00.090 --> 00:00:03.200
So we previously left off building our entire folder structure.

2
00:00:03.390 --> 00:00:07.980
And what I want to start doing now is thinking about configuring our store with us.

3
00:00:08.010 --> 00:00:13.560
We want to create the store and we want to pass that store to our component using the provider component

4
00:00:13.860 --> 00:00:15.810
and configure the router here as well.

5
00:00:15.810 --> 00:00:20.480
But before we start working on the presentation let's think about some of the redux logic that we need.

6
00:00:20.490 --> 00:00:23.930
Let's start in our reducers and let's make a file called indexed.

7
00:00:23.970 --> 00:00:28.010
Yes this is going to be the root reducer that we head to Florida.

8
00:00:28.260 --> 00:00:37.730
So let's import combined reducers from redux and here let's bring in some reducers that we're going

9
00:00:37.730 --> 00:00:38.170
to make.

10
00:00:38.210 --> 00:00:39.730
Well what reducers do we need.

11
00:00:39.950 --> 00:00:43.200
Let's go start with a reducer called errors.

12
00:00:43.310 --> 00:00:50.510
Yes this is going to be a very simple reducer that's going to display errors to the user inside of this

13
00:00:50.510 --> 00:00:56.140
reducer where we're going to first need to create some action types.

14
00:00:56.440 --> 00:00:59.030
So let's think about all the action types that we need.

15
00:00:59.030 --> 00:01:03.200
This application should be able to add an error and remove an error.

16
00:01:03.200 --> 00:01:06.870
These will simply just be some error messages that happen if things go wrong.

17
00:01:06.890 --> 00:01:08.310
We fail to create a message.

18
00:01:08.500 --> 00:01:12.450
So an invalid username and password is whatever it may be.

19
00:01:12.560 --> 00:01:13.820
These are some generic errors.

20
00:01:14.000 --> 00:01:19.940
So let's exploit a constant called an error and that's just going to be the string adder.

21
00:01:20.050 --> 00:01:24.720
We're going to do the same thing with remove our command just like the next occurrence and we'll call

22
00:01:24.720 --> 00:01:31.030
that remove our what other kinds of action types are going to have what we think about what our application

23
00:01:31.030 --> 00:01:31.660
does.

24
00:01:31.870 --> 00:01:34.340
It's going to load a bunch of messages.

25
00:01:34.690 --> 00:01:39.780
And also we should be able to remove messages we're not too worried about that yet.

26
00:01:40.060 --> 00:01:44.710
But there's one more action type that we want to make and that's going to be called said current user

27
00:01:45.650 --> 00:01:49.470
and current user is the idea of the user who is logged in currently.

28
00:01:50.220 --> 00:01:52.700
And that's something that we're going to keep in the story.

29
00:01:53.580 --> 00:01:57.420
We're going to know in the redux or who the user is that's logged in and this will help us navigate

30
00:01:57.420 --> 00:02:00.490
to certain pages and sure that we have the correct user and so on.

31
00:02:00.690 --> 00:02:05.360
We'll call this set underscore current user.

32
00:02:05.690 --> 00:02:10.280
So these action types look good for now but these action types are going to be used in two different

33
00:02:10.280 --> 00:02:11.170
reducers.

34
00:02:11.210 --> 00:02:13.120
First they're going to be used in our errors.

35
00:02:13.370 --> 00:02:15.260
So let's start here.

36
00:02:15.260 --> 00:02:19.670
What do we need instead of this reducer Let's first import those action tapes that we made.

37
00:02:19.970 --> 00:02:27.960
Sobering and add error as well as remove or you worried about what's going to get us to this reducer.

38
00:02:27.990 --> 00:02:29.630
We're not going to worry about the actions yet.

39
00:02:29.720 --> 00:02:35.910
But let's go bring in and these action tapes same thing is action tapes slash index like we saw before.

40
00:02:36.230 --> 00:02:42.700
So we're going to do is X for a default function this will have some kind of state which we can initialize

41
00:02:43.530 --> 00:02:47.950
as an object with a message and a key with a key a message and a value of no we'll assume there's no

42
00:02:47.950 --> 00:02:50.470
error message to start inside of here.

43
00:02:50.470 --> 00:02:52.880
We're going to switch based off of the actual type.

44
00:02:53.020 --> 00:02:57.160
This is the pattern that you see very commonly in your reducers you could use if else statements but

45
00:02:57.160 --> 00:03:00.070
you'll see a switch case statements quite a bit.

46
00:03:00.110 --> 00:03:07.490
So we're going to say if it is the type of add error we'll return whatever our previous date was spread

47
00:03:07.490 --> 00:03:13.460
out that object along with the key of message and a value of action that error inside of here.

48
00:03:13.470 --> 00:03:17.590
We're going to get some kind of new error and we'll put that in to our state.

49
00:03:18.080 --> 00:03:24.420
In the case of remover we're simply going to return a new object and spread outstay.

50
00:03:24.680 --> 00:03:28.090
But message is now going to go back to being all.

51
00:03:28.210 --> 00:03:33.160
And if it's on any of these it's the first redux dispatching action we're just going to return the state

52
00:03:33.160 --> 00:03:34.190
by default.

53
00:03:34.500 --> 00:03:36.830
Have very simple errors reducer right now.

54
00:03:37.000 --> 00:03:41.980
All we're trying to do if we need to add an error or remove an error is a really great way to have a

55
00:03:41.980 --> 00:03:44.740
generic error handler for all different kinds of errors.

56
00:03:44.740 --> 00:03:48.580
Now we just add and remove as we work in different components and so on.

57
00:03:49.000 --> 00:03:51.180
So it's all we're really going to do right here.

58
00:03:52.090 --> 00:03:55.000
Well we also want start thinking about is a current user.

59
00:03:55.360 --> 00:04:02.860
So instead of a reducers we're going to make a new file called Current User dodginess and we're first

60
00:04:02.870 --> 00:04:12.510
going to import our action types of set current user and we'll bring that in from action types and once

61
00:04:12.510 --> 00:04:15.640
again we're going to create some kind of default state.

62
00:04:15.750 --> 00:04:19.300
Previously we did that as a default parameter over here.

63
00:04:19.590 --> 00:04:23.810
But if our object gets a little bit bigger it's sometimes easier to isolate that into a separate variable.

64
00:04:23.970 --> 00:04:28.770
So I make a constant called default state very commonly All C constants all in caps so don't be too

65
00:04:28.770 --> 00:04:29.100
alarmed.

66
00:04:29.120 --> 00:04:31.320
That's just convention.

67
00:04:31.380 --> 00:04:33.960
We're going to make a couple of properties and cited defaults.

68
00:04:34.410 --> 00:04:39.450
We're going to do a boolean called is authenticated that will default to false and another property

69
00:04:39.450 --> 00:04:43.190
called user which is going to start as an empty object.

70
00:04:43.210 --> 00:04:47.750
This will eventually be all the user information when they're logged in.

71
00:04:48.020 --> 00:04:52.670
And this will hopefully be true when the user has logged.

72
00:04:53.140 --> 00:04:58.840
So we're going to use this reducer so that when the user logs in we can easily know who that user is

73
00:04:58.900 --> 00:05:02.170
and B that they've logged in when we log out.

74
00:05:02.260 --> 00:05:06.910
We're simply going to change the user back to an empty object and it is authenticated back to false.

75
00:05:06.910 --> 00:05:11.950
So we want to do here is actually just handle one type which is that set current user first let's export

76
00:05:12.010 --> 00:05:17.230
a default function we'll set that state to be the default state using default parameters and an actual

77
00:05:18.330 --> 00:05:22.350
And here where once again we're going to switch on the action type here.

78
00:05:22.390 --> 00:05:29.390
We'll look for a case of set current user and when that happens we're going to return a new object.

79
00:05:29.390 --> 00:05:31.240
How are we going to change our state.

80
00:05:31.250 --> 00:05:35.810
This one is going to be a little bit tricky in javascript there isn't a very easy way to figure out

81
00:05:35.870 --> 00:05:39.950
from a boolean standpoint if this object doesn't have any keys.

82
00:05:41.580 --> 00:05:45.870
So what we could write is something like it's authenticated is the result.

83
00:05:46.050 --> 00:05:47.770
Let's first make sure we spell it correctly.

84
00:05:48.240 --> 00:05:55.030
That's going to be object Docky is action user data length greater than zero.

85
00:05:56.510 --> 00:05:59.130
So this will turn on its own is a boolean.

86
00:05:59.660 --> 00:06:05.150
If the user is authenticated there's more than one key inside of user which means that length is going

87
00:06:05.150 --> 00:06:06.610
to be greater than zero.

88
00:06:06.890 --> 00:06:10.670
You'll also see some fancier programming where people do not not.

89
00:06:10.920 --> 00:06:20.460
So as I do and that's going to turn an empty object into false or if they're Archy's true.

90
00:06:21.300 --> 00:06:26.790
So we're simply saying is this length zero because we're number zero is falsie and all that these two

91
00:06:26.790 --> 00:06:29.120
nots are doing is converting something into a boolean.

92
00:06:29.180 --> 00:06:32.080
It's the same as using the boolean constructor right here.

93
00:06:32.580 --> 00:06:37.620
So we can read it that way or the other way and you will actually see code like this sometimes.

94
00:06:37.620 --> 00:06:38.370
True or false.

95
00:06:38.370 --> 00:06:41.150
Are there keys or no keys in this object.

96
00:06:41.160 --> 00:06:45.300
The second thing will do is simply make a property called user which is going to be action that user

97
00:06:47.240 --> 00:06:52.010
We're going to get an entire user object inside of this action that's dispatched and then we're going

98
00:06:52.010 --> 00:06:57.170
to play some of it in our redux day and we'll use that information also to determine if the user is

99
00:06:57.170 --> 00:06:58.910
authenticated or not.

100
00:06:58.910 --> 00:07:04.290
Finally if there is nothing inside of here we're just going to default to our initial.

101
00:07:04.320 --> 00:07:06.990
The.

102
00:07:07.540 --> 00:07:12.580
So if there's a car user We're going to return an object with a boolean of his authenticated and or

103
00:07:12.580 --> 00:07:14.060
user object.

104
00:07:14.170 --> 00:07:18.340
You might be wondering how are we going to do laga more actually can run said current user again.

105
00:07:18.400 --> 00:07:20.260
But we're going to pass it and have the object.

106
00:07:20.260 --> 00:07:25.890
That way we don't need another entire action type of current user and remove current user.

107
00:07:26.110 --> 00:07:27.660
You may be wondering where this is all going to fit in.

108
00:07:27.670 --> 00:07:29.370
But this is really just some setup.

109
00:07:29.380 --> 00:07:34.860
So instead of giving you all the code we want you to walk through and ask us questions if you are anything.

110
00:07:34.920 --> 00:07:37.560
So I have a current user producer and an arts producer.

111
00:07:37.620 --> 00:07:39.760
And now it's time to bundle those together.

112
00:07:40.110 --> 00:07:44.970
So I'm going to do that using the combined reducers function from redux inside of my index that yes

113
00:07:45.380 --> 00:07:50.580
what's important reducers current user from that flash current user.

114
00:07:50.790 --> 00:07:53.030
And we'll do the same thing with errors as well.

115
00:07:53.070 --> 00:07:54.170
Import errors.

116
00:07:55.600 --> 00:07:58.570
Commands you to select we'll call that ours.

117
00:07:59.160 --> 00:08:01.830
And here we're going to make a function called reproducer.

118
00:08:02.040 --> 00:08:06.660
And this is going to be the result of combined reducers with all of our producers.

119
00:08:06.920 --> 00:08:11.160
Pass on key current user and evaluate current user since we're using object shorthand.

120
00:08:11.160 --> 00:08:15.540
We'll just let the keys and values be one and we'll pass and errors as well.

121
00:08:15.600 --> 00:08:20.670
And finally we'll export this default route reducer.

122
00:08:20.700 --> 00:08:25.320
So what we've done here with me to reducers one for the current user one for our errors and we've made

123
00:08:25.320 --> 00:08:30.960
it indexed out yes it combines or bundles those reducers into a reproducer and the next screencast will

124
00:08:30.960 --> 00:08:35.750
take these reducers and pass them to our store so we can start configuring and creating our story.
