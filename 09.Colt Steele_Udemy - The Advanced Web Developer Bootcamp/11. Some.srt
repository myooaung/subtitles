1
00:00:00,510 --> 00:00:05,230
Welcome back in the section we're going to talk about another array method some.

2
00:00:05,490 --> 00:00:10,890
So far we've seen four each which iterates over an array and runs a callback function on each value

3
00:00:10,920 --> 00:00:13,400
in the array and returns undefined.

4
00:00:13,740 --> 00:00:19,260
We've also seen map which is very similar to for each except it returns a new array to us with the same

5
00:00:19,260 --> 00:00:25,920
one epts we saw filter which returns an array of the same or different month depending on if those values

6
00:00:25,920 --> 00:00:27,860
in the array have returned true.

7
00:00:27,870 --> 00:00:29,800
From the callback function.

8
00:00:29,810 --> 00:00:32,430
Now let's take a look at the SUM function.

9
00:00:32,450 --> 00:00:36,940
This function is called on arrays and iterates through each value in the array.

10
00:00:36,980 --> 00:00:39,940
It runs a function on each value in the array.

11
00:00:40,160 --> 00:00:46,250
And if the callback returns true for at least one value the entire function returns true.

12
00:00:46,250 --> 00:00:48,530
Otherwise it returns false.

13
00:00:48,530 --> 00:00:54,470
The idea here is that if some of the values passed of the callback return true the entire function returns

14
00:00:54,470 --> 00:00:56,560
true just like filter.

15
00:00:56,690 --> 00:01:00,450
The result of the callback will always be evaluated to a boolean.

16
00:01:00,920 --> 00:01:04,020
Let's see an example here we have a variable called R.

17
00:01:04,100 --> 00:01:09,620
And it is assigned to an array with the numbers 1 2 and 3 on the next line we are invoking the sum function

18
00:01:09,680 --> 00:01:13,860
on the array and passing a callback the value index an array.

19
00:01:13,910 --> 00:01:15,640
We do not need all of these parameters.

20
00:01:15,650 --> 00:01:20,710
This is just to show you that you can access them if you need inside of the callback function where

21
00:01:20,740 --> 00:01:23,350
returning an expression which evaluates to a boolean.

22
00:01:23,540 --> 00:01:29,430
We are checking to see if the value is less than 2 as long as there is at least one value in this array

23
00:01:29,520 --> 00:01:30,780
that is less than 2.

24
00:01:30,870 --> 00:01:32,980
The entire function will return true.

25
00:01:33,180 --> 00:01:36,530
So if you run this code some will return true.

26
00:01:36,570 --> 00:01:41,370
This is the first time that we're seeing an array method that doesn't return a new array or undefined

27
00:01:41,370 --> 00:01:42,150
to us.

28
00:01:42,210 --> 00:01:45,510
Some will always return true or false.

29
00:01:45,510 --> 00:01:49,050
Now if we change this condition to see if the value is greater than 4.

30
00:01:49,230 --> 00:01:52,280
None of these values will return TRUE from that expression.

31
00:01:52,320 --> 00:01:55,220
So the entire function returns false.

32
00:01:55,260 --> 00:02:00,250
Now that we have an idea of how to use the sum function let's try to implement our own version.

33
00:02:00,570 --> 00:02:02,160
Let's remember how some works.

34
00:02:02,210 --> 00:02:06,730
It iterates through an array runs a callback on each value in the array.

35
00:02:07,050 --> 00:02:12,520
And if the callback returns true for at least one value the entire sum function returns true.

36
00:02:12,780 --> 00:02:15,120
Otherwise it returns false.

37
00:02:15,370 --> 00:02:16,320
Just like before.

38
00:02:16,330 --> 00:02:19,400
Feel free to pause the video if you'd like to try to do this on your show.

39
00:02:19,750 --> 00:02:20,290
All right.

40
00:02:20,410 --> 00:02:23,880
Let's create a function called sum which accepts an array and callback.

41
00:02:23,970 --> 00:02:27,850
And instead of this function I'll start with a for loop and initialize a variable.

42
00:02:27,850 --> 00:02:33,190
I had zero I'll loop as long as I'm less than the length of the array and I'll increment by one after

43
00:02:33,190 --> 00:02:35,410
each iteration inside of the loop.

44
00:02:35,410 --> 00:02:41,700
I'll check to see if the callback when passed the value index an array returns true if it does I'll

45
00:02:41,710 --> 00:02:45,310
just return true right away and exit the loop and function.

46
00:02:45,310 --> 00:02:51,100
No need to keep iterating if the loop has finished and we have not returned true and none of our values

47
00:02:51,100 --> 00:02:52,620
have satisfied the condition.

48
00:02:52,630 --> 00:02:55,450
So we need to return false from our function.

49
00:02:55,450 --> 00:02:58,180
Now let's see how we can use some in our own functions.

50
00:02:58,210 --> 00:03:03,010
Here we have a function called has even number which accepts an array and returns the result of the

51
00:03:03,010 --> 00:03:06,270
sum function where a value is divisible by 2.

52
00:03:06,580 --> 00:03:07,930
Notice the two returned keywords.

53
00:03:07,960 --> 00:03:12,160
Just like with map and filter Woelfel you're starting to see the pattern here.

54
00:03:12,250 --> 00:03:16,530
If we pass in an array with at least one even value the function will return true.

55
00:03:16,750 --> 00:03:19,090
Otherwise the return false.

56
00:03:19,090 --> 00:03:24,310
Let's see another function called has Khama which accepts a string and returns true if the string contains

57
00:03:24,310 --> 00:03:29,620
at least one comma in this function and converting the string into an array using the split function

58
00:03:30,100 --> 00:03:33,620
and then using the sum function on that array in the callback.

59
00:03:33,640 --> 00:03:36,620
I'm checking to see if the character I'm at is a comma.

60
00:03:36,670 --> 00:03:38,620
Is any of these characters or a comma.

61
00:03:38,740 --> 00:03:42,340
The entire function will return true in the next video.

62
00:03:42,350 --> 00:03:45,370
We'll look at a very similar function called every Seether.
