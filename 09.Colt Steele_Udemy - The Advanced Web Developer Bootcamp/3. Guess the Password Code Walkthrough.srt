1
00:00:00,780 --> 00:00:01,620
Welcome back.

2
00:00:01,770 --> 00:00:07,540
In this video we're going to be going through the I guess the password code and break down what's happening.

3
00:00:07,950 --> 00:00:11,300
This example uses vanilla javascript for dominant relation.

4
00:00:11,400 --> 00:00:15,990
So if you've been working with Jake worry for a bit it's great to go back and see how it all works under

5
00:00:15,990 --> 00:00:16,460
the hood.

6
00:00:17,270 --> 00:00:18,180
To get started.

7
00:00:18,180 --> 00:00:23,490
We're waiting for the dom to load on line 1 and then making a few variables for the number of words

8
00:00:23,520 --> 00:00:27,120
and guesses that the user sees an 9:6.

9
00:00:27,120 --> 00:00:30,180
We're selecting an element with an idea of start from the DOM.

10
00:00:30,240 --> 00:00:36,030
This element is a button and when that button is clicked we run a function called Tondo classes and

11
00:00:36,030 --> 00:00:42,480
then a function called Start game let's see what that toggle classes function does here or looping through

12
00:00:42,480 --> 00:00:44,190
the arguments to this function.

13
00:00:44,460 --> 00:00:48,790
But starting at the second one I noticed that var is initialized to 1.

14
00:00:48,840 --> 00:00:55,420
So we ignore the first argument we then use the class list that Tuggle method which adds the class.

15
00:00:55,440 --> 00:00:59,820
If it does not exist or removes the class if it does exist.

16
00:00:59,990 --> 00:01:06,950
If we look at each TNL we can see Line 9 at the idea of start screen has a class of show which means

17
00:01:06,950 --> 00:01:13,370
the toggle class will remove the class and show at a class of hide online 23.

18
00:01:13,370 --> 00:01:18,890
We see that the idea of getting screen has a class of hide so Tuggle classes will remove the class of

19
00:01:18,890 --> 00:01:21,490
hide an outer class of show.

20
00:01:21,740 --> 00:01:28,010
If we take a look at RC SS We can see that the class of show adds a display of block and a class of

21
00:01:28,010 --> 00:01:32,870
hide removes the height which will hide our element of Achen our HABCHI us.

22
00:01:32,870 --> 00:01:38,870
Let's take a look at the start function here we're selecting an element from the DOM with an ID of wordlist

23
00:01:39,260 --> 00:01:46,010
and assigning it to a variable wordlist up into that here on line 22 or using the get random values

24
00:01:46,010 --> 00:01:49,450
function and passing in a word and a word count.

25
00:01:49,490 --> 00:01:52,320
You might be wondering what words and word count are.

26
00:01:52,340 --> 00:01:59,180
Word count is defined on line too and specifies how many words the user will see words is actually coming

27
00:01:59,180 --> 00:02:01,360
from the words dot file.

28
00:02:01,370 --> 00:02:05,820
So let's take a look at that and we can see it is a very large array of words.

29
00:02:05,840 --> 00:02:11,060
This is a separate file which will just contain a long list of words so that each time we play the game

30
00:02:11,180 --> 00:02:13,120
it will not have the same words every time.

31
00:02:14,050 --> 00:02:19,610
Back in our J.S. we're using to get random values function and passing in the array of words and our

32
00:02:19,610 --> 00:02:20,940
word count variable.

33
00:02:21,230 --> 00:02:22,680
But what is that function doing.

34
00:02:23,060 --> 00:02:29,570
If we look at 9:37 we can see that they get random values function accepts an array and then invokes

35
00:02:29,570 --> 00:02:37,400
the shuffle function and then makes a copy of that array return to us the shuffle function using slice.

36
00:02:37,400 --> 00:02:39,350
So what does the shuffle function doing.

37
00:02:39,560 --> 00:02:45,990
If we take a look at line 41 we can see here that this function shuffles the array online 42.

38
00:02:46,010 --> 00:02:51,340
We make a copy of the array so that we do not mutate or permanently change the input.

39
00:02:51,340 --> 00:02:56,700
This function is actually an implementation of a famous shuffle algorithm called fishier gates.

40
00:02:56,720 --> 00:03:02,090
It involves generating a random index and swapping values based on that random index.

41
00:03:02,090 --> 00:03:05,510
When we're done looping we return the copied and shuffled array.

42
00:03:05,990 --> 00:03:11,960
So are get random values function will shuffle an array and then make a copy of the shuffled array with

43
00:03:11,960 --> 00:03:16,320
a number of elements equal to our word count variable.

44
00:03:16,320 --> 00:03:17,690
I count mine 23.

45
00:03:17,690 --> 00:03:23,390
We have a variable called random words which is a shuffled array of random words will iterate over each

46
00:03:23,390 --> 00:03:29,120
value in the array and create a list item and give it the text of whatever word we are iterating over

47
00:03:29,120 --> 00:03:30,440
in the array.

48
00:03:30,440 --> 00:03:37,590
Finally on line 26 we append that list item to the word list element which in our h t l is a UL or an

49
00:03:37,620 --> 00:03:39,500
ordered list element.

50
00:03:39,500 --> 00:03:40,080
All right.

51
00:03:40,130 --> 00:03:41,540
We're more than halfway through.

52
00:03:41,780 --> 00:03:46,580
You might be a bit confused now but reading other people's code is what professional developers do all

53
00:03:46,580 --> 00:03:47,560
the time.

54
00:03:47,570 --> 00:03:52,180
It's rare that you're the only developer and are writing things from scratch in a professional environment.

55
00:03:52,300 --> 00:03:57,740
So reading and understanding other people's code is just as important if not more important than writing

56
00:03:57,740 --> 00:04:01,600
your own so far we're listening for a click on a button.

57
00:04:01,810 --> 00:04:07,240
And when that happens we hide and show some elements shuffle a random list of words and append those

58
00:04:07,240 --> 00:04:10,860
words to the page as list items on line 30.

59
00:04:10,900 --> 00:04:15,240
We're assigning the value of our password variable which we defined online for.

60
00:04:15,430 --> 00:04:20,260
Its value is the result of the get random values function which we saw before.

61
00:04:20,590 --> 00:04:26,690
Here we're picking one of the random words as the password for the user to guess on line 31.

62
00:04:26,710 --> 00:04:31,930
We're invoking the set guest count function and passing in the guest count variable which we to find

63
00:04:31,930 --> 00:04:33,840
on line three as the number of guesses.

64
00:04:33,850 --> 00:04:37,650
A user gets a what does the set guess count function do.

65
00:04:37,990 --> 00:04:40,600
Let's see on line 55 here.

66
00:04:40,600 --> 00:04:45,850
We're simply changing the text of the element with an ID of guesses remaining to be the number of guesses

67
00:04:45,850 --> 00:04:47,960
that the user has left.

68
00:04:47,980 --> 00:04:54,490
Finally back on 9:34 we add an event listener for a click on the wordlist element and when a user clicks

69
00:04:54,490 --> 00:04:57,690
on the wordlist we run a function called up the game.

70
00:04:58,180 --> 00:05:03,730
Notice that we're adding this event listener to the entire element and not to each allied element to

71
00:05:03,730 --> 00:05:05,250
be more efficient.

72
00:05:05,260 --> 00:05:07,590
So what does the function do.

73
00:05:07,600 --> 00:05:10,450
What's the on line 60 what's going on here.

74
00:05:10,480 --> 00:05:15,750
We're first checking to make sure that the target of the event which is a click is a list item.

75
00:05:16,090 --> 00:05:22,420
And if that list item we clicked does not have a class of disabled on line 63 we store the text of the

76
00:05:22,420 --> 00:05:29,290
list item in a variable and on line 64 we invoke the compare words function for the word and the password

77
00:05:29,290 --> 00:05:32,330
variable which we define online 30.

78
00:05:32,470 --> 00:05:35,320
We can see on line 80 that the compare words function.

79
00:05:35,440 --> 00:05:39,080
First make sure the length of the two words being shared are the same.

80
00:05:39,220 --> 00:05:42,270
We are using the throw keyword since we want an error to occur.

81
00:05:42,280 --> 00:05:46,220
If this is happening we wouldn't want the user trying to change things.

82
00:05:46,510 --> 00:05:51,760
The rest of the function starting on line 82 involves creating a count variable and looping through

83
00:05:51,760 --> 00:05:52,180
the word.

84
00:05:52,180 --> 00:05:56,490
We have guests to see how many letters it has in common with another word.

85
00:05:56,530 --> 00:06:01,550
This function returns the number of letters that are similar for each word and we store that in a very

86
00:06:01,550 --> 00:06:06,360
well on line 64 called similarity score on line 65.

87
00:06:06,360 --> 00:06:10,320
We make sure to add the class of disabled to the list item we just clicked.

88
00:06:10,320 --> 00:06:15,960
Since we don't want that same list item to be clicked again and counted as another guess on the next

89
00:06:15,960 --> 00:06:21,060
line we let the user know how many matching letters there are and then subtract one from the number

90
00:06:21,060 --> 00:06:22,040
of guesses they have.

91
00:06:22,930 --> 00:06:23,850
Hamline 70.

92
00:06:23,850 --> 00:06:27,010
We have some logic to check and see if the game has ended.

93
00:06:27,280 --> 00:06:32,260
If the similarity score which is the result of the compare word's function is the same as the length

94
00:06:32,260 --> 00:06:34,870
of the password variable which is a string.

95
00:06:34,930 --> 00:06:39,870
We remove the class of hide and add the class of show to the element with an ID of winner.

96
00:06:40,180 --> 00:06:44,430
And then we remove the event listener which updates the game since it has ended.

97
00:06:45,250 --> 00:06:49,190
Online 73 we're checking to see if there are no guesses remaining.

98
00:06:49,190 --> 00:06:55,540
And if so we remove the class of hide and add the class of show to the element with an ID of loser and

99
00:06:55,540 --> 00:06:59,620
remove the event listener which updates the game since it has ended.

100
00:06:59,620 --> 00:07:04,840
Notice we're using the keyword this which refers to the entire unordered list where the event listener

101
00:07:04,840 --> 00:07:06,690
is being placed.

102
00:07:06,790 --> 00:07:11,500
That was quite a bit of code to read through but the more practice you get with these kinds of exercises.

103
00:07:11,500 --> 00:07:16,090
The faster you're going to be able to get up to speed in a professional environment which is so important

104
00:07:16,780 --> 00:07:20,040
your assignment now is a factor in this code using what we've learned with.

105
00:07:20,050 --> 00:07:21,360
Yes 2015.

106
00:07:21,600 --> 00:07:28,060
See where you can add let and Konst if all parameters and use the rest and spread operator aero functions

107
00:07:28,120 --> 00:07:30,820
restructuring and more in the next video.

108
00:07:30,820 --> 00:07:32,680
We'll see what we can refactor.

109
00:07:32,680 --> 00:07:33,100
Good luck.
