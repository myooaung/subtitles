WEBVTT
1
00:00:00.850 --> 00:00:05.940
Now other applications have gotten sufficiently complex we're going to look at a way to organize our

2
00:00:05.940 --> 00:00:08.950
code to make it a little bit more organized.

3
00:00:10.270 --> 00:00:17.230
So our objectives will be to define a presentational component and compare that with the container component.

4
00:00:17.420 --> 00:00:23.050
Define the combined reducers function defined action creators.

5
00:00:23.390 --> 00:00:28.350
And finally to describe a folder structure for redux.

6
00:00:28.480 --> 00:00:30.460
So what is a presentational component.

7
00:00:30.730 --> 00:00:32.590
Well you can think of it as a dumb component.

8
00:00:32.590 --> 00:00:38.920
It does nothing but concern itself with how things look on the screen and it can often be described

9
00:00:38.920 --> 00:00:40.660
as a stateless functional component.

10
00:00:40.660 --> 00:00:46.540
But that's not always the case a presentational component can still be one state but typically the state

11
00:00:46.540 --> 00:00:50.330
should be concerned with the UI and not with data in the application

12
00:00:53.950 --> 00:01:00.080
Conversely a container component is usually a staple component that deals with application data.

13
00:01:00.340 --> 00:01:10.520
And this is often created with high order components that we've seen before like connect or with router.

14
00:01:11.050 --> 00:01:16.630
Dan Asimov who we talked about quite a bit in this course also has a nice write up about the difference

15
00:01:16.630 --> 00:01:19.230
between presentational and container components.

16
00:01:19.480 --> 00:01:21.350
So I'd highly recommend checking this out.

17
00:01:23.270 --> 00:01:29.050
He goes into some detail on how to spot a presentational component and how to spot a container component.

18
00:01:29.060 --> 00:01:31.690
It's a few years old but I think still pretty relevant.

19
00:01:37.070 --> 00:01:40.030
Next up we need to talk about combine reducers.

20
00:01:40.100 --> 00:01:44.690
So so far we've just had one big reducer function and that's fine for smaller things.

21
00:01:44.840 --> 00:01:50.090
But when the application starts getting more complex the reducers files can get very large.

22
00:01:50.540 --> 00:01:56.360
So combine reducers allows us to compose reducers we have multiple reducers that are only concerned

23
00:01:56.360 --> 00:02:01.260
with a small piece of the whole state.

24
00:02:01.280 --> 00:02:05.610
Here's an example of what our application might look like using combined reducers.

25
00:02:06.110 --> 00:02:12.570
So we combined two separate reducers one called Current User and one called messages to create our route

26
00:02:12.570 --> 00:02:13.410
reducer.

27
00:02:13.640 --> 00:02:15.950
Using this combined reducers function.

28
00:02:16.550 --> 00:02:21.340
And what this does is it creates a key in our state called current user.

29
00:02:21.430 --> 00:02:26.170
And then the current user reducer is only concerned with data that's inside of that key.

30
00:02:26.630 --> 00:02:31.640
And the same with messages we have a key called messages and the messages reducer is only concerned

31
00:02:31.640 --> 00:02:32.140
with state.

32
00:02:32.150 --> 00:02:33.200
Inside of that key

33
00:02:36.510 --> 00:02:39.140
this is what the messages reducer might look like.

34
00:02:39.210 --> 00:02:42.420
And notice here the state we're passing in is an array.

35
00:02:42.420 --> 00:02:46.100
So the value that your producer is concerned with doesn't have to be an object.

36
00:02:46.110 --> 00:02:51.960
It could be an array or it could just be a string or any other piece of javascript data.

37
00:02:51.960 --> 00:03:00.520
Now since this is an array the data that we return here is going to also be an array not an object.

38
00:03:00.540 --> 00:03:03.060
Next up action creators.

39
00:03:03.060 --> 00:03:08.430
So so far in our application we've created actions like this in a map dispatched to prop's you might

40
00:03:08.430 --> 00:03:10.620
see something like On log out.

41
00:03:10.620 --> 00:03:12.050
In this case dispatch.

42
00:03:12.150 --> 00:03:14.110
And then we'll just create the action right there.

43
00:03:15.530 --> 00:03:20.750
This can get a little cumbersome after a while because we have lots of different types floating around

44
00:03:20.750 --> 00:03:23.270
and there's no one central place where they live.

45
00:03:23.300 --> 00:03:30.710
So an alternative approach would just be to create a function that returns this action object.

46
00:03:30.710 --> 00:03:34.460
And then those actions would live in a folder called actions.

47
00:03:34.490 --> 00:03:37.790
This may seem like a small change but it does really clean up your code.

48
00:03:37.790 --> 00:03:42.280
And when you get more complex actions it helps out quite a bit.

49
00:03:44.120 --> 00:03:48.100
So this leads us to a redux directory structure up until this point.

50
00:03:48.110 --> 00:03:53.960
All of our code has been in one giant source folder and you might have already been feeling a little

51
00:03:53.960 --> 00:03:56.840
lost with all the files that are in one directory.

52
00:03:57.380 --> 00:04:03.550
So this is a proposed directory structure that you can sort of modify and add to if you like.

53
00:04:03.860 --> 00:04:07.850
But usually these four folders are are useful to have.

54
00:04:08.180 --> 00:04:14.540
So the actions folder is the folder that contains all of our action creators just like the one we just

55
00:04:14.540 --> 00:04:20.060
saw components will be containing just presentational components.

56
00:04:20.960 --> 00:04:28.700
Containers will be container components and reducers will be our reproducer as well as any other reducers

57
00:04:29.110 --> 00:04:30.420
reducer uses.

58
00:04:30.530 --> 00:04:37.840
So the reducer will do combined reducers and it will compose itself using other sub Britishers.

59
00:04:38.990 --> 00:04:45.620
And lastly will have the index G-S which uses react on render and kicks off the application.

60
00:04:45.760 --> 00:04:47.080
That's all for this one.

61
00:04:47.080 --> 00:04:53.700
Next up we'll take a look at an example from the redux docs and see this folder structure in action.
