WEBVTT
1
00:00:00.720 --> 00:00:07.470
Welcome back in this section we're going to introduce one of the larger editions the 20:17 async functions

2
00:00:08.170 --> 00:00:13.230
Issing functions or asynchronous functions or a special kind of function that are created using the

3
00:00:13.230 --> 00:00:14.820
word async.

4
00:00:14.940 --> 00:00:21.450
The purpose of async functions is to simplify writing asynchronous code specifically with promises.

5
00:00:21.450 --> 00:00:24.370
So how does it work when an async function is invoked.

6
00:00:24.390 --> 00:00:29.810
A promise is returned to us and will resolve with whatever value is returned from the function.

7
00:00:29.820 --> 00:00:32.070
So let's see what that looks like here.

8
00:00:32.100 --> 00:00:35.630
We're using the async keyword before our function declaration.

9
00:00:35.630 --> 00:00:41.620
And if we invoke the function a promise will be returned to us and we can then resolve that promise.

10
00:00:41.630 --> 00:00:43.590
So there really isn't anything special here.

11
00:00:43.670 --> 00:00:48.890
We didn't need the async keyword since the code we had inside of this function was synchronous in order

12
00:00:48.890 --> 00:00:54.980
to see what makes async functions so special we need to introduce another keyword a weight a weight

13
00:00:55.060 --> 00:00:59.510
as a reserve keyword that can only be used inside of async functions.

14
00:00:59.510 --> 00:01:04.600
It pauses the execution of an easing function and is followed by a promise.

15
00:01:04.820 --> 00:01:10.880
The sweet keyword waits for the promise to resolve and then resumes the async functions execution and

16
00:01:10.880 --> 00:01:12.530
returns the resolve out.

17
00:01:12.860 --> 00:01:15.790
You can think of the Awake keyword like a pause button.

18
00:01:15.800 --> 00:01:21.380
What the wait keyword allows us to do is write asynchronous code that reads like its synchronous.

19
00:01:21.530 --> 00:01:26.900
We can remove the hassle of nested callbacks promised chains for multiple yield statements and generator

20
00:01:26.900 --> 00:01:27.810
functions.

21
00:01:28.220 --> 00:01:32.230
So lets write a function that gets some movie data from the NDB API.

22
00:01:32.540 --> 00:01:38.360
Here we have a function called Get movie data which canceled out logs starting and then awaits the resolution

23
00:01:38.420 --> 00:01:43.850
of a promise and then prints all done and then some information about the movie.

24
00:01:43.940 --> 00:01:49.160
If we run this function what order do you think we'll see our information printed out it will first

25
00:01:49.160 --> 00:01:53.450
print out starting then all done and then the movie data.

26
00:01:53.690 --> 00:01:56.740
Even though our AJAX call is entirely asynchronous.

27
00:01:56.810 --> 00:02:02.210
The code we have written reads very synchronously through the use of async and away we don't need to

28
00:02:02.210 --> 00:02:06.440
use dot then or any kind of callback function or yield keyword.

29
00:02:06.530 --> 00:02:11.900
If we'd like we can also make async functions inside of objects by prefixing the method with the word

30
00:02:11.960 --> 00:02:17.080
async and using as 2015 object method notation to write the function.

31
00:02:17.150 --> 00:02:22.130
All we need to do is make sure we prefix the name of the function with the async keyword.

32
00:02:22.130 --> 00:02:25.620
We can write the same syntax with callback functions as well.

33
00:02:26.030 --> 00:02:31.220
We can also add async instance methods using the 20:15 class syntax.

34
00:02:31.220 --> 00:02:32.340
Here's what that might look like.

35
00:02:33.160 --> 00:02:38.950
Notice in the previous example we are prefixing our method name with the async keyword and then we can

36
00:02:38.950 --> 00:02:43.420
create new objects from our movie data class and use this method.

37
00:02:43.420 --> 00:02:46.530
This all seems great but we're making a dangerous assumption right now.

38
00:02:46.540 --> 00:02:52.450
When using the Awake keyword we're assuming that all of our promises will be resolved successfully.

39
00:02:52.450 --> 00:02:57.830
What happens if a promise is rejected since oh wait we'll wait for a promise to resolve.

40
00:02:57.940 --> 00:02:59.500
What happens when things go wrong.

41
00:02:59.710 --> 00:03:01.720
How do we handle an error.

42
00:03:01.720 --> 00:03:06.360
Thankfully if a promise is rejected using a wave javascript will throw an error.

43
00:03:06.400 --> 00:03:11.640
So to handle this error gracefully we can use a try catch statement inside of the try block.

44
00:03:11.680 --> 00:03:16.600
We can place our awake keyword and if something goes wrong we can handle that in our catch block.

45
00:03:16.930 --> 00:03:22.220
We can see in the function below that we're trying to get a user's information from the get hub API.

46
00:03:22.510 --> 00:03:26.540
If we do not find a user successfully we'll get a 404 from the server.

47
00:03:26.690 --> 00:03:29.380
In response that name will not be valid.

48
00:03:29.410 --> 00:03:33.280
Thankfully our catch statement will handle that error and we will cancel out log.

49
00:03:33.280 --> 00:03:37.780
The user does not exist if we invoke this function with a valid username.

50
00:03:37.810 --> 00:03:39.970
You will get the full name of that user.

51
00:03:40.030 --> 00:03:41.230
Otherwise will output.

52
00:03:41.260 --> 00:03:43.280
User does not exist.

53
00:03:43.570 --> 00:03:44.770
We just covered quite a bit.

54
00:03:44.830 --> 00:03:50.260
So feel free to watch his video again at some of these code examples and review the slots in the next

55
00:03:50.260 --> 00:03:50.650
video.

56
00:03:50.650 --> 00:03:54.410
We'll talk a bit more about how to write code using async functions.

57
00:03:54.430 --> 00:03:54.900
See there.
