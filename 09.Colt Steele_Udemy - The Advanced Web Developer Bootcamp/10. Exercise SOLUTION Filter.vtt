WEBVTT
1
00:00:00.500 --> 00:00:01.230
Welcome back.

2
00:00:01.400 --> 00:00:06.320
In this video we're going to be going over solutions to the filter exercises the first function we're

3
00:00:06.320 --> 00:00:11.620
going to implement is filter by value which accepts an array and some key to search by.

4
00:00:11.870 --> 00:00:16.580
We're going to return the result of the array data filter and inside of the callback we're going to

5
00:00:16.580 --> 00:00:20.490
return for each object at that key is not undefined.

6
00:00:20.780 --> 00:00:24.750
What we're doing is checking to see if each object has the key we're looking for.

7
00:00:24.920 --> 00:00:29.730
And if it does that object will be included in the new array the filter returns to us.

8
00:00:29.750 --> 00:00:34.730
Notice here that we're using bracket notation because we need javascript to evaluate the value of the

9
00:00:34.730 --> 00:00:35.900
key.

10
00:00:36.010 --> 00:00:40.720
The next function we're going to implement is find which accepts an array and some search value.

11
00:00:40.810 --> 00:00:45.610
We're going to return the result of filtering that array and inside of the callback we're going to see

12
00:00:45.670 --> 00:00:49.370
where the value is the same as the search value that we're looking for.

13
00:00:49.660 --> 00:00:54.400
Since filter returns an array to us we want to return the first thing in that array.

14
00:00:54.610 --> 00:01:00.460
So we're going to directly access this at index 0 if the filtered arrays empty this function will return

15
00:01:00.490 --> 00:01:06.790
undefined the next function we're going to implement is a variation of fine called find in object which

16
00:01:06.790 --> 00:01:10.080
accepts an array and a key and some search value.

17
00:01:10.330 --> 00:01:12.800
This function is going to look very similar to find.

18
00:01:12.820 --> 00:01:17.770
So we're going to return the result of filtering the array but instead we're going to return the value

19
00:01:17.950 --> 00:01:21.500
at a specific key when it is the same as the search value.

20
00:01:21.760 --> 00:01:25.230
And just like fine will access this at index 0.

21
00:01:25.510 --> 00:01:28.150
The next function we're going to implement is remove vowels.

22
00:01:28.150 --> 00:01:29.570
And it accepts a string.

23
00:01:29.740 --> 00:01:34.300
First let's create a variable called vals which will be a string of all the vowels.

24
00:01:34.310 --> 00:01:39.340
Then let's convert the string to lowercase and split each character into an array so that we can filter

25
00:01:39.340 --> 00:01:41.820
it inside of the callback.

26
00:01:41.820 --> 00:01:47.310
You can check to see if that character we are at is inside of the vowel string using index of if it

27
00:01:47.310 --> 00:01:49.980
is not we will add it to the filtered array.

28
00:01:49.980 --> 00:01:53.850
Finally we will join this array back into a string with all the vowels removed.

29
00:01:54.150 --> 00:01:58.680
As an aside there are many ways of accomplishing this task some more efficient than others.

30
00:01:58.680 --> 00:02:03.140
The goal here is to practice using filter to try to solve the problem using that.

31
00:02:03.450 --> 00:02:06.850
The last function we're going to implement is called Double odd numbers.

32
00:02:06.900 --> 00:02:11.960
We're first going to filter the array and return all the values that are not that visible by 2.

33
00:02:12.000 --> 00:02:17.340
We're then going to map over this array and return a new array with each value multiplied by two.

34
00:02:17.340 --> 00:02:22.770
Here we are combining filter and map to return the correct output and that's all for these exercises.

35
00:02:22.770 --> 00:02:23.740
See you in the next video.
