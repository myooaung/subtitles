WEBVTT
1
00:00:00.960 --> 00:00:03.150
Great let's talk a little bit about redux.

2
00:00:03.150 --> 00:00:08.010
And if you've done some reading about redux now you'll learn that it is a centralized place to manage

3
00:00:08.070 --> 00:00:08.790
our state.

4
00:00:08.800 --> 00:00:10.440
It's a state container.

5
00:00:10.440 --> 00:00:11.990
So what do we mean by state here.

6
00:00:12.000 --> 00:00:16.350
This could refer to a list of to do's or some information about a user.

7
00:00:16.380 --> 00:00:20.250
Whenever you think about applications that you got on the front end there's going to be information

8
00:00:20.250 --> 00:00:25.410
that changes pretty constantly and having one centralized place to manage that is really useful when

9
00:00:25.410 --> 00:00:27.840
you have lots of different files and so on.

10
00:00:27.840 --> 00:00:34.070
So what I want you to do is completely ignore the talk of react and redux or angular and redux which

11
00:00:34.060 --> 00:00:35.580
is going to focus on vanilla redux.

12
00:00:35.580 --> 00:00:38.790
In fact broodiness then this entire video in the chrome dev tools.

13
00:00:39.000 --> 00:00:45.870
So what I'm going to do is go grab a redux script so I'll just type in redux CDN and let's go take a

14
00:00:45.870 --> 00:00:51.650
look at this one right here and we're just going to grab the first script for redux and copy that and

15
00:00:51.670 --> 00:00:56.220
I'm going to head over and just make a simple file called index that actually M-L and open that up and

16
00:00:56.220 --> 00:00:57.310
sublime.

17
00:00:57.360 --> 00:00:59.550
Make sure you do the right thing.

18
00:00:59.550 --> 00:01:02.640
And inside of here I'm just going to start with some boiler plate.

19
00:01:03.070 --> 00:01:04.410
Little bit of each DML.

20
00:01:04.650 --> 00:01:09.590
And all I want is a script tag with a source attribute of the script right here.

21
00:01:09.690 --> 00:01:10.160
Amazing.

22
00:01:10.310 --> 00:01:14.140
So I'll just press tab and see that we're not to worry about any HDMI out.

23
00:01:14.140 --> 00:01:18.570
We're just going to open this up in the browser and if we done this correctly we should be able to go

24
00:01:18.570 --> 00:01:22.130
to the chrome dev tools and type in capital R redux.

25
00:01:22.140 --> 00:01:22.790
And this is it.

26
00:01:22.800 --> 00:01:24.590
This is all we're going to start with.

27
00:01:24.630 --> 00:01:30.450
So let's take a look at what redux gives us blind middleware bind action creators combined reducers

28
00:01:30.450 --> 00:01:32.270
compose and create store.

29
00:01:32.510 --> 00:01:36.370
What we're really just going to focus on right now is this idea of creating a store.

30
00:01:36.480 --> 00:01:40.520
The store is going to be the centralized place where our state lives.

31
00:01:40.590 --> 00:01:44.130
We don't really know what our state is going to consist of right now but think of your state as just

32
00:01:44.160 --> 00:01:47.950
any data in your application that's going to be changing you're coming from react.

33
00:01:48.000 --> 00:01:50.340
So you may have heard the idea of state with react.

34
00:01:50.400 --> 00:01:51.440
This is similar.

35
00:01:51.630 --> 00:01:56.820
But the idea with redux state is a little bit less for your user interface and more for just the data

36
00:01:56.820 --> 00:01:59.970
that's going to be shared in different parts of your application.

37
00:02:00.060 --> 00:02:04.680
Remember having one centralized place to manage all of the state is going to make it much easier.

38
00:02:04.680 --> 00:02:08.400
The hard part about redux is really just wrapping your brain around what the library is.

39
00:02:08.400 --> 00:02:11.670
How does it all work and then it gets even harder when you connect it with react.

40
00:02:11.880 --> 00:02:17.010
So what I really once again want to stress here is just focusing on the redux library and seeing how

41
00:02:17.010 --> 00:02:19.530
data flows throughout a redux application.

42
00:02:19.530 --> 00:02:24.750
So all we're starting with once again vanilla redux and that's it the function that I want to spend

43
00:02:24.750 --> 00:02:26.680
some time looking at is create store.

44
00:02:26.700 --> 00:02:30.330
We said that a store is going to be the place where our state is contained.

45
00:02:30.330 --> 00:02:34.860
And once we make the store we'll be able to actually see data flow throughout our application.

46
00:02:34.890 --> 00:02:38.610
Don't worry about compose combined reducers by an actual creators applied middleware.

47
00:02:38.620 --> 00:02:42.480
Talking about any of that stuff for now you're actually going to see that redux is probably about five

48
00:02:42.480 --> 00:02:47.400
to seven or so functions that you use the least amount of functions you're ever going to spend the most

49
00:02:47.400 --> 00:02:48.500
possible time learning.

50
00:02:48.510 --> 00:02:49.870
So that's the tricky part.

51
00:02:50.340 --> 00:02:52.570
So let's take a look at how Creed's store works.

52
00:02:52.730 --> 00:02:57.570
I think a variable called store and all assignment to redux does create store.

53
00:02:58.020 --> 00:03:01.900
And what we're going to see right off the bat is expected the reducer to be a function well.

54
00:03:02.160 --> 00:03:09.310
No moving parts here a producer is a function that is passed to create store.

55
00:03:09.330 --> 00:03:09.970
What does that mean.

56
00:03:09.990 --> 00:03:15.900
The reducer is a specific function that tells our centralized store which is our state container or

57
00:03:15.900 --> 00:03:17.430
place where Steve lives.

58
00:03:17.430 --> 00:03:22.520
It essentially tells the store what the street looks like and how to make changes to the state.

59
00:03:22.800 --> 00:03:26.200
So if you make a store without a reducer we're going to get an error.

60
00:03:26.580 --> 00:03:29.680
Once again the ideal with the reducer is it's always a function.

61
00:03:29.790 --> 00:03:34.170
Don't worry too much about parameters that this function accepts or anything the reducer is simply a

62
00:03:34.170 --> 00:03:41.190
function that is going to manage what our state looks like and how changes to our State happen.

63
00:03:42.270 --> 00:03:45.200
So what we're going to do right now is start with something very simple.

64
00:03:45.390 --> 00:03:51.390
We're going to make a function and we'll call this root producer and inside of here we're going to pass

65
00:03:51.390 --> 00:03:53.280
in two parameters.

66
00:03:53.490 --> 00:03:56.400
You might not know what these parameters refer to and that's OK.

67
00:03:56.520 --> 00:03:58.660
But this first one is going to be steep.

68
00:03:58.800 --> 00:04:05.700
And the second one is going to be action state and action are going to be values that we'll see in a

69
00:04:05.700 --> 00:04:06.900
little bit.

70
00:04:06.900 --> 00:04:12.910
But remember that when we make a store in redox we said the store is our centralized place for our state.

71
00:04:13.020 --> 00:04:17.880
Well we probably have to figure out what our state is going to be and depending on your application

72
00:04:17.910 --> 00:04:19.570
your seat is going to be different.

73
00:04:19.570 --> 00:04:22.340
All I'm going to do right now is start with something very simple.

74
00:04:22.650 --> 00:04:29.700
I'm going to make a variable called initial state and initial state is going to be an object and it's

75
00:04:29.700 --> 00:04:36.360
going to contain some value with a count and we'll start that off at zero.

76
00:04:36.750 --> 00:04:38.260
So this is what our state looks like.

77
00:04:38.280 --> 00:04:43.520
Nothing too fancy right here it's just a simple object inside of our route reducer.

78
00:04:43.620 --> 00:04:48.960
We are going to specify what the default state should look like and what we could do here is something

79
00:04:48.960 --> 00:04:52.060
like if steede is undefined.

80
00:04:52.490 --> 00:04:57.630
Well then maybe we can set our state to be the initial state but instead of worrying about all that

81
00:04:57.630 --> 00:04:59.060
logic we can use them nice.

82
00:04:59.060 --> 00:05:06.380
Yes 2015 right here and we'll say that our default state is going to be initial state and all we're

83
00:05:06.390 --> 00:05:09.870
going to do inside of here is just return state.

84
00:05:10.050 --> 00:05:11.860
Don't worry too much about action.

85
00:05:11.940 --> 00:05:14.510
That's really all that our producer does.

86
00:05:15.270 --> 00:05:16.230
So what have we done.

87
00:05:16.230 --> 00:05:20.890
We meet an object called initial state which has a key account and a value of zero.

88
00:05:20.910 --> 00:05:27.570
We then meet a function called Ruut reducer which accepts some kind of state and some parameter called

89
00:05:27.570 --> 00:05:28.620
Action.

90
00:05:28.620 --> 00:05:29.750
Don't worry about that too much yet.

91
00:05:29.760 --> 00:05:33.650
We'll see that in a bit more detail as we see how data flows throughout an application.

92
00:05:33.930 --> 00:05:39.780
But remember again when you make a store with redux the store is going to be the place where we make

93
00:05:39.780 --> 00:05:45.180
changes to our state when we make that store we have to pass in a function and the function that we

94
00:05:45.180 --> 00:05:48.240
pass to create store is called a reducer.

95
00:05:48.540 --> 00:05:52.720
You can have multiple reducers and that's OK right now we're just going to start with what.

96
00:05:53.100 --> 00:05:58.950
So I'm going to go back to the store and I'm going to call create store of a passing route reducer this

97
00:05:58.950 --> 00:06:00.990
time.

98
00:06:00.990 --> 00:06:02.060
Now I'm not getting any errors.

99
00:06:02.070 --> 00:06:03.900
But what is the store that I'm looking at.

100
00:06:03.900 --> 00:06:06.600
Well let's see if we look at store.

101
00:06:06.690 --> 00:06:09.090
We get a couple of other methods right here.

102
00:06:09.090 --> 00:06:11.490
There's a method called dispatch.

103
00:06:11.490 --> 00:06:13.480
There's a method called Get state.

104
00:06:14.010 --> 00:06:15.990
And then those replace reducer and subscribe.

105
00:06:15.990 --> 00:06:19.550
We're really just going to focus on dispatch and get the right now.

106
00:06:19.800 --> 00:06:20.690
So one more time.

107
00:06:20.730 --> 00:06:21.870
What do we do.

108
00:06:21.870 --> 00:06:24.020
Created a store.

109
00:06:24.270 --> 00:06:29.450
The store is going to be the place where our state lives.

110
00:06:30.000 --> 00:06:36.020
We cannot make a store without a producer.

111
00:06:36.260 --> 00:06:46.780
Our producer is a function that determines what our city looks like and how we change the state.

112
00:06:47.520 --> 00:06:52.890
So if you remember how our route reducer works our route reduce or just accepted some kind of initial

113
00:06:52.890 --> 00:06:53.320
state.

114
00:06:53.330 --> 00:06:57.520
What was the initial state just an object with a key account and a value of zero.

115
00:06:57.540 --> 00:06:59.520
In this case we're going to build a very simple counter.

116
00:06:59.640 --> 00:07:04.300
But in your application your state may be whatever data is going to live in your application.

117
00:07:05.300 --> 00:07:07.330
We'll see what action is once again in a second.

118
00:07:07.880 --> 00:07:13.460
If we take a look at our store there exists a method called gets the I'm going to run this and we can

119
00:07:13.460 --> 00:07:17.570
see that we get back our initial state on your store.

120
00:07:17.690 --> 00:07:20.910
You always have the ability to get what the state looks like.

121
00:07:20.930 --> 00:07:28.740
Currently the way that you make changes to your state is by using this dispatch function right here.

122
00:07:29.030 --> 00:07:33.910
So let's invoke the dispatch function and we'll see of actions must be plain objects.

123
00:07:33.910 --> 00:07:36.220
Use custom middleware for async actions.

124
00:07:36.230 --> 00:07:38.180
This is where the redux gets really tricky.

125
00:07:38.240 --> 00:07:42.140
If you're wondering what's happening and there's so many things that are moving around that's really

126
00:07:42.140 --> 00:07:45.140
how redux works you want to try to take it piece by piece.

127
00:07:45.170 --> 00:07:49.820
So let's go back one more time and just set a very high level talk about what we're doing here.

128
00:07:49.940 --> 00:07:56.930
The idea with redux is that we have one centralized place where our state looks what is our state to

129
00:07:56.930 --> 00:08:02.390
use in an application information about a user progress that a user is making throughout an application

130
00:08:02.900 --> 00:08:08.120
pieces of data that are going to change depending on interactions in the application and having one

131
00:08:08.120 --> 00:08:12.080
centralized place to manage that is really nice especially if you have multiple javascript files or

132
00:08:12.080 --> 00:08:13.550
lots of Riak components.

133
00:08:13.580 --> 00:08:17.750
It's really nice to have one centralized place where you can always see what the state looks like what

134
00:08:17.750 --> 00:08:19.430
changes to the state look like.

135
00:08:19.430 --> 00:08:23.050
It really makes your life much easier despite the fact that the learning curve is very steep.

136
00:08:24.010 --> 00:08:30.410
So the way to make this centralized state container is to create a store the way that we create a store

137
00:08:30.550 --> 00:08:32.780
by using redux that create store.

138
00:08:32.900 --> 00:08:39.310
We saw that by just loading the redux script that gives us this global redux variable create store accepts

139
00:08:39.430 --> 00:08:45.820
one parameter which is a function that function has a special name which is called a reducer and he

140
00:08:45.820 --> 00:08:51.790
reducer is a function that determines what our state looks like and how we change the state.

141
00:08:51.790 --> 00:08:53.720
Remember right now we haven't changed our state at all.

142
00:08:53.740 --> 00:08:55.780
We have just made some initial state.

143
00:08:55.990 --> 00:08:59.550
So if we go back a little bit we can see that we mean a variable called initial state.

144
00:08:59.770 --> 00:09:03.130
This could be an object this could be an array this could be whatever you'd like but we're just going

145
00:09:03.130 --> 00:09:03.990
to stick with an object.

146
00:09:04.000 --> 00:09:08.050
Keep it simple and we need a function called a root reducer.

147
00:09:08.050 --> 00:09:11.440
This usually refers to the one reducer that bundles up other ones.

148
00:09:11.440 --> 00:09:12.640
But right now we don't have that.

149
00:09:12.640 --> 00:09:18.100
So we're going to stick with one simple function and it accepts some kind of state which we're not going

150
00:09:18.100 --> 00:09:19.610
to worry about invoking right now.

151
00:09:19.630 --> 00:09:22.640
We're just going to set that state to be initial state.

152
00:09:22.900 --> 00:09:27.250
If you don't pass in anything we're then going to just return the state.

153
00:09:27.280 --> 00:09:28.570
That's all we're doing here.

154
00:09:28.600 --> 00:09:32.380
We said that in the producer we can talk about changing the state but we're not worried about that right

155
00:09:32.380 --> 00:09:33.260
now.

156
00:09:33.550 --> 00:09:38.470
So let's go back to where we were and we had the store variable and we saw one method on the store called

157
00:09:38.470 --> 00:09:39.340
gets the.

158
00:09:39.700 --> 00:09:42.610
And this just gets whatever the state is at that time.

159
00:09:42.730 --> 00:09:46.270
Right now that's our initial state because there haven't been any changes.

160
00:09:46.270 --> 00:09:48.770
We also saw that to make a change to our state.

161
00:09:48.790 --> 00:09:51.140
We have to dispatch something.

162
00:09:51.430 --> 00:09:55.330
What is that something we have to dispatch what's called an action.

163
00:09:55.510 --> 00:09:56.760
And you may be remembering Hey action.

164
00:09:56.770 --> 00:09:57.840
I think I've seen that before.

165
00:09:57.880 --> 00:10:01.750
Well action was that second parameter right here.

166
00:10:01.750 --> 00:10:05.100
An action is an object.

167
00:10:05.250 --> 00:10:09.580
That's really it an action is an object when you dispatch an action.

168
00:10:09.660 --> 00:10:14.400
You have to send to the dispatch function some kind of special object.

169
00:10:14.720 --> 00:10:23.190
Well what is that special object have that special object always has a key and that key has to be called

170
00:10:23.220 --> 00:10:24.510
type.

171
00:10:24.510 --> 00:10:28.140
So what's really nice about redoes even is when you try to do something wrong it really gives you a

172
00:10:28.140 --> 00:10:29.070
good error message.

173
00:10:29.160 --> 00:10:31.620
Actions may not have an undefined type property.

174
00:10:31.620 --> 00:10:33.170
Have you misspelt constant.

175
00:10:33.330 --> 00:10:37.590
Well I haven't really missed all that constant here but I didn't pass in a key of type.

176
00:10:37.590 --> 00:10:41.100
I'm going to pass in a key of type and I'll set this to be.

177
00:10:41.490 --> 00:10:42.790
Hello.

178
00:10:44.460 --> 00:10:48.930
And all I get back is this object with a type of Hello.

179
00:10:49.440 --> 00:10:51.240
Did I make any changes to my state.

180
00:10:51.240 --> 00:10:52.930
How do we C-store dockets.

181
00:10:53.640 --> 00:10:59.390
Now everything kind of looks the same but I dispatched in action.

182
00:10:59.520 --> 00:11:01.430
So what is the purpose of this action.

183
00:11:01.440 --> 00:11:08.340
Well the way that we make changes to our state is by dispatching an action and when we dispatch an action

184
00:11:08.340 --> 00:11:10.900
we go back to our producer.

185
00:11:11.310 --> 00:11:16.320
So let's go take a look at all of these put together and let's get some debuggers to see how data flows

186
00:11:16.320 --> 00:11:17.300
in our application.

187
00:11:17.460 --> 00:11:19.940
I'm going to refresh the page and we're going to do this line by line.

188
00:11:20.100 --> 00:11:25.110
So we are going to make a function called Root reducer and before we do that let's would make a variable

189
00:11:25.110 --> 00:11:28.050
called initials D and initials D.

190
00:11:28.050 --> 00:11:32.850
Once again is going to be an object that contains a key of count and a value of zero.

191
00:11:32.850 --> 00:11:37.920
Remember the first parameter to a root reducer is going to be whatever the state is in the event that

192
00:11:37.920 --> 00:11:39.340
we don't pass in anything here.

193
00:11:39.390 --> 00:11:41.530
We'll set it to be initials D.

194
00:11:42.270 --> 00:11:45.270
We'll see in a little bit why we want to do this.

195
00:11:45.270 --> 00:11:47.760
We're then going to pass in some kind of action.

196
00:11:47.910 --> 00:11:52.920
And what I'm going to do inside of here is just throw a debugger keyword and then we're going to return

197
00:11:52.950 --> 00:11:53.730
this.

198
00:11:54.270 --> 00:11:57.250
So you might be wondering well when does this reduce or actually get triggered.

199
00:11:57.300 --> 00:11:58.260
Well let's go see.

200
00:11:58.260 --> 00:12:00.810
So you might be wondering when does this reduce or actually get triggered.

201
00:12:00.810 --> 00:12:01.830
Well let's see.

202
00:12:02.070 --> 00:12:06.640
I'll make a variable called store and I will set that to be redux.

203
00:12:06.660 --> 00:12:10.950
That creates a member capital redux comes in from that script that we loaded We're going to pass in

204
00:12:10.950 --> 00:12:11.910
the root reducer.

205
00:12:12.240 --> 00:12:17.560
And the second that I make this store we go right to our producer.

206
00:12:17.610 --> 00:12:23.010
What's interesting here is that the first time that you make a store redux actually dispatches an action

207
00:12:23.670 --> 00:12:28.220
you can see that that action rate here is a special object.

208
00:12:28.260 --> 00:12:34.320
Remember every action has to be an object with a key of type and the type right here is this at redux

209
00:12:34.370 --> 00:12:35.110
in it.

210
00:12:35.370 --> 00:12:40.700
This is done internally by redux to see what our initial state is.

211
00:12:40.980 --> 00:12:45.330
So the reason why we set this default parameter right here is because the first time that we make our

212
00:12:45.330 --> 00:12:49.750
store the reducer is run and an initial state is created.

213
00:12:49.950 --> 00:12:55.020
If we didn't have this default parameter we just be returning whatever state was which in our case wasn't

214
00:12:55.020 --> 00:12:58.540
really anything we didn't pass in any specific state.

215
00:12:58.590 --> 00:13:03.960
So it's important that the very first time that the reducer is run which happens when the store is created

216
00:13:04.320 --> 00:13:07.050
that we return some default state.

217
00:13:07.170 --> 00:13:12.170
So let's go back to our council and let's go see what's going on here and we get back.

218
00:13:12.190 --> 00:13:13.920
And that's that's totally fine.

219
00:13:14.490 --> 00:13:19.980
So if we look right now this is our reducer and this right here was our store and we saw that when we

220
00:13:19.980 --> 00:13:25.050
made the store it went straight to the reducer right away to figure out what the state was and what's

221
00:13:25.050 --> 00:13:31.020
nice about that is we can call store Dagget state and right away we know exactly what our state is at

222
00:13:31.020 --> 00:13:32.630
that time.

223
00:13:32.760 --> 00:13:37.820
If you remember the way to make changes to the state is to dispatch an action.

224
00:13:37.830 --> 00:13:41.230
How do we dispatch an action who can dispatch an action the store.

225
00:13:41.730 --> 00:13:43.930
So the store is going to dispatch an action.

226
00:13:43.950 --> 00:13:49.920
If you remember one action was well let's see if it yells at us actions have to be plain objects.

227
00:13:49.980 --> 00:13:52.450
OK let's try to just pass in a plain object.

228
00:13:52.710 --> 00:13:54.600
Well they got to be a little bit more than that.

229
00:13:54.660 --> 00:13:58.440
Actions have to have a defined type property.

230
00:13:58.440 --> 00:14:06.030
We always have to pass in a type that was passed in a type of increment and you might be wondering why

231
00:14:06.030 --> 00:14:07.130
I'm doing this in all caps.

232
00:14:07.140 --> 00:14:08.700
You'll see that very commonly done.

233
00:14:08.760 --> 00:14:10.100
So don't be too alarmed by that.

234
00:14:10.290 --> 00:14:11.780
I'm going to dispatch an action of increment.

235
00:14:11.790 --> 00:14:13.660
And what do you think's going to happen.

236
00:14:15.160 --> 00:14:18.790
We'll remember that when I dispatch an action we go back to the reducer.

237
00:14:18.790 --> 00:14:21.810
So I'm going to run this and we're going to go right back to the reducer.

238
00:14:22.150 --> 00:14:28.660
But notice here that we didn't pass in any state the way that redox works is that it will take whatever

239
00:14:28.660 --> 00:14:31.840
that state is at the time and let us know.

240
00:14:32.410 --> 00:14:39.550
But what's nice here is we actually did pass in an action that action had a type of increment.

241
00:14:39.720 --> 00:14:44.220
So why don't we try to make a change to that's the what we're going to do here.

242
00:14:44.380 --> 00:14:58.740
Back and our producer you simply say if action that type is increment Well then let's go and take that

243
00:14:58.740 --> 00:15:07.530
state and the county property and incremented by one and then we'll just return the state otherwise

244
00:15:07.890 --> 00:15:09.810
just return whatever state is.

245
00:15:09.990 --> 00:15:13.360
So all we're doing is just adding one to state no problem.

246
00:15:13.890 --> 00:15:14.880
Let's go try this again.

247
00:15:14.880 --> 00:15:19.140
We'll put a debugger right here to make sure that we actually increment correctly.

248
00:15:19.200 --> 00:15:21.820
Once again we'll go create the store because we have to do this again.

249
00:15:21.890 --> 00:15:22.420
I'm pressing.

250
00:15:22.430 --> 00:15:28.040
I've been down to get to my last commands and I'm going to dispatch in action.

251
00:15:28.290 --> 00:15:32.790
But remember what key does my action has to have first off remember actions have to be objects.

252
00:15:32.790 --> 00:15:36.010
In this case you're going to learn a little bit later that there is middleware.

253
00:15:36.030 --> 00:15:41.330
Other tools for asynchronous actions but right now just say actions have to be objects right now.

254
00:15:42.210 --> 00:15:48.150
So our action has to have a key of what Remember that he was type and this case I want the tape to be

255
00:15:48.150 --> 00:15:52.830
increment that way I can add one to the count and get back my seat.

256
00:15:53.130 --> 00:15:54.240
So let's try this right now.

257
00:15:54.360 --> 00:15:56.880
I'm going to pass in increment.

258
00:15:56.880 --> 00:16:02.740
I'm going to run this and we're going to get to this debugger and then I'm going to return the state.

259
00:16:03.270 --> 00:16:05.160
Well let's go see what our state looks like.

260
00:16:05.160 --> 00:16:11.920
Remember we can do that by store that gets state and we can see right here that the count is 1.

261
00:16:12.030 --> 00:16:15.530
Now you may be looking at this and saying oh that's great no problem.

262
00:16:15.810 --> 00:16:19.260
But we've done something that's not great right here.

263
00:16:19.260 --> 00:16:25.240
You're going to see some errors when you're reducers are not pure functions.

264
00:16:25.410 --> 00:16:30.030
So if you see what I did right now actually directly mutated the state and things might be working a

265
00:16:30.030 --> 00:16:30.450
little bit.

266
00:16:30.450 --> 00:16:34.170
If I dispatch another action and I go take a look at my city.

267
00:16:34.260 --> 00:16:36.290
It's going up like I expected to.

268
00:16:36.420 --> 00:16:38.940
But this isn't going to work in all scenarios.

269
00:16:38.940 --> 00:16:43.020
You always want to make sure that your reducers are pure functions.

270
00:16:43.060 --> 00:16:45.190
See an example of this a little bit later.

271
00:16:45.780 --> 00:16:51.150
So what I'm going to do is instead of directly mutating my state I'm going to make a copy of that state

272
00:16:51.840 --> 00:16:56.130
and go to refactor my producer to be a pure function.

273
00:16:56.130 --> 00:16:58.550
So we're going to go back and how do we do that.

274
00:16:58.620 --> 00:17:00.850
Well we can make some kind of new object.

275
00:17:00.900 --> 00:17:07.860
We can make a copy of that initial state so we could say let our new state be a copy.

276
00:17:07.860 --> 00:17:11.170
We can do that with objects that assign or spread operator.

277
00:17:11.430 --> 00:17:17.760
But we're going to do is simply make a copy of that object right here with our state and then we can

278
00:17:17.760 --> 00:17:20.370
return our new state over here.

279
00:17:23.320 --> 00:17:25.600
Otherwise we'll just return whatever the state is.

280
00:17:25.630 --> 00:17:32.120
Once again let's go create the store let's go dispatch an action of increment.

281
00:17:32.120 --> 00:17:33.630
Remember we always need a type.

282
00:17:33.840 --> 00:17:37.950
We're going to add increment here and we'll see what happens.

283
00:17:37.960 --> 00:17:40.910
Remember always can you store that gets.

284
00:17:40.910 --> 00:17:43.180
It looks like it's going up by 1.

285
00:17:43.300 --> 00:17:45.080
Looks like it's going up by two.

286
00:17:45.100 --> 00:17:46.620
Looks like it's going up by three.

287
00:17:46.690 --> 00:17:48.490
But what's the difference here than what we had before.

288
00:17:48.490 --> 00:17:50.370
Well we didn't mutate the state.

289
00:17:50.380 --> 00:17:54.280
We made a copy of our stake in order for redux to work.

290
00:17:54.280 --> 00:17:57.140
You always always have to use pure functions.

291
00:17:57.160 --> 00:18:02.070
This is important when composing different functions together or reverting back to a previous state.

292
00:18:02.350 --> 00:18:07.600
If your producers are pure functions redox gives you the ability to time travel and that sounds really

293
00:18:07.600 --> 00:18:12.130
cool but in theory it's just the idea of going and seeing what your previous state looked like.

294
00:18:12.400 --> 00:18:17.330
But if you keep overriding your state and your writing impure functions with side effects you're not

295
00:18:17.330 --> 00:18:18.330
going to be able to do that.

296
00:18:18.460 --> 00:18:22.990
So always make sure that you're making copies of your state and not directly mutating your state.

297
00:18:23.020 --> 00:18:27.770
You will get errors that are really hard to debug if you're reducers are not pure functions.

298
00:18:27.970 --> 00:18:31.740
So we've made an action of increment.

299
00:18:32.110 --> 00:18:35.270
Let's go try to Decora and let's see what that looks like.

300
00:18:35.500 --> 00:18:43.280
Well we're going to go back to our producer and inside of our producer we can add another condition.

301
00:18:43.320 --> 00:18:52.540
You can say if action that type is Decker and well then let's go do exactly what we did here except

302
00:18:54.430 --> 00:18:56.820
we're going to subtract from the count.

303
00:18:57.040 --> 00:18:59.170
Remember here this is the default condition here.

304
00:18:59.200 --> 00:19:00.130
We just return the state.

305
00:19:00.130 --> 00:19:03.450
This happens the very first time that we make that store.

306
00:19:03.460 --> 00:19:08.800
So the very first thing that redux dispatches is an object or an action with a key of type and the value

307
00:19:08.800 --> 00:19:11.250
of at redux slash.

308
00:19:11.260 --> 00:19:17.170
And this right here is simply what redux uses to figure out what our initial state is and that's what

309
00:19:17.170 --> 00:19:18.770
we pass right here.

310
00:19:18.820 --> 00:19:21.220
That's our default state in the future.

311
00:19:21.220 --> 00:19:25.540
Once that default state is created it's just going to give us whatever the state is at that time.

312
00:19:25.630 --> 00:19:27.990
And then we can dispatch an action.

313
00:19:28.720 --> 00:19:30.730
So here's what our new REDUCE-IT is going to look like.

314
00:19:30.730 --> 00:19:37.780
Once again we're going make that store and we will go dispatch an action member actions always have

315
00:19:37.780 --> 00:19:39.130
to be objects right now.

316
00:19:39.130 --> 00:19:46.270
They always have to have a key of type when to an increment and when we do this we expect to see our

317
00:19:46.270 --> 00:19:48.940
state have a count of one.

318
00:19:50.080 --> 00:19:54.570
Let's go dispatch increment again and increment again and increment again one more time.

319
00:19:54.580 --> 00:19:56.260
We expect it to have accounted for.

320
00:19:56.410 --> 00:20:00.460
How about this new one document and document and decrement.

321
00:20:00.480 --> 00:20:06.090
What do we see right now we're back to what so the way that this works is you have some kind of data

322
00:20:06.090 --> 00:20:07.380
that you work with.

323
00:20:07.500 --> 00:20:12.660
This could be like a list of to use or maybe it's a user and maybe you added to do or remove it to do

324
00:20:12.660 --> 00:20:13.710
or update it to do.

325
00:20:13.800 --> 00:20:19.820
Or maybe you update a user or remove a user the way you make that work is by dispatching actions.

326
00:20:20.070 --> 00:20:27.390
So the way the data flows in this redux application is first we create a store but before we create

327
00:20:27.390 --> 00:20:34.650
a store we need to create a producer with some initial state because remember when we create the store

328
00:20:34.890 --> 00:20:41.030
the reducer is run and our initial state is defined.

329
00:20:41.700 --> 00:20:50.880
What we then do is whenever we want to see our state we run a store that gets the

330
00:20:54.230 --> 00:21:03.050
and whenever we want to make a change to our state we dispatch an action.

331
00:21:03.140 --> 00:21:14.780
Remember actions are objects and actions must have a key of type.

332
00:21:15.090 --> 00:21:22.600
If they don't get in there now we saw that actions are just very very simple objects.

333
00:21:22.890 --> 00:21:26.720
But sometimes you don't always want to pass in that entire object.

334
00:21:27.030 --> 00:21:31.270
So we can write functions that return objects.

335
00:21:31.380 --> 00:21:40.760
We're going to talk about this idea of writing a function that returns an object to be more particular.

336
00:21:40.920 --> 00:21:47.370
We're going to write a function that returns an action.

337
00:21:47.370 --> 00:21:48.090
What's an action.

338
00:21:48.120 --> 00:21:50.120
It's an object with a key of type.

339
00:21:50.130 --> 00:21:55.320
So here are just some notes you can take a look at what we're going to do is we're going to make a function

340
00:21:55.740 --> 00:22:00.150
called increment and increment is very simple.

341
00:22:00.150 --> 00:22:07.230
It's going to return an object and inside of this object we're going to have a type of increment and

342
00:22:07.230 --> 00:22:09.450
that's it.

343
00:22:09.450 --> 00:22:11.530
Interesting.

344
00:22:11.610 --> 00:22:16.200
So there are two ways that I can dispatch an action right now to store that dispatch.

345
00:22:16.200 --> 00:22:22.220
Let's just take a quick look at what our state is so we see all restarting store that dispatch here

346
00:22:22.230 --> 00:22:26.050
I can pass in the entire object with the type of increment.

347
00:22:26.160 --> 00:22:27.200
What else can I use.

348
00:22:27.190 --> 00:22:33.660
Well I can use my increment function when I dispatch that function.

349
00:22:34.350 --> 00:22:36.080
It's going to return an object.

350
00:22:36.120 --> 00:22:39.860
So I'm dispatching the result of this function which is an object.

351
00:22:39.980 --> 00:22:41.130
I'd take a look at my state.

352
00:22:41.370 --> 00:22:42.840
I'm now up to two.

353
00:22:43.350 --> 00:22:49.500
This right here is simply a function that returns an action we call those action creators because there

354
00:22:49.500 --> 00:22:51.610
are functions that return actions.

355
00:22:51.660 --> 00:22:55.990
Let's go take a quick break and we'll talk about a little bit more complex of a redux example.

356
00:22:56.010 --> 00:22:56.670
In the next video.
