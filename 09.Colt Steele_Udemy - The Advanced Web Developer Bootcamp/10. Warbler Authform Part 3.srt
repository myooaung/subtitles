1
00:00:00,380 --> 00:00:03,120
It it's time to start working on our actions.

2
00:00:03,120 --> 00:00:06,700
This is the missing piece of redux that we haven't spent a lot of time on.

3
00:00:06,780 --> 00:00:11,870
So what we need to do inside of our actions is create a file for us.

4
00:00:11,970 --> 00:00:14,460
We're also going to make one for our errors as well.

5
00:00:14,490 --> 00:00:15,370
We'll call that errors.

6
00:00:15,450 --> 00:00:16,340
Yes.

7
00:00:16,350 --> 00:00:21,540
These are going to be actions that we're going to dispatch we'll use our action types that we have before.

8
00:00:21,630 --> 00:00:24,750
So in our Oggi we need to make an Ajax request to our backyard.

9
00:00:25,140 --> 00:00:27,990
So each of these actions we can bring in actually those.

10
00:00:28,050 --> 00:00:34,960
But what I'd like to do is abstract all that logic to a file called API Dutchie as inside services.

11
00:00:35,190 --> 00:00:39,240
This file is going to be a little bit tricky at first but this is going to be really helpful to build

12
00:00:39,240 --> 00:00:42,220
a generic way to make an Ajax request.

13
00:00:42,540 --> 00:00:46,380
So we're going to import exodus from access.

14
00:00:46,700 --> 00:00:51,180
So if we remember earlier actuals is a really friendly way to make each of your requests similar in

15
00:00:51,180 --> 00:00:52,120
terms of jaggery.

16
00:00:52,140 --> 00:00:54,130
But a much smaller library.

17
00:00:54,210 --> 00:00:58,260
So what I want to do here is export that function and we'll call that API call.

18
00:00:58,320 --> 00:01:04,030
It's going to accept some kind of method some path and some kind of data.

19
00:01:04,380 --> 00:01:05,830
It's a very generic function.

20
00:01:05,970 --> 00:01:14,460
And what it's going to do is return a new promise so we're going to do is resolve that promise when

21
00:01:14,610 --> 00:01:16,220
our actions are resolved.

22
00:01:16,560 --> 00:01:18,570
So we're going to use the promise constructor.

23
00:01:18,750 --> 00:01:19,170
If you remember.

24
00:01:19,200 --> 00:01:20,120
Yes 2015.

25
00:01:20,150 --> 00:01:21,300
This accepts a function

26
00:01:24,220 --> 00:01:28,000
with two parameters we can call those whatever we want but we'll call those resolve and reject

27
00:01:30,680 --> 00:01:31,570
inside here.

28
00:01:31,580 --> 00:01:37,070
We're going to return our Actually US request with whatever method you pass.

29
00:01:37,490 --> 00:01:41,450
We can't do that because we need to evaluate whatever the value of methodis

30
00:01:44,410 --> 00:01:51,040
this is going to return to us function so we'll invoke that function with the path and data when that's

31
00:01:51,040 --> 00:01:53,520
done will run a function with some response

32
00:01:56,270 --> 00:02:03,250
and inside of this response will return resolve and we'll pass in resident data.

33
00:02:03,490 --> 00:02:10,370
If it doesn't go well we'll catch with some kind of error and we'll simply return or reject with error

34
00:02:10,580 --> 00:02:13,550
response that data error.

35
00:02:13,700 --> 00:02:15,890
So you might be wondering where rest that data comes from.

36
00:02:15,890 --> 00:02:17,540
And response that data comes from

37
00:02:20,330 --> 00:02:27,280
the idea here is that when we get back information from ASIO's it always comes in in a certain object.

38
00:02:27,410 --> 00:02:32,690
In this case it's going to come in in an object called response and a subobject called data when something

39
00:02:32,690 --> 00:02:34,570
goes wrong inside of data.

40
00:02:34,580 --> 00:02:38,360
There's a sub object called error which is what we're sending from our server as the error handler that

41
00:02:38,360 --> 00:02:43,740
we built with the successful request we always get back some object of data.

42
00:02:43,990 --> 00:02:48,010
So we're taking the data that we get back from X-ers I'm turning it into an object that we can easily

43
00:02:48,010 --> 00:02:48,890
work with.

44
00:02:49,360 --> 00:02:59,280
So we're going to be using this make API call inside of our off J S So we first want to import API call

45
00:02:59,460 --> 00:03:08,660
from that I-Slash data slash services slashy API.

46
00:03:09,090 --> 00:03:19,870
Let's also import our set current user action type from data I-Slash action types same thing is action

47
00:03:19,870 --> 00:03:27,750
type slash index We're also going make a function that's going to be an action creator.

48
00:03:27,780 --> 00:03:34,790
We'll call this function Sacranie user and all that's going to do is accept a user will return some

49
00:03:34,790 --> 00:03:40,280
object with a type of that current user and the entire user.

50
00:03:40,350 --> 00:03:46,210
This is what we're going to dispatch and send to our redox reducer.

51
00:03:46,240 --> 00:03:49,930
So what's the function that we're actually going to run to log in or sign up successfully.

52
00:03:49,930 --> 00:03:50,980
This one's a little trickier.

53
00:03:51,010 --> 00:03:52,430
We'll call this off user.

54
00:03:52,720 --> 00:03:57,670
It's going to accept the type is going to sign up or sign in and some user data is going to come in

55
00:03:57,910 --> 00:04:03,140
from the request or return a function with dispatch.

56
00:04:03,140 --> 00:04:08,180
We're going to use redux thunked to do this and this is where it gets a little trickier.

57
00:04:08,210 --> 00:04:12,610
We still have to wait for our API call to finish before we dispatched this action.

58
00:04:12,830 --> 00:04:18,890
And since we're not using any kind of lifecycle method we need another promise to make sure that we

59
00:04:18,890 --> 00:04:22,730
wait until the API call has finished before we dispatch anything.

60
00:04:22,940 --> 00:04:25,210
So we going to return a new promise.

61
00:04:25,640 --> 00:04:29,610
And once again we have those two parameters resolve and reject.

62
00:04:30,110 --> 00:04:36,500
And this is a function and inside of this function we're going to return API call and here will pass

63
00:04:36,500 --> 00:04:46,850
in a post to slash HDI slash slash whatever the type is that's passed then sign up sign in.

64
00:04:46,880 --> 00:04:51,590
We don't know yet here we'll pass that user data as well.

65
00:04:51,590 --> 00:04:53,960
When that's done we're going to run a function with some data

66
00:04:57,950 --> 00:05:02,750
and if it returns successfully we're simply going to set some information in local storage.

67
00:05:02,750 --> 00:05:05,700
This is how market user has logged in.

68
00:05:07,460 --> 00:05:13,450
So we'll that a key or GWG token and a value.

69
00:05:13,620 --> 00:05:17,280
Now we get back Deodato.

70
00:05:18,710 --> 00:05:24,050
So if you remember our response from the server we get back an object with the token profile image the

71
00:05:24,050 --> 00:05:25,570
user name the ID.

72
00:05:25,880 --> 00:05:29,680
So we're going to the structure what we get back from the response with the token.

73
00:05:29,720 --> 00:05:34,430
And then the rest of the information will call that user sensitive data our token.

74
00:05:34,550 --> 00:05:41,480
We can just type in token and I think we're going to do is dispatch our action creator called Send current

75
00:05:41,480 --> 00:05:45,230
user and that's going to pass in our user.

76
00:05:45,410 --> 00:05:50,890
This is where we're going to go and create that current user in a redux or we'll then resolve.

77
00:05:51,890 --> 00:05:56,820
We're going to save this and we'll see what happens when we test this.

78
00:05:58,130 --> 00:06:04,670
Let's go back to our component to make sure that we can use this off user function so back in our manger

79
00:06:04,720 --> 00:06:08,600
Yes we're going to have to bring in this off user function.

80
00:06:09,020 --> 00:06:19,950
So at the very top We're going to import all the user from that last store slash actions slash off and

81
00:06:19,950 --> 00:06:25,080
off user is going to be passed in as a prop to or.

82
00:06:25,310 --> 00:06:32,020
We can call this product on off a value of off user will also passes down as well to our other offer

83
00:06:33,890 --> 00:06:34,490
no matter what.

84
00:06:34,490 --> 00:06:39,720
We're still going to be using that user inside of our form.

85
00:06:39,810 --> 00:06:43,020
We want to handle that summiting of the form.

86
00:06:44,010 --> 00:06:46,480
So let's write a function called handle submit.

87
00:06:46,950 --> 00:06:50,860
That will be run when the form is submitted.

88
00:06:51,100 --> 00:06:55,990
And this is going to be a function we use the same functions and X we saw for and here will prevent

89
00:06:55,990 --> 00:06:58,100
the default actions of the page just fresh.

90
00:06:59,620 --> 00:07:02,670
We're going to figure out what the off tape is.

91
00:07:02,740 --> 00:07:07,680
So I'll say it does not prop's that seiner then cyano.

92
00:07:08,070 --> 00:07:09,460
Otherwise seinen.

93
00:07:09,880 --> 00:07:14,130
And this is going to be useful for determining the type of requests that we're going to make.

94
00:07:14,260 --> 00:07:20,360
We'll then call this our props on off and pass in the off tape.

95
00:07:20,440 --> 00:07:23,230
And whatever our state is that will be our data.

96
00:07:23,740 --> 00:07:25,140
So this is a promise to us.

97
00:07:25,180 --> 00:07:33,720
So when that promise is done we'll run a function and inside of here we'll eventually redirect the user

98
00:07:33,720 --> 00:07:34,590
to another page.

99
00:07:34,590 --> 00:07:38,730
Right now it's going to cancel out log logged in let's see if this works

100
00:07:42,380 --> 00:07:44,270
would see this and test it out in the browser.

101
00:07:44,660 --> 00:07:46,520
Let's make sure that things are running properly.

102
00:07:46,820 --> 00:07:52,010
So if your refresh the page and seinen looks like we don't even have a button to sign up what's good

103
00:07:52,040 --> 00:07:56,030
make sure that we first have a button would be tragic if we read all this code and couldn't even submit

104
00:07:56,030 --> 00:07:56,870
them for.

105
00:07:57,260 --> 00:08:04,000
So the very bottom of them make sure that I have a button inside we'll pass in a class name of BGN BGN

106
00:08:04,000 --> 00:08:07,590
and primary pretty standard bootstrap button styling with BT and block as well.

107
00:08:07,620 --> 00:08:12,080
NBT and LG also give us a type of cement.

108
00:08:12,320 --> 00:08:18,170
Let's close those quotes right there and here will passen our prop button text.

109
00:08:18,180 --> 00:08:22,350
Let's see if that can match the browser and we see a sign up on.

110
00:08:22,350 --> 00:08:23,640
Great.

111
00:08:24,390 --> 00:08:26,450
So will hasn't the US has to clean this up for now.

112
00:08:26,490 --> 00:08:27,180
That's OK.

113
00:08:27,210 --> 00:08:28,240
We'll see if this works.

114
00:08:29,020 --> 00:08:32,560
So if it's a crime to have tools getting a couple warnings we'll clear those up a little bit.

115
00:08:34,310 --> 00:08:37,030
But we're not getting anything really on the air front yet.

116
00:08:37,340 --> 00:08:42,410
So let's try Tristana we'll sign up with some information when we go through this.

117
00:08:42,420 --> 00:08:45,800
It's good to see this the proper start ON-OFF is not a function.

118
00:08:46,170 --> 00:08:48,080
So why are we getting this error.

119
00:08:48,690 --> 00:08:55,160
Well we want to make sure that we actually pass on off as MAP dispatch to process.

120
00:08:55,290 --> 00:08:59,330
So we need to pass that in right here for map dispatch to profs.

121
00:08:59,340 --> 00:09:07,820
We also need to make sure that we pass that down as a prop inside of our main component.

122
00:09:07,970 --> 00:09:13,560
So in our main component will change the syntax here so that we can structure a little bit of information

123
00:09:13,560 --> 00:09:14,280
from prop's

124
00:09:17,670 --> 00:09:27,550
So let's go fix that syntax and inside of here let's make sure that we structure all the user from prop's.

125
00:09:27,620 --> 00:09:31,970
So now that we're correctly getting the right product we can pass that down to our components.

126
00:09:31,970 --> 00:09:34,740
So it's try to sign up first.

127
00:09:34,820 --> 00:09:36,350
So the image you are now.

128
00:09:36,480 --> 00:09:38,650
And now we're actually signing up.

129
00:09:38,970 --> 00:09:43,270
So we were getting at that request because we actually haven't created a user by that.

130
00:09:43,830 --> 00:09:47,700
So there's a lot that we've really done here and what we'll do in the next section is review the Kodaly

131
00:09:47,700 --> 00:09:51,180
Britain so far because we've done quite a bit to get everything to communicate.
