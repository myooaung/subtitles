1
00:00:00,260 --> 00:00:09,030
All right last property here around the flex trifecta is flex shrink so shrink is similar to grow.

2
00:00:09,120 --> 00:00:10,730
Obviously it's different.

3
00:00:10,770 --> 00:00:14,480
It dictates how items should shrink when there isn't enough space in the container.

4
00:00:14,730 --> 00:00:18,940
I will mention the math is actually different for flex shrink.

5
00:00:18,990 --> 00:00:22,540
I'm not going to go into it but there are some articles explaining it.

6
00:00:22,680 --> 00:00:24,840
It's very confusing to be honest.

7
00:00:24,870 --> 00:00:29,670
You don't really need to go into it but if you want to work out the equation it is possible but it uses

8
00:00:29,670 --> 00:00:35,250
a different formula than the one used to figure out how to distribute the space in Flex grow.

9
00:00:35,550 --> 00:00:42,470
But all that we really need to know is that it allows us to roughly proportionately dictate how space

10
00:00:42,470 --> 00:00:45,870
should shrink or how items should shrink when the space shrinks.

11
00:00:45,870 --> 00:00:50,520
So there's not enough space which right now there's plenty of space so let's make a condition when there

12
00:00:50,670 --> 00:00:57,020
isn't enough let's say let's give them a flex basis of 500 pixels was enough.

13
00:00:57,360 --> 00:00:58,130
Yes.

14
00:00:58,170 --> 00:01:03,860
So they are combined 2000 pixels which is greater than the width of this.

15
00:01:03,870 --> 00:01:05,870
So how should they shrink.

16
00:01:05,880 --> 00:01:14,360
Right now they're shrinking evenly which leads us to believe that flex shrink by default is 1.

17
00:01:14,790 --> 00:01:15,820
So nothing changes.

18
00:01:15,840 --> 00:01:20,970
They all shrink at the same rate and you know I can continue to shrink like that and you'll see they

19
00:01:20,970 --> 00:01:22,620
all shrink at the same rate.

20
00:01:22,620 --> 00:01:23,420
That's the default.

21
00:01:23,430 --> 00:01:25,730
But let's say that I actually want box.

22
00:01:25,920 --> 00:01:35,000
Let's go with I don't know three I want Box 3 to shrink faster so I can manually set it to be two.

23
00:01:35,550 --> 00:01:38,230
And you'll see that it already has shrunk.

24
00:01:38,230 --> 00:01:44,190
Or how about for and so I can see that flex shrink to zero for the other ones.

25
00:01:44,270 --> 00:01:49,670
And what that does is it says these should never shrink and you can see they actually go outside the

26
00:01:49,670 --> 00:01:50,730
edge of the container.

27
00:01:51,620 --> 00:01:53,190
And they don't shrink at all.

28
00:01:53,990 --> 00:01:55,850
So maybe not that useful.

29
00:01:55,850 --> 00:01:58,660
Sometimes you do want to set flex shrink to zero.

30
00:01:58,760 --> 00:02:00,190
But in this case we don't.

31
00:02:00,620 --> 00:02:05,270
And that's also because we don't have like a rap enabled so they go outside of the container.

32
00:02:05,780 --> 00:02:11,210
But the key thing I'm trying to show is by setting flex shrink to zero on all of the others and then

33
00:02:11,300 --> 00:02:20,960
any number on poor little three here Mr. or Mrs. three has to shrink to make up as much space as possible

34
00:02:20,980 --> 00:02:23,490
it shrinks completely and it's still not enough.

35
00:02:23,600 --> 00:02:25,460
If you'll notice three and four.

36
00:02:25,490 --> 00:02:27,140
Like I said is out of bounds.

37
00:02:27,140 --> 00:02:29,840
So we could also give flex strength to another one of them.

38
00:02:29,850 --> 00:02:32,590
How about we'll go with four.

39
00:02:33,230 --> 00:02:36,450
So what happens is that flex basis is set to 500.

40
00:02:36,470 --> 00:02:37,580
They each have that.

41
00:02:37,970 --> 00:02:40,760
And so ideally they take up five hundred but that's not an option.

42
00:02:40,790 --> 00:02:42,080
There's not enough space.

43
00:02:42,200 --> 00:02:44,700
So they have to shrink down to fit inside this container.

44
00:02:44,840 --> 00:02:46,400
Well where's that space come from.

45
00:02:46,400 --> 00:02:50,170
It comes evenly from three and four is split between them.

46
00:02:50,780 --> 00:02:51,910
So that's the basics.

47
00:02:51,950 --> 00:02:53,940
But here's a more common scenario.

48
00:02:54,710 --> 00:03:02,520
If you had maybe three boxes let's say keep going back to a column accidentally.

49
00:03:02,530 --> 00:03:10,830
We want to know we have three boxes let's set foot flex bases to be two hundred and fifty maybe OK.

50
00:03:11,320 --> 00:03:18,920
And let's give them a flex grow to start actually let's do a little bigger Let's do 350 perfect.

51
00:03:18,940 --> 00:03:19,140
OK.

52
00:03:19,150 --> 00:03:20,050
So they're even.

53
00:03:20,210 --> 00:03:22,770
And let's get rid of that Flextronics zero.

54
00:03:23,290 --> 00:03:28,040
Let's give them all flex grow of one.

55
00:03:28,120 --> 00:03:30,360
So they grow to take that space up.

56
00:03:30,400 --> 00:03:35,190
So right now of course they shrink at the same rate because flex shrink by default is one.

57
00:03:35,540 --> 00:03:40,210
OK but let's say I actually want one in three to shrink faster.

58
00:03:40,660 --> 00:03:47,260
So that's easy to do I just will do a flex shrink and we can just do two to start on one.

59
00:03:47,740 --> 00:03:55,060
And then on three and you'll see that it doesn't kick in right away because flex basis is set to be

60
00:03:55,060 --> 00:03:56,780
350 pixels.

61
00:03:57,070 --> 00:04:06,190
So if we inspect this sorry if there's a lot going on in screen right now re-inspect one of them.

62
00:04:06,610 --> 00:04:07,170
OK.

63
00:04:07,270 --> 00:04:09,550
We're at 447 pixels there.

64
00:04:10,400 --> 00:04:16,570
And they keep going to inspect again for 12 for 12 for 12.

65
00:04:16,690 --> 00:04:20,200
So they're evenly sized but as soon as I go below 350

66
00:04:23,150 --> 00:04:27,120
did that happen yet here we go to 82.

67
00:04:27,560 --> 00:04:31,220
But this one in the middle is 316 and this one on the left is 282.

68
00:04:31,430 --> 00:04:35,850
So this one in the middle is not shrinking quite as fast as the two on the left and right.

69
00:04:35,930 --> 00:04:39,860
It does shrink because remember flex shrink is set to be one by default.

70
00:04:40,070 --> 00:04:42,040
So if I keep going to turn this off

71
00:04:45,670 --> 00:04:49,360
you'll see they shrink a lot faster twice as fast.

72
00:04:49,420 --> 00:04:51,350
But this one still does shrink.

73
00:04:51,550 --> 00:04:55,770
If I didn't want it to shrink at all I could set flex shrink

74
00:04:59,800 --> 00:05:03,320
to zero and I'm doing that on all boxes.

75
00:05:03,340 --> 00:05:08,830
I mean we only have three of them so I'm already assigning flex shrink on these two.

76
00:05:08,830 --> 00:05:10,880
So why not just assign it here to be more explicit.

77
00:05:11,050 --> 00:05:11,510
OK.

78
00:05:11,680 --> 00:05:13,840
So this middle one will not shrink at all.

79
00:05:13,850 --> 00:05:18,480
And now remember this number doesn't matter because it's just a ratio it's a proportion.

80
00:05:18,490 --> 00:05:20,320
So these are equivalent.

81
00:05:20,320 --> 00:05:21,700
They'll shrink at the same rate.

82
00:05:22,450 --> 00:05:23,110
Here we go.

83
00:05:27,200 --> 00:05:34,490
And if we inspect this one you'll see it's still 350 pixels even though we shrank it way down.

84
00:05:35,040 --> 00:05:42,150
And in fact if we shrink it too far down it still will stay 350 pixels the whole way even if it ruins

85
00:05:42,150 --> 00:05:43,820
everything at all costs.

86
00:05:43,830 --> 00:05:45,560
It's not budging.

87
00:05:45,570 --> 00:05:46,030
All right.

88
00:05:46,050 --> 00:05:48,300
So that's like shrink I guess I could show you.

89
00:05:48,330 --> 00:05:54,770
You know we could do the same thing but instead of doing let's go 0 1 and 2.

90
00:05:55,440 --> 00:05:59,920
Now if we shrink these down there you go see what happens.

91
00:05:59,920 --> 00:06:06,820
We end up with this guy not shrinking this one shrinking half as fast as this one or this one shrinks

92
00:06:06,820 --> 00:06:08,170
twice as fast as that one.

93
00:06:08,500 --> 00:06:09,610
So it's very useful.

94
00:06:09,610 --> 00:06:14,260
In particular when you have content that you know you want to emphasize at certain parts like if this

95
00:06:14,260 --> 00:06:20,650
was an add on mobile you don't want your ads to be gigantic or often with nav bars you want things to

96
00:06:20,650 --> 00:06:22,410
shrink in a particular way.

97
00:06:22,490 --> 00:06:28,120
You want your main links to the Home link maybe to stay larger than the little social media buttons

98
00:06:28,290 --> 00:06:32,930
will play around with it and you'll see in the next couple of videos how this all fits together.

99
00:06:32,980 --> 00:06:40,000
Which brings me to the very last thing our syntax here flex where we have flex grow flex strength and

100
00:06:40,000 --> 00:06:41,710
flex basis.

101
00:06:41,800 --> 00:06:43,130
Again the order does matter.

102
00:06:43,270 --> 00:06:50,320
So grow shrink basis and we can replace all of this well not all of it.

103
00:06:50,320 --> 00:06:54,900
In this case because we have three different numbers but all of this right here with a single line.

104
00:06:55,000 --> 00:07:04,880
So let's say I want them to all start off as the same size let's say 300 to 200 pixels smaller.

105
00:07:05,310 --> 00:07:06,660
So nothing will happen yet.

106
00:07:06,660 --> 00:07:09,900
But if I say the flex grow should be zero.

107
00:07:09,900 --> 00:07:13,230
I don't want them to grow and the shrink should be zero.

108
00:07:13,230 --> 00:07:18,600
What do you expect in code Penn. refreshed ahead of me darn them.

109
00:07:18,660 --> 00:07:20,240
But here's what we get.

110
00:07:20,310 --> 00:07:24,910
They stage 200 pixels they're not going to grow to use that space and they're not going to shrink.

111
00:07:24,960 --> 00:07:26,300
Not really that useful.

112
00:07:26,460 --> 00:07:29,130
So I could change like Schiro now to be one.

113
00:07:29,130 --> 00:07:34,210
What do you think will happen already that they all grow evenly to take up that space.

114
00:07:34,380 --> 00:07:39,430
And I could see that flex shrink to be one and they would all grow as well.

115
00:07:39,510 --> 00:07:44,760
Or excuse me I'll shrink evenly and then I could go down to one of these other ones that say box to

116
00:07:45,140 --> 00:07:52,380
like and say OK box two I actually want to grow twice as fast and have it shrink at the same rate but

117
00:07:52,440 --> 00:07:59,590
I want it's flex basis to start as 500 pixels and now it starts larger.

118
00:07:59,590 --> 00:08:00,640
It uses up space.

119
00:08:00,650 --> 00:08:10,320
If there's any and it shrinks at the same rate of one so that's a shorthand flex that's far more common.

120
00:08:10,320 --> 00:08:15,120
We pretty much never see people using flex grow flex basis separately sometimes.

121
00:08:15,140 --> 00:08:19,490
But most of the time you'll see them use them together with the flex prop..

122
00:08:19,490 --> 00:08:19,940
All right.

123
00:08:19,940 --> 00:08:24,320
Next up we're going to build a very simple little widget that I found on a game review Web site.
