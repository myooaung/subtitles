WEBVTT
1
00:00:01.680 --> 00:00:04.530
Now we'll talk about component architecture and react.

2
00:00:04.530 --> 00:00:09.240
This is essentially the idea of where you should put your state in your application and how props and

3
00:00:09.240 --> 00:00:11.250
state should interact together.

4
00:00:12.950 --> 00:00:20.210
Our objectives are to pass state to child components as props to to find which components own state

5
00:00:21.380 --> 00:00:26.670
and to use statelets functional components.

6
00:00:27.060 --> 00:00:33.570
First of all how state shared state is always passed from a parent downward to a child component never

7
00:00:33.570 --> 00:00:34.380
up.

8
00:00:34.380 --> 00:00:36.990
And it's always passed down as a prop.

9
00:00:36.990 --> 00:00:42.510
So even though you have state in your parent component the child component gets it as a prop.

10
00:00:43.020 --> 00:00:47.810
And another point here is that states should not be passed to a sibling or a parent.

11
00:00:47.820 --> 00:00:54.240
So you never pass your state up to a parent or sideways to another component next to you.

12
00:00:54.240 --> 00:00:59.660
This is actually fairly hard to do in re-act passing data to your parent or to your sibling.

13
00:00:59.700 --> 00:01:05.160
So the framework is designed in such a way that it makes it difficult to do the wrong thing.

14
00:01:05.160 --> 00:01:07.040
Let's take a look at the example in code

15
00:01:09.830 --> 00:01:16.410
recolor instructor example from the last exercise we had this app component with some state for instructors.

16
00:01:16.640 --> 00:01:21.480
And then we had down here a render method rendering some allies.

17
00:01:21.740 --> 00:01:23.510
So what I want to do is refactor this.

18
00:01:23.500 --> 00:01:29.420
So rather than creating the lies here we use a child's component and then pass state down to that child

19
00:01:29.420 --> 00:01:31.570
component as props.

20
00:01:31.670 --> 00:01:38.600
So at the top here I've created instr. item and that instr. item takes in a name and array of Hobbes's

21
00:01:38.600 --> 00:01:41.400
props and then returns that as an ally.

22
00:01:41.570 --> 00:01:44.620
So let's use this instr. item inside of our app component.

23
00:02:02.030 --> 00:02:07.400
So as you can see we've used this instr. item now and just like we mentioned in the slides before we

24
00:02:07.400 --> 00:02:13.280
are taking the state from this that's data constructors and passing it down to a child component as

25
00:02:13.280 --> 00:02:14.240
props.

26
00:02:14.240 --> 00:02:19.670
So inside this instr. item name will be a prop and hobby's will be a prop.

27
00:02:19.670 --> 00:02:25.730
Now remember these props can never change inside of the component.

28
00:02:25.730 --> 00:02:37.290
So let's see this in action and we'll talk about what happens when when state does change.

29
00:02:37.300 --> 00:02:46.270
So just like before I of the looks like sailing one of the hobby's will be removed again.

30
00:02:46.300 --> 00:02:47.440
Now what's going on here.

31
00:02:47.440 --> 00:02:54.820
Well whenever set state is called render is called and when render is called There's a new new value

32
00:02:54.820 --> 00:02:55.750
for state.

33
00:02:55.750 --> 00:03:00.970
So this does state that instructors will render new instructor items.

34
00:03:00.970 --> 00:03:06.510
Now any instructor item that has different values will get re rendered in the DOM.

35
00:03:06.610 --> 00:03:13.150
So as we saw the instructor item that had different set of hobby's will be taken out of the Dom and

36
00:03:13.150 --> 00:03:20.440
re rendered with the new set of props so props can never change but a component can be unmounted and

37
00:03:20.440 --> 00:03:22.600
remounted with a new value.

38
00:03:22.600 --> 00:03:25.060
If the props do change on a new render

39
00:03:30.210 --> 00:03:33.730
So when you're designing an application let's say your design tic tac toe.

40
00:03:33.920 --> 00:03:36.730
This is just a high level view of that app.

41
00:03:36.770 --> 00:03:41.580
We've got a tic tac toe component and a nav bar component for our application.

42
00:03:42.080 --> 00:03:43.850
Who should own state in this app.

43
00:03:44.240 --> 00:03:49.250
Well you might have implemented it such that this tic tac toe component owns all the state because tic

44
00:03:49.250 --> 00:03:53.870
tac toe is the component that cares about the X's and O's and who won and who lost.

45
00:03:53.870 --> 00:03:56.560
So it kind of makes sense for a lot of state to be there.

46
00:03:56.810 --> 00:04:01.700
But let's say you want to implement a feature where you have a button on your nav bar to restart the

47
00:04:01.700 --> 00:04:02.340
game.

48
00:04:02.660 --> 00:04:06.560
Well restarting the game affects the state of the tic tac toe board.

49
00:04:06.560 --> 00:04:12.000
So now the nav bar to make this feature work would also want some state about the game.

50
00:04:12.100 --> 00:04:17.090
And in this case we've got state here and we also need state here.

51
00:04:17.090 --> 00:04:22.500
And these are two siblings so like we said earlier you can't share state between siblings.

52
00:04:22.550 --> 00:04:27.950
The solution to this problem and a common solution that you run into a lot is that if two components

53
00:04:27.950 --> 00:04:32.630
both need some state well then that state needs to be pushed up to the parent.

54
00:04:32.630 --> 00:04:38.810
The solution is to take the state out of tic tac toe and the parent will then own the state instead

55
00:04:38.810 --> 00:04:39.870
of tic tac toe.

56
00:04:40.040 --> 00:04:46.310
So the app component will own state and pass that data down into the tic tac toe component as props

57
00:04:48.710 --> 00:04:53.540
our key takeaway is that states should always be owned by just one component and that's one of those

58
00:04:53.540 --> 00:04:56.750
things again that's easier said than done when you're first learning.

59
00:04:56.750 --> 00:04:59.390
So let's look at the example of what not to do.

60
00:05:02.820 --> 00:05:05.920
So this is an example of that same instr. item component.

61
00:05:06.120 --> 00:05:11.730
Except this time for whatever reason the instructor item has some event and it wants to modify the state

62
00:05:11.790 --> 00:05:12.940
of that instructor.

63
00:05:13.080 --> 00:05:15.810
Maybe it wants to be able to edit the name.

64
00:05:15.810 --> 00:05:18.030
Or maybe it wants to be able to add a new hobby.

65
00:05:18.300 --> 00:05:23.920
Well when you're first starting out oftentimes people want to do something like this.

66
00:05:23.980 --> 00:05:31.950
This state equals name and name comes from the props and hobbies and hobbies also comes from the props.

67
00:05:31.950 --> 00:05:34.980
So again this is an anti-pattern and react.

68
00:05:34.980 --> 00:05:41.430
You should never ever do this because what you're trying to do here is essentially copy some data that

69
00:05:41.430 --> 00:05:45.320
came in as a prop to state.

70
00:05:45.540 --> 00:05:51.270
And typically this is a good sign that you're duplicating state somewhere and that's always a bad thing.

71
00:05:51.270 --> 00:05:53.240
So again the takeaway here.

72
00:05:53.400 --> 00:06:00.220
Never duplicate your state never assign a prop to your state.

73
00:06:00.440 --> 00:06:04.430
Now let's talk about something that we've avoided because we haven't talked much about state up until

74
00:06:04.430 --> 00:06:07.740
now which is the statelets functional component.

75
00:06:07.740 --> 00:06:12.850
So statelets functional component is implemented using a function rather than a class.

76
00:06:12.920 --> 00:06:15.110
So we're no longer extending component.

77
00:06:15.110 --> 00:06:20.450
We're just writing a function and the function just implements the render method nothing else so there's

78
00:06:20.450 --> 00:06:25.980
no constructor and you can't declare state.

79
00:06:26.280 --> 00:06:28.960
This is an example of a stateless functional component.

80
00:06:29.010 --> 00:06:31.980
So because we don't extend component we don't need to import it.

81
00:06:31.980 --> 00:06:37.950
We can just import re-act from we act and then we're just declaring a function the function always gets

82
00:06:37.950 --> 00:06:43.260
prop's as a parameter and the function that we're declaring implements or render method.

83
00:06:43.260 --> 00:06:49.080
So in this case we're just returning an H1 as our render method that has Hello comma and whatever you

84
00:06:49.080 --> 00:06:51.150
passed and for profs that name.

85
00:06:51.150 --> 00:06:56.490
And just like any other component we also will probably want to export default that component.

86
00:06:56.490 --> 00:07:02.460
So in the stateless functional component we're exporting default greeting which is what we assigned

87
00:07:02.460 --> 00:07:03.980
here.

88
00:07:04.260 --> 00:07:08.340
Let's refactor our example to make it a stateless functional component.

89
00:07:10.640 --> 00:07:16.100
Remember in our example we have this instr. item and we want to make this a stateless functional component.

90
00:07:16.190 --> 00:07:28.250
So the first thing it will do is we'll remove the class so I'll make this a function instead.

91
00:07:28.350 --> 00:07:30.480
And now I want to remove this for now.

92
00:07:30.480 --> 00:07:32.160
I'll get back to it in a sec.

93
00:07:32.370 --> 00:07:34.330
So I'll just put this up here a comment.

94
00:07:41.820 --> 00:07:44.400
And since we're already inside of a functional get rid of render

95
00:07:52.470 --> 00:07:55.810
the last thing to do here is that prop's is now a parameter.

96
00:07:55.900 --> 00:07:57.750
It's just a primer to our normal function.

97
00:07:57.760 --> 00:08:04.660
So we don't need to say this that props that name we just can say Propst that name.

98
00:08:04.790 --> 00:08:05.570
All right there we go.

99
00:08:05.570 --> 00:08:10.430
And now we've got a stateless functional component so we're no longer implementing in class we're just

100
00:08:10.430 --> 00:08:13.840
implementing a function that function gets props as a parameter.

101
00:08:14.060 --> 00:08:17.090
And we can use props inside of our function here.

102
00:08:17.090 --> 00:08:22.730
Now what if we still want to use Propp types where we can still do that we just can't use static anymore

103
00:08:22.760 --> 00:08:24.060
because it's not a class.

104
00:08:24.230 --> 00:08:27.800
So the way to add Propp types is just to add it afterwards like we saw before

105
00:08:31.530 --> 00:08:32.910
and now copy this over

106
00:08:38.530 --> 00:08:39.100
and there we go.

107
00:08:39.100 --> 00:08:42.550
We react to that same component to be a stateless functional component.

108
00:08:43.030 --> 00:08:47.920
So generally speaking it's a good idea to turn any component that doesn't have any state into a stateless

109
00:08:47.920 --> 00:08:50.080
functional component in the future.

110
00:08:50.080 --> 00:08:52.950
This may actually provide some performance benefits.

111
00:08:53.110 --> 00:08:58.000
And I think it's just a little cleaner because you don't have so much boilerplate you have to deal with

112
00:09:00.940 --> 00:09:05.460
all in this video by saying that thinking in re-act takes a while to master.

113
00:09:05.460 --> 00:09:10.590
So if it doesn't make sense to you intuitively right away don't get discouraged at this point.

114
00:09:10.620 --> 00:09:12.790
I would say check out this blog post.

115
00:09:12.870 --> 00:09:18.150
It's called thinking and reacts by one of the creators of react and it's a great sort of breakdown of

116
00:09:18.540 --> 00:09:21.620
how you should think about solving problems in react.

117
00:09:21.630 --> 00:09:27.570
So read that an assignment and next up we'll talk about a few more gotchas with set state.
