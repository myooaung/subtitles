1
00:00:00,290 --> 00:00:00,910
All righty.

2
00:00:00,990 --> 00:00:04,270
So we looked at for Jay Querrey methods that help us make requests.

3
00:00:04,320 --> 00:00:07,950
We saw Ajax get post and get Jason.

4
00:00:07,980 --> 00:00:08,910
So those are useful.

5
00:00:08,910 --> 00:00:14,600
But keep in mind there are only four methods out of 100 maybe 200 methods that J.

6
00:00:14,600 --> 00:00:15,750
Querrey come to it.

7
00:00:16,230 --> 00:00:19,320
So Jay query helps you write less code.

8
00:00:19,320 --> 00:00:24,060
It simplifies the process of doing a lot of different things not just writing AJAX calls.

9
00:00:24,330 --> 00:00:31,140
So things like animations fade in fade out slide and so on event handling working with forms manipulating

10
00:00:31,140 --> 00:00:35,410
the DOM and a whole bunch of other features all come with Jay Querrey.

11
00:00:35,430 --> 00:00:41,390
So if you don't need those and increasingly so people feel that you don't actually need all those features.

12
00:00:41,400 --> 00:00:46,740
There's this site you might not need Jay query it made waves a couple of years ago basically making

13
00:00:46,740 --> 00:00:52,140
the argument that Jay Querrey these days isn't really saving you all that much code and it's not worth

14
00:00:52,140 --> 00:00:53,680
including a separate library.

15
00:00:53,820 --> 00:00:59,030
If you're using it to do things like manipulate the Dom as you can see a comparison on the left is a

16
00:00:59,030 --> 00:01:02,830
J quick version on the right is the vanilla version.

17
00:01:02,880 --> 00:01:10,070
They're pretty similar for most things except the most blatant discrepancy is around AJAX calls.

18
00:01:10,080 --> 00:01:15,270
So even if you're someone who doesn't want to use Jay Querrey you still may want some of the functionality

19
00:01:15,450 --> 00:01:19,140
that it gives you around simplified AJAX calls with a nice syntax.

20
00:01:19,140 --> 00:01:23,840
Fortunately there are a bunch of third party libraries out there that do just that.

21
00:01:23,850 --> 00:01:29,350
There's all these javascript HTP clients and the one we're going to focus on is called axioms.

22
00:01:29,370 --> 00:01:35,250
So it's a lightweight request library meaning that all it does is it provides a couple of methods to

23
00:01:35,250 --> 00:01:37,200
help you make requests and nothing more.

24
00:01:37,260 --> 00:01:39,630
So none of the extra J carry weight.

25
00:01:39,630 --> 00:01:45,660
And if we look at the documentation it lays out its key features or goals pretty clearly.

26
00:01:45,800 --> 00:01:49,880
So it helps you make SML HTP requests from the browser.

27
00:01:49,880 --> 00:01:52,120
You can also make them from node J.S..

28
00:01:52,340 --> 00:01:58,760
So that is nice if you use node you can use X iOS on the backend using the exact same syntax to make

29
00:01:58,760 --> 00:02:01,520
your requests so it supports promises.

30
00:02:01,520 --> 00:02:02,500
The other thing I'll highlight.

31
00:02:02,510 --> 00:02:08,080
It automatically transforms Jaison data that comes in it will automatically parse it for you.

32
00:02:08,420 --> 00:02:13,760
And of course browsers support always important looks great everywhere and that's just because it's

33
00:02:13,760 --> 00:02:16,260
built on top of the X H.R. API.

34
00:02:16,490 --> 00:02:18,460
So there's no fancy technology here.

35
00:02:18,530 --> 00:02:22,650
It's just a library that is written on top of the default ex-aide chars.

36
00:02:22,910 --> 00:02:24,940
Oh and I should point out it's pretty popular.

37
00:02:25,040 --> 00:02:28,620
If you look at the repo 200 or 25000 people it.

38
00:02:28,750 --> 00:02:30,190
There's 600 forks.

39
00:02:30,320 --> 00:02:33,860
That's pretty substantial for a small little library like this.

40
00:02:33,860 --> 00:02:35,940
All that does is help you make requests.

41
00:02:36,140 --> 00:02:40,720
So here's the basic syntax we require Expo's which we'll do in just a moment.

42
00:02:40,940 --> 00:02:45,210
And then you can just refer to actually X-post dot and then whatever method you need.

43
00:02:45,380 --> 00:02:47,770
So the simplest one is don't get.

44
00:02:47,820 --> 00:02:52,440
There's also a post and there's a couple of others we'll talk about but we'll start off with don't get

45
00:02:52,770 --> 00:02:54,100
seapass in a row.

46
00:02:54,500 --> 00:02:58,420
And just like fetch We have our then in our catch.

47
00:02:58,490 --> 00:03:01,800
So let's hop over to code pad and give it a shot.

48
00:03:01,880 --> 00:03:07,850
So before we can do anything we need to include axes and if you go to the documentation you can either

49
00:03:07,850 --> 00:03:14,270
download the script itself and include it manually or they give you a CVN link right off the bat.

50
00:03:14,270 --> 00:03:15,560
I'm just going to use that.

51
00:03:15,560 --> 00:03:20,940
So copy the script tag put it in my HMO and it should be good to go.

52
00:03:21,290 --> 00:03:31,710
Now the API that I'm going to use for this example is this open tribut database open TB TB outcome.

53
00:03:31,720 --> 00:03:33,480
I'll include the link.

54
00:03:33,530 --> 00:03:35,970
What it does is it gives you trivia questions and answers.

55
00:03:36,050 --> 00:03:37,230
We're just going to get the data.

56
00:03:37,250 --> 00:03:38,960
We're not going to do anything with it.

57
00:03:39,020 --> 00:03:44,890
But like I said it's in the resources and if we look at it here we're going to get an object back with

58
00:03:44,890 --> 00:03:45,860
a results array.

59
00:03:45,860 --> 00:03:50,560
It has one item and in that item we're going to print out the question.

60
00:03:50,770 --> 00:03:54,880
So let's do that hop over here and let's assign this to a variable.

61
00:03:54,970 --> 00:04:03,280
So to save r u r l equals that you are l and now we just right or ex-U.S. code to it's X-post dot get

62
00:04:03,520 --> 00:04:09,440
that you are l and then to handle it then.

63
00:04:10,240 --> 00:04:12,210
And I'll also add our catch.

64
00:04:12,340 --> 00:04:15,300
We'll talk more about handling those errors in just a bit.

65
00:04:15,310 --> 00:04:19,770
So let's just leave it at this and then we'll just print out the response.

66
00:04:21,660 --> 00:04:22,210
OK.

67
00:04:22,410 --> 00:04:23,870
So let's see what happens.

68
00:04:24,390 --> 00:04:28,060
So if I refresh the page I don't have it hooked up to a button.

69
00:04:28,140 --> 00:04:32,310
So it's just running one time at the beginning and looks good.

70
00:04:32,310 --> 00:04:34,820
We're getting this response object back.

71
00:04:35,430 --> 00:04:39,160
So notice it gives us the response doesn't just give us the data we care about.

72
00:04:39,210 --> 00:04:40,910
There's a whole bunch of other things in here.

73
00:04:41,010 --> 00:04:43,650
But the data we want is in data.

74
00:04:43,740 --> 00:04:54,860
So rather than constantly logging rez let's do rez dot data save now we get this inside that we want

75
00:04:54,860 --> 00:04:56,360
the results.

76
00:04:56,540 --> 00:05:03,500
So let's do that now that results zero and now we're getting to the data.

77
00:05:03,600 --> 00:05:06,330
Let's do that question as well.

78
00:05:07,560 --> 00:05:09,240
Area and left for dead.

79
00:05:09,240 --> 00:05:11,750
What is the name of this special infected that it's unplayable.

80
00:05:11,750 --> 00:05:12,480
Oh OK.

81
00:05:12,480 --> 00:05:14,160
I have no idea.

82
00:05:14,610 --> 00:05:16,640
I have played that game but I have no clue.

83
00:05:17,070 --> 00:05:21,570
So tough trivia questions but the API works just how it's supposed to.

84
00:05:21,600 --> 00:05:26,880
We're making a simple get request to a u r l and we have a then and Dot catch.

85
00:05:26,880 --> 00:05:28,820
So that's all I want to do in this video.

86
00:05:29,190 --> 00:05:30,450
There's a couple of key takeaways.

87
00:05:30,450 --> 00:05:34,520
One square is great but if you only want the Ajax functionality.

88
00:05:34,530 --> 00:05:36,030
Use a library like X-ers.

89
00:05:36,030 --> 00:05:38,600
There's no reason to include all these extra methods.

90
00:05:38,730 --> 00:05:40,930
All this extra code if you're not going to use it.

91
00:05:40,980 --> 00:05:42,240
So accuracy is great.

92
00:05:42,270 --> 00:05:47,690
Very short little modular library but it also provides a nice clean syntax as you can see here.
