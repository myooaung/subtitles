WEBVTT
1
00:00:00.360 --> 00:00:01.140
Welcome back.

2
00:00:01.320 --> 00:00:07.230
In this video we're going to be discussing a special type of function that as 2015 provides called a

3
00:00:07.230 --> 00:00:08.670
generator.

4
00:00:08.670 --> 00:00:14.960
Up until now when a function was executed it ran until it was completed either through the return keyword.

5
00:00:15.100 --> 00:00:20.070
Or when there was no more code to run generator functions are a bit different.

6
00:00:20.070 --> 00:00:26.490
They essentially allow us to pause execution of a function and resume at a later point in time and are

7
00:00:26.490 --> 00:00:30.350
created using an asterisk after the function keyword.

8
00:00:30.360 --> 00:00:37.530
When a generator function is run a generator object is returned to us that generator object has a method

9
00:00:37.530 --> 00:00:44.320
called Next which returns another object to us with the keys of value and done.

10
00:00:44.400 --> 00:00:50.490
Value is what is returned from the pause function using the yield keyword which we'll see and done is

11
00:00:50.490 --> 00:00:54.780
a Boolean which returns true when the function has completed.

12
00:00:54.780 --> 00:00:57.720
Let's take a look at our first generator here.

13
00:00:57.750 --> 00:01:03.600
We are iterating a certain number of times and using the yield keyword to yield the counter variable

14
00:01:03.690 --> 00:01:10.130
each time if we invoke this function we'll get back a generator object on the generator object.

15
00:01:10.140 --> 00:01:16.980
We have a method called next which will run the code after the first keyword it sees we can keep calling

16
00:01:16.980 --> 00:01:19.370
dot next until there are no more values.

17
00:01:19.530 --> 00:01:21.280
And the done property is true.

18
00:01:22.150 --> 00:01:24.480
You might not see how generators can be useful yet.

19
00:01:24.760 --> 00:01:29.830
But imagine if we had a function that was very time consuming to run and we only needed to run parts

20
00:01:29.830 --> 00:01:31.170
of it at a time.

21
00:01:31.210 --> 00:01:33.000
Generators would be perfect for that.

22
00:01:33.850 --> 00:01:39.280
In order to do that we place multiple yield keywords inside of a generator function to posit possible

23
00:01:39.280 --> 00:01:40.090
times.

24
00:01:40.100 --> 00:01:45.570
Here you can see we are simply printing three values and accessing what has been yielded to us.

25
00:01:45.640 --> 00:01:50.920
Another handy feature the generators have is that they implement a simple iterator which means we can

26
00:01:50.980 --> 00:01:54.140
iterate over a generator using a for loop.

27
00:01:54.160 --> 00:01:55.830
Let's see what that looks like.

28
00:01:56.020 --> 00:02:02.080
Here we have our same function as before but instead of copying dot next Every time we can simply use

29
00:02:02.140 --> 00:02:08.490
a for loop and other common use case for generators is for working with asynchronous code since we can

30
00:02:08.490 --> 00:02:15.180
Pozza function we can also pause the result of some asynchronous operation and then continue in the

31
00:02:15.180 --> 00:02:15.830
code below.

32
00:02:15.840 --> 00:02:21.990
We're pausing for a promise and using dot then to resolve it we can have multiple yield statements for

33
00:02:21.990 --> 00:02:28.560
different promises and resolve them whenever we'd like and then continue resuming our function generators

34
00:02:28.590 --> 00:02:32.630
are the foundation for some complex libraries that help manage asynchronous code.

35
00:02:32.910 --> 00:02:38.360
But there is a newer way to manage asynchronous code with as 20:17 async functions.

36
00:02:38.460 --> 00:02:43.260
So we'll be covering those more in detail over generators in the next video.

37
00:02:43.260 --> 00:02:48.210
We'll take a look at some newer E.S. 2013 methods and how they can help us refactor more challenging

38
00:02:48.240 --> 00:02:49.830
issues with javascript.

39
00:02:49.900 --> 00:02:50.500
See then.
