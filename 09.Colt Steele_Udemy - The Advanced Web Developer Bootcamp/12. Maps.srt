1
00:00:00,530 --> 00:00:01,460
Welcome back.

2
00:00:01,460 --> 00:00:04,510
In this video we're going to be introducing a new data structure.

3
00:00:04,560 --> 00:00:05,750
Yes 2015.

4
00:00:05,780 --> 00:00:06,890
Call the map.

5
00:00:06,890 --> 00:00:12,320
In other programming languages this is also called a hash map or sometimes a hash you can think of a

6
00:00:12,320 --> 00:00:16,040
map as an object that the keys can be any type.

7
00:00:16,040 --> 00:00:21,430
Remember that the data type for javascript objects is always a string for keys.

8
00:00:21,650 --> 00:00:28,250
Objects are similar to maps in that both let you set keys to values retrieve those values delete keys

9
00:00:28,490 --> 00:00:32,240
and detect whether something is stored at a key to create a map.

10
00:00:32,240 --> 00:00:33,480
We use the new keyword.

11
00:00:33,740 --> 00:00:35,190
Let's see what that looks like.

12
00:00:35,480 --> 00:00:39,560
Here we're creating a map and setting the keys of one false and the string.

13
00:00:39,560 --> 00:00:40,520
Nice.

14
00:00:40,520 --> 00:00:45,290
Notice that our keys here are of any data type including Bullen's and numbers.

15
00:00:45,290 --> 00:00:50,330
We can even set keys to be array as an objects to retrieve values from a map.

16
00:00:50,360 --> 00:00:56,330
We simply get them and if we do not want that for each item we can iterate over a map as it comes with

17
00:00:56,330 --> 00:00:57,670
a for each method.

18
00:00:58,040 --> 00:01:02,410
We can also iterate over the keys and values if we like using a for loop.

19
00:01:02,600 --> 00:01:09,740
Since maps implement a simple iterator so why would we use a map compared to an object finding the size

20
00:01:09,750 --> 00:01:10,600
is easy.

21
00:01:10,650 --> 00:01:13,910
Knapp's have a Size property like we mentioned before.

22
00:01:13,960 --> 00:01:16,810
Bickies can be any data type which is handy.

23
00:01:16,920 --> 00:01:22,500
Maps also do not have their own prototype object so you're never going to accidentally overwrite keys

24
00:01:22,800 --> 00:01:28,890
in the Object prototype which is an issue that you'll encounter with objects finally iterating over

25
00:01:28,890 --> 00:01:33,090
keys and values is quite simple and more friendly than an object.

26
00:01:33,210 --> 00:01:35,420
Now that you've seen some benefits to using maps.

27
00:01:35,460 --> 00:01:37,970
Let's see when a good time to use them would be.

28
00:01:38,190 --> 00:01:42,120
If you find yourself working with keys that need to be looked up dynamically.

29
00:01:42,120 --> 00:01:45,250
Think of this like using bracket notation with objects.

30
00:01:45,300 --> 00:01:46,620
It's a good time for a map.

31
00:01:46,950 --> 00:01:52,080
If you need keys that are not strings and find yourself frequently adding or removing keys maps are

32
00:01:52,080 --> 00:01:53,510
a better option.

33
00:01:53,550 --> 00:01:56,720
Finally if you're operating on multiple keys at a time.

34
00:01:56,730 --> 00:02:00,660
Maps are easier to work with than objects along with maps.

35
00:02:00,660 --> 00:02:06,150
There is another data structure called a weak wrap which is similar to a map except all the keys must

36
00:02:06,150 --> 00:02:08,460
be objects and not primitives.

37
00:02:08,460 --> 00:02:13,770
This makes a weak map more performant than a map but we cannot iterate over a weak map since values

38
00:02:13,770 --> 00:02:15,100
can be cleared from memory.

39
00:02:15,120 --> 00:02:19,580
If there is not a reference to them you will not find yourself creating too many weak maps.

40
00:02:19,800 --> 00:02:24,750
But if you come across them in libraries and frameworks just know they are like maps but all the keys

41
00:02:24,750 --> 00:02:31,230
must be objects in the next video will introduce another data structure that he has 20:15 gives us other.
