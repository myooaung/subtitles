1
00:00:00,910 --> 00:00:05,460
In the previous video we saw some good use cases for call and apply.

2
00:00:05,460 --> 00:00:11,310
We saw how to explicitly set the context of the keyword this and pass arguments to the function that

3
00:00:11,310 --> 00:00:13,770
is being altered by call or apply.

4
00:00:14,070 --> 00:00:20,280
In the case of call arguments are passed as comma separated values and with Apply arguments are passed

5
00:00:20,310 --> 00:00:24,670
as values in an array and works just like call.

6
00:00:24,960 --> 00:00:31,080
But instead of immediately invoking the function it returns a new function to us with the keyword this

7
00:00:31,080 --> 00:00:35,640
bound to the value that we pass as the first parameter to bind.

8
00:00:36,090 --> 00:00:41,670
So when is bind useful one common use case is when we do not know all of the arguments that will be

9
00:00:41,670 --> 00:00:46,800
passed to a function which means we do not want to invoke the function right away.

10
00:00:46,800 --> 00:00:50,130
We just want to return a new function with some of the parameters.

11
00:00:50,250 --> 00:00:52,490
We call this partial application.

12
00:00:52,830 --> 00:00:57,680
In the example below we can see that bind is returning a function to us.

13
00:00:57,780 --> 00:01:02,910
So we still need to add an extra set of parentheses to call that function.

14
00:01:02,910 --> 00:01:08,550
What's neat about bind is that we do not need to know all the parameters to the function when we bind

15
00:01:08,550 --> 00:01:08,950
it.

16
00:01:09,150 --> 00:01:11,070
We only need to know what we want.

17
00:01:11,070 --> 00:01:14,610
The value of the key word this to be it's a bit tricky.

18
00:01:14,760 --> 00:01:20,920
So make sure to pause the video and take the examples on the slide and play around with partial application.

19
00:01:21,910 --> 00:01:28,300
Another very common use case of BIND is to set the context of the keyword this for a function that will

20
00:01:28,300 --> 00:01:30,670
be called at a later point in time.

21
00:01:31,030 --> 00:01:37,500
Very commonly that happens when dealing with asynchronous code or code that does not run line by line.

22
00:01:37,750 --> 00:01:44,120
Before we take a look at these examples let's quickly review the asynchronous set time out method set

23
00:01:44,170 --> 00:01:50,170
time out is a method on the window object that is used to execute a function of once after a specified

24
00:01:50,170 --> 00:01:51,430
amount of time.

25
00:01:51,520 --> 00:01:55,020
Remember that said timeout is a method on the window object.

26
00:01:55,030 --> 00:01:58,440
That's something we're going to need to know for a later example.

27
00:01:58,540 --> 00:02:02,450
The first parameter set timeout is a function to be executed.

28
00:02:02,650 --> 00:02:08,560
And the second parameter is the amount of time in milliseconds to wait before executing the function.

29
00:02:08,600 --> 00:02:11,590
Let's code a quick example and cancel that log.

30
00:02:11,740 --> 00:02:12,470
Hello world.

31
00:02:12,490 --> 00:02:19,210
After 20 seconds I'm going to invoke a set time out and as the first parameter passed in a function

32
00:02:19,780 --> 00:02:24,620
that will cancel out log hello world after 20 seconds.

33
00:02:24,640 --> 00:02:31,220
Now that I have called this I can do other things like to find new variables or continue running code.

34
00:02:31,240 --> 00:02:33,290
This is what we mean by asynchronous.

35
00:02:33,400 --> 00:02:36,100
Our code is not blocked while we wait for 20 seconds.

36
00:02:36,100 --> 00:02:40,020
We can do other things while we wait in the next video.

37
00:02:40,060 --> 00:02:42,580
We'll come back to talking about the key word this.

38
00:02:42,590 --> 00:02:46,670
And take a look at a tricky example where bind really helps us out.

39
00:02:46,690 --> 00:02:47,110
See that.
