1
00:00:00,450 --> 00:00:01,300
Welcome back.

2
00:00:01,470 --> 00:00:05,210
In this video we're going to talk about how to write more efficient tests.

3
00:00:05,430 --> 00:00:08,940
Let's take a look at an example and see if you can answer the question.

4
00:00:09,000 --> 00:00:11,750
What's not great about this code.

5
00:00:11,870 --> 00:00:15,020
Here we have some code that is testing the push method on arrays.

6
00:00:15,150 --> 00:00:20,430
In each of our blocks we are creating in our variable and then testing different parts of what the push

7
00:00:20,430 --> 00:00:24,940
method does including its return value and what values it accepts.

8
00:00:25,190 --> 00:00:27,870
You are defining the R variable each time.

9
00:00:27,960 --> 00:00:33,080
Since we don't want our tests to share the same variable and produce unexpected output.

10
00:00:33,270 --> 00:00:35,610
If we were to run these tests everything would pass.

11
00:00:35,790 --> 00:00:38,280
But there's something that's not great about this code.

12
00:00:38,280 --> 00:00:40,440
Notice how much repetition is going on here.

13
00:00:40,560 --> 00:00:43,370
We are defining the variable three times.

14
00:00:43,560 --> 00:00:47,310
It would be really nice if we could just define this once and not repeat ourselves.

15
00:00:47,610 --> 00:00:53,550
Thankfully Jasmine has a wonderful way to do this using a built in function called before each before

16
00:00:53,550 --> 00:00:58,390
each picks up a callback that will be run before the callback to each function.

17
00:00:58,410 --> 00:00:59,970
Let's see what that looks like.

18
00:01:00,000 --> 00:01:05,610
Notice here that we are declaring the variable inside of the callback to describe and then assigning

19
00:01:05,610 --> 00:01:08,820
it to an array inside of a callback to before each.

20
00:01:08,820 --> 00:01:11,130
You might be wondering why do we need to do that.

21
00:01:11,130 --> 00:01:13,830
The reason is because of scoping in javascript.

22
00:01:13,890 --> 00:01:18,900
If we place the marquee word inside of the callback to before each then that variable would only be

23
00:01:18,900 --> 00:01:23,200
accessible inside of the callback to before each and nowhere else.

24
00:01:23,250 --> 00:01:29,910
If we declare the variable outside of the before each we can access it inside of inner functions we'll

25
00:01:29,910 --> 00:01:30,690
see what that looks like.

26
00:01:30,690 --> 00:01:37,110
Now notice that we only have to define our once and each callback to the IT function has an R variable

27
00:01:37,170 --> 00:01:42,640
that gets redefined each time the same way that we can run code before each callback.

28
00:01:42,830 --> 00:01:47,370
We can run code after each callback using the after each keyword.

29
00:01:47,630 --> 00:01:53,390
Let's see an example here before each callback to the function we are adding 1 to our count variable

30
00:01:53,870 --> 00:01:58,130
and then after each callback to the function we are resetting the count to zero.

31
00:01:58,130 --> 00:02:03,370
The idea here is that we can use after each to reset variables used between tests.

32
00:02:03,380 --> 00:02:09,530
This is also called a tear down and is useful when ensuring that your data stays the same between tests.

33
00:02:09,620 --> 00:02:14,600
You will very commonly see teardown code and testing databases to ensure that you start and end with

34
00:02:14,600 --> 00:02:16,240
the same sample data.

35
00:02:16,310 --> 00:02:21,500
If you find yourself in a situation where you want to create a variable that persists among all tests

36
00:02:21,770 --> 00:02:24,860
you can use the before all and after all functions.

37
00:02:24,860 --> 00:02:29,470
This is not as common since it can lead to unintended side effects but you may find yourself needing

38
00:02:29,470 --> 00:02:29,910
it.

39
00:02:30,140 --> 00:02:32,680
Here's a short example with using before all.

40
00:02:32,810 --> 00:02:38,600
Notice that the code is similar to before each of the variable we create only gets defined once and

41
00:02:38,600 --> 00:02:41,380
is shared amongst all the tests.

42
00:02:41,390 --> 00:02:46,020
The next thing we're going to look at is how we can structure larger test weeks by nesting describe

43
00:02:46,020 --> 00:02:47,090
blocks.

44
00:02:47,090 --> 00:02:52,540
Remember that we said that describe is how we can express a specific level topic that we will test.

45
00:02:52,790 --> 00:02:58,700
We can also nest describe blocks if we are describing quite a few things here we are describing arrays

46
00:02:59,030 --> 00:03:04,850
and then describing specific methods for arrays inside of each of these inner describe blocks.

47
00:03:04,850 --> 00:03:06,450
We can place it blocks.

48
00:03:06,530 --> 00:03:10,940
The idea here is that we want to test arrays but arrays are a very large topic.

49
00:03:11,000 --> 00:03:16,550
So we'll break it down into smaller describe blocks in each of these describe blocks will cover individual

50
00:03:16,610 --> 00:03:18,410
array methods.

51
00:03:18,410 --> 00:03:21,630
Another thing we can do in writing tests is mark them as pending.

52
00:03:21,950 --> 00:03:26,930
This is commonly done when we don't know exactly what we'll be testing or if we do not want to run a

53
00:03:26,930 --> 00:03:28,230
specific test.

54
00:03:28,310 --> 00:03:34,730
We can market test as pending or either emitting a callback function to the IT function adding the pending

55
00:03:34,730 --> 00:03:39,570
function inside or simply placing an X before the function.

56
00:03:39,590 --> 00:03:43,230
Finally let's discuss one more thing you will see inside of each.

57
00:03:43,250 --> 00:03:44,520
It callback function.

58
00:03:44,840 --> 00:03:50,930
You might be wondering how many expect functions should we use perfit block the rule of thumb here is

59
00:03:50,930 --> 00:03:55,430
if the testing of one unit needs more than one expect use more.

60
00:03:55,580 --> 00:04:01,700
Just make sure you are not testing several aspects of a unit which do not belong together in a single

61
00:04:01,730 --> 00:04:03,280
one test case.

62
00:04:03,290 --> 00:04:08,150
Here we have an example that is not great because we are testing different pieces of functionality.

63
00:04:08,150 --> 00:04:10,840
A better alternative is to use seperate blocks.

64
00:04:10,970 --> 00:04:15,830
But if you're testing the same unit you can have more than one expect block and especially when testing

65
00:04:15,830 --> 00:04:16,860
larger units.

66
00:04:16,940 --> 00:04:22,820
You will most often have multiple expect functions inside of an IT function in the next video.

67
00:04:22,820 --> 00:04:26,360
We'll discuss how to better test our functions using spies zylon.
