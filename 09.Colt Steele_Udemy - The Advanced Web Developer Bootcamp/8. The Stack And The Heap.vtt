WEBVTT
1
00:00:01.800 --> 00:00:06.720
So far in this section we've talked about callback functions and some applications of those callback

2
00:00:06.720 --> 00:00:07.700
functions.

3
00:00:07.710 --> 00:00:12.510
Now we're going to take a step back and learn about something a little bit more foundational for asynchronous

4
00:00:12.510 --> 00:00:13.290
code.

5
00:00:13.350 --> 00:00:19.170
So what we're talking about now is the stack in the heap and understanding how this works in depth really

6
00:00:19.170 --> 00:00:25.530
make your life easier when you're working on code and Javascript and debugging and basically just understanding

7
00:00:25.530 --> 00:00:26.010
coding.

8
00:00:26.010 --> 00:00:29.220
In general so I'm excited to talk about this.

9
00:00:29.220 --> 00:00:31.920
Let's dive in.

10
00:00:31.930 --> 00:00:36.650
Our objectives are to describe what the stack is.

11
00:00:36.670 --> 00:00:43.740
Describe a stack frame and lastly to describe the heap.

12
00:00:43.760 --> 00:00:49.010
So first of all what is the stack Well the stack is an ordered data structure.

13
00:00:49.850 --> 00:00:53.200
And it keeps track of the functions that we can vote.

14
00:00:53.210 --> 00:00:57.060
So this is kind of nebulous right now don't worry about it Wolf.

15
00:00:57.110 --> 00:00:59.720
We'll dive into this a lot more as we go.

16
00:00:59.730 --> 00:01:06.150
It's important to understand that the stack isn't something that you have access to directly in javascript.

17
00:01:07.130 --> 00:01:13.130
Really what's going on is every time you invoke a function the stack gets modified to keep track of

18
00:01:13.130 --> 00:01:14.460
that function you've invoked.

19
00:01:14.630 --> 00:01:20.660
And every time a function is finished running it will be popped off the stack and the javascript runtime

20
00:01:20.660 --> 00:01:22.280
will take it off for you.

21
00:01:22.490 --> 00:01:28.700
So maybe a fine line here but your not the one directly modifying the stack.

22
00:01:28.760 --> 00:01:38.090
The Javascript runtime is doing that when you invoke a function or when a function is done running.

23
00:01:38.110 --> 00:01:41.080
So how does your code changes stack.

24
00:01:41.270 --> 00:01:46.130
Like I mentioned before whenever you invoke a function the details of the invocation are saved at the

25
00:01:46.130 --> 00:01:47.240
top of the stack.

26
00:01:48.520 --> 00:01:56.530
And people often say that something is pushed onto the top of the stack whenever a function returns

27
00:01:56.530 --> 00:01:59.980
the information about the invocation is taken off the top of the stack.

28
00:01:59.980 --> 00:02:06.350
And again this is often called popping.

29
00:02:06.370 --> 00:02:07.980
OK so let's see the stack in action.

30
00:02:07.990 --> 00:02:14.310
Let's take a look at a small piece of code and examine how the stack changes as the code is run.

31
00:02:14.830 --> 00:02:19.490
The function is invoked below with premolars three and five.

32
00:02:19.510 --> 00:02:26.460
So you expect the result to be 15 three times five but how was javascript interact with the stack when

33
00:02:26.460 --> 00:02:30.270
this code runs well before anything is executed.

34
00:02:30.330 --> 00:02:37.680
The Javascript runtime will place the main program on the stack so as you can see our stack first has

35
00:02:37.740 --> 00:02:41.480
a main Ive put line numbers on the side of the code.

36
00:02:41.560 --> 00:02:46.920
One two three four five for each line of code and the stack is keeping track here of the line number

37
00:02:46.920 --> 00:02:49.880
that were on in our main function.

38
00:02:49.980 --> 00:02:51.030
So that's important.

39
00:02:51.020 --> 00:02:55.770
It's a it's an important part of the stack to know where you invoke the function and where you need

40
00:02:55.770 --> 00:02:57.350
to return to after you're done.

41
00:02:57.360 --> 00:02:58.880
So we'll see that as we go.

42
00:03:00.350 --> 00:03:01.840
OK so what happens next.

43
00:03:02.090 --> 00:03:07.600
Well multiply has been invoked at this point on line number five.

44
00:03:07.730 --> 00:03:14.660
So because multiply is being invoked the javascript runtime will place the multiply invocation on the

45
00:03:14.660 --> 00:03:16.220
stack.

46
00:03:16.310 --> 00:03:20.890
So now the stack has another invocation on top of the main function.

47
00:03:20.960 --> 00:03:27.770
So our previous invocation for the main is waiting on line number five for the result of this multiply

48
00:03:27.770 --> 00:03:30.500
function to finish and multiply.

49
00:03:30.500 --> 00:03:36.610
Here is on line number 2 about to execute the code for X times Y.

50
00:03:36.650 --> 00:03:44.480
In other words three times five three times five will be multiplied we'll get the result of 15 and then

51
00:03:44.690 --> 00:03:47.030
we'll return that from a multiply function.

52
00:03:47.300 --> 00:03:53.610
So now our multiply function is all done which means that we're going to pop multiply off the stack.

53
00:03:53.810 --> 00:03:56.480
Once we return something our function is finished.

54
00:03:56.510 --> 00:04:00.450
So that means the javascript runtime can take it off of the stack.

55
00:04:00.650 --> 00:04:07.100
Now because our main function was waiting here on line number five the result of calling multiply comes

56
00:04:07.100 --> 00:04:09.880
back to our main on line 5.

57
00:04:09.920 --> 00:04:14.080
So now the result is equal to 15 but we're not quite done yet.

58
00:04:14.090 --> 00:04:17.420
Remember that our main function is still on the stack.

59
00:04:17.450 --> 00:04:22.400
So once we've assigned the result to 15 Our code is all done.

60
00:04:22.400 --> 00:04:26.300
So the javascript runtime takes Maine off the stack as well.

61
00:04:28.080 --> 00:04:30.150
So now our stack is empty.

62
00:04:30.150 --> 00:04:35.530
We are not running any more code and the javascript runtime is just waiting for something to do.

63
00:04:36.420 --> 00:04:40.500
Let's go back a bit to our example we have a few things on the stack.

64
00:04:40.800 --> 00:04:45.990
So here we are where we've got our main function here and we've invoked multiply.

65
00:04:45.990 --> 00:04:50.990
So we've got two invocations on the stack waiting to finish.

66
00:04:51.000 --> 00:04:58.240
So what are these things what are these these boxes that keep track of each function and vocation.

67
00:04:58.320 --> 00:05:03.060
These are often called stack frames and they keep track of some pretty important information.

68
00:05:04.150 --> 00:05:06.970
So what does a stack frame have.

69
00:05:07.000 --> 00:05:09.820
It has information about the function that was invoked.

70
00:05:09.820 --> 00:05:15.850
So you can see here this is our main function that was getting invoked and this is our multiply function.

71
00:05:15.850 --> 00:05:18.460
It has the parameters that were passed to the function.

72
00:05:18.730 --> 00:05:24.190
I'm not keeping track of that here but we remember that multiply and this example was passed three and

73
00:05:24.190 --> 00:05:25.440
five for x and y.

74
00:05:25.930 --> 00:05:29.650
And also very important we keep track of the line number that we're on.

75
00:05:29.650 --> 00:05:37.870
So when this multiply finishes javascript knows to go back to line number five and continue execution.

76
00:05:37.940 --> 00:05:42.490
Now that we understand what a stack frame is let's define a stack more rigorously.

77
00:05:42.680 --> 00:05:45.920
So a stack is an ordered set of stack frames.

78
00:05:45.920 --> 00:05:51.110
Most recently invoked functions are always on top of the stack and the bottom of the stack contains

79
00:05:51.500 --> 00:05:57.800
the functions that were invoked first earliest So the stack is processed always from top to bottom.

80
00:05:57.830 --> 00:06:02.900
We can't take things out of the middle right because of function in the middle could be waiting for

81
00:06:02.900 --> 00:06:04.020
some results.

82
00:06:04.040 --> 00:06:11.000
So it's always top first one at a time all the way down to the bottom until the stack is empty.

83
00:06:11.000 --> 00:06:17.080
Now let's find the heap the heap is an area in memory where your data is stored.

84
00:06:17.090 --> 00:06:21.260
Let's look at a very small code example that creates some memory.

85
00:06:21.290 --> 00:06:26.330
So in this example the object is created in the heap and a reference to that object is assigned to a

86
00:06:26.330 --> 00:06:30.260
variable object.

87
00:06:30.280 --> 00:06:36.730
Now just for clarity This actually creates some or takes up some memory in the heap.

88
00:06:37.180 --> 00:06:41.820
But when we do something like this var reference copy equals RBJ.

89
00:06:41.950 --> 00:06:44.110
We're not creating something new on the heap.

90
00:06:44.110 --> 00:06:47.820
We're just saving a reference to that same area in memory.

91
00:06:47.860 --> 00:06:52.810
So this is another area that new javascript programmers often get confused about.

92
00:06:52.810 --> 00:06:55.660
This actually creates memory in our heap.

93
00:06:55.690 --> 00:06:59.010
This is just a copy of that same reference.

94
00:06:59.020 --> 00:07:06.110
So if I were to change some value in reference copy the value would also be changed and B.J. the section

95
00:07:06.110 --> 00:07:07.100
is getting a little long.

96
00:07:07.100 --> 00:07:08.510
So we'll take a break here.

97
00:07:08.750 --> 00:07:13.370
But in the next video we'll see another example of the stack and explore how it works with a little

98
00:07:13.370 --> 00:07:15.120
bit more complicated example.
