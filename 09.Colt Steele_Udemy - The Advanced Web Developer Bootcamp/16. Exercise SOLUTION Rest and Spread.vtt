WEBVTT
1
00:00:00.450 --> 00:00:01.250
Welcome back.

2
00:00:01.440 --> 00:00:06.000
In this video we're going to go over solutions to the rest and spread exercises.

3
00:00:06.120 --> 00:00:11.640
The first exercise is to write a function called smallest value which accepts a variable number of arguments

4
00:00:11.850 --> 00:00:15.090
and returns the smallest argument passed to the function.

5
00:00:15.090 --> 00:00:19.290
Here we can use the rest operator to gather all of the arguments to the function.

6
00:00:19.290 --> 00:00:24.810
This will return an array to us so if we try to use math that min on that array We'll get back not a

7
00:00:24.810 --> 00:00:25.410
number.

8
00:00:25.650 --> 00:00:31.230
So what we need to do is use the spread operator to spread out each of the values in the array passed

9
00:00:31.230 --> 00:00:34.400
to this function for the next function plays in middle.

10
00:00:34.410 --> 00:00:39.220
We need to accept an array and a list of values which will place in the middle of the array.

11
00:00:39.240 --> 00:00:42.540
What we'll do is first figure out where the middle of the array is.

12
00:00:42.540 --> 00:00:48.810
By doing math top floor and then taking the array length and dividing it by 2 in order to place values

13
00:00:48.810 --> 00:00:54.180
in an array we can use the splice method and the first parameter space is the index that we start at

14
00:00:54.420 --> 00:00:56.200
which will be our myd variable.

15
00:00:56.220 --> 00:01:00.380
The second parameter to splice is how many values we remove which will be zero.

16
00:01:00.690 --> 00:01:04.180
A third parameter is a comma separated list of values to add.

17
00:01:04.410 --> 00:01:06.610
Since we need to add an array of values.

18
00:01:06.630 --> 00:01:12.390
We're going to spread out these values as the third parameter to space and then return the array for

19
00:01:12.390 --> 00:01:13.910
the next function join arrays.

20
00:01:13.950 --> 00:01:19.740
We're going to be using the rest operator will assign a variable called RS and return the result of

21
00:01:19.740 --> 00:01:25.650
reducing the arguments and concatenating each value with the next one will be in our accumulator with

22
00:01:25.650 --> 00:01:30.840
an empty array and keep concatenating as many arrays as our pasts to this function.

23
00:01:30.840 --> 00:01:36.210
Notice that we're using Herro functions to clean up this code for the next exercise some even ours.

24
00:01:36.270 --> 00:01:38.430
We're going to use the rest operator again.

25
00:01:38.690 --> 00:01:43.600
Here we're going to reduce and check and see if each next value is divisible by 2.

26
00:01:43.740 --> 00:01:46.050
If it is we'll added to the accumulator.

27
00:01:46.050 --> 00:01:51.110
Otherwise we'll just return the accumulated the next two exercises should look pretty familiar.

28
00:01:51.100 --> 00:01:54.460
If you've completed them in the call apply and bind section.

29
00:01:54.560 --> 00:01:58.910
The first thing we need to do is write a function called Phlip which accepts another function and a

30
00:01:58.910 --> 00:02:00.050
value for the keyword.

31
00:02:00.050 --> 00:02:05.570
This you are then going to gather the remaining arguments passed of this function using the rest operator

32
00:02:05.930 --> 00:02:10.700
and then will return another function where we'll gather all of the arguments again using the rest.

33
00:02:10.700 --> 00:02:16.490
Operator will then create a variable which will be the result of our outer arguments concatenated with

34
00:02:16.490 --> 00:02:21.620
the inner arguments in order to make sure that we pass the correct amount of parameters we're going

35
00:02:21.620 --> 00:02:24.650
to slice this entire array of arguments and go.

36
00:02:24.650 --> 00:02:30.100
Up until just how many arguments are passed to the function that Phlip accepts to do that.

37
00:02:30.110 --> 00:02:33.550
We'll use the lenth property on the function pass to flip.

38
00:02:33.590 --> 00:02:37.700
Finally will return the result of that function with the correct value of the keyword.

39
00:02:37.700 --> 00:02:41.240
This using apply and pass n as a second parameter.

40
00:02:41.240 --> 00:02:47.060
All of our arguments reversed for the final exercise will be implementing a bind function which will

41
00:02:47.060 --> 00:02:49.570
accept some other function and a value for the keyword.

42
00:02:49.580 --> 00:02:55.340
This we're then going to gather the remaining arguments using the rest operator and return a function

43
00:02:55.430 --> 00:02:58.120
where we'll gather the inner arguments as well.

44
00:02:58.280 --> 00:03:01.170
Will then return the result of the function pass to bind.

45
00:03:01.190 --> 00:03:07.340
Using apply and as the first parameter pass in our value for the keyword this and then an array of the

46
00:03:07.370 --> 00:03:13.040
outer and inner arguments concatenated together and that's all for the rest and spread exercises.

47
00:03:13.040 --> 00:03:17.020
These ones are tricky so be sure to try them again and let us know if you have any questions.

48
00:03:17.060 --> 00:03:17.930
We're here to help.

49
00:03:18.070 --> 00:03:19.070
See you in the next video.
