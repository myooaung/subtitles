WEBVTT
1
00:00:01.170 --> 00:00:05.990
Welcome to the section on object oriented programming here's what we'll be doing in this section.

2
00:00:06.240 --> 00:00:12.870
We're going to define what object oriented programming or O.P. is and revisit the new keyword and understand

3
00:00:12.870 --> 00:00:18.660
it in quite a bit a depth we'll then use constructor functions to reduce code duplications and refactor

4
00:00:18.660 --> 00:00:21.740
our constructor functions using call and apply.

5
00:00:21.810 --> 00:00:27.150
If you haven't watched the series on closures and the keyword this I highly recommend you do that first.

6
00:00:27.150 --> 00:00:32.040
Everything in these videos will build off of our knowledge of the keyword this as well as call apply

7
00:00:32.070 --> 00:00:33.030
and bind.

8
00:00:33.030 --> 00:00:33.850
Here we go.

9
00:00:34.260 --> 00:00:36.410
So what is object oriented programming.

10
00:00:36.420 --> 00:00:43.260
Simply put it's a programming model based around the idea of objects and blueprints which create objects

11
00:00:43.740 --> 00:00:49.350
we call these blueprints classes and the objects that we create from our classes are traditionally called

12
00:00:49.410 --> 00:00:52.740
instances with object oriented programming.

13
00:00:52.740 --> 00:00:59.100
We strive to make our classes abstract and modular so that we can reuse classes easily and share them

14
00:00:59.160 --> 00:01:02.320
amongst all parts of an application.

15
00:01:02.340 --> 00:01:07.860
It's important to note that javascript does not have built in support for classes unlike languages like

16
00:01:07.860 --> 00:01:09.750
Python Ruby and Java.

17
00:01:09.900 --> 00:01:17.190
But we can mimic the behavior of classes using with Javascript has functions and objects before we see

18
00:01:17.190 --> 00:01:20.480
how to use functions to mimic the behavior of what a class is.

19
00:01:20.520 --> 00:01:23.790
Let's see why this programming technique is quite useful.

20
00:01:23.790 --> 00:01:28.590
Imagine for a second that you're an architect and you're tasked with building a few houses.

21
00:01:28.800 --> 00:01:34.560
Each house is going to have a certain number of bedrooms bathrooms and a number of square feet.

22
00:01:34.590 --> 00:01:37.800
The first thing that might come to mind is let's make an object for each house.

23
00:01:37.800 --> 00:01:43.380
We need to make that seems pretty reasonable but once we start having to create more than a few objects

24
00:01:43.680 --> 00:01:46.690
things get very repetitive and tedious.

25
00:01:46.890 --> 00:01:51.510
Let's refactor this code by writing a blueprint for what a house should look like.

26
00:01:51.540 --> 00:01:55.600
Let's make a function when used that will construct a house object.

27
00:01:55.920 --> 00:01:59.070
In javascript we call these constructor functions.

28
00:01:59.070 --> 00:02:02.760
Now let's see what our constructor function for a house looks like.

29
00:02:02.760 --> 00:02:05.940
Right off the bat we see that the function is capitalized.

30
00:02:05.940 --> 00:02:08.290
This does not change anything about the function.

31
00:02:08.490 --> 00:02:14.640
It's just best practice and convention so that other developers know that it's a constructor function.

32
00:02:14.640 --> 00:02:17.560
The next thing we see is the keyword this is back.

33
00:02:17.760 --> 00:02:19.320
Just when you thought we were done with that.

34
00:02:19.490 --> 00:02:24.090
If you haven't watched the series on closures and a keyword this makes sure you do so.

35
00:02:24.090 --> 00:02:27.130
Otherwise the rest of this series will be quite confusing.

36
00:02:27.660 --> 00:02:31.200
In our constructor function we are attaching properties onto the keyword.

37
00:02:31.200 --> 00:02:37.140
This we're somehow hoping that when we call the function a new object will be returned to us with the

38
00:02:37.140 --> 00:02:39.780
values specified in the function.

39
00:02:39.780 --> 00:02:41.810
However something is missing here.

40
00:02:42.000 --> 00:02:47.190
If we look at the first house variable we are setting it equal to the result of the house function being

41
00:02:47.190 --> 00:02:48.180
called.

42
00:02:48.180 --> 00:02:51.600
The problem is our house function is not returning anything.

43
00:02:51.720 --> 00:02:54.610
Therefore the function will return undefined.

44
00:02:55.050 --> 00:02:56.380
So how do we fix this issue.

45
00:02:56.670 --> 00:03:01.030
The answer lies in another special keyword that will explore in the next video.

46
00:03:01.110 --> 00:03:02.080
The new keyword.

47
00:03:02.160 --> 00:03:02.720
See other.
