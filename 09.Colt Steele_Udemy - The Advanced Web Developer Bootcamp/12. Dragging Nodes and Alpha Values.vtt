WEBVTT
1
00:00:00.420 --> 00:00:01.380
Welcome back.

2
00:00:01.590 --> 00:00:06.780
In this video we'll learn how to add some more functionality to our force directed graph by making the

3
00:00:06.800 --> 00:00:08.370
node's Dragonball.

4
00:00:08.400 --> 00:00:13.770
This is a nice visual enhancement that allows the user to move the nodes around and see the forces update

5
00:00:13.860 --> 00:00:16.870
in real time in order to do this.

6
00:00:16.880 --> 00:00:18.570
Two things have to happen.

7
00:00:18.860 --> 00:00:24.300
First we need to be able to implement some sort of drag functionality on our elements.

8
00:00:24.330 --> 00:00:29.780
Second when a node is being dragged it needs to be able to ignore all of the other forces acting on

9
00:00:29.780 --> 00:00:33.090
it and pay attention only to the user dragging it around.

10
00:00:34.520 --> 00:00:38.880
Fortunately D-3 allows us to do both of these things without too much trouble.

11
00:00:39.740 --> 00:00:45.440
Here are some links to our code where we left it off for the dragging D-3 comes packets with support

12
00:00:45.440 --> 00:00:48.670
for dragging behavior the A D three dot drag.

13
00:00:48.980 --> 00:00:54.320
This method allows for driving behavior on a given D-3 selection and is invoked in the same way that

14
00:00:54.320 --> 00:01:02.140
axes are invoked by using the call method on the selection D-3 dot drag exposes three different types

15
00:01:02.140 --> 00:01:05.840
of dragging events start drag and end.

16
00:01:06.250 --> 00:01:07.630
As you can probably guess.

17
00:01:07.720 --> 00:01:13.990
Start Fires when someone begins to drag an element drag fires repeatedly as someone is dragging and

18
00:01:13.990 --> 00:01:18.560
end fires when someone has stopped to see these events in action.

19
00:01:18.560 --> 00:01:25.160
Let me move to my node selection variable and at the bottom called the three dot drag I'll attach three

20
00:01:25.160 --> 00:01:31.470
callbacks in the air drag start on start drag on drag and drag end on end.

21
00:01:33.540 --> 00:01:39.000
For now these functions won't do very much drag start on a log one message.

22
00:01:39.060 --> 00:01:47.640
Drag will log another and drag and log a third saving refresh as you can see when I mouse over one of

23
00:01:47.640 --> 00:01:48.180
my nodes.

24
00:01:48.190 --> 00:01:55.520
Nothing happens but if I click on my mouse while I'm over a node the start event fires then as I move

25
00:01:55.520 --> 00:01:59.070
my mouse around the drag event continues to fire.

26
00:01:59.090 --> 00:02:03.740
Finally when I mouse up the end event fires great.

27
00:02:03.850 --> 00:02:06.330
This is exactly the structure we'll need.

28
00:02:06.370 --> 00:02:10.060
Now we just need to update our callbacks so that they do what we want them to do.

29
00:02:11.520 --> 00:02:16.980
First we'd like to be able to move our nodes independently of the simulation forces to do this.

30
00:02:16.980 --> 00:02:23.880
We can set special properties on the node f x and f y when you have a node in a for simulation.

31
00:02:23.920 --> 00:02:29.900
The x property will fix that nodes exposition at whatever value you specify.

32
00:02:29.900 --> 00:02:34.850
Similarly f y will fix that knows why position in particular.

33
00:02:34.940 --> 00:02:40.970
This means that the node will stay put and will not be influenced by forces acting on it to remove the

34
00:02:40.970 --> 00:02:41.930
fixed position.

35
00:02:41.930 --> 00:02:47.410
You can set these two properties to no in order to drag our nodes.

36
00:02:47.450 --> 00:02:50.330
We'll need to set f x and f y properties on them.

37
00:02:50.630 --> 00:02:52.570
For example when we start dragging.

38
00:02:52.610 --> 00:02:56.230
We can set these properties equal to the current position values for the node.

39
00:02:56.720 --> 00:03:02.120
As for dragging we can update these properties based on the event and when we're finished we can set

40
00:03:02.120 --> 00:03:04.980
these properties back to No.

41
00:03:05.020 --> 00:03:06.660
Let's see if this works.

42
00:03:06.760 --> 00:03:13.780
When I refresh the page it looks like I can add these nodes around great weight.

43
00:03:13.800 --> 00:03:20.020
It stopped working based on the messages being logged to the con. I'm still triggering the dragons but

44
00:03:20.040 --> 00:03:21.740
now nothing's happening.

45
00:03:21.780 --> 00:03:22.910
So what's going on.

46
00:03:24.250 --> 00:03:30.100
To understand this behavior we need to dig a little deeper into how the simulation works forces aren't

47
00:03:30.100 --> 00:03:31.630
applied continuously.

48
00:03:31.630 --> 00:03:34.150
Otherwise most charts would never stabilize.

49
00:03:34.510 --> 00:03:39.790
Instead when the simulation starts there is a constant called an alpha value that affects the strength

50
00:03:39.820 --> 00:03:42.520
of every force in the simulation.

51
00:03:42.520 --> 00:03:47.950
After every tick of the simulation the alpha value decays until it reaches some minimal value at which

52
00:03:47.950 --> 00:03:50.340
point the simulation stops.

53
00:03:50.350 --> 00:03:55.760
In the meantime since the alpha value is shrinking the forces also weaken over time.

54
00:03:55.990 --> 00:04:03.180
This process is sometimes referred to as a cooling of the simulation D-3 exposes several methods for

55
00:04:03.180 --> 00:04:05.160
manipulating the alpha value.

56
00:04:05.160 --> 00:04:12.390
These include Alpha which can either get the current Alpha value or set a new alpha value alpha men

57
00:04:12.540 --> 00:04:18.060
which either gets or sets the smallest value alpha can be once Alpha dips below this value.

58
00:04:18.060 --> 00:04:20.660
The simulation stops by default.

59
00:04:20.790 --> 00:04:28.950
This value is zero point zero 0 1 alpha decay which gets or sets the decay rate for the alpha value.

60
00:04:29.060 --> 00:04:37.620
During each tick this defaults to approximately zero point zero 7:58 Alpha target which gets since a

61
00:04:37.620 --> 00:04:45.080
new target value that Alpha will head towards after every take this defaults to zero the easiest way

62
00:04:45.080 --> 00:04:49.870
to see the alpha value change is by Konsole logging it inside of the tick event handler.

63
00:04:50.210 --> 00:04:54.230
Let's do that now as you can see while Alpha is changing.

64
00:04:54.230 --> 00:05:02.150
The simulation works fine but once it goes below the minimum we can no longer drag the nodes around.

65
00:05:02.170 --> 00:05:05.320
We can also begin to appreciate the value of this alpha parameter.

66
00:05:05.320 --> 00:05:12.060
If we forcibly set it equal to one inside of the Candler in this case it takes these nodes a relatively

67
00:05:12.060 --> 00:05:16.920
long time to find a stable arrangement and there is no guarantee that such an arrangement would even

68
00:05:16.920 --> 00:05:19.560
exist for a more complicated set of nodes.

69
00:05:21.330 --> 00:05:27.150
In order to get our dragging functionality working well need to manipulate the alpha value we have a

70
00:05:27.150 --> 00:05:28.590
couple of options.

71
00:05:28.650 --> 00:05:35.370
One is to forcibly set a new alpha value inside of the drag of X and then restart the simulation.

72
00:05:35.380 --> 00:05:41.770
You can choose any output values greater than the men but stick to values between 0 and 1 if your alpha

73
00:05:41.770 --> 00:05:43.150
value is too big.

74
00:05:43.150 --> 00:05:47.190
Your forces will be too strong in the simulation can break.

75
00:05:47.290 --> 00:05:53.600
If we save and refresh the page you can see that this approach seems to work.

76
00:05:53.600 --> 00:05:59.870
Another option is to manipulate the outflow target rather than automatically updating the alpha value.

77
00:05:59.870 --> 00:06:05.990
This will cause the simulation to warm back up as Alpha tries to increase from 0 to whatever new target

78
00:06:06.020 --> 00:06:06.680
you've set.

79
00:06:07.550 --> 00:06:13.220
For this approach we won't touch the drag callback but will have some modified drag start to drag and

80
00:06:14.070 --> 00:06:15.020
in drag start.

81
00:06:15.050 --> 00:06:22.010
We'll need to set a new target and restart the simulation then in drag and we need to set the target

82
00:06:22.100 --> 00:06:23.190
back to zero.

83
00:06:23.510 --> 00:06:31.470
Otherwise Alpha will never decay below its minimum let's save and refresh again as you can see our dragging

84
00:06:31.470 --> 00:06:33.270
feature now seems to be working.

85
00:06:34.820 --> 00:06:35.980
Great.

86
00:06:36.420 --> 00:06:41.180
There's plenty more to learn if you want to build force directed graphs but we've built a pretty solid

87
00:06:41.180 --> 00:06:44.630
conceptual foundation in the next video.

88
00:06:44.660 --> 00:06:50.420
We'll take a look at a real world data set and try to create a force directed graph out of it.

89
00:06:50.420 --> 00:06:51.550
I'll see you there.
