WEBVTT
1
00:00:01.120 --> 00:00:06.990
In the last section we looked at the redux API without any re-act now see how to integrate redux into

2
00:00:06.990 --> 00:00:09.370
react to application.

3
00:00:09.390 --> 00:00:17.290
So our objectives will be to describe re-act redux use the provider component to share store and use

4
00:00:17.290 --> 00:00:23.020
connect to map state the props and map dispatch to perhaps we'll see what that means when we get to

5
00:00:23.020 --> 00:00:23.310
it.

6
00:00:25.930 --> 00:00:31.100
So re-act redux is a library that facilitates integrating react with redux.

7
00:00:31.240 --> 00:00:37.400
It exposes a provider component and it connects function which we use to hook redux up to react and

8
00:00:37.420 --> 00:00:45.250
provider along with CONNECT handle's setting up listeners and passing state to component's so to install

9
00:00:45.310 --> 00:00:46.270
re-act redux.

10
00:00:46.270 --> 00:00:53.440
It's just NPM installed dasht us save re-act relax and don't forget you also need redux installed.

11
00:00:53.700 --> 00:01:00.210
So this is an example of setting up re-act redux with a re-act app very similar to react router.

12
00:01:00.420 --> 00:01:07.320
You're going to wrap your toplevel app component in a provider and then you want to create a store just

13
00:01:07.320 --> 00:01:13.320
like we saw before using create store and pass in a root reducer and that store will be a prop to your

14
00:01:13.320 --> 00:01:14.170
provider.

15
00:01:15.200 --> 00:01:20.570
Now notice here we're importing create store from Rita so we don't have to say redox not create store

16
00:01:20.580 --> 00:01:20.950
anymore.

17
00:01:20.950 --> 00:01:27.830
We could just use to create store function directly and our reducers coming in from a reducers file.

18
00:01:33.210 --> 00:01:38.930
Once we've set up our store we need a way of getting the state out of the store and into our components.

19
00:01:38.970 --> 00:01:42.690
So in this example I have a very simple component called bold name.

20
00:01:42.770 --> 00:01:47.080
It takes in a name as a prop and just puts strong tags around it.

21
00:01:47.100 --> 00:01:53.340
Assuming I have a key of name in my state in order to pass that into my component as a prop I need to

22
00:01:53.340 --> 00:01:59.610
implement this map state to prop's function and the parameter that function is the entire state of your

23
00:01:59.610 --> 00:02:05.080
application and what you return is the piece of state that just this component cares about.

24
00:02:05.490 --> 00:02:10.050
So there could be hundreds of keys in the state object but the only one I care about for this component

25
00:02:10.350 --> 00:02:11.240
is name.

26
00:02:11.490 --> 00:02:16.400
So I'm going to pass name in as a prop and the value of name will be state that name.

27
00:02:16.440 --> 00:02:24.960
Now in order to hook that up to your component you will export default not just bold name but the connect

28
00:02:24.960 --> 00:02:32.750
function which first takes map state to Propst as a parameter and then returns a new function and then

29
00:02:32.750 --> 00:02:35.820
with that new function you'll pass in your component.

30
00:02:36.140 --> 00:02:39.920
So this is what you'll typically see and react.

31
00:02:40.210 --> 00:02:45.460
Now in the last example we saw a component that needed some state out of the store but what about a

32
00:02:45.460 --> 00:02:47.680
component that needs to dispatch an action.

33
00:02:47.680 --> 00:02:52.540
Well that's what the second parameter of connectors for the function name is typically map dispatch

34
00:02:52.540 --> 00:02:56.390
to prop's So this function gets two parameters.

35
00:02:56.390 --> 00:03:02.170
Dispatch and the prop's of that component and returns an object.

36
00:03:02.230 --> 00:03:07.720
The keys of the object are what props you want to pass to the component and the values are functions.

37
00:03:07.720 --> 00:03:12.050
The function typically invokes dispatch with an action.

38
00:03:12.050 --> 00:03:19.000
So inside of this component whenever I do an on click I'll use the delete name Propp which is a function

39
00:03:19.120 --> 00:03:22.530
that dispatched an action to delete that name.

40
00:03:23.550 --> 00:03:26.640
So this is what it looks like using both components together.

41
00:03:26.640 --> 00:03:32.670
Since we already export a bold name and delete name with CONNECT we don't need to do connect here.

42
00:03:32.880 --> 00:03:39.540
And the two components are already hooked up to state and to dispatch so we don't need to add any additional

43
00:03:39.540 --> 00:03:46.970
prompts so this will render a button that I can use to delete the name and the name itself.

44
00:03:46.970 --> 00:03:48.110
Now it's your turn.

45
00:03:48.170 --> 00:03:51.740
Next up we're going to work on an exercise to use redux.
