WEBVTT
1
00:00:01.060 --> 00:00:01.880
Welcome back.

2
00:00:02.040 --> 00:00:07.080
In this video we're going to discuss an important concept in object oriented programming in which we

3
00:00:07.080 --> 00:00:10.830
pass methods and properties from one class to another.

4
00:00:10.830 --> 00:00:15.950
This is known as inheritance even though javascript is not an object oriented language.

5
00:00:15.990 --> 00:00:21.650
We can mimic inheritance with objects and functions just like we do with our constructor functions.

6
00:00:21.660 --> 00:00:29.060
Remember inheritance is the process of passing methods and properties from one class to another in javascript.

7
00:00:29.070 --> 00:00:31.630
We do not have classes built into the language.

8
00:00:31.710 --> 00:00:38.580
So what exactly do we pass from one constructor function to another when doing inheritance with javascript.

9
00:00:38.580 --> 00:00:41.540
We don't actually pass one constructor to another.

10
00:00:41.640 --> 00:00:46.980
We passed the prototype property of one constructor to another constructor.

11
00:00:46.980 --> 00:00:52.650
The idea here is that since the prototype property is where all of our properties and methods live we

12
00:00:52.650 --> 00:00:54.810
need to have another constructor function.

13
00:00:54.810 --> 00:00:56.920
Get all those properties.

14
00:00:57.300 --> 00:00:58.930
You might be wondering why we do this.

15
00:00:58.950 --> 00:01:01.020
So let's take a look at a small example.

16
00:01:01.320 --> 00:01:06.570
Here we have two constructor functions person and student and we can see that our constructor function

17
00:01:06.630 --> 00:01:10.130
is using apply to reduce duplication at the student.

18
00:01:10.140 --> 00:01:15.810
That prototype object has a method called Say hi which looks just like the method we implemented on

19
00:01:15.810 --> 00:01:17.880
the person prototype.

20
00:01:17.880 --> 00:01:21.390
Is there any way we can copy over that function.

21
00:01:21.410 --> 00:01:27.520
The first idea that might come to mind is let's assign the prototype property of one object to be another's

22
00:01:28.130 --> 00:01:32.510
so we can assign students that prototype to be person that prototype.

23
00:01:32.510 --> 00:01:38.920
Now we can create an object from the student constructor and invoke the say hi method and it works well.

24
00:01:38.960 --> 00:01:40.190
Not exactly.

25
00:01:40.190 --> 00:01:43.590
Let's add something onto the student that prototype object.

26
00:01:43.640 --> 00:01:49.760
If we implemented this correctly our Person objects should not be able to be modified from the student

27
00:01:49.760 --> 00:01:51.250
constructor function.

28
00:01:51.260 --> 00:01:54.130
Remember we want a student to inherit from person.

29
00:01:54.500 --> 00:01:58.970
So if we did this correctly the inheritance should only affect the student.

30
00:01:58.970 --> 00:02:04.100
Now let's create a new object from the person constructor and see if it has a status method which it

31
00:02:04.100 --> 00:02:05.080
should not.

32
00:02:05.090 --> 00:02:09.380
Status is just something that belongs to the student prototype.

33
00:02:09.410 --> 00:02:10.700
Something isn't right here.

34
00:02:10.970 --> 00:02:15.530
The person prototype should not have properties from the student prototype.

35
00:02:15.530 --> 00:02:19.430
The problem here is that we can't just assign one object to another.

36
00:02:19.430 --> 00:02:21.530
It will just create a reference.

37
00:02:21.530 --> 00:02:23.620
Let's see what we mean by that with a simple example.

38
00:02:23.630 --> 00:02:29.540
If you're confused I'm going to create an object called 0 and give it a name property and a value of

39
00:02:29.570 --> 00:02:34.100
L.E. then create another object 0 2 and assign it to.

40
00:02:34.520 --> 00:02:40.460
If I change the name property on 0 2 to 10 and then examine the name property on 0.

41
00:02:40.520 --> 00:02:42.710
It has also been changed as well.

42
00:02:42.710 --> 00:02:48.470
That's because when we assign one object to another we do not create a brand new object we just create

43
00:02:48.500 --> 00:02:52.040
a reference or a link to an existing object.

44
00:02:52.070 --> 00:02:57.620
In our case this means that if we change the student prototype it will also affect the person prototype

45
00:02:58.600 --> 00:03:01.940
we still want all of the methods and properties from the person prototype.

46
00:03:02.110 --> 00:03:03.750
What we do not want to reference.

47
00:03:03.880 --> 00:03:05.680
So how can we fix this.

48
00:03:05.680 --> 00:03:07.290
The answer is Object.

49
00:03:07.340 --> 00:03:13.780
Create a function that creates a brand new object and accepts as its first parameter what the Dunder

50
00:03:13.780 --> 00:03:14.860
Prato should be.

51
00:03:14.860 --> 00:03:18.790
For that newly created object this is exactly what we need.

52
00:03:18.790 --> 00:03:20.510
Let's see how it works.

53
00:03:20.590 --> 00:03:26.560
We can see here that our student prototype is being assigned to a new object with a donder Prato of

54
00:03:26.590 --> 00:03:29.190
person that prototype.

55
00:03:29.200 --> 00:03:34.320
Now let's add a function on the student prototype to see if it does not affect the person prototype.

56
00:03:34.840 --> 00:03:39.820
And then let's create a person object and we can see that the student prototype does not affect the

57
00:03:40.030 --> 00:03:42.000
person prototype anymore.

58
00:03:43.090 --> 00:03:47.350
Now you might be wondering why are we using objects that create and not the new keyword.

59
00:03:47.500 --> 00:03:50.820
Since the new keyword sets with the prototype object should be.

60
00:03:51.130 --> 00:03:56.530
Although it does the same thing as object or create it will add unnecessary properties on the prototype

61
00:03:56.590 --> 00:03:57.580
object.

62
00:03:57.580 --> 00:04:03.040
So in doing inheritance through the prototype which is commonly called prototype will inheritance use

63
00:04:03.150 --> 00:04:09.720
objects create another way of pass along methods and properties from one prototype object to another.

64
00:04:09.730 --> 00:04:12.950
There is one final piece to completing inheritance.

65
00:04:13.090 --> 00:04:18.610
Remember that every prototype object has a property on it called constructor which points back to the

66
00:04:18.610 --> 00:04:20.470
constructor function.

67
00:04:20.470 --> 00:04:25.900
If we take a look at the constructor property on student prototype you'll actually see that it is the

68
00:04:25.900 --> 00:04:27.390
person constructor.

69
00:04:27.700 --> 00:04:32.350
That's because when we did object create we overwrote the constructor property.

70
00:04:32.530 --> 00:04:35.650
So we need to make sure to set it back to the correct value.

71
00:04:35.740 --> 00:04:40.800
We call this resetting the constructor and it is the final part of prototype inheritance.

72
00:04:41.200 --> 00:04:47.750
To do that we simply assign student that prototype that constructor to be the student function.

73
00:04:47.770 --> 00:04:50.690
To recap there are two parts to prototype inheritance.

74
00:04:50.830 --> 00:04:56.900
Setting the prototype property to be a newly created object and resetting the constructor property.

75
00:04:56.920 --> 00:05:01.420
This concept is a bit tricky to wrap your head around so if you're still not feeling too confident try

76
00:05:01.420 --> 00:05:06.770
these examples in the chrome console to see exactly how everything is happening in the next video.

77
00:05:06.790 --> 00:05:08.890
We'll review what we've learned in this section.

78
00:05:08.920 --> 00:05:11.470
First it's time for you to practice with inheritance.

79
00:05:11.470 --> 00:05:11.830
Good luck.
