WEBVTT
1
00:00:00.270 --> 00:00:01.160
Welcome back.

2
00:00:01.290 --> 00:00:04.910
In this video we're going to be going over solutions to the constructor functions.

3
00:00:04.920 --> 00:00:10.800
Exercise is the first thing we need to do is create a constructor function for a person.

4
00:00:10.890 --> 00:00:15.950
Each person should have a first name a last name favorite color and favorite number.

5
00:00:16.350 --> 00:00:21.660
Let's declare a person function with capital P so that we can clearly tell that this is a constructor

6
00:00:21.660 --> 00:00:24.390
function and let's pass in the parameters.

7
00:00:24.390 --> 00:00:26.070
First Name Last Name.

8
00:00:26.070 --> 00:00:28.830
Favorite color and favorite number.

9
00:00:28.830 --> 00:00:34.710
Inside of this function will attach four properties onto the keyword this this so will say this dot

10
00:00:34.710 --> 00:00:40.500
first name is assigned to the first name parameter and then we'll copy these three lines and replace

11
00:00:40.500 --> 00:00:45.190
first name with last name favorite color and then favorite number.

12
00:00:45.310 --> 00:00:46.790
Great.

13
00:00:46.830 --> 00:00:52.950
Next we need to write a method called Multiply favorite number that takes in a number and returns the

14
00:00:52.950 --> 00:00:56.390
product of that number and the person's favorite number.

15
00:00:56.670 --> 00:01:03.060
So we'll add a method to the constructor function and say this stop multiply favorite number is assigned

16
00:01:03.060 --> 00:01:06.830
to a function which accepts a number inside of here.

17
00:01:06.840 --> 00:01:13.380
Will return that number multiplied by the favorite number property for that person which we can access

18
00:01:13.410 --> 00:01:15.370
using this favorite number.

19
00:01:16.920 --> 00:01:22.350
In our next example we need to refactor some code with two constructor functions that look exactly the

20
00:01:22.350 --> 00:01:25.320
same inside of our child function.

21
00:01:25.320 --> 00:01:29.670
We want to take out all of this code and invoke the parent function.

22
00:01:29.670 --> 00:01:34.810
We can't just invoke the parent function on its own because we'll get the incorrect value of the keyword

23
00:01:34.880 --> 00:01:39.240
this so will invoke the parent function using doc apply.

24
00:01:39.410 --> 00:01:44.000
And as the first parameter to apply will pass in keyword this.

25
00:01:44.040 --> 00:01:44.910
A little tricky.

26
00:01:44.910 --> 00:01:50.970
The idea here is that the key word this refers to an object that will be created when the child function

27
00:01:50.970 --> 00:01:53.390
is run using the new keyword.

28
00:01:53.430 --> 00:01:59.160
So we need to make sure that we get the right value of the keyword this since we're using apply we can

29
00:01:59.160 --> 00:02:03.630
simply pass in as the second parameter the arguments array like object.

30
00:02:03.930 --> 00:02:09.140
If we we're using call we would have to pass in all of these arguments separated by a comma.

31
00:02:09.180 --> 00:02:13.820
That's why apply is a little more convenient here and that's all for the functions exercise.

32
00:02:13.830 --> 00:02:14.900
See you in the next video.
