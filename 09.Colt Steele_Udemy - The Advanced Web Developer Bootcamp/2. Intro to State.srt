1
00:00:02,510 --> 00:00:04,280
Now let's talk about state.

2
00:00:04,670 --> 00:00:09,450
So everything we've done and react so far honestly can really be down with just H.T. amounts.

3
00:00:09,570 --> 00:00:14,940
SS We haven't done anything that requires some some data that changes.

4
00:00:15,230 --> 00:00:20,600
But now that the ADD state will we'll see the difference between props and state and how state can actually

5
00:00:21,260 --> 00:00:24,760
affect change in your application.

6
00:00:24,830 --> 00:00:32,090
Our objectives will be to first define stay in re-act second to create a component with a constructor

7
00:00:32,210 --> 00:00:33,410
and state.

8
00:00:33,410 --> 00:00:36,580
We haven't seen the constructor yet but we'll see it in this one.

9
00:00:37,100 --> 00:00:42,780
And third to describe what happens when set state is called what is state.

10
00:00:42,800 --> 00:00:49,730
Well state is just like it sounds that stateful data it's data in your application that can change.

11
00:00:49,730 --> 00:00:57,230
So when we use props and all the examples before we can never change props and state is different state

12
00:00:57,230 --> 00:00:58,850
can be changed.

13
00:00:58,940 --> 00:01:02,140
But just like prop's we can't modify state directly.

14
00:01:02,150 --> 00:01:04,410
We'll see how we can modify state in just a minute.

15
00:01:06,820 --> 00:01:12,130
In this example we've got a react component called app that has the first constructor that we've seen

16
00:01:12,130 --> 00:01:18,580
so far and in every constructor that you create in your re-act component you always want to take prop's

17
00:01:18,580 --> 00:01:25,240
as a parameter and then invoke super props which essentially calls the the constructor of this component

18
00:01:25,240 --> 00:01:26,710
that you're inheriting from.

19
00:01:26,710 --> 00:01:31,780
So this is just boilerplate you'll do this in every constructor that you write Propst as a parameter

20
00:01:31,780 --> 00:01:34,510
and then super prop's is the next line.

21
00:01:34,660 --> 00:01:37,590
After that we're defining our state in the constructor.

22
00:01:37,690 --> 00:01:41,490
So this state equals some object inside that object.

23
00:01:41,500 --> 00:01:45,480
We have data that we care about in our application that we might want to change.

24
00:01:45,670 --> 00:01:52,210
So favorite color here is a piece of state and then inside of our render method we can access that state

25
00:01:52,210 --> 00:01:54,200
using this state DOT.

26
00:01:54,280 --> 00:01:55,720
In this case favorite color.

27
00:01:55,900 --> 00:02:02,740
But this is just a normal javascript object so any property that's defined in state we can access via

28
00:02:02,810 --> 00:02:06,160
this state DOT name of property.

29
00:02:06,850 --> 00:02:11,950
But this component still doesn't do anything it's just displaying the static state that we've set in

30
00:02:11,950 --> 00:02:12,820
the constructor.

31
00:02:12,970 --> 00:02:19,780
So how do we change the state well the correct way to change state in your application is to use the

32
00:02:19,780 --> 00:02:26,550
set state method set is defined on your component so you have access to it by saying this that set state

33
00:02:27,580 --> 00:02:34,150
and the simplest usage for set state is to provide a new object which defines all the properties that

34
00:02:34,150 --> 00:02:38,410
you want to overwrite in your old version of your state.

35
00:02:38,440 --> 00:02:44,110
I want to point out here that you should never ever modify state directly just like props you never

36
00:02:44,110 --> 00:02:49,680
want to add your own values to state or overwrite values that state has.

37
00:02:49,750 --> 00:02:55,720
You always want to call set state to make any change to your state and we'll see more of that as we

38
00:02:55,720 --> 00:02:57,620
go.

39
00:02:57,640 --> 00:03:01,540
This is an example of changing the state in our application.

40
00:03:01,540 --> 00:03:06,750
So this is the same as what we saw before with a constructor and a render method that shows our state.

41
00:03:07,060 --> 00:03:13,510
But now we have a set time out and after three seconds this callback function gets invoked and inside

42
00:03:13,510 --> 00:03:14,270
the callback.

43
00:03:14,270 --> 00:03:19,150
This starts that state is going to change our favorite color from red to blue.

44
00:03:19,150 --> 00:03:24,730
Now it's important to note that this not set se is not a synchronous function it's asynchronous.

45
00:03:24,730 --> 00:03:29,560
So if I were to put a console log after this line of code this does state that favorite color would

46
00:03:29,560 --> 00:03:33,170
still be red and why is that state not synchronous.

47
00:03:33,430 --> 00:03:39,640
Well that's because how it acts said state will eventually invoke the render method.

48
00:03:40,120 --> 00:03:44,510
So whenever a set state is called the state will eventually be updated.

49
00:03:44,530 --> 00:03:50,740
Do you have thoughts that say that favorite color become blue when that state gets updated render will

50
00:03:50,740 --> 00:03:56,290
be invoked when renderers invoked will render a new view.

51
00:03:56,320 --> 00:03:58,140
So are Domville get updated.

52
00:03:58,390 --> 00:03:59,740
We'll talk more about this later on.

53
00:03:59,740 --> 00:04:06,280
But the main takeaway is whenever set state gets invoked renderer will eventually get invoked and will

54
00:04:06,340 --> 00:04:10,000
change the DOM with whatever the new value of state is.

55
00:04:10,720 --> 00:04:11,830
That's it for this video.

56
00:04:11,830 --> 00:04:17,080
Now before we talk about more state concepts we need to take a step back and talk about a functional

57
00:04:17,080 --> 00:04:21,130
programming concept in order to understand set state better.

58
00:04:21,130 --> 00:04:27,430
So the next section will talk about pure functions and what it means for a function to be pure.
