1
00:00:00,640 --> 00:00:04,020
In the last video we went over the recipe component of our recipe app.

2
00:00:04,340 --> 00:00:09,200
And in this video we'll take a step back and look at two important concepts related to props called

3
00:00:09,200 --> 00:00:13,010
default props and prop types.

4
00:00:13,070 --> 00:00:20,680
Our objectives will be to use default props to give our props a default value and secondly to use prop

5
00:00:20,680 --> 00:00:24,060
types to specify what props a component is expecting.

6
00:00:24,280 --> 00:00:31,500
So this sort of creates a contract between our component and the user of the component.

7
00:00:31,500 --> 00:00:37,230
Let's start off with the default prop's example so deep all props give you default values for the props

8
00:00:37,230 --> 00:00:40,080
that you're using inside of your component.

9
00:00:40,080 --> 00:00:46,330
So in this example if you think back to our recipe component we had a list of ingredients.

10
00:00:46,500 --> 00:00:49,010
Well we could turn that into a separate component.

11
00:00:49,100 --> 00:00:56,530
I called this component ingredient list and it's going to expect a array of ingredients.

12
00:00:56,600 --> 00:01:02,660
Let's assume the user of this component whoever is using it in their render method doesn't provide an

13
00:01:02,670 --> 00:01:04,150
ingredient prop.

14
00:01:04,580 --> 00:01:11,230
Well if we just have this render code down here this stop Propp start ingredients would be undefined.

15
00:01:11,480 --> 00:01:17,180
So this not prop's that Ingredion stop map would result in an error because we can't call map on an

16
00:01:17,210 --> 00:01:18,510
undefined value.

17
00:01:18,920 --> 00:01:24,790
So what default prop's does up here is it provides a default value for this Propp start ingredient.

18
00:01:25,070 --> 00:01:30,800
Excuse me there's not Propp start ingredients when the user of the component doesn't provide this ingredient

19
00:01:30,800 --> 00:01:31,690
proper.

20
00:01:31,760 --> 00:01:37,310
If the user does provide an ingredient Propp then this default prop's isn't used.

21
00:01:37,430 --> 00:01:40,690
So it's a nice thing to have when you have an optional value.

22
00:01:40,880 --> 00:01:44,690
If the value is optional for your component you can provide a sane default.

23
00:01:44,720 --> 00:01:51,730
If the user doesn't provide one so this is another way of specifying a default Propp.

24
00:01:51,980 --> 00:01:59,000
And this is just normal javascript so you'll notice in the last example we used a static because a default

25
00:01:59,000 --> 00:02:04,370
Propp isn't something that is specific to one instance of a component.

26
00:02:04,460 --> 00:02:06,830
It's something that's shared for all components.

27
00:02:06,830 --> 00:02:14,370
So you can think of this if you're familiar with Object-Oriented Programming as well as a static value.

28
00:02:14,450 --> 00:02:21,500
So similarly we can rather than put it static keyword inside the class after the class is defined we

29
00:02:21,500 --> 00:02:24,820
can say ingredient list that default prompts.

30
00:02:25,040 --> 00:02:31,880
So specifying the default prop's this way and specifying the default prop's this way are equivalent.

31
00:02:31,880 --> 00:02:35,560
I prefer doing it this way just because I like to keep everything inside of the class.

32
00:02:35,750 --> 00:02:36,900
But again it's up to you

33
00:02:39,860 --> 00:02:44,200
here's an example of using default props to load some data for a component.

34
00:02:44,240 --> 00:02:44,840
Hint hint.

35
00:02:44,840 --> 00:02:47,240
This is something that you're going to be doing very shortly.

36
00:02:47,290 --> 00:02:50,150
When you build the full recipes app.

37
00:02:50,180 --> 00:02:56,020
So in this example in the app components or the highest level component I'm loading in some data.

38
00:02:56,060 --> 00:03:02,450
In this case an array of recipes and each element in the array is an object that has title ingredients

39
00:03:02,450 --> 00:03:04,190
instructions and an image.

40
00:03:04,190 --> 00:03:09,810
So again if you remember this is exactly what we had for our recipe component that we created earlier

41
00:03:10,550 --> 00:03:15,340
and now down here in my render method that props start recipes already has that data.

42
00:03:15,500 --> 00:03:21,530
So I can map over it and put all those elements into props for that recipe component.

43
00:03:24,390 --> 00:03:32,070
Now if you notice in the last example I had to list out every prop explicitly go back title ingredients

44
00:03:32,160 --> 00:03:35,420
image and instructions.

45
00:03:35,550 --> 00:03:37,660
We can also actually write it this way.

46
00:03:37,680 --> 00:03:42,810
So the key all specify here and then for the rest of the values I can use the rest.

47
00:03:42,810 --> 00:03:49,380
Operator dot dot dot are which basically takes out all the keys and the values from that object and

48
00:03:49,380 --> 00:03:52,800
passes them to my next component as props.

49
00:03:52,830 --> 00:04:00,060
So then this component will get a prop of title and that value ingredients in this array instructions

50
00:04:00,090 --> 00:04:04,160
and this string and finally image and spaghetti.

51
00:04:04,230 --> 00:04:08,260
So this is a shorthand way of expanding our object.

52
00:04:08,280 --> 00:04:14,490
Now I wouldn't recommend doing this all the time only when you know exactly what you're doing because

53
00:04:14,490 --> 00:04:20,280
this can end up with some code they get sloppy when you end up passing props to a component that you

54
00:04:20,280 --> 00:04:22,230
don't need to or mean to pass

55
00:04:25,390 --> 00:04:26,950
now on to prop types.

56
00:04:26,950 --> 00:04:30,550
So prop types are development time checker for your props.

57
00:04:30,550 --> 00:04:34,830
What I mean by development time is they only work when your app is running in development mode.

58
00:04:35,050 --> 00:04:40,360
So when you have your react to app running in production prop types will do nothing but in development

59
00:04:40,360 --> 00:04:47,650
it's very useful for checking any mistakes you may make in your code and what Propp types do is they

60
00:04:47,650 --> 00:04:51,530
specify requirements for your props.

61
00:04:51,640 --> 00:04:54,830
For users of that component.

62
00:04:54,940 --> 00:04:56,410
Let's start off with the installation.

63
00:04:56,470 --> 00:05:02,200
So the first thing I'll do is NPM install dash dash save prop types prop types used to be part of the

64
00:05:02,200 --> 00:05:03,300
re-act library itself.

65
00:05:03,310 --> 00:05:05,570
But now it's a separate package so we have to install it.

66
00:05:07,920 --> 00:05:10,530
And this is an example of Propp types.

67
00:05:10,710 --> 00:05:13,940
So the same component that we saw earlier the ingredient list.

68
00:05:14,220 --> 00:05:19,320
Let's say we don't want to provide a default parameter of an empty array anymore because it doesn't

69
00:05:19,320 --> 00:05:23,630
make sense to render this component without some data.

70
00:05:23,640 --> 00:05:30,600
So in this example rather than give a default Propp of an empty array we're saying that this ingredient

71
00:05:30,600 --> 00:05:38,040
array must be an array and it must be an array of strings and that array is required.

72
00:05:38,040 --> 00:05:44,840
So if you don't meet any of those checks if the ingredients data that you pass in is not an array.

73
00:05:45,150 --> 00:05:50,550
And if that array doesn't have strings and if that array is not present then you'll get a warning in

74
00:05:50,550 --> 00:05:52,100
the console.

75
00:05:52,260 --> 00:05:57,810
And that warning again will do nothing in production but it's a nice useful thing to have when you're

76
00:05:57,900 --> 00:06:01,360
in development environment because it can catch a lot of bugs.

77
00:06:01,400 --> 00:06:03,270
You don't mean to introduce.

78
00:06:03,390 --> 00:06:06,520
So again prop types are just for development.

79
00:06:06,810 --> 00:06:10,520
But I think super handy and there's lots more to learn with Propp types.

80
00:06:10,690 --> 00:06:12,860
But I'm going to let you explore that on your own.

81
00:06:13,290 --> 00:06:17,500
So over here we've got the Propp types stocks from react.

82
00:06:17,580 --> 00:06:19,310
I'd suggest reading through this.

83
00:06:19,500 --> 00:06:23,730
There's a lot of good information about all the different Propp types you can specify.

84
00:06:23,730 --> 00:06:29,550
You can generally specify any type of props and any sort of combination of required or not required

85
00:06:30,420 --> 00:06:32,400
with all these properties.

86
00:06:32,400 --> 00:06:34,630
So take a look at it.

87
00:06:34,920 --> 00:06:38,800
The URL for that one is Facebook.

88
00:06:38,830 --> 00:06:44,380
Get her bio slash re-act docs slash type checking with Propp types such as CMO.

89
00:06:44,530 --> 00:06:48,980
So I'll end the video by saying Go check out that your El read about it.

90
00:06:49,240 --> 00:06:52,090
And next up we're going to talk about our recipe app again.
