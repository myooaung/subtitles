WEBVTT
1
00:00:01.290 --> 00:00:02.220
Welcome back.

2
00:00:02.220 --> 00:00:05.360
In this video we're going to be going over solutions to the prototypes.

3
00:00:05.400 --> 00:00:10.920
Exercise is the first thing we need to do is create a constructor function for a person.

4
00:00:11.040 --> 00:00:13.840
Each person should have a first name last name.

5
00:00:13.860 --> 00:00:15.890
Favorite color and favorite number.

6
00:00:15.990 --> 00:00:22.020
So let's declare a function person and pass in first name last name favorite color and favorite number

7
00:00:22.170 --> 00:00:26.460
has parameters that should look familiar but it's good to practice again.

8
00:00:26.460 --> 00:00:32.100
So here we'll assign properties onto the keyword this like first name and set it to the value of the

9
00:00:32.100 --> 00:00:33.530
first name parameter.

10
00:00:33.750 --> 00:00:36.170
We'll do the same thing or last name.

11
00:00:36.360 --> 00:00:38.330
Favorite color and favorite number.

12
00:00:39.140 --> 00:00:45.170
Next we need to add a function on the person prototype called full name which returns the first name

13
00:00:45.230 --> 00:00:48.230
and last name property concatenated together.

14
00:00:48.650 --> 00:00:56.450
So we add on to person that prototype a function called fully in this function will return this stuff

15
00:00:56.460 --> 00:00:58.710
first name with an empty space.

16
00:00:58.760 --> 00:01:00.930
And this last name.

17
00:01:01.130 --> 00:01:07.190
Next we need to add a property onto the objects created from our constructor function called Family

18
00:01:07.520 --> 00:01:11.150
which is an empty array inside of our constructor function.

19
00:01:11.150 --> 00:01:14.680
We'll set a family property to be an empty array.

20
00:01:14.750 --> 00:01:20.030
We want to make sure that we don't place this property on the prototype object because we do not want

21
00:01:20.030 --> 00:01:24.380
this shared by every single object created from the person constructor.

22
00:01:24.380 --> 00:01:30.500
When the new keyword is used Next we need to add a function to the person prototype called add to family

23
00:01:31.010 --> 00:01:36.380
which will add an object constructed from the person constructor to the family array.

24
00:01:36.650 --> 00:01:42.170
We have a hint here that we can use the instance of operator to make sure that the object is created

25
00:01:42.170 --> 00:01:43.980
from a certain constructor function.

26
00:01:44.120 --> 00:01:47.250
And we also have to make sure that we don't include duplicates.

27
00:01:47.600 --> 00:01:52.970
So let's add on to a person prototype a function called at the family function.

28
00:01:53.010 --> 00:01:59.750
Well except the parameter that we all call person and let's first check to see if this family that index

29
00:01:59.750 --> 00:02:01.880
of person is negative 1.

30
00:02:02.180 --> 00:02:06.810
We want to make sure that the person is not already in the family already.

31
00:02:06.890 --> 00:02:12.480
Next we want to make sure that our person parameter has been created from the person constructor.

32
00:02:12.710 --> 00:02:19.130
So we'll use the instance of operator for that part if both of these conditions are true will push the

33
00:02:19.130 --> 00:02:23.460
person into this stuff family and return this family.

34
00:02:23.610 --> 00:02:25.190
Let.

35
00:02:25.350 --> 00:02:30.530
For the second part of these exercises we need to implement our own version of the map method that exists

36
00:02:30.590 --> 00:02:32.260
on the array dot prototype.

37
00:02:32.510 --> 00:02:38.480
So we'll define a function called Map on array of prototype which will accept one parameter a callback

38
00:02:38.480 --> 00:02:39.360
function.

39
00:02:39.530 --> 00:02:44.720
Remember the array that we're mapping over will be the keyword this inside of the function.

40
00:02:44.720 --> 00:02:51.540
Let's create a new array and then a for loop iterate starting from zero until I is less than this Dalek's.

41
00:02:51.740 --> 00:02:57.770
This refers to the array that we're calling map on after each iteration will increment i 1.

42
00:02:57.890 --> 00:03:05.420
And inside of the loop will push in the result of the callback with the value index an array.

43
00:03:05.480 --> 00:03:08.870
When we're done iterating will return the new array as a note.

44
00:03:08.870 --> 00:03:13.760
This is a little different than javascript's native implementation of map as mapped does a little bit

45
00:03:13.760 --> 00:03:19.370
more under the hood than what we have Napp actually accepts a second parameter where we can specify

46
00:03:19.370 --> 00:03:21.500
the value of the keyword this.

47
00:03:21.560 --> 00:03:26.850
Don't worry about that implementation just know that our implementation of map is not entirely complete.

48
00:03:27.080 --> 00:03:32.930
For our last method we need to add a method called reverse onto the string prototype arrays have a built

49
00:03:32.930 --> 00:03:33.750
in reverse.

50
00:03:33.800 --> 00:03:35.770
So why not make one for strings.

51
00:03:35.870 --> 00:03:39.920
Now we can do this using something like split and reverse and join.

52
00:03:40.010 --> 00:03:44.260
I'm going to take it a different way so you can see another possible solution.

53
00:03:44.270 --> 00:03:49.070
I'll make a variable called new SDR and assign it to be an empty string.

54
00:03:49.070 --> 00:03:53.530
I'll then start iterating from the end of the string that we are calling reverse on.

55
00:03:53.700 --> 00:04:00.670
I'll keep looping as long as I is greater than or equal to zero and decrement by one after each iteration

56
00:04:01.460 --> 00:04:02.460
inside of the loop.

57
00:04:02.660 --> 00:04:07.610
I'll add onto the new string the character that I'm at in the loop which will be the last character

58
00:04:07.880 --> 00:04:09.360
up to the first character.

59
00:04:09.620 --> 00:04:13.790
When I'm done looping I'll return that new string in reverse.

60
00:04:13.820 --> 00:04:15.740
That's all for the prototypes exercises.

61
00:04:15.740 --> 00:04:17.220
See you in the next video.
