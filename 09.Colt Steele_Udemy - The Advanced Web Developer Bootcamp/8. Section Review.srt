1
00:00:00,300 --> 00:00:04,590
So we've written a lot of code and we're moving quickly on what I want to do is just take a step back

2
00:00:04,620 --> 00:00:07,230
and go through the code that we've written so far.

3
00:00:07,230 --> 00:00:12,340
We started everything in an index dodginess inside of this dot EMV config.

4
00:00:12,360 --> 00:00:17,300
This first line of code is loading any environment variables onto process diet envy.

5
00:00:17,340 --> 00:00:21,300
Remember we're going to use that specific variable called secret key.

6
00:00:21,570 --> 00:00:22,540
That's what we loaded.

7
00:00:22,590 --> 00:00:25,750
This is something that we want to make sure that no one has access to.

8
00:00:25,830 --> 00:00:30,240
And when working with other developers we tell them hey you need to make a dot in the file with that

9
00:00:30,240 --> 00:00:33,760
key of secret key and you even give them a simple one to start with.

10
00:00:33,810 --> 00:00:39,210
Right over here we're bringing in our necessary dependencies Express and invoking it cores for cross

11
00:00:39,210 --> 00:00:44,160
origin resource sharing this is going to be important and we start making requests from another domain

12
00:00:44,250 --> 00:00:50,310
that could be local host 3000 or 4000 different port number violates the same origin policy a really

13
00:00:50,310 --> 00:00:55,590
important concept in security that have link to previous body parser's going to allow us to get data

14
00:00:55,590 --> 00:01:02,040
from a forum via a post and error handler and all routes are coming from handlers error and routes off.

15
00:01:02,220 --> 00:01:03,680
Well what is error handler.

16
00:01:03,750 --> 00:01:11,550
This is our nice generic piece of middleware that simply returns a nicely formatted object.

17
00:01:11,550 --> 00:01:16,080
This object will always have the key of error and a value of message and will always get some kind of

18
00:01:16,080 --> 00:01:16,590
string.

19
00:01:16,830 --> 00:01:20,760
Either the message that is being sent from an error or passed to it or just something that says whoops

20
00:01:20,820 --> 00:01:22,090
something went wrong.

21
00:01:22,140 --> 00:01:24,310
This is really helpful at the very end of our code.

22
00:01:24,330 --> 00:01:28,240
Before we start the server to simply say no matter what error you send.

23
00:01:28,260 --> 00:01:29,710
Let this function handle it.

24
00:01:29,730 --> 00:01:32,740
That could be a 404 that could be a 400 or 500.

25
00:01:32,790 --> 00:01:36,490
We simply just want one standard way to respond with an error.

26
00:01:36,750 --> 00:01:40,860
You may not see the total value of this now it's going to be really nice when we start making AJAX calls.

27
00:01:40,950 --> 00:01:44,750
And if something goes wrong our entire error object always looks the same.

28
00:01:44,760 --> 00:01:49,220
This is something where back end developers can make the lives of front end developers much much easier

29
00:01:49,230 --> 00:01:50,670
by doing these little things.

30
00:01:50,790 --> 00:01:55,170
You want to try to not be in a situation where are you doing lots of work on the front and changing

31
00:01:55,170 --> 00:01:58,460
responses from the server to kind of fit this format that you want.

32
00:01:58,620 --> 00:02:01,750
So we're going to try to make our future selves be happier.

33
00:02:01,860 --> 00:02:04,210
We can make future developers work with us happier.

34
00:02:04,230 --> 00:02:07,340
And if you're a back end developer This will make front end developers much happier.

35
00:02:07,350 --> 00:02:10,340
What we then did is started to work on our user model.

36
00:02:10,410 --> 00:02:14,640
You've seen a lot of this code before bringing in mongoose creating a schema of the fields that we need

37
00:02:14,640 --> 00:02:19,270
some validations like required and unique and then a little bit of mongoose middleware.

38
00:02:19,390 --> 00:02:25,370
Right before we save make sure that we have actually modified the password and if not keep moving has

39
00:02:25,380 --> 00:02:30,400
the password set it to be that password for the user document and then move on.

40
00:02:30,480 --> 00:02:33,070
If anything goes wrong send it to the error handler.

41
00:02:33,390 --> 00:02:38,160
This next function right here is an easy way to compare some kind of password that we'll get from a

42
00:02:38,160 --> 00:02:42,690
form or a JS on request and with whatever is inside of the database.

43
00:02:42,720 --> 00:02:47,490
This is going to be really helpful when we try to see if a user has put in the correct password when

44
00:02:47,490 --> 00:02:49,650
logging in and no matter what.

45
00:02:49,650 --> 00:02:51,000
This returns a boolean right here.

46
00:02:51,000 --> 00:02:52,180
True or false.

47
00:02:52,350 --> 00:02:54,070
We take a look at this later on.

48
00:02:54,090 --> 00:02:58,070
It's going to be true if the user has put in the correct username and password.

49
00:02:58,500 --> 00:03:00,410
Or if that is incorrect it will be false.

50
00:03:00,540 --> 00:03:04,170
But if something goes wrong is there any kind of errors move along to the error handler.

51
00:03:04,170 --> 00:03:08,580
It's very easy to just write code like this but if you're not properly handling errors you're not really

52
00:03:08,580 --> 00:03:11,040
building applications that are ready for production.

53
00:03:11,040 --> 00:03:17,160
We then moved on to our handlers and inside of off we started writing the code that simply signed up

54
00:03:17,280 --> 00:03:18,240
a user.

55
00:03:18,570 --> 00:03:19,310
What does that mean.

56
00:03:19,350 --> 00:03:24,720
Well we created the user restructured some properties from the document that we got back and created

57
00:03:24,750 --> 00:03:30,810
a token using the web token module and our secret key we then responded with some Jaisalmer that included

58
00:03:31,030 --> 00:03:35,390
the id the user name a profile image you are ill if they gave us one and the token.

59
00:03:35,400 --> 00:03:40,050
We also added a little bit of logic to make sure that if there are any kind of errors we'll respond

60
00:03:40,050 --> 00:03:40,690
accordingly.

61
00:03:40,800 --> 00:03:41,510
What does that mean.

62
00:03:41,550 --> 00:03:45,930
Well the mongoose errors are a little bit cryptic but sometimes they'll give you a friendly code.

63
00:03:45,930 --> 00:03:51,160
In this case that is 1 1 000 which specifies that some kind of validation has failed.

64
00:03:51,180 --> 00:03:56,790
What do we mean by validation we mean that when we put something like required and unique those have

65
00:03:56,790 --> 00:03:57,520
passed.

66
00:03:57,750 --> 00:04:04,170
So in this case our handlers specifying if you have not specified something that is unique we're going

67
00:04:04,170 --> 00:04:05,550
to say it's already taken.

68
00:04:05,730 --> 00:04:10,100
Otherwise we'll get a nicer error message that says that you just failed to provide that.

69
00:04:10,290 --> 00:04:16,410
We then moved over to our routes we simply exported the router which is the result of express that router

70
00:04:16,590 --> 00:04:24,010
and attached onto it are Sign-Up handler from handlers off back in our index file.

71
00:04:24,030 --> 00:04:28,940
We then included those routes prefixed with Slash API slash off.

72
00:04:29,100 --> 00:04:34,590
How do we test this will back in the terminal we used HVD pi and you can take a look pretty easily if

73
00:04:34,590 --> 00:04:37,140
you're on Mac quite a few different ways.

74
00:04:37,170 --> 00:04:40,380
If you're on Linux quite a few different ways as well.

75
00:04:40,470 --> 00:04:45,360
So no matter what system you're using it should be relatively easy to get HDD pie up and running if

76
00:04:45,360 --> 00:04:46,420
you want to use postman.

77
00:04:46,440 --> 00:04:47,960
That's totally fine.

78
00:04:48,600 --> 00:04:50,700
So how do we test Mungana use each DGP.

79
00:04:50,700 --> 00:04:52,550
First make sure that my server is running.

80
00:04:52,890 --> 00:05:03,740
I'm going to use HDD post to localhost ADT one slash API slash slash sign up and if I do this on its

81
00:05:03,740 --> 00:05:09,200
own I'm going to get a nice object that says user validation failed password is required usernames required

82
00:05:09,200 --> 00:05:10,190
e-mail are required.

83
00:05:10,340 --> 00:05:20,390
Well let's try to put those and we'll put in a password of a user name of none and a e-mail of secret

84
00:05:21,020 --> 00:05:22,250
at g mail dot com.

85
00:05:22,270 --> 00:05:24,490
We're putting in some dummy data to see if this works.

86
00:05:24,590 --> 00:05:27,370
And it looks like we're getting back the right information.

87
00:05:27,380 --> 00:05:29,350
Notice we didn't get back in error we got back.

88
00:05:29,350 --> 00:05:32,670
Whatever was sent as the response what do we mean by that.

89
00:05:32,720 --> 00:05:39,790
Well inside of our handler inside and off we are sending back this right here resident status of 200

90
00:05:39,830 --> 00:05:40,990
dodgy song.

91
00:05:41,100 --> 00:05:42,780
We take a look at what that looks like.

92
00:05:43,080 --> 00:05:44,450
Back in our terminal.

93
00:05:44,450 --> 00:05:49,070
This right here is the I.D. That is the token that is generated.

94
00:05:49,310 --> 00:05:53,440
This right here is the username and you may be wondering well where is the profile image you are l.

95
00:05:53,480 --> 00:05:55,920
And that's because I didn't pass in one when I created it.

96
00:05:55,940 --> 00:05:58,930
And since that isn't required we didn't get any kind of error.

97
00:05:59,360 --> 00:06:02,860
So it looks like we can successfully create users.

98
00:06:03,020 --> 00:06:08,090
What I want to look at in the next section is how to sign up users and then we'll move on to taking

99
00:06:08,090 --> 00:06:12,530
these tokens and making sure that we can successfully create messages where things are going to get

100
00:06:12,560 --> 00:06:13,260
even more fun.
