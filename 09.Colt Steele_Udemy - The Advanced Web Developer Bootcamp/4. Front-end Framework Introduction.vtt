WEBVTT
1
00:00:01.730 --> 00:00:03.510
All right let's get started with react.

2
00:00:03.530 --> 00:00:08.960
So in this video we're going to do a high level talk about front and frameworks talk about Riak specifically

3
00:00:08.960 --> 00:00:16.190
a little bit and get us ready for our first component in re-act So our objectives will be to first of

4
00:00:16.190 --> 00:00:24.330
all the fine print and frameworks and secondly to describe react at a high level what is a front and

5
00:00:24.330 --> 00:00:25.650
framework.

6
00:00:25.650 --> 00:00:31.830
Well it's a javascript library that handles dominant relation meaning that something like Jay query

7
00:00:31.830 --> 00:00:34.020
isn't quite a front end framework.

8
00:00:34.080 --> 00:00:38.670
It gives you tools to manipulate the DOM But fundamentally you're still doing the dominant emulation

9
00:00:38.670 --> 00:00:39.110
yourself.

10
00:00:39.120 --> 00:00:43.160
You're still deciding you know which lies to put on the screen.

11
00:00:43.200 --> 00:00:46.520
Maybe some div that you want to take off what you want to append.

12
00:00:46.620 --> 00:00:51.840
That's all your decision but oftentimes on a front end framework those decisions are made for you based

13
00:00:51.840 --> 00:00:53.760
on how you write your code.

14
00:00:53.760 --> 00:01:00.280
Another thing front and frameworks often support is handling navigation using HCM L5 push state.

15
00:01:00.330 --> 00:01:05.610
This allows you to change the address bar of your web browser using javascript without ever refreshing

16
00:01:05.610 --> 00:01:06.750
the page.

17
00:01:06.750 --> 00:01:12.180
This often leads to a better user experience because the page doesn't have to refresh on link click

18
00:01:12.270 --> 00:01:13.890
or submit.

19
00:01:13.950 --> 00:01:17.370
One other thing front and frameworks often do is state management.

20
00:01:17.370 --> 00:01:22.320
So in something like Jay Querrey you often have to keep track of all the data in your program either

21
00:01:22.320 --> 00:01:29.010
in the DOM or by creating some objects yourself but with a front end framework there's often tools provided

22
00:01:29.010 --> 00:01:30.830
to help you keep track of your data.

23
00:01:33.730 --> 00:01:36.780
So what does the front end framework look like in practice.

24
00:01:36.820 --> 00:01:42.470
Well the front end frameworks are always run on the client side in the browser and our back end framework

25
00:01:42.470 --> 00:01:44.380
still stays on the backend.

26
00:01:44.490 --> 00:01:48.130
So remember when we talked about the combinations of tools that were going to be using in this course

27
00:01:48.220 --> 00:01:52.610
on the front end we'll have reacts on the back and will have no Jap's.

28
00:01:52.630 --> 00:01:54.870
But how does Riak get loaded on the page.

29
00:01:55.210 --> 00:02:01.390
Well when you first go to a Web site you make a get request an issue get to some site.

30
00:02:01.420 --> 00:02:09.760
Let's say Google dot com and slash at the end will that no js server sees the requests for Slash and

31
00:02:09.760 --> 00:02:12.910
responds with some index page some HMO.

32
00:02:13.660 --> 00:02:19.480
The browser sees that a similar response and it starts parsing the page at some point it will hit a

33
00:02:19.480 --> 00:02:25.000
script tag and that script tag will tell it where to go to get the script that it needs.

34
00:02:25.420 --> 00:02:30.210
So the browser when it sees that script tag will make a get request for the javascript file.

35
00:02:30.250 --> 00:02:31.980
And here I am and I call it bundled.

36
00:02:32.050 --> 00:02:39.250
Yes because when we use well-packed later on with re-act the name of the file will be bundled jazz.

37
00:02:39.460 --> 00:02:45.490
So we make a get request for that bundled up as the server returns that bundle jast to us.

38
00:02:45.520 --> 00:02:51.310
So now once we have bundled J.S. the browser runs that file and inside of there will have all of our

39
00:02:51.310 --> 00:02:58.300
javascript code that we need to run in the application which includes reacts re-act Dom and the javascript

40
00:02:58.300 --> 00:03:00.060
that we write as well.

41
00:03:00.790 --> 00:03:06.670
So when this file runs in the browser when the browser loads it re-act will essentially be in control

42
00:03:06.670 --> 00:03:08.210
of the down.

43
00:03:08.320 --> 00:03:13.600
This is when re-act takes control of the page and makes all the decisions about DOM manipulation.

44
00:03:13.610 --> 00:03:16.600
Now is a good time to talk a little bit more about re-act itself.

45
00:03:18.160 --> 00:03:25.420
What is react well it was released by Facebook in 2013 as an open source project and it's really not

46
00:03:25.420 --> 00:03:30.390
a front end framework by itself it's more of a library for making composable components.

47
00:03:30.400 --> 00:03:34.480
We'll see what that means more and more as we go through this course but re-act is mostly concerned

48
00:03:34.480 --> 00:03:38.830
with the view it's concerned with displaying stuff on the screen.

49
00:03:38.830 --> 00:03:43.870
In fact every component needs to have a render method so you won't be creating too many components and

50
00:03:43.870 --> 00:03:47.350
react that don't deal with the view in some way.

51
00:03:47.400 --> 00:03:52.900
Reactor's often supplemented with other libraries so other libraries that are commonly used with re-act

52
00:03:53.320 --> 00:04:00.970
are reactor outer for which deals with navigation in your app and redux which is a single place to store

53
00:04:00.970 --> 00:04:02.800
your state in the application.

54
00:04:02.800 --> 00:04:05.620
We'll dive into both of these libraries throughout the course.

55
00:04:07.800 --> 00:04:10.910
I mentioned before composable components when using react.

56
00:04:10.920 --> 00:04:12.230
What does that really mean.

57
00:04:12.540 --> 00:04:18.480
Well it's kind of the core philosophy in reacts and the idea here is when I'm building an application

58
00:04:18.480 --> 00:04:25.050
like you see here where we've got some messages and a navigation bar the first thing you might think

59
00:04:25.050 --> 00:04:31.530
about doing is well how do I just get one message to display when you do that you'll often create or

60
00:04:31.530 --> 00:04:37.050
you will create a component for that message and maybe at first you'll just hard code all this data

61
00:04:37.320 --> 00:04:43.470
but eventually you'll make it so that it's parameterized so you can pass in information about the picture

62
00:04:43.530 --> 00:04:45.570
and the user and the time.

63
00:04:45.780 --> 00:04:51.240
And then once you've made it more general you can use that component over and over again in the app.

64
00:04:51.270 --> 00:04:57.900
So all four of these can be the same component that deals with the message but once you get a list of

65
00:04:57.900 --> 00:05:02.300
messages like this you probably want something else to contain all those messages.

66
00:05:02.310 --> 00:05:06.370
So at this point you might make a component for the message list.

67
00:05:06.450 --> 00:05:10.390
Now the next thing you might work on in the application would be the nav bar.

68
00:05:10.680 --> 00:05:15.270
And once you've gotten all these components working the last thing you might want to do is make them

69
00:05:15.270 --> 00:05:17.320
all work together as one app.

70
00:05:17.400 --> 00:05:23.430
So as you can see here we've got many different components that we've composed together to build one

71
00:05:23.550 --> 00:05:25.140
whole application.

72
00:05:25.140 --> 00:05:28.230
And this is really the approach we're going to be taking throughout the course.

73
00:05:28.230 --> 00:05:34.850
We're going to build small components that get larger and larger until we have one whole working application.

74
00:05:37.350 --> 00:05:41.370
All right that's enough for the intro so let's actually see some reac code in practice.

75
00:05:41.370 --> 00:05:44.010
Next up we're going to be talking about creating our first component.
