1
00:00:00,110 --> 00:00:00,580
OK.

2
00:00:00,690 --> 00:00:05,760
So all we're going to do in this video is refactor the massive To-Do list file and we're just going

3
00:00:05,760 --> 00:00:12,450
to pull out all the fecche calls and turn them into separate functions or methods inside of an API calls

4
00:00:12,450 --> 00:00:14,740
file or an API helper file.

5
00:00:15,450 --> 00:00:20,430
And so we can close out of the other components are just going to focus on this one first thing I'll

6
00:00:20,430 --> 00:00:26,300
do is just make that new file with the new file and I'll just call it API datcha.

7
00:00:26,310 --> 00:00:32,990
Yes and Wynnum copy this API you are over there because we're going to make use of that.

8
00:00:33,300 --> 00:00:41,160
And the other thing that we'll do is inside to do list we will import that file and I'm going to do

9
00:00:41,160 --> 00:00:45,520
an import star and I'm going to call it as.

10
00:00:45,870 --> 00:00:50,320
Let's go with API calls from dot slash API.

11
00:00:50,610 --> 00:00:56,570
So everything in this file is going to be imported and it wanted to move it up.

12
00:00:56,920 --> 00:01:03,330
It's going to be imported under API calls so I'll be able to do things like API calls don't get to Doo's

13
00:01:03,360 --> 00:01:08,670
or create to do none of those are existing yet but we're getting there.

14
00:01:08,670 --> 00:01:12,170
The other thing I should mention is that we're going to do this using async functions.

15
00:01:12,170 --> 00:01:17,430
So rather than dealing with a bunch of promises and putting promises over here and returning promises

16
00:01:17,910 --> 00:01:22,590
and then using them inside of our component we're going to just use async functions.

17
00:01:22,590 --> 00:01:26,860
It's a nice way to shorten things up and basically do the exact same thing.

18
00:01:27,200 --> 00:01:27,470
OK.

19
00:01:27,510 --> 00:01:31,840
So let's start with our very first little bit which loads to do.

20
00:01:32,040 --> 00:01:36,810
Right here we have to do is I'm going to just copy this entire fetch

21
00:01:40,500 --> 00:01:43,770
everything up and tell what we do after the fetch.

22
00:01:44,180 --> 00:01:47,410
And I'm going to move it over here and I'm going to define something.

23
00:01:47,430 --> 00:01:50,020
Let's go with export.

24
00:01:50,730 --> 00:01:52,330
And I'm going to call I need to write async.

25
00:01:52,340 --> 00:01:58,960
By the way and I'm going to call it get to do just like that.

26
00:01:59,040 --> 00:02:02,570
And no arguments might change the spacing

27
00:02:05,520 --> 00:02:12,670
and all that we do is fetch using this API you are all exactly the same code returned the response.

28
00:02:12,780 --> 00:02:18,950
Jason The only other change it's make is to return the fetch.

29
00:02:19,080 --> 00:02:26,010
So then because this nursing function MBRD we are returning this here I can go to my to do list and

30
00:02:26,010 --> 00:02:30,630
instead of low to use I'm able to first need to declares a sync.

31
00:02:30,630 --> 00:02:35,010
And if you're not familiar with async functions I highly recommend you check out the content that we

32
00:02:35,010 --> 00:02:37,210
have in this course on async functions.

33
00:02:37,210 --> 00:02:40,760
It's a nice addition makes things much cleaner in my opinion.

34
00:02:40,830 --> 00:02:50,410
So what we're going to do and it's going to make a variable to say what to do as equals and I'm going

35
00:02:50,410 --> 00:03:01,340
to write a wait API calls dot and what we call it get to do I believe double check get to do.

36
00:03:01,680 --> 00:03:08,280
And Cloud 9 is complaining about this async you can add that to the Linter options and you can ignore

37
00:03:08,280 --> 00:03:09,080
it for now.

38
00:03:09,450 --> 00:03:15,300
So what's happening here is that I'm making introduce variable and by calling API calls I get to do

39
00:03:15,310 --> 00:03:15,720
this.

40
00:03:16,020 --> 00:03:23,160
But by adding this a weight and by making this nursing function and making this async it will wait before

41
00:03:23,160 --> 00:03:26,550
moving on we don't actually need this data then anymore.

42
00:03:27,710 --> 00:03:34,210
And I can just have to do or this that sets a date to use just like that.

43
00:03:34,590 --> 00:03:35,570
And that's all we need.

44
00:03:35,850 --> 00:03:38,180
So it cleans it up quite a bit.

45
00:03:38,310 --> 00:03:44,400
So when the component mounts we could just move this logic into here as well rather than having a separate

46
00:03:44,490 --> 00:03:52,050
load to do with it's just fine and it's going to call and set or API calls call get to do is wait until

47
00:03:52,050 --> 00:03:54,090
that's done whether it works or not.

48
00:03:54,150 --> 00:03:57,090
And then we're going to use that to set the state.

49
00:03:57,240 --> 00:04:00,300
Let's make sure it works and when to restart.

50
00:04:00,750 --> 00:04:04,210
Because I did make a new file I believe we don't have to do that.

51
00:04:04,360 --> 00:04:06,820
So to be safe I'll get back here.

52
00:04:06,810 --> 00:04:07,930
See what happens.

53
00:04:07,980 --> 00:04:09,270
Refresh the page.

54
00:04:09,330 --> 00:04:10,560
We still have raw data.

55
00:04:10,590 --> 00:04:14,720
Everything looks good but we'll just move the code into a separate file.

56
00:04:15,170 --> 00:04:25,140
Ok so I'm going to do the same thing now for ad to do take this fetch over here and write export function

57
00:04:25,230 --> 00:04:35,560
async function and let's call this one create to do and we're going to need to pass in let's call it

58
00:04:36,190 --> 00:04:41,100
name or something and then and here we're just going to run a fetch.

59
00:04:41,320 --> 00:04:43,100
And we called it Val here.

60
00:04:43,100 --> 00:04:45,180
So let's go with Val.

61
00:04:45,620 --> 00:04:46,020
OK.

62
00:04:46,030 --> 00:04:48,620
And we just return that fetch just like before.

63
00:04:49,750 --> 00:04:56,860
And we've named it create to do so now and it's to do list instead of add to do we just call var and

64
00:04:56,860 --> 00:05:04,940
let's go with new to do let's do let equals and it's going to be API.

65
00:05:04,960 --> 00:05:10,920
Well first we need a wait API calls dot create to do and we pass in Vau.

66
00:05:11,020 --> 00:05:12,540
So we just moved it to a separate file.

67
00:05:12,540 --> 00:05:13,930
We passed that in.

68
00:05:13,960 --> 00:05:20,410
We need to declare this is a sin because well then we can get rid of that then and just do this data

69
00:05:20,420 --> 00:05:23,350
set state to do it using new to do

70
00:05:26,330 --> 00:05:27,410
nice and clean here.

71
00:05:27,430 --> 00:05:32,040
We moved all the API logic all the fecche code that mess to the separate file.

72
00:05:32,220 --> 00:05:35,730
So now we just have this nice little clean two lines.

73
00:05:35,730 --> 00:05:40,010
We just say all right the new to do is equal to whatever comes back when we created to do.

74
00:05:40,010 --> 00:05:45,570
And then when that's done because the wait we're then going to update the state to reflect that.

75
00:05:45,680 --> 00:05:48,900
Let's make sure it works try making a new to do.

76
00:05:49,040 --> 00:05:53,180
Let's go with EAT CHEESE.

77
00:05:53,660 --> 00:05:54,870
There we go.

78
00:05:54,990 --> 00:05:55,780
It looks good.

79
00:05:55,790 --> 00:05:57,660
No problem with the cons..

80
00:05:57,830 --> 00:05:59,140
Everything works.

81
00:05:59,150 --> 00:06:00,530
All right.

82
00:06:00,530 --> 00:06:02,590
Moving on to delete.

83
00:06:02,810 --> 00:06:04,040
So same thing.

84
00:06:04,040 --> 00:06:09,450
We're going to just copy all the fecche logic and go over here.

85
00:06:09,770 --> 00:06:12,460
Let's call this one remove to export.

86
00:06:12,500 --> 00:06:16,550
I should mention the way I'm doing this I'm exporting them individually as we go.

87
00:06:16,550 --> 00:06:23,460
And then importing everything under star or using star under the namespace API calls.

88
00:06:23,510 --> 00:06:26,050
So export a sync function.

89
00:06:26,100 --> 00:06:38,150
Let's call this one remove to do it needs an id pass that fetch we're going to return the fetch or whatever

90
00:06:38,270 --> 00:06:39,610
that returns.

91
00:06:40,010 --> 00:06:42,160
And I think that should be good.

92
00:06:42,170 --> 00:06:47,900
The only thing to mention about removing this issue is not really a response coming back that we need

93
00:06:47,900 --> 00:06:55,490
to use or that we care about because we're not using data coming back to update our state because we're

94
00:06:55,490 --> 00:07:00,690
deleting something we don't care what comes back and we're not going to get some new data.

95
00:07:00,740 --> 00:07:06,590
So we're still going to keep it an AC as an async function but all we're going to do over here under

96
00:07:06,590 --> 00:07:17,000
delete to do is well its first to our API first let's declare this a sink to that to do and then we'll

97
00:07:17,000 --> 00:07:25,830
do and await API calls that removed to do pass them the I.D. and then because of this wait.

98
00:07:26,300 --> 00:07:28,450
This won't happen until afterwards.

99
00:07:29,030 --> 00:07:35,780
So we are then doing the exact same thing where we're filtering out the deleted to do the one we tried

100
00:07:35,780 --> 00:07:40,130
to delete and then updating the state to do lets make sure that works.

101
00:07:40,140 --> 00:07:41,940
Can I delete.

102
00:07:42,030 --> 00:07:43,950
Looks good.

103
00:07:43,950 --> 00:07:44,890
Great.

104
00:07:45,450 --> 00:07:50,710
And finally we move on to toggle so I can get a copy of this.

105
00:07:50,710 --> 00:07:51,410
Keep going.

106
00:07:51,480 --> 00:07:52,360
Oh boy.

107
00:07:52,890 --> 00:07:53,740
There we go.

108
00:07:54,210 --> 00:08:04,440
So this is our fetch export a sync function and we'll call this one update to do and it takes the entire

109
00:08:04,440 --> 00:08:15,010
to do rather than just the ID looking good return that fetch everything else is the same.

110
00:08:15,230 --> 00:08:18,470
Then we go to our to do list and we're just going to call API calls.

111
00:08:18,530 --> 00:08:22,170
Update to do pass in the same to do.

112
00:08:22,640 --> 00:08:28,630
And let's make it updated to do equals.

113
00:08:28,840 --> 00:08:29,690
Wait.

114
00:08:29,930 --> 00:08:36,570
API calls and then we need to put a sync here and we can get rid of this then.

115
00:08:36,650 --> 00:08:40,850
Nonsense all those promises so much cleaner.

116
00:08:42,440 --> 00:08:47,990
So we're just waiting for something to be returned which is going to be the data of the updated to do

117
00:08:48,740 --> 00:08:51,580
saving that variable and then everything else is the same.

118
00:08:51,590 --> 00:08:54,330
We just don't have to have all the data that is everywhere.

119
00:08:54,440 --> 00:08:55,280
Great.

120
00:08:55,730 --> 00:09:02,600
So the last thing I'm getting a complaint here that we're not using API you IRL anymore because all

121
00:09:02,600 --> 00:09:09,230
that logic has been moved to API Dutchie us a change that we could make as well is to make this an environment

122
00:09:09,230 --> 00:09:12,310
variable so that it's not hard coded very easy to do.

123
00:09:12,310 --> 00:09:17,270
It just depends on where you are deploying it where your API actually is located but just know that

124
00:09:17,300 --> 00:09:19,280
all you need to do is change this here.

125
00:09:19,350 --> 00:09:21,850
Do something like envy or process.

126
00:09:22,450 --> 00:09:24,510
Ian V dot API you are.

127
00:09:25,040 --> 00:09:26,870
But I'm just going to keep it at what we had.

128
00:09:27,560 --> 00:09:38,140
And let's just test everything out so I can update make sure I can delete and I can create a new one.

129
00:09:38,140 --> 00:09:38,760
There we go.

130
00:09:38,770 --> 00:09:40,200
They all load correctly.

131
00:09:40,240 --> 00:09:40,910
All right.

132
00:09:41,050 --> 00:09:44,000
So if we now take a look at our To-Do list.

133
00:09:44,170 --> 00:09:46,000
So much cleaner and shorter.

134
00:09:46,000 --> 00:09:47,840
We don't have all of those nested fetches.

135
00:09:47,870 --> 00:09:53,590
We've moved it all into our hippie's file our API file that is doing all the heavy lifting.

136
00:09:53,590 --> 00:09:54,070
OK.

137
00:09:54,280 --> 00:09:55,400
So that's it.

138
00:09:55,450 --> 00:09:57,400
The last thing we could do is just dial it a bit.

139
00:09:57,400 --> 00:10:02,460
But really this is more about functionality and kind of refactoring things.

140
00:10:02,500 --> 00:10:03,220
All right.

141
00:10:03,220 --> 00:10:04,140
Congratulations.

142
00:10:04,180 --> 00:10:05,420
Thanks for hanging in there.

143
00:10:05,610 --> 00:10:11,700
It's I know it's kind of a surprising amount of time and content to make a simple little app using react

144
00:10:11,800 --> 00:10:15,260
but the entire point of it is to impose the structure.

145
00:10:15,280 --> 00:10:16,720
So yes it might require.

146
00:10:16,750 --> 00:10:22,120
It definitely requires more code more syntax but it's also when you're working within these stricter

147
00:10:22,120 --> 00:10:25,850
rules even if it's more verbose it's a lot more organized.

148
00:10:25,870 --> 00:10:27,100
So it's a tradeoff.

149
00:10:27,100 --> 00:10:27,480
All right.
