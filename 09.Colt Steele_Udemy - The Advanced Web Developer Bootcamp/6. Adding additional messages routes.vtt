WEBVTT
1
00:00:00.270 --> 00:00:02.880
So we previously wrote a function to create a message.

2
00:00:02.910 --> 00:00:07.530
And what we're going to work on in this screencast is the ability to get the single message to delete

3
00:00:07.530 --> 00:00:10.320
a message and to get all of the messages.

4
00:00:10.320 --> 00:00:11.940
So we're going to do that in a different place.

5
00:00:12.000 --> 00:00:14.510
But let's start which is getting an individual message.

6
00:00:14.520 --> 00:00:19.500
So what we need to do here with all our racing functions we need to start with the track catch inside

7
00:00:19.510 --> 00:00:22.630
if you're going to make a variable call message.

8
00:00:22.830 --> 00:00:26.930
And this is going to be the result of a waiting D-B message top fund.

9
00:00:27.190 --> 00:00:29.130
We're going to pass in recked of harams.

10
00:00:29.160 --> 00:00:31.380
That message underscore ID.

11
00:00:31.590 --> 00:00:33.160
Where does that idea come from.

12
00:00:33.540 --> 00:00:35.310
Well let's think about the way that this is going to come in.

13
00:00:35.400 --> 00:00:44.730
The prefix is slash API slash users slash some ID slash messages slash some kind of message ID.

14
00:00:45.390 --> 00:00:49.990
So we're gonna grab that message ID and grab that from redtop reps.

15
00:00:50.130 --> 00:00:52.820
We're also going to have the same prefix for deleting as well.

16
00:00:53.160 --> 00:00:55.200
But the HDTV verb is going to be different.

17
00:00:55.200 --> 00:00:55.890
That'll be a get.

18
00:00:55.920 --> 00:00:57.850
And this one will be a delete.

19
00:00:58.890 --> 00:01:06.020
So inside of your once we find that message let's send back a status of 200.

20
00:01:06.700 --> 00:01:10.570
Everything went well with Jason of that message.

21
00:01:10.660 --> 00:01:12.020
All we really need to do here.

22
00:01:12.160 --> 00:01:18.340
There any errors as per usual or return next in passing that error and we'll just call this are to be

23
00:01:18.340 --> 00:01:21.400
consistent instead of our delete message.

24
00:01:21.400 --> 00:01:23.000
We're going to start once again with a try catch.

25
00:01:23.020 --> 00:01:25.540
Oh I want to make sure we have that with our async functions.

26
00:01:25.830 --> 00:01:31.050
It's always make sure we are next with that are and bubble of the air to the air handler inside of here.

27
00:01:31.070 --> 00:01:36.280
We're going to make a found message and there's going to be the result of a waiting D-B down message

28
00:01:36.300 --> 00:01:38.170
does find by ID.

29
00:01:38.300 --> 00:01:39.650
And we're going to pass it once again.

30
00:01:39.680 --> 00:01:47.770
Recked operands that message underscore ID on the next line we're going into a way found message Ruth

31
00:01:49.090 --> 00:01:57.760
and then we'll return arrest that status of 200 with some Jaison of that found message.

32
00:01:57.760 --> 00:01:59.200
Now you might have seen that in mongoose.

33
00:01:59.200 --> 00:02:01.550
There's a method called find by id and remove.

34
00:02:02.080 --> 00:02:07.000
But that's actually not going to work because if we look back at our message model we have a pretty

35
00:02:07.000 --> 00:02:08.090
remove hook.

36
00:02:08.680 --> 00:02:13.540
And this doesn't actually work with fine by id and remove one more thing make sure that should be this

37
00:02:13.570 --> 00:02:16.930
that user as well which are for that specific I.D..

38
00:02:17.260 --> 00:02:19.240
So we can't use find ID and remove.

39
00:02:19.240 --> 00:02:22.820
We have actually used the Remove method to get this to work in Mangus.

40
00:02:23.170 --> 00:02:28.600
So using that instead of fine by id and remove so that can our routes Let's go use these new functions

41
00:02:28.600 --> 00:02:29.240
that we made.

42
00:02:29.510 --> 00:02:32.280
Let's import get message and delete message.

43
00:02:33.310 --> 00:02:39.020
And these will be prefixed with the route that we saw before which includes a message ID at the end.

44
00:02:39.310 --> 00:02:45.970
So let's add a router down route to slash message id make sure we have that colon and then we'll add

45
00:02:45.970 --> 00:02:47.580
it get forget message

46
00:02:50.390 --> 00:02:54.630
and Italy for a delete message.

47
00:02:54.700 --> 00:02:59.940
So we should see here that we now have two new routes one for a get one for a delayed to slash EBIZ

48
00:03:00.140 --> 00:03:07.940
user slash IDs slash messages slash message ID lets say this or make one more up and the next week ask

49
00:03:07.940 --> 00:03:10.580
will test all of these routes using EGD pi.

50
00:03:11.150 --> 00:03:16.010
So what we'd like to be able to do is get all of the messages for every single user.

51
00:03:16.070 --> 00:03:19.960
This is what will load when we show the timeline of all the messages on the front end.

52
00:03:20.330 --> 00:03:25.160
So instead of our index yes its going to take that route so back in our index to yes we're going to

53
00:03:25.160 --> 00:03:31.760
add again to slash API slash messages all we want to make sure that we have is that this route can only

54
00:03:31.760 --> 00:03:33.930
be accessed if a user is logged in.

55
00:03:34.250 --> 00:03:37.260
So let's make sure to add our in required middleware.

56
00:03:39.560 --> 00:03:42.320
And then we'll run an evening function with ryegrass and next

57
00:03:46.800 --> 00:03:50.750
one thing we want to do here actually to add to our message model is to add some time stamps.

58
00:03:50.760 --> 00:03:57.360
So let's go to our message model and after that message schema let's add a key of timestamps and a value

59
00:03:57.360 --> 00:03:57.890
of true.

60
00:03:58.020 --> 00:04:02.940
This will add a created add and an updated app for each individual document that the message schema

61
00:04:02.940 --> 00:04:03.810
creates.

62
00:04:03.810 --> 00:04:06.290
This will be really useful when you want to sort the messages.

63
00:04:06.300 --> 00:04:07.530
So let's go back to our index.

64
00:04:07.530 --> 00:04:13.320
Yes and inside of here we're going to start once again with a try catch make sure we handle errors properly

65
00:04:13.800 --> 00:04:15.910
and always return next with that.

66
00:04:16.560 --> 00:04:18.870
So what do we want to do to get all the messages.

67
00:04:19.310 --> 00:04:21.590
Well let's go get all of those messages using.

68
00:04:21.610 --> 00:04:23.160
That message defined.

69
00:04:23.250 --> 00:04:25.440
We're going to also await that promise to resolve.

70
00:04:25.710 --> 00:04:30.540
Now instead of just finding we're also going to sort them by created at descending.

71
00:04:31.140 --> 00:04:38.250
And one more thing we want to populate the user for each individual one of those messages and the fields

72
00:04:38.250 --> 00:04:42.180
that we want from the user or just the username and the profile image you know.

73
00:04:42.390 --> 00:04:44.440
So specify those both as true.

74
00:04:44.460 --> 00:04:48.970
The reason why we're doing this is so that we can get each individual user name as well as image you

75
00:04:48.970 --> 00:04:51.990
are out for every message to display on our timeline.

76
00:04:52.350 --> 00:04:57.900
We'll then just return without return or restart status of 200 with a response.

77
00:04:57.990 --> 00:05:02.960
That includes those messages.

78
00:05:03.010 --> 00:05:07.540
So we've just done here is Meteora that anybody can go to once they're logged in that shows all of the

79
00:05:07.540 --> 00:05:09.570
messages for every single user.

80
00:05:09.670 --> 00:05:15.430
We're simply going to find the message sort them by created at and then populate each user for those

81
00:05:15.430 --> 00:05:16.540
specific message.

82
00:05:16.540 --> 00:05:21.230
Right now it's just an ID popular is going to give us that entire user object but we don't want all

83
00:05:21.230 --> 00:05:26.450
the fields we just want a username and a profile image you are.

84
00:05:26.510 --> 00:05:30.100
So let's say this and the next screencast will test these all using each Deedy by.
