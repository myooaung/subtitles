1
00:00:00,610 --> 00:00:05,890
So in the last section we started adding some information about our user but we said that worst during

2
00:00:05,890 --> 00:00:08,880
this password in plain text which is not very good.

3
00:00:09,250 --> 00:00:15,310
So what we want to do is the second before we save the user in the database we want to go and modify

4
00:00:15,400 --> 00:00:16,380
that password.

5
00:00:16,600 --> 00:00:22,030
We're going to modify it by hashing or turning that password into some string of text that can't be

6
00:00:22,030 --> 00:00:23,050
understood.

7
00:00:23,170 --> 00:00:25,470
And we're going to do that using what's called a hook.

8
00:00:26,130 --> 00:00:29,530
And we add our hooks before the save.

9
00:00:29,590 --> 00:00:35,390
So we're going to be adding a hook on a user schema and the hook is going to be a pre C.

10
00:00:35,620 --> 00:00:36,470
What does that mean.

11
00:00:36,490 --> 00:00:38,140
A pre hook for this document.

12
00:00:38,140 --> 00:00:41,360
Right before we save this document Let's run a function.

13
00:00:41,530 --> 00:00:43,430
But let's just not run a regular function.

14
00:00:43,450 --> 00:00:45,640
Let's run in async function.

15
00:00:45,910 --> 00:00:49,570
And we're going to run an easing function so that we can use that a weak keyword.

16
00:00:49,570 --> 00:00:53,810
You might have not seen this syntax before but this is quite modern and we're going to see a lot more

17
00:00:53,860 --> 00:00:59,890
newer node code bases especially ones that have lots of asynchronous actions so to handle our errors

18
00:00:59,890 --> 00:01:08,290
we're going to use a try catch block and inside of this try block we are going to quickly see if this

19
00:01:08,290 --> 00:01:15,700
user is not modified the password because if you have not modified the password we want to then move

20
00:01:15,700 --> 00:01:16,890
on to the next thing.

21
00:01:17,200 --> 00:01:18,910
But what does this idea of the next thing.

22
00:01:18,910 --> 00:01:22,340
What is that next piece of middleware that we might want to move on to.

23
00:01:22,390 --> 00:01:25,660
That is a parameter that is passed to this function.

24
00:01:25,720 --> 00:01:31,060
You can call it whatever you want but very commonly you'll see that as next and this simply means move

25
00:01:31,060 --> 00:01:31,560
on.

26
00:01:31,690 --> 00:01:33,970
You've saved that document will go ahead and save it now.

27
00:01:34,090 --> 00:01:37,070
So we will return next.

28
00:01:37,390 --> 00:01:42,250
And this is simply meaning if you have not changed the password Well don't go and hash it again if the

29
00:01:42,250 --> 00:01:44,110
password has not been changed at all.

30
00:01:44,110 --> 00:01:45,170
Don't mess with it.

31
00:01:45,580 --> 00:01:51,370
So what we're going to do now is make a variable that we'll call hash password and that is the result

32
00:01:51,430 --> 00:02:00,310
of decrypt dot hash and that accepts some kind of password which in this case is going to be the password

33
00:02:00,610 --> 00:02:02,030
for this specific document.

34
00:02:02,050 --> 00:02:04,180
We get access to that using the keyword this.

35
00:02:04,300 --> 00:02:07,720
And then what is called a salt or work factor.

36
00:02:08,020 --> 00:02:13,000
And I want to get too into this idea of encryption but the idea of salting is taking a bit of additional

37
00:02:13,000 --> 00:02:18,990
information and putting it into the hash so that the hashes are different for the same password.

38
00:02:19,000 --> 00:02:23,860
Remember if we were to just take a piece of text and hash it into something someone else could potentially

39
00:02:23,860 --> 00:02:29,630
build a table that does that same exact algorithm and it figures out what hash corresponds to a password.

40
00:02:30,010 --> 00:02:33,880
So once again I don't want to get too into the cryptography of things but something is an additional

41
00:02:33,880 --> 00:02:38,410
step that is very important to make sure that we're securely storing our passwords.

42
00:02:38,410 --> 00:02:42,130
The problem here is that be creeped out hash is an asynchronous action.

43
00:02:42,280 --> 00:02:45,220
So we are going to wait until that finishes.

44
00:02:45,610 --> 00:02:51,550
And once it has finished we are going to set the password property on this document to be that hashed

45
00:02:51,550 --> 00:02:53,070
password.

46
00:02:53,490 --> 00:03:01,390
But we're going to do after is simply return next the next idea is simply just saving if anything goes

47
00:03:01,390 --> 00:03:01,830
wrong.

48
00:03:01,840 --> 00:03:03,700
We're also going to return next.

49
00:03:03,700 --> 00:03:08,740
But remember when we pass an error to next it is going to go to our error handler.

50
00:03:08,860 --> 00:03:13,120
So you're going to see this pattern of next error very frequently.

51
00:03:13,120 --> 00:03:16,400
So right now we're doing a really good job of hashing that password.

52
00:03:16,570 --> 00:03:20,470
But what I also want to write is a bit of a helper function for our user.

53
00:03:20,650 --> 00:03:23,100
So we are going to add one more thing to our schema.

54
00:03:23,290 --> 00:03:24,610
We're going to add a method.

55
00:03:24,610 --> 00:03:29,650
This is the idea of an instance method or a method that every document that we create from this model

56
00:03:29,650 --> 00:03:32,680
has and it's going to be called compair password.

57
00:03:32,890 --> 00:03:36,280
You may have seen this before but we're going to do it a little bit differently by making this another

58
00:03:36,340 --> 00:03:40,850
easting function and inside of here we're going to get some kind of password.

59
00:03:40,870 --> 00:03:42,850
We'll call this candidate password.

60
00:03:42,910 --> 00:03:47,350
This is simply going to be a password that's coming in the form as well as the next.

61
00:03:47,350 --> 00:03:50,080
Remember these actions are all asynchronous.

62
00:03:50,080 --> 00:03:54,740
So we need to tell express when to move on to the next piece of middleware.

63
00:03:54,760 --> 00:03:57,930
Once again we'll place a try catch block to handle any kind of error.

64
00:03:58,090 --> 00:04:00,940
And we will get the result of the script that compare.

65
00:04:01,030 --> 00:04:03,310
We'll get any variable called match.

66
00:04:03,580 --> 00:04:12,220
And we are going to wait for the crypt compare to resolve the crypt compare excepts some kind of password.

67
00:04:12,500 --> 00:04:17,470
We can see right here any kind of data right here that's going to refer to the data to be encrypted.

68
00:04:17,470 --> 00:04:23,470
Remember the idea of checking if the password is correct is read encrypting the plaintext password that

69
00:04:23,470 --> 00:04:29,350
someone puts in a form and seeing if it is the same thing as whatever our encrypted string is in the

70
00:04:29,350 --> 00:04:29,920
database.

71
00:04:29,920 --> 00:04:31,860
And that refers to destock password.

72
00:04:31,930 --> 00:04:36,670
This is going to refer to the individual document that we're calling this on.

73
00:04:37,420 --> 00:04:40,470
This right here is actually going to return true or false.

74
00:04:40,660 --> 00:04:41,990
So we're simply going to return.

75
00:04:42,010 --> 00:04:47,050
That is match property and in our route's we're going to say well if it matches true you've logged in

76
00:04:47,050 --> 00:04:47,810
successfully.

77
00:04:47,890 --> 00:04:52,770
If not you get to tell you invalid user name or password down here.

78
00:04:52,840 --> 00:04:55,590
Once again we're going to return next with her.

79
00:04:56,050 --> 00:04:57,100
So what have we done here.

80
00:04:57,100 --> 00:05:03,630
We've added a pre-sale hook before each it in Mongoose is saved we're going to run this async function.

81
00:05:03,770 --> 00:05:08,430
It's going to wait for the password to hash is going to set that password to be the hash password.

82
00:05:08,570 --> 00:05:13,130
And then it's going to move on to the next piece of middleware which is actually saving that specific

83
00:05:13,130 --> 00:05:13,910
document.

84
00:05:13,910 --> 00:05:17,390
That way we save documents in the database with a hash password.

85
00:05:17,390 --> 00:05:23,060
The second thing we did is build a simple password comparison function so that every document that we

86
00:05:23,060 --> 00:05:30,710
make from this user model has the ability to compare another hashed password with their password in

87
00:05:30,710 --> 00:05:35,360
the database we're going to be using this to make sure that users have successfully put in the right

88
00:05:35,360 --> 00:05:36,220
password.

89
00:05:36,590 --> 00:05:39,370
So that's really all we need to do for our user Geass.

90
00:05:39,500 --> 00:05:43,790
The next step is to start adding some routes and testing them using HDMI.

91
00:05:44,060 --> 00:05:48,050
So we're going to focus on next is building some routes and some handlers for our users.
