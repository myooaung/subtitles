1
00:00:00,450 --> 00:00:01,410
Welcome back.

2
00:00:01,410 --> 00:00:06,500
In this video we're going to discuss how to test time dependent code and asynchronous code.

3
00:00:06,510 --> 00:00:09,640
First let's examine how to test time dependent code.

4
00:00:09,750 --> 00:00:15,410
This includes timers like set interval and set time out as well as operations that use dates.

5
00:00:15,480 --> 00:00:21,060
The jazzmen tool will be using to help us test this type of code is called clock to get started with

6
00:00:21,060 --> 00:00:21,500
clocks.

7
00:00:21,510 --> 00:00:25,310
We need to invoke the jasmine dot clock dot install function.

8
00:00:25,350 --> 00:00:28,140
This is commonly done in a before each callback.

9
00:00:28,140 --> 00:00:33,390
We also have to make sure to uninstalls the clock after each spec to make sure we do not have any unintended

10
00:00:33,390 --> 00:00:34,450
side effects.

11
00:00:34,480 --> 00:00:37,810
This uninstaller is commonly done in and after each callback.

12
00:00:37,890 --> 00:00:40,250
So does this look like let's see an example.

13
00:00:40,290 --> 00:00:45,660
The set time out and are before each were going to create a dummy function called sample which we will

14
00:00:45,660 --> 00:00:49,230
use inside of a set time out and then we'll install our clock.

15
00:00:49,770 --> 00:00:54,510
We'll also make sure that our clock resets after each callback to it so that we can test without any

16
00:00:54,540 --> 00:00:57,540
unexpected side effects inside of our block.

17
00:00:57,600 --> 00:01:02,340
We will invoke a set time L to run our sample function in 1000 milliseconds.

18
00:01:02,340 --> 00:01:08,040
Note here that sample is just a spy that does nothing but we want to test that after 1000 milliseconds

19
00:01:08,130 --> 00:01:10,370
it gets called on the next line.

20
00:01:10,380 --> 00:01:14,330
We will use the tick function to move our clock ahead by a certain amount of time.

21
00:01:14,670 --> 00:01:17,490
We are then making sure our function has not been called yet.

22
00:01:17,790 --> 00:01:20,480
And after one more millisecond our function should be called.

23
00:01:20,640 --> 00:01:22,380
So these tests will pass.

24
00:01:22,380 --> 00:01:27,780
You can see here that we are using the tick function in passing in an amount of time to test our asynchronous

25
00:01:27,780 --> 00:01:28,950
code.

26
00:01:28,950 --> 00:01:31,010
Let's see another example with set interval.

27
00:01:31,290 --> 00:01:35,710
Here we have a similar setup with a dummy spy that will be invoked in a set interval.

28
00:01:35,730 --> 00:01:40,710
We are also installing and uninstalling the clock in our before each and after each functions as we

29
00:01:40,710 --> 00:01:41,680
move the clock.

30
00:01:41,760 --> 00:01:45,990
We can see that there are a certain amount of times that the function was called in the same way that

31
00:01:45,990 --> 00:01:47,480
we tested that time out.

32
00:01:47,490 --> 00:01:52,500
You can test set interval and also check how many times the function has been called.

33
00:01:52,500 --> 00:01:55,490
Now let's discuss how to test code that is asynchronous.

34
00:01:55,500 --> 00:02:01,380
Examples of this kind of code include timers like said time out and set interval as well as each GDP

35
00:02:01,380 --> 00:02:04,200
requests with something like Ajax.

36
00:02:04,200 --> 00:02:05,940
So how can we test this kind of code.

37
00:02:06,240 --> 00:02:08,640
Thankfully with Jasmine it's quite easy.

38
00:02:08,670 --> 00:02:15,840
All we have to do is pass a parameter to any of the before or after methods or to the callbacks to it.

39
00:02:16,170 --> 00:02:22,090
Like all parameters with javascript we can call this whatever we want but it is commonly called done.

40
00:02:22,170 --> 00:02:26,920
It's important to note that a test will not complete until the done function is invoked.

41
00:02:26,940 --> 00:02:32,370
Jasmine has an internal timer which it runs before the test fails to make sure that the test is not

42
00:02:32,370 --> 00:02:33,650
waiting too long.

43
00:02:33,660 --> 00:02:35,980
This is a setting you can change in Jasmine.

44
00:02:35,990 --> 00:02:41,480
That's not commonly done on story short testing asynchronous code is not that bad at all.

45
00:02:41,550 --> 00:02:47,120
We just have to make sure to add a parameter to specific callback functions and invoke it.

46
00:02:47,520 --> 00:02:50,050
Let's see what that would look like with a small example.

47
00:02:50,130 --> 00:02:55,620
I have a function called Get user info which accepts a user name and returns the result of the query

48
00:02:55,640 --> 00:02:59,030
get Jason method inside of the Get Jaison method.

49
00:02:59,040 --> 00:03:05,970
I am making an HDTV request to the get hub user api and searching for a username passed to this function.

50
00:03:05,970 --> 00:03:09,900
Remember that all of the Gigue Querrey Ajax methods return a promise to me.

51
00:03:09,900 --> 00:03:15,510
So in my tests I'll be using doc then to handle the resolved promise in my tests.

52
00:03:15,510 --> 00:03:19,200
Notice that I'm passing a parameter to the callback of the function.

53
00:03:19,320 --> 00:03:22,590
On the second line I have named that parameter done.

54
00:03:22,770 --> 00:03:24,530
But you can call it whatever you'd like.

55
00:03:24,540 --> 00:03:29,730
However I recommend that you call it done because this is what you will commonly see when testing asynchronous

56
00:03:29,730 --> 00:03:32,440
code in some of the callback ticket.

57
00:03:32,520 --> 00:03:38,760
I'm invoking the get user info function and passing the user name of Ali and then attaching a dot then

58
00:03:38,790 --> 00:03:44,450
the handle the result promise in passing a callback to dump then which contains the data.

59
00:03:44,490 --> 00:03:48,030
I get back from the get hub API inside of this callback.

60
00:03:48,030 --> 00:03:54,540
I will test to see if the name property on the deed I got back is my name which is expected.

61
00:03:54,540 --> 00:04:00,470
Once that expectation has run I will invoke my gun function to make sure the test does not timeout.

62
00:04:00,510 --> 00:04:05,770
The most important part here is the done function which I am passing to the callback of the IT function.

63
00:04:05,790 --> 00:04:10,470
Without that I'm not able to successfully test my asynchronous code.

64
00:04:10,500 --> 00:04:15,300
Now that you've seen how to use clocks and the Done function to test asynchronous code it's time for

65
00:04:15,300 --> 00:04:16,680
you to practice a bit.

66
00:04:16,680 --> 00:04:18,700
Good luck and I'll see you in the next video.
