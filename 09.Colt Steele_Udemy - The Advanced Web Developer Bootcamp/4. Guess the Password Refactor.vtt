WEBVTT
1
00:00:00.750 --> 00:00:01.580
Welcome back.

2
00:00:01.740 --> 00:00:06.540
In this video we're going to refactor some of the code to use E.S. 2015.

3
00:00:06.870 --> 00:00:10.720
We'll start by adding lead and Consta where it would be appropriate.

4
00:00:11.070 --> 00:00:14.500
The word count variable is something that should never be read declared.

5
00:00:14.670 --> 00:00:16.900
So we can use the word Konst here.

6
00:00:17.280 --> 00:00:20.170
As for the rest of the variables we can replace them with LET.

7
00:00:20.190 --> 00:00:25.530
If we want but the most important thing to do is make sure that we're using the letter word inside of

8
00:00:25.530 --> 00:00:26.470
our loops.

9
00:00:26.880 --> 00:00:32.630
So let's see where we're iterating and add the let keyword there.

10
00:00:32.640 --> 00:00:36.880
Now let's add some template strings to make string interpellation easier.

11
00:00:36.990 --> 00:00:42.990
We can do this inside of our set just can't function so that we don't have to worry about small mistakes

12
00:00:43.080 --> 00:00:45.260
with concatenating strings.

13
00:00:45.450 --> 00:00:50.520
Make sure to add some back ticks some dollar signs and curly braces and we're great.

14
00:00:50.710 --> 00:00:56.800
We can also add this in our update function to make sure that the inner text includes the number of

15
00:00:56.800 --> 00:01:01.850
matching letters template strings will almost always make your code easier to read.

16
00:01:01.900 --> 00:01:06.990
So you should strive to use them in almost all scenarios where you're doing string concatenation.

17
00:01:07.020 --> 00:01:08.760
How about aero functions.

18
00:01:08.760 --> 00:01:13.650
You might be thinking let's remove every occurrence of the word function and make everything an arrow

19
00:01:13.650 --> 00:01:15.710
function and you can do that.

20
00:01:15.810 --> 00:01:21.180
But we're going to replace our callback functions with aero functions and see if we can refactor some

21
00:01:21.180 --> 00:01:22.750
code on one line.

22
00:01:23.190 --> 00:01:29.100
So let's do that for our ADD listener callback to the DOM content loaded event and for our Click event

23
00:01:29.160 --> 00:01:31.400
which starts the game.

24
00:01:31.590 --> 00:01:36.360
We can also refactor our start in function to use aero functions as well.

25
00:01:37.990 --> 00:01:44.530
Finally let's refactor our get random values function to use aero functions and place these all on the

26
00:01:44.530 --> 00:01:45.730
one line.

27
00:01:45.730 --> 00:01:52.420
Remember when we use one line of functions we don't use curly braces and the return keyword power here.

28
00:01:52.440 --> 00:01:59.430
We can also add a default parameter value of word count for the values parameter and we can then change

29
00:01:59.430 --> 00:02:03.440
random words to not need to include a second parameter.

30
00:02:03.810 --> 00:02:07.020
We were previously passing in words and a word count.

31
00:02:07.020 --> 00:02:13.460
But since the second parameter is defaulting to whatever word count is we don't need it anymore.

32
00:02:13.470 --> 00:02:15.520
How about the rest operator.

33
00:02:15.600 --> 00:02:20.920
Notice that in our Tuggle classes function we are using the arguments array like objects.

34
00:02:21.030 --> 00:02:25.240
So let's use the rest operator to get the class names we want to toggle.

35
00:02:25.530 --> 00:02:28.810
Instead of worrying about a for loop and starting at one.

36
00:02:29.100 --> 00:02:32.540
Let's just use a for each and toggle the class name.

37
00:02:32.610 --> 00:02:38.400
Since we're using the rest operator the value we get back isn't a read so we can use methods like for

38
00:02:38.400 --> 00:02:39.440
each.

39
00:02:39.450 --> 00:02:43.750
This is a nice way to place our code on one line and make it much much more readable.

40
00:02:44.910 --> 00:02:50.940
One last three factor we can do is to add some array destructuring inside of our shuffle function.

41
00:02:50.940 --> 00:02:55.150
We mentioned that array destructuring is very useful when you need to swap elements.

42
00:02:55.380 --> 00:02:56.830
So let's see what that would look like.

43
00:02:57.750 --> 00:03:00.990
Instead of making a temp variable and doing multiple assignments.

44
00:03:00.990 --> 00:03:03.150
I'll do this all on one line.

45
00:03:03.150 --> 00:03:09.960
A place array brackets and then place array copy at index 1 and array copy at index 2 and assign it

46
00:03:09.960 --> 00:03:15.540
to be an array with array copy add index to an array copy at index 1.

47
00:03:15.540 --> 00:03:19.160
If I run this application everything should be working like before.

48
00:03:19.170 --> 00:03:23.100
We've successfully added Yes 2015 to our application.

49
00:03:23.100 --> 00:03:25.820
If you miss something here feel free to go back and change it.

50
00:03:26.040 --> 00:03:29.160
And if you have any additional refactoring suggestions or questions.

51
00:03:29.220 --> 00:03:30.400
Be sure to let us know.

52
00:03:30.510 --> 00:03:36.580
We're here to help in the next section we'll be exploring more as 2015 features and learning about yes

53
00:03:36.590 --> 00:03:42.680
2016 yes 2017 and some experimental features that will be making their way into the language soon.

54
00:03:42.790 --> 00:03:43.250
See then.
