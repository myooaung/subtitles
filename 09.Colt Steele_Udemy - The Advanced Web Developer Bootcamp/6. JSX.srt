1
00:00:00,860 --> 00:00:04,370
In this next video we're going to talk about GSX.

2
00:00:04,500 --> 00:00:07,800
Now if you remember last video we made our first Riak component.

3
00:00:07,950 --> 00:00:13,230
But I'd argue it was a little difficult to write especially having to create every dom element using

4
00:00:13,230 --> 00:00:15,370
that big long function name.

5
00:00:15,390 --> 00:00:21,000
So in this video we're going to learn about GSX which would hopefully simplify that.

6
00:00:21,750 --> 00:00:26,640
Our objectives will be to first define Babel transpire.

7
00:00:26,670 --> 00:00:33,450
We'll talk about that more soon and then use GSX in our first Riak component so we'll refactor that

8
00:00:33,450 --> 00:00:38,520
component we create in the last video to now use GSX.

9
00:00:38,550 --> 00:00:40,330
So first of all what is Babel.

10
00:00:40,600 --> 00:00:46,410
Well Babel is a trans piler and trans Pilar's something that converts from one type of source code to

11
00:00:46,410 --> 00:00:52,470
another type babbel started out as a trans piler from E.S. sixty five.

12
00:00:52,680 --> 00:00:58,290
But after a little bit browsers started implementing a lot of the six features and Babel was becoming

13
00:00:58,380 --> 00:00:59,690
less necessary.

14
00:00:59,730 --> 00:01:07,110
So it changed his goal from being a trans pilot just from sixty five into a general purpose transpire.

15
00:01:07,110 --> 00:01:12,170
So now in re-act we use Babel to convert GSX into vanilla javascript.

16
00:01:12,210 --> 00:01:18,540
In other words we no longer have to write the re-act arm factories code because GSX will be a replacement

17
00:01:18,540 --> 00:01:19,040
for that.

18
00:01:19,230 --> 00:01:25,140
But we can still use Babel to trans pile our GSX code into something that is essentially still vanilla

19
00:01:25,140 --> 00:01:26,850
javascript.

20
00:01:26,850 --> 00:01:31,320
Now let's go back to our last example and refactor it to use GSX.

21
00:01:31,590 --> 00:01:33,090
Here's our code from last example.

22
00:01:33,090 --> 00:01:38,310
And if you remember it's a pet component that we're rendering in the DOM and we get a web page that

23
00:01:38,310 --> 00:01:39,500
looks like this.

24
00:01:41,210 --> 00:01:47,020
There is Moxey And that's our image and our age too.

25
00:01:47,210 --> 00:01:50,770
We can do better than this example though by using GSX.

26
00:01:50,810 --> 00:01:56,510
So the first thing that we'll have to do in order to use GSX is to incorporate babbel and other we're

27
00:01:56,510 --> 00:01:59,920
using GSX we no longer need this re-act bomb factories.

28
00:02:00,140 --> 00:02:08,950
So I'm going to replace react on factories with Babbel.

29
00:02:08,960 --> 00:02:09,430
There you go.

30
00:02:09,430 --> 00:02:14,600
Now I'm including the babbel javascript file rather than the factories file and the next thing I'll

31
00:02:14,600 --> 00:02:25,490
have to do is change this script tag from type text javascript to a type text Babbel.

32
00:02:25,620 --> 00:02:28,840
So this tells babbel that this is not normal javascript.

33
00:02:28,860 --> 00:02:33,390
This is a file that it needs to Tran's pile into javascript.

34
00:02:33,870 --> 00:02:39,930
So now that we've done that we can start using GSX And what does jazz X look like.

35
00:02:39,930 --> 00:02:45,690
Well it looks like returning h M-L from within your javascript code so we can react to this whole example

36
00:02:46,230 --> 00:02:48,180
to be a very simple return

37
00:02:50,630 --> 00:03:02,440
div h to Occy and then our image tag.

38
00:03:02,600 --> 00:03:05,160
I'll just grab this your show here

39
00:03:08,840 --> 00:03:11,980
and then we also want to include all texts

40
00:03:21,670 --> 00:03:26,030
and an important thing to note is that all jazz X tags must be closed.

41
00:03:26,050 --> 00:03:30,760
So even though unnormalized see him and get away with this in jazz sax it will give me an error unless

42
00:03:30,760 --> 00:03:37,030
I close it so I can either close it like that with a self-closing tag or I can close it this way.

43
00:03:37,030 --> 00:03:38,160
Either one is fine.

44
00:03:38,500 --> 00:03:45,100
And I tend to use the self-closing way rather than having extra typing.

45
00:03:46,000 --> 00:03:49,040
And lastly we need to close out our death.

46
00:03:49,600 --> 00:03:50,000
All right.

47
00:03:50,020 --> 00:03:53,990
So as you can see this looks much tighter.

48
00:03:54,010 --> 00:03:59,250
Right we don't have to call these functions and create all these variables just to get some summation

49
00:03:59,290 --> 00:04:01,030
Chmela render.

50
00:04:01,120 --> 00:04:06,250
So let's comment this out and see what it looks like in the browser.

51
00:04:06,250 --> 00:04:09,960
So I refresh the page and we got the same result which is what we expect.

52
00:04:10,030 --> 00:04:15,050
If you look in the console though you'll see a warning and make that a bit bigger.

53
00:04:15,340 --> 00:04:17,400
This warning here is what I'm talking about.

54
00:04:17,440 --> 00:04:20,890
It's essentially telling you that babbel is very slow.

55
00:04:21,160 --> 00:04:28,780
Specifically this babbel file is run when the page loads the trans piling from GSX to vanilla.

56
00:04:28,780 --> 00:04:31,830
Javascript is a time consuming process.

57
00:04:31,960 --> 00:04:36,680
And later on we're going to use some tools that will do it for us head of time so that the browser does

58
00:04:36,680 --> 00:04:39,540
not have to do it when it downloads the file.

59
00:04:40,370 --> 00:04:44,200
There's one last thing that we need to clean up so let's get rid of all this commented out code we no

60
00:04:44,200 --> 00:04:44,920
longer need it.

61
00:04:46,650 --> 00:04:48,960
We no longer have to use create element anymore.

62
00:04:49,140 --> 00:04:51,240
We can use GSX here as well.

63
00:04:51,360 --> 00:04:53,340
So I'll just get rid of that.

64
00:04:54,660 --> 00:04:57,850
And remember always to close your tags.

65
00:04:57,870 --> 00:05:05,660
So now this should run just fine in the browser and it's I'd argue much easier to read and simpler.

66
00:05:05,670 --> 00:05:11,220
Next we'll learn about more things that we can do a GSX specifically using javascript inside of our

67
00:05:11,220 --> 00:05:12,060
GSX code.
