WEBVTT
1
00:00:00.240 --> 00:00:05.330
So live off with the ability to sign up and when you sign up successfully we saw that logged in.

2
00:00:05.400 --> 00:00:12.420
So let's do that again with another user and password and username just to show you that we can log

3
00:00:12.420 --> 00:00:13.080
in again.

4
00:00:14.150 --> 00:00:18.820
And that comes in in our off form on my 19.

5
00:00:18.850 --> 00:00:21.150
Now there's a ton that we had to do just to get this to happen.

6
00:00:21.340 --> 00:00:24.900
And this is where authentication and a single page app really becomes challenging.

7
00:00:24.910 --> 00:00:26.380
So let's work our way back.

8
00:00:26.530 --> 00:00:32.370
We got to just cancel that log because we call this not Propst start on off test in a type which we

9
00:00:32.370 --> 00:00:39.440
sign in or sign up and when we pass in whatever we get from this that's the.

10
00:00:39.680 --> 00:00:42.260
But where did this that process that ON-OFF come from.

11
00:00:42.650 --> 00:00:49.360
Well the parent component on off his mean we passed in a prop called on us with the value of the user.

12
00:00:49.400 --> 00:00:50.960
Where did all the user come from.

13
00:00:50.960 --> 00:00:58.220
It was passed in through a redux from Matt dispatched to prop's what that means is it will actually

14
00:00:58.220 --> 00:00:59.840
dispatch a certain action.

15
00:01:00.200 --> 00:01:04.740
So let's go take a look right here in action slash off.

16
00:01:04.770 --> 00:01:11.730
So let's go to actions off and inside of here we can see that there's a function called off user We're

17
00:01:11.730 --> 00:01:18.150
using a fork but we have to wait for the result of an API call to finish before we just that's something

18
00:01:19.200 --> 00:01:21.340
we don't want to wait for one asynchronous action.

19
00:01:21.360 --> 00:01:25.210
We have to wait for that API call as well which is doing quite a bit.

20
00:01:25.240 --> 00:01:31.330
So this call makes a post to slash AB I-Slash off and then some type and.

21
00:01:31.820 --> 00:01:33.830
And here we get some information local storage.

22
00:01:33.850 --> 00:01:38.800
I mean dispatch the current user function which goes to the redux store and sets the current user with

23
00:01:38.800 --> 00:01:41.770
whatever we got back from that response.

24
00:01:41.800 --> 00:01:48.580
But what about API call that's coming from services slash API I've added a little bit of additional

25
00:01:48.580 --> 00:01:51.870
commentary here to help understand what UPI call is doing.

26
00:01:52.240 --> 00:01:57.520
So here we're just making a generic function to make an X request with some method to some path and

27
00:01:57.520 --> 00:01:58.930
include some data.

28
00:01:58.930 --> 00:02:04.460
So this helps us easily extract the data that we want and we successfully resolve actually gives us

29
00:02:04.460 --> 00:02:06.000
an object called data by default.

30
00:02:06.140 --> 00:02:09.340
Now when something goes wrong we always get back a response data.

31
00:02:09.620 --> 00:02:13.640
And there we get back the error object that we're sending back from the server.

32
00:02:13.640 --> 00:02:18.200
So in order to get this running let's make sure that the client side is running but also the servers

33
00:02:18.200 --> 00:02:19.590
that.

34
00:02:19.610 --> 00:02:24.850
So here we can see that I inserted some information into the database or passwords or hashing the back

35
00:02:24.850 --> 00:02:26.650
end is doing what we wanted to do.

36
00:02:26.900 --> 00:02:33.150
And this is working because we also set up our package just on the ability to proxy localhost EDI 81.

37
00:02:33.320 --> 00:02:37.380
So I'm not a prefix all those routes with localhost 81.

38
00:02:37.500 --> 00:02:40.220
So we've done quite a bit to get authentication to work.

39
00:02:40.760 --> 00:02:46.130
But right now we're not actually doing anything when we log in our user or handling any kind of errors.

40
00:02:46.170 --> 00:02:48.580
So in the next section we're going to go back and clean that up.
