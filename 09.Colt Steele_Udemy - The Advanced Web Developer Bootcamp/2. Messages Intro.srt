1
00:00:01,340 --> 00:00:05,080
Write so we're about halfway done with our back end.

2
00:00:05,140 --> 00:00:10,920
Our users can be created and log in what we want to start doing now is adding the idea of a message

3
00:00:10,920 --> 00:00:12,850
for each individual user.

4
00:00:13,050 --> 00:00:17,610
So what we're going to do is create a message model and I've already made a message not just inside

5
00:00:17,610 --> 00:00:18,030
of here.

6
00:00:18,030 --> 00:00:19,720
If you don't have that that's totally fine.

7
00:00:19,740 --> 00:00:20,960
Just go make one.

8
00:00:20,970 --> 00:00:23,210
We're going to bring in mongoose.

9
00:00:23,550 --> 00:00:24,610
We've seen this before.

10
00:00:24,690 --> 00:00:26,570
Remember buyer mongoose.

11
00:00:26,760 --> 00:00:31,060
But this time we are also going to bring in our user model.

12
00:00:31,180 --> 00:00:33,630
We may be wondering why are we bringing in our user model.

13
00:00:33,660 --> 00:00:39,150
That is because we want to make every message have a reference to the user who created it.

14
00:00:39,150 --> 00:00:43,800
We're also going to go back in our user model and add a property that refers to all of the messages

15
00:00:43,830 --> 00:00:45,110
for that specific user.

16
00:00:45,240 --> 00:00:46,780
But let's start with a message first.

17
00:00:46,920 --> 00:00:48,600
This scheme is going to be a little bit shorter.

18
00:00:48,600 --> 00:00:50,170
This is a message schema.

19
00:00:50,430 --> 00:00:55,280
And as a new Mangu schema this is an object right here with all of our fields.

20
00:00:55,290 --> 00:00:58,060
We're going to have really simply just some text.

21
00:00:58,260 --> 00:01:02,640
This is going to be a type of string we're going to make sure that it's required though we don't want

22
00:01:02,640 --> 00:01:03,980
any empty messages.

23
00:01:04,020 --> 00:01:11,620
And let's give this a max length of we're going to be fancy will be 160 characters.

24
00:01:11,730 --> 00:01:16,610
We then want to make a reference to every user for that message.

25
00:01:16,620 --> 00:01:19,360
We could call this whatever we'd like but I'm going to be calling it user.

26
00:01:19,620 --> 00:01:26,140
And it is a type of a mongoose schema types object Paty.

27
00:01:26,160 --> 00:01:30,850
This is specifically just an object ID or a unique identifier for some user.

28
00:01:31,050 --> 00:01:36,110
But what's really important here is that it is a reference to the user model.

29
00:01:36,180 --> 00:01:40,120
You may be wondering well what happens if you just put a lowercase you are called something else.

30
00:01:40,120 --> 00:01:41,450
Everything's actually going to break.

31
00:01:41,610 --> 00:01:46,050
This capital user right here is exactly what we named our model.

32
00:01:46,050 --> 00:01:47,350
You have to make sure those match up.

33
00:01:47,370 --> 00:01:49,280
Otherwise you can have a whole bunch of issues.

34
00:01:49,290 --> 00:01:50,660
What else do we want inside of here.

35
00:01:50,670 --> 00:01:57,600
Well we're going to make a message that's going to be a mongoose model call message and will pass in

36
00:01:57,600 --> 00:02:01,020
our message schema and then we'll make sure that we export out

37
00:02:03,910 --> 00:02:05,350
our message.

38
00:02:05,680 --> 00:02:11,050
So if we say that that should work out well let's head over to my server and you may have seen this

39
00:02:11,050 --> 00:02:16,120
already but actually use Mago Klein is no longer necessary in mongoose 5 and up please remove it.

40
00:02:16,150 --> 00:02:21,250
So if you're not using mongoose 5 and up you will actually have to put in that use Mongo client.

41
00:02:21,250 --> 00:02:22,810
This is something that's actually relatively new.

42
00:02:22,810 --> 00:02:26,740
So inside of my index Yes I'm actually going to take this part out.

43
00:02:26,740 --> 00:02:32,260
This is something I've been doing previously but mongoose 5 has now not needed it anymore so I can quickly

44
00:02:32,260 --> 00:02:33,520
restart the server.

45
00:02:33,520 --> 00:02:34,600
And here's what I have right here.

46
00:02:34,630 --> 00:02:38,440
So if you saw that error message if you're using mongoose 4 and under.

47
00:02:38,440 --> 00:02:41,150
Just make sure you have this huge Mongo kind of true.

48
00:02:41,260 --> 00:02:43,500
That's something I've been doing for a while but mongoose has changed.

49
00:02:43,540 --> 00:02:45,000
So we don't need it anymore.

50
00:02:45,460 --> 00:02:49,120
That would just remove a nice little warning in the server.

51
00:02:49,300 --> 00:02:50,630
So what I want to do next.

52
00:02:50,740 --> 00:02:55,640
Back in our message schema is think about the relationship between messages and users.

53
00:02:55,780 --> 00:03:03,610
So in my user model I want to make sure that every user has a reference to all of its messages and instead

54
00:03:03,610 --> 00:03:07,320
of this just being an object this is actually going to be an array.

55
00:03:07,390 --> 00:03:12,000
It's going to be an array of object IDs.

56
00:03:12,040 --> 00:03:23,740
Once again we're going to have that type mongoose schema types object id and a ref to message.

57
00:03:23,740 --> 00:03:28,320
Now you maybe be wondering here well wait a minute how come we don't have to pass an message right here.

58
00:03:28,360 --> 00:03:33,650
And the answer is actually because it is all being exploited for us right here.

59
00:03:33,670 --> 00:03:39,850
We'll bring in our message and pass in message by exporting these out all together the message model

60
00:03:39,940 --> 00:03:41,660
is able to be accessed by the user.

61
00:03:41,680 --> 00:03:44,970
But we have to pass in that user to the message model.

62
00:03:45,100 --> 00:03:48,090
So if we save this we should be able to start creating messages.

63
00:03:48,100 --> 00:03:52,100
But there is something that's pretty important when we create these messages.

64
00:03:52,210 --> 00:03:58,510
What I want to think about is what happens when we delete a message when we delete a message we don't

65
00:03:58,510 --> 00:04:01,240
just want to remove that specific message.

66
00:04:01,240 --> 00:04:08,690
We also have to go to the users messages list or array and remove that specific I.D..

67
00:04:08,950 --> 00:04:14,770
So just to review we've made a list of messages for every user that refers to an individual message

68
00:04:14,770 --> 00:04:18,780
ID and for each message we have a user that it refers to.

69
00:04:19,060 --> 00:04:22,110
But we need to add one more thing inside of our schema.

70
00:04:22,140 --> 00:04:28,600
We're going to add a pre remove hook and this is going to be once again another azing function that

71
00:04:28,600 --> 00:04:29,770
accepts next.

72
00:04:29,770 --> 00:04:31,480
And what is the purpose of this remove hook.

73
00:04:31,490 --> 00:04:34,210
Well we need to find a user.

74
00:04:34,210 --> 00:04:43,630
We need to remove the ID of the message from their messages list and then we need to save that user

75
00:04:44,230 --> 00:04:46,060
and return next.

76
00:04:46,060 --> 00:04:50,350
So this is important because we don't want a situation where we delete a message but a user still has

77
00:04:50,350 --> 00:04:53,920
that idea of the message that could break things in our API.

78
00:04:54,190 --> 00:04:56,210
So we are going to first find a user.

79
00:04:56,350 --> 00:04:58,450
But remember we're dealing with an easing function.

80
00:04:58,450 --> 00:05:04,480
So we have to wrap everything with a try catch call this ear error ever you'd like just keeping it real

81
00:05:04,480 --> 00:05:05,130
simple.

82
00:05:05,470 --> 00:05:07,030
So we need to find a user.

83
00:05:07,240 --> 00:05:08,530
How do we find the user.

84
00:05:08,620 --> 00:05:11,220
What makes some variable for that call that user.

85
00:05:11,230 --> 00:05:17,100
That's the result of user defined by id this user ID.

86
00:05:17,320 --> 00:05:22,180
And this refers to the specific document if you'd like to try to make this an arrow function.

87
00:05:22,180 --> 00:05:26,020
Things are actually going to break because we do need the correct value of the keyword this.

88
00:05:26,140 --> 00:05:27,850
We don't want something outside.

89
00:05:27,960 --> 00:05:31,040
So I'm just giving it simple using the function.

90
00:05:31,600 --> 00:05:37,120
Next thing we want to do is remove that ID from the list and this is done using the Remove method.

91
00:05:37,120 --> 00:05:40,810
This is a mongoose method that is completely synchronous.

92
00:05:40,810 --> 00:05:44,440
This is just like splicing a specific value from a list.

93
00:05:44,440 --> 00:05:52,150
We then want to save that user so we can weight saving of that user and then return next.

94
00:05:52,150 --> 00:05:55,180
And if anything goes wrong at this entire time you've seen this before.

95
00:05:55,350 --> 00:05:57,130
We return next with that.

96
00:05:57,460 --> 00:06:02,470
And this is going to be important because when we create our messages we want to make sure that we populate

97
00:06:02,620 --> 00:06:04,590
the list of messages for that user.

98
00:06:04,840 --> 00:06:09,040
And when we remove a message we want to make sure that is removed from the users list.

99
00:06:09,100 --> 00:06:12,020
We'll see this in action when we start actually creating some messages.

100
00:06:12,160 --> 00:06:13,640
Let's do that in the next week.
