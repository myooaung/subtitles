1
00:00:00,550 --> 00:00:04,080
Are right it's time to deploy the front end portion of this application.

2
00:00:04,080 --> 00:00:10,110
So once again I'm going to remove this docket folder so that I can put it in its own separate repository

3
00:00:10,110 --> 00:00:13,520
instead of one parent repository for the client and server model.

4
00:00:13,560 --> 00:00:19,330
So I'm going to get in it and then I'm going to place my node modules please that text inside of a dot

5
00:00:19,350 --> 00:00:20,850
get ignore file.

6
00:00:20,880 --> 00:00:24,360
You could do this however you'd like I'm just doing this as an easy way in the command line but this

7
00:00:24,360 --> 00:00:29,430
will ensure that when I add and commit my node modules are not included which will just take additional

8
00:00:29,430 --> 00:00:30,890
amounts of time if they are.

9
00:00:31,200 --> 00:00:34,230
So what we need to do now is create a Heroku application.

10
00:00:34,320 --> 00:00:39,270
But instead of just doing Heroku create We're going to use a build pack which is simply a collection

11
00:00:39,510 --> 00:00:44,090
of tools given to us to allow for an easier time deploying this application.

12
00:00:44,130 --> 00:00:46,720
So we're going to take a look at Create react and Heroku.

13
00:00:46,890 --> 00:00:51,570
And this is going to take us to create react and build pack which includes quite a few other things

14
00:00:51,570 --> 00:00:54,760
that we're going to use especially for proxying our backend.

15
00:00:55,020 --> 00:00:59,250
So in order to get started with this we can follow the instructions right here on the left and we've

16
00:00:59,250 --> 00:01:01,990
already done the Create react tap and the get in it.

17
00:01:02,010 --> 00:01:03,850
We're going to go from this step right here.

18
00:01:04,020 --> 00:01:05,230
This Heroku create.

19
00:01:05,520 --> 00:01:07,220
So what I'll do is I'll copy and paste this.

20
00:01:07,230 --> 00:01:11,790
And when I paste I'm just going to press control C right away to stop that because I don't want to call

21
00:01:11,790 --> 00:01:12,690
this dollar sign.

22
00:01:12,700 --> 00:01:18,090
Aptonym I'm going to call this something like warbler client.

23
00:01:18,270 --> 00:01:19,770
Yes just for my initials.

24
00:01:19,850 --> 00:01:23,910
We want to make sure that we use this build pack so that we get some built in configuration settings

25
00:01:23,940 --> 00:01:25,970
that will make deploying much much easier.

26
00:01:26,280 --> 00:01:28,840
When that's done here's what it should look like.

27
00:01:28,860 --> 00:01:31,420
Now the next thing we can do is add and commit and push to Heroku.

28
00:01:31,440 --> 00:01:36,970
But there's one thing we need to do first we need to make a file called static dot Jason.

29
00:01:37,830 --> 00:01:43,290
And inside of our static dodgiest on we're going to place some logic related to our re-act router and

30
00:01:43,470 --> 00:01:44,300
for proxying.

31
00:01:44,490 --> 00:01:49,560
So we're going to start here with a key called root and the value is build slash.

32
00:01:49,620 --> 00:01:52,830
And this simply means where should we start serving content from.

33
00:01:52,940 --> 00:01:57,660
And when we deploy our application there's a script that's run which is this built script right here

34
00:01:57,840 --> 00:02:02,330
that will modify and compress our assets and really make our application production ready.

35
00:02:02,580 --> 00:02:09,060
So inside our static Jaison We're also going to include a key of routes and the value of slash.

36
00:02:09,070 --> 00:02:14,160
Star Star which means basically any route that we go to fall back into the index that each time I'll

37
00:02:14,220 --> 00:02:17,460
file is a file that really kicks off our re-act application.

38
00:02:17,490 --> 00:02:20,000
We're also going to pass in a key of proxies.

39
00:02:20,250 --> 00:02:25,590
And here is where we're going to specify a proxy that we have anytime that we go to slash API.

40
00:02:25,830 --> 00:02:31,770
And anytime that we go to slash API the origin or you are all that we want to point to is each colon

41
00:02:31,770 --> 00:02:40,110
slash slash warbler Dasch server dasht vs Heroku app dot com that's the server side application that

42
00:02:40,110 --> 00:02:40,960
I just deployed.

43
00:02:41,130 --> 00:02:43,800
You would call yours whatever you want right here.

44
00:02:43,800 --> 00:02:48,480
So we're going to see this right now going to go back to the terminal and I'm going to add and I'm going

45
00:02:48,480 --> 00:02:51,770
to commit and here will say ready to deploy.

46
00:02:52,530 --> 00:02:54,120
And then going to get push

47
00:02:56,770 --> 00:02:59,840
Heroku master and this will deploy my code to Heroku.

48
00:03:00,010 --> 00:03:04,630
And as I do this I'm going to check in on my server side application and take a look at the logs right

49
00:03:04,630 --> 00:03:08,720
now because if we're doing this correctly we should see requests being made there as well.

50
00:03:08,890 --> 00:03:15,530
So I'm going to take in Heroku logs Dashti dash a warbler server.

51
00:03:15,940 --> 00:03:16,540
Yes.

52
00:03:16,740 --> 00:03:19,830
And this is going to show me the tail end of my logs.

53
00:03:20,050 --> 00:03:23,790
And as new requests come in I'll see them in this window in the terminal.

54
00:03:24,070 --> 00:03:29,860
So I'll give this a second to deploy and once this is done we should be able to type in Heroku open

55
00:03:30,550 --> 00:03:35,430
and press enter and they should open up a browser with our application and we take a look right here.

56
00:03:35,500 --> 00:03:36,090
It looks good.

57
00:03:36,100 --> 00:03:37,270
We're deployed.

58
00:03:37,270 --> 00:03:39,610
Now let's try to sign up.

59
00:03:39,880 --> 00:03:43,650
When I click sign up I'm going to go to test at gmail dot com.

60
00:03:43,840 --> 00:03:48,570
We'll put in a password of secret a user name of secret and let's try to sign up.

61
00:03:48,670 --> 00:03:50,900
And when I sign up we can see right here.

62
00:03:52,170 --> 00:03:56,030
That our node application is getting started looks like it was just kind of falling asleep for a bit.

63
00:03:56,040 --> 00:03:58,700
This is what happens when you use the free tear on Heroku.

64
00:03:58,740 --> 00:04:02,700
So right now we can just see that we made a post request to slash off slash Sign-Up.

65
00:04:03,330 --> 00:04:06,030
Let's try this again now that it's actually working.

66
00:04:06,840 --> 00:04:16,680
So I'll go back to slash sign up and what I put in is a sign up and I'll go to secret at gmail dot com

67
00:04:16,830 --> 00:04:20,540
with a password of secret username of secret and let's click.

68
00:04:20,550 --> 00:04:24,260
Sign me up and right here it's going to say not found.

69
00:04:24,660 --> 00:04:29,350
So the reason we're getting this not found is because we need to add one more thing to our static Jaison.

70
00:04:29,610 --> 00:04:32,690
If you notice here we're going to slash off slash Sign-Up.

71
00:04:32,760 --> 00:04:35,990
But the problem is this should all be prefixed with Slash API.

72
00:04:36,210 --> 00:04:41,460
So inside of you we're going to make sure that we add a slash API in our static Jaison when we're dealing

73
00:04:41,460 --> 00:04:44,490
with things on Heroku we also need to make sure we add again.

74
00:04:44,730 --> 00:04:55,500
We're going to commit saying adding API to end of proxy and let's make sure we push this up again.

75
00:04:55,500 --> 00:04:58,700
So we're going to get push Heroku M. It's a pretty common mistake.

76
00:04:58,980 --> 00:05:00,730
Just forgot the slash API here.

77
00:05:00,900 --> 00:05:04,310
Otherwise it's going to take every single u r l and add the path onto it.

78
00:05:04,570 --> 00:05:07,040
So let's make sure that we add that slash API as well.

79
00:05:07,050 --> 00:05:08,880
We'll give this a second to deploy.

80
00:05:08,880 --> 00:05:12,040
Now there are lots of other configuration settings we can make for production.

81
00:05:12,150 --> 00:05:15,750
You can see right here there is some environment variables that I haven't set but I want to just start

82
00:05:15,750 --> 00:05:20,010
really simply get this up in a production environment and then you can alter whatever you'd like.

83
00:05:20,190 --> 00:05:22,110
So let's give this a second to deploy.

84
00:05:22,680 --> 00:05:26,910
Once again let's type in Heroku open and let's make sure we saw that correctly.

85
00:05:27,150 --> 00:05:30,250
This should open up a browser with our Heroku application.

86
00:05:30,510 --> 00:05:34,170
Let's keep these server side logs open and try to sign up again.

87
00:05:34,380 --> 00:05:41,610
So I'll sign up with user at gmail dot com password secret username secret and let's click sign up and

88
00:05:41,610 --> 00:05:43,430
it says that username or emails already taken.

89
00:05:43,480 --> 00:05:46,250
OK let's try a user plus one at gmail dot com.

90
00:05:46,570 --> 00:05:47,480
Let's click sign up.

91
00:05:47,520 --> 00:05:50,130
And here we get that user name is already taken.

92
00:05:50,130 --> 00:05:52,720
So it looks like we might already have that in our database.

93
00:05:52,770 --> 00:05:53,820
So let's try something else.

94
00:05:53,820 --> 00:06:00,910
We'll try another at g mail dot com and we'll have a password of secret and a user name of another.

95
00:06:01,170 --> 00:06:02,350
Let's try this right now.

96
00:06:02,610 --> 00:06:03,870
Well click sign me up and there we go.

97
00:06:03,870 --> 00:06:07,610
Looks like we're logged in and I don't have a profile image or I'll here that's OK.

98
00:06:07,620 --> 00:06:10,460
Let's go out a new message of hello world.

99
00:06:10,860 --> 00:06:12,810
Let's go at that message and there it is.

100
00:06:12,810 --> 00:06:14,950
Looks like someone else had a message previously.

101
00:06:15,360 --> 00:06:19,970
So when I click on this right here to go back I can log out and it looks like our application is working.

102
00:06:19,980 --> 00:06:23,850
We can see that all our server side logs are coming in and we make requests.

103
00:06:23,850 --> 00:06:28,290
With these new users or other user names we can see the Mongul queries being run to make sure we're

104
00:06:28,290 --> 00:06:29,940
doing this correctly.

105
00:06:29,940 --> 00:06:35,740
So what we want to do is make sure that in our static Jaison we have the slashy API at the end here.

106
00:06:35,760 --> 00:06:40,680
What this means is that any you are l that matches slashy API in my client side application will be

107
00:06:40,680 --> 00:06:45,630
sent to this u r l right here and we're also going to make sure we add a slash API at the end there

108
00:06:45,850 --> 00:06:47,900
that will make sure that those Uriel's match.

109
00:06:47,910 --> 00:06:50,550
So it looks like our client side application is deployed as well.

110
00:06:50,550 --> 00:06:54,480
Our server side application is deployed as well and we have an application in production.
