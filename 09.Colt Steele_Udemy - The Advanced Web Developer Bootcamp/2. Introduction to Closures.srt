1
00:00:00,570 --> 00:00:06,300
Welcome back in this section we're going to talk about closures to create closures and where closures

2
00:00:06,300 --> 00:00:08,130
are used in the real world.

3
00:00:08,220 --> 00:00:12,750
If you read a bit on closures you might think they're quite confusing but once you can understand what

4
00:00:12,750 --> 00:00:17,610
the definition of a closure is it becomes much much easier to understand them.

5
00:00:17,940 --> 00:00:25,320
So let's define what a closure is a closure is a function that makes use of variables defined in outer

6
00:00:25,320 --> 00:00:27,600
functions that have returned.

7
00:00:27,630 --> 00:00:28,670
That sounds like quite a bit.

8
00:00:28,710 --> 00:00:30,450
So let's see an example.

9
00:00:30,570 --> 00:00:36,420
I'm going to open the chrome developer console and create a function called outer inside of the outer

10
00:00:36,420 --> 00:00:37,080
function.

11
00:00:37,080 --> 00:00:41,100
I'm going to create a variable called Start and assign it to the string.

12
00:00:41,100 --> 00:00:42,600
Closures are.

13
00:00:42,690 --> 00:00:47,840
I'll then return a function from the outer function and call it inner inside of here.

14
00:00:47,880 --> 00:00:51,530
I'll return the string start concatenated with the string.

15
00:00:51,660 --> 00:00:52,330
Awesome.

16
00:00:52,710 --> 00:00:58,620
If I invoke the outer function I'm going to see the definition of the inner function and if I invoke

17
00:00:58,620 --> 00:01:02,870
the inner function right away I'll see the string closures are awesome.

18
00:01:03,300 --> 00:01:06,070
You might not think this is very impressive and that's OK.

19
00:01:06,090 --> 00:01:09,060
Right now we just want to focus on the definition.

20
00:01:09,090 --> 00:01:15,000
If I look again at the outer function being called I can see that inside of its return value there is

21
00:01:15,000 --> 00:01:20,940
a variable called start but how does this inner function have access to that smart variable.

22
00:01:20,940 --> 00:01:22,830
The outer function has returned.

23
00:01:22,830 --> 00:01:24,990
The answer is through closure.

24
00:01:25,350 --> 00:01:29,450
Let's take another look at an example of closure in this function called outer.

25
00:01:29,450 --> 00:01:36,000
We accept a parameter called a and return a function which accepts a parameter called B inside of the

26
00:01:36,000 --> 00:01:36,680
inner function.

27
00:01:36,690 --> 00:01:38,890
We are making use of the parameter a.

28
00:01:39,000 --> 00:01:45,570
Even though the outer function has returned already one more time closure exists when an inner function

29
00:01:45,900 --> 00:01:49,090
makes use of variables defined in an outer function.

30
00:01:49,110 --> 00:01:51,950
It has returned a couple of things to note.

31
00:01:52,020 --> 00:01:57,210
We need to return the inner function and invoke it and we do not need to give the inner function a name.

32
00:01:57,210 --> 00:02:02,100
We can make it anonymous we have named it for learning purposes for debugging as well.

33
00:02:02,100 --> 00:02:06,180
It is recommended that you name your functions now that you know what a closure is.

34
00:02:06,180 --> 00:02:10,040
Let's see if you can identify it the following code contains a closure.

35
00:02:10,260 --> 00:02:12,370
Let's take a look at this first example.

36
00:02:12,390 --> 00:02:13,360
Is there a closure.

37
00:02:18,780 --> 00:02:20,100
How about the second example.

38
00:02:24,530 --> 00:02:28,200
The first one is not and the second one is Why is that.

39
00:02:28,310 --> 00:02:34,820
Remember closure only exists when an inner function makes use of variables defined in an outer function.

40
00:02:34,820 --> 00:02:40,030
It has returned the inner function does not make use of any of the external variables.

41
00:02:40,040 --> 00:02:42,610
All we have is a function inside of another function.

42
00:02:43,790 --> 00:02:45,970
Now you have an idea of what closure is.

43
00:02:45,980 --> 00:02:47,960
Let's see how they actually work.

44
00:02:47,960 --> 00:02:53,210
What's essential to understand about closure is that only the variables that are used in the inner function

45
00:02:53,390 --> 00:02:57,880
are remembered with seek a look at an example using the chrome developer tools.

46
00:02:58,070 --> 00:03:00,970
I'll make a function called outer F and an inside.

47
00:03:00,980 --> 00:03:06,920
Create two variables to which I will assign to the string something from outer effen and fact which

48
00:03:06,920 --> 00:03:08,240
I will assign to the string.

49
00:03:08,240 --> 00:03:09,600
Remember me.

50
00:03:09,680 --> 00:03:15,410
I'll then return a function called Inner FM and inside of there place a debugger keyword and then on

51
00:03:15,410 --> 00:03:18,200
the next line return the fact variable.

52
00:03:18,200 --> 00:03:23,660
When I run this code I'll be placed inside of the sources tab where I can examine all variables in my

53
00:03:23,660 --> 00:03:30,130
inner in a debugger keyword causes execution of my code on that line in which I place it.

54
00:03:30,170 --> 00:03:35,330
If I press escape I can open up a console where I can see what values of some of the variables that

55
00:03:35,330 --> 00:03:36,650
I have are.

56
00:03:36,740 --> 00:03:39,880
So what variables do you think I'll have access to in inner ephah.

57
00:03:40,650 --> 00:03:43,730
Let's see if I have the fact variable and in fact I do.

58
00:03:43,990 --> 00:03:45,180
But how about data.

59
00:03:45,240 --> 00:03:48,220
If I try to access this I'll get back a reference.

60
00:03:48,620 --> 00:03:53,550
What's really important to understand here is that inner functions do not remember everything from outer

61
00:03:53,550 --> 00:03:57,630
functions that have returned only the variables that they need.

62
00:03:57,660 --> 00:04:03,030
What happens here is when a function returns it first checks to see if there are any inner functions

63
00:04:03,090 --> 00:04:06,070
which are use variables defined in the function.

64
00:04:06,090 --> 00:04:09,350
It makes sure to remember those variables if it needs to.

65
00:04:09,360 --> 00:04:11,580
This is how closure works.

66
00:04:11,580 --> 00:04:13,810
Now you might be wondering why do I need to know this.

67
00:04:13,830 --> 00:04:15,660
When will I be using closure.

68
00:04:15,660 --> 00:04:20,160
See if you can brainstorm some ideas of when it might be helpful and the next video will answer those

69
00:04:20,160 --> 00:04:21,600
questions and more.

70
00:04:21,600 --> 00:04:22,080
See there.
