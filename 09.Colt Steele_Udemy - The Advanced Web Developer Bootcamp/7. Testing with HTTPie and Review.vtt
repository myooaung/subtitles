WEBVTT
1
00:00:00.330 --> 00:00:03.710
All right it's time to test some varlets using HGT pi.

2
00:00:03.780 --> 00:00:08.220
So what we start doing is making a POST request to local host 1881.

3
00:00:08.610 --> 00:00:10.230
Let's first make sure there's servers starting.

4
00:00:10.230 --> 00:00:11.080
That looks good.

5
00:00:11.100 --> 00:00:18.660
We'll go to slash API slash off slash sign and here sign up with a username of Matt password of Matt

6
00:00:18.780 --> 00:00:20.380
and you know of Matt.

7
00:00:20.520 --> 00:00:24.120
Matt dotcom so we should expect this to work.

8
00:00:24.120 --> 00:00:25.320
This returns the token to us.

9
00:00:25.350 --> 00:00:26.040
Excellent.

10
00:00:26.310 --> 00:00:28.200
So we just signed up with a user name of Matt.

11
00:00:28.260 --> 00:00:29.300
We tried to sign up again.

12
00:00:29.340 --> 00:00:31.380
We see that user name and or e-mail is taken.

13
00:00:31.380 --> 00:00:32.310
That looks great.

14
00:00:32.640 --> 00:00:37.520
Let's try to sign in to sign in and make sure we pass in just the password and the e-mail.

15
00:00:37.530 --> 00:00:39.320
We don't need the user name here.

16
00:00:39.390 --> 00:00:42.930
Here we should get back the token as well if we successfully signed it.

17
00:00:42.930 --> 00:00:44.170
And that looks good.

18
00:00:44.820 --> 00:00:50.760
So what we're doing now is make a post request to create a message format and to do that we're going

19
00:00:50.760 --> 00:01:00.270
to need the I.D. and the token sonic and HDTV post to local host 81 slash API slash users slash Mazzy

20
00:01:00.270 --> 00:01:04.140
user id a piece that can slash messages.

21
00:01:04.140 --> 00:01:11.070
And remember here we also need to pass in a header called authorization with the value of bear and then

22
00:01:11.130 --> 00:01:20.070
the token to make sure we close those quotes and then with some text that says Hello everyone and will

23
00:01:20.170 --> 00:01:21.840
make sure we get another double quote in there.

24
00:01:22.070 --> 00:01:22.730
And there we go.

25
00:01:22.770 --> 00:01:29.830
Look we've created a message from the let's try to add another message and we'll just say

26
00:01:32.590 --> 00:01:33.290
goodbye.

27
00:01:34.900 --> 00:01:38.370
So it looks like we've successfully created two messages for Matt.

28
00:01:38.470 --> 00:01:43.610
We pass in the token with a letter of authorization that looks good.

29
00:01:43.640 --> 00:01:47.960
Now let's go make sure that we hold onto this idea that Matt has because we're going to try to sign

30
00:01:47.960 --> 00:01:49.810
up another user right now.

31
00:01:49.910 --> 00:01:50.810
So let's copy that.

32
00:01:50.810 --> 00:01:53.200
We're going to use that in a little bit.

33
00:01:53.240 --> 00:01:56.550
We're going to try to forge a request as someone else.

34
00:01:56.680 --> 00:02:02.260
So let's make sure that our authorization is working what's going to get easier when we could post to

35
00:02:02.270 --> 00:02:03.120
localhost.

36
00:02:03.220 --> 00:02:12.890
City one sloshy if I slash off slash sign and here when we get user name of hacker a password of hacker

37
00:02:12.980 --> 00:02:20.260
and an email of hacker at hacker dot com wrocÅ‚aw over here.

38
00:02:20.620 --> 00:02:24.250
So this should still successfully sign up a new user everything is valid.

39
00:02:24.520 --> 00:02:29.770
But what I want to try to do now is write a message using this token but with maps ID.

40
00:02:30.100 --> 00:02:38.020
So that means we can make a post request to local host if you want slash FBI slash users slash Matts

41
00:02:38.080 --> 00:02:54.820
user id go piece that in such messages what we're going to do here is now try to create a message Asmat.

42
00:02:55.010 --> 00:03:01.990
So we're going to pass in an authorization header with a value of barer and the token for our hacker

43
00:03:02.050 --> 00:03:07.160
that we just made which is of value based on what took it so once you pass a token was passed on a message

44
00:03:07.220 --> 00:03:11.720
of fact and it looks like we're getting back a result of unauthorized.

45
00:03:11.750 --> 00:03:12.670
And that's a good thing.

46
00:03:12.920 --> 00:03:17.870
That's because what we're doing is we're taking the second part of this token everything that goes from

47
00:03:17.870 --> 00:03:24.530
that second dot to the last and we're decoding that token and finding the I.D. and making sure that

48
00:03:24.530 --> 00:03:28.630
the I.D. inside of the token is the same as the one that's coming in to you.

49
00:03:28.910 --> 00:03:33.620
And if it's not we see that the user is unauthorized.

50
00:03:33.620 --> 00:03:36.350
All of our ads right now are doing what we want them to do.

51
00:03:36.350 --> 00:03:40.160
The back looks like it's in good shape authentication authorization it's working.

52
00:03:40.160 --> 00:03:43.010
It's now time to take this back and shove it for a little bit.

53
00:03:43.010 --> 00:03:47.330
Start working on the front end to make requests to this back and we really want to make sure that our

54
00:03:47.330 --> 00:03:48.460
server is started.

55
00:03:48.470 --> 00:03:52.590
So when we make Ajax requests they work and after we're done with the front in we'll deploy the back

56
00:03:52.590 --> 00:03:53.780
end and the front end.

57
00:03:54.080 --> 00:03:55.320
Let's keep working on Werber.
