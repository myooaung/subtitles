WEBVTT
1
00:00:00.360 --> 00:00:01.420
Welcome back.

2
00:00:01.710 --> 00:00:07.080
So far all of the visualizations we've made have been based on data that's been readily available inside

3
00:00:07.080 --> 00:00:08.970
of a javascript file.

4
00:00:09.020 --> 00:00:13.720
However very often when you use an B-3 you'll be working with data in some other format.

5
00:00:13.790 --> 00:00:20.120
You'll first need to pull in to your javascript code to help with this D-3 comes with several request

6
00:00:20.120 --> 00:00:22.910
helpers that can transform data for you.

7
00:00:23.080 --> 00:00:27.630
In this video will familiarize ourselves with a few of these helper methods.

8
00:00:28.090 --> 00:00:31.220
Here's a link to the code we'll be looking at for the rest of this video.

9
00:00:33.150 --> 00:00:39.450
Here I've got a couple of files one Jaison and one cxxviii my Jason File has some very basic data about

10
00:00:39.450 --> 00:00:43.080
countries around the world including population estimates.

11
00:00:43.090 --> 00:00:46.900
My CXXVI has some basic information about cities in those countries.

12
00:00:47.860 --> 00:00:53.520
Inside my index HMO I'm loading D-3 in an app G-S file inside my app.

13
00:00:53.530 --> 00:00:57.280
Yes I basically like to import data from both of these files.

14
00:00:58.650 --> 00:01:00.840
Let's work with the Jasonville first.

15
00:01:01.200 --> 00:01:07.350
D-3 comes with a method called Jaison that will make a request to adjacent file parsed the J sign and

16
00:01:07.350 --> 00:01:11.010
return to us the adjacent data as valid javascript.

17
00:01:11.080 --> 00:01:14.860
The first argument to D-3 by Jaison is the path to the file.

18
00:01:14.860 --> 00:01:17.530
The second argument is a callback that will get invoked.

19
00:01:17.530 --> 00:01:23.790
Once you've received a response from your request inside of the callback you can pass in one or two

20
00:01:23.790 --> 00:01:25.040
arguments.

21
00:01:25.110 --> 00:01:30.650
If you only pass one argument it will refer to the data you get back from the request.

22
00:01:30.680 --> 00:01:35.000
However it's a best practice to supply two arguments in this case.

23
00:01:35.000 --> 00:01:40.070
The first argument will correspond to any error in the request and the second argument will correspond

24
00:01:40.070 --> 00:01:41.080
to the data.

25
00:01:41.480 --> 00:01:46.730
Note that in order to make these requests I need to be working over HTP not the file system.

26
00:01:46.730 --> 00:01:51.560
If you work over the file system you'll see this error in the console.

27
00:01:51.580 --> 00:01:54.690
So first I'll start up a local server.

28
00:01:54.760 --> 00:01:59.830
If you haven't done this before we can do this with a node module called HTP server.

29
00:01:59.950 --> 00:02:06.240
If you don't already have this module installed globally from the terminal run NPM install Dasch g h

30
00:02:06.250 --> 00:02:07.990
UDP server.

31
00:02:07.990 --> 00:02:12.090
Once that's done you can type HTB server to start a server.

32
00:02:12.520 --> 00:02:17.260
If I open my browser to local host ADT I'll now see the page.

33
00:02:17.260 --> 00:02:23.390
This works since by default the server will look for a file called index dullish the amount as you can

34
00:02:23.390 --> 00:02:29.640
see in this case the request is successful and we get back an object with an array of our data.

35
00:02:29.800 --> 00:02:33.110
Remember will only have access to this data inside of the callback.

36
00:02:33.280 --> 00:02:37.590
So anything you want D-3 to do with that data needs to be inside of the callback.

37
00:02:37.660 --> 00:02:43.120
For example if we want to display all of the country names will need to be sure a logic exists inside

38
00:02:43.120 --> 00:02:44.520
of the callback function.

39
00:02:44.710 --> 00:02:50.470
Here I'll create an empty selection of three tags join my array to this selection and then for each

40
00:02:50.470 --> 00:02:54.950
country append an H-3 with the country in next.

41
00:02:55.030 --> 00:02:57.030
Let's take a look at another request method.

42
00:02:57.170 --> 00:03:00.750
D-3 that's ESV like D-3 got Jaison.

43
00:03:00.760 --> 00:03:05.290
This method makes a request to a file and transforms it into valid javascript.

44
00:03:05.290 --> 00:03:08.550
The structure is very similar to D-3 that Jason as well.

45
00:03:08.590 --> 00:03:14.810
The first argument should be a path to the CSP file and the second should be a callback in our example.

46
00:03:14.920 --> 00:03:19.890
Let's make a request to RC ESV file with D-3 that see us v in the callback.

47
00:03:19.990 --> 00:03:25.180
Let's pass an error in data and then Consolo of data.

48
00:03:25.180 --> 00:03:26.450
Note the structure here.

49
00:03:26.560 --> 00:03:31.900
The reconverted each row in the C as v file into an object where the keys are determined by the first

50
00:03:31.900 --> 00:03:34.430
row of the CSP file.

51
00:03:34.430 --> 00:03:38.870
Notice that by default all values in these objects come in as strings.

52
00:03:38.870 --> 00:03:43.670
Unlike with Jason data there is no way for D-3 to detect whether a value should be a string or some

53
00:03:43.670 --> 00:03:44.480
other data type.

54
00:03:44.510 --> 00:03:51.020
When working with CSP if you want to modify the data before you use it you can pass in another callback

55
00:03:51.020 --> 00:03:56.220
to D-3 that CXXVI sometimes referred to as a formatter callback.

56
00:03:56.260 --> 00:04:01.510
If you pass in two callbacks the first one will be the formatter callback which will get run before

57
00:04:01.510 --> 00:04:04.270
your data gets passed into the second callback.

58
00:04:04.440 --> 00:04:09.490
The formatter callback iterates through all rows in the CSP and accepts three arguments.

59
00:04:09.490 --> 00:04:12.700
The first is the current row converted into an object.

60
00:04:12.820 --> 00:04:15.060
The second is the row index.

61
00:04:15.130 --> 00:04:17.490
The third is an array of the header row.

62
00:04:17.500 --> 00:04:20.610
In other words is an array of all the keys in each object.

63
00:04:21.590 --> 00:04:25.930
Know that you can also use this callback to remove arrows before working with the data.

64
00:04:26.000 --> 00:04:31.190
If your callback returns NULL or undefined D-3 will remove that row from the argument in the second

65
00:04:31.190 --> 00:04:32.930
callback.

66
00:04:32.930 --> 00:04:35.710
Let's use this pattern to format all of our data.

67
00:04:35.780 --> 00:04:40.260
I'll keep the city name and ISO to value which is just the country code.

68
00:04:40.280 --> 00:04:46.640
I'll also keep population but convert it to a number also or remove any cities that have a population

69
00:04:46.730 --> 00:04:49.230
less than 10000.

70
00:04:49.410 --> 00:04:54.640
If I cancel all of my data inside the second call in or refresh the page you can see that the row conversion

71
00:04:54.690 --> 00:04:56.220
filtering has worked.

72
00:04:56.280 --> 00:05:01.290
Each object only has three keys and no cities population is smaller than 10000.

73
00:05:03.800 --> 00:05:07.120
There are other eques methods besides Jaison and CSP.

74
00:05:07.430 --> 00:05:13.100
You can request text files DSV files HDI mail files and XOMA files.

75
00:05:13.100 --> 00:05:18.980
There's also a general D-3 that requests method but we won't go into details here.

76
00:05:18.980 --> 00:05:23.100
One thing that is important to talk about is how to change asynchronous requests together.

77
00:05:23.480 --> 00:05:28.580
Right now we can get data on our countries and data on our cities but we don't have access to both countries

78
00:05:28.640 --> 00:05:31.770
and cities inside of the same block of code.

79
00:05:31.930 --> 00:05:37.330
We could request RC S V data inside of the callback to our Jason requests but if you're making requests

80
00:05:37.330 --> 00:05:41.370
to lots of different files this quickly becomes a pain.

81
00:05:41.580 --> 00:05:46.590
Fortunately D3 also provides us with a method to queue asynchronous requests together.

82
00:05:46.590 --> 00:05:54.200
It's called D-3 docu this method creates a D-3 queue object which is used to manage asynchronous tasks.

83
00:05:54.330 --> 00:06:00.060
You can add requests to a queue by calling Dom defer on it into defer or you can pass the asynchronous

84
00:06:00.060 --> 00:06:00.800
function.

85
00:06:00.990 --> 00:06:05.690
If the function takes arguments you can pass them in as well after passing the function itself.

86
00:06:06.870 --> 00:06:11.250
Once you put all of your asynchronous function calls into the queue you can wait for all of them to

87
00:06:11.250 --> 00:06:13.140
result using one of two functions.

88
00:06:13.260 --> 00:06:18.750
Either a wait or a wait all the difference between these two functions is sort of similar to the difference

89
00:06:18.750 --> 00:06:20.900
between call and apply a wait.

90
00:06:20.910 --> 00:06:26.130
Makes the responses available to you as a comma separated list of arguments while away all gives you

91
00:06:26.130 --> 00:06:32.330
an array of responses for both functions the first argument will point to any errors.

92
00:06:32.340 --> 00:06:41.080
Let's use a Q to change our request together and show information on each city in each country.

93
00:06:41.100 --> 00:06:46.950
I'll make both requests and then when I have my data a first time my cities to their appropriate country

94
00:06:47.300 --> 00:06:53.070
by mapping over my countries and give each one a city's array of matched cities to countries based on

95
00:06:53.070 --> 00:06:54.470
the country code.

96
00:06:54.480 --> 00:06:57.730
This isn't the most efficient solution but it'll get the job done.

97
00:06:59.090 --> 00:07:04.190
Once I have my data I'll create a country selection which joint's data to devise and then opens new

98
00:07:04.190 --> 00:07:10.050
devs to the page for each element and the selection of append and H-3 with the country name as before

99
00:07:10.850 --> 00:07:17.450
but now I also append to UL whose interchange DML will be determined by the cities map over the cities

100
00:07:17.540 --> 00:07:22.910
and for each one I'll create a list item that displays the city name and the fraction of the country's

101
00:07:22.910 --> 00:07:24.960
population that lives in that city.

102
00:07:28.450 --> 00:07:29.220
Cool.

103
00:07:29.380 --> 00:07:33.110
This is a lot of information about population.

104
00:07:33.200 --> 00:07:39.140
If we wanted to use a wait all instead of wait it would be a pretty simple change my callback will only

105
00:07:39.140 --> 00:07:39.980
have two arguments.

106
00:07:39.980 --> 00:07:46.130
Now of course the second one all data all data it ends at zero corresponds to what I used to call countries

107
00:07:46.430 --> 00:07:50.020
and all data in X-1 corresponds to what I used to call cities.

108
00:07:50.960 --> 00:07:56.180
These methods should make managing a synchronous code with D-3 a little bit more straightforward.

109
00:07:56.200 --> 00:08:01.120
You're now ready to tackle the exercise for the section when you're ready for more practice.

110
00:08:01.120 --> 00:08:02.480
I'll meet you in the next video.
