WEBVTT
1
00:00:00.790 --> 00:00:04.400
Welcome back I hope you had fun working on this assignment.

2
00:00:04.690 --> 00:00:11.210
In this video a walk through my solution from scratch starter came with H2O mellons.

3
00:00:11.220 --> 00:00:17.740
SS So I'll leave those files alone I'll focus entirely on the javascript.

4
00:00:17.780 --> 00:00:22.220
The first thing I'll do is write a function that will calculate character frequencies for a given input

5
00:00:22.220 --> 00:00:23.640
string.

6
00:00:23.690 --> 00:00:29.210
I'd like this function to return an array of objects where each object stores the character and its

7
00:00:29.210 --> 00:00:31.370
count as values.

8
00:00:31.370 --> 00:00:36.420
For example if the input is Hello I'd like the output to be an array with four objects.

9
00:00:36.420 --> 00:00:39.410
That looks like this.

10
00:00:39.430 --> 00:00:44.680
The reason why I want this structure is that it will be convenient to pass this array into D-3 data

11
00:00:44.680 --> 00:00:51.840
method to join the array to elements implementing this function doesn't require any D-3 knowledge.

12
00:00:51.860 --> 00:00:57.020
It's pure javascript how you implement this depends on how you want to order the characters.

13
00:00:57.230 --> 00:01:02.300
I'd like them to appear alphabetically in my visualization so I'm going to split the string and sort

14
00:01:02.450 --> 00:01:04.220
the resulting array.

15
00:01:04.280 --> 00:01:09.560
Next I'll create an empty array to store my eventual output and write a for loop over my sorted array

16
00:01:09.800 --> 00:01:11.990
to build up my data array.

17
00:01:11.990 --> 00:01:15.750
You could also do this using a redos But let's keep things simple for now.

18
00:01:16.970 --> 00:01:22.520
Since my array is sorted I know that any repeating characters will appear at consecutive positions.

19
00:01:22.520 --> 00:01:26.450
This is helpful in figuring out the counts of each character first.

20
00:01:26.490 --> 00:01:32.390
I'll grab the last element in the array if there is a last element and if that elements character property

21
00:01:32.570 --> 00:01:37.700
matches the current character then I know I found a character that I've already seen before and I can

22
00:01:37.700 --> 00:01:43.190
increment the count if I'm just starting out or if I'm seeing a new character then I can push a new

23
00:01:43.190 --> 00:01:49.150
object into my array whose character property is the current character and whose count is one.

24
00:01:49.240 --> 00:01:53.900
I'll never push two objects with the same character property into the array because I'm looping over

25
00:01:53.900 --> 00:01:58.990
a sorted array so any duplicates will be caught by this condition condition.

26
00:01:59.000 --> 00:02:01.270
Let's try this out with the string hello world

27
00:02:05.180 --> 00:02:05.510
call.

28
00:02:05.510 --> 00:02:08.100
This looks like it's working OK.

29
00:02:08.210 --> 00:02:10.170
Let's get into the D-3.

30
00:02:10.280 --> 00:02:12.200
I'll start with the form submission.

31
00:02:12.200 --> 00:02:17.110
I'll need to use D-3 to listen for submit events on the form inside the callback.

32
00:02:17.330 --> 00:02:22.870
First call prevent default on the event object which I have access to the A D-3 event.

33
00:02:23.060 --> 00:02:29.960
Next I'll store the input as a D-3 selection and I'll grab its value using D-3 property method.

34
00:02:30.110 --> 00:02:33.990
At this point there are a few things I need to do first.

35
00:02:34.000 --> 00:02:39.140
I'll need to create an Enter selection and append some divs to the page so that I can see the frequencies

36
00:02:39.140 --> 00:02:40.820
for each character.

37
00:02:40.820 --> 00:02:44.190
I'll also need to update the text inside of the phrase div.

38
00:02:44.270 --> 00:02:45.930
I'll leave the count div alone for now.

39
00:02:47.400 --> 00:02:53.110
To draw this visualisation D3 let me select the letters container then select all elements inside of

40
00:02:53.110 --> 00:02:54.990
it with a class of letter.

41
00:02:55.000 --> 00:03:00.310
This will give me an empty selection that I can then join data to inside the data method.

42
00:03:00.320 --> 00:03:04.950
I'll use our get frequency's function and passing the text from the form.

43
00:03:05.140 --> 00:03:11.610
Then I'll hop into the enter selection appended div for each piece of data and add a class of letter.

44
00:03:11.620 --> 00:03:14.060
I'll also add some of my own styles.

45
00:03:14.090 --> 00:03:21.200
I'll fix the width and line height of 20 pixels and give each div some margin on the right will also

46
00:03:21.200 --> 00:03:22.970
set the height based on the data.

47
00:03:23.180 --> 00:03:25.580
Each time a given character appears in the string.

48
00:03:25.580 --> 00:03:28.120
I'll add another 20 pixels of height.

49
00:03:28.160 --> 00:03:34.600
I'll also set the entire text so that we can see the character finally for the div with an idea of phrase.

50
00:03:34.630 --> 00:03:38.840
I'll set the inner text above based on the text from the form.

51
00:03:38.900 --> 00:03:40.170
Let's see how this looks.

52
00:03:43.780 --> 00:03:45.250
Not bad.

53
00:03:45.250 --> 00:03:48.050
One thing I didn't do is clear out the input so let's do that

54
00:03:53.060 --> 00:03:58.250
our form works the first time we submit it but not on subsequent tries to get the form working for multiple

55
00:03:58.250 --> 00:03:59.280
submissions.

56
00:03:59.300 --> 00:04:03.730
We'll need to use the general update pattern to get this working.

57
00:04:03.730 --> 00:04:08.650
Let me first store the update selection in a variable for the update selection.

58
00:04:08.670 --> 00:04:14.340
I want to make sure no element has a class of new since elements in the update selection already exist

59
00:04:14.340 --> 00:04:15.800
on the page.

60
00:04:15.930 --> 00:04:22.560
So I'll use the class method to remove the new class and then I'll hop into the exit selection and remove

61
00:04:22.590 --> 00:04:26.550
any divs that don't need to be there next.

62
00:04:26.590 --> 00:04:29.040
I'll move to the enter selection.

63
00:04:29.240 --> 00:04:34.100
In addition to adding a class of letter I also want to add a class of new to the new elements so that

64
00:04:34.100 --> 00:04:36.860
their inner tax is styled a bit differently.

65
00:04:36.860 --> 00:04:41.630
The rest of the style changes I can move to the merged enter and update selection since they should

66
00:04:41.630 --> 00:04:43.880
apply to both.

67
00:04:43.910 --> 00:04:48.630
Let me also use this opportunity to update the count does when the form is submitted.

68
00:04:48.650 --> 00:04:55.170
The number of new letters will be equal to the number of nodes in the enter selection.

69
00:04:55.510 --> 00:04:56.960
Let's try this out.

70
00:04:57.070 --> 00:04:59.230
The first submission looks good.

71
00:04:59.230 --> 00:05:02.100
Now for the second.

72
00:05:02.310 --> 00:05:03.930
This isn't quite right.

73
00:05:03.930 --> 00:05:11.710
This is saying that there is only one new letter by G and I am and T didn't appear in our previous message.

74
00:05:11.820 --> 00:05:16.430
So what's the the problem lies in how we join data.

75
00:05:16.430 --> 00:05:18.070
We didn't pass in a key function.

76
00:05:18.110 --> 00:05:24.300
So by default D-3 joined by index our second phrase has one more unique character than the first.

77
00:05:24.380 --> 00:05:31.020
So D-3 thinks there's only one new character we can fix this by joining based on the character rather

78
00:05:31.020 --> 00:05:31.880
than the index

79
00:05:34.480 --> 00:05:35.780
let's try this again.

80
00:05:36.130 --> 00:05:40.950
Here's the first phrase here's the second call.

81
00:05:41.080 --> 00:05:46.250
Now the visualization correctly states that there are five new letters in our second phrase.

82
00:05:47.480 --> 00:05:52.070
Let's finish things up by tackling the reset button compared to the form submission.

83
00:05:52.070 --> 00:05:54.050
This is much more straightforward.

84
00:05:54.110 --> 00:05:57.680
I'll target the button and listen for clicks inside of a callback.

85
00:05:57.680 --> 00:06:03.080
I just need to select anything with a class of letter remove that selection and then clear out the text

86
00:06:03.080 --> 00:06:05.010
inside of the phrase and count divs.

87
00:06:06.310 --> 00:06:09.480
Let's make sure this works.

88
00:06:09.670 --> 00:06:14.080
Here's one Grace here's another.

89
00:06:14.280 --> 00:06:17.110
And now when I reset everything goes away.

90
00:06:18.220 --> 00:06:19.130
Great.

91
00:06:19.510 --> 00:06:21.900
I hope this is helpful when you're ready.

92
00:06:22.030 --> 00:06:24.340
I'll meet you in the next section on SVGA.
