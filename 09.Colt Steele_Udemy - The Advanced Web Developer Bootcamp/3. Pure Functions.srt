1
00:00:03,300 --> 00:00:09,420
Talk about pure functions pure functions or functional programming concept that's pretty important to

2
00:00:09,420 --> 00:00:18,360
understand for re-act Our objective will be just to define a pure function so pure function is a function

3
00:00:18,360 --> 00:00:25,640
without side effects meaning it does not modify its inputs and it does not modify any global state one

4
00:00:25,650 --> 00:00:32,790
test to see if a function is pure or not is to ask is it repeatable given the same inputs.

5
00:00:32,790 --> 00:00:35,080
Do I always get the same outputs.

6
00:00:35,310 --> 00:00:41,140
And that's not always true of the function modifies its inputs or modifies global state.

7
00:00:42,180 --> 00:00:44,690
Here's an example of a function that's not pure.

8
00:00:45,030 --> 00:00:49,380
So this function takes in an array and doubles every element in the array.

9
00:00:49,770 --> 00:00:55,990
But this violates one of the tenets of pure functions which is you can't modify the inputs.

10
00:00:56,010 --> 00:01:01,410
If I were to run this function multiple times with the same input array the result of this function

11
00:01:01,410 --> 00:01:03,570
would keep changing my array.

12
00:01:03,840 --> 00:01:10,190
So the one test for pure functions to say is it repeatable fails in this case.

13
00:01:12,520 --> 00:01:17,090
This is an example of how to refactor that code to make it appear function.

14
00:01:17,230 --> 00:01:22,210
So rather than modify the inputs in this case we're using a radar map.

15
00:01:22,210 --> 00:01:25,080
Remember a radar map returns a new array.

16
00:01:25,150 --> 00:01:27,740
So our input is never altered.

17
00:01:27,850 --> 00:01:32,650
And if you run this function again and again and again with the same input array you'll always get the

18
00:01:32,650 --> 00:01:37,160
same output array.

19
00:01:37,160 --> 00:01:43,080
Here's another example of a function is not pure in this case we're modifying global state.

20
00:01:43,340 --> 00:01:49,830
So this add job function will add a property called job to the person object.

21
00:01:49,880 --> 00:01:52,710
So this is a classic example of causing a side effect.

22
00:01:52,760 --> 00:02:00,330
How can we refactor this so that it is pure will in this case we're taking that person object as a parameter.

23
00:02:00,490 --> 00:02:06,420
Since that data is involved in what we're doing in the function it should be a parameter to our function.

24
00:02:06,430 --> 00:02:09,400
Also we're not modifying that person object directly.

25
00:02:09,400 --> 00:02:15,370
Instead we're using objects that assign to create a new object which is the combination of the original

26
00:02:15,370 --> 00:02:19,500
object and our new value that we want to add job.

27
00:02:20,110 --> 00:02:24,200
Here's another way to write that same function also as a pure function.

28
00:02:24,550 --> 00:02:27,550
But this time we'll use the object spread operator.

29
00:02:27,790 --> 00:02:34,210
So the spread operator takes all the keys and the values from that object and puts it in this new object

30
00:02:34,210 --> 00:02:36,630
that we're we're creating.

31
00:02:36,910 --> 00:02:44,800
And any any key to the right of that spread operator overwrites any key that may have been an object

32
00:02:44,860 --> 00:02:46,000
on the left.

33
00:02:46,000 --> 00:02:51,220
So if Person object in this case had a key called Job Job would be overwritten.

34
00:02:51,550 --> 00:02:55,890
And if it didn't have a key called job then we would also have the new job.

35
00:02:56,020 --> 00:03:01,070
Now that we've added to this new object also notice that we're using the shorthand here.

36
00:03:01,090 --> 00:03:07,270
So this is the same as saying job Colan job because we have a key called job and we also have a variable

37
00:03:07,270 --> 00:03:12,280
called job well that's all well and good but what does this have to do with react.

38
00:03:12,280 --> 00:03:16,200
And the point of this video is that changes to state should be pure.

39
00:03:16,300 --> 00:03:18,660
You should never modify that state directly.

40
00:03:18,820 --> 00:03:24,490
You should always use this said state and you should always give it a new objects for your state.

41
00:03:24,490 --> 00:03:28,160
You should never change the object in this state.

42
00:03:28,510 --> 00:03:30,490
Of course that's easier said than done.

43
00:03:30,490 --> 00:03:36,550
So up next we'll have an exercise to solidify this concept where we have to update some state that's

44
00:03:36,550 --> 00:03:39,040
a little bit more complex than the last example that we saw.
