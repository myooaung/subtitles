WEBVTT
1
00:00:00.420 --> 00:00:00.760
All right.

2
00:00:00.780 --> 00:00:05.820
So in this video we're going to install Express and make our first simple express server that we're

3
00:00:05.820 --> 00:00:09.090
then going to add the API to in future videos.

4
00:00:09.480 --> 00:00:12.420
So before that we're actually going to delete everything here.

5
00:00:12.450 --> 00:00:20.440
I think the easiest way is just to shift click and then right click and where's that delete.

6
00:00:20.850 --> 00:00:23.720
And we want to do yes to all we're going to delete everything.

7
00:00:23.790 --> 00:00:25.360
So it should be totally empty.

8
00:00:25.380 --> 00:00:26.550
Perfect.

9
00:00:26.580 --> 00:00:30.940
And let's see if I can make that a bit larger.

10
00:00:30.940 --> 00:00:31.900
That looks good.

11
00:00:32.280 --> 00:00:36.100
And we're going to start off by creating a new node project.

12
00:00:36.120 --> 00:00:38.090
So I'm going to make a folder first.

13
00:00:38.130 --> 00:00:40.920
You could go up here right click go down to New Folder.

14
00:00:41.010 --> 00:00:48.240
But I'm just going to go here and I'm going to call it to deuse API you know CD into that and then I'm

15
00:00:48.240 --> 00:00:55.240
going to initialize a node application using NPM in it and it's going to ask me a couple of questions.

16
00:00:55.240 --> 00:01:01.740
My package name is going to be to use API that's fine version description or entry point which is basically

17
00:01:01.830 --> 00:01:03.780
the entry point to our application.

18
00:01:03.780 --> 00:01:07.940
I'll leave it as the default index Jarius basically just hit enter a couple of times.

19
00:01:09.550 --> 00:01:10.840
And yet that's fine.

20
00:01:11.020 --> 00:01:16.210
It's probably best practice to fill out things like her author's name and a bunch of other things.

21
00:01:16.240 --> 00:01:18.220
It doesn't really matter for this purpose.

22
00:01:18.460 --> 00:01:23.390
So we'll hit enter and you should see in that folder we now have a package that Jason.

23
00:01:23.620 --> 00:01:27.070
So this just contains data about our application.

24
00:01:27.310 --> 00:01:33.490
And as we install things like Express which are due in two seconds you'll see that it shows up here

25
00:01:33.730 --> 00:01:39.420
so that other people know if they're downloading our code that they need to go then fetch Express and

26
00:01:39.420 --> 00:01:40.890
NPM makes it super easy.

27
00:01:40.900 --> 00:01:42.700
You can do it in a single line.

28
00:01:42.700 --> 00:01:47.890
So what we're going to do now is install Express which if you're not familiar it's a node web development

29
00:01:47.890 --> 00:01:50.890
framework helps you get servers up and running super fast.

30
00:01:50.950 --> 00:01:57.460
The nice clean syntax so that's going to be NPM install and we're going to add dash dash save which

31
00:01:57.460 --> 00:01:59.510
will save a reference to it in our package.

32
00:01:59.530 --> 00:02:00.240
Jason.

33
00:02:00.430 --> 00:02:06.090
And then the name which is expressed That's a package we want should take a moment.

34
00:02:06.670 --> 00:02:11.380
Once it finishes which I'll fast forward through we should now see under dependencies and or package

35
00:02:11.390 --> 00:02:19.110
Jasen Express version and then also note modules folder which contains all this express content and

36
00:02:19.120 --> 00:02:24.550
does everything Express installed for us ton of stuff and all of its own dependencies.

37
00:02:24.580 --> 00:02:31.200
OK so the next thing we'll do close out of there so close that is make our index J.S..

38
00:02:31.240 --> 00:02:35.980
So we're going to do touch indexed that jackassery you could right click and do that and said this to

39
00:02:35.980 --> 00:02:37.120
use API.

40
00:02:37.450 --> 00:02:41.400
This is going to be our main file where our server starts.

41
00:02:41.630 --> 00:02:47.350
So I'm going to open that up and I'm going to just do the very basic code that we need to create the

42
00:02:47.350 --> 00:02:50.300
simplest express app with one single home route.

43
00:02:50.410 --> 00:02:56.530
Just slash the route and it's just going to respond with a happy face or hello world.

44
00:02:56.530 --> 00:03:00.520
So first we need to require express of our express.

45
00:03:00.580 --> 00:03:07.190
This is kind of the standard way to require Express and I'll change together.

46
00:03:07.260 --> 00:03:08.880
Or an x variable declaration.

47
00:03:08.890 --> 00:03:16.030
We're actually going to execute the contents of express function and save it to the app variable so

48
00:03:16.030 --> 00:03:17.550
that we can then reference app.

49
00:03:17.590 --> 00:03:23.410
This is how Express works we'll do things like listen to start the server act get to define a route.

50
00:03:24.040 --> 00:03:25.530
And that should be good for now.

51
00:03:25.560 --> 00:03:26.810
Leave it as that.

52
00:03:27.190 --> 00:03:33.340
Then down here the very bottom I'm going to start our server with an app listen and then we need to

53
00:03:33.340 --> 00:03:41.020
provide a port and the port is actually not going to be hardcoded in when we're using Cloud 9 instead

54
00:03:41.020 --> 00:03:42.040
of process.

55
00:03:42.080 --> 00:03:42.930
Ian v.

56
00:03:43.070 --> 00:03:49.330
There's a port variable so this contains the exact port variable that we're going to serve our content

57
00:03:49.360 --> 00:03:50.020
on.

58
00:03:50.230 --> 00:03:54.490
If you're not working on cloud nine you might just want to make it three thousand.

59
00:03:54.520 --> 00:04:01.630
It's a standard sort of local host port and then we'll add a callback function afterwards that just

60
00:04:01.630 --> 00:04:03.740
cancels out logs.

61
00:04:03.880 --> 00:04:15.290
App is running on ports and then all does plus process and the port just like that.

62
00:04:15.580 --> 00:04:18.570
And that should be all we need to actually start our node.

63
00:04:18.670 --> 00:04:20.070
Assuming you don't have a typo.

64
00:04:20.220 --> 00:04:24.520
So let's do node index that jast to start our server.

65
00:04:24.880 --> 00:04:27.790
And it says her app is running on port 80 80.

66
00:04:27.790 --> 00:04:31.030
The only thing is there's nothing to our app right now.

67
00:04:31.030 --> 00:04:34.580
It's just a server that's listening but we're not handling any requests.

68
00:04:34.580 --> 00:04:37.380
We won't see anything we're not responding with anything.

69
00:04:37.540 --> 00:04:45.100
So let's add in our simple simple route which is going to be app get slash So when you send a get request

70
00:04:45.100 --> 00:04:48.610
to our just route route what do we want to happen.

71
00:04:48.660 --> 00:04:50.430
We'll add a call back in.

72
00:04:50.550 --> 00:04:57.000
This is the standard syntax request and response and we'll work with the response object.

73
00:04:57.020 --> 00:05:00.790
We're going to raise that send some text.

74
00:05:00.800 --> 00:05:06.610
And let's just say they're from Express just like that.

75
00:05:06.970 --> 00:05:14.720
So if you request localhost 80 80 which is our port slash nothing we should respond with.

76
00:05:14.770 --> 00:05:15.760
Hi there from Express.

77
00:05:15.760 --> 00:05:17.060
And we should get to go.

78
00:05:17.560 --> 00:05:18.680
Let's see if we get that.

79
00:05:18.760 --> 00:05:24.310
We will need to restart our server and then we need to go can either go to preview again preview running

80
00:05:24.310 --> 00:05:26.160
application or if you have it open already.

81
00:05:26.320 --> 00:05:29.620
Refresh the page and we get high there from Express.

82
00:05:29.620 --> 00:05:35.920
But if we go to slash anything else we get an error because we haven't defined any code for those routes

83
00:05:36.700 --> 00:05:37.890
so that's pretty much all we'll do.

84
00:05:37.900 --> 00:05:44.160
In this case would just show you if your new Express could add in another route say slash Hello.

85
00:05:44.230 --> 00:05:46.530
This one says actually Helo's kind of obvious.

86
00:05:46.530 --> 00:05:52.940
How about slash happy and we'll just respond with a happy face.

87
00:05:53.260 --> 00:05:55.960
Restart our server.

88
00:05:55.960 --> 00:05:56.560
Here we go.

89
00:05:56.560 --> 00:06:00.460
Nothing changes but if you go to slash happy we get a happy face.

90
00:06:00.460 --> 00:06:02.970
Anything else is a problem.

91
00:06:03.130 --> 00:06:04.590
So we'll leave it at that.

92
00:06:04.600 --> 00:06:07.820
We have our most basic possible express app up and running.

93
00:06:07.840 --> 00:06:09.070
We require Express.

94
00:06:09.160 --> 00:06:15.190
We execute it to a variable that we can then use later on like we did here here and here.

95
00:06:15.550 --> 00:06:20.980
We find two routes which were going to delete the next video and then we also started up the server

96
00:06:21.130 --> 00:06:27.130
using the process that in outport variable that cloud 9 provides for us and if we wanted to we actually

97
00:06:27.130 --> 00:06:33.130
could clean this up a bit and defined a new variable up here called Port Said it equaled a process in

98
00:06:33.130 --> 00:06:36.100
the port or 3000.

99
00:06:36.100 --> 00:06:42.160
So if you're running this code on your own machine locally and you don't have this defined it will default

100
00:06:42.220 --> 00:06:49.180
to 3000 and then down here we'll just replace that with port and everything should work exactly the

101
00:06:49.180 --> 00:06:50.150
same.

102
00:06:52.980 --> 00:06:53.760
Perfect.

103
00:06:53.760 --> 00:06:54.210
All right.

104
00:06:54.240 --> 00:06:59.640
Moving on we're going to now talk about defining our routes getting Mongo installed working with our

105
00:06:59.640 --> 00:07:00.210
database.
