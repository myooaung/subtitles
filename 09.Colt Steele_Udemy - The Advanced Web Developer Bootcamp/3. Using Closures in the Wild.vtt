WEBVTT
1
00:00:01.000 --> 00:00:01.710
Welcome back.

2
00:00:01.840 --> 00:00:06.750
In this video we're going to talk about some use cases for closure before we start looking at some use

3
00:00:06.760 --> 00:00:07.360
cases.

4
00:00:07.360 --> 00:00:10.540
Let's quickly go back and redefine what closure is.

5
00:00:10.570 --> 00:00:16.420
We said the closure exists when an inner function makes use of variables defined in an outer function

6
00:00:16.620 --> 00:00:17.780
that has returned.

7
00:00:18.130 --> 00:00:23.530
We also saw that if the inner function does not use those outer variables it does not have access to

8
00:00:23.530 --> 00:00:24.170
that.

9
00:00:24.610 --> 00:00:26.700
So one might want to use closure.

10
00:00:26.740 --> 00:00:31.870
What are the most common use cases of closure is to create the concept of a private variable the private

11
00:00:31.870 --> 00:00:37.720
variable is a variable that can only be accessed in a certain scope and not modified from an external

12
00:00:37.720 --> 00:00:38.560
scope.

13
00:00:38.560 --> 00:00:40.340
Let's see what we mean by that.

14
00:00:40.390 --> 00:00:44.950
Let's create a function called counter and inside of this function we're going to create a variable

15
00:00:44.950 --> 00:00:49.060
called Count and assign it to the values zero on the next line.

16
00:00:49.060 --> 00:00:55.210
We're going to return a function inside of that called Inner and inside of the inner function or increment

17
00:00:55.210 --> 00:01:00.390
the count by 1 Using count plus plus and then return the count variable.

18
00:01:00.400 --> 00:01:05.620
Notice here that we're making use of closure because the count variable is defined in the counter function

19
00:01:05.950 --> 00:01:09.790
which has returned by the time the inner function makes use of it.

20
00:01:09.790 --> 00:01:15.560
Now let's create a variable called counter 1 and assign it to be the result of the counter function.

21
00:01:15.640 --> 00:01:21.280
If we take a look at the counter one variable we will see it is a function definition so let's invoke

22
00:01:21.280 --> 00:01:22.200
counter 1.

23
00:01:22.240 --> 00:01:26.290
Now we should get back the number one since our counter has gone up by 1.

24
00:01:26.320 --> 00:01:29.170
Let's do it again and we should get two back.

25
00:01:29.170 --> 00:01:33.760
Now what happens if we make another variable called counter 2 and assign it to the counter function

26
00:01:33.760 --> 00:01:38.580
being invoked let's invoke our counter to function and we get one back.

27
00:01:38.750 --> 00:01:44.440
Our counter to variable does not modify our counter one variable since each of these functions has its

28
00:01:44.500 --> 00:01:50.440
own private count variable and if we try to access the count variable from the scope that we're in we

29
00:01:50.440 --> 00:01:56.560
will get a reference for what we've done here is use closure to create the concept of a private variable.

30
00:01:56.560 --> 00:02:00.420
Try this out in the Crome Council and see what values you get back.

31
00:02:00.420 --> 00:02:06.420
Now let's take a look at another example of how we can use closure by returning functions in an object.

32
00:02:06.640 --> 00:02:11.940
Let's make a function called classroom and inside create a variable called instructors which will be

33
00:02:11.940 --> 00:02:18.310
an array of two strings L.E. and code will then return an object with a method called Get instructors

34
00:02:18.490 --> 00:02:23.500
which will return the instructor's array and a method called an instructor which accepts a parameter

35
00:02:23.770 --> 00:02:30.000
and adds that parameter to the instructors array will then return the array of instructress.

36
00:02:30.000 --> 00:02:34.380
Now let's create a variable called Course 1 and invoke the classroom function.

37
00:02:34.380 --> 00:02:37.430
If we look at course one will see an object with two methods.

38
00:02:37.510 --> 00:02:39.810
Get instructors and an instructor.

39
00:02:39.810 --> 00:02:43.710
If we invoke get instructors we will see an array with Ali and code.

40
00:02:43.710 --> 00:02:48.300
Now let's add net using add instructor and we'll see if we get back to the array of instructors.

41
00:02:48.300 --> 00:02:54.420
Let's also add Tim we're using a variable called instructors inside of the Get instructors and an instructor

42
00:02:54.420 --> 00:03:00.360
function at that variable is defined in the classroom function which returned a long time ago.

43
00:03:00.360 --> 00:03:05.460
So how did the get instructors and an instructor function still have access to this variable.

44
00:03:05.460 --> 00:03:07.800
The answer is through closure.

45
00:03:07.800 --> 00:03:12.530
Let's make another Archibold called course to and assign it to the classroom function being invoked.

46
00:03:12.780 --> 00:03:17.550
We'll see that even if we try to add an instructors of course to it will not change the instructors

47
00:03:17.550 --> 00:03:18.480
in course one.

48
00:03:18.780 --> 00:03:20.560
So it looks like you're stuck with us.

49
00:03:20.650 --> 00:03:23.760
You know there's actually a small gotcha with this code that we have.

50
00:03:23.760 --> 00:03:26.940
There is a way to directly manipulate the instructors variable.

51
00:03:27.150 --> 00:03:32.430
Maybe you spotted this but if we were to directly remove a value from the output of get instructors

52
00:03:32.760 --> 00:03:35.550
we could actually modify the instructors array.

53
00:03:35.550 --> 00:03:38.950
What I'll do here is pop from the result of get instructors.

54
00:03:39.060 --> 00:03:44.060
And if I call get instructors again will see that I have actually removed values from the array.

55
00:03:44.160 --> 00:03:45.610
So how can we prevent this.

56
00:03:45.750 --> 00:03:50.100
When you start learning about functional programming and working with libraries like react and redux

57
00:03:50.420 --> 00:03:55.440
you'll be introduced to a concept called immutability which means that you cannot change the value of

58
00:03:55.440 --> 00:04:01.920
something to create that idea or return a copy of the instructor's array and not the actual array that

59
00:04:01.920 --> 00:04:06.580
someone could accidentally or even intentionally manipulate in order to do that.

60
00:04:06.600 --> 00:04:12.210
We will invoke the slice method on our output so that we return a copy of the instructor's array which

61
00:04:12.210 --> 00:04:16.260
will stop someone from externally modifying our instr. variable.

62
00:04:16.290 --> 00:04:22.380
Now this variable is completely private in the next video we'll recap what we've learned and then practice

63
00:04:22.380 --> 00:04:24.230
with some closures exercises.

64
00:04:24.240 --> 00:04:24.730
Ze'ev they're.
