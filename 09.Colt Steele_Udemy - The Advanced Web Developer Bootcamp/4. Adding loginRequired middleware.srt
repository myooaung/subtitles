1
00:00:00,690 --> 00:00:05,940
So be last left off with a bit of an issue where we could simply create messages for any kind of specific

2
00:00:05,940 --> 00:00:06,570
user.

3
00:00:06,570 --> 00:00:10,140
And in fact you didn't even need to be logged in to create a message.

4
00:00:10,140 --> 00:00:15,790
So what we need to start introducing is some ways of intercepting the request to make sure first that

5
00:00:15,840 --> 00:00:20,630
a user is logged in and that they are the correct user to do that.

6
00:00:20,640 --> 00:00:22,580
We're going to have to write a little bit of middleware.

7
00:00:22,650 --> 00:00:24,490
And that's what we're going to put inside of here.

8
00:00:24,780 --> 00:00:32,430
So I'm going to add a file called off us inside of my middleware and here I'm going to bring in any

9
00:00:32,430 --> 00:00:35,520
environment variables that I need I'll use require

10
00:00:38,650 --> 00:00:45,270
that you and the load to bring in any of those I may still be able to get away with this dot in the

11
00:00:45,430 --> 00:00:46,070
config.

12
00:00:46,090 --> 00:00:49,440
But I want to be super sure that the load in those at the correct time.

13
00:00:49,570 --> 00:00:56,120
I'm also going to bring in my Giese on web tokin module and that's because we're going to need to decode

14
00:00:56,120 --> 00:00:58,090
the tokens that are passed.

15
00:00:58,110 --> 00:01:00,100
So we're going to pass in Jason.

16
00:01:00,190 --> 00:01:00,690
OK.

17
00:01:01,060 --> 00:01:02,660
So we need two functions right here.

18
00:01:02,680 --> 00:01:12,700
We need one to make sure the user is logged in another to make sure we get the correct user.

19
00:01:12,700 --> 00:01:19,750
This is the idea of authorization and this right here is the idea of authentication are your credentials

20
00:01:19,750 --> 00:01:20,800
correct.

21
00:01:20,830 --> 00:01:22,710
Have you actually been logged in before.

22
00:01:22,720 --> 00:01:23,920
If so great.

23
00:01:23,920 --> 00:01:26,300
Now are you actually allowed to do this.

24
00:01:26,350 --> 00:01:35,230
So we are going to export two functions log in required and that's going to be a function with wreck.

25
00:01:35,260 --> 00:01:36,020
RAZ And next.

26
00:01:36,010 --> 00:01:40,120
This is actually going to be one of the only easting functions that we don't make and that is because

27
00:01:40,120 --> 00:01:43,400
the GWG module still uses a callback pattern.

28
00:01:43,420 --> 00:01:48,280
So we're going to use callback functions just because we have a promise of five this library yet.

29
00:01:48,370 --> 00:01:50,970
So let's start with our log in required function.

30
00:01:50,990 --> 00:01:57,550
What we're going to do is first try to get the token from in each TDP Hetter and then each VDB is really

31
00:01:57,550 --> 00:02:01,450
just some metadata or higher level information about that request.

32
00:02:01,600 --> 00:02:05,920
So we get that from rect-Al headers and the name of the header that we're going to use is one called

33
00:02:05,960 --> 00:02:07,140
authorization.

34
00:02:07,420 --> 00:02:12,160
And the way that this Hetter usually comes in is something first called the realm which is kind of the

35
00:02:12,160 --> 00:02:16,250
way that we're doing the authentication that we're that we're going to use by convention is the word

36
00:02:16,270 --> 00:02:20,400
barer followed by a space and then the entire token.

37
00:02:20,410 --> 00:02:26,010
So in order to get whatever is after that space we are going to split this strength.

38
00:02:26,230 --> 00:02:30,380
We're going to split it by a space and we're going to get whatever is at index 1.

39
00:02:30,400 --> 00:02:33,630
The problem is if correct I header's that authorization is undefined.

40
00:02:33,640 --> 00:02:37,540
Maybe someone just tried to access something and didn't put in that header.

41
00:02:37,570 --> 00:02:39,280
This would come up as undefined.

42
00:02:39,530 --> 00:02:43,640
And if we called undefined data split javascript would give us the Tiber.

43
00:02:43,840 --> 00:02:48,520
So even though this is non-racing function we're still going to use a try catch to handle that potential

44
00:02:48,520 --> 00:02:49,900
situation.

45
00:02:49,910 --> 00:02:53,470
Always make sure we have that parameter inside catch that looks good.

46
00:02:53,470 --> 00:02:55,100
Now what do we want to do inside of here.

47
00:02:55,240 --> 00:02:57,350
We want to decode that token.

48
00:02:57,520 --> 00:02:59,950
We're going to do that using JWT to verify.

49
00:03:00,010 --> 00:03:02,840
And the first parameter is going to be the token.

50
00:03:02,950 --> 00:03:05,860
The second parameter is going to be our secret key.

51
00:03:05,890 --> 00:03:11,260
This is what we're going to use to try to successfully decode that token and when we're done we're going

52
00:03:11,260 --> 00:03:12,780
to run a function.

53
00:03:12,790 --> 00:03:14,220
We potentially could get some error.

54
00:03:14,230 --> 00:03:19,160
The second thing that we're going to get back is the actual payload that we're going to call decoded.

55
00:03:19,180 --> 00:03:21,280
You can call that payload as well if you want.

56
00:03:21,610 --> 00:03:24,130
And right now I don't really care about what's in the payload.

57
00:03:24,130 --> 00:03:27,930
All I want to know is if it exists if there is a payload.

58
00:03:27,930 --> 00:03:32,680
If we have successfully decoded this token Well then we're don't return next.

59
00:03:32,680 --> 00:03:33,560
You're logged in.

60
00:03:33,610 --> 00:03:37,780
Move on to the next piece of middleware that might be making sure you have the correct user or validating

61
00:03:37,780 --> 00:03:41,560
something else or just letting you go on to whatever handler that we have.

62
00:03:41,950 --> 00:03:43,820
Otherwise something went wrong.

63
00:03:43,960 --> 00:03:45,050
Well what went wrong.

64
00:03:45,160 --> 00:03:46,820
The tokin could not be decoded.

65
00:03:46,900 --> 00:03:52,060
It means that either you tried to tamper with the token or you just haven't put in something correct.

66
00:03:52,240 --> 00:03:54,180
So we'll say status of 401.

67
00:03:54,220 --> 00:03:59,190
That is unauthorized and we'll add a message of Please log in first.

68
00:03:59,200 --> 00:04:00,160
This is pretty generic.

69
00:04:00,160 --> 00:04:03,140
Someone could have potentially tampered with the token or tried to mess up something.

70
00:04:03,280 --> 00:04:06,910
So instead of telling them something like I see that you're trying to hack my web site we're just going

71
00:04:06,910 --> 00:04:08,360
to say Please log in first.

72
00:04:08,380 --> 00:04:12,430
Better to be generic with this kind of stuff than give anybody any kind of hint or indication.

73
00:04:12,700 --> 00:04:17,620
And if there is an issue with this or not being passed in or not being interpreted correctly we're going

74
00:04:17,620 --> 00:04:18,950
to return next as well.

75
00:04:19,210 --> 00:04:24,670
But that same message is simply just so that they don't make any typos going to grab what's inside of

76
00:04:24,670 --> 00:04:29,110
this object as well.

77
00:04:29,170 --> 00:04:31,080
So once again how does this function work.

78
00:04:31,220 --> 00:04:33,630
Well we're going to add it as a piece of middleware.

79
00:04:33,640 --> 00:04:38,710
It's going to go in between the request and our handler to create a message.

80
00:04:38,710 --> 00:04:41,620
That way if you're not logged in you can't create a message.

81
00:04:41,770 --> 00:04:45,930
We're going to try playing around with this in a little bit before we do that though.

82
00:04:46,120 --> 00:04:50,860
It's nice that you're logged in to create a message but it still doesn't solve our problem of creating

83
00:04:50,860 --> 00:04:52,780
a message for someone else.

84
00:04:53,050 --> 00:04:57,430
So what we want to do is make sure that we authorize those users as well.

85
00:04:57,640 --> 00:05:01,900
And the next screen cast will write a function called the correct user that performs this authorization.
