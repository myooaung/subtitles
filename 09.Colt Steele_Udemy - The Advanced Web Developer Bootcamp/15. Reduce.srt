1
00:00:00,450 --> 00:00:01,440
Welcome back.

2
00:00:01,440 --> 00:00:04,660
In this video we're going to look at one last array method.

3
00:00:04,740 --> 00:00:10,470
Reduce reuse can seem a bit confusing at first but we'll break it down step by step to make sure you

4
00:00:10,470 --> 00:00:11,980
really understand it.

5
00:00:12,000 --> 00:00:16,840
The idea behind produce is that we can take an array and turn it into another data structure.

6
00:00:16,940 --> 00:00:21,590
It could be a string a number an object an array of arrays and much more.

7
00:00:21,840 --> 00:00:27,180
The way the reduce works is that it accepts a callback function and an optional second parameter would

8
00:00:27,250 --> 00:00:31,390
use iterates through an array and runs a callback function on each value.

9
00:00:31,500 --> 00:00:37,440
The first parameter to the callback is either the first value in the array or the optional second parameter

10
00:00:37,530 --> 00:00:43,720
that reduce accepts this first parameter to the callback is commonly called the accumulator.

11
00:00:43,760 --> 00:00:49,190
Finally the return value from the callback becomes the new value of the accumulator.

12
00:00:49,190 --> 00:00:53,870
The most important thing to understand about Reduce is that whatever you return from the callback function

13
00:00:54,200 --> 00:00:57,350
becomes the new value of the accumulator.

14
00:00:57,350 --> 00:00:58,390
That's a lot to take in.

15
00:00:58,400 --> 00:01:00,130
So let's diagram this.

16
00:01:00,170 --> 00:01:06,500
We have an array and call reduce on it reduce excepts as its first parameter callback and has a second

17
00:01:06,500 --> 00:01:13,040
parameter an optional starting value the function to reduce except for parameters we'll call the first

18
00:01:13,040 --> 00:01:18,830
parameter accumulator and the second parameter next value the third and fourth parameters are the index

19
00:01:18,860 --> 00:01:21,650
an array just like we saw with the other functions.

20
00:01:21,650 --> 00:01:23,470
So don't worry too much about those.

21
00:01:23,570 --> 00:01:28,880
If we do not pass a second parameter to reduce the value of the accumulator will be the first value

22
00:01:28,880 --> 00:01:33,470
in the array and the next value will be the second value in the array.

23
00:01:33,520 --> 00:01:36,650
You keep understanding reduce is to break it down step by step.

24
00:01:36,680 --> 00:01:38,590
So lets start with a simple example.

25
00:01:38,930 --> 00:01:43,910
As we iterate through the array we're going to see the change in the accumulator and next value what's

26
00:01:44,020 --> 00:01:47,750
with an array of 5 numbers 1 2 3 4 and 5.

27
00:01:47,930 --> 00:01:50,430
Let's invoke the reduced method on this array.

28
00:01:50,600 --> 00:01:55,600
And inside of here we'll return the sum of accumulator Plus next value.

29
00:01:55,710 --> 00:02:00,960
Remember you mentioned that when you do not pass the second parameter to reduce the value of the accumulator

30
00:02:00,960 --> 00:02:03,310
starts as the first value in the array.

31
00:02:03,360 --> 00:02:08,960
In our case 1 and next value will be the following value in the array which is the number 2.

32
00:02:09,300 --> 00:02:15,420
So in the first iteration accumulator is 1 and next value is to the return value from the callback is

33
00:02:15,420 --> 00:02:17,580
1 plus 2.

34
00:02:17,670 --> 00:02:22,110
The most important thing to remember about Reduce is whatever you return to the callback will become

35
00:02:22,110 --> 00:02:24,480
the new value of the accumulator.

36
00:02:24,480 --> 00:02:30,770
So in the next iteration accumulator is 3 and next value is 3 and our return value is 6.

37
00:02:31,020 --> 00:02:32,200
Since we return 6.

38
00:02:32,220 --> 00:02:37,950
The value of the accumulator in the next iteration will be six in the next iteration accumulator is

39
00:02:37,950 --> 00:02:40,110
6 next value is 4.

40
00:02:40,260 --> 00:02:43,270
And our return value is six plus four or 10.

41
00:02:43,620 --> 00:02:48,690
Once again this means that in the next iteration the value of the accumulator will be what we just returned

42
00:02:49,050 --> 00:02:57,030
10 in the final iteration accumulator is 10 and next value is 5 and our return value is 15.

43
00:02:57,030 --> 00:03:02,730
Since there is no next value abuse we'll simply return the value of accumulator Plus next value which

44
00:03:02,730 --> 00:03:03,790
is 15.

45
00:03:04,220 --> 00:03:06,050
Wow that was quite a bit of work.

46
00:03:06,060 --> 00:03:10,840
Just to add numbers in an array but I promised the more you do this the faster easier it will get.

47
00:03:11,940 --> 00:03:16,770
We mentioned that if we do not pass in a second parameter to reduce the accumulator will start as the

48
00:03:16,770 --> 00:03:18,350
first value in the array.

49
00:03:18,690 --> 00:03:24,420
Well if we pass in a second parameter to reduce the value of the accumulator will be in that second

50
00:03:24,420 --> 00:03:28,040
parameter and next value will be the first value in the array.

51
00:03:28,290 --> 00:03:30,720
Let's see what that looks like in this example.

52
00:03:30,720 --> 00:03:35,280
We're working with the same array but in our reduced function we are passing a second parameter with

53
00:03:35,280 --> 00:03:36,650
a value of 10.

54
00:03:36,660 --> 00:03:41,850
This means that the value of the accumulator in the first iteration will be 10 and the value of next

55
00:03:41,850 --> 00:03:48,480
value will be 1 in the first iteration we return 10 Plus 1 or 11 which will be the value of accumulator

56
00:03:48,480 --> 00:03:52,390
at the next iteration before we step to the next set of functions.

57
00:03:52,420 --> 00:03:58,980
Pause the video and try it out on your in the next iteration accumulator is 11 and next value is 2.

58
00:03:59,050 --> 00:04:04,720
So our return value is 13 in the next iteration accumulators 13 next value is 3.

59
00:04:04,720 --> 00:04:11,730
So we return 16 16 is now the value of accumulator and at the next iteration 4 is our next value.

60
00:04:11,800 --> 00:04:14,430
We then return 16 plus 4 which is 20.

61
00:04:14,650 --> 00:04:18,040
And that will be the value of our accumulator in the final iteration.

62
00:04:18,400 --> 00:04:25,990
We now return 20 plus 5s and since there is no next value after we return 25 from our function try to

63
00:04:25,990 --> 00:04:28,160
use Reduce to summer values in an array.

64
00:04:28,300 --> 00:04:33,580
And always remember whatever you return from the callback to reduce will be the value for the accumulator

65
00:04:33,580 --> 00:04:34,920
in the next iteration.

66
00:04:35,250 --> 00:04:40,420
But our common mistake is to not return anything to the callback which will set the value of the accumulator

67
00:04:40,420 --> 00:04:42,880
to be undefine which is what we do not want.

68
00:04:42,880 --> 00:04:48,250
Most of the time in the next video we'll discuss how we can use Reduce to build up other data types

69
00:04:48,340 --> 00:04:50,120
like strings and objects.

70
00:04:50,180 --> 00:04:54,760
Try this with your own simple reduced functions that add numbers in an array and I'll see you in the

71
00:04:54,760 --> 00:04:55,440
next video.
