1
00:00:01,290 --> 00:00:06,920
Welcome back in the previous video we discussed the third rule for determining the value of the key

2
00:00:06,920 --> 00:00:09,580
word this the explicit binding.

3
00:00:09,780 --> 00:00:15,250
We learned that using call apply or bind can change the value of the key word this.

4
00:00:15,270 --> 00:00:21,040
Now let's see how we can fix our previous issue with call the first code block is identical to what

5
00:00:21,040 --> 00:00:22,160
we saw before.

6
00:00:22,210 --> 00:00:25,060
But let's see what's happening in the second section.

7
00:00:25,060 --> 00:00:30,210
Previously we were calling person dog that say hello which was returning.

8
00:00:30,220 --> 00:00:31,970
Hello undefine.

9
00:00:32,110 --> 00:00:37,630
This happened because the value of the key word this inside of the say hello function referred to the

10
00:00:37,630 --> 00:00:44,170
dog object which does not have a first name property since we are using call we can now change what

11
00:00:44,170 --> 00:00:46,690
we want the value of the key word this to be.

12
00:00:46,690 --> 00:00:49,030
So let's change it to be the person object.

13
00:00:49,120 --> 00:00:54,410
Now that we've done that we can see that the function returns hello cold and our issue is fixed.

14
00:00:54,460 --> 00:01:00,200
We can also use the term in context function inside of the dog object and change the value of the key

15
00:01:00,200 --> 00:01:03,300
word this to make the function return true.

16
00:01:03,310 --> 00:01:08,470
One important thing to notice is that we are not invoking the say hello or determine context method

17
00:01:09,280 --> 00:01:10,980
we just attach call onto it.

18
00:01:11,140 --> 00:01:17,710
So there are no parentheses after say hello and determine Pontiac's when we use call very commonly calls

19
00:01:17,770 --> 00:01:21,980
used to help avoid code duplication like this example below.

20
00:01:22,150 --> 00:01:27,970
Here we have two objects cold and L.E. which both have a first name property and a say hi method.

21
00:01:27,970 --> 00:01:29,950
All this code works totally fine.

22
00:01:29,950 --> 00:01:35,920
We're repeating ourselves quite a bit inside of the highly object to say hi method inside of the elhi

23
00:01:35,920 --> 00:01:41,110
object is identical to the same high method inside of the code object.

24
00:01:41,140 --> 00:01:47,680
How can we refactor our code and get rid of the Say hi method inside of the object what we'd like to

25
00:01:47,680 --> 00:01:51,070
do is use the say hi method from the cult object.

26
00:01:51,280 --> 00:01:56,740
But instead of the keyword this referring to the cult object we want to explicitly set it to be the

27
00:01:56,740 --> 00:02:03,300
only object CAUSLEY video now and see if you can figure out how to do this using Paul.

28
00:02:03,430 --> 00:02:05,690
All right let's take a look at a solution.

29
00:02:05,710 --> 00:02:10,930
We remove the say hi method from the alii object and we are using the call method to set the value of

30
00:02:10,930 --> 00:02:15,460
the keyword this to be only when the say hide method is invoked.

31
00:02:15,460 --> 00:02:20,230
The first parameter to call is what we want the value of the keyword this to refer to.

32
00:02:20,440 --> 00:02:22,490
We call that the list arke.

33
00:02:22,570 --> 00:02:24,910
Once again this stuff is quite challenging.

34
00:02:24,910 --> 00:02:29,590
So if you're feeling a bit confused look at the previous slide and make sure you take these examples

35
00:02:29,590 --> 00:02:31,900
to see exactly what's going on.

36
00:02:31,900 --> 00:02:38,380
Now let's take our example one step further and create a say high function that anyone can use instead

37
00:02:38,380 --> 00:02:41,460
of attaching the same high function onto the cult object.

38
00:02:41,620 --> 00:02:43,780
Let's make it a standalone function.

39
00:02:44,110 --> 00:02:46,050
Here's what that might look like.

40
00:02:46,060 --> 00:02:53,140
Now how can we use the say hi method and have the value of the keyword this be called or L-E we can

41
00:02:53,140 --> 00:02:54,550
use call to do it.

42
00:02:54,670 --> 00:02:59,760
We now have created a standalone function that can be used in many different cases.

43
00:02:59,790 --> 00:03:00,500
Awesome.

44
00:03:01,520 --> 00:03:03,470
So what else might we use call.

45
00:03:03,890 --> 00:03:07,820
Let's imagine we want to select all the divs on some page.

46
00:03:07,940 --> 00:03:13,250
We might do that using the Get elements by CAGNY method and that would return a list of dead elements

47
00:03:13,250 --> 00:03:14,120
to us.

48
00:03:14,510 --> 00:03:19,690
But what if we want to find all the divs that have the text Hello and return an array of them.

49
00:03:20,090 --> 00:03:21,950
Filter would be wonderful.

50
00:03:22,190 --> 00:03:24,430
But the device variable is not an array.

51
00:03:24,470 --> 00:03:26,930
So filter does not exist on it.

52
00:03:26,930 --> 00:03:31,280
The issue here is that Argives variable is an array like object.

53
00:03:31,280 --> 00:03:37,250
So it would be really nice if we could convert our array like object into an array and we can do that

54
00:03:37,340 --> 00:03:44,440
using the array that slice method but with a slight modification instead of the target of slice the

55
00:03:44,430 --> 00:03:46,640
key word this being that array.

56
00:03:46,910 --> 00:03:52,170
Let's set the target of the key word this to be our diverse array like object.

57
00:03:52,190 --> 00:03:53,920
Here's what that might look like.

58
00:03:53,960 --> 00:03:58,790
We are setting the target of the slice function to be the array like object.

59
00:03:59,030 --> 00:04:01,850
And after we do that we can use the filter method.

60
00:04:02,230 --> 00:04:08,120
What we're doing is trying to slice something that is not actually an array in javascript slice will

61
00:04:08,120 --> 00:04:13,970
not work with all data types but it works very well on array like objects in the next video.

62
00:04:13,970 --> 00:04:17,750
We'll take a look at apply and how that can be quite useful as well.

63
00:04:17,750 --> 00:04:18,270
See there.
