WEBVTT
1
00:00:00.120 --> 00:00:02.850
OK Leslie we're going to work with our update.

2
00:00:02.850 --> 00:00:08.460
So in order for that to work we're going to need to send a request to slash API slash to use slash.

3
00:00:08.470 --> 00:00:15.780
Id call an ID of a variable as a put request rather than a delete request and not only that we also

4
00:00:15.780 --> 00:00:19.020
need to specify how the two should be updated.

5
00:00:19.230 --> 00:00:23.950
So this one's a little trickier because we're not sending the same request every time.

6
00:00:24.150 --> 00:00:30.090
We may need to say set this to true or set completed to false and we need to be able to determine if

7
00:00:30.090 --> 00:00:32.700
it's currently true then switched to false if it's currently false.

8
00:00:32.700 --> 00:00:34.250
Switch it to true.

9
00:00:35.040 --> 00:00:40.140
But we're going to start off with just the basic set up this time rather than defining the function

10
00:00:40.260 --> 00:00:41.550
or the method first.

11
00:00:41.580 --> 00:00:47.130
And when you go down here to our to do item and I'm going to pass in a non-existent function and I'm

12
00:00:47.130 --> 00:00:49.450
just going to call it on toggle.

13
00:00:49.480 --> 00:00:57.570
It's going to be equal to this dot toggle to do bind this.

14
00:00:57.570 --> 00:01:01.460
And we also need to pass in not just the ID and this is important.

15
00:01:01.920 --> 00:01:08.010
Unlike delete We need more than the idea again we need to be able to determine is the to do currently

16
00:01:08.010 --> 00:01:10.050
done or not done.

17
00:01:10.320 --> 00:01:16.350
So rather than just the ID We're also going to pass in all this to the entire to do it small.

18
00:01:16.350 --> 00:01:17.710
It doesn't really matter.

19
00:01:17.730 --> 00:01:24.450
Technically we could pass in just the ID and then use that ID to look it up inside the stack state and

20
00:01:24.450 --> 00:01:27.120
then figure out the completed status and go from there.

21
00:01:27.360 --> 00:01:31.280
But it's much easier just to pass in everything we need.

22
00:01:31.860 --> 00:01:32.280
OK.

23
00:01:32.370 --> 00:01:34.010
So that passes that in.

24
00:01:34.410 --> 00:01:36.120
Let's go to to do item.

25
00:01:36.120 --> 00:01:41.930
We haven't defined this toggled to do by the way but let's go to it to do item and inside of.

26
00:01:41.970 --> 00:01:46.080
Let's add another span and we can refactor this in a bit.

27
00:01:46.100 --> 00:01:48.570
But let's start with just a span here.

28
00:01:48.810 --> 00:01:53.310
So when we click let's do it like this

29
00:01:55.990 --> 00:02:00.530
then everything properly change right spacing again

30
00:02:03.420 --> 00:02:04.760
try that one more time.

31
00:02:05.280 --> 00:02:12.510
OK so we have our span and this span will have the style OK.

32
00:02:12.520 --> 00:02:19.550
So this way the cross off the whatever that line through doesn't actually go onto the x as well.

33
00:02:19.600 --> 00:02:20.510
They're separate.

34
00:02:20.740 --> 00:02:22.340
OK so we have our style there.

35
00:02:22.450 --> 00:02:31.930
And then we're going to add on quick equals and we need to make sure that we use on toggle so that's

36
00:02:31.930 --> 00:02:33.710
going to be on toggle there.

37
00:02:34.000 --> 00:02:35.300
That's what we're passing in.

38
00:02:35.590 --> 00:02:39.130
OK so that's for our span.

39
00:02:39.130 --> 00:02:46.110
Perfect and smooth and name appear and then the closing tag that spanned

40
00:02:49.430 --> 00:02:51.350
closing tag is the ally.

41
00:02:51.680 --> 00:02:53.350
And I think we're get now.

42
00:02:53.570 --> 00:02:54.180
Yes.

43
00:02:56.020 --> 00:02:57.220
Didn't that just a bit.

44
00:02:57.480 --> 00:02:57.840
OK.

45
00:02:57.980 --> 00:03:01.610
So if so what we have going on now Orella is split up into two spans.

46
00:03:01.680 --> 00:03:07.710
One basically controls the styling and displays the name and has the uncloaked to toggle the name or

47
00:03:07.710 --> 00:03:10.860
the completion status and then another one is just the delete button.

48
00:03:10.860 --> 00:03:13.170
So it shouldn't look any different.

49
00:03:13.330 --> 00:03:17.120
Getting an error because it can't bind to toggle to do X it doesn't exist.

50
00:03:17.160 --> 00:03:21.120
So we'll just have to implement that first before we can see anything.

51
00:03:21.210 --> 00:03:27.280
But when we click on this span it's calling on toggle what you're passing in here.

52
00:03:27.330 --> 00:03:30.700
Now all we need to do is define on toggle.

53
00:03:30.910 --> 00:03:32.670
So let's do that now.

54
00:03:32.670 --> 00:03:37.600
So on toggle rather than just an ID it takes a entire to do.

55
00:03:38.150 --> 00:03:44.610
And the first thing let's start by doing is just cancel that logging to do dot ID and then to do dot

56
00:03:44.910 --> 00:03:45.620
completed

57
00:03:48.310 --> 00:03:57.120
but oh and it's dot underscore ID we go refresh the page and what's our problem here toggled to do see

58
00:03:57.980 --> 00:03:59.400
oh I called this on target.

59
00:03:59.420 --> 00:04:05.130
That's the problem because it's called Tuggle to do an Togolese is a different thing.

60
00:04:05.170 --> 00:04:08.470
So let's do that toggle to do

61
00:04:12.430 --> 00:04:12.590
so.

62
00:04:12.600 --> 00:04:18.610
One of the cons. When I click on one of these you can see it gives us the idea so we're going to send

63
00:04:18.610 --> 00:04:25.150
a request to slash AP slash to do this and then we also need to specify in the body of that request

64
00:04:25.450 --> 00:04:28.250
we want to set completed to be true.

65
00:04:28.300 --> 00:04:29.860
It's currently false.

66
00:04:29.860 --> 00:04:32.910
And if we do buy cheese you can see it's currently true.

67
00:04:33.040 --> 00:04:35.740
So I would want to set it to False.

68
00:04:35.740 --> 00:04:36.460
Perfect.

69
00:04:36.780 --> 00:04:37.050
OK.

70
00:04:37.090 --> 00:04:42.340
So we're going to need to send our federal question and we can actually copy a lot of what we had from

71
00:04:42.340 --> 00:04:43.550
delete.

72
00:04:43.600 --> 00:04:48.080
First of all let me just copy the whole thing honestly.

73
00:04:48.700 --> 00:04:57.430
Get rid of our cons. log first thing we'll do is rather than a delete you or I'll call it update you.

74
00:04:57.420 --> 00:05:05.340
Well same idea though the existing API prefix slash API slash to do plus and we need to do to do dot

75
00:05:06.310 --> 00:05:12.340
underscore ID because we have the entire to do now OK then we're going to send our fetch to update you

76
00:05:12.340 --> 00:05:12.970
or.

77
00:05:13.900 --> 00:05:20.430
The method is going to be a put or dicho somehow just scroll past everything here you go.

78
00:05:20.830 --> 00:05:21.910
So this will be a put.

79
00:05:22.210 --> 00:05:30.560
And unlike the lead we need to pass in body so that's going to be Jason docstring again.

80
00:05:30.970 --> 00:05:34.150
And actually I'll just copy this.

81
00:05:34.180 --> 00:05:35.140
Here we go.

82
00:05:36.580 --> 00:05:39.890
From up top.

83
00:05:40.060 --> 00:05:45.910
So we have our headers and then we have body J's on that string of phi and rather the name anisette

84
00:05:45.940 --> 00:05:55.390
completed equal to to do got completed but the opposite of that because if it's currently true we want

85
00:05:55.390 --> 00:05:56.880
to set it to false if it's currently false.

86
00:05:56.880 --> 00:05:58.850
We want to change it to true.

87
00:05:59.350 --> 00:06:00.020
OK.

88
00:06:00.430 --> 00:06:04.210
And let's see it's complaining about 114.

89
00:06:04.750 --> 00:06:05.550
We're not there yet.

90
00:06:05.700 --> 00:06:06.220
OK.

91
00:06:06.310 --> 00:06:07.840
So this will send the request.

92
00:06:07.900 --> 00:06:14.250
Then afterwards all we want to do is check it for errors like we've been doing that's exactly the same.

93
00:06:14.410 --> 00:06:23.020
But afterwards it's time we'll call this updated to do and we're going to need to spend a little bit

94
00:06:23.020 --> 00:06:23.600
long.

95
00:06:23.620 --> 00:06:24.990
So let me type it up first.

96
00:06:25.080 --> 00:06:34.240
So Will do constitute equals this that state to use dot map we'll just go with T.

97
00:06:34.300 --> 00:06:50.180
It's variable and to T Dot underscore ID equals equals equals updated to do that underscore ID.

98
00:06:50.400 --> 00:07:00.860
If that's true we're going to take everything about t and change completed to be not completed.

99
00:07:01.320 --> 00:07:05.850
So we're going to update that part of that individual to do in the state.

100
00:07:06.020 --> 00:07:09.260
Otherwise keep that to do how it is.

101
00:07:09.270 --> 00:07:14.910
So this is just a little conditional logic going through all to do is remapping over them and checking

102
00:07:14.910 --> 00:07:21.990
is the deuce ID equal to the one that we just updated that we got back from the Jason response.

103
00:07:21.990 --> 00:07:24.330
If it is then change it.

104
00:07:24.330 --> 00:07:27.770
Flip the completed status from true to false or false true.

105
00:07:28.230 --> 00:07:29.930
Otherwise keep it the same.

106
00:07:30.270 --> 00:07:37.500
And then we need to set this state equal to the deuce and that's looking good.

107
00:07:37.500 --> 00:07:38.640
It's everything good.

108
00:07:38.640 --> 00:07:40.300
Don't forget a parentheses or anything.

109
00:07:40.470 --> 00:07:41.810
Let's see what happens.

110
00:07:43.210 --> 00:07:44.430
All right so I'm going to try.

111
00:07:44.470 --> 00:07:47.430
Let's first open up my network tab again.

112
00:07:47.610 --> 00:07:50.030
Try checking off your laundry.

113
00:07:50.170 --> 00:07:50.950
Here's a request.

114
00:07:50.950 --> 00:07:55.540
It's a put request response we get back has completed now set to true.

115
00:07:55.760 --> 00:07:56.950
And so it's crossed off.

116
00:07:56.950 --> 00:07:59.890
I refresh the page still crossed off.

117
00:08:00.530 --> 00:08:02.220
Let's uncheck all of them.

118
00:08:02.290 --> 00:08:03.160
Everything worked.

119
00:08:03.160 --> 00:08:05.170
Refresh the page are still all unchecked.

120
00:08:05.350 --> 00:08:09.320
And let's add a new to do just to make sure that everything works fine.

121
00:08:09.460 --> 00:08:17.270
Let's say we need to mop the floor I check it off and I can also delete it.

122
00:08:17.270 --> 00:08:19.250
Everything works perfect.

123
00:08:19.280 --> 00:08:22.500
So that's the basic functionality of our application.

124
00:08:22.880 --> 00:08:28.430
All we have left really to do is style it and also refactored things because if you look at this to

125
00:08:28.430 --> 00:08:35.240
do list component it's kind of massive and almost I don't know 75 percent of the logic in the code is

126
00:08:35.240 --> 00:08:37.480
just for fecche request and error handling.

127
00:08:37.640 --> 00:08:39.760
So I'm going actually in the next video.

128
00:08:39.770 --> 00:08:47.120
Move this out to its own API is file basically a helper file that will help clean up this code and keep

129
00:08:47.120 --> 00:08:51.530
it as slow as possible and as re-act component centric as possible.

130
00:08:51.620 --> 00:08:52.330
So that's next.
