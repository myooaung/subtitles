WEBVTT
1
00:00:00.330 --> 00:00:01.110
Welcome back.

2
00:00:01.260 --> 00:00:04.680
In this video we're going to recap what we've learned about closures.

3
00:00:04.680 --> 00:00:06.620
Closures are a bit tricky to wrap your head around.

4
00:00:06.810 --> 00:00:11.400
But if you can understand what the definition of a closure is and how they're used you're off to a great

5
00:00:11.400 --> 00:00:12.260
start.

6
00:00:12.270 --> 00:00:17.140
Another important thing to note is that not all programming languages have support for closure.

7
00:00:17.310 --> 00:00:20.610
So this is something that javascript specifically supports.

8
00:00:20.610 --> 00:00:22.250
So what have we learned.

9
00:00:22.260 --> 00:00:27.330
Closure exists when an inner function makes use of variables declared in an outer function which has

10
00:00:27.330 --> 00:00:30.330
previously returned closure does not exist.

11
00:00:30.330 --> 00:00:35.610
If you do not return an inner function and if that inner function does not use variables defined in

12
00:00:35.610 --> 00:00:41.550
the outer function that has returned javascript will only remember values that are being used inside

13
00:00:41.550 --> 00:00:42.740
of the inner function.

14
00:00:42.870 --> 00:00:45.730
Not all variables to find in the outer function.

15
00:00:46.260 --> 00:00:52.590
We can use closures to create private variables and write code that isolates our logic and application.

16
00:00:52.590 --> 00:00:57.360
In fact the pattern we saw in a previous video where we created a classroom function that returns an

17
00:00:57.390 --> 00:01:03.040
object that used closure is the foundation for a popular design pattern known as the module pattern.

18
00:01:03.360 --> 00:01:06.590
As always if you have any questions be sure to let us know.

19
00:01:06.600 --> 00:01:11.580
Until then let's practice a bit with closures so you can see exactly how and when to use them.

20
00:01:11.580 --> 00:01:13.300
Good luck and I'll see you in the next video.
