1
00:00:01,220 --> 00:00:02,120
Welcome back.

2
00:00:02,240 --> 00:00:08,270
In a previous video we saw that when the new keyword is used a property is added to the object created

3
00:00:08,270 --> 00:00:11,670
from the constructor function called Dunder proto.

4
00:00:11,810 --> 00:00:16,310
This property links to the prototype property of the constructor function.

5
00:00:16,310 --> 00:00:19,220
But what value does this prototype property have.

6
00:00:19,430 --> 00:00:24,350
The prototype property is an object which can have methods and properties placed on it.

7
00:00:24,350 --> 00:00:30,020
These methods and properties are shared and accessible by any object that is created from the constructor

8
00:00:30,020 --> 00:00:30,780
function.

9
00:00:30,830 --> 00:00:37,160
When the new keyword is used in this example where adding a property on the prototype called is instructor

10
00:00:37,460 --> 00:00:39,820
and setting the value to be true.

11
00:00:39,920 --> 00:00:45,290
Now all of our objects that have been created from the constructor using the new keyword have access

12
00:00:45,350 --> 00:00:47,210
to the is instr. property.

13
00:00:47,720 --> 00:00:49,510
But how in the world did that happen.

14
00:00:49,520 --> 00:00:55,610
We added a property on the person that prototype object and all of a sudden two seemingly non-related

15
00:00:55,640 --> 00:00:57,770
objects have access to it.

16
00:00:57,770 --> 00:01:00,070
The answer lies in Dunder Protel.

17
00:01:00,320 --> 00:01:06,560
Since these objects both have a link to person that prototype they can both access anything inside of

18
00:01:06,560 --> 00:01:07,550
it.

19
00:01:07,550 --> 00:01:13,640
This is actually the exact way that javascript finds methods and properties on objects and what we have

20
00:01:13,640 --> 00:01:16,630
just described is something called the prototype chain.

21
00:01:16,640 --> 00:01:18,120
Let's talk a bit more about that.

22
00:01:18,380 --> 00:01:23,870
We just saw that when we added a property to the person that prototype object it was accessible from

23
00:01:23,930 --> 00:01:28,540
objects created by that constructor function using the new keyword.

24
00:01:28,550 --> 00:01:33,620
We then said that the reason why this was possible was because of the way that javascript looks for

25
00:01:33,620 --> 00:01:35,010
methods and properties.

26
00:01:35,210 --> 00:01:36,600
Let's see an example.

27
00:01:36,680 --> 00:01:41,380
I'm going to make a variable called our and set it equal to an empty array.

28
00:01:41,390 --> 00:01:45,500
What I actually did was shorthand for writing new array.

29
00:01:45,560 --> 00:01:51,260
I used a built in constructor to javascript called array and made a new object from it.

30
00:01:51,260 --> 00:01:56,510
We also know in javascript that our arrays have a method called Push which adds something to the end

31
00:01:56,510 --> 00:01:57,570
of the array.

32
00:01:57,740 --> 00:01:59,840
But where is this push method defined.

33
00:02:00,020 --> 00:02:02,440
And how does javascript know how to find it.

34
00:02:02,450 --> 00:02:04,570
The answer is in Dondre proto.

35
00:02:04,940 --> 00:02:12,000
Let's cancel that the are the are variable and we see all that this object has a property called once.

36
00:02:12,230 --> 00:02:14,110
But where does the push method come from.

37
00:02:14,390 --> 00:02:18,380
Well let's examine what the Dungarpur photo of this variable is.

38
00:02:18,380 --> 00:02:20,840
It is in fact the array prototype.

39
00:02:20,840 --> 00:02:28,000
We can prove that by showing that our dog Dunder pro triple equals a radar prototype returns true.

40
00:02:28,070 --> 00:02:33,360
So the way the javascript finds methods and properties is by looking at the object and if it cannot

41
00:02:33,410 --> 00:02:38,520
find the method or property you're looking for it goes to that objects donder poda.

42
00:02:38,570 --> 00:02:44,540
This actually keeps happening until the property or method is found and if it is not found javascript

43
00:02:44,540 --> 00:02:46,250
returns undefined.

44
00:02:46,280 --> 00:02:50,180
We can see this even further with another example in javascript.

45
00:02:50,180 --> 00:02:56,030
Every object has a method called has own property which accepts a parameter and returns true if the

46
00:02:56,060 --> 00:02:57,810
object has that property.

47
00:02:58,190 --> 00:02:59,750
But where is this method located.

48
00:02:59,960 --> 00:03:03,140
Let's take a look at our variable with cons. daddy.

49
00:03:03,740 --> 00:03:06,550
You can just type Diyar as well.

50
00:03:06,710 --> 00:03:07,990
Doesn't seem to be here.

51
00:03:08,060 --> 00:03:09,720
So what does javascript do.

52
00:03:09,740 --> 00:03:13,460
It goes up the prototype chain and finds the next Dunder Prato.

53
00:03:13,670 --> 00:03:17,810
We can then see that the next donder POTO is the object prototype.

54
00:03:18,020 --> 00:03:20,990
And here is where that method is found.

55
00:03:20,990 --> 00:03:25,900
To recap we analyze how javascript finds methods and properties using the prototype chain.

56
00:03:26,150 --> 00:03:31,220
We saw how javascript will look at an object and see if the method or property you're looking for exists

57
00:03:31,580 --> 00:03:36,800
and if not it will go to that object's Dunder Kroto and repeat that until there is not another under

58
00:03:36,800 --> 00:03:38,900
protest in the next video.

59
00:03:38,900 --> 00:03:43,970
We'll talk more about the value of the prototype property and practice with an exercise season.
