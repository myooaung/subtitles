1
00:00:00,390 --> 00:00:01,410
Welcome back.

2
00:00:01,410 --> 00:00:06,570
In this video we'll learn how to use transitions to help improve the look of our graphs during updates

3
00:00:07,380 --> 00:00:08,280
as usual.

4
00:00:08,310 --> 00:00:11,470
Here are some links to the starter code will be working with.

5
00:00:11,580 --> 00:00:14,090
Let's go back to the first bar chart we made.

6
00:00:14,730 --> 00:00:19,950
This is a graph of births around the world by month as we change the value of the slider.

7
00:00:19,950 --> 00:00:23,340
The bars update the values for different years.

8
00:00:23,580 --> 00:00:29,470
Right now when we change the year the visualization updates automatically but it's often nice to have

9
00:00:29,470 --> 00:00:31,830
a smoother transition between values.

10
00:00:32,100 --> 00:00:40,150
D-3 supports these types of transitions with a method called unsurprisingly transition D-3 transitions

11
00:00:40,180 --> 00:00:42,490
are somewhat similar to D-3 selections.

12
00:00:42,670 --> 00:00:48,130
Both have methods scowled at her in that style for example they let you update properties and attributes

13
00:00:48,160 --> 00:00:49,870
on DOM elements.

14
00:00:49,900 --> 00:00:55,300
You can also change transitions together merge transitions and access the selection that a transition

15
00:00:55,300 --> 00:00:56,250
is attached to.

16
00:00:57,190 --> 00:01:01,960
We won't dig into all of the complexities of transitions but we will highlight some of the most important

17
00:01:01,960 --> 00:01:04,510
features to begin.

18
00:01:04,510 --> 00:01:08,680
You can create a transition from a selection by calling dot transition on it.

19
00:01:08,950 --> 00:01:13,870
When you do this you get a D-3 transition object not a Selection object.

20
00:01:13,960 --> 00:01:18,910
If you look at the return values from transition in the console you'll see that its constructor function

21
00:01:19,000 --> 00:01:22,530
is transition from a bar graph.

22
00:01:22,530 --> 00:01:28,070
This means that we can add just one line of code to our javascript file to get started using D-3 transitions.

23
00:01:28,900 --> 00:01:34,810
As you can see now when we update the ears the bars don't change instantly but transition from one height

24
00:01:34,810 --> 00:01:36,870
to another.

25
00:01:36,870 --> 00:01:41,030
Notice that when we called transition we didn't have to change our outer function calls.

26
00:01:41,040 --> 00:01:45,030
Why is this after all before we were calling at or on a selection.

27
00:01:45,030 --> 00:01:48,150
And now we're calling it a transition.

28
00:01:48,170 --> 00:01:53,040
It's important to note that all those selections and transitions both have an adder style method.

29
00:01:53,090 --> 00:01:56,590
These methods are not the same when you call that Adorjan.

30
00:01:56,620 --> 00:02:02,240
So for example D-3 will set a new value for that attribute right away when you call that at or on a

31
00:02:02,240 --> 00:02:02,870
transition.

32
00:02:02,870 --> 00:02:08,270
However D-3 will calculate intermediate values between the old value and the new value which is what

33
00:02:08,270 --> 00:02:11,630
gives the impression of a smooth transition.

34
00:02:11,640 --> 00:02:17,250
You can see this in the elements tab as you move the slider around the Y and height attributes or changing

35
00:02:17,250 --> 00:02:22,620
multiple times as the bars transition from their old values to the new ones.

36
00:02:22,630 --> 00:02:25,770
So how does D-3 know how to transition between values.

37
00:02:26,050 --> 00:02:32,460
Fortunately D-3 is smart enough to detect colors and numbers when used as values for attributes or styles.

38
00:02:32,500 --> 00:02:36,150
It can also pick out numbers inside of strings in these cases.

39
00:02:36,160 --> 00:02:41,680
It transitions between the current value in a new value being set with Dot adder or dot style.

40
00:02:41,680 --> 00:02:45,520
This process is called interpellation.

41
00:02:45,590 --> 00:02:50,420
You can also define your own custom interpolators if the defaults and D-3 aren't sufficient.

42
00:02:50,510 --> 00:02:55,190
We won't address this process here but it's important to highlight one example where a custom Terminator

43
00:02:55,190 --> 00:02:55,860
is needed.

44
00:02:56,910 --> 00:03:02,750
If you try to add transitions to our pie chart from earlier you'll see a bunch of errors in the console.

45
00:03:02,770 --> 00:03:07,990
Remember that when we learned about the command for path elements and SD We saw that the fourth and

46
00:03:07,990 --> 00:03:13,210
fifth arguments for the are command determined which are in which circle will get drawn.

47
00:03:13,210 --> 00:03:16,870
These arguments each took on values of zero or one.

48
00:03:17,000 --> 00:03:21,860
But when you try to transition this graph the three attempts to interpolate these arguments to values

49
00:03:21,890 --> 00:03:23,800
in between 0 and 1.

50
00:03:24,320 --> 00:03:29,950
This gives an invalid attribute for the path element and hence the error.

51
00:03:29,960 --> 00:03:36,590
So if you're trying to make transitions for pie charts you'll probably need a custom interpreter by

52
00:03:36,620 --> 00:03:41,100
paragraphs dealing with simpler SVGA elements such as scatterplot or bar charts.

53
00:03:41,200 --> 00:03:44,020
Transition assumptions the D-3 makes will be fine.

54
00:03:45,450 --> 00:03:50,700
When you create a transition by default it will last 250 milliseconds to change this.

55
00:03:50,700 --> 00:03:54,590
You can use the duration method when you pass an lvalue to duration.

56
00:03:54,600 --> 00:03:58,990
You can overwrite the default length of the duration as what we saw with selection methods.

57
00:03:59,100 --> 00:04:04,350
You can pass on a single value to duration or a callback which has access to the current piece of data

58
00:04:04,440 --> 00:04:05,760
in the index.

59
00:04:05,760 --> 00:04:11,270
This can be helpful if you want different elements to have different durations transitions also have

60
00:04:11,270 --> 00:04:16,130
a particular animation speed which is slow at the beginning and end and fast in the middle.

61
00:04:17,000 --> 00:04:23,060
That type of animation speed used it's called the easing D-3 comes with many built in types of Eason's

62
00:04:23,570 --> 00:04:24,890
you can write your own as well.

63
00:04:24,980 --> 00:04:29,960
But for now let's explore a few of the ones that D-3 provides to override the default easing.

64
00:04:29,990 --> 00:04:36,710
You can use that easy method and pass a new easing to highlight the effects of different reasons.

65
00:04:36,790 --> 00:04:39,540
Let's set the duration to two thousand milliseconds.

66
00:04:39,940 --> 00:04:45,160
Now when we refresh the page and change the year it's easier to see the behavior of the animation speed.

67
00:04:46,550 --> 00:04:50,010
This easing is theories Kubik easing called D-3.

68
00:04:50,120 --> 00:04:53,950
Cubic another common animation speed is linear.

69
00:04:54,320 --> 00:04:57,520
In this case the speed of the animation doesn't change.

70
00:04:57,740 --> 00:05:00,270
We can change the using using the ease of method.

71
00:05:00,560 --> 00:05:06,150
Let's pass on the theory that is linear and see the difference as you can see.

72
00:05:06,210 --> 00:05:09,310
Now the is transition at a constant rate of speed.

73
00:05:09,990 --> 00:05:13,900
You can check out the D-3 docs for an exhaustive list of reasons.

74
00:05:13,920 --> 00:05:15,780
There are way too many to go through here.

75
00:05:17,390 --> 00:05:19,690
Another helpful method is called DeLay.

76
00:05:19,700 --> 00:05:25,790
This allows you to delay the transition by some fixed amount of time that you pass in as with duration.

77
00:05:25,910 --> 00:05:31,170
You can pass on a single value or a callback if you want different elements to have different delays.

78
00:05:31,580 --> 00:05:36,860
You'll often see this method used if you want to stagger the animation for different SVGA elements.

79
00:05:36,860 --> 00:05:47,370
For example we could use the index to delay each month's transition by an additional 250 milliseconds.

80
00:05:47,380 --> 00:05:54,390
Let's move on to the last transmission method will look at the method just like selections B-3 transitions

81
00:05:54,390 --> 00:05:56,200
have access to an on message.

82
00:05:56,430 --> 00:06:00,440
However the events that D-3 transitions can listen for aren't dominance.

83
00:06:00,510 --> 00:06:05,340
There are specific transition related events that are built into the three.

84
00:06:05,510 --> 00:06:10,810
There are only three types of D-3 transition of this start and an interrupt.

85
00:06:10,940 --> 00:06:17,120
As you might guess start fires when the transition starts and fires when the transition ends and interrupt

86
00:06:17,120 --> 00:06:17,530
fires.

87
00:06:17,540 --> 00:06:22,520
If the transition gets interrupted to see these transition events in action.

88
00:06:22,700 --> 00:06:26,620
Let's add a title to our graph that specifies what you're looking at.

89
00:06:26,930 --> 00:06:29,180
The graph loads with data from 1967.

90
00:06:29,210 --> 00:06:31,660
So I'll put that in the title initially.

91
00:06:31,700 --> 00:06:36,230
Now position it where I want it and bump the font size up a bit.

92
00:06:36,570 --> 00:06:41,290
Whenever a transition starts I'd like to update the text in my title to tell the user that the date

93
00:06:41,290 --> 00:06:43,220
is updating to some New Year.

94
00:06:43,560 --> 00:06:49,440
Then when the transition ends we can update the text once more to confirm that the transition has ended.

95
00:06:53,450 --> 00:06:57,170
This sort of works but as you can tell the updating jumps around a lot.

96
00:06:58,130 --> 00:07:02,840
Because of the delay between transitions on these rectangles the start event is triggering for each

97
00:07:02,840 --> 00:07:05,870
rectangle which causes the text to jump around.

98
00:07:06,170 --> 00:07:10,360
One way to fix this is to only listen for the start event on one of the rectangles.

99
00:07:10,700 --> 00:07:14,120
Here we can just listen for the start event on the first rectangle.

100
00:07:14,120 --> 00:07:14,780
If you want.

101
00:07:14,930 --> 00:07:20,680
You can also wait to trigger the end event by only listening for it on the last rectangle to make sure

102
00:07:20,680 --> 00:07:24,820
will always grab the last index regardless of the number of rectangles we can use.

103
00:07:24,820 --> 00:07:31,130
The third argument in the callback which will give us an array of elements in our current select.

104
00:07:31,310 --> 00:07:35,620
There's not really much I want to do on interrupt but just so that we can see it in action.

105
00:07:35,620 --> 00:07:38,790
What's console log a message whenever a transition gets interrupted.

106
00:07:44,120 --> 00:07:48,850
If I wait for the transition to complete before changing years nothing gets locked to the console.

107
00:07:49,100 --> 00:07:53,590
But if I change years too quickly the rectangles will need to adjust to the latest year.

108
00:07:53,840 --> 00:07:57,860
Which means that any existing transitions get interrupted.

109
00:07:57,940 --> 00:07:59,770
That's all I'll say about transitions.

110
00:08:00,570 --> 00:08:04,960
And the next video will talk about managing asynchronous code with D-3.

111
00:08:04,960 --> 00:08:06,000
I'll see you there.
