WEBVTT
1
00:00:00.180 --> 00:00:05.760
Welcome back in the previous video we saw the javascript will look to the Dunder Prato property to find

2
00:00:05.760 --> 00:00:10.950
methods and properties on objects now that we know more about the relationship between Dunder Prado

3
00:00:11.010 --> 00:00:16.470
and the prototype property and that all objects created from a constructor function using the new keyword

4
00:00:16.650 --> 00:00:20.910
have a shared prototype or three factors some code in the following example.

5
00:00:21.090 --> 00:00:26.370
Here I have a function called Person which has a method on it called Say hi which is a function that

6
00:00:26.370 --> 00:00:30.480
returns the string high concatenated with the name property on the keyword.

7
00:00:30.480 --> 00:00:35.380
This keyword this will refer to the object created from the constructor function.

8
00:00:35.400 --> 00:00:38.970
When the new keyword is used the code below will work.

9
00:00:39.090 --> 00:00:41.790
But there's something quite inefficient about what we're doing.

10
00:00:41.880 --> 00:00:47.040
Every time we make an object using the new keyword we have to redefine the say high function.

11
00:00:47.040 --> 00:00:51.600
So if we were to make a thousand objects from the constructor function we would have to redefine the

12
00:00:51.600 --> 00:00:54.150
say high function thousand times.

13
00:00:54.150 --> 00:00:58.380
It would be much more efficient if there was a place where we could define a say high function once

14
00:00:58.650 --> 00:01:02.850
and have it shared amongst all objects created from the person constructor.

15
00:01:02.910 --> 00:01:04.970
When the new keyword is used.

16
00:01:05.010 --> 00:01:07.700
Fortunately we know exactly what that object is.

17
00:01:07.740 --> 00:01:09.690
It's the prototype property.

18
00:01:09.690 --> 00:01:15.510
We can simply define our say high function on the person prototype and assign person that prototype

19
00:01:15.570 --> 00:01:20.410
that say hi to be a function which does exactly what it was doing before.

20
00:01:20.490 --> 00:01:26.430
Notice inside of here we're also using the keyword this which will refer to the object which is invoking

21
00:01:26.430 --> 00:01:29.460
the Sahaj method much better.

22
00:01:29.460 --> 00:01:33.470
Now it's your turn to practice create a constructor function for a vehicle.

23
00:01:33.690 --> 00:01:39.180
Each object created from this constructor should have a make model and year property and each object

24
00:01:39.180 --> 00:01:44.710
should also have a property called is running which should be set to false every object created from

25
00:01:44.710 --> 00:01:49.890
the vehicle constructor should have a function called Turn on which changes the is running property

26
00:01:49.890 --> 00:01:50.580
to True.

27
00:01:51.090 --> 00:01:56.010
Every object should also have a function called turned off which changes the is running property to

28
00:01:56.010 --> 00:01:57.230
False.

29
00:01:57.330 --> 00:02:02.780
Finally every object created from the vehicle constructor should have a method called Haack which returns

30
00:02:02.780 --> 00:02:06.100
a string EIP only if the is running property is true.

31
00:02:06.920 --> 00:02:11.550
Pause the video now and see if you can complete the.

32
00:02:11.550 --> 00:02:12.430
So how did you do.

33
00:02:12.690 --> 00:02:15.000
Here's a solution for the previous problem.

34
00:02:15.150 --> 00:02:20.340
I'm placing all of the properties that I do not want shared for each object inside of the constructor

35
00:02:20.340 --> 00:02:25.750
function that includes an is running property which should be by default false.

36
00:02:25.920 --> 00:02:30.990
We don't want to place properties on the prototype because each object created from the vehicle constructor

37
00:02:31.140 --> 00:02:37.230
should have its own is running property however all of the functions like turn on turn off and Hunk

38
00:02:37.530 --> 00:02:39.340
should be placed on the prototype.

39
00:02:39.390 --> 00:02:42.490
Since we don't want to redefine them for every object we create.

40
00:02:42.690 --> 00:02:48.780
That would be inefficient so will place all the functions inside of the vehicle prototype.

41
00:02:48.860 --> 00:02:50.810
If you didn't get this one tried again.

42
00:02:50.810 --> 00:02:53.920
This stuff takes practice in speaking of practice.

43
00:02:53.930 --> 00:02:57.200
It's your turn to practice a bit using the prototype property.

44
00:02:57.230 --> 00:02:58.770
Good luck and I'll see you in the next video.
