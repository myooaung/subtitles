WEBVTT
1
00:00:00.510 --> 00:00:01.390
Welcome back.

2
00:00:01.530 --> 00:00:06.900
In a previous video we learned that when the key word this is not inside of a declared object its value

3
00:00:06.930 --> 00:00:12.360
will be the global object but quickly demonstrate what I mean by declared object in case the previous

4
00:00:12.360 --> 00:00:14.580
video still left you a bit confused.

5
00:00:14.580 --> 00:00:17.140
Remember the material here is quite challenging.

6
00:00:17.220 --> 00:00:22.550
So try watching these videos a couple of times and typing the code examples to reinforce your knowledge.

7
00:00:22.590 --> 00:00:25.170
I'm going to make an empty object called data.

8
00:00:25.290 --> 00:00:30.620
What I've just done is declared an object the data object did not exist until I declared it.

9
00:00:30.630 --> 00:00:36.300
Now I'm going to attach a property onto this object called instructor and assign it to the string Elahi.

10
00:00:36.600 --> 00:00:40.180
No data has a key with the value of LP inside of it.

11
00:00:40.200 --> 00:00:43.620
This is what we mean when we say inside of a declared object.

12
00:00:43.690 --> 00:00:45.520
If that still confuses you that's all.

13
00:00:45.560 --> 00:00:49.220
It will make even more sense when we examine the second rule and see the key word.

14
00:00:49.220 --> 00:00:51.660
This inside of an object.

15
00:00:51.660 --> 00:00:53.770
Now let's finish up with the first rule.

16
00:00:53.940 --> 00:01:00.000
As you can see here when we put the key word this inside of a function its value is still the global

17
00:01:00.000 --> 00:01:01.130
object.

18
00:01:01.140 --> 00:01:04.130
Remember we said that the global rule applies.

19
00:01:04.170 --> 00:01:10.500
Unless the keyword this is inside of a declared object it's inside of a function right now.

20
00:01:10.500 --> 00:01:16.620
So when we call the function what is this the value returned is the window object.

21
00:01:16.620 --> 00:01:18.980
Now let's look at one final example.

22
00:01:18.980 --> 00:01:25.090
What happens if we attach properties onto the keyword this when its value is the global object.

23
00:01:25.320 --> 00:01:31.670
And just as a reference when I say Global Object I mean the window object as an aside in different javascript

24
00:01:31.670 --> 00:01:32.510
environments.

25
00:01:32.540 --> 00:01:35.990
The value of the global object will be different.

26
00:01:36.320 --> 00:01:38.990
Inside are variables in this function.

27
00:01:38.990 --> 00:01:45.320
We are attaching a property onto the keyword this called Person and sending it equal to the string L.E..

28
00:01:45.560 --> 00:01:51.920
Since the keyword this refers to the global object anything we attach onto the global object becomes

29
00:01:51.980 --> 00:01:54.740
a global variable which means we can use it.

30
00:01:54.830 --> 00:02:00.830
Outside of this function that might seem like something we might want to do but it's actually very bad

31
00:02:00.830 --> 00:02:02.240
practice.

32
00:02:02.240 --> 00:02:06.520
Let's quickly revisit how variables and scope work in javascript.

33
00:02:06.530 --> 00:02:13.010
I'm going to declare a variable called dog and set the value to be the string crusty and then going

34
00:02:13.010 --> 00:02:19.280
to make a function called Meet person and then side declare a variable called person using the marquee

35
00:02:19.280 --> 00:02:22.390
word and set it equal to the string part.

36
00:02:22.460 --> 00:02:28.130
Since I declared this variable inside of the function and I'm not returning its value from the function

37
00:02:28.550 --> 00:02:31.960
I do not have access to it outside of the function.

38
00:02:31.970 --> 00:02:37.530
However since I declared my dog variable in the global scope I have access to it everywhere.

39
00:02:38.370 --> 00:02:44.070
Now we can get around the problem of not being able to access our person variable i omitting the VAR

40
00:02:44.070 --> 00:02:45.910
keyword inside of our function.

41
00:02:46.200 --> 00:02:48.420
However that's bad practice.

42
00:02:48.420 --> 00:02:53.910
It's generally best practice to declare all of our variables at the top of our code even if they do

43
00:02:53.910 --> 00:02:58.290
not have a value and then assign those values at a later time.

44
00:02:58.290 --> 00:03:04.860
Unfortunately since the keyword this is the global object it's quite easy to accidentally declare global

45
00:03:04.860 --> 00:03:07.110
variables inside of a function.

46
00:03:07.110 --> 00:03:08.790
Let's see an example.

47
00:03:08.790 --> 00:03:13.320
I'm going to make a function call a mistake and then side set a property on the keyword.

48
00:03:13.330 --> 00:03:16.390
This called that idea and assign it to the string.

49
00:03:16.440 --> 00:03:22.220
Oops now I am going to call that function and I have access to my bad idea variable.

50
00:03:22.380 --> 00:03:29.770
I've just created a global variable from a function in S-5 a previous version of javascript something

51
00:03:29.770 --> 00:03:36.680
called strict mode was added to help us try to write a javascript code when strict mode is enabled.

52
00:03:36.700 --> 00:03:38.740
You can see at the top here you place the text.

53
00:03:38.740 --> 00:03:40.840
Use strict in double quotes.

54
00:03:40.960 --> 00:03:42.060
The value of the keyword.

55
00:03:42.060 --> 00:03:45.940
This when inside of a function is undefined.

56
00:03:45.940 --> 00:03:52.750
This means if we try to attach properties onto the keyword this when in strict mode we get a type error.

57
00:03:52.910 --> 00:03:58.080
In this video you reviewed the first rule for determining the value of the keyword this and saw how

58
00:03:58.080 --> 00:04:02.200
we can accidentally create global variables inside of functions.

59
00:04:02.270 --> 00:04:07.270
We also saw how strict mode can prevent us from making that mistake in the next video.

60
00:04:07.300 --> 00:04:13.100
I will be discussing the second rule and what the value of the keyword this is when inside of a declared

61
00:04:13.160 --> 00:04:14.600
object see there.
