WEBVTT
1
00:00:01.490 --> 00:00:06.070
Now that we have a good understanding of props and state it's time to talk about component lifecycle

2
00:00:06.080 --> 00:00:11.600
methods which tell you things like when the component is first loaded when it's unloaded and when the

3
00:00:11.600 --> 00:00:17.900
component is being rendered again Our objective will be to describe the component lifecycle methods

4
00:00:18.300 --> 00:00:22.650
and to describe use cases for the component lifecycle methods.

5
00:00:22.660 --> 00:00:29.490
First we'll talk about mounting So mounting happens when the component is first rendered in the DOM.

6
00:00:29.650 --> 00:00:33.160
The first step will be the constructor method which we've seen before.

7
00:00:33.310 --> 00:00:39.280
Next component will mount inside your component you can implement component will mount and that will

8
00:00:39.280 --> 00:00:44.650
tell you when the constructor is finished but we haven't quite called render yet.

9
00:00:46.530 --> 00:00:48.620
Then next will be our render call.

10
00:00:48.960 --> 00:00:55.710
And finally component did mount component did mount and be invoked after your component's markup has

11
00:00:55.710 --> 00:00:57.480
been placed in the DOM.

12
00:00:57.510 --> 00:00:59.100
This is after the DOM is loaded.

13
00:00:59.130 --> 00:01:00.360
This is before.

14
00:01:00.630 --> 00:01:05.700
It's also important to note here that the component will mount and the component did mount method are

15
00:01:05.700 --> 00:01:08.520
only called once per the lifetime of a component.

16
00:01:08.820 --> 00:01:16.740
So if you have something that's set up prolate it might make sense to put it in one of these methods.

17
00:01:16.740 --> 00:01:20.980
Next up is unmounting So this is when your component gets taken out of the DOM.

18
00:01:21.030 --> 00:01:26.820
For instance if the component was in an array of elements and then that element got deleted and the

19
00:01:26.820 --> 00:01:32.220
only method here is component will unmount and this is something you might want to use if you need to

20
00:01:32.220 --> 00:01:34.260
clean up something inside of your component.

21
00:01:34.260 --> 00:01:39.690
For example if you started a set interval which we'll see later this might be a good place to cancel

22
00:01:39.690 --> 00:01:44.000
the set interval when the component is unmounted.

23
00:01:44.010 --> 00:01:46.460
Next up is updating.

24
00:01:46.480 --> 00:01:51.360
So this happens whenever set state is called First you'll get component will receive props.

25
00:01:51.550 --> 00:01:58.180
If any of our props have changed then should component update should computer update you can implement

26
00:01:58.180 --> 00:01:59.080
yourself.

27
00:01:59.080 --> 00:02:02.840
And if you return false from this method the component will not render.

28
00:02:02.890 --> 00:02:06.900
So it's a way to short circuit re-act normal render behavior.

29
00:02:07.090 --> 00:02:12.250
This is not something that I recommend using very often only in very special cases when you have to

30
00:02:12.310 --> 00:02:15.160
optimize your code for some reason.

31
00:02:15.190 --> 00:02:22.940
But again don't use this unless you really need to because it can often lead to more problems and solutions.

32
00:02:22.950 --> 00:02:26.500
Next up component will update which will get calls right before the render.

33
00:02:26.640 --> 00:02:29.460
So you can see what Propst and state are about to be updated.

34
00:02:30.640 --> 00:02:34.080
The render method with the new state and new prop's.

35
00:02:34.270 --> 00:02:39.090
And then finally component did update with the previous props and previous state.

36
00:02:39.160 --> 00:02:43.240
This method you could use for something like logging for example if you wanted to log every time you

37
00:02:43.240 --> 00:02:50.630
render one of the method you can use force update force update we'll skip should component update.

38
00:02:50.650 --> 00:02:54.340
Now if you have a shared component update that returns FALSE For whatever reason.

39
00:02:54.520 --> 00:02:59.260
And you know you want to force an update you might use the force update function.

40
00:02:59.260 --> 00:03:02.620
Again this is not a use case that I'd recommend using very often.

41
00:03:02.620 --> 00:03:06.690
Most of the time react does a better job than of deciding when to render something or not.

42
00:03:08.540 --> 00:03:12.680
Leslie I want to say that the re-act docs have a pretty good description of all these lifecycle methods

43
00:03:13.070 --> 00:03:15.810
and potential use cases for using them.

44
00:03:15.830 --> 00:03:18.710
So definitely go check out these re-act docs.

45
00:03:18.710 --> 00:03:21.970
Next up we'll talk about some use cases for these lifecycle methods.
