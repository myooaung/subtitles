WEBVTT

00:00:01.470 --> 00:00:07.530
So now that we know how much you create objects reflect how to call math and how to change prototypes

00:00:07.530 --> 00:00:07.920
.

00:00:07.920 --> 00:00:15.780
I'll have a look at the properties of objects because refl. offers a lot of methods dealing with Object

00:00:15.840 --> 00:00:24.090
properties to do that or create yet another class the Famous Person class here and give it a constructor

00:00:24.090 --> 00:00:32.370
of course which expects a name and age here and then I'll set this name equal to name and this age equal

00:00:32.370 --> 00:00:34.690
to age as always.

00:00:34.800 --> 00:00:39.120
Now I'll treat a person and again I'll use the new key word here to do this.

00:00:39.150 --> 00:00:41.270
I'll pass Max and my age.

00:00:41.430 --> 00:00:44.160
So far that's nothing you haven't seen before.

00:00:44.910 --> 00:00:48.500
But now I want to get a property.

00:00:48.510 --> 00:00:56.700
And here we also have refl. get and refl. get I passed the object and then the name of the property

00:00:56.710 --> 00:01:00.310
I want to get like that to get the name property.

00:01:00.330 --> 00:01:04.460
So what do you expect to see in the console if a hit run.

00:01:05.320 --> 00:01:10.710
Well you see Max because it is just another way of using a person's name.

00:01:10.980 --> 00:01:17.710
And by any means use person dog name if you knew you want to access the name property on person.

00:01:17.910 --> 00:01:25.050
You have to understand that all those reflect my efforts are also meant for use in a more dynamic environment

00:01:25.380 --> 00:01:33.540
where the object you want to access and or where you feel you want the axis are passed dynamically and

00:01:33.540 --> 00:01:36.320
therefore you couldn't use the normal dot notation.

00:01:36.480 --> 00:01:42.450
But then you could pass them as arguments to reflect and take advantage of do you reflect the API to

00:01:42.450 --> 00:01:47.700
get the property of an object you don't know at the time you write you your code and a property you

00:01:47.700 --> 00:01:51.130
don't know what time you're writing code that's important to understand.

00:01:51.240 --> 00:01:56.520
And again you will see this a bit more when we actually get to the proxy API in the last module but

00:01:56.520 --> 00:02:00.040
for that we have to cover the refl. API first.

00:02:00.120 --> 00:02:03.120
Of course we could also combine this with getters and setters.

00:02:03.120 --> 00:02:12.440
So let's say we have a getter here which says access to the name and Turin's this underscore name.

00:02:12.870 --> 00:02:13.410
What do you think.

00:02:13.470 --> 00:02:15.490
Now get if I get run.

00:02:16.140 --> 00:02:17.270
Still Max.

00:02:17.460 --> 00:02:23.230
So name of course now Exorcist is Gedor and not underscore name but since we get this underscore that

00:02:23.250 --> 00:02:26.930
name in the getter your Wissler can be used to reflect API.

00:02:26.940 --> 00:02:32.240
But I think it's important to understand that getters and setters are no problem you and using it reflect

00:02:32.250 --> 00:02:33.170
API.

00:02:33.480 --> 00:02:36.960
For now I'll get rid of this get or just wanted to show this.

00:02:37.260 --> 00:02:45.780
Now since we can get values of course we all can set them so we can be refl. set method can use to reflect

00:02:45.780 --> 00:02:51.010
setf method to your to then also pass the object then the.

00:02:51.030 --> 00:02:55.230
Well name of the property and then the value which you want is set.

00:02:55.230 --> 00:02:59.490
So for example if I want to change my name to Anna do you think.

00:02:59.540 --> 00:03:01.750
Now see if I had run.

00:03:02.850 --> 00:03:03.420
Well now I get.

00:03:03.420 --> 00:03:09.360
And of course because I change to propert here and again using dot notation is a lot shorter if you

00:03:09.360 --> 00:03:11.990
know the object and the property at the value.

00:03:12.150 --> 00:03:17.910
But if one or all of these fields are dynamic especially the object or the property name well then the

00:03:17.910 --> 00:03:26.910
refl. API is a great way to write a generic entry point and to write a generic way to change your properties

00:03:27.920 --> 00:03:28.720
or get upset.

00:03:28.740 --> 00:03:31.370
Also take a third argument.

00:03:31.820 --> 00:03:38.880
They take receiver and receiver is here again like that too that this keyword in order to show it or

00:03:38.880 --> 00:03:42.230
create a new object and all name it.

00:03:42.330 --> 00:03:50.890
Man this would just be literal notation and it will also have a name which is Mark.

00:03:51.250 --> 00:03:59.830
Now I can pass this at the first argument to the get method here and then set this to mom.

00:03:59.830 --> 00:04:04.760
So pass this object as a receiver as this for argument to the get method.

00:04:05.010 --> 00:04:08.760
What do you think I get if I had run.

00:04:09.000 --> 00:04:09.920
I still get the answer.

00:04:09.990 --> 00:04:12.190
So don't be deceived by that.

00:04:12.220 --> 00:04:19.770
This is not referring to this name because well we're accessing the mom word excuse me the name property

00:04:19.770 --> 00:04:22.470
directly on the person object.

00:04:22.620 --> 00:04:30.340
It won't change though if I use again or again like this name and I return this underscore name.

00:04:30.750 --> 00:04:35.600
Now I'll rename this to underscore name and also in the mom object.

00:04:35.610 --> 00:04:39.290
What do you think will it now happen if I hit run.

00:04:39.390 --> 00:04:46.980
Now I get none because now we're using to get her and then together we're using this to access our property

00:04:46.990 --> 00:04:47.130
.

00:04:47.250 --> 00:04:51.600
Yes we also did this in the constructor but in the constructor it's different here we're kind of creating

00:04:51.600 --> 00:04:52.520
this property.

00:04:52.770 --> 00:04:55.020
But in the getter we're trying to access it.

00:04:55.170 --> 00:05:02.340
So now we can override what this should refer to ever overwriting it with mom with this mom object your

00:05:02.910 --> 00:05:10.770
so we're telling refl. get that you want to X server person access to the name property but this should

00:05:11.070 --> 00:05:13.830
refer to Mom to does mom object.

00:05:14.010 --> 00:05:20.280
No mom of course has underscore a name which is what we Axelson together here and therefore even though

00:05:20.310 --> 00:05:27.860
this Geter gets cold in our prison this will refer to mom and not to our person.

00:05:28.170 --> 00:05:35.180
Might be confusing but in the end isn't that confusing object reach which you want to use property which

00:05:35.180 --> 00:05:37.740
you want to use.

00:05:37.740 --> 00:05:39.030
This should refer to.

00:05:39.090 --> 00:05:45.270
That's how we can split up this method call and as I said the same was available for a settings so if

00:05:45.270 --> 00:05:53.490
I quickly create a set or you're wherever you set a value and then I basically set this underscore name

00:05:53.520 --> 00:05:55.800
equal to B value.

00:05:55.980 --> 00:06:05.260
If I pass the receiver here and I pass Mom what do you think I'll see if I had run.

00:06:05.490 --> 00:06:12.030
Well now I see Anna because now the setter overrides the underscore name property in man.

00:06:12.030 --> 00:06:15.110
Since that is our receiver and the name of this argument is pretty good.

00:06:15.120 --> 00:06:20.270
It's the receiver what will receive our well this call here.

00:06:20.310 --> 00:06:28.860
So this keyword to overriding underscore name in the mom object your and therefore we're executing the

00:06:29.700 --> 00:06:33.870
error when we get our property.

00:06:33.870 --> 00:06:40.510
We're passing the name property and we're passing the mom off trick of which we overrode the underscore

00:06:40.510 --> 00:06:41.400
in a.

00:06:41.760 --> 00:06:51.150
So if we print the mom object itself you're after overwriting it or after setting it as a receiver when

00:06:51.150 --> 00:06:53.540
changing the name what do you think we'll see.

00:06:53.550 --> 00:07:01.670
If I run we see Anna because while we did overwrite it it was the receiver of this keyword.

00:07:01.680 --> 00:07:08.910
Therefore this was changed in our mom object not in our Person object so it's up too confusing it's

00:07:08.910 --> 00:07:15.310
really just a forth argument you can add or a third argument when getting it which allows you to change

00:07:15.360 --> 00:07:15.940
you.

00:07:15.960 --> 00:07:18.480
While this keyword a change to what.

00:07:18.480 --> 00:07:22.730
This keyword should refer and why would you want to do this.

00:07:22.920 --> 00:07:25.760
Well of course rarely.

00:07:25.800 --> 00:07:33.090
I guess in order to really change the object but imagine you are using their like API in another context

00:07:33.570 --> 00:07:40.260
where you want to make sure that this actually refers to the object of which you want to access the

00:07:40.260 --> 00:07:46.260
property and not to something else due to the behavior of the essential script which you all know can't

00:07:46.260 --> 00:07:47.090
happen.

00:07:47.340 --> 00:07:50.200
So after all it is getting unsetting that this keyword.

00:07:50.340 --> 00:07:56.780
Here's another Mefford but it's a simple one related to well getting and setting properties.

00:07:57.150 --> 00:08:00.480
Sometimes you want to check if a certain property exists in the first place.

00:08:00.480 --> 00:08:05.180
Right and for that you can simply use the hazmat first.

00:08:05.470 --> 00:08:10.650
But then you pass two arguments the object and the property name.

00:08:10.650 --> 00:08:12.000
So what do you think I get to find out.

00:08:12.000 --> 00:08:20.720
Run well like a true because person has this name property together here but there is a property.

00:08:20.730 --> 00:08:27.900
It's just encapsulating the underscore name field here so that I can check if a certain property exists

00:08:27.910 --> 00:08:29.100
.