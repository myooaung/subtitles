WEBVTT

00:00:01.300 --> 00:00:08.190
I'll start simple all to create an array as you would with one two three let's say these three numbers

00:00:08.200 --> 00:00:08.500
.

00:00:08.910 --> 00:00:13.950
And then of course I would loop through it with the four off loob to output those well.

00:00:13.970 --> 00:00:16.370
You are probably well aware of that.

00:00:16.530 --> 00:00:21.880
Now I will also use a concept taught in the last module symbols.

00:00:22.140 --> 00:00:30.030
We have a number built in such a well known symbol which actually is the iterator this every object

00:00:30.030 --> 00:00:31.030
has.

00:00:31.050 --> 00:00:40.260
So an array of course is a a ball and an object is iterable if it has a certain yvel known symbol built

00:00:40.290 --> 00:00:40.650
in.

00:00:40.650 --> 00:00:46.680
That's javascript's way of knowing that you actually Cantalupo it because otherwise it would know if

00:00:46.680 --> 00:00:51.770
the thing you want to do over actually provides the logic to do that.

00:00:51.780 --> 00:00:56.860
Therefore we have this bolt and symbol we can access this and actually print it.

00:00:57.030 --> 00:01:03.700
If we check the type of aere and then simple iterator.

00:01:03.720 --> 00:01:08.110
And again that's Cester such a well known bulled in symbol here.

00:01:08.160 --> 00:01:14.480
Accessing a property on this every object which has some unique ID I don't know but it's represented

00:01:14.480 --> 00:01:20.900
from that bolt in symbol if I know Heidrun we see function.

00:01:21.150 --> 00:01:28.830
So the value of that property which has this symbol is actually a function and also we see it seems

00:01:28.830 --> 00:01:32.360
to exist otherwise we would have Coplan an error or something like that right.

00:01:32.580 --> 00:01:41.970
So we have an iterator which kind of seems to be a function or we have the iterator function here which

00:01:41.970 --> 00:01:45.190
is used when the actual loop through an array.

00:01:45.510 --> 00:01:49.420
So since we're getting a function Let's call this function.

00:01:49.710 --> 00:01:58.520
And I will actually assign it to a variable every symbol iterator and execute this function.

00:01:58.510 --> 00:02:03.210
Now then I will print out the iterator.

00:02:03.210 --> 00:02:06.800
So let's see what that is.

00:02:06.900 --> 00:02:10.510
It's an object and you can see aere iterator here.

00:02:10.650 --> 00:02:14.510
So we seem to be on the right track but it is an object.

00:02:14.520 --> 00:02:18.450
And actually it's an object that only has one method.

00:02:18.620 --> 00:02:23.790
The next method that I can call this method and let's see what we print.

00:02:23.790 --> 00:02:24.920
If I now hit run

00:02:27.530 --> 00:02:34.680
you see we get a new object which has a done property which is set to false and a value of 1.

00:02:34.680 --> 00:02:36.620
Now what do you want that kind of looks like.

00:02:36.620 --> 00:02:38.920
The first value in our view.

00:02:39.300 --> 00:02:43.660
So let's try again by calling it two times.

00:02:44.100 --> 00:02:52.690
After a number here looks good we see two objects the first one has the value 1 the second one has devalued

00:02:52.720 --> 00:02:54.180
you both times.

00:02:54.180 --> 00:02:55.820
Done is false.

00:02:55.830 --> 00:03:03.570
So you see by calling it multiple times we kind of seem to be stepping through the values of this array

00:03:03.580 --> 00:03:03.650
.

00:03:03.660 --> 00:03:05.790
And that's exactly what iterator does.

00:03:05.790 --> 00:03:13.200
As I explained in the first major in a small much it's a function or an iterator is an object which

00:03:13.200 --> 00:03:15.830
knows how to access a collection.

00:03:15.870 --> 00:03:18.010
This object holds.

00:03:18.010 --> 00:03:22.420
Now of course an array is an object which whole purpose is to hold and collection.

00:03:22.500 --> 00:03:27.670
But as you will later see you can also create your own objects and implements certain iterators stare

00:03:27.680 --> 00:03:28.040
.

00:03:28.410 --> 00:03:32.400
So with it next we're stepping through those values.

00:03:32.610 --> 00:03:37.680
And what do you think we'll see if I exercised a third time and run this

00:03:40.660 --> 00:03:41.910
course as he values free.

00:03:41.910 --> 00:03:47.070
But maybe you were expecting to see done being said equal to True's since we're now.

00:03:47.100 --> 00:03:47.660
Well done.

00:03:47.670 --> 00:03:49.030
We access the last word.

00:03:49.020 --> 00:03:50.110
You right.

00:03:50.610 --> 00:03:58.140
Well the thing is the iterator or these are the function here doesn't really know that we have two axes

00:03:58.220 --> 00:03:58.320
.

00:03:58.410 --> 00:04:00.070
One extra time.

00:04:00.150 --> 00:04:04.940
And if I now run you see the last time we get an undefined value.

00:04:04.950 --> 00:04:06.650
But now that is true.

00:04:06.810 --> 00:04:13.890
So that is only true once it really has exhausted all the values in the collection and therefore we

00:04:13.890 --> 00:04:17.850
print three times an object with done force and the individual values.

00:04:18.000 --> 00:04:24.860
And it is only well done once we were reaching the first undefined value here.

00:04:25.470 --> 00:04:31.960
And that is iterators that is an example for both iterator and how to use it.

00:04:32.070 --> 00:04:37.420
Now to actually see the big advantage of that and how to use your own objects.

00:04:37.480 --> 00:04:40.130
That's something I'll come to in the next ELECTRESS