WEBVTT

00:00:01.410 --> 00:00:03.620
Walk into an album which will in this course.

00:00:03.690 --> 00:00:04.780
Symbols.

00:00:04.920 --> 00:00:09.030
So what are its symbols some can be counted.

00:00:09.040 --> 00:00:14.230
2d part of metaprogramming programming tools introduced by Year 6.

00:00:14.300 --> 00:00:18.930
Among some of the refl. and proxy API which you will learn later in this course.

00:00:19.260 --> 00:00:25.700
So symbols basically are a new primitive type like number as strings or booleans.

00:00:25.980 --> 00:00:30.870
And the main thing they do with they provide a unique identifier.

00:00:30.870 --> 00:00:34.560
Now the interesting thing is you don't see the identifier itself.

00:00:34.560 --> 00:00:41.520
You only have the symbol so you don't have a key like ID 5 x 5 5 10 9 Zabern or something like that

00:00:41.520 --> 00:00:41.750
.

00:00:41.910 --> 00:00:47.040
You only have to symbol and you know that it will represent a unique identifier.

00:00:47.040 --> 00:00:49.890
Now why is that useful.

00:00:50.130 --> 00:00:56.900
Well if you think about a possible use case I'm probably the most important one with symbols.

00:00:56.910 --> 00:01:04.460
You can add properties to objects the symbol would be the key in that object of which you know that

00:01:04.460 --> 00:01:11.550
are definitely unique and that of course has a great advantage because think of having a function which

00:01:11.550 --> 00:01:17.160
let's say takes an object as an argument and then changes something about that object that adds a new

00:01:17.160 --> 00:01:18.500
property.

00:01:18.510 --> 00:01:25.410
Now theoretically depending on your code you could pass a object to that function with let's say a property

00:01:25.890 --> 00:01:32.790
ID 5 and the function would add such an ID therefore overwriting the old one.

00:01:32.790 --> 00:01:37.410
Now if someone wants you can make sure that that doesn't happen because you get a unique identifier

00:01:37.710 --> 00:01:45.110
which is unique and therefore you can add it to make sure that you never overwrite anything.

00:01:45.180 --> 00:01:47.990
Also symbols are not iterable.

00:01:48.030 --> 00:01:56.280
That means if you loop over an object with a for loop for example you won't see the symbols as keys

00:01:56.280 --> 00:01:56.510
.

00:01:56.520 --> 00:02:03.420
That being said there is of course a method to access it still but it's not output in such a loop so

00:02:03.420 --> 00:02:06.330
that our symbols theoretically.

00:02:06.390 --> 00:02:08.960
Now let's have a look at them in code.