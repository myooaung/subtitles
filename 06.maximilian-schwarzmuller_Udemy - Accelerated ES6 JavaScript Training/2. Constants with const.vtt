WEBVTT

00:00:01.440 --> 00:00:03.640
That with Konst it's a different thing.

00:00:03.780 --> 00:00:09.860
I'll get rid of my last code here and I'll create a constant age 27.

00:00:09.930 --> 00:00:19.920
What do you think will happen if I now had to run it's still 27 so that's not too surprising.

00:00:20.040 --> 00:00:24.380
But what happens if I now set age to be 29.

00:00:24.390 --> 00:00:27.870
What do you think we'll see in a console if hit and hit or run.

00:00:28.800 --> 00:00:33.840
Well we'll get an error or that we're trying to assign to a constant variable cell.

00:00:33.840 --> 00:00:36.570
This really is a variable in this case.

00:00:36.690 --> 00:00:37.700
It's a constant.

00:00:37.710 --> 00:00:44.160
It may not be changed therefore it's common to write it all uppercase to clearly show that this is a

00:00:44.160 --> 00:00:45.190
constant.

00:00:45.330 --> 00:00:50.910
And if we ever try to change it will we get an error because that is not possible a concept that you

00:00:50.910 --> 00:00:54.270
find once and then it should keep its value.

00:00:54.270 --> 00:01:02.160
Now what do you think will happen if I create an airy ages just here for example with 27 29 and 31.

00:01:02.640 --> 00:01:07.460
And of course I can print age this year if I had to run.

00:01:07.980 --> 00:01:09.650
Well we see the parade.

00:01:10.030 --> 00:01:19.020
Now what do you think happens if I push the new value onto that array and then print it again like this

00:01:19.020 --> 00:01:19.530
.

00:01:19.530 --> 00:01:21.300
What do you think we'll see in the console.

00:01:21.300 --> 00:01:27.260
Will we get an error while we see the original array.

00:01:27.480 --> 00:01:30.720
And then we print a new array with 25 added to it.

00:01:30.720 --> 00:01:32.100
Now that's certainly strange.

00:01:32.100 --> 00:01:40.370
Didn't I say that a constant may not be changed later on but it seems like we did change it right.

00:01:40.380 --> 00:01:41.340
Not really.

00:01:41.340 --> 00:01:45.720
Remember that Aries as well as objects are referenced types.

00:01:45.750 --> 00:01:52.880
This means what does this constant actually hold it doesn't hold those values.

00:01:53.010 --> 00:01:57.440
It does hold a pointer to those values a pointer to this array.

00:01:57.480 --> 00:02:04.320
The array is placed somewhere in memory and the variable or constant here only holds a pointer to that

00:02:04.320 --> 00:02:05.920
space in memory.

00:02:06.000 --> 00:02:11.190
Therefore we don't change to a constant We're not changing the point or we're not pointing to a new

00:02:11.190 --> 00:02:12.140
object.

00:02:12.210 --> 00:02:17.580
We're only changing the values to which a pointer points but that is totally valid.

00:02:17.580 --> 00:02:25.200
We're not we're not hurting our constants here because again the constant value the pointer isn't changed

00:02:25.230 --> 00:02:27.090
only the value in the background.

00:02:27.120 --> 00:02:30.010
That's why we are able to manipulate this array.

00:02:30.210 --> 00:02:37.680
And for the same reason we would all be able to change an object like let's say we have our constant

00:02:38.100 --> 00:02:43.340
object which might look like this.

00:02:43.350 --> 00:02:47.100
And here we have our age set to 27.

00:02:47.100 --> 00:02:52.000
Now of course a print object here and there after all was printed down here.

00:02:52.080 --> 00:02:57.340
There after all go to my object and change the age to be 30.

00:02:57.360 --> 00:03:03.800
If I now had run we also see that the object was changed for the very same reason as the array.

00:03:03.840 --> 00:03:05.130
It's a reference type.

00:03:05.130 --> 00:03:07.570
The pointer isn't changed only the value.

00:03:07.590 --> 00:03:14.130
I'm really stressing this because this is important to understand how constants work here and why you

00:03:14.190 --> 00:03:22.400
are able to change the constant or to be precise to change the value of that constant.

00:03:22.590 --> 00:03:27.360
If you are using what reference types because you're not really changing the value only the value to

00:03:27.360 --> 00:03:28.620
which the pointer is pointing