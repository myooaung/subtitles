WEBVTT

00:00:01.250 --> 00:00:03.870
Know in this lecture I went to introduce the rest.

00:00:03.900 --> 00:00:06.480
OPERATOR Now what is the rest.

00:00:06.480 --> 00:00:10.740
Operator all let's show it by presenting some code.

00:00:11.100 --> 00:00:17.920
So let's say we have an array of numbers 1 2 3 4 5 like this.

00:00:18.180 --> 00:00:26.430
And then we will create a function which will hold sum up and this function should somehow get this

00:00:26.430 --> 00:00:27.020
array.

00:00:27.470 --> 00:00:33.660
Or we should get a list of numbers and then I want to loop through them.

00:00:33.660 --> 00:00:35.760
So let equals zero.

00:00:35.840 --> 00:00:46.040
It's smaller then you add should be the array I get here to add length plus plus.

00:00:46.350 --> 00:00:55.130
And then I will simply add a assault variable which takes the value of the current iteration.

00:00:55.170 --> 00:01:00.260
Of course all initialize result here which should be 0 at the beginning.

00:01:00.660 --> 00:01:09.880
And then I will return result and if I now call this function here some up and I pass.

00:01:09.900 --> 00:01:12.020
Number is this number is array.

00:01:12.060 --> 00:01:21.750
What do you think we'll see if I had run we see an error because it is it's really helpful to write

00:01:21.840 --> 00:01:26.030
this correctly as well as to use a semi-colon.

00:01:26.020 --> 00:01:33.090
Here is another run we see 15 which is five plus four is nine plus frees 12 14 15 OK.

00:01:33.100 --> 00:01:34.830
So it works that's great.

00:01:34.830 --> 00:01:41.040
Now sometimes there are cases where you don't have the numbers you want to add or you want to work with

00:01:41.040 --> 00:01:43.440
the values you want to work with in an array.

00:01:43.470 --> 00:01:48.850
Instead we have a list of values and you want to be able to pass this list of values.

00:01:48.990 --> 00:01:53.400
So let's say you have one hundred 10 and 20 and this is no array.

00:01:53.400 --> 00:01:55.680
Notice that it's just a list of values.

00:01:55.680 --> 00:01:57.520
These are free arguments.

00:01:57.570 --> 00:02:03.690
However I'm only expecting one argument and by some for some other function also has no chance of knowing

00:02:03.870 --> 00:02:08.150
how many arguments it will get might be one month one hundred.

00:02:08.190 --> 00:02:08.840
It doesn't.

00:02:08.840 --> 00:02:09.300
No.

00:02:09.420 --> 00:02:17.310
So I can't write it with let's say Arek 1 and art 2 and then add them up that is not possible because

00:02:17.310 --> 00:02:19.920
I would need to know how many arguments I get.

00:02:19.920 --> 00:02:22.770
That is where is the rest parameter comes in.

00:02:22.770 --> 00:02:30.390
It allows me to still get two at this Airey but since I'm not passing an array I add three dots in front

00:02:30.390 --> 00:02:31.080
of it.

00:02:31.260 --> 00:02:38.220
The Freep dots here are the rest parameter and the three dots will actually convert this list of numbers

00:02:38.550 --> 00:02:41.030
into an array of numbers.

00:02:41.040 --> 00:02:45.740
So if I now hit run you see 130.

00:02:45.900 --> 00:02:54.960
And to make this clear I'll even print the to add argument here and if for now it run you see that this

00:02:54.960 --> 00:02:58.480
actually is an array even though I did not pass one.

00:02:58.530 --> 00:03:05.850
You also solve that behavior in the past in years 5 already you have for example Dymov or check with

00:03:05.850 --> 00:03:08.890
the Max function to get the maximum value.

00:03:08.910 --> 00:03:13.190
Now this function also expects to get a list of values and not an array.

00:03:13.200 --> 00:03:22.170
So internally This function was already using something like this to well be dynamic or to be flexible

00:03:22.170 --> 00:03:24.600
regarding the number of arguments that gets passed.

00:03:24.600 --> 00:03:29.100
And now you were able to write something like this on your own with the rest parameter which simply

00:03:29.130 --> 00:03:34.620
takes a list of arguments doesn't have to be numbers could be strings could be mixed values and then

00:03:34.620 --> 00:03:38.480
just packs them together in an array.

00:03:38.490 --> 00:03:44.480
So therefore if I for example do change one element here QBE of type string.

00:03:44.540 --> 00:03:45.650
Now mid-run.

00:03:45.990 --> 00:03:52.310
Well you see we got it all so packed together into an array though of course the value now different

00:03:52.410 --> 00:03:58.860
because it's first added 110 and then just add a 20 in a string here.

00:03:58.860 --> 00:04:04.570
So therefore we got this string value is still the correct result of the addition but it still works

00:04:04.570 --> 00:04:04.590
.

00:04:04.590 --> 00:04:08.270
We are able to pass anything here and convert it into an array with the rest.

00:04:08.270 --> 00:04:09.270
Operator.

00:04:09.480 --> 00:04:12.710
In this function argument here that's important.

00:04:13.080 --> 00:04:16.580
We can use the rest operator in this function argument call