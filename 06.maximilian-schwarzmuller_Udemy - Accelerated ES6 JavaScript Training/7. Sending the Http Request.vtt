WEBVTT

00:00:01.380 --> 00:00:09.280
Back in the chest fall I want to use my HTP storm service the one I just created.

00:00:09.450 --> 00:00:16.170
Therefore I'm importing it here from my HD Pido chess file.

00:00:16.170 --> 00:00:21.120
And keep in mind I also mentioned this in the modules module.

00:00:21.120 --> 00:00:25.530
This Dutchesse at the end shouldn't and won't be needed.

00:00:25.560 --> 00:00:29.760
If you were able to write this natively in the browser.

00:00:30.000 --> 00:00:33.990
But for now using this system yes loader as a helper.

00:00:34.200 --> 00:00:40.710
We need to add DOT checks to tells us to check as well which Phonse specifically it has to look at.

00:00:41.110 --> 00:00:44.400
In the end this should work with the outdoor chair.

00:00:44.490 --> 00:00:47.430
So that's only a temporary work around here.

00:00:48.090 --> 00:00:49.810
So what do I want to import.

00:00:49.860 --> 00:00:53.820
Well I want to import the HTP class.

00:00:53.820 --> 00:00:59.420
This one here which I export in this HTP file.

00:00:59.420 --> 00:01:03.920
So if that I got well able but I need to pass a URL there right.

00:01:04.170 --> 00:01:14.640
So I'm going to create this u r l and back in the API here I'm just fetching this link because in the

00:01:14.640 --> 00:01:20.240
very first by by city name here and then all news or.

00:01:20.290 --> 00:01:25.200
HTP I have to write this because it's not included in the link then I paste the link.

00:01:25.200 --> 00:01:30.730
And of course the name here should be replaced with your city name so plus city name.

00:01:31.170 --> 00:01:40.030
But then as I always said we need to add some additional things I need to add my app ID.

00:01:40.050 --> 00:01:41.490
So it is API.

00:01:41.560 --> 00:01:47.510
You can find your dashboard and I also want to fetch everything in metric units.

00:01:47.700 --> 00:01:54.730
And even if you are in the US you might want to do this too because later on I'll implement a method

00:01:54.840 --> 00:01:58.440
or something you will see what it is later.

00:01:58.740 --> 00:02:02.450
In my app which will automatically Koln.

00:02:02.510 --> 00:02:07.980
My metric degrees in this case degrees Celsius into Fahrenheit.

00:02:08.220 --> 00:02:13.260
Now could fetch a concern had in the first place but I want to show you how you can implement such a

00:02:13.260 --> 00:02:15.200
default converting mechanism.

00:02:15.210 --> 00:02:19.310
Therefore I'm always fetching in a metric here and I will convert it manually.

00:02:19.830 --> 00:02:22.850
And as I just said append your app idea.

00:02:22.860 --> 00:02:27.630
And for this you need to use the app ID key here that's important app ID.

00:02:27.660 --> 00:02:30.930
One word equals.

00:02:31.080 --> 00:02:32.780
And then your app ID.

00:02:32.790 --> 00:02:41.990
Now I'm going to store this in a new constant app ID which was created at the very top let's say app

00:02:42.000 --> 00:02:44.990
Id only if it is blank for now.

00:02:45.000 --> 00:02:49.310
But you are already full in your app idea from your dashboard.

00:02:49.470 --> 00:02:53.030
And with that you are always created in the way we need to create it.

00:02:53.400 --> 00:03:01.920
Now if of course I can simply use my HTP class call the static fetch state method and pastie you were

00:03:01.920 --> 00:03:02.920
l.

00:03:03.440 --> 00:03:10.840
And now remember these HGP class or this static method to be precise returns a promise.

00:03:11.070 --> 00:03:15.190
Well Therefore I can simply chain a call here.

00:03:15.220 --> 00:03:24.630
Remember the promise module and handled response data I'd get back that arrow function you for example

00:03:25.800 --> 00:03:33.750
and I will also change a catch block to catch any potential Aeros in case we reject the promise.

00:03:34.380 --> 00:03:42.090
And here I will simply throw an alert with the error of course here in the success case I want to do

00:03:42.300 --> 00:03:47.640
some additional things but I'll come back to that in the next lectures.