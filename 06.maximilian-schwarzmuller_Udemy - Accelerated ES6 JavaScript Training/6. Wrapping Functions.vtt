WEBVTT

00:00:01.520 --> 00:00:09.330
Okay so back into a bit of more understandable topics here You also can ref functions with proxies not

00:00:09.330 --> 00:00:10.340
just objects.

00:00:10.380 --> 00:00:17.820
Actually you can read pretty much any object and functions are just kind of an object with a proxy.

00:00:18.120 --> 00:00:24.630
So to do this all create a new function which is like whole log and desex back to a message and all

00:00:24.630 --> 00:00:32.370
it does is it will basically say lock entry create the message call and then print out the message we

00:00:32.370 --> 00:00:34.210
passed there.

00:00:34.230 --> 00:00:37.710
So of course we may simply use this like this.

00:00:37.890 --> 00:00:39.340
Hello.

00:00:40.230 --> 00:00:45.080
And if Aranda is unsurprisingly of course you get log entry create at message below.

00:00:45.120 --> 00:00:46.770
So far so good.

00:00:46.770 --> 00:00:53.740
Now let's introduce a proxy or first let's create a handler for it as prox.

00:00:53.820 --> 00:01:01.500
Now as you know on the reflect API we got this apply function to call functions and therefore I create

00:01:01.500 --> 00:01:03.930
my Apply trap here.

00:01:04.440 --> 00:01:09.870
Now here I also have a function of course and this function takes the same arguments as reflect API

00:01:09.900 --> 00:01:14.460
function does the target d this argument so what.

00:01:14.490 --> 00:01:21.810
This should stand for and a list of arguments which of course is an array.

00:01:22.560 --> 00:01:27.000
Well then I could check if arguments less

00:01:29.760 --> 00:01:34.330
bang is better than one.

00:01:34.350 --> 00:01:41.970
So if you try to pass more than one argument for example if this is the case let's make it different

00:01:42.070 --> 00:01:44.210
check if it's equal to 1.

00:01:44.280 --> 00:01:53.530
So only if we pass exactly one argument then I will return refl. apply target.

00:01:53.970 --> 00:01:56.750
These are arguments list.

00:01:56.790 --> 00:02:00.060
Again that's a great way I can directly use your flight API.

00:02:00.060 --> 00:02:01.780
I don't have to do anything else.

00:02:01.980 --> 00:02:08.320
I can call the function like that but the next step I set up a proxy.

00:02:08.400 --> 00:02:17.400
So the proxy will be of course new proxy like before I want to wrap my lock function so I pass it like

00:02:17.400 --> 00:02:18.950
this without parentheses.

00:02:19.200 --> 00:02:23.960
And then my handler and I can simply call proxy.

00:02:25.560 --> 00:02:26.310
Hello.

00:02:26.490 --> 00:02:29.330
I execute my proxy like a function.

00:02:29.340 --> 00:02:36.920
I'm not calling proxy applied here because in the last example to get and said I didn't call DOT get

00:02:37.060 --> 00:02:38.300
set that you were right.

00:02:38.520 --> 00:02:41.670
So I just executed like a function.

00:02:41.670 --> 00:02:44.440
Now what do you think I'll get if I had run.

00:02:45.270 --> 00:02:47.980
Well I get my log message because I pass one argument.

00:02:48.370 --> 00:02:53.760
But but do you think I'll get if I pass an extra argument let's say 10 what will now have

00:02:56.880 --> 00:02:58.060
absolutely nothing.

00:02:58.290 --> 00:03:03.890
Because now we're failing this check here therefore we're not actually calling this out dysfunction

00:03:04.290 --> 00:03:05.370
and we're done.

00:03:05.370 --> 00:03:07.520
Nothing else happens.

00:03:07.540 --> 00:03:15.150
That's just an natural great way to not only wrap your objects and use traps there to kind of regulate

00:03:15.210 --> 00:03:22.110
the property taxes but also here and functions to make sure that function calls help the way you want

00:03:22.110 --> 00:03:23.140
it to happen.

00:03:23.310 --> 00:03:30.510
And here again free your creativity and think about all the cases where you might want to use that or

00:03:30.510 --> 00:03:33.560
where it could be useful to you.