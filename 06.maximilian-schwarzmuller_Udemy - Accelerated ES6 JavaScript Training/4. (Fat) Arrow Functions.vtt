WEBVTT

00:00:01.620 --> 00:00:03.250
So we had to look at Latin Konst.

00:00:03.260 --> 00:00:08.140
But another important field or a big change happened are functions.

00:00:08.580 --> 00:00:13.050
You probably know the way to write functions like this.

00:00:13.050 --> 00:00:20.280
I have my function with parentheses and then I have my body where I may do something for example like

00:00:20.310 --> 00:00:26.650
hello to the console and if I now run this function like this you'll of course see Hello.

00:00:26.880 --> 00:00:34.120
So that isn't too new but iOS 6 introduces a new syntax we can use to write or functions.

00:00:34.140 --> 00:00:39.510
I can rewrite this function here in the following way.

00:00:40.050 --> 00:00:48.150
I can assign it to a variable f n that is equal to and then I keep the parentheses.

00:00:48.150 --> 00:00:54.950
But then I use does that arrow is Sidus equal sign followed by the greater than sign.

00:00:55.320 --> 00:00:59.090
And if I now had run what do you think will happen.

00:00:59.250 --> 00:01:00.270
It still works.

00:01:00.270 --> 00:01:02.840
This is just a different way to write this function.

00:01:02.970 --> 00:01:05.000
And I'll explain what happens here.

00:01:05.310 --> 00:01:12.270
The pair of parentheses here stands for the arguments you want to pass to disfunctions in this function

00:01:12.270 --> 00:01:18.450
not passing any arguments but an important thing to know is we always have to provide the empty pair

00:01:18.450 --> 00:01:25.440
of parentheses if we're not passing any arguments then separated by these fat arrow as it is called

00:01:25.440 --> 00:01:25.910
.

00:01:25.950 --> 00:01:32.270
You have the function body and and work inside of this body all you execute your code.

00:01:32.280 --> 00:01:37.430
Now since we're only having one line of code there is even a shorter way to write this.

00:01:37.470 --> 00:01:44.170
I can remove the belly braces and simply write the function like this.

00:01:44.280 --> 00:01:48.190
If I now Heidrun you'll still see it works.

00:01:48.360 --> 00:01:55.890
So again if I only have one line of code I may leave out all the rest and write my function like this

00:01:55.890 --> 00:01:56.150
.

00:01:56.160 --> 00:02:03.120
Now while this might look a bit strange it's simply a shorter way to write or functions but it also

00:02:03.120 --> 00:02:06.630
has another feature to which I will come back later.

00:02:06.630 --> 00:02:10.370
First I want to talk a little bit more about the syntax and how it works.

00:02:10.560 --> 00:02:17.400
Here we're printing something with the console but imagine actually we would expect to get something

00:02:17.400 --> 00:02:21.120
back from this function which we could print to the console.

00:02:21.120 --> 00:02:26.430
Now the cool thing is if all your function does is have one line of code and return something with that

00:02:26.430 --> 00:02:34.890
line of code you could also simply add there's no return keyword or anything like that.

00:02:34.920 --> 00:02:36.630
Just what you want to return.

00:02:36.720 --> 00:02:41.020
If I now had run what do you think we'll see what we see.

00:02:41.030 --> 00:02:41.750
Hello.

00:02:41.760 --> 00:02:47.610
So this function here is technically the same as this function here

00:02:54.210 --> 00:02:56.720
as much shorter of course.

00:02:56.790 --> 00:03:02.680
So that's one thing but what if I do have more code than just one line.

00:03:03.010 --> 00:03:05.910
Well then I reintroduce my colleague braces here

00:03:09.000 --> 00:03:10.570
and then I can do whatever I want to do.

00:03:10.590 --> 00:03:19.460
For example I might have my variable A and my variable B and I want to return a plus b.

00:03:20.020 --> 00:03:23.400
If I run what do you think we'll see.

00:03:23.730 --> 00:03:30.770
We see five so we're using this function body like you would use it in a normal function or like in

00:03:30.770 --> 00:03:34.580
a function we know it from the ears fivesome next.

00:03:34.710 --> 00:03:40.980
So this works fine but we also have this shorter way of writing it if we only have to read a statement

00:03:41.040 --> 00:03:43.110
the way you saw before.

00:03:43.110 --> 00:03:48.930
Now let's also talk about the arguments I'm not passing any arguments set that you need to provide this

00:03:48.960 --> 00:03:51.660
empty pair of parentheses in this case.

00:03:51.760 --> 00:03:56.780
So how does this change if they actually do pass arguments.

00:03:57.150 --> 00:04:00.480
Let's say I want to pass a and b to it.

00:04:00.510 --> 00:04:07.710
So like 3 and 8 for example and I'm expecting a and b here and then does this to Sendak's how I write

00:04:07.710 --> 00:04:08.580
this.

00:04:08.580 --> 00:04:15.420
I'm simply passing the arguments inside of the parentheses like do you have it in the traditional function

00:04:15.420 --> 00:04:15.930
statement.

00:04:15.930 --> 00:04:19.770
You probably know and then I can call this function.

00:04:19.830 --> 00:04:24.540
So if I now had run we see 11 now.

00:04:24.540 --> 00:04:33.060
Note of course that I again can get rid of everything but D A plus B term here and since I'm only having

00:04:33.060 --> 00:04:34.970
one line and I'm returning this.

00:04:35.070 --> 00:04:36.620
So if I hit wrong with.

00:04:37.110 --> 00:04:38.920
So if I had run with that.

00:04:39.390 --> 00:04:41.360
I also see 11.

00:04:41.860 --> 00:04:49.260
Now the cool thing is if I only have one argument so let's say I don't have B but this is always 5 some

00:04:49.260 --> 00:04:50.990
only passing a.

00:04:51.450 --> 00:04:55.680
What do you think will happen if I call this function like this.

00:04:56.610 --> 00:04:58.180
Well I got eight.

00:04:58.260 --> 00:05:02.550
And what do you think will happen if I still pass an argument.

00:05:03.700 --> 00:05:04.640
Well let's ignore it.

00:05:04.650 --> 00:05:10.890
I still get eight but just never a co-feature if I only have one argument then I may and leave out the

00:05:10.890 --> 00:05:19.080
parentheses and that's important to know that is the only condition or the only case where I don't need

00:05:19.080 --> 00:05:19.850
parentheses.

00:05:19.860 --> 00:05:27.030
If I have one argument if I have no arguments I need parentheses if I have two or more arguments I need

00:05:27.030 --> 00:05:27.500
them two.

00:05:27.510 --> 00:05:33.930
But if I only pass one argument I write I might write this function like this very very short of course

00:05:33.930 --> 00:05:34.300
.

00:05:34.320 --> 00:05:40.980
So for now at around we see 8 and is the shortest possible way I could think of writing this function

00:05:40.980 --> 00:05:43.660
except for maybe trimming out the whitespace here.

00:05:44.070 --> 00:05:50.930
So this are all functions in its basics or with the core syntax there is to it.

00:05:50.940 --> 00:05:55.890
I want to find that you see here right that way is that you save characteris that allows you to write

00:05:55.890 --> 00:05:58.650
functions in a more concise and shorter way.

00:05:58.770 --> 00:06:05.260
Of course I can also use functions like this in let's say Kolpak.

00:06:05.370 --> 00:06:11.040
So if I have my set time odd function here I may pass this function like this.

00:06:11.040 --> 00:06:17.100
And then the second argument to this time on functions I passed the interval 1 millisecond so to do

00:06:17.100 --> 00:06:19.530
something after 1 second.

00:06:19.530 --> 00:06:26.760
Now of course you're returning something doesn't really suffice so I will instead simply log hello and

00:06:26.850 --> 00:06:33.710
owls and not get any arguments here so I'll just pass parentheses like this.

00:06:33.870 --> 00:06:36.040
And you autocomplete here is really helpful.

00:06:36.050 --> 00:06:36.900
Thank you.

00:06:37.350 --> 00:06:40.500
So for now I have to run what you think will happen.

00:06:41.670 --> 00:06:43.970
I get hello after one second cell.

00:06:43.980 --> 00:06:47.190
This is a place where I could use functions as well.

00:06:47.190 --> 00:06:53.670
Generally I can use error functions wherever I used normal functions before as and yet they are Chesed

00:06:53.670 --> 00:06:56.060
functions just a different syntax.

00:06:56.520 --> 00:07:00.570
However there is one big addition to them that I haven't talked about yet.

00:07:00.810 --> 00:07:07.920
It's concerning that this keyword and javascript as you might be aware the this keyword oftentimes is

00:07:07.920 --> 00:07:15.990
the root of a lot of problems or a lot of mis understanding the least and it can lead to good behaviour

00:07:16.000 --> 00:07:19.060
or you were not expecting you to the fact hell.

00:07:19.080 --> 00:07:25.400
This is assigned to different parts of the thread objects and you want to learn more about that.

00:07:25.530 --> 00:07:30.180
Definitely Google for some articles on that or check out my Chalis good boot camp course where I will

00:07:30.180 --> 00:07:32.760
also explain how this works.

00:07:32.760 --> 00:07:40.050
Now you are most human you are aware of how this works and I want to show you how it differs with use

00:07:40.050 --> 00:07:40.830
and text.

00:07:40.920 --> 00:07:43.440
That arrow functions and the all functions