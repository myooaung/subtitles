WEBVTT

00:00:01.350 --> 00:00:08.340
Now an interesting thing is all we get rid of that again here when I'm looping I could still use the

00:00:08.550 --> 00:00:10.150
entries math.

00:00:10.200 --> 00:00:15.810
And you rightfully would say which said sesterces made because I don't have keyboard in Paris so why

00:00:15.810 --> 00:00:17.510
do any entries right.

00:00:17.850 --> 00:00:24.610
Well let's see what happens if I had run I still would get a race for the first value is kind of the

00:00:24.610 --> 00:00:24.990
key.

00:00:24.990 --> 00:00:27.410
And the second value is d value.

00:00:27.420 --> 00:00:29.610
Second element is the value.

00:00:30.060 --> 00:00:37.950
And does this make a whole of sense because of course the two always equal since the key is always the

00:00:37.950 --> 00:00:40.480
value since there really isn't the key.

00:00:40.650 --> 00:00:42.180
That's just the way it's set up right.

00:00:42.180 --> 00:00:46.080
You can get your key value pairs vertically is always the value.

00:00:46.150 --> 00:00:52.610
Indeed you can also get to keys with the keys method here and you will lock when you and you also would

00:00:52.620 --> 00:00:55.140
have a value this method to lock the values.

00:00:55.160 --> 00:01:00.350
And then you lock one to two because well there is no key value pairing.

00:01:00.370 --> 00:01:03.170
So why do those methods exist here.

00:01:03.480 --> 00:01:04.630
Well there there.

00:01:04.650 --> 00:01:09.040
You may use them but in the end of course a set only stores values.

00:01:09.090 --> 00:01:11.090
So no real need to retrieve keys.

00:01:11.100 --> 00:01:17.070
And indeed as you saw there is no GET method to get a value by key or anything like that.