WEBVTT

00:00:01.380 --> 00:00:05.220
I want to start with the object object itself.

00:00:05.490 --> 00:00:13.020
So if we have a object like let's say this one here where we have our property A which is 1 and then

00:00:13.020 --> 00:00:22.440
we have our object to which might look like this with B which is to what's name the first of chief one

00:00:22.440 --> 00:00:31.120
actually then we get a new method object a sign which basically allows us to merge multiple objects

00:00:31.740 --> 00:00:34.070
so this won't work like that.

00:00:34.170 --> 00:00:39.360
I will create this merged object and of course I could have use let instead of war here.

00:00:39.570 --> 00:00:44.870
So the treat is Murcia object with the object assign method.

00:00:45.060 --> 00:00:49.650
So the assign the static assign method on the built in object object.

00:00:50.010 --> 00:00:55.590
And here I pass as a list of parameters all the objects I want to merge.

00:00:55.620 --> 00:00:57.990
So no aere just a list of them.

00:00:57.990 --> 00:01:01.520
For example object one object to.

00:01:02.010 --> 00:01:08.730
Now if I then print out the newly created object so will look what do you think will happen

00:01:12.320 --> 00:01:14.400
.

00:01:14.970 --> 00:01:18.790
I was thinking about cutting that out but I actually think that's.

00:01:19.170 --> 00:01:20.180
Yeah I like that.

00:01:20.340 --> 00:01:23.610
So of course maybe typing it correctly will work.

00:01:23.610 --> 00:01:26.660
So what do you think will happen.

00:01:27.150 --> 00:01:33.000
Well we get a new object which is now the combination of the two objects passed to sign.

00:01:33.150 --> 00:01:36.810
So this new object has a and b of course.

00:01:36.810 --> 00:01:43.890
An interesting question is what will happen if we merge two objects which for example have different

00:01:43.890 --> 00:01:49.650
constructors and they are four prototypes so quickly set up such an example.

00:01:49.650 --> 00:01:56.750
So I just created two classes object one and two and then instantiated objects all those classes and

00:01:56.760 --> 00:01:57.960
aren't trying to merge them.

00:01:57.960 --> 00:01:59.440
What do you think will happen now.

00:01:59.530 --> 00:02:03.330
Run Well this still works.

00:02:03.450 --> 00:02:09.530
But of course the interesting question is what is the prototype off dead object.

00:02:09.570 --> 00:02:15.500
Because the prototype of object one will be object one that prototype would object to will have object

00:02:15.500 --> 00:02:23.400
to of prototype also object one is an instance of Object one and you object to hear lowercase 0 is an

00:02:23.400 --> 00:02:25.150
instance of Object too.

00:02:25.190 --> 00:02:26.290
Right.

00:02:26.340 --> 00:02:32.760
And of course we can quickly check that by simply typing object one instance of Object one.

00:02:32.760 --> 00:02:39.990
And if I now Heidrun we'll see true and the same is of course true if I do this for an object to.

00:02:40.140 --> 00:02:43.410
So the question is what is object is this an object.

00:02:43.410 --> 00:02:46.500
Is this an instance of Object 1.

00:02:46.890 --> 00:02:47.390
True.

00:02:47.550 --> 00:02:51.960
And is it an instance of Object to false.

00:02:52.380 --> 00:03:01.200
So Adrie see if the instance of the first object you passed into this a sine function the same was probably

00:03:01.200 --> 00:03:02.510
true forward a prototype.

00:03:02.510 --> 00:03:07.800
So if you check if its prototype I'm checking with the produ property here.

00:03:07.980 --> 00:03:15.870
If that is equal to object 1 prototype Let's see what happens.

00:03:16.800 --> 00:03:26.580
That's true and object to all that's false and just object that general prototype we have in javascript

00:03:26.580 --> 00:03:27.360
.

00:03:27.360 --> 00:03:28.700
That's also false.

00:03:28.740 --> 00:03:33.350
So that's important to understand also if I switched the order here.

00:03:33.510 --> 00:03:38.690
Now if I check if object to use prototype as the prototype will yield.

00:03:38.700 --> 00:03:46.200
True as you can see if I had run Zelle that's important to understand the first object you pass in your

00:03:46.410 --> 00:03:53.430
will be the base object which has its prototype and the well is an instance of this class for example

00:03:53.850 --> 00:03:59.140
and the other objects you merge into that object will be merged into that first one actually.

00:03:59.160 --> 00:04:06.000
So it's not like you create a new object which takes all the other ones but it's more like the first

00:04:06.000 --> 00:04:12.390
object the pass into this assigned function will take all the objects you add as additional arguments

00:04:12.410 --> 00:04:12.640
.

00:04:12.870 --> 00:04:17.610
That's key to understand because if you want to for example add the prototype you have to know which

00:04:17.610 --> 00:04:20.950
prototype to edit in order to give it to the right object.

00:04:20.950 --> 00:04:27.510
You're right now with that functionality in mind there is also another interesting thing you can also

00:04:27.510 --> 00:04:37.730
pass an empty object Esteve first parameter you're like is and then you could pass object 1 and 2 and

00:04:37.730 --> 00:04:41.080
a fine print is new object.

00:04:41.180 --> 00:04:42.540
But do you think we'll now get

00:04:46.220 --> 00:04:54.160
while you get an object with two properties so this merged object but you merge it into a new one.

00:04:54.390 --> 00:05:02.190
And therefore if we check if the prototype here equals object one dot prototype.

00:05:02.190 --> 00:05:04.400
What do you think we'll now get.

00:05:05.310 --> 00:05:11.760
Well we get false because now no longer is object 1 the object into which all the objects are merged

00:05:11.760 --> 00:05:12.050
.

00:05:12.120 --> 00:05:17.470
But instead the new object would be our base object.

00:05:17.490 --> 00:05:20.620
Therefore if I  now Heidrun get truths.

00:05:20.640 --> 00:05:26.140
Now object the prototype is our prototypes since we create a new javascript object here.

00:05:26.580 --> 00:05:33.060
So that's the object assign method really useful to combine multiple objects but of course important

00:05:33.060 --> 00:05:40.080
to keep in mind how it works and that it will actually take the first objects or the first object and

00:05:40.080 --> 00:05:43.470
merge all the other objects into it.

00:05:43.470 --> 00:05:50.860
Objects received a number of cool extension all quickly sketched out two objects here.

00:05:50.910 --> 00:06:00.540
So the person object and thereafter all have my boss object here which also will have a name and my

00:06:00.540 --> 00:06:02.550
boss of course is my girlfriend Anna.

00:06:03.120 --> 00:06:15.000
So we have those two objects and now if I unlock the prototype of my person what do you think we'll

00:06:15.000 --> 00:06:16.960
get if I had run.

00:06:18.000 --> 00:06:26.100
Well you got Optik object and if we check if this is object or prototype we'll of course get true because

00:06:26.100 --> 00:06:32.280
it's normal javascript object and therefore it's like if you were created with new object and therefore

00:06:32.280 --> 00:06:35.290
the object prototype is its prototype.

00:06:35.370 --> 00:06:46.090
Now a new method added to this the object class here is to set prototype off Meffert.

00:06:46.130 --> 00:06:54.810
Now as the name implies with Dad we can change the prototype often object after it was created now we

00:06:54.810 --> 00:07:00.870
already could set the prototype with the object create method if you remember that that's already built

00:07:00.930 --> 00:07:01.950
in function.

00:07:02.130 --> 00:07:06.920
But with that we would set the prototype at a time we create an object.

00:07:07.080 --> 00:07:11.880
Now of said prototype off we can change it after the object was created.

00:07:11.880 --> 00:07:18.510
So for example I could pass my person and the second argument would be the prototype a one to set boss

00:07:18.510 --> 00:07:19.730
for example.

00:07:20.130 --> 00:07:28.860
So now if I check again after resetting this if my prototype is object or prototype What do you think

00:07:28.860 --> 00:07:36.450
we'll get on the concept while we get true for the first check which just before I reset the prototype

00:07:36.900 --> 00:07:40.420
and then I get false so the prototype was actually overwritten.

00:07:40.710 --> 00:07:45.530
Now of course my new prototype would be boss as we can do.

00:07:45.530 --> 00:07:53.460
Check if I add this if it now it run we get true twice because a check against my real new prototype

00:07:53.460 --> 00:07:53.800
.

00:07:54.020 --> 00:07:56.530
That of course also has a natural implication.

00:07:56.610 --> 00:08:01.370
If I now print the name of per isn't what do you think we'll now get.

00:08:02.030 --> 00:08:05.720
Well of course we get true twice but I still get name.

00:08:05.730 --> 00:08:12.310
Maybe where I get Max I mean maybe you were expecting Anna but we have the name on our person.

00:08:12.330 --> 00:08:17.370
So Chulbul script isn't reaching out to the prototype it already found a name property on the object

00:08:17.370 --> 00:08:18.350
itself.

00:08:18.420 --> 00:08:25.980
But if I remove the name here and I had run again and you would see Anna because now we're not finding

00:08:25.980 --> 00:08:31.500
this name property on the object itself and therefore Chibuzor for each other prototype which is boss

00:08:32.070 --> 00:08:35.210
and that will find the name property here and therefore print.

00:08:35.670 --> 00:08:43.470
So that were two very important additions to the object object which I wanted to show you and which

00:08:43.470 --> 00:08:50.710
in my opinion will be useful to you and might help you in your applications.