WEBVTT

00:00:01.530 --> 00:00:08.270
Now ESX also offers to school methods you can use to gather with promises.

00:00:08.500 --> 00:00:15.210
For example I'll quickly copy and paste into two promises I created offscreen and that are just normal

00:00:15.210 --> 00:00:20.210
promises which will resolve after one and two seconds.

00:00:20.310 --> 00:00:25.560
The first one will resolve and the second one will be rechecked that year.

00:00:26.130 --> 00:00:28.710
So those promises if I would use promise one.

00:00:28.710 --> 00:00:35.820
Then we would get resolved after one second and if it would use promise to then we would get nothing

00:00:35.820 --> 00:00:35.910
.

00:00:35.910 --> 00:00:42.650
If I specify a second argument to the function or Also the catch function then you won't get a check

00:00:42.660 --> 00:00:47.560
that after two seconds but only built in promise object.

00:00:47.630 --> 00:00:49.940
You also got this all method.

00:00:50.340 --> 00:00:56.270
Now all expects to get an array and this array should list all the promises.

00:00:56.280 --> 00:00:59.660
We kind of want to execute so promise one and two.

00:01:00.330 --> 00:01:04.870
So we combine those promises into one single one if you want to put it like this.

00:01:04.950 --> 00:01:13.690
Therefore I can then also call the then function on it and it is then function call here all specify

00:01:13.690 --> 00:01:19.790
the success case and not just name the past arguments access.

00:01:19.800 --> 00:01:29.200
You make this clear and I would lock success to the console but I'll also have my catch block here.

00:01:29.650 --> 00:01:32.970
Bullet would catch any errors and yes it could also be of use.

00:01:32.970 --> 00:01:37.240
A second argument and then function here before of course.

00:01:38.100 --> 00:01:43.810
So now this catch block would log my order to the console.

00:01:44.520 --> 00:01:50.090
What do you think will happen if I now have to run.

00:01:51.300 --> 00:01:57.190
We get to check that after two seconds and that's extremely important.

00:01:57.330 --> 00:02:03.390
Deeds Brewis promise theoretically is successful but wifi or function.

00:02:03.420 --> 00:02:06.750
We combine all promises into one promise kind of.

00:02:07.110 --> 00:02:13.710
And we wait for all those promises here to finish because technically it's still individual promises

00:02:14.490 --> 00:02:17.670
and only if all of them are resolved.

00:02:17.970 --> 00:02:21.210
Will the overall promise here be resolved.

00:02:21.210 --> 00:02:28.380
So if a change is to resolve resolve and i o get run

00:02:32.040 --> 00:02:37.010
we get an array with resolved and resolved so with the two resolved values.

00:02:37.230 --> 00:02:41.220
But as soon as one single promise year rejects

00:02:43.590 --> 00:02:46.690
no rissoles value will be passed.

00:02:46.710 --> 00:02:51.030
Instead we only get the error or value or you recheck the divide.

00:02:51.150 --> 00:02:56.100
So all promis have to resolve if only one of them rejects.

00:02:56.100 --> 00:03:02.460
None of them will finish successfully and we will only reach to catch block or the second argument and

00:03:02.460 --> 00:03:06.140
the then function here that's important.

00:03:06.150 --> 00:03:12.210
Now as an alternative to prompt as all we all have promise race.

00:03:12.210 --> 00:03:14.760
Now what could you imagine would happen if I now had run

00:03:18.140 --> 00:03:20.940
but get resolved.

00:03:20.940 --> 00:03:28.500
So promise race is different and all where all ways forward you last promised to finish.

00:03:28.500 --> 00:03:32.900
Which of course in this case is this one waiting two seconds.

00:03:32.900 --> 00:03:38.790
Re-assessed the name implies we'll wait for the first one to finish and only take the result of that

00:03:38.790 --> 00:03:40.800
first promise in account.

00:03:41.130 --> 00:03:49.170
So as long as the Quakers promise is resolved we also resolve this overall promise here which is why

00:03:49.170 --> 00:03:54.280
we reach the then block here or why we print out the success message.

00:03:54.480 --> 00:03:59.340
If the first promise won't be rejected then all this promises would be rejected so that's still the

00:03:59.340 --> 00:04:00.460
same behavior.

00:04:00.510 --> 00:04:06.250
They are all take into account gabber But here only the first one to finish.

00:04:06.420 --> 00:04:09.610
Well decide what the overall resolves should be.

00:04:09.630 --> 00:04:16.650
Whereas by all all promises are actually while combined and taking into account when looking at the

00:04:16.740 --> 00:04:17.920
results they yield