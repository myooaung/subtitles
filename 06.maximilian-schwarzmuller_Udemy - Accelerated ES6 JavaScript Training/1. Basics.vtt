WEBVTT

00:00:01.570 --> 00:00:03.720
So it's proxy AAPI time now.

00:00:03.930 --> 00:00:05.980
What is the proxy AAPI all about.

00:00:06.060 --> 00:00:09.680
Well here I actually got some slides to show that.

00:00:10.170 --> 00:00:12.090
How do we use proxies.

00:00:12.210 --> 00:00:14.610
Imagine you have an object.

00:00:14.790 --> 00:00:20.430
It has a property we have word that a name and the value you use Macs.

00:00:20.430 --> 00:00:25.940
Now your source code wants to access this object that wants to get the name let's say.

00:00:26.400 --> 00:00:30.740
So far that's nothing too uncommon I guess.

00:00:31.020 --> 00:00:38.120
Now a proxy basically is a wrapper for this object which means it rhapsode it and clueless is it.

00:00:38.610 --> 00:00:44.120
And now if you want to access this we have to go frood as proxy.

00:00:44.460 --> 00:00:47.940
Now currently unsigned the proxy isn't doing anything.

00:00:47.970 --> 00:00:54.840
We have to set up certain traps which means we trap certain kinds of access actions regarding these

00:00:54.840 --> 00:00:55.870
object.

00:00:55.890 --> 00:01:02.130
For example you might have to get trapped and if we have such a get trapped then our source code is

00:01:02.130 --> 00:01:05.870
not able to directly get this value.

00:01:06.090 --> 00:01:08.400
Instead it will be trapped.

00:01:08.400 --> 00:01:15.480
So the trap will capture the request and it has to get through to request or through the trap to actually

00:01:15.480 --> 00:01:16.390
get the value.

00:01:16.410 --> 00:01:20.580
Now in that trap we of course may run any kind of code you want.

00:01:20.580 --> 00:01:26.730
Now this example might resemble the getters and setters which you already saw but there are a lot more

00:01:26.730 --> 00:01:27.790
traps than that.

00:01:27.870 --> 00:01:34.000
And actually the traps aren't exactly the methods you learned in your reflect the API module.

00:01:34.140 --> 00:01:35.550
So let's have a look at this.

00:01:35.670 --> 00:01:36.180
The code