WEBVTT

00:00:01.380 --> 00:00:09.000
So as a last example here I'll make my max class here a little bit shorter so that it only works like

00:00:09.000 --> 00:00:13.680
this or get rid of this console log on.

00:00:14.040 --> 00:00:20.740
That's all fine and knowing when to create a new class and I would trade that here at the top.

00:00:21.020 --> 00:00:30.510
I'll name it helper that let's say this class where I have a certain method which I want to use for

00:00:30.510 --> 00:00:32.870
all my killed that really is a helper class.

00:00:32.880 --> 00:00:35.500
I don't want to create objects off this blueprint.

00:00:35.520 --> 00:00:38.090
I don't want to instantiate it.

00:00:38.160 --> 00:00:46.020
I want to be able to access the help or Muffat method like let's say it has a method called lock twice

00:00:46.020 --> 00:00:47.790
.

00:00:47.790 --> 00:00:51.160
This will take a message as an input.

00:00:51.650 --> 00:01:02.480
No it does is it prints the message to the console to times like that.

00:01:02.490 --> 00:01:11.370
Now if I want to use this helper class I still have to kind of do this I have to instantiate it and

00:01:12.720 --> 00:01:15.600
then I can call helper log.

00:01:15.670 --> 00:01:26.380
Why is locked and if I now run we see a lot two times but that's bad or not what I want I don't want

00:01:26.380 --> 00:01:29.130
to have to instantiate it here.

00:01:29.220 --> 00:01:37.570
It would be better if I had a call that could call like this helper lock twice directly on the class

00:01:37.580 --> 00:01:37.850
.

00:01:37.920 --> 00:01:39.630
While this does work what do you think will happen.

00:01:39.630 --> 00:01:45.430
I had run we get an error that this is not a function.

00:01:45.750 --> 00:01:48.450
And the reason for this is this just doesn't work like this.

00:01:48.450 --> 00:01:52.170
We can't access a method on a class directly.

00:01:52.170 --> 00:02:01.110
We have to create an object of that class but like in many languages there is a special keyword the

00:02:01.200 --> 00:02:08.960
static keyword which makes a method static which means you may access it without instantiating this

00:02:08.970 --> 00:02:16.200
class for us so without creating an object of that class for just so by simply adding this static keyword

00:02:16.200 --> 00:02:16.240
.

00:02:16.260 --> 00:02:24.570
If I now had run it works and I can access this locked wise method without instantiating the helper

00:02:24.570 --> 00:02:30.720
class and this is of course great especially for things like this when creating syringing certain helper

00:02:30.720 --> 00:02:35.040
classes place where you want to bundle certain functionalities.

00:02:35.040 --> 00:02:41.940
Then you can use static to make methods available throughout your code without having to instantiate

00:02:41.940 --> 00:02:47.840
this class or Clate create an object of that class that is really super helpful.