WEBVTT

00:00:01.220 --> 00:00:08.760
I welcome to the first content module in this course on year 6 and this Marchal I want to have a look

00:00:08.760 --> 00:00:15.310
at the most important syntax changes and additions iOS 6 broad and there are quite a lot of them.

00:00:15.340 --> 00:00:17.270
So let's dive right into it.

00:00:17.490 --> 00:00:23.670
So I'm inside chase been here to type my typescript code here on the left and then see it see the output

00:00:23.670 --> 00:00:25.990
in the console right here on the right.

00:00:26.460 --> 00:00:35.800
And the thing I want to start with is Latt and Konst celebs and cons are new keywords added by year

00:00:35.800 --> 00:00:44.010
6 and they allow us to change the way we work with variables or like the named constant plys use constants

00:00:44.020 --> 00:00:44.450
.

00:00:44.880 --> 00:00:48.020
So before I come to the question of why we need that.

00:00:48.060 --> 00:00:50.920
Let me first show you how it works.

00:00:50.940 --> 00:00:57.960
Imagine we have the variable name and in the past would have said name equals max for example and thus

00:00:57.960 --> 00:01:01.760
will still work if I print is name to the console.

00:01:01.770 --> 00:01:05.090
We'll of course see Max.

00:01:05.100 --> 00:01:07.560
So Lars still exists with your sex.

00:01:07.680 --> 00:01:12.640
And of course there will always be the case since we need it for backward compatibility.

00:01:12.690 --> 00:01:18.470
However iOS 6 also offers a different way to treat a variable we can use lat.

00:01:18.750 --> 00:01:23.590
Now with that what do you think will happen if I hit run.

00:01:24.090 --> 00:01:25.450
We still see Max.

00:01:25.530 --> 00:01:30.620
So it seems like it's doing the exact same thing just different syntax right.

00:01:30.720 --> 00:01:33.500
So why would we use LET instead of water.

00:01:33.870 --> 00:01:40.760
Well if you maybe you remember my Chalis mood can cause or are in general familiar with javascript.

00:01:40.770 --> 00:01:48.810
You'll probably know that we have the global scope and the function scope or local scope but javascript

00:01:48.810 --> 00:01:54.630
doesn't really have any block scoping blocks scoping of course refers to the fact that a variable is

00:01:54.630 --> 00:01:59.520
contained between quali braces like in an if statement for example.

00:01:59.790 --> 00:02:03.810
So in the past if we had something like this if true.

00:02:03.930 --> 00:02:10.950
And then between the curly braces so in the body of the statement we would have a variable name named

00:02:10.950 --> 00:02:16.280
name which would be max and if we had run this would work.

00:02:16.530 --> 00:02:21.560
Now with all that this variable is now contained inside this block.

00:02:21.690 --> 00:02:23.070
So what do you think will happen.

00:02:23.100 --> 00:02:24.140
If I had run now

00:02:27.120 --> 00:02:34.740
I'm referring to the name off my a window object and it becomes so much clearer if I use a number name

00:02:34.800 --> 00:02:36.590
like age for example.

00:02:36.780 --> 00:02:38.740
So if I now print out h.

00:02:39.090 --> 00:02:41.990
Well it can get an error that age is not defined.

00:02:42.300 --> 00:02:48.960
So let allows us to use block scoping which means contain the variable in the body like here and the

00:02:48.960 --> 00:02:52.530
truth in the statement where it is defined.

00:02:52.860 --> 00:03:00.140
So if I define it outside of their chool Let's say I also have h a third here.

00:03:00.270 --> 00:03:03.300
What do you think will now happen if I ever had run.

00:03:04.350 --> 00:03:05.800
Well now a C for t.

00:03:05.910 --> 00:03:10.490
Because again the part inside your statement inside this block.

00:03:10.560 --> 00:03:16.380
That's why it's called block scoping isn't Tatchell it's an accessible outside of the statement.

00:03:16.380 --> 00:03:20.390
Therefore if I lock the H inside of this if statement.

00:03:20.730 --> 00:03:28.760
Of course C 27 and 30 sulfurous Prince 27 inside your statement and then 30 outside of it.

00:03:28.980 --> 00:03:32.520
And that is why Latt is really useful and powerful.

00:03:32.580 --> 00:03:38.640
It allows us to finally use block scoping in charmless to which of course is an important addition.

00:03:38.640 --> 00:03:45.320
Clearing many of the confusions that might differ isn't if you used variables in let's say for loops

00:03:45.550 --> 00:03:51.300
and you were able to access them from outside or even the value might have changed inside of that due

00:03:51.300 --> 00:03:55.130
to some external value being sad or anything like that.

00:03:55.220 --> 00:04:01.350
With that you can make sure that the variables you use inside of a block stays inside of that block

00:04:01.560 --> 00:04:05.410
and isn't touched from outside in this next and accessible outside of it.

00:04:05.620 --> 00:04:08.320
So that is why lathis really powerful.

00:04:08.320 --> 00:04:10.300
No why wasn't the largest.

00:04:10.300 --> 00:04:12.590
Changed to work like this.

00:04:12.720 --> 00:04:15.830
Well of course for backward compatibility reasons.

00:04:16.020 --> 00:04:22.470
If you would change you want to behave like this you would pretty sure render a lot of code useless

00:04:22.500 --> 00:04:25.620
because Vohra was used in a different way.

00:04:25.620 --> 00:04:32.240
Therefore it's important to have this new keyboard locked so that was a lot of talking about lap.

00:04:32.250 --> 00:04:38.780
But it's really coord to understand how lead differs from war that we are able to block skill with it

00:04:39.110 --> 00:04:42.100
and that deaded otherwise behaves like Varn.

00:04:42.150 --> 00:04:43.060
It's a variable.

00:04:43.080 --> 00:04:44.180
We may change it.

00:04:44.310 --> 00:04:52.140
We may reassign age here to 29 and if I now run we see twenty nine so we can use it like a variable

00:04:52.140 --> 00:04:52.320
.

00:04:52.320 --> 00:04:54.410
The important difference is the block scope