WEBVTT

00:00:01.330 --> 00:00:03.910
That we already had a close look at the classes.

00:00:04.080 --> 00:00:07.550
But here's an important extension which I don't want to hide.

00:00:08.100 --> 00:00:15.870
If we have a class let's say person and in this class we have our constructor where we want to assign

00:00:15.900 --> 00:00:24.900
our name and let's say we pass the name to the constructor here to then we can also define getters and

00:00:24.900 --> 00:00:28.010
setters for properties in this class.

00:00:28.020 --> 00:00:37.350
So for example I could set up get name like a function here and then in the function body I would return

00:00:37.380 --> 00:00:38.780
this name.

00:00:38.790 --> 00:00:46.970
However now I will prefix it with an underscore because this underscored name this name is private property

00:00:46.990 --> 00:00:54.690
now which isn't accessible from outside but the only way to get it is to access name the getter here

00:00:54.810 --> 00:00:57.470
which will actually turn this private property.

00:00:57.510 --> 00:01:03.870
That's a concept called encapsulation which makes sure that we control the access which flows into our

00:01:03.870 --> 00:01:05.120
class and out of it.

00:01:05.430 --> 00:01:11.970
So with that I can fetch this name and of course the cool thing is I could now also chain a method like

00:01:12.210 --> 00:01:19.310
to uppercase and that would always return me an uppercase name which is exactly what I get or is therefore

00:01:19.380 --> 00:01:21.000
to control the data.

00:01:21.000 --> 00:01:28.590
We actually return we could return it without changing it but we also can't change it or check something

00:01:28.590 --> 00:01:31.020
at a condition whatever we want to do.

00:01:31.350 --> 00:01:38.940
These Satar is all the average size of the coins or to say here we set a new value to name.

00:01:38.940 --> 00:01:41.960
It's also written like a function year.

00:01:42.240 --> 00:01:50.630
And what I'm doing here is basically I assigned this name equal to value or word to whatever I like

00:01:50.730 --> 00:01:57.780
or I add a condition for example that value dot length should be at least two characters long that say

00:01:58.290 --> 00:02:00.700
only if that's the case will I sign this.

00:02:00.690 --> 00:02:03.130
And you well you are wise I.

00:02:03.150 --> 00:02:04.770
Well I won't do this.

00:02:04.770 --> 00:02:07.140
I might print reject that then.

00:02:07.200 --> 00:02:18.810
For example though with all that set up I can actually create a new person and I'll pass Max to it and

00:02:18.900 --> 00:02:24.250
then I will lock this person to the console.

00:02:25.040 --> 00:02:28.850
Oh I don't think we'll see if I now had to run.

00:02:29.610 --> 00:02:37.930
We see your object with that name Max what do you think will happen if I only pass to characterise or

00:02:37.960 --> 00:02:40.010
difficult now see.

00:02:41.040 --> 00:02:43.170
Well we're in the constructor constructors don't forget that.

00:02:43.170 --> 00:02:47.820
So that still works as I am directly assigning the name in the constructor here.

00:02:48.190 --> 00:02:57.180
But once this is done if I now try to change his name and so the called who am a watch what now happens

00:02:57.180 --> 00:03:00.870
if I hit run I get rejected.

00:03:00.870 --> 00:03:02.310
So that doesn't work.

00:03:02.760 --> 00:03:10.290
And if I print person off for doing that while you see it's still maksud wasn't changed.

00:03:10.290 --> 00:03:12.060
If I change it to Anna though

00:03:15.150 --> 00:03:16.830
you'll see it works.

00:03:16.830 --> 00:03:18.250
Now it was check on.

00:03:18.250 --> 00:03:23.840
All we can do is of course access the name as we have a getter as well.

00:03:24.120 --> 00:03:29.040
And with that if I now print is what you think we'll see.

00:03:29.040 --> 00:03:33.320
Now we see the uppercase names as I have this to uppercase function here.

00:03:33.390 --> 00:03:36.420
So that's where getters and setters really shine or what they are.

00:03:36.420 --> 00:03:42.390
Therefore they are asked to control how data is handled or how it is passed into this class or into

00:03:42.390 --> 00:03:45.560
this object and how it flows out of it.

00:03:45.630 --> 00:03:48.450
Of course you don't have to set both.

00:03:48.690 --> 00:04:00.780
You could also only for example provide a setter to think well now if I had run I get undefined because

00:04:00.810 --> 00:04:07.140
we don't have that get or to access to name though of course if I remove the name and print the overall

00:04:07.140 --> 00:04:13.740
object we still see the object and we see that resetting name actually worked.

00:04:13.980 --> 00:04:20.970
And of course as it has no true protection we can still directly access underscore name.

00:04:20.970 --> 00:04:24.280
So that would work too if I tried this.

00:04:24.720 --> 00:04:28.450
But for now Hadj run you see a print Max.

00:04:28.470 --> 00:04:30.770
And so it's not really private.

00:04:30.840 --> 00:04:36.330
This set her get her thing is more something which should help us since we're the person writing our

00:04:36.330 --> 00:04:36.690
code.

00:04:36.720 --> 00:04:45.600
We can control how well how we actually access this and therefore this is a great way to provide certain

00:04:45.600 --> 00:04:47.460
checks for functionalities.

00:04:47.460 --> 00:04:52.550
It doesn't give you a true 100 percent protection though as well.

00:04:52.560 --> 00:04:56.120
This is not private as will always be accessible from outside