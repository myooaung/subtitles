WEBVTT

00:00:01.290 --> 00:00:08.910
All right a very simple example here all create a new object which will name person and person will

00:00:08.910 --> 00:00:13.920
have a name which is Max again and if you're getting bored you are free to choose whatever else you

00:00:13.920 --> 00:00:14.910
want.

00:00:15.570 --> 00:00:22.820
And then I'll tweet a proxy here I'll use the new keyword and then the proxy object the built in object

00:00:22.830 --> 00:00:23.850
of course.

00:00:24.060 --> 00:00:30.310
Now the proxy constructor expect two arguments the first one is to target.

00:00:30.650 --> 00:00:38.220
Let's say that's the person object and the second one is the handler which contains the logic of our

00:00:38.280 --> 00:00:40.720
proxies or the logic of a wrapper.

00:00:41.080 --> 00:00:44.380
Now I find such a handler in the code here too.

00:00:44.670 --> 00:00:47.080
So I will create a handler.

00:00:47.130 --> 00:00:48.730
Of course the name is up to you.

00:00:48.900 --> 00:00:52.280
And that's also a challenge to object as you can see.

00:00:52.800 --> 00:01:01.410
Now this javascript object can define any of the available traps and you make for use 6 proxy to find

00:01:01.410 --> 00:01:03.530
the article on the NBN.

00:01:03.900 --> 00:01:06.630
And here you find all the available traps.

00:01:06.690 --> 00:01:15.360
And as a test set that is simply the math you also saw in the reflect the FBI and now you might understand

00:01:15.360 --> 00:01:21.210
why it is said that the reflector API works great together with the proxy or at least all those I understand

00:01:21.290 --> 00:01:27.120
also showed that so I'll close that and I'll stick to the gets trapped for now.

00:01:27.120 --> 00:01:29.360
But I will show a couple of our traps later too.

00:01:29.370 --> 00:01:32.030
Not all of them but a couple of them.

00:01:32.100 --> 00:01:40.290
So it gets trapped like this by specifying a field named Gatun providing a function and this function

00:01:40.290 --> 00:01:46.200
actually takes two arguments a target and a name.

00:01:46.200 --> 00:01:49.890
Now it takes the same arguments as to reflect API get method dead.

00:01:49.950 --> 00:01:51.850
And that's true for all the trips.

00:01:51.900 --> 00:02:00.150
So these sets trub for example would also take the name or de-valued to which you to set it and to get

00:02:00.150 --> 00:02:03.480
chip of course has the optional third argument the receiver.

00:02:03.480 --> 00:02:06.670
If you remember dead from the refl. API lesson.

00:02:07.650 --> 00:02:17.280
So for now I'll stick to this and I'm basically check dead if I try to access a property which doesn't

00:02:17.280 --> 00:02:19.240
exist on this person.

00:02:19.350 --> 00:02:22.360
I want to return a dummy value.

00:02:22.590 --> 00:02:25.470
Now here we are again in the field of metaprogramming.

00:02:25.620 --> 00:02:27.880
That's great for your applications.

00:02:28.110 --> 00:02:33.780
If you have some code where you don't know where to time you write decode which properties you might

00:02:33.840 --> 00:02:36.210
try to access at runtime.

00:02:36.390 --> 00:02:43.830
The proxy API and its traps can make sure that you kind of return a default value in case you access

00:02:43.830 --> 00:02:45.670
a property which doesn't exist.

00:02:45.810 --> 00:02:47.990
Instead of getting undefined.

00:02:48.450 --> 00:02:56.700
So I'll do this here by simply returning a check or if name actually exists and target remember target

00:02:56.700 --> 00:02:58.210
is just the object.

00:02:58.380 --> 00:03:02.390
It's just a generic way of writing this but this is the object you're trying to access.

00:03:02.400 --> 00:03:07.920
Asked as handler of course can be used on any object or just person.

00:03:07.920 --> 00:03:11.420
So it is the object and name is the name of the property.

00:03:11.430 --> 00:03:13.120
It has nothing to do with this name.

00:03:13.260 --> 00:03:18.660
So I might replace that with age now that I think of it just to make this really distinct from each

00:03:18.660 --> 00:03:19.680
other.

00:03:19.740 --> 00:03:22.830
So that's the name of the property we tried to access on this target.

00:03:22.890 --> 00:03:26.090
Therefore I'd check if this property exists on this target.

00:03:26.400 --> 00:03:35.400
If it is the case then I will simply turn it like so soil X has it on the target this is the normal

00:03:35.400 --> 00:03:41.380
square brackets notation to X's fields or properties on objects but at that.

00:03:41.460 --> 00:03:51.210
If it doesn't exist then I want to return let's say 0 or are let's say non-existent whatever you want

00:03:51.210 --> 00:03:52.720
some default value.

00:03:53.160 --> 00:03:59.790
So back to the example now I created this handler and I can pass it here to my proxy as a second argument

00:03:59.790 --> 00:04:07.080
which expect such a handler an object containing the logic for it as a proxy for this wrapper.

00:04:07.080 --> 00:04:13.690
Now I can use this proxy like a U.S. Breezin object in this case directly.

00:04:13.770 --> 00:04:22.020
I can try to access proxy page and I will do this by logging it out of course so cancel our proxy toward

00:04:22.080 --> 00:04:22.820
age.

00:04:23.280 --> 00:04:33.000
What do you expect to see if I now run with C-27 because H of course is a property this object person

00:04:33.000 --> 00:04:33.700
has.

00:04:34.050 --> 00:04:35.920
And therefore we're returning it.

00:04:35.940 --> 00:04:37.980
That's what we're checking here.

00:04:38.040 --> 00:04:46.080
Now let's say I tried to access proxy name the property name chest removed to not produce any confusion

00:04:46.080 --> 00:04:46.730
here.

00:04:47.090 --> 00:04:51.080
What do you think we now get if I run.

00:04:51.180 --> 00:04:59.610
Well now I get my error message not existed because now we fail when we check if the object person has

00:04:59.610 --> 00:05:01.160
this name.

00:05:01.200 --> 00:05:04.460
So notice that I'm directly calling this on the proxy.

00:05:04.470 --> 00:05:10.820
But since the proxy acts as a wrapper This is like calling it on the object itself.

00:05:10.920 --> 00:05:16.230
But with that extra layer in between the extra layer containing several traps for example in this case

00:05:16.260 --> 00:05:21.440
only one of course and that's also the difference to the default getters and setters.

00:05:21.750 --> 00:05:25.450
With this handler you can use that on any object.

00:05:25.500 --> 00:05:28.280
It's not bound to a certain class or anything like that.

00:05:28.290 --> 00:05:34.420
You can use it on any object and it will always check if this property exists on an object that otherwise

00:05:34.440 --> 00:05:36.660
gives you this default warning.

00:05:36.660 --> 00:05:38.520
And there's always a great improvement.

00:05:38.520 --> 00:05:42.640
Less code easier to maintain and more flexible.

00:05:42.660 --> 00:05:44.610
So really really great thing here.

00:05:44.610 --> 00:05:49.620
This gets trap and of course you can imagine doing similar things with the satrap