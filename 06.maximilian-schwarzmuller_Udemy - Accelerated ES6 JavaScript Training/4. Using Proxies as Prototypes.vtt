WEBVTT

00:00:01.400 --> 00:00:03.340
So Trump down my example a little bit.

00:00:03.350 --> 00:00:08.820
But it's still the person the handler with the getter where I check if the property we try to access

00:00:08.820 --> 00:00:10.360
actually exists.

00:00:10.560 --> 00:00:14.180
And then a wealthy proxy where I wrap this.

00:00:14.460 --> 00:00:16.380
However I'm going to change this.

00:00:16.410 --> 00:00:17.950
I'm not rapping person here.

00:00:17.970 --> 00:00:25.260
Instead I'll grab an empty object so not as empty object gets this handler and therefore of course if

00:00:25.260 --> 00:00:29.130
I try to access proxy name what will I get.

00:00:29.350 --> 00:00:34.080
Non-existent because while this empty object doesn't have any field staff or it doesn't have a name

00:00:34.080 --> 00:00:35.480
as well.

00:00:35.730 --> 00:00:37.680
So what's the sense of this then.

00:00:37.830 --> 00:00:45.390
Well I can use this proxy as a prototype and now things get really fancy because with Dad of course

00:00:45.390 --> 00:00:55.110
I can set a prototype to get the whole inheritance chain going on or to use it on all kinds of objects

00:00:55.390 --> 00:00:55.860
and.

00:00:55.860 --> 00:00:58.980
Well I think that's a really cool and interesting feature.

00:00:59.010 --> 00:01:00.500
So how would we do that.

00:01:00.750 --> 00:01:08.670
Well I can call refl. said prototype off the method you already saw in the refl. API module.

00:01:08.980 --> 00:01:14.650
And here is my prison and I'll set my proxy as a prototype of the person.

00:01:14.670 --> 00:01:21.840
So now the person isn't wrapped with that proxy but the prototype of the person is.

00:01:21.840 --> 00:01:31.320
So now if I try to access personal names I'm not using the proxy or what will I get while I get Macs

00:01:31.320 --> 00:01:36.900
because person does have the name but one that I get if I try to access this person thought hobbies

00:01:36.900 --> 00:01:38.780
.

00:01:39.480 --> 00:01:45.030
Now I get non-existent and I think you immediately see the advantage offered.

00:01:45.060 --> 00:01:51.960
The interesting thing about this approach by making this a prototype I'm again able to directly access

00:01:51.960 --> 00:01:55.480
my object instead of the proxy as we saw it for it.

00:01:55.920 --> 00:02:00.660
But still I have the proxy protection kind of going on.

00:02:00.720 --> 00:02:06.810
Of course the disadvantages if I have traps which I want to apply even to individual object that wouldn't

00:02:06.810 --> 00:02:07.570
work.

00:02:07.830 --> 00:02:14.220
But an example like this one year where I'd check if a certain property exists is perfect for this approach

00:02:14.640 --> 00:02:20.400
because of this I don't have to use a proxy I may use that person but if I try to like try to access

00:02:20.400 --> 00:02:24.580
a non-existent property I still get the proxy protection.

00:02:24.660 --> 00:02:26.150
So it really depends on your needs.

00:02:26.160 --> 00:02:31.400
If you want to have these check before you access your object the object itself.

00:02:31.530 --> 00:02:38.790
Or if you kind of want to have this well protection in the back once you access your object and then

00:02:38.880 --> 00:02:44.220
you might try to well like your X or something which isn't there and therefore protect the prototype

00:02:44.220 --> 00:02:45.000
.

00:02:45.000 --> 00:02:49.950
So I just wanted to show you this and get you to think about it might be useful in your application

00:02:50.040 --> 00:02:51.710
and life here as I just explained.

00:02:51.710 --> 00:02:59.970
It's extremely useful and I think interesting thing that proxies can be prototypes