WEBVTT

00:00:01.290 --> 00:00:06.790
Let's actually see this and let's create a Sex Trip here as well.

00:00:06.810 --> 00:00:14.700
So by providing a number property to this handler object and does sets trap What does it expect.

00:00:14.700 --> 00:00:22.020
Well it expects the target the property the value like to reflect the API does.

00:00:22.230 --> 00:00:27.840
And then for example let's say we want to use this handler for symbolization we want to apply it on

00:00:27.840 --> 00:00:32.580
different objects which all have a shared validation rule.

00:00:32.580 --> 00:00:40.430
For example we know that the value which we want to pass always should be at least two characters long

00:00:40.440 --> 00:00:41.600
something like that.

00:00:41.760 --> 00:00:47.690
So we can't check if well Utada length is greater or equal than two characters.

00:00:47.850 --> 00:00:51.000
And if that is the case here I'll use to reflect the API.

00:00:51.030 --> 00:00:53.450
Really show how it all works together.

00:00:53.610 --> 00:01:02.490
I'll use refl. set and just pass the same parameters I'm getting here with my trap because that's again

00:01:02.510 --> 00:01:07.430
the great connection between trap's proxies and reflect API.

00:01:07.710 --> 00:01:13.830
They have exactly the same methods with exactly the same arguments and therefore I can use them like

00:01:13.830 --> 00:01:14.190
this.

00:01:14.190 --> 00:01:20.480
I use my refl. set method with the arguments getting passed into this trap you're on my proxy.

00:01:20.580 --> 00:01:25.320
If we're not meeting this criterium Well I'm not doing anything.

00:01:25.440 --> 00:01:32.070
So I want to demonstrate this all we introduce to name field your I think you now know that it has nothing

00:01:32.070 --> 00:01:36.360
to do with this name set to max and.

00:01:36.380 --> 00:01:40.450
Well i already wrapped this person with this proxy.

00:01:40.740 --> 00:01:45.120
So now if I try to well let's first try to access it without changing anything.

00:01:45.120 --> 00:01:47.400
What do you think we'll see.

00:01:47.700 --> 00:01:50.260
Max of course.

00:01:50.380 --> 00:01:56.910
I now call proxy that name and that's important don't use person talk Name past when you're directly

00:01:56.910 --> 00:02:01.820
accessing your person you're not using your wrappers so you use proxy to name and set it equal to m

00:02:01.830 --> 00:02:03.740
which clearly is shorter.

00:02:03.760 --> 00:02:08.030
And to characterise what do you think we'll now see it for Heidrun.

00:02:09.090 --> 00:02:16.200
Well I still see Max so de-value wasn't all written because while it was just ignored i didn't match

00:02:16.200 --> 00:02:17.250
this condition here.

00:02:17.250 --> 00:02:23.570
I didn't pass it and therefore the name field was changed.

00:02:23.670 --> 00:02:30.380
Of course if I passed something longer here and ran it again then we see now it was set.

00:02:30.780 --> 00:02:37.800
So you really see the power of traps especially since you can define a handler like that and then use

00:02:37.800 --> 00:02:43.890
it on all kinds of objects you have throughout your application and you'll probably oftentimes have

00:02:43.890 --> 00:02:50.620
certain behaviors you want to use in different places Speedbird a generic validator like this one maybe

00:02:50.640 --> 00:02:57.060
a bit more complex or anything else and you just create such a handler and then with the proxy API you

00:02:57.060 --> 00:03:02.640
dump it on all the object you want on all your objects you want to wrap with it and then just make sure

00:03:02.660 --> 00:03:09.390
to use the proxy instead of the object makes your calls or to access fields and you're good.

00:03:09.460 --> 00:03:15.780
And as I explained you can and you should play around with that and use all the methods set up on the

00:03:15.780 --> 00:03:22.180
refl. API or which we use them there were like the API module you may trap all of those actions.

00:03:22.440 --> 00:03:24.150
And whenever you trap it.

00:03:24.150 --> 00:03:31.340
Keep in mind you can't just use the refl. API with the very same method as to trap name to while paths

00:03:31.380 --> 00:03:34.540
all those values to trap capturers life here.

00:03:34.640 --> 00:03:40.350
In case you want to continue with the action if you don't want to then of course you have to turn something

00:03:40.350 --> 00:03:44.370
else or you change a value and then continue with the action.

00:03:44.370 --> 00:03:45.420
That's all up to you.

00:03:45.420 --> 00:03:53.040
The cool thing is that traps and refl. AP I use the same methods and arguments which makes interaction

00:03:53.040 --> 00:04:01.380
very easy but the only objects I still show some examples on prototypes and on functions.

00:04:01.380 --> 00:04:04.290
And then I have one other addition about proxies