WEBVTT

00:00:01.380 --> 00:00:05.020
So classes are another major addition with 6.

00:00:05.130 --> 00:00:13.080
We of course also have kind of this class mechanics with five prototypes so we have this kind of inheritance

00:00:13.430 --> 00:00:19.770
but with the class keyword and the class functionality it gets a bit clearer and hopefully easier to

00:00:19.770 --> 00:00:20.470
use.

00:00:20.550 --> 00:00:22.720
So let's have a look how all of that works.

00:00:22.830 --> 00:00:30.270
You probably know the a syntax where you would create let's say a person constructor like this and then

00:00:30.270 --> 00:00:32.550
you could create new prisons like

00:00:35.760 --> 00:00:47.760
this and you press the Klasky word works kind of similar it has different features but the overall look

00:00:47.760 --> 00:00:49.900
isn't that different indeed.

00:00:49.910 --> 00:00:53.930
I can actually leave this person creation here.

00:00:53.990 --> 00:00:59.560
Of course I could use lat and set of water but the top part here will change.

00:00:59.700 --> 00:01:05.400
It won't change as I will treat a class instead of a function and I will get rid of the parentheses

00:01:05.410 --> 00:01:05.860
.

00:01:06.270 --> 00:01:09.590
So now if I run this way we won't see anything.

00:01:09.600 --> 00:01:13.050
But I'm also not getting any errors because this is valid javascript.

00:01:13.050 --> 00:01:21.630
I'm just creating a person object oops And I actually can prove this by printing it to the console.

00:01:21.660 --> 00:01:28.680
So if a print this is an object was tweeted Of course it doesn't hold anything but we create an object

00:01:28.700 --> 00:01:29.300
.

00:01:29.320 --> 00:01:36.330
Now I also can give my class some methods for example agreed method and I write them directly inside

00:01:36.330 --> 00:01:37.930
of them without the function keyword.

00:01:37.950 --> 00:01:40.150
But the rest looks like a function.

00:01:40.320 --> 00:01:44.520
And then he or I could say consul Lague Hello.

00:01:45.660 --> 00:01:53.130
And therefore of course I can use my newly created person to say hello if I run this.

00:01:53.130 --> 00:01:54.820
What will they see.

00:01:55.050 --> 00:01:55.480
What we see.

00:01:55.480 --> 00:01:56.270
Hello.

00:01:56.610 --> 00:02:02.460
So basically with the new key word here I'm creating a new object based on the blueprint defined up

00:02:02.460 --> 00:02:04.290
here with declasse.

00:02:04.290 --> 00:02:08.910
So that is really kind of similar to the way constructor functions work.

00:02:09.030 --> 00:02:15.210
But of course with the class here as you can see I don't really have a function which gets executed

00:02:15.220 --> 00:02:15.340
.

00:02:15.570 --> 00:02:21.530
Does greed function here instead of Zoli a method to find in this prison.

00:02:21.570 --> 00:02:23.580
It's just a blueprint.

00:02:24.090 --> 00:02:27.780
How do we add properties to this person then.

00:02:27.960 --> 00:02:34.410
Well for that I would set up a constructor and to create a constructor we have the reserved constructor

00:02:34.470 --> 00:02:35.590
keyword.

00:02:35.590 --> 00:02:41.640
So constructor is a function name where a method name which is reserved for E-6 and this will create

00:02:41.640 --> 00:02:44.030
a constructor for this person.

00:02:44.100 --> 00:02:46.610
We don't need to define it as he saw before.

00:02:46.620 --> 00:02:53.240
But if you want to do some initialization or if you want to give our persons properties we do need that

00:02:53.240 --> 00:02:53.620
.

00:02:53.700 --> 00:02:59.460
So here I can then again use this name equals Max and all this really looks like de-construct for function

00:02:59.460 --> 00:03:02.620
syntax you know from javascript for fight.

00:03:03.090 --> 00:03:10.860
So this is how we give this person class a property which does Person object we create this blueprint

00:03:10.970 --> 00:03:12.120
also have.

00:03:12.420 --> 00:03:20.190
So therefore here if I say Hello my name is and then I print this start name what will we see if Heidrun

00:03:22.140 --> 00:03:29.010
while we see name is Max because this name refers to the Name property of this object and we're initializing

00:03:29.010 --> 00:03:30.220
it here.

00:03:30.270 --> 00:03:36.940
Of course it could also give this constructor a parameter here and set this start name equal to whatever

00:03:36.940 --> 00:03:38.730
they passed to the constructor.

00:03:39.060 --> 00:03:43.850
And then I would add this logic in the place where I create the object here.

00:03:44.100 --> 00:03:52.770
So if I now had run we see the same but now I'm passing the name with the constructor and I'm not initializing

00:03:52.770 --> 00:03:58.440
it for every person but instead every person which I do create has the chance of passing its individual

00:03:58.440 --> 00:03:59.770
name to this class