WEBVTT

00:00:02.600 --> 00:00:10.150
A cool feature is that we actually can all soon change promises or show you how it works here.

00:00:10.500 --> 00:00:13.630
All create a function call.

00:00:13.650 --> 00:00:15.360
Wait a second.

00:00:16.380 --> 00:00:20.390
And this takes seconds as an input

00:00:24.120 --> 00:00:30.520
and it won't simply return me a new promise but it's new promise of course needs to function with free

00:00:30.530 --> 00:00:40.890
solf and reject and then inside of this promise all have a timer so set time out again with a function

00:00:40.890 --> 00:00:42.480
here as a whole bag.

00:00:42.480 --> 00:00:48.210
Once the timer is done and the timer should wait one second because after all the function is called

00:00:48.220 --> 00:00:56.330
Wait a second then it should increment seconds both by 1 and it's short.

00:00:56.490 --> 00:01:00.170
Resolve this and pass the second value.

00:01:00.600 --> 00:01:06.720
I hope you're still with me so I'll only trading a function which returns a Brahmas which has a timer

00:01:07.080 --> 00:01:11.080
and which increments the seconds which have passed and the outer function.

00:01:11.430 --> 00:01:18.960
Then using that function I can call Wait a second and I'll pass in zero at the beginning since we haven't

00:01:18.960 --> 00:01:25.260
weighted one single set and I can then change the then method and I'm just writing this in line to make

00:01:25.260 --> 00:01:27.200
it a bit easier to follow.

00:01:27.810 --> 00:01:35.030
And if you're not outputting anything or doing anything like this instead of also pastie wait a second

00:01:35.040 --> 00:01:36.320
function.

00:01:36.450 --> 00:01:40.560
Now since way the second expects a value expects an argument.

00:01:40.560 --> 00:01:47.610
This argument will automatically be passed because remember our resoldering here gives us de-value which

00:01:47.610 --> 00:01:54.010
resolves seconds in this case and we were using that in the call bag we specified here before.

00:01:54.210 --> 00:01:57.930
Now now wait a second does our coal Bechard it also takes an argument.

00:01:58.080 --> 00:02:05.000
So it will take 80 seconds from the resoled here and then I'll just add another and then call.

00:02:05.580 --> 00:02:16.740
And here I will create my own Colback and chins seconds and I will simply log seconds to the consul

00:02:16.740 --> 00:02:20.550
in here.

00:02:20.610 --> 00:02:26.490
Now what do you think will happen if I had run.

00:02:26.490 --> 00:02:29.680
I get 2 after 2 seconds.

00:02:29.870 --> 00:02:35.340
And how does works is simply a whole Wait a second which gives me a promise which will wait a second

00:02:35.400 --> 00:02:41.480
increment seconds but one we had to see at the beginning so now the second one and after 1 second.

00:02:41.670 --> 00:02:45.390
This is resolved and it passes one back.

00:02:45.390 --> 00:02:52.830
Now we have another then where we have that method and we call this function number Tonton seconds 1

00:02:52.840 --> 00:02:52.880
.

00:02:52.890 --> 00:02:59.430
At this point of time is automatically passed into this function so we again create a problem as wait

00:02:59.460 --> 00:03:01.590
one second increments second by one.

00:03:01.590 --> 00:03:07.180
It was once and now it is two and then there is resolve and past two.

00:03:07.200 --> 00:03:08.280
Now we reached this.

00:03:08.280 --> 00:03:09.750
Then call here.

00:03:10.080 --> 00:03:13.610
Now here we have a phone call back where we use seconds to.

00:03:13.650 --> 00:03:21.270
At this point of time and we simply print it to the console and I could just indent this a bit more

00:03:21.330 --> 00:03:22.800
so like this.

00:03:22.800 --> 00:03:24.940
And that's why we see you in the end here.

00:03:25.320 --> 00:03:31.410
And of again this shows how little killed you can write something very complex with two asynchronous

00:03:31.410 --> 00:03:34.570
calls here and just chaining them with then.

00:03:34.820 --> 00:03:42.440
And as explained de-value was automatically passed on and we will reach still's then methods only once

00:03:42.550 --> 00:03:47.050
the well individual then called before it has finished.

00:03:47.100 --> 00:03:48.120
So we're not reaching this.

00:03:48.120 --> 00:03:51.920
Then call the forward this then call with this promise.

00:03:51.920 --> 00:03:58.400
Here he has unfinished that's important to understand and that's of course an important behavior.