WEBVTT

00:02.160 --> 00:04.300
So here is a possible learning curve.

00:04.300 --> 00:10.650
And let's see how we went from seeing a framework for the first time you were working a little bit with

00:10.650 --> 00:16.260
it and let me also give you an impression on how the learning curve would possibly continue if we were

00:16.260 --> 00:18.550
to dive deeper into the frameworks.

00:18.630 --> 00:24.120
So we saw it for the first time and for Lord that meant that we had to use to Selye to set up a project

00:24.180 --> 00:29.800
because it uses typescript and so on and doesn't really work by just dropping an import for reactions.

00:29.850 --> 00:36.600
That was probably easier however then as I said Angle or use uses types could then we have to add complex

00:36.600 --> 00:42.450
workflow we have to understand we have to understand why we need to disallow why we need to create a

00:42.450 --> 00:48.720
project like this that we have all these modules and components and different files and that we therefore

00:48.720 --> 00:56.940
need a workflow which transports typescript and which merges all these Fahd's into a basic bundle for

00:57.240 --> 01:03.960
re-act we had to understand that ESX is strongly recommended though not absolutely necessary and that

01:03.960 --> 01:10.700
everything is javascript and therefore we have this strange J as X language where we write h to him

01:10.980 --> 01:15.780
like code in javascript that can be tough to understand.

01:15.930 --> 01:17.910
It isn't too difficult once you've got it.

01:18.120 --> 01:23.230
But having this first point of ah I got it can be difficult.

01:23.300 --> 01:26.940
The future hasn't Yabrud in my opinion is pretty easy to get started with.

01:27.030 --> 01:33.440
We use vanilla javascript we could use iOS 6 1/2 our workflow or target browser supported but there

01:33.450 --> 01:35.770
is nothing wrong with using is 5.

01:36.030 --> 01:41.640
And we start by simply controlling a part of the Dom and then using the view Cesena X which I believe

01:41.640 --> 01:44.480
is straightforward to understand at the beginning.

01:44.970 --> 01:50.400
Let's look at the next point of time we're diving deeper for angler.

01:50.400 --> 01:57.000
This means that we have to understand how components modules and the syntax works and how all these

01:57.000 --> 01:58.470
pieces work together.

01:58.470 --> 02:03.240
That certainly is a doable step but still it is something you have to get into.

02:03.240 --> 02:06.690
You have to understand the way Ingela works.

02:06.690 --> 02:11.850
It might not be as hard as understanding how the project works how the angle APIs started and why we

02:11.850 --> 02:12.740
use typescript.

02:12.750 --> 02:20.610
But still it's not super easy now for re-act staying kind of steep because we again have to understand

02:20.610 --> 02:27.360
that everything is javascript and the first time you try to render content conditionally or you try

02:27.360 --> 02:29.420
to output a list of items.

02:29.550 --> 02:36.390
It can be tough to understand that all you use are normal Javascript functions or methods like for example

02:36.390 --> 02:40.530
the map method on an array to render out elements.

02:40.530 --> 02:47.760
Once you've got it again it's not that hard but it is something you have to understand for the future.

02:47.760 --> 02:54.750
Yes we're getting a bit more advanced we might start using our local workflow with WePay so that we

02:54.750 --> 03:01.740
can use E-6 and have it compile to years five and we might start using these dot view files to have

03:01.740 --> 03:04.050
an easier way of writing components in the end.

03:04.050 --> 03:09.210
But again you have to understand that at first you have to understand that thought you to give you more

03:09.210 --> 03:16.200
features because they are compiled to javascript code in your workflow and not compiled in the browser

03:16.290 --> 03:21.290
as you did with the very first step when you control a part of the actual HDMI code.

03:21.330 --> 03:23.700
So it's getting a bit steeper but still doable.

03:23.730 --> 03:25.800
But again a little bit steep.

03:26.070 --> 03:26.760
Let's continue.

03:26.760 --> 03:31.750
Let's say now we're building real apps and we're building more complex apps.

03:31.780 --> 03:38.100
This is the point we haven't reached in this course because it's only an introduction but there Engler

03:38.130 --> 03:44.490
has more concepts like dependency injection and putting all these pieces to Gabr services for example

03:44.490 --> 03:49.650
are a topic we haven't touched on here but are then also a core when we build more complex apps and

03:49.650 --> 03:56.680
when we have a look at managing the state because that is a key issue in bigger apps managing the application

03:56.680 --> 04:02.460
state making sure that if we change something in component a it correctly gets reflected in component

04:02.490 --> 04:09.390
B and that can be tough and that is why we have another big thing we have to learn in and or to get

04:09.390 --> 04:11.540
this right in Riyadh.

04:11.590 --> 04:13.180
That's pretty much the same.

04:13.200 --> 04:18.870
We have some recommended state management patterns like redox which is great but again you have to learn

04:18.870 --> 04:19.400
these.

04:19.530 --> 04:23.340
So again that is quite an effort to make that step from.

04:23.400 --> 04:25.040
I'm fine with the basics too.

04:25.050 --> 04:28.260
I'm starting to build bigger apps for you.

04:28.260 --> 04:33.630
We also have to understand how components may communicate and how we build our apps with components

04:34.050 --> 04:38.560
state management however is a bit easier because Walski also have to learn it.

04:38.610 --> 04:45.550
There is a package deal x which is by the creators of future Yes and which integrates nicely into it.

04:45.600 --> 04:51.270
And therefore whilst being something you have to learn is not that difficult to learn in the end.

04:51.270 --> 04:56.470
So its getting a bit steeper or a bit difficult still but again doable.

04:56.970 --> 05:00.780
Now the final step might be that we want to deploy our app here.

05:00.850 --> 05:06.290
ENGLER really taking off there are tons of optimizations we can do.

05:06.490 --> 05:14.690
And we unfortunately have to do to get an application which really is small and offers the best performance.

05:14.890 --> 05:17.870
That's easier for both viewer and react.

05:17.920 --> 05:23.260
There are of course we all can do some tweaking and they support great tools which allow us to decrease

05:23.260 --> 05:31.870
the bundled size split up our bundles and optimized the apps but out of the box these frameworks work

05:31.900 --> 05:37.120
better you could say and I come back to this later when we have a look at the performance of frameworks

05:37.570 --> 05:44.110
so Engler is all the words from a performance perspective necessarily but getting it to perform nicely

05:44.320 --> 05:48.390
and optimizing it for production might be more difficult.

05:48.430 --> 05:50.980
Now that's just one possible learning curve.

05:51.160 --> 05:52.370
It might differ for you.

05:52.510 --> 05:55.060
Maybe you're saying what are you talking.

05:55.150 --> 05:58.110
Getting started with re-act was super easy is all javascript.

05:58.150 --> 05:59.340
I know javascript.

05:59.400 --> 06:04.810
It's straightforward and that's totally fine but maybe you are saying hey I'm coming from a very basic

06:05.060 --> 06:10.360
h him L plus Cheikh where he world and therefore view chess was really easy to get started because we

06:10.360 --> 06:16.510
have that strong connection between HDMI and Javascript was still having a clear separation or you were

06:16.510 --> 06:24.740
saying I'm a C-sharp developer I need types and typescript is pretty similar to C-Sharp in some points.

06:24.870 --> 06:28.230
And then Fred was really easy for me to get started with angular.

06:28.450 --> 06:33.850
So that is really something you will have to decide and that is why we had these introductions into

06:33.850 --> 06:40.270
frameworks so that you could get a picture of them and get an understanding of how easy or difficult

06:40.270 --> 06:44.080
it feels for you to get started with one of these frameworks.

06:44.080 --> 06:50.230
NELSON We have a look at this example possible learning curve how could we rate the frameworks here.

06:50.280 --> 06:56.230
Angler probably has a rather steep learning curve and it stays steep to the end until you master the

06:56.230 --> 06:58.030
whole flow for the first time of course.

06:58.030 --> 07:04.150
Then you know how it works and it's much easier for the traps you build in my myopia has a great learning

07:04.150 --> 07:10.230
curve easy to get started with but still giving you some challenges but doable and react.

07:10.290 --> 07:14.940
That is something where our people would be of a totally different opinion.

07:14.950 --> 07:20.270
But in my opinion re-act also gives it quite a difficult learning curve a steep learning curve.

07:20.350 --> 07:28.240
You have to use ESX in most cases you basically need a work flow for most apps and you have to understand

07:28.270 --> 07:36.130
that everything is javascript idea of react and you have to understand GSX and get into it and understand

07:36.130 --> 07:37.310
how you work with it.

07:37.330 --> 07:42.280
Once there's a set and this is true for all frameworks it's of course easier but learning it might be

07:42.280 --> 07:43.260
difficult.

07:43.690 --> 07:50.680
Let's have a look at how easy it is to scale down or use these frameworks and smaller apps and multi-page

07:50.680 --> 07:51.620
applications.

07:51.650 --> 07:52.090
Next.
