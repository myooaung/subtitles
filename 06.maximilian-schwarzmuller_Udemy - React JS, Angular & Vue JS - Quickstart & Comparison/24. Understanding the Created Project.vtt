WEBVTT

00:02.450 --> 00:08.510
So here's a project we created in the last lecture I opened that in web store my ID and these are the

00:08.510 --> 00:14.180
files and folders the Create re-act app created for us as you can see a very lean set up.

00:14.180 --> 00:17.300
We've got the node modules folder with all our dependencies.

00:17.300 --> 00:23.480
And then you can see there aren't that many dependencies just react and then the re-act scripts dependency

00:23.540 --> 00:30.050
which actually is a package holding the full workflow so that users weap back behind the scenes to bundle

00:30.050 --> 00:32.440
everything and then we also use this web.

00:32.460 --> 00:35.140
Dan to Torrance pile everything with Babel.

00:35.180 --> 00:41.870
So this re-act scripts packet here actually holds a lot of the logic and a lot of the workflow you will

00:41.870 --> 00:47.810
have to set up if you want to set up your own workflow or integrate it into your multi-page application

00:48.350 --> 00:48.840
here.

00:48.860 --> 00:55.340
Thankfully it's all done for us and therefore we can focus on the folder's public something allows us

00:55.340 --> 01:01.400
to store some files which are well served by the server like our in-house HMO Folland the fab like in.

01:01.580 --> 01:08.060
And then we mostly work in the source folder here you can see we get a couple of files all delete the

01:08.060 --> 01:15.090
logo here and then we got the next chance in the aperture icefall detest for this use for testing which

01:15.100 --> 01:17.500
I'll also believe since I don't covered it here.

01:17.510 --> 01:22.730
Do you see us as far as provide some styling for the components which live in Yemen and these files

01:23.060 --> 01:26.850
because of course the way we create a re-act app hasn't changed.

01:26.960 --> 01:33.020
If we have a look at the next shares fall we can see that we simply import app from the app folder and

01:33.020 --> 01:40.620
then we render this year and next page html file at element which has the ID root.

01:40.640 --> 01:47.830
So this one here we used app before they use root does make a difference if we have a look at the or

01:47.840 --> 01:48.680
chairs fault.

01:48.710 --> 01:52.350
Here we export does app component.

01:52.550 --> 01:54.740
And that just is a normal component.

01:54.740 --> 02:00.270
We're not calling re-act dot component because component gets imported separately from react.

02:00.380 --> 02:07.140
Then we all use the logo all the distance I delete the logo or delete the image here and we import D.C.'s

02:07.160 --> 02:13.790
asphalt as we did here and we can import CSSA and Javascript since the workflow behind the scenes was

02:13.790 --> 02:21.170
this web page which is able to resolve this dependency and package all the C S S code separately so

02:21.170 --> 02:27.380
it's not actually included in the javascript code but we tell our Bandler wetback that we have these

02:27.380 --> 02:30.850
dependency and wetback will and handle this correctly.

02:30.890 --> 02:35.720
So that's the set up we're starting with some components again using components here which is important

02:35.720 --> 02:41.180
separately and then setting up the same things you learn before rendering the content here.

02:41.180 --> 02:43.040
So nothing special.

02:43.130 --> 02:46.190
So let's play around that a little bit before we add our router.
