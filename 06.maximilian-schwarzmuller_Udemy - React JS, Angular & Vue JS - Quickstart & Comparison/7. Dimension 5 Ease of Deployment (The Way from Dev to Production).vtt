WEBVTT

00:02.410 --> 00:08.030
So how easy is it to make the move from development to production with these frameworks.

00:08.350 --> 00:09.800
Let's take a closer look.

00:09.910 --> 00:17.320
In the last lectures we saw the bundles sizes of all these projects and what we did see there ardy already

00:17.410 --> 00:19.280
optimized bundles sizes.

00:19.450 --> 00:23.770
The optimization was done by the workflows by web page and so on.

00:23.770 --> 00:28.870
We used somebody angler's seal Eyer which set up a workflow which uses well-packed behind the scenes

00:29.120 --> 00:34.840
and which does a lot of the optimizations we unfortunately or fortunately however you want to look at

00:34.840 --> 00:42.250
it have to do when shipping an angler app and when going from D-Will up into production we saw that

00:42.260 --> 00:44.540
view had a small bandos size.

00:44.620 --> 00:50.490
So how easy is it Dan to get from a big development bundle with a lot of warning messages in it and

00:50.520 --> 00:53.970
non optimized code to optimize code.

00:54.100 --> 00:58.480
Let's start a new project step for angler.

00:58.600 --> 01:04.450
We then start writing our code our development code and we have our development code run in our browser

01:04.450 --> 01:08.820
on the development server and we have no optimizations in place here.

01:08.950 --> 01:16.580
That means for example that our templates are not compiled which means our HMO code where we use a regular

01:16.570 --> 01:19.180
syntax like Engy for and so on.

01:19.300 --> 01:21.290
It's shipped to the browser.

01:21.490 --> 01:28.060
If we were to ship it like this in our development server for example and then angle or Compounce so

01:28.150 --> 01:37.500
understands you could say our HMO code we wrote in our component templates at runtime in the browser.

01:37.510 --> 01:44.470
Now as you might think this will not only be a hit for the performance because it has to understand

01:44.470 --> 01:48.110
and parse our templates off often has been loaded in the browser.

01:48.400 --> 01:53.670
But we also have to code which is responsible for understanding it the angle or compiler.

01:53.830 --> 02:00.730
And that of course is a problem because that increases our codebase and decreases the runtime performance

02:00.880 --> 02:03.980
because of that compilation step which is needed at runtime.

02:04.030 --> 02:09.380
Not super great but we can do something about it and it will come back to this for the future.

02:09.370 --> 02:11.790
It's different when using the view.

02:11.860 --> 02:18.400
And one of the web templates we can use with it were basically as if we want to use the runtime only

02:18.400 --> 02:26.150
approach which means that view just doesn't ship a compiler to understand our templates.

02:26.170 --> 02:33.040
That means that we can't use a view instance to control a part of our real HTL code but that instead

02:33.040 --> 02:40.450
we use our view files that dot view files which are compiled to javascript only so that we have the

02:40.450 --> 02:41.840
best of both worlds.

02:41.920 --> 02:49.120
We can still write normal HVM all code in these files but then they are compiled as part of our workflow

02:49.390 --> 02:55.540
so that what we shipped to the browser in the end is optimized code which is only javascript and doesn't

02:55.540 --> 02:58.210
include any compiler or any age HTML code.

02:58.210 --> 03:05.480
Therefore Alternatively we can also choose an approach where we have to compile or include it then we're

03:05.500 --> 03:12.490
in the Anglo world of where we write code which also includes the view compiler which allows us to create

03:12.490 --> 03:18.520
a new instance and control parts of our real dorm of our real age code.

03:18.550 --> 03:26.890
We don't have to use dot view files then but we also give up on some optimization potential and therefore

03:26.980 --> 03:31.180
we have a bigger panel size and a slower runtime performance.

03:31.180 --> 03:36.880
Now in this case where we have uncompiled templates there is nothing we can do here.

03:36.970 --> 03:44.440
We have to set up a workflow where we ever followed the approach of don't having the compiler and compiling

03:44.470 --> 03:51.280
everything as part of the workflow with web pegan the view loader or of having yabber approach including

03:51.280 --> 03:57.130
the compiler and shipping the bigger codebase and that might be up to you on what you need if you need

03:57.130 --> 04:03.070
to work in the real HTL code and if you need to compiler at runtime or if you are saying well I can

04:03.100 --> 04:09.030
optimize all the code during development and then ship that optimized worshipfully for react.

04:09.040 --> 04:10.450
We don't have that problem at all.

04:10.450 --> 04:16.930
Remember everything is javascript so we don't have any H.T. mail killed we would have to parse or things

04:16.930 --> 04:17.810
like that.

04:17.860 --> 04:19.740
Everything is javascript already.

04:19.840 --> 04:26.070
So no optimization needed regarding this now that we saw the adults that we learned that it looks like

04:26.070 --> 04:31.500
an angler is a loser because here right now it looks like we always have to compile the templates in

04:31.500 --> 04:32.220
the browser.

04:32.310 --> 04:37.800
In future years we have a choice and in react we don't have the problem to begin with.

04:37.860 --> 04:43.980
Now in angler we can run ahead of time compilation as part of our workflow that is basically the same

04:43.980 --> 04:47.250
as happens here in the runtime only approach and view chaos.

04:47.380 --> 04:53.010
Everything is compiled to Javascript in the workflow already so that in the end what we ship again is

04:53.010 --> 05:01.830
just javascript without dangler compiler without the need of compiling parsing our templates at runtime.

05:01.830 --> 05:06.560
Now there are other optimizations we can put into place in all approaches too.

05:06.630 --> 05:11.390
We can lazy load some components which means only load them if we really wisit them.

05:11.400 --> 05:17.820
If we really need them we can mix them with pre-loading so that we don't load them eagerly at the point

05:17.820 --> 05:20.640
of time we download the app for the first time.

05:20.850 --> 05:27.240
But that we also don't just load them once we really need them but that we preload them before we might

05:27.240 --> 05:28.380
need them.

05:28.380 --> 05:35.460
We also could use tree shaking which means strip out unnecessary stuff in our code or we can try to

05:35.460 --> 05:42.600
manually improve our tools and tweak some adjustments to write leaner shorter and more concise code.

05:42.720 --> 05:45.140
That of course is possible that all these frameworks.

05:45.180 --> 05:52.170
It's most important angler though because you two way ala works there is a lot of optimization needed

05:52.260 --> 05:57.240
to get to a small bundle at the end and to get to fast code.

05:57.810 --> 06:04.560
You could look at this as a disadvantage but since we do have the Selye which gives us a great workflow

06:04.560 --> 06:10.010
which does all these things it's on the average and really simple while still giving you.

06:10.050 --> 06:15.060
If you are an expert and want to do everything on your own a chance of doing it on your own that's a

06:15.060 --> 06:20.580
bit different than the other approaches where due to the way they work you just have less fings you

06:20.580 --> 06:28.800
can optimize So overall easier to get from development to production in the U.S. under-react but also

06:28.800 --> 06:34.820
easy with the Angler or Selye was still giving you more options to do that on your own.

06:34.830 --> 06:36.710
If you want to do it on your own.

06:36.960 --> 06:40.720
So what does that mean for our overview for angular.

06:40.770 --> 06:42.130
I'll give this a plus.

06:42.160 --> 06:49.560
However not a fully green Plass because yeah it might be an advantage for some people that you can set

06:49.560 --> 06:52.700
up your own workflow and do all these optimizations on your own.

06:52.860 --> 06:54.680
But from personal experience I can tell you.

06:54.700 --> 07:02.640
Dentals it can be a pain and the issue of potentially adding a lot of errors by missing out on some

07:02.640 --> 07:06.970
optimizations is not that great.

07:06.990 --> 07:10.500
So yeah the Seelye gives you an optimized workflow.

07:10.490 --> 07:14.850
And yeah if you like it you can zap your own workflow and do everything on your own.

07:14.910 --> 07:17.690
But overall I feel that's good.

07:17.700 --> 07:22.870
It is good how it is but it's not perfect for you.

07:22.950 --> 07:29.760
You could say well it's not good that we can't optimize as much as we do have to optimize for angler

07:29.790 --> 07:36.780
but I will say the UK has done a lot of optimizations for you and you still can add lazy loading and

07:36.780 --> 07:37.350
things like that.

07:37.350 --> 07:43.680
It's not like you can't optimize your app but due to the way it works when picking the runtime only

07:43.680 --> 07:46.320
approach when using the view Selye and so on.

07:46.470 --> 07:51.320
And it's also easy to implement that if you were to set it up from scratch on your own.

07:51.390 --> 07:57.630
You really have an easy way of getting optimized projects and the same for re-act react as javascript

07:57.690 --> 07:58.340
only.

07:58.350 --> 08:03.680
Therefore it already is optimized quite a lot and you can add things like lazy loading here too.

08:03.810 --> 08:06.150
To really get the most out of it.

08:06.720 --> 08:11.670
Let's move on to the popularity and job perspectives for these frameworks.
