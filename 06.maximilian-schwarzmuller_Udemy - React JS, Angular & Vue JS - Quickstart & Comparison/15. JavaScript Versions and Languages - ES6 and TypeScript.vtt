WEBVTT

00:02.410 --> 00:08.830
So we already had a look at the javascript world and I did explain what iOS 6 times and so on are.

00:08.920 --> 00:10.510
But again to make this really clear.

00:10.510 --> 00:12.160
Let's take a closer look.

00:12.190 --> 00:18.610
As mentioned iOS 6 simply is the next word of javascript and you could use it today but it wouldn't

00:18.610 --> 00:20.640
run in all browsers.

00:20.650 --> 00:21.870
It adds new features.

00:21.870 --> 00:28.470
For example a colossus or aero functions which are kind of improved functions work most of the time

00:28.480 --> 00:34.840
like the old functions but add some extra features and it is nice to use these features but again not

00:34.840 --> 00:36.460
supported in all browsers.

00:36.760 --> 00:42.350
So therefore we could only write apps which are running in cutting edge browsers.

00:42.430 --> 00:48.880
And of course we can't rely on the users of our Web page having such browsers typescript is another

00:48.880 --> 00:49.690
example.

00:49.690 --> 00:55.760
It's not the next werfen but it is a language developed by Microsoft and it also adds many new features.

00:55.840 --> 01:02.050
But it is a superset to javascript that means it always has to be compiled to javascript and yet it

01:02.050 --> 01:03.620
doesn't run the browser.

01:03.730 --> 01:08.880
It simply extends javascript changes to syntax a bit and adds many new features.

01:09.010 --> 01:16.380
Most importantly types javascript by default is dynamically typed language and you don't assign types

01:16.390 --> 01:18.160
when you create a new variable.

01:18.170 --> 01:24.260
A variable can hold any type in any data so you could hold a string and then assign a number and Chavez

01:24.400 --> 01:25.510
wouldn't complain.

01:25.510 --> 01:30.250
Note it can be an advantage but it can also make your code a bit more unpredictable.

01:30.490 --> 01:32.430
Typescript for example at stipes.

01:32.440 --> 01:36.650
So did you have to be clear about which type a variable will hold in the end.

01:36.850 --> 01:38.590
That's just one of the features though.

01:38.740 --> 01:42.510
And you don't have to use it by any means but it can offer some advantages.

01:42.550 --> 01:48.250
But again it always needs to be compiled to javascript are wise it won't run the browser does this where

01:48.250 --> 01:49.640
Babel comes into play.

01:49.690 --> 01:54.920
It transpires ESX not typescript type ships with its own compiler actually.

01:55.090 --> 02:01.810
But if we were to use E-6 features today during development we would need Babel a compiler which trends

02:01.810 --> 02:08.230
piles our E6 code to iest 5 code which will run in the browser in the end so that we can use the features

02:08.350 --> 02:15.240
during development and still ship working code and whatever webpage is an alternative to Babel.

02:15.310 --> 02:16.870
No web page.

02:17.110 --> 02:23.890
Most of all is a bundler which means we can split our code over multiple files over multiple javascript

02:23.910 --> 02:30.540
Fahd's simply place a statement which tells where pegan the end which file you want to import into another

02:30.580 --> 02:35.260
file and it will then scan all these imports and create one Butland yet.

02:35.470 --> 02:40.810
This allows us to create more maintainable code since splitting it up over multiple files is easier

02:40.810 --> 02:42.110
to work with for us.

02:42.190 --> 02:48.700
But in the end we have one file again which we deploy and which we shipped to the browser whilst this

02:48.700 --> 02:56.080
bundling process we can integrate a lot of plug ins or loaders as they are called into the web workflow

02:56.230 --> 03:01.460
so that we don't only bundle the files but we also can if we want to transform them.

03:01.600 --> 03:10.370
For example we could integrate cable into a web pick bundling process and check if a file uses iOS 6

03:10.450 --> 03:16.060
and if it does compiler to IIS 5 before bundling everything and the same or typescript you could integrate

03:16.060 --> 03:19.660
the typescript compiler into your web page workflow.

03:19.990 --> 03:21.850
You can also optimize your code.

03:21.880 --> 03:28.510
Many fly it so that's a whole webpage place and there are alternatives like Ghaleb or Grundt but web

03:28.500 --> 03:33.940
peg is the most popular one and you might have heard of it actually and of course will have a section

03:33.940 --> 03:40.780
where we analyze view Che as project which uses web peg so that we can understand what webpage does

03:40.900 --> 03:47.230
in a bit more detail so Daddles what he has six times the Wepa guess and that hopefully clears up some

03:47.230 --> 03:49.250
of the confusion you might have had.

03:49.360 --> 03:53.830
This hopefully explains which Year-Old these packages and tools play.
