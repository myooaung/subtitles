WEBVTT

00:02.410 --> 00:09.910
Enough of this simple component usage why don't we add a router to create multi page single page application.

00:09.920 --> 00:14.410
So still having a single page but giving the user the impression of having multiple you or else he can

00:14.410 --> 00:15.950
navigate to.

00:15.970 --> 00:22.420
For this I need to add routing to this app and for that I need a couple of components I can route you

00:22.600 --> 00:31.890
so I'll add a count component and I will add a block component does add 2 new folders and then the block

00:31.890 --> 00:34.310
component or remove the testing file.

00:34.350 --> 00:44.020
I'll simply say a free block and maybe add a paragraph where I say this is block and then copy this

00:44.110 --> 00:45.440
to the account component.

00:45.490 --> 00:46.810
Remove the testing father too.

00:46.840 --> 00:50.230
You could leave it there doesn't hurt but all move it.

00:50.230 --> 00:55.120
Say the account in the template of the account component and say this is the account so that you can

00:55.120 --> 00:57.910
see to be really switched a page.

00:57.910 --> 01:04.540
Now we got a couple of components to work with no one to add routing and a quick and easy way of adding

01:04.540 --> 01:11.140
routing us to go to the app module and here that is where we have to add or import a special module

01:11.140 --> 01:12.800
provided by angler.

01:12.940 --> 01:22.150
It's the router module which we don't need to import so router module but not from an Anglo core but

01:22.150 --> 01:29.130
from an angler router Dismas a module giving us the routing functionality we need now.

01:29.200 --> 01:33.300
This adds a module but it won't work like that.

01:33.340 --> 01:38.500
We need to add some configuration and we do this with the for root method because we of course need

01:38.500 --> 01:42.660
to inform the Anglo router about which routes we have in our app.

01:42.980 --> 01:48.780
This now expects an array of routes and Watsa could find it here as an argument.

01:48.790 --> 01:51.040
I'll put it in a ex-drug constant.

01:51.220 --> 01:51.910
I'll name it.

01:51.910 --> 01:58.180
App routes the name is up to you and this will be of type routes which needs to be imported from the

01:58.300 --> 02:07.870
router to now routes simply isn't the array of objects like this and each object needs to have at least

02:07.870 --> 02:09.300
a path to define.

02:09.340 --> 02:11.260
When should this route be loaded.

02:11.350 --> 02:15.730
So here I'll set up an empty path for my user component let's say.

02:15.760 --> 02:19.220
So I'll add component and then user or component.

02:19.450 --> 02:22.050
And you need to make sure that you have to import of this type.

02:22.120 --> 02:28.270
Important these imports you are are a typescript feature angler doesn't care about them but typescript

02:28.290 --> 02:33.370
needs to know where the stuff you're using so all the types or classes you're using here are actually

02:33.370 --> 02:34.320
coming from.

02:34.350 --> 02:40.060
That's important for the bundling and compilation later angler doesn't need dead for angler's does Engy

02:40.060 --> 02:41.480
module here is important.

02:41.920 --> 02:46.630
But now I added my user component as a first route for an empty path.

02:46.720 --> 02:53.980
I'll add another pov here and I'll give this part of the let's say block and don't add a slash in front

02:53.980 --> 02:54.340
of it.

02:54.340 --> 02:55.790
This will actually break it.

02:55.870 --> 03:00.380
It will be Flashblock in the end but you simply omit the slash.

03:00.700 --> 03:05.920
So that's my blog and here I want to load up a large component and all these components are all very

03:05.920 --> 03:10.440
important because I added this for me when we created them.

03:10.530 --> 03:17.290
Now the third route I want to set up is the account route and here I want to load the account component

03:18.010 --> 03:20.030
so these are the routes I want to set up.

03:20.050 --> 03:27.670
Now I simply have to pass the routes to my router module and routes like this and no angler is aware

03:27.670 --> 03:28.940
of them.

03:28.960 --> 03:31.720
We now need a place for English to render them.

03:31.990 --> 03:35.400
So here in the app component dad would be a fitting place.

03:35.680 --> 03:41.980
So any year I want to add a special component or directive to be precise.

03:42.100 --> 03:45.810
Angler gives us the router outlet.

03:46.010 --> 03:49.110
It looks like the HD M.Tech it looks like a component.

03:49.250 --> 03:50.930
It actually just is a directive.

03:51.020 --> 03:54.090
Directives can use different types of selectors too.

03:54.230 --> 03:59.360
And you don't have to use attribute selectors like we did before for you silence on which were all added

03:59.360 --> 04:00.650
like attributes.

04:00.700 --> 04:07.040
This is a directive which simply used to tax collector and distract the fast one chopt do it for the

04:07.040 --> 04:10.850
router where it showed to render the currently loaded route.

04:11.240 --> 04:18.830
So if I save this with any sort of still running UCM it looks like before but if I wisit slash block

04:19.100 --> 04:25.310
we see the block and if a wizard slash account we see the account and notice we don't have a hash tag

04:25.310 --> 04:29.300
in you or else we have is nicer or else of having slashes.

04:29.300 --> 04:34.010
It does of course has implications for the server where this app runs on the server always needs to

04:34.010 --> 04:35.750
return the sage HTML file.

04:35.840 --> 04:41.310
Even in four or 4 cases since the you are Ellas parsed but answer first I did mench does.

04:41.360 --> 04:47.240
In both the view and the re-act module that's a routing implemented but wouldn't it be nice to have

04:47.240 --> 04:48.230
some links.

04:48.260 --> 04:49.700
Let's work on this next.
