1
00:00:00,740 --> 00:00:01,080
[Autogenerated] Okay,

2
00:00:01,080 --> 00:00:05,480
Welcome back to Part two in this parameter store discussion to start off.

3
00:00:05,480 --> 00:00:10,240
I want to talk about the string list parameter that we haven't covered yet.

4
00:00:10,240 --> 00:00:14,980
So once again, let's just enter our path here will leave the description blank.

5
00:00:14,980 --> 00:00:19,410
I'll talk on tears here shortly, and then we have our string lists.

6
00:00:19,410 --> 00:00:19,630
Now,

7
00:00:19,630 --> 00:00:23,760
this is where you provide a list of values in a comma

8
00:00:23,760 --> 00:00:26,940
separated format for us to use.

9
00:00:26,940 --> 00:00:31,700
So what we could do here is I get Inter Andrew for a user name will do, Bob.

10
00:00:31,700 --> 00:00:33,850
And then let's do Jill as well.

11
00:00:33,850 --> 00:00:38,370
So we have three users in a list I'll click on create.

12
00:00:38,370 --> 00:00:40,830
If I go in here, you can see our list.

13
00:00:40,830 --> 00:00:42,540
Let me copy this name,

14
00:00:42,540 --> 00:00:47,010
and I'm gonna use that same parameter store function that we used before.

15
00:00:47,010 --> 00:00:50,690
Now, in between clips, I remove that with the decryption equals true value.

16
00:00:50,690 --> 00:00:53,140
So we can start using this again.

17
00:00:53,140 --> 00:00:54,950
I'm gonna click on edit.

18
00:00:54,950 --> 00:00:56,680
Let's save this environment variable.

19
00:00:56,680 --> 00:00:58,310
And let's test.

20
00:00:58,310 --> 00:01:00,040
All right, we see succeeded.

21
00:01:00,040 --> 00:01:00,680
And there you go.

22
00:01:00,680 --> 00:01:06,630
We now have our three users in a list that we just pulled from parameter store,

23
00:01:06,630 --> 00:01:09,870
so you can perform some type of action based on this list.

24
00:01:09,870 --> 00:01:15,740
Like maybe we want to update some permissions for a specific set of users,

25
00:01:15,740 --> 00:01:21,200
and we can store that list of users in one location here in parameter store,

26
00:01:21,200 --> 00:01:26,120
so it allows for scalability in reuse of parameter

27
00:01:26,120 --> 00:01:29,620
values amongst ER applications.

28
00:01:29,620 --> 00:01:34,830
Now the next thing I want to talk about is I want to talk about the tears.

29
00:01:34,830 --> 00:01:38,080
So if I go back in here, I create a parameter again.

30
00:01:38,080 --> 00:01:41,240
Let's just call this prod advanced.

31
00:01:41,240 --> 00:01:43,210
You can see we have a tear option.

32
00:01:43,210 --> 00:01:48,180
Now the standard tier sets a limit of 10,000 parameters,

33
00:01:48,180 --> 00:01:51,900
and you can see that can only go up to four kilobytes.

34
00:01:51,900 --> 00:01:58,300
So they're limited in size and number, and we can't specify a parameter policy.

35
00:01:58,300 --> 00:01:59,990
But they're free.

36
00:01:59,990 --> 00:02:03,610
There's no additional charge to use standard parameters.

37
00:02:03,610 --> 00:02:07,570
Store parameters now advanced, on the other hand,

38
00:02:07,570 --> 00:02:10,170
offer us a little bit more flexibility.

39
00:02:10,170 --> 00:02:13,040
We can create more than 10,000.

40
00:02:13,040 --> 00:02:15,700
They can be up to eight kilobytes in size,

41
00:02:15,700 --> 00:02:20,720
so double the amount we can specify are parameter policies.

42
00:02:20,720 --> 00:02:24,660
But another big difference is that charges apply to

43
00:02:24,660 --> 00:02:28,320
advanced parameters and you'll notice you cannot revert

44
00:02:28,320 --> 00:02:32,920
back to a standard once it's advanced, but you can do the opposite.

45
00:02:32,920 --> 00:02:35,740
You can go from standard to advanced.

46
00:02:35,740 --> 00:02:37,310
You'll see it's the same types.

47
00:02:37,310 --> 00:02:38,580
Nothing changes there.

48
00:02:38,580 --> 00:02:41,870
It's just now we have more characters that we can implement,

49
00:02:41,870 --> 00:02:44,040
and you can see that here at the bottom.

50
00:02:44,040 --> 00:02:45,470
So if I go to this one,

51
00:02:45,470 --> 00:02:53,260
the standard you see 40 96 advanced has 81 92 so immediately were

52
00:02:53,260 --> 00:02:56,640
doubling the value amount by going to advanced.

53
00:02:56,640 --> 00:02:58,740
Now you'll also notice what you didn't notice.

54
00:02:58,740 --> 00:03:01,250
In Standard is a parameter policy.

55
00:03:01,250 --> 00:03:02,110
So if we wanted to,

56
00:03:02,110 --> 00:03:07,890
we could expire this parameter at a specific or relative time.

57
00:03:07,890 --> 00:03:11,330
And what's nice is we can also notify based on cloudwatch

58
00:03:11,330 --> 00:03:13,870
events with some specific settings.

59
00:03:13,870 --> 00:03:18,470
So let's say we want to notify before it expires one hour before,

60
00:03:18,470 --> 00:03:22,800
So this will send a cloudwatch event that we can alert through SNS.

61
00:03:22,800 --> 00:03:28,340
If we desire, I'll click on Disable here and then I'm gonna click on Cancel.

62
00:03:28,340 --> 00:03:30,940
Now that's the key differences between a standard

63
00:03:30,940 --> 00:03:33,800
parameter and an advanced parameter.

64
00:03:33,800 --> 00:03:36,620
They're very key in critical differences,

65
00:03:36,620 --> 00:03:41,140
so be sure you know which one you want to choose for your use case.

66
00:03:41,140 --> 00:03:44,190
Now let's look at settings here now under settings,

67
00:03:44,190 --> 00:03:49,130
you'll see that we can set a new limit for our parameters Store throughput.

68
00:03:49,130 --> 00:03:50,190
Now, this is newer.

69
00:03:50,190 --> 00:03:52,030
It used to not be Edita ble,

70
00:03:52,030 --> 00:03:56,080
but now we can go ahead and accept charges and then set

71
00:03:56,080 --> 00:03:58,840
throughput limits for our parameters.

72
00:03:58,840 --> 00:04:01,110
And we can also change the default here.

73
00:04:01,110 --> 00:04:03,720
So if we just create a parameter quickly,

74
00:04:03,720 --> 00:04:06,080
we can say, Hey, I want it to be intelligent.

75
00:04:06,080 --> 00:04:11,940
So choose, depending on the request, I want to advance by default or standard,

76
00:04:11,940 --> 00:04:16,740
so it allows some flexibility in customizable selections.

77
00:04:16,740 --> 00:04:21,330
Now, the final thing I want to touch on here is our hierarchical storage.

78
00:04:21,330 --> 00:04:27,320
Now what this means is we can use path based or hierarchy based

79
00:04:27,320 --> 00:04:31,760
naming structures to control who can see what.

80
00:04:31,760 --> 00:04:35,140
So, for instance, in our parameter store demo here,

81
00:04:35,140 --> 00:04:37,740
this has full access to S S M.

82
00:04:37,740 --> 00:04:42,240
But what we could do is I can go to parameter store,

83
00:04:42,240 --> 00:04:45,770
define these Dev database values, creates,

84
00:04:45,770 --> 00:04:53,100
um, Dev application values, and then I congrats permissions based on that path.

85
00:04:53,100 --> 00:04:58,850
So if I do recursive and I do slash Dev and a search will get

86
00:04:58,850 --> 00:05:02,390
everything with a slash dev And then whatever is behind it.

87
00:05:02,390 --> 00:05:07,210
So we have database, password, database user and then users.

88
00:05:07,210 --> 00:05:13,330
So what we can do with this is we can specify in I am policy that Onley allows

89
00:05:13,330 --> 00:05:18,640
that particular user or role to access stuff with this path,

90
00:05:18,640 --> 00:05:25,500
but not slash pride so it allows for segregation of privileges as needed.

91
00:05:25,500 --> 00:05:29,970
And then, really, if we wanted to, we could also get down to the second level.

92
00:05:29,970 --> 00:05:34,210
So let's say we only want our Lambda function to have

93
00:05:34,210 --> 00:05:38,140
the prod application specific value.

94
00:05:38,140 --> 00:05:41,340
So if I do this and I search now, I forgot one level here.

95
00:05:41,340 --> 00:05:42,740
So let me go back.

96
00:05:42,740 --> 00:05:46,050
We'll do recursive I enter the path here.

97
00:05:46,050 --> 00:05:47,090
There we go.

98
00:05:47,090 --> 00:05:53,440
We can lock that down to a specific path that we want all the

99
00:05:53,440 --> 00:05:58,180
way up to the last value in that name so we can define this

100
00:05:58,180 --> 00:06:00,670
entire name here if we wanted to,

101
00:06:00,670 --> 00:06:04,270
or I can give it a path and give it some permissions to

102
00:06:04,270 --> 00:06:07,380
access everything under that path value.

103
00:06:07,380 --> 00:06:10,970
Now that's gonna do it for this demo on parameter store

104
00:06:10,970 --> 00:06:13,440
and the different types of parameters.

105
00:06:13,440 --> 00:06:16,920
Be sure to play around with this as much as you can as it's a

106
00:06:16,920 --> 00:06:20,880
free alternative compared to secrets manager.

107
00:06:20,880 --> 00:06:24,140
But there are some tradeoffs that you have to be aware of.

108
00:06:24,140 --> 00:06:27,780
So do some research play around, and then when you're ready,

109
00:06:27,780 --> 00:06:35,000
we're gonna move on to the actions and change capabilities that we have in systems manager.

