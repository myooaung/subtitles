1
00:00:01,000 --> 00:00:03,610
[Autogenerated] All right, let's go and start talking about some logging.

2
00:00:03,610 --> 00:00:06,430
Now Cloudwatch is known for being the default logging

3
00:00:06,430 --> 00:00:09,530
service that Amazon provides us to use.

4
00:00:09,530 --> 00:00:12,180
We can see here on the left that we have our logs sections.

5
00:00:12,180 --> 00:00:15,690
So if I click on logs, this is gonna take us to our logs screen.

6
00:00:15,690 --> 00:00:18,370
Now, on this screen, we can see we have a log.

7
00:00:18,370 --> 00:00:21,240
Groups weakens, er, insights, shortcuts,

8
00:00:21,240 --> 00:00:25,410
weaken set an expiry date and then we have metric filters and subscriptions.

9
00:00:25,410 --> 00:00:29,120
Now we'll talk about metric filters and subscriptions and a later clip.

10
00:00:29,120 --> 00:00:32,640
For now, I just want to focus on the fundamentals here of log groups.

11
00:00:32,640 --> 00:00:35,160
Now, what this does is by default.

12
00:00:35,160 --> 00:00:39,240
Resource is in AWS are gonna push the cloudwatch and you can see

13
00:00:39,240 --> 00:00:42,310
they follow a specific name space type of pattern.

14
00:00:42,310 --> 00:00:44,220
We can see these are E CS related.

15
00:00:44,220 --> 00:00:47,470
When it's slash CCs, we see our Run command law group,

16
00:00:47,470 --> 00:00:50,940
which was from our run command clip earlier in the previous module.

17
00:00:50,940 --> 00:00:54,190
And then we have our AWS Lambda log groups.

18
00:00:54,190 --> 00:00:58,210
So if I dive into here, we can see we then have log streams.

19
00:00:58,210 --> 00:01:02,180
So log groups contain many different log streams and

20
00:01:02,180 --> 00:01:04,140
you can see it follows the dates.

21
00:01:04,140 --> 00:01:07,510
And in this case, it's the latest version of our land of function.

22
00:01:07,510 --> 00:01:09,010
And then the request I d.

23
00:01:09,010 --> 00:01:11,750
For that indication, which is a concurrent invocation.

24
00:01:11,750 --> 00:01:15,440
So any concurrent executions are gonna belong to the same log stream.

25
00:01:15,440 --> 00:01:19,320
And what this means is that all concurrent requests or cold start

26
00:01:19,320 --> 00:01:22,030
requests are going to have their own log stream.

27
00:01:22,030 --> 00:01:25,990
But if you invoke a function, it finishes and you invoke it again.

28
00:01:25,990 --> 00:01:28,470
As long as that back container is going,

29
00:01:28,470 --> 00:01:31,240
we're going to see that it belongs to the same log stream.

30
00:01:31,240 --> 00:01:33,040
So let me go and dive into this.

31
00:01:33,040 --> 00:01:36,890
And before we discuss this, let me go to my presentation here.

32
00:01:36,890 --> 00:01:37,190
Now,

33
00:01:37,190 --> 00:01:40,020
this is gonna be an easier way really quickly before we dive in

34
00:01:40,020 --> 00:01:42,680
the logging to break down what a log looks like.

35
00:01:42,680 --> 00:01:43,860
We can see here at the top.

36
00:01:43,860 --> 00:01:45,480
We have our start of our request.

37
00:01:45,480 --> 00:01:45,980
I d.

38
00:01:45,980 --> 00:01:48,660
With our latest version and then in the middle here,

39
00:01:48,660 --> 00:01:50,780
we actually have our custom logging.

40
00:01:50,780 --> 00:01:54,540
So these are actual logging statements that we put from our

41
00:01:54,540 --> 00:01:57,490
particular either instance or maybe Lambda function.

42
00:01:57,490 --> 00:01:59,040
Now this one is a Lambda function.

43
00:01:59,040 --> 00:02:02,040
But I'm just showing you how you can customize your logging.

44
00:02:02,040 --> 00:02:03,700
And then we have our in request, I d.

45
00:02:03,700 --> 00:02:06,320
So it's ending the request and then we have a report.

46
00:02:06,320 --> 00:02:07,710
So this is a lambda default.

47
00:02:07,710 --> 00:02:10,670
It gives you a billing report to see what's going on.

48
00:02:10,670 --> 00:02:14,550
So let's scroll back here and we're gonna look at this custom logging weaken.

49
00:02:14,550 --> 00:02:16,200
See, here we had our start.

50
00:02:16,200 --> 00:02:19,420
I printed out a message of Andrew and then it ended.

51
00:02:19,420 --> 00:02:22,340
And then we have a report and I did this several times.

52
00:02:22,340 --> 00:02:23,820
So let's actually test this out.

53
00:02:23,820 --> 00:02:28,570
I'm gonna go ahead and I'm gonna go to the S S m parameter law group here.

54
00:02:28,570 --> 00:02:32,380
And then I'm gonna open up Lambda and let's customize some of this logging.

55
00:02:32,380 --> 00:02:33,590
I'm gonna open this up.

56
00:02:33,590 --> 00:02:35,090
I'll edit this function here,

57
00:02:35,090 --> 00:02:39,040
let me scroll down and we can see this was used in our S S M,

58
00:02:39,040 --> 00:02:41,910
which was our systems manager parameter store video.

59
00:02:41,910 --> 00:02:45,850
And we can see we printed the value of that parameter, and we returned it.

60
00:02:45,850 --> 00:02:47,740
So let me add another print statement here.

61
00:02:47,740 --> 00:02:51,730
I'm gonna add in a print statement that says hello Plural sites,

62
00:02:51,730 --> 00:02:54,670
students This is our custom logging with a little smiley face.

63
00:02:54,670 --> 00:02:56,970
So let me save this year, I'm gonna test it out.

64
00:02:56,970 --> 00:03:00,570
So we printed a couple times and then I'm gonna go back to Cloudwatch.

65
00:03:00,570 --> 00:03:04,320
Let me refresh this, and you can see we have a new log stream.

66
00:03:04,320 --> 00:03:05,790
And this is because we made a change.

67
00:03:05,790 --> 00:03:08,280
So it's a new indication I'm gonna open this up.

68
00:03:08,280 --> 00:03:10,910
And as you can see, Cloudwatch is not immediate.

69
00:03:10,910 --> 00:03:14,180
It takes a minute for it to catch up, but you can see the events starting.

70
00:03:14,180 --> 00:03:16,540
We have our first indication There's that Andrew,

71
00:03:16,540 --> 00:03:18,440
which is that value of that parameter.

72
00:03:18,440 --> 00:03:20,260
And then we have our custom logging here.

73
00:03:20,260 --> 00:03:21,790
Hello, plural sites, students.

74
00:03:21,790 --> 00:03:23,170
This is our custom logging.

75
00:03:23,170 --> 00:03:24,480
And we did this two times.

76
00:03:24,480 --> 00:03:29,570
So now you can see how you can utilize custom logging to push the cloudwatch.

77
00:03:29,570 --> 00:03:29,760
Now,

78
00:03:29,760 --> 00:03:33,090
one quick last thing here is if I go back to law groups and I take a

79
00:03:33,090 --> 00:03:37,280
look at this expire events after section I can actually set thes to

80
00:03:37,280 --> 00:03:39,380
expire with a certain retention date.

81
00:03:39,380 --> 00:03:42,430
So you can see we can be one day never expire.

82
00:03:42,430 --> 00:03:45,670
One month we could even go all the way to 10 years.

83
00:03:45,670 --> 00:03:48,380
So this allows us to set a retention period for our

84
00:03:48,380 --> 00:03:50,500
logs in case we wanted to do that.

85
00:03:50,500 --> 00:03:53,170
So if I select this again and let's just say I want to keep these for

86
00:03:53,170 --> 00:03:55,740
one week and then expire them so I'm gonna say OK,

87
00:03:55,740 --> 00:03:58,460
and now if I had any logs that were older than one week,

88
00:03:58,460 --> 00:03:59,360
there would be gone.

89
00:03:59,360 --> 00:04:00,170
But I don't.

90
00:04:00,170 --> 00:04:02,430
So that's not really an issue here.

91
00:04:02,430 --> 00:04:06,450
Now that's gonna do it for law groups and log streams will wrap this up,

92
00:04:06,450 --> 00:04:13,000
and then we're going to continue on in the next clip to discuss metric filters and subscriptions.

