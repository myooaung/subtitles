WEBVTT
1
00:00:00.228 --> 00:00:04.218
You might think, didn't we cover interfaces in the UI/UX section?

2
00:00:04.218 --> 00:00:06.248
Well, we did, but only partially.

3
00:00:06.248 --> 00:00:10.373
User interface is only one of a myriad of interface types,

4
00:00:10.373 --> 00:00:15.198
so I mean any interface or exchange of information your system may need.

5
00:00:15.198 --> 00:00:16.558
And in today's world,

6
00:00:16.558 --> 00:00:20.288
never overlook the interfaces since systems cannot survive without them.

7
00:00:20.288 --> 00:00:24.534
Leveraging interfaces provides an enormous amount of traction in

8
00:00:24.534 --> 00:00:30.238
building a new system or enhancing an existing system.

9
00:00:30.238 --> 00:00:35.198
One of the most common types of the broad range of interfaces is APIs,

10
00:00:35.198 --> 00:00:37.278
application programmer interface.

11
00:00:37.278 --> 00:00:42.288
Uber is a perfect example of leveraging existing interfaces.

12
00:00:42.288 --> 00:00:44.288
It didn't have to build its own mapping,

13
00:00:44.288 --> 00:00:47.228
payment or communication services either.

14
00:00:47.228 --> 00:00:51.691
Instead, Uber is a composite of what it considers the best of those programs,

15
00:00:51.691 --> 00:00:55.218
and more, Google Maps, Braintree for payment,

16
00:00:55.218 --> 00:00:58.288
Twilio for mobile SMS, Oracle, and many more.

17
00:00:58.288 --> 00:01:01.668
Uber was able to quickly connect to these systems using

18
00:01:01.668 --> 00:01:04.248
little pieces of code called APIs.

19
00:01:04.248 --> 00:01:04.497
Therefore,

20
00:01:04.497 --> 00:01:09.208
I want to make the point that the lion's share of interface analysis

21
00:01:09.208 --> 00:01:14.713
you do will be around existing commercial APIs and consuming or

22
00:01:14.713 --> 00:01:19.208
designing internal APIs in your company.

23
00:01:19.208 --> 00:01:21.218
What is interface analysis?

24
00:01:21.218 --> 00:01:24.462
Interface analysis is used to identify the five Ws,

25
00:01:24.462 --> 00:01:26.268
where, what, why, when,

26
00:01:26.268 --> 00:01:30.258
and for whom information is exchanged with another entity.

27
00:01:30.258 --> 00:01:33.288
An interface is a connection between two entities.

28
00:01:33.288 --> 00:01:38.238
An entity can be a person, actor, system, application, to just name a few.

29
00:01:38.238 --> 00:01:42.248
These interface entities can also be referred to as endpoints.

30
00:01:42.248 --> 00:01:44.258
Examples, Joe in accounting.

31
00:01:44.258 --> 00:01:47.218
This would be a screen user interface design.

32
00:01:47.218 --> 00:01:49.288
Now, since we discussed this in the previous section,

33
00:01:49.288 --> 00:01:53.228
I will focus on other interface types in this section.

34
00:01:53.228 --> 00:01:57.248
Google Cloud Billing API, sales database in SQL Server.

35
00:01:57.248 --> 00:02:00.238
So for any new system design and analysis,

36
00:02:00.238 --> 00:02:03.218
I would expect there will be multiple endpoints,

37
00:02:03.218 --> 00:02:04.288
another way of saying interface,

38
00:02:04.288 --> 00:02:08.218
since more and more systems are leveraging cloud services.

39
00:02:08.218 --> 00:02:11.238
Remember, if your new system requirements touch anything,

40
00:02:11.238 --> 00:02:16.258
and I mean anything, it is an interface.

41
00:02:16.258 --> 00:02:18.268
Why use interface analysis?

42
00:02:18.268 --> 00:02:20.946
Because the process of doing this identifies,

43
00:02:20.946 --> 00:02:24.288
defines, and clarifies those interfaces.

44
00:02:24.288 --> 00:02:26.268
Why is the user interface needed?

45
00:02:26.268 --> 00:02:28.198
What's the importance?

46
00:02:28.198 --> 00:02:31.248
And maybe which use case or cases are driving the requirement?

47
00:02:31.248 --> 00:02:33.288
Who will use the interface, the actors?

48
00:02:33.288 --> 00:02:36.238
This helps validate the business cases too.

49
00:02:36.238 --> 00:02:38.258
What information is being exchanged?

50
00:02:38.258 --> 00:02:42.268
Parameters, volume, connection constraints, time of day, etc.

51
00:02:42.268 --> 00:02:45.198
This may help validate your data models.

52
00:02:45.198 --> 00:02:47.218
When information will be exchanged.

53
00:02:47.218 --> 00:02:49.248
Time of day, for example, and how frequently.

54
00:02:49.248 --> 00:02:52.228
This will help validate the business use cases as well.

55
00:02:52.228 --> 00:02:54.258
Where the information exchange will occur.

56
00:02:54.258 --> 00:02:57.198
For example, a centralized data exchange,

57
00:02:57.198 --> 00:03:02.198
like box.com, or a web API interface on a vendor's domain is just two examples.

58
00:03:02.198 --> 00:03:05.208
Again, this will help validate the business use cases.

59
00:03:05.208 --> 00:03:08.428
And a high-level description of how the interface is

60
00:03:08.428 --> 00:03:10.258
currently implemented or should be implemented,

61
00:03:10.258 --> 00:03:13.218
that is connected to and consumed.

62
00:03:13.218 --> 00:03:16.238
This will help determine potential complexities and costs.

63
00:03:16.238 --> 00:03:17.513
So as you can see,

64
00:03:17.513 --> 00:03:20.258
the important reasons why doing interface analysis

65
00:03:20.258 --> 00:03:24.248
will yield constructive results.

66
00:03:24.248 --> 00:03:25.235
As I mentioned,

67
00:03:25.235 --> 00:03:27.980
I will exclude the user interface and user experience

68
00:03:27.980 --> 00:03:29.268
since we covered those earlier.

69
00:03:29.268 --> 00:03:34.218
Here are some examples of what attributes you should collect for each interface.

70
00:03:34.218 --> 00:03:36.238
First, you want to develop an interface template.

71
00:03:36.238 --> 00:03:40.218
I suggest using MS Word or Excel to easily get started.

72
00:03:40.218 --> 00:03:42.778
It should contain all of the attributes about your

73
00:03:42.778 --> 00:03:44.228
interface you need to collect.

74
00:03:44.228 --> 00:03:46.238
For each interface, name the interface.

75
00:03:46.238 --> 00:03:47.278
Describe the function.

76
00:03:47.278 --> 00:03:50.198
Assess the frequency of access.

77
00:03:50.198 --> 00:03:52.288
Document the exchange method of the entities.

78
00:03:52.288 --> 00:03:55.238
And determine initial details of the interface,

79
00:03:55.238 --> 00:03:58.258
such as what's the URL, what's the endpoint itself?

80
00:03:58.258 --> 00:04:00.288
What are the costs, complexities of access,

81
00:04:00.288 --> 00:04:03.258
security, and all those other attributes?

82
00:04:03.258 --> 00:04:05.273
And I am sure you could come up with many more attributes

83
00:04:05.273 --> 00:04:09.248
that would make sense in your environment.

84
00:04:09.248 --> 00:04:12.248
Here's a simple example of an interface template.

85
00:04:12.248 --> 00:04:14.268
On the left we have the Attribute column,

86
00:04:14.268 --> 00:04:16.278
on the right we have a Description column.

87
00:04:16.278 --> 00:04:20.258
We have the interface name, in this case Transportation Portal API.

88
00:04:20.258 --> 00:04:22.208
A functional description,

89
00:04:22.208 --> 00:04:24.736
the Portal API will offer a set of features for the

90
00:04:24.736 --> 00:04:26.258
display and update of rider data.

91
00:04:26.258 --> 00:04:28.268
Okay, frequency of access.

92
00:04:28.268 --> 00:04:30.228
About 100 hits per day.

93
00:04:30.228 --> 00:04:31.238
Exchange method.

94
00:04:31.238 --> 00:04:33.228
The protocol will be JSON.

95
00:04:33.228 --> 00:04:34.268
Interface details.

96
00:04:34.268 --> 00:04:39.288
I have in there a standard call syntax, a call pattern and a response pattern.

97
00:04:39.288 --> 00:04:42.238
So these attributes give you a high-level overview.

98
00:04:42.238 --> 00:04:44.278
It could be handed over to the development team.

99
00:04:44.278 --> 00:04:47.268
They would know a little bit about it and able to get started.

100
00:04:47.268 --> 00:04:51.248
Of course this is a short list and your list should be longer,

101
00:04:51.248 --> 00:04:54.228
include things like pricing, performance,

102
00:04:54.228 --> 00:04:59.208
and other attributes that would make sense in your environment.

103
00:04:59.208 --> 00:05:02.278
There are some great tools to help you analyze the interface,

104
00:05:02.278 --> 00:05:04.278
and here are some examples of them.

105
00:05:04.278 --> 00:05:09.261
Swagger UI, Slate, Apiary, ReadMe.io, Gelato,

106
00:05:09.261 --> 00:05:12.718
ReDoc, LucyBot, Agilo, and I'm sure there's many,

107
00:05:12.718 --> 00:05:13.238
many others.

108
00:05:13.238 --> 00:05:17.936
You want to easily be able to visualize and interact with the API

109
00:05:17.936 --> 00:05:21.248
resources so you can get a good feel on how they work.

110
00:05:21.248 --> 00:05:26.218
Again, this is a short list to help you get started.

111
00:05:26.218 --> 00:05:30.198
Here is an example of one of those products, called Swagger.

112
00:05:30.198 --> 00:05:32.278
Again, I'm not expecting you to read any of this,

113
00:05:32.278 --> 00:05:37.218
but to show you that this tool is a visual representation of something as,

114
00:05:37.218 --> 00:05:42.198
to many, may be a bit mundane, behind-the-scenes API processing.

115
00:05:42.198 --> 00:05:46.278
And just for that very reason, APIs can be very hard to use and consume,

116
00:05:46.278 --> 00:05:49.238
and can take a considerable amount of time to get right.

117
00:05:49.238 --> 00:05:57.000
So a visual tool like this can be invaluable. Again, I'll always emphasize visual tools.

