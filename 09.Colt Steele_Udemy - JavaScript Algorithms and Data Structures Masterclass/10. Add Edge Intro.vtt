WEBVTT

00:00.150 --> 00:00.870
Selamat datang kembali.

00:00.870 --> 00:06.600
Selanjutnya kita akan fokus pada menambahkan tepi pada menggambar koneksi antara dua simpul.

00:06.690 --> 00:13.460
Jadi jika kita menambahkan kota-kota di Tokyo di Dallas dan Los Angeles dan Hong Kong dan hal-hal semacam itu katakanlah kita

00:13.470 --> 00:18.060
bekerja untuk maskapai yang kami wakili seperti semua penerbangan yang dimiliki maskapai dan koneksi

00:18.060 --> 00:21.070
yang Anda tahu di belakang dari majalah maskapai itu.

00:21.180 --> 00:26.280
Jika Anda pernah membaca itu lagi ada peta-peta yang memiliki semua garis dari kota akan melakukan hal

00:26.280 --> 00:27.230
yang sama.

00:27.230 --> 00:29.510
Kita akan memodelkan struktur data itu.

00:29.810 --> 00:30.330
BAIK.

00:30.540 --> 00:36.390
Jadi sebuah edge akan merepresentasikan penerbangan dari satu kota ke kota lain yang ditawarkan oleh maskapai kami sehingga sebenarnya di

00:36.390 --> 00:39.720
edge kami perlu menentukan dua kota dari dua simpul tersebut.

00:39.780 --> 00:41.720
Kami hanya akan memanggil mereka Virtex satu dan dua.

00:41.870 --> 00:48.960
Jadi fungsi yang disebut add edge perlu menerima dua argumen V1 V2 vertex 1 v vertex untuk apa

00:48.960 --> 00:58.200
pun yang Anda inginkan dan harus menemukan dalam daftar adjacency kunci Vertex 1 dan kemudian dorong vertex 2 ke dalam array itu dan kemudian melakukan

00:58.560 --> 01:01.040
hal yang sama untuk Virtex 2.

01:01.050 --> 01:06.740
Jadi harus menemukan dalam daftar adjacency kunci vertex untuk mendorong vertex 1 ke dalam array itu.

01:07.170 --> 01:09.020
Dan jangan khawatir tentang penanganan kesalahan.

01:09.030 --> 01:15.630
Jika seseorang memasukkan simpul yang tidak valid jika tepi itu sudah ada, jangan khawatirkan itu untuk saat ini.

01:15.750 --> 01:17.650
Mari kita dapatkan dasar-dasarnya.

01:17.670 --> 01:20.400
Ini sebenarnya lebih tentang bagaimana ini bekerja secara fundamental.

01:20.400 --> 01:22.690
Jadi izinkan saya menunjukkan kepada Anda bagaimana cara kerjanya.

01:22.800 --> 01:27.930
Jika ini adalah apa yang kita miliki di awal seperti kita dapat melakukan ini sekarang hanya tambahkan simpul baru ditambahkan

01:27.930 --> 01:30.320
simpul tambahkan simpul baru Tokyo Dallas dan Aspen.

01:30.320 --> 01:33.500
Tidak ada yang menghubungkan mereka, tidak ada tepi.

01:33.840 --> 01:40.040
Maka jika kita memang menambahkan edge Tokyo dan Dallas ingat bahwa ini adalah grafik yang tidak terarah.

01:40.140 --> 01:46.020
Jadi tidak masalah jika kita melakukan Tokyo dan kemudian Dallas atau Dallas daripada Tokyo tetapi hasil akhir kita akan terlihat

01:46.020 --> 01:46.740
seperti ini.

01:46.740 --> 01:47.560
Tokyo.

01:47.670 --> 01:51.070
Kunci Tokyo sekarang telah memiliki Dallas dalam susunannya.

01:51.210 --> 01:54.120
Dan kunci Dallas sekarang memiliki Tokyo dalam susunannya.

01:54.420 --> 02:00.030
Atau jika kita melakukan keunggulan dari Dallas ke Aspen yang benar-benar hal yang sama adalah Aspen ke Dallas.

02:00.300 --> 02:03.990
Kita berakhir dengan Dallas sekarang memiliki Aspen dan mereka berada di Aspen.

02:03.990 --> 02:05.340
Sekarang ada Dallas.

02:05.670 --> 02:06.100
BAIK.

02:06.270 --> 02:08.000
Jadi ini cukup pendek juga.

02:08.010 --> 02:12.600
Ini benar-benar hanya dua baris yang perlu Anda lakukan jika jika kita tidak melakukan pemeriksaan udara

02:12.960 --> 02:18.270
seperti yang saya sebutkan semua yang kami lakukan adalah menerima untuk menulis metode yang disebut edge, ia menerima dua argumen.

02:18.330 --> 02:24.210
Anda mengambil yang pertama dan Anda menemukannya di daftar adjacency menggunakannya sebagai kunci dan kemudian Anda mendorong yang kedua

02:24.210 --> 02:25.750
ke dalam array itu.

02:25.770 --> 02:30.800
Dan kemudian Anda melakukan hal yang sama untuk Virtex 2 Anda mendorong simpul pertama ke dalam arraynya.

02:31.160 --> 02:31.690
BAIK.

02:31.980 --> 02:32.710
Mari kita lihat bagaimana kelanjutannya.
