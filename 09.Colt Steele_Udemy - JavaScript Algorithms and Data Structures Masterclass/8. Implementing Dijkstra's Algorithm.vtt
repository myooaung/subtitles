WEBVTT

00:00.330 --> 00:00.860
Baiklah.

00:00.870 --> 00:02.670
Jadi mari kita mencobanya.

00:02.730 --> 00:04.110
Lihat bagaimana kelanjutannya.

00:04.140 --> 00:09.080
Beberapa hal pertama yang saya tambahkan dalam antrian prioritas adalah prioritas naif kami.

00:09.080 --> 00:10.600
T: Harus menggunakannya.

00:10.790 --> 00:12.110
Saya punya cuplikan baru.

00:12.200 --> 00:14.580
Saya telah menambahkan kode grafik tertimbang di.

00:14.640 --> 00:17.670
Sekali lagi kami hanya memiliki cara untuk menambahkan titik dan tepi.

00:17.670 --> 00:22.160
Saya tidak repot-repot menghapusnya sekarang dan kemudian di sini, ini baru.

00:22.170 --> 00:28.580
Saya menerapkan grafik dari sebelumnya hanya dengan menambahkan simpul dan kemudian berbagai tepi.

00:28.620 --> 00:33.620
Jadi kita mencari dari A ke E dengan jalur terpendek adalah dan grafik harus cocok dengan grafik ini di sini.

00:33.630 --> 00:37.800
Jadi misalnya A ke C adalah ke D ke E adalah 3.

00:37.860 --> 00:42.980
Dan hanya untuk memverifikasi apa yang kita punya untuk c dan D adalah 3 dan seterusnya.

00:43.080 --> 00:45.640
Jadi saya mengujinya dan ternyata berfungsi lebih awal.

00:45.660 --> 00:50.030
Sejauh jarak mungkin sulit untuk menuliskannya secara akurat.

00:50.260 --> 00:52.240
Jadi saya sarankan Anda menyalinnya jika Anda mau.

00:52.260 --> 00:54.450
Agak menyebalkan untuk mengetik semua ini sendiri.

00:54.450 --> 00:56.490
Baiklah jadi itu hanya pengaturannya.

00:56.520 --> 01:02.910
Sekarang kita harus mulai dengan mendefinisikan fungsi kita dan saya hanya akan menyebutnya Dykstra hanya

01:02.910 --> 01:03.880
untuk memperjelasnya.

01:04.250 --> 01:08.960
Saya akan melakukan modal D bahkan jika itu tidak super konvensional dan kami membutuhkan dua node kami.

01:09.000 --> 01:10.490
Mulai dan Selesai.

01:10.770 --> 01:18.540
Jadi di bagian paling bawah saya ingin dapat memanggil grafik dot Dykstra dari a ke z dan kami tidak benar-benar mendiskusikan apa yang

01:18.540 --> 01:21.220
seharusnya menjadi nilai pengembalian dan tidak apa-apa.

01:21.330 --> 01:26.580
Pencarian adalah bagian yang paling penting pada saat ini tetapi katakanlah itu harus mengembalikan array yang berisi node

01:26.580 --> 01:27.470
secara berurutan.

01:27.480 --> 01:32.940
Jadi A ke C ke D ke F atau apa pun itu untuk makan.

01:33.600 --> 01:35.160
OK jadi kita mulai seperti ini.

01:35.340 --> 01:38.790
Dan ada beberapa hal yang perlu Anda lakukan, yaitu membuat antrian prioritas baru.

01:38.880 --> 01:46.440
Jadi saya akan menggunakan sintaks East 20:15 kapan untuk menyebutnya node sama dengan antrian prioritas baru yang lagi datang

01:46.440 --> 01:48.330
dari itu mulai kosong.

01:48.570 --> 01:56.820
Kami perlu membuat objek jarak kami jadi sebutlah jarak itu dan hanya menginisialisasi objek kosong.

01:56.970 --> 02:05.670
Kita membutuhkan objek sebelumnya yang hanya merupakan objek lain yang mewakili tempat kita menyimpan C.

02:05.700 --> 02:08.300
Jalan tercepat untuk melihat adalah melalui a.

02:08.430 --> 02:09.110
Atau untuk masing-masing.

02:09.110 --> 02:13.210
Cara tercepat adalah melalui F dan seterusnya.

02:13.230 --> 02:16.280
Jadi, jika Anda tidak terbiasa dengan itu, saya berbicara tentang kembali dan menonton.

02:16.350 --> 02:20.180
Yah saya harus mengatakan kembali dan menonton hal ini di sini.

02:20.610 --> 02:24.350
Jadi ini jarak dan ini sebelumnya Dan itu benar-benar yang kita butuhkan untuk saat ini.

02:24.370 --> 02:26.540
OK jadi sekarang kita punya buku untuk logika.

02:26.550 --> 02:30.270
Kita perlu membangun seperti jarak awal kita.

02:30.270 --> 02:38.160
Jadi katakan saja membangun keadaan awal dan apa yang terlibat adalah pengulangan seluruh daftar

02:38.160 --> 02:39.020
adjacency.

02:39.060 --> 02:48.660
Jadi mari kita lakukan satu loop sekarang jadi saya akan melakukan 4 dalam loop dari 4 titik di daftar kedekatan titik ini.

02:48.780 --> 02:50.060
Kami memiliki beberapa hal untuk dilakukan.

02:50.250 --> 02:56.700
Pertama kita perlu mengatur setiap tombol dan objek jarak menjadi tak terhingga kecuali untuk titik awal

02:56.730 --> 02:57.970
yang harus nol.

02:58.440 --> 03:05.250
Jadi untuk melakukan itu mari kita periksa apakah titik sama dengan mulai.

03:05.270 --> 03:14.430
Jadi misalnya untuk melihat kita akan mengatur jarak Vertex sama dengan nol.

03:14.810 --> 03:17.840
Kalau tidak, aku akan melakukan yang lain hanya untuk membuatnya lebih jelas.

03:17.850 --> 03:24.580
Apakah Anda akan mengatur jarak vertex ke infinity yang sama.

03:24.920 --> 03:30.830
Jadi itu hanya menginisialisasi segala sesuatu sehingga untuk pergi dari A ke Z ini akan menginisialisasi

03:30.830 --> 03:36.970
objek jarak kita untuk berisi semua yang Anda ketahui sebagai tak terhingga dan A harus ditetapkan ke nol.

03:37.100 --> 03:42.110
Dan jika kita mau, kita bisa dengan cepat menghitung jarak log orang dewasa untuk memverifikasi bahwa itu

03:42.110 --> 03:43.970
berfungsi bagaimana seharusnya menjalankan ini.

03:44.070 --> 03:47.170
Itu nol dan yang lainnya tak terhingga.

03:47.240 --> 03:49.890
Dan tentu saja itu karena kita beralih dari A ke B.

03:49.910 --> 03:53.410
Jika kita beralih dari B ke E maka B akan menjadi nol.

03:53.900 --> 03:56.960
OK jadi kita tidak perlu konstan seperti itu sekarang.

03:56.990 --> 03:58.790
Itu hanya bagian dari apa yang perlu kita lakukan.

03:58.910 --> 04:05.050
Bersamaan dengan itu kita perlu menambahkan setiap node atau menambahkan nilai untuk setiap node ke antrian prioritas kita.

04:05.060 --> 04:09.300
Jadi kita tahu harus mulai dari mana dan apa yang harus diambil setiap waktu ke mana harus mengunjungi berikutnya.

04:09.320 --> 04:14.360
Jadi tambahkan setiap simpul dengan prioritas tak terbatas ke antrian prioritas kecuali simpul awal yang harus

04:14.360 --> 04:17.380
memiliki prioritas 0 karena di situlah kita mulai.

04:17.690 --> 04:24.910
Jadi kami membuat antrian prioritas kami yang disebut node dan saya hanya akan melakukan node dot dan queue dan kami meneruskan ke

04:24.920 --> 04:31.200
hal titik dan kemudian prioritas yang akan menjadi nol dan kemudian di sini akan melakukan hal yang sama

04:31.200 --> 04:36.190
Opps Saya benci itu dan Chrome tidak memberi saya cara mudah pula.

04:36.380 --> 04:39.120
Baiklah dan selesai di sini kita akan menambahkan infinity.

04:39.170 --> 04:44.660
Jadi untuk setiap simpul lain dalam antrian kami, kami pasti mulai dengan yang ini karena nol dibandingkan dengan

04:44.660 --> 04:45.280
tak terbatas.

04:45.290 --> 04:51.070
Tapi kemudian kita akan memperbarui hal-hal yang akan condong nanti dengan prioritas baru yang tidak terbatas.

04:51.620 --> 04:54.410
Baiklah dan satu-satunya hal lain yang harus kita lakukan untuk masing-masing.

04:54.470 --> 05:00.390
Setiap simpul tunggal yang kita perlukan untuk mengatur simpul yang sebelumnya dari simpul itu menjadi nol.

05:00.560 --> 05:04.520
Jadi, daripada melakukan itu di IF di tempat lain dan menduplikatnya, saya akan melakukannya di sini.

05:04.550 --> 05:09.920
Jadi sebelumnya Vertex sama dengan no.

05:10.010 --> 05:12.170
Jadi itu memberi kita keadaan awal kita.

05:12.170 --> 05:14.900
Kita berakhir dengan struktur ini di sini.

05:15.140 --> 05:18.230
Kami berakhir dengan antrian prioritas kami yang mencerminkan hal ini juga.

05:18.290 --> 05:22.700
Kemudian kita berakhir dengan sebelumnya di mana kita memiliki no b no C No.

05:22.940 --> 05:24.740
Dan akan memperbarui itu saat kita pergi.

05:25.110 --> 05:32.180
OK jadi selanjutnya setelah kita menginisialisasi semua yang kita butuhkan pada dasarnya menjalankan beberapa kode.

05:32.240 --> 05:33.620
Banyak komentar di sini.

05:33.980 --> 05:43.310
Selama ada sesuatu untuk dikunjungi dan cara kita dapat menulis bahwa itu hanya sementara titik-titik nilai simpul panjang titik itu simpul

05:43.320 --> 05:49.610
satu arah adalah antrian prioritas kami dan di dalam antrian prioritas kami menyimpan nilai-nilai sehingga

05:50.030 --> 05:53.990
kami dapat melakukan panjang titik yang baik .

05:54.320 --> 06:01.940
Sementara node yang nilainya mulai panjang dan hal pertama yang perlu kita lakukan adalah dequeue simpul kita jadi mulai perulangan selama

06:01.940 --> 06:05.010
ada apa pun dalam antrian dequeue sebuah simpul.

06:05.120 --> 06:08.260
Jadi dequeue harus memberi kita nilai terkecil saat ini di sana.

06:08.420 --> 06:12.860
Jadi saya akan membuat variabel yang disebut terkecil tetapi daripada menginisialisasi di sini berulang-ulang

06:13.520 --> 06:18.740
dan menginisialisasi itu saya akan mengaturnya di sini saya akan menyebutnya terkecil dan tidak mengaturnya ke

06:18.740 --> 06:20.530
nilai tetapi mendefinisikan atau mendeklarasikannya.

06:20.540 --> 06:27.530
Maksud saya alih-alih mendeklarasikannya, saya hanya akan menetapkan terkecil sama dengan node dot dequeue.

06:27.620 --> 06:32.900
Jadi ingat dari video antrian prioritas dua video yang lalu itu harus memberi kita apa pun nilai terkecil saat ini

06:32.900 --> 06:33.790
ada di sana.

06:33.830 --> 06:37.970
Beri kami titik dengan prioritas terendah dan sebenarnya kami hampir sampai.

06:37.970 --> 06:43.680
Tetapi jika kita melihat apa yang terkecil di sini, itu tidak seperti yang kita inginkan.

06:43.840 --> 06:50.660
Factsheet kode saya yang terkecil akan menjadi seluruh node atau seluruh objek yang memiliki nilai

06:50.660 --> 06:51.790
dan prioritas.

06:52.010 --> 06:58.160
Yang kita inginkan sebenarnya hanyalah vokal yang akan memberi kita a atau b supaya kita tahu simpul mana yang sedang kita

06:58.160 --> 06:58.650
lihat.

06:58.700 --> 07:00.940
Kami tidak peduli dengan prioritas sekarang.

07:00.980 --> 07:06.110
Jadi sekarang kita memiliki itu dari cara kita melihat kita akan memiliki Anda tahu yang terkecil

07:06.110 --> 07:07.240
atau B terkecil.

07:07.360 --> 07:13.250
Yang perlu kita lakukan adalah memeriksa apakah Vertex sama dengan vertex akhir kita.

07:13.250 --> 07:17.600
Jika jika itu kasus kita selesai maka saya tidak akan benar-benar mengisi

07:17.600 --> 07:24.110
semua kode tetapi saya hanya akan melakukan pemeriksaan sederhana jika terkecil sama dengan apa yang kita sebut selesai R

07:24.830 --> 07:32.780
Jika itu masalahnya kita akan kembali ke ini tetapi saya hanya akan mengatakan kita sudah selesai dan kita perlu membangun jalan untuk

07:32.780 --> 07:33.360
kembali.

07:33.470 --> 07:38.780
Tetapi jika bukan itu yang perlu kita lakukan adalah mengulangi setiap tetangga dalam daftar adjacency

07:38.780 --> 07:40.180
untuk vertex itu.

07:40.220 --> 07:46.670
Jadi jika kita melihat a kita perlu melihat masing-masing tetangga A yang termasuk B dan C.

07:47.210 --> 07:52.310
Jadi saya akan mengulangi tetangga itu dan cara termudah untuk melakukan yang terkecil hanyalah variabel

07:52.310 --> 07:53.740
yang terlihat seperti a.

07:54.110 --> 08:01.070
Dan kami memiliki daftar adjacency pemikiran ini sehingga ini sedikit daftar adjacency dari akan memberi kita sejumlah besar

08:01.070 --> 08:05.010
itu akan memberi kita sebuah array yang berisi setiap tepi.

08:05.170 --> 08:08.780
Jadi saya akan mengatakan bahwa alih-alih tentu saja saya tidak akan kode yang sulit.

08:08.800 --> 08:14.440
Saya akan meletakkan terkecil di sana dan saya akan menggunakan loop atas ini dan saya akan melakukan empat masuk

08:14.440 --> 08:17.680
Jadi saya hanya akan memanggil untuk sebut saja tetangga.

08:17.980 --> 08:24.710
Dalam daftar kedekatan ini terkecil Maka kita bisa mulai dengan saya hanya menghitung tetangga penebangan itu.

08:24.790 --> 08:27.380
Bagus dan sederhana seperti itu.

08:27.730 --> 08:33.110
Dan jika saya jalankan kembali kode saya, Anda melihat apa yang kami dapatkan di sini hanyalah angka.

08:33.400 --> 08:37.920
Dan itu for loop bekerja karena apa yang kita lakukan di sini adalah mengulang array.

08:38.020 --> 08:44.730
Jika kami benar-benar melihat daftar adjacency ini, kami melakukannya pada daftar adjacency data ini.

08:44.800 --> 08:48.240
Semoga Anda ingat seperti apa rasanya sekali lagi kami menjalankannya.

08:48.310 --> 08:49.440
Inilah yang sedang kita lihat.

08:49.450 --> 08:56.320
Jadi ketika kita mengulangi tetangga A, kita hanya mengulangi 0 dan 1 apa yang ingin kita lakukan dari

08:56.320 --> 09:00.280
sana adalah mengambil angka itu untuk mencari tahu tepi sebenarnya.

09:00.310 --> 09:06.400
Jadi saya akan membuat variabel lain yang disebut Mari kita sebut saja simpul

09:06.400 --> 09:15.330
berikutnya kita menyebutnya simpul tetangga atau sesuatu yang sama dengan daftar kedekatan data tetangga terkecil dan tetangga ini hanya sebuah angka.

09:15.340 --> 09:22.540
Jadi sekarang jika kita mempertimbangkan untuk log node selanjutnya ini akan benar-benar memberi kita apa yang kita cari.

09:22.540 --> 09:24.350
Ini adalah masing-masing node tetangga.

09:24.670 --> 09:30.580
Jadi sekarang kita memiliki setiap node tetangga setiap kali melalui kita perlu pergi dan menghitung.

09:31.060 --> 09:41.380
Jadi banyak kesamaan di sini yang pada dasarnya seperti menemukan node tetangga menghitung jarak baru ke node

09:41.930 --> 09:43.140
tetangga.

09:43.480 --> 09:47.680
Jadi katakanlah kita sedang melihat d saat ini sebagai simpul tetangga.

09:47.680 --> 09:53.410
Kita perlu menghitung jarak bagaimana kita sampai ke D di mana kita telah berkonsultasi sebelumnya. Jalur terpendek ke

09:53.410 --> 09:58.660
D adalah melalui C dan jadi kita melihat apa yang telah disimpan C saat ini.

09:58.990 --> 10:00.870
Dan kemudian kita tambahkan dua.

10:00.910 --> 10:05.230
Jadi saya tahu ini agak sulit untuk dijelaskan tanpa menunjukkannya kepada Anda.

10:05.230 --> 10:06.700
Jadi apa yang akan kita lakukan.

10:06.850 --> 10:11.150
Ini tidak dijamin bahwa ini akan menjadi lebih kecil jadi

10:11.150 --> 10:20.800
saya akan membuat variabel yang disebut Saya tidak tahu kandidat kandidat dan kami akan mengambil jarak terkecil kami Jadi terkecil adalah apa pun simpul

10:20.800 --> 10:26.380
atau kunjungan aktual adalah dan maka kita akan menambahkan simpul berikutnya tunggu katakanlah kita

10:29.820 --> 10:31.010
baru memulai.

10:31.090 --> 10:33.220
Kami memilih yang merupakan simpul kami.

10:33.230 --> 10:34.490
Ini satu-satunya hal untuk memulai.

10:34.490 --> 10:37.630
Ini adalah item minimum dan kami melihat tetangganya B.

10:37.960 --> 10:38.750
Baiklah.

10:38.860 --> 10:45.750
Jadi apa yang akan kita lakukan adalah mengambil bobot B dari A ke B yang ujungnya beri kita empat.

10:46.120 --> 10:50.580
Jadi kami mengambil empat dan kami menambahkannya ke apa pun yang kami simpan untuk yang nol.

10:50.830 --> 10:56.740
Jadi itu mudah dan kita menempatkannya di bawah B tetapi sekarang katakanlah kita maju

10:56.770 --> 11:00.280
sedikit dan kita melihat katakanlah terus berjalan.

11:00.340 --> 11:03.290
Ketika kita sampai di gereja, kita harus berada di sini.

11:03.520 --> 11:03.750
Baiklah.

11:03.760 --> 11:04.970
Jadi kita mulai dengan B.

11:05.020 --> 11:06.120
B adalah tetangga kita.

11:06.280 --> 11:07.870
Dan kami melihat BT.

11:08.050 --> 11:12.850
Nah apa yang saat ini kita simpan untuk B adalah untuk yang mewakili jarak terpendek dari A ke B

11:12.850 --> 11:13.910
yang kita ketahui.

11:14.140 --> 11:17.210
Dan kami menambahkan itu ke jarak dari B ke E yang tiga.

11:17.290 --> 11:18.830
Dan itu memberi kita 7.

11:18.910 --> 11:20.010
Jadi itulah yang akan kita lakukan.

11:20.110 --> 11:26.370
Calon sama dengan jarak saat ini untuk simpul kami ditambah jarak ke tetangga.

11:26.560 --> 11:33.730
Jadi jarak ini terkecil akan seperti empat dan kemudian nilai tetangga adalah tepi yang kita

11:33.730 --> 11:34.600
tambahkan.

11:34.600 --> 11:39.730
Jadi ini akan menjadi mudah-mudahan lebih kecil tapi pasti tidak selalu ini yang perlu

11:39.730 --> 11:40.610
kita bandingkan.

11:40.720 --> 11:44.150
Apakah ini lebih kecil dari apa yang saat ini kami simpan untuk tetangga.

11:44.440 --> 11:45.510
Jadi itu selanjutnya.

11:45.580 --> 11:52.360
Kita akan melihat apakah kandidat baru beberapa yang kita tambahkan bersama kurang dari

11:52.360 --> 12:02.070
apa yang kita miliki untuk jarak tidak terkecil tetapi dari catatan titik simpul berikutnya yang sedikit suap di sana.

12:02.310 --> 12:05.880
Tapi apa yang direfleksikan ini adalah fakta bahwa nada selanjutnya seperti ini.

12:05.940 --> 12:12.510
Ini adalah objek dan kita perlu mengakses node node berikutnya yang merupakan sesuatu seperti f.

12:12.630 --> 12:15.420
Jadi saya berjalan melalui ini.

12:15.430 --> 12:15.990
Itu banyak.

12:16.220 --> 12:21.540
Ketika Anda memikirkannya seperti ini tetapi jika kita kembali ke sini apa yang kita lakukan pada dasarnya

12:21.540 --> 12:24.390
memeriksa apakah saya maju ke D sebagai contoh.

12:24.390 --> 12:26.530
Baiklah, kita sedang mencari dari D.

12:26.580 --> 12:27.240
T.

12:27.270 --> 12:27.930
Kanan.

12:28.290 --> 12:33.600
Jadi kita mulai dengan melihat apa yang saat ini kita simpan sebagai cara terpendek untuk sampai ke D 4 dan

12:34.440 --> 12:37.220
kemudian kita melihat dari D D E itu 3.

12:37.230 --> 12:39.420
Jadi itu memberi kita 7 total.

12:39.570 --> 12:45.180
Tetapi apa yang ingin kita bandingkan dengan bukan 4 karena tentu saja itu akan menjadi lebih dari apa pun yang

12:45.180 --> 12:48.390
ada di D karena kita menambahkan D ditambah sesuatu yang lain.

12:48.390 --> 12:51.640
Yang ingin kami bandingkan adalah apa yang saat ini ada di tetangga.

12:51.750 --> 12:54.210
Apa yang saat ini ada di e yaitu 7.

12:54.210 --> 12:56.660
Dalam hal ini dan itu sama sehingga kami mengabaikannya.

12:56.900 --> 13:02.220
Tapi itulah yang kami coba lakukan, kami bawa ke mana pun kami berada. Kami menambahkan nilai

13:02.220 --> 13:08.630
terpendek saat ini dari a ke d plus bit baru ini dan kami membandingkannya dengan yang terpendek saat ini untuk E.

13:08.880 --> 13:13.780
Jadi kembali ke sini, inilah kita menghitung ulang angka baru jumlah baru ini.

13:13.950 --> 13:14.950
Ini untuk d.

13:15.020 --> 13:16.440
Ini ditambah E.

13:16.860 --> 13:21.290
Kemudian kami membandingkannya dengan apa yang saat ini kami simpan untuk.

13:21.340 --> 13:21.850
Baiklah.

13:21.850 --> 13:27.750
Jadi jika itu masalahnya kita sekarang akan memperbarui untuk apa kita menyimpannya.

13:27.850 --> 13:36.820
Jadi jarak simpul berikutnya adalah simpul simpul berikutnya dan daripada melakukan simpul titik berikutnya, mengapa kita tidak mengekstraksi ini menjadi

13:36.820 --> 13:38.190
variabel yang terpisah.

13:38.290 --> 13:42.660
Sebut saja tetangga sebelah.

13:43.990 --> 13:45.080
Seperti itu.

13:45.160 --> 13:50.350
Dan sekarang di sini saya dapat mengatakan tetangga berikutnya dan hal yang sama di sini.

13:50.350 --> 13:57.400
Ini perbedaan kecil tapi saya tidak suka harus melakukan ini tetapi ini berjalan jarak tetangga berikutnya sama

13:57.460 --> 13:59.170
dengan kandidat kami.

13:59.170 --> 14:07.080
Jadi ini hanya setara dengan memperbarui salah satu dari garis-garis ini jarak E misalnya sama dengan tujuh.

14:07.090 --> 14:07.940
Sudah tujuh.

14:07.930 --> 14:11.750
Tetapi bayangkan jika sesuatu yang lain kita perbarui nilai ini.

14:11.840 --> 14:16.980
Baiklah jika Anda masih bersama saya semoga ini adalah satu-satunya cara ini benar-benar berfungsi dan

14:16.990 --> 14:21.810
masuk akal adalah jika Anda dapat berjalan melalui diagram dalam beberapa tahun yang lalu.

14:21.850 --> 14:27.300
Baiklah apa yang kita lakukan adalah kita memperbarui sebelumnya sebelumnya adalah struktur data kita.

14:27.310 --> 14:35.660
Ini adalah hal ini di sini dan kita akan mengatakan baik-baik saja seperti yang kita dapatkan sebelumnya

14:35.660 --> 14:42.360
tetangga berikutnya adalah melalui terkecil terkecil akan menjadi D dan dekrit tetangga mungkin.

14:42.410 --> 14:44.750
Ini hanya memperbarui bagaimana kami sampai di sana.

14:44.840 --> 14:52.160
Jadi untuk menambahkan beberapa komentar ini hanya memperbarui jarak terkecil baru ke Naver.

14:52.490 --> 15:05.210
Ini memperbarui sebelumnya pada dasarnya bagaimana kita sampai tetangga sebelah ke tetangga dan kemudian hal terakhir yang perlu

15:05.210 --> 15:14.160
kita lakukan adalah dalam antrian dalam antrian prioritas dengan prioritas baru.

15:14.990 --> 15:15.370
Baiklah.

15:15.390 --> 15:22.720
Dan itu mudah, itu hanya simpul-simpul yang merupakan nama dari antrian prioritas kami dan antrian tetangga berikutnya memberi nilai pada

15:24.150 --> 15:26.450
kandidat mana yang kami sebut.

15:26.450 --> 15:28.910
Ini jumlah baru.

15:29.210 --> 15:29.780
Baiklah.

15:29.900 --> 15:34.200
Jadi itu yang terjadi dan hanya itu yang perlu kita lakukan.

15:34.550 --> 15:37.030
Sejauh sebagian besar logika.

15:37.150 --> 15:39.590
Baiklah, supaya kita bisa melihat apakah itu berfungsi.

15:39.710 --> 15:45.200
Kami tidak mengembalikan apa pun, tetapi mari kita batalkan jarak log di

15:45.200 --> 15:54.250
bagian akhir dan mari kita juga konsulat Lague sebelumnya dan mari kita lihat apa yang terjadi tetangga berikutnya tidak ditentukan.

15:54.250 --> 15:56.430
Apakah saya kehilangan dua B?

15:56.500 --> 15:58.220
Baiklah sekali lagi.

16:00.360 --> 16:01.980
Bahwa saya tahu ada sesuatu yang salah.

16:02.220 --> 16:03.490
Ya ampun.

16:03.510 --> 16:07.590
Baiklah saya perbarui semua ini menjadi tetangga berikutnya dengan satu B.

16:07.920 --> 16:08.210
BAIK.

16:08.250 --> 16:14.630
Jadi, Anda dapat melihat bahwa apa yang kita akhiri pada akhirnya adalah serangkaian jarak yang telah kita lacak.

16:14.820 --> 16:19.800
Misalnya jalur terpendek untuk sampai ke e membutuhkan 6 unit.

16:20.100 --> 16:23.140
Dan jika kita membangunnya bekerja mundur dari E ..

16:23.310 --> 16:29.830
Kita pergi ke F dari f kita pergi ke D dan D kita pergi untuk melihat dari C kita pergi ke AA.

16:30.120 --> 16:36.090
Jadi kami hanya ingin memuntahkan apa yang saya inginkan ini kembali pada dasarnya adalah array yang

16:36.090 --> 16:43.820
terlihat seperti koma dan kemudian dari kami pergi untuk melihat dari C ke D dari DB Kami pergi ke F ..

16:43.950 --> 16:45.920
Dan akhirnya dari f kami pergi ke e.

16:46.230 --> 16:49.170
Jadi kami membangunnya mundur karena hanya itu yang kami miliki.

16:49.170 --> 16:49.950
Kami memiliki E ..

16:50.060 --> 16:54.950
Jadi kita sampai ke F F kita pergi ke D D C C kita pergi ke a.

16:55.140 --> 16:58.420
Jadi saya hanya akan menambahkan mereka semua ke array dan hanya membalikkannya di akhir.

16:58.420 --> 17:00.190
Itu hanya cara sederhana untuk melakukannya.

17:00.390 --> 17:06.810
Tapi itu nilai pengembalian yang saya inginkan sehingga membuat array jalur itu pada akhirnya saya akan

17:06.810 --> 17:12.610
datang ke sini dan hanya membuat variabel bernama Path dan mengaturnya menjadi array kosong.

17:12.630 --> 17:15.140
Jadi saya hanya akan mengatakan untuk mengakhiri.

17:15.730 --> 17:23.040
OK kemudian di sini ketika kita benar-benar menemukan apa yang kita cari ketika kita selesai membangun jalur itu

17:23.040 --> 17:27.630
untuk kembali pada akhirnya saya akan mulai kita harus menggunakan sebelumnya.

17:27.640 --> 17:31.380
Benar itulah struktur ini dan pada dasarnya kita perlu mengulang.

17:31.410 --> 17:36.940
Jadi kita perlu terus mengulang dari E untuk melihat F dan kemudian dari setelah seperti D dan D.

17:36.960 --> 17:38.070
Dan di mana kita berhenti.

17:38.070 --> 17:43.050
Yah akhirnya kita sampai ke C C ke A dan kemudian kita melihat a dan itu tidak.

17:43.470 --> 17:49.770
Jadi kita dapat melakukan loop sementara dan ini seperti melintasi semua daftar meskipun secara teknis

17:49.770 --> 17:51.870
objek tetapi hanya jalur linier.

17:52.140 --> 17:58.540
Jadi saya akan lakukan sementara sebelumnya dari yang terkecil dan saya akan memperbarui apa yang terkecil saat kita pergi.

17:58.560 --> 18:05.340
Jadi saya akan melewatkan push terkecil dan kemudian saya akan mengatakan terkecil sekarang sama dengan

18:05.760 --> 18:07.490
yang sebelumnya terkecil.

18:07.680 --> 18:12.000
Jadi pada mulanya terkecil adalah di akhir menjalankan kode kami.

18:12.000 --> 18:13.310
Tetapi pada awal bagian ini.

18:13.560 --> 18:15.970
Jadi e terkecil sebelumnya memberi kita F ..

18:16.110 --> 18:17.890
Jadi kami mendorongnya.

18:18.060 --> 18:21.800
Dan sekarang kita katakan terkecil adalah sama dengan f dan kemudian mulai lagi.

18:21.960 --> 18:24.570
Jadi adakah yang terkecil sebelumnya f.

18:24.630 --> 18:25.640
Ya ada.

18:25.650 --> 18:31.720
Jadi kita tekan f di sini dan kemudian kita atur terkecil menjadi sekarang b d dan kita terus berjalan sampai kita mencapai a.

18:31.860 --> 18:33.980
Di mana tidak ada sebelumnya.

18:33.990 --> 18:34.520
Dari.

18:34.860 --> 18:37.440
Karena tidak dan kita sudah selesai.

18:37.560 --> 18:42.570
Sekarang yang perlu kita lakukan adalah menambahkan jeda di sini agar kita tidak terus mengulang.

18:42.570 --> 18:49.560
Saya ingin menghentikan loop ini karena meskipun kami menemukan apa yang kami cari loop ini terus berjalan sementara ada

18:49.560 --> 18:51.210
node dalam antrian prioritas.

18:51.210 --> 18:53.150
Dan tentu saja ada lebih banyak node di sana.

18:53.250 --> 18:58.530
Ya, tentu saja tidak mungkin hal terakhir yang kita lihat, tetapi kemungkinan ada hal-hal di

18:58.530 --> 18:59.150
sana.

18:59.150 --> 19:01.690
Jadi kita akan keluar.

19:01.800 --> 19:03.140
Sehingga akan menghentikan segalanya.

19:03.390 --> 19:08.450
Dan kemudian pada bagian paling akhir jika kita datang ke sini, bocah, aku benci melakukan ini.

19:08.700 --> 19:12.180
Di mana kita harus pergi melihat loop kami berhenti di sini.

19:12.180 --> 19:12.380
Baiklah.

19:12.390 --> 19:19.680
Jadi setelah loop kita akan lakukan, mari kita lakukan log path konstan dan lihat apa yang kita miliki

19:19.680 --> 19:20.440
Dan saya menjalankannya.

19:20.490 --> 19:22.330
Baiklah, jadi kita hampir sampai.

19:22.350 --> 19:25.500
Satu-satunya hal adalah kita perlu membalikkannya.

19:26.310 --> 19:27.930
Jadi untuk membalikkannya.

19:28.020 --> 19:30.740
Dan kami ingin menambahkan karena a tidak ada di sini.

19:30.990 --> 19:35.450
Jadi untuk mendapatkan di sana yang merupakan awal kita, kita ingin c d e.

19:35.670 --> 19:37.090
Cukup mudah untuk memperbaikinya.

19:37.110 --> 19:40.230
Kami hanya bisa melakukan jalur kembali titik.

19:40.370 --> 19:46.880
Maksud saya concat di sana yang merupakan titik mundur terkecil.

19:47.550 --> 19:56.360
Dan jika saya menjalankan kode saya sekarang di sana kita pergi C D F ke E dan jika kita mencoba mengubahnya bukan ke e yang merupakan jalur

19:56.360 --> 19:59.370
terpendek yang Anda dapatkan dari A ke C.

19:59.630 --> 20:05.970
Yah saya pergi dengan mudah pergi bagi saya untuk melihat bagaimana tentang F C C F sekitar 2.

20:06.000 --> 20:07.990
Saya pikir mereka semua cukup sederhana pada saat ini.

20:07.990 --> 20:11.080
Mereka semua berada di garis yang sama a C dan D.

20:11.490 --> 20:13.030
Dan kita selesai sekarang.

20:13.070 --> 20:21.030
Ini banyak hal dan kodenya cukup menakutkan jika Anda tidak dapat melewati dan memproses slide dan jenis berjalan melalui

20:21.030 --> 20:25.650
langkah demi langkah jika Anda hanya mencoba mempelajarinya dengan melihat ini.

20:25.770 --> 20:27.250
Ini sangat sulit.

20:27.660 --> 20:33.000
Tapi saya pikir itu masuk akal ketika Anda melewati dan melangkah dan memahami setiap kali melalui apa yang sebenarnya

20:33.000 --> 20:35.790
kita lakukan jika Anda menuliskannya dengan pena dan kertas.

20:35.790 --> 20:41.970
Jika Anda melihat apa masing-masing nilai ini sebenarnya ketika kami memilih simpul terkecil prioritas terkecil kami menambahkan total

20:42.030 --> 20:46.260
baru bersama-sama dan kami membandingkannya dengan apa yang kami simpan untuk tetangga.

20:46.320 --> 20:49.080
Dan kami memperbarui secara potensial jika lebih kecil.

20:49.080 --> 20:49.870
Banyak yang terjadi.

20:49.890 --> 20:54.320
Tetapi jika Anda dapat melakukannya dengan pena dan kertas maka ini seharusnya cukup mudah.

20:54.330 --> 20:55.340
Yah tidak cukup mudah.

20:55.340 --> 20:57.170
Itu harus bisa dilakukan.

20:57.180 --> 21:02.730
Apa pun ini Dijkstra dan ini adalah versi kami yang tidak dioptimalkan di mana kami menggunakan antrian prioritas yang

21:03.000 --> 21:03.890
tidak baik.

21:03.930 --> 21:07.590
Antrian prioritas ini tidak ideal karena tidak diterapkan dengan tumpukan biner.

21:07.590 --> 21:11.460
Agak lambat karena kami mengurutkan seluruh array setiap saat.

21:11.670 --> 21:13.920
Jika kita menggunakan tumpukan biner lebih cepat.

21:13.920 --> 21:15.290
Ingat dari bagian itu.

21:15.300 --> 21:18.780
Jadi selanjutnya kita akan memperbaikinya hanya untuk membuatnya sedikit lebih cepat.
