WEBVTT

00:00.270 --> 00:01.530
Hai, selamat datang kembali.

00:01.530 --> 00:06.870
Jadi kami beralih ke struktur data kedua kami daftar panjang lain pertama kali ini adalah daftar yang terhubung

00:06.870 --> 00:11.210
dua kali lipat, bukan daftar yang terhubung secara tunggal dan pada dasarnya peringatan spoiler.

00:11.220 --> 00:16.790
Yang kita lakukan hanyalah menambahkan pointer ke node sebelumnya dan node berikutnya.

00:16.800 --> 00:22.360
Jadi setiap node menunjuk ke dua arah yang tampak seperti perubahan yang sangat kecil dan itu ke struktur

00:22.650 --> 00:26.810
aktual tetapi memiliki beberapa konsekuensi besar untuk kode yang kita tulis metode.

00:26.820 --> 00:29.730
Tapi pertama-tama mari kita bicara tentang tujuan kita.

00:29.730 --> 00:31.850
Kami akan membuat daftar yang ditautkan dua kali lipat.

00:31.980 --> 00:37.170
Kami akan membandingkan dan membandingkan daftar panjang tunggal dua kali lipat dan juga akan menerapkan operasi

00:37.170 --> 00:42.210
dasar seperti yang kami lakukan di bagian terakhir push pop shift shift insert get set.

00:42.360 --> 00:43.300
Semua itu.

00:43.560 --> 00:46.390
Tapi pertama-tama mari kita mulai dengan hanya menjelaskan cara kerjanya.

00:46.620 --> 00:47.600
Jadi itu properti yang disebutkan.

00:47.610 --> 00:49.990
Ini hampir identik dengan daftar yang terhubung sendiri.

00:50.010 --> 00:51.300
Kami memiliki banyak node.

00:51.380 --> 00:52.940
Tidak ada pengindeksan.

00:52.940 --> 00:54.080
Jadi masih berkedip dulu.

00:54.090 --> 00:55.320
Ini tidak seperti sebuah array.

00:55.440 --> 00:58.410
Kami tidak memiliki akses acak menggunakan angka atau indeks.

00:58.410 --> 01:03.840
Kita mulai, kita memiliki kepala dan kita memiliki ekor tetapi setiap simpul dalam daftar menunjuk ke simpul berikutnya di

01:03.840 --> 01:04.180
depannya.

01:04.320 --> 01:07.490
Tetapi juga simpul sebelumnya di belakangnya.

01:07.650 --> 01:12.210
Jadi dari situlah bagian yang terhubung dua kali lipat bukan hanya menunjuk ke berikutnya berikutnya berikutnya.

01:12.210 --> 01:13.770
Terlihat lebih seperti ini.

01:13.800 --> 01:20.190
Jadi kita memiliki kepala yang menunjuk ke item berikutnya dan kemudian juga memiliki pointer sebelumnya tetapi tidak ada karena

01:20.190 --> 01:21.250
itu adalah permulaan.

01:21.420 --> 01:27.870
Jadi item kedua kita menunjuk ke item berikutnya tetapi juga ke item sebelumnya dan sampai ke ekor

01:27.870 --> 01:29.260
kita item terakhir.

01:29.310 --> 01:32.110
Tidak ada yang berikutnya tetapi memiliki yang sebelumnya.

01:32.130 --> 01:37.650
Jadi seperti yang Anda sebutkan itu adalah perubahan kecil secara struktural untuk setiap node hanya satu pointer menunjuk

01:37.650 --> 01:43.380
ke node sebelumnya di setiap node tetapi memiliki dampak besar pada beberapa kode yang kami tulis dan efisiensi

01:43.380 --> 01:44.280
operasi tertentu.

01:44.280 --> 01:50.580
Sebagai contoh ketika kita berbicara tentang memunculkan item terakhir dari daftar panjang, daftar yang ditautkan satu sama lain seperti yang kita

01:50.580 --> 01:54.960
miliki di sini hanya ada satu cara Duret ini panah menunjuk satu arah.

01:54.960 --> 01:55.830
Ini dia.

01:56.050 --> 02:04.230
Jika Anda ingin menghapus item terakhir ini dan saya pergi untuk menghapus dari ekor kita harus mengulangi seluruh

02:04.230 --> 02:08.370
daftar dan kita harus menemukan item kedua hingga terakhir.

02:08.430 --> 02:13.080
Ingat jika Anda menonton video pada pop di bagian terakhir kami harus menemukan item kedua hingga

02:13.110 --> 02:14.610
terakhir dan menjadikannya ekor baru.

02:14.790 --> 02:20.300
Kita tidak bisa langsung pergi ke ekor seperti jika kita pergi untuk menghapus 16 kita bisa pergi ke 16 dan menghapusnya.

02:20.520 --> 02:24.000
Kita harus pergi ke item sebelumnya dan menjadikannya ekor baru.

02:24.150 --> 02:27.540
Jadi kita tidak bisa bekerja mundur ketika kita berbicara tentang panjang ganda.

02:27.540 --> 02:34.420
Namun pertama jika saya ingin menghapus item terakhir saya hanya bisa pergi ke ekor dan bekerja mundur dengan sebelumnya.

02:34.440 --> 02:39.300
Saya dapat memindahkan arah ini daripada harus pergi dari awal hingga akhir item kedua ke

02:39.300 --> 02:39.800
terakhir.

02:39.810 --> 02:40.980
Saya hanya bisa bekerja mundur.

02:41.040 --> 02:43.460
Atau hal lain yang jauh lebih mudah.

02:43.470 --> 02:49.790
Bayangkan Anda ingin mencetak daftar panjang secara terbalik atau Anda ingin mengulanginya secara terbalik.

02:49.890 --> 02:52.790
Jika Anda memiliki tautan tunggal terlebih dahulu dan Anda mencoba untuk mundur.

02:53.040 --> 02:54.480
Ini sangat menyakitkan.

02:54.480 --> 02:55.790
Ini sangat tidak efisien.

02:55.920 --> 03:00.020
Anda pada dasarnya mulai dari awal terus sampai akhir dan Anda tidak dapat bekerja mundur.

03:00.120 --> 03:05.430
Jadi Anda bisa memulai dan pergi ke yang kedua hal terakhir atau maksud saya Anda bisa membuat array dan hanya

03:05.460 --> 03:09.740
menambahkan sesuatu ke array itu satu kali saat Anda melewati dan kemudian membalikkan array itu.

03:09.810 --> 03:14.070
Tetapi tidak ada cara mudah untuk hanya memulai dari awal dan pergi atau mulai dari akhir dan pergi di

03:14.520 --> 03:15.690
awal dengan menggandakan panjang pertama.

03:15.720 --> 03:19.520
Anda bisa memulainya di sini dan kita bisa melakukan sebelumnya sebelumnya sebelumnya.

03:19.530 --> 03:21.990
Semudah pergi dari awal.

03:21.990 --> 03:23.270
Selanjutnya selanjutnya berikutnya.

03:23.310 --> 03:28.710
Dan ketika kita melewati bagian Oh pasti menghabiskan waktu membandingkan keduanya sendiri-sendiri dan menggandakan untuk

03:28.710 --> 03:33.540
kita dan bagaimana mereka melakukan pada operasi tertentu dan Anda akan melihat bahwa

03:33.540 --> 03:40.770
beberapa kode yang kita tulis sedikit lebih rumit karena pada minimum kita sekarang harus memperhitungkan dua petunjuk kita harus memperbarui

03:40.770 --> 03:47.010
berikutnya dan sebelumnya setiap kali kita menambahkan sesuatu atau menghapus sesuatu atau menghapus beberapa juga menghapus dan menghapus

03:47.010 --> 03:48.750
hal yang sama persis.

03:49.050 --> 03:52.950
Jadi kami memiliki beberapa pekerjaan yang harus dilakukan tetapi tidak terlalu sulit.

03:52.950 --> 03:55.830
Kerugian sebenarnya adalah bahwa ia membutuhkan lebih banyak memori.

03:55.830 --> 04:01.590
Jadi itu semacam selalu tradeoff dalam pemrograman lebih banyak fleksibilitas menggunakan daftar panjang dua kali lipat tetapi juga

04:01.590 --> 04:02.910
berarti lebih banyak memori.

04:02.910 --> 04:08.270
Itu langkah besar karena sekarang kita menyimpan sebelumnya dan berikutnya bukan hanya berikutnya.

04:08.310 --> 04:08.610
BAIK.

04:08.670 --> 04:12.180
Jadi ini akan menjadi sesuatu yang kita kembali tetapi kita akan meninggalkan ini untuk saat ini.

04:12.210 --> 04:17.390
Pada daftar yang ditautkan sendiri dan ganda pertama, mereka sangat mirip dalam banyak hal.

04:17.430 --> 04:19.810
Tidak ada tidak ada indeks.

04:19.860 --> 04:25.050
Ada pesanan untuk mereka dan mereka hanya terdiri dari sekelompok node yang dihubungkan oleh pointer yang

04:25.090 --> 04:32.460
terhubung secara tunggal. Ini adalah satu arah saja yang berikutnya atau maksud saya secara teoritis sebelumnya, tetapi daftar yang ditautkan dua arah memiliki

04:32.550 --> 04:37.860
kedua arah yang menunjuk ke item berikutnya dan item di belakangnya item sebelumnya di video berikutnya akan

04:37.860 --> 04:43.110
menerapkan daftar panjang penggandaan kita sendiri dan kita akan bekerja pada push dan pop dan beberapa metode

04:43.110 --> 04:43.780
lainnya.
