WEBVTT

00:00.230 --> 00:01.280
Hai, selamat datang kembali.

00:01.290 --> 00:03.370
Jadi kita sebenarnya masih berbicara tentang semacam gelembung.

00:03.360 --> 00:06.890
Karena ada satu optimasi penting yang belum kita diskusikan.

00:07.110 --> 00:13.590
Jadi ada skenario yang sangat spesifik di mana jika data kami hampir diurutkan atau jika sudah

00:13.890 --> 00:15.650
diurutkan tidak perlu diurutkan.

00:15.780 --> 00:20.480
Algoritma pengurutan gelembung kami sebagaimana adanya tidak benar-benar diperlakukan secara berbeda.

00:20.550 --> 00:22.960
Masih mencoba untuk mengurutkan setiap item.

00:22.980 --> 00:30.780
Jadi dalam skenario ini di mana kita hampir diurutkan 5 maju cepat melalui OK ini mungkin ini agak terlalu

00:30.780 --> 00:31.480
lama.

00:31.830 --> 00:32.690
OK OK.

00:32.700 --> 00:34.120
Kita hampir sampai sekarang.

00:34.140 --> 00:35.180
Kami diurutkan dengan benar.

00:35.310 --> 00:39.050
Jadi jika kita sampai pada akhirnya dan sebagai manusia kita bisa melihat bahwa kita sudah selesai.

00:39.360 --> 00:43.390
Tetapi kode kita sebenarnya akan terus berjalan dan akan berlanjut sampai akhir.

00:43.650 --> 00:49.030
Tidak ada swap yang dibuat tetapi kemudian berjalan lagi dan mencoba untuk mengurutkan semua ini sampai di sini kemudian

00:49.050 --> 00:53.570
kembali mencoba untuk mengurutkan semua ini untuk mendengar meskipun tidak ada yang terjadi, hanya iterasi.

00:53.580 --> 00:59.370
Jadi jika kita memiliki array yang sangat panjang itu akan menjadi masalah karena hanya membutuhkan banyak

00:59.370 --> 01:00.070
waktu.

01:00.150 --> 01:07.720
Jadi kita dapat membuat hubungan pendek kode kita yang harus kita lakukan adalah memeriksa terakhir kali melalui Apakah kita melakukan swap.

01:07.740 --> 01:11.830
Jika jawabannya tidak jika kita tidak menukar apa pun itu berarti kita sudah selesai.

01:12.150 --> 01:15.260
Karena jika Anda tidak menukar di saat terakhir Anda tidak akan menukar mereka di waktu berikutnya.

01:15.360 --> 01:19.970
Jadi, kembali ke kode kita, apa yang akan saya lakukan adalah membuat dua versi.

01:20.100 --> 01:21.800
Kami mendapatkan banyak solusi.

01:22.110 --> 01:27.780
Jika kita mengomentari ini untuk saat ini tidak pernah tahu apa cara terbaik untuk melakukan ini adalah karena

01:27.780 --> 01:30.770
siswa suka memiliki langkah-langkah yang berbeda saat aku melangkah.

01:30.930 --> 01:34.980
Tapi saya juga tidak suka membuat file super panjang karena bisa membuat takut beberapa orang.

01:35.080 --> 01:42.930
Apa yang bisa kita lakukan jika kita menyebutnya sekarang dengan array yang hampir diurutkan seperti delapan datang satu dua tiga

01:42.930 --> 01:45.330
empat lima enam tujuh misalnya.

01:45.330 --> 01:47.600
Jadi kita hampir sampai setelah pass pertama.

01:47.610 --> 01:50.050
Ini akan disortir itu akan di akhir.

01:50.340 --> 01:55.400
Jika kita melihat sekarang berapa kali atau berapa perbandingan yang kita lakukan secara kasar.

01:55.590 --> 01:56.560
Ayo jalankan sekarang.

01:57.770 --> 01:58.810
Sedang menghasilkan satu ton.

01:58.980 --> 02:05.690
Karena sudah diurutkan pada titik ini dan kami terus berjalan tanpa melakukan pertukaran satu ton pun setelah

02:05.690 --> 02:06.250
itu.

02:06.500 --> 02:14.210
Jadi yang akan saya lakukan adalah saya akan membuat variabel Saya akan menyebutnya tidak ada swap dan tidak ada swap adalah jika itu benar berarti tidak

02:14.210 --> 02:16.780
ada swap dan kami akan keluar dari loop.

02:16.910 --> 02:20.060
Jadi saya bisa mulai dengan itu di sini meskipun tidak didefinisikan.

02:20.060 --> 02:26.070
Saya bisa menulis jika tidak ada pertukaran swap yang akan membuat kami keluar.

02:26.180 --> 02:30.130
Tentu saja kami tidak memiliki swap yang didefinisikan sehingga tampaknya semua melakukan jauh.

02:30.320 --> 02:32.290
Tidak ada swap seperti ini.

02:32.540 --> 02:39.260
Dan kemudian di dalam loop setiap kali saya akan mengaturnya benar kita akan menganggap tidak ada swap

02:39.290 --> 02:40.530
setiap kali melalui

02:40.640 --> 02:50.040
Tetapi kemudian jika kita melakukan swap yang ada di sini ingat kita dapat mengaturnya agar tidak ada swap sama dengan false.

02:50.150 --> 02:50.960
Apakah itu masuk akal.

02:50.960 --> 02:57.050
Jadi saat kita melewati setiap waktu di awal, katakanlah kita mulai dengan ini tidak ada swap

02:57.050 --> 02:58.070
yang benar.

02:58.580 --> 03:03.110
Dan kemudian kita melakukan swap langsung dari kelelawar delapan dan satu kita swap.

03:03.110 --> 03:06.340
Jadi sekarang tidak ada kesempatan untuk keluar kali ini.

03:06.500 --> 03:12.680
Tapi kemudian kita menyelesaikan iterasi dan delapan sekarang pada akhirnya Anda bisa lihat di sini misalnya waktu berikutnya

03:12.680 --> 03:16.510
tanpa swap adalah benar dan kami tidak pernah melakukan swap.

03:16.520 --> 03:21.350
Ini tidak pernah benar sehingga kita tidak pernah menjadikannya salah yang berarti kita melewati semua jalan sampai akhir.

03:21.350 --> 03:22.700
Sekali waktu sesudahnya.

03:22.700 --> 03:26.680
Jadi kita mengurutkan semuanya kemudian kita beralih tanpa swap.

03:26.870 --> 03:28.240
Lalu kita selesai dengan itu.

03:28.610 --> 03:32.270
Dan ini benar sekarang jika tidak ada swap dan kita keluar.

03:32.330 --> 03:38.720
Jadi sekarang jika kita melihat apa ini berapa kali hanya pangeran keluar dengan garis ini Anda dapat melihat

03:38.720 --> 03:43.460
bahwa pada dasarnya kita harus mendapatkannya sampai akhir yang ada di sini.

03:43.550 --> 03:49.670
Ini adalah pertama kalinya kami melewati dan kemudian kami melewati sekali lagi dan kami selesai dan kemudian hanya

03:49.670 --> 03:50.270
itu.

03:50.300 --> 03:55.390
Kami tidak melanjutkan dan membandingkannya dengan versi sebelumnya yang kami lalui.

03:55.520 --> 04:01.850
Kami sampai pada akhir dan kemudian kami terus memilah-milah berulang kali dalam kasus

04:02.690 --> 04:05.520
ini kami memperpendeknya secara signifikan.

04:05.720 --> 04:11.690
Dan seiring dengan tumbuhnya array jika hampir diurutkan yang membuat perbedaan sangat besar.

04:11.990 --> 04:12.270
BAIK.

04:12.290 --> 04:14.420
Jadi saya hanya menambahkan sedikit komentar.

04:14.420 --> 04:20.690
Ini adalah versi kami berikutnya yang kami optimalkan dengan variabel tanpa swap hanya perubahan kecil tetapi ini benar-benar

04:20.690 --> 04:22.320
dapat menghemat banyak waktu.
