WEBVTT

00:00.150 --> 00:00.440
Baiklah.

00:00.450 --> 00:01.260
Selamat datang kembali.

00:01.260 --> 00:08.370
Selanjutnya mari kita tambahkan metode yang disebut Cari atau cari atau apa pun yang Anda inginkan Anda tahu mengandung simpul pada dasarnya idenya adalah

00:08.370 --> 00:13.890
bahwa Anda memiliki pohon biner dan Anda dapat mencari untuk melihat apakah ada nilai di pohon itu.

00:13.950 --> 00:17.970
Jadi dia bisa mencari untuk melihat apakah 50 adalah pohon atau 100 bukan pohon.

00:18.240 --> 00:24.180
Dan prosesnya sangat mirip dengan memasukkan dalam pohon pencarian biner setidaknya karena kita memiliki aturan

00:24.300 --> 00:25.120
itu.

00:25.230 --> 00:28.100
Yang Anda tahu lebih besar daripada ke kanan kurang dari ke kiri.

00:28.200 --> 00:32.970
Jadi kita dapat memotong sekitar setengah pohon dari setiap perbandingan yang kita buat.

00:32.970 --> 00:40.310
Jadi misalnya ketika kita pergi untuk memasukkan angka seperti katakanlah kita memasukkan tujuh ke daftar ini

00:41.010 --> 00:42.360
Ayo lakukan itu dengan cepat.

00:42.360 --> 00:44.140
Masukkan angka tujuh.

00:44.160 --> 00:45.140
Baiklah kita membandingkannya.

00:45.180 --> 00:48.500
Ini kurang dari ini sangat cepat.

00:48.810 --> 00:50.580
Kami memeriksa setelah kami sampai ke 11.

00:50.610 --> 00:51.590
Apakah ada kiri.

00:51.630 --> 00:52.090
Nggak.

00:52.260 --> 00:54.060
Nah di situlah 7 pergi.

00:54.060 --> 01:01.500
Sekarang untuk melakukan hal yang sama tetapi mencari 7 saya akan lebih lambat kali ini kita melakukan langkah-langkah yang sama persis kita

01:01.770 --> 01:02.250
periksa.

01:02.250 --> 01:03.550
Baiklah, ini 7.

01:03.840 --> 01:04.450
Tidak.

01:04.680 --> 01:06.690
Jadi itu kurang dari OK.

01:06.810 --> 01:09.080
Jadi kita perlu melihat ke kiri.

01:09.190 --> 01:10.000
Apakah ini 7.

01:10.030 --> 01:11.120
Dua puluh bukan tujuh.

01:11.230 --> 01:13.130
Jadi tujuh kurang dari lagi.

01:13.450 --> 01:15.270
Jadi yang kita lihat di sebelah kiri adalah angka 7 ini.

01:15.340 --> 01:18.900
Tidak 11 tetapi kita tahu bahwa 7 kurang dari 11.

01:18.900 --> 01:22.310
Jadi kami melihat ke kiri dan apa yang Anda tahu kami temukan tujuh.

01:22.480 --> 01:25.200
Jadi kita mengembalikan true atau mengembalikan node.

01:25.600 --> 01:26.320
Kami hanya akan melakukan.

01:26.320 --> 01:26.920
Benar atau salah.

01:26.920 --> 01:29.620
Untuk melihat apakah kami menemukannya jika mengandung nilai itu.

01:30.010 --> 01:34.570
Dan jika kita memasukkan sesuatu yang tidak ada di sana atau

01:34.570 --> 01:41.270
menyesal jika kita mencari sesuatu yang tidak ada di sana seperti katakanlah kita sedang mencari 75 go.

01:41.480 --> 01:42.800
Baiklah kita mulai dari sini.

01:42.830 --> 01:44.180
Apakah ini sama dengan 75.

01:44.180 --> 01:44.720
Akar.

01:44.780 --> 01:45.300
Nggak.

01:45.410 --> 01:46.470
75 lebih besar.

01:46.520 --> 01:50.490
Jadi akan ada di sini jika ada di sini di sisi kanan.

01:50.540 --> 01:52.110
Jadi kita sampai ke simpul berikutnya.

01:52.130 --> 01:53.980
Baiklah, 75 sama dengan 65.

01:53.990 --> 01:54.440
Nggak.

01:54.560 --> 01:55.340
Lebih besar dari itu.

01:55.370 --> 01:59.230
Jadi akan ada di sini di sebelah kanan OK.

01:59.280 --> 02:01.150
Jadi sekarang kita punya 91.

02:01.260 --> 02:03.170
Nah 75 kurang dari 91.

02:03.180 --> 02:10.380
Jadi kita perlu melihat ke kiri dan kita mencapai 72 dan sekarang 75 lebih besar dari 72.

02:10.380 --> 02:14.610
Jadi kita tahu itu harus di kanan tetapi tidak ada yang benar.

02:14.670 --> 02:16.500
Jadi itu berarti tidak ada di sini.

02:16.500 --> 02:23.580
Jika kita menemukan titik di mana kita pada dasarnya mengenai ujung pohon pada satu cabang dan tidak ada titik jaring atau tidak berikutnya tidak ada

02:23.640 --> 02:27.630
yang benar ketika kita mencarinya dengan benar atau tidak ada kiri dan kita

02:27.630 --> 02:32.980
sedang mencari kiri memberitahu kita nilainya tidak ada di sana dengan asumsi pohon kita sudah diatur dengan benar.

02:33.030 --> 02:38.970
Maksud saya jika karena suatu alasan 75 salah dengar. Tentu saja kita tidak akan menemukannya karena kita tidak

02:38.970 --> 02:40.350
memeriksa setiap node.

02:40.350 --> 02:42.320
Itulah inti dari pohon pencarian biner.

02:42.390 --> 02:46.570
Kami tahu urutan barang disimpan dan kami tahu bagaimana itu disusun.

02:46.680 --> 02:50.030
Jadi kita bisa memanfaatkan itu menjadi pencarian yang jauh lebih cepat.

02:50.430 --> 02:55.040
OK jadi dalam kasus ini kami akan mengembalikan false atau mengembalikan no.

02:55.080 --> 02:56.470
Dan ini yang mereka tunjukkan.

02:56.640 --> 03:00.000
Jadi langkah-langkah dasar dimulai pada pemeriksaan root jika ada rute.

03:00.000 --> 03:02.550
Jika tidak kita selesai karena tidak ada apa-apa di sana.

03:02.850 --> 03:07.480
Jika ada rute, periksa nilai node baru, lihat apakah itu sama dengan apa yang kita cari.

03:07.530 --> 03:10.060
Jika Anda menemukannya maka kami sudah selesai.

03:10.110 --> 03:15.030
Jika tidak, periksa untuk melihat apakah nilainya lebih besar atau lebih kecil daripada jika lebih besar.

03:15.030 --> 03:16.590
Lihat apakah ada sesuatu di sebelah kanan.

03:16.680 --> 03:23.070
Jika ada pindah ke simpul itu dan ulangi langkah yang sama jika tidak ada artinya kita sudah selesai.

03:23.070 --> 03:24.500
Hal yang sama di sebelah kiri.

03:24.510 --> 03:25.670
Jadi saya berjalan melewatinya sekali lagi.

03:25.680 --> 03:28.380
Jika Anda merasa baik untuk pergi, coba implementasikan sendiri.

03:28.530 --> 03:32.320
Ini sangat mirip dengan apa yang kami lakukan di video terakhir dengan memasukkan.

03:32.400 --> 03:36.960
Ini sebenarnya sedikit lebih sederhana, misalkan kita mencari 40.

03:36.990 --> 03:38.790
Kita akan mulai di sini 41.

03:38.810 --> 03:38.970
Kanan.

03:38.970 --> 03:40.440
40 kurang dari 41.

03:40.470 --> 03:42.090
Jadi kita melihat ke kiri.

03:42.270 --> 03:42.960
Kami mencapai 20.

03:43.020 --> 03:44.800
Nah 40 lebih besar dari 20.

03:44.850 --> 03:45.420
Kami memeriksa.

03:45.420 --> 03:47.250
Apakah ada sesuatu di sebelah kanan.

03:47.250 --> 03:48.370
Iya nih.

03:48.390 --> 03:52.140
Jadi kita memulai perulangan 40 sama dengan 29.

03:52.380 --> 03:53.390
Tidak.

03:53.400 --> 03:56.010
Jadi kami periksa lebih besar dari.

03:56.040 --> 03:57.520
Jadi, apakah ada titik yang tepat.

03:57.660 --> 03:58.550
Iya nih.

03:58.560 --> 04:02.580
Jadi kita pindah ke sini dan memulai loop lebih dari 40 sama dengan 32.

04:02.880 --> 04:03.440
Nggak.

04:03.630 --> 04:04.490
Jadi kita periksa.

04:04.530 --> 04:08.100
Apakah ada sesuatu di sebelah kanan karena 40 lebih besar dari 32.

04:08.100 --> 04:09.550
Tidak, tidak ada.

04:09.570 --> 04:10.970
Itu berarti kami tidak menemukannya.

04:11.010 --> 04:12.260
Kami mengembalikan false.

04:12.270 --> 04:14.080
Jadi itu adalah langkah dasar.

04:14.100 --> 04:14.820
Lanjutkan.

04:14.820 --> 04:19.620
Anda tahu Anda tidak harus mengikuti kode pseudo ke tee itu tidak mengandung setiap bit informasi.

04:19.620 --> 04:27.000
Sebagai contoh, kita ingin memiliki kemungkinan while dan saya akan membuat variabel bernama ditemukan dalam variabel yang disebut Current atau

04:27.000 --> 04:30.830
start atau semacam variabel untuk melacak di mana Anda berada.

04:30.870 --> 04:35.790
Dan kemudian variabel yang akan Anda atur ke True atau false yang akan menghentikan loop.

04:35.790 --> 04:41.450
Jadi, ketika Anda menemukannya loop harus berhenti atau jika Anda menekan akhirnya Anda harus kembali OK.

04:41.550 --> 04:42.090
Cobalah.
