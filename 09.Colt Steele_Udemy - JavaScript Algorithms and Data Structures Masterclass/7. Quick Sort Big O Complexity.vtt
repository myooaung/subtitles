WEBVTT

00:00.330 --> 00:01.090
Selamat datang kembali.

00:01.110 --> 00:02.930
Video terakhir kami di quicksort.

00:02.970 --> 00:04.700
Baguslah jika Anda bertanya kepada saya.

00:04.740 --> 00:09.210
Kita akan berbicara tentang kompleksitas waktu dan kompleksitas ruang quicksort.

00:09.210 --> 00:14.710
Jadi pertama-tama perhatikan bahwa yang terbaik dan rata-rata adalah 0 dari dan Lagann yang sama dengan penggabungan.

00:15.000 --> 00:18.990
Dan jika kita melihat mengapa mari kita lihat contoh terbaik misalnya.

00:18.990 --> 00:24.430
Jadi inilah susunan kami dan Anda harus membuat komposisi dan kemudian dekomposisi lain.

00:24.480 --> 00:29.940
Yang lain sama seperti yang kami lakukan dengan semacam penggabungan tempat pola di sini sebagai

00:29.940 --> 00:34.350
akhir tumbuh kita harus membuat log dan basis log ke dekomposisi.

00:34.410 --> 00:41.100
Jadi karena kita memiliki lebih banyak elemen misalnya kita memiliki 32 elemen kita harus membuat 5 dekomposisi mengirisnya

00:41.100 --> 00:42.630
menjadi setengah lima kali.

00:42.630 --> 00:47.010
Jika kita dan ini adalah kasus terbaik, ingat kita akan melihat kasus terburuk hanya dalam beberapa saat.

00:47.280 --> 00:50.310
Jika sudah, saya tidak tahu apa yang berikutnya.

00:50.310 --> 00:55.630
Kita harus membuat enam dekomposisi sehingga tumbuh pada laju laju terbang lagi.

00:55.680 --> 01:02.670
Tapi kemudian setiap level setiap dekomposisi yang kita buat kita harus membuat semua perbandingan per dekomposisi.

01:02.670 --> 01:07.110
Jadi itu terjadi ketika kita berputar mengingat atau menemukan poros yang kita bandingkan dengan setiap

01:07.110 --> 01:08.690
elemen lainnya satu kali.

01:08.730 --> 01:11.850
Jadi begitulah cara kita mendapatkan analog dan sangat mirip.

01:11.880 --> 01:13.590
Itulah alasan yang sama mengapa kami mendapatkannya.

01:13.620 --> 01:15.690
Dan lagi dengan semacam penggabungan.

01:16.080 --> 01:18.440
Sekarang mari kita bicara tentang kasus terburuk.

01:18.440 --> 01:24.540
Jadi dengan algoritma kami, fungsi pivot kami memerlukan item pertama sebagai pivot selalu.

01:24.660 --> 01:27.330
Nah, itu bermasalah jika data kami sudah diurutkan.

01:27.330 --> 01:31.750
Jadi, inilah kasus terburuk untuk quicksort kami saat ini.

01:32.160 --> 01:37.110
Jika kami memiliki array ini dan kami mencoba mengurutkannya dan tentu saja kode kami tidak tahu bahwa itu diurutkan.

01:37.110 --> 01:43.210
Jadi kami menerima ini dan hal pertama yang kami lakukan adalah menemukan item pertama dan menggunakannya sebagai pivot.

01:43.260 --> 01:47.790
Yah kami membandingkannya dengan setiap item dalam array itu tetapi tidak ada yang kurang dari itu.

01:47.820 --> 01:54.150
Jadi seluruh susunan berikutnya adalah bahwa komposisi hanya memberi kami satu item.

01:54.210 --> 01:56.940
Kami memiliki seluruh array Subah ini tersisa.

01:56.940 --> 02:03.450
Jadi setiap kali kita melalui setiap dekomposisi hanya satu item yang kita berputar.

02:03.510 --> 02:08.640
Jadi semuanya bergerak ke sisi kanan dengan algoritme kami saat ini dan kami harus

02:08.640 --> 02:13.920
terus berjalan dan pergi dan terus berulang karena kami hanya mengambil item pertama dan sudah diurutkan.

02:14.340 --> 02:20.300
Dan kemudian untuk masing-masing dari mereka sehingga merupakan dekomposisi kasus terburuk dengan pengaturan kita

02:20.390 --> 02:26.640
saat ini adalah dekomposisi dan pada setiap tingkat setiap dekomposisi kita harus membuat dan perbandingan

02:26.700 --> 02:31.650
yang menghasilkan 0 waktu kuadrat kuadrat akhir untuk kasus terburuk.

02:31.890 --> 02:37.020
Jadi pada dasarnya masalah muncul ketika pivot dipilih ketika pivot yang dipilih adalah elemen

02:37.020 --> 02:37.410
minimum.

02:37.410 --> 02:41.970
Setiap saat atau poros selalu merupakan elemen maksimum.

02:42.000 --> 02:47.790
Jadi untuk memperbaikinya dalam contoh ini setidaknya jika kita berhadapan dengan array yang diurutkan kita bisa mengatasinya dengan

02:47.790 --> 02:54.330
alih-alih berputar di item pertama tidak peduli apa yang berputar di sekitar item acak hanya mengambil apa pun di sini

02:54.330 --> 02:55.350
tidak masalah.

02:55.350 --> 02:59.520
Pilih saja item acak atau coba dan pilih elemen tengah setiap kali.

02:59.520 --> 03:03.650
Dan dengan cara itu bahkan jika kita memiliki array yang diurutkan kita dapat menghindari masalah.

03:03.900 --> 03:09.180
Tapi tentu saja masih ada kemungkinan bahwa jika kita memilih elemen tengah setiap kali ada kemungkinan kenaikan

03:09.450 --> 03:13.950
itu tidak disortir dan itu seharusnya dalam urutan acak atau kita pikir itu.

03:14.070 --> 03:18.930
Tapi bagaimanapun kita selalu memilih minimum setiap kali kita tidak pernah bisa menghindari kasus terburuk sepenuhnya

03:18.930 --> 03:23.700
karena cara algoritma bekerja jika Anda berputar di sekitar minimum atau maksimum berulang kali itu

03:24.150 --> 03:25.530
akan menjadi waktu kuadratik.

03:25.530 --> 03:30.900
Tetapi kita bisa melakukan yang terbaik untuk menghindari peluang untuk secara konstan memilih minimum atau maksimum.

03:31.020 --> 03:36.860
Itulah sebabnya Anda akan melakukan angka acak atau median alih-alih elemen pertama setiap kali.

03:37.290 --> 03:42.630
Tetapi dengan melakukan itu apa yang kami lakukan memilih elemen pertama setiap kali memungkinkan saya untuk menggambarkan

03:42.630 --> 03:44.110
masalah ini skenario terburuk.

03:44.430 --> 03:48.270
Jadi ambil napas dalam-dalam yang cepat seperti yang saya tahu.

03:48.480 --> 03:52.230
Sekali lagi saya tidak merasakan tekanan untuk dapat menulis itu sendiri.

03:52.230 --> 03:54.690
Ini lebih tentang memahami cara kerjanya.

03:54.720 --> 03:59.520
Mampu berjalan melalui jika Anda memiliki papan tulis bisa menuliskan nilai array setiap kali

03:59.520 --> 04:00.130
melalui.

04:00.180 --> 04:02.290
Bisakah Anda menggambarkan rekursi?

04:02.340 --> 04:04.790
Itulah hal yang saya harap Anda ambil dari ini.

04:05.030 --> 04:06.060
Terus bergerak.
