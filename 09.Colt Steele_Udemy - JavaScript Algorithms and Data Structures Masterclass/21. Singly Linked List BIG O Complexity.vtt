WEBVTT

00:00.090 --> 00:03.890
Selamat datang kembali ke video terakhir pada daftar tertaut atau pada daftar tertaut tunggal.

00:03.900 --> 00:04.530
Permisi.

00:04.530 --> 00:09.060
Selanjutnya kita berbicara tentang dua kali dikaitkan dengan daftar, tetapi kita sudah selesai dengan daftar yang terhubung satu sama lain dan

00:09.060 --> 00:10.840
aku benar-benar bosan mengatakan kata itu sekarang.

00:10.890 --> 00:16.680
Jadi mari kita selesaikan dengan berbicara tentang notasi Big-O dari operasi umum yang hal-hal seperti penghapusan

00:17.100 --> 00:22.060
penyisipan atau penghapusan mencari dan mengakses data dan juga membandingkannya dengan sebuah array.

00:22.290 --> 00:25.900
Lalu kita akan melakukan rekap cepat dan beralih ke menggandakan terlebih dahulu.

00:25.920 --> 00:30.870
Dan pada akhir bagian itu kita akan melakukan hal yang sama di mana kita akan membandingkan tidak hanya dua

00:30.870 --> 00:36.210
kali lipat dua array pertama tetapi juga dengan daftar yang terhubung sendiri dan kita akan melihat kekuatan dan kelemahan unik mereka.

00:36.210 --> 00:37.500
Baiklah.

00:37.500 --> 00:43.740
Jadi mari kita mulai dengan memasukkan dalam daftar yang terhubung sendiri, memasukkan hal-hal yang benar-benar mudah.

00:43.740 --> 00:50.880
Kami mendorongnya ke bagian paling akhir yang harus kami lakukan adalah mengambil arus dan ekor membuat simpul baru dan

00:50.880 --> 00:55.550
hanya mengatur tabel di sebelahnya menjadi simpul baru dan kemudian memperbarui ekor.

00:55.680 --> 00:58.610
Hal yang sama di awal jika Anda ingin menambahkan sesuatu di awal.

00:58.710 --> 01:03.430
Kami baru saja membuat simpul baru dan kami mengatakan itu di sebelah kepala saat ini dan kemudian memindahkan kepala.

01:03.600 --> 01:05.260
Jadi butuh waktu yang konstan.

01:05.280 --> 01:08.570
Tidak masalah jika daftar kami panjangnya satu juta item atau 10 item.

01:08.670 --> 01:12.810
Dibutuhkan jumlah kerja yang sama dengan jumlah waktu yang sama untuk menambahkan item baru.

01:12.810 --> 01:15.040
Nah, itu tidak terjadi dengan array.

01:15.060 --> 01:20.700
Ingat bahwa jika sebuah array panjangnya seribu atau sejuta item. Mari kita pergi dengan sejuta dan

01:20.700 --> 01:23.390
saya menambahkan sesuatu ke awal indeks 0.

01:23.400 --> 01:30.630
Saya harus menggeser setiap indeks tunggal dan menulis ulang semuanya hingga 1000 atau 1 juta dalam satu atau

01:31.110 --> 01:37.830
jika saya menambah akhir array maka ya butuh waktu yang konstan tetapi rata-rata jika kita akan

01:37.830 --> 01:39.740
mengambil rata-rata ini 0.

01:39.840 --> 01:42.010
Dan di mana panjang array.

01:42.210 --> 01:49.140
Jadi singling kita memenangkan pertempuran itu sejauh memasukkan data waktu konstan jauh lebih cepat versus array di mana

01:49.140 --> 01:55.200
rata-rata adalah 0 dari dan kemudian kita bisa menghapus mengambil sesuatu dari daftar panjang penuh.

01:55.200 --> 02:01.120
Dan ini tergantung pada di mana kita menghapus jika kita menghapus dari awal.

02:01.200 --> 02:02.040
Sangat mudah.

02:02.230 --> 02:08.880
Itu satu waktu konstan yang kita lakukan adalah kita sudah melihat kita mengambil kepala saat ini dan kita hanya

02:08.910 --> 02:15.030
mengatakan itu di sebelah kepala berikutnya dan kemudian kita mengambil kepala lama dan mengaturnya di sebelah nol.

02:15.090 --> 02:16.980
Kami memotong dasi itu.

02:17.190 --> 02:21.830
Tetapi jika kita menghapusnya dari awal, menjadi sulit dalam daftar yang terhubung sendiri.

02:21.990 --> 02:27.420
Jika kita muncul karena kita perlu menemukan item tepat sebelum item terakhir tepat sebelum ekor

02:27.420 --> 02:29.830
dan itu melibatkan pengulangan seluruh daftar.

02:29.850 --> 02:35.940
Jadi, dalam kasus terbaik kami untuk menghapus dari awal salah satu kasus terburuk untuk pindah dari akhir

02:36.120 --> 02:38.980
ada sejuta item yang harus kami tuju.

02:39.210 --> 02:43.440
Yah kita tidak akan pergi ke jutaan kita harus pergi ke satu sebelum

02:43.440 --> 02:45.350
jutaan untuk menghapus item terakhir.

02:45.360 --> 02:46.760
Pencarian selanjutnya.

02:47.010 --> 02:51.660
Jadi mencari melalui daftar panjang jika kita mencari nilai katakanlah kita mencari untuk melihat

02:51.660 --> 02:54.000
apakah daftar itu berisi sembilan puluh sembilan.

02:54.120 --> 02:55.480
Kasus terburuk itu.

02:55.520 --> 02:55.850
Oh

02:55.860 --> 03:00.300
Dan di mana dan itu adalah panjang daftar karena itu bisa menjadi hal yang paling terakhir atau

03:00.300 --> 03:04.390
yang kedua sampai yang terakhir dan kita harus mulai dari awal dan memeriksa setiap node.

03:04.400 --> 03:10.110
Jadi, ketika daftar bertambah, begitu juga jumlah operasi yang diperlukan untuk mencari sesuatu dan

03:10.110 --> 03:13.470
hal yang sama berlaku untuk mendapatkan simpul tertentu.

03:13.470 --> 03:19.260
Jika kita meminta node kesepuluh atau ratusan node juta saat jumlah itu bertambah seiring bertambahnya

03:19.260 --> 03:21.980
jumlah, begitu juga jumlah operasi di sana.

03:22.020 --> 03:28.110
Ketika kami membandingkannya dengan sebuah array, sebuah array memiliki akses acak yang berarti bahwa itu adalah waktu yang konstan untuk

03:28.200 --> 03:32.740
mengakses item begitu mereka diindeks sehingga pengindeksan membutuhkan waktu dan penyisipan bisa memakan waktu.

03:33.030 --> 03:34.380
Dan begitu juga kepindahan.

03:34.590 --> 03:39.390
Tetapi selain itu jika Anda hanya mengakses jika Anda meminta sepersepuluh atau kelima

03:39.390 --> 03:44.350
puluh atau nol dengan item dalam array dibutuhkan waktu yang sama karena cara susunan array.

03:44.370 --> 03:45.860
Jadi array memenangkan pertempuran itu.

03:46.050 --> 03:52.460
Jadi benar-benar untuk membungkusnya daftar yang terhubung sendiri unggul di penyisipan dan penghapusan dibandingkan dengan ras.

03:52.470 --> 03:56.940
Jadi jika itu adalah sesuatu yang benar-benar Anda khawatirkan dan Anda tidak memerlukan akses

03:56.940 --> 04:02.910
acak, Anda hanya perlu memiliki beberapa data yang diwakili dalam daftar dengan pesanan tetapi Anda tidak perlu hanya mengakses

04:02.910 --> 04:04.740
item ke-50 atau item ke-sejuta.

04:04.740 --> 04:09.900
Anda hanya perlu mengaksesnya secara berurutan sehingga daftar panjang mungkin sesuai dengan yang Anda inginkan jika Anda

04:09.900 --> 04:14.210
khawatir tentang waktu penyisipan dan penghapusan dan Anda tidak terlalu peduli dengan akses acak.

04:14.340 --> 04:14.740
BAIK.

04:14.970 --> 04:18.220
Baiklah jadi ayo kita rekap beberapa hal.

04:18.240 --> 04:20.830
Jadi saya pikir satu hal ini bagi kami sangat bagus.

04:20.830 --> 04:22.240
Sekarang inilah yang saya katakan.

04:22.350 --> 04:27.140
Ini adalah alternatif untuk array ketika penyisipan dan penghapusan di awal sering diperlukan.

04:27.150 --> 04:31.170
Ingatlah bahwa memasukkan pada akhir array bukanlah masalah besar.

04:31.260 --> 04:33.370
Kami tidak perlu mengindeks ulang apa pun.

04:33.840 --> 04:39.360
Array mengandung built in index sedangkan daftar panjang tidak berpikir itu hanya koneksi adalah node yang

04:39.360 --> 04:44.050
terhubung satu sama lain dengan titik di sebelahnya dengan referensi atau pointer.

04:44.070 --> 04:46.610
Tidak ada angka, tidak ada indeks atau posisi.

04:46.740 --> 04:49.990
Kami tidak dapat mengakses berbagai hal dengan mudah menggunakan indeks.

04:49.990 --> 04:53.240
Dan poin terakhir yang akan saya sampaikan jika Anda bertanya-tanya mengapa Anda menggunakan ini.

04:53.310 --> 04:58.170
Yah ingat ini adalah kursus tentang struktur data dan banyak yang berorientasi pada pengajaran

04:58.200 --> 04:59.210
hal-hal teoritis.

04:59.310 --> 05:03.370
Tetapi itu tidak berarti bahwa ahli bahasa tidak pernah memiliki kegunaan atau aplikasi.

05:03.390 --> 05:05.180
Kita akan membahas lebih lanjut.

05:05.190 --> 05:10.650
Kita akan belajar tentang beberapa struktur data yang lebih khusus yang dibangun di atas daftar tertaut seperti tumpukan

05:10.710 --> 05:15.570
dan Q yang akan datang dan jadi kita harus memahami bagaimana daftar tertaut bekerja untuk

05:15.570 --> 05:17.130
mengimplementasikan tumpukan dalam antrian.

05:17.190 --> 05:19.050
Selamat jika Anda berhasil sampai ke titik ini.

05:19.050 --> 05:20.860
Saya tahu ini banyak konten.

05:20.940 --> 05:25.770
Ini sedikit berbeda dari beberapa kursus saya yang lain yang berfokus pada membangun sesuatu

05:25.770 --> 05:30.040
yang keren atau menyenangkan atau seharusnya menyenangkan setidaknya ini bisa agak kering.

05:30.060 --> 05:34.230
Jadi saya sangat menyarankan mengambil waktu istirahat melakukan apa pun yang perlu Anda lakukan.

05:34.230 --> 05:39.870
Dapatkan es krim atau berteriak di bantal dan sampai jumpa di bagian selanjutnya.

05:39.960 --> 05:40.960
Daftar tertaut ganda.
