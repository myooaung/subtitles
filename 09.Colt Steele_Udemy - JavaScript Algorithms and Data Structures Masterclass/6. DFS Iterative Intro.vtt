WEBVTT

00:00.180 --> 00:00.960
Selamat datang kembali.

00:00.960 --> 00:01.250
Baiklah.

00:01.290 --> 00:06.540
Jadi, jika dia berhasil melalui versi rekursif atau jika Anda hanya menonton solusi yang dengan sendirinya merupakan

00:06.540 --> 00:10.300
sedikit perjuangan untuk berhasil Kita sekarang akan melakukan hal yang sama berulang.

00:10.500 --> 00:15.710
Dan saya merekomendasikan melakukan keduanya karena saya pikir ini membantu memperkuat bagi banyak orang.

00:15.720 --> 00:16.900
Satu grafik traversal.

00:16.910 --> 00:22.240
Tapi dua rekursi dan solusi berulang pada umumnya dan semacam bagaimana mereka berhubungan dan bagaimana mereka terhubung.

00:22.560 --> 00:28.590
Jadi apa yang kami lakukan alih-alih menggunakan tumpukan panggilan untuk membantu mengelola negara kami untuk melacak Anda tahu ke mana kami pergi

00:28.590 --> 00:30.190
dan dari mana kami berasal.

00:30.240 --> 00:32.880
Kami hanya akan menggunakan tumpukan itu sendiri.

00:32.880 --> 00:36.010
Jadi dalam javascript saya hanya akan menggunakan array untuk melakukannya.

00:36.030 --> 00:39.330
Anda bisa menulis kelas stack Anda sendiri lagi dan memanfaatkannya.

00:39.350 --> 00:43.660
Tetapi bagi kami secara konseptual dan hanya untuk membuatnya singkat kami hanya akan menggunakan array.

00:43.890 --> 00:50.100
Jadi DFS berulang Berikut adalah kode pseudo dasar dan kemudian mereka memiliki versi yang lebih mendalam sehingga

00:50.100 --> 00:56.850
kita akan membuat tumpukan yang disebut S yang akan menjadi array yang mulai kosong dan kami mendorong simpul mulai,

00:56.850 --> 00:59.840
titik akan mulai dari mungkin ke tumpukan.

01:00.120 --> 01:04.920
Itu hal pertama yang harus dilakukan maka kita memiliki loop sementara S tidak kosong sementara

01:04.920 --> 01:07.990
ada sesuatu di stack yang akan mengeluarkan sesuatu darinya.

01:08.130 --> 01:13.080
Panggil titik itu dan kemudian kita akan memeriksa apakah itu tidak ditemukan

01:13.080 --> 01:20.220
berarti jika kita belum mengunjungi belum ditambahkan ke label daftar kita sebagai ditemukan dan kemudian untuk masing-masing tetangga mendorong

01:20.220 --> 01:21.520
mereka ke tumpukan.

01:21.630 --> 01:25.660
Jadi pertama kali melalui sumur itu belum dikunjungi karena kami baru saja memulai.

01:25.770 --> 01:31.740
Jadi kita mengunjunginya dan kemudian kita memasarkan dan mengunjungi dan kemudian kita melihat tetangga yang jika kita menggunakan grafik

01:31.740 --> 01:33.940
yang sama adalah B dan D.

01:33.960 --> 01:38.580
Dan sekali lagi saya sarankan Anda mengatur grafik yang sama persis hanya untuk membuatnya lebih mudah diikuti.

01:38.580 --> 01:40.210
Baiklah, itulah dasar-dasarnya.

01:40.230 --> 01:42.240
Saya akan menunjukkan kepada Anda versi yang lebih mendalam hanya dalam beberapa saat.

01:42.240 --> 01:48.120
Gunakan tumpukan ini untuk mengatur urutan hal-hal yang pernah Anda kunjungi tetapi juga di mana Anda harus kembali

01:48.120 --> 01:52.920
dan mengunjungi tetangga lain karena cara kedalaman pekerjaan pertama akan berjalan jauh ke satu

01:52.920 --> 01:58.290
jalur dan maka kita perlu kembali dan mengunjungi saudara yang lain bukan saudara yang cukup tetapi

01:58.320 --> 01:59.600
cabang yang lain.

01:59.700 --> 01:59.930
Baiklah.

01:59.940 --> 02:02.120
Jadi, inilah kode semu yang lebih rinci.

02:02.250 --> 02:03.870
Tulis fungsi Anda di tambang batu bara.

02:03.870 --> 02:07.810
Kedalaman iteratif pertama dan harus menerima simpul awal.

02:07.920 --> 02:09.070
Sebut saja mulai.

02:09.450 --> 02:12.370
Kemudian buat susunan susunan dan kosong adalah yang akan saya gunakan.

02:12.480 --> 02:17.040
Tapi sekali lagi terserah Anda bagaimana Anda ingin menerapkan itu hanya untuk melacak simpul.

02:17.160 --> 02:19.460
Buat daftar atau larik untuk menyimpan hasil akhir.

02:19.530 --> 02:26.610
Saya akan memanggil hasil tambang harus dimulai sebagai array kosong kemudian buat objek kosong untuk menyimpan simpul yang dikunjungi.

02:26.610 --> 02:30.900
Atau Anda bisa melakukannya dengan array tetapi kita perlu cara untuk melacak apa yang telah kita

02:30.900 --> 02:36.570
kunjungi sehingga kita tidak mencoba dan mengunjungi mereka lagi dan terjebak dalam satu lingkaran dan kemudian kita perlu menambahkan titik awal

02:36.570 --> 02:38.460
ke tumpukan di pasar saat dikunjungi.

02:38.460 --> 02:43.170
Jadi kita perlu memiliki sesuatu di sana sehingga kita dapat menambahkan loop ini sementara stack memiliki sesuatu di

02:43.170 --> 02:43.530
dalamnya.

02:43.620 --> 02:48.690
Kalau tidak, jika kita mencoba hanya menunggu untuk menambahkannya di dalam loop itu tidak akan pernah berjalan karena tumpukan

02:48.690 --> 02:49.290
dimulai kosong.

02:49.470 --> 02:51.280
Jadi, Anda ingin memulai dari awal.

02:51.300 --> 02:52.670
Kami ingin meletakkannya di tumpukan.

02:52.950 --> 02:58.350
Ok jadi selama stack tidak kosong saya hanya akan memeriksa selama ia memiliki panjang.

02:58.350 --> 03:00.890
Pop vertex berikutnya dari itu jika itu.

03:00.930 --> 03:06.690
Jika belum dikunjungi, pasar telah mengunjungi ditambahkan ke daftar hasil dan mendorong semua tetangganya

03:06.720 --> 03:07.920
ke tumpukan.

03:07.950 --> 03:12.540
Jadi saya hanya akan menggunakan yang lain untuk masing-masing tetapi alih-alih secara berulang memanggil Anda tahu

03:12.600 --> 03:17.910
fungsi lain kita hanya akan mendorong mereka ke tumpukan dan menggunakan tumpukan itu daripada panggilan tumpukan untuk melacak di

03:17.910 --> 03:20.790
mana kita akan menggunakan hanya sebuah array untuk melakukannya.

03:21.390 --> 03:24.820
Dan yang paling akhir perlu mengembalikan array hasil.

03:24.900 --> 03:31.010
Jadi catat cepat Anda benar-benar berakhir dengan urutan yang berbeda dari apa yang kami lakukan dalam solusi rekursif itu

03:31.020 --> 03:32.700
masih akan menjadi yang pertama.

03:32.790 --> 03:36.890
Tapi ini urutan yang berbeda dan kita akan membicarakan mengapa itu hanya sedikit.

03:36.890 --> 03:37.800
Dalam video solusi.
