WEBVTT

00:00.210 --> 00:00.680
Baiklah.

00:00.680 --> 00:01.600
Jadi mari kita mulai.

00:01.650 --> 00:04.140
Mari kita benar-benar membangun kelas tabel hash kita.

00:04.170 --> 00:08.400
Saya ingat tidak akan menjadi Anda tahu revolusioner melakukan ini untuk memahami bagaimana semua ini

00:08.400 --> 00:08.940
bekerja.

00:09.120 --> 00:09.560
BAIK.

00:09.660 --> 00:11.150
Jadi, inilah kode pemula.

00:11.270 --> 00:13.460
Cukup salin ini atau ketik.

00:13.500 --> 00:16.500
Saya akan memasukkannya sebagai file yang juga ada di slide.

00:16.500 --> 00:19.340
Kami memiliki kelas tabel hash dasar kami.

00:19.590 --> 00:24.640
Kami memiliki konstruktor kami yang menerima ukuran seberapa besar tabel hash seharusnya.

00:24.780 --> 00:29.030
Dan ada nilai default 53 karena kami ingin menjadi bilangan prima.

00:29.070 --> 00:35.820
Jadi, jika kita tidak memasukkan ukuran itu hanya akan menjadi 53 maka yang kita lakukan adalah membuat array baru dengan ukuran itu

00:35.820 --> 00:37.580
dan menyimpannya sebagai peta kunci.

00:37.590 --> 00:39.330
Di sinilah ia akan menyimpan semua data.

00:39.330 --> 00:43.380
Peta kunci bodoh ini maka saya hanya menyalin fungsi hash.

00:43.650 --> 00:49.830
Saya mengubahnya sedikit karena sekarang kita tidak harus lulus dalam ukuran tabel hash karena itu di kelas

00:49.830 --> 00:56.880
sehingga kita dapat mengakses peta kunci dan Anda bisa lihat di sini kita modul modulasi modul modding oleh ini yang

00:56.880 --> 00:58.410
dipetakan kunci keluar panjang.

00:58.530 --> 00:59.840
Jadi, inilah fungsi hash.

01:00.000 --> 01:03.510
Kami akan menambahkan metode seperti set dan dapatkan.

01:03.510 --> 01:07.990
Yang kemudian akan memanggil hash garis bawah lewat kunci dan mendapatkan nilai.

01:08.190 --> 01:09.770
OK jadi disinilah kita akan mulai.

01:09.780 --> 01:14.620
Dua metode pertama ditetapkan dan dapatkan sehingga set menerima nilai dan kunci.

01:14.670 --> 01:20.520
Saya harus mengatakan bahwa sebaliknya kunci dan nilai seperti pink sesuai dengan nilai apa pun

01:20.520 --> 01:26.210
yang kode heksadesimalnya adalah 0 0 F F sesuatu sesuatu kunci dan nilai.

01:26.250 --> 01:29.880
Dan apa yang perlu kita lakukan adalah kunci hash itu hal pertama.

01:29.880 --> 01:33.110
Cari tahu di mana menyimpannya dan kemudian bagian kedua.

01:33.270 --> 01:35.280
Kami melakukan ini dengan rantai terpisah.

01:35.280 --> 01:39.870
Jadi ini sedikit lebih rumit daripada hanya menyimpan data di sana karena kita akan

01:39.870 --> 01:41.460
menyimpannya dalam struktur bersarang.

01:41.670 --> 01:49.120
Jadi hanya untuk mengingatkan Anda mundur di sini apa yang sebenarnya berarti adalah ketika kita hash sesuatu yang kita dapatkan empat.

01:49.410 --> 01:51.740
Kita akan pergi ke indeks empat dan periksa.

01:51.810 --> 01:53.300
Apa ada sesuatu di sini?

01:53.340 --> 01:56.040
Jika tidak kita akan menyimpannya di sana.

01:56.100 --> 01:58.090
Tapi kami menyimpannya dalam sebuah array.

01:58.110 --> 01:59.890
Jadi sudah ada ledakan bersarang.

02:00.000 --> 02:03.930
Sehingga lain kali melewatinya kita bisa mendorong ke daftar ini jika kita memiliki sesuatu yang lain.

02:03.960 --> 02:05.790
Sangat mudah untuk menambahkannya.

02:05.790 --> 02:09.680
Jadi pada dasarnya Anda tidak akan pernah hanya menyimpan data di sini sendirian.

02:09.720 --> 02:13.210
Jika itu adalah satu item, Anda masih akan meletakkannya di struktur bersarang.

02:13.260 --> 02:14.970
Jadi logika Anda akan sedikit berbeda.

02:14.990 --> 02:20.600
Anda perlu hash kunci dan mendapatkan nomor itu pergi ke posisi itu dan periksa apakah sudah ada data di sana.

02:20.610 --> 02:25.030
Jika itu ada atau jika ada hanya mendorong ini ke array yang sudah ada di sana.

02:25.080 --> 02:29.770
Jika tidak meletakkan array di sana dulu dan kemudian letakkan data di dalam array itu.

02:29.850 --> 02:34.500
Jadi itulah kode pseudo untuk menetapkan Anda kecuali nilai kunci yang Anda hash kunci.

02:34.500 --> 02:40.590
Kemudian Anda menyimpan pasangan nilai kunci dalam tabel hash melalui makna rantai yang terpisah dalam struktur bersarang.

02:40.980 --> 02:41.390
BAIK.

02:41.460 --> 02:43.150
Sekarang cara mendapatkan karya serupa.

02:43.170 --> 02:46.350
Ia menerima kunci seperti salmon misalnya.

02:46.440 --> 02:51.390
Kami akan hash salmon dan mendapatkan nomor itu kembali menggunakan fungsi garis bawah kami yang sudah

02:51.390 --> 02:52.530
ditentukan untuk Anda.

02:52.800 --> 02:57.420
Dan begitu kita mendapatkan nilai itu, kita pergi ke posisi indeks dalam array kita.

02:57.420 --> 03:01.220
Array peta kunci dan kami mengambil nilainya.

03:01.320 --> 03:06.540
Tapi tentu saja apa artinya sebenarnya dengan menggunakan rantai terpisah, lebih banyak waktu berliku di sini.

03:07.260 --> 03:10.110
Misalnya dengan salmon kita hash bahwa kita mendapatkan empat.

03:10.110 --> 03:11.410
Kami pergi ke empat.

03:11.460 --> 03:14.020
Mungkin ada lebih dari satu item di sana.

03:14.040 --> 03:19.940
Jadi kita perlu memeriksa berdasarkan salmon kunci kita akan mengulanginya dan mencoba dan menemukan salmon.

03:20.010 --> 03:22.410
Dan begitu kita melakukannya, kita mengembalikan semua ini.

03:22.830 --> 03:25.600
Jadi tidak ada jaminan pemesanan di dalam.

03:25.740 --> 03:29.850
Jadi kita tidak tahu apakah salmon akan menjadi yang pertama, yang kedua akan kita periksa.

03:29.850 --> 03:35.660
Setelah kita mengetahui di mana salmon berada, kita hanya akan mencari salmon di daftar bersarang itu.

03:35.760 --> 03:40.480
Dan akhirnya jika itu tidak ada di tabel hash kita sama sekali kembali tidak terdefinisi.

03:40.500 --> 03:44.040
Pastikan itu berfungsi jika seseorang mencoba mengambil nilai yang tidak ada di sana.

03:44.130 --> 03:46.910
Kami tidak ingin istirahat atau kode harus kembali tidak terdefinisi.

03:47.070 --> 03:47.330
BAIK.

03:47.340 --> 03:52.800
Jadi tambahkan set ini dan dapatkan kode ini atau gunakan fungsi hash Anda sendiri jika Anda

03:52.800 --> 03:58.020
mau tetapi pastikan bahwa Anda tahu apakah itu memenuhi kriteria penting adalah deterministik selalu output yang

03:58.020 --> 04:00.650
sama untuk input yang diberikan dan mencobanya.

04:00.780 --> 04:02.670
Mari kita implementasikan ini di video berikutnya.
