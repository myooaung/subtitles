WEBVTT

00:00.150 --> 00:04.920
Hal terakhir yang ingin saya lakukan sebelum kita benar-benar terjun ke pengkodean naik di video berikutnya adalah

00:05.310 --> 00:06.530
menjelaskan mengapa ini digunakan.

00:06.780 --> 00:12.660
Dan benar-benar cara kita memesan mereka di mana segala sesuatu di sebelah kanan lebih besar daripada orang tua dan segala yang

00:12.660 --> 00:18.180
di sebelah kiri lebih sedikit dari pada orang tua membuatnya menjadi sangat membuatnya sangat mudah dan membuatnya cepat untuk

00:18.270 --> 00:18.940
mencari sesuatu.

00:18.960 --> 00:22.560
Juga membuatnya mudah untuk memasukkan hal-hal untuk menemukan tempat untuk sebuah simpul.

00:22.800 --> 00:28.800
Sehingga bagian pencarian dari pohon pencarian biner menjadi sangat cepat dibandingkan dengan mencari simpul di pohon

00:28.890 --> 00:30.100
yang tidak disortir.

00:30.300 --> 00:31.560
Jadi, saya tunjukkan cara kerjanya.

00:31.560 --> 00:34.770
Bayangkan kita memiliki pohon ini dan kita sedang mencari nomor 72.

00:35.010 --> 00:36.350
Meskipun yang harus kita mulai adalah.

00:36.450 --> 00:40.740
Jadi kita tidak benar-benar melihat bahwa kode kita tidak tahu apa yang ada di depan.

00:40.740 --> 00:44.210
Itu hanya melihat root yang harus kita lakukan adalah memeriksa.

00:44.250 --> 00:44.500
Baiklah.

00:44.530 --> 00:47.250
1:53 lebih besar dari 41 Ya.

00:47.280 --> 00:49.940
Jadi kami hanya peduli pada setengah dari pohon ini.

00:49.980 --> 00:55.720
Pada dasarnya setiap perbandingan yang kita lakukan seharusnya memotong setengah dari jumlah nilai yang kita lihat.

00:55.980 --> 01:01.860
Jika Anda ingat bagaimana pencarian biner bekerja dalam daftar itu ide yang sama di mana kita memiliki data ini diurutkan di mana segala sesuatu

01:02.010 --> 01:05.630
di sebelah kanan adalah lebih besar, semua ke kiri lebih kecil atau kurang dari

01:05.840 --> 01:07.040
Dan kami membuat perbandingan.

01:07.230 --> 01:08.850
Idealnya kita memotong pohon menjadi dua.

01:08.850 --> 01:11.010
Sekarang tergantung pada bagaimana pohon itu didistribusikan.

01:11.040 --> 01:12.790
Kita bisa memiliki nilai jauh lebih banyak di sini.

01:12.870 --> 01:18.630
Dan nilai-nilai kecil sangat sedikit tetapi secara umum rata-rata kami memotong jumlah perbandingan dengan jumlah node

01:18.660 --> 01:19.680
menjadi setengah.

01:19.710 --> 01:20.350
Jadi kita periksa.

01:20.350 --> 01:21.830
Tujuh puluh dua lebih besar dari 41.

01:21.840 --> 01:23.850
Jadi kami hanya peduli dengan sisi ini.

01:23.940 --> 01:29.330
Jadi kita pergi ke 65 adalah kurang dari 72 atau lebih besar dari itu lebih besar dari 65.

01:29.430 --> 01:34.430
Jadi kita pergi ke sini sekarang kita mendapatkan 91 adalah 72 kurang dari atau lebih besar dari 91.

01:34.440 --> 01:36.940
Kurang dari itu dan kami menemukannya.

01:37.020 --> 01:44.370
Sekarang jika Anda membandingkannya dengan jika ini adalah pohon yang tidak disortir dan 72 memang di pohon itu bisa di mana saja

01:44.370 --> 01:49.090
di pohon ini dan kami mungkin harus melihat setiap node dan melintasi seluruh pohon.

01:49.110 --> 01:50.680
Dan kita akan berbicara tentang bagaimana Anda akan melakukannya.

01:50.820 --> 01:56.100
Tapi Anda tahu Anda bisa memilih pesanan apa pun yang Anda lakukan di sini dulu dan kemudian di sini dan kemudian di sini dan

01:56.100 --> 01:57.000
kemudian di sini.

01:57.090 --> 01:58.890
Apakah Anda pergi ke kanan untuk Anda.

01:58.890 --> 02:01.190
Ada sejuta cara jika tidak ada sejuta.

02:01.230 --> 02:05.850
Ada banyak cara melintasi pohon tetapi dengan pohon pencarian biner ketika kita mencari nilai,

02:05.880 --> 02:10.900
ada prosedur yang sangat spesifik yang kita ikuti, kita bandingkan dan kita pergi ke kanan atau kiri.

02:10.980 --> 02:12.960
Kami membandingkan lagi dan kami memotongnya menjadi dua.

02:12.960 --> 02:16.060
Teruskan sampai Anda menemukan nilainya atau Anda tidak menemukannya.

02:16.110 --> 02:20.750
Tapi tahukah Anda karena cara pencarian biner yang ia lakukan nilainya tidak ada di sana jika Anda tidak menemukannya.

02:20.960 --> 02:21.320
BAIK.

02:21.390 --> 02:24.200
Jadi untuk rekap di sini ada banyak jenis pohon.

02:24.330 --> 02:29.550
Ada pohon biner di mana setiap orang tua atau setiap simpul dapat memiliki paling banyak dua anak.

02:29.550 --> 02:35.460
Ada banyak jenis pohon biner salah satunya adalah pohon pencarian biner pohon pencarian biner bekerja atau data yang diurutkan atau data

02:35.460 --> 02:40.890
yang dapat disortir di mana ada pesanan Anda dapat membandingkan hal-hal dan itu adalah aturan yang sama dengan pohon

02:40.890 --> 02:44.050
biner setiap node orangtua memiliki paling banyak dua anak .

02:44.220 --> 02:49.440
Tetapi di atas itu, setiap simpul di sebelah kiri induk selalu lebih kecil dari induk setiap simpul di

02:49.440 --> 02:51.480
kanan selalu lebih besar dari induk.

02:51.630 --> 02:55.120
Dan itu membuatnya agar kita dapat mencari, kita dapat menemukan banyak hal lebih cepat.
