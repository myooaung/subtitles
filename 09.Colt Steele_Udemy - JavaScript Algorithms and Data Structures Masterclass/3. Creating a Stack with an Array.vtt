WEBVTT

00:00.180 --> 00:00.540
Baiklah.

00:00.540 --> 00:01.410
Selamat datang kembali.

00:01.410 --> 00:07.680
Jadi jika Anda menonton video terakhir kami berbicara tentang bagaimana tumpukan adalah Lythgoe yang hidup, tetapi Anda mengucapkannya

00:07.680 --> 00:13.710
terakhir dalam struktur data pertama dan ada lebih dari satu cara untuk membuat sesuatu seperti itu.

00:13.770 --> 00:16.530
Sebenarnya tumpukan hanyalah sebuah konsep.

00:16.530 --> 00:21.570
Ini pada dasarnya seperangkat aturan yang mengatakan OK Anda harus dapat menyimpan data sedemikian rupa sehingga

00:21.570 --> 00:24.700
hal pertama yang ditambahkan adalah hal terakhir yang dihapus.

00:24.750 --> 00:27.440
Hal terakhir yang ditambahkan adalah hal pertama yang dihapus.

00:27.690 --> 00:30.600
Dan itu tidak benar-benar menentukan bagaimana Anda melakukannya.

00:30.780 --> 00:32.300
Itu hanya sebuah konsep.

00:32.350 --> 00:34.060
Jadi ada lebih dari satu cara untuk melakukannya.

00:34.350 --> 00:36.910
Dan cara termudah adalah menggunakan array.

00:37.110 --> 00:42.390
Jadi beberapa struktur data atau maaf beberapa bahasa pemrograman datang dengan tipe data stack mereka sendiri.

00:42.480 --> 00:47.440
Tetapi kita masih bisa menggunakan larik bawaan atau tipe data daftar untuk membuat tumpukan kita sendiri.

00:47.640 --> 00:53.100
Jadi yang harus kita lakukan adalah menyimpan data di sini dengan cara bahwa hal pertama adalah hal terakhir yang

00:53.130 --> 00:55.490
dihapus dan hal terakhir dan hal pertama dihapus.

00:55.800 --> 01:02.400
Jadi jika saya melompat ke konsol saya jika saya membuat array baru saya hanya akan menyebutnya stack dan mulai

01:02.400 --> 01:03.030
kosong.

01:03.270 --> 01:08.190
Katakanlah saya menyimpan halaman web yang saya kunjungi dan saya membuat sejarah di mana saya berada.

01:08.430 --> 01:08.920
BAIK.

01:08.970 --> 01:12.870
Jadi untuk menambahkan sesuatu ke tumpukan ini Bagaimana kita menambahkan ke array.

01:12.870 --> 01:16.950
Yah ada beberapa opsi tapi mari kita gunakan push jadi saya akan mendorong.

01:16.950 --> 01:19.120
Saya mulai di Google dot com.

01:19.470 --> 01:20.020
BAIK.

01:20.250 --> 01:27.800
Jadi kita dorong Google dan katakanlah dari Google saya pergi ke Saya tidak tahu Instagram.

01:28.440 --> 01:33.770
Dan satu lagi situs yang saya kunjungi adalah YouTube.

01:34.170 --> 01:36.580
Tumpukan saya sekarang memiliki tiga hal di dalamnya.

01:36.600 --> 01:43.680
Jadi agar ini menjadi tumpukan saya harus memiliki cara untuk menghapus dari itu di mana hal yang paling baru ditambahkan adalah

01:43.680 --> 01:45.600
apa yang saya dapatkan pertama.

01:45.600 --> 01:51.210
Jadi ketika saya menghapus dari sini saya ingin memulai dengan meminta Anda dan kemudian waktu berikutnya saya harus mendapatkan

01:51.510 --> 01:52.770
Instagram dan kemudian Google.

01:52.770 --> 01:54.000
Jadi bagaimana saya melakukannya.

01:54.120 --> 02:00.870
Nah ada metode untuk melakukannya menumpuk dot pop Nah array pop jadi pop akan menghapus dari akhir.

02:01.080 --> 02:08.580
Jadi menggunakan push dan pop secara bersamaan pada array buat untuk menumpuk selama itu cara kita menambahkan dan menghapus.

02:08.670 --> 02:12.420
Jika seseorang pergi dan menambahkan sesuatu ke tengah array atau itu awal atau

02:12.420 --> 02:15.820
menghapus dari awal maka itu tidak berfungsi sebagai tumpukan lagi.

02:15.990 --> 02:21.120
Tetapi jika kita hanya mendorong dan pop seperti kita mencoba menggunakan stack dalam kode kita yang sebenarnya

02:21.120 --> 02:25.900
sesuatu yang akan kita lakukan nanti adalah menggunakan array sebagai stack hanya karena lebih sederhana.

02:26.280 --> 02:32.640
Dan jika saya pop saya mendapatkan YouTube dan kemudian Instagram jika saya mendorong sesuatu yang lain di sana seperti katakanlah

02:32.640 --> 02:34.210
Anda pergi ke Amazon.

02:34.440 --> 02:38.420
Sekarang ketika saya menghapus menggunakan POP saya akan mendapatkan Amazon terlebih dahulu.

02:38.460 --> 02:40.080
Itu adalah hal terakhir yang ditambahkan.

02:40.230 --> 02:41.910
Jadi ini hal pertama yang saya dapatkan.

02:42.240 --> 02:44.400
Dan sekali lagi saya mendapatkan Google.

02:44.400 --> 02:49.980
Jadi itu salah satu cara menggunakan array untuk membuat struktur stack tetapi kita bisa melakukannya dengan cara lain menggunakan

02:49.980 --> 02:51.210
metode array builtin.

02:51.360 --> 02:52.740
Bisakah Anda memikirkan cara kerjanya?

02:52.740 --> 02:57.760
Kami sedang bekerja dengan ujung array sekarang kami menambahkan ke akhir dan menghapus dari akhir.

02:58.140 --> 02:59.290
Ada cara lain.

02:59.550 --> 03:06.090
Yah setidaknya ada satu cara jika saya membuat beberapa ruang di sini jika saya pikir saya masih memiliki kunci topi kosong saya

03:06.090 --> 03:07.280
punya array kosong ini.

03:07.530 --> 03:10.680
Nah jika saya menambah awal array saya bisa melakukannya.

03:10.680 --> 03:11.990
Jadi bagaimana kita sampai ke awal.

03:12.070 --> 03:18.120
Baik Anda dapat menggunakan shift yang membingungkan berjudul metode dan katakanlah saat ini kita sedang memodelkan.

03:18.120 --> 03:25.880
Saya tidak tahu sejarah Photoshop saya jadi saya mulai dengan membuat file baru dan kemudian hal berikutnya yang saya lakukan.

03:26.130 --> 03:27.710
Apa yang saya lakukan sesudahnya.

03:27.960 --> 03:36.870
Saya mengubah ukuran file dan kemudian saya hapus. Mari kita lihat kerutan atau sesuatu seperti itu di Photoshop.

03:37.080 --> 03:37.460
BAIK.

03:37.470 --> 03:39.650
Jadi tumpukan kami memiliki tiga hal di sana.

03:39.810 --> 03:43.590
Agar ini berfungsi, hal terakhir yang perlu keluar adalah yang pertama.

03:43.590 --> 03:49.310
Jadi saya tidak bisa pop lagi karena orang-orang dipindahkan dari sini yang berarti semua mengambil dari akhir yang ini adalah

03:49.350 --> 03:53.730
hal pertama yang ditambahkan di kami tidak ingin hal pertama menjadi hal pertama yang keluar.

03:53.790 --> 03:54.990
Kami menginginkan yang sebaliknya.

03:55.140 --> 03:57.500
Kami ingin yang terakhir menjadi yang pertama.

03:57.540 --> 04:06.690
Jadi saya menggunakan shift untuk menambah dan memindahkan untuk menghapus yang dipindahkan dari awal dikloning Rinkel mengubah ukuran file

04:06.690 --> 04:08.700
membuat file baru.

04:08.700 --> 04:11.280
Jadi kedua pendekatan ini adalah tumpukan yang valid.

04:11.340 --> 04:12.160
Mereka bekerja.

04:12.270 --> 04:17.820
Yang terpenting adalah kita memiliki cara untuk menambahkan data dan menghapus data sedemikian rupa sehingga memenuhi

04:17.850 --> 04:19.810
prinsip terakhir masuk pertama ini.

04:19.830 --> 04:22.010
Hal pertama dalam hal terakhir keluar.

04:22.110 --> 04:23.860
Hal terakhir adalah hal pertama yang keluar.

04:24.120 --> 04:29.800
Tapi ada perbedaan antara keduanya mendorong dan bermunculan adalah hal pertama yang kami lakukan.

04:29.850 --> 04:32.190
Berarti kami menambahkan ke ujung dan menghapus dari ujung.

04:32.370 --> 04:37.190
Dan kemudian kita juga berbicara tentang shift and shift menambah dan menghapus dari awal.

04:37.530 --> 04:43.950
Jadi berdasarkan apa yang telah kita bicarakan dengan array sebelumnya yang mana yang lebih baik apa yang lebih efisien apa masalahnya

04:43.950 --> 04:45.710
dengan salah satu dari ini.

04:46.020 --> 04:52.050
Nah jika kita berpikir tentang cara kerja array ingat bahwa menambahkan ke awal menghapus

04:52.350 --> 04:56.490
dari awal tidak baik sejauh kompleksitas waktu notasi O-Besar.

04:56.550 --> 05:01.990
Apa yang harus kita lakukan adalah jika kita memiliki array dengan tiga hal di sini setiap item memiliki indeks.

05:02.460 --> 05:08.910
Dan jika saya menambahkan sesuatu ke awal, kita harus mengindeks ulang semua item lainnya karena ini tidak lagi akan

05:08.910 --> 05:10.320
menjadi indeks 0.

05:10.350 --> 05:11.830
Ini tidak akan diindeks lagi.

05:12.120 --> 05:14.190
Semuanya digeser ke bawah.

05:14.440 --> 05:21.810
OK jadi jika kita memiliki tumpukan ini dengan tiga item di sini jika saya unship lagi dan kali ini saya

05:21.810 --> 05:28.020
menambahkan sesuatu seperti saya tidak tahu dan hanya melakukan singkatan bodoh semua indeks ini harus digeser ke

05:28.020 --> 05:30.350
bawah dan itu sangat tidak efisien.

05:30.570 --> 05:36.600
Maksud saya untuk item itu tidak benar-benar masalah sama sekali tetapi hanya layak mempertimbangkan jika kita memiliki banyak data

05:36.600 --> 05:39.060
itu bukan cara yang bagus untuk melakukannya.

05:39.060 --> 05:44.370
Alih-alih jika kita menggunakan push, kita menambahkan sampai akhir kita hanya perlu membuat tempat baru dan indeks baru

05:44.400 --> 05:49.720
dan membaca indeks add you know of 4 tetapi kita tidak perlu mengindeks ulang setiap item lain di sana.

05:49.740 --> 05:55.050
Perlu disebutkan bahwa jika Anda benar-benar peduli dengan efisiensi maka Anda mungkin tidak ingin

05:55.050 --> 05:56.630
menggunakan array untuk stack.

05:56.640 --> 06:02.310
Jika Anda akan memiliki banyak data di sana, yang Anda butuhkan adalah kemampuan terakhir ini.

06:02.460 --> 06:05.670
Kami akan menggunakan implementasi kedua kami di mana kami menggunakan daftar tertaut.

06:05.670 --> 06:10.550
Tidak ada alasan untuk memiliki indeks ini, kami tidak mengakses informasi berdasarkan indeks.

06:10.620 --> 06:14.430
Kami hanya mengakses informasi berdasarkan kapan informasi itu dimasukkan.

06:14.580 --> 06:18.150
Urutan harus dilestarikan dan daftar tertaut akan melakukannya untuk kita.

06:18.240 --> 06:20.910
Jadi untuk rekap kita bisa menggunakan array untuk membuat stack.

06:21.030 --> 06:25.900
Kita bisa menggunakan push dan pop secara bersamaan sehingga hal pertama yang ditambahkan adalah hal terakhir yang keluar.

06:25.970 --> 06:27.630
Hal terakhir yang ditambahkan adalah hal pertama yang keluar.

06:27.630 --> 06:29.320
Saya tahu saya punya rekor rusak.

06:29.440 --> 06:34.950
Atau kita bisa menggunakan shift dan shift dan shift untuk menambah shift awal untuk menghapus dari

06:34.950 --> 06:35.660
awal array.

06:35.790 --> 06:38.470
Jadi tidak masalah ke arah mana kita melakukannya.

06:38.520 --> 06:45.020
Jika kita menambahkan di sini atau menambahkan di sini selama kita menghapus dari arah yang sama jika itu

06:45.030 --> 06:46.160
masuk akal.

06:46.290 --> 06:51.930
Tetapi secara umum jika Anda akan menggunakan push array dan pop adalah opsi yang lebih baik karena tidak

06:52.020 --> 06:58.350
perlu mengindeks ulang seluruh array setiap kali Anda menambah atau menghapus sesuatu Anda hanya perlu membuat beberapa Anda tahu indeks

06:58.440 --> 06:59.760
baru di akhir.

06:59.820 --> 07:01.040
Atau hapus indeks itu.

07:01.110 --> 07:01.490
BAIK.

07:01.530 --> 07:05.280
Jadi selanjutnya saya akan menunjukkan implementasi tumpukan menggunakan daftar tertaut.
