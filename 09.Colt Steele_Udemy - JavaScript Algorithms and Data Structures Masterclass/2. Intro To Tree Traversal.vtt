WEBVTT

00:00.240 --> 00:01.310
Hai, selamat datang kembali.

00:01.320 --> 00:03.030
Kami memiliki bagian baru di sini.

00:03.150 --> 00:06.150
Kami masih bekerja dengan pohon tetapi kami melakukan sesuatu yang sedikit berbeda.

00:06.480 --> 00:08.700
Jadi pohon traversal adalah apa yang akan kita fokuskan.

00:08.910 --> 00:16.410
Dan ini pada dasarnya adalah ide untuk memberikan pohon apa pun apakah itu pohon pencarian biner atau hanya pohon biner biasa

00:16.410 --> 00:21.450
yang tidak disortir atau pohon ternary atau pohon lain yang memiliki sejumlah node.

00:21.480 --> 00:23.700
Tidak ada pesanan khusus sembarang pohon.

00:23.700 --> 00:27.880
Baiklah pohon generik bagaimana kita mengunjungi setiap node satu kali.

00:27.930 --> 00:30.530
Jadi ini adalah masalah ilmu komputer klasik.

00:30.570 --> 00:32.340
Ada banyak cara untuk melakukannya.

00:32.340 --> 00:37.220
Bandingkan dengan daftar tertaut untuk melintasi pohon ini untuk mengunjungi setiap simpul satu kali.

00:37.320 --> 00:38.430
Sangat mudah bukan.

00:38.430 --> 00:41.220
Ada satu jalur linier dari sini ke sana.

00:41.250 --> 00:47.260
Tidak ada urutan yang harus Anda putuskan. Tidak ada keputusan, lanjut dari sini ke sini.

00:47.490 --> 00:48.930
Jadi ini tidak disortir.

00:48.930 --> 00:50.880
Bayangkan Anda tahu kami sedang mencari nilai.

00:51.060 --> 00:54.090
Kami ingin tahu apakah 43 ada dalam daftar ini.

00:54.090 --> 00:56.670
Kita mulai di sini dan di sini di sini.

00:56.670 --> 00:56.890
BAIK.

00:56.910 --> 00:57.730
Kami menemukannya.

00:57.730 --> 01:00.630
Atau jika Anda mencari sembilan puluh sembilan kami akan melintasi setiap node.

01:00.690 --> 01:01.410
Kami mencapai akhirnya.

01:01.500 --> 01:03.090
Sembilan puluh sembilan tidak ada di sini.

01:03.090 --> 01:06.010
Sekarang ketika kita berbicara tentang pohon itu sangat berbeda.

01:06.210 --> 01:08.300
Jadi ini bukan pohon pencarian biner.

01:08.340 --> 01:10.140
Ini adalah pohon biner.

01:10.140 --> 01:15.570
Setiap node memiliki paling banyak dua anak tetapi tidak diurutkan dengan cara apa pun nilai-nilai ini di sebelah kanan tidak

01:15.570 --> 01:20.370
kurang dari itu atau mereka tidak selalu kurang atau lebih besar dari permisi 10 dan nilai-nilai di

01:20.370 --> 01:26.470
sebelah kiri belum tentu kurang dari jadi tidak ada Agar kami tidak dapat menggunakan pintasan kecil kami jika kami ingin menemukan simpul jika

01:26.640 --> 01:29.220
saya ingin tahu apakah 29 ada di pohon ini.

01:29.430 --> 01:34.030
Kami harus mengunjungi setiap simpul untuk mengetahui bahwa tidak ada.

01:34.350 --> 01:35.400
Jadi kita mulai dari sini.

01:35.400 --> 01:42.810
Mungkin ini tempat yang bagus untuk kita pergi ke kiri dan kemudian bekerja secara horizontal dan pergi lagi

01:42.810 --> 01:44.100
dan terus turun.

01:44.220 --> 01:49.470
Apakah kita pergi sampai ke ujung dan kemudian naik dan turun dan naik kembali turun

01:49.470 --> 01:53.430
ke kanan dan kemudian Anda tahu terus turun cabang lebih lanjut.

01:53.550 --> 01:55.200
Sangat sulit diketahui.

01:55.200 --> 01:56.600
Ada banyak cara untuk melakukannya.

01:56.640 --> 01:59.670
Ini tidak seperti daftar tertaut di mana ada satu pendekatan linier.

01:59.670 --> 02:01.470
Jadi itu sebabnya kami memiliki bagian tentang ini.

02:01.620 --> 02:04.600
Kami tidak akan melakukannya untuk daftar panjang karena hanya ada satu cara.

02:04.710 --> 02:09.930
Tetapi dengan pohon ada banyak cara dan kita akan fokus pada empat pendekatan yang sangat umum dikenal.

02:09.960 --> 02:10.750
Mereka punya nama.

02:10.770 --> 02:11.940
Perintah ini.

02:11.940 --> 02:16.530
Satu hal yang akan saya katakan bagian ini akan mengambil keuntungan dari rekursi lebih dari bagian lain

02:16.530 --> 02:17.300
sejauh ini.

02:17.310 --> 02:22.170
Jadi, jika Anda melewati bagian rekursi, saya sangat menyarankan Anda kembali dan menontonnya

02:22.170 --> 02:24.640
karena ini akan menjadi milik saya.

02:24.820 --> 02:27.060
Pikiran bertiup mungkin menempatkannya dengan baik.

02:27.060 --> 02:30.150
Itu juga mungkin benar-benar membingungkan dan tidak menyenangkan.

02:30.150 --> 02:34.980
Jadi saya benar-benar akan memastikan Anda memahami rekursi Anda tidak harus menjadi seorang ahli

02:34.980 --> 02:40.230
tetapi hanya tahu dasar-dasarnya sehingga ketika saya membicarakannya masuk akal semoga jika saya melakukan pekerjaan

02:40.710 --> 02:47.130
dengan baik di bagian rekursi ada dua pendekatan utama melintasi pohon sesuatu yang disebut luas pertama dan yang lain

02:47.190 --> 02:48.610
disebut kedalaman pertama.

02:48.660 --> 02:51.990
Jadi ini merujuk pada petunjuk umum.

02:52.020 --> 02:58.170
Jadi ketika kita berbicara tentang pencarian pertama luasnya apakah ini pohon kita bayangkan hanya mulai dari

02:58.740 --> 03:02.580
awal dan kemudian pada dasarnya bekerja melintasi pohon pertama.

03:02.580 --> 03:10.280
Jadi 10 6 15 lalu lanjutkan melintasi nafas mengacu pada luasnya pohon.

03:10.290 --> 03:11.650
Jadi kalimat terburuk yang pernah ada.

03:11.670 --> 03:17.940
Lalu ada juga pencarian pertama kedalaman dan sebenarnya ada tiga perintah utama untuk pencarian pertama mendalam DFS

03:17.970 --> 03:19.600
yang akan kita bicarakan.

03:19.620 --> 03:24.510
Jadi ide kedalaman pertama adalah bahwa Anda hanya turun seperti arah utama

03:24.600 --> 03:29.640
Anda ke ujung pohon secara vertikal dan kemudian naik kembali melawan napas versus melintasi.

03:29.640 --> 03:36.500
Jadi satu versi adalah sesuatu yang disebut berurutan dan itu berarti pada dasarnya mulai di sini dan kemudian.

03:36.820 --> 03:39.830
Yah kita bisa menghabiskan lebih banyak waktu, saya tidak ingin hanya menjelaskan bagaimana setiap orang bekerja.

03:39.840 --> 03:41.740
Hanya ingin menunjukkan kepada Anda ada berbagai cara.

03:41.760 --> 03:42.890
Jadi ini sudah beres.

03:43.110 --> 03:50.430
Ada juga pencarian mendalam pertama yang disebut preorder di mana kami bekerja dari 10 6 hingga tiga menjadi delapan.

03:50.490 --> 03:53.780
Dan kemudian kita turun ke sisi lain dan turun 15 ke 20.

03:53.790 --> 03:56.700
Lalu ada juga pesanan pos yang terlihat seperti ini.

03:56.700 --> 04:02.580
Jadi kita turun ke bawah dan kita kembali seperti itu.

04:02.580 --> 04:07.980
Jadi ini semua adalah pendekatan yang berbeda cara pencarian atau paling tidak bahkan

04:08.130 --> 04:10.320
tidak hanya mengunjungi setiap node.

04:10.320 --> 04:13.360
Jika saya hanya meminta Anda untuk mencetak seluruh pohon.

04:13.690 --> 04:16.320
Tidak ada satu cara mudah atau satu solusi yang diberikan benar.

04:16.320 --> 04:20.430
Ini adalah nilai-nilai yang kami lihat di sini adalah urutan yang kami kunjungi.

04:20.460 --> 04:22.650
Jadi ini adalah urutan mereka akan dicetak.

04:22.800 --> 04:26.600
Dan itu sangat tergantung pada apa yang Anda coba lakukan dan saya akan memiliki video di mana saya mengatasinya.

04:26.640 --> 04:30.330
Ada situasi tertentu di mana Anda mungkin ingin menggunakan yang satu versus yang lain.

04:30.540 --> 04:35.760
Tetapi untuk sekarang mari kita tinggalkan saja pada kenyataan bahwa ada banyak cara untuk mengunjungi setiap simpul tunggal

04:35.760 --> 04:36.380
di pohon.

04:36.390 --> 04:39.350
Sebenarnya ada begitu banyak cara sehingga kita memiliki seluruh bagian di dalamnya.

04:39.540 --> 04:42.340
Dan ini benar-benar independen dari pohon pencarian biner.

04:42.360 --> 04:43.790
Benar-benar hanya pohon pada umumnya.

04:43.890 --> 04:48.840
Tetapi kami akan bekerja dengan kelas terbaik kami hanya agar kami tidak harus menduplikasi kode dan membuat kelas

04:48.840 --> 04:49.650
pohon baru.
