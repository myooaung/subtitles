WEBVTT

00:00.280 --> 00:02.440
OK jadi sekarang kita punya prioritas dasar.

00:02.440 --> 00:04.130
T: Kita sudah bicara tentang cara kerjanya.

00:04.140 --> 00:05.090
Ini Sudoku.

00:05.200 --> 00:05.470
Baiklah.

00:05.490 --> 00:10.870
Jadi, tentukan fungsi Anda pada grafik dan definisikan sebagai metode pada kelas grafik tertimbang.

00:10.990 --> 00:14.890
Sebut saja jalur terpendek atau Dykstra atau apa pun yang cocok untuk Anda.

00:15.090 --> 00:20.730
Ia harus menerima titik awal dan titik akhir mulai dari 8 ke dari A ke Z.

00:20.730 --> 00:25.690
Apakah kita akan beralih dari SFO ke L. SEBUAH. X. apa pun nama verteksnya.

00:25.710 --> 00:31.770
Ia menerima untuk memulai dan mengakhiri mana yang lebih dulu akan dimulai dalam kasus kami, maka kami perlu

00:31.770 --> 00:36.610
membuat beberapa struktur data dan kami akan membuat objek kami, kami dapat menyebutnya jarak.

00:36.690 --> 00:43.020
Ini akan bertindak sebagai tabel ini di sini di mana untuk setiap titik kita akan menyimpan jarak terpendek saat ini

00:43.020 --> 00:44.970
dari titik awal apa pun.

00:44.990 --> 00:49.090
Itu tidak harus tentu saja tetapi katakanlah kita sedang bekerja dengan e to e lagi.

00:49.230 --> 00:55.920
Kita akan menyimpan dalam objek ini jarak terdekat dari A ke B dari A ke C ke D dan pada

00:55.920 --> 00:58.620
awalnya kita menginisialisasi segalanya hingga tak terbatas.

00:58.620 --> 01:04.290
Jika Anda ingat itu karena kita tidak tahu seberapa jauh dari A ke C atau ADA D Satu-satunya

01:04.290 --> 01:08.160
nilai yang kita tahu pasti adalah hari dimana kita mulai dari nol.

01:08.610 --> 01:14.840
Kemudian setelah menginisialisasi nilai dan objek jarak kita juga akan membuat antrian prioritas kita.

01:14.940 --> 01:21.930
Jadi kami membuat antrian prioritas baru dan mulai kosong dan kami menambahkan masing-masing dari simpul kami ke dalam

01:21.930 --> 01:26.320
antrian prioritas tempat kami menetapkan prioritas sebagai jarak dari A.

01:26.610 --> 01:33.090
Jadi pada dasarnya kami menambahkan semua simpul dengan prioritas tak terhingga kecuali untuk dengan prioritas

01:33.090 --> 01:33.750
nol.

01:33.750 --> 01:39.600
Jadi tentu saja kita mendapatkan yang pertama tetapi kemudian kita akan memiliki nilai aktual di sana yang tidak terbatas.

01:39.660 --> 01:43.550
Dan setiap kali kita keluar kita mendapatkan nilai terkecil kembali dan di situlah kita mulai.

01:43.560 --> 01:44.830
Itu yang kami kunjungi dulu.

01:45.030 --> 01:45.300
BAIK.

01:45.300 --> 01:47.420
Jadi ini hanya menginisialisasi hal.

01:47.640 --> 01:48.980
Dan sebenarnya ada satu langkah lagi.

01:49.020 --> 01:54.660
Kami juga harus membuat objek kami sebelumnya di mana itu hanya objek sederhana di mana kami memiliki

01:54.660 --> 01:58.150
kunci untuk setiap titik dan kami menginisialisasi ke nilai no.

01:58.170 --> 02:00.340
Jadi itulah struktur data ini di sini.

02:00.570 --> 02:02.310
Tapi semuanya harus dimulai dari No.

02:02.430 --> 02:06.000
Dan kami akan memperbarui nilai untuk setiap kunci saat kami melangkah.

02:06.180 --> 02:06.700
Baiklah.

02:06.750 --> 02:09.920
Jadi terutama pengaturan yang membutuhkan waktu untuk dijelaskan.

02:10.050 --> 02:14.130
Kemudian kita hanya mengulang selama ada sesuatu dalam antrian prioritas.

02:14.160 --> 02:18.630
Jadi selama ada sesuatu untuk dikunjungi, kita akan mengalami dequeue vertex dalam antrian prioritas.

02:18.630 --> 02:24.060
Jadi itu berarti memilih jarak terkecil dari apa yang akan kita mulai dengan katakanlah D karena memiliki nilai

02:24.060 --> 02:28.400
2 dan yang lainnya memiliki nilai empat atau enam atau 10 atau sesuatu.

02:28.410 --> 02:32.050
Jadi kita mulai dengan itu dan kemudian hal pertama yang kita lakukan adalah kita periksa.

02:32.070 --> 02:38.120
Apakah ini titik yang sedang saya coba untuk mendapatkan saya mencapai akhirnya dan jika itu masalahnya maka kita sudah selesai.

02:38.130 --> 02:43.530
Kalau tidak, kita lewati masing-masing tetangganya sehingga kita akan melihat semua tetangganya untuk

02:43.530 --> 02:50.670
D dan kita menghitung jarak ke titik tersebut dari titik awal dan kemudian jika jarak baru jumlah itu kurang

02:50.670 --> 02:56.610
dari apa yang kita simpan saat ini kita perbarui objek jarak dengan jarak lebih rendah baru.

02:56.610 --> 03:00.540
Jadi ini semua yang kami lakukan di video terakhir atau dua video yang kami ikuti.

03:00.570 --> 03:06.120
Kami memperbarui jarak yang kami perbarui objek sebelumnya untuk sekarang mencerminkan dari mana kami berasal.

03:06.540 --> 03:12.360
Dan kemudian kita beri tanda titik yang sama dengan jarak total baru dari catatan awal dan hanya itu.

03:12.390 --> 03:13.940
Kami terus berulang-ulang.

03:13.950 --> 03:19.480
Jadi misalnya di sini kita akan memilih nilai terkecil menggunakan antrian prioritas.

03:19.530 --> 03:23.460
Saat ini akan ada D E dan F di sana karena kami sudah melakukan C dan B.

03:23.670 --> 03:29.090
Jadi kita dequeue yang akan memberi kita D karena itu yang terkecil dengan nilai empat.

03:29.100 --> 03:30.780
Jadi kita akan melihat tetangga ini.

03:30.780 --> 03:37.200
Ada dua CNF dan kami mulai melihat pada pertemuan puncak itu memberi kami 7 yang sebenarnya tidak kurang dari yang kami

03:37.200 --> 03:38.170
miliki saat ini.

03:38.250 --> 03:39.440
Jadi kami tidak melakukan apa-apa.

03:39.600 --> 03:42.510
Tapi kemudian kita pindah ke tetangga D.

03:42.650 --> 03:44.030
Jadi itu memberi kita lima.

03:44.270 --> 03:46.820
Dan jika Anda melihat apa yang kami simpan saat ini adalah 6.

03:46.860 --> 03:49.870
Jadi 5 Total baru pasti kurang dari 6.

03:49.890 --> 03:51.350
Jadi kami perbarui di sini.

03:51.600 --> 03:57.590
Kemudian kita kembali ke sebelumnya dan kita katakan baik-baik saja cara terpendek baru untuk sampai ke F bukan dari C

03:57.930 --> 03:59.970
lagi itu sebenarnya harus melalui D.

04:00.030 --> 04:07.590
Jadi kita tinggal meletakkan D di sana dan kemudian setelah itu kita ingin mengakhiri Qf dengan nilai baru 5 sehingga diperbarui dalam antrian

04:07.820 --> 04:12.960
prioritas kita dan kita tahu lain kali akan memilih 5 terlebih dahulu karena itu adalah nilai

04:12.960 --> 04:14.230
terkecil yang baru.

04:14.490 --> 04:15.150
Baiklah.

04:15.210 --> 04:16.540
Jadi mari kita coba ini.

04:16.560 --> 04:21.620
Dan jika Anda ingin tentu saja mencoba menerapkannya tetapi jelas bukan sesuatu yang harus Anda lakukan.

04:21.820 --> 04:27.180
Ini sedikit lebih rumit jika Anda ingin kode semu membawa Anda ke sana kalau tidak di video berikutnya saya

04:27.180 --> 04:28.570
akan melanjutkan dan membangun.
