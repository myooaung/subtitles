WEBVTT

00:00.330 --> 00:01.500
Halo, selamat datang kembali.

00:01.500 --> 00:04.950
Jadi ini adalah yang pertama dari banyak bagian tentang struktur data.

00:04.980 --> 00:08.150
Yang pertama yang akan kita bicarakan disebut daftar yang terhubung sendiri.

00:08.160 --> 00:09.590
Kami juga memiliki daftar tertaut ganda.

00:09.600 --> 00:10.390
Kita akan melihatnya nanti.

00:10.410 --> 00:11.360
Kita mulai dari sini.

00:11.640 --> 00:19.440
Pendahuluan jadi peringatan dengan cepat jika Anda tidak terbiasa dengan perkiraan javascript kata kunci kelas 2015 atau

00:19.440 --> 00:24.260
gula sintaksis untuk mengurutkan tampilan seperti pemrograman berorientasi objek tradisional.

00:24.270 --> 00:28.380
Jika Anda belum pernah melihat itu sebelumnya atau ingin menyegarkan ingatan Anda, lihat

00:28.380 --> 00:29.170
bagian sebelumnya.

00:29.190 --> 00:33.740
Saya pikir banyak siswa mungkin telah melompat ke bagian ini jika Anda melakukannya saya akan memeriksanya.

00:33.750 --> 00:36.330
Jika Anda tidak terbiasa dengan cara kerjanya, itu adalah bagian kecil yang cepat.

00:36.400 --> 00:41.070
Dan alasannya adalah bahwa kita akan menggunakan kata kunci kelas di hampir setiap struktur data yang kita

00:41.070 --> 00:45.310
buat atau setiap struktur data yang kita buat akan menentukan kelas javascript kita sendiri.

00:45.540 --> 00:50.040
Kita akan membuat kelas daftar yang terhubung secara tunggal di bagian ini dan melakukan hal yang sama untuk grafik dan

00:50.310 --> 00:51.680
setiap struktur lain yang kita lihat.

00:51.890 --> 00:52.410
BAIK.

00:52.710 --> 00:54.500
Begitu cepat tujuan kita.

00:54.540 --> 00:57.990
Kami ingin menjelaskan apa sih daftar yang terhubung sendiri?

00:57.990 --> 01:02.400
Kita juga akan membandingkannya dengan struktur daftar yang sudah kita ketahui larik bawaan.

01:02.400 --> 01:05.060
Kami menggunakannya sepanjang waktu sehingga menyimpan daftar data.

01:05.190 --> 01:06.140
Apa bedanya.

01:06.360 --> 01:11.280
Dan kemudian sebagian besar bagian akan dikhususkan untuk benar-benar mendefinisikan atau menautkan kelas daftar

01:11.280 --> 01:17.940
dan menambahkan banyak metode banyak fungsi untuk mendorong sesuatu ke dalamnya atau untuk pop hal-hal atau untuk mencari dan melintasi

01:17.940 --> 01:20.950
atau untuk menghapus hal-hal untuk semua jenis sesuatu.

01:20.960 --> 01:22.330
Jadi itulah yang akan kita lakukan di bagian ini.

01:22.400 --> 01:22.700
BAIK.

01:22.710 --> 01:24.510
Jadi mari kita mulai dengan definisi itu.

01:24.510 --> 01:25.650
Apa itu daftar sesuatu.

01:25.860 --> 01:30.150
Jadi itu adalah struktur data yang menyimpan data apa pun yang Anda inginkan angka string.

01:30.180 --> 01:34.470
Tidak masalah dan itu dipesan. Ini daftar data seperti array.

01:34.590 --> 01:37.020
Tapi ada perbedaan yang sangat besar dalam sebuah array.

01:37.020 --> 01:39.970
Setiap item dipetakan dan diindeks dengan angka.

01:40.080 --> 01:46.380
Jadi saya bisa mendapatkan item kelima item 6 dan setiap kali kita menambahkan sesuatu di dalamnya mendapat indeks

01:46.380 --> 01:52.830
yang memetakan ke posisinya daftar yang terhubung di sisi lain hanya terdiri dari sekelompok elemen tanpa indeks yang

01:52.830 --> 01:55.130
hanya menunjuk ke elemen berikutnya .

01:55.150 --> 01:59.730
Agak seperti sekelompok mobil kereta yang terhubung di mana satu mobil terhubung ke yang berikutnya dan yang satu terhubung

01:59.730 --> 02:00.550
ke yang berikutnya.

02:00.660 --> 02:04.410
Tetapi tidak ada indeks yang kami gunakan untuk mengakses hal-hal yang tidak dapat kami katakan.

02:04.410 --> 02:05.580
Berikan aku benda itu.

02:05.680 --> 02:09.450
Kami baru saja memulai yang pertama dan kemudian pindah ke yang kedua pindah ke yang ketiga pindah ke

02:09.450 --> 02:11.410
yang keempat dan kemudian pindah ke yang kelima.

02:11.460 --> 02:16.200
Jadi hanya beberapa terminologi di sini saya akan menunjukkan kepada Anda diagram hanya dalam sedetik tetapi kami mengatakan bahwa

02:16.260 --> 02:17.580
setiap elemen adalah sebuah node.

02:17.670 --> 02:19.940
Jadi posting tautan terdiri dari banyak node.

02:19.940 --> 02:27.630
Suatu simpul menyimpan sepotong data seperti string atau angka tetapi juga mereferensikan simpul berikutnya atau jika pada akhirnya tidak ada

02:27.780 --> 02:32.940
simpul berikutnya yang mengacu pada tidak dan kemudian tiga properti yang kita pantau.

02:33.060 --> 02:35.970
Kepala adalah awal dari daftar panjang.

02:36.060 --> 02:37.560
Ekor adalah akhirnya.

02:37.560 --> 02:39.420
Jadi kami tidak melacak setiap item di tengah.

02:39.420 --> 02:43.260
Kami hanya melacak kepala dan dari kepala kita bisa mencari tahu yang berikutnya.

02:43.320 --> 02:45.740
Dan dari sana kita bisa mencari tahu yang berikutnya sampai akhir.

02:45.900 --> 02:48.680
Dan kemudian kita juga melacak panjang penuh untuk membuat segalanya lebih mudah.

02:48.690 --> 02:52.320
Jadi, inilah semacam diagram daftar panjang.

02:52.320 --> 02:57.980
Perhatikan tidak ada indeks jadi kami tidak mengatakan ini nol dengan yang pertama yang kedua yang ketiga.

02:58.140 --> 03:02.030
Jika kita ingin mengakses sesuatu dari daftar ini, kita mulai dari awal.

03:02.310 --> 03:07.740
Jika kita ingin item kedua ke terakhir, kita harus mulai di sini dan meminta item berikutnya yang memberi kita 6

03:07.830 --> 03:12.030
dan kita harus meminta item berikutnya yang akhirnya memberi kita item kedua hingga terakhir.

03:12.090 --> 03:15.840
Jadi daftar panjang hanyalah sekelompok node yang menunjuk ke node lain.

03:15.870 --> 03:18.780
Jadi satu simpul menunjuk yang berikutnya menunjuk yang berikutnya.

03:18.780 --> 03:20.350
Semacam rantai gajah.

03:20.550 --> 03:25.110
Kembali sebelum gajah band di sirkus di AS mereka akan saling memegang ekor dengan hidung

03:25.290 --> 03:27.210
mereka dan berjalan dalam barisan.

03:27.660 --> 03:32.590
Saya agak suka menganggapnya sebagai gedung pencakar langit yang tidak memiliki lift.

03:32.640 --> 03:38.470
Jadi dalam sebuah array ada lift yang bisa Anda katakan bawa saya ke lantai lima dan membawa Anda ke sana.

03:38.700 --> 03:44.100
Jika Anda berada dalam daftar panjang hanya ada tangga dan setiap set setiap lantai terhubung ke

03:44.100 --> 03:45.450
satu set tangga berikutnya.

03:45.450 --> 03:49.800
Jadi untuk sampai ke lantai lima kita mulai yang pertama naik tangga ke lantai dua lalu naik ke lantai

03:49.800 --> 03:52.380
tiga dan empat dan kemudian kita naik ke lantai lima.

03:52.380 --> 03:53.990
Saya tidak tahu apakah itu analogi yang bagus atau tidak.

03:54.060 --> 03:59.850
Ngomong-ngomong terminologi daftar terkait tunggal berasal dari fakta bahwa setiap node hanya terhubung satu arah ke simpul

03:59.850 --> 04:04.380
berikutnya daftar terkait ganda yang akan mengatakan jangan khawatir tentang hal itu

04:04.380 --> 04:04.820
sekarang.

04:04.950 --> 04:09.600
Juga sebagai koneksi yang menunjuk kembali ke node sebelumnya dan kita akan membicarakan pro dan

04:09.810 --> 04:10.490
kontra nanti.

04:10.740 --> 04:15.770
Jadi, inilah visualisasi tentang visual algo vige, saya akan pergi dan tidak pernah mengatakan ini.

04:15.930 --> 04:18.840
Ini adalah situs web yang hebat dan itu akan sangat berguna di sini.

04:18.960 --> 04:22.830
Jadi ini adalah daftar panjang di mana setiap node hanya berisi angka.

04:22.830 --> 04:24.210
Ingat itu bisa apa saja yang kita inginkan.

04:24.240 --> 04:30.480
Kita tidak dapat memiliki string, kita dapat memiliki string lain dapat memiliki array dan masing-masing tidak masalah dan mereka semua

04:30.480 --> 04:33.450
hanya menunjuk ke item berikutnya kecuali untuk yang terakhir.

04:33.460 --> 04:36.970
Tidak ada apa-apa setelah itu dan katakanlah kita akan pergi.

04:37.260 --> 04:37.680
Saya tidak tahu

04:37.680 --> 04:40.740
Memasukkan sesuatu sebenarnya akan dimulai dengan mencari sesuatu.

04:40.740 --> 04:48.330
Jadi, jika kita ingin mencari, katakanlah 43 dalam daftar ini, kita harus mulai dari awal dan memeriksa berikutnya kemudian

04:48.330 --> 04:52.670
berikutnya kemudian berikutnya kemudian berikutnya dan kemudian kita temukan 43.

04:52.750 --> 04:53.310
BAIK.

04:53.550 --> 05:00.510
Jika kami ingin memasukkan sesuatu ke sini jika Anda ingin memasukkan sesuatu di tengah,

05:00.510 --> 05:04.890
katakanlah pada posisi Anda ingin memasukkan angka 90.

05:05.130 --> 05:08.760
Kita harus mulai dari awal kemudian turun ke yang berikutnya ke yang berikutnya.

05:08.760 --> 05:13.360
Terus sampai kita tiba di tempat yang benar dan kemudian kita masukkan.

05:13.380 --> 05:18.070
Sekarang proses memasukkan yang sebenarnya akan kembali ke kita akan menulis fungsi sisipan kita sendiri.

05:18.120 --> 05:22.830
Ini cukup mudah meskipun terutama untuk memasukkan maksud saya ke awal atau akhir.

05:23.130 --> 05:26.030
Yang harus kita lakukan adalah mengatakan untuk memasukkannya di awal.

05:27.350 --> 05:32.950
Apakah hanya membuat ini kepala baru dan mengarahkannya ke kepala lama dan tiba-tiba kita dalam bisnis.

05:33.060 --> 05:37.650
Tidak seperti array di mana kita harus melakukannya dengan baik, kita tidak melakukan ini tetapi dalam array

05:37.650 --> 05:40.460
setiap item harus diindeks ulang untuk mendapatkan nomor posisi baru.

05:40.830 --> 05:41.110
BAIK.

05:41.130 --> 05:44.880
Jadi kita akan kembali ke hal ini dan menghabiskan banyak waktu untuk mengerjakan ini saat kita

05:44.880 --> 05:45.850
membangun metode kita sendiri.

05:45.960 --> 05:52.050
Baiklah mari kita selesaikan dengan balapan sehingga daftar yang ditautkan tidak memiliki indeks atau indeks.

05:52.050 --> 05:54.210
Saya kira saya menulis saya pikir itu indeks.

05:54.210 --> 05:57.150
Mereka tidak memiliki angka yang sesuai dengan setiap item.

05:57.150 --> 06:02.610
Alih-alih, kami hanya memiliki pointer kepala yang hanya variabel yang mengatakan ini adalah awal dari

06:02.610 --> 06:03.160
daftar.

06:03.360 --> 06:04.690
Dan kita punya ekor.

06:04.710 --> 06:06.130
Anda sebenarnya tidak harus memiliki ekor.

06:06.150 --> 06:08.490
Itu hanya membuatnya lebih mudah jika Anda mencoba menambahkan sampai akhir.

06:08.640 --> 06:09.750
Tetapi kita harus memiliki kepala itu.

06:09.760 --> 06:10.600
Itulah awalnya.

06:10.830 --> 06:15.450
Dan kemudian kita bisa pindah ke yang berikutnya dan ke yang berikutnya dan ke yang berikutnya

06:15.450 --> 06:20.870
sampai kita menemukan apa yang kita cari atau kita memasukkan sesuatu seperti array tidak ada posisi tidak ada indeks.

06:21.120 --> 06:24.090
Jadi setiap node terhubung dengan pointer berikutnya.

06:24.100 --> 06:29.580
Apa artinya ini akses acak tidak diizinkan, jadi akses acak berarti saya tidak bisa hanya meminta item kesepuluh

06:29.610 --> 06:30.890
dan segera mendapatkannya.

06:30.930 --> 06:34.240
Kita harus melintasi dari awal sampai ke item kesepuluh.

06:34.320 --> 06:37.000
Sama seperti analogi yang saya jelaskan dengan gedung pencakar langit.

06:37.020 --> 06:39.860
Jika Anda memiliki sebuah array Anda mendapatkan lift langsung ke lantai sepuluh.

06:40.110 --> 06:43.140
Jika Anda memiliki panjang Pertama, Anda berjalan sampai ke lantai sepuluh.

06:43.140 --> 06:48.200
Namun salah satu hal yang membuat daftar panjang bagus dalam penyisipan dan penghapusan.

06:48.420 --> 06:50.310
Jadi karena array diindeks.

06:50.310 --> 06:54.180
Jika kita memasukkan sesuatu di awal atau di tengah kita sudah membicarakan ini.

06:54.210 --> 06:56.160
Ini memiliki efek riak kaskade ini.

06:56.220 --> 06:58.760
Semuanya harus diindeks dalam daftar panjang.

06:58.770 --> 07:03.420
Bukan itu masalahnya dan kita akan membahas lebih lanjut ini kita akan berbicara tentang O

07:03.420 --> 07:08.040
besar operasi tertentu di seluruh bagian tetapi hanya tahu bahwa itu adalah salah satu alasan

07:08.040 --> 07:12.960
mengapa Anda ingin menggunakan sesuatu untuk kami adalah jika sangat peduli tentang penyisipan dan penghapusan terutama jika

07:12.960 --> 07:19.050
Anda bekerja dengan potongan data yang sangat panjang untuk tidak memotong data dengan set data yang panjang banyak informasi dan Anda

07:19.320 --> 07:20.610
tidak perlu akses acak.

07:20.610 --> 07:22.190
Anda hanya perlu menyimpannya dalam daftar.

07:22.320 --> 07:26.310
Meskipun Anda mungkin ingin menggunakan daftar tertaut tetapi akan kembali kami akan kembali ke ini.

07:26.310 --> 07:30.550
Ingat banyak dari ini sekarang hanya akan menjadi sangat teoritis dan konseptual.

07:30.570 --> 07:32.250
Jangan terlalu terjebak pada Anda tahu.

07:32.250 --> 07:34.170
Mengapa saya menggunakan ini jika kita sudah memiliki array.

07:34.380 --> 07:38.970
Karena pada akhirnya Anda bisa menggunakan array untuk semua ini tetapi ada keuntungan untuk

07:38.970 --> 07:40.960
membuat daftar dan tetap akan mengembangkannya.

07:41.060 --> 07:45.880
Dan video berikutnya kita akan mendefinisikan kelas kurang panjang kita dan menambahkan metode pertama kita.

07:45.890 --> 07:46.800
Jadi itu akan terjadi selanjutnya.
