WEBVTT

00:00.180 --> 00:00.810
Baiklah.

00:00.810 --> 00:03.120
Jadi kami telah mengimplementasikan dasar-dasar tabel hash.

00:03.150 --> 00:06.520
Kami memiliki cara memasukkan, kami memiliki cara untuk memperlakukan suatu nilai.

00:06.570 --> 00:11.430
Kami juga melakukan metode kunci dan nilai yang tidak terlalu penting untuk jujur.

00:11.430 --> 00:16.890
Sekarang mari kita bicara tentang kompleksitas waktu besar-O khususnya operasi dasar ini.

00:17.040 --> 00:24.690
Jadi penghapusan penyisipan dan mengakses data rata-rata dan juga kasus terbaik keduanya merupakan satu waktu konstan

00:24.690 --> 00:26.820
yang fantastis Itu hebat.

00:26.970 --> 00:33.090
Dan ini benar-benar turun ke seberapa baik fungsi hash Anda adalah seberapa cepat

00:33.090 --> 00:37.530
fungsi hash itu sendiri menjadi seberapa merata mendistribusikan hash.

00:37.530 --> 00:39.590
Minimalkan jumlah tabrakan.

00:39.650 --> 00:42.260
Ingat bahwa O besar adalah penyederhanaan hal.

00:42.270 --> 00:45.570
Kami menghapus konstanta yang disederhanakan jika memungkinkan.

00:45.600 --> 00:50.820
Jadi mengatakan bahwa Anda tahu kompleksitas waktu kami rendah untuk penyisipan, tidak berarti bahwa hanya ada

00:50.820 --> 00:52.840
satu operasi yang diperlukan untuk menyisipkan.

00:52.890 --> 00:54.870
Itu hanya berarti tren umum.

00:54.870 --> 01:00.600
Jadi dimungkinkan untuk menulis fungsi hash yang baik yaitu waktu yang konstan dan hampir setiap bahasa pemrograman

01:00.600 --> 01:04.880
yang memiliki implementasi tabel hash memiliki fungsi hash waktu yang konstan.

01:04.890 --> 01:11.070
Nah, itu berbeda dari fungsi hash kriptografi yang perlu benar-benar dijalankan untuk setiap bit

01:11.070 --> 01:13.440
data saat input bertambah.

01:13.440 --> 01:17.580
Katakanlah file tumbuh dari satu megabita menjadi 200 megabita.

01:17.580 --> 01:22.650
Fungsi hash harus benar-benar melintasi atau mengurai setiap bagian dari data itu.

01:22.650 --> 01:28.050
Jika itu adalah fungsi hash yang aman secara kriptografis tetapi ketika kita berbicara tentang tabel hash tidak apa-apa jika kita

01:28.050 --> 01:32.750
hanya melihat sebagian data, hanya bagian dari string dalam kasus kita yang merupakan apa yang kita lakukan.

01:32.760 --> 01:39.030
Jadi dimungkinkan untuk menulis secara umum fungsi hash waktu yang konstan sehingga penghapusan penyisipan dan akses

01:39.210 --> 01:42.020
dalam kasus umum kasus terbaik umumnya konstan.

01:42.060 --> 01:47.730
Jadi jika kami memiliki fungsi hash yang baik dan ini adalah dataset kami divisualisasikan di mana ini menunjukkan Anda tahu

01:47.760 --> 01:51.080
sepotong data yang disimpan di sini ini berbicara tentang rantai terpisah

01:51.080 --> 01:59.490
Jadi, kami tahu Anda memiliki indeks tertentu yang memiliki dua bagian bahkan jika diperlukan satu operasi untuk hash data kami

01:59.490 --> 02:04.930
katakanlah kami mengambil mengakses sesuatu seperti kami mengakses nilai ini di sini.

02:05.070 --> 02:07.380
Jadi saya harus hash kunci terlebih dahulu.

02:07.380 --> 02:08.840
Maka itu memberitahu saya indeks 9.

02:08.900 --> 02:10.040
Saya pergi ke indeks 9.

02:10.080 --> 02:11.520
Nah ada dua bagian di sini.

02:11.610 --> 02:14.490
Jadi saya harus melihat yang pertama dan yang kedua.

02:14.700 --> 02:20.460
Dan secara keseluruhan kami masih akan mengatakan bahwa itu adalah waktu yang konstan karena ini adalah tiga operasi setiap kali.

02:20.460 --> 02:22.230
Atau lima operasi setiap kali.

02:22.260 --> 02:30.360
Tetapi jika kita menumbuhkan ini menjadi 10.000 item atau 20.000 elemen posisi dalam tabel hash kita, kita akan mengharapkannya dengan

02:30.360 --> 02:33.780
fungsi hash yang baik akan didistribusikan secara merata.

02:33.780 --> 02:38.840
Mungkin saja kita memiliki fungsi hash yang benar-benar buruk yang mendistribusikan semuanya dengan sangat mengerikan

02:38.850 --> 02:42.110
ke dalam satu indeks yang akan sangat tidak berguna.

02:42.180 --> 02:48.390
Tetapi jika ini terjadi jika saya ingin mengambil atau jika saya ingin memasukkan saya ingin menghapus sesuatu

02:48.390 --> 02:55.530
dari akhir itu akan menjadi 0 dari waktu akhir karena bahkan jika fungsi hash saya sendiri adalah waktu yang konstan

02:55.800 --> 03:01.620
jika itu mendistribusikan semuanya ke satu tempat maka pada dasarnya hanya daftar dan untuk memasukkan di

03:01.620 --> 03:04.830
akhir daftar adalah o acara dan saatnya linier.

03:04.830 --> 03:10.650
Jadi itu benar-benar turun ke seberapa baik fungsi hash Anda adalah seberapa cepat itu sendiri tetapi juga bagaimana secara

03:10.740 --> 03:11.660
merata mendistribusikan sesuatu.

03:11.700 --> 03:17.460
Dan inilah mengapa saya tidak merekomendasikan menulis fungsi hash Anda sendiri menggunakan fungsi hash yang dikenal yang diimplementasikan

03:17.460 --> 03:18.650
oleh bahasa lain.

03:18.660 --> 03:24.180
Ada banyak perpustakaan online jadi jika Anda harus melakukan itu, saya sarankan Anda menggunakan sesuatu yang sudah

03:24.180 --> 03:25.280
dilakukan orang lain.

03:25.410 --> 03:29.650
Jadi secara umum ketika kita berbicara tentang tabel hash, mereka sangat cepat.

03:29.700 --> 03:35.250
Satu waktu yang konstan untuk menghapus penyisipan dan mengakses dan ketika saya mengatakan akses itu berarti menggunakan kunci

03:35.250 --> 03:37.510
yang diberikan menemukan nilai yang sesuai.

03:37.740 --> 03:42.090
Ketika kita berbicara tentang mencari dengan baik untuk mencari kunci, itu masih bisa sangat cepat.

03:42.090 --> 03:47.130
Ini bisa menjadi waktu yang konstan, tetapi jika kita mencari nilai maka kita harus melalui setiap

03:47.130 --> 03:50.130
hal setiap item dan memeriksa sehingga akan baik-baik saja.

03:50.150 --> 03:52.130
Dan baiklah, jadi itu tidak besar.

03:52.140 --> 03:54.330
Secara umum kompleksitas waktu untuk tabel hash.

03:54.330 --> 03:55.900
Sekarang mari kita lakukan rekap cepat.

03:56.160 --> 03:58.840
Jadi tabel hash adalah koleksi pasangan nilai kunci.

03:58.980 --> 03:59.680
Keren.

03:59.850 --> 04:04.220
Mereka ada dalam banyak bahasa yang sudah mengimplementasikan kamus dengan Python.

04:04.440 --> 04:09.570
Mereka mirip dengan objek yang sebenarnya lebih dekat dengan peta dalam javascript.

04:09.720 --> 04:14.580
Hampir semua bahasa memiliki implementasi sehingga tabel hash dapat menemukan nilai dengan sangat cepat menggunakan

04:14.580 --> 04:15.060
kunci.

04:15.210 --> 04:17.620
Mereka dapat menambahkan pasangan nilai kunci dengan sangat cepat juga.

04:17.670 --> 04:23.220
Dan cara kami mengimplementasikan tabel hash kami menggunakan array di mana kami hash kunci untuk mendapatkan indeks array

04:23.220 --> 04:25.890
dan kemudian kami menyimpan data di posisi itu.

04:26.010 --> 04:27.920
Jadi fungsi hash kita sangat penting.

04:28.140 --> 04:29.640
Jadi fungsi hash yang bagus.

04:29.640 --> 04:35.610
Juga banyak orang hanya akan mengatakan hash yang baik harus cepat idealnya waktu konstan dan ini

04:35.610 --> 04:41.100
berbicara tentang tabel hash hash peta fungsi hash tidak aman fungsi hash kriptografis.

04:41.160 --> 04:44.550
Mereka memiliki beberapa aturan berbeda tetapi harus cepat.

04:44.580 --> 04:47.050
Mereka harus mendistribusikan kunci secara relatif seragam.

04:47.100 --> 04:50.350
Kami tidak ingin konflik apa pun jika memungkinkan.

04:50.400 --> 04:54.390
Kami ingin barang-barang disimpan seluas mungkin dan kami ingin semuanya menjadi deterministik.

04:54.390 --> 05:01.250
Kita perlu mendapatkan output yang sama persis setiap kali dengan input yang sama dan kemudian strategi ketika kita memiliki dua

05:01.250 --> 05:06.620
anak dengan indeks yang sama ketika kita hash sesuatu kita mendapatkan indeks yang sama dalam

05:06.740 --> 05:11.960
array kita, setidaknya ada dua yang kita bicarakan tentang rantai terpisah dan linear probing terpisah

05:11.960 --> 05:18.500
chaining melibatkan menyimpannya bersama-sama dalam struktur bersarang dalam indeks array yang sama linear probing melibatkan melihat ke depan untuk

05:18.500 --> 05:19.980
slot kosong berikutnya.

05:20.210 --> 05:21.950
Dan kami fokus pada rantai terpisah.

05:21.950 --> 05:23.400
Baiklah jadi itu tabel hash.

05:23.480 --> 05:25.610
Sekali lagi fungsi hash kami sangat sederhana.

05:25.610 --> 05:28.740
Itu tidak ditulis dengan maksud untuk menjadi sangat berguna.

05:28.880 --> 05:34.790
Benar-benar lebih sebagai demo pendidikan tetapi secara keseluruhan tabel hash peta hash sangat berguna.

05:34.790 --> 05:38.450
Kami menggunakannya sepanjang waktu hampir setiap saat Anda perlu menyimpan data nilai kunci.

05:38.630 --> 05:40.900
Masuk akal untuk menggunakan tabel hash.

05:40.900 --> 05:41.250
Baiklah.
