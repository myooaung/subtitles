WEBVTT

00:00.180 --> 00:01.410
Hai, selamat datang kembali.

00:01.410 --> 00:05.870
Kami sedang beralih ke algoritma pengurutan menengah berikutnya yang disebut quicksort.

00:05.880 --> 00:10.380
Jadi itu memiliki sedikit nama yang menarik itu kedengarannya lebih baik daripada gabungan.

00:10.380 --> 00:13.950
Maksud saya, siapa yang tidak menginginkan perangkat lunak yang disebut quicksort.

00:13.950 --> 00:19.980
Tetapi harus saya akui secara pribadi ini adalah kutukan dari keberadaan saya sejauh menyortir algoritma bukan

00:20.310 --> 00:21.500
karena itu buruk.

00:21.510 --> 00:25.140
Maksud saya ini sangat berguna karena kita akan lihat nanti efisien.

00:25.140 --> 00:25.880
Itu bekerja dengan baik.

00:25.890 --> 00:27.140
Ini memang cepat.

00:27.300 --> 00:31.430
Tetapi untuk beberapa alasan otak saya tidak seperti cara quicksort bekerja.

00:31.580 --> 00:36.600
Dan setiap kali saya harus mengajarkan algoritma pengurutan ini, saya biasanya Anda tahu malam sebelum kuliah, kami

00:36.840 --> 00:39.600
akan meninjau memastikan saya ingat bagaimana semuanya bekerja.

00:39.600 --> 00:45.390
Saya dapat menulis ulang kode dan kadang-kadang Anda tahu saya harus suka referensi kode sebelumnya atau sesuatu.

00:45.450 --> 00:52.350
Tetapi dengan quicksort setiap kali saya harus mengecek pekerjaan saya, otak saya hanya menolak menyimpannya.

00:52.350 --> 00:54.690
Hanya tidak akan tidak menyukainya.

00:54.690 --> 01:00.570
Jadi jangan sampai meracuni pendapatmu sebelumnya karena aku punya banyak murid yang sangat

01:00.570 --> 01:03.500
suka quicksort bagiku cara otakku bekerja.

01:03.520 --> 01:05.280
Hanya saja tidak terlalu intuitif.

01:05.460 --> 01:07.730
Jadi kita akan menghabiskan khusus.

01:07.740 --> 01:12.290
Kami akan memberikan perhatian khusus untuk mencoba memahaminya dan memastikan kami melangkah melaluinya.

01:12.310 --> 01:17.190
OK jadi quicksort itu bekerja pada asumsi yang sama yang menggabungkan semacam melakukannya.

01:17.250 --> 01:23.580
Itu salah satu yang akan paling mudah untuk diselesaikan melalui rekursi di mana kita pada dasarnya memisahkan

01:23.940 --> 01:30.690
data array sampai kita mencapai array yang panjangnya 0 atau 1 item yang berarti bahwa mereka secara individual

01:30.690 --> 01:31.140
diurutkan.

01:31.140 --> 01:32.820
Kami memiliki satu item.

01:32.950 --> 01:34.080
Anda memiliki array dengan satu item.

01:34.080 --> 01:35.060
Itu diurutkan.

01:35.310 --> 01:39.030
Jadi itulah yang kami manfaatkan tetapi kami melakukan sesuatu yang berbeda.

01:39.370 --> 01:43.690
Kami bekerja dengan memilih satu elemen yang akan kami sebut titik pivot.

01:43.860 --> 01:47.100
Jadi dalam array apa pun Anda memilih elemen apa pun itu sebenarnya tidak terlalu penting.

01:47.100 --> 01:49.010
Kami akan membicarakan beberapa implikasinya.

01:49.020 --> 01:51.040
Tapi katakanlah kita memilih elemen di tengah.

01:51.150 --> 01:57.160
Apa yang akan kita lakukan adalah memindahkan semua angka yang lebih rendah dari angka itu ke kiri angka itu di semua angka

01:57.160 --> 01:59.700
yang lebih besar dari angka itu ke kanan.

01:59.700 --> 02:00.860
Sekarang kita tidak akan memilah semuanya.

02:00.870 --> 02:06.540
Kami hanya akan memindahkan mereka ke satu sisi dan kemudian dari sana kami tahu bahwa satu nomor berada di tempat

02:06.540 --> 02:07.160
yang benar.

02:07.150 --> 02:09.000
Itu hanya satu angka itu.

02:09.000 --> 02:09.580
Satu sama lain

02:09.690 --> 02:14.670
Semua angka lain di sisi kanan adalah sisi kiri tetapi kita tidak tahu posisi persisnya.

02:14.700 --> 02:18.550
Jadi kita ulangi proses untuk sisi kiri dan sisi kanan.

02:18.840 --> 02:21.450
Jadi jika penjelasan itu masuk akal, saya tidak menyalahkan Anda.

02:21.600 --> 02:23.580
Mari kita lihat diagram kecil.

02:23.850 --> 02:30.600
Jadi jika ini adalah array kami, kami memiliki 8 elemen 1 hingga 8 angka dan mereka dalam urutan acak.

02:30.690 --> 02:35.730
Apa yang kita lakukan adalah kita hanya memilih beberapa elemen dan untuk contoh ini kita akan memilih yang pertama

02:35.730 --> 02:40.740
yaitu 5 dan kemudian memindahkan semua angka yang kurang dari 5 ke kiri dan semua angka yang lebih

02:40.740 --> 02:42.440
besar dari 5 ke kanan.

02:42.660 --> 02:48.920
Jadi jika kita menghitung angka yang kurang dari 5 kita memiliki 1 2 3 4 angka.

02:48.990 --> 02:53.240
Jadi itu artinya kita harus memiliki 1 2 3 4 di sini.

02:53.370 --> 02:57.720
Kita akan memindahkan semuanya di sini dan kemudian pada indeks ini di sini kita akan memindahkan lima.

02:57.900 --> 03:00.880
Dan kemudian di sisi kanan kita akan memiliki 7 6 dan 8.

03:01.170 --> 03:03.390
Dan jika Anda melihat langkah selanjutnya itulah yang kami lakukan.

03:03.720 --> 03:06.120
Jadi lima berada di tempat yang benar.

03:06.120 --> 03:12.970
Kita tahu bahwa dalam array kita yang terurut 5 akan memiliki indeks 4 0 1 2 3 4.

03:13.200 --> 03:14.690
Kami tidak tahu ini tidak diurutkan.

03:14.700 --> 03:15.490
Ini tidak diurutkan.

03:15.530 --> 03:17.240
Ini disortir sekarang.

03:17.520 --> 03:22.090
Jadi sekarang kita mengulangi proses di sisi kiri dan kanan secara rekursif.

03:22.500 --> 03:25.650
Jadi di sisi kiri mari kita mulai lagi.

03:25.680 --> 03:28.390
Tidak masalah apa yang kita pilih itu akan berhasil tidak peduli apa.

03:28.390 --> 03:32.340
Tapi mari kita memilih item pertama lagi dan meletakkannya di tempat yang benar.

03:32.340 --> 03:38.590
Jadi itu berarti akan berada di indeks 0 1 2 karena 1 dan 2 harus datang sebelumnya.

03:38.940 --> 03:40.650
Dan itulah akhirnya kita.

03:40.650 --> 03:47.760
Jadi sekarang ini di tempat yang benar kita tahu dalam array terakhir kita 3 akan memiliki indeks 2 5 akan

03:47.760 --> 03:49.160
memiliki indeks empat.

03:49.230 --> 03:52.440
Berikutnya kita memiliki elemen dua atau array dua elemen.

03:52.440 --> 03:53.560
Ini bagus dan mudah.

03:53.790 --> 03:58.210
Jadi kami memilih elemen pertama yang merupakan satu dan kami mencari tahu ke mana ia harus pergi.

03:58.470 --> 04:02.790
Dan semua yang kita miliki adalah satu elemen lain yang lebih besar dari itu.

04:02.820 --> 04:06.760
Jadi sisi kanan sekarang menjadi dua dan kita bisa mengatasinya.

04:06.890 --> 04:08.140
Dan itu adalah elemen tunggal.

04:08.280 --> 04:10.620
Jadi sekarang kita telah mencapai ujung di sisi kiri kita.

04:10.830 --> 04:12.080
Dan jika Anda melihat jenis.

04:12.150 --> 04:13.860
Bayangkan menggambar.

04:13.950 --> 04:15.950
Bayangkan menempatkan semua ini di baris yang sama.

04:16.020 --> 04:17.550
Kita berakhir dengan array yang diurutkan.

04:17.550 --> 04:20.270
Setidaknya sisi kiri dari lima.

04:20.340 --> 04:21.770
Maka kita harus ke sisi kanan.

04:21.820 --> 04:24.370
Ingat jauh-jauh di awal kita berpisah di sana.

04:24.540 --> 04:25.770
Kami baru saja mengurus ini.

04:25.930 --> 04:27.430
Tidak menyoroti hal yang salah.

04:27.600 --> 04:27.890
BAIK.

04:27.900 --> 04:29.610
Komputer saya tidak ingin saya sorot.

04:29.790 --> 04:31.600
Kami merawat sisi kiri di sini.

04:31.680 --> 04:33.760
Sekarang mari kita ke sisi kanan.

04:34.020 --> 04:39.630
Jadi kita memilih titik pivot yang tujuh dalam contoh kita dan kita harus mencari tahu ke mana harus

04:39.630 --> 04:39.990
pergi

04:40.020 --> 04:41.620
Apa indeks di mana seharusnya itu berakhir.

04:41.640 --> 04:46.620
Kami memindahkan elemen lain sehingga kami memindahkan enam ke kiri 8 ke kanan.

04:46.710 --> 04:48.900
Dan keduanya adalah elemen tunggal Array no.

04:49.010 --> 04:56.970
Dan sebenarnya jika Anda melihat di mana kita memiliki 1 2 3 4 5 6 7 8 kita memiliki array yang diurutkan di sana.

04:57.010 --> 04:58.210
Saya harus memiliki slide lagi.

04:58.290 --> 04:59.230
Saya selalu melakukan itu.

04:59.430 --> 05:03.040
Jadi ini menunjukkan kepada kita bagaimana cara kerjanya secara kasar.

05:03.210 --> 05:06.280
Masuk akal saya pikir dalam diagram yang bagus.

05:06.320 --> 05:11.510
Tetapi ketika kita benar-benar mulai bekerja dan mencoba untuk menulis rekursi dan memvisualisasikannya ketika kita memiliki

05:11.540 --> 05:13.250
kode itu bisa sedikit rumit.

05:13.310 --> 05:13.610
BAIK.

05:13.610 --> 05:16.600
Jadi saya punya visual saya akan pergi dengan quicksort sekarang.

05:16.910 --> 05:18.860
Jadi inilah visualisasi yang lain.

05:18.920 --> 05:24.120
Kami mulai dengan array yang tidak disortir ini dan kami memilih 11 sebagai titik pivot pertama kami.

05:24.140 --> 05:28.010
Jadi kami ingin memindahkan semua elemen yang kurang dari 11 ke kiri dan

05:28.010 --> 05:30.010
semua yang lebih besar ke kanan.

05:30.080 --> 05:31.510
Jadi kita mulai dan membandingkannya.

05:31.520 --> 05:35.030
OK 40 lebih besar dari lebih besar dari lebih besar dan lebih besar dari.

05:35.030 --> 05:36.090
OK, inilah 10.

05:36.290 --> 05:37.560
Jadi itu kurang dari.

05:37.580 --> 05:38.710
Jadi apa yang akan kita lakukan.

05:38.780 --> 05:41.860
Ini mungkin tampak Anda mungkin berpikir bahwa kami akan menukar mereka atau sesuatu.

05:41.870 --> 05:47.000
Apa yang sebenarnya akan kita lakukan adalah melacak berapa banyak elemen yang kurang dari 11 sejauh ini

05:47.000 --> 05:47.710
satu elemen.

05:47.990 --> 05:55.860
Dan kemudian kita hanya akan menukar 10 dan 40 tetapi kita secara mental melacak kode kita tidak secara mental.

05:55.880 --> 05:59.240
Ada satu elemen yang kita hanya kurang dari 11.

05:59.240 --> 06:00.560
Sekarang kita terus berjalan.

06:00.660 --> 06:02.770
Tidak, itu lebih besar daripada lebih besar dari itu.

06:02.960 --> 06:04.100
Oke, ini elemen lain.

06:04.110 --> 06:05.220
Kurang dari 11

06:05.390 --> 06:11.330
Jadi kami melakukan hal yang sama lagi tetapi sekarang kami tahu kami memiliki variabel dan kami mengatakan ada dua hal yang

06:11.330 --> 06:12.250
kurang dari 11.

06:12.260 --> 06:16.800
Jadi, sekali kita mencapai akhir karena tidak ada yang lebih besar dari 11 atau tidak kurang dari 11 lagi.

06:17.120 --> 06:20.970
Sekarang kita tahu, ada dua hal yang kita tambahkan.

06:20.990 --> 06:27.390
Ada dua item yang sekarang kita butuhkan untuk melompati katak dan itulah yang terjadi.

06:27.740 --> 06:29.710
Jadi sekarang semua 11 ada di tempat yang benar.

06:29.960 --> 06:35.800
Jadi apakah masuk akal kita menghitung 1 2 dan kemudian kita pindah ke posisi itu.

06:36.260 --> 06:39.410
Dan sekarang semuanya di sisi kiri kurang dari 11.

06:39.410 --> 06:42.410
Segala sesuatu di sisi kanan lebih besar dari 11.

06:42.500 --> 06:45.360
Sekarang kedua nilai ini sudah diurutkan.

06:45.470 --> 06:48.750
Tapi itu bukan kode kita yang tidak tahu bahwa itu tidak dijamin.

06:49.180 --> 06:49.650
BAIK.

06:49.820 --> 06:53.710
Jadi sekarang kode kita akan mengambil sisi kiri dan mengulangi hal yang sama.

06:53.720 --> 06:59.510
Jadi ini menunjukkan kepada kita 11 disemen di tempat dan sekarang melakukan hal yang sama dengan enam dalam 10.

06:59.690 --> 07:04.020
Tapi ini super singkat karena benar-benar tidak ada nilai lain untuk dibandingkan.

07:04.070 --> 07:06.590
Jadi semen 6 dan semen 10.

07:06.800 --> 07:08.530
Tetapi sekarang mari kita fokus pada sisi kanan.

07:08.540 --> 07:13.880
Jadi selanjutnya kita memiliki 50 dan saya hanya akan menghitung berapa angka lebih besar dari 50.

07:13.880 --> 07:22.800
Atau berapa banyak angka yang kurang dari 50 ketika kita melewati angka 1 2 3 4 5 6 7 8 9 10 11 12.

07:22.820 --> 07:26.900
Jadi sekarang kita hanya akan menukar 50 ke ujung sana.

07:27.930 --> 07:31.870
Sekarang lima puluh di tempat yang benar sehingga harus berubah menjadi oranye.

07:31.980 --> 07:32.520
BAIK.

07:32.760 --> 07:35.050
Jadi sekarang kita harus mengurutkan sisi kiri dan kanan.

07:35.100 --> 07:36.640
Tetapi tidak ada sisi kanan.

07:36.720 --> 07:38.180
Jadi kita harus memilah sisi cinta ini.

07:38.550 --> 07:39.880
Jadi kami memilih 27 lagi.

07:40.020 --> 07:41.380
Lagi mengapa itu mulai lagi.

07:41.400 --> 07:43.060
Kami memilih 27 untuk pertama kalinya.

07:43.080 --> 07:44.700
Sekarang kami membandingkannya dengan 43.

07:44.760 --> 07:45.960
Itu lebih besar dari itu.

07:46.170 --> 07:48.360
Lebih besar, lebih besar, lebih besar.

07:48.390 --> 07:49.730
OK, ini kurang dari itu.

07:49.830 --> 07:51.830
Jadi kami bertukar dan melacak.

07:51.840 --> 07:52.080
BAIK.

07:52.090 --> 07:54.180
Ada satu elemen yang kurang dari itu.

07:54.330 --> 07:55.190
Teruskan.

07:55.440 --> 07:56.750
Ini swap lain.

07:56.790 --> 07:59.730
Sekarang kami memiliki dua elemen yang kurang terus berjalan.

07:59.730 --> 08:01.780
Sekarang kami memiliki tiga elemen yang kurang dari.

08:01.960 --> 08:03.570
Dan akhirnya empat elemen.

08:03.570 --> 08:05.130
Sekarang di mana kita menempatkan 27.

08:05.220 --> 08:10.740
Yah kita tahu bahwa kita memiliki empat angka kurang dari 27 jadi kita menukarnya di sana.

08:11.220 --> 08:11.970
Baiklah.

08:12.090 --> 08:13.840
Jadi saya tidak akan berjalan melalui setiap langkah lainnya.

08:13.860 --> 08:15.270
Saya hanya akan maju cepat.

08:15.270 --> 08:17.510
Tetapi Anda dapat melihat 27 sekarang posisi yang benar.

08:17.520 --> 08:19.230
Sekarang kita lakukan sisi kiri.

08:19.430 --> 08:21.520
Teruskan.

08:21.540 --> 08:26.100
Sekarang kami melakukan sisi kanan 43 di tempat yang benar.

08:26.130 --> 08:28.350
Sekarang 42 di tempat yang benar.

08:28.910 --> 08:29.800
BAIK.

08:30.270 --> 08:34.460
Dan kita hampir sampai setiap pergi penuh diurutkan.

08:34.800 --> 08:37.160
Jadi ini semacam inilah sebabnya.

08:37.160 --> 08:42.650
Bagi saya pribadi mungkin itu lebih masuk akal bagi Anda tetapi mencoba menulis ini dalam kode bisa sangat menakutkan.

08:42.870 --> 08:47.460
Dan saya akan memberi Anda kodesemu di video berikutnya tetapi sama sekali tidak berharap Anda

08:47.460 --> 08:48.990
hanya pergi dan menulisnya.

08:48.990 --> 08:49.940
Ini yang sulit.

08:50.100 --> 08:52.730
Jadi kode sebenarnya tidak terlalu lama.

08:52.830 --> 08:55.200
Tapi secara konseptual itu banyak.

08:55.320 --> 08:57.750
Jadi saya akan memberikan kode pseudo jika Anda ingin mencobanya.

08:57.750 --> 08:58.350
Lanjutkan.

08:58.440 --> 09:00.650
Tapi tolong jangan menyalahkan diri sendiri.
