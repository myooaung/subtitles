WEBVTT

00:00.240 --> 00:01.320
Hai, selamat datang kembali.

00:01.500 --> 00:06.590
Jadi hal pertama yang harus saya katakan adalah bahwa video ini dipasangkan di sini sejalan dengan video sebelumnya.

00:06.630 --> 00:09.540
Kami akan memecahkan masalah yang sama dengan dua cara berbeda.

00:09.570 --> 00:13.260
Jadi dalam video terakhir jika Anda tidak menontonnya, saya sarankan Anda setidaknya men-skimnya.

00:13.410 --> 00:20.010
Kami berbicara tentang pembantu metode rekursi satu strategi satu pendekatan untuk memecahkan masalah ini mengumpulkan

00:20.010 --> 00:24.070
nilai-nilai aneh sehingga secara rekursif melakukan ini mudah

00:24.120 --> 00:28.850
Dapat menggunakan loop dan itu tidak sulit tetapi untuk melakukannya secara rekursif sedikit lebih sulit.

00:29.040 --> 00:35.100
Jadi kumpulkan nilai-nilai lama membutuhkan array bilangan genap dan ganjil dan seharusnya hanya mengembalikan bilangan ganjil

00:35.130 --> 00:39.140
yang diekstrak dari array itu tanpa benar-benar mengubah array asli.

00:39.480 --> 00:44.970
Jadi rekursi metode penolong adalah salah satu strategi tetapi itu bukan satu-satunya cara kita dapat

00:44.970 --> 00:50.680
melakukannya dengan apa yang disebut rekursi murni yang berarti fungsi itu sendiri benar-benar mandiri dalam rekursif.

00:50.760 --> 00:55.420
Kami tidak memiliki beberapa struktur data eksternal seperti yang kami miliki di sini hasil eksternal hari ini.

00:55.470 --> 00:59.070
Kami tidak melakukan rekursi metode pembantu fungsi bersarang.

00:59.070 --> 01:00.190
Kami tidak melakukan semua itu.

01:00.210 --> 01:02.170
Kita bisa melakukannya dengan rekursi murni.

01:02.220 --> 01:03.840
Itu hanya sedikit lebih menantang.

01:04.080 --> 01:05.180
Jadi, inilah kodenya.

01:05.280 --> 01:09.500
Ini lebih pendek tetapi agak sulit untuk membungkus kepala Anda pada awalnya.

01:09.600 --> 01:12.950
Jadi saya akan menyalin ini dan menunjukkan kepada Anda bahwa itu berhasil.

01:12.960 --> 01:13.780
Kita mulai.

01:13.850 --> 01:17.980
Jika saya menjalankan kode, kumpulkan nilai-nilai kami pada 1 2 3 4 5.

01:18.120 --> 01:20.640
Berhasil kita dapatkan 1 3 dan 5.

01:20.670 --> 01:23.710
Sekarang jika kita berjalan melalui cara kerjanya sedikit berbeda.

01:24.090 --> 01:28.490
Jadi kita mendefinisikan array baru variabel ini setiap kali melalui.

01:28.530 --> 01:33.990
Dan jika Anda ingat di video terakhir apa yang saya katakan adalah jika Anda jika Anda mendefinisikan array baru ini

01:33.990 --> 01:36.640
setiap kali melalui itu akan diatur ulang menjadi kosong.

01:36.870 --> 01:38.060
Dan itu benar.

01:38.130 --> 01:42.920
Ini akan menjadi array kosong setiap kali fungsi dipanggil secara rekursif di sini.

01:42.930 --> 01:46.900
Yang berbeda adalah bahwa kita tidak peduli kita menginginkannya bekerja seperti itu.

01:47.040 --> 01:53.970
Dan apa yang sebenarnya kita lakukan adalah menggabungkan semua array pada bagian paling akhir menjadi satu array dan

01:53.970 --> 01:54.480
mengembalikannya.

01:54.630 --> 01:56.150
Biarkan saya memandu Anda melalui apa yang terjadi.

01:56.160 --> 01:57.420
Ia menerima sebuah array.

01:57.570 --> 01:58.490
Satu dua tiga empat atau lima.

01:58.500 --> 01:59.570
Kita akan mulai dengan itu.

01:59.790 --> 02:02.010
Kemudian kita mendefinisikan array baru menjadi kosong.

02:02.070 --> 02:04.600
Kami memeriksa apakah array yang inputnya kosong.

02:04.680 --> 02:07.440
Ini tidak ada dalam kasus kami, ini adalah 1 2 3 4 5.

02:07.530 --> 02:11.240
Kemudian kami memeriksa apakah angka pertama dalam array kami ganjil.

02:11.610 --> 02:13.170
Dan dalam kasus kami itu.

02:13.170 --> 02:17.610
Jadi kami mendorong nomor satu ke array yang baru.

02:17.610 --> 02:20.300
Jadi pada titik ini array baru kita terlihat seperti ini.

02:20.460 --> 02:21.690
Hanya satu.

02:21.900 --> 02:31.620
Kemudian kita menetapkan array baru untuk sama dengan array baru yang nilai saat ini menyatukan hasil dari mengumpulkan nilai

02:31.620 --> 02:34.170
ganjil pada sisa array.

02:34.170 --> 02:43.950
Jadi array slice 1 jika kita mengambil array ini misalnya 2 3 4 5 slice 1 memberi saya segalanya dari elemen pertama dan seterusnya,

02:43.950 --> 02:49.890
jadi mengabaikan elemen nol atau indeks elemen nol kita mendapatkan tiga empat atau lima.

02:49.910 --> 02:53.000
Jadi laju irisan 1 akan mengambil array ini

02:56.660 --> 02:57.980
seperti itu.

02:58.460 --> 03:01.050
Kumpulkan nilai ganjil dari dua tiga empat lima.

03:01.250 --> 03:05.270
Jadi tentu saja kita sedang menunggu di sini adalah bagian rekursif kita sedang menunggu ini untuk kembali

03:05.270 --> 03:06.100
dan mengembalikan nilai.

03:06.830 --> 03:08.380
Dan itu bisa memakan waktu sebentar.

03:08.390 --> 03:14.990
Jadi ketika kita memanggil diagram ini, kumpulkan nilai-nilai kita 2 tiga empat atau 5 kita membuat array

03:15.220 --> 03:18.060
kosong baru array baru panjangnya tidak nol.

03:18.320 --> 03:20.510
Masih memiliki nilai di dalamnya untuk mereka.

03:20.510 --> 03:21.830
Jadi kami lewati ini.

03:21.830 --> 03:23.620
Angka pertama tidak aneh.

03:23.720 --> 03:24.620
Itu 2.

03:24.740 --> 03:26.900
Jadi kita lewati saja dan jangan tambahkan

03:26.900 --> 03:34.240
Kemudian kita sampai ke baris ini array baru sama dengan array array baru mengumpulkan nilai-nilai aneh array slice

03:34.250 --> 03:37.670
1 sehingga array baru kali ini sebenarnya kosong.

03:37.730 --> 03:38.740
Inilah array baru.

03:38.750 --> 03:39.260
Array baru.

03:39.250 --> 03:41.960
Doc menyetujui hal yang sama.

03:41.960 --> 03:45.070
Kumpulkan nilai ganjil dari array.

03:45.300 --> 03:50.600
Tiga empat lima Maaf jika Anda dapat mendengar suara klakson mobil di luar.

03:50.900 --> 03:52.580
Agak konyol.

03:52.850 --> 03:53.800
Tiga empat lima.

03:53.900 --> 03:56.570
Irisan array ini 1.

03:56.720 --> 04:02.070
Jadi mempercepat sisa dari ini ketika kita menyebutnya lain kali kita menunggu ini mengumpulkan nilai-nilai kita.

04:02.060 --> 04:03.110
Tiga empat lima.

04:03.300 --> 04:04.700
Nah apa yang kembali.

04:04.730 --> 04:10.760
Yah itu akan digabungkan pada array non-kosong kali ini array baru berisi tiga karena

04:10.760 --> 04:12.580
itu nilai pertama ganjil.

04:12.830 --> 04:20.730
Dan kemudian kami menyebutnya bahwa perhatian pada mengumpulkan nilai aneh untuk Khama 5.

04:21.020 --> 04:23.560
Dan kemudian ini berulang saya

04:26.350 --> 04:33.590
hanya akan menyalin ini jadi kali ini array kosong karena nilai pertama adalah genap dan kemudian waktu berikutnya.

04:33.600 --> 04:39.190
Kami hampir sampai di sana berisi lima dan kami mencoba pada array kosong.

04:39.390 --> 04:45.570
Dan akhirnya ketika kita memanggil mengumpulkan nilai-nilai kita dengan array kosong jika kosong kita mengembalikan array baru

04:45.930 --> 04:47.640
atau array baru kosong.

04:47.640 --> 04:51.600
Jadi ini akhirnya mengembalikan nilai ini.

04:51.930 --> 04:53.340
Jadi kita mendapatkan array kosong.

04:53.640 --> 04:54.460
Jadi apa yang terjadi?

04:54.460 --> 05:02.190
Yah ini sedang menunggu untuk menyatukan ini dengan apa pun ini kembali dan ini terjadi untuk mengembalikan

05:02.190 --> 05:03.300
array kosong.

05:03.870 --> 05:04.440
BAIK.

05:04.860 --> 05:09.860
Jadi ketika kita menggabungkan lima dengan array kosong itu hanya 5.

05:10.050 --> 05:12.420
Lalu kami mengembalikan array baru di akhir.

05:12.720 --> 05:17.790
Jadi kami mengembalikan ini sehingga kami dapat mengganti ini di sini dengan itu.

05:17.790 --> 05:22.880
Jadi sekarang kita dapat sekali lagi kita menggabungkan array kosong dengan array ini.

05:23.130 --> 05:26.430
Dan itu akan memberi kita array ini dan kami mengembalikannya.

05:26.430 --> 05:33.700
Jadi di sini kumpulkan nilai ganjil, kembalikan ini dan kami menyatukannya dengan larik yang berisi 3.

05:33.750 --> 05:36.920
Jadi kita berakhir dengan array ini.

05:37.270 --> 05:44.670
Lalu kami mengambil ini dan itu dikembalikan dan kami mengisi di sana dan kami menggabungkannya dengan array kosong.

05:45.160 --> 05:48.920
Yang membuat kita hal yang sama.

05:49.210 --> 05:57.820
Kami mengembalikan itu di sini yang digabungkan dengan ini yang memberi kami nilai pengembalian akhir kami.

05:57.940 --> 06:00.230
Satu koma tiga koma lima.

06:00.220 --> 06:05.110
Jadi sepanjang jalan kita menggunakan concat untuk membantu membangun hasilnya.

06:05.350 --> 06:08.960
Jika kita hanya mencoba mendorong ke array baru berulang kali.

06:09.010 --> 06:11.070
Itu akan dipindahkan sebagai gantinya.

06:11.350 --> 06:19.170
Array baru hanya akan memungkinkan kita untuk menggabungkan apa pun seperti yang Anda lihat lima membangun kembali ini.

06:19.660 --> 06:21.050
Saya tidak akan membiarkan saya kembali.

06:21.190 --> 06:27.160
Yah banyak waktu dengan angka genap kami mengembalikan array kosong atau menggabungkan array kosong

06:27.160 --> 06:32.050
dengan nilai kembali lain yang tidak kosong yang berisi nilai ganjil.

06:32.080 --> 06:34.120
Jadi kami menggunakan concat untuk membantu kami di sini.

06:34.360 --> 06:39.250
Dan ini adalah cara rekursi murni untuk menyelesaikan masalah yang sama.

06:39.250 --> 06:43.500
Saya pikir secara pribadi bahwa rekursi metode pembantu lebih mudah.

06:43.570 --> 06:48.940
Ya itu memang melibatkan Anda tahu kode sedikit lebih banyak untuk membuat metode kedua yang terpisah tapi saya

06:48.940 --> 06:54.520
tidak berpikir itu masalah besar dan ketika Anda mendapatkan logika yang lebih kompleks Anda bekerja dengan logika dan struktur

06:54.520 --> 06:57.970
data yang lebih sulit daripada hanya menarik keluar angka ganjil.

06:58.000 --> 07:00.910
Anda selalu dapat melakukannya dengan menggunakan rekursi murni yang Anda bisa.

07:00.910 --> 07:05.030
Anda tahu Anda bisa membuatnya bekerja tetapi sering saya lebih suka pergi dengan rekursi pembantu.

07:05.080 --> 07:07.190
Tetapi dalam hal ini saya agak suka solusi ini.

07:07.210 --> 07:07.900
Agak lucu.

07:07.960 --> 07:15.130
Lakukan semua concat ini berulang-ulang hanya untuk menunjukkan kepada Anda beberapa tips ketika Anda menggunakan array dan Anda mencoba

07:15.340 --> 07:18.920
untuk melakukan solusi rekursif murni tanpa metode pembantu.

07:18.970 --> 07:24.880
Anda dapat menggunakan metode seperti mengiris operator spread dan Concat yang akan membuat salinan array sehingga Anda

07:24.880 --> 07:25.840
tidak bermutasi.

07:25.840 --> 07:30.790
Dan ini akan memungkinkan Anda juga untuk mengumpulkan semacam hasil.

07:30.790 --> 07:36.160
String tidak dapat diubah sehingga Anda harus menggunakan metode seperti irisan atau substring untuk membuat salinan dan dengan

07:36.190 --> 07:36.780
objek.

07:36.780 --> 07:39.850
Sangat membantu untuk menggunakan objek sebagai tanda atau operator spread.

07:40.120 --> 07:44.910
Jadi kita akan kembali ke ini nanti dalam kursus kita akan menulis beberapa solusi rekursif.
