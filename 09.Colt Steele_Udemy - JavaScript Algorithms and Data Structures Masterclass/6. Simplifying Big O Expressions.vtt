WEBVTT

00:00.210 --> 00:00.580
Baiklah.

00:00.580 --> 00:01.470
Selamat datang kembali.

00:01.470 --> 00:04.950
Jadi sekarang kita akan berbicara lebih banyak tentang penyederhanaan ekspresi O-besar.

00:04.950 --> 00:06.810
Kami sudah melihat sedikit tentang ini.

00:06.850 --> 00:12.900
Saya akan memundurkan beberapa slide kembali jika Anda ingat slide ini di mana kita berbicara tentang bagaimana

00:13.050 --> 00:18.580
menghitung semua operasi yang berbeda ini bisa rumit dan tidak terlalu penting hitungan persisnya.

00:18.630 --> 00:21.620
Yang kami pedulikan hanyalah tren umum.

00:21.740 --> 00:27.380
Jadi kami menyederhanakan ini dari lima dan tambah dua menjadi adil.

00:27.420 --> 00:33.840
Dan kami mengatakan bahwa seiring dan bertambah, runtime akan tumbuh secara proporsional dan tidak masalah apakah itu dua

00:33.840 --> 00:39.930
kali dan atau 10 kali atau seribu kali dan garis tren yang kami gambar pada grafik itu

00:39.930 --> 00:41.060
sebanding dengan N.

00:41.160 --> 00:46.580
Jadi sekarang kita akan berbicara tentang beberapa aturan aktual yang dapat kita gunakan untuk membantu kita ketika menyederhanakan ekspresi ini.

00:46.590 --> 00:50.090
Ada beberapa aturan praktis yang bisa kita ikuti.

00:50.490 --> 00:51.590
Aturan jempol.

00:51.720 --> 00:54.540
Aturan praktis Aturan praktis.

00:54.570 --> 00:54.960
BAIK.

00:55.020 --> 00:59.970
Yang mana pun itu adalah aturan-aturan ini adalah konsekuensi dari definisi big-O.

00:59.970 --> 01:05.210
Sekali lagi kita hanya peduli pada tampilan gambar besar fuzziest terluas.

01:05.370 --> 01:06.740
Jadi konstanta tidak masalah.

01:06.810 --> 01:14.510
Jadi jika kita memiliki sesuatu seperti 0 dari dua n kita menyederhanakannya menjadi lebih dari 0 dari 500.

01:15.150 --> 01:23.220
Sederhanakan bahwa hanya ke 0 dari 1 karena 0 500 hanya ingat bahwa pada dasarnya mengatakan ada 500 operasi setiap kali

01:23.520 --> 01:30.250
apa pun tujuannya dan ke garis yang grafiknya akan datar dan bukannya mengatakan itu akan diperangi pada

01:30.250 --> 01:34.540
500 kita Saya hanya akan menyederhanakannya dengan mengatakan bahwa 0

01:34.540 --> 01:41.030
0 1 itulah bagaimana kita mengatakan sesuatu adalah konstanta waktu run konstan 0 dari 13 dan dikuadratkan.

01:41.350 --> 01:46.900
Yah kita tidak perlu itu konstan kita hanya lakukan dan kuadratkan karena perbedaan ketika kita

01:46.900 --> 01:47.650
melihat ini.

01:47.770 --> 01:53.530
Pada dasarnya jika jika grafik kita mencapai infinity sejauh dan dan kita melihat

01:53.530 --> 02:00.310
perbedaan antara 13 dan kuadrat dan hanya berakhir kuadrat dan seribu kuadrat mereka semua akan terlihat sangat

02:00.310 --> 02:01.270
sangat mirip.

02:01.390 --> 02:04.490
Setelah kami memperpanjang grafik itu ke tingkat itu.

02:04.660 --> 02:06.040
Jadi tidak masalah.

02:06.040 --> 02:10.010
Jadi kita singkirkan itu karena sekarang kita bisa membandingkan ini dan kita tahu itu.

02:10.030 --> 02:13.880
OK ini akan menjadi lebih cepat dari ini dan ini akan menjadi yang paling lambat.

02:13.930 --> 02:20.800
Hanya berdasarkan dari grafik tren fuzzy umum sehingga istilah yang lebih kecil juga tidak masalah.

02:20.800 --> 02:26.700
Konstanta di depan dan tetapi istilah yang lebih kecil seperti ini dan

02:26.710 --> 02:37.330
ditambah 10 hanya menyingkirkan 10 acara sendiri atau dalam hal ini 0 dari 1000 ditambah 50 dapat menyederhanakan itu hanya untuk oven.

02:37.840 --> 02:41.650
Anda tidak membutuhkan konstanta dan kami tidak membutuhkan istilah kecil di akhir.

02:41.950 --> 02:43.070
Dan bagaimana dengan yang ini.

02:43.300 --> 02:45.150
Dan kuadrat ditambah lima dan tambah delapan.

02:45.430 --> 02:51.100
Yah sekali lagi melihatnya dari luar biasa besar seperti bayangkan kita berada di luar angkasa melihat grafik ini dan

02:51.700 --> 02:56.060
kita harus mencari tahu apa yang sebenarnya penting apa tren pada akhir hari.

02:56.140 --> 03:01.030
Lima sepuluh ditambah delapan tidak ada artinya dibandingkan dengan kuadrat akhir.

03:01.150 --> 03:08.680
Ketika Anda berurusan dengan angka seperti jika Anda hanya memasukkan angka seribu lima kali 1005 dan memberikan

03:08.710 --> 03:14.250
hanya 5000 tetapi n kuadrat 1000 kali 1000 adalah 10 juta.

03:14.260 --> 03:15.790
Saya pikir saya melakukan itu dengan benar.

03:15.790 --> 03:22.330
Jadi kita berbicara tentang 10 juta plus lima ribu plus delapan hanya sebagai contoh.

03:22.630 --> 03:28.780
Perbedaan antara 10 juta lima ribu delapan versus 10 juta sangat kecil dan saat itulah kita

03:28.780 --> 03:29.940
pasang 1000.

03:29.940 --> 03:32.080
Tapi sekarang bayangkan kita pasang satu miliar.

03:32.260 --> 03:37.630
Dan perbedaan itu akan menjadi tidak berarti dari pandangan gambaran besar.

03:37.660 --> 03:40.470
Jadi kita cukup menyederhanakannya menjadi 0 dan kuadrat.

03:40.540 --> 03:46.450
Jadi, beberapa hal yang dapat Anda ingat ketika menganalisis kompleksitas dengan hal-hal besar menjadi rumit

03:46.450 --> 03:50.040
dan Anda dapat mencari dan menekankan tentang detail individu.

03:50.350 --> 03:55.450
Tetapi ada beberapa aturan praktis yang dapat membantu dan mereka tidak selalu berhasil tetapi ini adalah titik

03:55.450 --> 03:56.390
awal yang baik.

03:56.410 --> 03:59.730
Yang pertama adalah bahwa operasi aritmatika konstan.

03:59.740 --> 04:04.630
Jadi untuk menambahkan sesuatu atau mengurangi atau membagi dan seterusnya itu akan

04:04.630 --> 04:09.940
menjadi waktu yang konstan tidak masalah ukuran jumlah komputer Anda membutuhkan waktu yang kira-kira

04:09.940 --> 04:15.700
sama untuk melakukan dua ditambah dua seperti halnya satu juta ditambah dua variabel penugasan juga konstan.

04:15.700 --> 04:22.900
Jadi komputer membutuhkan kira-kira jumlah waktu yang sama untuk membuat variabel yang Anda tahu X sama dengan 1000

04:22.900 --> 04:26.540
dibandingkan dengan X sama dengan 20000 atau satu juta.

04:26.590 --> 04:32.830
Ini kira-kira elemen pengakses yang sama dalam array menggunakan indeks.

04:32.830 --> 04:38.670
Jadi jika saya memiliki array dan saya menemukan item pertama atau item kesepuluh selama saya menggunakan indeks

04:38.680 --> 04:45.460
atau saya bekerja dengan suatu objek dan saya memiliki kunci yang saya gunakan untuk mengakses data yang runtime konstan juga.

04:45.460 --> 04:51.760
Aturan selanjutnya adalah bahwa dalam sebuah loop kompleksitas adalah panjang dari loop kali kompleksitas untuk itu apa pun

04:51.820 --> 04:53.860
yang terjadi di dalam loop.

04:53.860 --> 05:00.310
Jadi jika kita bekerja dengan loop yang mengulang daftar atau mengulang seperti yang kita lakukan sebelumnya adalah

05:00.400 --> 05:03.930
jalan untuk berakhir dan tumbuh bahwa loop tumbuh

05:04.000 --> 05:08.920
Tapi kemudian apa pun yang terjadi di dalam loop itu juga konsekuensial karena jika kita memiliki loop bersarang

05:08.920 --> 05:12.790
seperti yang kita lihat, kita akan berakhir dengan runtime kuadrat yang berpotensi berakhir.

05:13.060 --> 05:16.640
Jadi sekali lagi Anda tidak perlu mengingat ini tetapi hanya baik untuk itu.

05:16.770 --> 05:19.150
Saya akan membuangnya di sana agar saya bisa kembali ke mereka.

05:19.570 --> 05:22.270
Jadi mari kita lihat beberapa contoh.

05:22.300 --> 05:23.340
Inilah fungsi baru.

05:23.620 --> 05:25.830
Ini disebut log setidaknya lima.

05:25.920 --> 05:27.210
Dan cukup salin.

05:27.420 --> 05:33.520
Saya menempelkan dan jika saya menyebutnya lulus dan angka seperti 10 dan itu akan login 10 tetapi jika saya pasang satu itu mencetak 1

05:34.390 --> 05:35.740
2 3 4 atau 5.

05:35.740 --> 05:41.810
Jadi yang dilakukannya hanyalah mencetak angka hingga N tetapi minimal mencetak 1 2 3 4 5.

05:42.100 --> 05:47.980
Jadi, jika saya berikan tiga, kami masih mendapat lima, tetapi jika saya beri tujuh, kami mendapat tujuh yang dicetak satu dua tiga empat

05:47.980 --> 05:48.840
lima enam tujuh.

05:49.000 --> 05:51.180
Jadi, apa O besar di sini.

05:51.250 --> 05:52.880
Bagaimana kita mengkategorikan ini.

05:52.900 --> 06:01.110
Jadi kita memiliki satu loop dan loop ini akan berubah dari 1 menjadi lima atau akhir mana saja yang lebih besar.

06:01.570 --> 06:07.750
Jadi kita bisa khawatir tentang lima tetapi kita hanya perlu khawatir tentang itu karena kecil.

06:07.750 --> 06:11.030
Dan yang kita pedulikan adalah apa yang terjadi dan tumbuh lebih besar.

06:11.110 --> 06:14.880
Jadi itu dan terus tumbuh dan tumbuh dan tumbuh menuju tak terbatas.

06:15.120 --> 06:17.120
Apa yang terjadi pada runtime.

06:17.320 --> 06:21.050
Nah, jika dan 10 juta loop ini akan berjalan 10 juta kali.

06:21.050 --> 06:22.990
Kelima ini tidak masalah.

06:22.990 --> 06:30.040
Jadi kita bisa menyederhanakan ini dan mengatakan bahwa O besar ini sudah berakhir dan karena ini dan tumbuh

06:30.040 --> 06:32.890
jumlah operasi tumbuh sebanding dengan N.

06:33.160 --> 06:34.310
Jadi ini satu lagi.

06:34.330 --> 06:38.980
Ini adalah log sebaliknya paling banyak 5 disisipkan di.

06:38.980 --> 06:45.500
Dan jika saya mencoba berharap di sana kita pergi paling banyak 5 jika saya memasukkan 30 itu masih hanya memberi saya 5.

06:45.520 --> 06:46.710
Saya pasang 3.

06:46.780 --> 06:47.740
Itu memberi saya tiga.

06:47.740 --> 06:52.420
Jadi itu akan mengambil apa pun yang lebih kecil jika saya memberikannya dalam jumlah besar itu akan jika

06:52.420 --> 06:57.590
lebih besar dari 5 itu hanya akan login 5 jika saya memberikannya sesuatu yang kurang dari 5 maka ia akan login.

06:57.760 --> 06:58.780
Oh, ini juga penting.

06:58.870 --> 07:00.570
Hanya dengan angka positif.

07:00.570 --> 07:03.020
Jika saya berikan nol, itu tidak melakukan apa-apa.

07:03.270 --> 07:09.550
Dan itu penting untuk dicatat karena ketika n tumbuh di sini itu tidak masalah karena kita

07:09.550 --> 07:12.040
akan mengambil min yang lima.

07:12.040 --> 07:18.130
Jadi jika Enge mendekati seribu loop ini berjalan lima kali dan mendekati satu juta loop berjalan lima

07:18.130 --> 07:22.960
kali jika ada untuk maka loop berjalan dua kali dan tiga kali.

07:23.050 --> 07:29.910
Jadi grafik akan benar-benar terlihat seperti Anda tahu dua dan kemudian tiga dan kemudian lima dan kemudian dikatakan statis pada

07:29.920 --> 07:35.740
5 dan kita dapat menyederhanakannya dengan mengatakan bahwa itu adalah akhir bruto yang kita pedulikan tentang O

07:35.740 --> 07:38.490
besar ini hanya konstan itu 0 1.

07:38.680 --> 07:43.590
Jadi, bukannya 0 5 Ingat kita bisa menyederhanakannya dan mengatakan Oh untuk satu.

07:43.690 --> 07:50.060
Jadi, jika kita merencanakan kedua hal ini dari apa yang kita lihat tren umum adalah sesuatu seperti ini di mana saya

07:50.230 --> 07:54.790
lupa memiliki semua transisi kecil itu kita bisa mengabaikan semua yang lain ini kita belum

07:54.790 --> 07:56.850
membicarakan hal-hal seperti log dan login

07:57.100 --> 08:03.990
Tapi apa yang saya lakukan di sini hanyalah menempatkan mereka semua dalam sebuah grafik sehingga kita dapat melihat pertama-tama 0 1 adalah sebuah

08:04.960 --> 08:08.400
flightline dan itu bagus jika kita dapat memiliki runtime satu.

08:08.410 --> 08:14.200
Itu fantastis untuk memiliki runtime konstan itu cukup langka ketika kita berhadapan dengan beberapa algoritma

08:14.230 --> 08:21.130
yang lebih maju seperti n itu ok Anda dapat melihat lintasan umum itu jauh lebih baik daripada sesuatu

08:21.130 --> 08:23.410
seperti runtime kuadratik dan kuadrat.

08:23.560 --> 08:30.220
Jadi ketika kita memiliki sesuatu seperti log setidaknya lima sebagai dan tumbuh ke arah ini runtime juga akan tumbuh dan

08:30.220 --> 08:37.300
ketika kita memiliki paling banyak 5 yang kedua yang kita katakan memiliki runtime konstan dan tumbuh begitu kita melewati yang pertama

08:37.300 --> 08:43.360
kecil dua tiga empat begitu kita melewati empat pertama dan kita mendekati tak terbatas dan itu akan

08:43.620 --> 08:47.640
selalu menjadi 5 yang baru saja kita katakan dan selalu konstan.

08:47.680 --> 08:53.570
Jadi saya tahu bahwa ini banyak dan beberapa dari Anda mungkin berjuang dengan itu dan

08:53.590 --> 08:59.710
itulah yang diharapkan yang saya pikir paling penting untuk maju adalah bahwa jika saya mengatakan sesuatu seperti

08:59.710 --> 09:07.210
algoritma ini, yang baru saja kami tulis memiliki runtime dari peristiwa oh kuadrat bahwa Anda dapat mengidentifikasi bahwa itu tidak

09:07.210 --> 09:08.500
sebagus Of end.

09:08.500 --> 09:13.180
Sebagai contoh dan saya dapat menunjukkan kepada Anda bagan ini tetapi saya hanya berharap Anda dapat

09:13.180 --> 09:17.650
memahami setelah bagian akhir kita belum selesai tetapi pada akhir bagian apa artinya ketika

09:17.650 --> 09:24.590
saya mengatakan bahwa ada sesuatu yang 0 0 dari dan atau 0 dari satu runtime konstan dan bagaimana yang membandingkan dengan beberapa opsi lainnya.

09:24.790 --> 09:26.670
Dan seperti yang saya katakan kita belum membahas semua ini.

09:26.710 --> 09:27.880
Jadi kita akan sampai di sana.

09:28.780 --> 09:31.850
Selanjutnya beberapa latihan menyederhanakan ekspresi.
