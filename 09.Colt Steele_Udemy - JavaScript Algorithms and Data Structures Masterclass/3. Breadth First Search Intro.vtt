WEBVTT

00:00.150 --> 00:00.540
Baiklah.

00:00.540 --> 00:01.400
Selamat datang kembali.

00:01.590 --> 00:07.200
Jadi dalam video terakhir yang saya sebutkan ada dua strategi utama untuk melintasi pencarian pohon luas

00:07.340 --> 00:14.910
pertama untuk FS dan pencarian pertama mendalam DFS dan ini hanya merujuk pada semacam urutan umum bahwa kita bahwa kita mengunjungi hal-hal

00:14.910 --> 00:21.510
yang akan kita prioritaskan mengunjungi semua node pada tingkat yang sama sebelum kita bergerak ke bawah atau apakah kita ingin

00:21.510 --> 00:26.270
bekerja dengan cara yang lebih vertikal yang merupakan kedalaman pertama yang begitu cepat.

00:26.400 --> 00:31.770
Apa yang kita mulai dengan pencarian pertama hanya berarti kita ingin mengunjungi setiap node pada level

00:31.770 --> 00:35.150
yang sama setiap node saudara sebelum kita melihat seorang anak.

00:35.550 --> 00:43.830
Jadi bagi kami urutan pohon ini akan terlihat seperti 10 6 15 3 8 20 dan kemudian kami akan terus berjalan jika ada lebih banyak

00:43.830 --> 00:46.300
dari kiri ke kanan dalam kasus kami.

00:46.500 --> 00:48.960
Tetapi bagian itu tidak begitu penting dari kiri ke kanan.

00:49.020 --> 00:52.070
Yang lebih penting adalah kami bekerja secara horizontal.

00:52.110 --> 00:56.140
Sekarang saya yakin Anda bertanya-tanya mengapa Anda menggunakan ini dibandingkan yang lain.

00:56.220 --> 00:58.740
Mengapa ada semua perintah yang berbeda ini mengapa kita mempelajari hal ini.

00:58.740 --> 01:03.510
Saya akan membicarakannya dalam video mandiri yang terpisah begitu kita membahas berbagai pendekatan yang berbeda.

01:03.630 --> 01:08.280
Mengapa Anda akan menggunakan satu versus yang lain karena agak sulit untuk membicarakannya sebelum

01:08.280 --> 01:11.610
Anda memiliki konteks algoritma lain dan bagaimana mereka bekerja.

01:11.610 --> 01:15.840
Jadi untuk saat ini saya hanya akan menyinggung itu dan mengatakan saya akan mengajar mereka jika Anda memiliki

01:15.840 --> 01:16.590
pertanyaan tentang mengapa.

01:16.860 --> 01:18.440
Tunggu saja, kurasa.

01:18.450 --> 01:21.410
Anda tahu secara teknis ini adalah video sehingga Anda harus menunggu.

01:21.430 --> 01:23.220
Tapi bertahanlah di sana.

01:23.220 --> 01:28.200
Satu hal yang akan saya sebutkan adalah perlu diingat ini adalah pohon biner kecil tetapi kita

01:28.200 --> 01:33.030
mungkin bekerja dengan pohon yang sangat dalam dan sempit atau sesuatu yang sangat lebar.

01:33.030 --> 01:34.290
Tidak harus berupa pohon biner.

01:34.290 --> 01:37.690
Kita dapat berbicara tentang setiap node memiliki 100 anak.

01:37.890 --> 01:42.720
Jadi pendekatan yang berbeda ini strategi yang berbeda ini benar-benar berdampak tergantung pada bagaimana

01:42.720 --> 01:45.470
pohon itu terlihat seperti bagaimana data didistribusikan.

01:45.510 --> 01:49.170
Pokoknya itu cukup tentang pendekatan umum agar cepat.

01:49.440 --> 01:50.940
Mari kita bahas secara spesifik.

01:50.940 --> 01:53.170
Bagaimana kita menerapkan ini untuk melakukan itu.

01:53.190 --> 01:54.620
Kita akan memanfaatkan.

01:54.630 --> 01:59.310
T Jadi saya tidak merekomendasikan membuat kelas Q Anda sendiri dan melalui semua itu.

01:59.340 --> 02:04.570
Cukup gunakan daftar atau larik untuk memodelkan Q yang jika Anda tidak menonton bagian atau Anda tidak ingat.

02:04.590 --> 02:07.650
Ini adalah struktur pertama keluar pertama.

02:07.650 --> 02:14.670
Jadi jika kita menggunakan array atau daftar sederhana, Anda bisa menggunakan push untuk menambahkan sesuatu dan kemudian bergeser untuk menghapus dari awal

02:14.670 --> 02:19.290
sehingga apa pun yang ditambahkan terlebih dahulu selalu merupakan hal pertama yang keluar.

02:19.290 --> 02:20.680
Jadi, inilah pendekatan dasar kita.

02:20.760 --> 02:22.450
Kita akan memiliki dua variabel.

02:22.470 --> 02:27.960
Kita akan memiliki Q untuk membantu kita melacak hal-hal dan kemudian kita akan membangun daftar data untuk

02:27.960 --> 02:30.240
kembali pada akhirnya ke tujuan akhir kita.

02:30.240 --> 02:34.980
Jika ini adalah pohon kami dan kami sedang melakukan pencarian pertama ini, kami ingin mengembalikan ini

02:34.980 --> 02:37.470
di akhir antrian kami di akhir akan kosong.

02:37.470 --> 02:39.430
Jadi antrian hanya untuk membantu kami keluar.

02:40.020 --> 02:43.340
Jadi ide utama kami adalah mengambil rute yang kami tambahkan ke antrian.

02:43.830 --> 02:50.160
Kemudian kita mengulang selama ada sesuatu dalam antrian dan kita mengeluarkan simpul dari kubus yang jika

02:50.160 --> 02:54.170
Anda menggunakan array hanya berarti bergeser dari awal federasi.

02:54.390 --> 03:00.120
Ambil simpul itu dan kami tambahkan ke nilai pengembalian kami daftar yang akan kami kembalikan di akhir.

03:00.510 --> 03:06.210
Dan kemudian kami memeriksa apakah ada kiri pada simpul itu dan kami menambahkan ke antrian jika ada maka kami

03:06.210 --> 03:11.310
memeriksa apakah ada tingkat dan kami menambahkan ke antrian jika ada dan kemudian kami kembali di akhir

03:11.310 --> 03:14.340
setelah loop mengembalikan variabel. yang menyimpan semua nilai kami.

03:14.340 --> 03:18.130
Jadi jika itu terdengar membingungkan adalah jika kita tidak melihatnya secara visual.

03:18.150 --> 03:20.440
Jadi mari kita telaah sebentar ini.

03:20.580 --> 03:21.340
Jadi saya harus.

03:21.350 --> 03:27.210
Ini tidak benar-benar dalam bahasa pemrograman tetapi saya memiliki isyarat bahwa saya melacak dan kemudian mengunjungi hal

03:27.210 --> 03:33.200
ini struktur yang pada akhirnya saya akan mengembalikan daftar ini atau array data ini dan kami akan

03:33.270 --> 03:33.890
kosong.

03:33.990 --> 03:37.050
Jadi kita mulai di dalam root dan kita tambahkan 10 ke antrian kami.

03:37.050 --> 03:43.680
Ini seperti daftar hal-hal baik yang perlu kita lakukan adalah mulai melakukan daftar dan kemudian kita mulai lingkaran kita yang hanya

03:43.680 --> 03:48.800
mengatakan sementara ada sesuatu dalam antrian sehingga antrian kita memiliki sesuatu yang akan kita keluarkan.

03:49.050 --> 03:53.970
Kami akan menambahkannya ke daftar yang kami kunjungi dan kemudian kami akan memeriksa apakah ada yang tersisa.

03:54.000 --> 03:54.840
Apakah ada kiri?

03:54.870 --> 03:55.500
Iya nih.

03:55.500 --> 03:57.050
Jadi kami menambahkannya ke antrian.

03:57.210 --> 03:57.720
Lalu kita periksa.

03:57.720 --> 03:58.660
Apakah benar

03:58.830 --> 03:59.460
Iya nih.

03:59.580 --> 04:06.180
15 jadi kami menambahkan itu ke antrian kemudian loop dimulai dan kami menghapus hal pertama dari antrian hal pertama

04:06.210 --> 04:08.020
dan hal pertama yang keluar.

04:08.040 --> 04:15.200
Jadi kami mengambil enam dan sekarang kami menambahkannya ke daftar kami yang kami kunjungi kami telah mengunjungi enam.

04:15.270 --> 04:17.120
Sekarang kita periksa apakah ada yang tersisa.

04:17.130 --> 04:18.340
Iya nih.

04:18.420 --> 04:19.580
Jadi kita akan menambahkannya.

04:19.590 --> 04:20.920
Jadi itu memberi kita tiga.

04:20.970 --> 04:22.000
Apakah ada yang benar?

04:22.140 --> 04:23.130
Iya nih.

04:23.130 --> 04:25.900
Jadi kita tambahkan 8 dan kemudian selesai.

04:25.920 --> 04:26.690
Kami memulai dari awal.

04:26.760 --> 04:27.510
Kita belum selesai.

04:27.510 --> 04:28.700
Kami sudah selesai dengan enam.

04:29.040 --> 04:30.590
Dan sekarang kita ambil 15.

04:30.660 --> 04:35.700
Jadi mudah-mudahan Anda dapat melihat sudah pola ini kan kita akan tingkat ini selesai daripada tingkat ini tingkat

04:35.910 --> 04:40.840
ini dan kami sedang membuat antrian ini untuk membantu kami mengingat hal-hal yang perlu datang berikutnya.

04:40.980 --> 04:46.480
Tetapi kami tidak akan mengunjungi mereka berikutnya atau menunggu untuk mengunjunginya sampai kami menyelesaikan level horizontal

04:46.500 --> 04:48.270
pencarian pertama yang luas.

04:48.300 --> 04:56.340
Jadi kami mengambil 15 dan kami menambahkannya ke daftar kami yang kami kunjungi dan akan memeriksa jika ada kiri apakah tidak

04:56.560 --> 04:57.220
ada.

04:57.360 --> 04:58.180
Apakah ada yang benar?

04:58.230 --> 04:59.110
Iya nih.

04:59.130 --> 05:08.320
Jadi kami menambahkan Ian dan kemudian mulai lagi dari kami mengambil tiga jam dan kami terus berjalan sehingga tidak ada kiri tidak benar.

05:08.340 --> 05:10.070
Kami tidak menambahkan apa pun ke antrian.

05:10.070 --> 05:11.100
Hal yang sama dengan delapan.

05:11.120 --> 05:12.090
Kami mengambil delapan.

05:12.170 --> 05:13.790
Tidak ada kiri, tidak kanan.

05:13.890 --> 05:14.740
Jadi kami punya itu.

05:14.780 --> 05:16.570
Lalu kita mencapai 20.

05:16.700 --> 05:21.570
Sekarang antrian kosong yang merupakan bagaimana kita tahu kita sudah selesai dan kita mengembalikan nilai ini di akhir.

05:21.740 --> 05:26.950
Ini adalah napas pertama kami pencarian 10 6 15 3 8 dan 20.

05:26.990 --> 05:28.390
Beginilah cara kami melewatinya.

05:28.400 --> 05:30.170
Ini adalah urutan yang kami kunjungi.

05:30.230 --> 05:33.590
Jadi kami mengambil keuntungan dari isyarat untuk hanya menyimpannya seperti daftar Tugas.

05:33.620 --> 05:39.170
Jangan lupa comeback ini, tetapi kami mengambil hal-hal dari awal dan kami menambahkan sampai akhir hal pertama itu

05:39.170 --> 05:41.040
adalah hal pertama yang keluar.

05:41.180 --> 05:43.960
Semoga penjelasan itu masuk akal.

05:44.000 --> 05:46.790
Kode pseudo cukup jelas menurut saya.

05:46.790 --> 05:50.910
Jadi coba dan ikuti ini dan berikan foto terbaik Anda di video berikutnya.

05:50.920 --> 05:51.700
Saya punya solusi.
