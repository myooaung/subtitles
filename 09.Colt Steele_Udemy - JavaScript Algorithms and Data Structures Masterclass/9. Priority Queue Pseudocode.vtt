WEBVTT

00:00.210 --> 00:00.630
Baiklah.

00:00.630 --> 00:05.220
Jadi jika Anda ingin mencoba dan mengimplementasikan kelas antrian prioritas menggunakan apa yang telah kami

00:05.220 --> 00:07.580
pelajari tentang tumpukan biner, itu sangat mirip.

00:07.590 --> 00:10.580
Kami hanya perlu mengubah perbandingan menjadi sedikit kecil.

00:10.770 --> 00:12.600
Jadi buatlah kelas yang disebut antrian prioritas.

00:12.600 --> 00:18.030
Pada dasarnya Anda hanya bisa mengganti nama kelas tumpukan biner Anda cukup salin sehingga Anda bisa jika Anda ingin menyimpan

00:18.030 --> 00:18.840
yang asli.

00:18.840 --> 00:20.570
Ubah ke antrian prioritas.

00:20.610 --> 00:25.200
Kami masih menyimpan daftar nilai dan hanya itu yang kami butuhkan secara struktural selain dari semua metode yang

00:25.770 --> 00:29.190
kami butuhkan untuk menyimpan nilai sehingga tidak berubah benar-benar terlepas dari namanya.

00:29.570 --> 00:34.500
Yang berbeda adalah kita tidak hanya menyimpan angka seperti dulu di mana kita menyimpan

00:34.500 --> 00:38.240
angka dan kita hanya menggunakan nilai angka dan membandingkannya.

00:38.280 --> 00:42.170
Kami tidak memiliki kelas kami tidak memiliki item individual yang kami simpan.

00:42.360 --> 00:48.840
Kami memiliki angka tetapi kami tidak memiliki kelas sekunder seperti simpul yang akan kami tuju dengan antrian

00:48.840 --> 00:54.850
prioritas kami karena sekarang setiap elemen memiliki nilai atau setiap node memiliki nilai dan prioritas.

00:54.930 --> 00:57.320
Ups, saya mungkin mengeja ini dengan benar.

00:57.410 --> 00:58.540
Aku rasa itu benar.

00:58.540 --> 01:02.200
Saya keliru mengira saya berbicara salah.

01:02.250 --> 01:06.530
Jadi kita memiliki kelas simpul ini dan setiap simpul akan terlihat seperti ini.

01:06.540 --> 01:09.720
Kami memiliki nilai yang bisa berupa string, bisa berupa angka, bisa juga yang lain.

01:09.750 --> 01:12.910
Tidak masalah karena kami tidak menggunakan nilai untuk membandingkan.

01:12.930 --> 01:14.820
Kami hanya menggunakan prioritas.

01:15.120 --> 01:20.790
Jadi setiap node memiliki prioritas dan itulah nilai yang kita gunakan ketika kita benar-benar membangun dan mengatur ulang

01:20.790 --> 01:21.150
heap.

01:21.150 --> 01:25.960
Jika sesuatu dimasukkan, kami akan membandingkan prioritasnya dengan prioritas elemen lainnya.

01:26.100 --> 01:29.380
Setelah kita menghapus sesuatu dari atas, kita perlu tenggelam.

01:29.490 --> 01:31.430
Anda tahu elemen baru ke tempat yang benar.

01:31.500 --> 01:34.080
Kita akan membandingkan menggunakan prioritasnya.

01:34.080 --> 01:40.550
Juga hanya untuk beberapa variasi di sini kita akan mengimplementasikan tumpukan biner min daripada maks.

01:40.560 --> 01:44.800
Kami telah melakukan segalanya sebagai emacs sesering dalam kasus rumah sakit.

01:44.820 --> 01:51.520
Juga dengan cara Unix nilai bagus bekerja, nilai yang lebih rendah akan dilayani terlebih dahulu.

01:51.540 --> 01:54.880
Jadi dalam hal ini prioritas adalah prioritas tertinggi.

01:55.110 --> 01:58.280
Dua adalah prioritas menengah tiga adalah prioritas rendah.

01:58.440 --> 02:03.900
Jadi di rumah sakit setidaknya beberapa yang pernah saya kunjungi untuk keadaan darurat paling kritis adalah Level

02:03.900 --> 02:09.000
0 level 1 dan yang paling atau paling tidak kritis atau level 5 atau semacamnya.

02:09.010 --> 02:13.650
OK jadi kami memiliki dua kelas sekarang kelas antrian prioritas dan kelas simpul.

02:13.680 --> 02:17.210
Setiap node memiliki nilai yang tidak penting untuk apa yang kita lakukan.

02:17.220 --> 02:21.000
Kami hanya perlu menginisialisasi dan prioritas dan itu penting.

02:21.030 --> 02:23.340
OK jadi begini caranya.

02:23.370 --> 02:28.140
Tulislah tumpukan biner min jadi semua itu berarti menjadikannya tumpukan min Anda akan perlu mengubah

02:28.140 --> 02:29.340
sedikit perbandingan itu.

02:29.400 --> 02:34.440
Di mana di masa lalu kami bertukar hal-hal jika satu hal lebih besar dari sesuatu yang sekarang kami bertukar

02:34.440 --> 02:36.540
jika satu hal kurang dari atau sebaliknya.

02:36.960 --> 02:38.460
Kalau tidak, itu ide yang sama.

02:38.460 --> 02:40.940
Jadi setiap node memiliki nilai dalam prioritas.

02:41.130 --> 02:44.000
Gunakan prioritas untuk membangun heap ketika sesuatu dimasukkan.

02:44.010 --> 02:50.460
Bandingkan prioritas saat sesuatu dihapus Hapus prioritas lalu ke metode daripada metode

02:50.460 --> 02:52.940
memasukkan dan ekstrak Max.

02:53.110 --> 02:56.920
Kita akan Riskin mereka sebagai NQ dan dequeue.

02:57.030 --> 03:02.760
Jujur penamaannya tidak terlalu penting tetapi Anda perlu mengubah kode Anda adalah bahwa ketika Anda memasukkan sesuatu

03:02.760 --> 03:07.080
yang sudah disebutkan Anda membandingkan prioritas eval Anda tidak membandingkan nilai elemen

03:07.080 --> 03:08.120
itu sendiri.

03:08.140 --> 03:13.260
Anda membandingkan prioritas ketika Anda menghapus sesuatu yang akan Anda hapus dari root heap.

03:13.260 --> 03:18.330
Hal tingkat atas yang merupakan teknis tertinggi adalah angka terendah tetapi prioritas tertinggi.

03:18.330 --> 03:24.090
Kami menghapus itu dan kemudian kami harus Anda tahu bahwa kami menukar dengan elemen terakhir yang kami miliki tenggelam

03:24.090 --> 03:25.490
atau meresap ke bawah.

03:25.560 --> 03:27.360
Bandingkan dengan menggunakan prioritas.

03:27.360 --> 03:28.500
Jadi itulah tujuan kami.

03:28.500 --> 03:30.590
Cobalah di video berikutnya.

03:30.600 --> 03:34.560
Saya hanya akan mengambil kode yang sudah kami tulis dan mengubahnya sehingga Anda tidak perlu

03:34.560 --> 03:38.330
melihat saya bahwa Anda tahu merekonstruksi seluruh tumpukan lebih dari setengah jam kode.

03:38.340 --> 03:42.820
Kami hanya akan mengambil apa yang telah kami lakukan dan hanya membalikkannya sedikit untuk menjadikannya antrian prioritas.
