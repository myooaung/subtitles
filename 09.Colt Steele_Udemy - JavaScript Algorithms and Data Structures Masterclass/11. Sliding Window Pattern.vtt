WEBVTT

00:00.240 --> 00:00.570
Baiklah.

00:00.570 --> 00:01.430
Selamat datang kembali.

00:01.440 --> 00:04.460
Pola selanjutnya kita akan berbicara tentang itu disebut jendela geser.

00:04.530 --> 00:10.200
Jadi ini sangat berguna ketika kita memiliki satu set data seperti array atau string lagi dan

00:10.200 --> 00:14.730
kami sedang mencari subset dari data yang kontinu dalam beberapa cara.

00:14.730 --> 00:17.480
Jadi misalnya di sini adalah string.

00:17.640 --> 00:22.980
Dan jika saya meminta Anda untuk menulis fungsi untuk menemukan urutan karakter unik terpanjang.

00:23.280 --> 00:24.810
Jadi, Anda tahu Anda akan mulai.

00:24.960 --> 00:25.430
Ayo lihat.

00:25.470 --> 00:32.140
Yah kita punya HGL itu adalah tiga karakter unik berturut-turut tapi kemudian kita tekan L lain di sini.

00:32.160 --> 00:35.750
Jadi ini yang terpanjang yang kita miliki sejauh ini.

00:35.820 --> 00:37.510
Tidak hanya itu yang tidak akan berhasil.

00:37.560 --> 00:44.970
Jadi kita bisa melihat L O T H E R dan sepertinya itu akan menjadi string terpanjang dari karakter

00:44.970 --> 00:45.860
unik kami.

00:46.020 --> 00:49.700
Kecuali aku kehilangan akal di sini karena kita akan mencapai malam ini.

00:49.740 --> 00:54.800
Jadi bagaimanapun ini adalah salah satu contoh masalah yang bisa kita pecahkan dengan pendekatan sliding window.

00:54.930 --> 01:00.300
Yang lain saya akan tunjukkan harus dilakukan dengan mencari jumlah subarray max.

01:00.600 --> 01:03.690
Jadi kami mengirimkan array seperti ini.

01:03.690 --> 01:09.660
Dan kemudian angka dan kami mencoba untuk menemukan jumlah maksimum dua digit yang bersebelahan atau

01:09.660 --> 01:12.890
dalam hal ini empat angka yang bersebelahan.

01:12.930 --> 01:19.440
Jadi ini akan berubah 10 karena dua digit di sebelah satu sama lain yang memiliki jumlah terbesar adalah

01:19.440 --> 01:23.280
delapan menjadi 10 dan itu akan segera kembali ke ini.

01:23.280 --> 01:30.330
Jadi yang kita lakukan adalah membuat jendela yang bisa berupa variabel tunggal atau bisa berupa sub array atau bahkan string lain

01:30.330 --> 01:31.460
jika Anda mau.

01:31.620 --> 01:33.820
Dan kami memindahkan jendela itu tergantung kondisinya.

01:33.870 --> 01:36.530
Kami menggesernya ke atas dari kiri ke kanan.

01:36.540 --> 01:40.690
Jika kita mulai dari awal, Anda bisa pergi dari kanan ke kiri, Anda bisa mulai dari tengah.

01:40.770 --> 01:43.120
Tapi biasanya kita memindahkan jendela dari kiri.

01:43.290 --> 01:46.870
Awal elemen atau awal array atau string menjelang akhir.

01:47.220 --> 01:49.160
Dan kadang-kadang Anda mungkin membuat jendela baru.

01:49.230 --> 01:50.960
Jadi saya akan menunjukkan kepada Anda apa artinya itu.

01:50.960 --> 01:57.830
Tapi itu berguna dalam masalah ini di mana kita melacak subset data dalam kumpulan data yang lebih besar.

01:57.840 --> 01:59.080
Jadi kembalilah ke masalah ini.

01:59.160 --> 02:04.400
Kanan fungsi yang disebut Max jumlah subarray yang menerima array bilangan bulat dan nomor yang disebut.

02:04.410 --> 02:07.120
Dan itu tidak harus diurutkan array.

02:07.170 --> 02:10.090
Ini hanyalah sembarang bilangan bulat dalam array.

02:10.230 --> 02:15.120
Dan kemudian kita lulus dan angka kedua sudah disebutkan dan fungsi Anda

02:15.120 --> 02:18.950
harus menghitung jumlah maksimum elemen berturut-turut dalam array itu.

02:19.110 --> 02:24.390
Jadi, apa pun yang kami lewati di sini, seperti yang ditunjukkan Erda, kalian berdua harus mengembalikan 10 karena 8

02:24.390 --> 02:27.110
dan 2 adalah jumlah terbesar dari dua angka berurutan.

02:27.120 --> 02:28.330
Di sini kita punya empat.

02:28.560 --> 02:34.520
Nah, jumlah terbesar dari empat angka yang kita tahu di 17 dan saya percaya itu.

02:34.560 --> 02:36.280
Saya pikir ini empat benar.

02:36.320 --> 02:37.840
Itu tujuh delapan sembilan ya.

02:37.890 --> 02:44.100
17 dan sudah dekat karena ada yang tahu subarray ini di sini memberi kita 16 saya percaya.

02:44.170 --> 02:51.930
Jadi benar dan kita punya yang ini di sini yang juga memberi kita 16 tetapi yang ini adalah jumlah terbesar

02:51.930 --> 02:55.320
dari empat angka berturut-turut terus menerus yaitu 70.

02:55.530 --> 02:59.740
Anda juga tahu kasus tepi jika kosong harus mengembalikan NULL.

02:59.880 --> 03:00.930
Itulah masalahnya.

03:01.110 --> 03:03.420
Dan untuk mengatasinya ada beberapa pendekatan.

03:03.420 --> 03:09.180
Tentu saja versi naif, versi sederhana pada dasarnya dimulai di sini.

03:09.390 --> 03:14.970
Mari kita benar-benar pergi dengan contoh ini untuk memulai di sini dalam satu lingkaran dan kemudian memiliki loop kedua

03:14.970 --> 03:20.330
yang melihat ke depan dan menumpuk bersama empat item dan Anda membuat variabel untuk melacak jumlah itu.

03:20.340 --> 03:21.210
Jadi apa itu?

03:21.390 --> 03:23.680
Itu akan memberi kita 7 8 9 10.

03:23.790 --> 03:30.990
Jadi kita akan mulai dengan itu dan kemudian kita bergerak maju 1 dan kita memiliki jumlah baru mulai dari sini dan kita tambahkan keempat

03:30.990 --> 03:36.030
ini bersama-sama menggunakan loop lain dan kemudian kita membandingkannya dengan jumlah yang kita miliki sebelum kita

03:36.030 --> 03:39.120
mengambil yang maksimum dan kita melacak apa pun maksimumnya.

03:39.390 --> 03:42.830
Dan kemudian kita akan bergerak maju dari sini dan mencoba dengan putaran kedua.

03:42.860 --> 03:44.200
Satu dua tiga empat.

03:44.340 --> 03:48.600
Beberapa yang bersama dan kami terus melakukan itu dan saya punya solusi di sini.

03:49.080 --> 03:52.840
Jadi saya akan menyalinnya dan mari kita cepat berjalan melewatinya.

03:53.100 --> 03:57.750
Ketika kita menyebutnya hal pertama yang kita lakukan adalah memastikan sekali lagi kasing tepi.

03:57.900 --> 04:02.370
Jika angkanya lebih besar dari panjang array jika kita mencoba menemukan jumlah terbesar dari

04:02.370 --> 04:07.020
tiga bilangan bulat berturut-turut dan hanya ada dua di sana atau nol kita hanya mengembalikan no.

04:07.290 --> 04:09.030
Kalau tidak, kita membuat Max.

04:09.300 --> 04:14.640
Dan saya memulainya pada infinity negatif karena saya ingin menjelaskan jika kita memiliki array yang semuanya

04:14.640 --> 04:15.390
angka negatif.

04:15.390 --> 04:17.370
Jumlah terbesar kami masih akan negatif.

04:17.370 --> 04:20.540
Jadi memulainya dari nol tidak terlalu membantu kami.

04:20.550 --> 04:22.640
Kami hanya bekerja dengan jumlah positif.

04:22.680 --> 04:24.030
Jadi saya melakukan infinity negatif.

04:24.030 --> 04:25.400
Itu bukan masalah besar.

04:25.410 --> 04:29.350
Jadi apa yang kita lakukan saya harus menyebutkan kita mengambil array dan angka.

04:29.370 --> 04:32.340
Ini adalah jumlah digit yang kami coba jumlahkan.

04:32.760 --> 04:36.080
Dan saya membuat loop sehingga loop ini dimulai pada 0.

04:36.120 --> 04:41.100
Itu berjalan sampai akhir array akan hampir ke akhir array dan saya akan menunjukkan di mana

04:41.100 --> 04:42.330
ia benar-benar pergi.

04:42.330 --> 04:50.180
Apa yang kami lakukan di sini adalah jika kami melihat tiga digit berturut-turut, kami akan mulai di sini dan menambahkan

04:50.190 --> 04:53.400
tiga dan kemudian menambahkan tiga dan terus berjalan.

04:53.670 --> 04:58.370
Dan kami tidak ingin melanjutkan sampai akhir dan mencoba dan menambahkan tiga atau lebih dua digit bersama.

04:58.650 --> 05:00.010
Kami tidak ingin pergi ke sini.

05:00.020 --> 05:04.220
Kami ingin berhenti di sini sehingga kami mencapai ujung array dengan putra kami.

05:04.220 --> 05:09.050
Ini adalah tempat terakhir yang bisa kita mulai adalah beberapa yang masuk akal jika kita mencari tiga digit

05:09.050 --> 05:10.410
jika kita mencari lima digit.

05:10.460 --> 05:12.250
Ini adalah tempat terakhir yang bisa kita mulai.

05:12.560 --> 05:14.180
Jadi itulah yang dilakukan di sini.

05:14.240 --> 05:15.490
Dan kemudian kita tambahkan satu ke saya.

05:15.710 --> 05:21.230
OK jadi untuk menambahkan tiga digit bersama bahwa loop pertama hanya akan memulai loop di sini dan kemudian kita akan pergi ke

05:21.230 --> 05:21.710
sini.

05:21.710 --> 05:28.430
Di sini, di sini, di sini, dan berhenti di sini untuk jumlah terakhir kami, lalu apa yang kami lakukan adalah membuat variabel bernama Temp

05:28.820 --> 05:30.930
temp. Itu hanya akan mulai dari nol.

05:31.040 --> 05:34.420
Kami memiliki Max dan akan menyimpan beberapa Setiap kali lewat.

05:34.460 --> 05:36.590
Jadi baiklah bersama-sama ketiganya.

05:36.920 --> 05:42.230
Dan kemudian tambahkan ketiga ini dan bandingkan dengan max dan kemudian harus mendapatkan ketiganya.

05:42.220 --> 05:46.820
Dan jika lebih besar dari maks kami saat ini Kami akan memperbarui Max menjadi temp.

05:46.820 --> 05:47.990
Jadi itulah yang saya lakukan di sini.

05:47.990 --> 05:51.600
Jadi loop kedua kita melewati J sama dengan nol.

05:51.620 --> 05:54.480
J lebih kecil dari J plus plus.

05:54.770 --> 05:56.710
Jadi mati rasa adalah jumlah digit.

05:56.780 --> 05:58.330
Jadi kita mulai di sini.

05:58.460 --> 06:04.610
Dan kemudian loop bersarang kedua di sini yang akan melihat ke depan dan menambahkan 1:54 dan kemudian menambahkan 9 ke

06:04.610 --> 06:06.010
variabel temp kita juga

06:06.020 --> 06:08.660
Itulah yang dilakukan array I Plus J.

06:08.930 --> 06:10.210
Jadi di mana aku?

06:10.340 --> 06:17.060
Dan kemudian kita tambahkan Plus J kalau sudah naik satu indeks yang hanya merupakan cara menjumlahkan ketiga ini bersama-sama.

06:17.090 --> 06:20.810
Kemudian kami memeriksa apakah temp lebih besar dari Max Max sama dengan temp.

06:20.810 --> 06:28.040
Jadi kami memperbarui Max jika jumlah temp kami lebih besar dan pertama kali melalui Max adalah infinity negatif.

06:28.040 --> 06:32.540
Jadi, apa pun yang kami lakukan, kami akan memperbarui Max ke tiga digit ini.

06:32.540 --> 06:42.440
Dan mengapa saya tidak mencetak status konser log temp kita dan kemudian juga Max seperti ini.

06:42.610 --> 06:50.690
Dan ketika saya memanggil kode saya di subway ini pada array ini saya maksudkan Anda dapat melihat bahwa kita memulai beberapa

06:50.690 --> 06:51.770
kali pertama.

06:51.940 --> 06:58.760
Kami memiliki 17, tiga digit pertama, beberapa hingga 17, dan kemudian kembali lagi, kami mendapatkan 17.

06:59.080 --> 07:02.340
Kemudian lain kali kita melihat sembilan dua satu.

07:02.440 --> 07:05.310
Jadi itu memberi kita 12 sehingga kita tidak memperbarui.

07:05.320 --> 07:08.330
Max Max masih 17 tetapi suhu 12.

07:08.440 --> 07:13.300
Lalu apa yang tiga ini memberi ketiganya?

07:13.330 --> 07:20.470
Kemudian kita sampai di sini dan sekarang kita menekan 19 dan temp ini sekarang lebih besar dari Max yang lama jadi kita

07:20.470 --> 07:27.190
perbarui Max menjadi 19 dan kemudian itu adalah maks kita untuk sisa array dan kita mengembalikan 19 di akhir.

07:27.190 --> 07:29.890
Jadi mari kita bicara tentang apa yang tidak baik dengan solusi ini.

07:29.980 --> 07:34.870
Jadi sepertinya loop bersarang ini bukan masalah besar ketika kita berbicara tentang tiga item ketika kita hanya

07:35.250 --> 07:38.180
mencoba untuk menjumlahkan tiga hal bersama dan itu benar.

07:38.350 --> 07:44.590
Tetapi jika kita memiliki array yang sangat panjang yang akan saya ketik sangat cepat katakanlah kita memiliki array besar ini

07:45.160 --> 07:48.950
dan kami mencoba untuk menemukan jumlah terbesar dari 20 digit berturut-turut.

07:49.120 --> 07:51.300
Apa yang akan terjadi adalah kita memiliki loop pertama ini.

07:51.320 --> 07:56.230
Saya yang berlaku untuk setiap item tunggal atau hampir setiap item secara teknis tidak berjalan

07:56.230 --> 07:59.430
sampai akhir itu berhenti apa 20 digit sebelum akhir.

07:59.650 --> 08:05.200
Tapi kita terus berjalan dan setiap kali kita menjumlahkan dari awal 20 ini saya hanya akan

08:05.200 --> 08:10.780
menebak angka 20 atau lebih angka kita akan menjumlahkannya bersama dan kemudian kita hanya akan bergerak maju

08:10.780 --> 08:15.490
satu dan lingkaran 20 kali lagi dan tambahkan bersama-sama dan kami terus berjalan.

08:15.490 --> 08:19.840
Dan ini bisa sangat tidak efisien terutama 20 masih sangat sedikit dalam skema

08:19.840 --> 08:20.340
besar.

08:20.380 --> 08:25.950
Jika kita memiliki array yang besar, ingat dengan notasi Big-O, kita akan mengambil banyak hal memperluas mereka menuju infinity.

08:26.080 --> 08:32.320
Jadi misalkan kita memiliki sejuta item di sini dan kami mencoba untuk menemukan jumlah terbesar 10.000 atau 0

08:32.530 --> 08:34.320
atau bahkan 100000 digit berturut-turut.

08:34.360 --> 08:41.290
Benar-benar tidak efisien untuk terus melakukan ini dan memperbarui dan sekarang menambahkan 100.000 digit lainnya dan kemudian bergerak maju

08:41.530 --> 08:44.460
satu menambahkan bersama seratus ribu digit lainnya.

08:44.470 --> 08:45.650
Itu tidak efisien.

08:45.820 --> 08:48.880
Dan aturannya adalah Anda bisa mengatakannya dan kuadrat.

08:48.880 --> 08:50.490
Dan setiap kali ada loop bersarang.

08:50.650 --> 08:55.380
Jadi ada cara yang lebih baik untuk melakukan ini yang mana pendekatan sliding window kami

08:55.380 --> 08:55.970
dibuang.

08:56.080 --> 08:57.590
Ini jendela geser.

08:57.620 --> 08:57.930
Baiklah.

08:57.970 --> 08:59.410
Jadi, inilah cara kerjanya.

08:59.410 --> 09:00.610
Saya hanya akan menyalinnya.

09:00.610 --> 09:04.540
Hal pertama yang dapat Anda lihat adalah O dan kompleksitas liniernya.

09:04.540 --> 09:06.380
Kami hanya mengulang satu kali.

09:06.400 --> 09:11.750
Secara teknis ada dua loop yang ditulis tetapi kita hanya membahas seluruh array satu kali.

09:11.770 --> 09:13.690
Jadi, saya tunjukkan pada Anda.

09:13.690 --> 09:14.470
Ini dia.

09:14.530 --> 09:18.700
Apa yang kita lakukan adalah pada awalnya kita menjumlahkan yang pertama.

09:18.700 --> 09:23.950
Jika kita mencari tiga digit berturut-turut, kita menjumlahkan ketiga angka ini dan kemudian daripada memulai

09:23.950 --> 09:29.220
satu lingkaran di sini dan menjumlahkan ketiga angka ini dan kemudian mulai lagi dan menambahkan tiga

09:29.560 --> 09:36.040
angka lagi dan terus seperti itu seperti yang kita lakukan pada yang terakhir solusi di sini apa yang kita lakukan

09:36.040 --> 09:42.650
adalah kita menyimpan variabel yang hanya memiliki total ini di sini dan semua yang perlu kita lakukan untuk mencari tahu selanjutnya.

09:42.700 --> 09:50.020
Beberapa dari tiga digit ini yang tidak harus kita baca tambahkan 6 dan 9 dan 2 kita bisa mengurangi angka ini dan

09:50.200 --> 09:56.020
menambahkan angka ini atau memberi Anda contoh yang lebih baik jika kita kembali ke array besar ini.

09:56.110 --> 09:58.230
Katakanlah saya menjumlahkan angka-angka ini bersama-sama.

09:58.750 --> 10:04.700
Jika saya ingin mencari tahu jumlah ini yang datang setelah itu mulai dari ini bukan yang ini.

10:04.800 --> 10:06.230
Mari kita lakukan sesuatu yang sedikit lebih mudah dikelola.

10:06.250 --> 10:13.450
Katakanlah saya mulai dari yang satu ini sampai yang ini karena saya tidak harus membaca setiap angka bersama untuk

10:13.630 --> 10:14.620
menghitung ini.

10:15.270 --> 10:19.100
Yang harus saya lakukan adalah mengurangi angka 1 dan menambahkan angka 5.

10:19.360 --> 10:20.980
Jadi itu jendela geser.

10:20.980 --> 10:24.960
Kami akan membuat jumlah yang berjalan dari sini sampai.

10:24.970 --> 10:28.540
Katakan saja di sini dan kemudian geser.

10:28.570 --> 10:31.780
Kami tidak menghitung ulang semua yang kami kurangi jumlah ini.

10:31.780 --> 10:34.820
Jadi kami memindahkan jendela ke atas seperti itu.

10:35.520 --> 10:36.940
Dan kemudian kita tambahkan nomor ini.

10:37.410 --> 10:39.470
Jadi itulah yang saya lakukan di sini.

10:39.600 --> 10:43.320
Saya menyingkirkan array besar ini lagi dan kami melompat kembali.

10:43.320 --> 10:45.400
Kami memiliki pepatah ini dan 10 beberapa.

10:45.690 --> 10:47.420
Dan saya memiliki kasing tepi saya.

10:47.520 --> 10:53.970
Jika array tidak valid dan kami sedang mencari angka yang terlalu besar, kami kembalikan semua, lalu

10:53.970 --> 10:55.470
buat jumlah pertama.

10:55.500 --> 10:57.630
Jadi katakanlah saya lulus tiga.

10:57.690 --> 10:58.900
Oke, itu berhasil.

10:59.040 --> 11:03.900
Kita akan mulai dari awal dan menjumlahkan tiga digit pertama dan menyimpannya dalam

11:03.900 --> 11:07.070
variabel yang disebut Maxim dan hanya itu.

11:07.140 --> 11:08.120
Kami tidak terus mengulang.

11:08.310 --> 11:11.080
Jadi kami hanya mengulang tiga kali dan ditambahkan bersama.

11:11.230 --> 11:16.620
Kemudian saya katakan jumlah upaya sama dengan Max beberapa jadi kami hanya memiliki dua variabel ini dan jumlah Max adalah apa

11:16.620 --> 11:18.270
yang akan saya kembalikan pada akhirnya.

11:18.270 --> 11:25.130
Sekarang apa yang saya lakukan adalah saya mulai loop lain dan bukannya mulai dari nol di awal saya mulai jika ini adalah

11:25.140 --> 11:27.410
apa yang sudah kita tambahkan bersama.

11:27.630 --> 11:30.220
Saya sekarang akan memulai loop saya dari sini.

11:30.600 --> 11:33.800
Jika kita menambahkan tiga digit pada waktu kita sudah melakukan ini.

11:33.890 --> 11:35.050
Jadi sekarang saya akan mulai di sini.

11:35.220 --> 11:39.670
Saya sudah memiliki variabel dengan jumlah ini yang kita dapatkan 17.

11:39.780 --> 11:42.270
Saya akan mengambil variabel yang disebut Temp sum.

11:42.420 --> 11:46.240
Saya akan menambahkan dua dan saya akan mengurangi dua.

11:46.260 --> 11:49.240
Yang bodoh karena kita mendapatkan hal yang sama.

11:49.740 --> 11:52.890
Tapi kemudian lain kali katakan kita melihat ketiga.

11:52.890 --> 11:55.970
Ini adalah jumlah kami saat ini yaitu 17 lagi.

11:56.340 --> 12:01.510
Apa yang kita lakukan sekarang adalah saya tambahkan satu dan saya kurangi enam.

12:01.760 --> 12:10.520
Dan kemudian kita melihat 13 tahu 12 Saya melihat 12 dan kami mengambil maksimum antara maksimum dan

12:10.520 --> 12:11.110
temps.

12:11.290 --> 12:16.490
Jadi, berhitung Max adalah cara mudah untuk melakukannya, Anda juga bisa melakukan pernyataan if seperti yang kami lakukan di sini.

12:16.820 --> 12:23.390
Jika temp lebih besar dari maks dan ini hanya memperbarui maks. Jika temp sum lebih besar dari apa yang di maks.

12:23.810 --> 12:27.590
Jadi solusi ini memungkinkan kita untuk mengulang array satu kali.

12:27.590 --> 12:32.480
Jadi jika kita berbicara tentang satu juta digit dalam array, kita hanya akan membahas

12:32.480 --> 12:38.630
semuanya sekali dan kita tidak harus terus menerus membaca loop dengan loop bersarang semua yang kita lakukan setiap

12:38.630 --> 12:41.120
kali melalui loop adalah satu pengurangan.

12:41.120 --> 12:46.850
Secara teknis ada pengurangan di sini tapi kami mengurangi salah satu nilai array dan menambahkan

12:46.850 --> 12:48.240
satu nilai array.

12:48.790 --> 12:50.200
Dan itu jendela geser.

12:50.480 --> 12:53.770
Dan itu jauh lebih baik dan lebih efisien.

12:53.960 --> 12:55.110
Dalam skema besar itu.

12:55.160 --> 12:55.560
Oh

12:55.580 --> 12:58.240
Dan bukannya kuadrat dan kotak.

12:58.620 --> 12:58.910
Oh

12:58.940 --> 13:03.290
Dan saya harus membuktikan bahwa itu tidak berhasil untuk Anda jalankan, kita dapatkan 19

13:03.300 --> 13:05.170
Biarkan saya hanya mengacaukan hal-hal.

13:05.180 --> 13:05.380
Baiklah.

13:05.390 --> 13:06.190
Kami mendapat 19.

13:06.380 --> 13:09.750
Dan itu memang adalah yang terbesar dari ketiga di sini.

13:09.800 --> 13:10.530
Apakah itu benar.

13:10.790 --> 13:11.210
Iya nih.

13:11.240 --> 13:12.690
Itu memberi kita 19.

13:12.860 --> 13:13.460
Luar biasa.

13:13.700 --> 13:14.210
Bergerak.
