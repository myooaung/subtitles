WEBVTT

00:00.150 --> 00:01.190
Hai, selamat datang kembali.

00:01.200 --> 00:06.210
Jadi kami memiliki bagian baru dengan struktur data baru yang disebut tabel hash juga dikenal

00:06.210 --> 00:07.940
cukup umum sebagai peta hash.

00:07.950 --> 00:11.580
Jadi ini sering digunakan sehingga Anda mungkin menggunakannya sepanjang waktu.

00:11.580 --> 00:16.500
Saya pasti punya karena mereka dibangun di hampir setiap bahasa pemrograman di

00:16.500 --> 00:21.720
luar sana apakah kita berbicara tentang javascript atau Python atau Ruby atau Java.

00:21.850 --> 00:28.950
Scala cukup banyak setiap bahasa memiliki variasi tabel hash atau peta hash bawaan sebagai tipe default.

00:28.950 --> 00:31.300
Jadi Anda tidak perlu melakukan apa pun seperti dengan array.

00:31.410 --> 00:36.440
Sebagian besar bahasa memiliki larik atau tipe daftar bawaan dan Anda bisa menggunakannya di luar kotak.

00:36.510 --> 00:38.590
Jadi kami akan mengimplementasikan versi kami sendiri.

00:38.700 --> 00:39.830
Kami akan membuat milik kami sendiri.

00:39.900 --> 00:45.210
Tapi sama seperti dengan array Anda mungkin dalam sembilan puluh sembilan koma sembilan puluh persen dari

00:45.560 --> 00:50.970
kasus-kasus akan ingin menggunakan kelas array yang dibangun atau kelas daftar atau struktur serupa apa pun yang ada.

00:51.040 --> 00:52.730
Tidak ada alasan untuk menemukan kembali roda.

00:52.740 --> 00:54.080
Sama dengan tabel hash.

00:54.270 --> 00:59.610
Tetapi ada banyak hal yang sangat keren untuk kita bicarakan tentang bagaimana mereka bekerja apa hashing saya harus benar-benar

00:59.610 --> 01:01.830
hanya berbicara tentang itu di slide ini

01:01.980 --> 01:04.800
Jadi di bagian ini kita akan menjelaskan apa itu tabel hash.

01:04.840 --> 01:06.610
Itu akan ada di video ini.

01:06.730 --> 01:07.930
Oh dua untuk satu di sana.

01:08.070 --> 01:12.780
Didefinisikan dengan baik dengan algoritma hashing adalah mendefinisikan apa algoritma hashing.

01:12.830 --> 01:14.190
Boy slide ini.

01:14.790 --> 01:15.620
Itu bukan kesepakatan.

01:15.690 --> 01:17.360
Jadi tentukan apa algoritma hashing itu.

01:17.370 --> 01:19.680
Diskusikan apa yang membuat algoritma hashing yang baik.

01:19.680 --> 01:22.380
Ada karakteristik tertentu yang kami cari.

01:22.380 --> 01:26.180
Kemudian kita akan berbicara tentang apa yang terjadi ketika tabrakan terjadi dan tabel hash.

01:26.280 --> 01:30.870
Apa artinya itu akan ada tabrakan dan kemudian dua strategi untuk menangani mereka sesuatu yang

01:30.870 --> 01:32.060
disebut rantai terpisah.

01:32.100 --> 01:34.460
Dan hal lain yang disebut penyelidikan linear.

01:34.650 --> 01:37.470
Itu terdengar seperti dua metode penyiksaan yang berbeda.

01:37.620 --> 01:38.490
Jadi kita akan sampai di sana.

01:38.580 --> 01:42.230
Tapi mari kita mulai dengan hanya membahas apa tabel hash.

01:42.570 --> 01:45.000
Jadi seperti yang saya sebutkan ini ada di semua tempat.

01:45.000 --> 01:48.060
Anda mungkin menggunakannya dalam bahasa pemrograman apa pun yang Anda inginkan.

01:48.150 --> 01:56.250
Tabel hash digunakan untuk menyimpan pasangan nilai kunci dan ya begitu juga array array mengaitkan kunci seperti 0 atau 1 atau 2

01:56.250 --> 02:00.070
atau 3 ke nilai yang bisa berupa hal lain.

02:00.180 --> 02:03.190
Tapi itu tabel hash ketat numerik tidak.

02:03.270 --> 02:06.470
Dan di atas semua itu kunci-kunci di tabel hash tidak dipesan.

02:06.600 --> 02:12.630
Jadi dalam array tentu saja indeks indeks mulai dari nol dan mereka naik ke beberapa angka yang terus berjalan.

02:12.630 --> 02:16.260
Ada tabel hash pesanan implisit tertentu.

02:16.260 --> 02:17.500
Bukan itu masalahnya.

02:17.760 --> 02:23.610
Dan hal keren lainnya tentang tabel hash adalah mereka cepat menemukan nilai untuk menambahkan nilai baru

02:23.670 --> 02:24.930
untuk menghilangkan nilai.

02:24.960 --> 02:26.130
Semuanya cepat.

02:26.130 --> 02:28.250
Jadi kita akan membicarakan mengapa itu dan bagaimana cara kerjanya.

02:28.260 --> 02:31.110
Tapi pertama-tama mari kita masuk ke lebih detail tentang mengapa Anda harus peduli.

02:31.410 --> 02:36.570
Jadi seperti yang saya sebutkan hampir setiap bahasa di luar sana memiliki semacam struktur tabel hash karena

02:36.570 --> 02:37.290
kecepatan mereka.

02:37.290 --> 02:43.830
Mereka digunakan sangat umum dan mereka juga hanya meminjamkan data itu sendiri sering meminjamkan dirinya untuk disimpan dengan cara

02:43.830 --> 02:44.330
ini.

02:44.430 --> 02:49.650
Ya jika Anda memiliki data sekuensial hebat Anda bisa menggunakan array jika semua yang Anda tahu memiliki pesanan dan

02:49.650 --> 02:52.680
ada nomor yang masuk akal untuk dikaitkan dengan suatu posisi.

02:52.680 --> 02:53.400
Gunakan array.

02:53.520 --> 02:56.020
Tetapi seringkali data kami tidak cocok dengan pola itu.

02:56.070 --> 02:59.610
Jadi kita bisa menggunakan peta hash atau tabel hash.

02:59.640 --> 03:03.050
Jadi di sini hanya ikhtisar singkat dari bahasa tertentu.

03:03.300 --> 03:09.090
Ini adalah apa implementasi peta hash mereka adalah tabel hash dikenal sebagai Python memiliki

03:09.090 --> 03:13.090
kamus atau dict Javascript memiliki objek dan peta.

03:13.140 --> 03:18.680
Dan saya meletakkan tanda bintang di sini karena pada objek Anda sebenarnya hanya diperbolehkan menggunakan string sebagai kunci

03:18.720 --> 03:21.410
tetapi ide yang sama ada di balik layar.

03:21.420 --> 03:24.370
Ini diimplementasikan pada dasarnya sebagai tabel hash.

03:24.420 --> 03:29.500
Java go dalam Skala memiliki sesuatu yang disebut peta atau peta, minta Ruby.

03:29.500 --> 03:30.420
Mereka bahkan tidak peduli.

03:30.420 --> 03:31.770
Itu hanya disebut hash.

03:31.770 --> 03:37.950
Jadi ini adalah semua data nilai toko utama kami dan mereka mengimplementasikan tabel hash sehingga tabel hash

03:37.950 --> 03:42.000
adalah semacam ide umum dan Anda dapat mengimplementasikannya dalam banyak cara.

03:42.000 --> 03:46.490
Kamus dan Python peta dan objek dan peta Javascript dan Java mungkin.

03:46.530 --> 03:46.990
BAIK.

03:47.280 --> 03:54.750
Jadi mari kita berpura-pura bahwa mereka menghilang kita tidak dapat menggunakan objek javascript builtin dasar atau kamus

03:54.930 --> 03:59.140
Python jika kita masih ingin menyimpan data nilai kunci.

03:59.190 --> 04:01.230
Kita perlu menerapkan milik kita sendiri.

04:01.260 --> 04:02.190
Jadi itulah yang akan kita lakukan.

04:02.190 --> 04:04.940
Saya membayangkan mereka menghilang secara misterius.

04:04.950 --> 04:05.610
Bagaimana kita melakukannya?

04:05.640 --> 04:11.130
Bagaimana kita menulis versi kita sendiri dari tabel hash pasangan nilai kunci sebuah penyimpanan data.

04:11.130 --> 04:16.820
Jadi bayangkan kita ingin menyimpan beberapa warna di mana kita membuat situs Web kita memiliki

04:16.860 --> 04:20.750
kode warna heksadesimal yang sangat sulit untuk dilacak atau dibedakan.

04:20.940 --> 04:23.700
Jadi kita bisa menyimpan mentalis seperti ini.

04:24.030 --> 04:29.580
Tapi ini Anda tahu tidak ada pesanan di sini yang tersirat tetapi tidak ada alasan bahwa kami ingin

04:29.580 --> 04:31.020
menyimpannya dalam urutan tertentu.

04:31.020 --> 04:32.400
Itu tidak masalah.

04:32.400 --> 04:35.070
Saya tidak tahu warna apa ini warna apa itu.

04:35.070 --> 04:40.020
Anda mengerti maksudnya semoga ini bukan cara yang bagus untuk menyimpan warna kecuali kita hanya membutuhkan warna acak pada titik

04:40.020 --> 04:43.500
mana pun yang akan bekerja jika kita hanya mengambil sesuatu secara acak dari sini.

04:43.500 --> 04:49.230
Hebat tetapi jika kita membutuhkan warna tertentu pada saat tertentu itu tidak bagus itu tidak dapat dibaca.

04:49.230 --> 04:50.880
Apa yang berhubungan dengan warna-warna ini.

04:51.150 --> 04:56.560
Jadi daripada menggunakan indeks atau angka untuk mengakses warna itu akan jauh lebih baik untuk

04:56.730 --> 05:05.230
menggunakan Anda tahu kunci yang dapat dibaca manusia seperti merah muda yang merah muda atau versi satu jenis merah muda oranye merah mungkin itu adalah

05:05.240 --> 05:11.240
warna ini warna cyan ini akan jauh lebih baik jika saya bisa mengatakan Anda tahu memberi saya

05:11.240 --> 05:17.600
warna pink atau warna Scion yang Di sini kita pergi warna Cyan jauh lebih baik daripada warna juga.

05:17.600 --> 05:22.580
Jadi kita akan mencoba dan mengimplementasikan struktur ini pada kita sendiri walaupun tentu saja dalam javascript dan

05:22.580 --> 05:25.560
Python Anda akan dapat melakukan ini di luar kotak.

05:25.760 --> 05:29.750
Tetapi jika kita tidak memiliki akses ke kamus atau objek atau peta bagaimana kita melakukan ini.

05:29.750 --> 05:31.670
Jadi itulah yang menjadi fokus bagian ini.

05:31.760 --> 05:36.620
Saya pikir itu agak menyenangkan karena kita bisa masuk ke beberapa detail menyenangkan ke hashing

05:36.620 --> 05:42.290
apa fungsi hashing akan berbicara sedikit tentang beberapa matematika masuk ke bilangan prima membahas bagaimana bilangan prima

05:42.290 --> 05:43.810
berperan dalam hal ini

05:43.820 --> 05:45.890
Ini semua hal yang menyenangkan.

05:46.010 --> 05:46.730
Jadi itulah tujuan kami.

05:46.730 --> 05:50.090
Temukan kembali pasangan nilai kunci pemetaan dasar ini.
