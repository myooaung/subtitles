WEBVTT

00:00.210 --> 00:00.630
Baiklah.

00:00.630 --> 00:01.470
Selamat datang kembali.

00:01.470 --> 00:06.440
Jadi apa yang perlu kita lakukan sebelum kita benar-benar dapat menemukan jalur terpendek dalam grafik antara dua titik.

00:06.630 --> 00:12.190
Kita hanya perlu menetapkan nilai di antara titik-titik itu sehingga kita dapat menemukan jalur mana pun pendek atau panjang.

00:12.450 --> 00:15.130
Dan untuk melakukan itu tidak terlalu sulit.

00:15.480 --> 00:22.950
Semua yang kita lakukan saat menambahkan tepi alih-alih mengatakan dari A ke B, kita hanya mengatakan dari A ke B koma 90 dari

00:22.950 --> 00:24.890
B ke C koma 13.

00:24.960 --> 00:31.950
Jadi jika kita melompat ke potongan kecil cepat kita bisa dengan cepat mendefinisikan kembali kelas kita sehingga kita akan menyebutnya

00:31.950 --> 00:36.510
grafik berbobot dan aku hanya akan khawatir tentang menambahkan simpul dan menambahkan tepi.

00:36.510 --> 00:42.310
Kami tidak akan khawatir menghilangkan tepi dan simpul untuk saat ini karena mari kita fokus pada hal-hal penting.

00:42.540 --> 00:46.550
Jadi grafik berbobot kelas apa konstruktor.

00:46.590 --> 00:48.300
Persis sama dengan grafik berbobot.

00:48.300 --> 00:50.010
Kami memiliki daftar adjacency.

00:50.040 --> 00:55.980
Perbedaan utama adalah sekali kita benar-benar menambahkan tepi pada apa yang kita miliki sebelumnya tampak seperti

00:55.980 --> 00:57.850
ini atau kita punya seperti.

00:58.080 --> 01:03.780
Dan kemudian itu hanya memiliki array di mana kami memiliki B dan mungkin C atau sesuatu.

01:03.780 --> 01:09.930
Itu tidak akan memotongnya untuk kita karena kita sekarang perlu menyimpan tidak hanya tepi itu sendiri dari A ke B

01:09.970 --> 01:11.200
tetapi juga nilainya.

01:11.280 --> 01:16.770
Jadi itu akan terlihat lebih seperti ini di mana kita memiliki bidang atau itu akan menjadi

01:16.770 --> 01:26.130
objek dan kita akan memiliki dua properti simpul yang hanya mengatakan B misalnya dan kemudian menunggu yang akan menjadi 10 angka dan kemudian tentu saja kita akan

01:26.730 --> 01:31.600
memiliki hal yang sama pada B di mana simpul adalah dan beratnya 10.

01:31.650 --> 01:36.500
Jadi, alih-alih hanya sekadar string B, kita sekarang perlu menambahkan sebuah objek.

01:36.570 --> 01:41.250
Tetapi sejauh vertex jika kita memiliki ADD vertex itu persis sama.

01:41.310 --> 01:47.400
Jadi saya akan memeriksa titik hanya jika titik sudah dalam daftar adjacency dan jika tidak maka kita

01:47.400 --> 01:49.740
menambahkan dan mengaturnya menjadi array kosong.

01:50.040 --> 01:51.160
Jadi itu bagus dan mudah.

01:51.180 --> 01:54.520
Sekarang kita bisa menambahkan simpul kita seperti a dan b dan c.

01:54.540 --> 02:03.240
Sekarang untuk menambahkan tepi antara dua simpul perlu menerima dua simpul jadi mari kita pergi dengan simpul 1 dan

02:03.240 --> 02:05.530
simpul 2 dan kemudian menunggu.

02:06.180 --> 02:12.270
Dan jika kita melihat apa yang kita lakukan untuk gobro tertimbang kami permisi untuk grafik tidak tertimbang dari sebelumnya dalam

02:12.270 --> 02:12.780
kursus.

02:12.900 --> 02:19.560
Jika Anda melihat menambahkan tepi itu sangat sederhana, kami hanya melakukan ini daftar adjacency Vertex 1

02:19.680 --> 02:24.580
push vertex ke vertex daftar adjacency ini untuk mendorong vertex 1.

02:24.750 --> 02:30.760
Jadi kita harus mengubah beberapa hal karena saya menggunakan Virtex satu bukannya v v 1 tapi itu kecil.

02:31.000 --> 02:31.250
BAIK.

02:31.260 --> 02:37.550
Jadi simpul 1 untuk teks 2 untuk teks 2 tetapi ini tidak akan berhasil karena kita tidak menggunakan bobot.

02:37.740 --> 02:43.500
Jadi ingat, kita perlu menyimpan objek di dalam daftar adjacency di dalam array yang kita

02:43.500 --> 02:44.250
dorong.

02:44.400 --> 02:49.730
Kita akan memiliki objek di mana ada properti yang disebut simpul tidak harus disebut itu tetapi bisa.

02:49.730 --> 02:51.420
Anda bisa memanggil tampilan vertex juga.

02:51.560 --> 02:54.490
Tapi mari kita pergi dengan node dan kemudian tunggu.

02:54.750 --> 03:00.030
Dan daripada melakukan ini tunggu tunggu titik dua karena saya ingin itu disebut menunggu.

03:00.150 --> 03:07.110
Dan juga argumennya adalah menunggu yang bisa kita lakukan hanya lewat dan tunggu di sini dan itu akan melakukan hal yang sama persis

03:07.680 --> 03:10.910
seperti bagian dari saya percaya yang ditambahkan pada tahun 2015.

03:11.010 --> 03:14.480
Mungkin sudah ada sebelumnya dan saya tidak tahu tentang itu.

03:14.640 --> 03:18.920
Hal yang sama di sini dan hanya itu.

03:18.920 --> 03:23.290
Ini harus menjadi kelas grafik tertimbang kami jadi lihat apakah itu berfungsi.

03:23.290 --> 03:25.570
Tentu saja saya baru saja menjalankan kodenya.

03:25.570 --> 03:27.380
Jadi mari kita membuat variabel yang disebut grafik.

03:27.390 --> 03:37.300
Ini adalah cara baru untuk membuat grafik dan apa yang harus ditambahkan Virtex, katakan saja a dan b dan c.

03:37.760 --> 03:45.660
Dan sekarang mari kita tambahkan tepi dari A ke B yang akan menjadi saya tidak tahu sembilan.

03:46.210 --> 03:51.210
Dan kemudian mari kita lakukan untuk melihat mana yang akan menjadi lima.

03:51.250 --> 03:51.970
Yakin.

03:52.270 --> 03:58.620
Dan kemudian mari kita lakukan BTC yang akan menjadi tujuh.

03:59.220 --> 03:59.590
BAIK.

03:59.650 --> 04:04.020
Sekarang mari kita lihat daftar adjacency daripada hanya percaya bahwa itu berhasil.

04:04.030 --> 04:10.690
Jadi Anda punya B dan C dan untuk setiap entri dalam daftar adjacency, kami memiliki objek dengan simpul

04:10.690 --> 04:11.440
dan bobot.

04:11.440 --> 04:15.930
Jadi misalnya dari kita dapat melihat ada hubungannya dengan bobot sembilan.

04:16.210 --> 04:21.950
Dan jika kita melihat B ada koneksi ke A dengan bobot sembilan dari A ke C.

04:22.240 --> 04:28.780
Ada juga keunggulan dengan cara ke lima jika kami akan melihat Anda di sana.

04:28.780 --> 04:30.890
Kami memiliki cara melihat ke 5.

04:31.120 --> 04:32.470
Baiklah jadi ini semua berfungsi.

04:32.590 --> 04:36.790
Seperti yang saya katakan, kita tidak perlu khawatir tentang menghilangkan tepi dan menghapus simpul untuk

04:36.790 --> 04:41.140
saat ini karena kita fokus pada algoritma tetapi sangat mirip dengan apa yang kita lihat sebelumnya.

04:41.290 --> 04:45.840
Kecuali sekarang Anda hanya perlu menghapus objek tetapi sebaliknya sangat mirip.

04:46.040 --> 04:50.070
OK jadi sekarang kita memiliki semua bagian untuk benar-benar berbicara tentang algoritma.

04:50.140 --> 04:52.400
Pindah ke Dijkstra's dan video berikutnya.

04:52.630 --> 04:54.790
Jadi ini adalah kelas grafik tertimbang kami.

04:54.800 --> 05:00.580
Kelas yang sangat sangat sederhana mungkin membingungkan jika Anda tidak menonton bagian grafik mana pun.

05:00.580 --> 05:04.790
Seharusnya saya sebutkan tadi di video tapi saya bilang itu di awal bagian ini.

05:04.900 --> 05:06.610
Jadi pasti tonton itu.

05:06.610 --> 05:09.200
Jika Anda bingung tentang apa yang saya bicarakan di sini.

05:09.430 --> 05:12.340
Yang kami lakukan adalah menambahkan bobot pada setiap tepinya.

05:12.340 --> 05:14.610
Jadi itu koneksi dari satu titik ke titik lain.

05:14.620 --> 05:17.090
Sekarang dengan nilai terkait.

05:17.140 --> 05:17.320
Baiklah.

05:17.320 --> 05:20.160
Selanjutnya kita akan membahas dasar-dasar algoritma.
