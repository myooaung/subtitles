WEBVTT

00:00.150 --> 00:00.870
Selamat datang kembali.

00:01.020 --> 00:05.700
Jadi kami telah menetapkan Yah tidak terlalu banyak tentang pemrograman dinamis tetapi kami telah

00:05.700 --> 00:10.830
menetapkan fakta bahwa ini adalah pendekatan untuk memecahkan beberapa masalah dengan memecah masalah menjadi potongan-potongan kecil

00:10.860 --> 00:16.270
dan kemudian entah bagaimana mengurangi jumlah pekerjaan yang kita lakukan dengan mengingat bagian sebelumnya bla bla bla.

00:16.300 --> 00:17.360
Tidak masalah pada saat ini.

00:17.370 --> 00:18.570
Jangan terjebak dalam hal itu.

00:18.660 --> 00:21.550
Tapi mari kita bicara tentang bagaimana kita tahu kapan kita bisa menggunakannya.

00:21.580 --> 00:23.420
Karena saya sudah menyebutkan beberapa kali.

00:23.560 --> 00:27.240
Hanya ada situasi khusus masalah khusus di mana ia bekerja.

00:27.330 --> 00:29.290
Dan ada dua hal yang harus kita cari.

00:29.580 --> 00:36.100
Jadi kita dapat menggunakan pemrograman dinamis jika kita memiliki substruktur yang optimal dan subproblem yang tumpang tindih.

00:36.270 --> 00:37.910
Saya tahu itu terdengar gila.

00:38.040 --> 00:39.680
Agak menakutkan.

00:39.690 --> 00:42.270
Kita akan melangkah melalui masing-masing dari mereka dalam video terpisah.

00:42.630 --> 00:45.530
Jadi yang pertama kita akan berbicara tentang tumpang tindih masalah.

00:45.660 --> 00:52.020
Jadi agar kita dapat menggunakan pemrograman dinamis dinamis pada masalah tertentu, harus ada submasalah

00:52.020 --> 00:53.530
yang tumpang tindih.

00:53.550 --> 00:54.820
Dan apa artinya itu.

00:54.870 --> 00:58.950
Ini berarti bahwa kita dapat memecah satu masalah menjadi beberapa bagian yang lebih kecil.

00:59.100 --> 01:02.010
Tetapi beberapa dari potongan itu digunakan kembali.

01:02.100 --> 01:03.380
Mereka tidak unik.

01:03.380 --> 01:04.860
Mereka digunakan kembali beberapa kali.

01:04.860 --> 01:08.600
Jadi mari kita lihat contoh deret Fibonacci.

01:08.610 --> 01:14.810
Jadi ini adalah sesuatu yang dapat kita gunakan untuk pemrograman Nemec karena memang memiliki sub masalah yang tumpang tindih.

01:15.000 --> 01:19.290
Jadi, jika Anda tidak terbiasa dengan urutan Fibonacci yang dinamai setelah ini, saya pikir pria

01:19.290 --> 01:21.110
Italia bernama Fibonacci dari dulu.

01:21.240 --> 01:26.460
Dan itu adalah urutan angka di mana setiap angka sama dengan jumlah dari dua angka sebelumnya

01:26.460 --> 01:27.660
yang datang sebelumnya.

01:27.660 --> 01:30.200
Jadi secara tradisional dimulai dengan satu dalam satu.

01:30.300 --> 01:34.630
Meskipun saat ini lebih modern kali Anda akan melihat nol di salah satu dari dua digit pertama.

01:34.650 --> 01:36.810
Tapi bagaimanapun juga tidak terlalu penting.

01:36.810 --> 01:41.310
Kami mengambil dua digit yang datang sebelumnya dan menambahkannya bersama untuk mendapatkan digit berikutnya.

01:41.310 --> 01:47.910
Jadi, untuk mendapatkan digit keempat misalnya kita akan menambahkan ketiga dan kedua yang memberi kita tiga dan

01:47.910 --> 01:49.950
kemudian untuk mendapatkan yang kelima.

01:50.010 --> 01:51.980
Kami menambahkan yang keempat dan yang ketiga.

01:52.020 --> 01:55.090
Jadi yang berikutnya akan menjadi 8 dan kemudian 13 dan seterusnya.

01:55.230 --> 02:01.980
Jadi ketika saya mengatakan istilah subproblem kapan saja kita mencoba untuk mendapatkan beberapa digit katakanlah angka Fibonacci

02:02.070 --> 02:08.580
kelima dalam urutan kita memecahnya menjadi bagian yang lebih kecil yaitu kita mengambil digit keempat dan menambahkannya

02:08.580 --> 02:10.080
ke digit ketiga.

02:10.080 --> 02:13.950
Kami mengambil tiga dan menambahkan dua dan beberapa yang bersama-sama untuk mendapatkan lima.

02:14.280 --> 02:16.780
Jadi, inilah pohon kecil yang menggambarkannya.

02:16.800 --> 02:21.990
Jika kami mencoba menemukan angka kelima dalam deret Fibonacci, kami menambahkan angka keempat dan

02:21.990 --> 02:22.430
ketiga.

02:22.530 --> 02:27.660
Tetapi tentu saja untuk menemukan yang kita juga harus menambahkan bersama misalnya untuk yang keempat yang ketiga dan yang

02:27.660 --> 02:31.640
kedua untuk menemukan yang ketiga jika kita menambahkan yang kedua dan yang pertama.

02:31.650 --> 02:35.050
Sekarang yang kedua dan yang pertama kita tahu karena kita mulai dengan 1 dan 1.

02:35.100 --> 02:37.140
Itulah hal-hal yang kita mulai.

02:37.260 --> 02:38.100
Jadi kita tahu itu.

02:38.110 --> 02:39.690
Jadi kita bisa mengatakan ini semua benar.

02:39.690 --> 02:40.500
Dan ini satu.

02:40.710 --> 02:42.040
Ini satu dan ini satu.

02:42.090 --> 02:43.280
Kami menambahkannya bersama.

02:43.320 --> 02:44.280
Ini dua.

02:44.640 --> 02:45.540
Ini dua.

02:45.630 --> 02:50.640
Ini adalah salah satu yang terus kami tambahkan bersama dan akhirnya kami dapatkan lima yang merupakan jawaban

02:50.640 --> 02:53.610
nomor lima satu dua tiga empat lima sebenarnya lima.

02:53.700 --> 02:53.940
BAIK.

02:53.940 --> 02:55.800
Jadi ada submasalah di sini.

02:55.800 --> 02:58.500
Kami memecah satu masalah menjadi langkah-langkah yang lebih kecil.

02:58.500 --> 03:03.930
Ini adalah sesuatu yang sering kita lakukan dalam rekursi ketika kita menulis solusi rekursif ada subproblem yang terlibat

03:03.930 --> 03:06.330
tetapi itu tidak berarti mereka tumpang tindih.

03:06.330 --> 03:12.810
Jadi ketika saya mengatakan subproblem yang tumpang tindih kita perlu mencari hal-hal pengulangan di mana kita mengulangi beberapa

03:12.810 --> 03:13.490
subproblem.

03:13.590 --> 03:16.580
Dan Anda bisa lihat di sini hanya untuk menemukan angka Fibonacci kelima.

03:16.710 --> 03:23.520
Kami menghitung yang ketiga dua kali di sini dan di sini karena kami harus menambahkan yang keempat dan yang

03:23.520 --> 03:24.230
ketiga.

03:24.240 --> 03:25.730
Masukan untuk menemukan yang keempat.

03:25.860 --> 03:31.490
Kita harus menambahkan bersama hal ketiga dan kedua dan yang sama dengan detik ini kita

03:31.490 --> 03:36.860
menghitung beberapa kali pertama menghitung ulang beberapa kali dan membayangkan kita menumbuhkan ini.

03:36.860 --> 03:38.880
Kami mencoba menemukan angka Fibonacci ke-100.

03:39.050 --> 03:42.780
Akan ada banyak pengulangan banyak subproblem yang diulang.

03:42.890 --> 03:47.540
Jadi itulah yang saya maksud ketika saya mengatakan tumpang tindih sekarang saya akan menunjukkan kepada Anda

03:47.540 --> 03:50.880
sebuah contoh dari sesuatu yang mencakup sub-masalah yang tidak tumpang tindih.

03:51.080 --> 03:52.560
Jadi, Anda ingat menggabungkan semacam.

03:52.580 --> 03:53.800
Semoga Anda lakukan.

03:53.960 --> 03:59.900
Kami memiliki sebuah array dan kami membaginya menjadi potongan-potongan kecil untuk mengurutkan mereka dan kemudian kami

03:59.900 --> 04:00.990
menggabungkannya kembali.

04:01.010 --> 04:07.130
Jadi jika ini adalah susunan pemula kami, kami dapat membaginya menjadi dua dan menggabungkan sepuluh jenis umum Dua Puluh Empat

04:07.130 --> 04:12.850
dan kami terus membaginya menjadi dua sampai kami berakhir dengan dua array yang diurutkan 24 dan 10.

04:12.920 --> 04:18.020
Itu diurutkan karena hanya ada satu item dan kemudian kita gabungkan semuanya dan kita dapatkan ini

04:18.020 --> 04:20.960
dan kemudian kita lakukan sisi kanan 76 dan 73.

04:20.960 --> 04:22.140
Kami terbelah dua.

04:22.340 --> 04:25.910
Sortir mereka menggabungkan mereka dan kemudian menggabungkannya di akhir.

04:25.910 --> 04:27.510
Sekarang ini melibatkan submasalah.

04:27.590 --> 04:31.160
Kami mengambil masalah yang lebih besar dan memecahnya menjadi potongan-potongan kecil.

04:31.190 --> 04:34.220
Submasalah tetapi tidak ada tumpang tindih.

04:34.220 --> 04:39.010
Kami tidak mengulangi hal yang sama, tidak mungkin kami bisa mengurangi duplikasi kami.

04:39.080 --> 04:42.500
Jika Anda melihatnya, kami menyortir bagian yang berbeda setiap waktu.

04:42.500 --> 04:46.270
Jadi ini adalah contoh dari submasalah yang tidak tumpang tindih.

04:46.310 --> 04:52.250
Tidak ada subproblem yang tumpang tindih dan struktur ini sering mengarah pada metode bagi dan menaklukkan

04:52.730 --> 04:54.640
atau pola bagi dan menaklukkan.

04:54.800 --> 04:56.350
Tapi bukan itu yang kami cari.

04:56.380 --> 05:00.840
Kami ingin subproblem yang tumpang tindih jika kami mencoba menggunakan pemrograman dinamis.

05:00.950 --> 05:06.520
Jadi, inilah kasus yang sangat istimewa di mana kami memiliki subproblem yang tumpang tindih dengan semacam penggabungan.

05:06.530 --> 05:08.660
Bayangkan ini array kami.

05:09.020 --> 05:11.320
Jadi kita punya 10 24 10:24.

05:11.570 --> 05:17.960
Nah sekarang kita melakukan hal yang sama tetapi ketika kita membaginya menjadi dua kita mengurutkan 10 masuk 24

05:17.960 --> 05:20.360
dan sekali lagi 10 umum 24.

05:20.390 --> 05:22.370
Jadi kita memiliki tumpang tindih di sini.

05:22.370 --> 05:26.630
Kami menyortir gabungan array yang sama menyortir subproblem yang sama.

05:26.660 --> 05:31.970
Jadi jika karena alasan tertentu kami memiliki data yang terlihat seperti ini dengan satu ton pengulangan yang

05:31.970 --> 05:35.410
merata di seluruh array maka kami benar-benar dapat menggunakan pemrograman dinamis.

05:35.600 --> 05:39.150
Ini hanya aplikasi yang sangat spesifik di semacam penggabungan.

05:39.150 --> 05:41.140
Biasanya data Anda tidak seperti itu.

05:41.230 --> 05:41.610
BAIK.

05:41.660 --> 05:47.720
Jadi itu subproblem yang tumpang tindih kami memiliki bagian-bagian kecil yang dipecah dan mereka harus tumpang tindih di suatu

05:47.780 --> 05:53.750
tempat ada beberapa duplikasi dari mereka seperti yang kita lihat di sini di mana Fibonacci 3 sedang dihitung lebih

05:53.750 --> 05:54.530
dari sekali.

05:54.770 --> 05:55.150
BAIK.

05:55.190 --> 05:59.600
Selanjutnya kita akan berbicara tentang kondisi lain yang merupakan sesuatu yang disebut substruktur optimal.
