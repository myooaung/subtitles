WEBVTT

00:00.330 --> 00:00.960
Baiklah.

00:00.960 --> 00:06.720
Jadi kami akhirnya benar-benar memperkenalkan istilah big-O. Pada dasarnya kami telah membicarakan tentang kami pergi

00:06.720 --> 00:09.120
tanpa benar-benar mengatakan istilah notasi Big-O.

00:09.330 --> 00:11.850
Jadi mari kita tinjau sekarang.

00:12.270 --> 00:17.010
Jadi big-O hanyalah cara penghitungan fuzzy yang diformalkan.

00:17.100 --> 00:23.310
Hal ini memungkinkan kita untuk berbicara dengan cara yang sangat formal tentang bagaimana runtime suatu algoritma tumbuh ketika input tumbuh.

00:23.320 --> 00:24.550
Itu dia.

00:24.570 --> 00:30.750
Ini adalah cara untuk menggambarkan hubungan antara input ke suatu fungsi atau saat ia tumbuh dan bagaimana hal

00:30.750 --> 00:33.200
itu mengubah runtime dari fungsi itu.

00:33.210 --> 00:40.160
Hubungan antara ukuran input dan waktu relatif terhadap input itu.

00:40.230 --> 00:43.450
Jadi kami tidak peduli tentang detail lainnya hanya tren luas.

00:43.860 --> 00:49.270
Jadi kita sudah bicara tentang tren luas yang kita bicarakan tentang OK dan tumbuh di sini.

00:49.680 --> 00:52.880
Dan solusi pertama di sini tidak masalah.

00:52.950 --> 00:59.400
Itu tidak memengaruhi waktu yang diperlukan, tetapi dalam solusi kedua kami

00:59.400 --> 01:06.450
yang membingungkan disebut tambah pertama dan tumbuh di sini runtime juga tumbuh dalam proporsi.

01:06.710 --> 01:11.030
Dasar kira-kira dalam pola linear satu ke satu dengan itu.

01:11.330 --> 01:17.220
Jadi itu besar jadi apa yang kita bicarakan sebenarnya belum menggunakan label yang benar.

01:17.720 --> 01:19.520
Jadi, inilah sedikit teks yang menakutkan.

01:19.520 --> 01:26.090
Kami mengatakan bahwa suatu algoritma dari atau adalah Big O dari f maka jika jumlah operasi sederhana yang harus dilakukan komputer

01:26.090 --> 01:30.770
pada akhirnya kurang dari waktu yang konstan untuk kejadian dan meningkatkannya adalah sekelompok omong kosong

01:31.070 --> 01:33.780
benar-benar apa yang dikatakannya adalah ada sekelompok ini.

01:33.800 --> 01:35.800
Saya hanya akan menempatkan mereka di sini untuk saat ini.

01:35.870 --> 01:37.340
Ada banyak pilihan.

01:37.370 --> 01:42.230
Jika Anda belum melihat notasi ini dengan cara ini hanya berarti suatu fungsi dengan input N dan kemudian

01:42.440 --> 01:42.950
output.

01:42.950 --> 01:46.920
Jadi kami menjelaskan hubungan antara input dan kemudian runtime.

01:47.330 --> 01:56.660
Jadi bisa berarti linear bahwa sebagai dan skala input skala runtime juga yang telah kita lihat.

01:56.780 --> 02:02.630
Bisa jadi sesuatu yang berbeda bisa kuadrat sedangkan dan run time kuadrat terkait dengan

02:02.630 --> 02:03.940
acara Square.

02:04.490 --> 02:07.830
Atau bisa juga konstan yang sudah Anda lihat dan tumbuh.

02:07.850 --> 02:13.460
Itu tidak benar-benar berdampak karena runtime selalu konstan yang kami sederhanakan menjadi satu atau itu bisa menjadi sesuatu

02:13.460 --> 02:14.780
yang sama sekali berbeda.

02:14.780 --> 02:19.250
Kami akan membahas beberapa opsi lain nanti di dalam kursus dan nanti di bagian Anda

02:19.250 --> 02:23.310
selalu dapat kembali dan hanya memikirkannya juga dan tumbuh sebagai input tumbuh.

02:23.390 --> 02:25.430
Seperti apa bagan ini nantinya.

02:25.430 --> 02:27.550
Apakah itu akan tumbuh secara proporsional secara kasar di dalam.

02:27.590 --> 02:29.180
Apakah akan konstan.

02:29.270 --> 02:33.070
Jika kami memiliki kotak, itu akan jauh lebih curam dari ini.

02:33.080 --> 02:38.580
Satu hal yang ingin saya soroti adalah ketika kita berbicara tentang besar oh kita berbicara tentang skenario terburuk.

02:38.870 --> 02:43.890
Jadi pada dasarnya kita berbicara tentang batas atas untuk runtime.

02:43.970 --> 02:46.370
Jadi mari kita kembali contoh-contoh kita dari sebelumnya.

02:46.520 --> 02:52.580
Ini pertama menambah hingga di mana kami hanya memiliki tiga operasi dan itu konstan. Selalu tiga operasi.

02:52.580 --> 02:56.520
Jadi garis yang kami lihat adalah yang ini di sini yang kira-kira konstan.

02:56.530 --> 02:58.610
Ingat di dunia nyata itu tidak sampai.

02:58.610 --> 02:59.830
Ini naik dan turun sedikit.

02:59.900 --> 03:04.050
Runtime memang bervariasi tetapi secara keseluruhan trennya cacat.

03:04.310 --> 03:08.960
Jadi kita dapat mengatakan bahwa ini memiliki yang besar dan ini adalah notasi yang akan kita lihat.

03:08.960 --> 03:14.840
Jadi ketika Anda melihat perubahan besar dan kemudian dalam tanda kurung Anda melihat satu atau Anda melihat ujung atau

03:14.840 --> 03:20.990
ujung kuadrat atau dan login dan atau login hal-hal yang belum kita dapatkan yang memberitahu kita bahwa seiring dan tumbuh

03:20.990 --> 03:26.700
sebagai input untuk fungsi ini tumbuh dalam hal ini tidak ada perubahan itu tidak tercermin dalam runtime.

03:27.230 --> 03:32.190
Tetapi jika kita melihat yang satu ini tambahkan hingga nama yang sama.

03:32.270 --> 03:37.430
Ini adalah salah satu yang memiliki banyak operasi yang terjadi di mana kami mengatakan

03:37.790 --> 03:44.680
bahwa itu tumbuh dan tumbuh runtime pada dasarnya tumbuh dalam rasio 1 banding 1 jumlah operasi akhirnya dibatasi oleh kelipatan.

03:44.690 --> 03:50.840
Dan sebenarnya tidak masalah apakah itu 1 dan atau 10 10 atau 15 karena pada akhirnya kami menyederhanakannya

03:50.840 --> 03:52.280
hanya untuk mengakhiri.

03:52.340 --> 03:55.480
Dan kita akan berbicara tentang aturan untuk menyederhanakan ekspresi ini.

03:55.790 --> 03:59.710
Tapi pada dasarnya kita hanya memperhatikan urutan besarnya.

03:59.810 --> 04:03.100
Jadi kita tidak peduli apakah itu 5 10 atau hanya tua.

04:03.110 --> 04:09.420
Dan itu sama ketika memetakan pada grafik besar dan kami memperbesar jalan keluar dan kami hanya membawa

04:09.420 --> 04:11.150
tas dengan cara fuzzy

04:11.150 --> 04:12.830
Saya kira itulah yang akan Anda katakan.

04:12.860 --> 04:14.720
Jadi, inilah contoh lain yang belum kita lihat.

04:15.030 --> 04:19.310
Ini disebut Count up and down dan semua yang dilakukannya disalin.

04:19.310 --> 04:26.020
Saya sebenarnya tidak memiliki apa yang Anda sebut potongan untuk itu tetapi mari kita tancapkan 10 saja.

04:26.040 --> 04:34.050
Jadi output kita naik 0 1 2 3 4 5 6 7 8 9 di bagian atas turun 9 8 tujuh enam lima empat tiga

04:34.050 --> 04:35.700
dua satu nol kembali turun.

04:35.700 --> 04:40.430
Baiklah jadi jika Anda mencoba mencari angka 0 besar untuk fungsi ini, kami akan mulai dengan mengatakan.

04:40.440 --> 04:40.800
Baiklah.

04:40.800 --> 04:47.610
Jadi di sini sebagai n tumbuh kita kira-kira memiliki operasi untuk memiliki lingkaran.

04:47.610 --> 04:56.280
Jadi ada yang besar dan di sini karena ini karena Ed tumbuh loop ini tumbuh hal yang sama di sini dan tumbuh loop

04:56.280 --> 04:57.160
ini tumbuh.

04:57.270 --> 05:00.510
Itu hanya melakukan hal yang sama agar kembali turun.

05:00.900 --> 05:02.870
Jadi Anda mungkin berpikir n besar itu ke N.

05:03.240 --> 05:06.830
Tetapi ingat bahwa kita tidak peduli bahwa kita peduli dengan gambaran besarnya.

05:06.840 --> 05:08.540
Jadi kami menyederhanakannya menjadi besar.

05:08.550 --> 05:15.420
Dan jadi jika kita kembali ke pelacak kinerja kita, saya telah menghitung naik dan turun ditambahkan

05:15.450 --> 05:23.970
di sini jadi itu direncanakan dengan seratus sepuluh ribu sepuluh dan Anda akan melihat saya pikir itu kecil, butuh waktu sementara

05:23.970 --> 05:26.030
yang berikutnya ambil selamanya.

05:26.340 --> 05:27.080
Itu dia.

05:27.360 --> 05:30.410
Dan Anda dapat melihat di sana kita mendapatkan bagan yang telah kita diskusikan.

05:30.510 --> 05:36.450
Ini adalah gambaran besar dari apa pun yang memiliki O besar N dan kami memiliki satu contoh lagi.

05:36.450 --> 05:38.310
Yang ini berbeda.

05:38.310 --> 05:39.260
Kami belum melihat ini.

05:39.390 --> 05:40.940
Jadi kami memiliki loop bersarang.

05:41.100 --> 05:43.810
Jadi apa yang dilakukannya itu disebut Cetak semua pasangan.

05:43.980 --> 05:52.440
Dan jika saya pasang lima, itu akan mencetak setiap pasangan angka 0 hingga 5 0 0 0 0 1 0 2

05:52.440 --> 05:53.890
sampai 5 5.

05:54.300 --> 05:59.250
Dan saya tidak, saya tidak akan menunjukkan contohnya, tetapi Anda dapat memercayai saya bahwa itulah yang dilakukannya.

05:59.250 --> 06:00.360
Dan ada dua loop.

06:00.600 --> 06:05.380
Dan seperti yang kita bahas dengan loop, loop ini didasarkan dari dan yang pertama ini.

06:05.460 --> 06:07.360
Jadi itu -O besar dari N.

06:07.380 --> 06:07.870
Kanan.

06:07.900 --> 06:12.690
Dan kotor Ini akan menjadi sejumlah operasi secara kasar.

06:12.690 --> 06:16.080
Tapi kemudian kita memiliki loop bersarang yang juga merupakan hal yang sama.

06:16.170 --> 06:22.890
O of N yang hanya berarti bahwa seiring dan tumbuh loop ini jumlah waktu berjalan beberapa kali berjalan

06:22.890 --> 06:23.930
juga tumbuh.

06:24.330 --> 06:30.330
Tapi ini bukan oh dari ke N yang menyederhanakan ke dari N karena bersarang.

06:30.450 --> 06:38.070
Dan itu memberi kita sesuatu yang lain dan lebih dari operasi bukannya operasi acara adalah 0 0 dari dan kuadrat.

06:38.430 --> 06:44.550
Jadi apa artinya ini adalah bahwa ketika n menumbuhkan runtime, kira-kira tumbuh pada laju akhir kuadrat.

06:44.550 --> 06:46.750
Jadi itu perbedaan yang cukup signifikan.

06:46.770 --> 06:49.920
Dan jika kita merencanakannya hanya dalam sedetik kita akan melihatnya.

06:50.160 --> 06:55.890
Tapi mudah-mudahan itu masuk akal dan saya berhenti sejenak yang masuk akal mengapa ada perbedaan seperti itu.

06:55.890 --> 07:03.950
Karena jika kita melangkah melalui ini jika dan mari kita pikirkan tentang jumlah pasangan jika ada.

07:04.170 --> 07:06.610
Kami memiliki pasangan 0 0 0 1.

07:06.720 --> 07:10.300
Maka kita harus memasangkan 1 0 dan 1 1 ke empat pasangan itu.

07:10.770 --> 07:15.690
Tetapi jika kita meningkat dan menjadi tiga tiba-tiba kita memiliki sembilan pasangan.

07:15.930 --> 07:19.940
Saya tidak akan membahas semuanya tetapi meningkat dengan sangat cepat jika kita bertambah menjadi empat.

07:19.940 --> 07:21.130
Kami punya 16 pasang.

07:21.210 --> 07:24.980
Jadi saya katakan saya tidak akan melakukan ini tetapi saya menambahkannya ke konsol saya cetak semua pasangan.

07:24.990 --> 07:25.900
Jika kita juga melakukannya.

07:26.060 --> 07:28.740
Nah, kita dapatkan empat pasang untuk tiga.

07:28.770 --> 07:30.610
Kami mendapat lebih banyak 9.

07:30.900 --> 07:38.750
Sekarang jika kita pergi ke sini dan plot ini mencetak semua pasangan yang saya maksud Anda mulai dari kecil dan lakukan 10 1.

07:38.780 --> 07:46.170
Saya bahkan tidak akan pergi ke 100 segera mari kita lakukan 50 sekarang mari kita lakukan seratus.

07:46.270 --> 07:51.980
Dua ratus dua puluh ratus lima puluh.

07:51.990 --> 07:54.420
Baiklah, jadi Anda bisa melihat apa yang kami kerjakan di sini.

07:55.660 --> 07:58.030
Dan coba 200.

07:58.400 --> 07:59.460
Mungkin perlu sedikit waktu.

07:59.590 --> 08:00.900
OK saya akan berhenti di sini.

08:00.910 --> 08:06.040
Ini adalah tren keseluruhan yang berbeda dengan versi grafik.

08:06.040 --> 08:12.820
Kami tidak melihat hal yang linier sedangkan sebagai kotor runtime secara proporsional proporsional

08:12.820 --> 08:21.800
dan kuadrat sehingga dan tumbuh lebih besar runtime tumbuh lebih besar itu tumbuh dan waktu dan lebih besar kira-kira.

08:22.120 --> 08:29.290
Dan hanya untuk menunjukkan ini kepada Anda jika saya meningkatkan ini menjadi 300, ini akan memakan waktu lebih lama dan saya pikir saya bermain

08:29.290 --> 08:34.510
sekitar 500 sebelumnya dan itu kira-kira sama dengan yang ingin dilakukan oleh browser komputer saya pada saat

08:34.510 --> 08:35.140
itu.

08:35.290 --> 08:36.130
Oh sayang.

08:36.510 --> 08:37.110
BAIK.

08:37.470 --> 08:37.870
Ini dia.

08:37.870 --> 08:41.410
Anda dapat melihat bahwa inilah yang dulu terlihat sangat curam.

08:41.410 --> 08:44.540
Sekarang kita telah menambahkannya dalam lima ratus. Itu tidak terlihat buruk.

08:44.560 --> 08:48.550
Dan sekarang terlihat sangat curam yang merupakan kurva eksponensial.

08:48.550 --> 08:54.700
Ingat bahwa ini hanya cara umum untuk berbicara tentang seberapa efisien suatu algoritma sebagai input

08:54.750 --> 08:55.810
dan berkembang.

08:55.930 --> 08:58.920
Bagaimana perubahan itu tercermin dalam runtime.

08:59.350 --> 09:00.960
Jadi kami telah melihat beberapa opsi.

09:01.120 --> 09:09.100
Kami melihat hingga pertama yang pada dasarnya besar-O dan sebagai dan tumbuh output runtime relatif terhadap

09:09.100 --> 09:09.660
akhir.

09:09.820 --> 09:14.350
Lalu kami harus menambahkan kedua, yang konstan.

09:14.350 --> 09:20.440
Selalu butuh kira-kira jumlah waktu yang sama dari yang kita hitung ke atas dan ke bawah di mana itu sama

09:20.440 --> 09:26.440
dengan menambahkan hingga pertama jika dan kotor jika tiga kali lipat dari runtime kita kira-kira akan tiga kali lipat.

09:26.620 --> 09:33.220
Dan akhirnya kami melihat mencetak semua pasangan yang kuadratik pertama kami dan 0 dari ujung kuadrat di

09:33.250 --> 09:37.960
mana sebagai peningkatan runtime meningkat secara kasar pada tingkat akhir kuadrat.

09:37.960 --> 09:42.180
Jadi saya berharap saya tidak kehilangan Anda di sana jika saya melakukannya.

09:42.370 --> 09:44.650
Yah kita punya beberapa latihan setelah ini.

09:44.680 --> 09:47.110
Semoga ini bisa membantu sedikit.

09:47.170 --> 09:51.490
Saya sarankan Anda bermain-main dengan alat itu tetapi hati-hati karena jika Anda bermain dalam jumlah super

09:51.580 --> 09:57.250
besar itu akan memakan waktu lama dan atau menghancurkan jendela browser Anda dan Anda harus keluar dari jendela itu hanya ada

09:57.250 --> 09:57.850
kata peringatan.
