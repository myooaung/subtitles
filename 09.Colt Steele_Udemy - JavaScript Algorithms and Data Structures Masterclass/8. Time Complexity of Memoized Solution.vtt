WEBVTT

00:00.180 --> 00:00.700
Baiklah.

00:00.700 --> 00:01.430
Selamat datang kembali.

00:01.560 --> 00:07.080
Dan video ini saya ingin dengan cepat berbicara tentang peningkatan kompleksitas waktu yang kita dapatkan

00:07.080 --> 00:14.490
dengan menghafal solusi kita seperti yang kita lihat sebelumnya versi yang tidak dihafal solusi rekursi polos adalah kompleksitas waktu eksponensial

00:14.490 --> 00:17.540
yang mengerikan juga dengan kekuatan n secara kasar.

00:17.550 --> 00:23.040
Dan itu berasal dari kenyataan bahwa kita menghitung nilai-nilai ini berulang-ulang dan versi yang dihafal kita

00:23.040 --> 00:24.450
tidak melakukan itu.

00:24.450 --> 00:30.510
Jadi ini mewakili pohon dari versi yang dihafal kami, tetapi saya akan berjalan berapa kali

00:30.510 --> 00:37.170
kita benar-benar menghitung nilai versus mencarinya karena ingat untuk melihat nilai di dalam array adalah waktu yang

00:37.170 --> 00:37.840
konstan.

00:37.860 --> 00:42.470
Kami menyimpan barang-barang di bawah indeks mereka sehingga Fibonacci 10.

00:42.510 --> 00:46.920
Kami menyimpan indeks kesepuluh angka kelima dimulai dengan indeks ke-50.

00:46.920 --> 00:52.980
Jadi untuk mencari sesuatu berdasarkan indeksnya adalah waktu konstan 0 dari 1, itu tidak benar-benar membuat perbedaan

00:53.400 --> 00:55.920
ketika Anda berbicara tentang skema besar.

00:56.130 --> 01:02.880
Jadi ketika katakanlah kita melakukan lima dari tujuh seperti yang kita lihat di sini dan tujuh berapa kali

01:02.880 --> 01:05.170
kira-kira kita harus melakukan perhitungan besar.

01:05.370 --> 01:11.350
Kita harus mencari lima dari enam dan kita harus mencari masing-masing lima dan empat dan tiga satu kali

01:11.370 --> 01:16.890
dan kemudian dua dalam satu kita tidak akan benar-benar memasukkan karena mereka adalah waktu yang konstan.

01:16.890 --> 01:19.150
Kami hanya memiliki pernyataan IF sederhana mengembalikan satu.

01:19.200 --> 01:21.010
Jika dan satu atau dua.

01:21.360 --> 01:27.390
Tetapi sekarang setiap kali kita merujuk tiga atau lima sebelum lima besar di sini kita tidak perlu

01:27.390 --> 01:28.770
melakukan ini lagi.

01:28.950 --> 01:31.220
Itu semua seperti X raksasa yang melewatinya.

01:31.290 --> 01:36.820
Kami hanya mencari nilai yang sesuai dalam memo array kami yang merupakan waktu konstan.

01:36.840 --> 01:44.280
Jadi untuk menyederhanakan Alfas kita akan mengatakan bahwa kira-kira seiring dan bertambah waktu yang dibutuhkan untuk

01:44.520 --> 01:48.270
algoritma kita tumbuh sebanding dengan acara O.

01:48.270 --> 01:50.310
Sekarang tentu saja ingat itu generalisasi.

01:50.310 --> 01:56.100
Ini tidak tepat dan kami tidak selalu melakukan tujuh perhitungan atau 10 perhitungan jika dan itu 10.

01:56.130 --> 01:59.800
Kami hanya mengatakan itu tumbuh secara linear sejalan dengan N.

02:00.210 --> 02:05.730
Dan jika kita melihat pada grafik yang kita lihat sebelumnya dari situs web lembar contekan besar-O ini adalah

02:05.940 --> 02:07.860
apa yang kita kerjakan di sini.

02:07.980 --> 02:10.110
Sangat buruk, sangat curam.

02:10.110 --> 02:12.760
Ini merupakan peningkatan besar.

02:12.900 --> 02:18.840
Dan ketika saya menunjukkan kepada Anda beberapa video yang lalu jika kami mencoba versi yang tidak diingat.

02:18.840 --> 02:20.580
Ini akan berlangsung selamanya.

02:20.770 --> 02:27.430
Mari kita lihat mari kita lakukan sesuatu yang lambat seperti mari kita lakukan lima dari tiga puluh lima mungkin OK.

02:27.450 --> 02:28.540
Yah, itu tidak terlalu buruk.

02:28.710 --> 02:30.090
Mari kita lakukan lima dari 40.

02:30.090 --> 02:32.370
Ini akan memakan waktu cukup lama.

02:32.370 --> 02:32.690
Baiklah.

02:32.700 --> 02:37.210
Jadi itu adalah pasangan yang seperti satu atau dua detik dan ulang lima dari 45.

02:37.470 --> 02:44.640
Dan perbedaan kecil lima digit lima angka dalam urutan ini benar-benar menambah banyak waktu karena

02:44.640 --> 02:47.960
kita berbicara tentang grafik eksponensial ini.

02:48.090 --> 02:49.250
Ini lebih banyak pekerjaan.

02:49.260 --> 02:50.400
Baiklah, kita mulai.

02:50.400 --> 02:56.010
Dan sekarang jika kita membandingkannya dengan versi hafal yang baru saja saya jalankan kita tidak membutuhkan konsol itu.

02:56.220 --> 02:58.880
Saya akan melakukan serat 45.

02:58.890 --> 02:59.360
Itu dia.

02:59.370 --> 03:00.540
Kami segera mendapatkannya.

03:00.540 --> 03:06.810
Saya bisa melakukan lima dari 100 tetapi kemudian kita menghadapi masalah membuat angka yang semakin besar

03:06.810 --> 03:10.980
sehingga pada akhirnya kita akan memiliki beberapa ketidakakuratan dalam javascript.

03:11.220 --> 03:12.620
Jadi ini merupakan peningkatan besar.

03:12.720 --> 03:13.820
Pasti sepadan.

03:13.830 --> 03:19.230
Dan tidak banyak yang bisa dilakukan untuk mengingat apa yang telah kita hitung dan hanya mencarinya

03:19.230 --> 03:20.290
jika sudah ada.

03:20.520 --> 03:26.130
Ini hanya beberapa baris lebih banyak dibandingkan dengan solusi asli tetapi perbedaan besar dalam kompleksitas

03:26.160 --> 03:27.010
waktu kompleksitas.
