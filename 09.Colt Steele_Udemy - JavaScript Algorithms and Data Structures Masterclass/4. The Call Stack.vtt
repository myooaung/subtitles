WEBVTT

00:00.090 --> 00:00.470
Anda akan mendapatkannya.

00:00.480 --> 00:03.740
Jadi kita hampir sampai pada titik di mana kita semacam menulis fungsi rekursif kita sendiri.

00:03.780 --> 00:08.970
Tetapi pertama-tama kita harus berbicara tentang satu hal penting yaitu apa yang terjadi di balik layar ketika

00:09.000 --> 00:10.420
fungsi dipanggil dalam javascript.

00:10.510 --> 00:15.920
Jika fungsi rekursif memanggil dirinya berulang kali apa yang terjadi di balik layar.

00:16.020 --> 00:20.980
Dan ini penting bagi kita untuk mengerti untuk menulis kode rekursif efektif yang tidak rusak

00:21.480 --> 00:26.520
Jadi di hampir semua bahasa pemrograman ada beberapa struktur data di belakang

00:26.580 --> 00:31.770
layar yang mengelola fungsi panggilan fungsi ketika mereka dipanggil sering menunggu fungsi lain kembali.

00:31.780 --> 00:37.170
Ada ada urutan khusus yang terjadi fungsi yang benar tidak hanya terjadi secara acak seperti jika Anda

00:37.320 --> 00:41.450
memiliki fungsi yang dipanggil pertama dan kemudian alih-alih fungsi yang disebut fungsi kedua.

00:41.730 --> 00:43.550
Anda membutuhkan mereka untuk pergi dalam urutan yang benar.

00:43.860 --> 00:49.530
Dan ada sesuatu struktur data yang bertanggung jawab atas hal itu dalam javascript yang disebut tumpukan panggilan.

00:49.680 --> 00:52.290
Jadi Anda bisa menganggapnya sebagai setumpuk kertas atau sesuatu.

00:52.290 --> 00:55.670
Sebenarnya ini adalah struktur data yang disebut tumpukan yang akan kita pelajari nanti.

00:55.800 --> 01:00.720
Anda mungkin pernah mendengar tentang tumpukan dan Qs sebelumnya, tetapi semua yang akan kami katakan untuk

01:00.720 --> 01:05.390
saat ini adalah bahwa ketika suatu fungsi dipanggil, ia diletakkan di bagian atas tumpukan panggilan.

01:05.400 --> 01:10.470
Jadi sama seperti kita memiliki setumpuk kertas di meja kita yang pertama yang terbaru yang kita pakai

01:11.550 --> 01:16.980
berjalan di atas dan kemudian ketika javascript melihat kata kunci kembali atau ketika suatu fungsi dan tidak ada

01:17.280 --> 01:21.300
kode lagi untuk menjalankan kompiler akan menghapus bagian atas item dari tumpukan.

01:21.300 --> 01:22.570
Jadi ide tumpukan.

01:22.590 --> 01:28.320
Alasan saya mengatakan setumpuk kertas di atas meja adalah karena Anda meletakkan sesuatu di atas ketika Anda menghapus sesuatu yang

01:28.320 --> 01:32.030
Anda juga menghapus dari atas Anda tidak menghapus dari bawah tumpukan kertas.

01:32.040 --> 01:34.050
Anda mengambil apa pun yang ada di atas.

01:34.050 --> 01:35.850
Jadi itulah gagasan tumpukan panggilan.

01:35.860 --> 01:39.740
Apa yang akan saya tunjukkan kepada Anda sekarang adalah seperti apa di alat dev chrome.

01:39.810 --> 01:45.700
Ketika kita memiliki beberapa fungsi, panggilan akan terlihat seperti apa tumpukan itu mencerminkan fungsi-fungsi tersebut.

01:45.870 --> 01:51.470
Ok jadi saya punya cuplikan di sini yang saya buat sangat konyol tetapi memiliki empat fungsi yang berbeda.

01:51.790 --> 01:57.720
Ada fungsi yang disebut Bangun dan panggilan bangun mandi sarapan dan kemudian mencetak di akhir ketika

01:57.720 --> 02:00.710
semuanya sudah selesai siap untuk pergi bekerja.

02:00.720 --> 02:07.530
Jadi bangun dipanggil ke sini dan kemudian bangun panggilan mandi dan mandi sederhana

02:07.530 --> 02:09.190
saja kembali mandi.

02:09.390 --> 02:15.360
Kemudian kita makan sarapan dan makan sarapan disebut dan itu sedikit lebih rumit karena mengatur

02:15.450 --> 02:19.700
makanan variabel sama dengan memasak makanan yang merupakan fungsi lain.

02:19.710 --> 02:24.240
Jadi memasak makanan akan kemudian dipanggil dan itu kembali.

02:24.460 --> 02:27.210
Nah ada daftar item dan mengambilnya secara acak.

02:27.450 --> 02:28.860
Jadi akan memilih salah satu dari tiga hal ini.

02:28.860 --> 02:31.110
Itulah yang dilakukan kode ini dan kembalikan saja.

02:31.110 --> 02:38.530
Jadi memasak makanan bisa mengembalikan telur kemudian makan sarapan menunggu makanan itu sekarang telur kembali.

02:38.550 --> 02:41.760
Makan telur dan kemudian bangun sudah menunggu itu.

02:41.950 --> 02:45.310
Dan karena sarapan itulah yang menahan segalanya.

02:45.330 --> 02:47.710
Kemudian kami pindah ke mode dewasa.

02:47.760 --> 02:48.070
BAIK.

02:48.090 --> 02:49.240
Siap berangkat kerja.

02:49.380 --> 02:51.980
Jadi saya akan menunjukkan kepada Anda bahwa saya akan melewati ini satu per satu.

02:52.080 --> 02:54.500
Satu panggilan fungsi sekaligus.

02:54.510 --> 03:00.480
Dan cara saya akan melakukannya di sini saya memiliki jendela panggilan stack terbuka dan saya akan

03:00.480 --> 03:02.420
menambahkan breakpoint di sini.

03:02.560 --> 03:09.340
Jadi ketika saya menekan tombol kecil ini untuk menjalankannya atau perintah masuk pada Mac apa yang akan terjadi adalah bahwa di sini kita

03:09.340 --> 03:11.810
akan melihat hal-hal yang ditambahkan ke tumpukan panggilan.

03:12.130 --> 03:19.690
Jadi saya tekan perintah enter dan saya akan melangkah melaluinya dengan ini hal kecil di sini panah ini.

03:19.750 --> 03:24.680
Jadi hal pertama yang terjadi adalah kita bisa bangun dan Anda dapat melihat Bangun ada di tumpukan panggilan.

03:24.680 --> 03:26.910
Sekarang kertas pertama yang diletakkan.

03:27.460 --> 03:31.920
Tetapi bangun tidak terselesaikan itu belum mengembalikan sesuatu yang belum dilakukan.

03:31.930 --> 03:35.540
Bahkan hal pertama yang dilakukannya disebut Mandi.

03:35.980 --> 03:42.520
Jadi mandi ditambahkan ke tumpukan panggilan jadi sekarang setengah tumpukan dengan dua panggilan fungsi di atasnya.

03:42.700 --> 03:43.880
Jadi mandi.

03:44.110 --> 03:44.630
Itu mudah.

03:44.660 --> 03:49.400
Baru saja kembali mandi dan Anda benar-benar melihatnya di sini.

03:49.750 --> 03:56.650
Jadi kami sedang mandi sekarang mengembalikan nilai mandi dan kemudian dihapus dari tumpukan panggilan

03:56.650 --> 03:58.200
karena mengembalikan nilai.

03:58.240 --> 04:02.140
Kemudian kita bergerak mundur untuk bangun bagian selanjutnya dari bangun.

04:02.140 --> 04:03.310
Kami sudah melakukan ini.

04:03.310 --> 04:05.290
Sekarang untuk sarapan.

04:05.290 --> 04:10.840
Jadi sarapan ditambahkan ke bagian atas tumpukan dan Anda dapat melihat apakah sarapan tidak sesederhana itu.

04:11.140 --> 04:17.320
Makan sarapan akan memanggil memasak makanan dan memasak makanan ditambahkan ke bagian atas tumpukan.

04:17.320 --> 04:21.060
Jadi sekarang kita sudah bangun yang masih menunggu sarapan.

04:21.060 --> 04:23.110
Makan sarapan menunggu makanan masak.

04:23.110 --> 04:31.770
Jadi memasak makanan adalah yang pertama membuat array item ini Anda dapat melihat bahwa dalam lingkup lokal item dibuat

04:31.770 --> 04:32.350
sekarang

04:32.500 --> 04:39.000
Baris berikutnya akan memilih item acak dan mengembalikannya yang merupakan apa yang akan dikembalikan.

04:39.040 --> 04:40.580
Protein shake.

04:40.600 --> 04:45.730
Jadi sekarang memasak makanan sudah selesai karena itu kembali dan kami kembali padanya aku seharusnya tidak mengatakan kembali.

04:45.730 --> 04:50.970
Kami kembali makan sarapan yang sudah menunggu makanan masak.

04:51.010 --> 04:56.610
Jadi sekarang Anda bisa melihat makan sarapan di ruang lingkup lokal sama dengan protein shake.

04:56.740 --> 04:58.840
Jadi kita akan kembali.

04:58.940 --> 05:06.030
Makan makanan giliran Anda makan protein kocok kembali.

05:06.250 --> 05:10.450
Yang berarti makan sarapan berikutnya dihapus dari tumpukan itu selesai.

05:10.470 --> 05:15.510
Dan akhirnya kami kembali untuk bangun yang telah menunggu dengan sabar selama ini dan kami dapat

05:15.540 --> 05:16.510
membatalkan log itu.

05:16.590 --> 05:17.660
OK siap berangkat kerja.

05:17.680 --> 05:19.060
Anda akan melihat dermaga di sini.

05:19.990 --> 05:21.270
OK siap berangkat kerja.

05:21.340 --> 05:25.640
Dan sekarang kita selesai dengan Bangun dan kita selesai sekarang.

05:25.660 --> 05:26.960
Kita pada akhirnya.

05:27.010 --> 05:27.760
Itu dia.

05:28.030 --> 05:30.110
Jadi ada banyak hal yang terjadi di sana.

05:30.280 --> 05:35.230
Tetapi ide di baliknya adalah bahwa ketika fungsi dipanggil mereka ditambahkan ke bagian atas tumpukan

05:35.230 --> 05:38.880
dan kemudian mereka dikeluarkan satu per satu dari atas juga.

05:39.370 --> 05:44.220
Jadi alasan mengapa kita membahas harapan pertama ini dengan jelas adalah apa yang terjadi di sana.

05:44.230 --> 05:48.880
Alat dev ini berguna jika Anda belum pernah melihat alat panggilan tumpukan di sini. Sangat

05:48.880 --> 05:53.450
menyenangkan untuk dapat melangkah dan memahami memesan hal-hal yang terjadi dan menunggu apa.

05:53.560 --> 05:57.850
Tapi alasan saya menunjukkannya kepada Anda sekarang ketika kita membahas rekursi adalah bahwa ketika

05:57.850 --> 06:01.540
kita sedang menulis fungsi rekursif kita akan sering bekerja dengan tumpukan panggilan.

06:01.840 --> 06:05.950
Jadi Anda mungkin Anda terbiasa dengan fungsi yang didorong pada tumpukan dan muncul tepat

06:05.950 --> 06:06.790
setelah selesai.

06:07.410 --> 06:10.120
Tetapi dengan fungsi rekursif itu berbeda.

06:10.120 --> 06:14.350
Mereka terus mendorong fungsi baru berulang-ulang ke tumpukan panggilan.

06:14.350 --> 06:18.730
Bahkan fungsi yang sama berulang-ulang dan menunggu untuk dipanggil.

06:18.730 --> 06:25.750
Jadi jika kita mengambil ide ini dari beberapa bagian memanggil beberapa bagian dan terus menyebut dirinya berulang-ulang di tumpukan panggilan akan

06:25.750 --> 06:30.400
terlihat seperti data pada bagian atas dan bagian atas berdasarkan bagian yang harus berakhir

06:30.430 --> 06:31.770
di suatu tempat.

06:32.110 --> 06:35.440
Dan itulah yang akan kita bicarakan di video berikutnya ketika kita benar-benar

06:35.440 --> 06:38.050
menulis kode rekursif pertama kita di mana ia berakhir.

06:38.050 --> 06:41.370
Kami telah menetapkan bahwa fungsi rekursif memanggil dirinya sendiri.

06:41.590 --> 06:42.900
Tapi bagaimana kita tahu kapan itu berhenti.

06:42.910 --> 06:46.390
Karena kalau tidak itu ada di tumpukan panggilan hanya akan terus berjalan selamanya.

06:46.570 --> 06:48.100
Dan kita akan membicarakannya juga.

06:48.250 --> 06:50.440
Jadi semoga ini membuatnya sedikit lebih jelas.

06:50.470 --> 06:56.230
Tapi panggilan tumpukan itu adalah hal di balik layar dalam javascript bahwa itu adalah struktur data tumpukan

06:56.330 --> 07:02.350
yang semua artinya adalah bahwa hal-hal yang ditambahkan ke atas dan menghapus pertama dari atas dan fungsi ketika

07:02.440 --> 07:04.740
mereka dipanggil ditambahkan ke struktur ini.

07:05.110 --> 07:07.570
Jadi selanjutnya kita akhirnya akan menulis beberapa kode rekursif.
