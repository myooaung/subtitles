1
00:00:01,840 --> 00:00:06,060
In your typical Java web application, you have a server,

2
00:00:06,060 --> 00:00:09,040
which manages a servlet container.

3
00:00:09,040 --> 00:00:14,200
The containers host the servlets that process the incoming request.

4
00:00:14,200 --> 00:00:16,250
When you configure Spring MVC,

5
00:00:16,250 --> 00:00:22,040
you are effectively adding a Spring servlet called the dispatcher servlet,

6
00:00:22,040 --> 00:00:26,440
which intercepts all requests for your MVC application.

7
00:00:26,440 --> 00:00:29,350
Now in addition to servlets, there are filters.

8
00:00:29,350 --> 00:00:33,840
Filters sit in front of the servlets and intercept all requests.

9
00:00:33,840 --> 00:00:36,840
These are great if you need to perform some operations on the

10
00:00:36,840 --> 00:00:40,140
request before it actually reaches the servlets.

11
00:00:40,140 --> 00:00:43,780
Now filters can also prevent requests from reaching servlets,

12
00:00:43,780 --> 00:00:47,940
making them perfect for performing security checks.

13
00:00:47,940 --> 00:00:50,760
Hence, when you configure Spring Security,

14
00:00:50,760 --> 00:00:54,370
you're essentially adding a Spring Security filter

15
00:00:54,370 --> 00:00:57,340
called the DelegatingFilterProxy,

16
00:00:57,340 --> 00:01:02,240
which intercepts all requests before they reach the dispatcher servlet.

17
00:01:02,240 --> 00:01:07,740
Now this filter then delegates the requests to a FilterChainProxy.

18
00:01:07,740 --> 00:01:10,840
The FilterChainProxy, as the name suggests,

19
00:01:10,840 --> 00:01:16,140
manages the routing of the requests to Spring Security filter chains,

20
00:01:16,140 --> 00:01:21,940
which are collections of filters that perform security checks.

21
00:01:21,940 --> 00:01:24,580
Now different requests can be configured to be

22
00:01:24,580 --> 00:01:27,340
handled by different filter chains.

23
00:01:27,340 --> 00:01:30,840
Generally though, you would have just one filter change,

24
00:01:30,840 --> 00:01:35,330
but you could configure multiple ones for different parts of your application.

25
00:01:35,330 --> 00:01:40,940
Example, all requests for /portfolio could go through filter chain 1,

26
00:01:40,940 --> 00:01:44,840
and all requests to /admin to filter chain 2.

27
00:01:44,840 --> 00:01:49,920
This allows you to customize your authentication and authorization for

28
00:01:49,920 --> 00:01:53,620
different parts of the application if the need arises.

29
00:01:53,620 --> 00:01:56,930
If we put a breakpoint in the FilterChainProxy and

30
00:01:56,930 --> 00:01:59,040
try to access the application,

31
00:01:59,040 --> 00:02:02,840
you can see the filter chains configured by Spring Boot,

32
00:02:02,840 --> 00:02:06,340
which comprise of around 14 filters.

33
00:02:06,340 --> 00:02:09,870
We can see a LogoutFilter to handle logout requests,

34
00:02:09,870 --> 00:02:12,530
the UsernamePasswordAuthenticationFilter,

35
00:02:12,530 --> 00:02:14,020
which, as the name suggests,

36
00:02:14,020 --> 00:02:17,420
retrieves the username and password from the body of the login

37
00:02:17,420 --> 00:02:20,940
request and essentially authenticates the user.

38
00:02:20,940 --> 00:02:22,890
There is also a BasicAuthenticationFilter.

39
00:02:22,890 --> 00:02:25,170
So in our application,

40
00:02:25,170 --> 00:02:29,560
we can actually also login via basic authentication and so on,

41
00:02:29,560 --> 00:02:34,840
each filter vetting the request or performing some sort of security task.

42
00:02:34,840 --> 00:02:39,740
Now when it comes to authentication, the authentication filters are key.

43
00:02:39,740 --> 00:02:42,510
There are many flavors of these from the username and

44
00:02:42,510 --> 00:02:47,280
password to form authentication, digest,

45
00:02:47,280 --> 00:02:50,930
basic, OAuth, and you can even create your own.

46
00:02:50,930 --> 00:02:56,140
Essentially, an authentication filter will intercept an authentication request,

47
00:02:56,140 --> 00:03:01,110
create an authentication request object with the user's credentials,

48
00:03:01,110 --> 00:03:07,240
and it will then request the AuthenticationManager to authenticate the request.

49
00:03:07,240 --> 00:03:09,820
The AuthenticationManager will, in turn,

50
00:03:09,820 --> 00:03:13,100
delegate authentication to an appropriate authentication

51
00:03:13,100 --> 00:03:17,360
provider as there are many ways to authenticate other than just

52
00:03:17,360 --> 00:03:19,660
simply comparing a username and password.

53
00:03:19,660 --> 00:03:25,440
You have RFID, LDAP, OAuth, OpenID Connect, you name it.

54
00:03:25,440 --> 00:03:25,710
Hence,

55
00:03:25,710 --> 00:03:28,840
Spring Security has a selection of providers you can

56
00:03:28,840 --> 00:03:34,240
configure for the most popular types, but you can also create your own.

57
00:03:34,240 --> 00:03:37,100
Now the manager is responsible for delegating the request to

58
00:03:37,100 --> 00:03:40,470
the appropriate authentication provider that deals with that

59
00:03:40,470 --> 00:03:42,840
type of authentication request.

60
00:03:42,840 --> 00:03:46,140
If the authentication is successful,

61
00:03:46,140 --> 00:03:50,140
the provider will return an authenticated principal object,

62
00:03:50,140 --> 00:03:54,720
and the authentication filter will then store this principal in an

63
00:03:54,720 --> 00:03:59,200
object called the security context where it can be retrieved by

64
00:03:59,200 --> 00:04:03,990
other filters lower down in the filter chain or your application

65
00:04:03,990 --> 00:04:09,000
code to access any of the authenticated principal details or to

66
00:04:09,000 --> 00:04:10,300
confirm authentication.

67
00:04:10,300 --> 00:04:15,140
Now in a web application, this would generally be stored in a session.

68
00:04:15,140 --> 00:04:18,840
Now if we go back to debug mode, you can actually see all these components.

69
00:04:18,840 --> 00:04:21,620
Here we have the username and password filter.

70
00:04:21,620 --> 00:04:24,640
You can see it has an AuthenticationManager,

71
00:04:24,640 --> 00:04:29,150
and the AuthenticationManager has an authentication provider collection.

72
00:04:29,150 --> 00:04:30,060
In this case though,

73
00:04:30,060 --> 00:04:33,040
we just have one authentication provider as we're just

74
00:04:33,040 --> 00:04:36,340
authenticating using the username or password.

75
00:04:36,340 --> 00:04:39,310
Now this is a lot to take in, but don't worry.

76
00:04:39,310 --> 00:04:40,670
In subsequent modules,

77
00:04:40,670 --> 00:04:49,000
we'll be configuring these components to meet different security requirements, so you'll become very familiar with these.

