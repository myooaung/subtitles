WEBVTT
1
00:00:01.740 --> 00:00:04.290
Okay, so you have your secrets encrypted,

2
00:00:04.290 --> 00:00:09.140
but effective secret management also involves secret rotation.

3
00:00:09.140 --> 00:00:12.850
Secrets to sensitive resources like databases need to

4
00:00:12.850 --> 00:00:14.910
be changed and updated frequently,

5
00:00:14.910 --> 00:00:19.240
hence reducing the impact of any leaked secrets to that duration.

6
00:00:19.240 --> 00:00:22.740
Now the more frequently your secrets are rotated, the better.

7
00:00:22.740 --> 00:00:24.640
In order to rotate your secrets,

8
00:00:24.640 --> 00:00:28.270
you need to know which entity has access to them,

9
00:00:28.270 --> 00:00:33.370
and, ideally, an audit log of by who and when the secrets were accessed,

10
00:00:33.370 --> 00:00:37.500
so that any stale secrets that are no longer used after some

11
00:00:37.500 --> 00:00:40.840
time can be detected and decommissioned.

12
00:00:40.840 --> 00:00:43.860
Now in the early stages of an application you can get

13
00:00:43.860 --> 00:00:48.470
away with rotating secrets manually, but as your application scales,

14
00:00:48.470 --> 00:00:53.420
this becomes difficult and time consuming and very prone to human error.

15
00:00:53.420 --> 00:00:57.560
What tends to metastasize is something known as secret sprawl,

16
00:00:57.560 --> 00:01:00.940
where these credentials are distributed to different places,

17
00:01:00.940 --> 00:01:03.220
in plain text in a properties file perhaps,

18
00:01:03.220 --> 00:01:07.000
some environment variables, in the source code,

19
00:01:07.000 --> 00:01:09.570
in the configuration management like Jenkins,

20
00:01:09.570 --> 00:01:11.940
Ansible, Bamboo, Puppet,

21
00:01:11.940 --> 00:01:16.440
and ultimately they end up in source control like Git or SVN.

22
00:01:16.440 --> 00:01:19.440
Now this often leads to duplication.

23
00:01:19.440 --> 00:01:23.620
Now one application might source the secrets from a property file and

24
00:01:23.620 --> 00:01:27.310
another might source the same secret from a database.

25
00:01:27.310 --> 00:01:31.540
Basically, the credentials are spread across your infrastructure.

26
00:01:31.540 --> 00:01:35.690
A good option is to centralize your secrets in one location and

27
00:01:35.690 --> 00:01:38.640
provide fineâ€‘grained access to those secrets,

28
00:01:38.640 --> 00:01:43.520
only giving clients the bare minimum access to secrets they need to use,

29
00:01:43.520 --> 00:01:46.440
so using things like access control lists.

30
00:01:46.440 --> 00:01:49.720
You also want your secrets to be encrypted both at

31
00:01:49.720 --> 00:01:52.640
rest and in transit to the client,

32
00:01:52.640 --> 00:01:56.670
and the ability to rotate the secrets,i.e., change them frequently.

33
00:01:56.670 --> 00:02:02.640
And finally, you want audit by who and when was the secret accessed.

34
00:02:02.640 --> 00:02:07.730
Now, fortunately, Spring provides a solution for this with Spring Vault,

35
00:02:07.730 --> 00:02:13.120
which is an abstraction around Vault by HashiCorp from the Spring Cloud project.

36
00:02:13.120 --> 00:02:17.940
Now, setting up Vault is a bit out of scope for this Spring Security course.

37
00:02:17.940 --> 00:02:27.000
You can check out my previous course, which is a little bit out of date, but actually goes through the steps of how to do this.

