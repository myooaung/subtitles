WEBVTT
1
00:00:01.740 --> 00:00:04.730
Here is our application.yml file.

2
00:00:04.730 --> 00:00:06.990
The key‑store‑password is in plain text.

3
00:00:06.990 --> 00:00:11.800
If a malicious party got a hold of the certificate and the key‑store‑password,

4
00:00:11.800 --> 00:00:15.540
they could effectively perform a man‑in‑the‑middle attack.

5
00:00:15.540 --> 00:00:20.630
One way to reduce the risk of that happening is to encrypt the credentials.

6
00:00:20.630 --> 00:00:24.140
For this, we can use the jasypt library.

7
00:00:24.140 --> 00:00:26.840
It has great Spring support.

8
00:00:26.840 --> 00:00:31.840
Simply download the latest jasypt distribution from their website.

9
00:00:31.840 --> 00:00:32.980
If you unzip it,

10
00:00:32.980 --> 00:00:37.530
there's a bin folder with some very useful script for encrypting and decrypting.

11
00:00:37.530 --> 00:00:41.150
Now using the encrypt script, pass in the input,

12
00:00:41.150 --> 00:00:43.440
which is the string you want to encrypt.

13
00:00:43.440 --> 00:00:45.510
In our case, it's the key‑store‑password,

14
00:00:45.510 --> 00:00:50.840
and then provide a password which can be used to decrypt this later.

15
00:00:50.840 --> 00:00:53.540
Now that we have generated this ciphertext,

16
00:00:53.540 --> 00:00:57.340
add the latest jasypt Spring Boot starter dependency,

17
00:00:57.340 --> 00:01:02.680
and in the application.yml, replace the key‑store‑password with ENC,

18
00:01:02.680 --> 00:01:05.880
brackets, and the encrypted stream closed within.

19
00:01:05.880 --> 00:01:10.340
Now, in order for jasypt to be able to decrypt the ciphertext,

20
00:01:10.340 --> 00:01:14.400
we need to provide it with the password and what algorithm we used.

21
00:01:14.400 --> 00:01:19.400
For the password of the ciphertext, we could put it in the properties file,

22
00:01:19.400 --> 00:01:22.780
but that kind of defeats the purpose as anyone could

23
00:01:22.780 --> 00:01:25.480
decrypt it by looking at our properties file,

24
00:01:25.480 --> 00:01:29.940
and they would have all the details, the algorithm and the password.

25
00:01:29.940 --> 00:01:30.120
Hence,

26
00:01:30.120 --> 00:01:34.210
other better options are to either pass in the value of the

27
00:01:34.210 --> 00:01:36.940
password using environment variables.

28
00:01:36.940 --> 00:01:40.370
This is a much better way as it's not in source control.

29
00:01:40.370 --> 00:01:44.740
Now a good idea is to also not store the algorithm in a properties file,

30
00:01:44.740 --> 00:01:48.340
as this makes it much harder for any malicious party

31
00:01:48.340 --> 00:01:51.010
trying to brute force the ciphertext.

32
00:01:51.010 --> 00:01:51.800
Now one thing to note,

33
00:01:51.800 --> 00:01:55.850
the defaults used by the command‑line interface and the jasypt

34
00:01:55.850 --> 00:01:59.940
Spring Boot implementation don't exactly line up.

35
00:01:59.940 --> 00:02:03.240
And as of version 3.0.2,

36
00:02:03.240 --> 00:02:06.790
you also need to configure the initialization vector class,

37
00:02:06.790 --> 00:02:09.020
which is the no‑initialization vector.

38
00:02:09.020 --> 00:02:14.040
Now with jasypt, you can also use encrypted values within your source code.

39
00:02:14.040 --> 00:02:17.440
This is a great start as our secrets are now encrypted.

40
00:02:17.440 --> 00:02:24.000
But there is more to effective secret management than just encryption. Let's discuss this next.

