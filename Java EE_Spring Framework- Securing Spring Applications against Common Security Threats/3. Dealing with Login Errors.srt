1
00:00:01,640 --> 00:00:05,330
If the wrong username or password is entered by the user,

2
00:00:05,330 --> 00:00:06,200
by default,

3
00:00:06,200 --> 00:00:12,060
Spring will redirect them back to the login page with the query parameter error,

4
00:00:12,060 --> 00:00:13,000
hence,

5
00:00:13,000 --> 00:00:17,600
in our login page we could look out for this parameter and

6
00:00:17,600 --> 00:00:20,250
provide the user with a generic error message.

7
00:00:20,250 --> 00:00:23,470
Now best practice is not to be specific as to

8
00:00:23,470 --> 00:00:27,220
whether the username exists or not, or the password was wrong,

9
00:00:27,220 --> 00:00:31,450
just a simple generic message that either could be incorrect,

10
00:00:31,450 --> 00:00:35,740
as this will prevent any malicious party trying to get a list of usernames

11
00:00:35,740 --> 00:00:39,140
in your application through any brute force attacks.

12
00:00:39,140 --> 00:00:42,440
If you wanted to redirect the user to a different page,

13
00:00:42,440 --> 00:00:47,620
you could use the formLogin builder to configure the authorization filter.

14
00:00:47,620 --> 00:00:53,240
Again, if you were using Basic, it would be the Basic login builder method.

15
00:00:53,240 --> 00:00:57,370
Here we can specify what failureUrl we want.

16
00:00:57,370 --> 00:01:01,590
You might also want to perform some tasks when authentication failures occur,

17
00:01:01,590 --> 00:01:05,390
like keep a count of them and log out or _____ accounts to

18
00:01:05,390 --> 00:01:07,940
protect against any brute force attacks,

19
00:01:07,940 --> 00:01:12,240
or perhaps to simply log them or notify the user by email.

20
00:01:12,240 --> 00:01:16,340
You can do this by adding an AuthenticationFailureHandler.

21
00:01:16,340 --> 00:01:20,800
Simply create a class that implements the AuthenticationFailureHandler

22
00:01:20,800 --> 00:01:25,840
interface and override the onAuthenticationFailure method.

23
00:01:25,840 --> 00:01:33,840
Here you have access to the request and response objects and exceptions objects.

24
00:01:33,840 --> 00:01:35,630
Add your logic here,

25
00:01:35,630 --> 00:01:38,700
and add it via the login form builder using the

26
00:01:38,700 --> 00:01:40,920
AuthenticationFailureHandler method.

27
00:01:40,920 --> 00:01:44,510
If the user accessed the login page directly without being

28
00:01:44,510 --> 00:01:47,340
redirected to an authentication entry point,

29
00:01:47,340 --> 00:01:51,790
then you could set the default success URL where the user will be

30
00:01:51,790 --> 00:01:55,700
redirected to after they successfully authenticate.

31
00:01:55,700 --> 00:02:01,260
After authenticating, if dave accessed the admin page,

32
00:02:01,260 --> 00:02:05,020
gets this generic Spring Whitelabel Error Page,

33
00:02:05,020 --> 00:02:09,480
and does not have an admin role, this doesn't look nice.

34
00:02:09,480 --> 00:02:13,740
It also gives the hacker a hint that we are using Spring Security.

35
00:02:13,740 --> 00:02:18,710
So, to create our own error page, all you need to do is under resources,

36
00:02:18,710 --> 00:02:24,740
static, create a folder called error with an HTML page named 401.

37
00:02:24,740 --> 00:02:25,630
That's it.

38
00:02:25,630 --> 00:02:31,040
Now Spring will display this custom error page when a 401 exception occurs.

39
00:02:31,040 --> 00:02:35,820
You can also do this for other error codes, such as the 404 Not Found, etc.

40
00:02:35,820 --> 00:02:37,170
And if you want,

41
00:02:37,170 --> 00:02:40,600
you can configure your own URL using the exception

42
00:02:40,600 --> 00:02:44,340
handler's access denied page builder method.

43
00:02:44,340 --> 00:02:50,740
You might also want to perform some tasks like auditing any unauthorized access,

44
00:02:50,740 --> 00:02:53,920
which you can do by creating your own implementation of an

45
00:02:53,920 --> 00:02:58,710
AccessDeniedHandler and override the handle method.

46
00:02:58,710 --> 00:03:02,020
Here you have access to the request, response object,

47
00:03:02,020 --> 00:03:05,110
as well as the AccessDeniedException where you can

48
00:03:05,110 --> 00:03:07,640
perform some tasks like logging.

49
00:03:07,640 --> 00:03:10,540
Once you add your logic here,

50
00:03:10,540 --> 00:03:15,740
you can then add the handler using the exceptions handler builder method.

51
00:03:15,740 --> 00:03:21,240
You can add your AccessDeniedHandler to the ExceptionTranslationFilter,

52
00:03:21,240 --> 00:03:31,000
and you can even have different handlers for different URLs. As you can see, Spring Security is very flexible.

