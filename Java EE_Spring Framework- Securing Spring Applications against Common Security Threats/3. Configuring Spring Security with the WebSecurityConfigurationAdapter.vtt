WEBVTT
1
00:00:01.640 --> 00:00:06.040
The default implementation is great to get things moving,

2
00:00:06.040 --> 00:00:09.050
but you will eventually need to customize it to your

3
00:00:09.050 --> 00:00:13.460
application's unique security requirements as you might just

4
00:00:13.460 --> 00:00:16.650
want form authentication and not basic.

5
00:00:16.650 --> 00:00:20.010
Not all your web pages will require authentication.

6
00:00:20.010 --> 00:00:25.360
Some could be accessed anonymously, such as the login or the landing page.

7
00:00:25.360 --> 00:00:29.050
And you will probably want to get rid of that bland default

8
00:00:29.050 --> 00:00:32.640
login page with a fancy one of your own.

9
00:00:32.640 --> 00:00:39.040
Now Spring Security provides an adapter, the WebSecurityConfigurationAdapter.

10
00:00:39.040 --> 00:00:43.550
If you extend this class, you get access to a number of builders,

11
00:00:43.550 --> 00:00:46.490
such as the HttpSecurity and

12
00:00:46.490 --> 00:00:51.770
AuthenticationManagerBuilder via a number of configure methods,

13
00:00:51.770 --> 00:00:53.100
which you can override.

14
00:00:53.100 --> 00:00:55.280
Now if you recall, by default,

15
00:00:55.280 --> 00:01:02.260
the SpringBootWebSecurityConfiguration class created one for us as it did not

16
00:01:02.260 --> 00:01:06.740
detect one in the Spring application context defined by us.

17
00:01:06.740 --> 00:01:10.130
If we drill into it, you can see its default configuration.

18
00:01:10.130 --> 00:01:15.210
For any request, HTTP authentication is required,

19
00:01:15.210 --> 00:01:19.340
and both form and basic are supported.

20
00:01:19.340 --> 00:01:22.920
Now let's create our own implementation that extends

21
00:01:22.920 --> 00:01:28.490
the WebSecurityConfigurationAdapter, and we add the configuration annotation.

22
00:01:28.490 --> 00:01:33.620
So now the ConditionalOn MissingBean will be triggered in the

23
00:01:33.620 --> 00:01:38.060
SpringBootWebSecurityConfiguration class and will prevent Spring

24
00:01:38.060 --> 00:01:41.190
Boot from configuring the default one for us.

25
00:01:41.190 --> 00:01:44.340
We override the configure method that gives us

26
00:01:44.340 --> 00:01:47.570
access to the HTTP builder object.

27
00:01:47.570 --> 00:01:52.460
We can manipulate this object and build our own desired HTTP

28
00:01:52.460 --> 00:01:55.840
authentication and authorization strategies.

29
00:01:55.840 --> 00:01:59.920
Let's set it up the same way as a default implementation so

30
00:01:59.920 --> 00:02:02.860
that all requests require authentication,

31
00:02:02.860 --> 00:02:06.110
but with only basic authentication supported.

32
00:02:06.110 --> 00:02:09.140
Now if we drill into the filter chain,

33
00:02:09.140 --> 00:02:13.040
you can see we only have the basic authentication filter,

34
00:02:13.040 --> 00:02:17.310
and we no longer get the form login page as Spring Security

35
00:02:17.310 --> 00:02:21.830
returned a 401 with the WWWâ€‘Authenticate header.

36
00:02:21.830 --> 00:02:26.380
Basically, this header tells the browser that basic authentication is required,

37
00:02:26.380 --> 00:02:30.540
and the browser, by default, prompted the user for their credentials.

38
00:02:30.540 --> 00:02:31.720
Now if we enter them,

39
00:02:31.720 --> 00:02:34.790
it sends the basic header to Spring Security to be

40
00:02:34.790 --> 00:02:38.640
intercepted by the basic authentication filter.

41
00:02:38.640 --> 00:02:41.460
As you can see, with the HTTP builder,

42
00:02:41.460 --> 00:02:51.000
you're essentially manipulating the filter chain and its filters. Next, let's look at configuring our own login page.

