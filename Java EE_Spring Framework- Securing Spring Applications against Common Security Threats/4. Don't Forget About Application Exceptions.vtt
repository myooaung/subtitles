WEBVTT
1
00:00:01.740 --> 00:00:05.290
You also need to be on the lookout for exceptions run by your

2
00:00:05.290 --> 00:00:09.840
application as they could result in security breaches.

3
00:00:09.840 --> 00:00:14.240
One of the most common vulnerabilities are injection attacks.

4
00:00:14.240 --> 00:00:18.100
The hacker is browsing their portfolio and comes across the following

5
00:00:18.100 --> 00:00:23.400
page with a search text field where you can enter in the crypto symbol

6
00:00:23.400 --> 00:00:25.940
you want to retrieve transactions for.

7
00:00:25.940 --> 00:00:29.340
Now these type of searches should always raise some alarm bells,

8
00:00:29.340 --> 00:00:31.740
and it's worth testing for injection.

9
00:00:31.740 --> 00:00:36.140
By simply submitting a single quote, ouch,

10
00:00:36.140 --> 00:00:40.810
real bad exception handling. The hacker now knows that there is a database back

11
00:00:40.810 --> 00:00:45.640
end and a definite opportunity for a SQL injection attack.

12
00:00:45.640 --> 00:00:48.470
Now through trial and error and different combinations of

13
00:00:48.470 --> 00:00:53.440
input, or perhaps by viewing the source and getting some hints

14
00:00:53.440 --> 00:00:56.340
that this might be a Spring back end,

15
00:00:56.340 --> 00:01:01.340
the hacker tries to use the default tables with the following query.

16
00:01:01.340 --> 00:01:06.940
Now this query closes the single quotes and adds a union with three rows,

17
00:01:06.940 --> 00:01:09.530
the typical field names you might use for username and

18
00:01:09.530 --> 00:01:12.740
password, as well as the users table.

19
00:01:12.740 --> 00:01:15.940
The hacker has now all the credentials from the site.

20
00:01:15.940 --> 00:01:18.040
Now there's a number of issues here.

21
00:01:18.040 --> 00:01:19.140
First,

22
00:01:19.140 --> 00:01:22.540
the site has poor exception handling. The exception should

23
00:01:22.540 --> 00:01:25.240
definitely not have been presented to the user,

24
00:01:25.240 --> 00:01:28.900
but perhaps maybe a default exception page or simply just

25
00:01:28.900 --> 00:01:32.430
returning an empty result set. Now, of course the second issue

26
00:01:32.430 --> 00:01:36.140
here is the SQL injection vulnerability.

27
00:01:36.140 --> 00:01:38.520
The developer should definitely have used a prepared

28
00:01:38.520 --> 00:01:43.060
statement or used the Spring CrudRepository. Again, this

29
00:01:43.060 --> 00:01:46.710
is an obvious example. But again, as a tech lead,

30
00:01:46.710 --> 00:01:49.340
I still see this kind of code from time to time

31
00:01:49.340 --> 00:01:51.640
while performing technical reviews,

32
00:01:51.640 --> 00:01:55.640
particularly when the dev team is under pressure with tight deadlines.

33
00:01:55.640 --> 00:01:57.140
Corners are cut,

34
00:01:57.140 --> 00:01:59.130
perhaps with the intention of going back and

35
00:01:59.130 --> 00:02:02.740
refactoring it, but this is often forgotten.

36
00:02:02.740 --> 00:02:03.300
Hence,

37
00:02:03.300 --> 00:02:06.970
it is a good idea to keep credentials in a separate database or data

38
00:02:06.970 --> 00:02:11.340
store, behind an API or an a microservice perhaps.

39
00:02:11.340 --> 00:02:12.160
Thirdly,

40
00:02:12.160 --> 00:02:16.100
the password strength is not in line with best practices and is very

41
00:02:16.100 --> 00:02:19.240
susceptible to brute force or dictionary attacks.

42
00:02:19.240 --> 00:02:25.000
And finally, the password is in plain text. It should be hashed so that it's useless to the hacker.

