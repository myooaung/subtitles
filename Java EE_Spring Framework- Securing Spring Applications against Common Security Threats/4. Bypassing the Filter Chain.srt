1
00:00:01,740 --> 00:00:05,310
Since this is a course on securing applications with Spring,

2
00:00:05,310 --> 00:00:08,330
let's fast‑forward the development to our crypto app.

3
00:00:08,330 --> 00:00:09,920
There, much better.

4
00:00:09,920 --> 00:00:14,040
As mentioned before, Spring Security is very customizable.

5
00:00:14,040 --> 00:00:19,140
Here I have a custom login page to match the look and feel of the application.

6
00:00:19,140 --> 00:00:21,130
As you can see, just like the default,

7
00:00:21,130 --> 00:00:24,850
it submits a POST request to the login endpoint and sends the

8
00:00:24,850 --> 00:00:29,440
username and password in the body. Now to configure Spring Security

9
00:00:29,440 --> 00:00:34,600
to use this page instead of the default bland one, on the formLogin

10
00:00:34,600 --> 00:00:39,100
builder method, we can set the loginPage URI. Now as you've

11
00:00:39,100 --> 00:00:42,340
probably already noticed, the builder has a lot more features.

12
00:00:42,340 --> 00:00:46,350
You can even change the login processing URL in case you wanted to submit

13
00:00:46,350 --> 00:00:50,950
it to another endpoint and the field name of the password and username the

14
00:00:50,950 --> 00:00:55,840
filter will expect in the body. If we access the application now, hmm, our

15
00:00:55,840 --> 00:00:58,340
login page is not displaying,

16
00:00:58,340 --> 00:01:04,040
and there are a lot of redirect requests and access denied exceptions.

17
00:01:04,040 --> 00:01:07,440
If we go back to our SecurityConfiguration class,

18
00:01:07,440 --> 00:01:11,540
all the endpoints require the principal to be authenticated.

19
00:01:11,540 --> 00:01:16,440
But if we can't access the login page, there is no way we can authenticate.

20
00:01:16,440 --> 00:01:16,970
Hence,

21
00:01:16,970 --> 00:01:20,620
we can use the mvcMatcher and configure the login

22
00:01:20,620 --> 00:01:23,400
endpoint to permit all requests,

23
00:01:23,400 --> 00:01:26,910
while everything else will require authentication.

24
00:01:26,910 --> 00:01:30,890
Hence, the login page can be accessed by anonymous users.

25
00:01:30,890 --> 00:01:36,340
There, we can now see the log in page, but it doesn't look quite right.

26
00:01:36,340 --> 00:01:40,880
All our CSS and Bootstrap, JavaScript is being blocked by

27
00:01:40,880 --> 00:01:44,750
Spring as by default Spring blocks everything.

28
00:01:44,750 --> 00:01:46,290
Now to get around this,

29
00:01:46,290 --> 00:01:52,020
we can override the configure method that exposes the WebSecurity builder.

30
00:01:52,020 --> 00:01:55,960
And here we can define the URL we want Spring Security to

31
00:01:55,960 --> 00:02:00,440
ignore completely, like our CSS and webjars.

32
00:02:00,440 --> 00:02:02,560
And if we restart and refresh,

33
00:02:02,560 --> 00:02:06,540
you can see the page is now being styled correctly.

34
00:02:06,540 --> 00:02:11,760
Now the difference between WebSecurityIgnore and permitting access to

35
00:02:11,760 --> 00:02:17,460
HttpSecurity is if we look at the filter proxy,

36
00:02:17,460 --> 00:02:20,440
it now has three filter chains.

37
00:02:20,440 --> 00:02:24,580
The first two are for CSS and webjars endpoints,

38
00:02:24,580 --> 00:02:28,760
and the filter chain has no filters in them. And the last one is

39
00:02:28,760 --> 00:02:31,690
the filter chain with all our security filters.

40
00:02:31,690 --> 00:02:32,540
Essentially,

41
00:02:32,540 --> 00:02:37,840
requests to these endpoints defined in ignore completely bypass

42
00:02:37,840 --> 00:02:41,390
Spring Security. Whereas the login request will still get

43
00:02:41,390 --> 00:02:44,760
intercepted by the last filter chain,

44
00:02:44,760 --> 00:02:48,530
which has all the security filters like the username and password

45
00:02:48,530 --> 00:02:53,320
authentication filter, which is why we can't ignore the login endpoint

46
00:02:53,320 --> 00:02:55,940
as it requires the authentication filter.

47
00:02:55,940 --> 00:03:00,140
Now Spring allows for more finer‑grain authorization.

48
00:03:00,140 --> 00:03:05,240
Here we can define that our admin URL, in addition to being authenticated,

49
00:03:05,240 --> 00:03:09,170
the user must also have the role user or admin or

50
00:03:09,170 --> 00:03:11,240
anything else you might require.

51
00:03:11,240 --> 00:03:16,130
Next, let's look at the filter chains in more detail and how we can

52
00:03:16,130 --> 00:03:24,000
leverage them to support different authorization strategies for different parts of our web application.

