1
00:00:01,840 --> 00:00:03,690
X‑Frame‑Options: DENY.

2
00:00:03,690 --> 00:00:08,940
This instructs the browser not to embed your web application in frames.

3
00:00:08,940 --> 00:00:11,090
This is to protect against clickjacking,

4
00:00:11,090 --> 00:00:13,740
where your user is tricked into clicking something on your

5
00:00:13,740 --> 00:00:16,440
website without being aware of that.

6
00:00:16,440 --> 00:00:21,740
This is a popular attack in social media and even has its own name, likejacking,

7
00:00:21,740 --> 00:00:24,920
where users are tricked into liking posts and pages

8
00:00:24,920 --> 00:00:27,040
in their social media platform,

9
00:00:27,040 --> 00:00:30,740
giving the malicious site access to their friend list.

10
00:00:30,740 --> 00:00:31,230
Typically,

11
00:00:31,230 --> 00:00:35,740
this is done by overlaying a malicious site over the top of the target site.

12
00:00:35,740 --> 00:00:39,540
Hence, if a user is logged into the target site,

13
00:00:39,540 --> 00:00:43,430
the malicious site can load the target site in the background.

14
00:00:43,430 --> 00:00:47,960
Any actions on the malicious site are actually taking place on the target site.

15
00:00:47,960 --> 00:00:51,700
The hacker can send another email apologizing to the user for technical

16
00:00:51,700 --> 00:00:56,440
issues with the promotion and asking them to try a new link.

17
00:00:56,440 --> 00:01:00,640
The page looks similar, but let's take a look at the source.

18
00:01:00,640 --> 00:01:04,580
You can see it's embedding the portfolio site as a frame on top of

19
00:01:04,580 --> 00:01:08,240
the form of the malicious page that submits itself.

20
00:01:08,240 --> 00:01:12,580
Let's change the opacity of the frame to 30% and see what happens. You

21
00:01:12,580 --> 00:01:15,240
can now see the portfolio site in the background.

22
00:01:15,240 --> 00:01:17,770
The hack can simply align the buttons on the malicious

23
00:01:17,770 --> 00:01:20,640
page over the top of the portfolio site.

24
00:01:20,640 --> 00:01:20,910
Hence,

25
00:01:20,910 --> 00:01:23,350
the user is actually selecting things on the portfolio

26
00:01:23,350 --> 00:01:26,140
site without even knowing about it.

27
00:01:26,140 --> 00:01:29,270
And if we look at the source off the embedded portfolio page,

28
00:01:29,270 --> 00:01:34,340
the cross‑site request forgery token is on the form.

29
00:01:34,340 --> 00:01:38,940
So if the user submits this, their litecoin position will now be removed.

30
00:01:38,940 --> 00:01:45,040
The user has just been a victim of a clickjacking attack.

31
00:01:45,040 --> 00:01:48,940
If we re‑enable the header filter and try this again,

32
00:01:48,940 --> 00:01:50,980
you can see the browser prevents the malicious site

33
00:01:50,980 --> 00:01:54,640
from embedding our portfolio page.

34
00:01:54,640 --> 00:01:57,440
Now back to the drawing board for the hacker. You can get

35
00:01:57,440 --> 00:02:00,310
access to his header via the header builder,

36
00:02:00,310 --> 00:02:03,820
where it can also be disabled or configured to a less

37
00:02:03,820 --> 00:02:12,000
restrictive option, such as same as origin, where only pages from the same domain can include the site in the frame.

