WEBVTT
1
00:00:01.340 --> 00:00:05.830
Spring also has support for other headers that are not enabled by default.

2
00:00:05.830 --> 00:00:09.040
A very useful one is content security policy.

3
00:00:09.040 --> 00:00:13.720
This allows the web application to notify the user's browser about

4
00:00:13.720 --> 00:00:17.170
the root sources of resources, such as JavaScript,

5
00:00:17.170 --> 00:00:19.070
CSS and much more.

6
00:00:19.070 --> 00:00:23.170
Now this is a great way to protect against attacks like cross‑site scripting

7
00:00:23.170 --> 00:00:28.540
where compromised CDNs or user‑generated content could embed malicious content

8
00:00:28.540 --> 00:00:32.090
on the user's page and be executed in their browser.

9
00:00:32.090 --> 00:00:32.930
Again,

10
00:00:32.930 --> 00:00:36.110
you can configure this header via the header builder

11
00:00:36.110 --> 00:00:38.480
where you can set the desired policy.

12
00:00:38.480 --> 00:00:39.420
For example,

13
00:00:39.420 --> 00:00:42.870
here I am configuring that scripts like JavaScript can

14
00:00:42.870 --> 00:00:45.940
only originate from the page's origin.

15
00:00:45.940 --> 00:00:50.400
Or you could set it to the domain and protocol you require,

16
00:00:50.400 --> 00:00:52.030
so in this case HTTPS.

17
00:00:52.030 --> 00:00:57.280
Again, content security policy is very powerful, so it's worth checking out.

18
00:00:57.280 --> 00:01:01.370
You can even have it report violations to a specified URL

19
00:01:01.370 --> 00:01:04.090
instead of blocking the content. However,

20
00:01:04.090 --> 00:01:06.840
it's one of those powerful headers that tends to be

21
00:01:06.840 --> 00:01:09.940
overlooked or not configured correctly.

22
00:01:09.940 --> 00:01:14.210
Google did a study and found that 90% of sites that used content security

23
00:01:14.210 --> 00:01:18.740
policy had not set it up correctly and were not getting the benefits,

24
00:01:18.740 --> 00:01:21.740
most likely due to its maintenance overhead.

25
00:01:21.740 --> 00:01:25.690
Another somewhat useful header is the referer header where the browser

26
00:01:25.690 --> 00:01:29.940
is instructed to include the origin of the request.

27
00:01:29.940 --> 00:01:33.770
Now if you recall in the previous clip on the cross‑site request forgery attack,

28
00:01:33.770 --> 00:01:37.980
this could have been another way our application could have detected this as

29
00:01:37.980 --> 00:01:41.080
the referer header would have contained the malicious site.

30
00:01:41.080 --> 00:01:49.000
However, the value in this header is not reliable and shouldn't really be 100% trusted.

