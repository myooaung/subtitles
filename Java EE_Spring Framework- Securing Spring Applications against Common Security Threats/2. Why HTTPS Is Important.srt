1
00:00:01,640 --> 00:00:02,690
Up until now,

2
00:00:02,690 --> 00:00:05,680
the communication between the user's browser and the web

3
00:00:05,680 --> 00:00:10,150
application in our demo application was over HTTP.

4
00:00:10,150 --> 00:00:16,440
This is fine for development, but in production you need to use HTTPS.

5
00:00:16,440 --> 00:00:18,640
The reason being is in reality,

6
00:00:18,640 --> 00:00:22,280
your browser doesn't communicate directly with the target web server.

7
00:00:22,280 --> 00:00:27,080
On the internet our requests and responses are handled by many different

8
00:00:27,080 --> 00:00:30,440
third parties on the way to their final destination.

9
00:00:30,440 --> 00:00:34,590
Hence anyone snooping network traffic could intercept the

10
00:00:34,590 --> 00:00:38,160
authentication request and steal the user's credential.

11
00:00:38,160 --> 00:00:42,840
Or they could hijack to the user's session and impersonate them,

12
00:00:42,840 --> 00:00:45,920
not to mention exposing the user's sensitive data.

13
00:00:45,920 --> 00:00:47,180
With HTTP,

14
00:00:47,180 --> 00:00:53,740
there is also no way to confirm the destination server is who they claim to be,

15
00:00:53,740 --> 00:00:57,040
exposing your users to man‑in‑the‑middle attacks.

16
00:00:57,040 --> 00:01:02,040
Hence, some sort of encryption is required to provide confidentiality.

17
00:01:02,040 --> 00:01:05,720
There also needs to be a way for the client to confirm the identity

18
00:01:05,720 --> 00:01:08,740
of the web server they're communicating with.

19
00:01:08,740 --> 00:01:11,840
This is where HTTPS comes into play.

20
00:01:11,840 --> 00:01:17,740
HTTPS is HTTP over TLS, Transport Layer Security.

21
00:01:17,740 --> 00:01:21,800
TLS is the protocol used by the client and server to initiate

22
00:01:21,800 --> 00:01:26,260
encrypted communications between themselves, and also a way for the

23
00:01:26,260 --> 00:01:29,520
client to confirm the identity of the server,

24
00:01:29,520 --> 00:01:34,950
which is important when accessing sensitive resources like your online banking.

25
00:01:34,950 --> 00:01:37,670
You want to make sure that you're actually communicating

26
00:01:37,670 --> 00:01:41,120
with the bank's web server and not some malicious party

27
00:01:41,120 --> 00:01:43,570
impersonating them. With TLS,

28
00:01:43,570 --> 00:01:47,640
there is a handshake that takes place before any data is transmitted.

29
00:01:47,640 --> 00:01:50,230
The client and the server agree on the protocols and

30
00:01:50,230 --> 00:01:53,920
algorithms they're going to use, then that follows the

31
00:01:53,920 --> 00:01:57,140
server sending its X 509 certificate.

32
00:01:57,140 --> 00:01:58,640
This certificate is key.

33
00:01:58,640 --> 00:02:01,440
It contains the information about the server.

34
00:02:01,440 --> 00:02:04,640
Here I am on the HSBC Bank website.

35
00:02:04,640 --> 00:02:09,870
If I click on the lock, you can see Chrome confirms the communication is secure,

36
00:02:09,870 --> 00:02:14,890
meaning HTTPS, and that the certificate provided by the

37
00:02:14,890 --> 00:02:18,240
server is valid and belongs to HSBC.

38
00:02:18,240 --> 00:02:23,350
The reason it knows it is valid is that the certificate is issued by DigiCert,

39
00:02:23,350 --> 00:02:26,430
which is a trusted certificate authority that Chrome

40
00:02:26,430 --> 00:02:28,300
trusts. Now on the other hand,

41
00:02:28,300 --> 00:02:32,340
if we access Crypto Portfolio, because we're using HTTP you can

42
00:02:32,340 --> 00:02:35,140
see that Chrome has marked it as unsecure.

43
00:02:35,140 --> 00:02:35,760
Next,

44
00:02:35,760 --> 00:02:44,000
let's look at how we can generate our own certificate and configure HTTPS in our application

