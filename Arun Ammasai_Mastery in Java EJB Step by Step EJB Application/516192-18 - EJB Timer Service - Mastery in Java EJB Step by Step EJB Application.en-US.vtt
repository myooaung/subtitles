WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.830
Hello everyone, Welcome back.

00:00:01.830 --> 00:00:04.260
So we discuss about how to create

00:00:04.260 --> 00:00:09.195
James Q and modules and connection factory and everything.

00:00:09.195 --> 00:00:11.385
And we post her a message also,

00:00:11.385 --> 00:00:15.735
and we used our message driven bean to retrieve the information as well.

00:00:15.735 --> 00:00:21.900
So the next thing which we need to concentrate is at time also raise.

00:00:21.900 --> 00:00:23.550
So what do you mean by a timeless?

00:00:23.550 --> 00:00:25.080
I always think about this scenario.

00:00:25.080 --> 00:00:30.330
You want to execute a particular functionality when the time expires,

00:00:30.330 --> 00:00:34.340
whenever in a sequence order an hour, that Dima occurrence,

00:00:34.340 --> 00:00:39.580
it has to start service the particular functionality.

00:00:39.580 --> 00:00:40.970
So how we can do that,

00:00:40.970 --> 00:00:43.520
that is where the time of service comes into the picture.

00:00:43.520 --> 00:00:49.325
So timeless always is a mechanism by which scheduled application can we build?

00:00:49.325 --> 00:00:52.295
And what are the annotation you used for time?

00:00:52.295 --> 00:00:57.155
Time is always. So we have annotation called at timed out annotation.

00:00:57.155 --> 00:01:01.040
So which helps in programming the EGB service visa in

00:01:01.040 --> 00:01:05.015
a stateless or message driven when you cannot do that with the stateful grade,

00:01:05.015 --> 00:01:09.500
either it has to be stateless or it has to be a message driven and mean.

00:01:09.500 --> 00:01:12.410
And the Egypt, the container calls them at Thought,

00:01:12.410 --> 00:01:16.219
which is annotated by the annotator timeout.

00:01:16.219 --> 00:01:20.285
And the diamonds are racist service provided by our container,

00:01:20.285 --> 00:01:23.960
which helps too create a timer and to share

00:01:23.960 --> 00:01:28.520
doula call back when that particular given time is expired.

00:01:28.520 --> 00:01:32.570
Okay. It might be difficult for us to understand how it looks like.

00:01:32.570 --> 00:01:36.080
So what do we need to do is let's go back to over

00:01:36.080 --> 00:01:41.450
ID and we'll create an example to understand that in a much better way.

00:01:41.450 --> 00:01:44.389
So we came back to our ID.

00:01:44.389 --> 00:01:47.420
So anybody who are going to create a stateless session being right,

00:01:47.420 --> 00:01:55.730
So since we already have a session mean with a stateless one, so what is it?

00:01:55.730 --> 00:01:58.655
Let me check it. So test to session beam.

00:01:58.655 --> 00:02:07.970
So here we have a stateless session when all we need to do,

00:02:07.970 --> 00:02:12.365
let's introduce a new metadata here for time or surveys.

00:02:12.365 --> 00:02:17.060
So what I'm gonna do, I'm going to add a new mother and our interface in

00:02:17.060 --> 00:02:22.639
the method is going to be void and create a timer.

00:02:22.639 --> 00:02:24.470
So what did they input?

00:02:24.470 --> 00:02:26.390
Let's pass some milliseconds.

00:02:26.390 --> 00:02:29.030
So I'm going to pass the decimal belong value.

00:02:29.030 --> 00:02:31.505
So milli seconds here.

00:02:31.505 --> 00:02:36.110
Okay, So immediately we will get an exception in the test session when we need to

00:02:36.110 --> 00:02:40.640
input an implement the create diamond month that,

00:02:40.640 --> 00:02:42.140
so what are we gonna do here?

00:02:42.140 --> 00:02:49.760
So we have a long millisecond and in a method name is create timer.

00:02:49.760 --> 00:02:56.510
So here what we're trying to do is we're trying to use the context.

00:02:56.510 --> 00:03:00.515
It's not our WebLogic contexts, session context.

00:03:00.515 --> 00:03:03.905
So the timer is available in the session context.

00:03:03.905 --> 00:03:06.335
So if you want to use a session contexts,

00:03:06.335 --> 00:03:11.015
you need to inject the dependency. So what is that?

00:03:11.015 --> 00:03:14.420
So we need to use the resources and what it is,

00:03:14.420 --> 00:03:18.980
I'm going to use session context. Okay?

00:03:18.980 --> 00:03:24.080
So, okay, So using this context,

00:03:24.080 --> 00:03:29.870
what you can do is you can call the timer service,

00:03:29.870 --> 00:03:31.835
which will help us to create a timer.

00:03:31.835 --> 00:03:34.775
So how are we going to that context?

00:03:34.775 --> 00:03:39.110
Dot get time or service?

00:03:39.110 --> 00:03:42.260
Yes, the timer surveys and in the diamond side of it,

00:03:42.260 --> 00:03:45.125
a matter of you're trying to use is create

00:03:45.125 --> 00:03:48.350
that simple timer that our Lord different method.

00:03:48.350 --> 00:03:52.535
But for now, I'm going to use a simple timer.

00:03:52.535 --> 00:03:55.325
And what are the value I'm going to pass?

00:03:55.325 --> 00:03:57.905
I'm going to bust some to Alice here.

00:03:57.905 --> 00:04:00.319
The first one is going to be the millisecond,

00:04:00.319 --> 00:04:03.020
the input which I am passing moment.

00:04:03.020 --> 00:04:06.860
So whenever this a second is expired,

00:04:06.860 --> 00:04:09.620
it will call our timer method.

00:04:09.620 --> 00:04:15.170
And here what I'm gonna do is I'm going to pass a simple message

00:04:15.170 --> 00:04:21.930
like to welcome two timer or Timer Service.

00:04:25.930 --> 00:04:29.735
Okay, so you might be thinking, are we done?

00:04:29.735 --> 00:04:32.375
No, we're not done yet.

00:04:32.375 --> 00:04:35.960
So we could add a timer and we have passing them milliseconds

00:04:35.960 --> 00:04:39.560
and we are using a stylus or ways to create a timer.

00:04:39.560 --> 00:04:44.599
So how it is going to invoke metadata,

00:04:44.599 --> 00:04:46.550
which is our timeout method.

00:04:46.550 --> 00:04:48.125
So what do we need to do is,

00:04:48.125 --> 00:04:50.795
as I mentioned in the presentation,

00:04:50.795 --> 00:04:53.735
we need to use an untimed out annotation.

00:04:53.735 --> 00:04:56.735
So what we're gonna do is I'm going to create,

00:04:56.735 --> 00:05:01.415
I'm at third timeout.

00:05:01.415 --> 00:05:05.780
And that dynamo, my dad must be a void method.

00:05:05.780 --> 00:05:08.120
It should not be. Anything will return.

00:05:08.120 --> 00:05:15.180
So Blake, Boyd, time out.

00:05:18.580 --> 00:05:21.140
Okay, for the timer handler,

00:05:21.140 --> 00:05:24.840
always the input is going to be at time.

00:05:26.440 --> 00:05:29.495
So Java x EGP timer.

00:05:29.495 --> 00:05:31.025
Okay, so basically what happened?

00:05:31.025 --> 00:05:33.530
We have a timer orientation here and we

00:05:33.530 --> 00:05:36.335
have a diamond service here which will create a timer.

00:05:36.335 --> 00:05:37.805
So in this timer,

00:05:37.805 --> 00:05:43.100
which will be calling our time on hand lead met that how it is going to identify it.

00:05:43.100 --> 00:05:47.375
This is going to be a timeout method because we have annotation here called as a timeout.

00:05:47.375 --> 00:05:51.935
So for example, if you're passing input here, milliseconds Five seconds.

00:05:51.935 --> 00:05:53.975
So once the five seconds is expired,

00:05:53.975 --> 00:05:56.765
it will invoke our time mode handler method.

00:05:56.765 --> 00:05:57.755
Okay?

00:05:57.755 --> 00:06:02.000
So it's provide something here so intense that timeout matter.

00:06:02.000 --> 00:06:04.820
What I'm gonna do is I'm going to simply print something.

00:06:04.820 --> 00:06:06.245
I'm not gonna do anything else here.

00:06:06.245 --> 00:06:11.840
So I'm going to simply say timeout handler.

00:06:11.840 --> 00:06:15.500
And I'm going to print the information which is coming from the timer.

00:06:15.500 --> 00:06:20.180
So time Murdoch get info.

00:06:20.180 --> 00:06:21.785
So what is a good info?

00:06:21.785 --> 00:06:25.280
The time a set of is that as a second parameter passing through the timer,

00:06:25.280 --> 00:06:27.320
because this will create a timer, right?

00:06:27.320 --> 00:06:31.355
So that is a timer is going to be input for this timeout handling method.

00:06:31.355 --> 00:06:33.800
Right? So the next thing,

00:06:33.800 --> 00:06:36.920
so we have met already in the bean is ready,

00:06:36.920 --> 00:06:38.075
there'll be a resource.

00:06:38.075 --> 00:06:42.800
Now all we need to do is just deploy the core and then execute it.

00:06:42.800 --> 00:06:49.505
So right-click and Rennes server on your server,

00:06:49.505 --> 00:06:54.080
because when you do that it will deploy it automatically into your WebLogic server.

00:06:54.080 --> 00:06:57.650
And Next and Finish.

00:06:57.650 --> 00:07:00.350
You can deploy an application.

00:07:00.350 --> 00:07:01.880
Yes, published.

00:07:01.880 --> 00:07:03.305
So Debbie Lemon, finish here.

00:07:03.305 --> 00:07:04.460
So now what do we need to do?

00:07:04.460 --> 00:07:10.430
We had to go back to our client because the client will look up our EGB.

00:07:10.430 --> 00:07:13.880
I mean, you're a WebLogic container and it will give you the context,

00:07:13.880 --> 00:07:16.160
which contents, all the deployed EGP instance.

00:07:16.160 --> 00:07:17.630
So we're using the same EGB,

00:07:17.630 --> 00:07:19.865
but dammit, that is a different one.

00:07:19.865 --> 00:07:23.465
So before we acquire them and they'll let me put some sus4 here,

00:07:23.465 --> 00:07:26.000
like some timer interval, something like that.

00:07:26.000 --> 00:07:31.400
So what I'm gonna do is I'm going to see new

00:07:31.400 --> 00:07:32.880
lead

00:07:34.660 --> 00:07:42.690
it to string.

00:07:45.010 --> 00:07:46.445
Okay?

00:07:46.445 --> 00:07:50.520
So by this time the diameter will be created.

00:07:52.090 --> 00:07:56.975
Diamond creator, save it.

00:07:56.975 --> 00:07:59.930
Or if you want to keep it in a proper format,

00:07:59.930 --> 00:08:05.060
what I can do is I can probably add some brackets here, something like this.

00:08:05.060 --> 00:08:11.750
And then I can do the same here as well.

00:08:15.510 --> 00:08:16.990
Okay?

00:08:16.990 --> 00:08:19.600
So now we are good at this and now we

00:08:19.600 --> 00:08:23.350
have a simple astronaut or dot print LN than what I'm gonna do.

00:08:23.350 --> 00:08:25.270
I'm gonna use the lookup.

00:08:25.270 --> 00:08:28.420
And then I'm going to call the method called create timer.

00:08:28.420 --> 00:08:30.415
So what is the time which we can pass for now?

00:08:30.415 --> 00:08:33.490
Let's pass a two seconds or 200 milliseconds,

00:08:33.490 --> 00:08:35.080
which means a few seconds, right?

00:08:35.080 --> 00:08:38.740
So let's run the code

00:08:38.740 --> 00:08:44.545
as normal Java application because it's just a normal main melt or right?

00:08:44.545 --> 00:08:46.585
Okay, So let's wait for a minute.

00:08:46.585 --> 00:08:48.910
We will get d output in the console.

00:08:48.910 --> 00:08:51.615
See the diameter is created,

00:08:51.615 --> 00:08:54.305
and then time on handler called.

00:08:54.305 --> 00:08:58.535
Okay, let me clear everything in the console and let's go back to,

00:08:58.535 --> 00:09:04.400
or let me call it one more time to you so you can see difference.

00:09:04.400 --> 00:09:09.650
Run Java application and you will get the timer created here.

00:09:09.650 --> 00:09:12.740
The first thing, it will call the say hi method,

00:09:12.740 --> 00:09:13.895
and then it will print it,

00:09:13.895 --> 00:09:17.495
and then it will call the create. I'm I'm at that.

00:09:17.495 --> 00:09:22.610
See, we got Hello Mr. Ag as part of the first method and then the timer created,

00:09:22.610 --> 00:09:27.830
which will be printed in the hour out here.

00:09:27.830 --> 00:09:31.010
So Timer created after timer is created,

00:09:31.010 --> 00:09:37.225
and then it will call the timer surveys after two seconds,

00:09:37.225 --> 00:09:39.325
it will call the method,

00:09:39.325 --> 00:09:41.710
which means we pass two seconds, right?

00:09:41.710 --> 00:09:44.170
So when the 2 second is finished,

00:09:44.170 --> 00:09:46.480
it find out, okay, it takes bytes.

00:09:46.480 --> 00:09:47.920
So I need to call the timeout matter,

00:09:47.920 --> 00:09:49.345
which is at time would handler.

00:09:49.345 --> 00:09:49.810
Okay.

00:09:49.810 --> 00:09:54.460
Let's pass some like around six or 10 thousand.

00:09:54.460 --> 00:09:56.140
So obviously 10 thousand, right?

00:09:56.140 --> 00:09:59.080
So obviously it might take even much more time because ten seconds,

00:09:59.080 --> 00:10:00.895
it'll take 10 seconds to execute it, right?

00:10:00.895 --> 00:10:05.290
So for now, let me put some equations here.

00:10:05.290 --> 00:10:09.115
I'm in some identifier so we can see the outcome just right-click

00:10:09.115 --> 00:10:13.824
and run it one more time and run as a Java application.

00:10:13.824 --> 00:10:17.330
So first the hello AG will be called.

00:10:19.210 --> 00:10:22.650
See, the time is greater.

00:10:27.130 --> 00:10:32.675
So you see now timeout hand lattice printer here,

00:10:32.675 --> 00:10:34.610
C took 10 seconds.

00:10:34.610 --> 00:10:35.765
So what is happening here?

00:10:35.765 --> 00:10:39.110
That timer will keep a track of the input timing.

00:10:39.110 --> 00:10:41.135
So I provided 10 seconds, right?

00:10:41.135 --> 00:10:44.015
So after 10 seconds it will call the timeout method.

00:10:44.015 --> 00:10:47.759
So this is how we use the timer service.
