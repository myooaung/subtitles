WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.310
Hello everyone, Welcome back.

00:00:02.310 --> 00:00:05.685
So we tried a pretty simple example to create Corey,

00:00:05.685 --> 00:00:08.340
create named query and create native gory.

00:00:08.340 --> 00:00:10.500
So let's try some complex queries,

00:00:10.500 --> 00:00:12.135
like a join code is.

00:00:12.135 --> 00:00:13.860
Let's go back to the data.

00:00:13.860 --> 00:00:16.710
Okay, so we know what are the tables available rates.

00:00:16.710 --> 00:00:19.725
So here we have office and here we have a employees.

00:00:19.725 --> 00:00:22.560
So there are multiple offices in each

00:00:22.560 --> 00:00:25.425
and every one of his time, multiple employees, right.

00:00:25.425 --> 00:00:29.520
So basically what I want to do is I want to provide a location of an office,

00:00:29.520 --> 00:00:33.090
for example, it see what is inside the office.

00:00:33.090 --> 00:00:38.140
Select star from offices.

00:00:41.440 --> 00:00:44.990
Okay, So there are seven different offices are available.

00:00:44.990 --> 00:00:46.490
Okay, So San Francisco,

00:00:46.490 --> 00:00:48.500
Boston and New York City and Paris,

00:00:48.500 --> 00:00:49.940
Tokyo, Sydney, inland and okay.

00:00:49.940 --> 00:00:54.980
So I want to fetch the employee who's working in Paris.

00:00:54.980 --> 00:00:58.475
Okay, so let's write a query for that.

00:00:58.475 --> 00:01:04.190
And then we'll try to implement the same in the EGP query,

00:01:04.190 --> 00:01:07.250
okay, So offices or freeze command,

00:01:07.250 --> 00:01:09.820
what are the table which I am trying to map here, employee rates,

00:01:09.820 --> 00:01:13.835
so employee EMP and the condition

00:01:13.835 --> 00:01:16.040
where the condition is going to be

00:01:16.040 --> 00:01:19.700
office confines of his ID and the employee also going to intervene early.

00:01:19.700 --> 00:01:20.900
So that is a key rate.

00:01:20.900 --> 00:01:27.305
So of not of his cold sorry.

00:01:27.305 --> 00:01:32.795
Dot office or equal than employee AMP dot.

00:01:32.795 --> 00:01:36.875
Again, the Office for office code.

00:01:36.875 --> 00:01:42.740
And dot city is equal to, let's pass.

00:01:42.740 --> 00:01:46.500
Okay, Let's pass Paris.

00:01:46.660 --> 00:01:52.190
So I want to print only the employee information a and B dot star.

00:01:52.190 --> 00:01:56.700
So now all we need to do to execute the query and we'll see what is the outcome.

00:01:57.670 --> 00:02:00.740
Okay, so what did happen?

00:02:00.740 --> 00:02:05.210
What's happening here? Select star from employee supposed to execute

00:02:05.210 --> 00:02:13.205
a horizontal mirror officers of its employees not employee.

00:02:13.205 --> 00:02:16.940
So let's try it one more time.

00:02:16.940 --> 00:02:20.180
Okay, see now if you take a look at the results here,

00:02:20.180 --> 00:02:24.215
there are five employees whose working from Paris.

00:02:24.215 --> 00:02:28.055
Okay, So I want to fit the same thing using our JPL query,

00:02:28.055 --> 00:02:30.050
which means EGP query.

00:02:30.050 --> 00:02:31.355
So let's try that.

00:02:31.355 --> 00:02:36.545
So the here everything is the table name and the feeling comes to query.

00:02:36.545 --> 00:02:37.940
I mean your Egypt vagaries,

00:02:37.940 --> 00:02:40.160
everyday objects and data friends.

00:02:40.160 --> 00:02:46.070
Okay, so let's try to implement the same with the query language.

00:02:46.070 --> 00:02:50.030
So select, I'm going to use the reference EMP.

00:02:50.030 --> 00:02:54.620
And from Bigtable, the entity name is employee range,

00:02:54.620 --> 00:02:57.710
so a and B fellow employee.

00:02:57.710 --> 00:03:01.460
And then we'll name it e and b comma.

00:03:01.460 --> 00:03:04.730
And what are the other entity we're gonna talk about the officers, right.

00:03:04.730 --> 00:03:06.365
So office or APA.

00:03:06.365 --> 00:03:10.940
And now the condition where so we're not going to coding

00:03:10.940 --> 00:03:15.800
something like that because we have to check what is the entity name for it.

00:03:15.800 --> 00:03:17.660
So first I need a trach,

00:03:17.660 --> 00:03:21.785
Office dot office ideals go to the office entity here.

00:03:21.785 --> 00:03:24.110
And what is the office Korea.

00:03:24.110 --> 00:03:25.955
So the generated ID,

00:03:25.955 --> 00:03:27.590
primary keys office code.

00:03:27.590 --> 00:03:35.130
So copy this and combat to data and dot office core.

00:03:35.590 --> 00:03:43.550
And then is the employee of his ID solid C,

00:03:43.550 --> 00:03:45.815
E, and P employee dot.

00:03:45.815 --> 00:03:47.840
Let's go to the employee dot Java.

00:03:47.840 --> 00:03:51.005
So it is the mapping for office here.

00:03:51.005 --> 00:03:54.905
Okay, So here, many-to-one join column office code.

00:03:54.905 --> 00:03:57.650
So reference name is office, right?

00:03:57.650 --> 00:04:02.630
Say office and copy.

00:04:02.630 --> 00:04:03.950
This is just an office differently.

00:04:03.950 --> 00:04:05.120
And what we are trying to look for,

00:04:05.120 --> 00:04:07.970
we're looking for the the office code inside the office.

00:04:07.970 --> 00:04:11.480
So that is the office code because we want to che,

00:04:11.480 --> 00:04:13.700
just go and click office here.

00:04:13.700 --> 00:04:15.185
And here there you go.

00:04:15.185 --> 00:04:22.200
That is the physiology of trying to look for and office code.

00:04:23.290 --> 00:04:25.550
So office runoff is quote,

00:04:25.550 --> 00:04:29.345
an employee dot off is drawn off is called ligase employee.

00:04:29.345 --> 00:04:31.730
It's part of Office because each and

00:04:31.730 --> 00:04:34.505
every blade belongs flow of Israel so of his head office cord

00:04:34.505 --> 00:04:39.980
and the condition end of is.5, field name city.

00:04:39.980 --> 00:04:41.955
So what is a city here?

00:04:41.955 --> 00:04:46.780
City, the city and its go back here.

00:04:46.780 --> 00:04:49.765
And until b is equal to,

00:04:49.765 --> 00:04:52.840
we can pass the parameter here city.

00:04:52.840 --> 00:04:55.735
So this is the query which we need to use.

00:04:55.735 --> 00:05:00.145
Okay, so now what we're gonna do is let's go back to our managed bean.

00:05:00.145 --> 00:05:03.025
Let's create a new mother and interface.

00:05:03.025 --> 00:05:04.960
So what I'm gonna do here,

00:05:04.960 --> 00:05:06.940
we're going to write it a different diameter.

00:05:06.940 --> 00:05:10.810
That's a list of employees rates or list of employee.

00:05:10.810 --> 00:05:18.050
And the method, we're going to call that as a good employee.

00:05:20.010 --> 00:05:22.615
Employee by city.

00:05:22.615 --> 00:05:24.420
And the input is going to be.

00:05:24.420 --> 00:05:26.150
String of the name,

00:05:26.150 --> 00:05:29.340
of the city name, city name.

00:05:29.560 --> 00:05:33.785
Okay, So the next thing we need to prove or the implementations, right?

00:05:33.785 --> 00:05:37.790
So let's go about paper being here and let's provide the implementation.

00:05:37.790 --> 00:05:41.465
So here we have a metal, the skeleton creator.

00:05:41.465 --> 00:05:44.540
The first thing which we need to do, p m dot.

00:05:44.540 --> 00:05:47.825
We are going to use a create query because the equilibrium manipulator, right?

00:05:47.825 --> 00:05:51.440
It's not available in the, any entities itself.

00:05:51.440 --> 00:05:57.260
So once again to create query.

00:05:57.260 --> 00:05:59.480
And here we're going to pass the query.

00:05:59.480 --> 00:06:03.215
And then dot set parameter, right?

00:06:03.215 --> 00:06:04.820
Set that I made her.

00:06:04.820 --> 00:06:07.669
And here we need to provide D data.

00:06:07.669 --> 00:06:09.365
I mean, what is the parameter name?

00:06:09.365 --> 00:06:10.400
And here is the input,

00:06:10.400 --> 00:06:14.510
what is coming from the user.

00:06:14.510 --> 00:06:17.795
And then when it or get the result set,

00:06:17.795 --> 00:06:22.790
get the results it, and then we can create a query out of it.

00:06:22.790 --> 00:06:27.210
So this is just a list.

00:06:29.020 --> 00:06:31.850
Okay, so now we need to fill the information here.

00:06:31.850 --> 00:06:33.665
So what is the query?

00:06:33.665 --> 00:06:37.774
We need to go back to our place battery manipulator.

00:06:37.774 --> 00:06:39.560
So this is occurring which we framed, right?

00:06:39.560 --> 00:06:46.040
It just copy this until C and come back domain here and paste it here,

00:06:46.040 --> 00:06:50.195
control V. And then I want to put a set parameter and the below.

00:06:50.195 --> 00:06:54.305
And then I need to provide this so you can see each and everything in a clear way.

00:06:54.305 --> 00:06:55.835
So what are the input name?

00:06:55.835 --> 00:06:57.785
So the parameter name here,

00:06:57.785 --> 00:06:59.405
so the parameter name is city, right?

00:06:59.405 --> 00:07:05.480
Just copy and go back and I'll send that Endo parameter name.

00:07:05.480 --> 00:07:07.115
So now we have everything ready.

00:07:07.115 --> 00:07:10.715
So now what do we need do it's going to be leached often blinds not just arrived,

00:07:10.715 --> 00:07:12.740
less, it's going to be employee.

00:07:12.740 --> 00:07:14.330
Finally, what do we need to do?

00:07:14.330 --> 00:07:18.125
Just return the list back.

00:07:18.125 --> 00:07:21.530
So now what happened? We created a

00:07:21.530 --> 00:07:26.135
maternal will return a employees based on the city name.

00:07:26.135 --> 00:07:27.770
The moment you sail,

00:07:27.770 --> 00:07:30.815
you know what happened automatically does get deployed in your WebLogic server.

00:07:30.815 --> 00:07:32.540
So let's see it.

00:07:32.540 --> 00:07:35.705
Yes, it's deploying now, gets deployed.

00:07:35.705 --> 00:07:38.735
Public pharyngitis and 948 years it is done.

00:07:38.735 --> 00:07:42.410
So now all you need to do, just go back to our test client and we have to create,

00:07:42.410 --> 00:07:50.660
let's comment out these existing implementations and lookup dot get employee

00:07:50.660 --> 00:07:52.760
by city and the city we're going to pass,

00:07:52.760 --> 00:07:54.540
it's going to be a Paris, right?

00:07:54.540 --> 00:07:56.075
Paris.

00:07:56.075 --> 00:07:58.070
And save it.

00:07:58.070 --> 00:07:59.855
And this is going to be written list of data, right?

00:07:59.855 --> 00:08:03.650
So let's talk employee, employee by city.

00:08:03.650 --> 00:08:06.770
So now I'm going to simply print all the employees.

00:08:06.770 --> 00:08:08.825
What I want to either say it.

00:08:08.825 --> 00:08:11.045
Sorry.

00:08:11.045 --> 00:08:14.280
System.out.

00:08:14.290 --> 00:08:15.770
Print out.

00:08:15.770 --> 00:08:21.260
I'm OK.

00:08:21.260 --> 00:08:22.460
So now we have everything ready.

00:08:22.460 --> 00:08:26.930
So all we need to do just Arend client code,

00:08:26.930 --> 00:08:30.200
right leg and run as a Java application.

00:08:30.200 --> 00:08:31.730
It may take a few seconds.

00:08:31.730 --> 00:08:33.365
So let's come back to the console.

00:08:33.365 --> 00:08:36.725
Here we can see all the employee information.

00:08:36.725 --> 00:08:37.700
Okay.

00:08:37.700 --> 00:08:39.455
So oh, okay.

00:08:39.455 --> 00:08:43.640
So the update has been printed again just to take over at 1, 2, 3, 4,

00:08:43.640 --> 00:08:48.650
5 objects here, Let's go back to the SQL result and how many are there? Only five.

00:08:48.650 --> 00:08:51.590
But we want to see that data in it, right?

00:08:51.590 --> 00:08:53.000
So the reason why it is not showing,

00:08:53.000 --> 00:08:56.150
because we don't have the toString method implemented in the employee.

00:08:56.150 --> 00:08:58.865
Normally we will not do it even if it is an entity.

00:08:58.865 --> 00:09:02.360
Since we are doing it for training purpose,

00:09:02.360 --> 00:09:04.625
we can implement that but matter how wide that,

00:09:04.625 --> 00:09:08.330
because a lot of things into your logs if you printed.

00:09:08.330 --> 00:09:14.345
So let's generate toString method with the all the necessary fails.

00:09:14.345 --> 00:09:16.925
And click Generate.

00:09:16.925 --> 00:09:20.720
Okay, since it's a business, logic changes, right?

00:09:20.720 --> 00:09:23.075
So it needs to be deployed in server.

00:09:23.075 --> 00:09:25.895
Let's come back to the log 8, 12.

00:09:25.895 --> 00:09:27.830
Okay, we just say we did tried.

00:09:27.830 --> 00:09:30.590
So it might start picking the changes and it will deploy automatically.

00:09:30.590 --> 00:09:35.630
Just wait for a few seconds in the starter.

00:09:35.630 --> 00:09:36.320
Okay.

00:09:36.320 --> 00:09:39.695
So it started comparator the 1950. Yes, it is 950.

00:09:39.695 --> 00:09:44.000
Now let's go back to our test client and just give it around one more time.

00:09:44.000 --> 00:09:47.370
Run as Java application.

00:09:47.380 --> 00:09:50.870
And let's go back to the console here.

00:09:50.870 --> 00:09:52.520
Let's wait for a few months.

00:09:52.520 --> 00:09:55.490
I can see now we've got all the information,

00:09:55.490 --> 00:09:58.339
employee and email extension,

00:09:58.339 --> 00:10:04.835
firstname, job that everything will be available here. Right?

00:10:04.835 --> 00:10:07.984
All the information will be available here.

00:10:07.984 --> 00:10:13.070
Okay, So this is a way you need to use complex queries, right?

00:10:13.070 --> 00:10:14.510
Because of the First Amendment tried,

00:10:14.510 --> 00:10:17.600
it's just a simple query and secondary use to create and query,

00:10:17.600 --> 00:10:21.890
I mean named Corey and the Create Query and native UI for SQL queries.

00:10:21.890 --> 00:10:23.630
And the one which we tried,

00:10:23.630 --> 00:10:30.170
It is kind of little bit complex because our mom trying I'm

00:10:30.170 --> 00:10:36.740
trying to join multiple tables and then we tried to pull the information.

00:10:36.740 --> 00:10:39.725
Okay, so what we can do next,

00:10:39.725 --> 00:10:43.520
we can try one more example to pull some information,

00:10:43.520 --> 00:10:46.445
but not only with the two table clips have multiple tables.

00:10:46.445 --> 00:10:49.020
So we'll talk about in the next video.
