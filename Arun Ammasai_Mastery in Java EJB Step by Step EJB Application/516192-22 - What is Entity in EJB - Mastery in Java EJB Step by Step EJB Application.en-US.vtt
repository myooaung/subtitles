WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.980
Hello everyone, Welcome back.

00:00:01.980 --> 00:00:08.130
So we discuss the transactions and then we tried

00:00:08.130 --> 00:00:11.295
different types of times sections asks for like a how

00:00:11.295 --> 00:00:15.495
the container will work and how the bean managed transaction will work.

00:00:15.495 --> 00:00:19.930
And we have seen small examples how we can implement that, right?

00:00:19.930 --> 00:00:24.095
So the next important thing which we all want to talk about is its entity.

00:00:24.095 --> 00:00:27.380
So entity is nothing but entities

00:00:27.380 --> 00:00:31.940
providing the support or EGP which will communicate to the database.

00:00:31.940 --> 00:00:35.330
So think about this scenario whenever you learn a new programming language,

00:00:35.330 --> 00:00:38.165
the first thing you need to know the basics and then

00:00:38.165 --> 00:00:41.570
the next important thing is how to communicate to the database.

00:00:41.570 --> 00:00:44.510
In ADP, we are not going to write any JDVC code here.

00:00:44.510 --> 00:00:46.759
We're going to use an entity.

00:00:46.759 --> 00:00:50.270
We'll talk about what is entity in detail manner.

00:00:50.270 --> 00:00:52.130
But before that, let's talk about what is

00:00:52.130 --> 00:00:54.815
the entity and what we are trying to talk about here.

00:00:54.815 --> 00:00:57.785
Like, how are we going to communicate a database?

00:00:57.785 --> 00:00:59.945
So just like our normal relational database,

00:00:59.945 --> 00:01:03.170
even the entities also have the similar kinds

00:01:03.170 --> 00:01:07.100
of functionalities because when you go for the database read,

00:01:07.100 --> 00:01:08.570
you'll have the one-to-one relationship,

00:01:08.570 --> 00:01:11.749
one-to-many or many-to-one, many-to-one relationship.

00:01:11.749 --> 00:01:12.515
Right?

00:01:12.515 --> 00:01:15.950
So the similar way It's the last one is not a many-to-one.

00:01:15.950 --> 00:01:17.870
It's it's many to many.

00:01:17.870 --> 00:01:19.895
I forgot to modify that one.

00:01:19.895 --> 00:01:25.760
So the similar way in entities also entities a Java object, okay,

00:01:25.760 --> 00:01:27.830
So in Java object also we'll

00:01:27.830 --> 00:01:33.485
create relationship with one-to-one, one-to-many, many-to-one, many-to-many.

00:01:33.485 --> 00:01:35.405
For example, what is one-to-one?

00:01:35.405 --> 00:01:38.855
So each and every person has unique thumbprint.

00:01:38.855 --> 00:01:41.615
So which is one-to-one relationship.

00:01:41.615 --> 00:01:44.285
And another thing, one-to-many,

00:01:44.285 --> 00:01:47.300
for example, a single parent can have multiple kids.

00:01:47.300 --> 00:01:51.275
So one parent has multiple kids, one-to-many and many-to-one.

00:01:51.275 --> 00:01:52.895
It's just the reverse order.

00:01:52.895 --> 00:01:56.600
Multiple hat kids, how a single parent, right?

00:01:56.600 --> 00:02:00.920
And many-to-many course can have multiple authors.

00:02:00.920 --> 00:02:02.540
If I'm creating this goes,

00:02:02.540 --> 00:02:04.820
I might walk in with some other art that so I,

00:02:04.820 --> 00:02:10.700
this particular course have multiple authors and each Arthur can have multiple courses,

00:02:10.700 --> 00:02:13.830
which is a many-to-many relationship.

00:02:14.770 --> 00:02:20.120
Okay, So what are you going to talk about in the entire this particular section?

00:02:20.120 --> 00:02:23.180
So we'll talk about database and what are

00:02:23.180 --> 00:02:29.510
the tables we're going to use and how to create an entities,

00:02:29.510 --> 00:02:34.055
and what is the usage of a persistence and how we can create a persistence.

00:02:34.055 --> 00:02:37.235
And then how are we going to communicate to the database?

00:02:37.235 --> 00:02:40.085
So entity creation, we don't have to do it manually.

00:02:40.085 --> 00:02:47.760
We can use some functionalities to create an entity based on the tables.
