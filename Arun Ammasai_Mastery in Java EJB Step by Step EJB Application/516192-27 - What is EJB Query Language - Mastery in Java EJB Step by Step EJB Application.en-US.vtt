WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.815
Hello everyone, Welcome back.

00:00:01.815 --> 00:00:07.305
So we discuss about how to communicate to the database using industries, right?

00:00:07.305 --> 00:00:12.195
And we have seen us simple example as well with the help of student entity,

00:00:12.195 --> 00:00:17.430
we were able to fetch the information from these student database table.

00:00:17.430 --> 00:00:20.540
Okay, so that is just a introduction.

00:00:20.540 --> 00:00:25.055
So now when you talk about what are the different types of queries are available in

00:00:25.055 --> 00:00:30.815
entities because the one which we used is a named CODIS.

00:00:30.815 --> 00:00:35.990
Great. So we'll talk about the other accord is aswell.

00:00:35.990 --> 00:00:41.120
First thing you need to understand what is E JP query language.

00:00:41.120 --> 00:00:43.430
So basically, if it is a query language,

00:00:43.430 --> 00:00:45.815
it is based on the relational database query.

00:00:45.815 --> 00:00:48.980
For example, if you want to pull the information from the student table,

00:00:48.980 --> 00:00:53.030
all we're gonna do is select star from the table image is a student

00:00:53.030 --> 00:00:57.230
which will give you all the list of list of students, correct?

00:00:57.230 --> 00:00:59.750
That is anyway, that's a relational database query.

00:00:59.750 --> 00:01:01.730
But how it can be done in a GP,

00:01:01.730 --> 00:01:05.120
because we have a entity which represents a table.

00:01:05.120 --> 00:01:07.250
So entity is a Java object.

00:01:07.250 --> 00:01:13.400
So now we're going to write a query which will impact that table via our entity.

00:01:13.400 --> 00:01:15.665
So our entity that Java, right?

00:01:15.665 --> 00:01:19.265
So the way how are we going to create a query based on the object?

00:01:19.265 --> 00:01:23.150
That is why it is called asset EGP Query Language,

00:01:23.150 --> 00:01:28.204
or you can call them as the EQ aswell entity query language.

00:01:28.204 --> 00:01:34.130
So with that we have a multiple types of coding because we already seen named query,

00:01:34.130 --> 00:01:37.655
so named Ugarte embedded with your entity itself.

00:01:37.655 --> 00:01:39.665
So that we already tried.

00:01:39.665 --> 00:01:42.470
So the next one and create a query battery.

00:01:42.470 --> 00:01:44.150
You want to write your own query.

00:01:44.150 --> 00:01:45.905
So if we want to write your own query,

00:01:45.905 --> 00:01:48.455
you need to use it create query method.

00:01:48.455 --> 00:01:53.180
Okay, so that might be a scenario you needed to write

00:01:53.180 --> 00:01:58.535
SQL queries or maybe you have a query which is existing and I want to use it here.

00:01:58.535 --> 00:02:03.320
So I cannot write e object Corey here.

00:02:03.320 --> 00:02:07.580
So in those conducts in there is what we can do is we can use it create

00:02:07.580 --> 00:02:12.530
native query which will add slip blind Java SQL query.

00:02:12.530 --> 00:02:18.845
It will return the object of a list or object because we are using native queries, right?

00:02:18.845 --> 00:02:23.330
So we're not sure what will be the outcome of the query.

00:02:23.330 --> 00:02:24.200
It can be anything.

00:02:24.200 --> 00:02:26.990
So we will be receiving ESA object,

00:02:26.990 --> 00:02:30.110
but other scenarios like a named Korean create query,

00:02:30.110 --> 00:02:32.000
we will return D. I mean,

00:02:32.000 --> 00:02:37.895
our entity manager will have Dundee appropriate entity type and then the last one,

00:02:37.895 --> 00:02:40.220
stored procedure query. So what do you mean by that?

00:02:40.220 --> 00:02:41.105
It's very simple.

00:02:41.105 --> 00:02:45.665
What if I want to call a procedure which is exiting my database and I want to call them.

00:02:45.665 --> 00:02:46.940
So how I can do that?

00:02:46.940 --> 00:02:47.960
That's simple.

00:02:47.960 --> 00:02:51.110
You can make use of the create stored procedure query,

00:02:51.110 --> 00:02:54.140
and then we can pass the procedure name and then you

00:02:54.140 --> 00:02:58.715
can established a connection or execute the procedure.

00:02:58.715 --> 00:03:03.380
Okay, So we've talked about all the data still other more commoditized,

00:03:03.380 --> 00:03:05.435
but these are the major pillars.

00:03:05.435 --> 00:03:10.460
So we'll talk about how to create a named query and how to

00:03:10.460 --> 00:03:12.560
create a query and how to get Native Query and

00:03:12.560 --> 00:03:15.650
R. So first of all named agree it's embedded with entity.

00:03:15.650 --> 00:03:18.560
So eminent Corey and great glory.

00:03:18.560 --> 00:03:21.290
So both are the same.

00:03:21.290 --> 00:03:26.405
Okay, but the query which is placed inside the entity called as a named query.

00:03:26.405 --> 00:03:29.630
And the query, the reason why it is the second one is called a subquery,

00:03:29.630 --> 00:03:33.395
which means that particular query will not be available in the entity itself.

00:03:33.395 --> 00:03:38.675
So I do use my entity manager to write my own queries, some mammal caries.

00:03:38.675 --> 00:03:40.775
That is why they are called us and create coding.

00:03:40.775 --> 00:03:42.050
So in the next example,

00:03:42.050 --> 00:03:44.900
what I'm gonna do is I'm going to create a woman named going because

00:03:44.900 --> 00:03:48.650
previously we used the name decoder,

00:03:48.650 --> 00:03:52.940
which is by default Lee created when we are creating the entities.

00:03:52.940 --> 00:03:59.070
Great. So let's create a new named query and we'll try how it's going to work.
