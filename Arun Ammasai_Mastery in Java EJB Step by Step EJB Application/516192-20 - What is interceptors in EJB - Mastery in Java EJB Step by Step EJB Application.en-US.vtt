WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.875
Hello everyone will come back.

00:00:01.875 --> 00:00:04.185
So we discuss a wooden dependency injections.

00:00:04.185 --> 00:00:08.085
The next thing we're going to talk about is interceptors.

00:00:08.085 --> 00:00:10.305
Before we move on to interceptor,

00:00:10.305 --> 00:00:13.605
we need to understand what is intercept dot in the first place.

00:00:13.605 --> 00:00:15.015
Just think about this scenario.

00:00:15.015 --> 00:00:17.789
You have a business logic which needs to be executed.

00:00:17.789 --> 00:00:20.715
But before you need to execute the method,

00:00:20.715 --> 00:00:24.960
you want something else to be run first,

00:00:24.960 --> 00:00:27.180
which means kinda init functionality.

00:00:27.180 --> 00:00:28.620
So how we can do that,

00:00:28.620 --> 00:00:33.110
which meant I'm trying to intercept my original call and performing

00:00:33.110 --> 00:00:38.405
something else and then I'm proceeding with the my normal flow.

00:00:38.405 --> 00:00:40.820
Okay, so that is where the interceptor comes into place.

00:00:40.820 --> 00:00:44.150
So our AGVs required zeros provides a specification

00:00:44.150 --> 00:00:48.530
to interceptor business methods using annotations.

00:00:48.530 --> 00:00:50.735
The annotation is, I don't invoke.

00:00:50.735 --> 00:00:52.745
And not only that,

00:00:52.745 --> 00:00:54.890
there are different levels of Intercept tab,

00:00:54.890 --> 00:00:57.830
so we can have it and the default level,

00:00:57.830 --> 00:00:59.960
class level and also methanol is missing.

00:00:59.960 --> 00:01:04.505
Yes, so, so the method level also as possible in Egypt, the interceptor,

00:01:04.505 --> 00:01:06.410
just for the sake of this course,

00:01:06.410 --> 00:01:12.600
Let's try something simple like let's try with the interceptor, with the classes.

00:01:13.450 --> 00:01:17.900
So this is our session being red,

00:01:17.900 --> 00:01:20.030
which is a straight less and we have a map of name.

00:01:20.030 --> 00:01:23.495
So here we have a lot of different methods here.

00:01:23.495 --> 00:01:25.655
So what I'm trying to do is write.

00:01:25.655 --> 00:01:32.405
So before executing anything from my session when I want to pull from something else.

00:01:32.405 --> 00:01:36.950
So how we can do that using interceptor annotations.

00:01:36.950 --> 00:01:38.899
So how we can use interceptors,

00:01:38.899 --> 00:01:42.605
the help of interceptor annotations,

00:01:42.605 --> 00:01:47.000
interceptor, and then you need to open a bracket inside.

00:01:47.000 --> 00:01:48.230
You can use the curly braces,

00:01:48.230 --> 00:01:51.395
which means we can provide multiple classes here.

00:01:51.395 --> 00:01:52.550
So for now what I'm gonna do,

00:01:52.550 --> 00:01:54.695
I'm gonna create a simple class here.

00:01:54.695 --> 00:01:55.790
So what will happen?

00:01:55.790 --> 00:01:59.074
So before that is our decision when executor,

00:01:59.074 --> 00:02:03.740
the interceptor class will be executed and then it will proceed to our normal flow.

00:02:03.740 --> 00:02:07.070
So I'm going to create a class here I have something like intercept,

00:02:07.070 --> 00:02:13.789
our test class, interceptor test class.

00:02:13.789 --> 00:02:15.440
This class will be available,

00:02:15.440 --> 00:02:17.300
so we need to create it first.

00:02:17.300 --> 00:02:19.475
That is reasonably have an error here.

00:02:19.475 --> 00:02:24.110
So first thing, let's create this class, create class interceptor.

00:02:24.110 --> 00:02:25.910
So I don't want to keep it in the beans.

00:02:25.910 --> 00:02:27.485
Let's create another folder,

00:02:27.485 --> 00:02:30.395
DDOS, and I'm creating it.

00:02:30.395 --> 00:02:34.340
Okay, so here we have the interceptor momentum, right?

00:02:34.340 --> 00:02:36.650
So let's create a method here.

00:02:36.650 --> 00:02:37.910
But before, so, uh,

00:02:37.910 --> 00:02:39.410
how our EGI becomes,

00:02:39.410 --> 00:02:42.335
understands that disease, the intercept at Mendota.

00:02:42.335 --> 00:02:45.965
You remember in this slide we talked about around invoke,

00:02:45.965 --> 00:02:49.190
that is a 1 is helping the container to identify.

00:02:49.190 --> 00:02:51.170
So this mother is going to be interrupt.

00:02:51.170 --> 00:02:56.480
Okay, so we need to use around invoke method Here.

00:02:56.480 --> 00:02:58.430
Let's create a simple method here,

00:02:58.430 --> 00:03:04.790
oblique and object and my thought interceptor, okay,

00:03:04.790 --> 00:03:13.865
so, okay, so here what I'm trying to do is here,

00:03:13.865 --> 00:03:15.695
I'm trying to pass.

00:03:15.695 --> 00:03:17.330
But it's our only Nuke,

00:03:17.330 --> 00:03:20.060
which we'll call whenever the intercept is happening.

00:03:20.060 --> 00:03:23.630
So ETL contains the innovation context.

00:03:23.630 --> 00:03:24.740
If you're calling WebLogic,

00:03:24.740 --> 00:03:26.330
you'll have a bloody context if you're calling

00:03:26.330 --> 00:03:28.190
a session and it has this session contexts.

00:03:28.190 --> 00:03:31.190
Now we're calling a invocation,

00:03:31.190 --> 00:03:33.905
which means calling another method or another class.

00:03:33.905 --> 00:03:40.565
So here we'll have the invocation context.

00:03:40.565 --> 00:03:43.910
And here I'm going to provide context.

00:03:43.910 --> 00:03:47.880
Obviously we need to handle an exception here.

00:03:50.140 --> 00:03:54.950
Okay, So what I'm trying to do is I'm not going to try anything here.

00:03:54.950 --> 00:03:58.940
I'm just going to simply provide some system.out.print Ellen saying like

00:03:58.940 --> 00:04:03.110
which method has been interrupted because we have the invocation of context, right?

00:04:03.110 --> 00:04:04.430
So since you have a context,

00:04:04.430 --> 00:04:06.470
we can retrieve them at our name aswell.

00:04:06.470 --> 00:04:09.245
So what I'm gonna do, I'm gonna provide this 4 here.

00:04:09.245 --> 00:04:12.000
And here what I'm gonna do,

00:04:14.140 --> 00:04:20.120
interceptor intercepts our class

00:04:20.120 --> 00:04:30.500
called interceptor is,

00:04:30.500 --> 00:04:32.825
so what I'm trying to say here,

00:04:32.825 --> 00:04:37.580
while interrupting which method this intercept will be called.

00:04:37.580 --> 00:04:41.660
And what I'm gonna do using context dot,

00:04:41.660 --> 00:04:44.255
what we can do can simply get the matter right.

00:04:44.255 --> 00:04:46.220
So I just want to know what is the matter has

00:04:46.220 --> 00:04:51.095
been intercept data and I want the name of the method.

00:04:51.095 --> 00:04:52.910
And then what I'm gonna do,

00:04:52.910 --> 00:04:58.175
I'm going to simply return the context and placebo,

00:04:58.175 --> 00:05:00.450
which is a data object.

00:05:01.810 --> 00:05:04.085
Okay?

00:05:04.085 --> 00:05:07.460
So now we have the interceptor method is available.

00:05:07.460 --> 00:05:12.140
So this mother has been added into the into separate test class.

00:05:12.140 --> 00:05:16.130
This class has been provided in our today's session being here.

00:05:16.130 --> 00:05:17.900
Right?

00:05:17.900 --> 00:05:24.005
So before calling my stateless when I want to intercept this particular class.

00:05:24.005 --> 00:05:27.800
Okay, so still and seeing it, okay, So mistakes,

00:05:27.800 --> 00:05:31.955
so interceptors, so let's import that as well.

00:05:31.955 --> 00:05:35.210
Okay, so now I have the interceptor class available here.

00:05:35.210 --> 00:05:38.510
So before calling this beam, this particular class,

00:05:38.510 --> 00:05:42.410
they'll be invoked in that particular class B have annotation got around invoke.

00:05:42.410 --> 00:05:45.665
So which means that method will be invoked.

00:05:45.665 --> 00:05:49.595
Okay, so let's go back to our client.

00:05:49.595 --> 00:05:51.380
Deserve client, right?

00:05:51.380 --> 00:05:54.905
So what I'm trying to do is I'm just commenting out these two.

00:05:54.905 --> 00:05:58.760
And so what I'm trying to do in our session bean matter,

00:05:58.760 --> 00:06:01.175
I'm just trying to call this say hi matter.

00:06:01.175 --> 00:06:04.760
So what will happen before calling the say hi method?

00:06:04.760 --> 00:06:07.670
Our interceptor method will be called and it will print,

00:06:07.670 --> 00:06:10.505
which meant that has been intercept odd.

00:06:10.505 --> 00:06:11.795
So what are the other interceptor?

00:06:11.795 --> 00:06:13.460
Hello, say hi method.

00:06:13.460 --> 00:06:15.965
Okay, so the first thing we need to do,

00:06:15.965 --> 00:06:17.510
we made a lot of changes rates.

00:06:17.510 --> 00:06:19.085
The first thing which we have to do,

00:06:19.085 --> 00:06:24.630
just deploy changes from none, so on.

00:06:28.810 --> 00:06:32.310
Next and Finish.

00:06:37.630 --> 00:06:40.325
Okay, so it's finished.

00:06:40.325 --> 00:06:43.595
So now what we can do is you can simply run the code,

00:06:43.595 --> 00:06:47.990
just right-click your client and run as Java application.

00:06:47.990 --> 00:06:49.835
So now let's see what happen.

00:06:49.835 --> 00:06:53.945
We are expecting the say hi material be called the first place, right?

00:06:53.945 --> 00:06:55.325
But that's not gonna happen.

00:06:55.325 --> 00:06:57.950
See The Hello Mr. Eij,

00:06:57.950 --> 00:06:59.360
It's sprint during the last,

00:06:59.360 --> 00:07:01.115
which means secant call.

00:07:01.115 --> 00:07:03.020
Before calling this method,

00:07:03.020 --> 00:07:05.855
there is another method called interceptor class calls.

00:07:05.855 --> 00:07:08.735
And the method interceptor is say hi method.

00:07:08.735 --> 00:07:14.285
So this is a say hi method has been intercepted by the intercept data.

00:07:14.285 --> 00:07:18.240
So this is how you need to make use of intercept tasks.
