1
00:00:01,040 --> 00:00:01,550
[Autogenerated] one off.

2
00:00:01,550 --> 00:00:07,440
The standard features off Java is these JavaScript engines API.

3
00:00:07,440 --> 00:00:11,810
Let's quickly review the main concepts off this API so that you're

4
00:00:11,810 --> 00:00:15,940
prepared to understand how spring integration support it.

5
00:00:15,940 --> 00:00:20,440
There are three main parts to the architecture of J M X.

6
00:00:20,440 --> 00:00:23,740
The first part is instrumentation.

7
00:00:23,740 --> 00:00:27,920
To be able to manage components inside your running application.

8
00:00:27,920 --> 00:00:30,540
You'll need to instrument them.

9
00:00:30,540 --> 00:00:34,890
That means you'll have to AD FS NetBeans classes to your application

10
00:00:34,890 --> 00:00:38,140
that access the components you want to manage.

11
00:00:38,140 --> 00:00:41,940
We'll take a closer look at and beans in a moment.

12
00:00:41,940 --> 00:00:45,640
The second part is the Ambien server.

13
00:00:45,640 --> 00:00:49,440
The M being server manages these AM beans.

14
00:00:49,440 --> 00:00:52,590
You will have to register your ambience in the Ambien

15
00:00:52,590 --> 00:00:54,980
server to make them accessible by J.

16
00:00:54,980 --> 00:00:55,110
M.

17
00:00:55,110 --> 00:00:56,340
X.

18
00:00:56,340 --> 00:01:00,040
The third part is a communications connector.

19
00:01:00,040 --> 00:01:03,700
This connector makes the M being server that's running in your

20
00:01:03,700 --> 00:01:07,640
application accessible to external tools.

21
00:01:07,640 --> 00:01:10,760
The standard connector that's provided with the Java Virtual

22
00:01:10,760 --> 00:01:14,750
machine is based on Jaffa Remote method invocation.

23
00:01:14,750 --> 00:01:17,250
But it's possible to use a different connector,

24
00:01:17,250 --> 00:01:21,040
which works using some other network protocol.

25
00:01:21,040 --> 00:01:23,940
When you have these parts running in your application,

26
00:01:23,940 --> 00:01:28,640
you can use a management tool to access and control the and beans.

27
00:01:28,640 --> 00:01:31,950
The jvm includes a simple tool named Jay console,

28
00:01:31,950 --> 00:01:34,810
which will be using for our demos.

29
00:01:34,810 --> 00:01:39,640
Let's take a closer look at and beans and I m being consists off a

30
00:01:39,640 --> 00:01:43,840
regular Java interface and a class that implements that interface that

31
00:01:43,840 --> 00:01:47,740
provide a number off attributes and operations.

32
00:01:47,740 --> 00:01:50,640
An attribute is a value that might be read and

33
00:01:50,640 --> 00:01:53,440
written by a gather and center method.

34
00:01:53,440 --> 00:01:59,240
On operation is any arbitrary method that performs some action on the and being,

35
00:01:59,240 --> 00:02:04,740
and beans are registered in the Ambien server using an object name.

36
00:02:04,740 --> 00:02:08,840
J M X Object names have a specific format.

37
00:02:08,840 --> 00:02:10,790
They consist off a domain,

38
00:02:10,790 --> 00:02:13,770
followed by a column and then a set of properties

39
00:02:13,770 --> 00:02:16,640
in the form off key value pairs.

40
00:02:16,640 --> 00:02:20,610
There are no fixed rules about the domain or properties that you should

41
00:02:20,610 --> 00:02:25,120
use for the object names off your M beans so you can choose anything that

42
00:02:25,120 --> 00:02:28,540
makes sense for your particular application.

43
00:02:28,540 --> 00:02:29,400
Finally,

44
00:02:29,400 --> 00:02:35,640
and beans can produce JPA max notifications to signal state changes or errors.

45
00:02:35,640 --> 00:02:40,080
A management tool can present these notifications to a system administrator,

46
00:02:40,080 --> 00:02:45,640
similar to the alerts that we saw in the demo with Influx to be and Grafana

47
00:02:45,640 --> 00:02:49,250
J M X is a standard part off the Java virtual machine,

48
00:02:49,250 --> 00:02:53,640
and the JVM provides a number off and beans itself.

49
00:02:53,640 --> 00:02:57,040
These platform and beans provide information about

50
00:02:57,040 --> 00:03:05,000
things such as the just in time compiler, garbage collection, memory management and threats.

