1
00:00:01,040 --> 00:00:04,650
[Autogenerated] Let's get into the code again to learn about the main concepts

2
00:00:04,650 --> 00:00:08,640
of micro meter and how you can use them in an application.

3
00:00:08,640 --> 00:00:09,680
Open example.

4
00:00:09,680 --> 00:00:14,020
Project number three in your IDE to use micro meter,

5
00:00:14,020 --> 00:00:17,040
we don't have to add any dependencies.

6
00:00:17,040 --> 00:00:22,050
Springwood Actuator already has a dependency on the core model of micro meter,

7
00:00:22,050 --> 00:00:24,940
so it's already available for use.

8
00:00:24,940 --> 00:00:28,940
Let's use micro meter in the registration service.

9
00:00:28,940 --> 00:00:32,740
What we want to do here is at meters to the code.

10
00:00:32,740 --> 00:00:36,640
Meters are what you used to record metrics.

11
00:00:36,640 --> 00:00:41,140
Micro meter manages its meters in a meter registry.

12
00:00:41,140 --> 00:00:45,060
The first thing we need to do is inject a media registry in the

13
00:00:45,060 --> 00:00:49,840
registration service by adding a constructor parameter for it.

14
00:00:49,840 --> 00:00:53,870
Note that the meter registry is created as a spring bean in the

15
00:00:53,870 --> 00:00:57,840
application contacts by spring boot auto configuration,

16
00:00:57,840 --> 00:01:00,940
so it's available for us to inject here.

17
00:01:00,940 --> 00:01:06,140
Now we can use it in the constructor to create different kinds off meters.

18
00:01:06,140 --> 00:01:10,040
Perhaps the simplest type of meter is the counter.

19
00:01:10,040 --> 00:01:13,400
Let's create a counter by calling the counter method on

20
00:01:13,400 --> 00:01:15,810
the meter registry and give it a name.

21
00:01:15,810 --> 00:01:19,440
Globomantics stopped registration, not count.

22
00:01:19,440 --> 00:01:23,640
Let's also create a field in the class to store the counter.

23
00:01:23,640 --> 00:01:27,340
Now we can use the counter in the register method.

24
00:01:27,340 --> 00:01:30,590
Let's add a line to increment the counter every time

25
00:01:30,590 --> 00:01:32,940
the register method is called.

26
00:01:32,940 --> 00:01:36,640
That's our very first, very simple meter.

27
00:01:36,640 --> 00:01:38,940
Let's see it in action.

28
00:01:38,940 --> 00:01:40,580
As with all these demos,

29
00:01:40,580 --> 00:01:43,800
make sure you have Green Mill running in Docker and then

30
00:01:43,800 --> 00:01:46,440
start to spring Bootstrap services.

31
00:01:46,440 --> 00:01:50,840
Then take a look again at the actuator metrics endpoint.

32
00:01:50,840 --> 00:01:54,070
Our Globomantics start registration or count metric

33
00:01:54,070 --> 00:01:57,040
now shows up in the list of metrics.

34
00:01:57,040 --> 00:02:01,040
Let's copy the name and paste it after the URL.

35
00:02:01,040 --> 00:02:03,260
Here we can see the value of the counter,

36
00:02:03,260 --> 00:02:07,940
which is, of course, zero At the moment in the code for this demo,

37
00:02:07,940 --> 00:02:12,340
I've included a JUnit test named Low Generator.

38
00:02:12,340 --> 00:02:13,730
When you run this test,

39
00:02:13,730 --> 00:02:17,310
it's going to submit 1000 registrations with the random

40
00:02:17,310 --> 00:02:20,440
names and email addresses to the service.

41
00:02:20,440 --> 00:02:22,090
Let's start this test.

42
00:02:22,090 --> 00:02:26,140
Go back to the browser and refresh the metrics page.

43
00:02:26,140 --> 00:02:29,940
You will see the counter go up as test is running.

44
00:02:29,940 --> 00:02:34,340
Besides counters, micro meter has other types of meters.

45
00:02:34,340 --> 00:02:38,140
Let's add another meter to the registration service.

46
00:02:38,140 --> 00:02:40,960
Let's stop the low generator test and go back to the

47
00:02:40,960 --> 00:02:44,240
constructor off the registration services.

48
00:02:44,240 --> 00:02:49,240
We'll create a timer, which is a media for recording amounts of time,

49
00:02:49,240 --> 00:02:52,870
just like the counter we created from the meter registry.

50
00:02:52,870 --> 00:02:57,040
By calling the timer method, let's name this one.

51
00:02:57,040 --> 00:03:00,470
Globomantics stopped registration or time and also

52
00:03:00,470 --> 00:03:03,240
create a feel for it in the class.

53
00:03:03,240 --> 00:03:06,740
The next step is using the timer in the register method to

54
00:03:06,740 --> 00:03:10,240
record how long it takes to execute the method.

55
00:03:10,240 --> 00:03:12,720
The timer has different record methods,

56
00:03:12,720 --> 00:03:16,340
and we're going to use the one that takes a supplier.

57
00:03:16,340 --> 00:03:19,850
What we're going to pass as the supplier is the whole body

58
00:03:19,850 --> 00:03:22,910
off the method in a Lambda expression.

59
00:03:22,910 --> 00:03:25,560
The record method is going to measure the time it

60
00:03:25,560 --> 00:03:27,690
takes to execute the code in Islam.

61
00:03:27,690 --> 00:03:28,490
The expression.

62
00:03:28,490 --> 00:03:32,740
And then it will return whatever the Lambda expression returns.

63
00:03:32,740 --> 00:03:33,540
In this case,

64
00:03:33,540 --> 00:03:36,610
that's the registration event object that we want to return

65
00:03:36,610 --> 00:03:40,150
from the register method so we can just put return in front

66
00:03:40,150 --> 00:03:42,640
off a call to the record method.

67
00:03:42,640 --> 00:03:46,590
Let's restart to spring good service to let our code changes take effect

68
00:03:46,590 --> 00:03:50,880
and also run the low generated test again at the metrics,

69
00:03:50,880 --> 00:03:51,370
endpoint.

70
00:03:51,370 --> 00:03:53,740
Our timer is now, of course, also listed.

71
00:03:53,740 --> 00:03:56,460
And we can take a look at the details by a pending its

72
00:03:56,460 --> 00:03:59,540
name to the metrics and point URL.

73
00:03:59,540 --> 00:03:59,980
Here,

74
00:03:59,980 --> 00:04:04,300
you'll see that the timer provides three measurements count total

75
00:04:04,300 --> 00:04:08,180
time and max the same as you saw earlier when we looked at the

76
00:04:08,180 --> 00:04:11,540
HTTP dot server dot requests metric.

77
00:04:11,540 --> 00:04:14,560
Now you understand that the HTTP do serve able to

78
00:04:14,560 --> 00:04:18,540
requests metric is also a micrometer timer.

79
00:04:18,540 --> 00:04:23,840
Each type of metric produces its own particular set of measurements.

80
00:04:23,840 --> 00:04:27,940
As we saw, a counter just produces account value.

81
00:04:27,940 --> 00:04:31,790
A timer also provides account and total time and max

82
00:04:31,790 --> 00:04:34,440
measurements in addition to the count.

83
00:04:34,440 --> 00:04:38,090
Besides counters and timers, there are other types of metrics.

84
00:04:38,090 --> 00:04:41,900
But I'm not going to explain them all in depth here.

85
00:04:41,900 --> 00:04:52,000
The three main types of metrics are counter SSHD timers engages We'll use engage in one off the next demos

