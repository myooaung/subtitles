WEBVTT
1
00:00:01.040 --> 00:00:03.060
[Autogenerated] Let's start the services off the demo

2
00:00:03.060 --> 00:00:06.040
application and go back to Grafana.

3
00:00:06.040 --> 00:00:10.140
Grafana is a powerful tool with lots of features.

4
00:00:10.140 --> 00:00:13.940
I'm only going to show you the tip off the iceberg here,

5
00:00:13.940 --> 00:00:17.480
included with the example Project is a JSON file

6
00:00:17.480 --> 00:00:20.340
that defines a Grafana dance sport.

7
00:00:20.340 --> 00:00:23.040
Let's import that dashboard.

8
00:00:23.040 --> 00:00:26.780
Move your mouse over the plus I can in the top left and

9
00:00:26.780 --> 00:00:30.140
select import from the menu that comes up.

10
00:00:30.140 --> 00:00:35.400
Then click the Upload JSON file button and select the Grafana dashboard,

11
00:00:35.400 --> 00:00:38.740
a JSON file and click Import.

12
00:00:38.740 --> 00:00:41.730
Now you have already made dashboard for this application.

13
00:00:41.730 --> 00:00:46.330
That shows you some interesting things before we continue.

14
00:00:46.330 --> 00:00:51.440
Click on the disk at I can in the top right and saved the dashboard.

15
00:00:51.440 --> 00:00:53.330
Grafana seems to havoc work.

16
00:00:53.330 --> 00:00:57.340
If you don't save the dashboard, then alerts don't work.

17
00:00:57.340 --> 00:01:01.140
Now let's take a look at what you can see on the dashboard.

18
00:01:01.140 --> 00:01:07.040
Grafana Dashboard consists off panels that can show data in different ways.

19
00:01:07.040 --> 00:01:11.540
At the top, we have a panel with the title registrations.

20
00:01:11.540 --> 00:01:15.120
If you click on the title of this panel and then select edit,

21
00:01:15.120 --> 00:01:18.040
you can see how this panel works.

22
00:01:18.040 --> 00:01:23.140
The panel gets its data by performing queries on the data source.

23
00:01:23.140 --> 00:01:26.640
In this case, the panel has to queries.

24
00:01:26.640 --> 00:01:29.040
Let's look at the first one.

25
00:01:29.040 --> 00:01:34.100
The query looks a little bit like SQL from the default data source.

26
00:01:34.100 --> 00:01:38.220
It's elects the metric spring integration sent where name is

27
00:01:38.220 --> 00:01:41.940
SQL to registration service activator.

28
00:01:41.940 --> 00:01:43.870
We've seen this metric before.

29
00:01:43.870 --> 00:01:46.450
It's the metric that's being integration provides with

30
00:01:46.450 --> 00:01:50.140
information about send calls or message channels and Message

31
00:01:50.140 --> 00:01:55.170
Hander's What's After the Wear corresponds to the tax that are

32
00:01:55.170 --> 00:01:58.480
available this metric on the next line,

33
00:01:58.480 --> 00:02:03.040
the select defines which measurement off the metric we want to see.

34
00:02:03.040 --> 00:02:06.740
In this case, we select the count measurement.

35
00:02:06.740 --> 00:02:11.040
Next, we have to specify an aggregation function.

36
00:02:11.040 --> 00:02:13.810
This is necessary because we're not necessarily

37
00:02:13.810 --> 00:02:16.360
selecting all the individual measurements,

38
00:02:16.360 --> 00:02:20.020
but we're interested in the values off the measurement in a certain time.

39
00:02:20.020 --> 00:02:25.620
Interval the aggregation functions specifies how we want to summarize the

40
00:02:25.620 --> 00:02:28.310
measurements in the time interval that we're selecting,

41
00:02:28.310 --> 00:02:33.240
for we are taking the mean value off the measurements here.

42
00:02:33.240 --> 00:02:37.660
The next line that starts with group by defines how we select the

43
00:02:37.660 --> 00:02:42.800
measurements to be aggregated the setting time dollar underscore

44
00:02:42.800 --> 00:02:46.640
underscore Interval means we're interested in the measurements in

45
00:02:46.640 --> 00:02:48.740
the current interval.

46
00:02:48.740 --> 00:02:52.350
There is a second query here, which is the same as the first one,

47
00:02:52.350 --> 00:02:56.440
except that there is an extra cart eerie in in the first line.

48
00:02:56.440 --> 00:03:00.040
This query select only the failures.

49
00:03:00.040 --> 00:03:04.210
With these two queries, we get to over late graphs in the panel,

50
00:03:04.210 --> 00:03:05.760
one with the total number off,

51
00:03:05.760 --> 00:03:09.060
send calls to registration service and the other one

52
00:03:09.060 --> 00:03:11.840
with only the failed sand calls.

53
00:03:11.840 --> 00:03:17.140
Besides the registrations panel, I set up a number of other panels.

54
00:03:17.140 --> 00:03:19.680
The principal for each of them is the same,

55
00:03:19.680 --> 00:03:24.140
so each panel gets its data from one or more queries.

56
00:03:24.140 --> 00:03:25.140
For example,

57
00:03:25.140 --> 00:03:28.090
the ticket count panel has three queries on the

58
00:03:28.090 --> 00:03:31.310
Globomantics registration tickets metric,

59
00:03:31.310 --> 00:03:36.180
which we've added earlier and shows how many premium standard and

60
00:03:36.180 --> 00:03:39.640
community tickets are currently registered.

61
00:03:39.640 --> 00:03:42.770
There are two more panels that show the number of calls to

62
00:03:42.770 --> 00:03:45.540
the billing system and confirmation emails,

63
00:03:45.540 --> 00:03:49.820
which are set up similarly to the registration spaniel to show

64
00:03:49.820 --> 00:03:53.440
both the total number of calls and the errors.

65
00:03:53.440 --> 00:03:56.340
There's also on alert spinal.

66
00:03:56.340 --> 00:03:59.540
The panels for the billing system and confirmation emails

67
00:03:59.540 --> 00:04:02.460
have alert rules and even alert triggers.

68
00:04:02.460 --> 00:04:05.140
Then it will show up in this panel.

69
00:04:05.140 --> 00:04:05.800
Finally,

70
00:04:05.800 --> 00:04:11.440
There are two panels at the bottom that showed the JVM memory and CPU usage.

71
00:04:11.440 --> 00:04:14.340
Right now, not much is happening.

72
00:04:14.340 --> 00:04:17.740
Let's start the low generator test in the IDE E and

73
00:04:17.740 --> 00:04:20.240
see what happens on the dashboard.

74
00:04:20.240 --> 00:04:21.220
After a while,

75
00:04:21.220 --> 00:04:23.880
you'll see graphs appearing and you'll see the ticket

76
00:04:23.880 --> 00:04:27.110
counts go up in the registration spent.

77
00:04:27.110 --> 00:04:33.140
All you'll see green bars, but sometimes also a smaller orange bar appears.

78
00:04:33.140 --> 00:04:37.720
The green bar shows the total number off sand calls on the registration service,

79
00:04:37.720 --> 00:04:41.340
and the Orange Bar shows the number off errors.

80
00:04:41.340 --> 00:04:45.140
Remember that errors sometimes happen because the low generated

81
00:04:45.140 --> 00:04:49.140
tests sometimes enters duplicate email addresses.

82
00:04:49.140 --> 00:04:51.490
As you can see in the alerts panel,

83
00:04:51.490 --> 00:04:55.030
the billing system and confirmation emails are both running.

84
00:04:55.030 --> 00:05:01.340
Okay, let's now stop the greenmail Docker container and see what happens.

85
00:05:01.340 --> 00:05:05.380
You will see orange bars appear in the confirmation emails panel,

86
00:05:05.380 --> 00:05:10.440
and when this continues, a red alert appears in the alerts panel.

87
00:05:10.440 --> 00:05:13.640
This would indicate to a system administrator that there

88
00:05:13.640 --> 00:05:16.240
is a problem that needs to be fixed.

89
00:05:16.240 --> 00:05:18.940
Let's restart greenmail.

90
00:05:18.940 --> 00:05:22.740
After about 20 seconds, theater goes away.

91
00:05:22.740 --> 00:05:26.940
That's it for this demo with influx dbn Grafana.

92
00:05:26.940 --> 00:05:29.930
If you are interested in learning more about monitoring,

93
00:05:29.930 --> 00:05:33.880
especially when you're running your application in Docker Containers.

94
00:05:33.880 --> 00:05:37.840
Then there's another course on Pluralsight that you'll find interesting.

95
00:05:37.840 --> 00:05:49.000
It's monitoring containerized application Health with Docker by Elton Stoneman. He is also using Grafana there to visualized metrics.

