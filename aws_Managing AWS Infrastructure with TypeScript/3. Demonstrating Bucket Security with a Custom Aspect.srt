1
00:00:02,040 --> 00:00:03,900
Before we dive into the last module,

2
00:00:03,900 --> 00:00:07,940
let's take a moment and apply a measure of aspects in our demo application.

3
00:00:07,940 --> 00:00:11,730
Let's ensure that our website bucket is only accessible by the CloudFront role,

4
00:00:11,730 --> 00:00:15,340
and that versioning is turned on for all CodeBuild asset buckets.

5
00:00:15,340 --> 00:00:19,840
A required property for using buckets is CodeBuild sources.

6
00:00:19,840 --> 00:00:20,960
To implement the aspect,

7
00:00:20,960 --> 00:00:25,540
we simply build a class that implements the IAspect interface.

8
00:00:25,540 --> 00:00:27,290
Then, inside the class definition,

9
00:00:27,290 --> 00:00:32,240
we only need to implement the visitor function to create our aspect checker.

10
00:00:32,240 --> 00:00:32,920
Admittedly,

11
00:00:32,920 --> 00:00:36,190
sometimes the construct properties can get a little difficult to realize,

12
00:00:36,190 --> 00:00:39,440
which is where the documentation becomes our best friend.

13
00:00:39,440 --> 00:00:40,150
In this example,

14
00:00:40,150 --> 00:00:44,500
we first pass our configuration property to an isResolvable method to

15
00:00:44,500 --> 00:00:47,330
ensure that the resource exists, and then finally check that the

16
00:00:47,330 --> 00:00:49,740
value of the property is set to enabled.

17
00:00:49,740 --> 00:00:51,580
It's a bit verbose, to be sure,

18
00:00:51,580 --> 00:00:54,770
but after you look up properties in the stack node and then assess their values,

19
00:00:54,770 --> 00:00:57,940
it gets easier and easier.

20
00:00:57,940 --> 00:01:00,380
And then finally, from within the stack class,

21
00:01:00,380 --> 00:01:03,490
you just have to call the applyAspect method, instantiating a new

22
00:01:03,490 --> 00:01:07,340
version of the class you just created. Execution of the aspect happens

23
00:01:07,340 --> 00:01:09,900
during the prepare phase of the CDK lifecycle,

24
00:01:09,900 --> 00:01:12,170
at which time the visit method is called.

25
00:01:12,170 --> 00:01:15,550
See how it feels a bit like a unit test? Let's look at a more

26
00:01:15,550 --> 00:01:20,370
complex example with website bucket aspect. Again,

27
00:01:20,370 --> 00:01:22,860
we need to build a class that implements the IAspect

28
00:01:22,860 --> 00:01:26,340
interface and defines the visitor function.

29
00:01:26,340 --> 00:01:26,820
In this case,

30
00:01:26,820 --> 00:01:30,840
we loop through a policy document of the bucket object and grab the statements.

31
00:01:30,840 --> 00:01:31,540
In each statement,

32
00:01:31,540 --> 00:01:34,840
we seek out the principle values associated with the statement.

33
00:01:34,840 --> 00:01:35,260
From there,

34
00:01:35,260 --> 00:01:37,610
we can perform just about anything we want to ensure our

35
00:01:37,610 --> 00:01:40,140
bucket meets the standards we set forth.

36
00:01:40,140 --> 00:01:43,300
We could ensure that the only action is an S3 get, and we

37
00:01:43,300 --> 00:01:45,630
can ensure that the only principle value matches whatever

38
00:01:45,630 --> 00:01:47,740
our CloudFront identity would be.

39
00:01:47,740 --> 00:01:48,280
In this case,

40
00:01:48,280 --> 00:01:52,600
I just typed a fictitious value for our identity. And finally, from

41
00:01:52,600 --> 00:01:56,140
within our stack, our aspect will get executed.

42
00:01:56,140 --> 00:01:57,960
Now you may have noticed in the last two examples, I

43
00:01:57,960 --> 00:01:59,780
didn't check for the node object type,

44
00:01:59,780 --> 00:02:01,670
which means that this is going to run against all

45
00:02:01,670 --> 00:02:03,840
objects contained within the stack.

46
00:02:03,840 --> 00:02:08,340
So we'd want to embed more logic to ensure that it runs for only the CFN bucket,

47
00:02:08,340 --> 00:02:10,920
where the static website hosting feature is enabled.

48
00:02:10,920 --> 00:02:14,290
Otherwise it would impact our other buckets. You could also create a single

49
00:02:14,290 --> 00:02:19,240
bucket checker that includes all your bucket logic in one class.

50
00:02:19,240 --> 00:02:22,240
So let's take a live look of these aspects in action.

51
00:02:22,240 --> 00:02:25,040
If I go back to our construct file,

52
00:02:25,040 --> 00:02:29,110
you can see that right here, I added two extra properties to the construct.

53
00:02:29,110 --> 00:02:30,330
They're both optional.

54
00:02:30,330 --> 00:02:34,470
I added a bucketVersioned boolean and a requireBucketEncryption boolean.

55
00:02:34,470 --> 00:02:36,030
As I said, they're both optional,

56
00:02:36,030 --> 00:02:38,310
so you don't have to version the buckets, and you

57
00:02:38,310 --> 00:02:39,810
don't have to require encryption.

58
00:02:39,810 --> 00:02:43,550
However, if you are going to use buckets for deployments for CodePipeline,

59
00:02:43,550 --> 00:02:45,440
they do have to be versioned.

60
00:02:45,440 --> 00:02:47,810
So I'm going to go ahead and turn this on once I get

61
00:02:47,810 --> 00:02:50,540
back over to my stack application.

62
00:02:50,540 --> 00:02:55,340
Now I've gone ahead and republished this to npmjs as version 2.0. So

63
00:02:55,340 --> 00:02:58,840
let's switch back over to the stack app itself.

64
00:02:58,840 --> 00:03:02,800
Now what I've done is created an aspects folder, which you

65
00:03:02,800 --> 00:03:06,160
can see at the top left here. And inside that aspects

66
00:03:06,160 --> 00:03:08,910
folder, I've created two classes.

67
00:03:08,910 --> 00:03:10,920
The first class is called BucketVersioningChecker,

68
00:03:10,920 --> 00:03:15,740
and if I scroll down a little bit, there's a BucketEncryptionChecker.

69
00:03:15,740 --> 00:03:15,950
Now,

70
00:03:15,950 --> 00:03:19,780
as we just discussed, both of these implement the CDK IAspect

71
00:03:19,780 --> 00:03:23,690
interface, and both implement the visitor function. Now to take a

72
00:03:23,690 --> 00:03:26,210
quick peek at this, the first thing I've done is made sure that

73
00:03:26,210 --> 00:03:28,740
what we're looking at are buckets, and that this is not going to

74
00:03:28,740 --> 00:03:31,140
run against anything else.

75
00:03:31,140 --> 00:03:34,040
And then from there I have a simple bit of logic to go

76
00:03:34,040 --> 00:03:36,690
through and implement the aspect.

77
00:03:36,690 --> 00:03:39,380
The first thing I do is just make sure the version and configuration

78
00:03:39,380 --> 00:03:44,090
exists and isn't null, and then I make sure to exclude the case where

79
00:03:44,090 --> 00:03:47,080
the property is a token by using the Tokenization.isResolvable

80
00:03:47,080 --> 00:03:50,950
method. And this will go ahead and skip over that situation where

81
00:03:50,950 --> 00:03:52,540
that value is tokenized.

82
00:03:52,540 --> 00:03:55,400
But suffice it to say, the main logic exists right here,

83
00:03:55,400 --> 00:03:56,010
where it says,

84
00:03:56,010 --> 00:03:58,610
node.versioningConfiguration.status is not equal to

85
00:03:58,610 --> 00:04:00,620
Enabled. And if it's not enabled,

86
00:04:00,620 --> 00:04:03,850
it goes ahead and uses the Annotations class, and creates an

87
00:04:03,850 --> 00:04:06,440
error against the node that it's running against.

88
00:04:06,440 --> 00:04:10,270
Now if I scroll down and look at the other aspect, now

89
00:04:10,270 --> 00:04:12,230
here, instead of checking for versioning,

90
00:04:12,230 --> 00:04:15,430
I'm just checking for bucket encryption, and similarly,

91
00:04:15,430 --> 00:04:17,550
if bucket encryption is not turned on at all,

92
00:04:17,550 --> 00:04:18,840
or the bucket is unencrypted,

93
00:04:18,840 --> 00:04:23,140
the aspect is going to fail with the error of bucket encryption is not enabled.

94
00:04:23,140 --> 00:04:26,930
So if I go back to my main application file and scroll down,

95
00:04:26,930 --> 00:04:30,440
you can see that I turned bucket versioning off and bucket

96
00:04:30,440 --> 00:04:33,740
encryption to off to trigger my aspects.

97
00:04:33,740 --> 00:04:38,340
And at the bottom of this file, I apply the aspects to my app.

98
00:04:38,340 --> 00:04:41,740
So if I run a cdk synth,

99
00:04:41,740 --> 00:04:45,130
you can see that there are my two errors complaining that bucket

100
00:04:45,130 --> 00:04:47,550
versioning and bucket encryption are both not enabled.

101
00:04:47,550 --> 00:04:57,020
So let's go ahead and turn those on, re‑compile, and I'll go ahead

102
00:04:57,020 --> 00:04:58,840
and clear this screen, just so you so you can see this a little

103
00:04:58,840 --> 00:05:04,540
bit better. Now if we do a cdk synth, let's see what happens.

104
00:05:04,540 --> 00:05:06,800
Now we can see that the application synthesized exactly

105
00:05:06,800 --> 00:05:11,440
as we'd expected without any errors, So that's really all there is to it,

106
00:05:11,440 --> 00:05:13,380
and you can go as deeply as you want in creating

107
00:05:13,380 --> 00:05:16,740
aspects across your application.

108
00:05:16,740 --> 00:05:20,260
So to check back in, Ellen and Josh have once again met with the architecture

109
00:05:20,260 --> 00:05:24,810
and security groups at Globomantics, and after learning about Jest‑based

110
00:05:24,810 --> 00:05:27,450
construct testing in the versatility of aspects,

111
00:05:27,450 --> 00:05:30,920
they've documented a testing and governance strategy around all custom

112
00:05:30,920 --> 00:05:35,160
constructs that are built. With as many developers as they have, they've

113
00:05:35,160 --> 00:05:39,120
created a security mantra of embraced security at the developer level to

114
00:05:39,120 --> 00:05:44,280
implement these policy checks before the constructs are ever deployed. In the

115
00:05:44,280 --> 00:05:47,530
last module, I'm going to try and pique your interest into pressing forward

116
00:05:47,530 --> 00:05:56,000
with CDK by showing you a super cool concept implementation of building C DK from a UI‑driven interface.

