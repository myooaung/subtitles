1
00:00:02,040 --> 00:00:04,030
So let's see how this works in practice.

2
00:00:04,030 --> 00:00:06,970
There are a handful of techniques to achieve true dynamic

3
00:00:06,970 --> 00:00:09,440
and reusable multi‑environment scenarios.

4
00:00:09,440 --> 00:00:13,140
Depending on your environment, one or all of these methods may benefit you.

5
00:00:13,140 --> 00:00:15,870
Achieving fully‑dynamic deployments means that any resource,

6
00:00:15,870 --> 00:00:16,280
construct,

7
00:00:16,280 --> 00:00:19,370
or stack can be deployed to any region dynamically as

8
00:00:19,370 --> 00:00:21,940
dictated by pre‑conditioned metadata.

9
00:00:21,940 --> 00:00:23,420
Besides dynamic geography,

10
00:00:23,420 --> 00:00:27,540
these stacks can be set up to be as dynamic as you wish them to be.

11
00:00:27,540 --> 00:00:28,630
As you've seen so far,

12
00:00:28,630 --> 00:00:32,440
there always seems to be about a dozen different ways to do anything with AWS.

13
00:00:32,440 --> 00:00:33,820
As I said in the last slide,

14
00:00:33,820 --> 00:00:35,930
this is absolutely the case as well in setting up

15
00:00:35,930 --> 00:00:38,740
environments for multi‑target deployments.

16
00:00:38,740 --> 00:00:41,550
And in most cases, it's actually easier than you think.

17
00:00:41,550 --> 00:00:45,740
In fact, many of these techniques aren't even really AWS specific.

18
00:00:45,740 --> 00:00:49,020
If you've been connecting to AWS using the CDK so far,

19
00:00:49,020 --> 00:00:52,730
you've certainly set up credentials for yourself and likely multiple profiles.

20
00:00:52,730 --> 00:00:57,340
Profiles are the simplest way to deploy to multiple accounts or regions.

21
00:00:57,340 --> 00:01:00,940
Since profiles are a relatively simple command line option,

22
00:01:00,940 --> 00:01:05,240
I'm going to focus more on the dynamic coding techniques going forward.

23
00:01:05,240 --> 00:01:08,120
The most rudimentary path forward here is to simply embed the

24
00:01:08,120 --> 00:01:11,340
environmental metadata into the project itself.

25
00:01:11,340 --> 00:01:12,670
As I showed in the last module,

26
00:01:12,670 --> 00:01:15,610
you can also use the context key value store to house

27
00:01:15,610 --> 00:01:18,640
environmental meta characteristics as well.

28
00:01:18,640 --> 00:01:19,320
From there,

29
00:01:19,320 --> 00:01:22,900
it's not uncommon for organizations to use heavy scripting logic through

30
00:01:22,900 --> 00:01:26,240
bash or PowerShell to control the deployment logic.

31
00:01:26,240 --> 00:01:29,690
Even a lambda could theoretically act as a controller for deployments.

32
00:01:29,690 --> 00:01:33,450
When you're ready to just store all environment meta definitions in the cloud,

33
00:01:33,450 --> 00:01:36,120
either for security reasons or just for convenience,

34
00:01:36,120 --> 00:01:39,540
the SSN parameter store is a great option as well.

35
00:01:39,540 --> 00:01:40,260
And finally,

36
00:01:40,260 --> 00:01:44,340
any combination of these tools and methods can be employed to your enterprise.

37
00:01:44,340 --> 00:01:48,490
How about an IT service management system like ServiceNow acting as a request

38
00:01:48,490 --> 00:01:51,040
and fulfillment trigger for your environmental request,

39
00:01:51,040 --> 00:01:54,110
using a sophisticated approval workflow or even the

40
00:01:54,110 --> 00:01:57,440
AWS Service Catalog tool itself.

41
00:01:57,440 --> 00:01:58,890
So let's start simple.

42
00:01:58,890 --> 00:02:02,040
Let's start by embedding properties in code.

43
00:02:02,040 --> 00:02:03,050
In this simple example,

44
00:02:03,050 --> 00:02:05,700
we're storing the current environment to be a dev‑local environment

45
00:02:05,700 --> 00:02:08,080
through the simple use of an object and a property.

46
00:02:08,080 --> 00:02:11,170
And we're able to store all environment‑specific meta

47
00:02:11,170 --> 00:02:14,140
characteristics accordingly for the environment designated.

48
00:02:14,140 --> 00:02:17,080
Now I know what you're saying, this about as rigid as it can be.

49
00:02:17,080 --> 00:02:18,740
Well, you're correct.

50
00:02:18,740 --> 00:02:20,630
We'll start pulling these out in a second.

51
00:02:20,630 --> 00:02:21,830
In this object,

52
00:02:21,830 --> 00:02:25,560
we're storing all characteristics for dev‑local and dev‑integration accordingly.

53
00:02:25,560 --> 00:02:28,400
Admittedly, you'd like to have hundreds more properties here,

54
00:02:28,400 --> 00:02:31,180
but I've only used the account and EC2 characteristics

55
00:02:31,180 --> 00:02:33,340
for each to keep the example simple.

56
00:02:33,340 --> 00:02:36,130
Local‑dev will default to T2.Nano instances while

57
00:02:36,130 --> 00:02:39,840
dev‑integration would use T2.Micro instances.

58
00:02:39,840 --> 00:02:43,280
So now as we create our stacks, we're using simple logic‑based actions.

59
00:02:43,280 --> 00:02:44,820
For local development environments,

60
00:02:44,820 --> 00:02:47,780
we don't create a CDN as we do for dev‑integration.

61
00:02:47,780 --> 00:02:50,610
Another nice feature of using a structured programming language here

62
00:02:50,610 --> 00:02:53,670
is that we can overload the stack constructors and optionally pass in

63
00:02:53,670 --> 00:02:55,840
what we need based on the logic we need.

64
00:02:55,840 --> 00:02:57,070
In the example above,

65
00:02:57,070 --> 00:03:00,430
we deploy dev‑local and dev‑integration to the same AWS account,

66
00:03:00,430 --> 00:03:03,220
whereas in higher level environments such as test,

67
00:03:03,220 --> 00:03:05,340
we may choose a different target.

68
00:03:05,340 --> 00:03:09,940
Let's take this one a step further with context to make it a bit more usable.

69
00:03:09,940 --> 00:03:11,000
So again, in this case,

70
00:03:11,000 --> 00:03:13,620
we strip out the hard‑coded designation of the environment

71
00:03:13,620 --> 00:03:16,320
and keep our environment data metaobjects.

72
00:03:16,320 --> 00:03:18,190
However, in this case,

73
00:03:18,190 --> 00:03:20,320
assuming that the environment value is either stored in

74
00:03:20,320 --> 00:03:23,120
the context JSON file or it's passed in through the

75
00:03:23,120 --> 00:03:25,070
context flag from the command line,

76
00:03:25,070 --> 00:03:29,360
we can acquire the necessary environment without the in‑line hard coding Again,

77
00:03:29,360 --> 00:03:31,070
if you're thinking here that you could just store all

78
00:03:31,070 --> 00:03:34,400
the meta information and context, including the environment props,

79
00:03:34,400 --> 00:03:35,640
you're correct.

80
00:03:35,640 --> 00:03:37,510
I could take this one step further and strip this

81
00:03:37,510 --> 00:03:40,040
out into the context JSON file.

82
00:03:40,040 --> 00:03:41,910
You can imagine that you might not want to pass on all

83
00:03:41,910 --> 00:03:44,140
these properties on the command line, either.

84
00:03:44,140 --> 00:03:47,840
SSN's going to behave the same way, acting as a parameter store.

85
00:03:47,840 --> 00:03:50,580
Let's move the environment data out of the local file and

86
00:03:50,580 --> 00:03:53,740
into SSN and see how things change.

87
00:03:53,740 --> 00:03:58,040
So I just went ahead and created eight parameters in the SSN parameter store.

88
00:03:58,040 --> 00:04:00,600
In order to facilitate object‑like storage,

89
00:04:00,600 --> 00:04:02,740
these are created in the form of hierarchies.

90
00:04:02,740 --> 00:04:05,950
When you combine nodes in your head, you can see a picture of these objects.

91
00:04:05,950 --> 00:04:09,280
While I'm not the biggest fan of this feature in the AWS Systems Manager,

92
00:04:09,280 --> 00:04:12,640
as a large enterprise might amass 100,000 of these,

93
00:04:12,640 --> 00:04:16,440
they're still searchable and thankfully sorted in alphabetical order.

94
00:04:16,440 --> 00:04:17,650
Looking at the first one in the list,

95
00:04:17,650 --> 00:04:20,720
I created a Default‑env parameter in the event that an

96
00:04:20,720 --> 00:04:23,040
environment is not chosen during synthesis.

97
00:04:23,040 --> 00:04:26,340
I set the value to dev‑local so any non‑designated apps would

98
00:04:26,340 --> 00:04:30,140
default to the lowest common denominator.

99
00:04:30,140 --> 00:04:30,560
From there,

100
00:04:30,560 --> 00:04:35,440
I simulated our object we'd formally stored in code using a simple hierarchy.

101
00:04:35,440 --> 00:04:38,080
These are the account regions used for dev‑integration environments,

102
00:04:38,080 --> 00:04:41,540
as well as the default EC2 instance choices.

103
00:04:41,540 --> 00:04:46,040
So now let's look at using a combination of SSN in context in our code.

104
00:04:46,040 --> 00:04:50,250
First, I set the environment designation based on a passed‑in context value.

105
00:04:50,250 --> 00:04:52,690
If for any reason it's incorrect or null,

106
00:04:52,690 --> 00:04:55,170
I pull the default environment value out of the SSN

107
00:04:55,170 --> 00:04:56,780
parameter you saw a second ago.

108
00:04:56,780 --> 00:05:00,350
Naturally, in a real‑life scenario, you'd likely put more error checking in here,

109
00:05:00,350 --> 00:05:02,740
but I'm trying to keep things simple for you.

110
00:05:02,740 --> 00:05:06,210
At this point, we no longer need to store the multi‑environment property objects.

111
00:05:06,210 --> 00:05:08,660
We're able to dynamically build the SSN parameter from the

112
00:05:08,660 --> 00:05:12,340
environment and set the property values 100% dynamically.

113
00:05:12,340 --> 00:05:15,130
Note that these will be tokens at synthesis time and then get

114
00:05:15,130 --> 00:05:18,640
replaced at deployment time with real values.

115
00:05:18,640 --> 00:05:19,200
And lastly,

116
00:05:19,200 --> 00:05:22,180
we're able to use these values from context or SSN parameters as

117
00:05:22,180 --> 00:05:25,240
we build our construct and stack definitions.

118
00:05:25,240 --> 00:05:28,610
Think of how easy it is now to do something like store all your S3 buckets

119
00:05:28,610 --> 00:05:32,340
in one region and your Cognito user pool in another.

120
00:05:32,340 --> 00:05:32,910
At this point,

121
00:05:32,910 --> 00:05:36,550
we haven't even discussed CI/CD or the ability to create a full

122
00:05:36,550 --> 00:05:38,810
pipeline from dev all the way through to production.

123
00:05:38,810 --> 00:05:40,250
That's coming up in the next clip,

124
00:05:40,250 --> 00:05:48,000
so we'll wait to refactor our code a bit in the next module as we talk more about context and avoiding tight coupling in AWS.

