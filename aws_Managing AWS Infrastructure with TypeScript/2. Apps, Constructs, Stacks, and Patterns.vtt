WEBVTT
1
00:00:02.040 --> 00:00:03.980
Before we start in on refactoring,

2
00:00:03.980 --> 00:00:06.370
let's take a little time and revisit exactly what these

3
00:00:06.370 --> 00:00:10.140
concepts are and how they contribute to our cause.

4
00:00:10.140 --> 00:00:12.970
If you've been working with the CDK like we have in my company,

5
00:00:12.970 --> 00:00:16.210
you know the word construct gets a little over used kind of like the

6
00:00:16.210 --> 00:00:20.040
old days of the Smurfs cartoon. In its rawest form, Amazon finds it

7
00:00:20.040 --> 00:00:22.530
as the building blocks of apps. Yeah,

8
00:00:22.530 --> 00:00:26.340
you can certainly think of constructs and resources together for sure.

9
00:00:26.340 --> 00:00:28.990
Just keep in mind that a construct can consist of multiple

10
00:00:28.990 --> 00:00:31.190
resources. Kind of sounds like the Smurfs,

11
00:00:31.190 --> 00:00:32.540
doesn't it?

12
00:00:32.540 --> 00:00:36.410
As I said, constructs can and do represent a single AWS resource,

13
00:00:36.410 --> 00:00:41.090
regardless of the level, or constructs can represent multi‑resource,

14
00:00:41.090 --> 00:00:44.040
higher‑level component objects as well.

15
00:00:44.040 --> 00:00:46.470
So in understanding the spirit of the construct,

16
00:00:46.470 --> 00:00:48.570
you just have to reconcile the fact that it can be any

17
00:00:48.570 --> 00:00:51.740
number of Smurfs, or I mean constructs.

18
00:00:51.740 --> 00:00:53.280
Okay, all kidding aside,

19
00:00:53.280 --> 00:00:56.040
one of the most important reasons for building constructs in the first

20
00:00:56.040 --> 00:00:59.040
place is the overwhelming ability to reuse them.

21
00:00:59.040 --> 00:01:00.860
Constructs can be built to be reused,

22
00:01:00.860 --> 00:01:04.710
controlled, and distributed in almost infinite ways. We'll focus

23
00:01:04.710 --> 00:01:06.770
heavily on this concept later in the course,

24
00:01:06.770 --> 00:01:10.140
as it's a high priority for Ellen and the TechStream acquisition.

25
00:01:10.140 --> 00:01:11.070
And if you're asking,

26
00:01:11.070 --> 00:01:14.350
you can absolutely author your own constructs to suit your business or

27
00:01:14.350 --> 00:01:17.440
technical needs and distribute them as you see fit.

28
00:01:17.440 --> 00:01:18.580
If you can think of it,

29
00:01:18.580 --> 00:01:23.540
you can author it and make your custom constructs available for others to use.

30
00:01:23.540 --> 00:01:27.550
Take a moment to try and always ingrain in your head what a stack actually is.

31
00:01:27.550 --> 00:01:31.110
A stack isn't a magic beanstalk or a smurfy object.

32
00:01:31.110 --> 00:01:35.410
A stack is simply a neat way of defining a single stack in CloudFormation.

33
00:01:35.410 --> 00:01:37.610
CDK is built on CloudFormation,

34
00:01:37.610 --> 00:01:42.500
so I go back to it as a root discussion framework quite often. Said another way,

35
00:01:42.500 --> 00:01:44.230
if we compared it to a farm,

36
00:01:44.230 --> 00:01:47.080
it's the top level container that keeps the proverbial

37
00:01:47.080 --> 00:01:49.040
flock of constructs in the barn.

38
00:01:49.040 --> 00:01:52.200
All resources invariably have to be defined within the scope of a

39
00:01:52.200 --> 00:01:55.710
stack, as you can see from the picture on the left. And as we're

40
00:01:55.710 --> 00:01:57.700
fully bound to the rules of CloudFormation,

41
00:01:57.700 --> 00:02:00.040
we must follow the same constraints.

42
00:02:00.040 --> 00:02:03.900
Only 200 resources can exist in a single stack, and only

43
00:02:03.900 --> 00:02:06.540
200 stacks are allowed per region.

44
00:02:06.540 --> 00:02:08.120
Also similar to CloudFormation,

45
00:02:08.120 --> 00:02:10.260
we tend to employ the same types of distributed

46
00:02:10.260 --> 00:02:12.080
patterns for multi‑stack creation,

47
00:02:12.080 --> 00:02:15.900
both to avoid these limitations, as well as to keep our heads from exploding

48
00:02:15.900 --> 00:02:20.780
with 100,000‑line JSON or YAML files. Examples of these, if you remember from

49
00:02:20.780 --> 00:02:25.410
CloudFormation, are nested, distributed, main, skeleton, etc. You hear them

50
00:02:25.410 --> 00:02:28.800
called just about everything, but they tend to follow the same patterns and try

51
00:02:28.800 --> 00:02:31.440
to avoid the same constraints.

52
00:02:31.440 --> 00:02:35.580
Amazon defines apps or the app as the primary construct,

53
00:02:35.580 --> 00:02:38.540
which represents the CDK app.

54
00:02:38.540 --> 00:02:41.080
So to make the nomenclature more complicated,

55
00:02:41.080 --> 00:02:45.890
these projects we're building with the CDK are also called apps or applications.

56
00:02:45.890 --> 00:02:46.900
I know what you're saying.

57
00:02:46.900 --> 00:02:51.840
Apps and constructs seem to sound similar; however, they really aren't.

58
00:02:51.840 --> 00:02:55.940
The app by itself is actually a built‑in CDK construct.

59
00:02:55.940 --> 00:02:59.640
You instantiate an app object as you would any other object,

60
00:02:59.640 --> 00:03:02.940
and then you pass your app object to the stacks that you create.

61
00:03:02.940 --> 00:03:05.760
Well, the hierarchy here may sound a little overdone.

62
00:03:05.760 --> 00:03:08.710
Just always try to keep the fundamentals in your head of what each of

63
00:03:08.710 --> 00:03:13.140
these defined objects are and what they're for. Before we depart with a

64
00:03:13.140 --> 00:03:17.360
slide trap and get going on refactoring, the last topic to touch on is

65
00:03:17.360 --> 00:03:19.540
the concept of construct levels.

66
00:03:19.540 --> 00:03:19.850
Remember,

67
00:03:19.850 --> 00:03:23.190
AWS itself is always changing and new types of resources get

68
00:03:23.190 --> 00:03:25.640
added faster than you can keep up with them.

69
00:03:25.640 --> 00:03:28.130
That and other factors contribute to the development cycle,

70
00:03:28.130 --> 00:03:31.540
which creates multiple levels of constructs.

71
00:03:31.540 --> 00:03:32.450
For example,

72
00:03:32.450 --> 00:03:37.060
level 0 are low‑level CFN or CloudFormation constructs that are barely

73
00:03:37.060 --> 00:03:40.710
beyond using the SDK to build resources. As David explained,

74
00:03:40.710 --> 00:03:43.460
to use level 0 constructs, you generally have to define

75
00:03:43.460 --> 00:03:46.070
anything you would in building CloudFormation resources with

76
00:03:46.070 --> 00:03:48.340
little or no convenient defaults.

77
00:03:48.340 --> 00:03:51.830
Now you absolutely can build your entire application with level 0

78
00:03:51.830 --> 00:03:54.380
constructs, but that'd be a little like building assembly language

79
00:03:54.380 --> 00:03:57.140
instead of using a higher‑level programming language.

80
00:03:57.140 --> 00:04:00.340
So why would you use level 0 constructs then?

81
00:04:00.340 --> 00:04:01.480
Well, in many cases,

82
00:04:01.480 --> 00:04:05.130
Amazon simply hasn't built the next level construct yet. As an example

83
00:04:05.130 --> 00:04:08.060
of this in our demo app is the Cognito identity pool.

84
00:04:08.060 --> 00:04:10.930
At the time of this video, AWS doesn't yet include a

85
00:04:10.930 --> 00:04:13.230
level 1 construct for the identity pool.

86
00:04:13.230 --> 00:04:17.340
As such, our demo application includes a few level 0 constructs.

87
00:04:17.340 --> 00:04:21.230
In most cases, we choose to deal with level 1 constructs. These are the handy,

88
00:04:21.230 --> 00:04:21.710
dandy,

89
00:04:21.710 --> 00:04:26.540
super‑convenient resources that are called out loudly in the CDK documentation.

90
00:04:26.540 --> 00:04:30.030
In most cases, these are all you would use to build an application.

91
00:04:30.030 --> 00:04:32.040
They generally include some nice defaults,

92
00:04:32.040 --> 00:04:34.220
eliminating the need to set every option.

93
00:04:34.220 --> 00:04:36.830
Repasting this simple example from my intro module,

94
00:04:36.830 --> 00:04:40.670
I showed a view of a simple VPC and about 4or 5 lines of code,

95
00:04:40.670 --> 00:04:44.940
which generated over 500 lines of CloudFormation JSON. Now

96
00:04:44.940 --> 00:04:47.640
moving up a level, we have level 2 constructs.

97
00:04:47.640 --> 00:04:51.430
Level 2 is simply a collection of level 0 and level 1 constructs,

98
00:04:51.430 --> 00:04:53.570
so we really don't need to linger here. However,

99
00:04:53.570 --> 00:04:55.720
do keep in mind that you'll build a ton of level 2

100
00:04:55.720 --> 00:04:57.660
constructs in your CDK career.

101
00:04:57.660 --> 00:05:01.530
After all, the VPC needs objects such a subnets to exist,

102
00:05:01.530 --> 00:05:06.140
so it's very logical to think of a well‑architected VPC as a level 2 construct.

103
00:05:06.140 --> 00:05:07.300
Last but not least,

104
00:05:07.300 --> 00:05:10.500
Amazon and open‑source contributors have started building really

105
00:05:10.500 --> 00:05:13.170
nice reusable construct hierarchies for you.

106
00:05:13.170 --> 00:05:15.440
These level 3 objects are generally referred to as

107
00:05:15.440 --> 00:05:17.460
solution constructs or patterns,

108
00:05:17.460 --> 00:05:20.070
and they could make your coding tasks much easier.

109
00:05:20.070 --> 00:05:20.710
In short,

110
00:05:20.710 --> 00:05:23.610
the great folks at AWS have grouped together many logical

111
00:05:23.610 --> 00:05:26.330
objects and built a code for you simply to take advantage

112
00:05:26.330 --> 00:05:27.740
of the next level pattern.

113
00:05:27.740 --> 00:05:28.820
If you get a chance,

114
00:05:28.820 --> 00:05:31.440
peek at the list of available patterns out there these days

115
00:05:31.440 --> 00:05:36.440
in the AWS construct pattern library, as well as on cdkpatterns.com.

116
00:05:36.440 --> 00:05:40.180
A simple example is the Angular and React CDK pattern that includes the

117
00:05:40.180 --> 00:05:43.320
well‑architected framework, typical resources you would need to build

118
00:05:43.320 --> 00:05:47.140
Angular or React applications with AWS.

119
00:05:47.140 --> 00:05:50.230
So I see Spot's jumping in and telling us it's time to get moving on some

120
00:05:50.230 --> 00:05:57.000
live coding. Let's jump forward to the next module and start breaking our monolith down into some logical patterns.

