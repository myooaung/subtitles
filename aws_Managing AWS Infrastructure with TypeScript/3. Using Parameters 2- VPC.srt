1
00:00:02,040 --> 00:00:03,190
Now, I know what you're thinking.

2
00:00:03,190 --> 00:00:07,240
Why are we talking about VPCs when there are none in our application?

3
00:00:07,240 --> 00:00:08,960
Well, even though that's the case,

4
00:00:08,960 --> 00:00:11,580
you'll very likely build a CDK application in the

5
00:00:11,580 --> 00:00:13,840
future that does require a VPC.

6
00:00:13,840 --> 00:00:17,290
To that end, I'm going to show another popular method for decoupling systems,

7
00:00:17,290 --> 00:00:20,360
and that's to look up the VPC dynamically when creating

8
00:00:20,360 --> 00:00:23,570
dependent objects such a subnets and EC2 instances.

9
00:00:23,570 --> 00:00:28,940
We've already done this once, so let's take a look again in the context of a VPC.

10
00:00:28,940 --> 00:00:32,940
If we need to find a VPC by querying an AWS environment,

11
00:00:32,940 --> 00:00:35,260
we can use the popular fromLookup method.

12
00:00:35,260 --> 00:00:37,970
Remember the fromStringParameterAttributes method I showed you

13
00:00:37,970 --> 00:00:41,530
earlier creates tokens that are populated during synthesis and

14
00:00:41,530 --> 00:00:43,440
replaced at deployment time.

15
00:00:43,440 --> 00:00:46,640
From Lookup and valueFromLookup, which we just used,

16
00:00:46,640 --> 00:00:49,050
populate real values during synthesis.

17
00:00:49,050 --> 00:00:50,190
It makes sense, right?

18
00:00:50,190 --> 00:00:54,340
These functions are physically looking up the value when the function is called.

19
00:00:54,340 --> 00:00:57,400
If we have less information about the VPC we're looking for,

20
00:00:57,400 --> 00:00:59,870
we can use the fromVpcAttributes method,

21
00:00:59,870 --> 00:01:02,680
which is obviously more specific to a VPC.

22
00:01:02,680 --> 00:01:05,990
The last parameter of this method takes a VpcAttributes object,

23
00:01:05,990 --> 00:01:08,140
which we can query by several properties.

24
00:01:08,140 --> 00:01:10,840
Let's see these in action.

25
00:01:10,840 --> 00:01:13,460
Called context methods, they're quite simple to use,

26
00:01:13,460 --> 00:01:15,240
but often highly overlooked.

27
00:01:15,240 --> 00:01:18,820
It's just not that complicated to look up a VPC in an account,

28
00:01:18,820 --> 00:01:20,870
and in most cases and in many scenarios,

29
00:01:20,870 --> 00:01:23,540
the VPC and subnets are already going to exist,

30
00:01:23,540 --> 00:01:25,840
especially in an environment like production.

31
00:01:25,840 --> 00:01:30,450
We first check to see if the VPC is cached in the context store like this,

32
00:01:30,450 --> 00:01:32,240
as you saw in the last module.

33
00:01:32,240 --> 00:01:35,680
Then we can use one of the two methods in an attempt to look up the VPC,

34
00:01:35,680 --> 00:01:38,440
in this case, with fromLookup like this.

35
00:01:38,440 --> 00:01:42,640
The other method from VPC attributes is a bit more versatile and can allow

36
00:01:42,640 --> 00:01:46,240
us to look up VPCs with a wider range of attributes.

37
00:01:46,240 --> 00:01:51,330
Alternatively, we can use both in a turnery and look up a.VPC if the ID exists.

38
00:01:51,330 --> 00:01:54,090
Otherwise, use the default VPC in the target account.

39
00:01:54,090 --> 00:02:02,000
We could even take that turnery one step further and physically create a new VPC if both conditions fail.

