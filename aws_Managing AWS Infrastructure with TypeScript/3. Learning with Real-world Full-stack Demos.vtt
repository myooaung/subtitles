WEBVTT
1
00:00:01.940 --> 00:00:06.080
As I mentioned in the intro, I too am a Pluralsight student just like you.

2
00:00:06.080 --> 00:00:07.590
And most probably like you,

3
00:00:07.590 --> 00:00:10.630
some of my favorite courses include demo applications that I can

4
00:00:10.630 --> 00:00:12.740
use to further my learning and development.

5
00:00:12.740 --> 00:00:15.840
Good old Hello Worlds are nice for passing job interviews,

6
00:00:15.840 --> 00:00:18.340
but I do get frustrated at how little I'm able to

7
00:00:18.340 --> 00:00:23.140
truly take away and continue learning.

8
00:00:23.140 --> 00:00:24.200
So as a result,

9
00:00:24.200 --> 00:00:26.750
I've turned to the good folks at AWS labs for the most

10
00:00:26.750 --> 00:00:29.080
complete demo application I could find.

11
00:00:29.080 --> 00:00:30.660
If you haven't seen it,

12
00:00:30.660 --> 00:00:33.520
this is the well‑known AWS Full‑Stack Template

13
00:00:33.520 --> 00:00:36.860
application that when you're trying to learn AWS concepts

14
00:00:36.860 --> 00:00:38.810
includes a little bit of everything,

15
00:00:38.810 --> 00:00:41.700
including the CDK constructs necessary to build a code

16
00:00:41.700 --> 00:00:43.650
pipeline instance to deploy it all.

17
00:00:43.650 --> 00:00:45.580
The only downside is that this application,

18
00:00:45.580 --> 00:00:48.840
which includes a whole mountain of CloudFormation JSON,

19
00:00:48.840 --> 00:00:51.340
doesn't include any CDK distributions.

20
00:00:51.340 --> 00:00:54.330
Fear not, thanks to Jon Comstock, a colleague of mine,

21
00:00:54.330 --> 00:00:56.320
and a few long weeks of hard work,

22
00:00:56.320 --> 00:01:00.840
we forked the repository and completely reverse engineered it into CDK.

23
00:01:00.840 --> 00:01:02.430
By the time you take this course,

24
00:01:02.430 --> 00:01:06.040
I'll have pull requested it back into the main AWS repository.

25
00:01:06.040 --> 00:01:08.900
If for any reason my pull request isn't approved,

26
00:01:08.900 --> 00:01:10.230
fingers crossed,

27
00:01:10.230 --> 00:01:12.180
you'll always be able to get it from the course materials

28
00:01:12.180 --> 00:01:14.940
repository that I'll go over in just a moment.

29
00:01:14.940 --> 00:01:17.890
First and foremost, this template is completely serverless.

30
00:01:17.890 --> 00:01:21.200
I'm sure you've likely had enough of Hello World VPC demos,

31
00:01:21.200 --> 00:01:25.340
so we're going to keep things modern and server free for this course.

32
00:01:25.340 --> 00:01:28.850
The API layer includes a set of Lambda functions intended to

33
00:01:28.850 --> 00:01:31.160
provide CRUD operations for the system.

34
00:01:31.160 --> 00:01:32.400
As you'd expect,

35
00:01:32.400 --> 00:01:35.100
these Lambdas are accessed through an API gateway talking

36
00:01:35.100 --> 00:01:37.540
to a Dynamo database in the back end.

37
00:01:37.540 --> 00:01:38.540
On the front end,

38
00:01:38.540 --> 00:01:42.020
we have a React application that uses the Amplify client library

39
00:01:42.020 --> 00:01:45.340
using Cognito as an identity management service.

40
00:01:45.340 --> 00:01:46.870
If you haven't used Cognito yet,

41
00:01:46.870 --> 00:01:49.140
this will help you get accustomed to it as an auth provider,

42
00:01:49.140 --> 00:01:51.540
all done through the CDK.

43
00:01:51.540 --> 00:01:52.180
All in all,

44
00:01:52.180 --> 00:01:54.680
this template includes a lot of opportunities to learn and

45
00:01:54.680 --> 00:01:56.840
continue your learning long after this course.

46
00:01:56.840 --> 00:01:59.190
You may very well come back to this when you write

47
00:01:59.190 --> 00:02:01.230
CDK applications in the future.

48
00:02:01.230 --> 00:02:02.100
For this course,

49
00:02:02.100 --> 00:02:05.070
we'll pretend that this particular monolith is the slice of tech

50
00:02:05.070 --> 00:02:07.630
stream that Josh and Ellen are focusing on.

51
00:02:07.630 --> 00:02:09.910
Let me show you why I love teaching with this template.

52
00:02:09.910 --> 00:02:15.140
Okay, sound guy, cue the 2001 Space Odyssey theme music.

53
00:02:15.140 --> 00:02:18.010
So if you click the link that I had shown in the previous slide,

54
00:02:18.010 --> 00:02:22.340
you end up on the AWS lab repository for the Full‑Stack Template.

55
00:02:22.340 --> 00:02:24.410
And at first glance, if you take a look through here,

56
00:02:24.410 --> 00:02:27.840
there's actually a lot of content in here.

57
00:02:27.840 --> 00:02:32.140
If I skip past the folder structure for now,

58
00:02:32.140 --> 00:02:34.880
you can see that there is an unbelievable set of

59
00:02:34.880 --> 00:02:38.860
detail outlining the template itself, all the associated resources,

60
00:02:38.860 --> 00:02:43.140
and everything you need to get going with this application.

61
00:02:43.140 --> 00:02:45.610
There are also fairly detailed instructions on how to simply

62
00:02:45.610 --> 00:02:47.640
just launch this through CloudFormation.

63
00:02:47.640 --> 00:02:49.870
Obviously, we're concerned with CDK here,

64
00:02:49.870 --> 00:02:53.440
so we're not going to launch this through CloudFormation for now.

65
00:02:53.440 --> 00:02:54.620
And if I go a little bit further down,

66
00:02:54.620 --> 00:02:58.240
you can see that this application does include the resources we talked about.

67
00:02:58.240 --> 00:03:01.070
There's a Cognito identity management provider sitting on the front

68
00:03:01.070 --> 00:03:03.590
end in which CloudFront is sitting behind it,

69
00:03:03.590 --> 00:03:04.740
obviously, through authentication.

70
00:03:04.740 --> 00:03:08.920
We have a static React website that's living in Amazon S3 buckets.

71
00:03:08.920 --> 00:03:10.940
And then for the mid‑tier layer, obviously,

72
00:03:10.940 --> 00:03:14.350
we have our serverless Lambda's communicating directly in the back end with our

73
00:03:14.350 --> 00:03:17.940
Dynamo database with an API gateway sitting in front of it.

74
00:03:17.940 --> 00:03:18.400
Obviously,

75
00:03:18.400 --> 00:03:22.620
you can get a great view on the resource diagram as well to give you a great

76
00:03:22.620 --> 00:03:25.380
understanding what this template has in it and how it works.

77
00:03:25.380 --> 00:03:28.140
And if I scroll all the way back up to the top,

78
00:03:28.140 --> 00:03:30.940
you can see that there's a workshop folder.

79
00:03:30.940 --> 00:03:33.330
Not only can you learn this from a CloudFormation in just

80
00:03:33.330 --> 00:03:35.440
a fundamental development perspective,

81
00:03:35.440 --> 00:03:38.840
but there's actually a set of workshop snippets to go along with it as well,

82
00:03:38.840 --> 00:03:41.750
so you can get a great understanding for how the template works as

83
00:03:41.750 --> 00:03:44.160
you're learning the CDK in the same process.

84
00:03:44.160 --> 00:03:47.940
So let me flip over and look at an instantiation of the application itself,

85
00:03:47.940 --> 00:03:51.820
and you can see that yes, it is a little bit of a cliche goals application,

86
00:03:51.820 --> 00:03:54.720
but it's a perfect application to learn CRUD operations with the

87
00:03:54.720 --> 00:03:56.880
Full‑Stack Template that we have laid out in front of us.

88
00:03:56.880 --> 00:04:00.240
I can go ahead and hit the Sign up link,

89
00:04:00.240 --> 00:04:01.600
and then it takes an email and a password.

90
00:04:01.600 --> 00:04:04.510
From there, Cognito handles everything at this point.

91
00:04:04.510 --> 00:04:06.930
You'll actually get an email requiring you to enter a

92
00:04:06.930 --> 00:04:08.880
code for multi‑factor authentication.

93
00:04:08.880 --> 00:04:15.240
Now I've already done this once, so let me go ahead and hit Login.

94
00:04:15.240 --> 00:04:17.550
And again, Cognito handled that authentication,

95
00:04:17.550 --> 00:04:20.710
but suffice it to say, from here it's relatively vanilla.

96
00:04:20.710 --> 00:04:26.740
You've got a table‑based view of goals that you can create and update,

97
00:04:26.740 --> 00:04:28.800
in which case I've created a couple of goals.

98
00:04:28.800 --> 00:04:33.340
Now, obviously from here, I can go update or delete goals,

99
00:04:33.340 --> 00:04:36.890
and we obviously understand that these are hitting the Lambdas through the API

100
00:04:36.890 --> 00:04:39.680
Gateway and storing these in our back‑end Dynamo database.

101
00:04:39.680 --> 00:04:41.820
So this is a wonderful template to teach from.

102
00:04:41.820 --> 00:04:45.030
It's very easy to set up and very easy to get running for yourself.

103
00:04:45.030 --> 00:04:47.830
And combined with workshops and everything else,

104
00:04:47.830 --> 00:04:52.940
it makes learning the CDK and the advanced principles as easy as they can be.

105
00:04:52.940 --> 00:04:56.960
Here are the two locations for both the original AWS labs repository,

106
00:04:56.960 --> 00:04:59.220
as well as the permanently forked repository that'll

107
00:04:59.220 --> 00:05:01.380
always include the CDK distribution.

108
00:05:01.380 --> 00:05:03.920
As I said, the Blndspt repo will always be there,

109
00:05:03.920 --> 00:05:06.700
regardless of whether my pull request is approved or not.

110
00:05:06.700 --> 00:05:08.300
And if that wasn't cool enough,

111
00:05:08.300 --> 00:05:12.040
check out the evolution of this template that the AWS labs guys built

112
00:05:12.040 --> 00:05:15.810
by way of the monster Bookstore Full‑Stack Template.

113
00:05:15.810 --> 00:05:18.370
AWS labs guys have also pulled out all the stops and

114
00:05:18.370 --> 00:05:20.800
created the AWS Bookstore Demo App.

115
00:05:20.800 --> 00:05:23.520
Now these two templates are very similar, with this one adding in

116
00:05:23.520 --> 00:05:26.440
a lot of extra resources and functionality.

117
00:05:26.440 --> 00:05:28.580
So if I go ahead and skip the folder structure in the

118
00:05:28.580 --> 00:05:32.140
repository and I go down to the resource view,

119
00:05:32.140 --> 00:05:35.970
you can see that under the Backend section they've added in Elasticsearch

120
00:05:35.970 --> 00:05:39.030
Service, an ElastiCache for Redis service, and a Neptune service.

121
00:05:39.030 --> 00:05:40.450
And, as you'll see in the application,

122
00:05:40.450 --> 00:05:42.320
these are for searching and a few other neat pieces

123
00:05:42.320 --> 00:05:43.910
of functionality in this demo.

124
00:05:43.910 --> 00:05:47.540
So if I go ahead and go over to the instantiated demo,

125
00:05:47.540 --> 00:05:50.480
you'll see that it looks very similar to the goals application.

126
00:05:50.480 --> 00:05:54.840
However, when I go ahead and log into this one,

127
00:05:54.840 --> 00:05:57.730
you'll see right off the bat that there's a lot more included in here.

128
00:05:57.730 --> 00:05:59.590
And to take advantage of the extra resources,

129
00:05:59.590 --> 00:06:03.540
I can simply come to the Search box, and I can search for cupcakes,

130
00:06:03.540 --> 00:06:06.330
and you can see that the cache service itself is actually providing the

131
00:06:06.330 --> 00:06:09.840
information directly out of the stream from the Dynamo database.

132
00:06:09.840 --> 00:06:13.040
Besides that, if I go ahead and go back to the main page and scroll down,

133
00:06:13.040 --> 00:06:15.750
you can see that there is a friends bought section,

134
00:06:15.750 --> 00:06:19.740
which uses a little bit of the AWS Neptune resource,

135
00:06:19.740 --> 00:06:22.840
as well as some star ratings for each book.

136
00:06:22.840 --> 00:06:26.140
And this does include a commerce component as well.

137
00:06:26.140 --> 00:06:28.700
You can go ahead and add the book to the cart, and I can go

138
00:06:28.700 --> 00:06:30.640
through the checkout process as well.

139
00:06:30.640 --> 00:06:33.160
So this is one of my favorite demo templates because of all

140
00:06:33.160 --> 00:06:35.600
the things that are included in it. You can always come back

141
00:06:35.600 --> 00:06:37.040
to this one when you need it.

142
00:06:37.040 --> 00:06:39.490
And although I won't be directly teaching out of this demo,

143
00:06:39.490 --> 00:06:47.000
I will plan on reverse‑engineering the CloudFormation and pull requesting this back into the main repository as well.

