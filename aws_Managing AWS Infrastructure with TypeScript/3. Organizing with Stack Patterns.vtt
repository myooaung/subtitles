WEBVTT
1
00:00:02.040 --> 00:00:04.990
Finally we get to apply some logical organization

2
00:00:04.990 --> 00:00:06.740
to some chaotic code structures.

3
00:00:06.740 --> 00:00:10.040
Thanks for hanging in there with me through a bit of slide punishment.

4
00:00:10.040 --> 00:00:13.090
Hey, at least I'm told my voice sounds okay at 1.5 speed.

5
00:00:13.090 --> 00:00:16.530
All kidding aside, if you are listening to me at 1.5,

6
00:00:16.530 --> 00:00:18.520
this is where you might want to dial it back a little as we

7
00:00:18.520 --> 00:00:21.950
wade into our proverbial swamp by learning about and ultimately

8
00:00:21.950 --> 00:00:25.180
applying some stack patterns to our monolith. Stick with me for

9
00:00:25.180 --> 00:00:26.570
just a few more slides,

10
00:00:26.570 --> 00:00:30.340
and I promise the rest of the module will be all about demos.

11
00:00:30.340 --> 00:00:32.740
Okay, let's talk about slide patterns a bit.

12
00:00:32.740 --> 00:00:35.100
Notice that I've used the newer CloudFormation icon

13
00:00:35.100 --> 00:00:36.760
on the slide. In that regard,

14
00:00:36.760 --> 00:00:39.520
if you have at least a moderate background of CloudFormation,

15
00:00:39.520 --> 00:00:41.350
you've likely built or inherited some other

16
00:00:41.350 --> 00:00:45.040
developer's 100,000‑line JSON or YAML file,

17
00:00:45.040 --> 00:00:46.460
by which your boss said, hey,

18
00:00:46.460 --> 00:00:50.040
learn this so we can make changes to our infrastructure.

19
00:00:50.040 --> 00:00:51.260
Out of pure necessity,

20
00:00:51.260 --> 00:00:55.040
patterns began to emerge to circumvent these resource limitations.

21
00:00:55.040 --> 00:00:57.210
If you've watched any of the other CloudFormation videos on

22
00:00:57.210 --> 00:00:59.760
Pluralsight or you're just an old CloudFormation convert,

23
00:00:59.760 --> 00:01:02.140
you've likely seen these patterns.

24
00:01:02.140 --> 00:01:05.710
One popular technique was sometimes called the main or skeleton pattern,

25
00:01:05.710 --> 00:01:08.660
by which a single stack was created with little or no resources in

26
00:01:08.660 --> 00:01:11.840
it that simply defined other logical stacks.

27
00:01:11.840 --> 00:01:12.420
In this case,

28
00:01:12.420 --> 00:01:15.940
the stack definitions are stored in the other stack files. AWS

29
00:01:15.940 --> 00:01:18.490
treated these as nested stacks by which all stacks would

30
00:01:18.490 --> 00:01:21.240
deploy together in the same console.

31
00:01:21.240 --> 00:01:23.520
Other stack patterns, such as pure nesting,

32
00:01:23.520 --> 00:01:27.080
evolved to create logical hierarchies of stacks. In this often

33
00:01:27.080 --> 00:01:30.460
hard‑to‑grasp concept, nested stacks could dive multiple levels

34
00:01:30.460 --> 00:01:33.740
deep to create some hierarchy of resources.

35
00:01:33.740 --> 00:01:35.940
Still other designs came out that were more tailored to

36
00:01:35.940 --> 00:01:39.100
breaking up large sets of JSON by some logical layer,

37
00:01:39.100 --> 00:01:42.840
functional relationship or business‑driven need.

38
00:01:42.840 --> 00:01:44.910
So you may ask why there doesn't seem to be a lot of

39
00:01:44.910 --> 00:01:48.040
discussion around stack design best practices.

40
00:01:48.040 --> 00:01:48.670
In other words,

41
00:01:48.670 --> 00:01:51.280
why doesn't the well‑architected framework tell us how to build

42
00:01:51.280 --> 00:01:54.140
our stacks and simply prescribe it for us?

43
00:01:54.140 --> 00:01:55.500
Well, the reason for this is simple.

44
00:01:55.500 --> 00:01:59.440
Your stack design is generally based on your business needs.

45
00:01:59.440 --> 00:02:00.180
In that regard,

46
00:02:00.180 --> 00:02:04.210
Amazon can't and won't tell you how to model your business, so Amazon

47
00:02:04.210 --> 00:02:07.340
can't really tell you how to model your stacks.

48
00:02:07.340 --> 00:02:07.520
Well,

49
00:02:07.520 --> 00:02:11.130
let's take a few examples. First and foremost, one very

50
00:02:11.130 --> 00:02:13.760
popular stack pattern might model stacks and resources

51
00:02:13.760 --> 00:02:15.840
around a business‑driven design.

52
00:02:15.840 --> 00:02:19.270
I used the Globomantics logo here, TechStream notwithstanding.

53
00:02:19.270 --> 00:02:22.740
Perhaps Globomantics is heavily siloed, and one department,

54
00:02:22.740 --> 00:02:25.210
quite frankly, doesn't interact all that much with the other.

55
00:02:25.210 --> 00:02:26.660
Perhaps they have separate budgets,

56
00:02:26.660 --> 00:02:31.150
separate operations, and even separate development resources. If that were true,

57
00:02:31.150 --> 00:02:33.190
they may choose to build stacks completely around

58
00:02:33.190 --> 00:02:35.640
departments and groups as opposed to functions.

59
00:02:35.640 --> 00:02:37.780
You can imagine that in this case each department would

60
00:02:37.780 --> 00:02:39.740
heavily duplicate resource types,

61
00:02:39.740 --> 00:02:43.310
such as a web server or a database. In a heavily siloed

62
00:02:43.310 --> 00:02:45.940
environment, that isn't such a bad thing.

63
00:02:45.940 --> 00:02:48.540
You can certainly build governing conventions and rules, and then

64
00:02:48.540 --> 00:02:51.640
turn departments or groups loose to build away.

65
00:02:51.640 --> 00:02:53.050
Let's take the other side of the coin.

66
00:02:53.050 --> 00:02:57.020
A centralized organization that highly shares resources and tools

67
00:02:57.020 --> 00:02:59.130
may choose to build more of a functional design.

68
00:02:59.130 --> 00:03:02.820
A functional design builds stacks and resources around functions

69
00:03:02.820 --> 00:03:05.440
such as a web server or a database function.

70
00:03:05.440 --> 00:03:08.070
This would promote heavy reusability, however,

71
00:03:08.070 --> 00:03:11.200
as you can imagine, heavy sharing around logical functions in a

72
00:03:11.200 --> 00:03:14.240
large organization could come with its own problems.

73
00:03:14.240 --> 00:03:17.190
It is difficult to be flexible when both Legal and Marketing are

74
00:03:17.190 --> 00:03:20.300
somehow sharing the same set of resources. Legal may need to

75
00:03:20.300 --> 00:03:22.780
keep data in S3 buckets for 7 years,

76
00:03:22.780 --> 00:03:26.240
whereas the Development team may not need any retention at all.

77
00:03:26.240 --> 00:03:29.740
There are also many organizations that are extremely hierarchical.

78
00:03:29.740 --> 00:03:31.910
Deeper organizations can share at common levels and

79
00:03:31.910 --> 00:03:33.700
then inherit at parent levels.

80
00:03:33.700 --> 00:03:36.440
The CDK is by definition object oriented.

81
00:03:36.440 --> 00:03:38.770
So can you think of a situation where encapsulation and

82
00:03:38.770 --> 00:03:41.940
inheritance could be used across construct hierarchies?

83
00:03:41.940 --> 00:03:46.140
In many cases, there just may be no logical organization structure to a company.

84
00:03:46.140 --> 00:03:49.600
Think of a startup. Don't immediately think of this is a bad thing.

85
00:03:49.600 --> 00:03:52.850
An organization like this needs to be extremely flexible.

86
00:03:52.850 --> 00:03:53.410
To that end,

87
00:03:53.410 --> 00:03:56.860
they might choose to build only basic constructs to which you can add little

88
00:03:56.860 --> 00:04:00.060
or no stack design from a centralized construct library.

89
00:04:00.060 --> 00:04:03.430
We'll explore that idea later in the course. And finally,

90
00:04:03.430 --> 00:04:05.640
aren't there an infinite number of business processes

91
00:04:05.640 --> 00:04:07.840
and operational modalities out there?

92
00:04:07.840 --> 00:04:10.670
There are reasons to build monolith stacks after all. A single

93
00:04:10.670 --> 00:04:13.670
monolith stack organizes all resources into a single,

94
00:04:13.670 --> 00:04:15.870
easily controlled CloudFormation stack,

95
00:04:15.870 --> 00:04:18.540
which you can create and destroy in one command.

96
00:04:18.540 --> 00:04:21.190
Want to see a neat distributed monolith? Check out Dylan

97
00:04:21.190 --> 00:04:23.590
Burris's distributed monolith design here.

98
00:04:23.590 --> 00:04:26.380
It shows a super cool way to build a single stack that

99
00:04:26.380 --> 00:04:28.820
still uses well‑organized code principles.

100
00:04:28.820 --> 00:04:30.210
If you've been curious so far,

101
00:04:30.210 --> 00:04:33.450
this is precisely why you don't really find a page on the well‑architected

102
00:04:33.450 --> 00:04:37.440
framework that prescribes how to build a set of stacks.

103
00:04:37.440 --> 00:04:38.820
So what about TechStream?

104
00:04:38.820 --> 00:04:43.140
What type of design would make the most sense for Josh and Ellen to choose?

105
00:04:43.140 --> 00:04:45.890
Well, first and foremost, TechStream was an acquisition.

106
00:04:45.890 --> 00:04:48.060
They haven't really been integrated into the longstanding

107
00:04:48.060 --> 00:04:51.540
Globomantics technology process and culture.

108
00:04:51.540 --> 00:04:53.190
And if you remember from the first module,

109
00:04:53.190 --> 00:04:56.050
the CEO has alerted Josh and Ellen that more similar

110
00:04:56.050 --> 00:04:58.340
acquisitions will be coming shortly.

111
00:04:58.340 --> 00:05:00.590
It would seem that Globomantics seems to bolster its

112
00:05:00.590 --> 00:05:03.440
development teams through acquisition.

113
00:05:03.440 --> 00:05:05.640
What might those priorities look like?

114
00:05:05.640 --> 00:05:08.910
As discussed, Ellen wants a very high degree of reuse.

115
00:05:08.910 --> 00:05:12.720
She wants newly acquired resources to be able to use objects that promote quick,

116
00:05:12.720 --> 00:05:15.190
reusable efficiency, and in the process,

117
00:05:15.190 --> 00:05:18.070
she wants to take advantage of the skillsets of the developers without

118
00:05:18.070 --> 00:05:21.740
compromising their need to overly understand the infrastructure.

119
00:05:21.740 --> 00:05:23.960
If you were leaning towards a functional stack design,

120
00:05:23.960 --> 00:05:26.960
you'd be right. With this design, even if Globomantics

121
00:05:26.960 --> 00:05:28.940
were a heavily siloed organization,

122
00:05:28.940 --> 00:05:30.950
it could remain that way while taking advantage of the

123
00:05:30.950 --> 00:05:33.140
nimble nature of the new acquisitions.

124
00:05:33.140 --> 00:05:36.110
New development teams can focus on what they're good at, development,

125
00:05:36.110 --> 00:05:39.940
while sharing well‑designed constructs with the rest of the organization.

126
00:05:39.940 --> 00:05:40.510
To do this,

127
00:05:40.510 --> 00:05:42.330
they'll be able to heavily leverage the construct

128
00:05:42.330 --> 00:05:46.340
library we'll build later in the course.

129
00:05:46.340 --> 00:05:48.600
How did Josh and Ellen at Globomantics, in general,

130
00:05:48.600 --> 00:05:50.320
benefit from this type of design?

131
00:05:50.320 --> 00:05:52.440
Can you think of some immediate impacts?

132
00:05:52.440 --> 00:05:53.970
Well, first and foremost,

133
00:05:53.970 --> 00:05:56.620
distributing stacks around functions can impart a great

134
00:05:56.620 --> 00:05:59.140
sense of control for the organization.

135
00:05:59.140 --> 00:06:01.200
And although our demo app is serverless,

136
00:06:01.200 --> 00:06:05.080
think of some type of IT infrastructure or security team managing all

137
00:06:05.080 --> 00:06:08.440
these assets associated with securing networks and access.

138
00:06:08.440 --> 00:06:11.440
That team could manage all aspects of security for cloud‑deployed

139
00:06:11.440 --> 00:06:14.990
resources by owning these resource types. The appropriate security

140
00:06:14.990 --> 00:06:17.310
groups could control any changes or additions needed to the

141
00:06:17.310 --> 00:06:19.840
security layer in the ecosystem.

142
00:06:19.840 --> 00:06:20.550
Beyond that,

143
00:06:20.550 --> 00:06:24.390
the benefits of reuse are almost limitless in this case. Reuse also

144
00:06:24.390 --> 00:06:27.350
bolsters governance, as approved best practice resources and

145
00:06:27.350 --> 00:06:29.850
constructs can be built and used by all groups,

146
00:06:29.850 --> 00:06:33.340
imparting very high consistency and expected execution.

147
00:06:33.340 --> 00:06:36.930
Reusing anything pre‑created obviously impacts the ability to be

148
00:06:36.930 --> 00:06:40.240
more efficient, and onboarding new groups can take significantly

149
00:06:40.240 --> 00:06:43.040
less time, as they're simply falling into a pre‑designed set of

150
00:06:43.040 --> 00:06:45.790
rules and resource development. All those things allow for a

151
00:06:45.790 --> 00:06:49.040
greater degree of expansion, planning, and forecasting.

152
00:06:49.040 --> 00:06:52.720
These air just a few benefits high on Ellen's priority list. With that in mind,

153
00:06:52.720 --> 00:07:00.000
let's get busy designing functional stacks for our demo application to satisfy Ellen's plans.

