WEBVTT
1
00:00:02.040 --> 00:00:03.940
Greetings everyone, and welcome again.

2
00:00:03.940 --> 00:00:05.900
If you haven't taken any of my courses,

3
00:00:05.900 --> 00:00:09.880
my name is Scott Tate and I'm a 10‑year cloud architect at blndspt.com.

4
00:00:09.880 --> 00:00:13.230
As both a student and a teacher of all things cloud,

5
00:00:13.230 --> 00:00:16.140
I'm thrilled to be with you on this journey today.

6
00:00:16.140 --> 00:00:18.910
This course is the third course in the Managing AWS

7
00:00:18.910 --> 00:00:21.030
Infrastructure with TypeScript learning path,

8
00:00:21.030 --> 00:00:23.180
so we're going to go over as many advanced topics as

9
00:00:23.180 --> 00:00:25.540
I can cram into a quick 2 hours.

10
00:00:25.540 --> 00:00:28.290
Whether you're an AWS developer, DevOps engineer,

11
00:00:28.290 --> 00:00:31.980
infrastructure engineer or just a burgeoning AWS enthusiast,

12
00:00:31.980 --> 00:00:35.320
this course will help bring your CDK mastery all together to

13
00:00:35.320 --> 00:00:38.170
ensure that you and your organization wield the power of the

14
00:00:38.170 --> 00:00:40.440
CDK as efficiently as possible.

15
00:00:40.440 --> 00:00:41.170
Stick with me,

16
00:00:41.170 --> 00:00:43.490
and I'll guide you through all tools and techniques

17
00:00:43.490 --> 00:00:49.240
necessary to become a master of the AWS CDK.

18
00:00:49.240 --> 00:00:51.540
So, why exactly are we here?

19
00:00:51.540 --> 00:00:54.260
With the CDK including such a short barrier to entry,

20
00:00:54.260 --> 00:00:57.640
why would we need courses like this in the first place?

21
00:00:57.640 --> 00:01:00.330
Well, first and foremost is you're here today.

22
00:01:00.330 --> 00:01:03.060
I think we can agree that the AWS CDK is one of the

23
00:01:03.060 --> 00:01:06.520
greatest new infrastructure as code, or IaC,

24
00:01:06.520 --> 00:01:09.740
weapons in AWS's development arsenal.

25
00:01:09.740 --> 00:01:10.950
And in that regard,

26
00:01:10.950 --> 00:01:14.430
there just aren't that many resources out there that discuss advanced

27
00:01:14.430 --> 00:01:18.140
techniques involving responsible development patterns.

28
00:01:18.140 --> 00:01:19.470
To add to that fact,

29
00:01:19.470 --> 00:01:22.530
there are an infinite number of Hello World examples out there,

30
00:01:22.530 --> 00:01:25.130
but have you really run across a plethora of resources that

31
00:01:25.130 --> 00:01:26.690
have shown you how to put it all together?

32
00:01:26.690 --> 00:01:28.090
I know I haven't.

33
00:01:28.090 --> 00:01:32.640
That's exactly what we're going to focus on in this course.

34
00:01:32.640 --> 00:01:34.590
Once we get through some introductory principles and

35
00:01:34.590 --> 00:01:35.940
lay a foundation for the course,

36
00:01:35.940 --> 00:01:37.980
we're going to dive right into some very challenging

37
00:01:37.980 --> 00:01:40.740
concepts in stacks and stacks patterns.

38
00:01:40.740 --> 00:01:42.780
If you have any experience with CloudFormation,

39
00:01:42.780 --> 00:01:46.640
you know how complex the stack hierarchy can get with nesting and layering.

40
00:01:46.640 --> 00:01:49.120
I'm also going to go into the mystical concept of stack

41
00:01:49.120 --> 00:01:52.270
versus construct versus pattern and lay out how it might

42
00:01:52.270 --> 00:01:54.640
best fit in your organization.

43
00:01:54.640 --> 00:01:57.970
We'll then dive into the area of multi‑environment applications and talk about

44
00:01:57.970 --> 00:02:01.830
customizing your stack to deploy to multiple environments and regions using

45
00:02:01.830 --> 00:02:04.840
customized environment characteristics and interfaces.

46
00:02:04.840 --> 00:02:06.890
I'll even show you how to use code pipeline to handle

47
00:02:06.890 --> 00:02:09.540
multi‑environment deployment characteristics.

48
00:02:09.540 --> 00:02:10.340
After that,

49
00:02:10.340 --> 00:02:13.600
we dive into some well‑architected framework principles to help you avoid

50
00:02:13.600 --> 00:02:16.840
the pitfalls of tight coupling in CDK applications.

51
00:02:16.840 --> 00:02:20.360
Making the mistake of building an overly constraining CDK application can

52
00:02:20.360 --> 00:02:22.940
lead you down paths that can be hard to come back from.

53
00:02:22.940 --> 00:02:23.690
In that regard,

54
00:02:23.690 --> 00:02:26.420
we'll then dive into the exciting concept of building custom

55
00:02:26.420 --> 00:02:29.450
constructs and storing them in your own construct libraries

56
00:02:29.450 --> 00:02:31.640
poised for immediate reuse.

57
00:02:31.640 --> 00:02:34.430
Then using aspects and a few other fun techniques,

58
00:02:34.430 --> 00:02:38.580
we'll talk a bit about enforcing security best practices in CDK applications.

59
00:02:38.580 --> 00:02:41.940
And finally, as a coup de grâce of sorts,

60
00:02:41.940 --> 00:02:43.920
I'm going to bring it all together by showing you what might

61
00:02:43.920 --> 00:02:48.510
truly be the Shangri‑La of CDK usage through a UI‑driven CDK

62
00:02:48.510 --> 00:02:50.560
environment management application.

63
00:02:50.560 --> 00:02:54.180
There's a lot to cover in a short period of time, so let's get going.

64
00:02:54.180 --> 00:02:56.060
Now I know what you're thinking.

65
00:02:56.060 --> 00:02:56.790
Geez,

66
00:02:56.790 --> 00:02:58.870
I read the first two books in this Audible series and

67
00:02:58.870 --> 00:03:00.850
the author changed the narrator on me.

68
00:03:00.850 --> 00:03:02.940
Everything's going to be all different now.

69
00:03:02.940 --> 00:03:04.950
Well, that couldn't be farther from the truth.

70
00:03:04.950 --> 00:03:07.020
I'm actually good friends with David Tucker.

71
00:03:07.020 --> 00:03:09.640
He's one of my favorite authors in the catalog.

72
00:03:09.640 --> 00:03:11.800
David and I are collaborating on this learning path,

73
00:03:11.800 --> 00:03:15.640
and I think you'll find that we complement each other nicely.

74
00:03:15.640 --> 00:03:18.020
And while I certainly don't like talking about myself,

75
00:03:18.020 --> 00:03:20.450
and I despise putting headshots on a slide,

76
00:03:20.450 --> 00:03:23.120
hence the larger picture of my company avatar,

77
00:03:23.120 --> 00:03:24.550
Spot, above my own picture,

78
00:03:24.550 --> 00:03:27.940
it's worth telling you a bit about myself for the sake of this course.

79
00:03:27.940 --> 00:03:31.840
I run blndspt.com where I'm a cloud architect, among other things.

80
00:03:31.840 --> 00:03:35.010
And while Spot won't be making as many appearances in the course,

81
00:03:35.010 --> 00:03:37.850
I'll do my best to represent his enthusiasm and commitment to

82
00:03:37.850 --> 00:03:41.340
ensuring that learning be a fun activity.

83
00:03:41.340 --> 00:03:42.080
There we go.

84
00:03:42.080 --> 00:03:44.050
Spot's rocking is AWS T‑shirt.

85
00:03:44.050 --> 00:03:44.910
That's better.

86
00:03:44.910 --> 00:03:47.980
In all seriousness, without dating myself too badly,

87
00:03:47.980 --> 00:03:51.770
I've been heavily involved in AWS and Azure now for as long as I can remember.

88
00:03:51.770 --> 00:03:54.440
Can you say Visual InterDev?

89
00:03:54.440 --> 00:03:57.340
Besides that, my background was a combination of software development,

90
00:03:57.340 --> 00:03:59.440
DevOps, and infrastructure.

91
00:03:59.440 --> 00:04:02.900
You'll be interested to know that I'm also a heavy Pluralsight student as well.

92
00:04:02.900 --> 00:04:06.940
I've likely taken over 100 courses myself in the last 10 or 12 years.

93
00:04:06.940 --> 00:04:12.540
Doesn't that sound right up the proverbial alley for infrastructure as code?

94
00:04:12.540 --> 00:04:13.590
Before we get started,

95
00:04:13.590 --> 00:04:15.850
it's definitely worth stating again that this course is

96
00:04:15.850 --> 00:04:17.830
intended for a more advanced audience.

97
00:04:17.830 --> 00:04:21.940
To that end, some reasonable knowledge will be necessary to follow along.

98
00:04:21.940 --> 00:04:25.950
This will include at least an intermediate proficiency with AWS in general,

99
00:04:25.950 --> 00:04:30.130
including EC2, Lambda, VPC concepts, and a lot more.

100
00:04:30.130 --> 00:04:33.470
As we'll be using TypeScript for the CDK development in the course,

101
00:04:33.470 --> 00:04:35.640
a solid proficiency in building applications with

102
00:04:35.640 --> 00:04:37.940
TypeScript is highly recommended.

103
00:04:37.940 --> 00:04:41.580
And it goes a bit without saying, knowledge of the CDK is a requirement,

104
00:04:41.580 --> 00:04:44.740
and I'm not going to go over the very basic concepts here.

105
00:04:44.740 --> 00:04:48.040
Hopefully you've taken the other courses prior to diving into this one.

106
00:04:48.040 --> 00:04:50.400
Lastly, although sometimes it's a hard one,

107
00:04:50.400 --> 00:04:53.410
it's not always that easy to get along with CDK development

108
00:04:53.410 --> 00:04:55.530
without some knowledge of CloudFormation.

109
00:04:55.530 --> 00:04:58.980
After all, CDK synthesizes into CloudFormation JSON,

110
00:04:58.980 --> 00:05:03.840
so it's important to know what's going on in the back end as you build IaC.

111
00:05:03.840 --> 00:05:05.650
If you've found yourself here without at least

112
00:05:05.650 --> 00:05:07.910
intermediate skills in any of those areas,

113
00:05:07.910 --> 00:05:10.470
I recommend the plethora of new courses from some of my

114
00:05:10.470 --> 00:05:13.040
favorite authors here at Pluralsight.

115
00:05:13.040 --> 00:05:15.090
Let's face it, if you're new to CDK,

116
00:05:15.090 --> 00:05:17.560
the best place to backtrack is obviously going to be the first few

117
00:05:17.560 --> 00:05:19.930
courses in the learning path by David Tucker.

118
00:05:19.930 --> 00:05:23.400
As I said earlier, David and I are collaborating on these courses,

119
00:05:23.400 --> 00:05:25.830
so I promise going back and taking those will dial you in to

120
00:05:25.830 --> 00:05:28.310
be as ready as possible for this course.

121
00:05:28.310 --> 00:05:31.660
And again, if you just aren't that familiar with CloudFormation,

122
00:05:31.660 --> 00:05:34.500
I highly recommend taking some time to get introduced.

123
00:05:34.500 --> 00:05:37.010
There are a handful of courses in the catalog from some of my favorite

124
00:05:37.010 --> 00:05:40.240
authors you can find by simply searching for CloudFormation.

125
00:05:40.240 --> 00:05:40.750
In fact,

126
00:05:40.750 --> 00:05:43.200
I'm going to use some of the examples in Ben Piper's

127
00:05:43.200 --> 00:05:45.440
Architecting for Operational Excellence course,

128
00:05:45.440 --> 00:05:47.890
and I can tell you I've spent hours upon hours in Ryan

129
00:05:47.890 --> 00:05:50.540
Lewis's very entertaining courses.

130
00:05:50.540 --> 00:05:53.880
We've found that most developers in CDK have embraced TypeScript.

131
00:05:53.880 --> 00:05:56.600
All the examples and demos I'll use will be in TypeScript,

132
00:05:56.600 --> 00:05:58.310
so if you're still rusty,

133
00:05:58.310 --> 00:06:02.540
take a bit and go watch some of Brice Wilson's courses on the subject.

134
00:06:02.540 --> 00:06:03.860
And last, but not least,

135
00:06:03.860 --> 00:06:08.270
keep in mind that CDK is a code‑based generator of AWS resources.

136
00:06:08.270 --> 00:06:11.740
If you don't have a significantly wide experience with these,

137
00:06:11.740 --> 00:06:14.210
go back and look at David Tucker's Core Services and

138
00:06:14.210 --> 00:06:16.640
Fundamental Cloud Concepts courses.

139
00:06:16.640 --> 00:06:21.530
After all, AWS currently has something like 170 to 180 resources,

140
00:06:21.530 --> 00:06:25.040
so it's worth at least knowing what each can do for you.

141
00:06:25.040 --> 00:06:27.000
So, why are we here again?

142
00:06:27.000 --> 00:06:31.220
I mean, if the CDK is easy to learn, don't we have everything we need?

143
00:06:31.220 --> 00:06:33.440
Whoa, horsey.

144
00:06:33.440 --> 00:06:36.660
It's a well‑known fact that the popularity of the CDK is

145
00:06:36.660 --> 00:06:38.750
growing faster than the universe itself.

146
00:06:38.750 --> 00:06:41.740
Okay, that hasn't been proven yet, but it seems to be true.

147
00:06:41.740 --> 00:06:44.550
I mean, Amazon is putting so much effort into it,

148
00:06:44.550 --> 00:06:49.880
the contribution speed of the framework rivals the old adage of ludicrous speed.

149
00:06:49.880 --> 00:06:53.530
We have a joke in my office that the CDK version is a spinning clock,

150
00:06:53.530 --> 00:06:55.620
and that if you take too long of a lunch,

151
00:06:55.620 --> 00:06:59.640
your npm versions will be out of date when you get back from lunch.

152
00:06:59.640 --> 00:07:04.080
So yes, the CDK is popular, and yes, the CDK is powerful,

153
00:07:04.080 --> 00:07:06.150
but dangerously so actually.

154
00:07:06.150 --> 00:07:09.200
Remember that old re:Invent recording from Amazon where

155
00:07:09.200 --> 00:07:11.710
Martin Beeby showed you how easy it was to initialize a

156
00:07:11.710 --> 00:07:14.040
project and create a construct?

157
00:07:14.040 --> 00:07:15.670
I'm sure we've all seen that video.

158
00:07:15.670 --> 00:07:19.840
I love it because of his accent and his constant pronunciation of routers.

159
00:07:19.840 --> 00:07:20.590
So yes,

160
00:07:20.590 --> 00:07:24.340
a simple CDK init with a one‑line VPC instantiation

161
00:07:24.340 --> 00:07:29.020
synthesizes over 450 lines of CloudFormation JSON.

162
00:07:29.020 --> 00:07:32.190
Okay, in all fairness, that's nine physical lines; however,

163
00:07:32.190 --> 00:07:34.520
eight of the nine of them are automatically generated,

164
00:07:34.520 --> 00:07:36.540
and one of them is actually whitespace.

165
00:07:36.540 --> 00:07:39.540
What's the ratio of 8 to 450 again?

166
00:07:39.540 --> 00:07:43.380
It was Lord Acton in the 19th Century that said power corrupts,

167
00:07:43.380 --> 00:07:45.750
but absolute power corrupts absolutely.

168
00:07:45.750 --> 00:07:48.240
Before we pick up that big old hammer,

169
00:07:48.240 --> 00:07:51.000
shouldn't we know how to use it first appropriately? What

170
00:07:51.000 --> 00:07:53.840
might the repercussions be if we don't?

171
00:07:53.840 --> 00:07:57.240
You guessed it, stacks that can outweigh the sun.

172
00:07:57.240 --> 00:08:00.040
Monolith doesn't even begin to describe this. Runaway

173
00:08:00.040 --> 00:08:03.540
stacks inherently promote poor design,

174
00:08:03.540 --> 00:08:06.720
poor characteristics or ability to reuse assets,

175
00:08:06.720 --> 00:08:10.340
and inevitably they just cost more money.

176
00:08:10.340 --> 00:08:13.200
My favorite comment I get around ecosystems like this generally

177
00:08:13.200 --> 00:08:17.040
come from CFOs asking why the AWS bill is so high.

178
00:08:17.040 --> 00:08:19.900
They say, I thought you said being in the cloud was cheaper.

179
00:08:19.900 --> 00:08:23.640
Aren't we all guilty of this at some point in our lives?

180
00:08:23.640 --> 00:08:27.110
So tell me if this sounds familiar. You build a few S3 buckets

181
00:08:27.110 --> 00:08:30.360
and maybe a few simple EC2 instances or Lambda functions,

182
00:08:30.360 --> 00:08:32.740
everything is wonderful in the cloud, right?

183
00:08:32.740 --> 00:08:33.650
Wait.

184
00:08:33.650 --> 00:08:34.900
We need more environments.

185
00:08:34.900 --> 00:08:36.460
We need a test environment.

186
00:08:36.460 --> 00:08:39.850
I know, let's duplicate the one we have and rename it.

187
00:08:39.850 --> 00:08:40.830
Ah, that's better.

188
00:08:40.830 --> 00:08:42.640
Now we can test our code.

189
00:08:42.640 --> 00:08:43.640
Wait a second.

190
00:08:43.640 --> 00:08:47.230
We need a staging environment also. Let's duplicate it again.

191
00:08:47.230 --> 00:08:48.190
Wow, that was easy.

192
00:08:48.190 --> 00:08:50.240
This cloud thing is handy.

193
00:08:50.240 --> 00:08:51.010
Oh, wow.

194
00:08:51.010 --> 00:08:52.810
CloudFormation is my new best friend.

195
00:08:52.810 --> 00:08:56.070
We can represent our infrastructure declaratively? Let's build that

196
00:08:56.070 --> 00:08:59.040
new project's infrastructure in CloudFormation.

197
00:08:59.040 --> 00:09:01.270
Hey, boss, we're getting closer to being production ready.

198
00:09:01.270 --> 00:09:03.910
What are we planning on running this on in production? We need a

199
00:09:03.910 --> 00:09:06.240
production stack with complete fault tolerance.

200
00:09:06.240 --> 00:09:06.890
Wait,

201
00:09:06.890 --> 00:09:11.490
what about disaster recovery? In the future, we can get smarter

202
00:09:11.490 --> 00:09:13.400
with multi‑availability zone deployments.

203
00:09:13.400 --> 00:09:17.140
For now, let's stand up a warm standby in another region.

204
00:09:17.140 --> 00:09:17.580
Wow,

205
00:09:17.580 --> 00:09:21.600
our business is going global. Tools like CloudFront look awesome, but for now,

206
00:09:21.600 --> 00:09:24.570
let's stand up that stack in Europe, especially since it's so

207
00:09:24.570 --> 00:09:27.940
easy to deploy that stack with CloudFormation.

208
00:09:27.940 --> 00:09:30.510
Have you experienced this or know someone that has?

209
00:09:30.510 --> 00:09:31.930
By the time you get to this point,

210
00:09:31.930 --> 00:09:34.770
your AWS billing starts to smoke and your development

211
00:09:34.770 --> 00:09:37.240
efficiency slows to a complete crawl.

212
00:09:37.240 --> 00:09:38.070
To wrap up this clip,

213
00:09:38.070 --> 00:09:40.550
I'm going to impress upon you that there are techniques and patterns

214
00:09:40.550 --> 00:09:42.980
in the CDK that can help you avoid this peril.

215
00:09:42.980 --> 00:09:45.530
I'm actually working on a project with a client as we speak that's an

216
00:09:45.530 --> 00:09:49.320
environment management user interface. Instead of mass stacking

217
00:09:49.320 --> 00:09:52.560
resources like this, you choose from a store of constructs that simply

218
00:09:52.560 --> 00:09:54.440
build your environment intelligently.

219
00:09:54.440 --> 00:09:58.520
It then pulls all appropriate construct packages from an npm construct library,

220
00:09:58.520 --> 00:10:02.070
wires them together, and deploys them through a code pipeline instance,

221
00:10:02.070 --> 00:10:05.290
which is, by the way, also built into the CDK on the fly.

222
00:10:05.290 --> 00:10:12.000
The best part is you can come back and add to your environment through the interface when your needs change.

