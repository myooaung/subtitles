WEBVTT
1
00:00:02.040 --> 00:00:05.750
Let's go out and get our registry set up and ready to accept published packages.

2
00:00:05.750 --> 00:00:11.240
In this clip we'll get it set up and start publishing packages to it.

3
00:00:11.240 --> 00:00:13.940
As we discussed, we're going to be using npmjs.

4
00:00:13.940 --> 00:00:16.770
Let's go get it ready to receive packages and then see what it

5
00:00:16.770 --> 00:00:20.340
takes to get a simple package built and published.

6
00:00:20.340 --> 00:00:22.770
So you'll want to head over to npmjs.com,

7
00:00:22.770 --> 00:00:27.040
and you'll want to click the Sign Up link if you don't have an account.

8
00:00:27.040 --> 00:00:32.240
Since I already have an account I'm just going to go ahead and hit Login.

9
00:00:32.240 --> 00:00:34.610
You can see that I don't have any packages published

10
00:00:34.610 --> 00:00:36.510
right at the moment to this registry.

11
00:00:36.510 --> 00:00:38.150
That's what we're going to do in just a second.

12
00:00:38.150 --> 00:00:41.490
When you create a username, by default that becomes your scope.

13
00:00:41.490 --> 00:00:43.530
So, for example, my username is blndspt,

14
00:00:43.530 --> 00:00:47.640
and you'll see my packages are scoped with @blndspt.

15
00:00:47.640 --> 00:00:51.240
Let's head back to VS Code and start setting up our construct.

16
00:00:51.240 --> 00:00:55.540
Now at this point you may be tempted to just run a cdk init and get going.

17
00:00:55.540 --> 00:00:56.860
Well you can certainly do that.

18
00:00:56.860 --> 00:00:57.470
However,

19
00:00:57.470 --> 00:01:00.010
a standard cdk init creates a lot of objects that

20
00:01:00.010 --> 00:01:02.000
you don't need for a construct.

21
00:01:02.000 --> 00:01:06.540
Instead, if you run a cdk init with the lib option you get a paired‑down,

22
00:01:06.540 --> 00:01:09.090
simpler version of a project with everything you need

23
00:01:09.090 --> 00:01:11.440
to set up and build a construct.

24
00:01:11.440 --> 00:01:12.490
In my example,

25
00:01:12.490 --> 00:01:16.970
I went ahead and created an empty project and set everything up from scratch.

26
00:01:16.970 --> 00:01:21.740
And you'd be amazed at how simple this is to actually get set up.

27
00:01:21.740 --> 00:01:23.650
So if I go look at that construct file,

28
00:01:23.650 --> 00:01:27.340
you can see it's just a completely empty class.

29
00:01:27.340 --> 00:01:29.440
We're no longer extending a stack in this case,

30
00:01:29.440 --> 00:01:32.940
now we're extending a construct as part of our class.

31
00:01:32.940 --> 00:01:39.740
All we need in our index file is a simple import/export of the class itself.

32
00:01:39.740 --> 00:01:44.830
So if I simply run an npm install at this point we can see that it's

33
00:01:44.830 --> 00:01:47.540
not complaining anymore about that core library.

34
00:01:47.540 --> 00:01:50.460
And there's one more thing that we need to do in our package.json

35
00:01:50.460 --> 00:01:55.440
before we actually try to start publishing this,

36
00:01:55.440 --> 00:01:59.200
and that's these two lines right here, the main object and the types object.

37
00:01:59.200 --> 00:02:02.500
The main object is our entry point into the program and the types

38
00:02:02.500 --> 00:02:05.640
object defines our physical TypeScript types.

39
00:02:05.640 --> 00:02:09.180
So before I can actually publish I do need to compile the

40
00:02:09.180 --> 00:02:13.340
application so that the index.d.ts exists.

41
00:02:13.340 --> 00:02:16.770
And at this point, even though the construct doesn't actually do anything,

42
00:02:16.770 --> 00:02:20.140
I can go ahead and publish it to our construct library.

43
00:02:20.140 --> 00:02:22.300
So what do we need to do first to get started?

44
00:02:22.300 --> 00:02:25.530
Well, before we do anything else we want to scope this project.

45
00:02:25.530 --> 00:02:29.040
So let me go ahead and clear the screen.

46
00:02:29.040 --> 00:02:32.610
And I flip back over to the documentation for just a second and go to

47
00:02:32.610 --> 00:02:38.750
Packages and modules and come down to this section that says Creating

48
00:02:38.750 --> 00:02:43.240
and publishing scoped public packages.

49
00:02:43.240 --> 00:02:45.500
You can see down here closer to the bottom that what we're

50
00:02:45.500 --> 00:02:48.780
going to want to do is an npm init with a ‑scope option for

51
00:02:48.780 --> 00:02:53.740
either our organization or our username.

52
00:02:53.740 --> 00:02:55.790
And now you can see what it's going to do is change the

53
00:02:55.790 --> 00:02:58.440
package name to @blndspt with same name,

54
00:02:58.440 --> 00:03:01.850
cdk‑s3‑static‑website, which is exactly what I want,

55
00:03:01.850 --> 00:03:03.840
a scoped package.

56
00:03:03.840 --> 00:03:07.940
Now I'm going to go ahead and set this to 0.1.0.

57
00:03:07.940 --> 00:03:10.350
And if you are connected to a remote origin you can

58
00:03:10.350 --> 00:03:12.320
actually specify the Git repository.

59
00:03:12.320 --> 00:03:17.440
And this will show up on npmjs with your package when you publish it.

60
00:03:17.440 --> 00:03:19.070
Then I'm going to go ahead and accept the defaults.

61
00:03:19.070 --> 00:03:21.000
And you can see obviously what it did is it made a few

62
00:03:21.000 --> 00:03:23.940
minor changes to my package.json file.

63
00:03:23.940 --> 00:03:27.040
But now this is scoped and ready to be published.

64
00:03:27.040 --> 00:03:28.940
So what do we do from here?

65
00:03:28.940 --> 00:03:33.000
If you simply run an npm publish at this point it's going to fail because we

66
00:03:33.000 --> 00:03:37.340
haven't logged in yet. So I'm going to run an npm login.

67
00:03:37.340 --> 00:03:41.740
And once I get logged in now I can actually publish this package.

68
00:03:41.740 --> 00:03:43.790
So let's go ahead and publish this package at this

69
00:03:43.790 --> 00:03:46.840
point with a simple npm publish.

70
00:03:46.840 --> 00:03:48.950
And you'll see that the first thing that's going to happen is it's

71
00:03:48.950 --> 00:03:51.230
going to fail without the public flag on it.

72
00:03:51.230 --> 00:03:53.100
So let's go ahead and let it fail the first time.

73
00:03:53.100 --> 00:03:54.910
And you can see this is exactly what it did.

74
00:03:54.910 --> 00:03:59.840
It said you must sign up for private packages.

75
00:03:59.840 --> 00:04:03.590
So if I run an npm publish with a help option you can see in

76
00:04:03.590 --> 00:04:07.240
the list that there's a ‑‑access public.

77
00:04:07.240 --> 00:04:12.040
So let's go ahead and use that and publish the package.

78
00:04:12.040 --> 00:04:15.120
And after all that I ended up actually having to change my version back

79
00:04:15.120 --> 00:04:20.940
to 0.3.0 because I already had a 0.2.0 published.

80
00:04:20.940 --> 00:04:24.740
So if I go back to npmjs and log back in and refresh the page,

81
00:04:24.740 --> 00:04:28.640
what you're going to see is that generally it takes a few minutes to show up.

82
00:04:28.640 --> 00:04:30.990
Now you can see it's already showing for me at this point,

83
00:04:30.990 --> 00:04:34.600
but just keep in mind that sometimes it takes 2‑3 minutes to display here.

84
00:04:34.600 --> 00:04:40.540
So I can go ahead and click on it and see that is my wonderful package.

85
00:04:40.540 --> 00:04:43.840
So that's actually all there is to it to getting a package published.

86
00:04:43.840 --> 00:04:46.400
And again, this one doesn't actually do anything at this point.

87
00:04:46.400 --> 00:04:53.000
So let's jump forward and build out our package so that it's a little more useful to us.

