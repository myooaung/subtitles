WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.250 --> 00:00:06.525
To understand how to manipulate our images and also how to add effects,

00:00:06.525 --> 00:00:10.605
first we need to understand how pixels make up our images.

00:00:10.605 --> 00:00:13.200
To get the pixel data from our canvas,

00:00:13.200 --> 00:00:17.275
we have a method available called getImageData.

00:00:17.275 --> 00:00:21.410
Let's take a look at how we can use this inside of our script.

00:00:21.410 --> 00:00:27.510
Install this inside of a constant called ImageData.

00:00:27.920 --> 00:00:31.420
I'm going to set this equal to ctx,

00:00:31.420 --> 00:00:36.210
and then call the method which we just mentioned, which was getImageData.

00:00:36.340 --> 00:00:42.745
GetImageData is going to allow us to grab all the pixels which you stored on the canvas.

00:00:42.745 --> 00:00:47.915
Because we want to grab all of the pixel values from the full size of the canvas,

00:00:47.915 --> 00:00:52.835
the first two values we're going to add is the starting position of the top left,

00:00:52.835 --> 00:00:55.100
which is 0, 0.

00:00:55.100 --> 00:00:57.200
The next two values,

00:00:57.200 --> 00:00:59.884
we want to grab the full width of the canvas,

00:00:59.884 --> 00:01:02.195
and also the full height.

00:01:02.195 --> 00:01:10.720
We can do this with canvas.width and also selecting the canvas.height.

00:01:10.930 --> 00:01:14.120
This is going to grab all the image data from

00:01:14.120 --> 00:01:18.320
the top-left right across the page to the bottom-right.

00:01:18.320 --> 00:01:20.310
Just also as a side note,

00:01:20.310 --> 00:01:22.620
we can select a smaller part of

00:01:22.620 --> 00:01:27.355
the canvas if we only wanted the image data for a particular part.

00:01:27.355 --> 00:01:30.190
We want the full size of the canvas however,

00:01:30.190 --> 00:01:33.920
since the image is going to be the full size of the canvas.

00:01:33.920 --> 00:01:37.940
Let's do a console log and see what happens in the browser.

00:01:37.940 --> 00:01:44.895
Log our imageData, right-click and inspect.

00:01:44.895 --> 00:01:47.310
Look on the console tab.

00:01:47.310 --> 00:01:49.980
We now have this image data.

00:01:49.980 --> 00:01:53.620
Remember from early on we mentioned that the default width and

00:01:53.620 --> 00:01:57.520
height of the canvas is 150 by 300.

00:01:57.520 --> 00:02:00.850
We also have this data and if we click on the drop-down arrow,

00:02:00.850 --> 00:02:05.125
we see we have a 180,000 different values.

00:02:05.125 --> 00:02:09.205
All of our data is stored in an array like structure.

00:02:09.205 --> 00:02:14.220
Have 180,000 values, which makes up all of our canvas data.

00:02:14.220 --> 00:02:17.635
If we click on the drop-down to expand any of these sections,

00:02:17.635 --> 00:02:20.770
we see all of the values is set to zero.

00:02:20.770 --> 00:02:25.240
This is because we currently don't have anything stored on the canvas.

00:02:25.240 --> 00:02:28.865
Now, if we want to see this in more detail with an image,

00:02:28.865 --> 00:02:35.075
we can grab these two lines of code and place this inside of our own load function.

00:02:35.075 --> 00:02:40.575
This means that this section will only run once an image has been uploaded.

00:02:40.575 --> 00:02:45.440
Choose the file, select the image.

00:02:45.550 --> 00:02:49.130
Our image data is now once again returned.

00:02:49.130 --> 00:02:51.410
This time though we see a different height and

00:02:51.410 --> 00:02:57.060
a different width since we set the overall canvas size to be equal to our image.

00:02:57.080 --> 00:03:00.205
We also see now we have a larger canvas.

00:03:00.205 --> 00:03:03.725
We now have 4.3 million pieces of data.

00:03:03.725 --> 00:03:07.439
This next part is really important to understand.

00:03:07.439 --> 00:03:10.885
First of all, if we grab our height and our width,

00:03:10.885 --> 00:03:13.285
we can multiply these two values together,

00:03:13.285 --> 00:03:18.490
so 853, and then multiply this by 1280,

00:03:18.490 --> 00:03:22.465
which gives us a value of 1.09 million.

00:03:22.465 --> 00:03:25.810
This would maybe be the number of pixels or the number of pieces of

00:03:25.810 --> 00:03:30.575
data you would expect to be returned if you multiply the width and the height.

00:03:30.575 --> 00:03:34.805
However though, we have a value which is four times higher.

00:03:34.805 --> 00:03:42.925
If we multiply 1091840 by the value of four,

00:03:42.925 --> 00:03:45.670
we then see 4.3 million,

00:03:45.670 --> 00:03:47.885
just like in our data.

00:03:47.885 --> 00:03:51.050
This now leads on to the question of why do we get

00:03:51.050 --> 00:03:55.685
exactly four times the values back any number of pixels?

00:03:55.685 --> 00:04:01.460
Well, this is because each pixel on our canvas is made up of four channels.

00:04:01.460 --> 00:04:03.410
We have a red, green,

00:04:03.410 --> 00:04:06.595
and blue, and also a alpha value.

00:04:06.595 --> 00:04:10.715
The red, green, and blue values make up the color of each pixel.

00:04:10.715 --> 00:04:15.845
So the very first pixel in the top left would be our first piece of data.

00:04:15.845 --> 00:04:20.990
If we go into here our very first pixel

00:04:20.990 --> 00:04:25.015
in the top left is these first four values just here.

00:04:25.015 --> 00:04:28.730
This particular pixel is made up with a red value of 49,

00:04:28.730 --> 00:04:31.115
green value of 39,

00:04:31.115 --> 00:04:33.270
and a blue value of 92.

00:04:33.270 --> 00:04:37.060
The fourth value of 255 is the alpha value,

00:04:37.060 --> 00:04:39.000
and this is the opacity.

00:04:39.000 --> 00:04:40.650
If this was a value of zero,

00:04:40.650 --> 00:04:42.400
this will be fully transparent.

00:04:42.400 --> 00:04:44.875
But 255 is the highest value,

00:04:44.875 --> 00:04:48.885
meaning there is no transparency set on this particular pixel.

00:04:48.885 --> 00:04:52.385
The same, if we go to the next batch of four pixels,

00:04:52.385 --> 00:04:57.605
you see the red, green, and blue values and also the final alpha value.

00:04:57.605 --> 00:05:01.975
Our first pixel and our second pixel is the same colors.

00:05:01.975 --> 00:05:03.715
If we go to the third batch,

00:05:03.715 --> 00:05:04.990
so 8, 9, 10,

00:05:04.990 --> 00:05:08.965
11, we see that because this is blending to a different color,

00:05:08.965 --> 00:05:12.230
the red value has gone up from 49 to 50,

00:05:12.230 --> 00:05:15.735
the green value has switched from 39 to 40,

00:05:15.735 --> 00:05:18.715
and also the blue value has increased too.

00:05:18.715 --> 00:05:23.480
Just to recap, we have the image data which has been returned from the canvas.

00:05:23.480 --> 00:05:28.265
We have the height and the width of the canvas and if we multiply these two values,

00:05:28.265 --> 00:05:32.120
this gives us the total number of pixels on the canvas.

00:05:32.120 --> 00:05:35.495
Each single pixel has the four values of red,

00:05:35.495 --> 00:05:37.025
green, blue, and alpha.

00:05:37.025 --> 00:05:40.160
Which is why the pieces of data which we get returned back to

00:05:40.160 --> 00:05:43.715
us are exactly four times the amount of pixels.

00:05:43.715 --> 00:05:47.675
Now with this knowledge of how pixels are made up using the four channels,

00:05:47.675 --> 00:05:50.720
we will now use what we have learned in the next video,

00:05:50.720 --> 00:05:55.830
by looping through these pixels and changing them to be different values.
