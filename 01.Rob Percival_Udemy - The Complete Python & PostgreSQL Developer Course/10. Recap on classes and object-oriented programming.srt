1

00:00:00,570  -->  00:00:06,060
Klein welcome come back in this video we're looking at a recap of classes and we're going to be creating

2

00:00:06,060  -->  00:00:09,110
our User class and making sure that it works.

3

00:00:09,120  -->  00:00:15,210
This is going to be a good video for you to remember what classes are on how to create them and also

4

00:00:15,420  -->  00:00:20,910
have gone in and tried out the font size on the tablet and on my phone to verify that it is big enough

5

00:00:20,970  -->  00:00:22,550
and it seems fine.

6

00:00:22,770  -->  00:00:28,300
So let's go into our user Doppie Y and create our class.

7

00:00:28,410  -->  00:00:32,530
Now I think you will remember how to create a class in Python.

8

00:00:32,700  -->  00:00:34,240
But it was a few sections ago.

9

00:00:34,320  -->  00:00:37,920
So you might have forgotten and that's totally fine.

10

00:00:38,250  -->  00:00:41,600
The way to create a class is just to type class.

11

00:00:42,000  -->  00:00:43,950
And then the class name.

12

00:00:43,980  -->  00:00:46,110
So in my case it's going to be user.

13

00:00:46,380  -->  00:00:48,640
And finally a colon.

14

00:00:49,140  -->  00:00:55,380
If we don't want our class to do anything which in this case we do but if we didn't we can always write

15

00:00:55,590  -->  00:00:58,050
pass in Python.

16

00:00:58,050  -->  00:01:00,690
The past keyword just means do nothing.

17

00:01:00,700  -->  00:01:04,350
For now we're going to be deleting that in a moment.

18

00:01:05,000  -->  00:01:06,840
As you can tell I have made the font a wee That bigger.

19

00:01:06,840  -->  00:01:08,310
Just a couple of points more.

20

00:01:08,850  -->  00:01:18,690
OK the init method in the Klaas's allow us to define the properties that are stored in each object.

21

00:01:18,840  -->  00:01:21,320
So let's define the init method first.

22

00:01:21,570  -->  00:01:28,810
It's death to define a new method and then underscore underscore to seperate underscores remember in

23

00:01:28,930  -->  00:01:29,560
it.

24

00:01:29,730  -->  00:01:36,390
And then two more underscores there as you can see PI Genom also has a suggestion and the suggestion

25

00:01:36,390  -->  00:01:37,560
in this case is correct.

26

00:01:37,590  -->  00:01:42,450
So we're just going to press enter and then it fills the rest for me.

27

00:01:42,450  -->  00:01:48,020
We've also got the keywords self which just means the currently bound object.

28

00:01:48,030  -->  00:01:53,710
We can now look at exactly what that means again in just a couple of moments.

29

00:01:53,760  -->  00:01:58,440
Now we have to decide the properties that a user might have.

30

00:01:58,440  -->  00:02:04,520
So in my case I'm going to go for something simple and each user is going to have an email address a

31

00:02:04,530  -->  00:02:13,440
first name a last name and also a unique identifier an ID and I'm putting it at the end for a specific

32

00:02:13,440  -->  00:02:21,850
reason and I would see that maybe in a few videos time and then what we'll do is self dot email.

33

00:02:21,870  -->  00:02:29,730
This defines the object's property is equal to email and this email is the parameter that the init method

34

00:02:29,730  -->  00:02:34,600
received self first name is first name.

35

00:02:34,790  -->  00:02:39,610
Self-taught last name is last name and after Id is ID.

36

00:02:40,390  -->  00:02:46,380
So as we can see this may sound a bit confusing but what is happening is the parameter that we're passing

37

00:02:46,380  -->  00:02:47,330
the in its method.

38

00:02:47,340  -->  00:02:53,470
This email here is getting assigned to a property of the object called email.

39

00:02:53,580  -->  00:02:57,030
They have the same name but this email is the parameter.

40

00:02:57,030  -->  00:03:00,780
This email is the object property.

41

00:03:00,840  -->  00:03:02,210
OK so this is the Nids method.

42

00:03:02,220  -->  00:03:07,200
It allows us to define the properties of the object and give them some values.

43

00:03:07,470  -->  00:03:16,420
Let's go into our app P Y and create a class of type user so we can remember what that is.

44

00:03:16,560  -->  00:03:21,600
Do you guys remember how to create a class of type user what do we have to do before we can create the

45

00:03:21,600  -->  00:03:24,510
class.

46

00:03:25,500  -->  00:03:26,240
And the answer to that.

47

00:03:26,250  -->  00:03:30,100
I'm sure you got it is to import the user class.

48

00:03:30,120  -->  00:03:38,230
So let's do that from user which is the file user Doppie why import user with a capital U.

49

00:03:38,250  -->  00:03:39,630
Which is the class that we've defined.

50

00:03:39,630  -->  00:03:45,210
I'm going to going to user her so you can verify that user is with a capital U and that should always

51

00:03:45,210  -->  00:03:46,630
be the case.

52

00:03:46,650  -->  00:03:50,420
Classes should always use camel case like so.

53

00:03:50,460  -->  00:03:58,160
At the Capitol the first letter of each word should be capital and then to create the object.

54

00:03:58,170  -->  00:04:00,480
I'm sure you guys know how to do that as well.

55

00:04:00,480  -->  00:04:10,490
We have to define a variable and then give that variable the value of the new object.

56

00:04:10,530  -->  00:04:11,790
I'm sure you got that.

57

00:04:11,910  -->  00:04:17,490
We can create a variable which I'm going to call my underscore user but you know this can be anything

58

00:04:18,140  -->  00:04:24,400
and that is going to be equal to the new user object which we define like so.

59

00:04:25,290  -->  00:04:31,430
What this does is it calls the method and allows you to define the properties.

60

00:04:31,710  -->  00:04:35,760
So these two brackets here you can think of them as these brackets.

61

00:04:35,760  -->  00:04:44,700
Here we have to pass it email first name last name on ID the self keyword is a special keyboard and

62

00:04:44,700  -->  00:04:47,200
we don't need to do anything with it.

63

00:04:47,310  -->  00:04:53,400
So inside these brackets we have to put in email first name last name and ID and as we can see my chum

64

00:04:53,440  -->  00:04:57,240
tells us that we're missing some parameters so let's do that.

65

00:04:57,240  -->  00:04:58,820
We can put in as an email.

66

00:04:58,920  -->  00:05:12,730
My email as a first name my name as a last name my last name and then as an ID we can put one for now

67

00:05:13,750  -->  00:05:21,430
and we're going to see how we should why we should and how we can make this auto incremental in using

68

00:05:21,430  -->  00:05:22,060
sequel.

69

00:05:22,060  -->  00:05:26,950
We've seen how to do that using sequel only now we have to do that with Python as well.

70

00:05:28,150  -->  00:05:28,770
OK.

71

00:05:28,950  -->  00:05:35,850
So this as we know is going to create an object and this string here this hosing at school of Gautami

72

00:05:36,310  -->  00:05:45,000
is going to be passed this value into this e-mail property here and then that same email property the

73

00:05:45,000  -->  00:05:50,700
value of it is going to be assigned to the object's email property.

74

00:05:50,980  -->  00:05:58,700
So self not email that object my user that objects email property should be Jose and school of code

75

00:05:58,690  -->  00:05:59,250
not me.

76

00:05:59,250  -->  00:06:00,610
So let's verify that.

77

00:06:00,900  -->  00:06:05,170
I'm going to print my user don't e-mail.

78

00:06:05,190  -->  00:06:08,640
Notice how is quite nice with the autocomplete.

79

00:06:08,640  -->  00:06:13,410
Now we want to run this and there's a few ways we can do that as we can see there's a place symbol up

80

00:06:13,420  -->  00:06:13,920
there.

81

00:06:14,010  -->  00:06:16,250
But it is grayed out and it doesn't work yet.

82

00:06:16,380  -->  00:06:21,430
That is because pyjama doesn't know that this is a file that we may want to run.

83

00:06:21,450  -->  00:06:24,410
So what to do is right click the file and press run.

84

00:06:24,810  -->  00:06:30,160
Or we can just right click any way and press run and there we have it.

85

00:06:30,220  -->  00:06:33,760
That's the e-mail that we've printed out.

86

00:06:33,810  -->  00:06:34,270
OK.

87

00:06:34,380  -->  00:06:41,620
So now we know that this string is getting passed to this e-mail parameter or argument same thing and

88

00:06:41,620  -->  00:06:47,010
then that's getting assigned to the object's property which also happens to be called the e-mail but

89

00:06:47,010  -->  00:06:49,110
it could be anything else.

90

00:06:50,240  -->  00:06:55,520
OK then I'm going to create the wrapper method that we've seen before as well.

91

00:06:56,050  -->  00:06:58,300
Do you guys remember what this method is for.

92

00:06:58,300  -->  00:07:02,720
What does it do.

93

00:07:03,030  -->  00:07:04,650
And if you don't remember that's fine.

94

00:07:04,650  -->  00:07:10,650
It's a bit of an obscure method not used that often but I like implementing it because it can help you

95

00:07:10,650  -->  00:07:11,910
out a wee bit.

96

00:07:12,220  -->  00:07:17,570
And what this wrapper method does is it allows you to print the object.

97

00:07:17,640  -->  00:07:18,340
So I'm going to do.

98

00:07:18,370  -->  00:07:19,100
Return.

99

00:07:19,380  -->  00:07:25,930
And then it has to return a string a string representation a literal representation of the object and

100

00:07:25,930  -->  00:07:30,090
it can be anything you want but normally a Helps if it does represent the object.

101

00:07:30,100  -->  00:07:35,670
So I'm going to type user so that when we print the object we know that it's a user object.

102

00:07:35,680  -->  00:07:42,870
And then I'm going to use the format to type and open and close curly braces close the crocodile clip

103

00:07:43,600  -->  00:07:45,850
and then dot format.

104

00:07:45,860  -->  00:07:49,600
Self-taught email.

105

00:07:50,280  -->  00:07:55,670
I tend to get this question that people ask in My students ask why do you put these crocodile clips

106

00:07:55,690  -->  00:07:56,270
in there.

107

00:07:56,590  -->  00:08:01,650
And the reason is because I like it they don't have to be there you can delete them if you want.

108

00:08:01,650  -->  00:08:03,340
That's totally fine.

109

00:08:03,390  -->  00:08:04,640
They are not required.

110

00:08:04,720  -->  00:08:07,230
They are simply there as literal characters.

111

00:08:07,620  -->  00:08:12,270
So they are not necessary unlike these opening and closing braces.

112

00:08:12,270  -->  00:08:17,340
These two are necessary because the self the email the value is going to be replacing them.

113

00:08:17,380  -->  00:08:23,380
So those two unnecessary The Caracal Eclipse are not they're just there for aesthetic purposes.

114

00:08:23,400  -->  00:08:28,710
Basically I like seeing this because it tells me this is an object that I've printed out.

115

00:08:28,720  -->  00:08:29,160
OK.

116

00:08:29,250  -->  00:08:35,970
Now instead of print my use or email we can just print my user and let's run that.

117

00:08:36,120  -->  00:08:41,940
And as you can see we get those clips printed out alongside the user and the email.

118

00:08:42,610  -->  00:08:48,540
If we don't put the wrapper method and we run this what we get is something maybe not as interesting

119

00:08:48,540  -->  00:08:49,250
.

120

00:08:49,290  -->  00:08:55,830
We get that type of the thing with printed out user dot user object and we get the memory address at

121

00:08:55,840  -->  00:08:57,960
which it is defined.

122

00:08:58,000  -->  00:08:58,960
Not very useful.

123

00:08:58,960  -->  00:09:00,530
So that's why I like this.

124

00:09:00,520  -->  00:09:04,700
It gives me something at least that I can work with.

125

00:09:04,750  -->  00:09:08,780
So this is a short recap on classes and what they are.

126

00:09:09,000  -->  00:09:14,160
And at this point what we've seen is that they can be a store of data and we can name the properties

127

00:09:14,160  -->  00:09:15,810
that are in the class whatever we want.

128

00:09:15,820  -->  00:09:19,620
So it's useful to store data in this case related to our users.

129

00:09:19,620  -->  00:09:26,440
We can create a variable called my user and it store some properties and the variable can have names

130

00:09:26,430  -->  00:09:31,140
for those properties which in this case are email first name last name and ID.

131

00:09:31,200  -->  00:09:32,990
So it's useful to store things.

132

00:09:33,120  -->  00:09:37,810
And if we wanted to create another user with different details then we could do that too.

133

00:09:38,570  -->  00:09:40,800
However it can also do more things.

134

00:09:40,870  -->  00:09:43,040
And we're going to be looking at that in the next few videos.

135

00:09:43,120  -->  00:09:47,980
And some of those things are methods that declasse the objects can have and can perform.

136

00:09:48,180  -->  00:09:52,420
So let's look at that in the next few videos and see you in the next one.
