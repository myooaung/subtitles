

00:00:00,540  -->  00:00:07,560
Hi welcome back in this video we're going to be looking at loading from a CXXVI file in the last video

2

00:00:07,770  -->  00:00:12,660
we looked at saving to a file and this video we're going to load from it.

3

00:00:12,960  -->  00:00:19,320
The first thing I'd like you to do is to create a method that will open the file for reading and get

4

00:00:19,320  -->  00:00:24,640
the username out just that username don't need to create a user or anything like that.

5

00:00:24,780  -->  00:00:30,440
Just get the user name that's written on an arbitrary file out.

6

00:00:30,720  -->  00:00:35,300
So I'll give you a head start.

7

00:00:36,660  -->  00:00:43,200
And inside this method you can open the file for reading and get the user name out pause the video and

8

00:00:43,200  -->  00:00:48,430
go for that.

9

00:00:48,540  -->  00:00:51,210
Once you've done that let's look at how I would do it.

10

00:00:51,420  -->  00:01:03,690
I would say with open file name in read mode as if the user name is f. Daltry line and that's how you

11

00:01:03,690  -->  00:01:07,630
could get the username out.

12

00:01:07,770  -->  00:01:16,080
Now we could read the next few lines and get the movies from the user and that would be fine.

13

00:01:16,080  -->  00:01:21,140
We could simply say don't read line and that would give us the next available line.

14

00:01:21,510  -->  00:01:23,040
And so on.

15

00:01:23,100  -->  00:01:32,550
However it's easier if we just do f don't read lines and then see the file content is Avodart read lines

16

00:01:33,150  -->  00:01:41,760
and then you can get the username because after all realigns gives you a list of lines knowing that

17

00:01:41,780  -->  00:01:48,820
if not read lines give you a list of lines where the first line is line 0.

18

00:01:48,840  -->  00:01:54,610
How would you get the username out.

19

00:01:54,750  -->  00:02:00,150
The simplest way is to say username is content 0 and that would be the first line which has the user

20

00:02:00,150  -->  00:02:06,080
any minute and the movies oh

21

00:02:09,120  -->  00:02:17,220
this is where it gets slightly more complicated because now each line is a movie but it has the name

22

00:02:17,490  -->  00:02:22,530
the genre and whether it's been washed or not and it's separated by commas.

23

00:02:22,740  -->  00:02:27,890
So it's not really simple to load up all the movies in just a single line.

24

00:02:27,930  -->  00:02:42,050
So what I'm going to do is open and close square brackets and then say for line in content.

25

00:02:43,200  -->  00:02:49,340
And what this does is it gives as each line of the content of the file.

26

00:02:50,220  -->  00:02:54,240
Then we're going to do movies not a pen.

27

00:02:56,330  -->  00:03:03,420
And what we want to happen here is a new movie and what we want to put in here is a name the genre and

28

00:03:03,420  -->  00:03:11,100
whether it's been watched or not and the way we would get that is by separating the string into three

29

00:03:11,100  -->  00:03:18,630
pieces each piece containing one of these things is really simple to split a string the way to do it

30

00:03:18,750  -->  00:03:29,010
is movie data equals a line don't split on the comma and and now movie data will contain a list of name

31

00:03:30,400  -->  00:03:34,160
John-Roger watched.

32

00:03:34,600  -->  00:03:36,160
That's what movie data will be.

33

00:03:36,420  -->  00:03:39,650
And now we can put that here in the movie.

34

00:03:40,290  -->  00:03:46,500
So it will be Movie day to zero movie day to one.

35

00:03:47,070  -->  00:03:58,730
And finally the last one could be movie data too but it shouldn't be movie data too.

36

00:03:58,980  -->  00:04:07,460
Is there any reason why you think I would say it shouldn't be movie data too.

37

00:04:10,500  -->  00:04:11,270
Let me explain.

38

00:04:11,580  -->  00:04:17,970
When we write things to a file we are writing the literal characters we are writing strings to a file

39

00:04:17,970  -->  00:04:18,380
.

40

00:04:18,510  -->  00:04:25,580
So when we load that up from a file even though it is false it's the string falls.

41

00:04:25,620  -->  00:04:31,950
So we don't want to put in a string there where we want as a boolean we want the actual true or false

42

00:04:32,010  -->  00:04:32,810
value.

43

00:04:32,830  -->  00:04:37,420
So then Python can tell us whether something is true or not.

44

00:04:38,550  -->  00:04:48,050
So what we want to put in here is not MoVida to but rather we want to put in then whether movie date

45

00:04:48,040  -->  00:04:52,390
or two is equal to true.

46

00:04:53,520  -->  00:05:01,470
If movie that two is equal to true we want to put true in movie data two is not equal to true.

47

00:05:01,470  -->  00:05:03,110
We want to put falls in.

48

00:05:03,690  -->  00:05:10,170
So basically this comparison is doing is seeing whether the thing that saved in here is true or false

49

00:05:10,170  -->  00:05:10,650
.

50

00:05:10,800  -->  00:05:17,170
If this is true that means we've watched it and true is equal to true.

51

00:05:17,370  -->  00:05:19,680
So we put in true there.

52

00:05:20,160  -->  00:05:26,640
But if this is false false is not equal to true and therefore we put false in there which means we haven't

53

00:05:26,640  -->  00:05:28,590
watched that which is what we want.

54

00:05:31,320  -->  00:05:39,430
And that's how we could load up the movies and put them inside this list.

55

00:05:39,430  -->  00:05:47,680
Finally what we have to do is the last thing which is actually put to the States at this username and

56

00:05:47,680  -->  00:05:50,330
these movies inside a user.

57

00:05:50,980  -->  00:06:05,050
And the way we do that is say return user with that user name and the movies but we can't do that in

58

00:06:05,060  -->  00:06:05,280
here.

59

00:06:05,290  -->  00:06:08,120
So it's a user equals the user.

60

00:06:08,120  -->  00:06:10,920
Not movies equals.

61

00:06:11,500  -->  00:06:13,890
And finally return use.

62

00:06:15,280  -->  00:06:18,840
And what this does is let's call it again.

63

00:06:19,420  -->  00:06:25,830
Load up the contents of the file with this get the user name as being the first line.

64

00:06:25,990  -->  00:06:29,800
Then create a set of movies which is an empty list.

65

00:06:30,160  -->  00:06:38,590
Iterate over each movie over each line of the file and then calculate the split.

66

00:06:38,590  -->  00:06:42,180
Each of the elements in that cxxviii using lined up split.

67

00:06:42,190  -->  00:06:50,650
So we will get a list of name Jean-Robert and true or false and then it's going to append that to this

68

00:06:50,640  -->  00:06:53,870
list up here as an object.

69

00:06:53,940  -->  00:06:59,680
And finally is going to create the user and set the movies to be what we floated and return that to

70

00:06:59,680  -->  00:07:00,960
use.

71

00:07:00,970  -->  00:07:03,470
That is one error in this code.

72

00:07:03,580  -->  00:07:09,850
Can you spot it.

73

00:07:10,240  -->  00:07:11,220
I'll give you another hint.

74

00:07:11,250  -->  00:07:17,770
The error is in this line.

75

00:07:18,040  -->  00:07:20,300
Finally the era is.

76

00:07:20,440  -->  00:07:23,290
We've loaded the user name and content zero.

77

00:07:23,620  -->  00:07:29,660
The first line of the content and here were iterating from line 0 onwards.

78

00:07:30,270  -->  00:07:34,140
Which means Movie Data is going to be line split on the comma.

79

00:07:34,330  -->  00:07:40,890
But the first line that we're going to be loading in this for loop is actually going to be the username

80

00:07:40,950  -->  00:07:42,350
and has no comments.

81

00:07:42,630  -->  00:07:47,980
And then we're going to try to do this and we're going to be accessing zeroth elements of something

82

00:07:47,980  -->  00:07:48,970
that's not a list.

83

00:07:49,140  -->  00:07:54,700
And then we're going to be in the first element second element is not going to work because the first

84

00:07:54,700  -->  00:08:00,140
line doesn't have the same data as the remainder of the file.

85

00:08:00,150  -->  00:08:07,840
The only solution to this is to start iterating on the first line as opposed to the zeroth line.

86

00:08:07,840  -->  00:08:09,130
And I think you know how to do this.

87

00:08:09,120  -->  00:08:13,050
You can do this slicing.

88

00:08:14,350  -->  00:08:16,750
Which would be like this.

89

00:08:16,810  -->  00:08:25,910
What this does is it has content starting from Element 1 and finishing in the last element.

90

00:08:27,270  -->  00:08:30,970
And that's what this content would do.

91

00:08:31,020  -->  00:08:38,530
It would get you the list but starting at the first element and because there's no number here it would

92

00:08:38,520  -->  00:08:39,730
finish at the end.

93

00:08:39,730  -->  00:08:45,270
If you put a number here this would give you the lines between 1 and 5.

94

00:08:45,270  -->  00:08:49,830
If we omit the 5 it would give you the lines between 1 and the last line.

95

00:08:49,890  -->  00:08:54,330
Basically it would start iterating in line number 1.

96

00:08:54,820  -->  00:08:59,190
With that done that should allow us to load the user from file.

97

00:08:59,640  -->  00:09:03,050
So let's go in the open and see if that works.

98

00:09:03,930  -->  00:09:09,780
The user is going to be something and then we're going to say a user.

99

00:09:09,790  -->  00:09:21,230
Don't load from file I was aimed at 60 and we want to say user is the user loaded from the file.

100

00:09:21,250  -->  00:09:25,740
Finally I would say print user don't movies.

101

00:09:26,380  -->  00:09:29,300
OK let's run that and see what happens.

102

00:09:29,350  -->  00:09:33,910
And there we have it The Matrix and the interview naturally.

103

00:09:34,120  -->  00:09:41,050
That is one last problem which is that we've had to initialize a user called Jose and then loaded the

104

00:09:41,050  -->  00:09:47,700
data from a file which means we have to overwrite user which mean this line isn't really useful.

105

00:09:47,740  -->  00:09:54,460
However we have to do that if we want to call the method because that method is inside the user and

106

00:09:54,490  -->  00:10:01,020
we cannot do user with a capital you don't download from file that doesn't exist.

107

00:10:01,200  -->  00:10:11,180
It has to be a small user of the object itself and it has to be that unless we do something special

108

00:10:11,170  -->  00:10:11,740
up here.

109

00:10:12,000  -->  00:10:20,680
And what I'm going to do is introduce the concept of class methods a class method doesn't run on an

110

00:10:20,670  -->  00:10:25,260
object it runs on the class itself.

111

00:10:26,290  -->  00:10:32,370
And instead of self this has to be called CLX.

112

00:10:32,380  -->  00:10:40,390
And now if we go back into an app we can now do remove that line and say user Dalwood from file with

113

00:10:40,380  -->  00:10:41,140
a copy.

114

00:10:41,320  -->  00:10:45,670
I'm not running that method on the class itself.

115

00:10:46,170  -->  00:10:51,000
And we can do that because none of this content was using self dot anything.

116

00:10:51,150  -->  00:10:54,180
This wasn't related to a specific object.

117

00:10:54,580  -->  00:10:59,700
So we could just not use self and instead make it a class method.

118

00:11:00,610  -->  00:11:03,750
So what is this CLX What does that stand for.

119

00:11:04,370  -->  00:11:08,600
And that stands for the class the classes user.

120

00:11:09,580  -->  00:11:14,830
This method this class method is inside the user class.

121

00:11:14,980  -->  00:11:21,970
So what we can do is instead of using user with the user name then we can use copy CLX and put it in

122

00:11:21,970  -->  00:11:22,600
there.

123

00:11:23,190  -->  00:11:28,640
And that gives a user because this method is inside the user class.

124

00:11:28,650  -->  00:11:33,220
Therefore CLX is the same as user which is a path.

125

00:11:34,030  -->  00:11:38,160
So what this does is it gives the user one second.

126

00:11:38,160  -->  00:11:44,160
So if we run this again we see once again the matrix and the interview and not only that

127

00:11:46,990  -->  00:11:51,940
but we also get the name of the user in there too which is great

128

00:11:55,100  -->  00:11:56,290
that's enough for one video.

129

00:11:56,290  -->  00:12:01,360
I'm sure you guys are pretty full of knowledge by this point.

130

00:12:01,890  -->  00:12:06,940
So let's wait and in the next video we're going to be looking at saving in Jason format which is also

131

00:12:06,930  -->  00:12:08,690
extremely useful.

132

00:12:08,800  -->  00:12:09,320
I'll see you there
