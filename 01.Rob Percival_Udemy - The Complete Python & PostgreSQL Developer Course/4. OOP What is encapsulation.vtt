WEBVTT
1

00:00:00.150  -->  00:00:01.260
And welcome back.

2

00:00:01.260  -->  00:00:07.920
In this video we're talking about encapsulation and the concept of encapsulation is actually more interesting

3

00:00:08.400  -->  00:00:14.040
and more useful and this is going to be a longer video than that of composition.

4

00:00:14.040  -->  00:00:15.840
They are completely unrelated.

5

00:00:15.840  -->  00:00:22.640
By the way competition and encapsulation they sound similar but they're not related at all.

6

00:00:22.650  -->  00:00:31.530
Encapsulation is the hiding of the inner workings of a class when showing those inner workings is not

7

00:00:31.530  -->  00:00:33.430
necessary.

8

00:00:33.510  -->  00:00:34.880
That sounds like a load of crap.

9

00:00:34.890  -->  00:00:42.770
So let's go over what I mean I'm going to create a new file here called in camps you lation.

10

00:00:43.890  -->  00:00:50.070
And I'm going to bring back something from a previous section actually which was the Twitter logging

11

00:00:50.730  -->  00:00:53.280
that we used for console applications.

12

00:00:53.280  -->  00:00:59.390
So I'm going to go and open the project and go into the.

13

00:00:59.430  -->  00:01:03.150
And Twitter you utils class here.

14

00:01:03.660  -->  00:01:05.460
And I'm just going to copy it all.

15

00:01:05.460  -->  00:01:09.140
Now surely we remember what this was about.

16

00:01:09.180  -->  00:01:14.700
And we're going to need to install author tools so let's install that package you can do that.

17

00:01:14.760  -->  00:01:19.300
Or you can just put in the requirements of textfile you can install a of your preferences.

18

00:01:19.320  -->  00:01:26.770
As you know I'm here and the project interpreter you can just press the plus icon look for off too and

19

00:01:26.820  -->  00:01:28.350
that's fine.

20

00:01:28.350  -->  00:01:32.250
And instead of cons we're just going to ignore those constants for now.

21

00:01:32.310  -->  00:01:33.350
OK.

22

00:01:34.740  -->  00:01:42.240
What we've got here is something we called Twitter utils back in the other project.

23

00:01:42.240  -->  00:01:48.300
It was essentially a file to have a consumer which defined a consumer which was our Twitter application

24

00:01:49.110  -->  00:01:54.810
and that it also had a few methods we should be really executed in order request tokens should come

25

00:01:54.810  -->  00:01:55.460
first.

26

00:01:55.560  -->  00:01:57.230
Then we get the verifier.

27

00:01:57.240  -->  00:02:00.160
Then we got the access token right.

28

00:02:01.500  -->  00:02:05.810
Let's put this in a class so I can show you what encapsulation is about.

29

00:02:05.820  -->  00:02:11.300
And when I create a class called Twitter console log in I'm going to put all this stuff inside it so

30

00:02:11.300  -->  00:02:16.950
all I have to do is select everything and press the tab key which is beside the Q In your keyboard to

31

00:02:16.950  -->  00:02:18.990
put it inside that class.

32

00:02:18.990  -->  00:02:22.530
And now all of these properties are in the class are part of the class

33

00:02:25.950  -->  00:02:26.970
remember the consumer.

34

00:02:26.970  -->  00:02:30.110
Now is a class or are a static property.

35

00:02:30.120  -->  00:02:35.690
These methods are all part of the class in order to for them to be part of the instance.

36

00:02:35.700  -->  00:02:38.940
We have to put self in here like in any normal method

37

00:02:43.560  -->  00:02:50.520
like so OK this method here I'm just in a fix a couple of arrows as we go along.

38

00:02:50.760  -->  00:02:53.290
There's method here is inside the class.

39

00:02:53.280  -->  00:02:58.520
So when you call it with self is part of the object that is calling here.

40

00:02:59.940  -->  00:03:05.540
And the consumer should be part of the object as opposed to an instance.

41

00:03:05.550  -->  00:03:06.840
I'm going to put it inside the unit.

42

00:03:06.850  -->  00:03:08.850
So they're in it.

43

00:03:08.890  -->  00:03:10.250
They're self-dual consumer.

44

00:03:10.260  -->  00:03:12.540
Is that OK.

45

00:03:13.620  -->  00:03:20.640
Now the init method for this class is also going to take in a consumer a key and a consumer's secret

46

00:03:20.640  -->  00:03:21.300
.

47

00:03:21.330  -->  00:03:26.670
So instead of getting these from Constans we would get them from a parameter.

48

00:03:26.910  -->  00:03:31.850
So now we would be able to do Twitter.

49

00:03:31.920  -->  00:03:41.370
Logan is a new Twitter controlled log in passing in my key and my secret for your Twitter app and theirs

50

00:03:41.370  -->  00:03:44.830
would create a Twitter console log an object.

51

00:03:45.090  -->  00:03:50.600
It would initialises the consumer property and they would put it all inside Twitter underscore logging

52

00:03:50.620  -->  00:03:51.040
.

53

00:03:51.390  -->  00:03:54.880
We know this far we know how this works.

54

00:03:55.140  -->  00:03:59.970
Whenever we use the consumer we can access it using self.

55

00:03:59.970  -->  00:04:07.890
That is the current object so if we do Twitter on this call log in don't get requests tocome.

56

00:04:08.100  -->  00:04:12.870
What is happening really is that the Twitter log in is being passed in as the first parameter which

57

00:04:12.870  -->  00:04:13.770
is self.

58

00:04:13.800  -->  00:04:19.110
So what we're accessing here is Twitter and logging dot consumer which is the consumer property of this

59

00:04:19.110  -->  00:04:19.600
object.

60

00:04:20.370  -->  00:04:22.470
We know all this where we're looking at this.

61

00:04:22.980  -->  00:04:28.980
Now I'm going to quickly remove any dependencies on constants so we can run this stuff.

62

00:04:29.010  -->  00:04:31.820
I'm just going to replace the constants by the real thing

63

00:04:35.410  -->  00:04:41.580
and that way we won't be having a press event.

64

00:04:41.580  -->  00:04:44.130
And finally this consumer there should also be self-taught consumer.

65

00:04:44.160  -->  00:04:44.870
OK.

66

00:04:45.420  -->  00:04:51.620
So now we don't have any red lines which means we can potentially Brumby's now.

67

00:04:53.730  -->  00:04:58.550
What would you want from this Twitter logon object.

68

00:04:58.590  -->  00:05:03.100
What do we want to get out of Twitter logging.

69

00:05:03.450  -->  00:05:07.230
Do we want a request token.

70

00:05:07.410  -->  00:05:10.850
Do we want an author verifier.

71

00:05:10.950  -->  00:05:13.140
Do we want an author verifier.

72

00:05:13.290  -->  00:05:19.710
Remember this is a console log in the author verifier is only useful really when we want to redirect

73

00:05:19.770  -->  00:05:22.260
our web application to this you are.

74

00:05:22.320  -->  00:05:23.520
That's why we created it.

75

00:05:23.640  -->  00:05:29.980
But in a console there's method we might as well just print it out here like we do.

76

00:05:30.840  -->  00:05:32.340
So what do we want from this object.

77

00:05:32.340  -->  00:05:34.570
Do we want to request open run or the verifier.

78

00:05:34.770  -->  00:05:37.160
No we want an access token.

79

00:05:37.170  -->  00:05:40.370
That's really what we're interested in.

80

00:05:40.740  -->  00:05:45.570
So why not if executing these methods is always going to be a requirement.

81

00:05:45.840  -->  00:05:49.040
The requirement is always going to be that they run in order.

82

00:05:49.200  -->  00:05:58.500
Why not do something like perform Twitter log in and then do request token equals self-taught get requests

83

00:05:58.500  -->  00:06:06.540
still can verify are equals don't get off very far with rund quest as a parameter as it needs.

84

00:06:06.750  -->  00:06:14.950
And finally return self-dual get access token without requests token and that verify.

85

00:06:15.030  -->  00:06:21.900
So what we're doing here is we're calling look at requests in storing that in a variable then passing

86

00:06:21.900  -->  00:06:27.330
that to the get or the verifier chapter get off very fire.

87

00:06:27.330  -->  00:06:29.230
That way you'll get off very fine.

88

00:06:29.280  -->  00:06:30.230
We're getting the verifier.

89

00:06:30.240  -->  00:06:36.240
We're asking the user for a PIN code and then we're returning the get access token which is a dictionary

90

00:06:36.330  -->  00:06:41.970
of the access token and we're passing the request or going on the verify white.

91

00:06:42.000  -->  00:06:45.090
Why wouldn't we do this.

92

00:06:45.360  -->  00:06:49.300
We don't care about getting a request token we don't care about getting an all verifier.

93

00:06:49.320  -->  00:06:52.020
We don't care about getting an or fire rail.

94

00:06:52.140  -->  00:06:53.910
We care about getting an access token.

95

00:06:54.300  -->  00:06:57.950
But in order to get that we need to do these other things.

96

00:06:58.290  -->  00:07:06.120
So why not put it all under one roof so that other people can then do perform Twitter logon and that's

97

00:07:06.180  -->  00:07:07.380
all they have to do.

98

00:07:07.470  -->  00:07:09.550
Simple.

99

00:07:10.470  -->  00:07:14.620
And the answer is you should do it.

100

00:07:14.760  -->  00:07:21.780
The answer in fact is you should not allow people to just get a request token because that is useless

101

00:07:21.810  -->  00:07:25.930
by itself getting an or very far is useless by itself.

102

00:07:26.010  -->  00:07:32.100
The only thing we care about when performing it with or logging on when accessing this object is to

103

00:07:32.130  -->  00:07:33.770
get an access token.

104

00:07:34.230  -->  00:07:40.580
So these other methods really shouldn't be accessible on their own.

105

00:07:40.890  -->  00:07:46.360
If somebody else asks for a request token what are they going to do with it.

106

00:07:46.740  -->  00:07:49.020
Get a verifier and then get an access token.

107

00:07:49.110  -->  00:07:50.800
So it doesn't make sense to just get one.

108

00:07:50.940  -->  00:07:56.240
We might as well only allow this method to be executed.

109

00:07:56.380  -->  00:07:58.690
Unfortunately we can do that.

110

00:07:58.800  -->  00:08:08.460
We can disallow them other people to call these methods and by disallowing that we simplify this object

111

00:08:08.460  -->  00:08:13.890
we simplify the interactions with it and we make sure that other people other parts of the code don't

112

00:08:13.890  -->  00:08:16.420
make mistakes.

113

00:08:16.420  -->  00:08:22.620
That also means that if we then go and change this method for example if Twitter drops off and we'd

114

00:08:22.620  -->  00:08:27.180
have to do something different we have to change this method and because everybody is calling this method

115

00:08:28.110  -->  00:08:30.220
everybody's code will keep working.

116

00:08:30.570  -->  00:08:38.310
Whereas if people are performing the off on their own and treat or drops off even if we change this

117

00:08:38.310  -->  00:08:44.850
method to the new Twitter method because people were still doing this these methods here their code

118

00:08:44.850  -->  00:08:46.010
will break.

119

00:08:46.020  -->  00:08:52.190
So that's why it's important to make sure that you are only allowing those methods that make sense and

120

00:08:52.230  -->  00:08:53.300
are useful.

121

00:08:53.560  -->  00:08:57.210
OK so enough ranting in order to disallow methods from being cold.

122

00:08:57.210  -->  00:09:00.320
Just put two underscores in front of them.

123

00:09:00.540  -->  00:09:06.630
We may have seen this before and then naturally you have to put the on the school everywhere else as

124

00:09:06.660  -->  00:09:07.630
well.

125

00:09:08.330  -->  00:09:09.190
OK.

126

00:09:09.600  -->  00:09:14.660
Now if we try to come down here and say Twitter logon don't get request.

127

00:09:14.850  -->  00:09:18.870
It's no longer available.

128

00:09:19.290  -->  00:09:24.830
And if we put two underscores in front and so Toula log in.

129

00:09:24.840  -->  00:09:28.750
Now this is yellow it says unresolved attribute.

130

00:09:29.190  -->  00:09:31.550
It no longer allows us to call them.

131

00:09:31.560  -->  00:09:39.540
So now what we've done is we have encapsulated these methods and we've hidden the inner workings of

132

00:09:39.540  -->  00:09:46.770
a tweet or log in and where we are only allowing is what people care about which is getting an access

133

00:09:46.770  -->  00:09:49.890
token in a simple way.

134

00:09:50.040  -->  00:09:55.620
Granted when they call this method we're going to be running through all the rest but they don't care

135

00:09:55.620  -->  00:09:56.980
about.

136

00:09:57.330  -->  00:09:58.960
So now this is a lot simpler.

137

00:09:59.250  -->  00:10:04.950
The code here is encapsulated and this is good design because it means that other people and other parts

138

00:10:04.950  -->  00:10:09.330
of the code won't be making mistakes.

139

00:10:09.370  -->  00:10:09.720
OK.

140

00:10:09.750  -->  00:10:11.760
And that's what encapsulation.

141

00:10:11.760  -->  00:10:13.660
Just hiding away.

142

00:10:14.240  -->  00:10:22.380
And the parts of the code that are not interesting for other code and only exposing those parts that

143

00:10:22.440  -->  00:10:29.180
are what we have here essentially in this method this method now is an API.

144

00:10:29.550  -->  00:10:36.830
This method is an API to interact with these other methods and get an access token.

145

00:10:36.840  -->  00:10:42.790
So this method and these to some extent are all on API to interact with a Twitter API.

146

00:10:43.830  -->  00:10:44.410
OK.

147

00:10:44.580  -->  00:10:49.590
And by making sure that your methods and your classes use encapsulation properly and only show those

148

00:10:49.590  -->  00:10:55.580
properties and methods that are required then you're going to end up with a lot nicer code.

149

00:10:55.620  -->  00:10:58.260
This consumer should also be hidden.

150

00:10:58.260  -->  00:11:07.000
By the way there we go OK and that's how I would go about doing that.

151

00:11:07.200  -->  00:11:09.930
Make sure that everything that's not required is hidden away.

152

00:11:09.930  -->  00:11:15.330
And that way when somebody goes in an implied chairman says OK what can I do with this to the console

153

00:11:15.330  -->  00:11:19.070
log in thing to a in dot.

154

00:11:19.500  -->  00:11:25.920
The only thing they can do is perform to the log in all these other things are built into em to Python

155

00:11:25.920  -->  00:11:26.700
.

156

00:11:26.730  -->  00:11:31.290
So the only exposed method is performed to log in and the init method.

157

00:11:31.770  -->  00:11:33.310
So it's really simple for them to know.

158

00:11:33.330  -->  00:11:33.940
OK.

159

00:11:34.050  -->  00:11:35.650
It doesn't even take any parameters.

160

00:11:35.820  -->  00:11:38.610
So just cold out.

161

00:11:38.950  -->  00:11:39.930
That's everything for this video.

162

00:11:39.930  -->  00:11:40.830
Thanks for watching.

163

00:11:40.860  -->  00:11:44.330
Hope you learn something and I'll see you in the next one.
