1

00:00:00,190  -->  00:00:05,160
Will come back in this is we're looking at some advanced Python and we're going to be doing that as

2

00:00:05,160  -->  00:00:07,070
well over the next few videos.

3

00:00:07,080  -->  00:00:11,370
So what I've done is here in Python I've created the new project I've called it advanced python.

4

00:00:11,670  -->  00:00:16,570
And once again it's using a virtual environment using Python 3.5.

5

00:00:16,620  -->  00:00:19,850
We're not going to be using any external libraries in this project.

6

00:00:19,920  -->  00:00:26,100
So instead of a virtual environment you can just use the system interpreter if you want.

7

00:00:26,220  -->  00:00:31,880
In this first video I wanted to talk to you about builtin methods in Python.

8

00:00:32,640  -->  00:00:38,400
Now we've already looked at some builtin methods such as the in its method or the wrapper method which

9

00:00:38,400  -->  00:00:45,240
is useful representation but we're going to be looking at a couple others that's although use less often

10

00:00:45,840  -->  00:00:50,980
is still good to know about them and they can still be very useful in some scenarios.

11

00:00:51,360  -->  00:00:57,990
Instead of giving you examples using the usual animals and numbers we're going to go a step further

12

00:00:58,530  -->  00:01:03,420
and give you a slightly more useful example maybe not the most useful example in the world but nevertheless

13

00:01:03,490  -->  00:01:05,860
a slightly more useful example.

14

00:01:06,450  -->  00:01:08,700
Let's create a new file and you put it in file.

15

00:01:08,700  -->  00:01:12,900
And I'm going to call it built in methods not p why you can call it whatever you want.

16

00:01:12,960  -->  00:01:14,710
The name is not important.

17

00:01:14,850  -->  00:01:19,800
And what we're going to do in this video is create a class that we are going to be using across the

18

00:01:19,800  -->  00:01:21,410
next few videos as well.

19

00:01:21,420  -->  00:01:26,850
The class is going to be a class currency and currency is something that poses a few problems in computing

20

00:01:27,320  -->  00:01:33,690
them not too many but a few problems such as exchanging between currencies and things like that.

21

00:01:33,780  -->  00:01:41,550
The objective of this class is going to be to store a currency code such as GBP for great British pounds

22

00:01:41,580  -->  00:01:49,900
or USD for U.S. dollars and also the exchange rate between that currency and U.S. dollars.

23

00:01:49,920  -->  00:01:52,960
So U.S. dollars is going to be the base currency.

24

00:01:53,460  -->  00:01:59,130
And we're going to create other currencies that are going to convert to US dollars.

25

00:01:59,460  -->  00:02:06,570
We're going to create a constructor that is going to take in a code the currency code and the exchange

26

00:02:06,570  -->  00:02:08,550
rate to U.S. dollars.

27

00:02:08,550  -->  00:02:14,130
So let's start with that crater in its method to the constructor that digs in a code and an exchange

28

00:02:14,130  -->  00:02:21,800
to U.S. dollars and sets them to as properties of the object.

29

00:02:25,010  -->  00:02:26,620
Hopefully you achieve that.

30

00:02:26,630  -->  00:02:32,880
And I always recommend even if I don't say pause the video try it yourselves and go ahead of me if you

31

00:02:32,880  -->  00:02:33,540
can.

32

00:02:33,770  -->  00:02:42,140
As that's the best way to learn the init method is going to take in a code and an exchange to us the

33

00:02:42,260  -->  00:02:47,760
as we agreed and then we're going to set them to as properties of the objects of the code equals code

34

00:02:47,770  -->  00:02:48,050
.

35

00:02:48,270  -->  00:02:52,720
So that exchange to us the equals exchange to USD.

36

00:02:53,250  -->  00:02:59,820
So what we're setting here is just two properties that all objects of type currency are going to have

37

00:03:00,170  -->  00:03:02,050
a code and exchange to us.

38

00:03:02,190  -->  00:03:06,210
And we are going to pass those in when we create the object.

39

00:03:06,240  -->  00:03:11,040
So let's create an object down here just to keep track of overdoing and we look at an object called

40

00:03:11,040  -->  00:03:16,170
pounds that is going to be a currency object and the code is going to be GBP.

41

00:03:16,350  -->  00:03:20,670
The exchange the USD is going to be one point twenty one.

42

00:03:21,360  -->  00:03:27,420
So the GBP as you you know just to review is the code 1.20 one then goes to exchange the USD that's

43

00:03:27,430  -->  00:03:29,070
separated by commas.

44

00:03:29,430  -->  00:03:34,830
The code then goes into self-dual code the exchange to us the then goes into Server Exchange to us the

45

00:03:34,860  -->  00:03:36,600
.

46

00:03:37,260  -->  00:03:41,990
Now the pound object has these two properties a code and exchange the USD.

47

00:03:42,770  -->  00:03:43,280
OK.

48

00:03:43,470  -->  00:03:45,960
Now this doesn't do much.

49

00:03:45,960  -->  00:03:55,290
So what we are going to do is be able to also store a quantity of pounds in the object as opposed to

50

00:03:55,290  -->  00:03:56,910
just the pounds on the exchange rate.

51

00:03:56,910  -->  00:04:03,400
We're also going to allow the users or allow the programmers to store an amount of pounds Saulteaux

52

00:04:03,420  -->  00:04:05,790
amount equals zero point zero zero.

53

00:04:05,790  -->  00:04:11,040
We're going to initialize that to zero for reasons I'm going to explain soon.

54

00:04:11,400  -->  00:04:17,880
Now the next thing to do is to allow the programmers using this class to modify the amount in python

55

00:04:17,880  -->  00:04:24,730
we can just do something like Pound's not amount equals something else and that's totally fine.

56

00:04:24,750  -->  00:04:33,180
We can do that or we could also create a method called set amount and that takes in an amount and sets

57

00:04:33,180  -->  00:04:37,710
south'ard amount to be that does the same thing.

58

00:04:37,740  -->  00:04:44,040
Essentially it just gives us a bit of a proxy a bit of a name for what we're doing here is not necessary

59

00:04:44,310  -->  00:04:50,260
but in some scenarios then it might be interesting to limit how we can interact with a property.

60

00:04:50,370  -->  00:04:58,770
In this case it and we're going to see more examples of when it is important to limit that later by

61

00:04:58,800  -->  00:05:05,040
just creating this to show you how you would create a method to change that which I'm sure you know

62

00:05:05,040  -->  00:05:05,410
already.

63

00:05:05,430  -->  00:05:09,510
But nevertheless it's important to not assume too many things.

64

00:05:09,810  -->  00:05:17,060
And the next two methods we're going to create are the methods to convert this amount to US dollars

65

00:05:17,450  -->  00:05:23,540
or to convert an amount of US dollars back to this currency.

66

00:05:23,550  -->  00:05:32,290
So what I'm going to do is create a method to allow to convert pounds to USD or USD to pounds.

67

00:05:32,670  -->  00:05:41,510
So the methods are going to be in currency and they're going to take in an amount and 2 USD which is

68

00:05:41,510  -->  00:05:45,440
going to take in an amount but it's going to be none by default and I'm going to go into why in just

69

00:05:45,440  -->  00:05:55,140
a moment the incumbency method should convert the amount which should be in USD to the currency stored

70

00:05:55,130  -->  00:05:58,970
in the object and the to us the method should do the opposite.

71

00:05:58,980  -->  00:06:07,300
Convert the amount or this parameter to USD using the exchange rate.

72

00:06:07,700  -->  00:06:10,200
So go ahead and try that on your own.

73

00:06:10,250  -->  00:06:15,260
I really recommend you go ahead and play around with it make mistakes and that's fine.

74

00:06:15,620  -->  00:06:18,790
And then we'll come back and do it here.

75

00:06:21,120  -->  00:06:21,400
OK.

76

00:06:21,420  -->  00:06:29,490
Hopefully you managed the currency method and take an amount of USD converting it to the currency that

77

00:06:29,490  -->  00:06:31,050
we have created.

78

00:06:31,070  -->  00:06:39,690
So this is going to be return amount which is the parameter divided by the exchange rate.

79

00:06:39,720  -->  00:06:48,390
So for example if we wanted to convert a thousand dollars to pounds we should get fewer pounds because

80

00:06:48,380  -->  00:06:49,720
the pound is more expensive.

81

00:06:49,740  -->  00:06:52,490
Each pound is one point twenty one dollars.

82

00:06:52,880  -->  00:06:59,660
So when we convert dollars to pounds we lose some amount we essentially end up with fewer pounds than

83

00:06:59,670  -->  00:07:00,420
we had dollars.

84

00:07:00,420  -->  00:07:01,270
Let's let's try that.

85

00:07:01,280  -->  00:07:05,630
We're going to print pounds to USD 1000.

86

00:07:05,680  -->  00:07:09,300
We're going to print one thousand dollars converting it to pounds.

87

00:07:09,290  -->  00:07:10,390
We're going to print all that.

88

00:07:10,640  -->  00:07:17,110
So now we drive click and run as you can see we get none.

89

00:07:17,150  -->  00:07:21,310
And why is that.

90

00:07:22,470  -->  00:07:24,720
Because I used the wrong method.

91

00:07:24,810  -->  00:07:25,330
Great.

92

00:07:25,380  -->  00:07:27,900
And I know this is a bit smaller now.

93

00:07:28,250  -->  00:07:30,760
Zooming in to it and it's for your.

94

00:07:30,770  -->  00:07:32,200
I'll change that in a moment.

95

00:07:32,880  -->  00:07:38,010
As you can see the number we get is eight hundred twenty six which is fewer pounds than we had dollars

96

00:07:38,000  -->  00:07:38,240
.

97

00:07:38,250  -->  00:07:39,720
So something to remember.

98

00:07:39,750  -->  00:07:43,710
Remember to use the right methods as opposed to the wrong ones.

99

00:07:44,370  -->  00:07:46,620
And so now we've got that method created.

100

00:07:46,640  -->  00:07:52,500
We ended up with 800 or something pounds which seems about correct given this exchange rate which by

101

00:07:52,500  -->  00:07:56,730
the way I do not know if it's exchange rate is correct or not.

102

00:07:56,750  -->  00:08:00,370
The next thing to do is to create the 2 USD method.

103

00:08:00,390  -->  00:08:01,830
This method is going to do the opposite.

104

00:08:01,860  -->  00:08:09,740
It's going to convert an amount that we pass in or self-taught amount and is going to convert that to

105

00:08:09,750  -->  00:08:15,650
US dollars and it's going return that I would recommend you try that try give this a go once again if

106

00:08:15,650  -->  00:08:16,700
you haven't already.

107

00:08:17,120  -->  00:08:19,160
And we'll continue now.

108

00:08:20,060  -->  00:08:26,330
We're going to do a return amount but in this case because we want to calculate the amount of dollars

109

00:08:26,430  -->  00:08:29,510
we multiply instead of divide.

110

00:08:29,540  -->  00:08:36,260
So if we multiplied 1000 pounds by the exchange rate we should end up with more dollars than pounds

111

00:08:36,290  -->  00:08:38,990
because the pound is missing just more expensive.

112

00:08:39,000  -->  00:08:45,560
Similarly if this exchange rate was less than one we would end up when multiplying with fewer pounds

113

00:08:45,720  -->  00:08:49,130
than dollars.

114

00:08:49,500  -->  00:08:55,630
How about if we do this all we're doing is multiplying the amount parameter by the exchange rate.

115

00:08:55,760  -->  00:09:02,030
So this gives us an amount of dollars but we are completely ignoring self-doubt amount and self-taught

116

00:09:02,030  -->  00:09:09,900
amount may in some instances have a value and in some cases amount maybe none because that's the default

117

00:09:09,990  -->  00:09:11,690
value for the parameter.

118

00:09:12,200  -->  00:09:20,220
So what we want to do is to make sure that we are using amount if it is not known if this is a number

119

00:09:20,550  -->  00:09:22,310
then we will use the parameter.

120

00:09:22,320  -->  00:09:27,060
But if the parameter is none then we're going to use self dollar amount.

121

00:09:27,410  -->  00:09:27,680
Okay.

122

00:09:27,680  -->  00:09:33,560
So what we do is create a variable called to convert and that's going to be amount if the amount is

123

00:09:33,570  -->  00:09:35,320
not None.

124

00:09:35,460  -->  00:09:37,750
Else self-betterment.

125

00:09:37,940  -->  00:09:45,990
So what this is doing is it's saying to convert be assigned the value of amount if amount is not None

126

00:09:46,000  -->  00:09:46,880
.

127

00:09:47,490  -->  00:09:50,830
And if it isn't then use self-harmer.

128

00:09:51,090  -->  00:09:58,800
So to convert variable is going to have either amount in it or self-taught amount in it because this

129

00:09:58,800  -->  00:10:05,730
is so common to use a parameter if it is sent and to use a property if it is not sent there is actually

130

00:10:05,740  -->  00:10:11,580
a shorthand in Python that is also part of the advanced Python section which is or so we are going to

131

00:10:11,580  -->  00:10:15,060
do amount or sell that amount.

132

00:10:15,060  -->  00:10:20,810
So we're going to be using the parameter or softer amount if the parameter is none.

133

00:10:20,820  -->  00:10:22,350
And that's what that means.

134

00:10:22,950  -->  00:10:28,170
And down here instead of using a mount Naturally we have to use our variable and so that we're using

135

00:10:28,170  -->  00:10:29,110
that.

136

00:10:29,760  -->  00:10:34,800
OK now let's print the opposite pounds to USD 1000.

137

00:10:34,800  -->  00:10:40,560
So now what we're doing here is converting one thousand pounds to us dollars so we should see twelve

138

00:10:40,560  -->  00:10:46,820
hundred and ten one thousand two hundred and ten printed out and indeed we do.

139

00:10:46,870  -->  00:10:49,670
So that's fantastic.

140

00:10:49,700  -->  00:10:51,610
And I apologize for the tax being a bit smaller.

141

00:10:51,780  -->  00:10:56,930
I've changed a couple of things and it has become small but I would fix that for the next video.

142

00:10:57,420  -->  00:11:03,090
And now what we have is the ability essentially to compare whether currencies are more expensive than

143

00:11:03,090  -->  00:11:07,180
others or whether on a mound in a currency is more expensive than another currency.

144

00:11:07,830  -->  00:11:16,950
For example let's create another currency which I'm going to call euros for example and the exchange

145

00:11:16,950  -->  00:11:19,780
rate for euro is going to be one point seven.

146

00:11:19,900  -->  00:11:20,710
Let's.

147

00:11:21,330  -->  00:11:21,970
I'm not.

148

00:11:22,050  -->  00:11:25,220
I'm not sure if this is correct or not but that's fine.

149

00:11:25,870  -->  00:11:33,420
Now I want to see whether one thousand pounds is more expensive than 1000 euros.

150

00:11:33,420  -->  00:11:36,340
The conversion is always going to go through U.S. dollars.

151

00:11:36,750  -->  00:11:37,470
How would we do this.

152

00:11:37,470  -->  00:11:47,940
How would I check whether £1000 gives me more dollars than 1000 euros would go ahead and try that program

153

00:11:47,970  -->  00:11:52,890
that printed out and try that on your own.

154

00:11:54,930  -->  00:11:57,810
Hopefully you got something and that gives you the right answer.

155

00:11:57,810  -->  00:12:12,460
Something like potentially and print and pounds to us the 1000 and greater than euros to USD 1000.

156

00:12:12,480  -->  00:12:14,220
They should print true.

157

00:12:14,580  -->  00:12:23,370
If this value is greater than this one unfolds if this value is not greater than baseball I'm going

158

00:12:23,380  -->  00:12:24,210
to press play.

159

00:12:24,750  -->  00:12:30,240
And we see the value true come out which is what we would expect because the exchange rate of one point

160

00:12:30,240  -->  00:12:33,690
twenty one will give us twelve hundred and ten.

161

00:12:33,720  -->  00:12:35,760
The exchange rate of one point 0 7.

162

00:12:35,760  -->  00:12:40,410
Will you give us one thousand twenty one thousand US and 1070.

163

00:12:40,490  -->  00:12:44,040
So the pound is going to be more expensive.

164

00:12:44,160  -->  00:12:45,290
That makes sense.

165

00:12:45,690  -->  00:12:47,520
And that's great.

166

00:12:47,550  -->  00:12:54,480
However when we're comparing this we have to do Pound's not to USD one thousand euros up to USD 1000

167

00:12:54,480  -->  00:13:01,350
and so we could simplify this slightly by instead of passing the parameter in say in pounds Dotts set

168

00:13:01,360  -->  00:13:06,510
amount one thousand euros don't set amount one.

169

00:13:06,660  -->  00:13:13,920
And now we can just do that leaving the parameter as non then to convert is going to use self-dual amount

170

00:13:13,920  -->  00:13:17,730
which is one thousand and we are going to be getting that.

171

00:13:17,730  -->  00:13:24,330
So once again if we print this we should also SOTY true which we do.

172

00:13:24,330  -->  00:13:28,270
However we still have to convert to USD.

173

00:13:28,410  -->  00:13:37,410
This is not ideal because what's happening now is that the pounds we are no longer comparing pounds

174

00:13:37,410  -->  00:13:38,240
and euros.

175

00:13:38,350  -->  00:13:45,780
Now we are comparing the amount converted to USD and the amount converted to USD so it's not as obvious

176

00:13:46,830  -->  00:13:53,220
what is happening here maybe more I guess it is reasonably obvious but it's not as if we are comparing

177

00:13:53,220  -->  00:13:55,270
pounds in euros directly.

178

00:13:55,380  -->  00:14:01,300
We know it's not possible to compare pounds and euros directly we have to convert them to USD.

179

00:14:01,630  -->  00:14:09,210
But someone that only wants to compare pounds and euros might not realize that converting to USD is

180

00:14:09,210  -->  00:14:10,310
necessary.

181

00:14:10,830  -->  00:14:16,370
So what I want to be able to do is this pounds are greater than euros.

182

00:14:16,410  -->  00:14:21,450
Now that we've sent the amount I want to see if the pounds are greater if they're if they are worth

183

00:14:21,450  -->  00:14:22,740
more.

184

00:14:23,700  -->  00:14:27,430
And here is finally where are going into the big 10 methods.

185

00:14:27,460  -->  00:14:30,720
So up to now this has just been a bit of a build up.

186

00:14:30,740  -->  00:14:35,580
Now we go into the built in methods and which is actually fairly simple but nevertheless we're wanted

187

00:14:35,590  -->  00:14:37,400
to give you a bit of background.

188

00:14:38,190  -->  00:14:42,650
Well in order to be able to do this well first of all what happens if we do it.

189

00:14:43,050  -->  00:14:51,070
If we if we just run this file what happens we get a type error on orderable types currency graded on

190

00:14:51,070  -->  00:14:52,100
currency.

191

00:14:52,140  -->  00:15:00,820
We've seen that type error occurs when we give something the wrong type but we're not really calling

192

00:15:00,820  -->  00:15:01,630
anything.

193

00:15:01,890  -->  00:15:05,120
We're not calling a method here.

194

00:15:05,250  -->  00:15:06,540
We're calling the print method.

195

00:15:06,550  -->  00:15:09,920
But even if we remove the print method we still get the type error.

196

00:15:09,970  -->  00:15:13,110
So it's not the print method that's the problem.

197

00:15:13,120  -->  00:15:20,400
It's saying that these types are an orderable it cannot realigns with the pounds rather than Euros or

198

00:15:20,410  -->  00:15:23,960
Guruji rather than pounds because they cannot order them.

199

00:15:24,390  -->  00:15:30,000
It's in the currency Goodland currency doesn't make sense because I don't know what the greater than

200

00:15:30,000  -->  00:15:34,670
sign means for this object that we've created.

201

00:15:34,990  -->  00:15:39,310
So we have to tell it how to calculate greater of them.

202

00:15:40,140  -->  00:15:46,090
So let's once again put the print back in and we're going to tell it how to calculate greater than and

203

00:15:46,090  -->  00:15:54,760
the way we do that in Python is defining another built in method which is G.T. the GTY method is greater

204

00:15:54,750  -->  00:15:57,740
then and it takes in itself.

205

00:15:58,240  -->  00:16:02,140
And another thing that we're comparing with.

206

00:16:02,130  -->  00:16:02,680
OK.

207

00:16:03,120  -->  00:16:13,800
So what we're going to do is return self to us the greater than other to USD.

208

00:16:13,810  -->  00:16:22,170
So what's happening now is that the greater than method the greater than symbol really is calling Pound's

209

00:16:22,240  -->  00:16:26,070
dot G.T. euros.

210

00:16:26,290  -->  00:16:31,900
This is what is being called when we execute pounds greater than euros.

211

00:16:32,200  -->  00:16:38,080
It's getting the pounds object and it's calling the underscore underscored G.T. underscore underscore

212

00:16:38,520  -->  00:16:42,270
method with the opposite side as a parameter.

213

00:16:42,340  -->  00:16:43,830
You wrote as a parameter.

214

00:16:44,560  -->  00:16:50,490
So the GC is not some sort of magical builtin thing in Python it's just another method that gets called

215

00:16:50,880  -->  00:16:54,210
and we can tell it how to compare things.

216

00:16:54,970  -->  00:17:01,980
And when we call the G.T. method we're assuming that other is also a currency object because recalling

217

00:17:02,080  -->  00:17:04,210
that to us the method on it.

218

00:17:04,200  -->  00:17:08,740
So what we're seeing is self is naturally a currency object as it always is.

219

00:17:09,220  -->  00:17:12,090
And other also is a currency object.

220

00:17:12,120  -->  00:17:19,960
And what we're going to do is convert self to USD and the other two USD and compare Now those which

221

00:17:20,020  -->  00:17:21,890
is essentially exactly what we were doing before.

222

00:17:22,060  -->  00:17:26,980
But at the point of use it becomes easier.

223

00:17:27,010  -->  00:17:28,550
So that's why it's useful.

224

00:17:28,620  -->  00:17:35,720
So now we can run this file again and we see the word true come out which is great.

225

00:17:37,500  -->  00:17:38,270
OK.

226

00:17:38,320  -->  00:17:43,400
This is everything for this video but as well as G.T. is also worth looking at.

227

00:17:43,450  -->  00:17:47,520
L t l e.

228

00:17:47,620  -->  00:17:57,570
Which means less than or equal to and naturally G E which is greater than or equal to greater than or

229

00:17:57,610  -->  00:17:58,170
equal to

230

00:18:01,200  -->  00:18:03,930
the elhi is less than or equal to

231

00:18:06,700  -->  00:18:17,980
LTE is less than G.T. is greater than naturally we need to also be able to say whether they are equal

232

00:18:19,810  -->  00:18:25,360
equal equal and if we run this we get false.

233

00:18:25,720  -->  00:18:37,510
What we want to do is eat you and say self-doubting USA equal equal other got to USD and now instead

234

00:18:37,510  -->  00:18:43,770
of comparing the objects themselves is going to compare the contents of that to us to them.

235

00:18:44,010  -->  00:18:50,680
So what it does when we don't have the equal method is it campaigns to see whether the objects aren't

236

00:18:50,670  -->  00:18:52,690
exactly equivalent.

237

00:18:52,680  -->  00:19:00,460
And when we have the EU method then it compares whether the result of this is correct and we have to

238

00:19:00,450  -->  00:19:03,180
return as well.

239

00:19:04,120  -->  00:19:07,750
OK.

240

00:19:10,250  -->  00:19:11,000
And there we go.

241

00:19:11,110  -->  00:19:15,330
So I'll leave it to you to implement these other methods as I'm sure you are able to.

242

00:19:15,340  -->  00:19:21,970
Knowing how these two are going and that is it really for these if you built in methods these are not

243

00:19:22,030  -->  00:19:27,090
all the built in methods that are available in Python but these do make your life a bit simpler when

244

00:19:27,100  -->  00:19:31,700
dealing with mathematical things especially but also with things that can be compared.

245

00:19:31,720  -->  00:19:33,550
It doesn't have to be numbers.

246

00:19:33,790  -->  00:19:40,690
It can be for example to two student objects and you can potentially implement these methods to see

247

00:19:40,680  -->  00:19:44,710
whether their grades are greater than or less than and etc..

248

00:19:45,100  -->  00:19:46,880
So this has a range of uses.

249

00:19:47,080  -->  00:19:52,980
But always remember to make sure it makes sense to be able to do this.

250

00:19:53,350  -->  00:19:56,600
Make sure it makes sense to be able to do lbs greater than Euros.

251

00:19:56,640  -->  00:20:02,340
Does it make sense to do student 1 greater than student 2.

252

00:20:02,770  -->  00:20:04,420
Maybe maybe not.

253

00:20:04,450  -->  00:20:07,920
So keep that in mind when you are implementing these methods.

254

00:20:07,950  -->  00:20:12,210
Do they make sense to use these mathematical operators on them.

255

00:20:12,220  -->  00:20:18,400
But always remember that you can do is not limited to numbers only you can compare anything you want

256

00:20:18,390  -->  00:20:18,570
.

257

00:20:18,720  -->  00:20:25,930
You can compare any property of self to any property of other and that's totally fine.

258

00:20:26,010  -->  00:20:27,410
So that's everything for this video.

259

00:20:27,420  -->  00:20:32,500
Just wanted to teach you about these mathematical symbols and how they are just methods in Python and

260

00:20:32,500  -->  00:20:37,050
also introduce you to this currency class which you're going to be using over the next few videos as

261

00:20:37,120  -->  00:20:38,260
well.

262

00:20:38,260  -->  00:20:40,620
So thanks for tuning in and I'll see you in the very next video
