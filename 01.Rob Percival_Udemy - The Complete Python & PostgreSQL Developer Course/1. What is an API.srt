1

00:00:00,470  -->  00:00:07,110
Hi will come back in this section we're going to be looking at API and Python web.

2

00:00:07,140  -->  00:00:09,050
I'm really excited for this section.

3

00:00:09,120  -->  00:00:16,080
In fact what I do in my day job is python web development and mainly So I'm really excited to introduce

4

00:00:16,080  -->  00:00:19,050
you to this field.

5

00:00:19,050  -->  00:00:25,860
Not only am I doing that because I do that in my job but also the Web nowadays is completely taken over

6

00:00:25,950  -->  00:00:27,230
everything else.

7

00:00:27,390  -->  00:00:33,550
When we previously wanted to make mobile apps now we're usually making mobile Web sites.

8

00:00:33,600  -->  00:00:36,760
It's just faster it's easier it's a nice experience.

9

00:00:36,930  -->  00:00:37,540
So it's.

10

00:00:37,620  -->  00:00:40,550
And also we're requesting a lot of things via API.

11

00:00:40,860  -->  00:00:45,480
Now if you don't know what an API is that probably sounds like Chinese to you but we're going to be

12

00:00:45,480  -->  00:00:48,090
looking into that in this section.

13

00:00:48,090  -->  00:00:49,100
And I'm really excited.

14

00:00:49,230  -->  00:00:50,430
And you should be too.

15

00:00:50,430  -->  00:00:55,880
It's a really interesting find really useful as well in this video we wanted to look at.

16

00:00:55,880  -->  00:00:57,170
What is an API.

17

00:00:57,300  -->  00:01:03,810
Just because if you don't know what an API is then it's really difficult to understand why it might

18

00:01:03,810  -->  00:01:08,710
be useful or even if you're using one already and you don't realize it.

19

00:01:09,720  -->  00:01:11,220
Let's look at the eye first.

20

00:01:11,290  -->  00:01:15,510
The i in API it stands for interface.

21

00:01:15,600  -->  00:01:21,630
Now a lot of people don't know what an interface is and that's totally fine because it's not a word

22

00:01:21,630  -->  00:01:27,170
that you really encounter very often in the in your day to day.

23

00:01:27,390  -->  00:01:31,890
In the case of the I in API it's an interface between two programs.

24

00:01:32,190  -->  00:01:36,090
So let's look at what is an interface.

25

00:01:36,090  -->  00:01:40,470
Think about when you go to a restaurant when you go to a restaurant you want food.

26

00:01:40,950  -->  00:01:46,190
You don't want to talk with the server the waiter although you do.

27

00:01:46,710  -->  00:01:51,650
You don't want to talk with a chef although you kind of do to some extent.

28

00:01:51,690  -->  00:01:57,630
You ask the waiter or something and they then ask the chef something and they produce the food for example

29

00:01:58,160  -->  00:01:58,910
.

30

00:01:59,160  -->  00:02:04,400
So in the case of a restaurant the chef makes the food but you don't communicate with a chef.

31

00:02:05,190  -->  00:02:06,630
So how does that happen.

32

00:02:06,630  -->  00:02:10,590
How does the knowledge of your food get to the chef.

33

00:02:10,830  -->  00:02:14,400
And the answer is via the server or the waiter.

34

00:02:14,850  -->  00:02:20,340
So the server or the waiter is the interface between you and the chef.

35

00:02:20,340  -->  00:02:27,480
It is the the thing or in this case a person that enables communication between two separate processes

36

00:02:27,510  -->  00:02:30,180
two separate programs two separate applications.

37

00:02:30,210  -->  00:02:33,040
In this case two separate people.

38

00:02:33,870  -->  00:02:40,140
We could take that a step further and think the chef is an interface between the server and the food

39

00:02:40,140  -->  00:02:40,710
.

40

00:02:40,920  -->  00:02:47,520
And I put a question mark there at the end because I appreciate it may be a bit confusing but if the

41

00:02:47,520  -->  00:02:55,050
server knows nothing about cooking and knows nothing about what the chef does the only thing the server

42

00:02:55,080  -->  00:03:01,890
is doing is asking a person the chef something and then food magically appears.

43

00:03:01,950  -->  00:03:10,950
If you were the server you would think the chef is an interface between you and some magical food producing

44

00:03:11,490  -->  00:03:12,320
machine.

45

00:03:12,630  -->  00:03:13,960
It could be.

46

00:03:14,730  -->  00:03:16,590
So this is what I mean with interfaces.

47

00:03:16,590  -->  00:03:27,180
Innovators are confusing because they are not things they are just kind of methods of enabling communication

48

00:03:27,480  -->  00:03:30,960
between two things.

49

00:03:30,960  -->  00:03:37,170
So the interface isn't an actual thing it is just a way of enabling communication a way of permitting

50

00:03:37,740  -->  00:03:40,680
that flow between two separate things.

51

00:03:41,030  -->  00:03:43,880
OK let's revisit that in a couple of moments.

52

00:03:43,920  -->  00:03:45,980
And first let's look at the other two letters.

53

00:03:46,050  -->  00:03:48,310
The A and the P in API.

54

00:03:48,490  -->  00:03:51,150
It stands for application programming.

55

00:03:51,510  -->  00:03:59,690
And that doesn't really mean anything to anybody but the interface the API is used for Application Programming

56

00:03:59,700  -->  00:04:07,290
and now that gets a bit more meaning it's an interface which enables communication and you can use that

57

00:04:07,350  -->  00:04:15,650
enablement you can use that new found communication to do programming of your applications.

58

00:04:15,660  -->  00:04:16,310
So what does that mean.

59

00:04:16,320  -->  00:04:21,300
Lets give you a few examples because all this theory is a bit confusing.

60

00:04:21,300  -->  00:04:29,010
For example the methods in psycho-BS G2 which you've used to communicate with postscripts those methods

61

00:04:29,280  -->  00:04:33,220
are an API to interact with lib P-Q.

62

00:04:33,720  -->  00:04:39,490
And what is P-Q the methods in lippie Q Aren't API to interact with potsherd sequel.

63

00:04:39,960  -->  00:04:47,190
So when we were using Cyclopedia to really we were using an API that allowed us to interact with another

64

00:04:47,190  -->  00:04:50,340
API which allowed us to interact with Pascola sequel

65

00:04:53,620  -->  00:04:58,750
so that's a bit of a contrived example but nevertheless that's something there.

66

00:04:58,810  -->  00:05:05,050
Twitter for example exposes an API to allow your applications to interact with Twitter for example create

67

00:05:05,090  -->  00:05:06,410
tweets search tweets.

68

00:05:06,400  -->  00:05:09,640
And so what does this mean.

69

00:05:09,650  -->  00:05:17,500
It means that although you cannot interact with Twitter itself directly with the code that makes Twitter

70

00:05:17,520  -->  00:05:18,880
Twitter.

71

00:05:18,880  -->  00:05:25,550
Twitter does give you a way to interact with it and create tweets and search tweet and do a number of

72

00:05:25,550  -->  00:05:30,610
other things like see which subtribe you've got or which followers you've got so.

73

00:05:30,980  -->  00:05:35,470
So the API is just an interface to enable communication.

74

00:05:36,250  -->  00:05:40,250
But you are not interacting with Twitter directly.

75

00:05:40,520  -->  00:05:43,050
So in the case of Twitter there is a web API.

76

00:05:43,160  -->  00:05:48,160
It is an application programming interface that just happens to be the Web.

77

00:05:48,860  -->  00:05:53,570
But we've also encountered API use for other things we've encountered API is to interact with other

78

00:05:53,560  -->  00:05:57,680
API as such as with Pascola sequel that was not a web API.

79

00:05:57,680  -->  00:06:05,610
It didn't happen on the Internet but they can also happen in the Internet like the Twitter one and the

80

00:06:05,850  -->  00:06:12,140
sequel API encyclopedia 2 came in the form of some Python code that we could use directly inside our

81

00:06:12,130  -->  00:06:12,380
code.

82

00:06:12,380  -->  00:06:15,270
We could just import Sanko OPG too.

83

00:06:15,290  -->  00:06:22,130
And then we could use psycho-BS G-2 as if it were our code only and it was an API that was already written

84

00:06:22,120  -->  00:06:23,910
by somebody else.

85

00:06:24,940  -->  00:06:27,290
And as I said there are also web API.

86

00:06:27,530  -->  00:06:36,290
And these are not Python code psycho-BS youtoo was some Python code we could import and use web API

87

00:06:36,290  -->  00:06:41,650
things are not Python code so that they work with any programming language.

88

00:06:41,690  -->  00:06:47,530
Not only Python for example Twitter is not necessarily written in Python.

89

00:06:47,750  -->  00:06:57,410
It may be written in a bunch of other languages like Ruby Java and so so we cannot import web API directly

90

00:06:57,410  -->  00:07:01,420
into our program and use them because they are not Python code.

91

00:07:01,750  -->  00:07:03,920
So how do you use web API.

92

00:07:04,580  -->  00:07:09,710
Well there's two main types of whether it be eyes and they are called sope be in one of them and rest

93

00:07:09,860  -->  00:07:11,760
being the other.

94

00:07:11,930  -->  00:07:17,840
We're not going to be looking about sope because it is kind of fallen off the radar recently.

95

00:07:17,870  -->  00:07:21,630
Rest is by far the most popular type of API.

96

00:07:21,710  -->  00:07:24,420
And we're going to be looking at rest API.

97

00:07:25,490  -->  00:07:31,340
So let's explain quickly what rest is because this is also something that is not very often understood

98

00:07:33,070  -->  00:07:36,830
rest stands for representational state transfer.

99

00:07:36,860  -->  00:07:40,650
And if you're just starting now with programming as I would expect you to.

100

00:07:40,850  -->  00:07:45,940
You probably have no clue what that means and I don't judge you for that.

101

00:07:46,390  -->  00:07:51,090
Rest is a way of organizing and exposing an API to the outside world.

102

00:07:51,130  -->  00:07:58,340
For example Twitter gives us a way of interacting with Twitter and that is at rest.

103

00:07:58,340  -->  00:08:05,330
API I'll give you a simplified version of what rest is because the original description occupies a chapter

104

00:08:05,330  -->  00:08:10,650
of a Ph.D. dissertation and I'm not going to bore you with all the details.

105

00:08:10,970  -->  00:08:11,480
OK.

106

00:08:11,620  -->  00:08:20,680
So in the Internet we usually have servers and clients so we have a server.

107

00:08:20,890  -->  00:08:24,940
So just Twitter pooter can be a server or it can be running on a server.

108

00:08:25,610  -->  00:08:31,530
And we've got clients for example your computer and when you access Twitter you now can be saved.

109

00:08:31,580  -->  00:08:38,060
You are a client of Twitter because you are accessing Twitter with your computer the server on which

110

00:08:38,060  -->  00:08:47,180
Twitter is running is also a computer like your own only we call it a server because it is kind of serving

111

00:08:47,780  -->  00:08:50,360
Twitter to multiple clients.

112

00:08:50,380  -->  00:08:52,100
That's why we call it a sieve.

113

00:08:52,750  -->  00:08:57,890
There is that line of communication there between your computer and the client and the server.

114

00:08:58,700  -->  00:09:00,330
You can move that up.

115

00:09:00,800  -->  00:09:09,300
So rest specifies that the communication between those two things is a client server interface.

116

00:09:09,500  -->  00:09:16,930
So the rest interface the API is a client server interface which means the API runs on the server your

117

00:09:16,970  -->  00:09:22,640
computer the client communicates with it and asks it for things.

118

00:09:22,630  -->  00:09:24,660
We also see it's stateless.

119

00:09:24,640  -->  00:09:26,100
And what does that mean.

120

00:09:26,440  -->  00:09:31,490
Well it means that the server doesn't know who is who.

121

00:09:31,550  -->  00:09:38,800
In terms of the clients if your computer asks the server something the server just thinks it's a completely

122

00:09:38,810  -->  00:09:42,850
new entity that is accessing the server doesn't remember who you are.

123

00:09:43,100  -->  00:09:47,500
Unlike in a restaurant where the waiter may remember who you are and what you've kind of ordered before

124

00:09:47,500  -->  00:09:52,210
on things like that for example the waiter may make recommendations for food and things like that.

125

00:09:52,390  -->  00:09:59,090
The server does not know who you are by default and what that means is that because the server doesn't

126

00:09:59,090  -->  00:10:00,880
have to keep track of who is who.

127

00:10:00,880  -->  00:10:06,320
A lot of people can make requests at the same time and the server doesn't have to be juggling information

128

00:10:06,320  -->  00:10:07,280
.

129

00:10:07,310  -->  00:10:14,360
It also means for example if you are logged into Twitter every time you ask Twitter for something.

130

00:10:14,410  -->  00:10:15,570
Twitter doesn't know who you are.

131

00:10:15,590  -->  00:10:19,120
So it doesn't know you are logged in unless you tell it that you're logged in.

132

00:10:19,120  -->  00:10:20,640
We're going to look at that later on

133

00:10:23,930  -->  00:10:26,410
it the next thing is that it is cashable.

134

00:10:26,890  -->  00:10:34,820
And what that means is that essentially the server sends the client some information and if the client

135

00:10:34,900  -->  00:10:40,330
requests the same information immediately the response will be the same.

136

00:10:40,680  -->  00:10:41,890
What Let me give you an example.

137

00:10:41,920  -->  00:10:51,400
Say you your client goes to Twitter to the dot com to Telecom then sends you the page to Telecom which

138

00:10:51,400  -->  00:10:54,470
is you cannot log in register to Twitter and things like that.

139

00:10:55,000  -->  00:11:00,970
And then if you refresh the page what the cashable means is that you would expect the page to be identical

140

00:11:00,970  -->  00:11:02,280
.

141

00:11:02,590  -->  00:11:09,540
And what that means is that your client can then cache the web page.

142

00:11:09,550  -->  00:11:11,540
Why is that important.

143

00:11:11,920  -->  00:11:17,450
If your client requests Twitter dot com you get a web page back you have to download the page you have

144

00:11:17,440  -->  00:11:19,720
to download images that are on the page.

145

00:11:19,900  -->  00:11:22,420
You have to download code that makes up the page.

146

00:11:22,510  -->  00:11:25,760
So its slow because you have to download things.

147

00:11:26,230  -->  00:11:31,900
If you refreshed the page and the contents should be exactly the same it means that your computer doesn't

148

00:11:31,900  -->  00:11:33,500
have to download things.

149

00:11:33,520  -->  00:11:37,010
You can just reuse them because it's got them in memory.

150

00:11:37,180  -->  00:11:39,970
That's the cache.

151

00:11:40,270  -->  00:11:44,820
Finally the rest API should be a uniform interface.

152

00:11:45,070  -->  00:11:51,460
And what that means is that your client the computer doesn't have to always communicate with the same

153

00:11:51,460  -->  00:11:52,500
server.

154

00:11:53,000  -->  00:11:57,830
There can be many servers and it doesn't matter which when you communicate with because they are all

155

00:11:57,820  -->  00:12:00,700
the same they are all uniform.

156

00:12:01,900  -->  00:12:03,050
OK.

157

00:12:04,030  -->  00:12:07,100
So that was a bit of theory as to what rest is.

158

00:12:07,250  -->  00:12:13,170
And to remember it is just an interaction between client server is just an interface between a client

159

00:12:13,170  -->  00:12:14,890
or a computer and a server.

160

00:12:15,110  -->  00:12:17,530
And it does things like be stateless.

161

00:12:17,530  -->  00:12:19,290
The server doesn't know who you are.

162

00:12:19,480  -->  00:12:25,930
It is cashable meaning the response should be identical if done immediately again and it is a uniform

163

00:12:25,930  -->  00:12:33,220
interface which means if the server is not just one server but many it doesn't matter which one you

164

00:12:33,220  -->  00:12:35,190
are asking.

165

00:12:35,750  -->  00:12:38,530
That goes well into play with a fire that is stateless.

166

00:12:38,530  -->  00:12:41,790
And it doesn't know who you are because it is a uniform interface.

167

00:12:42,010  -->  00:12:45,510
Your client can then ask any server none of them know who you are.

168

00:12:45,730  -->  00:12:47,130
And that's fine.

169

00:12:47,920  -->  00:12:49,420
OK so what do they look like.

170

00:12:49,480  -->  00:12:56,230
Because all that theory doesn't really have any meaning until you see some examples before looking at

171

00:12:56,320  -->  00:12:59,080
what rest really looks like.

172

00:12:59,120  -->  00:13:01,390
Let me introduce you to hate TDP.

173

00:13:01,750  -->  00:13:07,990
You may not know what hatred's to be is but it is a set of rules we use in our day to day to transfer

174

00:13:08,000  -->  00:13:09,830
data over the internet.

175

00:13:10,060  -->  00:13:15,610
Stands for hypertext transfer protocol and we use it all the time.

176

00:13:15,620  -->  00:13:22,390
Whenever you go on google chrome and you go on our website you were doing a TDP request.

177

00:13:22,620  -->  00:13:34,270
You are asking for a web page using HTP and it looks like that it looks like a verb the version and

178

00:13:34,270  -->  00:13:35,960
then what you're requesting.

179

00:13:36,730  -->  00:13:38,440
In this case the verb is get.

180

00:13:38,570  -->  00:13:41,850
You're asking to retrieve something.

181

00:13:42,110  -->  00:13:45,840
The version is AGP version 2 which is the most recent version.

182

00:13:45,940  -->  00:13:51,280
And finally the Uniform Resource identifier the website you're requesting.

183

00:13:51,280  -->  00:13:58,240
In this case if you use Google Chrome to go to w w w dot API dot example dot com.

184

00:13:58,450  -->  00:14:00,590
Google Chrome is doing this.

185

00:14:01,060  -->  00:14:09,190
Google Chrome is doing get hated to be slashed to w w w dot API or exampled dot com that gets sent to

186

00:14:09,190  -->  00:14:16,960
the server which is hosting w w w dot API for example dot com so the server receives all of this stuff

187

00:14:17,080  -->  00:14:25,070
and says OK this client wants this page here and they want it using get.

188

00:14:25,100  -->  00:14:26,800
So then the server can do something with it.

189

00:14:26,830  -->  00:14:31,870
We don't know what just yet but we're going to look into them.

190

00:14:33,500  -->  00:14:35,200
So is that an API.

191

00:14:35,870  -->  00:14:38,320
No that is what the browser does to as an API.

192

00:14:38,500  -->  00:14:43,060
I rest where API has to be able to respond to that which is what I just mentioned.

193

00:14:43,100  -->  00:14:48,660
So the rest may be and usually look like this.

194

00:14:48,730  -->  00:14:53,040
Let's have a table with a few verbs.

195

00:14:53,330  -->  00:14:55,630
So as we saw get just before.

196

00:14:55,810  -->  00:15:02,710
There's also other verbs like put post and delete when you access a web page using Google Chrome for

197

00:15:02,710  -->  00:15:05,400
example or Safari or Firefox.

198

00:15:05,440  -->  00:15:08,180
What you are doing is at get request.

199

00:15:08,330  -->  00:15:13,090
So say for example you want to access API for example dot com slash.

200

00:15:13,120  -->  00:15:22,690
Use a rest API would interpret this request like so if you use a guest a guest.

201

00:15:22,690  -->  00:15:30,940
Sorry that would tell the API that you most likely want to get a list of users because of the slash

202

00:15:31,150  -->  00:15:32,270
users at the end

203

00:15:35,940  -->  00:15:42,330
if you were to use that put verb it would tell the API to replace the entire collection of users which

204

00:15:42,330  -->  00:15:49,350
is the Slahi users with another collection of users that you are sending as well.

205

00:15:49,350  -->  00:15:55,530
If you use post it would expect you to be sending information to add a new user to the users list or

206

00:15:55,530  -->  00:15:56,780
collection.

207

00:15:57,050  -->  00:16:03,030
And if you send a verb with a delete it would delete the entire user's collection.

208

00:16:03,030  -->  00:16:11,030
So what am I talking about here is the sort of web page that you are accessing.

209

00:16:11,880  -->  00:16:20,010
And depending on the verb that you use the program that is giving you that web page can perform one

210

00:16:20,010  -->  00:16:22,260
of various actions.

211

00:16:22,770  -->  00:16:24,720
This thing here is the API.

212

00:16:25,200  -->  00:16:34,530
It would allow you to interact with the users of API for example dot com but instead of using slashy

213

00:16:34,530  -->  00:16:40,890
users we could do something else like Slash users slash one to three for example if we were accessing

214

00:16:40,920  -->  00:16:45,900
user with identification number one to three and that would.

215

00:16:46,330  -->  00:16:53,310
And if you use get retrieve the user with ID 1 2 3 if you use put replace the user with ID 1 to 3 with

216

00:16:53,310  -->  00:16:56,150
another user or create one if it doesn't exist.

217

00:16:56,400  -->  00:17:01,690
If you use post it's not usually done because you would expect the user to already exist.

218

00:17:01,950  -->  00:17:06,650
If you use delete you would be deleting the user with ID 1 to 3.

219

00:17:07,000  -->  00:17:13,800
Notice that I'm talking about this in a prescriptive manner but it doesn't have to be like that.

220

00:17:14,040  -->  00:17:22,380
Instead of slashy users you could have for example Shlash customers or slash students or slash user

221

00:17:22,380  -->  00:17:31,310
without the apps the API itself defines what these you are Rail's what your eyes look like.

222

00:17:31,530  -->  00:17:35,480
So it doesn't have to be a piano sample or locums slash users.

223

00:17:35,490  -->  00:17:41,260
It can be Twitter dot com slash friends for example of com slash followers.

224

00:17:41,460  -->  00:17:42,610
It can be anything.

225

00:17:42,770  -->  00:17:49,680
What matters here is that you're accessing a specific end point a specific you are ill with a specific

226

00:17:49,680  -->  00:17:57,210
verb and this is what might happen when you do that whether the Twitter API and similarly other replies

227

00:17:57,540  -->  00:17:59,240
will tell you exactly what will happen.

228

00:17:59,250  -->  00:18:03,430
This is only what might happen.

229

00:18:03,450  -->  00:18:06,400
Another example you might want to access some items on.

230

00:18:06,420  -->  00:18:11,670
If the API has the endpoint slash items then here's what might happen.

231

00:18:11,700  -->  00:18:16,560
You could get a list of items you could replace the entire collection of items with another collection

232

00:18:17,400  -->  00:18:19,790
you could add a new item to the items collection.

233

00:18:19,800  -->  00:18:23,750
If you use post or you could delete the entire collection if you use delete.

234

00:18:24,450  -->  00:18:31,900
OK so these are all fairly normal examples of what address API might have.

235

00:18:31,900  -->  00:18:37,640
It might have the user's collection it might have a specific user or that you can access in there.

236

00:18:37,800  -->  00:18:44,170
It might have items similarly could have other things like stores that could have friends.

237

00:18:44,160  -->  00:18:49,410
It could have tweets it could have status updates it could have anything and you could use these verbs

238

00:18:49,410  -->  00:18:51,290
to interact with the API.

239

00:18:51,450  -->  00:18:58,050
If the API allows you to use these verbs so the API has to give you the possibility to for example to

240

00:18:58,320  -->  00:19:03,560
delete which they often don't because it is dangerous and you can delete data.

241

00:19:04,590  -->  00:19:10,010
Let's look at a final example of an endpoint which would be in this case.

242

00:19:10,050  -->  00:19:16,790
Slash auth slash logging what make this end point do.

243

00:19:17,550  -->  00:19:25,380
And normally this endpoint in an API will be called slash or slash logon or maybe slash or maybe slash

244

00:19:25,440  -->  00:19:26,550
off.

245

00:19:26,760  -->  00:19:33,240
It can be called a number of things but it usually does the same thing which is allow you as a user

246

00:19:33,450  -->  00:19:36,810
to log in to the system.

247

00:19:37,860  -->  00:19:45,330
The guest is probably not used and the reason why is probably not used is because in order to log in

248

00:19:45,330  -->  00:19:51,200
to a service you have to send some data to it such as your username and your password.

249

00:19:51,270  -->  00:19:55,140
A get is used to retrieve data so it's probably not used.

250

00:19:55,140  -->  00:20:00,210
In this case because in order to log in we need to send data get is used to retrieve data.

251

00:20:00,270  -->  00:20:02,640
So we're not sending things.

252

00:20:02,810  -->  00:20:08,190
Port is probably not used because it is used to replace things and in this case we don't want to replace

253

00:20:08,190  -->  00:20:13,200
anything we just want to send somebody out and have it do something the normal thing to do when we're

254

00:20:13,200  -->  00:20:21,980
sending Nitta is to use a post and in this case the poster will use it in the request to authenticate

255

00:20:22,070  -->  00:20:23,350
a user.

256

00:20:24,050  -->  00:20:27,190
But remember the server does not know who you are.

257

00:20:27,200  -->  00:20:32,280
So you have to send the data that authenticates you have to send data related to you.

258

00:20:32,750  -->  00:20:34,930
So this is what that data might be.

259

00:20:35,090  -->  00:20:40,580
We can send it is as Jason for example and it could be something like email is email or example dot

260

00:20:40,580  -->  00:20:42,800
com password is 1 2 3 4.

261

00:20:43,070  -->  00:20:45,660
So we could send this data to the server.

262

00:20:45,920  -->  00:20:53,900
And then if the server is programmed to accept data in this format it could verify that and a user with

263

00:20:53,900  -->  00:20:58,770
this e-mail account exists and that the password is correct for it.

264

00:20:58,860  -->  00:21:01,970
Finally delete is probably not used either.

265

00:21:03,080  -->  00:21:05,290
I'm giving you a lot of information in this lecture.

266

00:21:05,570  -->  00:21:09,020
But don't worry about retaining absolutely everything.

267

00:21:09,080  -->  00:21:14,570
We're going to be looking at more examples and we're going to be using the Twitter API over the next

268

00:21:14,880  -->  00:21:19,150
section so we're going to be looking at these a lot more in detail.

269

00:21:20,090  -->  00:21:26,240
Here's some examples of what the Twitter API does give you the examples in the last slide were just

270

00:21:26,330  -->  00:21:29,710
examples of what an API might look like.

271

00:21:29,780  -->  00:21:34,700
In this case we're going to look at specific examples that do exist.

272

00:21:35,120  -->  00:21:37,290
The first the first one is Gantt.

273

00:21:37,620  -->  00:21:42,950
And what you can get is direct underscore messages slash sent dot Jason.

274

00:21:42,980  -->  00:21:50,660
So if you request that Twitter API which is something like API dot dot com then you would expect to

275

00:21:50,660  -->  00:21:55,860
receive back the direct messages that you have sent.

276

00:21:56,780  -->  00:22:02,230
Another endpoint is the friends slash list not Jason.

277

00:22:02,240  -->  00:22:08,170
And once again you would expect to receive back a list of your friends.

278

00:22:08,210  -->  00:22:11,150
Another one is followers slash IDs that Jason.

279

00:22:11,420  -->  00:22:19,370
And here you probably might expect to receive back the IDs the identifiers of your followers.

280

00:22:19,430  -->  00:22:24,090
There's also another one which is search slash tweets dot Jason.

281

00:22:24,500  -->  00:22:31,430
And then at the end you've also got a question mark and then a Q and then as a equals and then he says

282

00:22:31,430  -->  00:22:34,660
computers and filter Colan images.

283

00:22:34,790  -->  00:22:35,480
So what.

284

00:22:35,480  -->  00:22:36,540
What is that.

285

00:22:36,950  -->  00:22:40,230
Well search slash tweets don't Jason.

286

00:22:40,280  -->  00:22:46,210
You probably expect them to be searching among tweets right at the end.

287

00:22:46,220  -->  00:22:47,710
Well you've gone after the question mark.

288

00:22:47,720  -->  00:22:56,630
That's called a query string parameter equidistant parameter can be passed in a get request and they

289

00:22:56,630  -->  00:22:59,100
can give the server some information.

290

00:22:59,210  -->  00:23:02,350
In this case the information we're giving the server is.

291

00:23:02,420  -->  00:23:09,250
Q equals and then the contents of Q Are computers and filter Colan images.

292

00:23:09,500  -->  00:23:16,560
So what that is doing is it's searching for tweets where the tweets contains the word computers and

293

00:23:16,880  -->  00:23:18,540
it has an image.

294

00:23:18,710  -->  00:23:23,070
So that's how we can search tweets using Twitter.

295

00:23:24,590  -->  00:23:26,620
So the Twitter API has a lot of endpoints.

296

00:23:26,780  -->  00:23:30,680
And in this section we're going to be looking at a couple of them just to learn how to interact with

297

00:23:30,680  -->  00:23:31,470
web API.

298

00:23:31,490  -->  00:23:39,440
And that's really important nowadays because we are constantly interacting with where API is whenever

299

00:23:39,440  -->  00:23:44,300
you see a loggin with Twitter but in log in with Facebook logon Google Plus.

300

00:23:44,300  -->  00:23:46,860
Those are all using web API.

301

00:23:47,840  -->  00:23:56,240
Whenever you do things like a request or weather data in your phone that weather data is coming from

302

00:23:56,240  -->  00:24:03,000
a web API whenever you get your e-mail that's coming in from a web API whenever you play a game on your

303

00:24:02,990  -->  00:24:08,710
phone that's interacting with the game servers using web API is where we are everywhere.

304

00:24:08,810  -->  00:24:13,470
It's important that you know how to interact with them and how they work to some extent.

305

00:24:14,660  -->  00:24:19,160
So Twitter authentication that's kind of the focus of this section we're going to be authenticating

306

00:24:19,160  -->  00:24:21,870
with Twitter and allowing users to log in.

307

00:24:22,490  -->  00:24:28,940
Something very common is things like logging with Twitter button and you've got Twitter Facebook Google

308

00:24:28,940  -->  00:24:31,200
and up a bunch of others as well.

309

00:24:32,000  -->  00:24:34,400
And this model of authorization.

310

00:24:34,490  -->  00:24:40,090
The fact that you can press a button and then a few steps that happen after you press the button.

311

00:24:40,190  -->  00:24:49,970
All that is called all off and off is Kanneh a few steps that you have to follow in order to log in

312

00:24:49,970  -->  00:24:52,380
with Twitter Facebook Google et cetera.

313

00:24:52,760  -->  00:24:58,100
We're going to be looking at in this section how to log in with Twitter but you can apply that knowledge

314

00:24:58,110  -->  00:25:00,260
for a number of other providers.

315

00:25:00,710  -->  00:25:06,440
While we learn how to log in with Twitter we're going to be learning about web API how we can interact

316

00:25:06,440  -->  00:25:13,610
with them and in the end we're going to be getting out of this section is a app that will allow us to

317

00:25:13,610  -->  00:25:20,240
retrieve an image gallery from Twitter so we can browse Twitter images like that.

318

00:25:20,240  -->  00:25:29,120
And the learning we're going to be doing is to do with web API use rest off and storing things in databases

319

00:25:29,240  -->  00:25:30,060
once again.

320

00:25:30,290  -->  00:25:32,540
So it's going to be quite jampacked with knowledge.

321

00:25:32,570  -->  00:25:34,830
So I'm excited about it and I'll see you in the next video
