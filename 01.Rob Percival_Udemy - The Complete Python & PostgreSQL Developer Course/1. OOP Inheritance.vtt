WEBVTT
1

00:00:01.060  -->  00:00:06.160
Hi will come back in this section we're going to be looking at some more advanced Python.

2

00:00:06.210  -->  00:00:09.980
But first of all let me congratulate you on getting this far.

3

00:00:10.380  -->  00:00:16.560
Hopefully you've learned quite a lot about Python but also about Pascola sequel interaction with databases

4

00:00:16.680  -->  00:00:22.890
software development as a whole using API as web development just a bit of everything and hopefully

5

00:00:22.890  -->  00:00:27.700
that gives you a bit more breadth in your software development.

6

00:00:27.700  -->  00:00:33.990
However it is obvious that there are a lot of things that we haven't covered so this section is going

7

00:00:33.990  -->  00:00:41.400
to cover more advanced concepts in Python and we're going to start these first few videos covering object

8

00:00:41.400  -->  00:00:47.490
oriented programming just in a bit more depth just to give you a bit more knowledge regarding object

9

00:00:47.520  -->  00:00:50.370
oriented programming.

10

00:00:50.380  -->  00:00:55.850
Now we've looked at classes already but we've not looked at something that's really important Doherty's

11

00:00:55.920  -->  00:01:08.070
inheritance inheritance is this thing that you may not use very often but it gives you such power and

12

00:01:08.100  -->  00:01:09.330
clean code.

13

00:01:09.480  -->  00:01:17.300
When the moment is right to use it that it would be very silly not to explain it's in this course.

14

00:01:18.090  -->  00:01:20.490
Let's create a new project which I have done here.

15

00:01:20.490  -->  00:01:21.270
Sorry about that.

16

00:01:21.300  -->  00:01:25.170
The new project created my virtual environment for it.

17

00:01:25.170  -->  00:01:29.820
I'm not sure if we're going to be using any libraries in this project but nevertheless creating a new

18

00:01:29.820  -->  00:01:34.390
project just to show you guys a few of these examples.

19

00:01:34.770  -->  00:01:39.240
And the first thing I'm going to do in this project is create a new Python package and I'm going to

20

00:01:39.240  -->  00:01:40.700
call it o p.

21

00:01:40.980  -->  00:01:45.350
And here I'm going to be writing the examples of object oriented programming.

22

00:01:46.680  -->  00:01:48.870
I'm going to get a new python file inside that folder.

23

00:01:48.900  -->  00:01:52.380
I'm going to call it inheritance in TRA.

24

00:01:53.280  -->  00:02:00.900
Normally when teachers start explain inheritance and you may have found this if you looked at other

25

00:02:00.900  -->  00:02:08.310
courses before this one the usual example is a class animal name and then this animal doesn't really

26

00:02:08.310  -->  00:02:15.360
do much normally and then it's like dogs and cats and you get those examples but they're not very useful

27

00:02:15.450  -->  00:02:19.720
nor very often are you going to be creating classes for animals and dogs and cats.

28

00:02:19.740  -->  00:02:25.520
So I'm not going to go down that route of explaining inheritance using animals instead.

29

00:02:25.530  -->  00:02:28.800
I'm going to give you a reasonably useful example.

30

00:02:28.800  -->  00:02:33.300
Now this is not the most usual example in the world but I think this is actually something you could

31

00:02:33.300  -->  00:02:39.430
potentially require or at least something similar at some point in your careers.

32

00:02:39.540  -->  00:02:46.180
I'm going to start with a class decimal and this class is going to represent a decimal number.

33

00:02:46.620  -->  00:02:52.980
And as you know decimal numbers sometimes should only be printed to a certain number of decimal places

34

00:02:53.070  -->  00:02:54.440
for example.

35

00:02:54.720  -->  00:03:01.020
A currency should only be printed to two small places normally and other numbers should be printed to

36

00:03:01.020  -->  00:03:05.550
more decimal places some numbers should be printed to 0 decimal places others to one.

37

00:03:06.020  -->  00:03:14.940
So this class decimal is going to represent a decimal number and also the number of decimal places which

38

00:03:15.000  -->  00:03:17.320
it is printed to.

39

00:03:17.590  -->  00:03:24.840
I'm going to define an in its method and here I'm going to put in the number and also the police as

40

00:03:24.840  -->  00:03:31.300
the number of places in the that after the decimal point self-taught number equals number itself the

41

00:03:31.320  -->  00:03:33.690
places equals places.

42

00:03:33.930  -->  00:03:43.410
Now when we print a object of this class we are going to do so using the wrapper method as we know and

43

00:03:43.410  -->  00:03:51.850
what we are going to be putting here is return present not to f.

44

00:03:51.990  -->  00:03:53.880
And this Shafton number.

45

00:03:54.360  -->  00:03:58.380
Now I'm going to give you an example and ask you what do you think is going to get printed out.

46

00:03:58.380  -->  00:04:06.760
If I do print decimal fifteen point six seven eight nine and two places or three places.

47

00:04:07.890  -->  00:04:10.510
So what I'm creating here is an object of typed decimal.

48

00:04:10.680  -->  00:04:14.910
Fifteen point six seven eight nine is the number three is the places.

49

00:04:15.300  -->  00:04:20.470
And when I printed this out you know the wrapper method is going to get cold.

50

00:04:20.520  -->  00:04:22.650
What do you think is going to get printed out.

51

00:04:22.650  -->  00:04:31.540
Forget about what I'm saying just look at the code and give it a wild guess.

52

00:04:32.160  -->  00:04:38.620
OK hopefully you said fifteen point sixty eight and that is because this too.

53

00:04:38.630  -->  00:04:44.250
There you may have guessed is the number of decimal places that is going to get printed out.

54

00:04:44.250  -->  00:04:46.070
Now I wouldn't expect you to know that.

55

00:04:46.290  -->  00:04:48.630
Well you could have given it a wild guess.

56

00:04:48.630  -->  00:04:49.790
Let's run this.

57

00:04:50.100  -->  00:04:52.860
And then indeed we get fifteen point sixty eight to this too.

58

00:04:52.860  -->  00:04:59.470
There is the number of decimal places that are getting printed out and this and this format there is

59

00:04:59.470  -->  00:05:04.410
the format to print out floating point numbers.

60

00:05:04.620  -->  00:05:08.030
So you do percent not too.

61

00:05:08.040  -->  00:05:12.510
And then there's a number of them are places and the F is for floating point ninety two percent self

62

00:05:12.500  -->  00:05:14.150
on them.

63

00:05:14.400  -->  00:05:17.520
So this would print a floating point number two to the.

64

00:05:18.100  -->  00:05:25.860
But instead of the two we're going to do dot format self-taught places and where this is going to do

65

00:05:26.040  -->  00:05:29.850
it is going to replace that for a number of places that we've given it.

66

00:05:30.300  -->  00:05:35.760
And then it's going to get all that and it's going to do the formatting like that.

67

00:05:35.750  -->  00:05:40.620
So we're using two different types of string formatting in the same place which may not be the best

68

00:05:40.620  -->  00:05:43.990
thing to do but nevertheless it's quite concise and it's quite nice to do.

69

00:05:44.200  -->  00:05:50.490
And it's a bit more difficult to do using only format because we have to apply this first and then apply

70

00:05:50.520  -->  00:05:52.100
any other formatting after that.

71

00:05:52.110  -->  00:05:59.100
So it's not it is easy to do using only the format method using these two separate pipes of string formatting

72

00:05:59.120  -->  00:06:00.830
makes it quite concise.

73

00:06:01.170  -->  00:06:05.730
OK what do you think is going to get printed out at this time.

74

00:06:07.560  -->  00:06:12.770
Now I'd hope that you would see the three is going into places which is going into softer places.

75

00:06:12.900  -->  00:06:19.160
So this thing here is going to be three which should mean that we'll get fifteen point six seven nine

76

00:06:19.500  -->  00:06:26.310
because the nine rounded up so the nine should be in there and that is indeed what we get.

77

00:06:26.790  -->  00:06:32.040
OK but I still haven't gotten to the interesting part which is inheritance and I agree with you I have

78

00:06:32.040  -->  00:06:32.980
not.

79

00:06:33.300  -->  00:06:35.620
But we're going to get there just now.

80

00:06:36.120  -->  00:06:42.420
Decimals are very useful and now we have a way to kind of print decimals out easily and to a certain

81

00:06:42.420  -->  00:06:44.030
number of decimal places.

82

00:06:44.280  -->  00:06:44.750
OK.

83

00:06:45.090  -->  00:06:46.300
That's nice.

84

00:06:46.320  -->  00:06:50.440
It's not the most useful thing because we could just use that right.

85

00:06:50.620  -->  00:06:56.730
However it becomes more useful when things start happening seemingly magically.

86

00:06:56.730  -->  00:06:58.330
Let me give you an example.

87

00:06:58.470  -->  00:07:03.330
Class currency and this class currency currency was always a decimal.

88

00:07:03.450  -->  00:07:08.280
Sometimes it's sort of 10.00 but it's still a decimal right.

89

00:07:08.280  -->  00:07:13.530
So this class currency is going to be inheriting from decimal.

90

00:07:13.860  -->  00:07:16.260
So something we've not seen before.

91

00:07:16.250  -->  00:07:23.120
We're going to put the decimal class inside brackets after currency which is our class.

92

00:07:24.000  -->  00:07:24.290
OK.

93

00:07:24.300  -->  00:07:29.000
And I'm just going to type pass and pass as you know means nothing new here.

94

00:07:29.040  -->  00:07:29.340
Right.

95

00:07:29.340  -->  00:07:31.760
Do nothing inside here in this block.

96

00:07:32.000  -->  00:07:34.960
So it's class currency there's nothing.

97

00:07:35.700  -->  00:07:39.280
Except it does everything that the decimal class does.

98

00:07:39.360  -->  00:07:42.780
That's what inheritance it's all of the things.

99

00:07:42.780  -->  00:07:44.200
Decimal can do.

100

00:07:44.630  -->  00:07:45.970
And all of the properties.

101

00:07:45.990  -->  00:07:50.150
Decimal has now currency has.

102

00:07:50.160  -->  00:07:58.030
So effectively we could just replace this decimal there for currency.

103

00:07:58.380  -->  00:08:01.710
And as you can see the difference is absolutely none.

104

00:08:01.910  -->  00:08:07.980
Works the same way because currency is inheriting from decimal it's getting all of the properties and

105

00:08:07.980  -->  00:08:09.630
methods from decimal.

106

00:08:09.620  -->  00:08:15.040
And because it doesn't have anything in there it's just essentially a copy of it.

107

00:08:15.660  -->  00:08:17.130
And now you're saying well that's not very useful.

108

00:08:17.120  -->  00:08:18.870
Might as well just use decimal right.

109

00:08:19.090  -->  00:08:21.960
Because I mean what's the point.

110

00:08:22.590  -->  00:08:23.720
And you would be right.

111

00:08:23.970  -->  00:08:27.330
But inheritance is just like in nature.

112

00:08:27.750  -->  00:08:32.170
You know you have the the dog and then there's this.

113

00:08:32.250  -->  00:08:37.810
2000 I may have a kid now or a pop and then the pope has traits from both.

114

00:08:37.860  -->  00:08:38.350
Right.

115

00:08:38.610  -->  00:08:44.650
Or potentially it even develops some new traits and we can do the same here in this class.

116

00:08:44.660  -->  00:08:51.370
We can actually add to the decimal class without modifying decimal class.

117

00:08:51.600  -->  00:08:58.800
So I'm going to create an innate method inside currency and this innate method.

118

00:08:58.800  -->  00:09:03.210
Notice how if I say pass here that there's a yellow page I'm doesn't like this.

119

00:09:03.480  -->  00:09:12.290
It tells me cold to init of superclass is missed it's saying this class currency has superclass a parent

120

00:09:12.300  -->  00:09:12.600
class.

121

00:09:12.600  -->  00:09:13.460
The same thing.

122

00:09:13.980  -->  00:09:16.700
But in the end it's a method which is the constructor.

123

00:09:16.830  -->  00:09:24.960
You are ignoring the superclass which means that the number and self places aren't going to have a value

124

00:09:25.030  -->  00:09:25.640
.

125

00:09:26.070  -->  00:09:27.660
So we can do that.

126

00:09:27.650  -->  00:09:45.210
We have to pass in here number and places and then we have to say super dot unit number and places so

127

00:09:45.210  -->  00:09:50.420
what this is doing is it's getting the superclass which is decimal and it's calling the init method

128

00:09:50.420  -->  00:09:54.980
of the superclass passing it in the number of the places.

129

00:09:54.990  -->  00:10:00.100
So now when we run this it's going to be exactly the same again.

130

00:10:00.360  -->  00:10:03.890
OK so I'll show you a slight difference.

131

00:10:04.110  -->  00:10:06.720
I can do number minus one for example.

132

00:10:07.280  -->  00:10:11.540
And then when we press play this fifteen point six seven eight nine it's going to go to the currencies

133

00:10:11.540  -->  00:10:17.810
in its method and then it's going to go into the decimals in its method but minus one should we should

134

00:10:17.810  -->  00:10:21.620
see 14 printed out there and we do.

135

00:10:22.380  -->  00:10:28.630
OK so now you see sort of the flow of these and how it's going something currencies have as well that

136

00:10:28.640  -->  00:10:32.580
decimal numbers don't have our symbols symbol.

137

00:10:33.170  -->  00:10:40.890
And I'm going to add that in as a parameter to the init method and I'm going to add it in here as well

138

00:10:40.880  -->  00:10:41.470
.

139

00:10:42.050  -->  00:10:43.710
Inside the init method of currency.

140

00:10:43.740  -->  00:10:47.890
But notice that is not only init method of decimal.

141

00:10:48.840  -->  00:10:52.400
So now I should add a symbol here at the front.

142

00:10:52.400  -->  00:10:57.600
For example I'm going to add the pound symbol.

143

00:10:57.620  -->  00:11:01.840
Notice that I can still print in the decimal.

144

00:11:04.670  -->  00:11:09.340
I can still print a decimal without a symbol but now the currency doesn't need the same.

145

00:11:09.840  -->  00:11:15.690
If I Pressplay though we're not going to see the symbol anywhere because the decimal is the class that

146

00:11:15.680  -->  00:11:20.180
has the representation the currency does not have a representation.

147

00:11:20.220  -->  00:11:24.550
And here in the decimal we don't have a symbol printed out anyway.

148

00:11:25.550  -->  00:11:31.920
OK so what we have to do now is overwrite the Reppert method.

149

00:11:31.910  -->  00:11:39.310
And what we're going to do is say return two of these brackets format.

150

00:11:39.360  -->  00:11:42.270
Now I'll let you guess what's going to go in here.

151

00:11:43.080  -->  00:11:46.790
We want to print the pound symbol.

152

00:11:47.270  -->  00:11:57.420
And then this output I would recommend really stopping and having to think about what I mean and give

153

00:11:57.480  -->  00:11:58.340
it a go.

154

00:11:58.380  -->  00:12:05.460
How would you do that knowing that this has to be there.

155

00:12:06.170  -->  00:12:08.150
I hope you gave it a go it's a good way to.

156

00:12:08.150  -->  00:12:10.370
Can I try to get your head around things.

157

00:12:10.520  -->  00:12:15.560
What I put here is self-assemble first that property is here in the currency.

158

00:12:15.570  -->  00:12:19.040
But after that I would do super dot wrapper

159

00:12:22.620  -->  00:12:29.100
and that calls the superclasses repr method which then uses cells or places and stuff that number to

160

00:12:29.110  -->  00:12:32.540
printout the currents the decimal place.

161

00:12:32.540  -->  00:12:38.390
So now when we print this out what we get when we print the currency out is the symbol in front when

162

00:12:38.390  -->  00:12:43.430
we print the decimal out no symbol in front because we're calling this method up there when we print

163

00:12:43.430  -->  00:12:44.170
the currency.

164

00:12:44.180  -->  00:12:47.480
We're calling this method down here.

165

00:12:47.610  -->  00:12:52.000
So this was a quick intro to inheritance.

166

00:12:52.030  -->  00:12:56.010
And as you can see the currency class is inheriting from decimal.

167

00:12:56.180  -->  00:12:57.800
And then we are overwriting it.

168

00:12:57.870  -->  00:12:59.780
We can add more methods to it if we wanted.

169

00:12:59.780  -->  00:13:04.000
By the way am I had currency.

170

00:13:04.080  -->  00:13:12.240
And here we could have another sort of currency here we could do something like exchange between currencies

171

00:13:12.240  -->  00:13:15.200
.

172

00:13:15.500  -->  00:13:21.350
There's a lot of things we could do and this method would not be available in the pessimal class because

173

00:13:21.360  -->  00:13:23.750
it is created inside the currency class.

174

00:13:23.750  -->  00:13:33.240
However if we do the opposite when we do add here this added method would be available to the currency

175

00:13:33.240  -->  00:13:36.100
class because it is part of the parent class.

176

00:13:36.250  -->  00:13:36.530
OK.

177

00:13:36.530  -->  00:13:45.180
So to recap the base class which is decimal lends all of its methods and properties to the children

178

00:13:45.170  -->  00:13:49.510
class the children classes such as currency.

179

00:13:49.670  -->  00:13:52.650
So currency inherits all of the stuff from decimal.

180

00:13:52.910  -->  00:14:01.270
But then you can add more and those things do not feed back to the parent class.

181

00:14:01.530  -->  00:14:02.030
Okay.

182

00:14:02.250  -->  00:14:03.230
Thats everything for this video.

183

00:14:03.240  -->  00:14:05.180
Hope you enjoy that maybe learn something.

184

00:14:05.390  -->  00:14:11.130
And now we're covering a bit more advanced stuff but I'm trying to not make it complicated.

185

00:14:11.120  -->  00:14:13.660
I just want to show you that these things exist.

186

00:14:13.670  -->  00:14:18.150
So maybe later on on the line when you encounter a situation where you might to be able to use this

187

00:14:18.930  -->  00:14:24.190
you'll think ah I could use inheritance here and that will simplify the code.

188

00:14:24.530  -->  00:14:25.710
So that's the aim.

189

00:14:25.700  -->  00:14:26.860
Hope you enjoy that.

190

00:14:26.880  -->  00:14:27.940
I see you in the very next video
