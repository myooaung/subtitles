WEBVTT
1

00:00:00.630  -->  00:00:07.710
Hi welcome back in this video we're looking at creating a stack and a stack is really just identical

2

00:00:07.710  -->  00:00:14.460
to a AQ except it happens kind of in the reverse order or rather the removal or the addition happen

3

00:00:14.610  -->  00:00:16.250
in the wrong place.

4

00:00:16.530  -->  00:00:22.800
So what is the stack as you said the stack is just like a Q but instead of being first in first out

5

00:00:23.310  -->  00:00:25.200
it is last in first out.

6

00:00:25.200  -->  00:00:30.050
What does that mean in a cue when you arrive first on the cue.

7

00:00:30.330  -->  00:00:32.630
You would expect to be served first.

8

00:00:32.960  -->  00:00:34.360
What is in a stack.

9

00:00:34.360  -->  00:00:36.400
It is the last person arriving.

10

00:00:36.570  -->  00:00:39.070
The one that served next.

11

00:00:39.090  -->  00:00:42.140
So if you arrive first you probably get served.

12

00:00:42.270  -->  00:00:47.070
But then if you arrive once someone else is being served you're going to be waiting someone else is

13

00:00:47.070  -->  00:00:49.290
going to arrive and they are going to be served.

14

00:00:49.290  -->  00:00:52.410
And as someone else is going to arrive and they're going to be served so you're never going to get served

15

00:00:52.740  -->  00:00:58.100
unless nobody else is left in me in the stack essentially.

16

00:00:58.680  -->  00:01:02.520
Let's have a look at it visually and in a moment anyway what is a stag do then.

17

00:01:02.790  -->  00:01:07.410
Well you can add elements at the beginning of the stack and then you can remove them from the beginning

18

00:01:07.410  -->  00:01:08.260
.

19

00:01:08.370  -->  00:01:15.070
So whenever somebody adds itself to the stack we are going to remove that person first.

20

00:01:15.070  -->  00:01:23.070
We can also tell us its size and print itself out in our application and remember the end or the beginning

21

00:01:23.070  -->  00:01:23.160
.

22

00:01:23.160  -->  00:01:24.080
It doesn't matter.

23

00:01:24.300  -->  00:01:31.470
Instead of both adding and removing from the beginning we can just add and remove from the end as long

24

00:01:31.470  -->  00:01:36.530
as both operations happen on the same end of the stack is going to end up being the same.

25

00:01:36.540  -->  00:01:39.930
It doesn't matter what we call the beginning or what we call the end.

26

00:01:39.930  -->  00:01:44.190
So in this rigid explanation we're going to be adding at the end and then we're going to be removed

27

00:01:44.190  -->  00:01:44.840
from the end.

28

00:01:44.970  -->  00:01:46.860
So let's first add our first element.

29

00:01:46.990  -->  00:01:51.850
Going to be 15 and then just like in a cue we're going to be adding at the end of the stack.

30

00:01:51.910  -->  00:01:56.550
We're going to be adding 31 of them 1 5 1 and so on and so on.

31

00:01:57.120  -->  00:02:02.370
And then normally with the Q The first element to go with the first one in the queue is 50.

32

00:02:02.640  -->  00:02:04.650
But in a stack it happens the other way round.

33

00:02:04.680  -->  00:02:06.850
The removal is also from the end.

34

00:02:07.410  -->  00:02:10.160
So we remove the last element first.

35

00:02:11.330  -->  00:02:11.970
OK.

36

00:02:12.300  -->  00:02:17.610
So instead of new elements being added and then being removed from the front new elements are added

37

00:02:17.730  -->  00:02:20.670
and then they're removed from the pack.

38

00:02:20.760  -->  00:02:25.260
So once again we add elements at the beginning and they would remove them from the beginning as well

39

00:02:25.380  -->  00:02:27.660
or both from the end.

40

00:02:27.690  -->  00:02:35.640
You can find that size and print itself to add nodes which just make the new node points to the current

41

00:02:35.640  -->  00:02:38.150
head make the head of the stack the new node.

42

00:02:38.210  -->  00:02:43.850
So just like we did with the linked list class where they added to list method would add Nuno.

43

00:02:43.950  -->  00:02:51.050
At the beginning and to remove nodes we make the head of the stack be the second note in the stack.

44

00:02:51.090  -->  00:02:58.080
So instead of traveling to the end and removing by the second to last node we're going to just make

45

00:02:58.080  -->  00:03:04.730
the head of the stack instead of being the hand we're going to point the hand to the second note.

46

00:03:04.950  -->  00:03:10.680
That way we are skipping the first note and it gets erased from our computers memory by Python.

47

00:03:10.680  -->  00:03:16.380
We're going to look at exactly how this works in code and the rest is just going to be the same as for

48

00:03:16.380  -->  00:03:19.680
the new class and the stacks are extremely useful in computers.

49

00:03:19.690  -->  00:03:25.370
We're going to learn that later on we're going to look for an example of a stack in Python itself.

50

00:03:25.650  -->  00:03:26.760
And the really useful.

51

00:03:26.760  -->  00:03:30.900
So it's good to know that they exist and how they work at least to some extent.

52

00:03:31.350  -->  00:03:35.380
So let's program a stack in the very next video and I'll see you there.
