WEBVTT
1

00:00:00.270  -->  00:00:06.960
I will come back in this video when looking at the final assignment which is a binary tree.

2

00:00:06.960  -->  00:00:11.500
Now we've learned what a binary tree is it's time we look at some code and implement a few moments heads

3

00:00:11.820  -->  00:00:20.010
just like in every other assignment we've done there are two methods to implement add and find the add

4

00:00:20.040  -->  00:00:23.460
method is going to put a node in the binary tree in the correct position.

5

00:00:23.460  -->  00:00:29.880
Remembering whether to go left or right at every junction and the find method is going to also use these

6

00:00:29.920  -->  00:00:36.310
left left or right junctions but only to retrieve a node by its value.

7

00:00:36.330  -->  00:00:41.900
I've also created some pseudo code to help you which is all in the next lecture in the article there

8

00:00:41.900  -->  00:00:43.570
.

9

00:00:44.340  -->  00:00:50.810
The add method will do a bunch of things if the route doesn't have a value already.

10

00:00:50.850  -->  00:00:54.030
That means the binary tree is completely empty.

11

00:00:54.030  -->  00:00:57.350
We're going to make the rules equal to the new note that we're adding.

12

00:00:58.260  -->  00:01:04.200
But if it does have a value that means we have to go left or right depending on the roots value and

13

00:01:04.200  -->  00:01:06.390
the new nodes value.

14

00:01:06.450  -->  00:01:10.310
So we're going to create a variable called marker and make it equal to the root.

15

00:01:10.440  -->  00:01:13.920
Then while the marker has a value it's not none.

16

00:01:13.920  -->  00:01:19.710
We're going to do if the node that we're trying to add if the value is equal to the marker's value we

17

00:01:19.710  -->  00:01:24.240
have to raise an error because that means there is a duplicate value we're trying to add a node with

18

00:01:24.240  -->  00:01:27.800
a value that is already there.

19

00:01:28.470  -->  00:01:34.100
If the nodes value is greater than the marker's value then we have to do one of two things.

20

00:01:34.260  -->  00:01:44.190
Either make the markers write a note equal to the new node or moved down over to the right which is

21

00:01:44.190  -->  00:01:44.730
what we do here.

22

00:01:44.730  -->  00:01:48.800
If the markers right node doesn't have a value the markers right node is empty.

23

00:01:48.930  -->  00:01:51.010
Then we make it equal to the new node.

24

00:01:51.060  -->  00:01:54.820
We put the new node under the right of the marker.

25

00:01:55.350  -->  00:01:58.730
And if it does have a value then we make the marker equal to the markers.

26

00:01:58.740  -->  00:01:59.140
Right.

27

00:01:59.150  -->  00:02:04.000
No we just moved down over to the right and we do the opposite with a left.

28

00:02:04.170  -->  00:02:10.680
If the nodes value is less than the markers value then we have to either put the new node at the left

29

00:02:10.680  -->  00:02:14.460
of the marker or make the marker equal its own left.

30

00:02:14.460  -->  00:02:17.530
So we can move down over to the left.

31

00:02:17.820  -->  00:02:23.670
So we're going to make the markers left node equal to the node Eve the markers left node doesn't have

32

00:02:23.670  -->  00:02:29.280
a value and if it does have a value then we're going to make the markers equal to the markers left node

33

00:02:29.270  -->  00:02:29.300
.

34

00:02:29.310  -->  00:02:35.530
So we can move down to the left and then repeat again at the top of the While loop.

35

00:02:36.330  -->  00:02:42.750
The fine method is going to do something similar but instead of raising an error instead of raising

36

00:02:42.750  -->  00:02:43.800
an error up here.

37

00:02:43.950  -->  00:02:49.680
If the nodes value is equal to the markers value the find method is going to get a value.

38

00:02:49.890  -->  00:02:59.340
And if the value is equal to the marker then we're going to return the marker because we found and if

39

00:02:59.340  -->  00:03:04.710
not then we're going to just call it right or left depending on whether the value is greater than or

40

00:03:04.710  -->  00:03:06.890
less than the current mark.

41

00:03:06.930  -->  00:03:13.620
Finally at the end we're going to raise an error because we didn't find a node with that value to get

42

00:03:13.620  -->  00:03:17.970
started just download the zip file down there and all you have to do once you've downloaded it it's

43

00:03:17.970  -->  00:03:22.670
double click it drag the files into a folder of your choice and open that folder with pyjama.

44

00:03:22.680  -->  00:03:28.890
As usual the download is down there or is also in the curriculum app.

45

00:03:29.670  -->  00:03:34.800
Once you've done that that means we are ready to go into pyjama and open the thing up which I've done

46

00:03:34.800  -->  00:03:40.600
here and now we've got some code available for you that I'm going to go over just now.

47

00:03:41.110  -->  00:03:48.040
We have first of all a node and the node now is a bit different from what it was in the last three assignments

48

00:03:48.960  -->  00:03:52.940
the node has an innate method which has some data and a value.

49

00:03:52.980  -->  00:03:55.530
The value is what we're going to be ordering on.

50

00:03:55.860  -->  00:04:01.150
So this is going to be numbers from 1 2 3 4 5 and so on.

51

00:04:01.620  -->  00:04:07.380
If the note has a value 1 and we try to add a node with value to that node the value to 1 is going to

52

00:04:07.380  -->  00:04:09.450
go to the right.

53

00:04:09.540  -->  00:04:14.820
And speaking of left and right the node also has two properties instead of the next node.

54

00:04:14.820  -->  00:04:18.920
Now we have self left and self-taught right.

55

00:04:18.990  -->  00:04:25.860
The one for the left note and the one for the right note however set right and set left and get right

56

00:04:25.860  -->  00:04:32.300
and get left are pretty much identical to set next and get next only instead of setting the next node

57

00:04:32.300  -->  00:04:35.100
where setting the right or the left nodes.

58

00:04:35.700  -->  00:04:41.250
Finally we also have a print details method there as well.

59

00:04:41.250  -->  00:04:48.080
Now let's look at the binary tree the minority tree is the binary tree implementation.

60

00:04:48.090  -->  00:04:55.050
We no longer the pen on a linked list because the list is limited to being linear and the tree is branching

61

00:04:55.050  -->  00:04:55.740
.

62

00:04:55.740  -->  00:04:58.920
So we cannot use a list as an underlying structure.

63

00:04:59.310  -->  00:05:05.070
The binary tree is its own data structure but it starts with a root as well and that's defined here

64

00:05:05.070  -->  00:05:08.350
in the in its method.

65

00:05:09.820  -->  00:05:15.450
To add a new node we're going to have to implement this method here and I've done a fair amount for

66

00:05:15.450  -->  00:05:25.410
you but there is a bit that I've not done and what I've done is I've said is the root is not and then

67

00:05:25.410  -->  00:05:29.530
we're going to sense the root to be the new node we're adding.

68

00:05:29.790  -->  00:05:34.650
And if not we're going to iterate and traverse the tree by creating a marker which is going to be a

69

00:05:34.690  -->  00:05:42.250
root while the market has a value we're going to be going over into the right or the left node.

70

00:05:42.390  -->  00:05:48.510
But if the nodes value the one we're adding is equal to the Matar's value we should raise a value error

71

00:05:48.520  -->  00:05:48.750
.

72

00:05:48.990  -->  00:05:51.560
So you'd have to change that.

73

00:05:52.380  -->  00:05:57.000
If the nodes value is greater than the marker's value then we have to move to the right or add to the

74

00:05:57.000  -->  00:05:58.040
node at the right.

75

00:05:58.050  -->  00:06:00.090
And you have to implement that.

76

00:06:00.210  -->  00:06:06.790
And finally else the nodes value is less than the market value would have to move to the left or add

77

00:06:06.870  -->  00:06:09.150
the node towards the left.

78

00:06:09.150  -->  00:06:15.370
So you're going to have to do that there.

79

00:06:16.280  -->  00:06:21.990
Finally the find method is completely unimplemented and you're going to have to do all of that but it's

80

00:06:21.990  -->  00:06:24.050
going to be fairly similar to what you've got here.

81

00:06:24.060  -->  00:06:25.820
Let me tell you that.

82

00:06:25.980  -->  00:06:31.500
So we're going to be going over to the right or over to the left depending on the value that we've passed

83

00:06:31.500  -->  00:06:32.080
in here.

84

00:06:32.250  -->  00:06:37.530
And finally when we find a node with that value we're going to return that node and if we don't we're

85

00:06:37.530  -->  00:06:40.210
going to raise a lookup area.

86

00:06:40.980  -->  00:06:43.280
What we've got down here is to print the no doubt.

87

00:06:43.290  -->  00:06:48.280
You can look at that and read it but it's not as important as the other two methods.

88

00:06:48.390  -->  00:06:50.710
And I've done those for you.

89

00:06:50.850  -->  00:06:56.400
So once that was done give it a go go over to the next lecture which is a text lecture which has a downloadable

90

00:06:56.400  -->  00:07:01.110
files and you can download this project from there and give it a go.

91

00:07:01.710  -->  00:07:07.080
And it's more complicated I think than the other assignments but I'd still recommend that you take your

92

00:07:07.080  -->  00:07:11.900
time a few days if necessary to give this a go on and really try and implement it.

93

00:07:12.000  -->  00:07:16.770
And once that's done you can move over to the following video where we're going to be going over the

94

00:07:16.770  -->  00:07:18.840
implementation.

95

00:07:18.840  -->  00:07:21.880
So hopefully this will be a great learning experience for you.

96

00:07:22.050  -->  00:07:24.940
And without further ado I would see you in the very next video.

97

00:07:25.090  -->  00:07:30.430
And remember as always you can always run your tests once you have implemented some code.

98

00:07:30.690  -->  00:07:34.990
Ok that's it for this video so I'll see you in the very next one.
