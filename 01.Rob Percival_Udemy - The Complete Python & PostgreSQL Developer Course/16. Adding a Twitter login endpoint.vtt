WEBVTT
1

00:00:00.120  -->  00:00:06.810
Heino come back in this video we're going to be looking at adding a Twitter logon point.

2

00:00:07.290  -->  00:00:16.530
Let's recap what we've got already and that is we have a flask app and this app allows us to serve content

3

00:00:17.040  -->  00:00:24.160
over the Internet when users access our site with a specific end point.

4

00:00:24.210  -->  00:00:34.710
So when users access this endpoint which is HTP call on 6:59 point of going we one this and point him

5

00:00:35.460  -->  00:00:42.900
in our app we're going to give them the contents of this method which is the template rendered which

6

00:00:42.900  -->  00:00:45.440
is home to huge DML and we've created them before.

7

00:00:45.990  -->  00:00:47.840
If we're not sure what hits them at least for now.

8

00:00:47.850  -->  00:00:49.050
Or how does it work.

9

00:00:49.050  -->  00:00:55.950
Don't worry about it we're going to be covering that as we go along in this video I want to introduce

10

00:00:55.950  -->  00:01:01.770
to you this concept here in flask and at the tooter log in point.

11

00:01:02.070  -->  00:01:09.120
So what we're going to do is first of all create a new route route never sure which one it is and I'm

12

00:01:09.120  -->  00:01:12.180
going to call it loggin Twitter.

13

00:01:12.330  -->  00:01:20.520
This is going to the purpose of this End Point is going to be to allow users to log in to it now directly

14

00:01:20.520  -->  00:01:24.060
below this at thing which is called a decorator.

15

00:01:24.060  -->  00:01:26.820
We're going to be looking into those as well.

16

00:01:26.880  -->  00:01:29.990
We have to define a method which I'm going to call Twitter logon.

17

00:01:30.000  -->  00:01:32.280
You can call it whatever you want.

18

00:01:32.340  -->  00:01:34.920
And similarly you can call the end point whatever you want.

19

00:01:34.920  -->  00:01:36.700
It doesn't have to be called that.

20

00:01:36.780  -->  00:01:43.050
And in here we're going to create the contents of a method and that method is going to get evaluated

21

00:01:43.140  -->  00:01:46.200
when the user arrives on this site.

22

00:01:46.230  -->  00:01:52.950
At this point now I'm sure you remember the different steps that we have to go through in order to allow

23

00:01:52.950  -->  00:01:59.610
the user to sign in with Twitter in our Twitter app.

24

00:01:59.670  -->  00:02:06.240
The first step was to get a request token I'm sure you remember the second step was to get in or of

25

00:02:06.420  -->  00:02:07.750
verification.

26

00:02:08.490  -->  00:02:16.740
And the third step was to get the access token the access token requires that the user has pressed the

27

00:02:16.830  -->  00:02:19.840
I agree to sign in with Twitter on this app.

28

00:02:20.050  -->  00:02:26.310
And when the user presses a button we get to the author verify before we get the or if any fire we need

29

00:02:26.310  -->  00:02:27.300
the request logon.

30

00:02:27.300  -->  00:02:28.600
So that's the first thing to do.

31

00:02:28.710  -->  00:02:30.300
Get a request though.

32

00:02:30.990  -->  00:02:34.830
Fortunately we already have a method that allows us to get a request token.

33

00:02:34.950  -->  00:02:41.850
We've written it inside Twitter Eutelsat and it is called Get request token and that's you remember

34

00:02:41.920  -->  00:02:49.170
what this does is it goes to the Tutera API and posts for you Arel and that gets back a request to open

35

00:02:49.170  -->  00:02:49.710
.

36

00:02:49.710  -->  00:02:56.340
So let's go back to our app and import that method from Twitter you teals the top import get replaced

37

00:02:56.430  -->  00:02:57.680
too.

38

00:02:58.080  -->  00:03:03.990
So we are going to be importing that and then all we have to do is say request can equals get request

39

00:03:03.990  -->  00:03:04.360
token.

40

00:03:04.380  -->  00:03:07.980
So we're putting the contents returned by this method.

41

00:03:08.100  -->  00:03:12.150
Inside this fanciable remember this variable can be called anything you want.

42

00:03:12.150  -->  00:03:16.360
It doesn't have to be called request token.

43

00:03:16.590  -->  00:03:27.780
Now at the end of this method we are going to be redirecting the user to Twitter so we can confirm authorization

44

00:03:27.780  -->  00:03:28.910
.

45

00:03:29.310  -->  00:03:34.470
We're going to be redirecting the user to Twitter so they can confirm the authorization and then we're

46

00:03:34.470  -->  00:03:41.230
going to ask Twitter to redirect the user back to us with that authorization.

47

00:03:41.250  -->  00:03:48.000
So in between those two steps the user is not going to be inside our app it's going to be he's going

48

00:03:48.000  -->  00:03:56.250
to be or she's going to be at Twitter dot com which means that because this request token variable is

49

00:03:56.250  -->  00:04:04.650
defined inside this method she can see it's inside the method as soon as we leave the method.

50

00:04:04.650  -->  00:04:06.550
This variable is going to disappear.

51

00:04:06.570  -->  00:04:12.870
It's going to get deleted and when the user comes back and we need to use the request token to generate

52

00:04:12.870  -->  00:04:17.090
the access token we're not going to have the request token because we're going to have lost it.

53

00:04:17.310  -->  00:04:21.270
So we need a way to keep this request tokens somewhere.

54

00:04:21.480  -->  00:04:25.920
We need a way to make sure this request token is still available when the user returns.

55

00:04:26.550  -->  00:04:32.880
Unfortunately that is a thing that is very popular these days and that's called Cookie's sessions.

56

00:04:33.060  -->  00:04:36.220
I'm going to briefly explain what cookies and sessions are.

57

00:04:36.690  -->  00:04:41.320
But first let's write some code that is going to allow us to use the session.

58

00:04:41.340  -->  00:04:42.830
And then I'll explain.

59

00:04:43.440  -->  00:04:44.250
Here are the top.

60

00:04:44.250  -->  00:04:54.090
Make sure that you import a section from flask and then down here say session request token equals request

61

00:04:54.090  -->  00:05:02.720
token OK this probably sounds familiar looks familiar as it looks like a dictionary.

62

00:05:03.040  -->  00:05:06.110
So you could assume the session is a dictionary.

63

00:05:06.150  -->  00:05:11.020
I think this is something very similar to so for all intents and purposes we can say that the session

64

00:05:11.050  -->  00:05:18.960
is a dictionary and I'm telling you this session is persistent between requests.

65

00:05:19.140  -->  00:05:25.110
So when the user leaves or site and then comes back we're going to know that this request token belongs

66

00:05:25.120  -->  00:05:26.520
to that use.

67

00:05:26.740  -->  00:05:27.900
And how does that happen.

68

00:05:28.120  -->  00:05:37.950
Well with cookies a cookie is just a bit of data that our server our flask app can give the user and

69

00:05:37.950  -->  00:05:42.270
it gets stored on the browser that is there.

70

00:05:42.300  -->  00:05:45.330
There their browser Google Chrome Safari Firefox et cetera.

71

00:05:46.620  -->  00:05:52.800
So that cookie get store in their browser and that cookie has a unique number which allows a flask to

72

00:05:52.810  -->  00:05:54.900
link it to a specific section.

73

00:05:54.900  -->  00:06:00.240
The sessions are saved in our hard drive in our computer and our server.

74

00:06:01.120  -->  00:06:07.950
So when the user comes in with a cookie flask we'll know OK that cookie is linked to the session and

75

00:06:07.950  -->  00:06:12.500
then we will be able to load the session that belongs to that user and that will have a request or can

76

00:06:12.500  -->  00:06:14.510
end it so we can get it back.

77

00:06:14.880  -->  00:06:17.760
And that happens whenever the user gets to our site.

78

00:06:17.760  -->  00:06:23.600
We give them a cookie and that cookie then it uniquely identifies a session on our server.

79

00:06:23.880  -->  00:06:26.170
So the cookie doesn't contain important data.

80

00:06:26.280  -->  00:06:31.240
The only thing it contains is a number which allows the server to identify a session that is stored

81

00:06:31.240  -->  00:06:35.580
in the hard drive and that in-session can have any data we want in it.

82

00:06:35.700  -->  00:06:39.320
And what we're seeing in it now is a request token.

83

00:06:39.570  -->  00:06:45.160
So when they use an R arrives at the home page or indeed this page or need any page flask is going to

84

00:06:45.150  -->  00:06:49.910
give them a cookie and that cookie and it's going to create a section in the server.

85

00:06:50.120  -->  00:06:54.470
The session is going to be empty initially but we can put anything we want in it.

86

00:06:54.630  -->  00:07:00.840
And whenever the user returns in all of these methods we will have access to the session which is unique

87

00:07:00.850  -->  00:07:05.710
for that user and has data that that user put in.

88

00:07:05.820  -->  00:07:07.040
It's a bit confusing.

89

00:07:07.290  -->  00:07:13.410
But let's continue with it and I'm sure that it will grow on you how this works over time.

90

00:07:13.410  -->  00:07:20.370
Now that we've gotten the request and stored in the session which you'll accept for now the user what

91

00:07:20.370  -->  00:07:23.620
the server knows that this belongs to that users or whenever the user comes back.

92

00:07:23.620  -->  00:07:23.950
We can.

93

00:07:23.940  -->  00:07:30.300
We can use that now that we've got that stored and it's going to persist between requests we can redirect

94

00:07:30.310  -->  00:07:31.140
the user.

95

00:07:31.180  -->  00:07:39.200
So what we're going to do here in flask is they return a redirect and we have to import redirect from

96

00:07:39.190  -->  00:07:41.530
a flask as well.

97

00:07:41.520  -->  00:07:51.480
And here we can just put a U or else such as example dot com we can just do that.

98

00:07:51.850  -->  00:08:01.450
For example let's press play now in our app and then let's go to it and go to log in log in Twitter

99

00:08:03.150  -->  00:08:08.100
and we get an internal server error because of the session.

100

00:08:08.130  -->  00:08:10.760
It's not secured to some app top secret key.

101

00:08:10.840  -->  00:08:13.110
Equals 1 2 3 4.

102

00:08:13.200  -->  00:08:20.760
Now this is necessary because the cookies are encrypted in order for other users to not be able to change

103

00:08:20.760  -->  00:08:24.160
that unique number and then access somebody else's session.

104

00:08:24.190  -->  00:08:29.540
So the secrecy is necessary so that the cookies can be encrypted and made secure.

105

00:08:29.660  -->  00:08:33.970
Now it doesn't have to be secure right now but if you were deploying this to a server with a lot of

106

00:08:33.970  -->  00:08:38.340
users you would want that to be secret and to forget that it's necessary.

107

00:08:38.350  -->  00:08:44.950
So let's leave that there and restart our app and then go back here and refresh.

108

00:08:44.970  -->  00:08:49.400
And as you can see we get redirected to the example domain exampled.

109

00:08:50.040  -->  00:08:50.530
OK.

110

00:08:50.790  -->  00:08:57.270
So to recap what we've done is a sense of the secret key and then get the request token that we wrote

111

00:08:57.270  -->  00:08:58.070
previously.

112

00:08:58.200  -->  00:09:02.650
Put that in the session and then redirected the user to exampled.

113

00:09:03.180  -->  00:09:07.830
Naturally we don't want to redirect the user to example Dockum where we want to restrict them is to

114

00:09:07.840  -->  00:09:10.260
the you r l which allows them to click on.

115

00:09:10.330  -->  00:09:14.250
Yes I agree to allow this app to sign in with Twitter.

116

00:09:14.290  -->  00:09:19.170
So let's go to Twitter utils because we already have that you are here.

117

00:09:19.240  -->  00:09:25.120
When we get the auth verifier we tell the users go to the following site in your browser and then we

118

00:09:25.120  -->  00:09:31.770
give them the site which is the authorization you held with that request tokens or token appended at

119

00:09:31.770  -->  00:09:33.300
the end.

120

00:09:33.310  -->  00:09:39.960
So really we want the users to go to this you are all here in this string format blah blah blah.

121

00:09:39.960  -->  00:09:45.370
So what I'm going to do is I'm going to cut all that and put it in a new method.

122

00:09:45.520  -->  00:09:47.280
Get off very fine.

123

00:09:47.320  -->  00:09:47.960
You wrote

124

00:09:51.900  -->  00:09:53.300
like so.

125

00:09:53.830  -->  00:09:56.210
And then here instead of printing nothing.

126

00:09:56.230  -->  00:09:59.980
We're going to print and get or verify fine you are.

127

00:10:00.660  -->  00:10:05.880
So really all I've done is move this out and instead of printing it and returning it.

128

00:10:05.880  -->  00:10:10.650
And now I can use this method in the app Doppie why.

129

00:10:11.130  -->  00:10:12.170
Hopefully that makes sense.

130

00:10:12.180  -->  00:10:17.850
What we're doing is instead of redirecting to example Dockum is we are redirecting to the imported method

131

00:10:17.860  -->  00:10:18.160
.

132

00:10:18.150  -->  00:10:22.680
So let's import it up here from Twitter utils get or verify your L..

133

00:10:22.840  -->  00:10:26.530
Copy that and paste that in there.

134

00:10:26.670  -->  00:10:31.150
And that needs the request token to be able to be the user.

135

00:10:31.990  -->  00:10:36.150
Let's restart our app and go back to Safari.

136

00:10:36.390  -->  00:10:40.840
You can press back then go to log in to it up.

137

00:10:41.310  -->  00:10:42.100
And here we go.

138

00:10:42.150  -->  00:10:50.130
We are redirected now to this AM the site that allows us to authorize the app and we know and love this

139

00:10:50.130  -->  00:10:51.870
site already.

140

00:10:51.880  -->  00:10:56.420
Now when we press authorize app it's going to give us a pin code and we don't really want that.

141

00:10:56.590  -->  00:11:02.140
So what we're going to do in the next video is make sure that we are setting the app to redirect back

142

00:11:02.130  -->  00:11:04.550
to our own application.

143

00:11:04.650  -->  00:11:08.820
So we'll be seeing you in the next video hopefully you learn something in this one which was to use

144

00:11:08.830  -->  00:11:11.030
sessions and about cookies.

145

00:11:11.080  -->  00:11:17.430
Signing the session using a secret key and also the redirect which allows us to send the user to any

146

00:11:17.430  -->  00:11:19.660
other page.

147

00:11:19.680  -->  00:11:20.160
OK.

148

00:11:20.230  -->  00:11:21.580
I'll be seeing you in the very next video.

149

00:11:21.660  -->  00:11:24.380
So stay put and I'll see you there.
