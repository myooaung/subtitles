1

00:00:00,270  -->  00:00:05,040
Hi welcome back in with you we are implementing the stack assignment.

2

00:00:05,040  -->  00:00:07,070
I do hope that you've given it a go.

3

00:00:07,080  -->  00:00:10,470
Downloaded the files and tried to implement it yourselves.

4

00:00:10,530  -->  00:00:12,900
That is the best way to learn.

5

00:00:12,940  -->  00:00:19,560
Watching the videos only is not going to make you the best programmer in the world but programming will

6

00:00:19,570  -->  00:00:20,350
.

7

00:00:21,210  -->  00:00:22,400
But now you're here.

8

00:00:22,440  -->  00:00:28,560
Let's go ahead and implement the linked list section off the stack and then we're going to go over and

9

00:00:28,560  -->  00:00:30,990
implement the stack as well.

10

00:00:30,990  -->  00:00:36,330
The first thing to do is to make sure that we can add at the start of the list so we can reuse the method

11

00:00:36,330  -->  00:00:37,740
we implemented previously.

12

00:00:37,740  -->  00:00:38,820
So let's do that.

13

00:00:39,030  -->  00:00:47,430
If the route is defined then the new nodes next node to be the route and finally set the root equal

14

00:00:47,430  -->  00:00:49,070
to be the new node.

15

00:00:49,620  -->  00:00:57,150
We know that this just puts the new node in the middle between the sort of linked list entity and the

16

00:00:57,150  -->  00:00:57,570
root.

17

00:00:57,600  -->  00:01:02,100
So it essentially creates a new route and puts it at the beginning.

18

00:01:02,380  -->  00:01:08,220
Then let's go over to the find method that's implement the new node the new method.

19

00:01:08,220  -->  00:01:13,280
At the end marker is the root and we know that.

20

00:01:13,290  -->  00:01:19,380
And while the marker has a value if the markers text is equal to the text that we're looking for then

21

00:01:19,380  -->  00:01:20,450
we're going to return it.

22

00:01:20,580  -->  00:01:24,420
And if not we're going to say marker equals marker again next.

23

00:01:24,420  -->  00:01:29,730
And finally at the end if we exit the while loop without returning anything means that we didn't find

24

00:01:29,820  -->  00:01:38,970
what we're looking for and the node with text that was not found in the linked list and we can format

25

00:01:39,060  -->  00:01:42,990
the text like that.

26

00:01:42,990  -->  00:01:46,920
I'm going quite quickly because I'm sure that you already have seen this a few times.

27

00:01:47,010  -->  00:01:49,410
So there's no need to go too slowly.

28

00:01:49,800  -->  00:01:55,590
All we're doing there is iterating over trying to find the text in a specific node returning that node

29

00:01:55,620  -->  00:02:05,340
if it is found or raising an error if it's not found the size method is just going to return a count

30

00:02:05,340  -->  00:02:06,380
of notes actually.

31

00:02:06,510  -->  00:02:10,700
So let's create the marker which is the initial root and the count which is zero.

32

00:02:10,710  -->  00:02:17,330
And while the marker has a value increase the count and then also move over to the next node.

33

00:02:17,430  -->  00:02:22,210
Finally return the count at the end which is the number of nodes in this list.

34

00:02:22,230  -->  00:02:24,950
Remember this is only the list and not the stack.

35

00:02:24,960  -->  00:02:31,470
For now the stack is going to be implemented going to be implementing a wrapper around this list.

36

00:02:31,470  -->  00:02:38,690
Finally the removed start from list it has to if the route is none Rayson error.

37

00:02:39,180  -->  00:02:45,470
Then if it is not in create a variable which stores the root sense self the root to be equal to self-taught

38

00:02:45,500  -->  00:02:49,060
roots next node and return the variable created previously.

39

00:02:49,070  -->  00:02:54,330
It's going to be a shorter method and hopefully you were able to implement this given it a bit of thought

40

00:02:54,690  -->  00:02:58,110
about how to implement the removal from the start.

41

00:02:58,140  -->  00:03:05,370
The first thing to do if the nude if the route is not set so if not self not route we're going to raise

42

00:03:05,370  -->  00:03:11,250
a runtime error because it doesn't really fit in any of the other built in arrows trying to remove from

43

00:03:11,250  -->  00:03:11,850
the list.

44

00:03:11,880  -->  00:03:16,190
But it was already empty.

45

00:03:16,260  -->  00:03:24,390
If we do not raise the error that means the root has a value because we've not gone into this if statement

46

00:03:24,390  -->  00:03:24,870
.

47

00:03:25,320  -->  00:03:30,360
And if that is the case what we want to do is remove the root so the removed note is going to be the

48

00:03:30,510  -->  00:03:33,920
root that's going to be just a new variable created there.

49

00:03:34,020  -->  00:03:35,920
To which we assign the root.

50

00:03:36,390  -->  00:03:41,160
And then we say self don't root equals itself don't root.

51

00:03:41,190  -->  00:03:42,920
Don't get next.

52

00:03:43,050  -->  00:03:48,810
And that sense this variable up there to be the current routes next node.

53

00:03:48,810  -->  00:03:55,920
Remember we've not deleted anything yet until we execute this line but we still have the old root stored

54

00:03:55,950  -->  00:03:57,420
inside this variable.

55

00:03:57,410  -->  00:04:04,490
Remove node so we can return that and that is going to be removing the note.

56

00:04:05,050  -->  00:04:11,510
Another option instead of raising an arrow would be to return None of that could work just as well.

57

00:04:11,520  -->  00:04:16,810
In Python it is quite common to raise errors when things don't quite go as expected.

58

00:04:17,340  -->  00:04:22,520
And in a remove start from least we expect to remove a node.

59

00:04:23,000  -->  00:04:26,270
That is why an error does make sense in this scenario.

60

00:04:26,790  -->  00:04:29,590
The expected outcome which is to remove a..

61

00:04:29,820  -->  00:04:32,590
Didn't happen because the list was empty.

62

00:04:32,700  -->  00:04:37,170
So in that case I ever kind of did happen returning none would be an option.

63

00:04:37,440  -->  00:04:42,330
Without dealing with errors but the error also makes sense.

64

00:04:42,330  -->  00:04:49,780
Next let's go over to the links stack the All we have to do here is the wrapper around the linked list

65

00:04:49,790  -->  00:04:50,190
.

66

00:04:50,850  -->  00:04:56,370
As you know the push method just has to add at the start and we're going to add this node that we're

67

00:04:56,370  -->  00:04:59,170
passing in as a parameter to the push method.

68

00:04:59,190  -->  00:05:00,290
The pop method.

69

00:05:00,370  -->  00:05:07,730
All they have to do is remove them from the start but remember to return the node.

70

00:05:08,700  -->  00:05:09,520
And finally the.

71

00:05:09,540  -->  00:05:20,130
All he has to do is return the size of the linked list and that's it really that's everything for the

72

00:05:20,130  -->  00:05:22,370
stack is quite a short one.

73

00:05:22,560  -->  00:05:29,490
And what to do once we have done all this is to run the tests and make sure that you get all nine tests

74

00:05:29,490  -->  00:05:30,410
passed.

75

00:05:30,630  -->  00:05:33,880
If you don't I recommend you go ahead and look at the tests.

76

00:05:33,960  -->  00:05:41,220
Look at the code verify it think it through as if you were the computer and if you still can figure

77

00:05:41,220  -->  00:05:44,800
it out do go ahead and ask the questions in the course Q and A.

78

00:05:45,010  -->  00:05:46,880
And as always I'm there to help.

79

00:05:47,220  -->  00:05:50,010
So please do ask questions.

80

00:05:50,010  -->  00:05:52,090
Don't don't keep it to yourselves.

81

00:05:52,320  -->  00:05:56,150
And be stuck because it just doesn't make sense really.

82

00:05:56,160  -->  00:05:57,030
I'm here to help.

83

00:05:57,030  -->  00:06:02,480
So might as well use that power that you've got to ask all the questions you need.

84

00:06:02,610  -->  00:06:06,900
And I'm always there for your convenience but that's it for this video.

85

00:06:06,900  -->  00:06:12,000
We've now implemented the stack and I went quite quickly through this one because there is not much

86

00:06:12,000  -->  00:06:13,530
difference between this one and the queue.

87

00:06:13,530  -->  00:06:19,380
I don't really want to waste much of your time and in the next set of videos we're going to be implementing

88

00:06:19,380  -->  00:06:20,640
a binary tree.

89

00:06:20,670  -->  00:06:25,470
We're going to be looking at what a binary tree is and that is the last data structure we're going to

90

00:06:25,470  -->  00:06:26,370
be looking at.

91

00:06:26,490  -->  00:06:32,380
And it's also the only non linear data structure we're going to be looking at in this course.

92

00:06:32,580  -->  00:06:37,260
And there's also a bit more complicated so please go ahead into the next few videos.

93

00:06:37,330  -->  00:06:38,670
We're going to be implementing that.

94

00:06:38,670  -->  00:06:41,020
Hope you're not too bored of data structures yet.

95

00:06:41,230  -->  00:06:46,800
But as you remember from the start of this section data structures are quite important especially when

96

00:06:46,800  -->  00:06:48,800
looking for jobs.

97

00:06:48,810  -->  00:06:51,800
So without further ado I'll be seeing you in the next few videos.

98

00:06:51,810  -->  00:06:54,190
We're going to be looking at binary trees.

99

00:06:54,210  -->  00:06:55,900
See you there.
