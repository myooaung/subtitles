WEBVTT
1

00:00:00.180  -->  00:00:05.390
Hi welcome back in this video we're going to look at getting a cursor from the connection from pool

2

00:00:05.390  -->  00:00:06.360
.

3

00:00:07.320  -->  00:00:14.220
And the reason why we're looking at this is if we go into the User class we've got some more duplicate

4

00:00:14.220  -->  00:00:14.810
code.

5

00:00:14.820  -->  00:00:21.210
I want to get rid of we've got these with connection from pool and connection and then immediately after

6

00:00:21.600  -->  00:00:27.810
with connection dot cursor askers and we have that again down here and we're going to have that every

7

00:00:27.810  -->  00:00:34.830
time that we actually want to do something with the connection the connection itself doesn't really

8

00:00:34.830  -->  00:00:41.640
do anything except give us a cursor and give us the ability to commit.

9

00:00:42.000  -->  00:00:49.710
That means if you remember correctly we can insert data into the connection and then insert more data

10

00:00:49.740  -->  00:00:54.080
and more data and then commit and then it will write all the data at the same time.

11

00:00:54.140  -->  00:00:58.860
And that is good because it's efficient.

12

00:00:58.920  -->  00:01:03.890
However this is not good because it's inefficiently duplicated.

13

00:01:04.530  -->  00:01:13.170
So if we just get a cursor and then we execute something and then we immediately commits that connection

14

00:01:13.230  -->  00:01:20.350
and close it we lose the ability to insert multiple things and then commit them all at once.

15

00:01:20.910  -->  00:01:24.580
If we only use the cursor we're going to look at doing exactly that.

16

00:01:24.740  -->  00:01:29.700
Do remember that there is that small problem and we're going to explore that again at the end of the

17

00:01:29.700  -->  00:01:31.900
video.

18

00:01:31.980  -->  00:01:37.080
Let's go into the database class and I'm going to make the changes first and then explain the changes

19

00:01:37.080  -->  00:01:38.750
to you.

20

00:01:38.910  -->  00:01:43.930
I'm going to rename this connection from pool class to the cursor from connection from Apple.

21

00:01:43.930  -->  00:01:46.870
This is very construed is not a good name.

22

00:01:47.010  -->  00:01:51.110
OK we're going to look into that later on as well.

23

00:01:51.140  -->  00:01:55.470
Now the connection is going to be done in the in each method we are going to initialize that property

24

00:01:55.800  -->  00:02:05.570
but we're also going to initialize the cursor selve the cursor equals none in the entire method.

25

00:02:05.570  -->  00:02:08.210
We're going to get a connection from the pool.

26

00:02:08.730  -->  00:02:10.830
And we're also going to get a cursor

27

00:02:13.350  -->  00:02:14.760
from the connection.

28

00:02:15.420  -->  00:02:22.000
So we get the connection first and then we get a cursor from it just like we do.

29

00:02:22.000  -->  00:02:29.230
He uses the with statement and the only thing that does is he creates the variable cursor equals connection

30

00:02:29.240  -->  00:02:34.030
to a cursor and at the end of the with clause it closes the cursor.

31

00:02:34.200  -->  00:02:36.900
We can do that manually as well.

32

00:02:36.900  -->  00:02:42.510
Now instead of returning self-conviction we can return self the cursor and at the end of the statement

33

00:02:42.720  -->  00:02:43.990
we're going to close the cursor

34

00:02:46.980  -->  00:02:50.720
and then we're going to commit to the connection and then we're going to return into the pool.

35

00:02:51.180  -->  00:02:52.760
So what does this mean for us.

36

00:02:52.770  -->  00:02:54.480
Why is this a good thing.

37

00:02:54.960  -->  00:03:05.070
Well now in the User we can say with cursor from connection from pool we have to import natural number

38

00:03:07.440  -->  00:03:09.570
as cursor

39

00:03:14.040  -->  00:03:17.400
and that saves us some lines of code.

40

00:03:18.150  -->  00:03:20.550
And similarly down here we can do the same

41

00:03:20.620  -->  00:03:26.850
.

42

00:03:26.940  -->  00:03:33.950
Notice that I am adhering to the python's standard of having four spaces for spaces after a COLANERI

43

00:03:33.990  -->  00:03:39.630
after a call on your code should be indented four spaces.

44

00:03:39.630  -->  00:03:42.450
If not it doesn't belong inside that clause.

45

00:03:42.450  -->  00:03:43.490
So this code here.

46

00:03:43.530  -->  00:03:45.640
All of it is inside the with clause.

47

00:03:45.750  -->  00:03:52.970
If I press backspace then this code is inside the with clause but this one isn't some use Romola.

48

00:03:53.790  -->  00:03:54.630
So this is simpler.

49

00:03:54.690  -->  00:03:55.220
It's good.

50

00:03:55.290  -->  00:04:01.230
We now are able to get a cursor directly from the pool as opposed to get an air connection first and

51

00:04:01.230  -->  00:04:03.040
then the cursor from it.

52

00:04:03.150  -->  00:04:05.320
We're always going to want to do that anyway.

53

00:04:06.310  -->  00:04:08.160
And yes that's true.

54

00:04:08.160  -->  00:04:09.260
We're always going to get into that.

55

00:04:09.480  -->  00:04:15.710
But now when we get a cursor from a connection we we get the cursor.

56

00:04:15.720  -->  00:04:16.970
That's all good.

57

00:04:17.160  -->  00:04:19.010
And then at the end we close it and we compete.

58

00:04:19.110  -->  00:04:24.270
So we no longer are able to perform multiple operations with the same cursor.

59

00:04:24.290  -->  00:04:27.270
So we've lost a bit of that flexibility.

60

00:04:27.270  -->  00:04:32.970
Something to remember if your application requires a lot of rights to the database if you need to insert

61

00:04:32.970  -->  00:04:38.200
a lot of data then doing this may not be the best thing.

62

00:04:38.280  -->  00:04:43.530
Something else that we lose is the ability to roll back a connection which is not something we've looked

63

00:04:43.530  -->  00:04:44.540
at yet.

64

00:04:45.060  -->  00:04:53.190
A connection rollback means all of the data is stored in this connection deleted for example see we

65

00:04:53.190  -->  00:04:57.830
insert something into the user table that is incorrect.

66

00:04:58.140  -->  00:05:05.130
And then we get an error and sequel doesn't quite manage to fix itself or something along those lines

67

00:05:05.130  -->  00:05:05.160
.

68

00:05:05.160  -->  00:05:10.700
So we want to delete all the data that we've put in the connection then we would do a connection rollback

69

00:05:10.710  -->  00:05:12.310
.

70

00:05:12.540  -->  00:05:20.220
And here is where these three parameters of the exit method come into play.

71

00:05:20.220  -->  00:05:22.690
These x x.

72

00:05:22.690  -->  00:05:25.100
See X x.

73

00:05:25.120  -->  00:05:26.930
C underscore vowel.

74

00:05:27.000  -->  00:05:30.980
So I can speak now actually type easy TB.

75

00:05:31.200  -->  00:05:40.880
These are exception type exception value exception traceback.

76

00:05:41.130  -->  00:05:43.090
That's what they are.

77

00:05:44.040  -->  00:05:53.340
And basically if an error happens during the with clause if an error happens while inserting this here

78

00:05:54.750  -->  00:06:02.870
then we get the type of the error the value stored in that era and the traceback.

79

00:06:02.940  -->  00:06:08.880
Basically a long message explaining what the error where the error happened for that error that happened

80

00:06:08.970  -->  00:06:11.520
inside the with clause.

81

00:06:12.150  -->  00:06:13.550
And that's very useful.

82

00:06:13.560  -->  00:06:19.140
It means that if an error happens we can deal with it in the with clause or optionally we can just say

83

00:06:19.320  -->  00:06:20.840
I don't want to deal with this error.

84

00:06:21.420  -->  00:06:24.150
And if we don't want to deal with the error then the application will crash.

85

00:06:24.150  -->  00:06:28.480
So just remember that we do want to deal with the error.

86

00:06:28.830  -->  00:06:34.650
We want to see if there was an error rollback the connection because we don't know what happened and

87

00:06:34.650  -->  00:06:36.160
we don't want to risk it.

88

00:06:36.180  -->  00:06:42.060
So if acception value is not None.

89

00:06:42.270  -->  00:06:47.500
Basically if the exception value does contain is it is something other than none.

90

00:06:48.000  -->  00:06:58.530
Then selve dot connection dot rollback else do the other stuff.

91

00:06:58.560  -->  00:06:59.940
Sorry not this.

92

00:06:59.940  -->  00:07:01.690
We always want to put the connection back.

93

00:07:01.920  -->  00:07:06.280
Once we roll the connection back then that connection is essentially blank.

94

00:07:06.300  -->  00:07:09.430
We can put it back in the pool and that's not a problem.

95

00:07:09.450  -->  00:07:16.110
So if the exception value is not none that means that an exception did happen and then this can be something

96

00:07:16.110  -->  00:07:22.890
like e.g. type error attribute error value error that sort of stuff.

97

00:07:22.890  -->  00:07:29.760
You know standard error classes error object if the exception value is not none meaning there was an

98

00:07:29.760  -->  00:07:30.280
error.

99

00:07:30.480  -->  00:07:32.020
Roll the connection back.

100

00:07:32.250  -->  00:07:37.230
And if it was none then close the cursor commit that connection.

101

00:07:37.230  -->  00:07:38.090
Everything is good.

102

00:07:38.130  -->  00:07:38.760
There was no error

103

00:07:43.180  -->  00:07:49.620
and at it we're able now to get a cursor directly from this class as opposed to going through the connection

104

00:07:49.710  -->  00:07:57.190
and then the cursor so as remove some duplicate code it makes it easier for us to create our with clauses

105

00:07:57.340  -->  00:07:57.870
.

106

00:07:58.160  -->  00:07:59.080
So that's great.

107

00:07:59.430  -->  00:08:03.130
And that's it for this video so I'll be seeing you in the next one.
