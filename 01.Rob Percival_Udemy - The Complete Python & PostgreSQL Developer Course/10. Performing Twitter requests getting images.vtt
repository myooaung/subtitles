WEBVTT
1

00:00:00.380  -->  00:00:04.630
Hi welcome back in which we live we're going to be performing Twitter requests.

2

00:00:04.780  -->  00:00:11.310
But before we do that please bear with me while we review this to make sure that nothing is confusing

3

00:00:11.310  -->  00:00:13.440
here.

4

00:00:13.560  -->  00:00:21.120
The first thing we're doing is creating a consumer create a consumer which uses consumer key and consumer

5

00:00:21.120  -->  00:00:27.010
secret to identifying an app unique.

6

00:00:27.660  -->  00:00:31.560
The client is then just used to perform requests.

7

00:00:31.560  -->  00:00:39.310
So use the client to perform a request for the request.

8

00:00:40.140  -->  00:00:45.150
This may be confusing we're performing a request for the request token but the request is one thing

9

00:00:45.420  -->  00:00:49.050
and we're doing a request to an API.

10

00:00:49.590  -->  00:00:50.320
OK.

11

00:00:50.760  -->  00:00:59.720
And then we get that request of can they get the request token parsing the query string return.

12

00:01:01.550  -->  00:01:02.000
OK.

13

00:01:02.010  -->  00:01:09.570
And then we ask the user to authorize our app and give us the pin code.

14

00:01:10.290  -->  00:01:16.380
That's the next thing we tell the user go to the following site and we say the authorization Jerrell

15

00:01:16.770  -->  00:01:23.520
and a query string parameter which is the token specific to the request token that we have asked for

16

00:01:23.520  -->  00:01:24.700
.

17

00:01:25.110  -->  00:01:33.000
Then we create a token object which contains the request token and the verifier.

18

00:01:33.780  -->  00:01:37.420
We create a client with our consumer.

19

00:01:37.570  -->  00:01:45.120
Our app and the newly created token newly created and verified token.

20

00:01:45.600  -->  00:01:49.410
And what that allows us to do now is we use the beautification.

21

00:01:49.950  -->  00:01:53.680
The user has already agreed that our raptured have access.

22

00:01:54.300  -->  00:02:01.380
And we know that it's our app because we've created the request token so we use that request token and

23

00:02:01.380  -->  00:02:03.700
the verifier now to greet our client.

24

00:02:03.810  -->  00:02:12.100
And now with that client we can ask Twitter for an access token and Twitter knows it should give us

25

00:02:12.110  -->  00:02:18.600
it because we verified the request token.

26

00:02:19.950  -->  00:02:30.990
And now what we're going to do is create an authenticated token token object and use that to perform

27

00:02:31.530  -->  00:02:36.220
Twitter API calls on behalf of the user.

28

00:02:36.660  -->  00:02:37.250
OK.

29

00:02:37.470  -->  00:02:42.390
So that's what this video is going to be about creating an authenticated token token object just like

30

00:02:42.390  -->  00:02:50.890
we did up here and use that to perform Twitter API calls so authenticated sorry authorized token I'm

31

00:02:50.890  -->  00:02:52.230
going to change that as well.

32

00:02:52.350  -->  00:02:54.120
I make the mistake all the time.

33

00:02:54.120  -->  00:02:55.990
All right.

34

00:02:56.310  -->  00:02:57.500
Authorized.

35

00:02:57.510  -->  00:02:58.150
There we go.

36

00:02:58.150  -->  00:03:07.020
All right so can is off to a token but now instead of request token we're going to use the access token

37

00:03:15.510  -->  00:03:22.500
and without those ads it creates that token object that as you know is just a thing an object that contains

38

00:03:22.500  -->  00:03:28.530
these two properties here and we could set a very fine if this token needed it but this token object

39

00:03:28.560  -->  00:03:31.050
doesn't need that.

40

00:03:31.180  -->  00:03:38.610
We're going to create an authorized client which is going to be allowed to dog client and is going to

41

00:03:38.610  -->  00:03:46.380
use our consumer which is our app and also the authorized token.

42

00:03:46.380  -->  00:03:53.430
Now this client is authorized Klein that we're creating use is the authorized token and what that means

43

00:03:53.430  -->  00:03:55.350
what it means that it uses your I still can.

44

00:03:55.350  -->  00:04:02.700
It is that whenever we do a request to Twitter API that token is going to get sent along with a request

45

00:04:03.770  -->  00:04:09.030
and because we're sending that token Twitter is going to read the token and is going to realize that

46

00:04:09.030  -->  00:04:16.020
that token is an access token it has that stored somewhere in a database so it knows that that token

47

00:04:16.110  -->  00:04:23.340
is an access token and therefore we are representing the user that authorized our application and received

48

00:04:23.340  -->  00:04:24.700
that token.

49

00:04:24.960  -->  00:04:33.320
So this client is now representing the user that locked in and gave us the verify so myself.

50

00:04:34.230  -->  00:04:38.430
Now make Twitter API calls.

51

00:04:38.730  -->  00:04:45.570
So now we can do something like response comic content equals authorized client don't request and we

52

00:04:45.570  -->  00:04:50.160
can do something like We don't have in here.

53

00:04:50.280  -->  00:04:52.970
But we can do something like search.

54

00:04:53.070  -->  00:04:55.470
So I'm going to do.

55

00:04:55.470  -->  00:05:03.480
Hastey P.S. call on slushed lush API dot com slash 1.1 busters the API version that we're using and

56

00:05:03.480  -->  00:05:07.690
then search slash tweets dot Jason.

57

00:05:08.160  -->  00:05:14.580
So going back to Safari I'm going to go into the documentation

58

00:05:18.510  -->  00:05:20.830
that rest the API.

59

00:05:22.270  -->  00:05:24.530
And that's the search API.

60

00:05:24.660  -->  00:05:34.040
A popular API that allows us to do queries against the indices of recent or popular tweets.

61

00:05:34.550  -->  00:05:42.360
OK so what allows us to do is essentially search recent tweets and we are able to send it query operators

62

00:05:42.880  -->  00:05:47.040
such as words that it should contain.

63

00:05:47.070  -->  00:05:51.670
Or for example at NASA for tweets mentioning the account Nassa.

64

00:05:51.880  -->  00:05:54.500
And there's a bunch of other filters like filter images and.

65

00:05:54.510  -->  00:05:56.560
Identify those photos.

66

00:05:56.610  -->  00:05:57.690
So that's what we're going to be doing.

67

00:05:57.690  -->  00:06:05.670
We're going to be running the search on this Johana is the P.S. colon slash slash API not what it accom

68

00:06:05.820  -->  00:06:09.370
slash 1.1 slash search slash tweets dot.

69

00:06:09.390  -->  00:06:12.620
Jason quilty string Q equals.

70

00:06:12.790  -->  00:06:14.210
And then the query.

71

00:06:14.760  -->  00:06:18.000
So yes call us at npr.org com.

72

00:06:18.120  -->  00:06:21.190
When we won such tweets start Jason Queally string.

73

00:06:21.400  -->  00:06:32.020
Q equals and here comes the search terms and I'm going to do computers plus filter Colan images so that

74

00:06:32.010  -->  00:06:37.260
when all of us are doing is saying the word computers has to be in it and the filter that we're applying

75

00:06:37.260  -->  00:06:38.640
to the query is images.

76

00:06:38.640  -->  00:06:46.590
Which means we're only going to get images and then we also need to specify what verb we're using for

77

00:06:46.590  -->  00:06:47.630
the hatred request.

78

00:06:47.640  -->  00:06:58.710
So in this case it's going to be get because the search API uses get it there we go.

79

00:06:59.720  -->  00:07:00.300
OK.

80

00:07:00.480  -->  00:07:03.260
So that's going to do the search.

81

00:07:03.280  -->  00:07:13.950
Now all we have to do is say if response Dopp status is not 200 then say print an error occurred when

82

00:07:13.950  -->  00:07:14.520
searching

83

00:07:17.220  -->  00:07:23.250
and finally print content that decode UTF 8.

84

00:07:23.250  -->  00:07:24.570
Now that's what we did up here.

85

00:07:24.570  -->  00:07:31.490
It's just to convert bytes to string which is OK that's fine.

86

00:07:32.400  -->  00:07:33.180
OK.

87

00:07:33.450  -->  00:07:35.120
So that's it.

88

00:07:35.220  -->  00:07:42.120
Now that we've gotten this what we should see printed out is a list of tweets containing computers and

89

00:07:42.120  -->  00:07:43.020
images.

90

00:07:43.020  -->  00:07:45.250
So let's go press play.

91

00:07:45.570  -->  00:07:51.320
We're going to need to authorize the app because we're not storing the access tokens anyway.

92

00:07:52.620  -->  00:07:54.870
Copy the pin come and put it down here

93

00:07:57.630  -->  00:08:04.330
and now we see here printed the access token and then printed status is tweets.

94

00:08:04.590  -->  00:08:08.550
And we've got quite a lot of stuff printed out.

95

00:08:09.120  -->  00:08:14.520
So we are going to need to really go through that and printout the things that interest us the most

96

00:08:14.520  -->  00:08:15.330
.

97

00:08:15.330  -->  00:08:23.080
For example something that could interest us is text that's the contextual content of the tweet.

98

00:08:23.190  -->  00:08:31.620
So we've got a dictionary which has status is and that is a list of tweets and each of the dictionaries

99

00:08:31.890  -->  00:08:36.740
in the tweet has a text so you can think of it as something like this.

100

00:08:37.050  -->  00:08:43.880
Status is text which is what it looks like.

101

00:08:43.890  -->  00:08:47.180
But then there may be more.

102

00:08:49.680  -->  00:08:55.950
And I'm just giving you this because now comes your question which is how would you find the text out

103

00:08:56.620  -->  00:08:59.530
of each of these tweets.

104

00:08:59.860  -->  00:09:10.620
We've got the content here which is well it can be a dictionary picked.

105

00:09:11.670  -->  00:09:13.380
And now we want to print that out.

106

00:09:13.380  -->  00:09:20.610
So the first thing to do is to set a breakpoint run the debugger authorize the app

107

00:09:30.110  -->  00:09:37.050
and now see if we do this walk what comes out OK what comes out is not very useful.

108

00:09:37.050  -->  00:09:43.500
So let's see if just the content decode where there's a give us the content or the code gives us a string

109

00:09:43.510  -->  00:09:43.910
.

110

00:09:44.640  -->  00:09:52.250
And we know that the string is Jason knows sure if we've looked at how to decode Jason.

111

00:09:52.380  -->  00:09:56.750
So we're going to have to look into that before we can print this out.

112

00:09:57.120  -->  00:10:04.320
Ideally what we want is for this to not be a string but to be a python dictionary and for the list to

113

00:10:04.330  -->  00:10:12.780
not be a string but to be a private list and so on so that we can then potentially iterate over it with

114

00:10:12.900  -->  00:10:17.900
a loop or something along those lines.

115

00:10:17.940  -->  00:10:23.970
So what we're going to need is another library which is Jason is a built in library in Python so we

116

00:10:23.970  -->  00:10:25.640
don't need to install it or anything.

117

00:10:25.650  -->  00:10:27.220
Import Jason.

118

00:10:27.720  -->  00:10:37.050
And then say in tweets is Jason don't loads

119

00:10:41.340  -->  00:10:48.870
remove the dict they Jason dot loads and then we give it a string representation of some Jason and that's

120

00:10:48.870  -->  00:10:53.240
when I convert it into a python dictionary.

121

00:10:53.240  -->  00:10:56.110
And the load's method just means load string.

122

00:10:56.310  -->  00:10:59.970
If we remove the s it will load from a file instead of from a string.

123

00:10:59.970  -->  00:11:01.470
And we've looked at that before.

124

00:11:01.860  -->  00:11:04.360
So load X for LUTESTRING.

125

00:11:04.890  -->  00:11:11.190
And that's all it's going to do is get this content and code UTF 8 which is a string.

126

00:11:11.210  -->  00:11:15.960
But as we can see it represents a python dictionary represent some Jason code.

127

00:11:15.960  -->  00:11:20.640
So what it's going to do is convert that into a pipe and dictionary in order to do that.

128

00:11:20.640  -->  00:11:27.260
We're going to have to rerun the debugger and authorize the app again.

129

00:11:27.450  -->  00:11:33.030
You can now see why it might be interesting to start storing these things on a database as opposed to

130

00:11:33.780  -->  00:11:36.400
requiring the user to do that every time.

131

00:11:37.140  -->  00:11:39.850
OK so let's copy that.

132

00:11:40.880  -->  00:11:41.170
OK.

133

00:11:41.190  -->  00:11:42.800
Now we've got something a bit more interesting.

134

00:11:42.810  -->  00:11:46.950
Now we have a dict we have a list of stators.

135

00:11:46.980  -->  00:11:48.810
This looks more interesting.

136

00:11:48.810  -->  00:11:51.540
Now let's look at stators number zero.

137

00:11:51.570  -->  00:11:55.420
It has a text it has.

138

00:11:55.420  -->  00:11:59.070
It should have an image somewhere as well.

139

00:11:59.400  -->  00:12:07.430
Entities and you or else the arrow that has a bunch of your old media.

140

00:12:07.470  -->  00:12:10.710
There we go has the URL of the media.

141

00:12:11.190  -->  00:12:16.360
So for example we could go to this row.

142

00:12:16.510  -->  00:12:17.200
Copy that.

143

00:12:17.230  -->  00:12:21.030
I hope it's not like pornographic or anything.

144

00:12:21.030  -->  00:12:22.940
Please God help me.

145

00:12:23.700  -->  00:12:29.540
Let's copy this copy will you.

146

00:12:30.060  -->  00:12:32.210
And it is not so perfect.

147

00:12:32.610  -->  00:12:35.860
So there we have a galaxy of seven a pound.

148

00:12:36.000  -->  00:12:38.360
And this is all coming from Twitter.

149

00:12:38.400  -->  00:12:44.760
You can see the power that we have now with our application we can access Twitter data which gives us

150

00:12:44.760  -->  00:12:46.600
access to a lot of data.

151

00:12:47.520  -->  00:12:47.930
OK.

152

00:12:48.030  -->  00:12:54.960
And using the debugger we can find out sort of the structure of this dictionary app it more easily let's

153

00:12:54.960  -->  00:12:57.580
forget about the entities for now and just display the text.

154

00:12:57.990  -->  00:13:04.920
So we're going to get the result the tweets and then we're going to go into state as is and for each

155

00:13:04.920  -->  00:13:13.340
of the state says we're going to print out the text so our tweets now looks like this.

156

00:13:13.410  -->  00:13:18.030
How would you go over each tweet and print the text out

157

00:13:18.100  -->  00:13:24.270
.

158

00:13:24.610  -->  00:13:26.170
Hope you try that.

159

00:13:26.310  -->  00:13:30.300
What I would recommend is for tweet in tweets print

160

00:13:33.010  -->  00:13:43.210
am sorry for Tweet tweet status is print tweet text on the status says this is a list.

161

00:13:43.290  -->  00:13:48.210
So this is going to be getting as each of the tweets in that list in that list.

162

00:13:48.210  -->  00:13:52.370
And then we're going to be printing the text inside each tweet.

163

00:13:52.410  -->  00:13:54.890
So let's start the debugger and press play.

164

00:13:55.410  -->  00:14:02.010
We're going to have to authorize again.

165

00:14:05.160  -->  00:14:06.070
And there we go.

166

00:14:06.180  -->  00:14:13.120
We have a list of tweets including computers and images.

167

00:14:13.470  -->  00:14:14.330
So there we go.

168

00:14:14.340  -->  00:14:19.620
I actually don't see the word computer in any of these but not really sure why not.

169

00:14:19.800  -->  00:14:28.360
Maybe am Samsung Galaxy Dell which we are all included in sort of that computers range.

170

00:14:28.460  -->  00:14:32.090
So that may be why.

171

00:14:32.350  -->  00:14:39.960
So as you can see we can now go into the links that they give us and so on.

172

00:14:41.950  -->  00:14:48.170
So now we were able to make requests to a tweet or API as if we were a user.

173

00:14:48.180  -->  00:14:49.910
Users can perform search.

174

00:14:50.160  -->  00:14:56.130
So now we can perform search of the things we could do is get a list of messages of followers we could

175

00:14:56.400  -->  00:15:01.320
follow more people essentially endless things you can do when I would really encourage you to have a

176

00:15:01.320  -->  00:15:06.900
look at the Twitter documentation and find more things that you might be able to do and the way to do

177

00:15:06.900  -->  00:15:10.520
that is to go into depth.

178

00:15:10.530  -->  00:15:20.100
Don't put it com slash rest slash public and there you can find out more about the API that you can

179

00:15:20.100  -->  00:15:23.530
use and calling them on that stuff.

180

00:15:23.650  -->  00:15:31.260
So I would definitely recommend having a look at that and am having to play around with it really.

181

00:15:31.620  -->  00:15:35.920
Because now your application has the power of Twitter behind it.

182

00:15:36.450  -->  00:15:40.580
And that's really quite interesting in terms of the things you can do with it.

183

00:15:40.590  -->  00:15:42.840
So we've looked at logging in with Twitter.

184

00:15:42.840  -->  00:15:49.950
There's a lot of things going on here but hopefully this gave you a bit of an insight into how all mouth

185

00:15:49.940  -->  00:15:57.300
works which is essential these days and also how these API work and a bit more into programming as a

186

00:15:57.300  -->  00:15:57.720
whole.

187

00:15:57.750  -->  00:16:03.000
Even though it was quite a simple program it's quite convoluted and if nobody explains it to you then

188

00:16:03.020  -->  00:16:11.700
it's a bit complicated to understand what to do next would be to start storing these access tokens in

189

00:16:11.700  -->  00:16:12.650
a database.

190

00:16:12.930  -->  00:16:19.380
So whenever we create a user registration as well as the email and password and things like that or

191

00:16:19.380  -->  00:16:25.890
instead of we could store these access tokens and then whenever a user wants to log in we already have

192

00:16:25.890  -->  00:16:29.940
the access tokens stored for Twitter for them.

193

00:16:29.950  -->  00:16:34.230
So that's what we're going to be doing over the next few videos and that's going to simplify the flow

194

00:16:34.560  -->  00:16:38.970
and not require the user to authorize the application every time.

195

00:16:38.970  -->  00:16:41.730
Without further ado I'll be seeing you in the very next video
