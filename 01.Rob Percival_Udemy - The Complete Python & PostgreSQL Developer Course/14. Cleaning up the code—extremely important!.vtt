WEBVTT
1

00:00:01.860  -->  00:00:07.080
Hi welcome back in this video we're going to be looking at cleaning up some of the code and if that

2

00:00:07.080  -->  00:00:11.750
sounds boring please don't consider cleaning up code is boring.

3

00:00:11.790  -->  00:00:14.080
It is a work of art.

4

00:00:14.220  -->  00:00:21.420
Now that we are able to get to the stage where we can clean up the code we're turning our code from

5

00:00:21.720  -->  00:00:28.440
something ugly and cumbersome and slow to something that is actually readable maintainable manageable

6

00:00:29.700  -->  00:00:31.800
pretty even.

7

00:00:32.050  -->  00:00:38.130
Now you may think I'm a nerd because I'm saying those sort of things but the truth is nobody likes code

8

00:00:38.130  -->  00:00:39.430
that looks like this.

9

00:00:39.510  -->  00:00:41.210
It is horrible.

10

00:00:41.590  -->  00:00:50.460
And I myself when I was planning this course I was thinking about how to introduce to you clean code

11

00:00:50.470  -->  00:00:50.930
.

12

00:00:51.750  -->  00:00:55.170
And I thought I'm going to make calls as horrible as I can.

13

00:00:55.290  -->  00:01:00.000
So then you can realize how important it is to have clean code.

14

00:01:00.240  -->  00:01:03.590
Now hopefully that isn't putting you off and you're seeing this in your thinking.

15

00:01:03.630  -->  00:01:06.050
I never want to do any of this.

16

00:01:06.320  -->  00:01:09.200
But what we're going to be doing now is cleaning up.

17

00:01:09.210  -->  00:01:10.480
We've made it work.

18

00:01:10.560  -->  00:01:16.790
And that is should always be the first step before worrying about scalability performance of prettiness

19

00:01:16.900  -->  00:01:17.010
.

20

00:01:17.010  -->  00:01:21.370
Cleanliness maybe not so much the last two but before worrying about those things too much.

21

00:01:21.570  -->  00:01:26.070
Make sure that you can actually get something that works because if your code is pretty but doesn't

22

00:01:26.070  -->  00:01:28.510
work then it's not very useful.

23

00:01:28.590  -->  00:01:29.180
OK.

24

00:01:29.460  -->  00:01:33.820
However don't forget to make your code maintain.

25

00:01:35.280  -->  00:01:40.610
I've written a few comments here which explain some things about the code.

26

00:01:40.630  -->  00:01:47.830
Man that's also nice to include and that is going to make the refactoring the cleaning up a bit easier

27

00:01:47.830  -->  00:01:47.850
.

28

00:01:47.850  -->  00:01:58.530
Now let's think about the objects we've got and what belongs in each object object in oriented programming

29

00:01:58.530  -->  00:02:05.940
remember is using these classes and object oriented programming was invented to speed up and simplify

30

00:02:06.060  -->  00:02:09.860
the development process object under programming.

31

00:02:10.380  -->  00:02:12.940
Makes programs go slower.

32

00:02:13.050  -->  00:02:14.130
That's just the way it is.

33

00:02:14.310  -->  00:02:18.160
But it is a lot better for us developers.

34

00:02:18.180  -->  00:02:23.190
It makes things much quicker for us to understand.

35

00:02:23.190  -->  00:02:25.370
So let's go to the log in Doppie Wi-Fi.

36

00:02:25.370  -->  00:02:27.090
This is our main application.

37

00:02:27.090  -->  00:02:32.400
This is essentially what our app does it logged in with Twitter and then retrieve some images right

38

00:02:32.400  -->  00:02:34.450
.

39

00:02:34.470  -->  00:02:39.790
I'm going to start at the bottom because I think that's where we should start.

40

00:02:39.800  -->  00:02:47.250
And I'm going to explain why as we can see we've got a consumer that we're using there and that's just

41

00:02:47.250  -->  00:02:49.250
our Twitter app.

42

00:02:49.590  -->  00:02:56.850
All other things around here are dependent on the user as opposed to the app.

43

00:02:56.850  -->  00:03:00.780
So the user has an oil token the user has an auto can secret.

44

00:03:00.780  -->  00:03:07.560
The request we're doing is on behalf of the user using that authorized client.

45

00:03:07.740  -->  00:03:14.310
Essentially we are pretending to be the user doing this request and I think that means where it is that

46

00:03:14.310  -->  00:03:23.400
tells me that this code should probably be in the User class just because it kind of is the user doing

47

00:03:23.400  -->  00:03:30.820
the request even though it's obviously not it is our code to request but it's pretending to be the user

48

00:03:30.820  -->  00:03:30.840
.

49

00:03:30.840  -->  00:03:34.360
It should probably be in the User class.

50

00:03:34.800  -->  00:03:42.880
So let's go into the user Doppie file and create a method that will perform a request.

51

00:03:45.190  -->  00:03:45.650
Now.

52

00:03:45.830  -->  00:03:52.650
What to call it Twitter underscore request and let's go back to the log file and see what we need for

53

00:03:52.680  -->  00:03:55.360
a request.

54

00:03:55.680  -->  00:04:03.570
The request we're doing here is to the search API and we are just performing this request here as a

55

00:04:03.600  -->  00:04:07.400
get right.

56

00:04:07.440  -->  00:04:12.570
Most of the requests we're going to be doing the Twitter API are going to be get requests but they may

57

00:04:12.570  -->  00:04:13.840
not be they may be post.

58

00:04:13.950  -->  00:04:22.400
So what we need is the you or I that we are requesting and the verb that we want to be using.

59

00:04:22.650  -->  00:04:24.840
So let's go into the user and hearsay.

60

00:04:24.890  -->  00:04:27.100
You are right.

61

00:04:28.280  -->  00:04:30.250
OK.

62

00:04:32.640  -->  00:04:40.820
We need this token object and we need this client in order to create the client we need a consumer.

63

00:04:40.830  -->  00:04:48.190
So that's also going to be something required and we are going to die.

64

00:04:49.350  -->  00:04:51.410
OK.

65

00:04:52.890  -->  00:04:58.790
Let's now copy all of that and paste it in here.

66

00:05:01.050  -->  00:05:07.660
Show what we're doing is first creating the uprights token which uses these users off talking.

67

00:05:07.650  -->  00:05:14.650
So now instead of use a dot author can we can do self self-taught also can suffer or so in secret.

68

00:05:14.940  -->  00:05:25.230
And now it's this user that is doing the request and not an arbitrary user instead of this we can now

69

00:05:25.230  -->  00:05:27.210
put the parameter to the method.

70

00:05:27.210  -->  00:05:28.010
You are right.

71

00:05:28.410  -->  00:05:32.870
And instead of get we can put the verb.

72

00:05:34.310  -->  00:05:36.160
This is still fine.

73

00:05:36.220  -->  00:05:41.280
Now at the end we don't want to return None none remember is a default.

74

00:05:41.310  -->  00:05:45.620
We want to do is return content not encode UTF 8

75

00:05:48.500  -->  00:05:50.500
but we still need to use both too.

76

00:05:50.750  -->  00:05:53.980
So we are going to have to import that.

77

00:05:55.380  -->  00:05:56.900
OK and now we've got you and I.

78

00:05:56.900  -->  00:05:59.070
The verbum the consumer.

79

00:05:59.060  -->  00:06:06.680
Let's look at the consumer list let's get with the consumer ease the consumer is just essentially to

80

00:06:06.690  -->  00:06:07.860
Constance.

81

00:06:07.860  -->  00:06:13.650
That's where the consumer is is the consumer and the consumer secret which are stored in our constant

82

00:06:13.680  -->  00:06:16.320
dot file.

83

00:06:16.680  -->  00:06:22.230
I'm going to copy this consumer going to the Constans file and look at what we've got here is just a

84

00:06:22.230  -->  00:06:25.440
couple of strings really.

85

00:06:25.530  -->  00:06:33.930
And then a few more strings this consumer maybe doesn't belong in the log in the IPY file.

86

00:06:33.930  -->  00:06:41.340
Maybe the consumer should be reusable throughout the entire application and it shouldn't be passed as

87

00:06:41.340  -->  00:06:46.980
a parameter to the Twitter request maybe the user should have access to this consumer.

88

00:06:48.030  -->  00:06:54.360
So let's create the consumer in a different file and import it into here.

89

00:06:55.170  -->  00:06:57.810
Well we're going to do is say from

90

00:07:00.380  -->  00:07:09.870
Twitter utils import consumer and then we're going to go into a project you file Twitter and you tell

91

00:07:09.870  -->  00:07:19.160
us and say consumer is not import or to import Constans.

92

00:07:19.290  -->  00:07:28.590
So now this consumer is in portable from there it means we don't need to pass it in as a parameter.

93

00:07:28.590  -->  00:07:32.090
We can just get it from that file.

94

00:07:32.510  -->  00:07:35.880
And the reason we're doing that is because that consumer is never going to change.

95

00:07:35.910  -->  00:07:41.220
It's always the same thing it's always just the consumer and the consumer secret.

96

00:07:41.250  -->  00:07:45.350
So it doesn't really make sense to pass it as a parameter when we might as well just be some sort of

97

00:07:45.360  -->  00:07:49.870
globally available variable.

98

00:07:49.950  -->  00:07:54.890
It's not like it matters to pass it to some and not to others.

99

00:07:54.930  -->  00:07:58.010
It's always going to be the same.

100

00:07:58.560  -->  00:08:00.270
That means we no longer needed them.

101

00:08:00.710  -->  00:08:08.590
And is there a way we can do is from Twitter utils import consumer and then we can use that there.

102

00:08:08.970  -->  00:08:09.500
OK.

103

00:08:09.620  -->  00:08:13.340
And now what that means is that instead of all of this

104

00:08:16.130  -->  00:08:19.010
we can just delete all that and put in here.

105

00:08:19.050  -->  00:08:23.610
I'm actually going to go back in time and copy this strings so I don't have to go and find it again

106

00:08:23.620  -->  00:08:24.460
.

107

00:08:25.130  -->  00:08:25.550
OK.

108

00:08:25.590  -->  00:08:32.790
And now we can do it now we can delete all that and instead of content the code UTF 8 we're going to

109

00:08:32.790  -->  00:08:38.570
a user don't put request and do that in there.

110

00:08:38.700  -->  00:08:41.410
And the verb is going to be.

111

00:08:42.380  -->  00:08:47.660
Do you now see how this has suddenly become simpler because we have a few users doing the same thing

112

00:08:47.660  -->  00:08:48.380
.

113

00:08:48.450  -->  00:08:57.270
We don't need to rewrite code we just use use or not Twitter or request something as I don't like is

114

00:08:57.260  -->  00:09:00.460
that the majority of the time we're going to be doing get requests.

115

00:09:01.110  -->  00:09:11.190
And yet we still have to pass in get as our verb let's not passing get as a verb and instead have that

116

00:09:11.220  -->  00:09:15.840
as the default value for the parameter a parameter.

117

00:09:15.840  -->  00:09:22.140
In Python can have the default value and what that means is that passing a value when you call the method

118

00:09:22.230  -->  00:09:23.280
will be optional.

119

00:09:23.460  -->  00:09:30.440
And if you don't pass one it will use the default value of the method of the method definition.

120

00:09:31.020  -->  00:09:31.990
So we can do that.

121

00:09:32.120  -->  00:09:41.150
Verb equals get up here means that this argument by default is going to get the value of the string

122

00:09:41.220  -->  00:09:42.740
get.

123

00:09:43.020  -->  00:09:47.740
And when we go back to the log in my final page and doesn't tell us that we have something missing anymore

124

00:09:48.650  -->  00:09:53.370
it just accepts this is valid OK.

125

00:09:54.550  -->  00:09:59.560
So now we are able to do this which simplifies our code a bit.

126

00:09:59.620  -->  00:10:00.820
However we still have to do.

127

00:10:00.820  -->  00:10:08.230
Jason mood's all responses from Twitter are going to be in Jason format so we might as well move the

128

00:10:08.230  -->  00:10:12.940
Jason Doll loads over to the user as well.

129

00:10:13.070  -->  00:10:20.520
Let's go into uder and down here returned Jason downloads and we're going to have to import that.

130

00:10:21.170  -->  00:10:25.160
And now we are returning a Jason File sorry adjacent string.

131

00:10:25.320  -->  00:10:29.030
It's actually a dictionary instead of just a string.

132

00:10:29.290  -->  00:10:35.630
If we go back to our loggin file we no longer need to import just an IP.

133

00:10:35.770  -->  00:10:44.380
And now that's a lot nicer these user that has authorized our apt to use Twitter now can perform a request

134

00:10:45.490  -->  00:10:51.320
and I think that makes sense makes sense for the user to be able to perform requests on his own.

135

00:10:51.430  -->  00:10:59.620
Now the next things that we should be cleaning up or to do with this registration we could put these

136

00:10:59.620  -->  00:11:03.270
methods to register inside the user class.

137

00:11:03.310  -->  00:11:09.220
So let's go back into the user and I'm going to create a method called Get request token

138

00:11:13.100  -->  00:11:14.290
and the get request token.

139

00:11:14.290  -->  00:11:18.030
The only thing it has to do is get this request token down here.

140

00:11:18.250  -->  00:11:21.660
So I'm just going to do this.

141

00:11:21.670  -->  00:11:24.210
Copy all that.

142

00:11:24.280  -->  00:11:26.540
Put that in there.

143

00:11:28.680  -->  00:11:30.900
And I'm going to replace that by return.

144

00:11:30.970  -->  00:11:36.150
So that's going to return the X the request token.

145

00:11:37.090  -->  00:11:43.440
And here I'm going to have to import the constants or import constants of them.

146

00:11:44.140  -->  00:11:52.110
And I'm also going to have to import you RL parts so I'm going to go up here and copy that and import

147

00:11:52.110  -->  00:11:55.270
your parts.

148

00:11:55.270  -->  00:12:03.460
So now the user can get a request token for himself which means that this request token no longer needs

149

00:12:03.460  -->  00:12:06.720
to equal all the stuff.

150

00:12:06.730  -->  00:12:12.330
Now it can just equal user don't get request token.

151

00:12:12.370  -->  00:12:20.710
Now this is not the best way to go about things and you may realize why it is maybe not the best way

152

00:12:20.710  -->  00:12:24.760
to go about things.

153

00:12:24.940  -->  00:12:29.190
I've gone quickly in putting this code in here.

154

00:12:30.250  -->  00:12:33.980
But that doesn't mean it is the best way.

155

00:12:34.410  -->  00:12:42.390
Have a think about why it may not be the best way to put this code here and think about Norton.

156

00:12:42.400  -->  00:12:43.410
Will it work better.

157

00:12:43.420  -->  00:12:48.620
Will it not work but rather in does it make sense for this code.

158

00:12:48.670  -->  00:12:51.760
Getting a request token to be there.

159

00:12:52.570  -->  00:12:57.520
And how does that affect the user object.

160

00:12:57.730  -->  00:13:03.430
If it does at all.

161

00:13:05.650  -->  00:13:12.760
Now I hope you have a chance to think about it maybe pause the video and think about it but it gives

162

00:13:12.760  -->  00:13:17.460
you a hint which is method get request Hawken may be static.

163

00:13:17.470  -->  00:13:20.400
That means that we're not using self.

164

00:13:21.460  -->  00:13:31.130
And really what we're doing in this method is essentially asking Twitter to generate a number and then

165

00:13:31.130  -->  00:13:36.460
when returning that number it doesn't have anything to do with a user at all.

166

00:13:37.510  -->  00:13:39.500
So maybe it shouldn't be the user.

167

00:13:39.550  -->  00:13:41.650
Let's accept that.

168

00:13:41.760  -->  00:13:49.650
Let's cut all that and then go into a Twitter utility file and put it in there instead.

169

00:13:49.660  -->  00:13:51.830
Then let's go back into a user file.

170

00:13:52.300  -->  00:13:57.650
Caught those imports and put them in there as well.

171

00:13:57.760  -->  00:14:04.720
Now I think this makes a bit more sense now to get a request token should be part of some sort of Twitter

172

00:14:04.720  -->  00:14:10.180
connection utility as opposed to the user because the user doesn't really care about the request token

173

00:14:10.630  -->  00:14:13.170
all the user cares about is the access token.

174

00:14:13.390  -->  00:14:14.820
Remember.

175

00:14:16.140  -->  00:14:20.470
OK that means that instead of use user don't get request token which no longer exists.

176

00:14:20.510  -->  00:14:27.090
Now we need to import get requests token from Twitter Eutelsat and we can just use that.

177

00:14:27.870  -->  00:14:30.740
No it's going to give us a dictionary.

178

00:14:30.760  -->  00:14:31.180
Now keep

179

00:14:35.430  -->  00:14:40.540
Now we're printing to go to the site in your browser then we're getting the oil for verifying.

180

00:14:40.830  -->  00:14:46.790
And finally we are creating a request token and then we're setting the verifier and we're using that

181

00:14:47.250  -->  00:14:55.170
to get the access to the Access talk and could potentially be in the user.

182

00:14:55.190  -->  00:15:00.580
But I'm not sure that makes sense until we've seen that in the use.

183

00:15:01.200  -->  00:15:09.180
So all of this stuff should really be sorry all of that stuff should really be inside Twitter utilize

184

00:15:09.310  -->  00:15:10.440
.

185

00:15:10.490  -->  00:15:10.980
OK.

186

00:15:11.150  -->  00:15:13.040
So I'm going to cut to that.

187

00:15:13.100  -->  00:15:20.180
Copy that going to Twitter to utilize and create another method called get very far to get.

188

00:15:20.210  -->  00:15:20.680
Oh wow.

189

00:15:20.750  -->  00:15:24.080
Very fine.

190

00:15:24.090  -->  00:15:25.920
There we go.

191

00:15:27.260  -->  00:15:34.390
And instead of him setting a variable to be what is the pin it is going to return.

192

00:15:34.860  -->  00:15:35.770
What is that.

193

00:15:36.140  -->  00:15:40.370
So it's going to ask the use of all the pinnies and they're going to return that value and naturally

194

00:15:40.380  -->  00:15:42.230
we don't have the request token here.

195

00:15:42.500  -->  00:15:44.420
Although this method is the one that gets it.

196

00:15:44.940  -->  00:15:48.230
So we should pass it in as a parameter.

197

00:15:49.630  -->  00:15:51.920
OK let's go back to the log in.

198

00:15:52.280  -->  00:16:02.790
And now we can say remove that or the verifier can be the get or else verify which we need to import

199

00:16:02.780  -->  00:16:03.120
as well.

200

00:16:03.120  -->  00:16:06.820
So from two to utils get very far.

201

00:16:07.380  -->  00:16:10.240
And that needs the request open so we can pass it in.

202

00:16:10.270  -->  00:16:12.420
We've just got it from there.

203

00:16:13.620  -->  00:16:19.090
Finally the last thing left is to create this access token to get the access token.

204

00:16:19.590  -->  00:16:23.580
So let's copy all of that go back to Twitter utos

205

00:16:27.480  -->  00:16:30.120
and create another method called get access token.

206

00:16:30.210  -->  00:16:36.170
This also needs the request token and it also needs the oil with the verifier.

207

00:16:36.260  -->  00:16:40.990
Now I'm sure you're seeing why this starts to make sense.

208

00:16:41.190  -->  00:16:50.160
This file has the logic to do with Twitter interactions but not to do with users the user has logic

209

00:16:50.150  -->  00:16:51.480
to do with users.

210

00:16:51.650  -->  00:16:58.020
This file get request you can get or verify or get access token as you can see.

211

00:16:58.010  -->  00:17:00.890
This one uses these two.

212

00:17:01.050  -->  00:17:02.490
This one uses that one.

213

00:17:02.490  -->  00:17:03.240
It kind of makes sense.

214

00:17:03.240  -->  00:17:04.560
They are all linked.

215

00:17:05.010  -->  00:17:11.370
And once that happens you can start to see things make more sense.

216

00:17:11.550  -->  00:17:15.460
And here once again we can just return that.

217

00:17:15.470  -->  00:17:21.420
So now what this method is doing is is using the request token to create the token that we're going

218

00:17:21.410  -->  00:17:27.290
to be using for an access token setting the verifier to be what we got from this method of creating

219

00:17:27.300  -->  00:17:32.990
a client with that and then using that to ask for an access token.

220

00:17:34.400  -->  00:17:38.100
So now in the logon there's access to can once again can be something else.

221

00:17:38.120  -->  00:17:43.000
We're going to have to import that get access to it

222

00:17:45.680  -->  00:17:50.280
and to get access to needs the request token and the office verify.

223

00:17:51.530  -->  00:17:54.890
And now this is a lot nicer.

224

00:17:55.050  -->  00:17:59.500
It's no longer plagued with things we no longer have to import.

225

00:17:59.520  -->  00:18:04.890
There's many things the consumer now lives up here which means we no longer need to import it because

226

00:18:04.880  -->  00:18:09.510
we're only using it that in these methods which are all on the same file.

227

00:18:10.220  -->  00:18:19.940
And now we are able to not print that out to just simply see what is happening in this code.

228

00:18:20.240  -->  00:18:27.000
We are easily able to see where initializing the database asking the user for their email loading them

229

00:18:26.990  -->  00:18:32.760
up and if they don't exist we are going to get a request or can get an off very file get an access token

230

00:18:33.170  -->  00:18:39.130
register the user save into a database make a Twitter request and print things out.

231

00:18:39.140  -->  00:18:40.170
It's really simple.

232

00:18:40.160  -->  00:18:41.930
Before it was a pain.

233

00:18:42.410  -->  00:18:48.360
And I'm sure you agree with me before the code is messy and unmaintainable unreadable but because we

234

00:18:48.360  -->  00:18:50.870
know what's going on in that code we can fix that.

235

00:18:50.880  -->  00:18:52.070
We can make it nice.

236

00:18:52.220  -->  00:18:57.290
And now when somebody else comes and looks at this code they will see OK it is easy.

237

00:18:57.300  -->  00:19:03.440
It didn't take much work but really what takes work is to make something that works and then make it

238

00:19:03.440  -->  00:19:05.380
into something that anybody can read.

239

00:19:05.650  -->  00:19:09.650
So I would encourage you to do that in your own code whenever you're writing code.

240

00:19:09.870  -->  00:19:15.750
Make sure that it is maintainable readable and that anybody could understand it.

241

00:19:15.900  -->  00:19:22.740
That's it for this video I'm sure I bored you to death with my rant about clean code but hopefully you

242

00:19:22.740  -->  00:19:25.640
get something out of that when I see you in the very next what you
