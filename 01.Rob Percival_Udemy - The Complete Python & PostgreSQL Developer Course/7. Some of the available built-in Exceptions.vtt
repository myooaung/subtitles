WEBVTT
1

00:00:00.150  -->  00:00:05.130
Hi and we'll come back in this video is going to talk to you about some of the bills to in areas that

2

00:00:05.130  -->  00:00:11.190
are in PIF and I'm going to create a new python file called built in exceptions.

3

00:00:11.250  -->  00:00:17.190
I'm just going to give you a bit of info about some of the built in exceptions there are but also remember

4

00:00:18.300  -->  00:00:25.110
you have the Python documentation gives you all of the information you need about basically everything

5

00:00:25.140  -->  00:00:28.500
Python related and the built in exceptions are one of them.

6

00:00:28.560  -->  00:00:31.210
So you can visit that there.

7

00:00:32.370  -->  00:00:36.230
Some of the most important exceptions however are the following.

8

00:00:36.270  -->  00:00:41.460
The first one is attribute error which is when you access a property of an object that does not have

9

00:00:41.460  -->  00:00:51.090
that property for example class my class.

10

00:00:51.570  -->  00:00:53.100
This will throw an attribute error

11

00:01:00.450  -->  00:01:09.360
if we run this we get an attribute error because my class object X has no attribute my property.

12

00:01:09.360  -->  00:01:12.070
It basically doesn't have my property.

13

00:01:12.080  -->  00:01:18.150
However we can fix that by putting it not in the wrapper but in the init method

14

00:01:24.210  -->  00:01:25.370
there we go.

15

00:01:26.220  -->  00:01:34.410
And now we can run this and we don't get an error anymore because now my property is part of this object

16

00:01:34.410  -->  00:01:34.840
.

17

00:01:34.860  -->  00:01:37.660
It doesn't do anything it says statement seems to have no effect.

18

00:01:37.800  -->  00:01:39.480
But that's not an error.

19

00:01:39.600  -->  00:01:41.360
If anything would be a warning.

20

00:01:41.580  -->  00:01:44.620
It just doesn't do anything but it's not not bad.

21

00:01:45.170  -->  00:01:45.580
OK.

22

00:01:45.780  -->  00:01:48.910
Just for the sake of getting rid of it let's print them.

23

00:01:49.640  -->  00:01:49.860
OK.

24

00:01:49.860  -->  00:01:51.530
Now we get five.

25

00:01:52.110  -->  00:01:59.040
Another important error is the import error which is what happens when you try to import something that

26

00:01:59.040  -->  00:02:04.550
for example doesn't exist such as import my awesome module.

27

00:02:04.980  -->  00:02:10.630
If we run this we get an import error because that doesn't exist.

28

00:02:10.680  -->  00:02:12.010
OK.

29

00:02:13.830  -->  00:02:18.360
I'm going to just come in that out this code is available by the way in the lecture of A at the very

30

00:02:18.360  -->  00:02:26.520
end of this section and another one is key error which is when you try to access a key of a dictionary

31

00:02:26.580  -->  00:02:29.580
that has that where the key doesn't exist.

32

00:02:29.580  -->  00:02:36.900
For example say we have a mind dict which use X equals 5 y equals 10.

33

00:02:36.900  -->  00:02:45.840
We've got this dict and we print my dict Zed when we run this code we get a key error for the key Zad

34

00:02:46.080  -->  00:02:49.190
the keys and it's not in this dictionary.

35

00:02:49.200  -->  00:02:52.320
That's a key error.

36

00:02:52.320  -->  00:02:59.340
Next one we have runtime error which is just a generic error which doesn't fit in any of the other categories

37

00:03:00.420  -->  00:03:08.940
we have type era which is when we try to run a built in function and we give it a parameter of the correct

38

00:03:09.270  -->  00:03:10.880
story of the wrong type.

39

00:03:10.920  -->  00:03:19.380
For example if we try to do in a nutshell it's really not a bug int am that

40

00:03:22.350  -->  00:03:23.730
we run this.

41

00:03:23.910  -->  00:03:32.340
Let me come about when we run these we get a type error because he says the arguments to the function

42

00:03:32.730  -->  00:03:39.080
must be a string it bytes like object or a number but not a list.

43

00:03:39.090  -->  00:03:42.430
Basically what it's telling you is that you sent in the wrong type.

44

00:03:43.010  -->  00:03:45.930
OK so that's what a type error it is.

45

00:03:45.930  -->  00:03:53.280
We've also got a value error which is like type error when you send in something to a built in function

46

00:03:53.310  -->  00:03:57.890
that is of the correct type but doesn't have a valid value.

47

00:03:57.960  -->  00:04:01.920
For example in a we've seen this one before.

48

00:04:02.130  -->  00:04:05.260
When we run that we get a value error because the A.

49

00:04:05.280  -->  00:04:07.650
Even though it is a string and that is valid.

50

00:04:07.650  -->  00:04:09.660
For example this would be valid.

51

00:04:09.660  -->  00:04:13.650
We just get 5 when we run this.

52

00:04:13.950  -->  00:04:18.690
So every last our 5 was printed above but nevertheless that works when we do this.

53

00:04:18.690  -->  00:04:25.070
The "a" is a string which is a valid type but it is not the correct value.

54

00:04:25.110  -->  00:04:27.090
So that's why it's a value error.

55

00:04:27.870  -->  00:04:33.840
Then we've also got an IO error which is what happens when you tried to access files and things like

56

00:04:33.840  -->  00:04:34.050
that.

57

00:04:34.050  -->  00:04:41.940
For example if I need to open a file such as my file Dotty XTi for reading we've looked at this before

58

00:04:42.340  -->  00:04:43.320
I run this.

59

00:04:43.400  -->  00:04:47.300
It gives me well in this case it gives me a file not found error which is a more specific type of IO

60

00:04:47.300  -->  00:04:51.850
era and but nevertheless that is an error.

61

00:04:52.110  -->  00:04:57.300
So that's just one of these instances where they've created their own exception which subclass is IO

62

00:04:57.300  -->  00:05:00.170
error and gives you a bit more information.

63

00:05:00.240  -->  00:05:03.510
I would have expected IO error but instead I got more info.

64

00:05:03.510  -->  00:05:06.430
I got file not found error which is nice.

65

00:05:06.430  -->  00:05:08.970
I got a bit more information there with the error message.

66

00:05:09.570  -->  00:05:14.520
OK so these are some of the most important errors that you're going to encounter but they are not all

67

00:05:14.530  -->  00:05:14.590
.

68

00:05:14.640  -->  00:05:18.570
If you want all of the errors please do visit this link there.

69

00:05:18.690  -->  00:05:25.620
Dogstar Python dot org slash 3 slash library slash exceptions dot page DML.

70

00:05:25.710  -->  00:05:34.530
Now this code is going to be available so you can give it a wee look and to play around with it and

71

00:05:34.530  -->  00:05:36.250
just remember these errors exist.

72

00:05:36.300  -->  00:05:39.330
They get reused quite often.

73

00:05:39.600  -->  00:05:45.510
It's important that you realize when these errors might arise and protect yourself and your applications

74

00:05:45.510  -->  00:05:46.690
against them.

75

00:05:47.460  -->  00:05:49.140
OK that's everything for this video.

76

00:05:49.140  -->  00:05:52.280
Just wanted to tell you a bit about the built in arrows that are in Python.

77

00:05:52.290  -->  00:05:56.760
Remember there's loads more and I hope you enjoy that and learn something and I'll see you in the very

78

00:05:56.760  -->  00:05:58.370
next one.
