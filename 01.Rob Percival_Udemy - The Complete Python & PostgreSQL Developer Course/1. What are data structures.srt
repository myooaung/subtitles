1

00:00:00,150  -->  00:00:05,860
Time will come back in this video we're looking at data structures and answering the question what is

2

00:00:05,860  -->  00:00:11,240
a data structure and what are we going to be looking at a sample data structure here.

3

00:00:11,280  -->  00:00:15,220
The first question to answer is Why are data structures important.

4

00:00:15,810  -->  00:00:17,870
And we're going to be looking at that actually.

5

00:00:18,090  -->  00:00:25,560
But just know that first and foremost even if you don't use many data structures in your job when you're

6

00:00:25,560  -->  00:00:31,710
a software developer you are going to need data structures to get a job because most interviews are

7

00:00:31,710  -->  00:00:34,200
about algorithms and data structures.

8

00:00:34,200  -->  00:00:39,570
So this is an important topic not only because it's useful but also because you're going to need it

9

00:00:39,990  -->  00:00:40,980
in the interviews.

10

00:00:41,160  -->  00:00:44,740
If you do do any but nevertheless it's still interesting to know.

11

00:00:44,970  -->  00:00:49,670
So a data structure is just a way to store data.

12

00:00:49,700  -->  00:00:51,170
It kind of makes sense right.

13

00:00:51,180  -->  00:00:54,930
We've looked at some ways to store data in a computer program.

14

00:00:55,050  -->  00:01:01,380
I don't mean store data in a computer like a database would be but rather to store data in a computer

15

00:01:01,380  -->  00:01:02,090
program.

16

00:01:02,100  -->  00:01:04,810
We've looked at some such as the list before.

17

00:01:04,860  -->  00:01:10,830
We've looked at a dictionary and when we've looked at the set which is actually another one.

18

00:01:10,830  -->  00:01:15,720
So these are three ways that we can store data in a computer program and so far we've only looked at

19

00:01:15,720  -->  00:01:16,840
those three.

20

00:01:16,870  -->  00:01:23,400
However there's plenty more and different data structures exist because some are faster than others

21

00:01:23,520  -->  00:01:25,530
or more suitable for some tasks.

22

00:01:25,530  -->  00:01:33,630
We're going to look at an example of a data structure right now I'm going to give you some description

23

00:01:33,990  -->  00:01:39,220
about this data structure and hopefully you'll be able to guess what the District structure is.

24

00:01:39,870  -->  00:01:42,030
I'm going to have a list.

25

00:01:42,300  -->  00:01:45,900
And in this list there are a few constraints.

26

00:01:45,900  -->  00:01:52,620
When you add an element to the list it gets added at the end of the list so the new element becomes

27

00:01:52,620  -->  00:01:55,300
the last element of the list.

28

00:01:56,310  -->  00:02:01,860
When you remove an element the element gets removed from the beginning of the list so new elements come

29

00:02:01,860  -->  00:02:02,700
in at the back.

30

00:02:02,850  -->  00:02:08,010
Elements leave from the front.

31

00:02:08,010  -->  00:02:12,680
What is the structure called that how is it called now.

32

00:02:12,720  -->  00:02:16,420
I'll give you a bit more information now about this data structure.

33

00:02:16,500  -->  00:02:18,010
We've got the data structure here.

34

00:02:18,030  -->  00:02:19,770
This is your list right now.

35

00:02:19,770  -->  00:02:22,430
It has I think 16 spaces maybe a bit less.

36

00:02:22,440  -->  00:02:23,270
Doesn't matter.

37

00:02:23,610  -->  00:02:30,120
And you have that first element there which is in orange and you're going to add a new element at the

38

00:02:30,120  -->  00:02:34,000
end which is the first element in this case because there are none so far.

39

00:02:34,200  -->  00:02:39,500
So the end of the list is the first element in this case.

40

00:02:39,510  -->  00:02:42,350
So you and your element and then you going to add another one at the end.

41

00:02:42,480  -->  00:02:49,700
And now the end now becomes the second element and then another one and another one and another.

42

00:02:49,770  -->  00:02:53,780
Now when it comes to removing elements as I said they're going to be removed from the front.

43

00:02:53,780  -->  00:03:00,510
So the first one to go is going to be the 15 which was the first one that we added right.

44

00:03:00,600  -->  00:03:07,260
The first element we added was 15 and then at the end we added 31 and then at the end we have had 151

45

00:03:07,380  -->  00:03:10,370
then 13 then 65 than 1.

46

00:03:10,380  -->  00:03:12,190
So the first element we added was 15.

47

00:03:12,240  -->  00:03:18,750
And that's going to be the first one to go because we remove from the start to remove the 15 then we

48

00:03:18,750  -->  00:03:21,670
remove the 31 and so.

49

00:03:23,140  -->  00:03:28,740
So once again the mystery the structure elements get appended at the end and elements get removed from

50

00:03:28,740  -->  00:03:30,280
the beginning.

51

00:03:30,330  -->  00:03:35,370
Take a couple of moments in front of gas try to relate this data structure to something that you might

52

00:03:35,370  -->  00:03:40,350
see in the real world and you might come up with a name for it.

53

00:03:40,680  -->  00:03:41,970
And if you don't don't worry

54

00:03:45,040  -->  00:03:51,540
hopefully you will be able you were able to guess and the name of the data structure is at the Q.

55

00:03:51,930  -->  00:03:58,120
And if you didn't get it now it's probably clicking just like in people an actual Q For example when

56

00:03:58,120  -->  00:04:02,270
you queuing for the bank and the first person in the queue is going to be the first one leaving that

57

00:04:02,320  -->  00:04:07,140
you and you when you join the queue you will join in at the end.

58

00:04:07,140  -->  00:04:11,430
So they say the structure is called the queue and we can create this in programming.

59

00:04:11,430  -->  00:04:13,790
We can create a list that has these constraints.

60

00:04:13,800  -->  00:04:18,460
We can only add elements at the end and remove them from the beginning and why.

61

00:04:18,480  -->  00:04:19,350
Why would you do that.

62

00:04:19,350  -->  00:04:21,450
What would you use a Q.

63

00:04:21,570  -->  00:04:23,490
I'm going to give you one example.

64

00:04:23,550  -->  00:04:30,380
A web application under heavy traffic might use a Q to determine which requests to respond to first

65

00:04:30,380  -->  00:04:31,750
.

66

00:04:32,040  -->  00:04:37,350
For example say you have your Piscean application which is a web location like we made previously and

67

00:04:37,350  -->  00:04:40,860
there's a million users going into your application at the same time.

68

00:04:40,890  -->  00:04:47,190
But your application can only respond to 64 requests at any one time simultaneously.

69

00:04:47,190  -->  00:04:51,660
So what you would do is you would say OK the first 64 people that entered the application I'm going

70

00:04:51,660  -->  00:04:57,330
to answer their request first I'm going to give them my HDMI code first and then I'm going to get the

71

00:04:57,330  -->  00:05:01,310
next 64 people and I'm going to give them HDMI code and then I'm going to get the next 64 people in

72

00:05:01,330  -->  00:05:07,710
jail so that's a cue the people get put in a queue waiting for your application to respond to their

73

00:05:07,710  -->  00:05:09,580
requests.

74

00:05:09,690  -->  00:05:13,810
So the first request will get responded to first and then the second and so.

75

00:05:14,540  -->  00:05:18,870
So you might see why a queue could be useful and there's plenty of other uses for queues cuter.

76

00:05:18,870  -->  00:05:24,060
Probably one of the most used data structures right now.

77

00:05:24,060  -->  00:05:29,730
Other common nigger structures apart from the queue are the stack which is similar to a queue but only

78

00:05:29,730  -->  00:05:30,210
in reverse.

79

00:05:30,210  -->  00:05:32,580
We're going to look about very soon.

80

00:05:32,580  -->  00:05:36,890
The set which we've looked at already in Python and they are very easy to use.

81

00:05:36,900  -->  00:05:45,360
They're used for calculating the commonality between different unique elements and also one important

82

00:05:45,360  -->  00:05:50,810
one is the binary tree and we've actually used that when we were using Pascola sequel.

83

00:05:50,910  -->  00:05:56,670
The indices in Potter sequel are constructed using binary trees and we're going to look at exactly how

84

00:05:56,670  -->  00:05:58,760
they work and why they're useful.

85

00:05:59,100  -->  00:06:02,830
Excuse me as well throughout the next few videos.

86

00:06:03,060  -->  00:06:03,930
So thanks for watching.

87

00:06:03,930  -->  00:06:06,920
Hope you learned something and I'll see you in the very next video.
