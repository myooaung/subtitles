WEBVTT
1

00:00:00.360  -->  00:00:03.770
Hi and welcome back in this video we're looking at functions.

2

00:00:04.170  -->  00:00:10.050
There's a number of functions that we can use that are built in to sequel and some that are unique to

3

00:00:10.050  -->  00:00:16.590
postscripts sequel and we also can create our own functions which is quite interesting and something

4

00:00:16.590  -->  00:00:20.060
that you couldn't usually do before in relational databases.

5

00:00:20.520  -->  00:00:25.310
Creating our own functions is quite complex and we're not going to be looking at that in this venue

6

00:00:25.740  -->  00:00:29.970
but we're going to be looking at some of the functions that we can use that are already built in to

7

00:00:29.980  -->  00:00:34.310
sequel or unique to Pascua sequel.

8

00:00:34.860  -->  00:00:40.020
I've deleted my views from the last video because they're not really necessary anymore.

9

00:00:40.620  -->  00:00:48.720
And what I'm going to do is just fire up the sequel editor and then come up with a couple of functions

10

00:00:49.520  -->  00:00:54.190
or rather show you a couple of functions that we've already seen before.

11

00:00:54.420  -->  00:00:59.850
The first function that we've already seen before is the Count function which is used to count the number

12

00:00:59.850  -->  00:01:07.850
of occurrences of something so select customers don't first name customers don't last name count just

13

00:01:07.870  -->  00:01:18.030
use not Id ask purchase count and Roamer we can give aliases from customers in adjoining purchases and

14

00:01:18.030  -->  00:01:18.960
we know all this stuff.

15

00:01:18.960  -->  00:01:21.170
That's why I'm going quite quickly.

16

00:01:21.190  -->  00:01:22.170
I don't want to bore you

17

00:01:23.530  -->  00:01:27.550
.

18

00:01:28.100  -->  00:01:28.920
We've seen this before.

19

00:01:28.940  -->  00:01:30.200
Right.

20

00:01:30.630  -->  00:01:36.710
We know that we can select things from customers and we can join it with purchases and they're selecting

21

00:01:36.770  -->  00:01:44.290
column and then we can group it by customer ID and that gives us eventually the customer name only once

22

00:01:44.290  -->  00:01:44.520
.

23

00:01:44.700  -->  00:01:53.340
And then if we do count of purchases ID that gets all of the purchases for that customer and the customer

24

00:01:53.340  -->  00:01:58.020
that is being grouped by and it gives us the count of them.

25

00:01:58.110  -->  00:02:00.470
Similarly we could use some.

26

00:02:00.570  -->  00:02:07.080
And I would add the purchase the purchase IDs together is not very useful data and because the IDs don't

27

00:02:07.080  -->  00:02:09.040
really mean anything to be added.

28

00:02:09.570  -->  00:02:12.430
But these are two things.

29

00:02:12.540  -->  00:02:19.110
Two functions that we've looked at before count and some we used some to calculate the total revenue

30

00:02:19.110  -->  00:02:21.670
generated per customer before.

31

00:02:22.640  -->  00:02:27.600
Okay he has a couple more that we can use and there's a bunch of functions that you probably should

32

00:02:27.600  -->  00:02:28.780
know about.

33

00:02:28.860  -->  00:02:32.310
One of the very useful functions is a Viji for average.

34

00:02:32.310  -->  00:02:43.590
So you can select average items price from items and you can probably wonder what this does is the average

35

00:02:43.650  -->  00:02:51.360
selling price of an item that is and basically the average price of all our right homes together divided

36

00:02:51.360  -->  00:02:52.710
by the number of items

37

00:02:55.590  -->  00:03:00.060
we can also do the average

38

00:03:03.060  -->  00:03:05.640
cost per order.

39

00:03:05.760  -->  00:03:11.340
So not to the average price of our items but rather the average revenue generated per order.

40

00:03:11.340  -->  00:03:19.590
So this would be select average items price from items inner join purchases on items that Id equal purchases

41

00:03:19.690  -->  00:03:28.080
or item id that 72 remember because this gives us the items that we've actually sold.

42

00:03:28.740  -->  00:03:32.790
If we remove this this gives us the items we actually have.

43

00:03:33.240  -->  00:03:37.570
So that's that's the difference that between these two queries.

44

00:03:37.590  -->  00:03:39.170
Remember I'm just going to select staff.

45

00:03:39.180  -->  00:03:40.430
You guys can see this.

46

00:03:40.800  -->  00:03:44.270
Select start from items in a joint purchases.

47

00:03:44.280  -->  00:03:51.170
Give to me the sales that we've made we've sold two fan pens to ink's two hard drives.

48

00:03:51.310  -->  00:03:56.820
If I just select stuff from items this gives me the items that we have which we've put a bunch of pencils

49

00:03:56.820  -->  00:04:01.550
there now but we've also got laptops and one for $15 a pan.

50

00:04:02.430  -->  00:04:06.780
So that's the difference between those two.

51

00:04:06.840  -->  00:04:15.520
We can also do and calculate the sale that has generated the most revenue in our business.

52

00:04:15.720  -->  00:04:24.330
And we already know how to do that using an order by together with me and he has a good point and time

53

00:04:24.660  -->  00:04:31.890
for you to pause the video and try to come up with a sequel that would generate the highest revenue

54

00:04:31.890  -->  00:04:35.310
generating order purchase.

55

00:04:35.430  -->  00:04:40.290
Just try it out because by buying trying and by typing the code out is it going to be the best way to

56

00:04:40.290  -->  00:04:46.410
learn so that the highest revenue sale is where I'm interested.

57

00:04:46.410  -->  00:04:48.320
Just the one highest revenue sale

58

00:04:52.920  -->  00:04:54.270
and I'm sure you got it.

59

00:04:54.380  -->  00:05:03.000
What I would do is select items not name and items not price from items.

60

00:05:03.000  -->  00:05:08.820
And then you would join this with purchases because what we're interested in in the highest purchase

61

00:05:08.810  -->  00:05:18.050
sale and the highest revenue on a purchase on items the ID equal purchase stock item ID.

62

00:05:19.170  -->  00:05:24.370
And as you know this gives me all of my items and all of that prices.

63

00:05:25.740  -->  00:05:29.100
But we can order by items not price

64

00:05:31.950  -->  00:05:37.470
and that gives me the item price ordered assentingly by default.

65

00:05:37.530  -->  00:05:45.180
We can do the sending and this gives me the top most sale the purchase that generally give the most

66

00:05:45.180  -->  00:05:52.710
revenue at the top and then we can do limit one day we can.

67

00:05:53.190  -->  00:05:58.260
This is one way of doing it but it's quite a long way and you have to sort your items and then you have

68

00:05:58.250  -->  00:05:59.150
to limit them.

69

00:05:59.160  -->  00:06:02.540
These things are not free in terms of performance.

70

00:06:02.610  -->  00:06:06.720
So what's best is potentially to do select

71

00:06:09.600  -->  00:06:11.460
max items price

72

00:06:14.610  -->  00:06:21.480
from that and that is going to give me two hundred seventy five point fifty but we lose out on the name

73

00:06:21.480  -->  00:06:23.440
of the item.

74

00:06:23.510  -->  00:06:30.480
So not maybe not ideal maybe not what you want if you were interested in getting the maximum revenue

75

00:06:30.480  -->  00:06:36.650
generated in a purchase that I would do it this way if you wanted to find out the name of the item that

76

00:06:36.660  -->  00:06:41.030
generated the most money then you would need to use the other method.

77

00:06:41.160  -->  00:06:45.150
That's just a small limitation of this.

78

00:06:46.200  -->  00:06:46.730
Okay.

79

00:06:46.980  -->  00:06:54.690
Let's also look at a very useful construct which is called having the having construct allows us to

80

00:06:55.010  -->  00:06:58.820
filter after the aggregation has taken place.

81

00:06:59.220  -->  00:07:00.110
Here's what I mean.

82

00:07:00.540  -->  00:07:09.360
Let's say I want to select a customer's first name customer's last name and the count of purchases ID

83

00:07:12.420  -->  00:07:14.040
as purchase count

84

00:07:16.860  -->  00:07:17.640
from customers.

85

00:07:17.630  -->  00:07:24.730
I'm just doing this quickly and again we've seen this before.

86

00:07:28.800  -->  00:07:34.110
We know what this does this and there's one work but they select the customer name the customer last

87

00:07:34.110  -->  00:07:36.200
name and the count of purchases ID.

88

00:07:36.220  -->  00:07:43.940
If I group by customers don't mind we've seen this plenty of times and we saw it in the beginning of

89

00:07:43.950  -->  00:07:44.340
this video.

90

00:07:44.340  -->  00:07:47.180
In fact I think of the last few I can remember.

91

00:07:47.190  -->  00:07:52.350
But either way this gives us the first name and the last name of our customer and how many purchases

92

00:07:52.350  -->  00:07:54.400
they've done great.

93

00:07:55.050  -->  00:07:57.500
Here's a challenge for you.

94

00:07:57.770  -->  00:08:06.300
I only want to get those customers that have over three orders over three purchases.

95

00:08:06.330  -->  00:08:08.420
Any idea how I might go about doing

96

00:08:13.880  -->  00:08:15.640
so.

97

00:08:15.720  -->  00:08:29.100
There is no way to do it with the stuff we've seen already because you cannot do way count or rather

98

00:08:29.160  -->  00:08:34.850
where purchase count greater than two and three.

99

00:08:35.100  -->  00:08:40.290
If you try to run this it tells you you can put a ware in there.

100

00:08:40.540  -->  00:08:42.930
The way it cannot go after group buy.

101

00:08:43.160  -->  00:08:50.090
Because here you've already grouped and you just can't use where after the aggregation clause which

102

00:08:50.100  -->  00:08:50.990
is the group by.

103

00:08:51.000  -->  00:08:53.010
That's what aggregates the data together.

104

00:08:53.090  -->  00:08:56.630
So we can do this.

105

00:08:56.700  -->  00:09:02.090
So instead of way we just change the word and we use having.

106

00:09:02.300  -->  00:09:08.350
And I actually kind make sense in English grouping by customer id having three purchases or more rather

107

00:09:08.350  -->  00:09:11.190
most of the purchases.

108

00:09:11.460  -->  00:09:13.620
But the column doesn't exist yet.

109

00:09:13.640  -->  00:09:18.400
So we have to do this again.

110

00:09:20.040  -->  00:09:26.020
And that gives us now the customer has more than three purchases.

111

00:09:26.040  -->  00:09:33.330
So this having happens after we have grouped by customer ID.

112

00:09:33.840  -->  00:09:40.400
But before we've selected the columns naturally because it inside the query that selects.

113

00:09:40.560  -->  00:09:47.520
So this column name here isn't available for us to use but we can still use aggregating functions like

114

00:09:47.610  -->  00:09:56.670
count on all of the rows available after we have grouped by a useful construct that lets us in this

115

00:09:56.660  -->  00:10:00.340
case get the customers that have the most purchases.

116

00:10:00.440  -->  00:10:04.300
Once again we go back in time lapse video.

117

00:10:04.320  -->  00:10:10.260
We could create a view for this and that would let us get the customers that have the most purchases

118

00:10:10.520  -->  00:10:11.960
you know all that stuff.

119

00:10:11.970  -->  00:10:18.150
So when we when it comes to interacting with data and retrieving data sequel is actually really powerful

120

00:10:18.140  -->  00:10:24.170
in the way that it lets you organize the retrieval and make it easy for your business people or yourself

121

00:10:24.780  -->  00:10:26.800
to retrieve data.

122

00:10:26.800  -->  00:10:34.200
So we can create a view from this room or we could just leave it at this.

123

00:10:34.800  -->  00:10:41.460
OK so this was a bit of a bit of insight into some of the functions that we can use We've looked at

124

00:10:41.930  -->  00:10:47.930
the count some average and Max and there's a few others that you'll use in the same way like mine which

125

00:10:48.060  -->  00:10:50.200
gives you the minimum.

126

00:10:51.020  -->  00:10:52.460
And there's a couple of others.

127

00:10:52.600  -->  00:10:54.220
Are not very difficult to use.

128

00:10:54.270  -->  00:11:00.680
And if you ever encounter the need of learning about other functions just type it in Google.

129

00:11:00.680  -->  00:11:02.460
How do I do this.

130

00:11:02.550  -->  00:11:04.250
And it'll be exactly the same way.

131

00:11:04.250  -->  00:11:09.840
But it may just be a specialized name depending on the version of post-career sequel you using or how

132

00:11:09.930  -->  00:11:16.150
you know there's no point in me telling you you can use all of this massive list of functions when they

133

00:11:16.140  -->  00:11:20.820
are all essentially the same they just return slightly different things.

134

00:11:20.900  -->  00:11:27.980
And also we've looked at having construct which lets you use aggregating functions down there after

135

00:11:27.990  -->  00:11:30.250
the data the grouping.

136

00:11:30.300  -->  00:11:35.040
So with that said hope you learn something in this video and I see you in the next one.
