WEBVTT
1

00:00:00.170  -->  00:00:06.360
Hyde will come back in this video I'd like to introduce you to a flask in the section we've already

2

00:00:06.360  -->  00:00:11.340
looked at retrieving data from an API and we've used that to log in with Twitter.

3

00:00:11.790  -->  00:00:18.030
And I hope that was a bit of a learning experience not only quote unquote how to log in with Twitter

4

00:00:18.540  -->  00:00:27.330
but also how API is work that the web works via web requests and that uses DP and there's a bunch of

5

00:00:27.330  -->  00:00:33.990
verbs you can use if when requesting from API to just get usually means to retrieve some data.

6

00:00:34.110  -->  00:00:36.870
Post usually means you are adding some data.

7

00:00:37.200  -->  00:00:38.220
Put the Leite.

8

00:00:38.280  -->  00:00:40.650
There's a few others.

9

00:00:40.650  -->  00:00:47.610
We've also learned a bit more about cleaning up our code Object-Oriented Programming is saving the old

10

00:00:47.640  -->  00:00:48.900
tokens to the database.

11

00:00:48.930  -->  00:00:50.940
We've learned about O Mouth.

12

00:00:51.030  -->  00:00:59.640
We've learned a few things but now it's time to take that to the next level and instead of just stopping

13

00:00:59.700  -->  00:01:09.630
at this kind of nice command line application that allows us to add a user via Twitter and print out

14

00:01:09.640  -->  00:01:13.320
some pinkest I think we can do better than that.

15

00:01:13.500  -->  00:01:21.300
So in the next few videos I'm going to be introducing you to flask and a flask is another python library

16

00:01:21.930  -->  00:01:26.890
which allows you to create web applications.

17

00:01:26.940  -->  00:01:36.210
Now what this means is that instead of just requesting data from an API we are going to be creating

18

00:01:36.810  -->  00:01:42.600
an API and more than that we're going to be creating just the I really we're going to be creating just

19

00:01:42.600  -->  00:01:49.110
an interface into our program is not going to be used for Application Programming is going to be used

20

00:01:49.110  -->  00:01:54.930
by our users and it's just going to be essentially what is normally known as a web site or a web application

21

00:01:54.930  -->  00:01:55.860
.

22

00:01:55.860  -->  00:02:02.520
So we're going to be creating a web interface into our applications where users can view our application

23

00:02:02.610  -->  00:02:08.530
logon with Twitter you know see images from a filter and that sort of stuff.

24

00:02:09.020  -->  00:02:09.660
OK.

25

00:02:10.260  -->  00:02:16.030
So in this video let's just install the requirement and set a most basic app up.

26

00:02:16.140  -->  00:02:20.350
Let's go into the requirements not takes the file and add a new library.

27

00:02:20.400  -->  00:02:26.450
It's going to be flask with a capital F equal equal 0.10 point one.

28

00:02:26.720  -->  00:02:30.700
This version of flask has been the latest version for a while.

29

00:02:30.750  -->  00:02:33.990
So when it does change a lot of things are going to change.

30

00:02:33.990  -->  00:02:39.760
I recommend you use this specific version and you can do that by doing equal equal 0.10 we want like

31

00:02:39.800  -->  00:02:40.430
so.

32

00:02:40.870  -->  00:02:46.440
And and what I mean with that is that in a few years down the line when the version does change to 0.11

33

00:02:47.010  -->  00:02:52.050
so many things are going to be different that your application will stop working unless you specify

34

00:02:52.080  -->  00:02:53.260
this version.

35

00:02:53.720  -->  00:03:02.080
OK then let's reichlich the project and create a new python file called app and then install flask them

36

00:03:02.200  -->  00:03:03.100
.

37

00:03:03.990  -->  00:03:08.280
And now we can create our most basic flask application.

38

00:03:08.280  -->  00:03:15.680
But first remember Twitter has an API and that API is just like a web.

39

00:03:15.690  -->  00:03:22.350
You are real history P colon slash slash API dot Twitter dot com blah blah blah.

40

00:03:22.500  -->  00:03:29.760
It's just like a normal web site except when you make a request to it you need to send in your authorization

41

00:03:29.790  -->  00:03:36.670
tokens and when you get back is instead of a web page it's some Jason code.

42

00:03:36.690  -->  00:03:42.990
Remember the treats and stuff that we go back what we are going to be doing is exactly the same thing

43

00:03:43.050  -->  00:03:44.400
as the Twitter API.

44

00:03:44.670  -->  00:03:46.350
We're going to be making our API.

45

00:03:46.500  -->  00:03:47.970
But instead of sending back.

46

00:03:48.030  -->  00:03:50.430
Jason sorry about that.

47

00:03:50.450  -->  00:03:53.500
We're going to be sending back a Web site.

48

00:03:53.880  -->  00:03:54.530
OK.

49

00:03:54.810  -->  00:04:02.680
So let's say from flask import flask and then say app equals flask underskirt underscore name underscored

50

00:04:02.690  -->  00:04:03.610
underscore.

51

00:04:03.900  -->  00:04:07.490
Notice this is two separate underscores and not just one.

52

00:04:08.430  -->  00:04:14.610
So what we're doing is we're importing a class called flask from the flask package where we've installed

53

00:04:15.030  -->  00:04:20.370
and then we're saying we're creating a variable called app and we're saying that that variable contains

54

00:04:21.030  -->  00:04:25.710
that object and the parameter we're passing to that object is underscored underscore name underscore

55

00:04:25.710  -->  00:04:27.240
underscore.

56

00:04:27.630  -->  00:04:34.960
I'm going to set in a breakpoint there and then right click anywhere and debug app and noticed what's

57

00:04:35.070  -->  00:04:42.000
the name on this to underscore variable as it is to underscore main underscore underscore as a string

58

00:04:42.000  -->  00:04:42.660
.

59

00:04:42.660  -->  00:04:47.850
So that is what the name of the police Americanness will mean on those grounds.

60

00:04:48.210  -->  00:04:54.490
Now that is a special type of content.

61

00:04:54.510  -->  00:04:56.150
Sorry that didn't come out right.

62

00:04:56.170  -->  00:04:57.160
No special type of contd.

63

00:04:57.180  -->  00:05:04.560
It's a special contract when name equals almost identical mean to underscore that means that we ran

64

00:05:04.710  -->  00:05:08.260
this file we ran the app Doppie Wi-Fi.

65

00:05:09.100  -->  00:05:11.210
OK I'm going to stop right there.

66

00:05:11.310  -->  00:05:12.670
Go into the log in Doppie.

67

00:05:12.690  -->  00:05:17.620
Set a breakpoint essentially anywhere and then right click on debug.

68

00:05:17.700  -->  00:05:22.660
Notice that on this one the name on the underscore is still on the one that could mean on this one that

69

00:05:24.300  -->  00:05:31.970
and that is because now we ran the loggin file so whichever file we run it's on the underscore name

70

00:05:31.980  -->  00:05:36.320
on this one underscore is going to be on this one the main this score.

71

00:05:36.590  -->  00:05:37.260
OK.

72

00:05:37.560  -->  00:05:42.010
That's always the case the file that you run is going to have that name.

73

00:05:42.450  -->  00:05:44.520
Other files will not have that name.

74

00:05:44.780  -->  00:05:46.100
OK.

75

00:05:47.690  -->  00:05:55.990
Then what we want to do is say app dot run and then we'll see Port equals Formanek file.

76

00:05:56.390  -->  00:06:02.210
You can set essentially any port you want there but for the 9:5 is a good port.

77

00:06:02.270  -->  00:06:05.360
It probably won't cause you any problems with it.

78

00:06:05.630  -->  00:06:12.840
If that does fail if you press run and it doesn't work just change the port number and I'm sure it will

79

00:06:12.830  -->  00:06:14.370
work OK.

80

00:06:15.060  -->  00:06:15.740
OK.

81

00:06:15.890  -->  00:06:19.400
So what is now happening here.

82

00:06:19.460  -->  00:06:21.720
We've created an app and we fully to run.

83

00:06:21.870  -->  00:06:23.480
But what does this app do.

84

00:06:23.880  -->  00:06:25.960
Well let's press play again.

85

00:06:26.000  -->  00:06:32.670
And now it tells you running on hatred dippie colon slash slash one to seven point 0.00 point 1 call

86

00:06:32.660  -->  00:06:34.440
on 4 9 9 5.

87

00:06:34.580  -->  00:06:43.250
I'm sure you recognize the 4 9 9 5 as being the Pt. 1 2 7.00 point option 1 is equivalent to localhost

88

00:06:43.310  -->  00:06:43.600
.

89

00:06:43.760  -->  00:06:46.850
And we saw that in the sequel in the Portugal sections.

90

00:06:47.060  -->  00:06:49.860
Localhost is your current computer.

91

00:06:50.100  -->  00:06:57.540
So what this is saying is that this is running in your local computer on port 4 9 9 5 Your computer

92

00:06:57.530  -->  00:07:03.810
has a lot of ports and applications can attach to a port and what that means when an application attaches

93

00:07:03.810  -->  00:07:04.360
to the port.

94

00:07:04.380  -->  00:07:08.420
Is that you can communicate with that application via the port.

95

00:07:08.430  -->  00:07:13.220
It's essentially like an interface but the port is very limited in what it can do we can only to receive

96

00:07:14.150  -->  00:07:16.880
data packages data packets.

97

00:07:16.880  -->  00:07:17.770
Sorry.

98

00:07:17.780  -->  00:07:23.570
So what this is saying is that we are running this application in the local host your common computer

99

00:07:23.750  -->  00:07:31.310
on port 4 9 9 5 and we can actually click on that is a link and that loads up Safari or in your case

100

00:07:31.310  -->  00:07:34.920
Google Chrome Internet Explorer whatever you are using.

101

00:07:34.940  -->  00:07:43.310
So this is a Web site these 6:59 point 0.03 one is a is a web site but it says not found it says the

102

00:07:43.310  -->  00:07:45.920
request that you or I will was not found on the server.

103

00:07:46.490  -->  00:07:47.020
OK.

104

00:07:47.270  -->  00:07:49.310
So obviously we did something.

105

00:07:50.250  -->  00:07:58.780
And here is the voila moment for you I'm sure you recognize this stuff.

106

00:07:59.350  -->  00:08:04.150
Get slash Hastey slash 1.1.

107

00:08:04.160  -->  00:08:14.310
When we saw things before we saw things like get Hage P to do with WWII EPRI example Dotcom's lash users

108

00:08:14.810  -->  00:08:15.860
for example.

109

00:08:15.870  -->  00:08:18.140
We've seen that before.

110

00:08:18.560  -->  00:08:28.100
And what that was is get cases case you one point one slash and that slash there is the same as this

111

00:08:28.120  -->  00:08:29.740
slash here.

112

00:08:30.700  -->  00:08:38.900
OK let's go back into safari and instead of slash we're going to say slashy users not found.

113

00:08:38.930  -->  00:08:39.760
That's fine.

114

00:08:40.040  -->  00:08:51.770
But now see how we get slash users in the logs not me because Safari has said Get me on this host 6:59

115

00:08:51.770  -->  00:08:57.400
put open up one call on 4:9 and 5 the endpoint slash users.

116

00:08:57.410  -->  00:09:02.160
So when we try to access that was essentially

117

00:09:08.450  -->  00:09:14.900
that that users endpoint is the one we're trying to access and that is because flask knows that this

118

00:09:14.900  -->  00:09:17.740
is the or else so it doesn't show it there.

119

00:09:17.820  -->  00:09:19.910
But really we're accessing all of this.

120

00:09:20.420  -->  00:09:27.390
And notice how in these logs the you are right is there as opposed to being at the end.

121

00:09:27.510  -->  00:09:28.240
That's fine.

122

00:09:28.470  -->  00:09:32.970
And those also notice how we're using his version 1.1 as opposed to version 2.

123

00:09:33.090  -->  00:09:33.780
That's also fine.

124

00:09:33.780  -->  00:09:39.480
One point one was popular for many many years and it still used widely.

125

00:09:40.070  -->  00:09:42.240
OK so everything is not found.

126

00:09:42.240  -->  00:09:44.330
How do we make things found.

127

00:09:44.610  -->  00:09:50.080
It's actually not that difficult at app dot route.

128

00:09:50.490  -->  00:09:58.850
And then a string and then a slash slash once again identical to this one or that one we are requesting

129

00:09:58.910  -->  00:10:04.990
we're setting here what is going to happen when we access the homepage.

130

00:10:05.100  -->  00:10:06.890
The empty slash.

131

00:10:06.890  -->  00:10:09.480
And then we create a method on page for example

132

00:10:14.910  -->  00:10:22.320
show what this is doing it is saying OK define a method called home page which returns hello world and

133

00:10:22.330  -->  00:10:23.830
apply to it.

134

00:10:23.830  -->  00:10:26.890
This code here this is called a decorator.

135

00:10:26.880  -->  00:10:29.230
We're going to look at decorator's later on in the course.

136

00:10:29.280  -->  00:10:38.080
Right now just know that what this does is it say when we access the forward slash endpoint return the

137

00:10:38.080  -->  00:10:40.220
content of this math.

138

00:10:40.360  -->  00:10:49.540
So let's save that and rerun the app and then let's refresh this right remove the users that meet up

139

00:10:50.740  -->  00:10:52.250
that way.

140

00:10:52.570  -->  00:10:53.480
Now we get.

141

00:10:53.500  -->  00:10:56.760
Hello world.

142

00:10:56.760  -->  00:11:01.100
Remember what we've done is get the forward slash which is that forward slash.

143

00:11:01.450  -->  00:11:08.260
And then the content that comes out is whatever is returned by this method which in this case is Hello

144

00:11:08.250  -->  00:11:10.380
world.

145

00:11:12.030  -->  00:11:13.820
So this is quite magical.

146

00:11:13.840  -->  00:11:15.160
We have a Web site.

147

00:11:15.250  -->  00:11:19.140
The website didn't do much granted but we have a Web site which returns.

148

00:11:19.240  -->  00:11:22.060
Hello world.

149

00:11:22.260  -->  00:11:26.210
Don't know if you already know about hitch DML and so on.

150

00:11:26.250  -->  00:11:30.090
A lot of my students already do know about each DML and CSX.

151

00:11:30.270  -->  00:11:38.140
So here from flask as well as importing flask and water go into import rendered template and instead

152

00:11:38.130  -->  00:11:43.670
of returning hello world I'm gonna return rendered template home page TNL.

153

00:11:44.250  -->  00:11:45.020
OK.

154

00:11:45.510  -->  00:11:50.610
In the project I'm going to write click and create a new directory called templates has to have this

155

00:11:50.620  -->  00:11:52.040
name templates.

156

00:11:52.290  -->  00:11:53.400
That's important.

157

00:11:53.590  -->  00:11:58.360
And then I'm going to create a new file called home dot page DML.

158

00:11:58.380  -->  00:12:02.320
And here we're going to just put the basic page DML if you don't know much about that just copy it for

159

00:12:02.320  -->  00:12:06.530
now and we'll get there.

160

00:12:06.990  -->  00:12:11.220
OK.

161

00:12:19.600  -->  00:12:23.710
So if you don't know which to him out that's absolutely totally fine.

162

00:12:23.740  -->  00:12:31.510
We're going to get into what the e-mail is soon in this course not in much detail because this is not

163

00:12:31.500  -->  00:12:35.130
a course about web development but we will get into a bit about it.

164

00:12:35.250  -->  00:12:41.490
Now as we develop this section up basically the first thing we have to specify is the sort of hitched

165

00:12:41.500  -->  00:12:48.730
the metal version the document type of this file and this document type is Hetu email and then we say

166

00:12:48.790  -->  00:12:51.290
OK now we're going to be writing hasty mail code.

167

00:12:51.390  -->  00:12:55.770
That is what this opening and closing tags do.

168

00:12:55.770  -->  00:12:58.740
And then we say OK the head of the document.

169

00:12:58.770  -->  00:13:04.800
These are things like CSSA javascript and sort of the title of the page.

170

00:13:04.810  -->  00:13:06.840
Things like that things that the user cannot see.

171

00:13:06.980  -->  00:13:10.450
If you don't know what CSL and Javascript aren't that don't worry we're going to look at that as well

172

00:13:10.440  -->  00:13:10.800
.

173

00:13:10.850  -->  00:13:13.120
It's actually things that user cannot see.

174

00:13:13.330  -->  00:13:18.970
And then the body things that user can see and then we're putting in a huge one and we've seen this

175

00:13:19.000  -->  00:13:20.760
previously very briefly.

176

00:13:20.760  -->  00:13:27.460
This is the biggest header in the amount a title essentially and we're saying hey each one and then

177

00:13:27.460  -->  00:13:35.170
close each one and Raemer all tags in HCM L R and between these crocodile clips the close the opening

178

00:13:35.160  -->  00:13:41.740
tag is just the tag inside the crocodile clips the closing tag is the tag preceded by a forward slash

179

00:13:41.740  -->  00:13:43.350
.

180

00:13:43.480  -->  00:13:45.420
So we're seeing in say the page one tag.

181

00:13:45.460  -->  00:13:47.280
Hello world.

182

00:13:47.400  -->  00:13:50.470
Let's save that and then go back here and refresh.

183

00:13:50.640  -->  00:13:53.740
With me to restart the app.

184

00:13:54.580  -->  00:14:03.280
Now we see Hello world there which is quite impressive because with this small amount of code we can

185

00:14:03.270  -->  00:14:10.610
now send the user a Web site as opposed to having a command line application.

186

00:14:11.190  -->  00:14:20.590
And what that means as well is that now we can deal with Twitter redirecting to our Web site as opposed

187

00:14:20.620  -->  00:14:26.370
to an necessitating a pin which is quite great.

188

00:14:26.650  -->  00:14:29.010
And it's going to make things a lot nicer.

189

00:14:29.880  -->  00:14:34.800
And that's everything for this video I just really wanted to introduce to you the concept of flask throughout

190

00:14:34.810  -->  00:14:39.880
the next few videos we're going to be making sure that we can display the images that we got from here

191

00:14:39.890  -->  00:14:40.200
.

192

00:14:40.500  -->  00:14:47.020
We're going to be displaying those images on our Web site as opposed to just kind of displaying some

193

00:14:47.010  -->  00:14:48.220
text on the console.

194

00:14:48.250  -->  00:14:50.160
The plain packs on the console is not that fun.

195

00:14:50.460  -->  00:14:55.080
But if we can show the images in like a gallery or something that may be actually a bit more interesting

196

00:14:55.120  -->  00:14:57.380
maybe maybe useful now.

197

00:14:57.390  -->  00:15:04.610
So this is how we would do that we would import the flask object sets and the app to be flask on the

198

00:15:04.890  -->  00:15:08.940
name on the ground the score and then sent it the route.

199

00:15:08.940  -->  00:15:15.540
Right now we've only got one defined for the home page but you could just as well do things like users

200

00:15:15.660  -->  00:15:19.770
or users slash list you know whatever.

201

00:15:19.890  -->  00:15:27.130
And then when the when your visitors go into that specific endpoint they will see whatever is returned

202

00:15:27.120  -->  00:15:28.380
by the method.

203

00:15:28.890  -->  00:15:31.320
And at the end we run the app.

204

00:15:32.080  -->  00:15:33.280
Ok that's everything for this video.

205

00:15:33.270  -->  00:15:39.480
We've looked at creating hatred male serving application using flask and we're going to be exploring

206

00:15:39.490  -->  00:15:42.260
more about flask hits the mail CSSA and so on.

207

00:15:42.340  -->  00:15:46.980
Not in much detail but we're going to be looking at that throughout the next few videos.

208

00:15:47.050  -->  00:15:49.620
I'm excited about all this so I'll be seeing you in the very next video
