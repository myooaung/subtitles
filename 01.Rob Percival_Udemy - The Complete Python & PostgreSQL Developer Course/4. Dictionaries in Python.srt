1

00:00:00,440  -->  00:00:05,460
Hi and welcome back in this video we're going to start looking at dictionaries in Python.

2

00:00:05,790  -->  00:00:14,060
We've looked at sex and we know that a set is an unordered collection of items with no duplicate.

3

00:00:14,760  -->  00:00:17,570
A dictionary is actually really similar to a set.

4

00:00:17,660  -->  00:00:25,400
However in a dictionary instead of a dictionary containing elements like numbers it contains key and

5

00:00:25,410  -->  00:00:27,630
value pairs.

6

00:00:27,630  -->  00:00:34,440
This means that in a dictionary each of the elements in the dictionary is a key and each key has a value

7

00:00:34,440  -->  00:00:37,660
associated with it.

8

00:00:37,680  -->  00:00:40,820
It's kind of difficult to just understand straight away.

9

00:00:40,820  -->  00:00:43,100
So let's work with an example.

10

00:00:43,170  -->  00:00:49,110
The first thing I wanted to do is here and my charm go to the student project and the students folder

11

00:00:49,130  -->  00:00:49,380
.

12

00:00:49,560  -->  00:00:54,480
And if you name your project differently then this will be called whatever you call your project right

13

00:00:54,510  -->  00:00:55,190
like that.

14

00:00:55,410  -->  00:00:57,300
And create a new python file.

15

00:00:57,510  -->  00:01:01,830
And I'm going to call this file app and.

16

00:01:01,880  -->  00:01:11,080
Now then we are received with the editor and the amped up file appears here on the left.

17

00:01:12,240  -->  00:01:18,420
Here we can write Python code and then we can reichlich app and run the code whenever we want.

18

00:01:18,420  -->  00:01:24,700
The first thing we want to do just to verify that things work is I'm going to print hello world which

19

00:01:24,750  -->  00:01:26,490
is a very common example.

20

00:01:26,790  -->  00:01:32,820
And then I'm going to run app and we can see that down here we get the words hello world.

21

00:01:33,120  -->  00:01:39,510
So we know it works what to do next is print out a set.

22

00:01:39,750  -->  00:01:47,520
So you guys can see the similarities between a set and a dictionary since we've looked at sets before

23

00:01:47,530  -->  00:01:47,710
.

24

00:01:47,910  -->  00:01:53,430
I think you guys can create a sets that contains three or four numbers and then print that out if you

25

00:01:53,430  -->  00:01:59,460
want to pause the video and attempt that yourself just as revision then please go ahead and do that

26

00:01:59,460  -->  00:01:59,610
.

27

00:01:59,640  -->  00:02:08,400
And if not I'll just proceed and create a sample set and to get a sample set this sample on that concept

28

00:02:08,430  -->  00:02:10,110
is going to be the variables name.

29

00:02:10,380  -->  00:02:19,140
And then I'm going to put in that variable put in that box the set value which as we know is just like

30

00:02:19,140  -->  00:02:25,590
that between the curly braces we can put any number of numbers and there are samples that will contain

31

00:02:25,590  -->  00:02:28,980
them and then we can print out the sample set.

32

00:02:28,980  -->  00:02:34,980
Notice how now that we're using an ideally an integrated development environment we get nice things

33

00:02:34,980  -->  00:02:36,520
like autocomplete.

34

00:02:36,540  -->  00:02:43,080
So as you start typing PI chan will suggest things that you can that you may want to type and then you

35

00:02:43,080  -->  00:02:45,850
can just press enter and then that completes it for you.

36

00:02:46,050  -->  00:02:47,150
So let's press play down here.

37

00:02:47,160  -->  00:02:53,200
The bottom line is how we get the set in this case it turns out the set is ordered.

38

00:02:53,250  -->  00:02:54,360
It appears in order.

39

00:02:54,360  -->  00:03:00,860
But notice how when we created it it is not in the same order as when it got printed out.

40

00:03:00,870  -->  00:03:04,310
Also remember what happens if we put another one.

41

00:03:04,710  -->  00:03:07,140
What do you think is going to happen when I press play.

42

00:03:07,170  -->  00:03:12,320
What is going to be printed out.

43

00:03:12,570  -->  00:03:16,390
What I would expect is exactly what happens here.

44

00:03:16,650  -->  00:03:21,070
The same thing gets printed out but without the two ones.

45

00:03:21,180  -->  00:03:25,890
So the one only appears in this specific sense.

46

00:03:25,890  -->  00:03:29,790
It only appears once because the set does not contain duplicates.

47

00:03:29,790  -->  00:03:37,520
So even though we've put two ones up here one of them isn't included because it's already there.

48

00:03:39,570  -->  00:03:46,610
We looked at or I mentioned earlier that a dictionary is a set of key value pairs.

49

00:03:47,130  -->  00:03:56,070
What I mean with that is that each of these values in the set we can call a key and we can associate

50

00:03:56,070  -->  00:03:58,930
with that value.

51

00:03:58,930  -->  00:04:06,780
So with that key a value apologies for example the key three could have the value 7 associated with

52

00:04:06,780  -->  00:04:07,110
it.

53

00:04:07,110  -->  00:04:08,370
Now this is not very useful.

54

00:04:08,370  -->  00:04:09,610
I'll agree with you.

55

00:04:09,740  -->  00:04:16,610
And the key to could have the value 25.

56

00:04:17,490  -->  00:04:18,140
I agree.

57

00:04:18,140  -->  00:04:22,750
This is not useful because now we've got a key which is three.

58

00:04:22,920  -->  00:04:27,990
But actually the value that is in that key are associated with that key is a value number 7.

59

00:04:28,110  -->  00:04:31,110
If we print the sample set which no longer is a set.

60

00:04:31,140  -->  00:04:36,460
Notice that we get to is 25 and 3 7 and I'm going to rename that.

61

00:04:36,810  -->  00:04:44,270
And the way to rename things are using Pancham is press shift and F 6 the function 6 key.

62

00:04:44,460  -->  00:04:49,410
And then you get this little window here and you can change this or sample's dictionary and it will

63

00:04:49,410  -->  00:04:54,380
change in both places where you use it or more places if you use in a more places are really nice too

64

00:04:54,410  -->  00:04:55,690
.

65

00:04:56,050  -->  00:05:01,750
So we get to is linked to 25 and 3 is going to 7.

66

00:05:01,800  -->  00:05:07,680
So what is going to happen if we say print sample of the three.

67

00:05:07,740  -->  00:05:14,430
What do you think will happen when we print this out.

68

00:05:15,210  -->  00:05:23,940
Just guess what comes out is the number 7 because that is the value associated with the key that we

69

00:05:23,940  -->  00:05:25,870
are accessing.

70

00:05:26,880  -->  00:05:31,400
And naturally this is confusing it doesn't have any meaning to us.

71

00:05:31,440  -->  00:05:39,480
However we can use strings instead of numbers as our keys and that now suddenly becomes a lot more useful

72

00:05:39,480  -->  00:05:40,270
.

73

00:05:40,320  -->  00:05:46,280
I'm going to erase the contents of the sample dictionary and instead have something a bit more useful

74

00:05:46,290  -->  00:05:58,830
I'm going to have name is Jose and Mark is 70 and now you can see why this might be useful in some instances

75

00:05:58,830  -->  00:05:59,750
.

76

00:05:59,950  -->  00:06:05,840
Naturally if I press play now what is going to happen is an error because we get a key error.

77

00:06:05,850  -->  00:06:13,040
This is an important type of error because the key 3 is no longer in our dictionary.

78

00:06:13,170  -->  00:06:14,400
The Keithy was there before.

79

00:06:14,400  -->  00:06:15,480
Which is why it worked.

80

00:06:15,540  -->  00:06:21,390
But now the Keathley is no longer there we've only got two keys name and Mark and neither of them is

81

00:06:21,390  -->  00:06:22,200
three.

82

00:06:22,230  -->  00:06:27,990
So if we wanted to access one of these keys how do you think we would do that.

83

00:06:27,990  -->  00:06:32,300
Take it I guess Scrabble.

84

00:06:33,240  -->  00:06:41,310
Take a guess as to how we could access the value Jose from this dictionary.

85

00:06:43,410  -->  00:06:47,670
Some people might be tempted to do this.

86

00:06:47,750  -->  00:06:56,140
However remember that anything in Python that is not a number plate and thinks it is a variable.

87

00:06:56,160  -->  00:06:58,770
So this works if name is a variable.

88

00:06:58,770  -->  00:07:05,260
If we say name is something then this is fine and it we try to access the key.

89

00:07:05,400  -->  00:07:06,730
That is nothing.

90

00:07:07,320  -->  00:07:13,100
However just like that Python thinks name should be a variable but it's not defined.

91

00:07:13,140  -->  00:07:14,220
So it gives us an error.

92

00:07:14,220  -->  00:07:20,360
And as you can see programs has unresolved reference because it doesn't know what name is.

93

00:07:20,370  -->  00:07:27,840
So remember whenever we want to access a literal representation of something we have to use the quotation

94

00:07:27,840  -->  00:07:31,700
marks which can be single or double and it doesn't matter.

95

00:07:31,700  -->  00:07:33,660
But they have to match.

96

00:07:33,930  -->  00:07:40,190
And if we do that now my name comes out which is fantastic.

97

00:07:40,290  -->  00:07:47,970
This can be used as a data storage we can use it to put information about our users or about items that

98

00:07:47,970  -->  00:07:53,730
are shopping stocking or information about transactions or information to be sent over the internet

99

00:07:53,740  -->  00:07:54,040
.

100

00:07:54,070  -->  00:08:02,030
Jason which is essentially what this is a python dictionary is very equivalent to Jason.

101

00:08:02,040  -->  00:08:10,020
And you'll you'll find that shortly in this course this is very widely used across the entire Internet

102

00:08:10,380  -->  00:08:13,650
to send data from one web site to another.

103

00:08:13,860  -->  00:08:21,450
And these Python dictionaries there's this format where you have a key and a value is extremely popular

104

00:08:21,450  -->  00:08:22,860
.

105

00:08:22,860  -->  00:08:29,370
So we've quickly looked at what the dictionary is and remember that a dictionary is a set of key value

106

00:08:29,370  -->  00:08:38,470
pairs you and therefore you cannot have two of these things because it has to be a set.

107

00:08:38,620  -->  00:08:44,010
And the key is that the set element and this and in this instance we've got a duplicate key and that's

108

00:08:44,010  -->  00:08:45,510
not OK.

109

00:08:45,660  -->  00:08:52,290
So the dictionary is a set of key value pairs a set of keys that has each key a value associated with

110

00:08:52,290  -->  00:08:57,650
it and we can access the keys by just like we can in a set.

111

00:08:57,900  -->  00:09:04,610
Accessing the specific key that we want to access inside the square bracket.

112

00:09:05,820  -->  00:09:07,410
So this is everything for this video.

113

00:09:07,500  -->  00:09:12,840
We've looked at quite a lot of stuff but we've reviewed and we've learned what dictionaries are and

114

00:09:12,840  -->  00:09:17,360
they are going to be extremely useful throughout this section in the app are going to be building.

115

00:09:17,910  -->  00:09:18,750
So I'll see you the next video
