1

00:00:01,320  -->  00:00:07,750
Hi We'll come back in this video we're going to be looking at creating users in the last section.

2

00:00:07,830  -->  00:00:09,820
We actually looked at the same thing.

3

00:00:09,900  -->  00:00:13,650
We created users and we saved them to the database.

4

00:00:13,650  -->  00:00:21,590
Now what we want to do is make sure that when the user authorizes us to use their Twitter account that

5

00:00:21,600  -->  00:00:30,240
we save the access token that means both the auth token and the off token secret because we need them

6

00:00:30,240  -->  00:00:37,080
both to create this token and we need that token to create the client and that client is the one that

7

00:00:37,080  -->  00:00:40,320
can do the requests.

8

00:00:40,470  -->  00:00:42,770
It's actually not that complicated.

9

00:00:42,780  -->  00:00:49,110
We've got the code from the last section on creating user objects and saving them to database.

10

00:00:49,260  -->  00:00:55,740
I don't know if you recall things like connection from database from pool Asare cursor from connection

11

00:00:55,740  -->  00:00:56,710
from pool.

12

00:00:56,970  -->  00:01:03,660
We also created things like database class which is the connection pool.

13

00:01:03,750  -->  00:01:06,780
We created user object and we saved them to the database.

14

00:01:06,870  -->  00:01:14,580
We did all those things but those users that we were saving to the database only had an email first

15

00:01:14,580  -->  00:01:17,160
name and a last name.

16

00:01:17,160  -->  00:01:25,550
Now we want to make sure that we're saving a password and auth token and then off tokens secret.

17

00:01:25,560  -->  00:01:31,620
So really it's exactly the same code as we wrote in the last section only that we're going to be saving

18

00:01:31,740  -->  00:01:34,890
a couple more things to the database instead.

19

00:01:36,090  -->  00:01:41,820
So let's go back to the code that we wrote in the last section which I've got on my screen but I'm going

20

00:01:41,820  -->  00:01:46,860
to be paste in here and going over it again just for your convenience.

21

00:01:46,860  -->  00:01:52,580
So let's go over that to that code that we wrote in the last section and import it into this project

22

00:01:52,610  -->  00:01:52,800
.

23

00:01:52,920  -->  00:01:55,130
I'm imported meaning copy and paste.

24

00:01:55,330  -->  00:02:01,190
And when I right click the project and go to a new python file and create a database copy why file.

25

00:02:01,200  -->  00:02:05,460
And here I'm going to be pasting the code we wrote in the last section and quickly going over it again

26

00:02:05,460  -->  00:02:06,920
.

27

00:02:07,290  -->  00:02:13,890
So I don't know if you remember this stuff but we wrote a class database that have a connection pool

28

00:02:14,160  -->  00:02:19,770
and then we could initialize that database in a class method and that created a simple connection pool

29

00:02:20,280  -->  00:02:25,200
and then we could get connections from the pool and put them back in and we could also close all the

30

00:02:25,200  -->  00:02:31,440
connections and we also have a cursor from collection from pool class that was essentially a cursor

31

00:02:31,440  -->  00:02:37,470
which would allow us to retrieve or insert data into Pascua sequel and they would return the connection

32

00:02:37,470  -->  00:02:40,160
back to the pool or get a connection from the pool.

33

00:02:40,200  -->  00:02:47,950
When we use it naturally in order to be able to use this we need psych OPG too.

34

00:02:47,970  -->  00:02:55,320
So let's go to our requirements not the XTi file and put in Psycho puji to remember if you are in Windows

35

00:02:55,590  -->  00:02:58,430
you need to go and use the installer.

36

00:02:58,740  -->  00:03:04,110
As we learned in the last section and put that installer on your virtual environment or you can just

37

00:03:04,110  -->  00:03:08,850
use the same virtual environment for your last project as you do in for this one.

38

00:03:08,910  -->  00:03:17,510
You can always change your virtual environment by going to patch on preferences and not there but when

39

00:03:17,520  -->  00:03:22,050
the interpreter selects the virtual environments are you created in the last section so it would be

40

00:03:22,050  -->  00:03:27,720
this one intro to databases you can select the same virtual environment and that won't affect your code

41

00:03:27,720  -->  00:03:27,920
.

42

00:03:28,050  -->  00:03:32,760
It will just affect the libraries installed in the virtual environment which means you'll be able to

43

00:03:32,760  -->  00:03:37,410
use like OPG to if you installed it on that virtual environment and you do not want to go through the

44

00:03:37,410  -->  00:03:38,420
pain again.

45

00:03:38,640  -->  00:03:43,250
If you are on Mac or Linux however the only thing you have to do is write it in your requirements text

46

00:03:43,300  -->  00:03:46,520
textfile and then install the requirement here.

47

00:03:46,530  -->  00:03:52,570
Remember you can only do that on Mac or Linux not on Windows.

48

00:03:53,190  -->  00:03:59,420
And naturally config executable not found.

49

00:03:59,730  -->  00:04:08,610
So we are going to need to go to a terminal and as you remember from the last section there is a way

50

00:04:08,610  -->  00:04:20,680
to do this which is export path equals Dola path then library and Pasko there sequel 9.5 bin.

51

00:04:21,510  -->  00:04:30,270
And then we should be able to go into the virtual environment which is in documents personal courses

52

00:04:30,270  -->  00:04:38,320
Python polocrosse with a log in virtual environment and do been Pipp install Cyclopedia too and that

53

00:04:38,320  -->  00:04:39,580
should work.

54

00:04:40,140  -->  00:04:43,180
So what I've done there is just gone over again.

55

00:04:43,560  -->  00:04:51,030
What we did to install Cyclopedia 2 in the last section of this command here we went over in the last

56

00:04:51,030  -->  00:04:59,700
section export path equals Dollar path and then told them to just go back to

57

00:05:03,620  -->  00:05:11,470
you export paff equals dollar path colon and then the location of your Pasqua sequel bin folder which

58

00:05:11,470  -->  00:05:19,030
should be if you use the default in slash library slash Potter sequel slash 9.5 slash bin and then you

59

00:05:19,030  -->  00:05:27,040
can go into the do CD and then the folder in which your project is.

60

00:05:27,520  -->  00:05:32,670
And then you can just do and been slash Pip installs like OPG too.

61

00:05:32,830  -->  00:05:35,120
And that should do it.

62

00:05:35,170  -->  00:05:39,430
But again if you do have any problems which refer back to the video in the last section where we installed

63

00:05:39,440  -->  00:05:43,370
it on Mac that should solve all the problems.

64

00:05:43,960  -->  00:05:52,080
OK now that we have an psychobilly to installed we are able to import it inside our database file and

65

00:05:52,150  -->  00:05:55,300
that's the pool that we were creating there.

66

00:05:55,660  -->  00:05:59,910
And now we can also right click the project and create a new Phyton file which we're going to call a

67

00:05:59,920  -->  00:06:11,660
user and once again I'm going to go back and copy from the other project.

68

00:06:11,660  -->  00:06:12,910
So let me do that

69

00:06:15,380  -->  00:06:17,980
then we go.

70

00:06:18,340  -->  00:06:26,980
If you remember this was about we know that this was what we had in the last project we had

71

00:06:29,740  -->  00:06:35,980
import curso from collection from pool and then we created a class user in the unit method we specified

72

00:06:36,280  -->  00:06:40,420
that email first name last name and the ID which would be none.

73

00:06:40,420  -->  00:06:47,020
Initially we would be able to save the database and here we would insert into the users table email

74

00:06:47,050  -->  00:06:54,310
first name and last name and then the dollar so the percent as would get replaced by the properties

75

00:06:54,340  -->  00:06:56,260
in this table.

76

00:06:57,070  -->  00:07:02,310
And the idea would be auto incremental because we defined it that way in Passaro sequel.

77

00:07:02,740  -->  00:07:08,980
And similarly here in the load from D-B by email we would execute this select where we would retrieve

78

00:07:09,580  -->  00:07:15,010
a user with an email who would fetch one and then we would create a user object with that.

79

00:07:15,450  -->  00:07:21,820
OK so now we want to do a few more things instead of e-mail first name and last name and ID.

80

00:07:21,880  -->  00:07:30,930
We also want to pass in an off token and an off token secret so auth token and auth token secret which

81

00:07:30,940  -->  00:07:32,800
means we also have to initialize them here

82

00:07:40,540  -->  00:07:46,570
like so we're just creating the properties or token and author can secret inside the user objects that

83

00:07:46,570  -->  00:07:52,120
we are initializing in this method in the same to D-B We're also going to want to insert

84

00:07:54,850  -->  00:08:01,270
these two values there inside the brackets that specifies the columns that were inserting values into

85

00:08:01,280  -->  00:08:01,790
.

86

00:08:01,930  -->  00:08:08,650
We're going to want to put 2 percent Essie's there at the end for those columns and also the parameters

87

00:08:08,640  -->  00:08:11,850
should include as well as e-mail first name a last name.

88

00:08:11,860  -->  00:08:19,390
Also the new properties self-taught auth token and self-taught or and secret.

89

00:08:19,380  -->  00:08:24,540
So now what we've changed is simply added two more columns to more parameters and two more properties

90

00:08:24,550  -->  00:08:25,050
there.

91

00:08:25,120  -->  00:08:31,050
So we're going to insert those when we saved to D-B in the load from.

92

00:08:31,060  -->  00:08:35,440
We're also going to want to get the ortho can an ortho can secret.

93

00:08:35,470  -->  00:08:44,260
So here we are creating and an object of type user and we're passing in data from this row that we selected

94

00:08:44,250  -->  00:08:48,270
here and the data we're passing in is the first column for e-mail.

95

00:08:48,340  -->  00:08:53,080
Second column for first name third column for last name and the fourth column is going to be Ortho-K

96

00:08:53,130  -->  00:08:53,240
.

97

00:08:53,320  -->  00:08:55,700
And the fifth column is going to be Ortho-K and secret.

98

00:08:55,870  -->  00:09:00,350
So we're going to do here is auth token equals user unschool data for.

99

00:09:00,830  -->  00:09:08,290
And you can see I'm very well off token secret equals user underscore data 5.

100

00:09:08,320  -->  00:09:16,340
And then remember that common as well you can always just type enter and that's totally fine in Python

101

00:09:16,350  -->  00:09:16,500
.

102

00:09:16,690  -->  00:09:19,630
And I'm just going to make it a bit nicer to read.

103

00:09:19,990  -->  00:09:30,010
OK so now we have the ability to save the user including those new properties that we have requested

104

00:09:30,000  -->  00:09:33,130
from Twitter.

105

00:09:33,610  -->  00:09:38,860
What we don't have right now is a password but we want to worry about that just after we managed to

106

00:09:39,550  -->  00:09:40,750
work with this.

107

00:09:40,750  -->  00:09:47,140
So what we want to do now and what I would encourage you to try on your own is just as we did in the

108

00:09:47,130  -->  00:09:53,320
last section where we created the user object and we saved it to the database go and delete your possible

109

00:09:53,320  -->  00:09:58,020
sequel Users table recreate it with these columns.

110

00:09:58,470  -->  00:10:04,140
Then make sure the make the ID column comes in first so Id email first name last name or token or token

111

00:10:04,170  -->  00:10:12,430
secret should be in that order and then go and after the log in create a user object with an email you

112

00:10:12,420  -->  00:10:22,450
can ask the user for an email using the input command and save that to the database.

113

00:10:22,650  -->  00:10:30,220
It's a bit of a longer problem but I would encourage you really would to try that on your own and then

114

00:10:30,340  -->  00:10:35,400
come back and continue with this.

115

00:10:37,120  -->  00:10:42,310
Okay now that that's done we're ready to move onto the next video is really getting a bit long.

116

00:10:42,360  -->  00:10:44,380
We're going to be solving that problem.

117

00:10:44,400  -->  00:10:51,310
We're going to be creating the new the new table with the new columns and saving the users in there

118

00:10:51,460  -->  00:10:57,310
and making sure that the user doesn't have to reauthorize every time they want to use an app I see in

119

00:10:57,310  -->  00:10:59,240
the next video.
