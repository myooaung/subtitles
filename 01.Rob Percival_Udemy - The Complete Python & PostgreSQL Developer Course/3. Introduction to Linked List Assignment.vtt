WEBVTT
1

00:00:00.170  -->  00:00:05.280
Hi and welcome come back in this video we're going to be going over the assignment which is to create

2

00:00:05.340  -->  00:00:06.920
a linked list.

3

00:00:07.490  -->  00:00:12.390
However I'm not going to just put you into the deep end so I'm going to give you a few pointers and

4

00:00:12.480  -->  00:00:15.160
I'm going to help you in setting this assignment up.

5

00:00:15.380  -->  00:00:18.690
I don't so I'm not going to require you to create the linked list from scratch.

6

00:00:18.720  -->  00:00:23.550
I'm going to give you quite a lot of code and I'm going to ask you to essentially implement a couple

7

00:00:23.550  -->  00:00:30.840
of methods that are going to test your knowledge and your ability to think but won't be as complicated

8

00:00:30.840  -->  00:00:38.820
as just thinking up a linked list from scratch what you'll see in the very next lecture is something

9

00:00:38.820  -->  00:00:43.260
like you're seeing in my screen right now which is the assignment text.

10

00:00:43.260  -->  00:00:49.380
It's not very detailed on purpose because I wanted to give you a bit of a challenge so I'm not telling

11

00:00:49.380  -->  00:00:55.680
you exactly everything that you have to type but I'm going to give you a few pointers what to look at

12

00:00:55.740  -->  00:01:02.160
in the next video or sorry in the next lecture which is a text lecture is about what you have to do

13

00:01:02.280  -->  00:01:06.470
which is implement two methods in the code I provide you.

14

00:01:06.750  -->  00:01:13.380
The methods are to add to the list in the beginning of the list and to find a method in the linked list

15

00:01:13.380  -->  00:01:14.030
.

16

00:01:14.130  -->  00:01:19.680
So to find a node apologies I said to find a method and then I also give you some information about

17

00:01:19.710  -->  00:01:21.390
how to add to the list.

18

00:01:21.600  -->  00:01:24.940
I give you some pseudo code which is not Python code.

19

00:01:25.000  -->  00:01:28.230
There's not any type of code is just pseudo code doesn't execute.

20

00:01:28.250  -->  00:01:34.620
It's just for your convenience to kind of understand a bit more and what the method should do.

21

00:01:34.620  -->  00:01:39.720
And I also gave you some information about the find method and also give you some pseudo code about

22

00:01:39.720  -->  00:01:44.710
what this method should do to go back to the add to list method.

23

00:01:44.770  -->  00:01:48.660
This you'd see if the list's route is set.

24

00:01:48.750  -->  00:01:56.910
If it isn't set then the root should become the new node and if it is sent then the root the new node

25

00:01:56.910  -->  00:02:02.790
should be the new nodes next node should be equal to the root and then the root should once again be

26

00:02:02.790  -->  00:02:05.020
equal to the new node.

27

00:02:05.040  -->  00:02:10.080
So the pseudocode here tells you the method is called add to list and it takes in as a parameter the

28

00:02:10.080  -->  00:02:15.410
new node if the route has a value i.e. it is not None.

29

00:02:15.840  -->  00:02:20.340
Then make the new nodes next equal to the current root.

30

00:02:20.370  -->  00:02:23.830
Finally at the end make the roots equal to the new node.

31

00:02:24.420  -->  00:02:31.260
I understand this is not Python code this is not what you have to type but it should help you in understanding

32

00:02:31.260  -->  00:02:32.990
a bit more and giving it a go.

33

00:02:33.030  -->  00:02:34.440
That's what's important here.

34

00:02:34.440  -->  00:02:36.620
Give it a go try it out.

35

00:02:36.780  -->  00:02:40.920
Make mistakes and then see how that goes.

36

00:02:41.000  -->  00:02:46.890
Find Rathod should create a variable which I normally call marker which will store the node at each

37

00:02:46.890  -->  00:02:52.700
iteration of your list and initialize the marker to be the root of the list.

38

00:02:52.890  -->  00:02:57.840
Then check if the doctor's name is equal to the name that we're looking for in the find method we're

39

00:02:57.840  -->  00:03:04.140
looking for a specific student name and if it is equal then return the marker and if it isn't move over

40

00:03:04.140  -->  00:03:10.770
to the next node and the pseudocode here says just that the method is called Find and then initializes

41

00:03:10.770  -->  00:03:15.120
a variable to be the root of what the marker has a value.

42

00:03:15.120  -->  00:03:16.620
It is not None.

43

00:03:16.950  -->  00:03:21.300
Check if the markers name is equal to the name that we're looking for which is the parameter.

44

00:03:21.900  -->  00:03:29.700
And if it is returned the marker if it isn't we haven't returned then set the marker variable to be

45

00:03:29.700  -->  00:03:34.700
the markers next note that moves you over to the next node in the list.

46

00:03:35.460  -->  00:03:39.190
And then we will go back to the beginning of the why loop.

47

00:03:39.330  -->  00:03:42.640
Check this again and move over to the next node and so on and so on.

48

00:03:42.780  -->  00:03:49.230
Eventually if we have not returned but the marker does not have a value that means we've reached the

49

00:03:49.230  -->  00:03:50.950
end of the list.

50

00:03:51.240  -->  00:03:55.920
If that is the case we're going to raise an exception because we couldn't find the name in the list

51

00:03:55.920  -->  00:03:57.060
.

52

00:03:57.090  -->  00:03:57.910
OK.

53

00:03:58.500  -->  00:04:01.620
Now once again I do apologize because this is not the code.

54

00:04:01.650  -->  00:04:04.500
You have to write but I wanted to give you a bit of a challenge.

55

00:04:04.650  -->  00:04:09.270
We are going to be going over how to implement this in the following video.

56

00:04:09.300  -->  00:04:15.240
After the assignment to get started all you have to do is download the zip file which is in the resources

57

00:04:15.240  -->  00:04:20.670
available on the top left or at the very bottom of the assignment and text.

58

00:04:21.000  -->  00:04:23.400
And then once you've downloaded it just double click it.

59

00:04:23.400  -->  00:04:27.900
Drag the files into a folder and open the folder with my chum so let's do that just now when I click

60

00:04:27.900  -->  00:04:36.570
it and that'll download the file and then all we have to do is open up the zip file with Python.

61

00:04:36.600  -->  00:04:38.620
So I've got it open here.

62

00:04:38.670  -->  00:04:42.300
This is the folder that you'll receive.

63

00:04:42.300  -->  00:04:49.560
It has three files linked list node and pests the node now I'm going to be going over what the code

64

00:04:49.770  -->  00:04:54.690
kind of means in a higher level and give you a chance to implement it yourselves.

65

00:04:54.750  -->  00:05:01.740
The node is the class that contains the information about what we're storing on the list such as the

66

00:05:01.740  -->  00:05:05.340
name matriculation number and year of the student.

67

00:05:05.490  -->  00:05:08.590
And also it contains the next node.

68

00:05:08.880  -->  00:05:12.820
The one that comes after this one in the linked list remember.

69

00:05:12.990  -->  00:05:20.640
Each node knows where the next nudies the list itself only knows where the root node or the starting

70

00:05:20.640  -->  00:05:22.010
node is.

71

00:05:22.020  -->  00:05:29.160
So that's how this works by each node knowing where the next one is or rather what node The next is

72

00:05:30.000  -->  00:05:31.760
in the in its method the class.

73

00:05:31.860  -->  00:05:38.130
Just initialises the three properties name metric and year from three parameters and then sets the next

74

00:05:38.120  -->  00:05:39.320
note to be none.

75

00:05:39.330  -->  00:05:46.650
Notice that I've made the next known a private variable by adding two underscores in front that is so

76

00:05:46.650  -->  00:05:52.860
that other programs and other classes cannot modify these very people directly.

77

00:05:52.960  -->  00:05:59.190
Then what I've done is created two method sent next and get next to be able to change the value of the

78

00:05:59.190  -->  00:06:04.120
next property or to retrieve the value of the next property.

79

00:06:04.140  -->  00:06:12.740
I've done that so that when setting the next value I can check whether the node is of class Node or

80

00:06:12.750  -->  00:06:13.280
not.

81

00:06:13.290  -->  00:06:19.440
This one let me for example set to the next note to be a string or a number will only let me set to

82

00:06:19.440  -->  00:06:22.730
the next node to be a node object.

83

00:06:22.920  -->  00:06:30.280
And this is how you check if something is of a specific type is instance then the variable you are checking

84

00:06:30.290  -->  00:06:30.450
.

85

00:06:30.660  -->  00:06:32.260
And then that type in this case.

86

00:06:32.290  -->  00:06:39.060
I'm asking whether the node parameter to this method is of type node which is the class that I mean

87

00:06:39.080  -->  00:06:40.320
.

88

00:06:41.640  -->  00:06:48.740
So I'm only able to sense the next node to be this parameter if that parameter is of type node or if

89

00:06:48.750  -->  00:06:51.110
it is named that way.

90

00:06:51.150  -->  00:06:56.560
I can also unset the next property by making it.

91

00:06:57.360  -->  00:07:01.990
So if that is the case then I say self don't next equals node.

92

00:07:02.220  -->  00:07:06.050
And that just sent the next the underscore in that context property.

93

00:07:06.300  -->  00:07:13.170
And if it isn't of type node or it isn't nutten then I'm going to raise a type error and say that the

94

00:07:13.170  -->  00:07:17.790
next node must be of type node or none.

95

00:07:17.790  -->  00:07:20.160
So that's where the next set next method does.

96

00:07:20.160  -->  00:07:21.110
And they get next.

97

00:07:21.180  -->  00:07:25.830
So Lee returns the underscore underscore next property.

98

00:07:25.830  -->  00:07:31.020
Finally print details is the method I've created to print out some information about this note such

99

00:07:31.010  -->  00:07:36.980
as the metric number the name and the year of the student that this note represents.

100

00:07:37.010  -->  00:07:38.400
That's everything for the node.

101

00:07:38.400  -->  00:07:40.950
Now let's go and look at the linked list.

102

00:07:40.950  -->  00:07:46.320
The class linked list is the one that you should be modifying so you don't have to change the Node class

103

00:07:46.350  -->  00:07:47.370
at all.

104

00:07:47.370  -->  00:07:53.190
The only thing you have to change is in this class and you have to implement the methods that currently

105

00:07:53.550  -->  00:07:55.540
raising not implemented era.

106

00:07:55.680  -->  00:08:01.520
And those are the two that I mentioned earlier added to list and find those are the only two methods

107

00:08:01.830  -->  00:08:04.290
that raise a not implemented error.

108

00:08:04.710  -->  00:08:12.330
So you have to implement these two methods here by deleting these comments and instead we're deleting

109

00:08:12.380  -->  00:08:13.240
all of this.

110

00:08:13.470  -->  00:08:19.530
And instead of writing the implementation of the method for your convenience and also to give you a

111

00:08:19.530  -->  00:08:20.470
bit of a tip.

112

00:08:20.650  -->  00:08:26.640
I've also implemented for you the print list method which iterates over the list printing the details

113

00:08:26.630  -->  00:08:29.430
of every node as you go along.

114

00:08:29.700  -->  00:08:35.530
Reading this Methody understanding it will definitely help you in implementing the find method.

115

00:08:35.630  -->  00:08:41.430
It will not help you in implementing the add to list method but that one is a bit simpler and with some

116

00:08:41.430  -->  00:08:45.250
thought I'm sure you can implement it properly.

117

00:08:45.450  -->  00:08:48.660
Now how will you know if you've implemented things properly or not.

118

00:08:48.870  -->  00:08:52.310
Well that's where the tests file comes in.

119

00:08:52.320  -->  00:08:57.600
Using the unit test library that we looked at in the last section I have written some tests that you

120

00:08:57.600  -->  00:08:58.580
can run.

121

00:08:58.910  -->  00:09:06.400
All you have to do is right click the file in Python and run unit tests in Tests.

122

00:09:06.780  -->  00:09:10.590
Once you do that the tests will run and they should pass.

123

00:09:10.740  -->  00:09:14.990
But currently they don't because things are not implemented.

124

00:09:15.270  -->  00:09:20.970
If you see any failed errors and fail tests that means you have not finished or you've not implemented

125

00:09:20.970  -->  00:09:21.940
things properly.

126

00:09:22.050  -->  00:09:23.230
So give it another go.

127

00:09:23.240  -->  00:09:26.450
Look at the errors or where the tests fail.

128

00:09:26.760  -->  00:09:30.630
But if you're confused or you don't know where to look or what to do.

129

00:09:30.750  -->  00:09:34.150
Please as always ask questions in the course forums.

130

00:09:34.160  -->  00:09:37.800
Send me a message or you know that.

131

00:09:37.910  -->  00:09:42.390
Well that's what to do really pose a question and of course forms and I will help you out as soon as

132

00:09:42.380  -->  00:09:43.350
possible.

133

00:09:43.500  -->  00:09:49.280
And this is going to provide a bit of a challenge I'm sure but also some good experience for you to

134

00:09:49.290  -->  00:09:54.670
learn more about programming and about the data structure that we've got here which is the linked list

135

00:09:54.670  -->  00:09:56.070
.

136

00:09:56.100  -->  00:10:00.870
So without further ado please go into the next section in the next lecture which is the text lecture

137

00:10:01.080  -->  00:10:05.070
where you can download the zip file and give this a go.

138

00:10:05.580  -->  00:10:06.450
So that's it.

139

00:10:06.480  -->  00:10:11.700
And I'll see you in the video after that where we are going to be implementing a solution to this please

140

00:10:11.700  -->  00:10:13.400
don't go straight into that video.

141

00:10:13.430  -->  00:10:17.690
Do try to implement this on your own first.

142

00:10:17.820  -->  00:10:18.880
That's it.

143

00:10:18.880  -->  00:10:21.770
And I'll see you in the very next video.
