1

00:00:00,450  -->  00:00:01,840
Hi will come back.

2

00:00:01,840  -->  00:00:04,810
And really we're looking at creating a queue.

3

00:00:05,280  -->  00:00:06,390
Now we've looked at it.

4

00:00:06,390  -->  00:00:09,300
Q EAS which is just like a real life.

5

00:00:09,300  -->  00:00:13,850
Q Where people go in at the end and leave from the front.

6

00:00:14,310  -->  00:00:21,760
Let's look at how we might program a Q Using the linked list that we've already created.

7

00:00:22,590  -->  00:00:29,430
Let's remind ourselves what can you do it can add a new element which is just a note at the end.

8

00:00:29,640  -->  00:00:32,470
Or you can remove an element from the beginning.

9

00:00:32,550  -->  00:00:36,090
You can also find its size or tell us its size and print itself out.

10

00:00:36,150  -->  00:00:44,300
So just sort of normal housekeeping things so that would be a push method.

11

00:00:44,460  -->  00:00:48,220
I'm going to call the method push but as it is the normal sort of name for it.

12

00:00:48,240  -->  00:00:51,510
But you can call it whatever you want to add a new element at the end.

13

00:00:51,510  -->  00:00:57,560
It's pushing an element Pop is going to remove an element from the beginning.

14

00:00:57,750  -->  00:01:03,070
Size is going to get its size and print it's going to print the queue.

15

00:01:03,420  -->  00:01:10,830
So in the next video we're going to be creating a waiting list queue for a phone house so it will hold

16

00:01:10,830  -->  00:01:16,080
the name and telephone number of each person in the waiting list and we can add or remove people from

17

00:01:16,080  -->  00:01:16,690
it.

18

00:01:16,740  -->  00:01:23,520
If so that AM For example the people that are waiting for the calls can then received the calls in order

19

00:01:23,610  -->  00:01:24,980
and the order they were made.

20

00:01:25,440  -->  00:01:26,530
So we're going to go with A.

21

00:01:26,530  -->  00:01:27,720
The holes nodes.

22

00:01:27,740  -->  00:01:31,430
Each node has a name and a telephone number.

23

00:01:31,710  -->  00:01:32,350
Excuse me.

24

00:01:32,460  -->  00:01:33,320
How to implement it.

25

00:01:33,330  -->  00:01:38,490
You then what we're going to use the linked list that we created previously where each node is going

26

00:01:38,490  -->  00:01:43,230
to hold the data relevant which is the name and telephone number instead of generator.

27

00:01:43,500  -->  00:01:50,220
And this means we have to modify the Node class to include these two variables instead of the name matriculation

28

00:01:50,220  -->  00:01:53,250
number and year of study that we used last time.

29

00:01:53,550  -->  00:01:54,630
But that's not a big deal.

30

00:01:54,630  -->  00:01:59,490
I'm sure you can do that change a couple of variables around and the that would be fine.

31

00:02:00,360  -->  00:02:08,380
So how do we add an element to the end instead of adding at the end and removing at the beginning.

32

00:02:08,430  -->  00:02:12,860
We can just reverse them and add at the beginning and remove at the end.

33

00:02:13,110  -->  00:02:15,170
That's doing the same thing but in reverse order.

34

00:02:15,510  -->  00:02:18,240
So both of these things work fine.

35

00:02:18,270  -->  00:02:24,160
The end result is that the things are going in first and coming out first.

36

00:02:24,450  -->  00:02:27,870
You can pause the video here and have a think about it if that's not clear.

37

00:02:27,870  -->  00:02:32,520
So instead of adding at the end removing at the beginning we're just going to add at the beginning and

38

00:02:32,520  -->  00:02:35,610
remove at the end so that the same thing is going to happen.

39

00:02:37,050  -->  00:02:42,870
So the push method because we're adding now at the beginning we can just use the linked lists add to

40

00:02:42,870  -->  00:02:51,070
list method and realize in the last presentation this was using camel case as opposed to pants on case

41

00:02:51,070  -->  00:02:51,160
.

42

00:02:51,170  -->  00:02:52,450
But that's fine.

43

00:02:52,770  -->  00:02:58,170
I mean the method name the pop method is going to remove an element from the end and then the side is

44

00:02:58,170  -->  00:03:03,540
going to get the size and print in the print itself so the push is just going to be our add to list

45

00:03:03,540  -->  00:03:04,160
method.

46

00:03:04,170  -->  00:03:05,490
We're not really going to cover that.

47

00:03:05,730  -->  00:03:10,590
It's just going to be the same thing as before but now we're going to have a pop method which is going

48

00:03:10,590  -->  00:03:14,500
to remove an element from the end of the list.

49

00:03:14,790  -->  00:03:18,880
So what if you make this pop method to remove an element from the last element in the queue.

50

00:03:18,960  -->  00:03:20,060
And how do we do this.

51

00:03:20,190  -->  00:03:22,820
Well let's have a look.

52

00:03:23,040  -->  00:03:30,150
We're going to get this second to last node and then we're going to make the node to which this note

53

00:03:30,150  -->  00:03:33,610
is pointing to equal to none.

54

00:03:34,520  -->  00:03:39,870
And then is going to do the work to actually delete the last note from memory.

55

00:03:39,870  -->  00:03:41,570
So let's take a look at a more visual explanation.

56

00:03:41,580  -->  00:03:44,030
I know that this text is a bit confusing.

57

00:03:44,130  -->  00:03:49,420
We're going to make the node to which the second to last note is pointing to equal to them.

58

00:03:49,780  -->  00:03:52,880
So we've got our node which has a name or telephone variable.

59

00:03:52,900  -->  00:04:00,900
It also has the next node as before and the first node might be George with that telephone number and

60

00:04:00,900  -->  00:04:06,570
the next node might be Anna with that telephone number and the next node might be Philipe with that

61

00:04:06,580  -->  00:04:09,320
telephone number and finally the next node is none.

62

00:04:09,630  -->  00:04:13,790
So this is once again our usual 3 node queue.

63

00:04:13,830  -->  00:04:20,400
In this case that's the first node that is the second to last node.

64

00:04:20,430  -->  00:04:23,060
It's not the last one is the one before.

65

00:04:23,390  -->  00:04:29,280
And as a last note scenario we're counting from the end here Philip is the last node and is the second

66

00:04:29,280  -->  00:04:34,850
to last node and Georgia is the third to last node release the first note.

67

00:04:35,400  -->  00:04:41,190
If this was a 2 node linked list then George would be the second to last node and I would be the last

68

00:04:41,190  -->  00:04:42,680
note.

69

00:04:43,830  -->  00:04:53,260
OK so what we want to do is we want to iterate over our queue and find the second to last node.

70

00:04:53,280  -->  00:04:56,400
We're going to look at how we can do that in code later on.

71

00:04:57,180  -->  00:05:01,650
And then instead of pointing to Philipe we just make it point to none.

72

00:05:02,520  -->  00:05:07,770
And although we're not explicitly destroying this node we're not just telling Python to delete it from

73

00:05:07,770  -->  00:05:08,670
memory.

74

00:05:08,670  -->  00:05:13,830
Python will realize that nothing is pointing to this node and it will be removed from memory for us

75

00:05:15,780  -->  00:05:18,360
and then we'll end up with a 2 node queue

76

00:05:22,680  -->  00:05:28,350
so the next method would be the size and only to find the size would just iterate over and go through

77

00:05:28,350  -->  00:05:31,810
all of the nodes in our linked list queue.

78

00:05:31,860  -->  00:05:36,450
We create a variable that would store the number of nodes we've gone through each time we visit the

79

00:05:36,450  -->  00:05:37,030
new node.

80

00:05:37,050  -->  00:05:42,570
We increase the variable by 1 and eventually when we get to a next to no there is none we stop increasing

81

00:05:42,600  -->  00:05:44,130
and we return that value.

82

00:05:44,280  -->  00:05:48,910
So we're just going to count each of the nodes in our queue.

83

00:05:49,050  -->  00:05:53,700
The print method is just like the size but instead of increasing a variable we're just going to print

84

00:05:53,760  -->  00:05:58,890
the node's details out and to implement this.

85

00:05:58,890  -->  00:06:03,290
Let's take a look in the next video on how we might go about programming a few.

86

00:06:03,570  -->  00:06:08,280
But before we do that I would encourage you to try to program it yourself with a knowledge that you've

87

00:06:08,280  -->  00:06:08,780
got now.

88

00:06:08,790  -->  00:06:14,370
Knowing what the methods are meant to do and with a linked list that we've already got I would encourage

89

00:06:14,370  -->  00:06:17,860
you to try to program this yourself before we continue.

90

00:06:18,000  -->  00:06:22,170
But if not I'll be seeing you in the very next few shorts either.
