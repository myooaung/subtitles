1

00:00:00,160  -->  00:00:06,750
Hyde will come back and there's really we're going to be dealing with user authorization in some cases

2

00:00:06,750  -->  00:00:14,460
here we're talking about our Earth for example in oh Ives or when we go to Twitter and we talk about

3

00:00:14,820  -->  00:00:22,830
authorization another word though you'll often see is authentication and now they are completely different

4

00:00:22,830  -->  00:00:23,300
.

5

00:00:23,340  -->  00:00:31,110
They are often confused for one another but authentication means verifying that a username and password

6

00:00:31,110  -->  00:00:33,070
combination is valid.

7

00:00:33,150  -->  00:00:36,120
Authorization means to give permission.

8

00:00:36,380  -->  00:00:43,980
What we're doing with logging in with Twitter is allowing the user to authorize our Twitter application

9

00:00:44,490  -->  00:00:46,480
to use their account.

10

00:00:46,920  -->  00:00:53,880
The user himself has to authenticate with Twitter by logging in but we are not concerned with them being

11

00:00:53,880  -->  00:00:54,840
logged in.

12

00:00:54,840  -->  00:01:00,180
We're only concerned with them giving us authorization to use their account.

13

00:01:00,180  -->  00:01:04,750
So that's just a bit of a knowledge bomb there for you to remember.

14

00:01:05,070  -->  00:01:13,200
And now in this video let's get the authorization talking the pin or the redirection.

15

00:01:13,200  -->  00:01:21,930
If we were a web application we would have the logic somewhere in our code to allow the user to visit

16

00:01:22,050  -->  00:01:23,420
our Web site.

17

00:01:23,940  -->  00:01:26,180
We're going to be looking exactly how to do that later on.

18

00:01:26,400  -->  00:01:36,720
But just imagine we allow the user to visit our Web page like so w w w dot our Web site don't come when

19

00:01:36,720  -->  00:01:38,870
the user log goes to our website.

20

00:01:38,910  -->  00:01:44,660
They may see a log in with Twitter button

21

00:01:47,790  -->  00:01:53,640
and when they press that they will go to Twitter dot com when they press that

22

00:01:56,310  -->  00:01:57,690
they go to Twitter or com.

23

00:01:57,810  -->  00:02:03,720
And then we generate this request token as well.

24

00:02:04,500  -->  00:02:09,960
So what you do first is generate the request token that we have already.

25

00:02:10,320  -->  00:02:14,540
Then they get to Twitter and they have to authorize our application remedies.

26

00:02:14,550  -->  00:02:25,830
I'm just reiterating over what we know they press sign an OR or authorize in Twitter dot com and then

27

00:02:25,980  -->  00:02:35,410
Twitter sends them back to e.g. the bedo literally dot our Web site dot com mouth.

28

00:02:36,270  -->  00:02:46,500
And when they send them back to our website they also send back an authorization code and then we get

29

00:02:46,950  -->  00:02:55,500
that code plus the request you can send it to Twitter and we get a access token.

30

00:02:55,710  -->  00:02:56,140
OK.

31

00:02:56,190  -->  00:03:01,370
Just going over what we know or rather what we've already covered.

32

00:03:01,370  -->  00:03:09,800
But I do appreciate this is a confusing topic and I'm going over it a bunch of times.

33

00:03:10,290  -->  00:03:12,420
We don't have a web application right now.

34

00:03:12,420  -->  00:03:14,380
We don't have w w w dot.

35

00:03:14,400  -->  00:03:21,690
Our Web site dot com although we will so Twitter cannot redirect the user back to our Web site because

36

00:03:21,690  -->  00:03:23,230
we don't have one.

37

00:03:23,250  -->  00:03:29,940
So what we did is going to do instead is generate a pin code and we are going to need to get that pin

38

00:03:29,940  -->  00:03:37,230
code from the user which is that code and use that with request token to send it to Twitter and get

39

00:03:37,230  -->  00:03:38,760
an access token back.

40

00:03:39,060  -->  00:03:39,560
OK.

41

00:03:39,810  -->  00:03:43,960
So the next thing to do is get into that authorization token.

42

00:03:44,700  -->  00:03:45,450
OK.

43

00:03:45,960  -->  00:03:52,770
So let's tell the user that they need to go and get that pin code the way we do that is very simple

44

00:03:52,770  -->  00:03:52,890
.

45

00:03:52,890  -->  00:04:01,220
We're going to tell them go to the following web site site too in your browser your browser.

46

00:04:01,740  -->  00:04:08,280
And then what we're going to do is print the user rail where they address that they have to go to with

47

00:04:08,280  -->  00:04:22,040
their browser and the address they have to go to is this wealth on this go to can use that format.

48

00:04:22,920  -->  00:04:29,650
And what has to go in there is something there and something there.

49

00:04:29,670  -->  00:04:32,270
Remember this is a query string.

50

00:04:32,490  -->  00:04:37,200
So it has to be in the format of name equals some value.

51

00:04:37,290  -->  00:04:39,520
And we can send that to Twitter.

52

00:04:39,840  -->  00:04:42,140
Twitter can then retrieve that.

53

00:04:42,210  -->  00:04:49,050
So we're going to be doing is accessing the you URL for authorization and pass that you are I'll give

54

00:04:49,050  -->  00:04:50,170
that you were ill.

55

00:04:50,370  -->  00:04:51,720
This query string.

56

00:04:51,820  -->  00:05:01,050
So right this query string there and the query string parameter we're giving is the wealth underscore

57

00:05:01,080  -->  00:05:08,850
token sure we're accessing the authorization you RL And we're giving it as a query string the old token

58

00:05:08,850  -->  00:05:09,890
.

59

00:05:09,900  -->  00:05:13,020
So in this format What do you think I should put in.

60

00:05:13,020  -->  00:05:21,100
Remember we need the authorization you know and the oath token.

61

00:05:22,590  -->  00:05:27,360
Now we haven't really covered how together you outspoken even though we have a request to can but we

62

00:05:27,360  -->  00:05:35,910
know that the first thing is going to be Constans don't authorization you RL I think we could get that

63

00:05:35,910  -->  00:05:41,340
far because here what we need is to allow the user to authorize our application.

64

00:05:41,340  -->  00:05:48,790
Now this our token is the request talken that we've generated that with our consumer.

65

00:05:48,810  -->  00:05:51,030
So Twitter knows it is our application.

66

00:05:51,390  -->  00:05:53,170
And for this specific user.

67

00:05:53,250  -->  00:06:02,850
So Twitter knows that we are linking up the request token that we're passing in with the user that is

68

00:06:02,850  -->  00:06:06,360
currently logged into Twitter.

69

00:06:06,360  -->  00:06:11,900
So the talk and there is going on the Web we're going to find out by once again doing a de-bug.

70

00:06:12,000  -->  00:06:18,990
So I'm going to press the bug icon after setting a break point and we'll find that request token which

71

00:06:18,990  -->  00:06:24,930
is the variable we created up here has an oath token value there.

72

00:06:25,590  -->  00:06:28,560
And that's what we want to send to Twitter.

73

00:06:28,560  -->  00:06:32,720
So after the coma I'm going to stop the debugger after the coma.

74

00:06:32,730  -->  00:06:35,040
The second parameter to replace this.

75

00:06:35,080  -->  00:06:39,180
There were going to put request open and then it's a dictionary.

76

00:06:39,180  -->  00:06:43,690
So we have to access it with the square brackets while talking.

77

00:06:44,790  -->  00:06:45,560
OK.

78

00:06:45,690  -->  00:06:51,760
So what we're telling the user now is go to the following site in your browser and the site is going

79

00:06:51,760  -->  00:06:59,880
to be the authorization you're able with the query string which use the old token equals the requests

80

00:07:00,210  -->  00:07:09,960
request tokens while token and that old token put a nose comes from our app because we generated it

81

00:07:09,960  -->  00:07:19,350
with this consumer and then it will allow Twitter to link up our app to the user currently logged into

82

00:07:19,350  -->  00:07:20,110
Twitter.

83

00:07:20,700  -->  00:07:22,080
And we'll see exactly how that happens.

84

00:07:22,080  -->  00:07:26,260
I'm just going to press play now and then I get to the following site.

85

00:07:26,300  -->  00:07:27,910
You're proud browser so I would just click that

86

00:07:31,710  -->  00:07:40,520
and now notice we've not told Twitter which user which Twitter user we are wanting to log in as we've

87

00:07:40,530  -->  00:07:44,490
not told Twitter that because I'm already logged into Twitter.

88

00:07:45,600  -->  00:07:49,850
So once I get to this page I am no longer in my application.

89

00:07:49,860  -->  00:07:54,540
Now this is Twitter and Twitter can see that I'm logged in.

90

00:07:54,540  -->  00:08:00,510
So naturally the user that we are logging in as is currently logged in user.

91

00:08:00,870  -->  00:08:07,800
And if I was not logged in then Twitter would ask me to log in here and then it asked me to authorize

92

00:08:07,920  -->  00:08:17,010
tweet analyzer and I can say authorize yes or no if I press authorize then what I get is a pin code

93

00:08:17,020  -->  00:08:17,600
.

94

00:08:18,180  -->  00:08:24,470
So now we're going to be using this pin code to generate the request talk through the access token.

95

00:08:24,570  -->  00:08:25,300
My bad.

96

00:08:25,620  -->  00:08:26,410
OK.

97

00:08:26,640  -->  00:08:31,500
So I'm going to close that window because now our program has finished it's not doing anything else

98

00:08:31,500  -->  00:08:36,480
apart from printing that it doesn't have much use for this pin code.

99

00:08:36,480  -->  00:08:41,370
The next thing to do would be to store the pin code so all of the verifier.

100

00:08:41,610  -->  00:08:42,570
You can call it whatever you want.

101

00:08:42,570  -->  00:08:46,240
I'm just calling it off verify it's going to be input.

102

00:08:46,350  -->  00:08:48,120
What is the pin.

103

00:08:48,300  -->  00:08:54,660
And we've seen the input function before and we're using it now to ask the user for the pin code that

104

00:08:54,700  -->  00:08:59,280
Twitter gave them when they visited that page.

105

00:08:59,280  -->  00:09:06,690
And once we have the PIN code then we can use it to generate another token which is going to be sending

106

00:09:07,110  -->  00:09:12,090
to the access token you RL And we're going to be generating the access token.

107

00:09:12,240  -->  00:09:13,700
Let's do that in the next video though.

108

00:09:13,920  -->  00:09:22,080
So to review we have asked the user to go to specific you are l which gets the currently logged in user

109

00:09:22,080  -->  00:09:28,140
input and generates a pin code for that user.

110

00:09:28,620  -->  00:09:34,920
So the next step is to use that PIN code and the request token to generate an access token.

111

00:09:35,040  -->  00:09:35,730
So you can actually
