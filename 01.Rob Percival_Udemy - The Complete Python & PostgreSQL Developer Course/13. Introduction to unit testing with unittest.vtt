WEBVTT
1

00:00:00.230  -->  00:00:07.800
Heimdall comeback in this video we're looking at an introduction to unit test now unit test is a framework

2

00:00:07.890  -->  00:00:14.070
in Python used for testing and it's built into Python so you don't have to install it or anything like

3

00:00:14.070  -->  00:00:15.160
that.

4

00:00:15.510  -->  00:00:24.530
What is testing a test just verifies whether something works or not.

5

00:00:24.530  -->  00:00:30.870
Now it's similar to assertions in a way an assertion verifies whether something has a correct value

6

00:00:30.870  -->  00:00:34.130
or not but a test is a slightly larger.

7

00:00:34.290  -->  00:00:41.700
And it's used to run something externally and see whether a method or a class is doing what it should

8

00:00:41.700  -->  00:00:43.470
be doing.

9

00:00:43.530  -->  00:00:45.750
The best way to look at this is with a couple examples.

10

00:00:45.750  -->  00:00:51.810
So let's create a new file here which I'm going to call testing and then I'm going to paste in our currency

11

00:00:51.810  -->  00:01:00.450
class which is a small class the currency class as you remember has an innate method a set amount method

12

00:01:00.450  -->  00:01:02.670
which changes the amount property.

13

00:01:02.820  -->  00:01:09.480
And I can then load in an amount of USD dollars and change it to its own currency.

14

00:01:09.990  -->  00:01:16.860
Or it can convert itself or an amount to US dollars and then it has a few methods to check for equality

15

00:01:16.890  -->  00:01:19.850
greater than less than so.

16

00:01:21.270  -->  00:01:25.120
So a small class that just simulates a currency.

17

00:01:25.200  -->  00:01:26.700
OK.

18

00:01:28.140  -->  00:01:29.680
Apologies for that.

19

00:01:30.450  -->  00:01:38.370
So what we want to do is then verify that it is working properly that the methods that we have implemented

20

00:01:38.880  -->  00:01:42.870
do what we think they should do.

21

00:01:43.020  -->  00:01:49.960
So we are going to create a class called currency test and the family has test in the name is important

22

00:01:49.970  -->  00:01:50.420
.

23

00:01:51.030  -->  00:01:56.500
And then I'm going to put in unit test dot test case ask the superclass.

24

00:01:56.550  -->  00:02:05.540
We have to import unit tests so let's go to the top of the file and import unit test from there.

25

00:02:06.080  -->  00:02:06.360
OK.

26

00:02:06.360  -->  00:02:13.620
So then we have this currency test class at the bottom which is a subclass of test case in inside the

27

00:02:13.620  -->  00:02:15.810
unit test package.

28

00:02:15.950  -->  00:02:17.210
OK.

29

00:02:18.330  -->  00:02:23.070
Then inside this currency test class we can create tests.

30

00:02:23.100  -->  00:02:31.400
Each test should verify that one single thing works properly and it does what it should do.

31

00:02:31.860  -->  00:02:37.080
Remember it's important that it's one thing or one small subset of functionality

32

00:02:43.230  -->  00:02:43.890
from good to great.

33

00:02:43.890  -->  00:02:48.630
The first test which I'm calling test create currency.

34

00:02:48.630  -->  00:02:54.870
The fact that it has test in the name is important as that tells unit test that this is something that

35

00:02:54.870  -->  00:02:58.870
should be executed when we run the tests.

36

00:02:59.130  -->  00:03:01.000
We're going to look at what that means soon.

37

00:03:01.020  -->  00:03:09.330
So test create currency is the name of the test and this test this method here should verify that a

38

00:03:09.330  -->  00:03:16.440
single thing or a small subset of functionality works properly instead of pass.

39

00:03:16.770  -->  00:03:23.100
We're going to be verifying that the creation of a currency is correct.

40

00:03:23.560  -->  00:03:24.060
OK.

41

00:03:24.240  -->  00:03:30.660
So we're going to create a currency called pounds and I'm going to give you the code GBP and the exchange

42

00:03:30.660  -->  00:03:32.880
rate of one point twenty one.

43

00:03:32.900  -->  00:03:43.020
Now what we want to verify in the test currency is that the pound's code is GBP and that the pounds

44

00:03:43.020  -->  00:03:44.650
exchange rate is one point twenty one.

45

00:03:44.700  -->  00:03:53.920
It sounds silly We've created the LBS object and we've given it GBP on one point twenty one surely pounds

46

00:03:53.940  -->  00:04:03.600
dog food is going to be GBP surely pounds not exchange the USD is going to be one point twenty one.

47

00:04:03.660  -->  00:04:06.920
We've got it up here self-dual code equals code.

48

00:04:06.960  -->  00:04:11.570
So the code comes in there and then it's assigned to Southdale code exchange to us the comes in there

49

00:04:11.570  -->  00:04:14.450
and it's the same two safter exchanged or USD.

50

00:04:14.730  -->  00:04:16.740
This seems boring seems obvious.

51

00:04:16.740  -->  00:04:23.050
We know that Pound's that code is going to be GBP because of the way we've created the program.

52

00:04:23.490  -->  00:04:29.330
We know that Pound's not exchange to us is going to be one point twenty one because of the way you treated

53

00:04:29.340  -->  00:04:30.550
the program.

54

00:04:31.050  -->  00:04:38.040
But what if we messed up when creating the program we thought we did something but really we did something

55

00:04:38.040  -->  00:04:38.630
else.

56

00:04:38.700  -->  00:04:46.170
For example we did this by accident which a lot of my students do and don't be afraid of you are one

57

00:04:46.170  -->  00:04:46.650
of them.

58

00:04:46.770  -->  00:04:48.560
It happens to everybody.

59

00:04:48.720  -->  00:04:51.470
Imagine that we put a comma there at the end.

60

00:04:51.640  -->  00:04:56.090
OK let's leave the comma up there for now and let's write our test.

61

00:04:56.100  -->  00:05:03.780
We know that DBP should be pounds of code 1.0 anyone should be Pound's not exchange to us.

62

00:05:03.990  -->  00:05:08.160
How do we tell the test to make sure that that is correct.

63

00:05:08.160  -->  00:05:15.140
Well we do not assert equal self don't assert equal.

64

00:05:15.300  -->  00:05:25.260
And then here two things that should be equal Pound's not code and GBP self-torture at equal Pound's

65

00:05:25.870  -->  00:05:29.030
don't exchange to us the 1.20.

66

00:05:29.560  -->  00:05:35.620
So the two parameters should be equal the two parameters to the assert equal method should be equal

67

00:05:35.630  -->  00:05:43.820
that's what it verifies so pounds not code should be GBP pounds or exchange to USD should be 1.20.

68

00:05:44.020  -->  00:05:46.080
That's what this test is verifying.

69

00:05:46.300  -->  00:05:51.800
And now we can right click it on page form and run it.

70

00:05:51.820  -->  00:05:59.920
Notice how it fails it fails because it tells us Pound's not code is not equal to GBP.

71

00:05:59.950  -->  00:06:05.400
It's saying this thing here is not equal to this thing.

72

00:06:05.800  -->  00:06:08.690
This thing here is Pound's dot code.

73

00:06:09.400  -->  00:06:12.700
This thing here is this string there.

74

00:06:13.240  -->  00:06:21.970
So basically we've noticed that we made a mistake we made a mistake because the code inside the pound's

75

00:06:21.970  -->  00:06:30.720
object is not equal to what we would expect it to be which is DBP and that is through the comma there

76

00:06:30.730  -->  00:06:32.760
.

77

00:06:32.860  -->  00:06:36.390
Now I've removed the comma from the code and we can run this again.

78

00:06:36.460  -->  00:06:39.810
And now it does pass.

79

00:06:39.810  -->  00:06:40.270
OK.

80

00:06:40.510  -->  00:06:47.330
What the comma was doing is it was converting an this variable here into a tuple.

81

00:06:47.380  -->  00:06:54.280
It was basically converting it into a tuple like this and a tuple is not the same as a variable is not

82

00:06:54.280  -->  00:06:56.110
the same as a normal variable.

83

00:06:56.110  -->  00:07:00.670
So it was failing because we were converting this thing to what happened there.

84

00:07:00.850  -->  00:07:06.670
If we do that these end up being topples so self ex change us the it would be a topple self that code

85

00:07:06.670  -->  00:07:07.490
would be a table.

86

00:07:07.660  -->  00:07:09.860
And they are not the same as the plane.

87

00:07:09.940  -->  00:07:12.420
String and plane float.

88

00:07:12.430  -->  00:07:22.200
Now we have them by creating this test we now know whenever we run this fast that we can verify the

89

00:07:22.200  -->  00:07:25.360
currents the object is being created correctly.

90

00:07:25.360  -->  00:07:30.110
If we then go back and change this in its method we add something to it.

91

00:07:30.130  -->  00:07:37.540
We change something we rewrite something we can just run the test again and if it passes we know that

92

00:07:37.540  -->  00:07:39.680
we didn't break anything.

93

00:07:40.840  -->  00:07:46.270
And that's good because it means that we don't have to waste time manually verifying everything.

94

00:07:46.300  -->  00:07:52.360
This is now an automated test which just verified it for us and gives us a bit of confidence that the

95

00:07:52.360  -->  00:07:56.620
code that we've written works as we intended it.

96

00:07:56.650  -->  00:07:59.320
It does not give us 100 percent confidence.

97

00:07:59.320  -->  00:08:06.340
Don't get me wrong just because this test passes doesn't mean that the currency object is working perfectly

98

00:08:08.050  -->  00:08:16.200
but it gives us a bit of confidence that that small subset of functionality does work.

99

00:08:16.240  -->  00:08:18.400
Let's get another one for your learning

100

00:08:22.030  -->  00:08:28.180
and we'll call it test compare currency and that's going to test whether the currency comparisons do

101

00:08:28.180  -->  00:08:29.640
work or not.

102

00:08:30.220  -->  00:08:35.620
OK so I'm going to create an other lbs object and I euros object

103

00:08:40.390  -->  00:08:51.490
like so and I'm going to say Poundstone cents amount to five thousand euros that Cent amount to 10 and

104

00:08:51.490  -->  00:09:04.760
then we're going to himself don't assert equal pounds and don't amount is 5000.

105

00:09:05.400  -->  00:09:09.020
So the research equal Euros don't set amount.

106

00:09:09.070  -->  00:09:16.410
Sorry eurozone amount 10 AM and apologies I'm going to rename the test instead of compay currency is

107

00:09:16.420  -->  00:09:19.740
going to set a test set amount and go.

108

00:09:20.350  -->  00:09:26.650
So now this is testing whether setting the amount of currency works and we can once again run that test

109

00:09:27.070  -->  00:09:33.060
and see that it does work and then we can go and test compare accuracy.

110

00:09:33.640  -->  00:09:42.580
Once again I'm going to just copy that and now what I want to compare is euros and pounds to see if

111

00:09:42.580  -->  00:09:49.050
the builtin methods equal greater than less than less than or equal to create an equal to work.

112

00:09:49.320  -->  00:09:57.470
OK so what to do is saying self don't assert true.

113

00:09:57.880  -->  00:10:00.320
Now we're no longer using assert equal.

114

00:10:00.430  -->  00:10:06.060
We're using assert true Pound's is greater than Euros.

115

00:10:06.430  -->  00:10:10.550
We know this should be true because we've got £5000 and only 10 euros.

116

00:10:10.930  -->  00:10:13.210
So we can say this should be true.

117

00:10:13.290  -->  00:10:17.840
I assert that this is true and if it is then the test will pass.

118

00:10:17.860  -->  00:10:22.820
So let's Right-Click and run it and it does pass.

119

00:10:22.840  -->  00:10:25.360
So now we know that it does work.

120

00:10:25.480  -->  00:10:30.050
We can also say self-model cert false Pound's is less than Euros.

121

00:10:30.070  -->  00:10:31.800
We know that should be false.

122

00:10:31.870  -->  00:10:34.440
So we can run that and it does still pass.

123

00:10:34.450  -->  00:10:37.660
So we know we have not made a mistake yet.

124

00:10:37.660  -->  00:10:42.450
Finally we can also say self-taught assert false Pound's equal equal use.

125

00:10:42.880  -->  00:10:44.710
We know that that should also be false.

126

00:10:46.460  -->  00:10:51.260
Finally I'm going to create another test compare currency with equal value.

127

00:10:51.290  -->  00:10:53.840
So when the currencies have equal value.

128

00:10:54.020  -->  00:10:54.720
OK.

129

00:10:55.390  -->  00:11:05.780
So I'm going to create one called pounds and euros so apologies like that I'm going to create these

130

00:11:05.780  -->  00:11:08.350
two pounds and pounds too.

131

00:11:09.620  -->  00:11:14.160
And they're both going to have exactly the same value.

132

00:11:14.600  -->  00:11:16.630
And this is going to be the same there.

133

00:11:17.300  -->  00:11:24.680
So what I've created is essentially two currency objects with the same code same exchange rate and same

134

00:11:24.680  -->  00:11:26.320
value.

135

00:11:26.360  -->  00:11:33.850
So we know that our pounds are greater than or equal two pounds two should be true.

136

00:11:34.160  -->  00:11:40.760
And that's what we are asserting where we know that pounds less than or equal to pounds too should also

137

00:11:40.760  -->  00:11:43.190
be true because they are equal.

138

00:11:43.430  -->  00:11:51.380
And finally pounds equal equal two pounds two should also be true but false should be pounds greater

139

00:11:51.380  -->  00:11:57.650
than pounds to fall should be pounds less than pounds too.

140

00:11:59.540  -->  00:12:04.610
So now we're asserting a few things here which is what things should be true when the currencies are

141

00:12:04.640  -->  00:12:11.210
of equal value least the what currency should be false when the things are of equal value which is greater

142

00:12:11.210  -->  00:12:12.670
than less.

143

00:12:13.490  -->  00:12:16.860
So we can run that and that process again.

144

00:12:17.900  -->  00:12:24.680
Here's a challenge for you right a couple of methods to test the other two functions the in currency

145

00:12:25.100  -->  00:12:29.360
and the two us the methods that we've got in the currency object.

146

00:12:29.390  -->  00:12:36.290
These two here wrote a couple of tests for them following this sort of convention that we've set here

147

00:12:36.740  -->  00:12:43.770
asserting that things are equal or things are true or false.

148

00:12:47.330  -->  00:12:48.180
Hopefully you managed.

149

00:12:48.190  -->  00:12:51.950
Let's break that together then test compare them.

150

00:12:51.990  -->  00:13:03.350
Test in currency and I'm going to get the pounds here and then I'm going to say self don't assert equal

151

00:13:04.400  -->  00:13:07.160
pounds don't in currency.

152

00:13:07.840  -->  00:13:09.150
Twelve hundred and ten.

153

00:13:09.320  -->  00:13:09.880
We know that.

154

00:13:09.890  -->  00:13:16.380
Twelve hundred and ten dollars should give me one thousand pounds.

155

00:13:17.620  -->  00:13:18.160
OK.

156

00:13:18.530  -->  00:13:24.380
So let's run this now and it does pass.

157

00:13:24.380  -->  00:13:30.660
So the two of them ten dollars in currency in pounds should be equal to 1000 pounds.

158

00:13:30.680  -->  00:13:35.300
So when we assert equal we know that this does work the way we intended it to

159

00:13:38.690  -->  00:13:44.180
and test to us the once again we're going to do essentially the same thing but we've created a pound's

160

00:13:44.180  -->  00:13:53.180
object and we were asserting is that pounds to us the 1000 should give us twelve hundred and ten USPS

161

00:13:53.660  -->  00:13:55.220
essentially the conversion on the other way around.

162

00:13:55.220  -->  00:14:01.000
We're just testing that it works we're going to run that and it does so that's fantastic.

163

00:14:01.010  -->  00:14:07.580
We've used the two methods to do our tests and there is only one more thing that I wanted to show you

164

00:14:07.580  -->  00:14:13.550
which is very useful which is how to test things that raise exceptions.

165

00:14:13.550  -->  00:14:17.600
You may think well why do we need to test things at these exceptions.

166

00:14:17.600  -->  00:14:20.000
Or maybe you're thinking I've never done that before.

167

00:14:20.030  -->  00:14:22.060
Nothing I'll ever have to.

168

00:14:22.070  -->  00:14:23.930
But the truth is you probably will.

169

00:14:24.480  -->  00:14:27.400
Because raising exceptions happens all the time.

170

00:14:27.770  -->  00:14:31.570
It is possible that in the future you will need to test something that raises an exception.

171

00:14:31.640  -->  00:14:38.570
So it's good for you to know how to do that.

172

00:14:39.200  -->  00:14:43.290
So I'm going to create a method called test comparison with exceptions.

173

00:14:43.790  -->  00:14:49.000
And what I'm going to do is say and treat my Pound's object.

174

00:14:50.010  -->  00:14:57.530
Pound's not said van that amounts to one thousand and now I'm going as a self-taught assert equal Pound's

175

00:14:57.560  -->  00:15:10.300
to us the story and not solely so as not assert true Pound's equal 1000.

176

00:15:10.640  -->  00:15:17.000
Now pyjama is smart and it tells us that type it doesn't have the expected attributes to us because

177

00:15:17.300  -->  00:15:25.400
pi charm is reading the each new method up here and it's seeing that we're calling that to us the method

178

00:15:25.460  -->  00:15:26.510
on other.

179

00:15:26.960  -->  00:15:34.880
So it's telling us that one thousand the value 1000 doesn't have to us the method pyjamas smart but

180

00:15:35.090  -->  00:15:38.060
we can't ensure that there will always be there.

181

00:15:38.120  -->  00:15:47.930
So what will happen when we run this when we assert to true that LBS is equal to 1000.

182

00:15:50.630  -->  00:15:59.240
Well as expected we get an attribute error because the int 1000 doesn't have an attribute called to

183

00:15:59.240  -->  00:16:00.550
USD.

184

00:16:00.980  -->  00:16:01.810
The end.

185

00:16:01.880  -->  00:16:06.480
An object has few attributes and to us that is not one of them.

186

00:16:06.830  -->  00:16:16.680
So what we have to do is say we self-taught assert raisings value error

187

00:16:20.890  -->  00:16:27.940
found a value or is attribute Harrah actually ran the lottery winner pound equally you could do out

188

00:16:27.960  -->  00:16:28.980
.

189

00:16:29.150  -->  00:16:37.070
Now we are going to what this is saying is making sure that the following code raises and attribute

190

00:16:37.100  -->  00:16:37.850
error.

191

00:16:38.060  -->  00:16:42.450
Run the following code and the code that we're running is pounde equal equal 1000.

192

00:16:42.890  -->  00:16:51.710
When we run this test now it passes because this code here did raise an attribute error.

193

00:16:51.950  -->  00:16:58.070
If we type value error however this will fail because of the actually Butera.

194

00:16:58.070  -->  00:17:03.300
So this has to be an attribute error because the code here is raising an attribute error.

195

00:17:03.410  -->  00:17:11.390
And what we are comparing or what we are asserting is that the code below the with statement does reads

196

00:17:11.450  -->  00:17:13.370
an attribute error.

197

00:17:14.360  -->  00:17:21.150
Ok so now we know that we cannot compare pounds to numbers and things like that.

198

00:17:21.570  -->  00:17:30.230
OK this was just a quick introduction to testing using unit test and there's loads of testing about

199

00:17:30.500  -->  00:17:35.910
testing is really important to make sure that whenever you make changes to your code whenever you add

200

00:17:35.930  -->  00:17:43.070
to your code you can just run your tests and verify give you a bit of confidence that things work.

201

00:17:43.070  -->  00:17:45.120
It's not 100 percent safe.

202

00:17:45.290  -->  00:17:48.530
It doesn't give you 100 percent confidence.

203

00:17:48.530  -->  00:17:55.340
It doesn't mean just because your tests pass that your code is working perfectly but it helps it helps

204

00:17:55.340  -->  00:17:55.940
a bit.

205

00:17:56.330  -->  00:18:01.930
So it's always good to write tests for the code that you are writing.

206

00:18:01.970  -->  00:18:09.290
Also if you find it very difficult to write tests for your code that is not a sign that you shouldn't

207

00:18:09.290  -->  00:18:13.640
test it's a sign that your code is not written well.

208

00:18:13.760  -->  00:18:20.810
Code should be testable and if it's not then you have to think about how to redesign your code re-engineer

209

00:18:20.840  -->  00:18:29.000
it so that it is testable and that usually entails having small methods that do small things and a lot

210

00:18:29.000  -->  00:18:30.420
of those things.

211

00:18:31.040  -->  00:18:32.760
But I don't want to keep you for too long.

212

00:18:32.780  -->  00:18:37.360
Just wanted to give you an introduction to unit test and testing with Python and why.

213

00:18:37.370  -->  00:18:43.670
Sometimes useful and to encourage you to read more on that and to learn more about unit testing in general

214

00:18:44.030  -->  00:18:46.340
and especially in pite.

215

00:18:46.340  -->  00:18:49.880
Also as a leaving note you don't have to run your tests one by one.

216

00:18:49.880  -->  00:18:58.540
You can just run the entire class like so and that runs all of the tests in the next section.

217

00:18:58.590  -->  00:19:04.340
We are going to be looking at and data structures and algorithms and I am going to provide you with

218

00:19:04.340  -->  00:19:12.140
some exercises and those exercises have attached a set of tests and those tests will let you verify

219

00:19:12.140  -->  00:19:16.370
that the code you've written doesn't work well and I've written the tests.

220

00:19:16.370  -->  00:19:17.820
You will be right in the code.

221

00:19:17.990  -->  00:19:19.830
And we're going to be working together on that.

222

00:19:20.390  -->  00:19:24.220
But I'll wait until the next section to talk with you more about that.

223

00:19:24.260  -->  00:19:25.700
So please don't go anywhere.

224

00:19:25.880  -->  00:19:31.940
Let's move straight onto the next section in the next few videos where I'm going to be talking about

225

00:19:31.940  -->  00:19:36.140
or rather we are going to be looking at algorithms and data structures.

226

00:19:36.140  -->  00:19:37.180
So without further ado.

227

00:19:37.250  -->  00:19:40.970
Thanks for joining me and I'll see you in the very next one.
