1

00:00:00,240  -->  00:00:05,940
Hi and welcome back in this video we're looking at loading data from postscripts using psycho OPG to

2

00:00:07,920  -->  00:00:09,620
we've looked at saving data.

3

00:00:09,930  -->  00:00:17,010
And the way we did that was using with psychopathy to connect passing in the details of our connection

4

00:00:17,140  -->  00:00:17,540
.

5

00:00:17,550  -->  00:00:23,640
Amazing ass connection and what that did was initiate a new variable create a variable called Connection

6

00:00:24,000  -->  00:00:30,390
give it to the content of psycho-BS you connect and then we use that to open a Carcer which would allow

7

00:00:30,390  -->  00:00:35,090
us to then execute sequel and insert our data in.

8

00:00:35,550  -->  00:00:38,040
We also looked at what the with statement does.

9

00:00:38,040  -->  00:00:43,410
And in both of these cases where the with statement does is it closes and commits the appropriate things

10

00:00:43,680  -->  00:00:47,460
to the database at the end of the with clause.

11

00:00:47,460  -->  00:00:50,860
So the with clause for the cursor is this one.

12

00:00:51,000  -->  00:00:57,780
And at the end of it that closes the cursor the with clause for the connection is all of this.

13

00:00:58,040  -->  00:01:01,220
And at the end of it it commits to disk.

14

00:01:01,230  -->  00:01:07,130
It saves the data to the disk that was interacted with in that connection and then inclosures that connection

15

00:01:07,130  -->  00:01:08,240
too.

16

00:01:09,210  -->  00:01:13,470
In this video as I said we're looking at loading from postscripts.

17

00:01:13,890  -->  00:01:21,870
But before we can do that we need to look into a new type of method which is the class method.

18

00:01:21,870  -->  00:01:26,890
These seem to be wrapper and init methods all share something in common.

19

00:01:26,970  -->  00:01:33,850
As I'm sure you realize and that's the self self self self what is that.

20

00:01:34,020  -->  00:01:38,480
We've kind of looked at self and I've explained what self is.

21

00:01:38,850  -->  00:01:44,880
And I appreciate it will take a long time until it really clicks with you if you're only just starting

22

00:01:44,880  -->  00:01:47,060
programming.

23

00:01:47,070  -->  00:01:51,780
It certainly takes a long time when you're starting about the average I think it's between six to 10

24

00:01:51,780  -->  00:01:56,330
months for it to really click in to what these things all are.

25

00:01:56,340  -->  00:01:58,290
So if it doesn't get don't worry.

26

00:01:58,560  -->  00:02:04,150
But what the self is and I'll just say it again is the currently bound object.

27

00:02:04,380  -->  00:02:11,280
When you run a method so I'm going to go into my app and then I've created an object called my user

28

00:02:11,340  -->  00:02:13,260
and that type is user.

29

00:02:13,800  -->  00:02:21,840
And I've passed that in some variables when I run my user don't seem to be really what this is doing

30

00:02:22,490  -->  00:02:30,350
is it's doing something like this user don't save to be my user.

31

00:02:30,770  -->  00:02:32,290
So that was going on there.

32

00:02:32,490  -->  00:02:37,030
My user is the self parameter.

33

00:02:37,110  -->  00:02:44,690
So when we run the method using my user Daut safe to D-B this thing that is calling the method IIS passed

34

00:02:44,690  -->  00:02:45,960
in as the first parameter.

35

00:02:45,960  -->  00:02:48,510
Even though it's not inside the brackets.

36

00:02:48,540  -->  00:02:49,620
So this is happening.

37

00:02:49,650  -->  00:02:58,920
My user is self and then this is identical us doing my user Daut e-mail except my user is not defined

38

00:02:58,920  -->  00:03:02,140
in this file so we don't have access to it.

39

00:03:02,140  -->  00:03:06,780
Usually when I'm going my user is passed in as self.

40

00:03:06,780  -->  00:03:12,330
So whenever we run a method that uses self it modifies my user.

41

00:03:12,330  -->  00:03:23,250
So that's why if we say my user don't e-mail is something else then my user of see if the D-B has access

42

00:03:23,310  -->  00:03:24,510
to that new e-mail.

43

00:03:24,510  -->  00:03:30,250
We've changed the property of my user and that is what is passed to save to TB.

44

00:03:30,510  -->  00:03:35,720
OK long winded way of saying it doesn't have to be like that.

45

00:03:36,200  -->  00:03:42,330
What I'm going to do now is define a class method and a class method doesn't access the currently bound

46

00:03:42,330  -->  00:03:42,840
object

47

00:03:42,840  -->  00:03:49,680
.

48

00:03:49,680  -->  00:03:53,790
So what I'm going to do now is create the method load from DBI by email.

49

00:03:53,970  -->  00:04:02,320
And notice how pyjama smartly replaces self with CLX which is the standard name for class methods.

50

00:04:03,390  -->  00:04:06,300
So take a wild guess wild guess.

51

00:04:06,300  -->  00:04:11,710
I mean really wild if self normally is the currently bound object.

52

00:04:12,240  -->  00:04:17,940
What do you think CLX is inside this method.

53

00:04:17,940  -->  00:04:26,310
Take a moment to think about because it is a logical thing to be.

54

00:04:27,290  -->  00:04:30,540
And the answer to that and I gave you a few moments to think about it.

55

00:04:30,590  -->  00:04:39,740
CLX itself is normally the currently bound object CLX is the currently bound Plass a.k.a. a user.

56

00:04:40,650  -->  00:04:41,330
OK.

57

00:04:41,820  -->  00:04:47,390
We're going to use a CLX in this method and that is going to be if we do less.

58

00:04:47,670  -->  00:04:49,920
And then for example

59

00:04:58,360  -->  00:05:02,980
not it's Then remember this can be anything.

60

00:05:03,340  -->  00:05:07,660
It doesn't have to be my name I'll just change it just for you sakes.

61

00:05:07,900  -->  00:05:16,150
This line here is exactly the same as this one here except it naturally creates a different object with

62

00:05:16,150  -->  00:05:17,880
different properties.

63

00:05:18,220  -->  00:05:22,530
But we could still assign it to a variable.

64

00:05:22,560  -->  00:05:28,150
CLX is the currently bound class which makes it user.

65

00:05:28,210  -->  00:05:29,600
Those two things are the same.

66

00:05:29,820  -->  00:05:34,660
Ok so now we know that CLSA is user.

67

00:05:34,690  -->  00:05:36,950
So let's load from the database.

68

00:05:37,120  -->  00:05:41,530
What do you think is the first step for me to load from the database.

69

00:05:41,530  -->  00:05:48,130
Remember when we save we connected and then we open the cursor and then we Ransom's equal and then we

70

00:05:48,130  -->  00:05:51,070
closed the cursor and then we close the connection.

71

00:05:51,070  -->  00:05:52,700
That's what it with does.

72

00:05:52,880  -->  00:05:58,430
So what do you think I should do to load from the database.

73

00:05:58,900  -->  00:05:59,800
I'm sure you got it.

74

00:05:59,810  -->  00:06:03,670
The first step is to open up the connection once again.

75

00:06:03,680  -->  00:06:11,520
So I'm going to copy and as you may guess the next step is to create a cursor.

76

00:06:12,680  -->  00:06:17,870
And as you may guess the next step is to execute some code.

77

00:06:17,870  -->  00:06:26,330
And now what we want to execute is not an insert but rather he selects because we want to retrieve some

78

00:06:26,320  -->  00:06:26,670
data.

79

00:06:26,680  -->  00:06:34,960
Select start from users and I'm loading from D-B by email.

80

00:06:34,960  -->  00:06:37,480
So I want to filter by the email.

81

00:06:37,540  -->  00:06:43,480
Do you remember how to perform a filter using sequel.

82

00:06:43,580  -->  00:06:44,440
I'm sure you do.

83

00:06:44,690  -->  00:06:46,920
It is way e-mail.

84

00:06:46,940  -->  00:06:55,270
Equal percent S and that percent as of now is going to get replaced by the parameters that we pass in

85

00:06:55,270  -->  00:06:59,860
as the second argument to the execute method and the execute method.

86

00:06:59,870  -->  00:07:01,600
These are the brackets for it.

87

00:07:01,610  -->  00:07:08,290
The string here and the query is the first parameter and after we have to put in the second parameter

88

00:07:08,290  -->  00:07:15,470
which is a set of arguments to pass to the query and the only thing we want to hear is that email

89

00:07:18,760  -->  00:07:21,100
Bhagwat email.

90

00:07:22,490  -->  00:07:26,940
Naturally in a class method we don't have self.

91

00:07:26,990  -->  00:07:35,740
So unfortunately we can't do self-taught email and also by the time that we want to load from the database

92

00:07:35,950  -->  00:07:37,450
we want to load.

93

00:07:37,450  -->  00:07:42,910
So we can create an object which means we don't have self-dual email we don't know what that is.

94

00:07:43,540  -->  00:07:46,740
So what to do is pass in the email as a parameter.

95

00:07:47,050  -->  00:07:50,450
And we're going to look at how to do that in just a moment.

96

00:07:51,520  -->  00:07:57,940
However that is a key thing here and that can be a huge headache if you don't realize it.

97

00:07:58,150  -->  00:08:06,950
And if we hover over email in page it tells us remove redundant parentheses but they do have parentheses

98

00:08:06,940  -->  00:08:07,710
up here.

99

00:08:07,940  -->  00:08:14,470
So there's the set of parameters has parentheses around it and it doesn't say to remove them but it

100

00:08:14,490  -->  00:08:22,210
tells us here and that is because Python thinks these parentheses are like the parentheses you would

101

00:08:22,220  -->  00:08:32,920
use in a maths equation you know like if you do five plus five times two this would be ten plus five

102

00:08:32,920  -->  00:08:33,290
right.

103

00:08:33,280  -->  00:08:40,670
The multiplication runs first and Python by default things these parentheses are a rule like this you

104

00:08:40,660  -->  00:08:43,280
know five plus five times two.

105

00:08:43,370  -->  00:08:48,800
So these are like giving priority to the email and it tells you you know you don't have to give priority

106

00:08:48,790  -->  00:08:53,420
to the email here because that doesn't make any sense and they're right it doesn't.

107

00:08:53,650  -->  00:08:59,170
Well we want to do with these parentheses is defining topple and I'm not sure if we've looked at this

108

00:08:59,170  -->  00:08:59,700
before.

109

00:08:59,950  -->  00:09:02,080
But a couple something like

110

00:09:04,910  -->  00:09:08,420
one two three four five six.

111

00:09:08,620  -->  00:09:09,680
This is a table.

112

00:09:09,830  -->  00:09:16,640
It is identical to a list essentially.

113

00:09:16,820  -->  00:09:20,900
So the table uses normal brackets the least use a square brackets.

114

00:09:20,890  -->  00:09:25,720
We've looked at lists before and we've not I don't know if we've looked at doubles but I'll just explain

115

00:09:25,720  -->  00:09:26,340
it anyway.

116

00:09:26,600  -->  00:09:30,830
The table is exactly like a list except you cannot change.

117

00:09:30,860  -->  00:09:33,350
You cannot add new elements to it.

118

00:09:33,350  -->  00:09:36,790
So it is essentially an immutable list.

119

00:09:36,940  -->  00:09:38,930
So you think that these are four priority.

120

00:09:38,950  -->  00:09:44,670
So we have to put a comma a b and to tell it that this is a table and that's it.

121

00:09:44,920  -->  00:09:48,000
And if you didn't know that this would never work and you would never know why

122

00:09:50,760  -->  00:09:55,060
so now we have to read this cursor to execute this statement.

123

00:09:55,420  -->  00:09:59,860
And because it's a cursor what it does is it stores the result in the cursor.

124

00:09:59,860  -->  00:10:02,780
Think of it as a table.

125

00:10:02,980  -->  00:10:05,440
And I'm going to just go over to pgm and 3.

126

00:10:05,620  -->  00:10:14,380
Think of it as it's retrieving this table here and the cursor is starting just above the first row.

127

00:10:14,710  -->  00:10:19,750
And now we can ask it to give us the first row or potentially give us all the rows and then we can do

128

00:10:19,750  -->  00:10:21,540
that with a method inside cursor.

129

00:10:21,730  -->  00:10:30,930
So what we're going to do is say user data is cursor don't fetch one and that fetches the first row

130

00:10:30,930  -->  00:10:31,720
.

131

00:10:31,890  -->  00:10:35,490
We're assuming that email is going to be somewhat unique.

132

00:10:35,670  -->  00:10:41,260
So fetch one should give us that the only user with that email because they should only be one.

133

00:10:42,120  -->  00:10:50,100
And finally we can do return CLX And here's where we're going to be returning a new object of type user

134

00:10:50,110  -->  00:11:01,290
which is currently bound CLOS using the data in the row as you know the email is not the first column

135

00:11:01,440  -->  00:11:06,810
but the email is the second column the first name is the third column and the last name is the last

136

00:11:06,810  -->  00:11:08,860
and fourth column.

137

00:11:08,940  -->  00:11:14,440
So email equals use underscore data 1.

138

00:11:14,550  -->  00:11:17,560
The second column where I'm going to starts at zero.

139

00:11:18,030  -->  00:11:28,060
First name equals use an underscore data to last name equals use or underscore data 3 and the ID equals

140

00:11:28,140  -->  00:11:32,480
use or underscore to zero the first column.

141

00:11:32,750  -->  00:11:37,740
You may be asking why are you putting this stuff in there and I don't have to be you know we can delete

142

00:11:37,750  -->  00:11:39,910
that if we want.

143

00:11:40,290  -->  00:11:44,920
All that's doing is it's allowing me some more readability.

144

00:11:44,910  -->  00:11:53,490
So this is simply going to say call the user class which is the current class for this method and past

145

00:11:53,520  -->  00:11:59,110
user data one which is the the second column into email.

146

00:11:59,190  -->  00:12:06,240
The third column in into first name the fourth column in the last name and the law the first column

147

00:12:06,820  -->  00:12:12,850
into ID and then that's going to populate my object and it's going to return a new object with this

148

00:12:12,860  -->  00:12:13,900
date.

149

00:12:14,760  -->  00:12:21,360
And if I do this as I am again I'm not sure if we've looked at this but it does exactly the same thing

150

00:12:21,380  -->  00:12:21,870
.

151

00:12:22,240  -->  00:12:28,080
But now we can put it in the wrong order if we want.

152

00:12:28,240  -->  00:12:30,720
Just to not confuse Python the default.

153

00:12:30,730  -->  00:12:31,690
Put them in order.

154

00:12:31,750  -->  00:12:38,390
But if we name them if we give them name and parameters then we can put it out of order.

155

00:12:38,520  -->  00:12:39,760
It's not a very nice thing to do.

156

00:12:39,760  -->  00:12:41,100
It doesn't make sense.

157

00:12:41,210  -->  00:12:43,020
So don't do that.

158

00:12:44,240  -->  00:12:45,360
And that's it.

159

00:12:45,370  -->  00:12:47,330
Now we are able to load from the database.

160

00:12:47,500  -->  00:12:52,180
After that the cursor gets closed and after that the connection gets closed so we can go into an app

161

00:12:54,900  -->  00:13:02,960
and am going to first of all go into puji admin 3 and am going to open up and the sequel editor when

162

00:13:02,960  -->  00:13:09,470
I select staff from users and I'm going to delete everything that's not with ID 1.

163

00:13:09,490  -->  00:13:13,140
You don't have to do this but there are a lot of duplicate data here.

164

00:13:13,140  -->  00:13:21,640
It makes sense to delete from users where Id is not one.

165

00:13:22,710  -->  00:13:25,030
And that just deletes everything except the ID one.

166

00:13:25,170  -->  00:13:31,660
Do notice the next user that gets entered is going to be id 6 because the sequence does not reset.

167

00:13:32,490  -->  00:13:32,960
OK.

168

00:13:33,000  -->  00:13:38,650
And then what we're going to do is instead of defining a variable like so we're going to do my usual

169

00:13:38,640  -->  00:13:45,160
equals user don't load from DB by email and then we're going to give it the email that we want to load

170

00:13:48,180  -->  00:13:51,340
and then we're going to print my user

171

00:13:55,290  -->  00:14:01,420
and then we're going to run it and then we're going to get a user with that e-mail.

172

00:14:02,040  -->  00:14:10,710
And now that is great because you are now able to understand how to connect to Pasqua sequel using psychopathy

173

00:14:10,750  -->  00:14:18,300
to how to insert data and how to retrieve data and that's really the most important thing you could

174

00:14:18,310  -->  00:14:18,710
do.

175

00:14:18,850  -->  00:14:25,050
Essentially anything you want in now really you can create an application that allows your users to

176

00:14:25,060  -->  00:14:29,410
enter data and then you can retrieve it to perform calculations with it such as calculating averages

177

00:14:29,760  -->  00:14:36,400
doing something like our student system would be superbly easy and using sequel you could even use views

178

00:14:36,390  -->  00:14:39,630
that you've programmed into your sequel as we've looked at before.

179

00:14:39,700  -->  00:14:46,420
There are really countless things you could do and all that stems from this flexibility that sequel

180

00:14:46,410  -->  00:14:49,160
gives you you don't have to know a lot of Python.

181

00:14:49,160  -->  00:14:53,820
The only thing you need to know is how to connect how to open a cursor and how to execute some stuff

182

00:14:54,490  -->  00:14:59,640
and the stuff that you're executing a sequel which gives you the freedom to run a lot of these things

183

00:14:59,640  -->  00:14:59,870
.

184

00:15:00,000  -->  00:15:04,590
In the sequel side of things as opposed to in your Python code and that really just relieves you from

185

00:15:04,600  -->  00:15:07,020
a lot of the work.

186

00:15:07,020  -->  00:15:13,320
So with that said you now have learned a lot of stuff about retrieving data using the cursors to fetch

187

00:15:13,330  -->  00:15:19,530
one robot we're going to look at fetching more rows and we've reviewed the named parameters we've reviewed

188

00:15:19,530  -->  00:15:19,670
.

189

00:15:19,770  -->  00:15:25,590
We've looked at tuples we've looked at Cillessen class methods and really we are just learning loads

190

00:15:25,810  -->  00:15:30,150
of Python right now and all of these things you can apply in other areas too.

191

00:15:30,150  -->  00:15:31,230
Let's continue though.

192

00:15:31,360  -->  00:15:35,490
There are a few problems with this app and we are going to be looking at those over the next few videos

193

00:15:35,500  -->  00:15:36,050
.

194

00:15:36,070  -->  00:15:37,850
I'll see you there.
