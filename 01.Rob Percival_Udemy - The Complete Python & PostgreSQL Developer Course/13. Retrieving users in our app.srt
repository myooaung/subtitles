1

00:00:00,200  -->  00:00:05,880
Hi and welcome back in this video we're going to be retrieving users from the database and seeing if

2

00:00:05,880  -->  00:00:11,490
they already have an email and if they do we're not going to ask them to authenticate and if they don't

3

00:00:11,670  -->  00:00:16,270
we are going to ask them to re authenticate.

4

00:00:16,290  -->  00:00:21,870
It's actually going to be fairly simple and I'm really hoping that you attempted this on your own because

5

00:00:22,560  -->  00:00:28,320
trying this and trying to do it yourselves and then seeing a solution is going to be a lot better for

6

00:00:28,320  -->  00:00:31,900
your learning than just reading the solution from here.

7

00:00:32,430  -->  00:00:37,030
OK the first thing to do is create a user object from an e-mail.

8

00:00:37,050  -->  00:00:44,760
So let's go into a user Doppie wine and notice that we are going to be retrieving data from the database

9

00:00:45,360  -->  00:00:49,790
and we can load up the user object based on an e-mail.

10

00:00:50,450  -->  00:00:50,940
OK.

11

00:00:51,120  -->  00:00:59,640
So the first thing to do is to say user on the school e-mail is input What is it.

12

00:00:59,730  -->  00:01:08,940
Or rather enter your email address and then we'll say user is user don't load from database by email

13

00:01:09,490  -->  00:01:11,160
use or email.

14

00:01:11,640  -->  00:01:16,410
Now something that you should be thinking about is what happens if the usual email doesn't exist in

15

00:01:16,410  -->  00:01:17,930
a database.

16

00:01:17,940  -->  00:01:20,940
What happens if they misspell their email address.

17

00:01:20,940  -->  00:01:23,320
What happens if they use or does exist.

18

00:01:24,020  -->  00:01:24,920
OK.

19

00:01:25,730  -->  00:01:31,850
A few things could happen and we're going to be looking at exactly what does happen in a moment.

20

00:01:31,860  -->  00:01:33,140
OK.

21

00:01:34,440  -->  00:01:36,600
So let's try that.

22

00:01:36,600  -->  00:01:39,780
Let's press play and it Alaskas Our e-mail address.

23

00:01:39,780  -->  00:01:43,940
I'm going to put my own.

24

00:01:45,030  -->  00:01:52,710
And that seems to not have failed so I'm going to refresh and I'm going to deliberately misspell and

25

00:01:52,830  -->  00:01:53,600
forget it.

26

00:01:53,670  -->  00:01:58,730
At the end there we have something.

27

00:01:59,250  -->  00:02:01,260
We have none type object.

28

00:02:01,260  -->  00:02:03,290
It's not scriptable.

29

00:02:03,630  -->  00:02:12,410
Now some script is this square brackets one there were accessing a subscript of user data and the service

30

00:02:12,420  -->  00:02:15,590
Rubert accessing is one and they were accessing two and so on.

31

00:02:15,810  -->  00:02:18,750
Well it's telling us is that an object which is none.

32

00:02:18,780  -->  00:02:23,160
So a noun cannot be subscripted.

33

00:02:23,310  -->  00:02:30,530
So you cannot do square bracket one square back at two and so on on something that is none which tells

34

00:02:30,550  -->  00:02:37,460
us that user underscore data must be non In order for this era to have arised arisen.

35

00:02:37,620  -->  00:02:39,130
One of those two.

36

00:02:40,140  -->  00:02:48,730
So we have selected from user where email is something and then we've said that user data is cursor

37

00:02:48,780  -->  00:02:49,800
not fetch one.

38

00:02:49,860  -->  00:02:54,340
We've selected the first row returned from this statement.

39

00:02:54,390  -->  00:02:59,300
However there were no rows returned and so we get none.

40

00:02:59,310  -->  00:03:04,830
So what to do is if user data is not none

41

00:03:07,530  -->  00:03:09,410
do this.

42

00:03:09,510  -->  00:03:15,450
So if the user data returned is not none it means that there was some user data returned which means

43

00:03:15,450  -->  00:03:20,160
the select statement found an account because it found no account.

44

00:03:20,310  -->  00:03:21,030
Sorry about that.

45

00:03:21,030  -->  00:03:29,460
We can then use that data here and create our user object if user data is none then we do not want to

46

00:03:29,460  -->  00:03:31,760
run this because we will get the error.

47

00:03:32,280  -->  00:03:38,360
What we want to do if you Salita is none is written.

48

00:03:38,900  -->  00:03:39,510
OK.

49

00:03:39,780  -->  00:03:41,850
Now we're going to simplify this code a bit.

50

00:03:41,860  -->  00:03:49,530
I'm gonna explain a couple more things about Python as we go return None is the default return for all

51

00:03:49,530  -->  00:03:50,670
methods.

52

00:03:50,670  -->  00:03:55,030
If your method does not return something then it is returning none.

53

00:03:55,210  -->  00:04:02,230
That is always the case here we return a user object and therefore we don't return None.

54

00:04:02,280  -->  00:04:04,440
But if we were not returning a user object.

55

00:04:04,470  -->  00:04:07,660
So if we delete this we are not returning anything.

56

00:04:07,680  -->  00:04:11,720
As you can see in this method but actually the method is returning none.

57

00:04:11,760  -->  00:04:13,930
That is just the default behaviour in Python.

58

00:04:13,940  -->  00:04:18,270
OK so I'm going to undo that which means that this return None is redundant.

59

00:04:18,270  -->  00:04:19,530
It is not necessary.

60

00:04:19,530  -->  00:04:25,050
It happens by default return None is a default behavior so we don't need that.

61

00:04:25,380  -->  00:04:28,880
And because we don't want to do anything else other than return None.

62

00:04:29,100  -->  00:04:30,260
We also don't need this else.

63

00:04:30,270  -->  00:04:36,950
It's also an unnecessary permission to delete those two things.

64

00:04:36,970  -->  00:04:45,920
A None object also is equivalent to false in a boolean comparison.

65

00:04:46,020  -->  00:04:57,390
So what that means is if user data is none then that means user data is false in a boolean comparison

66

00:04:57,440  -->  00:04:58,130
only.

67

00:04:58,770  -->  00:05:01,340
What is in the if statement is a Boolean comparison.

68

00:05:01,530  -->  00:05:06,490
So what we want from this if statement is a true or false value.

69

00:05:08,280  -->  00:05:15,030
This thing here this thing that I've selected will evaluate to true or false if it evaluates to true

70

00:05:15,040  -->  00:05:15,450
.

71

00:05:15,720  -->  00:05:18,880
We will go into the if statement and execute this code.

72

00:05:18,930  -->  00:05:24,820
We know this already and if it evaluates to false then we will not go into the if statement.

73

00:05:24,930  -->  00:05:25,660
We know that.

74

00:05:25,950  -->  00:05:28,830
So we know that user data may be none.

75

00:05:28,910  -->  00:05:34,780
And where we're seeing is if user data is not known then returns the less useful data is not.

76

00:05:34,780  -->  00:05:39,160
None evaluates to true if user data is not known.

77

00:05:39,720  -->  00:05:45,960
However what I just said earlier it may have been a bit confusing is that none evaluates to false in

78

00:05:45,960  -->  00:05:47,920
a boolean comparison.

79

00:05:48,510  -->  00:05:56,220
So what I mean with that is we can just delete that if user data by default means if you tell the to

80

00:05:56,220  -->  00:05:59,700
is not in on because user data because.

81

00:05:59,910  -->  00:06:02,030
Because none evaluates to false.

82

00:06:02,100  -->  00:06:09,300
So if user data is not in that is false and then it would not go in there if user data is not known

83

00:06:10,020  -->  00:06:18,820
then it would go in make sure do rewash that if you need to clarify what I meant.

84

00:06:19,440  -->  00:06:24,290
But what I meant is none is equivalent to false in Boolean comparisons.

85

00:06:24,720  -->  00:06:27,880
So what we're doing here is checking that user data is not enough.

86

00:06:28,290  -->  00:06:29,380
OK.

87

00:06:29,850  -->  00:06:33,960
Now we have that which means me means something.

88

00:06:33,960  -->  00:06:40,770
It means that user download from the B by email is going to return a user object if the user object

89

00:06:40,780  -->  00:06:40,840
.

90

00:06:40,860  -->  00:06:46,330
If the user data exists if it doesn't then it's going to return None.

91

00:06:46,990  -->  00:06:48,050
OK.

92

00:06:49,140  -->  00:06:56,780
So that means we can say if user is not nothing then we can do something.

93

00:06:56,940  -->  00:06:59,450
But as we know none evaluates to false.

94

00:06:59,460  -->  00:07:00,930
So we don't need that again.

95

00:07:01,350  -->  00:07:09,360
So if user if the usually exists then we just want to use the user and we're going to do that in a moment

96

00:07:09,750  -->  00:07:12,830
or else the user does not exist.

97

00:07:12,870  -->  00:07:16,940
We want to ask them to do all this stuff.

98

00:07:17,210  -->  00:07:18,310
OK.

99

00:07:19,320  -->  00:07:26,010
So if the user exists we don't need them to re authenticate reauthorizes if the user does not exist

100

00:07:26,340  -->  00:07:30,290
we want them to reauthorize our app or authorize them.

101

00:07:30,540  -->  00:07:34,940
Orthorexia OK.

102

00:07:37,650  -->  00:07:45,360
Now at the end of this authorization process we create a new user and we save it to the database.

103

00:07:45,690  -->  00:07:50,490
This is fine because we know that user is not in a database already.

104

00:07:51,120  -->  00:07:52,270
We've checked earlier.

105

00:07:52,440  -->  00:07:54,530
We loaded it from the database.

106

00:07:54,540  -->  00:07:56,280
It was nothing without e-mail.

107

00:07:56,430  -->  00:07:58,480
So then we save it again.

108

00:07:58,650  -->  00:08:00,380
Right.

109

00:08:00,390  -->  00:08:07,930
Instead of e-mail now we can just use user e-mail that we got from above at the beginning.

110

00:08:08,150  -->  00:08:08,430
OK.

111

00:08:08,490  -->  00:08:13,820
So we no longer need to ask them for their e-mail twice now the rest of the stuff.

112

00:08:13,920  -->  00:08:23,430
The stuff here we want to do even if I am the user because both of the user exists or if it doesn't

113

00:08:23,430  -->  00:08:24,660
exist.

114

00:08:24,720  -->  00:08:25,800
This is stuff that

115

00:08:28,950  -->  00:08:30,710
this is the end stuff.

116

00:08:30,720  -->  00:08:36,960
Once the user has registered or if the user already exists we want to get the author I stole can create

117

00:08:36,960  -->  00:08:39,710
a client and make the request.

118

00:08:40,500  -->  00:08:41,730
OK.

119

00:08:41,730  -->  00:08:43,750
Now why are these things yellow.

120

00:08:44,250  -->  00:08:52,280
It says Name access underscore token can be not defined here as consumer can be not defined.

121

00:08:52,440  -->  00:08:56,460
The response one is is that there's a bit of a different era I'm not really sure why it's appearing

122

00:08:56,460  -->  00:08:57,820
there.

123

00:08:58,380  -->  00:09:03,690
But let's forget about the response yellowness for now and what is seen as access token may not be defined

124

00:09:03,720  -->  00:09:05,150
and consumer may not be defined.

125

00:09:05,460  -->  00:09:06,330
That's correct.

126

00:09:06,600  -->  00:09:12,730
Consumer is our Twitter app using the consumer and the consumer secret.

127

00:09:12,990  -->  00:09:18,270
It is not dependent on whether a user exists or not.

128

00:09:18,360  -->  00:09:20,310
So we should just remove it from there

129

00:09:23,340  -->  00:09:28,650
and move it to appear because it is not dependent on the user existing or not.

130

00:09:28,650  -->  00:09:31,930
It doesn't make sense to have it inside the else right.

131

00:09:33,000  -->  00:09:33,930
OK.

132

00:09:35,040  -->  00:09:46,350
Instead of access token we should use the user's access to and the user is going to be either this user

133

00:09:46,350  -->  00:09:52,510
that we've created here which is authorized has an access token or it is going to be this user up here

134

00:09:52,550  -->  00:09:53,260
.

135

00:09:53,610  -->  00:09:56,280
Now we've loaded from the database.

136

00:09:56,520  -->  00:10:02,000
So what we should do here is say user don't auth token.

137

00:10:03,930  -->  00:10:09,100
And here we should see user Daut or token secret.

138

00:10:09,420  -->  00:10:17,190
Instead of using the access token that we retrieved from Twitter we can use the access to the retrieve

139

00:10:17,190  -->  00:10:24,270
on Twitter but that we saved in the user and because we create a user here with that token and that

140

00:10:24,270  -->  00:10:31,290
secret or we retrieve a user up here and they have a token and a secret we can just use that.

141

00:10:31,530  -->  00:10:36,390
And that is independent of whether the user existed previously or not.

142

00:10:36,390  -->  00:10:41,610
This line here is only going to happen once we have a user for certain.

143

00:10:41,610  -->  00:10:45,360
We created one there or we loaded it from above.

144

00:10:46,830  -->  00:10:47,320
OK.

145

00:10:47,400  -->  00:10:50,730
So now let's press play again and I'm going to enter my correct email address

146

00:10:53,490  -->  00:10:57,400
and now my Tweets come out because it's using the off token.

147

00:10:57,410  -->  00:11:02,210
And the author can see secret from the database.

148

00:11:02,230  -->  00:11:02,790
However

149

00:11:05,910  -->  00:11:10,290
if I make a mistake then it asks me to authorize again and I can do that

150

00:11:16,110  -->  00:11:22,500
and then it gives me back where they asked me to put my details in here.

151

00:11:22,500  -->  00:11:24,320
Notice how it doesn't ask me for my e-mail.

152

00:11:24,660  -->  00:11:26,310
And then it retrieves the tweets.

153

00:11:26,340  -->  00:11:33,360
And now if I put that same e-mail again Ill just retrieve the tweets again because it's saved that to

154

00:11:33,360  -->  00:11:37,260
the database.

155

00:11:37,260  -->  00:11:40,180
So what we've achieved is actually quite a lot.

156

00:11:40,350  -->  00:11:46,630
We have now got a registration system that is smarter a lot smarter than it was before.

157

00:11:47,370  -->  00:11:54,630
And we are able to save the users of the TVs including the access token which is required to represent

158

00:11:54,720  -->  00:11:55,850
the user in Twitter.

159

00:11:56,490  -->  00:11:59,460
And we've also got a bit of an error handling there.

160

00:11:59,460  -->  00:12:03,990
You may notice that we've got a bit of a redundant if statement that it doesn't do anything.

161

00:12:04,050  -->  00:12:08,540
So we could just remove it and instead of just say if not use.

162

00:12:09,200  -->  00:12:15,480
And that way if the user is not existing It could be the user is not.

163

00:12:15,930  -->  00:12:18,050
Then we will run this.

164

00:12:19,150  -->  00:12:20,910
OK.

165

00:12:22,080  -->  00:12:24,500
I'm quite chuffed about all this stuff to be honest.

166

00:12:24,540  -->  00:12:31,350
I know that when I started programming a while ago I'm doing this all off was was a bit of a pain actually

167

00:12:31,360  -->  00:12:31,610
.

168

00:12:31,640  -->  00:12:38,560
And the first few times that we tried to do this in some teams it wasn't very clear.

169

00:12:38,580  -->  00:12:47,030
So hopefully I've managed to clear this off protests a bit for you and now you are able to log in your

170

00:12:47,030  -->  00:12:49,200
users with Twitter.

171

00:12:49,200  -->  00:12:52,530
Exactly the same Twitter is Facebook Google Plus.

172

00:12:52,530  -->  00:12:59,760
And there's a bunch of other services that all use oils and they use it because it is kind of the standard

173

00:12:59,820  -->  00:13:00,360
now.

174

00:13:00,570  -->  00:13:05,990
So there should be no complication between using Twitter versus Facebook or others.

175

00:13:06,240  -->  00:13:12,220
You will have to however find out the endpoints the API endpoints that you need to request.

176

00:13:12,480  -->  00:13:18,420
Whereas for Twitter we were using API that would add a comb or else request token for Facebook it may

177

00:13:18,420  -->  00:13:25,230
be applied on Facebook dot com slash mouth slash get request token it could be slightly different.

178

00:13:25,230  -->  00:13:27,380
It could be wildly different.

179

00:13:27,390  -->  00:13:33,030
But the core flow and the process is the same.

180

00:13:33,030  -->  00:13:34,930
So with that said I hope you enjoy this video.

181

00:13:35,100  -->  00:13:37,640
I'll see you on the next one.
