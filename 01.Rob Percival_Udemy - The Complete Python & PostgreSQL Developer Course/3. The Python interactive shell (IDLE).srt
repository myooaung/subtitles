1

00:00:00,210  -->  00:00:06,600
Hi and welcome back in this video we're looking at the interactive python shell the python shell is

2

00:00:06,600  -->  00:00:10,710
a program that is fantastic for rapid development.

3

00:00:10,710  -->  00:00:17,430
This is because every command that you type in the python shell if it is valid Python the python shell

4

00:00:17,430  -->  00:00:22,290
will run it evaluate evaluated instantly and give you instant feedback.

5

00:00:22,320  -->  00:00:28,200
It's great when you're developing large applications to have a python shell beside you so that you can

6

00:00:28,230  -->  00:00:32,960
quickly test what you are doing and you don't make any silly mistakes.

7

00:00:33,000  -->  00:00:35,580
So what does a python shell do.

8

00:00:35,610  -->  00:00:42,100
Well as you said it's an interactive python environment Python interpreter.

9

00:00:42,180  -->  00:00:43,200
So it runs.

10

00:00:43,230  -->  00:00:46,530
Any Python code that you put in it.

11

00:00:46,620  -->  00:00:54,120
So let's type some Python statements in here and see how the python shell copes with that.

12

00:00:54,120  -->  00:01:00,840
Python is a language that is more so than others geared towards some mathematical uses.

13

00:01:00,840  -->  00:01:07,650
That doesn't mean that Python is a scientific language by any means but it does have some mathematical

14

00:01:08,550  -->  00:01:09,500
operators.

15

00:01:09,570  -->  00:01:13,690
And it can be used for some mathematical purposes.

16

00:01:13,740  -->  00:01:19,890
So something that we can do in Python and in most of the languages is type some basic math.

17

00:01:19,890  -->  00:01:29,160
For example two plus two we evaluate Python will see this as something that is valid Python because

18

00:01:29,160  -->  00:01:35,130
Python can add two numbers and then it will tell us okay that's fine and we'll evaluate this statement

19

00:01:35,220  -->  00:01:36,630
when we press enter.

20

00:01:36,690  -->  00:01:42,190
I'm going to do that now and then we get out the value for which is where we would expect.

21

00:01:43,100  -->  00:01:43,820
OK.

22

00:01:44,010  -->  00:01:47,410
So similarly we can do the same thing with multiplication.

23

00:01:47,430  -->  00:01:53,530
Notice that in programming and indeed mostly in computers the multiplication sign is the asterisk.

24

00:01:53,760  -->  00:01:57,950
And if we do this we will also get the number four.

25

00:01:58,740  -->  00:02:02,210
And just so you can check that I'm not lying if we do two times three.

26

00:02:02,340  -->  00:02:05,600
We get the number six which is completely OK.

27

00:02:06,120  -->  00:02:07,840
So here's a small question for you.

28

00:02:07,920  -->  00:02:10,470
See if you can guess the answer to this one.

29

00:02:10,560  -->  00:02:16,540
What happens in Python if we do two times times three.

30

00:02:16,560  -->  00:02:21,150
So we have two times signed in there what do you think is going to happen.

31

00:02:21,330  -->  00:02:25,920
Is he going to give his backing number or is he going to give us an error.

32

00:02:27,090  -->  00:02:31,660
Well in most programming languages this would give you an error.

33

00:02:31,980  -->  00:02:36,680
It would say What are you doing two times times is is nonsense.

34

00:02:36,690  -->  00:02:40,440
However as I said Python does have some mathematical uses.

35

00:02:40,440  -->  00:02:46,580
So when we do this it gives his back to evaluate which is 2 to the power of three.

36

00:02:46,590  -->  00:02:54,500
So two times two times two gives us eight and that's what the double time signs means.

37

00:02:54,600  -->  00:02:54,980
OK.

38

00:02:55,020  -->  00:03:02,400
So this is the plate and shell we haven't looked at much Python code yet but we know that the python

39

00:03:02,400  -->  00:03:08,040
shell can run Python statements and it evaluates them instantly and gives us instant feedback which

40

00:03:08,040  -->  00:03:12,060
is fantastic when we want to test things or verify that things are valid.

41

00:03:12,060  -->  00:03:16,590
So for this section we're going to be developing in the pipe and show and in the coming section we're

42

00:03:16,590  -->  00:03:22,890
going to be moving on to something more suited for larger application development.

43

00:03:22,900  -->  00:03:28,080
But for this section we're going to get just acquainted with Python just going to start with Python

44

00:03:28,580  -->  00:03:31,640
and we're going to stick to ywis which is a fantastic tool.

45

00:03:32,160  -->  00:03:32,540
OK.

46

00:03:32,690  -->  00:03:33,710
So and so you in the next video
