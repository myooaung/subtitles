1

00:00:00,360  -->  00:00:06,150
Heineken back in this video we're going to be looking at creating a user profile.

2

00:00:07,110  -->  00:00:09,970
Let's once again go over what's happening.

3

00:00:10,050  -->  00:00:13,370
The first thing that happens is that users are going to log in slash Twitter.

4

00:00:13,500  -->  00:00:19,140
We get a request token store in a session and then send them over to Twitter dot com to authorize our

5

00:00:19,140  -->  00:00:19,970
app.

6

00:00:20,580  -->  00:00:26,910
Once they've pressed the button Twitter sends them back to us with an author verifier as part of the

7

00:00:26,910  -->  00:00:28,850
query string parameters.

8

00:00:28,850  -->  00:00:34,140
We then retrieve that or the verifier and we get an access token using the stored request token in the

9

00:00:34,140  -->  00:00:42,460
session and the verifier will then see if we have an existing user in that database that uses that verifier

10

00:00:42,500  -->  00:00:42,690
.

11

00:00:42,900  -->  00:00:46,090
And if we do then sorry that use of that screen name.

12

00:00:46,110  -->  00:00:49,830
And if we do then we are just going to use that user.

13

00:00:50,100  -->  00:00:54,180
And if we don't we create that user and leave it to the database.

14

00:00:54,180  -->  00:01:01,290
Finally we return the screen name of the user which is nice we can see that it works but ideally we

15

00:01:01,290  -->  00:01:05,220
would want to send them to their user profile.

16

00:01:05,220  -->  00:01:08,300
So we're going to do in this video is send them to the user.

17

00:01:09,210  -->  00:01:16,180
The first thing to do is create the Profunds or app don't root profile for example.

18

00:01:16,350  -->  00:01:20,160
And then this is going to be a profile method.

19

00:01:20,760  -->  00:01:26,620
And now we can here write code that is going to evaluate when the user arrives at the profile endpoint

20

00:01:27,390  -->  00:01:30,480
and then we can return for example a template.

21

00:01:30,480  -->  00:01:31,740
So that's what we're going to be doing.

22

00:01:31,770  -->  00:01:33,900
Return the render template.

23

00:01:33,930  -->  00:01:37,330
Now we need the profile dot HVM l template.

24

00:01:37,440  -->  00:01:44,600
So let's break that template right click your templates folder and create a new DML file called profile

25

00:01:44,600  -->  00:01:45,460
.

26

00:01:45,570  -->  00:01:51,070
If you don't have the ad there's a bit of an error.

27

00:01:51,300  -->  00:01:53,850
If you don't have the e-mail file thing there.

28

00:01:53,850  -->  00:01:56,620
Just create a new file and call it profiler each.

29

00:01:57,480  -->  00:02:01,510
As we can see this looks very similar to our home file home nights demo.

30

00:02:01,890  -->  00:02:06,570
Our home doesn't have the language specified and that's something you should do but it's not really

31

00:02:06,570  -->  00:02:07,610
required.

32

00:02:07,770  -->  00:02:12,570
Here we can specify the language of the page in this case it says English and the characters set which

33

00:02:12,570  -->  00:02:13,760
is UTF 8.

34

00:02:13,790  -->  00:02:20,640
You see if it is just a a character set it basically allows you to display Chinese Russian characters

35

00:02:20,640  -->  00:02:24,690
as well as English and Western languages.

36

00:02:24,690  -->  00:02:27,220
So it's nice to specify that as well.

37

00:02:27,570  -->  00:02:37,050
It's not required in the title we're going to say a user profile and here in the body we can say whatever

38

00:02:37,050  -->  00:02:37,500
we want.

39

00:02:37,520  -->  00:02:44,190
But what I'm going to say is open double bracket double curly brace and inside we're going to put screen

40

00:02:44,190  -->  00:02:45,880
on the school name.

41

00:02:46,170  -->  00:02:50,600
So open double curly brace screenname PLO's the blue curly brace.

42

00:02:50,670  -->  00:02:56,160
This is a special type of command that is only available in flask.

43

00:02:56,160  -->  00:02:57,370
It is not available.

44

00:02:57,390  -->  00:03:06,720
If you write which DML Normally this is part of a flask and language essentially flossed uses a template

45

00:03:06,810  -->  00:03:14,040
language so we can use some special code called Ginger to when we are rendering templates using flask

46

00:03:14,040  -->  00:03:14,090
.

47

00:03:14,100  -->  00:03:16,540
But normally unhedged you cannot do that.

48

00:03:16,950  -->  00:03:19,790
So it's only in flask.

49

00:03:19,980  -->  00:03:21,950
So we're using here a.

50

00:03:22,380  -->  00:03:26,090
This is the way to print out a variable in Jinja too.

51

00:03:26,370  -->  00:03:30,210
So what we're doing is we're printing out the variable the screen on the school name.

52

00:03:30,210  -->  00:03:33,410
However we don't have that variable unless we pass it in.

53

00:03:33,660  -->  00:03:39,720
So here in the run the template after profiled are actually M-L we can pass in variables for that template

54

00:03:39,730  -->  00:03:40,360
.

55

00:03:40,860  -->  00:03:46,440
So I'm going to pass in screen name and that's going to be equal to the session screen name that we've

56

00:03:46,440  -->  00:03:48,900
got saved.

57

00:03:50,260  -->  00:03:52,120
OK.

58

00:03:53,730  -->  00:03:56,830
So what do you think is going to happen once we do this.

59

00:03:56,850  -->  00:04:01,310
What sort of difference are we going to see.

60

00:04:04,140  -->  00:04:10,130
Well let's run through it and I'm going to stop and kill that and restart the app.

61

00:04:10,230  -->  00:04:14,820
We're running with a debugger but that's fine it's fine to run with a debugger we don't have any breakpoint

62

00:04:14,820  -->  00:04:15,980
set.

63

00:04:16,020  -->  00:04:20,270
So let's go over here and log in with Twitter.

64

00:04:20,650  -->  00:04:26,400
And you're going to be doing this over and over again authorize the app and no difference.

65

00:04:26,400  -->  00:04:33,420
We don't see any difference at all what is happening.

66

00:04:33,540  -->  00:04:36,710
Have we done the right thing.

67

00:04:37,200  -->  00:04:38,920
Have we served the correct page.

68

00:04:39,090  -->  00:04:43,640
Well we're going to have right click on that and press inspect element.

69

00:04:43,680  -->  00:04:49,510
If you don't have that you can enable that in the Safari preferences or in the preferences of your app

70

00:04:49,780  -->  00:04:57,120
and navigate our choice and hear what we've got is essentially nothing just the body same school of

71

00:04:57,130  -->  00:04:58,790
code dump me.

72

00:04:58,890  -->  00:05:04,670
So did we render that correct thing.

73

00:05:04,800  -->  00:05:10,080
And the answer is no we don't have for example a title.

74

00:05:10,560  -->  00:05:12,970
We don't have that title up here.

75

00:05:14,130  -->  00:05:15,490
So what happened.

76

00:05:15,810  -->  00:05:22,320
Well we need to think like a computer in these instances and remember to think like a computer run through

77

00:05:22,320  -->  00:05:26,490
your code and see where it went wrong.

78

00:05:26,940  -->  00:05:28,750
We created the endpoint.

79

00:05:29,100  -->  00:05:32,690
We defined the method then we rendered it right.

80

00:05:32,790  -->  00:05:37,230
So that we had to do that we would do that in the home page we were doing essentially the same thing

81

00:05:37,230  -->  00:05:41,130
.

82

00:05:41,250  -->  00:05:44,220
So let's run through it once we come back to our Twitter.

83

00:05:44,610  -->  00:05:46,410
We get the verifier we know that works.

84

00:05:46,410  -->  00:05:48,540
We get the token we know that works.

85

00:05:48,540  -->  00:05:50,530
We get the user We know that works.

86

00:05:50,640  -->  00:05:53,530
If it's not if it doesn't exist when we create it that's fine.

87

00:05:53,580  -->  00:05:58,530
We said in a session then we return the screen name.

88

00:05:59,220  -->  00:06:01,260
Now is that what you what we should be doing.

89

00:06:01,260  -->  00:06:03,340
Should we be returning the screen name.

90

00:06:03,450  -->  00:06:06,440
How do we end up in the profile.

91

00:06:07,230  -->  00:06:13,170
When are we telling the user to go to the profile because the user still stuck here in Author Twitter

92

00:06:13,180  -->  00:06:13,230
.

93

00:06:13,230  -->  00:06:21,360
All we've done is return the screen name so I'm sure that you realize that we have to send the user

94

00:06:21,360  -->  00:06:22,900
over to the profile page.

95

00:06:22,980  -->  00:06:26,010
And the way we do that is with a redirect.

96

00:06:26,170  -->  00:06:30,300
So we're going to redirect the user to the Profar.

97

00:06:30,420  -->  00:06:38,190
Now we could do that easily by doing the colon slash slash 171 open only one call on 8:56 five slash

98

00:06:38,220  -->  00:06:42,330
profer that would be an option.

99

00:06:43,200  -->  00:06:53,430
However instead of that as a much better way of doing it we can just redirect them to the endpoint that

100

00:06:53,430  -->  00:06:56,730
is associated to this method.

101

00:06:56,790  -->  00:07:02,940
So this method here has the slash profile and point associated with it and we can just redirect the

102

00:07:02,940  -->  00:07:09,870
user to the endpoint associated with this profile method and the way we do that is using another Flast

103

00:07:09,870  -->  00:07:13,220
method called URL for.

104

00:07:14,100  -->  00:07:20,370
So we're going to say Europhile profile which is the method name not the end point name the method name

105

00:07:20,370  -->  00:07:20,800
.

106

00:07:21,160  -->  00:07:26,500
And we have to import that let's go to the very top and import you are L4 from the flask set of imports

107

00:07:26,510  -->  00:07:26,950
.

108

00:07:27,570  -->  00:07:32,260
And now we can restart our application go back here.

109

00:07:32,310  -->  00:07:39,190
1 2 7 1 0 1 1 Twitter logon which with our sorry log in Twitter.

110

00:07:39,660  -->  00:07:41,200
I'm going to leave this open just for now.

111

00:07:41,550  -->  00:07:42,210
Authorize the app

112

00:07:46,100  -->  00:07:49,790
that we have exactly the same thing.

113

00:07:50,070  -->  00:07:56,670
But if we now look in the head we have a title and if we look in the tab we have a title.

114

00:07:56,760  -->  00:08:02,890
So we've succeeded in redirecting the user over to the correct page which is the profile page.

115

00:08:02,910  -->  00:08:08,450
Now we could show any other number of things we could for example make a Twitter request using that

116

00:08:08,680  -->  00:08:13,560
username and display some tweets relevant to the user for example.

117

00:08:13,560  -->  00:08:16,620
And we're going to be doing that but not in this video.

118

00:08:16,620  -->  00:08:20,910
All I wanted to show you in this video is remember to think like a computer.

119

00:08:21,270  -->  00:08:26,700
And to introduce you to the you are L4 method and to some extent to the Jinja to templating language

120

00:08:26,730  -->  00:08:33,300
we can pass variables to the rendered template method and then we can use those variables within the

121

00:08:33,570  -->  00:08:37,200
DML code using the double curly brace.

122

00:08:37,950  -->  00:08:39,360
OK it does everything for this video.

123

00:08:39,480  -->  00:08:41,580
Hopefully you learn something and you enjoy that.

124

00:08:41,770  -->  00:08:44,560
Thanks for listening and I'll be seeing you in the very next one.
