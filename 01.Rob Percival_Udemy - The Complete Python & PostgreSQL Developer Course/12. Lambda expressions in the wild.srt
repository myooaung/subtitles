1

00:00:01,290  -->  00:00:06,800
Hi welcome back in this video we're looking just a bit more at lambdas and I've called it all Ramdas

2

00:00:06,810  -->  00:00:12,060
in the wild and I'm not intending to be funny with that.

3

00:00:12,090  -->  00:00:17,650
This is something that I have written for my work.

4

00:00:17,700  -->  00:00:23,090
So this is something that you will potentially see in the wild when you're working in the industry.

5

00:00:23,280  -->  00:00:26,370
It's not an example that is simplified for you.

6

00:00:26,430  -->  00:00:28,080
This is something that is actually done.

7

00:00:28,240  -->  00:00:30,440
So that's it.

8

00:00:30,540  -->  00:00:33,750
Yeah I just wanted to for you to look at a real example.

9

00:00:33,750  -->  00:00:42,000
So what I've done is I've got my class currency am that we created in an earlier video and I filled

10

00:00:42,000  -->  00:00:48,200
in the built in methods for greater than less than less than or equal to greater than or equal to.

11

00:00:48,480  -->  00:00:54,060
So hopefully you also were able to do this in the couple of years ago.

12

00:00:54,420  -->  00:01:05,310
And what we're going to be doing now is stay away from essentially just looking at using the currency

13

00:01:05,310  -->  00:01:14,430
class and we are going to be using lambda functions together with a currency class now

14

00:01:17,580  -->  00:01:24,930
in order to look at some more advanced lambda functions we need to use a bit of imagination.

15

00:01:25,800  -->  00:01:35,310
Let's imagine that the currency data such as the code and the exchange rates are we are retrieving them

16

00:01:35,580  -->  00:01:42,120
via an API application programming interface that we've looked at previously such as a rest API for

17

00:01:42,120  -->  00:01:45,000
example.

18

00:01:45,000  -->  00:01:51,600
So the first thing I'm going to do here is I'm going to create a method called Get currency resource

19

00:01:51,940  -->  00:01:58,350
and I'm going to it's going to have two parameters a resource on a transform the transform is going

20

00:01:58,350  -->  00:02:03,700
to be lambda Lumba x x.

21

00:02:03,720  -->  00:02:05,460
Please bear with me just for a moment.

22

00:02:05,460  -->  00:02:09,050
Why do this.

23

00:02:09,750  -->  00:02:14,650
Now imagine we are retrieving currency data from an API.

24

00:02:14,670  -->  00:02:23,410
So imagine we're doing requests Gatz blah blah blah blah the dot.

25

00:02:23,430  -->  00:02:30,210
Jason and we are retrieving currency data where it's moving things like currency codes and currency

26

00:02:30,210  -->  00:02:36,010
exchange rates so much so that we're ending with something that looks like this.

27

00:02:36,100  -->  00:02:46,320
Items like items is a list of items where we have a code which can be something like USV and an amount

28

00:02:46,440  -->  00:02:49,980
to USD which can be something like 1.0 for us these

29

00:02:55,590  -->  00:03:03,540
GBP EU our GP Y and GBP one point twenty one that is 0.07.

30

00:03:03,720  -->  00:03:05,600
This is 0.14.

31

00:03:05,610  -->  00:03:07,890
I don't really know the exchange rate so please bear with me.

32

00:03:08,340  -->  00:03:11,130
OK this is the part where we need imagination.

33

00:03:11,130  -->  00:03:13,910
Imagine we are retrieving this data.

34

00:03:13,920  -->  00:03:21,330
This Jason data from an API somewhere on the Internet and we have to use imagination because I don't

35

00:03:21,330  -->  00:03:26,070
want to confuse you further by actually going to an API and retrieving it and all that.

36

00:03:26,070  -->  00:03:32,100
So just imagine we are getting this from an API somewhere on the Internet and what it returns is a dictionary

37

00:03:32,260  -->  00:03:36,550
a Jason an object with the key items.

38

00:03:36,720  -->  00:03:43,730
And each of the items is in a list where the item itself is another dictionary with a code and an amount

39

00:03:43,740  -->  00:03:44,590
to USD.

40

00:03:44,670  -->  00:03:46,150
The code is USD.

41

00:03:46,200  -->  00:03:49,330
In this instance there's the value and the amount is at one point.

42

00:03:49,350  -->  00:03:53,360
Oh because USD 2 USD is worth exactly 1.

43

00:03:53,400  -->  00:03:58,350
Then we have another code which is TBP and the amount of us is one point twenty one and so on.

44

00:03:58,350  -->  00:04:03,960
So we've got here four different currencies that we've retrieved from a web API somewhere on the Internet

45

00:04:04,530  -->  00:04:06,970
but we are not concerned with how that happened.

46

00:04:07,140  -->  00:04:07,990
OK.

47

00:04:08,520  -->  00:04:11,430
And that's where we need imagination.

48

00:04:11,430  -->  00:04:24,740
Now what I'm going to be doing is I'm going to say that my resource is data resource.

49

00:04:25,800  -->  00:04:30,230
So I'm going to be accessing the data that we retrieved from the API.

50

00:04:30,470  -->  00:04:37,140
I'm going to be accessing specifically one of the elements of that dictionary which is going to be the

51

00:04:37,140  -->  00:04:38,500
resource parameter.

52

00:04:38,970  -->  00:04:41,880
So that could be for example items.

53

00:04:43,500  -->  00:04:50,850
And then what I'm going to do is I'm going to return another list x for x in my resource.

54

00:04:51,660  -->  00:04:57,510
If we do x for x in my resource we are retrieving all of the elements inside my resource as we know

55

00:04:57,510  -->  00:05:00,750
we're just creating a new list and putting those elements in there.

56

00:05:01,380  -->  00:05:05,250
And presumably if we call something like

57

00:05:11,430  -->  00:05:21,690
this with items there what this will do it'll say items so doesn't go into resource then down here my

58

00:05:21,690  -->  00:05:29,400
research will be data items which will be this list and then we will return x for x in my resource.

59

00:05:29,400  -->  00:05:37,650
So we will return each of these dictionaries do take a moment to pause now and make sure that your understanding

60

00:05:38,040  -->  00:05:40,330
where this is coming from what is going on.

61

00:05:40,410  -->  00:05:45,320
And if you don't please do pause the video ask a question in the course forums.

62

00:05:46,110  -->  00:05:47,400
So what about this transform.

63

00:05:47,400  -->  00:05:48,570
What does it do.

64

00:05:48,990  -->  00:05:51,240
Well here's the more interesting bit.

65

00:05:51,420  -->  00:06:02,420
Instead of doing if transform X what we're going to do is transform X..

66

00:06:02,460  -->  00:06:03,840
In the beginning.

67

00:06:03,840  -->  00:06:09,090
So we're not going to put each of the elements in my resource into my new list.

68

00:06:09,090  -->  00:06:13,620
We're going to put a transformed version of the element into the new list.

69

00:06:13,710  -->  00:06:18,590
So we're not necessarily going to put only the entire dictionary.

70

00:06:18,720  -->  00:06:22,500
We can change it by using the transform function

71

00:06:22,500  -->  00:06:28,920
.

72

00:06:28,920  -->  00:06:34,700
However the transform function has a default value which is lambda x is x.

73

00:06:34,800  -->  00:06:36,840
This lambda function essentially does nothing.

74

00:06:36,840  -->  00:06:39,560
It's the sort of unit lambda function.

75

00:06:39,570  -->  00:06:40,610
It doesn't change anything.

76

00:06:40,610  -->  00:06:45,880
It just returns X and gets a parameter x and it returns that.

77

00:06:45,950  -->  00:06:50,670
So transform X with this lambda function will leave it unchanged.

78

00:06:50,760  -->  00:07:01,610
OK let's press play so you can see where we're going am now abound.

79

00:07:04,240  -->  00:07:05,840
Am I run the wrong file.

80

00:07:05,840  -->  00:07:06,960
So there we go.

81

00:07:06,960  -->  00:07:08,730
Took me a while to figure that out.

82

00:07:08,910  -->  00:07:14,880
What we've got here is a list of dictionaries where each of the dictionaries is what we see in here

83

00:07:14,890  -->  00:07:15,030
.

84

00:07:15,150  -->  00:07:18,790
As you can see the first one is us the and I'm onto you with each one.

85

00:07:18,810  -->  00:07:22,380
This first dictionary here is also us the the amount to us to use one.

86

00:07:22,770  -->  00:07:23,500
And so on.

87

00:07:23,670  -->  00:07:31,350
So as you can see we've left the list of dictionaries unchanged because we're using this lambda function

88

00:07:31,350  -->  00:07:32,730
there.

89

00:07:33,760  -->  00:07:34,830
OK.

90

00:07:35,450  -->  00:07:40,240
Whether we can pass in a different lambda function that does something else.

91

00:07:40,530  -->  00:07:52,760
For example lambda x is x code dot Upper the dot upper method converts a string to uppercase.

92

00:07:52,760  -->  00:07:55,470
So it just makes it all caps.

93

00:07:56,580  -->  00:08:06,420
So now when we get the first X this thing here what we're going to return is not X which is the entire

94

00:08:06,420  -->  00:08:13,800
thing we're going to return X code which is USD to uppercase.

95

00:08:13,830  -->  00:08:19,940
Show us the in upper case then we're going to go on to the next X and we're going to get the code.

96

00:08:20,370  -->  00:08:21,870
And then we're going to convert that we're Paki's.

97

00:08:21,870  -->  00:08:24,920
And then you are to uppercase JPY 2.

98

00:08:25,740  -->  00:08:27,850
That's Pressplay ones.

99

00:08:28,410  -->  00:08:39,730
Now we see that instead of the data that we retrieve from the API we have a set of currency codes.

100

00:08:40,020  -->  00:08:41,060
Why is that interesting.

101

00:08:41,220  -->  00:08:57,380
Well because now we can do def get currency codes and this can be this thing.

102

00:08:59,220  -->  00:09:09,450
So instead of being dependent on getting the data and then returning it we can change it and get what

103

00:09:09,450  -->  00:09:13,350
we want from it's using lambda functions instead.

104

00:09:14,160  -->  00:09:20,940
As you can see they get currency codes method doesn't need to retrieve things from an API doesn't need

105

00:09:21,000  -->  00:09:22,440
to know about the data.

106

00:09:22,620  -->  00:09:27,990
It just needs to know that data is coming from there's not currently a resource but we can transform

107

00:09:27,990  -->  00:09:31,250
it using this lambda function.

108

00:09:31,920  -->  00:09:37,590
And now the get currency code method just returns a list of the available currency code in this API

109

00:09:37,610  -->  00:09:38,710
.

110

00:09:39,770  -->  00:09:40,310
OK.

111

00:09:40,410  -->  00:09:45,050
Something else that it can also be interesting.

112

00:09:48,010  -->  00:09:55,780
Let's get instead of the currency codes Let's get currency objects back.

113

00:09:55,780  -->  00:10:02,620
Remember the currency object is up here and it has a code and an amount to exchange the USD that amounts

114

00:10:02,620  -->  00:10:04,830
to USD is the same as this one here.

115

00:10:04,840  -->  00:10:12,010
So what we want with this get currencies method is to get a list of objects where each object uses the

116

00:10:12,010  -->  00:10:15,950
code and the amount of USD to be initialized.

117

00:10:16,210  -->  00:10:21,880
Remember a currency takes in something like USD and like 1.0.

118

00:10:22,150  -->  00:10:24,470
This is how you create a currency object.

119

00:10:24,520  -->  00:10:30,270
So what I want you to do is to return get currents.

120

00:10:30,550  -->  00:10:35,100
I've been making this mistake for the entire video come believe it and let's rename this to make sure

121

00:10:35,100  -->  00:10:38,060
it is not incorrect.

122

00:10:38,550  -->  00:10:49,270
Get currency resource madman where items is there and the lambda function is going to return a currency

123

00:10:49,390  -->  00:10:54,820
object as opposed to a specific element of that dictionary.

124

00:10:55,480  -->  00:10:57,460
Pause the video and give that a go.

125

00:10:57,460  -->  00:11:03,230
Create the currency object from that date.

126

00:11:07,150  -->  00:11:08,350
I'm sure you got it.

127

00:11:08,350  -->  00:11:16,650
The way to do that is to create the currency object with X code and X amount to USD.

128

00:11:16,660  -->  00:11:22,510
Now the code becomes the first parameter to the init method and the amount of USD becomes the second

129

00:11:22,510  -->  00:11:27,070
parameter to the init method which as you can see is up here and is what we need

130

00:11:27,070  -->  00:11:32,890
.

131

00:11:32,890  -->  00:11:36,250
So now get currencies returns a list of objects.

132

00:11:36,250  -->  00:11:43,380
Let's run this file as you can see we get currency objects now as opposed to dictionaries.

133

00:11:43,510  -->  00:11:44,760
And why is this useful.

134

00:11:45,010  -->  00:11:51,910
Well now that we have the currencies we can do things with those currencies that we couldn't do just

135

00:11:51,910  -->  00:11:52,840
with data.

136

00:11:53,110  -->  00:12:01,100
For example convert money to different currencies.

137

00:12:01,180  -->  00:12:03,610
Let's create yet another method this is going to be the final one.

138

00:12:03,610  -->  00:12:11,020
By the way that we don't know that it's going to let us calculate dollar amount in all currencies available

139

00:12:11,020  -->  00:12:11,410
to us

140

00:12:11,420  -->  00:12:19,470
.

141

00:12:19,510  -->  00:12:21,420
How do you think this should be done.

142

00:12:21,430  -->  00:12:30,010
I want to iterate over each of the currencies converting this USD amount to dollars using these two

143

00:12:30,010  -->  00:12:32,980
USD method.

144

00:12:34,510  -->  00:12:35,200
Give that I go.

145

00:12:35,200  -->  00:12:37,280
I recommend posting the video and giving it a go.

146

00:12:37,870  -->  00:12:43,390
But make sure to try hard and engage with it as that's the best way to learn.

147

00:12:43,390  -->  00:12:49,080
I keep saying that but it's just true.

148

00:12:49,090  -->  00:12:51,430
Hopefully you got that what I'm going to do is print

149

00:12:54,390  -->  00:12:57,400
no format.

150

00:12:57,400  -->  00:12:58,340
Use the amount.

151

00:12:58,450  -->  00:13:05,110
All that is going to do is just print a line saying for example $1000 dollars in all currencies and

152

00:13:05,110  -->  00:13:18,420
then for currency in get currencies which is as we know a list of objects we're going to print in a

153

00:13:18,430  -->  00:13:26,060
specific currency that amount format currency to code currency.

154

00:13:26,090  -->  00:13:30,590
Don't to us the U.S. the amount.

155

00:13:30,860  -->  00:13:41,220
So what this does is it prints out that in GBP It is eight 800 and something dollars pounds rather.

156

00:13:42,720  -->  00:13:46,900
OK let's run that and see what happens here.

157

00:13:46,900  -->  00:13:54,410
Well we have one thousand USD and all currencies is incorrect numbers by the way.

158

00:13:54,550  -->  00:14:00,820
I made a small mistake in USD 1000 which seems correct in GBP 12 and 10.

159

00:14:00,820  -->  00:14:06,610
This is not correct in euros ten thousand 1070 and Japanese yen one hundred forty.

160

00:14:06,730  -->  00:14:09,850
So what we've done here is we've converted.

161

00:14:09,880  -->  00:14:16,480
We've treated the USD amount as one thousand pounds 1000 euros 1000 yen.

162

00:14:17,140  -->  00:14:19,470
But if you can realize that.

163

00:14:19,660  -->  00:14:27,070
But 1000 pounds converted to dollars is twelve hundred and ten one thousand euros converted of dollars

164

00:14:27,150  -->  00:14:29,170
is one thousand seventy.

165

00:14:29,230  -->  00:14:37,420
So what we want to do is in the US the I suppose to share in USD in currency sorry as opposed to 2 USD

166

00:14:37,650  -->  00:14:38,620
.

167

00:14:38,710  -->  00:14:40,460
That wrong method used.

168

00:14:40,620  -->  00:14:41,900
Let's run that again.

169

00:14:41,980  -->  00:14:43,960
And now we get the correct numbers there.

170

00:14:44,060  -->  00:14:46,270
So in pounds we get a hundred twenty six.

171

00:14:46,280  -->  00:14:53,830
And so something to note is that there is a lot of numbers after the decimal place.

172

00:14:54,010  -->  00:14:56,010
But we can change that.

173

00:14:56,020  -->  00:15:03,760
This second set of curly braces is being replaced by the float the number of decimal places when that

174

00:15:03,760  -->  00:15:04,570
is the case.

175

00:15:04,600  -->  00:15:13,650
We can do this poll on dot to F and then when we print out it will always be to two decimal places that

176

00:15:13,660  -->  00:15:21,670
were the two means we continue to five if we want for example just a bit of a hint there.

177

00:15:21,790  -->  00:15:28,600
But the formats and method has a long list of the things you can do with it which has more information

178

00:15:28,610  -->  00:15:30,450
.

179

00:15:32,110  -->  00:15:33,950
OK and so this is everything for this video.

180

00:15:34,030  -->  00:15:39,640
I wanted to show you a real example of something that I have done at work not with currency objects

181

00:15:39,670  -->  00:15:48,640
but with something similar where you can use lambda functions and transforming values to simplify your

182

00:15:48,640  -->  00:15:51,730
code and get things out more easily.

183

00:15:51,730  -->  00:15:59,590
Here we have an API call with some imagination which returns some data but we can modify the data as

184

00:15:59,590  -->  00:16:03,430
we go by using lambda functions.

185

00:16:03,670  -->  00:16:09,190
Something to remember is that just as before we have the filter method which allowed us to filter out

186

00:16:09,190  -->  00:16:19,260
of some values in Python We also have the map method.

187

00:16:22,090  -->  00:16:25,830
So the map method does exactly the same thing as this does.

188

00:16:26,440  -->  00:16:33,180
It essentially transforms each of the values in my resource and then returns a list with that.

189

00:16:33,430  -->  00:16:40,300
So this thing here this list map transfer my resource is identical to this list comprehension once again

190

00:16:40,390  -->  00:16:44,770
in Python you normally use a list comprehension but if you're working with people from different backgrounds

191

00:16:45,160  -->  00:16:52,740
who prefer to use the more standard map and filter do use that as that is fine as well.

192

00:16:53,620  -->  00:16:57,880
Well that's everything for this video or hopefully you want to board and hopefully you didn't have to

193

00:16:57,880  -->  00:16:59,530
use too much imagination.

194

00:16:59,530  -->  00:17:05,140
Remember this was meant to be an API call something you get from the Internet and we've looked at a

195

00:17:05,140  -->  00:17:12,910
real example of using lambda functions and transforms to on the fly modify the data that we are retrieving

196

00:17:12,940  -->  00:17:14,270
from a method.

197

00:17:14,320  -->  00:17:19,700
So hopefully you learn something every enjoy that and obscene you in the very next video.
