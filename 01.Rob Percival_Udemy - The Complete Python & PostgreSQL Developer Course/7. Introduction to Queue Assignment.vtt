WEBVTT
1

00:00:01.020  -->  00:00:04.970
Hunt will come back in this video we're looking at the Q assignment.

2

00:00:05.390  -->  00:00:07.470
Null-A you've learned what a cue is.

3

00:00:07.650  -->  00:00:12.030
And it's time we start looking at some code and implementing some more methods just as we did in the

4

00:00:12.030  -->  00:00:16.630
last assignment and this is going to help you and give you more experience.

5

00:00:16.680  -->  00:00:21.840
This assignment is going to be slightly more complicated and the first as make sense as you are getting

6

00:00:21.990  -->  00:00:24.870
better and better and more experienced.

7

00:00:24.900  -->  00:00:30.570
There are five methods that you should implement in this assignment and two methods as part of the linked

8

00:00:30.570  -->  00:00:37.080
list which are now modified to work with a Q and three methods are part of the queue itself.

9

00:00:37.080  -->  00:00:43.800
Those new methods are quite small and they should be easy to implement.

10

00:00:43.800  -->  00:00:49.890
The two methods two of them are from the linked list or the remove end from list which is going to remove

11

00:00:49.890  -->  00:00:56.880
a node from the end of the list and the size method which just gives you a count of how many nodes are

12

00:00:56.940  -->  00:01:03.230
in the list and the three methods from the Kuzari that says to what should be 3.

13

00:01:03.300  -->  00:01:05.640
Push Pop and ln.

14

00:01:05.760  -->  00:01:12.240
The LN method which has a built in Python method and we are going to look at what that does.

15

00:01:12.240  -->  00:01:18.380
Soon enough the push method which will add a note to the start of the list.

16

00:01:18.450  -->  00:01:23.700
The pop method which would remove a node and return it and the line which should return the size of

17

00:01:23.700  -->  00:01:24.570
the list.

18

00:01:24.600  -->  00:01:30.420
OK let's look at the code in a minute which can also be downloaded justice in the first assignment.

19

00:01:30.420  -->  00:01:36.340
But first I'll give you once again some pseudocode to help you in implementing these methods.

20

00:01:36.900  -->  00:01:41.460
The remove and from list should iterate over the nodes in the linked list.

21

00:01:41.550  -->  00:01:50.730
Finding the second to last node not the last node but the one before with that second to last node.

22

00:01:50.940  -->  00:01:54.790
It should set it in its next node to be none.

23

00:01:55.380  -->  00:02:03.090
When that happens the last node will not be pointed at by anything and therefore it will be removed

24

00:02:03.090  -->  00:02:04.980
from the list.

25

00:02:06.190  -->  00:02:12.660
OK the pseudocode here says the method should be called remove an from list and it does set a marker

26

00:02:12.720  -->  00:02:18.750
to be the root while the marker has a value then it starts the iteration and we've looked at this in

27

00:02:18.750  -->  00:02:21.000
the last video how to iterate.

28

00:02:21.390  -->  00:02:27.960
But then it also gets the following node which is the markers next note and if the following note has

29

00:02:27.960  -->  00:02:36.090
a value then it checks if the following node next node has a value and if it doesn't then that means

30

00:02:36.090  -->  00:02:38.790
the following node is the last node.

31

00:02:38.790  -->  00:02:40.870
Take a moment here to think about this.

32

00:02:40.920  -->  00:02:46.670
We have the marker markers next node and that notes next note.

33

00:02:46.670  -->  00:02:49.370
So we've got the next three nodes.

34

00:02:50.160  -->  00:02:54.950
If the marker has a value on the market next note has a value.

35

00:02:55.500  -->  00:03:03.570
We don't really know anything yet but if that last node has no next node then that means that that node

36

00:03:03.630  -->  00:03:08.880
is the last note we're going to be looking at some code soon.

37

00:03:08.950  -->  00:03:16.250
So we have the marker the following node and the following following node.

38

00:03:16.910  -->  00:03:19.780
If the following node points to none.

39

00:03:19.950  -->  00:03:27.360
That means the following node is the last node so if that is the case then we set the markers next KNOW

40

00:03:27.360  -->  00:03:28.150
to be none.

41

00:03:28.320  -->  00:03:34.860
And what that does is it removes the last node essentially and we return the following node which is

42

00:03:34.860  -->  00:03:41.610
the node we've just deleted that so we can do things like print details of the node we've removed or

43

00:03:41.610  -->  00:03:43.220
things like that.

44

00:03:43.230  -->  00:03:48.840
Finally at the end of the iteration once again we say that the marker is the markers next node so we

45

00:03:48.840  -->  00:03:52.430
can move over to the next node.

46

00:03:52.650  -->  00:03:58.560
The size is fairly similar but instead of doing things with following nodes and stuff all it does is

47

00:03:58.560  -->  00:04:04.710
it gets the marker node and a count variable initialized to 0 and then it just performs an iteration

48

00:04:05.050  -->  00:04:09.420
and increasing count by 1 for every node that we visit.

49

00:04:09.420  -->  00:04:15.490
And finally at the end it returns the count as that is the number of nodes in the list.

50

00:04:15.490  -->  00:04:16.210
And I do apologise.

51

00:04:16.200  -->  00:04:19.680
That's called find but it should be called size.

52

00:04:19.750  -->  00:04:23.910
The queue methods will just call linked list methods where appropriate.

53

00:04:24.060  -->  00:04:29.310
And I'm going to give you a bit of a challenge and try that on your own without my help.

54

00:04:29.310  -->  00:04:30.650
They are short methods.

55

00:04:30.660  -->  00:04:38.070
Read the description of what they should do and I'm sure you will get what code should be in them to

56

00:04:38.070  -->  00:04:41.240
get started once again just download the zip file and go for it.

57

00:04:41.250  -->  00:04:43.310
So just click on it download it.

58

00:04:43.380  -->  00:04:48.330
Move those files to the folder and then open it up and that's what we're going to be doing just now

59

00:04:48.340  -->  00:04:48.450
.

60

00:04:48.570  -->  00:04:54.360
So I've got it open in Python and I'm going to be going over the code that is here so that you know

61

00:04:54.450  -->  00:04:55.580
what you're doing.

62

00:04:56.670  -->  00:05:00.290
We have a node class just as we did in the last assignment.

63

00:05:00.390  -->  00:05:03.200
But this done it only has a name and a phone number.

64

00:05:03.210  -->  00:05:04.210
It's not a student.

65

00:05:04.320  -->  00:05:07.770
This time it's a cue for the phone.

66

00:05:07.770  -->  00:05:11.290
So somebody is calling a shop for example and they are on a queue.

67

00:05:11.640  -->  00:05:15.530
So each node has a name and a phone number and also the next node.

68

00:05:15.660  -->  00:05:22.320
Just as we did in the last assignment and once again the set next and the next methods are exactly the

69

00:05:22.320  -->  00:05:22.950
same.

70

00:05:22.980  -->  00:05:30.450
So we only set the next node if they are an instance of the Node class or if there are none and we can

71

00:05:30.450  -->  00:05:34.810
get the next node and we can also print the details out.

72

00:05:34.860  -->  00:05:41.280
We've also got the link list which is part of what you should be implementing.

73

00:05:41.370  -->  00:05:48.720
You should implement the ADD start to list which you can just reuse the method that we wrote in a previous

74

00:05:48.720  -->  00:05:56.100
assignment the remove and from list which is not something we can reuse and the find method which is

75

00:05:56.100  -->  00:05:58.650
something we can reuse from the last assignment.

76

00:05:58.730  -->  00:06:01.740
And the size method which is not something we can reuse.

77

00:06:02.280  -->  00:06:04.650
So new methods here are size.

78

00:06:04.680  -->  00:06:10.660
As we said before and remove and from list the other two can just be copied and pasted over.

79

00:06:12.120  -->  00:06:17.670
So the remove and from list once again should iterate over each node find both the second to last node

80

00:06:17.700  -->  00:06:22.300
and the last node and set the second to last node next to be none.

81

00:06:22.620  -->  00:06:28.130
If the last node is indeed the last node and finally return the last note.

82

00:06:29.110  -->  00:06:31.520
OK you can try that.

83

00:06:31.620  -->  00:06:36.120
And that the size method you know what it should do is just iterate over keeping a count of how many

84

00:06:36.120  -->  00:06:41.010
nodes have been iterated over and finally return back count of the end.

85

00:06:41.070  -->  00:06:46.530
So this is a long list just as we created in the last assignment but now it has a couple more bits of

86

00:06:46.530  -->  00:06:52.390
functionality such as to remove from the end or to get the size of it.

87

00:06:52.500  -->  00:06:55.470
The queue is not this class.

88

00:06:55.470  -->  00:06:58.410
This class is only a linked list.

89

00:06:58.410  -->  00:07:06.480
The queue itself is in these other linked queue file and it's called linked queue and a queue is just

90

00:07:06.480  -->  00:07:08.700
a wrapper around a linked list.

91

00:07:08.700  -->  00:07:15.900
Think of it as an API essentially and this means that methods like add to list start which adds at the

92

00:07:15.900  -->  00:07:19.170
beginning of the list should now be called Push.

93

00:07:19.280  -->  00:07:24.060
Because push is the normal name for the method in a queue.

94

00:07:24.240  -->  00:07:28.980
When you are talking with other computer scientists about queues everyone is going to know what push

95

00:07:28.980  -->  00:07:34.560
means when you're talking with other computer scientists or accuse everyone who's going to know what

96

00:07:34.710  -->  00:07:37.620
pop means.

97

00:07:37.770  -->  00:07:46.710
So the push method should only add a node to the linked list and the queue has a property which is self-taught

98

00:07:46.770  -->  00:07:51.750
on that one just calling list which is a linked list object.

99

00:07:51.750  -->  00:07:54.540
So that's the class that is in the other file.

100

00:07:55.050  -->  00:08:04.350
When I'm pushing to a linked list which is adding at the start of the linked list how do you think that

101

00:08:04.350  -->  00:08:05.220
that's going to go.

102

00:08:05.220  -->  00:08:14.480
How do you think using this property you can add at the beginning of the linked list.

103

00:08:14.550  -->  00:08:18.950
I'm sure you got it all you would do in this method is self.

104

00:08:18.950  -->  00:08:26.330
Don't just go on the calling list add to start of list node and I'm giving you this hint here as a special

105

00:08:26.330  -->  00:08:27.700
.

106

00:08:27.720  -->  00:08:31.170
This is what this method should do.

107

00:08:31.170  -->  00:08:39.200
Essentially rename the linked lists method from AB start to list the new name is going to be push.

108

00:08:39.390  -->  00:08:43.770
It lives in a different object but really that's all it does.

109

00:08:44.040  -->  00:08:50.690
And that way we can have standardized names for queues and stacks and things like that which is push

110

00:08:50.940  -->  00:08:54.090
as opposed to start and to start at the beginning.

111

00:08:54.090  -->  00:08:55.130
Things like that.

112

00:08:55.920  -->  00:08:59.640
But please do implement that on your own.

113

00:08:59.640  -->  00:09:06.600
Similarly the pop method is going to just return the last node and that is also returned by the remove

114

00:09:06.600  -->  00:09:09.080
from end method in the linked list.

115

00:09:09.320  -->  00:09:14.790
And finally the underscore underscore Lenn which should also return the size of the linked list so once

116

00:09:14.790  -->  00:09:18.630
again just calling the size method of your linked list.

117

00:09:19.230  -->  00:09:27.660
As an aside the underscore underscore Len method is used so that instead of my variable dot size we

118

00:09:27.660  -->  00:09:28.640
can do Len.

119

00:09:28.650  -->  00:09:30.020
My variable.

120

00:09:30.630  -->  00:09:34.970
So that is what these are the two underscore Len method is used for.

121

00:09:35.130  -->  00:09:41.250
We could get the size using the size method of a linked list or if we have this implemented we can just

122

00:09:41.250  -->  00:09:47.860
use this LAN builtin method to Python and so it just makes things a wee bit simpler really.

123

00:09:47.940  -->  00:09:50.790
But it's not much of a difference.

124

00:09:51.010  -->  00:09:53.980
So with that info please do go ahead and give this a go.

125

00:09:54.060  -->  00:09:54.650
Give it a try.

126

00:09:54.660  -->  00:09:59.810
Look at the code read it understand it and then try to implement this.

127

00:10:00.000  -->  00:10:08.040
So it's a two fold exercise both in implementation and also in reading the code that I give you at the

128

00:10:08.040  -->  00:10:08.250
end.

129

00:10:08.250  -->  00:10:14.870
Once you are ready once again just go to the tests file right click it and run the unit tests.

130

00:10:15.300  -->  00:10:22.380
You should see 10 tests passed or all 10 tests passed and this bar green right now because things are

131

00:10:22.380  -->  00:10:23.610
not implemented.

132

00:10:23.610  -->  00:10:29.500
You are seeing 8 tests fail and that's it really.

133

00:10:29.520  -->  00:10:35.940
Once that is done you and the body is green you ready to move on to the next video.

134

00:10:36.030  -->  00:10:42.750
After the text assignment in the next lecture and we'll look at how to implement this there if your

135

00:10:42.750  -->  00:10:48.330
tests do fail or you get stuck or anything like that please go ahead and ask a question in the course

136

00:10:48.570  -->  00:10:54.930
Q&A or send me a message and I'll be more than glad to reply and give you a hand.

137

00:10:54.960  -->  00:10:55.970
That's it for this video.

138

00:10:56.040  -->  00:11:01.470
So the next one is going to be the text assignment which has a downloads and the one after that will

139

00:11:01.470  -->  00:11:05.470
be the implementation of this so I'll see you there.
