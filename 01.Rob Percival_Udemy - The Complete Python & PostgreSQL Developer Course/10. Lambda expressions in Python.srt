1

00:00:00,130  -->  00:00:06,930
I will come back in this really we're talking about lambda expressions lambda expressions is something

2

00:00:06,960  -->  00:00:13,230
that's gotten into a lot of programming languages and it's just like an anonymous function a function

3

00:00:13,230  -->  00:00:16,500
that doesn't have to have a name although it can do.

4

00:00:16,920  -->  00:00:23,370
And it's used normally to simplify doing things repetitively.

5

00:00:23,370  -->  00:00:25,040
I'll give you a couple of examples.

6

00:00:25,110  -->  00:00:26,110
In this video.

7

00:00:26,520  -->  00:00:33,930
Let's create a new file called lavenders and we're going to be creating a few of them here.

8

00:00:34,110  -->  00:00:38,670
The first lambda I wanted to create is just like a normal function.

9

00:00:38,670  -->  00:00:46,500
I'm going to call my lambda Eyl you can call it whatever you want and it's going to be equal to a lambda

10

00:00:47,250  -->  00:00:53,480
X and then colon X greater than 5.

11

00:00:53,520  -->  00:00:57,660
Now have you ever seen a lambda expression before in a different language I'm sure you know what this

12

00:00:57,660  -->  00:00:58,350
means.

13

00:00:58,350  -->  00:01:08,100
But really what this means is Aile is a lambda function that takes in a parameter called X and it returns

14

00:01:08,160  -->  00:01:11,160
whether x is greater than 5.

15

00:01:11,250  -->  00:01:19,770
So for all intents and purposes this is the same as def L X return Xclusive and 5

16

00:01:22,710  -->  00:01:25,340
both on the same thing here.

17

00:01:25,830  -->  00:01:27,730
I'm calling the function L.

18

00:01:28,110  -->  00:01:33,640
It takes in the parameter anx and it returns whether x is greater than 5.

19

00:01:33,910  -->  00:01:36,180
That's my lambda function.

20

00:01:36,180  -->  00:01:41,310
And as a normal function I can print l 10 for example.

21

00:01:41,580  -->  00:01:47,230
And I'm printing passing 10 as the parameter x returning whether 10 is greater than 5.

22

00:01:47,340  -->  00:01:52,110
So we should see true printed out here and we do.

23

00:01:52,240  -->  00:01:59,430
So you know I'm not lying to you which is good and sometimes it useful to have these small and simple

24

00:01:59,430  -->  00:02:06,870
functions like functions like these but it's even better because it's really easy to pass as function

25

00:02:06,960  -->  00:02:08,430
arguments.

26

00:02:08,730  -->  00:02:14,430
Having these functions there by themselves can be useful but it's even more useful if we can use them

27

00:02:14,430  -->  00:02:15,500
in other places.

28

00:02:15,510  -->  00:02:25,750
So I'm going to create a function called term and it's going to take in a two parameters value and alteration

29

00:02:25,760  -->  00:02:26,360
.

30

00:02:26,730  -->  00:02:27,460
OK.

31

00:02:27,810  -->  00:02:35,490
And one is going to do is return the values inside this list which I'm going to call values in fact

32

00:02:35,490  -->  00:02:43,950
this is it value if they match these this check you would call it check if we want.

33

00:02:44,540  -->  00:02:44,800
OK

34

00:02:48,300  -->  00:02:53,310
so what is going to do is say return all the values in there.

35

00:02:53,490  -->  00:02:56,870
If they match this check OK.

36

00:02:57,360  -->  00:03:04,620
So what to do is Vau for vowel in values if check.

37

00:03:05,050  -->  00:03:08,090
Wow.

38

00:03:08,160  -->  00:03:16,420
So what this does is it says create a new list which has the values of all the elements in values.

39

00:03:16,440  -->  00:03:22,500
We know this from list comprehension but we're only going to put the value inside the new list if it

40

00:03:22,500  -->  00:03:26,940
matches or it succeeds in checking at the check function.

41

00:03:26,940  -->  00:03:35,880
So check here is not a value it is a function because as you can see we are passing to it the parameter

42

00:03:35,880  -->  00:03:37,480
vowel.

43

00:03:38,410  -->  00:03:43,120
OK so this looks a bit weird but we can do things like.

44

00:03:43,800  -->  00:03:54,140
For example we have my list which has the values 1 2 3 4 5 and we can do now is say and the list is

45

00:03:54,150  -->  00:04:01,930
alter my list where lambda x is x not equal to 5.

46

00:04:02,310  -->  00:04:03,760
And this looks a bit weird.

47

00:04:03,780  -->  00:04:04,680
I agree with you.

48

00:04:04,890  -->  00:04:12,180
But what's happening now is that we're passing in the little lambda function as our check parameter

49

00:04:12,180  -->  00:04:12,730
.

50

00:04:13,140  -->  00:04:15,020
And the my list as values.

51

00:04:15,060  -->  00:04:24,290
So what we're doing now is saying get a new list of each of the values in values which is the list.

52

00:04:24,390  -->  00:04:34,230
If the check function succeeds and returns true the only moment when it's not going to return true is

53

00:04:34,230  -->  00:04:40,800
in number 5 because five not equal to 5 is false.

54

00:04:40,800  -->  00:04:46,470
I would recommend Now take a moment pause the video make sure you've read write this in your editor

55

00:04:46,880  -->  00:04:47,520
you run it.

56

00:04:47,520  -->  00:04:48,440
Play around with it.

57

00:04:48,480  -->  00:04:49,820
Take a moment to take it in.

58

00:04:49,830  -->  00:04:59,210
Essentially now that we've done that let's print another list and run that.

59

00:04:59,340  -->  00:05:03,550
And as you can see we get the values of 1 2 3 4.

60

00:05:03,720  -->  00:05:11,640
So this has succeeded in altering my list when the elements in my list did not match this Lamda or other

61

00:05:11,640  -->  00:05:13,970
did match this lambda expression.

62

00:05:14,070  -->  00:05:22,500
The only element that this returned falls for was five because five not equal to five is false for not

63

00:05:22,500  -->  00:05:23,200
equal to 5.

64

00:05:23,220  -->  00:05:26,670
It's true because they are not equal.

65

00:05:28,640  -->  00:05:29,250
OK.

66

00:05:29,430  -->  00:05:30,960
Now we could

67

00:05:35,700  -->  00:05:36,900
create a function

68

00:05:39,240  -->  00:05:51,510
and sort a check not 5 with x then we could create a function called check not 5 and make it return

69

00:05:51,510  -->  00:05:54,490
whether X the parameter is not equal to 5.

70

00:05:54,720  -->  00:05:58,630
Essentially the same as on lambda function and pass that function here

71

00:06:01,410  -->  00:06:06,960
without the brackets and Malwa we're passing is a function name and then we're going to be executing

72

00:06:06,960  -->  00:06:07,900
it here.

73

00:06:07,920  -->  00:06:14,940
This is also fine and we can do that as well but it's just a bit more code essentially for no reason

74

00:06:14,940  -->  00:06:15,730
.

75

00:06:16,050  -->  00:06:21,450
We don't need to reuse the lambda function anywhere else so it doesn't make sense to define it and give

76

00:06:21,450  -->  00:06:22,190
it a name.

77

00:06:22,350  -->  00:06:28,020
Creating a lambda function is a lot cheaper in terms of performance than creating a full blown function

78

00:06:28,020  -->  00:06:29,710
keys.

79

00:06:31,080  -->  00:06:35,700
So we've got a couple of things in this video which is that we can pass what will lambda functions are

80

00:06:35,700  -->  00:06:35,720
.

81

00:06:35,730  -->  00:06:40,380
First of all we've also learned that we can pass them as parameters to functions.

82

00:06:40,740  -->  00:06:46,590
And as an addendum we've learned that we can also pass normal functions as parameters to methods which

83

00:06:46,590  -->  00:06:47,850
we didn't know before.

84

00:06:47,970  -->  00:06:52,430
And it's not something you maybe do very often but nevertheless you can do that.

85

00:06:52,530  -->  00:06:56,480
Just remember to not pass it with the brackets.

86

00:06:57,090  -->  00:07:03,110
If you pass this what you are passing when you put the brackets at the end of the function is the return

87

00:07:03,140  -->  00:07:03,730
value.

88

00:07:03,810  -->  00:07:07,370
So check not 5 5 would be false.

89

00:07:07,410  -->  00:07:09,590
And here what would be passing is false.

90

00:07:09,750  -->  00:07:17,710
And then you would try to run false with a parameter and you will get an error which is that false is

91

00:07:17,730  -->  00:07:24,390
not callable the Boolean object is not callable you can't call it with a set of brackets and a parameter

92

00:07:24,450  -->  00:07:25,960
because it is not a function.

93

00:07:26,220  -->  00:07:33,810
So when you want to pass a function as a parameter make sure to not include the brackets.

94

00:07:33,870  -->  00:07:36,550
So we've learned that we can do this stuff here.

95

00:07:36,690  -->  00:07:41,640
We can pass functions or parameters we've learned about lambda functions and by passing those as well

96

00:07:41,650  -->  00:07:42,160
.

97

00:07:42,660  -->  00:07:48,860
Now we are going to be learning a bit about some more useful scenarios for lambda functions but we're

98

00:07:48,870  -->  00:07:52,790
going to be doing that in the very next video because I don't want to bore you too much.

99

00:07:52,830  -->  00:07:53,980
So I'll see you in the very next one.

100

00:07:54,090  -->  00:08:00,140
And we're going to be looking at a bit more useful scenarios for lambda functions.

101

00:08:00,190  -->  00:08:00,630
So either
