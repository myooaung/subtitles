1

00:00:00,360  -->  00:00:05,370
Find Welcome Back in this video we're looking at numbers and strings.

2

00:00:05,730  -->  00:00:08,860
In some cases we want to be able to add numbers together.

3

00:00:09,000  -->  00:00:15,300
For example when we want to calculate that the average age of our users we may want to add all their

4

00:00:15,300  -->  00:00:20,290
ages together divided by the number of users age in this case with a is a number.

5

00:00:20,610  -->  00:00:26,460
And then we add all the numbers together divided by another number and Python understands that numbers

6

00:00:26,550  -->  00:00:34,190
are things that have that meaning they're just symbols that we can add or multiply together.

7

00:00:34,830  -->  00:00:41,160
However in some cases we may not want to add numbers together or multiply them or divide them or do

8

00:00:41,160  -->  00:00:43,470
any mathematical operations with them.

9

00:00:43,830  -->  00:00:49,620
For example the case of telephone numbers you're never going to want to add a telephone number to another

10

00:00:49,890  -->  00:00:52,220
or multiply it or anything.

11

00:00:52,710  -->  00:00:59,390
So it doesn't make sense to treat a telephone number which is a set of numbers the same way you may

12

00:00:59,400  -->  00:01:02,910
treat a number that you want to do arithmetic with.

13

00:01:02,910  -->  00:01:05,510
Do mathematical operations with.

14

00:01:05,730  -->  00:01:10,520
So that's why Python has as many other programming languages do.

15

00:01:10,650  -->  00:01:17,580
The concept of a string a string which is also sometimes called literal is just that it's a literal

16

00:01:17,580  -->  00:01:21,710
representation of something and that something can be anything you want.

17

00:01:22,200  -->  00:01:33,060
So for example you can have the string which is devastated by these two quotation marks such as the

18

00:01:33,060  -->  00:01:42,450
string to and the string to is something different from the number to the number two has that meaning

19

00:01:42,460  -->  00:01:42,660
.

20

00:01:42,840  -->  00:01:48,330
It means two units the string two just means the symbol two.

21

00:01:48,450  -->  00:01:50,620
So it has no other intrinsic meaning.

22

00:01:50,730  -->  00:01:58,410
If you add the string to to the string two Python understands these are literal representations of something

23

00:01:58,600  -->  00:02:03,580
it no or what but it knows that its the symbol to use know what the symbol means.

24

00:02:03,600  -->  00:02:11,040
So what did the Lu is it'll do the most logical thing to do when you have two strings which is it will

25

00:02:11,040  -->  00:02:12,040
concatenate them.

26

00:02:12,060  -->  00:02:13,580
It will add them together.

27

00:02:13,800  -->  00:02:17,890
It doesn't know that they have any meaning so I cannot give you back for.

28

00:02:18,450  -->  00:02:22,310
So it just concatenates them and joins them together.

29

00:02:23,190  -->  00:02:26,350
OK so here's a small question for you.

30

00:02:26,550  -->  00:02:35,040
What would happen if we get the string to and multiply it by a number in the last video.

31

00:02:35,070  -->  00:02:40,380
I mentioned that when you multiply a number by another what you are getting to is a certain number of

32

00:02:40,380  -->  00:02:40,960
units.

33

00:02:41,010  -->  00:02:43,500
That is the result of that multiplication.

34

00:02:44,040  -->  00:02:49,770
So take your best guess at what is going to happen when we do this.

35

00:02:50,350  -->  00:02:57,840
And the answer is that we are going to get three sets of the unit string 2 and then it's going to give

36

00:02:57,840  -->  00:03:03,320
us to do two because that's the the string two multiplied by three.

37

00:03:03,450  -->  00:03:06,050
And here is a slightly trickier question for you.

38

00:03:06,170  -->  00:03:10,990
What happens if we add the string to to the number two.

39

00:03:11,550  -->  00:03:17,880
Remember the number two is something that has meaning the addition symbol means we want to add to the

40

00:03:17,880  -->  00:03:26,130
units represented by two and the string two does not have any special meaning it's just a literal representation

41

00:03:26,580  -->  00:03:29,100
of the symbol.

42

00:03:29,100  -->  00:03:33,300
So take your best guess at what will happen and it might surprise you.

43

00:03:33,360  -->  00:03:35,900
Some would say you would concatenate the string.

44

00:03:35,970  -->  00:03:41,140
But actually what you get is a lot of read text.

45

00:03:41,400  -->  00:03:48,570
So what it's saying is that you can't convert int which is an integer an integer and the whole number

46

00:03:48,570  -->  00:03:49,710
is the same thing.

47

00:03:49,710  -->  00:03:54,980
So basically what it's saying is you can't convert the two which is a whole number to a string.

48

00:03:55,230  -->  00:04:00,210
Implicitly Python is saying you want me to add these two things together but I actually just don't know

49

00:04:00,210  -->  00:04:01,480
how to do that.

50

00:04:01,680  -->  00:04:04,190
So you can't do it.

51

00:04:04,290  -->  00:04:07,710
So it gives you an error back which is fine.

52

00:04:08,220  -->  00:04:12,820
And that's kind of the main difference between strings and numbers.

53

00:04:12,840  -->  00:04:16,390
Numbers are things you might want to do mathematics with.

54

00:04:16,440  -->  00:04:21,100
You might want to add them or multiply them and strings are literal representations of things.

55

00:04:21,180  -->  00:04:25,240
So you can have the string Jose which is my name.

56

00:04:26,010  -->  00:04:26,980
That's just the string.

57

00:04:26,980  -->  00:04:28,780
Jose you can have the string.

58

00:04:28,780  -->  00:04:29,940
One two three four.

59

00:04:30,210  -->  00:04:31,470
Which is just the string.

60

00:04:31,470  -->  00:04:32,380
One two three four.

61

00:04:32,460  -->  00:04:35,290
It doesn't have any special meaning.

62

00:04:35,300  -->  00:04:40,950
Notice that Python does not care if you use double quotation marks or single quotation marks around

63

00:04:40,950  -->  00:04:41,370
strings.

64

00:04:41,400  -->  00:04:47,490
So this string here with two quotation marks and and this one here with single quotation marks are both

65

00:04:47,520  -->  00:04:48,750
equally valid.

66

00:04:48,840  -->  00:04:51,930
And Python does not make a distinction between those.

67

00:04:52,740  -->  00:04:53,280
OK.

68

00:04:53,400  -->  00:04:58,480
So we've looked at strings and numbers and what happens when we add the two together you get an error

69

00:04:58,490  -->  00:04:58,780
.

70

00:04:58,950  -->  00:05:01,120
And that's something that you may encounter.

71

00:05:01,230  -->  00:05:04,240
What a lot of times and during your Python development career.

72

00:05:04,410  -->  00:05:09,360
It's a very common error to try to add strings and numbers together and we'll see exactly when that

73

00:05:09,360  -->  00:05:11,210
happens very soon.

74

00:05:11,610  -->  00:05:12,120
OK.

75

00:05:12,120  -->  00:05:17,700
So this was the video about numbers and strings and I'll see you in the next one we're going to be looking

76

00:05:17,730  -->  00:05:18,710
at variables
