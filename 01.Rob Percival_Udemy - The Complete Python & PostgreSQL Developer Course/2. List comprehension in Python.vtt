WEBVTT
1

00:00:00.310  -->  00:00:06.420
Will come back in this video we're going to look at least comprehension in the last video we looked

2

00:00:06.420  -->  00:00:14.280
at how to split a string by a certain character so we could split for example one comma to comma three

3

00:00:14.520  -->  00:00:16.400
into three separate strings.

4

00:00:16.410  -->  00:00:17.330
Let's do that again.

5

00:00:17.340  -->  00:00:23.580
Just refresh our memory.

6

00:00:24.630  -->  00:00:31.980
Let's see the user gives us his lottery choices like so it would be with an input but you get the idea

7

00:00:32.790  -->  00:00:39.330
and then the user numbers would be user input don't split.

8

00:00:39.330  -->  00:00:46.260
And then we are squeezing on the comma which means the array or the list is going to be 1 2 3 4 5 and

9

00:00:46.260  -->  00:00:51.150
6 or separately and let's just verify that that is the case.

10

00:00:51.150  -->  00:00:52.470
And so it is.

11

00:00:52.530  -->  00:00:58.660
So we've called the string one string to and so on until the strings 6.

12

00:00:58.680  -->  00:01:08.340
So what we want to do now is convert all these strings to numbers so that we can then do mathematical

13

00:01:08.340  -->  00:01:15.570
operations with them for example and calculate winnings or things like that.

14

00:01:15.570  -->  00:01:18.060
So want to do.

15

00:01:18.060  -->  00:01:30.420
The way we have learned doing these things is create an empty list which is used numbers as int and

16

00:01:30.420  -->  00:01:31.390
then do it for loop.

17

00:01:31.410  -->  00:01:40.770
So for a number in user numbers and this is going to iterate over these string numbers for each of these

18

00:01:40.770  -->  00:01:47.820
numbers we're going to say user numbers underscore us and don't append.

19

00:01:47.820  -->  00:01:53.100
And this is a method we've not looked at yet but essentially what that does is it just adds another

20

00:01:53.100  -->  00:02:02.040
element to a list that is going to add an element to this empty list in name and the VAP Well that's

21

00:02:02.040  -->  00:02:08.180
going to do is add to this list the number converted to an integer.

22

00:02:08.220  -->  00:02:14.070
So now use the numbers as Inde contains these numbers.

23

00:02:14.190  -->  00:02:19.820
So this is the way we would do it with the for loop that we've studied before.

24

00:02:19.830  -->  00:02:26.790
However there's actually a simpler way and list comprehension is fantastic because it's so concise and

25

00:02:27.040  -->  00:02:33.810
yet very readable and it's not something that other programming languages really tend to have.

26

00:02:33.810  -->  00:02:38.750
So let's look at exactly how we would do this using a list comprehension.

27

00:02:39.390  -->  00:02:49.410
We would first of all open a square bracket and then say number four number in use on those phone numbers

28

00:02:49.420  -->  00:02:49.860
.

29

00:02:50.280  -->  00:03:01.940
So when I press enter what is going to come out is just the same thing as user numbers.

30

00:03:02.910  -->  00:03:07.940
So read carefully this list comprehension.

31

00:03:08.190  -->  00:03:15.310
And let's think about what is happening for number in numbers we've seen this sort of construct before

32

00:03:15.310  -->  00:03:15.330
.

33

00:03:15.330  -->  00:03:17.850
We've seen that contract up here in the fall.

34

00:03:18.060  -->  00:03:25.440
And what that did is it created the variable number that equated to the first element and then when

35

00:03:25.440  -->  00:03:31.110
it went and repeated itself equated to the second element and then the third element and so on so that

36

00:03:31.470  -->  00:03:36.600
is used for iteration over a list.

37

00:03:36.630  -->  00:03:39.540
So this is the control we see here as well.

38

00:03:39.570  -->  00:03:41.930
So what does this number do.

39

00:03:42.780  -->  00:03:45.470
Well the construct is used for iteration.

40

00:03:45.660  -->  00:03:51.240
So the assumption is that number then becomes the variable that was assigned here.

41

00:03:51.990  -->  00:04:00.950
And what is doing it is just saying I'm going to put in this list number where number is.

42

00:04:00.990  -->  00:04:04.890
Each element in use are numbers.

43

00:04:05.220  -->  00:04:07.280
So let me give you another example.

44

00:04:07.350  -->  00:04:08.460
Number times too.

45

00:04:08.760  -->  00:04:14.100
And notice these are strings for number in use numbers.

46

00:04:15.330  -->  00:04:19.100
So what do you think is going to happen when we do this.

47

00:04:19.140  -->  00:04:20.700
Remember number is a string.

48

00:04:20.910  -->  00:04:26.650
So the multiplication here is not going to be arithmetic multiplication.

49

00:04:27.990  -->  00:04:34.680
Well our presenter and what we get is number times two for each of the elements in user numbers where

50

00:04:34.680  -->  00:04:37.020
each of the elements is called number.

51

00:04:37.440  -->  00:04:44.900
So essentially multiply each of the elements by 2 and create a list with those elements.

52

00:04:44.940  -->  00:04:52.050
So now your challenge use a list comprehension to convert all the numbers to integers.

53

00:04:52.320  -->  00:04:59.760
Pause the video and give it a few goes if you need and then come back and we'll do it here.

54

00:05:01.860  -->  00:05:02.390
OK.

55

00:05:02.610  -->  00:05:10.950
So the way I would do it is end number four number in use numbers.

56

00:05:11.010  -->  00:05:12.510
It's that simple.

57

00:05:12.510  -->  00:05:18.340
Just remember that number is each of the variables in that original list.

58

00:05:18.630  -->  00:05:26.130
And we want to use it but convert it to an integer and we're going to create our list with that number

59

00:05:26.130  -->  00:05:29.750
converted to an integer for each of the elements in that list.

60

00:05:30.120  -->  00:05:34.350
So when we do that we get that numbers.

61

00:05:34.440  -->  00:05:40.680
So this is how a list comprehension works and we'll go also into using something called set comprehension

62

00:05:41.010  -->  00:05:44.670
and set comprehension list comprehension are nearly identical.

63

00:05:44.670  -->  00:05:48.180
The only thing that changes is the square brackets.

64

00:05:48.330  -->  00:05:54.020
So don't worry if I mention the set comprehension later on or list comprehension.

65

00:05:54.020  -->  00:06:00.000
They are both nearly identical but I will cover in detail the differences in a coming video.

66

00:06:00.640  -->  00:06:03.240
OK so this is how you do list comprehension.

67

00:06:03.240  -->  00:06:08.730
Remember for each of the numbers or for each of the elements in the list you can do something with that

68

00:06:08.790  -->  00:06:09.660
element.

69

00:06:09.750  -->  00:06:15.000
You can convert it to an integer you can multiply it you can add to something else you can do pretty

70

00:06:15.000  -->  00:06:16.570
much anything you want.

71

00:06:16.570  -->  00:06:18.930
And all in one line and it's very concise.

72

00:06:18.930  -->  00:06:23.580
And you're generating a new list from that statement.

73

00:06:24.180  -->  00:06:30.120
Knowing that miscomprehension is a fantastic tool and it's very useful and very used in Python.

74

00:06:30.150  -->  00:06:35.640
So get acquainted with it and get to know it well because you will find many uses for it throughout

75

00:06:35.640  -->  00:06:36.810
your programming.

76

00:06:37.440  -->  00:06:39.300
Without said I see you in the next video
