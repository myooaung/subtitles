WEBVTT
1

00:00:00.260  -->  00:00:05.250
Hi and welcome back in this video we're going to be creating a small program to tell the user whether

2

00:00:05.250  -->  00:00:09.770
they got it right or wrong depending on the number they type in.

3

00:00:09.780  -->  00:00:15.290
And we're also going to allow the user to have multiple chances.

4

00:00:15.350  -->  00:00:19.650
So not only one chance but maybe have three chances to get it right.

5

00:00:19.680  -->  00:00:22.700
We're not going to do this in the interactive shell.

6

00:00:22.710  -->  00:00:27.630
We're going to press command and to open a new file and we're going to do it in here.

7

00:00:27.660  -->  00:00:29.310
So I'm just going to revise this.

8

00:00:29.310  -->  00:00:31.230
Make sure you can see it.

9

00:00:31.690  -->  00:00:32.310
And then there we go.

10

00:00:32.310  -->  00:00:34.980
So now we don't have the time.

11

00:00:35.220  -->  00:00:41.100
What we saw in the last few videos we're doing everything from scratch.

12

00:00:41.850  -->  00:00:48.430
The Magic Numbers we need to define a list of magic numbers that are going to be what the user can get

13

00:00:48.450  -->  00:00:49.070
from.

14

00:00:49.330  -->  00:00:54.010
So magic underscore numbers and I'm going to say 3 and 9 again.

15

00:00:54.150  -->  00:00:59.680
So if the user types in three or nine then we're going to tell them they got it right.

16

00:00:59.850  -->  00:01:02.660
And if not we're going to tell them they got it wrong.

17

00:01:03.610  -->  00:01:04.110
OK.

18

00:01:04.230  -->  00:01:08.510
So then the user number is going to be for example 4.

19

00:01:08.790  -->  00:01:13.650
And naturally we want to want to change this to an input so that the user can actually type something

20

00:01:13.650  -->  00:01:15.920
in and we're going to do that just in a moment.

21

00:01:16.080  -->  00:01:23.290
But it's better to first try and work the program out to see how it's going to work.

22

00:01:23.480  -->  00:01:24.000
OK.

23

00:01:24.240  -->  00:01:32.430
So the next thing to do would be to say if the number that they've typed in is Inside Magic Numbers

24

00:01:33.000  -->  00:01:34.690
print and they've got it right.

25

00:01:34.740  -->  00:01:41.610
So if you can do this bit you know how to check if something is in something and you know how to print

26

00:01:41.850  -->  00:01:45.790
something out and you can do that both if they got it right.

27

00:01:45.900  -->  00:01:50.350
And if they got it wrong so go ahead do that yourselves.

28

00:01:50.520  -->  00:01:56.610
Try the two if statements and see if they work around that you can save the file and run it as well

29

00:01:56.630  -->  00:01:59.300
.

30

00:02:01.870  -->  00:02:02.420
OK.

31

00:02:02.580  -->  00:02:05.310
So the first statement is in case they got it right.

32

00:02:05.310  -->  00:02:13.620
So if user number in magic numbers then print you got the number right.

33

00:02:13.620  -->  00:02:23.820
And then if you use a number not in magic and the school numbers and you didn't quite get it.

34

00:02:25.530  -->  00:02:30.000
So in this case when we saved this file and run it we would expect to see that.

35

00:02:30.000  -->  00:02:31.090
We didn't quite get it.

36

00:02:31.140  -->  00:02:39.680
So let's save that and magic numbers and want to save it and then run it up.

37

00:02:40.260  -->  00:02:42.900
And it does print out you didn't quite get it.

38

00:02:43.020  -->  00:02:44.730
Naturally the user doesn't know what we're doing.

39

00:02:44.760  -->  00:02:50.640
So this is not a very good program because the user isn't playing really it's just running a program

40

00:02:50.640  -->  00:02:52.870
that always going to print out the same thing.

41

00:02:53.310  -->  00:03:03.530
So let's change the user number for an input input into a number between 0 and 9.

42

00:03:04.890  -->  00:03:05.660
OK.

43

00:03:05.940  -->  00:03:12.030
So let's save this and run it and I'm going to type in three.

44

00:03:12.120  -->  00:03:15.230
What do you think is going to happen when I type in the number three.

45

00:03:15.380  -->  00:03:17.410
I have my user number.

46

00:03:17.800  -->  00:03:20.460
Is it going to printout that I got the number right.

47

00:03:20.610  -->  00:03:25.310
Or that I didn't quite get it.

48

00:03:25.560  -->  00:03:28.710
Let's run it and find out.

49

00:03:28.710  -->  00:03:33.710
I'm going to type in the number three and it says that I didn't quite get it.

50

00:03:34.020  -->  00:03:43.500
So this has to do with numbers and strings once again and once I've sent that you immediately know what

51

00:03:43.500  -->  00:03:50.650
the problem is the input method is getting the user input but it's getting it as a string.

52

00:03:51.360  -->  00:03:57.750
And then it's saying if you use a number the string theory is in magic numbers which has the numbers

53

00:03:57.750  -->  00:04:04.200
3 or 9 and that's saying that's not true because this is a string and these are a list of numbers.

54

00:04:04.380  -->  00:04:06.330
So that's false.

55

00:04:06.330  -->  00:04:07.650
Use a number not in magic numbers.

56

00:04:07.650  -->  00:04:08.250
That's true.

57

00:04:08.250  -->  00:04:10.810
The string theory is not in that list.

58

00:04:10.950  -->  00:04:16.010
And then it says you didn't quite get it easy fix to verify that what I'm saying is true.

59

00:04:16.170  -->  00:04:21.810
Put the string theory in there save it and run it again and then type in three again and now it says

60

00:04:21.900  -->  00:04:28.930
that I got it because the string theory which is this one is inside that list.

61

00:04:29.170  -->  00:04:31.110
However that is not a good solution.

62

00:04:31.110  -->  00:04:36.690
Let's remove that and instead convert the usual input to an integer.

63

00:04:36.750  -->  00:04:38.340
So you know how to do that.

64

00:04:38.400  -->  00:04:45.090
You can use the same method that converts a string to an integer and do that.

65

00:04:45.100  -->  00:04:50.990
To fix this program essentially.

66

00:04:51.830  -->  00:04:57.400
So the way you would do that is you would put an end around here.

67

00:04:58.000  -->  00:05:00.160
So there we go.

68

00:05:00.260  -->  00:05:03.600
And here this is one way to fix it.

69

00:05:03.660  -->  00:05:10.680
Another way would be to put in around these two here and that is also an acceptable solution.

70

00:05:10.680  -->  00:05:14.590
So let's see if that press run again and now type in three.

71

00:05:14.770  -->  00:05:20.650
And now it says that we got the number right which is what we would expect.

72

00:05:21.150  -->  00:05:27.350
Something else I want to do is to give the user a few chances to get the number right.

73

00:05:27.360  -->  00:05:32.720
So what I'm going to do is chances equal three I'm going to define that the user is going to have three

74

00:05:32.730  -->  00:05:33.740
chances.

75

00:05:33.900  -->  00:05:39.290
And now we are going to repeat this three times.

76

00:05:39.290  -->  00:05:43.400
So I'm going to cut to that and put it at the top.

77

00:05:43.890  -->  00:05:47.370
So now I'm going to repeat this code here three times.

78

00:05:47.670  -->  00:05:51.730
And the way we're going to do that is using the for loop.

79

00:05:52.350  -->  00:05:55.090
We don't know how to do this just yet.

80

00:05:55.140  -->  00:06:04.380
So I'm not going to ask you to do it yourselves for I or it doesn't matter what you call it attempt

81

00:06:05.630  -->  00:06:12.630
in an hour what goes in here is range chances.

82

00:06:12.630  -->  00:06:17.220
And what this does is range creates a list so range chances.

83

00:06:17.230  -->  00:06:21.560
It's essentially a list that goes from zero to two.

84

00:06:21.570  -->  00:06:30.910
So I'm going to type a comment here and a range chances is 0 1 2.

85

00:06:31.110  -->  00:06:35.760
So that is what that is what is going to happen and that's going to say attempt at first is going to

86

00:06:35.760  -->  00:06:38.530
be 0 then it's going to be one that is going to be two.

87

00:06:38.530  -->  00:06:42.590
So we realize that it's going to repeat it three times.

88

00:06:42.900  -->  00:06:44.910
So I'm going to invent that.

89

00:06:45.300  -->  00:06:47.420
And that is something very important in Python.

90

00:06:47.430  -->  00:06:50.180
Make sure that your indentation is right.

91

00:06:50.340  -->  00:06:54.730
So the idealy does it for you when you type an if statement.

92

00:06:54.750  -->  00:06:57.540
The next line is slightly more indented.

93

00:06:57.870  -->  00:07:02.760
But if we write something above another line that doesn't happen so make sure that your indentation

94

00:07:02.760  -->  00:07:04.730
is always consistent.

95

00:07:04.740  -->  00:07:11.220
So after the for loop indent for spaces after an if statement in InfoSpace is that always mean you have

96

00:07:11.220  -->  00:07:12.670
to do after a colon.

97

00:07:12.690  -->  00:07:18.550
So whenever you see a call on indent four spaces just type four spaces that's all you have to do.

98

00:07:18.730  -->  00:07:19.860
So I'm going to delete that.

99

00:07:19.920  -->  00:07:23.640
Just type in four spaces and that's that's everything.

100

00:07:23.640  -->  00:07:26.630
So let's say that and press 5 to run it.

101

00:07:26.700  -->  00:07:29.820
And now we can enter a number between 0 9 and type 4.

102

00:07:29.890  -->  00:07:35.450
You said you didn't quite get 5 you don't quite get it and 3 and I got it.

103

00:07:35.490  -->  00:07:39.150
So there's only three chances.

104

00:07:39.150  -->  00:07:46.770
So our last challenge for you before the end of this video printout What attempt the user is in.

105

00:07:46.920  -->  00:07:49.420
So I wanted to tell the user this is your first attempt.

106

00:07:49.530  -->  00:07:50.820
This is your second attempt.

107

00:07:50.820  -->  00:07:53.090
This is your third attempt.

108

00:07:53.280  -->  00:07:57.920
You can simplify it and say This is attempt one or this attempt to zero.

109

00:07:57.920  -->  00:08:10.050
This is attempt one that is attempt to try and do that and then we'll quickly do that here as well.

110

00:08:10.170  -->  00:08:17.040
So the way to do that would be knowing that attempt is at least attempt at first it's going to be zero

111

00:08:17.210  -->  00:08:19.470
that is going to be one that is going to be two.

112

00:08:19.650  -->  00:08:21.760
So what we have to do is print.

113

00:08:21.990  -->  00:08:31.860
This is a template and then format attempt to remember what this does is the format method replaces

114

00:08:32.250  -->  00:08:35.000
the opening closing curly brace with the variable.

115

00:08:35.070  -->  00:08:37.850
So in this case attempt which is 0 1 and 2.

116

00:08:38.070  -->  00:08:39.420
Let's save that and run it.

117

00:08:40.080  -->  00:08:44.210
And then he says this is a time to zero for this get him to 1 3.

118

00:08:44.220  -->  00:08:46.990
He got it and 9 you got.

119

00:08:47.430  -->  00:08:51.450
So this is attempt at 0 1 and 2.

120

00:08:52.320  -->  00:08:52.590
OK.

121

00:08:52.590  -->  00:08:54.180
So that's everything for this video.

122

00:08:54.240  -->  00:09:00.870
We've looked at what a lot of things and we've made our first program essentially in here that allows

123

00:09:00.870  -->  00:09:08.000
the user to decide to pick between numbers and we'll tell them whether the number is right or not.

124

00:09:08.070  -->  00:09:09.670
So that's fantastic.

125

00:09:09.690  -->  00:09:16.310
And in the next few videos we'll want to make sure that the magic numbers list is not pretty populated

126

00:09:16.350  -->  00:09:20.970
so we're going to actually put numbers in the list via our program.

127

00:09:20.970  -->  00:09:23.920
So we'll be doing that over the next couple of years.

128

00:09:23.940  -->  00:09:24.430
So you there
