1

00:00:00,840  -->  00:00:06,900
Homework and back in this video we're going to be creating a menu for our app and this menu method is

2

00:00:06,900  -->  00:00:12,370
going to be the longest method out of all of the ones we've created so far.

3

00:00:12,480  -->  00:00:17,940
And it's going to allow us to interact with a user or rather for the user to interact with the app that

4

00:00:17,940  -->  00:00:20,230
we've made.

5

00:00:21,960  -->  00:00:28,200
Lance first of all create a method called menu and that is going to actually execute a program let the

6

00:00:28,200  -->  00:00:30,540
user interact with the program.

7

00:00:30,540  -->  00:00:37,350
So what we want the user to be able to do is add a student to student list

8

00:00:41,100  -->  00:00:51,470
and also add a mark to each student and print a list of students and also probably exit the application

9

00:00:51,470  -->  00:00:51,510
.

10

00:00:51,510  -->  00:00:56,850
So these are the four different choices that the user might want to do.

11

00:00:58,170  -->  00:01:07,710
And we have to make a menu in such a way that it allows them to do everything here.

12

00:01:07,890  -->  00:01:15,440
Now I think you can do nearly everything that's in here except for this one.

13

00:01:15,850  -->  00:01:19,260
And we're going to go into why you can't do exactly that one just yet.

14

00:01:19,260  -->  00:01:26,490
But what I would recommend once again pause if you and think about how you might want to structure this

15

00:01:26,490  -->  00:01:33,180
menu so that when we move on and I start showing you how I would do it you've got some sort of baseline

16

00:01:33,180  -->  00:01:36,470
that you can compare your thought process against mine.

17

00:01:36,550  -->  00:01:38,500
And that way it will help your learning.

18

00:01:38,640  -->  00:01:43,080
So I would recommend porting given a bit of thought if you want to implement it by all means go ahead

19

00:01:43,510  -->  00:01:46,350
and then then we can move on and it will be a lot better

20

00:01:50,700  -->  00:01:51,630
once that's done.

21

00:01:51,770  -->  00:01:56,020
And I hope that you manage to maybe implement something or at least give it a bit of thought.

22

00:01:56,020  -->  00:01:59,940
And now we can continue with our different options.

23

00:01:59,940  -->  00:02:04,410
The first thing we want to do is ask the user for what they want to do.

24

00:02:04,410  -->  00:02:13,350
So we might want to see the user selection ease input and we may want to see and to pay me to print

25

00:02:13,410  -->  00:02:14,250
the student list

26

00:02:16,890  -->  00:02:29,630
as to add a new student a to a mark to a new student to a funeral or q to quit.

27

00:02:30,660  -->  00:02:37,950
And this is a fairly large list and we can just break it down here and this doesn't affect the way it's

28

00:02:37,950  -->  00:02:39,300
printed out at all.

29

00:02:39,300  -->  00:02:42,730
So we can just break it down and make it a bit easier on the eyes.

30

00:02:43,800  -->  00:02:54,240
And now what we want to do is if selection is then print to the student list Princeton list where the

31

00:02:54,240  -->  00:03:02,790
list is student list if selection is equal to.

32

00:03:03,180  -->  00:03:06,120
Then create student.

33

00:03:06,570  -->  00:03:12,540
And remember that this returns a student dictionary and this student dictionary we have to put in our

34

00:03:12,540  -->  00:03:13,530
student list.

35

00:03:13,740  -->  00:03:14,850
And I think you can do that.

36

00:03:14,880  -->  00:03:21,420
You can use the append method to police this dictionary that gets returned by this method into the student

37

00:03:21,420  -->  00:03:21,890
list.

38

00:03:21,950  -->  00:03:27,970
Then you can do that and I would recommend taking the time now to try that out and implemented yourselves

39

00:03:28,010  -->  00:03:29,180
.

40

00:03:30,630  -->  00:03:37,290
Once that's done and if you remembered correctly then shouldn't on the school list don't append will

41

00:03:37,830  -->  00:03:41,950
append or add something at the end of a list.

42

00:03:42,080  -->  00:03:45,690
And what we're adding into that list is to create student.

43

00:03:45,960  -->  00:03:50,340
Remember this is going to ask the user for the shouldn name as well.

44

00:03:50,800  -->  00:03:59,670
Elif selection is a we want to add a student Mark and this is where the problem lies because we can

45

00:03:59,670  -->  00:04:08,880
do either mark but now we need to pass and mark a student not a student list but rather to a specific

46

00:04:09,000  -->  00:04:10,910
student.

47

00:04:11,730  -->  00:04:17,650
How is the user going to get a specific student from the student list.

48

00:04:17,700  -->  00:04:24,190
We haven't given the user the option to interact with one specific student.

49

00:04:24,300  -->  00:04:30,210
We've given them the option to printout the student list or to add a new student but they don't have

50

00:04:30,210  -->  00:04:36,500
an option to select one of the students for it to be passed to at Mark.

51

00:04:36,570  -->  00:04:44,220
What we have to do is allow the user to somehow identify each student individually where we have to

52

00:04:44,220  -->  00:04:49,920
do for that is give each of the students I am an idea and identify

53

00:04:53,050  -->  00:04:59,440
we could do it two ways we could in the student data dictionary have an ID.

54

00:05:01,030  -->  00:05:06,400
But the ideas would probably be 0 1 2 3 and so on.

55

00:05:06,400  -->  00:05:12,840
So we might as well give the ID here when we print out the details.

56

00:05:12,850  -->  00:05:21,700
We can also print out an ID and that ID can be the position of the student in the student list.

57

00:05:21,730  -->  00:05:30,070
So for example if the student is the first student that has been added to the list that would be id

58

00:05:30,080  -->  00:05:31,290
0 if it's the first.

59

00:05:31,360  -->  00:05:39,140
The second student would be ID 1 and then the user here can say for sure and ID one I want to add Mark

60

00:05:39,350  -->  00:05:47,590
and student ID one is the second student in the list the way we're going to print out the IDS is by

61

00:05:47,590  -->  00:05:49,930
using the numerator method.

62

00:05:50,250  -->  00:06:00,610
What we'll do is say for I call my student in numerate students and what that does is it not only gives

63

00:06:00,610  -->  00:06:04,330
us the student value which is each of the elements of the list.

64

00:06:04,360  -->  00:06:08,270
It also gives us the index of each of the elements.

65

00:06:08,620  -->  00:06:12,300
So student the first student is going to be the first element on the list.

66

00:06:12,490  -->  00:06:17,950
And we're also going to get zero as the first index and then the next student is going to be the second

67

00:06:17,940  -->  00:06:18,440
June.

68

00:06:18,510  -->  00:06:21,410
And we're also going to get in next one actually.

69

00:06:22,080  -->  00:06:31,670
And what we can do here is say printed in details but also print ID dot format.

70

00:06:33,000  -->  00:06:39,590
And then the student can sort of the user can then see OK I want to modify student with ID 3.

71

00:06:39,610  -->  00:06:48,100
For example naturally in our selection we also have to allow the user to type in which ID they want

72

00:06:48,160  -->  00:06:53,550
to interact with which ID they want to add a mark to.

73

00:06:53,560  -->  00:07:03,770
So let's say that student on the whole index or ID is input and to the student ID to add a marker to

74

00:07:03,770  -->  00:07:05,020
.

75

00:07:06,440  -->  00:07:12,870
And now this will get us the student ID and we can get the specific student that we want to watermarked

76

00:07:12,870  -->  00:07:21,360
to a student is going to be student list student IAB and that's going to get us the specific student

77

00:07:21,490  -->  00:07:23,660
that the user is wanting to interact with.

78

00:07:23,680  -->  00:07:27,030
And finally we can say Neumark is

79

00:07:31,060  -->  00:07:35,080
input into the Neumark to be added.

80

00:07:35,830  -->  00:07:44,230
And finally we can say the mark for student Neumark now I've missed out a couple of things deliberately

81

00:07:44,250  -->  00:07:44,410
.

82

00:07:44,500  -->  00:07:48,790
So you guys can see I can see if you guys are on the ball.

83

00:07:49,360  -->  00:07:51,860
What is the problem with this bit of code.

84

00:07:51,880  -->  00:07:54,990
There are two problems and there are.

85

00:07:55,120  -->  00:07:55,590
I'll give you a hint.

86

00:07:55,600  -->  00:07:57,790
They're both related to data types.

87

00:07:58,490  -->  00:08:01,290
So what do you think the problem might be.

88

00:08:01,320  -->  00:08:05,350
The poem has to do with the input method and what it returns

89

00:08:09,260  -->  00:08:10,920
to give you.

90

00:08:11,110  -->  00:08:19,480
If you had the input method returns a string and we know from previously that the index that we gets

91

00:08:19,650  -->  00:08:25,890
from a list has to be an integer index 0 the next one to three and so on.

92

00:08:25,960  -->  00:08:30,360
Therefore if student ID is an integer then this is going to give us an error.

93

00:08:30,750  -->  00:08:34,460
And similarly the new Mark also returns a string.

94

00:08:35,110  -->  00:08:39,840
And when we add the mark in here it's going to put in a string and that's going to be fine.

95

00:08:40,020  -->  00:08:45,920
But then when it comes to calculating the average it's going to try to divide strings by a number and

96

00:08:45,930  -->  00:08:54,390
that's not going to go down well you guys know how to convert these things to numbers I'm sure.

97

00:08:54,390  -->  00:08:57,210
So let's do that real quick.

98

00:08:57,220  -->  00:09:07,480
How would you make sure that student ID and Neumark are integers as opposed to strings.

99

00:09:08,400  -->  00:09:14,860
And the solution as I'm sure you've got it is to simply wrap the input method with it and that will

100

00:09:14,860  -->  00:09:21,960
convert temporarily this return type to int and it will associate that with student ID.

101

00:09:21,970  -->  00:09:27,600
And similarly down here and now what we're adding is a number.

102

00:09:27,930  -->  00:09:30,270
And what we're accessing is a number as well.

103

00:09:30,390  -->  00:09:36,000
And we're not really banking on the user not piping a for example where we're banking on them typing

104

00:09:36,000  -->  00:09:36,720
a number.

105

00:09:36,900  -->  00:09:42,240
And if if they type a then the integer conversion is going to fail because a cannot be converted to

106

00:09:42,250  -->  00:09:43,170
an integer.

107

00:09:43,260  -->  00:09:45,590
But we'll deal with that later on.

108

00:09:48,610  -->  00:09:49,500
OK.

109

00:09:49,530  -->  00:09:53,560
So I think we've got everything except exit the application.

110

00:09:53,580  -->  00:09:56,550
Let's give this a go and see what happens.

111

00:09:56,540  -->  00:10:00,390
So if everything works I'll run them on you and then and and play it.

112

00:10:00,410  -->  00:10:06,050
And here we've got our prompt and Pete and assumed list as to how the new student ETU Almagro a student

113

00:10:06,120  -->  00:10:08,100
or q to quit.

114

00:10:08,100  -->  00:10:13,210
And also you know we can see that the combers and these quotation marks are very close together.

115

00:10:13,280  -->  00:10:17,420
So the first thing I'm going to do is just fix that in terms of usability adding a space at the end

116

00:10:18,470  -->  00:10:29,240
and I will just make it a bit better and potentially I'm also going to enter your selection do that

117

00:10:29,250  -->  00:10:29,270
.

118

00:10:29,270  -->  00:10:32,580
So the user knows that they're made to type.

119

00:10:33,000  -->  00:10:37,640
So let's P and we don't get anything which makes sense.

120

00:10:37,640  -->  00:10:38,940
We don't have enough students yet.

121

00:10:38,930  -->  00:10:39,920
And the program is finished.

122

00:10:39,990  -->  00:10:42,890
So in order to go again we have to press play.

123

00:10:43,500  -->  00:10:44,380
And.

124

00:10:44,600  -->  00:10:50,110
Now when any space that let's add a student type s.

125

00:10:51,200  -->  00:10:56,720
So we've added the student but then the program ended because that's what we've told it to do really

126

00:10:57,130  -->  00:10:57,800
the selection was.

127

00:10:57,800  -->  00:11:03,740
As we've appended something to the student list and that's it then the program comes on and so what

128

00:11:03,750  -->  00:11:12,580
we want to do is say while selection is not equal to Q which is the thing we reason to quit.

129

00:11:12,840  -->  00:11:15,760
We're going to indent all of that and put it into the while loop.

130

00:11:16,230  -->  00:11:20,240
And once selection is not cue we're going to be doing that.

131

00:11:20,270  -->  00:11:26,750
However remember at the end of the while loop we're going to have to ask the user again for his selection

132

00:11:27,380  -->  00:11:31,910
so that we can then restart the loop with another.

133

00:11:32,220  -->  00:11:34,910
Another option for the user.

134

00:11:35,620  -->  00:11:36,610
So let's do that.

135

00:11:36,750  -->  00:11:40,120
And now our press play and now we've got a selection.

136

00:11:40,130  -->  00:11:42,140
We're going to add a new student.

137

00:11:42,680  -->  00:11:48,920
And now we get the prompt again asking us to enter more things and we can print the sheet and list and

138

00:11:49,280  -->  00:11:50,720
we get zero.

139

00:11:51,090  -->  00:11:53,170
And then my name average mark is zero.

140

00:11:53,540  -->  00:11:59,870
So let's add a mark and the ID that we want to add two is zero which is the idea there.

141

00:12:00,410  -->  00:12:06,980
And remember all that that's doing is accessing the zeroth element of our student list and the zeroth

142

00:12:06,990  -->  00:12:10,160
element is going to be the only element to that in this case.

143

00:12:10,930  -->  00:12:16,430
And then you might be at eight ninety nine and now we can print it out and we can see ID 0 the average

144

00:12:16,430  -->  00:12:17,520
marks ninety nine.

145

00:12:17,510  -->  00:12:20,910
Let's add another one to zero.

146

00:12:21,000  -->  00:12:24,800
Mark 15 we can print it out and now we can see the average marker seventy four point five

147

00:12:30,100  -->  00:12:32,060
and I.D. one is now Rolf.

148

00:12:32,100  -->  00:12:34,020
The one I've just added average mark is zero.

149

00:12:34,010  -->  00:12:35,850
And we can keep going with that.

150

00:12:35,880  -->  00:12:38,110
Let's see if we type Q Does it exit.

151

00:12:38,220  -->  00:12:40,560
Yes it does.

152

00:12:40,830  -->  00:12:46,100
And I realize this was a bit of a longer video but it's important that you guys realize of the importance

153

00:12:46,160  -->  00:12:52,820
of iterating and testing your program and making sure that it's usable and making sure that you're going

154

00:12:52,830  -->  00:12:58,940
through everything that the user might want to do and verifying that everything works in your hand.

155

00:12:58,940  -->  00:13:01,000
Once you know the input method returns a string.

156

00:13:01,130  -->  00:13:06,800
It's important to realize what is going to happen when the program gets to this place.

157

00:13:06,800  -->  00:13:09,910
The input method winners on a string that's going to be associated with an.

158

00:13:10,110  -->  00:13:13,870
And then we're going to access a string in here which is going to give me an error.

159

00:13:13,880  -->  00:13:19,920
So therefore I need to convert it to an integer in my hand while I'm developing I'm always going over

160

00:13:20,420  -->  00:13:23,240
what the computer is going to do when it gets to this line.

161

00:13:23,340  -->  00:13:27,170
What is going to happen in this line and when what is going to happen in this one and then what's going

162

00:13:27,170  -->  00:13:28,600
to happen in this one.

163

00:13:28,700  -->  00:13:31,500
And just thinking what would the computer do.

164

00:13:31,700  -->  00:13:35,810
And that really helps me figure out a lot of errors before they actually happen.

165

00:13:35,820  -->  00:13:42,300
So that's important that you guys start thinking like a computer when it comes to developing.

166

00:13:42,330  -->  00:13:47,880
With that said we've got this program working and we've actually learned quite a lot of different things

167

00:13:47,880  -->  00:13:48,100
.

168

00:13:48,140  -->  00:13:51,890
We've learned a lot about some method in calculating averages.

169

00:13:51,890  -->  00:14:00,060
We've learned about the numerate method used for getting not only the value of a list but also the index

170

00:14:00,050  -->  00:14:01,110
as well.

171

00:14:01,760  -->  00:14:07,130
And we've also learned about dictionaries creating them advantaged dictionary usage putting lists in

172

00:14:07,130  -->  00:14:10,500
dictionaries and dictionaries in dictionaries and returning them as well.

173

00:14:10,520  -->  00:14:17,730
And also we've created a slightly more complicated or complex rather menu which allows the user to to

174

00:14:17,780  -->  00:14:19,610
interact with our app.

175

00:14:19,750  -->  00:14:21,100
So we've done quite a few things.

176

00:14:21,220  -->  00:14:28,290
I think that now we're ready to really move on to the very foundational aspect of software development

177

00:14:28,280  -->  00:14:32,780
which is object oriented programming and that's what we're going to be doing in the next section.

178

00:14:32,780  -->  00:14:36,610
I'm really excited about that and I hope you guys are too.

179

00:14:36,780  -->  00:14:40,890
And in the next section we're going to be moving on to that object oriented programming.

180

00:14:40,880  -->  00:14:42,350
It's the next stop.

181

00:14:42,470  -->  00:14:43,920
So I'll see you there.
