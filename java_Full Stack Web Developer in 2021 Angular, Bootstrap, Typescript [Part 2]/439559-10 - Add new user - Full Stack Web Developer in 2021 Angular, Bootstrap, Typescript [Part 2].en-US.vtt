WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.325
As part of this video,

00:00:02.325 --> 00:00:08.020
we will implement the business logic for admin user API.

00:00:08.600 --> 00:00:12.060
So the first thing to follow is to go under

00:00:12.060 --> 00:00:17.490
the constants class and set up a new statement.

00:00:17.490 --> 00:00:24.100
Public static, add new user of type string.

00:00:24.440 --> 00:00:32.800
And this will be computed from the constants that user resource loss add.

00:00:33.200 --> 00:00:36.195
Since on the server side,

00:00:36.195 --> 00:00:40.105
this is the corresponding metal signature.

00:00:40.105 --> 00:00:46.505
Now under user_data services.js class or service class,

00:00:46.505 --> 00:00:54.155
we're setting up a new method called end user that accepts an user as a parameter.

00:00:54.155 --> 00:00:59.010
And we returned observable of any.

00:01:00.430 --> 00:01:08.975
And we will invoke this HTTP post of constants add new user.

00:01:08.975 --> 00:01:15.920
And we will also send the user to the Spring boot server. So on.

00:01:15.920 --> 00:01:21.360
This method will be invoked and user will be added to the database.

00:01:30.480 --> 00:01:34.075
Now under user component ts,

00:01:34.075 --> 00:01:36.160
that type script file.

00:01:36.160 --> 00:01:41.140
Let's import the model directive that will be used

00:01:41.140 --> 00:01:48.650
to use MD Bootstrap modal dialogues.

00:01:49.560 --> 00:01:53.425
And we also need View child element from

00:01:53.425 --> 00:01:59.620
angular core to be able to properly interact with the modal dialogues from the HTTP,

00:01:59.620 --> 00:02:03.950
from the HTML on the rod type script file.

00:02:06.040 --> 00:02:09.950
Now let's set some variables in place.

00:02:09.950 --> 00:02:13.595
For the end user operation.

00:02:13.595 --> 00:02:18.830
For S1 will be a reference to the end-user model that will

00:02:18.830 --> 00:02:24.690
compute as part of this and user operation.

00:02:27.520 --> 00:02:33.245
And we also need some specific variables to define the user,

00:02:33.245 --> 00:02:35.255
such as the firstname,

00:02:35.255 --> 00:02:42.930
Stipe string, lastName, username.

00:02:45.160 --> 00:02:48.210
The password.

00:02:50.280 --> 00:02:53.750
H will be a number.

00:02:54.030 --> 00:02:59.515
And also the country set does string.

00:02:59.515 --> 00:03:05.150
Let's fix the h variable.

00:03:06.600 --> 00:03:10.915
H as a number.

00:03:10.915 --> 00:03:15.200
And country also as a string.

00:03:17.430 --> 00:03:20.600
Let's save the file.

00:03:25.650 --> 00:03:33.010
Will also add informative message that will be shown in the.

00:03:33.010 --> 00:03:38.689
Alerts section and a dialogue section.

00:03:39.360 --> 00:03:43.795
In case of any error or sore,

00:03:43.795 --> 00:03:47.030
maybe some informative messages.

00:03:47.250 --> 00:03:49.840
Now we need to set in place are

00:03:49.840 --> 00:03:55.975
clear data method that will be invoked each and every time we need to clear

00:03:55.975 --> 00:04:01.045
any existing statements from the HTML page to clean

00:04:01.045 --> 00:04:07.750
basically data in the UI to have empty fields to work with.

00:04:07.750 --> 00:04:15.075
So imagine that the new popup dialogue will be shown opened in the UI.

00:04:15.075 --> 00:04:19.790
When not to have empty data that we need to present,

00:04:19.790 --> 00:04:27.120
such as the user will be able to properly add their specific data into the dialogue.

00:04:28.510 --> 00:04:33.605
Now main message and add new user info message,

00:04:33.605 --> 00:04:40.890
and also all the fields and mark them with their default data.

00:04:47.500 --> 00:04:55.770
We should move forward and create a method called add new user of type void.

00:05:01.350 --> 00:05:07.150
And the first thing to check is to verify if the user

00:05:07.150 --> 00:05:14.705
in UI has basically set up any values for the first name,

00:05:14.705 --> 00:05:20.065
the last name, and the other fields,

00:05:20.065 --> 00:05:26.990
such as user name, password.

00:05:27.630 --> 00:05:36.685
So we're checking here if the length is 0 for any of these fields.

00:05:36.685 --> 00:05:40.260
Since if it's 0,

00:05:40.260 --> 00:05:44.600
it means that not all low fields that are required

00:05:44.600 --> 00:05:49.535
to be mandatory or properly computed in the DOI.

00:05:49.535 --> 00:05:57.809
So you need to inform the user using the annual user info message.

00:05:59.170 --> 00:06:08.400
Must go on the constants class and define a new variable here.

00:06:13.990 --> 00:06:18.484
Public static, mandatory fields,

00:06:18.484 --> 00:06:20.910
error message

00:06:33.220 --> 00:06:36.305
fields are required.

00:06:36.305 --> 00:06:42.510
But in fact, let's go with the mandatory fields are required.

00:06:45.490 --> 00:06:49.740
So let's go back to our type script file

00:06:50.590 --> 00:06:56.765
and use the constants class and a mandatory fields error message.

00:06:56.765 --> 00:07:01.565
And also we should not continue with the flow and just do already turned here.

00:07:01.565 --> 00:07:10.380
So the user will be informed that not all the mandatory fields were computed.

00:07:10.450 --> 00:07:13.800
And he needs to fix this.

00:07:15.700 --> 00:07:20.480
Now, if everything worked well,

00:07:20.480 --> 00:07:28.350
we need to basically compute the user object that will be sent to the server side.

00:07:28.570 --> 00:07:35.240
So the firstname will be computed from the this.name.

00:07:35.240 --> 00:07:38.880
Similar for the last name,

00:07:43.210 --> 00:07:49.020
the username, this, that username.

00:07:51.040 --> 00:07:53.630
The password, of course,

00:07:53.630 --> 00:07:59.645
will be encoded on the server side H,

00:07:59.645 --> 00:08:02.160
and we also need the country.

00:08:11.620 --> 00:08:15.875
Now since we have this user object in place,

00:08:15.875 --> 00:08:23.520
we need to use it and you basically send it to the user service and new user method.

00:08:23.620 --> 00:08:26.565
And those subscribe.

00:08:26.565 --> 00:08:29.710
And if everything worked well,

00:08:29.710 --> 00:08:35.755
and we were able to invoke the Spring Boot application and add a new user.

00:08:35.755 --> 00:08:38.230
Will first hide the modal in

00:08:38.230 --> 00:08:45.250
the HTML dialogue and

00:08:45.250 --> 00:08:51.890
add a descriptive or informative message to the user that the user has been added.

00:08:52.200 --> 00:08:59.810
Also, we need to update the existing table in the UI by calling find all user method.

00:09:03.870 --> 00:09:07.970
And in case of any errors.

00:09:09.970 --> 00:09:18.740
We'll use the add new user info message and set the error to it.

00:09:18.740 --> 00:09:24.630
Be shown in the UI for user to know what happened.

00:09:28.000 --> 00:09:31.350
Okay, looks good.

00:09:38.290 --> 00:09:42.140
Now let's create the HTML part.

00:09:42.140 --> 00:09:47.675
For the end user or specific business logic.

00:09:47.675 --> 00:09:51.960
This recall that we need to compute and the bootstrap

00:09:51.960 --> 00:10:01.420
dialogue for

00:10:01.420 --> 00:10:04.520
static common for our existing.

00:10:05.370 --> 00:10:08.720
Find all users.

00:10:09.660 --> 00:10:14.470
That table that we set in place already that retrieves

00:10:14.470 --> 00:10:20.005
all the users from the backend server that are present into the database.

00:10:20.005 --> 00:10:26.630
And now new comment or adding the new user.

00:10:27.360 --> 00:10:30.415
So this will be a modal.

00:10:30.415 --> 00:10:33.830
And the bootstrap specific mono.

00:10:35.490 --> 00:10:46.760
So we open the div NDP model and we'll need to use the hashtag and UserModel.

00:10:49.710 --> 00:10:54.110
Class should be modal fade left.

00:10:54.330 --> 00:10:59.395
And four tab index will use minus1.

00:10:59.395 --> 00:11:04.420
And as our role will use dialogue lifecycle

00:11:04.420 --> 00:11:11.900
that the czar specific MD bootstrapper references.

00:11:12.210 --> 00:11:17.690
So Style overflow, auto.

00:11:19.080 --> 00:11:24.890
Area labeled by n, use model.

00:11:30.870 --> 00:11:38.420
Area hidden will set to true.

00:11:39.690 --> 00:11:42.940
And now on the Open,

00:11:42.940 --> 00:11:52.765
the modal event will invoke the clear data that we set up in the type script file.

00:11:52.765 --> 00:11:55.629
So if you recall,

00:11:55.629 --> 00:12:03.810
the clear data will clear any data that was previously set in place.

00:12:06.610 --> 00:12:11.700
So this is a trick that I'm using here.

00:12:20.320 --> 00:12:27.360
Now we'll create a new div class modal dialog.

00:12:28.210 --> 00:12:30.290
And the role should be

00:12:30.290 --> 00:12:39.680
document div class modal content.

00:12:39.680 --> 00:12:44.010
So now we are building the content of our dialogue.

00:12:48.750 --> 00:12:59.180
As for the model header button in place.

00:13:00.870 --> 00:13:09.470
So button type, button of glass, close pore, right?

00:13:12.360 --> 00:13:16.190
A real labeled clothes.

00:13:19.950 --> 00:13:24.590
And on a click event for this bottom,

00:13:25.140 --> 00:13:30.950
where willow one to close this model.

00:13:30.950 --> 00:13:34.350
So we'll close the end-user model.

00:13:47.110 --> 00:13:52.235
We will use now span area hidden true,

00:13:52.235 --> 00:13:57.350
and will mark this with x.

00:13:57.350 --> 00:14:02.825
So when we press on the X button or far dialogue,

00:14:02.825 --> 00:14:05.735
this dialogue would close.

00:14:05.735 --> 00:14:10.050
Now will set in place the modal title.

00:14:12.300 --> 00:14:17.870
Id and the user model.

00:14:21.810 --> 00:14:25.330
And the descriptive message.

00:14:25.330 --> 00:14:28.360
Or add new user.

00:14:28.360 --> 00:14:33.590
Basically describe what this model is for.

00:14:46.740 --> 00:14:50.455
Let's move now to the next step.

00:14:50.455 --> 00:14:54.380
So for modal body,

00:14:57.930 --> 00:15:07.520
we weren't forced to set the informative message.

00:15:07.560 --> 00:15:11.770
So we're is in div class row alert,

00:15:11.770 --> 00:15:15.910
alert, primary role of Alert,

00:15:15.910 --> 00:15:21.880
and will only expose this div if we

00:15:21.880 --> 00:15:27.729
have any statements present on the end user info message.

00:15:27.729 --> 00:15:30.820
So for example, if we have an arrow over there,

00:15:30.820 --> 00:15:35.090
this div will be shown to the user.

00:15:38.590 --> 00:15:43.920
And let's expose it and user info message.

00:15:51.580 --> 00:16:01.355
So if you were to call this add new zoning for message is shown.

00:16:01.355 --> 00:16:08.640
For example, if there is or hasn't set data for all mandatory fields.

00:16:13.060 --> 00:16:19.230
Now let's create a new row.

00:16:19.390 --> 00:16:23.180
And basically it in two parts.

00:16:23.180 --> 00:16:28.050
We'll use div class called MDG4.

00:16:34.300 --> 00:16:36.770
And now let's set in place.

00:16:36.770 --> 00:16:41.270
So ND bootstrap tag for a badge.

00:16:41.270 --> 00:16:44.915
Just for some visual effects.

00:16:44.915 --> 00:16:48.600
Let's set the firstname.

00:17:01.570 --> 00:17:03.470
Now.

00:17:03.470 --> 00:17:09.050
The second part of our row div class called and the eight.

00:17:09.050 --> 00:17:16.145
And we'll set in place on input tag and the B input of type text.

00:17:16.145 --> 00:17:22.830
And for the 2-way binding will bind this to the first name field.

00:17:28.750 --> 00:17:38.075
Ok, class form control.

00:17:38.075 --> 00:17:41.150
And the values should be firstName.

00:17:41.150 --> 00:17:45.855
So whenever the user will update this field in the UI.

00:17:45.855 --> 00:17:55.580
This will also be shown actually this will also be marked as updated in type script file.

00:17:59.010 --> 00:18:02.960
Now will set in place a new row.

00:18:07.530 --> 00:18:17.660
Let's follow the same process for adding functionality to expose the last name.

00:18:18.210 --> 00:18:24.800
So the glass col md for each five.

00:18:25.560 --> 00:18:30.810
We will use the badge default true.

00:18:37.930 --> 00:18:45.120
And now the second part of the row div class or eight.

00:18:52.780 --> 00:18:59.760
So input and the input of type text.

00:19:00.550 --> 00:19:05.270
And for the 2-way binding will use

00:19:05.270 --> 00:19:13.450
the lastName field glass,

00:19:13.450 --> 00:19:19.729
of course, the Form Control and the value should match the lastname.

00:19:23.610 --> 00:19:26.570
Close this.

00:19:39.090 --> 00:19:41.410
Moving now to the third

00:19:41.410 --> 00:19:50.230
row div class

00:19:50.230 --> 00:19:54.595
called MDG4, H5.

00:19:54.595 --> 00:20:04.700
And they'd be badge default to will set in place the username.

00:20:09.990 --> 00:20:14.480
Now the second row,

00:20:18.870 --> 00:20:23.875
and put the B input type text.

00:20:23.875 --> 00:20:29.120
That two-way binding for the username field.

00:20:37.390 --> 00:20:40.654
A class form control.

00:20:40.654 --> 00:20:43.680
And a valid username

00:20:51.440 --> 00:21:00.870
will set in place a row for the password field H5.

00:21:00.910 --> 00:21:05.670
Ndp badge default to true.

00:21:06.130 --> 00:21:09.980
So you will see the same DB batch in the UI,

00:21:09.980 --> 00:21:16.710
how this exposes the our fields.

00:21:19.660 --> 00:21:24.710
Now for the div class called him the eight.

00:21:24.710 --> 00:21:31.265
We'll need to use input and the beam put type of password this time.

00:21:31.265 --> 00:21:35.940
Since we don't want this password to be exposed.

00:21:40.360 --> 00:21:51.350
For the NG model will use password plus one control,

00:21:51.350 --> 00:21:55.980
no value for password.

00:22:07.870 --> 00:22:14.220
Now I'll specific div for our h field

00:22:25.990 --> 00:22:37.230
K and if a badge age.

00:22:38.080 --> 00:22:45.030
And for the second part,

00:22:51.600 --> 00:22:55.435
Let's not forget the div.

00:22:55.435 --> 00:22:57.670
So coal.

00:22:57.670 --> 00:23:00.260
And the eighth.

00:23:01.740 --> 00:23:10.940
Let's copy paste this under the div section.

00:23:11.280 --> 00:23:19.130
And you model or the H field.

00:23:22.380 --> 00:23:24.460
So if you recall,

00:23:24.460 --> 00:23:28.955
we have the first name, last name, username,

00:23:28.955 --> 00:23:36.485
password, age, and we're now setting in place the last field country.

00:23:36.485 --> 00:23:41.030
So this fields match directly though,

00:23:41.030 --> 00:23:50.450
feels that that exposes an user in the spring Boot application.

00:23:50.450 --> 00:23:55.250
And you might ask about the id.

00:23:55.250 --> 00:23:59.930
So this ID field will be automatically generated from

00:23:59.930 --> 00:24:05.180
the GBA entity and

00:24:05.180 --> 00:24:11.060
our MYSQL relational database whenever we certain user into the database.

00:24:11.060 --> 00:24:17.820
So this is why we don't need an actual ID to store it here.

00:24:18.070 --> 00:24:23.585
What beside this, all the fields match directly

00:24:23.585 --> 00:24:30.869
on the server side on how a user is exposed.

00:24:31.510 --> 00:24:37.110
So we set also the contrary div.

00:24:41.440 --> 00:24:50.310
And now let's set in place the modal footer.

00:24:51.520 --> 00:24:57.455
So bottom type or bottom.

00:24:57.455 --> 00:25:00.845
We need to create two buttons here.

00:25:00.845 --> 00:25:05.450
So the fourth S1 will have color primary,

00:25:05.450 --> 00:25:12.020
and the class waves light and ADR label.

00:25:12.020 --> 00:25:15.030
We'll use the safe.

00:25:19.900 --> 00:25:23.400
And on the click event.

00:25:24.040 --> 00:25:33.210
This will invoke the add new user telescope method and DB ways effect.

00:25:37.800 --> 00:25:40.045
Okay?

00:25:40.045 --> 00:25:45.010
And we set the save method, the same statement.

00:25:45.010 --> 00:25:49.210
Sorry. Once again, this is

00:25:49.210 --> 00:25:56.275
the admin user method that will be invoked on the flick event for this button.

00:25:56.275 --> 00:25:59.810
And now for the second button.

00:26:02.220 --> 00:26:07.480
This will be associated to the council operation.

00:26:07.480 --> 00:26:12.470
In case we don't want to save the user anymore.

00:26:14.670 --> 00:26:18.140
Or button by button.

00:26:18.940 --> 00:26:22.680
Color should be secondary.

00:26:25.180 --> 00:26:31.260
Glass waves, light, airy, I'll label.

00:26:34.450 --> 00:26:37.710
Should they counsel?

00:26:40.930 --> 00:26:44.045
And for the click event,

00:26:44.045 --> 00:26:47.420
we just need to hide this ad news of

00:26:47.420 --> 00:26:55.700
modal end DBA waves effect

00:26:55.700 --> 00:27:02.340
and also set the text for this should be counseled.

00:27:08.040 --> 00:27:12.800
So now we should have everything in place.

00:27:14.790 --> 00:27:21.325
Now we need to go to our add new user card and basically

00:27:21.325 --> 00:27:28.010
expose this dialogue whenever we click on the Open button.

00:27:30.720 --> 00:27:36.790
Such as we need a way to invoke this dialogue.

00:27:36.790 --> 00:27:40.884
And you see that I was able to press on the open.

00:27:40.884 --> 00:27:45.520
And now let's add firstname,

00:27:45.520 --> 00:27:51.355
last name, a specific user name,

00:27:51.355 --> 00:27:56.455
or password that should be encrypted on the server side.

00:27:56.455 --> 00:27:58.960
And the country for USA.

00:27:58.960 --> 00:28:00.430
And we'll save it.

00:28:00.430 --> 00:28:04.390
You see the message user has been added.

00:28:04.390 --> 00:28:09.205
So the back-end spinning publication has been invoked.

00:28:09.205 --> 00:28:15.560
And you see the news are being added into the list of users.

00:28:22.830 --> 00:28:29.975
Well, it's also fix this on the other constants class since we forgot the vault,

00:28:29.975 --> 00:28:37.160
the typo far or fields.

00:28:37.160 --> 00:28:40.590
So string and string.

00:28:41.140 --> 00:28:45.030
And this should be also fixed.

00:28:48.400 --> 00:28:53.490
So add new user wards AS expected. Now.
