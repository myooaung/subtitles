WEBVTT
1
00:00:05.010 --> 00:00:09.520
We'll come back everyone in this lecture we're going to go over the exercise solutions.

2
00:00:09.570 --> 00:00:10.530
Let's get started.

3
00:00:10.530 --> 00:00:12.450
All right here we are at the exercise file.

4
00:00:12.480 --> 00:00:14.510
Let's go ahead and go through the solutions.

5
00:00:14.520 --> 00:00:18.330
Keep in mind I'm not actually going to be printing and running the script every time for every solution.

6
00:00:18.370 --> 00:00:19.210
Mission to show you them.

7
00:00:19.230 --> 00:00:24.070
And if you want to reference the solutions yourselves you can just open up the solutions that py file.

8
00:00:24.080 --> 00:00:28.790
Ok so here we have f flask actually gave you that one in the previous lecture.

9
00:00:28.790 --> 00:00:33.530
Basically if you're given the string S and you want to find F. It's the very first element in that string

10
00:00:33.530 --> 00:00:36.740
or character strings are usually the index at 0 for s.

11
00:00:36.740 --> 00:00:39.660
Are you using a count over 0 1 2 3.

12
00:00:39.890 --> 00:00:43.660
So that would be index theory for ask.

13
00:00:43.670 --> 00:00:46.240
That's going to be a Eskay at the very end.

14
00:00:46.400 --> 00:00:51.410
So what you can do is you can just grab the string starting the index position too and then Colan to

15
00:00:51.410 --> 00:00:54.920
go all the way to the end of the string for Alias.

16
00:00:54.930 --> 00:00:58.760
That one's going to be a little different because we actually need to define where we're stopping.

17
00:00:58.910 --> 00:01:04.220
So we're going to say s and then we're going to go starting in the index position 1 because that's the

18
00:01:04.280 --> 00:01:09.390
L are going to go up to and not including in the position for where the case is.

19
00:01:09.530 --> 00:01:12.220
And that leads us into the next one which is just for k.

20
00:01:12.260 --> 00:01:18.800
You just say either in solution 4 or you can also say negative 1 because it's the last one using indexing

21
00:01:18.800 --> 00:01:19.860
to reverse a string.

22
00:01:20.000 --> 00:01:24.890
We mentioned this in the lecture but it's just going to be colon colon negative one because it's a step

23
00:01:24.890 --> 00:01:28.400
size of negative one from the very beginning of the string to the very end.

24
00:01:29.540 --> 00:01:35.290
So that's problem one problem too was given this list resign hello to be goodbye.

25
00:01:35.630 --> 00:01:40.690
So the way we do this is you would say my list or L depending on how this was assigned.

26
00:01:41.060 --> 00:01:43.500
And then you would index out this list right here.

27
00:01:43.670 --> 00:01:46.190
So it's first going to be in exploration too.

28
00:01:46.370 --> 00:01:48.230
And that will return back this list.

29
00:01:48.230 --> 00:01:51.160
And so then this list and the Expedition 2 has Halo.

30
00:01:51.620 --> 00:01:56.440
So you would say to again and then you would sign it to be goodbye.

31
00:01:56.500 --> 00:02:03.320
And if you were to print this list again then you would see good by there instead of hello problem 3.

32
00:02:03.370 --> 00:02:08.280
So using indexing and keys I want you to grab Hello from the following dictionaries.

33
00:02:08.380 --> 00:02:10.690
So D-1 that one's actually pretty straightforward.

34
00:02:10.720 --> 00:02:14.880
You just say D1 and then say the simple key and that would be returned back.

35
00:02:14.890 --> 00:02:18.240
Hello for this one it's a little more complicated.

36
00:02:18.240 --> 00:02:24.810
Basically you have two keys in a row so you're going to say to grab a key one and then return back that

37
00:02:24.810 --> 00:02:26.990
inside dictionary and then you'll grab again.

38
00:02:27.060 --> 00:02:28.220
Keep K-2.

39
00:02:28.320 --> 00:02:30.160
And then that will grab Hello.

40
00:02:30.180 --> 00:02:31.520
Inside the inside dictionary.

41
00:02:31.740 --> 00:02:34.540
So kind of stacked key calls there.

42
00:02:34.650 --> 00:02:37.880
Then finally D-3 this is probably the most complex one.

43
00:02:38.280 --> 00:02:41.790
And there's a little trick to it at the end that sometimes beginners forget.

44
00:02:42.150 --> 00:02:43.270
So how would you do this.

45
00:02:43.290 --> 00:02:45.970
Well first you have to grab K-1.

46
00:02:45.990 --> 00:02:50.570
So if we grab K one that's going to return back this list.

47
00:02:50.570 --> 00:02:52.840
So I'm going to copy and paste this as we go along.

48
00:02:52.840 --> 00:02:54.830
So you can see the steps I'm taking here.

49
00:02:54.900 --> 00:02:59.080
So D-3 of K-1 returns back that list.

50
00:02:59.150 --> 00:03:00.340
So then what's the next step.

51
00:03:00.530 --> 00:03:05.360
Well the next step is to then grab the actual dictionary inside of this list.

52
00:03:05.360 --> 00:03:11.450
So this is the tricky part you have to realize they had to grab using index zero this dictionary because

53
00:03:11.450 --> 00:03:13.410
it's a single item in the list.

54
00:03:13.430 --> 00:03:15.520
So that would return this.

55
00:03:15.560 --> 00:03:19.400
And then the next step would be probably to grab this list right here.

56
00:03:19.400 --> 00:03:21.250
So then you have to say nest key.

57
00:03:21.590 --> 00:03:28.820
So then we're going to say D-3 K-1 string K-1 0.

58
00:03:29.090 --> 00:03:31.610
And then we'll passen nest.

59
00:03:32.060 --> 00:03:37.160
So once we do that we'll get back this list right here again kind of breaking this down step by step

60
00:03:37.160 --> 00:03:37.940
for you.

61
00:03:38.030 --> 00:03:41.900
And then once we have this list we have the second item in this list which is hello.

62
00:03:42.140 --> 00:03:44.000
So I going to grab that now.

63
00:03:44.180 --> 00:03:46.400
So it's going to be index solution 1.

64
00:03:46.460 --> 00:03:51.350
And when you grab that you'll get back this list with Hello.

65
00:03:51.350 --> 00:03:55.590
Now a lot of times beginners just stop their thing and they've grabbed the string hello while technically

66
00:03:55.590 --> 00:03:56.310
you haven't.

67
00:03:56.350 --> 00:03:58.920
Brab the list with the single string hello.

68
00:03:59.150 --> 00:04:04.940
If you really want to grab just the string you need to do one lessa of indexing which would be zero.

69
00:04:05.090 --> 00:04:07.540
And then that would grab this string.

70
00:04:07.760 --> 00:04:08.830
Hello here.

71
00:04:09.250 --> 00:04:09.720
OK.

72
00:04:09.890 --> 00:04:15.020
So that breaks down everything step by step if you want any kind of pause unfreezes screen so you can

73
00:04:15.020 --> 00:04:19.920
see how I broke this down step by step but this is essentially how you would go about it.

74
00:04:20.000 --> 00:04:23.390
And the last final answer is this kind of long line right here.

75
00:04:23.630 --> 00:04:24.210
OK.

76
00:04:24.350 --> 00:04:26.250
So that was problem three.

77
00:04:26.720 --> 00:04:31.180
Let's move on to Problem 4 which was to use a set to find the unique values in this list below.

78
00:04:31.370 --> 00:04:35.570
Basically we showed this in the lecture you just pasand the list into that set function and that will

79
00:04:35.570 --> 00:04:38.030
automatically find all the unique values for you.

80
00:04:38.030 --> 00:04:39.630
So that's all you had to do there.

81
00:04:39.890 --> 00:04:40.600
Problem five.

82
00:04:40.610 --> 00:04:41.750
You're given two variables.

83
00:04:41.780 --> 00:04:46.880
Age for name is Michael Sammy and I want you to print out this string of string formatting.

84
00:04:46.940 --> 00:04:52.370
So the way we can do that is two methods one using the dot format method call and another using f string

85
00:04:52.370 --> 00:04:53.180
literals.

86
00:04:53.180 --> 00:04:54.930
So let me show you both of them.

87
00:04:55.130 --> 00:04:57.330
One way would just be using format.

88
00:04:57.380 --> 00:05:06.650
So I could say hello my dog's name is and then I have curly braces here and he is curly braces years

89
00:05:06.650 --> 00:05:07.330
old.

90
00:05:07.610 --> 00:05:12.590
And then I would have to say that format and I would pass in those actual values are those really those

91
00:05:12.590 --> 00:05:14.720
variable names age and name.

92
00:05:14.720 --> 00:05:17.260
Let me zoom out a little bit so we can see the whole thing.

93
00:05:17.270 --> 00:05:20.190
So this is how you would use it with the DOT format method.

94
00:05:20.240 --> 00:05:22.740
Do you want to use string literals instead.

95
00:05:22.790 --> 00:05:29.390
It's a very similar process we'll say prints F and then set up our string and we're going to have the

96
00:05:29.390 --> 00:05:31.570
exact same phrasing here.

97
00:05:31.640 --> 00:05:37.220
So we'll just say copy and paste that in here except now instead of saying what format we're actually

98
00:05:37.220 --> 00:05:43.130
going to directly insert those variable names we'll say age and then name.

99
00:05:43.210 --> 00:05:43.690
OK.

100
00:05:43.820 --> 00:05:47.150
So those are the two different methods you could have done this remember this a string literal.

101
00:05:47.210 --> 00:05:50.100
That's only going to work in Python 3.6.

102
00:05:50.100 --> 00:05:50.470
All right.

103
00:05:50.540 --> 00:05:52.940
If you have any questions feel free to post the Q&amp;A forums.

104
00:05:53.000 --> 00:05:54.430
Hopefully those are pretty straightforward.

105
00:05:54.560 --> 00:05:56.840
There were kind of some tricks here especially this one problem.

106
00:05:56.860 --> 00:06:00.720
Three and kind of the ending of problem two here.

107
00:06:00.920 --> 00:06:03.440
But if you have any questions feel free to post to any forums.

108
00:06:03.440 --> 00:06:06.010
We'll see you at the next lecture or we begin to discuss control.
