1
00:00:00,300 --> 00:00:04,070
In this lesson we're going to create our own word cloud.

2
00:00:04,200 --> 00:00:11,430
Also I'll show you how to get hold of entire novels through the NL T.K. resources.

3
00:00:11,440 --> 00:00:19,780
That's at a quick little section heading here with a markdown cell that reads creating a word cloud.

4
00:00:19,830 --> 00:00:26,250
Now whenever you're using an unknown package or a new package that you haven't seen before it's always

5
00:00:26,250 --> 00:00:30,930
a good idea to pull up the documentation of this package.

6
00:00:30,930 --> 00:00:37,650
In our case the package that we're going to be using is called word cloud and it was originally made

7
00:00:37,650 --> 00:00:39,550
by a chap called Andreas Muller.

8
00:00:39,690 --> 00:00:47,520
But since then he's had approximately 33 people contribute and improve and add their work to make this

9
00:00:47,520 --> 00:00:49,110
package better.

10
00:00:49,110 --> 00:00:54,460
As you can see the entire code base is up on github for anybody to look at.

11
00:00:54,660 --> 00:00:58,000
And there's some basic instructions here as well.

12
00:00:58,170 --> 00:01:05,850
But the more detailed API documentation can be found here on this Web site you can see a bit more information

13
00:01:05,850 --> 00:01:09,880
on how to use the word cloud as well as some more examples.

14
00:01:09,960 --> 00:01:13,650
I've added the links to both these sites into the lesson resources.

15
00:01:13,740 --> 00:01:18,950
So without further ado let's get started with a basic example.

16
00:01:19,020 --> 00:01:24,300
Now having downloaded and installed the package in the previous lesson it's time to add it to our notebook

17
00:01:24,390 --> 00:01:25,350
imports.

18
00:01:25,350 --> 00:01:38,080
So here we can say from word cloud import word cloud lets it shift enter and scroll all the way down.

19
00:01:38,090 --> 00:01:42,600
Now we're gonna be using that example email again to generate our first word cloud.

20
00:01:42,680 --> 00:01:52,510
The way to do it is to use Word Cloud parentheses dot and then the Generate method parentheses and then

21
00:01:52,510 --> 00:01:57,800
we just have to supply the piece of text that we'd like to use to generate the word cloud from.

22
00:01:57,880 --> 00:02:05,950
So in our case it was the email body I want to actually save this in a variable called word cloud.

23
00:02:05,950 --> 00:02:07,000
So it's a word on a scale.

24
00:02:07,000 --> 00:02:13,110
Cloud is equal to work hard parentheses don't generate parentheses email body.

25
00:02:13,360 --> 00:02:14,790
This is step one.

26
00:02:14,920 --> 00:02:23,070
Now Matt plot lib is going to come into play so I plot lib was stored inside a variable called BLT.

27
00:02:23,470 --> 00:02:31,990
And here we're going to use the I am show method I am show parentheses and we can supply.

28
00:02:32,040 --> 00:02:39,600
Well you guessed that going to supply our Word Cloud to I am show and let's use peyote don't show and

29
00:02:39,600 --> 00:02:45,990
see what we get we get something like this how I don't know about you but I can see we can make some

30
00:02:45,990 --> 00:02:52,340
improvements on this right away the quality isn't that great the letters look a little bit jagged and

31
00:02:52,350 --> 00:02:59,580
we've got these axes on both sides on the X and the Y these axes are really easy to remove actually

32
00:03:00,260 --> 00:03:09,450
if we use peel T don't axis parentheses and then single quotes with the string off and head shift into

33
00:03:09,840 --> 00:03:16,690
the axes disappear but we still kind of have these jagged edges on some of these letters it doesn't

34
00:03:16,690 --> 00:03:18,450
look that clean.

35
00:03:18,610 --> 00:03:25,540
So what we can do is come up to the I am sure method put in a comma after word cloud and add an additional

36
00:03:25,930 --> 00:03:27,380
argument here.

37
00:03:27,520 --> 00:03:33,620
This one's kind of be called interpolation and we can set that equal to some sort of value.

38
00:03:33,640 --> 00:03:37,630
Right at first we have a default value for interpolation which was none.

39
00:03:37,690 --> 00:03:43,590
There was no interpolation going on but we can do some interpolation to smooth out these edges.

40
00:03:43,750 --> 00:03:51,610
I'm going to go with bi linear and now we have a much cleaner picture of course the only reason I know

41
00:03:51,640 --> 00:03:59,110
to set interpolation to buy linear is because I've had a look at the quick documentation here and I

42
00:03:59,110 --> 00:04:05,190
scrolled down to the interpolation parameter and I've tried out a couple of these.

43
00:04:05,260 --> 00:04:08,770
So there is quite a big number to choose from.

44
00:04:08,890 --> 00:04:16,120
The default is none but I did find that I could get some improvement in the look of my word cloud by

45
00:04:16,120 --> 00:04:22,870
playing around with this and I found that by linear works well for me now I think as a minimalist aesthetic

46
00:04:22,870 --> 00:04:25,730
example This works really really well.

47
00:04:26,050 --> 00:04:30,980
And you'll find something very very similar on the documentation page actually.

48
00:04:31,000 --> 00:04:32,770
So let's take this to the next level.

49
00:04:33,130 --> 00:04:40,940
Let's make this a little bit more interesting to to make our next word clouds a little bit more interesting.

50
00:04:40,980 --> 00:04:49,210
I want to show you how to download entire novel from the natural language tool kit and multi K actually

51
00:04:49,210 --> 00:04:55,680
has a whole bunch of resources that we can use if we go back up to where we were downloading our token

52
00:04:55,680 --> 00:05:01,750
either and our stop words you'll recall both of these were downloaded to the NL T.K. underscored data

53
00:05:01,750 --> 00:05:09,310
folder on our harddrive Hall we need to do is add two additional lines of code here namely and ultra

54
00:05:09,310 --> 00:05:23,100
K Dot download parentheses single quotes Gutenberg and and multi K Dot download parentheses single quotes

55
00:05:24,360 --> 00:05:32,060
Shakespeare if a hit shift enter on the cell it will download some additional core Pora for us that

56
00:05:32,060 --> 00:05:40,980
we can make use of in our word cloud check it out so it got the zip files and it unzipped them.

57
00:05:41,280 --> 00:05:44,150
And here they are in my corporate folder.

58
00:05:44,310 --> 00:05:52,650
I've got Shakespeare right here with a number of his plays including Hamlet Julius Caesar Macbeth and

59
00:05:52,650 --> 00:05:57,530
so on I think Ha and J stands for Romeo and Juliet.

60
00:05:57,660 --> 00:06:05,360
Another classic and Gutenberg has also a whole bunch of books so you can read these for free if you

61
00:06:05,360 --> 00:06:06,290
like.

62
00:06:06,290 --> 00:06:11,050
This one here looks like Alice in Wonderland by Lewis Carroll.

63
00:06:11,060 --> 00:06:11,620
There we go.

64
00:06:11,630 --> 00:06:19,810
Opening them up in my atom text editor can see the whole text of the entire novel nicely formatted the

65
00:06:19,810 --> 00:06:25,630
one we're gonna use is Moby Dick by Herman Melville.

66
00:06:25,630 --> 00:06:30,820
If you actually wanted to read this book you have to scroll down quite a bit past all the acknowledgements

67
00:06:30,970 --> 00:06:38,520
and praises and so on to uh eventually chapter one which is on line 500 with the famous opening sentences

68
00:06:39,430 --> 00:06:41,400
but okay so far so good.

69
00:06:41,410 --> 00:06:45,600
Now we've got access to the text of a whole bunch of novels.

70
00:06:45,670 --> 00:06:51,800
Now it's up to us to put these into a word cloud somewhere insert a few more cells at the bottom of

71
00:06:51,800 --> 00:06:58,730
our notebook and I'm going to get a hold of one of these works the way I'm going to get hold of one

72
00:06:58,730 --> 00:07:08,530
of these is like this I won't have to go and ulti K Dot corpus dot Gutenberg

73
00:07:11,150 --> 00:07:13,390
dot woods.

74
00:07:13,460 --> 00:07:21,590
So in this case I'm getting a hold of one of the text files in the Gutenberg folder the one I'm interested

75
00:07:21,590 --> 00:07:29,240
in it's gonna be Moby Dick so I'll have single quotes in the parentheses and I'll type out the exact

76
00:07:29,240 --> 00:07:38,210
spelling of this text file so it's Melville hyphen Moby underscore Dick dot t x t.

77
00:07:38,450 --> 00:07:45,200
I'm including the file extension the string that I'm passing into my words method here has to match

78
00:07:45,350 --> 00:07:54,230
this file name exactly now I'm going to create a variable called example on a school corpus and that's

79
00:07:54,230 --> 00:07:56,790
where I want to store my Moby Dick novel.

80
00:07:57,020 --> 00:08:03,020
If you're wondering how many words are in this entire novel by the way you can pull it up with the built

81
00:08:03,020 --> 00:08:06,080
in length function alien parentheses.

82
00:08:06,080 --> 00:08:08,540
Example Corpus.

83
00:08:08,540 --> 00:08:11,190
Let's see how much work was put into Moby Dick.

84
00:08:11,210 --> 00:08:17,020
It's not war and peace but two hundred sixty thousand words it's still no slouch.

85
00:08:17,130 --> 00:08:23,300
Now another thing that might be quite interesting actually is to see what type of variable or type of

86
00:08:23,300 --> 00:08:25,320
object we're dealing with.

87
00:08:25,340 --> 00:08:32,760
So in this case our example Corpus is something called a stream backed corpus view.

88
00:08:32,780 --> 00:08:37,610
The reason I'm drawing attention to this is because you might be forgiven for thinking that what you're

89
00:08:37,610 --> 00:08:44,000
getting back here is just a big long string but you're actually dealing with a different kind of object

90
00:08:44,000 --> 00:08:44,990
here.

91
00:08:45,050 --> 00:08:49,190
This thing that we're working with actually has a whole bunch of tokens.

92
00:08:49,400 --> 00:08:55,160
If you wanted to get the list of words you have to kind of join them together.

93
00:08:55,160 --> 00:08:57,330
You have to join all the tokens together.

94
00:08:57,350 --> 00:08:59,360
Let me show you what I mean.

95
00:08:59,660 --> 00:09:06,170
The first thing I'll do is I'm going to create a list called it would on a list and set that equal to

96
00:09:07,100 --> 00:09:08,750
square brackets.

97
00:09:08,750 --> 00:09:17,360
And then inside these square brackets I want to use python's list comprehension to join all the tokens

98
00:09:17,360 --> 00:09:18,150
together.

99
00:09:18,290 --> 00:09:27,470
So I'll be two single quotes then dot join parentheses word.

100
00:09:27,530 --> 00:09:38,130
And yeah you guessed that there's a loop coming for word in example corpus this here will join all of

101
00:09:38,130 --> 00:09:40,690
her words together.

102
00:09:40,690 --> 00:09:49,370
So if you're wondering what this looked like before example corpus shift into looks like so and the

103
00:09:49,370 --> 00:09:55,550
word list that I'm getting after running my list comprehension and joining all the words together will

104
00:09:55,550 --> 00:10:06,480
look like so very similar looking I know but remember we're going from tokens to a list of words which

105
00:10:06,480 --> 00:10:10,530
we can then use to join together into a single string.

106
00:10:10,570 --> 00:10:19,000
So if I say novel on a as on a school string as equal to and in single quotes with the space inside

107
00:10:20,100 --> 00:10:30,120
dot join parentheses would list this year we'll actually take all the words out of the list and put

108
00:10:30,120 --> 00:10:34,670
them into a single string so novel a string will look like.

109
00:10:34,670 --> 00:10:40,620
So now if you're wondering why we're going through this trouble it's because we have to do some pre

110
00:10:40,620 --> 00:10:44,160
processing to feed our text into a word cloud.

111
00:10:44,220 --> 00:10:46,400
Remember this generate function him.

112
00:10:46,530 --> 00:10:53,250
It's kind of expecting a very simple string to build the word cloud from we can't give it a corpus.

113
00:10:53,250 --> 00:10:56,490
Straight out of the NL K toolkit.

114
00:10:56,910 --> 00:11:05,160
And I also don't want to give it a list of tokens or a list of individual words I'm planning to give

115
00:11:05,160 --> 00:11:10,060
my word cloud a simple string so why don't we try it out for now.

116
00:11:10,210 --> 00:11:19,660
I want a copy of this come down here pasted in instead of having email body inside my generate method

117
00:11:20,140 --> 00:11:29,550
I want to have novel as string and see what we get fantastic So that's working we've successfully extracted

118
00:11:29,940 --> 00:11:38,190
all the words from a corpus in the penalty K resources and fed them into our Word Cloud package.

119
00:11:38,190 --> 00:11:42,560
Now all we have to do is make this thing look a bit better and style it.

120
00:11:42,810 --> 00:11:47,280
I'm planning to arrange all these words into the shape of a whale.

121
00:11:47,310 --> 00:11:48,450
Let's see if we can do this.
