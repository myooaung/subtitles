WEBVTT
1
00:00:00.550 --> 00:00:01.110
All right.

2
00:00:01.110 --> 00:00:04.940
So in this lesson we're gonna do a couple of things.

3
00:00:05.130 --> 00:00:12.210
We're gonna be plotting our gradient descent path on our 3D surface so we can see our algorithm slowly

4
00:00:12.210 --> 00:00:15.420
working its way down to the bottom of the bowl.

5
00:00:15.540 --> 00:00:23.310
But this is also a really good opportunity to learn a little bit more about num pies and dimensional

6
00:00:23.400 --> 00:00:30.000
arrays because these things are incredibly powerful and we're gonna be taking a look at how can append

7
00:00:30.000 --> 00:00:36.330
values to arrays how we can concatenate arrays how we can slice arrays and how we can select particular

8
00:00:36.330 --> 00:00:43.680
columns of an array Let's commemorate the upcoming topics with a new section heading.

9
00:00:44.690 --> 00:00:51.620
So when to change the cell to markdown and then I'm going to put two pound symbols here and then I'll

10
00:00:51.620 --> 00:01:07.240
write graphing 3D gradient descent and advanced num pi arrays and I'll hit shift into.

11
00:01:07.240 --> 00:01:12.710
I'm also going to add a few more cells to the bottom so that way I'm working more in the center of the

12
00:01:12.710 --> 00:01:19.640
screen now to do our plotting what we're going to do is we're gonna scroll a little bit up and we're

13
00:01:19.640 --> 00:01:28.290
going to copy this cell here copy the cell and I'm going to paste this cell here.

14
00:01:28.740 --> 00:01:32.100
And the reason I'm doing this is so that I can add some code to it.

15
00:01:32.250 --> 00:01:38.310
I want to modify the cells so we have a record of what we've been doing but this is also the cell which

16
00:01:38.370 --> 00:01:42.880
is gonna contain the code that tracks the progress of our gradient descent.

17
00:01:42.900 --> 00:01:49.840
So I'm going to add some code to this now as before the values that we're gonna be tracking are how

18
00:01:49.840 --> 00:01:56.550
are our parameters change as the loop runs and the police are going to store all these values that we're

19
00:01:56.550 --> 00:02:04.650
gonna be tracking who's going to be a variable that I'm going to call values on the score array and

20
00:02:04.650 --> 00:02:11.090
the very first value this values array is going to have is going to consist of our initial guests our

21
00:02:11.670 --> 00:02:13.510
parameters.

22
00:02:13.650 --> 00:02:15.450
So leaving the code like this.

23
00:02:15.540 --> 00:02:20.490
Let's take a really quick look at the shape of our values array.

24
00:02:20.760 --> 00:02:29.730
So I'm going to print the values underscore array dot shape and see what I get.

25
00:02:29.850 --> 00:02:35.340
The result is gonna be the very first line that's printed below the cell so I can see that this is a

26
00:02:35.340 --> 00:02:42.870
tuple and my array just consists of two elements and that's no surprise those elements are gonna be

27
00:02:42.990 --> 00:02:46.630
one point eight and one point zero.

28
00:02:46.920 --> 00:02:53.190
And that's all this shape attribute is showing us now the thing is I can transform this array if I want

29
00:02:53.190 --> 00:03:02.100
to instead of having a one dimensional array with two elements I can have a two dimensional array with

30
00:03:02.130 --> 00:03:05.350
one element each instead.

31
00:03:05.490 --> 00:03:08.380
But why would I want two dimensions.

32
00:03:08.400 --> 00:03:16.230
Well what I want to do is I want to keep all the x values in one dimension and then I want to keep all

33
00:03:16.230 --> 00:03:20.520
the y values in the second dimension.

34
00:03:20.520 --> 00:03:28.290
So what I want to do is I want to transform my array into a new shape so handily there is something

35
00:03:28.290 --> 00:03:33.240
called a reshape method which takes two inputs.

36
00:03:33.240 --> 00:03:39.080
One is the number of rows and the other is the number of columns.

37
00:03:39.090 --> 00:03:44.250
So Rosa first so it's gonna be one comma two.

38
00:03:44.460 --> 00:03:48.190
Those are gonna be the arguments to the reshape method.

39
00:03:48.190 --> 00:03:55.530
Now if I rerun the cell have a look at the output below the cell to see how many rows and how many columns

40
00:03:55.830 --> 00:03:57.460
my array has now.

41
00:03:58.380 --> 00:04:06.570
So you should see this updated to 1 comma 2s one wrote two columns I now have a two dimensional array

42
00:04:07.110 --> 00:04:13.560
my x value is gonna be in my first dimension and my y value is going to be in my second dimension.

43
00:04:14.700 --> 00:04:15.270
Okay yeah.

44
00:04:15.300 --> 00:04:20.740
So you might say yeah Phillip great preamble but where are you going with this.

45
00:04:20.740 --> 00:04:27.750
And what I would say to that is I'm setting the scene for the code I'm going to add to my for loop right

46
00:04:27.750 --> 00:04:28.040
here.

47
00:04:28.710 --> 00:04:36.540
But before I do that and move on to the code inside the gradient descent let me add a new cell below

48
00:04:36.540 --> 00:04:44.680
this one and just go through a few methods and a few techniques for working with multi-dimensional arrays.

49
00:04:44.790 --> 00:04:54.940
So I'm going to add a little comment here and recall this advanced num pi array practice.

50
00:04:55.650 --> 00:05:00.000
And the first thing I want to do of course is create a dummy array.

51
00:05:00.000 --> 00:05:01.190
This array is going to have a name.

52
00:05:01.220 --> 00:05:08.850
It's going to be called Cook and it's going to be equal to N Piedmont arrays or creating an array parentheses.

53
00:05:08.850 --> 00:05:13.440
And then I want this array to have one row and two columns.

54
00:05:13.440 --> 00:05:21.510
So I'm going to have one square bracket and then a second square bracket and inside I'm going to put

55
00:05:21.600 --> 00:05:22.230
a string.

56
00:05:22.230 --> 00:05:32.020
I want to see Captain and then comma and then then we'll have another string and that's gonna read guitar.

57
00:05:32.130 --> 00:05:37.230
So two strings surrounded by two square brackets.

58
00:05:37.230 --> 00:05:41.140
So just to verify that we indeed have a two dimensional array.

59
00:05:41.280 --> 00:05:51.180
Let's print out Kirk don't shape below the cell and had shift into there we see that we need we have

60
00:05:51.240 --> 00:05:56.830
one row and two columns by using this notation here.

61
00:05:56.880 --> 00:05:57.380
All right.

62
00:05:57.390 --> 00:06:04.230
So upwards and onwards this time we're gonna create a two by two array.

63
00:06:04.230 --> 00:06:07.640
So this is gonna be two rows two columns.

64
00:06:07.830 --> 00:06:18.640
And I want to call this array H S under school band and we've said it's equal to and p dot array parentheses.

65
00:06:19.140 --> 00:06:24.060
And then I'm going to add two square brackets again and inside the second square bracket I'm going to

66
00:06:24.060 --> 00:06:29.760
add a string and call it black space fault.

67
00:06:29.880 --> 00:06:36.740
And then after the string and when I had a comma and then another string and C and then after that first

68
00:06:36.750 --> 00:06:44.040
closing square bracket I mean I add another comma and then I'm going to open another square bracket.

69
00:06:44.040 --> 00:06:53.600
Now the string Quest Love comma and then the string drums and then you'll have two square brackets at

70
00:06:53.600 --> 00:06:56.250
the end and the parentheses.

71
00:06:56.300 --> 00:07:07.420
So this is our second array and let's print out the shape print H.S. on a school band don't shape and

72
00:07:07.470 --> 00:07:14.110
here we can see that indeed this array is two by two two rows two columns.

73
00:07:14.130 --> 00:07:20.530
Now when working with multi-dimensional arrays like this let me ask your question.

74
00:07:20.880 --> 00:07:30.020
How do you think we would go about selecting a particular item in the array so previously we just used

75
00:07:30.110 --> 00:07:34.870
the square bracket notation and then we supplied an index.

76
00:07:34.880 --> 00:07:38.270
Let's see what happens when we do that on a two dimensional array.

77
00:07:38.300 --> 00:07:46.040
So I say print and I'll just put down in the string the code I'm going to add after the string.

78
00:07:46.050 --> 00:07:52.230
So when I say H.S. on a school band square bracket zero.

79
00:07:52.510 --> 00:08:00.540
And then after the string of comma and then put the actual Python code here H.S. band square bracket

80
00:08:00.780 --> 00:08:09.300
0 might shift and here so we can see here that if I use the very very same approach with a two dimensional

81
00:08:09.300 --> 00:08:15.840
array for selecting a particular item as with a one dimensional array I don't get back one item.

82
00:08:15.960 --> 00:08:26.160
Instead I'm getting back an entire row I'm getting back all the elements in that first row but the thing

83
00:08:26.160 --> 00:08:27.810
is that kind of makes sense right.

84
00:08:27.810 --> 00:08:31.760
We have two dimensions so we shouldn't be supplying one index.

85
00:08:31.800 --> 00:08:35.680
We should be supplying two indices.

86
00:08:35.760 --> 00:08:36.900
How do we do that.

87
00:08:36.930 --> 00:08:38.820
Let me just copy this line of Python code here.

88
00:08:40.790 --> 00:08:42.220
And a print statement.

89
00:08:42.230 --> 00:08:44.060
Paste the print statement below.

90
00:08:44.510 --> 00:08:51.010
And then instead of having just hate this underscore band square brackets zero.

91
00:08:51.230 --> 00:08:57.540
I'm going to add another pair of square brackets here and between those I'm going to put the value 1

92
00:08:58.780 --> 00:09:06.140
and add that to my string as well so that we're consistent and I'm going to hit shift enter and what

93
00:09:06.140 --> 00:09:14.150
you should see is that in this case we're selecting one particular element we're selecting the first

94
00:09:14.150 --> 00:09:18.500
row and then the first column in that row.

95
00:09:18.500 --> 00:09:25.790
So we're honing in on the string and see if you have trouble seeing this in your print statements then

96
00:09:26.150 --> 00:09:33.620
you can put a few spaces here and a semicolon might make it a little easier and then you'll have a nice

97
00:09:33.620 --> 00:09:41.000
separation between the the string and the value that you're getting back with your python code.

98
00:09:41.010 --> 00:09:41.290
All right.

99
00:09:41.290 --> 00:09:46.460
So this was a really one difference between working with a one dimensional array and a two dimensional

100
00:09:46.460 --> 00:09:47.110
array.

101
00:09:47.420 --> 00:09:48.500
Now has a challenge.

102
00:09:48.500 --> 00:09:55.460
Can you modify this print statement to select the word Quest Love and have that printed out right here

103
00:09:55.460 --> 00:09:57.740
what says M.C. currently.

104
00:09:57.740 --> 00:10:04.490
I'll give you a few seconds to pause the video and give this a shot so I hope you had a chance to solve

105
00:10:04.490 --> 00:10:05.580
this quest.

106
00:10:05.590 --> 00:10:08.060
Love is in the second row.

107
00:10:08.060 --> 00:10:09.260
So we start counting and zero.

108
00:10:09.260 --> 00:10:16.120
Second row is at index 1 and it is the first item in the second row.

109
00:10:16.130 --> 00:10:17.240
So first column.

110
00:10:17.240 --> 00:10:20.680
So this would be column zero.

111
00:10:20.720 --> 00:10:24.510
Let me shift to prove to you that this is indeed the case.

112
00:10:24.620 --> 00:10:25.260
And there we go.

113
00:10:25.310 --> 00:10:28.370
We see Quest Love printed out below.

114
00:10:28.370 --> 00:10:32.010
Now let's create another array but throw a different way.

115
00:10:32.060 --> 00:10:33.800
I'm going to call this array.

116
00:10:33.800 --> 00:10:42.750
The underscore roots I want to set it equal to end p dot append.

117
00:10:42.920 --> 00:10:46.930
So I'm not going to write and p dot arraignment or write and put out append.

118
00:10:47.120 --> 00:10:53.690
I'm gonna open the parentheses and inside these parentheses I must supply three arguments three inputs

119
00:10:54.170 --> 00:11:02.360
the first argument is gonna be the array I want to append items to this is gonna be a R R equals H S

120
00:11:02.480 --> 00:11:10.180
on a score banned comma and supply my second argument and these are gonna be the values so when I write

121
00:11:10.640 --> 00:11:19.030
values equals Kirk and then I supply the third argument and this is going to be the axis axis is gonna

122
00:11:19.040 --> 00:11:28.420
be equal to zero and below all this I went out of print statements so say print the underscore roots.

123
00:11:28.580 --> 00:11:33.710
Now before I hit shift enter to make sure my variable names are the same.

124
00:11:33.710 --> 00:11:34.250
So.

125
00:11:34.340 --> 00:11:44.570
So this is gonna be the roots is equal to N.P. dot append a R R equals H S ON A got banned comma values

126
00:11:44.600 --> 00:11:52.550
equals Kirk comma access equals zero and then I am indeed printing this variable here printing the roots.

127
00:11:52.570 --> 00:11:59.390
Now let me shift and as you can see what this looks like now what we've got is that below the cell there

128
00:11:59.390 --> 00:12:02.480
are six elements being printed out.

129
00:12:02.560 --> 00:12:11.170
We've got the four elements from HS band and we've appended two extra elements namely captain and guitar

130
00:12:11.590 --> 00:12:13.330
to these four elements.

131
00:12:13.450 --> 00:12:18.220
So our array called The Roots is actually three by two.

132
00:12:18.220 --> 00:12:20.370
It's a three by two array.

133
00:12:20.440 --> 00:12:25.000
Now let's take a look at this append method the append method takes three arguments.

134
00:12:25.000 --> 00:12:30.510
The first one is while the the element where the items are going to be appended to.

135
00:12:30.800 --> 00:12:38.310
And the second argument here is our array which was appended to h s underscore band and then it got

136
00:12:38.320 --> 00:12:39.590
this third argument here.

137
00:12:39.630 --> 00:12:47.940
Axis axis equals zero and the first time I saw this I thought man this is a really confusing word but

138
00:12:47.960 --> 00:12:56.490
it's actually pretty simple access basically means should we add our values as a row.

139
00:12:56.810 --> 00:13:00.360
Or should we add them as a column.

140
00:13:00.390 --> 00:13:03.270
So what we've done is we said access equals zero.

141
00:13:03.510 --> 00:13:10.980
And that means that our values inside Kirk are added as a row on to are two by two arrays are two by

142
00:13:10.980 --> 00:13:14.680
two array became a three by two array.

143
00:13:14.880 --> 00:13:23.170
If access instead was equal to one then we would be trying to add our new values as a column.

144
00:13:23.170 --> 00:13:30.270
But you have to be careful with these axes if you try to change this to one and press shift enter and

145
00:13:30.320 --> 00:13:36.960
actually won't work because Kirk is actually a 1 by 2 array and not a 2 by one array.

146
00:13:37.140 --> 00:13:44.220
So you have to be careful because your axes have to match you can't add up or append items to arrays

147
00:13:44.550 --> 00:13:47.700
where the dimensions don't match.

148
00:13:47.700 --> 00:13:56.780
Kirk has one row two columns and you can't add a one road two columns as columns to a two by two.

149
00:13:57.030 --> 00:14:04.690
If you actually wanted to do that you'd have to reshape the Kirk array to be two by one.

150
00:14:04.710 --> 00:14:06.530
This is the only way it would work.

151
00:14:06.750 --> 00:14:14.790
In this case you would indeed get a two by three matrix a two by three array.

152
00:14:14.970 --> 00:14:22.620
So I hope this makes sense if you're appending stuff to an existing array then the shapes of the array

153
00:14:22.650 --> 00:14:25.310
have to be compatible.

154
00:14:25.380 --> 00:14:30.280
So in this case what I actually want to do is I want to add rows on to my existing array so messy ax

155
00:14:30.300 --> 00:14:31.990
is equal to zero.

156
00:14:32.100 --> 00:14:35.390
And the way I've made these arrays the rows already match.

157
00:14:35.490 --> 00:14:36.810
So my head shift enter again.

158
00:14:36.890 --> 00:14:39.500
So you refresh this and you can see indeed.

159
00:14:39.520 --> 00:14:45.090
Okay I've got an artist and I've got a role in the band and here's another artist and here's another

160
00:14:45.090 --> 00:14:45.960
role in the band.

161
00:14:46.590 --> 00:14:54.010
And so on now I'm not gonna make you add all the band members of the roots individually that would be

162
00:14:54.460 --> 00:15:02.260
very very time consuming but um let's just pretend this band has three members for now.

163
00:15:02.260 --> 00:15:09.960
And suppose that we want to select all the band members just by their nicknames.

164
00:15:09.970 --> 00:15:16.680
So we want to just take an entire column from this array.

165
00:15:16.730 --> 00:15:18.390
How would we do that.

166
00:15:18.440 --> 00:15:26.180
And the answer is that this is actually really really really easy to do with some special Python notation

167
00:15:26.330 --> 00:15:29.170
for slicing arrays.

168
00:15:29.180 --> 00:15:29.950
Let me show you.

169
00:15:30.080 --> 00:15:40.990
If I print out uh add a string here printing nicknames dot dot dot comma and here's how we slice our

170
00:15:40.990 --> 00:15:41.700
array.

171
00:15:41.710 --> 00:15:44.680
Here's how we only print out the first column.

172
00:15:45.090 --> 00:15:52.470
We're gonna say the underscore roots square brackets when it's applied to values.

173
00:15:52.470 --> 00:16:02.460
The first one is gonna be a column and I'm going to have a comma and then we're to have a zero.

174
00:16:02.730 --> 00:16:09.030
So what we're seeing here is take all the roads so a colon is the shorthand notation here for selecting

175
00:16:09.210 --> 00:16:10.260
all the roads.

176
00:16:10.260 --> 00:16:17.670
All the values in the rows and that second argument here that zero refers to the first column.

177
00:16:17.730 --> 00:16:20.870
Let me hit shift and to show you what I mean.

178
00:16:21.090 --> 00:16:28.620
I'm going to scroll down and there you should see printing nicknames Blackthorn Quest Love and captain

179
00:16:29.740 --> 00:16:30.310
all right.

180
00:16:30.310 --> 00:16:33.640
So let's practice this one more time.

181
00:16:33.640 --> 00:16:40.070
I'm going to add another band member though some will say the underscore roots and an update I'm going

182
00:16:40.090 --> 00:16:50.080
to update our roots array with NPR dot append and for the array I'm going to choose the underscore roots

183
00:16:51.010 --> 00:16:54.550
and for the values I'm gonna say.

184
00:16:54.820 --> 00:16:58.470
Values is equal to double square brackets.

185
00:16:58.540 --> 00:17:04.180
So I'm going to add the values here directly and then between those square brackets I'm going to provide

186
00:17:04.540 --> 00:17:05.590
two strings.

187
00:17:05.590 --> 00:17:08.320
The first one is gonna say Malik.

188
00:17:08.560 --> 00:17:23.400
Space B and then comma single quotes and c closing square brackets comma axis again is equal to zero.

189
00:17:23.460 --> 00:17:30.930
Having added another band member here let's print out the roles some sex some let's say printing.

190
00:17:31.050 --> 00:17:35.180
Band rolls dot dot dot.

191
00:17:35.590 --> 00:17:39.100
And then after the string put a comma.

192
00:17:39.330 --> 00:17:42.580
And now I'm going to throw the ball over into your court.

193
00:17:42.650 --> 00:17:48.440
I'm going to challenge you to print out all the band rolls in the roots.

194
00:17:48.440 --> 00:17:53.370
So I'm going to give you a few seconds to pause the video and write the python code that will print

195
00:17:53.370 --> 00:17:58.600
out all the band members rolls below the cell.

196
00:17:58.850 --> 00:18:00.830
And here's the solution.

197
00:18:01.400 --> 00:18:08.990
Again we're gonna use our array slicing notation so I'm to see the score roots square brackets.

198
00:18:09.140 --> 00:18:13.870
Colon comma 1 when I had shift enter.

199
00:18:13.910 --> 00:18:21.280
I can see now that we've got two emcees one set of drums and one guitar all right.

200
00:18:21.310 --> 00:18:28.590
So with these array techniques covered we're ready to move on to graphing our gradient descent hand.

201
00:18:29.020 --> 00:18:35.340
If you haven't heard of the roots then check out our song of theirs called the next movement.

202
00:18:35.350 --> 00:18:38.220
That's one of my personal favorites a long time ago.

203
00:18:38.230 --> 00:18:39.880
I actually went to see these guys live.

204
00:18:39.910 --> 00:18:46.660
They came down to London and I think one of the things that impressed me most was that during the performance

205
00:18:47.260 --> 00:18:49.520
the band members traded the instruments.

206
00:18:49.690 --> 00:18:55.030
So like the drummer took the guitar and the guitarist took the vocals and the vocalist took the bass

207
00:18:55.120 --> 00:18:56.020
and so on.

208
00:18:56.350 --> 00:19:02.020
And having done that they proceeded to play their next song just showing everyone in the audience that

209
00:19:02.020 --> 00:19:07.710
they weren't one trick ponies but actual musicians who could do more than than one thing.

210
00:19:07.720 --> 00:19:11.250
I mean I haven't gone to that many concerts but I've never seen that before.

211
00:19:11.290 --> 00:19:12.510
So yeah check out these guys.

212
00:19:12.520 --> 00:19:13.060
They're pretty cool.
