1
00:00:00,920 --> 00:00:06,360
Now that we've covered the function basics we can take it up a notch in complexity in this lesson.

2
00:00:06,420 --> 00:00:13,080
We're gonna talk about functions with inputs namely parameters and arguments.

3
00:00:13,220 --> 00:00:17,870
So I realized that if you're new to programming you're going to be hearing a lot of new words in these

4
00:00:17,870 --> 00:00:18,820
lessons.

5
00:00:18,920 --> 00:00:21,980
And one thing I'll say is that when you're learning anything new.

6
00:00:21,980 --> 00:00:25,000
The hard thing isn't necessarily the concepts.

7
00:00:25,010 --> 00:00:33,080
It's often the language and it doesn't really matter if it's programming or medicine or cooking.

8
00:00:33,080 --> 00:00:36,890
Every field has its own jargon and its own words.

9
00:00:36,890 --> 00:00:42,260
A big part of learning Python programming is learning some of this vocabulary.

10
00:00:42,350 --> 00:00:47,850
I'm going to be doing my best to introduce this vocabulary slowly over the course of the lessons and

11
00:00:47,840 --> 00:00:51,390
how I realized that learning vocabulary words doesn't sound very fun.

12
00:00:51,590 --> 00:00:56,380
But the upside is that you're not gonna be learning words that people invented just to sound smart.

13
00:00:56,600 --> 00:01:04,010
Come to think of it the Olympic champions of inventing meaningless words and catchphrases are probably

14
00:01:04,010 --> 00:01:06,380
the business consultants of this world.

15
00:01:06,380 --> 00:01:11,530
I've heard people say like the most ridiculous stuff with a completely straight face.

16
00:01:11,720 --> 00:01:18,050
I think my all time favorites are words like helicoptering which apparently means looking at things

17
00:01:18,050 --> 00:01:26,810
from above and it's another one peeling the onion which apparently means doing more analysis.

18
00:01:26,810 --> 00:01:32,090
So let's get back to Python programming otherwise I won't be able to keep my lunch down.

19
00:01:32,090 --> 00:01:37,190
Looking at the code we've written previously we can see that some functions take inputs.

20
00:01:37,760 --> 00:01:46,530
So for example does use function here had an input called 538 and I read CSB function had an input that

21
00:01:46,530 --> 00:01:55,310
was a filing all of these inputs to functions go in between the parentheses after the function name.

22
00:01:55,390 --> 00:02:03,070
In contrast our milk function had no inputs and this is the same with the show function which also had

23
00:02:03,070 --> 00:02:04,840
no inputs.

24
00:02:04,840 --> 00:02:11,860
In contrast the read CSB function had a piece of text between the parentheses and this piece of text

25
00:02:11,980 --> 00:02:19,300
was the input to the function these inputs are called arguments or parameters.

26
00:02:19,300 --> 00:02:22,120
Let's create our own function that takes an input.

27
00:02:22,120 --> 00:02:26,220
That way we can put all of this into practice and see how the code actually works.

28
00:02:27,780 --> 00:02:34,880
I'm going to quickly copy paste this code from the get milk function into my cell below and I'm gonna

29
00:02:34,890 --> 00:02:36,090
modify this code.

30
00:02:37,170 --> 00:02:39,550
First I'm going to give this function a different name.

31
00:02:39,570 --> 00:02:48,070
I'm gonna call this function Phil underscore the underscore fridge also inside these parentheses.

32
00:02:48,320 --> 00:02:56,480
I'm going to specify an amount this amount is gonna be our input to our function finally.

33
00:02:56,490 --> 00:02:59,450
I'm when a modifier third print statement down here.

34
00:02:59,450 --> 00:03:07,430
So what says by I'm going to use the single quotes and the plus sign and then I'm going to put a mount

35
00:03:07,430 --> 00:03:08,440
here.

36
00:03:08,930 --> 00:03:09,840
Like so.

37
00:03:09,860 --> 00:03:21,770
So it reads buy in single quotes plus amount plus single quotes contents on the ground floor this way

38
00:03:21,850 --> 00:03:31,070
I'm making use of the input within the body of our function the plus sign in this print statement concatenate

39
00:03:31,250 --> 00:03:36,550
all strings and by concatenate I mean merge or combine.

40
00:03:36,560 --> 00:03:39,140
Let's call this function to see it in action.

41
00:03:39,140 --> 00:03:47,060
So when I hit shift enter and then I'm going to write fill the fridge which is the name of the function

42
00:03:47,570 --> 00:03:49,390
followed by the parentheses.

43
00:03:49,640 --> 00:03:57,060
And then within the parentheses I'm going to put single quotes and write five and at shift enter.

44
00:03:57,260 --> 00:04:04,660
Now the piece of text that we entered between the parentheses shows up in our print statement.

45
00:04:04,700 --> 00:04:07,120
Let's think about what just happened here.

46
00:04:07,250 --> 00:04:14,150
First you'll notice that the plus sign in Python actually means different things in different contexts.

47
00:04:15,270 --> 00:04:18,190
When the plus sign is used with numbers it adds them together.

48
00:04:18,270 --> 00:04:22,930
But when the plus sign is used with text it combines the strings.

49
00:04:23,100 --> 00:04:27,410
Let's call this function again but this time the substitute a different amount.

50
00:04:27,480 --> 00:04:29,160
I want to write.

51
00:04:29,640 --> 00:04:40,660
Fill the fridge parentheses 1000 and head shift into let's look at this code and think very carefully

52
00:04:40,660 --> 00:04:41,710
about what's going on.

53
00:04:42,740 --> 00:04:50,290
Our fill the fridge function takes one input that input has a name and is called amount.

54
00:04:50,330 --> 00:04:55,700
But the really cool part is how a mound is just a place holder.

55
00:04:55,700 --> 00:05:02,990
The value of a mound is determined by whatever we specify when we call our fill the fridge function

56
00:05:03,970 --> 00:05:11,070
the first time we specified the value five and amount held on to that piece of text.

57
00:05:11,320 --> 00:05:16,650
So the word five was printed in the print statement when we executed the function.

58
00:05:16,840 --> 00:05:23,590
But the second time we substituted the word 1000 so that the amount took on this value instead.

59
00:05:23,710 --> 00:05:28,270
And we saw 1000 printed out on the third line.

60
00:05:28,390 --> 00:05:35,670
In other words a mount behaves just like a variable it gets its value when we call the function.

61
00:05:35,870 --> 00:05:43,820
And every time we refer to a mound in the body of the function we are able to use the value that's stored

62
00:05:43,820 --> 00:05:50,170
inside now there's two other things that you might notice about the code we just wrote.

63
00:05:50,270 --> 00:05:54,470
First let's try to call this function with empty parentheses.

64
00:05:54,470 --> 00:06:02,290
So when I write fill the fridge separate it button the scores and then have empty parentheses and hit

65
00:06:02,290 --> 00:06:12,330
shift enter in this case we get an error and the details of this error message read missing one required

66
00:06:12,510 --> 00:06:15,740
argument amount.

67
00:06:15,790 --> 00:06:25,390
In other words because we've defined our function with an input we must provide it we specified one

68
00:06:25,390 --> 00:06:30,580
parameter in the function header so we must give a value.

69
00:06:30,580 --> 00:06:32,630
We can't just leave it out.

70
00:06:32,740 --> 00:06:39,190
The other thing you'll notice at this point is that print is nothing other than a function as well.

71
00:06:39,190 --> 00:06:49,490
Print takes a piece of text as an input and prints it out below the cell so if print is a function that

72
00:06:49,490 --> 00:06:59,350
means we're calling a function inside our function where nesting our function calls functions inside

73
00:06:59,350 --> 00:07:04,870
functions is like I don't know dreams within dreams in the movie Inception.

74
00:07:04,870 --> 00:07:09,330
In other words one piece of code can trigger other bits of code.

75
00:07:09,820 --> 00:07:13,830
And this idea is actually really really powerful when you think about it.

76
00:07:14,180 --> 00:07:16,010
So here's a quick recap.

77
00:07:16,130 --> 00:07:23,840
When working with functions with inputs we specify what the input is upfront when defining the function

78
00:07:24,500 --> 00:07:33,360
the input is specified between the parentheses following the function name in this example the input

79
00:07:33,540 --> 00:07:41,490
is called money and money is just a place holder in programming jargon when referring to an input as

80
00:07:41,490 --> 00:07:44,640
a place holder or as a variable.

81
00:07:44,640 --> 00:07:53,200
We tend to call it a parameter as in Get milk has one parameter called money.

82
00:07:53,420 --> 00:07:57,630
Now remember how I said we're going to have some vocabulary training.

83
00:07:57,630 --> 00:08:03,520
Well when we call the function we must provide a value to this parameter.

84
00:08:03,750 --> 00:08:11,010
In this case we must provide a number that value is gonna be twenty point five when I call this function

85
00:08:11,880 --> 00:08:15,370
the value that's passed to a function when it's being called.

86
00:08:15,420 --> 00:08:17,720
It's called an argument.

87
00:08:17,960 --> 00:08:23,580
How oftentimes you'll see the words parameter an argument used interchangeably.

88
00:08:23,580 --> 00:08:29,970
People aren't always super pedantic in the real world but if you want to express yourself precisely

89
00:08:30,300 --> 00:08:36,780
or get technical it's good to know these definitions a parameter is when we're referring to the inputs

90
00:08:36,780 --> 00:08:42,870
to a function and we're talking about it as the place holder or as the variable and we use the word

91
00:08:42,960 --> 00:08:48,030
argument when we're talking about the actual value that we're giving the function when we're calling

92
00:08:48,030 --> 00:08:49,870
it thorough.

93
00:08:49,880 --> 00:08:55,700
That's probably enough vocabulary training for now and we've also covered quite a few different kinds

94
00:08:55,700 --> 00:08:57,590
of functions so far.

95
00:08:57,590 --> 00:09:06,590
For example we understand the syntax behind show and we also understand the syntax behind use or read

96
00:09:06,590 --> 00:09:14,830
C.S. v show had no arguments but read see as V has a file name as an argument.

97
00:09:14,930 --> 00:09:18,580
Now we're gonna look at functions with multiple arguments.

98
00:09:19,070 --> 00:09:26,010
We've actually encountered multiple arguments when we called the scatter function for our plot and we

99
00:09:26,010 --> 00:09:33,910
also had multiple arguments when we called the Fit function for our regression fit had two arguments.

100
00:09:33,910 --> 00:09:41,770
Capital X and lowercase Y X was our movie budgets and lowercase Y was our movie revenue.

101
00:09:41,770 --> 00:09:48,290
We can see that these two arguments are separated by a comma but let's create our own function and have

102
00:09:48,290 --> 00:09:54,930
it take more than one argument so that we can see this in practice back in the python Internode book.

103
00:09:54,980 --> 00:10:01,860
I'm going to copy our previous function that we defined here the fill the fridge function and I'm going

104
00:10:01,860 --> 00:10:06,290
to paste that into the cell where we had the era.

105
00:10:06,380 --> 00:10:11,880
I'm not going to modify this function first by changing the name.

106
00:10:11,950 --> 00:10:19,870
So when I call this function milk underscore mission and then I'm also going to change the function

107
00:10:19,870 --> 00:10:20,770
header.

108
00:10:20,770 --> 00:10:25,770
I'm going to change the number of parameters that are between these two parentheses.

109
00:10:25,960 --> 00:10:30,140
So after amount I'm going to add another parameter.

110
00:10:30,370 --> 00:10:34,460
I'm going to add a destination.

111
00:10:35,110 --> 00:10:38,600
We're going to use this parameter in our second print statement.

112
00:10:39,680 --> 00:10:43,390
Which instead of reading walk to the store we're going to have it read.

113
00:10:43,490 --> 00:10:48,350
Walk to the plus destination.

114
00:10:48,640 --> 00:10:57,400
So we're gonna concatenate the string walk to the with whatever is supplied as a destination.

115
00:10:57,540 --> 00:10:59,860
I can't wait to try out our new function.

116
00:10:59,860 --> 00:11:05,030
So I'm going to shift enter and then in the cell below I'm going to call this function.

117
00:11:05,030 --> 00:11:07,470
I'm going to say milk on a school mission

118
00:11:10,610 --> 00:11:17,970
and for a mount I want to write 20 and for destination I'm going to write in single quotes

119
00:11:20,620 --> 00:11:22,320
department store.

120
00:11:22,360 --> 00:11:29,380
Here we can see that our first argument 20 is gonna be for the amount and our second argument department

121
00:11:29,380 --> 00:11:33,920
store is gonna be for destination when a head shift enter.

122
00:11:33,950 --> 00:11:40,040
I can see these values substituted into our print statement accordingly.

123
00:11:40,050 --> 00:11:48,360
Now here's the question What do you think will happen if instead of writing milk mission 20 comma department

124
00:11:48,360 --> 00:11:55,630
store we write milk mission department store comma 20

125
00:11:58,830 --> 00:12:06,850
you guessed that I walk to the 20 and I buy department store cartons of milk what this tells us is that

126
00:12:06,850 --> 00:12:11,300
our arguments to our function are passed by their position.

127
00:12:11,620 --> 00:12:18,250
In other words the order in which we give the inputs to our function matters and it matters quite a

128
00:12:18,250 --> 00:12:19,270
bit.

129
00:12:19,270 --> 00:12:21,740
The arguments are passed from left to right.

130
00:12:21,910 --> 00:12:30,100
So as before we must supply exactly two arguments when recalling milk mission but we also must be careful

131
00:12:30,310 --> 00:12:34,570
to supply these arguments in the right order.

132
00:12:34,630 --> 00:12:40,690
Now looking at the syntax for calling a function it still strikes me kind of strange every time I think

133
00:12:40,690 --> 00:12:41,970
about it.

134
00:12:42,340 --> 00:12:45,010
Imagine how that would play out in real life.

135
00:12:45,010 --> 00:12:51,520
I imagine your girlfriend or boyfriend telling you to go to the supermarket and saying go buy eggs potatoes

136
00:12:51,520 --> 00:12:56,930
milk cartons doughnuts and apples by 2 10 1 12 and 5.

137
00:12:56,950 --> 00:12:59,500
This is confusing right.

138
00:12:59,680 --> 00:13:08,680
And yet many programming languages work exactly like this but confusion is bad and nobody wants to come

139
00:13:08,680 --> 00:13:13,540
back from the supermarket and have an argument with their partner because they've messed up the order

140
00:13:13,540 --> 00:13:15,480
of their arguments.

141
00:13:15,490 --> 00:13:20,260
Lucky for us Python can actually help us have a successful relationship.

142
00:13:20,260 --> 00:13:24,040
It provides an alternative for passing arguments by position.

143
00:13:24,280 --> 00:13:31,540
We can also match our arguments by providing a name that believe it or not we actually did this previously

144
00:13:31,690 --> 00:13:33,970
in our notebook.

145
00:13:33,970 --> 00:13:41,710
Check out how we called Scatter for instance we had X comma Y comma color equals blue comma alpha equals

146
00:13:41,830 --> 00:13:43,830
zero point three.

147
00:13:44,200 --> 00:13:51,340
The point that I want to draw your attention to is the part where it says color equals blue and alpha

148
00:13:51,400 --> 00:13:53,190
equals zero point three.

149
00:13:53,200 --> 00:13:57,130
Here we are matching our arguments by name.

150
00:13:57,190 --> 00:14:03,560
Let's go back to our milk mission function remember how when we got the order on we printed nonsense

151
00:14:04,520 --> 00:14:08,440
Well we can add the name of our parameters to the function call.

152
00:14:08,690 --> 00:14:12,530
So that python will match these values by keyword.

153
00:14:12,530 --> 00:14:23,760
So if we say destination is equal to department store and amount is equal to 20 and press shift enter.

154
00:14:24,080 --> 00:14:31,160
We can see that the output below the cell updates to the way that we wanted to namely walk to the department

155
00:14:31,160 --> 00:14:33,350
store buy 20 cartons on the ground floor.

156
00:14:34,220 --> 00:14:40,490
So here we are setting the destination equal to department store and we're setting amount equal to 20

157
00:14:41,920 --> 00:14:44,460
looking at the code where we called Scatter again.

158
00:14:44,500 --> 00:14:51,370
We can actually see that in this case we're kind of mixing and matching supplying arguments by position

159
00:14:51,790 --> 00:14:57,650
and by name the equivalent when we're calling milk mission would look something like this

160
00:15:01,610 --> 00:15:14,130
we'd have milk underscore mission parentheses 20 comma destination equals store and had shift enter.

161
00:15:14,150 --> 00:15:21,530
In this case the argument 20 is set by position and the destination is set by name.

162
00:15:21,530 --> 00:15:25,440
Now personally I actually quite like named arguments.

163
00:15:25,670 --> 00:15:29,330
They make the python code much more readable.

164
00:15:29,330 --> 00:15:31,920
It's like having labels for the data.

165
00:15:31,940 --> 00:15:41,010
Suppose I went back where we called scatter and I deleted and had deleted the names for these arguments.

166
00:15:41,010 --> 00:15:44,940
In this case we just have x y blue zero point three.

167
00:15:45,210 --> 00:15:52,050
Anybody looking at this code is gonna wonder what on earth this zero point three and that somebody might

168
00:15:52,050 --> 00:15:55,440
as well be yourself in like two weeks time when you forgot what you did.

169
00:15:56,750 --> 00:16:02,330
I guess the message I'm trying to convey here is that having a bunch of naked values separated by commas

170
00:16:02,690 --> 00:16:08,750
doesn't make the code very readable to us humans providing these keywords and calling a function just

171
00:16:08,750 --> 00:16:11,220
makes everything so much more readable.

172
00:16:11,260 --> 00:16:18,800
So here's a question for you What do you think will happen if we call our function like this milk on

173
00:16:18,810 --> 00:16:27,340
this commission parentheses store karma amount equals 20 hitting shift enter.

174
00:16:27,340 --> 00:16:35,020
We see that we get an error and the reason is is that we're trying to assign a value to a mound twice

175
00:16:35,680 --> 00:16:43,570
the first time we're assigning the store value to amount because python is evaluating our arguments

176
00:16:43,600 --> 00:16:48,890
by their position and the second time we're setting amount equal to 20.

177
00:16:49,000 --> 00:16:52,640
By using the keyword Okay cool.

178
00:16:52,640 --> 00:16:59,830
So we're coming to the end of this lesson on parameters and arguments and we've covered a lot of material

179
00:16:59,830 --> 00:17:00,910
here.

180
00:17:01,000 --> 00:17:05,370
This material will sink in more with practice I promise.

181
00:17:05,440 --> 00:17:11,410
And if you've heard any recent buzzwords that make you want to stick needles in your eyes please share

182
00:17:11,410 --> 00:17:12,550
them in this lessons.

183
00:17:12,550 --> 00:17:15,460
Q and A section I'd love to hear them.

184
00:17:15,790 --> 00:17:17,140
See you in the next lesson.
