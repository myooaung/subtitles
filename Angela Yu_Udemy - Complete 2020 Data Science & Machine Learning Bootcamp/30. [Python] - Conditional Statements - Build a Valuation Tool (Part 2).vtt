WEBVTT
1
00:00:00.570 --> 00:00:01.170
All right.

2
00:00:01.320 --> 00:00:05.210
So now let's change track a little bit.

3
00:00:05.220 --> 00:00:09.900
We now have our template for our property that we want to get an estimate for.

4
00:00:10.170 --> 00:00:14.660
That template is currently populated with the average values in the data set.

5
00:00:14.670 --> 00:00:19.830
So now let's get the estimated theta values for our model.

6
00:00:20.540 --> 00:00:27.120
And while we're doing that we can also calculate the root means quit error for our prediction interval

7
00:00:28.180 --> 00:00:30.720
I'm going to be using psychic learn to do this.

8
00:00:31.210 --> 00:00:42.060
Let's store our aggression in a variable called rigour and that's going to be equal to linear regression.

9
00:00:42.100 --> 00:00:50.950
So this is cycle learns linear regression and we can use that linear regression to already fit our values

10
00:00:51.010 --> 00:00:58.870
so we can calculate all the theta parameters simply by calling the fit method on his and the fit method

11
00:00:59.320 --> 00:01:08.820
needs two inputs namely the features and R target of H shift enter.

12
00:01:09.010 --> 00:01:16.930
This calculates all the theta values in the background to get the predicted values or the fitted values.

13
00:01:16.930 --> 00:01:23.410
We can use regular don't predict and then features.

14
00:01:23.410 --> 00:01:31.270
So based on our features data frame we are calculating all the predicted values using the fetus from

15
00:01:31.270 --> 00:01:32.620
our model.

16
00:01:32.640 --> 00:01:40.780
Let me store this in a variable called fitted on a school vouchers fitted underscore values.

17
00:01:40.840 --> 00:01:42.840
Now has all our predictions.

18
00:01:42.940 --> 00:01:49.580
The next step is calculating our means quite error and our root mean square error.

19
00:01:50.680 --> 00:01:56.950
And this is where I want to throw it over to you can you calculate the mean square error and the root

20
00:01:57.190 --> 00:02:01.740
mean squared error using our psyche learn module.

21
00:02:02.140 --> 00:02:05.730
I'll give you a few seconds to pause the video and give this a go.

22
00:02:07.270 --> 00:02:08.100
Ready.

23
00:02:08.110 --> 00:02:09.330
Here's the solution.

24
00:02:09.460 --> 00:02:16.170
The MSE is going to be equal to the return value from our means squared error.

25
00:02:16.180 --> 00:02:25.000
Function that we've imported at the top mean on a score squared underscore error needs two inputs the

26
00:02:25.000 --> 00:02:27.790
target and the fitted values

27
00:02:30.880 --> 00:02:37.830
if we output the means quite error for our regression is currently equal to zero point zero three five

28
00:02:38.060 --> 00:02:39.640
approximately.

29
00:02:39.760 --> 00:02:41.860
Now what about the root mean square error.

30
00:02:41.950 --> 00:02:50.380
The R M S E that's simply going to be equal to the square root of the mean square error.

31
00:02:50.380 --> 00:02:52.060
Now when you use num pi again.

32
00:02:52.240 --> 00:02:57.390
So end p dot as Q R T parentheses MSE.

33
00:02:57.610 --> 00:03:00.280
Well give me the root means quit error.

34
00:03:00.550 --> 00:03:09.780
The value of the Army c is equal to zero point 1 7 5 and the units for both.

35
00:03:09.780 --> 00:03:12.090
That means quote error and the root means quote error.

36
00:03:12.220 --> 00:03:16.450
I'll still log dollar prices in thousands.

37
00:03:16.450 --> 00:03:20.120
Now we have everything in place to make our predictions.

38
00:03:20.280 --> 00:03:25.730
Leave this here hit shift enter and go down to the next cell.

39
00:03:25.840 --> 00:03:35.770
What I want to do here is I want to create a python function which will estimate the log house prices

40
00:03:35.950 --> 00:03:38.940
for a specific property.

41
00:03:39.040 --> 00:03:45.670
We'll get the log prices first the log estimate using our data set and afterwards we'll do step 2 where

42
00:03:45.670 --> 00:03:50.860
we convert this output into today's dollar values.

43
00:03:50.860 --> 00:03:54.140
Now we've not written a python function of our own for a little while.

44
00:03:54.190 --> 00:03:56.980
So this is a good chance to review this as well.

45
00:03:57.220 --> 00:04:03.680
The way you create a function is with the DCF keyword def and then the function name.

46
00:04:03.680 --> 00:04:04.800
I want to call this function.

47
00:04:04.810 --> 00:04:12.140
Get on a school log on a school estimate to parentheses and then a column.

48
00:04:12.160 --> 00:04:21.040
Let's have this function return a dummy value for now some say log on the school estimate is equal to

49
00:04:21.480 --> 00:04:24.310
21 and then down here.

50
00:04:24.550 --> 00:04:33.350
I'll specify a return value for this function so I'll see return log on the school estimate.

51
00:04:33.810 --> 00:04:37.650
Now that we've defined our function we can use it.

52
00:04:37.680 --> 00:04:43.460
We can call it so get an escort log and a school estimate.

53
00:04:43.680 --> 00:04:48.840
Parentheses will output the value 21.

54
00:04:48.860 --> 00:04:49.910
Fair enough.

55
00:04:49.910 --> 00:04:52.820
So this is pretty much all the review.

56
00:04:52.820 --> 00:04:57.950
The thing I actually want to show you in this lesson is not just how to create your own python function

57
00:04:58.310 --> 00:05:06.590
but how to create a python function with arguments some of which have a default value because once you

58
00:05:06.590 --> 00:05:14.970
do that when calling the function the arguments that already have a default value are optional.

59
00:05:14.970 --> 00:05:16.600
Let me show you what I mean by that.

60
00:05:16.860 --> 00:05:25.290
If I come in here into my function definition and I specify an argument see in our underscore rooms

61
00:05:26.220 --> 00:05:33.810
and hit shift enter when it comes to calling our python function and not need to supply this argument.

62
00:05:33.810 --> 00:05:41.400
So if I had shift into now I'll get a type error because I'm missing one required positional argument

63
00:05:42.060 --> 00:05:43.480
and are on a score rooms.

64
00:05:44.580 --> 00:05:51.860
Calling the function requires that I have some value for the number of rooms.

65
00:05:52.260 --> 00:05:59.840
Only then will the code execute let's add four arguments to this function total number of rooms being

66
00:05:59.840 --> 00:06:07.610
one the next one being students on a school per on a school classroom.

67
00:06:07.610 --> 00:06:18.560
So this will be our P T ratio comma and then we'll have next on school to on the school river.

68
00:06:18.560 --> 00:06:24.060
Come on and then we'll have a fourth argument high on the score.

69
00:06:24.060 --> 00:06:31.260
Confidence and this last argument will be for whether or not we want to have a ninety five percent prediction

70
00:06:31.260 --> 00:06:32.880
interval.

71
00:06:32.920 --> 00:06:33.300
All right.

72
00:06:33.300 --> 00:06:34.710
So now we have four arguments.

73
00:06:34.830 --> 00:06:43.010
Meaning we need to specify values for all of these arguments here to make one of these arguments optional.

74
00:06:43.050 --> 00:06:44.830
See next to the river.

75
00:06:45.030 --> 00:06:50.910
I can give it a default value in our function signature in our function definition.

76
00:06:50.970 --> 00:06:59.860
So next to river can be equal to say false and high confidence can be equal to say true.

77
00:07:00.450 --> 00:07:07.770
What we've just done is made two of these arguments optional meaning we only need to specify the number

78
00:07:07.770 --> 00:07:10.710
of rooms and the students per classroom.

79
00:07:11.540 --> 00:07:19.920
So coming down here where I'm calling this function I can have five and say 19 and this cell will now

80
00:07:19.950 --> 00:07:24.050
execute just fine all right.

81
00:07:24.080 --> 00:07:27.680
So we can't have this function returned the value 21 all the time.

82
00:07:27.680 --> 00:07:29.520
That's that's just silly.

83
00:07:29.540 --> 00:07:40.330
What we actually want is we want this function to return the price estimate for a particular property.

84
00:07:40.940 --> 00:07:47.720
So we're going to use our regression object rigour and predict method on that object.

85
00:07:47.720 --> 00:07:55.790
And then as an argument to the predict method we need to supply a single row of features that single

86
00:07:55.790 --> 00:08:03.500
row will be our property stats which currently hold on to the average values for all the features in

87
00:08:03.590 --> 00:08:05.120
our data set.

88
00:08:05.120 --> 00:08:12.170
Check it out if I press shift enter to refresh the cell and then pull up the values stored inside property

89
00:08:12.170 --> 00:08:12.980
stats.

90
00:08:13.220 --> 00:08:20.150
I can see an array with eleven features and all the average values.

91
00:08:20.150 --> 00:08:26.380
Okay let's see what the lock price estimate for this particular property is.

92
00:08:26.690 --> 00:08:36.770
Record don't predict property underscore stats shift enter and shift enter again we see that we get

93
00:08:36.770 --> 00:08:39.140
an array of two dimensions.

94
00:08:39.140 --> 00:08:47.000
Mind you it has two sets of square brackets and then we get a price estimate in log dollars.

95
00:08:47.000 --> 00:08:52.880
Now if I wanted to get the wrong number instead of an array we can access that value with square brackets

96
00:08:52.880 --> 00:08:55.800
0 square brackets 0.

97
00:08:55.820 --> 00:09:05.240
So first row first column shift enter and shift enter again will give us the log price estimate of the

98
00:09:05.330 --> 00:09:06.300
array.

99
00:09:06.650 --> 00:09:08.550
Now of course this is fairly boring right.

100
00:09:08.570 --> 00:09:15.200
Because even though we've input it some values here as arguments the number of rooms and students per

101
00:09:15.200 --> 00:09:20.680
classroom we're not really making use of them inside our function.

102
00:09:20.750 --> 00:09:26.900
So I'm going add a comment here that reads configure property

103
00:09:30.330 --> 00:09:39.450
and then I'll add a second comment here that reads make prediction when it comes to configuring our

104
00:09:39.450 --> 00:09:47.150
property I'm thinking we can do it in a very very similar way to the way we did it up here so check

105
00:09:47.150 --> 00:09:47.680
it out.

106
00:09:47.960 --> 00:09:55.250
We can make use of this input the number of rooms by changing a particular index of our end dimensional

107
00:09:55.250 --> 00:10:02.550
array so property and the school stats square brackets.

108
00:10:02.730 --> 00:10:12.900
So row number 1 and then column number will be R.M. on the score I the X which is column number four.

109
00:10:13.530 --> 00:10:18.710
And we're gonna set that equal to an R underscore rooms.

110
00:10:18.800 --> 00:10:21.290
Now we have this number here.

111
00:10:21.410 --> 00:10:28.940
When calling the function filtering through into configuring the feature that we're then going to make

112
00:10:28.940 --> 00:10:30.230
the prediction on.

113
00:10:30.620 --> 00:10:36.550
So shift enter and shift into you'll see that number change.

114
00:10:36.650 --> 00:10:47.430
Now as that changes from five to say eight to nine to three we can now get price estimates for properties

115
00:10:47.820 --> 00:10:56.340
that have the average values for crime and ls that and pollution from the dataset for all the features

116
00:10:56.550 --> 00:10:59.560
except for one feature namely the number of rooms.

117
00:10:59.880 --> 00:11:07.520
This now depends on the input to our function let's do the same thing for Piti ratio.

118
00:11:07.520 --> 00:11:15.880
The students per classroom how large you pause the video to add that line of Python code ready.

119
00:11:15.890 --> 00:11:16.660
Here it goes.

120
00:11:16.670 --> 00:11:22.620
So property under school stats square brackets 0 square brackets.

121
00:11:22.730 --> 00:11:37.500
And then it was P T ratio and the school I.D. X it's equal to students and a score uh and a score.

122
00:11:37.510 --> 00:11:40.150
Classroom.

123
00:11:40.210 --> 00:11:48.910
Now we can adjust the valuation of our property based on how many kids there are per teacher shift enter

124
00:11:49.930 --> 00:11:54.430
and shift enter again and changing this and heading shift.

125
00:11:54.440 --> 00:11:55.830
Enter again.

126
00:11:56.530 --> 00:12:04.810
We can see that for a P T ratio of ten to one the log price estimate is three point 0 5 and then for

127
00:12:04.810 --> 00:12:06.790
a p p ratio of say 20.

128
00:12:06.820 --> 00:12:10.700
So a much bigger class the log price estimate will go down.

129
00:12:10.720 --> 00:12:11.090
Right.

130
00:12:11.110 --> 00:12:16.270
So it'll be two point six eight brilliant.

131
00:12:16.280 --> 00:12:17.720
Now you can see where this is going.

132
00:12:17.720 --> 00:12:18.820
Right.

133
00:12:19.340 --> 00:12:24.070
Next up is this next to river argument that I've given here.

134
00:12:24.140 --> 00:12:27.740
This is gonna be all about our Chaz variable now.

135
00:12:27.800 --> 00:12:29.270
Charles was a dummy variable right.

136
00:12:29.270 --> 00:12:33.500
It's either equal to zero or it's equal to one.

137
00:12:33.500 --> 00:12:38.740
The way we're gonna configure our features is using an if else clause.

138
00:12:38.930 --> 00:12:51.570
So if next underscore to underscore river colon New Line property underscore stats square brackets 0

139
00:12:52.370 --> 00:13:00.660
square brackets chars and a score Ida X is equal to 1.

140
00:13:00.680 --> 00:13:13.030
Your line else semicolon property underscore stats square brackets 0 square brackets chars underscore

141
00:13:13.570 --> 00:13:14.100
RDX

142
00:13:16.930 --> 00:13:19.330
equal to zero.

143
00:13:19.330 --> 00:13:19.860
What code.

144
00:13:19.860 --> 00:13:22.110
That just right here in English.

145
00:13:22.120 --> 00:13:25.790
This would read if the property is next to the river.

146
00:13:25.930 --> 00:13:35.370
If next the river is true then we're going to change one feature namely the column for Charles River

147
00:13:35.890 --> 00:13:39.390
to 1 otherwise.

148
00:13:39.870 --> 00:13:48.060
If next to river is false which is the default in this case property and of course that's for the Charles

149
00:13:48.060 --> 00:13:51.600
River column should be equal to zero.

150
00:13:51.780 --> 00:14:00.900
The value of this point in our array is conditional on the value of next to river which should either

151
00:14:00.900 --> 00:14:04.140
be true or false.

152
00:14:04.280 --> 00:14:05.790
We're calling our function.

153
00:14:05.790 --> 00:14:13.320
Like so this value here that we're getting for a three room dwelling with Piti ratio of 20 we're getting

154
00:14:13.320 --> 00:14:15.400
a value of two point six eight.

155
00:14:15.480 --> 00:14:18.750
This property here is not next to the river.

156
00:14:19.350 --> 00:14:25.220
If I shift into the cell to refresh and refresh this cell then we see what this property would be priced

157
00:14:25.230 --> 00:14:27.270
that if it was not next to the river.

158
00:14:28.110 --> 00:14:38.610
If however next underscore to underscore River is equal to true and I refresh the cell then we can see

159
00:14:38.610 --> 00:14:41.550
the premium of this property reflected in the price.

160
00:14:41.820 --> 00:14:43.420
If it was next to the river.

161
00:14:43.780 --> 00:14:48.390
And that's because again living next to the river is a desirable thing.

162
00:14:48.430 --> 00:14:50.710
All right so you can see where this is going.

163
00:14:50.820 --> 00:14:58.830
What we've just done is we've created a function and we're configuring the property that we're getting

164
00:14:58.830 --> 00:15:02.940
the estimate for using the arguments to that function.

165
00:15:02.940 --> 00:15:11.550
So number of rooms students per classroom and whether the property is next to the river for all the

166
00:15:11.550 --> 00:15:14.860
other features like pollution and highway accessibility.

167
00:15:14.940 --> 00:15:19.210
We're just using the average values of the data set.

168
00:15:19.290 --> 00:15:25.440
If we wanted to we could add more lines of code here and increase the number of arguments that are being

169
00:15:25.440 --> 00:15:28.950
supplied to this function to set those as well.

170
00:15:28.950 --> 00:15:34.780
But for this exercise let's keep it simple let's keep it to 3 custom inputs.

171
00:15:34.890 --> 00:15:41.100
How what about this fourth one that I made you add earlier high underscore confidence what I had in

172
00:15:41.100 --> 00:15:44.880
mind for this one was to calculate the range.

173
00:15:44.880 --> 00:15:53.400
So let's add another comment here and how that read calc range.

174
00:15:53.400 --> 00:15:55.840
This is our prediction interval.

175
00:15:56.160 --> 00:16:12.850
I'm going to adopt the same pattern so if higher underscore confidence colon do X ls colon do y.

176
00:16:13.750 --> 00:16:15.370
Now what am I trying to get at here.

177
00:16:16.420 --> 00:16:24.060
If high confidence is equal to true then I want to calculate the two standard deviation prediction interval.

178
00:16:24.160 --> 00:16:33.250
I want to calculate the 95 percent prediction interval and otherwise I want to calculate the one standard

179
00:16:33.250 --> 00:16:35.250
deviation prediction interval.

180
00:16:35.330 --> 00:16:41.560
Sixty eight percent prediction interval the prediction intervals of course have an upper and a lower

181
00:16:41.560 --> 00:16:42.250
bound.

182
00:16:42.250 --> 00:16:53.640
So upper underscore bound will be equal to the log estimate plus two times are m as E.

183
00:16:53.860 --> 00:16:55.900
Yes that's our root mean square error.

184
00:16:55.900 --> 00:17:07.480
Coming back in here and the lower underscore bound will be equal to log on a school estimate minus two

185
00:17:07.660 --> 00:17:10.940
times are MSE.

186
00:17:10.990 --> 00:17:15.530
Now what about if we don't want a high confidence prediction interval.

187
00:17:15.550 --> 00:17:17.980
What if we don't want a large range.

188
00:17:17.980 --> 00:17:25.990
Well I can copy these two lines and I can paste them in here and instead of using two times the root

189
00:17:25.990 --> 00:17:34.010
mean square error we can simply use 1 times the root means squared error to calculate our range.

190
00:17:34.030 --> 00:17:38.590
So this is a wide range and this is a narrow range.

191
00:17:38.800 --> 00:17:49.310
The last thing I do is I want to make this very explicit so I'll say interval is equal to 95 and here

192
00:17:49.340 --> 00:17:53.650
going mercy interval is equal to sixty eight.

193
00:17:53.710 --> 00:17:58.800
I want to use this variable here in a print statement later on.

194
00:17:59.110 --> 00:18:05.050
For now what we're gonna do is return all of these calculations so check it out when I return our log

195
00:18:05.050 --> 00:18:08.740
estimate when I return our upper bound.

196
00:18:08.740 --> 00:18:16.810
We're gonna return our lower bound and we're going to return our interval hitting shift enter enter

197
00:18:17.110 --> 00:18:21.110
refresh the cell and hitting shift enter on this one.

198
00:18:21.460 --> 00:18:24.150
I can now see that I get a tuple.

199
00:18:24.340 --> 00:18:31.480
This is what the parentheses are telling us and that tuple consists of four things the log price estimate

200
00:18:33.150 --> 00:18:40.290
plus two standard deviations and minus two standard deviations for the range an upper and a lower bound.

201
00:18:40.290 --> 00:18:46.400
Plus an indication if this is a wide range or a narrow range.

202
00:18:46.530 --> 00:18:57.930
In this case it is a wide range Y because confidence is set true by default to get a narrow range.

203
00:18:58.100 --> 00:19:07.810
I can use high underscore confidence is equal to faults in which case we will enter the else block of

204
00:19:07.810 --> 00:19:16.960
the function and get the following output we get the same log estimate but the upper and the lower bound

205
00:19:17.200 --> 00:19:26.200
will be plus and minus one standard deviation 1 times the route means squared error and our prediction

206
00:19:26.200 --> 00:19:26.650
interval.

207
00:19:26.650 --> 00:19:32.300
In this case we'll be sixty eight percent so this is the 68 percent prediction interval.

208
00:19:32.570 --> 00:19:36.850
And this is the 95 percent prediction interval.

209
00:19:37.000 --> 00:19:44.290
Now that we have a price estimate and an upper and a lower bound and a prediction interval the next

210
00:19:44.290 --> 00:19:49.560
thing to do is to convert all of these log prices into dollar values.
