1
00:00:00,790 --> 00:00:07,720
Now that we've covered the theory behind the naive bayes classifier in detail it's time to get our hands

2
00:00:07,720 --> 00:00:11,430
dirty and write some python code in this lesson.

3
00:00:11,440 --> 00:00:17,080
We've got a big and important topic coming up namely how do you get your code to talk to your computer's

4
00:00:17,170 --> 00:00:18,650
operating system.

5
00:00:18,670 --> 00:00:21,480
How do you read a file.

6
00:00:21,500 --> 00:00:25,850
Now a lot of this knowledge is going to be transferable to whatever programming language you're working

7
00:00:25,850 --> 00:00:27,900
in on whatever project you're working in.

8
00:00:28,040 --> 00:00:32,540
But with Python and machine learning you're gonna be working with a lot of data and that data is gonna

9
00:00:32,540 --> 00:00:33,710
be stored somewhere.

10
00:00:34,250 --> 00:00:40,700
Most likely that's going to be stored locally on your computer or it's gonna be stored on a server for

11
00:00:40,700 --> 00:00:45,890
many of our projects our Python code is going to need to interact with our own computer's operating

12
00:00:45,890 --> 00:00:50,700
system and actually be able to read the files from the disk.

13
00:00:50,720 --> 00:00:55,580
So while we're on this topic about learning how to read files we're also going to cover quite a few

14
00:00:55,580 --> 00:01:01,530
other topics as well namely file paths File Locations file extensions.

15
00:01:01,580 --> 00:01:06,650
We're also going to see how our email data is actually structured and we're also going to see how we

16
00:01:06,650 --> 00:01:11,120
can extract a message body from a raw email.

17
00:01:11,150 --> 00:01:12,810
But first things first.

18
00:01:12,950 --> 00:01:18,860
Whenever you're referencing a file in your python code you're going to need to specify exactly where

19
00:01:18,860 --> 00:01:21,820
that file is and what that file is called.

20
00:01:21,980 --> 00:01:31,430
And this means you have to specify two things namely the file path and the file name in the lesson resources

21
00:01:31,550 --> 00:01:35,120
that you've downloaded and added to your projects folder.

22
00:01:35,120 --> 00:01:38,260
I included a practice email.

23
00:01:38,270 --> 00:01:48,230
So taking a peek inside the spam data folder and then opening 0 1 processing you should see a file called

24
00:01:48,320 --> 00:01:52,150
practice on a school email Dot T X T.

25
00:01:52,280 --> 00:01:56,450
Now the file name for this file should be pretty obvious because we're looking right at it.

26
00:01:56,510 --> 00:02:04,280
It's practice on a score email that t t that t x part is called the file extension and this signals

27
00:02:04,370 --> 00:02:08,340
what kind of file this is a text file.

28
00:02:08,420 --> 00:02:16,520
It's just a boring old text file but the thing is these file extensions are key to the computer or you

29
00:02:16,520 --> 00:02:20,270
or me understanding what kind of file it is that we're working with.

30
00:02:20,360 --> 00:02:24,710
The extension tells us something about a files format.

31
00:02:24,710 --> 00:02:33,980
So for example Microsoft Word documents have the extension DLC or DLC ex and PDA FS have the extension

32
00:02:34,310 --> 00:02:41,920
dot PD f windows executable files on the other hand have the very dangerous extension dot e XY.

33
00:02:42,260 --> 00:02:50,110
So if you ever receive an email that has an attachment with a dot EMC extension don't open the attachment.

34
00:02:50,120 --> 00:02:55,310
This was always the classic way that people installed viruses on their computers back in the day.

35
00:02:55,490 --> 00:03:00,560
I was going through my spam directory recently and one thing I noticed actually was that more and more

36
00:03:00,560 --> 00:03:07,400
folks are sending out their malicious code with the DOT J.S. or JavaScript extension instead of DOT

37
00:03:07,430 --> 00:03:08,330
EMC.

38
00:03:08,360 --> 00:03:16,760
So yeah it's always good to pay close attention to these file extensions now that we've talked about

39
00:03:16,880 --> 00:03:20,070
the file name and the file extension.

40
00:03:20,090 --> 00:03:21,860
What about this other thing that I've mentioned.

41
00:03:21,860 --> 00:03:29,270
What about the path the path or the file path is the location of the file.

42
00:03:29,270 --> 00:03:33,920
Let me quickly show you how you can actually view the file path on Mac.

43
00:03:33,920 --> 00:03:37,250
And afterwards I'll show you how to see it on Windows.

44
00:03:37,250 --> 00:03:42,550
If you're using a Mac then you can open finder and you can go to this practice.

45
00:03:42,560 --> 00:03:50,300
E-mail that text file in finder and then you can go to file get info or command.

46
00:03:50,360 --> 00:03:56,820
I and what you can see right here is the location of this file.

47
00:03:56,890 --> 00:04:02,590
It's on my hard drive under my username inside my projects folder.

48
00:04:02,740 --> 00:04:06,340
Then spam data and then zero one on the score processing.

49
00:04:06,340 --> 00:04:12,160
This here is the location of the practice on a score email the text file.

50
00:04:12,220 --> 00:04:19,810
This right here is my file path if you're running Windows on the other hand you can always see the file

51
00:04:19,810 --> 00:04:24,490
path and the location in this address bar right up here.

52
00:04:24,490 --> 00:04:27,430
So right now this is the project folder.

53
00:04:27,430 --> 00:04:35,700
Double clicking on spam data will open my folder and you can see now that the location here has updated.

54
00:04:35,770 --> 00:04:44,800
If I open processing then I can clearly see the full file path to this practice email right here in

55
00:04:44,800 --> 00:04:53,800
my address ball if I click inside the ad respawn then we can see the names of the folders and the sub

56
00:04:53,800 --> 00:04:57,910
folders separated by a backslash.

57
00:04:57,910 --> 00:05:04,630
In other words my processing folder is inside spam data which is inside my projects folder which is

58
00:05:04,630 --> 00:05:10,780
inside my username folder under users and then on my C drive.

59
00:05:11,140 --> 00:05:17,850
This long piece of text that we're looking at right here is the full path and this brings me to the

60
00:05:17,850 --> 00:05:21,510
two different kind of paths that you'll be encountering.

61
00:05:21,570 --> 00:05:30,190
The first one is actually called an absolute path think of the absolute path as the long form.

62
00:05:30,250 --> 00:05:34,090
This is the full path to the file or folder on Windows.

63
00:05:34,090 --> 00:05:40,330
You often see the absolute path starting with C and then going to your particular user profile and then

64
00:05:40,330 --> 00:05:44,050
down to a particular folder on Mac.

65
00:05:44,050 --> 00:05:49,070
The absolute path to the practice email would look something more like this.

66
00:05:49,430 --> 00:05:49,880
All right.

67
00:05:49,930 --> 00:05:58,000
I think that's easy enough but while the absolute path is the long form there is also a shorthand you

68
00:05:58,000 --> 00:06:02,050
see you don't always have to work with an absolute path.

69
00:06:02,050 --> 00:06:10,860
Instead you can work with what's called a relative path a relative path uses your current location as

70
00:06:10,860 --> 00:06:16,680
the starting location and then points to a file or folder from there.

71
00:06:16,710 --> 00:06:24,780
So suppose I'm in my MLK projects folder and finder then the relative path to the practice email would

72
00:06:24,780 --> 00:06:28,850
be spammed data 0 1 processing.

73
00:06:29,100 --> 00:06:30,510
And there it is.

74
00:06:30,600 --> 00:06:38,110
There is my practice on a school email the text file has such the relative path from my email projects

75
00:06:38,110 --> 00:06:44,620
folder to my practice on a school email or text file would look something like this.

76
00:06:44,800 --> 00:06:50,700
What you're looking at here is actually the formatting for windows on a Mac.

77
00:06:50,710 --> 00:06:55,720
You'd have a relative path that would look more like this notice.

78
00:06:55,780 --> 00:07:02,620
The only difference are the slashes Mac uses the forward slash and Windows uses the backslash in front

79
00:07:02,620 --> 00:07:04,900
of the file and folder names.

80
00:07:04,900 --> 00:07:08,980
Now this might be a small thing to point out but the direction of the slashes actually matters when

81
00:07:08,980 --> 00:07:10,820
you're writing your python code.

82
00:07:10,870 --> 00:07:16,930
So even though in windows you see backslash is used in the path on the end respawn.

83
00:07:16,990 --> 00:07:24,040
It's actually a little problematic to try and just copy paste what's in here and the reason is is that

84
00:07:24,130 --> 00:07:30,940
in Python you actually want to use a forward slash because the backslash has a special purpose in the

85
00:07:30,940 --> 00:07:33,150
Python programming language.

86
00:07:33,220 --> 00:07:39,370
Let's fire up a new Python notebook and I'll show you exactly what I mean and why we want to use forward

87
00:07:39,370 --> 00:07:46,130
slashes in Jupiter navigate to your email projects folder and then click new.

88
00:07:46,370 --> 00:07:59,540
Python 3 notebook Let's rename this notebook to 0 6 Baz classifier and click rename say we print align

89
00:07:59,750 --> 00:08:02,970
what is up and had shift enter.

90
00:08:02,990 --> 00:08:04,790
Then we see this text printed below.

91
00:08:05,630 --> 00:08:08,930
But what if we wanted to write what's up.

92
00:08:08,930 --> 00:08:13,130
So I wanted to write what's up with an apostrophe.

93
00:08:13,130 --> 00:08:22,940
You can see that I now have three single quotes in this string and that means that my string starts

94
00:08:22,940 --> 00:08:30,920
here ends here and this part onwards here is considered Python code and then it starts another string

95
00:08:30,920 --> 00:08:31,800
here.

96
00:08:31,850 --> 00:08:39,030
In other words Python needs to know that it should ignore this single quote and for that we use the

97
00:08:39,030 --> 00:08:44,480
backslash the backslash escapes the character that follows it.

98
00:08:44,580 --> 00:08:50,130
So by using the backslash this single quote here is treated as part of the string.

99
00:08:50,280 --> 00:08:55,980
And if I had shift enter I can get that apostrophe to show up in my output.

100
00:08:56,190 --> 00:09:03,960
And that's also why when you're providing a path as a string you want to make sure use forward slashes

101
00:09:04,230 --> 00:09:11,690
instead of backslash is that you get from copy and pasting from the windows address bar okay.

102
00:09:11,710 --> 00:09:20,420
So so much for the theory behind relative paths filings file extensions and absolute paths in the next

103
00:09:20,420 --> 00:09:21,050
lesson.

104
00:09:21,170 --> 00:09:25,760
I'll show you how to read that practice email into Jupiter notebook.

105
00:09:25,760 --> 00:09:29,630
I'm gonna go ahead and get some coffee but I hope I'll see you on the next lesson.
