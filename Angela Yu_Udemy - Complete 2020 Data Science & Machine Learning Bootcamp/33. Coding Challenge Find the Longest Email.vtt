WEBVTT
1
00:00:00.890 --> 00:00:11.510
For our second exercise what I'd like you to do is find the email with the most number of words.

2
00:00:11.510 --> 00:00:13.240
So this is after cleaning.

3
00:00:13.280 --> 00:00:15.450
Right.

4
00:00:16.430 --> 00:00:24.020
In this challenge I'd like you to print out the number of words in the longest email that is after cleaning

5
00:00:24.020 --> 00:00:31.070
and stemming and I'd like you to note the longest emails position in the list of cleaned emails.

6
00:00:32.580 --> 00:00:39.510
Also print out the stemmed list of words and the longest e-mail and print out the longest email from

7
00:00:39.510 --> 00:00:47.230
the data data frame I'll give you a few seconds to pause the video and give this a go.

8
00:00:51.370 --> 00:00:58.120
If you want a hint use the length function alien and practice the python list comprehension

9
00:01:01.440 --> 00:01:01.980
hard right.

10
00:01:02.010 --> 00:01:03.850
So here's the solution.

11
00:01:04.290 --> 00:01:07.340
One way to do this is to use a for loop.

12
00:01:07.340 --> 00:01:07.680
Yeah.

13
00:01:07.680 --> 00:01:09.360
Classic.

14
00:01:09.360 --> 00:01:17.940
In this case we would create an empty list C clean email under school lengths which is going to hold

15
00:01:17.940 --> 00:01:21.510
on to the number of characters in each email.

16
00:01:21.510 --> 00:01:25.370
So an empty list is credit with an empty pen square brackets.

17
00:01:25.650 --> 00:01:33.040
And then we write our for loop for sub list in stemmed nested list.

18
00:01:33.060 --> 00:01:40.250
This is where we've stored all our email bodies write.

19
00:01:40.330 --> 00:01:48.100
This is what we can iterate over and check the number of characters and we can check the number of characters

20
00:01:48.190 --> 00:01:55.480
with the alien function so alien parentheses sub list will check for the number of characters.

21
00:01:55.870 --> 00:02:02.200
But what we actually want to do with these number of characters is we want to append them to our empty

22
00:02:02.200 --> 00:02:04.810
list up here as the loop runs.

23
00:02:04.810 --> 00:02:15.220
So it'd be clean email underscore lengths dot append parentheses alien parentheses sub list and then

24
00:02:15.220 --> 00:02:20.290
to closing parentheses let's take a look at what this looks like.

25
00:02:20.370 --> 00:02:32.160
So let's shift enter and then maybe print my clean email lengths what I can see here is that the first

26
00:02:32.490 --> 00:02:39.120
email has 50 characters after stemming an after removing stop once that is the next one has 80 characters.

27
00:02:39.120 --> 00:02:41.140
The next one has ninety two.

28
00:02:41.220 --> 00:02:42.900
So this seems to work.

29
00:02:42.900 --> 00:02:49.400
But one thing we can do is instead of using this for loop we can also do it a minute very Python way

30
00:02:49.410 --> 00:02:51.420
we can use python.

31
00:02:51.420 --> 00:02:52.360
List comprehension.

32
00:02:52.380 --> 00:03:00.700
Write if we want to do it this way we can take our clean email lengths variable and simply set that

33
00:03:00.700 --> 00:03:04.660
equal to the result of the pipe humblest comprehension.

34
00:03:04.930 --> 00:03:13.790
The bit that we want I spend of course is alien parentheses simplest and the for loop would go inside

35
00:03:13.790 --> 00:03:14.690
these parentheses.

36
00:03:14.690 --> 00:03:24.940
So for some list in stemmed nested list this is how we can do it in the python list comprehension way

37
00:03:26.290 --> 00:03:33.040
to print out the number of words in the longest email.

38
00:03:33.130 --> 00:03:35.610
How would we do it.

39
00:03:35.680 --> 00:03:40.780
Well there's a python function for finding the largest value in a list and that's the max.

40
00:03:40.780 --> 00:03:51.050
Function Max clean email lengths will give us the largest value in this list.

41
00:03:51.590 --> 00:03:58.340
In this case the largest value is seven thousand six hundred and sixty one.

42
00:03:58.490 --> 00:04:07.940
This is these are the number of characters in the longest email in terms of where this email is in terms

43
00:04:07.940 --> 00:04:12.530
of its position you would have had to do a little bit of googling right.

44
00:04:12.530 --> 00:04:17.090
You would have had to find the position of this value.

45
00:04:17.090 --> 00:04:22.430
Seven thousand six hundred and sixty one in the clean email lengths list.

46
00:04:24.120 --> 00:04:36.720
So the email position in the list and also the data data frame because they match right is going to

47
00:04:36.720 --> 00:04:41.790
be found at NDP dot org.

48
00:04:41.820 --> 00:04:53.580
Max parentheses clean email lengths so none Pi has a handy handy function called arg.

49
00:04:53.620 --> 00:05:01.010
Max which will give us the location of the largest value in this list.

50
00:05:01.010 --> 00:05:06.190
So figuring this out was the second part of the challenge if you will now.

51
00:05:06.250 --> 00:05:07.720
Now this isn't the only way.

52
00:05:07.760 --> 00:05:13.760
And if you have another favorite way that you solve this problem please share it in the comments below

53
00:05:13.760 --> 00:05:22.850
this lesson and I'd be curious to have read and find out how you solve this problem so let me shift

54
00:05:22.850 --> 00:05:26.240
into to find out where this email is.

55
00:05:26.310 --> 00:05:35.950
It's a position five thousand four hundred and one bringing up the list of words in this email should

56
00:05:35.950 --> 00:05:37.080
be fairly simple.

57
00:05:37.240 --> 00:05:46.360
With all I have to do is feed this value into the square brackets for my stem nested list so NPR dot

58
00:05:46.830 --> 00:05:47.130
art.

59
00:05:47.140 --> 00:05:55.570
Max parentheses clean email lengths will show me what the words are that are in this list.

60
00:05:55.570 --> 00:06:00.850
This is five thousand six hundred all words long now.

61
00:06:00.870 --> 00:06:03.900
What about pulling out the original email from the data frame.

62
00:06:04.200 --> 00:06:11.700
In this case I would use data dot at because I know exactly which document idea where it kind of supply

63
00:06:12.660 --> 00:06:20.190
namely in P dad a hug Max parentheses clean email lengths.

64
00:06:20.190 --> 00:06:25.450
So this is for the row name right row location would be I at.

65
00:06:25.620 --> 00:06:33.920
But row name would be at but we've handily named our roads after integers so we can do that this way

66
00:06:35.460 --> 00:06:39.830
but for the column because we don't want the entire row.

67
00:06:39.990 --> 00:06:46.830
We'll just supply the name of the column after the comma so it'll be a message and this is it.

68
00:06:46.900 --> 00:06:48.350
This is the original email.

69
00:06:49.060 --> 00:06:55.400
After removing the header so you can see it's quite long.

70
00:06:57.500 --> 00:06:58.350
Brilliant.

71
00:06:58.460 --> 00:07:01.730
So I hope you solve this challenge on your own.

72
00:07:01.940 --> 00:07:09.730
And the solution was helpful in comparing your code with with mine in the next lessons.

73
00:07:09.790 --> 00:07:13.880
We're going to go back to working a bit more with our data frames.

74
00:07:13.970 --> 00:07:14.980
I'll see you there.
