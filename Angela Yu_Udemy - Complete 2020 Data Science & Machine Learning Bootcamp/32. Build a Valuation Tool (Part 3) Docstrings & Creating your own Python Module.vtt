WEBVTT
1
00:00:00.470 --> 00:00:00.870
How.

2
00:00:00.870 --> 00:00:08.080
The thing is all the prizes that are in our target were collected in the 1970s.

3
00:00:08.160 --> 00:00:15.060
Now I wasn't around back then but I am told the 70s was a glorious time to be alive.

4
00:00:15.060 --> 00:00:23.460
The thing I know for sure however is that one dollar in 1970 was worth much much more than one dollar

5
00:00:23.570 --> 00:00:25.110
today.

6
00:00:25.410 --> 00:00:34.170
In fact inflation is a horrific thing for anybody with savings and to buy a house today you need many

7
00:00:34.170 --> 00:00:36.120
many more dollars than you do.

8
00:00:36.120 --> 00:00:44.940
In the 1970s so given that we want to get a dollar price estimate that's a bit closer to today's values

9
00:00:45.320 --> 00:00:47.760
than 1970s values.

10
00:00:47.760 --> 00:00:54.990
Let's make an adjustment to the estimates that our model is spitting out.

11
00:00:54.990 --> 00:01:02.610
The only question is is how do we get a more realistic price out of our little evaluation tool.

12
00:01:02.610 --> 00:01:08.120
For starters let's take a look at what the median price in our data set is.

13
00:01:08.250 --> 00:01:18.500
As it stands currently and we can see this if I pull up num PIs median function so NPD up median and

14
00:01:18.500 --> 00:01:24.500
I supply the target values in the Boston underscore data set.

15
00:01:24.830 --> 00:01:32.630
So Boston underscored data set a target inside these parentheses for the median function will calculate

16
00:01:32.810 --> 00:01:44.660
the median value of a property in our dataset and what we see is that in 1970 the median value was twenty

17
00:01:44.660 --> 00:01:49.190
one thousand and two hundred dollars.

18
00:01:49.190 --> 00:01:53.130
This is where we were at in 1970 in Boston.

19
00:01:53.660 --> 00:01:55.240
But what about today.

20
00:01:55.700 --> 00:02:02.510
If I go we will Zillow Boston home values I am brought to this page here.

21
00:02:03.020 --> 00:02:12.680
So this is on Zillow dot com which actually gives us a median estimate for home prices in Boston as

22
00:02:12.680 --> 00:02:14.150
of today.

23
00:02:14.540 --> 00:02:23.270
And what we see here is that today the median home value is approximately five hundred and eighty three

24
00:02:23.270 --> 00:02:27.710
thousand dollars more than half a million.

25
00:02:27.980 --> 00:02:35.830
And that's a combination of inflation as well as increases in the real price of homes.

26
00:02:35.940 --> 00:02:46.130
Now as a challenge can you write the python code that converts the estimated price from our model which

27
00:02:46.130 --> 00:02:52.280
is in 1970s law prices to today's dollar values.

28
00:02:52.430 --> 00:02:55.610
You're gonna have to convert the estimate itself.

29
00:02:55.610 --> 00:02:59.310
The upper bound and the lower bound to today's prices.

30
00:02:59.510 --> 00:03:05.170
And once you've converted it round the values to the nearest thousand dollars.

31
00:03:05.210 --> 00:03:05.600
How.

32
00:03:05.620 --> 00:03:13.610
Give you a few seconds to pause the video and then I'll show you my approach to solving this problem.

33
00:03:13.680 --> 00:03:14.670
Ready.

34
00:03:14.670 --> 00:03:15.920
Here it goes.

35
00:03:15.930 --> 00:03:23.330
So the first thing I want to do his I'm going to say Zillow underscore median and a score.

36
00:03:23.340 --> 00:03:29.280
Price is equal to five eight three point three.

37
00:03:29.280 --> 00:03:37.530
This is the price in thousands that I saw on Zillow Web site for the median price in Boston at the time

38
00:03:37.530 --> 00:03:38.670
of recording.

39
00:03:38.970 --> 00:03:44.100
The next thing I want to do is I'm going to calculate some sort of scale factor the number we have to

40
00:03:44.100 --> 00:03:51.770
multiply my twenty one point two by in order to get a realistic value for today.

41
00:03:51.780 --> 00:03:56.910
So this is gonna be a scale and the scope factor which is equal to.

42
00:03:57.230 --> 00:04:01.970
Well it's going to be equal to 5 8 3 divided by twenty one point two.

43
00:04:01.980 --> 00:04:02.680
Right.

44
00:04:02.700 --> 00:04:06.000
So Zillow on score median

45
00:04:08.430 --> 00:04:24.350
underscore price divided by and p dot median parentheses Boston underscore data said Dot target.

46
00:04:25.340 --> 00:04:34.360
Let's take a look at what the scale factor is equal to scale and scope factor shift into we now see

47
00:04:34.480 --> 00:04:40.650
that the dollar prices should be multiplied by twenty seven point five.

48
00:04:40.860 --> 00:04:41.130
Okay.

49
00:04:41.160 --> 00:04:43.170
So that was step one.

50
00:04:43.210 --> 00:04:44.560
Now let me call my function.

51
00:04:44.560 --> 00:04:48.690
So my function will give me a log estimate.

52
00:04:49.030 --> 00:04:53.860
It will give me an upper price and a lower price.

53
00:04:54.160 --> 00:04:58.550
And it will give me some confidence interval.

54
00:04:58.720 --> 00:05:04.870
Those of course are gonna get their values from our function get on the school log on the school estimate

55
00:05:05.770 --> 00:05:15.460
and then when I calculate I don't know a price estimate for a mansion nine rooms and maybe students

56
00:05:15.460 --> 00:05:26.160
on a score per square classroom is gonna be equal to say 15 next and score to underscore river.

57
00:05:26.290 --> 00:05:34.900
It's gonna be equal to False and high school confidence it's going gonna be equal to.

58
00:05:34.900 --> 00:05:36.970
No false it's varied up a bit.

59
00:05:37.470 --> 00:05:37.950
Okay.

60
00:05:37.960 --> 00:05:43.930
So now I've got my scale factor calculated and I've got values that I want to calculate from my estimate

61
00:05:44.320 --> 00:05:51.280
my upper and lower bounds and my confidence interval limit shift and to make sure this works and it

62
00:05:51.280 --> 00:05:52.750
does no errors.

63
00:05:52.750 --> 00:06:05.620
Now what I'll do is I'll convert to today's dollars so the dollar estimate is gonna be equal to first

64
00:06:05.620 --> 00:06:17.260
off reversing the lock transformation so end p dot e times times log and the school estimate then times

65
00:06:17.620 --> 00:06:22.600
1000 because our dollars are in thousands and then times.

66
00:06:22.600 --> 00:06:28.500
Well you guessed that these scale underscore a factor that we've calculated above.

67
00:06:28.570 --> 00:06:32.750
This gives us a dollar estimate for today.

68
00:06:32.800 --> 00:06:37.390
Let's take a look at what this one is actually a dollar and a school estimate shift enter.

69
00:06:37.900 --> 00:06:45.370
Here's our ungrounded how you for a mansion that is not next to the river and has a pretty small class

70
00:06:45.370 --> 00:06:55.120
size 15 students estimate in today's dollars is approximately eight hundred and twenty six thousand.

71
00:06:55.120 --> 00:07:04.480
Now we just need to round it right and we need another comment see round the dollar values to nearest

72
00:07:07.280 --> 00:07:12.550
thousand how create another variable that's going to hold onto the rounded estimate.

73
00:07:12.670 --> 00:07:15.140
So it's a rounded underscore estimate.

74
00:07:15.140 --> 00:07:20.570
It's gonna be equal to the return value from some sort of rounding function.

75
00:07:20.570 --> 00:07:32.550
I want to use num pies around function so end p dot around parentheses $ underscore estimate comma and

76
00:07:32.840 --> 00:07:35.290
I have to say I want to round to the nearest thousand.

77
00:07:35.570 --> 00:07:39.690
So I want to say minus three.

78
00:07:39.710 --> 00:07:42.490
Let's take a look at what this output actually reads.

79
00:07:42.520 --> 00:07:46.180
So rounded let's go est shift enter.

80
00:07:46.220 --> 00:07:49.280
And here we see it's eight hundred and twenty six thousand.

81
00:07:49.280 --> 00:07:52.090
So this is a rounded value.

82
00:07:52.250 --> 00:07:53.050
Brilliant.

83
00:07:53.060 --> 00:08:00.320
Now all that's left to do is do the same thing for the upper value and a lower value.

84
00:08:00.620 --> 00:08:12.140
I can first off copy this line of code paste that twice change my variable name so C high and then low

85
00:08:13.010 --> 00:08:21.890
and we're transforming upper and we're transforming lower and then we're also going to round the upper

86
00:08:22.370 --> 00:08:24.250
and the lower values.

87
00:08:24.290 --> 00:08:35.650
So it's going to be rounded high and rounded low for dollar on a school high in dollar on a school low

88
00:08:38.570 --> 00:08:46.670
let me print all of this out with F strings so print parentheses f single quotes.

89
00:08:46.670 --> 00:08:56.080
The estimated property value is curly braces rounded underscore est full stop shift.

90
00:08:56.120 --> 00:08:57.100
Enter.

91
00:08:57.140 --> 00:09:05.780
That works except I've got a typo as to mated property value let's add another print statement.

92
00:09:05.780 --> 00:09:11.180
Print f single quotes at curly braces.

93
00:09:12.620 --> 00:09:27.160
C O and f percent confidence the valuation range is final print statement f single quotes USD.

94
00:09:27.600 --> 00:09:43.790
Space curly braces rounded and a school low at the lower end to use the curly braces rounded and the

95
00:09:43.790 --> 00:09:48.710
score high at the high end.

96
00:09:48.710 --> 00:09:49.320
Full stop.

97
00:09:50.660 --> 00:09:56.540
Okay so that was just a lot of typing but now we can look at our output.

98
00:09:56.540 --> 00:10:05.060
Nicely worded using the variables that we've defined earlier and signed some f strings.

99
00:10:05.060 --> 00:10:09.070
Let's take another look at the output for this cell.

100
00:10:09.200 --> 00:10:10.100
Brilliant.

101
00:10:10.100 --> 00:10:13.110
That works beautifully.

102
00:10:13.110 --> 00:10:14.160
Now tell you what.

103
00:10:14.450 --> 00:10:20.020
Let's add all of this to a function.

104
00:10:20.300 --> 00:10:26.000
Let's create another function called get dollar estimate and make this function to all the conversion

105
00:10:26.690 --> 00:10:31.980
as well as call this function here to actually get the estimate.

106
00:10:31.990 --> 00:10:38.720
So I want to define a function the f get on the school dollar on the school estimate.

107
00:10:38.720 --> 00:10:45.500
Parentheses colon and then inside the body of this function I'm going to put all the code that we've

108
00:10:45.500 --> 00:10:46.670
written above.

109
00:10:46.730 --> 00:10:53.510
So all of this up to here will go inside of the function.

110
00:10:53.580 --> 00:11:03.190
So copy this I'm not pasted in here and then you'll see it's not indented so I'm going to have to indented.

111
00:11:03.210 --> 00:11:09.960
So it's actually part of this function and I can do that by selecting all the lines and hitting tab

112
00:11:10.140 --> 00:11:11.520
on my keyboard.

113
00:11:11.520 --> 00:11:17.670
Now what we want is we want this function here to actually take again like the 4 arguments that we're

114
00:11:17.910 --> 00:11:21.790
passing through to our other function call.

115
00:11:22.080 --> 00:11:23.990
We can call the first one arm.

116
00:11:24.360 --> 00:11:27.930
We can call the second one P.T. ratio.

117
00:11:27.930 --> 00:11:33.740
We can call the third one chars and set that equal to False by default.

118
00:11:34.170 --> 00:11:43.020
And then the last argument we can call it launch on the score range and set that equal to true by default.

119
00:11:43.110 --> 00:11:51.360
And this means that in our nested function call right here to get log estimate we can pass through these

120
00:11:51.360 --> 00:11:52.770
parameters.

121
00:11:52.770 --> 00:11:54.330
So this won't be number nine.

122
00:11:54.360 --> 00:11:59.680
This would be R.M. this won't be students per classroom equals 15.

123
00:11:59.800 --> 00:12:03.510
This will be P.T. ratio.

124
00:12:03.610 --> 00:12:12.710
This won't be next to river equals false but next to river equals say Chaz and this won't be high confidence

125
00:12:12.710 --> 00:12:18.100
equals false but it'll be high confidence equals large range.

126
00:12:18.320 --> 00:12:23.270
So I hope that you can see how using these different arguments works for these two.

127
00:12:23.270 --> 00:12:30.230
I've used an argument by keyword so next to reverse the keyword chars is the value which we'll get from

128
00:12:30.230 --> 00:12:31.120
this function call.

129
00:12:31.970 --> 00:12:40.430
And for this argument high confidence is the key word and launch range is the value R.M. and P.T. ratio

130
00:12:41.420 --> 00:12:47.610
are just the values because I'm passing these arguments by position not by keyword.

131
00:12:47.630 --> 00:12:51.100
So this is number one this is argument number two.

132
00:12:51.290 --> 00:12:58.880
If I didn't want to pass the arguments by position I could use a keyword as well so I could see students

133
00:12:59.240 --> 00:13:05.870
on the school on a school classroom is equal to T ratio.

134
00:13:06.620 --> 00:13:15.060
And that's because this is the keyword that we've defined in our signature forget log estimate all right

135
00:13:15.130 --> 00:13:17.470
so we've got our function.

136
00:13:17.470 --> 00:13:20.050
We've got our way of getting the log estimates.

137
00:13:20.050 --> 00:13:24.710
We've got our way of converting the log estimates to today's dollars.

138
00:13:24.850 --> 00:13:30.280
And we've got the point where we're rounding those values and then where we're showing some sort of

139
00:13:30.370 --> 00:13:33.400
output to whoever's calling the function.

140
00:13:33.580 --> 00:13:35.890
Let's try all of this out for good measure.

141
00:13:36.100 --> 00:13:45.850
So get on the school dollar on a school estimate for a small apartment with C our M equal to two and

142
00:13:45.940 --> 00:13:53.510
a terrible school with two hundred kids so P T ratio is equal to 200.

143
00:13:53.650 --> 00:13:57.690
But on the upside this apartment will be next to the river.

144
00:13:57.700 --> 00:14:06.900
So Charles is equal to true before a hit shift enter on the cell and make sure that I have had shift

145
00:14:06.910 --> 00:14:15.740
enter on this cell beforehand and now I know that my function will be recognized as I do the same here

146
00:14:17.190 --> 00:14:25.790
the estimated property value is zero and at 95 percent confidence the valuation range is between zero

147
00:14:26.300 --> 00:14:30.880
at the lower end and a thousand dollars at the high end.

148
00:14:30.890 --> 00:14:32.490
Why is that.

149
00:14:32.520 --> 00:14:37.650
That's because the parameters that we've supplied here are completely unrealistic.

150
00:14:37.650 --> 00:14:40.070
Write this number in particular.

151
00:14:40.250 --> 00:14:43.900
You never have 200 kids per teacher in the local school.

152
00:14:43.910 --> 00:14:51.670
A more realistic number something like say 30 which will then give us a more realistic estimate.

153
00:14:51.830 --> 00:14:58.670
The same problem we might face if we have say zero rooms in the apartment which of course is nonsense

154
00:14:59.510 --> 00:15:04.160
in this case even for a property with zero rooms which is impossible.

155
00:15:04.310 --> 00:15:11.710
We get a price estimate how there's two ways that you can avoid this kind of situation.

156
00:15:11.810 --> 00:15:12.610
Right.

157
00:15:12.620 --> 00:15:20.540
First off you might have to inform people what get dollar estimate does and what these values actually

158
00:15:20.540 --> 00:15:24.430
represent before they start just calling this function.

159
00:15:24.530 --> 00:15:28.250
And the second thing that you can do is you can reject giving an estimate.

160
00:15:28.250 --> 00:15:31.760
If these values are unrealistic.

161
00:15:31.760 --> 00:15:33.500
Let me show you how you could do that for example.

162
00:15:33.890 --> 00:15:44.120
So coming up here and at the very top of the function we could have an expression like if our home is

163
00:15:44.120 --> 00:15:51.160
smaller than one column print single quotes.

164
00:15:51.700 --> 00:15:55.470
That is unrealistic.

165
00:15:55.540 --> 00:15:56.500
Full stop.

166
00:15:56.500 --> 00:15:58.530
Try again.

167
00:15:58.540 --> 00:15:59.350
Yeah.

168
00:15:59.470 --> 00:16:05.500
And then still within this F block as you can tell by the indentation we return.

169
00:16:06.040 --> 00:16:15.250
So as soon as this return instruction is hit none of these following lines of code will be executed.

170
00:16:15.250 --> 00:16:22.060
We had shift to enter refresh the cell and then I'm going to try to run this code again see where we

171
00:16:22.060 --> 00:16:31.030
get our function now does not provide an estimate when the when the input for the rooms are completely

172
00:16:31.150 --> 00:16:32.640
unreasonable.

173
00:16:32.710 --> 00:16:39.220
If you wanted to check two things say Say we wanted to make sure that this value here is not smaller

174
00:16:39.220 --> 00:16:40.750
than one as well right.

175
00:16:40.930 --> 00:16:48.310
Then what we could do is we'd come up here to our if statement and then we could use a logical or two

176
00:16:48.340 --> 00:17:00.330
check two separate conditions so if our M is smaller than one or if P T ratio is smaller than one then

177
00:17:00.600 --> 00:17:05.640
print this line and return from the function.

178
00:17:05.640 --> 00:17:12.390
In other words one of the things that you can do to make sure that your functions aren't being completely

179
00:17:12.390 --> 00:17:18.600
abused is to actually check the values that are being supplied when they're being called.

180
00:17:18.600 --> 00:17:25.800
So if I had shift into now and I'd change this line to something reasonable like say six rooms and I

181
00:17:25.800 --> 00:17:34.530
try to change this line here from Piti ratio of 30 to Piti ratio of minus 60 then I'll get the same

182
00:17:34.740 --> 00:17:36.100
message.

183
00:17:36.120 --> 00:17:44.880
Okay so strategy 1 was checking for inputs but better yet let's add some sort of description about what

184
00:17:44.880 --> 00:17:45.990
this function does.

185
00:17:46.080 --> 00:17:52.080
So that the person using it can pull up say the quick documentation if a press shift enter on this now

186
00:17:54.190 --> 00:17:59.200
I can see the signature I can see it's is our M P T ratio charge is equal to False so see the default

187
00:17:59.200 --> 00:18:07.120
values and hitting that plus sign I don't see anything else what I would like to see though is something

188
00:18:07.120 --> 00:18:16.060
called a dark string the dark string should give us a description of our function what it does what

189
00:18:16.060 --> 00:18:19.450
its inputs are and more or less like how to use it.

190
00:18:19.570 --> 00:18:27.910
Let me show you how we can add this to our get dollar estimate function at the very very top we can

191
00:18:27.910 --> 00:18:35.920
put in three double quotes and as you can see there's already six double quotes here because Jupiter

192
00:18:35.930 --> 00:18:40.710
notebook inserted the closing three double quotes.

193
00:18:40.930 --> 00:18:45.970
In other words you have three double quotes at the beginning and you have three double quotes at the

194
00:18:46.060 --> 00:18:52.760
end the first three double quotes mark the beginning of the dark string the last three quotes mark the

195
00:18:52.940 --> 00:18:59.630
end of the dark string and whatever we put in between will appear in the quick documentation check it

196
00:18:59.630 --> 00:19:16.450
out estimate the price of a property in Boston full stop shift into and then shift Tab Well now show

197
00:19:17.050 --> 00:19:23.650
this description in the quick documentation one of the good things to do when you're writing function

198
00:19:23.650 --> 00:19:28.930
that you want other people to use is to include a little bit of information about what the function

199
00:19:28.930 --> 00:19:32.630
does and also what the keyword arguments are.

200
00:19:33.580 --> 00:19:42.790
After all if we do that on any p dot around and press a little plus sign we do indeed see some information

201
00:19:43.150 --> 00:19:48.810
on the parameters that this function takes a decimals and out.

202
00:19:48.890 --> 00:19:49.060
Yeah.

203
00:19:49.090 --> 00:19:56.490
So we can see a little description here and we can use this function the way it was intended to.

204
00:19:56.620 --> 00:19:58.950
Let's do the same thing for our function.

205
00:19:58.960 --> 00:20:11.260
So if I come in here and say keyword arguments call and our M hyphen hyphen number of rooms in the property

206
00:20:12.550 --> 00:20:28.110
and then P T ratio hyphen hyphen number of students put teacher in the classroom for the school in the

207
00:20:28.200 --> 00:20:33.950
area Chaz hyphen iPhone true.

208
00:20:34.080 --> 00:20:40.990
If the property is next to the river false.

209
00:20:41.650 --> 00:20:45.090
Otherwise large underscore range.

210
00:20:45.210 --> 00:20:54.450
I have an iPhone true for a 95 percent prediction interval.

211
00:20:57.580 --> 00:21:03.460
False for a 68 percent interval

212
00:21:06.350 --> 00:21:14.780
adding this description here for our keyword arguments and hitting shift enter allows us to see what

213
00:21:14.780 --> 00:21:23.340
these arguments are and get a little description in the quick documentation when we had shift enter

214
00:21:23.650 --> 00:21:25.150
can take a look.

215
00:21:25.200 --> 00:21:26.150
Brilliant.

216
00:21:26.220 --> 00:21:26.680
All right.

217
00:21:26.700 --> 00:21:29.760
We're almost made it to the end.

218
00:21:29.790 --> 00:21:35.910
The last thing I want to show you is how we can package what is in this chip in a notebook here.

219
00:21:36.150 --> 00:21:45.890
As a Python module if we look at our MLK projects folder here a Python module is a file that ends in

220
00:21:46.160 --> 00:21:50.000
dot P Y to create one of these files.

221
00:21:50.090 --> 00:22:01.780
What we can do is we can upload a dot P Y file to this folder or alternatively we can go to new text

222
00:22:01.780 --> 00:22:08.600
file and create this P Y file in Jupiter notebook directly.

223
00:22:08.710 --> 00:22:17.620
I personally quite like the atom text editor for writing Python code and editing it.

224
00:22:17.910 --> 00:22:23.740
You of course you can use other text editors as well to create these profiles but atom is definitely

225
00:22:23.740 --> 00:22:30.070
a good one to save you the trouble of installing a text that's a I'll show you quickly how you can do

226
00:22:30.070 --> 00:22:33.320
this in Jupiter notebook directly.

227
00:22:33.370 --> 00:22:39.320
First off let's rename this file Let's rename it as valuation.

228
00:22:39.370 --> 00:22:40.910
Dot P Y.

229
00:22:41.140 --> 00:22:46.920
Or better yet let's name it as Boston under school valuation.

230
00:22:46.930 --> 00:22:50.210
Dot P Y click Okay.

231
00:22:50.790 --> 00:22:58.970
And now we're gonna copy some of our Python code and paste it into this empty dot P Y file.

232
00:22:58.970 --> 00:23:01.620
Let's copy the imports for example.

233
00:23:01.760 --> 00:23:07.420
Put those here let's copy the cell we're gathering the data.

234
00:23:07.940 --> 00:23:08.630
Put this here.

235
00:23:09.740 --> 00:23:19.370
Coming down let's copy this sale here with our indices and our property stats variable.

236
00:23:19.490 --> 00:23:30.950
Copy it and put it here I don't really need this comment so I deleted scroll down Add a few more lines.

237
00:23:33.480 --> 00:23:35.500
Go back to our notebook.

238
00:23:35.510 --> 00:23:39.910
Scroll down a little more copy the part.

239
00:23:39.910 --> 00:23:52.170
We're running our regression put it in here come back copy the function where we're doing our log estimate

240
00:23:52.170 --> 00:24:04.800
of course add it to our DOT P. why file and then come down here where we've got o scale factor.

241
00:24:05.060 --> 00:24:13.160
Copy those two lines go into our p y file scroll to the top in this case and I want to add it below

242
00:24:13.160 --> 00:24:15.660
our crime and Zeldin indices.

243
00:24:15.680 --> 00:24:17.130
So going to paste it in here.

244
00:24:17.300 --> 00:24:25.970
And then finally I'm going to grab all the code in this cell here copied and pasted it at the very end

245
00:24:26.120 --> 00:24:29.380
of my dot P Y file.

246
00:24:29.570 --> 00:24:41.430
All that's left to do now is file save and now in my projects folder I have a Boston a school valuation

247
00:24:41.430 --> 00:24:49.230
that P Y module that contains all my Python code which I can now use in any of the Python notebooks

248
00:24:49.740 --> 00:24:51.850
in this project folder.

249
00:24:51.870 --> 00:25:01.140
Check it out in the valuation tool I can come down and I can say import Boston under school valuation

250
00:25:02.040 --> 00:25:10.950
as that and I can call a function from this module namely our get dollar estimate function with Val

251
00:25:11.160 --> 00:25:12.590
dot get on a scope.

252
00:25:12.940 --> 00:25:24.080
Donna on the score estimate parentheses six twelve and troop hitting shift enter.

253
00:25:24.750 --> 00:25:33.150
I get a price estimate all my arguments here are passed by position and this function call here comes

254
00:25:33.150 --> 00:25:34.770
from the module.

255
00:25:34.770 --> 00:25:35.010
Right.

256
00:25:35.010 --> 00:25:41.110
It comes from the module that I've just imported this one here comes from the notebook.

257
00:25:41.160 --> 00:25:47.760
This one here comes from our Boston underscore valuation module.

258
00:25:47.760 --> 00:25:54.790
Now of course this is a lot more clear if I open my multi variable regression notebook and try to do

259
00:25:54.790 --> 00:26:05.590
the same thing 100 the notebook imports I can import Boston on school valuation as vow and if it shift

260
00:26:05.620 --> 00:26:22.550
enter here scroll to the very bottom and see Val dot get $ underscore estimate parentheses 8 15 false

261
00:26:23.780 --> 00:26:32.190
I will get an output from my get dollar estimate function from inside my dot P Why file.

262
00:26:32.190 --> 00:26:33.680
Fantastic.

263
00:26:33.930 --> 00:26:37.620
So we've covered quite a few things again in this lesson.

264
00:26:37.620 --> 00:26:44.730
It's been a review of a lot of the concepts that we've talked about so far but we've also learned a

265
00:26:44.790 --> 00:26:48.290
lot of new things on the Python front.

266
00:26:48.360 --> 00:26:55.170
We've learned how to create functions with optional arguments how to call these functions with the arguments

267
00:26:55.680 --> 00:27:00.140
where we supply the values by position and by keyword.

268
00:27:00.300 --> 00:27:05.310
We've learned about how to make the quick documentation show up for functions that we ourselves have

269
00:27:05.310 --> 00:27:07.790
written using dark strings.

270
00:27:08.160 --> 00:27:14.050
We've covered how you might exit a function if you don't like the inputs that it's getting.

271
00:27:14.190 --> 00:27:21.420
And we've covered how to use if else blocks to check for condition or even to different conditions.

272
00:27:21.420 --> 00:27:27.030
So again congratulations for making it all the way through this.

273
00:27:27.120 --> 00:27:34.680
I know the learning curve is getting steeper and I look forward to seeing you in the next modules.

274
00:27:34.680 --> 00:27:35.250
Take care.
