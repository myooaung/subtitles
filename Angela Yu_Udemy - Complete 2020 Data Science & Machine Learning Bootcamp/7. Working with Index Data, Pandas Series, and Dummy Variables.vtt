WEBVTT
1
00:00:00.630 --> 00:00:06.980
The next feature I want you to investigate is called RAD.

2
00:00:07.030 --> 00:00:16.390
This is a measure of the accessibility to highways for the property and I want to challenge you to use

3
00:00:16.480 --> 00:00:22.690
map plot lib to generate a meaningful histogram for this rad feature.

4
00:00:22.720 --> 00:00:28.900
This might be a little tricky and require some thought so pause the video play with the python code

5
00:00:29.410 --> 00:00:33.170
and have a think about what this feature is actually telling us.

6
00:00:33.430 --> 00:00:39.650
Oh a hand for the histogram pick a beautiful royal purple color while you're at it.

7
00:00:39.950 --> 00:00:42.400
I'll give you a few seconds to pass the video.

8
00:00:44.300 --> 00:00:45.980
Here's the solution.

9
00:00:46.160 --> 00:00:51.200
Let's check what would happen if we took this code here.

10
00:00:51.680 --> 00:00:53.060
Pasted it in.

11
00:00:53.060 --> 00:01:06.600
Changed our name to Rand changed the X label to accessibility to highways and changed the hex code to

12
00:01:06.660 --> 00:01:12.440
a nice purple from material palette dot com that change that here.

13
00:01:12.460 --> 00:01:15.780
Paste it in and hit shift enter.

14
00:01:16.160 --> 00:01:19.800
We get something like this now.

15
00:01:20.000 --> 00:01:23.090
This looks a little strange to me.

16
00:01:23.450 --> 00:01:31.610
It seems like the histogram is bins are hiding some information from us because the bins for this histogram

17
00:01:31.880 --> 00:01:36.960
seem a little too broad if I look at the python code.

18
00:01:37.070 --> 00:01:38.610
BLT dot hist.

19
00:01:39.120 --> 00:01:47.610
We haven't supplied any bins as an argument to this function call and this means we're using automatic

20
00:01:47.870 --> 00:01:48.850
binning.

21
00:01:48.870 --> 00:01:54.610
We're letting my plot lib decide on how to show us the histogram.

22
00:01:54.760 --> 00:02:03.000
Maybe what we need to do is investigate what Rand actually is and how accessibility to highways is actually

23
00:02:03.000 --> 00:02:03.930
measured.

24
00:02:03.930 --> 00:02:06.670
For example what are the units in red.

25
00:02:06.720 --> 00:02:13.200
Perhaps we should try to understand this before creating our visualization so let's output RAD TO OUR

26
00:02:13.200 --> 00:02:22.410
Jupiter notebook so when a data square brackets single quotes are a d all caps and head shift enter

27
00:02:23.310 --> 00:02:25.740
and we scroll down and just take a look at this

28
00:02:29.570 --> 00:02:37.870
so I've got five hundred and six entries and all of these seem to be whole numbers.

29
00:02:38.140 --> 00:02:42.090
So starts out with one two three.

30
00:02:42.160 --> 00:02:44.740
Some of them have 5.

31
00:02:44.770 --> 00:02:46.950
Some of them have 24.

32
00:02:47.090 --> 00:02:47.470
Mm hmm.

33
00:02:48.130 --> 00:02:56.930
Okay so this is a contrast to the house prices Rand is a bunch of distinct integer values and all the

34
00:02:56.930 --> 00:02:59.000
values seem to be whole numbers.

35
00:02:59.000 --> 00:03:06.080
A bit way that we can see this and just look at how many unique values there are in the series is to

36
00:03:06.080 --> 00:03:11.100
use the value on the score counts method on this series.

37
00:03:11.120 --> 00:03:21.500
So I want to put a dot after data square brackets Rand and write value on a score counts parentheses

38
00:03:22.030 --> 00:03:24.730
and hit shift enter.

39
00:03:24.740 --> 00:03:33.770
So this gives me a beautiful summary of how many observations in this column in Rand have a particular

40
00:03:33.770 --> 00:03:34.870
value.

41
00:03:34.940 --> 00:03:39.760
So for example we can see that 17 observations.

42
00:03:39.780 --> 00:03:48.680
Yeah 17 properties in the dataset have a rad value of seven and there's one hundred and thirty two dwellings

43
00:03:48.950 --> 00:03:53.780
that have the highway accessibility value of 24.

44
00:03:53.840 --> 00:04:01.940
So keeping this in mind and scrolling back up to the description already actually refers to an index

45
00:04:02.210 --> 00:04:05.070
of accessibility to radial highways.

46
00:04:05.240 --> 00:04:06.500
So that's what we're looking at.

47
00:04:06.620 --> 00:04:08.930
We're looking at an index.

48
00:04:09.290 --> 00:04:16.780
In other words accessibility to highways is ranked from 1 to 24.

49
00:04:17.060 --> 00:04:23.900
One is the value for low accessibility and 24 is the value for high accessibility.

50
00:04:23.960 --> 00:04:33.620
In other words a property with poor accessibility to transport scores low on this index and a property

51
00:04:33.800 --> 00:04:39.420
that has good accessibility to transport has a high value on this index.

52
00:04:39.500 --> 00:04:41.450
So looking at our histogram again.

53
00:04:41.660 --> 00:04:49.700
So what we probably want is we want this histogram to reflect these index values instead of this automatic

54
00:04:49.870 --> 00:04:50.930
binning.

55
00:04:51.410 --> 00:04:56.300
We want to show these index values and we don't want to been several of the indexed values together

56
00:04:57.270 --> 00:05:03.470
and that's because the data in this rad feature already has pretty much our bins mapped out for us.

57
00:05:03.590 --> 00:05:05.960
So we're gonna use these.

58
00:05:05.960 --> 00:05:13.760
I can modify the histogram code right here to take this into account simply by adding the bins argument

59
00:05:14.840 --> 00:05:18.660
and setting it equal to the value twenty four.

60
00:05:18.710 --> 00:05:24.380
Now let me refresh my histogram what all right.

61
00:05:24.410 --> 00:05:31.650
So that completes the challenge we plotted our histogram for the rad feature and what we can see is

62
00:05:31.650 --> 00:05:37.010
that there's quite a few properties between the 1 and 7 range on the index.

63
00:05:37.180 --> 00:05:43.970
And there's also a whole bunch of properties for the value 24 on the index but um you know what this

64
00:05:43.970 --> 00:05:54.600
histogram kind of looks like it looks like a bar chart hand a bar chart is a histogram is cousin histogram

65
00:05:54.740 --> 00:05:58.440
and bar charts can be used to pretty much show the same information.

66
00:05:58.460 --> 00:06:06.020
So let me show you the python code for creating a bar chart using matte plot lib as well.

67
00:06:06.020 --> 00:06:12.770
This is another data visualization technique that's really handy to have in your tool belt so when I

68
00:06:12.770 --> 00:06:20.800
come down here at a few more cells and I'm gonna make use of these values counts method someone to copy

69
00:06:20.890 --> 00:06:31.450
this line of code and I'm going to store the output the result from this code in a variable called Frequency

70
00:06:34.790 --> 00:06:39.550
frequency is equal to data square brackets.

71
00:06:39.550 --> 00:06:44.010
Single quotes red dot value counts now.

72
00:06:44.050 --> 00:06:48.390
Frequency is also a panda's series.

73
00:06:48.460 --> 00:06:58.440
You can see this if I write the code type parentheses frequency shift enter so data square brackets.

74
00:06:58.770 --> 00:07:06.190
This a series but the return value of this value underscore counts method is also a series.

75
00:07:07.080 --> 00:07:12.840
And the reason I'm showing you this is because I want to draw your attention to something when it come

76
00:07:12.840 --> 00:07:19.650
at the sound and what I want to do is I want to access these values right here.

77
00:07:19.710 --> 00:07:25.310
I just want to access the labels for these unique index values.

78
00:07:25.750 --> 00:07:27.790
I can do this in one of two ways.

79
00:07:27.820 --> 00:07:33.760
Check it out if I see frequency dot index

80
00:07:36.500 --> 00:07:41.210
then I'll get a collection of all these index values in my series.

81
00:07:41.540 --> 00:07:47.020
So this is one way of doing it when a comment is out and I'll show you the second way.

82
00:07:48.910 --> 00:07:52.500
Frequency dot axes.

83
00:07:52.540 --> 00:08:00.470
Square brackets zero if I had shift into then I get exactly the same result.

84
00:08:01.910 --> 00:08:11.350
The axes attribute of the series can also be used to retrieve the row axes labels and the reason I'm

85
00:08:11.350 --> 00:08:18.430
interested in these in the first place is because we're going to use these to label the x axis on the

86
00:08:18.430 --> 00:08:20.950
bond chart that we're going to create.

87
00:08:20.950 --> 00:08:23.100
So check it out and when I come at this out.

88
00:08:23.560 --> 00:08:31.660
And then to create the bar chart I'm going to take my Mac plot lib object party dot bar parentheses

89
00:08:32.260 --> 00:08:34.900
and then I have to supply two things.

90
00:08:34.930 --> 00:08:37.720
The first is what I want on the x axis.

91
00:08:37.720 --> 00:08:43.860
And this is gonna be frequency dot index.

92
00:08:44.090 --> 00:08:50.020
And the second thing I have to supply for the bar chart is the height of the individual bars.

93
00:08:50.050 --> 00:08:54.210
So this will be an argument called height and when set that equal to.

94
00:08:54.730 --> 00:09:00.040
Well this would just be the values inside my frequency variable.

95
00:09:00.190 --> 00:09:01.890
These values here.

96
00:09:02.780 --> 00:09:03.690
So what's the height.

97
00:09:03.710 --> 00:09:12.670
Is equal to frequency and then we're put PDT Dutch show afterwards and scroll down and it shift into

98
00:09:12.700 --> 00:09:22.060
the and this is what we get as it is there's no labels on the axes and there's also the default color

99
00:09:22.070 --> 00:09:23.360
being used.

100
00:09:23.360 --> 00:09:29.210
So we're going to do his I'm going to make this bar chart a little larger.

101
00:09:29.230 --> 00:09:34.470
Let me grab this coat up here that we have come down here.

102
00:09:34.480 --> 00:09:36.260
Paste it in.

103
00:09:36.420 --> 00:09:43.830
I'm going to delete this line here and then when I leave my ex label and white label as they are and

104
00:09:43.830 --> 00:09:46.680
hit shift enter.

105
00:09:46.850 --> 00:09:48.190
There we go.

106
00:09:48.200 --> 00:09:54.470
So this is a bar chart but I want to draw your attention to one thing the neat thing about the code

107
00:09:54.470 --> 00:10:00.560
we've just written is that we haven't had to specify the number of pins ahead of time.

108
00:10:00.560 --> 00:10:03.840
We haven't had the right pins as equal to 24.

109
00:10:04.070 --> 00:10:08.280
We haven't had to hard code the number 24 for the number of pins.

110
00:10:08.330 --> 00:10:17.310
Instead we wrote some Python code using value counts which figured out the best way to draw the x and

111
00:10:17.310 --> 00:10:20.960
y axes for our bar chart for us.

112
00:10:21.220 --> 00:10:26.260
So this is a technique that you can apply to other types of index data as well.

113
00:10:26.320 --> 00:10:33.060
It makes the code that we've just written a lot more flexible than hand coding particular integer values.

114
00:10:33.160 --> 00:10:35.100
And that's a good thing.

115
00:10:35.380 --> 00:10:41.860
You're also gonna be looking at this chart here and you might be thinking hmmm this looks a lot better

116
00:10:41.980 --> 00:10:45.990
than the histogram just because it's got these spaces in between the bars.

117
00:10:46.300 --> 00:10:51.520
Because if we look at our histogram kind of looks like this at the moment all the bins all the bars

118
00:10:51.850 --> 00:10:54.100
are jam packed together.

119
00:10:54.130 --> 00:10:59.000
So let me give you a little challenge so you can familiarize yourself with the histogram function at

120
00:10:59.020 --> 00:11:01.180
a little better as well.

121
00:11:01.180 --> 00:11:06.970
I want you to modify this histogram so that it's also got some spaces between the boss.

122
00:11:06.970 --> 00:11:13.180
The trick will be to look at the documentation by say pulling up the quick documentation in the notebook

123
00:11:13.540 --> 00:11:21.690
and looking for the right argument to supply to the function call you can pull up the quick documentation

124
00:11:21.690 --> 00:11:27.780
by pressing shift and then tab on your keyboard and hitting this little plus sign and scrolling down

125
00:11:27.870 --> 00:11:29.200
and taking a look at this.

126
00:11:29.290 --> 00:11:35.100
Here I'll give you a few seconds to pause the video so you can find the parameter that you have to modify

127
00:11:35.490 --> 00:11:40.340
and give the boss a little bit more of a breathing room.

128
00:11:40.350 --> 00:11:44.920
How did you get on the just hold it here's the solution.

129
00:11:44.920 --> 00:11:53.260
The argument that we need to specify in this method call is are with by default.

130
00:11:53.260 --> 00:11:55.480
This has the value none.

131
00:11:55.480 --> 00:11:59.290
But let's check out what the description says for our width

132
00:12:03.080 --> 00:12:09.570
if I scroll down in the quick documentation I can see that are with is an optional argument and that

133
00:12:09.570 --> 00:12:18.500
it is a number that specifies the relative width of the bars as a fraction of the total bin width and

134
00:12:18.510 --> 00:12:19.990
the first time I read this.

135
00:12:20.490 --> 00:12:23.600
That didn't make a whole lot of sense to me.

136
00:12:23.610 --> 00:12:31.030
So what I had to do is try out a couple of different numbers and see how the chart turned out.

137
00:12:31.080 --> 00:12:42.030
So if we write our width is equal to one and head shift and to see what we get no change but if we change

138
00:12:42.030 --> 00:12:50.590
that to say zero point five and head shift into 0 histogram thoughts looking like this.

139
00:12:51.690 --> 00:12:59.310
So at this hour with argument is doing if it's set to zero point five our bar width will be approximately

140
00:12:59.490 --> 00:13:09.420
zero point five and on either side of the bar we'll have a space of zero point to five if we make this

141
00:13:09.570 --> 00:13:19.780
zero point seven the gaps will get smaller and if we make this zero point see three then the gaps will

142
00:13:19.780 --> 00:13:29.760
get wider so in essence you can add a value between 0 and 1 to this are width argument and you'll get

143
00:13:29.760 --> 00:13:30.660
different results.

144
00:13:31.120 --> 00:13:40.670
If I put in the value 10 then I get exactly the same as if I put in the value 1 Oh good I'm going to

145
00:13:40.670 --> 00:13:44.110
leave it at zero point five cool.

146
00:13:44.660 --> 00:13:51.470
So we've looked at the average number of rooms per dwelling we've looked at access to radial highways

147
00:13:52.130 --> 00:13:58.400
and we've looked at the property prices in our visualizations so both the number of rooms and the house

148
00:13:58.400 --> 00:14:01.540
prices were quite easy to understand right.

149
00:14:01.670 --> 00:14:07.820
Measuring how good the transport links where on the other hand was a little bit more complex given that

150
00:14:08.090 --> 00:14:15.800
it was measured as an index value with accessibility to radial highways but there's actually another

151
00:14:15.950 --> 00:14:24.470
very nifty technique that the researchers are using to capture some information about these Boston Properties.

152
00:14:24.800 --> 00:14:31.340
You see there's a river running through Boston and this river is called the Charles River and it looks

153
00:14:31.340 --> 00:14:39.700
something like this Imagine for a second that you were conducting the original research and collating

154
00:14:39.880 --> 00:14:41.790
the Boston housing data.

155
00:14:42.100 --> 00:14:47.920
You want to be able to differentiate between the houses that are located right on the river and those

156
00:14:47.920 --> 00:14:50.210
that are located elsewhere.

157
00:14:50.230 --> 00:14:52.110
How would you go about doing this.

158
00:14:53.510 --> 00:14:57.900
And this brings us to our next challenge and for this challenge.

159
00:14:57.900 --> 00:15:01.530
I want you to answer a very very simple question.

160
00:15:01.800 --> 00:15:10.320
Tell me out of the 506 properties in the dataset how many properties are located on the Charles River.

161
00:15:10.410 --> 00:15:13.820
This challenge isn't going to be about data visualization.

162
00:15:13.920 --> 00:15:18.930
I just need a cold hard number from you to solve this challenge.

163
00:15:18.930 --> 00:15:25.830
Take a close look at the description of the features and then write a single line of code that will

164
00:15:25.830 --> 00:15:28.150
spit out the answer for you.

165
00:15:28.380 --> 00:15:30.810
And also while you're at it have a think.

166
00:15:30.840 --> 00:15:38.400
If you expect that the properties on the river will be worth more or less than properties that are away

167
00:15:38.400 --> 00:15:41.820
from the river is living next to the Charles River.

168
00:15:41.880 --> 00:15:45.950
A good thing for house prices because we'll find out later.

169
00:15:46.200 --> 00:15:54.370
In the meantime I'll give you a few seconds to pause the video so you can solve this challenge.

170
00:15:54.520 --> 00:15:58.390
Did you get here is the solution.

171
00:15:58.470 --> 00:16:06.650
So the trick was looking for the feature description that would likely contain the answers and maybe

172
00:16:06.660 --> 00:16:15.030
discovered that there is a feature called C H E S chars and this is the Charles River dummy variable

173
00:16:15.540 --> 00:16:21.080
which equals one if the tract bounds the river and 0 other lines.

174
00:16:21.240 --> 00:16:27.410
In other words chars captures whether the property is on the river or not.

175
00:16:27.410 --> 00:16:30.840
Now let's scroll back down and write the python code.

176
00:16:31.020 --> 00:16:36.370
We're going to be using our old friend value underscore counts to solve this.

177
00:16:36.400 --> 00:16:46.890
If I write data square brackets single quotes Chow's dot value on a score counts parentheses and head

178
00:16:46.890 --> 00:16:50.570
shift into I'm going to get the following output.

179
00:16:50.570 --> 00:17:00.050
I can see here that chars only has one of two values zero or one which ties out exactly with what they've

180
00:17:00.050 --> 00:17:01.550
said in the description.

181
00:17:01.550 --> 00:17:07.440
Zero means not on the river and one means located on the Charles River.

182
00:17:07.460 --> 00:17:16.020
So the answer to the challenges question is there are thirty five properties on the river this type

183
00:17:16.020 --> 00:17:25.590
of feature is called a dummy variable and you'll find researchers using dummy variables to capture binary

184
00:17:25.770 --> 00:17:27.000
information.

185
00:17:27.060 --> 00:17:31.770
So this is a good example is the property on the river or not on the river.

186
00:17:31.770 --> 00:17:33.890
Are we dealing with a man or a woman.

187
00:17:33.900 --> 00:17:36.030
Are the unemployed or employed.

188
00:17:36.030 --> 00:17:37.140
Is it a homeowner.

189
00:17:37.140 --> 00:17:38.530
Are they renting.

190
00:17:38.550 --> 00:17:42.940
This is the kind of information that you can capture with dummy variables.

191
00:17:43.000 --> 00:17:48.150
In other words working with dummy variables is actually very similar to working with an index except

192
00:17:48.150 --> 00:17:51.780
that a dummy variable can only have one of two values.

193
00:17:51.780 --> 00:17:52.620
Good stuff.

194
00:17:52.620 --> 00:17:56.120
So we're really getting into the nitty gritty in the next lessons.

195
00:17:56.250 --> 00:18:02.250
We're gonna be looking at descriptive statistics outliers and scatter plots.

196
00:18:02.250 --> 00:18:03.150
I'll see you there.
