1
00:00:01,020 --> 00:00:07,440
The first big Python programming concept that we're going to talk about are variables when you think

2
00:00:07,440 --> 00:00:10,200
about programming and software at a high level.

3
00:00:10,260 --> 00:00:12,630
It's all about manipulating data.

4
00:00:12,690 --> 00:00:18,960
For example if you create a computer game then you'll need to track the Player Score the number of lives

5
00:00:18,960 --> 00:00:22,430
that the player has and what level the player is on.

6
00:00:22,470 --> 00:00:28,890
Of course all this data changes over time as we play the video game and the program runs.

7
00:00:28,890 --> 00:00:36,400
So where do you as the programmer store this data and how do you track it the Python programming language

8
00:00:36,400 --> 00:00:38,870
has a very convenient solution.

9
00:00:39,130 --> 00:00:44,830
You would store the game score in a variable what is a variable.

10
00:00:45,140 --> 00:00:48,640
A variable is just a container for data.

11
00:00:48,640 --> 00:00:54,860
The important thing to understand about Python variables is that they both have a name and a value.

12
00:00:54,880 --> 00:01:02,920
For example if I wanted to track my age inside a program I can simply create a variable called my age.

13
00:01:02,920 --> 00:01:12,520
My age is the name of the variable but because my age is a container for data I can also give it a value

14
00:01:12,550 --> 00:01:19,500
so I can stick the number 32 inside my H in programming lingo.

15
00:01:19,500 --> 00:01:27,460
This is called assigning a value to a variable now as time passes and our program runs.

16
00:01:27,460 --> 00:01:34,810
We might need to update this variable and we can do that simply by updating the value inside my age

17
00:01:34,960 --> 00:01:44,980
with a new value so we can replace the value 32 with the value 33 now the question is what would this

18
00:01:44,980 --> 00:01:52,230
look like in Python syntax inside the python intro notebook that we created.

19
00:01:52,230 --> 00:01:57,650
We're going to create a variable called my age and give it a value just like this.

20
00:01:57,750 --> 00:02:09,880
My age equals 32 this name my age is now how we can refer to the number 32 to display the value inside

21
00:02:09,930 --> 00:02:12,340
the my age variable below the cell.

22
00:02:12,340 --> 00:02:17,050
I'm simply going to write print my age

23
00:02:19,750 --> 00:02:25,090
hitting shift enter on the keyboard we'll evaluate the code in the cell and then display this value

24
00:02:25,330 --> 00:02:28,810
contain inside the my age variable.

25
00:02:28,810 --> 00:02:33,130
Now suppose our program is running and we need to update the value inside this variable.

26
00:02:33,250 --> 00:02:42,400
We can change this value of my age simply by assigning a new value to it say with my age equals 33.

27
00:02:42,460 --> 00:02:49,740
If I write print my age now and hit shift enter we'll see the value 33 print it out.

28
00:02:49,800 --> 00:02:51,860
No surprises there now.

29
00:02:51,910 --> 00:02:55,610
Variables are super handy because you can do calculations with them.

30
00:02:55,680 --> 00:02:59,340
For example if we write print my age divided by three

31
00:03:03,670 --> 00:03:09,940
and had shift enter we'll see eleven point zero printed out below the cell.

32
00:03:09,940 --> 00:03:15,100
Also we can take these two concepts that we just covered and take it up a step in complexity.

33
00:03:15,130 --> 00:03:19,260
Let's say we want to update the value of my age like this.

34
00:03:19,390 --> 00:03:26,650
My age is equal to my age plus 1.

35
00:03:26,710 --> 00:03:31,690
Now if it's your first time learning to program this line of code is going to look very strange but

36
00:03:31,690 --> 00:03:38,950
what's going on is that we're taking the previous value of my age namely the value 33 on the right hand

37
00:03:38,950 --> 00:03:44,490
side of the equals sign and then adding one to it with that equals sign.

38
00:03:44,500 --> 00:03:55,460
Operator we are storing this new value 34 33 plus 1 inside of my age on the left hand side.

39
00:03:55,480 --> 00:04:00,600
In other words we are overwriting the previous value stored inside the.

40
00:04:00,610 --> 00:04:13,320
My age variable if we write to print my age now and he'd shift into we'll see our value update to 34

41
00:04:14,890 --> 00:04:22,260
so let's do a quick exercise on using and manipulating variables in python as a challenge.

42
00:04:22,480 --> 00:04:29,750
Can you create a variable called restaurant bill and set its value equal to thirty six point seventeen.

43
00:04:29,920 --> 00:04:37,690
Then create a variable called service charge and set its value equal to zero point one to five 12 and

44
00:04:37,690 --> 00:04:42,850
a half percent seems to be the standard rate that restaurant suggest as a tip in London these days.

45
00:04:44,020 --> 00:04:49,970
Finally print out the amount of tip below the cell that you would need to add to the bill.

46
00:04:50,020 --> 00:04:52,120
I'll give you a few seconds to figure this out.

47
00:04:52,150 --> 00:04:55,900
So pause the video okay.

48
00:04:55,930 --> 00:04:59,170
So here's the solution for part 1.

49
00:04:59,230 --> 00:05:06,650
Well the right restaurant bill is equal to thirty six point one seven for part two.

50
00:05:06,730 --> 00:05:08,870
Well right.

51
00:05:09,040 --> 00:05:15,680
Service charge is equal to zero point one two five and four part three will right.

52
00:05:15,700 --> 00:05:18,500
Print parentheses.

53
00:05:18,970 --> 00:05:20,670
Restaurant bill.

54
00:05:20,680 --> 00:05:22,570
Times service charge

55
00:05:26,200 --> 00:05:27,880
when I hit shift enter.

56
00:05:27,910 --> 00:05:33,000
I'll see that the value of the tip is four point five two.

57
00:05:33,040 --> 00:05:38,470
Now all that's left to do is asking the waiter if the restaurant is pocketing the money or if the tip

58
00:05:38,470 --> 00:05:41,270
really does go through to the staff.

59
00:05:41,270 --> 00:05:48,190
Now one thing that could happen to you at this point is that you've made a typo in programming.

60
00:05:48,200 --> 00:05:50,340
Everything is case sensitive.

61
00:05:50,540 --> 00:05:58,820
And if our variables names didn't match exactly to how they were defined we're gonna get some unexpected

62
00:05:59,060 --> 00:06:00,590
errors.

63
00:06:00,620 --> 00:06:08,090
For example if this capital B in my print statement instead was a lower case b and we had hit shift

64
00:06:08,120 --> 00:06:15,010
enter we would have gotten the following error name error restaurant bill.

65
00:06:15,070 --> 00:06:21,880
It's not defined and this is because this restaurant bill and this restaurant bill are considered to

66
00:06:21,880 --> 00:06:24,390
be completely different entities.

67
00:06:24,790 --> 00:06:30,760
So you want to make sure that you never have any typos in your variable names.

68
00:06:30,760 --> 00:06:31,930
The same of course is true.

69
00:06:31,960 --> 00:06:33,770
If we miss out a letter.

70
00:06:33,790 --> 00:06:42,010
So for example if we wrote service charge instead of service charge then we would get exactly the same

71
00:06:42,040 --> 00:06:45,700
error our variable is not defined.

72
00:06:45,760 --> 00:06:51,400
In other words Python can't find something that matches this name.

73
00:06:51,400 --> 00:06:54,220
So let's put that our back where it belongs.

74
00:06:54,470 --> 00:07:00,550
Now that we've learned a thing or two about Python programming and variables let's revisit the code

75
00:07:00,550 --> 00:07:08,400
that we wrote when we were estimating our movie revenue since I saved my previous work in a python notebook

76
00:07:08,490 --> 00:07:11,030
and added it to the email projects folder.

77
00:07:11,100 --> 00:07:12,480
I'm just going to open that now

78
00:07:15,790 --> 00:07:16,110
now.

79
00:07:16,120 --> 00:07:21,240
Even though this code is a little bit more complex than what we have written just now.

80
00:07:21,400 --> 00:07:25,890
Can you spot the variables in this piece of code.

81
00:07:25,990 --> 00:07:27,720
Now there's actually quite a few.

82
00:07:27,940 --> 00:07:33,990
And you'll notice that the variables are often to the left hand side of an equal sign.

83
00:07:34,000 --> 00:07:44,900
So for example data is a variable the capital X is a variable the lower case Y is also a variable.

84
00:07:44,900 --> 00:07:52,370
All of these variables are holding on to data but in contrast the variables my age and restaurant bill

85
00:07:53,000 --> 00:07:59,750
these x and y variables are not holding on to a single value they are holding onto lots and lots of

86
00:07:59,750 --> 00:08:01,950
values at the same time.

87
00:08:02,030 --> 00:08:06,950
And I'm going to show you guys how that works and a little bit put before I do that.

88
00:08:06,960 --> 00:08:13,230
Let's talk about another key concept that we need to understand when working with variables namely data

89
00:08:13,230 --> 00:08:20,600
types in machine learning and programming more generally we'll be working with different kinds of data.

90
00:08:20,750 --> 00:08:29,750
We'll be working with text decimal numbers tables of data columns of data images sounds video all sorts

91
00:08:31,480 --> 00:08:36,230
and a programming language like Python will categorize this data.

92
00:08:36,230 --> 00:08:42,650
In other words different kinds of data like text or decimal numbers and whole numbers will have a different

93
00:08:42,650 --> 00:08:43,840
category.

94
00:08:43,850 --> 00:08:48,320
In other words they will have a different data type.

95
00:08:48,320 --> 00:08:53,600
Now you can think of data types like this children's toy where you have to fit the right shape into

96
00:08:53,600 --> 00:08:55,060
the whole.

97
00:08:55,070 --> 00:09:01,430
So for example when you try to put a decimal number somewhere where Python expects to have a string

98
00:09:01,790 --> 00:09:04,350
you'll often find that you have a problem.

99
00:09:04,550 --> 00:09:07,840
And this makes sense when you think about it intuitively.

100
00:09:07,940 --> 00:09:10,980
So you have some Python code that makes a calculation.

101
00:09:11,090 --> 00:09:13,160
So you're adding two things together.

102
00:09:13,280 --> 00:09:18,600
If those two things are numbers then you're good five plus 10 is 15.

103
00:09:19,190 --> 00:09:26,290
But if one of those things is another kind of data like I don't know a home address you have a problem.

104
00:09:26,360 --> 00:09:30,100
Your program will crash or it's going to do something very unexpected.

105
00:09:30,110 --> 00:09:35,690
Trying to evaluate five plus 21 James Street.

106
00:09:35,690 --> 00:09:38,990
It doesn't make any sense now for the most part.

107
00:09:39,080 --> 00:09:45,470
Python will actually take care of the data types behind the scenes so it's not something that's kind

108
00:09:45,470 --> 00:09:49,960
of at the forefront of the programming syntax of the Python code.

109
00:09:49,970 --> 00:09:56,360
But let me show you how you can actually see the data type in Jupiter notebook because we can ask python

110
00:09:56,540 --> 00:10:04,670
what category something belongs to by writing type parentheses and then putting something between those

111
00:10:04,670 --> 00:10:13,690
two parentheses So for example if I write type 33 and had shift into the type of this whole number is

112
00:10:13,910 --> 00:10:20,080
int I I.A. I.A. stands for integer which makes sense.

113
00:10:20,440 --> 00:10:24,940
But there's also quite a few other types with maybe less intuitive names.

114
00:10:24,940 --> 00:10:33,800
So let me introduce a couple of them if we write type thirty three point six and had shift into we get

115
00:10:33,800 --> 00:10:38,240
to see that decimal numbers are classified differently.

116
00:10:38,240 --> 00:10:47,570
Decimal numbers are classified as floats or floating point numbers floating point numbers are the type

117
00:10:47,780 --> 00:10:53,430
that you will usually be working with every time you're dealing with numbers that have a decimal point.

118
00:10:53,430 --> 00:11:01,960
Now let me show you what the type for text is called so can write type and then between the parentheses

119
00:11:02,260 --> 00:11:09,350
I'm going to open the single quotes and add my name when I hit shift enter.

120
00:11:09,460 --> 00:11:19,800
I can see that type for text is called as TR an SDR stands for string the word string is just computer

121
00:11:19,800 --> 00:11:26,910
jargon for a piece of text or a sequence of characters and the way that you can tell that something

122
00:11:27,000 --> 00:11:33,090
is considered to be a string is by the fact that strings are always always surrounded by either single

123
00:11:33,420 --> 00:11:40,710
or double quotes and Jupiter notebook is actually also very helpful with the syntax highlighting so

124
00:11:40,710 --> 00:11:45,790
that the python code that is considered to be a string actually has a different color.

125
00:11:45,810 --> 00:11:49,840
So in this case the string is marked as red.

126
00:11:49,860 --> 00:11:55,370
Let's take another look at the python code that we wrote previously and see if we can spot a string.

127
00:11:55,550 --> 00:12:02,900
Here we can see that when we were writing PD dot read underscore see us v. open parentheses the value

128
00:12:02,930 --> 00:12:08,120
that we specified between these two parentheses was a string.

129
00:12:08,120 --> 00:12:15,890
It was a piece of text marked by the single quotes and the same is true for the column names production

130
00:12:15,940 --> 00:12:22,940
underscore a budget underscore USD and it's also true for the X label on our graph and all the other

131
00:12:22,940 --> 00:12:27,080
parts where the code is highlighted in red.

132
00:12:27,250 --> 00:12:29,490
Okay so far so good.

133
00:12:29,590 --> 00:12:37,090
We've just introduced you to a whole bunch of new programming jargon variables data types I.A. for integers

134
00:12:37,150 --> 00:12:42,530
float for decimal numbers SDR for pieces of text or strings.

135
00:12:42,700 --> 00:12:45,880
But how did data types relate to variables.

136
00:12:45,880 --> 00:12:53,560
What's the connection between the two well if the data has a certain type then so does the variable

137
00:12:53,620 --> 00:13:00,410
containing the data because after all a variable is just a container now for example let's see what

138
00:13:00,410 --> 00:13:08,210
the data type is for the variable my age so I can write type and then between the parentheses I'm going

139
00:13:08,210 --> 00:13:16,010
to supply my age and had shift enter and here we can see that because my age holds on to whole numbers

140
00:13:16,310 --> 00:13:22,500
the data type of the variable is also integer or I.A..

141
00:13:22,520 --> 00:13:26,150
Now let's take a look at the data type for restaurant bill

142
00:13:29,390 --> 00:13:35,320
and I'm sure it's no surprise that because restaurant bill is holding on to a decimal number thirty

143
00:13:35,330 --> 00:13:36,840
six point one seven.

144
00:13:36,840 --> 00:13:45,850
It's a type float if I was to create a new variable called my name and set it equal to the string.

145
00:13:45,870 --> 00:13:56,690
Philip I can write type my name hit shift enter and I can see that the My name variable is a string.

146
00:13:57,560 --> 00:14:03,890
Now let's take another look at the notebook where we ran our regression and let me ask you this what

147
00:14:03,890 --> 00:14:12,090
do you think is the data type of the variables data capital X and lowercase y.

148
00:14:12,120 --> 00:14:18,350
This is the mystery that we're gonna be exploring over the next couple of lessons I'll see you there.
