WEBVTT
1
00:00:00.620 --> 00:00:08.480
See Vaughn's Web site looks like this Seabourn is a Python module that's actually based on Mac Puntland

2
00:00:08.730 --> 00:00:15.970
but it has some nice extra features you can think of seaborne like matte plot layered Bonds steroids.

3
00:00:16.230 --> 00:00:24.300
If not plot lib was Lance Armstrong then Seabourn is still Lance Armstrong.

4
00:00:24.450 --> 00:00:27.150
Lance Armstrong on the Tour de France.

5
00:00:27.900 --> 00:00:35.160
So let's import the Seabourn module at the top of the notebook as s and s right.

6
00:00:35.190 --> 00:00:45.060
Import seaborne as S.A. an edge shift into in the cell below the histogram we're gonna make use of one

7
00:00:45.060 --> 00:00:46.600
of seaborne functions.

8
00:00:46.830 --> 00:00:59.760
We're gonna make use of the dist plot function so S.A. don't this plot parentheses data square brackets

9
00:01:01.270 --> 00:01:13.280
single quotes price in all caps and then enter BLT dot show parentheses see Bourne's this plot function

10
00:01:13.690 --> 00:01:21.320
only needs a single argument namely the data meant to plot and we're gonna plot the target values and

11
00:01:21.410 --> 00:01:23.720
we're gonna see how this compares with Matt.

12
00:01:23.720 --> 00:01:27.990
Plot loops histogram function limit shift end.

13
00:01:28.820 --> 00:01:38.210
And here we can see that straight out of the box we get a very beautiful graph we get both a histogram

14
00:01:38.840 --> 00:01:43.730
and an estimate of the probability density function.

15
00:01:44.120 --> 00:01:53.230
The probability density function is the darker squiggly line that's superimposed on top of this diagram.

16
00:01:53.300 --> 00:02:00.200
This is the line that estimates the distribution of the data and I think this is a neat little addition

17
00:02:00.260 --> 00:02:06.190
that Seabourn provides as an add on to the histogram.

18
00:02:06.230 --> 00:02:11.950
Now of course we can make the seaborne plot look a lot more like matte plot lib.

19
00:02:12.140 --> 00:02:14.810
So for starters I could size it differently.

20
00:02:14.810 --> 00:02:18.580
So I'm going to take this line of code here.

21
00:02:18.650 --> 00:02:20.270
Copy it.

22
00:02:20.360 --> 00:02:22.640
Good on him.

23
00:02:22.640 --> 00:02:33.440
Paste that press shift into can see that's a bit larger but easier to see but we can also modify the

24
00:02:33.440 --> 00:02:34.510
number of arguments.

25
00:02:34.520 --> 00:02:44.390
This this plot here ticks so it also has the beans argument that we can give it and I can give it 50.

26
00:02:45.770 --> 00:02:56.270
So now this ties out with what we see up here from Mad Lib and then we can also show and hide the two

27
00:02:56.300 --> 00:02:57.610
bits of the graph here.

28
00:02:57.680 --> 00:03:03.200
The PDA for probability density function and the histogram.

29
00:03:03.200 --> 00:03:14.790
So if I come up here to the arguments and I put hist equals false with a capital F and hit shift enter.

30
00:03:14.960 --> 00:03:22.610
It hides the histogram and we're just left with the probability density function which is the estimate

31
00:03:22.610 --> 00:03:25.700
for the distribution.

32
00:03:25.700 --> 00:03:27.470
And of course we can also do it the other way around.

33
00:03:27.470 --> 00:03:41.480
So if I write K D E equals false and then change the Hist argument to true then we're hiding the probability

34
00:03:41.480 --> 00:03:48.980
density function and just showing the histogram and in terms of styling you can also grab a different

35
00:03:48.980 --> 00:03:49.690
color here.

36
00:03:50.130 --> 00:03:56.660
So if I want to go with a yellow palette for example pick this hex code go back here.

37
00:03:58.380 --> 00:04:07.080
And then add the color argument as a keyword and pasted hex code in it shift enter and then we'll see

38
00:04:07.080 --> 00:04:13.100
it like so now in retrospect I don't think this was actually a wise choice.

39
00:04:13.110 --> 00:04:15.330
This is very very low contrast.

40
00:04:15.420 --> 00:04:23.730
I might have to go for something like this which is a bit more Amber and substitute that for the yellow.

41
00:04:24.930 --> 00:04:28.180
And this makes the histogram a lot more clear.

42
00:04:28.230 --> 00:04:33.230
All right so I think this is a really good time for a challenge.

43
00:04:33.300 --> 00:04:42.360
See if you can investigate and visualize two other features of the dataset and also have a question

44
00:04:42.360 --> 00:04:43.350
for you.

45
00:04:43.440 --> 00:04:49.350
How many rooms do you think that the average property in Boston has.

46
00:04:49.410 --> 00:04:50.030
What do you think.

47
00:04:50.580 --> 00:04:54.210
What's the total number of rooms for a property in Boston.

48
00:04:54.210 --> 00:04:58.290
So including bedrooms living rooms bathrooms etc..

49
00:04:58.400 --> 00:05:00.050
Have you made your guess.

50
00:05:00.360 --> 00:05:04.280
Okay so for this challenge we're gonna be checking the answer.

51
00:05:04.280 --> 00:05:07.580
We're gonna have a look at the R M feature.

52
00:05:07.730 --> 00:05:15.500
Can you write the python code to plot this on a histogram and visualize the number of rooms per dwelling

53
00:05:16.310 --> 00:05:23.120
and then figure out what the average number of rooms is for a property in Boston Massachusetts.

54
00:05:23.120 --> 00:05:25.280
I think this would be fairly straightforward.

55
00:05:25.300 --> 00:05:31.240
Uh you can use either my plot lib or Seabourn to generate your histogram punt.

56
00:05:31.430 --> 00:05:35.190
Maybe have a think about what you would expect beforehand.

57
00:05:35.300 --> 00:05:36.080
Ready.

58
00:05:36.690 --> 00:05:38.710
Here's the solution.

59
00:05:39.480 --> 00:05:48.030
So what I'm gonna do is I'm going to take this cell here and I'm going to copy the cell come down here

60
00:05:48.630 --> 00:05:56.870
and edit paste the sell and then what do we do is going to change the code here somewhere.

61
00:05:56.970 --> 00:06:00.240
Substitute M for price.

62
00:06:00.240 --> 00:06:02.690
I'm going to delete the bins.

63
00:06:02.700 --> 00:06:06.590
Think this is no longer what we want.

64
00:06:06.600 --> 00:06:17.130
I'm just gonna pick a different color so maybe I'm gonna go for teal It was dark teal here just to differentiate

65
00:06:17.250 --> 00:06:25.350
the chant a little bit and then I'm going to change the x label here because we're no longer looking

66
00:06:25.350 --> 00:06:27.550
at the price we're looking at.

67
00:06:27.570 --> 00:06:38.910
Then number of rooms in fact this is the average number of rooms and when it shift into

68
00:06:41.700 --> 00:06:51.000
and the chant that I get back looks like this we can see that the highest bar is around the number six.

69
00:06:51.040 --> 00:06:57.640
In other words most of the properties in Boston have around 6 rooms.

70
00:06:57.710 --> 00:07:04.000
I don't know about you but that actually seems pretty big actually because if you think about it.

71
00:07:04.000 --> 00:07:06.700
Bedroom living room kitchen bathroom.

72
00:07:06.700 --> 00:07:09.910
That adds up to 4 if you add another bedroom.

73
00:07:09.910 --> 00:07:13.820
Then you have 5 but the average is 6.

74
00:07:13.840 --> 00:07:20.740
So think they have a linen closet that they're counting or they have two bathrooms or three bedrooms.

75
00:07:20.740 --> 00:07:26.080
Now of course we don't know anything about the size of the rooms but still I'm going to venture a guess

76
00:07:26.080 --> 00:07:30.810
that six rooms on average doesn't seem to be too shabby.

77
00:07:31.200 --> 00:07:34.330
Hi I certainly wouldn't mind living somewhat with six rooms.

78
00:07:34.330 --> 00:07:38.280
That's palatial by London standards.

79
00:07:38.360 --> 00:07:44.320
Now we just eyeballed this graph to figure out the average number of rooms.

80
00:07:44.440 --> 00:07:50.880
What have we wanted to know an exact number for the average well pandas.

81
00:07:50.890 --> 00:07:53.110
Also has you covered for that.

82
00:07:53.560 --> 00:08:04.270
So what we can do is come down here and access our our own data series so data square brackets and then

83
00:08:04.360 --> 00:08:17.830
arm put it done after it and then call the mean function so data square brackets R.M. dot mean parentheses.

84
00:08:18.470 --> 00:08:24.960
So here we're calling the mean method on our series object and hitting shift enter.

85
00:08:25.190 --> 00:08:29.630
We see that the true average is six point to eight.
