1
00:00:01,080 --> 00:00:10,120
In this lesson we're going to talk about Input statements modules and packages in the previous lessons.

2
00:00:10,140 --> 00:00:15,830
We've actually seen and used three different input statements already.

3
00:00:15,840 --> 00:00:26,310
For example we had import pandas as PD we had import mat plot lib dot pie plot as PDT and we also had

4
00:00:26,430 --> 00:00:32,470
from S.K. learned linear model import linear regression.

5
00:00:32,490 --> 00:00:38,760
These are the three import statements that we're going to talk about in detail in this video each of

6
00:00:38,760 --> 00:00:46,670
these import statements imports a Python module that we can then use in our Jupiter notebook if you've

7
00:00:46,670 --> 00:00:51,000
already got some experience in programming perhaps in other languages.

8
00:00:51,020 --> 00:00:56,450
The easiest way to think about Python modules is as frameworks or as libraries.

9
00:00:56,450 --> 00:01:00,300
This is what they're going to be called in other languages.

10
00:01:00,370 --> 00:01:09,010
That said the simplest way to think about a Python module is that every file that ends in dot P Y is

11
00:01:09,040 --> 00:01:16,630
a Python module and by importing a module we get access to the variables and the functions inside the

12
00:01:16,630 --> 00:01:18,880
file that was imported.

13
00:01:18,880 --> 00:01:24,960
In other words importing gives us access to a dot P Y files contents.

14
00:01:25,120 --> 00:01:30,240
Now so far we actually haven't seen any files with a dot P Y extension.

15
00:01:30,400 --> 00:01:34,380
And why should a file end in dot P Y in the first place.

16
00:01:35,580 --> 00:01:44,280
Well a top P Y file is a file that contains Python code and to see how this all works we're gonna create

17
00:01:44,370 --> 00:01:48,420
a file it with a dot P Y extension together.

18
00:01:48,420 --> 00:01:55,920
To do that we're gonna open a text editor in fact every Windows machine comes with a default text editor

19
00:01:55,940 --> 00:02:02,590
print stalled that text that is whose name is notepad and it looks like this.

20
00:02:02,710 --> 00:02:05,970
Now you're probably not going to have the shortcut on your taskbar.

21
00:02:05,970 --> 00:02:14,670
So go to your start menu and then go to find all your programs and search for notepad and you should

22
00:02:14,670 --> 00:02:19,970
also find it hard to remember not Microsoft Word notepad.

23
00:02:19,980 --> 00:02:21,340
That's what we're going with.

24
00:02:21,360 --> 00:02:25,380
If you have a Windows machine then open notepad now.

25
00:02:25,400 --> 00:02:31,260
Now on the other hand if you're on Mac the default text that are that you've got pre installed is called

26
00:02:31,590 --> 00:02:39,030
text edit and you can find this program in your applications folder so open this program now.

27
00:02:40,150 --> 00:02:42,070
And create a new document.

28
00:02:42,400 --> 00:02:49,900
If you're a new document looks like this then go to format and click on make plain text this is what

29
00:02:49,900 --> 00:02:53,770
you want your text editor to look like for the next steps.

30
00:02:53,800 --> 00:02:55,920
Now of course there are lots of other.

31
00:02:55,950 --> 00:03:03,610
And some might say superior text that it has available to my current favorite is actually called atom

32
00:03:03,880 --> 00:03:12,090
and this is made by the team behind the github Web site I've included the link to atom dot Io in the

33
00:03:12,090 --> 00:03:19,590
lesson resources if you want to download it it's available for both Windows and for Mac and once you

34
00:03:19,590 --> 00:03:24,260
start using it you'll never go back to a notepad again I promise.

35
00:03:25,330 --> 00:03:33,130
Now that you've got your text editor open create a variable called the answer and set it equal to the

36
00:03:33,130 --> 00:03:41,470
number 42 then go to file and click save as now and navigate to your desktop.

37
00:03:42,940 --> 00:03:51,310
And instead of saving this file with a dot t t extension what we're gonna do is we're gonna call it

38
00:03:51,850 --> 00:03:58,080
life and then append a dot P Y extension.

39
00:03:58,120 --> 00:04:01,420
This is because we want to save a dot P Y file.

40
00:04:01,540 --> 00:04:08,950
The important thing on Windows is that you have to change the Save As file type from text documents

41
00:04:09,190 --> 00:04:10,220
thought to 60.

42
00:04:10,250 --> 00:04:13,840
Write to this other item in the dropdown.

43
00:04:13,900 --> 00:04:19,240
You want to change it to all files and only then can you click save.

44
00:04:19,660 --> 00:04:25,300
After you've done that check your desktop to make sure that the file that you saved really does read

45
00:04:25,600 --> 00:04:31,310
don't P Y at the end and not something else like dot p y dot t x.

46
00:04:31,430 --> 00:04:39,380
Okay this is what we're looking for life don't P Y now if you're on Mac and you're using text it we're

47
00:04:39,510 --> 00:04:42,200
going do the very same thing as the windows crew.

48
00:04:42,200 --> 00:04:53,460
We're gonna create a variable called the answer and set it equal to 42 and then we're gonna go to save.

49
00:04:53,600 --> 00:05:02,700
You're also gonna go to desktop and then you should be able to name your file life and give it the extension.

50
00:05:02,740 --> 00:05:04,920
Don't P Y.

51
00:05:05,200 --> 00:05:13,330
Now before you click save just double check that it says plain text encoding Unicode down here.

52
00:05:13,620 --> 00:05:20,910
If it says something else like Rich Text you haven't gone to format and made the file plain text so

53
00:05:21,030 --> 00:05:22,500
after you've verified this.

54
00:05:22,500 --> 00:05:31,530
Just click save and then you can quit your text editor and verify that there is indeed a life don't

55
00:05:31,620 --> 00:05:34,960
P Y file on your desktop.

56
00:05:34,960 --> 00:05:39,600
And just like that we've created our first python script file.

57
00:05:39,600 --> 00:05:43,650
Now let's upload this file to our Jupiter notebook.

58
00:05:44,100 --> 00:05:54,170
Go to your email projects folder in Jupiter and click upload then navigate to your desktop where you've

59
00:05:54,170 --> 00:06:01,540
saved your file choose it and click open and then afterwards confirm your upload here.

60
00:06:03,100 --> 00:06:09,010
If you've been successful you should be able to click on this top P Y file and verify it that it says

61
00:06:09,100 --> 00:06:14,920
the answer equals 42 Jupiter notebook will open this in a new tab for you.

62
00:06:15,700 --> 00:06:21,130
The exciting thing is that now that we've uploaded our python script as a doc P Y file to our project

63
00:06:21,130 --> 00:06:25,270
folder we can start using it in our Jupiter notebook.

64
00:06:25,270 --> 00:06:30,130
Check this out back in our Python intro Jupiter notebook.

65
00:06:30,130 --> 00:06:34,670
We can write import life and had shift enter.

66
00:06:35,110 --> 00:06:39,530
If you see no error messages at this point the import was successful.

67
00:06:39,700 --> 00:06:45,730
Now because I have an irrational love of data types let's check out what the type of this thing called

68
00:06:45,730 --> 00:06:47,750
life actually is.

69
00:06:47,760 --> 00:06:54,100
Going to write type and put life between the parentheses and head shift into a ha.

70
00:06:54,250 --> 00:07:02,530
So here we find out that our lifetime P Y file when we import it is called a module.

71
00:07:02,530 --> 00:07:04,870
Now here comes the really cool part.

72
00:07:04,870 --> 00:07:10,540
We're going to access the code inside our life module right.

73
00:07:10,600 --> 00:07:16,250
Life dot the answer and hit shift enter.

74
00:07:16,330 --> 00:07:23,840
Now remember what we see now is the value inside are the answer variable that is shown below the cell.

75
00:07:23,860 --> 00:07:25,410
How cool is that.

76
00:07:25,420 --> 00:07:27,340
I think this is super cool.

77
00:07:27,340 --> 00:07:30,280
It's like our Jupiter notebook has made a new friend.

78
00:07:30,640 --> 00:07:35,380
But let's take a second to think about what this line of code actually means.

79
00:07:35,380 --> 00:07:39,070
It literally means fetch the value of the name.

80
00:07:39,190 --> 00:07:44,110
The answer that lives inside the module called life.

81
00:07:44,260 --> 00:07:46,940
The thing to note here is the python syntax.

82
00:07:47,080 --> 00:07:54,580
We've accessed the variable inside that life dot P Y file using the dot notation with access to the

83
00:07:54,580 --> 00:07:56,390
answer by writing life.

84
00:07:56,470 --> 00:08:03,600
Don't the answer and this notation will come up again and again as we progressed throughout the course.

85
00:08:03,610 --> 00:08:10,420
Okay so now that we've just uploaded our own file and then imported it into our notebook let's draw

86
00:08:10,420 --> 00:08:13,820
a link to the previous lessons now.

87
00:08:13,840 --> 00:08:15,250
You'll probably remember that too.

88
00:08:15,250 --> 00:08:16,730
Import pandas.

89
00:08:16,850 --> 00:08:20,140
We didn't have to upload any dot P Y files we just wrote.

90
00:08:20,320 --> 00:08:21,970
Import pandas.

91
00:08:21,970 --> 00:08:23,770
And then it just worked.

92
00:08:23,770 --> 00:08:26,800
How is it that we can actually do that.

93
00:08:26,800 --> 00:08:33,500
See I used to think it was magic but then sadly I discovered that it was not in fact magic.

94
00:08:33,550 --> 00:08:41,660
It turns out that when we installed Anaconda a whole bunch of modules were already included in our installation.

95
00:08:42,100 --> 00:08:48,690
And this is why there was no need to upload any pandas thought P Y file to a project folder.

96
00:08:48,790 --> 00:08:57,000
Notebook already knew about pandas and we could just write import pandas but this should make you suspicious

97
00:08:57,730 --> 00:08:58,040
right.

98
00:08:58,050 --> 00:09:02,160
It begs the question what kind of other stuff does Jupiter already know about.

99
00:09:02,940 --> 00:09:09,150
So let's take a look together at what modules we have access to out of the box from installing Python

100
00:09:09,180 --> 00:09:14,010
Anaconda we can get hold of this information in various places.

101
00:09:14,010 --> 00:09:17,930
The first place that we're going to check is the anaconda navigate.

102
00:09:18,840 --> 00:09:25,830
When you open the anaconda navigator you'll notice that on the left you have this tab called environments.

103
00:09:25,830 --> 00:09:32,820
And when you click on it under route you get a long long list of all the modules that you have access

104
00:09:32,820 --> 00:09:42,830
to we can even filter on installed versus not installed and we can also filter by name.

105
00:09:42,910 --> 00:09:48,450
So if I type in pandas I can see that there's a checkmark next to it.

106
00:09:49,010 --> 00:09:55,490
So pandas is one of the installed modules which means that we can access it easily by writing an import

107
00:09:55,490 --> 00:09:56,750
statement.

108
00:09:56,750 --> 00:10:02,030
Now these filters in the anaconda navigate are actually super handy because we can quickly figure out

109
00:10:02,090 --> 00:10:09,500
if something was installed or not installed but if we look closely at this window you'll notice that

110
00:10:09,590 --> 00:10:18,690
it's not referring to the items in this list as modules instead it's referring to them as packages.

111
00:10:18,690 --> 00:10:25,740
And it says I've got one hundred and ninety five packages available and this this brings me to my next

112
00:10:25,740 --> 00:10:26,730
point.

113
00:10:26,820 --> 00:10:31,710
When we were writing our import statements and we looked at the type of thing that we imported it was

114
00:10:31,710 --> 00:10:33,240
called a module.

115
00:10:33,240 --> 00:10:38,550
However when people talk about pandas or psychic learn they'll use another word they'll use this word

116
00:10:38,550 --> 00:10:45,240
package just like the anaconda navigator even on the anaconda Web site they talk about Anaconda having

117
00:10:45,240 --> 00:10:53,150
1000 plus data science packages since you and I both installed Anaconda on our own computers.

118
00:10:53,150 --> 00:11:01,310
We actually see what these packages actually look like because pandas has to live somewhere on our harddrive

119
00:11:01,340 --> 00:11:02,580
after all right.

120
00:11:02,600 --> 00:11:10,820
I mean don't tell the world wildlife fund but you and I are not gonna go in a hunt for pandas when we

121
00:11:10,820 --> 00:11:13,890
installed Anaconda on our war machine.

122
00:11:14,000 --> 00:11:17,230
It would have created a folder somewhere on a Mac.

123
00:11:17,300 --> 00:11:25,750
That folder will be under your home folder so we can go to go and then get take into our home folder

124
00:11:26,710 --> 00:11:33,550
there will have a folder called Anaconda and then inside the anaconda folder with all the anaconda related

125
00:11:33,550 --> 00:11:34,190
stuff.

126
00:11:34,300 --> 00:11:38,210
We have a folder called P.K. G.S. P.K..

127
00:11:38,230 --> 00:11:46,490
Yes of course stands for packages on windows that Anaconda folder will be hiding elsewhere.

128
00:11:46,680 --> 00:11:48,450
So you'll have to go to your local disk.

129
00:11:48,450 --> 00:11:55,350
This will probably be your C drive and then you'll have to go to users then you'll have to go to your

130
00:11:55,350 --> 00:11:55,790
account.

131
00:11:56,550 --> 00:12:04,690
So mine's called PD and inside there you'll have a folder called Anaconda three once inside your Anaconda

132
00:12:04,690 --> 00:12:05,340
folder.

133
00:12:05,440 --> 00:12:08,460
You're gonna have to venture deeper to find the pandas.

134
00:12:08,800 --> 00:12:15,730
You've got to open your lib folder and then you'll have to open the site packages folder and there you're

135
00:12:15,730 --> 00:12:21,460
going to get the list of all the packages that came with Anaconda once you installed it.

136
00:12:21,460 --> 00:12:27,390
Now this is exactly the same list that you saw in the anaconda navigator and looking at this list you'll

137
00:12:27,390 --> 00:12:33,310
probably realise that even though the anaconda team brags about 1000 plus packages and Anaconda we're

138
00:12:33,310 --> 00:12:39,680
actually super lucky that by default it doesn't install all of them on the machine from the get go.

139
00:12:39,700 --> 00:12:46,520
So now that we've successfully hunted down our pandas folder let's return to the original question why

140
00:12:46,520 --> 00:12:50,120
is pandas referred to as a package.

141
00:12:50,130 --> 00:12:57,610
Well as you can see when we look inside the pandas directory pandas is not a single dot P Y file.

142
00:12:57,690 --> 00:13:05,320
Instead pandas is actually a whole bunch of DOT P Y files that are grouped together into a single bundle.

143
00:13:05,340 --> 00:13:09,670
In other words a package is just a collection of files.

144
00:13:09,810 --> 00:13:15,810
And when we refer to pandas as a package we are referring to this bundle of files that is living on

145
00:13:15,810 --> 00:13:23,130
our computer because after all the sad fact of life is that there just isn't any magic.

146
00:13:23,130 --> 00:13:30,220
And to be honest we don't actually deeply care about what all of these individual files do exactly.

147
00:13:30,390 --> 00:13:32,070
That's all under the hood.

148
00:13:32,070 --> 00:13:38,160
But I wanted to show it to you guys nonetheless at the end of the day all we need is an easy way to

149
00:13:38,160 --> 00:13:42,390
refer to all of this code inside this pandas directory.

150
00:13:42,600 --> 00:13:49,740
And this brings us full circle to the Jupiter notebook because our Python code with that one import

151
00:13:49,740 --> 00:13:57,750
statement allows us to gain access to all the files in that pandas directory with a single line of code

152
00:13:58,620 --> 00:14:01,080
but this story doesn't end here.

153
00:14:01,110 --> 00:14:07,350
The packages that we downloaded as part of Anaconda aren't the only modules that we have access to actually

154
00:14:08,130 --> 00:14:12,570
some modules are built into the python language itself.

155
00:14:12,570 --> 00:14:16,710
And these built in modules include everything on this list.

156
00:14:16,710 --> 00:14:19,600
This list is the so-called standard library.

157
00:14:19,830 --> 00:14:22,360
And there are over 200 modules here.

158
00:14:22,470 --> 00:14:26,200
So it's a pretty massive list scrolling around on here.

159
00:14:26,250 --> 00:14:30,340
We see that there's one module called math.

160
00:14:30,350 --> 00:14:37,440
Let's take a closer look at this math module the math module is something that we can use to do all

161
00:14:37,440 --> 00:14:39,560
sorts of calculations.

162
00:14:39,690 --> 00:14:47,980
And this module actually has information on two things namely the value of pi and the number E.

163
00:14:48,810 --> 00:14:56,640
So as a challenge as an exercise can you import the math module into your Jupiter notebook.

164
00:14:56,640 --> 00:15:03,510
And after you've imported the math module can you write the python code to print out the value of pi

165
00:15:03,900 --> 00:15:05,280
below the cell.

166
00:15:05,610 --> 00:15:11,480
And then after that write some more code to print out the value of e as well.

167
00:15:11,690 --> 00:15:19,130
I'll give you a few seconds to figure this out and pause the video and here's the solution.

168
00:15:19,130 --> 00:15:27,260
And just like we've imported pandas we simply write import math and to show the value of pi below the

169
00:15:27,260 --> 00:15:28,630
cell.

170
00:15:28,640 --> 00:15:36,830
I can write math dot P. I had shift enter and there it is there's the value of pi as per the math module

171
00:15:37,970 --> 00:15:45,230
hand looking at the official Python documentation we can see that we can access the value of E using

172
00:15:45,380 --> 00:15:49,320
this code right here in our Jupiter notebook.

173
00:15:49,330 --> 00:15:55,030
This means that I can simply write math don't e and had shift enter to complete the final part of the

174
00:15:55,030 --> 00:15:56,110
challenge.

175
00:15:56,260 --> 00:15:58,000
So that's pretty cool right.

176
00:15:58,000 --> 00:16:05,320
Using the module and the dot notation we can access any of the variables inside the module through their

177
00:16:05,320 --> 00:16:06,490
name.

178
00:16:06,490 --> 00:16:13,810
This is exactly the same syntax that we used when we uploaded our own dot P Y file and accessed the

179
00:16:13,810 --> 00:16:16,450
answer by writing life dot.

180
00:16:16,450 --> 00:16:23,800
The answer and this goes to show that we can access a lot of code from other modules like the math module

181
00:16:24,100 --> 00:16:26,890
using the same dot notation.

182
00:16:26,890 --> 00:16:32,620
Now let's take another look at this pandas import statement because this import statement that we wrote

183
00:16:32,620 --> 00:16:40,190
with pandas was a little more complex than the one we wrote with import math or import life the pandas

184
00:16:40,220 --> 00:16:49,280
import statement had something a little extra we wrote import pandas as PD and Jupiter is highlighting

185
00:16:49,400 --> 00:16:51,450
the as in green.

186
00:16:51,560 --> 00:16:58,750
So the syntax highlighting is telling us that the as in the line is a python key word.

187
00:16:58,850 --> 00:16:59,950
So what is this.

188
00:16:59,960 --> 00:17:01,860
As PD Pont do.

189
00:17:02,090 --> 00:17:03,800
Why is it in there.

190
00:17:03,800 --> 00:17:09,020
If you remember we actually saw this pattern again with the other import statement that we used further

191
00:17:09,020 --> 00:17:14,920
down import map plot lib dot pi plot as P.L. T.

192
00:17:15,140 --> 00:17:23,890
The answer is is that all this as PD as PDT code is doing is giving an alias to the import.

193
00:17:24,020 --> 00:17:25,880
Why do we need an alias.

194
00:17:25,880 --> 00:17:29,570
Well when you think about it the module math only has four letters.

195
00:17:29,570 --> 00:17:38,030
It's not a lot of typing it's pretty short but this module math plot lib dot pi plot has about 17 characters

196
00:17:39,020 --> 00:17:45,980
and the thing you'll learn pretty quickly about programmers is that programmers are lazy and a programmer

197
00:17:45,980 --> 00:17:50,520
doesn't want to type out 17 characters every time they're referring to their plot.

198
00:17:50,630 --> 00:17:55,950
So instead we wrote import map plot lib dot pi plot as PDT.

199
00:17:56,150 --> 00:18:00,560
This created a variable called PDT which referenced our math.

200
00:18:00,560 --> 00:18:09,470
Plot lib dot pi plot and allowed us to use a short name instead PDT became the alias for.

201
00:18:09,470 --> 00:18:12,620
Plot lib dot pi plot hand.

202
00:18:12,710 --> 00:18:16,430
We didn't have to call it P.L. t by the way we could have called it anything we wanted to.

203
00:18:16,460 --> 00:18:17,360
We could have called it.

204
00:18:17,430 --> 00:18:23,660
Jennifer put a yield pretty quickly discover that there are certain conventions in Python programming

205
00:18:23,660 --> 00:18:26,750
and people people like to stick to convention.

206
00:18:26,840 --> 00:18:29,880
For example pandas is usually given the alias PD.

207
00:18:29,900 --> 00:18:32,920
For some reason don't don't ask me why.

208
00:18:33,020 --> 00:18:38,630
So now that we've talked a little bit about this as keyword to create an alias let's put it into practice

209
00:18:38,660 --> 00:18:41,000
so that it really sinks into memory.

210
00:18:41,090 --> 00:18:48,130
We're gonna use this as keyword with our life module because we can give that module an arbitrary alias

211
00:18:48,130 --> 00:18:54,850
to check this out if we write import life as Hitchhiker's Guide

212
00:19:00,480 --> 00:19:01,590
and hit shift enter.

213
00:19:02,760 --> 00:19:05,340
Then we also have to update the cell below.

214
00:19:05,970 --> 00:19:12,060
And the reason is that we can no longer refer to this module as life because while we've given it an

215
00:19:12,060 --> 00:19:19,470
alias if we were to re-evaluate this entire notebook by going to kernel and going to restart and run

216
00:19:19,470 --> 00:19:28,700
all and scrolling down we see that we can no longer refer to our module by the name of life.

217
00:19:28,820 --> 00:19:32,050
We've given life an alias so we have to use that alias.

218
00:19:32,060 --> 00:19:41,620
We can no longer use the other name meaning we have to replace this with Hitchhiker's Guide.

219
00:19:42,100 --> 00:19:45,260
And if a hit shift entered now this arrow disappears.

220
00:19:45,440 --> 00:19:47,450
The same is true with the cell below.

221
00:19:47,660 --> 00:19:52,300
Because our program crashed these cells were actually never evaluated.

222
00:19:52,400 --> 00:19:59,750
If I hit shift enter here again it would get this name error and we have to replace life dot the answer

223
00:19:59,750 --> 00:20:05,150
with hitchhiker's guide the answer.

224
00:20:05,440 --> 00:20:11,880
Now our Python code will run without crashing so I hope this exercise made it a bit more clear as to

225
00:20:11,880 --> 00:20:14,670
how this as keyword works in practice.

226
00:20:14,670 --> 00:20:21,240
Once we have an alias we have to use the name of the alias to refer to the module.

227
00:20:21,240 --> 00:20:28,240
Now let's take another look at the final import statement from the previous lessons this import statement

228
00:20:28,240 --> 00:20:32,220
read from as learn dot linear model.

229
00:20:32,320 --> 00:20:40,930
Import linear regression and the syntax highlighting here is telling us that this from is also a python

230
00:20:40,930 --> 00:20:42,020
keyword.

231
00:20:42,370 --> 00:20:51,640
So without me showing you this in the video right away can you as a challenge structure R life dot P

232
00:20:51,640 --> 00:20:56,840
Y module to import the answer using the from keyword.

233
00:20:56,950 --> 00:20:58,810
I'll give you a few seconds to pause the video

234
00:21:01,810 --> 00:21:03,330
and here's the solution.

235
00:21:03,370 --> 00:21:07,800
The pattern is exactly the same we would use from life.

236
00:21:08,050 --> 00:21:17,770
Import the answer and had shift enter now a very very reasonable question that you will probably want

237
00:21:17,770 --> 00:21:23,350
to ask at this point is how is this different from the other import statements.

238
00:21:23,350 --> 00:21:26,440
I mean why are there three ways of importing things.

239
00:21:26,440 --> 00:21:29,330
Can we just keep things simple.

240
00:21:29,540 --> 00:21:32,410
And the answer to that is well yeah.

241
00:21:32,440 --> 00:21:36,460
So the three import statements are all doing very very similar things.

242
00:21:36,640 --> 00:21:42,580
And the reason I'm showing you these three ways of doing things is because people out there in the wild

243
00:21:42,880 --> 00:21:48,830
are using all these three ways of writing their own Python code but there's also a subtle difference

244
00:21:48,830 --> 00:21:54,830
with this from keyword and that difference to the other import statements that we've used so far is

245
00:21:54,830 --> 00:22:01,530
that in this case we're copying out the answer from our lifetime P Y file.

246
00:22:01,610 --> 00:22:08,300
The answer is now its own variable inside our Jupiter notebook because we've just made a copy of it

247
00:22:08,810 --> 00:22:11,230
and this means we can do stuff with it.

248
00:22:11,270 --> 00:22:15,750
For example we can create another variable and set it equal to the answer.

249
00:22:15,800 --> 00:22:17,390
So if I write my favorite number

250
00:22:24,870 --> 00:22:30,770
is equal to the answer and then print out my favorite number

251
00:22:35,880 --> 00:22:42,440
and he'd shift into it prints out 42 but I can also manipulate the answer itself.

252
00:22:42,480 --> 00:22:51,810
So if I write the answer is equal to the answer plus one redshift enter and then print out the value

253
00:22:58,530 --> 00:23:05,670
we can see that this variable now updated to 43 the value by the way inside the P Why file is still

254
00:23:05,670 --> 00:23:15,490
unchanged but the copy that we've made inside this notebook has updated 243 so in summary the from keyword

255
00:23:15,760 --> 00:23:22,210
copies out the answer from our life module and it makes it accessible as a variable inside our current

256
00:23:22,210 --> 00:23:23,180
notebook.

257
00:23:23,410 --> 00:23:29,020
And this is different from the other import statements where this doesn't happen because if I scroll

258
00:23:29,020 --> 00:23:36,520
up and we look at the cell up here we have to access the answer by writing Hitchhiker's Guide not the

259
00:23:36,520 --> 00:23:37,240
answer.

260
00:23:37,270 --> 00:23:42,740
So we have to use this dot notation to get hold of our variable.

261
00:23:42,790 --> 00:23:44,500
Now let's compare this from life.

262
00:23:44,500 --> 00:23:49,570
Import the answer and my favorite number equals the answer.

263
00:23:49,570 --> 00:23:52,570
Let's put this in context of the code that we've written previously.

264
00:23:53,620 --> 00:24:00,340
When we were estimating the movie revenues we had from Ashkelon import linear regression and then we

265
00:24:00,340 --> 00:24:04,960
set rigger to linear regression.

266
00:24:04,960 --> 00:24:11,080
In other words what we did was we copied an object called linear regression over into this notebook

267
00:24:11,560 --> 00:24:18,850
and then because it was too long to type every time we stored linear regression in a variable with a

268
00:24:18,850 --> 00:24:22,300
short name namely rigour.

269
00:24:22,300 --> 00:24:25,280
Now I also want to come full circle.

270
00:24:25,360 --> 00:24:31,090
This is a really good point to connect the dots between the lesson on data types.

271
00:24:31,090 --> 00:24:35,320
The lesson on collections and this lesson on modules.

272
00:24:35,500 --> 00:24:41,140
Remember when we check the data type for our regression intercept and when we read the full name of

273
00:24:41,200 --> 00:24:42,850
the data frame.

274
00:24:42,850 --> 00:24:44,250
Well guess what.

275
00:24:44,260 --> 00:24:50,920
Looking at the full name of the data types you can actually see the module name where this data type

276
00:24:50,920 --> 00:24:52,610
came from.

277
00:24:52,620 --> 00:25:00,510
So for example the data frame came from the pandas module and our NDA array came from a module called

278
00:25:00,630 --> 00:25:02,130
num pi.

279
00:25:02,130 --> 00:25:08,740
In other words num PI was the module where this n d array was defined.

280
00:25:08,880 --> 00:25:14,460
Okay so we're slowly coming to the end of this lesson on modules packages and inputs and we've covered

281
00:25:14,490 --> 00:25:16,800
quite a few important concepts here.

282
00:25:17,040 --> 00:25:20,170
So let's review them before we move on.

283
00:25:20,170 --> 00:25:29,380
For starters we learned that python scripts live inside files ending in dot P Y and we also saw how

284
00:25:29,380 --> 00:25:35,710
we can import existing code as a Python module into our Jupiter notebook projects using these import

285
00:25:35,710 --> 00:25:36,680
statements.

286
00:25:36,730 --> 00:25:40,970
We saw that there's a couple of different ways we can import a module.

287
00:25:41,050 --> 00:25:45,140
The simplest way being just to write import and then the name of the module.

288
00:25:45,190 --> 00:25:52,470
For example import math the next level up was using the as keyword in the import statement.

289
00:25:52,470 --> 00:25:56,400
So in this case we import the module but we create an alias.

290
00:25:56,400 --> 00:26:03,770
We create a new name to give the module and we can use this name to refer to it later on in the code.

291
00:26:03,780 --> 00:26:08,310
This is what we did when we wrote import life as Hitchhiker's Guide.

292
00:26:08,700 --> 00:26:13,710
Every time we wanted to access the code inside one of these modules we had the module name.

293
00:26:14,370 --> 00:26:20,310
Then the dot and then whatever we wanted to access inside the module.

294
00:26:20,310 --> 00:26:27,820
In this case we had Hitchhiker's Guide dot the answer and later on we had math dot pi.

295
00:26:28,710 --> 00:26:37,170
Finally we saw how we can use the from keyword to copy out a specific piece of code from another module.

296
00:26:37,170 --> 00:26:39,810
And this is what we did with from life.

297
00:26:39,810 --> 00:26:49,140
Import the answer and this is also what we did previously with from ASCII loan import linear regression.

298
00:26:49,290 --> 00:26:53,950
So at this point you might be asking yourself why does any of this matter.

299
00:26:53,970 --> 00:26:55,290
Why is this a big deal.

300
00:26:56,570 --> 00:27:01,940
And I suspect that you're probably already starting to see the power of these import statements and

301
00:27:01,940 --> 00:27:09,530
how they're a massive game changer because by importing a module we can use other people's code.

302
00:27:09,650 --> 00:27:13,030
And this saves us the work from having to write the code ourselves.

303
00:27:14,160 --> 00:27:19,560
In the previous lessons we accessed the linear regression capability through a module called psychic

304
00:27:19,590 --> 00:27:20,610
learn.

305
00:27:20,910 --> 00:27:25,410
We didn't actually have to write the code that implements the specifics of linear regression.

306
00:27:25,440 --> 00:27:28,890
All we did was import the functionality and use it.

307
00:27:29,750 --> 00:27:35,720
The people who created site could learn essentially created a reusable software component their linear

308
00:27:35,720 --> 00:27:41,090
regression code can be imported and used by everyone around the world for free.

309
00:27:41,150 --> 00:27:43,970
So hats off to the authors of cyclone.

310
00:27:44,090 --> 00:27:49,760
These guys and girls worked their butts off to create the code that we are using every time we import

311
00:27:49,840 --> 00:27:54,910
cycle learn when we imported our life dot P Y file.

312
00:27:54,940 --> 00:27:57,590
Well we only had a single line of code in it.

313
00:27:57,910 --> 00:28:05,740
In contrast check out the code that we imported when we wrote from SDK learn import linear regression.

314
00:28:05,740 --> 00:28:12,370
This code is actually open source so you can look at it and read it on github dot com or you can actually

315
00:28:12,430 --> 00:28:18,120
open the dot P Y file itself from the socket learn package on your computer.

316
00:28:18,460 --> 00:28:25,300
Now this file alone has about 500 lines of blood sweat and tears and that's just a single dot P Y file

317
00:28:25,390 --> 00:28:28,270
inside the SBA loan package.

318
00:28:28,270 --> 00:28:34,620
In other words there's loads and loads more files just like this that are part of cycle loan I guess

319
00:28:34,620 --> 00:28:38,850
the reason that I've climbed onto the soapbox is that I want to get this idea across that we can do

320
00:28:38,910 --> 00:28:46,470
all this cool stuff so effortlessly because we're standing on the shoulders of giants and on that note

321
00:28:46,800 --> 00:28:53,070
let's set the stage for analyzing the effects of drugs on math test scores and let's import our plunging

322
00:28:53,070 --> 00:29:02,650
module map plot lib and our linear regression to draw our best fit line let's write import map plot

323
00:29:02,650 --> 00:29:19,330
lib dot pie plot as PDT and from SDK learn dot linear underscore model import linear regression and

324
00:29:19,330 --> 00:29:21,190
then head shift enter.

325
00:29:21,370 --> 00:29:28,710
No need to import pandas by the way we've already imported it as part of a previous lesson so I'll see

326
00:29:28,710 --> 00:29:31,760
you in the next tutorial upwards and onwards.
