1
00:00:00,620 --> 00:00:07,070
Now that we've extracted the body text of an email from a single email we need to do this for all our

2
00:00:07,070 --> 00:00:13,180
emails and for that we need to create a function that kind of function that we're going to create.

3
00:00:13,340 --> 00:00:19,310
And this lesson is a special type of function in Python called a generator function.

4
00:00:19,310 --> 00:00:25,360
In other words we will create a function that reads all the files in a folder.

5
00:00:25,370 --> 00:00:31,060
Now the functions that we've encountered so far run ones and they return a value.

6
00:00:31,250 --> 00:00:37,430
If you recall a standard python function just has that return keyword and then it spits out a value

7
00:00:37,640 --> 00:00:40,040
following whatever comes after that keyword.

8
00:00:40,100 --> 00:00:41,360
And that's it.

9
00:00:41,360 --> 00:00:47,110
And what this means is that a function needs to return all the results at once.

10
00:00:47,270 --> 00:00:51,640
It needs to return all the results at the same time.

11
00:00:51,630 --> 00:00:58,610
Now if we wrote a function that read all the emails and extracted the body text from all the 5000 e-mails

12
00:00:58,820 --> 00:01:05,170
all at once then we would have to return 5000 email bodies all at the same time as well.

13
00:01:05,190 --> 00:01:09,650
Now if this sounds like a lot of work then you're absolutely right.

14
00:01:09,650 --> 00:01:13,910
And we don't have to write a python code to do it this way.

15
00:01:13,910 --> 00:01:20,600
There is an alternative and this is where generator functions come into play in our Python notebook.

16
00:01:20,600 --> 00:01:30,310
Let's add a markdown cell that reads generator functions and in the cell below we're going to go over

17
00:01:30,310 --> 00:01:36,250
this advanced functional pattern that you're going to encounter every time you want to spit out a series

18
00:01:36,250 --> 00:01:37,580
of values.

19
00:01:37,720 --> 00:01:40,480
We're gonna be combining two very powerful programming tools.

20
00:01:40,480 --> 00:01:41,920
The first one is loops.

21
00:01:41,920 --> 00:01:45,290
And the second one is this generator function.

22
00:01:45,340 --> 00:01:52,330
So before we pass 5000 e-mails let's go through a practice generator function starts out the same way

23
00:01:52,420 --> 00:02:01,060
as every other function with a definition the keyword then I'll give it a name generate on the school

24
00:02:01,810 --> 00:02:09,970
squares and then I'll give it maybe a capital and as a single parameter and then inside his function

25
00:02:10,510 --> 00:02:16,690
I'll write a loop for my underscore a number in range.

26
00:02:16,690 --> 00:02:27,050
This is gonna be up to and yield my underscore a number to the power of two times times two.

27
00:02:27,070 --> 00:02:30,130
This here is my generator function.

28
00:02:30,130 --> 00:02:36,040
It will take in a single value and and it will run the loop and times.

29
00:02:36,040 --> 00:02:39,420
Now one difference that you'll notice is that we don't have a return keyword.

30
00:02:39,430 --> 00:02:41,320
Instead we've got this other keyword here.

31
00:02:41,560 --> 00:02:42,850
Yield.

32
00:02:42,850 --> 00:02:47,500
Let's call this generator function to see how it behaves then we'll talk a little bit more about the

33
00:02:47,500 --> 00:02:48,330
syntax.

34
00:02:48,460 --> 00:02:54,490
Having pressed shift enter on the cell you might think that all we have to do is call the function by

35
00:02:54,490 --> 00:03:00,190
using its name like so generates squares three say and press shift enter.

36
00:03:01,210 --> 00:03:06,620
But in this case the output looks a bit unexpected instead of squaring say the number three.

37
00:03:06,760 --> 00:03:09,910
What we get is a generator object.

38
00:03:09,910 --> 00:03:13,830
So how do we call this function in a more useful way.

39
00:03:13,840 --> 00:03:20,410
One thing we can do is wrap this whole thing in a loop and then you'll also see how does generator function

40
00:03:20,740 --> 00:03:22,030
actually works.

41
00:03:22,030 --> 00:03:34,710
So if I say for i in generate squares semicolon print I and then the comma and then say at the end put

42
00:03:34,710 --> 00:03:40,110
all ARROW IN BETWEEN THE RESULTS AND LET'S HEAD shift into now.

43
00:03:41,140 --> 00:03:42,650
So this is interesting right.

44
00:03:42,740 --> 00:03:49,460
We get 0 1 4 and then each number is separated by little arrow here.

45
00:03:49,640 --> 00:03:55,530
What's going on our loop will run three times because n is equal to three.

46
00:03:55,820 --> 00:04:02,840
But what we're doing here is we're feeding in the values into our generator function one at a time the

47
00:04:02,840 --> 00:04:09,590
first value that we feed in is the value 0 and 0 squared is equal to zero.

48
00:04:09,590 --> 00:04:17,120
Then we feed in the value 1 1 squared is equal to while 1 then we feed and the value to 2 squared is

49
00:04:17,120 --> 00:04:18,430
equal to 4.

50
00:04:18,620 --> 00:04:24,260
And the amazing thing here is that this function is using the yield keyword remembers where it left

51
00:04:24,260 --> 00:04:25,370
off.

52
00:04:25,370 --> 00:04:30,430
So let's change our argument here to the number five and see how this goes.

53
00:04:30,440 --> 00:04:40,160
Now our sequence looks like this 0 1 4 9 16 in contrast to the return keyword for normal function where

54
00:04:40,160 --> 00:04:42,780
the function basically exits with a value.

55
00:04:42,830 --> 00:04:46,280
And we're done for good with the yield keyword.

56
00:04:46,280 --> 00:04:53,450
It's sort of exiting the function but it remembers the state where we had exited from.

57
00:04:53,450 --> 00:05:00,500
So in this case we're iterating through our loop and it remembers the previous value that it was at.

58
00:05:00,500 --> 00:05:04,410
And we're starting from the point where we had yield it from.

59
00:05:04,580 --> 00:05:06,500
But why is this interesting.

60
00:05:06,500 --> 00:05:12,530
Why does this matter at first glance it looks like we could achieve the very very same thing with a

61
00:05:12,530 --> 00:05:19,490
normal function that uses the return keyword instead of having these loops and iterating through a generator

62
00:05:19,490 --> 00:05:20,210
function.

63
00:05:20,330 --> 00:05:22,220
Why would we do this.

64
00:05:22,220 --> 00:05:29,000
Well here's the thing with a generator function we don't have to do all the upfront work.

65
00:05:29,360 --> 00:05:37,430
So in our case we've got 5000 e-mails that we have to pass with a large dataset like that or an incredibly

66
00:05:37,430 --> 00:05:38,600
long list.

67
00:05:38,750 --> 00:05:44,240
It takes an incredible amount of computation to even produce a single value let alone thousands of them

68
00:05:44,330 --> 00:05:46,180
at the same time.

69
00:05:46,190 --> 00:05:52,550
So what we're going to do now is we're gonna apply this generator function to loop over and iterate

70
00:05:52,850 --> 00:06:00,320
over all the files in our directory that holds onto the spam emails and then we're basically going to

71
00:06:00,320 --> 00:06:02,970
pass one email at a time.

72
00:06:03,020 --> 00:06:07,140
That's how we're going to use this generator function.

73
00:06:07,160 --> 00:06:15,440
Let me add in the markdown cell here that reads email body extraction and what we'll do here is will

74
00:06:15,680 --> 00:06:24,270
define a generator function that walks over all the file names in a particular folder.

75
00:06:24,290 --> 00:06:26,720
This is a function from the operating system.

76
00:06:26,780 --> 00:06:28,460
Here's how we're going to use it.

77
00:06:28,460 --> 00:06:31,130
So we'll wrap the whole thing in a function.

78
00:06:31,130 --> 00:06:31,910
Yeah.

79
00:06:31,940 --> 00:06:37,450
Def email under scoped body under school generator.

80
00:06:37,790 --> 00:06:45,920
And this is going to take a single parameter namely the relative path to one of our folders.

81
00:06:46,040 --> 00:06:50,960
The spam folder or the folder with the legitimate emails.

82
00:06:51,010 --> 00:06:54,020
Now what we'll do is we'll write a loop.

83
00:06:54,020 --> 00:07:09,040
We're going to see for root comma directory names DSR names comma file names in walk parentheses path

84
00:07:09,640 --> 00:07:17,710
this Walk function is where our operating system comes in the Walk function generates the file names

85
00:07:18,070 --> 00:07:25,570
in a directory by walking the tree from the top to the bottom and it yields.

86
00:07:25,600 --> 00:07:34,390
That's right doesn't return it yields a tuple so three things consisting of the directory path which

87
00:07:34,390 --> 00:07:41,770
is this first one here that directory names which is the second one here and the file names which is

88
00:07:41,860 --> 00:07:50,950
this third one here the directory path is obviously the path to our spam folder in this case that directory

89
00:07:50,950 --> 00:07:58,900
names are the sub directories which we're actually not going to use and the file names is the bit that

90
00:07:58,900 --> 00:08:07,060
we're actually interested in this is gonna be a list of names of all the files in our directory.

91
00:08:07,300 --> 00:08:13,960
In other words if we point this function to easy honest go ham on a score one then we're gonna get all

92
00:08:13,960 --> 00:08:20,290
these file names right here we're gonna get all the file names in this easy honest go ham directory

93
00:08:21,220 --> 00:08:29,080
This is what we're after now the Walk function is not inbuilt it belongs to the OS library so let's

94
00:08:29,140 --> 00:08:40,810
imported at the very top of our notebook scrolling up you can see from os import walk and while we're

95
00:08:40,810 --> 00:08:45,670
up here we're also going to import something else that we're gonna be using in this function namely

96
00:08:46,000 --> 00:08:47,330
the join method.

97
00:08:47,470 --> 00:08:53,170
So from OS thought path import join.

98
00:08:53,220 --> 00:09:02,020
Now let me hit shift enter and scroll back down let me add a semicolon and let's write the inner part

99
00:09:02,320 --> 00:09:08,530
of this loop the inner part of this loop is going to make use of all the file names that we're retrieving

100
00:09:08,890 --> 00:09:10,780
using the Walk function.

101
00:09:10,780 --> 00:09:17,110
So what we want to do with a single file is actually very very similar to this bit of code that we've

102
00:09:17,110 --> 00:09:23,290
written earlier but since this function is kind of return all the files to us we're gonna have to tackle

103
00:09:23,770 --> 00:09:25,850
each file one by one.

104
00:09:25,850 --> 00:09:35,380
But let me copy this code nonetheless and then down here we can add another loop namely we'll see full

105
00:09:36,100 --> 00:09:46,760
file on the screen name in file names semicolon and then Let's paste in this code to select this bit

106
00:09:46,760 --> 00:09:56,690
here and just hid tab on my keyboard to indented and make sure hits in the body off my inner loop and

107
00:09:56,690 --> 00:10:03,320
then I'm going to have to make another change we're not gonna be targeting our example file we need

108
00:10:03,320 --> 00:10:13,300
to be targeting a particular file in this list of file names how do we get that well we'll see the file

109
00:10:13,300 --> 00:10:15,930
path of a particular file.

110
00:10:15,970 --> 00:10:24,790
It's gonna be equal to joining the route which we're getting here from our outer loop to a particular

111
00:10:24,790 --> 00:10:32,470
file name that we're iterating over in our inner loop so we'll say combined the path for the root directory

112
00:10:32,770 --> 00:10:40,390
with a file name that we're iterating over in our loop and then in our open function we can replace

113
00:10:40,600 --> 00:10:44,380
example on a school file with file path.

114
00:10:44,500 --> 00:10:48,180
Everything here will remain the same.

115
00:10:48,220 --> 00:10:52,640
The only thing that's gonna change is that we're not gonna be printing out the email body.

116
00:10:52,870 --> 00:10:57,610
We want this function to spit out two pieces of information.

117
00:10:57,610 --> 00:11:03,880
One is the file name and the other one is the email body and this is where we're gonna use that yield

118
00:11:04,030 --> 00:11:05,190
keyword once again.

119
00:11:05,220 --> 00:11:12,220
So we'll say yield file on a screen name comma email and a school body.

120
00:11:12,220 --> 00:11:18,580
Now I know this bit of code looks very very involved but we've broken it down quite a bit in the previous

121
00:11:18,580 --> 00:11:20,040
lessons already.

122
00:11:20,080 --> 00:11:27,670
So for example we know that this bit of code extracts an email body from a particular file and we know

123
00:11:27,670 --> 00:11:37,300
that using the yield keyword this function here will give us a result every time it loops over a particular

124
00:11:37,300 --> 00:11:38,980
file in our directory.

125
00:11:39,460 --> 00:11:45,040
So spit out this file name that I'll spit out this file name and this email body then I'll spit out

126
00:11:45,040 --> 00:11:52,520
this file name and this email body and so on the only thing that's really new is this Walk function

127
00:11:52,850 --> 00:12:00,830
from the OS library which spits out a tuple which we're using in our loop and we're nesting a inner

128
00:12:00,830 --> 00:12:06,830
loop inside this one here to go over all the files one by one.

129
00:12:07,980 --> 00:12:10,710
Now that's half of the work done.

130
00:12:10,880 --> 00:12:17,560
If we look back up here we've essentially done this bit we now need to write the second piece of code

131
00:12:17,770 --> 00:12:21,040
that actually calls our generator function.

132
00:12:21,040 --> 00:12:25,680
We need to write a loop that repeatedly calls our generator function.

133
00:12:25,840 --> 00:12:29,430
Let's put the second piece of code inside a function as well.

134
00:12:29,950 --> 00:12:37,480
So I'm gonna go down here and I'm going to call this function data frame from directory.

135
00:12:37,570 --> 00:12:45,480
So Def under school from under school directory and it's going to take two inputs it's gonna take a

136
00:12:45,480 --> 00:12:55,180
path and a classification and by classification I just mean whether this email folder is going to contain

137
00:12:55,210 --> 00:13:01,690
spam emails or legitimate emails to create our data frame we will start out with two empty lists.

138
00:13:01,690 --> 00:13:11,680
So I'll say Rose is equal to half empty square brackets and row underscore names is also equal to a

139
00:13:11,680 --> 00:13:18,600
pair of empty square brackets our generator function is going to be called Inside A Loop.

140
00:13:18,970 --> 00:13:30,320
So we'll say for file on the school name comma email unescorted body which is what our generator function

141
00:13:30,590 --> 00:13:43,030
is returning in email under school body on a school generator and then our generator function here needs

142
00:13:43,210 --> 00:13:49,900
one input namely a path and by the way if you haven't pressed shift enter on this it's a good idea to

143
00:13:49,900 --> 00:13:58,860
do so now and once you've done that all we need to do is supply a path to our generator function as

144
00:13:58,860 --> 00:14:05,430
an argument and I'm just going to feed through the path that is being passed into this data frame from

145
00:14:05,430 --> 00:14:11,570
directory function to our generator function right here inside the loop.

146
00:14:11,610 --> 00:14:15,370
We're gonna append our email bodies to our rows list so see rows.

147
00:14:15,360 --> 00:14:29,370
Don't append parentheses curly braces single quotes message colon email and a school body comma single

148
00:14:29,370 --> 00:14:31,980
quotes category.

149
00:14:31,980 --> 00:14:34,950
Colon classification.

150
00:14:35,240 --> 00:14:43,060
So what I've done here is I've created a Python dictionary using the values that are generator function

151
00:14:43,330 --> 00:14:51,200
spits out each time this loop runs it's gonna give us a file name and an email body and we're storing

152
00:14:51,200 --> 00:15:00,010
this in a list where we're appending the email body one by one as it goes over the files.

153
00:15:00,050 --> 00:15:08,240
Next we'll do something very similar for the row names so row underscore names dot append parentheses

154
00:15:08,990 --> 00:15:11,380
file on the school name.

155
00:15:11,380 --> 00:15:15,330
How this data frame from directory function here is gonna be a regular function.

156
00:15:15,350 --> 00:15:16,710
It's not going to yield anything.

157
00:15:16,760 --> 00:15:29,540
It's going to return a data frame so PD for pandas dot data frame parentheses rows comma index is equal

158
00:15:29,540 --> 00:15:33,940
to row on a school names and that's it.

159
00:15:34,920 --> 00:15:43,140
Except that we need to import pandas as PD at the top of our notebook of course.

160
00:15:43,140 --> 00:15:55,310
So let's do that now import pandas as PD shift into scroll down and head shift into on this as well.

161
00:15:56,620 --> 00:16:01,850
Now we've written quite a bit of code and we haven't tested it at all.

162
00:16:02,110 --> 00:16:06,880
So we're not even sure if all of this will work or if we've made an error.

163
00:16:07,990 --> 00:16:13,960
Let's try and call this data frame from the directory function and see if it works.

164
00:16:14,200 --> 00:16:20,780
But before we do that let's add all our paths to the top of her notebook.

165
00:16:20,860 --> 00:16:27,610
Under this constant setting the paths that I'm interested in are the paths to easy ham underscore one

166
00:16:28,240 --> 00:16:33,570
the path to easy ahem I just got to spend one and spam two.

167
00:16:33,880 --> 00:16:40,480
So let's create four constants with these paths the kind of path that we're gonna be working with.

168
00:16:40,510 --> 00:16:49,420
It's gonna be a relative path that pays classified notebook is located under M0 projects so our path

169
00:16:49,570 --> 00:16:51,950
will have to go into spam data.

170
00:16:52,180 --> 00:16:56,140
0 1 processing Spam Assassin corpus.

171
00:16:56,140 --> 00:17:00,340
And then I'll have these folder names afterwards.

172
00:17:00,340 --> 00:17:01,630
So here we go.

173
00:17:01,630 --> 00:17:09,880
Spam on a score one on a scroll path is going to be equal to this first bit here which I'm just gonna

174
00:17:10,000 --> 00:17:12,130
copy and paste.

175
00:17:12,130 --> 00:17:17,230
Then we said it was spam underscore assassin underscore corpus.

176
00:17:17,230 --> 00:17:22,740
And then we said it was gonna be spam underscore one.

177
00:17:22,940 --> 00:17:30,970
This is the relative path from our base classifier notebook to our spam on a scroll one folder.

178
00:17:30,990 --> 00:17:37,640
Now remember everything is case sensitive and you've got to use forward slashes between the folder names

179
00:17:38,120 --> 00:17:40,500
to avoid getting any errors.

180
00:17:40,580 --> 00:17:43,280
Let's tackle the other four relative paths now.

181
00:17:43,310 --> 00:17:50,500
So I'm just going to copy this paste it three more times and rename our constants here as well.

182
00:17:50,570 --> 00:17:56,240
So spam to path this one I'll call easy.

183
00:17:56,240 --> 00:18:05,380
Non spam one path and this one I'll call easy on a school non spam to path the folder that these ones

184
00:18:05,380 --> 00:18:06,820
are going to point to.

185
00:18:06,850 --> 00:18:19,180
It's gonna be easy on the school ham to easy underscore how one spam two and spam one of course.

186
00:18:19,180 --> 00:18:20,500
And that's it.

187
00:18:20,500 --> 00:18:28,570
If we hit shift enter on this and just make sure we haven't made any typos we're good to go let's call

188
00:18:28,570 --> 00:18:35,140
RDF from directory function and create a data frame of spam emails.

189
00:18:35,430 --> 00:18:43,580
So I'm going to call this data frame spam underscore emails and when I said it equal to def from directory

190
00:18:44,360 --> 00:18:53,760
note I don't have to type all this out I can just hit tab on my keyboard parentheses spam one path comma

191
00:18:54,300 --> 00:19:01,100
and then the category for spam is going gonna be the number one now before I continue going.

192
00:19:01,110 --> 00:19:05,110
Let's look at the head of this data frame to check out the first few rows.

193
00:19:05,250 --> 00:19:13,780
So spam under school emails dot head parentheses and shift into.

194
00:19:13,810 --> 00:19:18,750
Well here we can see the file names of the first five rows.

195
00:19:19,050 --> 00:19:20,440
We've got a category.

196
00:19:20,580 --> 00:19:24,400
Category is going to be one for spam and zero for non spam.

197
00:19:24,690 --> 00:19:26,550
And then we've got the messages.

198
00:19:26,550 --> 00:19:32,530
In other words the bodies of all the emails as a column in our data frame as well.

199
00:19:33,500 --> 00:19:40,310
Let's take a look at the shape of the state of frame to see if we've got all our emails spam underscore

200
00:19:40,310 --> 00:19:50,570
emails dot shape shift enter gives us five hundred and one and two to four the number of columns the

201
00:19:50,570 --> 00:19:56,800
category and our email bodies and five hundred one for the number of rows.

202
00:19:56,870 --> 00:20:00,890
In other words the number of messages in this folder.
