WEBVTT
1
00:00:00.960 --> 00:00:03.960
Let me scroll back up to where we had our cost.

2
00:00:04.020 --> 00:00:06.070
We're going to add two loops here.

3
00:00:06.210 --> 00:00:09.730
The first one will be for i in range.

4
00:00:09.870 --> 00:00:11.250
And then how far do we want to go.

5
00:00:11.730 --> 00:00:15.220
We want to go across all the theta values.

6
00:00:15.240 --> 00:00:23.250
So it's gonna be an R on the school vetoes between the parentheses and then colon and we're going to

7
00:00:23.250 --> 00:00:32.550
do the same thing for our second loop when it's a for j in range parentheses and underscore theta as

8
00:00:33.120 --> 00:00:34.580
colon.

9
00:00:34.590 --> 00:00:37.080
Now what do we want to do inside the loop.

10
00:00:37.080 --> 00:00:39.360
Let's do something very unimaginative.

11
00:00:39.360 --> 00:00:50.310
First let's print out all the values that we have inside our plot underscore T Zero variable and we're

12
00:00:50.310 --> 00:00:52.050
going to print them out one by one.

13
00:00:52.050 --> 00:00:59.310
So we're gonna have plot on the school t 0 square brackets and now we have a choice we can go row by

14
00:00:59.640 --> 00:01:01.500
column or column by row.

15
00:01:01.510 --> 00:01:13.890
So if we go by column then we'd have I in the first set of square brackets and then J in the second

16
00:01:14.220 --> 00:01:15.810
set of square brackets.

17
00:01:15.810 --> 00:01:18.320
Let's see what happens.

18
00:01:18.320 --> 00:01:19.550
There we go.

19
00:01:19.550 --> 00:01:21.860
This is us printing out 25.

20
00:01:21.860 --> 00:01:30.370
Values the 25 values that are stored inside our theta matrix are theta five by five.

21
00:01:30.380 --> 00:01:35.460
Array the other way say J and I.

22
00:01:35.480 --> 00:01:38.330
Our output would look like this.

23
00:01:38.330 --> 00:01:44.990
In this case we're staying in the same column namely the first one and we're looking at all the first

24
00:01:45.020 --> 00:01:46.190
elements.

25
00:01:46.340 --> 00:01:51.820
If we have I and then J then we're doing one row at a time.

26
00:01:51.830 --> 00:01:53.800
So this is the first element in the row.

27
00:01:53.810 --> 00:01:55.420
This the second element in the row.

28
00:01:55.430 --> 00:01:56.540
This is the third one.

29
00:01:56.570 --> 00:01:58.730
This is the fourth one is the fifth one.

30
00:01:58.730 --> 00:02:08.210
And then this is the first element in the second row on the other hand if we have J and then I then

31
00:02:08.210 --> 00:02:14.270
we would be looking at the first element in the first row the first element in the second row the first

32
00:02:14.270 --> 00:02:17.120
element in the third row and so on.

33
00:02:17.120 --> 00:02:24.410
So the order in which we supply the indices here to our two dimensional array it matters in the sense

34
00:02:24.410 --> 00:02:30.870
that it determines in which order our loop will go through the array.

35
00:02:31.130 --> 00:02:36.190
But regardless in which order you go through you still hit up all the values.

36
00:02:36.230 --> 00:02:42.650
So I want to comment this out and how I'm going to write the code to calculate our estimated y values

37
00:02:42.770 --> 00:02:49.840
so y hat is equal to the first value in half the theta zero array.

38
00:02:49.900 --> 00:03:00.140
It's going to be plot underscore t 0 square brackets C I and then square brackets.

39
00:03:00.140 --> 00:03:11.050
J So this is gonna be our first t zero value when you add plot underscore t 1 square brackets.

40
00:03:11.080 --> 00:03:13.830
I square brackets.

41
00:03:13.940 --> 00:03:19.390
J times X on the score 5.

42
00:03:19.730 --> 00:03:29.500
So this is gonna cascade our predicted y values for the first set of theta parameters and then what

43
00:03:29.500 --> 00:03:36.660
we're gonna say it's going to say that the plot underscore cost matrix is going to update and it's going

44
00:03:36.660 --> 00:03:39.130
to update in the same position.

45
00:03:39.200 --> 00:03:43.940
It's gonna be updating in square brackets ie square brackets.

46
00:03:43.950 --> 00:03:52.100
J And it's gonna be equal to the output from our lovely means squared error function.

47
00:03:52.160 --> 00:04:05.030
So MSE parentheses y and a score five and then comma Y underscore that so we're gonna calculate r y

48
00:04:05.030 --> 00:04:15.440
hat value for these theta parameters and then based on that we're going to calculate our means quit

49
00:04:15.470 --> 00:04:25.020
error and we're gonna update our two dimensional cost array and we're gonna do that for all of the theta

50
00:04:25.020 --> 00:04:28.470
values so we can plot them later on.

51
00:04:28.470 --> 00:04:32.700
So there's a lot of calculations going on here but there's only four lines of code.

52
00:04:32.730 --> 00:04:37.130
This is very very terse but very powerful at the same time.

53
00:04:37.140 --> 00:04:44.040
Let's take a look at what the plot on the scope cost variable actually looks like after the loop has

54
00:04:44.040 --> 00:04:45.410
run.

55
00:04:45.420 --> 00:04:46.420
Let's take a look.

56
00:04:46.600 --> 00:04:54.830
When redshift enter and here we see that it has a five by five matrix.

57
00:04:54.900 --> 00:04:58.330
I can prove this even though it's hard to see because of the lines wrapping.

58
00:04:58.380 --> 00:05:05.880
If I say plot underscore cost dot shape you can see here it's five by five and we can see that any for

59
00:05:05.880 --> 00:05:14.180
each element we've got a mean squared error for a particular combination of factors let's print this

60
00:05:14.180 --> 00:05:18.680
stuff out so that we can verify what's going on when we make changes later on.

61
00:05:18.860 --> 00:05:28.340
So when I see print and then the string shape of plot underscore T Zero comma plot on the got T Zero

62
00:05:28.340 --> 00:05:36.390
dot shape then I'm going to copy this print statement paste it two more times and in the second one

63
00:05:36.400 --> 00:05:47.460
way to change it to t 1 and then the third one I'm going to change it to plot underscore cost so this

64
00:05:47.460 --> 00:05:55.170
is printing out the dimensions of all the three arrays that we're using and at the moment they're all

65
00:05:55.290 --> 00:06:00.310
five by five good stuff.

66
00:06:00.370 --> 00:06:03.470
It's time to throw the stuff up onto a chart.

67
00:06:03.670 --> 00:06:04.510
A 3D chart.

68
00:06:04.510 --> 00:06:05.480
No less.

69
00:06:05.480 --> 00:06:13.510
Let's take a look at a comment in this new cell plotting mean square error.

70
00:06:13.510 --> 00:06:23.020
And I want to do our old trick with the figure Missy fig is equal to appeal to dot figure parentheses

71
00:06:25.140 --> 00:06:34.750
fixed size equals square brackets say sixteen by twelve and then you've got some axes that I've got

72
00:06:34.750 --> 00:06:35.240
to create.

73
00:06:35.320 --> 00:06:43.870
So it's going to be fig don't GCA get current axes and it's gonna be for a 3D projection so projection

74
00:06:44.470 --> 00:06:52.540
equals and then the string three D lowercase d had our charts gonna have three axes it's gonna have

75
00:06:53.140 --> 00:06:56.800
a Y label on X label and a Z label.

76
00:06:56.830 --> 00:07:08.890
So I'm going to see a X dot set on the school X label parentheses and then the string theta zero So

77
00:07:08.890 --> 00:07:18.640
theta zero is gonna be on our x axis and it's gonna be at font size say 20.

78
00:07:18.640 --> 00:07:23.890
Copy that whole line pasted two more times and then I would make some changes.

79
00:07:23.890 --> 00:07:25.870
Second one is gonna set the Y label.

80
00:07:25.930 --> 00:07:32.050
The third one is gonna set these z label and then the string is gonna be updated to theta one and then

81
00:07:32.050 --> 00:07:33.700
for the z axis.

82
00:07:33.700 --> 00:07:36.280
This is gonna be it's gonna be our cost right.

83
00:07:36.280 --> 00:07:39.460
Cost hyphen M S E.

84
00:07:40.750 --> 00:07:49.310
So we've created our plot set the size of our figure then we've grabbed our axes object from our figure

85
00:07:49.970 --> 00:07:56.600
we've set some of the attributes of the axes using the set and the score X label set on the score y

86
00:07:56.600 --> 00:08:07.370
label and set underscore Z label functions and how we do the best part a X dot plot on the score surface

87
00:08:07.770 --> 00:08:16.700
and inside the parentheses we have to supply three two dimensional arrays the first one was gonna be

88
00:08:16.700 --> 00:08:17.900
our theta zero.

89
00:08:17.990 --> 00:08:20.060
So this is on our x axis.

90
00:08:20.060 --> 00:08:29.000
The second one it's gonna be plot on the score t 1 and this is gonna be for our y axis and the third

91
00:08:29.000 --> 00:08:37.310
one is gonna be the cost that we calculated in our nested loop so plot on the score cost.

92
00:08:37.310 --> 00:08:44.140
And finally we're gonna see BLT dot show with some parentheses at the end.

93
00:08:44.150 --> 00:08:48.910
Now we should be able to get a visualization of all that work we just did.

94
00:08:49.040 --> 00:08:54.710
And before I hit shift into let me just quickly check the code that I've written.

95
00:08:54.710 --> 00:09:01.540
See if I've made any typos I'm spotting one of them here in setting the figure we got to use our math

96
00:09:01.550 --> 00:09:06.200
plot lib object which is P.L. T dot figure not porch type figure.

97
00:09:06.830 --> 00:09:14.810
So PDT was our met plot lib object and peel T dot figure grabs our figure object.

98
00:09:14.810 --> 00:09:15.730
I think we're good now.

99
00:09:15.740 --> 00:09:23.840
So let me hit shift enter and see what this looks like what it looks like.

100
00:09:23.890 --> 00:09:32.390
So I realize this might be a little bit underwhelming and it looks like a video game from the 1990s.

101
00:09:32.390 --> 00:09:39.320
This is I think the kind of graphics they had but we can change this very very easily if I scrolled

102
00:09:39.320 --> 00:09:49.850
back up and increase the number of data points we're using from five to say two hundred and I update

103
00:09:50.030 --> 00:09:56.960
this cell then we're gonna generate a lot more theta zeros and a lot more theta ones with our little

104
00:09:56.960 --> 00:09:59.080
space function has such.

105
00:09:59.210 --> 00:10:07.710
When I had shift enter on this cell I can see that we're now dealing with a 200 by 200 array.

106
00:10:07.910 --> 00:10:11.680
So a lot more data points that we're plotting now.

107
00:10:11.690 --> 00:10:18.890
And when I replant are surface biting shift into here to update this cell then it will look something

108
00:10:19.010 --> 00:10:20.780
like this.

109
00:10:20.780 --> 00:10:22.400
Brilliant.

110
00:10:22.400 --> 00:10:25.250
How are you liking the navy blue.

111
00:10:25.250 --> 00:10:31.580
I think we've got to add a splash of color to this to make it a bit more interesting.

112
00:10:31.580 --> 00:10:38.180
I'm going to go back up to my plot surface function and I'm going to make use of this color map that

113
00:10:38.180 --> 00:10:39.900
we imported earlier.

114
00:10:39.940 --> 00:10:42.960
It's gonna be an extra argument I'm gonna supply here.

115
00:10:42.980 --> 00:10:48.890
See map and it's going to be set equal to our CRM module.

116
00:10:48.890 --> 00:10:55.240
Put a dot after it and then when I use hot and head shift into.

117
00:10:55.650 --> 00:10:58.190
Now this is gonna look pretty good.

118
00:10:58.220 --> 00:11:02.450
I personally think this surface doesn't just look hot.

119
00:11:02.450 --> 00:11:05.860
You could say it almost looks cheap.

120
00:11:06.760 --> 00:11:13.160
But before I lose you to this video game let's compare our function and our calculations to our regression

121
00:11:13.220 --> 00:11:20.220
estimates because we can actually pull out the lowest means quit error from our plot variable.

122
00:11:20.240 --> 00:11:20.740
Right.

123
00:11:20.780 --> 00:11:34.970
So if I come down here and I write print and then write mean value of plot underscore cost comma plot

124
00:11:35.030 --> 00:11:35.440
on the score.

125
00:11:35.440 --> 00:11:37.810
Cost don't mean.

126
00:11:37.820 --> 00:11:45.470
And then some parentheses I can actually pull out the lowest mean squared error from our surface plot

127
00:11:45.590 --> 00:11:54.290
that we just used for graphing and that is zero point 9 4 8 3 8.

128
00:11:54.410 --> 00:12:03.140
But hold on I hear you say what are the theta zero and theta one values associated with that cost that

129
00:12:03.140 --> 00:12:04.650
we just pulled out.

130
00:12:04.730 --> 00:12:08.180
I mean after all we care about our parameter values.

131
00:12:08.210 --> 00:12:08.850
Right.

132
00:12:08.870 --> 00:12:17.950
So how can we grab the row and the column indices which correspond to this minimum cost.

133
00:12:18.500 --> 00:12:21.070
And for that num Pi has you covered.

134
00:12:21.380 --> 00:12:24.830
It's got a function called unravel index.

135
00:12:24.830 --> 00:12:36.140
So when I say I J underscore mine is equal to NDP doesn't unravel on the score index and it needs two

136
00:12:36.140 --> 00:12:37.110
inputs.

137
00:12:37.160 --> 00:12:44.920
It needs the indices and that's going to be equal to plot on the score cost.

138
00:12:44.960 --> 00:12:45.920
Don't.

139
00:12:46.130 --> 00:12:47.770
And then ARG Min.

140
00:12:47.840 --> 00:12:56.320
So this will output the indices from R to the array where the means quit.

141
00:12:56.330 --> 00:12:58.580
ERA is at its lowest.

142
00:12:59.000 --> 00:13:00.500
And then we have a comma afterwards.

143
00:13:00.530 --> 00:13:06.910
And we supply that second input to the unravel index function and that's the dimensions.

144
00:13:06.940 --> 00:13:17.020
D I M S of the 2D array that we are supplying so we can say DMS is equal to plot on the scope cost dot

145
00:13:17.230 --> 00:13:21.670
shape and this will give us the row and the column index.

146
00:13:21.700 --> 00:13:23.050
Let's point this out.

147
00:13:23.140 --> 00:13:28.540
Print C Min occurs at I comma.

148
00:13:28.630 --> 00:13:29.320
J.

149
00:13:29.470 --> 00:13:40.570
Colon comma I J underscore min to the minimum occurs at the one hundred and eleven throw and ninety

150
00:13:40.570 --> 00:13:42.430
first column.

151
00:13:42.430 --> 00:13:48.760
So this is where after running that nested for loop de means quit Arrow was the lowest the theta zero

152
00:13:48.760 --> 00:13:55.450
value associated with row number one hundred and eleven and column ninety one is as follows.

153
00:13:55.450 --> 00:14:09.340
Print Min M is E for theta zero at plot underscore T Zero square brackets 1 1 1 square brackets ninety

154
00:14:09.370 --> 00:14:20.300
one is plot underscore T Zero square brackets 1 1 1 and then square brackets ninety one hitting shift

155
00:14:20.330 --> 00:14:27.980
enter we can see that this is fiendishly close to what the second loan package calculated how course

156
00:14:28.550 --> 00:14:35.750
using a nested for loop is not better it s hits very much a brute force method but I kind of wanted

157
00:14:35.750 --> 00:14:44.090
to show you how you can use these 2d arrays and how you can work with them and how you can access particular

158
00:14:44.120 --> 00:14:50.840
values using the row and the column indices let's do that one more time but this time we'll grab the

159
00:14:50.840 --> 00:15:01.550
theta one value just for good measure so be print and then Min MSE for theta one at plot underscore

160
00:15:01.700 --> 00:15:11.570
t one square brackets one one one square brackets ninety one comma plot on the score t one square brackets

161
00:15:11.660 --> 00:15:15.080
one one one square brackets ninety one.

162
00:15:15.250 --> 00:15:18.670
So this should be close to one point two.

163
00:15:18.710 --> 00:15:23.540
Let's take a look and it is it's one point two three.

164
00:15:23.850 --> 00:15:24.960
Brilliant.

165
00:15:24.960 --> 00:15:32.850
Now all that's left to do is run our gradient descent algorithm on this cost function and then we've

166
00:15:32.850 --> 00:15:34.500
come full circle.

167
00:15:34.710 --> 00:15:36.550
I'll see you in the next lesson.

168
00:15:37.050 --> 00:15:43.050
Super hot is actually one of the most interesting games I've played recently by the way so I just had

169
00:15:43.050 --> 00:15:50.370
to mention it it's this first person shooter but with a twist time only moves forward when you move

170
00:15:50.730 --> 00:15:56.690
and there's no music it's just the sound effect of glass shattering Oh that's right that's that's it.

171
00:15:56.690 --> 00:15:57.250
So yeah.

172
00:15:57.300 --> 00:16:02.450
If you're curious uh check it out on steam if you want a break from programming.

173
00:16:02.460 --> 00:16:06.030
I do hope you get super hot to try and let me know what you think.

174
00:16:06.240 --> 00:16:12.060
Just the truth to what I did and play it really late at night because if you're anything like me we'll

175
00:16:12.060 --> 00:16:14.350
get too excited and you'll have trouble sleeping.

176
00:16:14.350 --> 00:16:16.800
So yeah take it.
