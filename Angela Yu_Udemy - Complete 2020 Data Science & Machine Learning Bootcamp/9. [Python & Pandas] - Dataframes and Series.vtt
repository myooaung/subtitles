WEBVTT
1
00:00:00.930 --> 00:00:06.180
In this lesson we're going to talk about two more types of data structures for storing a lot of data

2
00:00:06.180 --> 00:00:07.900
at the same time.

3
00:00:08.040 --> 00:00:12.060
The first one that we're going to look at is called a data frame.

4
00:00:12.480 --> 00:00:15.700
In This lesson's resources you'll find included some fresh data.

5
00:00:16.260 --> 00:00:20.220
Let's upload this data to our Jupiter notebook.

6
00:00:20.220 --> 00:00:28.590
So change the tabs to your M.O. projects folder and then click upload and then pick the LSD underscore

7
00:00:28.590 --> 00:00:35.970
math underscore school underscored data dot see as we file again you'll find the CSC file in the lesson

8
00:00:35.970 --> 00:00:45.690
resources after you've chosen this file click upload and then head back into your Jupiter notebook here

9
00:00:45.690 --> 00:00:47.720
we're going to write the following code right.

10
00:00:47.790 --> 00:00:58.300
Import pandas as PD and then we're gonna use pandas to read our CSB file and we're going to store that

11
00:00:58.300 --> 00:01:08.860
information in a variable called data so we'll write data is equal to PD dot read underscores scores

12
00:01:08.950 --> 00:01:19.660
as V parentheses single quotes and then the file name LSD on a school math on school on a school data

13
00:01:20.050 --> 00:01:29.980
dot c s v as you're writing this make sure you don't have any typos in the file name all the capitalization

14
00:01:30.100 --> 00:01:37.230
and the spaces matter of course let's at shift enter and see what we get what we're looking for the

15
00:01:37.230 --> 00:01:44.990
stage heart no errors now that we've done that we can take a peek at our data variable so let's print

16
00:01:44.990 --> 00:01:51.500
it out let's print out data and we can do that by writing print and then within the parentheses we'll

17
00:01:51.500 --> 00:01:52.700
put data

18
00:01:55.660 --> 00:02:05.190
and what you should see at this stage are seven rows and three columns now just like our lists and our

19
00:02:05.190 --> 00:02:12.820
arrays are data variable here is holding onto this collection however the super neat thing here is the

20
00:02:12.820 --> 00:02:22.080
structure of this data we've got our data structured in both rows and columns rows and columns boys

21
00:02:22.080 --> 00:02:26.160
and girls our spreadsheet monkey's dream about at night.

22
00:02:26.160 --> 00:02:32.820
Now as a challenge can you find out what the type of this data variable is.

23
00:02:33.060 --> 00:02:42.450
I'll give you a couple of seconds here's the solution we'll write to type provide our variable hit shift

24
00:02:42.500 --> 00:02:51.600
into and then we get the full name data is of type panda stopped cool dot frame dot data frame so the

25
00:02:51.600 --> 00:02:58.680
type of this variable is not in and it's not float and it's not an array nor is it a list it is of type

26
00:02:58.920 --> 00:03:05.100
data frame and that's how we'll be referring to it we'll be referring to it by the short name and the

27
00:03:05.140 --> 00:03:13.410
shortening is the last bit at the end of this long name in terms of lingo no programmer would say it

28
00:03:13.410 --> 00:03:20.610
is of type data frame they'll simply say this variable is a data frame this is the kind of language

29
00:03:20.700 --> 00:03:26.950
that you'll hear people use when they're referring to types as we've said before you can think of a

30
00:03:26.950 --> 00:03:34.840
data frame as a collection but with a clearly defined structure the data inside a data frame is structured

31
00:03:34.840 --> 00:03:41.460
in rows and columns just like an Excel spreadsheet and data frames are super common in Python and you'll

32
00:03:41.470 --> 00:03:47.530
see data frames being used in many many places so it's a good idea to learn a couple of the tricks and

33
00:03:47.530 --> 00:03:55.780
a couple of the things that we can do with data frames for example we can grab a single column by providing

34
00:03:55.840 --> 00:04:05.160
the column name where before we were providing the index for a list or an array so if I write data open

35
00:04:05.160 --> 00:04:13.470
square brackets I can put the column name between some single quotes inside these square brackets See

36
00:04:13.470 --> 00:04:22.280
I take the third column and I write average underscore math on the score test underscore school when

37
00:04:22.280 --> 00:04:29.900
I hit shift enter Jupiter a notebook will display to me that data inside the single column.

38
00:04:30.190 --> 00:04:35.980
I guess I want to bring your attention to the fact that the python syntax is very very similar between

39
00:04:35.980 --> 00:04:38.980
lists and arrays and data frames.

40
00:04:38.980 --> 00:04:44.680
However instead of providing the position or the index between the square brackets here with specifying

41
00:04:44.800 --> 00:04:45.550
a column name.

42
00:04:46.480 --> 00:04:48.430
But again typos are hard.

43
00:04:48.430 --> 00:04:54.670
Something that we have to be very much aware of when we're doing this because if we have a typo in our

44
00:04:54.670 --> 00:04:58.910
column name and we're trying to fetch a column that doesn't exist.

45
00:04:58.990 --> 00:05:05.810
So if I delete the E and a press shift enter will get a error in this case.

46
00:05:05.870 --> 00:05:14.770
It is a key error and you can see that this key error brings up a whole bunch of other errors.

47
00:05:14.850 --> 00:05:21.390
In short Python can't find this location in our data frame.

48
00:05:21.450 --> 00:05:24.400
This is why we have to pay a lot of attention to our spelling.

49
00:05:24.420 --> 00:05:28.960
We get the same error when we try to retrieve data from a data frame.

50
00:05:28.980 --> 00:05:32.730
If we treat it like a list or like an array.

51
00:05:32.730 --> 00:05:41.450
So if we were to put an index here for say data square brackets 1 we also get a key error.

52
00:05:41.460 --> 00:05:47.940
So even though Python handles the data types behind the scenes and they're never really explicit in

53
00:05:47.940 --> 00:05:53.760
your face with the syntax this is another example where you want to be aware of what type of data you're

54
00:05:53.760 --> 00:06:00.030
working with what type is my variable because that will determine what kind of instructions you can

55
00:06:00.180 --> 00:06:02.760
give to your code.

56
00:06:02.760 --> 00:06:06.190
Let me fix this error now so we can bring up our column.

57
00:06:06.360 --> 00:06:12.720
Just gonna hit control Z or command Z to undo his shift enter.

58
00:06:12.750 --> 00:06:20.330
Now let me show you how to save this data that we're extracting the single column in a variable to store

59
00:06:20.360 --> 00:06:22.580
this column in a single variable.

60
00:06:22.610 --> 00:06:34.670
All we have to do is provide a variable name say only math scores and can't spell and set it equal to

61
00:06:35.120 --> 00:06:36.920
data square brackets.

62
00:06:37.130 --> 00:06:43.380
And then the column name if we hit shift enter at this point our output will disappear.

63
00:06:43.380 --> 00:06:50.040
But to prove to you guys that this data is indeed stored in this variable we can print it out.

64
00:06:50.250 --> 00:06:56.230
So I'll write print only math scores and had shifted and taken.

65
00:06:56.250 --> 00:07:04.800
There we go extracting data from a data frame is pretty useful and we've seen how to get a single column

66
00:07:04.950 --> 00:07:06.390
out of a data frame.

67
00:07:06.660 --> 00:07:09.570
But what happens when we want to say I don't know.

68
00:07:09.570 --> 00:07:11.480
Add a column instead.

69
00:07:11.730 --> 00:07:16.590
This is a good thing to know since very often you'll be combining different kinds of data frames or

70
00:07:16.590 --> 00:07:22.640
different kinds of data in your python code into a single table if you will.

71
00:07:23.070 --> 00:07:29.670
Remember how we selected a column bytes name from the data frame we use the name of the column between

72
00:07:29.670 --> 00:07:31.530
the square brackets.

73
00:07:31.800 --> 00:07:35.900
Let me copy this entire line and paste it in the cell below.

74
00:07:35.940 --> 00:07:43.530
Now you'll also remember when we tried to grab a column that didn't exist we got an error.

75
00:07:43.770 --> 00:07:51.020
So if I tried to store the values of test subject inside only math scores and had shift enter would

76
00:07:51.030 --> 00:07:58.650
get our key error but if we change things around in the cell and we move data square brackets test subject

77
00:07:58.950 --> 00:08:04.560
to the left hand side of the equals sign and we provide a value on the right

78
00:08:08.120 --> 00:08:16.670
we are giving python a completely different instruction if I hit shift and to now our Python code runs

79
00:08:16.730 --> 00:08:18.420
without a problem.

80
00:08:18.500 --> 00:08:26.720
And that's because we are saying add a new column with the name test subject and set all the rows equal

81
00:08:26.720 --> 00:08:28.280
to Jennifer Lopez

82
00:08:30.940 --> 00:08:34.790
let's print out our data frame and see this in action.

83
00:08:35.030 --> 00:08:36.180
Here you go.

84
00:08:36.200 --> 00:08:42.800
Now we have four columns and all the rows in the fourth column have been set equal to the value.

85
00:08:42.830 --> 00:08:43.980
Jennifer Lopez.

86
00:08:44.570 --> 00:08:52.080
So this is how you can add a new column to an existing data frame let's talk about how to manipulate

87
00:08:52.170 --> 00:08:54.090
the values of a column.

88
00:08:54.090 --> 00:08:55.490
This is very very useful.

89
00:08:55.530 --> 00:09:03.210
If we were to do calculations on all the values in a single column at the same time for example let's

90
00:09:03.210 --> 00:09:10.600
create a new column called high score and then set the values of that column equal to 100.

91
00:09:10.610 --> 00:09:13.680
So I'll write data which is the name of our data frame.

92
00:09:13.890 --> 00:09:26.430
Square brackets single quotes high score and set it equal to the number one hundred can hit shift into.

93
00:09:26.520 --> 00:09:30.220
I can print out my data frame.

94
00:09:30.420 --> 00:09:31.880
Take a look at it now.

95
00:09:32.040 --> 00:09:40.650
And here we see that high school on my 13 inch screen here shifts down and is displayed a little bit

96
00:09:40.650 --> 00:09:41.460
below.

97
00:09:41.730 --> 00:09:45.240
But it's still just the fifth row in the data frame.

98
00:09:45.240 --> 00:09:51.180
Now as a challenge see if you can figure out how to add all the values in the average test score column

99
00:09:51.300 --> 00:09:54.250
to the values in the High Score Column.

100
00:09:54.330 --> 00:10:00.900
In other words overwrite the values that are currently stored in the high score column so that the equal

101
00:10:00.900 --> 00:10:06.720
100 plus whatever is inside the column for the average test scores

102
00:10:11.710 --> 00:10:15.680
hand here's the solution using the notation that we know so far.

103
00:10:15.700 --> 00:10:19.840
We would set the existing high score column equal to

104
00:10:23.440 --> 00:10:26.590
the current value stored in high score plus

105
00:10:29.740 --> 00:10:36.210
the value stored inside the average math test score

106
00:10:42.030 --> 00:10:45.840
and went out of print statement below this as well so that we can see what it looks like.

107
00:10:48.190 --> 00:10:51.330
Hit shift enter and here we go.

108
00:10:51.350 --> 00:10:58.280
Hold arrows inside the high score column have been updated to be equal to 100 plus whatever was stored

109
00:10:58.340 --> 00:11:01.730
inside the average math test score column.

110
00:11:01.880 --> 00:11:08.030
So when we look at this piece of code right here we can see that this pattern is actually the same one

111
00:11:08.030 --> 00:11:12.750
that we've encountered previously in the fourth cell down from the top.

112
00:11:12.800 --> 00:11:16.610
When we set my age is equal to my age plus 1.

113
00:11:16.670 --> 00:11:24.680
In this case we were also using the current value of my age doing a calculation with it and then overwriting

114
00:11:24.890 --> 00:11:31.580
the value stored inside the variable with this new value and this is exactly what's going on in this

115
00:11:31.580 --> 00:11:33.570
line to.

116
00:11:33.680 --> 00:11:40.730
So now that we know how to add two columns together what if we wanted to say square the values inside

117
00:11:40.970 --> 00:11:44.270
this high score column as a challenge.

118
00:11:44.300 --> 00:11:51.080
Can you figure out how to update the data frame so that the values inside the high score column are

119
00:11:51.080 --> 00:11:52.220
squared.

120
00:11:52.220 --> 00:11:59.540
In other words we'll want to multiply 178 by itself and then do the same thing for every other value

121
00:11:59.810 --> 00:12:01.210
in each row in this column.

122
00:12:02.790 --> 00:12:10.150
I'll give you a few seconds to figure this out and here's the solution.

123
00:12:10.240 --> 00:12:18.880
We simply set data high score is equal to data high score Times data square brackets high school

124
00:12:27.750 --> 00:12:35.850
if we print our data frame out now we'll see the values updated in this column as follows now there's

125
00:12:35.850 --> 00:12:41.040
other ways you can do this calculation of course we don't have to stick to this particular syntax you

126
00:12:41.040 --> 00:12:44.190
can also write the python code in this way.

127
00:12:44.190 --> 00:12:50.850
So instead of writing the name of the column at the very end you could have written it with two time

128
00:12:50.850 --> 00:12:53.460
signs and then the number two.

129
00:12:53.460 --> 00:12:59.490
And this raises the values inside the rows of this column to the power of two.

130
00:12:59.610 --> 00:13:04.120
If you had a single multiplication sign it would just be multiplying all the values by two.

131
00:13:04.200 --> 00:13:10.350
But if you have two multiplication signs it would be raising them to the power of two.

132
00:13:10.360 --> 00:13:14.140
So now our data frame has five columns.

133
00:13:14.140 --> 00:13:15.850
It's got the time delay in minutes.

134
00:13:15.850 --> 00:13:17.370
It's got LSD parts per million.

135
00:13:17.380 --> 00:13:19.120
It's got the average math test scores.

136
00:13:19.150 --> 00:13:23.000
It's got a test subject and a high score.

137
00:13:23.200 --> 00:13:30.470
Previously we've extract that a single column and stored it in a variable called only math scores in

138
00:13:30.470 --> 00:13:31.080
these lessons.

139
00:13:31.100 --> 00:13:34.080
I've been harping on and on about data types.

140
00:13:34.400 --> 00:13:40.110
Would you like to venture a guess what the data type is for only math scores.

141
00:13:40.190 --> 00:13:43.310
What category does this variable belong to.

142
00:13:44.060 --> 00:13:45.560
Well let's check it out.

143
00:13:45.590 --> 00:13:55.700
Let's write type only math scores that shift enter and there we see the type of this variable the full

144
00:13:55.700 --> 00:13:56.640
name of the type.

145
00:13:56.660 --> 00:14:03.590
Specifically this variable is of type pandas dot core dot series dot series.

146
00:14:03.590 --> 00:14:07.080
Now you might look at this and you might think it's a little odd right.

147
00:14:07.100 --> 00:14:14.990
Because the type of our data variable is data frame and previously we were working with lists and even

148
00:14:14.990 --> 00:14:23.060
arrays and yet when we extract a single column from this data frame we end up with something of data

149
00:14:23.060 --> 00:14:25.580
type series.

150
00:14:25.630 --> 00:14:27.660
Now there is no need to panic.

151
00:14:27.680 --> 00:14:32.020
A series is actually very very similar to an array.

152
00:14:32.270 --> 00:14:39.230
But there are a few differences which is why a series is a different category from an array.

153
00:14:39.230 --> 00:14:46.460
For example the key difference is that a series is always always only one column.

154
00:14:46.520 --> 00:14:49.140
It had only has a single dimension.

155
00:14:49.310 --> 00:14:53.660
It cannot be a matrix like an array or a list.

156
00:14:53.870 --> 00:14:56.740
A series is much much more restrictive.

157
00:14:56.870 --> 00:15:04.730
Also a series can have an attribute like a name you'll actually see this attribute when we printed out

158
00:15:04.910 --> 00:15:07.200
only math scores turn here.

159
00:15:07.220 --> 00:15:11.520
You'll see that the name is basically the column heading.

160
00:15:11.630 --> 00:15:17.600
Now some of you might be asking themselves why why are you telling me this why is this interesting and

161
00:15:17.780 --> 00:15:19.580
why does it matter.

162
00:15:19.580 --> 00:15:26.530
Well by checking up on these data types we've actually just made a discovery we've made a discovery

163
00:15:26.620 --> 00:15:34.370
about the nature of data frames a panda's data frame is essentially made up of a collection of series.

164
00:15:34.690 --> 00:15:41.410
Each column in the data frame is a series average math school is a series test subject as a series every

165
00:15:41.410 --> 00:15:48.770
single column is a series and together they make up a data frame and this brings us to a point where

166
00:15:48.770 --> 00:15:52.570
we've talked about quite a few different kinds of data structures.

167
00:15:52.640 --> 00:16:00.680
We've introduced you to arrays lists data frames and series and we know that a data frame is made up

168
00:16:00.680 --> 00:16:08.810
of series and we also know that a series can only have one column of data while a data frame in contrast

169
00:16:09.020 --> 00:16:18.980
has two dimensions because it has both rows and columns now say instead of pulling out a single column

170
00:16:19.220 --> 00:16:27.670
as a series from our data frame say we want to extract another data frame from our data frame.

171
00:16:27.710 --> 00:16:34.270
So we want to create a smaller data frame from our existing data frame.

172
00:16:34.330 --> 00:16:36.760
How would we do that at the moment.

173
00:16:36.760 --> 00:16:43.420
We've got data inside five columns and we want to create a data frame that only consists of say two

174
00:16:43.420 --> 00:16:44.540
columns.

175
00:16:44.800 --> 00:16:50.730
Say we're only interested in the LSC parts per million and the average test scores.

176
00:16:50.890 --> 00:16:53.320
How do we construct this subset.

177
00:16:53.320 --> 00:16:58.480
Well first let's create a list of the columns that we care about.

178
00:16:58.570 --> 00:17:01.870
Do you remember how to do that has a challenge.

179
00:17:01.880 --> 00:17:07.940
Can you create a list called columnists and put two pieces of data inside of it.

180
00:17:07.940 --> 00:17:17.720
Put the LSD parts per million header and the average math score column header inside this list variable

181
00:17:19.780 --> 00:17:21.870
here is the solution.

182
00:17:21.950 --> 00:17:32.960
Right columnist equal to square brackets and then single quotes LSD on a school pen comma.

183
00:17:33.510 --> 00:17:41.520
Single quotes average math test score and that's it.

184
00:17:41.600 --> 00:17:45.890
We've just created a list consisting of two strings.

185
00:17:45.950 --> 00:17:48.290
Two column heading names.

186
00:17:48.290 --> 00:17:52.640
Now we're gonna use this list to create a new data frame.

187
00:17:52.700 --> 00:17:54.470
I'm going to call this data frame.

188
00:17:54.470 --> 00:17:55.050
I don't know.

189
00:17:55.250 --> 00:18:01.190
Clean data and set it equal to data square brackets.

190
00:18:01.190 --> 00:18:11.180
And then inside the square brackets I'm going to pass the columnist so instead of writing the name of

191
00:18:11.180 --> 00:18:17.990
every single column that I care about inside these square brackets I just provided a list of column

192
00:18:17.990 --> 00:18:24.450
names and if I print out my clean data data frame I can see what it looks like.

193
00:18:25.050 --> 00:18:27.880
It's just a data frame with two columns.

194
00:18:27.990 --> 00:18:35.160
Now we've actually written some Python code in two lines that we could have done in a single line.

195
00:18:35.190 --> 00:18:42.900
We've split out the steps where we created a list and then created a data frame using that list.

196
00:18:42.900 --> 00:18:47.280
Oftentimes you'll see both of these steps done in a single line.

197
00:18:47.280 --> 00:18:52.410
So we could theoretically copy this piece of code here.

198
00:18:52.410 --> 00:19:01.710
Our list of column headings and just put it inside here put it inside the square brackets of our data

199
00:19:01.710 --> 00:19:03.280
frame.

200
00:19:03.290 --> 00:19:06.790
Now I can comment on this line because we don't need it anymore.

201
00:19:06.840 --> 00:19:13.250
And if I press shift enter we'll actually get exactly the same result.

202
00:19:13.270 --> 00:19:19.380
So what we've done here is simply nested a list inside another piece of code.

203
00:19:19.420 --> 00:19:25.390
The reason I'm showing you this is because oftentimes when you see two square brackets just next to

204
00:19:25.390 --> 00:19:33.070
each other like this it can look really really scary but all it is is a list inside of something else

205
00:19:34.530 --> 00:19:36.220
when we're writing our code like this.

206
00:19:36.240 --> 00:19:38.110
We're not creating an extra variable.

207
00:19:38.130 --> 00:19:40.840
We're not creating this column list variable.

208
00:19:40.950 --> 00:19:48.360
We've accomplished the same thing by providing the list of strings directly to prove to you that we

209
00:19:48.360 --> 00:19:50.160
have indeed created the data frame.

210
00:19:50.160 --> 00:19:54.120
Let's print out the type of clean data.

211
00:19:54.810 --> 00:19:58.290
And here we see that it is indeed a data frame.

212
00:19:58.320 --> 00:20:04.420
Now what if we wanted to create a single column as a data frame data frame.

213
00:20:04.440 --> 00:20:09.600
After all it doesn't need to have many many columns could have a single column just as well.

214
00:20:09.600 --> 00:20:14.640
And this is actually something that's very very useful when running regressions with Cyclone.

215
00:20:14.880 --> 00:20:19.380
For that we actually want to work with data frames instead of series.

216
00:20:19.380 --> 00:20:23.160
We're gonna be interested in predicting the math test scores.

217
00:20:23.160 --> 00:20:34.870
So in this case we can write lowercase Y is equal to data square brackets and then square brackets again

218
00:20:35.680 --> 00:20:47.290
because we're going to be supplying that list and all we have to do is write the name of the column.

219
00:20:47.410 --> 00:20:53.120
We're still passing in a list here but in this case it's a list with only one item.

220
00:20:53.250 --> 00:21:00.490
And when do we check the type of y by writing type parentheses y we can see that Y is indeed a data

221
00:21:00.490 --> 00:21:01.940
frame.

222
00:21:02.050 --> 00:21:10.500
If we weren't passing in a list and instead only had one pair of square brackets we are passing in a

223
00:21:10.500 --> 00:21:11.610
string.

224
00:21:11.610 --> 00:21:18.030
And if I re-evaluate this cell then the type for Y would be a series.

225
00:21:18.030 --> 00:21:23.580
So this is an important point when we provide a list to our data frame.

226
00:21:23.610 --> 00:21:34.530
We get out a data frame and when we provide a string to our data frame we get out a series.

227
00:21:34.710 --> 00:21:42.000
So this is another example when running Python code that it's important to keep in mind the data types

228
00:21:42.000 --> 00:21:43.180
that you're working with.

229
00:21:43.350 --> 00:21:50.790
Even though it's happening in the background as a quick exercise can you create a variable called Capital

230
00:21:50.850 --> 00:21:56.800
X and set it equal to the LSD parts per million values.

231
00:21:56.820 --> 00:22:04.540
Also make sure that X is indeed a data frame print the values of x and show the type.

232
00:22:04.540 --> 00:22:11.480
I'll give you a few seconds to figure this out and pause the video and here's the solution.

233
00:22:11.580 --> 00:22:19.110
You'd write capital X is equal to data square brackets and then square brackets again so that we get

234
00:22:19.140 --> 00:22:26.910
a data frame out and then we provide the column name which was Ellis the underscore APM to print the

235
00:22:26.910 --> 00:22:27.600
value.

236
00:22:27.600 --> 00:22:36.240
We simply write print parentheses capital X and to show us the type we'd write to type parentheses x

237
00:22:36.960 --> 00:22:38.340
hitting shift enter.

238
00:22:38.580 --> 00:22:39.810
You should see this.

239
00:22:39.810 --> 00:22:48.530
We should see that X is a data frame that consists of a single column namely the LSD parts per million.

240
00:22:48.570 --> 00:22:49.800
Excellent.

241
00:22:49.800 --> 00:22:54.080
So we've done a lot of work with data frames at this point.

242
00:22:54.120 --> 00:23:00.850
We've seen how to add columns extract columns and manipulate the data inside a column.

243
00:23:00.870 --> 00:23:07.260
Let's talk now about how to delete a column that we added to a data frame after all.

244
00:23:07.260 --> 00:23:15.450
Having read this scientific study from 1968 I discovered that Jennifer Lopez did not in fact sit for

245
00:23:15.450 --> 00:23:20.160
any arithmetic tests to delete a column from a data frame.

246
00:23:20.170 --> 00:23:28.150
We used the python keyword DL short for delete and we followed this by the name of the column that we

247
00:23:28.150 --> 00:23:29.300
want to get rid of.

248
00:23:29.440 --> 00:23:36.430
In this case the column name is test subject so we'll write DL square brackets.

249
00:23:36.550 --> 00:23:43.080
Single quotes test underscore subject and then below.

250
00:23:43.310 --> 00:23:51.370
Let's print out our data frame just to see if we have indeed gone from five columns to four.

251
00:23:53.880 --> 00:23:58.500
And as you can see our test subject column has been removed.

252
00:23:58.680 --> 00:24:04.050
So as a quick exercise can you delete the high score column from our data.

253
00:24:04.050 --> 00:24:10.100
Data from you've probably guessed that it's the same pattern as in the cell above we write it.

254
00:24:10.110 --> 00:24:13.710
DL data square brackets.

255
00:24:13.820 --> 00:24:24.630
Single quotes and then high underscore score let's print out a printout data below as well so we can

256
00:24:24.630 --> 00:24:27.420
see that the column has indeed been removed.

257
00:24:27.420 --> 00:24:28.890
Good work.

258
00:24:28.950 --> 00:24:30.320
I'll see you in the next lesson.
