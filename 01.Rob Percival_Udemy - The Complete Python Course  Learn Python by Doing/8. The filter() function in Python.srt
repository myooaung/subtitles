1
1

00:00:00,220  -->  00:00:01,400
<v Jose>Hi welcome back.</v>
2

2

00:00:01,400  -->  00:00:04,310
In this lecture, we're talking about filter.
3

3

00:00:04,310  -->  00:00:05,600
Now that we've got our generators,
4

4

00:00:05,600  -->  00:00:07,700
iterators and iterables out the way,
5

5

00:00:07,700  -->  00:00:10,180
we can start with some fun builtin functions.
6

6

00:00:11,140  -->  00:00:13,120
The filter function is a builtin function
7

7

00:00:13,120  -->  00:00:16,220
in Python that you can call from any file or programme,
8

8

00:00:16,220  -->  00:00:18,120
that's what builtin means
9

9

00:00:18,120  -->  00:00:19,820
and it takes two arguments.
10

10

00:00:21,020  -->  00:00:22,640
The first argument to the filter function
11

11

00:00:22,640  -->  00:00:23,620
is another function
12

12

00:00:24,710  -->  00:00:26,900
and it also takes an iterable.
13

13

00:00:26,900  -->  00:00:28,500
So it goes something like this,
14

14

00:00:30,360  -->  00:00:31,860
let's find a friends list
15

15

00:00:31,860  -->  00:00:36,590
like Rolf, Jose, Randy, Anna and Mary
16

16

00:00:36,590  -->  00:00:37,940
and I know I've missed one.
17

17

00:00:39,870  -->  00:00:41,000
And now we're going to use
18

18

00:00:41,000  -->  00:00:43,730
the filter function so that we only get the friends
19

19

00:00:43,730  -->  00:00:45,480
that start with the letter R.
20

20

00:00:47,710  -->  00:00:50,590
So, start with R,
21

21

00:00:50,590  -->  00:00:54,304
is going to be filter, this is the function,
22

22

00:00:54,304  -->  00:00:56,610
now it takes a function
23

23

00:00:59,300  -->  00:01:04,300
first argument, arg 1, function that returns true or false.
24

24

00:01:07,310  -->  00:01:09,510
So the first argument to this filter function
25

25

00:01:09,510  -->  00:01:12,160
has to be another function that returns true or false
26

26

00:01:13,090  -->  00:01:15,290
depending on what we want to filter.
27

27

00:01:15,290  -->  00:01:18,270
So let me define a function up here.
28

28

00:01:19,120  -->  00:01:20,760
Starts with R.
29

29

00:01:23,170  -->  00:01:26,500
Return friend dot start with R.
30

30

00:01:28,180  -->  00:01:31,190
Friend dot starts with R is going to be true
31

31

00:01:31,190  -->  00:01:34,590
if this argument here starts with an R,
32

32

00:01:34,590  -->  00:01:36,440
it's going to be false if it doesn't.
33

33

00:01:37,910  -->  00:01:40,870
So, the first argument to the filter function
34

34

00:01:40,870  -->  00:01:42,230
has to be this starts
35

35

00:01:43,474  -->  00:01:45,240
with R function
36

36

00:01:46,520  -->  00:01:49,310
and the second argument has to be an iterable,
37

37

00:01:49,310  -->  00:01:52,170
we know what these are so friends is an iterable
38

38

00:01:52,170  -->  00:01:54,270
'cause we can iterate over it, it's a list
39

39

00:01:55,130  -->  00:01:58,380
and that's it, this is what the filter function looks like
40

40

00:01:58,380  -->  00:02:01,280
and what it does is it only keeps
41

41

00:02:01,280  -->  00:02:04,760
the elements for which this returns true.
42

42

00:02:05,890  -->  00:02:08,160
So, the first time the filter function
43

43

00:02:08,160  -->  00:02:11,990
runs through, it's going to give you Rolf,
44

44

00:02:11,990  -->  00:02:14,420
Rolf going over to the friends,
45

45

00:02:14,420  -->  00:02:16,990
friend starts with R it's going to be true
46

46

00:02:16,990  -->  00:02:20,200
so Rolf will be kept by the filter function.
47

47

00:02:20,200  -->  00:02:22,770
Then it will go again, and this time with Jose,
48

48

00:02:22,770  -->  00:02:24,910
Jose starts with R is false,
49

49

00:02:24,910  -->  00:02:26,810
so filter will remove it and ignore it
50

50

00:02:27,950  -->  00:02:29,550
and so on for every friend here.
51

51

00:02:30,720  -->  00:02:32,800
The interesting thing is that filter
52

52

00:02:32,800  -->  00:02:34,680
actually returns a generator
53

53

00:02:34,680  -->  00:02:36,080
so that it's a bit more efficient,
54

54

00:02:36,080  -->  00:02:37,500
instead of copying your list
55

55

00:02:37,500  -->  00:02:40,010
with only the elements you want to keep,
56

56

00:02:40,010  -->  00:02:44,816
you have to call the next, start with R
57

57

00:02:44,816  -->  00:02:48,940
element so that you get the next available element
58

58

00:02:48,940  -->  00:02:50,890
which is this case is going to be Rolf.
59

59

00:02:51,880  -->  00:02:55,220
And if you do that again, and again,
60

60

00:02:56,170  -->  00:02:57,210
you'll get Randy
61

61

00:02:58,837  -->  00:03:03,230
and finally you'll get this stop iteration exception
62

62

00:03:03,230  -->  00:03:04,480
that we talked about earlier on,
63

63

00:03:04,480  -->  00:03:07,080
is what signals the end of a sequence
64

64

00:03:07,080  -->  00:03:08,490
or a generator or an iterator
65

65

00:03:08,490  -->  00:03:11,730
when you reach the end of it, okay?
66

66

00:03:11,730  -->  00:03:13,390
When you do a for loop,
67

67

00:03:13,390  -->  00:03:15,000
what the for loop is doing in the background
68

68

00:03:15,000  -->  00:03:17,760
is just calling next and as soon as you reach
69

69

00:03:17,760  -->  00:03:19,640
this stop iteration, the for loop stops
70

70

00:03:19,640  -->  00:03:21,120
and it doesn't give you this error
71

71

00:03:21,120  -->  00:03:23,120
because the stop iteration has been designed
72

72

00:03:23,120  -->  00:03:25,380
to mean that and the for loop is a construct
73

73

00:03:25,380  -->  00:03:28,050
that uses stop iteration to know
74

74

00:03:28,050  -->  00:03:31,780
when it's reached the end, okay?
75

75

00:03:31,780  -->  00:03:35,930
Now of course, if you do list of start with R,
76

76

00:03:35,930  -->  00:03:37,600
then it's going to give you a list of all the elements
77

77

00:03:37,600  -->  00:03:38,960
in the generator, it's going to go
78

78

00:03:38,960  -->  00:03:41,540
through each element and it's going to put
79

79

00:03:41,540  -->  00:03:43,110
it in a new list.
80

80

00:03:43,110  -->  00:03:44,810
Now if you do it again,
81

81

00:03:44,810  -->  00:03:46,260
what do you think is going to happen?
82

82

00:03:48,390  -->  00:03:50,600
Well, you'll get an empty list,
83

83

00:03:50,600  -->  00:03:54,940
the list object here doesn't raise a stop iteration
84

84

00:03:54,940  -->  00:03:57,070
but it sees that the stop iteration is raised
85

85

00:03:57,070  -->  00:03:58,410
and it just doesn't give you anything
86

86

00:03:58,410  -->  00:04:00,239
it just gives you an empty list
87

87

00:04:00,239  -->  00:04:02,530
now because the generator has already been used
88

88

00:04:02,530  -->  00:04:04,810
and it's remembers that it's reached the end
89

89

00:04:04,810  -->  00:04:07,000
so it can't give you anything else.
90

90

00:04:08,150  -->  00:04:11,050
This is why I explain generators, iterators and iterables
91

91

00:04:11,050  -->  00:04:15,500
before going into this filter function, okay?
92

92

00:04:15,500  -->  00:04:17,850
Now of course, instead of defining a function here
93

93

00:04:17,850  -->  00:04:18,840
that takes a parameter
94

94

00:04:18,840  -->  00:04:20,590
and returns of the parameter starts with R
95

95

00:04:20,590  -->  00:04:22,400
we could just used a lamda.
96

96

00:04:27,310  -->  00:04:29,620
This lamda function is exactly the same thing
97

97

00:04:29,620  -->  00:04:32,040
so it takes one parameter
98

98

00:04:32,040  -->  00:04:35,300
and after the colon we define what it returns
99

99

00:04:35,300  -->  00:04:38,820
and what it returns is x dot starts with R
100

100

00:04:38,820  -->  00:04:40,650
so this is either true or false
101

101

00:04:40,650  -->  00:04:43,200
depending on whether x starts with R.
102

102

00:04:44,230  -->  00:04:46,170
If it makes you feel better,
103

103

00:04:46,170  -->  00:04:48,640
you can call the parameter friend
104

104

00:04:48,640  -->  00:04:49,980
and that way maybe it's a bit clearer
105

105

00:04:49,980  -->  00:04:51,710
that maybe this function is going to operate
106

106

00:04:51,710  -->  00:04:53,120
on these friends here,
107

107

00:04:53,120  -->  00:04:55,380
then you no longer need that function there.
108

108

00:04:56,750  -->  00:04:58,140
And we also no longer need this comment
109

109

00:04:58,140  -->  00:04:59,660
since we know what it means now.
110

110

00:05:01,260  -->  00:05:03,780
This filter function here
111

111

00:05:03,780  -->  00:05:05,060
is identical
112

112

00:05:06,930  -->  00:05:09,820
to this generator expression here,
113

113

00:05:09,820  -->  00:05:12,490
this generator comprehension that says,
114

114

00:05:12,490  -->  00:05:17,490
F for F in friends, if F dot starts with R.
115

115

00:05:17,690  -->  00:05:19,970
So these two are identical, okay?
116

116

00:05:20,970  -->  00:05:23,680
Here we've got ourselves a generator expression,
117

117

00:05:23,680  -->  00:05:26,280
a generator comprehension that puts each friend
118

118

00:05:26,280  -->  00:05:30,560
into a new generator but only if F starts with R,
119

119

00:05:30,560  -->  00:05:33,260
so these two are the same, okay?
120

120

00:05:34,870  -->  00:05:36,760
Which one is faster?
121

121

00:05:36,760  -->  00:05:38,220
Which one performs better?
122

122

00:05:39,330  -->  00:05:41,890
This one, generator comprehension performs better
123

123

00:05:41,890  -->  00:05:43,690
in this case, at least.
124

124

00:05:43,690  -->  00:05:45,030
And the reason for that
125

125

00:05:45,030  -->  00:05:48,310
is because you have to create this lamda function
126

126

00:05:48,310  -->  00:05:50,110
in this filter and you don't have to
127

127

00:05:50,110  -->  00:05:52,600
create a lamda function in the generator expression.
128

128

00:05:54,365  -->  00:05:55,900
If you already have your function defined elsewhere
129

129

00:05:55,900  -->  00:05:57,250
in your programme,
130

130

00:05:57,250  -->  00:05:59,390
the filter function can perform better
131

131

00:05:59,390  -->  00:06:00,480
and also in some cases, I think
132

132

00:06:00,480  -->  00:06:03,350
the filter function can be more readable
133

133

00:06:03,350  -->  00:06:04,420
although in many other cases,
134

134

00:06:04,420  -->  00:06:06,570
I think the list comprehension is more readable.
135

135

00:06:07,670  -->  00:06:09,050
So it's up to you which one you use,
136

136

00:06:09,050  -->  00:06:11,740
I normally go for the comprehensions,
137

137

00:06:11,740  -->  00:06:13,810
it's also a bit more Pythonic.
138

138

00:06:13,810  -->  00:06:15,780
And by the way, just for completeness
139

139

00:06:15,780  -->  00:06:18,290
so it's clear exactly what's going on,
140

140

00:06:18,290  -->  00:06:21,090
these two filter and this generator comprehension
141

141

00:06:21,090  -->  00:06:23,332
is identical to this other function
142

142

00:06:23,332  -->  00:06:25,510
that I'm going to define.
143

143

00:06:27,520  -->  00:06:29,220
It's another filter function,
144

144

00:06:29,220  -->  00:06:30,260
very much like this one
145

145

00:06:30,260  -->  00:06:32,757
that takes in a function and an iterable
146

146

00:06:32,757  -->  00:06:36,487
and is going to iterate over the iterable,
147

147

00:06:36,487  -->  00:06:39,140
it's going to check whether the function
148

148

00:06:39,140  -->  00:06:41,800
returns true or not
149

149

00:06:42,690  -->  00:06:45,050
and it's going to yield I at the end
150

150

00:06:45,050  -->  00:06:46,410
if the function is true.
151

151

00:06:46,410  -->  00:06:50,620
So, let's imagine that we call my custom filter here.
152

152

00:06:52,680  -->  00:06:55,117
Lamda friend starts with R is this function,
153

153

00:06:55,117  -->  00:06:57,938
the iterable is our friends list.
154

154

00:06:57,938  -->  00:07:00,670
We iterate over the iterable, we get the first element
155

155

00:07:00,670  -->  00:07:01,503
that's Rolf.
156

156

00:07:02,700  -->  00:07:06,510
If func I that is, friend starts with R
157

157

00:07:06,510  -->  00:07:08,820
is true, which it is,
158

158

00:07:08,820  -->  00:07:10,980
then we're gonna yield I, that's Rolf.
159

159

00:07:12,370  -->  00:07:14,880
When we call next on this function,
160

160

00:07:14,880  -->  00:07:16,520
we're gonna get Rolf and then we're gonna stop
161

161

00:07:16,520  -->  00:07:18,250
right after line nine.
162

162

00:07:19,290  -->  00:07:20,710
When we call next again, we're gonna go back
163

163

00:07:20,710  -->  00:07:23,162
to the top, that's I,
164

164

00:07:23,162  -->  00:07:25,690
we're gonna, that's Jose by the way,
165

165

00:07:25,690  -->  00:07:26,850
the string Jose,
166

166

00:07:26,850  -->  00:07:29,540
we're gonna check if the function matches,
167

167

00:07:29,540  -->  00:07:32,950
it's gonna be false so we're not gonna yield anything,
168

168

00:07:32,950  -->  00:07:35,850
we don't stop, we go over to the next element of the loop,
169

169

00:07:36,720  -->  00:07:39,200
we check if Randy starts with R
170

170

00:07:39,200  -->  00:07:42,780
and it is, it does, so then we yield Randy and we stop.
171

171

00:07:43,950  -->  00:07:46,290
Next time we call next, we go over here
172

172

00:07:46,290  -->  00:07:49,510
and it's Anna, it's false, so we don't yield,
173

173

00:07:49,510  -->  00:07:52,001
we continue, I is Mary, it's false so we don't yield,
174

174

00:07:52,001  -->  00:07:54,820
we continue, we reach the end,
175

175

00:07:54,820  -->  00:07:57,550
that's a stop iteration so we reach the end of the
176

176

00:07:57,550  -->  00:08:00,110
generator object and that's another stop iteration
177

177

00:08:00,110  -->  00:08:02,080
which tells us that we've reached the end.
178

178

00:08:03,080  -->  00:08:05,090
So hopefully this makes sense,
179

179

00:08:05,090  -->  00:08:07,690
it is starting to get a bit more,
180

180

00:08:07,690  -->  00:08:10,680
more into what Python is all about
181

181

00:08:10,680  -->  00:08:12,980
which is this managing of data and sending data
182

182

00:08:12,980  -->  00:08:14,150
from one place to another
183

183

00:08:14,150  -->  00:08:15,620
and yield is extremely powerful
184

184

00:08:15,620  -->  00:08:18,600
because it lets you stop and generate the values
185

185

00:08:18,600  -->  00:08:20,910
one by one without having to store
186

186

00:08:20,910  -->  00:08:22,710
them all in memory at the same time.
187

187

00:08:24,560  -->  00:08:25,690
Anyway that's it for this video,
188

188

00:08:25,690  -->  00:08:28,170
I just wanted to show you this filter function
189

189

00:08:28,170  -->  00:08:29,630
and how it's used.
190

190

00:08:29,630  -->  00:08:30,960
The filter function is also present
191

191

00:08:30,960  -->  00:08:32,380
in many other programing languages
192

192

00:08:32,380  -->  00:08:34,320
so you'll see it everywhere
193

193

00:08:34,320  -->  00:08:36,600
as you develop your programming skills and you
194

194

00:08:36,600  -->  00:08:38,740
continue your programming journey.
195

195

00:08:38,740  -->  00:08:40,603
And so, yeah, that's it
196

196

00:08:40,603  -->  00:08:42,400
and I'll see you in the next video.
