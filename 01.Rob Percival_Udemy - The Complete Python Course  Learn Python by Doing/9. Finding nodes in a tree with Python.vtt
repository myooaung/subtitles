WEBVTT
1
1

00:00:00.220  -->  00:00:02.300
<v Jose>Hi, and welcome back.</v>
2

2

00:00:02.300  -->  00:00:03.510
In this video, we're going to look at
3

3

00:00:03.510  -->  00:00:06.203
finding a node in our binary tree.
4

4

00:00:07.550  -->  00:00:08.660
Finding a node is actually
5

5

00:00:08.660  -->  00:00:10.760
going to be really straightforward
6

6

00:00:10.760  -->  00:00:13.220
because we've already looked at adding nodes,
7

7

00:00:13.220  -->  00:00:16.303
so we know how to navigate our tree.
8

8

00:00:18.470  -->  00:00:21.590
Let's create here a find method,
9

9

00:00:21.590  -->  00:00:23.820
and we're going to look for a specific value
10

10

00:00:23.820  -->  00:00:25.810
that is going to be an integer.
11

11

00:00:25.810  -->  00:00:29.490
Notice that the values of our nodes are all integers,
12

12

00:00:29.490  -->  00:00:31.010
so the value we're looking for
13

13

00:00:31.010  -->  00:00:32.710
is going to be an integer as well.
14

14

00:00:33.980  -->  00:00:35.710
We're going to do pretty much exactly
15

15

00:00:35.710  -->  00:00:37.990
like the add method does.
16

16

00:00:37.990  -->  00:00:39.640
We're going to start on the head.
17

17

00:00:42.160  -->  00:00:45.750
And while it exists, we are going to say,
18

18

00:00:45.750  -->  00:00:47.670
if the value that we're looking for,
19

19

00:00:47.670  -->  00:00:49.430
notice this is the parameter here,
20

20

00:00:49.430  -->  00:00:52.713
is exactly equal to the current node's value,
21

21

00:00:53.820  -->  00:00:55.360
now we're not gonna raise an error.
22

22

00:00:55.360  -->  00:00:57.830
We're gonna say "you found it," right?
23

23

00:00:57.830  -->  00:00:59.570
This is the value we're looking for.
24

24

00:00:59.570  -->  00:01:01.450
If it exists, it means we're good.
25

25

00:01:01.450  -->  00:01:03.443
So we're gonna return current node.
26

26

00:01:05.860  -->  00:01:07.510
Otherwise...
27

27

00:01:07.510  -->  00:01:08.650
if the...
28

28

00:01:10.170  -->  00:01:11.210
value we're looking for
29

29

00:01:11.210  -->  00:01:13.403
is greater than the current node's value,
30

30

00:01:14.950  -->  00:01:16.860
we have to move right
31

31

00:01:16.860  -->  00:01:18.690
because we are looking for something
32

32

00:01:18.690  -->  00:01:22.440
that it must be to the right of this current node.
33

33

00:01:22.440  -->  00:01:26.043
So we'd say current_node = current_node.right.
34

34

00:01:26.950  -->  00:01:30.500
And finally, if it's not equal to and it's not greater than,
35

35

00:01:30.500  -->  00:01:32.840
that means it must be less than.
36

36

00:01:32.840  -->  00:01:34.983
Current node is current_node.left.
37

37

00:01:36.440  -->  00:01:39.500
Finally, if we reach the end of the loop,
38

38

00:01:39.500  -->  00:01:41.480
and we didn't find anything,
39

39

00:01:41.480  -->  00:01:43.840
we're gonna raise a lookup error.
40

40

00:01:43.840  -->  00:01:47.343
I'm gonna say at node with value,
41

41

00:01:48.190  -->  00:01:50.083
value was not found.
42

42

00:01:51.350  -->  00:01:54.440
Now, notice how, here we just used "else"
43

43

00:01:54.440  -->  00:01:57.970
inside this if elif else because the value,
44

44

00:01:57.970  -->  00:01:59.520
the first check was the value is equal
45

45

00:01:59.520  -->  00:02:00.820
to the current node value.
46

46

00:02:00.820  -->  00:02:02.330
Second check was the value is greater
47

47

00:02:02.330  -->  00:02:03.810
than the current node value.
48

48

00:02:03.810  -->  00:02:05.660
The only thing that's left
49

49

00:02:05.660  -->  00:02:08.480
is when the value is less than the current node value.
50

50

00:02:08.480  -->  00:02:10.160
So we can use "else."
51

51

00:02:10.160  -->  00:02:12.060
We could also do the same here,
52

52

00:02:12.060  -->  00:02:13.563
in our add.
53

53

00:02:14.520  -->  00:02:15.958
So once again, if the node value
54

54

00:02:15.958  -->  00:02:19.000
is equal to the current node value, we'll raise an error.
55

55

00:02:19.000  -->  00:02:21.073
If it's less than, we go left.
56

56

00:02:21.940  -->  00:02:24.980
The only that's left is when it's not equal to,
57

57

00:02:24.980  -->  00:02:27.950
not less than, that means it must be greater than.
58

58

00:02:27.950  -->  00:02:28.783
We move right.
59

59

00:02:29.730  -->  00:02:30.563
Okay?
60

60

00:02:31.430  -->  00:02:34.260
This is how you find nodes in a binary tree,
61

61

00:02:34.260  -->  00:02:38.100
so let's go ahead and go back to our app.py
62

62

00:02:38.100  -->  00:02:39.350
and print(tree.find(11)),
63

63

00:02:42.300  -->  00:02:45.400
and we see that that prints out the node 11 there
64

64

00:02:45.400  -->  00:02:46.750
that was found in our tree.
65

65

00:02:49.410  -->  00:02:50.960
So I just wanted to guide you
66

66

00:02:50.960  -->  00:02:53.830
through implementing this binary tree
67

67

00:02:53.830  -->  00:02:56.270
because it's a frequent question
68

68

00:02:56.270  -->  00:02:59.450
asked in interviews and, you know, code challenges.
69

69

00:02:59.450  -->  00:03:02.770
Also, it's very used in specific
70

70

00:03:02.770  -->  00:03:04.060
parts of software development,
71

71

00:03:04.060  -->  00:03:05.960
so it's interesting to know about it.
72

72

00:03:05.960  -->  00:03:07.800
Hopefully, you enjoyed learning
73

73

00:03:07.800  -->  00:03:10.630
about this more advanced data structure
74

74

00:03:10.630  -->  00:03:15.630
as well as complexity and performing binary search.
75

75

00:03:15.680  -->  00:03:18.580
Thanks for joining me, and I'll see you on the next video.
