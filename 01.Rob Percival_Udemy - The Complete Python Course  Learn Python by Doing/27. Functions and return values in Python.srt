1
1

00:00:00,400  -->  00:00:02,330
<v ->Hi guys, and welcome back.</v>
2

2

00:00:02,330  -->  00:00:05,280
In this video, we're going to look at return values,
3

3

00:00:05,280  -->  00:00:10,180
and that's because functions can not only perform actions,
4

4

00:00:10,180  -->  00:00:13,360
which is what the calculate MPG function does here.
5

5

00:00:13,360  -->  00:00:17,110
It processes some data and then prints something out.
6

6

00:00:17,110  -->  00:00:21,660
They can also take some inputs and give us some outputs.
7

7

00:00:21,660  -->  00:00:23,930
What that allows us to do is to extract
8

8

00:00:23,930  -->  00:00:27,030
some of this code into a separate function
9

9

00:00:27,030  -->  00:00:28,983
so that they don't get too long.
10

10

00:00:29,930  -->  00:00:32,000
This calculates MPG function at the moment
11

11

00:00:32,000  -->  00:00:35,430
does a bit more than just calculate MPGs.
12

12

00:00:35,430  -->  00:00:39,850
It calculates MPGs and then it also calculates the car name,
13

13

00:00:39,850  -->  00:00:42,040
and finally, it prints it out.
14

14

00:00:42,040  -->  00:00:44,270
So there are few things going on in this function,
15

15

00:00:44,270  -->  00:00:45,500
and that's usually something
16

16

00:00:45,500  -->  00:00:47,130
that tells you that you can have
17

17

00:00:47,130  -->  00:00:49,500
multiple functions instead of just one.
18

18

00:00:49,500  -->  00:00:50,780
A few things are going on.
19

19

00:00:50,780  -->  00:00:53,310
You can have one function for each thing.
20

20

00:00:53,310  -->  00:00:55,549
Let's make our calculate MPG function
21

21

00:00:55,549  -->  00:00:58,960
actually only calculate MPGs.
22

22

00:00:58,960  -->  00:01:01,460
What we'll do is after the calculation,
23

23

00:01:01,460  -->  00:01:04,403
we will just do return MPG.
24

24

00:01:05,260  -->  00:01:07,740
This is how you can return values,
25

25

00:01:07,740  -->  00:01:11,964
and what that means is whenever this function gets called,
26

26

00:01:11,964  -->  00:01:15,950
you can then assign that to a variable.
27

27

00:01:15,950  -->  00:01:18,260
For example, we could do something like this,
28

28

00:01:18,260  -->  00:01:21,670
and then the value of dividing the mileage
29

29

00:01:21,670  -->  00:01:24,990
by the fuel consumed, which is a float,
30

30

00:01:24,990  -->  00:01:29,920
will be assigned to the MPG variable via this return.
31

31

00:01:29,920  -->  00:01:33,070
We'll have 50.0 let's say as an example.
32

32

00:01:33,070  -->  00:01:35,580
We will return 50.0,
33

33

00:01:35,580  -->  00:01:38,950
and then we will assign 50.0 to MPG.
34

34

00:01:38,950  -->  00:01:40,260
Now because that's happening,
35

35

00:01:40,260  -->  00:01:43,132
as soon as Python encounters a return statement,
36

36

00:01:43,132  -->  00:01:48,030
the function ends and none of the other code evaluates.
37

37

00:01:48,030  -->  00:01:49,830
So what we've done here is we've made
38

38

00:01:49,830  -->  00:01:54,490
our calculate MPG function actually only calculate MPGs.
39

39

00:01:54,490  -->  00:01:58,160
Now we need another function to do the rest of the stuff.
40

40

00:01:58,160  -->  00:02:01,050
So I'll define a function called Car Name,
41

41

00:02:01,050  -->  00:02:03,494
and it will also take a car and it will just
42

42

00:02:03,494  -->  00:02:07,648
calculate the name and then it will return it.
43

43

00:02:07,648  -->  00:02:12,145
Finally, I'll make a function called Print Car Info,
44

44

00:02:12,145  -->  00:02:14,003
which will take a car as well,
45

45

00:02:14,003  -->  00:02:16,990
and it will use these two functions
46

46

00:02:16,990  -->  00:02:18,303
to get the car name,
47

47

00:02:20,220  -->  00:02:22,453
and to get the car's MPG.
48

48

00:02:23,743  -->  00:02:26,153
Finally, it will print it out.
49

49

00:02:27,330  -->  00:02:30,610
Notice that this function here does not have a return,
50

50

00:02:30,610  -->  00:02:33,510
so when we run this function,
51

51

00:02:33,510  -->  00:02:37,622
if we were to assign it to a variable like this,
52

52

00:02:37,622  -->  00:02:39,700
this variable would be equal to
53

53

00:02:39,700  -->  00:02:42,520
the special value none in python.
54

54

00:02:42,520  -->  00:02:45,200
None just means no value.
55

55

00:02:45,200  -->  00:02:46,620
So all functions in Python
56

56

00:02:46,620  -->  00:02:48,838
return the value, none by default,
57

57

00:02:48,838  -->  00:02:52,040
or you can of course just do return none
58

58

00:02:52,040  -->  00:02:54,210
if you want to make that explicit.
59

59

00:02:54,210  -->  00:02:55,950
None has a capital N,
60

60

00:02:55,950  -->  00:02:58,043
and again, it just means no value.
61

61

00:02:59,280  -->  00:03:02,340
What we've done here is we now have three functions.
62

62

00:03:02,340  -->  00:03:03,876
So I appreciate that this
63

63

00:03:03,876  -->  00:03:06,320
is a little more complicated than it was before.
64

64

00:03:06,320  -->  00:03:09,360
We've got a function that calculates the miles per gallon,
65

65

00:03:09,360  -->  00:03:13,690
and it accepts a parameter which should be some data,
66

66

00:03:13,690  -->  00:03:15,450
which has to be a dictionary,
67

67

00:03:15,450  -->  00:03:18,650
since we are accessing a dictionary's properties,
68

68

00:03:18,650  -->  00:03:22,400
and this car data has to maintain a property mileage
69

69

00:03:22,400  -->  00:03:24,550
and a property fuel consumed.
70

70

00:03:24,550  -->  00:03:26,840
Then it's going to divide one by the other,
71

71

00:03:26,840  -->  00:03:29,347
and it's going to return that value.
72

72

00:03:29,347  -->  00:03:32,320
In the function print car info,
73

73

00:03:32,320  -->  00:03:36,500
which also takes a variable car as a parameter,
74

74

00:03:36,500  -->  00:03:40,240
which should be a dictionary with this structure,
75

75

00:03:40,240  -->  00:03:43,210
it then passes the value of that variable
76

76

00:03:43,210  -->  00:03:47,940
to the car name function and to the calculate MPG functions.
77

77

00:03:47,940  -->  00:03:50,140
Let's take the calculated MPG function
78

78

00:03:50,140  -->  00:03:52,400
as an example for this float.
79

79

00:03:52,400  -->  00:03:54,540
We will receive the car information
80

80

00:03:54,540  -->  00:03:56,493
in the print car info function,
81

81

00:03:56,493  -->  00:04:01,493
then it gets passed over the same value to the MPG function,
82

82

00:04:01,946  -->  00:04:05,530
which uses the properties to calculate something.
83

83

00:04:05,530  -->  00:04:08,470
This return value then gets assigned back
84

84

00:04:08,470  -->  00:04:10,420
to the MPG value inside print car info.
85

85

00:04:12,410  -->  00:04:14,720
So you can see how Python is jumping around.
86

86

00:04:14,720  -->  00:04:16,540
As soon as it encounters a function,
87

87

00:04:16,540  -->  00:04:18,560
it goes and runs the function code.
88

88

00:04:18,560  -->  00:04:19,700
If there's a return,
89

89

00:04:19,700  -->  00:04:22,660
then we can assign that to a variable.
90

90

00:04:22,660  -->  00:04:26,204
So running this function here is exactly the same
91

91

00:04:26,204  -->  00:04:29,733
as just copying this code and putting it there.
92

92

00:04:30,630  -->  00:04:35,100
However, because it has a name, such as car name,
93

93

00:04:35,100  -->  00:04:36,620
it's a little bit easier to read
94

94

00:04:36,620  -->  00:04:37,960
when you're looking at this function
95

95

00:04:37,960  -->  00:04:39,680
to understand what it does.
96

96

00:04:39,680  -->  00:04:42,830
Clearly, this function first gets the car name,
97

97

00:04:42,830  -->  00:04:45,160
or calculates it in some way,
98

98

00:04:45,160  -->  00:04:48,830
then it gets the car's MPG and calculates it in some way,
99

99

00:04:48,830  -->  00:04:50,900
and finally prints some information out.
100

100

00:04:50,900  -->  00:04:53,240
And you don't necessarily have to go
101

101

00:04:53,240  -->  00:04:54,900
and look at these other functions,
102

102

00:04:54,900  -->  00:04:55,880
as long as you believe
103

103

00:04:55,880  -->  00:04:59,320
that it calculates the name and the MPG correctly,
104

104

00:04:59,320  -->  00:05:00,940
but you can do if you want,
105

105

00:05:00,940  -->  00:05:01,840
in order to understand
106

106

00:05:01,840  -->  00:05:05,740
how the name and the MPG are calculated.
107

107

00:05:05,740  -->  00:05:07,030
Notice that here at the end
108

108

00:05:07,030  -->  00:05:10,593
we have now got MPG equal print car info,
109

109

00:05:10,593  -->  00:05:14,700
but this print car info function does not return anything,
110

110

00:05:14,700  -->  00:05:17,440
or rather it returns none by default,
111

111

00:05:17,440  -->  00:05:20,800
so this is kind of useless, so we can just remove it.
112

112

00:05:20,800  -->  00:05:22,850
We can just call print car info,
113

113

00:05:22,850  -->  00:05:24,750
and that is going to run through this code here
114

114

00:05:24,750  -->  00:05:29,093
and print the information by using these other functions.
115

115

00:05:29,093  -->  00:05:31,440
I also say that it's good form in Python
116

116

00:05:31,440  -->  00:05:33,950
and generally recommended to leave two lines
117

117

00:05:33,950  -->  00:05:35,800
between each function definition
118

118

00:05:35,800  -->  00:05:37,900
so you can read through it a little bit quicker.
119

119

00:05:37,900  -->  00:05:39,580
Now this code is getting a little bit longer,
120

120

00:05:39,580  -->  00:05:40,900
but we can still run it
121

121

00:05:40,900  -->  00:05:43,263
and it will print out the same thing as before.
122

122

00:05:44,240  -->  00:05:48,060
Something that my students frequently do is a small mistake,
123

123

00:05:48,060  -->  00:05:51,630
which is to print this function here.
124

124

00:05:51,630  -->  00:05:54,910
If you say print of print car info,
125

125

00:05:54,910  -->  00:05:58,340
what you're doing is you're passing the result
126

126

00:05:58,340  -->  00:06:02,270
of calling print car info to the print function,
127

127

00:06:02,270  -->  00:06:05,920
which is then going to print this value out.
128

128

00:06:05,920  -->  00:06:07,910
The value that we get printed out
129

129

00:06:07,910  -->  00:06:10,690
is the return value of the function,
130

130

00:06:10,690  -->  00:06:12,990
but because this function returns none,
131

131

00:06:12,990  -->  00:06:16,270
what you'll see here is none printed out.
132

132

00:06:16,270  -->  00:06:17,890
So you still get all of the stuff
133

133

00:06:17,890  -->  00:06:19,630
from our previous functions,
134

134

00:06:19,630  -->  00:06:23,350
but now you get none in between each function as well.
135

135

00:06:23,350  -->  00:06:25,100
This is normally not what you want,
136

136

00:06:25,100  -->  00:06:28,490
so just don't print the result of calling that function.
137

137

00:06:28,490  -->  00:06:31,670
You can just call the function and let it print.
138

138

00:06:31,670  -->  00:06:36,099
If you wanted to print here, you can make this return,
139

139

00:06:36,099  -->  00:06:38,180
and then, this function
140

140

00:06:38,180  -->  00:06:40,448
will now actually return this string,
141

141

00:06:40,448  -->  00:06:43,330
which then you can print out.
142

142

00:06:43,330  -->  00:06:45,040
If you don't print it out,
143

143

00:06:45,040  -->  00:06:47,650
you won't see anything output in the console
144

144

00:06:47,650  -->  00:06:49,360
because we haven't printed anything out.
145

145

00:06:49,360  -->  00:06:51,350
We've just got some values.
146

146

00:06:51,350  -->  00:06:53,950
If you want to show them, you have to print it out.
147

147

00:06:53,950  -->  00:06:56,370
So if you make the function return something,
148

148

00:06:56,370  -->  00:06:58,760
you can then use that value.
149

149

00:06:58,760  -->  00:07:01,730
If you make the function print like we had earlier,
150

150

00:07:01,730  -->  00:07:03,693
then you don't have to use that value.
151

151

00:07:04,800  -->  00:07:07,840
Functions can return multiple times,
152

152

00:07:07,840  -->  00:07:09,830
and what that means is let's say that you've got
153

153

00:07:09,830  -->  00:07:11,770
a divide function that takes two numbers
154

154

00:07:11,770  -->  00:07:13,440
and divides one by the other,
155

155

00:07:13,440  -->  00:07:16,120
but you want to make sure that you can't divide a number
156

156

00:07:16,120  -->  00:07:19,300
by zero, because that's illegal in mathematics.
157

157

00:07:19,300  -->  00:07:23,170
You can say if Y is equal to zero, then you can return.
158

158

00:07:23,170  -->  00:07:26,200
You try to divide by zero.
159

159

00:07:26,200  -->  00:07:30,360
But otherwise, we can return X divided by Y.
160

160

00:07:30,360  -->  00:07:32,030
This works in exactly the same way
161

161

00:07:32,030  -->  00:07:33,670
that all if statements do,
162

162

00:07:33,670  -->  00:07:37,720
which is that if Y is zero, then this code runs.
163

163

00:07:37,720  -->  00:07:39,510
But if Y is not zero,
164

164

00:07:39,510  -->  00:07:42,420
then this code runs and this one does not.
165

165

00:07:42,420  -->  00:07:46,280
Both of them will cause the termination of the function
166

166

00:07:46,280  -->  00:07:49,120
and the value to be given back to the caller,
167

167

00:07:49,120  -->  00:07:53,890
but only one of them will ever run in one function call.
168

168

00:07:53,890  -->  00:07:56,083
So you can have multiple return statements,
169

169

00:07:56,928  -->  00:07:58,820
as long as they both won't try to run.
170

170

00:07:58,820  -->  00:08:01,603
So if you have this instead,
171

171

00:08:02,511  -->  00:08:05,570
this if statement will never run,
172

172

00:08:05,570  -->  00:08:08,080
because when this one runs, the function terminates.
173

173

00:08:08,080  -->  00:08:09,740
So having two return statements,
174

174

00:08:09,740  -->  00:08:12,240
one right after the other is not very useful,
175

175

00:08:12,240  -->  00:08:14,300
because only the first one would ever run.
176

176

00:08:14,300  -->  00:08:17,670
So if you put them in an if statement, that's better.
177

177

00:08:17,670  -->  00:08:18,970
Either one will run,
178

178

00:08:18,970  -->  00:08:22,230
but both can run given the right circumstances.
179

179

00:08:22,230  -->  00:08:25,620
So if we print the divide of 10 and two,
180

180

00:08:25,620  -->  00:08:28,520
you'll see that you get 5.0,
181

181

00:08:28,520  -->  00:08:32,600
but if you print the divide of six and zero,
182

182

00:08:32,600  -->  00:08:35,300
then you'll see this string gets printed out.
183

183

00:08:35,300  -->  00:08:36,913
You try to divide by zero.
184

184

00:08:37,960  -->  00:08:39,330
Once again just to reiterate,
185

185

00:08:39,330  -->  00:08:42,492
if you call these functions but you don't print,
186

186

00:08:42,492  -->  00:08:44,530
nothing will get printed out,
187

187

00:08:44,530  -->  00:08:47,300
because these functions calculate a value,
188

188

00:08:47,300  -->  00:08:49,010
and give it back to the caller
189

189

00:08:49,010  -->  00:08:50,430
so that you can put it in a variable
190

190

00:08:50,430  -->  00:08:51,820
or do something with it,
191

191

00:08:51,820  -->  00:08:53,300
but you still have to print it out
192

192

00:08:53,300  -->  00:08:55,503
if you actually want to show it to the user.
193

193

00:08:56,360  -->  00:08:57,390
That's it for this video.
194

194

00:08:57,390  -->  00:09:00,100
I wanted to tell you about return values for functions
195

195

00:09:00,100  -->  00:09:02,500
because they really start allowing you
196

196

00:09:02,500  -->  00:09:04,560
to split out your code and move it
197

197

00:09:04,560  -->  00:09:06,090
from one place to another,
198

198

00:09:06,090  -->  00:09:07,380
putting it into functions
199

199

00:09:07,380  -->  00:09:10,610
so that you can reuse them in other parts of your code.
200

200

00:09:10,610  -->  00:09:12,130
As you learn more Python,
201

201

00:09:12,130  -->  00:09:15,310
you will increasingly put code into different functions
202

202

00:09:15,310  -->  00:09:17,820
so that you can use them in multiple places.
203

203

00:09:17,820  -->  00:09:18,880
Thanks for joining me.
204

204

00:09:18,880  -->  00:09:20,210
I hope you've learned something,
205

205

00:09:20,210  -->  00:09:21,960
and I'll see you in the next video.
