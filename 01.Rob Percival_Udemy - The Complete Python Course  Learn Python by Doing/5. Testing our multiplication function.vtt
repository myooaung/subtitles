WEBVTT
1
1

00:00:00.000  -->  00:00:00.066
[Jose]
2

2

00:00:00.066  -->  00:00:01.766
- Hi guys and welcome back.
3

3

00:00:01.766  -->  00:00:03.233
In this video we're
going to be implementing
4

4

00:00:03.233  -->  00:00:05.500
a new function, that
we're gonna call multiply,
5

5

00:00:05.500  -->  00:00:08.366
and we're gonna be
writing a few tests for it
6

6

00:00:08.366  -->  00:00:10.866
with what we know now on
boundary value analysis
7

7

00:00:10.866  -->  00:00:12.866
and equivalence partitioning.
8

8

00:00:12.866  -->  00:00:15.766
Let's start by writing our function,
9

9

00:00:15.766  -->  00:00:18.000
which I'm gonna call multiply.
10

10

00:00:18.000  -->  00:00:19.466
And what it's gonna do is it's gonna take
11

11

00:00:19.466  -->  00:00:21.766
any number of arguments and each one
12

12

00:00:21.766  -->  00:00:26.000
is going to be either an int or a float.
13

13

00:00:26.000  -->  00:00:28.800
Notice that by doing *args,
14

14

00:00:28.800  -->  00:00:32.233
which by the way you can do *values or *a
15

15

00:00:32.233  -->  00:00:33.833
or whatever you want,
16

16

00:00:33.833  -->  00:00:36.833
by doing that this function
will be called like this,
17

17

00:00:36.833  -->  00:00:39.566
three, five, nine.
18

18

00:00:39.566  -->  00:00:42.333
You can pass in any
number of arguments here.
19

19

00:00:42.333  -->  00:00:45.066
You don't have to pass
in a list of arguments
20

20

00:00:45.066  -->  00:00:45.900
or anything like that.
21

21

00:00:45.900  -->  00:00:49.466
Just separate individual
arguments to this function
22

22

00:00:49.466  -->  00:00:53.633
is what this star means in front of args.
23

23

00:00:53.633  -->  00:00:56.033
Okay, so now we've got that,
24

24

00:00:56.033  -->  00:01:00.300
and we're gonna do is check
if the len of args is zero,
25

25

00:01:00.300  -->  00:01:03.033
and if it is, we're gonna
raise a value error,
26

26

00:01:03.033  -->  00:01:06.666
and we're gonna say at least one value
27

27

00:01:06.666  -->  00:01:10.066
to multiply must be passed.
28

28

00:01:10.066  -->  00:01:14.966
And do make sure to use
the right brackets there.
29

29

00:01:14.966  -->  00:01:17.466
Otherwise, we're gonna start at one,
30

30

00:01:17.466  -->  00:01:20.266
and we're gonna iterate
over the arguments,
31

31

00:01:20.266  -->  00:01:23.866
and we're gonna just
multiply total by arg,
32

32

00:01:23.866  -->  00:01:25.666
and at the end we're gonna return total.
33

33

00:01:25.666  -->  00:01:31.033
Very naive, very simple
multiplication method.
34

34

00:01:31.033  -->  00:01:32.566
By far not the best one,
35

35

00:01:32.566  -->  00:01:34.666
but simple enough.
36

36

00:01:34.666  -->  00:01:36.666
However if you look at this code,
37

37

00:01:36.666  -->  00:01:38.600
it may not be immediately obvious
38

38

00:01:38.600  -->  00:01:40.900
everything that it does and potentially
39

39

00:01:40.900  -->  00:01:43.933
all the different paths that
code could take through it.
40

40

00:01:43.933  -->  00:01:45.633
So, it is always good to write some tests
41

41

00:01:45.633  -->  00:01:47.533
when you have a function like this one,
42

42

00:01:47.533  -->  00:01:50.400
so that you can show people
that look at the tests
43

43

00:01:50.400  -->  00:01:52.600
everything that you
know about the function.
45

44

00:01:53.066  -->  00:01:54.700
and also so you can set in stone
46

45

00:01:54.700  -->  00:01:57.166
how you expect the function to behave.
47

46

00:01:57.166  -->  00:01:59.500
That way if that changes
later on down the line,
48

47

00:01:59.500  -->  00:02:01.266
some of your tests will fail
49

48

00:02:01.266  -->  00:02:03.066
and you'll be able to identify exactly
50

49

00:02:03.066  -->  00:02:04.200
what's changed in your code,
51

50

00:02:04.200  -->  00:02:07.300
in case you didn't realise.
52

51

00:02:07.300  -->  00:02:09.700
So, what we'll do is
we'll start by testing
53

52

00:02:09.700  -->  00:02:12.966
a multiplication, where the values
54

53

00:02:12.966  -->  00:02:15.233
or the argument says empty.
55

54

00:02:15.233  -->  00:02:17.533
So, we'll say test_multiply_empty,
56

55

00:02:17.533  -->  00:02:22.633
and then we will come here and
say with self.assertRraises
57

56

00:02:22.633  -->  00:02:27.300
a ValueError, we will just
type multiply like that.
58

57

00:02:27.300  -->  00:02:31.766
And you do need to import it of course.
59

58

00:02:31.766  -->  00:02:33.533
Now if we run this it should pass
60

59

00:02:33.533  -->  00:02:36.433
because not passing any arguments
61

60

00:02:36.433  -->  00:02:39.400
will cause args to have a length of zero.
62

61

00:02:39.400  -->  00:02:41.566
And then this will raise a value error.
63

62

00:02:41.566  -->  00:02:44.266
At this point I'm gonna
enable this toggle down
64

63

00:02:44.266  -->  00:02:46.833
on the bottom left so that
this reruns every time
65

64

00:02:46.833  -->  00:02:49.333
I save the file.
66

65

00:02:49.333  -->  00:02:51.600
Let's go into our second test.
67

66

00:02:51.600  -->  00:02:54.166
Now that we've tested the empty arguments,
68

67

00:02:54.166  -->  00:02:57.066
we should also test boundaries around it
69

68

00:02:57.066  -->  00:02:59.666
or rather the zero
argument is the boundary,
70

69

00:02:59.666  -->  00:03:02.366
so we should test one as well.
71

70

00:03:02.366  -->  00:03:09.233
So, we're gonna multiply a single value.
72

71

00:03:09.233  -->  00:03:11.866
So, we'll say that the expected is 15
73

72

00:03:11.866  -->  00:03:14.533
and we'll say self.assertEqual,
74

73

00:03:14.533  -->  00:03:19.066
multiply of expected should
be the same value as expected.
75

74

00:03:19.066  -->  00:03:20.966
So, whenever you multiply a single value,
76

75

00:03:20.966  -->  00:03:22.366
it should be the same.
77

76

00:03:22.366  -->  00:03:23.666
So, now I'll press save.
78

77

00:03:23.666  -->  00:03:25.166
The tests will rerun down here
79

78

00:03:25.166  -->  00:03:29.400
and you can see six of six
passed, so this is good.
80

79

00:03:29.400  -->  00:03:31.833
Next up we will try to multiply zero,
81

80

00:03:31.833  -->  00:03:34.066
because this could be a boundary
82

81

00:03:34.066  -->  00:03:36.200
or rather it is a
boundary that I've thought
83

82

00:03:36.200  -->  00:03:38.300
could potentially behave differently
84

83

00:03:38.300  -->  00:03:40.733
depending on the
implementation of the function.
85

84

00:03:40.733  -->  00:03:46.000
So, we'll say test_multiply_zero,
86

85

00:03:46.000  -->  00:03:51.566
and we will go for zero
here and type assertEqual,
87

86

00:03:51.566  -->  00:03:56.700
multiply of expected should be expected.
88

87

00:03:56.700  -->  00:03:59.466
What this means is if you pass in zero
89

88

00:03:59.466  -->  00:04:00.866
to the multiply function,
90

89

00:04:00.866  -->  00:04:03.500
it is still going to multiply whatever way
91

90

00:04:03.500  -->  00:04:06.466
it is using to multiply by zero,
92

91

00:04:06.466  -->  00:04:09.233
and that means you're
always gonna get zero back.
93

92

00:04:09.233  -->  00:04:11.800
I can see how some
incorrect implementations
94

93

00:04:11.800  -->  00:04:14.733
of a multiply function
could potentially return one
95

94

00:04:14.733  -->  00:04:16.000
in this scenario.
96

95

00:04:16.000  -->  00:04:20.300
Not something you would
expect but it could happen.
97

96

00:04:20.300  -->  00:04:22.400
Next up, we are going to just test
98

97

00:04:22.400  -->  00:04:25.166
the multiply function
does the correct thing.
99

98

00:04:25.166  -->  00:04:28.233
So, we will go ahead and give the inputs,
100

99

00:04:28.233  -->  00:04:30.266
which are gonna be three
and five in my case,
101

100

00:04:30.266  -->  00:04:32.300
and the expected result
which is gonna be 15.
102

101

00:04:32.300  -->  00:04:35.533
And then we'll say self.assertEqual,
103

102

00:04:35.533  -->  00:04:40.666
the multiply with the inputs
will be the expected value.
104

103

00:04:40.666  -->  00:04:42.666
Notice that I've made a
mistake here on purpose,
105

104

00:04:42.666  -->  00:04:44.300
just to show you a couple of things.
106

105

00:04:44.300  -->  00:04:45.633
The first one is that I saved the file
107

106

00:04:45.633  -->  00:04:48.733
and the tests ran and one of them fails,
108

107

00:04:48.733  -->  00:04:52.100
and you get here the error message.
109

108

00:04:52.100  -->  00:04:57.333
So, you'll see that 15 is
not equal to three, five.
110

109

00:04:57.333  -->  00:05:00.333
So, evidently the function
returned three, five,
111

110

00:05:00.333  -->  00:05:02.500
and not 15, which is
what we were expecting.
112

111

00:05:02.500  -->  00:05:07.166
So, that is because we
didn't pass in the numbers.
113

112

00:05:07.166  -->  00:05:10.033
What we passed in is the
tuple of the numbers.
114

113

00:05:10.033  -->  00:05:12.766
what we want to do is pass
in three and five as separate
115

114

00:05:12.766  -->  00:05:15.966
arguments like this, and
in order to do that with
116

115

00:05:15.966  -->  00:05:18.066
inputs, you need to do *inputs,
117

116

00:05:18.066  -->  00:05:21.533
and that is going to
pass exactly these values
118

117

00:05:21.533  -->  00:05:25.000
as individual arguments.
119

118

00:05:25.000  -->  00:05:29.600
Next up, we are going to
include a zero in our inputs.
120

119

00:05:29.600  -->  00:05:33.866
So, we will say inputs
are three, five, and zero.
121

120

00:05:33.866  -->  00:05:36.066
And the expected result is zero.
122

121

00:05:36.066  -->  00:05:40.300
So, a very simple test, but nonetheless
123

122

00:05:40.300  -->  00:05:42.533
probably a necessary one.
124

123

00:05:42.533  -->  00:05:45.433
Just in case there is a
check for zero in the inputs
125

124

00:05:45.433  -->  00:05:46.600
or something like that,
126

125

00:05:46.600  -->  00:05:49.166
you can think that it's quite
similar to the multiply zero.
127

126

00:05:49.166  -->  00:05:51.700
But in this case it is
with more inputs here.
128

127

00:05:51.700  -->  00:05:54.500
We just want to make
sure that our loop isn't
129

128

00:05:54.500  -->  00:05:57.333
for example, ignoring zero values,
130

129

00:05:57.333  -->  00:06:00.033
which I can see an
implementation doing potentially
131

130

00:06:00.033  -->  00:06:02.400
if it was done incorrectly.
132

131

00:06:02.400  -->  00:06:06.133
Next up, we are going to
multiply negative values,
133

132

00:06:06.133  -->  00:06:10.633
and we will expect the results
to be minus 30 in this case.
134

133

00:06:10.633  -->  00:06:13.200
So, there is another
equivalence class there,
135

134

00:06:13.200  -->  00:06:17.333
minus five, which you
probably should test for.
136

135

00:06:17.333  -->  00:06:20.400
You can do things like test
for double negative values
137

136

00:06:20.400  -->  00:06:22.500
making sure it is positive and so on,
138

137

00:06:22.500  -->  00:06:25.200
but that is probably getting too much
139

138

00:06:25.200  -->  00:06:29.633
into does maths work in Python?
140

139

00:06:29.633  -->  00:06:31.800
It's up to you how much, how deep
141

140

00:06:31.800  -->  00:06:34.700
you want to go into
this with these values,
142

141

00:06:34.700  -->  00:06:36.566
but I wouldn't put too many in there,
143

142

00:06:36.566  -->  00:06:40.533
just enough to check for
the boundaries themselves.
144

143

00:06:40.533  -->  00:06:44.533
Finally we are going
to multiply some floats
145

144

00:06:44.533  -->  00:06:46.566
because that is another class here.
146

145

00:06:46.566  -->  00:06:48.500
So, we'll do 3.0 and two,
147

146

00:06:48.500  -->  00:06:51.300
and to make sure that
the output isn't floored
148

147

00:06:51.300  -->  00:06:53.800
or rounded or anything like that,
149

148

00:06:53.800  -->  00:06:55.433
so the expect is gonna be 6.0,
150

149

00:06:55.433  -->  00:06:58.266
and we will do assertEqual
151

150

00:06:58.266  -->  00:07:01.733
the multiply of inputs and the expected.
152

151

00:07:01.733  -->  00:07:04.133
So, a couple more things
you could do here,
153

152

00:07:04.133  -->  00:07:06.933
of course have different
types of inputs like strings
154

153

00:07:06.933  -->  00:07:09.633
or tuples or lists and so on.
155

154

00:07:09.633  -->  00:07:12.766
Potentially you may want to
check the multiply function
156

155

00:07:12.766  -->  00:07:16.033
and make sure that these things
are only ints and floats.
157

156

00:07:16.033  -->  00:07:18.500
You could have a type
check inside the function,
158

157

00:07:18.500  -->  00:07:22.766
but those things are taken care of
159

158

00:07:22.766  -->  00:07:24.166
by the type hinting.
160

159

00:07:24.166  -->  00:07:28.266
So, as long as the developer
has type hinting enabled
161

160

00:07:28.266  -->  00:07:30.466
when they try to call
your multiply function
162

161

00:07:30.466  -->  00:07:32.466
with a string, for example they should
163

162

00:07:32.466  -->  00:07:34.466
get a message saying
you know this function
164

163

00:07:34.466  -->  00:07:36.100
only takes ints some floats.
165

164

00:07:36.100  -->  00:07:38.000
So, you don't have to test things
166

165

00:07:38.000  -->  00:07:42.066
that are already taken care
of by the static analysis
167

166

00:07:42.066  -->  00:07:44.200
in this case the type hinting.
168

167

00:07:44.200  -->  00:07:48.166
This is why type hinting is a
pretty popular thing nowadays
169

168

00:07:48.166  -->  00:07:50.400
and it's a very useful thing
to have in your code base,
170

169

00:07:50.400  -->  00:07:54.066
and it's something that Python
hasn't had for a long time,
171

170

00:07:54.066  -->  00:07:55.866
at least not official support for.
172

171

00:07:55.866  -->  00:07:58.433
So, do make sure that
you use type hinting,
173

172

00:07:58.433  -->  00:08:00.500
especially on functions,
174

173

00:08:00.500  -->  00:08:03.100
because they can really help you
175

174

00:08:03.100  -->  00:08:06.366
and they can really prevent
errors down the line.
176

175

00:08:06.366  -->  00:08:09.033
For example if you define
this multiply function
177

176

00:08:09.033  -->  00:08:11.766
in a specific way, and
somebody uses in that way
178

177

00:08:11.766  -->  00:08:13.600
that you don't expect,
such as by passing a string
179

178

00:08:13.600  -->  00:08:16.600
or a tuple, you could
get some errors in here
180

179

00:08:16.600  -->  00:08:18.866
that could easily be
avoided just by showing
181

180

00:08:18.866  -->  00:08:20.900
the developer a nice message.
182

181

00:08:20.900  -->  00:08:23.566
So, for now that's our tests.
183

182

00:08:23.566  -->  00:08:25.466
If you can think of any more questions
184

183

00:08:25.466  -->  00:08:27.266
you'd like to ask your function,
185

184

00:08:27.266  -->  00:08:30.066
and make sure that it does it over time,
186

185

00:08:30.066  -->  00:08:33.133
as your code changes do add those in here.
187

186

00:08:33.133  -->  00:08:34.966
If you are thinking that
there's a lot of repetition
188

187

00:08:34.966  -->  00:08:37.733
in these tests, you would be correct.
189

188

00:08:37.733  -->  00:08:39.166
There is quite a lot of repetition
190

189

00:08:39.166  -->  00:08:42.600
in the inputs and outputs
and self assertEqual.
191

190

00:08:42.600  -->  00:08:44.966
All of these tests do the same thing.
192

191

00:08:44.966  -->  00:08:47.700
So, there are Python libraries
to reduce this duplication,
193

192

00:08:47.700  -->  00:08:50.066
but they are not covered in this course.
194

193

00:08:50.066  -->  00:08:52.566
I'm sure that you can
learn about them by looking
195

194

00:08:52.566  -->  00:08:54.800
at official documentation
and things like that.
196

195

00:08:54.800  -->  00:08:57.833
For example a library called
hypothesis comes to mind
197

196

00:08:57.833  -->  00:09:01.100
exactly to do that.
198

197

00:09:01.100  -->  00:09:01.933
That's it for this video dude.
199

198

00:09:01.933  -->  00:09:02.966
Thanks for joining me.
200

199

00:09:02.966  -->  00:09:04.432
I'll see you on the next one.
