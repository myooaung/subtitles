1
00:00:00,650 --> 00:00:07,250
Hello and welcome to this new tutorial I'm super excited because we are two steps left from the big

2
00:00:07,250 --> 00:00:14,420
training and the two remaining steps that we have to do is first split the data into batches of questions

3
00:00:14,420 --> 00:00:15,260
and answers.

4
00:00:15,350 --> 00:00:17,090
And that's what we're doing this to toil.

5
00:00:17,090 --> 00:00:22,970
And then the second step is to split again the questions and answers into training and validation data

6
00:00:23,090 --> 00:00:28,790
because we will do some cross validation during the training to keep track of the predictive power on

7
00:00:29,060 --> 00:00:33,650
new predictions which will be 10 or 15 percent of the data.

8
00:00:33,650 --> 00:00:40,550
All right so let's take care of this first step in this battle which is to split the data in two batches

9
00:00:40,580 --> 00:00:42,010
of questions and answers.

10
00:00:42,140 --> 00:00:46,250
That's a fundamental thing to do in deep learning to work with batches.

11
00:00:46,400 --> 00:00:49,690
And basically in the Titor we're going to make the batches.

12
00:00:50,000 --> 00:00:55,670
All right so we're going to do that into a new function that will use the previous function because

13
00:00:55,670 --> 00:01:02,750
of course inside each of these batches we will pad the questions with the pad tokens so we will make

14
00:01:02,750 --> 00:01:08,060
a new function and then of course in the training we will apply that function to create the batches

15
00:01:08,360 --> 00:01:13,460
and feed the neural network with these batches of inputs and targets.

16
00:01:13,460 --> 00:01:20,420
I remind that the inputs will correspond to the questions and the targets will respond to the answers.

17
00:01:20,420 --> 00:01:25,040
All right so let's do this let's make this function we're start with death and this function is going

18
00:01:25,040 --> 00:01:29,830
to be called split into batches.

19
00:01:29,840 --> 00:01:30,930
I think that's clear.

20
00:01:31,070 --> 00:01:38,120
This way split into batches and you can naturally guess the arguments that this function is going to

21
00:01:38,120 --> 00:01:38,650
take.

22
00:01:38,840 --> 00:01:44,180
Well that's going to be of course first are questions then are answers.

23
00:01:44,360 --> 00:01:52,760
And finally of course the inevitable batch size because we have to choose a batch size for our batches

24
00:01:53,360 --> 00:01:54,660
so split into batches.

25
00:01:54,710 --> 00:02:00,950
Questions Answers batch size then Collen And let's go inside the function.

26
00:02:00,950 --> 00:02:07,640
All right so we have to create several batches depending on the total length of the questions that is

27
00:02:07,640 --> 00:02:13,220
the total number of questions and therefore we will have to figure out this total number of batches

28
00:02:13,220 --> 00:02:16,560
we have to create which is a simple mathematical formula.

29
00:02:16,700 --> 00:02:23,600
And then once we figure out this number we can store for loop to loop over each one of these batches

30
00:02:23,960 --> 00:02:30,260
and then inside these batches we will get the batch of questions which will be our batch of inputs and

31
00:02:30,260 --> 00:02:36,350
then the batch of answers which will be our batch of targets and of course inside of each of these batches

32
00:02:36,350 --> 00:02:43,730
we will apply the Apply banding function to make sure that the sequences in our batches whether they

33
00:02:43,730 --> 00:02:51,070
are questions or answers will be padded with the token so that they all have the same length.

34
00:02:51,080 --> 00:02:54,940
So let's do this let's start with this for loop.

35
00:02:55,220 --> 00:03:02,060
And so we have to loop over well let's say we're going to loop over some batch indexes.

36
00:03:02,090 --> 00:03:05,430
So for batch index that's how we'll keep track of the batch.

37
00:03:05,540 --> 00:03:10,670
So for batch index in range it's going to start from zero.

38
00:03:10,700 --> 00:03:17,570
The first batch will have next 0 naturally with Python index it started 0 from 0 2 and that's where

39
00:03:17,570 --> 00:03:23,930
we need to figure out the number of batches we'll have in the end which depends on two things.

40
00:03:23,930 --> 00:03:29,570
First the total number of questions which is also the total number of answers because for each question

41
00:03:29,570 --> 00:03:31,020
we have it's answer.

42
00:03:31,190 --> 00:03:35,120
And the second element on which it depends is the batch size of course.

43
00:03:35,120 --> 00:03:41,480
And so the number is naturally the total number of questions divided by the Vetch size that will give

44
00:03:41,480 --> 00:03:47,300
us the number of batches we have to create because basically this will split the data into batches of

45
00:03:47,300 --> 00:03:48,830
size batch size.

46
00:03:48,830 --> 00:03:50,160
All right so let's do this.

47
00:03:50,180 --> 00:03:54,730
It is from 0 up to the number of questions which I can get.

48
00:03:54,890 --> 00:04:01,340
Thanks to the len function that I apply to the questions that gives me the number of questions and also

49
00:04:01,340 --> 00:04:02,600
the number of answers.

50
00:04:02,780 --> 00:04:09,980
But we need to divide that by the bedside but in order to get an integer we're going to use this double

51
00:04:09,980 --> 00:04:16,650
slash double slash and that divides the length questions by batch size.

52
00:04:16,880 --> 00:04:17,690
All right.

53
00:04:17,840 --> 00:04:20,850
So this line questions divided by bite size.

54
00:04:20,930 --> 00:04:23,740
We are ready to start the fall.

55
00:04:24,050 --> 00:04:24,380
All right.

56
00:04:24,380 --> 00:04:34,400
So we're going to start with a start index this start index will be the first index of the question

57
00:04:34,560 --> 00:04:36,360
we're adding in the batched.

58
00:04:36,380 --> 00:04:41,530
Now we're dealing with a specific bet right now that has a specific batched index.

59
00:04:41,720 --> 00:04:46,440
But this start index here is the index of the first question.

60
00:04:46,480 --> 00:04:51,860
We are adding to this back and therefore also the index of the first answer we're adding to this bet.

61
00:04:52,040 --> 00:04:53,340
So start index.

62
00:04:53,420 --> 00:04:57,650
And how can we get it at a specific step in the loop.

63
00:04:57,830 --> 00:05:06,900
Well that's going to be equal to our batch index multiplied by the batch size.

64
00:05:06,900 --> 00:05:07,460
All right.

65
00:05:07,530 --> 00:05:09,500
Let's explain that with the first indexes.

66
00:05:09,500 --> 00:05:12,160
So we started back in there 0 right.

67
00:05:12,160 --> 00:05:17,760
That's our first batch and therefore the first question we'll add is the first question the very first

68
00:05:17,760 --> 00:05:22,700
question of all the questions and we'll have the index 0 that index times batch size.

69
00:05:22,720 --> 00:05:26,040
So that will be the start index of the first question we'll add in the batch.

70
00:05:26,160 --> 00:05:31,410
And then when batch index equals 1 which is the next step in the loop Well that's where we'll deal with

71
00:05:31,410 --> 00:05:33,710
the second batch with the next one.

72
00:05:33,810 --> 00:05:39,810
And therefore the index of the first question will add to this second that will have to be the best

73
00:05:39,810 --> 00:05:45,860
index one times the best size which is for example 64 we chose 64.

74
00:05:45,990 --> 00:05:51,540
This first question will add to the second batch will have to be the next questions after all the questions

75
00:05:51,540 --> 00:05:53,280
we added into the first batch.

76
00:05:53,400 --> 00:05:57,140
And therefore since there were 64 questions in the first batch.

77
00:05:57,300 --> 00:06:02,970
Well the index of these first questions were adding to the second batch must be 64 because the questions

78
00:06:02,970 --> 00:06:06,630
in the first batch had indexed from zero up to 63.

79
00:06:06,870 --> 00:06:12,040
So that's how it works and that's how we can get the start index that is the index of the first question.

80
00:06:12,080 --> 00:06:18,540
We are adding to the batch we're dealing with at each step of this iteration so start index equals batch

81
00:06:18,540 --> 00:06:20,060
index times batch size.

82
00:06:20,190 --> 00:06:26,850
And now we are ready to add our questions in the bed and our answers in the batch because basically

83
00:06:26,850 --> 00:06:29,880
we just needed this start index.

84
00:06:29,880 --> 00:06:35,540
So first let's get our questions in the batch.

85
00:06:35,550 --> 00:06:37,740
So I'm calling this variable question and that.

86
00:06:37,800 --> 00:06:39,210
I think that's pretty clear.

87
00:06:39,210 --> 00:06:44,300
These will be the questions we add to this specific batch.

88
00:06:44,370 --> 00:06:49,440
We are drilling right now in the loop so questions and batch equals and now very simply we wanted to

89
00:06:49,440 --> 00:06:58,050
take our questions our whole list of questions and just get the right indexes of these questions that

90
00:06:58,050 --> 00:07:04,140
have to go into the batch we're dealing with right now in the loop and that we can get things to this

91
00:07:04,350 --> 00:07:05,430
start index.

92
00:07:05,490 --> 00:07:12,060
And of course the bedside because these questions that we want to add right now have their indexes starting

93
00:07:12,060 --> 00:07:22,150
from start index up to start index plus batch size.

94
00:07:22,200 --> 00:07:23,040
And there we go.

95
00:07:23,100 --> 00:07:25,760
We have our questions in batch.

96
00:07:25,790 --> 00:07:26,860
All right perfect.

97
00:07:26,860 --> 00:07:29,120
And now let's take care of our answers.

98
00:07:29,220 --> 00:07:34,620
Answers in the batch were basically going to add the answers to those previous questions here in the

99
00:07:34,620 --> 00:07:39,240
batch to this same batch we're dealing with right now in the loop.

100
00:07:39,240 --> 00:07:47,360
And so I'm going to call this new variable answers in batch which same will contain the answers in this

101
00:07:47,360 --> 00:07:50,480
batch and therefore that's going to be exactly the same here.

102
00:07:50,570 --> 00:07:59,530
We just need to copy this and just below paste it and replace questions by answers.

103
00:07:59,570 --> 00:08:00,170
All right.

104
00:08:00,170 --> 00:08:05,060
And that gives us the answers to those previous questions in the batch.

105
00:08:05,060 --> 00:08:05,520
Great.

106
00:08:05,520 --> 00:08:06,930
And now what do we have to do.

107
00:08:07,100 --> 00:08:08,450
Well that's very simple.

108
00:08:08,450 --> 00:08:14,090
We just need to apply padding to each of the questions we added in this batch.

109
00:08:14,180 --> 00:08:16,860
And also each of the answers we added in this batch.

110
00:08:16,970 --> 00:08:21,530
And that's why we had to do this apply padding function before.

111
00:08:21,530 --> 00:08:27,590
Because basically now what we're going to do is apply the Apply banding function to each of the questions

112
00:08:27,920 --> 00:08:29,420
in our questions in batch.

113
00:08:29,450 --> 00:08:31,810
And each of the answer is in our answers and back.

114
00:08:31,910 --> 00:08:44,630
And so I'm going to introduce two new variables first bad questions in batch and battered answers in

115
00:08:45,440 --> 00:08:46,440
batch.

116
00:08:46,460 --> 00:08:53,180
All right questions and that and better answers in batch which will contain the same questions and same

117
00:08:53,270 --> 00:08:54,680
answers in the same batch.

118
00:08:54,830 --> 00:09:02,060
But with the padding applied with all the pet tokens and so to apply this well we simply need to take

119
00:09:02,150 --> 00:09:08,240
our apply padding function which I'm copying here and pasting it here.

120
00:09:08,410 --> 00:09:11,890
And same here as well apply padding and inside.

121
00:09:11,900 --> 00:09:13,140
What do we need to do.

122
00:09:13,520 --> 00:09:16,700
Well as you can see the applied bellying function takes two arguments.

123
00:09:16,730 --> 00:09:21,640
First the batch of sequences which is exactly this batch we're done with right now.

124
00:09:21,740 --> 00:09:24,360
So for the questions it's going to be two questions in batch.

125
00:09:24,380 --> 00:09:27,170
And for the answers it's going to be the answer is in batch.

126
00:09:27,170 --> 00:09:29,420
And then the second argument let's not forget it.

127
00:09:29,540 --> 00:09:31,610
It's a word in a dictionary.

128
00:09:31,610 --> 00:09:37,270
And so you know what dictionaries will take for respectively the questions and answers for the questions

129
00:09:37,280 --> 00:09:42,200
will take the questions words to the dictionary and for the answers we'll take the answers words to

130
00:09:42,470 --> 00:09:49,460
a dictionary and there we go we will have a polite pairing to both our questions and our answers in

131
00:09:49,460 --> 00:09:51,720
this specific but we're dealing right now.

132
00:09:51,720 --> 00:09:52,690
The loop.

133
00:09:52,750 --> 00:09:57,890
All right let's do this apply padding to our well let's copy this.

134
00:09:58,130 --> 00:10:10,080
That's to our questions and Bache so questions and Bache and with the questions word to and dictionary.

135
00:10:10,080 --> 00:10:10,550
All right.

136
00:10:10,550 --> 00:10:13,050
And then same for answers.

137
00:10:13,140 --> 00:10:18,760
We're going to apply that to our answers and that on that.

138
00:10:18,770 --> 00:10:22,310
Here with our answers.

139
00:10:22,320 --> 00:10:25,330
Words to and dictionary.

140
00:10:25,340 --> 00:10:26,460
And there we go.

141
00:10:26,480 --> 00:10:31,020
That applies to padding to all the questions and answers in the batch.

142
00:10:31,220 --> 00:10:36,380
But now we're just going to add one more thing to this data structure we just got this data structure

143
00:10:36,380 --> 00:10:37,770
is actually a list.

144
00:10:37,800 --> 00:10:42,080
You know we returned our padded functions in a list a list of sequences.

145
00:10:42,260 --> 00:10:47,750
But we actually need an umpire because then when working with tons of flow we need to start with an

146
00:10:47,750 --> 00:10:48,470
umpire right.

147
00:10:48,650 --> 00:10:54,800
So what we simply need to add here which will and blow all this apply padding of the questions and answers

148
00:10:55,130 --> 00:11:02,950
we simply need to add the non-Thai array function which we need to apply to the whole thing here.

149
00:11:03,220 --> 00:11:04,560
And same here.

150
00:11:04,730 --> 00:11:10,220
I'm taking a number that has a shortcut and P and the array function.

151
00:11:10,220 --> 00:11:11,030
There we go.

152
00:11:11,150 --> 00:11:15,020
That takes the whole bed and answers in batch here.

153
00:11:15,020 --> 00:11:15,660
All right.

154
00:11:15,800 --> 00:11:17,000
And that's OK.

155
00:11:17,030 --> 00:11:22,730
Now we have our batch of Pelet questions in our same batch of Pettitt answers and non-payers which will

156
00:11:22,730 --> 00:11:25,530
be ready to transfer soon to 10.

157
00:11:25,900 --> 00:11:26,320
All right.

158
00:11:26,330 --> 00:11:32,810
And finally we have to return our Pettitt questions and back and our panel answer in bed for each of

159
00:11:32,810 --> 00:11:33,510
the batch.

160
00:11:33,530 --> 00:11:38,480
So we have to stay in the loop but this time to do this we're not going to use the return syntax we're

161
00:11:38,480 --> 00:11:45,260
going to use the yield syntax to yield and Python is like a return but it's better to use it when dealing

162
00:11:45,260 --> 00:11:46,130
with sequences.

163
00:11:46,250 --> 00:11:49,270
I will provide them the resources of the Statoil.

164
00:11:49,340 --> 00:11:53,910
Nice explanation of the differences between return and the old.

165
00:11:53,930 --> 00:11:55,660
All right so yields.

166
00:11:56,000 --> 00:12:11,730
And we want to return our battered questions and batch and also are bedded answers in batch and there

167
00:12:11,730 --> 00:12:15,870
we go we are done with our split into batches function.

168
00:12:16,320 --> 00:12:23,930
So now we're going to select all this code section and execute to get our split into batches function.

169
00:12:23,940 --> 00:12:24,240
All right.

170
00:12:24,240 --> 00:12:25,040
Amazing.

171
00:12:25,050 --> 00:12:29,520
We are now one step left from the big step of the training.

172
00:12:29,520 --> 00:12:34,500
We have another split to make which is to speed the questions and answers into training and validating

173
00:12:34,500 --> 00:12:35,230
data.

174
00:12:35,280 --> 00:12:40,370
We'll do that in the next oil and then eventually we'll get to the training until then.

175
00:12:40,370 --> 00:12:41,260
And so it's been on the.
