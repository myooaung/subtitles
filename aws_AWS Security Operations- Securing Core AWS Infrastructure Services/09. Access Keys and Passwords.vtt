WEBVTT
1
00:00:01.000 --> 00:00:05.078
In this clip let's take a look at access keys and passwords and

2
00:00:05.078 --> 00:00:07.274
how they relate to accessing our resources.

3
00:00:07.274 --> 00:00:12.524
Now access keys first, all access to any resource that we have in our account,

4
00:00:12.524 --> 00:00:15.910
that's going to be utilized through an API call.

5
00:00:15.910 --> 00:00:22.047
Now as we know, API calls are certainly carried out when I use the console,

6
00:00:22.047 --> 00:00:27.845
but if I'm using a program, automation, a script I've written,

7
00:00:27.845 --> 00:00:36.131
I'm going to need an active access key linked to a IAM user to have

8
00:00:36.131 --> 00:00:39.131
that process actually be carried out successfully.

9
00:00:39.131 --> 00:00:45.274
So each user will have an access key ID and each user can have a

10
00:00:45.274 --> 00:00:48.607
secret access key so if you want to do automation,

11
00:00:48.607 --> 00:00:51.274
a secret access key is what you need.

12
00:00:51.274 --> 00:00:55.274
This automation through the command prompt or through a program.

13
00:00:55.274 --> 00:01:00.274
After creation of a user account, the access key is active, it's good to go.

14
00:01:00.274 --> 00:01:05.215
And the access key and the secret access key are linked together,

15
00:01:05.215 --> 00:01:07.274
like a public/private key pair.

16
00:01:07.274 --> 00:01:10.274
Say you were doing encryption and using that public/private key pair.

17
00:01:10.274 --> 00:01:12.941
Now if an access key is lost,

18
00:01:12.941 --> 00:01:18.274
then go into the IAM console and create a new key for that user.

19
00:01:18.274 --> 00:01:24.496
One of the best practices suggested by Amazon is to manage your access keys,

20
00:01:24.496 --> 00:01:26.274
perform access key management.

21
00:01:26.274 --> 00:01:28.709
What do they mean by this process?

22
00:01:28.709 --> 00:01:33.231
Well they mean that you should rotate your access keys for all of

23
00:01:33.231 --> 00:01:36.845
your IAM users for the highest level of security.

24
00:01:36.845 --> 00:01:42.417
So each user can have two active access keys and the access key,

25
00:01:42.417 --> 00:01:45.674
once deleted, there's no access, it's been revoked,

26
00:01:45.674 --> 00:01:49.274
and once it's deleted the key is gone forever.

27
00:01:49.274 --> 00:01:52.803
So let's look at this best practice in a bit of detail.

28
00:01:52.803 --> 00:01:54.274
How would I do this?

29
00:01:54.274 --> 00:01:56.560
So in the process of rotating access keys,

30
00:01:56.560 --> 00:01:59.988
the first thing I'm going to do is create a second access

31
00:01:59.988 --> 00:02:02.560
key for a particular user or users.

32
00:02:02.560 --> 00:02:07.131
Then I'll have to update the applications to use the new key,

33
00:02:07.131 --> 00:02:09.607
so the user won't be locked out,

34
00:02:09.607 --> 00:02:14.274
then I'll have to change the state of the first key to be inactive,

35
00:02:14.274 --> 00:02:17.169
then I'll validate that my applications are still working,

36
00:02:17.169 --> 00:02:19.379
that they're linked with the new key,

37
00:02:19.379 --> 00:02:21.874
and then I'll delete the inactive access key.

38
00:02:21.874 --> 00:02:25.774
So there would be some automation that would have to be crafted using

39
00:02:25.774 --> 00:02:29.966
the APIs to carry out this task or a third party tool.

40
00:02:29.966 --> 00:02:32.274
So that's the access key overview.

41
00:02:32.274 --> 00:02:35.274
Let's look at passwords.

42
00:02:35.274 --> 00:02:39.024
Now your password management might mirror what you do on-prem,

43
00:02:39.024 --> 00:02:41.659
defining, for example, the minimum password length.

44
00:02:41.659 --> 00:02:44.351
Can the user set their own password?

45
00:02:44.351 --> 00:02:46.274
When does the password expire?

46
00:02:46.274 --> 00:02:48.274
Can they reuse their passwords?

47
00:02:48.274 --> 00:02:52.274
Is there a complexity rule that you want to follow?

48
00:02:52.274 --> 00:02:57.274
And if the password expires, what's the procedure to actually get a new password?

49
00:02:57.274 --> 00:03:01.124
Some of these tasks could be controlled through an IAM policy.

50
00:03:01.124 --> 00:03:05.988
Now AWS has some pretty handy tools to manage our passwords for our

51
00:03:05.988 --> 00:03:10.274
end users and we start off with the IAM console.

52
00:03:10.274 --> 00:03:12.893
We can get a lot of information from the IAM console,

53
00:03:12.893 --> 00:03:14.798
we can get information on the access keys,

54
00:03:14.798 --> 00:03:17.485
the timestamp, when the key was last used,

55
00:03:17.485 --> 00:03:20.432
where did they actually carry out that authentication,

56
00:03:20.432 --> 00:03:24.116
what region were they in, what service did they try to access?

57
00:03:24.116 --> 00:03:27.274
I could also rotate my keys using the IAM console as well.

58
00:03:27.274 --> 00:03:31.906
Now if I want more automation I can use AWS CloudTrail,

59
00:03:31.906 --> 00:03:35.941
CloudTrail tracking every API call for my account so I

60
00:03:35.941 --> 00:03:38.274
can get a great amount of detail.

61
00:03:38.274 --> 00:03:41.941
From CloudTrail I can view the credential report and I can

62
00:03:41.941 --> 00:03:44.560
identify the user credentials that are not in use,

63
00:03:44.560 --> 00:03:47.131
I can see last time the person logged in,

64
00:03:47.131 --> 00:03:50.607
when did they last change their password or access key.

65
00:03:50.607 --> 00:03:53.718
In addition I can use the access advisor,

66
00:03:53.718 --> 00:03:58.703
which is actually part of IAM and get the date and hour

67
00:03:58.703 --> 00:04:03.417
when an IAM role last accessed an AWS service through the

68
00:04:03.417 --> 00:04:05.417
permission granted by a policy.

69
00:04:05.417 --> 00:04:08.084
If I want to get even fancier,

70
00:04:08.084 --> 00:04:12.274
I can use SNS and actually get notified when changes occur.

71
00:04:12.274 --> 00:04:13.163
In fact,

72
00:04:13.163 --> 00:04:17.607
I could SNS and cloud watch together in conjunction with

73
00:04:17.607 --> 00:04:20.774
CloudTrail to actually have full automation that when there

74
00:04:20.774 --> 00:04:22.274
was a change I want to know about it.

75
00:04:22.274 --> 00:04:23.729
So credential best practices,

76
00:04:23.729 --> 00:04:28.092
if I'm going to look at the aspect of keys or passwords,

77
00:04:28.092 --> 00:04:31.941
when do I have to use one or the other?

78
00:04:31.941 --> 00:04:35.691
If I'm at the console, I need a password.

79
00:04:35.691 --> 00:04:47.000
If I am using an API or using APIs through the command line interface, I'm going to need access keys.

