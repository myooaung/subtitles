WEBVTT
1
00:00:00.000 --> 00:00:05.359
In this clip, we're going to take a look at the application load balancer.

2
00:00:05.359 --> 00:00:10.234
Now, this load balancer, as we know, is working up to layer 7,

3
00:00:10.234 --> 00:00:14.734
and it's going to be doing its job at a much lower

4
00:00:14.734 --> 00:00:16.984
level than the classic load balancer.

5
00:00:16.984 --> 00:00:20.359
The layer 7 load balancer, a little more sophisticated.

6
00:00:20.359 --> 00:00:25.309
It can inspect the packet, it has access to the headers,

7
00:00:25.309 --> 00:00:26.659
the HTTP/HTTPS headers,

8
00:00:26.659 --> 00:00:32.517
and therefore can do a much smarter job of routing the requests.

9
00:00:32.517 --> 00:00:38.306
But the big reason for this load balancer isn't really to

10
00:00:38.306 --> 00:00:41.859
compete with say a NetScaler for balancing traditional

11
00:00:41.859 --> 00:00:44.359
applications that work at layer 7.

12
00:00:44.359 --> 00:00:51.169
We do want to work at layer 7, but this is for containers,

13
00:00:51.169 --> 00:00:55.359
for Docker containers hosted by monstrous EC2 instances.

14
00:00:55.359 --> 00:00:59.780
Just like any other feature for Amazon, it's using compute and storage,

15
00:00:59.780 --> 00:01:03.464
so we have an EC2 instance running the Docker engine,

16
00:01:03.464 --> 00:01:06.780
on top of that engine, we can run containers.

17
00:01:06.780 --> 00:01:07.148
Many,

18
00:01:07.148 --> 00:01:10.248
many applications are starting to be rewritten and

19
00:01:10.248 --> 00:01:12.470
hosted in the container mindset.

20
00:01:12.470 --> 00:01:19.073
So, I can route the requests based on the target groups selected by the customer.

21
00:01:19.073 --> 00:01:23.788
Now if I've got an application that runs in a container,

22
00:01:23.788 --> 00:01:29.306
and if I can manage these routing requests based on the target groups,

23
00:01:29.306 --> 00:01:33.938
well if you're a customer that is managing a lot of

24
00:01:33.938 --> 00:01:39.359
applications by making them stateless, are you starting to use microservices,

25
00:01:39.359 --> 00:01:44.159
very small, distinct services, why don't I pack them into containers,

26
00:01:44.159 --> 00:01:48.559
and then giving the ability to route to those target groups

27
00:01:48.559 --> 00:01:50.418
that host those containerized applications.

28
00:01:50.418 --> 00:01:54.300
So this is really the main reason for this load balancer,

29
00:01:54.300 --> 00:01:59.065
for being able to host containers and microservices and dispense with the

30
00:01:59.065 --> 00:02:03.594
old stack of a virtual machine operating system and application moving

31
00:02:03.594 --> 00:02:06.888
down to an application hosted in a container,

32
00:02:06.888 --> 00:02:09.359
this is really a big deal.

33
00:02:09.359 --> 00:02:10.632
So in this class,

34
00:02:10.632 --> 00:02:14.132
we're giving you a bit of detail on this load balancer

35
00:02:14.132 --> 00:02:16.359
and giving you an idea of architecture.

36
00:02:16.359 --> 00:02:18.026
So when I'm routing these requests,

37
00:02:18.026 --> 00:02:21.359
what do we do with our old load balancer we dealt with?

38
00:02:21.359 --> 00:02:23.692
I'm routing to something that's healthy,

39
00:02:23.692 --> 00:02:28.359
traffic is sent to any healthy target in the target group itself,

40
00:02:28.359 --> 00:02:32.780
and so decisions are made on the content of the application traffic,

41
00:02:32.780 --> 00:02:35.359
again, we're at the lower packet level,

42
00:02:35.359 --> 00:02:38.026
and this is also defined as content-based routing.

43
00:02:38.026 --> 00:02:42.359
And so if I have access to the headers, then I can say,

44
00:02:42.359 --> 00:02:44.759
oh you want to go to that back-end service,

45
00:02:44.759 --> 00:02:46.359
I'm going to route you there.

46
00:02:46.359 --> 00:02:50.645
And as we're going to see, we can also scale.

47
00:02:50.645 --> 00:02:53.671
Now this content-based routing, supporting containerized applications,

48
00:02:53.671 --> 00:02:59.359
uses a couple of protocols that are pretty well known in the industry,

49
00:02:59.359 --> 00:03:02.109
specifically WebSockets and HTTP/2.

50
00:03:02.109 --> 00:03:07.609
Now this allows me to support path-based routing,

51
00:03:07.609 --> 00:03:12.137
so the listener in the application load balancer

52
00:03:12.137 --> 00:03:18.359
taking request now based on the URL, and it can be unsecured or secured.

53
00:03:18.359 --> 00:03:22.559
If I've got this routing, and as mentioned with these new protocols,

54
00:03:22.559 --> 00:03:30.359
I now can route requests to the multiple services running on a single instance.

55
00:03:30.359 --> 00:03:33.675
A couple of additional features of the load balancer.

56
00:03:33.675 --> 00:03:37.826
We have the ability of using access logs to capture detailed

57
00:03:37.826 --> 00:03:41.559
information about any requests or connections that are

58
00:03:41.559 --> 00:03:44.359
actually sent to the load balancer.

59
00:03:44.359 --> 00:03:46.968
Now this is not enabled by default, but once I enable this,

60
00:03:46.968 --> 00:03:50.897
then the logs are actually going to be sent to an S3 bucket that I specify.

61
00:03:50.897 --> 00:03:54.282
We can have up to 1, 000 targets per load balancer,

62
00:03:54.282 --> 00:03:57.359
so we have a lot of room for growth here.

63
00:03:57.359 --> 00:04:01.991
If I start running many hundreds of containers on a single,

64
00:04:01.991 --> 00:04:05.359
large instance, the load balancer can handle that.

65
00:04:05.359 --> 00:04:10.450
I can also have a little bit of protection so I don't delete my load balancer,

66
00:04:10.450 --> 00:04:12.359
so I can enable deletion protection.

67
00:04:12.359 --> 00:04:18.209
I can track the requests from the client to the target in my

68
00:04:18.209 --> 00:04:21.359
target groups via something called request tracing.

69
00:04:21.359 --> 00:04:24.859
I can also support IP version 6 for the internet-facing ALB,

70
00:04:24.859 --> 00:04:28.041
and you may be thinking, well this would be internal,

71
00:04:28.041 --> 00:04:28.359
right?

72
00:04:28.359 --> 00:04:32.663
Well what if I start hosting web applications in a VPC,

73
00:04:32.663 --> 00:04:35.794
and I want to use IP version 6,

74
00:04:35.794 --> 00:04:39.418
and I want public customers to access this application?

75
00:04:39.418 --> 00:04:43.124
So thinking down the road with Wired Brain Coffee,

76
00:04:43.124 --> 00:04:46.609
the developers are thinking of maybe rewriting the application,

77
00:04:46.609 --> 00:04:48.484
hosting it in a container,

78
00:04:48.484 --> 00:04:54.859
and using the application load balancer as the front end to the applications,

79
00:04:54.859 --> 00:04:59.359
removing the multiple instances running the web servers,

80
00:04:59.359 --> 00:05:01.073
they would now be in containers.

81
00:05:01.073 --> 00:05:03.645
And finally, if I have a classic load balancer,

82
00:05:03.645 --> 00:05:07.226
and I want to take that configuration and migrate it

83
00:05:07.226 --> 00:05:12.359
to the application load balancer, I can do that as well.

84
00:05:12.359 --> 00:05:16.148
Let's take a look at some of the distinct operations of the

85
00:05:16.148 --> 00:05:18.359
ALB that differentiate it from the classic.

86
00:05:18.359 --> 00:05:19.359
So we can define a rule that can be configured for each listener.

87
00:05:19.359 --> 00:05:25.148
Remember the listener is listening on the public or private IP

88
00:05:25.148 --> 00:05:29.771
address on the incoming ports to the load balancer,

89
00:05:29.771 --> 00:05:36.359
and I can define these rules that say this is the condition that has to match.

90
00:05:36.359 --> 00:05:40.359
If the condition matches, well I'll carry out the action,

91
00:05:40.359 --> 00:05:42.359
if the condition is satisfied.

92
00:05:42.359 --> 00:05:46.359
So for example, maybe it's a request for some images at a particular path,

93
00:05:46.359 --> 00:05:49.513
well it's going to be a lot quicker to say,

94
00:05:49.513 --> 00:05:53.359
well let's forward that request directly to that S3 bucket.

95
00:05:53.359 --> 00:05:57.412
It's almost like a conditional forwarder, like we see in DNS.

96
00:05:57.412 --> 00:06:01.502
The distinct difference though is that in this case the pattern has

97
00:06:01.502 --> 00:06:03.788
to match before the forwarding will take place,

98
00:06:03.788 --> 00:06:06.359
so something that we can do with the ALB.

99
00:06:06.359 --> 00:06:11.359
Now I also can take the application load balancer,

100
00:06:11.359 --> 00:06:16.359
and I can integrate this with the application firewall,

101
00:06:16.359 --> 00:06:17.859
and so this web application firewall,

102
00:06:17.859 --> 00:06:20.609
we're going to talk about a little later in this module,

103
00:06:20.609 --> 00:06:22.359
so we'll leave that point alone,

104
00:06:22.359 --> 00:06:26.692
but we can have some handy integration in front of the load balancer

105
00:06:26.692 --> 00:06:29.109
for additional protection for incoming traffic.

106
00:06:29.109 --> 00:06:34.359
The ALB is also integrated with certificates, kind of makes sense, right?

107
00:06:34.359 --> 00:06:35.748
I've got a load balancer,

108
00:06:35.748 --> 00:06:38.248
I might have certificates for authentication for my company,

109
00:06:38.248 --> 00:06:41.303
I can integrate this with the AWS certificate management,

110
00:06:41.303 --> 00:06:46.359
and it's a pretty simple process to bind the certificates to the ALB.

111
00:06:46.359 --> 00:06:50.409
I can also collect metrics on a per-port basis,

112
00:06:50.409 --> 00:06:56.065
which means the health checks are now defined at the target group level,

113
00:06:56.065 --> 00:06:59.594
so this now means that I can collect metrics based

114
00:06:59.594 --> 00:07:01.359
on the container or microservice,

115
00:07:01.359 --> 00:07:06.359
so there's many CloudWatch metrics that report at the target group level.

116
00:07:06.359 --> 00:07:13.177
So one thing I could then do is auto scale a target group of containers,

117
00:07:13.177 --> 00:07:18.581
so we're seeing the evolution of the auto scaling group with instances

118
00:07:18.581 --> 00:07:23.915
with the classic load balancer to auto scaling a target group of

119
00:07:23.915 --> 00:07:29.359
containers with the application load balancer.

120
00:07:29.359 --> 00:07:34.000
So that's a look at some of the details of the ALB, or application load balancer.

