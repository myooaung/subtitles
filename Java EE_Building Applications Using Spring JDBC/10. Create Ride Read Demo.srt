1
00:00:01,440 --> 00:00:04,300
To change our CreateRide method,

2
00:00:04,300 --> 00:00:07,750
I'm going to first start by making sure that my server has

3
00:00:07,750 --> 00:00:11,910
stopped so it doesn't try to auto deploy our code while

4
00:00:11,910 --> 00:00:13,390
we're making changes to it,

5
00:00:13,390 --> 00:00:18,040
and then I'm going to go ahead and go to my RideRepository.

6
00:00:18,040 --> 00:00:19,660
Inside of our RideRepositoryImpl,

7
00:00:19,660 --> 00:00:24,140
you may remember we have all of this commented out code.

8
00:00:24,140 --> 00:00:31,240
I'm going to go ahead and remove that commented out code and paste it into a

9
00:00:31,240 --> 00:00:35,860
text file to save it for later because we're going to use it later and I don't

10
00:00:35,860 --> 00:00:38,540
want to have to go through and retype all of that.

11
00:00:38,540 --> 00:00:42,580
So I'll paste that into this notes.txt that I have in my project,

12
00:00:42,580 --> 00:00:47,640
and it can just live out there while we make changes to our RideRepository.

13
00:00:47,640 --> 00:00:49,850
So now inside of our RideRepository,

14
00:00:49,850 --> 00:00:54,920
I'm actually going to also comment out this jdbcTemplate.update because

15
00:00:54,920 --> 00:01:00,340
we're going to compare what we had before to what we have now and also be

16
00:01:00,340 --> 00:01:04,240
able to utilize that same insert statement.

17
00:01:04,240 --> 00:01:08,260
We want to start off by creating a KeyHolder and the

18
00:01:08,260 --> 00:01:12,550
KeyHolder is what stores the key that gets retrieved from

19
00:01:12,550 --> 00:01:16,740
our database while we do an insert.

20
00:01:16,740 --> 00:01:21,690
And we want to use a Generated KeyHolder, and a Generated

21
00:01:21,690 --> 00:01:25,830
KeyHolder is because we have an autoincrementing field that's

22
00:01:25,830 --> 00:01:28,340
automatically generated for us.

23
00:01:28,340 --> 00:01:36,250
The next thing that we want to do is also use a udbcTemplate update again, and

24
00:01:36,250 --> 00:01:42,540
that will enable us to use the PreparedStatementCreator.

25
00:01:42,540 --> 00:01:50,840
So, we'll say new PreparedStatementCreator, and if I use Ctrl+spacebar to

26
00:01:50,840 --> 00:01:54,890
choose this type, it says it's an anonymous inner type and it will

27
00:01:54,890 --> 00:02:00,120
automatically add our method that it needs to be generated through that

28
00:02:00,120 --> 00:02:06,560
IntelliSense. Now I can come down inside of here and get rid of that TODO,

29
00:02:06,560 --> 00:02:16,950
and inside of here I want to say PreparedStatement and this is just a

30
00:02:16,950 --> 00:02:28,230
prepared statement from java.sql, we'll say ps = con.prepareStatement, and

31
00:02:28,230 --> 00:02:32,040
here's where we get to utilize that same string that we had up above here.

32
00:02:32,040 --> 00:02:37,440
That's why I didn't just delete this out of here. We'll copy that and we will

33
00:02:37,440 --> 00:02:41,670
paste that in here. And now we're going to do something a little bit

34
00:02:41,670 --> 00:02:46,700
different. Instead of us putting in the var args like we had before in here,

35
00:02:46,700 --> 00:02:57,330
we can actually say comma new string, and it's an array, and we'll pass in an

36
00:02:57,330 --> 00:03:05,610
array syntax of id, and this is referring to the column in the database that

37
00:03:05,610 --> 00:03:10,550
we're going to return as a generated key. So yours should look something like

38
00:03:10,550 --> 00:03:18,180
this. It should say new String [] {} with an id in there for that array

39
00:03:18,180 --> 00:03:19,640
syntax.

40
00:03:19,640 --> 00:03:26,820
Now we can populate that string and say ps.setString, we're just going to fill

41
00:03:26,820 --> 00:03:32,370
those values in our PreparedStatement. And we'll say at position 1 we want to

42
00:03:32,370 --> 00:03:42,180
do ride.getName and we'll do ps.setInt, and say at position 2 we want to do

43
00:03:42,180 --> 00:03:50,010
ride.getDuration, and then make sure you change that return null to say return

44
00:03:50,010 --> 00:03:53,440
ps for our PreparedStatement.

45
00:03:53,440 --> 00:03:57,390
So now that we have our PreparedStatement set up, again we added

46
00:03:57,390 --> 00:04:02,520
that array syntax on to the end of it, we want to go ahead and now

47
00:04:02,520 --> 00:04:14,530
say , keyHolder on the end of that anonymous inner class, and this

48
00:04:14,530 --> 00:04:21,730
is what tells our insert statement to store that generated ID back

49
00:04:21,730 --> 00:04:23,640
in this keyHolder.

50
00:04:23,640 --> 00:04:35,730
Now, we can go down here and say Number id = keyHolder.getKey, and

51
00:04:35,730 --> 00:04:38,600
it will store that key into a number for us.

52
00:04:38,600 --> 00:04:42,640
And we can replace this return statement with a

53
00:04:42,640 --> 00:04:44,090
method that we're going to create.

54
00:04:44,090 --> 00:04:52,740
It currently does not exist. We'll say getRide id.intValue and say that

55
00:04:52,740 --> 00:04:57,040
now we can go below this method and create a new method,

56
00:04:57,040 --> 00:05:06,770
say public Ride getRide, and it's going to take an Integer id, and

57
00:05:06,770 --> 00:05:16,930
we'll just say Ride ride = jdbcTemplate.queryForObject.

58
00:05:16,930 --> 00:05:20,010
And this is a new query statement that we haven't

59
00:05:20,010 --> 00:05:23,240
used out of JdbcTemplate just yet.

60
00:05:23,240 --> 00:05:35,960
And inside of here we can do a select * from ride where id = ?, and

61
00:05:35,960 --> 00:05:40,640
the syntax is a little bit different here. We're going to use that

62
00:05:40,640 --> 00:05:42,850
externalized RowMapper that we created.

63
00:05:42,850 --> 00:05:53,040
So we'll say new Ride RowMapper and then we'll just pass in our ID as a

64
00:05:53,040 --> 00:05:58,240
var arg and then return our ride at the end of it.

65
00:05:58,240 --> 00:06:04,480
So we'll say return ride, and save that.

66
00:06:04,480 --> 00:06:11,200
Now all the pieces are in place with that PreparedStatementCreator and the

67
00:06:11,200 --> 00:06:16,620
KeyHolder to now query our database and get the object that we just created and

68
00:06:16,620 --> 00:06:28,520
return that back to our UI. So let's exit full screen, start up our server. Now

69
00:06:28,520 --> 00:06:33,620
that that's running, we can go into our RideControllerTest and I'm going to

70
00:06:33,620 --> 00:06:38,910
change this to another name just so we can see that it did in fact execute

71
00:06:38,910 --> 00:06:44,280
against our database and our ride is going to return our Ride object down below

72
00:06:44,280 --> 00:06:54,190
here, we can go ahead and right‑click on testCreateRide and say Run As, Unit

73
00:06:54,190 --> 00:07:02,130
Test, and once this runs, we can see that it created a ride and our unit test

74
00:07:02,130 --> 00:07:09,200
was of course successful, but now we can come up and test our GetRides and see

75
00:07:09,200 --> 00:07:11,340
that it did in fact insert that into the database.

76
00:07:11,340 --> 00:07:16,520
So let's right‑click on GetRides and say Run As, JUnit Test,

77
00:07:16,520 --> 00:07:19,390
and you can see that the fourth one that had entered in down

78
00:07:19,390 --> 00:07:23,140
there is the Sagebrush Trail.

79
00:07:23,140 --> 00:07:28,720
So now we have changed our RideRepository to utilize that

80
00:07:28,720 --> 00:07:34,370
PreparedStatementCreator to get that key back. Again, I didn't show this in

81
00:07:34,370 --> 00:07:38,920
the create method because it's a little bit more complex and you really

82
00:07:38,920 --> 00:07:42,560
only care about it if you want to retrieve that object that you just

83
00:07:42,560 --> 00:07:47,900
created out of the database with its ID, and this is the only way that you

84
00:07:47,900 --> 00:07:58,000
can grab that ID using this approach. Let's look at an alternative approach that you may find a little bit simpler

