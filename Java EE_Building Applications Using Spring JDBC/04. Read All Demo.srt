1
00:00:02,940 --> 00:00:08,560
As you may recall from our first demo, in our RestController we had a

2
00:00:08,560 --> 00:00:13,440
method to retrieve all of the rides from our system.

3
00:00:13,440 --> 00:00:17,780
So we had this testGetRides that would eventually get a

4
00:00:17,780 --> 00:00:21,940
list of rides returned from that response.

5
00:00:21,940 --> 00:00:25,520
It went end to end in our application clear to our

6
00:00:25,520 --> 00:00:30,100
RideRepositoryImpl that if you scroll to the bottom of this,

7
00:00:30,100 --> 00:00:37,040
you'll see that getRides method that has our hard coded array list in there.

8
00:00:37,040 --> 00:00:44,520
Before we modify this, let's open up our Ride object in our model and add one

9
00:00:44,520 --> 00:00:48,640
member variable and a getter and setter for it in here.

10
00:00:48,640 --> 00:00:56,040
Let's add a private Integer id in here, and if we scroll down,

11
00:00:56,040 --> 00:01:00,760
give ourselves some whitespace, we can right‑click and say Source,

12
00:01:00,760 --> 00:01:04,620
Generate Getters and Setters, and create the getter

13
00:01:04,620 --> 00:01:07,240
and setter for that id field.

14
00:01:07,240 --> 00:01:09,040
We can save this.

15
00:01:09,040 --> 00:01:13,490
Now let's go back to our RideRepositoryImpl and we're going to

16
00:01:13,490 --> 00:01:16,740
eliminate that hard coded information in here.

17
00:01:16,740 --> 00:01:25,590
And I'm just going to eliminate everything but the return statement, and

18
00:01:25,590 --> 00:01:34,290
we'll say List an import and java util list of type Ride, and let's name

19
00:01:34,290 --> 00:01:39,370
this rides that will match our return statement that we left there, and

20
00:01:39,370 --> 00:01:45,940
we can say jdbcTemplate.query.

21
00:01:45,940 --> 00:01:52,780
Now we want to add a basic query here where we can just put some standard

22
00:01:52,780 --> 00:02:00,330
SQL where we can say select * from ride. And that will actually suffice

23
00:02:00,330 --> 00:02:03,640
for what we want to do with this select all.

24
00:02:03,640 --> 00:02:08,310
Now, we're going to bind that using that anonymous inner class

25
00:02:08,310 --> 00:02:14,610
that we talked about by saying new RowMapper, Ctrl+spacebar to

26
00:02:14,610 --> 00:02:19,640
import that, and give it a type of Ride.

27
00:02:19,640 --> 00:02:23,520
And if you haven't used the syntax of anonymous inner class before,

28
00:02:23,520 --> 00:02:26,740
it looks a little confusing at first, but it's not bad.

29
00:02:26,740 --> 00:02:30,760
Start with open/close parenthesis and then open/close

30
00:02:30,760 --> 00:02:34,740
curly brace and close off that line.

31
00:02:34,740 --> 00:02:37,200
Now, you will get an error at this point because it's telling

32
00:02:37,200 --> 00:02:39,810
you that we have to add unimplemented methods,

33
00:02:39,810 --> 00:02:43,970
so I'm going to go in between those curly braces and just give myself some

34
00:02:43,970 --> 00:02:47,440
whitespace to work with. So I just took that curly brace,

35
00:02:47,440 --> 00:02:48,490
closing parenthesis,

36
00:02:48,490 --> 00:02:52,950
semicolon down to a new line, and then I can hit Ctrl+spacebar

37
00:02:52,950 --> 00:02:58,970
and it will ask for the mapRow declaration. So I can go ahead

38
00:02:58,970 --> 00:03:01,930
and select that one, and you'll notice we've gotten rid of all

39
00:03:01,930 --> 00:03:03,270
of our errors at this point.

40
00:03:03,270 --> 00:03:05,000
If you are still seeing errors,

41
00:03:05,000 --> 00:03:11,860
you've possibly missed a step. From here, I can now implement this mapRow

42
00:03:11,860 --> 00:03:14,880
method, and this is just a template method pattern.

43
00:03:14,880 --> 00:03:17,040
If you're not familiar with this approach,

44
00:03:17,040 --> 00:03:22,340
I encourage you to go out and look at what a template method pattern is in one

45
00:03:22,340 --> 00:03:28,080
of the design patterns courses out here on Pluralsight. But suffice it to say,

46
00:03:28,080 --> 00:03:32,700
we can go ahead and now create our ride object,

47
00:03:32,700 --> 00:03:38,140
say Ride ride = new Ride,

48
00:03:38,140 --> 00:03:43,560
and we can begin filling this Ride object up with the result set that was

49
00:03:43,560 --> 00:03:52,150
returned from our query. So we can say ride.setId and use an rs from the

50
00:03:52,150 --> 00:03:58,900
result set .getInt and we can just give it a column name,

51
00:03:58,900 --> 00:04:04,050
which this one is going to be id. We'll do the same thing for the other

52
00:04:04,050 --> 00:04:11,120
member variables here. We'll say ride.setName, and we want to use an

53
00:04:11,120 --> 00:04:19,030
rs.getString for the name, and this column is named name, and then we'll

54
00:04:19,030 --> 00:04:29,820
do a ride.setDuration, and we'll do an rs.getInt again on this and pass

55
00:04:29,820 --> 00:04:36,570
in duration. And then make sure you don't miss this last step of changing

56
00:04:36,570 --> 00:04:37,630
that return null,

57
00:04:37,630 --> 00:04:44,130
which it defaults to to return ride. This is all we had to do

58
00:04:44,130 --> 00:04:47,580
to change this to now use our database.

59
00:04:47,580 --> 00:04:49,520
A couple things are going on here.

60
00:04:49,520 --> 00:04:51,800
Since this is a template method pattern,

61
00:04:51,800 --> 00:04:56,490
all we have to define is our mapRow method,

62
00:04:56,490 --> 00:05:03,040
which takes these items from our result set and enables us to store

63
00:05:03,040 --> 00:05:08,760
them in a Ride object. Behind the scenes, it adds this to an array list

64
00:05:08,760 --> 00:05:14,550
and returns that out of our query to our list of rides, and then we can

65
00:05:14,550 --> 00:05:22,020
return our rides array list at the bottom of this method. Let's save

66
00:05:22,020 --> 00:05:26,970
this and get out of full screen and start our server back up if yours

67
00:05:26,970 --> 00:05:29,640
is stopped.

68
00:05:29,640 --> 00:05:31,300
Once this starts up,

69
00:05:31,300 --> 00:05:37,750
we can go ahead and go back to our RestControllerTest and go to our

70
00:05:37,750 --> 00:05:48,210
testGetRides, right‑click, and say Run As, JUnit Test, and this should return

71
00:05:48,210 --> 00:05:54,730
all of our lists, so our test was green, and we can see all of our rides

72
00:05:54,730 --> 00:05:58,290
returned from that list of our Bobsled Trail Ride,

73
00:05:58,290 --> 00:06:00,530
our Willow Trail Ride, and our Round Valley Trail Ride.

74
00:06:00,530 --> 00:06:03,940
Those were the three rides that we have stored in our database.

75
00:06:03,940 --> 00:06:06,070
So again, really simple.

76
00:06:06,070 --> 00:06:10,740
All we had to do was go through and we added that id to our Ride

77
00:06:10,740 --> 00:06:15,990
object, which was just a basic integer ID, and that's so we could

78
00:06:15,990 --> 00:06:21,210
return it to our UI, and then changed our getRides from being hard

79
00:06:21,210 --> 00:06:32,000
coded to use that query and RowMapper to map that object and return that list of rights.

