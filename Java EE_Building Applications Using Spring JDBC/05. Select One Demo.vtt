WEBVTT
1
00:00:02.540 --> 00:00:07.770
Our previous demo ended up with us creating this getRide method,

2
00:00:07.770 --> 00:00:11.540
but you'll notice that we haven't implemented the @Override

3
00:00:11.540 --> 00:00:15.640
annotation and exposed that through our other tiers.

4
00:00:15.640 --> 00:00:23.070
So let's start off by changing the getRide method by adding in @Override, and

5
00:00:23.070 --> 00:00:27.440
this will tell us that we want to expose this to other tiers.

6
00:00:27.440 --> 00:00:29.940
Now we're going to open up our interface,

7
00:00:29.940 --> 00:00:38.300
go to the RideRepository, and add just the signature here of Ride getRide.

8
00:00:38.300 --> 00:00:45.140
We're going to use an integer for the lookup, and we'll save this. And

9
00:00:45.140 --> 00:00:50.240
now we need to expose this through our service tier.

10
00:00:50.240 --> 00:00:53.160
The service tier, we're going to do the same thing.

11
00:00:53.160 --> 00:01:00.500
We want to expose a method called public Ride getRide

12
00:01:00.500 --> 00:01:06.490
that takes an integer and calls that method that we just

13
00:01:06.490 --> 00:01:09.440
created in our RideRepository.

14
00:01:09.440 --> 00:01:15.840
So we're going to say RideRepository.getRide and pass in that ID.

15
00:01:15.840 --> 00:01:21.990
And likewise, we'll want to go into our RideService interface and

16
00:01:21.990 --> 00:01:26.040
expose that through our interface as well.

17
00:01:26.040 --> 00:01:33.440
So we'll say Ride getRide and make that take the integer as well.

18
00:01:33.440 --> 00:01:38.380
Now that we're at this point, our controller can now expose this to

19
00:01:38.380 --> 00:01:45.780
our test or our UI tier, so we can open up our RideController, and

20
00:01:45.780 --> 00:01:51.210
I'm going to go ahead and paste in some code here that I don't go

21
00:01:51.210 --> 00:01:52.820
through and type this all out.

22
00:01:52.820 --> 00:01:54.810
But I'll walk through everything it does.

23
00:01:54.810 --> 00:01:59.530
So I'm going to grab this code that I've already written and go into

24
00:01:59.530 --> 00:02:05.940
our RideController and paste this at the bottom.

25
00:02:05.940 --> 00:02:08.060
Now, this one's a little bit different than what we

26
00:02:08.060 --> 00:02:12.230
have done in other controller methods.

27
00:02:12.230 --> 00:02:16.210
We're going to actually look for a path variable.

28
00:02:16.210 --> 00:02:23.310
So we're going to say RequestMapping value ride/{id}, and this

29
00:02:23.310 --> 00:02:25.690
tells it it's a variable that we're going to grab.

30
00:02:25.690 --> 00:02:29.330
And you can see down below here in our method signature,

31
00:02:29.330 --> 00:02:33.950
we say @PathVariable value id, and it will automatically

32
00:02:33.950 --> 00:02:35.620
convert it into an integer,

33
00:02:35.620 --> 00:02:41.540
passing that into the rideService.getRide that we just created.

34
00:02:41.540 --> 00:02:46.240
Let's go ahead and now add that to our unit test.

35
00:02:46.240 --> 00:02:49.940
So we can open up our RideControllerTest,

36
00:02:49.940 --> 00:02:58.150
RestController, scroll to the bottom, and we can create a method to get

37
00:02:58.150 --> 00:03:01.250
that individual ride. And just like the controller,

38
00:03:01.250 --> 00:03:04.000
I have some code that I've already written, but we'll walk through

39
00:03:04.000 --> 00:03:12.370
what it does. We'll grab this test and paste this in at the

40
00:03:12.370 --> 00:03:15.840
bottom, and this is a little bit simpler.

41
00:03:15.840 --> 00:03:21.270
You can see here we've said testGetRide and we've created an instance of the

42
00:03:21.270 --> 00:03:25.300
RestTemplate, but we can now just grab this for one object.

43
00:03:25.300 --> 00:03:31.230
So restTemplate.getForObject enables us to call this URL and you can see

44
00:03:31.230 --> 00:03:35.340
I'm putting on a parameter at the end of that URL of 1.

45
00:03:35.340 --> 00:03:38.300
So I want to get that first object back, and that's

46
00:03:38.300 --> 00:03:42.940
referring to the ID in which is stored in the database, and

47
00:03:42.940 --> 00:03:45.500
it will return that to a Ride object.

48
00:03:45.500 --> 00:03:49.330
I don't have to use a parameterized list or anything like that, it

49
00:03:49.330 --> 00:03:53.610
will just grab that individual object back and we can then run the

50
00:03:53.610 --> 00:03:56.900
test on it to see what is being returned.

51
00:03:56.900 --> 00:04:00.850
So we'll print out the name and it should be for this example in my database,

52
00:04:00.850 --> 00:04:03.340
the Bobsled Trail.

53
00:04:03.340 --> 00:04:12.240
So let's go ahead and save this, start up our server.

54
00:04:12.240 --> 00:04:19.960
Once that's up and running, we can go into our test, rightâ€‘click, Run As, Unit

55
00:04:19.960 --> 00:04:28.350
Test, and we should have a green bar which we've got and our console already

56
00:04:28.350 --> 00:04:33.240
exposed that we had Ride name: Bobsled Trail Ride.

57
00:04:33.240 --> 00:04:34.420
So it's pretty simple.

58
00:04:34.420 --> 00:04:39.640
All we did was go through our RideRepository and expose that

59
00:04:39.640 --> 00:04:43.110
through our interface and add that @Override.

60
00:04:43.110 --> 00:04:45.600
We did the same thing in our service tier.

61
00:04:45.600 --> 00:04:50.670
We exposed that through the interface, as well as made it

62
00:04:50.670 --> 00:04:55.040
available through our RideServiceImpl.

63
00:04:55.040 --> 00:04:59.940
And then in our RideController, we created that parameterized

64
00:04:59.940 --> 00:05:04.910
return where it would take a URL parameter,

65
00:05:04.910 --> 00:05:07.760
assign that to a path variable, call rideService

66
00:05:07.760 --> 00:05:09.620
and return that object back out.

67
00:05:09.620 --> 00:05:13.650
And now we're to a point that inside of our tests, since

68
00:05:13.650 --> 00:05:16.240
we can grab this single object back,

69
00:05:16.240 --> 00:05:18.970
we can now use that for our updates. Rather than

70
00:05:18.970 --> 00:05:21.230
trying to just falsify the information,

71
00:05:21.230 --> 00:05:31.000
I opted to grab that object back and manipulate it. Let's look at what we're going to do for our update method now

