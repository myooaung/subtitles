1
1

00:00:01,350  -->  00:00:02,991
<v Jonas>Welcome back to the second part</v>
2

2

00:00:02,991  -->  00:00:05,229
of the SASS intro lectures.
3

3

00:00:05,229  -->  00:00:08,533
This time I'm gonna show you how to use SASS mixins,
4

4

00:00:08,533  -->  00:00:11,450
extends, and functions in practice.
5

5

00:00:12,907  -->  00:00:15,216
Let's start with mixins.
6

6

00:00:15,216  -->  00:00:17,244
So what is a mixin?
7

7

00:00:17,244  -->  00:00:18,765
It's actually very simple.
8

8

00:00:18,765  -->  00:00:22,003
A mixin is just a reusable piece of code
9

9

00:00:22,003  -->  00:00:24,253
that we write into a mixin.
10

10

00:00:25,295  -->  00:00:28,396
And then whenever we use that, that mixin,
11

11

00:00:28,396  -->  00:00:30,725
that code is then put in the place
12

12

00:00:30,725  -->  00:00:33,716
where we used or where we called that mixin.
13

13

00:00:33,716  -->  00:00:36,430
So you can imagine this like a huge variable
14

14

00:00:36,430  -->  00:00:38,820
with multiple lines of code.
15

15

00:00:38,820  -->  00:00:40,163
This is how it works.
16

16

00:00:40,163  -->  00:00:43,063
Imagine that we wanted to use the clearfix
17

17

00:00:43,063  -->  00:00:44,469
not only on the navigation
18

18

00:00:44,469  -->  00:00:46,831
but on multiple places throughout the page.
19

19

00:00:46,831  -->  00:00:49,360
So imagine this would be a huge webpage
20

20

00:00:49,360  -->  00:00:52,865
and we would have to use the clearfix all over the place.
21

21

00:00:52,865  -->  00:00:54,195
It would not be really practical
22

22

00:00:54,195  -->  00:00:56,254
to add this piece of code here
23

23

00:00:56,254  -->  00:00:58,952
inside all of these elements, right?
24

24

00:00:58,952  -->  00:01:01,615
So instead, we can just make this a mixin
25

25

00:01:01,615  -->  00:01:04,923
and then just include the mixin here in this place.
26

26

00:01:04,923  -->  00:01:07,522
Let me show you how that works.
27

27

00:01:07,522  -->  00:01:09,944
I'm gonna put the mixin in here.
28

28

00:01:09,944  -->  00:01:13,611
Then I have to write @mixin, give it a name,
29

29

00:01:15,986  -->  00:01:17,819
clearfix in this case,
30

30

00:01:19,567  -->  00:01:23,261
and then I just need to put the code here.
31

31

00:01:23,261  -->  00:01:25,344
Let me get this one here,
32

32

00:01:26,180  -->  00:01:28,447
put it there, and all right.
33

33

00:01:28,447  -->  00:01:30,765
So basically we now have stored
34

34

00:01:30,765  -->  00:01:32,398
this entire piece of code here
35

35

00:01:32,398  -->  00:01:33,992
inside of this mixin,
36

36

00:01:33,992  -->  00:01:37,341
which you can think of a variable called clearfix.
37

37

00:01:37,341  -->  00:01:40,035
So it's a mixin called clearfix.
38

38

00:01:40,035  -->  00:01:42,829
Now how do we actually use this mixin?
39

39

00:01:42,829  -->  00:01:43,665
It's very simple.
40

40

00:01:43,665  -->  00:01:47,082
All we have to do is to now say @include,
41

41

00:01:48,417  -->  00:01:51,905
@include, and then the name of the mixin, of course.
42

42

00:01:51,905  -->  00:01:53,757
Clearfix, and that's it.
43

43

00:01:53,757  -->  00:01:56,704
Now it should be back and yeah, here it is.
44

44

00:01:56,704  -->  00:01:59,199
We can now go ahead and use this clearfix here
45

45

00:01:59,199  -->  00:02:01,400
wherever we want it on our page,
46

46

00:02:01,400  -->  00:02:03,884
if we had a bigger project.
47

47

00:02:03,884  -->  00:02:06,409
Again let's take a look at the compiled CSS,
48

48

00:02:06,409  -->  00:02:08,159
and yeah, here it is.
49

49

00:02:09,089  -->  00:02:12,089
So indeed, now here is the clearfix.
50

50

00:02:13,283  -->  00:02:14,965
So these are mixins.
51

51

00:02:14,965  -->  00:02:18,942
I can actually show you another cool example of mixins
52

52

00:02:18,942  -->  00:02:22,302
because mixins are actually even more powerful than that.
53

53

00:02:22,302  -->  00:02:25,853
Take a look at this piece of code here.
54

54

00:02:25,853  -->  00:02:27,684
For this link here, we have text-decoration,
55

55

00:02:27,684  -->  00:02:30,017
text-transform, and a color.
56

56

00:02:30,902  -->  00:02:34,253
But down here when we define these buttons,
57

57

00:02:34,253  -->  00:02:36,678
we have the exact same thing here as well.
58

58

00:02:36,678  -->  00:02:39,015
We have text-decoration to none,
59

59

00:02:39,015  -->  00:02:41,787
text-transform to uppercase, and then a color.
60

60

00:02:41,787  -->  00:02:43,377
Now, the color is actually different.
61

61

00:02:43,377  -->  00:02:45,598
But let's think about that later.
62

62

00:02:45,598  -->  00:02:48,545
What we can do is to simply put these three lines of code
63

63

00:02:48,545  -->  00:02:51,007
into a mixin and then call this mixin
64

64

00:02:51,007  -->  00:02:53,367
in each of these declaration blocks, right?
65

65

00:02:53,367  -->  00:02:54,937
So instead of repeating the code,
66

66

00:02:54,937  -->  00:02:56,883
we have it in one central place.
67

67

00:02:56,883  -->  00:02:59,108
This is called the DRY principle,
68

68

00:02:59,108  -->  00:03:01,447
which means Don't Repeat Yourself.
69

69

00:03:01,447  -->  00:03:03,896
This again comes back to all this talk that we had
70

70

00:03:03,896  -->  00:03:08,370
about maintainable and reusable code and all this stuff.
71

71

00:03:08,370  -->  00:03:10,620
Let's now do that actually.
72

72

00:03:12,364  -->  00:03:13,531
Put this here.
73

73

00:03:17,877  -->  00:03:18,710
All right.
74

74

00:03:19,778  -->  00:03:23,695
This piece of code we gonna put in a new mixin.
75

75

00:03:27,176  -->  00:03:29,676
Let's call it style-link-text.
76

76

00:03:37,473  -->  00:03:41,026
All right, so mixin style-link-text.
77

77

00:03:41,026  -->  00:03:43,287
We can now go ahead and then use it.
78

78

00:03:43,287  -->  00:03:45,870
We actually just copy the name.
79

79

00:03:46,764  -->  00:03:47,695
Because now you see the buttons,
80

80

00:03:47,695  -->  00:03:50,224
they are not styled as they were before.
81

81

00:03:50,224  -->  00:03:54,509
So let's go back to where we removed this code,
82

82

00:03:54,509  -->  00:03:55,635
was here.
83

83

00:03:55,635  -->  00:03:58,552
Let's say @include style-link-text.
84

84

00:04:00,716  -->  00:04:02,737
And here we go.
85

85

00:04:02,737  -->  00:04:05,320
We can now do the same in here.
86

86

00:04:08,748  -->  00:04:11,248
So, @include, style-link-text.
87

87

00:04:12,609  -->  00:04:14,211
Now what happened here?
88

88

00:04:14,211  -->  00:04:16,251
This text just turned white, of course,
89

89

00:04:16,251  -->  00:04:18,847
because here we said that the color
90

90

00:04:18,847  -->  00:04:21,704
should be the light text color.
91

91

00:04:21,704  -->  00:04:23,267
So what can we do here?
92

92

00:04:23,267  -->  00:04:25,564
This is perfect for me to show you something
93

93

00:04:25,564  -->  00:04:27,023
which we can do with mixins,
94

94

00:04:27,023  -->  00:04:31,802
which is basically to pass it an argument, like this.
95

95

00:04:31,802  -->  00:04:33,137
So what is an argument?
96

96

00:04:33,137  -->  00:04:36,470
An argument is something that we can pass into the mixin,
97

97

00:04:36,470  -->  00:04:39,889
and the mixin will then use this argument here,
98

98

00:04:39,889  -->  00:04:41,565
like as a variable.
99

99

00:04:41,565  -->  00:04:44,214
So what we do here is to define this col variable,
100

100

00:04:44,214  -->  00:04:47,359
which stands for color, actually call it color.
101

101

00:04:47,359  -->  00:04:49,942
And then in here, we put color.
102

102

00:04:51,084  -->  00:04:52,512
And now when we call this mixin,
103

103

00:04:52,512  -->  00:04:54,436
when we include the mixin,
104

104

00:04:54,436  -->  00:04:57,967
we will pass into this mixin the color that we want,
105

105

00:04:57,967  -->  00:04:59,579
which will then be called color.
106

106

00:04:59,579  -->  00:05:01,915
And this color then becomes this color.
107

107

00:05:01,915  -->  00:05:05,054
So this one and this one, they are then the same.
108

108

00:05:05,054  -->  00:05:08,054
But let me show you with an example.
109

109

00:05:09,820  -->  00:05:13,987
In here, we want to use the variable called text-color-dark.
110

110

00:05:19,256  -->  00:05:22,589
I think it's actually called color-text.
111

111

00:05:24,562  -->  00:05:25,878
Now, that's still not working.
112

112

00:05:25,878  -->  00:05:29,066
Let's take a look here at this error sign that we have here.
113

113

00:05:29,066  -->  00:05:29,928
Oh, it's gone.
114

114

00:05:29,928  -->  00:05:30,993
Why is that?
115

115

00:05:30,993  -->  00:05:34,326
So, color-text-dark and color-text-dark.
116

116

00:05:35,496  -->  00:05:37,576
Yeah, so it should actually work.
117

117

00:05:37,576  -->  00:05:40,326
So let's check again what's going on down here.
118

118

00:05:40,326  -->  00:05:42,439
But it should actually be working.
119

119

00:05:42,439  -->  00:05:45,325
Maybe I cannot call this col here.
120

120

00:05:45,325  -->  00:05:48,708
Maybe I cannot call it color, just call it col.
121

121

00:05:48,708  -->  00:05:51,015
That's also not changing anything.
122

122

00:05:51,015  -->  00:05:52,772
No, I think I found the error.
123

123

00:05:52,772  -->  00:05:56,671
And it's not working because down here,
124

124

00:05:56,671  -->  00:05:58,476
we also used the mixin
125

125

00:05:58,476  -->  00:06:01,393
but we didn't specify the argument.
126

126

00:06:02,553  -->  00:06:05,636
So in here, we want color-text-light.
127

127

00:06:09,517  -->  00:06:11,684
Let's see if it works now.
128

128

00:06:13,243  -->  00:06:15,243
Let's reload this thing.
129

129

00:06:16,511  -->  00:06:18,911
Okay, first save it.
130

130

00:06:18,911  -->  00:06:20,244
And then reload.
131

131

00:06:23,363  -->  00:06:27,032
All right, so finally now we got it to working.
132

132

00:06:27,032  -->  00:06:30,949
Now let me explain you again what happens here.
133

133

00:06:32,159  -->  00:06:35,665
In here, we include the mixin with a variable
134

134

00:06:35,665  -->  00:06:37,625
which is color-text-dark.
135

135

00:06:37,625  -->  00:06:40,864
So this is an argument for the mixin.
136

136

00:06:40,864  -->  00:06:43,781
This will get passed into the mixin
137

137

00:06:44,732  -->  00:06:47,606
and will be called col in here, inside,
138

138

00:06:47,606  -->  00:06:49,991
internally in this mixin.
139

139

00:06:49,991  -->  00:06:52,650
The thing, this variable, this text
140

140

00:06:52,650  -->  00:06:55,879
or whatever we pass into here, is now called col
141

141

00:06:55,879  -->  00:06:58,338
here inside in this mixin.
142

142

00:06:58,338  -->  00:07:00,710
So here we call it col.
143

143

00:07:00,710  -->  00:07:04,403
So what we passed inside of this style-link-text mixin
144

144

00:07:04,403  -->  00:07:08,021
is then called col, and we can use it in here.
145

145

00:07:08,021  -->  00:07:11,533
So in the first example, it was called color-text-dark.
146

146

00:07:11,533  -->  00:07:14,120
So that's was passed in here
147

147

00:07:14,120  -->  00:07:18,680
and is then replaced by color-text-dark, which is this.
148

148

00:07:18,680  -->  00:07:21,476
And down here, where is it?
149

149

00:07:21,476  -->  00:07:23,910
And down here we pass color-text-light
150

150

00:07:23,910  -->  00:07:27,221
into the style-link-text mixin.
151

151

00:07:27,221  -->  00:07:30,241
So this time, col will be that.
152

152

00:07:30,241  -->  00:07:33,503
So it will be replaced, then, by color-text-light,
153

153

00:07:33,503  -->  00:07:35,141
which is eee.
154

154

00:07:35,141  -->  00:07:36,399
So you've got that?
155

155

00:07:36,399  -->  00:07:39,019
Basically this allows us to pass some information
156

156

00:07:39,019  -->  00:07:40,218
into this mixin
157

157

00:07:40,218  -->  00:07:42,795
and then the mixin can use that information.
158

158

00:07:42,795  -->  00:07:46,407
So these are the two use cases for mixins.
159

159

00:07:46,407  -->  00:07:48,653
We have normal one without any arguments,
160

160

00:07:48,653  -->  00:07:51,270
where it is just this code,
161

161

00:07:51,270  -->  00:07:54,302
which is then pasted wherever we included the mixin.
162

162

00:07:54,302  -->  00:07:57,769
And in this case, we get to pass an argument as well.
163

163

00:07:57,769  -->  00:08:00,149
So this is actually a bit similar to functions,
164

164

00:08:00,149  -->  00:08:02,705
which work in the same way.
165

165

00:08:02,705  -->  00:08:03,997
Now, I already showed you functions
166

166

00:08:03,997  -->  00:08:06,536
actually before, down here.
167

167

00:08:06,536  -->  00:08:08,786
Let me get some more space.
168

168

00:08:09,927  -->  00:08:12,019
We used functions before,
169

169

00:08:12,019  -->  00:08:15,104
which is this one, darken and lighten.
170

170

00:08:15,104  -->  00:08:16,829
This actually works in the same way.
171

171

00:08:16,829  -->  00:08:19,495
We pass in the arguments which are color-secondary
172

172

00:08:19,495  -->  00:08:21,207
and 15% in this case,
173

173

00:08:21,207  -->  00:08:24,063
and then the function does something with this data,
174

174

00:08:24,063  -->  00:08:25,984
with this information we passed in.
175

175

00:08:25,984  -->  00:08:28,435
And then it puts the data in here,
176

176

00:08:28,435  -->  00:08:30,651
it replaces what we wrote here
177

177

00:08:30,651  -->  00:08:32,820
with the result of the function.
178

178

00:08:32,820  -->  00:08:34,697
Let's see, for example, in the button main,
179

179

00:08:34,697  -->  00:08:35,864
for the hover.
180

180

00:08:36,746  -->  00:08:39,323
So button main, for hover.
181

181

00:08:39,323  -->  00:08:43,490
The result of that function is this color, ea5717.
182

182

00:08:45,666  -->  00:08:49,422
Again, a function takes arguments, just like a mixin.
183

183

00:08:49,422  -->  00:08:51,739
Then it does something with these arguments
184

184

00:08:51,739  -->  00:08:53,416
and returns them.
185

185

00:08:53,416  -->  00:08:55,392
If you're familiar with programming in general,
186

186

00:08:55,392  -->  00:08:57,018
like JavaScript or something,
187

187

00:08:57,018  -->  00:08:59,088
then it works the exact same way.
188

188

00:08:59,088  -->  00:09:01,074
Now, we are not restricted to using
189

189

00:09:01,074  -->  00:09:03,248
the built-in SASS functions.
190

190

00:09:03,248  -->  00:09:06,248
We can also write our own functions.
191

191

00:09:07,334  -->  00:09:10,305
I actually personally don't find them so useful.
192

192

00:09:10,305  -->  00:09:13,761
But of course I'm gonna show you how they work.
193

193

00:09:13,761  -->  00:09:16,499
Now imagine we just want a very simple function
194

194

00:09:16,499  -->  00:09:18,506
which simply divides the two arguments
195

195

00:09:18,506  -->  00:09:20,568
that we passed into the function.
196

196

00:09:20,568  -->  00:09:23,164
Now, we wouldn't really need a function for this
197

197

00:09:23,164  -->  00:09:26,434
because in SASS, you can just do math operations like that.
198

198

00:09:26,434  -->  00:09:29,920
But let's suppose we would find this function useful.
199

199

00:09:29,920  -->  00:09:32,003
So we can say, @function,
200

200

00:09:33,503  -->  00:09:35,220
and then we can specify our arguments.
201

201

00:09:35,220  -->  00:09:36,428
Just like in the mixins,
202

202

00:09:36,428  -->  00:09:39,186
we can put whatever variable names in here.
203

203

00:09:39,186  -->  00:09:40,483
So these are the arguments,
204

204

00:09:40,483  -->  00:09:44,075
not really variables but arguments.
205

205

00:09:44,075  -->  00:09:44,992
So a and b.
206

206

00:09:46,052  -->  00:09:49,469
And then what it does is, it will return,
207

207

00:09:50,460  -->  00:09:52,293
return a divided by b.
208

208

00:09:55,528  -->  00:09:56,361
And that's it.
209

209

00:09:56,361  -->  00:09:58,488
So this is how a function works like.
210

210

00:09:58,488  -->  00:10:00,528
We pass arguments into it,
211

211

00:10:00,528  -->  00:10:02,658
it then does something with these arguments,
212

212

00:10:02,658  -->  00:10:05,966
and returns it here with the return keyword.
213

213

00:10:05,966  -->  00:10:08,239
Now if you want to use it, for example here,
214

214

00:10:08,239  -->  00:10:10,195
then we can try that.
215

215

00:10:10,195  -->  00:10:12,355
Well, actually I forgot something here,
216

216

00:10:12,355  -->  00:10:14,728
which is, of course, the name of the function.
217

217

00:10:14,728  -->  00:10:17,742
So sorry, let's call it divide.
218

218

00:10:17,742  -->  00:10:20,443
The function, of course, needs to have a name.
219

219

00:10:20,443  -->  00:10:24,701
Then we specify the arguments for that function.
220

220

00:10:24,701  -->  00:10:27,177
Now if we wanted to use it somewhere,
221

221

00:10:27,177  -->  00:10:29,024
let's try that out.
222

222

00:10:29,024  -->  00:10:30,941
We can just say divide.
223

223

00:10:31,804  -->  00:10:33,084
Remember it was 30.
224

224

00:10:33,084  -->  00:10:35,667
Let's just say 60 and then two.
225

225

00:10:37,222  -->  00:10:39,489
Let's see what that does.
226

226

00:10:39,489  -->  00:10:40,565
Actually, it doesn't do anything.
227

227

00:10:40,565  -->  00:10:42,398
I'm gonna show you why
228

228

00:10:43,839  -->  00:10:45,377
here in the inspect.
229

229

00:10:45,377  -->  00:10:47,837
That's because this gives, of course, 30.
230

230

00:10:47,837  -->  00:10:50,241
But the 30 doesn't have any unit.
231

231

00:10:50,241  -->  00:10:52,580
So CSS doesn't know what we mean.
232

232

00:10:52,580  -->  00:10:53,637
So, 30 what?
233

233

00:10:53,637  -->  00:10:57,899
30% or pixels or centimeters or whatever.
234

234

00:10:57,899  -->  00:11:00,731
It doesn't really know what the 30 is.
235

235

00:11:00,731  -->  00:11:03,081
If we wanna fix that,
236

236

00:11:03,081  -->  00:11:05,101
there's an easy fix.
237

237

00:11:05,101  -->  00:11:06,805
The best practice to do it in SASS
238

238

00:11:06,805  -->  00:11:09,773
is by multiplying it by a one pixel.
239

239

00:11:09,773  -->  00:11:11,289
So if we want pixel,
240

240

00:11:11,289  -->  00:11:13,699
then we multiply this result by one pixel
241

241

00:11:13,699  -->  00:11:16,199
and then it's back to working.
242

242

00:11:17,050  -->  00:11:19,040
Now of course this isn't really practical
243

243

00:11:19,040  -->  00:11:23,111
because all we really want here is 30 pixels.
244

244

00:11:23,111  -->  00:11:25,768
But this is just to show you how we could theoretically
245

245

00:11:25,768  -->  00:11:28,679
use functions to do this kind of calculations.
246

246

00:11:28,679  -->  00:11:31,322
And we could, of course, do much more complex stuff,
247

247

00:11:31,322  -->  00:11:33,646
much more complex calculation,
248

248

00:11:33,646  -->  00:11:36,871
instead of just dividing one number by the other.
249

249

00:11:36,871  -->  00:11:40,222
All right, so we talked about mixins, about functions,
250

250

00:11:40,222  -->  00:11:43,471
and now let's take a look at extends.
251

251

00:11:43,471  -->  00:11:44,724
Let's go down here
252

252

00:11:44,724  -->  00:11:47,333
because we're going to use the extend feature
253

253

00:11:47,333  -->  00:11:48,656
here on the buttons.
254

254

00:11:48,656  -->  00:11:50,417
So what do extends do?
255

255

00:11:50,417  -->  00:11:52,341
Basically we can write a placeholder
256

256

00:11:52,341  -->  00:11:54,473
and put a bunch of styles in there,
257

257

00:11:54,473  -->  00:11:58,207
and then have other selectors extend that placeholder.
258

258

00:11:58,207  -->  00:11:59,409
If that sounds a bit confusing,
259

259

00:11:59,409  -->  00:12:02,595
let me show it to you in practice, okay?
260

260

00:12:02,595  -->  00:12:05,350
The things that are common to these buttons,
261

261

00:12:05,350  -->  00:12:07,706
I will just put them in a placeholder.
262

262

00:12:07,706  -->  00:12:10,180
We write a placeholder in SASS like this,
263

263

00:12:10,180  -->  00:12:12,012
so the percentage sign,
264

264

00:12:12,012  -->  00:12:15,595
and then I just call it button-placeholder.
265

265

00:12:18,435  -->  00:12:22,352
Now I'm gonna put all of these styles in there.
266

266

00:12:24,198  -->  00:12:27,208
I'm doing that because all of this duplicate code here
267

267

00:12:27,208  -->  00:12:28,648
doesn't look really good, right?
268

268

00:12:28,648  -->  00:12:29,481
It's really not following
269

269

00:12:29,481  -->  00:12:32,086
the Don't Repeat Yourself principle here.
270

270

00:12:32,086  -->  00:12:34,287
You see button-main-link here
271

271

00:12:34,287  -->  00:12:36,493
and button-main-link here again,
272

272

00:12:36,493  -->  00:12:38,375
and button-hot-link here
273

273

00:12:38,375  -->  00:12:41,138
and again button-hot-link in here.
274

274

00:12:41,138  -->  00:12:44,136
So we're using these selectors, like, twice.
275

275

00:12:44,136  -->  00:12:45,484
So what we can do instead
276

276

00:12:45,484  -->  00:12:48,805
is to put all of this here into this placeholder.
277

277

00:12:48,805  -->  00:12:52,696
And now we're simply going to extend these selectors here
278

278

00:12:52,696  -->  00:12:54,114
that we already have.
279

279

00:12:54,114  -->  00:12:56,929
All I have to do is to write extend
280

280

00:12:56,929  -->  00:12:59,262
and then button-placeholder.
281

281

00:13:02,696  -->  00:13:04,752
And the same thing down here.
282

282

00:13:04,752  -->  00:13:08,085
I will now extend this one here as well,
283

283

00:13:09,686  -->  00:13:12,235
and these buttons are back to working right now.
284

284

00:13:12,235  -->  00:13:13,371
So great.
285

285

00:13:13,371  -->  00:13:16,567
Again, we just extended these two selectors here,
286

286

00:13:16,567  -->  00:13:18,680
so this one and this one,
287

287

00:13:18,680  -->  00:13:22,395
with the code that we have here in this placeholder.
288

288

00:13:22,395  -->  00:13:24,568
Now you may ask, "Well, why didn't we just
289

289

00:13:24,568  -->  00:13:26,335
"make a mixin with this code
290

290

00:13:26,335  -->  00:13:28,198
"and then simply include this mixin
291

291

00:13:28,198  -->  00:13:30,548
"in these two selectors?"
292

292

00:13:30,548  -->  00:13:34,831
Now, let me show you that result is actually different.
293

293

00:13:34,831  -->  00:13:36,663
First let me save it.
294

294

00:13:36,663  -->  00:13:39,625
I will see the compiled CSS now.
295

295

00:13:39,625  -->  00:13:41,527
So this is what happened actually.
296

296

00:13:41,527  -->  00:13:44,331
It actually created this block of code,
297

297

00:13:44,331  -->  00:13:46,773
which in practice looks the same way it did before.
298

298

00:13:46,773  -->  00:13:49,465
So we have this button-main-link and this button-hot-link
299

299

00:13:49,465  -->  00:13:52,008
together again just as we had before.
300

300

00:13:52,008  -->  00:13:52,841
But that's no problem.
301

301

00:13:52,841  -->  00:13:55,320
We're still following the Don't Repeat Yourself principle
302

302

00:13:55,320  -->  00:13:57,783
because what matters is the source code that we write
303

303

00:13:57,783  -->  00:14:00,359
and not the compiled final CSS code.
304

304

00:14:00,359  -->  00:14:01,685
It's not a problem if the same code
305

305

00:14:01,685  -->  00:14:05,016
appears multiple times in the compiled final file.
306

306

00:14:05,016  -->  00:14:06,837
But in the source code, that's the one
307

307

00:14:06,837  -->  00:14:08,080
that we should keep DRY,
308

308

00:14:08,080  -->  00:14:10,957
so with Don't Repeat Yourself in mind.
309

309

00:14:10,957  -->  00:14:14,186
So what happened here, in fact, was
310

310

00:14:14,186  -->  00:14:17,450
that it's really different than a mixin.
311

311

00:14:17,450  -->  00:14:20,867
This code was in fact not copied to here,
312

312

00:14:22,106  -->  00:14:25,895
but what happened was that this selector here
313

313

00:14:25,895  -->  00:14:28,789
was basically copied here.
314

314

00:14:28,789  -->  00:14:31,169
So if this was a mixin, then all this code
315

315

00:14:31,169  -->  00:14:33,374
would have been copied here into this selector,
316

316

00:14:33,374  -->  00:14:36,166
into this one, and here into this one.
317

317

00:14:36,166  -->  00:14:39,035
So with a mixin, that code would now be here.
318

318

00:14:39,035  -->  00:14:41,600
But with an extend, it's the other way around.
319

319

00:14:41,600  -->  00:14:45,600
What happens is that the selector is copied here
320

320

00:14:47,091  -->  00:14:48,174
to this rule.
321

321

00:14:49,156  -->  00:14:53,323
So now we have button-main-link and button-hot-link in here,
322

322

00:14:55,002  -->  00:14:56,419
in this selector.
323

323

00:14:59,917  -->  00:15:02,185
So this is what we have.
324

324

00:15:02,185  -->  00:15:04,833
So although they look like they're doing the same,
325

325

00:15:04,833  -->  00:15:07,016
they're in fact fundamentally different
326

326

00:15:07,016  -->  00:15:09,249
in the way they work behind the scenes.
327

327

00:15:09,249  -->  00:15:11,373
Now you should only ever use extends
328

328

00:15:11,373  -->  00:15:13,140
if the rules that we're extending
329

329

00:15:13,140  -->  00:15:16,380
are inherently and thematically related.
330

330

00:15:16,380  -->  00:15:18,233
That's the case with these buttons, right?
331

331

00:15:18,233  -->  00:15:19,889
They are really related.
332

332

00:15:19,889  -->  00:15:22,415
So that's not going to cause a maintenance problem
333

333

00:15:22,415  -->  00:15:24,008
further down the road.
334

334

00:15:24,008  -->  00:15:27,566
Now personally, I'm not such a big fan of these extends.
335

335

00:15:27,566  -->  00:15:30,300
Whenever I can, I prefer to just use mixins
336

336

00:15:30,300  -->  00:15:31,835
to do this kind of stuff.
337

337

00:15:31,835  -->  00:15:33,885
But in this particular example,
338

338

00:15:33,885  -->  00:15:37,226
actually the extend would be the correct tool
339

339

00:15:37,226  -->  00:15:38,592
to do this,
340

340

00:15:38,592  -->  00:15:41,045
because again, these two buttons
341

341

00:15:41,045  -->  00:15:43,880
where we used the extends, they are actually related.
342

342

00:15:43,880  -->  00:15:47,204
Now, if we wanted to extend, like, this link here
343

343

00:15:47,204  -->  00:15:49,704
and then maybe the nav element
344

344

00:15:50,679  -->  00:15:53,794
and then also the navigation li elements,
345

345

00:15:53,794  -->  00:15:56,204
now, then we would mix all these unrelated selectors,
346

346

00:15:56,204  -->  00:15:58,617
these unrelated elements, all together.
347

347

00:15:58,617  -->  00:16:00,366
And that wouldn't be a good practice.
348

348

00:16:00,366  -->  00:16:02,849
So again, just use extends when the selectors
349

349

00:16:02,849  -->  00:16:04,649
or the elements that you are extending
350

350

00:16:04,649  -->  00:16:07,724
are actually pretty related to one another.
351

351

00:16:07,724  -->  00:16:10,237
Okay, once again I want you to review
352

352

00:16:10,237  -->  00:16:11,727
all the code that we wrote
353

353

00:16:11,727  -->  00:16:15,070
as well as the final compiled CSS code
354

354

00:16:15,070  -->  00:16:17,915
so that you understand what's going on here.
355

355

00:16:17,915  -->  00:16:19,923
What you will notice is that, for example,
356

356

00:16:19,923  -->  00:16:21,734
the function and the mixin,
357

357

00:16:21,734  -->  00:16:23,410
they will, just like the variables,
358

358

00:16:23,410  -->  00:16:26,815
they will not produce any final CSS code, of course,
359

359

00:16:26,815  -->  00:16:30,943
because their only purpose is to help us writing our code.
360

360

00:16:30,943  -->  00:16:32,972
After reviewing this, you will then understand
361

361

00:16:32,972  -->  00:16:35,321
how variables, nesting, mixins,
362

362

00:16:35,321  -->  00:16:38,579
extends and functions work in SASS.
363

363

00:16:38,579  -->  00:16:40,784
At least it should give you a pretty good overview.
364

364

00:16:40,784  -->  00:16:42,710
Of course, from now on in the project,
365

365

00:16:42,710  -->  00:16:44,725
we are going to use only SASS,
366

366

00:16:44,725  -->  00:16:47,179
which is going to make our life a lot easier,
367

367

00:16:47,179  -->  00:16:48,804
especially in conjunction
368

368

00:16:48,804  -->  00:16:52,589
with the block element modifier methodology.
369

369

00:16:52,589  -->  00:16:54,499
But I'm gonna talk about that later,
370

370

00:16:54,499  -->  00:16:56,244
when we continue with the project.
371

371

00:16:56,244  -->  00:16:58,003
So take a look at the code right now,
372

372

00:16:58,003  -->  00:16:59,836
and see you next time.
