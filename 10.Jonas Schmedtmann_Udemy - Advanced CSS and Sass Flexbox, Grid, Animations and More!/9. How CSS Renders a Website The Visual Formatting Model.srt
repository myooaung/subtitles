1
1

00:00:01,760  -->  00:00:03,024
<v Instructor>Welcome back.</v>
2

2

00:00:03,024  -->  00:00:05,129
Do you still remember the diagram that I showed you
3

3

00:00:05,129  -->  00:00:08,917
in the beginning about how CSS works behind the scenes?
4

4

00:00:08,917  -->  00:00:10,803
This one, right?
5

5

00:00:10,803  -->  00:00:14,193
So we've been talking a lot about the parsing phase,
6

6

00:00:14,193  -->  00:00:17,328
but now it's time to move on to the website rendering phase.
7

7

00:00:17,328  -->  00:00:20,008
So this lecture should give you a pretty good overview
8

8

00:00:20,008  -->  00:00:22,797
about how the visual formatting model works,
9

9

00:00:22,797  -->  00:00:25,224
so that you can write your code in a way that makes
10

10

00:00:25,224  -->  00:00:27,467
more sense to you.
11

11

00:00:27,467  -->  00:00:30,146
What this lecture will do is maybe not so much give you
12

12

00:00:30,146  -->  00:00:33,542
new tools, but it will summarize a lot of the CSS
13

13

00:00:33,542  -->  00:00:36,544
that you actually already know, and put it in a more
14

14

00:00:36,544  -->  00:00:38,535
meaningful context.
15

15

00:00:38,535  -->  00:00:42,555
So, the CSS visual formatting model is an algorithm
16

16

00:00:42,555  -->  00:00:45,536
that calculates boxes and determines the layout
17

17

00:00:45,536  -->  00:00:48,753
of these boxes for each element in the render tree,
18

18

00:00:48,753  -->  00:00:52,358
in order to determine the final layout of the page.
19

19

00:00:52,358  -->  00:00:55,065
This model is one of the fundamental concepts of CSS
20

20

00:00:55,065  -->  00:00:58,434
which is why I decided to include it in the course.
21

21

00:00:58,434  -->  00:01:01,149
Now, in order to do this, the algorithm takes into account
22

22

00:01:01,149  -->  00:01:04,847
factors like dimensions of the boxes, which are calculated
23

23

00:01:04,847  -->  00:01:08,529
by the box model, the box type, which can be inline,
24

24

00:01:08,529  -->  00:01:11,003
block or inline-block;
25

25

00:01:11,003  -->  00:01:13,669
the positioning scheme which includes concepts like
26

26

00:01:13,669  -->  00:01:16,698
floats and absolute or relative positioning;
27

27

00:01:16,698  -->  00:01:20,285
stacking context, the other elements that are present
28

28

00:01:20,285  -->  00:01:23,099
in the render tree such as siblings or parents;
29

29

00:01:23,099  -->  00:01:26,484
and finally, external information such as the current
30

30

00:01:26,484  -->  00:01:31,099
viewpoint size, dimensions of images, or other factors.
31

31

00:01:31,099  -->  00:01:33,300
So, by putting all these factors together,
32

32

00:01:33,300  -->  00:01:36,190
the browser figures out how the final website will look
33

33

00:01:36,190  -->  00:01:37,929
for the user.
34

34

00:01:37,929  -->  00:01:40,167
So let's now look at the first four of these factors
35

35

00:01:40,167  -->  00:01:42,155
in more detail.
36

36

00:01:42,155  -->  00:01:45,433
And let's start with the box model.
37

37

00:01:45,433  -->  00:01:48,348
The box model is without a doubt one of the most fundamental
38

38

00:01:48,348  -->  00:01:52,028
parts of CSS and it's something you really have to master
39

39

00:01:52,028  -->  00:01:54,829
in order to lay out a webpage.
40

40

00:01:54,829  -->  00:01:58,079
The box model is one of the factors that define how elements
41

41

00:01:58,079  -->  00:02:01,639
are displayed on a webpage and how they are sized.
42

42

00:02:01,639  -->  00:02:03,965
According to the box model, each and every element
43

43

00:02:03,965  -->  00:02:07,574
on a webpage can be seen as a rectangle box.
44

44

00:02:07,574  -->  00:02:11,174
And each box can have a width, a height, a padding, margins
45

45

00:02:11,174  -->  00:02:12,257
and a border.
46

46

00:02:13,189  -->  00:02:16,254
But note that they're all optional, so there can be boxes
47

47

00:02:16,254  -->  00:02:19,669
with no margins or no paddings at all.
48

48

00:02:19,669  -->  00:02:23,752
Now this image here shows us how the box model works.
49

49

00:02:23,752  -->  00:02:25,508
So let's break it down.
50

50

00:02:25,508  -->  00:02:29,396
First, the content of a box is where all the text, images
51

51

00:02:29,396  -->  00:02:33,176
or other content that we specify go.
52

52

00:02:33,176  -->  00:02:35,582
We can easily define its height and width using
53

53

00:02:35,582  -->  00:02:38,198
the corresponding CSS properties, as we're going to see
54

54

00:02:38,198  -->  00:02:40,136
in the next slide.
55

55

00:02:40,136  -->  00:02:44,695
Next, the padding is a transparent area around the content,
56

56

00:02:44,695  -->  00:02:47,231
but still inside of the box.
57

57

00:02:47,231  -->  00:02:50,713
We use paddings to generate white space inside of a box
58

58

00:02:50,713  -->  00:02:53,341
and we can define the padding by specifying the padding
59

59

00:02:53,341  -->  00:02:56,918
property in CSS, as I'm sure you already know.
60

60

00:02:56,918  -->  00:02:59,687
Next, we can specify a border for a box,
61

61

00:02:59,687  -->  00:03:03,265
and that border goes around the padding and the content.
62

62

00:03:03,265  -->  00:03:06,254
Similar to the padding, we have the margin,
63

63

00:03:06,254  -->  00:03:08,713
but instead of being inside the box,
64

64

00:03:08,713  -->  00:03:11,149
the margin is white space that's actually outside
65

65

00:03:11,149  -->  00:03:12,399
the box itself.
66

66

00:03:13,237  -->  00:03:17,043
So we can think of margin as a space between boxes.
67

67

00:03:17,043  -->  00:03:20,670
So, for example, if we want some space between two elements,
68

68

00:03:20,670  -->  00:03:24,389
we will define their margin properties in CSS.
69

69

00:03:24,389  -->  00:03:27,409
And finally, there's something called the fill area.
70

70

00:03:27,409  -->  00:03:30,057
Remember how the text content and images go inside
71

71

00:03:30,057  -->  00:03:31,447
the content box?
72

72

00:03:31,447  -->  00:03:34,986
The same does actually not apply for background images
73

73

00:03:34,986  -->  00:03:37,507
or the background color of the box.
74

74

00:03:37,507  -->  00:03:40,360
These properties will be applied not only to the content box
75

75

00:03:40,360  -->  00:03:43,820
but to the entire fill area, which also includes the padding
76

76

00:03:43,820  -->  00:03:46,737
and the border, but not the margin.
77

77

00:03:48,428  -->  00:03:50,643
Alright, so let's now talk about heights and widths
78

78

00:03:50,643  -->  00:03:53,390
in the default box model.
79

79

00:03:53,390  -->  00:03:56,042
As I mentioned, you can specify the height and the width
80

80

00:03:56,042  -->  00:03:57,608
of an element.
81

81

00:03:57,608  -->  00:03:59,955
Now, if we choose not to specify the height or width
82

82

00:03:59,955  -->  00:04:03,091
of a certain element, the visual formatting model
83

83

00:04:03,091  -->  00:04:07,394
will just use the content of the box to determine its size.
84

84

00:04:07,394  -->  00:04:09,911
So let's now take a look at how the default box model
85

85

00:04:09,911  -->  00:04:14,335
calculates height and width of block level boxes.
86

86

00:04:14,335  -->  00:04:17,715
And more about block level boxes, or elements, later.
87

87

00:04:17,715  -->  00:04:21,637
So, the width of a box, as we will see in the final layout,
88

88

00:04:21,637  -->  00:04:24,965
is defined by the right border plus the right padding,
89

89

00:04:24,965  -->  00:04:27,836
plus the specified width, plus the left padding,
90

90

00:04:27,836  -->  00:04:30,009
plus the left border.
91

91

00:04:30,009  -->  00:04:32,157
And the same logic, of course, applies for the height
92

92

00:04:32,157  -->  00:04:33,858
of the box.
93

93

00:04:33,858  -->  00:04:37,806
But let's look at a quick example to make this more clear.
94

94

00:04:37,806  -->  00:04:40,522
Suppose we define the height for element of 100 pixel
95

95

00:04:40,522  -->  00:04:44,352
and the padding to the top and bottom of 20 pixels.
96

96

00:04:44,352  -->  00:04:46,581
So the final height as displayed on the website
97

97

00:04:46,581  -->  00:04:48,848
would be 140 pixels.
98

98

00:04:48,848  -->  00:04:51,726
This means that whenever we define a width or a height
99

99

00:04:51,726  -->  00:04:54,511
of a box, the padding and border get added
100

100

00:04:54,511  -->  00:04:56,678
to what we defined.
101

101

00:04:56,678  -->  00:04:59,073
But that doesn't sound very practical, right?
102

102

00:04:59,073  -->  00:05:03,434
So the solution to fix this problem is to use the box-sizing
103

103

00:05:03,434  -->  00:05:06,375
property with the value of border box.
104

104

00:05:06,375  -->  00:05:08,348
And I'm sure that many of you already know
105

105

00:05:08,348  -->  00:05:10,176
and use this trick.
106

106

00:05:10,176  -->  00:05:13,260
And they also show that in my beginning HTML and CSS course.
107

107

00:05:13,260  -->  00:05:15,011
But it's still important to remember
108

108

00:05:15,011  -->  00:05:17,009
how this actually works.
109

109

00:05:17,009  -->  00:05:19,912
So, if we set box sizing to border box,
110

110

00:05:19,912  -->  00:05:23,499
the height and the width will be defined for the entire box
111

111

00:05:23,499  -->  00:05:26,586
including the padding and the border and not just for
112

112

00:05:26,586  -->  00:05:28,141
the content area.
113

113

00:05:28,141  -->  00:05:30,642
What this means, at the same time is that the paddings
114

114

00:05:30,642  -->  00:05:34,223
and borders that we specify, will of course reduce
115

115

00:05:34,223  -->  00:05:36,902
the inner width of the content area,
116

116

00:05:36,902  -->  00:05:39,499
instead of adding them to the total height or width
117

117

00:05:39,499  -->  00:05:40,805
of an element.
118

118

00:05:40,805  -->  00:05:41,638
Alright.
119

119

00:05:42,761  -->  00:05:45,705
So, if we look at the height and width calculations now,
120

120

00:05:45,705  -->  00:05:48,794
in this case, the actual total width of a box is equal
121

121

00:05:48,794  -->  00:05:50,796
to the specified width.
122

122

00:05:50,796  -->  00:05:52,776
And the same goes for the height.
123

123

00:05:52,776  -->  00:05:55,874
So, if we now define some paddings or borders,
124

124

00:05:55,874  -->  00:05:59,264
they will not get added to the dimensions of the box.
125

125

00:05:59,264  -->  00:06:01,989
Which makes our lives so much easier.
126

126

00:06:01,989  -->  00:06:04,554
And if we look at our example now, the final height
127

127

00:06:04,554  -->  00:06:07,538
will of course be 100 pixels, just as we specified
128

128

00:06:07,538  -->  00:06:09,757
for the height of the element.
129

129

00:06:09,757  -->  00:06:10,590
Alright.
130

130

00:06:12,047  -->  00:06:14,533
So we looked at the box model and how height or width
131

131

00:06:14,533  -->  00:06:16,752
of boxes are calculated.
132

132

00:06:16,752  -->  00:06:18,992
But this applies mainly to block-level boxes,
133

133

00:06:18,992  -->  00:06:22,546
which is one of the different types of boxes in CSS.
134

134

00:06:22,546  -->  00:06:24,713
So let's now look at the three most common
135

135

00:06:24,713  -->  00:06:27,877
and most important box types and how different box types
136

136

00:06:27,877  -->  00:06:31,674
determine how boxes are laid out on a page.
137

137

00:06:31,674  -->  00:06:34,580
Let's start with a block-level box or element.
138

138

00:06:34,580  -->  00:06:36,120
We can say both.
139

139

00:06:36,120  -->  00:06:40,195
Now, first off, the type of a box is always defined
140

140

00:06:40,195  -->  00:06:43,744
by a display property, which I'm sure you know already.
141

141

00:06:43,744  -->  00:06:46,318
So in the case of a block-level element,
142

142

00:06:46,318  -->  00:06:49,286
the display property is usually set to block.
143

143

00:06:49,286  -->  00:06:53,081
But please, note that the values flags for flags block
144

144

00:06:53,081  -->  00:06:57,248
layout list item and table also produce block-level boxes.
145

145

00:06:58,224  -->  00:07:01,904
Now, all HTML elements have a display default property.
146

146

00:07:01,904  -->  00:07:04,085
And elements such as paragraphs or divs,
147

147

00:07:04,085  -->  00:07:06,552
which are usually formatted visually as blocks,
148

148

00:07:06,552  -->  00:07:10,075
have their display property set to block by default.
149

149

00:07:10,075  -->  00:07:12,986
We can always, of course, change this property manually,
150

150

00:07:12,986  -->  00:07:15,759
which can be very useful in some cases.
151

151

00:07:15,759  -->  00:07:19,472
Okay. So being a block-level box, this block will always
152

152

00:07:19,472  -->  00:07:23,420
occupy as much space as possible, which is usually 100%
153

153

00:07:23,420  -->  00:07:25,307
of its parent width.
154

154

00:07:25,307  -->  00:07:27,586
And create line breaks after and before it,
155

155

00:07:27,586  -->  00:07:29,702
meaning that blocks are formatted vertically
156

156

00:07:29,702  -->  00:07:31,696
one after another.
157

157

00:07:31,696  -->  00:07:35,550
Now, about inline boxes, they're basically the opposite
158

158

00:07:35,550  -->  00:07:38,944
of block-level boxes, because their content is distributed
159

159

00:07:38,944  -->  00:07:42,177
in lines, meaning that an inline box only occupies
160

160

00:07:42,177  -->  00:07:45,363
the space that its content actually needs.
161

161

00:07:45,363  -->  00:07:48,412
Therefore, they also don't cause line breaks after
162

162

00:07:48,412  -->  00:07:50,113
or in line with them.
163

163

00:07:50,113  -->  00:07:52,340
But instead, they just sit inside their block-level
164

164

00:07:52,340  -->  00:07:54,251
parent element.
165

165

00:07:54,251  -->  00:07:56,858
Now about the box model, things work a bit different
166

166

00:07:56,858  -->  00:07:58,863
in inline boxes.
167

167

00:07:58,863  -->  00:08:02,134
First, the height and width property do not apply.
168

168

00:08:02,134  -->  00:08:05,169
Which means that we cannot use these properties here.
169

169

00:08:05,169  -->  00:08:08,582
And second, we can only specify horizontal paddings
170

170

00:08:08,582  -->  00:08:11,047
and margins on inline elements.
171

171

00:08:11,047  -->  00:08:13,972
So only on the left and on the right side.
172

172

00:08:13,972  -->  00:08:17,061
That's the way the box model works on inline elements.
173

173

00:08:17,061  -->  00:08:20,053
So of course this has some serious limitations.
174

174

00:08:20,053  -->  00:08:23,266
And in order to overcome them, there's another type of box,
175

175

00:08:23,266  -->  00:08:25,821
and that's the inline block box.
176

176

00:08:25,821  -->  00:08:29,842
Now, inline block boxes are technically also inline boxes
177

177

00:08:29,842  -->  00:08:33,881
but which simply work as a block-level box on the inside.
178

178

00:08:33,881  -->  00:08:36,295
So, since they're technically inline elements,
179

179

00:08:36,295  -->  00:08:39,606
they also use up only their content space and cause
180

180

00:08:39,606  -->  00:08:41,102
no line breaks.
181

181

00:08:41,102  -->  00:08:44,441
But, since they work as a block-level box on the inside,
182

182

00:08:44,441  -->  00:08:47,463
the box model applies to them just like in the regular
183

183

00:08:47,463  -->  00:08:49,673
block-level boxes.
184

184

00:08:49,673  -->  00:08:52,596
All we need to do in order to set an element to an inline
185

185

00:08:52,596  -->  00:08:55,421
box is to set its display property to inline block,
186

186

00:08:55,421  -->  00:08:56,888
and that's it.
187

187

00:08:56,888  -->  00:08:57,721
Very easy.
188

188

00:08:58,802  -->  00:09:00,987
So it's really important that you understand the difference
189

189

00:09:00,987  -->  00:09:03,192
between these three types of boxes,
190

190

00:09:03,192  -->  00:09:07,589
so we can use them as needed in different situations.
191

191

00:09:07,589  -->  00:09:08,500
Okay.
192

192

00:09:08,500  -->  00:09:10,370
Next up, we have positioning schemes.
193

193

00:09:10,370  -->  00:09:12,735
And there are three of them in CSS.
194

194

00:09:12,735  -->  00:09:16,191
The normal flow, floats and absolute positioning.
195

195

00:09:16,191  -->  00:09:18,159
And I'm sure you're already familiar with floats
196

196

00:09:18,159  -->  00:09:20,110
and absolute or relative positioning,
197

197

00:09:20,110  -->  00:09:22,594
and so this is more to bring all of these properties
198

198

00:09:22,594  -->  00:09:25,151
together into a bigger context.
199

199

00:09:25,151  -->  00:09:28,104
So, the normal flow is what happens to an element
200

200

00:09:28,104  -->  00:09:30,836
if you don't do anything to it at all.
201

201

00:09:30,836  -->  00:09:33,872
If you don't float it and if you don't use position
202

202

00:09:33,872  -->  00:09:35,649
absolute on it.
203

203

00:09:35,649  -->  00:09:37,989
If you use position relative, then the element is still
204

204

00:09:37,989  -->  00:09:39,542
in a normal flow.
205

205

00:09:39,542  -->  00:09:42,100
And what the normal flow means, is that the elements
206

206

00:09:42,100  -->  00:09:44,809
are simply laid out on the page in a natural order
207

207

00:09:44,809  -->  00:09:46,415
in the code.
208

208

00:09:46,415  -->  00:09:49,709
The next positioning scheme is when you use floats.
209

209

00:09:49,709  -->  00:09:53,087
The float property causes an element to be completely taken
210

210

00:09:53,087  -->  00:09:56,206
out of the normal flow and shifted to the left or right
211

211

00:09:56,206  -->  00:09:58,899
as far as possible, until it touches the edge
212

212

00:09:58,899  -->  00:10:02,779
of its containing box, or another floated element.
213

213

00:10:02,779  -->  00:10:06,074
When this happens, text and inline elements will wrap
214

214

00:10:06,074  -->  00:10:08,401
around the floated element.
215

215

00:10:08,401  -->  00:10:11,355
Also, when an element is floated, its container will not
216

216

00:10:11,355  -->  00:10:13,976
adjust its height to the element,
217

217

00:10:13,976  -->  00:10:16,050
which sometimes can be problematic.
218

218

00:10:16,050  -->  00:10:19,239
The usual solution to this is to use clear fixes,
219

219

00:10:19,239  -->  00:10:21,328
which I am sure you have used when building layouts
220

220

00:10:21,328  -->  00:10:23,403
using floats, right?
221

221

00:10:23,403  -->  00:10:26,411
And then finally, there's absolute positioning.
222

222

00:10:26,411  -->  00:10:29,328
And just like with floats, when you set the position
223

223

00:10:29,328  -->  00:10:31,986
property to absolute or also to fixed,
224

224

00:10:31,986  -->  00:10:34,836
the element is taken out of the normal flow.
225

225

00:10:34,836  -->  00:10:37,649
Now, what's different here is that with absolute
226

226

00:10:37,649  -->  00:10:40,547
positioning, the element has no impact on surrounding
227

227

00:10:40,547  -->  00:10:42,764
content or elements at all.
228

228

00:10:42,764  -->  00:10:45,270
In fact, it can even overlap them.
229

229

00:10:45,270  -->  00:10:48,069
So if we want to position an absolutely positioned element
230

230

00:10:48,069  -->  00:10:51,519
on the page, we use the CSS properties top, bottom,
231

231

00:10:51,519  -->  00:10:54,320
left and right to offset it to its
232

232

00:10:54,320  -->  00:10:56,705
relatively-positioned container.
233

233

00:10:56,705  -->  00:10:59,557
Now as I mentioned, an absolutely positioned element
234

234

00:10:59,557  -->  00:11:03,424
can overlap other elements occupying the same space.
235

235

00:11:03,424  -->  00:11:05,056
And how do we solve this?
236

236

00:11:05,056  -->  00:11:08,364
Well, CSS solves it for us, actually, using something
237

237

00:11:08,364  -->  00:11:10,391
called stacking context.
238

238

00:11:10,391  -->  00:11:13,483
So there's one piece left in the puzzle of the visual
239

239

00:11:13,483  -->  00:11:16,419
formatting model: stacking context.
240

240

00:11:16,419  -->  00:11:21,364
So, stacking contexts are what determine in which order
241

241

00:11:21,364  -->  00:11:23,646
elements are rendered on the page.
242

242

00:11:23,646  -->  00:11:26,190
A new stacking context can be created by a different
243

243

00:11:26,190  -->  00:11:30,859
CSS properties, where the most widely known is Z index.
244

244

00:11:30,859  -->  00:11:32,524
But there are other properties that also create
245

245

00:11:32,524  -->  00:11:34,274
new stacking contexts.
246

246

00:11:34,274  -->  00:11:37,975
Now, stacking contexts are like layers that form a stack.
247

247

00:11:37,975  -->  00:11:41,028
Layers on the bottom of the stack appear at first,
248

248

00:11:41,028  -->  00:11:44,533
and elements higher up the stack appear on top,
249

249

00:11:44,533  -->  00:11:45,978
overlapping the elements below them,
250

250

00:11:45,978  -->  00:11:47,912
just like you see on the slide.
251

251

00:11:47,912  -->  00:11:50,370
In this example, we have three stacking contexts
252

252

00:11:50,370  -->  00:11:53,275
because each element used the Z index property
253

253

00:11:53,275  -->  00:11:56,792
on an either relatively or absolutely positioned element.
254

254

00:11:56,792  -->  00:11:59,627
And that's one way of creating a new stacking context.
255

255

00:11:59,627  -->  00:12:03,142
Now between these elements, the one with the higher z index
256

256

00:12:03,142  -->  00:12:05,682
appears on the top, and the one with the lowest z index
257

257

00:12:05,682  -->  00:12:07,401
appears at the bottom.
258

258

00:12:07,401  -->  00:12:10,853
Now, a common misconception is that only the z index
259

259

00:12:10,853  -->  00:12:13,402
property creates new stacking contexts,
260

260

00:12:13,402  -->  00:12:15,343
but that's not the case.
261

261

00:12:15,343  -->  00:12:17,616
An opacity value different from one,
262

262

00:12:17,616  -->  00:12:20,721
a transform, a filter or other properties,
263

263

00:12:20,721  -->  00:12:23,520
will also create new stacking contexts.
264

264

00:12:23,520  -->  00:12:26,424
That's why sometimes, even with the z index set on
265

265

00:12:26,424  -->  00:12:29,117
a positioned element, the stacking order doesn't work
266

266

00:12:29,117  -->  00:12:30,834
as expected.
267

267

00:12:30,834  -->  00:12:33,717
But as with everything we talked about in this section,
268

268

00:12:33,717  -->  00:12:36,336
we will see practical applications of all of this
269

269

00:12:36,336  -->  00:12:39,169
in the coding part of the course.
