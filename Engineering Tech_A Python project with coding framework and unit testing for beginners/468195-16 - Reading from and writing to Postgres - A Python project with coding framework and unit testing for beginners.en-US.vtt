WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.100 --> 00:00:06.705
Let's now interact with the Postgres table that we created in the lab.

00:00:06.705 --> 00:00:09.840
To interact with Postgres from Python,

00:00:09.840 --> 00:00:12.645
we'll use the psycopg2 library.

00:00:12.645 --> 00:00:14.895
First, we need to import that.

00:00:14.895 --> 00:00:17.640
If we're working on this library for the first time,

00:00:17.640 --> 00:00:20.220
you need to include it in the Python environment.

00:00:20.220 --> 00:00:23.054
Let's go to File Settings.

00:00:23.054 --> 00:00:27.400
Under the project, we need to select the Python interpreter.

00:00:28.250 --> 00:00:31.740
Then we need to make sure psycopg2 is installed and a

00:00:31.740 --> 00:00:35.190
peering under the list of libraries or packages here.

00:00:35.190 --> 00:00:40.230
Since I've already installed it is showing up here to install psycopg2 or any library.

00:00:40.230 --> 00:00:42.670
You click on this plus sign.

00:00:42.670 --> 00:00:45.425
Search for the package you want to install.

00:00:45.425 --> 00:00:50.310
Then select the package and click Install package.

00:00:50.410 --> 00:00:53.450
If we're working in any other Python environment,

00:00:53.450 --> 00:00:59.450
you can do a pip install to install psycopg2. Let's close.

00:00:59.450 --> 00:01:06.570
This will create a new function.

00:01:09.310 --> 00:01:13.770
Let's call it read from PZ.

00:01:13.990 --> 00:01:19.500
First, we need to create a connection with a Postgres table.

00:01:20.020 --> 00:01:26.450
Psycopg2 has a connect method using which you can connect with the Postgres database.

00:01:26.450 --> 00:01:29.630
You need to specify the user ID, which is Postgres,

00:01:29.630 --> 00:01:34.700
in my case, the password, host name.

00:01:34.700 --> 00:01:36.590
Since I've installed on the local machine,

00:01:36.590 --> 00:01:40.610
it would be localhost and the database name which I kept Postgres,

00:01:40.610 --> 00:01:42.620
or the default database.

00:01:42.620 --> 00:01:46.830
Now we need to store this in a connection variable.

00:01:47.200 --> 00:01:51.990
Let's wrap it so that it could be visible in the window.

00:01:52.210 --> 00:01:55.160
Now after establishing the connection,

00:01:55.160 --> 00:01:57.095
we need to create a cursor.

00:01:57.095 --> 00:02:02.960
Using the cursor, you can execute various Postgres command within our Python program.

00:02:02.960 --> 00:02:07.500
You can create all kinds of queries such as select, insert, and delete.

00:02:07.810 --> 00:02:10.955
Let's try a simple select query.

00:02:10.955 --> 00:02:13.580
Will select all records from the future schema,

00:02:13.580 --> 00:02:15.260
future ex course catalog table,

00:02:15.260 --> 00:02:17.285
which we created in the other lab.

00:02:17.285 --> 00:02:21.900
Let's first execute this query in the SQL command prompt.

00:02:23.080 --> 00:02:27.060
We can see that two records are getting fetched.

00:02:30.910 --> 00:02:35.150
Coursera has an execute method to execute any query.

00:02:35.150 --> 00:02:37.715
Let's execute the select query.

00:02:37.715 --> 00:02:39.515
And once it is executed,

00:02:39.515 --> 00:02:43.260
we can fit a single record or we can fetch all the records.

00:02:45.580 --> 00:02:48.350
Let's fit a single record.

00:02:48.350 --> 00:02:52.830
Eugene cursors fh one with third and printed to the console.

00:02:53.620 --> 00:02:56.930
Next we'll invoke this read from PZ from

00:02:56.930 --> 00:03:02.059
store data function so that it will be executed when we run the entire application.

00:03:02.059 --> 00:03:09.030
We have to do a self dot read from PC since it is a class level function. Let's run it.

00:03:10.450 --> 00:03:15.260
We can see that one record is getting displayed here.

00:03:15.260 --> 00:03:18.600
The record width courts ID 2.

00:03:19.990 --> 00:03:22.880
First we established a connection,

00:03:22.880 --> 00:03:24.635
then we created a cursor,

00:03:24.635 --> 00:03:27.800
and then using the core Selleck g could be executed the query.

00:03:27.800 --> 00:03:29.720
And then using coarser dot-dot-dot H1,

00:03:29.720 --> 00:03:31.310
we are fetching one card.

00:03:31.310 --> 00:03:34.560
We can also fetch all the records.

00:03:35.230 --> 00:03:40.100
We can fetch all records using card self.age all.

00:03:40.100 --> 00:03:43.140
Let's print output.

00:03:51.400 --> 00:03:56.885
We can see that two records got phage trend getting displayed here.

00:03:56.885 --> 00:03:59.540
The output is within a square bracket,

00:03:59.540 --> 00:04:02.135
so that means it's a Python list.

00:04:02.135 --> 00:04:04.220
When we do a cursor dot dot H on,

00:04:04.220 --> 00:04:09.695
it returns all the records and stores each recording that tuple,

00:04:09.695 --> 00:04:12.660
a list for all the records.

00:04:13.150 --> 00:04:16.370
In check the psycopg2 documentation to

00:04:16.370 --> 00:04:19.265
understand all the functions are interfaces available

00:04:19.265 --> 00:04:24.680
and the cursor object and what kind of data type the return phage all returns,

00:04:24.680 --> 00:04:26.795
all the rows in a list of tuples.

00:04:26.795 --> 00:04:31.740
And an empty list is written if there is no match to the records faced.

00:04:32.170 --> 00:04:38.990
We can store the feature loud put in a Python list and iterate through it in a for loop.

00:04:38.990 --> 00:04:41.839
Let's call that list records.

00:04:41.839 --> 00:04:44.000
And then for each item in the records,

00:04:44.000 --> 00:04:46.850
let's print item and we'll print something else.

00:04:46.850 --> 00:04:48.665
Also within the for loop.

00:04:48.665 --> 00:04:51.755
We can see the expected output,

00:04:51.755 --> 00:04:56.940
printing each record and then printing the text within the for loop.

00:04:56.980 --> 00:05:03.720
Let's understand how to insert a record to Postgres will create another function.

00:05:05.020 --> 00:05:10.050
Let's call it right to PZ.

00:05:12.580 --> 00:05:18.000
Similar to read from PC will create a connection and then create a cursor.

00:05:22.810 --> 00:05:26.120
Two-part form insert operation with coarser,

00:05:26.120 --> 00:05:29.480
we need to write the insert query with values and have

00:05:29.480 --> 00:05:33.710
a tuple which will populate those values at runtime.

00:05:33.710 --> 00:05:38.525
When new course ID, course name and other details.

00:05:38.525 --> 00:05:44.120
Next, we can perform the insert operation by calling card self.age equals method.

00:05:44.120 --> 00:05:48.350
This time we have to pass the insert query and the tuple.

00:05:48.350 --> 00:05:54.000
Finally, we have to close the cursor and commit the connection.

00:05:55.630 --> 00:06:00.140
Let's do the same thing in the read from PC method also,

00:06:00.140 --> 00:06:02.630
it's a best practice to commit

00:06:02.630 --> 00:06:06.125
the connection and close the cursor after every database operations.

00:06:06.125 --> 00:06:07.880
Now we have two methods.

00:06:07.880 --> 00:06:11.375
One reads from Postgres and one rage to Postgres.

00:06:11.375 --> 00:06:14.495
Let's invoke rate to Postgres first.

00:06:14.495 --> 00:06:17.190
Before invoking that read from.

00:06:17.340 --> 00:06:21.400
We'll do self dot right to PC.

00:06:21.400 --> 00:06:26.050
Let's have a print statement within the right to PZ function.

00:06:26.050 --> 00:06:29.540
Let's now run it to see the output.

00:06:29.580 --> 00:06:33.565
We can see that one the court got inserted.

00:06:33.565 --> 00:06:37.429
And it's displaying three total records.

00:06:40.050 --> 00:06:47.630
We can also find a select query in the SQL command prompt to see all the three records.

00:06:49.290 --> 00:06:54.865
So we hard coded the table name in both the queries and we habitat two places.

00:06:54.865 --> 00:06:56.710
So instead of that, let's move

00:06:56.710 --> 00:07:00.260
the table name to the property file that we created earlier.

00:07:05.710 --> 00:07:09.950
We'll store this table limit the property file and we'll retrieve it using

00:07:09.950 --> 00:07:13.280
the PC table key under the database config section,

00:07:13.280 --> 00:07:15.080
which we are already doing in the code.

00:07:15.080 --> 00:07:17.345
Let's go back to the code.

00:07:17.345 --> 00:07:22.340
We are storing the table name in a variable called target table.

00:07:22.340 --> 00:07:24.500
We'll pass it as a parameter to

00:07:24.500 --> 00:07:32.880
both the functions and modify the query to read it from the method parameter.

00:07:40.720 --> 00:07:43.655
So this is what the select query.

00:07:43.655 --> 00:07:47.460
Let's do the same change for the insert query.

00:07:51.220 --> 00:07:56.555
Before running the program will change the new course key to a different value.

00:07:56.555 --> 00:07:59.060
So that will not get unique key constraint era.

00:07:59.060 --> 00:08:06.300
And we'll have a different course name and run the program again.

00:08:09.340 --> 00:08:12.390
Let's check this out.

00:08:13.330 --> 00:08:16.580
We forgot to add a plus sign here.

00:08:16.580 --> 00:08:26.735
Let's fix it. This time we got another error.

00:08:26.735 --> 00:08:30.395
It says missing one required positional argument.

00:08:30.395 --> 00:08:33.860
Though we added target table to both the functions.

00:08:33.860 --> 00:08:39.305
But while invoking, we have not specified that additional parameter.

00:08:39.305 --> 00:08:42.870
Let's fix that and run it again.

00:08:43.930 --> 00:08:47.465
This time it ran fine with the exit code 0.

00:08:47.465 --> 00:08:50.825
Should this is how you can make your application configurable.

00:08:50.825 --> 00:08:54.620
In future referred table empty and this all you could do is modify it.

00:08:54.620 --> 00:08:55.730
We did the property file.

00:08:55.730 --> 00:08:58.380
You do not have to modify the code.
