WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.100 --> 00:00:07.725
Let's look at this default file that creates,

00:00:07.725 --> 00:00:10.930
we'll remove all the comments.

00:00:11.690 --> 00:00:13.770
In a Python program.

00:00:13.770 --> 00:00:16.755
The starting point is this if block,

00:00:16.755 --> 00:00:19.630
which takes Name Is equal to men.

00:00:19.630 --> 00:00:23.969
That's where the program execution begins.

00:00:24.250 --> 00:00:28.760
You could also write this edge, men.

00:00:28.760 --> 00:00:32.430
And this is the main method.

00:00:33.610 --> 00:00:37.050
And from here you call the min.

00:00:40.480 --> 00:00:46.100
That is the way you would see most of the Python programs written in the real world.

00:00:46.100 --> 00:00:51.120
But it's okay to have a different name for domain metadata.

00:00:52.090 --> 00:00:55.760
Let's learn some Python basics.

00:00:55.760 --> 00:01:00.840
We'll do our Python programming within this main method.

00:01:01.720 --> 00:01:05.030
Biotin spacing and indentation matters.

00:01:05.030 --> 00:01:07.400
You can't have print like this.

00:01:07.400 --> 00:01:14.645
It'll give an expected an indented block.

00:01:14.645 --> 00:01:18.875
So all the methods are the different blocks,

00:01:18.875 --> 00:01:21.920
like if block and the blocks,

00:01:21.920 --> 00:01:24.170
the start with indentation.

00:01:24.170 --> 00:01:26.795
And wherever they ended this an edge,

00:01:26.795 --> 00:01:29.880
the method ends or the loop ends.

00:01:30.490 --> 00:01:34.920
We can have a print statement here also.

00:01:40.120 --> 00:01:44.730
These two lines are part of this if loop.

00:01:50.110 --> 00:01:57.125
Python supports all kinds of arithmetic operations, like addition, subtraction.

00:01:57.125 --> 00:01:59.329
Let's declare two variables.

00:01:59.329 --> 00:02:04.590
In Python, you can declare variables without giving the datatype.

00:02:04.840 --> 00:02:08.700
Regard output three-plus four.

00:02:09.130 --> 00:02:15.095
Heavy string value populated with a. Python will complain.

00:02:15.095 --> 00:02:17.990
So depending on what value we are populating,

00:02:17.990 --> 00:02:26.600
Python will take that data type list to the popular data type in Python.

00:02:26.600 --> 00:02:29.610
Collection like an adder,

00:02:29.950 --> 00:02:34.040
where you can have a sequence of elements.

00:02:34.040 --> 00:02:40.400
And then you can grab a particular element by specifying the index number.

00:02:40.400 --> 00:02:50.270
Index number starts with 01.

00:02:50.270 --> 00:02:52.040
If we change it to,

00:02:52.040 --> 00:02:58.140
let's say, three, it would print 1234.

00:02:59.980 --> 00:03:06.059
You can also grab the last element by specifying minus1.

00:03:08.730 --> 00:03:13.130
And minus two would give us second last element.

00:03:18.750 --> 00:03:23.305
In Python, either single quotes or double quotes would work.

00:03:23.305 --> 00:03:26.440
And you can have single courts within

00:03:26.440 --> 00:03:30.115
double quotes are double-quotes within single quote.

00:03:30.115 --> 00:03:35.660
Let's concatenate string one and string two and print it out.

00:03:39.360 --> 00:03:42.610
Let's start looking at loops.

00:03:42.610 --> 00:03:45.340
We've already seen an example of a flu.

00:03:45.340 --> 00:03:48.400
So you write e flew four like this.

00:03:48.400 --> 00:03:53.050
If three is less than four colon,

00:03:53.050 --> 00:03:56.065
then print. We didn't a fluke.

00:03:56.065 --> 00:03:59.875
And wherever indentation edge loop ends,

00:03:59.875 --> 00:04:03.260
we'll print out say the flu,

00:04:12.210 --> 00:04:14.770
Please less than four.

00:04:14.770 --> 00:04:16.225
So it printed book.

00:04:16.225 --> 00:04:19.345
You can also put a parentheses here.

00:04:19.345 --> 00:04:23.330
If we make, let say three greater than four,

00:04:24.990 --> 00:04:28.090
it will not print this lane.

00:04:28.090 --> 00:04:31.960
There are many ways you can date for looping by Tn.

00:04:31.960 --> 00:04:34.410
There is something called range.

00:04:34.410 --> 00:04:38.370
You can break for i in range five.

00:04:40.960 --> 00:04:48.420
Value of high value of phi. Let's do that.

00:04:48.430 --> 00:04:57.990
Range. We can give a comma.

00:05:00.610 --> 00:05:02.660
If I was is clean,

00:05:02.660 --> 00:05:04.220
we could have concatenated.

00:05:04.220 --> 00:05:09.000
But this is another way of predicting values.

00:05:12.400 --> 00:05:16.790
By ten. That is something called string interpolation.

00:05:16.790 --> 00:05:21.260
You can write the value of I0,

00:05:21.260 --> 00:05:25.770
then curly braces, and then you can say dark format.

00:05:29.530 --> 00:05:34.140
So that this value will get bust.

00:05:37.780 --> 00:05:40.670
So that you can have this.

00:05:40.670 --> 00:05:49.730
Or if there is a string you can just concatenate then printed with mainstream.

00:05:49.730 --> 00:05:54.140
You can also have a for loop to loop through a list.

00:05:54.140 --> 00:05:58.070
Let's declare another list, L2.

00:05:58.070 --> 00:06:00.215
Now to look through this,

00:06:00.215 --> 00:06:07.950
you write for j mindless to bring value of j.

00:06:08.980 --> 00:06:15.930
Let's run it. Bring value of j within the loop.

00:06:16.270 --> 00:06:19.940
We've already seen an example of function in Python.

00:06:19.940 --> 00:06:21.740
Desire declared a function.

00:06:21.740 --> 00:06:24.090
Let's have another function.

00:06:26.110 --> 00:06:31.340
We call it calculates sum and take two parameters,

00:06:31.340 --> 00:06:36.330
a, b and return a plus b.

00:06:36.790 --> 00:06:39.200
Now we didn't the main method,

00:06:39.200 --> 00:06:46.790
we'll call this calculate

00:06:46.790 --> 00:06:52.265
some 5-6.

00:06:52.265 --> 00:06:55.230
Let's store it in another variable.

00:06:56.470 --> 00:07:03.425
To equal this will print it out.

00:07:03.425 --> 00:07:06.470
There is a cutout.

00:07:06.470 --> 00:07:09.485
Calculate sum is not defined,

00:07:09.485 --> 00:07:12.210
will fix this typo.

00:07:13.360 --> 00:07:19.325
You got 11. We can also return multiple values,

00:07:19.325 --> 00:07:21.980
let say sum and multiplication.

00:07:21.980 --> 00:07:25.880
Both. The way to do that is we take comma,

00:07:25.880 --> 00:07:29.340
you can specify what all things you want to return.

00:07:30.820 --> 00:07:36.005
Now we're returning a plus b and multiplied by me.

00:07:36.005 --> 00:07:38.840
And we can store it in two variables,

00:07:38.840 --> 00:07:43.770
three, by declaring them like this.

00:07:51.220 --> 00:08:03.120
Then 23, and then print wherefore.

00:08:09.400 --> 00:08:17.645
We got the, we got 200 suitable to return two values from a function in Python.

00:08:17.645 --> 00:08:21.080
To write data to a file.

00:08:21.080 --> 00:08:24.185
You simply do with open.

00:08:24.185 --> 00:08:29.900
Give the file name and mortis w, that is trade.

00:08:29.900 --> 00:08:36.060
And then break. Let's execute this.

00:08:47.710 --> 00:08:50.930
My failed one got created, let's check it out.

00:08:50.930 --> 00:08:53.970
Sample content one has been populated.

00:08:54.160 --> 00:08:56.375
We tend to append mode.

00:08:56.375 --> 00:08:58.920
You can append more content.

00:09:05.410 --> 00:09:10.590
So discontent appended to the artisanal content.

00:09:11.440 --> 00:09:15.840
You can have w rate model.

00:09:16.960 --> 00:09:22.200
Let's contend with new content.

00:09:23.170 --> 00:09:26.610
So the content got overwritten.
