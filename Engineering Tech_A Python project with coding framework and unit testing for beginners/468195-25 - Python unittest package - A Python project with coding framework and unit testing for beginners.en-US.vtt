WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.820
In the real-world, you'll be unit testing

00:00:02.820 --> 00:00:05.910
your code before handing it over to the testing team.

00:00:05.910 --> 00:00:09.930
So let's understand how to do unit testing of Python application using

00:00:09.930 --> 00:00:14.265
unit disk package is a best practice for each of your Python file.

00:00:14.265 --> 00:00:16.155
You'll create a separate test violin.

00:00:16.155 --> 00:00:19.200
For example, what parses dot-dot-dot EU levels the pre-test.

00:00:19.200 --> 00:00:22.200
Finally, the convincing is to prefix

00:00:22.200 --> 00:00:27.430
test underscore with whatever file limb and then create that test Python file.

00:00:27.650 --> 00:00:30.315
Let's create it. Taste for.

00:00:30.315 --> 00:00:34.705
Sys.path, will create it under the root directory.

00:00:34.705 --> 00:00:39.870
We'll call it test underscore persist dot py.

00:00:40.150 --> 00:00:43.850
First we need to import unit test package.

00:00:43.850 --> 00:00:46.280
Unit test is a Python package or liability

00:00:46.280 --> 00:00:49.670
using which you can create taste for your Python application.

00:00:49.670 --> 00:00:52.580
Next unit to create a class.

00:00:52.580 --> 00:00:54.470
Whatever class you are testing.

00:00:54.470 --> 00:00:57.800
For example, we will be testing persist data will create

00:00:57.800 --> 00:01:01.700
a test class appending to the class name.

00:01:01.700 --> 00:01:06.515
Then within bracket we need to write unit tests, tart taste case.

00:01:06.515 --> 00:01:09.680
After that, we can create different test cases.

00:01:09.680 --> 00:01:12.860
For each test case, we need to have a function.

00:01:12.860 --> 00:01:16.505
Let's create a test called taste underscore first.

00:01:16.505 --> 00:01:18.860
And whatever function you right here,

00:01:18.860 --> 00:01:21.785
it has to be prefixed with test underscore.

00:01:21.785 --> 00:01:26.045
After that, we can write our test within this function.

00:01:26.045 --> 00:01:29.285
We can write this using the assert functions.

00:01:29.285 --> 00:01:31.355
Let's start with the assertEquals.

00:01:31.355 --> 00:01:34.550
Using yesterday qual you can compare two variables or

00:01:34.550 --> 00:01:39.900
constructs are objects. Let's compare 34.

00:01:40.150 --> 00:01:42.830
If it is equal when the test would pass,

00:01:42.830 --> 00:01:44.810
otherwise the test would fail.

00:01:44.810 --> 00:01:47.850
Now let's run the test.

00:01:53.440 --> 00:01:56.135
It says the test failed.

00:01:56.135 --> 00:01:58.220
Now if we compare 33,

00:01:58.220 --> 00:02:00.390
the taste would pass.

00:02:00.910 --> 00:02:05.250
Let's write another test using assert true.

00:02:07.180 --> 00:02:11.165
Then we can write any expression here.

00:02:11.165 --> 00:02:14.480
For example, if this string is an uppercase,

00:02:14.480 --> 00:02:17.060
the taste would pass all ready to fail.

00:02:17.060 --> 00:02:20.885
Let's run it and see it passed.

00:02:20.885 --> 00:02:27.900
If we write it in small letters, the taste would fail.

00:02:28.420 --> 00:02:31.955
Also, we need to give each tasted different name.

00:02:31.955 --> 00:02:34.470
Let's call it second test.

00:02:37.150 --> 00:02:39.740
So this failed.

00:02:39.740 --> 00:02:47.690
Correct it. Now we can click here to run all the tests defined under the class.

00:02:47.690 --> 00:02:53.310
We didn't PyCharm. We can click on this icon to see all the taste in their status.

00:02:53.650 --> 00:02:57.485
Let's change this and run it again.

00:02:57.485 --> 00:03:01.170
See that one test failed in one test passed.

00:03:01.480 --> 00:03:09.230
It also shows you or you can also define a main function.

00:03:09.230 --> 00:03:12.515
Then right here, unit, they start men.

00:03:12.515 --> 00:03:15.740
This is another way to execute your test.

00:03:15.740 --> 00:03:20.010
Let's go to command line and run the test.

00:03:20.050 --> 00:03:23.070
Will say Python.

00:03:24.190 --> 00:03:27.260
It would invoke the main function.

00:03:27.260 --> 00:03:30.455
Let's change this and run it again.

00:03:30.455 --> 00:03:34.620
And it says one test pass and one failed.
