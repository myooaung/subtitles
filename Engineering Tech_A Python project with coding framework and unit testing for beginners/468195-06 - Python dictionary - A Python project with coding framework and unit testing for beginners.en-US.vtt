WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.295
Let's now understand an important Python data type called dictionary.

00:00:05.295 --> 00:00:12.100
Let's create a new project and name it as my project 2.

00:00:14.810 --> 00:00:18.160
Will open it in a new window.

00:00:20.570 --> 00:00:24.040
Let's delete these commands.

00:00:25.550 --> 00:00:33.990
Will run it to make sure everything is okay. It runs fine.

00:00:33.990 --> 00:00:38.925
Let's now declared a variable in which will store dictionary data.

00:00:38.925 --> 00:00:42.190
The variable name would be my course.

00:00:42.190 --> 00:00:45.335
A dictionary stores key-value pairs.

00:00:45.335 --> 00:00:52.445
Let's declare key for each course and then also a good name for the corresponding key.

00:00:52.445 --> 00:00:54.830
Bulimic key called BD.

00:00:54.830 --> 00:01:00.150
And the corresponding name of the course would be a big Data Hadoop Spark project.

00:01:01.300 --> 00:01:05.120
Then we can put a command art more keys.

00:01:05.120 --> 00:01:07.625
Let's have another one called ML.

00:01:07.625 --> 00:01:12.540
And the course name would be machine learning model deployment.

00:01:15.190 --> 00:01:19.745
We'll add one more. Let's call it java.

00:01:19.745 --> 00:01:24.600
And course name is a Java Spring Boot microservices project.

00:01:25.090 --> 00:01:27.620
Now let's print value of a key.

00:01:27.620 --> 00:01:31.745
The way to do that is you specify the key name within square bracket.

00:01:31.745 --> 00:01:36.030
We can see that Java course name is getting printed.

00:01:36.400 --> 00:01:41.210
So key and value can be either in single quote or double quote.

00:01:41.210 --> 00:01:43.940
We can print the entire dictionary.

00:01:43.940 --> 00:01:46.800
It would print all the keys and the values.

00:01:47.320 --> 00:01:52.190
We can Arctic key to the dictionary by giving the dictionary name

00:01:52.190 --> 00:01:57.065
and the key name in the square bracket and the corresponding value after the equal sign.

00:01:57.065 --> 00:01:59.765
Let's add a new key called Spark,

00:01:59.765 --> 00:02:01.250
and the value would be pi.

00:02:01.250 --> 00:02:05.450
Spark coding framework will print the dictionary.

00:02:05.450 --> 00:02:07.500
After adding this key.

00:02:07.710 --> 00:02:12.230
We can see that the new key and the value has been added.

00:02:12.360 --> 00:02:16.030
You can use the same syntax to update a key.

00:02:16.030 --> 00:02:18.460
Also, if the key already exists,

00:02:18.460 --> 00:02:20.650
it will update the value.

00:02:20.650 --> 00:02:25.120
Let's change the value of sparky to something else.

00:02:25.120 --> 00:02:28.090
We'll call it sparks color-coding framework.

00:02:28.090 --> 00:02:31.135
Syntax wise, it's same as adding a key.

00:02:31.135 --> 00:02:34.030
Now if we print it again,

00:02:34.030 --> 00:02:37.270
first we'll see the old value,

00:02:37.270 --> 00:02:38.830
and then after that,

00:02:38.830 --> 00:02:41.510
we'll see the updated value.

00:02:42.150 --> 00:02:49.440
To delete a key, use the del keyword and then specify a dictionary and the key name.

00:02:49.440 --> 00:02:52.685
Let's delete ML.

00:02:52.685 --> 00:02:56.460
And after deleting will print the dictionary again.

00:02:59.170 --> 00:03:02.600
We can see that the milky has been deleted,

00:03:02.600 --> 00:03:05.550
has shown in that last print statement.

00:03:05.680 --> 00:03:10.235
Let's now try to print the value of a key which doesn't exist.

00:03:10.235 --> 00:03:12.455
We got an error that is key error.

00:03:12.455 --> 00:03:15.200
It says CMS key doesn't exist.

00:03:15.200 --> 00:03:20.490
We can avert this error by using the dot get method of the dictionary.

00:03:21.400 --> 00:03:25.490
Simply say dot get and specify any key name.

00:03:25.490 --> 00:03:28.025
If the key doesn't exist, it would return null.

00:03:28.025 --> 00:03:29.870
It would not throw an error.

00:03:29.870 --> 00:03:35.465
Let's run it and see the stems are program exited with code.

00:03:35.465 --> 00:03:37.010
That is success score.

00:03:37.010 --> 00:03:40.260
And we can see that none is getting printed.

00:03:40.840 --> 00:03:44.165
None is also false in Python.

00:03:44.165 --> 00:03:48.030
We can use that to write a conditional block.

00:03:48.040 --> 00:03:52.085
Let's store this value in a, another variable.

00:03:52.085 --> 00:03:55.010
We'll name it as course exist.

00:03:55.010 --> 00:03:57.185
And if course exist,

00:03:57.185 --> 00:03:58.790
that means if it is not none,

00:03:58.790 --> 00:04:01.830
then we'll print the value, of course exist.

00:04:02.200 --> 00:04:07.460
If it is none, it would enter the else block and there will print.

00:04:07.460 --> 00:04:09.870
Course doesn't exist.

00:04:14.350 --> 00:04:17.610
We can put any string here.

00:04:21.610 --> 00:04:25.530
So now it printed course doesn't exist.

00:04:26.020 --> 00:04:30.380
And if we specify key that exists, for example,

00:04:30.380 --> 00:04:36.210
Spark, then it would enter the if block and it will print the course name.

00:04:36.310 --> 00:04:41.340
So this is how you can do programming using dictionary.
