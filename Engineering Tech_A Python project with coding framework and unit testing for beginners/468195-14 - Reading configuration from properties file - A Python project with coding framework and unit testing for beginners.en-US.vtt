WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.420 --> 00:00:05.110
Let's now understand how to read properties from a config file.

00:00:05.110 --> 00:00:09.835
In the previous labs, we saw how to read logging parameters from a config file.

00:00:09.835 --> 00:00:11.440
But in a real-world application,

00:00:11.440 --> 00:00:14.335
there'll be several other properties other than the logging properties

00:00:14.335 --> 00:00:18.355
that you might want to store in the properties file and breathe at runtime.

00:00:18.355 --> 00:00:22.990
The advantage of a configured properly fail is if the value change,

00:00:22.990 --> 00:00:25.090
then you do not have to modify the code.

00:00:25.090 --> 00:00:29.080
You can just modify the values in the property or the config file.

00:00:29.080 --> 00:00:32.380
So let's understand that clean example.

00:00:32.380 --> 00:00:36.325
Under the Resources folder will create a property file.

00:00:36.325 --> 00:00:40.135
In Python, you create a property file with INA extensive,

00:00:40.135 --> 00:00:43.820
let's call it File Processor dot ionize.

00:00:44.170 --> 00:00:46.655
Within this property file,

00:00:46.655 --> 00:00:50.645
we can have different sections for different types of properties.

00:00:50.645 --> 00:00:54.300
Let's have a section for database conflicts.

00:00:54.700 --> 00:00:58.790
Under that will have a property called PZ table,

00:00:58.790 --> 00:01:00.665
which transport Postgres table.

00:01:00.665 --> 00:01:03.230
Later on we'll use this table in the code.

00:01:03.230 --> 00:01:07.770
For now let's understand how to read this property from the properties file.

00:01:08.680 --> 00:01:12.425
Will have future x-dot courts table.

00:01:12.425 --> 00:01:16.055
Puja next is the schema and coach table is the table name.

00:01:16.055 --> 00:01:19.955
Let's declare this and now let's read this value in the code.

00:01:19.955 --> 00:01:22.250
We'll go to persist dot py.

00:01:22.250 --> 00:01:25.680
First we need to import the conflict parser.

00:01:28.180 --> 00:01:33.620
Instantiate an object, config using the conflict parser class available in

00:01:33.620 --> 00:01:35.840
the conflict parser liability

00:01:35.840 --> 00:01:40.625
configured the read method using which we can read a particular property file.

00:01:40.625 --> 00:01:45.090
We need to specify the path relative to the root directory.

00:01:45.610 --> 00:01:49.670
What's single quarter in double-quotes would work here.

00:01:49.670 --> 00:01:55.730
Next, using config will face that table name and stored it in a target table variable.

00:01:55.730 --> 00:01:58.295
Configures a getMethod.

00:01:58.295 --> 00:02:00.800
It takes 67.

00:02:00.800 --> 00:02:03.395
And the property name is parameters,

00:02:03.395 --> 00:02:06.990
you know, disrupted by which section and which property.

00:02:08.050 --> 00:02:12.140
So we have a section called database conflicts.

00:02:12.140 --> 00:02:14.705
Let's declare that here.

00:02:14.705 --> 00:02:22.730
And then the property name is busy table.

00:02:22.730 --> 00:02:26.930
And let's try and adopt print statement.

00:02:26.930 --> 00:02:30.110
Self.age, Blogger dot debug.

00:02:30.110 --> 00:02:33.350
Target, table name is.

00:02:33.350 --> 00:02:36.330
We'll concatenate this.

00:02:38.350 --> 00:02:47.790
Now let's run it. We can see that the table name is getting rid from the property file.

00:02:48.970 --> 00:02:55.260
Hey key, which doesn't take just let's change it to PC W2 and run it.

00:02:56.650 --> 00:03:00.500
So there are got printed in the except block,

00:03:00.500 --> 00:03:04.890
no ops and for p z table 2 in database conflicts.

00:03:07.330 --> 00:03:11.300
So this is how you can store different properties

00:03:11.300 --> 00:03:15.330
in a property file in Python and use it in your application.
