WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.220 --> 00:00:05.490
From here on, we'll dive into more real-world programming.

00:00:05.490 --> 00:00:08.985
We'll build a Python module to ingest data from a file,

00:00:08.985 --> 00:00:13.425
do some processing, and then persist our data to a data store.

00:00:13.425 --> 00:00:15.180
We live it driver program,

00:00:15.180 --> 00:00:18.044
which we'll first invoke the in this module to justify.

00:00:18.044 --> 00:00:22.665
And then the driver program would call the module, parses the file.

00:00:22.665 --> 00:00:24.405
While building this framework,

00:00:24.405 --> 00:00:26.820
we would learn how to structure the code,

00:00:26.820 --> 00:00:28.440
how to create classes,

00:00:28.440 --> 00:00:31.185
how to call one Python file from another file,

00:00:31.185 --> 00:00:32.970
and various other concepts.

00:00:32.970 --> 00:00:35.530
So let's see that in action.

00:00:36.020 --> 00:00:40.360
Let's go to PyCharm and create a new project.

00:00:42.790 --> 00:00:46.620
We'll name it as file processor.

00:00:49.810 --> 00:00:53.190
Will open it in this window.

00:00:56.470 --> 00:01:00.480
And let's first get rid of all the commits.

00:01:01.930 --> 00:01:07.190
You can right-click on a file and do Refactor Rename.

00:01:07.190 --> 00:01:10.040
When you refactor by each n will automatically update

00:01:10.040 --> 00:01:13.460
the file level at all the places where the file is getting used.

00:01:13.460 --> 00:01:16.110
Let's call it driver dot-dot-dot.

00:01:18.460 --> 00:01:22.530
We'll just run it to make sure everything is okay.

00:01:24.850 --> 00:01:27.365
Right, so this runs fine.

00:01:27.365 --> 00:01:31.560
Let's add a simple print statement at the top of the program.

00:01:35.650 --> 00:01:39.360
And let's run it and see what happens.

00:01:40.030 --> 00:01:45.590
If we can see here the fast lane got printed and then by jab got printed.

00:01:45.590 --> 00:01:47.210
When a Python program starts,

00:01:47.210 --> 00:01:50.585
it executes all the core that is outside of any method,

00:01:50.585 --> 00:01:52.490
including the main method.

00:01:52.490 --> 00:01:56.000
So it'll execute this first and then call the main method.

00:01:56.000 --> 00:02:00.410
And then whatever code is getting executed from the main method that will get executed.

00:02:00.410 --> 00:02:03.425
We can also run a Python program without any method.

00:02:03.425 --> 00:02:06.935
Let's delete this and run it again.

00:02:06.935 --> 00:02:08.930
This will also run fine.

00:02:08.930 --> 00:02:11.400
We'll open a command prompt.

00:02:17.740 --> 00:02:21.060
We'll go to this directory.

00:02:26.320 --> 00:02:31.985
From a command prompt will execute it by saying Python driver dot py.

00:02:31.985 --> 00:02:34.010
So this is how you will execute Python in

00:02:34.010 --> 00:02:37.350
any Linux environment or in any production environment.

00:02:37.750 --> 00:02:40.370
It takes you go to this link.

00:02:40.370 --> 00:02:43.790
Now let's add this main method and the other method,

00:02:43.790 --> 00:02:46.320
and we'll also have a print statement here.

00:02:50.980 --> 00:02:55.280
Good. First printed the line which is outside all the methods,

00:02:55.280 --> 00:02:57.125
then it printed entering the main method,

00:02:57.125 --> 00:02:58.580
then it printed the print statement,

00:02:58.580 --> 00:03:01.700
which is within the print method.

00:03:01.700 --> 00:03:05.315
If we run it from here, we'll also get the same output.

00:03:05.315 --> 00:03:09.450
This is our Python program gets executed.

00:03:09.760 --> 00:03:13.835
We can also do object-oriented programming in Python.

00:03:13.835 --> 00:03:17.225
We can create a class and write functions within that.

00:03:17.225 --> 00:03:18.980
So let's see how that works.

00:03:18.980 --> 00:03:22.650
Let's create a class called driver program.

00:03:23.650 --> 00:03:27.140
And within that will create functions.

00:03:27.140 --> 00:03:29.885
We'll have a function, let's say my function.

00:03:29.885 --> 00:03:35.000
By default, all class level methods take self as a parameter.

00:03:35.000 --> 00:03:38.105
Self represents instance of the class.

00:03:38.105 --> 00:03:41.960
And using self, we can extract all class-level variables.

00:03:41.960 --> 00:03:44.390
We'll see that in example shortly.

00:03:44.390 --> 00:03:47.510
Let's have a simple print statement for now.

00:03:47.510 --> 00:03:51.485
Inside my function.

00:03:51.485 --> 00:03:57.500
Now the way to invoke this function is by first instantiating the class,

00:03:57.500 --> 00:04:00.185
then calling my function method.

00:04:00.185 --> 00:04:02.270
Let's see how that will work.

00:04:02.270 --> 00:04:04.985
We'll instantiate the class driver program.

00:04:04.985 --> 00:04:07.590
Let's have an object called driver.

00:04:08.920 --> 00:04:16.655
And the way to instantiate classes by giving the class name and then parentheses,

00:04:16.655 --> 00:04:19.460
which will invoke the default initializer or constructor,

00:04:19.460 --> 00:04:21.560
will come to that in a bit.

00:04:21.560 --> 00:04:24.035
Now once you have a driver object,

00:04:24.035 --> 00:04:26.640
we can call the main function.

00:04:27.160 --> 00:04:30.140
So though this takes self as a parameter,

00:04:30.140 --> 00:04:32.150
we do not need to write self here.

00:04:32.150 --> 00:04:34.400
But if you have more parameters,

00:04:34.400 --> 00:04:36.410
then we can specify them here.

00:04:36.410 --> 00:04:38.750
We'll see many examples of that.

00:04:38.750 --> 00:04:45.425
Let's first run it. And you can see the sequence of execution here.

00:04:45.425 --> 00:04:47.060
This is my driver program,

00:04:47.060 --> 00:04:49.805
which is the first line in the Python program that got executed.

00:04:49.805 --> 00:04:51.410
Then it entered the main method.

00:04:51.410 --> 00:04:54.920
It executed a function which is outside the class.

00:04:54.920 --> 00:04:56.825
So you can have functions,

00:04:56.825 --> 00:05:01.310
our save the class and within the class in the same Python program.

00:05:01.310 --> 00:05:06.995
After that, we instantiated the driver class and call dot driver class.

00:05:06.995 --> 00:05:12.410
My function will learn

00:05:12.410 --> 00:05:16.850
more about class-level functions and constructors in the subsequent labs.

00:05:16.850 --> 00:05:22.050
For now, Let's add two more Python files and invoke them from the driver program.

00:05:31.060 --> 00:05:33.995
Let's create a class for it.

00:05:33.995 --> 00:05:36.810
We call it FileReader.

00:05:38.740 --> 00:05:43.380
And let's have a function called read file.

00:05:45.760 --> 00:05:49.680
We'll have a simple print statement for now.

00:05:59.950 --> 00:06:03.720
Let's click another button file.

00:06:06.760 --> 00:06:09.080
It parses start by.

00:06:09.080 --> 00:06:12.950
And we'll use this Python program to store data to Postgres table.

00:06:12.950 --> 00:06:19.175
Later. We'll create a class.

00:06:19.175 --> 00:06:21.500
Let's call it parses data,

00:06:21.500 --> 00:06:26.310
and declared a function called store data.

00:06:29.470 --> 00:06:35.310
And we'll have a simple print statement for now storing data.

00:06:40.360 --> 00:06:43.805
Now the investor and persisters,

00:06:43.805 --> 00:06:47.820
they're in the same directory is driver dot py.

00:06:49.540 --> 00:06:53.375
We'll create an instance for the FileReader class.

00:06:53.375 --> 00:06:55.710
Let's call it ingest.

00:06:56.320 --> 00:06:58.910
File reader will not be visible to

00:06:58.910 --> 00:07:03.185
this Python program unless we import though in distort by file.

00:07:03.185 --> 00:07:07.910
The way to import a Python file is by just giving the Python filename import ingest,

00:07:07.910 --> 00:07:10.860
and then we'll also import persist.

00:07:17.140 --> 00:07:22.535
Now we can say in just dot FileReader and instantiate the class.

00:07:22.535 --> 00:07:25.445
Let's change the object name to reader.

00:07:25.445 --> 00:07:30.360
Let's also create an object lighter for the class.

00:07:31.270 --> 00:07:35.375
Now we can say reader read file.

00:07:35.375 --> 00:07:38.180
Then we can say writer datastore data.

00:07:38.180 --> 00:07:40.800
Let's now geocoded.

00:07:41.470 --> 00:07:44.930
So it executed the code that we had written earlier.

00:07:44.930 --> 00:07:48.500
Now it also created an instance of

00:07:48.500 --> 00:07:52.415
the FileReader and instance of the purchase data class.

00:07:52.415 --> 00:07:55.205
And then it invoke the methods.

00:07:55.205 --> 00:07:57.890
This is how you can structure your code using

00:07:57.890 --> 00:08:00.920
different Python files and classes and functions.

00:08:00.920 --> 00:08:05.180
We'll keep announcing this application in subsequent labs and

00:08:05.180 --> 00:08:10.230
build an end-to-end application per processing file and storing the output data.
