WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.890 --> 00:00:04.650
Let's now understand how to use logging in Python.

00:00:04.650 --> 00:00:06.900
Till now we have been using print statement.

00:00:06.900 --> 00:00:09.630
In the real-world, you'll be using Python logging framework or

00:00:09.630 --> 00:00:15.420
some other logging framework so that you can control the log level at runtime.

00:00:15.420 --> 00:00:17.565
So let's understand how that works.

00:00:17.565 --> 00:00:22.900
First, we need to import the logging libraries that is available in Python.

00:00:23.600 --> 00:00:27.795
Logging is various methods using which you can print log.

00:00:27.795 --> 00:00:30.820
Let's write login dot debug.

00:00:30.940 --> 00:00:34.415
This is a debug message.

00:00:34.415 --> 00:00:36.485
This is an info message.

00:00:36.485 --> 00:00:39.439
And then logging dot-dot-dot,

00:00:39.439 --> 00:00:43.355
wanting for wanting misses.

00:00:43.355 --> 00:00:47.160
And we also have something called data.

00:00:47.770 --> 00:00:51.560
Now let's run this and see how this works.

00:00:51.560 --> 00:00:55.175
We can see that the wanting bases in the edit Mrs. got printed.

00:00:55.175 --> 00:00:58.010
However, the debug and in four did not get printed.

00:00:58.010 --> 00:01:00.830
So by default, the logging level in Python is

00:01:00.830 --> 00:01:04.580
wanting and anything higher than wanting gets printed.

00:01:04.580 --> 00:01:07.310
So let's see how to set the log level.

00:01:07.310 --> 00:01:12.840
To do that, we can invoke the basic config method and then specify the level here.

00:01:16.300 --> 00:01:20.000
Let's specify the level is info.

00:01:20.000 --> 00:01:22.040
Now once we do that,

00:01:22.040 --> 00:01:25.460
info and anything higher than that would get printed,

00:01:25.460 --> 00:01:27.515
Let's run it again and see the output.

00:01:27.515 --> 00:01:30.330
We need to write it in capital.

00:01:32.230 --> 00:01:34.970
Now we can see that info,

00:01:34.970 --> 00:01:37.010
warning and error are getting printed.

00:01:37.010 --> 00:01:39.095
And if you want to print debug,

00:01:39.095 --> 00:01:42.335
we can set the log level to debug also.

00:01:42.335 --> 00:01:44.960
Now all four are getting printed.

00:01:44.960 --> 00:01:48.739
So this is how we can use Python logging libraries.

00:01:48.739 --> 00:01:50.390
And instead of print statement,

00:01:50.390 --> 00:01:52.730
we can have log statements and then

00:01:52.730 --> 00:01:56.235
control various log levels depending on our requirement.

00:01:56.235 --> 00:02:00.115
Typically in a production environment you would print only wanting an error.

00:02:00.115 --> 00:02:02.125
But if you encounter any issues,

00:02:02.125 --> 00:02:04.690
then you would set the log level to debugger in

00:02:04.690 --> 00:02:08.365
fought to get more information from the application.

00:02:08.365 --> 00:02:12.265
Now let's replace print statements with this.

00:02:12.265 --> 00:02:20.365
Log statements. Will move this to a class level variable.

00:02:20.365 --> 00:02:24.925
Let's remove the log statements from the main method.

00:02:24.925 --> 00:02:28.150
And within the class wherever we have print,

00:02:28.150 --> 00:02:30.760
we'll replace that with logging dot debug.

00:02:30.760 --> 00:02:33.325
Let's run and see the output.

00:02:33.325 --> 00:02:37.225
Now we can see that the debug statements are getting printed.

00:02:37.225 --> 00:02:39.650
It hired log level,

00:02:39.650 --> 00:02:41.360
like in for wanting,

00:02:41.360 --> 00:02:44.250
then this will not get printed.

00:02:46.150 --> 00:02:50.850
Now as you can see, the debug statements are not getting printed.

00:02:53.230 --> 00:02:57.840
We could do the same thing within other classes also.

00:03:00.430 --> 00:03:03.870
Let's import logging here.

00:03:04.450 --> 00:03:07.475
We got an error, let's check it out.

00:03:07.475 --> 00:03:10.770
We need to write it in small letters.

00:03:12.940 --> 00:03:17.855
None of the debug statements are getting printed because you have set it to wanting.

00:03:17.855 --> 00:03:20.225
If we change it to debug,

00:03:20.225 --> 00:03:23.700
then the debug statement should get printed.

00:03:26.380 --> 00:03:30.290
One thing to note here is though we changed only for the FileReader.

00:03:30.290 --> 00:03:33.320
It is also printing the debug statements within the driver class.

00:03:33.320 --> 00:03:35.465
This is because we have the same logger,

00:03:35.465 --> 00:03:38.045
that is the root logger in all the classes.

00:03:38.045 --> 00:03:42.350
In the next lab, we'll understand how to read logging configuration from

00:03:42.350 --> 00:03:47.880
a property file and how to have different logging levels in different classes.
