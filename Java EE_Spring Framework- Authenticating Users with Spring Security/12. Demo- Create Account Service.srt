1
00:00:00,040 --> 00:00:04,690
The first step in creating our service tier is to create our

2
00:00:04,690 --> 00:00:08,790
AccountService interface. And I'm going to stop our server to give

3
00:00:08,790 --> 00:00:12,740
ourselves a little bit more real estate to work with here.

4
00:00:12,740 --> 00:00:16,460
If I go down to our service package that we have created,

5
00:00:16,460 --> 00:00:22,450
and right‑click and say New, we can click Java Class,

6
00:00:22,450 --> 00:00:25,790
although we're going to choose Interface, and we'll call it the

7
00:00:25,790 --> 00:00:35,260
AccountService, and click Enter. And this will give us our blank

8
00:00:35,260 --> 00:00:39,190
interface that we can start putting those methods into. And we're

9
00:00:39,190 --> 00:00:45,520
going to add three methods in here, a public Account create,

10
00:00:45,520 --> 00:00:51,640
which takes in an Account as the method signature; a createVerificationToken,

11
00:00:51,640 --> 00:00:55,680
which takes in an Account and a String token; and

12
00:00:55,680 --> 00:01:01,940
then eventually a confirmAccount, which will take in the String token as well.

13
00:01:01,940 --> 00:01:04,340
So let's save this interface.

14
00:01:04,340 --> 00:01:08,150
Then I'm going to exit full screen for a minute here and right‑click on

15
00:01:08,150 --> 00:01:12,050
our service package again, and say New Java Class,

16
00:01:12,050 --> 00:01:24,140
and this time it will be the Java Class. We'll say AccountServiceImpl,

17
00:01:24,140 --> 00:01:35,940
and this will be annotated as a Service, and it implements the

18
00:01:35,940 --> 00:01:41,800
AccountService interface. And this should give us an error, and

19
00:01:41,800 --> 00:01:46,090
if we hover over that, we can choose to implement the methods,

20
00:01:46,090 --> 00:01:48,840
and we'll select all three.

21
00:01:48,840 --> 00:01:53,000
This gives us our basic signature of what we want to

22
00:01:53,000 --> 00:01:57,080
create for all of these methods.

23
00:01:57,080 --> 00:02:00,920
So now we have our Service in place, it's annotated as a Service.

24
00:02:00,920 --> 00:02:04,360
We can access it through the interface, we need to tie that into our

25
00:02:04,360 --> 00:02:06,740
controller here in a minute, but since we're here,

26
00:02:06,740 --> 00:02:11,360
let's carry out the next step, and that is the repository as well. So this

27
00:02:11,360 --> 00:02:16,260
needs to talk to the database, and a service will talk to a repository, and

28
00:02:16,260 --> 00:02:19,410
the repository has the actual database code in there.

29
00:02:19,410 --> 00:02:21,260
So let's add those pieces as well.

30
00:02:21,260 --> 00:02:25,990
The repository will be in a separate interface and class,

31
00:02:25,990 --> 00:02:30,520
so we'll want to create a new package. And we'll do that by going to

32
00:02:30,520 --> 00:02:37,660
com.pluralsight.conference, right‑clicking and saying New Class, and we can

33
00:02:37,660 --> 00:02:50,340
type in repository.AccountRepository and select Interface,

34
00:02:50,340 --> 00:02:55,820
and that will create the AccountRepository interface. And inside of

35
00:02:55,820 --> 00:02:59,120
here we're going to have one signature to start with,

36
00:02:59,120 --> 00:03:02,210
and that is the create account.

37
00:03:02,210 --> 00:03:06,260
I will be honest with you, the AccountRepository is going to be the

38
00:03:06,260 --> 00:03:09,320
more complex class that we have to deal with in this,

39
00:03:09,320 --> 00:03:13,550
because it's going to do all of the interaction that we have with the database.

40
00:03:13,550 --> 00:03:17,440
Now this is almost the same exact thing,

41
00:03:17,440 --> 00:03:23,560
if you choose to use Hibernate or JPA. I've used Spring JWC to not add

42
00:03:23,560 --> 00:03:27,130
yet another dependency inside of here. And it's pretty straightforward,

43
00:03:27,130 --> 00:03:30,720
and generally people understand the database side of it, and have to

44
00:03:30,720 --> 00:03:32,350
work with an existing data model, which,

45
00:03:32,350 --> 00:03:36,190
if you are working with an existing data model, Hibernate can be a little bit

46
00:03:36,190 --> 00:03:41,650
more complex, so we'll go through the Spring JDBC route. And I'm going to

47
00:03:41,650 --> 00:03:46,340
right‑click on Repository and create a New Class.

48
00:03:46,340 --> 00:03:54,860
And that will be the AccountRepositoryImpl, and this will be annotated as a

49
00:03:54,860 --> 00:04:08,100
repository, and it will implement the AccountRepository interface. And the same

50
00:04:08,100 --> 00:04:11,650
as we did with the service, if we hover over this,

51
00:04:11,650 --> 00:04:15,840
it will give us the option to implement the methods that we have so far,

52
00:04:15,840 --> 00:04:17,870
which is just the create.

53
00:04:17,870 --> 00:04:23,480
Now we can inject the dataSource that we have and create a

54
00:04:23,480 --> 00:04:30,340
JdbcTemplate to inject that first account into our database.

55
00:04:30,340 --> 00:04:34,620
Let's go back to our AccountController and start injecting in all the

56
00:04:34,620 --> 00:04:37,840
resources that we want to use inside of our application, from the

57
00:04:37,840 --> 00:04:40,340
controller clear back to the repository.

58
00:04:40,340 --> 00:04:50,540
We'll start off here by saying @Autowired. We want to put in a private

59
00:04:50,540 --> 00:04:58,900
AccountService, and we'll put that in a variable accountService, and then

60
00:04:58,900 --> 00:05:08,740
we'll also do an @Autowired private PasswordEncoder.

61
00:05:08,740 --> 00:05:11,990
And this is so we can encrypt the password that we have inside

62
00:05:11,990 --> 00:05:15,640
of our account object that gets passed in.

63
00:05:15,640 --> 00:05:16,840
Now that we have those two in there,

64
00:05:16,840 --> 00:05:25,940
we'll go down to our post, and we can encrypt that password.

65
00:05:25,940 --> 00:05:41,040
So we'll just say account.setPassword and we'll say encode account.getPassword.

66
00:05:41,040 --> 00:05:45,230
So we're going to encrypt that password that was passed in and reassign

67
00:05:45,230 --> 00:05:49,650
that back out to our account. And then, down below here,

68
00:05:49,650 --> 00:05:54,650
we can use that service that we just created and say account is equal

69
00:05:54,650 --> 00:06:03,440
to accountService.create, and pass in our account.

70
00:06:03,440 --> 00:06:07,570
Now you may be asking why I am returning account and

71
00:06:07,570 --> 00:06:09,890
assigning it when we already have it,

72
00:06:09,890 --> 00:06:12,760
and that's because a lot of times on our back end, not always,

73
00:06:12,760 --> 00:06:16,150
but it's a good habit to get into, on our back end we may modify

74
00:06:16,150 --> 00:06:19,530
that object and return it, so we may assign an auto‑incrementing

75
00:06:19,530 --> 00:06:23,310
field out of the database or modify it in some other way, and we

76
00:06:23,310 --> 00:06:24,480
want to return that back.

77
00:06:24,480 --> 00:06:26,830
Not always, but it's a good habit to get into.

78
00:06:26,830 --> 00:06:29,220
Now that we have that assigned on our accountService,

79
00:06:29,220 --> 00:06:29,640
though,

80
00:06:29,640 --> 00:06:36,020
we can go to the actual service implementation, and inside of here we

81
00:06:36,020 --> 00:06:39,000
can Autowire in our repository that we just created.

82
00:06:39,000 --> 00:06:46,640
So kind of the same thing, we'll say @Autowired, we'll pass in a private

83
00:06:46,640 --> 00:06:55,740
AccountRepository and assign that to an accountRepository variable.

84
00:06:55,740 --> 00:06:58,940
And inside of our create here,

85
00:06:58,940 --> 00:07:12,340
we can call accountRepository.create, and pass in account as well, and

86
00:07:12,340 --> 00:07:17,740
save that. And now we have everything wired up. All the things that we

87
00:07:17,740 --> 00:07:21,750
need to do inside of our application are wired up as far as the post is

88
00:07:21,750 --> 00:07:23,150
concerned, to create the account.

89
00:07:23,150 --> 00:07:24,720
We still have a lot of work to do,

90
00:07:24,720 --> 00:07:30,490
but it's wired from our controller to our repository tier, so now

91
00:07:30,490 --> 00:07:32,780
we're back to the repository tier that we created.

92
00:07:32,780 --> 00:07:36,680
Now we can start implementing the JDBC call to actually

93
00:07:36,680 --> 00:07:39,800
assign that account into our database,

94
00:07:39,800 --> 00:07:43,740
to where we can then work on the verification process.

95
00:07:43,740 --> 00:07:47,340
Now it's a little bit of which one is better to do first or the other.

96
00:07:47,340 --> 00:07:51,930
We have to create a database table to write this account to,

97
00:07:51,930 --> 00:07:54,580
but I already have the code here handy, so I am

98
00:07:54,580 --> 00:08:00,240
going to Autowire in our DataSource.

99
00:08:00,240 --> 00:08:06,120
We'll just assign that to a private DataSource, and we'll call that

100
00:08:06,120 --> 00:08:11,450
dataSource. And that's already defined through our Spring Security

101
00:08:11,450 --> 00:08:13,320
configuration that we have set up.

102
00:08:13,320 --> 00:08:17,350
We're going to utilize the same one, and inside of this create statement,

103
00:08:17,350 --> 00:08:21,450
I'm going to replace that with this JdbcTemplate that I have already

104
00:08:21,450 --> 00:08:25,840
written. And I'll walk through what I'm doing here with you.

105
00:08:25,840 --> 00:08:28,540
We create an instance of a JdbcTemplate.

106
00:08:28,540 --> 00:08:32,950
Then we are going to execute an update statement, that's how you do

107
00:08:32,950 --> 00:08:36,780
an insert, that will be an insert into the accounts table, we're

108
00:08:36,780 --> 00:08:38,940
going to go create that here in a second,

109
00:08:38,940 --> 00:08:41,740
and that has a column username, password,

110
00:08:41,740 --> 00:08:43,400
email, firstname, and lastname,

111
00:08:43,400 --> 00:08:45,750
as you can see from that SQL statement. And then we're just

112
00:08:45,750 --> 00:08:49,830
using a simple prepared statement approach where we use a

113
00:08:49,830 --> 00:08:52,710
varargs to pass in the username, password,

114
00:08:52,710 --> 00:08:55,940
email, firstname, and lastname.

115
00:08:55,940 --> 00:08:58,440
And when that's all done, we're going to return the account.

116
00:08:58,440 --> 00:08:59,900
Now, as I mentioned earlier,

117
00:08:59,900 --> 00:09:02,960
sometimes you will update that with things we actually haven't

118
00:09:02,960 --> 00:09:05,960
changed anything on account, we're just going to return back the

119
00:09:05,960 --> 00:09:08,060
one that we have back to that user.

120
00:09:08,060 --> 00:09:11,520
So, this is all of the pieces from front to back, from the

121
00:09:11,520 --> 00:09:14,840
UI, to the controller, to the service tier,

122
00:09:14,840 --> 00:09:17,250
clear to the repository writing to the database.

123
00:09:17,250 --> 00:09:19,930
Now I'm going to go ahead and switch over to the MySQL

124
00:09:19,930 --> 00:09:23,140
workbench to create this database table.

125
00:09:23,140 --> 00:09:25,970
Switching back to my MySQL editor, you can see that I've

126
00:09:25,970 --> 00:09:30,150
got the SQL in here to create a table named accounts. And

127
00:09:30,150 --> 00:09:34,200
I've got in there a username, password, email,

128
00:09:34,200 --> 00:09:35,610
firstname, and lastname,

129
00:09:35,610 --> 00:09:40,120
all with their respective sizes in a VARCHAR 50, 100, 100,

130
00:09:40,120 --> 00:09:44,000
50, and 50, and I've established that the PRIMARY KEY in

131
00:09:44,000 --> 00:09:47,740
here is the username column.

132
00:09:47,740 --> 00:09:55,140
So I'm going to go ahead and highlight that SQL and execute it,

133
00:09:55,140 --> 00:09:57,240
and it completed successfully.

134
00:09:57,240 --> 00:10:00,660
And then I'm going to highlight that commit statement and execute that.

135
00:10:00,660 --> 00:10:03,060
So now our table is created.

136
00:10:03,060 --> 00:10:05,050
We can switch back over to the IDE.

137
00:10:05,050 --> 00:10:09,010
We're actually going to give this a test run end‑to‑end. It's halfway

138
00:10:09,010 --> 00:10:12,090
through our confirmation process, but we don't really want to go too much

139
00:10:12,090 --> 00:10:15,430
further in case something isn't quite wired up right or we're going to have

140
00:10:15,430 --> 00:10:18,430
a lot of troubleshooting to do, so let's make sure that this piece is

141
00:10:18,430 --> 00:10:20,840
working how we expect it to so far.

142
00:10:20,840 --> 00:10:28,040
Let's start our server up. That'll take a second to run.

143
00:10:28,040 --> 00:10:29,770
And now, back in our app,

144
00:10:29,770 --> 00:10:35,240
we can go up to the address bar and type in account

145
00:10:35,240 --> 00:10:37,000
and put in some garbage data.

146
00:10:37,000 --> 00:10:40,040
We're going to delete this record anyway.

147
00:10:40,040 --> 00:10:44,590
I will put in a valid email address just so you can see it go through to the

148
00:10:44,590 --> 00:10:48,500
database, it's not going past that yet, and click Submit.

149
00:10:48,500 --> 00:10:50,620
It's going to redirect back to this page.

150
00:10:50,620 --> 00:10:52,240
It was actually successful.

151
00:10:52,240 --> 00:10:57,010
Let's go back over to our MySQL workbench and look to see if that record

152
00:10:57,010 --> 00:11:02,670
completed end‑to‑end to the database. If we go ahead and give ourselves some

153
00:11:02,670 --> 00:11:10,220
space down below here, we can do a select statement from the accounts table

154
00:11:10,220 --> 00:11:16,970
and run that to see if our record was just inserted, and you'll see that it

155
00:11:16,970 --> 00:11:22,880
was. We have our username of asdf; the password, which was encrypted using

156
00:11:22,880 --> 00:11:27,660
bcrypt from our controller; the actual valid email address that we inserted in

157
00:11:27,660 --> 00:11:32,950
there; and then a first name and last name of asdf that we pasted in there as

158
00:11:32,950 --> 00:11:33,640
well.

159
00:11:33,640 --> 00:11:39,400
So everything is going end‑to‑end, clear from our controller

160
00:11:39,400 --> 00:11:43,960
coming in and directing back to the account.jsp page, us

161
00:11:43,960 --> 00:11:48,810
gathering data, submitting to the post, encrypting that password,

162
00:11:48,810 --> 00:11:51,050
passing it through our service and repository tier,

163
00:11:51,050 --> 00:11:54,080
which finally inserts it into our database.

164
00:11:54,080 --> 00:11:55,600
If you're not seeing this now,

165
00:11:55,600 --> 00:11:59,440
you'll want to stop and make sure that you don't have any errors in your

166
00:11:59,440 --> 00:12:02,330
console or anything else, but if you followed all these steps,

167
00:12:02,330 --> 00:12:04,330
you should be to here.

168
00:12:04,330 --> 00:12:12,000
Next thing we're going to do is look at firing off the event that sends the actual email to you to confirm your account.

