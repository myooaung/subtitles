WEBVTT
1
00:00:00.140 --> 00:00:05.450
We want to go ahead and right‑click on our com.pluralsight.conference

2
00:00:05.450 --> 00:00:09.200
underneath our java package up above here and say New,

3
00:00:09.200 --> 00:00:10.980
Java Class.

4
00:00:10.980 --> 00:00:17.970
And this class we want to call ConferenceSecurity,

5
00:00:17.970 --> 00:00:31.440
and it extends the WebSecurityConfigureAdapter.

6
00:00:31.440 --> 00:00:34.330
I've said it in many of my other courses,

7
00:00:34.330 --> 00:00:37.740
but I think Spring gets the award for the longest and

8
00:00:37.740 --> 00:00:39.760
most confusing class names ever.

9
00:00:39.760 --> 00:00:41.860
So yours should look like this.

10
00:00:41.860 --> 00:00:44.620
We have a public class ConferenceSecurityConfig,

11
00:00:44.620 --> 00:00:50.140
which extends WebSecurityConfigureAdapter.

12
00:00:50.140 --> 00:00:54.140
And now we can go ahead and start annotating this.

13
00:00:54.140 --> 00:00:58.060
We want to start off by saying that this is a configuration file.

14
00:00:58.060 --> 00:01:00.110
So we're going to do @Configuration.

15
00:01:00.110 --> 00:01:06.240
And we also want to say @EnableWebSecurity.

16
00:01:06.240 --> 00:01:10.730
Now this sets it up for Spring to know this is a configuration file and

17
00:01:10.730 --> 00:01:15.940
to start looking at it and see that it is supplying these specific

18
00:01:15.940 --> 00:01:20.330
pieces for web security so we can go through and start modifying this

19
00:01:20.330 --> 00:01:23.740
Java file to tie into those pieces.

20
00:01:23.740 --> 00:01:27.140
This next section I'm actually going to go through and type

21
00:01:27.140 --> 00:01:30.560
it all out because I want to explain each piece as we go.

22
00:01:30.560 --> 00:01:32.520
And it may be a little verbose.

23
00:01:32.520 --> 00:01:34.860
I will warn you of that beforehand.

24
00:01:34.860 --> 00:01:37.200
So I'm going to put in an @Override here because I'm

25
00:01:37.200 --> 00:01:38.880
going to override this method.

26
00:01:38.880 --> 00:01:47.340
I'm going to do a protected void configure.

27
00:01:47.340 --> 00:01:55.700
And this will take in a parameter of final HttpSecurity, and we'll call this

28
00:01:55.700 --> 00:02:03.040
object name http. And we'll declare that it throws Exception.

29
00:02:03.040 --> 00:02:07.330
And that's actually just the signature from the parent method up above.

30
00:02:07.330 --> 00:02:11.910
Inside of here, we're using a builder method style syntax.

31
00:02:11.910 --> 00:02:16.420
So we're going to say http, and we'll go down below it and

32
00:02:16.420 --> 00:02:21.250
give ourselves a new whitespace or a new line that we start

33
00:02:21.250 --> 00:02:24.070
building out all of these next steps.

34
00:02:24.070 --> 00:02:26.630
So I'm going to start off by saying that it will

35
00:02:26.630 --> 00:02:32.170
authorizeRequests, and then on the next line, again,

36
00:02:32.170 --> 00:02:34.980
it's using that builder style mentality.

37
00:02:34.980 --> 00:02:37.220
There's not a semicolon on the end of that line.

38
00:02:37.220 --> 00:02:40.690
We're still taking the return from the previous method and

39
00:02:40.690 --> 00:02:42.670
appending on to the end of that. So we're going to say

40
00:02:42.670 --> 00:02:52.140
.antMatchers, and inside of here, we need to add a couple of these. First off,

41
00:02:52.140 --> 00:02:55.340
we want to say /anonymous,

42
00:02:55.340 --> 00:03:03.060
and this is saying we'll allow people to anonymously access this section of

43
00:03:03.060 --> 00:03:06.470
code, and anybody that wants to go through and do this,

44
00:03:06.470 --> 00:03:12.150
they can do so with the role anonymous. We're going to do another

45
00:03:12.150 --> 00:03:23.000
.antMatchers. Inside of here, we're going to do another URL of login*,

46
00:03:23.000 --> 00:03:25.840
and this is just simply for our login page.

47
00:03:25.840 --> 00:03:30.320
And we want to say that we're going to permit all to see this.

48
00:03:30.320 --> 00:03:32.380
Whether you're logged in or not, we're going to let anybody

49
00:03:32.380 --> 00:03:35.540
that wants to see this go ahead and see this.

50
00:03:35.540 --> 00:03:38.890
Now these are the two URL patterns that we need for

51
00:03:38.890 --> 00:03:40.710
anybody to hit our login page.

52
00:03:40.710 --> 00:03:43.600
But as you remember, we had some styling on our login page.

53
00:03:43.600 --> 00:03:47.440
And if we don't add this next line in there, it won't serve up the styling.

54
00:03:47.440 --> 00:03:51.470
So we're going to do another .antMatchers, and inside of here,

55
00:03:51.470 --> 00:03:54.090
we're going to do a couple of things.

56
00:03:54.090 --> 00:04:04.070
So we're going to start with /assets, and we're going to do a /css/**, so

57
00:04:04.070 --> 00:04:10.420
anything underneath that directory. We're going to do a comma and we want

58
00:04:10.420 --> 00:04:21.640
to do assets/js/**, so any of the JavaScript files underneath that

59
00:04:21.640 --> 00:04:25.240
directory. And we're going to do one more.

60
00:04:25.240 --> 00:04:32.400
We'll say /images, so any of the images that we have inside of our app, we

61
00:04:32.400 --> 00:04:38.590
want to go ahead and host those up was well, and ** as well. And we want to

62
00:04:38.590 --> 00:04:47.120
permit all to see that. Now the next line we have is one more .antmatchers,

63
00:04:47.120 --> 00:04:57.540
and this one we want to serve up our /index*.

64
00:04:57.540 --> 00:05:02.860
And we're going to permitAll to that. Next line and,

65
00:05:02.860 --> 00:05:05.540
again, no semicolons on all of these.

66
00:05:05.540 --> 00:05:08.960
We're now out of the .antMatchers, so this is everything that we're going

67
00:05:08.960 --> 00:05:12.970
to match to our URL, we're going to go to .anyRequest.

68
00:05:12.970 --> 00:05:22.340
So any request coming in, we want that to be .authenticated. From there,

69
00:05:22.340 --> 00:05:28.630
we want to say .and, so once‑‑‑they any request that comes through and

70
00:05:28.630 --> 00:05:35.420
is authenticated, and we want that to go through and also build up the

71
00:05:35.420 --> 00:05:38.150
configuration for how we authenticate them.

72
00:05:38.150 --> 00:05:44.020
So we say the .form for logging in is this next

73
00:05:44.020 --> 00:05:50.240
configuration piece, and it has a loginPage.

74
00:05:50.240 --> 00:06:00.440
That loginPage is /login, and the loginProcessingUrl,

75
00:06:00.440 --> 00:06:10.140
so we'll do .loginProcessingUrl, is /perform, and this is

76
00:06:10.140 --> 00:06:15.880
case sensitive, _login. You may remember,

77
00:06:15.880 --> 00:06:20.330
and I'll show it to you here in a second, make sure you get underscore,

78
00:06:20.330 --> 00:06:22.540
not hyphen.

79
00:06:22.540 --> 00:06:28.230
You'll want to go through and tie that to your action in your login.jsp.

80
00:06:28.230 --> 00:06:30.520
I'll show those two here side by side in the second.

81
00:06:30.520 --> 00:06:32.400
We have just one more line of code in here.

82
00:06:32.400 --> 00:06:42.340
We'll say the .defaultSuccessfulUrl is to go to the root of our application.

83
00:06:42.340 --> 00:06:49.700
And this next attribute of true is saying that we want them to always go to

84
00:06:49.700 --> 00:06:54.100
the defaultSuccessUrl. So a lot of stuff tied in there.

85
00:06:54.100 --> 00:06:58.970
We have authorization of requests, all the pattern matching

86
00:06:58.970 --> 00:07:03.740
for our URLs, the requests authenticated.

87
00:07:03.740 --> 00:07:07.140
We want the login form to be our login page, and the

88
00:07:07.140 --> 00:07:09.740
processing URL is perform_login.

89
00:07:09.740 --> 00:07:12.770
If you look at our login.jsp page,

90
00:07:12.770 --> 00:07:16.350
you can see on line 47 there, that was that perform_login

91
00:07:16.350 --> 00:07:19.750
URL that we're tying that to, so those two match up to

92
00:07:19.750 --> 00:07:22.060
one another, and by default,

93
00:07:22.060 --> 00:07:26.950
go to the successful URL, and that is set to always true.

94
00:07:26.950 --> 00:07:28.910
So we're always going to make people go to that whether

95
00:07:28.910 --> 00:07:31.060
they have requested something different or not. We're

96
00:07:31.060 --> 00:07:32.710
almost done with our configuration.

97
00:07:32.710 --> 00:07:37.110
We need to add two other small configuration sections inside of

98
00:07:37.110 --> 00:07:39.010
here that I've already copied to my clipboard.

99
00:07:39.010 --> 00:07:41.680
But I'm going to walk through both of them.

100
00:07:41.680 --> 00:07:48.490
We have a configure for the AuthenticationManagerBuilder.

101
00:07:48.490 --> 00:07:57.790
And what this does is gives us our default user. I gave it a

102
00:07:57.790 --> 00:08:02.200
username of bryan and a password of pass.

103
00:08:02.200 --> 00:08:03.560
So it's just bryan pass.

104
00:08:03.560 --> 00:08:05.950
And he has the role of USER inside of here.

105
00:08:05.950 --> 00:08:12.250
And then we have a @Bean down below that that is a PasswordEncoder.

106
00:08:12.250 --> 00:08:15.340
So I'm going to import the class for that as well.

107
00:08:15.340 --> 00:08:22.990
And by default, we are using BCrypt for our encoding strategy.

108
00:08:22.990 --> 00:08:34.640
So our encoder is called by our @Bean on line 38 here in our

109
00:08:34.640 --> 00:08:39.390
inMemoryAuthentication user that we have created here on line 35.

110
00:08:39.390 --> 00:08:43.030
So, by saying auth.inMemoryAuthentication,

111
00:08:43.030 --> 00:08:47.480
we're going to tell it, Hey, for now, just go ahead and use this in‑memory model.

112
00:08:47.480 --> 00:08:51.710
And with this user we're going to define here, and the username is bryan,

113
00:08:51.710 --> 00:08:55.860
password, use the PasswordEncoder, and you'll notice it's calling that @Bean

114
00:08:55.860 --> 00:08:59.660
right there. And encode it using the character sequence.

115
00:08:59.660 --> 00:09:02.610
Pass passes our default Password that we're sending in

116
00:09:02.610 --> 00:09:05.840
there right now. Obviously, we'd want something more

117
00:09:05.840 --> 00:09:07.710
secure than that in the long run.

118
00:09:07.710 --> 00:09:12.130
And it has the role USER. We'll start building more roles.

119
00:09:12.130 --> 00:09:14.380
And this is the piece we're actually going to rip out and

120
00:09:14.380 --> 00:09:17.910
authenticate against a database or LDAP or other tools as

121
00:09:17.910 --> 00:09:19.530
we go throughout this course.

122
00:09:19.530 --> 00:09:23.240
And then it just uses this default password encoder of BCrypt,

123
00:09:23.240 --> 00:09:25.370
which is actually a great password encoder.

124
00:09:25.370 --> 00:09:25.960
In the past,

125
00:09:25.960 --> 00:09:31.110
we've had MD5, SHA, that type of stuff, which are now easily hackable,

126
00:09:31.110 --> 00:09:40.000
and that is something that is an update to this course as well. So let's save this, and we're almost ready to go.

