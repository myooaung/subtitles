WEBVTT
1
00:00:01.040 --> 00:00:04.110
Firing off an event was actually pretty easy to do,

2
00:00:04.110 --> 00:00:08.230
and it may have surprised you how little code it took to actually fire off

3
00:00:08.230 --> 00:00:12.570
an event since the event publisher and event model is already available to

4
00:00:12.570 --> 00:00:15.840
you inside of a Spring‑enabled application.

5
00:00:15.840 --> 00:00:17.040
I will say, though,

6
00:00:17.040 --> 00:00:21.330
that the event listener is where more of the heavy lifting takes place,

7
00:00:21.330 --> 00:00:23.650
and that's the portion we're going to do now.

8
00:00:23.650 --> 00:00:26.880
So let's exit full‑screen mode here for a minute.

9
00:00:26.880 --> 00:00:30.020
And in our util package that we created,

10
00:00:30.020 --> 00:00:33.840
we're going to now create our event listener.

11
00:00:33.840 --> 00:00:38.140
Let's right‑click and say New, Java Class.

12
00:00:38.140 --> 00:00:44.440
And let's name this AccountListener.

13
00:00:44.440 --> 00:00:48.380
And this class will actually implement the

14
00:00:48.380 --> 00:00:52.910
ApplicationListener on the OnCreateAccountEvent.

15
00:00:52.910 --> 00:01:03.040
So we want to do implements ApplicationListener.

16
00:01:03.040 --> 00:01:11.740
And the object that it does this on is the OnCreateAccountEvent.

17
00:01:11.740 --> 00:01:12.280
Now,

18
00:01:12.280 --> 00:01:14.550
it's going to have some methods that it wants us to

19
00:01:14.550 --> 00:01:18.740
create as part of this object.

20
00:01:18.740 --> 00:01:20.550
So let's implement those.

21
00:01:20.550 --> 00:01:25.720
There's an onApplicationEvent.

22
00:01:25.720 --> 00:01:31.790
And this object will go through and allow us to do a couple of things.

23
00:01:31.790 --> 00:01:34.650
You can actually add whatever you want inside of here,

24
00:01:34.650 --> 00:01:37.420
but before we dive too far into this I want to start off by

25
00:01:37.420 --> 00:01:40.690
registering this as a component inside of Spring.

26
00:01:40.690 --> 00:01:45.150
So we can actually just say @Component.

27
00:01:45.150 --> 00:01:50.020
And this object will already be a Spring bean and registered

28
00:01:50.020 --> 00:01:54.230
inside of Spring to start listening for events.

29
00:01:54.230 --> 00:02:08.040
The onApplicationEvent, let's just make this guy call this.confirmCreateAccount.

30
00:02:08.040 --> 00:02:12.640
And we will pass in the event.

31
00:02:12.640 --> 00:02:17.040
Now we haven't created this method, so let's do that now.

32
00:02:17.040 --> 00:02:27.740
And we'll just make this a private void method called confirmCreateAccount.

33
00:02:27.740 --> 00:02:32.690
And this is going to take the OnCeateAccountEvent as its method signature.

34
00:02:32.690 --> 00:02:39.740
I'm going to just copy that from up above into here.

35
00:02:39.740 --> 00:02:44.240
Now, let me just lay out the steps of what we need to do inside of here.

36
00:02:44.240 --> 00:02:51.840
We're going to get the account, and that just comes out of the event.

37
00:02:51.840 --> 00:03:01.240
We are going to then create a verification token,

38
00:03:01.240 --> 00:03:04.350
and this is on us, it's not something inside of Spring.

39
00:03:04.350 --> 00:03:06.920
We're going to actually create a verification token

40
00:03:06.920 --> 00:03:10.940
and build our message off of that.

41
00:03:10.940 --> 00:03:21.440
We are going to get the email properties.

42
00:03:21.440 --> 00:03:28.340
And then inside of here, we are going to finally send our email.

43
00:03:28.340 --> 00:03:32.810
So these are the steps we need to go through to build out what

44
00:03:32.810 --> 00:03:36.230
this confirmCreateAccount is going to be.

45
00:03:36.230 --> 00:03:40.220
There's two other pieces we need to configure inside of here.

46
00:03:40.220 --> 00:03:44.180
We're going to autowire in our account service that we've created,

47
00:03:44.180 --> 00:03:47.940
and we're going to autowire in the JavaMailSender.

48
00:03:47.940 --> 00:03:53.630
The JavaMailSender is a class that's actually supplied to us from that

49
00:03:53.630 --> 00:03:58.140
Spring Boot mail piece that we added to our POM earlier.

50
00:03:58.140 --> 00:04:00.100
And those properties we added to our

51
00:04:00.100 --> 00:04:05.330
application.properties has created this sender for us.

52
00:04:05.330 --> 00:04:13.140
So it's already tied to our Spring‑enabled properties to fire off these emails.

53
00:04:13.140 --> 00:04:18.080
So, at the top of our application, let's put a couple of things here.

54
00:04:18.080 --> 00:04:26.640
We want to add a private String serverUrl.

55
00:04:26.640 --> 00:04:30.030
And we're just going to hard code in a string here.

56
00:04:30.030 --> 00:04:30.380
Now,

57
00:04:30.380 --> 00:04:33.560
I will be the first one to admit that this should be

58
00:04:33.560 --> 00:04:37.060
passed in through a properties,

59
00:04:37.060 --> 00:04:40.950
from our application properties or some JNDI lookup or something else.

60
00:04:40.950 --> 00:04:44.620
But this example is already starting to get complex,

61
00:04:44.620 --> 00:04:48.140
and you can look up how to inject those properties from the

62
00:04:48.140 --> 00:04:51.910
Spring Fundamentals course or some other example.

63
00:04:51.910 --> 00:04:57.340
This is just to keep this sample smaller than what it was growing into.

64
00:04:57.340 --> 00:05:00.540
We're going to autowire in our JavaMailSender.

65
00:05:00.540 --> 00:05:05.040
So we'll say @Autowired.

66
00:05:05.040 --> 00:05:13.040
And we want to pass in the private JavaMailSender.

67
00:05:13.040 --> 00:05:17.940
And we'll assign that to a variable mailSender.

68
00:05:17.940 --> 00:05:19.120
And save that.

69
00:05:19.120 --> 00:05:26.450
And now we're going to also pass in our AccountService.

70
00:05:26.450 --> 00:05:32.840
So we want to autowire in the AccountService,

71
00:05:32.840 --> 00:05:37.440
and assign that to a variable accountService.

72
00:05:37.440 --> 00:05:44.510
Now, we can use the AccountService to go out and create that verification token.

73
00:05:44.510 --> 00:05:49.540
And what we're going to do with that is start off by saying

74
00:05:49.540 --> 00:05:59.310
Account account = event.getAccount().

75
00:05:59.310 --> 00:06:04.880
And that will get the confirm account message that was being fired off

76
00:06:04.880 --> 00:06:08.730
from that event and make that available for us to use.

77
00:06:08.730 --> 00:06:15.950
And then we're going to just use the random string functions to assign a token.

78
00:06:15.950 --> 00:06:31.840
So I want to say token = UUID.randomUUID().toString().

79
00:06:31.840 --> 00:06:35.140
And that will generate that token for us.

80
00:06:35.140 --> 00:06:38.650
And now we can go out and save this to our database.

81
00:06:38.650 --> 00:06:41.010
And we have not implemented all this functionality yet,

82
00:06:41.010 --> 00:06:43.300
so we're going to carry this through all of the tiers.

83
00:06:43.300 --> 00:06:46.700
As I mentioned, this does the heavier lifting for us.

84
00:06:46.700 --> 00:06:56.540
So, we're going to say accountService.createVerificationToken.

85
00:06:56.540 --> 00:06:58.110
And that token,

86
00:06:58.110 --> 00:07:03.830
we're going to pass in the account object instance and

87
00:07:03.830 --> 00:07:07.640
the string token that we have here.

88
00:07:07.640 --> 00:07:11.510
And now let's go to our AccountServiceImpl and look at

89
00:07:11.510 --> 00:07:15.280
what that is doing with this stuff.

90
00:07:15.280 --> 00:07:16.390
And that's nothing yet,

91
00:07:16.390 --> 00:07:19.670
so we need to go ahead and flush out the rest of the

92
00:07:19.670 --> 00:07:23.540
account repository interaction here.

93
00:07:23.540 --> 00:07:29.420
Before we call the createVerificationToken on our account repository though,

94
00:07:29.420 --> 00:07:33.540
let's create a VerificationToken object.

95
00:07:33.540 --> 00:07:39.040
I'm going to do that by going to our model,

96
00:07:39.040 --> 00:07:43.140
right‑click, and say New, Java Class.

97
00:07:43.140 --> 00:07:49.020
We'll call this VerificationToken.

98
00:07:49.020 --> 00:07:49.610
And Enter.

99
00:07:49.610 --> 00:07:51.740
And inside of here,

100
00:07:51.740 --> 00:07:58.700
we're going to add a handful of fields and one utility method as well.

101
00:07:58.700 --> 00:08:05.040
So, let's first put in here a public static final int,

102
00:08:05.040 --> 00:08:07.210
and we'll call this EXPIRATION.

103
00:08:07.210 --> 00:08:15.680
And we'll set that equal to 60 x 24.

104
00:08:15.680 --> 00:08:20.920
And what we're looking for here is just that we're going to take and have

105
00:08:20.920 --> 00:08:24.480
24 hours in a day and times at 60 minutes in an hour.

106
00:08:24.480 --> 00:08:28.140
That will help us in a calculation we're going to do down below.

107
00:08:28.140 --> 00:08:33.550
And then we want to pass in or store a string for the token.

108
00:08:33.550 --> 00:08:45.140
So we'll have private String token, private String username.

109
00:08:45.140 --> 00:08:52.690
And the last thing we're going to have in here is a private Date.

110
00:08:52.690 --> 00:08:56.640
And we'll use the java.util.Date.

111
00:08:56.640 --> 00:08:59.340
And we'll name this field expiryDate,

112
00:08:59.340 --> 00:09:05.940
and that's just the date in which this will expire as a token.

113
00:09:05.940 --> 00:09:13.470
Now, let's right‑click down below here and Generate, Getter and Setter.

114
00:09:13.470 --> 00:09:19.660
And we will choose those three fields, not the static final int,

115
00:09:19.660 --> 00:09:21.840
and generate those.

116
00:09:21.840 --> 00:09:24.620
And then I'm going to add one more method down below here,

117
00:09:24.620 --> 00:09:30.340
which is just a calculateExpiryDate, which you pass in a set number of minutes,

118
00:09:30.340 --> 00:09:32.250
get the current time,

119
00:09:32.250 --> 00:09:36.290
and then add to that an expiration number of minute,s

120
00:09:36.290 --> 00:09:37.940
and return that back to the user.

121
00:09:37.940 --> 00:09:40.860
And this is just going to help us set in our token

122
00:09:40.860 --> 00:09:43.150
as to when that object expires.

123
00:09:43.150 --> 00:09:47.740
So now we have our token set up, let's go back to our AccountServiceImpl,

124
00:09:47.740 --> 00:09:51.340
and we can begin to flush that out.

125
00:09:51.340 --> 00:09:55.790
And now we can take advantage of that verification token that we just created.

126
00:09:55.790 --> 00:10:08.740
So we'll say VerificationToken verificationToken = new VerificationToken.

127
00:10:08.740 --> 00:10:21.240
And we will set on that our username and token.

128
00:10:21.240 --> 00:10:29.760
And then we can go ahead and also save that to our database.

129
00:10:29.760 --> 00:10:38.440
So we'll go ahead and say username.

130
00:10:38.440 --> 00:10:41.940
And now what we're going to want to create is on our account

131
00:10:41.940 --> 00:10:46.490
repository a method that we will call which is saveToken.

132
00:10:46.490 --> 00:10:49.470
And this will save that out to the database, but we

133
00:10:49.470 --> 00:10:51.590
do not have that created yet.

134
00:10:51.590 --> 00:10:55.850
So if we save this, we can go ahead and start implementing that now.

135
00:10:55.850 --> 00:10:58.730
And if we hover over that red saveToken method,

136
00:10:58.730 --> 00:11:01.520
it'll actually give us the option to create the method

137
00:11:01.520 --> 00:11:05.640
saveToken in our account repository interface.

138
00:11:05.640 --> 00:11:07.440
And if we save this,

139
00:11:07.440 --> 00:11:10.940
it will give us the same message that we need to implement that

140
00:11:10.940 --> 00:11:13.540
method inside of our AccountRepositoryImpl.

141
00:11:13.540 --> 00:11:15.970
And if we hover over that red line,

142
00:11:15.970 --> 00:11:19.420
it will give us the option to implement methods.

143
00:11:19.420 --> 00:11:21.480
And we can choose saveToken down below,

144
00:11:21.480 --> 00:11:26.840
and that will give us the shell to paste in our code into that saveToken method.

145
00:11:26.840 --> 00:11:29.560
And I already have the JDBC template written for it

146
00:11:29.560 --> 00:11:32.040
because it's a simple JDBC INSERT.

147
00:11:32.040 --> 00:11:34.440
So I'm going to add that in here.

148
00:11:34.440 --> 00:11:38.120
And you'll see that I take the data source that's injected in,

149
00:11:38.120 --> 00:11:40.440
create a JDBC template.

150
00:11:40.440 --> 00:11:45.490
I have the template that calls .update and issues an INSERT statement into a

151
00:11:45.490 --> 00:11:49.380
table we're going to go create called verification_tokens,

152
00:11:49.380 --> 00:11:52.490
which takes a username, token, and an expiry_date,

153
00:11:52.490 --> 00:11:56.940
and we pass into that the verificationToken.getUsername(),

154
00:11:56.940 --> 00:11:58.840
verificationToken.getToken().

155
00:11:58.840 --> 00:12:04.340
And then we use that method we created, verificationToken.calculateExpiryDate,

156
00:12:04.340 --> 00:12:07.150
and pass in our expiration in time.

157
00:12:07.150 --> 00:12:08.910
So it was written to where you could pass in

158
00:12:08.910 --> 00:12:11.390
different expirations if you wanted to,

159
00:12:11.390 --> 00:12:15.540
but this takes the standard one that we have set in there by default.

160
00:12:15.540 --> 00:12:23.440
Let's save this and go add that into our MySQL editor now for this table.

161
00:12:23.440 --> 00:12:27.240
The verification_tokens table is actually quite simple.

162
00:12:27.240 --> 00:12:33.010
In fact, it's just a CREATE TABLE statement with the name verification_tokens.

163
00:12:33.010 --> 00:12:36.920
And it takes a username, which is a VARCHAR(50),

164
00:12:36.920 --> 00:12:40.940
a token, which is a VARCHAR(100), an expiry_date,

165
00:12:40.940 --> 00:12:45.640
which is of type DATETIME, all of which can be NOT NULL.

166
00:12:45.640 --> 00:12:47.700
And then we set a primary key in there,

167
00:12:47.700 --> 00:12:52.340
which is a compound PRIMARY KEY of the username and token.

168
00:12:52.340 --> 00:12:57.110
Let's highlight this SQL and go ahead and execute it.

169
00:12:57.110 --> 00:13:03.640
And then execute our commit statement.

170
00:13:03.640 --> 00:13:08.130
And everything now is set up for us to run that against this table.

171
00:13:08.130 --> 00:13:10.290
And we have all the pieces we need in place now.

172
00:13:10.290 --> 00:13:15.370
Now all we need to do is configuration for the actual sending of the email,

173
00:13:15.370 --> 00:13:18.620
and we're done with this portion of this module.

174
00:13:18.620 --> 00:13:22.130
Switching back to our IDE, we can see that our saveToken is complete.

175
00:13:22.130 --> 00:13:25.950
Now we just need to switch back to our AccountListener and fill out the

176
00:13:25.950 --> 00:13:30.240
last two pieces of pseudocode that we have inside of here.

177
00:13:30.240 --> 00:13:33.990
We're going to start off by creating a couple of variables. We're going

178
00:13:33.990 --> 00:13:47.340
to do a String recipientAddress = account.getEmail().

179
00:13:47.340 --> 00:13:50.640
So that's the email address associated with this account.

180
00:13:50.640 --> 00:13:56.440
Then we're going to also do a String for the subject.

181
00:13:56.440 --> 00:13:59.310
And inside of here you can honestly put whatever you want.

182
00:13:59.310 --> 00:14:06.240
I'm going to do Account Confirmation.

183
00:14:06.240 --> 00:14:08.080
And we'll close that line off.

184
00:14:08.080 --> 00:14:15.120
Then we have a String confirmationUrl.

185
00:14:15.120 --> 00:14:24.210
And this will take the event.getAppUrl.

186
00:14:24.210 --> 00:14:39.600
And we're going to add to that string the context of /accountConfirm?token,

187
00:14:39.600 --> 00:14:47.840
so we're building the URL string as we go here,

188
00:14:47.840 --> 00:14:52.440
equal to, so we have a param token on the end of our URL now,

189
00:14:52.440 --> 00:14:57.340
and we'll add the + token.

190
00:14:57.340 --> 00:14:59.290
And close that off.

191
00:14:59.290 --> 00:15:17.840
And then, finally, our message is String message = Please confirm.

192
00:15:17.840 --> 00:15:19.440
We'll close that line off,

193
00:15:19.440 --> 00:15:23.540
and now we're down to the actual email portion inside of here.

194
00:15:23.540 --> 00:15:39.940
And we'll say SimpleMailMessage email = new SimpleMailMessage().

195
00:15:39.940 --> 00:15:50.220
And in our email, we're going to say .setTo.

196
00:15:50.220 --> 00:15:55.240
And that will be our recipientAddress.

197
00:15:55.240 --> 00:16:03.740
And then in our email we're going to also set the subject.

198
00:16:03.740 --> 00:16:11.440
And our subject will be the subject that we just created.

199
00:16:11.440 --> 00:16:14.490
And then we have our text that we're going to set.

200
00:16:14.490 --> 00:16:19.340
So we'll say setText.

201
00:16:19.340 --> 00:16:26.140
And the text we set inside of here will be message +

202
00:16:26.140 --> 00:16:47.240
"\r\n" + serverUrl + confirmationUrl.

203
00:16:47.240 --> 00:16:58.840
And then finally, we'll say mailSender.send(email).

204
00:16:58.840 --> 00:17:03.950
And that's everything we need to do to actually send that confirmation account.

205
00:17:03.950 --> 00:17:07.430
So, all of our pieces are in place now, we've created our table,

206
00:17:07.430 --> 00:17:11.680
we've created our repository call, our tokens,

207
00:17:11.680 --> 00:17:15.240
calculated our expiration dates, which has stored

208
00:17:15.240 --> 00:17:16.990
an expiration date in our table,

209
00:17:16.990 --> 00:17:20.760
and we can expire people on that or delete them based off that expiration date,

210
00:17:20.760 --> 00:17:23.840
and also we'll use that as part of our confirmation.

211
00:17:23.840 --> 00:17:28.440
Let's fire up our server.

212
00:17:28.440 --> 00:17:32.740
Once this all loads, all of our listeners will already be registered.

213
00:17:32.740 --> 00:17:38.930
And when we fire off our message, it will show up in our email inbox now.

214
00:17:38.930 --> 00:17:44.840
Alright, once our app is pulled up, let's go to that account URL.

215
00:17:44.840 --> 00:17:48.180
Now let's go ahead and put some information inside of here.

216
00:17:48.180 --> 00:17:52.050
And realize that if you use the same information that you had

217
00:17:52.050 --> 00:17:58.910
before it might fail on your submission because we already have

218
00:17:58.910 --> 00:18:00.930
created an account in our database.

219
00:18:00.930 --> 00:18:03.200
So you may have to go delete that out of the database or

220
00:18:03.200 --> 00:18:05.240
come up with some other information.

221
00:18:05.240 --> 00:18:10.090
I am using a valid email address here because our event should fire off for us.

222
00:18:10.090 --> 00:18:12.350
So, let's go ahead and put this information in,

223
00:18:12.350 --> 00:18:17.240
hit Submit, and see what it does.

224
00:18:17.240 --> 00:18:21.490
It has gone ahead and sent everything to our database.

225
00:18:21.490 --> 00:18:26.540
And now if we open up our email and click Refresh on it,

226
00:18:26.540 --> 00:18:29.730
we should see our account confirmation come through.

227
00:18:29.730 --> 00:18:30.750
And it does.

228
00:18:30.750 --> 00:18:33.390
If we click on this URL right now,

229
00:18:33.390 --> 00:18:38.080
it's going to fail because we don't have a confirmed page for it to go to,

230
00:18:38.080 --> 00:18:40.750
but it has done all the pieces that it was supposed to.

231
00:18:40.750 --> 00:18:44.550
Gone out to the database, stored it, fired off the email,

232
00:18:44.550 --> 00:18:46.530
gone through all the paces to do this.

233
00:18:46.530 --> 00:18:50.290
So, we have everything in place now to confirm it.

234
00:18:50.290 --> 00:18:54.640
Now all we've got to do is go through and grab this URL from

235
00:18:54.640 --> 00:18:57.850
the back end and move some stuff from tables,

236
00:18:57.850 --> 00:19:05.000
but you have all of the events being fired to actually confirm your account the correct way.

