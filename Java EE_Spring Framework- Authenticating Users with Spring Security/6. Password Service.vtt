WEBVTT
1
00:00:01.140 --> 00:00:06.430
We've got all of our information gathered now. We have taken the post

2
00:00:06.430 --> 00:00:09.830
back with our information and fired off an event,

3
00:00:09.830 --> 00:00:12.520
as well as configured our listener, but we haven't

4
00:00:12.520 --> 00:00:14.510
written anything to the database yet.

5
00:00:14.510 --> 00:00:17.270
If you've watched any of my other Spring videos here on

6
00:00:17.270 --> 00:00:19.640
Pluralsight or just need a refresher,

7
00:00:19.640 --> 00:00:23.200
the service layer is where you place your actual business logic,

8
00:00:23.200 --> 00:00:24.210
and in our case,

9
00:00:24.210 --> 00:00:30.300
we need to create that password token that verifies the person

10
00:00:30.300 --> 00:00:34.450
updating the password is who we think they are in our system or

11
00:00:34.450 --> 00:00:37.680
has access to the email address on file.

12
00:00:37.680 --> 00:00:42.620
So we're going to create a PasswordService interface and implementation,

13
00:00:42.620 --> 00:00:46.940
as well as the repository tier that will go through

14
00:00:46.940 --> 00:00:49.340
and update our database as well.

15
00:00:49.340 --> 00:00:51.540
Let's go ahead and finish this out,

16
00:00:51.540 --> 00:00:57.110
and that will complete the first half of that demo for firing off the events

17
00:00:57.110 --> 00:01:00.800
and gathering all of that information to update the password.

18
00:01:00.800 --> 00:01:04.380
Where we last left off our PasswordListener,

19
00:01:04.380 --> 00:01:07.100
we hadn't yet created the PasswordService,

20
00:01:07.100 --> 00:01:09.570
so let's go ahead and complete that now.

21
00:01:09.570 --> 00:01:14.860
We can hover over that and get the context‑sensitive help and we'll

22
00:01:14.860 --> 00:01:19.740
create a field passwordService in PasswordListener,

23
00:01:19.740 --> 00:01:24.280
and that is going to be of type PasswordService.

24
00:01:24.280 --> 00:01:28.430
And we haven't created this yet, so if we save this,

25
00:01:28.430 --> 00:01:30.540
it will also give us an error.

26
00:01:30.540 --> 00:01:33.620
We want to Autowire this.

27
00:01:33.620 --> 00:01:40.870
We can hover over that PasswordService object and do the same thing,

28
00:01:40.870 --> 00:01:46.140
create an interface PasswordService.

29
00:01:46.140 --> 00:01:50.640
And we want to choose the Destination package of service,

30
00:01:50.640 --> 00:01:56.910
so we can type in service there, click OK.

31
00:01:56.910 --> 00:02:02.150
And I'm going to go ahead and complete all of the methods that we need

32
00:02:02.150 --> 00:02:06.900
inside this interface rather than going back and forth on this contract that

33
00:02:06.900 --> 00:02:10.920
we're going to establish with our front end. I'm going to need three methods

34
00:02:10.920 --> 00:02:18.250
inside of here, the createResetToken, a ResetToken class, and the Password.

35
00:02:18.250 --> 00:02:20.990
We haven't created the ResetToken class yet,

36
00:02:20.990 --> 00:02:24.620
so let's go ahead and start creating these objects inside of here.

37
00:02:24.620 --> 00:02:30.690
We can import our Password object and ResetToken we need to create. The

38
00:02:30.690 --> 00:02:35.850
ResetToken is the actual object that's going to contain all of the

39
00:02:35.850 --> 00:02:39.110
information that's stored out to our database, and this is what we need to

40
00:02:39.110 --> 00:02:42.940
do to verify they are who we think they should be.

41
00:02:42.940 --> 00:02:50.340
So, let's go ahead and hover over that and create a class, ResetToken.

42
00:02:50.340 --> 00:02:54.570
And the package for that should be the model, so

43
00:02:54.570 --> 00:02:57.670
com.pluralsight.conference.model.

44
00:02:57.670 --> 00:03:01.550
Let's click OK. And the ResetToken,

45
00:03:01.550 --> 00:03:05.740
just like the VerificationToken, has a handful of fields inside of

46
00:03:05.740 --> 00:03:09.140
here that we're going to need to implement it.

47
00:03:09.140 --> 00:03:15.540
We want to have a String token, String email,

48
00:03:15.540 --> 00:03:20.440
a Date that's the expiration date on here, and the username associated

49
00:03:20.440 --> 00:03:24.940
with this, and we also have our expiration in here.

50
00:03:24.940 --> 00:03:26.080
As I mentioned earlier,

51
00:03:26.080 --> 00:03:30.920
you could create a parent token object that you move some of these up

52
00:03:30.920 --> 00:03:35.120
into, because typically we're going to have a token and an expiration

53
00:03:35.120 --> 00:03:38.880
date on any of those tokens that we have, but we'll just go ahead and

54
00:03:38.880 --> 00:03:41.040
duplicate that in here for now.

55
00:03:41.040 --> 00:03:45.790
Let's give ourselves some space underneath there, right‑click, and generate our

56
00:03:45.790 --> 00:03:50.740
Getter and Setter. And we'll choose token through username.

57
00:03:50.740 --> 00:03:56.440
We don't want to create a getter and setter for the static final int EXPIRATION.

58
00:03:56.440 --> 00:03:59.840
Choose OK, and save this.

59
00:03:59.840 --> 00:04:03.130
Now we have all the pieces we need for our ResetToken.

60
00:04:03.130 --> 00:04:05.410
Let's go back to our PasswordService and make sure

61
00:04:05.410 --> 00:04:11.340
that that's all implemented now, and everything looks good here.

62
00:04:11.340 --> 00:04:15.540
The next thing we'll need to do is create our implementation of this.

63
00:04:15.540 --> 00:04:16.330
And to do that,

64
00:04:16.330 --> 00:04:22.470
I'm going to exit full screen and right‑click on our service package and say,

65
00:04:22.470 --> 00:04:37.500
New, Java Class, PasswordServiceImpl, and this will implement the

66
00:04:37.500 --> 00:04:45.790
PasswordService interface. And we'll get the error that we

67
00:04:45.790 --> 00:04:52.750
haven't implemented those methods yet, so let's choose that. And

68
00:04:52.750 --> 00:04:55.840
we'll stub these out for us.

69
00:04:55.840 --> 00:05:00.040
The next step that we want to do is create that ResetToken.

70
00:05:00.040 --> 00:05:06.740
We're going to need to do a couple of things inside of here.

71
00:05:06.740 --> 00:05:11.020
I'm going to paste in the code that I have here just because

72
00:05:11.020 --> 00:05:13.190
it's pretty simple and straightforward.

73
00:05:13.190 --> 00:05:17.760
We're going to create a ResetToken that's going to take the token and

74
00:05:17.760 --> 00:05:21.070
the email address and username that we have here, and then we'll call

75
00:05:21.070 --> 00:05:26.850
our passwordRepository interface that we'll tie to the Impl class, and

76
00:05:26.850 --> 00:05:28.570
we haven't created that yet either.

77
00:05:28.570 --> 00:05:31.730
So the next step that we'll want to do is hover over

78
00:05:31.730 --> 00:05:36.380
passwordRepository and select that we want to create the field

79
00:05:36.380 --> 00:05:41.860
passwordRepository. And we don't have that one yet,

80
00:05:41.860 --> 00:05:48.190
so we're going to create an instance of that interface.

81
00:05:48.190 --> 00:05:56.340
And we want to Autowire that as well.

82
00:05:56.340 --> 00:06:03.210
I'm going to save this, and now we can hover over the

83
00:06:03.210 --> 00:06:12.440
interface itself and choose Create interface.

84
00:06:12.440 --> 00:06:15.840
We want to do that in the repository package,

85
00:06:15.840 --> 00:06:21.530
select OK. And similar to what we did with the service interface,

86
00:06:21.530 --> 00:06:25.590
I'm going to copy the contract in here of the methods that we

87
00:06:25.590 --> 00:06:27.920
want to implement, just so we don't have to keep going back and

88
00:06:27.920 --> 00:06:30.840
forth as we flush this out.

89
00:06:30.840 --> 00:06:35.940
And there are three methods inside of here that we'll need, a saveToken,

90
00:06:35.940 --> 00:06:40.540
a findByToken, and an update.

91
00:06:40.540 --> 00:06:45.640
Let's save this, and then, just like we did with the service,

92
00:06:45.640 --> 00:06:50.100
let's go ahead and create an instance of this PasswordRepositoryImpl.

93
00:06:50.100 --> 00:06:54.310
So I'm going to go up to our repository package, right‑click on it, and say

94
00:06:54.310 --> 00:07:06.140
New, Java Class, and we'll call this the PasswordRepositoryImpl, and hit Enter,

95
00:07:06.140 --> 00:07:15.840
and this is going to implement PasswordRepository.

96
00:07:15.840 --> 00:07:18.750
It's going to give us an error, because we haven't implemented those

97
00:07:18.750 --> 00:07:23.090
methods yet, so let's hover over that red line and say Implement

98
00:07:23.090 --> 00:07:28.560
methods, and save that. Before we go any further,

99
00:07:28.560 --> 00:07:31.650
we need to make sure that both our ServiceImpl and our

100
00:07:31.650 --> 00:07:34.020
Repository are annotated correctly.

101
00:07:34.020 --> 00:07:43.170
And so I want to go above our class declaration and say @Repository, and

102
00:07:43.170 --> 00:07:48.160
save that, and open up our PasswordServiceImpl and do the same thing up

103
00:07:48.160 --> 00:07:52.340
there, but we're going to annotate it with @Service.

104
00:07:52.340 --> 00:07:57.120
Those stereotype annotations just define Spring components,

105
00:07:57.120 --> 00:08:00.300
but it's good to identify the service tier as a service

106
00:08:00.300 --> 00:08:03.910
and the repository tier as a repository.

107
00:08:03.910 --> 00:08:07.940
Switching back to our PasswordRepository,

108
00:08:07.940 --> 00:08:14.820
we can now finish out the SaveToken for creating that password ResetToken,

109
00:08:14.820 --> 00:08:16.660
which we're going to do just like we had done

110
00:08:16.660 --> 00:08:20.440
before by importing the data source.

111
00:08:20.440 --> 00:08:29.210
So we'll say @Autowired and do private DataSource dataSource,

112
00:08:29.210 --> 00:08:33.740
and that will be injected into our code.

113
00:08:33.740 --> 00:08:38.640
And then we can create this SaveToken implementation.

114
00:08:38.640 --> 00:08:41.750
This implementation is almost identical to what we

115
00:08:41.750 --> 00:08:45.440
did with the account saveToken.

116
00:08:45.440 --> 00:08:50.640
We're going to create an instance of JdbcTemplate.

117
00:08:50.640 --> 00:08:55.020
That template is going to insert into reset_tokens,

118
00:08:55.020 --> 00:08:58.740
we'll grab the email, address, the username, and the token,

119
00:08:58.740 --> 00:09:02.750
and we'll calculate the expiry_date. And we haven't created that

120
00:09:02.750 --> 00:09:07.040
method inside of our ResetToken yet. To do so,

121
00:09:07.040 --> 00:09:14.190
we honestly can go to our VerificationToken and grab that

122
00:09:14.190 --> 00:09:18.280
exact method, calculateExpiryDate, and just paste that

123
00:09:18.280 --> 00:09:22.810
inside of our ResetToken. Again, this could be put in a parent class,

124
00:09:22.810 --> 00:09:24.490
but for the sake of this example,

125
00:09:24.490 --> 00:09:28.150
we'll just go ahead and copy that in there. We'll go to our

126
00:09:28.150 --> 00:09:34.860
PasswordRepository, and everything is done inside of this, and honestly,

127
00:09:34.860 --> 00:09:40.310
clear from our UI, to our controller, to our service, to our repository,

128
00:09:40.310 --> 00:09:44.550
we'll need to switch over to our MySQL editor and create this table

129
00:09:44.550 --> 00:09:48.640
really quick, but that's just a simple create statement on this table,

130
00:09:48.640 --> 00:09:50.500
and let's look at that now.

131
00:09:50.500 --> 00:09:55.170
The reset_tokens has one more column inside there than the

132
00:09:55.170 --> 00:09:59.560
verification_tokens does. We have the email address,

133
00:09:59.560 --> 00:10:00.550
the username,

134
00:10:00.550 --> 00:10:04.440
the token, and the expiration date, and the reason for that is we want to

135
00:10:04.440 --> 00:10:09.950
know what username we're going to combine with this email, so we've gone

136
00:10:09.950 --> 00:10:13.440
ahead and stored both of those in there.

137
00:10:13.440 --> 00:10:20.440
Let's highlight that, and execute on that SQL.

138
00:10:20.440 --> 00:10:22.360
It's created that for us.

139
00:10:22.360 --> 00:10:26.120
I am going to also execute a commit just to make sure

140
00:10:26.120 --> 00:10:28.210
that it is saved inside of there.

141
00:10:28.210 --> 00:10:33.500
And now we can go back and run our example from end‑to‑end. It should

142
00:10:33.500 --> 00:10:38.250
have all the pieces we need inside of there now. If we switch back to

143
00:10:38.250 --> 00:10:42.040
our application and start up our server,

144
00:10:42.040 --> 00:10:45.700
it'll go ahead and deploy all of those changes we just made.

145
00:10:45.700 --> 00:10:48.060
And now when we click on Add Registration,

146
00:10:48.060 --> 00:10:50.940
we'll have our Forgot password link,

147
00:10:50.940 --> 00:10:54.450
which we can put in our username of bryan, and you may have

148
00:10:54.450 --> 00:10:58.750
something different for yours, and the email that we wanted to go

149
00:10:58.750 --> 00:11:02.600
ahead and verify against. And, again, we didn't tie ours to

150
00:11:02.600 --> 00:11:03.850
looking that up in the database.

151
00:11:03.850 --> 00:11:05.440
That's a simple database call.

152
00:11:05.440 --> 00:11:07.440
You can do that on your own.

153
00:11:07.440 --> 00:11:11.040
We'll click Reset Password.

154
00:11:11.040 --> 00:11:17.100
It'll fire off that event, and as we go to our application, we

155
00:11:17.100 --> 00:11:22.430
can go ahead and see that it has fired off the email to have us

156
00:11:22.430 --> 00:11:24.840
go through and reset that password.

157
00:11:24.840 --> 00:11:27.430
If we click on this Reset password token, it's going to give us an

158
00:11:27.430 --> 00:11:29.470
error now, because that's the second half of this demo.

159
00:11:29.470 --> 00:11:32.370
So we've gone through and completed all of the pieces to have it go

160
00:11:32.370 --> 00:11:36.740
against the database, and fire off the email, and gather all the

161
00:11:36.740 --> 00:11:43.000
information. If we click on it, this is what we're going to finish for the second half of the demo.

