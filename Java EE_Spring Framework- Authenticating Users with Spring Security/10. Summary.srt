1
00:00:01,030 --> 00:00:05,660
This module really encompassed what I feel like a lot of people run into

2
00:00:05,660 --> 00:00:09,440
problems with when adding security into their application,

3
00:00:09,440 --> 00:00:14,500
and that is authenticating against one resource and authorizing against another.

4
00:00:14,500 --> 00:00:20,480
And so we covered authentication and authorization from LDAP and MySQL, or

5
00:00:20,480 --> 00:00:24,340
a SQL database, it doesn't matter if it's MySQL or not,

6
00:00:24,340 --> 00:00:28,430
and we customized that user details object, and we just added a nickname,

7
00:00:28,430 --> 00:00:30,770
but you could add whatever fields you want to be pulled

8
00:00:30,770 --> 00:00:33,800
out, and stored in that object, and passed around as part

9
00:00:33,800 --> 00:00:36,340
of your Spring Security session.

10
00:00:36,340 --> 00:00:42,780
We did that by creating a custom context mapper that intercepted that

11
00:00:42,780 --> 00:00:49,550
LDAP call to then authorize against our database, and finally, we

12
00:00:49,550 --> 00:00:53,120
added a couple of configuration items in there, in that we created

13
00:00:53,120 --> 00:00:58,940
that context mapper as a service and autowired that into our

14
00:00:58,940 --> 00:01:01,170
conference security config,

15
00:01:01,170 --> 00:01:05,840
thus injecting that resource and making it available to us inside of our app.

16
00:01:05,840 --> 00:01:13,000
Let's look at how we now customize our login page to utilize some of these features that we've now implemented.

