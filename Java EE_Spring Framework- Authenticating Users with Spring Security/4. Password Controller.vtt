WEBVTT
1
00:00:00.940 --> 00:00:05.180
We already set up the password controller to display our page,

2
00:00:05.180 --> 00:00:08.570
and now just like we did in our account registration,

3
00:00:08.570 --> 00:00:14.260
we're going to capture that information to reset our password.

4
00:00:14.260 --> 00:00:19.390
So we're going to grab that email address and username that we just entered

5
00:00:19.390 --> 00:00:24.790
on that JSP page and go ahead and post an event through the events

6
00:00:24.790 --> 00:00:29.290
scheduling system we have inside of our app already and receive that with a

7
00:00:29.290 --> 00:00:31.970
listener that will then fire off that event.

8
00:00:31.970 --> 00:00:36.060
So let's go ahead and implement that PostMapping now that

9
00:00:36.060 --> 00:00:39.740
will capture all that information for us.

10
00:00:39.740 --> 00:00:44.940
The post method is going to go right inside of our PasswordController.

11
00:00:44.940 --> 00:00:48.740
We've already defined that GetMapping inside of here so let's just go

12
00:00:48.740 --> 00:00:57.640
below that and add a little extra space in there.

13
00:00:57.640 --> 00:01:05.650
And the PostMapping has the convenience annotation of @PostMapping.

14
00:01:05.650 --> 00:01:11.540
We can also use the older style request method and associate a post with it.

15
00:01:11.540 --> 00:01:15.450
And this has a couple of arguments in the method signature

16
00:01:15.450 --> 00:01:19.650
here for Password and BindingResult,

17
00:01:19.650 --> 00:01:23.090
and you'll notice that just as we've done before, we have a

18
00:01:23.090 --> 00:01:26.010
Valid and ModelAttribute of password in here.

19
00:01:26.010 --> 00:01:26.870
Now,

20
00:01:26.870 --> 00:01:33.320
this particular course is not going through all of the specifics of Spring MVC,

21
00:01:33.320 --> 00:01:37.090
and so I'm not going to discuss the valid and model attribute.

22
00:01:37.090 --> 00:01:39.350
I've done so a little bit throughout the course, but

23
00:01:39.350 --> 00:01:41.050
if you have more questions on that,

24
00:01:41.050 --> 00:01:44.150
go back to the Spring Fundamental Spring MVC course and watch

25
00:01:44.150 --> 00:01:47.990
some of that to see how we get a valid object passed in and what

26
00:01:47.990 --> 00:01:50.140
the model attribute is referring to.

27
00:01:50.140 --> 00:01:53.670
So I'm going to put a couple of placeholder comments inside of here that

28
00:01:53.670 --> 00:01:58.390
will help show you what you could do to flesh this out to be an even more

29
00:01:58.390 --> 00:02:03.130
complete example, but it's going to be a full functioning example, and those

30
00:02:03.130 --> 00:02:07.790
steps would be that we should check for errors in the binding result, verify

31
00:02:07.790 --> 00:02:12.960
that it's a valid email address adhering to a regular expression format of

32
00:02:12.960 --> 00:02:18.560
an email address, verify that that email is stored in our system in our

33
00:02:18.560 --> 00:02:22.820
database, and then we are going to fire off an event to reset the email,

34
00:02:22.820 --> 00:02:26.640
and that's what we care about inside of our application to show how that's done.

35
00:02:26.640 --> 00:02:30.250
The other things you can choose how you want to do that inside of your app,

36
00:02:30.250 --> 00:02:33.840
and again, reference that Spring Fundamentals course.

37
00:02:33.840 --> 00:02:35.000
So to do this,

38
00:02:35.000 --> 00:02:42.770
we are going to add an application event publisher and we want to

39
00:02:42.770 --> 00:02:51.790
autowire that in here, so we'll say @Autowired, and then add in the class

40
00:02:51.790 --> 00:02:55.840
of ApplicationEventPublisher and eventPublisher.

41
00:02:55.840 --> 00:02:59.120
And the reason we can autowire this in is this is supplied by

42
00:02:59.120 --> 00:03:01.850
Spring as one of the configured beans already.

43
00:03:01.850 --> 00:03:03.830
So if it's not clear to you where that's coming from,

44
00:03:03.830 --> 00:03:04.850
I mentioned that before,

45
00:03:04.850 --> 00:03:09.860
but it's a little bit of a mystery to some people, it is supplied as

46
00:03:09.860 --> 00:03:13.620
part of our Spring application context already. So we have our

47
00:03:13.620 --> 00:03:18.360
ApplicationEventPublisher in here now and then we can go back down

48
00:03:18.360 --> 00:03:21.960
to our method signature, and inside of here, we're going to need to

49
00:03:21.960 --> 00:03:24.380
create another class, but I'll go ahead and type this out already,

50
00:03:24.380 --> 00:03:31.290
so we'll say eventPublisher and we will publish an event and it is an

51
00:03:31.290 --> 00:03:36.360
ApplicationEvent, and we'll say new and we have not created this class yet

52
00:03:36.360 --> 00:03:50.130
OnPasswordResetEvent and that's going to take the password object, and we'll

53
00:03:50.130 --> 00:03:58.830
give that a contextual string of conference_war, and if you'll remember from

54
00:03:58.830 --> 00:04:05.620
when we did this before, that string, that conference_war context is what we

55
00:04:05.620 --> 00:04:09.670
have named our war or what our URLs inside of our application and that could

56
00:04:09.670 --> 00:04:15.260
easily be injected in through a properties file, read from a database, there is

57
00:04:15.260 --> 00:04:17.260
a number of ways to get it, but to keep it simple,

58
00:04:17.260 --> 00:04:19.780
I've just gone ahead and hardcoded that inside of here.

59
00:04:19.780 --> 00:04:25.240
And then before we create that class, we're going to return,

60
00:04:25.240 --> 00:04:31.980
and this return is going to do a redirect to our

61
00:04:31.980 --> 00:04:35.440
password page that we just created,

62
00:04:35.440 --> 00:04:41.540
and we're going to give it a param of sent = true.

63
00:04:41.540 --> 00:04:44.620
Now we don't necessarily need to do anything with this, but if we

64
00:04:44.620 --> 00:04:49.890
wanted to use some of those Twitter Bootstrap CSS helpers that we

65
00:04:49.890 --> 00:04:51.120
already have inside of our app,

66
00:04:51.120 --> 00:04:56.070
we could display a email sent message or something like that, we've

67
00:04:56.070 --> 00:04:58.350
already done that a couple of times inside of here,

68
00:04:58.350 --> 00:05:02.640
it just gives us a way to know what's going on on the backend.

69
00:05:02.640 --> 00:05:06.240
Let's save this and go ahead and create that event now,

70
00:05:06.240 --> 00:05:12.340
and we should be able to just hover over that error message

71
00:05:12.340 --> 00:05:18.590
and select to Create class OnPasswordResetEvent and we want

72
00:05:18.590 --> 00:05:22.690
to choose the util package, not the controller,

73
00:05:22.690 --> 00:05:28.590
which it defaults to, and click OK, and you can see that it

74
00:05:28.590 --> 00:05:33.760
already extends ApplicationEvent and it carried through that

75
00:05:33.760 --> 00:05:35.770
it's expecting a valid password.

76
00:05:35.770 --> 00:05:37.850
We've already verified that in our controller,

77
00:05:37.850 --> 00:05:42.880
so we don't need to pass that in here, and we can change that string to

78
00:05:42.880 --> 00:05:52.100
appUrl. Then we'll go ahead, and for the super constructor that it's going

79
00:05:52.100 --> 00:06:00.340
to pass through, we'll say it's on the password object, and we have two

80
00:06:00.340 --> 00:06:02.170
variables we want to store inside of here.

81
00:06:02.170 --> 00:06:13.660
We're going to have a private String appUrl and a private Password, it's just

82
00:06:13.660 --> 00:06:18.540
the object that we're going to throw this event on, and we'll say Password

83
00:06:18.540 --> 00:06:26.390
password, store that, and for those two instances,

84
00:06:26.390 --> 00:06:35.480
we'll say this.appUrl is equal to appUrl and this.password is equal to

85
00:06:35.480 --> 00:06:42.750
password just storing those two objects. If we go below that constructor, we

86
00:06:42.750 --> 00:06:47.070
can right‑click and say Generate, Getter and Setter,

87
00:06:47.070 --> 00:06:51.250
choose both of those variables, and save that.

88
00:06:51.250 --> 00:06:56.900
And now we have everything in our app to fire off that event that

89
00:06:56.900 --> 00:06:59.800
we have now created inside of our controller.

90
00:06:59.800 --> 00:07:04.780
So let's save this, go back to our controller, and it's automatically

91
00:07:04.780 --> 00:07:08.040
imported that for us because we created it from here.

92
00:07:08.040 --> 00:07:12.640
So the whole front‑end piece is now done for us to

93
00:07:12.640 --> 00:07:17.060
choose to select the forgot password, which will go to the controller,

94
00:07:17.060 --> 00:07:23.020
return the JSP page where we enter in our username and password, enter

95
00:07:23.020 --> 00:07:26.080
that information, post it back to that controller,

96
00:07:26.080 --> 00:07:30.170
which will gather it. We have these comments here of things you could do

97
00:07:30.170 --> 00:07:34.180
in addition to the example that we're doing, and then we'll fire off that

98
00:07:34.180 --> 00:07:37.140
event using the application eventPublisher,

99
00:07:37.140 --> 00:07:42.070
which captures that password and URL and sends that off

100
00:07:42.070 --> 00:07:45.390
to our asynchronous system inside of our app that's

101
00:07:45.390 --> 00:07:53.000
already provided to us by Spring. Let's look at the next steps that we need to do to finish out this example.

