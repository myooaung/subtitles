1
00:00:00,840 --> 00:00:05,920
Let's go back to our cookbook project. For now, it's still just

2
00:00:05,920 --> 00:00:09,130
a handful of files and a couple of commits.

3
00:00:09,130 --> 00:00:13,130
We haven't created any branches yet, but you probably know

4
00:00:13,130 --> 00:00:17,240
that as soon as you have a Git project, you also have a branch.

5
00:00:17,240 --> 00:00:21,740
Git creates this branch for us when we do our first commit.

6
00:00:21,740 --> 00:00:25,010
Let's look at the list of branches in the project with git

7
00:00:25,010 --> 00:00:28,420
branch like this without any argument.

8
00:00:28,420 --> 00:00:32,810
And there it is, our default branch that in this project is called

9
00:00:32,810 --> 00:00:38,510
main. By now we're used to looking inside the .git directory, so let's

10
00:00:38,510 --> 00:00:41,440
do it again, looking for branches this time.

11
00:00:41,440 --> 00:00:43,100
What's a branch?

12
00:00:43,100 --> 00:00:49,490
This main branch must have some kind of concrete representation in this folder.

13
00:00:49,490 --> 00:00:51,340
What does it look like?

14
00:00:51,340 --> 00:00:51,770
Well,

15
00:00:51,770 --> 00:00:58,080
Git normally puts branches here in a directory called refs and the

16
00:00:58,080 --> 00:01:04,000
subdirectory called heads. Ignore the other subdirectory for now. And

17
00:01:04,000 --> 00:01:08,740
there it is, a small 41â€‘bytes file called main.

18
00:01:08,740 --> 00:01:11,350
This is our main branch.

19
00:01:11,350 --> 00:01:12,940
What's inside this file?

20
00:01:12,940 --> 00:01:16,880
You could probably guess it, but you don't have to guess.

21
00:01:16,880 --> 00:01:20,320
It's not compressed, so I can just print its content

22
00:01:20,320 --> 00:01:23,370
to the screen. And there you are.

23
00:01:23,370 --> 00:01:25,730
The file contains a single line,

24
00:01:25,730 --> 00:01:29,730
a hash. And as you probably expect, it's the hash of the

25
00:01:29,730 --> 00:01:34,620
current commit, this commit here. To recap,

26
00:01:34,620 --> 00:01:39,090
we have two linked commits in this project, and we also have a main

27
00:01:39,090 --> 00:01:44,090
branch, and the branch is a reference, a pointer to a commit,

28
00:01:44,090 --> 00:01:48,250
essentially. That's why the directory that contains branches is

29
00:01:48,250 --> 00:01:54,690
called refs, references. And note that this main branch actually has

30
00:01:54,690 --> 00:01:57,040
no special status in Git.

31
00:01:57,040 --> 00:02:02,590
Yeah, Git created it for us, but otherwise, it's just a branch like any other.

32
00:02:02,590 --> 00:02:06,230
And in general, we conventionally decided that it's the main

33
00:02:06,230 --> 00:02:10,040
branch of our project, unless we decide otherwise.

34
00:02:10,040 --> 00:02:10,840
And by the way,

35
00:02:10,840 --> 00:02:15,150
that's why I told you earlier on that I think that the name main is

36
00:02:15,150 --> 00:02:20,180
more appropriate than master because this default branch is usually the

37
00:02:20,180 --> 00:02:22,860
main branch of the project by convention,

38
00:02:22,860 --> 00:02:26,820
but it's not really a master of anything. It's just a regular

39
00:02:26,820 --> 00:02:33,140
branch. And just like any other branch, all there is to it is this small file.

40
00:02:33,140 --> 00:02:36,830
I could actually delete or rename the main branch just

41
00:02:36,830 --> 00:02:39,280
by deleting or renaming this file.

42
00:02:39,280 --> 00:02:41,400
If you're willing to live dangerously,

43
00:02:41,400 --> 00:02:45,410
you could even create a new branch just by writing a new file into

44
00:02:45,410 --> 00:02:49,960
this folder containing the hash on a commit. I wouldn't recommend

45
00:02:49,960 --> 00:02:54,840
that kind of hack in a real project, but on a test project, try it

46
00:02:54,840 --> 00:02:57,040
if you wish. It does work.

47
00:02:57,040 --> 00:03:01,080
But in this training, let's stick to the proper way to do it.

48
00:03:01,080 --> 00:03:08,570
Let's create a new branch with git branch and the branch name. About this

49
00:03:08,570 --> 00:03:12,550
branch, we mentioned that we want to insert our recipes in our cookbook,

50
00:03:12,550 --> 00:03:17,300
but we also get ideas for new recipes, and we want to keep them separate

51
00:03:17,300 --> 00:03:22,340
from the official recipes until we try them. We want them in a separate

52
00:03:22,340 --> 00:03:25,240
branch. Let's call it ideas.

53
00:03:25,240 --> 00:03:30,520
So, our plan is that we can put all our established recipes in

54
00:03:30,520 --> 00:03:34,440
main and the new ideas in the ideas branch.

55
00:03:34,440 --> 00:03:35,270
There we are.

56
00:03:35,270 --> 00:03:36,660
We have a new branch.

57
00:03:36,660 --> 00:03:41,750
We can see it listed among the branches, and we can see it alongside the

58
00:03:41,750 --> 00:03:47,540
main in the refs heads folder. And if we look at it,

59
00:03:47,540 --> 00:03:53,540
we see that it has exactly the same content as main, same commit.

60
00:03:53,540 --> 00:04:02,000
So, this is what we have now, two commits, two branches, and the branches are pointing at the same commit.

