1
00:00:00,840 --> 00:00:05,150
Now, what happens when there are other repos pushing towards you?

2
00:00:05,150 --> 00:00:08,620
So the state of origin might change at any time.

3
00:00:08,620 --> 00:00:12,040
Now, we cannot just write changes to the remote,

4
00:00:12,040 --> 00:00:15,520
we also must read changes from the remote.

5
00:00:15,520 --> 00:00:18,350
Things get a bit more complicated here,

6
00:00:18,350 --> 00:00:21,840
so I will use a diagram here instead of a demo.

7
00:00:21,840 --> 00:00:28,540
Imagine that we have a remote repo that looks like this, it's a single commit.

8
00:00:28,540 --> 00:00:32,520
I will use different colors for the commits, and I will not draw

9
00:00:32,520 --> 00:00:35,800
trees and blobs. I will skip them because they would make this

10
00:00:35,800 --> 00:00:39,920
diagram too busy. When we clone this repo,

11
00:00:39,920 --> 00:00:45,800
we get the same objects in our local repo, and here are the branches. I'm

12
00:00:45,800 --> 00:00:50,420
assuming that the remote has the default name origin, so so the remote

13
00:00:50,420 --> 00:00:57,120
main branch is called origin/main. Now, let's say that we add one commit,

14
00:00:57,120 --> 00:01:03,950
and we push. If the remote's main branch hasn't changed in the meantime,

15
00:01:03,950 --> 00:01:08,700
then things are easy for Git. It copies our new commit and the associated

16
00:01:08,700 --> 00:01:14,070
object to the remote and then updates the remote's main branch to point to

17
00:01:14,070 --> 00:01:19,050
the new commit, and it also reflects the change locally by updating the

18
00:01:19,050 --> 00:01:23,540
remote branch origin/main, and everything is aligned again.

19
00:01:23,540 --> 00:01:28,940
This is what happened when we pushed our changes a few minutes ago.

20
00:01:28,940 --> 00:01:30,600
Now, let's do it again.

21
00:01:30,600 --> 00:01:33,100
This is the initial situation again.

22
00:01:33,100 --> 00:01:38,120
We add a commit, and we prepare to push, but this time imagine

23
00:01:38,120 --> 00:01:41,530
that something has changed on the remote as well.

24
00:01:41,530 --> 00:01:44,510
Someone pushed another commit to the remote.

25
00:01:44,510 --> 00:01:46,540
This green commit.

26
00:01:46,540 --> 00:01:50,070
Now we can't just push, we have a conflict here.

27
00:01:50,070 --> 00:01:55,240
We have two different histories that need to be reconciled.

28
00:01:55,240 --> 00:01:58,840
In this case, we have two options, basically.

29
00:01:58,840 --> 00:02:03,650
One option, which I would not recommend, except in very special cases,

30
00:02:03,650 --> 00:02:06,240
is to force a push.

31
00:02:06,240 --> 00:02:11,340
We can do that with git push ‑f, that stands for force.

32
00:02:11,340 --> 00:02:15,380
That's like saying, I don't care what changes are on the remote,

33
00:02:15,380 --> 00:02:18,650
forget about them and just match my local history.

34
00:02:18,650 --> 00:02:20,540
That's the real one.

35
00:02:20,540 --> 00:02:27,110
So when we force a push, this happens, and we're probably losing that on origin.

36
00:02:27,110 --> 00:02:31,220
Here, we are losing the green commit. No branch is pointing out that commit

37
00:02:31,220 --> 00:02:34,940
anymore, so it will be garbage collected eventually.

38
00:02:34,940 --> 00:02:38,950
We're also creating a very confusing situation for all other people

39
00:02:38,950 --> 00:02:43,140
synchronizing to the same remote because now their local history will

40
00:02:43,140 --> 00:02:46,540
be conflicting with the history and origin.

41
00:02:46,540 --> 00:02:50,590
This is our teammate, Annie, working on the same cookbook

42
00:02:50,590 --> 00:02:55,060
repository, and she still has the old green commit in her

43
00:02:55,060 --> 00:02:59,460
repository. But after our force‑push, if Annie tries to interact

44
00:02:59,460 --> 00:03:01,990
with the remote, she'll have a conflict.

45
00:03:01,990 --> 00:03:06,260
Her history doesn't match the history of the remote, even though she

46
00:03:06,260 --> 00:03:09,620
didn't cause the conflict in the first place, and so she'll probably be

47
00:03:09,620 --> 00:03:13,740
left wondering what happened and how to solve it.

48
00:03:13,740 --> 00:03:17,580
So forcing a push is not a good idea in general.

49
00:03:17,580 --> 00:03:19,560
It doesn't really solve conflicts.

50
00:03:19,560 --> 00:03:24,020
It just puts the burden on other users to solve the conflict,

51
00:03:24,020 --> 00:03:28,700
so it's not going to win us many friends in the team. But we

52
00:03:28,700 --> 00:03:30,530
have a second better option.

53
00:03:30,530 --> 00:03:33,950
Let's say that we didn't do that force‑push.

54
00:03:33,950 --> 00:03:37,980
Let's go back to the situation we had in the beginning. We added

55
00:03:37,980 --> 00:03:42,090
the light blue commit, and we had a conflict because somebody else

56
00:03:42,090 --> 00:03:45,640
added the green commit on the remote.

57
00:03:45,640 --> 00:03:49,590
What we want to do in general is we want to fix the conflict on

58
00:03:49,590 --> 00:03:53,780
our own machine before we push. To do that,

59
00:03:53,780 --> 00:03:57,890
we need first to fetch the data from the remote.

60
00:03:57,890 --> 00:04:02,440
There is a command to do that called git fetch.

61
00:04:02,440 --> 00:04:06,610
We get the new objects from the remote, and we also update the current

62
00:04:06,610 --> 00:04:12,850
position of the remote branches, origin/main in this case. Now that we

63
00:04:12,850 --> 00:04:15,310
have the new commit and the related objects,

64
00:04:15,310 --> 00:04:19,540
we can merge our local changes with the remote changes.

65
00:04:19,540 --> 00:04:21,240
So we did the fetch.

66
00:04:21,240 --> 00:04:26,270
Now we do a merge. Of course, during the merge,we might have to

67
00:04:26,270 --> 00:04:30,480
fix merging conflicts and like, but the important point here is

68
00:04:30,480 --> 00:04:35,490
that we're not rewriting history. Merges never do that, they

69
00:04:35,490 --> 00:04:37,540
just add the new objects.

70
00:04:37,540 --> 00:04:39,260
So once we do the merge,

71
00:04:39,260 --> 00:04:44,410
our history is the same history as the remote, plus our local stuff, the

72
00:04:44,410 --> 00:04:48,240
light blue commit in this case, and we can push that new stuff to the

73
00:04:48,240 --> 00:04:52,440
remote without rewriting the remote's history.

74
00:04:52,440 --> 00:04:56,480
This is what you do most of the time. You fetch the changes from the

75
00:04:56,480 --> 00:05:02,500
remote, you merge them into your own repo, and then you push the result.

76
00:05:02,500 --> 00:05:08,210
This sequence of a git fetch followed by a git merge is so common that

77
00:05:08,210 --> 00:05:18,000
there is one single command that does both. It's called, you guessed it, git pull, a fetch followed by merge.

