WEBVTT
1
00:00:00.840 --> 00:00:02.230
Now brace yourself.

2
00:00:02.230 --> 00:00:04.050
We are going to talk about versioning.

3
00:00:04.050 --> 00:00:06.540
We are going to see how it works.

4
00:00:06.540 --> 00:00:10.640
You might think that versioning is a big deal and complicated,

5
00:00:10.640 --> 00:00:12.860
but now that you know about the object model,

6
00:00:12.860 --> 00:00:16.250
you will see it's not that complicated at all.

7
00:00:16.250 --> 00:00:18.470
First, let's change a file.

8
00:00:18.470 --> 00:00:25.040
I will edit the menu.txt file. I will add the name of another a recipe to it,

9
00:00:25.040 --> 00:00:26.040
cheesecake.

10
00:00:26.040 --> 00:00:27.840
I'm in a cakes mood.

11
00:00:27.840 --> 00:00:34.740
Let's save the file, and now git status tells us that the file has changed.

12
00:00:34.740 --> 00:00:42.190
So let's stage it with git add and create a new commit.

13
00:00:42.190 --> 00:00:47.640
There, now our working area is aligned again,

14
00:00:47.640 --> 00:00:52.840
and if we look at the log we can see both commits.

15
00:00:52.840 --> 00:00:59.030
Let's use the now‑familiar cat‑file to peek inside this second commit.

16
00:00:59.030 --> 00:01:03.430
There, this commit has something more than the first one.

17
00:01:03.430 --> 00:01:04.570
It has a parent.

18
00:01:04.570 --> 00:01:09.740
The parent is the previous commit, our first commit.

19
00:01:09.740 --> 00:01:12.950
Commits are linked, and most commits have a parent.

20
00:01:12.950 --> 00:01:15.510
The very first commit is an exception.

21
00:01:15.510 --> 00:01:20.540
So the commits are linked like this.

22
00:01:20.540 --> 00:01:24.840
Also, if you look at the hash of the tree that this second commit is pointing at,

23
00:01:24.840 --> 00:01:27.930
you will see that this is a brand‑new tree.

24
00:01:27.930 --> 00:01:31.820
It's not the same tree that the first commit was pointing at.

25
00:01:31.820 --> 00:01:34.040
It's like a different root.

26
00:01:34.040 --> 00:01:35.390
You will see why in a minute.

27
00:01:35.390 --> 00:01:40.140
But for now let's just draw a new tree here.

28
00:01:40.140 --> 00:01:43.140
Let's look at the content of this tree.

29
00:01:43.140 --> 00:01:46.300
You know how to do it but now, so I will go fast.

30
00:01:46.300 --> 00:01:47.940
We cat‑file it.

31
00:01:47.940 --> 00:01:52.310
We can also use just the first few digits of the hash and Git will

32
00:01:52.310 --> 00:01:55.550
automatically retrieve the whole hash from the database,

33
00:01:55.550 --> 00:02:00.540
unless there are multiple hashes starting with these first few digits.

34
00:02:00.540 --> 00:02:04.560
So, now we can see that the tree contains another tree,

35
00:02:04.560 --> 00:02:08.440
the recipes folder and blob menu.txt.

36
00:02:08.440 --> 00:02:13.190
Note that this is not the same menu.txt blob we had in the previous

37
00:02:13.190 --> 00:02:17.440
commit; it's a brand new blob because this file has changed.

38
00:02:17.440 --> 00:02:22.840
So if we cat‑file it, we can see it as the new content of the file,

39
00:02:22.840 --> 00:02:27.740
all of it, including both the Apple Pie and the Cheesecake.

40
00:02:27.740 --> 00:02:32.630
However, the tree here that lists the content of the recipes directory,

41
00:02:32.630 --> 00:02:36.020
this one is the same object that we already had in the

42
00:02:36.020 --> 00:02:38.130
database since the first commit,

43
00:02:38.130 --> 00:02:41.840
because the contents of this directory haven't changed.

44
00:02:41.840 --> 00:02:46.000
So there is no reason to create a new object; Git can just use

45
00:02:46.000 --> 00:02:49.540
the object that was already in the database.

46
00:02:49.540 --> 00:02:54.760
So here is the file structure of the object database after our second commit.

47
00:02:54.760 --> 00:02:57.500
The new commit is pointing to a new tree,

48
00:02:57.500 --> 00:03:03.340
which is pointing to a new blob and to the same tree as the first commit.

49
00:03:03.340 --> 00:03:06.140
Now it's clear why this tree must be new.

50
00:03:06.140 --> 00:03:07.740
This blob has changed,

51
00:03:07.740 --> 00:03:11.010
so the content of this tree must be different because

52
00:03:11.010 --> 00:03:13.150
it's pointing to a different blob.

53
00:03:13.150 --> 00:03:16.190
As usual, if you change anything in a piece of content,

54
00:03:16.190 --> 00:03:20.040
then you get a whole new object with a new hash.

55
00:03:20.040 --> 00:03:22.560
This tree, however, it hasn't changed,

56
00:03:22.560 --> 00:03:25.230
because nothing inside the directory changed,

57
00:03:25.230 --> 00:03:28.840
so Git can reuse the same object.

58
00:03:28.840 --> 00:03:32.300
That's one of the reasons why Git is so efficient.

59
00:03:32.300 --> 00:03:35.640
It doesn't store things more than once.

60
00:03:35.640 --> 00:03:39.980
We changed a single file, so Git stored a new blob and,

61
00:03:39.980 --> 00:03:43.030
in our case, a new tree and a new commit,

62
00:03:43.030 --> 00:03:47.610
because they are ultimately pointing at that new file so they had to change.

63
00:03:47.610 --> 00:03:52.360
The hashes they contain have changed. Trees and commits are

64
00:03:52.360 --> 00:03:55.040
really small, however, so even if they change,

65
00:03:55.040 --> 00:03:56.530
it's not a big deal.

66
00:03:56.530 --> 00:03:59.540
The process is still quite efficient.

67
00:03:59.540 --> 00:04:03.150
If you count the number of objects in this diagram, it's

68
00:04:03.150 --> 00:04:08.240
two commits, plus six trees and blobs, eight objects total.

69
00:04:08.240 --> 00:04:11.620
This is the current number of objects in the object database.

70
00:04:11.620 --> 00:04:12.840
Let's double check it.

71
00:04:12.840 --> 00:04:16.340
The database itself is getting a bit crowded,

72
00:04:16.340 --> 00:04:18.190
so instead of counting the file,

73
00:04:18.190 --> 00:04:23.260
so let's use one of those seldom‑used plumbing commands, git

74
00:04:23.260 --> 00:04:27.370
count‑objects. And there you are, 8 objects, and they take a

75
00:04:27.370 --> 00:04:30.840
very small amount of disk space.

76
00:04:30.840 --> 00:04:32.130
Speaking of efficiency,

77
00:04:32.130 --> 00:04:37.490
you might be surprised that Git stores a new blob every time you change a file.

78
00:04:37.490 --> 00:04:42.040
What if I have a huge file and I only change a single line?

79
00:04:42.040 --> 00:04:45.530
Will Git store an the entire new blob, in this case, and

80
00:04:45.530 --> 00:04:48.310
duplicate the rest of the file? Well,

81
00:04:48.310 --> 00:04:54.200
not really. Git also has another layer of optimizations to save more space.

82
00:04:54.200 --> 00:04:58.320
For example, as you keep working, adding content to the repository,

83
00:04:58.320 --> 00:05:03.070
Git might decide to store only the differences between the two files or

84
00:05:03.070 --> 00:05:07.140
even compress multiple objects in the same physical file.

85
00:05:07.140 --> 00:05:07.850
By the way,

86
00:05:07.850 --> 00:05:11.480
that kind of stuff is the reason for those mysterious info

87
00:05:11.480 --> 00:05:14.440
and pack directories in the database.

88
00:05:14.440 --> 00:05:15.050
However,

89
00:05:15.050 --> 00:05:18.900
we are really talking about implementation details, and usually you

90
00:05:18.900 --> 00:05:22.020
can ignore them. To understand the Git model,

91
00:05:22.020 --> 00:05:27.440
it's good enough to think of each commit, blob, or tree as just files,

92
00:05:27.440 --> 00:05:31.700
separate files, that are hashed and stored in the database. At a

93
00:05:31.700 --> 00:05:35.160
commands level, this is how Git actually works.

94
00:05:35.160 --> 00:05:39.750
And then it has another layer of optimizations that are probably not

95
00:05:39.750 --> 00:05:43.440
interesting to you unless you're working on the Git source code.

96
00:05:43.440 --> 00:05:51.000
Just know this: when it comes to being efficient, you can assume that Git always does the right thing.

