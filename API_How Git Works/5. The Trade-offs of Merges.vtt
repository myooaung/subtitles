WEBVTT
1
00:00:00.840 --> 00:00:03.670
And now we know what the rebase now looks like and how

2
00:00:03.670 --> 00:00:05.570
it actually works under the hood.

3
00:00:05.570 --> 00:00:10.090
However, you might still wonder why rebases even exist.

4
00:00:10.090 --> 00:00:12.240
I mean, we already have merging,

5
00:00:12.240 --> 00:00:16.140
and rebase and merging seem to do something very similar. They

6
00:00:16.140 --> 00:00:20.710
both take existing commits from one branch and roll those commits

7
00:00:20.710 --> 00:00:23.140
into the history of another branch.

8
00:00:23.140 --> 00:00:25.780
So if I'm working on the apple pie recipe and I want

9
00:00:25.780 --> 00:00:27.590
to also get the spaghetti recipe,

10
00:00:27.590 --> 00:00:32.540
I can have both in the same history, either by merging or rebasing.

11
00:00:32.540 --> 00:00:36.040
So why do we have two ways of doing something similar?

12
00:00:36.040 --> 00:00:39.540
And the reason why we have both merge and rebase is

13
00:00:39.540 --> 00:00:42.240
that they have different tradeoffs.

14
00:00:42.240 --> 00:00:48.210
Let's focus on merge, first. The whole point of merging is that it preserves

15
00:00:48.210 --> 00:00:52.510
history exactly as it happened. In this case, for example,

16
00:00:52.510 --> 00:00:55.870
you can clearly see that the orange commits and the blue commits were

17
00:00:55.870 --> 00:01:00.650
created independently, maybe by two developers working in parallel, and

18
00:01:00.650 --> 00:01:04.240
then they were merged into one single timeline.

19
00:01:04.240 --> 00:01:06.690
If there were any conflicts during the merge,

20
00:01:06.690 --> 00:01:10.640
then this merge commit would include the fixes to the conflicts.

21
00:01:10.640 --> 00:01:12.880
There is nothing else to understand, really.

22
00:01:12.880 --> 00:01:17.470
It's this simple. But merging becomes a bit less simple when you're

23
00:01:17.470 --> 00:01:20.650
looking at a large project where it's used a lot.

24
00:01:20.650 --> 00:01:26.210
For example, let me show you the Git project for a popular openâ€‘source library.

25
00:01:26.210 --> 00:01:31.180
I'm using a tool called Sourcetree to visualize the Git history. As you can

26
00:01:31.180 --> 00:01:34.540
see, there is a lot of branching and merging going on.

27
00:01:34.540 --> 00:01:36.080
Look at this area here.

28
00:01:36.080 --> 00:01:40.750
The developers seem to have been particularly merge happy in this period, so

29
00:01:40.750 --> 00:01:45.980
it can be very hard to follow the way that all of these branches diverged and

30
00:01:45.980 --> 00:01:48.660
then converged again. It's hard to understand,

31
00:01:48.660 --> 00:01:49.340
for example,

32
00:01:49.340 --> 00:01:54.400
which of these commits are contributing to which branches. Compare this

33
00:01:54.400 --> 00:01:59.960
graphical tool to the git log command that we've been using so far. In a

34
00:01:59.960 --> 00:02:03.920
project such as this one, git log can be misleading.

35
00:02:03.920 --> 00:02:08.640
The log is showing history as if it were a single long timeline,

36
00:02:08.640 --> 00:02:10.540
one commit after another,

37
00:02:10.540 --> 00:02:13.880
but that's not what the project's history actually looks like.

38
00:02:13.880 --> 00:02:16.840
It looks like a graph, not a line.

39
00:02:16.840 --> 00:02:21.340
The log is squashing the real history somehow, interleaving

40
00:02:21.340 --> 00:02:24.610
related commits from different branches as if they were

41
00:02:24.610 --> 00:02:28.140
connected to each other while they aren't.

42
00:02:28.140 --> 00:02:32.020
So merges preserve the project history, and in general,

43
00:02:32.020 --> 00:02:36.540
that's good, except that the project history can be complicated and

44
00:02:36.540 --> 00:02:45.000
confusing, so that's not always necessarily a good thing. But one thing is for sure, merges never lie.

