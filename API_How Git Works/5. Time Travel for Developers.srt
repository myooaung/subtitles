1
00:00:00,840 --> 00:00:04,700
Okay, now give me just a few minutes for a short aside.

2
00:00:04,700 --> 00:00:07,560
From the first module of this training,

3
00:00:07,560 --> 00:00:11,430
you might remember diagrams such as this one.

4
00:00:11,430 --> 00:00:13,380
It's about trees and blobs.

5
00:00:13,380 --> 00:00:14,940
To make things easier,

6
00:00:14,940 --> 00:00:18,390
I avoided talking about trees and blobs in the second module.

7
00:00:18,390 --> 00:00:20,840
I mostly talk about commits.

8
00:00:20,840 --> 00:00:24,940
I'll just mention trees and blobs again quickly to show you in more

9
00:00:24,940 --> 00:00:28,100
detail how Git manages your working directory.

10
00:00:28,100 --> 00:00:31,560
You know that the objects in the database are commits,

11
00:00:31,560 --> 00:00:35,220
trees, and blobs, and also notated tags,

12
00:00:35,220 --> 00:00:37,980
although there are none of them in this example.

13
00:00:37,980 --> 00:00:42,590
You also know that all these objects are arranged in a graph.

14
00:00:42,590 --> 00:00:44,540
They reference each other.

15
00:00:44,540 --> 00:00:47,930
There are references from a commit to its parents,

16
00:00:47,930 --> 00:00:51,080
references from a commit to its tree,

17
00:00:51,080 --> 00:00:56,440
and references from trees to blobs and other trees.

18
00:00:56,440 --> 00:01:01,250
These references all look alike, but they're used in two different ways.

19
00:01:01,250 --> 00:01:06,340
References between commits are used to track history.

20
00:01:06,340 --> 00:01:11,040
All the other references are used to track content.

21
00:01:11,040 --> 00:01:14,700
We've also seen that Git is good that we're using content,

22
00:01:14,700 --> 00:01:18,040
so you can have objects that are reachable from more

23
00:01:18,040 --> 00:01:22,340
than one commit like these ones here.

24
00:01:22,340 --> 00:01:26,250
The point I want to make is that when you move to another commit,

25
00:01:26,250 --> 00:01:29,250
for example, you switch to another branch,

26
00:01:29,250 --> 00:01:31,830
Git doesn't care about history.

27
00:01:31,830 --> 00:01:36,150
It doesn't look at the ways that commits connect to each other.

28
00:01:36,150 --> 00:01:39,940
It just cares about trees and blobs.

29
00:01:39,940 --> 00:01:43,370
So if you look at the world from this commit here,

30
00:01:43,370 --> 00:01:47,290
then Git forgets about the link to the parent of the commit,

31
00:01:47,290 --> 00:01:50,360
and it looks at the tree in the commit and all the

32
00:01:50,360 --> 00:01:53,250
objects that can be reached from there.

33
00:01:53,250 --> 00:01:57,530
That is the entire state of the project at the time of the commit,

34
00:01:57,530 --> 00:02:00,540
a complete snapshot of every file, every folder.

35
00:02:00,540 --> 00:02:06,540
Git uses this information to replace the content of your working directory.

36
00:02:06,540 --> 00:02:10,780
That's how you travel back and forth in time with Git.

37
00:02:10,780 --> 00:02:12,840
It is the whole point of versioning.

38
00:02:12,840 --> 00:02:16,740
And if you look at this commit here, same thing,

39
00:02:16,740 --> 00:02:21,240
it counts with an entire representation of the entire project.

40
00:02:21,240 --> 00:02:26,280
You might think that merge commits must be more complicated than that,

41
00:02:26,280 --> 00:02:28,200
but actually they're not.

42
00:02:28,200 --> 00:02:32,940
Okay, they have multiple parents, that's the definition of a merge,

43
00:02:32,940 --> 00:02:36,240
but Git doesn't care about that when you move to a commit.

44
00:02:36,240 --> 00:02:41,200
It just goes into the commit, and our tree is the tree in the commit, as

45
00:02:41,200 --> 00:02:46,860
usual. A merge commit will, in general, have its own trees and blobs because

46
00:02:46,860 --> 00:02:51,460
the objects in the merge might not be present in any of the parents. Think

47
00:02:51,460 --> 00:02:56,480
of a file that has lines from both parents, for example. On the other hand,

48
00:02:56,480 --> 00:02:58,150
from the merge commit's tree,

49
00:02:58,150 --> 00:03:01,450
you can probably reach objects that are also reachable from other

50
00:03:01,450 --> 00:03:05,680
commits. And once again, Git doesn't care about which blob or

51
00:03:05,680 --> 00:03:08,840
tree was introduced by which commit.

52
00:03:08,840 --> 00:03:10,410
When it stores the commit,

53
00:03:10,410 --> 00:03:15,590
it just reuses objects that are already there, and it creates the objects that

54
00:03:15,590 --> 00:03:21,270
are not already there. A way it checks out the commit, it just looks at the tree

55
00:03:21,270 --> 00:03:25,440
and rebuilds the state of the project from there.

56
00:03:25,440 --> 00:03:28,920
I told you this story because I want to make a couple of points.

57
00:03:28,920 --> 00:03:34,540
First point, don't get confused with trees and blobs. Retrieving a

58
00:03:34,540 --> 00:03:39,180
past state in GIt is a pretty straightforward thing.

59
00:03:39,180 --> 00:03:41,260
It's just a stupid content tracker.

60
00:03:41,260 --> 00:03:46,440
It goes into a commit and retrieves the trees and blobs from there.

61
00:03:46,440 --> 00:03:49,340
Nothing more complicated than that.

62
00:03:49,340 --> 00:03:51,730
When you use Git, focus on the history,

63
00:03:51,730 --> 00:03:56,050
how commits connect to each other, and trust Git to do

64
00:03:56,050 --> 00:03:59,940
the right thing with trees and blobs.

65
00:03:59,940 --> 00:04:03,740
The second point I want to make is that Git doesn't

66
00:04:03,740 --> 00:04:07,140
really care much about your working area.

67
00:04:07,140 --> 00:04:11,130
Remember, when you move to another commit, Git adjusts or replaces the

68
00:04:11,130 --> 00:04:14,280
working area with the stuff from the object database.

69
00:04:14,280 --> 00:04:19,540
Git mostly cares about the objects in the database, not your working directory.

70
00:04:19,540 --> 00:04:23,400
The objects in the database are immutable and persistent while the

71
00:04:23,400 --> 00:04:27,900
files in your working directory are as transient as they get. They can

72
00:04:27,900 --> 00:04:33,110
change as quickly as you can do a Git switch or checkout. Git is not

73
00:04:33,110 --> 00:04:35,410
reckless with your working area.

74
00:04:35,410 --> 00:04:39,270
It will give you a warning before overriding your files.

75
00:04:39,270 --> 00:04:39,840
For example,

76
00:04:39,840 --> 00:04:44,450
if you try to switch to another branch, but you have uncommitted changes,

77
00:04:44,450 --> 00:04:46,150
Git will tell you that.

78
00:04:46,150 --> 00:04:49,400
But other than that, as far as Git is concerned,

79
00:04:49,400 --> 00:04:53,340
your working area is the least important part of your project.

80
00:04:53,340 --> 00:04:57,840
All the good stuff is indeed not Git directory.

81
00:04:57,840 --> 00:04:59,800
And now that I made this aside,

82
00:04:59,800 --> 00:05:10,000
you can forget about trees and blobs for the rest of this training. From now on, we will mostly be concerned with commits and history.

