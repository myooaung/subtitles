WEBVTT
1
00:00:00.840 --> 00:00:04.890
One more thing about this rebasing process, I just told you that

2
00:00:04.890 --> 00:00:08.960
rebasing copies the data in the old commits to create new commits,

3
00:00:08.960 --> 00:00:12.440
but what happens to the old commits, then?

4
00:00:12.440 --> 00:00:17.220
It depends. In this case here, these commits are not very useful.

5
00:00:17.220 --> 00:00:19.550
There is no branch pointing at them.

6
00:00:19.550 --> 00:00:24.300
The only branch that was pointing at them has moved over to the new commits.

7
00:00:24.300 --> 00:00:28.470
So these old commits are impossible to reach, almost impossible,

8
00:00:28.470 --> 00:00:31.140
because there are a few ways to retrieve them.

9
00:00:31.140 --> 00:00:31.830
For example,

10
00:00:31.830 --> 00:00:36.640
if you had written down their hashes, then you could still check out them,

11
00:00:36.640 --> 00:00:39.890
but it's more likely that you will just lose track of them.

12
00:00:39.890 --> 00:00:43.750
So, why would Git waste disk space to keep around

13
00:00:43.750 --> 00:00:46.440
commits that cannot even be reached?

14
00:00:46.440 --> 00:00:49.330
In fact, Git doesn't keep them around.

15
00:00:49.330 --> 00:00:53.280
This is another case like the one we've seen in the previous module when we

16
00:00:53.280 --> 00:00:58.160
talked about detached head. We have unreachable objects in the database,

17
00:00:58.160 --> 00:01:01.540
and Git will eventually garbage collect them.

18
00:01:01.540 --> 00:01:03.500
If I keep working on this project,

19
00:01:03.500 --> 00:01:07.250
then at some point in the future I look into the Git database,

20
00:01:07.250 --> 00:01:14.000
those commits might well have been deleted. As usual, Git doesn't like waste.

