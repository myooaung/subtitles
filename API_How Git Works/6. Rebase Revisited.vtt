WEBVTT
1
00:00:00.840 --> 00:00:03.880
There is one more important thing to say about this

2
00:00:03.880 --> 00:00:07.900
process of pushing and pulling, and it has to do with rebases.

3
00:00:07.900 --> 00:00:10.480
In the previous module of this training,

4
00:00:10.480 --> 00:00:12.380
we talked about rebasing,

5
00:00:12.380 --> 00:00:17.950
and back then I told you that there are cases where a rebase doesn't work well.

6
00:00:17.950 --> 00:00:20.840
Now we can finally see why.

7
00:00:20.840 --> 00:00:25.230
Say that we have this repo freshly cloned with two branches

8
00:00:25.230 --> 00:00:28.340
that are both tracking branches on the remote.

9
00:00:28.340 --> 00:00:31.260
I didn't draw the remote branches in this diagram.

10
00:00:31.260 --> 00:00:34.160
They are not necessary for this explanation.

11
00:00:34.160 --> 00:00:37.370
Just know that we are working on the ideas branch,

12
00:00:37.370 --> 00:00:42.340
and we decide that we want the changes from main into ideas.

13
00:00:42.340 --> 00:00:46.090
You know that we can do that with either a merge or a rebase.

14
00:00:46.090 --> 00:00:48.080
Let's try the rebase this time.

15
00:00:48.080 --> 00:00:54.040
So we are on ideas, and we say git rebase main.

16
00:00:54.040 --> 00:00:56.010
And Git does the rebase.

17
00:00:56.010 --> 00:01:01.940
It copies the green commit from ideas on top of main, and there we are.

18
00:01:01.940 --> 00:01:05.410
However, remember what we said when we talked about rebases?

19
00:01:05.410 --> 00:01:10.700
This new green commit is not the same commit as the previous green commit.

20
00:01:10.700 --> 00:01:15.350
It looks the same, but it's a copy, a different database object.

21
00:01:15.350 --> 00:01:18.260
I'll mark it with an exclamation point to tell it

22
00:01:18.260 --> 00:01:20.740
apart from the original commit.

23
00:01:20.740 --> 00:01:25.040
The original commit will actually be garbage collected at some point.

24
00:01:25.040 --> 00:01:25.610
Now,

25
00:01:25.610 --> 00:01:28.820
after this rebase we have a similar situation to the

26
00:01:28.820 --> 00:01:30.760
one we've seen a few minutes ago.

27
00:01:30.760 --> 00:01:32.440
We have a conflict.

28
00:01:32.440 --> 00:01:36.240
We can't just push to the remote because we have different

29
00:01:36.240 --> 00:01:39.740
histories on our local repo and on the remote.

30
00:01:39.740 --> 00:01:44.440
And we've seen that we have a couple of ways to deal with remote conflicts.

31
00:01:44.440 --> 00:01:48.740
One is to force a push, to do git push â€‘f,

32
00:01:48.740 --> 00:01:52.170
but we've also seen that's almost always a bad idea because

33
00:01:52.170 --> 00:01:55.040
it creates conflicts for other users.

34
00:01:55.040 --> 00:01:59.780
So now you might think, we know what to do, the same thing we did before.

35
00:01:59.780 --> 00:02:04.060
We can fetch and merge, or, in a single operation,

36
00:02:04.060 --> 00:02:07.640
we can pull, solve the conflict locally,

37
00:02:07.640 --> 00:02:09.540
and then push.

38
00:02:09.540 --> 00:02:14.640
Only this time if we do this, the result is probably not what you want.

39
00:02:14.640 --> 00:02:15.410
Let's see.

40
00:02:15.410 --> 00:02:22.040
First, we fetch there, second, we merge there,

41
00:02:22.040 --> 00:02:24.540
and look at the history we came up with.

42
00:02:24.540 --> 00:02:28.360
Now we have both the original green commit and its copy,

43
00:02:28.360 --> 00:02:31.390
the rebased green commit with the exclamation mark,

44
00:02:31.390 --> 00:02:34.840
in the same history, which can be really confusing.

45
00:02:34.840 --> 00:02:36.270
Now if we do a git log,

46
00:02:36.270 --> 00:02:39.990
we'll see two commits that look exactly the same with the same message,

47
00:02:39.990 --> 00:02:41.840
and date, and content.

48
00:02:41.840 --> 00:02:46.080
And if we rebased multiple commits, which is a pretty common thing to do,

49
00:02:46.080 --> 00:02:49.350
then we'd see an entire line of duplicated commits,

50
00:02:49.350 --> 00:02:52.260
which would be very perplexing.

51
00:02:52.260 --> 00:02:55.520
So we just defeated our original purpose.

52
00:02:55.520 --> 00:02:58.320
We rebased to clean up our local history,

53
00:02:58.320 --> 00:03:04.040
but in the end, we got a history that's even more messy and harder to understand.

54
00:03:04.040 --> 00:03:07.650
So, forcing a push didn't work and pulling to solve

55
00:03:07.650 --> 00:03:09.940
the conflict didn't work either.

56
00:03:09.940 --> 00:03:12.440
In both cases we got in trouble.

57
00:03:12.440 --> 00:03:15.540
The bottom line when it comes to rebasing is,

58
00:03:15.540 --> 00:03:17.070
as a general rule,

59
00:03:17.070 --> 00:03:21.940
don't rebase stuff that has been shared with some other repository.

60
00:03:21.940 --> 00:03:26.030
It's okay to rebase commits that you haven't shared yet, in general.

61
00:03:26.030 --> 00:03:27.320
I do it all the time.

62
00:03:27.320 --> 00:03:30.810
But just remember that it's easy to do it by mistake,

63
00:03:30.810 --> 00:03:33.080
to rebase commits that you already shared,

64
00:03:33.080 --> 00:03:36.640
even if you think you didn't, and then you get in trouble.

65
00:03:36.640 --> 00:03:39.600
And that's the major reason why I warned you about

66
00:03:39.600 --> 00:03:41.540
rebases in the previous module.

67
00:03:41.540 --> 00:03:49.000
Rebases are great, but you should be aware of the way they really work, otherwise, they might land you in a tight spot.

