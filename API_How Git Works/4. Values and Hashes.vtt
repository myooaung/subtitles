WEBVTT
1
00:00:00.840 --> 00:00:05.340
I just said that at its core Git is a map.

2
00:00:05.340 --> 00:00:08.930
That means that it's a table with keys and values.

3
00:00:08.930 --> 00:00:11.100
What are the keys and what are the values?

4
00:00:11.100 --> 00:00:14.240
Well, the values are just sequences of bytes,

5
00:00:14.240 --> 00:00:19.440
for example, the content of a text file or even a binary file.

6
00:00:19.440 --> 00:00:23.140
Any sequence of bytes can be a value. You can give a value to Git,

7
00:00:23.140 --> 00:00:26.640
and it will calculate a key for it, a hash.

8
00:00:26.640 --> 00:00:31.340
Git calculates hashes with an algorithm called SHA‑1.

9
00:00:31.340 --> 00:00:34.340
This is one of those technical names that nobody

10
00:00:34.340 --> 00:00:36.200
seems to agree how to pronounce.

11
00:00:36.200 --> 00:00:40.900
You might hear people call it SHA‑1 or SHA‑1.

12
00:00:40.900 --> 00:00:43.080
Other people call it SHA‑1,

13
00:00:43.080 --> 00:00:46.560
that I think is nice because it kind of rolls off the tongue,

14
00:00:46.560 --> 00:00:48.940
so I'll call it SHA‑1.

15
00:00:48.940 --> 00:00:52.310
Every piece of content has its own SHA‑1 hash.

16
00:00:52.310 --> 00:00:57.340
For example, let's take a piece of content, the string Apple Pie.

17
00:00:57.340 --> 00:01:00.930
If you ask Git to generate a hash out of this string,

18
00:01:00.930 --> 00:01:05.160
then you will get this hash, exactly this one.

19
00:01:05.160 --> 00:01:08.240
There is only one hash for this string.

20
00:01:08.240 --> 00:01:11.860
SHA‑1 hashes are 20 bytes in hexadecimal format,

21
00:01:11.860 --> 00:01:15.640
so they are a sequence of 40 hex digits.

22
00:01:15.640 --> 00:01:20.140
This will be Git's key to store this content in the map.

23
00:01:20.140 --> 00:01:23.130
We can also calculate the hash on the command line.

24
00:01:23.130 --> 00:01:24.170
To do this,

25
00:01:24.170 --> 00:01:27.970
we need a command that you might never have heard about

26
00:01:27.970 --> 00:01:30.720
because it's a low‑level plumbing command,

27
00:01:30.720 --> 00:01:32.650
git hash‑object.

28
00:01:32.650 --> 00:01:37.740
So let's pass our piece of content to hash‑object.

29
00:01:37.740 --> 00:01:39.600
I wish I could do it like this.

30
00:01:39.600 --> 00:01:42.240
It would be simple, but I can't.

31
00:01:42.240 --> 00:01:45.640
Hash‑object is not very user friendly.

32
00:01:45.640 --> 00:01:49.180
It's a plumbing command, so if you do what I just did,

33
00:01:49.180 --> 00:01:53.540
Git will think that Apple Pie is the name of a file.

34
00:01:53.540 --> 00:01:54.330
Instead,

35
00:01:54.330 --> 00:01:59.630
I can use the echo command to output this content and then

36
00:01:59.630 --> 00:02:04.040
pipe the result into hash‑object, like this.

37
00:02:04.040 --> 00:02:09.030
I also need to tell hash‑object to get its content from standard input,

38
00:02:09.030 --> 00:02:10.880
not very intuitive.

39
00:02:10.880 --> 00:02:13.250
By the way, if you're using Windows,

40
00:02:13.250 --> 00:02:16.760
then you will use a slightly different shell command,

41
00:02:16.760 --> 00:02:19.260
but don't worry too much about that.

42
00:02:19.260 --> 00:02:22.840
I'm not asking you to send this command yourself, necessarily.

43
00:02:22.840 --> 00:02:25.750
It's enough that you understand what it does.

44
00:02:25.750 --> 00:02:29.100
It prints out the hash for this piece of content.

45
00:02:29.100 --> 00:02:31.280
And here is the result.

46
00:02:31.280 --> 00:02:34.240
This is the hash for the string Apple Pie.

47
00:02:34.240 --> 00:02:37.400
This is the same hash I showed you on the previous slide.

48
00:02:37.400 --> 00:02:41.330
We have the same content, so we get the same hash.

49
00:02:41.330 --> 00:02:44.510
If you change anything in the content, a single letter,

50
00:02:44.510 --> 00:02:49.340
for example, I will add a newline character at the end like this.

51
00:02:49.340 --> 00:02:53.140
Then you get a completely different hash.

52
00:02:53.140 --> 00:02:56.860
Speaking of Windows, one thing you might find confusing is,

53
00:02:56.860 --> 00:03:00.140
if you do send the equivalent command under Windows,

54
00:03:00.140 --> 00:03:02.340
then you'll get a different hash,

55
00:03:02.340 --> 00:03:05.630
but that isn't because there is any difference in git

56
00:03:05.630 --> 00:03:08.020
hash‑object or the hashing algorithm.

57
00:03:08.020 --> 00:03:12.870
It's just that the echo command behaves differently under Windows in a few ways.

58
00:03:12.870 --> 00:03:14.000
In particular,

59
00:03:14.000 --> 00:03:19.640
it doesn't strip away these quotes; it considers the quotes a part of the story,

60
00:03:19.640 --> 00:03:22.940
and it also adds a newline at the end of the string.

61
00:03:22.940 --> 00:03:24.740
So, long story short,

62
00:03:24.740 --> 00:03:28.620
you are actually hashing a different sequence of characters under Windows.

63
00:03:28.620 --> 00:03:30.820
But that doesn't matter in general.

64
00:03:30.820 --> 00:03:34.050
It only matters for this specific example because we're

65
00:03:34.050 --> 00:03:36.130
using echo to generate the sequence.

66
00:03:36.130 --> 00:03:40.650
In general, if you pass the same sequence of bytes to hash‑object,

67
00:03:40.650 --> 00:03:45.230
then you get the exact same hash every time on every operating system,

68
00:03:45.230 --> 00:03:51.040
and each object in a Git repository has a SHA‑1 hash like this.

69
00:03:51.040 --> 00:03:55.620
If you put the string Apple Pie in file and store this file in Git,

70
00:03:55.620 --> 00:04:00.060
then the hash we just generated will identify the file.

71
00:04:00.060 --> 00:04:03.970
And as we'll see later, directories also have their own hash,

72
00:04:03.970 --> 00:04:07.240
as do commits, and so on.

73
00:04:07.240 --> 00:04:12.300
With so many hashes around, you might wonder what happens if they collide?

74
00:04:12.300 --> 00:04:15.460
After all, the number of possible hashes is,

75
00:04:15.460 --> 00:04:19.060
it's large, sure, but it's not infinite.

76
00:04:19.060 --> 00:04:22.310
What if I have two different pieces of content,

77
00:04:22.310 --> 00:04:25.840
and just by chance, they happen to have the same hash?

78
00:04:25.840 --> 00:04:31.040
Wouldn't that make a mess of my project and cause me to lose my data?

79
00:04:31.040 --> 00:04:35.620
Well, yes, it would, but it's unlikely to happen.

80
00:04:35.620 --> 00:04:39.940
Let's see just how unlikely it is, just because it's fun.

81
00:04:39.940 --> 00:04:42.840
Think of the US Powerball lottery.

82
00:04:42.840 --> 00:04:46.640
How many chances do you have of winning the lottery jackpot?

83
00:04:46.640 --> 00:04:50.300
Google tells me that the chances that a particular combination of

84
00:04:50.300 --> 00:04:56.440
numbers wins the jackpot are about 1 in 175 million.

85
00:04:56.440 --> 00:04:59.760
This is a large number, so let's try to visualize it.

86
00:04:59.760 --> 00:05:02.500
Imagine printing one ticket for every possible

87
00:05:02.500 --> 00:05:04.490
combination of numbers in the lottery.

88
00:05:04.490 --> 00:05:07.940
You get 175 million tickets.

89
00:05:07.940 --> 00:05:14.840
Now, put all these tickets in a line, 1 every 25 centimeters, about 10 inches.

90
00:05:14.840 --> 00:05:19.440
That's a very long line of tickets, long enough to span the equator.

91
00:05:19.440 --> 00:05:19.880
Now,

92
00:05:19.880 --> 00:05:24.440
imagine starting somewhere on the equator and taking a walk around the world.

93
00:05:24.440 --> 00:05:27.730
It's a long walk, and also quite a bit of swimming,

94
00:05:27.730 --> 00:05:29.770
so it's going to take a while.

95
00:05:29.770 --> 00:05:33.400
You are walking along this very long line of lottery tickets,

96
00:05:33.400 --> 00:05:36.750
remember. And just once during your trip,

97
00:05:36.750 --> 00:05:39.440
you are allowed to pick up a single ticket.

98
00:05:39.440 --> 00:05:44.240
And if you're really lucky, that's the one ticket that wins the jackpot.

99
00:05:44.240 --> 00:05:45.210
Congratulations.

100
00:05:45.210 --> 00:05:48.340
That's how hard it is to win the jackpot.

101
00:05:48.340 --> 00:05:53.120
Now, imagine that you enjoy winning the jackpot, so you want to try it again,

102
00:05:53.120 --> 00:05:55.850
you take a second trip around the world,

103
00:05:55.850 --> 00:06:01.140
you once again pick up a single ticket along your way, and you win again.

104
00:06:01.140 --> 00:06:03.370
Now, that's really, really good luck.

105
00:06:03.370 --> 00:06:08.640
Winning the jackpot twice in a row is almost miraculous, matter of fact.

106
00:06:08.640 --> 00:06:12.520
Now, imagine doing it a third time and, amazingly, you

107
00:06:12.520 --> 00:06:18.110
win again, and again, and again, six times in a row. Now,

108
00:06:18.110 --> 00:06:22.460
winning the jackpot six times in a row is extremely unlikely,

109
00:06:22.460 --> 00:06:23.830
you will agree. Well,

110
00:06:23.830 --> 00:06:28.060
going back to Git, these are about the same chances of getting the same

111
00:06:28.060 --> 00:06:33.740
hash for two different pieces of content. It's just not likely to ever

112
00:06:33.740 --> 00:06:37.050
happen to you or to anybody by chance.

113
00:06:37.050 --> 00:06:42.140
So, for all practical purposes, SHA‑1 hashes are unique,

114
00:06:42.140 --> 00:06:46.670
not just unique in your project. You can think of them as

115
00:06:46.670 --> 00:06:49.540
if they were unique in the universe.

116
00:06:49.540 --> 00:06:53.150
You could put all of the data you will ever write in your life in

117
00:06:53.150 --> 00:06:56.940
the same Git repository, and Git would assign a different hash to

118
00:06:56.940 --> 00:06:59.690
each version of each file in each folder.

119
00:06:59.690 --> 00:07:01.510
That's a lot of data.

120
00:07:01.510 --> 00:07:04.180
You might get some performance problems.

121
00:07:04.180 --> 00:07:08.140
Okay, you probably will, but still no collisions.

122
00:07:08.140 --> 00:07:11.440
Later in this training when we talk about distribution,

123
00:07:11.440 --> 00:07:16.520
this notion that hashes are unique in the universe will come useful.

124
00:07:16.520 --> 00:07:21.680
For now, I'm only mentioning it to say if you have ever worried that

125
00:07:21.680 --> 00:07:29.000
two hashes might collide in your Git project, then no need to worry about that.

