1
00:00:00,840 --> 00:00:05,410
Now that we have two branches, if we look at the list of branches again,

2
00:00:05,410 --> 00:00:09,080
we see that one branch is marked with an asterisk

3
00:00:09,080 --> 00:00:11,430
because it's the current branch.

4
00:00:11,430 --> 00:00:14,640
What does that mean concretely?

5
00:00:14,640 --> 00:00:19,360
I mean, how does Git know that main is our current branch?

6
00:00:19,360 --> 00:00:21,780
There must be some kind of information,

7
00:00:21,780 --> 00:00:27,360
probably in the .git folder, that says which branch is the current branch,

8
00:00:27,360 --> 00:00:31,540
some kind of file maybe that contains that information.

9
00:00:31,540 --> 00:00:34,210
And indeed, there is such a file,

10
00:00:34,210 --> 00:00:37,940
and you probably know the name of this file already.

11
00:00:37,940 --> 00:00:44,040
If you look at the .git folder again, you will see a file named HEAD in here.

12
00:00:44,040 --> 00:00:48,040
If you have experience with Git, this should ring a bell.

13
00:00:48,040 --> 00:00:52,540
And if you look inside HEAD,

14
00:00:52,540 --> 00:00:56,710
then you will see that it contains a reference to another file.

15
00:00:56,710 --> 00:01:00,280
This is Git's way to reference files, this syntax.

16
00:01:00,280 --> 00:01:04,140
It's saying HEAD is currently pointing at refs,

17
00:01:04,140 --> 00:01:08,350
heads, main, the file representing the main branch.

18
00:01:08,350 --> 00:01:12,820
There is only one HEAD, so there is only one current branch.

19
00:01:12,820 --> 00:01:16,470
That's what HEAD is, a reference to a branch,

20
00:01:16,470 --> 00:01:19,880
a pointer to a pointer, if you wish.

21
00:01:19,880 --> 00:01:25,140
Let's add it to the diagram and move on.

22
00:01:25,140 --> 00:01:27,940
So now, let's change the files in the project.

23
00:01:27,940 --> 00:01:31,970
I will add the list of ingredients for the apple_pie.

24
00:01:31,970 --> 00:01:36,440
Here, let me edit this recipe.

25
00:01:36,440 --> 00:01:39,250
I will just copy, paste the ingredients here.

26
00:01:39,250 --> 00:01:41,350
We don't have a full recipe yet,

27
00:01:41,350 --> 00:01:45,620
but at least we know what to buy at the grocery store now.

28
00:01:45,620 --> 00:01:53,840
Here, let me add this file to Git and commit it.

29
00:01:53,840 --> 00:01:58,840
Okay, let's see what just happened inside Git step by step.

30
00:01:58,840 --> 00:02:03,060
Git created a few new objects in the object database for this commit.

31
00:02:03,060 --> 00:02:06,840
In particular, it created the commit itself,

32
00:02:06,840 --> 00:02:10,960
and this commit has the previous commit as a parent.

33
00:02:10,960 --> 00:02:16,800
Then Git looked inside the HEAD file to find what the current branch is,

34
00:02:16,800 --> 00:02:21,840
and it moved that branch to point at the new commit.

35
00:02:21,840 --> 00:02:27,440
So the main branch moved, but notice that HEAD itself did not move.

36
00:02:27,440 --> 00:02:29,980
It was pointing at main before the commit.

37
00:02:29,980 --> 00:02:32,040
It's still pointing at main.

38
00:02:32,040 --> 00:02:33,410
Main is moving.

39
00:02:33,410 --> 00:02:36,210
HEAD is just coming along for the ride.

40
00:02:36,210 --> 00:02:39,950
So far, we didn't touch the new ideas branch.

41
00:02:39,950 --> 00:02:45,140
Ideas is still pointing at the previous commit, where it was when we created it.

42
00:02:45,140 --> 00:02:48,240
Now, let's make ideas the current branch.

43
00:02:48,240 --> 00:02:50,560
We need to switch branch.

44
00:02:50,560 --> 00:02:53,740
That's an operation called git switch.

45
00:02:53,740 --> 00:02:58,140
We say git switch and name of the branch.

46
00:02:58,140 --> 00:03:01,090
One note about this, I already mentioned it earlier,

47
00:03:01,090 --> 00:03:03,910
but this is a good time to repeat it,

48
00:03:03,910 --> 00:03:07,660
there are two common ways to move to another branch.

49
00:03:07,660 --> 00:03:12,440
One is git switch, and the other is git checkout.

50
00:03:12,440 --> 00:03:14,940
These two commands have different options,

51
00:03:14,940 --> 00:03:18,030
and they are useful in different cases; however,

52
00:03:18,030 --> 00:03:23,340
when you use them to just move to another branch without any special option,

53
00:03:23,340 --> 00:03:25,800
like we're doing here, they work the same.

54
00:03:25,800 --> 00:03:29,960
You can say git switch ideas or git checkout ideas.

55
00:03:29,960 --> 00:03:32,040
The same thing happens.

56
00:03:32,040 --> 00:03:37,510
The only important difference is that switch is a relatively recent command.

57
00:03:37,510 --> 00:03:40,330
So if you are using an old version of Git,

58
00:03:40,330 --> 00:03:44,330
then maybe you don't have a switch, and in that case,

59
00:03:44,330 --> 00:03:45,690
use checkout.

60
00:03:45,690 --> 00:03:47,040
It works the same.

61
00:03:47,040 --> 00:03:51,040
I generally use a switch here to change branch because that's

62
00:03:51,040 --> 00:03:53,440
the whole reason why switch was introduced,

63
00:03:53,440 --> 00:03:56,390
to change branches, while checkout,

64
00:03:56,390 --> 00:03:59,870
we'll see later that it can also do other things.

65
00:03:59,870 --> 00:04:05,580
So switch is more specifically for changing branches compared to checkout,

66
00:04:05,580 --> 00:04:07,640
but they both work.

67
00:04:07,640 --> 00:04:11,780
So, back to where we were, git switch ideas.

68
00:04:11,780 --> 00:04:14,840
When I do this, two things happen.

69
00:04:14,840 --> 00:04:20,740
The first thing that happens is that Git changes HEAD to point at ideas.

70
00:04:20,740 --> 00:04:25,440
There, now HEAD is pointing at refs/heads/ideas.

71
00:04:25,440 --> 00:04:29,540
The second thing that happens is more subtle.

72
00:04:29,540 --> 00:04:34,650
Git just replaced the files and folders in our working area,

73
00:04:34,650 --> 00:04:38,630
the working directory, with the files and folders in this commit.

74
00:04:38,630 --> 00:04:40,490
So after the switch,

75
00:04:40,490 --> 00:04:46,740
our working area changed to the content of the commit pointed at by ideas.

76
00:04:46,740 --> 00:04:51,930
If I look at the content of the apple_pie file here, the ingredients are gone.

77
00:04:51,930 --> 00:04:55,340
This is the previous version of the file.

78
00:04:55,340 --> 00:04:58,000
I'm sure this doesn't surprise you.

79
00:04:58,000 --> 00:05:01,840
I mean, this is what you expect when you do a switch, right?

80
00:05:01,840 --> 00:05:06,440
By the way, we will look at this process in more detail in a few minutes.

81
00:05:06,440 --> 00:05:09,000
So that's what's switch means.

82
00:05:09,000 --> 00:05:14,940
It means, move HEAD and update the working area.

83
00:05:14,940 --> 00:05:17,870
Now, let's modify the apple pie recipe again.

84
00:05:17,870 --> 00:05:22,040
I will pass in a variation on the list of ingredients,

85
00:05:22,040 --> 00:05:24,750
almost the same list as we have in the main branch,

86
00:05:24,750 --> 00:05:27,840
but the version in the ideas branch also has

87
00:05:27,840 --> 00:05:33,840
cinnamon in the pie and more apples, 10 apples instead of 8.

88
00:05:33,840 --> 00:05:39,440
Let's add these changes and commit them.

89
00:05:39,440 --> 00:05:43,740
There, tweaked apple pie recipe. Okay.

90
00:05:43,740 --> 00:05:46,920
By now, we know what happens when we do a commit,

91
00:05:46,920 --> 00:05:51,650
Git created a new commit in the object database, and it moved the

92
00:05:51,650 --> 00:05:55,770
current branch, ideas, to point at the new commit.

93
00:05:55,770 --> 00:06:01,380
HEAD didn't change, main didn't change, of course, but ideas changed.

94
00:06:01,380 --> 00:06:03,840
Now it's pointing at the new commit.

95
00:06:03,840 --> 00:06:08,950
Now, this looks a bit more like our intuitive notion of branches, but

96
00:06:08,950 --> 00:06:12,990
remember that branches are still just references to commits.

97
00:06:12,990 --> 00:06:20,000
That's all there is to branches, actually. Now, let's see what happens when we merge these branches.

