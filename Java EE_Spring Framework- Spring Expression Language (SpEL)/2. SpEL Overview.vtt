WEBVTT
1
00:00:01.926 --> 00:00:04.958
Let's have a sneak peek into SpEL.

2
00:00:04.958 --> 00:00:08.647
You might have come across many expression languages in programming.

3
00:00:08.647 --> 00:00:14.381
What they essentially do is access data that is stored in objects or beans.

4
00:00:14.381 --> 00:00:15.020
Similarly,

5
00:00:15.020 --> 00:00:18.692
Spring Expression Language enables to query and manipulate

6
00:00:18.692 --> 00:00:21.392
an object or object graphs at runtime,

7
00:00:21.392 --> 00:00:26.741
making it possible to perform dynamic bean wiring in Spring applications.

8
00:00:26.741 --> 00:00:27.566
Using SpEL,

9
00:00:27.566 --> 00:00:32.615
we can write expressions as strings and parse them so that they can get

10
00:00:32.615 --> 00:00:36.161
evaluated to whatever they are supposed to at runtime.

11
00:00:36.161 --> 00:00:40.311
The results of such evaluations can then be used to

12
00:00:40.311 --> 00:00:44.554
dynamically inject beans or values into other beans.

13
00:00:44.554 --> 00:00:46.794
Let's have a look at SpEL syntax.

14
00:00:46.794 --> 00:00:52.911
As I mentioned earlier, in SpEL we write expressions as strings.

15
00:00:52.911 --> 00:00:55.941
In the context of using SpEL in plain Java code,

16
00:00:55.941 --> 00:01:01.118
we can simply write any expression within double quotation marks.

17
00:01:01.118 --> 00:01:04.008
If we are accessing defined variables in our expression,

18
00:01:04.008 --> 00:01:08.302
we use a hash symbol in front of the variable.

19
00:01:08.302 --> 00:01:11.322
In the context of using SpEL in metadata,

20
00:01:11.322 --> 00:01:13.109
which is annotations and XML,

21
00:01:13.109 --> 00:01:17.747
we add a hash symbol and a pair of curly braces inside

22
00:01:17.747 --> 00:01:20.750
of which we write our expression.

23
00:01:20.750 --> 00:01:25.510
Here are some examples of using SpEL syntax within plain Java Code,

24
00:01:25.510 --> 00:01:28.866
meaning not in annotations or XML.

25
00:01:28.866 --> 00:01:32.002
Here's how we write a literal string expression.

26
00:01:32.002 --> 00:01:36.573
Inside double quotations, we put our string within single quotes.

27
00:01:36.573 --> 00:01:41.659
Next, we have an expression that accesses a defined variable named #greeting.

28
00:01:41.659 --> 00:01:44.948
Notice the hash symbol in front of it.

29
00:01:44.948 --> 00:01:48.147
Say our #greeting variable is a string variable.

30
00:01:48.147 --> 00:01:49.502
So in the next expression,

31
00:01:49.502 --> 00:01:53.708
I'm doing a method call by calling the length() method on it.

32
00:01:53.708 --> 00:01:56.956
Here's how we can use a simple mathematical operation

33
00:01:56.956 --> 00:02:00.502
(multiplication) in an SpEL expression.

34
00:02:00.502 --> 00:02:04.600
In the next expression, I've used a relational operator.

35
00:02:04.600 --> 00:02:05.143
And, finally,

36
00:02:05.143 --> 00:02:11.122
you can see that I've used a logical operator as well in this expression.

37
00:02:11.122 --> 00:02:14.634
Now I will show you some examples of how SpEL syntaxes

38
00:02:14.634 --> 00:02:17.669
are used in annotations and XML.

39
00:02:17.669 --> 00:02:22.730
Here are two literal expressions, one string and the other integer.

40
00:02:22.730 --> 00:02:24.994
Notice the curly braces.

41
00:02:24.994 --> 00:02:29.882
In the next example, we call the country property of a bean called User.

42
00:02:29.882 --> 00:02:34.862
Here's a very simple mathematical operation in an SpEL expression.

43
00:02:34.862 --> 00:02:38.128
SpEL can, of course, be used with plain Java code.

44
00:02:38.128 --> 00:02:38.521
However,

45
00:02:38.521 --> 00:02:42.249
it is much more likely that you will use it in your

46
00:02:42.249 --> 00:02:43.844
annotation or XML-based metadata.

47
00:02:43.844 --> 00:02:48.739
However, it is worth looking at what really happens inside.

48
00:02:48.739 --> 00:02:49.806
Inside of Spring,

49
00:02:49.806 --> 00:02:55.212
a collection of classes are used to parse and evaluate Spring expressions.

50
00:02:55.212 --> 00:03:00.712
In this code, the SpelExpressionParser class is used to create a parser object.

51
00:03:00.712 --> 00:03:05.902
The parseExpression() method of it returns an SpEL expression object.

52
00:03:05.902 --> 00:03:12.000
This object can then be used to evaluate an expression with a call to getValue() method.

