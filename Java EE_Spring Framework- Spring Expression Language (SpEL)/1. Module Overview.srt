1
00:00:00,000 --> 00:00:01,957
Hi Everyone.

2
00:00:01,957 --> 00:00:04,893
I'm Buddhini Samarakkody.

3
00:00:04,893 --> 00:00:07,477
Welcome to my course on Spring Expression Language,

4
00:00:07,477 --> 00:00:11,672
which is a powerful feature in Spring that enables developers to

5
00:00:11,672 --> 00:00:15,278
manipulate and query objects and object graphs at runtime,

6
00:00:15,278 --> 00:00:19,764
which makes it possible to perform dynamic bean wiring.

7
00:00:19,764 --> 00:00:23,134
Spring Expression Language, in short SpEL,

8
00:00:23,134 --> 00:00:25,888
is of course not a new feature in Spring.

9
00:00:25,888 --> 00:00:30,068
It has been around from Spring version 3.0 onwards.

10
00:00:30,068 --> 00:00:33,907
In this module, we will look at what SpEL is,

11
00:00:33,907 --> 00:00:40,775
why use SpEL, where to use SpEL, and how to write simple SpEL expressions.

12
00:00:40,775 --> 00:00:45,500
Here we'll focus on writing and parsing some basic SpEL expressions,

13
00:00:45,500 --> 00:00:49,167
as well as using an evaluation context.

14
00:00:49,167 --> 00:00:50,052
In this module,

15
00:00:50,052 --> 00:00:53,639
I'm going to introduce you to a simple case study of an E-Commerce

16
00:00:53,639 --> 00:00:56,912
application where we'll be looking at some interesting

17
00:00:56,912 --> 00:00:59,993
applications of SpEL features that we learn.

18
00:00:59,993 --> 00:01:01,960
By the end of this module,

19
00:01:01,960 --> 00:01:06,096
you will get to know SpEL and be able to make use of it for

20
00:01:06,096 --> 00:01:09,336
simple requirements in an application.

21
00:01:09,336 --> 00:01:12,775
Dynamic bean wiring or dependency injection at runtime.

22
00:01:12,775 --> 00:01:15,233
What does this really mean?

23
00:01:15,233 --> 00:01:17,702
Let's look at a simple requirement.

24
00:01:17,702 --> 00:01:22,073
Imagine that we want to pick a bean or assign a default value to a bean

25
00:01:22,073 --> 00:01:25,895
property at runtime based on some conditional situation.

26
00:01:25,895 --> 00:01:31,038
The conditions could be which hardware platform the application is running on,

27
00:01:31,038 --> 00:01:33,659
which operating system or application server,

28
00:01:33,659 --> 00:01:37,392
or maybe the user's locale and so on.

29
00:01:37,392 --> 00:01:40,027
For example, in our E-Commerce application,

30
00:01:40,027 --> 00:01:44,925
we need to render the order details in a locale-specific manner.

31
00:01:44,925 --> 00:01:47,613
For this, we would need to set the country,

32
00:01:47,613 --> 00:01:52,193
language, and time zone of a User bean based on their locale.

33
00:01:52,193 --> 00:01:53,874
How would you do this?

34
00:01:53,874 --> 00:01:59,323
If you are using Spring MVC, you'd think of using something like LocaleResolver.

35
00:01:59,323 --> 00:02:03,194
However, this will require you to include some additional beans,

36
00:02:03,194 --> 00:02:04,984
which means writing more code.

37
00:02:04,984 --> 00:02:08,000
And it does not involve any dynamic bean wiring,

38
00:02:08,000 --> 00:02:11,984
hence will not be the most dynamic way of doing it.

39
00:02:11,984 --> 00:02:15,188
So this is where SpEL can come in handy.

40
00:02:15,188 --> 00:02:16,036
During this course,

41
00:02:16,036 --> 00:02:20,709
I will show you how SpEL can be used to display order details to

42
00:02:20,709 --> 00:02:28,000
the user based on their locale with dynamic bean wiring and manipulating object graphs at runtime.

