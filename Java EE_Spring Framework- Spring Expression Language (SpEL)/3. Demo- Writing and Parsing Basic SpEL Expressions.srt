1
00:00:01,629 --> 00:00:04,291
To see what we've just seen in action,

2
00:00:04,291 --> 00:00:06,709
I will show you how to write and parse some basic

3
00:00:06,709 --> 00:00:10,254
SpEL expressions in plain Java code.

4
00:00:10,254 --> 00:00:16,086
For this, first we will set up a Spring Boot application on IntelliJ.

5
00:00:16,086 --> 00:00:19,793
Any other IDE such as Eclipse would work as well.

6
00:00:19,793 --> 00:00:24,090
Note that this application will be extended throughout this course to

7
00:00:24,090 --> 00:00:28,597
demonstrate SpEL usages in our E-Commerce application scenario.

8
00:00:28,597 --> 00:00:32,640
Next, we will take a look at the dependency requirements.

9
00:00:32,640 --> 00:00:36,968
Then I will show you how to write an expression parser class and

10
00:00:36,968 --> 00:00:40,439
demonstrate parsing of some basic SpEL expressions.

11
00:00:40,439 --> 00:00:45,729
Finally, run the application to see the output on the console.

12
00:00:45,729 --> 00:00:48,337
This is the Spring Boot application that was

13
00:00:48,337 --> 00:00:53,242
created using the Spring initializer, which I've opened in IntelliJ.

14
00:00:53,242 --> 00:00:57,840
We will not need any special dependencies for SpEL in a Spring Boot

15
00:00:57,840 --> 00:01:01,414
application since SpEL is a part of Spring Core technologies,

16
00:01:01,414 --> 00:01:04,312
and all of the core dependencies are added automatically to

17
00:01:04,312 --> 00:01:07,383
the final archive at the time of building.

18
00:01:07,383 --> 00:01:10,566
However, if you are not using Spring Boot,

19
00:01:10,566 --> 00:01:15,714
you'll need to have spring-core and spring-context dependencies in your pom.xml.

20
00:01:15,714 --> 00:01:17,682
As you can see,

21
00:01:17,682 --> 00:01:20,274
here we are using spring-boot-starter-web dependency because

22
00:01:20,274 --> 00:01:23,827
we are going to add some RESTFul web services to the

23
00:01:23,827 --> 00:01:27,574
application later on in this course.

24
00:01:27,574 --> 00:01:33,716
Now let's add a class called AppExpressionParser.

25
00:01:33,716 --> 00:01:38,247
In the main method, create a new SpelExpressionParser object.

26
00:01:38,247 --> 00:01:40,611
Then write a simple string expression, Hello World,

27
00:01:40,611 --> 00:01:46,052
and parse it by calling the parseExpression method of the parser object.

28
00:01:46,052 --> 00:01:49,104
Get the value of the parsed expression as a string

29
00:01:49,104 --> 00:01:55,473
and print it out to the console.

30
00:01:55,473 --> 00:01:58,871
Simply run the class, and you'll see the output like this.

31
00:01:58,871 --> 00:02:05,364
Now let's go ahead and add a few more basic expressions and see their outputs.

32
00:02:05,364 --> 00:02:14,540
A method call, a mathematical operation,

33
00:02:14,540 --> 00:02:26,000
using a relational operator, and, finally, the logical 'and' operator.

