1
00:00:01,356 --> 00:00:03,358
In this final demo of the module,

2
00:00:03,358 --> 00:00:08,809
I'm going to show you how SpEL can be used with Spring XML configuration.

3
00:00:08,809 --> 00:00:13,159
We'll consider the same E-Commerce application scenario here as well.

4
00:00:13,159 --> 00:00:17,004
You'd probably need this if you are working with an application that doesn't use

5
00:00:17,004 --> 00:00:20,904
annotation-based Spring configuration but uses XML instead.

6
00:00:20,904 --> 00:00:24,002
For this, I will create a Spring Boot project,

7
00:00:24,002 --> 00:00:27,971
this time with an XML configuration and set up the project

8
00:00:27,971 --> 00:00:29,986
with all required beans for our application,

9
00:00:29,986 --> 00:00:34,991
then wire User and Order bean properties in the XML file.

10
00:00:34,991 --> 00:00:37,497
Perform collection manipulation along with expression

11
00:00:37,497 --> 00:00:41,037
templating as well in the XML configuration file.

12
00:00:41,037 --> 00:00:46,951
You should get the same results as before when you run the application.

13
00:00:46,951 --> 00:00:50,618
I've opened up the new Spring Boot project that was created to

14
00:00:50,618 --> 00:00:54,110
demonstrate SpEL with XML here in IntelliJ.

15
00:00:54,110 --> 00:00:58,844
Note that I've added an XML Spring configuration file to it.

16
00:00:58,844 --> 00:01:04,102
I've also added all the required beans for our E-Commerce application.

17
00:01:04,102 --> 00:01:08,476
Now let's go ahead and start adding the SpEL expressions in the XML.

18
00:01:08,476 --> 00:01:11,731
I'll start off by defining the User bean and simply wiring its

19
00:01:11,731 --> 00:01:16,585
name and age properties with literal values.

20
00:01:16,585 --> 00:01:20,600
Note that I'm writing the SpEL expression in the value

21
00:01:20,600 --> 00:01:22,344
attribute to perform the wiring.

22
00:01:22,344 --> 00:01:29,014
Let's set the country and language properties with the

23
00:01:29,014 --> 00:01:33,931
systemProperties predefined variable as before.

24
00:01:33,931 --> 00:01:34,505
Next,

25
00:01:34,505 --> 00:01:40,251
I'm performing a mathematical operation in SpEL for setting

26
00:01:40,251 --> 00:01:45,478
the amount property of the Order bean.

27
00:01:45,478 --> 00:01:51,330
Now let's move ahead by wiring an expression with a relational

28
00:01:51,330 --> 00:01:55,656
operator together with the ternary operator,

29
00:01:55,656 --> 00:01:58,747
using logical 'and' operator to wire the

30
00:01:58,747 --> 00:02:03,901
daysToDeliver property of the Order bean,

31
00:02:03,901 --> 00:02:11,083
then wiring a bean property with method calls as before.

32
00:02:11,083 --> 00:02:14,690
Coming to the interesting bit, collection manipulations.

33
00:02:14,690 --> 00:02:19,406
Let's wire the shippingLocations property by accessing

34
00:02:19,406 --> 00:02:21,826
the map defined in the Shipping bean.

35
00:02:21,826 --> 00:02:24,467
Note that before doing this,

36
00:02:24,467 --> 00:02:30,332
we need to define the Shipping bean and City bean somewhere above it.

37
00:02:30,332 --> 00:02:30,592
Next,

38
00:02:30,592 --> 00:02:37,241
I'm going to do a map selection like before to set the

39
00:02:37,241 --> 00:02:40,119
westernShippingLocations adding two more expressions to wire

40
00:02:40,119 --> 00:02:46,477
two more properties of the Order bean, once again using list selection.

41
00:02:46,477 --> 00:02:49,848
Note in this expression, I'm using the escape character,

42
00:02:49,848 --> 00:02:54,914
&lt, for the less than sign since we are in XML.

43
00:02:54,914 --> 00:02:55,296
Finally,

44
00:02:55,296 --> 00:03:00,912
here you can see that I'm setting the orderSummary as before using expression

45
00:03:00,912 --> 00:03:05,584
templating by mixing literal text with evaluation blocks.

46
00:03:05,584 --> 00:03:10,979
Run this application to see the output.

47
00:03:10,979 --> 00:03:17,000
There we go. That's how we use SpEL with XML.

