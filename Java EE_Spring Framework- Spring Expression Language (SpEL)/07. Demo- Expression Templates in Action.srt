1
00:00:02,169 --> 00:00:05,085
Now let's see expression templating in action.

2
00:00:05,085 --> 00:00:07,705
I'm going to show this to you by adding a new property

3
00:00:07,705 --> 00:00:09,885
called orderSummary to our Order bean.

4
00:00:09,885 --> 00:00:15,720
Then we will use expression templating to populate it with a value at runtime.

5
00:00:15,720 --> 00:00:19,955
As usual, with a new RESTful service added to our controller,

6
00:00:19,955 --> 00:00:22,378
we can see the results.

7
00:00:22,378 --> 00:00:30,517
Go back to the Order bean and add a string property named orderSummary.

8
00:00:30,517 --> 00:00:33,729
Let's say we want to display a summary of the order to the user

9
00:00:33,729 --> 00:00:36,101
with a few important pieces of information,

10
00:00:36,101 --> 00:00:41,703
like the user name, the order amount, and the discount.

11
00:00:41,703 --> 00:00:45,484
So I'm going to write an expression using expression templating by mixing

12
00:00:45,484 --> 00:00:52,055
literal text with evaluation blocks to access name,

13
00:00:52,055 --> 00:01:03,528
amount, and discount properties from the User and Order beans like this.

14
00:01:03,528 --> 00:01:09,782
Simply run it, and you can see the summary like this as the output.

15
00:01:09,782 --> 00:01:21,000
Notice how the literal text is mixed with expression evaluation results. So that's how you use expression templating in SpEL.

