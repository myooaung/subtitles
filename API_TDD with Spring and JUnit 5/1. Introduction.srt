1
00:00:00,000 --> 00:00:00,442
In this module,

2
00:00:00,442 --> 00:00:02,988
we're going to build a set of integration tests for the three

3
00:00:02,988 --> 00:00:05,629
projects that we built in the previous modules.

4
00:00:05,629 --> 00:00:08,029
We'll begin by looking at the integration testing strategy that

5
00:00:08,029 --> 00:00:10,225
we'll use for all of our integration tests,

6
00:00:10,225 --> 00:00:14,120
and then we'll review how to build integration tests for the product service,

7
00:00:14,120 --> 00:00:17,563
the review service, and finally, the inventory service.

8
00:00:17,563 --> 00:00:19,856
Before we start building integration tests,

9
00:00:19,856 --> 00:00:23,879
let's define integration testing and look at why we might want to use it.

10
00:00:23,879 --> 00:00:28,092
Martin Fowler described integration testing as follows: Integration tests

11
00:00:28,092 --> 00:00:32,579
determine if independently developed units of software work correctly

12
00:00:32,579 --> 00:00:34,998
together when they're connected to each other.

13
00:00:34,998 --> 00:00:35,377
Thus far,

14
00:00:35,377 --> 00:00:37,790
we have written unit tests to validate that our controller

15
00:00:37,790 --> 00:00:39,839
works properly against a mock service,

16
00:00:39,839 --> 00:00:43,889
that our service works properly against a mock repository,

17
00:00:43,889 --> 00:00:46,719
and that our repository accurately persists data to

18
00:00:46,719 --> 00:00:48,660
and from a back-end database.

19
00:00:48,660 --> 00:00:51,497
But how can we be confident that when we put them all together,

20
00:00:51,497 --> 00:00:54,151
that the collective unit will work properly?

21
00:00:54,151 --> 00:00:56,556
The answer is that we need to build a set of integration

22
00:00:56,556 --> 00:00:58,900
tests that exercise each service end to end.

23
00:00:58,900 --> 00:01:02,940
We want to test that a request to a controller resolves to the correct

24
00:01:02,940 --> 00:01:07,127
call to a service that resolves to the correct call to a repository

25
00:01:07,127 --> 00:01:09,218
that accurately interacts with the database.

26
00:01:09,218 --> 00:01:12,185
Integration testing helps us in two ways: First,

27
00:01:12,185 --> 00:01:16,136
it allows us to validate that our application configuration is correct,

28
00:01:16,136 --> 00:01:19,125
that the right database connection is wired into the repository,

29
00:01:19,125 --> 00:01:22,728
that the right repository is wired into the service,

30
00:01:22,728 --> 00:01:25,786
and the right service is wired into the controller.

31
00:01:25,786 --> 00:01:28,913
And then, once the application is correctly wired together,

32
00:01:28,913 --> 00:01:33,732
it allows us to exercise the complete functionality end to end.

33
00:01:33,732 --> 00:01:35,527
There are many ways to write integration tests,

34
00:01:35,527 --> 00:01:39,667
including setting up and connecting to a full production-like environment,

35
00:01:39,667 --> 00:01:40,659
or more recently,

36
00:01:40,659 --> 00:01:44,242
leveraging Docker to set us a production-like environment locally,

37
00:01:44,242 --> 00:01:47,163
and then executing HTTP requests against that environment,

38
00:01:47,163 --> 00:01:50,625
but a simpler approach that obtains our objective of testing a

39
00:01:50,625 --> 00:01:55,387
Spring application end to end with JUnit is to load the full Spring

40
00:01:55,387 --> 00:01:58,208
application context and test using MockMvc.

41
00:01:58,208 --> 00:02:02,132
MockMvc allows us to execute HTTP requests against our

42
00:02:02,132 --> 00:02:03,970
controllers and validate the responses.

43
00:02:03,970 --> 00:02:06,928
And loading the full Spring application context without mocks

44
00:02:06,928 --> 00:02:10,254
creates and wires the full application together.

45
00:02:10,254 --> 00:02:13,168
The only thing that we'll be doing differently from a full production-like

46
00:02:13,168 --> 00:02:16,753
environment test is to leverage the techniques we reviewed in the previous

47
00:02:16,753 --> 00:02:19,484
modules to manage the back-end resources.

48
00:02:19,484 --> 00:02:23,906
Specifically, we'll use DbUnit to pre-populate our back-end SQL database,

49
00:02:23,906 --> 00:02:27,432
we'll use our Spring Mongo extension and the Spring

50
00:02:27,432 --> 00:02:29,885
MongoTemplate to pre-populate our MongoDB instance,

51
00:02:29,885 --> 00:02:33,521
and we'll use WireMock to stub our third-party API.

52
00:02:33,521 --> 00:02:38,000
In the next section, we'll begin by writing integration tests for the product service.

