1
00:00:00,000 --> 00:00:01,730
Let's review what we've learned.

2
00:00:01,730 --> 00:00:04,911
The inventory web service is a Spring Boot microservice that

3
00:00:04,911 --> 00:00:09,175
retrieves and updates product inventory information by connecting to

4
00:00:09,175 --> 00:00:11,291
a third party through a RESTful interface.

5
00:00:11,291 --> 00:00:12,943
To facilitate this connection,

6
00:00:12,943 --> 00:00:17,371
the inventory service uses Spring's RestTemplate to make HTTP calls and

7
00:00:17,371 --> 00:00:20,383
translate requests and response bodies to Java objects.

8
00:00:20,383 --> 00:00:24,228
We reviewed how to test our controller using MockMvc,

9
00:00:24,228 --> 00:00:27,140
which followed the same pattern as in the previous two modules.

10
00:00:27,140 --> 00:00:30,000
Our service test is where things got interesting in this module.

11
00:00:30,000 --> 00:00:32,604
The inventory service retrieves and updates product

12
00:00:32,604 --> 00:00:34,970
information by connecting to a third-party API,

13
00:00:34,970 --> 00:00:38,412
so we learned how to use WireMock to control the responses

14
00:00:38,412 --> 00:00:41,619
that are returned for various HTTP requests.

15
00:00:41,619 --> 00:00:43,563
And then, through a test.properties file,

16
00:00:43,563 --> 00:00:46,688
we configured the inventory service to connect to WireMock.

17
00:00:46,688 --> 00:00:49,779
We reviewed how to configure requests and responses manually in code,

18
00:00:49,779 --> 00:00:53,168
and we looked at WireMock's support for mapping files to

19
00:00:53,168 --> 00:00:56,727
externalize requests and responses using JSON files.

20
00:00:56,727 --> 00:00:57,439
At this point,

21
00:00:57,439 --> 00:01:05,000
you should feel confident writing unit tests against components that connect to a third-party API using WireMock.

