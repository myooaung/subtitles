WEBVTT
1
00:00:00.000 --> 00:00:01.716
Let's review what we've learned.

2
00:00:01.716 --> 00:00:06.301
Our integration testing strategy uses MockMvc to send requests to our

3
00:00:06.301 --> 00:00:10.335
web service and various techniques to return a set of known responses

4
00:00:10.335 --> 00:00:12.106
from the service's back-end resource.

5
00:00:12.106 --> 00:00:15.953
In the case of the product service, which uses a SQL database back end,

6
00:00:15.953 --> 00:00:19.312
we leverage DbUnit to pre-populate an H2 database before tests

7
00:00:19.312 --> 00:00:22.175
run and clean it up after the tests complete.

8
00:00:22.175 --> 00:00:25.749
In the case of the review service, which uses MongoDB as its back end,

9
00:00:25.749 --> 00:00:30.237
we leverage the MongoSpringExtension that we build previously to pre-populate

10
00:00:30.237 --> 00:00:33.247
MongoDB before tests run and clean it up after tests complete.

11
00:00:33.247 --> 00:00:35.440
Finally, in the case of the review service,

12
00:00:35.440 --> 00:00:37.628
which makes calls to a third-party API,

13
00:00:37.628 --> 00:00:41.418
we leverage WireMock to return expected responses for the

14
00:00:41.418 --> 00:00:44.118
various API calls from our service to simulate the

15
00:00:44.118 --> 00:00:46.232
scenarios that we wanted to test.

16
00:00:46.232 --> 00:00:46.961
At this point,

17
00:00:46.961 --> 00:00:50.464
you should feel confident writing integration tests using JUnit and

18
00:00:50.464 --> 00:00:58.000
understand how to perform integration tests with a SQL back end, a MongoDB back end, and against a third-party API.

