1
00:00:01,509 --> 00:00:04,094
And now we need to do the same for the rest of the columns,

2
00:00:04,094 --> 00:00:08,308
so let us use this pattern to generate a forEach loop.

3
00:00:08,308 --> 00:00:11,693
We need to iterate over the metamodel.getColumns,

4
00:00:11,693 --> 00:00:16,205
and the object returned is the ColumnField,

5
00:00:16,205 --> 00:00:19,574
and we are going to call it ColumnField.

6
00:00:19,574 --> 00:00:20,899
This is fine.

7
00:00:20,899 --> 00:00:24,249
From this ColumnField, we can get the field directly.

8
00:00:24,249 --> 00:00:27,209
This is how we created our metamodel.

9
00:00:27,209 --> 00:00:30,337
This is the corresponding field of our object.

10
00:00:30,337 --> 00:00:33,888
We need the type, so the columnField.getType.

11
00:00:33,888 --> 00:00:36,896
This is the type, and we are going to call it columnType.

12
00:00:36,896 --> 00:00:44,090
And we also need the name, columnField.getName, and this is the columnName.

13
00:00:44,090 --> 00:00:46,883
Now here, we have two types of column,

14
00:00:46,883 --> 00:00:50,214
integer for the age and string for the name.

15
00:00:50,214 --> 00:00:55,560
So if the columnType is equal to int, then we are going to do something,

16
00:00:55,560 --> 00:01:00,240
and if it is equal to String, then we are going to do something else.

17
00:01:00,240 --> 00:01:06,897
I think that in both cases, we are going to need to set this field as accessible.

18
00:01:06,897 --> 00:01:08,991
So let me put this code here.

19
00:01:08,991 --> 00:01:09,281
Here,

20
00:01:09,281 --> 00:01:13,072
the value of the field would be the resultSet.getInt and

21
00:01:13,072 --> 00:01:16,793
pass the columnName as a parameter.

22
00:01:16,793 --> 00:01:19,989
And in that case, it's going to be a String,

23
00:01:19,989 --> 00:01:23,581
resultSet.getString of the columnName.

24
00:01:23,581 --> 00:01:26,641
And in both cases, we are going to call field.set,

25
00:01:26,641 --> 00:01:32,444
pass the object t as a parameter, and the value we just checked.

26
00:01:32,444 --> 00:01:35,172
Now let me copy/paste this code here again.

27
00:01:35,172 --> 00:01:40,162
So here, we are just handling two types of columnType, int and String.

28
00:01:40,162 --> 00:01:44,789
If you have more types, of course, you will need to add some more code here.

29
00:01:44,789 --> 00:01:48,964
And once this is done, we can return the object t,

30
00:01:48,964 --> 00:01:51,956
which has been created as expected.

31
00:01:51,956 --> 00:01:57,303
So, of course, this is not compiling properly because of the missing exception.

32
00:01:57,303 --> 00:02:02,307
So let me add them in a declaration; the SQLException that we need

33
00:02:02,307 --> 00:02:08,660
to add in the EntityManager there; and the buildInstance is going to

34
00:02:08,660 --> 00:02:12,976
add a nice collection of exceptions, Instantiation,

35
00:02:12,976 --> 00:02:16,609
IllegalAccess, IllegalArgument, InvocationTarget,

36
00:02:16,609 --> 00:02:19,552
NoSuchMethod, and Security.

37
00:02:19,552 --> 00:02:25,555
Let me just copy/paste this exception's declaration and paste it to

38
00:02:25,555 --> 00:02:29,189
the interface just for the compiler to be happy.

39
00:02:29,189 --> 00:02:31,700
So now, if we check the reading object here,

40
00:02:31,700 --> 00:02:36,557
we should be able to read our object back from the base automatically.

41
00:02:36,557 --> 00:02:41,464
I'm just going to copy/paste this code to display the people we have read,

42
00:02:41,464 --> 00:02:47,680
go back to the H2 console, check that we indeed have the people in the base,

43
00:02:47,680 --> 00:02:49,086
disconnect, run this code.

44
00:02:49,086 --> 00:02:59,000
We were able to read back the objects from our database showing that our code is working properly.

