1
00:00:02,052 --> 00:00:06,411
Second pattern, how to create a method handle on a method.

2
00:00:06,411 --> 00:00:11,587
This pattern is a little more complex than getting a reference on a class,

3
00:00:11,587 --> 00:00:13,284
which was very simple.

4
00:00:13,284 --> 00:00:14,851
So let us see it.

5
00:00:14,851 --> 00:00:17,342
How to get a handle on the method.

6
00:00:17,342 --> 00:00:20,127
Well, it is, in fact, a two-step process.

7
00:00:20,127 --> 00:00:25,577
The first step is to get a method type object that will

8
00:00:25,577 --> 00:00:28,957
just model the type of this method.

9
00:00:28,957 --> 00:00:33,530
It carries information on the type returned by this method and

10
00:00:33,530 --> 00:00:37,683
the types of the parameters this method takes.

11
00:00:37,683 --> 00:00:39,970
And then with this method type,

12
00:00:39,970 --> 00:00:43,950
we can call the Write method on the lookup object,

13
00:00:43,950 --> 00:00:49,296
passing this type as a parameter to get a reference on the method we needed.

14
00:00:49,296 --> 00:00:52,598
And we are going to see what methods are available

15
00:00:52,598 --> 00:00:55,493
on this lookup object to do that.

16
00:00:55,493 --> 00:00:59,499
We also have a bridge from the method class from the

17
00:00:59,499 --> 00:01:03,416
classical Java Reflection API to the MethodHandle API when

18
00:01:03,416 --> 00:01:06,196
what we have is a method object.

19
00:01:06,196 --> 00:01:08,933
So suppose we have our lookup object.

20
00:01:08,933 --> 00:01:14,549
The first object we need to create is this method type object.

21
00:01:14,549 --> 00:01:17,531
We have a factory method for that on the MethodType

22
00:01:17,531 --> 00:01:21,712
class that may take several arguments.

23
00:01:21,712 --> 00:01:26,068
The first argument is the type returned by that method.

24
00:01:26,068 --> 00:01:27,841
On this simple example,

25
00:01:27,841 --> 00:01:33,589
which is a plain getter that returns a string and does not take any parameters,

26
00:01:33,589 --> 00:01:37,960
the MethodType just takes the string.class as a parameter.

27
00:01:37,960 --> 00:01:40,071
Now if we consider the setter,

28
00:01:40,071 --> 00:01:45,438
the setter returns void and takes a string as a parameter.

29
00:01:45,438 --> 00:01:49,167
So the first argument passed to this method type

30
00:01:49,167 --> 00:01:53,706
method call is the void.class object,

31
00:01:53,706 --> 00:01:57,099
meaning that the setName method returns void,

32
00:01:57,099 --> 00:02:00,049
and the string.class object,

33
00:02:00,049 --> 00:02:06,106
meaning that this method takes only one parameter of type string.

34
00:02:06,106 --> 00:02:08,539
You just need to be careful because in the JDK,

35
00:02:08,539 --> 00:02:12,069
there are, in fact, two ways of writing void.class.

36
00:02:12,069 --> 00:02:18,510
The first one is this one, and there is a second one with a capital V,

37
00:02:18,510 --> 00:02:22,565
and you do not want to use the one with the capital V.

38
00:02:22,565 --> 00:02:26,601
If you do so, the rest of the code will not work.

39
00:02:26,601 --> 00:02:30,988
You can also create a MethodType for constructors.

40
00:02:30,988 --> 00:02:34,148
The convention is that a constructor returns void.

41
00:02:34,148 --> 00:02:38,135
So if we have a constructor of person that takes a

42
00:02:38,135 --> 00:02:41,572
string and an int as a parameter,

43
00:02:41,572 --> 00:02:47,427
the corresponding MethodType as void.class as the first argument,

44
00:02:47,427 --> 00:02:51,539
string.class and int.class for the two other arguments.

45
00:02:51,539 --> 00:02:53,764
For the empty constructor type,

46
00:02:53,764 --> 00:02:59,458
the method type is built just on the void.class parameter.

47
00:02:59,458 --> 00:03:10,000
Those are the four main patterns to create method types for methods and for constructors.

