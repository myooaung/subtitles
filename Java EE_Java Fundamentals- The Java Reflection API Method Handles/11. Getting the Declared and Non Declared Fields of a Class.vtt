WEBVTT
1
00:00:01.755 --> 00:00:05.406
The second type of information we can get from a Class object

2
00:00:05.406 --> 00:00:08.422
is about the content of a class itself.

3
00:00:08.422 --> 00:00:08.790
First,

4
00:00:08.790 --> 00:00:14.923
we are going to see how to get the fields of a class from this Class object.

5
00:00:14.923 --> 00:00:19.276
In fact, there are many methods in the class named Class,

6
00:00:19.276 --> 00:00:23.180
methods to get references on the fields,

7
00:00:23.180 --> 00:00:27.545
to get references on the methods, on constructors,

8
00:00:27.545 --> 00:00:29.694
and many more information.

9
00:00:29.694 --> 00:00:32.073
We are not going to cover everything.

10
00:00:32.073 --> 00:00:37.049
And first of all, we are going to see how to get the fields from a class.

11
00:00:37.049 --> 00:00:41.604
Suppose we have a reference on a Person.class object.

12
00:00:41.604 --> 00:00:46.720
There are three methods to get the fields of this Person.class object.

13
00:00:46.720 --> 00:00:50.342
The first one takes the name of the field,

14
00:00:50.342 --> 00:00:56.932
so clss.getField takes a string of characters that is the name of the field,

15
00:00:56.932 --> 00:01:02.444
here, the age field, probably an int field.

16
00:01:02.444 --> 00:01:04.146
It is a nice method,

17
00:01:04.146 --> 00:01:10.706
but we need to know the Person class and how it is organized internally.

18
00:01:10.706 --> 00:01:14.919
We need to know the name of its fields to use this method.

19
00:01:14.919 --> 00:01:17.312
Suppose it is not the case.

20
00:01:17.312 --> 00:01:23.438
Suppose we have loaded this class dynamically, and we do not even know its name.

21
00:01:23.438 --> 00:01:28.984
We also have a getDeclaredFields method that returns an

22
00:01:28.984 --> 00:01:32.167
array of some of the fields of this class,

23
00:01:32.167 --> 00:01:35.617
and we will see the details in an a minute.

24
00:01:35.617 --> 00:01:42.165
And we have a second method, getFields, that also returns an array of fields.

25
00:01:42.165 --> 00:01:48.942
What is the difference between the declared fields and the fields from a class?

26
00:01:48.942 --> 00:01:53.102
The declared fields are the fields declared within

27
00:01:53.102 --> 00:01:57.484
that class whether they are private, protected,

28
00:01:57.484 --> 00:02:00.231
package protected, or public.

29
00:02:00.231 --> 00:02:04.094
The fields of a class are only the public fields,

30
00:02:04.094 --> 00:02:10.639
including all the fields from the super classes of this Person class.

31
00:02:10.639 --> 00:02:13.002
Let us see an example.

32
00:02:13.002 --> 00:02:17.035
We have a class Person that does not declare any extensions,

33
00:02:17.035 --> 00:02:22.184
so this Person class extends objects by default.

34
00:02:22.184 --> 00:02:28.875
It has two private fields, age of type int and name of type String.

35
00:02:28.875 --> 00:02:32.688
If we call clss.getFields on this Class object,

36
00:02:32.688 --> 00:02:36.308
then what we get is an empty array.

37
00:02:36.308 --> 00:02:36.783
Why?

38
00:02:36.783 --> 00:02:40.821
Because getFields only returns the public fields of a class,

39
00:02:40.821 --> 00:02:44.191
and the Person class doesn't have any.

40
00:02:44.191 --> 00:02:49.872
It also returns the public field of all the super classes of the Person class,

41
00:02:49.872 --> 00:02:55.940
but Person class extends object that do not declare any public field.

42
00:02:55.940 --> 00:03:01.305
So this clss.getFields method call returns an empty array.

43
00:03:01.305 --> 00:03:09.039
Now if we call getDeclaredFields, what we get is an array with two fields in it,

44
00:03:09.039 --> 00:03:12.335
the age field and the name field.

45
00:03:12.335 --> 00:03:12.968
Why?

46
00:03:12.968 --> 00:03:16.884
Because the declared fields are the fields within the

47
00:03:16.884 --> 00:03:21.737
Person class whether they are private, package protected,

48
00:03:21.737 --> 00:03:24.027
protected, or public.

49
00:03:24.027 --> 00:03:26.458
So just to recap this.

50
00:03:26.458 --> 00:03:31.392
The non-declared elements of a class are the elements declared

51
00:03:31.392 --> 00:03:35.290
in that class and all the super classes,

52
00:03:35.290 --> 00:03:38.182
but only the public ones.

53
00:03:38.182 --> 00:03:42.160
And we have declared fields and also declared methods as

54
00:03:42.160 --> 00:03:45.204
we are going to see it in a minute.

55
00:03:45.204 --> 00:03:48.966
The declared elements of a class, on the contrary,

56
00:03:48.966 --> 00:03:54.778
are the elements declared within that class whether they are private,

57
00:03:54.778 --> 00:03:59.185
protected, or package protected, or public,

58
00:03:59.185 --> 00:04:13.000
and they are also declared methods, as well as declared fields. There are no inherited elements within the declared elements of a class.

