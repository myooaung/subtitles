1
00:00:01,539 --> 00:00:05,953
Now I told you that EntityManagerImpl was not a great name,

2
00:00:05,953 --> 00:00:08,206
and indeed it's not a great name.

3
00:00:08,206 --> 00:00:12,423
What we can see here is that we have a portion of the code,

4
00:00:12,423 --> 00:00:15,770
which is really completely general,

5
00:00:15,770 --> 00:00:20,451
which does not depend on anything more than the JDBC and the type t,

6
00:00:20,451 --> 00:00:23,144
which is, in fact, a parameter of the class.

7
00:00:23,144 --> 00:00:25,871
And we have a little portion of the code,

8
00:00:25,871 --> 00:00:28,333
which is this one, the prepareStatementWith,

9
00:00:28,333 --> 00:00:33,328
which creates a specific connection to this H2 database.

10
00:00:33,328 --> 00:00:39,003
So let me put this in a method called buildConnection.

11
00:00:39,003 --> 00:00:39,513
OK.

12
00:00:39,513 --> 00:00:41,554
This buildConnection is there.

13
00:00:41,554 --> 00:00:45,000
We are going to make this method public because,

14
00:00:45,000 --> 00:00:50,207
in fact, this buildConnection is something that is specific to the H2 database.

15
00:00:50,207 --> 00:00:53,713
So the right way to handle this is, in fact,

16
00:00:53,713 --> 00:00:59,036
to create an H2 EntityManager stating that the H2

17
00:00:59,036 --> 00:01:03,806
EntityManager extends the EntityManagerImpl and move this

18
00:01:03,806 --> 00:01:08,680
method from here to this H2 EntityManager there.

19
00:01:08,680 --> 00:01:13,582
And by doing that, this EntityManagerImpl in fact,

20
00:01:13,582 --> 00:01:18,777
becomes an abstract class because this method can be made abstract.

21
00:01:18,777 --> 00:01:20,562
It still throws a SQLException,

22
00:01:20,562 --> 00:01:24,851
but then we do not need this implementation anymore,

23
00:01:24,851 --> 00:01:28,793
and now this class may be made abstract.

24
00:01:28,793 --> 00:01:32,015
So we do not need to call it EntityManagerImpl anymore,

25
00:01:32,015 --> 00:01:36,216
we can call it just AbstractEntityManager,

26
00:01:36,216 --> 00:01:38,048
and here,

27
00:01:38,048 --> 00:01:43,306
fix the code by telling that we are going to return this H2 EntityManager.

28
00:01:43,306 --> 00:01:48,907
So we created a dependency between the EntityManager and the database itself.

29
00:01:48,907 --> 00:01:52,852
If you need to connect this EntityManager to a MySQL database,

30
00:01:52,852 --> 00:01:53,697
for instance,

31
00:01:53,697 --> 00:01:57,235
all you have to do is create a MySQL EntityManager

32
00:01:57,235 --> 00:02:00,864
providing the right JDBC connection, which is just,

33
00:02:00,864 --> 00:02:04,579
in fact, one line of code specific to MySQL,

34
00:02:04,579 --> 00:02:08,502
and the system will continue to work against MySQL

35
00:02:08,502 --> 00:02:12,438
instead of using the H2 database.

36
00:02:12,438 --> 00:02:14,377
This is a very powerful mechanism,

37
00:02:14,377 --> 00:02:16,897
but it is not that great because we are using

38
00:02:16,897 --> 00:02:19,145
inheritance instead of composition.

39
00:02:19,145 --> 00:02:20,653
In the next module of this course,

40
00:02:20,653 --> 00:02:24,118
we are going to see dependency injection and replace this

41
00:02:24,118 --> 00:02:26,904
system with a dependency injection mechanism,

42
00:02:26,904 --> 00:02:29,574
which is much better because this time,

43
00:02:29,574 --> 00:02:39,000
we will not have any inheritance anymore and a much better separation of concerns.

