1
00:00:01,753 --> 00:00:06,307
Now what is going to happen if we want to create a MethodHandle

2
00:00:06,307 --> 00:00:11,383
directly on the field name of this Person class?

3
00:00:11,383 --> 00:00:13,906
Since the field is private, it should not work,

4
00:00:13,906 --> 00:00:17,690
and we are going to see the exception we are going to get.

5
00:00:17,690 --> 00:00:21,290
So the pattern is lookup findGetter,

6
00:00:21,290 --> 00:00:25,538
and remember that this findGetter method name is a little confusing because

7
00:00:25,538 --> 00:00:29,297
you may think that it returns a MethodHandle on the method,

8
00:00:29,297 --> 00:00:30,586
and it's not the case.

9
00:00:30,586 --> 00:00:33,932
It returns a MethodHandle directly on the field.

10
00:00:33,932 --> 00:00:36,667
This field is defined on the Person class.

11
00:00:36,667 --> 00:00:42,278
The name of the field is name, and the type of the field is String.class.

12
00:00:42,278 --> 00:00:46,289
This is a MethodHandle, and I'm going to call it nameReader.

13
00:00:46,289 --> 00:00:55,661
Now if I invoke nameReader on p2 expecting to get Linda as the return object,

14
00:00:55,661 --> 00:01:00,393
so String name2 =, and I need to cast this to a string,

15
00:01:00,393 --> 00:01:04,890
let me print out name2, you see that I've got an exception,

16
00:01:04,890 --> 00:01:09,079
and this exception tells us that the member is private,

17
00:01:09,079 --> 00:01:12,494
Person.name, and that we cannot read it using this reader.

18
00:01:12,494 --> 00:01:17,478
MethodHandle does not give you access to the private members of a class.

19
00:01:17,478 --> 00:01:20,837
It only gives you access to the public members of the class.

20
00:01:20,837 --> 00:01:23,695
If you want to access the private members of a class,

21
00:01:23,695 --> 00:01:25,946
you need another lookup object here.

22
00:01:25,946 --> 00:01:30,352
We are going to create it using the pattern MethodHandles.privateLookupIn

23
00:01:30,352 --> 00:01:36,225
Person class and pass the lookup object we already have.

24
00:01:36,225 --> 00:01:41,044
This is going to give us a private lookup object.

25
00:01:41,044 --> 00:01:43,318
Let me get rid of this In.

26
00:01:43,318 --> 00:01:48,182
Invoke now this findGetter method using this privateLookup object.

27
00:01:48,182 --> 00:01:49,482
And if I run this code,

28
00:01:49,482 --> 00:01:52,742
you will see that indeed the nameReader is now able to

29
00:01:52,742 --> 00:01:55,381
read the private fields of my class.

30
00:01:55,381 --> 00:01:56,965
We can do a little checking.

31
00:01:56,965 --> 00:02:00,925
We are going to add in this getName method here a message

32
00:02:00,925 --> 00:02:04,426
just to check when is this method call.

33
00:02:04,426 --> 00:02:06,814
Here, Get name invoked.

34
00:02:06,814 --> 00:02:10,272
Let us just add this simple message and run this code again,

35
00:02:10,272 --> 00:02:15,026
and you can see that indeed when I am invoking the getName method,

36
00:02:15,026 --> 00:02:16,618
the message is displayed.

37
00:02:16,618 --> 00:02:19,163
But through this nameReader object,

38
00:02:19,163 --> 00:02:23,616
which is a MethodHandle on the field and not on the method,

39
00:02:23,616 --> 00:02:26,158
then the method is not invoked.

40
00:02:26,158 --> 00:02:30,174
It is really the direct read of the field that is done.

41
00:02:30,174 --> 00:02:34,707
So here are the basic pattern of this MethodHandle API.

42
00:02:34,707 --> 00:02:37,874
There's just one thing that may be confusing in this API,

43
00:02:37,874 --> 00:02:41,056
every access you can get on any class element,

44
00:02:41,056 --> 00:02:44,500
whether it is a field, a method, or constructor,

45
00:02:44,500 --> 00:02:48,000
are done through this MethodHandle object.

46
00:02:48,000 --> 00:02:50,500
Everything you get is a MethodHandle,

47
00:02:50,500 --> 00:02:53,556
and you do not have any difference between a field,

48
00:02:53,556 --> 00:02:55,500
a method, or whatever from a class.

49
00:02:55,500 --> 00:02:56,389
This may be confusing,

50
00:02:56,389 --> 00:03:00,917
so you need to be really extra careful when you manipulate this kind of

51
00:03:00,917 --> 00:03:12,000
object because the type of the object you manipulate does not tell you what kind of element from a class you are really handling.

