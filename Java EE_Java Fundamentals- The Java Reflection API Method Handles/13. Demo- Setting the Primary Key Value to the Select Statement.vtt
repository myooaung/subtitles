WEBVTT
1
00:00:01.843 --> 00:00:04.793
Now that we have our select request,

2
00:00:04.793 --> 00:00:12.117
we already have this prepareStatementWith passing this sql query as a parameter.

3
00:00:12.117 --> 00:00:16.789
We need to implement this and the PrimaryKey method here.

4
00:00:16.789 --> 00:00:22.717
So let me create this method in the PreparedStatement wrapper class.

5
00:00:22.717 --> 00:00:26.083
It takes the PrimaryKey as an object, and basically,

6
00:00:26.083 --> 00:00:31.116
what we want to do is call the setLong method on this

7
00:00:31.116 --> 00:00:34.988
statement object with the PrimaryKey as an object.

8
00:00:34.988 --> 00:00:43.852
So this is going to work if the primaryKey.getClass is equal to long.class.

9
00:00:43.852 --> 00:00:49.166
Here, I just wrote primaryKey.getClass == long.class,

10
00:00:49.166 --> 00:00:54.257
meaning that the class should be the primitive type

11
00:00:54.257 --> 00:00:57.713
long.class because it's written in lowercase.

12
00:00:57.713 --> 00:01:00.328
But the problem is that this andPrimaryKey method

13
00:01:00.328 --> 00:01:03.407
takes an Object as a parameter.

14
00:01:03.407 --> 00:01:06.194
So if the primaryKey is a primitive type,

15
00:01:06.194 --> 00:01:10.136
it has been wrapped in one of the wrapper type Long

16
00:01:10.136 --> 00:01:13.968
with a capital L integer and the like.

17
00:01:13.968 --> 00:01:16.940
So instead of checking for the long primitive type,

18
00:01:16.940 --> 00:01:23.307
we need to check for the Long wrapper class because of this autoboxing feature.

19
00:01:23.307 --> 00:01:26.009
And if the primaryKey is a long,

20
00:01:26.009 --> 00:01:30.927
then I need to set the value of the primaryKey using the

21
00:01:30.927 --> 00:01:33.448
setLong method from the PreparedStatement,

22
00:01:33.448 --> 00:01:38.071
it is still the first and only parameter of this SQL string,

23
00:01:38.071 --> 00:01:44.595
and then pass the primaryKey as a parameter that we need to cast as a Long.

24
00:01:44.595 --> 00:01:49.104
This is going to throw exceptions, so let us declare that.

25
00:01:49.104 --> 00:01:52.533
And here, we are going to return the statement.

26
00:01:52.533 --> 00:01:57.719
Of course, if you want to handle all the different types of your primary keys,

27
00:01:57.719 --> 00:02:01.452
you need to add other branches in this if.

28
00:02:01.452 --> 00:02:05.862
So now we have implemented the preparation of the statement.

29
00:02:05.862 --> 00:02:18.000
What we want to do is to create the instance from the resultSet we get once this statement has been executed against a database.

