WEBVTT
1
00:00:01.906 --> 00:00:03.704
Let us see those patterns.

2
00:00:03.704 --> 00:00:06.657
Suppose we have an object of type String,

3
00:00:06.657 --> 00:00:12.841
which is just the hello string, we can get a reference on the String class,

4
00:00:12.841 --> 00:00:17.352
which is the class this error object is an instance of,

5
00:00:17.352 --> 00:00:22.308
by calling the getClass method on that hello object.

6
00:00:22.308 --> 00:00:27.011
In fact, the getClass method is defined on the object class,

7
00:00:27.011 --> 00:00:33.796
so it is always possible to call this method on any object of your application.

8
00:00:33.796 --> 00:00:37.387
It is worth noticing that if you call the getClass

9
00:00:37.387 --> 00:00:44.400
method on another string object, what you get is a reference on this same object.

10
00:00:44.400 --> 00:00:47.457
On this example, if I compare the two instances,

11
00:00:47.457 --> 00:00:54.618
Hello class and World class, using ==, it will return true.

12
00:00:54.618 --> 00:00:57.727
Hello class and World class are, in fact,

13
00:00:57.727 --> 00:01:01.238
two references on the same class object,

14
00:01:01.238 --> 00:01:05.866
and this is something which is true for all the classes in an application.

15
00:01:05.866 --> 00:01:12.194
A Java application only loads a class once so you have only one

16
00:01:12.194 --> 00:01:15.606
instance of a given class at a given time.

17
00:01:15.606 --> 00:01:21.901
If you check the exact signature of the getClass method from the Object class,

18
00:01:21.901 --> 00:01:27.871
you will see that it returns, in fact, a class of question mark type,

19
00:01:27.871 --> 00:01:33.446
and this is worth pointing out because it may lead to very

20
00:01:33.446 --> 00:01:38.085
confusing compile errors when you are trying to write code

21
00:01:38.085 --> 00:01:40.418
that is using this getClass method.

22
00:01:40.418 --> 00:01:45.906
If you just call it on the string of character and put the

23
00:01:45.906 --> 00:01:49.380
result in a type Class of question mark,

24
00:01:49.380 --> 00:01:49.817
well,

25
00:01:49.817 --> 00:01:53.805
it is just working just because the type is the

26
00:01:53.805 --> 00:01:57.157
same as the getClass return type.

27
00:01:57.157 --> 00:02:01.215
But if you try to put the results in a Class of String,

28
00:02:01.215 --> 00:02:08.307
which may look natural, then you will get this odd compiler error.

29
00:02:08.307 --> 00:02:09.254
In fact,

30
00:02:09.254 --> 00:02:12.852
Hello .getClass if follows a String of character cannot be

31
00:02:12.852 --> 00:02:17.703
put in a variable of type Class of String,

32
00:02:17.703 --> 00:02:23.415
and it cannot be put in a variable of type Class of Object neither,

33
00:02:23.415 --> 00:02:27.121
which may look even more confusing.

34
00:02:27.121 --> 00:02:33.185
The reason of that lies in the way generics are working in Java.

35
00:02:33.185 --> 00:02:34.127
In fact,

36
00:02:34.127 --> 00:02:41.496
Class of String or Class of Object are not extensions of Class of question mark.

37
00:02:41.496 --> 00:02:45.856
This is the reason why the compiler will give you this error.

38
00:02:45.856 --> 00:02:48.282
If you want to write this kind of code,

39
00:02:48.282 --> 00:02:52.104
what you need to write really is the following.

40
00:02:52.104 --> 00:02:58.572
Class of question mark extends String or even Class?

41
00:02:58.572 --> 00:03:09.000
extends Object. The first of this type is the exact type of Hello .getClass.

