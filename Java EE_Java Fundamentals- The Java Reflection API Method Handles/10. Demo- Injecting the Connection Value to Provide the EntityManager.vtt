WEBVTT
1
00:00:01.854 --> 00:00:06.119
So now what we need to do is create this getInstance method,

2
00:00:06.119 --> 00:00:09.015
make this getInstance method to work.

3
00:00:09.015 --> 00:00:10.744
So let us go there.

4
00:00:10.744 --> 00:00:11.735
By the way,

5
00:00:11.735 --> 00:00:16.878
this code should be just T and not EntityManager of T because what we want

6
00:00:16.878 --> 00:00:23.269
to do is really to instantiate this class and checking for the fields

7
00:00:23.269 --> 00:00:27.212
annotated with inject to put the right values in.

8
00:00:27.212 --> 00:00:29.070
Let me get rid of this.

9
00:00:29.070 --> 00:00:30.418
So to do that,

10
00:00:30.418 --> 00:00:34.715
we are going to just call the getConstructor with null

11
00:00:34.715 --> 00:00:38.574
argument and call the newInstance on the written constructor

12
00:00:38.574 --> 00:00:40.920
that takes null argument neither.

13
00:00:40.920 --> 00:00:43.083
Let me put this in a variable,

14
00:00:43.083 --> 00:00:47.868
and this variable T is really the object we need to return.

15
00:00:47.868 --> 00:00:51.482
This code, of course, is going to throw a bunch of exceptions.

16
00:00:51.482 --> 00:00:53.207
We are not real interested in them,

17
00:00:53.207 --> 00:00:57.933
so let me catch directly exception and get rid of all the

18
00:00:57.933 --> 00:01:00.081
other exceptions that have been generated.

19
00:01:00.081 --> 00:01:01.715
And by the way,

20
00:01:01.715 --> 00:01:06.586
we are going to rethrow this exception in a RuntimeException so that we do

21
00:01:06.586 --> 00:01:11.089
not have to take care of it with e as the root cause.

22
00:01:11.089 --> 00:01:16.638
So now what we need to return is this T object populated with the right value

23
00:01:16.638 --> 00:01:21.394
every time we see a field that is annotated with @Inject.

24
00:01:21.394 --> 00:01:29.433
So all we need to do is to get the declared field of that object,

25
00:01:29.433 --> 00:01:30.602
clss.getDeclaredFields.

26
00:01:30.602 --> 00:01:36.760
Let me put this in an array, something like that, then iterate over this array.

27
00:01:36.760 --> 00:01:38.440
And for each of those fields,

28
00:01:38.440 --> 00:01:43.488
what I need to do is to check if this Inject annotation we

29
00:01:43.488 --> 00:01:47.203
created is present on the field or not.

30
00:01:47.203 --> 00:01:50.510
So this variable is of type Inject.

31
00:01:50.510 --> 00:01:52.207
Let me call it Inject.

32
00:01:52.207 --> 00:01:57.507
If Inject is not null, then this is a field that is annotated.

33
00:01:57.507 --> 00:02:00.829
And if it is null, then the annotation is not there,

34
00:02:00.829 --> 00:02:03.085
and we can move to the next field.

35
00:02:03.085 --> 00:02:07.297
So if it is not null, we need to get the type of this field.

36
00:02:07.297 --> 00:02:12.207
This is the injectedFieldType, and from this type,

37
00:02:12.207 --> 00:02:15.460
we can get the Supplier we put in the registry.

38
00:02:15.460 --> 00:02:21.417
So registry.get injectedFieldType will return the Supplier that

39
00:02:21.417 --> 00:02:25.684
we can use to create an instance of this type.

40
00:02:25.684 --> 00:02:28.757
Remember that in that case, this type may be,

41
00:02:28.757 --> 00:02:31.407
for instance, a connection to the H2 server,

42
00:02:31.407 --> 00:02:36.923
so we cannot just use the empty constructor to create this connection.

43
00:02:36.923 --> 00:02:39.018
We really need to call the Supplier.

44
00:02:39.018 --> 00:02:43.311
By just calling supplier.get, we are going to create such an instance.

45
00:02:43.311 --> 00:02:46.768
This instance is the object to be injected.

46
00:02:46.768 --> 00:02:51.200
Now all we need to do is set this field to be accessible and

47
00:02:51.200 --> 00:02:55.460
call set on this t object we just created,

48
00:02:55.460 --> 00:02:57.409
passing the objectToInject.

49
00:02:57.409 --> 00:03:00.021
And now we have set the right value to the right field.

50
00:03:00.021 --> 00:03:05.509
Once this is done for all the fields, we can just return t, and this is fine.

51
00:03:05.509 --> 00:03:09.645
Let us get rid of this return null because it is unreachable code,

52
00:03:09.645 --> 00:03:12.649
and now we can run this ReadingObject class,

53
00:03:12.649 --> 00:03:16.869
and we can see that our instances of person have been

54
00:03:16.869 --> 00:03:19.335
properly read from the database.

55
00:03:19.335 --> 00:03:23.886
Now we can try to also run the WritingObject class,

56
00:03:23.886 --> 00:03:29.094
also retrofitted with this new version of our EntityManager.

57
00:03:29.094 --> 00:03:30.881
So if I just run this code,

58
00:03:30.881 --> 00:03:34.368
you can see that this code is writing exactly in the same way as

59
00:03:34.368 --> 00:03:36.805
in the previous example in the previous module.

60
00:03:36.805 --> 00:03:41.448
First, we display the person before the writing in the database.

61
00:03:41.448 --> 00:03:43.870
The primary keys have now been set.

62
00:03:43.870 --> 00:03:49.016
Then we write them to the database and display them again just to see

63
00:03:49.016 --> 00:03:52.464
that the primary keys have been properly set up.

64
00:03:52.464 --> 00:03:56.163
And indeed, if we check the console of the H2 database server,

65
00:03:56.163 --> 00:03:58.192
let me connect real quick,

66
00:03:58.192 --> 00:04:03.089
check the content of the PERSON table where you can see that the

67
00:04:03.089 --> 00:04:06.122
person have been properly returned in the database.

68
00:04:06.122 --> 00:04:10.179
And this wraps up the second example I wanted to show you on the use of

69
00:04:10.179 --> 00:04:14.643
the Reflection API in the dependency injection space.

70
00:04:14.643 --> 00:04:25.000
What you saw here is a very basic and naive implementation of a small dependency injection framework.

