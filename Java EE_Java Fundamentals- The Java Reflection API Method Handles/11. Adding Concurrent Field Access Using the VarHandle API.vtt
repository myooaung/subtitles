WEBVTT
1
00:00:01.973 --> 00:00:05.554
Let us take a quick look at this VarHandle API.

2
00:00:05.554 --> 00:00:08.750
Most of the time you will not need it because MethodHandle

3
00:00:08.750 --> 00:00:13.758
already gives you access to methods and fields,

4
00:00:13.758 --> 00:00:18.985
but VarHandle has a special functionality that we are going to see.

5
00:00:18.985 --> 00:00:23.524
First, this VarHandle class is an addition of Java 9.

6
00:00:23.524 --> 00:00:27.227
So if your application is Java 8 or before,

7
00:00:27.227 --> 00:00:30.602
well, VarHandles are just not for you.

8
00:00:30.602 --> 00:00:34.387
It looks like a MethodHandle for fields.

9
00:00:34.387 --> 00:00:39.579
But as we saw it, a MethodHandle can already access a field.

10
00:00:39.579 --> 00:00:45.710
It already gives you full access to fields, including private fields.

11
00:00:45.710 --> 00:00:51.442
So the question is why VarHandles have been added to Java 9.

12
00:00:51.442 --> 00:00:57.694
Well, in fact, VarHandle gives you three types of access to fields.

13
00:00:57.694 --> 00:01:01.812
The first type is just the plain, regular access,

14
00:01:01.812 --> 00:01:06.539
read and write to both public and private fields.

15
00:01:06.539 --> 00:01:10.786
So this is already done in MethodHandles,

16
00:01:10.786 --> 00:01:18.500
but it also gives you volatile access and compare and set access.

17
00:01:18.500 --> 00:01:23.400
Those two kinds of access have to do with concurrent access.

18
00:01:23.400 --> 00:01:26.500
Volatile is a concurrent notion,

19
00:01:26.500 --> 00:01:32.464
compare and set or compare and swap is also a concurrent notion,

20
00:01:32.464 --> 00:01:36.150
and this is what VarHandle brings to the table.

21
00:01:36.150 --> 00:01:40.500
So in a nutshell, if you do not need this concurrent access,

22
00:01:40.500 --> 00:01:49.000
then you do not need VarHandle. You can stick to using MethodHandles.

