WEBVTT
1
00:00:01.712 --> 00:00:05.583
Now what we need to do is implement those two methods,

2
00:00:05.583 --> 00:00:07.913
getPrimaryKey and getColumns.

3
00:00:07.913 --> 00:00:09.220
To implement getPrimaryKey,

4
00:00:09.220 --> 00:00:14.447
we need to first get all the fields that have been declared in a

5
00:00:14.447 --> 00:00:17.032
class this Metamodel object is created on.

6
00:00:17.032 --> 00:00:20.226
So to do that, we need to call the getDeclaredFields,

7
00:00:20.226 --> 00:00:25.222
as we saw it in the slides, with the result in a variable,

8
00:00:25.222 --> 00:00:28.776
which is an array of fields, and loop over those fields.

9
00:00:28.776 --> 00:00:31.248
And now for each of those fields,

10
00:00:31.248 --> 00:00:35.828
we need to check if there is this PrimaryKey annotation on it.

11
00:00:35.828 --> 00:00:39.463
We have a special method for that, getAnnotation.

12
00:00:39.463 --> 00:00:41.667
We need to pass the class of this annotation,

13
00:00:41.667 --> 00:00:45.001
which is, in fact, the annotation itself.

14
00:00:45.001 --> 00:00:48.210
So here, we are looking for the PrimaryKey class.

15
00:00:48.210 --> 00:00:49.632
It is not really a class.

16
00:00:49.632 --> 00:00:54.298
It's merely a type, but all the types in Java are modeled with classes.

17
00:00:54.298 --> 00:00:57.797
This is going to return the PrimaryKey instance.

18
00:00:57.797 --> 00:01:00.524
And if this instance is not null,

19
00:01:00.524 --> 00:01:03.676
it means that we have found the field of the PrimaryKey.

20
00:01:03.676 --> 00:01:06.311
That is the field we are looking for.

21
00:01:06.311 --> 00:01:10.219
So let us create an instance of this PrimaryKey field.

22
00:01:10.219 --> 00:01:14.597
PrimaryKeyField = new PrimaryKeyField,

23
00:01:14.597 --> 00:01:20.445
and we are going to pass that field as a parameter and just return the subject.

24
00:01:20.445 --> 00:01:24.783
If we exit this for loop without having found the PrimaryKey,

25
00:01:24.783 --> 00:01:28.620
it means that we have not found the annotation we are

26
00:01:28.620 --> 00:01:31.176
looking for on any of those fields.

27
00:01:31.176 --> 00:01:35.500
So here, maybe we can throw a new IllegalArgumentException,

28
00:01:35.500 --> 00:01:39.880
passing the message, No primary key found in class,

29
00:01:39.880 --> 00:01:40.499
clss.getSimpleName,

30
00:01:40.499 --> 00:01:44.004
just to tell the calling code that there is something

31
00:01:44.004 --> 00:01:46.185
wrong with the class we are dealing with.

32
00:01:46.185 --> 00:01:51.134
Now we need to create this particular constructor, PrimaryKeyField.

33
00:01:51.134 --> 00:01:56.737
And what we can do is just map this field precisely to a field of that class.

34
00:01:56.737 --> 00:01:58.844
It should be enough for the moment.

35
00:01:58.844 --> 00:02:00.556
Let us go back to our Metamodel,

36
00:02:00.556 --> 00:02:03.900
and now we need to do the same for the getColumns method.

37
00:02:03.900 --> 00:02:06.971
We can just copy/paste this code here.

38
00:02:06.971 --> 00:02:11.879
The difference is that we are not looking for the PrimaryKey annotation here,

39
00:02:11.879 --> 00:02:14.425
but for the Column annotation.

40
00:02:14.425 --> 00:02:20.247
So this getAnnotation method will return an instance of the Column annotation.

41
00:02:20.247 --> 00:02:21.549
Let me rename this.

42
00:02:21.549 --> 00:02:25.734
I've got this Alt+Shift+R shortcut to do that.

43
00:02:25.734 --> 00:02:28.296
Let me call this annotation column.

44
00:02:28.296 --> 00:02:31.563
So if this annotation has been found on this field,

45
00:02:31.563 --> 00:02:34.631
I want to create, not a PrimaryKeyField,

46
00:02:34.631 --> 00:02:37.709
but a ColumnField on that field.

47
00:02:37.709 --> 00:02:40.410
Let me call this one columnField.

48
00:02:40.410 --> 00:02:42.733
And we need to return the list of columnField,

49
00:02:42.733 --> 00:02:47.316
so we need to add this object with columnFields

50
00:02:47.316 --> 00:02:50.493
variable that we also need to create.

51
00:02:50.493 --> 00:02:56.162
This is going to be our columnFields object, which can be an ArrayList.

52
00:02:56.162 --> 00:03:00.830
And now, at the end of this for loop, we need to return this columnFields,

53
00:03:00.830 --> 00:03:04.282
and if we call the add method here, it should be okay.

54
00:03:04.282 --> 00:03:06.075
So now this method is okay.

55
00:03:06.075 --> 00:03:10.054
What we need to do is create this constructor in the ColumnField,

56
00:03:10.054 --> 00:03:12.822
and Eclipse is going to help us in that task,

57
00:03:12.822 --> 00:03:16.756
creating this as a field of the ColumnField class.

58
00:03:16.756 --> 00:03:29.000
So now we have created our metamodel that is analyzing this Person class, looking for the special annotations we have created.

