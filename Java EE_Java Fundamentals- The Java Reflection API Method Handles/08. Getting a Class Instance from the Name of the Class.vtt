WEBVTT
1
00:00:02.250 --> 00:00:07.240
So this is the first way of getting a reference on the Class object.

2
00:00:07.240 --> 00:00:11.334
Just call the getClass method on any instance you have,

3
00:00:11.334 --> 00:00:15.264
and you will get a reference on this Class object.

4
00:00:15.264 --> 00:00:18.754
The second way is always very classical, very well known.

5
00:00:18.754 --> 00:00:22.601
If you know the type you want to get a reference on,

6
00:00:22.601 --> 00:00:24.721
you just call that type .class,

7
00:00:24.721 --> 00:00:30.120
and it will give you a reference on the corresponding Class object.

8
00:00:30.120 --> 00:00:32.117
So if you type String.class,

9
00:00:32.117 --> 00:00:35.941
you will get a reference on the Class object that

10
00:00:35.941 --> 00:00:38.852
is a model for the stringClass.

11
00:00:38.852 --> 00:00:42.842
Now there is also a third way of getting a reference on a

12
00:00:42.842 --> 00:00:47.635
Class object that is going to work even if you do not know the

13
00:00:47.635 --> 00:00:50.757
name of the class at compile time,

14
00:00:50.757 --> 00:00:55.600
which is great and gives many opportunities for Reflection.

15
00:00:55.600 --> 00:00:58.560
Suppose we get the name of a class in a string,

16
00:00:58.560 --> 00:01:03.261
and here, on this example, we are using java.lang .String,

17
00:01:03.261 --> 00:01:08.262
but it could be any name read from a file,

18
00:01:08.262 --> 00:01:12.431
from a disk, from a database, from whatever.

19
00:01:12.431 --> 00:01:17.291
From this String, className, we can call Class.forName,

20
00:01:17.291 --> 00:01:22.865
the static factory method from the class Class; pass the

21
00:01:22.865 --> 00:01:27.783
name of a class as a parameter; and it returns a reference

22
00:01:27.783 --> 00:01:31.184
on the corresponding Class object.

23
00:01:31.184 --> 00:01:33.958
This is very powerful, and this is, in fact,

24
00:01:33.958 --> 00:01:40.688
the entry point of many applications based on the Reflection API.

25
00:01:40.688 --> 00:01:45.110
Now you need to be extra careful when running this code because

26
00:01:45.110 --> 00:01:49.068
the forName method throws several exceptions.

27
00:01:49.068 --> 00:01:49.819
Namely,

28
00:01:49.819 --> 00:01:54.545
it can throw security-related exceptions in case you do

29
00:01:54.545 --> 00:01:59.127
not have the rights to read that Class object to get a

30
00:01:59.127 --> 00:02:01.086
reference on that Class object,

31
00:02:01.086 --> 00:02:06.997
and it can also throw exceptions related to the fact that the

32
00:02:06.997 --> 00:02:11.214
name of the class you are passing is wrong and this class is

33
00:02:11.214 --> 00:02:13.231
not known by your application.

34
00:02:13.231 --> 00:02:20.498
So this code is a little more fragile than the others in the way that it can

35
00:02:20.498 --> 00:02:25.229
fail when you're calling Object.getClass or String.class,

36
00:02:25.229 --> 00:02:26.428
it will never fail.

37
00:02:26.428 --> 00:02:31.178
But it is also much more powerful because you can get a name

38
00:02:31.178 --> 00:02:35.187
of a class at runtime and try to load it,

39
00:02:35.187 --> 00:02:44.000
try to get a reference on it, and this is what we are going to use through the rest of this course.

