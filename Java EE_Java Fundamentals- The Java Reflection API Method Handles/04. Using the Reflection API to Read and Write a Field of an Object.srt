1
00:00:02,071 --> 00:00:05,091
Now that we have annotations on our fields,

2
00:00:05,091 --> 00:00:11,438
now that we know which field we should be reading or writing in what context,

3
00:00:11,438 --> 00:00:16,232
how can we use the Reflection API to read and write

4
00:00:16,232 --> 00:00:18,992
a given value to a given field?

5
00:00:18,992 --> 00:00:21,065
The problem is the following.

6
00:00:21,065 --> 00:00:22,934
We have a person bean,

7
00:00:22,934 --> 00:00:27,331
and we want to read the content of this person bean without

8
00:00:27,331 --> 00:00:31,306
knowing that is an instance of the Person class.

9
00:00:31,306 --> 00:00:34,368
We want to do that only using the Reflection API.

10
00:00:34,368 --> 00:00:38,109
And then when we have read the content of that bean,

11
00:00:38,109 --> 00:00:41,778
we want to be able to write this content to any kind

12
00:00:41,778 --> 00:00:46,345
of storage whether it is a file, an XML file,

13
00:00:46,345 --> 00:00:49,434
JSON file, or even a database.

14
00:00:49,434 --> 00:00:54,592
Then the question is how to read fields using this Reflection API,

15
00:00:54,592 --> 00:01:00,239
and after that, how to write some value back to a person bean.

16
00:01:00,239 --> 00:01:04,404
So suppose we have a Person class, which is here,

17
00:01:04,404 --> 00:01:09,414
and we have already created several instances of this Person class,

18
00:01:09,414 --> 00:01:11,656
P1 up to P5.

19
00:01:11,656 --> 00:01:17,070
Remember that for all those instances, P1 to P5,

20
00:01:17,070 --> 00:01:22,861
there is only 1 instance of the Person class itself.

21
00:01:22,861 --> 00:01:24,801
So from that Person class,

22
00:01:24,801 --> 00:01:30,290
you saw how to get a particular field as a Field object.

23
00:01:30,290 --> 00:01:34,221
Suppose that the field that we got corresponds to the

24
00:01:34,221 --> 00:01:36,301
name field of this Person class.

25
00:01:36,301 --> 00:01:39,566
If we want to give a value to that field,

26
00:01:39,566 --> 00:01:43,366
we are probably going to write the following code,

27
00:01:43,366 --> 00:01:49,764
nameField.setValue, and pass the value we want to set as a parameter.

28
00:01:49,764 --> 00:01:54,322
But remember that for all the instances of person we have,

29
00:01:54,322 --> 00:02:00,623
we have only one instance of the Person class and also one instance

30
00:02:00,623 --> 00:02:04,994
of the field that corresponds to the nameField.

31
00:02:04,994 --> 00:02:07,466
So if we call this code like that,

32
00:02:07,466 --> 00:02:12,457
the question is which is the instance of the Person class

33
00:02:12,457 --> 00:02:16,040
that is going to receive the value Sarah.

34
00:02:16,040 --> 00:02:20,086
In fact, the API is missing information,

35
00:02:20,086 --> 00:02:26,988
which is the person instance we want to set that value on.

36
00:02:26,988 --> 00:02:30,696
And the real pattern is the following: nameField.setValue.

37
00:02:30,696 --> 00:02:38,236
The first parameter is the instance we want to set the field on,

38
00:02:38,236 --> 00:02:43,383
and the second parameter, the value we want to put in that field.

39
00:02:43,383 --> 00:02:46,168
This may look a little confusing at first,

40
00:02:46,168 --> 00:02:50,576
passing an instance of the Person class as the first

41
00:02:50,576 --> 00:02:53,250
parameter to the setValue method call,

42
00:02:53,250 --> 00:03:00,283
but this mandatory since we have only one nameField object available.

43
00:03:00,283 --> 00:03:03,750
And by the way, the same will go for the getValue method,

44
00:03:03,750 --> 00:03:08,589
which will take the instance on which we want to read the

45
00:03:08,589 --> 00:03:11,774
field as we are going to see it in a minute.

46
00:03:11,774 --> 00:03:13,896
So here is the code.

47
00:03:13,896 --> 00:03:16,181
We have an instance of Person.

48
00:03:16,181 --> 00:03:16,862
First step,

49
00:03:16,862 --> 00:03:24,338
we can get the class of this instance by calling getClass on it; second step,

50
00:03:24,338 --> 00:03:29,149
we get the field corresponding to the nameField from

51
00:03:29,149 --> 00:03:35,852
the Person class; and last step, we call field.setValue,

52
00:03:35,852 --> 00:03:40,074
passing the instance as a parameter because it is on that

53
00:03:40,074 --> 00:03:42,562
instance that we want to set the field,

54
00:03:42,562 --> 00:03:47,297
and then passing the value we want to set for that field.

55
00:03:47,297 --> 00:03:56,000
So this is the right pattern to set the value of a field using the Reflection API.

