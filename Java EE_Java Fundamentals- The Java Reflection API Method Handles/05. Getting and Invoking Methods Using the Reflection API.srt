1
00:00:02,010 --> 00:00:05,206
How can you invoke a method using the Reflection API?

2
00:00:05,206 --> 00:00:09,150
This is the last technical point we need to cover.

3
00:00:09,150 --> 00:00:13,756
So let us take an example, this ConnectionProvider class.

4
00:00:13,756 --> 00:00:17,287
It has a single method, createConnection,

5
00:00:17,287 --> 00:00:21,223
that takes a uri String of characters as a parameter,

6
00:00:21,223 --> 00:00:24,178
and that returns a connection object.

7
00:00:24,178 --> 00:00:27,780
This createConnection method is an instance method

8
00:00:27,780 --> 00:00:29,804
of the ConnectionProvider class.

9
00:00:29,804 --> 00:00:31,054
It is not static,

10
00:00:31,054 --> 00:00:36,325
so we need to invocate on an instance of this ConnectionProvider class.

11
00:00:36,325 --> 00:00:39,521
First, we need to get the reference on this ConnectionProvider class,

12
00:00:39,521 --> 00:00:44,168
and we covered that in the previous modules of this course.

13
00:00:44,168 --> 00:00:47,919
Then we need to create an instance of this class using this

14
00:00:47,919 --> 00:00:51,855
pattern that we covered in the previous modules.

15
00:00:51,855 --> 00:00:56,218
Clss.getConstructor returns a reference on the empty

16
00:00:56,218 --> 00:00:59,754
constructor on the ConnectionProvider class and

17
00:00:59,754 --> 00:01:02,979
getInstance just invokes that constructor,

18
00:01:02,979 --> 00:01:05,549
thus, returning an instance.

19
00:01:05,549 --> 00:01:07,658
And then this is the new pattern.

20
00:01:07,658 --> 00:01:10,801
We need to get a reference and a particular method

21
00:01:10,801 --> 00:01:12,983
of the ConnectionProvider class.

22
00:01:12,983 --> 00:01:16,702
For that, we call the getMethod on this class object,

23
00:01:16,702 --> 00:01:22,288
pass the name of the method as a string of characters as a parameter.

24
00:01:22,288 --> 00:01:27,013
And since a given method may be overloaded in a class,

25
00:01:27,013 --> 00:01:31,087
you need to tell the getMethod which overload you need.

26
00:01:31,087 --> 00:01:32,008
And for that,

27
00:01:32,008 --> 00:01:37,766
you need to provide the set of parameters that this method is taking.

28
00:01:37,766 --> 00:01:43,109
So here, you are interested in a method that takes just a string as a parameter,

29
00:01:43,109 --> 00:01:47,592
so you just pass String.class as a parameter.

30
00:01:47,592 --> 00:01:52,724
Invoking this method is done through the use of the invoke method.

31
00:01:52,724 --> 00:01:56,975
This invoke method works as the set value or get

32
00:01:56,975 --> 00:01:59,286
value method of the field class.

33
00:01:59,286 --> 00:02:03,385
It first takes the object on which you want to invoke that method and

34
00:02:03,385 --> 00:02:08,055
then the parameters you need to pass to that method.

35
00:02:08,055 --> 00:02:08,842
So here,

36
00:02:08,842 --> 00:02:13,518
we pass this ConnectionProvider object and then the uri of the

37
00:02:13,518 --> 00:02:16,524
database we want to create a connection to.

38
00:02:16,524 --> 00:02:19,753
In case this createConnection method is static,

39
00:02:19,753 --> 00:02:25,079
the first argument of this invoke method is just null since you do

40
00:02:25,079 --> 00:02:36,000
not need any object to invoke a static method. So this is the pattern we are going to use to create the connection.

