WEBVTT
1
00:00:01.815 --> 00:00:05.631
How are we going to create our EntityManagers?

2
00:00:05.631 --> 00:00:08.417
Well, as we saw in the slides, we need another object,

3
00:00:08.417 --> 00:00:11.700
and we are going to call this object a BeanManager.

4
00:00:11.700 --> 00:00:18.906
Let us call it beanManager, BeanManager.getInstance, for instance.

5
00:00:18.906 --> 00:00:20.855
And from that BeanManager object,

6
00:00:20.855 --> 00:00:24.069
we are going to be able to create EntityManagers.

7
00:00:24.069 --> 00:00:29.654
So this EntityManager of Person here will be created using this pattern,

8
00:00:29.654 --> 00:00:37.631
beanManager.getInstance, and pass the ManagedEntityManager.class as a parameter.

9
00:00:37.631 --> 00:00:40.691
Of course, nothing is working properly,

10
00:00:40.691 --> 00:00:43.433
so we need to create this BeanManager object.

11
00:00:43.433 --> 00:00:45.163
Let us create this class.

12
00:00:45.163 --> 00:00:49.656
We are going to put it in the package beanmanager.

13
00:00:49.656 --> 00:00:50.673
Now we have it.

14
00:00:50.673 --> 00:00:54.943
Let us create the getInstance method, return to BeanManager,

15
00:00:54.943 --> 00:00:59.481
and we need a getInsance method that is going to return an

16
00:00:59.481 --> 00:01:05.139
EntityManager of T and that takes a Class of T as a parameter,

17
00:01:05.139 --> 00:01:09.642
and we need to add this type to here if we want this code to compile.

18
00:01:09.642 --> 00:01:12.740
And the responsibility of this BeanManager will be

19
00:01:12.740 --> 00:01:15.134
to get an instance of this class,

20
00:01:15.134 --> 00:01:19.653
check if this class contains fields annotated with @Inject,

21
00:01:19.653 --> 00:01:25.885
and find a way to construct the corresponding objects and inject them in

22
00:01:25.885 --> 00:01:35.000
those objects before providing them to the client code. So this is what we are going to do now.

