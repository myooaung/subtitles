WEBVTT
1
00:00:01.827 --> 00:00:05.114
We have one last point to cover very quickly,

2
00:00:05.114 --> 00:00:10.754
which is about the modifiers you can put on fields,

3
00:00:10.754 --> 00:00:12.554
methods, or constructors.

4
00:00:12.554 --> 00:00:16.843
The modifiers we can put is going to tell if a

5
00:00:16.843 --> 00:00:24.920
field or a method is static or not, abstract or not; final or not; public,

6
00:00:24.920 --> 00:00:26.067
private, protected,

7
00:00:26.067 --> 00:00:34.442
or even package protected; synchronized or volatile; or native.

8
00:00:34.442 --> 00:00:38.594
Not all those modifies are available on any kind of

9
00:00:38.594 --> 00:00:41.201
element you can find in a class.

10
00:00:41.201 --> 00:00:46.643
For instance, a field cannot be abstract or cannot be synchronized,

11
00:00:46.643 --> 00:00:49.223
a method cannot be volatile,

12
00:00:49.223 --> 00:00:56.552
but all those modifiers are defined for the field method and constructor object.

13
00:00:56.552 --> 00:00:59.094
In fact, when you call getFields,

14
00:00:59.094 --> 00:01:04.584
you will get all the fields whether they are static or not.

15
00:01:04.584 --> 00:01:06.558
If you call the getMethods,

16
00:01:06.558 --> 00:01:11.935
you will get all the methods whether they are abstract or not.

17
00:01:11.935 --> 00:01:20.236
So how can you tell if a method is abstract or if a field is static or final?

18
00:01:20.236 --> 00:01:25.625
Well, there is a method for that which is available on the field,

19
00:01:25.625 --> 00:01:31.798
method, and constructor objects, and that is called getModifiers.

20
00:01:31.798 --> 00:01:38.395
Now if I mention this method here it is because it's not very easy to use it.

21
00:01:38.395 --> 00:01:41.102
There is a special pattern for that.

22
00:01:41.102 --> 00:01:48.546
In fact, this getModifiers method returns an integer on 32 bits.

23
00:01:48.546 --> 00:01:50.828
What can you do with this int?

24
00:01:50.828 --> 00:01:55.042
How can it be used to get the information you need?

25
00:01:55.042 --> 00:02:00.331
Well, what you need to understand is that this modifier integer is,

26
00:02:00.331 --> 00:02:06.429
in fact, seen by the JDK as a field of bits.

27
00:02:06.429 --> 00:02:11.287
Each bit of this modifier integer has a special meaning.

28
00:02:11.287 --> 00:02:12.286
For instance,

29
00:02:12.286 --> 00:02:17.635
the first bit tells you if the element you're looking at is public or not,

30
00:02:17.635 --> 00:02:19.748
the second one will tell you if it's private,

31
00:02:19.748 --> 00:02:23.425
and the third one tells you if it's protected,

32
00:02:23.425 --> 00:02:25.709
and the next one if it's static,

33
00:02:25.709 --> 00:02:31.461
and so on and so forth until all the modifiers have been seen.

34
00:02:31.461 --> 00:02:34.993
So suppose we are getting a reference on the field

35
00:02:34.993 --> 00:02:37.502
from the Person class called name.

36
00:02:37.502 --> 00:02:41.237
We are reading the modifiers from that field.

37
00:02:41.237 --> 00:02:45.151
We get that integer called modifiers.

38
00:02:45.151 --> 00:02:49.156
What we can do is use a bit mask,

39
00:02:49.156 --> 00:02:55.058
modifiers && here is the one written in binary format,

40
00:02:55.058 --> 00:03:02.502
and if the result is true, it means that the field we are looking at is public.

41
00:03:02.502 --> 00:03:06.640
We can do that for each modifier we want to read.

42
00:03:06.640 --> 00:03:11.706
The problem is that it will lead to very hard to read code,

43
00:03:11.706 --> 00:03:16.694
very hard to write also, and also, very error prone.

44
00:03:16.694 --> 00:03:20.706
It would be extremely easy to put an extra 0,

45
00:03:20.706 --> 00:03:26.774
or on the contrary, to miss a 0 between this x and this 1 just to read,

46
00:03:26.774 --> 00:03:28.444
in fact, another modifier.

47
00:03:28.444 --> 00:03:33.761
The right pattern to use is to use the Modifier factory class,

48
00:03:33.761 --> 00:03:36.772
which has a list of factory methods.

49
00:03:36.772 --> 00:03:40.325
Among them there is this isPublic method.

50
00:03:40.325 --> 00:03:44.353
You just pass the int modifiers as a parameter.

51
00:03:44.353 --> 00:03:49.354
It will do the bit masking for you and return the right Boolean.

52
00:03:49.354 --> 00:03:52.830
Using this factory class is not mandatory,

53
00:03:52.830 --> 00:04:03.000
but it will be much simpler and much safer to use it than to write the bit mask yourself.

