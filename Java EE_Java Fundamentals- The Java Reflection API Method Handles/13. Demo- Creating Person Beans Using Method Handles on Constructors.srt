1
00:00:01,700 --> 00:00:04,171
Time to see all this in action.

2
00:00:04,171 --> 00:00:07,818
Let us jump into the live coding part of this module.

3
00:00:07,818 --> 00:00:10,645
What are you going to see in this part?

4
00:00:10,645 --> 00:00:17,520
Well, we are going to create MethodHandles and VarHandles on a very simple case.

5
00:00:17,520 --> 00:00:20,744
This MethodHandle API is very technical,

6
00:00:20,744 --> 00:00:24,475
and it's very easy to write code that compiles,

7
00:00:24,475 --> 00:00:27,480
but that does not execute properly.

8
00:00:27,480 --> 00:00:28,627
So let us do that.

9
00:00:28,627 --> 00:00:33,314
Let us see those patterns in action.

10
00:00:33,314 --> 00:00:37,145
Let us now see this MethodHandle API in action,

11
00:00:37,145 --> 00:00:38,579
and for that,

12
00:00:38,579 --> 00:00:43,871
I have created another Person class here with two classical properties,

13
00:00:43,871 --> 00:00:48,917
name and age, to constructor, the of method,

14
00:00:48,917 --> 00:00:50,824
a toString method.

15
00:00:50,824 --> 00:00:55,787
First thing I would like to show you is how to get this lookup object,

16
00:00:55,787 --> 00:00:58,497
which is the entry point of this API.

17
00:00:58,497 --> 00:01:04,041
This lookup object is just created like that, MethodHandles.Lookup.

18
00:01:04,041 --> 00:01:06,520
Let me fix the import.

19
00:01:06,520 --> 00:01:09,402
And this lookup object is the object that you want

20
00:01:09,402 --> 00:01:12,167
to use all throughout this API.

21
00:01:12,167 --> 00:01:18,495
Let us first create an instance of the Person class using MethodHandle.

22
00:01:18,495 --> 00:01:23,315
For that, we need to create the MethodHandle on this empty constructor,

23
00:01:23,315 --> 00:01:28,362
take this lookupmobject, call the findConstructor method on it.

24
00:01:28,362 --> 00:01:31,446
The first argument is the class, so Person class,

25
00:01:31,446 --> 00:01:36,074
and the second argument is a special object called a MethodType,

26
00:01:36,074 --> 00:01:40,144
and we are going to call it emptyConstructorMethodtype.

27
00:01:40,144 --> 00:01:42,802
We need to create this object.

28
00:01:42,802 --> 00:01:45,172
We need to import this Person class.

29
00:01:45,172 --> 00:01:49,023
Creating a MethodType is done through the user

30
00:01:49,023 --> 00:01:52,800
factory method MethodType.methodType.

31
00:01:52,800 --> 00:01:56,435
By convention, the constructor is set to return nothing.

32
00:01:56,435 --> 00:01:57,120
So here,

33
00:01:57,120 --> 00:02:03,829
we are going to pass as the first parameter void.class since the first

34
00:02:03,829 --> 00:02:08,528
parameter of this MethodType factory method is the return type of the

35
00:02:08,528 --> 00:02:11,039
method we want to get a reference on.

36
00:02:11,039 --> 00:02:16,020
And since this is the empty constructor, it does not take any parameter.

37
00:02:16,020 --> 00:02:19,600
This findConstructor will return a MethodHandle.

38
00:02:19,600 --> 00:02:27,026
Let us call it emptyConstructor and just invocate emptyConstructor.invoke.

39
00:02:27,026 --> 00:02:29,556
It doesn't take any argument and should return a

40
00:02:29,556 --> 00:02:33,088
Person object that we need to cast, of course,

41
00:02:33,088 --> 00:02:36,283
since this method, in fact, returns a plain object.

42
00:02:36,283 --> 00:02:37,727
Let us print out the result,

43
00:02:37,727 --> 00:02:42,908
and we can see that indeed we have created an empty instance of Person.

44
00:02:42,908 --> 00:02:47,171
We can get a reference on the other constructor of

45
00:02:47,171 --> 00:02:50,305
this class that takes a Person class, and this time,

46
00:02:50,305 --> 00:02:54,787
we are going to change the MethodType we would be getting.

47
00:02:54,787 --> 00:02:56,901
This is the constructor MethodType,

48
00:02:56,901 --> 00:03:00,854
and the other constructor we created in the Person class takes

49
00:03:00,854 --> 00:03:05,982
a string as a parameter and an int to change the MethodType to

50
00:03:05,982 --> 00:03:07,919
match this other constructor.

51
00:03:07,919 --> 00:03:11,982
And let me do the same here, create a second instance of person,

52
00:03:11,982 --> 00:03:14,603
but this time calling the regular constructor,

53
00:03:14,603 --> 00:03:19,000
passing James as the parameter and then age.

54
00:03:19,000 --> 00:03:20,333
Let us say, 28.

55
00:03:20,333 --> 00:03:22,750
Let us run this code, and this time,

56
00:03:22,750 --> 00:03:26,000
we have invoked the other constructor of the Person class.

57
00:03:26,000 --> 00:03:32,000
You need to be extra careful because if you put void with a capital V here,

58
00:03:32,000 --> 00:03:35,500
it will also compile, but it will not work.

59
00:03:35,500 --> 00:03:38,000
Here, the MethodHandle API will complain,

60
00:03:38,000 --> 00:03:42,214
telling you that it does not recognize this MethodType as

61
00:03:42,214 --> 00:03:53,000
the right MethodType you want to put. So the type we want to use here is the void with a small v and not a capital V.

