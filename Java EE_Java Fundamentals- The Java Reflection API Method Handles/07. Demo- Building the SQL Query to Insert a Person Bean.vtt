WEBVTT
1
00:00:01.922 --> 00:00:04.559
Let us create this method, buildInsertRequest,

2
00:00:04.559 --> 00:00:09.253
in the Metamodel class BuildInsertRequest.

3
00:00:09.253 --> 00:00:13.525
Let me type in the form of this InsertRequest.

4
00:00:13.525 --> 00:00:17.057
It's going to be something like that, insert into Person,

5
00:00:17.057 --> 00:00:20.321
which is the name of the class.

6
00:00:20.321 --> 00:00:23.693
Then I will have the name of the primary key,

7
00:00:23.693 --> 00:00:29.612
and the name of the different columns, and then values,

8
00:00:29.612 --> 00:00:34.537
and a set of question marks corresponding to the names of the columns.

9
00:00:34.537 --> 00:00:38.940
This is the syntax of the SQL string that needs to be

10
00:00:38.940 --> 00:00:41.950
passed to this PreparedStatement object.

11
00:00:41.950 --> 00:00:42.597
So first,

12
00:00:42.597 --> 00:00:48.900
we are going to concentrate on the list of the column names separated by commas.

13
00:00:48.900 --> 00:00:50.624
This is quite easy to do.

14
00:00:50.624 --> 00:00:54.709
The first name is the name of the primary key column.

15
00:00:54.709 --> 00:00:58.280
So we have this primary key column, PrimaryKeyField,

16
00:00:58.280 --> 00:01:02.776
and we can ask for the name of that column.

17
00:01:02.776 --> 00:01:05.594
Who is the getName method?

18
00:01:05.594 --> 00:01:08.400
Let us put that in a new local variable,

19
00:01:08.400 --> 00:01:14.755
which is the primaryKeyColumnName, and then we can get the columns,

20
00:01:14.755 --> 00:01:18.627
which is a list of ColumnField objects.

21
00:01:18.627 --> 00:01:23.137
But we can stream this list, and map it,

22
00:01:23.137 --> 00:01:28.185
take the column field, and call the getName method on it,

23
00:01:28.185 --> 00:01:31.107
and put the result in another list.

24
00:01:31.107 --> 00:01:33.447
And this is a List of String.

25
00:01:33.447 --> 00:01:38.737
And in fact, I'm going to rename it because this is the list of the columnNames.

26
00:01:38.737 --> 00:01:45.231
By the way, this can be returned as a method reference, which is a little nicer.

27
00:01:45.231 --> 00:01:50.200
And this primaryKeyColumnName can be added as the

28
00:01:50.200 --> 00:01:53.251
first element of the columnNames List.

29
00:01:53.251 --> 00:01:56.227
So let us do that.

30
00:01:56.227 --> 00:01:58.809
ColumnNames.add, and since this is a List,

31
00:01:58.809 --> 00:02:03.912
we can add it as a first element like this,

32
00:02:03.912 --> 00:02:04.601
primaryKeyColumnName.

33
00:02:04.601 --> 00:02:09.510
So now this columnNames object holds all the names

34
00:02:09.510 --> 00:02:11.817
of the columns of our request.

35
00:02:11.817 --> 00:02:15.812
So we can transform this list into the right string,

36
00:02:15.812 --> 00:02:24.592
let me call it columnElement, we can use this factory method String.join,

37
00:02:24.592 --> 00:02:29.156
pass the delimiter as a parameter, and then the columnNames,

38
00:02:29.156 --> 00:02:34.224
and this is going to join all the elements of that

39
00:02:34.224 --> 00:02:37.314
list using the comma as a separator.

40
00:02:37.314 --> 00:02:41.797
So this columnElement corresponds exactly to the String of

41
00:02:41.797 --> 00:02:45.522
characters with the columnNames separated by commas.

42
00:02:45.522 --> 00:02:47.999
Now we need to create the second element of it,

43
00:02:47.999 --> 00:02:53.319
which is just a set of question marks separated by commas.

44
00:02:53.319 --> 00:02:57.697
So for that, we just need to have the number of those question marks,

45
00:02:57.697 --> 00:03:01.027
and we can just call getColumns.

46
00:03:01.027 --> 00:03:04.520
GetColumns .size is the number of columns,

47
00:03:04.520 --> 00:03:09.845
and we need to add one since there is one column for the primaryKey,

48
00:03:09.845 --> 00:03:12.871
and this is the numberOfColumns.

49
00:03:12.871 --> 00:03:14.345
From this numberOfColumns,

50
00:03:14.345 --> 00:03:20.973
we have a very useful factory method on this IntStream object,

51
00:03:20.973 --> 00:03:27.822
which is the range starting from 0, ending with the numberOfColumns.

52
00:03:27.822 --> 00:03:32.376
This is going to create a stream of integers from 0

53
00:03:32.376 --> 00:03:37.695
to the numberOfColumns minus 1, and we want to map that to object,

54
00:03:37.695 --> 00:03:42.500
and each index will be just mapped to the question mark.

55
00:03:42.500 --> 00:03:44.371
I'm going to put it here,

56
00:03:44.371 --> 00:03:50.575
and we want to collect that using a joiner with this delimiter.

57
00:03:50.575 --> 00:03:58.565
So now I have a question marks element, so now I can create the query string.

58
00:03:58.565 --> 00:04:03.964
It's just insert into, this is the class name,

59
00:04:03.964 --> 00:04:13.405
so this.clss .getSimpleName + opening parentheses + the columnElements,

60
00:04:13.405 --> 00:04:17.695
and we need to close these parentheses, add the values here,

61
00:04:17.695 --> 00:04:20.937
and do the same with the questionMarkElement,

62
00:04:20.937 --> 00:04:24.002
and close the parentheses.

63
00:04:24.002 --> 00:04:26.537
And this is what I want to return.

64
00:04:26.537 --> 00:04:31.732
Just to be more readable, I can put this in a method.

65
00:04:31.732 --> 00:04:39.624
The shortcut is Alt+Shift+M, and I'm going to call the method buildColumnNames.

66
00:04:39.624 --> 00:04:52.000
I can do the same for this part of the string, buildQuestionMarksElement, just to make this code more readable.

