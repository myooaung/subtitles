WEBVTT
1
00:00:02.092 --> 00:00:06.248
Before we start, before we deep dive into technical details,

2
00:00:06.248 --> 00:00:12.579
let us first define what is dependency injection and why is it so

3
00:00:12.579 --> 00:00:15.949
important in the design of business applications.

4
00:00:15.949 --> 00:00:16.258
Well,

5
00:00:16.258 --> 00:00:19.134
you may know that there are five fundamental

6
00:00:19.134 --> 00:00:21.890
principles in object-oriented programming,

7
00:00:21.890 --> 00:00:26.234
which are known as the SOLID principles.

8
00:00:26.234 --> 00:00:29.351
The S is the single responsibility principle,

9
00:00:29.351 --> 00:00:36.647
the O is the open/closed principle, the L is the Liskov substitution principle,

10
00:00:36.647 --> 00:00:40.979
the I is the interface segregation principle,

11
00:00:40.979 --> 00:00:46.331
and the D stands for dependency inversion,

12
00:00:46.331 --> 00:00:51.204
not dependency injection, but dependency inversion.

13
00:00:51.204 --> 00:00:52.143
What does it mean?

14
00:00:52.143 --> 00:00:57.833
It means that if you are designing an object that needs another object to work,

15
00:00:57.833 --> 00:00:59.420
a delegate object,

16
00:00:59.420 --> 00:01:06.325
then this first object should not try to create itself this delegated object.

17
00:01:06.325 --> 00:01:09.520
Instead of that, when you construct this object,

18
00:01:09.520 --> 00:01:15.306
you should try to ask for some other mechanism to inject that

19
00:01:15.306 --> 00:01:18.056
delegated object into the first object.

20
00:01:18.056 --> 00:01:23.864
So a way to implement this is to work with a dependency injection framework.

21
00:01:23.864 --> 00:01:28.304
It is not the only way to implement the dependency inversion principle,

22
00:01:28.304 --> 00:01:33.034
but it is probably nowadays the most classical one

23
00:01:33.034 --> 00:01:40.000
you meet in business applications. And this is what we are going to see now.

