1
00:00:01,938 --> 00:00:03,678
Now we need to handle the rest of the fields,

2
00:00:03,678 --> 00:00:08,557
and that is the field name and age in the case of our Person class.

3
00:00:08,557 --> 00:00:11,591
We are going to need to iterate over the remaining columns.

4
00:00:11,591 --> 00:00:14,893
So let us do it in that way.

5
00:00:14,893 --> 00:00:17,318
We're going to create an index, a columnIndex,

6
00:00:17,318 --> 00:00:23,653
starting from 0 up to the number of columns we need to handle.

7
00:00:23,653 --> 00:00:26,939
Let me increment this columnIndex.

8
00:00:26,939 --> 00:00:30,884
So we need to get the corresponding ColumnField.

9
00:00:30,884 --> 00:00:33,115
This is the ColumnField.

10
00:00:33,115 --> 00:00:36,472
We can query the metamodels to have that get columnIndex,

11
00:00:36,472 --> 00:00:40,164
and the remaining of the pattern is kind of the same as

12
00:00:40,164 --> 00:00:42,843
the pattern we used for the PrimaryKey.

13
00:00:42,843 --> 00:00:46,792
So first, we need the type of this columnField.

14
00:00:46,792 --> 00:00:48,827
Let us put this in a variable.

15
00:00:48,827 --> 00:00:53,382
This is our fieldType, and of course, we need to get the field itself.

16
00:00:53,382 --> 00:00:57,649
We have not created this method, so let me create it quickly.

17
00:00:57,649 --> 00:01:03,500
This is just a getter on the field columnField.getField.

18
00:01:03,500 --> 00:01:05,857
Let me put this in a variable,

19
00:01:05,857 --> 00:01:10,444
and we are going to read that field using the Reflection API.

20
00:01:10,444 --> 00:01:16,799
So since this is most probably a private field, I'm going to make it accessible.

21
00:01:16,799 --> 00:01:21,624
And now I am going to read the value of that field for

22
00:01:21,624 --> 00:01:24,128
the object we have as a parameter.

23
00:01:24,128 --> 00:01:31,611
So field.get, pass the t object as a parameter, put this in a new variable.

24
00:01:31,611 --> 00:01:33,146
This is the field value.

25
00:01:33,146 --> 00:01:37,013
This get method is going to throw some more exceptions,

26
00:01:37,013 --> 00:01:39,740
IllegalArgument, IllegalAccess.

27
00:01:39,740 --> 00:01:42,176
And now that we have the type and the value,

28
00:01:42,176 --> 00:01:47,962
we need to have an equivalent pattern as the one we used for the PrimaryKey.

29
00:01:47,962 --> 00:01:48,418
That is,

30
00:01:48,418 --> 00:01:51,720
we need to check the type of the field and call the

31
00:01:51,720 --> 00:01:54,239
Write method from the statement object.

32
00:01:54,239 --> 00:01:57,170
So if this fieldType is int,

33
00:01:57,170 --> 00:02:02,315
which is the case for the age; then we want to call

34
00:02:02,315 --> 00:02:04,378
statement.setInt ; pass the parameterIndex,

35
00:02:04,378 --> 00:02:09,608
we are going to talk about it in a minute; and the value of the field,

36
00:02:09,608 --> 00:02:11,059
which is value.

37
00:02:11,059 --> 00:02:16,783
Now as we saw, the parameterIndexes for the PreparedStatement start with 1,

38
00:02:16,783 --> 00:02:19,974
and the value 1 correspond to the PrimaryKey.

39
00:02:19,974 --> 00:02:23,287
So the set of the columns starts at the parameter 2,

40
00:02:23,287 --> 00:02:27,856
so here, we need to put columnIndex + 2.

41
00:02:27,856 --> 00:02:34,633
And this setInt call corresponds to the age field of our Person object.

42
00:02:34,633 --> 00:02:43,420
We also have a string field, so let us add else if fieldType == String.class,

43
00:02:43,420 --> 00:02:44,308
and here,

44
00:02:44,308 --> 00:02:48,519
I'm going to copy/paste this statement because the method I

45
00:02:48,519 --> 00:02:52,435
need to call is the setString method.

46
00:02:52,435 --> 00:02:55,314
I need to cast the value to an int.

47
00:02:55,314 --> 00:03:01,638
Here, I need to cast the value to a String so that the code can compile properly.

48
00:03:01,638 --> 00:03:05,619
And if you want to write a complete system,

49
00:03:05,619 --> 00:03:07,012
then for the different columns,

50
00:03:07,012 --> 00:03:12,074
you need to handle all the types recognized by this PreparedStatement object,

51
00:03:12,074 --> 00:03:15,696
and all the types are all the primitive types,

52
00:03:15,696 --> 00:03:18,632
the string type, and the different date types.

53
00:03:18,632 --> 00:03:22,331
And now what we need to return is this statement object.

54
00:03:22,331 --> 00:03:25,481
So here in the calling code,

55
00:03:25,481 --> 00:03:31,071
we now have the proper statement object fully created with the right

56
00:03:31,071 --> 00:03:36,029
SQL query and the parameters set as they need to be.

57
00:03:36,029 --> 00:03:39,604
We need to throw some exceptions, IllegalArgument,

58
00:03:39,604 --> 00:03:42,972
IllegalAccess, SQL, and of course,

59
00:03:42,972 --> 00:03:47,891
we need to copy/paste this throws statement in the corresponding

60
00:03:47,891 --> 00:03:52,939
method of the interface for things to compile properly.

61
00:03:52,939 --> 00:03:56,556
Now our persist method is compiling properly,

62
00:03:56,556 --> 00:03:59,708
the writing object here does not compile because we

63
00:03:59,708 --> 00:04:01,555
need to add throws declaration,

64
00:04:01,555 --> 00:04:14,000
and I'm going to throw exceptions here because I'm not interested in those exceptions, and this code should be able to run properly.

