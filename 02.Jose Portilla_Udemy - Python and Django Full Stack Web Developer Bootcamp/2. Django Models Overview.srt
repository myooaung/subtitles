1
00:00:04,960 --> 00:00:09,940
Hello everyone and welcome to the Django model's lecture and this lecture we're going to be covering

2
00:00:09,940 --> 00:00:13,930
the main concepts behind models databases and how it works with them.

3
00:00:14,140 --> 00:00:16,670
We will actually be doing any live coding in this lecture.

4
00:00:16,690 --> 00:00:19,510
We're just going to be looking at concepts through slides.

5
00:00:19,510 --> 00:00:23,150
So make sure you have enough time to just fully enjoy this lecture and the concepts.

6
00:00:23,320 --> 00:00:27,270
And then in the next lecture we're going to comb through a lot of the stuff we talk about here.

7
00:00:28,390 --> 00:00:29,070
All right.

8
00:00:29,290 --> 00:00:34,570
In the central part of any web site is the ability to accept information from a user and input it into

9
00:00:34,570 --> 00:00:35,510
a database.

10
00:00:35,620 --> 00:00:41,560
Then later on retrieve information from a database and use it to generate content for the user.

11
00:00:41,730 --> 00:00:47,730
We use models to incorporate a database into a single project and Django comes equipped with sequel

12
00:00:47,730 --> 00:00:53,250
light which is a sequel engine sequel light will work with us for our simple examples who won't be doing

13
00:00:53,250 --> 00:00:56,020
any huge web sites so it should be totally fine.

14
00:00:56,040 --> 00:00:59,240
But Gengel can also connect to a variety of sequel engine back ends.

15
00:00:59,400 --> 00:01:01,940
It can connect to post-career sequel My sequel.

16
00:01:02,030 --> 00:01:06,320
Now all you have to do is just switch out the actual engine and we'll talk about that later on.

17
00:01:06,360 --> 00:01:12,220
But for most of our project sequel life is more than enough in the setting up file you can edit the

18
00:01:12,220 --> 00:01:16,930
engine parameter used for databases and that's where you would actually connect to a different backend

19
00:01:16,960 --> 00:01:21,940
if you didn't want to use sequel like then to create an actual model we use a class structure inside

20
00:01:21,940 --> 00:01:27,160
of the relevant applications models that py file which we haven't actually edited yet but we will in

21
00:01:27,150 --> 00:01:34,400
the next lecture this class object will be a subclass of jingoes builtin class jingled that D-B that

22
00:01:34,420 --> 00:01:35,770
models that model.

23
00:01:35,770 --> 00:01:41,650
So basically you're going to inherit from this builtin model class then each attribute of the class

24
00:01:41,650 --> 00:01:46,590
represents a field which is just like a column name with constraints and sequel.

25
00:01:46,640 --> 00:01:48,160
This will all feel very natural.

26
00:01:48,160 --> 00:01:52,880
If you already have some sequel experience that in case you don't let's quickly review what a sequel

27
00:01:52,880 --> 00:01:57,140
database looks like and if you already have sequel experience you can just kind of fast forward through

28
00:01:57,140 --> 00:01:58,830
this little explanation.

29
00:01:59,610 --> 00:02:00,200
OK.

30
00:02:00,390 --> 00:02:03,180
So basically sequel operates like a giant table.

31
00:02:03,180 --> 00:02:07,800
If you're familiar with Excel or spreadsheets and general sequel operates in a very similar fashion

32
00:02:07,800 --> 00:02:13,590
with each column representing a field in each row representing an individual and true or data point.

33
00:02:13,590 --> 00:02:16,710
So here we can see a table has a website ID a web site name.

34
00:02:16,710 --> 00:02:18,460
And then if you are el.

35
00:02:18,670 --> 00:02:23,920
So each column has a type of field as well such as a character field an integer field or a date field

36
00:02:24,100 --> 00:02:26,320
and each field can also have constraints.

37
00:02:26,590 --> 00:02:31,000
So here we have Web site ID and that's an integer field that we have web site name.

38
00:02:31,000 --> 00:02:32,960
That's a character field etc..

39
00:02:34,340 --> 00:02:39,380
And for those kind of constraints for example the character field should have a max length constraint

40
00:02:39,590 --> 00:02:42,290
indicating the maximum number of characters allowed.

41
00:02:42,320 --> 00:02:46,000
So you have the type of field and then constraints on that field.

42
00:02:47,200 --> 00:02:51,040
The last thing to note is table or models with Django.

43
00:02:51,040 --> 00:02:57,290
The relationships between them and often models will reference each other for this referencing to work.

44
00:02:57,290 --> 00:03:00,690
We use the concept of foreign keys and primary keys.

45
00:03:00,970 --> 00:03:06,680
So to show an example imagine we now have two models which are essentially two databases one to store

46
00:03:06,680 --> 00:03:10,470
Web site information and another to store data information.

47
00:03:10,490 --> 00:03:15,200
So here the last we have the Web site ID the web site name and the URL on the right.

48
00:03:15,230 --> 00:03:22,040
We have the corresponding web site ID and then they accessed so we could say that the Web site ID column

49
00:03:22,100 --> 00:03:29,660
is a primary key in the left table and a foreign key in the right table a primary key is a unique identifier

50
00:03:29,720 --> 00:03:31,360
for each row in a table.

51
00:03:32,150 --> 00:03:38,230
A foreign key just the notes that the column coincides with primary key of another table.

52
00:03:38,380 --> 00:03:43,040
Later on we're going to move on to discuss things like one to one or many to many relationships.

53
00:03:43,180 --> 00:03:45,770
But for now this is all we really need to know.

54
00:03:46,090 --> 00:03:50,170
That should be enough for understanding of models and Django and just a general quick overview of what

55
00:03:50,170 --> 00:03:53,110
sequel kind of looks like as a concept.

56
00:03:53,110 --> 00:03:59,410
Now let's show an example of the model class that would go into the model up-I file of your application.

57
00:03:59,410 --> 00:04:04,960
So as I mentioned we have these model classes and the inherits from jingoes builtin models not model

58
00:04:04,960 --> 00:04:05,530
class.

59
00:04:05,530 --> 00:04:11,560
So let's imagine we have a topic model we would have the class topic and then we can say top name is

60
00:04:11,560 --> 00:04:14,360
going to be models not the type of field character field.

61
00:04:14,500 --> 00:04:18,980
And then as arguments you passen these parameters that are constraints so we say it with the max length.

62
00:04:19,020 --> 00:04:25,510
Is this every topic name has to be true or unique or should say and we can set that unique equal to

63
00:04:25,510 --> 00:04:30,850
true then we have let's say another model for a web page and essentially each of these classes is going

64
00:04:30,850 --> 00:04:36,610
to act like a table in your database and then we have category name your L and then we say models a

65
00:04:36,640 --> 00:04:39,370
foreign key the character field the field.

66
00:04:39,370 --> 00:04:40,660
So those are all different fields.

67
00:04:40,810 --> 00:04:42,210
And then you can pass parameters.

68
00:04:42,220 --> 00:04:48,910
But no here how the category equals to models that foreign key and the way pass topic there because

69
00:04:48,910 --> 00:04:54,760
that's going to be a foreign key from the topics model then we can have the web page model where we

70
00:04:54,760 --> 00:04:59,470
have the topic again that's foreign key the name which is a character field and and you are all models

71
00:04:59,470 --> 00:05:00,890
that you are all field.

72
00:05:00,910 --> 00:05:04,750
And if we can then have a specific method to return the actual name.

73
00:05:04,780 --> 00:05:12,460
So if you say Prince web page it grabs the name and after we set up the models we can migrate that database.

74
00:05:12,470 --> 00:05:16,610
So don't worry if you didn't fully understand that code in the next lecture we're going to be coding

75
00:05:16,670 --> 00:05:18,340
and explaining a lot more.

76
00:05:18,770 --> 00:05:22,300
So again when we actually set up the models we can migrate that database.

77
00:05:22,340 --> 00:05:26,750
And this basically lets Shingo do the heavy lifting of creating sequel databases that correspond to

78
00:05:26,750 --> 00:05:27,720
the models we created.

79
00:05:27,740 --> 00:05:30,390
And this is the part that's really cool about Django.

80
00:05:30,410 --> 00:05:32,430
You can just write up those classes.

81
00:05:32,600 --> 00:05:37,250
And then with a very simple command jingoes going to do all the heavy lifting of creating a single database

82
00:05:37,520 --> 00:05:42,910
that corresponds to that model you can do this entire process with just a simple command.

83
00:05:42,930 --> 00:05:48,580
Python managed up-I migrate which we talked about earlier in the course when we got a warning from Django

84
00:05:48,600 --> 00:05:53,130
telling us to do this migrate call but now since we actually are going to work with models we can do

85
00:05:53,130 --> 00:05:54,180
it.

86
00:05:54,200 --> 00:05:59,260
After that we then register the changes to our app shown here are some generic app one.

87
00:05:59,480 --> 00:06:05,540
So we would say Python managed up-I make great creations and then your application name app one first

88
00:06:05,540 --> 00:06:10,480
that whatever you happen to call it we then migrate the database one more time.

89
00:06:10,510 --> 00:06:16,600
I manage that PI migrate and then later on we can actually use the shell from the managed up-I file

90
00:06:16,810 --> 00:06:20,400
to play around with the models and will show you how to do that as well.

91
00:06:20,410 --> 00:06:25,420
So in order to use the more convenient admin interface with the models however we need to register them

92
00:06:25,420 --> 00:06:28,540
to our applications admin that py file.

93
00:06:28,540 --> 00:06:30,390
Now we can do this with the following code.

94
00:06:30,400 --> 00:06:35,710
We say from Jingo that contrib import admen and then from app thought models or whatever app happens

95
00:06:35,710 --> 00:06:37,780
to be name you import the actual models.

96
00:06:37,780 --> 00:06:44,290
Model one model too in those previous examples that would be things like topic or web page day accessed

97
00:06:44,400 --> 00:06:50,380
etc. and then we say admin that site that roadster and you pass in the model as an argument then with

98
00:06:50,390 --> 00:06:54,950
the models in the database created we can use jingoes fantastic adamant interface to interact with the

99
00:06:54,950 --> 00:06:55,710
database.

100
00:06:55,850 --> 00:06:58,590
And this is something that's really cool and awesome about Django.

101
00:06:58,590 --> 00:07:03,830
It's one of the key features the fact that once you set up these databases it's jingoes going to do

102
00:07:03,830 --> 00:07:10,070
all the heavy lifting to create those models into Jeng into databases and you're going to have full

103
00:07:10,110 --> 00:07:15,260
admin interface so it will show you how to log in to the admin interface and then you can read what's

104
00:07:15,260 --> 00:07:16,720
going on in the models.

105
00:07:17,740 --> 00:07:22,640
So in order to fully use the database and the admin we're going to need to create a super user and we

106
00:07:22,640 --> 00:07:24,160
can do this with the following command.

107
00:07:24,410 --> 00:07:30,110
Ice on managed up high create super user and then you're asked to provide a name email and password.

108
00:07:30,110 --> 00:07:34,160
So remember when we actually are cutting through this in the next lecture or the next couple of lectures

109
00:07:34,520 --> 00:07:39,470
that you're going to have to remember or write down the name email and password we provide for this

110
00:07:39,530 --> 00:07:41,910
super user OK.

111
00:07:42,060 --> 00:07:46,140
Then once it's set up the models it's always a good idea to populate them with some test data.

112
00:07:46,140 --> 00:07:50,700
And we're going to be using a library to help with this called faker which produces fake data and will

113
00:07:50,700 --> 00:07:53,220
create a script to do this as well.

114
00:07:53,220 --> 00:07:53,820
All right.

115
00:07:53,820 --> 00:07:56,490
I know I've been talking a lot and we've discussed a ton.

116
00:07:56,490 --> 00:08:00,190
Don't worry if you didn't actually understand how to implement all that stuff.

117
00:08:00,390 --> 00:08:05,970
But hopefully you did get a general idea of how the Django models the databases and the admin interface

118
00:08:05,970 --> 00:08:10,200
kind of connect with each other in the next lecture in the next few lectures were going to be coding

119
00:08:10,200 --> 00:08:13,290
through an example of all of this to really help your understanding.

120
00:08:13,290 --> 00:08:13,830
Okay.

121
00:08:14,070 --> 00:08:14,910
Thanks everyone.

122
00:08:14,970 --> 00:08:19,410
And I'm excited to get to the next lecture because we're really going to see the power of Django coming

123
00:08:19,410 --> 00:08:21,030
up with the models.

124
00:08:21,030 --> 00:08:22,450
Thanks and I'll see you there.
