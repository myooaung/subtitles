WEBVTT
1
00:00:04.970 --> 00:00:10.410
Hello everyone and welcome to the passwords lecture for jingle level 5 and this lecture.

2
00:00:10.540 --> 00:00:15.240
Discuss that general set up to begin getting ready for user authentication on our Web site.

3
00:00:15.460 --> 00:00:20.320
And we'll also talk about passwords in general and also discuss some additional library options for

4
00:00:20.320 --> 00:00:21.380
extra security.

5
00:00:22.600 --> 00:00:27.990
The first thing we need to take care of is setting up our ability to authenticate a user and to do this.

6
00:00:28.000 --> 00:00:33.210
We do use some built in apps and make sure that they are under the installed apps list in settings that

7
00:00:33.240 --> 00:00:33.900
high.

8
00:00:33.910 --> 00:00:38.560
So you're setting up a file of your project member we have that installed apps variable which has a

9
00:00:38.560 --> 00:00:42.380
list of the applications and we've added our own applications to that list.

10
00:00:42.490 --> 00:00:47.820
But in order to do user authentication you need to make sure that these two applications are there jingled

11
00:00:47.850 --> 00:00:53.410
that contrib authorization or a TH And then Jane that country the content types.

12
00:00:53.500 --> 00:00:58.150
And often these are already preloaded in that list for you so you shouldn't need to add anything especially

13
00:00:58.150 --> 00:01:03.400
for higher level of Gengel like in this course reason Gengel one point one zero at this time.

14
00:01:03.400 --> 00:01:05.060
So those two should already be in there.

15
00:01:05.140 --> 00:01:07.090
But if you do need to add them for any reason.

16
00:01:07.120 --> 00:01:12.790
Make sure to migrate your database to actually add those applications OK.

17
00:01:13.030 --> 00:01:16.290
The next thing you to do is make sure we store passwords safely.

18
00:01:16.360 --> 00:01:22.200
And this should go without saying but again never store passwords as plaintext ever.

19
00:01:22.420 --> 00:01:24.940
Never store passwords as plain text ever.

20
00:01:24.940 --> 00:01:27.930
And I said that twice on purpose because you should never do that.

21
00:01:27.940 --> 00:01:32.800
Basically if you're storing the passwords plaintext not only is it vulnerable if someone hacks your

22
00:01:32.800 --> 00:01:34.890
database but it's also a little unethical.

23
00:01:34.960 --> 00:01:39.140
And the fact that basically any Django admin could come in and see the passwords.

24
00:01:39.160 --> 00:01:39.910
All right.

25
00:01:39.910 --> 00:01:47.860
So we're going to do is begin by using the default P.B. KDAF to algorithm which uses an SHK 256 hash

26
00:01:47.980 --> 00:01:53.340
that's already built into Django and this is already quite secure for most applications.

27
00:01:53.340 --> 00:01:56.850
It really requires a massive amount of computing power to crack that hash.

28
00:01:56.850 --> 00:02:01.530
But if you want more security you can upgrade to even more secure hashing algorithms and Gengel makes

29
00:02:01.530 --> 00:02:03.010
it really easy.

30
00:02:03.030 --> 00:02:06.750
So as I mentioned jingly makes that process super easy so we're going to show you how to use the secret

31
00:02:06.750 --> 00:02:13.140
library and also the Argonne to library which I believe was the 2015 winner of some sort of open source

32
00:02:13.200 --> 00:02:16.610
algorithmic hashing contest.

33
00:02:16.650 --> 00:02:18.790
There's more information on the website about that.

34
00:02:18.810 --> 00:02:23.630
But in order to use these two even more secure hashing algorithms in your virtual environment where

35
00:02:23.640 --> 00:02:28.380
you're going to do is Pipp install secret and then Pippin's thought Django and then square brackets

36
00:02:28.440 --> 00:02:32.930
Argan to inside of that and the pending on your jingle version you may already have these installed

37
00:02:32.940 --> 00:02:37.170
so it may just say something like are going to already found etc..

38
00:02:37.170 --> 00:02:38.640
Ok so I'll show you how to do that.

39
00:02:38.640 --> 00:02:44.050
In case you want to super secure hashing algorithm and inside of settings that pilot we're going to

40
00:02:44.050 --> 00:02:48.940
do is pass in the list the password hackers and you pass them in the order you want to try them.

41
00:02:48.940 --> 00:02:55.600
So if for some reason you don't have library support maybe you uploaded your Web site onto a server

42
00:02:55.600 --> 00:02:58.060
that's hosting and you forgot to install a B script.

43
00:02:58.060 --> 00:03:02.500
Well don't worry it's not going to give an error it just will skip the script and then eventually fall

44
00:03:02.500 --> 00:03:09.140
back to the original hashing algorithm that's built into Django and that sometimes users will also try

45
00:03:09.140 --> 00:03:12.920
to use a very weak password such as the word password or password one two three.

46
00:03:13.100 --> 00:03:17.750
You can also add in validator options to prevent a user from doing that and it will keep things simple

47
00:03:17.750 --> 00:03:19.820
for now and only require a minimum length.

48
00:03:19.920 --> 00:03:25.010
We can add in all sorts of validators like you must use a combination of numbers letters special characters

49
00:03:25.310 --> 00:03:26.940
minimum lengths etc..

50
00:03:27.730 --> 00:03:32.020
Now though we've covered conceptually what the processes for setting up a pass through Django that's

51
00:03:32.020 --> 00:03:36.460
actually code through those steps to set up that password system and then in future lecture's what we're

52
00:03:36.460 --> 00:03:40.660
going to do is add to this by setting up user models in our registration forms.

53
00:03:40.720 --> 00:03:45.460
I'm going to hop over to the Adam text editor and I'm also going to show you a Web site to give you

54
00:03:45.460 --> 00:03:48.310
an idea of what the hashing process actually looks like.

55
00:03:48.310 --> 00:03:49.010
Let's get to it.

56
00:03:50.340 --> 00:03:50.650
All right.

57
00:03:50.670 --> 00:03:56.580
Before we actually get started with programming and Django our password application what I wanted to

58
00:03:56.580 --> 00:04:02.090
show you is Brinkley talk a little bit more about what essay a hash looks like.

59
00:04:02.100 --> 00:04:07.950
So here I am at a Web site that has this little hash calculator and if you type in some data here such

60
00:04:07.950 --> 00:04:09.030
as the letter A.

61
00:04:09.240 --> 00:04:13.800
You can calculate the hash and it returns back the actual hash that matches up with this particular

62
00:04:13.800 --> 00:04:14.610
piece of data.

63
00:04:14.610 --> 00:04:19.800
You notice that even if we change a tiny bit maybe a dots I will get pretty much a totally different

64
00:04:19.800 --> 00:04:20.210
hash.

65
00:04:20.220 --> 00:04:23.200
If you click it again it looks totally different.

66
00:04:23.220 --> 00:04:25.820
And the idea is there's no discernible pattern here.

67
00:04:25.890 --> 00:04:30.780
Even if you add in just a little bit of data s Ha again a stands for secure hash algorithm was actually

68
00:04:30.780 --> 00:04:36.930
designed by the National Security Agency or the NSA and it falls more in their mathematics and actual

69
00:04:36.930 --> 00:04:37.580
programming.

70
00:04:37.590 --> 00:04:42.760
Essentially what it is it's a cryptographic hash function that can run on digital data.

71
00:04:42.810 --> 00:04:48.510
And the way it works is you pass your data it passes through the algorithm it gets converted to a hash

72
00:04:48.570 --> 00:04:53.100
and then you can use this hash to compare to other IMPA hash data.

73
00:04:53.100 --> 00:04:59.580
So what the user is going to do is they will input their password and we will be saving the hash for

74
00:04:59.580 --> 00:05:00.120
that.

75
00:05:00.390 --> 00:05:05.850
So if someone goes to a database and happens to crack it open and they steal all our data well they

76
00:05:05.850 --> 00:05:07.210
don't steal the user passwords.

77
00:05:07.320 --> 00:05:09.180
They only steal the user hash.

78
00:05:09.210 --> 00:05:13.560
And there's even more ways of securing this hash you can add things like salt to it.

79
00:05:13.590 --> 00:05:18.450
So there's a lot of things you can do if a hash for instance a common practice is if you want to know

80
00:05:18.540 --> 00:05:25.140
if a piece of data was tampered with at all you would have a known hash value of the original data and

81
00:05:25.140 --> 00:05:26.930
then an expected hash value there.

82
00:05:26.970 --> 00:05:29.250
You could check what you believed to be tampered.

83
00:05:29.250 --> 00:05:30.740
Run it through the hash algorithm.

84
00:05:30.840 --> 00:05:35.290
And if the hashes are any different than you know someone actually modified or tampered with that data.

85
00:05:35.460 --> 00:05:40.680
And again other key aspects of cryptographic hash functions is collision resistance.

86
00:05:40.830 --> 00:05:45.430
We want to make sure that no two pieces of data would come up with the same hash.

87
00:05:45.450 --> 00:05:51.990
So that's also a key part of this methodical function in all of this falls a lot more under math than

88
00:05:52.440 --> 00:05:55.890
computer science in general or programming it's really heavy on math.

89
00:05:55.980 --> 00:06:00.610
Now definitely computer science and math overlap and huge amounts so don't get me wrong.

90
00:06:00.630 --> 00:06:07.230
This definitely is a computer science topic but the actual way the hash works falls a lot more in their

91
00:06:07.230 --> 00:06:08.140
mathematics.

92
00:06:08.160 --> 00:06:10.910
So if you're interested in that definitely check out the Wikipedia pages.

93
00:06:11.070 --> 00:06:15.750
They're super interesting topics but I just wanted to point that out that when we actually look at our

94
00:06:15.750 --> 00:06:19.750
user data using Django admen we're going to see something that looks more like this.

95
00:06:19.800 --> 00:06:22.660
And then even more so as far as security.

96
00:06:22.680 --> 00:06:27.120
A lot of this will be sensor to Django adamant interface will just show a bunch of dots there.

97
00:06:27.120 --> 00:06:31.450
So if you don't trust a jingle admin will they won't be able to get the hash back either.

98
00:06:31.470 --> 00:06:36.740
And also the whole point is you can't come from this hash and get back the data at least not easily.

99
00:06:36.810 --> 00:06:37.170
OK.

100
00:06:37.230 --> 00:06:40.490
So let's hop over to the Adam text editor and start working on this.

101
00:06:42.080 --> 00:06:42.400
All right.

102
00:06:42.410 --> 00:06:50.150
So Adam what I'm going to do is start a new folder and there are jingle lectures and we'll call it Django.

103
00:06:50.440 --> 00:06:57.620
Level five enter in I'm going to open up my terminal here and then I'm also going to remember to activate

104
00:06:57.680 --> 00:06:58.750
my virtual environment.

105
00:06:58.810 --> 00:07:04.330
In my case it was called My Django ENP enter and activate that virtual environment.

106
00:07:04.490 --> 00:07:12.920
OK so now that my virtual environments activated lets CD into a jingle level 5 and then what I'm going

107
00:07:12.920 --> 00:07:23.560
to do is call the Django Django bash adamant tool and say start project and we'll call this project

108
00:07:23.560 --> 00:07:28.690
learning underscore users because let's face it we're going to be doing learning about users and user

109
00:07:28.690 --> 00:07:33.370
authentication with Django and then we'll also start an application and we can call that application

110
00:07:33.550 --> 00:07:37.350
basic app just like we've been doing for a few of these projects.

111
00:07:37.420 --> 00:07:40.720
So let's go to Jingle Bash.

112
00:07:40.720 --> 00:07:45.550
Actually let's see into that folder first CD to learning users.

113
00:07:45.550 --> 00:07:53.920
Now call it Django dash Atman and say start app and then we'll call it basic underscore app enter in

114
00:07:53.940 --> 00:07:55.370
that's sort of application.

115
00:07:55.390 --> 00:08:02.230
Now if I expand this I see my learning users see my basic app etc. and what I want to do first is go

116
00:08:02.230 --> 00:08:05.560
to settings that pie were actually going to be working at this a quite a bit.

117
00:08:05.560 --> 00:08:10.570
For this particular section of the course a lot more than normal but we're going to scroll down here

118
00:08:11.020 --> 00:08:16.060
pass all of this stuff and then here under installed apps this is where you want to check that you make

119
00:08:16.060 --> 00:08:20.110
sure you have Django that contribute Addleman already there.

120
00:08:20.110 --> 00:08:25.120
You also want to make sure that you have Django contrib Auth. for authorization are there and then Genger

121
00:08:25.120 --> 00:08:27.220
that contrib content types.

122
00:08:27.220 --> 00:08:34.420
If you're using Django 1.1 0 or above you should already have these just based off the start project

123
00:08:34.600 --> 00:08:35.800
in the installed apps.

124
00:08:35.810 --> 00:08:39.520
If for some reason you don't have them feel free to add the strings in there.

125
00:08:39.580 --> 00:08:46.450
And what we also want to do is add in our basic applications all say basic app and then save it and

126
00:08:46.450 --> 00:08:51.400
again whenever we add something to installed apps you want to make sure that you actually run Python

127
00:08:51.820 --> 00:08:59.780
managed up high migrate it enter they'll make sure that those applications are registered to the entire

128
00:08:59.780 --> 00:09:03.940
project and you should see how much stuff like this and that's applying all those changes.

129
00:09:03.980 --> 00:09:12.100
And then we'll also want to say Python managed up-I make migrations to your app schulle application

130
00:09:12.100 --> 00:09:13.650
in this case its basic app.

131
00:09:13.770 --> 00:09:15.280
So we'll run that good if it doesn't.

132
00:09:15.280 --> 00:09:21.970
The technique changes and then safe just say Python is up-I make or migrate and it should say no migration

133
00:09:22.000 --> 00:09:22.460
to apply.

134
00:09:22.480 --> 00:09:24.400
But I always do that just to say safe.

135
00:09:24.490 --> 00:09:24.720
OK.

136
00:09:24.730 --> 00:09:25.840
So those are the installed apps.

137
00:09:25.840 --> 00:09:27.250
Make sure you have those there.

138
00:09:27.280 --> 00:09:31.560
And as I mentioned we never want to store passwords in as plain text ever period.

139
00:09:31.660 --> 00:09:36.930
So we're going to be doing is showing you how to actually passen the different algorithms for hashing

140
00:09:39.140 --> 00:09:44.140
and in order to use some of the more advanced algorithms we actually need to install those libraries.

141
00:09:44.270 --> 00:09:49.020
So these libraries are so popular that Django Cremer supports them almost out of the box and sometimes

142
00:09:49.020 --> 00:09:54.450
that may even already be installed when you install Django depending on what distribution you're using.

143
00:09:54.590 --> 00:09:56.170
But just to make sure we have them.

144
00:09:56.210 --> 00:09:58.200
The first one is going to be the B script.

145
00:09:58.220 --> 00:10:09.170
So say Pipp install B script so that's b c r y p t it will be crypt enter and then that should all be

146
00:10:09.190 --> 00:10:10.110
crypt for you.

147
00:10:10.250 --> 00:10:17.450
So I'm going to jump forward in time until that's finished installing OK that just finished for me overall

148
00:10:17.450 --> 00:10:22.160
for my computer it took about 30 seconds so it wasn't that long or probably even less that maybe like

149
00:10:22.160 --> 00:10:27.340
10 seconds and then the next minute on a stall is pipin stall and I will say Django.

150
00:10:27.470 --> 00:10:34.940
And then in brackets you want to say are gone too close brackets enter and then it's also going to grab

151
00:10:34.940 --> 00:10:39.470
them and you can see it actually I believe this one was already installed so it should say requirements

152
00:10:39.470 --> 00:10:40.560
already satisfied.

153
00:10:40.670 --> 00:10:45.560
So yes we already had a lot of these requirements satisfied so you may find that as well but there we

154
00:10:45.560 --> 00:10:46.050
go.

155
00:10:46.340 --> 00:10:49.640
OK so now we have those two ready to go.

156
00:10:49.700 --> 00:10:54.980
Then the next step is inside of settings that pi we can pass in a list of the password hashes we want

157
00:10:54.980 --> 00:10:55.890
to try.

158
00:10:55.940 --> 00:11:00.920
So anywhere in the settings up PI file although I like to keep everything that has to do with passwords

159
00:11:00.920 --> 00:11:04.610
down here we're going to do some stuff.

160
00:11:04.610 --> 00:11:07.230
So I'm going to collapse this victory tree.

161
00:11:07.250 --> 00:11:12.750
And there's actually usually a link here to more information about authorization passwords and validation

162
00:11:13.280 --> 00:11:14.570
jingo documentation.

163
00:11:14.570 --> 00:11:15.820
You heard Dana say it a million times.

164
00:11:15.830 --> 00:11:16.910
It's fantastic.

165
00:11:16.910 --> 00:11:18.690
So definitely check out those links.

166
00:11:18.800 --> 00:11:24.270
But we're going to create a new variable called Password underscore Ascher's.

167
00:11:24.290 --> 00:11:32.370
All caps and this or we actually pass them what we want to hash with and then we'll put in some brackets

168
00:11:32.370 --> 00:11:38.150
here and then this is where we actually pass in a string of what all the password hashing looks like.

169
00:11:38.250 --> 00:11:43.640
So the basic ones the default ones go like this or say jingo contrib.

170
00:11:43.990 --> 00:11:44.470
A.

171
00:11:44.490 --> 00:11:48.580
Th for authorization dot Hampshires dot.

172
00:11:48.600 --> 00:11:57.960
And then the name of the actual password hasher algorithm and the built in ones are a P B K D F 2 and

173
00:11:57.960 --> 00:12:00.820
then password hasher.

174
00:12:00.890 --> 00:12:03.040
So that's whip's Asher.

175
00:12:03.470 --> 00:12:04.470
So that's one of them.

176
00:12:04.550 --> 00:12:09.070
And then the other one is with a higher level of bit.

177
00:12:09.350 --> 00:12:11.640
And then you can pass in the argon ones as well.

178
00:12:11.640 --> 00:12:16.130
Now this is a lot of strings to be typing so to save some time I'm actually going to just copy and paste

179
00:12:16.130 --> 00:12:18.270
all of these from the notes.

180
00:12:18.320 --> 00:12:21.230
So I would advise you to do the same.

181
00:12:21.260 --> 00:12:22.330
Or you can definitely check this out.

182
00:12:22.330 --> 00:12:26.420
If you take the link to documentation it actually has all of these as well written out for you as an

183
00:12:26.420 --> 00:12:27.430
example already.

184
00:12:27.500 --> 00:12:31.730
But basically what's going to happen is we're going to try with our most powerful hasher first the art

185
00:12:31.730 --> 00:12:33.050
on to password hasher.

186
00:12:33.200 --> 00:12:38.060
If for some reason we don't have an install on the server then we'll try with the secret password hasher

187
00:12:38.320 --> 00:12:42.550
if for some reason the SSA 256 bit version of secret doesn't work.

188
00:12:42.650 --> 00:12:45.460
Maybe you try just a normal script that still doesn't work.

189
00:12:45.540 --> 00:12:48.820
They'll try the built in this one that's those and work done well.

190
00:12:48.830 --> 00:12:49.930
Try this one as well.

191
00:12:50.060 --> 00:12:54.350
So basically have all these layers of password hashing security so you fall back on.

192
00:12:54.690 --> 00:12:59.110
OK so the next part is is password validator.

193
00:12:59.110 --> 00:13:04.840
So if we scroll down here we already see we have a lot of password validators ready to use for us so

194
00:13:04.840 --> 00:13:07.390
we can say user attributes similarity.

195
00:13:07.480 --> 00:13:11.310
And basically what that does is you can't use your username inside your password.

196
00:13:11.320 --> 00:13:16.710
So if your user name is Jose you can't use something like Jose's special password as your password.

197
00:13:16.750 --> 00:13:18.740
Things like common password validators.

198
00:13:18.850 --> 00:13:21.570
Those are checks for common passwords like one two three.

199
00:13:21.640 --> 00:13:27.910
Pass the word password etc. numeric password validators to make sure has numbers minimum length etc.

200
00:13:28.000 --> 00:13:32.770
and you can check the documentation for lists and examples of all the various types of password validators

201
00:13:32.920 --> 00:13:38.410
you can manipulate or ask for if you want to super secure site and you don't really trust your users

202
00:13:38.410 --> 00:13:39.700
to make good passwords.

203
00:13:39.700 --> 00:13:44.950
Definitely use password validators a lot sometimes if you use too many password validators they can

204
00:13:44.950 --> 00:13:46.350
be really annoying.

205
00:13:46.360 --> 00:13:50.380
I'm sure you've been to one of those Web sites where you have to change her password every six months

206
00:13:50.430 --> 00:13:54.910
and has to have some crazy combination of special characters numbers and letters.

207
00:13:54.970 --> 00:13:59.680
That's totally fine if you want a super secure site but if you want your site to be at least a little

208
00:13:59.680 --> 00:14:03.180
user friendly then don't go overboard on these password validators.

209
00:14:03.190 --> 00:14:09.040
Really depends on where you want to balance yourself between user friendliness and security.

210
00:14:09.040 --> 00:14:11.530
OK so let me show you an example of what this actually looks like.

211
00:14:11.530 --> 00:14:17.230
We can see here that we have a list of what are essentially dictionaries where the name Rocchi relates

212
00:14:17.230 --> 00:14:19.930
to the actual past revalidation that you're using.

213
00:14:19.930 --> 00:14:24.720
So for example here we have name and then the past revalidation we're using here is minimum length.

214
00:14:24.790 --> 00:14:29.370
So we end up doing is adding in other key to this dictionary.

215
00:14:29.560 --> 00:14:31.440
And the key is options.

216
00:14:31.720 --> 00:14:36.580
And then inside of that you nest in another dictionary of all the options that are available to you

217
00:14:36.880 --> 00:14:41.950
for the minimum length evaluator and you can look at the documentation for the various options.

218
00:14:41.950 --> 00:14:44.270
But one of the most common ones that minimum length.

219
00:14:44.320 --> 00:14:49.090
The key here is one of the options is Min underscore length and then you just pasan a number as the

220
00:14:49.090 --> 00:14:52.030
value of the minimum number of characters length.

221
00:14:52.030 --> 00:14:56.830
So in this case let's say it needs to have at least nine characters to be a password so that we can

222
00:14:56.830 --> 00:15:00.040
save that and there we have our password validators.

223
00:15:00.040 --> 00:15:01.230
Again lots of options.

224
00:15:01.240 --> 00:15:05.830
If you scroll up this original link right here it takes you to the past revalidation page where they

225
00:15:05.830 --> 00:15:10.890
show you a bunch of options you can use so that's really all we need to do for now as far as setting

226
00:15:10.890 --> 00:15:14.800
up our password hashing and getting past revalidation.

227
00:15:14.910 --> 00:15:18.080
Later I'll show you how to deal with passwords as far as the actual models.

228
00:15:18.210 --> 00:15:22.590
But what I want to do is just a little bit of setup for future lectures of the section of the course

229
00:15:22.980 --> 00:15:27.390
is our template directory or extatic directory and something we haven't talked about yet.

230
00:15:27.390 --> 00:15:28.730
The immediate directory.

231
00:15:28.950 --> 00:15:34.530
So let's scroll back up here to where it says base directory and we're going to add in three directories

232
00:15:34.650 --> 00:15:37.290
or three variables really template.

233
00:15:37.460 --> 00:15:44.190
And that's going to be that path that join and we're going to join the base the rectory with templates.

234
00:15:44.190 --> 00:15:45.150
We've done this before.

235
00:15:45.150 --> 00:15:50.530
So save that and then scroll down and make sure where it says templates.

236
00:15:50.590 --> 00:15:55.850
The I.R.S. also add in what you just made the template or save that.

237
00:15:55.930 --> 00:15:59.500
And if I expand my tree I actually want to make sure they have the templates folder.

238
00:15:59.650 --> 00:16:07.750
So under the top level learning users here and lines create a new folder and we call it templates enter.

239
00:16:07.930 --> 00:16:12.730
And I'm also going to create two more folders what we've seen before when we haven't we've seen before

240
00:16:12.730 --> 00:16:18.550
that we added a static folder knows to hold things like RC C Ss our javascript static files it don't

241
00:16:18.550 --> 00:16:20.920
change images for your web site etc..

242
00:16:21.250 --> 00:16:27.670
So we have static and templates and then another common folder you'll have here is called media and

243
00:16:27.670 --> 00:16:33.020
the difference between the static folder and the media folder is you'll want to separate content that

244
00:16:33.020 --> 00:16:38.680
static that you provided for your web site versus content that may be static like an image that the

245
00:16:38.680 --> 00:16:40.180
user provided for the Web site.

246
00:16:40.180 --> 00:16:44.860
So imagine that you're creating a user profile and they can upload a profile picture.

247
00:16:45.070 --> 00:16:49.490
Well that picture should be saved under that media folder instead of under the static folder.

248
00:16:49.570 --> 00:16:53.680
So static is stuff that belongs to you as the website creator administrator.

249
00:16:53.710 --> 00:16:58.150
Media is going to be stuff that more or less belongs to the users.

250
00:16:58.170 --> 00:17:00.330
So let's set that up as well.

251
00:17:00.330 --> 00:17:04.740
So if we scroll back here to are based on history and our template there victory we're going to do a

252
00:17:04.740 --> 00:17:07.660
very similar process for the static.

253
00:17:07.650 --> 00:17:12.870
Underscore DJR that's going to be a path that join.

254
00:17:13.050 --> 00:17:18.560
And here we're going to call again the base directory and joined out with static.

255
00:17:18.750 --> 00:17:25.610
And then we'll do the same thing for media underscored the IRR and said equal to OS path.

256
00:17:26.350 --> 00:17:33.890
That join a base directory media and if you're ever having any issues with settings as you're going

257
00:17:33.890 --> 00:17:35.160
through this section of the course.

258
00:17:35.300 --> 00:17:39.290
Definitely check out the actual notes where everything's already filled out for you and you can run

259
00:17:39.290 --> 00:17:43.690
it and compare it to scroll all the way back to the bottom because there's a couple of more things to

260
00:17:43.690 --> 00:17:48.500
add here as far as variables that jingoes going to be looking for we have the static or else that's

261
00:17:48.500 --> 00:17:49.290
ready to go.

262
00:17:49.430 --> 00:17:53.880
But we want to do is add in a static files directory.

263
00:17:54.200 --> 00:18:04.720
So say static underscore wups static files underscore the IRS and then said equal to a list with just

264
00:18:04.720 --> 00:18:07.230
a static directory.

265
00:18:08.300 --> 00:18:15.640
And then we also want the basically the same thing for those media directories so say media underscore

266
00:18:15.760 --> 00:18:26.770
root is equal to media underscore Diyar and then we'll also say media underscore your L is equal to

267
00:18:27.110 --> 00:18:31.270
well say slash media slash just like we did for static.

268
00:18:31.310 --> 00:18:31.860
OK.

269
00:18:31.990 --> 00:18:37.210
Save that and we'll hit up the settings up high file one more time when we start talking about logons

270
00:18:37.210 --> 00:18:40.400
because we need to set up a log in your all in the settings up-I file.

271
00:18:40.450 --> 00:18:41.980
But for now we're ready to go.

272
00:18:41.980 --> 00:18:46.720
So hopefully you learned how to select it for hashing algorithms for your passwords and set up in your

273
00:18:46.720 --> 00:18:48.150
settings up by file.

274
00:18:48.160 --> 00:18:51.610
Thanks everyone and I'll see at the next lecture where we begin talking about users.
