WEBVTT
1
00:00:04.760 --> 00:00:10.430
Hello everyone and welcome to part three O.P. project solutions lecture and this lecture we're going

2
00:00:10.430 --> 00:00:14.370
to be coding through an example solution to the card wargame project.

3
00:00:14.660 --> 00:00:16.870
Let's hop to the editor and get started.

4
00:00:17.360 --> 00:00:23.180
OK here we are at the file so let's scroll down and get started with the object oriented programming

5
00:00:23.210 --> 00:00:25.200
of the tech class.

6
00:00:25.220 --> 00:00:32.110
So the first thing we always need in a class is the in it special method to initialize this and it will

7
00:00:32.110 --> 00:00:34.280
always take in self.

8
00:00:34.480 --> 00:00:39.160
And just to make things obvious I'll add a print statement in here usually don't have print statements

9
00:00:39.160 --> 00:00:48.360
like this but we'll just add it anyways and we'll say creating new ordered deck and then what I'm going

10
00:00:48.360 --> 00:00:58.620
to do is say self got all cards is equal to in what I could do is have the logic be inside the initialization

11
00:00:58.950 --> 00:01:01.640
or had the logic be outside the initialization.

12
00:01:01.800 --> 00:01:11.200
So what I mean by that is I'm going to have a global variable here called my cards and set that equal

13
00:01:11.200 --> 00:01:22.070
to a list comprehension that is tuple for the suit and the rank of the cards and say for S and suits

14
00:01:22.100 --> 00:01:26.540
for or sweets for r in rings.

15
00:01:26.560 --> 00:01:27.760
So that's one way to do this.

16
00:01:27.760 --> 00:01:30.030
You could have also done this with a nested for loop.

17
00:01:30.070 --> 00:01:41.600
So just walk through that example you could set something like for are in ranks for s in suites and

18
00:01:41.600 --> 00:01:53.250
then have some you could say my cards pens s are a tuple there with my cards being equal to some blank

19
00:01:53.250 --> 00:01:53.990
list.

20
00:01:54.000 --> 00:01:57.680
So this is the exact same thing as this.

21
00:01:57.690 --> 00:02:01.640
So keep that in mind if you need to pause a screen and kind of break down the list comprehension and

22
00:02:01.650 --> 00:02:03.140
compare it to this nested for loop.

23
00:02:03.300 --> 00:02:04.790
That's all that's happening here.

24
00:02:04.980 --> 00:02:10.210
But I could then pass in my cards over here during the initialization step.

25
00:02:10.230 --> 00:02:18.170
But instead of doing that I'm just going to grab the list comprehension this and then put that in here

26
00:02:19.260 --> 00:02:19.590
OK.

27
00:02:19.590 --> 00:02:22.870
So that actually creates the deck and it all happens inside the class.

28
00:02:22.900 --> 00:02:27.450
Again you don't have to do it this way there's many ways to actually do this but we'll just create that

29
00:02:27.480 --> 00:02:27.790
here.

30
00:02:27.790 --> 00:02:35.510
So that's a new order deck if I want to shuffle the deck I'll pass self.

31
00:02:35.690 --> 00:02:39.560
And then let's add in the print statement just to make things really obvious since this is a project

32
00:02:39.560 --> 00:02:40.550
to learn with.

33
00:02:40.690 --> 00:02:50.710
It will say shuffling deck and I will call the shuffle function on that list which is self-taught all

34
00:02:50.790 --> 00:02:54.230
carts and then I also want to be able to split the cards in half.

35
00:02:54.230 --> 00:03:03.710
So I will create a new method split in half that takes in self and then what this is going to do is

36
00:03:03.710 --> 00:03:08.420
going to say return self are all cards.

37
00:03:08.620 --> 00:03:15.310
And I know there's 52 cards in a deck so I need to go from the beginning all the way to index 26 up

38
00:03:15.310 --> 00:03:21.090
to not including it and then solve all cards from 26 onwards.

39
00:03:21.100 --> 00:03:25.070
So that will return a tuple of the split cards.

40
00:03:25.120 --> 00:03:27.380
Up next is the hand class.

41
00:03:27.430 --> 00:03:31.810
So this is the hand class and each player is going to have a hand and they can add or remove cards from

42
00:03:31.810 --> 00:03:32.700
that hand.

43
00:03:33.070 --> 00:03:42.560
So it's going to happen here because I will initialize this with self and then cards and then I will

44
00:03:42.560 --> 00:03:47.510
say self-talk cards is equal to cards.

45
00:03:47.630 --> 00:03:55.510
And then let's also have a method here a special method for printing out the hand so pasand self.

46
00:03:55.510 --> 00:03:57.860
And let's return using print formatting.

47
00:03:58.670 --> 00:04:05.290
Contains link cards and will say that format.

48
00:04:05.290 --> 00:04:08.710
And let's return the length of self-talk cards.

49
00:04:08.740 --> 00:04:11.980
That way I know how many cards is in the player's hand.

50
00:04:12.070 --> 00:04:14.060
That's what's going to happen if I ever print a hand.

51
00:04:14.200 --> 00:04:18.530
It's just going to report back how many cards that player has in their hands.

52
00:04:18.550 --> 00:04:21.440
Then finally I want the two methods that are add or remove.

53
00:04:21.610 --> 00:04:27.740
So create an add method which takes in self and then the added cards.

54
00:04:27.760 --> 00:04:35.840
So it's going to be a list and I'm going to say self-talk cards dots and I want to not append but extend

55
00:04:35.850 --> 00:04:38.830
my list with the added cards.

56
00:04:38.840 --> 00:04:42.680
So in the middle of the table there are the cards that the computer played the cards that you played

57
00:04:43.010 --> 00:04:43.720
will be a list.

58
00:04:43.730 --> 00:04:45.890
And then we will extend that list.

59
00:04:46.100 --> 00:04:48.040
Maybe you decided to do it a different way.

60
00:04:48.110 --> 00:04:50.050
That's totally fine too.

61
00:04:50.120 --> 00:04:56.000
And then we'll have a method called remove card that will just be self and this will pop off the top

62
00:04:56.000 --> 00:05:03.760
card here or at the very last card I should say cards the pop and the.

63
00:05:03.880 --> 00:05:05.690
Now we have the class player.

64
00:05:05.770 --> 00:05:07.710
So let's play on that.

65
00:05:07.720 --> 00:05:15.360
First off I want to initialize the player so we'll say underscore underscore in it's self and a player

66
00:05:15.360 --> 00:05:24.920
should have a name and they will also have a hand and then it will say self but name is equal to name.

67
00:05:25.130 --> 00:05:35.100
And I will also say soft hand is equal to and let's create some more methods here.

68
00:05:35.120 --> 00:05:43.810
Or create a play card method and the play card method is going to have a variable called drawn card

69
00:05:44.320 --> 00:05:48.700
which is just self to hand the remove card.

70
00:05:49.730 --> 00:05:55.270
So remember remove card from that hand objects are the players going to get a hand object.

71
00:05:55.370 --> 00:06:00.470
When we actually create it I can call remove card and add a card from the hand object which in my case

72
00:06:00.470 --> 00:06:02.550
just solved by hand.

73
00:06:02.590 --> 00:06:07.210
So this is sometimes a little bit confusing because he's kind of see these multiple calls here but it's

74
00:06:07.210 --> 00:06:09.930
just self hand that remove card.

75
00:06:10.180 --> 00:06:13.310
And then let's have a print statement so we really know what's going on here.

76
00:06:14.290 --> 00:06:20.460
I'll say bracket's has placed brackets.

77
00:06:20.490 --> 00:06:25.250
And then let's say that format and I will say self-taught names.

78
00:06:25.260 --> 00:06:30.200
So that's the player name has placed and then we'll put in the drawn card.

79
00:06:30.210 --> 00:06:36.320
So whenever I play a card it will say player has placed and then whatever card I drew and then we can

80
00:06:36.320 --> 00:06:42.080
also prints in the line here so that we are canceling or printing so much stuff doesn't actually get

81
00:06:42.080 --> 00:06:43.460
stuffed with a bunch of commands.

82
00:06:43.460 --> 00:06:45.020
We can read it better.

83
00:06:45.100 --> 00:06:51.420
And and finally I want to return the card I drew just the drawn card.

84
00:06:51.520 --> 00:06:56.310
The next method I want is some method to remove the war card.

85
00:06:56.490 --> 00:07:04.930
So say remove underscore war cards self and then what's going to happen here is I'll have a local variable

86
00:07:04.930 --> 00:07:12.540
called War cards said equal to an empty list and I'll say for x in range 3.

87
00:07:12.650 --> 00:07:20.050
So both the computer player and you pass two cards and they're the same rank that we have war.

88
00:07:20.050 --> 00:07:23.950
So I'm going to need something to actually move the three top or cards.

89
00:07:24.070 --> 00:07:37.420
So I'll say for x in range 3 or cards pens self hands cardstock hot.

90
00:07:37.590 --> 00:07:39.180
So it's actually happening here.

91
00:07:39.180 --> 00:07:45.930
Well if I match with the computer I need to grab those war cards and I will grab them as a list and

92
00:07:45.930 --> 00:07:51.230
return them as a list then I'll say for x in range 3 which basically means for these three cards.

93
00:07:51.480 --> 00:07:57.280
Take the war cards and append the self-taught handout cards that pop and we could have also done that

94
00:07:57.280 --> 00:07:58.570
with remove.

95
00:07:58.570 --> 00:07:59.290
It's really up to you.

96
00:07:59.290 --> 00:08:04.350
There's so many ways to do this that you shouldn't feel obligated to do it exactly like I did it.

97
00:08:04.600 --> 00:08:07.570
So here we see hands hand that cards that pop.

98
00:08:07.610 --> 00:08:11.980
But have also done is just remove card which is self-taught carts that pop.

99
00:08:11.980 --> 00:08:19.060
So again not cards that pop that should be the exact same thing as me saying remove card so I could

100
00:08:19.060 --> 00:08:25.050
have done this remove card.

101
00:08:25.240 --> 00:08:26.760
That's the exact same thing.

102
00:08:26.790 --> 00:08:28.950
Choose whatever makes most sense to you.

103
00:08:28.980 --> 00:08:33.120
Usually you'd probably want to actually take advantage of the method but we'll leave it the other way

104
00:08:33.120 --> 00:08:39.500
for now in case this may be a little more clear for the user but it's really up to you.

105
00:08:39.540 --> 00:08:49.360
And then I also want to have a method here called still has cards and all this does.

106
00:08:49.360 --> 00:08:55.520
Now we can add an some documentation here or a docstring.

107
00:08:55.690 --> 00:08:57.230
This will return true.

108
00:08:58.250 --> 00:09:06.020
If player still has cards left because remember when a player runs out of cards then the game's over.

109
00:09:06.020 --> 00:09:15.050
So I'm going to do this return the length of self-taught hand that cards whoops that should be H.

110
00:09:17.100 --> 00:09:21.750
Is not equal to 0.

111
00:09:21.770 --> 00:09:25.220
So just return true if the player still has cards left.

112
00:09:25.670 --> 00:09:26.330
OK.

113
00:09:26.330 --> 00:09:28.130
So we just create a whole bunch of functions.

114
00:09:28.130 --> 00:09:30.120
Let's quickly review all of them.

115
00:09:30.120 --> 00:09:36.920
So starting from the very top of the deck number we have these to help release what I do here is I create

116
00:09:36.980 --> 00:09:40.130
this object self to all cards.

117
00:09:40.130 --> 00:09:43.890
And that's just this giant list of all the cards in the deck.

118
00:09:44.000 --> 00:09:48.200
Then I can shuffle all cards in the deck and then I can split that second half.

119
00:09:48.320 --> 00:09:52.850
And note when I split the second half I actually return a tuple which means I can use tuple and packing

120
00:09:53.130 --> 00:09:58.460
to grab the first half a deck and then the second half of the shuffled deck then I have the hand class.

121
00:09:58.490 --> 00:10:01.280
Now what this does is it just reports back.

122
00:10:01.280 --> 00:10:07.420
How many cards I have here in this hand that I can add cards to the hand which is extending extension

123
00:10:07.430 --> 00:10:11.610
excuse me and then remove card which pops up card off.

124
00:10:11.660 --> 00:10:16.780
Then I have the player class the player has a name and one of those hand objects they can play a card

125
00:10:16.820 --> 00:10:22.730
which means they just remove a card and it tells you what card they place down and then it returns that

126
00:10:22.730 --> 00:10:29.720
drawing card will never move or cards which means if I have war present then I will call range 3 and

127
00:10:29.720 --> 00:10:36.290
remove those cards again I can use cards that pop or I can just call that remove card set to whatever

128
00:10:36.300 --> 00:10:42.680
is more clear to that I have the left still has courage which just returns true if the player still

129
00:10:42.680 --> 00:10:43.850
has cards.

130
00:10:43.850 --> 00:10:49.280
So now let's actually say welcome Tuor and begin to use all three classes to do this.

131
00:10:49.280 --> 00:10:53.480
So let's kind of mark down what we have to do first to do this.

132
00:10:53.480 --> 00:11:00.940
What I have to do is create a new deck and split it in half.

133
00:11:00.960 --> 00:11:02.600
So let's do that.

134
00:11:02.650 --> 00:11:11.330
That should be either create so create a new deck object set it equal to the and let's zoom in here

135
00:11:11.330 --> 00:11:14.460
a little more so we can see what's going on or towards the bottom.

136
00:11:14.690 --> 00:11:15.890
Let's make some space for us.

137
00:11:15.890 --> 00:11:21.350
So I create a deck object and I'm going to call the shuffle method on that deck and that's in place

138
00:11:21.980 --> 00:11:27.740
and then I'm going to use tuple in packing to grab two halves of the deck half one half two and that's

139
00:11:27.740 --> 00:11:31.800
going just going to be split in half.

140
00:11:31.970 --> 00:11:40.450
And then I want to create both players create the computer player which is going to be a player objects

141
00:11:41.290 --> 00:11:43.370
called computer.

142
00:11:43.580 --> 00:11:49.520
And then it's going to accept the hand object made out of the first half of the cards.

143
00:11:49.730 --> 00:11:53.650
And then for the human player we want them to provide their name.

144
00:11:54.050 --> 00:11:55.520
So we'll say input.

145
00:11:55.520 --> 00:11:57.670
What is your name.

146
00:11:57.750 --> 00:11:59.590
Questionmark.

147
00:11:59.720 --> 00:12:06.990
And then we'll call this object user that will be a player object with that human provide a name and

148
00:12:07.080 --> 00:12:09.720
hand is just going to be half to

149
00:12:12.930 --> 00:12:16.520
and then basically war essentially plays itself.

150
00:12:16.530 --> 00:12:21.600
So it's such a simple game that there's no strategy to it you just keep flipping the cards check who

151
00:12:21.600 --> 00:12:26.910
won and then take the cards and if they match you play war and then just check who won the war.

152
00:12:26.910 --> 00:12:30.580
In that case let's actually make this kind of automatically play.

153
00:12:30.630 --> 00:12:33.680
So I will say total rounds.

154
00:12:33.690 --> 00:12:38.280
Let's not make this a comment is equal to zero.

155
00:12:39.850 --> 00:12:42.510
And then I will also check the war counts.

156
00:12:43.420 --> 00:12:45.150
And see if that's equal to zero.

157
00:12:45.280 --> 00:12:49.600
And basically what I'm going to be doing is automatically playing this game for both the human player

158
00:12:49.630 --> 00:12:53.070
and the computer since they essentially don't have to make any decisions.

159
00:12:53.080 --> 00:12:54.870
That's how simple a game war is.

160
00:12:54.890 --> 00:13:08.000
He will say while user still has cards and the computer still has cards we will add onto the total rounds.

161
00:13:08.100 --> 00:13:18.910
So a total rounds plus equal one and I will print out time for a new round.

162
00:13:19.140 --> 00:13:20.350
And then I also print out.

163
00:13:20.370 --> 00:13:24.670
Here are the current standings.

164
00:13:25.840 --> 00:13:37.830
And then what I'm going to end up doing is saying Crantz user that name plus the counts and then actually

165
00:13:37.830 --> 00:13:42.360
want to grab how many player or cards are left.

166
00:13:42.360 --> 00:13:44.400
In that case that's just the actual length.

167
00:13:44.400 --> 00:13:50.160
So I will say has to count plus and will cast it to a string.

168
00:13:50.160 --> 00:13:51.270
There's many ways you could do this.

169
00:13:51.270 --> 00:13:55.550
You could also have built in your own SDR special method inside of this.

170
00:13:55.800 --> 00:14:02.640
And we can say user right hand the cards and we're going to do the exact same thing for the computer.

171
00:14:02.760 --> 00:14:03.990
So let's do that as well.

172
00:14:05.620 --> 00:14:11.650
But a set of user name it will be comp or computer and a set of keys or that hand that cards this will

173
00:14:11.650 --> 00:14:14.580
also be called.

174
00:14:14.600 --> 00:14:14.820
All right.

175
00:14:14.840 --> 00:14:15.650
Very simple.

176
00:14:15.650 --> 00:14:18.710
And then we're going to say just tell them bouffe

177
00:14:21.490 --> 00:14:28.800
play a card and we will print's any line.

178
00:14:28.840 --> 00:14:34.130
So that's just a printing setup of the game we are going to represent the cards that are on the table

179
00:14:34.140 --> 00:14:38.920
that's in between the player deck and the computer deck with the list will say table cards is equal

180
00:14:38.920 --> 00:14:41.320
to an empty list.

181
00:14:41.320 --> 00:14:48.990
And then when we actually play cards we'll take the computer card the card and say comp play card method

182
00:14:49.040 --> 00:14:57.620
remember that returns the card and then also have a player card the card and say user play card and

183
00:14:57.630 --> 00:15:03.990
then I want to add that to the actual table cards list which means I'll do something like table cards

184
00:15:04.280 --> 00:15:06.760
a pen the C card.

185
00:15:07.170 --> 00:15:09.710
You need to use a pen since it will be a single card.

186
00:15:09.810 --> 00:15:16.180
And I also want to say table cards pens the player card.

187
00:15:16.250 --> 00:15:18.830
Then after that I want to check if there's a war.

188
00:15:18.860 --> 00:15:33.500
So if C-card of one is equal to the card of one I'm going to add one to the workout site.

189
00:15:33.540 --> 00:15:39.760
Say colon and war count says clus equal one.

190
00:15:39.860 --> 00:15:44.750
And the reason I have to use this indexing for one is because remember we scroll all the way back up

191
00:15:44.750 --> 00:15:46.450
to how we define cards.

192
00:15:46.490 --> 00:15:48.740
Cards are just tuples themselves.

193
00:15:48.740 --> 00:15:51.950
So cards are just tuples to have this suit value.

194
00:15:51.950 --> 00:15:54.850
And then the ranking in the ranking is what I want to actually compare.

195
00:15:54.860 --> 00:16:00.260
So that's an index one which is why scrolling all the way back down when I actually have the cards to

196
00:16:00.260 --> 00:16:04.160
compare to each other I want to grab their rankings and compare it to each other which is why we had

197
00:16:04.160 --> 00:16:06.400
the indexing one.

198
00:16:06.500 --> 00:16:07.220
OK.

199
00:16:07.220 --> 00:16:09.110
So that means we have war.

200
00:16:09.530 --> 00:16:18.210
So I'll say Prince war and then I will grab the table cards and I'm going to extend the table cards.

201
00:16:18.300 --> 00:16:25.030
Now a user remove war cards so that just takes the top three cards they have available.

202
00:16:25.030 --> 00:16:27.580
And then I'm going to do the exact same thing for the computer.

203
00:16:27.580 --> 00:16:32.860
So extend comp da remove or cards.

204
00:16:32.970 --> 00:16:36.890
So I grabbed the war cards now and then I want to check who has the higher rank.

205
00:16:37.920 --> 00:16:47.430
So if ranks let's say if ring X at the index.

206
00:16:47.460 --> 00:17:01.380
SEE card 1 is greater than or let's say less than the ranks at the index position of the card.

207
00:17:01.460 --> 00:17:17.850
One will say user the hands add table cards and then we'll say else we'll add it to the computer's hand

208
00:17:19.430 --> 00:17:24.060
and this doesn't take into account a double war situation in a double war situation.

209
00:17:24.060 --> 00:17:29.630
We'll just say default the computer wins again you could keep adding more logic if you wanted to.

210
00:17:29.630 --> 00:17:30.080
All right.

211
00:17:30.260 --> 00:17:35.510
So let's actually break this down and it kind of explain what's going on here before we continue.

212
00:17:36.880 --> 00:17:42.610
This first if statement at the very top is checking the computer Kurd's ranking versus the player card

213
00:17:42.610 --> 00:17:43.300
ranking.

214
00:17:43.510 --> 00:17:45.790
And if that occurs then I have a war.

215
00:17:45.820 --> 00:17:51.520
So I want to say plus ones the actual work count and I print out war of the con. And then the cards

216
00:17:51.520 --> 00:17:53.150
on the table remember so far.

217
00:17:53.200 --> 00:17:54.130
It's just two cards.

218
00:17:54.130 --> 00:17:59.710
The initial computer card and the initial player card and going to extend it with three cards from each

219
00:17:59.710 --> 00:18:03.870
deck three cards from the user deck and then three cards from the computer there.

220
00:18:04.270 --> 00:18:10.640
And then it will say this number of ranks is that very top list where you have all the ranks right here.

221
00:18:10.930 --> 00:18:16.840
So the ranks are conveniently in order which means I can compare the index position and the greater

222
00:18:16.840 --> 00:18:21.280
index position counts for the higher rank and then scroll all the way back down here.

223
00:18:21.280 --> 00:18:28.180
What I'm doing with this index call off of this ranks list is where asking where is the index for this

224
00:18:28.180 --> 00:18:31.570
particular ranking and where is the index for this particular ranking.

225
00:18:31.570 --> 00:18:33.980
So where is the index of the computer card in the Rick's List.

226
00:18:34.000 --> 00:18:36.450
Where is the index of the player card on the Rick's List.

227
00:18:36.610 --> 00:18:44.440
And if this the computer card is less than a player card then the user gets all the table cards.

228
00:18:44.590 --> 00:18:47.650
Else the computer's going to get all the table cards.

229
00:18:47.650 --> 00:18:54.050
So the player is only going to get it when the computer card ranking is less than theirs on that war

230
00:18:55.100 --> 00:18:56.700
otherwise the computer gets all the card.

231
00:18:56.700 --> 00:18:59.890
So even in the case of a tie we'll just let the computer have all those cards.

232
00:18:59.930 --> 00:19:05.080
We could add more logic to check for a double war situation but we won't worry about that for now.

233
00:19:05.120 --> 00:19:10.800
Just to keep things very simple and then I need an else statement to go along with this initial statement.

234
00:19:10.800 --> 00:19:12.890
So so far I've checked for war.

235
00:19:12.900 --> 00:19:14.380
That's kind of the hard part.

236
00:19:14.610 --> 00:19:19.610
The easier part is if there is no war then all I have to do is directly compare the actual cards.

237
00:19:19.710 --> 00:19:21.650
And that's essentially the code I have right here.

238
00:19:21.960 --> 00:19:28.230
So I can just copy this and paste it and that's all I have to do because in this case I don't have war.

239
00:19:28.230 --> 00:19:33.930
So I just need to compare C-card one and play card one and then add the appropriate cards.

240
00:19:35.130 --> 00:19:41.370
And then what I'm going to do after all of this has been done meaning this while loop has finished executing

241
00:19:41.850 --> 00:19:44.820
so the user still has cards and the computer still has cards.

242
00:19:44.820 --> 00:19:47.120
Eventually one of them is going to run out of cards.

243
00:19:47.160 --> 00:19:49.660
I want to print out how many rounds it was.

244
00:19:49.800 --> 00:19:53.950
So I will say Prince.

245
00:19:54.000 --> 00:19:54.910
Game over.

246
00:19:56.990 --> 00:20:04.640
Number of rounds Colin and then we can just say Khama or I can say plus the string representation of

247
00:20:05.120 --> 00:20:17.680
total rounds and then I can also say Prince Oh war happens I'll say plus the string of the war counts.

248
00:20:18.520 --> 00:20:25.010
I'll say plus times that we can report back how many times how many rounds we had and how many times

249
00:20:25.010 --> 00:20:25.820
we had war.

250
00:20:25.940 --> 00:20:26.900
So let's save this.

251
00:20:26.900 --> 00:20:29.010
I have this all under notes that pi.

252
00:20:29.000 --> 00:20:31.750
OK so looks like the majority of our code is done.

253
00:20:31.760 --> 00:20:34.130
But before we actually run this it's always a good idea.

254
00:20:34.130 --> 00:20:39.500
It's actually going to do a quick pass over and see if we're missing anything or not thinking of anything

255
00:20:39.500 --> 00:20:40.680
correctly.

256
00:20:40.700 --> 00:20:46.100
So if I go all the way to the top can kind of check on this and saying from random import shuffle that

257
00:20:46.100 --> 00:20:47.150
looks OK.

258
00:20:47.210 --> 00:20:48.380
These two look ok.

259
00:20:48.410 --> 00:20:51.760
Class deck all the methods in each of the classes.

260
00:20:51.900 --> 00:20:53.600
In it self to all cards.

261
00:20:53.600 --> 00:20:57.620
And it looks like I'm actually missing a statement here.

262
00:20:57.660 --> 00:21:01.460
So for in sweet pursuit are in rinks.

263
00:21:01.610 --> 00:21:03.710
Shuffle looks OK split in half.

264
00:21:03.710 --> 00:21:05.220
That one's looking OK.

265
00:21:05.360 --> 00:21:10.940
Class hands in it the string add remove cards that's all looking OK.

266
00:21:10.940 --> 00:21:14.270
Player in it's looks OK.

267
00:21:14.270 --> 00:21:14.930
Play card.

268
00:21:14.930 --> 00:21:16.320
That also looks ok.

269
00:21:16.340 --> 00:21:17.740
Remove your cards.

270
00:21:17.750 --> 00:21:19.540
So an issue that may arise here.

271
00:21:19.580 --> 00:21:27.310
Just remove your cards is that if I end the game on a war I may not actually have three cards left.

272
00:21:27.440 --> 00:21:33.560
So what I mean by that is the computer has most of the cards and you have two left and you happen to

273
00:21:33.710 --> 00:21:34.800
draw war.

274
00:21:34.820 --> 00:21:38.710
You may get an an index error when calling for range 3.

275
00:21:38.720 --> 00:21:46.080
So let's actually add a little bit more code here to check for the war cards so I will say if the length

276
00:21:46.320 --> 00:21:57.930
of self-taught Handcock cards is less than three I will return all the cards which is just going to

277
00:21:57.930 --> 00:22:05.580
be self hand cards.

278
00:22:05.640 --> 00:22:07.680
So I would just return all the cards as a list.

279
00:22:07.680 --> 00:22:13.050
I won't even bother popping anything off of them and then I'll have the actual For loop become an else

280
00:22:13.050 --> 00:22:19.300
statement so we can do this else for this return that.

281
00:22:19.320 --> 00:22:24.550
So now let's save this continue on still highest cards that check makes sense to me.

282
00:22:24.670 --> 00:22:25.490
Game play.

283
00:22:25.500 --> 00:22:28.350
We just went through all of that so it should be OK.

284
00:22:28.470 --> 00:22:31.990
We check if both players still have cards to keep running this loop.

285
00:22:32.010 --> 00:22:36.090
We take the computer card the user card added to the table cards.

286
00:22:36.090 --> 00:22:37.890
We check to see if there's war.

287
00:22:37.920 --> 00:22:41.650
Otherwise we just check those individual cards and then we play the game.

288
00:22:41.700 --> 00:22:43.900
OK let's run this and see if it works.

289
00:22:45.170 --> 00:22:50.270
I'm going to open the terminal here and then I have this under Stop pie.

290
00:22:50.300 --> 00:22:54.470
So I will just call Python notes up high to enter.

291
00:22:54.470 --> 00:22:55.790
Looks like it's starting off OK.

292
00:22:55.820 --> 00:22:58.380
What's your name will say Jose enter.

293
00:22:58.460 --> 00:23:03.560
And it looks like the game actually works so we say game over a number of rounds 170 rounds were happened

294
00:23:03.560 --> 00:23:04.920
16 times.

295
00:23:05.180 --> 00:23:08.570
And right now we're actually not reporting who won which isn't so great.

296
00:23:08.570 --> 00:23:11.050
So let's actually report back who won.

297
00:23:11.090 --> 00:23:19.620
And the way to do that is just report back their length so we'll print out computer heads and then let's

298
00:23:19.640 --> 00:23:20.540
check how we can grab.

299
00:23:20.540 --> 00:23:23.120
How many computer cards there are left.

300
00:23:23.120 --> 00:23:25.120
So that's the comp still has cards.

301
00:23:25.130 --> 00:23:29.520
We can actually report this back itself.

302
00:23:29.670 --> 00:23:31.350
So say computer has

303
00:23:34.170 --> 00:23:34.860
was sort of saying.

304
00:23:34.870 --> 00:23:41.460
Peter Housel say the computer does the computer still have cards.

305
00:23:41.500 --> 00:23:47.600
Question mark and then we'll print back comp still has cards.

306
00:23:47.600 --> 00:23:49.820
We'll just turn this into a string.

307
00:23:49.820 --> 00:23:51.630
This will be either be true or false.

308
00:23:52.340 --> 00:23:57.530
So that will be a string and then we can do the exact same thing for the player and this or report back

309
00:23:57.540 --> 00:24:03.690
who won the human player still have cards.

310
00:24:03.760 --> 00:24:06.460
This will end up being user.

311
00:24:06.490 --> 00:24:07.810
OK so let's save that.

312
00:24:07.900 --> 00:24:09.090
Run this again.

313
00:24:09.840 --> 00:24:15.130
Say Jose is the name and then looks like the computer still has cards truce the computer won that time

314
00:24:15.720 --> 00:24:17.830
130 rounds war happened 16 times.

315
00:24:17.830 --> 00:24:20.290
Let's run this one more time to make sure things are working.

316
00:24:20.290 --> 00:24:27.780
Shuffling the deck will say new and then computer won again.

317
00:24:27.850 --> 00:24:30.360
Let's try to make sure the computer doesn't always win.

318
00:24:31.250 --> 00:24:32.110
And great.

319
00:24:32.120 --> 00:24:34.030
So the human still has cards.

320
00:24:34.040 --> 00:24:39.700
True an interesting enough war happened zero times and it was one in just 36 rounds.

321
00:24:39.710 --> 00:24:40.990
OK great.

322
00:24:40.990 --> 00:24:43.220
Do you have any questions feel free to post the Q&amp;A forums.

323
00:24:43.220 --> 00:24:44.840
This is a very challenging project.

324
00:24:44.840 --> 00:24:48.740
So if you weren't able to get it on your own especially given that we just learned about object oriented

325
00:24:48.740 --> 00:24:50.750
programming don't worry about it too much.

326
00:24:50.850 --> 00:24:53.430
We don't ever have to do something this complicated.

327
00:24:53.540 --> 00:24:56.170
In jingo a lot of that works already done for us.

328
00:24:56.240 --> 00:24:59.210
We just need to know the basics of adding methods to objects.

329
00:24:59.210 --> 00:25:04.370
We won't be doing anything this complicated when we talk about Django and building web applications.

330
00:25:04.370 --> 00:25:05.660
Again any questions.

331
00:25:05.660 --> 00:25:09.920
Make sure to check out the solutions up-I file and check out the Kewney forums.

332
00:25:09.920 --> 00:25:11.480
Thanks and I'll see you at the next lecture.
