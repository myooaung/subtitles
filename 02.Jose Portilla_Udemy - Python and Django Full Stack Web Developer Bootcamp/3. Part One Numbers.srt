1
00:00:05,340 --> 00:00:07,200
Hello everyone and welcome to part one.

2
00:00:07,230 --> 00:00:13,570
Numbers numbers and Python have two main forms that we're going to be working with for this course.

3
00:00:13,690 --> 00:00:16,050
That's integers and floating point numbers.

4
00:00:16,150 --> 00:00:19,870
Integers are whole numbers and floating point numbers have it thus in them.

5
00:00:20,080 --> 00:00:24,640
So for example an integer something like 23 a floating point number something like twenty three point

6
00:00:24,640 --> 00:00:27,730
five or twenty three point zero etc..

7
00:00:27,850 --> 00:00:28,190
All right.

8
00:00:28,360 --> 00:00:31,810
Let's quickly walk through examples of some very basic arithmetic for Python.

9
00:00:31,930 --> 00:00:34,440
And we're also going to be covering variable assignment in Python.

10
00:00:34,510 --> 00:00:36,760
And what makes a dynamic programming language.

11
00:00:36,760 --> 00:00:39,380
Let's hop over to the Adam text editor to get started.

12
00:00:39,760 --> 00:00:41,790
OK here I am at the Adam text editor.

13
00:00:41,800 --> 00:00:46,510
Before we get started talking about numbers integers variables and floating points what I want to quickly

14
00:00:46,510 --> 00:00:50,610
discuss is the various ways you can run Python and play with Python.

15
00:00:50,920 --> 00:00:54,530
One way is to directly in your command prompt or terminal.

16
00:00:54,670 --> 00:00:56,730
Just type python.

17
00:00:57,340 --> 00:01:01,070
And if you've downloaded Anaconda it should be set to the path.

18
00:01:01,120 --> 00:01:06,970
See immediately see Python here and you can directly type python now into your command prompt or terminal.

19
00:01:06,970 --> 00:01:08,490
Which means I could do something like this.

20
00:01:08,500 --> 00:01:13,690
I can say print parentheses and in quotes.

21
00:01:13,690 --> 00:01:15,430
Hello world.

22
00:01:15,430 --> 00:01:16,130
Hit enter.

23
00:01:16,150 --> 00:01:17,630
And I get the output Hello world.

24
00:01:17,630 --> 00:01:20,380
So that's just the basic hello world with Python.

25
00:01:20,530 --> 00:01:27,010
Or I can type 2 plus 1 and since this is in the terminal or command prompt if I enter it directly gives

26
00:01:27,010 --> 00:01:33,990
me an output in a script it would not give me the output I would have to say print 2 plus 1.

27
00:01:34,140 --> 00:01:36,120
If I was running a dot PI script.

28
00:01:36,120 --> 00:01:40,070
So let's show you how you can run a PI script to exit out of this.

29
00:01:40,080 --> 00:01:45,510
You can just type quits open and close parentheses in you've quit and if you want to clear the screen

30
00:01:45,510 --> 00:01:49,340
you can do CLX or clear depending on your operating system.

31
00:01:49,450 --> 00:01:49,940
Right.

32
00:01:50,190 --> 00:01:54,900
So to actually run a script what you need to know is the current file path you're in.

33
00:01:54,900 --> 00:01:56,610
So you can type TWD.

34
00:01:56,610 --> 00:02:01,680
If you're on a Mac or Linux or for a Windows computer you should be able to just see it directly to

35
00:02:01,680 --> 00:02:03,330
your left the entire file path.

36
00:02:03,420 --> 00:02:08,380
If you're unsure you can always type CD enter and it outputs the file path right here.

37
00:02:08,400 --> 00:02:10,140
You'll notice that it might command prompt.

38
00:02:10,140 --> 00:02:14,930
I have something here in parentheses saying my Django NVI that's a virtual environment.

39
00:02:14,940 --> 00:02:15,770
I've set up.

40
00:02:15,810 --> 00:02:19,020
We'll discuss that when we talk about Django in a future lecture.

41
00:02:19,020 --> 00:02:20,630
You don't need to worry about that right now.

42
00:02:20,640 --> 00:02:27,060
All you need to know is being able to access whatever your current directory is which is just CD and

43
00:02:27,060 --> 00:02:31,830
then it should output directory or P.W. the if on a Mac or Linux.

44
00:02:31,830 --> 00:02:38,160
So what you need to do is create a folder here or add this folder to your project folders and Adam you

45
00:02:38,160 --> 00:02:39,490
can see here have already added it.

46
00:02:39,510 --> 00:02:43,950
But if you needed to added it you could just right click here and then select Add project folder and

47
00:02:43,950 --> 00:02:46,130
then find this folder.

48
00:02:46,130 --> 00:02:51,960
What I'm going to do is under that project folder I will Right-Click say new file and create a file

49
00:02:52,050 --> 00:02:57,260
and I'm going to call it numbers and I will make sure to give the extension up pie so that Adam knows

50
00:02:57,330 --> 00:02:58,290
it's a python file.

51
00:02:58,290 --> 00:03:00,870
And so that Python also knows it's a python file.

52
00:03:00,870 --> 00:03:07,900
Now let's discuss some very basic arithmetic her basic arithmetic addition is just two plus one and

53
00:03:07,890 --> 00:03:10,380
I can zoom in here a little bit so you can see it clearly.

54
00:03:11,590 --> 00:03:15,740
Two plus one is addition subtraction is just the minus sign.

55
00:03:15,850 --> 00:03:21,370
Multiplication is just an Asterix and the vision is just a forward slash.

56
00:03:21,370 --> 00:03:23,670
Again I'm not running these commands because they're so basic.

57
00:03:23,740 --> 00:03:29,040
And we covered a lot of this when we were talking about javascript for actual powers.

58
00:03:29,110 --> 00:03:31,790
That is something like two to the power of five.

59
00:03:31,930 --> 00:03:33,990
You just have two sets of Asterix.

60
00:03:34,330 --> 00:03:36,800
So this right here is two to the power of five.

61
00:03:37,290 --> 00:03:40,210
And if you wanted to you could also do roots this way.

62
00:03:40,210 --> 00:03:43,360
So maybe I want the square root of something I can do for.

63
00:03:43,540 --> 00:03:45,510
So the power of 0.5.

64
00:03:45,520 --> 00:03:47,050
That's the same as the square root.

65
00:03:47,050 --> 00:03:51,400
But later on we'll show you how you can import the math module to do some more complicated math and

66
00:03:51,400 --> 00:03:53,530
then take the square root that way.

67
00:03:54,640 --> 00:03:55,570
Couple more notes.

68
00:03:55,570 --> 00:03:57,630
Order of operations is followed in Python.

69
00:03:57,640 --> 00:04:02,360
So things like multiplication happening before addition or subtraction that's all followed.

70
00:04:02,380 --> 00:04:14,120
So if I were to say something like two plus ten times ten plus three let's print this whole thing out

71
00:04:14,360 --> 00:04:15,340
and see what we get.

72
00:04:17,880 --> 00:04:19,320
So I'm going to print this.

73
00:04:19,350 --> 00:04:24,240
I will save it and then if I want to actually run this file all I have to do is add a command prompt

74
00:04:24,480 --> 00:04:31,890
type python space and then the either the entire file path to the actual file or if I'm in the same

75
00:04:31,890 --> 00:04:34,580
location as the adult Pi file just the name itself.

76
00:04:34,590 --> 00:04:42,120
So numbers that pi and you can always do tab to help auto complete this enter.

77
00:04:42,120 --> 00:04:45,040
And we see it's 105 for order of operation.

78
00:04:45,030 --> 00:04:48,030
So if I wanted to affect this I can always use parentheses.

79
00:04:48,060 --> 00:04:51,840
So let's say I want the actual additions happen first.

80
00:04:51,840 --> 00:04:55,980
So I want to plus tend to happen first before 10 and 10 get multiplied.

81
00:04:55,980 --> 00:05:00,990
Then I could just add sets a print Cesaire to make sure that happens so if I run this again up on my

82
00:05:00,990 --> 00:05:03,550
arrow key now I get 156.

83
00:05:03,600 --> 00:05:04,620
So a little bit different.

84
00:05:04,800 --> 00:05:08,000
And you can just use parentheses to specify the order of operations.

85
00:05:08,330 --> 00:05:08,730
OK.

86
00:05:08,730 --> 00:05:11,580
Now let's talk about variable assignment with Python.

87
00:05:11,580 --> 00:05:16,950
Python is a dynamic programming language meaning you don't need to declare what a variable type is going

88
00:05:16,950 --> 00:05:19,440
to be before you actually just do the assignment.

89
00:05:19,440 --> 00:05:21,880
So Python variable assignment is very simple.

90
00:05:21,970 --> 00:05:27,810
All you have to do is choose the name of your variable for instance a set is equal to whatever you want

91
00:05:27,810 --> 00:05:28,340
it to be.

92
00:05:28,350 --> 00:05:34,860
For instance the number 5 and all those tabs that were popping up dashes Adam auto help there that we

93
00:05:34,920 --> 00:05:36,190
downloaded one of the plug ins.

94
00:05:36,210 --> 00:05:37,070
Don't worry about that.

95
00:05:37,080 --> 00:05:42,670
You can just continue on without it later on when we work with functions and object oriented programming.

96
00:05:42,730 --> 00:05:43,640
It's going to be really useful.

97
00:05:43,650 --> 00:05:45,230
But right now you can just ignore it.

98
00:05:46,100 --> 00:05:53,320
If I want to see the output of this I can just say print a let's save that run our script which has

99
00:05:53,320 --> 00:05:58,910
Python numbers that pi and here we see the output five I can then also add objects together.

100
00:05:58,930 --> 00:06:07,270
So for instance a plus say save it run this and I get 10 out Python also supports re-assignment meaning

101
00:06:07,270 --> 00:06:14,030
I could do something like a is equal to a times five.

102
00:06:14,380 --> 00:06:16,370
And then I could say print a.

103
00:06:16,690 --> 00:06:21,510
And now we would expect it to give out not just 10 but also 25.

104
00:06:21,620 --> 00:06:27,010
And if I ever want to make a comments in Python I just need to do a hash tag and then type whatever

105
00:06:27,010 --> 00:06:28,820
comments I want.

106
00:06:28,910 --> 00:06:34,880
And as a quick note by convention usually type comments above the code it references or right next to

107
00:06:34,880 --> 00:06:35,150
it.

108
00:06:36,980 --> 00:06:37,440
OK.

109
00:06:37,730 --> 00:06:41,720
So that's the very basics of variable assignment and comments.

110
00:06:41,810 --> 00:06:43,400
There are a couple of rules you need to follow.

111
00:06:43,400 --> 00:06:50,180
When creating variable names with Python one thing Python variable names cannot start a number so you

112
00:06:50,180 --> 00:06:56,800
can't say something like two dogs is equal to two or something.

113
00:06:56,970 --> 00:07:03,140
What you would need to do is say two dogs is equal to whatever you want.

114
00:07:03,690 --> 00:07:08,790
Now keep in mind usually when you're typing in Python and you have multiple words and variables you

115
00:07:08,790 --> 00:07:10,930
want to separate them using an underscore.

116
00:07:10,950 --> 00:07:13,290
This is known as snake casing.

117
00:07:13,290 --> 00:07:19,170
So you'll usually see something like this instead of camel casing which is common with javascript which

118
00:07:19,170 --> 00:07:20,720
would do something like that.

119
00:07:20,940 --> 00:07:24,610
And we'll discuss these rules later on when we talk about object oriented programming.

120
00:07:24,670 --> 00:07:28,830
But right now just keep in mind variable names cannot start for a number.

121
00:07:28,860 --> 00:07:33,120
They also can't start with certain symbols and these symbols are in notes that it's usually pretty obvious

122
00:07:33,120 --> 00:07:33,890
stuff.

123
00:07:33,930 --> 00:07:36,270
Anything that's a shift on a number.

124
00:07:36,330 --> 00:07:40,920
So you can't start it with basically any of these symbols right here otherwise you'll mess up the variable

125
00:07:40,920 --> 00:07:41,640
name.

126
00:07:42,060 --> 00:07:42,660
OK.

127
00:07:42,900 --> 00:07:51,360
Now let's walk through a very quick example of using object names for table assignment want to do a

128
00:07:51,360 --> 00:08:03,180
very simple example with my income equal to 100 will say my tax rate is equal to 0.1 my taxes is equal

129
00:08:03,180 --> 00:08:05,070
to my income.

130
00:08:05,070 --> 00:08:14,760
And we can see here and being helped out multiplied by tax rate and then I'm going to print my taxes.

131
00:08:14,870 --> 00:08:16,010
We'll save that.

132
00:08:16,010 --> 00:08:19,280
So what we get when we run the script I get ten point zero.

133
00:08:19,280 --> 00:08:21,410
So notice I'm getting a floating point number.

134
00:08:21,560 --> 00:08:23,250
The first number wasn't integer.

135
00:08:23,270 --> 00:08:25,420
Second number was a floating point number.

136
00:08:25,430 --> 00:08:29,800
When I multiply them together Python automatically makes the result a floating point number.

137
00:08:30,190 --> 00:08:30,600
OK.

138
00:08:30,710 --> 00:08:33,460
That's really all we need to know about numbers and variable assignments for now.

139
00:08:33,530 --> 00:08:35,150
Hopefully it is pretty straightforward.

140
00:08:35,150 --> 00:08:36,620
Thanks and I'll see at the next lecture.
