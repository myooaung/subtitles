1
00:00:05,000 --> 00:00:11,230
Hello everyone and welcome to part three we're going to be discussing python lists lists our pythons

2
00:00:11,240 --> 00:00:15,500
form of arrays and they behave very similarly to a javascript array.

3
00:00:15,800 --> 00:00:20,120
Well we're going to do is begin to understand the important features of Python by jumping to the editor

4
00:00:20,180 --> 00:00:26,430
and getting started OK so let's begin by showing you how to create a list creating a list in Python's

5
00:00:26,440 --> 00:00:32,440
really simple you just type in whatever you want the variable to be equals and then you use square brackets

6
00:00:32,530 --> 00:00:35,300
and separate every item in the list by a comma.

7
00:00:35,680 --> 00:00:39,690
So for instance here is a list of the numbers 1 2 and 3.

8
00:00:39,700 --> 00:00:45,160
Now we just created a list of integers but we can also create a list of many different ogic types.

9
00:00:45,160 --> 00:00:53,800
So for example I could say my list and have it hold some string stuff maybe some more numbers integers

10
00:00:54,220 --> 00:00:59,760
some floating point numbers and then later I will see how it can hold a booleans and more.

11
00:00:59,800 --> 00:01:05,680
So again we can have mixed data types inside of a list and we can even have a list nested inside of

12
00:01:05,680 --> 00:01:06,250
a list.

13
00:01:06,250 --> 00:01:08,830
So this is totally good code and it will work.

14
00:01:08,830 --> 00:01:14,330
So let's actually run this to verify that I'm going to call Python and then I call this script list

15
00:01:14,390 --> 00:01:16,160
that PI enter.

16
00:01:16,180 --> 00:01:21,400
We don't get anything out because we didn't print the list so we can do this print my list and let's

17
00:01:21,400 --> 00:01:22,880
comment this one out.

18
00:01:23,050 --> 00:01:30,830
Again this just command forward slash entry and we see that the list has no problems being printed out.

19
00:01:30,830 --> 00:01:34,870
And just like a string we can call the Eliane function on it.

20
00:01:34,910 --> 00:01:37,600
So length of my list.

21
00:01:37,670 --> 00:01:44,720
And let's not use the more normal list 1 2 3 and actually print out that length and we see we have three

22
00:01:44,720 --> 00:01:48,170
items in the list one two and three.

23
00:01:48,200 --> 00:01:48,710
OK.

24
00:01:48,710 --> 00:01:54,630
Indexing is slicing works basically the same as that in a list or excuse me in a string.

25
00:01:54,630 --> 00:02:03,160
So I'm going to read the fine list to be a b and then whip's comma.

26
00:02:03,160 --> 00:02:10,910
See if I want the very first item in the list I just have to use my list 0.

27
00:02:10,930 --> 00:02:14,320
So let's print that out and confirm this should return a.

28
00:02:14,760 --> 00:02:23,290
So if I run this to enter I get back I wanted see I could just say negative 1 and that would give me

29
00:02:23,290 --> 00:02:29,320
back the last item in the list and to add a couple more terms in here so we can see how slicing works

30
00:02:29,350 --> 00:02:31,460
not just indexing by hand.

31
00:02:31,570 --> 00:02:37,870
ABC if I want to grab everything starting at index 1 all the way to the end again is just one colon

32
00:02:38,440 --> 00:02:41,000
and that will give me b all the way to the end.

33
00:02:41,290 --> 00:02:45,290
Or if I want everything from the beginning up to but not including index 3.

34
00:02:45,430 --> 00:02:47,010
So this should be ABC.

35
00:02:47,110 --> 00:02:49,220
I get a list ABC.

36
00:02:49,390 --> 00:02:49,820
All right.

37
00:02:50,770 --> 00:02:55,950
Now let's talk about actually adding items to a list of like a string.

38
00:02:56,000 --> 00:03:02,530
Lists are immutable meaning I can say my list grabbed the item at index 0 and set it equal to something

39
00:03:02,530 --> 00:03:03,780
totally different.

40
00:03:03,820 --> 00:03:14,270
So let's say new item here and let me print out my list and let's print it out before.

41
00:03:14,270 --> 00:03:23,490
So we'll say before reassignments and then prints my list.

42
00:03:25,150 --> 00:03:27,360
Not as a string as the variable itself.

43
00:03:28,210 --> 00:03:38,780
And then we will prints after reassignments save this run the code and here you can see before re-assignment

44
00:03:38,840 --> 00:03:46,610
I have ABC and then with line code number five with this re-assignment I have new item B C D E and that

45
00:03:46,610 --> 00:03:53,860
just puts the point forward that we can actually do reassignments with index calls on a list defining

46
00:03:53,880 --> 00:03:56,290
it as a mutable item.

47
00:03:56,300 --> 00:03:56,860
OK.

48
00:03:57,200 --> 00:04:03,140
Now let's talk about some basic list methods that you may find useful if you want to add new item and

49
00:04:03,230 --> 00:04:06,260
have it be appended to the very end of a list.

50
00:04:06,290 --> 00:04:12,020
All you have to do is use the append call so I can say my list and you can see the very first one here

51
00:04:12,020 --> 00:04:12,810
is a pen.

52
00:04:13,130 --> 00:04:19,180
So we can select that and then you can append any item to the list so I can say something like.

53
00:04:19,310 --> 00:04:19,970
New item

54
00:04:22,900 --> 00:04:25,350
and this will not affect any current item in the list.

55
00:04:25,360 --> 00:04:28,080
It will just append it to the very end of the list.

56
00:04:28,090 --> 00:04:31,840
So now let's print my list after we appended.

57
00:04:31,980 --> 00:04:41,140
So I'm going to save run this again and here I can see my list was now a b c d e and then new item was

58
00:04:41,140 --> 00:04:43,230
appended to the very end of it.

59
00:04:43,330 --> 00:04:48,470
If I end up appending a list to this.

60
00:04:48,800 --> 00:04:59,550
So let's say I have a list that says X Y and Z just to make this clear.

61
00:04:59,570 --> 00:05:00,850
Note my brackets here.

62
00:05:00,890 --> 00:05:04,100
Actually appending a new list to the end of this.

63
00:05:04,220 --> 00:05:10,090
What's going to happen is that now this very last item completely is a list.

64
00:05:10,160 --> 00:05:16,790
If you actually want this list to be a part of the original will you have to do is NOT use a pen but

65
00:05:16,790 --> 00:05:20,010
use the extend method.

66
00:05:20,210 --> 00:05:23,520
And then we can let's just actually put this to a new variable.

67
00:05:24,290 --> 00:05:28,450
So we'll say list two is equal to that list.

68
00:05:29,330 --> 00:05:36,550
And I'm going to instead of appending something I will extend that save this note the difference here.

69
00:05:36,580 --> 00:05:37,740
This was with a pen.

70
00:05:37,930 --> 00:05:42,810
That means the very last item is the list so the list nested inside of another list.

71
00:05:42,820 --> 00:05:49,720
If I use extend instead and then print out the list then I actually extend the list to include these

72
00:05:49,810 --> 00:05:51,140
all these items right here.

73
00:05:51,340 --> 00:05:56,860
So note the bracket difference between append and extend and you only use X10 when you want to extend

74
00:05:57,160 --> 00:05:59,800
another list with the original list.

75
00:06:01,310 --> 00:06:05,480
So we've talked about adding things to a list but what if you actually want to remove something from

76
00:06:05,480 --> 00:06:06,350
a list.

77
00:06:06,350 --> 00:06:11,110
Well the most common method for removing something from a list is the pop method.

78
00:06:11,290 --> 00:06:15,520
So I can say my list does pop.

79
00:06:15,520 --> 00:06:21,670
And basically what this does is it grabs the very last item from a list and returns it.

80
00:06:21,760 --> 00:06:31,220
So we'll call this item and then say print my list and print item.

81
00:06:31,240 --> 00:06:39,490
So it's going to happen here when I run this is my originalists was AB ABC then I popped off the very

82
00:06:39,490 --> 00:06:46,240
last item in the list save that to the variable item and then when I print out my list e is now gone

83
00:06:46,660 --> 00:06:49,470
an item is now that letter e.

84
00:06:49,990 --> 00:06:56,470
If you do not want to grab from the very end of a list you can actually specify an index position in

85
00:06:56,470 --> 00:07:00,250
pop so this can be any integer index position as long as it's in the list.

86
00:07:00,250 --> 00:07:04,500
So if I put 0 here now it's going to pop off index 0 which is a.

87
00:07:04,750 --> 00:07:06,260
So let me run this again.

88
00:07:06,320 --> 00:07:12,540
And now I see B C D E and I have a as my item and that's the pop method.

89
00:07:12,850 --> 00:07:20,470
And keep in mind pop method returns an item to more useful methods that you may find yourself using

90
00:07:20,540 --> 00:07:23,450
our reverse and sort.

91
00:07:23,500 --> 00:07:29,530
So if I say my list reverse close parentheses and then actually print out my list

92
00:07:32,890 --> 00:07:38,770
that I will get a reversed version to the list ECB A and something that's interesting to note here is

93
00:07:38,770 --> 00:07:44,640
that this occurs in place and what I mean by in place is I didn't have to save this to another item

94
00:07:44,650 --> 00:07:46,170
to see the change effect.

95
00:07:46,240 --> 00:07:51,190
All I had to say was my list that reverse and my list was changed in place permanently.

96
00:07:51,220 --> 00:07:55,540
So then when I reprinted my list it ended up being in reverse down here.

97
00:07:55,540 --> 00:07:56,690
So that's reverse.

98
00:07:56,860 --> 00:08:04,200
And then let's create a list here with a bunch of numbers in it some random numbers and is that a reverse.

99
00:08:04,190 --> 00:08:12,020
What I'm going to do is ask for sort in if I save that and run this it will actually end up sorting

100
00:08:12,020 --> 00:08:12,910
that list.

101
00:08:12,920 --> 00:08:17,750
So Python has its own rules for sorting things especially if you have multiple data types and they're

102
00:08:17,750 --> 00:08:19,290
like strings and numbers.

103
00:08:19,340 --> 00:08:23,030
It has a specific hierarchy and you can check out the Python documentation.

104
00:08:23,060 --> 00:08:27,920
If you find yourself needing to know that hierarchy but for the rest of this course we won't be dealing

105
00:08:27,920 --> 00:08:33,800
with sorting mixed data type lists and it's actually bad practice to do that because it's unusual to

106
00:08:34,010 --> 00:08:39,470
have to do that operation should try to have only one sort of data type for a single list.

107
00:08:39,490 --> 00:08:49,060
OK finally I want to mention two more topics which is a nested list index and then a list comprehension

108
00:08:49,120 --> 00:08:52,180
and will cover a list comprehensions in much more detail later on.

109
00:08:52,180 --> 00:08:56,700
But I want you to be aware of them now since they may be confusing to beginners.

110
00:08:57,310 --> 00:09:04,870
But if I have a nested list so will say my list is 1 2 and then the third item in the list is going

111
00:09:04,870 --> 00:09:10,930
to be x y z.

112
00:09:12,150 --> 00:09:18,130
If I call Prince my list and I'm looking for the third item.

113
00:09:18,300 --> 00:09:23,860
So an index to what's going to happen when I print this is I get this entire list back.

114
00:09:23,940 --> 00:09:27,040
So if I run this right now I get X Y and Z.

115
00:09:27,120 --> 00:09:29,720
Imagine that I'm only looking for the letter Y.

116
00:09:29,830 --> 00:09:34,740
All I have to do here is add another set of brackets to actually index this list that was returned to

117
00:09:34,740 --> 00:09:35,130
me.

118
00:09:35,280 --> 00:09:37,050
And why is index 1.

119
00:09:37,050 --> 00:09:40,640
So I just put the number one here save it run this again.

120
00:09:40,820 --> 00:09:45,510
And now I get the letter Y return to me and that's how you can index a nested list and you can do this

121
00:09:45,510 --> 00:09:47,660
with a nest within an S within a nest.

122
00:09:47,670 --> 00:09:48,500
That's not too common.

123
00:09:48,500 --> 00:09:50,530
Usually elect to do two levels at most.

124
00:09:50,640 --> 00:09:55,350
But keep in mind this could keep going over and over again depending how many lists you had nested inside

125
00:09:55,410 --> 00:09:56,820
of another list.

126
00:09:56,820 --> 00:09:59,820
So that's nested list indexing.

127
00:09:59,820 --> 00:10:05,910
And finally I want to show you a list comprehensions so to do this I'm going to create a list called

128
00:10:05,910 --> 00:10:08,560
Matrix which is going to be a nested list.

129
00:10:08,790 --> 00:10:18,190
So this will be one to three as the first item or 5 6 as the second item and then 7 8 9.

130
00:10:18,290 --> 00:10:22,470
So right now I have three lists inside of a single list.

131
00:10:22,550 --> 00:10:28,910
There's only three items in Matrix but each item is three more items in the list which means I can do

132
00:10:28,910 --> 00:10:30,290
something like Matrix

133
00:10:33,110 --> 00:10:37,080
0 0 and that counts as one.

134
00:10:37,100 --> 00:10:41,570
So the very first item here and the very first item of the item.

135
00:10:41,570 --> 00:10:42,940
Now for a list comprehension.

136
00:10:42,980 --> 00:10:48,200
It's basically going to be like a for loop but flattened out into a list.

137
00:10:48,320 --> 00:11:00,050
So if I want the very first column what I could do is say Roseboro for row in Matrix and we'll be covering

138
00:11:00,050 --> 00:11:03,140
list comprehensions and for loops and a lot more detail later on.

139
00:11:03,170 --> 00:11:07,850
But I just want to show what's possible with Python and how you can make really clean looking Python

140
00:11:07,850 --> 00:11:08,950
code.

141
00:11:08,990 --> 00:11:15,840
So then I'm going to Prince first call save this run this python list.

142
00:11:15,970 --> 00:11:18,350
And now I see I have one for 7.

143
00:11:18,360 --> 00:11:20,410
So what is actually going on here.

144
00:11:20,460 --> 00:11:25,820
Well I'm saying for row in matrix in row counts as each item elicits saying.

145
00:11:25,980 --> 00:11:34,380
For this one this one and this one grab the very first element so rad with Bracq index location element

146
00:11:34,380 --> 00:11:34,940
0.

147
00:11:35,100 --> 00:11:38,260
So then it returns 1 4 and 7.

148
00:11:38,310 --> 00:11:42,830
So this is a for loop basically flattened out into a list and it's inside brackets.

149
00:11:42,830 --> 00:11:44,720
So ends up returning illest itself.

150
00:11:44,880 --> 00:11:48,660
And this is known as list comprehension.

151
00:11:48,820 --> 00:11:52,720
Now we're going to be covering this a lot more but this is definitely something you're going to see

152
00:11:52,720 --> 00:11:53,890
all the time with Python.

153
00:11:53,890 --> 00:11:54,960
It's a great tool.

154
00:11:55,030 --> 00:11:59,290
And as you begin to get more advance of Python you yourself will be using it a lot.

155
00:11:59,290 --> 00:11:59,650
All right.

156
00:11:59,650 --> 00:12:02,170
That's all we need to know about Python lists for now.

157
00:12:02,170 --> 00:12:04,300
Thanks everyone and I'll see you in the next lecture.
