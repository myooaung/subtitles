1
00:00:05,190 --> 00:00:09,870
Hello everyone and welcome to the template filter's coding example lecture and this lecture we're going

2
00:00:09,870 --> 00:00:14,280
to be walking you through the basics of using an actual template filter and also how you can create

3
00:00:14,280 --> 00:00:18,660
your own template filters if you ever feel you have the need to Gengel makes all of this really easy.

4
00:00:18,660 --> 00:00:21,690
So let's hop right back to the editor and get started.

5
00:00:21,690 --> 00:00:26,370
All right so all the work the learning underscore templates project that we've been working through

6
00:00:26,670 --> 00:00:29,980
the entire section of this course it's really easy.

7
00:00:30,030 --> 00:00:34,710
All we're going to be doing is affecting the index that HTL page to actually inject the variables and

8
00:00:34,840 --> 00:00:36,250
reform the template filters.

9
00:00:36,390 --> 00:00:41,220
But in order to do that we need some sort of context dictionary to actually pass to this index for you.

10
00:00:41,220 --> 00:00:48,300
So we'll come over to views that high under basic app and under index we're going to do is create a

11
00:00:48,300 --> 00:00:53,730
basic context dictionary so say context dictionary.

12
00:00:53,800 --> 00:00:56,140
Now we'll have a couple of keys in here.

13
00:00:56,320 --> 00:01:02,340
We'll say some text and this will be hello world.

14
00:01:03,520 --> 00:01:10,740
And then we'll also say number and this will be something like just make it 100 and we're going to pass

15
00:01:10,740 --> 00:01:13,260
that as a contex dictionary here.

16
00:01:15,010 --> 00:01:15,270
OK.

17
00:01:15,280 --> 00:01:18,650
So save that and then to make sure it works on the index page.

18
00:01:18,850 --> 00:01:21,820
Let's just inject those two variables themselves.

19
00:01:21,880 --> 00:01:32,400
So remember the first one was just called text and then the second one was just called name.

20
00:01:32,480 --> 00:01:34,320
Numbers are number Lemi mixture.

21
00:01:34,640 --> 00:01:37,430
Number OK.

22
00:01:37,470 --> 00:01:39,330
So we'll save that.

23
00:01:39,330 --> 00:01:45,540
And let's actually run our server so Python Myners up higher on server and call it make sure to actually

24
00:01:45,540 --> 00:01:46,910
there on that index page.

25
00:01:46,920 --> 00:01:52,820
I'm going to copy this spring over my browser and bringing in my browser I can see it right here.

26
00:01:53,020 --> 00:01:53,730
Hello world.

27
00:01:53,740 --> 00:01:54,760
And 100.

28
00:01:54,790 --> 00:01:57,030
This is actually quite small so let's enlarge it.

29
00:01:57,190 --> 00:02:00,140
Bring that away and let's put this under H1 tag.

30
00:02:00,190 --> 00:02:06,790
So I'm going to actually say welcome to index comment that outs and make an H1 tag that this will go

31
00:02:06,790 --> 00:02:07,220
into.

32
00:02:07,220 --> 00:02:12,760
So we'll put the text in and each one that way we can just clearly see and don't have to awkwardly zoom

33
00:02:12,760 --> 00:02:13,700
in that far.

34
00:02:14,620 --> 00:02:16,790
Copy that paste that in.

35
00:02:16,810 --> 00:02:19,870
Save this and refreshing my page and oh I see.

36
00:02:19,870 --> 00:02:20,740
Welcome to index.

37
00:02:20,740 --> 00:02:22,420
Hello World 100.

38
00:02:22,450 --> 00:02:22,850
OK.

39
00:02:22,900 --> 00:02:25,870
So what does a typical filter actually look like.

40
00:02:25,870 --> 00:02:30,290
Well the majority of them actually usually don't take parameters or additional arguments.

41
00:02:30,340 --> 00:02:34,700
They're usually based off of some sort of Python method that you would call on that basic data type.

42
00:02:34,810 --> 00:02:38,760
So if you ever think Oh man there's a python method I would like to do on the string.

43
00:02:38,830 --> 00:02:40,720
Definitely look up the filter reference.

44
00:02:40,720 --> 00:02:41,890
At least the built in ones.

45
00:02:41,980 --> 00:02:46,290
It's almost 100 percent sure to actually be there already implemented for you.

46
00:02:46,390 --> 00:02:48,300
So let's do that with Hello world.

47
00:02:48,430 --> 00:02:49,260
The text.

48
00:02:49,300 --> 00:02:53,530
Let's say I wanted to uppercase all the text.

49
00:02:53,600 --> 00:02:59,510
Well you could use the upper parentheses on a python string and it's really no different over here you

50
00:02:59,510 --> 00:03:06,110
just say text the pipe operator and then pass in the name of whatever the filter using is.

51
00:03:06,110 --> 00:03:11,960
And in this case it's upper and usually syntax wise they're both going to be touching that pipe OPERATOR

52
00:03:11,960 --> 00:03:15,620
So you will see it like that without any space OK.

53
00:03:15,810 --> 00:03:21,950
So let's save that and bring in our page refreshed so refresh the page coming in.

54
00:03:21,990 --> 00:03:23,220
Now I can see Hello world.

55
00:03:23,250 --> 00:03:25,300
It's all in uppercase now.

56
00:03:25,350 --> 00:03:28,230
Same number it's also a very simple process.

57
00:03:28,230 --> 00:03:33,310
Let's show you an example of one that would have an additional argument for instance one of the most

58
00:03:33,310 --> 00:03:41,250
simple ones is just adding a number so we can say number the pipe operator ad is the name of that actual

59
00:03:41,250 --> 00:03:46,900
filter then we say colon and in a string you can pass in whatever you want to add.

60
00:03:46,920 --> 00:03:52,400
So in this case let's add the number ninety nine to it just to make it really obvious.

61
00:03:52,440 --> 00:03:55,960
So we'll save that refresh our page and bring it back in.

62
00:03:56,070 --> 00:03:59,970
And here if I bring it back in I can see it's 1 9 9 after the refresh.

63
00:04:00,190 --> 00:04:01,980
OK.

64
00:04:02,140 --> 00:04:05,380
Now let's talk about how you can create your own custom filters.

65
00:04:05,440 --> 00:04:10,660
Usually you'll be able to find your own fill of the built in filters to be more than enough and sometimes

66
00:04:10,660 --> 00:04:14,830
you will even be doing a lot of this logic on the back and then some other Python script.

67
00:04:14,830 --> 00:04:18,500
But let's say you really need to do it with a template and you need your own filter.

68
00:04:18,520 --> 00:04:19,870
Well it's absolutely no problem.

69
00:04:19,870 --> 00:04:21,510
Django can certainly handle that.

70
00:04:21,610 --> 00:04:25,050
So you need to do is create a function that will work with that filter.

71
00:04:26,790 --> 00:04:33,240
In order to set this all up we have to follow a convention as far as where to actually place our custom

72
00:04:33,240 --> 00:04:36,910
template filters and what you end up doing is inside your application.

73
00:04:37,140 --> 00:04:44,070
At the same level of models and views since you are you going to do is underneath the application you'll

74
00:04:44,070 --> 00:04:51,300
create a new folder or new directory and you will call it template tags.

75
00:04:52,710 --> 00:04:59,520
And then inside of this you're going to make sure it creates a new file and you will call it underscore

76
00:04:59,550 --> 00:05:06,240
underscore in its underscore underscore that pi and that file is just going to be totally empty.

77
00:05:06,240 --> 00:05:10,840
Basically what this file says is it tells Python to treat this as a module.

78
00:05:10,860 --> 00:05:16,470
That way it can call it and load it in what you're going to be doing usually is creating a new file

79
00:05:16,590 --> 00:05:21,570
and then this is where you're going to actually put in your custom templates so we can say something

80
00:05:21,570 --> 00:05:22,110
like

81
00:05:24,820 --> 00:05:33,240
my underscore extras that pie and I'll show you how you can actually create your own filters and you

82
00:05:33,240 --> 00:05:35,340
can always reference the documentation.

83
00:05:35,370 --> 00:05:41,380
Just look up Django custom template tags and this would all be in there so you end up doing is first

84
00:05:41,710 --> 00:05:45,020
you need to actually register all of this.

85
00:05:45,240 --> 00:05:50,940
So you will say from Django import.

86
00:05:51,070 --> 00:05:53,120
And that's going to be template.

87
00:05:53,320 --> 00:05:56,090
And then you create an object called register.

88
00:05:56,400 --> 00:06:01,400
You said it equal to template dot and it's a library.

89
00:06:01,630 --> 00:06:04,670
And actually this should be capital.

90
00:06:04,680 --> 00:06:05,500
There we go.

91
00:06:05,550 --> 00:06:08,050
So register equals template library.

92
00:06:08,370 --> 00:06:12,900
And then what you're going to do is write a function that will be your custom template filter.

93
00:06:12,900 --> 00:06:18,420
So we can say the F and let's follow the one that's in the documentation example such as cut.

94
00:06:18,750 --> 00:06:24,960
And this is the one that takes in an actual value so that's whatever the variable or value from your

95
00:06:24,960 --> 00:06:28,250
context dictionary going to pass and then any additional argument.

96
00:06:28,260 --> 00:06:34,580
So we'll just call that Arg and we'll say what this function does.

97
00:06:34,590 --> 00:06:44,710
So it is good to give it a docstring will say This cuts out all values of arg.

98
00:06:45,630 --> 00:06:53,080
From the string and then what we're going to do is we'll say return and we'll grab that value.

99
00:06:53,080 --> 00:06:55,070
We're going to assume it's a string.

100
00:06:55,390 --> 00:06:58,380
Again you're going have to be careful with your kind of assumptions here.

101
00:06:59,280 --> 00:07:03,110
And then we'll say arg and then that.

102
00:07:03,120 --> 00:07:09,390
So basically you can call the replace method off a python string and then pass in what you're looking

103
00:07:09,390 --> 00:07:11,470
for and then what you want to replace it with.

104
00:07:11,520 --> 00:07:14,390
This is a really common Python string operation.

105
00:07:14,550 --> 00:07:19,470
So we're just kind of putting this whole thing and wrapping it into this nice little custom filter called

106
00:07:19,560 --> 00:07:20,210
cut.

107
00:07:20,520 --> 00:07:22,950
And then what we need to do is register this.

108
00:07:22,950 --> 00:07:37,340
So what we do is over here we can say register dot filter and I pass in as a string what I actually

109
00:07:37,340 --> 00:07:39,620
want to call this filter.

110
00:07:39,620 --> 00:07:44,840
So when I call it in my custom filter template tag we'll just call it cut and then you have to actually

111
00:07:44,840 --> 00:07:46,160
pass in the function itself.

112
00:07:46,160 --> 00:07:48,980
You just create it which in this case is also cut.

113
00:07:49,010 --> 00:07:52,810
So the first one is going to be the string that you call the function when you use the template tag.

114
00:07:52,940 --> 00:07:54,470
The second one is the function itself.

115
00:07:54,470 --> 00:07:57,320
So it's not a string just a direct call to this function.

116
00:07:57,720 --> 00:07:58,230
OK.

117
00:07:58,550 --> 00:08:02,450
So that's the very basics and kind of in the order that you're thinking of.

118
00:08:02,660 --> 00:08:08,430
So from Gengel import template register then you create whatever custom template filter.

119
00:08:08,450 --> 00:08:09,740
And then here it is.

120
00:08:09,740 --> 00:08:10,960
So let's actually try this out.

121
00:08:10,960 --> 00:08:13,760
Now it's coming back to our index.

122
00:08:13,760 --> 00:08:17,630
Let each team page instead of saying text upper.

123
00:08:17,720 --> 00:08:25,670
We're going to do is this will say text and then we're going to say cuts and then let's cut out the

124
00:08:25,670 --> 00:08:26,710
term.

125
00:08:26,810 --> 00:08:28,230
Hello.

126
00:08:28,240 --> 00:08:34,260
So I will save this and let's bring back in our project over here.

127
00:08:34,330 --> 00:08:37,510
And if I refresh this no it cut off.

128
00:08:37,510 --> 00:08:38,120
Hello.

129
00:08:38,290 --> 00:08:44,130
So that was our own custom filter cut and it cuts out anything that would place as a parameter.

130
00:08:44,360 --> 00:08:48,010
And that's the very basics of how you can create your own custom filter.

131
00:08:48,010 --> 00:08:52,390
Now as a quick note there is another way to register the filter itself.

132
00:08:52,390 --> 00:08:58,870
So if we come back here under a template tagged in it and then my extras we registered using this register

133
00:08:58,870 --> 00:09:00,690
equals template library.

134
00:09:00,880 --> 00:09:05,040
That is one way to do it but you can also do it with decorator's and it looks a little cleaner.

135
00:09:05,080 --> 00:09:11,650
So remember back when we were introducing decorators in the Python level 2 section of the course I mentioned

136
00:09:11,680 --> 00:09:17,570
that later on in Django I would talk about decorator's and then advise you to go back.

137
00:09:17,590 --> 00:09:18,970
So this is that time.

138
00:09:18,970 --> 00:09:23,160
If you haven't learned about decorator's yet now's the time to go to the decorator's lecture.

139
00:09:23,170 --> 00:09:23,830
Go through it.

140
00:09:23,830 --> 00:09:27,800
It's a little complicated but it'll make a lot more sense when you actually see it here.

141
00:09:27,820 --> 00:09:33,130
So I'm going to comment this out this register that filter since I'm passing in essentially what is

142
00:09:33,130 --> 00:09:35,430
a function into another function call.

143
00:09:35,710 --> 00:09:36,700
I will do this.

144
00:09:36,760 --> 00:09:45,760
We can say at register that filter and then give it the name equal to cut

145
00:09:48,610 --> 00:09:51,620
save this and now we're going to do to make sure this all worked.

146
00:09:51,640 --> 00:09:59,570
It's come back to index and instead of cutting a flow and going to cut world save that as well and then

147
00:09:59,600 --> 00:10:03,130
bring in an actual browser refresh this.

148
00:10:03,140 --> 00:10:04,780
And here we see just hello.

149
00:10:04,810 --> 00:10:10,970
So world got cut out and that's how you can use decorator's to actually registered these custom filters.

150
00:10:10,970 --> 00:10:15,970
And this looks kind of a lot nicer and a lot clearer especially if you already know decorator's.

151
00:10:16,010 --> 00:10:16,510
All right.

152
00:10:16,700 --> 00:10:18,530
So that's it for templates.

153
00:10:18,530 --> 00:10:22,760
There's still a lot more you can explore in the documentation but this should be enough for you to create

154
00:10:22,760 --> 00:10:26,570
basically any normal Web site that you want to work with.

155
00:10:26,570 --> 00:10:29,260
Thanks everyone and I'll see you at the next section of the course.
