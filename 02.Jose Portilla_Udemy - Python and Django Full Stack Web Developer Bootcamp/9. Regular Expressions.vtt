WEBVTT
1
00:00:05.290 --> 00:00:06.030
Hello everyone.

2
00:00:06.030 --> 00:00:12.350
Welcome to part a regular expressions regular expressions allow us to search for patterns in Python

3
00:00:12.350 --> 00:00:17.200
strings and they can seem incredibly intimidating at first due to their strange syntax.

4
00:00:17.360 --> 00:00:21.410
We're going to be walking through the basics of regular expressions and we will use them in Gengel when

5
00:00:21.410 --> 00:00:23.440
we talk about you or else.

6
00:00:23.450 --> 00:00:25.040
All right let's get started.

7
00:00:25.130 --> 00:00:31.160
OK let's begin with the very basics of regular expressions and we can start by importing the r e module

8
00:00:31.160 --> 00:00:32.550
for regular expressions.

9
00:00:33.690 --> 00:00:38.890
In one of the most common use cases for the regular expression module is to find patterns in text.

10
00:00:39.070 --> 00:00:45.970
So I'm going to create a list called patterns and will say term one and term two.

11
00:00:45.970 --> 00:00:51.340
So these are the patterns I'm going to be looking for and then I'm going to have some text to actually

12
00:00:51.340 --> 00:00:52.510
parse.

13
00:00:52.510 --> 00:01:01.250
So I'll say this is a string with term one but not the other.

14
00:01:01.270 --> 00:01:08.710
So now has term one inside of it but it doesn't have the actual other term and then what I'm going to

15
00:01:08.710 --> 00:01:23.430
do is say for pattern in patterns I'm going to say Prince I'm searching for and then I'm going to say

16
00:01:24.330 --> 00:01:25.820
pattern.

17
00:01:25.930 --> 00:01:30.700
So if we save and run this right now shouldn't be anything of much consequence but let's make sure everything's

18
00:01:30.700 --> 00:01:31.940
working.

19
00:01:31.960 --> 00:01:36.670
So Python notes that PI entered says I'm searching for term one I'm searching for term too.

20
00:01:37.000 --> 00:01:40.640
So let's show you how you can use the regular expressions model to actually make that search.

21
00:01:40.690 --> 00:01:47.290
So I'm first going to check if there's a match so I call R E dot and then the search function for that.

22
00:01:47.350 --> 00:01:53.530
And it takes two main parameters the pattern and the string so it stands through the string to find

23
00:01:53.530 --> 00:01:54.370
the pattern.

24
00:01:54.400 --> 00:02:02.690
So the first thing to do is say search passen the pattern I'm looking for and then pass in the text.

25
00:02:02.700 --> 00:02:03.950
I want to search for.

26
00:02:04.250 --> 00:02:07.410
And this returns true if it finds a match.

27
00:02:08.600 --> 00:02:22.030
So if we find the match We're going to say match else will say Prince non-match save this.

28
00:02:22.060 --> 00:02:23.410
And now let's run the code.

29
00:02:24.530 --> 00:02:30.160
In here we can say when I search for term one I find the match because it's inside that text I'm searching

30
00:02:30.160 --> 00:02:31.080
for Turn 2.

31
00:02:31.090 --> 00:02:31.840
There is no match.

32
00:02:31.870 --> 00:02:33.470
It's not inside that text.

33
00:02:33.530 --> 00:02:40.000
So our search very simple function pass the pattern you're looking for in text you want to search and

34
00:02:40.000 --> 00:02:43.970
you get back a boolean value indicating if it's inside that.

35
00:02:44.110 --> 00:02:50.670
Now often you don't want the actual boolean value you want the actual location.

36
00:02:50.830 --> 00:02:57.640
And if we take a closer look at this our search will notice that it doesn't actually return a straight

37
00:02:57.640 --> 00:02:58.360
boolean value.

38
00:02:58.360 --> 00:02:59.640
It's actually not true or false.

39
00:02:59.650 --> 00:03:02.450
It returns a special matched type.

40
00:03:02.530 --> 00:03:03.940
Turns a match object.

41
00:03:03.940 --> 00:03:08.640
And let me show that to you by getting rid of this.

42
00:03:08.650 --> 00:03:15.850
Now let's take this all out of the if loop and it's sort of saying our search and we say match is equal

43
00:03:15.850 --> 00:03:17.350
to this.

44
00:03:17.350 --> 00:03:19.190
Now let's get rid of that colon here.

45
00:03:20.080 --> 00:03:29.420
And then I'm going to say prints the type of that match object save this run our code again and wups

46
00:03:30.400 --> 00:03:34.430
actually say term 1 just do one of them here.

47
00:03:34.440 --> 00:03:38.320
So I don't need this patterns anymore save this now run it.

48
00:03:38.730 --> 00:03:42.580
And look what we get here before we are treating it as just a straight boolean value.

49
00:03:42.720 --> 00:03:47.540
But it's actually this special regular expressions match object.

50
00:03:47.550 --> 00:03:49.080
So what does it actually mean.

51
00:03:49.080 --> 00:03:54.180
Will this match object returned by the search method is more than just that boolean or none.

52
00:03:54.210 --> 00:03:56.300
It contains information about the match.

53
00:03:56.340 --> 00:04:01.500
So this object already contains information about where the match starts and where the match ends.

54
00:04:01.560 --> 00:04:07.410
Second grab it just by saying this matched dot start close parentheses.

55
00:04:07.410 --> 00:04:10.790
Now if I run this I actually get back in integer.

56
00:04:10.800 --> 00:04:17.130
Whoops that should have been outside of this type save this and I run it again.

57
00:04:17.320 --> 00:04:21.190
Now I can see it starts an index position 22 within the string.

58
00:04:21.190 --> 00:04:25.840
And to prove that to you let's make this text just say term 1.

59
00:04:25.900 --> 00:04:29.100
So I would expect the match to begin straight at index 0.

60
00:04:29.110 --> 00:04:35.350
So if I run this code again I get back the number 0 here which makes sense because my match starts at

61
00:04:35.430 --> 00:04:38.180
0 in regular expressions.

62
00:04:38.180 --> 00:04:42.250
Also have the ability to split a string on a particular pattern.

63
00:04:42.290 --> 00:04:52.030
So if I say something like let's say split term split term is equal to we'll call it the at symbol.

64
00:04:52.030 --> 00:05:01.960
Maybe we want to split something I can say that my phrase will just say e-mail is equal to user at gmail

65
00:05:01.960 --> 00:05:03.630
dot com.

66
00:05:03.780 --> 00:05:12.760
And then instead of E that search I can say are we split and then grab the split term and then pasand

67
00:05:12.780 --> 00:05:14.520
the e-mail address.

68
00:05:14.520 --> 00:05:18.720
Now let's just print that out and see what we get.

69
00:05:20.780 --> 00:05:28.350
Save that comment that out and then run our code and here I get a split on that simple user and G-mail.

70
00:05:28.370 --> 00:05:30.000
And we've seen this before.

71
00:05:30.020 --> 00:05:35.120
This is actually built in already to strings so you could just say split as a method off of this on

72
00:05:35.120 --> 00:05:36.080
the at symbol.

73
00:05:36.080 --> 00:05:38.060
But it comes from the regular expression library.

74
00:05:38.060 --> 00:05:39.140
So just keep that in mind.

75
00:05:39.350 --> 00:05:41.020
It's already built into strings.

76
00:05:41.030 --> 00:05:41.230
OK.

77
00:05:41.240 --> 00:05:44.700
So we learn how to find the match and we learn how to do a split.

78
00:05:44.720 --> 00:05:49.340
Now a lot of times there are more complicated patterns that you're going to be looking for or maybe

79
00:05:49.340 --> 00:05:54.920
you want to find all the instances of a pattern and you can use are either find all the find all the

80
00:05:54.920 --> 00:06:02.300
instances of a pattern in a string Let me show you what I mean by that going to clear all this and clear

81
00:06:02.300 --> 00:06:03.150
this as well.

82
00:06:04.200 --> 00:06:11.130
And I will say are either find all that Adam actually helping us here again it just takes a pattern

83
00:06:11.130 --> 00:06:16.970
or a string and returns a list of all non overlapping matches in the string.

84
00:06:17.160 --> 00:06:29.400
So I say something like match and then let's say test phrase match in middle they actually print the

85
00:06:29.400 --> 00:06:32.810
results of this out so I can see it when I run my code.

86
00:06:33.530 --> 00:06:36.740
I will save this run Python notes up high.

87
00:06:36.830 --> 00:06:43.490
And here I can see if I get a list of match and if I add match one more time in there run this again

88
00:06:43.820 --> 00:06:48.520
I can see I get a list of two matches so I could also just check the length of find all.

89
00:06:48.920 --> 00:06:54.320
OK so we learned about the very basics of regular expression library calls that split that search call

90
00:06:54.320 --> 00:06:55.510
the match object.

91
00:06:55.670 --> 00:07:00.530
But what we're really going to be spending the bulk of this lecture when using regular expressions is

92
00:07:00.530 --> 00:07:02.840
what is known as the Medich character syntax.

93
00:07:02.840 --> 00:07:07.940
And if you've programmed with perl before this sort of syntax is going to be familiar if you but probably

94
00:07:07.940 --> 00:07:11.580
for the most of you it's going to seem really strange at first but don't worry.

95
00:07:11.600 --> 00:07:17.030
The idea here is not to memorize everything we show but just to be able to use it as a reference.

96
00:07:17.030 --> 00:07:22.140
Come back to this lecture or look up regular expression plus Python Google and be able to answer your

97
00:07:22.140 --> 00:07:22.980
own questions.

98
00:07:23.000 --> 00:07:28.460
But let's start off by actually just showing an example in order to show examples of multiple examples

99
00:07:28.460 --> 00:07:33.470
at once actually we are going to create a helper function and this helper function is going to be called

100
00:07:33.570 --> 00:07:36.280
Multiply R E find.

101
00:07:36.880 --> 00:07:44.020
And what it is is it's going to take in a list of patterns and some phrase and then it's going to go

102
00:07:44.020 --> 00:07:49.390
through those patterns so for Pat and patterns we're going to do say Prince

103
00:07:52.950 --> 00:08:03.400
searching for pattern and then let's say that forma and up and pat there.

104
00:08:03.640 --> 00:08:13.210
And then I'm going to print R E find all of Pat and the phrase.

105
00:08:13.460 --> 00:08:17.610
And then I will print a newline because we're going to do this multiple times.

106
00:08:17.820 --> 00:08:21.980
So let's save that and that's a function we're going to be using often.

107
00:08:21.990 --> 00:08:28.170
So let's start off with repetition syntax and there are five ways to express repetition in a pattern

108
00:08:28.920 --> 00:08:34.650
a pattern followed by the Medak character Asterix is repeated 0 or more times.

109
00:08:34.680 --> 00:08:37.260
So for instance let's get a test phrase here

110
00:08:40.870 --> 00:08:53.500
and this test phrase going to be s d s d dot dot s s s d d d that S D D D D S D D D D and you can copy

111
00:08:53.500 --> 00:08:57.200
and paste this from the notes so you don't have to listen to me talk.

112
00:08:57.400 --> 00:09:05.890
And then we had a bunch of S's three dots here and then S and a bunch of these.

113
00:09:05.910 --> 00:09:14.370
So the test pattern that I'm first going to test out here so test patterns again it's a list and I'm

114
00:09:14.370 --> 00:09:17.560
going to say SD Asterix.

115
00:09:17.670 --> 00:09:18.960
So here's my test pattern.

116
00:09:18.990 --> 00:09:27.750
And what this stands for is I want to find an s followed by 0 or more these and keep in mind that kind

117
00:09:27.750 --> 00:09:31.600
of strange wording 0 or more these.

118
00:09:31.830 --> 00:09:39.690
So we're going to do now is call multi-site r e fine with my test patterns and I'm going to pass in

119
00:09:39.690 --> 00:09:41.340
my test phrase.

120
00:09:41.730 --> 00:09:47.180
Let's save this and run this and see what we get out Sify scroll up here.

121
00:09:47.290 --> 00:09:54.280
I pretty much get back every instance of where there is an S I get s d s s d d d etc. which makes sense

122
00:09:54.280 --> 00:10:03.100
because when you're using the asterisks this returns this pattern S-D followed by anything repeated

123
00:10:03.100 --> 00:10:07.400
several more times so essentially you're kind of asking for almost anything.

124
00:10:08.720 --> 00:10:11.060
Anything that starts an S at least.

125
00:10:11.060 --> 00:10:15.440
So again the key thing with this Asterix and let me kind of separate it this out so we can kind of get

126
00:10:15.440 --> 00:10:16.490
an idea here.

127
00:10:16.490 --> 00:10:23.150
It's going to be an s followed by 0 or more Ds and the Asterix is attached to that d there.

128
00:10:24.050 --> 00:10:27.500
And later on we'll show you how to attach it to more than one letter.

129
00:10:27.500 --> 00:10:27.990
OK.

130
00:10:28.250 --> 00:10:33.730
So that's not very helpful to just search for anywhere where there's an s followed by zero or more Ds.

131
00:10:33.950 --> 00:10:37.120
So if we want it by one or more of these we put a plus sign.

132
00:10:38.350 --> 00:10:43.240
So if we look at the results here this was 0 or more Ds which basically asked for anywhere there's an

133
00:10:43.240 --> 00:10:44.200
s.

134
00:10:44.200 --> 00:10:50.840
Now if I run it with one or more DS I get back these values and this makes a lot more sense.

135
00:10:50.900 --> 00:10:55.330
Here I get s where it is followed by any count of these.

136
00:10:55.330 --> 00:11:05.580
Now if I want it to be just 0 or 1 time I can put a question mark so I'm going to put a question mark

137
00:11:05.580 --> 00:11:05.950
here.

138
00:11:05.970 --> 00:11:07.170
Save this.

139
00:11:07.170 --> 00:11:08.130
Run it again.

140
00:11:08.130 --> 00:11:11.220
And now I get back where it was either zero or one time.

141
00:11:11.350 --> 00:11:13.580
Again not very helpful but it is available to you.

142
00:11:13.620 --> 00:11:15.470
That's the question marks in texts.

143
00:11:15.600 --> 00:11:18.950
You'll probably want to know how do I define a specific counts.

144
00:11:19.510 --> 00:11:24.760
So let's say I want to know what is it followed by three days where you use these curly brackets passen

145
00:11:24.790 --> 00:11:30.470
the number you're interested in and then run the code in here I can see wherever it was followed by

146
00:11:30.710 --> 00:11:33.690
three these which happened to be three instances here.

147
00:11:33.770 --> 00:11:35.070
The first one here.

148
00:11:35.180 --> 00:11:36.280
Second one here.

149
00:11:36.380 --> 00:11:42.200
Third one here and then four one over here if you want to specify two numbers.

150
00:11:42.200 --> 00:11:44.510
Maybe you're looking for two or three D's.

151
00:11:44.570 --> 00:11:51.100
You can just pass in two comma three in this run the code again and we see here two or three.

152
00:11:51.100 --> 00:11:53.540
These In this case there's no case.

153
00:11:53.540 --> 00:11:56.980
So let's try to make this one run this again.

154
00:11:57.050 --> 00:11:59.000
You know I see one or three of these.

155
00:11:59.060 --> 00:12:00.160
Great.

156
00:12:00.170 --> 00:12:04.160
OK so so far we've shown those special characters what the asterisk stands for.

157
00:12:04.190 --> 00:12:09.620
The plus sign the question mark and then curly brackets again and asterisks followed by zero or more

158
00:12:09.920 --> 00:12:12.020
a plus sign followed by one or more.

159
00:12:12.050 --> 00:12:17.150
The question mark followed by either 0 or 1 and then the curly brackets where you can define the actual

160
00:12:17.150 --> 00:12:19.250
number or pass in a list of numbers.

161
00:12:19.790 --> 00:12:30.110
So far if I show you what we've done like s D-plus that looks for s followed by one or more Ds Let's

162
00:12:30.110 --> 00:12:37.160
say I want to find s followed by several letters or several sealer letters.

163
00:12:37.160 --> 00:12:41.930
So I want to know where S is followed by either S or D.

164
00:12:41.960 --> 00:12:44.360
So again not together but separate here.

165
00:12:44.360 --> 00:12:50.240
So let me know is basically what I'm asking here where S is followed by one or more S's or one or more

166
00:12:50.240 --> 00:12:51.650
D's.

167
00:12:51.680 --> 00:12:54.960
So if I save this and run this we're going to get back a lot of results.

168
00:12:54.960 --> 00:13:01.250
So here are all the cases where the letter S is followed by either one or more S's or one or more Ds

169
00:13:03.020 --> 00:13:07.670
and this makes sense as far as our result because it basically shows you any statement that started

170
00:13:07.670 --> 00:13:08.730
with an s.

171
00:13:08.780 --> 00:13:12.170
So the statement started in as here sort of finesse here.

172
00:13:12.170 --> 00:13:13.450
Sort of an s here.

173
00:13:13.490 --> 00:13:16.180
Note that we all start off and ask until we get to the second letter.

174
00:13:16.220 --> 00:13:24.350
So that gets S-D us here as a success and then SDD the OK kind of weird and confusing I know but again

175
00:13:24.440 --> 00:13:29.080
we're looking more towards being able to reference this instead of memorizing it.

176
00:13:29.080 --> 00:13:34.560
Now I want to talk a little bit about exclusion and we can use the carrot symbol for exclusion.

177
00:13:34.900 --> 00:13:36.440
And let me show you how we can do that.

178
00:13:36.850 --> 00:13:45.400
So let's find a test phrase that isn't so strange and do something like this is a string exclamation

179
00:13:45.400 --> 00:13:50.030
mark but it has punctuation period.

180
00:13:50.040 --> 00:13:54.500
How can we remove it questionmark.

181
00:13:54.510 --> 00:13:54.850
All right.

182
00:13:54.900 --> 00:13:59.610
So often you're going to get a string and you want to strip it of all punctuation and the way we can

183
00:13:59.610 --> 00:14:06.480
do that with regular expressions is by using the carrot symbol which I type like this that carrot symbol

184
00:14:06.530 --> 00:14:09.490
shift that seeks to exclude terms.

185
00:14:09.630 --> 00:14:14.750
And for example we do is we end up passing it inside of square brackets.

186
00:14:15.970 --> 00:14:18.130
So square brackets curat symbol.

187
00:14:18.310 --> 00:14:22.210
And then you pasan any symbols that you're looking for.

188
00:14:22.210 --> 00:14:28.090
So for instance we'll look for an exclamation mark or period a question mark and then we say plus because

189
00:14:28.090 --> 00:14:30.620
we're looking for one or more instances of that.

190
00:14:30.820 --> 00:14:32.430
And that's the test pattern.

191
00:14:32.440 --> 00:14:38.830
OK so now if we run this I say Python notes stop PI look at the result I get back I essentially get

192
00:14:38.830 --> 00:14:44.200
back a list so searching for the pattern here but because it has this curat symbol it's going to remove

193
00:14:44.560 --> 00:14:48.630
anywhere you can essentially think of it as almost like a multiple split call.

194
00:14:48.970 --> 00:14:53.770
So you're saying find all but that special character the carrot lets it know that I want to essentially

195
00:14:53.770 --> 00:14:59.560
remove all this and then later I have this list I could just join it all back together or do whatever

196
00:14:59.560 --> 00:15:02.850
I wanted with the strings inside their OK.

197
00:15:02.910 --> 00:15:07.680
Now let's discuss a few more examples that we probably won't run into during the course but may be useful

198
00:15:07.680 --> 00:15:12.820
to actually see one of those is a sequence of lowercase characters.

199
00:15:12.850 --> 00:15:19.240
You can just say lowercase a dash lowercase Z this will return sequences of lowercase characters.

200
00:15:19.240 --> 00:15:23.470
If I run this now I see the sequences of all the lowercase characters.

201
00:15:23.470 --> 00:15:27.220
So this you see the capital-T has been removed.

202
00:15:27.220 --> 00:15:35.890
If I want sequences of uppercase characters I just capitalize a through Z here run this and then I get

203
00:15:35.890 --> 00:15:40.930
the capital letters and there's a lot more you can do if this sequence is of lower and upper case letters

204
00:15:41.290 --> 00:15:44.470
one uppercase letter followed by lower case letters etc..

205
00:15:44.590 --> 00:15:48.810
You can check out the notes for all those patterns but we will be using these too often.

206
00:15:49.000 --> 00:15:53.380
And then finally you can use escape codes their special Escape codes to find specific types of patterns

207
00:15:53.650 --> 00:15:56.990
in your data such as digits non digits whitespace and more.

208
00:15:57.160 --> 00:16:01.140
And those are indicated using a backslash.

209
00:16:01.150 --> 00:16:06.860
So like I mentioned the escapes are indicated by prefixing the character with the backslash.

210
00:16:06.880 --> 00:16:12.420
Unfortunately a backslash must itself be escaped in a normal Python string.

211
00:16:12.520 --> 00:16:18.640
So the way we do that is by making it into a literal value with the letter R and this is where kind

212
00:16:18.640 --> 00:16:25.090
of looks really weird because it almost looks like it should give an error but we type in our outside

213
00:16:25.090 --> 00:16:29.860
of the string there then a backslash and then the special code for the escape.

214
00:16:29.860 --> 00:16:32.180
So for instance D.

215
00:16:32.410 --> 00:16:37.240
And then we can say plus here and this is the kind of regular expression that you look at it and it

216
00:16:37.270 --> 00:16:38.970
almost looks like a different language.

217
00:16:39.100 --> 00:16:43.390
You think it's an error it's not going to be Python but this will actually work and this will return

218
00:16:43.390 --> 00:16:45.040
back a sequence of digits.

219
00:16:45.040 --> 00:16:49.070
Let me change the string to something more appropriate with.

220
00:16:49.360 --> 00:16:56.440
This is a string with numbers put in some numbers there and a symbol.

221
00:16:56.440 --> 00:17:04.520
And for the symbol we can put something like hash tag we will save that and then if I run this code

222
00:17:05.210 --> 00:17:11.090
I get back the numbers so lowercase D is essentially a special character code saying search for those

223
00:17:11.090 --> 00:17:13.900
numbers are digits not digits.

224
00:17:13.970 --> 00:17:22.080
That's a capital D run this and I get back all the digits so I want a sequence of whitespace.

225
00:17:22.150 --> 00:17:23.730
That's a lowercase s.

226
00:17:23.770 --> 00:17:30.470
Again all of these have the escape backslash and the R and then I get a list of all the whitespace.

227
00:17:30.470 --> 00:17:31.460
Not super useful.

228
00:17:31.460 --> 00:17:36.830
Also want to count how much whitespace there is capital S for the nonwhite space we can get the idea

229
00:17:36.830 --> 00:17:42.490
that capital kind of goes with non So all the non whitespace.

230
00:17:42.530 --> 00:17:49.640
If I want all the alphanumeric characters those are letters and numbers I can do a lowercase w not giving

231
00:17:49.640 --> 00:17:51.660
back all the alphanumeric.

232
00:17:51.800 --> 00:17:57.890
If I want the non-alphanumeric that's going to be something like the hash tag I can do a capital W and

233
00:17:57.890 --> 00:18:01.310
that gives me a bunch of blanks and then I get the hash tag there.

234
00:18:01.400 --> 00:18:04.230
So the spaces are also non-alphanumeric.

235
00:18:04.550 --> 00:18:06.170
OK so in conclusion.

236
00:18:06.170 --> 00:18:10.700
By now you should have a solid understanding of how to be able to reference the regular expressions.

237
00:18:10.700 --> 00:18:15.170
Now there are a ton of more special character instances and if I say something in the jingoes section

238
00:18:15.200 --> 00:18:20.120
that we haven't covered yet I'll be sure to kind of give a little extra explanation of what we're doing.

239
00:18:20.150 --> 00:18:23.600
We will do anything super intensive for regular expressions in Jingo.

240
00:18:23.600 --> 00:18:28.520
Essentially we'll be just using them with you or else to kind of figure out OK am I going to dot com

241
00:18:28.520 --> 00:18:33.210
slash admen or slash views slash or else slash etc..

242
00:18:33.480 --> 00:18:33.910
OK.

243
00:18:34.160 --> 00:18:38.780
Hopefully you weren't super intimidated by this and you got a little bit of a good feel for what to

244
00:18:38.780 --> 00:18:41.300
expect when you're viewing regular suppressions again.

245
00:18:41.360 --> 00:18:43.580
I don't expect you to memorize any of this.

246
00:18:43.580 --> 00:18:45.610
Thanks everyone and I'll see you at the next lecture.
