WEBVTT
1
00:00:05.110 --> 00:00:10.880
Hello everyone and welcome to the forum validation lecture and this lecture are going to be discussing

2
00:00:10.880 --> 00:00:16.640
hidden fields and how we can use them for custom field validation that we or form is currently set up

3
00:00:16.640 --> 00:00:18.110
in our previous project.

4
00:00:18.140 --> 00:00:24.200
It's actually pretty open not only to users who maybe misused a form or give bad information but also

5
00:00:24.200 --> 00:00:31.460
potentially to bots that is automated scripting programs that come in and fill junk information into

6
00:00:31.460 --> 00:00:37.550
your form on your Web site Django has actually built in validators you can conveniently use to validate

7
00:00:37.550 --> 00:00:43.580
your forms not just for user misbehavior but also for bots and everything we do here is going to be

8
00:00:43.580 --> 00:00:45.620
limited to the forms that PI file.

9
00:00:45.620 --> 00:00:50.110
So instead of going through the concepts in slides we're going to jump straight into coding at all out

10
00:00:51.130 --> 00:00:55.510
and we'll use the basic app from the previous lecture so you can either just download that from the

11
00:00:55.510 --> 00:00:59.640
notes or if you work along to the previous solution lecture have it ready to go.

12
00:00:59.990 --> 00:01:02.500
OK we'll do three main tasks here.

13
00:01:02.560 --> 00:01:08.620
We'll add a check for empty fields we'll add a check for a bot and then we'll show you how to use a

14
00:01:08.620 --> 00:01:10.860
clean method for the entire form.

15
00:01:10.900 --> 00:01:14.000
OK let's hop over to the editor and let's get started.

16
00:01:14.360 --> 00:01:14.680
OK.

17
00:01:14.680 --> 00:01:16.410
Here you have the editor open.

18
00:01:16.420 --> 00:01:20.950
I have the forms that PI file that was under basic app for your application.

19
00:01:20.950 --> 00:01:24.430
Remember we have three basic inputs the name the e-mail and the text.

20
00:01:24.430 --> 00:01:29.720
And over here on the right I have a browser that's connected to my local host.

21
00:01:29.770 --> 00:01:32.840
Right now I'm actually not running the server so let's check it out.

22
00:01:32.930 --> 00:01:43.190
Going to say Python managed up PI runs server enter and I can see that servers here so let's refresh

23
00:01:43.190 --> 00:01:46.850
this page and then it says Welcome to the home page from last time.

24
00:01:46.850 --> 00:01:50.980
And let's type in slash form page go to it.

25
00:01:51.020 --> 00:01:53.490
Here you see the name email and text.

26
00:01:53.720 --> 00:02:01.360
So again remember if I type in a name type in some email type in some text and they hit submit actually

27
00:02:01.360 --> 00:02:05.440
get it printed out to the consul name email and text.

28
00:02:05.440 --> 00:02:10.120
Now let's start off by looking at how we can use hidden fields.

29
00:02:10.330 --> 00:02:15.880
Now a hidden field is something that remains in the HTML that is actually hidden from the user.

30
00:02:15.910 --> 00:02:21.700
And a lot of times we can actually use these to try to catch malicious bots on our Web site and I'm

31
00:02:21.700 --> 00:02:23.310
going to collapse the directory here.

32
00:02:23.320 --> 00:02:31.440
So we get a little more space and let's create a field called bot catcher we'll call forms.

33
00:02:31.450 --> 00:02:40.460
It'll be a character field and will pass in the requirements or required parameter to be false.

34
00:02:40.610 --> 00:02:46.100
And the reason we want to specify that required is equal to false is because when we actually have this

35
00:02:46.160 --> 00:02:51.530
field it's not going to show up on the page for the user it's only in the temple in the background so

36
00:02:51.530 --> 00:02:55.310
we actually need to inspect the page so you can see that bug catcher exists.

37
00:02:55.340 --> 00:02:56.960
Now we'll show that in just a moment.

38
00:02:57.840 --> 00:03:02.540
And then the next thing we want to do is find what widget we're using.

39
00:03:02.750 --> 00:03:09.350
So the widget parameter is going to be from forms and instead of a text area or a checkbox or something

40
00:03:09.350 --> 00:03:16.190
like that we're going to be using a hidden input and that's what is going to allow us to hide this from

41
00:03:16.190 --> 00:03:18.090
a typical human user.

42
00:03:18.260 --> 00:03:20.090
And you can also give a label here.

43
00:03:20.090 --> 00:03:21.410
We won't need to do that.

44
00:03:21.440 --> 00:03:23.500
So it's actually just close that off.

45
00:03:24.730 --> 00:03:26.080
Those are the only two parameters we need.

46
00:03:26.080 --> 00:03:35.680
So if I save this and my page reloads if I refresh and let's actually say ansible submit one more time

47
00:03:36.310 --> 00:03:37.880
refresh it continue.

48
00:03:37.960 --> 00:03:45.220
And I'm going to inspect the page and in the elements actually that need to check that the styles would

49
00:03:45.230 --> 00:03:50.450
collapse that I expand the body says fill out the form.

50
00:03:50.650 --> 00:04:00.280
I expand the form and I see not just my C S R F member that token but if I expand this I also see that

51
00:04:00.280 --> 00:04:02.340
I have this but Katcher input.

52
00:04:02.560 --> 00:04:07.250
So remember that the SRF that's also helping the security of your website.

53
00:04:07.300 --> 00:04:12.580
You can see it actually has this basically a random code value that's randomly generated for the user

54
00:04:12.580 --> 00:04:15.670
site and jiggles going to check that matches on the backend.

55
00:04:15.700 --> 00:04:20.890
And that's just an extra layer of security to make sure that the input you put on the form isn't going

56
00:04:20.890 --> 00:04:23.520
to some other web site or vice versa.

57
00:04:24.560 --> 00:04:31.010
Now the input that we just made was bug catcher which is given the I.D. automatically ID underscore

58
00:04:31.160 --> 00:04:32.060
ratcatcher.

59
00:04:32.240 --> 00:04:37.010
It's given the name back catcher and the type is hidden and basically it's going to going to happen

60
00:04:37.010 --> 00:04:42.900
here is if a bot visits your page they will not look at the actual Web site.

61
00:04:43.010 --> 00:04:48.140
What they're going to try to do is look directly into the T.M. and then they're going to try to automatically

62
00:04:48.140 --> 00:04:52.400
fill in value attributes and then submit the form that way.

63
00:04:52.400 --> 00:05:00.770
Now if I am actually acting like a bot I would say add an attribute actually add an attribute here and

64
00:05:00.770 --> 00:05:03.530
the bot would come in at a value and say

65
00:05:05.980 --> 00:05:08.500
hello friends.

66
00:05:10.210 --> 00:05:12.010
Maybe they give you that value.

67
00:05:12.130 --> 00:05:13.050
You hit submit.

68
00:05:13.240 --> 00:05:15.990
And right now the way it's working.

69
00:05:16.060 --> 00:05:17.500
Nothing is really happening here.

70
00:05:17.500 --> 00:05:19.330
So again bear that in.

71
00:05:19.330 --> 00:05:19.900
Hit submit.

72
00:05:19.900 --> 00:05:22.530
You can see my extra characters are being added.

73
00:05:22.530 --> 00:05:29.080
So just to prove that one more time if I type Z Z it shows up here the way we want to actually catch

74
00:05:29.080 --> 00:05:32.100
the bot is by validating this particular input.

75
00:05:32.110 --> 00:05:37.850
So let's show you how to do that now so I'll show you first the most basic method of validation which

76
00:05:37.850 --> 00:05:42.620
is using a clean function or a clean method inside of your class form and then later we'll show you

77
00:05:42.620 --> 00:05:44.600
the built in tools that Django has.

78
00:05:44.600 --> 00:05:50.990
You don't have to do this every time so every time you want to create your own custom validator using

79
00:05:50.990 --> 00:05:53.830
this default method you need to say d f.

80
00:05:53.840 --> 00:05:55.510
So a method inside this class.

81
00:05:55.670 --> 00:06:00.270
These are the keyword clean underscore and then whatever name of the field you're checking.

82
00:06:00.290 --> 00:06:02.090
In this case it's but catcher.

83
00:06:02.090 --> 00:06:03.380
So you can just copy and paste that.

84
00:06:03.410 --> 00:06:09.260
So then jingoes going to automatically look for methods inside this class that start with clean underscore

85
00:06:09.410 --> 00:06:16.660
and then see if this matches any of the fields there remembers a feel inside of a class so you self.

86
00:06:16.850 --> 00:06:18.930
And then this is what should be a colon.

87
00:06:19.010 --> 00:06:19.390
OK.

88
00:06:19.390 --> 00:06:27.820
So and So what I'm going to do first I will say but Katcher is equal to self dot and then I'm going

89
00:06:27.820 --> 00:06:29.900
to call the clean data.

90
00:06:30.900 --> 00:06:38.020
And actually grab what but Katcher return over here from my forms and then I'm going to check if the

91
00:06:38.200 --> 00:06:40.380
links.

92
00:06:40.640 --> 00:06:44.780
But Katcher is greater than zero.

93
00:06:44.780 --> 00:06:49.970
It could also just say if length by Katcher but this might be a little easier to read which means so

94
00:06:49.970 --> 00:06:55.280
if there's any actual length to the value that's a return and by catcher that they know some robot came

95
00:06:55.280 --> 00:06:57.440
in and scraped the page and fill the needs.

96
00:06:57.440 --> 00:06:59.940
Tim L A human would never actually do that.

97
00:07:01.220 --> 00:07:08.110
And then we're going to say raise an air and there's lots of different areas you can raise and you won't

98
00:07:08.110 --> 00:07:12.220
really have to worry about memorizing any of this because we'll move on to builtin validators.

99
00:07:12.370 --> 00:07:16.840
But just to give you an idea the most basic when you're going to raise is a validation.

100
00:07:16.930 --> 00:07:18.310
Kind of makes sense.

101
00:07:18.550 --> 00:07:26.670
And then we have something we can return which are reprinted the cons. And we'll say Gotcha.

102
00:07:27.290 --> 00:07:31.610
So I want to raise the air will return like Hatra itself.

103
00:07:33.120 --> 00:07:36.970
So we save that it's reloaded here since we made a change.

104
00:07:37.170 --> 00:07:40.130
And now let's try coming to this again.

105
00:07:40.200 --> 00:07:45.270
So go to the home page and then go to the Forum page.

106
00:07:45.290 --> 00:07:46.980
We're going to fill out the form.

107
00:07:47.340 --> 00:07:54.230
So the name will say Mr. Robot the e-mail can say it's Elliott.

108
00:07:54.330 --> 00:07:55.360
Evil core.

109
00:07:55.590 --> 00:08:02.340
And then we'll say hello is the text and then if you're a bot what you're going to do is you'll come

110
00:08:02.340 --> 00:08:02.780
to this.

111
00:08:02.790 --> 00:08:06.530
But catcher since Remember you're actually filling in all in three days Tim.

112
00:08:06.660 --> 00:08:15.270
And let's add an attribute here for the value no label it's sneaky since it's a sneaky bot trying to

113
00:08:15.960 --> 00:08:17.030
ruin your Web site.

114
00:08:17.040 --> 00:08:21.300
We hit submit and then we see what happens over here.

115
00:08:21.510 --> 00:08:24.790
Nothing actually got returned so we never actually printed anything.

116
00:08:24.990 --> 00:08:32.340
Because we end up raising that validation there so identify it submit here and actually end up returning

117
00:08:32.350 --> 00:08:33.000
anything.

118
00:08:34.830 --> 00:08:38.850
So again nothing's being printed out into the console because we're raising the validation error and

119
00:08:38.850 --> 00:08:43.440
if you actually look at the page the error has been out put it on the page it says hidden in field but

120
00:08:43.440 --> 00:08:44.390
catcher.

121
00:08:44.440 --> 00:08:45.030
Gotcha.

122
00:08:45.060 --> 00:08:50.370
So instead of actually printing out this user information name email and text we ended up actually grabbing

123
00:08:50.370 --> 00:08:51.320
that bot.

124
00:08:51.420 --> 00:08:52.060
Great.

125
00:08:52.080 --> 00:08:57.900
So that's the very basics of how you can use a clean underscore method instead of your form to do your

126
00:08:57.900 --> 00:08:59.340
own validation.

127
00:08:59.370 --> 00:09:03.390
But now let's show you how you would more realistically use validation once you're building your own

128
00:09:03.390 --> 00:09:11.100
web sites using jingoes built in validators OK let's continue by moving on to jingoes core builtin validators

129
00:09:11.100 --> 00:09:13.590
which will save you a lot of work in the future.

130
00:09:13.590 --> 00:09:17.730
So pretty much you'll never really do this clean underscore.

131
00:09:17.850 --> 00:09:19.730
But Katcher validation.

132
00:09:19.990 --> 00:09:25.880
Instead what you're going to and that do doing is using the jing of course I will say from Jingo that

133
00:09:25.890 --> 00:09:28.290
core import.

134
00:09:28.380 --> 00:09:31.320
And then you're going to import validators.

135
00:09:31.620 --> 00:09:39.290
So save that and then we are going to be doing is in your actual fields here you will passen a validators

136
00:09:40.900 --> 00:09:43.960
parameter so will say validators is equal to.

137
00:09:44.240 --> 00:09:47.690
And this is where we actually can pass in a list of validators.

138
00:09:47.690 --> 00:09:52.390
So what I'm doing is calling validators dots and then you can check the documentation.

139
00:09:52.400 --> 00:09:58.250
But there are a ton of already built in validators things like checking what's the maximum length of

140
00:09:58.250 --> 00:10:02.820
the input how many characters it has etc. and what we can do.

141
00:10:02.810 --> 00:10:05.470
Say you're one of the built in ones.

142
00:10:05.540 --> 00:10:06.620
So what are the built in ones.

143
00:10:06.620 --> 00:10:09.930
Is Max length validator.

144
00:10:09.980 --> 00:10:12.770
So that's a builtin method off of this validators.

145
00:10:12.770 --> 00:10:16.910
And what we can do is then just passen as a parameter a number here.

146
00:10:16.940 --> 00:10:22.460
And typically you'd want whatever the max length is a lot of times going to be 0 to check especially

147
00:10:22.460 --> 00:10:22.970
for a bot.

148
00:10:23.000 --> 00:10:23.700
Right.

149
00:10:23.750 --> 00:10:29.750
So basically we replaced all the work we just did with a simple import call import validators and then

150
00:10:29.750 --> 00:10:35.050
in all these fields you can always pasan a validators parameter and this can take in a list of alday.

151
00:10:35.060 --> 00:10:37.940
So it's not just limited to one can pass in more than one.

152
00:10:38.060 --> 00:10:43.250
So we can save that and then we're going to end up doing is running this again.

153
00:10:43.610 --> 00:10:52.090
So we'll come here and then I'm going to refresh the page so early that go back to the home page and

154
00:10:52.090 --> 00:10:54.270
then come back to form page.

155
00:10:54.550 --> 00:10:56.790
Fill out the form that really matter what we do.

156
00:10:56.860 --> 00:11:03.050
X x at gmail dot com x over here Athas matter.

157
00:11:03.350 --> 00:11:05.540
And then let's go in and do the bot again.

158
00:11:05.540 --> 00:11:14.200
So I will add an attribute value is equal to fulled.

159
00:11:14.240 --> 00:11:18.450
Make sure that matches hit enter and then Lisk hit submit.

160
00:11:18.650 --> 00:11:24.080
And no a Happens hit and field bug catcher and then we actually see jingoes built in validator message

161
00:11:24.080 --> 00:11:28.360
come back and sure this value has at most zero characters it has 6.

162
00:11:28.370 --> 00:11:28.790
Great.

163
00:11:28.790 --> 00:11:33.860
So you can see that Django already has even more information built in as a report back.

164
00:11:34.280 --> 00:11:39.190
OK so hopefully you see that this is way easier to use than that clean method we had.

165
00:11:39.200 --> 00:11:39.460
All right.

166
00:11:39.470 --> 00:11:44.540
Now that we've discussed jingoes builtin validators Let's talk about how you can make your own custom

167
00:11:44.540 --> 00:11:50.750
validators using the same sort of methodology of passing in a validators parameter.

168
00:11:50.820 --> 00:11:56.710
Imagine we wanted to check for the name field that it sort of started with a Z.

169
00:11:56.720 --> 00:12:01.060
We wanted to really make sure that for whatever reason the names had a start of a Z.

170
00:12:01.370 --> 00:12:06.530
Well maybe you didn't bother checking the documentation or can find anything for your specific validation

171
00:12:06.530 --> 00:12:07.720
of starting of a z.

172
00:12:07.760 --> 00:12:10.020
Or if a character starts for a certain letter.

173
00:12:10.040 --> 00:12:11.410
So we end up doing it.

174
00:12:11.410 --> 00:12:16.700
If you want to create your own pasan as a validators parameter you just create a function outside of

175
00:12:16.700 --> 00:12:19.210
the class and then you can name the function.

176
00:12:19.220 --> 00:12:29.170
So I will call this check for Z and the thing here is to make sure is that it takes in value and is

177
00:12:29.380 --> 00:12:33.550
the keywords going to help Django realize that this is going to act as a validator.

178
00:12:33.790 --> 00:12:39.760
All say if value whatever's returned here for this field in this case we're going to check for Zeese

179
00:12:39.760 --> 00:12:51.250
will say if value at 0 is not equal to the character Z and we can do further is do like lower here will

180
00:12:51.250 --> 00:12:55.460
raise and air raise forms.

181
00:12:56.880 --> 00:13:06.700
Validation error and say something like needs to start with the O.S. name.

182
00:13:06.940 --> 00:13:10.680
Just to make it clear save that and then inside this theme.

183
00:13:10.700 --> 00:13:16.800
What I can end up doing is saying validators is equal to and pass on a list and then just pass and my

184
00:13:16.800 --> 00:13:22.170
check receive function which since it takes in value Shingo knows it's a validator now so I will save

185
00:13:22.170 --> 00:13:28.580
this and let's make sure that my run server actually got real fast.

186
00:13:28.660 --> 00:13:30.810
I will refresh that.

187
00:13:30.820 --> 00:13:31.730
OK perfect.

188
00:13:31.740 --> 00:13:32.950
So now we're here.

189
00:13:32.960 --> 00:13:38.790
What I'm going to do save form page and then let's fill out the form first we'll fill out just Jose

190
00:13:40.810 --> 00:13:48.930
you Miller and some junk it submit and it says name to start wizzy perfect so we know our own custom

191
00:13:48.930 --> 00:13:55.590
validation is working let's make sure it is by passing and just Z here and then we'll say the same thing.

192
00:13:55.590 --> 00:13:56.680
And it took it in just fine.

193
00:13:56.730 --> 00:13:58.440
And it printed it out just fine.

194
00:13:58.890 --> 00:13:59.340
All right.

195
00:13:59.340 --> 00:14:02.440
So that is how you can make your own custom validation function.

196
00:14:02.640 --> 00:14:08.220
And this is usually a lot easier of an approach to take than that clean method we discussed earlier.

197
00:14:09.040 --> 00:14:09.390
OK.

198
00:14:09.410 --> 00:14:14.430
Now let's continue our discussion by talking about cleaning the entire form all at once.

199
00:14:14.660 --> 00:14:21.100
So we did see how we could create custom clean methods in our class for particular fields that we sometimes

200
00:14:21.140 --> 00:14:22.000
just want to do.

201
00:14:22.000 --> 00:14:26.750
One method that cleans the entire field and you don't want to worry about having to do something like

202
00:14:26.750 --> 00:14:28.130
an individual validator.

203
00:14:28.130 --> 00:14:29.080
So what do you do in that case.

204
00:14:29.090 --> 00:14:32.240
Well let's delete this check for Z.

205
00:14:32.310 --> 00:14:35.200
I'm going to remove this validator over here.

206
00:14:36.030 --> 00:14:41.490
We'll save that and we can check for but catcher that's fine actually you know we don't actually need

207
00:14:41.490 --> 00:14:42.050
that.

208
00:14:42.330 --> 00:14:47.300
Let's say we wanted to check something like a backup e-mail.

209
00:14:47.340 --> 00:14:52.050
So a lot of times when you go to a Web site you have to fill out your name and then fill out your email

210
00:14:52.230 --> 00:14:56.310
and then you have to verify your email you have to fill it in twice which makes sense because you don't

211
00:14:56.310 --> 00:15:02.310
want to have happen as you log into a page for the very first time or you're signing up that you mistype

212
00:15:02.310 --> 00:15:02.820
your email.

213
00:15:02.820 --> 00:15:05.910
Otherwise there's no way you'll ever get a message to that e-mail.

214
00:15:05.970 --> 00:15:15.660
So we can call what's a very common field as verify email and this is something you'll see often richer

215
00:15:15.730 --> 00:15:17.040
if you use the Internet.

216
00:15:17.350 --> 00:15:25.000
Once you've seen this and we'll have varify field and we're just going to give this a label to say something

217
00:15:25.000 --> 00:15:27.320
like Well that should be equal sorry.

218
00:15:27.670 --> 00:15:28.630
And I'll say

219
00:15:31.970 --> 00:15:35.630
to your e-mail again.

220
00:15:35.660 --> 00:15:40.980
So let's save that and let's refresh the page to make sure that actually works that continue.

221
00:15:41.080 --> 00:15:47.150
OK perfect so this field is required for e-mail again and you can use formatting and aged him to make

222
00:15:47.150 --> 00:15:49.460
this all look nice since I'm asking for paragraph.

223
00:15:49.460 --> 00:15:51.590
Everything is kind of going in there a line break.

224
00:15:51.590 --> 00:15:55.110
But again this would all be done with HTL or C styling.

225
00:15:55.130 --> 00:16:00.190
Right now what we really care about is how do we clean this entire form at once to actually grab the

226
00:16:00.200 --> 00:16:04.200
c.m. grab the second e-mail and make sure they actually match.

227
00:16:04.220 --> 00:16:10.430
Well just like we had the special clean method where you say clean underscore in the name of the field

228
00:16:10.430 --> 00:16:12.880
you want to check if you want to clean the entire form.

229
00:16:12.890 --> 00:16:18.170
All you do is just say clean and that will indicate the jingo that this is just a single clean method

230
00:16:18.540 --> 00:16:20.400
for the entire form at once.

231
00:16:21.490 --> 00:16:25.920
And what you can do here is call super.

232
00:16:26.060 --> 00:16:29.710
You know what this is going to do is grab all the clean data at once.

233
00:16:29.710 --> 00:16:34.120
So we'll type a new variable.

234
00:16:34.130 --> 00:16:42.430
Call it all clean data and then we call super close parentheses and then off of that you call the clean

235
00:16:42.430 --> 00:16:45.860
method and it's going to return all your clean data for the entire forms.

236
00:16:45.880 --> 00:16:53.890
You can deal it all at once and then off of this you can grab certain fields souls say email is equal

237
00:16:53.890 --> 00:17:02.780
to that all clean data and then say using Brecken notation because it's basically a dictionary grab

238
00:17:02.790 --> 00:17:09.870
the email field where this key comes from up here and then we also want to grab varify email so say

239
00:17:10.500 --> 00:17:13.580
well call it the email or verify email.

240
00:17:13.650 --> 00:17:20.450
Again it's the all clean data and I want to grab the varify email key and then what I am going to do

241
00:17:20.450 --> 00:17:30.550
is say if my email is not equal to my verify email I will raise an error so I'll raise a validation

242
00:17:30.550 --> 00:17:42.890
there forms validation for an error and say whatever so make sure emails match.

243
00:17:42.920 --> 00:17:44.230
Probably don't want to yell at the user.

244
00:17:44.230 --> 00:17:47.600
Not all uppercase but it's fine for our purposes.

245
00:17:47.810 --> 00:17:50.920
And in this case we don't actually need to return everything.

246
00:17:51.140 --> 00:17:54.060
If the clean runs and everything works that's totally fine.

247
00:17:54.080 --> 00:17:55.100
We don't need to return.

248
00:17:55.340 --> 00:17:57.620
OK so let's actually run this on our page.

249
00:17:57.620 --> 00:18:04.850
I'm going to run my server again because I cleared it here hear say Python managed up high run server

250
00:18:05.090 --> 00:18:07.200
enter make sure it's running here.

251
00:18:07.220 --> 00:18:07.850
Perfect.

252
00:18:07.870 --> 00:18:13.230
I'm going to refresh this page and then when I'm going to do is call the form page.

253
00:18:13.400 --> 00:18:15.110
So here you see my name email.

254
00:18:15.140 --> 00:18:17.490
Enter your email again is the label text.

255
00:18:17.810 --> 00:18:22.970
So I'll say my name is Jose and we're actually going to do a non-matching email first.

256
00:18:22.970 --> 00:18:24.120
So I'll say that.

257
00:18:24.230 --> 00:18:31.750
Well let's say a at gmail dot com and then B at gmail dot com.

258
00:18:31.790 --> 00:18:35.330
So two different e-mails enter some text here for hit submit.

259
00:18:35.330 --> 00:18:37.130
I get back make sure e-mails match.

260
00:18:37.130 --> 00:18:40.520
So it's cleaning the entire data form and you can do whatever you want.

261
00:18:40.530 --> 00:18:43.240
Walter Fields from data forms adults make sure these match.

262
00:18:43.460 --> 00:18:50.120
If I say Jose a and then hit it looks like it's good and it actually prints out my name my e-mail and

263
00:18:50.120 --> 00:18:52.570
text which means there were no errors.

264
00:18:52.570 --> 00:18:53.100
All right.

265
00:18:53.390 --> 00:18:54.520
That's the very basics.

266
00:18:54.560 --> 00:18:59.030
And some more advanced features of how to actually custom validate your forms.

267
00:18:59.030 --> 00:19:05.150
So again you can call your own custom clean underscore method to check just a simple field you can use

268
00:19:05.150 --> 00:19:08.660
the built in validators enjoying 0 which is what I would recommend you do.

269
00:19:08.780 --> 00:19:13.480
And if you ever want to clean the entire form at once and do all your operations there then you can

270
00:19:13.480 --> 00:19:17.000
use def clean and that will clean out the entire form.

271
00:19:17.010 --> 00:19:20.960
And remember whenever you're creating your own custom validators you want to make sure you passing the

272
00:19:21.010 --> 00:19:23.200
keyword value before you pass it.

273
00:19:23.210 --> 00:19:24.980
Here it's one of these fields.

274
00:19:25.010 --> 00:19:25.430
All right.

275
00:19:25.430 --> 00:19:26.210
Do you have any questions.

276
00:19:26.210 --> 00:19:30.310
Definitely post the Q&amp;A forums and I would definitely suggest if you plan on using this in the future

277
00:19:30.480 --> 00:19:35.060
to check out the documentation page for jingoes validators has a lot of useful information there as

278
00:19:35.060 --> 00:19:37.970
well as a ton of more examples in case you want to see more.

279
00:19:37.970 --> 00:19:39.910
Thanks everybody and I'll see you the next lecture.
