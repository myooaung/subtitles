WEBVTT
1
00:00:05.270 --> 00:00:05.930
Hello everyone.

2
00:00:05.930 --> 00:00:10.240
Welcome back to part three of the blog Klon project.

3
00:00:10.250 --> 00:00:12.800
So the models are all set up from the previous lecture.

4
00:00:12.800 --> 00:00:17.610
Now it's time to actually use them to quickly create some forms since we already have that forms up-I

5
00:00:17.680 --> 00:00:23.060
file set up inside that blog application and what we're also going to learn that we haven't done before

6
00:00:23.300 --> 00:00:27.470
is how we can actually set up the form widgets to correspond to see SS classes.

7
00:00:27.470 --> 00:00:29.080
So what do I actually mean by that.

8
00:00:29.450 --> 00:00:35.510
Well we've already seen something along the lines of injecting of a template tag form as underscore

9
00:00:35.520 --> 00:00:38.900
P which just injects your form as paragraph.

10
00:00:39.110 --> 00:00:45.650
And if you're actually using the bootstrap templates that looks OK it's just a standard bootstrap form

11
00:00:45.980 --> 00:00:50.680
where you kind of get everything from top to bottom using those as paragraph tags.

12
00:00:50.690 --> 00:00:53.880
But what if you actually want to style a particular widget.

13
00:00:53.950 --> 00:00:56.710
I remember what I mean by widget is it actual form widget.

14
00:00:56.720 --> 00:01:01.470
So something like a form button or the text area text input etc..

15
00:01:01.580 --> 00:01:07.220
What if for whatever reason I want to actually take the text area widget and give it a different styling

16
00:01:07.460 --> 00:01:11.460
for example give it that medium dot com styling that we're going to be using later.

17
00:01:11.630 --> 00:01:15.080
Well all you have to do is add a widget attribute to the medic class.

18
00:01:15.080 --> 00:01:20.630
And what this widget attribute is is actually a dictionary and you pass in some arguments or parameters

19
00:01:20.630 --> 00:01:25.050
into that dictionary that link the actual widget to the class.

20
00:01:25.160 --> 00:01:30.860
Later you can call in your CSSA file that class thaim and it will affect that particular widget directly.

21
00:01:30.860 --> 00:01:34.160
So let's show you how to do all of this by helping over to the editor.

22
00:01:34.170 --> 00:01:35.870
OK so here I am at the Editor.

23
00:01:35.900 --> 00:01:38.460
There's three models up-I file is ready to go.

24
00:01:38.470 --> 00:01:42.530
Remember we have a post model and scrolling down we also have a comments model.

25
00:01:42.530 --> 00:01:47.270
That's what we're going to be using in the forms up-I file that we've already created.

26
00:01:47.270 --> 00:01:53.840
So the first thing you need to do is say from Django import forms and once we've done that I need to

27
00:01:53.840 --> 00:01:56.090
actually grab the models themselves.

28
00:01:56.120 --> 00:02:01.320
There's various ways you could do this you could just say from the models to me.

29
00:02:01.340 --> 00:02:07.160
I actually like having as you've heard me say before the application name and then start calling files

30
00:02:07.160 --> 00:02:12.980
from that source say from blog that models import and then I'm going to import the two models we created

31
00:02:12.980 --> 00:02:16.420
which was the post model and the comments model.

32
00:02:16.670 --> 00:02:18.500
And then let's actually create those classes.

33
00:02:18.500 --> 00:02:23.660
So I will create the post form class which is going to take forms.

34
00:02:24.650 --> 00:02:32.070
Model form and then inside of this I'll have that metaclass and inside this Medich class we need to

35
00:02:32.070 --> 00:02:35.230
do is actually connect the model we're using in this case.

36
00:02:35.260 --> 00:02:36.630
I'm using the post model.

37
00:02:36.990 --> 00:02:41.550
And then we want to also connect the fields that I want to be able to edit in this form.

38
00:02:41.640 --> 00:02:44.340
So we'll just edit the author field.

39
00:02:44.340 --> 00:02:46.690
So who's actually typing out this blog post.

40
00:02:46.710 --> 00:02:51.270
Theoretically it should be the same person every time but maybe we'll have multiple super users so it

41
00:02:51.270 --> 00:02:54.780
could be almost like a company blog where we have other super users coming in.

42
00:02:54.780 --> 00:03:00.480
So we'll keep an author as a field you can edit then we only want to be able to edit the title of whatever

43
00:03:00.480 --> 00:03:01.950
blog post we're using.

44
00:03:01.950 --> 00:03:04.470
And of course we want to edit the text itself.

45
00:03:06.290 --> 00:03:08.280
And we'll talk about those widgets in just a second.

46
00:03:08.330 --> 00:03:16.070
But let's also edit the comments class or I should say the comment form so I will say comments form

47
00:03:16.620 --> 00:03:27.160
as my class and then we'll say forms da model for and then what I'm going to create here is Medha and

48
00:03:27.160 --> 00:03:31.270
inside of this will connect it to the comment model.

49
00:03:31.360 --> 00:03:36.190
So there's the connection to the comic model and in the fields here that this person's going to be able

50
00:03:36.190 --> 00:03:36.890
to edit.

51
00:03:37.060 --> 00:03:41.920
Well they should be able to say who's right in the comment the author and then the actual text of the

52
00:03:41.920 --> 00:03:44.330
comment itself OK.

53
00:03:44.340 --> 00:03:46.100
And let me add in a couple more lines here.

54
00:03:46.140 --> 00:03:47.410
So we get some space.

55
00:03:47.640 --> 00:03:52.170
And finally it's time to add in these widgets so what I'm going to do is add in the widgets first to

56
00:03:52.200 --> 00:03:53.720
the post form.

57
00:03:53.940 --> 00:03:57.950
And again this is so that I can grab a particular field widget.

58
00:03:57.960 --> 00:04:03.990
So let's say I want to add a red border to the text area box that corresponds with text.

59
00:04:03.990 --> 00:04:04.920
Well how would I do that.

60
00:04:04.980 --> 00:04:07.050
In that case I need to actually add in widgets.

61
00:04:07.110 --> 00:04:11.340
So this goes inside of the medic class and note my indentation here.

62
00:04:12.800 --> 00:04:20.040
And I create a widgets attribute that is a dictionary and for formatting purposes I'll kind of write

63
00:04:20.040 --> 00:04:21.450
this over multiple lines.

64
00:04:21.450 --> 00:04:24.530
But the first key is going to respond to a field.

65
00:04:24.900 --> 00:04:32.520
So I have title be a field and then what I will have here is forms dot and then the widget actual name.

66
00:04:32.520 --> 00:04:41.480
So in this case this is going to be a text input and then we have the attributes which is going to be

67
00:04:41.480 --> 00:04:45.140
a t t r s and set that equal to.

68
00:04:45.470 --> 00:04:56.420
And here we have kind of a sub dictionary and we have a class and then we can give a text input class.

69
00:04:56.590 --> 00:05:01.930
So I'll be the first entry and then the other one I want to be able to edit the text.

70
00:05:01.950 --> 00:05:06.790
So this how we're actually going to connect that text widget with those medium Ed..

71
00:05:06.830 --> 00:05:12.630
Textarea stylings So you'll see forms dot text area.

72
00:05:12.880 --> 00:05:18.490
So that's sort of which I'm doing just the giant text area and I will say 80 arest those attributes

73
00:05:19.680 --> 00:05:25.830
is equal to and I'll set it with a class and then we're going to have kind of a long class name that

74
00:05:25.890 --> 00:05:30.210
is attributed to the actual medium library we're going to be working with.

75
00:05:30.210 --> 00:05:35.040
So later on when we actually work with the javascript and see a sense of that medium editor library

76
00:05:35.280 --> 00:05:37.950
will show you how they actually got this long class name.

77
00:05:38.160 --> 00:05:41.910
But for now I'll just copy paste from the notes or follow along with me.

78
00:05:42.060 --> 00:05:48.240
But the classes we're going to pass here is the edible class as and you can edit it then we'll passen

79
00:05:48.330 --> 00:05:55.460
medium dash editor dash text area.

80
00:05:55.510 --> 00:06:00.850
So that's the actual class that's going to allow us to connect that to some sort of a medium editor.

81
00:06:01.150 --> 00:06:07.790
And then we're also going to do is add in our own class Orsay post content so we're connecting this

82
00:06:07.790 --> 00:06:14.600
text area attribute which is going to be our text in the blog post form and it's going to be connected

83
00:06:14.600 --> 00:06:15.840
to a CSSA class.

84
00:06:15.840 --> 00:06:18.250
In fact it connected to three CSSA classes.

85
00:06:18.320 --> 00:06:20.130
First is the edible class.

86
00:06:20.180 --> 00:06:21.510
That means we can't edit it.

87
00:06:21.510 --> 00:06:25.630
That's coming from this medium editor library that we're going to be working with.

88
00:06:25.770 --> 00:06:31.620
Then we have the medium editor a text area which kind of gives it the styling of the actual medium editor.

89
00:06:31.790 --> 00:06:35.910
And then we have this post content which is going to be our own class.

90
00:06:36.080 --> 00:06:41.690
So we're doing the exact same thing over here for the title except we're saying it's text input class.

91
00:06:41.690 --> 00:06:43.930
Again that's our own class.

92
00:06:43.970 --> 00:06:48.980
So the only classes that are not ours are these two right here that I'm highlighting the classes that

93
00:06:49.010 --> 00:06:56.240
are ours is the text input class and then the post content class then we're going to scroll down and

94
00:06:56.240 --> 00:06:59.230
do a really similar thing for the comment form.

95
00:06:59.290 --> 00:07:02.320
So over here we're going to have a dictionary widgets

96
00:07:05.640 --> 00:07:14.670
and I'm going to set author the first dictionary entry to be forms the it's going to be a text input

97
00:07:14.880 --> 00:07:20.040
widget and that will have this attributes that's going to be a dictionary.

98
00:07:21.180 --> 00:07:22.800
We'll have a connect to a class.

99
00:07:22.800 --> 00:07:27.070
And in this case I'll have it just connect to the same text input class here.

100
00:07:27.240 --> 00:07:34.500
So I'll say text input class so whatever C is styling this title's going to have the author will also

101
00:07:34.500 --> 00:07:35.070
have it here.

102
00:07:35.070 --> 00:07:38.870
So it kind of serves the same purpose relative to their actual form.

103
00:07:38.880 --> 00:07:43.110
Again you could create your own class here if you wanted to if you wanted to add some specific styling

104
00:07:43.140 --> 00:07:47.470
elements to the author form box of the comments themselves.

105
00:07:49.120 --> 00:07:52.440
And then more importantly the actual text.

106
00:07:52.840 --> 00:07:58.630
We want to connect to two forms text area in effect that is actually going to be the exact same thing

107
00:07:59.500 --> 00:08:03.160
as what's up here minus this post content.

108
00:08:03.160 --> 00:08:07.800
So I'm going to copy and paste this on the collapse my character ichy trees.

109
00:08:07.810 --> 00:08:08.910
You can see everything.

110
00:08:09.160 --> 00:08:16.360
And then I'm going to copy paste it here and then I'm going to delete this post content so that post

111
00:08:16.360 --> 00:08:17.430
content class.

112
00:08:17.470 --> 00:08:23.580
I'll make sure that class is only suitable for the post form versus here.

113
00:08:23.590 --> 00:08:27.300
I'm just going to have it kind of be the default medium ed. classes.

114
00:08:27.370 --> 00:08:33.680
So those are my two widgets and this is the main idea of you connect specific widgets to CSSA styling.

115
00:08:33.730 --> 00:08:39.520
Again the main idea is just you have widgets to dictionary attribute inside of that metaclass you have

116
00:08:39.520 --> 00:08:42.600
the actual field.

117
00:08:42.730 --> 00:08:45.430
You'll see forms dot the actual pepple widget.

118
00:08:45.430 --> 00:08:46.430
It's going to be.

119
00:08:46.540 --> 00:08:51.190
And these are attributes where you have a class key and then the name of the class that eventually will

120
00:08:51.190 --> 00:08:53.540
go inside your C Ss.

121
00:08:53.560 --> 00:08:59.170
So since we're talking a little bit about C Ss let's set up the most basic C Ss which means we probably

122
00:08:59.170 --> 00:09:01.390
want to set up a static folder.

123
00:09:01.630 --> 00:09:04.870
So I will open up my directory tree here.

124
00:09:05.170 --> 00:09:07.980
And this is going to go underneath right here.

125
00:09:07.990 --> 00:09:15.040
We see Blug project and then we also see my site a lot of times what we've done in the past is have

126
00:09:15.040 --> 00:09:21.150
the static folder line up with the same directory as my site and blog.

127
00:09:21.340 --> 00:09:26.920
But when we're talking about advanced class based views we also discussed having template and static

128
00:09:26.920 --> 00:09:30.660
folders inside of the actual application folder.

129
00:09:30.670 --> 00:09:34.390
So that's the kind of following we're going to do here since that's a little more common in the real

130
00:09:34.390 --> 00:09:40.150
world and doesn't line up exactly to tutorials of the Gengel documentation but a lot of times in the

131
00:09:40.150 --> 00:09:46.780
real world each particular application is going to come with its own set of static directories and template

132
00:09:46.780 --> 00:09:52.510
directories which kind of makes sense if you want these applications to be more plug and play that way

133
00:09:52.510 --> 00:09:55.180
in case you ever want to have some sort of blog application.

134
00:09:55.270 --> 00:10:00.760
You can quickly grab everything from this previous project and insert it or inject it into an other

135
00:10:00.760 --> 00:10:02.710
much larger project.

136
00:10:02.710 --> 00:10:06.180
So we're going to do it inside of this blog folder.

137
00:10:06.370 --> 00:10:13.860
I'm going to create a new directory so saying you folder and this folder is going to be called static

138
00:10:14.970 --> 00:10:16.560
and inside of the static folder.

139
00:10:16.620 --> 00:10:24.010
I'll create two new folders so I'll have a folder for my C Ss and then set up static.

140
00:10:24.030 --> 00:10:30.180
I will also have a folder for my drive a script and will call that Jesus and inside of C assess what

141
00:10:30.180 --> 00:10:34.020
we're going to do is we're not going to mess with it right now but we'll set up the file that we'll

142
00:10:34.020 --> 00:10:35.150
be using.

143
00:10:35.150 --> 00:10:43.860
So we'll say new file and we'll just call it blog C Ss and we'll be working a lot more of the CSSA towards

144
00:10:43.860 --> 00:10:44.330
the end.

145
00:10:44.350 --> 00:10:45.800
But right now we'll just keep it blank.

146
00:10:45.810 --> 00:10:49.030
But make sure that the static files are all there.

147
00:10:49.110 --> 00:10:53.980
And since we're adding the static directories it's a good idea to come over to the settings that py

148
00:10:54.000 --> 00:10:57.630
file and make sure the static is all set up down there.

149
00:10:57.720 --> 00:11:05.880
So let's come over to my site settings up-I scroll all the way down because usually that's where we're

150
00:11:05.880 --> 00:11:07.520
going to put all that static stuff.

151
00:11:08.310 --> 00:11:11.260
So all the way down here I have the static you're out.

152
00:11:11.290 --> 00:11:12.490
That's totally fine.

153
00:11:12.490 --> 00:11:14.580
We do have it under a folder named static.

154
00:11:14.800 --> 00:11:24.850
But what I'm going to do here say static underscore root is equal to OS stop half that join as we've

155
00:11:24.850 --> 00:11:30.470
done before and I will join the base their victory with the static folder.

156
00:11:30.530 --> 00:11:37.190
That way knows where to look for stuff and then what I'm also going to do is create those template folders

157
00:11:37.220 --> 00:11:38.360
or directories.

158
00:11:38.450 --> 00:11:41.420
We haven't actually created a templates yet but we will soon.

159
00:11:41.570 --> 00:11:44.950
And since we're missing out the settings that PI file manager will do it all now.

160
00:11:45.290 --> 00:11:53.480
So at the same level of the static underneath blog I will right click Create a new folder and I will

161
00:11:53.480 --> 00:12:04.800
call this templates and then inside of this templates lets have two directories all have a new folder

162
00:12:05.430 --> 00:12:10.320
that shares the same name as the application Raemer we talked about this in class based views where

163
00:12:10.400 --> 00:12:14.460
the templates folder goes underneath the application underneath that you have the application name again

164
00:12:14.790 --> 00:12:19.590
a little repetitive but that's usually seen the real world and I'm going to create a new folder here

165
00:12:20.280 --> 00:12:26.840
and we'll call this registration and when we actually begin dealing with registering users and authorization

166
00:12:26.900 --> 00:12:31.670
we'll be dealing for a little template there some sort of log in page template but since we have the

167
00:12:31.670 --> 00:12:34.820
template set up might as well take care of that as well.

168
00:12:35.060 --> 00:12:39.320
So what I'm going to do is I like doing this the top you can really do this anywhere you want in the

169
00:12:39.320 --> 00:12:45.710
settings that PI file but just to kind of keep in line of what we have been doing or create the template

170
00:12:45.800 --> 00:12:47.500
DJR here.

171
00:12:47.550 --> 00:12:49.700
And I will say stop half that.

172
00:12:50.120 --> 00:12:57.420
Join passen the base directory and when I have to do here is actually point to the templates we're using.

173
00:12:57.540 --> 00:12:59.940
So I'll be using blog

174
00:13:02.310 --> 00:13:05.240
templates blog.

175
00:13:05.550 --> 00:13:11.780
Save that and then scrolling down here past installed apps past middleware.

176
00:13:11.910 --> 00:13:12.820
Here's the template.

177
00:13:12.900 --> 00:13:14.980
Remember this can take a list of directories.

178
00:13:15.090 --> 00:13:19.150
We only have 1 templates but if we had other applications we could be passing these as well.

179
00:13:19.320 --> 00:13:25.230
But in this case I'll just person template underscore Diyar and that's all there is to it.

180
00:13:25.230 --> 00:13:28.470
So now I save this and we have our setting up py file.

181
00:13:28.470 --> 00:13:30.830
Now we're not completely done with the settings that py file.

182
00:13:30.930 --> 00:13:36.660
Later on when we actually talk about logons we'll need to do a little edit here so I will add this in

183
00:13:36.750 --> 00:13:37.630
right now.

184
00:13:37.950 --> 00:13:43.170
So scrolling all the way down and we kind of talked a little bit about this during the authorization

185
00:13:43.170 --> 00:13:54.630
lectures but we need a log in underscore re direct underscore u r l is equal to and we're just going

186
00:13:54.630 --> 00:13:57.130
to in quotes put a single forward slash.

187
00:13:57.180 --> 00:13:59.890
That way we have some sort of redirection to the home page.

188
00:13:59.910 --> 00:14:05.880
Once a person has done logging in OK and we're going to talk a lot more about users logging in and all

189
00:14:05.880 --> 00:14:08.180
that stuff then we actually get to that.

190
00:14:08.250 --> 00:14:13.500
But so far the main idea of this lecture besides setting up the settings up hi fi a little further was

191
00:14:13.500 --> 00:14:15.840
taking care of this forms up py file.

192
00:14:15.840 --> 00:14:17.540
So again two main things we did here.

193
00:14:17.670 --> 00:14:22.780
Setting up the forms that py file learning how to actually use these widgets in order to attribute C

194
00:14:22.800 --> 00:14:27.510
S S classes to particular widgets and then we did a little more in the settings up-I file and set up

195
00:14:27.510 --> 00:14:29.380
our static and templates folders.

196
00:14:29.560 --> 00:14:31.470
OK that's it for this lecture.

197
00:14:31.470 --> 00:14:33.310
Thanks everyone and I'll see you at the next one.
