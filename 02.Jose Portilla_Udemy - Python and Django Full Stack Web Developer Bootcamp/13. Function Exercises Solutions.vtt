WEBVTT
1
00:00:04.980 --> 00:00:10.080
Hello everyone and welcome to part nine function exercises solutions lecture we're going to be going

2
00:00:10.080 --> 00:00:13.110
over the solutions for the previous function exercises.

3
00:00:13.110 --> 00:00:15.540
Let's go and open up the file to get started.

4
00:00:15.870 --> 00:00:18.510
OK here I am at the function exercises file.

5
00:00:18.510 --> 00:00:23.430
Let's start off with Problem 1 which is and remember if we wanted to have a list of integers we need

6
00:00:23.430 --> 00:00:28.720
to return true if the sequence in numbers 1 2 3 appears in the list somewhere.

7
00:00:28.880 --> 00:00:33.790
And basically for this and we're going to be doing is iterating through the list three at a time.

8
00:00:33.860 --> 00:00:37.110
So let's show you how we can do that with this array check function.

9
00:00:37.670 --> 00:00:46.130
I'm going to say for I in range and then I'll go for the length of numbers because I don't know how

10
00:00:46.130 --> 00:00:51.740
long them is going to be as a list and then I will see minus two because I don't want to go all the

11
00:00:51.740 --> 00:00:52.460
way to the end.

12
00:00:52.490 --> 00:00:55.400
I just want to go starting from here.

13
00:00:55.490 --> 00:00:59.160
So I will go minus two back because I'm going to be counting in steps at 3.

14
00:00:59.420 --> 00:01:01.380
So let me show you what that looks like.

15
00:01:01.970 --> 00:01:17.890
I will say if Gnome is an index I as equal to one hand numbs I plus one is equal to two.

16
00:01:18.480 --> 00:01:24.910
And number of I plus two is equal to three.

17
00:01:25.390 --> 00:01:30.040
Well that case that I return true if that never happens.

18
00:01:30.430 --> 00:01:34.980
Meaning I never get a return true instead of that for loop that I will just return false.

19
00:01:34.990 --> 00:01:39.970
And notice how this return false statement is in line with that for loop which means this entire thing

20
00:01:40.240 --> 00:01:41.210
has to run through.

21
00:01:41.230 --> 00:01:44.750
And if we never get a return true here then we never actually break out of this.

22
00:01:44.770 --> 00:01:46.930
And then we go to return false.

23
00:01:47.280 --> 00:01:47.780
OK.

24
00:01:48.100 --> 00:01:49.540
So that's the basic idea.

25
00:01:49.580 --> 00:01:54.880
Again lengthen them is minus two because I'm hopping over in steps of three and if I went all the way

26
00:01:54.880 --> 00:01:59.510
to the end I would get an error because it would be indexing outside of the actual list.

27
00:01:59.530 --> 00:02:01.590
The last one I want to go to is right here.

28
00:02:01.700 --> 00:02:07.810
Lengthen them minus two indices back that way I can do the plus one and plus two checks.

29
00:02:07.820 --> 00:02:08.240
All right.

30
00:02:08.360 --> 00:02:13.670
Now let's go on to Problem two which was given a string return a new string of every other character

31
00:02:13.670 --> 00:02:15.040
starting with the first.

32
00:02:15.080 --> 00:02:17.320
So hello yields h ELO.

33
00:02:17.700 --> 00:02:18.200
OK.

34
00:02:18.290 --> 00:02:19.660
Now this quick moment.

35
00:02:19.670 --> 00:02:21.890
There's many many ways you could do this.

36
00:02:21.890 --> 00:02:24.110
In fact you could just use slicing notation.

37
00:02:24.380 --> 00:02:27.040
But let me show you a really standard way to do this.

38
00:02:27.080 --> 00:02:28.790
Just a loop.

39
00:02:28.790 --> 00:02:35.630
And this one will work across any language we set and output to be result.

40
00:02:35.700 --> 00:02:44.500
And then I will say for I in range length of the string as TR And actually there isn't a good choice

41
00:02:44.500 --> 00:02:45.020
here.

42
00:02:45.250 --> 00:02:52.950
So I will say my string and change this to be my string as an input

43
00:02:56.960 --> 00:03:03.230
and then I will say if I to is equal to zero.

44
00:03:05.370 --> 00:03:13.490
Result is equal to results plus my string at the current index which is I.

45
00:03:13.650 --> 00:03:18.300
And then I'm just going to return the results.

46
00:03:18.330 --> 00:03:22.460
So this is a very basic algorithmic way of solving this problem.

47
00:03:22.470 --> 00:03:29.190
The other way you could do this is by actually using slice notation by skipping every other letter.

48
00:03:29.220 --> 00:03:35.460
So be something like colon colon to so again here we're saying for I'd arranged the length of the string

49
00:03:35.910 --> 00:03:42.810
if I had to is equal to zero meaning or on even numbers result is result plus my strain and this is

50
00:03:42.810 --> 00:03:48.240
kind of the same thing as just saying my string colon colon to

51
00:03:52.090 --> 00:03:52.510
all right.

52
00:03:52.510 --> 00:03:55.840
Now let's continue on to problem three problem.

53
00:03:55.840 --> 00:04:00.460
You were given two strains so we wanted to return true if either of the strings appears at the very

54
00:04:00.460 --> 00:04:05.300
end of the other string and we could ignore case sensitivity here.

55
00:04:05.350 --> 00:04:10.360
So what we can do is for ignoring case sensitivity right away just make them both lower.

56
00:04:10.390 --> 00:04:23.120
So say a is equal to a lower and B is equal to be the lower and then I'm going to say return and there's

57
00:04:23.450 --> 00:04:27.720
two ways we could have done this we could have used the special ends with method.

58
00:04:27.890 --> 00:04:32.030
Now we didn't actually cover the ends with method so you may not have been aware of it but it looks

59
00:04:32.030 --> 00:04:33.320
something like this.

60
00:04:33.470 --> 00:04:35.390
You can say b dot

61
00:04:38.270 --> 00:04:50.050
ends with a and or I should say or a ends with B.

62
00:04:50.530 --> 00:04:57.110
And that's the way you do it with the most pythoness stick code using that ends with method that will

63
00:04:57.110 --> 00:04:59.840
pretend that you didn't know that since we didn't really cover it.

64
00:04:59.930 --> 00:05:11.890
And sure the more algorithmic way of doing this we will say return the string a minus indexing the length

65
00:05:12.790 --> 00:05:16.930
of B all the way to the end.

66
00:05:16.940 --> 00:05:24.460
And so what this basically is doing is it's asking is the string a minus length of B.

67
00:05:24.550 --> 00:05:38.260
All the way to the end equal to B or is a equal to B minus length of a.

68
00:05:38.690 --> 00:05:45.770
All the way to the end so all we're doing here is we're checking there's a equal to be with the ending

69
00:05:45.770 --> 00:05:46.910
part removed.

70
00:05:46.910 --> 00:05:50.160
And that basically tells you does it end with it.

71
00:05:50.210 --> 00:05:51.070
So take your time.

72
00:05:51.080 --> 00:05:55.540
This syntax may look a little weird but this is all we have to really do.

73
00:05:55.730 --> 00:06:05.120
Again all we're doing here is we're saying this this the string be equal to the length of the all the

74
00:06:05.120 --> 00:06:09.770
way to the end with the negative indexing which basically allows us to go backwards and essentially

75
00:06:09.770 --> 00:06:18.680
we're saying if we look up here at this example if I have the string a b c and the string high ABC I

76
00:06:18.680 --> 00:06:23.420
want to know does the end of this string right here equal the end of the strings.

77
00:06:23.420 --> 00:06:28.520
I'm using the length of the string to check what's going on with the equal length over here which is

78
00:06:28.520 --> 00:06:33.770
why we have a negative starting from the backwards or starting from the last index position.

79
00:06:33.770 --> 00:06:35.010
I should say.

80
00:06:35.180 --> 00:06:36.920
All right so they could time with this one.

81
00:06:36.980 --> 00:06:38.170
This one's a little smoother.

82
00:06:38.210 --> 00:06:45.020
And this one's more algorithmic Okay now for problem 4 we wanted to say given a strong return a string

83
00:06:45.020 --> 00:06:48.270
where for every character in the original There are about two characters.

84
00:06:48.410 --> 00:06:54.220
So what we can do for this is we'll create an output string called result which is just an empty string.

85
00:06:54.590 --> 00:07:02.630
And then we will say for character in my string and we're going to be doing here is taking the results

86
00:07:02.660 --> 00:07:09.810
which is an empty string and then adding to the string character times to

87
00:07:13.120 --> 00:07:21.180
and then all we have to do is at the end of this return the result and that's how the character can

88
00:07:21.180 --> 00:07:21.940
work.

89
00:07:22.290 --> 00:07:28.850
So all we're doing here is essentially continuously concatenating result with the double of the character

90
00:07:29.780 --> 00:07:31.340
that are problem five.

91
00:07:31.410 --> 00:07:37.370
We wanted to do was given those three integer values A B and C returned their sum except for those special

92
00:07:37.370 --> 00:07:37.870
rules.

93
00:07:37.880 --> 00:07:41.240
And why this was called the no tene some.

94
00:07:41.330 --> 00:07:44.730
So we had also the options create this helper function.

95
00:07:44.930 --> 00:07:47.650
So let's show you what we could have done here.

96
00:07:47.660 --> 00:07:57.770
So for this first one this no tene some way you could have done or say return and then we'll say 16

97
00:07:57.860 --> 00:08:14.130
a plus 16 B plus 16 C or 16 is what it's actually doing is just a helper function.

98
00:08:14.130 --> 00:08:18.290
So in this way we keep voiding writing repeated code.

99
00:08:18.330 --> 00:08:22.040
We practice the dry pants principle don't repeat yourself again.

100
00:08:22.050 --> 00:08:27.350
Let's focus on the Finas help her function 16 which really does most of the dirty work.

101
00:08:27.450 --> 00:08:41.090
So what we can do here is say if n is in 13 14 17 18 or 19 that was the conditional list based off the

102
00:08:41.090 --> 00:08:50.130
instructions we want to return 0 and if that's not the case what we're going to be returning is the

103
00:08:50.130 --> 00:08:50.790
actual number.

104
00:08:50.790 --> 00:09:00.000
And so what this does is it calls 16 on each of the three numbers and with 16 itself thus it checks

105
00:09:00.210 --> 00:09:02.520
if and is one of these numbers.

106
00:09:02.580 --> 00:09:06.670
And if it is it just returns 0 otherwise returns the number itself.

107
00:09:06.720 --> 00:09:12.800
And then what we do to actually call this is call no team some along with this fix team.

108
00:09:12.960 --> 00:09:19.390
Otherwise we have to write this code three separate times in noting some break.

109
00:09:19.390 --> 00:09:24.670
Now on to problem 6 the last problem or this probably wanted to return the number of even integers in

110
00:09:24.670 --> 00:09:25.740
the given array.

111
00:09:26.490 --> 00:09:31.120
So some is actually quite simple so let's start off by making a variable called count.

112
00:09:31.150 --> 00:09:33.490
Now we'll set it equal to zero.

113
00:09:33.630 --> 00:09:42.900
And then after that we're going to say for the elements in numbers or for every Now minims we'll say

114
00:09:42.930 --> 00:09:52.200
if that particular element divided by two has a remainder of zero meaning it's even.

115
00:09:52.200 --> 00:09:58.680
So when I say divided by two I really mean remainder I really mean the Mada much later all say counts

116
00:10:00.280 --> 00:10:06.060
gets another one and then after all this we're going to just say return the count.

117
00:10:06.190 --> 00:10:11.260
So again all I'm doing here is I'm sending a count equal to zero going through the elements if the element

118
00:10:11.260 --> 00:10:13.870
is even meaning element 2 is equal to zero.

119
00:10:13.960 --> 00:10:16.430
Add onto the count and then just return the count.

120
00:10:16.480 --> 00:10:17.940
All right that's it for this.

121
00:10:17.950 --> 00:10:22.840
If you have any questions feel free to post the Q&amp;A forums or to check out the solutions lecture which

122
00:10:22.840 --> 00:10:25.270
has more code and some explanations.

123
00:10:25.270 --> 00:10:27.010
Thanks everyone and I'll see you at the next lecture.
