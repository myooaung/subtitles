WEBVTT
1
00:00:04.820 --> 00:00:08.830
Hello everyone and welcome to the creating models lecture for Django level.

2
00:00:09.810 --> 00:00:12.270
We covered a lot of concepts in the previous lecture.

3
00:00:12.270 --> 00:00:17.220
So let's actually start implementing them and in order to do that we are going to continue working with

4
00:00:17.220 --> 00:00:19.730
the two project folders from Gengel level 1.

5
00:00:19.860 --> 00:00:23.000
If you don't have those you can always download them from the course notes.

6
00:00:23.020 --> 00:00:25.100
OK let's start making some models.

7
00:00:25.140 --> 00:00:28.870
I'm going to hop over to the editor and open up the first project folder now.

8
00:00:29.100 --> 00:00:33.000
OK here I am at the editor and I have my file structure.

9
00:00:32.990 --> 00:00:38.690
Jingle level 1 and I have two projects from jingle level on Pro 2 and first project.

10
00:00:38.910 --> 00:00:39.990
So you can open those up.

11
00:00:40.020 --> 00:00:46.200
And what I want you to do is inside of first app open up the models that py file and you should have

12
00:00:46.500 --> 00:00:51.420
somewhere in that model up my file from Django that the import models and if you don't have that for

13
00:00:51.420 --> 00:00:53.710
some reason go ahead and type that in.

14
00:00:53.790 --> 00:00:59.210
And now we're going to do is using object oriented programming will create models with Shango.

15
00:00:59.700 --> 00:01:05.780
So models as we discussed in a previous lecture are just classes and then we give the actual name you

16
00:01:05.780 --> 00:01:12.050
can kind of relate these to the name of the table inside the database and then we'll actually inherit

17
00:01:12.140 --> 00:01:15.430
from models the model.

18
00:01:15.440 --> 00:01:16.760
So that's the base class.

19
00:01:16.790 --> 00:01:24.770
So we're going to have this topic be a derived class and then this class object attribute top underscore

20
00:01:24.770 --> 00:01:30.680
name is going to be equal to models dot and then we actually have to specify what kind of field it's

21
00:01:30.680 --> 00:01:31.860
going to be.

22
00:01:32.000 --> 00:01:40.580
This is going to be a character field for the actual topic and then we'll say max length is equal to

23
00:01:40.640 --> 00:01:41.750
2 6 4.

24
00:01:41.840 --> 00:01:45.610
So max length is a constraint of this character field.

25
00:01:45.800 --> 00:01:48.920
It's really up to you what value you choose for the maximum length.

26
00:01:49.100 --> 00:01:54.320
Obviously you should have some maximum length otherwise your users are going to be able to put as many

27
00:01:54.320 --> 00:01:58.080
characters as they want and you'll have to save them to 6 4 for a topic name.

28
00:01:58.090 --> 00:02:00.490
It's probably overkill but that's totally fine.

29
00:02:01.610 --> 00:02:07.390
Now we can say unique which is a Bramber to require as a constraint that all the topics be unique.

30
00:02:07.400 --> 00:02:12.910
I mean you can have duplicates in there so we'll say that's true as well and then usually you'll also

31
00:02:12.910 --> 00:02:15.860
want to have some sort of string representation of your model.

32
00:02:15.880 --> 00:02:21.350
So if you ever have to print out an instance of topic you will be able to do that without any error.

33
00:02:21.490 --> 00:02:25.810
So we know that there's a special method for that from the Object Oriented Programming sections.

34
00:02:25.840 --> 00:02:32.160
And that's just the SDR and then we're going to say return self-taught top name.

35
00:02:32.350 --> 00:02:35.090
Right now it's create two more models.

36
00:02:35.920 --> 00:02:40.660
We'll create a web page models the model

37
00:02:43.460 --> 00:02:48.170
and then we'll create a three class object attributes here the topic.

38
00:02:48.170 --> 00:02:51.720
And these are essentially the columns inside the table with page.

39
00:02:52.070 --> 00:02:53.630
And this will be a foreign key.

40
00:02:55.830 --> 00:03:01.150
Because we're going to grab from topic which makes sense.

41
00:03:01.450 --> 00:03:04.730
And then we have name which is going to be models.

42
00:03:05.050 --> 00:03:07.060
And this will be a character field.

43
00:03:07.920 --> 00:03:14.300
And we'll get this as well a max length set that include 2 6 4 2 6 4 1 2 8.

44
00:03:14.340 --> 00:03:16.190
It's totally fine whatever you want.

45
00:03:16.250 --> 00:03:20.490
And I also want to specify the unique constraint here to be true.

46
00:03:22.740 --> 00:03:31.660
And then finally I'm going to have your all equal to models your air field and I also want this to be

47
00:03:31.660 --> 00:03:32.080
unique

48
00:03:34.690 --> 00:03:39.480
so you can always visit the documentation of Django for the actual available fields.

49
00:03:39.490 --> 00:03:43.360
But we're definitely going to be showing you the most common ones as we continue on through this course.

50
00:03:43.360 --> 00:03:48.880
Things like integer fields date fields etc. So just keep that in mind and then we also want some sort

51
00:03:48.880 --> 00:03:50.400
of string representation here.

52
00:03:51.300 --> 00:03:58.860
Pasand self and I'm going to say return self-taught and we'll return the name of the web page as its

53
00:03:58.860 --> 00:04:03.880
string representation Finally let's create an Access record class

54
00:04:06.950 --> 00:04:13.660
and this will also inherit from models Top Model and what this access record class is going to be is

55
00:04:13.960 --> 00:04:24.340
will say the name of models thought foreign key and then what we will do is passen web page and we're

56
00:04:24.340 --> 00:04:25.620
also going to have a date field.

57
00:04:25.630 --> 00:04:27.580
When was it actually accessed.

58
00:04:27.730 --> 00:04:37.800
So the date column will be models dot a date field no X or constraints there.

59
00:04:38.050 --> 00:04:43.600
And then if I want to string representation of this I'll say this to your self and then I'm going to

60
00:04:43.600 --> 00:04:47.310
just pass the actual date so I'll return.

61
00:04:47.410 --> 00:04:48.480
Self-taught date.

62
00:04:48.640 --> 00:04:53.980
But unfortunately since this is a Date Time object it needs us because it has a string.

63
00:04:53.980 --> 00:04:59.120
And if you're ever unsure if one of these fields is going to be able to just simply be represented as

64
00:04:59.130 --> 00:05:03.410
string you can always just cast it using the SDR builtin function.

65
00:05:03.520 --> 00:05:04.000
OK.

66
00:05:04.210 --> 00:05:06.610
So looks like all our models are ready.

67
00:05:06.640 --> 00:05:10.790
Now it's time to actually create the sequel databases behind these models.

68
00:05:10.840 --> 00:05:16.400
And this is what the real power of Django is is all you have to do is to find classes here and it's

69
00:05:16.420 --> 00:05:20.010
going to take care of the rest of actually building out that sequel database for you.

70
00:05:20.350 --> 00:05:22.470
And we do that through a series of commands.

71
00:05:23.390 --> 00:05:29.210
The first thing we need to do is to actually initiate this entire process in that project folder.

72
00:05:29.200 --> 00:05:38.620
I will call Python manage PI and then call migrate enter and you should see running migrations.

73
00:05:38.650 --> 00:05:42.900
And if you've already run this if you read it twice you'll see no migrations to apply.

74
00:05:42.910 --> 00:05:45.890
I accidentally already ran it before I filled this.

75
00:05:45.940 --> 00:05:48.700
So Bill says no migrations for you.

76
00:05:48.700 --> 00:05:51.790
It will say something else if you haven't run this already.

77
00:05:51.790 --> 00:05:55.610
Then the next thing you have to do is register the changes to your application.

78
00:05:56.110 --> 00:06:04.450
So we will do here say Python managed up PI and we call make migrations and make sure I spell that right.

79
00:06:04.450 --> 00:06:08.140
Yep make migrations and then the name of your application.

80
00:06:08.170 --> 00:06:13.590
In our case it's simple Sia's first app will enter and you'll see some other things.

81
00:06:13.600 --> 00:06:19.100
Now I got no changes detected an app for SAP because I already ran this again.

82
00:06:19.120 --> 00:06:20.960
You'll get something else will say something like.

83
00:06:21.040 --> 00:06:27.520
Creating a model creating model accepter and after you've done that you need to run Python may manage

84
00:06:27.580 --> 00:06:29.570
that PI migrate one more time.

85
00:06:30.410 --> 00:06:35.400
So say Python managed up-I migrate one more time.

86
00:06:35.690 --> 00:06:37.490
And for me it says no migration supply.

87
00:06:37.490 --> 00:06:40.470
You'll probably get something different since you'll be running it for the first time.

88
00:06:41.460 --> 00:06:48.180
So those three commands this one by four managed up high then I managed up high make migrations.

89
00:06:48.180 --> 00:06:49.380
Your application name.

90
00:06:49.620 --> 00:06:56.430
And then again I managed that PI migrate and now our models should be ready and connected to a sequel

91
00:06:56.430 --> 00:07:01.270
database that Django just created for us and register the changes to our application.

92
00:07:01.280 --> 00:07:04.820
Now the question arises Well how do you actually confirm that all of this worked.

93
00:07:04.830 --> 00:07:07.400
And how do you actually interact with that database.

94
00:07:07.440 --> 00:07:12.900
Well we'll show you the most simple and basic way and that's to create some test data with some shell

95
00:07:12.900 --> 00:07:13.310
commands.

96
00:07:13.310 --> 00:07:19.990
So using Python at the Shell we can actually interact for database and this is going to do that.

97
00:07:20.050 --> 00:07:29.480
I will call Python managed up PI show and this will open up an interactive console for me I'm using

98
00:07:29.900 --> 00:07:33.350
Python 3.5 here you're probably using some 3.6.

99
00:07:33.350 --> 00:07:34.490
That's totally fine.

100
00:07:34.490 --> 00:07:41.320
Either one should work and I'm going to collapse that tree so we can see a little more here and whoops

101
00:07:42.210 --> 00:07:43.560
that's not what I meant to do.

102
00:07:45.480 --> 00:07:47.930
Ok come back down to the con..

103
00:07:47.930 --> 00:07:52.260
Here we go now to make sure everything's working I'm just going to Prince.

104
00:07:52.460 --> 00:07:53.020
Hello.

105
00:07:53.060 --> 00:07:56.040
I should get hello back and good it's working fine.

106
00:07:56.970 --> 00:08:03.200
What we'll do is we'll say from first underscore app dot models.

107
00:08:03.290 --> 00:08:05.790
So this is the models that py file have open right here.

108
00:08:05.790 --> 00:08:14.290
From that first app folder import topic's actually import in instance Erck import that class so we can

109
00:08:14.410 --> 00:08:15.230
work with it.

110
00:08:16.150 --> 00:08:17.320
And that worked fine.

111
00:08:17.350 --> 00:08:21.760
If you get an error here it's probably because you forgot to do the migration command so keep that in

112
00:08:21.760 --> 00:08:22.590
mind.

113
00:08:22.960 --> 00:08:29.480
And then we can say Prince topic objects.

114
00:08:29.590 --> 00:08:36.250
All clothes princes and if I run this this will actually print all the objects in that topic model or

115
00:08:36.250 --> 00:08:37.510
topic table.

116
00:08:37.900 --> 00:08:39.260
You'll get nothing back the first time.

117
00:08:39.280 --> 00:08:40.420
So let's create something else.

118
00:08:40.420 --> 00:08:46.740
Say T is equal to an instance of topic and I will say the top name.

119
00:08:46.830 --> 00:08:55.900
So the topic name is the social network so maybe a couple of Web sites follow social networks things

120
00:08:55.900 --> 00:08:57.720
like Instagram Facebook.

121
00:08:57.740 --> 00:09:00.700
I don't know if anyone's still on MySpace but you get the idea.

122
00:09:00.750 --> 00:09:03.590
Enter here and then to actually save this change.

123
00:09:03.610 --> 00:09:10.260
I say T Dot save and that's a method that we inherit from the models that model class.

124
00:09:10.330 --> 00:09:12.630
So enter now it's saved.

125
00:09:12.670 --> 00:09:20.490
So if I run that previous command of current topic the object stopped all I get back Cleary's set topic

126
00:09:20.500 --> 00:09:21.420
social network.

127
00:09:21.550 --> 00:09:21.910
Great.

128
00:09:21.910 --> 00:09:28.550
So I actually was able to affect all of this and I'm going to quit.

129
00:09:28.660 --> 00:09:34.090
So so far we've created models and we've created the databases behind them and we actually use shell

130
00:09:34.090 --> 00:09:37.650
commands to add something.

131
00:09:37.650 --> 00:09:42.600
Now we're definitely not going to be using the shell every time we want to add something or view or

132
00:09:42.600 --> 00:09:46.920
model or get an idea of what the database actually contains.

133
00:09:47.010 --> 00:09:52.470
In order to use more convenience we use the admin interface and this is again a really awesome feature

134
00:09:52.490 --> 00:09:53.050
jingo.

135
00:09:53.070 --> 00:09:58.890
It's going to have a fully developed admin interface with very little work from us but in order to have

136
00:09:58.890 --> 00:10:05.280
the admin interface with the models we need to register them to our applications admin that py file.

137
00:10:05.280 --> 00:10:09.780
So let's show you how we can do that when to open up the directory tree here.

138
00:10:09.860 --> 00:10:14.700
And I have my application folder and inside of that I see Adam and up-I and it looks something like

139
00:10:14.700 --> 00:10:17.110
this from Django that contrib import adman.

140
00:10:17.160 --> 00:10:18.920
And it says register your models here.

141
00:10:19.020 --> 00:10:23.640
So I need to basically tell my application that my models exist.

142
00:10:23.800 --> 00:10:30.040
So I'll say from and then you put in the name of your application so my case its first app that models

143
00:10:30.040 --> 00:10:35.870
so that models that py file import and then I'm going to import all the models so that's Axxess record.

144
00:10:36.220 --> 00:10:39.110
That's topic an atom should be helping you out here.

145
00:10:39.220 --> 00:10:43.230
And then the last one was called web page I believe.

146
00:10:43.790 --> 00:10:44.350
Great.

147
00:10:44.800 --> 00:10:51.550
And then it's time to register them in the way you register them is from that Admin site.

148
00:10:51.820 --> 00:11:00.650
Register and it should be lowercase and then we passen the actual model so we can start with access

149
00:11:00.650 --> 00:11:10.420
record and then we'll do this a couple of more times for the other two models will say register topic

150
00:11:11.270 --> 00:11:19.270
and admin dot sites register register and then finally what page.

151
00:11:19.940 --> 00:11:20.350
OK.

152
00:11:20.400 --> 00:11:26.910
So these are registered and ready to be used with the admin interface in order to actually fully use

153
00:11:26.910 --> 00:11:29.460
the database with the admin interface.

154
00:11:29.460 --> 00:11:35.270
I need to create a super user that way not just any Joe Schmo can come in and start messing around for

155
00:11:35.270 --> 00:11:41.100
our database only people who were creating the web site and had access to all of this information could

156
00:11:41.100 --> 00:11:44.150
create a super user and we can do that with the following.

157
00:11:44.150 --> 00:11:49.350
So under first project I say Python managed up PI.

158
00:11:49.670 --> 00:11:56.610
And then we say create super user and then later from the admin interface you can create more super

159
00:11:56.610 --> 00:11:58.640
users or give people more permissions.

160
00:11:58.650 --> 00:12:02.420
But we have to create at least one super user here from this command line.

161
00:12:02.820 --> 00:12:10.320
So create a super user and we need to have a user name a password and an email address.

162
00:12:10.380 --> 00:12:12.420
Now it's totally up to you what you want to provide.

163
00:12:12.420 --> 00:12:14.380
Here is your user name email and password.

164
00:12:14.400 --> 00:12:17.550
Just really make sure that you remember them or write them down somewhere.

165
00:12:17.640 --> 00:12:22.960
Otherwise you have to repeat this entire create super superuser process so I'm going to say I'm a user

166
00:12:22.960 --> 00:12:24.160
name is Jose.

167
00:12:24.280 --> 00:12:31.460
E-mail address let's say training at Pierian data that com.

168
00:12:31.680 --> 00:12:38.310
And then my password elders say T E S T P S S W O R D.

169
00:12:38.310 --> 00:12:39.660
Test password.

170
00:12:39.660 --> 00:12:43.180
It won't let you do super weak password so keep that in mind.

171
00:12:43.230 --> 00:12:45.100
This one that I'm typing in is really weak.

172
00:12:45.120 --> 00:12:50.040
Just test password but I don't really care since I'm never actually going to launch this website.

173
00:12:50.100 --> 00:12:50.400
All right.

174
00:12:50.400 --> 00:12:51.690
So I created a super user.

175
00:12:51.690 --> 00:12:57.240
Now it's time to actually use that super user the admin interface and let's do that by actually running

176
00:12:57.240 --> 00:13:01.600
the server and checking out the admin interface in our browser.

177
00:13:01.620 --> 00:13:09.760
So I'll say Python managed up-I run server enter and hopefully have no errors.

178
00:13:09.850 --> 00:13:13.960
Ok I'm going to copy and paste this and jump to my browser.

179
00:13:13.960 --> 00:13:18.330
OK so here I am at my browser if you did everything correctly you shouldn't notice anything on the front

180
00:13:18.350 --> 00:13:21.360
end change you still get this picture of Dangeau himself.

181
00:13:21.490 --> 00:13:29.170
But if you say slash admen and hit enter now you get a log in where you can provide your username and

182
00:13:29.170 --> 00:13:30.140
then your password.

183
00:13:30.310 --> 00:13:31.910
So it's provider password.

184
00:13:32.140 --> 00:13:39.790
My case it was really weak as password log in and now this is what the Django adamant page looks like.

185
00:13:39.840 --> 00:13:41.790
And this was all done automatically for you.

186
00:13:41.790 --> 00:13:46.770
By Jingo the sequel databases were created for you this Adam and page was created for you with just

187
00:13:46.770 --> 00:13:50.940
those few lines of code and I know right now it may seem like I have do a lot of work to get all this

188
00:13:51.270 --> 00:13:56.490
but when I see or feel really comfortable with Django this is going to feel like magic every time.

189
00:13:56.490 --> 00:14:00.840
It still amazes me every time that jingle does this all for you automatically So this is really really

190
00:14:00.840 --> 00:14:01.680
awesome.

191
00:14:02.060 --> 00:14:02.540
OK.

192
00:14:02.760 --> 00:14:08.490
So if we check out topics I can actually click on topics here and I see that I have my topics social

193
00:14:08.490 --> 00:14:14.940
network and then I can click on that I can delete it I can save add another saving to editing a history

194
00:14:14.940 --> 00:14:16.870
of this comeback.

195
00:14:16.920 --> 00:14:19.840
The first app topics are Whoops.

196
00:14:20.040 --> 00:14:20.920
Come see something else.

197
00:14:20.940 --> 00:14:25.320
Access records right now I have zero access records I can manually add in an Access record.

198
00:14:25.350 --> 00:14:26.690
So that's pretty cool as well.

199
00:14:26.730 --> 00:14:32.310
So let's say I go to web pages and instead of using shell commands I could click here at a web page

200
00:14:32.540 --> 00:14:33.660
I select the topic.

201
00:14:33.810 --> 00:14:38.400
I can either click plus here to add another topic or select from existing topics.

202
00:14:38.400 --> 00:14:43.890
Remember this is a foreign key into another table so it's a drop down menu social network and then we

203
00:14:43.890 --> 00:14:44.850
can give it a name.

204
00:14:44.850 --> 00:14:52.650
So this web page can be something like Google and your Will something like W.W. google.com and then

205
00:14:52.650 --> 00:14:56.950
we're just going to say save and now I have a web page.

206
00:14:57.000 --> 00:14:57.610
Great.

207
00:14:57.930 --> 00:15:02.790
And now you can see how we can use Django admen to create an access records.

208
00:15:02.790 --> 00:15:08.910
Now you also see just how powerful the admin interface and why only certain people should have authentication

209
00:15:08.910 --> 00:15:11.240
and authorization to access this page.

210
00:15:11.370 --> 00:15:16.020
If someone else maliciously access this page they can do a lot of damage to your website.

211
00:15:16.020 --> 00:15:20.340
So again this is super important that you protect access to this Admin Page.

212
00:15:20.340 --> 00:15:26.730
This essentially gives you control over the entire site and later on the course will discuss users groups

213
00:15:26.730 --> 00:15:27.350
permissions.

214
00:15:27.360 --> 00:15:32.580
A lot more we can see here there's already an authentication authorization application for us.

215
00:15:32.580 --> 00:15:35.900
You can check out users right now we only have Jose that's me.

216
00:15:35.910 --> 00:15:39.860
But maybe you're working with other people in your company and you want to add permissions.

217
00:15:39.870 --> 00:15:45.720
You can eventually add users from here so you can say as a user their username password password confirmation

218
00:15:45.750 --> 00:15:46.540
etc..

219
00:15:46.590 --> 00:15:50.050
So again Django admin interface a lot of power here.

220
00:15:50.100 --> 00:15:54.820
You've got to keep the safe OK so that's it for now.

221
00:15:54.820 --> 00:15:59.590
Coming up next we're going to continue talking about Django models and a lot more.

222
00:15:59.650 --> 00:16:05.440
And we'll also show you how to actually use the library faker to populate your databases.

223
00:16:05.620 --> 00:16:07.260
Thanks everyone and I'll see you at the next level.
