WEBVTT
1
00:00:05.080 --> 00:00:11.150
Hello everyone and welcome to the Gengel basic forms lecture for doing a level 3 and this lecture where

2
00:00:11.160 --> 00:00:16.190
we're going to be doing is conceptually walking through the process of creating a form with jingoes

3
00:00:16.200 --> 00:00:21.840
So to actually do any coding you can just sit back relax and watch this lecture almost like a game plan

4
00:00:21.870 --> 00:00:23.120
for the next lecture.

5
00:00:23.130 --> 00:00:26.970
We're going to be coding through a lot of the topics we discuss here.

6
00:00:26.970 --> 00:00:27.660
All right.

7
00:00:27.660 --> 00:00:32.650
We've covered forums when discussing HMO so you might be wondering why bother with jingle forms.

8
00:00:32.650 --> 00:00:35.030
What extra features do they bring to the table.

9
00:00:35.860 --> 00:00:37.900
Well jingle forms have lots of advantages.

10
00:00:37.900 --> 00:00:39.890
And here are three distinct ones.

11
00:00:39.910 --> 00:00:43.000
The first one is that they can quickly generate HVM malformed widgets.

12
00:00:43.000 --> 00:00:48.760
Those are things such as your inputs where you have to specify that input will be email type or a text

13
00:00:48.760 --> 00:00:56.530
type text area type etc. checkboxes forms with Django allow you to just generate those quickly like

14
00:00:56.530 --> 00:00:58.270
with template tagging.

15
00:00:58.270 --> 00:01:02.950
Another advantage is that you can validate data and process it into a python data structure so you can

16
00:01:02.950 --> 00:01:04.630
quickly use it in the backend.

17
00:01:04.630 --> 00:01:09.310
You can also make your own custom validation rules and then the third point is that you can create form

18
00:01:09.310 --> 00:01:14.320
versions of our models and then quickly update models from forms and we'll talk about that in a future

19
00:01:14.320 --> 00:01:16.000
lecture OK.

20
00:01:16.000 --> 00:01:21.190
So let's actually walk through the steps you would have to take in order to create a form on your website

21
00:01:21.220 --> 00:01:26.950
from your web application and the very first thing you do is actually create a forms that PI file inside

22
00:01:26.950 --> 00:01:31.840
your application just like we previously created you or els the PI file inside the application.

23
00:01:31.900 --> 00:01:35.990
We have to create a form that PI file because it doesn't come standard.

24
00:01:36.070 --> 00:01:38.790
After that we call jingoes builtin forms classes.

25
00:01:38.800 --> 00:01:41.910
And this looks very similar to creating a model of Django.

26
00:01:41.920 --> 00:01:43.900
Let's see an example of this.

27
00:01:43.930 --> 00:01:49.150
So an example of what would be inside your forms up-I file inside of your application would be something

28
00:01:49.150 --> 00:01:49.590
like this.

29
00:01:49.600 --> 00:01:55.540
You say from just import forms and then you have a class form name forms that form where every input

30
00:01:55.630 --> 00:01:57.520
is essentially a class object attribute.

31
00:01:57.520 --> 00:02:01.340
Now you should notice that this looks a lot like creating a model with Django.

32
00:02:01.390 --> 00:02:06.420
So that's really good because you can have that similar feel across various aspects of jingoes.

33
00:02:06.430 --> 00:02:11.530
You don't need to re learn a completely different paradigm for creating a form it feels and looks like

34
00:02:11.530 --> 00:02:18.730
a model again looks similar to a model and now that we have the form created inside the applications

35
00:02:18.730 --> 00:02:25.790
forms that high file we need to show it using a view so inside your views that py file of your application

36
00:02:25.790 --> 00:02:28.790
we need to import the forms and there's two ways to do this.

37
00:02:28.790 --> 00:02:34.700
One is you can say from import forms and dot just means look at the current directory or you can do

38
00:02:34.700 --> 00:02:39.980
what we've been doing in the past and actually explicitly saying from form's import and then that actual

39
00:02:40.020 --> 00:02:41.000
quorum name.

40
00:02:41.000 --> 00:02:45.320
So if we go back we called the class form name.

41
00:02:45.320 --> 00:02:50.720
So if you were inside of your views that PI file you would say from that forms that PI file you just

42
00:02:50.720 --> 00:02:54.120
created import that class object form name.

43
00:02:54.200 --> 00:02:59.300
And again that dot just indicates to import or in the same directory as a current high file either one

44
00:02:59.300 --> 00:03:05.000
of these methods is ok once you've imported the form you can create a new view for it and it looks really

45
00:03:05.000 --> 00:03:08.240
similar to when you're recreating a view and calling a model.

46
00:03:08.240 --> 00:03:10.790
Except this time you're actually calling it form.

47
00:03:10.820 --> 00:03:16.490
So you say your function the form named you whatever you want that actually used to be called it takes

48
00:03:16.490 --> 00:03:22.320
in a request to create a temporary object called form equals Gorham's dot and then whatever your classes

49
00:03:22.430 --> 00:03:27.880
again that's the forms that PI file the class from it set that equal to a variable and then return render

50
00:03:27.950 --> 00:03:33.050
pass and request pass in the name of the HVM elf child is going to hold that form and then you pass

51
00:03:33.050 --> 00:03:38.680
in the context dictionary where you have some key Reim back that form from form name.

52
00:03:38.840 --> 00:03:45.230
Again very similar feel to how we are working with models in our views that py file and then all you

53
00:03:45.230 --> 00:03:50.660
have to do is add the view to the apps you are else either directly or with the include function.

54
00:03:50.750 --> 00:03:52.640
If you do it directly it just looks something like this.

55
00:03:52.640 --> 00:03:58.290
You'll say from your application import views and then somewhere inside you your old patterns file you'll

56
00:03:58.320 --> 00:04:04.470
say that your function passen the actual extension of your your all that you want the form to be on

57
00:04:04.900 --> 00:04:07.040
be used whatever the view is called.

58
00:04:07.040 --> 00:04:12.140
So in this case we call that form name view and then you give it a name such as form name again using

59
00:04:12.140 --> 00:04:13.460
really generic terms here.

60
00:04:13.550 --> 00:04:16.880
So you can later replace them with your own names.

61
00:04:17.910 --> 00:04:18.660
All right.

62
00:04:18.660 --> 00:04:23.700
So we can then create the templates folder along with a steam file that will hold the actual template

63
00:04:23.730 --> 00:04:24.950
tagging for the form.

64
00:04:25.230 --> 00:04:29.990
And remember to update the settings up-I file to reflect the new template directory variable.

65
00:04:30.000 --> 00:04:34.920
We did the anjing a level one so you can review it or you can watch the next lecture where we'll go

66
00:04:34.950 --> 00:04:36.810
and start the process from scratch.

67
00:04:36.810 --> 00:04:40.720
So you can remember how to actually fix that and you're setting up my file.

68
00:04:40.750 --> 00:04:45.580
Ok then you should also remember that your views should reflect subdirectories inside templates.

69
00:04:45.720 --> 00:04:48.730
And again we'll talk about that when we walk through it in the next lecture.

70
00:04:48.990 --> 00:04:54.810
And once you've done that everything is set up for us to go into the form name a simple file or whatever

71
00:04:54.810 --> 00:05:00.000
each team l files going to How's the actual form itself and that's going to be usually placed inside

72
00:05:00.000 --> 00:05:05.220
your templates folder and then the subdirectory every application folder and add in the actual template

73
00:05:05.220 --> 00:05:07.320
tagging that will create the jingle form.

74
00:05:07.320 --> 00:05:11.970
So just like we inject it of template tagging stuff from the model we can quickly inject the actual

75
00:05:11.970 --> 00:05:13.620
form.

76
00:05:13.660 --> 00:05:17.440
So there are several ways you can inject the form using template tagging.

77
00:05:17.620 --> 00:05:20.230
You can just pasand the key from the context dictionary.

78
00:05:20.240 --> 00:05:23.730
So remember the key from the context dictionary we had was just form.

79
00:05:23.770 --> 00:05:29.690
So you would just have these sort of Crilley brackets and passen form usually won't see it so plainly.

80
00:05:29.710 --> 00:05:35.200
But this is technically all you have to do and before we continue let's have a quick side discussion

81
00:05:35.200 --> 00:05:36.310
about three topics.

82
00:05:36.310 --> 00:05:44.300
HTP get and post since we're going to be using those to connect our form to our actual back and HTP

83
00:05:44.340 --> 00:05:47.110
stands for hypertext transfer protocol.

84
00:05:47.310 --> 00:05:51.540
And it is designed to enable communication between a client and a server.

85
00:05:51.900 --> 00:05:55.450
The client submits a request and then the server responds.

86
00:05:56.220 --> 00:06:02.790
The most commonly used methods for this request response protocol are get and post get request data

87
00:06:02.820 --> 00:06:08.180
from a resource and then post submits data to be processed to a specific resource.

88
00:06:08.180 --> 00:06:12.770
Again pretty simple idea a request and then a response.

89
00:06:12.790 --> 00:06:14.640
So those are the basics that we need to know for now.

90
00:06:14.650 --> 00:06:20.620
But you can check out the W3 schools dot com page on get slash post for a lot more details like what

91
00:06:20.620 --> 00:06:25.740
remains in browser history whether using GET or POST and what can be cast for future use.

92
00:06:25.750 --> 00:06:28.570
It's a really simple concept so you can just check out that page.

93
00:06:28.700 --> 00:06:34.010
But basically you just need to know that you're using a sort of request response protocol when working

94
00:06:34.010 --> 00:06:40.450
with forms and once you've put in that form template tag you should be able to see a very basic and

95
00:06:40.870 --> 00:06:43.410
honestly ugly looking form on that page.

96
00:06:43.430 --> 00:06:50.530
However you won't actually have an HMO form tag there so let's look at a more completed form HTL page

97
00:06:50.560 --> 00:06:54.620
would look like so on your form page that each table.

98
00:06:54.630 --> 00:06:57.140
Realistically you're going to have something that looks like this.

99
00:06:58.140 --> 00:07:03.700
So we've had some added bootstrap class styling calls and that's the div class container.

100
00:07:04.900 --> 00:07:10.750
And we're also calling the form as underscore P which uses a paragraph and that's going to allow you

101
00:07:11.110 --> 00:07:16.480
to have a nicer lay out of your actual form going to return it within paragraph tags.

102
00:07:16.480 --> 00:07:20.690
That way they're actually lined up from top to bottom instead of from left to right.

103
00:07:20.740 --> 00:07:25.960
If you just use form by itself inside those two sets of curly brackets it's going to go from left to

104
00:07:25.960 --> 00:07:31.210
right and you're not going to have a form looking for it that means top down instead of the left to

105
00:07:31.210 --> 00:07:36.830
right and that gives you nice format's work with using those paragraph tags which are automatically

106
00:07:36.830 --> 00:07:37.870
put there with the As.

107
00:07:37.870 --> 00:07:42.500
Underscore P and you can also check the jingle docs for other methods.

108
00:07:42.500 --> 00:07:46.400
You can request a form as a table for instance and work with it that way.

109
00:07:47.260 --> 00:07:53.300
And you also notice that I added the C S R F underscore token tag.

110
00:07:53.440 --> 00:07:57.910
So this is actually the first time we've encountered thinking about sites security measures that little

111
00:07:57.970 --> 00:08:04.860
see as RF tag token that if we go back it's right underneath the actual form template tagging.

112
00:08:04.990 --> 00:08:12.340
That is what is known as a cross site request forgery token and that secures the HTP post action that

113
00:08:12.340 --> 00:08:15.280
is initiated on the subsequent submission of a form.

114
00:08:15.280 --> 00:08:20.230
So when you click submit you have this cross-site requests for every token that helps protect the user

115
00:08:20.530 --> 00:08:26.310
or your web site from getting false data or from a user accidentally sending that data somewhere else.

116
00:08:27.030 --> 00:08:31.450
So the jingle framework actually requires that C S are tokens to be present.

117
00:08:31.560 --> 00:08:33.740
If it's not there your form may just not work.

118
00:08:33.750 --> 00:08:39.090
So that means jingoes security is actually built into the fact that it won't really work unless you

119
00:08:39.090 --> 00:08:40.450
provide that token.

120
00:08:40.560 --> 00:08:44.220
So you'll get in the habit of just from memory to provide that token whenever you're working with forms

121
00:08:44.790 --> 00:08:49.920
and it generally works by using what's known as a hidden input which automatically uses some random

122
00:08:49.920 --> 00:08:53.020
code and checks that it matches the user's local site page.

123
00:08:53.020 --> 00:08:53.600
We don't know.

124
00:08:53.610 --> 00:08:59.010
We don't need to know a whole lot about how that random code is generated but basically just know you

125
00:08:59.010 --> 00:09:01.650
always need to add in if we go back to slides.

126
00:09:01.860 --> 00:09:06.300
You always need to add in that see SRF token to make sure your form works correctly and that it's secure

127
00:09:08.170 --> 00:09:09.020
OK.

128
00:09:09.280 --> 00:09:11.490
So again just need to remember to put that template together.

129
00:09:11.530 --> 00:09:13.350
You don't need to worry about the background.

130
00:09:13.480 --> 00:09:14.630
Now that we can show the form.

131
00:09:14.650 --> 00:09:18.550
Let's discuss how to actually handle the form in a you.

132
00:09:18.600 --> 00:09:22.760
OK so right now if you set up everything the way you've been describing and you had a submit button

133
00:09:22.760 --> 00:09:25.490
there and your user clicked that nothing would happen.

134
00:09:25.610 --> 00:09:32.150
And that's because we still need to inform you that if you actually get a post back me the user submits

135
00:09:32.210 --> 00:09:37.940
and has a response to your request for information you should actually check if the data is valid and

136
00:09:37.940 --> 00:09:43.060
if so you can then grab and use that data and you can actually do this by editing the view.

137
00:09:43.130 --> 00:09:44.920
So far we just showed you a simple view.

138
00:09:44.990 --> 00:09:46.840
We're going to talk about a more advanced one.

139
00:09:46.970 --> 00:09:50.030
And later on we'll actually talk a lot more about form validation.

140
00:09:50.110 --> 00:09:55.480
And you can have your own custom validation rules but for now upon receiving a validated form we'll

141
00:09:55.490 --> 00:09:56.630
assume is just valid.

142
00:09:56.750 --> 00:10:03.790
We can access what's known as a dictionary like attribute of that actual data called clean data.

143
00:10:03.920 --> 00:10:05.660
And this will look something like this.

144
00:10:05.780 --> 00:10:10.070
So this is inside your applications views that py file.

145
00:10:10.100 --> 00:10:11.720
We've edited the view a little bit.

146
00:10:11.720 --> 00:10:16.850
First we just had that form is equal to forms that form name and then we had all the way at the bottom

147
00:10:16.850 --> 00:10:20.910
that render request form page or a symbol and then the form form.

148
00:10:21.050 --> 00:10:23.000
And what we've added is everything in the middle.

149
00:10:23.000 --> 00:10:24.500
So the basic steps looked like this.

150
00:10:24.500 --> 00:10:29.780
First you check to see if you actually get a post back meaning if the request method is equal to post.

151
00:10:29.780 --> 00:10:34.730
That means your user hit submit and is posting something back in which case you want to pass in that

152
00:10:34.730 --> 00:10:35.620
request.

153
00:10:35.630 --> 00:10:41.390
So you say now is form is equal to forms that form name pass in the request post and then you want to

154
00:10:41.390 --> 00:10:42.710
check if the form is valid.

155
00:10:42.710 --> 00:10:45.860
And we'll talk a lot more about form validation in a future lecture.

156
00:10:45.890 --> 00:10:52.490
But once you have that you can call form doc clean data and then access the information with a key dictionary

157
00:10:52.490 --> 00:10:52.990
call.

158
00:10:53.180 --> 00:10:55.930
So here you can see I'm just printing it out straight into the con..

159
00:10:56.120 --> 00:11:00.460
So I'll say for validation success prints in the console and then they will print out the name email

160
00:11:00.470 --> 00:11:02.600
and text they provided in that form.

161
00:11:02.600 --> 00:11:06.620
So it was a very simple form just asking for three fields.

162
00:11:06.720 --> 00:11:11.470
OK so we still have a lot more topics to cover like customizing form validation connecting forms to

163
00:11:11.470 --> 00:11:13.920
a model which we haven't even really discussed yet.

164
00:11:14.050 --> 00:11:18.760
But before we do all that let's get some practice with what we know so far and create a basic form project

165
00:11:18.760 --> 00:11:22.150
an application from scratch that's really going to help your understanding.

166
00:11:22.150 --> 00:11:22.940
Thanks everyone.

167
00:11:22.960 --> 00:11:24.020
I'll see you at the next lecture.

168
00:11:24.040 --> 00:11:26.020
We're going to be coding everything we just talked about.
