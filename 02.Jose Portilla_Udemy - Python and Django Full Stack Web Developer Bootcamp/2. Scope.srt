1
00:00:04,930 --> 00:00:08,510
Hello everyone and welcome to part one scope.

2
00:00:08,670 --> 00:00:13,350
We've already discussed scope a bit in the past specifically in the javascript section of the course

3
00:00:13,590 --> 00:00:16,710
but Python scope rules can sometimes confuse beginners.

4
00:00:16,710 --> 00:00:22,470
So let's quickly go over the key rules of Python's scope Python's scope follows the.

5
00:00:22,610 --> 00:00:27,370
Be rule local inclosing function local's global and builtin.

6
00:00:27,470 --> 00:00:32,710
And what this actually means is if you define a variable name somewhere in your code and then later

7
00:00:32,770 --> 00:00:35,590
on in your code you want to call that variable.

8
00:00:35,590 --> 00:00:40,810
Python needs to look in what's known as the namespace which is basically where it knows what variable

9
00:00:40,810 --> 00:00:47,170
names go where but sometimes it needs to follow rules to know what scope you're actually calling and

10
00:00:47,170 --> 00:00:48,420
the order it goes in.

11
00:00:48,460 --> 00:00:53,860
Is it first looks for local variables then it looks for inclosing function locals then it looks for

12
00:00:53,860 --> 00:00:59,400
global variables and then finally if it still can't find that namespace it goes to the builtin.

13
00:00:59,580 --> 00:01:04,950
So it's actually defined these four topics a little more so the local level or names assign that.

14
00:01:04,960 --> 00:01:10,830
Anyway within an actual function that includes a function or lambda expression and they're not declared

15
00:01:10,830 --> 00:01:15,260
global in that function meaning they don't use some sort of global keyword call.

16
00:01:15,360 --> 00:01:21,090
Then we have the enclosed function locals and that's names in the local scope of any and all inclosing

17
00:01:21,090 --> 00:01:21,780
functions.

18
00:01:21,800 --> 00:01:28,720
The E-F Orlando expressions from inner to outer now has to do with functions within other functions.

19
00:01:29,030 --> 00:01:34,460
Then we have the global level and those are names of sign that the top level of a module file or declared

20
00:01:34,460 --> 00:01:37,010
global and ADF within the file.

21
00:01:37,010 --> 00:01:41,530
And that again is either at the top level or using the global keyword.

22
00:01:41,540 --> 00:01:46,340
Then finally if we still can't find that variable name we look into the built in level and those are

23
00:01:46,340 --> 00:01:46,640
names.

24
00:01:46,640 --> 00:01:52,520
Pre-assigned and the built in names module things such as Open the range function a syntax error or

25
00:01:52,520 --> 00:01:57,600
even things such as the Eliane which has the builtin length function OK.

26
00:01:57,810 --> 00:02:02,320
Let's actually walk through some simple examples to make Python's scope a lot more clear to you.

27
00:02:02,580 --> 00:02:04,370
Let's hop over to the editor now.

28
00:02:04,710 --> 00:02:06,670
OK to begin her discussion of scope.

29
00:02:06,690 --> 00:02:09,210
Let's start off with a simple experiment.

30
00:02:09,210 --> 00:02:16,230
Imagine at the top of the file I define X to be equal to 25 and then I'm going to re create some function

31
00:02:16,230 --> 00:02:17,830
we'll call it my func.

32
00:02:17,970 --> 00:02:25,300
It doesn't take any arguments or parameters but what happens is it sets X equal to 50 and then what

33
00:02:25,300 --> 00:02:28,580
it will do it's going to return x.

34
00:02:28,630 --> 00:02:29,830
So that's what it does.

35
00:02:30,130 --> 00:02:34,750
And then what I'm going to do outside of this is say print x.

36
00:02:35,230 --> 00:02:41,070
So take some time and think what the actual output is going to be when I run this file.

37
00:02:41,270 --> 00:02:44,780
So I will say Python lodestar PI enter and I get out.

38
00:02:44,780 --> 00:02:48,910
X is equal to 25 or just 25.

39
00:02:48,920 --> 00:02:51,960
Hopefully that makes sense to you because we haven't even run this function yet.

40
00:02:51,980 --> 00:02:54,030
All we've done is to find it.

41
00:02:54,050 --> 00:03:00,830
The only thing that X here on line 7 is aware of is the Global X which is appear on line 1.

42
00:03:00,830 --> 00:03:09,780
Now let's imagine this we say print and I call my phunk inside of that print statement.

43
00:03:09,780 --> 00:03:15,920
Now remember this my function returns X after reassigning it to X equals 50.

44
00:03:15,920 --> 00:03:17,960
Now if I save this and run it.

45
00:03:17,960 --> 00:03:19,190
What do you expect to come out.

46
00:03:20,140 --> 00:03:26,980
Well hopefully expected 25 and 50 so that actually makes sense because remember Line 7 is looking at

47
00:03:26,980 --> 00:03:33,870
the Global X and then if I call my func it redefines that global x 25 to be equal to 50.

48
00:03:33,940 --> 00:03:40,020
Only inside the scope of the function and then returns X which in this case it will print out 50.

49
00:03:40,030 --> 00:03:46,720
Now sometimes what confuses students is this third line what happens if I say print x.

50
00:03:46,810 --> 00:03:48,780
Now what happens if I say print x.

51
00:03:48,880 --> 00:03:52,480
After I call my function in this manner.

52
00:03:52,480 --> 00:03:57,110
So let's comment these out and see what happens.

53
00:03:57,270 --> 00:03:58,050
So take some time.

54
00:03:58,050 --> 00:04:01,800
What do you expect to happen here on lines 9 and 10.

55
00:04:01,800 --> 00:04:03,460
I'm going to run this and will see.

56
00:04:03,660 --> 00:04:05,610
I get x is equal to 25.

57
00:04:05,610 --> 00:04:07,390
Hopefully that's what you also expected.

58
00:04:07,440 --> 00:04:09,320
If you expect that x is equal to 50.

59
00:04:09,450 --> 00:04:16,830
Let me quickly explain why that didn't happen and that has to do with scope when we read the fine x

60
00:04:16,840 --> 00:04:23,900
is equal to 50 inside of a function that reassignment is limited to the scope of the function meaning

61
00:04:23,900 --> 00:04:29,360
it doesn't actually do the re-assignment in what's known as the global namespace and that has to of

62
00:04:29,390 --> 00:04:35,350
those scope levels remember it goes local inclosing functions global and then built in.

63
00:04:35,420 --> 00:04:40,850
So here when we call my function X is only being redefined inside of this function namespace.

64
00:04:41,150 --> 00:04:47,150
And then when I say Prince X it's going to call this Global X because it really has nothing to do with

65
00:04:47,150 --> 00:04:49,260
this function call OK.

66
00:04:49,310 --> 00:04:56,300
So let's see some more examples of EJB that scoping level in order to really understand what's going

67
00:04:56,300 --> 00:04:56,880
on here.

68
00:04:56,990 --> 00:05:00,220
So that's our a little experiment to kind of introduce the idea of scope.

69
00:05:00,390 --> 00:05:04,090
But let's go ahead and create a land expression.

70
00:05:04,280 --> 00:05:09,180
This will begin to show the very first level which is the local level.

71
00:05:09,190 --> 00:05:17,800
So if I have a land expression that looks something like this Lamda x x to the power to this particular

72
00:05:17,830 --> 00:05:19,400
x is local.

73
00:05:19,450 --> 00:05:29,160
So this is a local level knowledge shoyu inclosing function locals.

74
00:05:29,170 --> 00:05:30,470
And this is the next level.

75
00:05:30,520 --> 00:05:36,180
So this occurs when we have a function inside of another function and which is known as nested functions.

76
00:05:36,190 --> 00:05:41,980
So again for this lambda example you'd probably have this inside of another function but let's show

77
00:05:41,980 --> 00:05:48,940
you inclosing function local's this next level and going to create a variable called name and say this

78
00:05:48,940 --> 00:05:51,410
is a global name.

79
00:05:51,430 --> 00:05:55,660
And the reason it's global is because it's not inside of any function it's at the top level of the stop

80
00:05:55,660 --> 00:06:01,200
pie file which is sometimes also known as a module although we haven't really say that as a module and

81
00:06:01,210 --> 00:06:03,170
aren't calling it in another the PI file.

82
00:06:03,200 --> 00:06:06,180
It's just a simple dot PI file but it is outside of any function.

83
00:06:06,190 --> 00:06:08,350
So it's at the global level.

84
00:06:08,350 --> 00:06:14,770
Now I create a function called grete and inside is great function.

85
00:06:14,790 --> 00:06:24,900
I'm going to assign name to be Samie and inside of this function I define another function called hello

86
00:06:26,810 --> 00:06:40,720
and then I say print Hello last name then outside of all these functions I'm going to call Great let's

87
00:06:40,720 --> 00:06:44,900
say this and hopefully you will know when I run this.

88
00:06:44,920 --> 00:06:46,420
What's going to happen.

89
00:06:46,420 --> 00:06:50,310
So I'll say Python notes that PI take your time.

90
00:06:50,320 --> 00:06:53,280
And before we actually run this think about what you expect to happen.

91
00:06:53,300 --> 00:06:55,320
Note here that I'm calling greed.

92
00:06:55,390 --> 00:06:59,140
Think about this greet return anything or perform any action.

93
00:06:59,140 --> 00:07:05,770
So we enter and we get nothing out and that makes sense because so far greets all it does is it resigns

94
00:07:05,830 --> 00:07:12,130
name equal to Samie in its function name space here and then it has a function defined inside of it.

95
00:07:12,130 --> 00:07:18,960
However no function is actually called Inside of Crete if we want to actually print Hello plus Sammy.

96
00:07:19,150 --> 00:07:20,010
I have to call.

97
00:07:20,030 --> 00:07:20,730
Hello.

98
00:07:20,950 --> 00:07:24,010
So I've only to find that so far.

99
00:07:24,090 --> 00:07:31,830
And look here how in calling Hello lined up with it's the call if I did this call hello.

100
00:07:31,840 --> 00:07:32,710
Within function.

101
00:07:32,710 --> 00:07:33,330
Hello.

102
00:07:33,370 --> 00:07:34,740
That wouldn't make any sense.

103
00:07:34,780 --> 00:07:35,970
It wouldn't know what Hello is.

104
00:07:35,980 --> 00:07:37,780
And you'd get an error there.

105
00:07:37,900 --> 00:07:39,140
So we're going to do this.

106
00:07:39,250 --> 00:07:43,370
And now let's see what happens when I call Python it's supply I get.

107
00:07:43,390 --> 00:07:44,910
Hello Sammy.

108
00:07:44,920 --> 00:07:49,970
So now Samuel was used because the hello function was enclosed inside of the group function.

109
00:07:50,200 --> 00:07:51,620
So what's actually happening here.

110
00:07:51,670 --> 00:07:55,430
I have this global variable name inside of the function.

111
00:07:55,440 --> 00:08:03,640
I re-assign name to be the Samie I assign Hello being equal to print Hello name and the most outer level

112
00:08:03,700 --> 00:08:08,540
it first looks for name is right here inside this enclosing function.

113
00:08:08,590 --> 00:08:14,860
If I put a hash tag here and comment this out then it's not going to find name outside of it.

114
00:08:14,980 --> 00:08:18,280
So it's going to look at the next level which is going to end up being global.

115
00:08:18,550 --> 00:08:21,180
So now let's run Python floats up high and we should see.

116
00:08:21,310 --> 00:08:21,800
Hello.

117
00:08:21,820 --> 00:08:23,790
This is a global name and there it is.

118
00:08:23,800 --> 00:08:24,090
Hello.

119
00:08:24,100 --> 00:08:25,050
This is a global name.

120
00:08:25,330 --> 00:08:30,140
So you can see here the different levels of where Python is looking for variable names in the name space.

121
00:08:30,220 --> 00:08:35,860
And that's really the whole point of scope knowing what variables are going to be used if you have things

122
00:08:35,860 --> 00:08:37,810
like nested functions.

123
00:08:38,060 --> 00:08:41,610
And it's always important to remember and this is sometimes a point of confusion.

124
00:08:41,660 --> 00:08:44,210
It doesn't matter if inside of a function scope.

125
00:08:44,240 --> 00:08:45,580
I read the file name.

126
00:08:45,710 --> 00:08:52,940
If I go back outside of this function completely and asked to print the name it's going to find it here

127
00:08:53,270 --> 00:08:54,200
globally first.

128
00:08:54,230 --> 00:08:58,130
It's not going to be able to go inside a function and look for it because it really has no business

129
00:08:58,370 --> 00:09:01,160
going inside the function until it's been called.

130
00:09:01,160 --> 00:09:06,620
And even if the function has been called that variable namespace is only here in this local function

131
00:09:06,620 --> 00:09:07,830
scope.

132
00:09:07,850 --> 00:09:10,490
So let me run this hit Python notes and I see.

133
00:09:10,490 --> 00:09:11,460
Hello Samie.

134
00:09:11,510 --> 00:09:14,230
This is a global name because I said name is Sammy.

135
00:09:14,330 --> 00:09:16,760
So greets in its scope when it calls hello.

136
00:09:16,770 --> 00:09:18,110
Name is equal to Samie.

137
00:09:18,170 --> 00:09:21,050
But when I say Prince name it goes to the global one name.

138
00:09:21,050 --> 00:09:22,480
This is a global name.

139
00:09:22,550 --> 00:09:23,360
OK.

140
00:09:23,420 --> 00:09:29,460
Now beyond this there is the built in level and the builtin level is just things that are already built.

141
00:09:29,480 --> 00:09:35,270
So things like elhi end basically anything that pops up in this list here to help you out is built into

142
00:09:35,270 --> 00:09:35,930
Python.

143
00:09:36,020 --> 00:09:38,510
And these are things that you never want to actually read the fine.

144
00:09:38,630 --> 00:09:44,120
You would never want to say Eliane is equal to 23 Otherwise you're never going to be able to call the

145
00:09:44,120 --> 00:09:45,170
length function again.

146
00:09:45,200 --> 00:09:47,660
You would have accidently read the fine in the global space.

147
00:09:47,660 --> 00:09:50,380
So again these are built in function names in Python.

148
00:09:50,390 --> 00:09:51,860
You should never overwrite these.

149
00:09:51,920 --> 00:09:56,720
And you'll notice you've typed based off the syntax highlighting and based on the fact that it's already

150
00:09:56,720 --> 00:09:59,940
trying to help you finish that statement before you've even defined it.

151
00:10:00,740 --> 00:10:04,660
OK so let's talk a little bit little bit more about local variables.

152
00:10:04,730 --> 00:10:09,260
When you declare variables inside of a function definition they are not related in any way to other

153
00:10:09,260 --> 00:10:12,580
variables with the same names used outside of the function.

154
00:10:12,600 --> 00:10:14,790
That's a key point I keep repeating myself on.

155
00:10:14,900 --> 00:10:17,280
So variable names are local to that function.

156
00:10:17,360 --> 00:10:20,010
And this is called the scope of the variable itself.

157
00:10:20,270 --> 00:10:22,120
All variables have the scope of the block.

158
00:10:22,160 --> 00:10:25,940
They are declared in starting from the point definition of the name.

159
00:10:25,970 --> 00:10:30,510
So let's show you another example and it's going to seem like a repetitive example.

160
00:10:30,530 --> 00:10:35,570
So if you kind of already get it maybe you can continue off with this lecture go on to the next one.

161
00:10:35,660 --> 00:10:38,940
But if you're still a little confused Let's show you a couple of more examples.

162
00:10:39,000 --> 00:10:45,260
So I've create a function and I define it at the top globally that x is equal to 50 and then I say DPF

163
00:10:45,440 --> 00:10:49,770
take function X and I'm going to say colon here.

164
00:10:49,790 --> 00:11:00,390
Prince X is and then we can say comma X there is kind of like a fast way to print something and then

165
00:11:00,390 --> 00:11:13,340
I will say X here redefine it to be 1000 and then after that it will print x local x change to come

166
00:11:13,400 --> 00:11:14,740
x.

167
00:11:14,990 --> 00:11:23,770
So we'll save this and then outside of this I will call phunk X save it and then if a hit Python lodestar

168
00:11:23,770 --> 00:11:26,590
PI note here it says X is 50.

169
00:11:26,590 --> 00:11:31,920
So since it hasn't found anything redefining X before Line 4 it goes to the global space.

170
00:11:31,960 --> 00:11:33,030
OK Ezekial 50.

171
00:11:33,070 --> 00:11:35,550
Then locally we redefine X to be 1000.

172
00:11:35,590 --> 00:11:37,860
And it says local Xchange to 1000.

173
00:11:38,290 --> 00:11:39,640
But here's the main catch.

174
00:11:39,760 --> 00:11:48,620
If I say outside of this function even after the function has been called Prince X and I run this you

175
00:11:48,620 --> 00:11:50,400
get back to 50.

176
00:11:50,420 --> 00:11:55,080
So here if we're in the global namespace we're going to look for things in the global namespace.

177
00:11:55,100 --> 00:11:59,750
So the first time that we print the value of the name x with the first line in the function body Python

178
00:11:59,750 --> 00:12:04,550
uses the value of the parameter declared in the main block above the function definition.

179
00:12:04,550 --> 00:12:10,780
Next we assign the value there x to 1000 and the name x is local to our function now.

180
00:12:10,790 --> 00:12:16,910
So when we change the value of x inside of that function the x defined in the main block remains unaffected.

181
00:12:16,910 --> 00:12:19,420
Now what I mean by main block is the X appear.

182
00:12:19,700 --> 00:12:24,440
So if that last statement what we're actually doing is we display the value of x as the find in that

183
00:12:24,440 --> 00:12:29,320
main block thereby confirming that it's actually been effected by this local assignment.

184
00:12:29,810 --> 00:12:35,090
Now let's say you are in a situation where within sight of a function you actually want to change the

185
00:12:35,090 --> 00:12:35,950
global x.

186
00:12:35,960 --> 00:12:39,520
So far it seems like you're only limited to changing the local x.

187
00:12:39,560 --> 00:12:45,380
What if you actually wanted this function to reach out to the global level and rename ex-secret to be

188
00:12:45,380 --> 00:12:46,670
1000.

189
00:12:46,670 --> 00:12:47,630
How can we do that.

190
00:12:47,900 --> 00:12:51,240
Well the way you can do that is with the global keyword call.

191
00:12:51,350 --> 00:12:57,170
Now as a quick know it's recommended that you try to avoid using the global keyword call because doing

192
00:12:57,170 --> 00:13:02,530
this if you have a really long line of code or a large file of code can really mess up your namespace.

193
00:13:02,540 --> 00:13:04,210
If you're not super careful about it.

194
00:13:04,250 --> 00:13:08,660
So again I'm showing it to you here but I don't recommend that you ever actually use the global name

195
00:13:08,870 --> 00:13:11,230
or global keyword unless you really have to.

196
00:13:11,270 --> 00:13:17,330
But basically what the global keyword does is it says hey I'm going to be using the global x when I

197
00:13:17,330 --> 00:13:22,940
call X here I want to actually reach out to that global namespace grab that X and then play around with

198
00:13:22,940 --> 00:13:24,170
it inside here.

199
00:13:24,170 --> 00:13:31,490
So if I say DPF func X and the Klare global x and we're actually going to not even take any input here

200
00:13:31,820 --> 00:13:38,450
we'll just say call the function grab x from the global namespace using that global keyword and then

201
00:13:38,450 --> 00:13:42,620
say x is equal to 1000

202
00:13:45,400 --> 00:13:56,620
then I'm going to save this in here what I'm going to do is say Prince before function call X is and

203
00:13:56,630 --> 00:14:01,300
then say Khama X and let's comment these two lines out for now.

204
00:14:01,340 --> 00:14:06,010
So all I'm doing here is I'm never act of only to find this function I'm never actually calling it I'm

205
00:14:06,020 --> 00:14:07,490
just saying exercycle to 50.

206
00:14:07,640 --> 00:14:11,750
So we would expect this to say print's before a function call x is equal to 50.

207
00:14:11,750 --> 00:14:18,570
So I run Python notes that pi and it says before function call x is equal to 50 now I'm going to call

208
00:14:18,840 --> 00:14:24,390
function and note here inside of this function on calling Global X which allows this function to reach

209
00:14:24,390 --> 00:14:32,720
the global namespace and grab that X then after this I'm going to copy and paste this here and then

210
00:14:32,720 --> 00:14:38,880
say after Save it run this.

211
00:14:39,240 --> 00:14:45,450
And note what happened it says before function call X is 50 after the function call X is 1000.

212
00:14:45,450 --> 00:14:52,020
So now with this global keyword I've been actually able to rename or redefine or re-assign something

213
00:14:52,020 --> 00:14:53,290
in the global namespace.

214
00:14:53,310 --> 00:14:58,200
So now the x 1000 is actually causing that effect to be permanent.

215
00:14:58,320 --> 00:15:03,440
Again if I do something like this comment this out and I just say x is equal to 1000.

216
00:15:03,450 --> 00:15:06,290
Then if I run this I get twice.

217
00:15:06,330 --> 00:15:08,340
X is equal to 50 x is equal to 50.

218
00:15:08,370 --> 00:15:13,700
So that global keyword allows you to reach out to the global namespace and actually clarify that.

219
00:15:13,710 --> 00:15:17,280
No I do want to reassign that global variable x.

220
00:15:17,310 --> 00:15:22,920
Again this can be really confusing if you end up having a bunch of global calls all over your pie script

221
00:15:22,920 --> 00:15:25,710
so it's recommended they try to avoid global.

222
00:15:25,740 --> 00:15:28,580
Instead what you should do is use return keywords.

223
00:15:28,620 --> 00:15:34,170
So if you actually want to send back an X you wouldn't want to say x is equal to 1000.

224
00:15:34,230 --> 00:15:41,700
You'd want to say x is equal to 1000 return X and then with that return statement you can use it in

225
00:15:41,700 --> 00:15:42,880
the global namespace.

226
00:15:43,050 --> 00:15:55,110
So then you would say something like x is equal to phunk and then run something like this.

227
00:15:55,150 --> 00:15:57,100
And here we get 51000.

228
00:15:57,280 --> 00:16:02,590
So this use of the return statement has pretty much the same effect as if we had the global keyword

229
00:16:02,770 --> 00:16:06,590
without any of the risk of accidentally redefining something the global space.

230
00:16:06,700 --> 00:16:12,860
OK so that's all we really need to discuss about scope in python we won't see such complicated examples

231
00:16:12,860 --> 00:16:13,930
and we're working with Django.

232
00:16:13,950 --> 00:16:17,310
But it is something I want you to be aware of as you continue to program.

233
00:16:17,350 --> 00:16:22,060
If you have any questions I definitely suggest you check out the part 1 scope that Paice group which

234
00:16:22,060 --> 00:16:25,690
has full notes and many more examples of what we covered here.

235
00:16:25,690 --> 00:16:29,050
Always feel free to post the Q&amp;A forums if anything confused you.

236
00:16:29,050 --> 00:16:31,690
Thanks everyone and I'll see you at the next lecture.
