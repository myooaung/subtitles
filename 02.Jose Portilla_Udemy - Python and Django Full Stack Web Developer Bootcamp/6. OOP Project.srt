1
00:00:04,920 --> 00:00:12,030
Hello everyone and welcome to Part 3 O.P. Project Object Oriented Programming is fundamental to becoming

2
00:00:12,030 --> 00:00:13,340
a good Python programmer.

3
00:00:13,360 --> 00:00:17,640
And we're going to be using it so much in Jingo that it's great to get some extra practice by building

4
00:00:17,700 --> 00:00:23,100
a game will use object oriented programming to create the card game known as war.

5
00:00:23,100 --> 00:00:25,300
It's a very simple card game.

6
00:00:25,460 --> 00:00:31,790
The relevant file for this lecture is Part 3 O.P. project up PI and there's also a solution's file.

7
00:00:31,790 --> 00:00:35,660
Don't check the solutions file yet and leave attend to the project.

8
00:00:35,750 --> 00:00:40,730
Feel free to either treat this as a COTA long project where you just go straight to the solutions lecture

9
00:00:40,820 --> 00:00:42,410
and actually code along with me.

10
00:00:42,620 --> 00:00:44,630
But I do recommend that you attempt that on your own.

11
00:00:44,630 --> 00:00:49,840
First let's take a quick look at the actual project file which has some extra code to help you out.

12
00:00:49,880 --> 00:00:53,310
If you attempt to do this on your own I'll jump to my editor now.

13
00:00:53,480 --> 00:00:59,300
OK so here you have three opii project up-I file open and when you open this file you'll notice that

14
00:00:59,300 --> 00:01:01,010
there's a bunch of commented code.

15
00:01:01,010 --> 00:01:03,440
These are just the rules of the game war.

16
00:01:03,440 --> 00:01:05,830
If you haven't played war don't really know what it's about.

17
00:01:05,840 --> 00:01:10,900
You can read this to actually understand the rules or you can actually read the wikipedia link to war.

18
00:01:10,910 --> 00:01:15,650
The card game but the basic rules are very simple and the way we're going to do it for this project

19
00:01:15,650 --> 00:01:18,380
is you playing versus the computer.

20
00:01:18,380 --> 00:01:20,400
What's going to happen is you have a deck of cards.

21
00:01:20,420 --> 00:01:26,810
It gets split in half and half of its face down to you half of it is face down to the computer and you

22
00:01:26,810 --> 00:01:29,990
and the computer will flip one card face up at the same time.

23
00:01:30,020 --> 00:01:35,020
Whoever has the higher card wins both of those cards and that's the basic premise of war.

24
00:01:35,180 --> 00:01:40,820
But there is a special event that happens when both cards they pull face up happen to be equal to each

25
00:01:40,820 --> 00:01:41,830
other in rank.

26
00:01:41,870 --> 00:01:47,990
If that's the case then you and the computer pull out an extra three cards and then you pull out another

27
00:01:47,990 --> 00:01:53,270
card to actually compare to each other and then whoever wins that wins the war and then wins all those

28
00:01:53,270 --> 00:01:53,970
cards.

29
00:01:54,020 --> 00:01:55,660
So that would be all 10 cards.

30
00:01:56,690 --> 00:02:02,430
OK so then we want to scroll down here and we can see that I've imported some useful things for you

31
00:02:02,440 --> 00:02:08,230
so I've created already from random import shuffle and then we have two lists here that are really useful

32
00:02:08,230 --> 00:02:09,630
for creating cards.

33
00:02:09,700 --> 00:02:13,690
They're just lists that are created by splitting a string based on the whitespace so you can play around

34
00:02:13,750 --> 00:02:16,930
those you don't have to use them but they're there just to help you out.

35
00:02:16,930 --> 00:02:18,590
Now we have the deck class.

36
00:02:18,670 --> 00:02:22,280
The hand class the player class and then some game play.

37
00:02:22,540 --> 00:02:24,810
So what you're going to be doing is the following.

38
00:02:24,910 --> 00:02:30,160
You're going to be using this deck class and this object will create a deck of cards to initiate play

39
00:02:30,610 --> 00:02:34,930
and you can then use this deck list of cards to split in half and give to the players.

40
00:02:34,930 --> 00:02:39,300
It will also be able to use these two lists here to create the deck.

41
00:02:39,310 --> 00:02:43,950
It should also have a method for splitting and cutting the deck in half and shuffling deck.

42
00:02:43,960 --> 00:02:49,170
We also have the hand class and each player has a hand and they can add or remove cards from the hand

43
00:02:49,450 --> 00:02:54,880
and there should be an add or remove card method within this class that we have the player class and

44
00:02:54,880 --> 00:03:00,040
that takes in a name and an instance of a hand class object and the player can then play cards and check

45
00:03:00,040 --> 00:03:01,370
that they still have cards.

46
00:03:01,510 --> 00:03:05,370
And in Filey over here we'll have game play again.

47
00:03:05,430 --> 00:03:10,570
You don't actually have to use these three specific classes but you do have to use at least one class

48
00:03:10,630 --> 00:03:13,240
and use object oriented programming in some way.

49
00:03:13,450 --> 00:03:15,250
But this is just skeleton code here.

50
00:03:15,250 --> 00:03:19,170
Just some scaffolding free to fill out if you want to follow along with the solutions.

51
00:03:19,180 --> 00:03:23,790
OK best of luck and coming up next is the solution lecture where we will be coding along.

52
00:03:23,790 --> 00:03:25,020
Any example solution.

53
00:03:25,030 --> 00:03:27,310
Thanks everyone and I'll see at the next lecture.
