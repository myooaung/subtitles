1
00:00:04,990 --> 00:00:10,150
Hello everyone and welcome to the templates features and filter's lecture before we complete jingle

2
00:00:10,150 --> 00:00:12,350
level 4 in our understanding of templates.

3
00:00:12,460 --> 00:00:18,430
Let's quickly touch upon Django template filter's imagine that you had some information from your model

4
00:00:18,640 --> 00:00:23,590
that you wish to use across various views or pages on your website but perhaps you wanted to make a

5
00:00:23,590 --> 00:00:28,630
slight edit to the information before injecting it maybe like a string operation or basic arithmetic

6
00:00:29,080 --> 00:00:34,390
for example maybe on a certain web page you wanted the string to be all capital letters but on another

7
00:00:34,390 --> 00:00:36,640
web page you just want to be in lowercase.

8
00:00:36,640 --> 00:00:42,170
Well how do you actually deal if that luckily Gengel provides a ton of easy to implement template filters

9
00:00:42,500 --> 00:00:45,980
that allow you to affect the injection before the splaying it to the user.

10
00:00:45,980 --> 00:00:48,490
And this allows for flexibility from a single source.

11
00:00:48,590 --> 00:00:51,530
So you don't have to worry about editing the source on the Python side.

12
00:00:51,530 --> 00:00:55,420
You can actually edit it using templates on the Web site.

13
00:00:55,540 --> 00:00:58,890
So the general form of a template filter it looks like this.

14
00:00:58,930 --> 00:01:04,570
Previously we just had those set of brackets and then the value we wanted to inject here we can say

15
00:01:04,570 --> 00:01:09,880
the value you want to inject have the pipe operator that straightline the name of the filter and then

16
00:01:09,880 --> 00:01:11,840
the parameter that the filter takes in.

17
00:01:11,860 --> 00:01:16,120
Now not all filters taken parameters and we'll see examples of them as we continue on throughout this

18
00:01:16,120 --> 00:01:16,920
section.

19
00:01:17,230 --> 00:01:20,620
Many of these filters are based off of common built in Python functions.

20
00:01:20,620 --> 00:01:22,350
So you're already going to be familiar with them.

21
00:01:22,360 --> 00:01:25,340
They're naming operations and what they can actually do.

22
00:01:25,750 --> 00:01:30,250
OK let's show you the documentation on them so you know how to reference all the various filters.

23
00:01:30,250 --> 00:01:31,170
There are a ton of them.

24
00:01:31,270 --> 00:01:35,230
So a lot of times will just be go into documentation seeing which one you need to use and then copying

25
00:01:35,230 --> 00:01:38,730
and pasting from there later on will also show you how you create your own filters.

26
00:01:39,720 --> 00:01:41,520
I'm going to jump to documentation.

27
00:01:41,520 --> 00:01:42,890
You can go to this specific link.

28
00:01:42,900 --> 00:01:46,550
This is the documentation link for templates for 1.1 0.

29
00:01:46,560 --> 00:01:50,610
This version of Django or you can just google search Gengel plus templates and it'll probably take you

30
00:01:50,610 --> 00:01:53,090
to this page and hop over there now.

31
00:01:53,100 --> 00:01:58,400
All right so here we are at the documentation page for Django templates and this is a really great reference

32
00:01:58,410 --> 00:02:00,410
if you ever have any questions on templates.

33
00:02:00,510 --> 00:02:04,070
And as I always mentioned the jayega documentation in general is really good.

34
00:02:04,170 --> 00:02:08,740
So the templates page it starts off by talking about different support for template engines.

35
00:02:08,790 --> 00:02:11,620
By default we use the Django template language or DTL.

36
00:02:11,640 --> 00:02:13,580
It's more than enough for our use cases.

37
00:02:13,590 --> 00:02:17,880
So if you're just learning Django as you get more advance you can always check out popular alternatives

38
00:02:17,880 --> 00:02:20,060
for template engines such as Jinja too.

39
00:02:20,190 --> 00:02:23,280
And this tells you how to connect them how to download them etc..

40
00:02:23,490 --> 00:02:25,590
So a lot of really useful information here.

41
00:02:25,620 --> 00:02:28,590
But we're going to be concerned about is template filters.

42
00:02:28,650 --> 00:02:33,280
So if you come over here on the right hand side there should be a link under syntax to filters.

43
00:02:33,330 --> 00:02:37,030
You can click on it and it will show you what filters look like.

44
00:02:37,080 --> 00:02:42,600
So as I mentioned in general look like this I'm going to zoom in a little bit here to see the filters

45
00:02:43,050 --> 00:02:44,370
Museum and one more time.

46
00:02:44,460 --> 00:02:47,340
Scroll back down to the filters.

47
00:02:47,340 --> 00:02:48,260
And here there.

48
00:02:48,480 --> 00:02:48,970
OK.

49
00:02:49,290 --> 00:02:51,510
So the filters in general look like this.

50
00:02:51,510 --> 00:02:57,190
Remember we have a context dictionary that is actually calling a key value pair.

51
00:02:57,270 --> 00:03:01,560
And then we pass in the key here that's the actual variable or value we're passing in.

52
00:03:01,680 --> 00:03:06,240
Then you have the pipe operator and the name of the filter you want to apply.

53
00:03:06,240 --> 00:03:11,520
So in this case we have Django where the context of jingle being the key and it's attached to the string

54
00:03:11,550 --> 00:03:16,920
that's in all lower case and then the filter name we're using is called Title and title if you're familiar

55
00:03:16,920 --> 00:03:22,380
with Python string operations it's also a python string operation where it basically capitalizes the

56
00:03:22,380 --> 00:03:24,590
first letter and every word in a string.

57
00:03:24,750 --> 00:03:27,900
So you can see how converts this to this right here.

58
00:03:27,960 --> 00:03:32,340
And as I mentioned some filters also take an argument or a parameter and that would look like something

59
00:03:32,340 --> 00:03:35,990
like this you would say my date that belongs to some context dictionary.

60
00:03:36,090 --> 00:03:41,810
The pipe operator and then the name of the filter date's colon and in a string whatever argument you're

61
00:03:41,820 --> 00:03:47,100
actually passing in this case the format of the date you want to display and there's a reference for

62
00:03:47,100 --> 00:03:50,880
all the built in filters as well as instructions for writing your own custom filters.

63
00:03:50,880 --> 00:03:55,230
Now there are so many built in filters that we don't have enough time in this course to go through them

64
00:03:55,230 --> 00:03:55,710
all.

65
00:03:55,740 --> 00:03:59,100
Really what you're going to be doing is clicking on this link and referencing them yourself.

66
00:03:59,280 --> 00:04:04,170
But there's also a way to write your own custom filters which will also show you how to do in a future

67
00:04:04,170 --> 00:04:04,730
election.

68
00:04:04,860 --> 00:04:06,680
But that's all we're going to cover for now.

69
00:04:06,750 --> 00:04:12,420
In this lecture coming up next we're going to talk about just some few examples of basic built in filters

70
00:04:12,480 --> 00:04:15,510
as well as talking about how to create your own custom filters.

71
00:04:15,510 --> 00:04:17,190
Thanks everyone and I'll see you at the next lecture.
