WEBVTT
1
00:00:00.000 --> 00:00:05.216
Configure TCP/IP.

2
00:00:05.216 --> 00:00:09.826
I wanted to roll up as much as possible in a single slide.

3
00:00:09.826 --> 00:00:12.948
This is a Visio drawing that I put together for you that

4
00:00:12.948 --> 00:00:15.768
attempts to sum up the Transmission Control

5
00:00:15.768 --> 00:00:18.529
Protocol/Internet Protocol suite in one slide.

6
00:00:18.529 --> 00:00:20.707
Wow, that's a lot of work to do, isn't it?

7
00:00:20.707 --> 00:00:23.005
I just realize that now.

8
00:00:23.005 --> 00:00:25.762
TCP/IP, those are two separate protocols,

9
00:00:25.762 --> 00:00:30.626
but there's a lot more than just those protocols in the TCP/IP stack.

10
00:00:30.626 --> 00:00:33.845
TCP/IP is the de facto network protocol on the internet,

11
00:00:33.845 --> 00:00:36.179
as well as on local area networks.

12
00:00:36.179 --> 00:00:39.709
What we have in this slide are two network subnetworks,

13
00:00:39.709 --> 00:00:40.493
or subnets,

14
00:00:40.493 --> 00:00:44.847
where we have a hardware device called a switch connecting desktop

15
00:00:44.847 --> 00:00:49.333
workstations in the left subnet and servers in the right-hand subnet.

16
00:00:49.333 --> 00:00:53.190
And that's often a common motif that you'll organize your

17
00:00:53.190 --> 00:00:56.642
network connections by their class, and then use a router,

18
00:00:56.642 --> 00:00:59.147
that device you see in the center of the screen,

19
00:00:59.147 --> 00:01:02.848
to separate the traffic and control traffic between the subnets.

20
00:01:02.848 --> 00:01:08.758
So as far as specific IP configuration, we see pc1 has an IP address of 192.

21
00:01:08.758 --> 00:01:09.283
168.

22
00:01:09.283 --> 00:01:14.542
124 with, you might know, a 24-bit subnet mask, 255.

23
00:01:14.542 --> 00:01:15.067
255.

24
00:01:15.067 --> 00:01:15.593
255.

25
00:01:15.593 --> 00:01:18.758
0, and its default gateway is 192.

26
00:01:18.758 --> 00:01:19.198
168.

27
00:01:19.198 --> 00:01:19.637
11.

28
00:01:19.637 --> 00:01:24.681
Pc2, notice that has an IP address in the same range, 192.

29
00:01:24.681 --> 00:01:25.082
168.

30
00:01:25.082 --> 00:01:28.289
1, but its unique host ID is 33.

31
00:01:28.289 --> 00:01:30.140
It has the same default gateway,

32
00:01:30.140 --> 00:01:33.332
so this means because those computers are on the same subnet,

33
00:01:33.332 --> 00:01:37.372
they can communicate with each other transparently without the need of a router.

34
00:01:37.372 --> 00:01:41.165
Now if we wanted to communicate with one of the servers on the right, 192.

35
00:01:41.165 --> 00:01:41.533
168.

36
00:01:41.533 --> 00:01:41.901
2.

37
00:01:41.901 --> 00:01:44.478
10, as our DHCP server, for instance,

38
00:01:44.478 --> 00:01:48.490
we're going to need to go out our default gateway,

39
00:01:48.490 --> 00:01:49.359
and specifically,

40
00:01:49.359 --> 00:01:54.441
a default gateway is a router interface that borders a local area network.

41
00:01:54.441 --> 00:01:58.160
So this router needs at least two interfaces to be able to

42
00:01:58.160 --> 00:02:00.116
segment this network and to forward traffic,

43
00:02:00.116 --> 00:02:03.069
and it is aware of both sides of the equation,

44
00:02:03.069 --> 00:02:04.966
that is it's on the.

45
00:02:04.966 --> 00:02:06.483
1 subnet and the.

46
00:02:06.483 --> 00:02:07.242
2 subnet.

47
00:02:07.242 --> 00:02:10.288
On the server-side, it's the same song and dance.

48
00:02:10.288 --> 00:02:11.736
This guy is 2.

49
00:02:11.736 --> 00:02:14.633
10, and the dc1 domain controller is 2.

50
00:02:14.633 --> 00:02:14.995
11.

51
00:02:14.995 --> 00:02:18.017
Hopefully it makes sense that all PCs on a network

52
00:02:18.017 --> 00:02:23.414
have to have unique IPv4 addresses, and this format that you see,

53
00:02:23.414 --> 00:02:23.912
x.

54
00:02:23.912 --> 00:02:24.411
y.

55
00:02:24.411 --> 00:02:24.910
z.

56
00:02:24.910 --> 00:02:27.543
a, is what's called an IPv4 address.

57
00:02:27.543 --> 00:02:31.086
I'll have a tiny bit to say about Internet Protocol

58
00:02:31.086 --> 00:02:33.873
version 6 at the conclusion of this module,

59
00:02:33.873 --> 00:02:36.113
but we're concerned with IPv4 here.

60
00:02:36.113 --> 00:02:40.213
The main takeaways to review is that each host in a

61
00:02:40.213 --> 00:02:43.563
TCP/IP network needs an IP address, a subnet mask,

62
00:02:43.563 --> 00:02:45.085
and preferably a default gateway.

63
00:02:45.085 --> 00:02:48.498
That's not going to be optional if it's a routed internetwork.

64
00:02:48.498 --> 00:02:52.976
The subnet mask is used by the host to determine what subnet it's on,

65
00:02:52.976 --> 00:02:56.414
and it compares its subnet mask with the target IP address,

66
00:02:56.414 --> 00:02:59.898
and that's what determines whether a local broadcast takes place,

67
00:02:59.898 --> 00:03:03.950
such as if dc1 were to communicate with dhcp1,

68
00:03:03.950 --> 00:03:09.874
or if a router default gateway address is required if dc1 needs to connect to,

69
00:03:09.874 --> 00:03:10.528
say, pc2.

70
00:03:10.528 --> 00:03:14.048
Now, you'll notice that this server here, I called it dhcp1.

71
00:03:14.048 --> 00:03:15.582
You might be wondering, well,

72
00:03:15.582 --> 00:03:19.190
how do you give your Windows 10 client computers unique IP addresses?

73
00:03:19.190 --> 00:03:22.472
You can centrally manage these using the industry standard

74
00:03:22.472 --> 00:03:25.273
Dynamic Host Configuration Protocol, or DHCP.

75
00:03:25.273 --> 00:03:29.290
The other alternative, which you would do for servers,

76
00:03:29.290 --> 00:03:33.467
switches, routers, network printers, is to either statically assign an address,

77
00:03:33.467 --> 00:03:38.008
such that that machine always has the same address on that network interface,

78
00:03:38.008 --> 00:03:40.867
or you can create a reservation in DHCP,

79
00:03:40.867 --> 00:03:45.488
and that would also ensure that a particular host always

80
00:03:45.488 --> 00:03:48.259
receives a specific configuration.

81
00:03:48.259 --> 00:03:52.454
Some helpful TCP/IP utilities, all of these are command line,

82
00:03:52.454 --> 00:03:57.421
ipconfig to view TCP/IP settings, ping to test connectivity,

83
00:03:57.421 --> 00:04:01.080
tracert to work your way through one or more routers

84
00:04:01.080 --> 00:04:03.094
to test longer connectivity paths,

85
00:04:03.094 --> 00:04:09.129
hostname to verify the DNS name of a Windows 10 or a Windows Server machine,

86
00:04:09.129 --> 00:04:12.478
whoami to see who is currently logged on to that machine,

87
00:04:12.478 --> 00:04:14.181
and netsh, or Network Shell,

88
00:04:14.181 --> 00:04:18.258
is a Swiss army knife tool that's been around in Windows so long,

89
00:04:18.258 --> 00:04:23.614
I believe it even predates Windows and was originally made in MS-DOS.

90
00:04:23.614 --> 00:04:25.935
Let me show you some Windows PowerShell briefly,

91
00:04:25.935 --> 00:04:30.152
that we'll get into in more detail in the demo.

92
00:04:30.152 --> 00:04:31.680
We have Get-NetIPConfiguration.

93
00:04:31.680 --> 00:04:36.051
The syntax here, if you've used PowerShell at all, is pretty straightforward.

94
00:04:36.051 --> 00:04:37.959
Get is used to retrieve information.

95
00:04:37.959 --> 00:04:42.310
The Net prefix tells you, well, this is a network-oriented cmdlet,

96
00:04:42.310 --> 00:04:45.646
and IPConfiguration should tell you that this is a

97
00:04:45.646 --> 00:04:47.601
PowerShell analog to ipconfig, that's true.

98
00:04:47.601 --> 00:04:50.285
But it doesn't tell the whole story.

99
00:04:50.285 --> 00:04:52.754
Unfortunately, or fortunately, depending upon your outlook,

100
00:04:52.754 --> 00:04:55.390
PowerShell, in this case, is a little bit,

101
00:04:55.390 --> 00:04:59.256
in some cases, a lot more verbose than the old-school tools.

102
00:04:59.256 --> 00:05:02.233
Like ipconfig/all is pretty easy to type,

103
00:05:02.233 --> 00:05:05.826
and in order to get similar detail back you'll normally

104
00:05:05.826 --> 00:05:07.879
have to run more than one cmdlet,

105
00:05:07.879 --> 00:05:10.809
or at least have a long pipeline like you have here.

106
00:05:10.809 --> 00:05:14.772
This call to Get-NetIPAddress is going to list all of the IP

107
00:05:14.772 --> 00:05:17.035
addresses and the interfaces to which they're attached,

108
00:05:17.035 --> 00:05:19.566
but that's quite a bit of typing, isn't it.

109
00:05:19.566 --> 00:05:23.105
You can also do get-NetIPAddress to look for a particular protocol,

110
00:05:23.105 --> 00:05:27.384
IPv4, if you're interested only in the IPv4 addresses,

111
00:05:27.384 --> 00:05:30.967
or if you're looking at net adapters you can pass in particular

112
00:05:30.967 --> 00:05:35.164
adapter types and then pull data from those.

113
00:05:35.164 --> 00:05:38.044
How do you join an Active Directory domain?

114
00:05:38.044 --> 00:05:40.624
Well, there's many interface ways to do it.

115
00:05:40.624 --> 00:05:42.703
You can use the Settings app.

116
00:05:42.703 --> 00:05:45.821
What I use myself is the System Control Panel.

117
00:05:45.821 --> 00:05:48.280
There is the PowerShell Add-Computer cmdlet,

118
00:05:48.280 --> 00:05:53.684
and what this does is creates an account for that computer in Active Directory.

119
00:05:53.684 --> 00:05:56.530
You're going to need to be able to connect to a domain controller.

120
00:05:56.530 --> 00:05:59.268
You don't need to know the host name of the domain controller,

121
00:05:59.268 --> 00:06:03.679
you can just use any of these methods, specify the name of the domain.

122
00:06:03.679 --> 00:06:05.472
You'll need two other things, though.

123
00:06:05.472 --> 00:06:08.891
You'll need strong DNS connectivity so that your command,

124
00:06:08.891 --> 00:06:12.959
whatever tool you're using, can resolve the name of the domain controller,

125
00:06:12.959 --> 00:06:15.439
and actually determine that it is, in fact,

126
00:06:15.439 --> 00:06:16.412
a domain controller.

127
00:06:16.412 --> 00:06:20.888
That takes place through what's called the service location, or SRV, DNS record.

128
00:06:20.888 --> 00:06:24.731
And the other thing you'll need, of course, is domain administrative privilege.

129
00:06:24.731 --> 00:06:27.599
So in many cases, I daresay most cases in business,

130
00:06:27.599 --> 00:06:30.767
you're going to want to automate domain joins such that

131
00:06:30.767 --> 00:06:33.809
there's nothing that the user is required to do.

132
00:06:33.809 --> 00:06:35.901
And the name of configuration management,

133
00:06:35.901 --> 00:06:39.578
there's Windows PowerShell Desired State Configuration.

134
00:06:39.578 --> 00:06:42.566
This is a way to establish policy for machines.

135
00:06:42.566 --> 00:06:43.923
It goes beyond Windows.

136
00:06:43.923 --> 00:06:48.583
I shouldn't say Windows PowerShell, I should just say PowerShell DSC.

137
00:06:48.583 --> 00:06:51.758
There's first and third-party configuration management products,

138
00:06:51.758 --> 00:06:54.534
like Microsoft's own System Center Configuration Manager,

139
00:06:54.534 --> 00:06:56.887
that can automate a domain join.

140
00:06:56.887 --> 00:06:58.886
And then, as we saw in the previous module,

141
00:06:58.886 --> 00:07:10.000
we can interact in a hybrid cloud environment by registering, or maybe even joining a Windows 10 workstation to an Azure AD instance.

