1
00:00:02,017 --> 00:00:03,595
Now let's fire up PowerShell.

2
00:00:03,595 --> 00:00:06,120
I'm going to open up the PowerShell ISE,

3
00:00:06,120 --> 00:00:09,669
and I'm going to right-click this and go to Run as Administrator.

4
00:00:09,669 --> 00:00:14,393
This is a built-in utility for running PowerShell interactively,

5
00:00:14,393 --> 00:00:15,958
but also for creating scripts.

6
00:00:15,958 --> 00:00:18,149
So I'm going to create a script.

7
00:00:18,149 --> 00:00:20,868
I'll save it on my D drive here.

8
00:00:20,868 --> 00:00:24,895
I'll just type D: and press Enter, and I'll call this module17.

9
00:00:24,895 --> 00:00:29,527
What I wanted to do is walk you through some of these networking cmdlets.

10
00:00:29,527 --> 00:00:35,677
Let me do a cd \ to go to the root of Drive C, and cls to clear the screen.

11
00:00:35,677 --> 00:00:39,682
Let's see what happens if we run Get-NetIPConfiguration.

12
00:00:39,682 --> 00:00:41,736
What kind of output do we see back?

13
00:00:41,736 --> 00:00:45,332
Well it looks like for each connection we have the alias,

14
00:00:45,332 --> 00:00:50,161
which is the friendly name, right here, we have a unique index number.

15
00:00:50,161 --> 00:00:54,632
It's basically a lot of the ipconfig info with some hardware stuff thrown in.

16
00:00:54,632 --> 00:00:58,007
You might wonder, well, isn't it just as easy to do ipconfig?

17
00:00:58,007 --> 00:01:01,306
Well, in a way, but if you needed to, for instance,

18
00:01:01,306 --> 00:01:04,195
gather these statistics for a number of computers,

19
00:01:04,195 --> 00:01:06,124
Windows 10, could be Windows 8.

20
00:01:06,124 --> 00:01:11,328
1, could be Windows Server, it's a lot easier to do that with Windows PowerShell.

21
00:01:11,328 --> 00:01:13,960
Just for grins, let me try this.

22
00:01:13,960 --> 00:01:17,133
We're on Windows 10, the administrative workstation, right?

23
00:01:17,133 --> 00:01:23,123
I'm going to do Invoke-Command -ComputerName dc1.

24
00:01:23,123 --> 00:01:24,981
Alright, so let me walk you through this code,

25
00:01:24,981 --> 00:01:27,324
let me put it on its own line here.

26
00:01:27,324 --> 00:01:31,801
Invoke-Command is one command we use in PowerShell to send a PowerShell

27
00:01:31,801 --> 00:01:36,004
command or an entire script to one or more remote machines.

28
00:01:36,004 --> 00:01:40,830
So what I'm saying here is invoke a PowerShell command on my dc1 server,

29
00:01:40,830 --> 00:01:41,962
and in this case,

30
00:01:41,962 --> 00:01:45,560
I'm just going to pass raw PowerShell as what's called a ScriptBlock,

31
00:01:45,560 --> 00:01:48,365
and that ScriptBlock is placed within curly braces.

32
00:01:48,365 --> 00:01:51,101
I'm just going to pass Get-NetIPConfiguration.

33
00:01:51,101 --> 00:01:53,042
Now there's the question of credentials.

34
00:01:53,042 --> 00:01:55,859
I'm logged onto this machine as a domain administrator,

35
00:01:55,859 --> 00:01:59,158
so I should be okay, and it looks like I am.

36
00:01:59,158 --> 00:02:04,426
So it looks like that server has only an external and an internal,

37
00:02:04,426 --> 00:02:07,087
and its internal IP address is 10.

38
00:02:07,087 --> 00:02:07,467
0.

39
00:02:07,467 --> 00:02:07,847
0.

40
00:02:07,847 --> 00:02:08,227
1.

41
00:02:08,227 --> 00:02:13,360
Let me go over to that server, and let me bring up Run and do ncpa.

42
00:02:13,360 --> 00:02:13,681
cpl.

43
00:02:13,681 --> 00:02:16,303
Here is our Internal and External.

44
00:02:16,303 --> 00:02:17,979
We'll go Internal, Details, 10.

45
00:02:17,979 --> 00:02:18,314
0.

46
00:02:18,314 --> 00:02:18,650
0.

47
00:02:18,650 --> 00:02:22,002
1, so that was right on the money, wasn't it?

48
00:02:22,002 --> 00:02:27,196
That is called PowerShell remoting, and we could have n number of computers,

49
00:02:27,196 --> 00:02:31,381
or we could pass in a file containing a list of computers and

50
00:02:31,381 --> 00:02:34,533
send that command across all those machines.

51
00:02:34,533 --> 00:02:39,490
I hope that shows you a little bit about how powerful PowerShell is.

52
00:02:39,490 --> 00:02:42,359
What we're doing on line 4 is looking for NetIPAddresses,

53
00:02:42,359 --> 00:02:44,122
let me clear the screen in the console,

54
00:02:44,122 --> 00:02:47,047
and then we can get all of that information back and

55
00:02:47,047 --> 00:02:48,775
sort it according to properties.

56
00:02:48,775 --> 00:02:51,356
So we're going to sort on InterfaceIndex number,

57
00:02:51,356 --> 00:02:56,203
and we want the data to be formatted as a table and have the following columns.

58
00:02:56,203 --> 00:03:00,594
Now what's cool about these properties is that they get automagically filled in.

59
00:03:00,594 --> 00:03:01,976
Notice I'm pressing Tab here.

60
00:03:01,976 --> 00:03:04,956
One of the things that the ISE does that you sometimes,

61
00:03:04,956 --> 00:03:08,273
well most of the time you get in the ordinary PowerShell console,

62
00:03:08,273 --> 00:03:11,301
is auto-completion, so you don't have to know,

63
00:03:11,301 --> 00:03:15,625
necessarily, the specific names and spellings of those properties,

64
00:03:15,625 --> 00:03:17,652
some of which can be kind of arcane.

65
00:03:17,652 --> 00:03:19,172
So let's put our cursor there,

66
00:03:19,172 --> 00:03:24,437
and it instantly gives us back a table based on InterfaceIndex,

67
00:03:24,437 --> 00:03:28,080
the alias name, the AddressFamily, and the IPAddress.

68
00:03:28,080 --> 00:03:31,007
And it's showing both IPv6 and IPv4 addresses,

69
00:03:31,007 --> 00:03:33,357
so we have multiple entries per adapter.

70
00:03:33,357 --> 00:03:36,610
Now what I've done in the next bit of code here,

71
00:03:36,610 --> 00:03:39,795
let me put some space between these commands,

72
00:03:39,795 --> 00:03:43,071
is Get-NetIPAddress is where the AddressFamily is IPv4,

73
00:03:43,071 --> 00:03:48,505
and format that table in such a way that all of the columns are

74
00:03:48,505 --> 00:03:51,352
auto-sized to accommodate the largest entry beneath them.

75
00:03:51,352 --> 00:03:52,812
So I'll select this.

76
00:03:52,812 --> 00:03:56,041
And it says we're missing a curly brace,

77
00:03:56,041 --> 00:03:57,914
well that makes sense,

78
00:03:57,914 --> 00:04:01,642
our Where-Object expression needs to be enclosed in curly braces,

79
00:04:01,642 --> 00:04:02,638
there we go.

80
00:04:02,638 --> 00:04:05,106
And so here we have, like I said,

81
00:04:05,106 --> 00:04:09,813
actually let's just click this Hide Script Pane and look at all of the results.

82
00:04:09,813 --> 00:04:15,377
Wow, it's going through each one that has an AddressFamily of IPv4,

83
00:04:15,377 --> 00:04:18,548
and because I'm just doing Format-Table -AutoSize,

84
00:04:18,548 --> 00:04:20,692
it's showing all other information.

85
00:04:20,692 --> 00:04:25,479
I actually want to customize this output to make it easier to see.

86
00:04:25,479 --> 00:04:28,632
That's one of the fine skills that you'll develop after

87
00:04:28,632 --> 00:04:31,615
you hit your initial PowerShell learning curve of just

88
00:04:31,615 --> 00:04:33,073
understanding the basic syntax.

89
00:04:33,073 --> 00:04:36,576
Your first challenge is to figure out which cmdlet or

90
00:04:36,576 --> 00:04:38,797
pipeline gives you the results you want,

91
00:04:38,797 --> 00:04:42,653
and then your next challenge is to format that result set in such

92
00:04:42,653 --> 00:04:47,242
a way that you can quickly isolate what you need and not see the

93
00:04:47,242 --> 00:04:53,000
information that you don't need, signal to noise ratio, in other words.

