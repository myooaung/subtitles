WEBVTT
1
00:00:02.489 --> 00:00:05.767
Windows PowerShell.

2
00:00:05.767 --> 00:00:09.515
The historical perspective for PowerShell comes from the scripting

3
00:00:09.515 --> 00:00:12.798
that's been part of operating systems for many years.

4
00:00:12.798 --> 00:00:16.457
For instance, Bash is the command-line environment in UNIX.

5
00:00:16.457 --> 00:00:18.420
That's a super old operating system.

6
00:00:18.420 --> 00:00:22.884
I'm 47 years old and I think UNIX is older than I am.

7
00:00:22.884 --> 00:00:25.782
Linux is a more recent variant of UNIX,

8
00:00:25.782 --> 00:00:27.978
it's intended to be a free and open source product,

9
00:00:27.978 --> 00:00:30.746
but both of them use this command shell called Bash

10
00:00:30.746 --> 00:00:32.006
and it's imminently scriptable.

11
00:00:32.006 --> 00:00:33.262
Now what is a script?

12
00:00:33.262 --> 00:00:35.272
The idea is if there is a task,

13
00:00:35.272 --> 00:00:38.664
any kind of routine or mundane task may be a non-trivial task

14
00:00:38.664 --> 00:00:41.481
that you have to do over and over again,

15
00:00:41.481 --> 00:00:43.508
that's a good candidate for automation.

16
00:00:43.508 --> 00:00:45.857
And by creating a script file and then perhaps

17
00:00:45.857 --> 00:00:48.104
running the script file on a schedule,

18
00:00:48.104 --> 00:00:50.511
you can dramatically improve your efficiency.

19
00:00:50.511 --> 00:00:54.692
So Bash shell scripting in UNIX, Linux is still a really big deal.

20
00:00:54.692 --> 00:00:57.794
In the Windows world, it's been a slower uptake.

21
00:00:57.794 --> 00:01:02.170
We've had the what's called the Windows shell scripting environment,

22
00:01:02.170 --> 00:01:03.995
Win batches it's sometimes called,

23
00:01:03.995 --> 00:01:08.862
not anywhere near as powerful as what you can do with Bash shell scripting.

24
00:01:08.862 --> 00:01:10.440
So it really wasn't until Jeffrey Snover,

25
00:01:10.440 --> 00:01:14.027
if you've ever heard that name, a Microsoft distinguished engineer,

26
00:01:14.027 --> 00:01:15.995
the inventor of PowerShell,

27
00:01:15.995 --> 00:01:20.524
came along with a lot of experience in UNIX himself thinking why

28
00:01:20.524 --> 00:01:24.604
don't we apply some of the best parts of different shell scripting

29
00:01:24.604 --> 00:01:25.869
and programmatic scripting environments,

30
00:01:25.869 --> 00:01:30.391
why don't we bring all of that to Windows and allow you to do that kind

31
00:01:30.391 --> 00:01:32.965
of automation and that's what Windows PowerShell is.

32
00:01:32.965 --> 00:01:38.000
Windows PowerShell is an automation engine that ships standard in Windows 10,

33
00:01:38.000 --> 00:01:39.223
standard in Windows Server.

34
00:01:39.223 --> 00:01:43.000
I have to again be careful not to overexplain at this level

35
00:01:43.000 --> 00:01:46.409
because this is the Microsoft Technology Associate or MTA

36
00:01:46.409 --> 00:01:49.093
level and not the MCSE level.

37
00:01:49.093 --> 00:01:51.338
If you are interested in learning more about PowerShell,

38
00:01:51.338 --> 00:01:54.344
hang out until the end of this module because you know that I

39
00:01:54.344 --> 00:01:57.563
like to give references to the Pluralsight courses that

40
00:01:57.563 --> 00:01:59.930
relate to what we're talking about.

41
00:01:59.930 --> 00:02:01.906
Moreover, check the exercise files.

42
00:02:01.906 --> 00:02:06.394
So this is a cool slide because it shows you some sample code,

43
00:02:06.394 --> 00:02:09.104
a function that I actually run every day up on top,

44
00:02:09.104 --> 00:02:13.546
and then down at the bottom, you see a generic PowerShell pipeline.

45
00:02:13.546 --> 00:02:17.829
And PowerShell is basically wrapping a lot of the deep power that

46
00:02:17.829 --> 00:02:22.027
Windows programmers get and presents it in a consistent way for

47
00:02:22.027 --> 00:02:25.579
administrators who may be allergic to programming and makes it

48
00:02:25.579 --> 00:02:28.233
easier for them to do automation tasks.

49
00:02:28.233 --> 00:02:31.396
So for instance, you've probably have seen PowerShell cmdlets,

50
00:02:31.396 --> 00:02:34.906
they have a standard verb, Get, Set, Write,

51
00:02:34.906 --> 00:02:39.442
this sort of thing, dash some kind of prefix,

52
00:02:39.442 --> 00:02:43.693
for instance SharePoint server cmdlets begin with SP.

53
00:02:43.693 --> 00:02:47.659
Azure Resource Manager cmdlets, their noun starts with Azure RM,

54
00:02:47.659 --> 00:02:51.255
so it's an identifier to the family of cmdlet it is

55
00:02:51.255 --> 00:02:53.390
and then the rest of the noun.

56
00:02:53.390 --> 00:02:56.576
And then you customize the behavior of the cmdlet by specifying

57
00:02:56.576 --> 00:02:59.547
what are called parameters and parameter values.

58
00:02:59.547 --> 00:03:02.113
Now see that pipe character at the end there,

59
00:03:02.113 --> 00:03:05.557
the pipe character is one of the secret sauce components of PowerShell

60
00:03:05.557 --> 00:03:10.017
where you can take the output of one part of the pipeline and feed it into

61
00:03:10.017 --> 00:03:13.406
the next segment of the pipeline as an input,

62
00:03:13.406 --> 00:03:16.091
really powerful way to build automation workflows.

63
00:03:16.091 --> 00:03:18.220
And without getting too deep here,

64
00:03:18.220 --> 00:03:21.207
I want you to look at that function and just see if

65
00:03:21.207 --> 00:03:24.142
intuitively you can get a grasp of what it's doing.

66
00:03:24.142 --> 00:03:28.103
A function in PowerShell is the same as a function in any programming language.

67
00:03:28.103 --> 00:03:32.047
It's a unit of code execution that accomplishes a particular task

68
00:03:32.047 --> 00:03:35.998
and the task I wanted to accomplish here was retrieving how long

69
00:03:35.998 --> 00:03:39.015
a particular system has been up, in other words,

70
00:03:39.015 --> 00:03:41.706
turned on without being shut down or restarted.

71
00:03:41.706 --> 00:03:44.399
So I've given the function a standard verb,

72
00:03:44.399 --> 00:03:46.766
Get, and I've used Uptime as my none.

73
00:03:46.766 --> 00:03:49.555
The first thing I do is create a variable,

74
00:03:49.555 --> 00:03:51.349
a couple of them actually,

75
00:03:51.349 --> 00:03:55.158
one that retrieves the operating system that the cmdlet is run on,

76
00:03:55.158 --> 00:03:58.181
which on my system, is Windows 10 Enterprise edition.

77
00:03:58.181 --> 00:04:00.980
The uptime variable retrieves the current date,

78
00:04:00.980 --> 00:04:05.314
and then we wind up fetching into that operating

79
00:04:05.314 --> 00:04:10.354
system object when it was last booted, that's tracked already in Windows.

80
00:04:10.354 --> 00:04:13.577
It's at a low level, but PowerShell is able to retrieve it.

81
00:04:13.577 --> 00:04:16.862
And then finally, on Line 5, we're formatting the output.

82
00:04:16.862 --> 00:04:19.820
We're going to say uptime: a certain number of days,

83
00:04:19.820 --> 00:04:22.398
certain number of hours, certain number of minutes.

84
00:04:22.398 --> 00:04:26.701
And then on Line 6, we write that finished output to the display.

85
00:04:26.701 --> 00:04:30.039
I'll put an overlay graphic so you can see what this

86
00:04:30.039 --> 00:04:31.858
function looks like when it's actually run,

87
00:04:31.858 --> 00:04:34.419
it's very handy, and this is a super simple example,

88
00:04:34.419 --> 00:04:45.000
but I hope it has you thinking wow, there is a lot of things that I do, even as a Windows 10 end user that could benefit from automation.

