1
00:00:01,059 --> 00:00:05,318
Speaking of which, this is a screenshot from a Windows 10 workstation.

2
00:00:05,318 --> 00:00:09,333
It's part of the Disk Administrator console that I'll demo for you momentarily,

3
00:00:09,333 --> 00:00:14,495
but I thought it was important for us to quickly go through the major

4
00:00:14,495 --> 00:00:18,561
vocabulary terms that correspond to hard-disk storage.

5
00:00:18,561 --> 00:00:21,597
Specifically, we have the disk, and in this context,

6
00:00:21,597 --> 00:00:26,298
we're referring to primarily fixed disks that are mounted permanently

7
00:00:26,298 --> 00:00:29,661
in the chassis of a desktop or laptop computer,

8
00:00:29,661 --> 00:00:31,935
potentially even, say, a Surface tablet,

9
00:00:31,935 --> 00:00:33,088
running Windows 10.

10
00:00:33,088 --> 00:00:37,564
When you install a new fixed hard disk, it's going to be uninitialized,

11
00:00:37,564 --> 00:00:41,471
so the first step is to initialize the disk and choose

12
00:00:41,471 --> 00:00:44,337
what kind of bootloader system you want.

13
00:00:44,337 --> 00:00:47,789
Once you've done that, it's time to partition the drive out.

14
00:00:47,789 --> 00:00:50,330
Drives can have just one big old partition that

15
00:00:50,330 --> 00:00:55,531
covers all space on the physical disk, or you can create logical partitions.

16
00:00:55,531 --> 00:01:00,090
Now the benefit of these logical partitions isn't as important as it used to be.

17
00:01:00,090 --> 00:01:02,771
You're not working with a separate physical disk,

18
00:01:02,771 --> 00:01:05,636
so it's now like you're spreading workload across

19
00:01:05,636 --> 00:01:10,021
different sets of physical spindles, in the case of mechanical disks.

20
00:01:10,021 --> 00:01:12,472
It's more of a logical construct, such that,

21
00:01:12,472 --> 00:01:13,085
for instance,

22
00:01:13,085 --> 00:01:16,197
your C drive that contains your operating system and

23
00:01:16,197 --> 00:01:18,128
applications will be separate from, say,

24
00:01:18,128 --> 00:01:19,058
your data drive.

25
00:01:19,058 --> 00:01:22,482
And then if you need to wipe and load the operating system,

26
00:01:22,482 --> 00:01:26,670
as long as you're working on the C drive and not the D drive,

27
00:01:26,670 --> 00:01:28,486
your files will be protected.

28
00:01:28,486 --> 00:01:34,336
Now a partition is simply an area of a hard disk that's initially unallocated.

29
00:01:34,336 --> 00:01:38,066
A volume refers to a partition that's been formatted,

30
00:01:38,066 --> 00:01:42,828
and formatting a partition involves laying down a file system.

31
00:01:42,828 --> 00:01:46,239
We can look at a file system essentially as a map on how

32
00:01:46,239 --> 00:01:48,842
storage is going to be assigned on that volume.

33
00:01:48,842 --> 00:01:52,056
The other thing besides a file system that comes along

34
00:01:52,056 --> 00:01:54,923
with the term volume is a drive letter.

35
00:01:54,923 --> 00:02:00,747
Most drives in Windows for them to be user usable need to have a drive letter.

36
00:02:00,747 --> 00:02:03,100
Although, you'll notice the System Reserved partition,

37
00:02:03,100 --> 00:02:07,470
which is a hidden partition used by Windows; that does not have a drive

38
00:02:07,470 --> 00:02:10,739
letter because it's not intended to be seen by the user.

39
00:02:10,739 --> 00:02:12,600
The file system, as I said,

40
00:02:12,600 --> 00:02:16,174
references the way that data is laid out on the drive.

41
00:02:16,174 --> 00:02:17,268
And over time,

42
00:02:17,268 --> 00:02:21,161
Microsoft has updated their file systems to accommodate trends in storage,

43
00:02:21,161 --> 00:02:24,901
namely, the fact that we have gigantic storage capacities nowadays,

44
00:02:24,901 --> 00:02:28,737
so we need to redraw the map, so to speak,

45
00:02:28,737 --> 00:02:30,773
to make file allocation make more sense,

46
00:02:30,773 --> 00:02:33,964
and also to add features, performance features,

47
00:02:33,964 --> 00:02:38,041
diagnostic features, and security features to those file systems.

48
00:02:38,041 --> 00:02:42,244
For instance, this E drive is formatted with FAT32.

49
00:02:42,244 --> 00:02:45,388
That's not a preferred file system for Windows computers,

50
00:02:45,388 --> 00:02:47,464
and I'll explain that to you later.

51
00:02:47,464 --> 00:02:51,711
The cluster refers to the fundamental allocation unit in a volume.

52
00:02:51,711 --> 00:02:56,497
Let's say your Windows volume, or let's say you have a D drive,

53
00:02:56,497 --> 00:02:59,438
a data volume, and it uses 4 KB clusters.

54
00:02:59,438 --> 00:03:03,360
If you save a 4 KB file, it will occupy 1 cluster.

55
00:03:03,360 --> 00:03:07,629
If you save an 8 KB file, it'll neatly fit on 2 clusters.

56
00:03:07,629 --> 00:03:10,976
But what if you save a 2 KB file?

57
00:03:10,976 --> 00:03:13,952
It will still occupy a full 4K cluster.

58
00:03:13,952 --> 00:03:19,988
So clusters need to be small enough to be granular enough to minimize wastage.

59
00:03:19,988 --> 00:03:23,822
That's been part of the deal in Windows file systems over time,

60
00:03:23,822 --> 00:03:27,239
and by definition as a volume gets bigger and bigger and bigger,

61
00:03:27,239 --> 00:03:29,748
as you make bigger and bigger volumes I should say,

62
00:03:29,748 --> 00:03:32,530
the cluster size eventually does have to scale because you

63
00:03:32,530 --> 00:03:37,331
can have only a certain number of clusters per volume based

64
00:03:37,331 --> 00:03:39,565
on your system architecture.

65
00:03:39,565 --> 00:03:43,075
Let's compare the major file systems in Windows.

66
00:03:43,075 --> 00:03:47,210
File allocation table, or FAT, 32 is the address length,

67
00:03:47,210 --> 00:03:50,931
so you've got 2 to the 32nd clusters per volume.

68
00:03:50,931 --> 00:03:56,402
That, if you do the math, turns out to a maximum volume size of 4 GB.

69
00:03:56,402 --> 00:03:59,353
FAT32 came about back in the Windows 95 days,

70
00:03:59,353 --> 00:04:04,561
and at that time, the idea of a 4 GB hard disk was almost inconceivable.

71
00:04:04,561 --> 00:04:05,555
Now it's laughable.

72
00:04:05,555 --> 00:04:09,657
You can have a microSD card that's about the size of your

73
00:04:09,657 --> 00:04:13,602
pinky thumbnail that contains much, much more than 4 GB.

74
00:04:13,602 --> 00:04:18,328
But the benefit of FAT32 is that it's optimized for smaller drives,

75
00:04:18,328 --> 00:04:19,762
smaller portable disks.

76
00:04:19,762 --> 00:04:24,050
Like flash disks will be useful candidates for FAT32,

77
00:04:24,050 --> 00:04:27,815
as well as compatibility with other operating systems.

78
00:04:27,815 --> 00:04:28,159
MacOS,

79
00:04:28,159 --> 00:04:33,939
if you want to transfer or read files from a Windows machine on a Mac machine,

80
00:04:33,939 --> 00:04:37,413
you could format your thumb drive as FAT32.

81
00:04:37,413 --> 00:04:37,693
Otherwise,

82
00:04:37,693 --> 00:04:41,849
you may need to install software on your Mac computer and your Linux computer,

83
00:04:41,849 --> 00:04:45,072
for that matter, to read, say, an NTFS volume.

84
00:04:45,072 --> 00:04:50,230
Also, embedded hardware, smaller gadget devices that use flash storage,

85
00:04:50,230 --> 00:04:54,903
they oftentimes require the FAT32, just for backward compatibility,

86
00:04:54,903 --> 00:04:56,319
older technology purposes.

87
00:04:56,319 --> 00:04:59,242
The new technology file system, or NTFS,

88
00:04:59,242 --> 00:05:02,348
has been the standard file system for Windows for

89
00:05:02,348 --> 00:05:04,179
both desktop and server systems.

90
00:05:04,179 --> 00:05:08,759
The reasons for this, number 1, it has a hefty volume size,

91
00:05:08,759 --> 00:05:12,750
256 TB max, and it gives you features like permissions,

92
00:05:12,750 --> 00:05:14,004
encryption, and compression.

93
00:05:14,004 --> 00:05:18,657
It unlocks a lot of nice capabilities for use in business.

94
00:05:18,657 --> 00:05:22,408
FAT32 does not allow you to set file security,

95
00:05:22,408 --> 00:05:25,781
so if multiple users are on a single system,

96
00:05:25,781 --> 00:05:27,882
everybody can see everybody else's files.

97
00:05:27,882 --> 00:05:30,321
That's not the case with the NTFS,

98
00:05:30,321 --> 00:05:33,415
as long as you're setting your file permissions correctly.

99
00:05:33,415 --> 00:05:37,060
Newest in the game is ReFS, or the Resilient File System.

100
00:05:37,060 --> 00:05:40,221
This is the next generation file system in Windows.

101
00:05:40,221 --> 00:05:42,426
We see it predominantly on Windows Server,

102
00:05:42,426 --> 00:05:44,945
and even more so in special use cases.

103
00:05:44,945 --> 00:05:50,324
Its advantage is self-healing and self-repair, so resilient file system.

104
00:05:50,324 --> 00:05:54,526
So normally if a server computer were to have a sudden power outage,

105
00:05:54,526 --> 00:05:57,888
that can wreak havoc, especially on mechanical drives.

106
00:05:57,888 --> 00:06:00,158
ReFS is constantly checkpointing data,

107
00:06:00,158 --> 00:06:04,501
such that its capabilities are good at resurrecting data that otherwise

108
00:06:04,501 --> 00:06:08,046
would've been lost in the case of some malfunction.

109
00:06:08,046 --> 00:06:12,862
The maximum volume size is one yobibyte, which a crazy metric value.

110
00:06:12,862 --> 00:06:18,885
Check the exercise files if you want to know exactly how many terabytes that is.

111
00:06:18,885 --> 00:06:20,833
The disadvantages of ReFS,

112
00:06:20,833 --> 00:06:24,359
and they're not exactly disadvantages if you understand what's going on here,

113
00:06:24,359 --> 00:06:28,810
what this is used for, it can't be used for your boot volume or your C drive.

114
00:06:28,810 --> 00:06:30,697
It also does not have deduplication,

115
00:06:30,697 --> 00:06:34,629
which is useful if you have a file server with a whole bunch of different

116
00:06:34,629 --> 00:06:37,795
files and there may be multiple copies of each file,

117
00:06:37,795 --> 00:06:40,867
dedup will only store one instance of the repeated file,

118
00:06:40,867 --> 00:06:43,393
which saves you quite a bit of disk space.

119
00:06:43,393 --> 00:06:46,818
The reason why these aren't really big issues is that in my experience,

120
00:06:46,818 --> 00:06:52,980
you wind up using ReFS on virtualization servers that host virtual machines.

121
00:06:52,980 --> 00:06:57,174
That self-healing, self-repair is especially important because a virtual machine,

122
00:06:57,174 --> 00:07:00,214
its storage is a file on a volume.

123
00:07:00,214 --> 00:07:09,000
And if you have that virtual machine's virtual hard disk file on an ReFS volume, then you're adding additional layers of availability.

