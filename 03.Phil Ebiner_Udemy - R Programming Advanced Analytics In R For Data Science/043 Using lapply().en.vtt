WEBVTT
1
00:00:04.740 --> 00:00:08.520
Hello welcome back to that month's course in our programming.

2
00:00:08.580 --> 00:00:11.930
Today we're going to talk about that apply function.

3
00:00:11.940 --> 00:00:17.820
So we're going to get some hands on experience on policy use this ELB life function.

4
00:00:17.820 --> 00:00:20.880
And so what do we always start off with first.

5
00:00:20.880 --> 00:00:21.550
That's right.

6
00:00:21.570 --> 00:00:23.590
We look at the question mark.

7
00:00:23.710 --> 00:00:29.300
I'll apply and as because we just want to have a quick glance at the help.

8
00:00:29.340 --> 00:00:30.870
So what does Al applied do.

9
00:00:30.930 --> 00:00:37.910
Zoom in here and have a quick look at this L apply returns a list of the same length as x.

10
00:00:38.040 --> 00:00:45.300
Each element of which is the result of applying fun meaning function to the corresponding element of

11
00:00:45.540 --> 00:00:46.920
x.

12
00:00:46.920 --> 00:00:48.100
Very interesting.

13
00:00:48.210 --> 00:00:53.610
And X can be a vector atomic or list or an expression object and so on.

14
00:00:53.610 --> 00:01:02.190
So basically l apply takes some sort of object applies a function but will return a list as the output

15
00:01:02.190 --> 00:01:02.550
.

16
00:01:02.550 --> 00:01:09.970
Now what he wants to do is we want to start practicing basically because this might sound a bit confusing

17
00:01:09.970 --> 00:01:10.020
.

18
00:01:10.020 --> 00:01:17.880
The Probably the main focus here is that apply a function over a list or a vector so the input for what

19
00:01:17.880 --> 00:01:21.650
we're going to be applying is either a list or a vector.

20
00:01:21.840 --> 00:01:27.120
And we actually have a list that we can work with or with the list.

21
00:01:27.120 --> 00:01:27.410
All right.

22
00:01:27.420 --> 00:01:30.650
So let's have a look at this first example what do we do.

23
00:01:30.990 --> 00:01:35.130
Well let's say we have our just one matrix Chicago right.

24
00:01:35.160 --> 00:01:41.140
So that's how Matrix Chicago and let's say hypothetically that we need to for some reason to transpose

25
00:01:41.180 --> 00:01:41.250
.

26
00:01:41.250 --> 00:01:47.150
So basically to make the columns and rows into columns and the columns into rows how do we do that now

27
00:01:47.190 --> 00:01:47.350
.

28
00:01:47.490 --> 00:01:52.890
Well we use the T function which stands for transpose and we say Chicago right so far on that you'll

29
00:01:52.890 --> 00:02:00.960
see that all matrix has now been transposed and it is represented as the months in the rows and all

30
00:02:00.960 --> 00:02:03.190
of these metrics in the columns.

31
00:02:03.210 --> 00:02:07.490
So now I also know that I have this whole list of matrices whether.

32
00:02:07.500 --> 00:02:15.150
Right so this whether a list has four of these matrices but Chicago New York Houston and San Francisco

33
00:02:15.150 --> 00:02:15.640
.

34
00:02:15.660 --> 00:02:22.860
Now how would I apply the transpose function to each one of these matrices and then put them back into

35
00:02:22.860 --> 00:02:24.420
another list.

36
00:02:24.420 --> 00:02:27.500
This is kind of like speaking of the loop method right.

37
00:02:27.510 --> 00:02:37.230
I would go whether I would look at dollar sign Chicago right out apply transpose and then I would do

38
00:02:37.230 --> 00:02:42.410
the same thing for the next one in the next one next one and I'll put all four of them into a list.

39
00:02:42.570 --> 00:02:43.030
Right.

40
00:02:43.140 --> 00:02:44.180
That's long.

41
00:02:44.310 --> 00:02:52.530
And that takes takes a lot of time especially if you have 100 or you know like a lot of components of

42
00:02:52.530 --> 00:02:53.080
your list.

43
00:02:53.310 --> 00:02:57.700
Well what you can do and what you should do is you should use the Apply function.

44
00:02:57.810 --> 00:03:04.380
So the Apply function will allow you to apply something across all components of your list.

45
00:03:04.380 --> 00:03:06.390
Let's go ahead and see how that happens.

46
00:03:06.580 --> 00:03:12.360
Can say apply then we need to pass on the name of the list that we're going to be working with.

47
00:03:12.510 --> 00:03:14.770
The name of the list is weather.

48
00:03:14.910 --> 00:03:21.480
And then we need to apply or we need to pass on the function that will be used.

49
00:03:21.480 --> 00:03:24.450
So then we'll pass on the T function.

50
00:03:24.450 --> 00:03:30.460
So what will happen is l apply We'll go inside de-list and it will pick out every single element will

51
00:03:30.480 --> 00:03:31.040
say OK.

52
00:03:31.060 --> 00:03:33.780
Chicago Chicago is one component.

53
00:03:33.780 --> 00:03:40.610
I'm going to take this function and give it Chicago as a parameter then I'm going to take new york.

54
00:03:40.620 --> 00:03:48.080
I'm going to give it to this function just like that is going to say t of New York so it'll have let's

55
00:03:48.180 --> 00:03:55.350
just put a comment here a t of Chicago and then that's the first thing you'll do then will be t of New

56
00:03:55.350 --> 00:04:01.670
York and then it'll be t of Houston and then it'll be t of San Francisco.

57
00:04:01.890 --> 00:04:06.980
So that's what's going to happen in the back end of our when we run this slide.

58
00:04:07.200 --> 00:04:12.300
And once that is done all of this will be put into one big list.

59
00:04:12.300 --> 00:04:19.230
So running this line well here of course we need to do weather whether Dallas and Charlotte what kind

60
00:04:19.230 --> 00:04:20.050
of make sense right.

61
00:04:20.070 --> 00:04:24.350
What we're doing so is just do all these just for completeness purposes.

62
00:04:24.360 --> 00:04:32.460
So if I were on this I will get a list of transposed matrices but instead of doing that I can just run

63
00:04:32.460 --> 00:04:37.140
this line by itself so if I run this line they go as simple as that.

64
00:04:37.140 --> 00:04:42.710
You can see that each one of the matrices was transposed separately so it was transposed.

65
00:04:42.780 --> 00:04:48.330
Then your question suppose Hughson was transpose San Francisco's transpose and then they were all put

66
00:04:48.330 --> 00:04:50.660
into one new list.

67
00:04:50.670 --> 00:04:52.440
That is how the Elop life function works.

68
00:04:52.590 --> 00:04:59.520
And if you want you can take this now and you can say my a new list and you can put it in there that's

69
00:04:59.520 --> 00:05:01.280
what my new list will look like.

70
00:05:01.600 --> 00:05:01.910
Yeah.

71
00:05:02.010 --> 00:05:05.730
So we can just pretty much create that list and store it in there.

72
00:05:05.730 --> 00:05:07.410
All right let's have a look at another example.

73
00:05:07.530 --> 00:05:16.620
Let's say so that was going to be example to what do we want to do here we want to let's say we have

74
00:05:16.620 --> 00:05:24.570
Chicago again a little guinea pig matrix and then we're going to say we want to add another row to this

75
00:05:24.630 --> 00:05:27.080
matrix and I say our by Chicago.

76
00:05:27.300 --> 00:05:30.310
And then the rows are going to be called Nuro.

77
00:05:30.420 --> 00:05:33.160
That's going to be equals 1 to 12.

78
00:05:33.180 --> 00:05:37.980
Right so you can see that it's been added here 1 2 3 4 5 and 7 12.

79
00:05:38.210 --> 00:05:43.410
Now that is operation that we want to perform on every single one of our cities.

80
00:05:43.410 --> 00:05:44.550
How do we do that.

81
00:05:44.820 --> 00:05:50.790
Well once again we go and apply then whether because that's the list of falsities then we say are blind

82
00:05:50.790 --> 00:05:51.170
.

83
00:05:51.240 --> 00:05:53.720
That's a function that we want to use.

84
00:05:53.730 --> 00:05:54.000
Right.

85
00:05:54.000 --> 00:06:00.420
So just like it happened here the first argument will be taken from the list which will be from the

86
00:06:00.420 --> 00:06:04.130
list whether it'll be Chicago or New York Houston San Francisco.

87
00:06:04.140 --> 00:06:08.580
But then we have the second argument that we want to pass to the our bind function over here.

88
00:06:08.580 --> 00:06:09.730
So that's what we do.

89
00:06:09.810 --> 00:06:12.870
We say coma and then new rule 11:59.

90
00:06:12.990 --> 00:06:17.350
So if you recall in El apply help that we're looking at.

91
00:06:17.520 --> 00:06:21.030
You have to pass the matrix the function that you want to apply.

92
00:06:21.180 --> 00:06:26.640
And then you can pass on optional parameters so this is one of the optional parameters it gets used

93
00:06:26.640 --> 00:06:29.780
by this function that you're applying.

94
00:06:30.030 --> 00:06:36.310
So if I are on this line now you'll see that as an output we have a list which is always important because

95
00:06:36.330 --> 00:06:37.020
l apply.

96
00:06:37.020 --> 00:06:38.520
That's what the L stands for.

97
00:06:38.520 --> 00:06:40.950
L apply returns a list.

98
00:06:40.950 --> 00:06:44.990
You can see here that we've got a list of all the same matrices that we had.

99
00:06:45.120 --> 00:06:49.710
But now they all have this new row 1 to 12.

100
00:06:49.710 --> 00:06:54.500
All right this should make quite a lot of sense because that's just how this function operates and all

101
00:06:54.500 --> 00:06:57.970
that just always remember this or the loop method in your head.

102
00:06:57.990 --> 00:07:03.750
What is a dude goes iterates through all components and it plies this function that we want to apply

103
00:07:03.760 --> 00:07:04.220
.

104
00:07:04.680 --> 00:07:05.140
All right.

105
00:07:05.160 --> 00:07:06.950
And now we're going to do.

106
00:07:06.950 --> 00:07:10.400
Example three what are we going to do here.

107
00:07:10.440 --> 00:07:18.730
We're going to apply a function which is called RHO means so there is a capital rule means plural.

108
00:07:18.750 --> 00:07:20.350
So let's have a look here.

109
00:07:20.820 --> 00:07:21.790
Let's zoom in.

110
00:07:21.900 --> 00:07:28.290
And here we can see form a row and column sums and means for a numeric address.

111
00:07:28.350 --> 00:07:34.260
So basically nothing special about it but what it does is just calculates the means of all the rows

112
00:07:34.260 --> 00:07:35.510
or all the columns.

113
00:07:35.520 --> 00:07:37.980
If your call means of your matrix.

114
00:07:38.100 --> 00:07:44.280
So exactly what we need right so if we say RHO means of Chicago it's kind of like using applies.

115
00:07:44.290 --> 00:07:47.130
It's identical to that's common here.

116
00:07:47.400 --> 00:07:50.760
Identical to what we talked about before.

117
00:07:50.760 --> 00:07:56.550
If we say apply and then we say Chicago and then say 1 and then say mean right.

118
00:07:56.550 --> 00:08:01.700
So apply Chicago 1 mean we'll give you exactly the same result.

119
00:08:01.710 --> 00:08:07.200
So there is a play I want a Chicago one mean and there's roll means Chicago is just a shorter way of

120
00:08:07.200 --> 00:08:10.200
writing this is just a pretty defined function in are.

121
00:08:10.200 --> 00:08:11.830
Which means exactly this.

122
00:08:12.120 --> 00:08:13.290
So there's Romains.

123
00:08:13.320 --> 00:08:19.190
And what we want to do if Romains is now you can see is handy when we apply to just Chicago right.

124
00:08:19.230 --> 00:08:24.780
But what we want to do is we want to apply abro means to every single city in our list.

125
00:08:24.780 --> 00:08:26.820
How do we do that same thing.

126
00:08:26.820 --> 00:08:30.240
Actually you can pause this video right now and try it on your own.

127
00:08:30.240 --> 00:08:32.980
It's very very similar to what we've done just now.

128
00:08:33.390 --> 00:08:36.580
And now I'm going to show you how I would do it.

129
00:08:36.600 --> 00:08:37.910
I'll go apply.

130
00:08:38.190 --> 00:08:43.890
And then I would say whether because that's a list and then I would apply roamings as simple as that

131
00:08:43.900 --> 00:08:44.150
.

132
00:08:44.400 --> 00:08:47.210
So if I run this now wider.

133
00:08:47.520 --> 00:08:49.250
So you can see that we've got a list.

134
00:08:49.650 --> 00:08:53.280
And in this list we've got the name of the city.

135
00:08:53.460 --> 00:08:57.150
And then instead of a matrix we have the vector.

136
00:08:57.150 --> 00:09:00.760
So we've got a named vector with the means of the columns.

137
00:09:00.780 --> 00:09:06.810
And this is already even closer to the deliverable one result remember what we had before when we ran

138
00:09:06.810 --> 00:09:09.340
them all separately using the Apply function.

139
00:09:09.450 --> 00:09:09.770
Right.

140
00:09:09.780 --> 00:09:12.620
And then we just compared them like that visually.

141
00:09:12.690 --> 00:09:20.160
So now we can actually copy this line again and we can say we're getting there so far and this is see

142
00:09:20.220 --> 00:09:22.630
now they're all in actually in one list.

143
00:09:22.680 --> 00:09:29.460
So we've got Chicago in New York and so on and so it's already close right so even better but will improve

144
00:09:29.820 --> 00:09:36.600
will improve further we'll improve it even further and make it even more representable.

145
00:09:36.600 --> 00:09:40.120
So there we go that's how to use the L apply function.

146
00:09:40.200 --> 00:09:43.550
And also we learn a new function Romains by the way there's a couple more.

147
00:09:43.770 --> 00:09:48.390
So if we look at what we had here or actually we just typed them here.

148
00:09:48.390 --> 00:09:50.250
So we've got Romains.

149
00:09:50.310 --> 00:09:50.940
These are good ones.

150
00:09:50.940 --> 00:09:56.220
Remember we got a call means we've got a row sums.

151
00:09:56.440 --> 00:10:02.910
And we've got to call some so those are predefined functions in are which are very handy to use with

152
00:10:02.910 --> 00:10:08.760
Elea apply because you just throw them in and if you know you want the means of the rows or the columns

153
00:10:08.760 --> 00:10:14.550
or the Psalms then you just quickly get it you don't need to create anything on top of that.

154
00:10:14.610 --> 00:10:16.860
And in fact play around with that.

155
00:10:16.860 --> 00:10:22.100
Have a look at that and see if you can apply Colbys and probably will make a lot of sense because what

156
00:10:22.110 --> 00:10:27.630
we talked about before in Almendras isn't really much sense in comparing things across different rows

157
00:10:27.630 --> 00:10:27.800
.

158
00:10:27.930 --> 00:10:32.530
But nevertheless for practice purposes you can look at this one or even try doing the PS..

159
00:10:32.580 --> 00:10:35.690
Just so you get some more hands on experience with well apply.

160
00:10:35.910 --> 00:10:41.770
And the first couple of times you do it try to write it out like this try to write it out for yourself

161
00:10:41.780 --> 00:10:41.930
.

162
00:10:42.120 --> 00:10:44.460
What exactly is going on in the background.

163
00:10:44.460 --> 00:10:45.920
What is our doing.

164
00:10:45.930 --> 00:10:50.190
How is it iterating over these components of your list.

165
00:10:50.340 --> 00:10:53.190
And then we go that's how the play function works.

166
00:10:53.220 --> 00:10:55.030
I look forward to seeing the next tutorial.

167
00:10:55.080 --> 00:10:56.800
And until then happy coding
