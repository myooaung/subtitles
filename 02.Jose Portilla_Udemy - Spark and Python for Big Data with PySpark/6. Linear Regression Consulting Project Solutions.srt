1
00:00:05,810 --> 00:00:11,030
Hello everyone and welcome to this example solution lecture for the linear regression consulting project.

2
00:00:11,210 --> 00:00:16,040
Well we're going to be doing is walking through and coding along an example solution for the linear

3
00:00:16,040 --> 00:00:17,390
regression consulting project.

4
00:00:17,390 --> 00:00:19,460
If you do it another way that's totally fine.

5
00:00:19,460 --> 00:00:22,800
This is just a example of one possible solution.

6
00:00:22,820 --> 00:00:23,480
Let's hop over.

7
00:00:23,480 --> 00:00:25,410
Create a new notebook and get started.

8
00:00:25,820 --> 00:00:26,100
OK.

9
00:00:26,120 --> 00:00:30,620
So the first thing you have to do regardless of whatever approach we take is start a spark session and

10
00:00:30,620 --> 00:00:31,480
get the data.

11
00:00:31,700 --> 00:00:32,830
So let's go ahead and do that.

12
00:00:32,840 --> 00:00:40,850
We'll say from Paice spark that sequel import a spark session and then we'll say spark is equal to spark

13
00:00:40,860 --> 00:00:50,280
session builder app name and then we'll call this app crews and we'll say it gets or creates and the

14
00:00:50,280 --> 00:00:52,950
next thing we're going to do is actually read in the data.

15
00:00:53,280 --> 00:00:55,930
So hopefully you recognize that it's a C S V file.

16
00:00:55,950 --> 00:01:01,500
So all I have to do is say sparked thought read that yesterday and we should also infer schema to be

17
00:01:01,500 --> 00:01:04,470
true as well as header to be true.

18
00:01:04,980 --> 00:01:09,930
So we're run that analysis and then we want to do is print out schema that just to get a taste of things

19
00:01:09,930 --> 00:01:13,160
here so we can see we have the ship name as a string.

20
00:01:13,170 --> 00:01:15,770
The cruise line it belongs to is also a string.

21
00:01:15,780 --> 00:01:16,860
The age is an integer.

22
00:01:16,860 --> 00:01:21,190
We have the tonnage the passenger's length cabinets passenger density and crew.

23
00:01:21,210 --> 00:01:25,670
So we see that we have all these numerical concepts here and we have two strings.

24
00:01:25,680 --> 00:01:27,780
The ship name and the cruise line.

25
00:01:27,780 --> 00:01:34,140
So we take a look at some of the first entries so let's say the head of 5 and let's actually say for

26
00:01:34,860 --> 00:01:41,460
ship in the head of 5 we will print ship and then print a new line.

27
00:01:41,460 --> 00:01:43,680
This is just so it looks a little nicer for us here.

28
00:01:44,830 --> 00:01:45,700
So let's run that.

29
00:01:45,770 --> 00:01:46,350
OK.

30
00:01:46,460 --> 00:01:48,290
So I can see that ships have various names.

31
00:01:48,300 --> 00:01:52,280
Journey Quest celebration etc. but the cruise lines sometimes are shared.

32
00:01:52,280 --> 00:01:55,080
So we have one cruise line here with multiple ships.

33
00:01:55,280 --> 00:02:00,410
The Carnival Cruise Line has the ship's celebration the ship conquest etc. and when we note it here

34
00:02:00,680 --> 00:02:04,660
is that the cruise line may have an effect on how many crew members we need.

35
00:02:04,820 --> 00:02:10,340
So maybe certain cruise lines try to increase the number of crew members or certain cruise lines compared

36
00:02:10,340 --> 00:02:12,430
to others have fewer crew members.

37
00:02:12,440 --> 00:02:13,910
So that's something we want to explore.

38
00:02:14,000 --> 00:02:19,850
But since it's a string argument or a categorical data point we're going to need to use the indexer

39
00:02:19,850 --> 00:02:21,090
to convert it.

40
00:02:21,410 --> 00:02:25,560
If you weren't able to figure that out on your own no problem there's still plenty of information here.

41
00:02:25,670 --> 00:02:29,720
That's totally numerical and lines up with the examples we worked through earlier.

42
00:02:29,840 --> 00:02:35,240
We can see here the age of the ship how large the ship is and tonnage how many passengers can hold the

43
00:02:35,240 --> 00:02:36,260
length of the ship.

44
00:02:36,260 --> 00:02:37,260
Number of cabins.

45
00:02:37,360 --> 00:02:38,300
Passenger density.

46
00:02:38,300 --> 00:02:42,550
Those are all things that intuitively would relate to the actual number of crewmembers needed.

47
00:02:42,560 --> 00:02:47,810
So if you have more passengers or your ship is larger or there's more density of passengers on the ship

48
00:02:48,050 --> 00:02:49,570
you're going to need more crew members.

49
00:02:49,580 --> 00:02:53,170
And likewise if you have less of that stuff you probably need less crew members.

50
00:02:53,270 --> 00:03:00,080
But let's convert this cruise line feature into some sort of numerical value that our algorithm can

51
00:03:00,080 --> 00:03:06,110
understand because the algorithm cannot understand directly something like carnival or Asmara whatever

52
00:03:06,110 --> 00:03:07,080
etc..

53
00:03:07,550 --> 00:03:12,830
So let's come down here and we're going to do is work with dealing with that cruise line categorical

54
00:03:12,830 --> 00:03:13,500
variable.

55
00:03:13,700 --> 00:03:20,900
So let's just see how many cruise lines we have in general and what I can do is say group by that cruise

56
00:03:20,900 --> 00:03:24,730
line and it's Cruise underscore line column.

57
00:03:25,000 --> 00:03:27,750
And I just want to counts and then show the results there.

58
00:03:28,500 --> 00:03:32,400
So what this is going to do is it's going to group by the cruise line and then show the count and I

59
00:03:32,400 --> 00:03:34,210
can even order this if I wanted to.

60
00:03:34,410 --> 00:03:39,960
But I can see here that it looks like there's quite a few cruise lines and what I can also see is that

61
00:03:39,960 --> 00:03:45,390
certain cruise lines have a lot of ships and certain cruise lines have way less ships.

62
00:03:45,390 --> 00:03:51,030
That's something we may want to explore later on but it's worth it especially because that client Hyundai

63
00:03:51,420 --> 00:03:55,480
heavy industries indicated that this may be an important feature which is why we're going to explore

64
00:03:55,480 --> 00:03:56,420
it further.

65
00:03:56,460 --> 00:04:02,460
So what we can do is you stream indexer to try to convert these various cruise line names into just

66
00:04:02,550 --> 00:04:05,630
number groups so 0 1 2 3 etc..

67
00:04:05,760 --> 00:04:07,040
So let's try to do that.

68
00:04:07,200 --> 00:04:16,020
Well we're going to do is say from Paice sparked the M-L feature import string indexer and then I'm

69
00:04:16,020 --> 00:04:23,490
going to create an object called indexer and this is essentially going to look really similar to a vector

70
00:04:23,490 --> 00:04:32,760
assembler object so we're going to say input column is cruise line and loops and then say output column

71
00:04:34,440 --> 00:04:38,170
output call is will say Crewe's underscore cat.

72
00:04:38,190 --> 00:04:45,270
So cruise category and then what I will say is indexed is the indexer.

73
00:04:45,270 --> 00:04:51,110
And then you fit the indexer to the data frame and then you can also then transform this.

74
00:04:51,180 --> 00:04:54,760
So I'm doing this all in one step but you could separate the two lines.

75
00:04:54,810 --> 00:04:59,730
So if you wanted to you could take this object and then on another line do the transformation.

76
00:04:59,730 --> 00:05:01,770
I'm just doing it here on one line.

77
00:05:01,770 --> 00:05:03,840
These two steps.

78
00:05:03,860 --> 00:05:10,630
So then we're going to do here say well show indexed at 5 rows of show ones.

79
00:05:10,640 --> 00:05:15,150
We'll need to see one in here I can see the ship name journey cruise line.

80
00:05:15,170 --> 00:05:19,910
And then if I come all the way over here I can see this particular cruise category is now assigned that

81
00:05:19,910 --> 00:05:21,150
number 16.

82
00:05:21,410 --> 00:05:26,640
If I see something like cruise at 3 we continue down we can see again this same cruise line.

83
00:05:26,640 --> 00:05:31,970
It's category 16 But if you're on Carnival Cruise Line your cruise category number one.

84
00:05:31,970 --> 00:05:37,700
So now that's a numerical value that the algorithm can use versus just this string value.

85
00:05:37,700 --> 00:05:41,000
Now there's definitely different ways to deal if string categorical information.

86
00:05:41,000 --> 00:05:44,650
Beyond this you can separate this out into what's known as dummy variables.

87
00:05:44,700 --> 00:05:49,280
So when you have a single column indicating yes or no for every cruise line but we're going to keep

88
00:05:49,280 --> 00:05:53,260
things kind of loose and just set it as some numerical category here.

89
00:05:53,270 --> 00:05:57,950
This is not the most optimal way to deal with this but it should be enough for our particular use case

90
00:05:58,160 --> 00:06:01,540
especially since we have so much more numerical data here.

91
00:06:01,550 --> 00:06:02,680
All right.

92
00:06:02,840 --> 00:06:05,460
So continuing on don't worry if you were able to figure that out.

93
00:06:05,610 --> 00:06:09,780
We'll discuss working categorical data much more in future lectures.

94
00:06:09,950 --> 00:06:14,120
But we're going to do now is move on to working with the vector assembler and just getting our linear

95
00:06:14,120 --> 00:06:15,570
regression working.

96
00:06:15,620 --> 00:06:24,140
So I will say from Paice barked the M-L Lin owls import vectors and then from PI sparked the M-L that

97
00:06:24,140 --> 00:06:31,320
feature in your vector assembler so that's what we've seen earlier.

98
00:06:31,320 --> 00:06:33,870
And then if I look at the indexed columns.

99
00:06:34,260 --> 00:06:37,350
So that's my new data frame that now has this cruise category.

100
00:06:37,350 --> 00:06:40,140
I can see the actual columns that I want to include.

101
00:06:40,260 --> 00:06:47,990
So what I will end up doing is creating an assembler object and Goines said equal to the vector assembler.

102
00:06:48,160 --> 00:06:50,870
And I want to define my impact columns.

103
00:06:50,980 --> 00:06:53,510
So what I always like to do is copy and paste these.

104
00:06:53,620 --> 00:06:58,500
So I don't want the cruise line and I want the ship name the ship name is just some arbitrary string.

105
00:06:58,570 --> 00:07:03,540
The cruise line have already converted to this cruise category and I don't want the crew column.

106
00:07:03,550 --> 00:07:09,820
So I'm going to do is copy all of this and then make sure to get rid of crew because crews what I'm

107
00:07:09,830 --> 00:07:12,120
trying to predict it's not a feature.

108
00:07:12,590 --> 00:07:14,010
And now I'm good to go.

109
00:07:14,060 --> 00:07:21,630
So notice that age column tonnage passenger's length cabins pastorate density and then a cruise category.

110
00:07:21,770 --> 00:07:23,730
Those are my input feature columns.

111
00:07:23,840 --> 00:07:29,980
And then my output call is going to be just features.

112
00:07:30,120 --> 00:07:35,130
So let's run that and let's make sure we wrote that right by saying output is equal to that assembler

113
00:07:35,130 --> 00:07:39,950
object and transform indexed into that.

114
00:07:39,960 --> 00:07:40,490
OK.

115
00:07:40,590 --> 00:07:45,340
The reason we have to do index and not data is because remember index is the one with the cruise categories.

116
00:07:45,660 --> 00:07:48,990
So we can do now is check it out and make sure we're good to go.

117
00:07:48,990 --> 00:07:59,010
So when you say output select features and then crew and show the results here so I can see how my various

118
00:07:59,010 --> 00:08:05,010
features and then my label column which is just crew great and we can also see that certain ships that

119
00:08:05,010 --> 00:08:08,830
are basically exact same make and model have a certain number of crew.

120
00:08:08,850 --> 00:08:12,450
So that's good to know here as we explore this data further.

121
00:08:12,480 --> 00:08:19,920
So continuing along let's create our final data which is going to be equal to output select and all

122
00:08:19,920 --> 00:08:25,920
I care about is that features column and that crew call them and here that I'm not passing it in as

123
00:08:25,920 --> 00:08:31,020
a list that shouldn't be necessary but in case you're getting errors for certain versions of SPARC you

124
00:08:31,020 --> 00:08:33,090
may need to do a list like this.

125
00:08:33,480 --> 00:08:33,940
OK.

126
00:08:34,140 --> 00:08:40,140
So moving along and the train data split are trained to split I should say and we'll grab our final

127
00:08:40,140 --> 00:08:49,490
data and do a random split on it am I going to split it into a 70 30 mix and let's explore that train

128
00:08:49,490 --> 00:08:50,750
data.

129
00:08:50,750 --> 00:08:54,990
So I'm going to ask it to be described and then show it.

130
00:08:55,340 --> 00:08:57,690
So it may training data have 103 ships.

131
00:08:57,710 --> 00:08:58,740
That's not so bad.

132
00:08:58,970 --> 00:09:07,280
And then in my test data we're going to describe this show the results and then I have 55 ships that

133
00:09:07,280 --> 00:09:09,710
are going to be using for testing.

134
00:09:09,710 --> 00:09:16,620
So we're going to do now is finally build our our linear regression model from Paice sparked the M-L

135
00:09:16,710 --> 00:09:18,080
regression.

136
00:09:18,080 --> 00:09:24,560
I want to import a linear regression object and let's create a linear regression model object.

137
00:09:24,570 --> 00:09:30,620
So I will call this ship L R and I will set it equal to linear regression.

138
00:09:30,840 --> 00:09:36,960
But I also need to specify that my column my label column at least is going to be crew come back up

139
00:09:36,960 --> 00:09:41,660
here remember that we have features but we also have crew instead of label.

140
00:09:41,670 --> 00:09:49,220
So we need it select that so I'll come over here say Larry Gration label column's crew run that and

141
00:09:49,220 --> 00:09:50,300
then offer this ship.

142
00:09:50,310 --> 00:10:00,270
LR I'm going to say let's say trained ship model is going to be equal to ship.

143
00:10:00,280 --> 00:10:04,360
How are men going to fit this to my training data.

144
00:10:06,650 --> 00:10:14,760
So that that's fit to my training data I can check out my training ship model train ship model and now

145
00:10:14,850 --> 00:10:25,700
I can evaluate my test data and then do this ship results run that and let's check out our ship results

146
00:10:26,180 --> 00:10:29,540
so I can just check out things like the root mean squared air.

147
00:10:29,870 --> 00:10:34,240
And I can see them I mean square error here is zero point six seven.

148
00:10:34,250 --> 00:10:37,940
Now remember the units here if I take a look at my actual data.

149
00:10:38,030 --> 00:10:43,280
So for example my training data and let's say the scribe show.

150
00:10:43,700 --> 00:10:49,580
So we can actually the crew count the crew count is in counts of 100 of the mean value being around

151
00:10:49,580 --> 00:10:50,750
seven point seven.

152
00:10:50,960 --> 00:10:56,170
So as always this root mean squared error is meaningless unless you compare it to the actual crew values

153
00:10:56,180 --> 00:10:58,480
so crew values were in those units.

154
00:10:58,490 --> 00:11:02,810
I believe it was in hundreds and you can see here that the mine was seven point seven standard deviation

155
00:11:02,870 --> 00:11:06,790
3.6 five men beings are 0.5 9 Max being 21.

156
00:11:06,950 --> 00:11:09,290
So the roomie's squirter is actually looking pretty good.

157
00:11:09,320 --> 00:11:14,580
Now let's go ahead and check out some other metrics we can call ship results.

158
00:11:15,420 --> 00:11:18,950
And check out our R-squared values to see how much of the variance explained.

159
00:11:19,020 --> 00:11:21,110
And in this case we're explaining quite a bit of the variance.

160
00:11:21,120 --> 00:11:27,090
Is there a point 9:5 now pending on how your random split occurred you may be explaining a little less

161
00:11:27,090 --> 00:11:28,080
or a little more.

162
00:11:28,230 --> 00:11:35,550
I would suspect that given whatever random split you did you should have achieved at least 0.8 R-squared

163
00:11:35,550 --> 00:11:41,220
of value in the actual solutions note book when I was running this the first time I achieved around

164
00:11:41,220 --> 00:11:46,150
0 8 6 because there is a random split here if we come up here.

165
00:11:46,380 --> 00:11:52,000
So because of this random split on 0.7 and 0.3 depending on two things one.

166
00:11:52,080 --> 00:11:54,180
Actual random splits you end up doing.

167
00:11:54,270 --> 00:11:58,450
And to what values you choose here your results may differ than mine.

168
00:11:58,500 --> 00:12:01,830
So if you have less training data you're going to be a little less accurate.

169
00:12:01,950 --> 00:12:05,490
But keep in mind your results won't be exactly as shown in the solutions.

170
00:12:05,490 --> 00:12:09,350
No but Or in this video because of this random split.

171
00:12:09,490 --> 00:12:14,060
So coming back down we've got a really good R-squared value and a pretty darn good root mean squared

172
00:12:14,060 --> 00:12:16,880
error and we can continue to analyze different things about this.

173
00:12:16,880 --> 00:12:22,770
For example who wanted the mean square error that could grab the ship results and then call mean square

174
00:12:22,820 --> 00:12:23,110
error.

175
00:12:23,120 --> 00:12:31,440
There's also an absolute error that we can check out so say mean absolute error and that's 0.5 3.

176
00:12:31,460 --> 00:12:36,560
Now as I mentioned in the previous CO-2 long lecture if you're getting really good results on things

177
00:12:36,560 --> 00:12:41,540
like root mean squared error and you're getting a really high R-squared value it's always a good idea

178
00:12:41,540 --> 00:12:44,450
to kind of do a reality check on your results.

179
00:12:44,450 --> 00:12:48,260
Does it make sense to you getting this good of a model now in this case.

180
00:12:48,260 --> 00:12:51,440
This data is actually real it's not artificially created.

181
00:12:51,590 --> 00:12:58,010
This is real data on real ships gotten from the U.S. machine learning repository that's UC Irvine machine

182
00:12:58,010 --> 00:12:59,760
learning repository online.

183
00:12:59,990 --> 00:13:05,570
So what we can do to kind of do a reality check on these results is see if the two columns are any two

184
00:13:05,570 --> 00:13:07,740
columns are really highly correlated.

185
00:13:07,790 --> 00:13:12,800
So things I can do is check is the number of crew highly correlated with the number of passengers on

186
00:13:12,800 --> 00:13:17,190
board or as a number of crew highly correlated with the number of cabins on board.

187
00:13:17,390 --> 00:13:23,150
If those things are true then it makes sense that my model performed really well because there's two

188
00:13:23,150 --> 00:13:27,000
columns that are really highly correlated with the thing I'm trying to predict.

189
00:13:27,050 --> 00:13:28,750
So let's do that.

190
00:13:28,760 --> 00:13:41,130
I will say from pi pi spark dot sequel dot functions in poor c o r r and that stands for the Pearson

191
00:13:41,130 --> 00:13:45,580
correlation which is basically just a way of saying how related are these two columns.

192
00:13:45,720 --> 00:13:49,750
And what I'm going to do is if I take a look at my original data frame.

193
00:13:50,010 --> 00:13:53,320
So let's make sure it did save it under DMF.

194
00:13:53,340 --> 00:13:54,460
OK so I did.

195
00:13:54,480 --> 00:14:01,110
So I want to check if in my original data is this crew column really related to things like the cabins.

196
00:14:01,110 --> 00:14:07,770
So we'll see if select and then I'll pass on the correlation and I'll pass in the crew column as well

197
00:14:07,800 --> 00:14:10,230
as the passengers column.

198
00:14:10,260 --> 00:14:11,910
And let me show the results here.

199
00:14:13,360 --> 00:14:18,820
So I can see here based off these results that these two columns are highly correlated with one being

200
00:14:18,820 --> 00:14:25,490
perfect correlation so 0.9 one does signify high correlation which makes sense just intuitively if there's

201
00:14:25,510 --> 00:14:29,800
more passengers on board you need more crew or likewise that there's less passengers onboard you'll

202
00:14:29,800 --> 00:14:30,730
need less crew.

203
00:14:30,940 --> 00:14:32,960
So it makes sense that these are highly correlated.

204
00:14:33,160 --> 00:14:39,400
And if I chicken against another column such as cabin's that I get an even higher correlation 0.9 5

205
00:14:39,700 --> 00:14:45,850
so more cabin's more crew members which means that just a lot of these features of the ship itself have

206
00:14:45,850 --> 00:14:49,220
a really good indication of exactly how many crewmembers we need.

207
00:14:49,450 --> 00:14:55,280
So all of that makes a lot of sense both intuitively just from thinking about more passengers more crew

208
00:14:55,280 --> 00:15:00,430
members and mathematically based on these correlations as well as the results of how well our model

209
00:15:00,430 --> 00:15:01,520
performed.

210
00:15:01,900 --> 00:15:02,500
Okay.

211
00:15:02,740 --> 00:15:08,050
So hopefully you got the basic idea of how to test out the model and create a model trying to predict

212
00:15:08,050 --> 00:15:09,210
the number of crewmembers.

213
00:15:09,310 --> 00:15:13,330
If you were able to figure out string indexer don't worry that's no problem we're going to need to be

214
00:15:13,330 --> 00:15:17,710
covering categorical data in a lot more detail for future models and future projects.

215
00:15:17,860 --> 00:15:23,200
Hopefully however you were able to create some base linear regression model that had good results or

216
00:15:23,200 --> 00:15:28,390
at least fair result in trying to predict how many crewmembers were needed for new ships.

217
00:15:28,390 --> 00:15:28,900
Thanks.

218
00:15:28,930 --> 00:15:32,090
I hope you enjoyed that and I'll see you at the next section of the course.
