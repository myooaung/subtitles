1
00:00:06,120 --> 00:00:11,410
Hello everyone and welcome to the recommender systems section of the course we're going to learn how

2
00:00:11,410 --> 00:00:14,460
to build a recommender system with SPARK in Python.

3
00:00:14,500 --> 00:00:19,240
Now for this section the course there is no consulting project or documentation example for this section

4
00:00:19,660 --> 00:00:24,580
because the actual ease of use of SPARC and recommender systems didn't really lend itself towards being

5
00:00:24,580 --> 00:00:25,490
tested on.

6
00:00:25,510 --> 00:00:30,250
I initially tried to create a consulting project but the real challenge behind creating a recommender

7
00:00:30,250 --> 00:00:35,200
system where Sparc and Python falls outside the scope of SPARC in Python itself.

8
00:00:35,200 --> 00:00:39,750
The challenge is getting the users getting them to submit feedback in a useful way.

9
00:00:39,910 --> 00:00:45,790
Organizing your data and actually building an infrastructure that's outside what sparking in Python

10
00:00:45,790 --> 00:00:51,310
do what SPARC is really good at is taking in that formatted data and then quickly building a recommender

11
00:00:51,310 --> 00:00:51,940
system.

12
00:00:52,120 --> 00:00:58,420
So the challenge is just getting that data and formatting it with everything that that entails actually

13
00:00:58,630 --> 00:01:03,250
implementing the recommender system itself was sparked in Python is pretty straightforward which is

14
00:01:03,250 --> 00:01:06,850
why there's no consulting project or even a documentation example.

15
00:01:06,850 --> 00:01:09,760
So keep that in mind as we continue on through this course.

16
00:01:11,020 --> 00:01:15,580
Now in case you are further interested in recommender systems and what we cover in this course I suggest

17
00:01:15,580 --> 00:01:19,490
you take a look at this book recommender systems you can find that on Amazon.

18
00:01:19,480 --> 00:01:24,160
It'll go into much more detail about the mathematics and general background behind that recommender

19
00:01:24,160 --> 00:01:26,750
systems.

20
00:01:26,850 --> 00:01:32,010
Also as a quick know fully developed and deployed recommendation systems can be complex and resource

21
00:01:32,040 --> 00:01:33,090
intensive.

22
00:01:33,090 --> 00:01:38,550
Even companies that you think really rely on recommendation systems like Netflix don't always get it

23
00:01:38,550 --> 00:01:44,400
right on the first try even though they study this problem a lot they have a lot of resources and really

24
00:01:44,400 --> 00:01:46,290
smart people working on this problem.

25
00:01:46,320 --> 00:01:51,960
Netflix itself has switched from a star rating recommendation system to a simple thumbs up and thumbs

26
00:01:51,960 --> 00:01:52,620
down.

27
00:01:52,620 --> 00:01:58,190
And then some sort of percentage of how much they'll think you will enjoy this TV show or related movie.

28
00:01:58,380 --> 00:02:03,780
So even these huge companies working on these really hard problems are still developing the best techniques.

29
00:02:04,050 --> 00:02:05,660
So keep that in mind as we continue.

30
00:02:05,730 --> 00:02:10,230
You'll usually want someone with previous experience implementing a production ready recommendation

31
00:02:10,230 --> 00:02:11,160
system.

32
00:02:12,230 --> 00:02:17,540
Ok so since full recommender systems require a heavy linear algebra background what we're going to try

33
00:02:17,540 --> 00:02:20,520
to do is provide only a high level overview in this lecture.

34
00:02:20,690 --> 00:02:25,070
Check out that book previously mentioned in the beginning of this lecture for a deeper look in the mathematics

35
00:02:25,070 --> 00:02:27,580
behind this topic.

36
00:02:27,600 --> 00:02:32,840
Now the two most common types are recommender systems are content based and collaborative filtering.

37
00:02:32,890 --> 00:02:39,230
Otherwise known as C-f collaborative filtering produces recommendations based on the knowledge of users

38
00:02:39,290 --> 00:02:40,810
attitudes towards items.

39
00:02:40,850 --> 00:02:46,840
That is it uses what's known as the wisdom of the crowd to recommend items content based recommender

40
00:02:46,840 --> 00:02:51,520
systems focus on the attributes of the items themselves and they give you recommendations based on the

41
00:02:51,520 --> 00:02:53,660
similarity between those items.

42
00:02:54,990 --> 00:03:00,360
In general collaborative filtering is more commonly used in content based systems because it usually

43
00:03:00,360 --> 00:03:04,800
gives better results and it's actually relatively easy to understand from an overall implementation

44
00:03:04,800 --> 00:03:05,610
perspective.

45
00:03:06,850 --> 00:03:11,350
The algorithm has the ability to do feature learning on its own which means that it can start to learn

46
00:03:11,350 --> 00:03:13,420
for itself what features to use.

47
00:03:14,790 --> 00:03:19,850
These techniques aim to fill in the missing entries of what's known as a user item Association matrix

48
00:03:20,190 --> 00:03:27,120
that is users on one axis of that matrix and then items on another axis where the meeting point for

49
00:03:27,120 --> 00:03:33,330
the user in the item would be some sort of rating value sparked the M-L currently supports a model based

50
00:03:33,330 --> 00:03:39,090
collaborative filtering in which users and products are described by a small set of latent factors that

51
00:03:39,090 --> 00:03:41,220
can be used to predict missing entries.

52
00:03:42,360 --> 00:03:48,300
Spark thought and Mel uses the alternating least squares or HLS algorithm to learn about these latent

53
00:03:48,300 --> 00:03:49,170
factors.

54
00:03:49,320 --> 00:03:54,240
Your data needs to be in a specific format to work of sparks HLS recommendation algorithm and that's

55
00:03:54,240 --> 00:03:58,500
really kind of the hard part the easy part is just deploying the recommendation algorithm.

56
00:03:58,500 --> 00:04:05,500
The hard part is getting your data into that specific format and getting enough of it so HLS is basically

57
00:04:05,500 --> 00:04:09,410
a matrix factorization approach to implement a recommendation algorithm.

58
00:04:09,430 --> 00:04:16,110
You decompose your large user item matrix into a lower missional user factors in item factors.

59
00:04:16,360 --> 00:04:20,600
So to fully understand this model you actually need to have a strong background in linear algebra.

60
00:04:20,830 --> 00:04:25,440
So check out the various resource links for more detail on HLS and how it works.

61
00:04:26,600 --> 00:04:31,100
Let's try to give you an intuitive understanding of this all at least So when you actually approach

62
00:04:31,100 --> 00:04:35,010
it of python and SPARC you have an idea of what it's doing in the background.

63
00:04:35,150 --> 00:04:38,950
So let's imagine that we have three customers will just named this customers number one.

64
00:04:38,950 --> 00:04:44,150
Number two number three and we also have some movies a b and c so we're kind of like Netflix just on

65
00:04:44,150 --> 00:04:45,630
a super small scale.

66
00:04:45,830 --> 00:04:49,920
And customers number one and number two really enjoy movies A and B.

67
00:04:50,000 --> 00:04:52,200
And so they rate them five out of five stars.

68
00:04:52,340 --> 00:04:57,450
And these customers number one and two also this like movie c they give it just a one star rating.

69
00:04:58,820 --> 00:05:04,130
And now we have this new customer customer number three now Customer Number Three hasn't seen the movies

70
00:05:04,130 --> 00:05:06,310
yet and wants to see movie A.

71
00:05:06,320 --> 00:05:07,120
They really enjoy it.

72
00:05:07,130 --> 00:05:09,000
So they give it a five star review.

73
00:05:09,260 --> 00:05:16,270
So now as this movie service what's the new movie we should recommend on our platform movie B or movie

74
00:05:16,270 --> 00:05:16,860
C.

75
00:05:17,210 --> 00:05:22,760
Well based off a collaborative filtering model will recommend movie B because since users number one

76
00:05:22,850 --> 00:05:29,660
and number two also enjoyed movie B and they enjoyed the movie similar to what customer three enjoyed.

77
00:05:29,660 --> 00:05:32,270
And that's the basic idea behind collaborative filtering.

78
00:05:32,270 --> 00:05:37,120
You use that wisdom of the crowd technique which I mean the intuitive level it makes sense if users

79
00:05:37,130 --> 00:05:37,560
number one.

80
00:05:37,560 --> 00:05:43,370
Number two enjoyed movie A and enjoyed movie B then it's likely that this new customer number three

81
00:05:43,610 --> 00:05:51,140
who enjoys movie A will also likely enjoy a movie be now a content based system when it actually need

82
00:05:51,140 --> 00:05:52,990
to take those users into account.

83
00:05:53,120 --> 00:05:58,200
What it could do is just group movies together based on features like the length of the movie the genre

84
00:05:58,200 --> 00:06:03,320
of the movie what actors are in the movie and then it will just group movies that are similar together

85
00:06:03,410 --> 00:06:08,430
and just based off those groupings suggest movies that are similar in that group.

86
00:06:09,300 --> 00:06:14,570
Often real recommendation systems can have combinations of both methods.

87
00:06:14,630 --> 00:06:19,590
Now for this course we're going to do is leave further review of the Aeolus mathematics up to the student

88
00:06:19,680 --> 00:06:20,750
and those resource links.

89
00:06:20,760 --> 00:06:26,010
So let's get started in the next lecture by opening up a Jupiter notebook and creating a recommender

90
00:06:26,010 --> 00:06:29,360
system based off the famous movie lines dataset.

91
00:06:29,460 --> 00:06:31,050
Thanks and I'll see you at the next lecture.
