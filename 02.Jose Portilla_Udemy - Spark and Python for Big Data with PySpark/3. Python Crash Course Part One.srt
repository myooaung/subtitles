1
00:00:05,100 --> 00:00:07,410
Welcome back to the Python crash course.

2
00:00:07,530 --> 00:00:09,470
Let's get started with Part 1.

3
00:00:09,480 --> 00:00:12,500
I'm going to hop over to a new Jupiter notebook to get started.

4
00:00:14,030 --> 00:00:17,850
Let's start off our crash course with the very basics starting with numbers.

5
00:00:17,960 --> 00:00:21,230
So Python has two main number of types that we're going to be working with.

6
00:00:21,260 --> 00:00:27,200
It has integers which are just whole numbers or what is known as floating point numbers or floats which

7
00:00:27,200 --> 00:00:29,720
is essentially just with decimals.

8
00:00:29,720 --> 00:00:34,290
And if you ever want to check the type of any objects in Python you just use the type functions.

9
00:00:34,310 --> 00:00:35,690
I can say type one.

10
00:00:35,720 --> 00:00:40,710
I can see there it's an I.A. for integer or type of one point zero.

11
00:00:41,030 --> 00:00:45,000
And since it has that decimal information it's a floating point number or a float.

12
00:00:45,260 --> 00:00:47,990
Let's go through some very basic math with Python.

13
00:00:47,990 --> 00:00:51,210
So all of this you would probably expect to work one plus one.

14
00:00:51,380 --> 00:00:58,280
So that's addition multiplication is just an asterix 1 times 3 division is just a slash So 1 divided

15
00:00:58,280 --> 00:00:59,210
by two.

16
00:00:59,450 --> 00:01:05,160
If you wanted to exponents for example 2 to power four it's just two sets of Asterix.

17
00:01:05,290 --> 00:01:06,680
We can see that 16.

18
00:01:06,850 --> 00:01:12,370
The modulus operator or maade operator is just a percent sign as it is in various languages.

19
00:01:12,370 --> 00:01:18,460
So for maade to brings back zero or remember the Mod operator in case you're unfamiliar with it it just

20
00:01:18,460 --> 00:01:20,570
returns the remainder after the division.

21
00:01:20,770 --> 00:01:25,270
So for divided by two says to those evenly into four just returns zero.

22
00:01:25,480 --> 00:01:28,500
And for example I can do 5 mod 2.

23
00:01:28,510 --> 00:01:34,990
That brings back 1 because 5 divided by 2 has a remainder of 1 and then quickly order of operations

24
00:01:35,080 --> 00:01:36,740
is followed in Python.

25
00:01:36,940 --> 00:01:46,810
So for example if I have two plus three times five plus five here it brings back 22.

26
00:01:46,820 --> 00:01:52,370
But if I actually want the addition to happen before that multiplication I can specify a specific order

27
00:01:52,370 --> 00:01:54,190
of operations of parentheses.

28
00:01:54,560 --> 00:01:58,310
So here I'm going to say hey do the addition and then multiply them together.

29
00:01:58,310 --> 00:02:04,730
So now I want to run the cell I get back 50 the basics of variable assignment are also quite simple

30
00:02:04,730 --> 00:02:05,960
with Python.

31
00:02:05,960 --> 00:02:08,940
Python prefers snake casing.

32
00:02:09,080 --> 00:02:15,110
Meaning if you have multiple words inside a variable name you separate them out by underscores.

33
00:02:15,450 --> 00:02:18,790
So this is just by convention there's no really strict rules on this.

34
00:02:18,900 --> 00:02:20,490
But we'll talk about this later on as well.

35
00:02:20,490 --> 00:02:25,950
But for instance I can say equal sign there there's a name of a variable so I can do this multiple times

36
00:02:25,950 --> 00:02:28,290
so x is equal to 1.

37
00:02:28,370 --> 00:02:30,780
Why is it to run that.

38
00:02:30,810 --> 00:02:35,390
And then it can say something like X was y and there I get the variables.

39
00:02:35,400 --> 00:02:38,080
OK so we talked about numbers and a variable assignment.

40
00:02:38,100 --> 00:02:42,740
Let's quickly talk about strings so strings can be a single quote.

41
00:02:43,740 --> 00:02:45,250
Or a double quote.

42
00:02:46,620 --> 00:02:49,710
So there we see strings of both single and double quotes.

43
00:02:49,850 --> 00:02:55,080
And for instance if he wanted to say something like I don't like that you could just wrap it all in

44
00:02:55,080 --> 00:02:58,320
double quotes so I don't like that.

45
00:02:58,560 --> 00:03:02,820
And notice now even though I have a single quote here because I'm wrapping the whole thing in double

46
00:03:02,820 --> 00:03:03,570
quotes.

47
00:03:03,570 --> 00:03:05,640
I don't get any sort of error.

48
00:03:05,640 --> 00:03:12,090
If I had done this with single quotes then Python is getting confused because it doesn't know where

49
00:03:12,090 --> 00:03:14,230
your actual string ends and starts.

50
00:03:14,280 --> 00:03:17,120
It says Oh is this a string or is this whole thing the string.

51
00:03:17,280 --> 00:03:24,060
So you can just mix up these quotes double versus single to actually make everything work correctly.

52
00:03:24,060 --> 00:03:29,610
Now notice here I'm actually getting in an output cell the string if I want to actually display the

53
00:03:29,610 --> 00:03:35,310
string I can print it which means I can do something like Prince Hello.

54
00:03:35,760 --> 00:03:40,290
And notice the difference here between just saying print hello or hello.

55
00:03:40,560 --> 00:03:45,720
If you're dealing with another idea you're going to be having to print your variables to see them during

56
00:03:45,720 --> 00:03:51,420
the output for Jupiter notebook However a lot of times it displays the very last line in a cell.

57
00:03:51,570 --> 00:03:56,850
So you can see here it's just displaying that string versus here in the top cell in 20.

58
00:03:56,850 --> 00:03:58,410
It's actually printing out the strings.

59
00:03:58,410 --> 00:03:59,630
Notice the difference here.

60
00:03:59,730 --> 00:04:04,770
There's no quotes there's no outsell versus here when I'm just asking for the string back returns the

61
00:04:04,770 --> 00:04:06,880
outsell Plus the string itself.

62
00:04:07,740 --> 00:04:09,300
So that's printing.

63
00:04:09,300 --> 00:04:10,730
The very basics of it.

64
00:04:10,740 --> 00:04:16,890
Let's show you how to format prints which is essentially also known as string interpellation which is

65
00:04:16,890 --> 00:04:19,450
a way to insert things into a string.

66
00:04:19,500 --> 00:04:21,470
For example if I wanted to say something like.

67
00:04:21,510 --> 00:04:27,220
My name is and then leave some sort of space there for me to input names.

68
00:04:27,270 --> 00:04:33,900
I could do curly brackets and then off this string called the dot format method and then I'd just pass

69
00:04:33,900 --> 00:04:35,430
in whatever I want to be there.

70
00:04:35,430 --> 00:04:39,580
So for example put in Jose so will print this whole thing out.

71
00:04:40,750 --> 00:04:45,860
So put this entire thing under print and I can see it says my name is Jose.

72
00:04:45,970 --> 00:04:50,920
So this is known as doc format on a string or string interpellation for a general sense.

73
00:04:51,070 --> 00:04:57,820
But it's a way to insert objects into a string and the curly brackets there indicate what's going to

74
00:04:57,820 --> 00:04:59,040
be put in.

75
00:04:59,050 --> 00:05:04,570
Now I can do this with multiple objects and the way can do that is by actually naming them or ordering

76
00:05:04,570 --> 00:05:05,770
them.

77
00:05:05,770 --> 00:05:11,540
So I'll say my name is blank and will say My number is.

78
00:05:11,960 --> 00:05:16,880
And then we'll also have curly brackets there and then I'll pass in a second argument inside a format

79
00:05:17,570 --> 00:05:21,630
and I'll put in something like 10.

80
00:05:21,640 --> 00:05:24,820
But let's put it in as a string so we don't get any errors here.

81
00:05:25,280 --> 00:05:27,190
OK so I say my name is Jose.

82
00:05:27,220 --> 00:05:29,040
And then it says My number is 10.

83
00:05:29,230 --> 00:05:32,810
So I'm passing in that string 10 and then putting in here.

84
00:05:32,830 --> 00:05:36,300
Now if I don't pass that as a string and try to run this it also works.

85
00:05:36,310 --> 00:05:41,470
But you should be careful that sometimes you make errors if you try to add stuff together inside the

86
00:05:41,470 --> 00:05:42,280
string.

87
00:05:42,310 --> 00:05:45,380
So I'm playing it safe passing that in as a string.

88
00:05:45,640 --> 00:05:47,550
So that's a really common thing to do.

89
00:05:47,540 --> 00:05:52,590
Another thing to do with format is to actually label these variables which you'll also see.

90
00:05:52,750 --> 00:05:54,320
Let me show you a quick example of that.

91
00:05:55,610 --> 00:06:04,440
So I'll say first it will pass and X and then say seconds and we'll pass in Y.

92
00:06:04,470 --> 00:06:10,740
So look what happens when I actually say for these things x x x y y y.

93
00:06:10,730 --> 00:06:13,340
This is just to make it kind of really obvious what's happening here.

94
00:06:13,630 --> 00:06:20,130
Whoops I get a key error because I actually labeled a key so it expects a variable x to be in say format

95
00:06:20,450 --> 00:06:23,790
and it will also expect some variable y to be inside that format.

96
00:06:23,970 --> 00:06:29,700
So let's those in we'll say x is equal to this triple X and Y is equal to this triple y.

97
00:06:29,940 --> 00:06:35,560
So running this again now it works so I see first triplex second triple.

98
00:06:35,850 --> 00:06:37,680
So you might be wondering well what's the point of this.

99
00:06:37,680 --> 00:06:42,630
Well now I don't need to worry about the order things are in format or I could use objects more than

100
00:06:42,630 --> 00:06:43,560
just once.

101
00:06:43,650 --> 00:06:46,350
For example I could just say why why.

102
00:06:46,350 --> 00:06:53,580
Now when I read the cell says first why why second triple Y or I could reverse the order say Y is first

103
00:06:53,640 --> 00:06:58,260
and then second is X running this I can see now I have a lot more control.

104
00:06:58,300 --> 00:07:01,340
They actually naming these variables inside of the format.

105
00:07:01,530 --> 00:07:07,840
So that's the basic use case there they're Let's move on to talk about lists so lists are also known

106
00:07:07,840 --> 00:07:12,270
as arrays and other languages and the way they work in Python is actually quite simple.

107
00:07:12,400 --> 00:07:18,260
All you have to do is use square brackets and you separate the different items inside of the list by

108
00:07:18,260 --> 00:07:19,300
commas.

109
00:07:19,300 --> 00:07:26,740
So here I have a list of numbers 1 2 3 but I could also have a list of strings such as a comma B comma

110
00:07:26,740 --> 00:07:27,670
C.

111
00:07:27,820 --> 00:07:34,850
So that's another list and I can even mix data types so I can say there's a number and there's a letter.

112
00:07:34,990 --> 00:07:37,640
Run that and Python doesn't complain.

113
00:07:37,690 --> 00:07:41,550
Now if action I want to grab objects from a list I can use indexing.

114
00:07:41,550 --> 00:07:48,040
So show me how to do that or create an object called my list and set it equal to a list of letters.

115
00:07:48,040 --> 00:07:56,120
So we'll say a b c now is a really quick note which you should never do is if you're typing a variable

116
00:07:56,120 --> 00:08:01,760
name and you notice that it's suddenly highlighted for you then you're probably going to run into issues

117
00:08:01,760 --> 00:08:06,230
there because this basically indicates that this is some sort of reserved keyword.

118
00:08:06,230 --> 00:08:09,490
So if you notice that it's being highlighted then you're having an issue.

119
00:08:09,590 --> 00:08:14,400
Now if you define your own function and you expect that sort of behavior then that's totally fine.

120
00:08:14,570 --> 00:08:16,040
But notice here it's being highlighted.

121
00:08:16,040 --> 00:08:20,990
So we're going to try to avoid using lists as a variable name which is a good call and let me zoom in

122
00:08:20,990 --> 00:08:24,040
just a little more here so we can clearly see what's happening.

123
00:08:24,260 --> 00:08:25,190
So I have my list.

124
00:08:25,190 --> 00:08:30,580
Sequel to these A B and C. Let's say I want to grab the very first item in my list A.

125
00:08:30,770 --> 00:08:32,290
I can just use an index call.

126
00:08:32,480 --> 00:08:38,120
So we grab the name of the list add in square brackets and then indexing starts at zero.

127
00:08:38,150 --> 00:08:43,880
So Phonogram the very first item that letter A I pass on a zero there and it returns the letter A.

128
00:08:43,970 --> 00:08:46,260
I want to grab the very last letter.

129
00:08:46,280 --> 00:08:48,770
See I had two options.

130
00:08:49,280 --> 00:08:56,900
I could count over and say 0 1 2 and passen the number 2 and then get back to letter C or let's say

131
00:08:56,930 --> 00:08:58,300
this was a super long list.

132
00:08:58,340 --> 00:09:03,380
And I just wanted to grab the last letter but didn't actually want to count all the way through python

133
00:09:03,380 --> 00:09:09,140
supports negative indexing meaning I can say OK starting from zero go backwards 1 which essentially

134
00:09:09,140 --> 00:09:12,410
saying loop all the way around and grab negative 1.

135
00:09:12,610 --> 00:09:14,450
And there we have C..

136
00:09:14,650 --> 00:09:15,220
OK.

137
00:09:15,400 --> 00:09:17,870
So that's the basics of indexing of a list.

138
00:09:17,920 --> 00:09:24,390
If I ever want to change an item in the list I can index it and then set it equal to some new item.

139
00:09:24,460 --> 00:09:26,950
So I'll say my list of zeros equal to you.

140
00:09:27,180 --> 00:09:30,220
And if I run this I don't actually see any output.

141
00:09:30,220 --> 00:09:34,390
So let's check if my list was actually changed by just asking for my list and a new cell.

142
00:09:34,780 --> 00:09:35,530
And there it is.

143
00:09:35,650 --> 00:09:42,080
I have new b c so that's the way you can define a new or re-assign an object in a list.

144
00:09:42,080 --> 00:09:47,950
Now if I don't want to reassign an object in a list but in that add on to that list then all I have

145
00:09:47,950 --> 00:09:52,790
to do is use the append method which appends a new item to a list.

146
00:09:52,810 --> 00:09:56,290
So let's show that going to clear that cell.

147
00:09:56,480 --> 00:10:01,890
Right now I have my list which is new B and C but I want to add a fourth item.

148
00:10:01,910 --> 00:10:08,050
So I'll say append and then let's add the letter D to the end of the list.

149
00:10:08,050 --> 00:10:14,230
So I run that I don't get anything back since the action is not actually returning anything but it is

150
00:10:14,230 --> 00:10:15,600
affecting the list.

151
00:10:15,640 --> 00:10:20,350
So if I asked for my list back I can see New B C and D.

152
00:10:20,500 --> 00:10:22,510
I can also nest lists.

153
00:10:22,740 --> 00:10:28,390
So I'm sure what I mean by that I can have my list is equal to and I'm basically creating a new list

154
00:10:28,390 --> 00:10:33,240
here 1 2 and then the third item can actually be a new list.

155
00:10:33,310 --> 00:10:36,210
For example 100 200.

156
00:10:36,270 --> 00:10:40,120
So if I look at my list now I see I have a list inside of a list.

157
00:10:40,140 --> 00:10:42,290
And you can do this as many times as you want.

158
00:10:42,450 --> 00:10:44,000
However be reasonable.

159
00:10:44,000 --> 00:10:47,570
You don't want to nest inside of a nest inside of monastic cetera.

160
00:10:47,760 --> 00:10:53,030
But if you want to grab an item from this list for example let's say you want to grab 200 just by itself.

161
00:10:53,250 --> 00:10:57,470
Well I know that this list completely is the third item.

162
00:10:57,480 --> 00:10:59,590
So that's 0 1 2.

163
00:10:59,820 --> 00:11:06,090
So I pass in two and I get back that list 100 200 and I can actually stack index calls meaning if I

164
00:11:06,090 --> 00:11:09,540
want to grab 200 will that index zero index one.

165
00:11:09,570 --> 00:11:14,610
So I just say this one shift enter and then I grab 200.

166
00:11:14,610 --> 00:11:18,990
So that's a nested list and that's the way I can actually grab stuff from a nested list.

167
00:11:18,990 --> 00:11:21,000
I can just stack these index calls.

168
00:11:21,060 --> 00:11:25,220
So that's going to be useful if you're working with a Matrix or something that has two mentions.

169
00:11:25,410 --> 00:11:27,480
Usually that's represented as a nested list.

170
00:11:27,480 --> 00:11:32,130
So we'll see a little bit of this throughout the course but it won't be anything too crazy.

171
00:11:33,330 --> 00:11:36,760
So that's the basics for all you really need to know about lists or arrays.

172
00:11:36,780 --> 00:11:42,630
Again they're just a sequence of items or elements that are in order meaning you can index them with

173
00:11:42,630 --> 00:11:43,520
a number.

174
00:11:43,920 --> 00:11:49,200
Now let's talk about dictionaries also known as hash tables and other languages.

175
00:11:49,200 --> 00:11:51,450
So dictionaries use this sort of notation.

176
00:11:51,450 --> 00:12:00,220
I'll say these equal to curly braces and then they have a key which is always a string there and then

177
00:12:00,220 --> 00:12:01,260
some sort of item.

178
00:12:01,270 --> 00:12:03,440
So this is known as a key value pair.

179
00:12:03,730 --> 00:12:12,390
So have key and then let's make a value one that we have a comma there and then we have key to colon

180
00:12:12,430 --> 00:12:15,920
and then some second value.

181
00:12:15,940 --> 00:12:21,090
So I run that and then if I want to access items from the dictionary I pass in the Keenum.

182
00:12:21,130 --> 00:12:25,620
So I want to do is access values based off of their key.

183
00:12:25,780 --> 00:12:30,760
So grab a key here key one that returns value 1 which makes sense.

184
00:12:30,760 --> 00:12:34,900
And if I ask for key to that I get back value to.

185
00:12:34,960 --> 00:12:39,820
So something to keep in mind that is sometimes confusing for beginners is that these hash tables or

186
00:12:39,940 --> 00:12:43,640
dictionaries in Python they do not retain any order.

187
00:12:43,660 --> 00:12:47,590
So unlike a list these guys don't retain any order.

188
00:12:47,620 --> 00:12:52,030
So whatever order happens to be printed out.

189
00:12:52,030 --> 00:12:54,250
So let's say I wanted to print out this dictionary.

190
00:12:54,310 --> 00:12:56,770
It may not actually be in the order that you would expect.

191
00:12:56,770 --> 00:13:03,940
So here I notice I get key to value to one value one even if I defined it one and then two.

192
00:13:03,940 --> 00:13:08,110
So again dictionaries don't retain any order and that really has to do with the way a hash table works

193
00:13:08,410 --> 00:13:10,940
which you don't actually need to understand for this course.

194
00:13:11,050 --> 00:13:13,980
The basic idea is these are just key value pairs.

195
00:13:14,140 --> 00:13:19,840
So instead of items being in a sequence they're matched up with key values as a pair.

196
00:13:19,930 --> 00:13:25,120
So you can easily access items based off their key and this is a really great way to store things where

197
00:13:25,120 --> 00:13:27,400
you need really quick access.

198
00:13:27,400 --> 00:13:28,090
All right.

199
00:13:28,650 --> 00:13:32,230
Let's move on to discuss booleans civilians are quite simple in Python.

200
00:13:32,240 --> 00:13:36,280
It's just either true of a capital-T or false for capital F.

201
00:13:36,300 --> 00:13:37,770
Not much more to it than that.

202
00:13:37,770 --> 00:13:44,310
Now as a quick know a lot of programming languages Python included have what's known as truthy which

203
00:13:44,310 --> 00:13:50,550
means if something is true or false see which essentially assigns some sort of truth or false behavior

204
00:13:50,850 --> 00:13:52,340
to a lot of objects.

205
00:13:52,350 --> 00:13:57,930
So for example if you're ever working with if statements which we'll discuss later on and you don't

206
00:13:57,930 --> 00:13:58,890
really want a boolean.

207
00:13:58,890 --> 00:14:02,790
You can also use numbers so zeros are treated as a false statement.

208
00:14:02,790 --> 00:14:08,390
So if you say if 0 it happens to be false and ones are treated as a true statement.

209
00:14:08,400 --> 00:14:14,580
So if one then it actually does something we don't see too much of that in the course but if we do see

210
00:14:14,580 --> 00:14:16,640
it I'll make sure to let you know.

211
00:14:17,250 --> 00:14:23,220
It's usually pretty obvious when you see it in actual coding but that's something I want you to be aware

212
00:14:23,220 --> 00:14:24,600
of.

213
00:14:24,600 --> 00:14:28,840
Now there's two more data structures I want to discuss that's tuples and sets.

214
00:14:28,860 --> 00:14:31,650
Tuples are very much like a list.

215
00:14:31,680 --> 00:14:36,480
There are a sequence of items and notice here that they're defined by using parentheses instead of these

216
00:14:36,540 --> 00:14:39,000
square brackets that we saw earlier.

217
00:14:39,030 --> 00:14:44,620
Now you might be wondering well why use a tuple versus a list will tuples are immutable.

218
00:14:44,620 --> 00:14:47,300
Meaning you can't reassign the items inside of them.

219
00:14:47,320 --> 00:14:54,460
So I have t of 0 and if I try to set this to new like I did for a list I will get a type error and it

220
00:14:54,460 --> 00:14:57,190
says tuple object does not support item assignment.

221
00:14:57,190 --> 00:15:02,740
So you want to use tuples when you want to make sure a user can't actually change anything inside of

222
00:15:02,740 --> 00:15:04,010
this sequence.

223
00:15:04,060 --> 00:15:06,660
So that's the use case of a tuple.

224
00:15:06,880 --> 00:15:13,810
And then finally the last major data structure of Python is the set looks a lot like a dictionary except

225
00:15:13,810 --> 00:15:15,310
there's no key value pairs.

226
00:15:15,490 --> 00:15:18,270
It's just this sequence of items.

227
00:15:18,340 --> 00:15:22,780
So a set is an unordered collection of unique elements.

228
00:15:22,780 --> 00:15:24,210
So what does that mean.

229
00:15:24,250 --> 00:15:32,020
It means since all the elements have to be unique if you add in multiple instances of an element inside

230
00:15:32,020 --> 00:15:38,670
of this set it's going to reduce this to just the unique elements which is 1 2 and 3.

231
00:15:38,670 --> 00:15:39,310
All right.

232
00:15:39,420 --> 00:15:43,740
That's really all we need to know as far as the basic data structures and we'll constantly be reviewing

233
00:15:43,740 --> 00:15:47,080
this sort of stuff as we continue on throughout the rest of the course.

234
00:15:47,130 --> 00:15:52,830
And a lot of the syntax we'll be using is mainly to have sparked data frames so this is all you really

235
00:15:52,830 --> 00:15:53,820
need to know.

236
00:15:53,940 --> 00:15:59,790
Coming up next we'll discuss comparison operators logic operators and then how Python deals with if

237
00:16:00,090 --> 00:16:05,120
LCF and L statements as well as certain loops like for loops and while loops.

238
00:16:05,130 --> 00:16:07,210
Thanks and I'll see you at the next lecture.
