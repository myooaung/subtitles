WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.050 --> 00:00:04.245
Now we know how to use relative units of measure.

00:00:04.245 --> 00:00:10.410
We can now apply them to our projects in places in the fixed pixel sizes.

00:00:10.410 --> 00:00:14.175
This is a big step towards our site being responsive,

00:00:14.175 --> 00:00:17.880
as it allows our content to be more fluid and fit

00:00:17.880 --> 00:00:21.030
the available screen space rather than being too

00:00:21.030 --> 00:00:25.005
small or cut-off like we've seen with our products earlier.

00:00:25.005 --> 00:00:29.520
We already have the body section at 80 percent,

00:00:29.520 --> 00:00:31.470
which you see at the top here,

00:00:31.470 --> 00:00:35.700
by setting it to be 80 percent of the available view port width.

00:00:35.700 --> 00:00:40.020
We can also do the same with the side bar and main sections too.

00:00:40.020 --> 00:00:43.635
There are a few ways which we can approach this.

00:00:43.635 --> 00:00:47.835
If we scroll down to the main and the size section,

00:00:47.835 --> 00:00:49.660
which you see here.

00:00:49.660 --> 00:00:53.885
Currently we have the main section at 608 pixels.

00:00:53.885 --> 00:00:56.825
The side bar are 270.

00:00:56.825 --> 00:00:59.825
We could go ahead and make up some new sizes,

00:00:59.825 --> 00:01:04.970
such as setting the main to be 70 percent and the side bar at 30 percent.

00:01:04.970 --> 00:01:08.285
Then this would take up the full width of the body.

00:01:08.285 --> 00:01:11.585
Or we can convert what we already have.

00:01:11.585 --> 00:01:14.435
You will often see a calculation.

00:01:14.435 --> 00:01:19.765
If we go ahead and add a comment in here, add this in.

00:01:19.765 --> 00:01:28.355
You will often see the conversion of target divided by context equals results.

00:01:28.355 --> 00:01:33.490
This is how we can convert a pixel size to a fluid size.

00:01:33.490 --> 00:01:36.675
Which means our sizes can then scale.

00:01:36.675 --> 00:01:39.650
This is how it works in practice.

00:01:39.650 --> 00:01:42.530
Let's add a new command just below.

00:01:42.530 --> 00:01:49.030
First of all, the target is the current width we have of 680.

00:01:49.030 --> 00:01:52.095
We then divide this by the context.

00:01:52.095 --> 00:01:58.265
The context is the 1000 pixels container which you had originally for the body.

00:01:58.265 --> 00:02:01.945
This works out to 0.68.

00:02:01.945 --> 00:02:10.320
The results of 0.68 is then multiplied by a 100 to get a percentage of 68 percent,

00:02:10.580 --> 00:02:13.170
this is how this looks.

00:02:13.170 --> 00:02:16.985
Since we had a nice round 1000 pixels body.

00:02:16.985 --> 00:02:19.220
The calculation is pretty simple,

00:02:19.220 --> 00:02:23.765
but it's still useful to know how to convert this for less rounded numbers.

00:02:23.765 --> 00:02:27.634
If we save that out to the browser and refresh,

00:02:27.634 --> 00:02:31.280
we don't see any difference because the size is just the same,

00:02:31.280 --> 00:02:35.075
but rather than a pixel value it's now a percentage.

00:02:35.075 --> 00:02:37.310
Back over to the CSS.

00:02:37.310 --> 00:02:40.475
We can also do the same with the assigned section.

00:02:40.475 --> 00:02:44.795
Again, because this is based on a thousand pixel container.

00:02:44.795 --> 00:02:48.745
This would then make this a nice round 27 percent.

00:02:48.745 --> 00:02:53.910
Change this, refresh, and as would expect,

00:02:53.910 --> 00:02:55.900
there isn't much of a difference.

00:02:55.900 --> 00:02:58.235
Content should now be more fluid.

00:02:58.235 --> 00:03:01.280
As we switch between 1,2 and 3 products.

00:03:01.280 --> 00:03:03.535
As we stretch the browser.

00:03:03.535 --> 00:03:06.990
Currently, you have three products alongside each other.

00:03:06.990 --> 00:03:10.380
If we make it a little smaller it goes down to two.

00:03:10.380 --> 00:03:14.430
Then even smaller it now goes on to its own row.

00:03:14.430 --> 00:03:17.105
If we make this smaller screen,

00:03:17.105 --> 00:03:21.950
just like that, we now see the products are now stacked on top of each other.

00:03:21.950 --> 00:03:25.025
This leads us on to this product section.

00:03:25.025 --> 00:03:29.045
We also want these individual products to resize too.

00:03:29.045 --> 00:03:34.565
Again, we could calculate these values exactly or we could select an appropriate size,

00:03:34.565 --> 00:03:36.980
such as 30 percent.

00:03:36.980 --> 00:03:39.264
Over to the product,

00:03:39.264 --> 00:03:42.900
rather than this fixed size of 210 pixels.

00:03:42.900 --> 00:03:45.150
Let's set this to be 30 percent,

00:03:45.150 --> 00:03:47.370
leaving three on each row.

00:03:47.370 --> 00:03:49.775
Let's refresh and see the difference.

00:03:49.775 --> 00:03:52.240
Okay, back to full size.

00:03:52.240 --> 00:03:54.780
We have our three products.

00:03:54.780 --> 00:03:57.800
Then we can see as we resize the browser,

00:03:57.800 --> 00:04:03.790
that these three products also get narrower and wider as the screen changes.

00:04:03.790 --> 00:04:08.765
If we make this really small and then scroll down to the products.

00:04:08.765 --> 00:04:11.570
These tools, however, cause some new problems.

00:04:11.570 --> 00:04:13.325
Like you can see here.

00:04:13.325 --> 00:04:16.235
Some elements can flow onto more lines,

00:04:16.235 --> 00:04:18.535
such as its text description.

00:04:18.535 --> 00:04:21.155
This is longer than this one here,

00:04:21.155 --> 00:04:25.810
meaning the height of the product is different to the rest.

00:04:25.810 --> 00:04:30.710
While we could go ahead and fix this by applying various CSS hacks,

00:04:30.710 --> 00:04:33.725
there is also a different approach we can use.

00:04:33.725 --> 00:04:39.200
This is to change layout for different sized devices using media queries.

00:04:39.200 --> 00:04:42.600
We'll look at how to apply these next.
