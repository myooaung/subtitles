WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:04.240
We're going to finish off this CSS section by looking at

00:00:04.240 --> 00:00:07.600
something which trip up a lot of new developers.

00:00:07.600 --> 00:00:10.870
This is the cascade and specificity.

00:00:10.870 --> 00:00:13.325
Let's begin with the cascade.

00:00:13.325 --> 00:00:19.805
The cascade ultimately determines which CSS styles are applied to an element.

00:00:19.805 --> 00:00:25.075
This is based on a number of factors which we'll look at in this video.

00:00:25.075 --> 00:00:29.245
For example, if you have multiple CSS selectors,

00:00:29.245 --> 00:00:31.855
all targeting a H1 elements,

00:00:31.855 --> 00:00:34.870
or if you have more than one style sheets,

00:00:34.870 --> 00:00:38.020
also with some rules for the H1 elements,

00:00:38.020 --> 00:00:40.380
which one will ultimately win?

00:00:40.380 --> 00:00:43.575
The answer is the most specific,

00:00:43.575 --> 00:00:47.330
rills will cascade down from the least or

00:00:47.330 --> 00:00:52.525
the most general rills through to the most specific rill for the elements.

00:00:52.525 --> 00:00:58.565
Probably the most general and simplest way to decide is the source order.

00:00:58.565 --> 00:01:03.080
If you have more than one selector pointing to the same elements,

00:01:03.080 --> 00:01:07.745
the last one in our source code will override over is before it.

00:01:07.745 --> 00:01:11.830
Lets go over to our CSS and see this in action.

00:01:11.830 --> 00:01:15.210
Let's target the H1 elements,

00:01:15.210 --> 00:01:17.920
which is the site title.

00:01:17.920 --> 00:01:21.545
Set the color to be any value such as red,

00:01:21.545 --> 00:01:25.250
and then add a second CSS property.

00:01:25.250 --> 00:01:28.800
Then set the text decoration to be underline.

00:01:28.900 --> 00:01:34.700
Then under this, we can also add a second H1 rill.

00:01:34.700 --> 00:01:39.250
Select any color or purple.

00:01:39.250 --> 00:01:43.289
Now we have two CSS selectors,

00:01:43.289 --> 00:01:45.615
both targeting the H1.

00:01:45.615 --> 00:01:50.125
Let's reload the browser and see which one takes effect.

00:01:50.125 --> 00:01:55.070
We can see we have this purple color and also the underline.

00:01:55.070 --> 00:01:58.430
This is because the code is red from top to bottom,

00:01:58.430 --> 00:02:03.250
meaning that this text decoration from here will still be used.

00:02:03.250 --> 00:02:09.030
Both these color value of red will then be overwritten with its value of purple,

00:02:09.030 --> 00:02:11.160
which appears after it.

00:02:11.160 --> 00:02:15.770
We can also see how this works over a need developer tools.

00:02:15.770 --> 00:02:19.165
If we right click and then inspect,

00:02:19.165 --> 00:02:25.230
and then if we select this header at the top of H1.

00:02:25.230 --> 00:02:29.645
Over on the right-hand side we can see the styles which apply.

00:02:29.645 --> 00:02:34.830
The selectors on the right are all applying to this H1.

00:02:35.260 --> 00:02:38.755
We will look at the order in which he's applying soon.

00:02:38.755 --> 00:02:43.030
But the thing to note here is this color red is being crossed out.

00:02:43.030 --> 00:02:46.730
Then the color purple is then taken effect.

00:02:46.730 --> 00:02:52.180
This source order also applies when we're running multiple style sheets.

00:02:52.180 --> 00:02:56.220
If we go over to our index.HTML,

00:02:56.220 --> 00:02:58.615
and then up to the top section.

00:02:58.615 --> 00:03:03.685
The bottom style sheet will always override any style sheets from above.

00:03:03.685 --> 00:03:06.560
This is the reason why we usually want to place

00:03:06.560 --> 00:03:09.800
our own custom style sheets down to the bottom,

00:03:09.800 --> 00:03:15.215
so we can add custom styles which will override any from above.

00:03:15.215 --> 00:03:19.820
The next thing to affect the cascade is specificity.

00:03:19.820 --> 00:03:23.110
This is how specific a selector is.

00:03:23.110 --> 00:03:28.770
If we go back over to our styles.CSS in our example here.

00:03:28.770 --> 00:03:31.095
Both selectors are H1,

00:03:31.095 --> 00:03:34.254
therefore they're equally specific.

00:03:34.254 --> 00:03:37.010
When this happens, as we've just seen,

00:03:37.010 --> 00:03:39.785
source order will take priority.

00:03:39.785 --> 00:03:44.970
Let's take a look at how we calculate how specific selectors are.

00:03:46.880 --> 00:03:51.005
Over on the left we have some examples of a selector.

00:03:51.005 --> 00:03:56.170
Then on the right-hand side we see how many points replied per selector.

00:03:56.170 --> 00:03:58.880
The first example on the first row,

00:03:58.880 --> 00:04:01.310
we see that H1 or a P,

00:04:01.310 --> 00:04:03.185
which is a standard element,

00:04:03.185 --> 00:04:07.530
has one points and that's one point per selector.

00:04:07.530 --> 00:04:11.485
Currently our H1 is only worth one point.

00:04:11.485 --> 00:04:15.035
On the second row, a class or an attribute,

00:04:15.035 --> 00:04:16.760
or even a pseudo-class,

00:04:16.760 --> 00:04:20.245
which we've already seen, counts for 10 points.

00:04:20.245 --> 00:04:23.930
On the third row, we see that an ID selector,

00:04:23.930 --> 00:04:29.155
such as the Product ID which you've already used is worth 100 points.

00:04:29.155 --> 00:04:33.840
Then we see at the bottom 1,000 points is for the inline styles.

00:04:33.840 --> 00:04:38.120
This is when we add the style attribute to HTML elements.

00:04:38.120 --> 00:04:43.835
We can see from this table here that the H1 just has a single point.

00:04:43.835 --> 00:04:47.150
This is what we are currently targeting in the CSS.

00:04:47.150 --> 00:04:51.560
On the second row we have dot container, H1.

00:04:51.560 --> 00:04:55.010
We still have our single-point with level one heading,

00:04:55.010 --> 00:04:59.840
which is here, we'll then also get 10 points for this class.

00:04:59.840 --> 00:05:05.335
This is more specific than H1 because we now have 11 points.

00:05:05.335 --> 00:05:08.060
Just below this we've seen before,

00:05:08.060 --> 00:05:11.215
that's an ID, has 100 points.

00:05:11.215 --> 00:05:12.905
Then just like we mentioned,

00:05:12.905 --> 00:05:15.410
a normal CSS selector,

00:05:15.410 --> 00:05:18.455
such as P, is a single point.

00:05:18.455 --> 00:05:21.230
This center was a 101 points,

00:05:21.230 --> 00:05:24.175
making it more valuable than the top two.

00:05:24.175 --> 00:05:27.745
We also mentioned that as pseudo-class such as hover,

00:05:27.745 --> 00:05:32.005
if we look at the first slide is worth 10 points.

00:05:32.005 --> 00:05:36.270
We have our 10 points here for the pseudo-class,

00:05:36.270 --> 00:05:38.685
and then we have two selectors,

00:05:38.685 --> 00:05:41.235
which is the LI and then the A,

00:05:41.235 --> 00:05:44.220
leaving a total value of 12.

00:05:44.220 --> 00:05:47.590
Back over to our CSS.

00:05:47.640 --> 00:05:50.890
Let's add some commands to the top of each of

00:05:50.890 --> 00:05:54.355
these and work out how many points we can only have.

00:05:54.355 --> 00:05:56.605
This is where if no hundreds,

00:05:56.605 --> 00:05:58.690
no tens, and no thousands.

00:05:58.690 --> 00:06:02.180
This is currently a single point,

00:06:02.540 --> 00:06:06.840
copy this and then paste this below.

00:06:06.840 --> 00:06:08.980
We have two equal elements,

00:06:08.980 --> 00:06:11.080
both worth single points.

00:06:11.080 --> 00:06:14.860
We can be more specific by adding a header.

00:06:14.860 --> 00:06:20.195
Let's add header H1 to the first selector.

00:06:20.195 --> 00:06:22.230
Now we have two elements.

00:06:22.230 --> 00:06:25.590
This now equals two points in total.

00:06:25.590 --> 00:06:28.140
Now this is more specific.

00:06:28.140 --> 00:06:31.610
Now we should have a color of red with the on time.

00:06:31.610 --> 00:06:36.660
Let's refresh, and there's our red header color.

00:06:36.660 --> 00:06:42.110
If we again make the match by adding a header to the second element,

00:06:42.110 --> 00:06:44.965
this is now also we have two points,

00:06:44.965 --> 00:06:49.750
and therefore the source order will then declare purple the winner.

00:06:49.750 --> 00:06:53.495
Refresh, and there we go.

00:06:53.495 --> 00:06:56.145
Let's try something else.

00:06:56.145 --> 00:07:01.485
If we go over to our index.HTML and then go down to the header.

00:07:01.485 --> 00:07:04.185
Let's add a class to this header,

00:07:04.185 --> 00:07:06.510
and header is fine.

00:07:06.510 --> 00:07:09.900
Then we can change the CSS.

00:07:09.900 --> 00:07:14.350
The first one for add the dot and make this a class.

00:07:14.350 --> 00:07:17.545
We still have the single elements selector here,

00:07:17.545 --> 00:07:19.325
which is worth one point.

00:07:19.325 --> 00:07:25.255
But this time we also have a class which is worth 10 points equaling 11.

00:07:25.255 --> 00:07:28.425
Now we have 11 points for the first one.

00:07:28.425 --> 00:07:31.730
We should expect the red color to win again.

00:07:31.730 --> 00:07:36.820
Save that, refresh, and we see that red wins.

00:07:36.820 --> 00:07:41.240
As we would expect, changing both to be a class with

00:07:41.240 --> 00:07:46.670
the dots will also make this 11 points and then refer back to the source order,

00:07:46.670 --> 00:07:48.655
meaning the color will be purple.

00:07:48.655 --> 00:07:50.835
It was about on ID.

00:07:50.835 --> 00:07:55.340
Let's go over to the index dot HTML rather than a class.

00:07:55.340 --> 00:08:00.945
We can change this to be an ID and then over to the style sheets.

00:08:00.945 --> 00:08:03.820
First of all, instead of a dot,

00:08:03.820 --> 00:08:07.855
we can add a harsh because this is an ID,

00:08:07.855 --> 00:08:11.205
and now we would have a total.

00:08:11.205 --> 00:08:14.235
This gives us a total of a 101,

00:08:14.235 --> 00:08:19.335
we get a 100 points for an ID and one for a single selector.

00:08:19.335 --> 00:08:24.810
Save that, refresh, and now red wins out.

00:08:24.810 --> 00:08:29.335
Hopefully this is starting to make sense now as we look at more examples.

00:08:29.335 --> 00:08:35.330
We've also seen in the slides that inline styles count for 1,000 points.

00:08:35.330 --> 00:08:39.085
This should be the most specific and win out.

00:08:39.085 --> 00:08:41.964
Let's go over to the H1,

00:08:41.964 --> 00:08:46.395
which we're currently working with as an inline style.

00:08:46.395 --> 00:08:51.180
This time we'll set the color property to be blue.

00:08:51.290 --> 00:08:54.675
This is now worth 1,000 points.

00:08:54.675 --> 00:08:56.940
This is worth a 101.

00:08:56.940 --> 00:08:59.970
Now the blue color should win out.

00:08:59.970 --> 00:09:03.980
Even though this is worth the most points and wins,

00:09:03.980 --> 00:09:06.845
there is one thing even more dominant,

00:09:06.845 --> 00:09:10.390
and this is the important declaration.

00:09:10.390 --> 00:09:13.714
Even though we have this inline style in the HTML,

00:09:13.714 --> 00:09:17.210
we can add these important declaration into

00:09:17.210 --> 00:09:21.325
the CSS to indicate that we want the style to win.

00:09:21.325 --> 00:09:28.810
After the reds, we can add a exclamation mark and then answer the important tag.

00:09:28.810 --> 00:09:34.065
Save that, and now we have the winner as reds.

00:09:34.065 --> 00:09:36.915
Even though the points value is even less,

00:09:36.915 --> 00:09:38.345
so the order wait,

00:09:38.345 --> 00:09:41.510
is this important declaration first,

00:09:41.510 --> 00:09:48.245
then second is how specific this selector i and then finally the source order.

00:09:48.245 --> 00:09:50.810
The only way to actually override

00:09:50.810 --> 00:09:56.465
this important declaration is to also add it again further down in the source order.

00:09:56.465 --> 00:10:00.210
Let's remove the style from here,

00:10:00.290 --> 00:10:06.770
and we can also remove this idea of header two, save that file.

00:10:06.770 --> 00:10:11.339
Then we can also go for two level one headings,

00:10:11.530 --> 00:10:14.980
and also remove the comments.

00:10:14.980 --> 00:10:17.900
Now these values above equal.

00:10:17.900 --> 00:10:24.590
If we now go ahead and add the important declaration to both the selectors,

00:10:24.590 --> 00:10:26.565
the source order should win.

00:10:26.565 --> 00:10:28.635
Over to the browser and refresh,

00:10:28.635 --> 00:10:31.705
and now we're back to the purple H1.

00:10:31.705 --> 00:10:36.440
It's also recommended to only use important as a last resort.

00:10:36.440 --> 00:10:40.235
We should use more specific selectors wherever possible.

00:10:40.235 --> 00:10:44.050
This is because it changes the way the cascade works.

00:10:44.050 --> 00:10:47.120
Debugging can often be more difficult,

00:10:47.120 --> 00:10:49.660
especially on larger projects.

00:10:49.660 --> 00:10:55.550
Now let's remove these two level one headings and then save that file,

00:10:55.550 --> 00:10:58.390
and restore our project back to normal.

00:10:58.390 --> 00:11:01.370
So these are the factors which determine which

00:11:01.370 --> 00:11:06.110
CSS rills finally make it into the browser for the user to see.

00:11:06.110 --> 00:11:08.480
It may seem quite complicated,

00:11:08.480 --> 00:11:14.550
but it really is just a case of understanding how much weight each selector carries.
