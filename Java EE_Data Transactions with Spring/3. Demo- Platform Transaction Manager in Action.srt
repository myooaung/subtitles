1
00:00:00,338 --> 00:00:05,336
I've opened the project in IntelliJ and navigated to the ReleaseService.

2
00:00:05,336 --> 00:00:06,381
java file.

3
00:00:06,381 --> 00:00:10,216
Let's see the PlatformTransactionManager in action to

4
00:00:10,216 --> 00:00:13,214
see the level of control it provides.

5
00:00:13,214 --> 00:00:18,139
Notice the @Transactional annotation is not used.

6
00:00:18,139 --> 00:00:20,616
Let's scroll down to line 32.

7
00:00:20,616 --> 00:00:23,883
I'm autowiring the transactionManager.

8
00:00:23,883 --> 00:00:28,388
And let's look at the scheduleRelease method here on line 45.

9
00:00:28,388 --> 00:00:32,884
I'm setting up the TransactionDefinition on line 47 and

10
00:00:32,884 --> 00:00:35,599
getting a transactionStatus object.

11
00:00:35,599 --> 00:00:42,542
And now notice I'm calling the getTransaction method to start the transaction.

12
00:00:42,542 --> 00:00:45,412
I'm creating the tickets on line 51,

13
00:00:45,412 --> 00:00:49,269
and I'm assigning them to a release on line 52.

14
00:00:49,269 --> 00:00:54,066
Notice I explicitly call commit on line 53.

15
00:00:54,066 --> 00:00:57,872
And in the event of a RuntimeException, I'm catching it,

16
00:00:57,872 --> 00:00:59,685
and I'm calling rollback.

17
00:00:59,685 --> 00:01:04,517
So notice as the developer, I explicitly commit the transaction,

18
00:01:04,517 --> 00:01:07,940
and I explicitly roll back the transaction.

19
00:01:07,940 --> 00:01:11,344
This is a prime example of programmatic transaction management,

20
00:01:11,344 --> 00:01:13,994
the level of control it provides.

21
00:01:13,994 --> 00:01:17,519
So let's navigate to Postman and test this out.

22
00:01:17,519 --> 00:01:20,572
So let's test the error case where we are assigning

23
00:01:20,572 --> 00:01:23,319
tickets to a release that doesn't exist.

24
00:01:23,319 --> 00:01:26,091
We have that Internal Server Error as expected.

25
00:01:26,091 --> 00:01:28,844
Let's navigate to our H2 console.

26
00:01:28,844 --> 00:01:30,560
Click Connect.

27
00:01:30,560 --> 00:01:32,666
Let's see what's in our ticket table.

28
00:01:32,666 --> 00:01:32,999
Nothing.

29
00:01:32,999 --> 00:01:37,331
So that is what we expect because we are rolling back the data.

30
00:01:37,331 --> 00:01:40,488
Now let's navigate back to Postman.

31
00:01:40,488 --> 00:01:45,325
And let's test the case that does work.

32
00:01:45,325 --> 00:01:47,883
So this is the case where we are assigning tickets to

33
00:01:47,883 --> 00:01:50,921
the release ID of 1 that does exist.

34
00:01:50,921 --> 00:01:52,659
Let's click Send.

35
00:01:52,659 --> 00:01:56,715
We see a status of 200 OK.

36
00:01:56,715 --> 00:01:59,269
Let's navigate back to our H2 console,

37
00:01:59,269 --> 00:02:03,877
and let's see what exists in our ticket table.

38
00:02:03,877 --> 00:02:11,054
And as we expected, four tickets with a status of Completed.

39
00:02:11,054 --> 00:02:15,000
And let's see them assigned to releases. Perfect!

