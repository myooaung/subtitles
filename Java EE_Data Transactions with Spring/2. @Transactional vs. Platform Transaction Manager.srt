1
00:00:00,000 --> 00:00:02,280
When you need fine-grained control over transactions,

2
00:00:02,280 --> 00:00:06,888
and you have a small number of transactional operations,

3
00:00:06,888 --> 00:00:09,444
use programmatic transaction management.

4
00:00:09,444 --> 00:00:11,529
Let's talk about another method of programmatic

5
00:00:11,529 --> 00:00:15,219
transaction management that Spring provides,

6
00:00:15,219 --> 00:00:17,496
the PlatformTransactionManager.

7
00:00:17,496 --> 00:00:21,143
This declarative code is very simple as it handles

8
00:00:21,143 --> 00:00:23,538
transaction management for developers.

9
00:00:23,538 --> 00:00:26,706
This makes the code very easy to maintain and evolve.

10
00:00:26,706 --> 00:00:30,724
This is why the Spring team recommends this approach over

11
00:00:30,724 --> 00:00:33,729
programmatic transaction management.

12
00:00:33,729 --> 00:00:38,825
Now there are times when programmatic transaction management and the

13
00:00:38,825 --> 00:00:42,164
flexibility that comes along with it is needed.

14
00:00:42,164 --> 00:00:45,109
We've seen using the transaction template.

15
00:00:45,109 --> 00:00:50,599
Now let's look at another method using the PlatformTransactionManager directly.

16
00:00:50,599 --> 00:00:51,940
With PlatformTransactionManager,

17
00:00:51,940 --> 00:00:57,010
you see that we have even more control over transactions than when using

18
00:00:57,010 --> 00:01:00,435
the other programmatic method transactionTemplate.

19
00:01:00,435 --> 00:01:06,431
We decide when to start a transaction, commit, or roll back.

20
00:01:06,431 --> 00:01:10,865
We ask transactionManager to start a new transaction with that

21
00:01:10,865 --> 00:01:14,470
definition by calling the getTransaction method.

22
00:01:14,470 --> 00:01:18,320
The return value is a transactionStatus object to

23
00:01:18,320 --> 00:01:20,306
keep track of the transactionStatus.

24
00:01:20,306 --> 00:01:21,965
If the transaction is successful,

25
00:01:21,965 --> 00:01:25,240
we will ask the transactionManager to commit this

26
00:01:25,240 --> 00:01:28,912
transaction by passing in the transactionStatus.

27
00:01:28,912 --> 00:01:31,518
If there is an error during the process,

28
00:01:31,518 --> 00:01:34,289
the schedule release method will throw a RuntimeException,

29
00:01:34,289 --> 00:01:43,000
in which case we will catch the exception and roll back the transaction. Let's see this in action.

