1
00:00:00,672 --> 00:00:04,346
Transaction management is a useful feature that the Spring

2
00:00:04,346 --> 00:00:07,171
Framework makes available out of the box.

3
00:00:07,171 --> 00:00:10,750
Spring provides support for automatically committing or

4
00:00:10,750 --> 00:00:13,510
rolling back transactions when they fail.

5
00:00:13,510 --> 00:00:18,552
There are several different APIs that help developers manage transactions.

6
00:00:18,552 --> 00:00:22,618
The advantages of using Spring to manage transactions is that it provides

7
00:00:22,618 --> 00:00:27,367
a consistent programming model across all of the APIs.

8
00:00:27,367 --> 00:00:32,195
What do I really mean when I say Spring provides a consistent programming model?

9
00:00:32,195 --> 00:00:38,123
Well, let's say you're currently using JDO to help manage your transactions,

10
00:00:38,123 --> 00:00:42,612
and one day down the road you want to change to Hibernate.

11
00:00:42,612 --> 00:00:44,969
Well, if you're not using Spring,

12
00:00:44,969 --> 00:00:49,179
you'd have to make coding changes to support the migration because JDO and

13
00:00:49,179 --> 00:00:53,031
Hibernate have different APIs for transaction management.

14
00:00:53,031 --> 00:00:56,808
If you're using Spring, then coding changes aren't required.

15
00:00:56,808 --> 00:01:01,067
Spring provides a uniform API that is simpler for programmatic

16
00:01:01,067 --> 00:01:05,028
transaction management than other complex APIs.

17
00:01:05,028 --> 00:01:07,015
Let's see an example of this.

18
00:01:07,015 --> 00:01:10,897
This code contains manual transaction management.

19
00:01:10,897 --> 00:01:14,678
The developer is responsible for beginning the transaction,

20
00:01:14,678 --> 00:01:19,941
and the developer is also responsible for committing the transaction.

21
00:01:19,941 --> 00:01:21,814
It is all very manual.

22
00:01:21,814 --> 00:01:25,304
Now let's see this code using Spring transaction management.

23
00:01:25,304 --> 00:01:29,287
This second piece of code is lightweight and flexible and

24
00:01:29,287 --> 00:01:31,773
lets Spring handle the transaction.

25
00:01:31,773 --> 00:01:36,255
Notice the @Transactional annotation.

26
00:01:36,255 --> 00:01:43,175
Let's say we needed to execute saveTicket as a part of complex transactions.

27
00:01:43,175 --> 00:01:46,507
The first piece of code that has the manual transaction

28
00:01:46,507 --> 00:01:50,419
management places a lot of burden on the developer.

29
00:01:50,419 --> 00:01:53,240
But using Spring in the second chunk of code,

30
00:01:53,240 --> 00:01:56,526
propagations of the transactions work smoothly.

31
00:01:56,526 --> 00:02:00,423
In this example where we have to first save a ticket,

32
00:02:00,423 --> 00:02:03,857
assign it to a release, and do other stuff,

33
00:02:03,857 --> 00:02:07,719
the automatic rollback happens in the case of exception.

34
00:02:07,719 --> 00:02:11,450
Spring makes all of this possible by providing support for

35
00:02:11,450 --> 00:02:14,467
programmatic and declarative transaction management.

36
00:02:14,467 --> 00:02:17,042
Going back to the first chunk of code,

37
00:02:17,042 --> 00:02:20,796
this is considered programmatic transaction management.

38
00:02:20,796 --> 00:02:25,285
The application code begins a transaction and then performs some

39
00:02:25,285 --> 00:02:28,949
operations against one or more resource managers.

40
00:02:28,949 --> 00:02:33,363
The second chunk of code is considered declarative transaction management.

41
00:02:33,363 --> 00:02:37,072
The underlying transaction manager should intercept resource

42
00:02:37,072 --> 00:02:41,688
manager requests made by the application and perform the

43
00:02:41,688 --> 00:02:44,686
necessary transaction management, begin,

44
00:02:44,686 --> 00:02:48,304
suspend, commit, or rollback.

45
00:02:48,304 --> 00:02:52,213
Declarative transaction management can also include the specification of

46
00:02:52,213 --> 00:02:56,577
transactional parameters such as isolation levels.

47
00:02:56,577 --> 00:02:57,828
When possible,

48
00:02:57,828 --> 00:03:01,792
declarative transactions are a better choice since they allow the

49
00:03:01,792 --> 00:03:04,579
container to manage the transaction for you.

50
00:03:04,579 --> 00:03:07,070
And this saves you from having to put transaction

51
00:03:07,070 --> 00:03:10,727
management calls into your application code.

52
00:03:10,727 --> 00:03:13,910
Declarative transaction management can lead to much cleaner

53
00:03:13,910 --> 00:03:17,725
separation of business logic and transaction code.

54
00:03:17,725 --> 00:03:26,000
And applications written to depend on declarative transaction management can be much easier to maintain and evolve.

