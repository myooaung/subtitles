1
00:00:00,000 --> 00:00:00,499
Hi!

2
00:00:00,499 --> 00:00:03,496
This is Kesha Williams from Pluralsight.

3
00:00:03,496 --> 00:00:06,651
Welcome to my course, Data Transactions with Spring.

4
00:00:06,651 --> 00:00:09,780
Spring transaction management is one of the most widely used and

5
00:00:09,780 --> 00:00:12,719
important features of the Spring Framework.

6
00:00:12,719 --> 00:00:15,465
Let's learn when to use programmatic transaction management

7
00:00:15,465 --> 00:00:18,335
over declarative transaction management,

8
00:00:18,335 --> 00:00:20,902
and vice versa.

9
00:00:20,902 --> 00:00:25,840
We've seen both programmatic and declarative transaction management.

10
00:00:25,840 --> 00:00:27,510
Now I'm sure you're thinking,

11
00:00:27,510 --> 00:00:31,225
"Given how easy declarative transaction management is,

12
00:00:31,225 --> 00:00:33,927
why would I ever want to use programmatic transaction

13
00:00:33,927 --> 00:00:37,236
management and have all of the extra manual work?

14
00:00:37,236 --> 00:00:41,237
" Let's talk about why you would want to use programmatic transaction

15
00:00:41,237 --> 00:00:44,665
management over declarative transaction management,

16
00:00:44,665 --> 00:00:46,979
and vice versa.

17
00:00:46,979 --> 00:00:49,518
Sometimes declarative transaction management doesn't

18
00:00:49,518 --> 00:00:53,533
quite give us the flexibility we need.

19
00:00:53,533 --> 00:00:57,685
Programmatic transaction management allows developers to manage

20
00:00:57,685 --> 00:01:03,870
transactions via the code giving developers complete control.

21
00:01:03,870 --> 00:01:09,180
It's also useful when you have minimal transaction logic.

22
00:01:09,180 --> 00:01:12,187
Programmatic transaction management is very flexible,

23
00:01:12,187 --> 00:01:17,071
but it can be difficult to maintain as it tightly

24
00:01:17,071 --> 00:01:20,641
couples transaction and business logic.

25
00:01:20,641 --> 00:01:24,648
Programmatic transaction management provides us fine-grained control over

26
00:01:24,648 --> 00:01:28,890
transaction management giving us extreme flexibility.

27
00:01:28,890 --> 00:01:35,140
But like I said, it is difficult to maintain and, well, boilerplate at times.

28
00:01:35,140 --> 00:01:39,999
Declarative transaction management allows developers to manage

29
00:01:39,999 --> 00:01:43,106
transactions via configuration and annotations,

30
00:01:43,106 --> 00:01:46,186
but it is less flexible.

31
00:01:46,186 --> 00:01:51,989
It does allow developers to separate transaction logic from business logic,

32
00:01:51,989 --> 00:01:55,438
which makes it easy to maintain.

33
00:01:55,438 --> 00:01:59,047
Boilerplate code is kept away from the business logic.

34
00:01:59,047 --> 00:02:04,444
It's preferred when working with large amounts of transaction logic.

35
00:02:04,444 --> 00:02:12,000
Declarative transaction management allows the container to manage the transaction for you.

