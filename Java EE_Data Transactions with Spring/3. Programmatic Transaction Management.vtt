WEBVTT
1
00:00:00.469 --> 00:00:03.198
I'm sure you've researched transaction management in Spring,

2
00:00:03.198 --> 00:00:06.847
and you've come across the term transaction template,

3
00:00:06.847 --> 00:00:10.442
or maybe even the platform transaction manager.

4
00:00:10.442 --> 00:00:12.516
These are used with programmatic transaction management,

5
00:00:12.516 --> 00:00:15.892
and we will see these in action later.

6
00:00:15.892 --> 00:00:20.464
Just know that the transaction template is similar to other Spring

7
00:00:20.464 --> 00:00:24.021
templates and that Spring makes available several implementations

8
00:00:24.021 --> 00:00:28.506
of the platform transaction manager interface for handling

9
00:00:28.506 --> 00:00:32.510
transactions across Hibernate, JDBC, JPA,

10
00:00:32.510 --> 00:00:35.074
JMS, and more.

11
00:00:35.074 --> 00:00:39.251
In fact, there are several transaction managers available in Spring,

12
00:00:39.251 --> 00:00:44.196
the platform transaction manager, the Jta transaction manager,

13
00:00:44.196 --> 00:00:48.605
the Hibernate transaction manager, the DataSource transaction manager,

14
00:00:48.605 --> 00:00:53.316
and the Jpa transaction manager, etc.

15
00:00:53.316 --> 00:00:57.442
I especially like the HibernateTransactionManager because it goes

16
00:00:57.442 --> 00:01:02.318
back to the concept of the uniform API that uses the features of

17
00:01:02.318 --> 00:01:09.000
Hibernate transactions while maintaining the advantage of Spring's unified transaction abstraction.

