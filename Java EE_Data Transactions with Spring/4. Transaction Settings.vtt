WEBVTT
1
00:00:00.416 --> 00:00:03.062
As with declarative transaction management,

2
00:00:03.062 --> 00:00:07.359
you can specify transaction settings such as the propagation mode,

3
00:00:07.359 --> 00:00:11.246
the isolation level, and the timeout, etc.

4
00:00:11.246 --> 00:00:14.727
This can be set up in the constructor.

5
00:00:14.727 --> 00:00:19.129
So here we are setting our PropagationBehaviorName to PROPAGATION_REQUIRES_NEW,

6
00:00:19.129 --> 00:00:27.261
and we are setting the readOnly flag to true.

7
00:00:27.261 --> 00:00:31.892
The TransactionStatus class represents the status of a transaction.

8
00:00:31.892 --> 00:00:34.705
Transactional code can use this to retrieve status

9
00:00:34.705 --> 00:00:37.498
information and to programmatically request a rollback

10
00:00:37.498 --> 00:00:40.043
like we have done in the above code.

11
00:00:40.043 --> 00:00:43.341
The TransactionTemplate will trigger a transaction rollback if

12
00:00:43.341 --> 00:00:48.271
the callback code throws a runtime exception or if it sets the

13
00:00:48.271 --> 00:00:51.295
transaction to RollbackOnly via the TransactionStatus argument

14
00:00:51.295 --> 00:00:53.051
to the callback method.

15
00:00:53.051 --> 00:00:57.126
Otherwise, it will automatically commit the transaction.

16
00:00:57.126 --> 00:01:01.050
The TransactionStatus object is used to roll back the transaction.

17
00:01:01.050 --> 00:01:05.526
This is caused by calling setRollbackOnly.

18
00:01:05.526 --> 00:01:09.354
If the doInTransactionWithoutResult method completes successfully,

19
00:01:09.354 --> 00:01:16.000
then the transaction will be committed. Let's see this in action.

