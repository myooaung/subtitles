1
00:00:00,185 --> 00:00:04,411
The @EnableTransactionManagement annotation enables Spring's

2
00:00:04,411 --> 00:00:07,831
annotation-driven transaction management capability.

3
00:00:07,831 --> 00:00:10,220
However, when using Spring Boot,

4
00:00:10,220 --> 00:00:13,672
transaction management is automatically configured for us.

5
00:00:13,672 --> 00:00:16,017
When looking at the sample code,

6
00:00:16,017 --> 00:00:21,485
you will see that the @Transactional annotation works without having to

7
00:00:21,485 --> 00:00:25,539
include the @EnableTransactionManagement annotation,

8
00:00:25,539 --> 00:00:27,824
and declarative transaction management works,

9
00:00:27,824 --> 00:00:33,602
although we haven't defined or configured a platform transaction manager.

10
00:00:33,602 --> 00:00:36,330
The case study for this project uses Spring Boot,

11
00:00:36,330 --> 00:00:41,983
and we have added Spring Data JPA in our class path via our pom.

12
00:00:41,983 --> 00:00:42,947
xml file.

13
00:00:42,947 --> 00:00:48,233
Due to this dependency, Spring Boot does a lot for us behind the scenes.

14
00:00:48,233 --> 00:00:51,163
Spring registers a transaction manager for us,

15
00:00:51,163 --> 00:00:54,942
in this case a JPA transaction manager.

16
00:00:54,942 --> 00:01:01,090
It also takes care of the Datasource, entity manager, repositories, etc.

17
00:01:01,090 --> 00:01:06,442
And calls on Spring Data repositories are by default surrounded by transaction.

18
00:01:06,442 --> 00:01:08,738
If Spring Data finds an existing transaction,

19
00:01:08,738 --> 00:01:11,962
the existing transaction will be reused.

20
00:01:11,962 --> 00:01:15,278
Otherwise, a new transaction is created.

21
00:01:15,278 --> 00:01:18,154
Just remember when you're not using Spring Boot,

22
00:01:18,154 --> 00:01:23,138
the @Transactional annotation within your code will only be evaluated when

23
00:01:23,138 --> 00:01:28,473
you use the @EnableTransactionManagement annotation.

24
00:01:28,473 --> 00:01:31,704
You can easily trace transaction behavior by adding the

25
00:01:31,704 --> 00:01:33,601
following property to your application.

26
00:01:33,601 --> 00:01:35,162
properties file.

27
00:01:35,162 --> 00:01:45,000
This is where we set the logging level to TRACE. You can easily get access to the transaction manager by autowiring it.

