WEBVTT
1
00:00:01.189 --> 00:00:04.964
The demonstration vehicle for this course will be based on a use

2
00:00:04.964 --> 00:00:08.207
case from Keysoft Inc., a fictitious company,

3
00:00:08.207 --> 00:00:13.893
that developed an award-winning bug tracking system called TrackZilla.

4
00:00:13.893 --> 00:00:18.742
TrackZilla is a cloud-based web application that tracks defects and

5
00:00:18.742 --> 00:00:22.339
enhancement requests for software applications.

6
00:00:22.339 --> 00:00:27.325
TrackZilla has a global reach with millions of users around the globe.

7
00:00:27.325 --> 00:00:30.705
This system has shown stability issues and users

8
00:00:30.705 --> 00:00:33.419
have complained about missing data.

9
00:00:33.419 --> 00:00:36.951
The development team is tasked with uncovering the bugs and

10
00:00:36.951 --> 00:00:41.015
using Spring to manage transactions and effectively handle

11
00:00:41.015 --> 00:00:45.247
rollbacks in the event of a system failure.

12
00:00:45.247 --> 00:00:45.885
During the course,

13
00:00:45.885 --> 00:00:50.093
you'll walk through the use case of updating TrackZilla to effectively

14
00:00:50.093 --> 00:00:54.843
handle transactions by using either declarative transaction management

15
00:00:54.843 --> 00:00:58.240
or programmatic transaction management.

16
00:00:58.240 --> 00:01:02.280
Along with the basic knowledge highlighted in the learning path,

17
00:01:02.280 --> 00:01:06.560
there are prerequisite tools needed on your machine.

18
00:01:06.560 --> 00:01:07.499
JDK 1.

19
00:01:07.499 --> 00:01:11.726
8 or later, a favorite text editor or IDE.

20
00:01:11.726 --> 00:01:14.290
For this course, I will use IntelliJ.

21
00:01:14.290 --> 00:01:16.850
But tools like Eclipse will also work.

22
00:01:16.850 --> 00:01:17.654
Maven 3.

23
00:01:17.654 --> 00:01:18.861
0 or above.

24
00:01:18.861 --> 00:01:23.198
This runs in the IDE, but you can run from the command line,

25
00:01:23.198 --> 00:01:25.662
which will require you to install it.

26
00:01:25.662 --> 00:01:30.634
Git and Postman to help test the APIs.

27
00:01:30.634 --> 00:01:34.046
Let's visually review how the code is set up.

28
00:01:34.046 --> 00:01:37.998
There's the Spring RestController, a service layer,

29
00:01:37.998 --> 00:01:44.463
a data access layer, domain objects, and an H2 in-memory database.

30
00:01:44.463 --> 00:01:54.000
The project uses Spring @RestController, Spring Data JPA, Spring Boot, H2, and also JUnit.

