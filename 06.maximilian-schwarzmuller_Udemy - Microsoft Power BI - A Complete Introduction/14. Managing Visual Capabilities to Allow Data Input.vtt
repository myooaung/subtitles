WEBVTT

00:02.080 --> 00:09.140
In the last lectures, we finally got our application or our chart here to display our own static data.

00:09.330 --> 00:16.610
Now displaying static data is nice but it would be nicer if we as a user could enter some values into

00:16.610 --> 00:17.400
our chart.

00:17.570 --> 00:23.270
Right now if I do drag this in here, we do have these regions that doesn't really do anything,

00:23.270 --> 00:28.920
so somehow our chart is not working as expected, it just displays our static data.

00:28.970 --> 00:31.780
So let's change this now and for this,

00:31.790 --> 00:38.040
we need to connect the sections here where we allow the user to add data to our code

00:38.120 --> 00:42.020
and then of course do something in our code to handle that data correctly.

00:42.350 --> 00:45.990
Let's start with connecting these two input fields.

00:46.160 --> 00:51.930
We already have them, category data and measure data and if we have a look at our code, it's here in the

00:51.930 --> 00:57.780
capabilities of JSON file that we configure this because this configures the capabilities of our chart,

00:57.800 --> 01:00.590
so which features we want exposed to the user.

01:00.590 --> 01:07.090
Now if we have a look at it, here dataRoles and dataViewMappings, that's important to us. dataRoles

01:07.100 --> 01:12.490
is what we display to the user basically, it's this display name which the user sees.

01:12.680 --> 01:22.860
So if we change the category data here to maybe legend or axis and the measure data here, we change

01:22.860 --> 01:30.090
this to let's say value and I hit save and go back and you reload this chart,

01:30.100 --> 01:33.110
you see that it changed to legend and value here too,

01:33.160 --> 01:40.510
still it wouldn't work though. The other fields here are internal mappings, name simply means how we can use it

01:40.510 --> 01:47.670
internally and kind is important. Grouping means this is a discrete value basically,

01:47.700 --> 01:49.550
so this is by which our data is grouped

01:49.600 --> 01:55.470
whereas measure means this is the value we can actually work with, we want to display so to say.

01:55.480 --> 02:04.300
So in our sales example, grouping, the category here would basically be our regions whereas the measure is

02:04.390 --> 02:13.750
our numbers. dataViewMappings is how we use that internally, here we map this to an object basically which

02:13.750 --> 02:21.370
has the categorical node or property which then in turn has the categories property where we will have

02:21.400 --> 02:22.430
all the categories,

02:22.450 --> 02:24.830
that's what we defined with for in here

02:25.120 --> 02:32.770
and we have the values property in categorical 2 where we basically bind it to an array of measures,

02:32.770 --> 02:38.320
so that we have an array of values. And this might look complex to you and of course you can dive much

02:38.320 --> 02:46.540
deeper into this and actually have a look at the API folder and here at the schema for the capabilities

02:46.540 --> 02:53.080
if you want to really dive super hardcore into this and understand what you can define, for this Getting

02:53.080 --> 02:54.540
Started section,

02:54.550 --> 02:55.760
this is all we need

02:55.840 --> 02:59.440
and often times, this is all you might need.

02:59.470 --> 03:02.940
However let's now have a look at how we can use this.

03:02.950 --> 03:08.560
We have a legend and we have a value and we map it to this object where we then will be able to access

03:08.560 --> 03:09.160
it.

03:09.610 --> 03:15.840
Well we need to access it in our visual.ts file and we need to access it in the update method

03:15.940 --> 03:21.040
because that again is where we react to changes in the sizing or in data.
