WEBVTT

00:02.260 --> 00:06.120
In the last lecture, we installed d3 and the d3 types,

00:06.230 --> 00:09.320
let's now use this package to create a shape.

00:09.680 --> 00:17.450
Now in my own visual, I will get rid of everything I have in these functions, so of all the code so that

00:17.450 --> 00:21.410
I just have the class, the constructor and the update method.

00:21.410 --> 00:29.510
Now in my class, I want to add a new private property which I'll name svg which will hold a reference

00:29.510 --> 00:31.330
to this root svg element

00:31.340 --> 00:38.550
I'm about to create. Therefore I can define the type and this will be d3 selection

00:38.630 --> 00:44.460
and this is a generic type which means a selection can hold all kinds of HTML elements,

00:44.510 --> 00:46.550
it will be an svg element,

00:46.850 --> 00:52.070
so I'm basically saying this svg property will hold a reference to the svg element

00:52.100 --> 00:53.870
I'm about to create.

00:54.020 --> 00:57.890
Now I will create this element in the constructor because I want to create it right at the start

00:57.890 --> 00:59.530
when this visual is created.

00:59.870 --> 01:03.460
So therefore here we can say this.svg equals

01:03.710 --> 01:10.330
and now we use d3 and use the select method to select a part in our HTML code.

01:10.340 --> 01:18.530
Now don't forget our HTML code or our wrapping HTML element can be accessed on this options element.

01:18.650 --> 01:24.860
We can get this on our options object which is passed to the constructor by Power BI automatically and

01:24.860 --> 01:32.840
there, it's this element property, that is the HTML element which will wrap our whole visual. So with that, we know

01:32.840 --> 01:34.940
where we want to add the svg element,

01:35.090 --> 01:43.460
now of course we can call append to create a new HTML tag and you simply pass a string where you define

01:43.460 --> 01:46.880
which tag that should be. That could be a div, that could be a paragraph

01:47.030 --> 01:51.010
but here it's an svg element because that is what we want to create.

01:51.020 --> 01:58.910
So with that, d3 will create this new svg element and add it to our wrapping element, our wrapping

01:58.970 --> 02:00.660
HTML element,

02:00.680 --> 02:05.300
I also want to make sure that a class is assigned here.

02:05.300 --> 02:13.310
So here I will assign a class of bar chart to this svg element and I'll add true to make sure that

02:13.310 --> 02:16.770
it is added and not removed or anything like that.

02:16.940 --> 02:24.680
With that, this svg element is created, is added to our chart but we wouldn't be able to see anything

02:24.680 --> 02:27.130
because it's an empty svg element,

02:27.170 --> 02:31.420
so we want to render a shape and that should be done with the update method.

02:31.520 --> 02:37.010
It is called initially once this has been created for the first time and then whenever we change something

02:37.370 --> 02:44.420
and we definitely typically want to update our shapes whenever we resize the chart or anything like

02:44.420 --> 02:45.210
that.

02:45.350 --> 02:49.150
Therefore it is in the update method that I will take care about

02:49.190 --> 02:51.730
how this actually looks like. Here

02:51.920 --> 02:55.490
I will first extract the width and height of this tile

02:55.490 --> 02:56.720
we place our chart in,

02:56.750 --> 03:04.300
so of our wrapping HTML element and I can do this by accessing options here in the update method

03:04.370 --> 03:06.550
and this is a different options object

03:06.560 --> 03:08.300
than in the constructor.

03:08.310 --> 03:13.050
This options object here gives us information about the update,

03:13.070 --> 03:18.750
so here for me it's interesting to access the viewport which is the dimensions of our tile

03:18.890 --> 03:23.050
and then width here or of course also the same for height

03:23.150 --> 03:30.540
so that we actually know how much width and height do we have available for our visual here.

03:30.590 --> 03:32.360
So that's what I'll retrieve here

03:32.450 --> 03:37.970
and then I can access my svg which is why I stored it in this property so that I can access it from everywhere

03:37.970 --> 03:46.820
in this class and call attr, this attr command to assign some attributes to it.

03:47.020 --> 03:53.930
Here, the attributes I want to assign is width which I'll set equal to this width variable where I have

03:53.930 --> 04:01.430
the extracted width from the viewport and height to resize our wrapping svg element which we created

04:01.430 --> 04:03.570
in the constructor appropriately.

04:03.710 --> 04:11.210
We still wouldn't see anything, so let's add a shape now. Here I'll simply create a simple rectangle by

04:11.210 --> 04:13.640
accessing my svg element

04:13.790 --> 04:20.100
and there, I want to call append and I will append a rect tag.

04:20.180 --> 04:21.250
This can be done

04:21.290 --> 04:22.220
in a svg, this

04:22.240 --> 04:23.930
is a rectangle then.

04:24.440 --> 04:30.810
I will call attr then and this is just done in a new line to make it easier to read as up here,

04:30.830 --> 04:39.000
so this is still applied to this first line and the attributes here also are width,

04:39.220 --> 04:46.370
let's set this to 50 maybe and that will be 50px automatically and a height of 50 and maybe let's

04:46.370 --> 04:49.870
set a fill color of red to make it red.

04:50.090 --> 04:56.710
Now with that, we should have added this rectangle to our svg and we should have made this rectangle

04:56.710 --> 04:58.660
red and have a,

04:58.790 --> 05:06.950
well it should be a square, 50 width 50 high. If I now save this with this still running in the command prompt,

05:06.950 --> 05:12.850
if we go to the bar chart and reload it, we actually see our red square here.

05:13.160 --> 05:20.450
And this is our very first basic custom visual with our own shape, of course not really displaying

05:20.480 --> 05:21.510
any data and also

05:21.530 --> 05:27.780
not changing if I resize this here but it is a first step.

05:27.780 --> 05:30.050
Now let's continue working on this.
