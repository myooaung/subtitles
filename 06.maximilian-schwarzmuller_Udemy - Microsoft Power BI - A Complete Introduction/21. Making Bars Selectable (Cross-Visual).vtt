WEBVTT

00:02.350 --> 00:04.250
So in the last lecture, we added color,

00:04.300 --> 00:09.940
now it would be nice if we could select a single data point, a single bar and update other charts in our

00:09.940 --> 00:12.670
report based on that selection.

00:12.670 --> 00:21.160
It's relatively simple to do that, as before, I will start in my interface because for each bar chart data point,

00:21.160 --> 00:25.510
so each bar, I want to determine whether it has been selected or not.

00:25.510 --> 00:33.470
So I will add a selection ID property here and this will be of type ISelectionID, an interface provided

00:33.460 --> 00:35.790
by Power BI by the Power BI

00:35.800 --> 00:41.230
visual developer tools because of course it's a common case that we want to be able to select individual

00:41.230 --> 00:47.830
parts or data points in general. So now with that added to the interface, we have to do something here

00:47.920 --> 00:49.600
where we transform our data.

00:49.600 --> 00:52.340
We conveniently get the error already

00:52.480 --> 00:58.030
and that of course makes sense because we need to add this newly added selectionID property to the

00:58.030 --> 01:01.430
object we're pushing on our array of data points.

01:01.430 --> 01:08.890
Now this property can be initialized using the host again, the hosting element and there we can call the

01:08.890 --> 01:16.260
creation selectionID builder because internally in Power BI, we want to assign ID to each data point

01:16.570 --> 01:22.630
and create selectionID builder gives us a tool which allows us to do just that. So Power BI will handle

01:22.630 --> 01:24.600
the heavy lifting behind the scenes,

01:24.700 --> 01:27.460
we now only need to configure it a bit.

01:27.460 --> 01:35.060
We do this by calling another method on that, withCategory, where we store a category and we tell it,

01:35.060 --> 01:40.180
well on which element are we right now. Keep in mind, here we are in the array where we set up all

01:40.180 --> 01:41.130
the data points,

01:41.170 --> 01:45.640
so we have this I index which changes during each iteration,

01:45.790 --> 01:50.240
so with that we can set up this ID binding.

01:50.440 --> 01:55.440
Finally, we call createSelectionID to finish this process

01:55.510 --> 02:03.940
and now each element will have its own selection ID stored internally by Power BI once this code runs.

02:04.330 --> 02:08.470
So that's useful for setting this up when we get data,

02:08.470 --> 02:15.170
now of course we also want to use the selection ID and kind of use it when we click on a bar,

02:15.310 --> 02:20.470
we haven't added such a functionality yet. The first place where I need to change something is in the

02:20.470 --> 02:25.360
constructor or to be precise, I want to create a new property.

02:25.360 --> 02:32.460
This new property will be named selectionManager and it should be a private one as all the others

02:32.460 --> 02:33.060
too

02:33.220 --> 02:41.140
and it will be of type ISselectionManager, a tool Power BI gives us to, well manage the selections

02:41.140 --> 02:48.400
behind the scenes. Here when we construct everything, I want to assign this or give it a value and I

02:48.400 --> 02:54.280
can give this value from the options we're receiving, from the host element and there, we have this create

02:54.290 --> 03:00.850
selection manager method which I'll call. Now Power BI is able to manage the selected items, still we need

03:00.850 --> 03:06.940
to listen to the event and we do it down here in the update method where we did create our bars and

03:06.940 --> 03:14.290
did configure them. After configuring them but before calling exit remove, I'll add barsOn to listen to

03:14.290 --> 03:19.230
an event and on takes as a first argument the event I want to listen to,

03:19.360 --> 03:24.140
that's the click event in our case so that when we click on a bar, something happens.

03:24.490 --> 03:31.480
Next, I'll execute a function where I will receive the data point I clicked on, so the individual bar

03:31.500 --> 03:36.010
you could say and this function here, in there,

03:36.160 --> 03:39.530
here I will use the selection manager.

03:39.580 --> 03:47.200
Now since this is in a click event and the this keyword sometimes behaves differently that you would think

03:47.200 --> 03:55.120
in Javascript, I can store the selection manager in a separate variable, accessing this.selectionManager

03:55.120 --> 04:01.250
from the class and now inside of this anonymous function where this would refer to something else since

04:01.250 --> 04:03.410
this is executed when the event occurs,

04:03.730 --> 04:11.410
I can now use the selection manager to call select because now, I want to select this item we clicked

04:11.410 --> 04:12.420
on and with select

04:12.430 --> 04:15.910
I mean tell Power BI that we clicked on it.

04:16.000 --> 04:22.710
So with select here, I need to pass information about my data point, to be precise,

04:22.720 --> 04:27.550
I need to pass the selection ID which we configured a while ago, at the beginning when we transformed

04:27.580 --> 04:29.320
our data.

04:29.350 --> 04:31.300
Now select returns a promise,

04:31.300 --> 04:36.270
so here we can chain then to do something once this has been done by Power BI.

04:36.280 --> 04:42.010
So once Power BI knows that we selected this, what do we want to do next? Here I want to execute

04:42.010 --> 04:45.840
an anonymous function where I get all IDs,

04:46.120 --> 04:50.730
so my selection ID type and now an array of these IDs

04:50.920 --> 05:02.450
and that is an arrow function here and in here, I now want to change my bars attributes. I want to change

05:02.510 --> 05:10.760
something here and here I want to add the fill opacity property or attribute which will define how opaque

05:10.790 --> 05:12.520
a single bar is

05:12.560 --> 05:19.190
and of course all bars which are not selected should get a little bit transparent and only the bar

05:19.190 --> 05:21.490
which was selected should be fully opaque.

05:21.710 --> 05:25.680
So therefore here, I will define the following code,

05:25.970 --> 05:30.120
I will check if in my IDs I have here,

05:30.380 --> 05:36.180
if the length is greater than zero which means we do have some bars selected, at least one,

05:36.290 --> 05:38.700
otherwise we have zero selected IDs.

05:38.750 --> 05:49.040
So if we do have a selected ID, then I want to set the opacity here to .5 so that adds 50%

05:49.040 --> 05:50.380
transparent,

05:50.450 --> 05:53.990
otherwise I'll send it to 1 which means it's fully opaque.

05:54.470 --> 05:57.400
Now all bars are a little bit transparent

05:57.400 --> 06:06.440
if we do have a selected bar, therefore I then need to use d3 and the select method to select this item

06:06.500 --> 06:14.690
and since I'm here inside this anonymous function I passed on this click listener, this refers to the

06:14.690 --> 06:16.160
element we clicked on,

06:16.280 --> 06:21.950
that's also the reason why I used a normal function here and no arrow function because with arrow functions,

06:22.190 --> 06:25.240
this keeps its original context, here

06:25.250 --> 06:30.040
I want to change the context, the thing this refers to, this

06:30.170 --> 06:31.950
now is the element we clicked on.

06:31.970 --> 06:39.050
So I now selected this element and for the selected the element of course, I want to override this fill

06:39.050 --> 06:41.060
opacity, here

06:41.150 --> 06:48.440
I don't want to have this transparent opacity was set up in the first attribute statement, here instead

06:48.500 --> 06:56.260
I want to set fill opacity to one because this is the one we clicked on,

06:56.260 --> 07:02.690
this should be fully opaque, fully visible. Well and that should be all,

07:02.690 --> 07:07.660
with that we should be able to select it, we should be able to tell Power BI that we selected something

07:08.120 --> 07:10.850
and we should be able to change the appearance.

07:11.030 --> 07:16.490
If we now save this file and we still have it running in the command prompt, if we go back to our project

07:17.030 --> 07:22.800
and reload this visual, if I click this bar, you see it updates in the donut here too

07:22.910 --> 07:27.670
and you see the opacity also changes appropriately.

07:27.920 --> 07:29.150
So this is now working,

07:29.150 --> 07:33.260
we're now able to select data in our own chart as well as in others.
