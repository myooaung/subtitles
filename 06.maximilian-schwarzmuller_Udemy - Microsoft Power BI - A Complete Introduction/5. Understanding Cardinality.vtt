WEBVTT

00:02.730 --> 00:09.120
We now know how to create relationships but we need to understand some more theory to really make sure

00:09.300 --> 00:11.390
that we know what we are doing.

00:11.910 --> 00:17.640
So we want to bring our data model to life and to do this, we have to understand the following words,

00:18.190 --> 00:22.770
cardinality, cross filter direction and active properties.

00:23.190 --> 00:29.940
Let's start with cardinality first and to be honest, I don't like the word cardinality, so maybe let's

00:29.940 --> 00:32.570
just call it type of relationship

00:32.850 --> 00:38.260
and by saying that, I think this might even make it easier for you to understand what that might mean.

00:38.430 --> 00:40.180
Let's take a look.

00:40.230 --> 00:46.270
So we have one specific relationship type, one-to-many or many-to-one,

00:46.290 --> 00:48.580
it's the same thing, just vice-versa.

00:48.870 --> 00:53.860
So this is one cardinality and to understand that, we should take a look at an example.

00:54.480 --> 01:01.590
Let's say we have two tables, the customers table and the orders table. The customers table looks like

01:01.590 --> 01:02.540
this,

01:02.550 --> 01:07.770
so you have three columns, you have the customer ID, the first name and the second name.

01:07.770 --> 01:12.180
The important thing is that the first column, the customer ID is unique,

01:12.180 --> 01:14.330
this means there are no duplicate values,

01:14.340 --> 01:18.170
so each customer can be identified by that ID,

01:18.540 --> 01:20.160
so that's important thing.

01:20.160 --> 01:21.770
Now we have a second table,

01:21.810 --> 01:27.220
the Orders table. The Orders table looks like this, in the first column,

01:27.270 --> 01:33.120
we have different order IDs which are unique. In the second column, we have the order dates and in the

01:33.120 --> 01:40.290
third column, we again have the customer ID. Now as you can imagine, if we want to create a relationship and

01:40.290 --> 01:46.110
as we already learned it actually, we will use the ID customer column to create that relationship.

01:46.110 --> 01:52.140
However if you look at the ID customer column in the Orders table, you can see that Mr. Schwarzmuller

01:52.290 --> 01:54.330
has several orders,

01:54.330 --> 02:00.780
this means that the customer ID is not unique in that column but exists multiple times depending on

02:00.780 --> 02:03.500
the amount of orders of each customer.

02:03.510 --> 02:09.180
Now if you want to create a relationship between those two tables, you create a one because you have

02:09.180 --> 02:12.760
the ID of the customer only once in the Customers table

02:12.870 --> 02:20.480
to many because you have the customers in the orders table multiple times, relationship, one-to-many

02:20.760 --> 02:24.110
and to say this in words, this can simply be described as follows,

02:24.360 --> 02:31.470
each customer is unique in the Customers table but each customer can have multiple orders in the Orders

02:31.470 --> 02:32.470
table

02:32.760 --> 02:39.610
and this is how a one-to-many or as I said, vice-versa, many-to-one relationship basically works.

02:39.630 --> 02:43.650
So this was the first relationship type or cardinality,

02:43.650 --> 02:46.170
let's take a look at a second type,

02:46.170 --> 02:48.260
this is the one-to-one relationship

02:48.630 --> 02:52.850
and I think the easiest way is if we just take a look at an example again.

02:53.040 --> 02:55.560
So this example table looks like this,

02:55.650 --> 02:57.270
we have the passport ID,

02:57.330 --> 03:03.840
so a unique value with different passport related information, like until when it is valid, when it was

03:03.840 --> 03:08.360
issued and we have some information about the person who owns that passport,

03:08.370 --> 03:12.410
so first name, second name and which country person is from.

03:12.420 --> 03:18.090
Now let's assume that you want to split the table, so you would like to have one table that is more related

03:18.090 --> 03:23.760
to passport relevant information and that you have another table that is more related to the information

03:23.760 --> 03:25.250
about the person.

03:25.290 --> 03:27.520
So this could look something like this,

03:27.660 --> 03:34.470
you have one table, the passport table with the passport ID, the valid and the issued column and you have a

03:34.470 --> 03:35.440
second table,

03:35.760 --> 03:40.560
the person table. This person table again has the ID of the passport

03:40.740 --> 03:44.280
but then the first name, the second name and the country.

03:44.280 --> 03:50.400
The important thing is that those two tables have a one-to-one relationship because if you look at the

03:50.400 --> 03:57.680
ID passport columns, you still know that the ID passport is still a unique column or not the column, the

03:57.690 --> 04:00.070
values in that column are unique

04:00.240 --> 04:02.370
and this is why you call that relationship

04:02.490 --> 04:06.210
in contrast to the previous example, one-to-one.

04:06.810 --> 04:08.910
So that's the second cardinality,

04:08.910 --> 04:15.180
so if we now go back to our overview, we are almost done with the cardinality.

04:15.340 --> 04:18.180
There is one last cardinality missing

04:18.400 --> 04:25.960
and to understand that cardinality in Power BI desktop, we have to take into account cardinality and the

04:25.960 --> 04:32.280
cross filter direction. Why we need that, what cardinality type that is and how this works,

04:32.350 --> 04:34.340
let's learn that in the next video.
