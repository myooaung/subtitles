WEBVTT

00:02.360 --> 00:05.070
In the last lecture, we created our first shape,

00:05.090 --> 00:10.880
now let's actually display some data, some static data for now but that is a huge step towards making

00:10.890 --> 00:14.370
it truly dynamic and allowing us to input data later.

00:14.660 --> 00:23.270
So back in my code editor, I now want to display more than one shape and more importantly, I want to display

00:23.300 --> 00:26.780
as many shapes as needed to display my data.

00:26.780 --> 00:30.680
Now for that, we need to do quite some changes,

00:30.680 --> 00:38.290
so let's start. First of all, I want to add a new property, I'll name it bar container,

00:38.310 --> 00:42.620
this should actually hold my bars of the bar chart later on,

00:42.620 --> 00:51.040
this will also be a d3 selection holding some svg element, svg element without the 'a' in between.

00:51.040 --> 00:53.960
Now I will initialize this in the constructor,

00:53.960 --> 01:01.190
after we created this svg, I now want to store a new element in this newly created bar container property,

01:01.190 --> 01:07.130
this new element will use this svg element we created

01:07.520 --> 01:16.580
and here on that, I actually want to call append and append a 'g' element. 'G' is just a group grouping all the

01:16.580 --> 01:17.870
bars together,

01:17.990 --> 01:21.760
this is optional but it gives this a clearer structure.

01:21.770 --> 01:23.740
I'll also add a class to this,

01:23.780 --> 01:30.050
the class will be bar container so that all the bars are in that container.

01:30.050 --> 01:36.500
Now with that, I'll also add true here to assign this class, I created this container,

01:36.530 --> 01:39.020
of course we also need the individual bars.

01:39.270 --> 01:46.040
Now for that, I need to go to the update method because remember, whenever you want to actually display

01:46.040 --> 01:51.230
something, that should go into the update method because you probably want to update it whenever something

01:51.230 --> 01:52.740
changes about your visual.

01:53.090 --> 02:01.300
So instead of creating this rectangle here which we did before, I now want to create my bars. Now for

02:01.340 --> 02:05.540
that, I'll store them in a variable here since I only need them in this update method,

02:05.540 --> 02:11.310
so no need to store them in a property and I will get access to my bar container, this group

02:11.330 --> 02:15.560
we just created here. This bar container here,

02:15.620 --> 02:22.310
I will call select all to select all elements which have a CSS class of bar.

02:22.310 --> 02:27.250
Now initially, that are zero elements but that is a great feature of d3.js,

02:27.280 --> 02:35.240
I can access all elements which have a bar class and that will be more of course if we already

02:35.240 --> 02:42.860
did render some bars and then add new data for example, then all of a sudden, we want to change some parts

02:42.860 --> 02:48.830
of our chart and we select all, we make sure that we select all the existing ones so that d3 is

02:48.830 --> 02:54.630
aware of how many we already have and then can internally figure out how many new ones it needs to create.

02:54.650 --> 02:59.230
So I select all elements which have the bar class here

02:59.390 --> 03:02.230
and next I want to connect it to some data.

03:02.520 --> 03:04.220
Now we don't have any data here,

03:04.310 --> 03:13.640
so I'll add some static data and I will add this static data here in my module but outside of this class.

03:14.180 --> 03:22.460
I'll simply name it static data, it will be a variable and I will make this an array of data.

03:22.460 --> 03:28.540
Now each data piece here will be a Javascript object which is written like this

03:28.910 --> 03:40.390
and there, what we will have is value, could be 10 and a category, I'll name this China because I want

03:40.390 --> 03:43.430
to work with revenue data here for example.

03:43.500 --> 03:49.400
Now I'll add another object, let's say value 8, category

03:49.480 --> 03:51.250
could be USA

03:51.370 --> 03:57.490
and of course feel free to use any data you want here but you should have a value in a category, then value

03:57.490 --> 03:58.650
11 here,

03:58.870 --> 04:12.150
category India and let's add a fourth one where we say value 6 or 5 since I mistyped and then category,

04:13.530 --> 04:15.440
maybe Germany, whatever you like.

04:15.460 --> 04:23.400
This is my dummy data and now we can use that down here to bind our bars to our data.

04:23.430 --> 04:27.290
We do this by calling another method here, the data method

04:27.450 --> 04:31.950
and that is a method provided by d3.js which will do or which will set up all the magic in

04:31.950 --> 04:38.330
the background where d3 will figure out how many new bars it gets to create and so on.

04:38.370 --> 04:43.410
What we do here is we simply bind this to our static data array

04:43.440 --> 04:45.520
we just created.

04:45.540 --> 04:48.080
Now with that in place, we're not done though,

04:48.270 --> 04:56.220
what we now need to do is, we need to enter these elements. Enter is another method provided by d3

04:56.400 --> 05:00.740
and it actually makes sure that all that data enters our view,

05:00.750 --> 05:03.150
however it does this in a clever way,

05:03.240 --> 05:09.930
it will figure out which data points already were rendered and will only render the ones which are required

05:09.930 --> 05:10.580
to be rendered.

05:10.650 --> 05:14.340
So enter is called and thereafter,

05:14.400 --> 05:20.880
I want to append a rectangle because enter will not actually create a shape,

05:20.970 --> 05:22.510
it wouldn't know which one,

05:22.530 --> 05:26.430
it just tells d3, be prepared to add something

05:26.580 --> 05:27.150
but we do

05:27.210 --> 05:30.630
this something with the append call thereafter.

05:30.780 --> 05:35.210
So there we tell d3.js, for each data point you want to enter,

05:35.220 --> 05:37.770
please create a rectangle.

05:37.770 --> 05:48.780
And finally, I will add class here to give each bar a CSS class of bar and I'll also add true here.

05:48.930 --> 05:51.550
So that will create the individual bars,

05:51.780 --> 05:58.860
now to see something, we need to give these bars some styling. So we can call the attr method on the

05:58.870 --> 06:05.270
bars we just created and here, the attributes I want to assign is of course width, height,

06:05.310 --> 06:09.980
we also need to define the position and some fill color.

06:09.990 --> 06:13.590
Now the interesting thing is width and height,

06:13.590 --> 06:16.800
how do we define this?

06:16.800 --> 06:25.300
That is relatively tricky because we need to change this dynamically once we resize the visual, we'll

06:25.350 --> 06:27.340
come back to this in one of the next lectures,

06:27.420 --> 06:29.730
for now let's give this a width of 20,

06:30.150 --> 06:35.150
and what about the height? That should of course depend on the value, right?

06:35.250 --> 06:40.540
So maybe since we have relatively small values of 10, 8 and so on,

06:40.680 --> 06:44.850
let's use the value times 5.

06:44.850 --> 06:50.400
The nice thing is since we're using d3, we can get access to the data here,

06:50.490 --> 06:57.650
we can write this in a function form and use an arrow function which means the argument is data and

06:57.660 --> 07:00.470
the function body now comes to the right of this arrow.

07:00.510 --> 07:04.440
You could wrap it in curly braces but if you only have one line, you can omit these

07:04.740 --> 07:10.510
and there you could say data.value*3

07:10.530 --> 07:12.810
maybe, that will be the height.

07:12.870 --> 07:19.920
Now this will automatically be returned, if you were to wrap this in curly braces, you would have to add

07:19.920 --> 07:21.530
a return statement in front of it

07:21.630 --> 07:27.230
but since I omitted these, I can omit the return statement too. That defines width and height,

07:27.270 --> 07:31.370
we also need to define the x and y coordinate.

07:31.470 --> 07:39.060
Now for this, it's important to understand that the coordinate system used by d3 starts in the

07:39.060 --> 07:40.530
top left corner,

07:40.680 --> 07:44.150
so in the top left, we have 0,0,

07:44.490 --> 07:52.320
therefore x should take into account which bar we actually render. The first bar might use the 0

07:52.320 --> 07:57.060
coordinate but it should also be shifted a bit to the right but the next bar certainly needs to be shifted

07:57.060 --> 07:57.510
to the right

07:57.510 --> 08:00.580
otherwise it will sit right on top of the previous one.

08:00.600 --> 08:06.610
So here, it's pretty tough for us to find out where we exactly want to place these bars.

08:06.810 --> 08:11.830
So let's have a look at how d3.js helps us with scaling in the next lecture.
