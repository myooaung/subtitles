WEBVTT

00:02.090 --> 00:07.640
We're making good progress and to be honest, we're almost done with what I want to show you.

00:07.670 --> 00:12.290
However it would be nice to have an axis because right now, we can only guess which bar refers to

00:12.290 --> 00:19.070
which country. We can see it down there in our donut chart a little bit at least but here, that's not really

00:19.070 --> 00:19.920
visible,

00:20.120 --> 00:26.860
so that is something I want to change, I want to add an axis, that is what I'll do now. To be precise,

00:26.990 --> 00:34.460
I want to add an x-axis and for that, I'll go to my constructor, here where I set up my svg and then the

00:34.460 --> 00:38.720
container wrapping my bars, here I will set up the axis too.

00:38.810 --> 00:44.950
Now for that I'll create a new private property and that will be my x-axis,

00:44.950 --> 00:50.870
it will be of type d3 selection and then again an svg element because that is what my axis will be in

00:50.870 --> 00:51.850
the end.

00:52.250 --> 00:54.340
Then after I created the bar container,

00:54.350 --> 00:58.200
keep in mind, this is the group containing the individual bars,

00:58.550 --> 01:03.790
below that I want to create my x-axis, store it in this property we just created

01:04.010 --> 01:06.940
and here I will use my svg element,

01:06.950 --> 01:12.690
so this svg, not the bar container but the root svg element

01:13.160 --> 01:17.810
and there, I now want to append another group with append g

01:17.900 --> 01:22.790
So there is now group sitting next to the bar container group which makes sense because the axis is

01:22.790 --> 01:25.150
not in the same group as the bars,

01:25.310 --> 01:26.960
it sits next to it.

01:27.470 --> 01:29.320
And I don't only want to append it,

01:29.330 --> 01:36.800
I also want to give it a class of x-axis, add true here and we're good to go.

01:36.800 --> 01:39.110
Now we have a place where we can render the axis

01:39.120 --> 01:41.690
but of course we also need to create them programmatically,

01:41.690 --> 01:43.420
this isn't done yet.

01:43.820 --> 01:47.150
The place to render such an axis of course is the update method.

01:47.150 --> 01:53.210
As always, if we want to use the data in whatever we do and the axis of course should display our categories

01:53.390 --> 01:58.660
so it should use the data we pass into our chart, in our visual here.

01:58.730 --> 02:02.430
So I will create this axis here

02:02.510 --> 02:12.020
after sizing my svg element, there I will access my x-axis, this property where I store this axis and I'll

02:12.020 --> 02:13.840
add a style to it,

02:13.970 --> 02:22.430
that's another d3 method which allows me to add CSS styles and here, I want to set the font size of

02:22.520 --> 02:30.990
the axis labels and that is only one way of doing it though. You could do it here with the font size

02:31.430 --> 02:38.050
and there, we can use d3 and then the min method to calculate the minimum from an array.

02:38.060 --> 02:44.150
Here we have the height and width of the viewport and then we could multiply this with some font size

02:44.150 --> 02:52.630
multiplicator, for example multiply it with 0.04. Now

02:52.830 --> 02:55.520
I said this is one way of doing it, whoops,

02:55.640 --> 02:59.810
should be outside of these parentheses here though.

03:00.150 --> 03:06.120
So this is one way of doing this, the other way of setting up the font size of course is in our style folder

03:06.190 --> 03:12.000
in the visual.less file. Here we could target our x-axis CSS class,

03:12.180 --> 03:18.010
so here x-axis like that and then we could assign the font size here too.

03:18.030 --> 03:20.510
However here, we couldn't make it dynamic,

03:20.640 --> 03:25.550
so we could set this to 12px here but that would be hardcoded

03:25.590 --> 03:31.640
and wouldn't adjust if we change the styling, so I'm going to comment this out and do it here in d3

03:31.680 --> 03:33.680
or with d3.

03:33.750 --> 03:40.410
So that's the x-axis style, of course also important are the labels and that is kind of related to

03:40.410 --> 03:41.530
my scale

03:41.610 --> 03:47.580
because keep in mind the xScale positions our bars correctly on the x-axis,

03:47.700 --> 03:53.430
so it makes sense to say this is kind of something you also need when defining the labels on the axis

03:53.430 --> 03:59.040
which is what we're trying to do now. After defining the xScale here,

03:59.740 --> 04:01.330
I will create a new variable

04:01.350 --> 04:05.720
x-axis, not to be mistaken with the property where I stored it in

04:06.010 --> 04:11.860
and in there, I want to use d3, the svg helper property

04:11.920 --> 04:17.590
and on that, the axis method which is a convenience method d3 provides for creating an axis with

04:17.590 --> 04:18.640
labels.

04:18.970 --> 04:27.100
Now here, I need to pass a scale and that is the xScale, d3 will then automatically derive where

04:27.100 --> 04:34.090
to position these labels based on our scale which we also use to position our shapes, our rectangles,

04:34.120 --> 04:35.170
the bars.

04:35.190 --> 04:36.630
That is the cool thing about d3,

04:36.630 --> 04:38.360
everything is connected here.

04:38.770 --> 04:46.540
So that is where I place that and orient is a method I can then use to tell it where to place it, at

04:46.540 --> 04:47.730
the bottom.

04:47.740 --> 04:54.730
The nice thing is if we weren't to use these helper methods, you would have to figure out manually where

04:54.730 --> 05:02.710
to place the labels, that they are distributed correctly, where they are positioned in, well in your coordinate

05:02.710 --> 05:10.110
system, that they don't overlap your bars, all things d3 does for you with these two methods,

05:10.150 --> 05:12.390
scale and orient.

05:12.880 --> 05:17.190
And with that, we configured this x-axis,

05:17.350 --> 05:24.590
the remaining thing for me to do is to access the x-axis we initialized here in the constructor,

05:24.610 --> 05:32.320
so the actual place in the svg which we stored in this property and call attributes here to set the

05:32.350 --> 05:41.530
transform attribute, that is a default CSS property and set it to translate which allows us to move

05:41.530 --> 05:47.290
it and in there, the translateX should be zero,

05:47.290 --> 05:53.320
we want to have it, set it on the left edge but seen from the top on,

05:53.510 --> 05:59.320
I will leave my string here, seen from the top, here

05:59.380 --> 06:04.920
I want to push it down to the very bottom and you might say, well doesn't Orient do that?

06:04.990 --> 06:10.720
Orient tells d3 where it will sit in the end and where the labels should be

06:10.730 --> 06:16.420
and how it should position these on the axis but where the axis itself is positioned in your coordinate

06:16.420 --> 06:17.310
system,

06:17.470 --> 06:22.660
this is something you will have to do and that is something we'll do here and attribute of course takes

06:22.660 --> 06:23.970
an object as an argument,

06:24.070 --> 06:27.380
so wrap this in curly braces.

06:27.380 --> 06:32.500
Now I'm pushing my axis down to the very bottom,

06:32.500 --> 06:34.470
this is where I want to place it,

06:34.480 --> 06:40.060
finally what I'll do is I will call x-axis and x-axis

06:40.060 --> 06:42.040
now refers to my variable here.

06:42.200 --> 06:47.650
So to the x-axis I configured here with scale and orient, with call

06:47.680 --> 06:54.070
I now apply this configuration on this shape, the x-axis shape,

06:54.070 --> 06:59.450
keep in mind x-axis refers to this g element in our svg

06:59.500 --> 07:05.260
and now calling this or I'm applying this x-axis configuration on this shape

07:05.260 --> 07:12.400
and now d3 has all the connections it needs to figure out where to place what and how to, well

07:12.400 --> 07:14.340
set it up to look nice.

07:14.350 --> 07:20.950
Now if I save this, I have to go to the visual.less file and actually remove that because I just recognize

07:20.950 --> 07:22.590
this was invalid code,

07:22.630 --> 07:28.440
it would not work correctly, it would give us an error in our command prompt where we ran pbiviz start.

07:28.560 --> 07:39.200
Now to be able to view it though, we have to give some room to our axis and for that, I'll go into my update

07:39.250 --> 07:40.020
method here,

07:40.030 --> 07:49.270
for example after I size the overall svg, what I want to do here is I want to adjust my height variable

07:49.360 --> 07:55.230
after we use that for the overall svg. The overall svg should receive the full height and width

07:55.600 --> 08:02.960
but for all the other initializations, I want to adjust my height to leave some room for the axis.

08:03.040 --> 08:11.860
So here what I will do is, I will set height, whoops, without capslock maybe, height equal to the old height

08:12.130 --> 08:16.450
minus and now some margin, maybe 25

08:16.450 --> 08:25.060
and that will be 25px for the axis. If we now save this and reload our chart, we see here below it,

08:25.060 --> 08:32.180
if I remove that donut here and increase that in size, we see China, France, Germany, India and the USA

08:32.590 --> 08:35.170
and that is now my labels

08:35.270 --> 08:37.750
the axis being added to this.
