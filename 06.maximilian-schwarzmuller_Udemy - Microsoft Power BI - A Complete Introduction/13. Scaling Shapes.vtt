WEBVTT

00:02.550 --> 00:04.810
In the last lecture, we were almost there,

00:04.810 --> 00:11.580
we almost created our bars but the issue is we have problems with positioning them,

00:11.680 --> 00:16.720
thankfully d3.js offers some help. Before I actually create the bars

00:16.720 --> 00:18.630
but the position doesn't really matter,

00:18.640 --> 00:27.010
I want to define my scales and I need to define a yScale and I need to find an xScale, that

00:27.010 --> 00:31.040
will define where things are positioned and how they are scaled.

00:31.950 --> 00:39.030
Let's start with the yScale, we can use the scale property in d3 and there, we get a couple of scales

00:39.030 --> 00:40.160
we can use.

00:40.350 --> 00:47.510
Now for the yScale, I want to use the linear scale which means if the first item is 5 and the second

00:47.550 --> 00:53.160
is 10, the 10 item with the value of 10 should be double the size of the first one.

00:53.160 --> 00:54.550
It's a linear scale,

00:54.570 --> 00:58.440
bigger means grow linearly.

00:58.440 --> 01:07.350
For this, I also need to pass a domain which is my input data and that actually is an array where I define

01:07.410 --> 01:10.740
my minimum and my maximum and the maximum,

01:10.740 --> 01:13.230
well for us here if we have a look at our data,

01:13.290 --> 01:15.590
that simply is 11,

01:15.600 --> 01:21.170
so let's set this to 11. That defines well how should you scale it

01:21.180 --> 01:27.960
because by default, linear scales between 0 and 1 and now we adjusted this to 0 to 11 to fit our

01:27.960 --> 01:29.500
data.

01:29.550 --> 01:33.910
We also need to define the output range, we defined the input range,

01:33.960 --> 01:36.930
which values do our items have,

01:37.020 --> 01:42.450
now we want to tell it, well to which should you scale it, to which output, pixels in the end

01:42.570 --> 01:46.890
and keep in mind, here of course we have way more than 0 to 11,

01:46.920 --> 01:49.960
we have the full height available for the y-axis.

01:49.980 --> 01:56.380
However here it's important to know how the coordinate system d3 uses works.

01:56.430 --> 02:02.110
It starts in the top left corner, which means there we have 0, 0

02:02.520 --> 02:08.280
and then we can go to the right and increase the number or down and increase the number.

02:08.310 --> 02:12.720
Therefore the output range is actually not 0 to height which you could think

02:12.960 --> 02:18.820
but instead it's height to 0 due to this coordinate system which starts in top left corner and on

02:18.860 --> 02:20.520
the bottom left.

02:20.550 --> 02:28.500
So this means scale my items to fit the pixels we have available which is the maximum height we have

02:28.700 --> 02:35.700
and well 0 to be at the very top and therefore, 0 which is at the very top of our coordinate system needs

02:35.700 --> 02:41.710
to fit our biggest number since this should be the highest chart or the highest bar.

02:41.790 --> 02:44.880
That's the yScale, now the xScale,

02:44.880 --> 02:47.670
here we also want to use d3 scale,

02:47.880 --> 02:54.260
however here I will use an ordinal scale. Ordinal because our category is no number,

02:54.270 --> 03:00.630
it's text and that is what's on the x-axis, so we can't use linear there because how will you scale

03:00.630 --> 03:04.280
text linearly? They are discrete values,

03:04.290 --> 03:06.340
that is why we use ordinal here.

03:06.450 --> 03:14.420
We still need to provide a domain, our input data though and that simply is our array of categories.

03:14.790 --> 03:22.920
So here I can pass static data and use the map method to only extract the categories so that I don't

03:22.920 --> 03:28.800
have an array of objects which have value and category but just an array of strings which contains just

03:28.800 --> 03:30.080
the categories.

03:30.090 --> 03:36.780
Map is a built-in function Javascript arrays offer and there, we can basically

03:36.810 --> 03:39.750
or this will basically execute a function we define here,

03:39.750 --> 03:43.290
also an arrow function for every element in this array,

03:43.290 --> 03:49.820
so for every object we have here. In the return statement, we tell it what we want to map to,

03:49.830 --> 03:52.460
so which value we want to use for each item.

03:52.620 --> 03:59.670
Here I simply want to return data point category which basically means turn this object which had value

03:59.670 --> 04:02.870
in string or value in category into,

04:02.940 --> 04:07.690
well just a normal string because we omit the rest here, we just return a string,

04:07.740 --> 04:09.830
just return a category.

04:09.840 --> 04:13.330
So we have an array of strings as our domain, as our input data now,

04:13.370 --> 04:16.750
the range, the output data

04:16.860 --> 04:22.580
now again is an array and that should be 0 to width

04:22.620 --> 04:24.690
because here we go from left to right.

04:24.720 --> 04:27.910
We start in the top left but for the x-axis, this doesn't matter,

04:27.930 --> 04:30.330
here, the we start on the left is important,

04:30.360 --> 04:38.550
so from 0 to width and I will actually not use range but I will use rangeRoundBands where I can also

04:38.560 --> 04:43.530
define some padding I want to have between these items because we have an ordinal scale, we have some

04:43.530 --> 04:44.550
discrete values,

04:44.550 --> 04:50.690
I don't want to have them sit right next to each other, so I will pass a padding of 0.1, that as percentage

04:50.700 --> 04:55.280
not pixels and that's all I want to have between these items.

04:55.290 --> 05:01.850
We can also pass 0.2 maybe for an outer padding so that we don't have the leftmost and rightmost bars

05:01.850 --> 05:04.040
sit right on the edges of our chart.

05:04.530 --> 05:09.520
So that's the xScale, that was a lot of talking, what can we do with these scales now?

05:09.720 --> 05:15.360
Well we can use them here where we define attributes for our bars, for the width,

05:15.390 --> 05:18.100
we no longer need to set 20,

05:18.570 --> 05:25.950
instead we can use our xScale and call rangeBand here which is a method which will automatically give

05:25.950 --> 05:30.450
us the right width depending on how big our viewport is.

05:30.450 --> 05:37.540
Remember, we do use this here in our xScale set up and therefore, it will automatically recalculate

05:37.620 --> 05:38.770
the scale for us,

05:38.770 --> 05:40.120
that is awesome.

05:40.130 --> 05:44.060
The same for the height, the value does of course matter

05:44.080 --> 05:47.430
because that is important for defining the right height of the bar

05:47.560 --> 05:48.550
but we don't need to take it

05:48.550 --> 05:49.430
times three

05:49.480 --> 05:51.880
instead we want to respect the actual viewport 

05:51.880 --> 06:00.910
we have available. So here, what I will use is my yScale set up and here I can pass my number.

06:01.120 --> 06:08.040
Now I need to explicitly cast this to a number though by adding lower than number or greater than, this

06:08.050 --> 06:13.920
will explicitly cast it so that Typescript knows that this is a number, what we pass here

06:13.960 --> 06:18.580
and it's data value of course, not number and remove this.

06:18.610 --> 06:29.720
So however, this would be wrong because for the biggest value, 11, this would give us the 0 range here,

06:29.810 --> 06:32.260
the maximum we define here in the range,

06:32.660 --> 06:39.350
so it would push it only 0px down because remember, we start in the top right.

06:39.440 --> 06:44.450
That would mean we won't see any chart because if we don't push it down a little piece, we can't see a

06:44.450 --> 06:45.170
chart,

06:45.470 --> 06:50.340
instead we actually want to push it down the full height for the biggest chart.

06:50.660 --> 06:53.870
So what we need to do is we need to take height

06:53.900 --> 06:56.840
minus our derived scale,

06:56.850 --> 07:03.050
this will make sure that the biggest chart is pushed all the way down to the x-axis and then starts there

07:03.260 --> 07:09.750
whilst the smaller chart is pushed down even more because our full height is then used for that.

07:09.800 --> 07:11.860
So we have full height

07:11.870 --> 07:19.690
and then again full height down so that our smallest chart only glimpses above the x-axis.

07:19.730 --> 07:23.710
Speaking about that, we finally can tackle our positioning issue here.

07:23.900 --> 07:25.920
We can set the x-axis

07:25.930 --> 07:32.660
now, taking into account our data and passing it into this arrow function and there we can use xScale

07:32.660 --> 07:34.750
again to derive where this should sit

07:34.850 --> 07:43.640
and we can simply pass in our category because the x-axis use the ordinal scale, discrete values. The

07:43.640 --> 07:44.400
y position is

07:44.420 --> 07:46.440
also interesting, here

07:46.460 --> 07:48.490
I also will pass in the data

07:48.620 --> 07:52.300
and now we can use the yScale, here

07:52.400 --> 07:59.650
I want to cast this to a number again because I want to access data value and this will give me the y position.

08:00.080 --> 08:09.650
Finally there, let's save this and let's reload our chart and we should see four bars here with the right

08:09.710 --> 08:13.590
sizing, we can't see any labels, we will add this later

08:13.820 --> 08:19.310
but what we can see is that if we have a look at our static data, the third item is in there the biggest

08:19.310 --> 08:19.690
one,

08:19.700 --> 08:24.100
the first one is the second biggest and that is pretty much what we see here.

08:24.470 --> 08:28.890
So that is how we can create our very basic chart,

08:28.970 --> 08:35.170
however one thing we see too is that if we resize this, it doesn't resize the chart.

08:35.510 --> 08:37.550
Now didn't I tell you that it should?

08:37.730 --> 08:38.360
It doesn't,

08:38.360 --> 08:41.470
all we need to do is implement a tiny change.

08:41.630 --> 08:50.120
First of all, we should quit after adding the data here and call enter on bars in a separate line, so

08:50.120 --> 08:57.920
that the bar is which is stored in the variable is just our data we assigned to the selected elements

08:58.550 --> 09:04.440
and then at the very end of the update method, we can call bars exit remove

09:04.740 --> 09:10.750
and what this does is, it basically will remove the elements whenever necessary

09:10.970 --> 09:18.140
and this is now required so that it can repaint them because when we resize the element, it fires

09:18.140 --> 09:21.670
the update method again and it tries to repaint them

09:21.800 --> 09:27.200
but since we use data binding as I told you, it already recognizes I get all the bars I need.

09:27.290 --> 09:29.200
So it doesn't remove them,

09:29.330 --> 09:35.240
we need to remove them here so that we remove the data binding basically, so that when update runs again,

09:35.480 --> 09:37.250
we repaint it correctly.

09:37.250 --> 09:44.960
Now if you hit control save and you go back, you can see that, whoops, once we reload this, it will resize

09:45.350 --> 09:47.560
as you resize this chart.

09:47.630 --> 09:49.540
That is our first chart created,

09:49.610 --> 09:50.680
let's move on.
