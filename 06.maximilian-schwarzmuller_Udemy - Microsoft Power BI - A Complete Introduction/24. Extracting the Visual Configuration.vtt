WEBVTT

00:02.320 --> 00:08.350
Let's retrieve the values the user might have set up, let's make our option usable. In the

00:08.350 --> 00:09.630
visual.ts file,

00:09.880 --> 00:13.710
it'll all start by me creating a new interface here.

00:14.250 --> 00:20.490
I'll name this interface barChartSettings because that is what it's about,

00:20.530 --> 00:23.300
I want to enable the user to change some settings.

00:23.380 --> 00:26.590
We only have one setting here but of course you could add more

00:26.740 --> 00:34.470
and it's enableAxis and in there, we will have a show property which is a boolean and that's just

00:34.480 --> 00:35.740
what we set up,

00:35.740 --> 00:36.070
right,

00:36.070 --> 00:38.810
that is what we set up in our capabilities.json file,

00:38.830 --> 00:42.510
we have a show property which's type is a boolean.

00:43.030 --> 00:45.970
So now we have a representation of that in this interface,

00:45.980 --> 00:51.310
this is not strictly required but again it's a good practice so that we have our own types we can use

00:51.310 --> 00:52.410
in the end

00:52.850 --> 00:58.560
and now we can use these settings. I'll start using it here in my visual transform function, at the top

00:58.570 --> 01:02.270
where I define my default data info, here I'll

01:02.330 --> 01:08.250
also define my default settings and this will be of type bar chart settings

01:08.260 --> 01:15.160
of course, this interface we just created and I will assign a Javascript object here where I have

01:15.170 --> 01:22.740
enableAxis which in turn is a Javascript object where I set show to false because and that's just my default,

01:22.740 --> 01:24.970
you may change this, by default

01:25.000 --> 01:26.430
I won't show the axis

01:26.470 --> 01:29.220
and of course you could set this to true to show it, right now

01:29.230 --> 01:31.100
it won't have any effect though.

01:31.840 --> 01:37.560
So that is getting or setting up the default settings but of course, we want to get the settings the user

01:37.570 --> 01:38.200
entered

01:38.680 --> 01:44.680
and we can get this also in the visual transform function because just like the user enters data which

01:44.680 --> 01:48.890
we handle here, the options are also part of the user input.

01:49.150 --> 01:55.660
So after checking the data is there and so on and maybe after setting up the color but before the for loop

01:55.710 --> 02:00.030
here, maybe that's a good place to extract the options the user set up.

02:00.220 --> 02:10.450
So we could create a new variable, barChartSettings and set this then equal or first of all to type

02:10.450 --> 02:14.010
bar chart settings and set it

02:14.050 --> 02:17.410
equal to the extracted settings and now for that

02:17.410 --> 02:23.020
I will create a helper method because people actually need to go through all the possible settings and

02:23.020 --> 02:24.750
retrieve the one we're looking for.

02:25.660 --> 02:32.380
So in the end, we will have an object here and in this object, we obviously will have our enableAxis property

02:32.380 --> 02:38.330
which is an object but show as I mentioned will then be retrieved from some helper method.

02:39.150 --> 02:47.220
Now I'll create this helper method in this file too above visual transform maybe, I'll name it get option

02:47.280 --> 02:50.020
value, the name is totally up to you.

02:50.160 --> 02:56.500
It's a generic type function here because I don't care about which type of option it is,

02:56.520 --> 02:58.740
if it's a boolean, a string, whatever

02:59.190 --> 03:07.860
and here I'll have all my objects. Object means options the user can set basically, that is of type data view

03:07.980 --> 03:15.930
object, a type defined by Power BI visual tools. I'll then have the object name I'm looking for

03:15.930 --> 03:20.820
because with get option value, I want to get one specific option, the enableAxis here,

03:20.880 --> 03:26.570
this should be a reusable function which allows me to easily get access to the option I'm looking for.

03:26.670 --> 03:32.670
I'll also be able to pass a property name which is a string and the default value which of course is

03:32.690 --> 03:33.910
of our generic type

03:33.930 --> 03:37.410
because again, this function should be usable for any type of option

03:37.860 --> 03:40.450
and I will return that generic type in the end,

03:40.590 --> 03:44.450
the data I got in the end, the option setting.

03:44.970 --> 03:46.430
So that's my function.

03:46.440 --> 03:47.670
Now we can

03:47.680 --> 03:53.290
first of all check if we do have any objects because if we don't, then we don't need to go any further,

03:53.290 --> 03:58.950
no options were set up, we can't extract anything. As a next step,

03:58.950 --> 04:06.750
I want to get my object from all the objects, so from all these options objects you could say which matches

04:06.870 --> 04:09.000
the object name I was looking for.

04:09.000 --> 04:13.130
So if I was looking for enableAxis, this should now be stored,

04:13.170 --> 04:18.720
this means the object with the value the user set and so on should now be stored in this object

04:18.750 --> 04:21.390
variable here. As a next step,

04:21.390 --> 04:23.500
I want to check if this is set,

04:23.550 --> 04:25.710
so it is null if we didn't get it

04:25.700 --> 04:28.180
otherwise it is a Javascript object

04:28.710 --> 04:33.390
and now I want to extract the specific property I'm looking for, the show property in our case.

04:33.390 --> 04:36.390
Remember that is what I set up here.

04:36.390 --> 04:44.010
So here in my object, I want to extract the property I'm looking for, it will be of type T, a generic type

04:44.010 --> 04:46.740
again because I don't care about the specific type

04:47.220 --> 04:57.680
and then I will cast this object and then access my property name there. This now gives me the property

04:57.680 --> 04:58.570
I'm looking for

04:58.610 --> 05:00.340
and this again could be null,

05:00.440 --> 05:05.200
so I check if property is not equal to undefined to be precise.

05:05.210 --> 05:10.400
So if we did find it and if I did find it, then I want to return the property

05:10.490 --> 05:17.300
otherwise if any of these if statements fails, I want to return the default value which we passed to

05:17.300 --> 05:18.170
this function.

05:18.350 --> 05:20.010
So that's my helper function

05:20.180 --> 05:27.360
and now I can use the helper function down here where I want to assign a value to show, I can now call

05:27.400 --> 05:28.960
get option value

05:29.300 --> 05:37.340
and here I want to pass the array of options or of objects as they are called here, then the property I'm

05:37.340 --> 05:44.600
looking for and my default setting of course and the option I'm looking, I forgot that. So get option

05:44.600 --> 05:45.680
value,

05:45.680 --> 05:48.290
I'm looking for a boolean in this use case here,

05:48.290 --> 05:53.390
keep in mind it's a generic function because in other options, we might be looking for a string or something

05:53.390 --> 05:54.710
like that

05:54.800 --> 06:03.310
and here, I can then reach out to my objects and what are my objects? We need to retrieve these,

06:03.350 --> 06:12.380
so let's do that first before assigning it here. I can get my array of objects by accessing my data views,

06:12.490 --> 06:15.460
whoops, not values, data views, here

06:15.470 --> 06:19.290
the first dataset we got is limited to one, keep that in mind

06:19.970 --> 06:27.320
and then here, on the metadata, a property provided by Power BI, on the metadata,

06:27.380 --> 06:29.370
I can now retrieve my objects

06:29.420 --> 06:33.180
and these are just these options object I was referring to.

06:33.590 --> 06:39.710
So now I got objects which I passed to this helper method or helper function it is, then as a string

06:39.740 --> 06:46.690
I'm looking for enableAxis, the name you set up here and then we want to retrieve show, this name here.

06:46.940 --> 06:51.700
So we do this by now as a third argument pass another string, show,

06:51.740 --> 06:58.900
that's the property name and our default setting, well we get the default settings object defined up here.

06:59.150 --> 07:05.390
So it's on this default settings enableAxis show property that I want to extract if we don't find

07:05.390 --> 07:11.110
a user setting, that would be the false case here, that we don't show an axis.

07:11.180 --> 07:13.940
With that we're extracting the user value,

07:13.940 --> 07:18.820
now we can start using it. For that in the value I returned here,

07:18.860 --> 07:20.830
I need to return my settings too,

07:21.050 --> 07:28.420
so let's adjust our bar chart view map model to also pass some settings of type bar chart settings

07:28.420 --> 07:29.340
here.

07:29.930 --> 07:37.830
With that in place, we right now see here's an issue, that should be our default settings here

07:39.190 --> 07:44.910
and at the very end of this visual transform function, here of course, I also want to set my settings

07:45.280 --> 07:51.880
and here, I simply want to return my bar chart settings which we derived a few seconds ago here.

07:52.000 --> 07:57.460
Now we can use it in the update method as always because there is where we want to show or not show

07:57.460 --> 07:58.320
this axis.

07:58.330 --> 07:59.650
How can we do that?

07:59.860 --> 08:07.240
Well first of all I want to create a new property in the class, private barChartSettings which will

08:07.240 --> 08:14.950
be a type of bar chart settings, like that, I'll initialize it here right at the start of the update method,

08:15.110 --> 08:17.780
here where I retrieve height and width too 

08:17.840 --> 08:19.340
even before I do this,

08:19.340 --> 08:25.350
I'll set this bar chart settings equal to transformed data settings.

08:25.520 --> 08:29.280
It now has the settings properties since that is what we defined

08:29.440 --> 08:36.860
and now with that settings extracted here, we can use it here where we define the height to give extra

08:36.860 --> 08:38.400
room for the axis.

08:38.450 --> 08:45.380
Well we don't want to do that if we don't want to show one, right, so we can check if this bar chart

08:45.380 --> 08:54.020
settings enableAxis show if that is true, in which case I want to do my height adjustment here,

08:54.020 --> 08:57.410
in other cases I won't do it.

08:57.470 --> 09:05.450
So by doing this simple trick here, this simple code line here, I'm making sure that the axis only has

09:05.450 --> 09:10.340
room if enableAxis show is set to true otherwise

09:10.490 --> 09:11.900
we don't execute that line

09:12.020 --> 09:15.120
and then there is no room to display the axis.

09:15.260 --> 09:18.070
So that is the thing I want to do here,

09:18.110 --> 09:26.810
however strangely enough, if I now save this and reload my code here, we don't see the axis, that makes

09:26.810 --> 09:29.150
sense because by default, we set it to false

09:29.420 --> 09:34.910
but I still don't have an option here to change my axis because there's one tiny piece of code

09:34.910 --> 09:37.160
missing, one function, one method

09:37.250 --> 09:43.660
we actually have to implement to allow Power BI to pass our own options to our code.

09:44.030 --> 09:45.530
Let's do this in the next lecture.
