WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.070
now that we have done the mapping off customer class toe customers stable in the RPMs,

00:00:06.070 --> 00:00:07.350
let's know,

00:00:07.350 --> 00:00:12.210
create an interface that can give us all the values from the table.

00:00:12.210 --> 00:00:13.510
Now,

00:00:13.510 --> 00:00:15.850
this is where Springs Magic comes into picture.

00:00:15.850 --> 00:00:18.050
All we have to do is tow.

00:00:18.050 --> 00:00:24.730
Create an interface that extends something called correct repository and automatically

00:00:24.730 --> 00:00:29.460
Spring is going to create a class at Darren Time on the flight and gives an object off the

00:00:29.460 --> 00:00:29.910
same.

00:00:29.910 --> 00:00:33.760
Let's understand this by a practical example.

00:00:33.760 --> 00:00:35.910
Now in our controller,

00:00:35.910 --> 00:00:39.850
we needed toe return the list off all customers.

00:00:39.850 --> 00:00:43.220
So for that we have to get the data from the database.

00:00:43.220 --> 00:00:45.200
While we have done the mapping over here,

00:00:45.200 --> 00:00:46.020
the question is,

00:00:46.020 --> 00:00:49.220
how do I get the data from the database now?

00:00:49.220 --> 00:00:49.890
Traditionally,

00:00:49.890 --> 00:00:53.960
you might have used J BBC toe right select statement,

00:00:53.960 --> 00:00:57.430
get the later from the database and so on and so forth,

00:00:57.430 --> 00:01:00.040
or if you have used hibernate our GP eight,

00:01:00.040 --> 00:01:05.850
then you may want to use the session or into the manager to get the later on work with that

00:01:05.850 --> 00:01:05.850
,

00:01:05.850 --> 00:01:07.530
But in all cases,

00:01:07.530 --> 00:01:08.790
you have to read the court.

00:01:08.790 --> 00:01:10.290
But in this case,

00:01:10.290 --> 00:01:10.970
let's see,

00:01:10.970 --> 00:01:14.980
we don't have to write any court and still get the data from the database.

00:01:14.980 --> 00:01:27.870
Let's understand this by creating an interface called Customer Repository and let's change

00:01:27.870 --> 00:01:32.820
the package from controllers Toe Diego our repository,

00:01:32.820 --> 00:01:33.770
as you feel.

00:01:33.770 --> 00:01:35.600
And then importantly,

00:01:35.600 --> 00:01:39.620
we have toe extend this with credit repository.

00:01:39.620 --> 00:01:43.100
So let's say okay and then come on off this.

00:01:43.100 --> 00:01:48.000
Now you can see here that there is an error because there's an incomplete core.

00:01:48.000 --> 00:01:53.100
So we say that is the customer repository extending credit repository.

00:01:53.100 --> 00:01:55.250
Now crowd is an acronym for Create,

00:01:55.250 --> 00:01:55.490
Read,

00:01:55.490 --> 00:01:56.550
update delete.

00:01:56.550 --> 00:02:04.290
So this particular interface has already functions related toe inserting the data,

00:02:04.290 --> 00:02:06.080
retrieving the later updating,

00:02:06.080 --> 00:02:07.750
our believing the corresponding data.

00:02:07.750 --> 00:02:11.930
So we have to specify what kind of indeed the object that it works with.

00:02:11.930 --> 00:02:13.390
So he here is the type.

00:02:13.390 --> 00:02:14.340
So I'm gonna say,

00:02:14.340 --> 00:02:15.000
customer,

00:02:15.000 --> 00:02:20.930
and then I'd be Is the data type off the primary key value off this?

00:02:20.930 --> 00:02:22.560
If you go back to customer,

00:02:22.560 --> 00:02:26.680
you can see that the ivy annotation has been added toe integer.

00:02:26.680 --> 00:02:29.500
So this is the data type off our I d.

00:02:29.500 --> 00:02:35.860
So I go back to my repository and I say that the data type is integer and that's all I have

00:02:35.860 --> 00:02:36.300
to do.

00:02:36.300 --> 00:02:40.810
So if you click on this crowd repository and pressed function key four,

00:02:40.810 --> 00:02:44.420
you'll see that there are a bunch of functions over here.

00:02:44.420 --> 00:02:45.090
For example,

00:02:45.090 --> 00:02:51.820
Count gives me the number off customer objects that are available in the database billet

00:02:51.820 --> 00:02:55.320
deleting an object billet on off course.

00:02:55.320 --> 00:02:57.050
All of the records will be deleted.

00:02:57.050 --> 00:03:01.890
There is also find all exist by i d delete by i d.

00:03:01.890 --> 00:03:08.150
Save which is meant for inserting as well as updating depending on whether the Primerica is

00:03:08.150 --> 00:03:14.470
no are there is a value So all these functions are already available in our interferes.

00:03:14.470 --> 00:03:24.290
One last thing to do here is toe mark this with activate repository This way Spring knows

00:03:24.290 --> 00:03:27.430
that whenever we want an object off this class,

00:03:27.430 --> 00:03:32.080
it will create a class and then instruction and give that same thing to us.

00:03:32.080 --> 00:03:34.090
How can I use this one now?

00:03:34.090 --> 00:03:37.820
That is where we go back to our customer rest controller.

00:03:37.820 --> 00:03:39.470
And we say that Hey,

00:03:39.470 --> 00:03:43.200
we need an object off customer repository.

00:03:43.200 --> 00:03:47.050
The let's color does report will also make them as private.

00:03:47.050 --> 00:03:47.660
No,

00:03:47.660 --> 00:03:47.790
no,

00:03:47.790 --> 00:03:51.720
it is that this is a member variable of this class or bike before it is now.

00:03:51.720 --> 00:03:54.780
So we want to use this ripple on,

00:03:54.780 --> 00:03:56.440
then return an object.

00:03:56.440 --> 00:04:03.050
So we're gonna remove this C one and C two and obviously a raised art as list.

00:04:03.050 --> 00:04:06.480
I would simply have to say report art find all.

00:04:06.480 --> 00:04:10.730
Now you can see that the final is an irritable on.

00:04:10.730 --> 00:04:17.160
Beatable is a super type for list so we can't really do a return Now there are two ways to

00:04:17.160 --> 00:04:18.480
handle this scenario Number one,

00:04:18.480 --> 00:04:22.770
I can do it casting all I can change this from listed toe.

00:04:22.770 --> 00:04:23.330
Terrible.

00:04:23.330 --> 00:04:25.280
Now there is no problem.

00:04:25.280 --> 00:04:26.380
I can work with this,

00:04:26.380 --> 00:04:28.070
but there is only one issue here.

00:04:28.070 --> 00:04:30.100
Since this is a member variable,

00:04:30.100 --> 00:04:31.990
the default value for this is none.

00:04:31.990 --> 00:04:36.070
Obviously none dot Final is gonna be a null point of exception.

00:04:36.070 --> 00:04:39.320
This is where we have to tell spring that hey,

00:04:39.320 --> 00:04:45.140
when dysfunction is being called were actually needing an object of repository which is a

00:04:45.140 --> 00:04:48.430
customer repository and the customer repositories an interface.

00:04:48.430 --> 00:04:52.970
We want an object off the data type and I'll have to do is to tell spring that Hey,

00:04:52.970 --> 00:04:56.240
I need an object of customer repository and How do we do this?

00:04:56.240 --> 00:05:01.590
We simply say Activate art aware now when you say afterwards,

00:05:01.590 --> 00:05:09.110
Spring knows that this is a subtype off career depository on Spring knows every off

00:05:09.110 --> 00:05:14.220
creating a class because we have given what is the name of the class like customer.

00:05:14.220 --> 00:05:20.080
What is the primary key value on everything automatically is done at classes created on the

00:05:20.080 --> 00:05:22.650
fly on an object is also clear on the flight.

00:05:22.650 --> 00:05:25.080
That object is given to me here,

00:05:25.080 --> 00:05:27.330
so it is no longer now on it,

00:05:27.330 --> 00:05:30.700
since it is not know it's gonna go and get the data from the database.

00:05:30.700 --> 00:05:35.340
So let's go and organise imports by pressing control.

00:05:35.340 --> 00:05:40.680
Shift on Windows Command shift on Mac so everything is intact.

00:05:40.680 --> 00:05:45.080
Let's run our application and see if you get the desired output.

00:05:45.080 --> 00:05:53.420
We got one better here.

00:05:53.420 --> 00:05:53.870
That is,

00:05:53.870 --> 00:05:57.490
cannot lower driver class are their heads toward a driver.

00:05:57.490 --> 00:06:04.220
That's because we said in our application that properties that the driver class happens to

00:06:04.220 --> 00:06:08.360
be this one and it's not dead in any of the jobs.

00:06:08.360 --> 00:06:10.600
Now we could handle this in two ways.

00:06:10.600 --> 00:06:11.650
Number one.

00:06:11.650 --> 00:06:17.290
You can go back to a spring initial either and then specify that we want to look for hitch

00:06:17.290 --> 00:06:20.590
to database and then get the bomb dot XML,

00:06:20.590 --> 00:06:21.020
etcetera,

00:06:21.020 --> 00:06:21.550
etcetera.

00:06:21.550 --> 00:06:28.340
But ultimately you can add the jar directly from the hits to job that you download it

00:06:28.340 --> 00:06:28.900
earlier.

00:06:28.900 --> 00:06:33.950
So I goto Project properties and then select Joe ability.

00:06:33.950 --> 00:06:37.570
But libraries are external jobs,

00:06:37.570 --> 00:06:40.910
and then I go to my home directory where I have the hits,

00:06:40.910 --> 00:06:41.360
too.

00:06:41.360 --> 00:06:44.960
Been on day,

00:06:44.960 --> 00:06:46.700
we have hits to dash,

00:06:46.700 --> 00:06:52.830
wondered for that 1 $97 job open and then say Apply in close.

00:06:52.830 --> 00:07:00.750
Let's read on the application doctor once again and see if you got any more letters.

00:07:00.750 --> 00:07:09.540
Looks like everything is OK.

00:07:09.540 --> 00:07:12.020
Let's go back to our local host.

00:07:12.020 --> 00:07:18.660
Double seven double seven slash AP a slash customers Let's refresh and we should see 1000

00:07:18.660 --> 00:07:20.100
records over here.

