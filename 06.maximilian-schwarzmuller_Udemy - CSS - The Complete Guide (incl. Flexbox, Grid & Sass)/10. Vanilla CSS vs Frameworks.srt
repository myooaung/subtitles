1
00:00:02,230 --> 00:00:08,360
Now that we understand how we should write our code to work in as many browsers as possible and to be

2
00:00:08,360 --> 00:00:11,540
understandable and easy to maintain,

3
00:00:11,540 --> 00:00:16,370
there is another question that could come up. Once you dive deeper into CSS world,

4
00:00:16,460 --> 00:00:21,540
you'll find out that so-called CSS frameworks exist, things like Bootstrap.

5
00:00:21,680 --> 00:00:24,070
Now what are they and when should you use them?

6
00:00:24,320 --> 00:00:26,490
Let's do a quick comparison.

7
00:00:26,600 --> 00:00:32,480
We have vanilla CSS of course, with that I mean CSS code we write with the base features. We write

8
00:00:32,540 --> 00:00:34,960
all our styles and layouts on our own

9
00:00:35,030 --> 00:00:41,600
if we don't use an extra package, with extra packages, I mean things like component frameworks, for example

10
00:00:41,600 --> 00:00:43,760
Foundation or Bootstrap 4.

11
00:00:43,760 --> 00:00:46,720
These are simply third-party CSS packages,

12
00:00:46,790 --> 00:00:52,760
often they also come with Javascript portion for some interactive elements but in general, they are packages

13
00:00:52,760 --> 00:00:58,220
of code which give you prestyled components and utility classes.

14
00:00:58,220 --> 00:01:02,530
So in the end, they expose a bunch of CSS classes which you can start using

15
00:01:02,630 --> 00:01:07,420
and if you apply one of their class to one element, it immediately looks in a certain way because they

16
00:01:07,420 --> 00:01:08,990
did the styling.

17
00:01:09,020 --> 00:01:15,620
There also are utility frameworks like Tailwind CSS which are also giving you some help,

18
00:01:15,620 --> 00:01:21,590
they offer you some styles in which you can build up on, they give you some utility classes but they

19
00:01:21,590 --> 00:01:23,900
don't give you prestyled components,

20
00:01:23,900 --> 00:01:26,050
they don't do all the work for you.

21
00:01:26,060 --> 00:01:27,140
Now let's take a look.

22
00:01:27,320 --> 00:01:33,080
Obviously, our project is written with vanilla CSS all from scratch, all by ourselves,

23
00:01:33,080 --> 00:01:40,760
now I'm on getbootstrap.com which is the site of the Bootstrap package. The Bootstrap package is

24
00:01:40,760 --> 00:01:46,690
a CSS framework which you can simply install by putting that link here into your HTML file,

25
00:01:46,730 --> 00:01:52,910
this will download the Bootstrap styles and then you can start using their layout utilities, like their

26
00:01:52,910 --> 00:01:58,220
own grid which is not based on CSS grid but which actually uses the flexbox behind the scenes

27
00:01:58,400 --> 00:02:01,010
and allows you to use these helper classes

28
00:02:01,010 --> 00:02:06,850
you see here to build a grid or you use one of the many components they offer you, like these beautifully

29
00:02:06,860 --> 00:02:13,590
styled alerts or like buttons or things like their prestyled form elements.

30
00:02:13,640 --> 00:02:18,630
These are all normal HTML elements but by attaching the classes they offer to you,

31
00:02:18,710 --> 00:02:21,260
they immediately look the way they look here.

32
00:02:21,590 --> 00:02:24,140
Obviously, this has some great advantages,

33
00:02:24,200 --> 00:02:26,990
you save a lot of time writing these styles on your own

34
00:02:27,110 --> 00:02:30,100
but I'll come back to a detailed comparison in a second.

35
00:02:30,320 --> 00:02:30,740
Let's also

36
00:02:30,740 --> 00:02:35,930
have a look at Tailwind CSS first, this is kind of an alternative to Bootstrap but it follows a

37
00:02:35,930 --> 00:02:37,140
different approach.

38
00:02:37,370 --> 00:02:42,740
This does not offer with a bunch of components, you'll find no single component here,

39
00:02:43,010 --> 00:02:45,680
instead it offers a bunch of utility features.

40
00:02:45,710 --> 00:02:51,170
It also offers some layouting system which makes it easier for you to position elements and it does so

41
00:02:51,170 --> 00:02:57,950
by also exposing utility CSS classes which you can add to your code and these classes allow you to

42
00:02:57,950 --> 00:03:01,830
quickly achieve certain looks and styles and behaviors.

43
00:03:01,910 --> 00:03:06,380
Here, you've got more control over the final outcome and the look of that outcome

44
00:03:06,440 --> 00:03:11,450
but you still can build up on some of the utility classes without writing everything from scratch on

45
00:03:11,450 --> 00:03:12,220
your own.

46
00:03:12,620 --> 00:03:14,880
So which one should you use then?

47
00:03:15,110 --> 00:03:18,410
Well, let's have a look at some advantages and disadvantages.

48
00:03:18,470 --> 00:03:22,470
Vanilla CSS of course has the advantage did you have full control.

49
00:03:22,490 --> 00:03:26,660
You saw that in this course, we wrote everything from scratch on our own,

50
00:03:26,750 --> 00:03:30,850
therefore everything works and looks exactly the way we want it to be.

51
00:03:31,130 --> 00:03:35,390
You also have no or at least very little unnecessary code,

52
00:03:35,390 --> 00:03:38,890
at least if you write clean code and remove code you don't need anymore.

53
00:03:39,140 --> 00:03:43,690
You only have selectors and classes and rules which you need,

54
00:03:43,790 --> 00:03:47,740
you don't have any code lying around which doesn't do anything on your page.

55
00:03:48,140 --> 00:03:53,270
You're also free to name classes as you like and whilst you should follow some best practices when it

56
00:03:53,270 --> 00:03:53,990
comes to this,

57
00:03:54,060 --> 00:03:59,840
this of course has the advantage that you and hopefully your entire team has an easier time understanding

58
00:03:59,840 --> 00:04:01,930
which class does what.

59
00:04:01,930 --> 00:04:06,340
Of course, there are disadvantages too. You have to build everything from scratch,

60
00:04:06,470 --> 00:04:11,720
this is a lot of work and it also means that you have the full responsibility of your code.

61
00:04:11,780 --> 00:04:17,790
If you write bad code that doesn't run on some browser you need to support, that screws something up,

62
00:04:17,840 --> 00:04:19,900
that simply is too complex,

63
00:04:20,060 --> 00:04:24,290
well then this is your fault and you'll have to fix it on your own,

64
00:04:24,290 --> 00:04:27,600
you might not even recognize it for quite some time.

65
00:04:27,690 --> 00:04:35,240
Still overall, if you need full control and want to write highly optimized code, you'll of course have to

66
00:04:35,240 --> 00:04:36,700
put in the effort to do so

67
00:04:36,800 --> 00:04:43,700
but then vanilla CSS gives you everything you need for that. Component frameworks, like Bootstrap allow for

68
00:04:43,730 --> 00:04:45,410
very rapid development,

69
00:04:45,440 --> 00:04:50,400
you can build webpages in no time because all the components are already there,

70
00:04:50,450 --> 00:04:56,360
you just start dropping some classes on your HTML code. They also typically already follow some

71
00:04:56,360 --> 00:05:02,240
best practices, so the code which gets used behind the scenes should support many browsers and should

72
00:05:02,330 --> 00:05:05,030
all run relatively fast.

73
00:05:05,030 --> 00:05:09,810
And of course a big advantage is you don't have to be a CSS expert to use these frameworks,

74
00:05:09,920 --> 00:05:14,420
you can theoretically just dive into their documentation and start using their classes,

75
00:05:14,690 --> 00:05:20,030
having some CSS knowledge certainly helps but you can build nice webpages without being an expert

76
00:05:20,030 --> 00:05:21,150
at all.

77
00:05:21,170 --> 00:05:25,020
The downside obviously is, you get no or very little control,

78
00:05:25,040 --> 00:05:31,550
you can't really adjust the code. Well in some frameworks, you can do that by using SASS and so on but it's

79
00:05:31,550 --> 00:05:35,060
harder and some things just might not be really changeable.

80
00:05:35,060 --> 00:05:41,600
Keep in mind, you can always overwrite rules set up by them by simply abusing cascading and specificity

81
00:05:42,110 --> 00:05:45,310
but therefore you need to know what their rules are named like

82
00:05:45,380 --> 00:05:47,870
and you might break other things while doing so.

83
00:05:47,960 --> 00:05:53,840
So this is possible but should be used with care. Another disadvantage of component frameworks is that

84
00:05:53,840 --> 00:05:57,050
you might import unnecessary overhead code.

85
00:05:57,260 --> 00:06:04,700
If the framework gives you access to prestyled buttons, forms, alerts and modals and you only use the

86
00:06:04,700 --> 00:06:09,190
forms, you still import to the code for the other features without using it,

87
00:06:09,380 --> 00:06:12,260
that's unnecessary code your users have to download,

88
00:06:12,350 --> 00:06:14,610
so maybe also something you want to avoid.

89
00:06:14,720 --> 00:06:20,840
Now that being said, some modern frameworks like Bootstrap also allow you to only download parts of their

90
00:06:20,840 --> 00:06:21,850
feature sets,

91
00:06:21,860 --> 00:06:30,800
still it is something to be aware of. Finally, all websites tend to look the same, if you use Bootstrap

92
00:06:30,800 --> 00:06:37,160
with their default theme, your page is going to look just like that other page which uses Bootstrap with their

93
00:06:37,160 --> 00:06:38,450
default theme.

94
00:06:38,450 --> 00:06:45,290
Now there are different themes and there are ways to adjust the theme but in general, a common look can't

95
00:06:45,290 --> 00:06:46,210
be avoided

96
00:06:46,370 --> 00:06:53,030
and once you are more experienced with web development, you can see that in the web, some pages look deceivingly

97
00:06:53,060 --> 00:06:56,690
equal even though they use different colors.

98
00:06:56,690 --> 00:07:02,240
Now what about utility frameworks then? Utility frameworks allow for faster development,

99
00:07:02,240 --> 00:07:07,650
it's not as rapid as with component frameworks because you still have to write the styles on your own,

100
00:07:07,670 --> 00:07:13,510
you have to write your components so to say on your own but you can build up on some utility classes,

101
00:07:13,550 --> 00:07:16,590
so this definitely speeds up the development flow.

102
00:07:16,850 --> 00:07:19,310
They also should follow best practices,

103
00:07:19,320 --> 00:07:21,590
so you have to worry about that less

104
00:07:21,620 --> 00:07:25,820
but on the other hand since you build up on their code, you still have to write a lot of code on your

105
00:07:25,820 --> 00:07:28,580
own and there, you can mess things up again

106
00:07:29,350 --> 00:07:32,290
but still, you need no expert knowledge.

107
00:07:32,320 --> 00:07:36,850
Now that being said, you certainly need more knowledge than with component frameworks because here you

108
00:07:36,850 --> 00:07:40,680
still build a lot on your own but you don't start from scratch,

109
00:07:40,750 --> 00:07:46,220
so some knowledge is required but you probably still don't need to be an expert.

110
00:07:46,240 --> 00:07:51,460
You've certainly got more control than with component frameworks but you still don't have full control

111
00:07:51,670 --> 00:07:56,860
but a little bit at least. You still might have the problem of unnecessary overhead

112
00:07:56,860 --> 00:08:02,510
code here though, you still might import utility classes you just don't use but at least you avoid

113
00:08:02,530 --> 00:08:05,510
the problem of all websites looking the same.

114
00:08:05,530 --> 00:08:10,860
There certainly are some elements which are re-occurring but since you generally write your styles

115
00:08:10,870 --> 00:08:16,890
on components on your own, it's definitely less than you have with the component framework approach.

116
00:08:16,900 --> 00:08:20,890
Now with that, these were a lot of arguments, which one should you choose?

117
00:08:21,040 --> 00:08:24,010
Well, you have to make that decision for yourself.

118
00:08:24,010 --> 00:08:28,380
Here are the pros and cons and there is no wrong choice here,

119
00:08:28,390 --> 00:08:34,170
it really depends on what you're building, your time horizon and what your goal is in the end.
