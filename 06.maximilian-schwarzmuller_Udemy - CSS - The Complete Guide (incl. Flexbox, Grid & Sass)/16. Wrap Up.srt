1
00:00:02,880 --> 00:00:04,030
That was a lot of work

2
00:00:04,110 --> 00:00:08,200
but I think now we are able to work with the position property.

3
00:00:08,220 --> 00:00:13,110
Let me summarize what we learn throughout this module because the first thing we learned is that we have

4
00:00:13,110 --> 00:00:19,530
this position property. The position property has a default value which is applied to all elements on

5
00:00:19,530 --> 00:00:20,340
our website

6
00:00:20,460 --> 00:00:25,540
and this is the static value but we can also apply values on our own.

7
00:00:25,560 --> 00:00:33,390
These values are fixed, absolute, relative and sticky. Sticky is this more recent value though which

8
00:00:33,390 --> 00:00:39,500
is not perfect supported by all browsers yet but still it's something to keep in mind for the future.

9
00:00:39,510 --> 00:00:42,490
We also saw that we have a so-called document flow,

10
00:00:42,630 --> 00:00:49,410
this basically describes the default positioning behavior of our HTML elements. We can change this

11
00:00:49,470 --> 00:00:56,340
default document flow by adding the position property and depending on the value we applied, we can see

12
00:00:56,340 --> 00:00:59,310
it in the first box, so fixed, absolute and so on,

13
00:00:59,460 --> 00:01:06,840
the elements are either part of the document flow, for example by adding relative to it or will be executed

14
00:01:06,840 --> 00:01:07,700
from this document

15
00:01:07,700 --> 00:01:13,380
flow, for example by adding the fixed value to our position property. We also saw that we can move our

16
00:01:13,400 --> 00:01:19,950
elements after we added this position property, there we can use the top, bottom, left and right properties

17
00:01:20,250 --> 00:01:22,980
in combination with values like pixels or percentages

18
00:01:22,980 --> 00:01:29,880
for example. In connection with that, we also saw that the positioning context is a really important concept

19
00:01:30,060 --> 00:01:37,350
to understand why our elements actually move where they are moving because this positioning context defines

20
00:01:37,350 --> 00:01:43,050
the anchor point for the actual position changed and depending on the value applied for the position

21
00:01:43,050 --> 00:01:51,150
property, the positioning context changes. For fixed values, the viewport is the positioning context, for

22
00:01:51,330 --> 00:01:52,450
absolute,

23
00:01:52,500 --> 00:01:55,250
another element is the positioning context,

24
00:01:55,260 --> 00:02:01,530
this can either be the HTML element or if we have any ancestors which have the position property applied,

25
00:02:01,770 --> 00:02:05,820
this closest ancestor will be positioning context.

26
00:02:05,880 --> 00:02:09,330
We also have the element itself as a positioning context,

27
00:02:09,390 --> 00:02:16,050
this is the case whenever we apply the relative value for the position property and we have the viewport in

28
00:02:16,080 --> 00:02:17,880
combination with another element

29
00:02:17,880 --> 00:02:25,350
if we apply sticky, this rather new value as a value for the position property. We also saw that we have a

30
00:02:25,380 --> 00:02:31,920
z-index which allows us to also change the position of elements along the z-axis because so far, we

31
00:02:31,920 --> 00:02:36,780
only move the elements along the x or y-axis. With the z-index,

32
00:02:36,810 --> 00:02:40,390
we can change the default element positioning along the z-axis.

33
00:02:40,470 --> 00:02:47,580
The default value is auto which is basically equal to a number of 0 and we can change the z-index

34
00:02:47,850 --> 00:02:51,450
whenever we applied the position property to an element.

35
00:02:51,450 --> 00:02:57,180
What we also have to keep in mind is that larger values will position our elements on top of other elements,

36
00:02:57,390 --> 00:02:59,530
lowwe values will position it below them,

37
00:02:59,640 --> 00:03:05,280
so an element with a z-index of five will be positioned above an element with a value of -1

38
00:03:05,280 --> 00:03:06,310
for example.

39
00:03:06,630 --> 00:03:12,480
However this is not always true and this is also something we just saw in the assignment because we also

40
00:03:12,480 --> 00:03:20,080
have to keep in mind the stacking context. The stacking context or a new stacking context is created

41
00:03:20,080 --> 00:03:26,950
when we apply the fixed or sticky value or if we apply the absolute or relative value in combination

42
00:03:27,100 --> 00:03:34,900
with a z-index which is specified by us, we saw that just in the assignment. And the stacking context simply

43
00:03:34,900 --> 00:03:38,440
defines the stacking behavior of child elements

44
00:03:38,440 --> 00:03:45,070
and because of that, it can be the case that a child of a specific parent has a z-index of 10 but

45
00:03:45,100 --> 00:03:49,280
a neighbor element of our parent has a z-index of one only

46
00:03:49,360 --> 00:03:54,460
but still the neighbor is positioned above our children of the actual element

47
00:03:54,460 --> 00:03:59,770
and this is everything we learned throughout this module. With that, we are now ready to dive deeper into

48
00:03:59,770 --> 00:04:06,760
CSS and because of that, I will hand over to Max again which will now show you how you can work on

49
00:04:06,760 --> 00:04:09,010
background image shows and images in general

50
00:04:09,070 --> 00:04:09,930
in CSS.
