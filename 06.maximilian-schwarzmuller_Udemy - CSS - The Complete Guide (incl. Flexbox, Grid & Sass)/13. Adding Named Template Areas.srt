1
00:00:02,160 --> 00:00:07,980
Now we're already at the point where you probably will be dreaming about the grid tonight,

2
00:00:08,310 --> 00:00:15,660
so time to dive even deeper. Thus far when we wanted to position elements, like element two and three where

3
00:00:15,660 --> 00:00:18,560
we overwrote the default positioning,

4
00:00:18,630 --> 00:00:27,420
we did this by going to the child and giving it a start and end row and column to tell it where

5
00:00:27,420 --> 00:00:28,990
it should sit.

6
00:00:29,010 --> 00:00:35,520
Now this is perfectly fine and this is an approach you will probably use a lot, however you can also

7
00:00:35,520 --> 00:00:38,230
kind of reverse the process.

8
00:00:38,340 --> 00:00:44,940
You can divide your grid into areas which you assign names to and now I'm talking about the cells, not

9
00:00:44,940 --> 00:00:45,970
the lines

10
00:00:46,230 --> 00:00:50,220
and then tell the elements which areas they should occupy.

11
00:00:50,340 --> 00:00:51,330
Sounds strange?

12
00:00:51,330 --> 00:00:52,840
Let me show you how it works

13
00:00:52,920 --> 00:00:54,650
and for that, let's pick a different layout now.

14
00:00:54,660 --> 00:00:58,480
Let's say element three should take the entire first row

15
00:00:59,010 --> 00:01:06,090
and we want to position it differently, so not with grid area here but instead with this named area I

16
00:01:06,090 --> 00:01:07,440
was referring to.

17
00:01:07,440 --> 00:01:13,530
For this, we first of all remove our value for grid area and we give it a name, any name of your choice,

18
00:01:13,590 --> 00:01:14,940
maybe header.

19
00:01:14,940 --> 00:01:19,020
Now here important, no square brackets, just the name.

20
00:01:19,020 --> 00:01:22,530
Now of course if I reload, this leads to nothing,

21
00:01:22,530 --> 00:01:25,820
now the green element is somewhere here at the bottom,

22
00:01:25,830 --> 00:01:29,730
so essentially our grid is just broken.

23
00:01:29,730 --> 00:01:32,850
How we would it know what the header area is?

24
00:01:32,940 --> 00:01:38,240
Obviously it can't. We defined these areas in our container now,

25
00:01:38,250 --> 00:01:47,010
so where we set the display grid. There we can add a special property, grid template areas. We get columns

26
00:01:47,010 --> 00:01:50,420
and rows, grid template columns and grid template rows,

27
00:01:50,490 --> 00:02:00,210
now with the area's property, we can give ourselves in the grid a name which we can then use on our elements

28
00:02:00,210 --> 00:02:04,690
to position them in these marked cells. Here

29
00:02:04,710 --> 00:02:06,570
you pass a string as a value,

30
00:02:06,600 --> 00:02:11,010
so you need quotation marks, double or single quotation marks, doesn't matter,

31
00:02:11,010 --> 00:02:16,700
opening and closing and now the syntax is both easy and strange at the same time.

32
00:02:16,740 --> 00:02:20,590
It's easy because it's very close to how we humans think

33
00:02:20,730 --> 00:02:25,150
and it's strange because it's not very close to how computers normally work.

34
00:02:25,590 --> 00:02:31,710
You simply create your grid here with name values, with labels.

35
00:02:31,710 --> 00:02:33,130
So what do I mean with that?

36
00:02:33,480 --> 00:02:40,190
Our grid has four columns and it has three rows, right?

37
00:02:40,190 --> 00:02:42,370
It has one row, 5rem,

38
00:02:42,590 --> 00:02:46,400
second row with a dynamic value and a third row.

39
00:02:46,460 --> 00:02:53,210
So our grid has four times three cells, four columns and then three rows.

40
00:02:53,540 --> 00:03:00,290
Now we could normally clarify this here on our grid preview and we can do so if I comment out grid area

41
00:03:00,320 --> 00:03:03,170
header on element three so that it doesn't get broken.

42
00:03:03,170 --> 00:03:06,080
Now we can verify that we get four columns and three rows,

43
00:03:06,140 --> 00:03:10,300
so we get 12 cells.

44
00:03:10,450 --> 00:03:17,740
We now simply create a pattern of these columns and rows here in the string and we give each element

45
00:03:17,740 --> 00:03:23,860
or each cell a name, so like header and important, this is the name we then use below.

46
00:03:23,890 --> 00:03:29,920
So header and then we've got four columns, so we add header, header, header and now we have a new line

47
00:03:30,220 --> 00:03:33,550
and you simply create a new line by adding a new string,

48
00:03:33,550 --> 00:03:39,970
so outside of the first string, you add a second string and you can also put this into a new line here,

49
00:03:40,000 --> 00:03:43,840
just to really make it look more like a table

50
00:03:44,080 --> 00:03:44,910
and there, we could

51
00:03:44,910 --> 00:03:51,490
name this side side main main

52
00:03:51,640 --> 00:03:53,210
and add another row

53
00:03:53,300 --> 00:04:00,070
so to say with another string where we have the footer, footer, footer, footer.

54
00:04:00,220 --> 00:04:06,030
So important, you need to end up with as many rows and columns as you have,

55
00:04:06,040 --> 00:04:08,840
so here we got four columns and three rows.

56
00:04:08,980 --> 00:04:11,050
If I now save this and reload,

57
00:04:11,260 --> 00:04:18,820
nothing changes but now actually, we defined areas, the first row is the header area, the second row has

58
00:04:18,970 --> 00:04:23,320
two areas, the side and main and the last row has a footer area

59
00:04:23,320 --> 00:04:27,910
and now we can use these names with the grid area property.

60
00:04:28,000 --> 00:04:31,930
So now I can use header here because we've got header up here too

61
00:04:32,260 --> 00:04:40,920
and with that, if you reload, element three actually takes to full header. So this is really cool because

62
00:04:40,950 --> 00:04:49,710
now, you don't have to go to the element and tell it where to start and end, you define names and labels for

63
00:04:49,720 --> 00:04:51,810
your grid up there.

64
00:04:51,810 --> 00:04:57,330
And if there is some element which you don't want to give a label or what you want to leave empty, you

65
00:04:57,330 --> 00:04:58,970
add a dot instead, 

66
00:04:59,130 --> 00:05:06,110
so I replaced the two side labels with two dots and now, they won't have names.

67
00:05:06,150 --> 00:05:14,760
Now we can position element two and we can position it by commenting out our row and colors shorthands

68
00:05:15,120 --> 00:05:17,910
and let's say this should go into the main area,

69
00:05:17,970 --> 00:05:25,430
so now we can simply add grid area here, main. Again no square brackets or anything like that,

70
00:05:25,440 --> 00:05:30,990
now it goes into the main area and the other elements fill up the remaining space.

71
00:05:32,210 --> 00:05:40,070
Important here by the way, you see that element four also is positioned prior to element two because with the

72
00:05:40,070 --> 00:05:45,370
grid area setting here, the DOM order actually is not respected anymore.

73
00:05:45,380 --> 00:05:50,260
So this is some trivia, something important to recognize at this point.

74
00:05:51,680 --> 00:06:01,460
If we give element four its own place of course by setting this grid area to footer for example, then

75
00:06:01,460 --> 00:06:02,680
it will jump down there

76
00:06:02,840 --> 00:06:05,440
and this cell will remain empty.

77
00:06:05,450 --> 00:06:12,950
So working with grid areas is a really powerful tool which makes it very easy or much easier for us

78
00:06:13,220 --> 00:06:19,730
to define where in the grid what should be positioned and this syntax can look really strange at the

79
00:06:19,730 --> 00:06:25,150
beginning but especially when you write it like this, you can think of this as a table;

80
00:06:25,190 --> 00:06:29,660
you got three rows and each row has four columns. Just important,

81
00:06:29,660 --> 00:06:31,690
don't omit any values here,

82
00:06:31,730 --> 00:06:37,870
you have to end up with as many words or dots as you have cells in the final grid.
