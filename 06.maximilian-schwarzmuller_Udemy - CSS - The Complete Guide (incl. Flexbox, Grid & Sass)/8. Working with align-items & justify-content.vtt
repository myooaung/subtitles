WEBVTT
1
00:00:02.130 --> 00:00:05.830
Before we dive into this property I just talked about,

2
00:00:06.030 --> 00:00:12.150
I just wanted to add some information to flex direction and flex wrap because you could also write

3
00:00:12.330 --> 00:00:19.590
these two properties in a shorthand and this shorthand is called flex flow and would then be defined

4
00:00:19.590 --> 00:00:21.000
like this, so row and wrap,

5
00:00:21.060 --> 00:00:26.770
this would basically be the shorthand for flex direction, the row and flex wrap, the wrap.

6
00:00:27.000 --> 00:00:31.740
I will just stick to the separate properties because I think it's easier to read and better to learn.

7
00:00:32.430 --> 00:00:35.190
However which property am I referring to

8
00:00:35.190 --> 00:00:41.280
now to ensure that this behavior, so that the height will always follow the maximum height defined

9
00:00:41.370 --> 00:00:42.020
right here?

10
00:00:42.210 --> 00:00:53.670
Well, this property is align items, like that and the default value for align items is stretch, this one

11
00:00:53.670 --> 00:00:54.730
right here.

12
00:00:54.840 --> 00:00:59.060
If we apply that and reload the page, you can see nothing changes,

13
00:00:59.070 --> 00:01:01.910
we simply have the same behavior that we had before.

14
00:01:02.070 --> 00:01:10.410
If I change this value now to center, like that and reload the page again, then you can see that the height suddenly

15
00:01:10.410 --> 00:01:18.000
changed because with this align items property right here, we can have an impact onto the height of our

16
00:01:18.000 --> 00:01:19.050
elements

17
00:01:19.050 --> 00:01:20.650
and this is totally wrong.

18
00:01:20.790 --> 00:01:25.610
I'm just saying that because this is what you could think right here once you see that

19
00:01:25.710 --> 00:01:31.680
but if we now apply our knowledge and this knowledge was that if we change the flex direction from

20
00:01:31.680 --> 00:01:38.240
row to column, that this means the main axis also changes, so let's add column right here, like

21
00:01:38.340 --> 00:01:47.010
that and reload the page,, then you can see that it didn't really impact the height, it simply centered our

22
00:01:47.010 --> 00:01:50.350
flex items along the cross axis.

23
00:01:50.370 --> 00:01:56.860
That's really important because our cross axis, right now we have flex direction column,

24
00:01:56.910 --> 00:02:02.660
so this means our cross axis goes from left right here to the right

25
00:02:02.700 --> 00:02:07.940
and as you can see right here in the center, we now centered our items.

26
00:02:07.950 --> 00:02:17.260
If I change it back to row now right here, like that and reload the page, we centered our items along the

27
00:02:17.260 --> 00:02:22.230
cross axis, which is now from the top left corner to the bottom left corner.

28
00:02:22.240 --> 00:02:28.510
Now let me change it back to column though because I want to show you something else because if we apply

29
00:02:28.550 --> 00:02:36.760
another value for our align items property right here, for example flex start, this one, then you can

30
00:02:36.760 --> 00:02:42.740
see that if I reload that, the items are now centered at the beginning,

31
00:02:42.780 --> 00:02:51.130
well flex start, of our cross axis. Again, the cross axis now is from top left to the top right.

32
00:02:51.130 --> 00:02:56.470
We could also use flex enter for example, like this

33
00:02:56.470 --> 00:03:02.330
and if reload the page now, you can see the items are now centered along the cross axis

34
00:03:02.380 --> 00:03:08.800
but at the end of it. If I would change the flex direction back to row, like this right here and reload

35
00:03:08.830 --> 00:03:15.640
the page, then it is centered as you can see, at the end of the cross axis which now again goes from the top

36
00:03:15.640 --> 00:03:17.850
left corner to the bottom left corner.

37
00:03:19.030 --> 00:03:23.830
And what you can see right now of course is that now it has again an impact onto the height

38
00:03:23.860 --> 00:03:30.400
but keep in mind that this is only due to the fact that our cross axis now goes from the top to the

39
00:03:30.400 --> 00:03:33.220
bottom and that the items are aligned to the bottom now,

40
00:03:33.230 --> 00:03:36.510
so flex end, that's really important to keep in mind right here.

41
00:03:36.670 --> 00:03:42.000
So with that, we saw that align items always refers to the cross axis

42
00:03:42.020 --> 00:03:47.280
and now the question we might ask ourselves is, OK but what about the main axis?

43
00:03:47.290 --> 00:03:53.530
Now we can of course also define the position of our items along the main axis or along the main and

44
00:03:53.530 --> 00:04:02.440
cross axis in combination. For that, let me first maybe increase the height of our container a bit, right

45
00:04:02.440 --> 00:04:03.130
here.

46
00:04:04.200 --> 00:04:08.260
Let's say we use a height of, I don't know, 500 pixels,

47
00:04:08.280 --> 00:04:09.930
let's see what this looks like,

48
00:04:10.930 --> 00:04:15.080
yes I think a bit more, makes sense, let's say 800 pixels right here,

49
00:04:15.390 --> 00:04:17.190
yes I think this is fine.

50
00:04:17.260 --> 00:04:26.060
So if we now change the align items right here to center maybe like that, then as you know in the

51
00:04:26.090 --> 00:04:29.530
meanwhile, we have the cross axis from top to bottom,

52
00:04:29.600 --> 00:04:31.530
so the items are centered right here

53
00:04:31.610 --> 00:04:36.560
and as you can see, they are kind of starting to the left, to the beginning or at the beginning of the

54
00:04:36.560 --> 00:04:37.420
main axis,

55
00:04:37.430 --> 00:04:43.750
so right here. If I now add another property which is called justify content,

56
00:04:43.760 --> 00:04:52.100
this one right here and if I now would also apply a value of center to it, like that and reload the page,

57
00:04:52.100 --> 00:04:59.160
then you can see that the items are now both centered along the cross axis because of align items

58
00:04:59.540 --> 00:05:05.220
and at the same time, centered along the main axis because of justify content.

59
00:05:05.450 --> 00:05:11.300
If we would now change the flex direction to column again and therefore, kind of switch the main axis

60
00:05:11.360 --> 00:05:18.290
and cross axis, like that, then you can see this behavior right here because basically the space we have

61
00:05:18.350 --> 00:05:20.360
is not enough for our flex container.

62
00:05:20.540 --> 00:05:26.240
So if I increased height a bit more maybe, let's say to 1300, something like that,

63
00:05:26.300 --> 00:05:27.340
let's see,

64
00:05:27.740 --> 00:05:28.090
yes

65
00:05:28.130 --> 00:05:29.030
now it's sufficient,

66
00:05:29.060 --> 00:05:31.150
so that's maybe better to see now.

67
00:05:31.280 --> 00:05:37.760
So you can see now basically that we now have the cross axis from left to right, right here which

68
00:05:37.760 --> 00:05:45.950
is specified by align items and we have the main axis now from top to bottom, which is specified by

69
00:05:45.950 --> 00:05:47.670
justify content.

70
00:05:47.990 --> 00:05:55.790
So if I say justify content flex end right here once again, like that and reload the page, you can

71
00:05:55.790 --> 00:06:00.280
see that the items now start at the end of the main axis,

72
00:06:00.270 --> 00:06:02.350
so from here to here

73
00:06:02.900 --> 00:06:11.410
and if I would now change align items to flex start maybe, like that and go back there and reload

74
00:06:11.410 --> 00:06:12.310
the page,

75
00:06:12.350 --> 00:06:18.050
you can see that the items are not displayed at the beginning of the cross axis which is from left

76
00:06:18.050 --> 00:06:23.450
to right now, as we have flex direction column, that's important to keep in mind

77
00:06:23.570 --> 00:06:26.450
and our main axis goes from top to bottom,

78
00:06:26.470 --> 00:06:30.630
here we have flex end for justify content right here.

79
00:06:30.950 --> 00:06:35.680
Now let me maybe change it back to center though because I think this looks a bit better

80
00:06:37.400 --> 00:06:41.890
and if we reload that now, looks like that.

81
00:06:41.890 --> 00:06:47.380
And additionally, although we played around now, I think this can still be a bit of a lot of information

82
00:06:47.380 --> 00:06:48.640
to keep in mind.

83
00:06:48.680 --> 00:06:53.860
Therefore, let's go back to the slides once again and summarize what we just learned right here.

84
00:06:54.160 --> 00:06:58.370
So align items, justify content, main axis, cross axis,

85
00:06:58.450 --> 00:07:01.070
oh my God, that's a bit too much.

86
00:07:01.090 --> 00:07:02.170
It's actually not

87
00:07:02.170 --> 00:07:05.560
because let's just summarize that in easy words now

88
00:07:05.830 --> 00:07:10.380
because what we basically did is we applied a flex direction of row,

89
00:07:10.540 --> 00:07:15.160
this led to the following behavior inside our flex container right here.

90
00:07:15.220 --> 00:07:22.260
We basically had a main axis going from the top left corner to the top right corner, the cross axis

91
00:07:22.320 --> 00:07:24.670
went from the top left to the bottom left,

92
00:07:24.670 --> 00:07:26.850
that's what we saw and what we learned already.

93
00:07:26.980 --> 00:07:30.910
Now then we added justify content as a property

94
00:07:31.090 --> 00:07:38.470
and we added align items as a property. In case of flex direction row, justify content simply defines

95
00:07:38.530 --> 00:07:39.610
this,

96
00:07:39.610 --> 00:07:47.830
it defines the positioning of our flex elements along the main axis. Align items simply defines the positioning

97
00:07:47.950 --> 00:07:50.580
along the cross axis of our elements,

98
00:07:50.650 --> 00:07:57.010
so in combination of justify content, align items and flex direction, we kind of have a lot of

99
00:07:57.010 --> 00:08:02.220
control about our items, then we applied flex direction column. 

100
00:08:02.390 --> 00:08:10.060
With that, you remember the previous slide we have? We change basically the main axis of our flex container

101
00:08:10.690 --> 00:08:17.440
because now, the cross axis takes over the place of the initial main axis and with that, the main axis

102
00:08:17.440 --> 00:08:23.850
goes from the top left corner to the bottom left corner. From a justify content and the align items perspective,

103
00:08:23.890 --> 00:08:30.400
we could also say that these two switched their positions because align items now simply defines the positioning

104
00:08:30.400 --> 00:08:35.890
of the elements along the cross axis which is now basically along the row you could say and justify

105
00:08:35.890 --> 00:08:41.230
content defines the element position along the main axis, which is now the column,

106
00:08:41.230 --> 00:08:42.370
just remember that.

107
00:08:42.670 --> 00:08:48.640
So in the end, you can actually easily memorize that by saying that justify content refers to the main

108
00:08:48.640 --> 00:08:55.450
axis and the main axis depends on the flex direction and the align items refers to the cross axis,

109
00:08:55.450 --> 00:08:56.970
that's it actually.

110
00:08:57.040 --> 00:09:02.950
And with that, we summarize the core concept but still, you might want to dive deeper into that and a

111
00:09:02.950 --> 00:09:08.710
very good resource for that is again the MDN. You can find a link to this page right here attached to

112
00:09:08.710 --> 00:09:09.480
the video

113
00:09:09.760 --> 00:09:14.710
and if you scroll down, you can find some general information about flexbox

114
00:09:14.800 --> 00:09:20.800
but the more interesting part is this one right here because if you click onto align items for example,

115
00:09:21.160 --> 00:09:28.120
you can find a lot of information about the different values you can apply for this align items property.

116
00:09:28.120 --> 00:09:34.210
Now I will not dive into all of these values because to be honest, I think it's important to understand

117
00:09:34.210 --> 00:09:38.250
the basic concept but then you can play around with the values right here

118
00:09:38.410 --> 00:09:44.170
but one interesting value I would like to show you though is this one right here, align items baseline

119
00:09:44.560 --> 00:09:47.920
because if we apply that to our project right here,

120
00:09:48.160 --> 00:09:56.660
so let's say we use align items baseline and we change the flex direction back to a row though and then

121
00:09:56.660 --> 00:09:58.500
reload the page,

122
00:09:58.740 --> 00:10:01.350
then you can see something interesting.

123
00:10:01.500 --> 00:10:04.120
I'm not sure if it becomes totally clear to be honest,

124
00:10:04.120 --> 00:10:06.240
so let me zoom in a bit maybe,

125
00:10:06.660 --> 00:10:08.370
yes I think right here you can see it.

126
00:10:08.700 --> 00:10:13.950
The items are now no longer aligned right here to the top

127
00:10:13.950 --> 00:10:20.700
for example of the boxes but they are aligned to the baseline of the actual content,

128
00:10:20.700 --> 00:10:26.190
can you see it? This right here is the bottom of the x and that's the same position that the h right here

129
00:10:26.190 --> 00:10:26.930
has.

130
00:10:26.940 --> 00:10:28.780
So that's the align items

131
00:10:28.870 --> 00:10:30.620
baseline declaration

132
00:10:30.660 --> 00:10:32.400
we can also use for example.

133
00:10:32.610 --> 00:10:39.900
However, this is probably not the value we want to apply right here, so let's change it back to, well maybe

134
00:10:40.020 --> 00:10:43.190
center wasn't the worst one I think, like that,

135
00:10:43.720 --> 00:10:45.130
yes I think this looks better.

136
00:10:45.390 --> 00:10:52.920
And with that, we actually almost saw all the properties we can use in combination with the flex container,

137
00:10:52.920 --> 00:10:56.800
there is only one last property that I would like to show you.
