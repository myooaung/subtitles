WEBVTT
1
00:00:02.210 --> 00:00:05.200
So which properties did we apply automatically?

2
00:00:05.420 --> 00:00:08.240
Well we applied two properties:

3
00:00:08.270 --> 00:00:10.820
the first one is flex direction,

4
00:00:10.820 --> 00:00:15.650
that's the first property we had and the default value for this property is row.

5
00:00:16.010 --> 00:00:23.620
The second property we applied is flex wrap, this one right here with an initial value of no wrap,

6
00:00:23.630 --> 00:00:29.340
that's basically what happened automatically just by applying display flex right here.

7
00:00:29.660 --> 00:00:36.190
If we now go back to our page and we load it, we can see that nothing changes of course because as I said,

8
00:00:36.430 --> 00:00:39.750
this is basically the default behavior that we saw

9
00:00:39.850 --> 00:00:49.360
but if we now change no wrap right here to wrap like that and again, reload our page, then apparently nothing

10
00:00:49.360 --> 00:00:49.840
change

11
00:00:49.900 --> 00:00:52.740
but if we now decrease the size,

12
00:00:52.930 --> 00:00:57.670
can you see it? Actually you can see two interesting things by the way because the first thing is, as

13
00:00:57.670 --> 00:01:03.440
soon as the element would have to reduce its width below the defined value,

14
00:01:03.460 --> 00:01:10.080
so in this case 350 pixels for example, the element is wrapped and jumps into the second row.

15
00:01:10.360 --> 00:01:15.910
The second interesting thing is that the height of the element also changed now because in the first

16
00:01:15.910 --> 00:01:20.060
row, it simply adapted to the height we had defined right here.

17
00:01:20.110 --> 00:01:24.610
So this was the maximum height, therefore all the other elements adapted to that.

18
00:01:24.700 --> 00:01:27.750
Now that the element is in the second row or the new row,

19
00:01:27.790 --> 00:01:34.060
it doesn't behave like that anymore and simply uses the height it needs to simply display the content.

20
00:01:34.150 --> 00:01:40.640
If we reduce that more further, you can see that all elements are wrapped one after another, like that

21
00:01:41.260 --> 00:01:45.550
and in the end, we have displayed it all like this in one column.

22
00:01:45.550 --> 00:01:50.380
If you would further decrease it, you could see that the behavior again follows the one we saw in the beginning,

23
00:01:50.610 --> 00:01:53.750
that the width would be reduced up to the point

24
00:01:53.830 --> 00:01:57.060
where the space is needed by the actual content.

25
00:01:57.160 --> 00:01:59.150
So that's the first value we changed right here,

26
00:01:59.200 --> 00:02:02.240
we changed flex wrap to wrap.

27
00:02:02.350 --> 00:02:05.370
We also have another value called wrap reverse by the way.

28
00:02:05.410 --> 00:02:11.560
So if we would do this now and reload the page, like that, then you can see that the order simply was

29
00:02:11.560 --> 00:02:12.460
mixed up.

30
00:02:12.520 --> 00:02:13.430
Now the div,

31
00:02:13.470 --> 00:02:18.290
so the first item right here is at the bottom end the item 6 is at the top

32
00:02:18.610 --> 00:02:24.280
and if I now increase the width again, you can see that the behavior will turn back to the behavior we

33
00:02:24.280 --> 00:02:25.220
had in the beginning

34
00:02:25.270 --> 00:02:26.720
but that's important,

35
00:02:26.770 --> 00:02:32.800
the height as you can see it right here is now not displayed from the top to the bottom but now it

36
00:02:32.800 --> 00:02:37.660
starts right here and simply uses the height as it is defined right here for 250 pixels

37
00:02:37.810 --> 00:02:39.410
up to this point.

38
00:02:39.490 --> 00:02:43.200
So that's what we can change with this flex wrap property,

39
00:02:43.240 --> 00:02:49.350
it basically defines if our items should wrap and how they should wrap but let's keep it wrap

40
00:02:49.390 --> 00:02:55.360
maybe because I think that's the more expected value you would have when using such a wrap right here,

41
00:02:55.720 --> 00:02:56.470
like that.

42
00:02:57.510 --> 00:03:00.370
However, what about flex direction?

43
00:03:00.370 --> 00:03:07.090
That's also a really interesting value because if we change just from row to column right here, like

44
00:03:07.100 --> 00:03:11.770
that, just column and now reload the page,

45
00:03:12.380 --> 00:03:19.800
then you can see a lot of changes because actually, our elements now behave the way we would

46
00:03:19.820 --> 00:03:22.690
our block level elements expect to behave.

47
00:03:22.830 --> 00:03:28.790
We have the div right here for example which has no width specified, so it simply uses the entire space available

48
00:03:28.890 --> 00:03:35.960
right here, the same thing is true for the third div right here but our other divs of course which have a specified

49
00:03:35.990 --> 00:03:41.020
width only are displayed up to the point that is defined by this width,

50
00:03:41.060 --> 00:03:47.840
so right here for example, 250 pixels. If I now decrease the width, can you see it?

51
00:03:47.960 --> 00:03:51.310
The elements are not displayed below that value,

52
00:03:51.350 --> 00:03:57.190
however the other elements, for example this one right here which don't have any width defined now reduced

53
00:03:57.190 --> 00:04:01.500
the size even below the point that is actually required by the content

54
00:04:01.550 --> 00:04:02.850
as you can see it right here,

55
00:04:02.930 --> 00:04:05.850
so we can reduce it up to a minimum right there.

56
00:04:06.170 --> 00:04:13.370
So that's what we can change with the flex direction right here, we also have column reverse for example,

57
00:04:13.850 --> 00:04:18.470
partially kind of the way we saw it for the flex wrap. If I now reload

58
00:04:18.470 --> 00:04:25.040
right here, you can see that the items are now displayed from the bottom, right here, to the top

59
00:04:25.040 --> 00:04:31.190
but in the reverse order. Now as you can imagine, if we have column reverse, we also have row reverse right

60
00:04:31.190 --> 00:04:32.600
here like that

61
00:04:32.600 --> 00:04:34.830
and if I now go back and reload this one,

62
00:04:34.880 --> 00:04:39.550
then as you can probably imagine, we can see that the div starts right here,

63
00:04:39.620 --> 00:04:44.290
so the first item and the last item is displayed to the left.

64
00:04:44.330 --> 00:04:49.840
If I decrease the width right here, then you can see it also follows this wrapping behavior,

65
00:04:49.850 --> 00:04:55.610
so that in the end, this is the last item in the row which will be displayed on top then because it wraps

66
00:04:55.670 --> 00:04:58.100
from left to right basically.

67
00:04:58.110 --> 00:05:00.870
Now, let's go back to row right here though

68
00:05:00.890 --> 00:05:03.220
and let's keep the flex wrapped wrap

69
00:05:03.380 --> 00:05:11.270
and now you're probably partially confused because this was a lot of flex erection of row and column

70
00:05:11.300 --> 00:05:13.970
and reverse and of flex wrap and no wrap.

71
00:05:14.030 --> 00:05:18.230
So I think it's now time to dive back into some theory

72
00:05:18.380 --> 00:05:25.700
because with this flex direction, we have an important impact onto a core concept behind flexbox

73
00:05:25.940 --> 00:05:30.740
and that's the definition of the main axis and the cross axis.

74
00:05:30.740 --> 00:05:33.650
Now let's find out more about these in the next lecture.
