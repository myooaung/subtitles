1
00:00:02,210 --> 00:00:04,530
So let's start turning this into a grid.

2
00:00:04,670 --> 00:00:10,610
If we go back to the HTML file real quick, we see we got this wrapping container and this container

3
00:00:10,610 --> 00:00:12,570
holds all the other divs.

4
00:00:12,740 --> 00:00:19,450
Now we can turn this container into a grid by setting the display property to grid.

5
00:00:19,730 --> 00:00:27,880
Now you learned that we can set it to inline block none, inline block flex, grid is just another option

6
00:00:27,950 --> 00:00:33,820
and with that, the container element becomes a CSS grid and the elements inside of it,

7
00:00:33,830 --> 00:00:41,960
so these four divs are then positioned within the grid and with no further settings as we have it here, some

8
00:00:41,960 --> 00:00:44,160
default settings will kick in.

9
00:00:44,180 --> 00:00:45,430
Let's have a look.

10
00:00:45,710 --> 00:00:51,680
If I now reload the page, nothing changes, the elements look exactly the way it did it before.

11
00:00:51,680 --> 00:00:58,400
However if we inspect this here in the developer tools, this div, we can see display grid is taking

12
00:00:58,400 --> 00:00:59,080
effect, 

13
00:00:59,090 --> 00:01:00,450
it even gives us this grid

14
00:01:00,470 --> 00:01:07,130
icon and if we click that icon, we also see something, it maybe a bit hard to see here but if you do

15
00:01:07,130 --> 00:01:10,410
it in your browser, you should see that by clicking on that,

16
00:01:10,520 --> 00:01:13,600
some helpful lines are added.

17
00:01:13,790 --> 00:01:19,430
We've got purple lines around the block, dotted lines to the right and bottom and between the different

18
00:01:19,460 --> 00:01:22,940
elements and solid lines on the left and top

19
00:01:23,060 --> 00:01:26,700
and if you click on the layout ribbon here, you can customize this,

20
00:01:26,720 --> 00:01:27,830
you can click on that color

21
00:01:27,860 --> 00:01:34,460
icon here for example and set this to a different color which you maybe can see a bit easier, whatever

22
00:01:34,760 --> 00:01:36,200
your requirements are

23
00:01:36,530 --> 00:01:43,400
and you can also check these items here on the right to see more information, like the line numbers,

24
00:01:43,400 --> 00:01:44,910
something I'll come back to,

25
00:01:45,230 --> 00:01:49,390
area names where we don't see in effect right now but I'll also come back to that

26
00:01:49,580 --> 00:01:56,420
and this feature which is really useful to extend lines infinitely. If you check it, then the lines don't

27
00:01:56,510 --> 00:02:00,640
end after the grid container but they continue thereafter

28
00:02:00,740 --> 00:02:06,540
which makes it easier to see them especially when you have elements with a solid background as in our case

29
00:02:06,580 --> 00:02:07,250
here.

30
00:02:07,290 --> 00:02:13,370
You also see in the developer tools, this demo grid here where you can also highlight the different, let's

31
00:02:13,370 --> 00:02:19,640
call it cells and on the left, you then see that it's highlighted there too if I hover over them here on the

32
00:02:19,640 --> 00:02:20,410
right.

33
00:02:20,630 --> 00:02:26,210
Now that is really useful because this already shows us that a grid was created

34
00:02:26,210 --> 00:02:33,650
and right now it has one column, only one column but four rows, one row for each element and that's just

35
00:02:33,650 --> 00:02:40,610
because the default behavior for an element with display grid is no settings are set, then it will create

36
00:02:40,640 --> 00:02:49,010
only one column and as many rows as we have child elements. And if one of these divs had a nested child

37
00:02:49,040 --> 00:02:51,730
element, then only the wrapping div,

38
00:02:51,740 --> 00:02:59,150
so el2 let's say gets its own row, the nested elements inside of el2 or any other div would not be part

39
00:02:59,150 --> 00:02:59,700
of the grid,

40
00:02:59,720 --> 00:03:09,320
so only direct children are part of the grid so to say or are considered by the row generation mechanism.

41
00:03:09,530 --> 00:03:12,400
So this is our demo grid,

42
00:03:12,410 --> 00:03:14,000
our first simple grid.

43
00:03:14,140 --> 00:03:19,610
Now in the next lecture, we'll dive a bit deeper into this and see what else we can do with that.
