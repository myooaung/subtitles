WEBVTT
1
00:00:02.430 --> 00:00:07.310
Now that we positioned our first element, let's go back to the layouting.

2
00:00:07.680 --> 00:00:11.700
There are two important other features I want to show you right now.

3
00:00:12.120 --> 00:00:17.990
The first one is one additional unit or value you can use.

4
00:00:18.090 --> 00:00:22.380
Here we got clearly defined values for all four columns.

5
00:00:22.380 --> 00:00:31.440
Now you also got cases where you have a couple of absolute or relative non-fraction units and you simply

6
00:00:31.440 --> 00:00:36.840
want to ensure that the last column or row takes the available remaining space.

7
00:00:36.840 --> 00:00:40.290
Now obviously, you could take one fraction as a value for that

8
00:00:40.500 --> 00:00:42.490
but there also is auto.

9
00:00:42.750 --> 00:00:50.910
So if I set the template row here to auto and I reload, then it actually is only as high as it needs

10
00:00:50.910 --> 00:00:57.030
to be to fit the content in and this is generally the same behavior for the columns, though if you set

11
00:00:57.030 --> 00:01:02.040
it to auto there, it will simply occupy any remaining space.

12
00:01:02.340 --> 00:01:11.850
So if I quickly demonstrate this by setting this here let's say back to, let's say 5rem and then I replace

13
00:01:11.850 --> 00:01:14.650
the last fraction with auto,

14
00:01:14.900 --> 00:01:20.840
then you actually see it takes the full available width and the last column which has a value of auto

15
00:01:21.080 --> 00:01:25.320
is just as big as it needs to be to fill the remaining space.

16
00:01:25.430 --> 00:01:30.750
The same behavior would be true for rows if, if what?

17
00:01:31.100 --> 00:01:33.240
Well if the height of the container,

18
00:01:33.250 --> 00:01:35.870
so of the grid container here was set.

19
00:01:35.870 --> 00:01:41.610
We got no height property there and therefore, auto on the vertical axis

20
00:01:41.720 --> 00:01:47.990
will just take as much space as the content requires because there is no space to fill up because the

21
00:01:48.170 --> 00:01:56.300
overall grid container is just as high as it needs to be to fit its content as defined here in the layout

22
00:01:56.660 --> 00:01:58.040
into itself.

23
00:01:58.130 --> 00:02:05.510
If we were to give that container a height of let's say 500 pixels and I reload,

24
00:02:05.900 --> 00:02:09.110
then you see that auto actually fills that up.

25
00:02:09.110 --> 00:02:12.960
Now we got auto fill up the entire bottom row.

26
00:02:13.250 --> 00:02:19.250
If I remove auto and set this to 2rem instead, then you would see that the grid container

27
00:02:19.250 --> 00:02:24.410
still has its width but the rows don't actually fill it up.

28
00:02:24.710 --> 00:02:30.620
So this is something up to you, something you can configure just as you need it and knowing about auto

29
00:02:30.620 --> 00:02:38.660
and that you can conveniently use it to create or to fill the empty space is super important.

30
00:02:38.660 --> 00:02:45.970
Now one other important feature is that sometimes you don't have four columns with such different widths.

31
00:02:46.070 --> 00:02:50.950
Maybe you want to have four columns but they should all be equally sized,

32
00:02:50.960 --> 00:02:54.600
so let me quickly comment this out and duplicate it

33
00:02:54.710 --> 00:02:56.330
and now let me overwrite this and

34
00:02:56.330 --> 00:03:05.150
let's say we got four columns and each column is 25% or 10rem or whatever you want to have.

35
00:03:05.150 --> 00:03:11.750
So of course, what we can do is we can write 25% four times to create four columns because if I

36
00:03:11.750 --> 00:03:14.690
only write it once, we only get one column.

37
00:03:14.760 --> 00:03:20.090
So now we got four equally sized columns as you can see on the preview at the bottom right

38
00:03:20.570 --> 00:03:24.670
but writing it like this of course is a bit annoying.

39
00:03:24.680 --> 00:03:32.540
There is a helper method you can use which is called repeat, it's a CSS function and it takes two arguments.

40
00:03:32.540 --> 00:03:38.900
The second argument is the pattern it should repeat and the first argument is how often it should repeat it.

41
00:03:38.900 --> 00:03:46.350
So four with this pattern would actually create 16 columns because it repeats four columns with that

42
00:03:46.350 --> 00:03:47.650
width four times,

43
00:03:47.690 --> 00:03:55.680
if I do that, we end up with 16 columns here in the bottom right as you can see but if we remove three

44
00:03:56.340 --> 00:04:02.440
times 25%, now we create four columns with 25% for each of them.

45
00:04:02.450 --> 00:04:04.320
So now we're back to what we had before

46
00:04:04.440 --> 00:04:10.980
but with way less code to write. As I said, this can be any pattern, doesn't have to be just one value

47
00:04:11.160 --> 00:04:18.120
and doesn't have to be percentages, could be pixels, rem, fractions, fractions and pixels mixed, whatever

48
00:04:18.150 --> 00:04:20.580
your requirement is.

49
00:04:20.580 --> 00:04:26.520
So the repeat function is a very useful function for creating grids with the layout we want

50
00:04:26.520 --> 00:04:31.950
quickly. There also is one other helpful function which I want to show you,

51
00:04:32.230 --> 00:04:35.770
let's say here for my template rows here,

52
00:04:36.310 --> 00:04:41.760
I actually want to have a certain minimum and maximum height.

53
00:04:41.890 --> 00:04:47.770
So what we can do for that is we can use a special function which also ships with CSS, the minmax

54
00:04:47.770 --> 00:04:49.000
function.

55
00:04:49.000 --> 00:04:52.650
This function takes two arguments and the first one is to minimum,

56
00:04:52.790 --> 00:04:55.130
minmax not mix, minmax,

57
00:04:55.240 --> 00:04:58.300
so the first value is the minimum height

58
00:04:58.300 --> 00:05:01.210
in this case for the row, for the column it would be the width.

59
00:05:01.420 --> 00:05:06.300
So the minimum height an element should have and the second argument is the maximum height.

60
00:05:06.460 --> 00:05:14.550
So we could say the minimum height should be 10 pixels, maximum should be 200 pixels.

61
00:05:14.740 --> 00:05:22.330
If we save that and reload, then we see that for the second row, it is 200 pixels high, 

62
00:05:22.330 --> 00:05:28.740
again keep in mind you have to multiply it with 2.4 because I've got a zoom factor of 240 but it takes

63
00:05:28.740 --> 00:05:30.250
these 200 pixels.

64
00:05:30.250 --> 00:05:31.140
Why?

65
00:05:31.420 --> 00:05:36.600
Because it can do that, because we've got enough height available in our grid here,

66
00:05:36.730 --> 00:05:39.680
so it tries to fill up as much as possible.

67
00:05:40.060 --> 00:05:46.530
If I were to restrict the grid height to let's say 200 pixels overall, then this would shrink,

68
00:05:46.540 --> 00:05:49.170
now it's somewhere in between the minimum and the maximum

69
00:05:49.390 --> 00:05:56.370
and if I shrink this even more, maybe because I add one more row which also requires some space, then

70
00:05:56.380 --> 00:06:01.100
it would go to its minimum or closer to its minimum value of 10 pixels.

71
00:06:01.450 --> 00:06:07.930
So minmax is another helpful function if you want to ensure that a certain cell should have a minimum

72
00:06:08.140 --> 00:06:13.670
width or height but shouldn't become bigger than a certain maximum. This is just

73
00:06:13.690 --> 00:06:16.650
one other feature I didn't want to hide it from you,

74
00:06:16.750 --> 00:06:19.870
so this is definitely something which can come in handy too.

75
00:06:19.990 --> 00:06:23.430
And of course you can also mix and match values here too,

76
00:06:23.500 --> 00:06:27.850
you can mix percentages with pixels, with fractions, with auto

77
00:06:27.860 --> 00:06:33.170
even, so now it would not become smaller than that but would always fill whatever is there,

78
00:06:33.270 --> 00:06:38.100
otherwise something you can see if we increase the height of the width again.

79
00:06:38.260 --> 00:06:42.780
So this is really something you should keep in mind and which can be very useful.
