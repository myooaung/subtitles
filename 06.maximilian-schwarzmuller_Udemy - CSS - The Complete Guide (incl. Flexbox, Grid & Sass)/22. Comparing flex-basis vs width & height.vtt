WEBVTT
1
00:00:02.250 --> 00:00:06.480
So what's the last property that we can use for our flex items?

2
00:00:06.750 --> 00:00:08.060
Well, as before,

3
00:00:08.100 --> 00:00:13.530
let's first get rid of our flex shrink right here and right there

4
00:00:13.740 --> 00:00:19.760
and let me then add this property and the name of this property is flex basis,

5
00:00:19.800 --> 00:00:21.220
this one right here.

6
00:00:21.330 --> 00:00:29.970
Now what is the flex basis? The flex basis simply defines the size of an element, and now it's really

7
00:00:29.970 --> 00:00:33.650
important, depending on the main axis.

8
00:00:33.690 --> 00:00:37.030
So flex basis is not the width or the height,

9
00:00:37.170 --> 00:00:42.140
it can basically be both which is simply dependent on the flex direction

10
00:00:42.300 --> 00:00:44.430
and let me say that one more time,

11
00:00:44.490 --> 00:00:50.580
that's the reason why understanding the concept of main and cross axis and how this is changed is really

12
00:00:50.580 --> 00:00:52.110
crucial right here.

13
00:00:52.110 --> 00:00:56.240
However at the moment, we have a flex direction of row,

14
00:00:56.370 --> 00:00:58.980
so the main axis goes from left to right,

15
00:00:59.070 --> 00:01:00.910
we also have defined a width.

16
00:01:01.230 --> 00:01:07.940
Now with that, if I can now add a value of let's say 200 pixels to our fifth item right here,

17
00:01:08.190 --> 00:01:16.320
well then if the flex basis refers to the main axis and defines the size of our element dependent on

18
00:01:16.320 --> 00:01:17.430
the main axis,

19
00:01:17.640 --> 00:01:28.800
well then if we reload the page, we should see that our element has a width of 296.94 pixels,

20
00:01:28.980 --> 00:01:31.360
that's not equal to 300.

21
00:01:31.800 --> 00:01:38.370
But keep in mind what we learned in the last lecture, we learned that the default value for flex shrink

22
00:01:38.670 --> 00:01:39.770
is 1

23
00:01:39.960 --> 00:01:44.510
and this basically allows our element to shrink in here.

24
00:01:44.610 --> 00:01:51.660
Therefore, as we now are in a view which is kind of smaller than the initial one, as you can see it right

25
00:01:51.660 --> 00:01:56.130
here, we don't have these 300 pixels. If I now increase the size,

26
00:01:56.160 --> 00:02:06.060
you can see we have the 300 or if we go back right here and add back flex shrink of zero and maybe do

27
00:02:06.060 --> 00:02:10.950
the same thing for the last item again, because I think it makes things a bit clearer now,

28
00:02:11.370 --> 00:02:17.000
like that, then we can see if we reload the page, no matter what we do right here,

29
00:02:17.040 --> 00:02:25.110
we will have 350 pixels for our last item and 300 pixels as defined by the flex basis for the fifth

30
00:02:25.110 --> 00:02:25.820
item.

31
00:02:26.190 --> 00:02:27.650
So that's what happens right here:

32
00:02:27.840 --> 00:02:34.590
if we defined a flex basis and our flex direction is set to row, the flex basis will

33
00:02:34.700 --> 00:02:42.900
overwrite this default width property. If we use the default value for flex basis which would be auto, this

34
00:02:42.900 --> 00:02:43.910
one right here,

35
00:02:44.730 --> 00:02:50.300
it will simply apply the width right here, as we can see, like that,

36
00:02:50.330 --> 00:02:57.110
it's 350 pixels because flex basis as I said will fallback to the width value right here.

37
00:02:57.110 --> 00:03:02.720
The problem is that while I'm saying it will fallback to the width value, this is only correct because

38
00:03:02.780 --> 00:03:07.700
the main axis is now from left to right and therefore equal to the width.

39
00:03:08.120 --> 00:03:13.680
Now let's have a look at what happens if we change the flex direction to column

40
00:03:14.000 --> 00:03:20.620
and with that, we change our main axis of course which is now from top to bottom.

41
00:03:20.660 --> 00:03:21.780
So if we save that,

42
00:03:21.800 --> 00:03:26.850
keep in mind, we have a width defined but no height defined and the flex basis is auto,

43
00:03:27.230 --> 00:03:32.340
so if we go back and reload the page, you can see that element 5,

44
00:03:32.370 --> 00:03:39.690
this one right here has of course the width applied of 350 pixels as defined and the width is just as

45
00:03:39.690 --> 00:03:43.310
high as we need it for the content to be displayed

46
00:03:43.530 --> 00:03:51.270
but this means that if I now add a height right here like that, let's say of 200 pixels, like that

47
00:03:51.270 --> 00:03:56.370
and reload the page, then you can see that our fifth item now

48
00:03:56.390 --> 00:04:02.440
exactly has this height because flex basis is set to auto.

49
00:04:02.710 --> 00:04:08.720
So the flex basis will fallback to the default value set for the main axis and

50
00:04:08.780 --> 00:04:12.580
that's important. If the main axis goes from left to right,

51
00:04:12.620 --> 00:04:19.040
this will be the width right here, if the main axis goes from top to bottom, then this will be the height.

52
00:04:20.240 --> 00:04:21.390
At the same time,

53
00:04:21.410 --> 00:04:30.140
this also means that if we define a value for the flex basis, let's say of 300 pixels now, like that, this

54
00:04:30.140 --> 00:04:36.850
value will be applied because the fallback only comes into play if we set flex basis to auto. If we define

55
00:04:36.860 --> 00:04:43.010
the flex basis, it will overwrite, as we can see right here, either the height if the main axis goes from

56
00:04:43.010 --> 00:04:48.490
top to bottom or the width if the main axis goes from left to right or right to left of course

57
00:04:48.860 --> 00:04:52.630
and that's actually the basic concept of flex basis.

58
00:04:52.640 --> 00:05:00.070
Let's now maybe change the flex direction back to row because that's what I prefer to be honest

59
00:05:00.200 --> 00:05:03.900
and I think we can keep flex basis like that, that's really fine,

60
00:05:03.920 --> 00:05:11.110
as you can see, the width now is again 300 pixels and the height is 200 which we can actually also delete.

61
00:05:11.150 --> 00:05:12.400
I think this looks nicer,

62
00:05:12.440 --> 00:05:13.680
yes like that.

63
00:05:13.730 --> 00:05:16.540
Some other important things about flex basis:

64
00:05:16.610 --> 00:05:20.060
we can also use values like percentages for example,

65
00:05:20.090 --> 00:05:27.420
let's say we use 10% right here. If I now reload the page, we can see that we have a width of 201

66
00:05:27.430 --> 00:05:32.480
pixels but that's just the minimum value we need for the width to display the content

67
00:05:32.510 --> 00:05:37.870
but if I increase the size up to here, as you can see, now the width increases,

68
00:05:37.970 --> 00:05:43.050
so we have 206.19 pixels now as a width for our element

69
00:05:43.060 --> 00:05:46.600
and if we inspect the flex container right here, sorry it's not really good to see,

70
00:05:46.730 --> 00:05:54.710
and if we scroll down now right here to the bottom, we can see we have a width of the content, that's important

71
00:05:54.710 --> 00:06:01.330
so the content of the flex container has 2062 pixels

72
00:06:01.370 --> 00:06:03.890
and again, our width is 10% of that.

73
00:06:04.010 --> 00:06:05.430
So 206.2,

74
00:06:05.480 --> 00:06:08.000
that's just surrounding pixels of a width.

75
00:06:08.240 --> 00:06:12.540
So that's also what you can apply to the flex basis.

76
00:06:12.800 --> 00:06:18.970
So using percentage values for the flex basis is also possible.

77
00:06:18.980 --> 00:06:21.800
Now let me summarize what we learned about the flex basis now.

78
00:06:21.800 --> 00:06:29.540
The important thing is that the flex basis always refers to the main axis. If flex basis is set

79
00:06:29.540 --> 00:06:35.900
to auto, the fallback will either be the width if the main axis goes from left to right or right to left

80
00:06:36.440 --> 00:06:42.620
or the fallback will be the height in case the main axis goes from top to bottom or bottom to top.

81
00:06:42.800 --> 00:06:45.130
That's the first thing that we have to keep in mind.

82
00:06:45.590 --> 00:06:52.040
The second thing we have to keep in mind is that the flex basis property and all these properties

83
00:06:52.040 --> 00:06:55.720
we saw right here can only be applied to flex items.

84
00:06:55.790 --> 00:07:01.160
Therefore, we need a parent element which is a flex container and which has the display flex or inline

85
00:07:01.160 --> 00:07:03.020
flex value applied.

86
00:07:03.020 --> 00:07:09.050
These are the two things that we should keep in mind when working with flex basis and with the flex items

87
00:07:09.110 --> 00:07:10.380
specifically.

88
00:07:10.580 --> 00:07:17.090
And the last important information is that we also have a shorthand for the properties we just talked

89
00:07:17.090 --> 00:07:24.260
about because instead of writing flex grow, flex shrink and flex basis, we could simply say that we write

90
00:07:24.380 --> 00:07:30.100
flex, like that and then a default value for flex grow would be zero,

91
00:07:30.260 --> 00:07:38.770
the default for flex shrink is 1 and the default for flex basis is auto, as we learned it. With that,

92
00:07:38.890 --> 00:07:45.010
if we go back and reload the page, we can see if we need flex shrink right here by the way, like

93
00:07:45.010 --> 00:07:52.120
that, as we can see now, we basically have our default behavior back that we had when we started this

94
00:07:52.180 --> 00:07:54.120
second part of this module

95
00:07:54.310 --> 00:08:01.470
and we also saw that we can use the properties separately or combine them in this shorthand right here.

96
00:08:01.480 --> 00:08:09.340
The only problem we have right now though is that in our project, we actually do not have to use the

97
00:08:09.470 --> 00:08:16.450
flex items because our project works perfectly the way it is. Therefore showing you these flex items, logic

98
00:08:16.450 --> 00:08:22.630
and theory was really important because there might be situations where you have to use these flex items

99
00:08:22.840 --> 00:08:29.050
but from a project perspective, we are actually done with the flexbox part and therefore, we are also

100
00:08:29.050 --> 00:08:30.560
done with this module.

101
00:08:30.730 --> 00:08:33.520
So let me summarize what we learned in the next lecture.
