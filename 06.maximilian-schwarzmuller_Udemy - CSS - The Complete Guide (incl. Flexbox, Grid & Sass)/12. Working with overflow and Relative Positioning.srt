1
00:00:02,170 --> 00:00:09,850
So we saw how relative positioning works and we also saw that we can move our element out of the parent.

2
00:00:10,450 --> 00:00:12,110
Now to avoid this behavior,

3
00:00:12,190 --> 00:00:22,560
we can simply go to our parent element with the class parent right here and now add overflow hidden because this

4
00:00:22,560 --> 00:00:27,090
will exactly do what the property already indicates,

5
00:00:27,330 --> 00:00:32,570
it will hide the element once it's outside of our parent, like this

6
00:00:32,700 --> 00:00:39,570
as you can see it. If we would reuse the top distance now, maybe 2, I'm not sure,

7
00:00:39,570 --> 00:00:43,690
this is like trial and error or maybe 80, something like that,

8
00:00:43,710 --> 00:00:44,490
let's see,

9
00:00:44,820 --> 00:00:46,520
yes we can see it already,

10
00:00:46,620 --> 00:00:51,940
as soon as the element moves out of the parent element, it's invisible.

11
00:00:51,960 --> 00:00:57,840
This can be a behavior you want or not but at least it allows you to make sure that you don't place

12
00:00:57,900 --> 00:01:01,070
elements anywhere on your website.

13
00:01:01,080 --> 00:01:02,760
Now there is one problem though,

14
00:01:02,850 --> 00:01:07,500
I mentioned that in the last video. If I remove the overflow

15
00:01:07,500 --> 00:01:09,880
hidden property right here

16
00:01:10,140 --> 00:01:12,110
and also remove position relative

17
00:01:12,150 --> 00:01:16,430
and actually all the code we have for our child, like that,

18
00:01:16,510 --> 00:01:27,300
let's now say that our parent is now a relatively positioned element, like that and also pushed down

19
00:01:27,300 --> 00:01:30,720
from the top by maybe 200 pixels.

20
00:01:30,750 --> 00:01:37,200
What happens now is that if I reload the page, you could guess that, is that element is now outside

21
00:01:37,290 --> 00:01:43,330
of the parent, so the parent of our parent right here is the body element.

22
00:01:43,350 --> 00:01:44,740
We can see this right here,

23
00:01:44,970 --> 00:01:47,780
we have the div class parent inside the body,

24
00:01:47,820 --> 00:01:50,030
so body is the parent

25
00:01:50,090 --> 00:01:53,140
and now you could say well I can solve this easily,

26
00:01:53,160 --> 00:01:59,380
the only thing I have to do is I have to go to the body selector right here and add overflow

27
00:01:59,490 --> 00:02:01,820
hidden like that.

28
00:02:01,860 --> 00:02:03,160
Let's see if this works,

29
00:02:03,450 --> 00:02:09,690
as you can imagine by my voice, it probably won't work because if I unselect the inspect tool and reload the

30
00:02:09,690 --> 00:02:14,600
page, you can see I can reload it as often as I want,

31
00:02:14,630 --> 00:02:16,320
nothing changes

32
00:02:16,930 --> 00:02:18,140
and why is this happening?

33
00:02:18,320 --> 00:02:24,920
Well this is due to a default behavior of CSS. If you apply the overflow

34
00:02:24,920 --> 00:02:27,710
hidden declaration to the body element,

35
00:02:27,710 --> 00:02:31,650
this will simply be passed onto the HTML element right here,

36
00:02:31,660 --> 00:02:39,680
so in our case to the HTML selector and the consequence of that is, well you don't have the overflow hidden declaration

37
00:02:39,770 --> 00:02:41,000
on your body element,

38
00:02:41,240 --> 00:02:43,700
so the code you basically have is this one.

39
00:02:43,700 --> 00:02:46,150
You can cut this out, add it right here,

40
00:02:46,220 --> 00:02:47,270
save the file,

41
00:02:47,270 --> 00:02:52,100
so you have overflow hidden on the HTML element but not on the body element

42
00:02:52,130 --> 00:02:55,920
and if we have a look at our page now, this is the consequence,

43
00:02:56,000 --> 00:02:59,430
you don't have any impact of this declaration at all.

44
00:03:00,570 --> 00:03:03,610
This is just a default behavior of CSS

45
00:03:03,630 --> 00:03:05,490
as I said, so we cannot change that

46
00:03:05,490 --> 00:03:11,190
unfortunately. What we can do though is we can simply take the chance and also add overflow

47
00:03:11,180 --> 00:03:13,970
hidden to our body element right here.

48
00:03:14,250 --> 00:03:22,620
If we do that and reload the page, we can see that the overflow property is working again because right

49
00:03:22,650 --> 00:03:30,240
now, the overflow hidden declaration is not passed onto the HTML element because it already has such

50
00:03:30,240 --> 00:03:31,190
a declaration,

51
00:03:31,200 --> 00:03:33,020
why would it need it twice,

52
00:03:33,060 --> 00:03:34,070
doesn't make sense

53
00:03:34,230 --> 00:03:36,410
and because of that, this is working.

54
00:03:36,510 --> 00:03:42,150
It would also work if you add overflow auto by the way here, as you can see, same behavior,

55
00:03:42,360 --> 00:03:48,660
the element cannot be displayed outside the parent which is the body element in our case.

56
00:03:48,660 --> 00:03:54,380
This is just some quick tip that I wanted to show you in case you have a situation like that. If your

57
00:03:54,390 --> 00:03:56,350
parent is not the body element,

58
00:03:56,400 --> 00:03:57,830
this is not a problem at all

59
00:03:57,990 --> 00:04:03,640
but if this is the case, then you can solve this issue with this little fix right here.

60
00:04:03,750 --> 00:04:07,820
With that, we now understood the relative positioning,

61
00:04:07,950 --> 00:04:12,970
so there is only one value left that we should have a look at, sticky positioning.

62
00:04:13,260 --> 00:04:15,880
Let's see how this works in the next video.
