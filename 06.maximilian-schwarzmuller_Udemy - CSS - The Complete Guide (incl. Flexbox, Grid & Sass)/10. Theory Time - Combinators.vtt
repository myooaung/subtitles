WEBVTT
1
00:00:02.150 --> 00:00:07.910
In the last lecture, we had a first look at combinators, at one combinator to be precise.

2
00:00:07.910 --> 00:00:12.410
Now there are more combinators, four very important ones to be precise.

3
00:00:12.860 --> 00:00:21.260
Now combinators allow us to be more clear about our rules and select elements by passing more information

4
00:00:21.410 --> 00:00:23.150
to the selector.

5
00:00:23.360 --> 00:00:26.950
Now you can combine multiple selectors, not just two as a side note

6
00:00:27.170 --> 00:00:31.340
and as I mentioned, you can combine them with four important types of combinators.

7
00:00:31.340 --> 00:00:34.670
The first one is the adjacent sibling combinator,

8
00:00:34.670 --> 00:00:37.560
the second one is the general sibling combinator,

9
00:00:37.730 --> 00:00:41.870
then we have the child combinator and the descendant combinator.

10
00:00:41.870 --> 00:00:43.320
Now how do they look like?

11
00:00:43.340 --> 00:00:50.570
Here are some CSS snippets. The first one, the adjacent sibling is added by adding a plus between the

12
00:00:50.750 --> 00:00:54.670
selectors you want to combine and again these could be more than two,

13
00:00:54.800 --> 00:00:56.350
you could add more to this list,

14
00:00:56.420 --> 00:01:02.280
so it could be div + p + a to select anchor tags that are connected to the paragraph and div

15
00:01:02.330 --> 00:01:04.680
but how are they connected?

16
00:01:04.700 --> 00:01:07.710
That's something we'll explore in just a second. General sibling

17
00:01:07.720 --> 00:01:13.970
uses the tilde sign here between the selectors we want to combine. Child uses a greater than sign

18
00:01:14.150 --> 00:01:16.080
and descendant uses a whitespace and

19
00:01:16.110 --> 00:01:18.280
this is the one we use in the last lecture.

20
00:01:18.290 --> 00:01:19.990
Now what do they do in detail?

21
00:01:20.240 --> 00:01:26.480
The adjacent sibling selector simply is defined like this, again you could as for all selectors combine

22
00:01:26.480 --> 00:01:32.440
multiple ones and it simply assigns a style as shown in this example.

23
00:01:32.450 --> 00:01:34.220
Here we set a red color,

24
00:01:34.220 --> 00:01:41.930
it assigns it to all paragraphs that directly follow a h2 tag, which is why the first and last paragraph

25
00:01:41.930 --> 00:01:43.410
gets the red color here

26
00:01:43.670 --> 00:01:49.220
and the second one doesn't because the second one follows a h3 tag which is in between a h2 tag

27
00:01:49.250 --> 00:01:50.060
and the paragraph

28
00:01:50.210 --> 00:01:56.000
and therefore it's not a direct sibling of the h2 tag. The plus requires a direct siblingship so

29
00:01:56.000 --> 00:01:59.780
to say though and therefore only direct siblings get the red color.

30
00:01:59.780 --> 00:02:02.200
Now if you were to combine more than two selectors,

31
00:02:02.300 --> 00:02:06.900
so h2 + p + a, then only anchor tags

32
00:02:06.950 --> 00:02:12.510
next to paragraphs that are next to h2 tags would get the red color.

33
00:02:12.530 --> 00:02:16.410
So elements have to share the same parent here, that's also an important thing to keep in mind,

34
00:02:16.430 --> 00:02:18.000
they have to be on the same level

35
00:02:18.350 --> 00:02:24.170
and the second element or third or whatever you are selecting has to come immediately after the first

36
00:02:24.200 --> 00:02:31.090
or second, whatever you are selecting, element. The general sibling selector is connected to that

37
00:02:31.150 --> 00:02:33.130
but more flexible.

38
00:02:33.130 --> 00:02:35.020
It looks like this, this is the syntax

39
00:02:35.110 --> 00:02:37.300
and here's a code snippet. Here

40
00:02:37.360 --> 00:02:43.930
all paragraphs get the red color, even though the second one doesn't directly follow a h2 tag. For the

41
00:02:43.930 --> 00:02:50.590
general sibling, it's only important that there is a h2 sibling, doesn't have to be directly in front

42
00:02:50.590 --> 00:02:56.620
of it, just an h2 element on the same level as the paragraph in this case,

43
00:02:56.620 --> 00:03:01.750
this is the general sibling. So important thing here, you have to have the same parent

44
00:03:01.930 --> 00:03:07.790
and the second element comes after the first one but doesn't have to come directly after it.

45
00:03:07.970 --> 00:03:15.110
The child combinator uses that greater sign and that rule would change the following HTML the code to have

46
00:03:15.110 --> 00:03:22.160
a red color on the first and last paragraph but not on the one which is nested inside the article because

47
00:03:22.160 --> 00:03:27.760
this child combinator says any paragraph that is a direct child

48
00:03:27.770 --> 00:03:34.400
of a div should get that style. Now again you can use multiple here, not just two,

49
00:03:34.510 --> 00:03:41.410
you could also say an anchor tag inside a paragraph inside a div where each element is a direct child of

50
00:03:41.410 --> 00:03:47.920
the other should get a certain style and that allows you to be very precise about which childs you

51
00:03:47.920 --> 00:03:49.140
want to target.

52
00:03:49.150 --> 00:03:54.640
This is not the combinator we used in the last lecture because there I showed you that it doesn't matter

53
00:03:54.640 --> 00:03:56.730
if you have a direct parent or not,

54
00:03:56.860 --> 00:04:02.530
so this only apply styles if you are a direct child of an element.

55
00:04:02.530 --> 00:04:10.090
The last one which is the one we used is the descendant combinator, just the whitespace and here, the level

56
00:04:10.300 --> 00:04:12.100
on which you are doesn't matter,

57
00:04:12.100 --> 00:04:19.060
here in this example, all paragraphs get the red color no matter if they are a direct child of the div or

58
00:04:19.060 --> 00:04:26.560
not simply because here it just matters that there is a div somewhere above them in the DOM so to say,

59
00:04:26.800 --> 00:04:28.540
doesn't have to be a direct parent.

60
00:04:28.780 --> 00:04:33.320
So the second element is just a descendent of the first element, not a direct child.

61
00:04:34.180 --> 00:04:41.350
Now this probably is the combinator you use most often. Important about combinators, definitely use them

62
00:04:41.350 --> 00:04:47.860
if they allow you to be more precise but you should be aware that direct selectors without combinators

63
00:04:48.220 --> 00:04:51.570
are showing a little bit of a better performance.

64
00:04:51.580 --> 00:04:56.740
That being said, it's not like combinators are super bad and it's also matters on what you combine.

65
00:04:57.100 --> 00:05:03.460
In our code for example, this combinator here has a pretty good performance because we're very clear about

66
00:05:03.490 --> 00:05:04.210
the element,

67
00:05:04.360 --> 00:05:10.990
it would be worse if we had the star for example and we're then using an ID which has awesome performance

68
00:05:11.050 --> 00:05:13.450
because there aren't many IDs on the page.

69
00:05:13.540 --> 00:05:16.260
By the way, the performance for classes is also pretty great,

70
00:05:16.360 --> 00:05:19.180
so classes IDs, these have great performance,

71
00:05:19.300 --> 00:05:22.910
combinators which use them also tend to do pretty good.

72
00:05:23.320 --> 00:05:25.740
So combinators can be really helpful,

73
00:05:25.750 --> 00:05:31.840
this one is probably the combinator you use most often and they allow you to really ensure that you only

74
00:05:31.840 --> 00:05:36.540
style the elements in the parts of your app where you want to style them.

75
00:05:36.640 --> 00:05:39.820
Now let me comment this out again and let's continue.
