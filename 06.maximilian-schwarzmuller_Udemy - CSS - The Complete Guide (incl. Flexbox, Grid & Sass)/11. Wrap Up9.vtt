WEBVTT
1
00:00:02.520 --> 00:00:05.330
So let me summarize what we learned in this module.

2
00:00:05.340 --> 00:00:12.750
We had a look at CSS variables, a nice CSS feature which allows you to define your own reusable variables,

3
00:00:13.110 --> 00:00:17.250
which store values like unit, sizes, colors,

4
00:00:17.290 --> 00:00:23.820
in this example here 1rem, in this module we saw it with hex codes, which you then can reuse in your

5
00:00:23.820 --> 00:00:25.640
CSS code.

6
00:00:25.680 --> 00:00:30.690
This of course is great because it allows you to define values once which you can then use whenever you

7
00:00:30.690 --> 00:00:31.260
need them

8
00:00:31.440 --> 00:00:36.900
and if you ever need to change that value, you change it in one place and it still affects the entire

9
00:00:36.900 --> 00:00:37.940
page.

10
00:00:37.950 --> 00:00:44.420
The disadvantage is that variables are only supported in modern browsers but especially in the future,

11
00:00:44.490 --> 00:00:47.690
this is probably going to be a huge thing.

12
00:00:47.700 --> 00:00:51.130
We also had a detailed look at cross-browser support.

13
00:00:51.210 --> 00:00:56.700
We learned that browsers implement new features differently and with different speed

14
00:00:56.910 --> 00:01:02.380
until there is a clear recommendation, then they typically all have it implemented in the same way

15
00:01:02.810 --> 00:01:09.900
and we can use vendor prefixes to already take advantage of some cutting-edge features and also to support

16
00:01:09.990 --> 00:01:16.390
older browsers which might implement a certain feature with that vendor prefix at least. There also

17
00:01:16.470 --> 00:01:24.240
is the @supports query which you can use to check if a certain feature is supported in a browser and

18
00:01:24.240 --> 00:01:30.860
you enter a full property value declaration there, not just the property you want to use.

19
00:01:30.960 --> 00:01:37.560
This is very useful since it allows you to conditionally implement a certain feature and implement a

20
00:01:37.620 --> 00:01:42.030
fallback which you overwrite with the help of the support query.

21
00:01:42.390 --> 00:01:45.830
There also is the possibility of including polyfills;

22
00:01:45.840 --> 00:01:51.750
these are Javascript packages which kind of emulate certain behaviors and make them available to browsers

23
00:01:51.930 --> 00:01:54.750
which don't support the native CSS feature.

24
00:01:54.840 --> 00:02:01.860
Now polyfills are not available for all CSS features and they're also not always the best choice,

25
00:02:01.950 --> 00:02:07.080
sometimes implementing a fallback is better because polyfills come at a cost,

26
00:02:07.080 --> 00:02:10.830
the users have to download them and Javascript has to be executed

27
00:02:11.040 --> 00:02:16.420
and of course you're relying on the polyfill creator that there is no error in the polyfill,

28
00:02:16.530 --> 00:02:22.290
that's also something to consider. Another thing you should consider is normalizing CSS defaults

29
00:02:22.290 --> 00:02:23.540
across browsers.

30
00:02:23.560 --> 00:02:25.060
Now this is really up to you

31
00:02:25.350 --> 00:02:31.550
and there are packages like normalize.css, you learned about one important normalization

32
00:02:31.710 --> 00:02:36.900
that you typically want to implement and that is resetting the box sizing to border box

33
00:02:36.960 --> 00:02:39.190
but we can do that on our own.

34
00:02:39.210 --> 00:02:44.310
In general, you should be aware that browsers may have different defaults though and therefore normalizing

35
00:02:44.400 --> 00:02:49.400
them and starting from the same starting point might be something to consider.

36
00:02:50.320 --> 00:02:58.150
We also had a look at CSS class names, you should name them with kebab case because CSS is case insensitive

37
00:02:58.540 --> 00:03:02.440
and you should name them by feature and not by style,

38
00:03:02.440 --> 00:03:04.280
so a class like title-blue,.

39
00:03:04.300 --> 00:03:05.720
that's bad,

40
00:03:05.800 --> 00:03:06.750
page-title

41
00:03:06.760 --> 00:03:13.630
probably is better. In bigger projects, you also might face the issue of name collisions, so that you use

42
00:03:13.630 --> 00:03:20.590
the same class name accidentally twice and you hence overwrite yourself and concepts or approaches like

43
00:03:20.590 --> 00:03:25.520
BEM, Block Element Modifier class names can be a solution for that,

44
00:03:25.600 --> 00:03:30.140
you learned what this is and we actually used that approach throughout the entire course.

45
00:03:30.520 --> 00:03:35.770
And last but not least, there is the choice of writing vanilla CSS code versus picking a framework

46
00:03:35.770 --> 00:03:36.910
like Bootstrap.

47
00:03:37.180 --> 00:03:42.070
If you write all the styles from scratch, you've got full control but you also got the entire work and

48
00:03:42.070 --> 00:03:43.480
responsibility,

49
00:03:43.600 --> 00:03:49.450
if you use a component framework like Bootstrap, you can build webpages much faster but you might include

50
00:03:49.450 --> 00:03:51.100
code which you don't really need,

51
00:03:51.140 --> 00:03:53.690
hence you bloat the size of your webpage

52
00:03:53.770 --> 00:04:00.370
and of course, you also have less control over the code. Utility frameworks like Tailwind CSS can be

53
00:04:00.370 --> 00:04:05.700
a nice compromise since they give you some utilities you can use but don't do much else.

54
00:04:05.710 --> 00:04:07.990
So there you still write your styles on your own,

55
00:04:07.990 --> 00:04:13.800
you've just got some utility features to help you and that's it for this module.
