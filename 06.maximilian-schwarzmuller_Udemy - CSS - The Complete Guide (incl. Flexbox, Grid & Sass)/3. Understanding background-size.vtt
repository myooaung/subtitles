WEBVTT
1
00:00:02.090 --> 00:00:07.190
So back on our page, on the starting page, we have that background image here at the top.

2
00:00:07.220 --> 00:00:13.770
Now it doesn't look that bad but maybe we can enhance the way it looks like, maybe you also like this way

3
00:00:14.000 --> 00:00:21.560
but I would prefer if we would see more of that woman and less of the sky because actually if we have a

4
00:00:21.560 --> 00:00:23.700
look at our original image here,

5
00:00:23.870 --> 00:00:30.380
the freedom image, we see it's way more than just the top left part we're seeing right now. For that

6
00:00:30.410 --> 00:00:35.820
we need to position and size it, both can be done with the background property

7
00:00:35.900 --> 00:00:41.870
if you're using a background image but that's the first thing I want to dive in. Right now we always

8
00:00:41.870 --> 00:00:46.900
used background either with an image or with a solid color,

9
00:00:46.940 --> 00:00:53.580
we use the same notation but background here actually is just a shorthand, we could replace the background

10
00:00:53.600 --> 00:00:56.060
here with background-image

11
00:00:56.210 --> 00:00:56.970
URL

12
00:00:57.080 --> 00:00:58.620
freedom.jpg.

13
00:00:58.940 --> 00:01:04.160
With that if I comment out the first line and I go back to the page and I reload it,

14
00:01:04.250 --> 00:01:11.650
we see the same as before because background-image is how we actually set such an image. On the other

15
00:01:11.660 --> 00:01:17.180
hand when we use a solid color, we use background-color and set this to red

16
00:01:17.510 --> 00:01:23.630
and if you would now expect this color to overwrite the image because it was defined after it, you would

17
00:01:23.630 --> 00:01:25.590
be mistaken. If you reload,

18
00:01:25.720 --> 00:01:32.630
you see the color flash but you also see the image and we have to temporarily remove the image background

19
00:01:32.630 --> 00:01:39.810
to see the solid color because it turns out you can define multiple backgrounds, only one solid color though,

20
00:01:39.920 --> 00:01:44.020
multiple images are possible but we'll dive into this later in the module

21
00:01:44.180 --> 00:01:51.070
and therefore, you can create both an image and a color, the image will be in front of the color though.

22
00:01:51.080 --> 00:01:53.550
However here I don't want to have a color right now,

23
00:01:53.630 --> 00:01:58.980
let's go back to that image and let's find out how we can actually size and position it

24
00:01:59.150 --> 00:02:02.640
because this is not really a style I want to have.

25
00:02:02.690 --> 00:02:10.860
Now there are more background properties we can use and for sizing, background size seems to be appropriate.

26
00:02:11.150 --> 00:02:14.780
Now background size takes a couple of different values,

27
00:02:14.810 --> 00:02:18.630
for example you can simply set it to 100 pixels.

28
00:02:18.710 --> 00:02:22.110
Let's save that and let's see what this results in,

29
00:02:22.370 --> 00:02:32.060
if we reload, we see many small images. Now each image actually has a width of 100 pixels

30
00:02:32.150 --> 00:02:38.480
because if we only set one value here, this refers to the width of the image and by default, it's then

31
00:02:38.510 --> 00:02:39.360
repeated.

32
00:02:39.620 --> 00:02:45.040
Now we can turn off that repeating or control it with background-repeat.

33
00:02:45.110 --> 00:02:47.820
You can set it to no repeat to

34
00:02:47.870 --> 00:02:49.520
don't repeat the image,

35
00:02:49.550 --> 00:02:52.060
now we only got one in the top left corner

36
00:02:52.640 --> 00:02:59.070
or you set it to repeat x, to only repeat the image on the x-axis,

37
00:02:59.100 --> 00:03:05.720
if you now reload, you see there are plenty of images on the x-axis but only in one row because we don't

38
00:03:05.720 --> 00:03:10.970
repeat it on the y-axis and on the other hand there of course also let's also repeat y for cases where

39
00:03:10.970 --> 00:03:13.360
you do want to repeat it on the y-axis.

40
00:03:13.370 --> 00:03:16.170
I don't see that many use cases where you would need that

41
00:03:16.250 --> 00:03:18.800
but if you do, well that's how you do it.

42
00:03:18.800 --> 00:03:25.190
However let's set this back to no repeat and let's increase the width to let's say 300 pixels.

43
00:03:25.190 --> 00:03:27.960
Now if we reload, we can get one bigger image.

44
00:03:28.010 --> 00:03:33.060
It doesn't fit into our container though, so this is not the solution I want to end with.

45
00:03:33.110 --> 00:03:38.140
Before I dive into a solution that works for us here, let me show what you can do

46
00:03:38.210 --> 00:03:42.310
if you set a second value here, let's say to 100 pixels.

47
00:03:42.380 --> 00:03:46.500
If you do that, you set the width and height of the image.

48
00:03:46.520 --> 00:03:51.240
If you don't set it, the height has automatically adjusted to keep the aspect ratio,

49
00:03:51.470 --> 00:03:57.750
if you do set a value here, the image is forced into these dimensions, so it may very well be distorted

50
00:03:57.890 --> 00:04:03.710
and if we reload here, you'll see it is in our case because now, the image does not respect, it does

51
00:04:03.710 --> 00:04:09.950
not keep its original aspect ratio, it's forced into this dimension or into this width and height

52
00:04:09.950 --> 00:04:13.760
we set up here. Now besides pixel values, 

53
00:04:13.760 --> 00:04:18.730
you can also set percentage values like 50% for the width.

54
00:04:18.740 --> 00:04:21.690
Now you see if you reload that

55
00:04:21.830 --> 00:04:26.400
actually takes 50% of the available container width,

56
00:04:26.450 --> 00:04:30.920
you can also set it to 100% of course to take the full width.

57
00:04:30.920 --> 00:04:32.920
Now this already looks much better

58
00:04:33.230 --> 00:04:40.260
but just for completeness sake, you could also set the height to 100% and the width to 50 let's say

59
00:04:40.570 --> 00:04:47.680
and if we then have a look at this, now we again have a distorted image but the height is now fit into

60
00:04:47.680 --> 00:04:48.640
the container

61
00:04:48.890 --> 00:04:53.060
and if you don't want to distort it, you can set the first value to auto.

62
00:04:53.060 --> 00:04:58.420
Now the width will be set automatically and it will keep the aspect ratio.

63
00:04:58.430 --> 00:05:05.180
That of course as you can see leads to the image not occupying the full container in our case because

64
00:05:05.180 --> 00:05:09.150
the container happens to have a different aspect ratio in our app

65
00:05:09.260 --> 00:05:12.780
and for most web projects, this will probably be the case,

66
00:05:12.830 --> 00:05:19.750
you rarely have a perfect fit of container and image. Now these were a couple of solutions,

67
00:05:19.780 --> 00:05:27.610
please note that in the case where we had a width of 100% and a height of auto or undefined,

68
00:05:28.310 --> 00:05:31.620
that the image actually takes the full width of the container,

69
00:05:31.660 --> 00:05:38.380
it does not overlap to the left or right but it also does not overlap to the top and bottom, even though

70
00:05:38.380 --> 00:05:42.730
there the image height does not match the container height.

71
00:05:42.820 --> 00:05:48.580
The image is automatically cropped and this is also something we can control, we can control how it is

72
00:05:48.580 --> 00:05:49.270
cropped.

73
00:05:49.270 --> 00:05:55.250
Before we do that though, let's also find out one other way of defining the background size.

74
00:05:55.540 --> 00:06:01.750
Besides manually setting the width and height, you get some predefined keywords and a very useful one

75
00:06:01.870 --> 00:06:03.970
is cover. Cover,

76
00:06:04.030 --> 00:06:08.730
if you reload, essentially does the same as 100% here,

77
00:06:08.770 --> 00:06:13.830
so it sets the width to the container width. However covered does not exactly do that,

78
00:06:13.970 --> 00:06:18.470
cover finds out which part of your container,

79
00:06:18.490 --> 00:06:22.920
so width or height is the important one to be aligned to your image.

80
00:06:23.050 --> 00:06:30.940
Put in other words, our image here actually has an aspect ratio where it's wider than it's high, so it

81
00:06:30.940 --> 00:06:32.610
has landscape mode,

82
00:06:32.950 --> 00:06:34.750
the same is true for our container.

83
00:06:34.990 --> 00:06:41.410
So cover automatically finds out that it should set the width to 100% because the height will

84
00:06:41.410 --> 00:06:47.470
then have some excess space because the image, just as the container, has a height that's less than the

85
00:06:47.470 --> 00:06:48.040
width.

86
00:06:48.070 --> 00:06:54.310
If you had a portrait mode container, the opposite would be the case. Put into other words which make

87
00:06:54.310 --> 00:07:01.000
this clear, cover is a setting that will ensure that your image always fills the entire container,

88
00:07:01.210 --> 00:07:07.600
it will even zoom in if your image is smaller than the container. So cover is the best setting

89
00:07:07.600 --> 00:07:14.850
if you want to ensure that there never is any whitespace anywhere in your container. An alternative to

90
00:07:14.850 --> 00:07:21.400
this is contain. Contain actually ensures that the full image is visible in the container

91
00:07:21.540 --> 00:07:23.550
because right now, the image is cropped,

92
00:07:23.580 --> 00:07:26.020
we don't see all the parts of the image,

93
00:07:26.180 --> 00:07:30.690
this becomes clear if we reload with the sizes set to contain.

94
00:07:30.810 --> 00:07:34.320
Now you see some additional rocks at the bottom of this image.

95
00:07:34.320 --> 00:07:35.070
We also see that

96
00:07:35.070 --> 00:07:42.300
now there is some super whitespace on the right because with contain, what happens is that the image actually

97
00:07:42.630 --> 00:07:49.030
doesn't fill the entire container because contain does not make sure that the entire container is filled,

98
00:07:49.140 --> 00:07:50.310
like cover does,

99
00:07:50.310 --> 00:07:53.820
instead it ensures that the entire image is possible

100
00:07:53.970 --> 00:07:58.730
and if that means that there is some remaining space in the container, so be it.

101
00:07:58.860 --> 00:08:06.060
So contain and cover are two very useful predefined settings which you use instead of manually setting

102
00:08:06.510 --> 00:08:07.120
the size

103
00:08:07.140 --> 00:08:13.770
in many cases, in reality, to control how your image is displayed in the surrounding container.

104
00:08:13.860 --> 00:08:20.460
Now with both contain and cover, we have the case that we might want to position the image because with

105
00:08:20.460 --> 00:08:22.280
cover, we fill the entire container

106
00:08:22.290 --> 00:08:25.650
but if you watch the rocks again, you don't see them here.

107
00:08:25.920 --> 00:08:31.830
Well maybe you want to fill the entire container but show less of the sky and more of the rock,

108
00:08:31.830 --> 00:08:33.550
so of the bottom of our image.

109
00:08:33.570 --> 00:08:36.360
This is something we can control with background position,

110
00:08:36.480 --> 00:08:39.090
so let's dive into this in the next video.
