WEBVTT
1
00:00:02.480 --> 00:00:09.920
In this video, I want to work on my checkbox and to select it correctly, I'll actually use an advanced

2
00:00:10.010 --> 00:00:11.150
attribute selector.

3
00:00:11.150 --> 00:00:12.660
Now what do I mean with that?

4
00:00:12.980 --> 00:00:19.100
We can select elements by attributes like this, for example with that, we would select any element which

5
00:00:19.100 --> 00:00:26.000
has a type attribute, that would normally be true for any input element and we could also select by disabled

6
00:00:26.000 --> 00:00:27.410
or something like that.

7
00:00:27.860 --> 00:00:32.370
Now we can do more than just select with just the attribute,

8
00:00:32.450 --> 00:00:37.480
we can also restrict the set of found elements that have this attribute,

9
00:00:37.520 --> 00:00:43.990
for example we could say we only want to select an element or elements with a specific attribute value.

10
00:00:44.150 --> 00:00:48.840
So the type attribute for example should not just be set,

11
00:00:48.890 --> 00:00:51.330
it should all be equal to email.

12
00:00:51.590 --> 00:00:57.170
So this would for example select all inputs which are of type e-mail but not the ones which are of type

13
00:00:57.170 --> 00:00:59.490
password or text.

14
00:00:59.540 --> 00:01:05.500
We could also say that we want to select an element with a specific attribute value in a list.

15
00:01:05.510 --> 00:01:07.010
Now what do I mean with that?

16
00:01:07.400 --> 00:01:08.480
Here's an example,

17
00:01:08.480 --> 00:01:12.320
please notice this tilde sign in front of the equals sign,

18
00:01:12.320 --> 00:01:18.350
this is an important part of the syntax and this would for example match a paragraph that has a lang

19
00:01:18.360 --> 00:01:22.250
attribute which actually has more than one value.

20
00:01:22.490 --> 00:01:29.780
So in the lang attribute value, we got en-us and en-gb and even though it's a bit hard

21
00:01:29.780 --> 00:01:35.750
to see here, these two values are separated with a whitespace, with a blank and therefore, this is just

22
00:01:35.750 --> 00:01:38.190
a list of values for the lang attribute

23
00:01:38.280 --> 00:01:45.410
and with this attribute selector at the top here, we're saying 'Please select any element that has en-us

24
00:01:45.620 --> 00:01:46.890
in its list',

25
00:01:46.910 --> 00:01:50.960
it might have more values than that but it has to have en-us.

26
00:01:51.030 --> 00:01:54.820
Now we won't use this in this module but this is also nice to know.

27
00:01:55.490 --> 00:02:01.220
Another way of restricting the set of found elements is that we say we want to have an element with

28
00:02:01.220 --> 00:02:06.730
a specific attribute value or this attribute value as a prefix.

29
00:02:06.730 --> 00:02:08.220
Now here's another example,

30
00:02:08.270 --> 00:02:11.670
the syntax uses the pipe symbol in front of the equals sign

31
00:02:11.870 --> 00:02:16.030
and here, we would for example match this paragraph element.

32
00:02:16.070 --> 00:02:22.550
The interesting part here is that in our selector, we're saying lang should be equal to en

33
00:02:22.640 --> 00:02:30.200
or actually start with en and the important part is that start means that it has to be followed immediately

34
00:02:30.200 --> 00:02:32.360
after the part we have in the selector,

35
00:02:32.360 --> 00:02:35.160
so after the en by a dash

36
00:02:35.160 --> 00:02:39.500
but after the dash, you may have any combination of characters you want.

37
00:02:39.530 --> 00:02:46.490
Therefore, this would match this paragraph tag here which has a lang attribute with the en-us value

38
00:02:46.760 --> 00:02:53.050
because our selector matches both just en, as well as en-something.

39
00:02:53.410 --> 00:02:56.350
Now that, just like the other one next to it

40
00:02:56.360 --> 00:02:57.620
we saw a second ago,

41
00:02:57.620 --> 00:02:59.240
these are some special cases

42
00:02:59.360 --> 00:03:06.530
mostly useful if you're working with these lang attributes but nice to know. We also can select an

43
00:03:06.530 --> 00:03:10.580
element with a specific attribute value prefix,

44
00:03:10.580 --> 00:03:12.000
here's an example.

45
00:03:12.110 --> 00:03:17.900
Here we are selecting, with that special character here in front of the equal sign, we're selecting any

46
00:03:17.900 --> 00:03:21.260
element which starts with a hash,

47
00:03:21.260 --> 00:03:27.590
so where the value of the ref attribute starts with the hash to be precise, that would match an internal

48
00:03:27.680 --> 00:03:29.040
link for example.

49
00:03:29.180 --> 00:03:33.460
So here we have an anchor tag linking to some ID on our page, the

50
00:03:33.620 --> 00:03:35.510
all ID to be precise

51
00:03:35.610 --> 00:03:41.990
and with that selector, we would target this element, we would get this element because we are selecting

52
00:03:42.110 --> 00:03:45.940
all elements here which do have this href attribute

53
00:03:46.100 --> 00:03:52.510
and where the value of that attribute starts with the hash and thereafter, you may have any characters

54
00:03:52.550 --> 00:03:53.270
you want,

55
00:03:53.420 --> 00:03:59.480
so it's more flexible than the one you see in the top right corner with the pipe symbol.

56
00:03:59.510 --> 00:04:03.650
We also can target a suffix instead of a prefix,

57
00:04:03.770 --> 00:04:06.540
then we use a dollar sign in front of the equal sign

58
00:04:06.710 --> 00:04:14.260
and here we are targeting all elements that have the href attribute and that start with .de,

59
00:04:14.360 --> 00:04:21.080
so for example we would match this element which has ab.de as an anchor tag reference

60
00:04:21.080 --> 00:04:27.230
and again, this can be really useful because we don't care about the characters in front of that ending

61
00:04:27.230 --> 00:04:32.690
part, in front of that suffix and therefore, we get a lot of flexibility here.

62
00:04:32.690 --> 00:04:37.510
We can also target elements with at least one attribute value,

63
00:04:37.580 --> 00:04:40.760
for that we would use the star in front of the equal sign

64
00:04:40.760 --> 00:04:46.730
and here we would target all elements that have the source attribute and where the source attribute

65
00:04:46.980 --> 00:04:52.950
then holds some content which contains cdn, doesn't have to be at the beginning,

66
00:04:53.000 --> 00:04:56.300
doesn't have to be at the end, just somewhere in the value,

67
00:04:56.300 --> 00:05:00.500
for example we would target this image where cdn is right in the middle,

68
00:05:00.500 --> 00:05:02.920
it could be at the beginning too though, that's important.

69
00:05:04.310 --> 00:05:11.620
And last but not least, we can also turn on case sensitivity or turn it off, depending on what we want.

70
00:05:11.930 --> 00:05:17.400
If we add that i character here, at the end of our square brackets,

71
00:05:17.450 --> 00:05:23.390
so before the closing square bracket, then we would also target this element, where we have cdn

72
00:05:23.380 --> 00:05:29.490
in all uppercase characters. Note that in our selectors, we wrote it in lowercase characters and with

73
00:05:29.500 --> 00:05:33.440
the i, we're just saying we should be case insensitive,

74
00:05:33.650 --> 00:05:36.540
if you don't add the i, you are case sensitive,

75
00:05:36.560 --> 00:05:37.660
that's the default

76
00:05:37.760 --> 00:05:43.240
but with the i, you can turn that off and you can ensure that now you select elements no matter if the

77
00:05:43.240 --> 00:05:50.390
value you're looking for is lowercase, uppercase or mixed uppercase and lowercase characters.

78
00:05:50.420 --> 00:05:55.880
These are the advanced attributes selectors which can come in handy and in the next lecture, we'll see

79
00:05:55.880 --> 00:06:00.620
some of them in action when we try to select our checkbox input.
