1
00:00:02,110 --> 00:00:08,980
So our goal is to dynamically change the display property and for that, we need to understand how we

2
00:00:08,980 --> 00:00:17,740
can in general change the style of elements with Javascript, why with Javascript? Because Javascript is

3
00:00:17,740 --> 00:00:24,490
the only tool we got which allows us to run code after the page has been loaded and with this code, we

4
00:00:24,490 --> 00:00:29,140
can of course change the content or the styling of the page.

5
00:00:29,140 --> 00:00:33,670
Now you don't need to know Javascript to continue with this module here though,

6
00:00:33,880 --> 00:00:36,330
I will explain carefully what we do.

7
00:00:36,400 --> 00:00:42,490
It will help working with Javascript in general if you pick up a Javascript focused course along the

8
00:00:42,490 --> 00:00:47,860
way though but for this course, to complete this course, you'll definitely not need it.

9
00:00:48,160 --> 00:00:53,670
So we need to add Javascript and we could add it inline in our index.html

10
00:00:53,700 --> 00:00:58,050
file by adding script tags, like this.

11
00:00:58,120 --> 00:01:04,120
We can add them in the head section or in the body section and also at the end of the body section which

12
00:01:04,120 --> 00:01:11,740
typically is the wiser way of doing it because this way it will ensure that all the HTML code has been

13
00:01:11,740 --> 00:01:18,100
parsed already and we can safely access it at the point of time our script runs.

14
00:01:18,100 --> 00:01:22,640
I however won't add my script code to the HTML file,

15
00:01:22,650 --> 00:01:28,080
I'll put it in a separate Javascript file as we did it for our CSS code too.

16
00:01:28,320 --> 00:01:33,400
So I'll simply create a new file in the project folder and I'll name it shared.js

17
00:01:33,510 --> 00:01:40,870
because actually the code I put in here will be shared across the different pages of the project.

18
00:01:41,050 --> 00:01:47,260
Now that shared.js file can now be imported with the help of these script tags and you need an opening

19
00:01:47,260 --> 00:01:49,560
and closing script tag, that's important

20
00:01:49,840 --> 00:01:56,100
and here in the index.html file in our root project folder at the end of the body section

21
00:01:56,110 --> 00:02:05,050
but before the closing body tag, I'll add stript source, src and now simply a link to the shared.js

22
00:02:05,080 --> 00:02:05,770
file,

23
00:02:05,980 --> 00:02:12,970
basically just as we did it with the CSS imports, the import syntax is just a bit different.

24
00:02:13,060 --> 00:02:19,420
With that, we execute that shared.js file and a quick way of demonstrating this is to simply throw

25
00:02:19,420 --> 00:02:22,390
an alert where we say this works,

26
00:02:22,540 --> 00:02:27,240
this will create a browser default overlay alert and let's see how this looks like,

27
00:02:27,340 --> 00:02:33,310
if I reload this page, here we see this works, that is how such a browser alert looks like, it's not the

28
00:02:33,310 --> 00:02:34,520
best user experience,

29
00:02:34,570 --> 00:02:41,640
so we're not going to use this for our normal UI interaction with the user.

30
00:02:41,920 --> 00:02:47,930
So let's get rid of that alert, it was just a test to see if the file is getting imported and let's instead

31
00:02:47,950 --> 00:02:53,290
now focus on accessing the styles of HTML elements.

32
00:02:53,290 --> 00:02:55,720
This actually is a two-step process.

33
00:02:55,720 --> 00:03:00,760
First of all, we need to get access to a so-called DOM element,

34
00:03:00,760 --> 00:03:05,660
the DOM is essentially what the browser makes of our HTML code,

35
00:03:05,710 --> 00:03:10,950
it parses the HTML code and then creates a virtual representation of it,

36
00:03:10,990 --> 00:03:19,480
the document object model or in short the DOM and we can essentially access the elements in the DOM

37
00:03:19,480 --> 00:03:22,440
via Javascript and then manipulate them.

38
00:03:22,450 --> 00:03:26,610
We can manipulate their attributes, we can execute certain actions,

39
00:03:26,710 --> 00:03:28,770
we can listen to events on them,

40
00:03:28,810 --> 00:03:34,090
we can access their styles, we can access their CSS classes, we can access their content,

41
00:03:34,150 --> 00:03:36,510
we can even add and remove elements,

42
00:03:36,520 --> 00:03:42,250
these are all things you learn in a Javascript focused course though, we'll focus on selecting the elements

43
00:03:42,580 --> 00:03:45,990
and working with their styles or CSS classes.

44
00:03:46,000 --> 00:03:47,710
So how do we select an element?

45
00:03:47,950 --> 00:03:52,600
Let's go back to the index.html file and let's try selecting that backdrop.

46
00:03:52,600 --> 00:03:54,280
Now how could we do that?

47
00:03:54,400 --> 00:03:59,800
You can actually select elements with Javascript in a similar way as you select them

48
00:03:59,800 --> 00:04:01,270
via CSS,

49
00:04:01,420 --> 00:04:10,210
you can select them by tag, by ID, by attribute or by class and the detailed ways of selecting elements

50
00:04:10,240 --> 00:04:13,980
again are the topic of a Javascript focused course,

51
00:04:14,080 --> 00:04:16,090
the general approach always is the same

52
00:04:16,120 --> 00:04:19,730
so let me show you how it works. In the shared.js file, I'll

53
00:04:19,750 --> 00:04:24,310
first of all create a so-called variable to store the selected element

54
00:04:24,310 --> 00:04:27,120
you could say, so that we can later use it.

55
00:04:27,160 --> 00:04:32,400
I want to select the backdrop, so I'll name the variable backdrop but the variable name is really up to you,

56
00:04:32,410 --> 00:04:34,910
it doesn't have to be the same name as the class,

57
00:04:34,930 --> 00:04:36,680
this is not required.

58
00:04:37,300 --> 00:04:45,610
So this variable should hold a value, it should hold a reference to the HTML element, to the DOM element.

59
00:04:45,630 --> 00:04:48,550
We do this by using the document object,

60
00:04:48,550 --> 00:04:50,770
this is a default element

61
00:04:50,770 --> 00:04:55,130
you can say, we can access in the Javascript code provided by the browser,

62
00:04:55,270 --> 00:04:58,550
it gives us access to the parsed document.

63
00:04:58,570 --> 00:05:01,470
Remember I was talking about the document object model,

64
00:05:01,480 --> 00:05:08,560
well this gives us basically access to the document object model. On the document, we can access a lot

65
00:05:08,560 --> 00:05:15,340
of properties and methods and the method we'll need to get access to an element is the query selector

66
00:05:15,610 --> 00:05:23,500
method. Query selector is executed like this with parentheses and then we pass an argument within the

67
00:05:23,500 --> 00:05:28,870
parentheses and this argument now actually is just a normal CSS selector,

68
00:05:28,870 --> 00:05:32,650
just as you could put it into your CSS code too.

69
00:05:32,740 --> 00:05:40,150
You can use a tag here, an ID, an attribute selector or a class selector and you can also use combinators

70
00:05:40,570 --> 00:05:47,170
like you could do some class and then add another class to point at an element which has another

71
00:05:47,170 --> 00:05:50,270
class which has some parent with some class.

72
00:05:50,350 --> 00:05:54,140
Here however, I'm interested in an element with backdrop,

73
00:05:54,310 --> 00:05:57,100
so this is how I can select my backdrop.

74
00:05:57,100 --> 00:06:00,460
Now here's a nice way of seeing what we actually selected,

75
00:06:00,580 --> 00:06:05,320
we can use console log backdrop, like this.

76
00:06:05,320 --> 00:06:11,170
Let's save that code and go back to the page and now make sure to open your developer tools and open

77
00:06:11,170 --> 00:06:13,980
that console tab there.

78
00:06:14,050 --> 00:06:17,900
If you now reload the page, you should see the log here

79
00:06:17,920 --> 00:06:24,590
coming from our Javascript files and it should log the element it selected. It logs it in element

80
00:06:24,610 --> 00:06:25,640
view here,

81
00:06:25,720 --> 00:06:32,060
if you change console log to console dir, you actually see it in an object notation.

82
00:06:32,050 --> 00:06:33,640
Now this is basically the object

83
00:06:33,640 --> 00:06:41,560
you can now work with in Javascript and you see it's an object with a lot of properties and methods you

84
00:06:41,560 --> 00:06:48,530
can call. This is the DOM representation of an HTML element and it is what we can work with.

85
00:06:48,700 --> 00:06:56,110
Now important, our backdrop here essentially selects elements by class,

86
00:06:56,320 --> 00:07:00,310
now query selector will always just select one element,

87
00:07:00,460 --> 00:07:05,870
the first element with that selector it finds. Since this is a CSS class selector,

88
00:07:05,910 --> 00:07:08,680
it could find multiple occurrences.

89
00:07:08,800 --> 00:07:12,490
Now query selector like I just said will always select the first one,

90
00:07:12,490 --> 00:07:19,050
if you get a case where you need to get access to all of them in a so-called array, you can use query

91
00:07:19,060 --> 00:07:20,490
selector all.

92
00:07:20,530 --> 00:07:25,320
How this would select all elements with the backdrop class and would return an array.

93
00:07:25,540 --> 00:07:30,940
If I now save this and reload, you'll see we got a node list essentially and we would have to access

94
00:07:30,940 --> 00:07:35,590
the element with the index 0, which is the first element, to get access to the first element with the

95
00:07:35,590 --> 00:07:36,280
backdrop

96
00:07:36,400 --> 00:07:41,440
and if we had multiple elements, we would have multiple elements of that list.

97
00:07:41,440 --> 00:07:45,480
However back to query selector because I just want to have the first element,

98
00:07:45,520 --> 00:07:47,190
I only got one anyways,

99
00:07:47,590 --> 00:07:50,680
I just wanted to show you that this alternative exists.

100
00:07:50,800 --> 00:07:58,330
So this is how we access an element, if we now reload again to see it, let's inspect which properties we

101
00:07:58,330 --> 00:07:59,250
got here.

102
00:07:59,260 --> 00:08:05,230
We see we got a bunch of properties here with all kinds of information and a very interesting one

103
00:08:05,230 --> 00:08:11,700
when it comes to styling can be found towards the end of that list, the style property.

104
00:08:11,740 --> 00:08:19,300
Now if we expand this, we actually see all the style properties we can set for this element and their

105
00:08:19,300 --> 00:08:20,980
respective values.

106
00:08:20,980 --> 00:08:27,850
Now one thing that can be confusing, if you scroll down to set index for example, you actually see that

107
00:08:27,850 --> 00:08:29,910
it has no value here,

108
00:08:30,070 --> 00:08:31,780
it's empty.

109
00:08:31,780 --> 00:08:38,480
Now if we inspect our CSS code for the backdrop though, in shared.css,

110
00:08:38,560 --> 00:08:41,950
you'll see that we actually have a set index of 100.

111
00:08:42,010 --> 00:08:49,810
So why can't we see this here? Because of all the styles here are added as inline styles to the element and

112
00:08:49,810 --> 00:08:54,160
this element, as all our elements, got no inline styles.

113
00:08:54,340 --> 00:08:55,180
That's important,

114
00:08:55,210 --> 00:08:58,620
the style property allows you to access inline styles.

115
00:08:58,900 --> 00:09:02,440
I'll also show you how to access classes later in this module,

116
00:09:02,440 --> 00:09:08,050
for now let's work with this inline styles. Since inline styles overwrite all other styles,

117
00:09:08,050 --> 00:09:12,970
we can simply manipulate a style with the help of that style property

118
00:09:12,970 --> 00:09:19,340
to change the appearance or the look of the element. Back in our shared.js file,

119
00:09:19,430 --> 00:09:26,200
what we can do instead of logging this is we can access the backdrop and then the style property we

120
00:09:26,200 --> 00:09:26,990
just saw

121
00:09:27,130 --> 00:09:36,060
and then there, maybe for example the display property and keep in mind, we set it to none in our class.

122
00:09:36,100 --> 00:09:43,150
Now here we set inline styles and we can set a new value by simply adding an equal sign and then assigning

123
00:09:43,150 --> 00:09:48,570
the new value which has to be a string and then block for example,

124
00:09:48,700 --> 00:09:53,690
this will overwrite our display none style from the CSS class.

125
00:09:53,710 --> 00:10:00,160
Therefore if I save this Javascript file and I reload again, we see the backdrop again,

126
00:10:00,300 --> 00:10:08,320
it's again there because if we inspect it, we can see in our styles that we set display

127
00:10:08,380 --> 00:10:17,210
block here as an inline style which overwrites our class display none style. This is how we can select

128
00:10:17,220 --> 00:10:21,030
elements in Javascript and how we can manipulate the styles.

129
00:10:21,030 --> 00:10:27,720
Now let's also add an event listener to not do this by default but to instead manipulate what needs

130
00:10:27,720 --> 00:10:28,830
to be manipulated

131
00:10:28,920 --> 00:10:31,800
whenever we click one of these choose plan buttons here.
