1
00:00:02,230 --> 00:00:09,020
Now that we talked a lot about the general capabilities of the grid and especially about how you can

2
00:00:09,020 --> 00:00:11,090
position things in the grid,

3
00:00:11,090 --> 00:00:15,860
let's talk about the automatic capabilities of the grid.

4
00:00:15,860 --> 00:00:18,500
We already saw them partly in action,

5
00:00:18,530 --> 00:00:21,290
now I want to dive deeper. Attached to this video,

6
00:00:21,290 --> 00:00:24,960
you'll find yet another little theory starting project.

7
00:00:25,070 --> 00:00:27,110
If you open and run it, it looks like this,

8
00:00:27,110 --> 00:00:29,680
well like this without the grid preview,

9
00:00:29,930 --> 00:00:35,400
so it's a collection of quotes. You might identify which quote is by me and which quotes are owned by

10
00:00:35,480 --> 00:00:37,130
other famous people.

11
00:00:37,130 --> 00:00:45,320
So this is our collection of quotes and it's basically distributed there or handled by a grid.

12
00:00:45,320 --> 00:00:48,900
The grid still is on the container class here with display grid

13
00:00:49,010 --> 00:00:57,290
and the only thing I did when it comes to laying the grid out and styling it is I defined columns, two columns

14
00:00:57,350 --> 00:00:58,660
of equal size.

15
00:00:58,670 --> 00:01:00,170
Of course I could have used

16
00:01:00,170 --> 00:01:05,220
repeat to 15rem instead of manually setting this,

17
00:01:05,240 --> 00:01:06,590
so this is an alternative.

18
00:01:06,590 --> 00:01:08,270
This is not what it's about though,

19
00:01:08,270 --> 00:01:10,360
so this only creates two columns

20
00:01:10,550 --> 00:01:17,270
but as you can clearly see here on the page, we've got more than one row or no row because I didn't define

21
00:01:17,270 --> 00:01:23,300
any rows but actually, you see we got four rows, you can see it really well in the preview here,

22
00:01:23,300 --> 00:01:24,850
in the bottom corner.

23
00:01:25,160 --> 00:01:31,100
Now the reason for the existence of these rows is that by default as I already explained at the beginning

24
00:01:31,100 --> 00:01:40,100
of this module, if you add display grid to any element, it will put all its child elements, its direct

25
00:01:40,220 --> 00:01:42,950
child elements into new rows,

26
00:01:42,950 --> 00:01:45,790
it will create new rows dynamically.

27
00:01:45,880 --> 00:01:51,330
This of course is a good behavior because it ensures that we can create dynamic grids,

28
00:01:51,380 --> 00:01:58,520
so if we happen to have a page where we don't know how many rows we need, for example because the user

29
00:01:58,520 --> 00:02:04,490
can create them with the help of some Javascript function that adds elements to the DOM, anything like

30
00:02:04,490 --> 00:02:05,070
that,

31
00:02:05,090 --> 00:02:11,540
so whenever we don't know how many rows we need, we can rely on the grid automatically creating them.

32
00:02:11,570 --> 00:02:17,150
However, thus far we didn't really have a look at how we can control the size of these rows

33
00:02:17,150 --> 00:02:25,130
for example. As it looks, the default size is auto because each cell here essentially is just as big as

34
00:02:25,130 --> 00:02:32,540
its content requires it to be or its neighbor column here as in the case of this element here. The content

35
00:02:32,540 --> 00:02:34,610
wouldn't require it to have such a big cell

36
00:02:34,640 --> 00:02:39,320
but of course the neighbor element has the requirement of having such a big cell

37
00:02:39,350 --> 00:02:44,090
and since it's in the same row, the row height is adjusted and the other element also gets the same

38
00:02:44,090 --> 00:02:44,770
row height.

39
00:02:45,380 --> 00:02:48,200
But we can of course overwrite this default,

40
00:02:48,350 --> 00:02:53,270
we can add grid auto rows here as a property.

41
00:02:53,270 --> 00:03:00,740
This allows us to create the style of automatically generated rows. The default here is auto which means

42
00:03:00,740 --> 00:03:02,550
the size will be auto,

43
00:03:02,690 --> 00:03:07,330
we can overwrite the size for example to 30rem.

44
00:03:07,530 --> 00:03:09,410
If I do that and I reload,

45
00:03:09,410 --> 00:03:17,990
now you see we got very very huge cells because now every newly generated row does not orientate itself

46
00:03:18,080 --> 00:03:22,630
on the content it holds but it simply has a height of 30rem.

47
00:03:22,640 --> 00:03:24,250
Now this is a bit too big maybe so

48
00:03:24,290 --> 00:03:30,430
let's set this back to 11 or 12rem maybe, let's save this,

49
00:03:30,470 --> 00:03:33,530
now we got some nicer items here.

50
00:03:33,590 --> 00:03:38,750
Now obviously, auto might have not been a bad setting here but if you want to ensure that all rows are

51
00:03:38,750 --> 00:03:44,960
equally sized, then being able to set a clearly defined height here is certainly a nice tool

52
00:03:45,170 --> 00:03:51,350
and of course you can also use minmax here for example to define a minimum height of 8rem but auto

53
00:03:51,460 --> 00:03:57,380
otherwise, now it would not be equally sized but they also wouldn't be as small as they were before.

54
00:03:57,470 --> 00:03:59,760
So this might also be a look you're interested in,

55
00:03:59,840 --> 00:04:05,620
the main takeaway here is that grid auto rows allows you to define the size of the newly added rows,

56
00:04:05,690 --> 00:04:07,850
something we weren't able to do previously.

57
00:04:09,460 --> 00:04:11,550
Now that we had a look at grid auto rows,

58
00:04:11,590 --> 00:04:16,000
let's also have a look at how we can automatically add columns.

59
00:04:16,000 --> 00:04:22,360
Right now the default behavior is that new content automatically is put in a new row. This is not the

60
00:04:22,360 --> 00:04:28,480
worst default behavior because especially if we consider that we're most of the time designing for mobile

61
00:04:28,480 --> 00:04:35,120
phones first, adding content at the bottom is typically a better idea than adding it to the right

62
00:04:35,380 --> 00:04:37,980
but you can switch that behavior nonetheless. 

63
00:04:37,990 --> 00:04:46,910
You can tell the grid cannot add new items as a new row but to instead append new columns,

64
00:04:47,110 --> 00:04:50,950
you do this by adding the grid auto flow property.

65
00:04:51,160 --> 00:04:55,390
You might have guessed that grid auto columns is the right one but this actually will be required to

66
00:04:55,390 --> 00:04:57,970
set the size of these automatically added columns,

67
00:04:58,030 --> 00:05:04,800
grid auto flow allows you to define where new elements should be added, as a row which is the default,

68
00:05:04,840 --> 00:05:11,830
which is why we didn't set it previously or as a column which is the value I'm now setting. With this

69
00:05:11,890 --> 00:05:13,850
set to column if we reload,

70
00:05:14,020 --> 00:05:16,540
you see now all the content is added to the right

71
00:05:16,600 --> 00:05:20,840
which clearly doesn't lead to the best design we ever had

72
00:05:21,040 --> 00:05:27,040
but it is a possible approach you can take in case you want to ensure that you never add new rows but

73
00:05:27,070 --> 00:05:30,610
always new columns as you add more more elements.

74
00:05:30,640 --> 00:05:34,840
Be aware, you can still manually create rows with grid template rows of course,

75
00:05:34,870 --> 00:05:36,680
this is something that's never affected,

76
00:05:36,700 --> 00:05:39,260
you can always explicitly add columns and rows,

77
00:05:39,430 --> 00:05:41,940
we're just talking about the automatically added ones,

78
00:05:42,010 --> 00:05:49,080
so for cases where you didn't define them yourself. So this is grid auto flow and for completeness sake, of course

79
00:05:49,080 --> 00:05:55,860
you got rid auto columns then. If grid auto flow is set to column, then you obviously also want to

80
00:05:55,860 --> 00:06:02,880
give these newly added columns a style and that would be the width of these columns, so maybe 5rem.

81
00:06:02,910 --> 00:06:04,630
If you set it to this,

82
00:06:04,800 --> 00:06:07,830
now it's really ugly but this is something you can do

83
00:06:08,010 --> 00:06:14,250
and again, this will of course be overwritten for your explicitly set columns. So the widths you assign here

84
00:06:14,340 --> 00:06:18,160
of course take precedence over the auto columns.

85
00:06:18,240 --> 00:06:24,840
Now with all these properties set here, grid auto rows flow and columns, you now got a lot of controls

86
00:06:24,990 --> 00:06:27,120
to customize the behavior of the grid

87
00:06:27,150 --> 00:06:33,370
when it comes to automatically added items. Now I'll set auto flow back to row because it looks better

88
00:06:33,510 --> 00:06:37,170
but it's important to keep in mind that you can change it if you need to change it.
