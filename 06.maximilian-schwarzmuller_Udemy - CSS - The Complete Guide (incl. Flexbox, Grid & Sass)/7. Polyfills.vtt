WEBVTT
1
00:00:02.210 --> 00:00:05.900
We stay in the world of things not working in a browser,

2
00:00:06.050 --> 00:00:12.020
let's talk about polyfills, what is a polyfill? A polyfill is a Javascript package which enables

3
00:00:12.110 --> 00:00:16.640
certain CSS features in browsers which would not support it otherwise.

4
00:00:16.640 --> 00:00:23.360
Now obviously, we learned about vendor prefixes, which help us support older browsers and about the supports

5
00:00:23.360 --> 00:00:26.960
query which helps us implementing nice fallbacks.

6
00:00:27.080 --> 00:00:31.900
Sometimes, there is no prefix we can use because some browsers simply doesn't support a feature,

7
00:00:31.900 --> 00:00:33.290
not even with a prefix

8
00:00:33.410 --> 00:00:38.120
and we also don't want to implement a fallback, we want to use that cool feature which we can use in

9
00:00:38.120 --> 00:00:39.640
modern browsers too.

10
00:00:40.130 --> 00:00:46.340
For some CSS features, so-called polyfills exist. These are Javascript packages which

11
00:00:46.340 --> 00:00:53.660
you can download and import into your code and they will simply parse your CSS code and then style

12
00:00:53.720 --> 00:00:55.200
your page accordingly

13
00:00:55.250 --> 00:00:56.830
with some Javascript logic,

14
00:00:56.960 --> 00:01:04.010
so they basically implement a certain feature by falling back to other CSS features and kind of replicating

15
00:01:04.010 --> 00:01:08.880
that look you want it to have. Now polyfills are not available for every CSS feature though,

16
00:01:08.900 --> 00:01:14.810
for example for the grid, there are no polyfills because the grid uses some techniques that simply can't

17
00:01:14.810 --> 00:01:18.690
be replicated easily with vanilla CSS and Javascript

18
00:01:18.890 --> 00:01:22.030
but for some features, polyfills are an option.

19
00:01:22.250 --> 00:01:24.330
There is something important to keep in mind though,

20
00:01:24.530 --> 00:01:26.310
polyfills come at a cost,

21
00:01:26.540 --> 00:01:32.590
it's a Javascript package you download, you add and you import into your HTML file.

22
00:01:32.980 --> 00:01:37.430
Therefore, your users have to download it and then it will execute,

23
00:01:37.430 --> 00:01:40.980
it will parse the DOM, it will manipulate some styles,

24
00:01:41.000 --> 00:01:44.660
these all impacts the performance of your page.

25
00:01:44.660 --> 00:01:50.450
So especially for bigger polyfills because some feature might be very complicated to replicate,

26
00:01:50.450 --> 00:01:56.960
you should really consider if implementing a fallback, with supports or something like that, isn't a better

27
00:01:56.960 --> 00:01:57.810
solution.

28
00:01:57.980 --> 00:02:02.720
If you come to the conclusion that it isn't, polyfills are a great tool but you should really use

29
00:02:02.720 --> 00:02:05.600
them with care and use them rarely.

30
00:02:05.780 --> 00:02:11.200
Now to give you an idea about what could be polyfilled when it comes to CSS, for example

31
00:02:11.210 --> 00:02:12.020
rems.

32
00:02:12.140 --> 00:02:14.270
Older browsers don't support rem,

33
00:02:14.330 --> 00:02:18.720
there is a polyfill and you find a link to this article of course at the end of this module,

34
00:02:18.740 --> 00:02:23.210
there is a polyfill which you can download and import which will essentially just convert all

35
00:02:23.210 --> 00:02:27.960
your rem declarations to pixels which are supported by older browsers too

36
00:02:28.360 --> 00:02:30.720
and there are a couple of such polyfills as you can see.

37
00:02:30.810 --> 00:02:37.140
There are also polyfills for background image related properties and so on.

38
00:02:37.210 --> 00:02:43.040
So if you need that feature and you need to support such old browsers, definitely consider using such

39
00:02:43.040 --> 00:02:43.640
polyfills.
