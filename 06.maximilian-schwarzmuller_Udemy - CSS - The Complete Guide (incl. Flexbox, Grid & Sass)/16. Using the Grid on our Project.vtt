WEBVTT
1
00:00:02.370 --> 00:00:05.450
Now that we took our first steps with the CSS grid,

2
00:00:05.570 --> 00:00:08.370
let's apply some of the concepts you learned about

3
00:00:08.390 --> 00:00:09.500
to our project

4
00:00:09.500 --> 00:00:15.380
before we dive even deeper into the grid and into some other capabilities it offers to us.

5
00:00:15.380 --> 00:00:18.090
So how could we add it to our project?

6
00:00:18.320 --> 00:00:21.380
Later, I'll add it to this hosting page, to our form here

7
00:00:21.560 --> 00:00:31.010
but one thing I want to do right now already, on every page, is I want to control the header, main area

8
00:00:31.220 --> 00:00:38.870
and footer with the grid because if you have a look at our webpage here, we got one basic layout which

9
00:00:38.870 --> 00:00:41.620
is the same on every page.

10
00:00:41.760 --> 00:00:48.720
We got our header which is fixed of course, our main area and the footer and that is something we could

11
00:00:48.720 --> 00:00:52.270
definitely implement with the help of the CSS grid.

12
00:00:52.560 --> 00:00:58.440
So let's do that and let's do it in the shared.css file because it is the case on every page and

13
00:00:58.440 --> 00:00:58.940
there,

14
00:00:59.070 --> 00:01:07.290
I want to turn my body into a CSS grid, just as we did it previously in this module. I'll set the display

15
00:01:07.290 --> 00:01:14.520
to grid here and if I save that and I now reload on that packages page, not a lot changed as you can

16
00:01:14.520 --> 00:01:15.070
see,

17
00:01:15.180 --> 00:01:17.560
the same is true on the main page here.

18
00:01:17.610 --> 00:01:20.070
So this is a grid though, we can verify this

19
00:01:20.070 --> 00:01:27.410
if we click on body, on the layout tab in the Firefox developer tools, here we can see it's a grid and

20
00:01:27.420 --> 00:01:34.240
it is a grid with only two rows, with a big main row and that bottom row for the footer.

21
00:01:34.500 --> 00:01:40.640
Now you might wonder where our backdrop, modal and the header and the navigation are,

22
00:01:40.650 --> 00:01:47.730
these are all child elements of the body after all but it doesn't look like separate rows were created

23
00:01:47.730 --> 00:01:48.650
for them.

24
00:01:48.870 --> 00:01:54.870
Well, these are all elements that are positioned non-statically,

25
00:01:54.960 --> 00:02:00.990
so the backdrop has a position of fixed, the modal has a position of fixed, the header has a position

26
00:02:00.990 --> 00:02:05.200
of fixed and the navigation has a display of none here.

27
00:02:05.220 --> 00:02:12.420
Now if we have such elements, then this essentially leads to them not being part of the grid.

28
00:02:12.600 --> 00:02:18.250
If we shrink that and go to mobile view, then our navigation gets a position of fixed too,

29
00:02:18.360 --> 00:02:22.000
so this also is not a part of the grid on mobile view

30
00:02:22.440 --> 00:02:27.930
and that is something important to realize. Elements which are not part of the document flow,

31
00:02:28.050 --> 00:02:33.810
so fixed and absolute elements are not part of the grid and hence, are not considered for the rows

32
00:02:34.020 --> 00:02:39.330
and that is fine actually because here, we don't want that to be part of the grid,

33
00:02:39.330 --> 00:02:42.250
I want to control the rest with my grid.

34
00:02:42.330 --> 00:02:48.230
So our layout will actually not contain a header because the header is detached from the document flow,

35
00:02:48.360 --> 00:02:52.470
it will just contain our main area and the footer.

36
00:02:52.470 --> 00:02:58.050
Now one thing I want to do which we can see on for example the customers or packages page if we're not

37
00:02:58.050 --> 00:03:03.230
zoomed in is I want to control the placement of the footer with the help of the grid.

38
00:03:03.240 --> 00:03:07.340
Right now, we're doing this manually in our shared.css file, here in the main class,

39
00:03:07.350 --> 00:03:13.800
we got our min height set and this works but with the grid, we can actually follow a different approach.

40
00:03:14.040 --> 00:03:19.780
I can explicitly add two lines, so two rows I mean, with grid template rows.

41
00:03:19.860 --> 00:03:23.110
Now the first row will be our main area

42
00:03:23.250 --> 00:03:33.440
and there, I can set it to auto and the footer has a height of 8rem with all the things that are involved

43
00:03:33.470 --> 00:03:33.970
in it,

44
00:03:34.130 --> 00:03:37.090
so we can set the second row to 8rem.

45
00:03:37.220 --> 00:03:43.190
Now let me remove or comment out the min height assignment here and let's reload the page.

46
00:03:43.190 --> 00:03:47.950
Now what we can see is that the footer now is positioned differently,

47
00:03:48.200 --> 00:03:56.580
the grid if we inspect it, still has this main area but then the bottom row here does contain the footer

48
00:03:56.780 --> 00:03:59.090
but somehow this doesn't look right,

49
00:03:59.090 --> 00:03:59.360
right?

50
00:03:59.360 --> 00:04:06.260
So for example the main area goes beneath our header, now the reason for that simply is that our header is fixed.

51
00:04:06.260 --> 00:04:08.590
Now here are two possible solutions,

52
00:04:08.630 --> 00:04:19.100
for one we could add a padding top to our body element of 3.5rem to push the content below the

53
00:04:19.100 --> 00:04:20.130
header basically.

54
00:04:20.150 --> 00:04:28.610
Now if you inspect body, we can actually see that it is starting below our header, so this row starts

55
00:04:28.610 --> 00:04:30.100
below our header here

56
00:04:30.650 --> 00:04:33.870
but still we see, this doesn't seem to work

57
00:04:33.950 --> 00:04:40.550
and the reason for this is the auto value for the first row. Auto simply takes as much space as required

58
00:04:40.550 --> 00:04:42.110
by the content.

59
00:04:42.170 --> 00:04:47.630
If we wanted to fill everything up, we would have to give our body a height of 100%

60
00:04:48.020 --> 00:04:51.640
and the same for HTML to really make this work.

61
00:04:51.650 --> 00:04:54.520
So now we if we add height 100% to both,

62
00:04:54.560 --> 00:05:02.570
now this works, the same on the customers page because now we're basically saying that our grid takes

63
00:05:02.570 --> 00:05:05.410
the entire height of the page,

64
00:05:05.540 --> 00:05:12.050
it got a padding so that the content really starts only after the header and then we get two rows and the first

65
00:05:12.050 --> 00:05:12.980
row is auto,

66
00:05:12.980 --> 00:05:19.700
so it takes all the remaining space and the remaining space is essentially 100% minus the row height

67
00:05:19.790 --> 00:05:26.800
for the footer and the cool thing is on the starting page where we got more content in the first row,

68
00:05:26.930 --> 00:05:30.700
auto will also ensure that it doesn't crop this content.

69
00:05:30.740 --> 00:05:36.170
So here, it's not just the remaining space of 100% minus the footer,

70
00:05:36.170 --> 00:05:39.720
instead it's as much space as the content requires and the footer is

71
00:05:39.740 --> 00:05:41.790
then added below that.

72
00:05:41.840 --> 00:05:47.960
So now we got a way more elegant solution for our problem of having a footer which should always be

73
00:05:47.960 --> 00:05:54.400
at the bottom whilst at the same time, ensuring that our main content has the place it needs.

74
00:05:54.440 --> 00:05:59.390
And again for the header, it's important to understand since it's a fixed header, it's not part of the

75
00:05:59.390 --> 00:06:03.710
document flow and therefore it doesn't need its separate row in the grid.

76
00:06:03.980 --> 00:06:10.880
We could theoretically though also add a row here and remove padding top, so let me remove that here

77
00:06:11.450 --> 00:06:15.380
and instead add a row with 3.5rem for the header.

78
00:06:15.380 --> 00:06:17.870
Now this would basically destroy everything

79
00:06:17.900 --> 00:06:21.530
because that first row would actually be occupied by our main content

80
00:06:21.650 --> 00:06:28.520
and therefore, it looks ugly but we of course can specifically tell the main content into

81
00:06:28.520 --> 00:06:29.730
which row it should go.

82
00:06:29.840 --> 00:06:34.120
So we can go to the main selector here and add grid row here

83
00:06:34.370 --> 00:06:39.040
and basically we want to start after the second row line,

84
00:06:39.050 --> 00:06:40.310
the first one is at the very top,

85
00:06:40.310 --> 00:06:42.720
the second one comes after the first row.

86
00:06:42.920 --> 00:06:50.330
So in line two, we want to start and then we want to go down to the third line,

87
00:06:50.360 --> 00:06:53.720
so we want to end before the third row line.

88
00:06:53.720 --> 00:06:56.300
Now if we reload, we're back to where we were

89
00:06:56.450 --> 00:07:03.200
but now the footer jumps ahead, well we can also change that by simply giving the footer a clear place,

90
00:07:03.440 --> 00:07:12.480
so we can also take grid row down to our footer here and in the main footer class, we simply tell it to

91
00:07:12.490 --> 00:07:15.540
start after line three and go to line four.

92
00:07:15.760 --> 00:07:17.810
And now the footer is at the bottom,  

93
00:07:17.880 --> 00:07:22.790
also for packages, excuse me. and also for the main page

94
00:07:22.790 --> 00:07:25.010
and if we go to mobile view,

95
00:07:27.760 --> 00:07:30.660
this also looks all right to me,

96
00:07:32.690 --> 00:07:33.210
yes.

97
00:07:33.540 --> 00:07:36.300
So this is now a different solution,

98
00:07:36.330 --> 00:07:43.530
now of course there's yet another way of solving this with template areas. In the body or on the body

99
00:07:43.530 --> 00:07:46.290
tag, we can add grid template areas

100
00:07:46.470 --> 00:07:51.560
and of course there, we also can assign names to our columns and rows.

101
00:07:51.570 --> 00:07:57.550
Now we only got one column, so we only need one value per string

102
00:07:57.810 --> 00:08:04.890
but now we can replicate our three row setup here with three strings which are beneath each other and

103
00:08:04.890 --> 00:08:07.140
then the first row would be the header,

104
00:08:07.170 --> 00:08:11.260
we can name it header or give it a dot to leave it empty but let's name it

105
00:08:11.260 --> 00:08:15.960
header, then we can name this main and we can name this footer

106
00:08:16.110 --> 00:08:24.210
and now this allows us to go to the main selector and now not select a place in the grid like this but

107
00:08:24.210 --> 00:08:28.930
use grid area instead and target main here

108
00:08:29.130 --> 00:08:36.240
and for the footer at the very bottom of course, there we also don't use grid row like this but grid

109
00:08:36.330 --> 00:08:38.870
area and we target footer.

110
00:08:39.210 --> 00:08:41.450
So that's yet another way of solving this

111
00:08:41.460 --> 00:08:48.630
and as you can see, this also does the trick and works just fine. With that, you saw a couple of ways of

112
00:08:48.630 --> 00:08:53.240
using the grid and positioning this, it's of course up to you which one you want to use,

113
00:08:53.250 --> 00:08:59.700
I believe that this is easiest to grasp because you assign clear names to the different areas in your

114
00:08:59.700 --> 00:09:00.330
page

115
00:09:00.480 --> 00:09:07.200
but in the end, it's up to you and this is one example of how you can use the grid to solve a certain problem

116
00:09:07.410 --> 00:09:08.490
more elegantly.
