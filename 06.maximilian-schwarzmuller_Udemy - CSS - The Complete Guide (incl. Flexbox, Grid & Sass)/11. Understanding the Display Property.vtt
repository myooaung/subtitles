WEBVTT
1
00:00:02.250 --> 00:00:07.770
So we started adding the header and I mentioned we would need the display property to change the way

2
00:00:07.770 --> 00:00:11.460
our list items are positioned and we do.

3
00:00:11.490 --> 00:00:17.880
Now let's first of all start by being able to target these list items and to do so,

4
00:00:18.030 --> 00:00:20.060
I'll give them a CSS class,

5
00:00:20.160 --> 00:00:22.750
so I'll add the class attribute to a list item

6
00:00:22.860 --> 00:00:25.680
and now you can again use any class name you want.

7
00:00:25.770 --> 00:00:32.560
I will use a certain way of writing classes which is called BEM for block element modifier,

8
00:00:32.640 --> 00:00:38.610
something I will explain in detail at the end of the course in these patterns and best practices part

9
00:00:38.820 --> 00:00:40.530
where I will also explore that,

10
00:00:40.680 --> 00:00:46.500
it's just a specific way of writing classes that should ensure that we don't accidentally reuse class

11
00:00:46.500 --> 00:00:49.450
names and that they're very clear about what we do.

12
00:00:49.500 --> 00:00:55.890
Hence what I'll name them or what I'll name this class is main-nav and then __item,

13
00:00:55.980 --> 00:00:59.270
again you can give this any name you want,

14
00:00:59.280 --> 00:01:04.350
this just is kind of following the theme where we're in the main navigation because this will become

15
00:01:04.350 --> 00:01:07.520
the main nav and then in there

16
00:01:07.620 --> 00:01:12.180
and it's just separated by specification of that BEM model I'm following,

17
00:01:12.210 --> 00:01:14.740
there we are in a single list item.

18
00:01:14.880 --> 00:01:18.870
You can again name this in which ever way you want.

19
00:01:19.010 --> 00:01:23.670
I'll copy that class assignment and add it to all my list items,

20
00:01:23.740 --> 00:01:28.880
I'll also add it to the unordered list though there I will name it main-nav__items

21
00:01:29.150 --> 00:01:29.990
because

22
00:01:30.020 --> 00:01:32.140
this is my list of items

23
00:01:32.390 --> 00:01:37.910
and then finally once we already add it, I'll also add it to the nav element and there it will be just

24
00:01:37.920 --> 00:01:39.370
the class main-nav

25
00:01:39.500 --> 00:01:41.240
and that's kind of the pattern I want to use here,

26
00:01:41.270 --> 00:01:45.170
main-nav, main-nav__item, main-nav__items.

27
00:01:45.260 --> 00:01:48.730
So with that, we get a bunch of classes with which we can work,

28
00:01:48.770 --> 00:01:52.370
we came here to see the display property in action though, right,

29
00:01:52.580 --> 00:01:54.650
so how does that work?

30
00:01:54.710 --> 00:02:03.830
The display property allows us to change the behavior of an element from block to inline or even to

31
00:02:03.920 --> 00:02:08.860
inline block which is a mixture or to none to remove it from the DOM even.

32
00:02:09.020 --> 00:02:12.690
Now step-by-step, what does this all mean? In HTML,

33
00:02:12.710 --> 00:02:18.910
we got inline and we got block level elements, example for inline elements would be anchor tags,

34
00:02:18.950 --> 00:02:20.710
they are rendered inline.

35
00:02:20.780 --> 00:02:27.110
If we have two anchor tags after each other as here for customers and we reload the page, we see they're rendered

36
00:02:27.110 --> 00:02:27.940
in the same line,

37
00:02:27.980 --> 00:02:32.460
they don't take the full entire width as block level elements do. That

38
00:02:32.480 --> 00:02:34.810
on the other hand is what block level elements do.

39
00:02:34.910 --> 00:02:39.680
If we inspect a list item, so not the anchor tag side of it, just the list item,

40
00:02:39.890 --> 00:02:46.220
you can see the blue content takes the full available width minus margin padding, what's taken up by other

41
00:02:46.230 --> 00:02:48.070
elements surrounding it,

42
00:02:48.420 --> 00:02:56.100
the anchor tag again only takes the width its content needs. Both actually use the box model, though for

43
00:02:56.100 --> 00:03:02.660
the inline element, we can't really set a margin top and bottom for example because that's not how inline

44
00:03:02.690 --> 00:03:03.700
elements work,

45
00:03:03.830 --> 00:03:07.370
they are not positioned in the flow like block level elements,

46
00:03:07.370 --> 00:03:09.570
they don't take a new line necessarily,

47
00:03:09.680 --> 00:03:14.600
hence margin top and bottom is difficult because they might be inline with another element.

48
00:03:15.080 --> 00:03:16.040
So that's the difference

49
00:03:16.040 --> 00:03:19.740
and we can change that behavior with the display property,

50
00:03:19.970 --> 00:03:20.890
here's an example.

51
00:03:21.020 --> 00:03:28.310
Let's go to that second customer and let's quickly, for demo purposes, change the style with display to

52
00:03:28.310 --> 00:03:33.510
block. Again the default value for an anchor tag would be inline

53
00:03:33.620 --> 00:03:36.920
but here, I change it to block.

54
00:03:36.920 --> 00:03:44.030
If we do that and we reload the page, you actually see that this second customer jumped into a new

55
00:03:44.030 --> 00:03:46.560
row because customer,

56
00:03:46.670 --> 00:03:52.290
the second one, is now turned into a block level element and hence, it behaves like one.

57
00:03:52.310 --> 00:03:58.790
It takes the full entire width, the first one still is an inline element but that doesn't matter because

58
00:03:59.150 --> 00:04:00.550
the second one is a block level,

59
00:04:00.560 --> 00:04:03.240
it doesn't fit into the same line as the first one

60
00:04:03.350 --> 00:04:04.790
even though that one is still inline

61
00:04:04.820 --> 00:04:06.130
but the second one isn't.

62
00:04:06.620 --> 00:04:12.770
Now that what we enforced with display block is actually the default for block level elements like unordered

63
00:04:12.770 --> 00:04:21.620
list, list item, nav, section and so on. With the display property, we can change it. Now one other way

64
00:04:21.620 --> 00:04:27.130
we can change it is we can set to none. If we set this on the second customer and we reload,

65
00:04:27.410 --> 00:04:34.250
you'll see it's removed and it's not only invisible or transparent, it's also taken out of the document

66
00:04:34.250 --> 00:04:35.040
flow

67
00:04:35.090 --> 00:04:41.570
as you can tell by the fact that start hosting closed the gap. If we inspect it here,

68
00:04:41.780 --> 00:04:46.210
this is the element which has display none, it's still part of the DOM though

69
00:04:46.370 --> 00:04:50.560
so it's not removed from there, just from the visible document flow.

70
00:04:50.990 --> 00:04:56.360
The idea behind display none is that it's especially useful if we use it in conjunction with Javascript

71
00:04:56.720 --> 00:04:59.620
to for example show it after a button was clicked,

72
00:04:59.630 --> 00:05:04.780
this allows us to create modals which only show up on certain action, something we'll also do later.

73
00:05:05.090 --> 00:05:11.750
So that is none, that is block and that is inline, changing inline to block and the other way round is not that

74
00:05:11.750 --> 00:05:16.850
useful in many cases because elements behave in a certain way for a good reason

75
00:05:17.120 --> 00:05:21.620
but there is a fourth option and that's the option that's now really useful to us.

76
00:05:21.800 --> 00:05:25.740
We can set our class which we assign to a list item,

77
00:05:25.760 --> 00:05:31.520
so the main-nav__item class, we can set that in our CSS code,

78
00:05:31.520 --> 00:05:37.340
don't forget the dot, to display inline-block,

79
00:05:37.610 --> 00:05:43.770
this mixes the behavior of both inline and block level elements. Like inline elements,

80
00:05:43.880 --> 00:05:49.280
these elements can go next to each other now but they still behave like block level elements when it

81
00:05:49.280 --> 00:05:55.760
comes to setting top and bottom margins, setting paddings, things that are not possible on inline elements.

82
00:05:56.990 --> 00:06:03.650
If we change it to such an element, we can go back to the code and after reloading, we see that now the

83
00:06:03.650 --> 00:06:11.060
list items are setup in one line because again, they behave like an inline element such that they only

84
00:06:11.060 --> 00:06:16.850
take as much width as their content sheets and they fit into one line but they still have a box where we

85
00:06:16.850 --> 00:06:18.920
can set a padding and so on.

86
00:06:19.100 --> 00:06:24.220
And you can see this if you actually try setting up padding for example on the anchor tag,

87
00:06:24.470 --> 00:06:26.300
so padding 20 pixels,

88
00:06:26.840 --> 00:06:29.570
then you'll see it's applied to the left and right

89
00:06:29.690 --> 00:06:34.530
but just as margin top and bottom, it doesn't really have a great effect here.

90
00:06:35.390 --> 00:06:42.720
If you on the other hand set that on the surrounding list item which is inline block, then you see it's

91
00:06:42.720 --> 00:06:45.770
also applied to the left and right but to the top and bottom,

92
00:06:45.810 --> 00:06:47.420
it's also having an effect now,

93
00:06:47.520 --> 00:06:49.320
it's pushing the elements down.

94
00:06:49.320 --> 00:06:50.470
So that's the difference.

95
00:06:50.490 --> 00:06:56.820
We can style the list items still like block level elements but they sit next to each other like inline

96
00:06:56.820 --> 00:07:02.790
elements which is a great way of allowing us to create navigation here. Later in the course, we'll also

97
00:07:02.790 --> 00:07:08.050
learn about other tools mainly flexbox which is even better to position elements next to each other

98
00:07:08.160 --> 00:07:10.670
but for now, inline block is a great start.
