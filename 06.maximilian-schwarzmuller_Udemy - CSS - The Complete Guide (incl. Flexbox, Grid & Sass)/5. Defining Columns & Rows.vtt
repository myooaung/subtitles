WEBVTT
1
00:00:02.200 --> 00:00:04.010
So with the dummy grid created,

2
00:00:04.120 --> 00:00:10.300
let's change these defaults to see what we can do with the grid. Now to customize this grid,

3
00:00:10.300 --> 00:00:16.240
let's go back to our CSS code and on the container where we have display grid, we can now add a special

4
00:00:16.240 --> 00:00:22.470
grid related property, the grid template columns property.

5
00:00:22.480 --> 00:00:28.810
This allows us to overwrite of only having one column and to add multiple columns to the grid.

6
00:00:29.170 --> 00:00:30.640
Now how do we add columns?

7
00:00:30.640 --> 00:00:33.130
You don't enter three for three columns,

8
00:00:33.130 --> 00:00:36.160
instead you can set the width of the columns.

9
00:00:36.160 --> 00:00:43.210
So what we could do is, we could set 200 pixels for the first column and then add a second column by

10
00:00:43.210 --> 00:00:51.190
simply specifying a second value, like 150 pixels and maybe a third column which could also be 20%

11
00:00:51.700 --> 00:00:53.230
of the surrounding container,

12
00:00:53.230 --> 00:00:54.930
so of the grid container.

13
00:00:55.180 --> 00:01:01.120
So now we would get three columns where the first two columns have absolute values and you could use

14
00:01:01.120 --> 00:01:08.830
rem or em here too and where the third column has a relative value, percentage of the grid container

15
00:01:09.070 --> 00:01:14.710
which is a block level element and therefore, which by default has 100% of the width of its surrounding

16
00:01:14.710 --> 00:01:17.350
container, which in our case is the body.

17
00:01:17.680 --> 00:01:20.200
So if we save this and we reload,

18
00:01:20.380 --> 00:01:22.240
now something changed.

19
00:01:22.240 --> 00:01:27.910
We still see the helper lines which is really useful and we can see both here on the left as well as

20
00:01:27.910 --> 00:01:32.920
on the right in the developer tools, that we get three columns here.

21
00:01:32.920 --> 00:01:34.900
These are the three columns we created,

22
00:01:34.900 --> 00:01:37.170
you can see they have different sizes,

23
00:01:37.180 --> 00:01:47.730
the last column has 20% of their container size, the middle column is 150 pixels and the pixel sizes

24
00:01:47.740 --> 00:01:48.070
here

25
00:01:48.070 --> 00:01:53.870
in the preview or on our page simply aren't correct because I'm zoomed in so that you can see it a bit

26
00:01:53.870 --> 00:01:54.640
easier.

27
00:01:54.650 --> 00:01:56.530
So this would be 150 pixels

28
00:01:56.540 --> 00:02:03.710
if we were at 100% scale and on the very left, well there, we got our 200 pixels

29
00:02:03.830 --> 00:02:06.680
and since I got a zoom factor of 240,

30
00:02:06.830 --> 00:02:15.550
this leads to 480 in translated pixels but it is our defined size of 200 pixels in the end.

31
00:02:15.630 --> 00:02:20.650
Now another unit we can use in a grid, a special unit is fraction,

32
00:02:20.870 --> 00:02:30.290
we can also add a fourth column with one fraction, fr and this will split up the remaining space which

33
00:02:30.290 --> 00:02:36.320
is 100% - 20% - 200 pixels - 150 pixels,

34
00:02:36.440 --> 00:02:43.280
it will take the remaining space and if we had more than one column with the fraction unit, it would

35
00:02:43.280 --> 00:02:51.110
split the remaining space between all columns with fraction and the number indicates the relation.

36
00:02:51.110 --> 00:02:57.220
So if I replace 150 pixels with two fraction, then the remaining space,

37
00:02:57.260 --> 00:03:01.210
so 100% - 20% - 200 pixels,

38
00:03:01.430 --> 00:03:07.790
the remaining space would be split up between column 2 and column 4 and column 2 would receive twice

39
00:03:07.790 --> 00:03:10.570
as much space as column 4 does. 

40
00:03:10.640 --> 00:03:12.590
If I save this and reload,

41
00:03:12.590 --> 00:03:21.890
now you see column 2 and column 4 are the fraction columns and column 2 indeed is twice as big as

42
00:03:21.890 --> 00:03:24.280
column 4 is.

43
00:03:24.680 --> 00:03:32.130
Now one important note here, you can now also see that we got a solid line on the right of the grid,

44
00:03:32.150 --> 00:03:33.020
previously here,

45
00:03:33.020 --> 00:03:35.610
this purple line was dotted.

46
00:03:35.870 --> 00:03:41.540
Solid lines mark the end or beginning of the grid rows and columns

47
00:03:41.630 --> 00:03:49.400
and since we explicitly state columns here, there is no inferred width or inferred amount of columns or

48
00:03:49.400 --> 00:03:56.270
rows and therefore, the grid clearly ends after the solid line. To the bottom, we still have a dotted

49
00:03:56.270 --> 00:04:03.260
line for the row because it will still keep the flexibility of adding more rows if needed because we

50
00:04:03.260 --> 00:04:06.240
haven't defined the rows explicitly.

51
00:04:06.380 --> 00:04:14.480
We can do that though by going there and adding grid template rows and there we could say the first row

52
00:04:14.480 --> 00:04:17.260
should have let's say 5rem

53
00:04:17.570 --> 00:04:20.680
and the second row should have 2.5rem.

54
00:04:20.690 --> 00:04:27.910
Now we add two rows and if I save and reload, what we can see is that the first row increased in height

55
00:04:28.630 --> 00:04:35.560
because we set it to 5rem and we get a second row which holds no content because we only got four

56
00:04:35.560 --> 00:04:40.680
elements and we now got eight cells, four columns and two rows

57
00:04:40.870 --> 00:04:44.650
but the second row is actually there and we can see it in the preview,

58
00:04:44.650 --> 00:04:51.580
we now got a solid line at the bottom which marks that the grid indeed is enclosed by these four solid

59
00:04:51.580 --> 00:04:52.690
lines.

60
00:04:52.690 --> 00:04:58.870
Now as a side note, if you would add more than eight elements, it would still create the ninth and so on element

61
00:04:59.140 --> 00:05:00.930
in a newly added row,

62
00:05:00.940 --> 00:05:07.690
so it keeps that flexibility of growing if needed but that simply means that we got clearly defined

63
00:05:07.700 --> 00:05:13.080
sizes for two rows and any other row would then again fallback to the defaults

64
00:05:13.150 --> 00:05:17.670
and I will show you how to overwrite these defaults later in the module too

65
00:05:18.070 --> 00:05:21.200
but let's not get too advanced regarding that right now.

66
00:05:21.460 --> 00:05:28.210
Let's focus on what we got and that is a working grid where we can already see that we seem to have eight

67
00:05:28.330 --> 00:05:33.230
cells and that we seem to automatically position the elements there.

68
00:05:33.250 --> 00:05:40.150
Now time to work on that positioning because wouldn't it be helpful if we could for example let element

69
00:05:40.150 --> 00:05:46.540
three take more than one cell because maybe it should overlap two cells? We'll dive into that in

70
00:05:46.540 --> 00:05:47.350
the next lecture.
