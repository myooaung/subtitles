1
00:00:02,730 --> 00:00:07,950
Let's have a look at how we use the CSS grids together with media queries. For that,

2
00:00:07,950 --> 00:00:13,680
back in the code, I'll remove justify and align content because I want to have the grid in the top

3
00:00:13,680 --> 00:00:15,920
left corner essentially

4
00:00:16,380 --> 00:00:22,410
and I will also set element two back to take that stretch mode again.

5
00:00:22,430 --> 00:00:23,820
So now this is the grid again.

6
00:00:23,960 --> 00:00:30,680
Now of course, we could translate this kind of to having a header, a footer, a side bar and a main area,

7
00:00:30,920 --> 00:00:33,560
kind of what we had in assignments earlier.

8
00:00:33,980 --> 00:00:38,140
Now this is one possible layout but maybe in mobile mode,

9
00:00:38,180 --> 00:00:44,860
so once you decrease the size of the page, you want to set this to behave differently.

10
00:00:44,990 --> 00:00:51,260
Now first of all, what I need to do is I need to get rid of that hardcoded width, it should again be flexible

11
00:00:51,260 --> 00:00:58,070
regarding this but still, the issue I have here is it becomes very narrow and there is a certain breakpoint

12
00:00:58,310 --> 00:01:05,450
where you probably want to ensure that element two, let's say takes the entire second row and that there

13
00:01:05,450 --> 00:01:12,410
is a third row before the footer where the yellow element, element one can then go to. This would be a typical

14
00:01:12,410 --> 00:01:19,310
requirement for a grid based webpage, where you want to have different positioning and maybe a different

15
00:01:19,310 --> 00:01:23,720
amount of rows even for different layouts. On a desktop

16
00:01:23,730 --> 00:01:26,920
device, three rows is fine, on a mobile device,

17
00:01:26,990 --> 00:01:34,620
we probably need four. Now of course, we can implement this with the help of media queries and I will add the media

18
00:01:34,640 --> 00:01:36,380
queries directly after the element

19
00:01:36,380 --> 00:01:39,880
they are used on, just to keep this easier to see.

20
00:01:39,950 --> 00:01:44,920
So let's add a media query right after the container because we'll need to add a third row.

21
00:01:45,170 --> 00:01:49,180
So here I'll this to max width actually,

22
00:01:49,180 --> 00:01:51,250
so this is not mobile first here,

23
00:01:51,290 --> 00:01:56,320
excuse me, but I find it was easier to focus on the grid on a bigger screen,

24
00:01:56,360 --> 00:02:02,950
so now we'll engineer a solution for that smaller screens with max width and let's say the max width

25
00:02:02,960 --> 00:02:08,660
we want to have a look at is 40rem, so for screens up to 40rem,

26
00:02:08,660 --> 00:02:16,550
I want to have a different grid and that different grid needs an additional row, a row for the yellow

27
00:02:16,670 --> 00:02:18,020
element.

28
00:02:18,020 --> 00:02:25,880
Now we can simply copy grid template areas and grid template rows, not into the media query like this

29
00:02:25,880 --> 00:02:26,190
though

30
00:02:26,210 --> 00:02:32,680
but into the container selector in there. Let's get rid of that comment and grid gap and now we need

31
00:02:32,680 --> 00:02:38,770
to add an additional row by overwriting grid template rows and by simply adding an additional row then.

32
00:02:38,890 --> 00:02:41,530
We got a third row with 100 pixels,

33
00:02:41,530 --> 00:02:48,670
now let's say we want to have 150 maybe there and I then want to add a fourth row,

34
00:02:49,110 --> 00:02:52,910
so I'll name this row four start here maybe

35
00:02:53,140 --> 00:02:58,890
and then add my 100 pixel row there, row four end thereafter.

36
00:02:58,960 --> 00:03:03,760
So this is now the updated row set up with an extra row.

37
00:03:03,850 --> 00:03:10,600
Now in the template area, so I also want to add it and I want to say main actually takes the entire third

38
00:03:10,600 --> 00:03:12,850
row on mobile devices

39
00:03:13,120 --> 00:03:19,510
and as I just said, we have a new row below that, above the footer which would be our, let's name it side

40
00:03:21,100 --> 00:03:21,620
bar

41
00:03:21,670 --> 00:03:27,670
so to say, now pushed into its own row occupying the full row let's say. Of course, you could also add

42
00:03:27,670 --> 00:03:30,110
some dots if you don't want this to be the case.

43
00:03:30,460 --> 00:03:36,430
Now with this, we added a new row and we change the positioning with the help of template areas

44
00:03:36,640 --> 00:03:42,880
and the cool thing is since we are referencing these areas on our elements, at least for most of them,

45
00:03:43,120 --> 00:03:47,680
we don't even need to change them. Now we need to change element one because here I'm still using that

46
00:03:47,950 --> 00:03:56,590
line-based approach and easiest way to make this really flexible is to also use grid area there and assign

47
00:03:56,590 --> 00:03:57,960
a name of side

48
00:03:58,330 --> 00:04:02,760
and let's also add this instead of the dots here.

49
00:04:02,870 --> 00:04:10,900
First one should stay a dot but let's say on our desktop layout and now we never need to touch the elements

50
00:04:10,960 --> 00:04:13,510
because they always refer to the same name,

51
00:04:13,570 --> 00:04:20,070
we just restructure our amount and positioning of cells with grid template rows and grid template areas

52
00:04:20,200 --> 00:04:27,010
and if we were to need it, with grid template columns of course. And now we can save this and reload and

53
00:04:27,010 --> 00:04:29,780
we get the same layout as before

54
00:04:29,950 --> 00:04:31,860
but if I shrink the screen,

55
00:04:31,870 --> 00:04:39,000
it then goes into that mobile mode and that's the cool thing about media queries and the grid.

56
00:04:39,040 --> 00:04:45,500
It's really easy to build highly flexible and responsive layouts with media queries just as you learned

57
00:04:45,510 --> 00:04:45,910
it

58
00:04:45,940 --> 00:04:53,380
but by taking advantage of features like this, named areas and the advantage that you never have to change

59
00:04:53,380 --> 00:04:59,470
your elements again, you just change the general layout you defined on the grid container.

60
00:04:59,470 --> 00:05:05,430
This is something I want you to take with you, that you think about the grid like this,

61
00:05:05,530 --> 00:05:11,380
that you take it as a chance to really configure everything on the container, adjust it with media queries

62
00:05:11,470 --> 00:05:17,700
as required and then save a lot of work because you don't need to reposition anything else

63
00:05:17,740 --> 00:05:22,420
and of course you're free to overwrite whatever needs to be overwritten on the container.

64
00:05:22,420 --> 00:05:27,520
So if you also want to change the items and positioning, you could overwrite justify items and so on

65
00:05:27,520 --> 00:05:28,070
here too.
