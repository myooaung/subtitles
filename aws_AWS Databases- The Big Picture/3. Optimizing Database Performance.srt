1
00:00:01,140 --> 00:00:04,800
Performance is going to follow a similar theme as monitoring and

2
00:00:04,800 --> 00:00:08,370
troubleshooting, in that depending on your database type,

3
00:00:08,370 --> 00:00:12,650
you're going to have different options available to you for performance

4
00:00:12,650 --> 00:00:18,290
optimization. For instance‑based database services, simply increasing

5
00:00:18,290 --> 00:00:21,800
your instance type or size adds additional CPU,

6
00:00:21,800 --> 00:00:25,300
RAM, network, and disk capacity.

7
00:00:25,300 --> 00:00:26,580
In some cases,

8
00:00:26,580 --> 00:00:30,780
this strategy of increasing instance size is about as complex as you

9
00:00:30,780 --> 00:00:34,740
need to get in order to meet your performance needs.

10
00:00:34,740 --> 00:00:39,810
For many managed services, you can choose from on‑demand capacity mode,

11
00:00:39,810 --> 00:00:43,680
which will automatically scale up and down to meet demand, or

12
00:00:43,680 --> 00:00:46,660
you can select provisioned capacity mode,

13
00:00:46,660 --> 00:00:50,920
which helps you optimize for price when you have predictable loads.

14
00:00:50,920 --> 00:00:53,890
With provisioned mode, in some database types,

15
00:00:53,890 --> 00:00:58,130
you can experience errors or delays when you've exceeded

16
00:00:58,130 --> 00:01:01,560
your provisioned capacity. Depending on your application,

17
00:01:01,560 --> 00:01:04,070
this may or may not be a big deal,

18
00:01:04,070 --> 00:01:08,740
but it is something to be aware of when choosing a provisioned mode.

19
00:01:08,740 --> 00:01:13,220
Another performance consideration is to determine if you're database is

20
00:01:13,220 --> 00:01:19,270
read‑heavy or write‑heavy, meaning, are the majority of query operations

21
00:01:19,270 --> 00:01:25,230
performing reads of existing data or are queries writing new information

22
00:01:25,230 --> 00:01:30,980
to the database? For read‑heavy databases, the option to add additional

23
00:01:30,980 --> 00:01:36,430
read replicas can help lighten the load on your database. For write‑heavy

24
00:01:36,430 --> 00:01:42,500
databases, you may employ sharding to distribute the load across machines.

25
00:01:42,500 --> 00:01:44,740
Let's take a look at each of those strategies,

26
00:01:44,740 --> 00:01:48,490
keeping in mind that there is some overhead associated with both

27
00:01:48,490 --> 00:01:52,920
read replicas and sharding, so be sure to test and verify the

28
00:01:52,920 --> 00:01:57,140
benefits for your particular application.

29
00:01:57,140 --> 00:02:03,330
You can think of a read replica as the same data copied to multiple machines.

30
00:02:03,330 --> 00:02:07,600
A read replica contains up‑to‑date information for the database

31
00:02:07,600 --> 00:02:11,970
and is only used to process read queries, so nothing is written

32
00:02:11,970 --> 00:02:16,120
directly to these instances, they're all updated from the same

33
00:02:16,120 --> 00:02:18,980
source database. For example,

34
00:02:18,980 --> 00:02:23,870
if your overall system is experiencing 1000 queries per second and

35
00:02:23,870 --> 00:02:27,740
you have four read replicas to service the load,

36
00:02:27,740 --> 00:02:33,770
then each read replica can effectively handle only 250 queries per second,

37
00:02:33,770 --> 00:02:39,670
instead of a single instance handling all 1000 per second. Depending on

38
00:02:39,670 --> 00:02:44,810
your database performance, distributing a smaller query volume across more

39
00:02:44,810 --> 00:02:49,930
instances can lead to faster response times than letting a single instance

40
00:02:49,930 --> 00:02:55,280
handle all of the load. For some database services, adding read replicas is

41
00:02:55,280 --> 00:02:57,070
a fairly simple process,

42
00:02:57,070 --> 00:03:01,020
so understand how the database service you are using handles read

43
00:03:01,020 --> 00:03:06,980
replicas if that is something you may need. You can think of sharding

44
00:03:06,980 --> 00:03:11,940
as copying different data to multiple machines.

45
00:03:11,940 --> 00:03:16,700
Sharding involves splitting the database across different machines

46
00:03:16,700 --> 00:03:21,240
based on a shard key in order to distribute the load.

47
00:03:21,240 --> 00:03:26,340
The idea is that if you have 100 queries trying to write to the database,

48
00:03:26,340 --> 00:03:30,790
what they are trying to write will be in different parts of the database,

49
00:03:30,790 --> 00:03:35,640
residing on different shards on different machines, such that no

50
00:03:35,640 --> 00:03:40,240
single machine has to handle all of the load.

51
00:03:40,240 --> 00:03:43,590
How you partition or split up your data can have a

52
00:03:43,590 --> 00:03:46,210
drastic effect on performance.

53
00:03:46,210 --> 00:03:47,160
For example,

54
00:03:47,160 --> 00:03:51,630
a poor partition strategy could actually make performance worse by

55
00:03:51,630 --> 00:03:55,260
sending the majority of traffic to a single instance rather than

56
00:03:55,260 --> 00:03:58,910
distributing it across multiple instances.

57
00:03:58,910 --> 00:04:01,310
Depending on the database type you use,

58
00:04:01,310 --> 00:04:04,800
you may need to define partition and sort keys,

59
00:04:04,800 --> 00:04:07,340
so be sure to understand first,

60
00:04:07,340 --> 00:04:12,740
your data, what attributes most evenly divide up that data into

61
00:04:12,740 --> 00:04:18,600
fairly equal parts, and second, access patterns, how does your

62
00:04:18,600 --> 00:04:20,840
application read and write data,

63
00:04:20,840 --> 00:04:26,340
and are there predictable patterns you can use to optimize your database setup?

64
00:04:26,340 --> 00:04:31,320
Indexes are another key part of database performance. Again,

65
00:04:31,320 --> 00:04:33,300
depending on the database type,

66
00:04:33,300 --> 00:04:38,400
you'll have different indexing options, but the general idea of indexes is to

67
00:04:38,400 --> 00:04:44,420
identify common operations and make those faster to execute by performing some

68
00:04:44,420 --> 00:04:49,960
work ahead of time in building and maintaining an index. For most systems,

69
00:04:49,960 --> 00:04:53,270
indexes will also take up more disk space,

70
00:04:53,270 --> 00:04:59,040
so that is a trade‑off you may have to consider when creating indexes.

71
00:04:59,040 --> 00:05:04,220
Speaking of disk, for database types that allow you to choose disk type,

72
00:05:04,220 --> 00:05:07,340
there are definite performance implications.

73
00:05:07,340 --> 00:05:13,240
Let's look at the different disk types available. Elastic Block Store, or EBS,

74
00:05:13,240 --> 00:05:18,440
Elastic File System, or EFS, and Instance Store.

75
00:05:18,440 --> 00:05:21,220
We'll talk about the features of each, but again,

76
00:05:21,220 --> 00:05:25,740
depending on the database engine you're using and your application,

77
00:05:25,740 --> 00:05:30,120
some of these may perform better than others.

78
00:05:30,120 --> 00:05:31,530
Elastic Block Store,

79
00:05:31,530 --> 00:05:36,950
or EBS, is the most common type of storage for EC2 instances, with

80
00:05:36,950 --> 00:05:42,090
some instance types operating on EBS only. With EBS,

81
00:05:42,090 --> 00:05:49,050
you can create an SSD‑based volume or an HDD‑based volume.

82
00:05:49,050 --> 00:05:53,040
SSD‑based volumes are divided into two categories.

83
00:05:53,040 --> 00:05:55,440
First, general purpose.

84
00:05:55,440 --> 00:05:58,510
These are a good mix of price and performance for many types of

85
00:05:58,510 --> 00:06:03,580
transactional data, and are the default EBS volume type for EC2

86
00:06:03,580 --> 00:06:06,700
instances. Based on volume size,

87
00:06:06,700 --> 00:06:10,910
you will be allocated a certain number of IOPS that are burstable

88
00:06:10,910 --> 00:06:14,260
beyond the limit for a short period of time,

89
00:06:14,260 --> 00:06:17,800
but may be throttled down to your allocated limit.

90
00:06:17,800 --> 00:06:22,800
Second, provisioned IOPS. These are best for latency sensitive

91
00:06:22,800 --> 00:06:27,090
transactional workloads, where throttling IOPS would be problematic

92
00:06:27,090 --> 00:06:30,840
for your app, like a transactional database.

93
00:06:30,840 --> 00:06:34,060
To get the highest performance from provisioned IOPS,

94
00:06:34,060 --> 00:06:39,040
the volume must be attached to an EBS optimized instance type.

95
00:06:39,040 --> 00:06:43,440
HDD‑based volumes are also divided into two categories.

96
00:06:43,440 --> 00:06:46,430
First, throughput optimized.

97
00:06:46,430 --> 00:06:49,770
This is good for frequently accessed throughput intensive

98
00:06:49,770 --> 00:06:55,020
workloads with large data sets and large IO sizes.

99
00:06:55,020 --> 00:06:57,940
Second, Cold HDD.

100
00:06:57,940 --> 00:07:01,400
This is the lowest cost volume designed for less frequently

101
00:07:01,400 --> 00:07:07,040
accessed workloads with large cold data sets.

102
00:07:07,040 --> 00:07:13,340
Elastic File System, or EFS, is a managed NFS file system.

103
00:07:13,340 --> 00:07:16,870
It's highly available and scalable, and automatically grows

104
00:07:16,870 --> 00:07:20,010
and shrinks as you add and remove files.

105
00:07:20,010 --> 00:07:24,670
This automatic scaling allows you to pay only for what you actually use,

106
00:07:24,670 --> 00:07:26,180
whereas with EBS,

107
00:07:26,180 --> 00:07:30,530
you must allocate all of the space you think you will need to a volume,

108
00:07:30,530 --> 00:07:33,500
and you pay for the size of the entire allocated volume

109
00:07:33,500 --> 00:07:39,440
whether you fill it with data or not, and whether it is running or not. With EFS,

110
00:07:39,440 --> 00:07:44,380
multiple instances can access the file system at the same time, but again,

111
00:07:44,380 --> 00:07:47,930
this may or may not be a good fit for your database engine,

112
00:07:47,930 --> 00:07:52,340
so you'll need to verify that for your application.

113
00:07:52,340 --> 00:07:53,090
Finally,

114
00:07:53,090 --> 00:07:58,080
some instance types include instance stores. An instance store

115
00:07:58,080 --> 00:08:02,530
provides temporary block‑level storage located on disks that are

116
00:08:02,530 --> 00:08:06,440
physically attached to the host computer.

117
00:08:06,440 --> 00:08:09,750
Instance stores offer some performance improvements for

118
00:08:09,750 --> 00:08:12,630
frequently changing data, like buffers,

119
00:08:12,630 --> 00:08:16,750
caches, scratch data, and other temporary content that is

120
00:08:16,750 --> 00:08:20,430
replicated across a fleet of instances.

121
00:08:20,430 --> 00:08:25,640
These are definitely used to optimize some database applications.

122
00:08:25,640 --> 00:08:28,550
Data in an instance store is ephemeral, or,

123
00:08:28,550 --> 00:08:33,330
in other words, it only persists during the lifetime of an instance.

124
00:08:33,330 --> 00:08:35,820
If the underlying disk drive fails,

125
00:08:35,820 --> 00:08:39,200
the instance stops, or the instance terminates,

126
00:08:39,200 --> 00:08:42,060
then the data in the instance store is lost,

127
00:08:42,060 --> 00:08:45,480
so make sure you have another source outside of the

128
00:08:45,480 --> 00:08:48,740
instance store for persistent data.

129
00:08:48,740 --> 00:08:54,940
Note that for instance reboots, the data is preserved.

130
00:08:54,940 --> 00:08:56,740
Congratulations.

131
00:08:56,740 --> 00:08:58,460
You've seen monitoring options,

132
00:08:58,460 --> 00:09:02,060
including CloudWatch and some database service specific

133
00:09:02,060 --> 00:09:05,540
tools like RDS Performance Insights.

134
00:09:05,540 --> 00:09:10,590
You've seen a variety of common database issues and how those may vary

135
00:09:10,590 --> 00:09:13,500
depending on the database service you are using.

136
00:09:13,500 --> 00:09:17,430
You also covered several performance optimization strategies,

137
00:09:17,430 --> 00:09:20,840
including increasing instance size,

138
00:09:20,840 --> 00:09:25,740
provisioned versus on‑demand mode, read replicas and sharding,

139
00:09:25,740 --> 00:09:30,880
partitions and indexes, and different disk types available based

140
00:09:30,880 --> 00:09:40,000
on your performance requirements. Join me in the next module, where we'll cover applying database security.

