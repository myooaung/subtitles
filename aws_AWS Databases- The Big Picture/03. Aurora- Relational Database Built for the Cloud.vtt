WEBVTT
1
00:00:01.090 --> 00:00:05.110
There are four big challenges when using relational databases.

2
00:00:05.110 --> 00:00:08.340
First, throughput and performance.

3
00:00:08.340 --> 00:00:11.820
Can your database deployment keep up with the amount of queries and

4
00:00:11.820 --> 00:00:14.940
data that has to move in and out of the system?

5
00:00:14.940 --> 00:00:18.140
Can the database engine handle your data growth?

6
00:00:18.140 --> 00:00:20.540
Next, data preservation.

7
00:00:20.540 --> 00:00:25.040
How does your database mitigate hardware failure so you don't lose any data?

8
00:00:25.040 --> 00:00:26.540
What about human error?

9
00:00:26.540 --> 00:00:28.550
If someone accidentally deletes something,

10
00:00:28.550 --> 00:00:33.640
how easy is it to restore to a point in time before they deleted the data?

11
00:00:33.640 --> 00:00:39.240
Third, finding the right resources to optimize your database administration.

12
00:00:39.240 --> 00:00:41.860
Is your database engine so specialized that it's

13
00:00:41.860 --> 00:00:44.340
hard to find people to support it?

14
00:00:44.340 --> 00:00:46.950
How long does it take to train someone to a level that

15
00:00:46.950 --> 00:00:49.220
they are proficient with the technology?

16
00:00:49.220 --> 00:00:50.970
Finally, cost.

17
00:00:50.970 --> 00:00:53.320
What is the pricing model of your database?

18
00:00:53.320 --> 00:00:57.040
Does it allow you to save money during slow usage periods?

19
00:00:57.040 --> 00:00:59.740
Are there high upfront licensing costs?

20
00:00:59.740 --> 00:01:02.030
From the available relational database engines,

21
00:01:02.030 --> 00:01:05.600
you may not have seen Amazon Aurora before.

22
00:01:05.600 --> 00:01:10.740
Let's get into what is different about Aurora and where it could be a good fit.

23
00:01:10.740 --> 00:01:14.600
Amazon Aurora is a cloud‑native relational database,

24
00:01:14.600 --> 00:01:17.820
meaning it was designed to solve the challenges we discussed on

25
00:01:17.820 --> 00:01:21.740
the previous slide by leveraging cloud features.

26
00:01:21.740 --> 00:01:25.120
For example, for read‑intensive applications,

27
00:01:25.120 --> 00:01:29.440
Aurora can have up to 15 low‑latency read replicas

28
00:01:29.440 --> 00:01:32.340
across three availability zones.

29
00:01:32.340 --> 00:01:40.240
Each Aurora database instance can also handle up to 128 TB of database storage.

30
00:01:40.240 --> 00:01:41.970
To make your data durable,

31
00:01:41.970 --> 00:01:45.870
Aurora replicates six copies of your data across three

32
00:01:45.870 --> 00:01:50.940
availability zones and continuously backs up data to S3.

33
00:01:50.940 --> 00:01:53.510
You can also enable global database,

34
00:01:53.510 --> 00:01:59.640
which allows a single Aurora database to span multiple AWS regions.

35
00:01:59.640 --> 00:02:03.170
Aurora is MySQL or PostgreSQL compatible,

36
00:02:03.170 --> 00:02:06.740
so there's no new language or specialized tools to learn.

37
00:02:06.740 --> 00:02:10.360
Much of the database administration is built in and automatic,

38
00:02:10.360 --> 00:02:14.140
so you won't need an army of DBAs just to keep the lights on.

39
00:02:14.140 --> 00:02:14.970
Finally,

40
00:02:14.970 --> 00:02:18.550
Aurora is about one‑tenth the cost of commercial databases

41
00:02:18.550 --> 00:02:20.960
with similar performance and features.

42
00:02:20.960 --> 00:02:25.320
You can also utilize Aurora Serverless, which automatically scales up

43
00:02:25.320 --> 00:02:32.000
and down based on usage so you don't have to worry about over or underprovisioning your database instances.

