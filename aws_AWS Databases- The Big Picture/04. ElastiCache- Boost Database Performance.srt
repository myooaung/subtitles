1
00:00:01,040 --> 00:00:04,820
When you need sub‑millisecond response times or need to ease

2
00:00:04,820 --> 00:00:07,730
the load off of databases and applications,

3
00:00:07,730 --> 00:00:10,410
you can use Amazon Elasticache.

4
00:00:10,410 --> 00:00:14,140
Elasticache works as an in‑memory datastore and cache and

5
00:00:14,140 --> 00:00:17,040
can scale up to hold large datasets.

6
00:00:17,040 --> 00:00:21,040
It sits between your requests and other back‑end sources

7
00:00:21,040 --> 00:00:23,410
like your database or application server,

8
00:00:23,410 --> 00:00:27,540
allowing faster in‑memory speed for retrieving values.

9
00:00:27,540 --> 00:00:29,620
Elasticache is fully managed,

10
00:00:29,620 --> 00:00:34,250
so the hardware provisioning, software patching, setup configuration, and

11
00:00:34,250 --> 00:00:38,140
monitoring of your clusters is taken care of for you.

12
00:00:38,140 --> 00:00:42,800
Elasticache is compatible with both Redis and Memcached.

13
00:00:42,800 --> 00:00:44,910
Each engine offers some different features,

14
00:00:44,910 --> 00:00:48,650
so depending on your requirements, you may choose one over the other.

15
00:00:48,650 --> 00:00:53,080
Redis supports more advanced data types and operations such as lists,

16
00:00:53,080 --> 00:00:54,670
sets, and sorting.

17
00:00:54,670 --> 00:00:59,940
Redis also allows persistence and can run in multiple availability zones.

18
00:00:59,940 --> 00:01:11,000
Memcached is better suited for object caching and is simple to implement and use. Memcached also scales out to hold much larger datasets.

