WEBVTT
1
00:00:01.440 --> 00:00:06.110
Let's go through some options that affect the cost of your database solution.

2
00:00:06.110 --> 00:00:12.240
The most basic factor for databases that are tied to instances is instance size.

3
00:00:12.240 --> 00:00:16.140
Larger instance size equals a higher cost.

4
00:00:16.140 --> 00:00:17.850
While this sounds very basic,

5
00:00:17.850 --> 00:00:20.230
does everyone who has permission to launch a

6
00:00:20.230 --> 00:00:23.300
database in your AWS account know that?

7
00:00:23.300 --> 00:00:28.960
Overprovisioning instance sizes can significantly add to costs over time.

8
00:00:28.960 --> 00:00:32.870
For database services that don't have instances to size,

9
00:00:32.870 --> 00:00:35.240
some charge by reads and writes.

10
00:00:35.240 --> 00:00:39.150
Others provide options such as on‑demand modes that scale up

11
00:00:39.150 --> 00:00:43.450
and down automatically and charge you based on actual use or

12
00:00:43.450 --> 00:00:46.710
provisioned modes where you have a fixed amount of capacity

13
00:00:46.710 --> 00:00:49.040
that you pay for by the hour.

14
00:00:49.040 --> 00:00:53.960
It's important to understand the pricing model of your database service and

15
00:00:53.960 --> 00:00:58.230
compare the different options based on your actual usage.

16
00:00:58.230 --> 00:00:59.980
As you scale up or down,

17
00:00:59.980 --> 00:01:05.240
you may need to adjust your pricing strategy for a particular database service.

18
00:01:05.240 --> 00:01:06.210
For example,

19
00:01:06.210 --> 00:01:09.190
reserved instances and savings plans are good

20
00:01:09.190 --> 00:01:12.440
options for more continuous workloads.

21
00:01:12.440 --> 00:01:17.480
Whether or not you use managed services can also be a cost factor.

22
00:01:17.480 --> 00:01:22.860
In some cases, managed services may cost more on your AWS bill,

23
00:01:22.860 --> 00:01:27.720
but you may spend less on resources to support your AWS infrastructure.

24
00:01:27.720 --> 00:01:31.890
Disk type and usage is another factor for cost.

25
00:01:31.890 --> 00:01:36.260
The disk type you use should be based on your performance requirements.

26
00:01:36.260 --> 00:01:37.500
Utilizing slower,

27
00:01:37.500 --> 00:01:43.030
less expensive storage for less frequently accessed data can help control costs.

28
00:01:43.030 --> 00:01:47.540
Some database services like Timestream automatically manage this for you.

29
00:01:47.540 --> 00:01:51.170
How much disk are you allocating for your databases? For some

30
00:01:51.170 --> 00:01:54.550
storage types, you pay for allocated space,

31
00:01:54.550 --> 00:01:58.440
while others only charge for space actually used.

32
00:01:58.440 --> 00:02:04.840
For example, if a developer allocates 1 TB of data in their database,

33
00:02:04.840 --> 00:02:08.390
you are going to pay for that whether they fill it or not and

34
00:02:08.390 --> 00:02:11.140
whether the database is running or not.

35
00:02:11.140 --> 00:02:12.070
In this case,

36
00:02:12.070 --> 00:02:16.010
you would want to encourage developers to only allocate the space they

37
00:02:16.010 --> 00:02:20.850
actually need for that short duration so you're not paying for unused

38
00:02:20.850 --> 00:02:24.360
space. For each database type and environment,

39
00:02:24.360 --> 00:02:28.150
be sure to understand which type of space you are dealing with

40
00:02:28.150 --> 00:02:30.940
and provision your disk space accordingly.

41
00:02:30.940 --> 00:02:34.940
Backups are another area of cost that can be easy to overlook,

42
00:02:34.940 --> 00:02:36.080
but again,

43
00:02:36.080 --> 00:02:39.570
everything you store or allocate is going to have an

44
00:02:39.570 --> 00:02:43.470
associated charge. Some services backup to S3,

45
00:02:43.470 --> 00:02:48.240
which saves you money over using other disk types to store backups.

46
00:02:48.240 --> 00:02:53.080
You should also have a backup lifecycle plan in place to prevent holding onto

47
00:02:53.080 --> 00:02:56.940
backups for longer than they are useful to your application.

48
00:02:56.940 --> 00:03:00.140
When considering multi‑AZ or multi‑region,

49
00:03:00.140 --> 00:03:02.930
you're going to double or even triple the cost,

50
00:03:02.930 --> 00:03:06.980
depending on your configuration. Again, if your requirements

51
00:03:06.980 --> 00:03:09.740
dictate that you need high availability,

52
00:03:09.740 --> 00:03:10.990
then do it.

53
00:03:10.990 --> 00:03:15.440
If not, then that's another great place to save on costs.

54
00:03:15.440 --> 00:03:19.460
The actual database engine you choose to run also affects costs.

55
00:03:19.460 --> 00:03:23.140
Are you running an open source or commercial database engine?

56
00:03:23.140 --> 00:03:25.000
What is the license cost?

57
00:03:25.000 --> 00:03:28.940
Is that engine providing you unique features to justify the cost?

58
00:03:28.940 --> 00:03:31.670
Network transfer can also incur charges,

59
00:03:31.670 --> 00:03:34.960
so it's important to understand if that's a factor with

60
00:03:34.960 --> 00:03:38.750
your database service and optimize your design to minimize

61
00:03:38.750 --> 00:03:41.090
those network transfer costs.

62
00:03:41.090 --> 00:03:44.650
Finally, pricing models are constantly evolving,

63
00:03:44.650 --> 00:03:45.730
and over the years,

64
00:03:45.730 --> 00:03:51.040
AWS has introduced several different ways to lower your operating costs.

65
00:03:51.040 --> 00:03:56.540
Some built‑in tools to help you optimize costs include AWS Budgets,

66
00:03:56.540 --> 00:04:02.140
AWS Cost & Usage Report, and AWS Cost Explorer.

67
00:04:02.140 --> 00:04:06.370
Regular use of these tools helps you stay informed of the best

68
00:04:06.370 --> 00:04:10.260
pricing options for your overall usage and can result in

69
00:04:10.260 --> 00:04:15.540
significant savings to your monthly AWS bill.

70
00:04:15.540 --> 00:04:19.860
Great job, you've seen the importance of understanding your application

71
00:04:19.860 --> 00:04:24.040
requirements and how that really drives the design of your database.

72
00:04:24.040 --> 00:04:25.100
In particular,

73
00:04:25.100 --> 00:04:30.000
you saw how understanding the type and volume of data you need to store,

74
00:04:30.000 --> 00:04:34.360
expected traffic volume and response times, and any compliance

75
00:04:34.360 --> 00:04:38.040
requirements is essential when designing your database.

76
00:04:38.040 --> 00:04:40.220
You covered different availability options,

77
00:04:40.220 --> 00:04:43.920
including single, multi‑AZ, and multi‑region,

78
00:04:43.920 --> 00:04:49.040
and you saw the many factors that can affect the cost of your database solution.

79
00:04:49.040 --> 00:04:57.000
Join me in the next module, where we'll discuss what to consider when migrating and deploying databases.

