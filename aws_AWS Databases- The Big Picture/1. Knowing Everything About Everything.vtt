WEBVTT
1
00:00:01.040 --> 00:00:01.310
Hi.

2
00:00:01.310 --> 00:00:06.360
This is Craig Golightly, and welcome to AWS Databases: The Big Picture,

3
00:00:06.360 --> 00:00:11.140
Becoming a Database Specialist.

4
00:00:11.140 --> 00:00:14.650
Let's talk about the role of a database specialist and some of

5
00:00:14.650 --> 00:00:17.540
the different skills to learn for that role.

6
00:00:17.540 --> 00:00:22.240
We'll also cover the five domains AWS uses to describe a database

7
00:00:22.240 --> 00:00:26.520
specialist and how those map to real‑world applications.

8
00:00:26.520 --> 00:00:27.340
Finally,

9
00:00:27.340 --> 00:00:31.910
I'll discuss the AWS Certified Database ‑ Specialty exam and how

10
00:00:31.910 --> 00:00:36.120
learning more about the AWS database offerings can help you whether

11
00:00:36.120 --> 00:00:38.740
or not you're planning to take the exam.

12
00:00:38.740 --> 00:00:41.760
Data is evolving at an exponential pace.

13
00:00:41.760 --> 00:00:44.830
The amount of data generated every day is orders of

14
00:00:44.830 --> 00:00:48.230
magnitude larger than 5 or 10 years ago and doesn't show

15
00:00:48.230 --> 00:00:50.790
signs of slowing down anytime soon.

16
00:00:50.790 --> 00:00:55.180
Here's some statistics from Domo's Data Never Sleeps 8.0 about

17
00:00:55.180 --> 00:00:58.640
what was happening every minute of 2020.

18
00:00:58.640 --> 00:01:02.410
There's a huge variety of activities with a wide variety of

19
00:01:02.410 --> 00:01:04.910
data involved to complete these actions,

20
00:01:04.910 --> 00:01:09.010
and we expect most of these transactions to be instantaneous.

21
00:01:09.010 --> 00:01:11.720
Reports can't take all night or weekend to run,

22
00:01:11.720 --> 00:01:14.200
they'll be outdated before they finish.

23
00:01:14.200 --> 00:01:18.640
It's no longer enough to just have one powerful database.

24
00:01:18.640 --> 00:01:21.870
You need several types of databases to handle different

25
00:01:21.870 --> 00:01:25.100
types of data and operational requirements.

26
00:01:25.100 --> 00:01:27.940
Specialization is the key.

27
00:01:27.940 --> 00:01:32.710
Being a database specialist is about knowing what service to use for a

28
00:01:32.710 --> 00:01:37.240
given scenario and how to best use that service.

29
00:01:37.240 --> 00:01:41.940
In other words, it requires both breadth and depth.

30
00:01:41.940 --> 00:01:44.270
While it may feel like you have to know everything about

31
00:01:44.270 --> 00:01:46.140
everything when it comes to databases,

32
00:01:46.140 --> 00:01:49.740
let's break the process down a little further.

33
00:01:49.740 --> 00:01:55.230
You can think of breadth as choosing the best technology for the task at hand

34
00:01:55.230 --> 00:02:00.440
and depth as using that technology in the best way possible.

35
00:02:00.440 --> 00:02:04.820
Understanding the different AWS database offerings is what this

36
00:02:04.820 --> 00:02:08.200
course and this path are going to help you with.

37
00:02:08.200 --> 00:02:10.430
This helps you know your options when deciding on a

38
00:02:10.430 --> 00:02:12.900
solution for your implementation.

39
00:02:12.900 --> 00:02:16.560
I'll cover each database service at a high level in this course,

40
00:02:16.560 --> 00:02:19.570
some use cases that the service does a good job at,

41
00:02:19.570 --> 00:02:23.710
as well as some use cases where you would not want to use the service.

42
00:02:23.710 --> 00:02:27.550
Knowing what not to use for certain use cases can help you avoid

43
00:02:27.550 --> 00:02:31.260
common pitfalls that you may experience if you're not aware of the

44
00:02:31.260 --> 00:02:33.930
different database types and services.

45
00:02:33.930 --> 00:02:38.030
Choosing the right service for the job saves you development time,

46
00:02:38.030 --> 00:02:39.520
makes maintenance easier,

47
00:02:39.520 --> 00:02:43.200
and can drastically improve the performance of your solution.

48
00:02:43.200 --> 00:02:46.280
Once you're working with a particular database service,

49
00:02:46.280 --> 00:02:51.880
having a depth of knowledge of the service helps you set up secure and robust

50
00:02:51.880 --> 00:02:55.760
systems to handle complex scenarios in the database domain.

51
00:02:55.760 --> 00:03:00.440
For example, what tasks are managed by the service?

52
00:03:00.440 --> 00:03:03.560
What geographical configurations are supported?

53
00:03:03.560 --> 00:03:06.340
Are there any restrictions on data size?

54
00:03:06.340 --> 00:03:09.340
What tools can you use with the service?

55
00:03:09.340 --> 00:03:13.620
Knowing the feature set of each service helps you work quickly and

56
00:03:13.620 --> 00:03:17.830
implement your solution in the best possible way.

57
00:03:17.830 --> 00:03:22.980
Database design involves making decisions based on certain constraints.

58
00:03:22.980 --> 00:03:26.840
The most common constraints you'll encounter are time,

59
00:03:26.840 --> 00:03:30.720
cost, security, and complexity.

60
00:03:30.720 --> 00:03:33.810
For time, you may have a minimum query time.

61
00:03:33.810 --> 00:03:34.940
For some industries,

62
00:03:34.940 --> 00:03:38.280
a slowdown of just a few milliseconds on query

63
00:03:38.280 --> 00:03:41.640
response time can affect the application.

64
00:03:41.640 --> 00:03:46.190
You might have a requirement for how long a backup should take to run or

65
00:03:46.190 --> 00:03:49.740
how long you have to restore a database from a backup.

66
00:03:49.740 --> 00:03:53.650
You might have an uptime constraint to keep for a service level agreement,

67
00:03:53.650 --> 00:03:55.140
or SLA.

68
00:03:55.140 --> 00:03:57.870
How quickly can your solution be implemented?

69
00:03:57.870 --> 00:04:00.150
Will it require additional skill sets,

70
00:04:00.150 --> 00:04:03.740
and do you have access to individuals with those skill sets,

71
00:04:03.740 --> 00:04:06.840
or will existing team members need to be trained?

72
00:04:06.840 --> 00:04:09.640
Rarely will a project have unlimited budget,

73
00:04:09.640 --> 00:04:13.440
so cost is almost always a top consideration.

74
00:04:13.440 --> 00:04:17.390
Knowing the cost for different elements of your database solution

75
00:04:17.390 --> 00:04:22.620
and how those costs change based on your usage and configuration is

76
00:04:22.620 --> 00:04:25.040
essential as you design your solution.

77
00:04:25.040 --> 00:04:29.710
Accounting for costs and providing appropriate audit data is also important,

78
00:04:29.710 --> 00:04:33.860
particularly in multitenant situations where you need to allocate

79
00:04:33.860 --> 00:04:37.490
cost back to different users of your application.

80
00:04:37.490 --> 00:04:40.550
Cost and performance are closely tied together,

81
00:04:40.550 --> 00:04:44.590
and being able to define that relationship helps you understand the

82
00:04:44.590 --> 00:04:48.240
incremental cost for adding resources to boost performance,

83
00:04:48.240 --> 00:04:53.440
as well as the incremental cost for adding more data to your database.

84
00:04:53.440 --> 00:04:56.440
Security constraints are often nonnegotiable,

85
00:04:56.440 --> 00:05:00.610
so knowing what is and is not supported for your database can help you

86
00:05:00.610 --> 00:05:04.830
avoid a partial implementation that has to be scrapped because the proper

87
00:05:04.830 --> 00:05:07.700
security wasn't considered from the beginning.

88
00:05:07.700 --> 00:05:10.260
Encryption is built into some services,

89
00:05:10.260 --> 00:05:14.240
while others need to be configured to enable that feature.

90
00:05:14.240 --> 00:05:16.560
You'll also have different options when it comes to

91
00:05:16.560 --> 00:05:18.920
encryption keys and access policies,

92
00:05:18.920 --> 00:05:23.040
all of which can affect the other constraints you're working with.

93
00:05:23.040 --> 00:05:24.530
Finally, complexity.

94
00:05:24.530 --> 00:05:28.750
In meeting the other constraints, how complex is your solution?

95
00:05:28.750 --> 00:05:31.880
Is there anything you can do to simplify the design or the

96
00:05:31.880 --> 00:05:34.790
number of services involved in your solution?

97
00:05:34.790 --> 00:05:40.360
For example, some backup operations can involve additional AWS services,

98
00:05:40.360 --> 00:05:44.510
while others happen automatically within the database service itself.

99
00:05:44.510 --> 00:05:46.540
You may be able to increase performance,

100
00:05:46.540 --> 00:05:49.520
but it could add a few more layers of complexity to

101
00:05:49.520 --> 00:05:51.740
your database implementation.

102
00:05:51.740 --> 00:05:55.640
Data management is one of those things that is expected to just work,

103
00:05:55.640 --> 00:06:00.240
but it usually takes quite a bit of work to get it done.

104
00:06:00.240 --> 00:06:02.640
If you're updating an existing system,

105
00:06:02.640 --> 00:06:05.720
changing database types or migrating to the cloud,

106
00:06:05.720 --> 00:06:10.240
getting data into the target system is a major task.

107
00:06:10.240 --> 00:06:12.680
Understanding the different options, constraints,

108
00:06:12.680 --> 00:06:15.930
and tools available based on your particular database

109
00:06:15.930 --> 00:06:19.240
setup can help make the transition easier.

110
00:06:19.240 --> 00:06:25.030
Backup and Restore is another major operational component of using a database,

111
00:06:25.030 --> 00:06:27.620
and each service has different options.

112
00:06:27.620 --> 00:06:31.700
Do you need to run on a schedule or just manually as needed?

113
00:06:31.700 --> 00:06:35.180
Should the backups be encrypted or is plaintext okay?

114
00:06:35.180 --> 00:06:38.130
Are there geographic constraints for where backups

115
00:06:38.130 --> 00:06:40.660
should be relative to the target system.

116
00:06:40.660 --> 00:06:43.360
How much time do you have for Backup and Restore?

117
00:06:43.360 --> 00:06:45.550
Can it be done with the database online,

118
00:06:45.550 --> 00:06:48.440
or do you have to take the database offline?

119
00:06:48.440 --> 00:06:51.790
Having the proper data protection in place can make or

120
00:06:51.790 --> 00:06:54.490
break a business when disaster strikes,

121
00:06:54.490 --> 00:06:58.040
so getting Backup and Restore set up right is one of the most

122
00:06:58.040 --> 00:07:01.840
important tasks of your database implementation.

123
00:07:01.840 --> 00:07:07.100
Finally, automation is an important tool when it comes to data management.

124
00:07:07.100 --> 00:07:11.270
Consistent, reliable automation can help reduce the chance of

125
00:07:11.270 --> 00:07:14.920
introducing errors into your solution when performing data

126
00:07:14.920 --> 00:07:19.160
management tasks manually. Other AWS services,

127
00:07:19.160 --> 00:07:22.830
as well as native and third‑party tools, are available to

128
00:07:22.830 --> 00:07:25.940
help you automate data management tasks.

129
00:07:25.940 --> 00:07:29.290
Data management decisions often affect the performance,

130
00:07:29.290 --> 00:07:31.780
cost, and complexity of your solution.

131
00:07:31.780 --> 00:07:35.440
So as you work through the constraints we discussed on the previous slide,

132
00:07:35.440 --> 00:07:43.000
be aware of how data management can help you bring those constraints into the proper balance for your implementation.

