WEBVTT
1
00:00:01.040 --> 00:00:08.740
Hi, this is Craig Golightly, and welcome to Applying Database Security.

2
00:00:08.740 --> 00:00:12.590
We're going to discuss encryption options for your data,

3
00:00:12.590 --> 00:00:17.540
then how to audit database activity and avoid vulnerabilities.

4
00:00:17.540 --> 00:00:21.780
Finally, we'll cover some additional security measures available to you,

5
00:00:21.780 --> 00:00:26.920
depending on your database service. As you consider what to encrypt,

6
00:00:26.920 --> 00:00:33.040
when to encrypt, and how to encrypt, let's review some key areas to consider.

7
00:00:33.040 --> 00:00:35.740
We talked about migration earlier in the course,

8
00:00:35.740 --> 00:00:39.020
but it is worth mentioning again that securing data

9
00:00:39.020 --> 00:00:42.340
during migration is absolutely essential.

10
00:00:42.340 --> 00:00:46.380
You may choose to encrypt with your own keys before transit or

11
00:00:46.380 --> 00:00:50.080
use AWS services for encryption in transit,

12
00:00:50.080 --> 00:00:53.110
followed by the supported option provided by your

13
00:00:53.110 --> 00:00:56.440
target database to encrypt your data.

14
00:00:56.440 --> 00:00:59.840
Backups and logs may also need to be encrypted.

15
00:00:59.840 --> 00:01:03.840
These may be easier to forget since they happen in the background,

16
00:01:03.840 --> 00:01:07.420
but they still contain your data and need to be considered as

17
00:01:07.420 --> 00:01:10.340
part of your overall encryption strategy.

18
00:01:10.340 --> 00:01:13.950
Finally, you could have the best encryption in the world,

19
00:01:13.950 --> 00:01:17.840
but if you haven't secured how you connect to your database,

20
00:01:17.840 --> 00:01:23.440
that weak link could compromise your entire system and all of the data in it.

21
00:01:23.440 --> 00:01:27.950
Use a secrets manager and follow the principle of least privilege

22
00:01:27.950 --> 00:01:31.340
when connecting to your database and creating credentials for

23
00:01:31.340 --> 00:01:36.040
users and applications to access data.

24
00:01:36.040 --> 00:01:40.590
AWS provides encryption options to help keep your data secure

25
00:01:40.590 --> 00:01:44.440
and save you time by making these easy to use.

26
00:01:44.440 --> 00:01:46.490
Amazon Key Management Service,

27
00:01:46.490 --> 00:01:50.950
or KMS, is a service you will see listed for use with most

28
00:01:50.950 --> 00:01:54.640
database services to assist with data encryption.

29
00:01:54.640 --> 00:01:59.920
KMS is a managed service that provides you centralized control over the

30
00:01:59.920 --> 00:02:04.240
lifecycle and permissions of your encryption keys.

31
00:02:04.240 --> 00:02:09.760
KMS uses hardware security modules, or HSMs, that meet many industry

32
00:02:09.760 --> 00:02:13.630
standards for secure key generation and storage.

33
00:02:13.630 --> 00:02:17.720
You can control which users have access to administer each key and

34
00:02:17.720 --> 00:02:21.990
which users have access to use those keys. You can also enable

35
00:02:21.990 --> 00:02:25.340
automatic yearly rotation of master keys.

36
00:02:25.340 --> 00:02:26.190
Don't worry,

37
00:02:26.190 --> 00:02:30.790
you won't have to bulk reencrypt everything when a key rotates. KMS

38
00:02:30.790 --> 00:02:34.670
automatically keeps previous versions of keys to use for decryption of

39
00:02:34.670 --> 00:02:38.120
data encrypted under an old version of the key,

40
00:02:38.120 --> 00:02:41.370
then all new encryption requests are encrypted under

41
00:02:41.370 --> 00:02:43.410
the newest version of the key.

42
00:02:43.410 --> 00:02:45.070
As a managed service,

43
00:02:45.070 --> 00:02:50.320
KMS dynamically scales to meet your demand, is extremely durable, 11 9s,

44
00:02:50.320 --> 00:02:55.050
and is integrated with many AWS services for ease of use,

45
00:02:55.050 --> 00:02:58.440
including CloudTrail so you can audit who used what

46
00:02:58.440 --> 00:03:03.240
keys when and where they were used.

47
00:03:03.240 --> 00:03:06.500
When you generate a master key in KMS,

48
00:03:06.500 --> 00:03:11.740
you can import your own key or have KMS generate it for you.

49
00:03:11.740 --> 00:03:15.640
You'll then decide which IAM users and roles can use the

50
00:03:15.640 --> 00:03:19.340
key and which can administer the key.

51
00:03:19.340 --> 00:03:25.260
Integrated AWS services generate a data encryption key to encrypt the data in

52
00:03:25.260 --> 00:03:31.360
the service. KMS uses envelope encryption to encrypt the data encryption key

53
00:03:31.360 --> 00:03:37.400
with a master key from KMS. You can choose to let AWS manage the customer

54
00:03:37.400 --> 00:03:42.810
master key used to encrypt the data encryption key for the service, or you can

55
00:03:42.810 --> 00:03:51.280
manage the CMK used for that envelope encryption. AWS CloudHSM is the service

56
00:03:51.280 --> 00:03:56.130
to use if you require a single tenant hardware security module to manage your

57
00:03:56.130 --> 00:04:02.940
keys or if you need to interact directly with the HSM. CloudHSM launches into

58
00:04:02.940 --> 00:04:07.890
your own VPC so you have total control over access to the device.

59
00:04:07.890 --> 00:04:11.740
You pay an hourly charge for each CloudHSM you launch.

60
00:04:11.740 --> 00:04:14.520
This is different than the previous generation where you had

61
00:04:14.520 --> 00:04:17.140
to pay an upfront fee for each device.

62
00:04:17.140 --> 00:04:21.210
Now you simply pay an hourly charge for each device you use. With

63
00:04:21.210 --> 00:04:24.980
CloudHSM, AWS automates the hardware provisioning,

64
00:04:24.980 --> 00:04:29.070
patching, and backups of the underlying HSMs so you can

65
00:04:29.070 --> 00:04:33.140
interact with your cluster as one logical HSM.

66
00:04:33.140 --> 00:04:37.190
You can add and remove HSMs from your cluster on demand, and

67
00:04:37.190 --> 00:04:46.000
CloudHSM will automatically load balance requests and securely duplicate keys to all HSMs in the cluster.

