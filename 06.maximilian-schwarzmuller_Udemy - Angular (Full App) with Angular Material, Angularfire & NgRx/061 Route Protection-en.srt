1
00:00:02,310 --> 00:00:07,900
Time to add some roud protection with that I mean that we can't reach the training route if we're not

2
00:00:07,920 --> 00:00:09,380
affected basically.

3
00:00:09,540 --> 00:00:12,040
And for that we can use a route guard.

4
00:00:12,360 --> 00:00:18,310
Now I'll go to the off folder and add off guard dogs.

5
00:00:18,330 --> 00:00:28,000
TS now export a Claassen here which all named off guard and this will actually be a normal typescript

6
00:00:28,000 --> 00:00:29,060
class.

7
00:00:29,450 --> 00:00:37,430
It will implement a certain interface though an interface which needs to be imported from at angular

8
00:00:37,460 --> 00:00:38,460
router.

9
00:00:38,840 --> 00:00:40,800
Now which interface is this.

10
00:00:40,820 --> 00:00:44,300
It's the can activate interface.

11
00:00:44,360 --> 00:00:50,810
So for this colossal Abdy implements keyword and then implement that can activate interface.

12
00:00:51,140 --> 00:00:56,760
And this now forces me to add a can activate method in this method.

13
00:00:56,930 --> 00:00:59,870
We actually get a couple of different arguments.

14
00:00:59,960 --> 00:01:10,830
The first argument is the route we're trying to activate it's of type activated route snapshot which

15
00:01:10,850 --> 00:01:13,770
you actually import from the router package.

16
00:01:13,880 --> 00:01:16,820
So the same we used to import can activate

17
00:01:19,650 --> 00:01:27,010
the second argument we receive here is the current routing state it's type routers state snapshot.

18
00:01:27,180 --> 00:01:33,470
And does this also import that from the angular router packet and not from any other package.

19
00:01:34,550 --> 00:01:42,380
So this method will be executed by angular in the US off guard whenever we well run into it and I will

20
00:01:42,380 --> 00:01:49,940
show how we attach it to our route and a second the off guard is not complete though it needs to return

21
00:01:49,940 --> 00:01:56,820
true or a promise that resolves to true or an observable that resolves to true.

22
00:01:57,140 --> 00:02:02,100
So here I will return true for now.

23
00:02:02,110 --> 00:02:05,490
Now that would be correct and it would always grant us access.

24
00:02:05,540 --> 00:02:09,000
Now instead of course I want to check whether the user is offended.

25
00:02:09,290 --> 00:02:17,120
So at d at injectable decorator here which needs to be imported from at angular CT

26
00:02:20,030 --> 00:02:26,570
and I do add it such to they can inject the off service year because the off service is the part where

27
00:02:26,570 --> 00:02:29,680
we find out where the user is offending get it or not.

28
00:02:30,050 --> 00:02:39,260
So I'll inject the off service and for that you need to ensure that you do import the off service your.

29
00:02:39,470 --> 00:02:44,710
Now with the officer who has him or that we can assign this hype here and inject it.

30
00:02:45,020 --> 00:02:52,130
And now you're in can activate are actually not true but reach out to be of service and returned or

31
00:02:52,130 --> 00:03:00,770
sort of my is off method we have in there now is off Meffert if you recall is this method down here

32
00:03:01,160 --> 00:03:03,320
which records whoever user is set or not.

33
00:03:03,320 --> 00:03:06,410
And it will not be said if the user is not affected.

34
00:03:06,410 --> 00:03:12,110
So here we only return true and therefore it grant access to the route we wanted to load.

35
00:03:12,260 --> 00:03:20,270
If is of is true now actually returning just that is not enough we have to do something if it's not

36
00:03:20,330 --> 00:03:24,570
true because our wise routing will not be allowed to use we get stuck.

37
00:03:24,980 --> 00:03:29,180
So I will check if dys returns true.

38
00:03:31,330 --> 00:03:33,820
And if this is the case.

39
00:03:33,820 --> 00:03:44,530
So if we make it into this check here I will return true otherwise though if this fails I want to redirect

40
00:03:44,530 --> 00:03:45,270
the user.

41
00:03:45,460 --> 00:03:50,030
So I'll inject the angular router here.

42
00:03:51,170 --> 00:04:02,390
Which I also import from the angular router package and with that injected here I will call this router

43
00:04:03,060 --> 00:04:10,130
and now navigate to slash log in that is where I want to redirect the user to.

44
00:04:10,230 --> 00:04:15,610
If it tries to access the router was not being authenticated with that the guard the set up.

45
00:04:15,600 --> 00:04:18,440
The question is how do we use it.

46
00:04:19,270 --> 00:04:23,220
And the answer is we attach it to a route in our routing setup.

47
00:04:23,290 --> 00:04:30,640
So in the app routing module here we get our training route which should be protected and we can protect

48
00:04:30,640 --> 00:04:38,110
it by adding a new property to the route configuration which is called can activate and this is an array

49
00:04:38,110 --> 00:04:46,870
of classes which all have to implement the can weird interface because angular will execute the can

50
00:04:46,900 --> 00:04:52,000
activate method that interface forces us to implement for us.

51
00:04:52,000 --> 00:04:58,140
So this method will be executed by angular and for single or two executed.

52
00:04:58,210 --> 00:05:05,260
Well we have to add our Kinect with guard to diskette actuator array for this route where we want to

53
00:05:05,260 --> 00:05:06,040
use it.

54
00:05:06,400 --> 00:05:15,310
So here I will add my off guard and we need to add an inch or two off guard from the off that guard

55
00:05:15,310 --> 00:05:17,680
file in the off folder.

56
00:05:17,680 --> 00:05:20,680
And with that that route is now protected.

57
00:05:20,680 --> 00:05:26,690
Now there is one tiny thing missing it's not obvious but the off guard.

58
00:05:26,690 --> 00:05:31,740
Behind the scenes is treated as a service it's injected by angular.

59
00:05:31,760 --> 00:05:37,910
Even though we don't injected angler dusters for us and for days to work we need to provide it.

60
00:05:37,910 --> 00:05:44,750
Now normally we would provide a deep module but here we can provide the app routing module because it

61
00:05:44,750 --> 00:05:48,170
will still actually be made available to the entire app.

62
00:05:48,350 --> 00:05:54,170
But we only use it here in the routing section and we can make this really clear by adding providers

63
00:05:54,860 --> 00:05:55,560
here.

64
00:05:55,670 --> 00:05:58,370
So providers of guard.

65
00:05:58,670 --> 00:06:00,160
And this is a rare exception.

66
00:06:00,260 --> 00:06:07,370
You normally should provide in the app module or directly in a component but guards are fine to be provided

67
00:06:07,370 --> 00:06:09,050
in the routing module.

68
00:06:09,050 --> 00:06:20,290
Now with that we can go to our application and if I now try to access slash training here you see I

69
00:06:20,290 --> 00:06:27,170
get redirected to slash log in if I do log in successfully though.

70
00:06:28,280 --> 00:06:30,030
And I don't go to training.

71
00:06:30,230 --> 00:06:31,990
I am allowed to access this.

72
00:06:32,000 --> 00:06:33,820
I'm not redirected here.

73
00:06:34,160 --> 00:06:37,280
So this is Route protection being added.

74
00:06:37,280 --> 00:06:45,320
This was a lot of work on of education and so on and Portland but did I promise to also work on training

75
00:06:45,320 --> 00:06:49,830
data and add angular material components that relies on data.

76
00:06:49,970 --> 00:06:52,180
Well we'll work on this next.

