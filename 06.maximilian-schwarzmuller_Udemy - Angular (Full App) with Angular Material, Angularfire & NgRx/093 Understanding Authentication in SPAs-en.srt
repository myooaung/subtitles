1
00:00:02,180 --> 00:00:04,430
How does authentication work.

2
00:00:04,850 --> 00:00:05,940
We get a server.

3
00:00:05,960 --> 00:00:10,460
So firebase in our case the backend and we get our angler app.

4
00:00:10,460 --> 00:00:12,460
Now we do authenticates and we do logging.

5
00:00:12,500 --> 00:00:17,570
We sent the credentials to the server and the credentials are validated and we get back a response that

6
00:00:17,570 --> 00:00:24,320
we are of indicated now in the traditional web app where we have multiple pages we would use a session

7
00:00:24,320 --> 00:00:25,300
to store it.

8
00:00:25,340 --> 00:00:29,400
The session would be stored on the server and on the client we would get a cookie.

9
00:00:29,640 --> 00:00:34,120
Now if single page applications our back ends are stateless.

10
00:00:34,220 --> 00:00:35,660
It's a restful API.

11
00:00:35,750 --> 00:00:40,560
Firebase in the end doesn't look like one but it's kind of like a restful API.

12
00:00:40,670 --> 00:00:46,400
It doesn't care about our single app firebase is a service that doesn't store sessions and it's not

13
00:00:46,400 --> 00:00:52,790
just firebase any back and you communicate with from an angle or app is stateless because you always

14
00:00:52,790 --> 00:00:54,500
stand behind the scenes.

15
00:00:54,500 --> 00:01:02,320
Ajax HTP requests as you only got one single page and you don't request new pages in between.

16
00:01:02,720 --> 00:01:05,400
So therefore the session based approach doesn't work.

17
00:01:05,420 --> 00:01:09,730
We use a token instead of Jason weap token if you want to know the details.

18
00:01:09,980 --> 00:01:18,490
There is essentially a long string that encodes not interrupts just encodes some data about our off

19
00:01:18,500 --> 00:01:22,900
indication status data that can't be fiddled with.

20
00:01:23,000 --> 00:01:30,100
Because if we would then a token would be detected as manipulated on the server and would be invalid.

21
00:01:30,290 --> 00:01:31,750
But more about that later.

22
00:01:31,910 --> 00:01:34,100
So we get this token from the server.

23
00:01:34,220 --> 00:01:37,320
We then should store this token on the front end.

24
00:01:37,400 --> 00:01:42,170
So in the browser a typical storage place is local storage.

25
00:01:42,170 --> 00:01:47,150
Now whenever we want to access some protected resource on the server.

26
00:01:47,210 --> 00:01:53,420
So let's say our database which right now is open to everyone but we will change this whenever we want

27
00:01:53,420 --> 00:01:54,740
to access this.

28
00:01:54,800 --> 00:01:57,300
We will attach to token to the request.

29
00:01:57,320 --> 00:02:03,590
Now as I said the token is structured in a way that the server can validate whether it's still a valid

30
00:02:03,620 --> 00:02:04,340
token.

31
00:02:04,340 --> 00:02:08,950
So one which was sent by the server or manipulated attached one.

32
00:02:09,050 --> 00:02:11,480
It has like a unique fingerprint you could say.

33
00:02:11,810 --> 00:02:17,870
So if it's still the original token and we still are locked in so the token is still valid because the

34
00:02:17,870 --> 00:02:22,020
token will also expire after some time then we get access.

35
00:02:22,160 --> 00:02:23,770
Otherwise we don't.

36
00:02:23,960 --> 00:02:29,510
This is how the indication works the single page applications this token is a crucial part and the cool

37
00:02:29,510 --> 00:02:35,360
thing about firebase and angle of fire is that we already get this token and we can also do the whole

38
00:02:35,360 --> 00:02:41,810
management of this token through firebase so that we don't have to store and extract it manually that

39
00:02:41,810 --> 00:02:47,840
we don't have to worry about it's expiration because firebase behind the scenes will always give us

40
00:02:47,840 --> 00:02:50,890
a fresh token with every request we send.

41
00:02:50,990 --> 00:02:52,770
So we never have to worry about this.

42
00:02:52,850 --> 00:02:55,610
And if we log out it will destroy the tokened for us.

43
00:02:55,640 --> 00:02:57,260
So that's all changed for us.

44
00:02:57,320 --> 00:03:03,380
But it's important to understand this and this is why a single is authenticated Boullion is not enough.

45
00:03:03,380 --> 00:03:05,190
We can't sent it to the server.

46
00:03:05,300 --> 00:03:09,950
Thankfully the server wants more than just saying that we are vindicated.

47
00:03:10,400 --> 00:03:13,910
So therefore our current of indication approach isn't ideal.

48
00:03:14,030 --> 00:03:17,950
We shouldn't store our authentication status in just a boolean.

49
00:03:18,110 --> 00:03:24,900
We should work with that token and we should also protect our server our database to see if we've got

50
00:03:24,910 --> 00:03:31,350
a really working authentication because of indicating in an angle or app is easy it's just javascript.

51
00:03:31,370 --> 00:03:33,550
You could even manipulate that if you want.

52
00:03:33,680 --> 00:03:40,100
It's the server side resources that have to be protected because dare you got your sensible data if

53
00:03:40,100 --> 00:03:46,700
you manipulate the client dangler app you only manipulate your own app what you see not what's stored

54
00:03:46,700 --> 00:03:47,680
on the server.

55
00:03:47,990 --> 00:03:49,050
So that's the next step.

56
00:03:49,070 --> 00:03:52,790
Let's protect our firebase database on the server.

57
00:03:52,940 --> 00:03:59,180
And let's then use angle of fire and the authentication capabilities it gives us to use data token and

58
00:03:59,180 --> 00:04:00,650
manage all that stuff.

