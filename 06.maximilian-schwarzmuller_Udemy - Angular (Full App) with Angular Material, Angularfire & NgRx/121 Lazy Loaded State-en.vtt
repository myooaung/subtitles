WEBVTT
1

00:00:02.430 --> 00:00:07.560

So now that we finished the training reducer let's add it to the training module.



2

00:00:07.560 --> 00:00:12.430

And that is new we don't it to the app module because it's loaded lazily.



3

00:00:12.510 --> 00:00:22.300

So in the training module let's word something from at ngi our X store.



4

00:00:22.520 --> 00:00:29.510

And that something simply is our store and module again this one.



5

00:00:29.510 --> 00:00:32.340

Now India imports array of detraining module.



6

00:00:32.390 --> 00:00:42.000

I'll use the store module with the four feature method which you use to add reducer for a feature module.



7

00:00:42.080 --> 00:00:47.060

So here I'll use that and I'll need my reducer for that.



8

00:00:47.120 --> 00:00:54.710

Import my training reducer from my training dog.



9

00:00:54.740 --> 00:00:57.260

Reduce her file like this.



10

00:00:58.730 --> 00:01:00.930

And I guess I need to rename it



11

00:01:03.760 --> 00:01:04.220

yet.



12

00:01:04.470 --> 00:01:09.280

Here should be named training reducer of course not off reducer.



13

00:01:09.510 --> 00:01:14.700

So with that I import training reducer and install a module for feature.



14

00:01:14.700 --> 00:01:18.370

I now want to add my training reducer.



15

00:01:18.490 --> 00:01:21.660

It works a bit differently than the for loop method though.



16

00:01:21.700 --> 00:01:27.680

First they give this slyest a name training and then I pass the reducer.



17

00:01:27.720 --> 00:01:33.490

Now I guess this makes sense though because if you think about the app module and the app reducer there



18

00:01:33.490 --> 00:01:40.660

we had this reducer map and we had identifiers you could say 40 different slices of the state and each



19

00:01:40.660 --> 00:01:43.750

identifier hold a reference to a reducer.



20

00:01:43.760 --> 00:01:49.880

Now in the training reducer we don't have that and we have no place to set this up.



21

00:01:49.990 --> 00:01:55.810

That's why four feature gives us a chance to give this slyest a unique identifier.



22

00:01:57.120 --> 00:02:00.740

Now that is how we add this when using lazy loading.



23

00:02:00.750 --> 00:02:04.950

Now I still want to be able to get my select office going.



24

00:02:05.130 --> 00:02:09.380

So I'll go back to my training reducer for that.



25

00:02:09.480 --> 00:02:12.440

And we had a helper functions at the bottom.



26

00:02:12.540 --> 00:02:14.360

Now I'll actually add more.



27

00:02:14.790 --> 00:02:22.140

Our export number a constant number of function will be in the end which is simply named get training



28

00:02:22.200 --> 00:02:29.120

State year all use create feature selector which I need to import from the store.



29

00:02:29.140 --> 00:02:36.660

So create feature selector and that's all the import creates selector So imports debt and call create



30

00:02:36.660 --> 00:02:43.960

feature selector here and get my training state.



31

00:02:44.030 --> 00:02:50.160

Now this year this identifier has to match the identifier you set up you're in for a feature in your



32

00:02:50.160 --> 00:02:51.480

training module.



33

00:02:51.870 --> 00:02:59.170

So now we get this it's a generic type and the type will just be my training state which I have in the



34

00:02:59.170 --> 00:03:02.360

reducer here with that.



35

00:03:02.360 --> 00:03:04.700

This is my feature selector.



36

00:03:04.700 --> 00:03:10.180

Now I'd like to create a number selector for my available exercises and so on.



37

00:03:10.220 --> 00:03:16.220

The problem just is I already got the names get getaway exercises and this and so on.



38

00:03:16.220 --> 00:03:22.790

So what I'll do instead is all move these functions here since it's in the same file below my feature



39

00:03:22.790 --> 00:03:31.440

selector just to have a clear structure which is easy to understand and I'll change them a bit instead



40

00:03:31.440 --> 00:03:36.810

of just having this arrow function you're all Coale create selector to create a selector we can use



41

00:03:36.810 --> 00:03:44.910

with engine X and then reach out to my get training state function as a first argument and then pass



42

00:03:44.910 --> 00:03:51.820

this arrow function which I find in a separate function before manually as a second argument.



43

00:03:52.020 --> 00:03:57.990

So here gets training state it gives us access to the entire state slice and this arrow function then



44

00:03:57.990 --> 00:04:03.100

takes this state slice and picks the available exercises from it.



45

00:04:03.480 --> 00:04:05.410

And this is the pattern I will now repeat.



46

00:04:05.430 --> 00:04:13.470

So for get finished exercises I also use create selector get my training state and then used this arrow



47

00:04:13.470 --> 00:04:20.830

function and the same for the active training create selector gets Yaro function.



48

00:04:20.830 --> 00:04:26.880

The second argument the first argument should actually be did get training state function with that.



49

00:04:26.900 --> 00:04:28.530

Does this now all prepared.



50

00:04:28.530 --> 00:04:30.420

Now we can start using this.



51

00:04:30.420 --> 00:04:31.950

Let's use it in the next lecture.



