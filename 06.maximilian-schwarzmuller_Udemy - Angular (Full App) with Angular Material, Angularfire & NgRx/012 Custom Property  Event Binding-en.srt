1
00:00:02,330 --> 00:00:04,530
We had a look at directives and so on.

2
00:00:04,700 --> 00:00:08,110
But often your components also need to communicate with each other.

3
00:00:08,120 --> 00:00:14,590
For example here we get a product component and still we output the individual product in this div..

4
00:00:14,690 --> 00:00:20,350
Why don't we use our component which could then encapsulate the logic for a single product.

5
00:00:20,540 --> 00:00:25,370
Let's say a product would be more than just a div might have a button in special styles you want to

6
00:00:25,370 --> 00:00:30,890
put that into its own component so that you got small manageable pieces in your app and you can really

7
00:00:30,890 --> 00:00:34,200
compose your app off these re-usable pieces.

8
00:00:34,490 --> 00:00:39,940
So let's grab that Death year and let's go to the product component template and enter it here.

9
00:00:40,190 --> 00:00:41,990
Now I'll remove the loop though.

10
00:00:42,050 --> 00:00:44,220
I want to edit here and then sit here.

11
00:00:44,240 --> 00:00:46,300
I just want to output the product name.

12
00:00:46,300 --> 00:00:54,570
Let's say it's a simple product of course we might also add a paragraph where we say an awesome product.

13
00:00:54,770 --> 00:00:57,080
We also can add some styling here.

14
00:00:59,070 --> 00:01:02,850
And for dad wrapped the entire product in an article elements let's say

15
00:01:08,580 --> 00:01:15,390
Now can we can put that code into that article and here we could assign a class of product that's now

16
00:01:15,390 --> 00:01:22,380
go to the CSA as fall and add the product class here and now the styles here will only be applied to

17
00:01:22,380 --> 00:01:27,210
elements in that components templates that have the product class.

18
00:01:27,270 --> 00:01:29,410
No Obert elements anywhere on the page.

19
00:01:29,550 --> 00:01:36,570
And we could give it a border of one pixel solid black padding of 10 pixels maybe add a margin of 10

20
00:01:36,570 --> 00:01:41,360
pixels that won't be super beautiful but it's something to start with.

21
00:01:41,370 --> 00:01:46,860
Now we get the product name here and the problem will face is that in this component we can of course

22
00:01:46,890 --> 00:01:52,250
add product name but the data for it has to come from outside.

23
00:01:52,260 --> 00:01:52,590
Right.

24
00:01:52,590 --> 00:01:56,370
It has to come from our products component.

25
00:01:56,460 --> 00:02:01,440
We know that this will be a string and we can't find a tie by adding a colon and then a type it will

26
00:02:01,440 --> 00:02:01,840
be.

27
00:02:01,860 --> 00:02:03,290
That's a typescript feature.

28
00:02:03,630 --> 00:02:10,740
But we now need to make this bind table from outside just as we bound to the property of the button

29
00:02:10,800 --> 00:02:12,680
with square brackets.

30
00:02:12,690 --> 00:02:19,720
I now want to bind to my own custom property here to product name and angler's supports this with a

31
00:02:19,720 --> 00:02:27,830
number decorator we can add to a property the input decorator we added with at input and parentheses

32
00:02:27,840 --> 00:02:35,540
don't forget DS in front of the property which should be saturable from outside with Dad added.

33
00:02:35,700 --> 00:02:42,360
We can go to our products component and say yeah we want to output a couple of Apple product components

34
00:02:42,360 --> 00:02:43,830
here like this.

35
00:02:43,950 --> 00:02:51,360
We still use energy for on this custom component here with product of products the same code we had

36
00:02:51,360 --> 00:02:52,210
before.

37
00:02:52,560 --> 00:02:58,360
But we want to pass that product in each iteration down to that component.

38
00:02:58,490 --> 00:03:07,610
And since we added at import here we can now bind to product name with square brackets syntax.

39
00:03:07,620 --> 00:03:12,650
We can bind to product name like this and share the product from our array.

40
00:03:12,660 --> 00:03:19,930
This one with this component and pass it into that product name property of our component.

41
00:03:20,250 --> 00:03:25,950
And this is a pattern you see a lot because it allows you to add cross component communication to your

42
00:03:25,950 --> 00:03:34,410
app with that if we save it we see these are the products as created by our product component and we

43
00:03:34,410 --> 00:03:38,170
really use DS to output the components we add.

44
00:03:38,460 --> 00:03:45,060
So that is custom property binding a super useful feature which you need a lot of angular apps and which

45
00:03:45,150 --> 00:03:49,460
also angular material will use a lot behind the scenes.

46
00:03:49,470 --> 00:03:54,630
Now sometimes you also need to listen to events from your components so you want to do the other way

47
00:03:54,630 --> 00:03:55,650
around that.

48
00:03:55,650 --> 00:04:03,600
Let's say on the product component if we click on this component we want to change something in the

49
00:04:03,600 --> 00:04:04,940
products component.

50
00:04:05,010 --> 00:04:06,480
So in the parent component.

51
00:04:06,720 --> 00:04:13,890
So here I'll just say on clicked and now into product component I can add my method on clicked.

52
00:04:13,890 --> 00:04:19,710
But now as I said I want to do something in the products component so that the component where we include

53
00:04:19,710 --> 00:04:23,730
the product component we can do it is by emitting a custom event.

54
00:04:23,730 --> 00:04:25,800
And for that we need two things.

55
00:04:25,860 --> 00:04:32,490
The event emitter and number object provided by Engler which does what the name implies we can emit

56
00:04:32,520 --> 00:04:38,310
our own custom events with it and output and number decorator.

57
00:04:38,310 --> 00:04:46,680
We then add a property which surname will serve the event name like product clicked maybe which will

58
00:04:46,680 --> 00:04:50,510
initialize with a new value by using the new keyword.

59
00:04:50,670 --> 00:04:54,080
A new instance of the event emitter object.

60
00:04:54,420 --> 00:05:01,410
This gives as an object product clicked where we can emit events when we want to be able to listen to

61
00:05:01,410 --> 00:05:02,600
that from outside.

62
00:05:02,610 --> 00:05:05,660
We now add a decorator which is at output.

63
00:05:06,000 --> 00:05:13,290
So where at input was used to be able to receive data from the outside at output is used to pass data

64
00:05:13,320 --> 00:05:16,390
to the outside to pass our custom event to the outside.

65
00:05:16,410 --> 00:05:26,260
To be precise and an on clicked we can emit an event by calling this product clicked it like this.

66
00:05:26,480 --> 00:05:30,740
Now all we need to do is listen to that event in products component.

67
00:05:30,920 --> 00:05:36,740
So here on app product we can add a listener to product clicked.

68
00:05:36,890 --> 00:05:41,230
So to that name we a find and the product components for the property here.

69
00:05:42,460 --> 00:05:46,270
And then we can execute any code we want and the products component.

70
00:05:46,270 --> 00:05:54,200
So here between the quotation marks we could then say on remove product and pass the product.

71
00:05:54,220 --> 00:05:59,380
So this spring we have from that iteration here to that function.

72
00:05:59,380 --> 00:06:04,620
Now we just need to create that function the products component like this.

73
00:06:04,800 --> 00:06:11,050
And we know we get the product name here which is of type String type definitions are always optional

74
00:06:11,080 --> 00:06:12,790
but it's a good practice to find them.

75
00:06:12,790 --> 00:06:19,030
If it's not inferable So if typescript can't see which type it'll be any waste like here where it's

76
00:06:19,030 --> 00:06:25,270
used at it's a billion and now you're in on remove product we could reach out to products called a filter

77
00:06:25,270 --> 00:06:31,500
function which gets a function as an argument which will be executed on each element in the array.

78
00:06:31,810 --> 00:06:39,520
And then for each product we can say only keep it if the product is not equal to product name.

79
00:06:39,520 --> 00:06:45,100
If it is equal we want to throw it out that will actually give us a new array so we should set this

80
00:06:45,100 --> 00:06:51,970
products equal to this new array This products with that if we go back we can click products to remove

81
00:06:51,970 --> 00:06:52,660
them.

82
00:06:52,690 --> 00:06:59,920
So now we can also admit our own custom events in that product component and it just removed all books

83
00:07:00,010 --> 00:07:01,650
because it felt by name.

84
00:07:01,660 --> 00:07:04,740
So if they all have the same name they're all removed.

85
00:07:04,770 --> 00:07:07,270
This is custom property and event binding.

86
00:07:07,330 --> 00:07:11,200
As I said a common pattern for cross component communication.

