1
00:00:02,350 --> 00:00:10,000
In the last lecture we added one single line to store our data on our database using firebase firestorm.

2
00:00:10,390 --> 00:00:17,200
Now of course we also want to get that data from that finished exercise collection to output in our

3
00:00:17,200 --> 00:00:18,420
data table.

4
00:00:18,850 --> 00:00:22,180
Now it's actually pretty simple to do that.

5
00:00:22,510 --> 00:00:30,020
Our data table in past trainings is connected to the data returned by get completed or canceled.

6
00:00:30,040 --> 00:00:31,280
Exercise here.

7
00:00:33,640 --> 00:00:40,570
Of course we can dynamically set the date up property here we can update this whenever we fetch new

8
00:00:40,570 --> 00:00:43,220
data from our backend.

9
00:00:43,270 --> 00:00:50,790
So what we can do is we can go back to our training service and then we got exercise changed and exercise

10
00:00:50,790 --> 00:00:55,820
has changed all add a third subject which is finished.

11
00:00:55,870 --> 00:01:03,790
Exercise has changed which also gives us an exercise array but of course we're not talking about the

12
00:01:03,790 --> 00:01:11,700
equatable exercises but about these exercises down there I can there for all the named these finished

13
00:01:11,940 --> 00:01:13,290
exercises.

14
00:01:13,710 --> 00:01:21,360
So whenever DS change I want to admit this event now to ensure that I'm informed about these changes.

15
00:01:21,440 --> 00:01:28,370
I first of all have to set up a subscription using angler fire that listens to changes in my fire's

16
00:01:28,410 --> 00:01:30,270
store on the server.

17
00:01:30,570 --> 00:01:36,420
We actually already have a method get completed or canceled exercises and go to name and fetch complete

18
00:01:36,420 --> 00:01:42,070
the directs were canceled exercises to make it really clear that this is for fetching data from a server.

19
00:01:42,570 --> 00:01:48,900
And then last year I will not return anything but instead I'll use my database collection call here

20
00:01:49,500 --> 00:01:57,150
and reach out to finished exercises so this collection we're storing the data in and then call value

21
00:01:57,150 --> 00:01:58,140
changes.

22
00:01:58,140 --> 00:02:04,350
Now this only gives us an array of the document values without the idea of the document.

23
00:02:04,470 --> 00:02:09,290
But I don't need to add ID here because we only get a read only access here anyways.

24
00:02:09,330 --> 00:02:11,430
I don't need the ID for anything.

25
00:02:11,850 --> 00:02:21,810
So your value changes is what I call and I will now call subscribe on that I'll get an array of exercises

26
00:02:22,220 --> 00:02:25,400
I can add a type in rotation to be really clear about this.

27
00:02:25,440 --> 00:02:32,180
It's going to be an array of exercises which I get your and I want to do something with that array in

28
00:02:32,180 --> 00:02:33,300
this function.

29
00:02:33,560 --> 00:02:39,670
I could replace this finished exercises with it for example that sounds like a good start.

30
00:02:40,010 --> 00:02:49,310
So let's say it does finished exercises equal to exercises but we could even skip this step because

31
00:02:49,310 --> 00:02:55,600
the main thing I want to do is I want to emit finished exercise has changed.

32
00:02:55,610 --> 00:03:03,460
I want to call next year and simply pass the exercises I get back from the server to whoever's interested.

33
00:03:03,710 --> 00:03:06,050
So I can't get rid of this line here.

34
00:03:06,170 --> 00:03:11,480
And that also means I can get rid of the finished exercises array up here.

35
00:03:12,470 --> 00:03:20,030
Not only am adding a value whenever we get new finished exercises from the server and we initiate our

36
00:03:20,030 --> 00:03:25,950
listener here when we call fecche completed or canceled exercises.

37
00:03:25,950 --> 00:03:33,420
Now this listener or this method here is called from past trainings heater and until now I stored the

38
00:03:33,420 --> 00:03:36,770
result as data of my data table.

39
00:03:36,800 --> 00:03:43,470
This will no longer work though because the newly named fecche completed or canceled exercise Meffert

40
00:03:43,770 --> 00:03:45,600
doesn't return the values.

41
00:03:45,600 --> 00:03:50,130
Instead we now simply emit an event whenever devalues change.

42
00:03:50,130 --> 00:03:52,820
So it's this subject I should subscribe to.

43
00:03:52,830 --> 00:03:58,790
So in past trainings I will actually use that subject and create a subscription.

44
00:03:58,790 --> 00:04:04,930
Here in NZ and in it I'll use the training service the finished exercises.

45
00:04:04,930 --> 00:04:07,930
Changed subject and subscribe.

46
00:04:08,560 --> 00:04:13,740
And here I will actually get my exercises.

47
00:04:13,890 --> 00:04:23,110
Arrays of type exercise array which I can now assign as a data source so this data source data is now

48
00:04:23,110 --> 00:04:26,750
simply exercises like this.

49
00:04:26,810 --> 00:04:31,120
Now of course we should also unsubscribe if this component is destroyed.

50
00:04:31,230 --> 00:04:36,750
So XDR undestroyed interface and import it from at angular core.

51
00:04:36,770 --> 00:04:43,960
That's super important to prevent memory leaks and will therefore also add my energy on destroy it.

52
00:04:43,980 --> 00:04:51,410
Lisner or method I should say and I need to store it this subscription in a subscription property.

53
00:04:51,510 --> 00:04:57,760
So import subscription from our x Jay SNL.

54
00:04:57,830 --> 00:05:02,380
Now with that important I can create a new property here.

55
00:05:02,700 --> 00:05:08,000
Prior bad acts changed subscription whichever name you like.

56
00:05:08,040 --> 00:05:09,870
It's of type subscription.

57
00:05:10,670 --> 00:05:17,700
And I will set my subscription which I set up here in NC on in it equal to that newly created property.

58
00:05:17,720 --> 00:05:24,890
So the exchanged subscription and unsubscribe to that or from their subscription in on Destroy like

59
00:05:24,890 --> 00:05:25,610
that.

60
00:05:25,970 --> 00:05:32,660
So now this is cleaned up and we prevent memory leaks and now our data table should update whenever

61
00:05:32,660 --> 00:05:35,310
the data on the server updates.

62
00:05:35,360 --> 00:05:36,280
Lets have a look.

63
00:05:36,320 --> 00:05:41,730
Let's go back to our application and log in.

64
00:05:41,880 --> 00:05:48,630
And let's quickly go to past exercises and there we start with one value which makes sense because we

65
00:05:48,630 --> 00:05:52,340
got one value stored in the collection.

66
00:05:52,350 --> 00:06:01,940
And if I were to delete that value by clicking on the free dots your delete document Yes starts delete.

67
00:06:01,950 --> 00:06:07,830
You will see that in the fitness tracker it actually also was deleted.

68
00:06:08,400 --> 00:06:14,940
Now if I start a new exercise here this one maybe and I stopped that.

69
00:06:15,130 --> 00:06:17,290
And let's complete some Burpy.

70
00:06:17,330 --> 00:06:19,760
So I'll wait for this to finish.

71
00:06:20,200 --> 00:06:23,440
It's almost done now it's done.

72
00:06:23,440 --> 00:06:27,430
If I now go to past exercises we have to exercise again.

73
00:06:27,520 --> 00:06:28,350
Don't be deceived.

74
00:06:28,360 --> 00:06:29,960
We got to exercises.

75
00:06:30,100 --> 00:06:32,810
We just have page Nations set up to only show one per page.

76
00:06:32,830 --> 00:06:40,990
But what changed change does we see both exercises and we can of course still sort and also filter.

77
00:06:40,990 --> 00:06:42,640
So that still works.

78
00:06:42,760 --> 00:06:50,050
The coolest thing is if I now open this and open another browser window next to it let me quickly do

79
00:06:50,050 --> 00:06:51,130
that.

80
00:06:51,130 --> 00:06:53,940
Now I'm still logged in on the left and on the right.

81
00:06:53,950 --> 00:06:59,620
I started a new instance of this app running on the same server and then log in there to see the same

82
00:06:59,620 --> 00:07:03,510
exercise because we shared them across accounts it's not user bound right.

83
00:07:03,820 --> 00:07:11,070
So now if Why go there and start some crunches and I cancel them.

84
00:07:11,110 --> 00:07:17,420
You see them up here on the left so we got a live updating going on here due to our dynamic observable

85
00:07:17,440 --> 00:07:19,970
based subscription Wrangler fire.

86
00:07:20,020 --> 00:07:23,320
And this shows the full power of angle of fire.

87
00:07:23,350 --> 00:07:24,810
We're not done yet though.

88
00:07:24,820 --> 00:07:27,420
We work a lot with the angle of fire story.

89
00:07:27,550 --> 00:07:33,280
But there's more we can explore there and we haven't even touched authentication lets do all that.

