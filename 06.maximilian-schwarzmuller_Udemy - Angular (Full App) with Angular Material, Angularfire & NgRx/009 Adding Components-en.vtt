WEBVTT
1

00:00:02.530 --> 00:00:09.470

So in the last lecture I briefly walked you through the flow of logic and now we're at is app component.



2

00:00:09.590 --> 00:00:11.540

Now what's the idea behind components.



3

00:00:11.560 --> 00:00:12.480

How does it work.



4

00:00:12.520 --> 00:00:14.720

What's this component thing.



5

00:00:14.770 --> 00:00:22.480

A component is a building block of our app and our angler apps typically consist of many many many components.



6

00:00:22.540 --> 00:00:26.770

Each component is just a type of class which could also be empty.



7

00:00:26.800 --> 00:00:28.340

This title is not required.



8

00:00:28.630 --> 00:00:35.200

Which also receives a decorator not DMD's you module decorator though but the component decorator which



9

00:00:35.200 --> 00:00:41.530

is all imported from every angle a quarter the component decorator just asked the module decorator for



10

00:00:41.530 --> 00:00:45.690

modules turns this into more than just an ordinary class.



11

00:00:45.760 --> 00:00:51.640

It adds meta data which is understood by angular which allows angler to render to the screen.



12

00:00:51.640 --> 00:00:57.850

Each component needs to have a template which lefse and that HDMI file in this case which is to conduct



13

00:00:57.920 --> 00:01:04.090

that should be rendered does this HVM Plast Plus you could say because it allows you to add special



14

00:01:04.090 --> 00:01:09.320

syntax like does strange curly brace thing which seems to output dynamic content.



15

00:01:09.370 --> 00:01:11.160

But more on this in a second.



16

00:01:11.170 --> 00:01:16.360

What we also see besides the template is the styling which is optional though it's pointing at that



17

00:01:16.380 --> 00:01:22.300

C-s as fall where you could add some CEOs as styles which are then only applied to that component and



18

00:01:22.300 --> 00:01:24.070

to know part of your app.



19

00:01:24.400 --> 00:01:26.550

But more important is the selector.



20

00:01:26.560 --> 00:01:32.500

This is essentially your own age tiam I'll tag you could say by this selector you can implement your



21

00:01:32.620 --> 00:01:40.930

component into Avro components templates or as a special case for the app component which is defined



22

00:01:40.930 --> 00:01:44.470

as the main component in the main module.



23

00:01:44.470 --> 00:01:49.740

It also can be used in the index HQ mouthfull but that's really only DKs for the main component.



24

00:01:49.870 --> 00:01:55.450

All other components which will add in a second only go into templates of abro components.



25

00:01:55.450 --> 00:01:58.700

You always include them by their selectors though.



26

00:01:58.720 --> 00:02:03.900

So let's make this more clear by creating a new component of named products component.



27

00:02:03.910 --> 00:02:10.210

The convention is to name the product start component dot TS and then there you export a class which



28

00:02:10.210 --> 00:02:12.880

is named products components like this.



29

00:02:12.880 --> 00:02:18.650

So Pascal case in this component you can just add an empty class.



30

00:02:18.850 --> 00:02:22.240

And now important you need to add the ET component.



31

00:02:22.240 --> 00:02:28.870

Decorator does decorator is attached directly in front of the class and needs to be imported with the



32

00:02:28.990 --> 00:02:32.550

imports statement from ET angler court.



33

00:02:32.560 --> 00:02:37.480

This is one of the angular packages which is a dependency of the project.



34

00:02:37.480 --> 00:02:43.120

We need to pass a javascript object to that decorator to configure it and to core two things we should



35

00:02:43.120 --> 00:02:44.990

define is a selector.



36

00:02:45.010 --> 00:02:52.150

Typically you should add a prefix to not clash with already existing HVM all elements like app dash



37

00:02:52.540 --> 00:02:56.380

and then products maybe and then a template.



38

00:02:56.380 --> 00:02:58.170

Now here are specify a template.



39

00:02:58.180 --> 00:03:03.060

You are all pointing to a dot slash products dot component dot H.



40

00:03:03.070 --> 00:03:04.460

Him on file.



41

00:03:04.510 --> 00:03:09.840

This file doesn't exist yet so let's quickly create it next to the product component and then deadfall



42

00:03:09.850 --> 00:03:11.900

we could output some H HTML code like.



43

00:03:11.950 --> 00:03:16.650

Hi I'm a products component.



44

00:03:16.800 --> 00:03:21.450

Let's save all these files and with that we can start using that.



45

00:03:21.540 --> 00:03:28.260

We take that selector and now we don't go to the index HVM alcohol because as I said you only enter



46

00:03:28.260 --> 00:03:32.230

components here for the root component where you only have one.



47

00:03:32.640 --> 00:03:38.340

But instead we go to the template of the app component and replace the entire content with our custom



48

00:03:38.400 --> 00:03:41.160

HVM l element like this.



49

00:03:41.160 --> 00:03:47.550

Now if we go back to the application we see an empty screen and if we open the developer tools and the



50

00:03:47.550 --> 00:03:54.560

console lock their we see an error that app products is not a known element.



51

00:03:55.710 --> 00:04:01.130

This makes sense because we didn't inform angler about this and therefore too angular.



52

00:04:01.150 --> 00:04:08.440

The only thing that happens is that in the app component we have the unknown HVM l element to inform



53

00:04:08.440 --> 00:04:10.960

angler about our new component.



54

00:04:11.170 --> 00:04:17.670

We have to go to the app marshalled our TS file and then the declarations array we add our products



55

00:04:17.680 --> 00:04:19.810

component like this.



56

00:04:19.840 --> 00:04:22.550

We also need to add an import to it.



57

00:04:22.560 --> 00:04:27.700

You're in that file then that's a type of feature we need to inform typescript where this is coming



58

00:04:27.700 --> 00:04:34.720

from and we point to the product start component fall without a file extension with this if we go back



59

00:04:34.900 --> 00:04:38.200

we see Hi I'm a product component.



60

00:04:38.200 --> 00:04:43.360

So this is how we can create and use our own components and how we work with their templates.



61

00:04:43.390 --> 00:04:47.710

Now besides creating components manually We can also use to Seelye.



62

00:04:47.890 --> 00:04:52.070

So in a new terminal window because and you sort of should keep on running.



63

00:04:52.300 --> 00:04:58.390

I'll run Engy generate or just MGG as a short cut component.



64

00:04:59.680 --> 00:05:05.280

Or just Agege you see a short cut and then the name like maybe product.



65

00:05:05.950 --> 00:05:12.880

If I hit enter this will generate this and actually stored in a new folder that is now out of the box



66

00:05:12.880 --> 00:05:17.520

gives us the typescript file a testing file which we won't look into here.



67

00:05:17.710 --> 00:05:22.410

Also the template file and that's styling fall in case you want to use it.



68

00:05:22.570 --> 00:05:29.430

And it also automatically adds it to the declarations aere of our app module and adds to import as well.



69

00:05:29.440 --> 00:05:30.980

So we don't even have to do that.



70

00:05:31.000 --> 00:05:32.780

Very convenient of course.



71

00:05:32.830 --> 00:05:35.060

Now with that we added two components.



72

00:05:35.080 --> 00:05:40.300

The cool thing about components and a framework like angler of course is that we can output dynamic



73

00:05:40.300 --> 00:05:41.390

content though.



74

00:05:41.500 --> 00:05:44.050

So let's dive into this in the next lecture.



