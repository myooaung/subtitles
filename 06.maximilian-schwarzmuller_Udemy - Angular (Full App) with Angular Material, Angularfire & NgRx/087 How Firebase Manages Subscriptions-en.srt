1
00:00:02,420 --> 00:00:05,910
In the last lecture we restructured our code.

2
00:00:06,200 --> 00:00:14,510
We put the subscription to angle or fire or wya angle or fire into the training service.

3
00:00:14,540 --> 00:00:20,270
So did we fetched the available exercises in that service and set up this subscription year in the new

4
00:00:20,270 --> 00:00:21,560
training component.

5
00:00:21,560 --> 00:00:27,940
We then only subscribed to changes in these are whaleboat exercises and not directly to angular fire.

6
00:00:28,150 --> 00:00:33,980
This is just one possible set up that removes the complexity from our template or from our component

7
00:00:34,190 --> 00:00:36,670
and moves it into the service.

8
00:00:36,680 --> 00:00:45,110
Now one thing is important to consider though we call fetch available exercises whenever the new training

9
00:00:45,110 --> 00:00:46,710
component gets created.

10
00:00:46,900 --> 00:00:51,630
And this would be the case whenever we navigate to it if we navigate away from it.

11
00:00:51,980 --> 00:01:00,370
We never tear down the existing subscription which gets initialized in fact available exercises we do

12
00:01:00,380 --> 00:01:03,410
set this up whenever we call this method.

13
00:01:03,740 --> 00:01:07,290
Now let's find out if that is a problem in the SUBSCRIBE method.

14
00:01:07,310 --> 00:01:16,400
In the service lets simply console log exercises if its automatically only using one subscription at

15
00:01:16,400 --> 00:01:21,950
a time then we don't need to do clean up and we can find out if that's the case by the fact that we

16
00:01:21,950 --> 00:01:26,800
only see one console log with an array of all exercises.

17
00:01:26,990 --> 00:01:34,280
If we navigate back and forth to new training and we get more and more exercises being locked then we

18
00:01:34,280 --> 00:01:36,500
definitely need to clean up manually.

19
00:01:36,500 --> 00:01:38,060
So let's save this.

20
00:01:38,060 --> 00:01:43,420
And let's then lock back in so I'll enter some dummy data.

21
00:01:44,120 --> 00:01:47,960
And we see one log the first time we are here.

22
00:01:48,320 --> 00:01:53,810
Now let's go to past exercises and back to New exercise.

23
00:01:53,990 --> 00:01:55,520
We don't see a lot here.

24
00:01:55,550 --> 00:01:55,820
Right.

25
00:01:55,820 --> 00:01:57,760
So nothing changed.

26
00:01:57,950 --> 00:02:06,380
If I now start an exercise here and I go back now we see another law being printed but this is only

27
00:02:06,380 --> 00:02:06,650
one.

28
00:02:06,650 --> 00:02:07,340
Keep that in mind.

29
00:02:07,340 --> 00:02:08,980
We didn't see two here.

30
00:02:09,020 --> 00:02:11,100
I can prove this by clearing the log.

31
00:02:11,240 --> 00:02:15,600
And again starting an exercise and going back.

32
00:02:15,980 --> 00:02:17,590
Now it's only one log.

33
00:02:17,810 --> 00:02:26,780
So even though we reloaded this component and therefore re executed fecche available exercises we only

34
00:02:26,780 --> 00:02:27,890
get one log.

35
00:02:27,890 --> 00:02:30,500
So this subscription replaces itself.

36
00:02:30,590 --> 00:02:32,330
We're not polluting the memory.

37
00:02:32,330 --> 00:02:36,200
We only got one and this is something you have to keep in mind.

38
00:02:36,290 --> 00:02:40,660
So dessous managed for us all I'll as costs a lot.

39
00:02:40,760 --> 00:02:47,210
And with that knowledge to is managed for as we can move on and do for things like for example store

40
00:02:47,240 --> 00:02:50,680
exercises that we complete that in the database.

