WEBVTT
1

00:00:02.480 --> 00:00:05.320

Let's know fetch values from are x.



2

00:00:05.390 --> 00:00:10.010

Regarding the training module I mean we're using the training data.



3

00:00:10.030 --> 00:00:17.420

It's all the training the data management the training module in a couple of components in the training



4

00:00:17.420 --> 00:00:19.150

component here.



5

00:00:19.160 --> 00:00:21.650

We got our exercise subscription.



6

00:00:21.740 --> 00:00:23.150

We don't need it anymore.



7

00:00:23.420 --> 00:00:26.700

We're only interested in whether we get the ongoing training or not.



8

00:00:26.840 --> 00:00:30.630

And we can get that information directly from our store.



9

00:00:31.070 --> 00:00:39.710

So what I'll do is all go back to my training reducer at the bottom and add a new selector where I don't



10

00:00:39.710 --> 00:00:47.540

just get the active training but get information whether we are in an exercise so get is training maybe



11

00:00:48.070 --> 00:00:54.030

and I get a selector or I create a selector where of course get my training state.



12

00:00:54.290 --> 00:01:00.050

But then I don't return the act of training but I return the information of whether or not this is null



13

00:01:00.320 --> 00:01:07.140

and if it's not NULL this means with a simple check you're to all cover undefined.



14

00:01:07.160 --> 00:01:11.960

So if it's not null then this means that we are training.



15

00:01:12.170 --> 00:01:18.200

Now if this news selector added We can go back to the training component and there we have to inject



16

00:01:18.200 --> 00:01:19.440

the story now.



17

00:01:19.610 --> 00:01:32.400

So let's add import First of all import store from ET and you are expr store and that's all the import



18

00:01:32.430 --> 00:01:34.570

everything as from training



19

00:01:36.950 --> 00:01:40.560

from our training reducer here.



20

00:01:41.760 --> 00:01:48.870

And now I can inject the store here in the constructor of the training component private store of type



21

00:01:49.020 --> 00:01:55.930

store which in the end wraps my from training state of course.



22

00:01:56.060 --> 00:02:03.050

Now we can use Stadt in engine in it instead of our exercise subscription here where I just switched



23

00:02:03.080 --> 00:02:04.250

ongoing training.



24

00:02:04.640 --> 00:02:09.170

Instead no ongoing training will be an observable.



25

00:02:09.370 --> 00:02:16.060

So an observable which in the end gives is a boolean and observe both just as subscriptions as learned



26

00:02:16.300 --> 00:02:19.570

should be imported from our x.



27

00:02:19.570 --> 00:02:30.720

J.S. So now here is an NGO and in it all said ongoing training equal to this store is select from training.



28

00:02:30.840 --> 00:02:33.840

And now I get my get is training selector.



29

00:02:33.840 --> 00:02:40.120

This will give us an observable which will eventually give us true or false because we define to select



30

00:02:40.130 --> 00:02:46.350

for down there in the training reducer and there we have our selector where our logic is to check whether



31

00:02:46.350 --> 00:02:48.860

we got an act of training or not.



32

00:02:49.350 --> 00:02:56.460

So back in a training component then here we got our selector who are storing this in this very low



33

00:02:57.010 --> 00:03:03.060

energy destroyer is something we can now get rid of because we don't need to unsubscribe from that.



34

00:03:03.180 --> 00:03:05.940

And this also means I can remove the word.



35

00:03:06.480 --> 00:03:12.930

And now any training component aged female file where we need that information we wrap ongoing training



36

00:03:12.930 --> 00:03:18.140

with parentheses if we check the opposite at the dollar sign and use the casing pipe.



37

00:03:18.390 --> 00:03:25.440

And down there we just add the dollar sign and use the async pipe to extract the value eventually.



38

00:03:25.440 --> 00:03:30.150

Now with that we got the first place where we use the training information.



39

00:03:30.180 --> 00:03:37.430

I of course also want to use it in the Abra files for example in new training in new training.



40

00:03:37.470 --> 00:03:45.240

We have a subscription to get all available exercises now exercise this year will be turned into an



41

00:03:45.240 --> 00:03:50.450

observable to and observable that will eventually hold an array of exercises.



42

00:03:50.460 --> 00:03:55.890

So just as we transformed is loading we're now transforming the exercises property in the new training



43

00:03:55.890 --> 00:03:56.880

component.



44

00:03:57.390 --> 00:04:01.700

Now we're already injecting the store but the wrong one with the wrong state.



45

00:04:01.770 --> 00:04:08.880

We should instead take the state from training for the same reason as before because of the lazy loading.



46

00:04:08.940 --> 00:04:13.230

So let's simply inject that from dot slash draining reducer.



47

00:04:14.860 --> 00:04:17.230

Reps one level up though.



48

00:04:17.610 --> 00:04:24.000

So this is the from training state which we should use here which again extends deep state but also



49

00:04:24.000 --> 00:04:26.460

has the extra training state.



50

00:04:26.460 --> 00:04:31.910

Now where is loading where we actually need to get this from the root state.



51

00:04:31.980 --> 00:04:40.470

We should still add the old him or again and import everything else from root from our app reducer and



52

00:04:40.590 --> 00:04:43.980

simply to get the type imported correctly.



53

00:04:43.980 --> 00:04:50.260

So now here in from for is loading from root get loading is still working.



54

00:04:50.370 --> 00:04:59.190

But we can also now connect this exercises and set it equal to this store select from training now for



55

00:04:59.250 --> 00:05:06.870

this part get a weight lable exercises so we can use both your D injected store has it both.



56

00:05:06.870 --> 00:05:11.690

Does this just so that we get the right completion.



57

00:05:11.730 --> 00:05:16.230

Now this is the one thing we still want to have fetch exercise to start.



58

00:05:16.230 --> 00:05:17.260

This is correct.



59

00:05:17.490 --> 00:05:22.530

We don't need energy on the stroy because we got no subscription anymore from which we would need to



60

00:05:22.540 --> 00:05:28.300

unsubscribe so we can remove the on the stroy interface and import.



61

00:05:28.650 --> 00:05:36.860

And now we have to work on the new training component on the template there we check if we got exercises.



62

00:05:36.870 --> 00:05:41.770

Now this should use the casing pipe to extract the extra size array.



63

00:05:43.830 --> 00:05:46.320

And of course we need the dollar sign.



64

00:05:46.500 --> 00:05:48.060

And here are the same.



65

00:05:48.120 --> 00:05:53.460

We're looping through exercises where we should use the async pipe and at the bottom where we all to



66

00:05:53.460 --> 00:05:58.030

check for exercises we all need da sink pipe and dollar sign.



67

00:05:58.170 --> 00:06:04.400

And if we check the opposite to keep the right order we all need parentheses.



68

00:06:04.440 --> 00:06:07.890

Now let's have a first look at our application.



69

00:06:08.010 --> 00:06:10.570

Let's log in and see what's going on.



70

00:06:13.400 --> 00:06:14.800

It's actually looking good.



71

00:06:15.080 --> 00:06:17.610

I'm loading my exercises here.



72

00:06:17.690 --> 00:06:26.450

Duration was a bit off I guess and I'm not really loading my finished exercises but that is working.



73

00:06:26.450 --> 00:06:28.840

We just need to work on the duration.



74

00:06:28.970 --> 00:06:31.600

So let's continue this part in the next lecture.



