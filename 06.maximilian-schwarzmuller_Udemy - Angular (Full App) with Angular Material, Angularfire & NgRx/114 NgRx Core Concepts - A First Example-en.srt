1
00:00:02,230 --> 00:00:12,130
Now to get started with NTR X I need to install a package and that package is called Engy are x slash

2
00:00:12,130 --> 00:00:12,980
store.

3
00:00:13,120 --> 00:00:19,880
I do install it by running NPM install dash dash save at Engy our X store.

4
00:00:20,260 --> 00:00:26,530
Now this will give us all the functionality we need to implement is angular specific read X pattern

5
00:00:26,710 --> 00:00:30,510
in our angler app we simply hit enter.

6
00:00:30,640 --> 00:00:34,380
And those will now be downloaded added to the package Dodge's and file.

7
00:00:34,450 --> 00:00:39,530
And of course added to our project went to the stern.

8
00:00:39,600 --> 00:00:45,160
I can restart my development sir with Engy serve and continue working on this project.

9
00:00:45,340 --> 00:00:51,510
Now as I mentioned on the slides when we are using NCR X we're talking about these reducers which will

10
00:00:51,510 --> 00:00:53,750
in the end manipulate the store.

11
00:00:53,880 --> 00:00:58,460
We have to store itself of course we have actions that we have these effects.

12
00:00:58,470 --> 00:01:01,020
Now let's get there step by step.

13
00:01:01,230 --> 00:01:08,950
Let's start simple by adding a story for this in my main folder next to my app module.

14
00:01:09,030 --> 00:01:12,930
I'll add my app Daut reducer dot TS file.

15
00:01:12,950 --> 00:01:14,260
Now the naming namings up to you.

16
00:01:14,300 --> 00:01:20,390
I'll name it like this because it will house keep my main producer which will manipulate my main story

17
00:01:20,390 --> 00:01:21,570
thereafter.

18
00:01:21,570 --> 00:01:27,700
Now how does this maned reducer look like a producer is just a function.

19
00:01:28,170 --> 00:01:32,370
It's a function which I'll export an old name it app reducer.

20
00:01:32,400 --> 00:01:41,730
Now this function simply takes the old state as an input as well as the incoming action because remember

21
00:01:41,730 --> 00:01:45,020
on the slide I said you dispatch actions to change the store.

22
00:01:45,020 --> 00:01:46,710
You don't do it directly.

23
00:01:46,770 --> 00:01:50,780
So the actual resistance reducer and is passed into it.

24
00:01:50,920 --> 00:01:52,010
It this brings you through.

25
00:01:52,080 --> 00:01:53,520
We do one simple thing.

26
00:01:53,700 --> 00:01:55,770
We return a new state.

27
00:01:55,770 --> 00:01:59,070
So the simplest possible reducer just returns the old state.

28
00:01:59,100 --> 00:02:01,550
It doesn't therefore do too many useful things.

29
00:02:01,740 --> 00:02:03,500
But this is one thing we can do.

30
00:02:03,870 --> 00:02:07,130
Now typically you want to start with some state with an initial state.

31
00:02:07,440 --> 00:02:13,620
So I will create a starting state and store it in a constant named initial state.

32
00:02:13,620 --> 00:02:23,950
And this let's say is a javascript object where we want to manage is its loading state to start simple.

33
00:02:24,360 --> 00:02:29,230
So this is currently managed new Ice Service with the loading state changed listener.

34
00:02:29,370 --> 00:02:35,480
Let's now add a reducer and add is loading as a property which of course is a boolean.

35
00:02:35,640 --> 00:02:41,830
And with let's say it's false initially what's its object so let's use a colon.

36
00:02:42,090 --> 00:02:48,220
We can also gift is initial state or state for our application in general and interface.

37
00:02:48,360 --> 00:02:56,020
So I will create a new interface here which all name state which I simply define as an object where

38
00:02:56,020 --> 00:02:57,700
we have it's loading which is a boolean.

39
00:02:57,700 --> 00:03:02,950
So this is not just a type definition you're not an object and just the type definition an initial state

40
00:03:02,950 --> 00:03:04,410
will be of type state.

41
00:03:04,990 --> 00:03:13,090
And here in AB reducer I'll get all giftie incoming state a default value of initial state so that we

42
00:03:13,090 --> 00:03:19,500
start with the initial state in case this reducers execute the first time when we have no state yet.

43
00:03:19,810 --> 00:03:24,370
So now we return the initial state in all cases.

44
00:03:24,400 --> 00:03:33,420
Now we want to be able to change that state to change from is loading falls to is loading true.

45
00:03:33,730 --> 00:03:39,640
So we will probably get an action that does trigger this change.

46
00:03:39,710 --> 00:03:42,740
Therefore you typically use a switch case statement.

47
00:03:42,740 --> 00:03:44,950
You switched the action type.

48
00:03:44,970 --> 00:03:50,970
Know this is important actions which are dispatched must have a type property.

49
00:03:50,990 --> 00:03:53,640
This is why we can safely assume that we'll get one.

50
00:03:53,690 --> 00:03:56,650
I'll show you how to dispatch actions in a second.

51
00:03:57,140 --> 00:04:03,960
So now we got our action type which I switch here and the first case is maybe dead.

52
00:04:04,010 --> 00:04:08,480
We have to type start loading.

53
00:04:08,800 --> 00:04:14,660
This is just a string all uppercase so that it's literally whistle and kind of looks like a constant.

54
00:04:14,710 --> 00:04:23,950
Clearly to find value if this is the case I will return a new state a new object where is loading is

55
00:04:23,950 --> 00:04:25,240
actually true.

56
00:04:25,630 --> 00:04:28,080
And that's this immutable thing I was mentioning.

57
00:04:28,210 --> 00:04:33,450
I'm not returning the old state where I switched is loading to true.

58
00:04:33,460 --> 00:04:39,730
I'm returning a new state and my state only is object with one property which is why I return one object

59
00:04:39,730 --> 00:04:40,540
with one property.

60
00:04:40,540 --> 00:04:43,910
Here is loading set to true now.

61
00:04:43,970 --> 00:04:47,630
Also handle the case that were stopping the loading.

62
00:04:47,710 --> 00:04:56,040
In this case I want to return is loading false and I'll also add a default case in case some other action

63
00:04:56,040 --> 00:05:02,190
hits this reducer here I will just return state without any changes.

64
00:05:02,190 --> 00:05:07,470
So now this is our first producer handling some actions which we have never dispatched thus far but

65
00:05:07,470 --> 00:05:11,730
will do so soon and changing our state.

66
00:05:11,730 --> 00:05:18,690
Now with this simple set up we of course have to make angler aware of this reducer and tell it to create

67
00:05:18,690 --> 00:05:23,590
a store that is actually manipulatable by debt reducer.

68
00:05:23,820 --> 00:05:28,940
To do that I'll go to the app module and indie app module.

69
00:05:28,940 --> 00:05:36,870
I now will set up my store module so in imports there I add store module which I need to import from

70
00:05:36,930 --> 00:05:38,870
at Engy our X store.

71
00:05:38,880 --> 00:05:47,250
So you're at the top I'll add import to store module from at ngi our X store.

72
00:05:47,450 --> 00:05:57,350
The store module has a function for root where I have to pass my app reducer my main reducer.

73
00:05:57,550 --> 00:06:08,350
So for that I'll import dat from my files so here I'll import from the app reduce or file and what import

74
00:06:08,680 --> 00:06:18,450
is of course my app reducer function and this function is what I pass to for root.

75
00:06:18,580 --> 00:06:26,650
To be precise I don't pass like this but I pass an object where I can map multiple Ribby reducers against

76
00:06:26,650 --> 00:06:30,920
keys by which I can then access the state slices.

77
00:06:30,940 --> 00:06:36,580
They manage like the producer right now is responsible for the entire state of course but you could

78
00:06:36,580 --> 00:06:38,200
argue it's responsible for you.

79
00:06:38,200 --> 00:06:40,200
I relate related state like it's loading.

80
00:06:40,390 --> 00:06:41,480
So that is why.

81
00:06:41,500 --> 00:06:46,980
Yep Marchal we could name this UI and assign app reducer function here.

82
00:06:47,020 --> 00:06:51,700
Now we will refactored just later to have multiple reducers but does a good start.

83
00:06:52,090 --> 00:06:58,330
So now we have that store initialized and we're using for root here to register our producer which can

84
00:06:58,330 --> 00:07:00,550
now edit this story.

85
00:07:00,850 --> 00:07:08,140
Now we need to do two things we need to be able to dispatch actions and we need to be able to listen

86
00:07:08,140 --> 00:07:14,250
to changes so that in the end we all of course have kind of an event emitter pattern though with the

87
00:07:14,470 --> 00:07:18,150
more clearly defined series of steps.

88
00:07:18,160 --> 00:07:26,010
Let's start with the dispatching part where do we want to dispatch our loading action.

89
00:07:26,270 --> 00:07:29,950
Well that is for example happening in the off service.

90
00:07:30,200 --> 00:07:36,770
So when you offer service you want to get access to our store and therefore we need to inject it all

91
00:07:36,770 --> 00:07:44,180
name it's stored and it will be of type story store needs to be imported from at Engy or ex store.

92
00:07:44,180 --> 00:07:51,020
So this import here this one has to be at an import store from at NCR X story.

93
00:07:51,020 --> 00:07:58,430
Now we can inject the store and the store actually is a generic type where we can define how it will

94
00:07:58,430 --> 00:08:01,790
look like if we have a look at our app module.

95
00:08:01,850 --> 00:08:06,460
The structure is in the end a store that consists of multiple slices.

96
00:08:06,500 --> 00:08:14,690
Right now only one day you slice which in turn holds the state returned by the producer which follows

97
00:08:14,780 --> 00:08:17,640
this interface this definition.

98
00:08:17,690 --> 00:08:25,700
So that means that any off service we can define our type here as an object where we will have to state

99
00:08:26,240 --> 00:08:30,660
from our app reducer so does state object here.

100
00:08:31,950 --> 00:08:40,350
So I will simply export this interface and the producer and end of service I can now import everything

101
00:08:40,470 --> 00:08:43,170
as from app.

102
00:08:43,350 --> 00:08:49,260
And this is just a special Sunday export import export that things from a file and store it in a variable

103
00:08:49,260 --> 00:08:57,020
under which I can then exit and conventioneers to name reducer related imports with a low lowercase

104
00:08:57,060 --> 00:08:58,200
character at the start.

105
00:08:58,200 --> 00:09:04,210
So from app which is coming from in the end just my average user file.

106
00:09:04,230 --> 00:09:08,430
Now here I could import to reduce a function or dead state object.

107
00:09:08,660 --> 00:09:11,120
So our store is of structure you will I.

108
00:09:11,250 --> 00:09:15,380
And then from app state.

109
00:09:15,480 --> 00:09:20,580
So this is the store we inject into the office service looks a bit complex but in the end it just gives

110
00:09:20,580 --> 00:09:23,020
us access to the global store.

111
00:09:23,160 --> 00:09:26,610
Now I want to dispatch an action whenever we start loading right.

112
00:09:26,620 --> 00:09:27,940
Does What's the idea.

113
00:09:28,290 --> 00:09:35,790
We can do this by going to any place where we set deal where we called you Ice Service thus far.

114
00:09:36,390 --> 00:09:41,460
And there will not use to you service anymore but instead use the injected story.

115
00:09:41,910 --> 00:09:47,290
And there we have a dispatch method we can call and there we do dispatch an action.

116
00:09:47,320 --> 00:09:54,130
Now the action is always an object which remember what I said always has to have a type property.

117
00:09:54,130 --> 00:10:02,480
So your type could be let's see which types we support in our producer start loading and stop loading.

118
00:10:02,640 --> 00:10:09,510
So we want to start loading so let's grab this string here grab the entire string start loading is to

119
00:10:09,510 --> 00:10:10,270
type.

120
00:10:10,560 --> 00:10:12,320
I'm dispatching here.

121
00:10:13,380 --> 00:10:15,440
Like that.

122
00:10:15,510 --> 00:10:18,040
Now of course I also want to dispatch an action once we're done.

123
00:10:18,150 --> 00:10:25,140
So here where I previously used mine is subject I will now call stop loading and I'll do the same of

124
00:10:25,140 --> 00:10:29,660
course down here when I catch an error.

125
00:10:29,760 --> 00:10:33,670
Now for the log in case I'll also dispatch.

126
00:10:33,810 --> 00:10:41,250
Start loading enter ofter in the then block stop loading and in the catch block stopped loading.

127
00:10:41,250 --> 00:10:46,480
So this is of course really similar to the approach we used before but now using that central store

128
00:10:47,970 --> 00:10:50,520
so with that we're dispatching the action.

129
00:10:50,520 --> 00:10:52,490
Now we also need to subscribe.

130
00:10:52,740 --> 00:10:58,590
And we will subscribe in our components in the log In the sign up component.

131
00:10:58,590 --> 00:11:02,700
So in there in the log in component let's create a subscription.

132
00:11:02,790 --> 00:11:05,030
Therefore I need to check the store.

133
00:11:05,040 --> 00:11:13,890
So in the log in component also bind to store property here and inject the store which is imported from

134
00:11:14,160 --> 00:11:17,400
at Engy our X store like this.

135
00:11:17,390 --> 00:11:19,090
This line needs to be added.

136
00:11:19,590 --> 00:11:24,070
So with that I inject the store here and it's all the generic type here.

137
00:11:24,240 --> 00:11:32,580
So let me also quickly import what I just imported in my off service so I'll import everything as from

138
00:11:32,610 --> 00:11:34,110
app from.

139
00:11:34,110 --> 00:11:36,770
And now let's go up to the app reducer here.

140
00:11:37,710 --> 00:11:46,850
This file and then I can also define a type here to be an object where we have a UI slice which isn't

141
00:11:46,890 --> 00:11:51,110
the end of type from App State.

142
00:11:51,960 --> 00:11:55,340
So now we inject the store into the log in component.

143
00:11:55,760 --> 00:12:02,460
And now we can easily use it by going to Engy on it and then accessing store and subscribing to it.

144
00:12:02,760 --> 00:12:05,820
And there we get some data out which for now simply want to log.

145
00:12:05,820 --> 00:12:07,680
So they can have a look at it.

146
00:12:07,680 --> 00:12:15,570
Now let's see if our application still works in the server in the page which I can reload which is run

147
00:12:15,570 --> 00:12:17,040
by the def server.

148
00:12:17,490 --> 00:12:25,440
We get this value here which is an object which has this UI property which N.K. which in turns to stores

149
00:12:25,470 --> 00:12:26,270
is loading.

150
00:12:26,400 --> 00:12:27,420
That's looking good.

151
00:12:27,690 --> 00:12:35,520
So isn't status the case we can simply do one thing now we can change the existing loading property

152
00:12:35,940 --> 00:12:38,420
to be an observable for dad.

153
00:12:38,430 --> 00:12:46,110
I need to import observable from our x J s so let's add the observable import observable as a generic

154
00:12:46,110 --> 00:12:49,360
type and it will eventually hold a boolean here.

155
00:12:50,050 --> 00:12:57,330
For that to be the case I will actually assign it here an engine in it.

156
00:12:58,560 --> 00:13:00,800
And said this is loading.

157
00:13:01,020 --> 00:13:06,180
And by the way it's a convention to use dollar signs at the end of the variable names which are controlled

158
00:13:06,180 --> 00:13:07,520
by NTR x.

159
00:13:07,560 --> 00:13:09,290
So this is loading.

160
00:13:09,450 --> 00:13:11,620
Is that equal to this sport.

161
00:13:12,680 --> 00:13:16,080
And now not subscribe because I don't want to subscribe here.

162
00:13:16,100 --> 00:13:21,330
I want to do that from within the Templi with the async pipe but instead I'll add map here.

163
00:13:21,380 --> 00:13:34,470
This map OPERATOR I need to import import this so import map from our exchange as Slash operators.

164
00:13:34,570 --> 00:13:41,470
This allows me to transform the value because here I end the end get my state if you want and that is

165
00:13:41,470 --> 00:13:43,650
an object with a UI property.

166
00:13:43,730 --> 00:13:47,050
I'm only interested in the loading properties of that though.

167
00:13:47,230 --> 00:13:48,900
So I want to return state.

168
00:13:49,000 --> 00:13:54,830
You I is loading the value of that will be a boolean which in the end will be extracted.

169
00:13:55,270 --> 00:13:59,540
So no comment out the loading subscription.

170
00:13:59,850 --> 00:14:02,540
And I can therefore comment out Engy on the stroy.

171
00:14:02,610 --> 00:14:09,150
We don't need to unsubscribe from NDR extort related things that just automatically I can remove the

172
00:14:09,150 --> 00:14:12,290
on the stroy implementation import therefore.

173
00:14:12,720 --> 00:14:15,760
And now we can use D is loading observable.

174
00:14:15,870 --> 00:14:18,620
That it now is in the template.

175
00:14:18,840 --> 00:14:24,840
And here at the azing pipe and of course changed the name to Etty dollar sign because I changed the

176
00:14:24,840 --> 00:14:27,030
variable name the property name.

177
00:14:27,030 --> 00:14:36,000
And now with that we see it works as before but now it's taking this local store into account and using

178
00:14:36,000 --> 00:14:37,620
that observable based approach.

