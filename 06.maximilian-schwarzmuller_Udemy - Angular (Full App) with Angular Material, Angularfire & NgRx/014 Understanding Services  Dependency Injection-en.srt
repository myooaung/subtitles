1
00:00:02,590 --> 00:00:06,040
We had a look at the angular Fornes at least a very brief one.

2
00:00:06,190 --> 00:00:13,630
And number important concept of angular our services services our typescript classes which can be reached

3
00:00:13,630 --> 00:00:20,510
from any component which to be precise can be injected into any component or actually also into Abner's

4
00:00:20,520 --> 00:00:21,430
services.

5
00:00:21,730 --> 00:00:23,630
Let's create a service to understand it.

6
00:00:23,820 --> 00:00:28,670
I'll name it products service sort of fall as product start service start.

7
00:00:28,740 --> 00:00:33,190
TS The name doesn't really matter but it's a convention to name it like this.

8
00:00:33,190 --> 00:00:38,340
A service is then just a type of class like this one product's service.

9
00:00:38,890 --> 00:00:45,970
Now a service holds some functionality which you typically want to share across multiple components.

10
00:00:45,970 --> 00:00:48,940
This could be data what you want to use from other components.

11
00:00:48,940 --> 00:00:54,680
It could be utility functions like logging something or sending HTP requests here.

12
00:00:54,880 --> 00:01:04,490
I'll simply create my products array in the service and let's say it starts with just a book.

13
00:01:04,550 --> 00:01:12,030
No actually set this to a private property and add two methods to the service and product where I expect

14
00:01:12,030 --> 00:01:18,990
to get a product name which is a string and where it will simply reach out to disk products and push

15
00:01:19,260 --> 00:01:21,650
the new product name onto it.

16
00:01:22,630 --> 00:01:30,400
And get products where I want to return desire and it could just return this products though I will

17
00:01:30,400 --> 00:01:36,670
actually return a new array and use the spread operator and next generation javascript feature which

18
00:01:36,670 --> 00:01:43,300
will take the older eight this products and pull out all the elements to add them as new elements to

19
00:01:43,300 --> 00:01:44,550
this new array.

20
00:01:44,800 --> 00:01:49,900
This creates a new copy of that array because arrays and objects are referenced types.

21
00:01:49,930 --> 00:01:52,270
If I returned this product like this.

22
00:01:52,330 --> 00:01:56,200
So directly dicere we could edit it from outside.

23
00:01:56,200 --> 00:02:02,220
Since the returned copy would just be a copy of the pointer pointing to the same place of memory.

24
00:02:02,260 --> 00:02:04,460
With this approach we get a brand new array.

25
00:02:04,510 --> 00:02:09,360
So if we edited from outside we won't change this array here.

26
00:02:09,400 --> 00:02:14,560
Now we get that service and let's say we want to use this service for creating new products.

27
00:02:14,560 --> 00:02:19,270
Now we need to inject it somewhere for an injection works like this.

28
00:02:19,390 --> 00:02:23,750
Let's say in the products component where we add products there.

29
00:02:23,890 --> 00:02:27,620
I want to use the service for this.

30
00:02:27,670 --> 00:02:35,000
I will simply go to the constructor and add an argument products service.

31
00:02:35,020 --> 00:02:39,200
Now I want this to be an instance of our service class.

32
00:02:39,280 --> 00:02:47,830
For this we have to assign a type here products service and for typescript to find this we need to add

33
00:02:47,830 --> 00:02:48,790
an import.

34
00:02:48,840 --> 00:02:58,780
So at the top of the import statement re-import product service from dot slash product start service.

35
00:02:58,830 --> 00:03:05,100
Now this will tell Engler which is the one creating a new instance of this component in the end that

36
00:03:05,210 --> 00:03:11,130
we need this argument when this component is created and that that should be of this type.

37
00:03:11,130 --> 00:03:16,680
So Engler will try to give me an instance of this type to be able to do so.

38
00:03:16,800 --> 00:03:22,590
We need to tell it how to do so though and we do that by simply adding something in the app module.

39
00:03:22,800 --> 00:03:29,520
Here in the provider's array we need to provide anything that we want to inject into any place of the

40
00:03:29,520 --> 00:03:30,470
app.

41
00:03:30,480 --> 00:03:37,500
So here I need to add my product service and I also need to add my import to it so that typescript can

42
00:03:37,500 --> 00:03:38,360
find it.

43
00:03:38,550 --> 00:03:43,650
Slash products service is the payoff.

44
00:03:44,650 --> 00:03:51,550
With that angler is able to resolve this dependency and actually create a new instance of it and provided

45
00:03:51,550 --> 00:03:54,190
here in this class in the component here.

46
00:03:54,580 --> 00:03:59,230
Now we can use that has matured had an ad private in front of this or public it's up to you.

47
00:03:59,530 --> 00:04:05,140
And this will now not only receive it as an argument but automatically bind it to a class property.

48
00:04:05,230 --> 00:04:10,860
So it is a short way of not only getting that argument but also storing it in a class property.

49
00:04:11,210 --> 00:04:13,250
And now we could use that service instead.

50
00:04:13,420 --> 00:04:22,300
So instead of pushing to that local aere I could point us to this product service and product and then

51
00:04:22,360 --> 00:04:28,270
push this form value product name or send this to that service.

52
00:04:28,270 --> 00:04:34,020
Now of course I also want to use the products from that service and using it in the same file.

53
00:04:34,060 --> 00:04:40,240
As we said it does not make the most sense because we could have managed it internally then but typically

54
00:04:40,240 --> 00:04:48,550
used to move data across components but let's ignore that for a second and let's say that now I want

55
00:04:48,550 --> 00:04:52,160
to also get my products from there.

56
00:04:52,420 --> 00:05:02,180
So in the constructor of simply said This products equal to diss products service get products like

57
00:05:02,180 --> 00:05:08,070
dis and all initially set this here to an empty array so that we can really see the difference.

58
00:05:08,100 --> 00:05:15,240
Now it is safe to I go back you'll see that if I go deep it indeed will load my products from the service

59
00:05:15,780 --> 00:05:19,330
after three seconds because it placed as in the time or as I just realized.

60
00:05:19,470 --> 00:05:23,370
So let's move out of there just in the constructor body like this.

61
00:05:23,400 --> 00:05:26,880
So now it's showing it there.

62
00:05:27,180 --> 00:05:33,360
And then an even better place for this initialization is the energy on it hook a lifecycle hook which

63
00:05:33,360 --> 00:05:39,510
we implement by implementing a special interface an interface is like a contract that forces us to have

64
00:05:39,510 --> 00:05:45,810
a special method in this component we need to import on in it from an angular core and we simply add

65
00:05:45,840 --> 00:05:51,720
a new method now which we now are required to get entry on and it's angular will execute this method

66
00:05:51,930 --> 00:05:57,780
when it creates the component offered the constructor and it's a good practice to do anything but very

67
00:05:57,780 --> 00:06:00,930
trivial initializations in this method here.

68
00:06:01,200 --> 00:06:06,420
So now we will still get the same behavior as before if we load this page we will get our product from

69
00:06:06,420 --> 00:06:09,260
the service if we add new products.

70
00:06:09,270 --> 00:06:17,030
Now though we don't see it but we also don't get an error or the reason for this is that we only fetch

71
00:06:17,030 --> 00:06:21,440
two products one time future updates are not reflected.

72
00:06:21,440 --> 00:06:28,710
That is why we typically use a pattern here where we set up a subscription to get informed about changes.

73
00:06:28,750 --> 00:06:36,970
For this we import something which is called a subject from our exchange as object is like an event

74
00:06:36,970 --> 00:06:37,680
emitter.

75
00:06:37,870 --> 00:06:42,880
And here I get an error message though this is the correct important text starting with our exchange

76
00:06:42,920 --> 00:06:44,460
as worse than six.

77
00:06:44,530 --> 00:06:49,370
If you're using an older wurden to correct one what we are ex-chief slash subject.

78
00:06:49,420 --> 00:06:52,150
So here we're importing the subject.

79
00:06:52,420 --> 00:07:01,640
And now with that we can create a new property in the service which is maybe products updated which

80
00:07:01,640 --> 00:07:05,320
is a new subject like this.

81
00:07:05,470 --> 00:07:09,430
We now want to emit and even food that subject whenever the products change.

82
00:07:09,430 --> 00:07:18,280
So here an ad product all emit products updated by calling next year not emit just next and we can't

83
00:07:18,280 --> 00:07:20,560
pass data with that if we wanted to.

84
00:07:20,800 --> 00:07:29,240
So here I could simply pass this products but we can all just use this to trigger a new fetch So with

85
00:07:29,240 --> 00:07:35,950
that create it we can go to our products component and an NGO in it or now actually fetch the products

86
00:07:36,230 --> 00:07:41,240
but then I'll also reach out to the product service and reach out to products updated.

87
00:07:41,450 --> 00:07:43,820
And here we can now call subscribe.

88
00:07:44,150 --> 00:07:47,690
This will now keep us informed about changes.

89
00:07:47,930 --> 00:07:51,290
We pass a function to subscribe where we get the value that was emitted.

90
00:07:51,290 --> 00:07:57,340
In this case and on and then we to find a code that should be executed when ever this triggers.

91
00:07:57,560 --> 00:08:01,750
And here is just the same code we had before where we wanted to fetch new products.

92
00:08:01,850 --> 00:08:06,820
This code here will run an unlimited amount of times though when ever the products change.

93
00:08:06,830 --> 00:08:12,980
Essentially Now when we set up a subscription like this it is a good practice to also unsubscribe.

94
00:08:12,980 --> 00:08:14,390
If we don't need it anymore.

95
00:08:14,690 --> 00:08:22,370
So we should import subscription from our exchanges and store it here in a property private property

96
00:08:22,370 --> 00:08:30,560
maybe which has the products subscription which is a type subscription and we simply

97
00:08:33,210 --> 00:08:35,940
WIPs that subscription here and the import too.

98
00:08:35,940 --> 00:08:43,320
And we simply use that and store this subscription in it.

99
00:08:43,490 --> 00:08:49,570
So the SUBSCRIBE method here returns a news subscription which is stored in a product subscription.

100
00:08:49,700 --> 00:08:54,920
We now need to import one other interface which is called On destroy.

101
00:08:55,250 --> 00:09:03,350
It's also imported from at angular clor and that requires us to now add another method DNG on the stroy

102
00:09:03,350 --> 00:09:07,460
method and where engine that runs when the component is created.

103
00:09:07,610 --> 00:09:09,640
This runs What does tear down.

104
00:09:09,830 --> 00:09:13,350
And at this point of time we should actually unsubscribe.

105
00:09:13,400 --> 00:09:16,500
So reach out to my subscription and call unsubscribe.

106
00:09:16,520 --> 00:09:19,960
This clears up the resources and prevents memory leaks.

107
00:09:19,970 --> 00:09:21,840
Now the cool thing is with this pattern.

108
00:09:21,980 --> 00:09:28,850
Now if we add a new product it does show up because our subscription our triggers and we don't fetch

109
00:09:28,850 --> 00:09:30,420
products again.

110
00:09:30,950 --> 00:09:35,840
Now let's complete this by also using the service and the number of component in the product component

111
00:09:36,420 --> 00:09:36,870
here.

112
00:09:36,890 --> 00:09:42,710
We can also add the injection and directly bind it to a property products service.

113
00:09:42,710 --> 00:09:43,880
His name is up to you.

114
00:09:44,060 --> 00:09:49,370
But thereafter you need to find a type and at the airport at the top.

115
00:09:49,370 --> 00:09:51,740
Never forget this statement here.

116
00:09:52,040 --> 00:09:56,600
And with that and check that in the product component when we click a component instead of emitting

117
00:09:56,600 --> 00:10:04,610
our event we can just reach up to the product service and call delete product method there and pass

118
00:10:04,760 --> 00:10:08,440
this product name to define which kind of product to be deleted.

119
00:10:08,690 --> 00:10:10,820
Now this method that doesn't exist yet.

120
00:10:10,820 --> 00:10:18,440
So let's quickly create it in the product service here you will get the product name of the product

121
00:10:18,440 --> 00:10:19,770
which should be deleted.

122
00:10:20,150 --> 00:10:27,430
And then we can just call this products and set it equal to this products filter.

123
00:10:27,470 --> 00:10:34,040
So the same logic we have before for products where the product name is not equal to the product name

124
00:10:34,070 --> 00:10:38,060
we sent so that all our products are kept except for this one.

125
00:10:38,060 --> 00:10:43,460
And thereafter we should again trigger our subscription with the next call to inform anyone who's interested

126
00:10:43,640 --> 00:10:47,350
that our array of products changed with that.

127
00:10:47,520 --> 00:10:51,730
If I now add a new product that works if I click on one it's still deleted.

128
00:10:51,870 --> 00:10:56,630
But now all of that is handled through the service and does the services in a nutshell.

129
00:10:56,640 --> 00:10:58,300
There is of course more to them.

130
00:10:58,320 --> 00:11:03,540
We will use them for this course but this should give you a brief refresher about how they work and

131
00:11:03,540 --> 00:11:08,250
how you work with subscriptions to also create live updating services.

