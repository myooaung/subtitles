1
00:00:03,090 --> 00:00:08,440
In the last lecture we get set up with angle of fire and we could already see the power it offers us

2
00:00:08,620 --> 00:00:10,730
with this real time updating.

3
00:00:10,810 --> 00:00:12,990
Now back in the new training component.

4
00:00:13,120 --> 00:00:16,010
Let's look at an alternative to value changes.

5
00:00:16,060 --> 00:00:22,350
The downside of value changes was that it only gives us well the value of our documents.

6
00:00:22,540 --> 00:00:27,220
And if you have a look at the firebase database here the value is the part on the right here.

7
00:00:27,340 --> 00:00:32,400
It doesn't include their ID which is actually kind of the name of the document you could say.

8
00:00:32,470 --> 00:00:34,780
And therefore it's true that as metadata.

9
00:00:35,110 --> 00:00:38,060
So let's change this to snapshot changes.

10
00:00:38,260 --> 00:00:45,040
This is a different listener or event listener which also contains some data to see what's inside.

11
00:00:45,040 --> 00:00:46,300
Let's subscribe.

12
00:00:46,300 --> 00:00:51,910
We will get a result which I simply want to lock to the console so that we can see what's inside it

13
00:00:52,420 --> 00:00:57,630
and it will temporarily remove this exercises so that we don't get an error.

14
00:00:57,640 --> 00:01:05,810
Now back in the application let's quickly log in with some dummy credentials and we still get an array.

15
00:01:06,040 --> 00:01:10,240
But now the objects in there actually look at it differently.

16
00:01:10,270 --> 00:01:18,400
We get a type which indicates which type of change occurred and each year they were all added to our

17
00:01:18,490 --> 00:01:25,270
local data collection you could say so or to our array we're having in this local annular app and we

18
00:01:25,270 --> 00:01:32,020
get a payload and then the payload we get a document snapshot which you can access and where you can

19
00:01:32,020 --> 00:01:34,810
actually get the idea of the document.

20
00:01:34,810 --> 00:01:40,210
Now the idea is nice but as you can see what about the values of the document.

21
00:01:40,360 --> 00:01:47,410
While we only got a document reference here where we would have to actually execute an extra method

22
00:01:47,650 --> 00:01:56,050
to get the data that's inside it but the documents snapshot is a way for us to get Demetra data at least

23
00:01:56,140 --> 00:01:57,140
the ID.

24
00:01:57,190 --> 00:02:02,010
So how do we now also extract the value.

25
00:02:02,040 --> 00:02:04,830
There is a special method you can execute.

26
00:02:04,830 --> 00:02:10,590
So here where we get the result let's quickly loop through all the results.

27
00:02:10,650 --> 00:02:15,590
So with a simple form off loop maybe resolve this an array of items.

28
00:02:15,590 --> 00:02:16,750
Remember that.

29
00:02:17,070 --> 00:02:25,930
Now we can simply console log response or resoled payload Dawk data.

30
00:02:26,100 --> 00:02:34,280
Now that's a Meffert And let's see what this prints we now save this and we lock back in

31
00:02:39,600 --> 00:02:41,580
you now get the actual values.

32
00:02:41,660 --> 00:02:45,640
So they are extractable from the data you get here.

33
00:02:45,920 --> 00:02:49,960
So with snapshot changes you get the best of both worlds.

34
00:02:50,030 --> 00:02:57,770
You can still access the data in your document but you also get meta data like the IDs.

35
00:02:58,010 --> 00:03:07,310
And if we combine this with an observable operator we can actually map our server side data in exactly

36
00:03:07,310 --> 00:03:11,240
the format we need to be in an exercise model.

37
00:03:11,240 --> 00:03:16,300
So with ID name duration calories without date and state.

38
00:03:16,490 --> 00:03:23,690
So now here what I'll do is I'll simply at this map operator which has shown in the slide earlier this

39
00:03:23,690 --> 00:03:25,370
is an extra Yes.

40
00:03:25,370 --> 00:03:26,380
Operator.

41
00:03:26,480 --> 00:03:31,830
That can be used on any observable and snapshot changes of course gives us an observable.

42
00:03:31,850 --> 00:03:36,860
Otherwise we couldn't subscribe map as an operator which we need to import.

43
00:03:37,100 --> 00:03:48,080
So we should import map from our X-Trace slash operators like this map then gets exactly the same data

44
00:03:48,110 --> 00:03:49,940
as result would have received.

45
00:03:49,940 --> 00:04:01,570
Now we know that this is essentially our dark data you could call it or Doc irrate Maybe not want to

46
00:04:01,590 --> 00:04:07,200
want to do is I want to map this into an array of exercise objects.

47
00:04:07,990 --> 00:04:14,680
So what I'll do is all simply use dark array and call map on that.

48
00:04:14,680 --> 00:04:20,860
And then this is now not the are extra as operator but Dawk array is an array of objects so map now

49
00:04:20,860 --> 00:04:22,360
can be executed on it.

50
00:04:22,390 --> 00:04:29,620
Since this is a normal javascript array there I will get my individual document and I want to return

51
00:04:30,980 --> 00:04:37,900
a javascript object where we have an ID could be dog payload dog ID.

52
00:04:38,000 --> 00:04:44,840
So here I'm just drilling into Does object we're getting back from fires to where and where I get the

53
00:04:44,920 --> 00:04:46,270
other data too.

54
00:04:46,400 --> 00:04:52,840
Here I will simply use the spread operator in excess dot payload dock data.

55
00:04:52,850 --> 00:04:57,380
This method does not return an object we just Brinda these objects.

56
00:04:57,380 --> 00:05:03,800
You're on the right where each object has the calories duration name properties and the spread operator

57
00:05:03,890 --> 00:05:09,890
these free dots I'm pulling these properties out of the returned object and add them to this object

58
00:05:10,010 --> 00:05:11,430
which I return.

59
00:05:11,930 --> 00:05:17,500
So now I'm returning this object here inside this inner map function which is executed on the stock

60
00:05:17,510 --> 00:05:18,620
array.

61
00:05:18,620 --> 00:05:26,780
My goal is now to return this map array which is now simply an array of objects that look exactly like

62
00:05:26,810 --> 00:05:29,150
our exercise model.

63
00:05:29,150 --> 00:05:33,610
So now if I subscribe to this I should see exactly that.

64
00:05:33,620 --> 00:05:41,240
So here if I simply Konsole log result to check this and I go back to the application and lock back

65
00:05:41,240 --> 00:05:50,060
in like this then I get an array of four objects where we have ID calories duration and name.

66
00:05:50,100 --> 00:05:56,290
This is how we successfully map the data we get back and how we utilize the power of observables.

67
00:05:56,290 --> 00:06:05,040
Now we can get rid of Subscribe and re assign this to this exercises which now really isn't observable.

68
00:06:05,140 --> 00:06:13,180
That includes an exercise array because keep in mind the optics we return here are exactly in that format

69
00:06:13,690 --> 00:06:18,010
the warning I'm getting here is an error or this is actually correct.

70
00:06:18,010 --> 00:06:24,010
Now here it's not picking up that this will successfully pull out all these fields.

71
00:06:24,190 --> 00:06:31,210
So to circumvent this problem I'll manually assign name to dot payload docked data name.

72
00:06:31,240 --> 00:06:38,340
I know that the name feel a little bit there all assigned ration to dock payload dock data duration

73
00:06:39,930 --> 00:06:45,660
and I'll assign calories to dock payload dock data calories.

74
00:06:45,700 --> 00:06:51,210
So this is the long work of what I had previously with the spread operator just to fix this error.

75
00:06:51,600 --> 00:06:58,230
Now with that we can use this exercise as a template again and in there we use the async pipe to automatically

76
00:06:58,230 --> 00:06:59,540
subscribe to that.

77
00:06:59,640 --> 00:07:02,890
And now we get exercises which look like in our model.

78
00:07:02,970 --> 00:07:07,400
So I can again use exercise ID here for de-value.

79
00:07:07,440 --> 00:07:15,870
Now with this if we go back to the application and lock back in we again see that after a while we get

80
00:07:15,870 --> 00:07:19,950
all these exercise this year as they are stored on the server.

