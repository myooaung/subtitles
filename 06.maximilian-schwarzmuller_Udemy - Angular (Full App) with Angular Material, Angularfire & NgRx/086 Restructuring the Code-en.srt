1
00:00:02,260 --> 00:00:05,660
So in the last lectures I introduced you to angle of fire.

2
00:00:05,710 --> 00:00:12,640
And we use some absorbable magic combined with snapshot changes to get exactly that data from our collection

3
00:00:12,700 --> 00:00:13,870
that we need.

4
00:00:14,230 --> 00:00:16,710
Now of course I want to take this a step further.

5
00:00:16,720 --> 00:00:20,300
It's good that we can select this in the dropdown.

6
00:00:20,430 --> 00:00:28,170
If we start a new exercise then we actually submit our exercise form and then that exercise for him.

7
00:00:28,170 --> 00:00:30,950
We of course have that idea we selected.

8
00:00:31,110 --> 00:00:37,440
So in the training service where we in the end have the method that gets executed in start exercise

9
00:00:37,440 --> 00:00:43,080
we're getting that idea and we're trying to fetch fatuus from a whaleboat exercises that this will now

10
00:00:43,080 --> 00:00:47,770
fail because a whaleboat exercise here is no longer relevant.

11
00:00:47,790 --> 00:00:55,100
We can actually get rid of it because we're not directly fetching the exercises in our component.

12
00:00:55,100 --> 00:01:00,660
Now to be honest it still would make sense to fetch it here in the service.

13
00:01:00,780 --> 00:01:08,880
We should have our array of whaleboat exercises here so that we can still use statue to start the exercise

14
00:01:09,120 --> 00:01:11,450
and get the completed exercise.

15
00:01:11,460 --> 00:01:16,590
We should just initialize an update dead array with data coming from the database.

16
00:01:17,370 --> 00:01:24,720
So what we might want to do is maybe rename get a whaleboat exercises to fetch available exercises and

17
00:01:24,720 --> 00:01:33,840
take the logic from that new training component here and NGO in it and run this code here in our training

18
00:01:33,900 --> 00:01:35,040
service.

19
00:01:35,040 --> 00:01:42,570
So I'll cut it and go to the training service and executed here in fact available exercises now.

20
00:01:42,600 --> 00:01:48,450
This TB is not a way bill because we haven't inject that angle of Firestorm into the service yet.

21
00:01:48,610 --> 00:01:53,630
Let's do that and to inject something we need to add at injectable here.

22
00:01:53,730 --> 00:01:59,730
Now injectable needs to be imported from any angle of course so make sure to add this import and once

23
00:01:59,730 --> 00:02:05,620
it's added You can add a construct for your end and check the database which is just the angle of fire.

24
00:02:05,620 --> 00:02:14,010
Store object which you import from a regular to fire store.

25
00:02:14,010 --> 00:02:15,270
So now does this inject that.

26
00:02:15,270 --> 00:02:17,070
Now this code works.

27
00:02:17,250 --> 00:02:21,410
Now I want to populate my available exercises as I said.

28
00:02:21,570 --> 00:02:27,570
So here I will now actually add subscribe and no longer use async pipe because I want to use this result

29
00:02:27,590 --> 00:02:37,110
program medically and get my exercises which we can even explicitly declare from a type perspective

30
00:02:37,470 --> 00:02:42,920
as an array of exercises because that is what we eventually get here.

31
00:02:43,080 --> 00:02:49,890
Now in this erro function I can then set this a way that exercises equal to exercises.

32
00:02:49,920 --> 00:02:55,230
So the exercises were getting back from Firestar And now we got it in the service.

33
00:02:55,230 --> 00:03:02,310
The problem is that now we can no longer use it in our new training component though it is broken now.

34
00:03:02,310 --> 00:03:04,920
And here we need these new exercises.

35
00:03:04,920 --> 00:03:11,730
So how can we get them here to a good solution would be to simply emet an event whenever we receive

36
00:03:11,730 --> 00:03:13,280
new exercises.

37
00:03:13,560 --> 00:03:23,980
So here we could add exercises changed and set as equal to a new subject of type exercise array because

38
00:03:24,040 --> 00:03:26,040
that is what we're emitting.

39
00:03:26,440 --> 00:03:30,000
And we want to trigger this whenever we got new exercises.

40
00:03:30,010 --> 00:03:35,850
So here right after we store them all call this exercise cesse changed.

41
00:03:35,980 --> 00:03:43,210
And the next and emit and then Ray with all the available exercises I'm using a new array with the spread

42
00:03:43,240 --> 00:03:50,320
operator to create a copy so that we don't pass the original array for mutability reasons.

43
00:03:51,340 --> 00:03:56,200
So now we're emitting this now we can subscribe to this in new training.

44
00:03:56,200 --> 00:03:58,730
So here in NJ and in it I want to do two things.

45
00:03:58,860 --> 00:04:04,240
I'll reach out to the training service and call fetch available exercises like this.

46
00:04:04,240 --> 00:04:08,160
This is there for always called when we go to a new training.

47
00:04:08,270 --> 00:04:12,500
I also want to subscribe to this newly created subject.

48
00:04:12,560 --> 00:04:19,980
So in a training service we got the exercises changed subject and I'll subscribe to it now since I subscribe

49
00:04:19,980 --> 00:04:20,900
to a subject.

50
00:04:20,960 --> 00:04:24,490
I also want to import subscriptions so that we can unsubscribe.

51
00:04:24,740 --> 00:04:30,060
So I will import observable and subscription from our X..

52
00:04:30,080 --> 00:04:42,810
J.S. your all then create my exercise subscription which is a type subscription and all store this subscription

53
00:04:42,900 --> 00:04:45,360
and exercise subscription.

54
00:04:45,360 --> 00:04:52,080
Now in the SUBSCRIBE method here I want to do something here I get my exercises and I simply want to

55
00:04:52,080 --> 00:04:57,180
set this equal to this exercises in this component.

56
00:04:57,180 --> 00:05:00,750
Now this exercise was set to an observable.

57
00:05:00,750 --> 00:05:07,850
It's now set back to and well at a rate of exercise as it was earlier in this course.

58
00:05:09,420 --> 00:05:10,770
We got our subscription.

59
00:05:10,770 --> 00:05:14,540
We also should unsubscribe if the component is destroyed.

60
00:05:14,610 --> 00:05:25,010
So let's add the on destroy interface here and also imports data from at a singular core and let's there

61
00:05:25,010 --> 00:05:33,020
for all and now implement ngi on destroy and the new training component and said this exercise is subscription

62
00:05:33,110 --> 00:05:39,410
or cole this exercise subscription unsubscribe whenever a disk is triggered we can buy away and also

63
00:05:39,410 --> 00:05:41,990
removed the injection of the fire.

64
00:05:41,990 --> 00:05:47,120
Store of the angler fires store service and remove that import.

65
00:05:47,150 --> 00:05:51,200
Now we should get informed whenever he exercises change.

66
00:05:51,290 --> 00:06:00,950
We store our exercises here and we initialize the fetching of exercises with this call in the new training

67
00:06:01,070 --> 00:06:02,480
template.

68
00:06:02,570 --> 00:06:07,760
We no longer need da sink pipe now because indice component there is no asynchronous code.

69
00:06:07,760 --> 00:06:10,940
We just got an array of exercises and nothing else.

70
00:06:12,500 --> 00:06:16,070
If we now save that and we lock back in

71
00:06:20,830 --> 00:06:24,010
you'll still see these values after a short time.

72
00:06:24,010 --> 00:06:25,400
So that is still working.

