1
00:00:02,260 --> 00:00:04,180
OK so it's time for a little bit of theory.

2
00:00:04,240 --> 00:00:09,720
We're going to use angular fire in this module and angular fire will use observables.

3
00:00:09,730 --> 00:00:12,600
That's its core asset if you want.

4
00:00:12,620 --> 00:00:17,290
Therefore we need to understand what observables of service and subscriptions really are and how that

5
00:00:17,320 --> 00:00:18,360
all works.

6
00:00:18,700 --> 00:00:21,090
So we get an observable and an observer.

7
00:00:21,100 --> 00:00:22,920
These are terms you often hear.

8
00:00:23,020 --> 00:00:25,210
The two are connected with a subscription.

9
00:00:25,390 --> 00:00:31,930
And if you use angular you use this construct a lot actually an hour course project we already use a

10
00:00:31,930 --> 00:00:38,380
subject which is a special kind of absorbable you could say we could use that subject to emit values

11
00:00:38,380 --> 00:00:43,200
by calling the next method we could subscribe to it to subscribe method.

12
00:00:43,450 --> 00:00:48,910
Now in contrast to a check and absorbable would be something where you can call next where you can just

13
00:00:48,910 --> 00:00:54,110
subscribe and absorbable which emit events based on some other source which it wraps.

14
00:00:54,160 --> 00:01:00,040
For example you could wrap that say button event with an observable and receive a new event emitted

15
00:01:00,220 --> 00:01:06,160
which you get delivered to your subscription whenever a button is clicked in its core.

16
00:01:06,190 --> 00:01:12,430
All observables have free methods that can be triggered either by the source they're wrapping or in

17
00:01:12,430 --> 00:01:13,710
the case of the subject.

18
00:01:13,770 --> 00:01:20,710
Maybe by you programmatically and next Meffert an error or method and a complete method because observables

19
00:01:20,890 --> 00:01:27,850
can emit a new value can fail or can complete and emit no further values in all these cases.

20
00:01:27,910 --> 00:01:30,550
These methods are simply triggered or invoked.

21
00:01:30,580 --> 00:01:37,770
You could say now as I said NASA will simply wraps something for example I gave the example of the button

22
00:01:37,770 --> 00:01:38,040
here.

23
00:01:38,060 --> 00:01:45,030
Number one it could wrap the call back off an H2B request that could succeed and therefore execute next

24
00:01:45,070 --> 00:01:51,700
and give you the response and also execute complete because once the HTP request A-stan no further values

25
00:01:51,730 --> 00:01:56,930
are to be expected for different events sources like for example the baton which you wrap.

26
00:01:57,040 --> 00:02:02,380
This might be different because dairy you could absolutely get more events in the future.

27
00:02:02,380 --> 00:02:04,470
You don't know how off the button is getting clicked.

28
00:02:04,720 --> 00:02:10,400
Of course if you go back to the HTP request example that could also fail in which case it would also

29
00:02:10,420 --> 00:02:11,500
call the Aero method.

30
00:02:11,590 --> 00:02:14,900
And this will actually all to complete or to be precise.

31
00:02:14,950 --> 00:02:16,200
Cancel the observable.

32
00:02:16,240 --> 00:02:22,590
So there if an error occurs you all won't get any further responses or events to be precise.

33
00:02:22,900 --> 00:02:24,350
So this is an observable.

34
00:02:24,610 --> 00:02:30,490
We can think of these observables as streams of data.

35
00:02:30,490 --> 00:02:33,420
So an observable raps such a stream of data.

36
00:02:33,730 --> 00:02:35,980
It's all about asynchronous jobs.

37
00:02:35,980 --> 00:02:40,660
In the end though theoretically you can also use synchronous data streams.

38
00:02:40,660 --> 00:02:45,080
So here's the concrete example we got a value that submitted.

39
00:02:45,190 --> 00:02:47,500
Let's go back to the HTP example.

40
00:02:47,530 --> 00:02:49,810
We sent the request and a response arrived.

41
00:02:49,810 --> 00:02:54,180
This could be of value or we're wrapping a button event listener.

42
00:02:54,190 --> 00:02:55,430
Now the button was clicked.

43
00:02:55,480 --> 00:02:56,890
We get a new value.

44
00:02:56,950 --> 00:02:59,570
The object with Event data.

45
00:03:00,010 --> 00:03:03,960
Now the observer has a couple of methods which can be triggered.

46
00:03:04,120 --> 00:03:06,130
And for de-value we get this.

47
00:03:06,160 --> 00:03:08,920
Let's say it's a successful value a successful event.

48
00:03:08,920 --> 00:03:09,660
No error.

49
00:03:09,760 --> 00:03:12,340
Therefore the next method is triggered.

50
00:03:12,340 --> 00:03:18,130
Now we can get more values for some observables Abourezk might only be able to emit one like the HTP

51
00:03:18,130 --> 00:03:21,820
request and let's say all these values are successful no errors.

52
00:03:21,820 --> 00:03:25,240
So next is executed a couple of times in the Observer.

53
00:03:25,300 --> 00:03:27,960
Now sometimes tonsorial might be completed.

54
00:03:28,030 --> 00:03:30,430
So the complete method is triggered.

55
00:03:30,430 --> 00:03:33,910
Now another absorbable might have a different stream of data.

56
00:03:33,940 --> 00:03:39,350
Although some successful values but then may be an error which executes the error method.

57
00:03:39,350 --> 00:03:40,690
The end is never reached.

58
00:03:40,690 --> 00:03:42,250
In this case.

59
00:03:42,360 --> 00:03:47,620
So these are observables and this is of course highly abstract and theoretical.

60
00:03:47,740 --> 00:03:49,630
We'll see it in action in a second.

61
00:03:49,630 --> 00:03:50,390
No worries.

62
00:03:50,490 --> 00:03:55,630
And if you want to learn even more with a lot of practical examples I get a whole serious on my YouTube

63
00:03:55,630 --> 00:04:00,010
channel which you can also find a link at the end of this module.

64
00:04:00,040 --> 00:04:03,740
So here is another thing that's really cool about Horrible's.

65
00:04:03,820 --> 00:04:08,710
We get the observable and the observer and the observer by the way remember is simply connect the to

66
00:04:08,710 --> 00:04:12,470
the observable through a subscription so gets informed about all these values.

67
00:04:12,490 --> 00:04:14,800
Errors or completions.

68
00:04:14,800 --> 00:04:20,080
However the best thing about observables is that you can use operators.

69
00:04:20,080 --> 00:04:29,470
Operators are simply some methods you put between the event emission in your stream of data and your

70
00:04:29,560 --> 00:04:30,200
observer.

71
00:04:30,250 --> 00:04:30,870
So where are you.

72
00:04:30,870 --> 00:04:33,270
Then do something with the data.

73
00:04:33,280 --> 00:04:35,620
An operator could be the map operator.

74
00:04:35,780 --> 00:04:43,090
The are ex-chief as library which actually ISDE Library giving us this whole absorbable functionality

75
00:04:43,210 --> 00:04:49,420
has tons and tons and tons of operators and we will see some of them in this module.

76
00:04:49,420 --> 00:04:52,600
Again for more operators check out dead YouTube serious.

77
00:04:52,600 --> 00:04:54,180
I was mentioning.

78
00:04:54,290 --> 00:05:00,870
So we got to operators what do operators do though they're running before we actually received the value.

79
00:05:00,880 --> 00:05:01,780
Our observer.

80
00:05:01,780 --> 00:05:04,390
But after the value was emitted.

81
00:05:04,750 --> 00:05:09,590
So all values go into an operator and then depending on the operator.

82
00:05:09,730 --> 00:05:11,060
Something happens to them.

83
00:05:11,170 --> 00:05:17,380
The map operator for example allows us to specify a function that is executed on every value which we

84
00:05:17,380 --> 00:05:19,110
can use to transform the value.

85
00:05:19,300 --> 00:05:25,630
Like the map method on the javascript frameworks so we get transformed values in that case.

86
00:05:25,720 --> 00:05:29,350
And DS transformed the values to dedi reached the observer.

87
00:05:29,350 --> 00:05:36,220
The cool thing is that we can chain operators and therefore you can rebuild complex chains of value

88
00:05:36,220 --> 00:05:39,990
handling operations where you may be first transform data.

89
00:05:40,120 --> 00:05:47,350
Then you even throttle the collection of them so that you only receive one value every two seconds and

90
00:05:47,350 --> 00:05:54,310
this example your and stuff like that does what you can do with operators and this is one of the coolest

91
00:05:54,310 --> 00:05:55,990
parts about observables.

92
00:05:56,020 --> 00:06:01,880
The many operators that you can use to transform the data manipulate the data and so on.

93
00:06:01,930 --> 00:06:08,260
Still I could imagine that this is highly theoretical So why don't we just dive in and doubt it.

94
00:06:08,260 --> 00:06:13,660
You've got at least a basic understanding of that observable thing matters and what it's about.

95
00:06:13,870 --> 00:06:19,660
Let's use angular fire which embraces this whole concept but which also makes it easier to understand

96
00:06:19,660 --> 00:06:22,350
that since there begat actual examples.

