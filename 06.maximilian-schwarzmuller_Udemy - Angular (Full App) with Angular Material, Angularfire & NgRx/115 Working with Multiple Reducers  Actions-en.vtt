WEBVTT
1

00:00:02.520 --> 00:00:08.250

So in the last lecture we started with NCR X. Now when I take it to the next level right now we have



2

00:00:08.250 --> 00:00:15.490

one global producer DIAK producer where we managed the UI now will soon have multiple reducer one for



3

00:00:15.480 --> 00:00:21.090

detraining related state one for all related state and one for DUI related state.



4

00:00:21.150 --> 00:00:24.110

Basically just as we have services right now.



5

00:00:24.540 --> 00:00:30.120

So now my goal is to already start splitting that up into multiple reducers.



6

00:00:30.120 --> 00:00:39.940

So lets go to our shared folder and there are now at my you dog reducer dot TS file in here.



7

00:00:39.940 --> 00:00:45.870

I now want to create a reducer thats just focused on the is loading state and in that app reducer where



8

00:00:45.870 --> 00:00:52.020

we are currently doing that I soon want to start merging all the different producers which will eventually



9

00:00:52.020 --> 00:00:52.690

have.



10

00:00:52.710 --> 00:00:58.820

Now let's take a look at how this looks like in that you are producer.



11

00:00:58.850 --> 00:01:05.960

Again first of all define the state of this slice of this single reducer and your state is still going



12

00:01:05.960 --> 00:01:09.120

to be loading which is a Boolean just like that.



13

00:01:09.140 --> 00:01:11.740

So this doesn't change now.



14

00:01:11.780 --> 00:01:19.970

Besides this interface here of course I also want to have my initial state so initial state will be



15

00:01:19.970 --> 00:01:27.380

off the type of the states here and theres a constant where I will said is bull is loading it's loading



16

00:01:27.620 --> 00:01:30.600

to false initially.



17

00:01:30.800 --> 00:01:36.630

So they were not loading at the start and then I'll export my reducer function.



18

00:01:36.710 --> 00:01:39.980

This will be named you or I a producer for example.



19

00:01:40.460 --> 00:01:45.770

And it's a function where I get the state or the initial state.



20

00:01:45.800 --> 00:01:54.110

If we got no existing state and action which by the way is of type action something you don't import



21

00:01:54.110 --> 00:02:04.000

from angular firestorm but from at ngi our X store now as function of course should return a state.



22

00:02:04.000 --> 00:02:06.380

As you learned it this is what we did before.



23

00:02:06.430 --> 00:02:08.090

This is what we will continue doing.



24

00:02:09.410 --> 00:02:19.760

So here I will again add a switch statement and check my action type and if it's what now previously



25

00:02:19.760 --> 00:02:22.100

we used start loading and so on.



26

00:02:22.220 --> 00:02:28.520

Now typing that as a string here is error prone because we're not only using it in the reducer we're



27

00:02:28.610 --> 00:02:33.430

also using it in the places where we dispatch the action like in the off service.



28

00:02:33.650 --> 00:02:40.000

What better to store it in a constant which we can then simply import so add an additional file in the



29

00:02:40.010 --> 00:02:42.440

shared folder DUI actions start.



30

00:02:42.440 --> 00:02:51.830

TS file in there ultimately export a couple of constants which are name for example you or I start loading



31

00:02:52.670 --> 00:02:56.580

or just start loading actually which will have a value.



32

00:02:56.660 --> 00:03:01.730

And now that's also kind of a convention you senior official docs were in square brackets I have to



33

00:03:01.850 --> 00:03:04.130

redo username and this is totally up to you.



34

00:03:04.130 --> 00:03:11.210

You can put any string here and I'll name this start loading and I'll do the same of course for stopping



35

00:03:11.220 --> 00:03:17.930

so stop loading will get the stop loading string string here.



36

00:03:17.970 --> 00:03:24.090

So with that I got these two exports in my action file and now we have these constants which we can



37

00:03:24.090 --> 00:03:27.440

simply import so we can never mistype.



38

00:03:27.600 --> 00:03:36.540

We can also improve as a bit more and export action creators so to say or Klaas's our actions as classes



39

00:03:36.810 --> 00:03:41.220

so that we get all the completion support and types support in general.



40

00:03:41.220 --> 00:03:49.740

So what we can do is we can export a class here in the actions file which names start loading in Pascal



41

00:03:49.740 --> 00:03:59.000

case which will implement which will implement the action we can import from Engy or extort.



42

00:03:59.160 --> 00:04:08.430

So let's quickly do that let's import action from at ngi our X store like that and now we have a class



43

00:04:09.090 --> 00:04:12.340

where I'll add a read only type property.



44

00:04:12.360 --> 00:04:18.570

Keep in mind an action needs to have a type that's required by our interface we're implementing.



45

00:04:19.200 --> 00:04:24.480

So this type will then we start loading in this case.



46

00:04:24.480 --> 00:04:32.760

So the value of this constant So this string in the end and the same can be done for stopping.



47

00:04:32.850 --> 00:04:39.080

Now you might be wondering what the sense of does is it makes even more sense once we start having payloads.



48

00:04:39.240 --> 00:04:42.620

But here already we will get better completion support.



49

00:04:42.630 --> 00:04:48.300

So what I'll do now is I'll export a custom type the type keyword is Buraidah by typescript you just



50

00:04:48.300 --> 00:04:58.440

create your own type you can use which will name you by actions which is either start loading or stop



51

00:04:58.440 --> 00:04:59.370

loading.



52

00:04:59.370 --> 00:05:04.790

So we will be able to just import UI actions and automatically complete to start or stop loading.



53

00:05:04.800 --> 00:05:07.250

You'll see it in action a second.



54

00:05:07.260 --> 00:05:12.110

So with that edit Let's go back to the reducer file here.



55

00:05:12.120 --> 00:05:17.720

So you reducers and now let's check for directions differently.



56

00:05:17.760 --> 00:05:25.490

Let's add a couple of imports at the top and let's import you right actions from.



57

00:05:25.550 --> 00:05:32.490

And now it's just from the DOD actions file with that and the reducer at the actually get is actually



58

00:05:32.490 --> 00:05:33.950

of Type II actions.



59

00:05:33.960 --> 00:05:40.920

We know that because we're in the UI reducer and now therefore here the case can all be imported from



60

00:05:40.920 --> 00:05:44.640

the UI actions that is either start loading or stop loading.



61

00:05:44.640 --> 00:05:46.510

So the two constants we defined.



62

00:05:46.800 --> 00:05:55.650

So now we have case start loading in which case I want to return a new object whereas it is loading



63

00:05:56.140 --> 00:05:56.790

to true



64

00:05:59.420 --> 00:06:06.590

or we have a narrow case of course where I have stopped loading and when we return



65

00:06:09.310 --> 00:06:18.510

is loading set to false and I'll also add a default case where I just return the state does required



66

00:06:18.510 --> 00:06:24.000

for any attractions we might dispatch which don't fit you we're dead or dead pattern.



67

00:06:24.000 --> 00:06:27.260

So with that we're having the producer.



68

00:06:27.510 --> 00:06:34.500

Now we'll add even more expert and Yukon's then which I'll name get is loading which will simply be



69

00:06:34.500 --> 00:06:43.860

a function Erol function which gets my state and which returns state is loading notice will become handy



70

00:06:43.860 --> 00:06:45.130

in a second.



71

00:06:45.150 --> 00:06:45.840

So this is.



72

00:06:45.850 --> 00:06:47.710

You reduce her now.



73

00:06:47.760 --> 00:06:54.100

Now the goal now is to use that you reducer in our application a wide reducer.



74

00:06:54.450 --> 00:06:57.210

So let's go back to the app reducer.



75

00:06:57.210 --> 00:06:59.600

Now in here I will change it.



76

00:06:59.610 --> 00:07:06.240

This is now a function or a to me a file which should not define its own reducers but simply merge the



77

00:07:06.240 --> 00:07:07.510

various reducers.



78

00:07:07.530 --> 00:07:09.640

Our application will eventually have.



79

00:07:09.780 --> 00:07:14.550

So I'll get rid of the export function and I'll get rid of everything actually.



80

00:07:14.820 --> 00:07:16.790

And I'll start from scratch.



81

00:07:17.070 --> 00:07:17.420

All.



82

00:07:17.420 --> 00:07:22.540

First of all import everything as from UI.



83

00:07:22.920 --> 00:07:29.120

And at the convention we're importing from the UI reducers So we typically name it like this from.



84

00:07:29.150 --> 00:07:33.990

And now this is from the shared folder and they are from the UI reducer of course.



85

00:07:35.620 --> 00:07:41.760

I now want to define my application wide state I'll export it.



86

00:07:41.800 --> 00:07:47.880

So export the interface state and this will actually have a UI part.



87

00:07:47.910 --> 00:07:52.880

Right now it's the only part but later will have multiple reducers and therefore multiple states slices



88

00:07:52.890 --> 00:07:55.990

you could say and this is coming from UI.



89

00:07:56.220 --> 00:08:06.460

And it's this state with a fine and there so any UI reducer we should export our state by exploiting



90

00:08:06.460 --> 00:08:09.130

that interface and importing in India producer.



91

00:08:09.280 --> 00:08:15.070

We kind of inform our global store about how it's actually going to look like how its state is going



92

00:08:15.070 --> 00:08:16.160

to look like.



93

00:08:16.180 --> 00:08:19.750

With that we define how our application wide state is going to look.



94

00:08:20.020 --> 00:08:26.890

But now I also need to group all my reducers I'll do this in a new constant which I'll named reducers



95

00:08:27.880 --> 00:08:32.490

and this is now actually of a special type which we can import from NCR x.



96

00:08:32.590 --> 00:08:40.710

So import something from at Engy our X store and that something is the so-called action reducer map.



97

00:08:40.810 --> 00:08:45.750

It's a map of all the reducers we have and Yant map to state slices.



98

00:08:45.940 --> 00:08:53.980

So reducers is of type accurate use for map which in turn is a generic type which is a type state.



99

00:08:54.190 --> 00:09:01.090

So we have embedded user per slice of our application white state that is the pattern you should follow.



100

00:09:01.090 --> 00:09:02.890

This is not just an object.



101

00:09:02.980 --> 00:09:09.290

And in that object all map UI since that is my name here in St..



102

00:09:09.370 --> 00:09:18.430

You I from you I so from you guys does import from you I produce or read you I read you said Excuse



103

00:09:18.430 --> 00:09:18.730

me.



104

00:09:18.730 --> 00:09:22.410

So the function indebt you I would use her file.



105

00:09:22.420 --> 00:09:25.920

So the actual reduced her function off that state slice.



106

00:09:26.050 --> 00:09:34.240

This is now our map our grouped reducer the actual app reducer you could say we can now create a utility



107

00:09:34.240 --> 00:09:40.750

function which will name get you by state where I use a special feature which I can also import from



108

00:09:40.750 --> 00:09:49.150

NCR X store called create feature selector selectors are a helper functions that make it easier for



109

00:09:49.150 --> 00:09:52.480

us to pull information from our state.



110

00:09:52.480 --> 00:09:57.220

So here all name discreate create selector used this function.



111

00:09:57.220 --> 00:10:00.770

It's a generic function and needs to know which kind of state it works with.



112

00:10:00.940 --> 00:10:06.430

So we use from you will I and this state that it's defined in their.



113

00:10:06.540 --> 00:10:10.820

And then we target as a string do you slice of our store.



114

00:10:10.950 --> 00:10:17.460

So what this will do is it will allow us to simply call this function and get quick access to this state



115

00:10:17.880 --> 00:10:21.480

as returned by disarrayed use or in our global app state.



116

00:10:21.510 --> 00:10:27.750

And this is especially handy if you've got more UI slices of course than just one more state slices



117

00:10:27.750 --> 00:10:29.350

I mean than just one.



118

00:10:29.370 --> 00:10:36.390

This gives you quick access and spares you the hassle of having to access state DOT UI and so on.



119

00:10:36.390 --> 00:10:39.560

So this is the feature selector.



120

00:10:39.660 --> 00:10:45.290

Now we can also give us a utility function that quickly gives us the is loading state for this name



121

00:10:45.290 --> 00:10:47.640

and get is loading.



122

00:10:48.060 --> 00:10:54.080

And this is using a number function the Create selector function.



123

00:10:54.150 --> 00:11:02.420

Create feature selector is used if you're targeting the state or devalues returned by Suppe reducers



124

00:11:02.430 --> 00:11:08.200

you could say now we're creating a utility function that will take this constant and therefore runs



125

00:11:08.220 --> 00:11:10.240

directly in Yabrud use term.



126

00:11:10.330 --> 00:11:18.180

It's called create selector and create selector takes two arguments at least the first argument is get



127

00:11:18.520 --> 00:11:19.980

you a nice state.



128

00:11:19.980 --> 00:11:26.420

So the result of this function you don't execute it though you just pass a pointer to that function.



129

00:11:26.460 --> 00:11:32.790

This will be behind the scenes then triggered this function and give you the object as returned by you



130

00:11:32.790 --> 00:11:34.020

or you by state.



131

00:11:34.080 --> 00:11:39.870

Remember this will be essentially an object in this forum an object with a is loading property.



132

00:11:40.350 --> 00:11:46.710

The second argument you passed to create selector is then telling this function what to do with the



133

00:11:46.710 --> 00:11:48.050

returned object.



134

00:11:48.060 --> 00:11:50.600

And here we want to simply pull out.



135

00:11:50.630 --> 00:11:52.480

D is loading state.



136

00:11:52.560 --> 00:11:54.500

Now we get a utility function for dead end.



137

00:11:54.510 --> 00:11:56.570

It's defined in the UI reducer.



138

00:11:56.640 --> 00:11:58.450

This get is loading.



139

00:11:58.620 --> 00:12:05.560

It takes a state as an input a state of this format and then gives us the result of D is loading property



140

00:12:06.050 --> 00:12:09.720

while a state of this format is returned by gets you by state.



141

00:12:09.720 --> 00:12:15.140

So now we can simply exit from UI and call get is loading or to be precise.



142

00:12:15.150 --> 00:12:18.240

We don't call it we all just pass a reference.



143

00:12:18.540 --> 00:12:24.030

So behind the scenes when this is executed this will give us DeWyze state and then from that state give



144

00:12:24.030 --> 00:12:30.780

us the is loading property and this is useful for accessing it in the components what you will do in



145

00:12:30.780 --> 00:12:33.420

the next lectures as well as this patching.



