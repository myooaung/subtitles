WEBVTT
1

00:00:02.490 --> 00:00:04.640

So we connect the new training component.



2

00:00:04.800 --> 00:00:09.840

The current training component isn't working though which makes a lot of sense if you think about it



3

00:00:10.110 --> 00:00:11.490

because we haven't worked on it.



4

00:00:11.490 --> 00:00:14.790

It's certainly fetching the wrong training.



5

00:00:14.790 --> 00:00:19.580

How does a training get started in new training.



6

00:00:19.860 --> 00:00:25.830

When we start training we call start exercise in the service.



7

00:00:25.830 --> 00:00:32.880

So in the training service we actually dispatch does start training for it to select that ideal which



8

00:00:32.880 --> 00:00:40.610

in turn goes to our producer and in the reducer we find a training and started as the act of training.



9

00:00:40.650 --> 00:00:46.710

So in the current training component we have to connect to this now to find out what the current training



10

00:00:46.710 --> 00:00:49.280

is and to correctly display it of course.



11

00:00:51.480 --> 00:00:58.740

For that we get this get running exercise call here that reaches out to the training service and from



12

00:00:58.740 --> 00:01:07.890

there it returns this running exercise which turns out is this one which we now never set though because



13

00:01:07.890 --> 00:01:11.030

we're now managing this all through the store.



14

00:01:11.490 --> 00:01:19.230

So we should go to the current training and change this logic we can directly inject our store into



15

00:01:19.230 --> 00:01:20.250

this component.



16

00:01:20.430 --> 00:01:26.910

And for this all of course is always import my store from at ngi our ex store.



17

00:01:27.280 --> 00:01:37.880

I'll also need to import my reducers so ask from training from my training reducer file and then in



18

00:01:37.880 --> 00:01:40.760

the constructor we can inject this.



19

00:01:40.760 --> 00:01:51.820

So I'll inject my store here which will be of type from training state this line was added with that



20

00:01:51.840 --> 00:01:56.170

add it an NGO in it we start or resume the timer business.



21

00:01:56.190 --> 00:01:57.070

All right.



22

00:01:57.270 --> 00:02:03.060

But this year where we get the duration that this should be changed.



23

00:02:03.270 --> 00:02:07.260

Now we don't really need an ongoing subscription as it looks like.



24

00:02:07.290 --> 00:02:14.920

So what we can simply do is we can go into start or resume Taimur and there we can reach out to the



25

00:02:14.920 --> 00:02:24.600

store called select from training get active training and then subscribe to it.



26

00:02:24.630 --> 00:02:30.300

So we won't use that with the casing pipe and the template we subscribe to it's here now there we know



27

00:02:30.330 --> 00:02:34.340

that we will get the exercise which will be of type exercise.



28

00:02:34.380 --> 00:02:40.680

We don't even we don't even need to add data type because time knows it due to our complex set up we



29

00:02:40.680 --> 00:02:41.820

did.



30

00:02:41.820 --> 00:02:48.750

So now we get that exercise here and now we can simply calculate a step and run this entire code inside



31

00:02:48.750 --> 00:02:50.570

of this function.



32

00:02:50.580 --> 00:02:54.940

Now we need to do all of that inside here because it happens asynchronously.



33

00:02:55.020 --> 00:02:59.440

So all data is only available inside of this function.



34

00:02:59.460 --> 00:03:04.430

So here I want to calculate a step and I get that directly from the exercise which was loaded.



35

00:03:04.830 --> 00:03:12.360

And then we set the timer this timer refers to this timer properties still we set the intro will and



36

00:03:12.360 --> 00:03:13.910

this should all be fine.



37

00:03:13.920 --> 00:03:17.190

I also still want to complete the exercise in the service and so on.



38

00:03:17.250 --> 00:03:18.690

This looks good to me.



39

00:03:18.690 --> 00:03:23.280

Now with that little change let's see if everything works as expected.



40

00:03:23.550 --> 00:03:32.180

Let's reload our application and log in and let's do some side lungis and this looks actually good.



41

00:03:32.180 --> 00:03:35.060

Now if I stop this we stopped the timer.



42

00:03:35.060 --> 00:03:42.440

If I continue it continues and if I quit den we get an error that we can't read Property duration of



43

00:03:42.530 --> 00:03:44.640

undefined.



44

00:03:44.840 --> 00:03:49.170

Now this however is not stemming directly from the current training here.



45

00:03:49.370 --> 00:03:56.450

Instead what's happening is in the current training if we stop here we call training service cancel



46

00:03:56.450 --> 00:04:01.810

exercise now into training service cancel exercise.



47

00:04:02.000 --> 00:04:07.200

Here we get data to database and we referred to the running exercise.



48

00:04:07.220 --> 00:04:10.700

The same is the case for the complete exercise here by the way.



49

00:04:10.700 --> 00:04:16.430

Now this of course won't work because this running exercise is not managed anymore.



50

00:04:16.430 --> 00:04:20.510

Instead they're running exercise is part of our story.



51

00:04:20.560 --> 00:04:25.470

It's no problem though we can use the story from within the service we already injected it.



52

00:04:25.790 --> 00:04:35.090

We can select from training get running we get active training just as we did in the component and subscribe



53

00:04:35.090 --> 00:04:35.910

to it.



54

00:04:36.120 --> 00:04:43.940

And in here just as in the component we get the running exercise and then we use that information to



55

00:04:44.030 --> 00:04:51.950

add this to the database and we referred to the exercise we retrieve from the store then we dispatch



56

00:04:52.700 --> 00:04:56.600

and we use the same logic in canceller exercise.



57

00:04:56.600 --> 00:05:02.890

We get the active training and then we override the duration of the calories.



58

00:05:02.900 --> 00:05:08.840

So we first of all get all the properties of the running exercise and then we set duration and calories



59

00:05:09.500 --> 00:05:13.090

but we don't set it to this running exercise to ration calories.



60

00:05:13.130 --> 00:05:16.140

But just to be fetched exercise to ration and calories.



61

00:05:16.160 --> 00:05:18.070

So the one coming from our store.



62

00:05:18.470 --> 00:05:21.580

And then we can get rid of this method here too.



63

00:05:22.100 --> 00:05:23.450

And of debt too.



64

00:05:23.870 --> 00:05:30.560

So now we're still adding this to the database sending us to angle of fire but we're basing this on



65

00:05:30.650 --> 00:05:36.500

the exercise we got in our store and then we dispatch stop training.



66

00:05:36.530 --> 00:05:38.810

Now with that we're almost done.



67

00:05:38.810 --> 00:05:45.720

One thing I can do is I can get rid of these get running exercise method here training service we don't



68

00:05:45.720 --> 00:05:46.940

use that anymore.



69

00:05:47.220 --> 00:05:49.620

Now these are good changes.



70

00:05:49.710 --> 00:05:51.220

They have one problem though.



71

00:05:51.330 --> 00:05:55.740

We subscribe to updates in the act of training here right.



72

00:05:55.740 --> 00:05:59.540

The problem is we're not really interested in all these updates.



73

00:05:59.670 --> 00:06:03.340

I only want to take one one at this point of time right.



74

00:06:03.450 --> 00:06:09.280

Because otherwise we'll always get informed whenever active training changes here.



75

00:06:09.300 --> 00:06:12.350

We get reactive training whenever that changes we'll get informed.



76

00:06:12.570 --> 00:06:16.220

And worst of all we added to the database we don't want to do that.



77

00:06:16.500 --> 00:06:21.400

So what I'll do instead is I'll take one just as we did it before.



78

00:06:21.480 --> 00:06:28.650

However you learned that for this you need the pipe so let's pipe take one here.



79

00:06:28.880 --> 00:06:31.810

And for that we need to import to take operator.



80

00:06:32.000 --> 00:06:38.450

So all in all it take from our ex-chief as Slash operators



81

00:06:42.050 --> 00:06:46.220

and I'll copy that also to complete exercise here.



82

00:06:46.220 --> 00:06:52.670

So basically when ever I just want to get the currently running active exercise and then of course also



83

00:06:52.670 --> 00:06:59.800

means that I should go to recurrent training component where we also get this exercise only once an



84

00:06:59.800 --> 00:07:01.000

addict is here.



85

00:07:01.070 --> 00:07:05.560

And for that I also need to import to take operator in the current training component.



86

00:07:05.720 --> 00:07:10.600

So here all imports take from are as checks as operators.



87

00:07:10.940 --> 00:07:13.000

Now if that if we save this then we go back.



88

00:07:13.010 --> 00:07:17.760

We shouldn't get this error anymore because now we don't have a subscription offer we need it.



89

00:07:17.870 --> 00:07:22.710

So we start we stop and this works.



90

00:07:22.710 --> 00:07:26.030

Last stop our deep past exercises.



91

00:07:26.190 --> 00:07:28.170

So let's move on to D.C. now.



