WEBVTT

00:02.150 --> 00:05.300
So in the last lecture I explain how you can handle errors.

00:05.330 --> 00:06.660
It's easy to call back.

00:06.740 --> 00:09.140
But what about promises to show it.

00:09.320 --> 00:10.510
Let's code words to code.

00:10.510 --> 00:14.810
And the next of you fall in the Post's folder to a promise based code.

00:14.810 --> 00:20.320
Now here I will create my own promise and a promise constructor requires a function.

00:20.330 --> 00:27.130
In this case the arrow function which receives the rissoles and reject functions which in turn execute.

00:27.130 --> 00:31.140
Inside of this function to indicate that you are done or not.

00:31.220 --> 00:39.940
So then you can grab sets timeout here like that and you pass it inside this function and most of the

00:39.940 --> 00:46.870
time you don't need to construct promises on your own but you use libraries like ex-US that return preconstructed

00:46.870 --> 00:48.000
promises anyways.

00:48.080 --> 00:50.100
And that is what we will do later too.

00:50.350 --> 00:53.170
But let's not say here reconstructing our own promise.

00:53.170 --> 00:59.680
It wraps our async code and in that async code here we now resolve our value.

00:59.800 --> 01:05.410
So here I resolve I called rissoles and passed my javascript object just as before with the callback

01:05.410 --> 01:05.770
method.

01:05.770 --> 01:11.500
But now with the default promised resolve method and if we had an error I would call reject instead.

01:11.500 --> 01:14.250
But here let's stick to the success case.

01:14.890 --> 01:19.450
And then I would have a then block added to that.

01:19.450 --> 01:23.790
So then also listens for this to work.

01:23.790 --> 01:25.350
And here I get back my data.

01:25.360 --> 01:27.480
You can named as argument whatever you want.

01:27.610 --> 01:29.240
And now here's the important thing.

01:29.530 --> 01:31.540
You'll need to return to promise.

01:31.570 --> 01:38.620
This tells Nax that it should wait for it to resolve and once it resolved you return the data that should

01:38.620 --> 01:41.130
be merged with the average component data.

01:41.260 --> 01:47.490
So here you are to turn what you previously added as the second method in your callback function.

01:47.530 --> 01:50.150
So does object with the loaded posts key.

01:50.530 --> 01:53.720
So in my case here this is awls of data I resoled.

01:53.800 --> 01:56.450
So I can simply return data.

01:56.680 --> 02:02.020
But if you had other data and wanted to pull out some properties you would return a new object and just

02:02.170 --> 02:04.270
map the data as needed.

02:04.270 --> 02:08.100
Now what that finished and for to work we need to remove that second argument.

02:08.110 --> 02:13.780
Because if we actively receive it next we'll wait for us to call it and we never call it because we

02:13.780 --> 02:16.180
now are used to a promise based approach.

02:16.180 --> 02:18.670
But with that Remove that the promise returned.

02:18.850 --> 02:22.920
Let's go back to our app and let's actually load slash posts here.

02:23.710 --> 02:26.460
And now you see below that's what that works ask before.

02:26.550 --> 02:33.400
And if we wanted to throw an error all we'd have to do is instead of calling rissoles now just commented

02:33.430 --> 02:41.110
out and actually call reject and create a new error there and then here in the catch block we could

02:41.110 --> 02:44.730
simply forewards dead if we wanted to handle it somewhere.

02:45.990 --> 02:48.310
Let me also comment out sometime.

02:48.510 --> 02:52.920
Now this will instantly Frot an error whenever we reload this page as you can see.

02:52.920 --> 02:57.730
Now I will revert this but this shows you how you can actually use the promised base approach.

02:57.900 --> 03:01.270
And as I said you really create the promises on your own.

03:01.290 --> 03:05.880
Most of the time you get them preconstructed by package shows like X yes.

03:05.880 --> 03:11.540
Still this is what happens under the hood if you use a promise return it if you use to call back call

03:11.540 --> 03:12.000
it.

03:12.100 --> 03:15.840
And with that let's move on and let's see how Buick's fits into the picture.
