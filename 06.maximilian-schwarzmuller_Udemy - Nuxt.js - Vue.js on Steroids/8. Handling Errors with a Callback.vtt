WEBVTT

00:02.120 --> 00:04.460
So we had a closer look at the data.

00:04.580 --> 00:10.310
But thus far we always assumed that our actions we take there would be successful.

00:10.310 --> 00:11.740
Now what if that fails.

00:11.930 --> 00:17.180
Let's go back to the list of posts in the post folder here in the index of your folder.

00:17.180 --> 00:21.330
Now let's say our async action which of course is just dummy code here.

00:21.350 --> 00:25.040
But let's say it were a real action and it failed.

00:25.070 --> 00:32.570
All we had to do is in a callback we don't pass null as the first argument but our error.

00:32.810 --> 00:41.010
Now the error could be a new error object we create error or is a built in javascript constructor.

00:41.020 --> 00:49.830
Now if we do that and we save this if I reload the I go back to the simple log page or I reloaded it

00:50.370 --> 00:58.070
you'll simply see I get the error lay out we created because next we'll automatically redirect us to

00:58.380 --> 00:59.080
our page.

00:59.080 --> 01:00.360
If an error occurs.

01:00.400 --> 01:04.090
So if the first argument in callback is not now.

01:04.450 --> 01:07.180
If you were using a promise based approach.

01:07.300 --> 01:08.570
So we're in async data.

01:08.590 --> 01:12.700
You returned a new promise that wrap your async code.

01:13.030 --> 01:13.390
Then what.

01:13.390 --> 01:18.500
You could simply do is inside the catch block you might add to your promise.

01:18.640 --> 01:23.920
And of course you're promised us probably more than nothing inside there where you get the error from

01:23.920 --> 01:29.970
the HTP request to make or whatever it is you could execute context error like this.

01:29.980 --> 01:32.950
There is an error function on that context object.

01:32.950 --> 01:37.830
And here you could pass your new error or whatever error you got back from the server maybe.

01:38.110 --> 01:41.480
And by doing it like this it would also throw.

01:41.710 --> 01:47.050
Now here a you showed us because we're not doing anything in the promise but can working just to promise

01:47.320 --> 01:52.570
is something I'll do in the next lecture before we get all to have a look at how the X adds to all of

01:52.570 --> 01:52.870
that.
