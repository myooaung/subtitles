WEBVTT

00:02.120 --> 00:07.580
Let's take care of this pre rendering issue we can do that in the next conflict there.

00:07.610 --> 00:11.480
We can add a special set up at the bottom of the conflict file.

00:11.730 --> 00:17.160
It's to generate key and it holds an object where we can configure a couple of details.

00:17.210 --> 00:20.990
The important detail here is the routes config.

00:21.500 --> 00:31.320
Now routes simply takes a functional and that function should return an array of routes that should

00:31.320 --> 00:33.240
be pre rendered.

00:33.240 --> 00:39.130
Now in that array of routes we can add all the dynamic routes for our various dynamic elements.

00:39.180 --> 00:42.320
So we could at slash posts slash.

00:42.360 --> 00:49.970
And now let's grab one ID so here from firebase I'll grab that idea of one post entered as after the

00:49.970 --> 00:50.750
slash.

00:50.990 --> 00:54.200
And now let's rerun NPM run generate.

00:54.200 --> 01:03.340
If we do that it will now build the project again will generate all the static routes anyways but will

01:03.400 --> 01:09.190
also render this dynamic route so it will include desined the rendering process and see if it finds

01:09.190 --> 01:12.180
a matching page set up where does route would fit.

01:12.310 --> 01:13.180
And it does.

01:13.360 --> 01:18.780
We have a post folder so this fits and then in the post folder we have a dynamic element.

01:18.820 --> 01:24.490
So it can also populate this if we now inspect the disk folder under posts.

01:24.510 --> 01:30.790
We see a new subfolder with that ID with a index HDMI file that actually includes to completely pre

01:30.850 --> 01:31.880
render posts.

01:31.960 --> 01:38.300
So it also went ahead and made that HTP request to fetch that data from the server.

01:38.530 --> 01:40.500
So that is now working.

01:40.510 --> 01:45.250
However of course we can't manually enter all these post IDs here.

01:45.250 --> 01:46.770
So what can we do.

01:47.170 --> 01:51.020
Well we can also execute HTP requests here.

01:51.160 --> 01:55.630
We can import access yerd though since this will get executed by no choice.

01:55.630 --> 01:59.190
We have to use t note JS import syntax.

01:59.350 --> 02:04.540
So let's import x is not the next module but the normal access packet which we installed earlier in

02:04.540 --> 02:05.800
the course.

02:05.800 --> 02:08.230
And now we can use access here.

02:08.590 --> 02:16.540
We can send a get request to our fire based backend which is not protected against read so this is allowed

02:17.110 --> 02:18.720
and we can access posts.

02:18.730 --> 02:27.180
So let me copy that Eurail and add dot Jason at the end to fetch a list of all the posts.

02:27.490 --> 02:35.460
Then we get back the response which will include dead list of posts just to get.

02:35.910 --> 02:44.790
So now what we can do is we can return an array of routes here and return this access call because you

02:44.880 --> 02:48.120
are allowed to return a promise in this route.

02:48.140 --> 02:57.790
Function and now you want to return an array that simply creates a list of all the IDs you want to render

02:58.210 --> 03:00.250
with Slash posts in front of them.

03:01.580 --> 03:09.170
For this I'll simply loop through my data and the response data there we got these firebase keys so

03:09.170 --> 03:13.860
key in response data.

03:13.860 --> 03:16.730
Keep in mind firebase always returns you an object.

03:16.740 --> 03:21.080
Now we're pulling out the key which will always be the property of each post.

03:21.080 --> 03:28.080
So the idea of each post because we're getting back in opticals this structure that's the key that's

03:28.080 --> 03:29.190
the object.

03:29.220 --> 03:33.960
Now here we're getting that key and we can now add that to an array of routes.

03:33.960 --> 03:36.460
So routes could be an empty array initially.

03:36.510 --> 03:48.250
And here we simply push slash hosts slash and then that key after we're done we just return these routes

03:48.310 --> 03:55.180
array with this set up if we run NPM run generate Again we make one request to fetch all the posts and

03:55.200 --> 04:03.420
that we generate an array of routes with all these keys of these posts being part of it which will in

04:03.420 --> 04:07.640
the end yield us all our supper outs for our posts.

04:07.650 --> 04:14.760
As you can see here in the post folder now this is all created and now we get pre-generated files for

04:14.820 --> 04:21.660
this dynamic content and on each new generate command it will get the latest version of all our posts

04:21.900 --> 04:23.810
and regenerate all these files.

04:23.820 --> 04:29.400
This makes generate a really good solution for dynamic content too to you just need to ensure that you

04:29.400 --> 04:32.930
regenerate your pages when you're dynamic content changes.

04:33.030 --> 04:37.980
But this can also be set up as a dynamic an automated process.

04:37.980 --> 04:41.040
Now there's one thing we can do though to improve this even more.
