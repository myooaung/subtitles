WEBVTT

00:02.050 --> 00:09.230
In the last with your I explained how you would build and deploy your universal next application let's

00:09.230 --> 00:14.950
now have a look at the single page application case for this all Switch team mode to SBA.

00:15.350 --> 00:19.950
Now if I run NPM run build we'll get a different output.

00:20.090 --> 00:25.720
We won't get these next folder which has some supporting files for our environment.

00:25.760 --> 00:28.480
We'll get a brand new folder instead.

00:28.790 --> 00:31.060
The new folder against disk folder.

00:31.190 --> 00:36.020
Now for a single page application we only need to deploy this folder.

00:36.020 --> 00:41.440
Now be aware that here you don't have any pre-rendered nothing gets rendered on the server.

00:41.460 --> 00:44.080
Does this therefore not search engine optimized.

00:44.120 --> 00:47.030
It's a normal single page application.

00:47.030 --> 00:55.130
So this is to disk folder you would now simply deploy to a static host like AWOS as free firebase hosting

00:55.310 --> 01:01.130
or get half pages only the content of this folder not the entire folder but the content.

01:01.220 --> 01:06.800
So make sure to copy all these files and folders to your static host and non of the other folders here

01:06.920 --> 01:09.410
really just the content of the disk folder.

01:09.410 --> 01:13.200
That is what you ship to your static host.

01:13.210 --> 01:20.230
Now if you want to see the application run as a single page application you can install an extra server

01:20.430 --> 01:25.280
by running NPM install dashi age to the server.

01:25.390 --> 01:26.480
This is a lightweight.

01:26.490 --> 01:32.050
No it's server that you can run in any folder on your machine to spin up a node server serving that

01:32.050 --> 01:32.790
folder.

01:32.800 --> 01:36.280
Now I already got that installed so I don't need to execute the command.

01:36.280 --> 01:41.730
Once you have it installed on Mac and Linux you might need to add a pseudo in front of it by the way.

01:42.070 --> 01:48.730
Once you have it installed you can navigate into the disk folder with CD disks and then run HTP server

01:48.880 --> 01:52.630
dash p. 80 82 for example.

01:52.630 --> 02:00.680
Now this spins up a server on localhost 1882 that's visited now and we see no posts right.

02:00.690 --> 02:07.210
If we go to block no posts if we go to the admin area let's try signing in

02:09.970 --> 02:11.000
does actually works.

02:11.000 --> 02:19.130
Our track data code here crashes because the SBA mode our customer service site middleware isn't deployed

02:19.220 --> 02:21.840
obviously because there is no service site.

02:21.980 --> 02:24.250
But here we also don't see the posts.

02:24.440 --> 02:33.190
We can click Create post though and if we fill that out and I had save that all succeeds and here the

02:33.190 --> 02:38.960
Post is now because it was at a store and we can also load it so this all works.

02:39.070 --> 02:44.390
If I reload this page you'll see that also loading a single post works.

02:44.490 --> 02:45.820
So this all works.

02:46.210 --> 02:52.210
But if we go back to the Admin Page and reload we just don't see the posts and the same is the case

02:52.330 --> 02:54.490
on our regular routes.

02:54.640 --> 02:56.090
Now why is that in a single page.

02:56.100 --> 03:00.130
Note because that single page mode we don't get the posts.

03:00.160 --> 03:04.310
Remember we load them in our store from next server init.

03:04.330 --> 03:09.580
Now as the name implies dis is not executed in a single page application mode.

03:09.880 --> 03:12.120
Now this is something you have to keep in mind.

03:12.250 --> 03:20.200
If your building your app for dad mode you can't use next server init Instead you will have to make

03:20.200 --> 03:21.070
your requests.

03:21.100 --> 03:25.830
Where are you load your posts inside of your components.

03:25.840 --> 03:31.400
Use the created or the mounted future.

03:31.500 --> 03:36.160
Chase gives you and make your HTP requests from there.

03:36.310 --> 03:42.160
If you implement the code like this then you can successfully make them whenever discompose and loads

03:42.280 --> 03:44.800
because as you could see for logging in and so on.

03:44.800 --> 03:52.960
This did work know what happens if we directly try to load a post to test this I'll go back to my firebase

03:52.970 --> 03:57.860
database just to pick the idea of one post maybe this one.

03:58.280 --> 04:00.200
So that's the idea of one post.

04:00.270 --> 04:06.250
Now I want to load it by going to slash posts and then that Id.

04:06.370 --> 04:09.730
And now here I just get an empty page actually.

04:09.810 --> 04:17.340
Now why is that now this empty screen is occurring because if you refreshed a page we send a new request

04:17.340 --> 04:23.130
to the server and does HTP server which we ran doesn't know this route.

04:23.130 --> 04:28.590
The routes are stored in the view rowdier in our client application which never gets a chance to run

04:28.590 --> 04:31.710
if we refreshed the page and the several blocks that.

04:31.710 --> 04:36.870
So what we need to do and what you need to do when you deploy a single page application you need to

04:36.870 --> 04:41.370
ensure that you set your server up to always return the index.

04:41.370 --> 04:48.570
H team El-Fadl which starts your single page map to always serve that file in case of service side for

04:48.600 --> 04:50.040
all for errors.

04:50.280 --> 04:57.240
That then allows you to take over the view router to parse the request and rerun the page accordingly.

04:57.240 --> 04:59.890
This is important and does what you have to do.

04:59.910 --> 05:04.790
So two important takeaways for a single page application mode in the store.

05:04.800 --> 05:10.890
Don't use next's are really in it use created and mounted instead to load data for pages.

05:10.890 --> 05:16.220
Still feel free to commit the data you load to the store but definitely don't use Nax are really in

05:16.220 --> 05:16.810
it.

05:17.010 --> 05:21.480
There is no next client in that alternative unfortunately.

05:21.510 --> 05:27.580
Additionally make sure that your server is configured to all these returned the next H.T. mail file.

05:27.750 --> 05:33.480
And with that you can deploy this as a single page application where you don't take advantage of the

05:33.480 --> 05:39.930
server side pre rendering but you still take advantage of the easier and more fun development through

05:39.930 --> 05:42.120
the pages folder and so on.
