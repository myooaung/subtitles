WEBVTT

00:02.200 --> 00:08.890
So we had a look at how we can integrate middleware into our next project and how we can actually do

00:08.890 --> 00:12.860
more on this server than just pre-rendered pages.

00:12.880 --> 00:19.300
Now if you know that you're going to write a lot of source code and you want to use a different approach

00:19.300 --> 00:24.610
than the one shown in the last video where you have to register your middleware and that server middleware

00:24.670 --> 00:28.420
array you can also start with a different starting template.

00:28.450 --> 00:31.170
So let's use create next app again.

00:31.280 --> 00:38.170
Let's create a new folder server side focus for example and you can name this whatever you want.

00:38.540 --> 00:41.270
Confirm the name and the description it gives you.

00:42.930 --> 00:47.410
And now you can choose a different template like for example of one using Express.

00:47.490 --> 00:48.970
So let's use that.

00:48.990 --> 00:50.700
Still no UI framework.

00:50.700 --> 00:52.750
Let's pick universal mode still.

00:52.850 --> 00:54.360
No X has modules.

00:54.390 --> 00:55.370
No iest Lind.

00:55.380 --> 00:56.580
My name is fine.

00:56.940 --> 01:02.400
And now this will give you a different starting template which still uses the pages folder and so on

01:02.670 --> 01:06.210
but which also has a deeper integration with Express.

01:06.210 --> 01:07.540
Right from the start.

01:07.830 --> 01:10.130
Let's take a look once this is finished.

01:10.350 --> 01:15.390
So the installation did finish now as you can see we still got a page this folder and this new project

01:15.450 --> 01:17.560
middleware folder that's all the same.

01:17.700 --> 01:20.860
But we also get a new server Fuller.

01:21.000 --> 01:26.190
And if you look at the package Doug chase and fall you'll see that the scripts are different scripts

01:26.210 --> 01:26.860
now.

01:27.030 --> 01:34.160
They now actually start an express server node express server living in that server in next fall.

01:34.350 --> 01:39.750
And here you start with a complete express app that also use this next.

01:39.780 --> 01:45.120
But that might look more familiar to you if you are a node express developer here.

01:45.150 --> 01:52.440
It's really clear to see that next is just one step and the entire process where we render pages with

01:52.440 --> 01:54.670
it and use it as a middleware Darfur.

01:54.900 --> 02:00.500
But prior to doing this we can register average middle whereas we can set up our own API.

02:00.580 --> 02:03.270
Still we can of course work with multiple files.

02:03.300 --> 02:05.430
We can set up the Express router.

02:05.550 --> 02:07.470
This all works.

02:07.470 --> 02:13.680
The important thing I still want to highlight though is you will still use next to pre-rendered your

02:13.680 --> 02:22.100
pages on the server you still have a single page application on the server and then next NDU is not

02:22.100 --> 02:27.980
your templating engine for your express application where you have routes and then return different

02:27.980 --> 02:34.720
views for the different routes your routes are not registered on the server in the Express router.

02:34.910 --> 02:38.490
This is all handled by next and it should be dessous the roll.

02:38.510 --> 02:45.170
Next place it pre-rendered pages it is where of the view routes it handles everything about that.

02:45.170 --> 02:51.410
You can now use Express to build your own API to which you still connect with Ajax requests behind the

02:51.410 --> 02:56.810
scenes this is really important to keep in mind this is always the separation you have.

02:56.900 --> 03:03.370
You still create the pre-rendered single page map but you can write your own API with your own suicide

03:03.380 --> 03:07.450
code which you can connect to from your client side application.
