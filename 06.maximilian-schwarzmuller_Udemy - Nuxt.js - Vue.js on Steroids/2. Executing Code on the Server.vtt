WEBVTT

00:02.070 --> 00:08.040
Let's dive into our project again we have next in it for example and I mention that this is executed

00:08.100 --> 00:08.890
on the server.

00:08.910 --> 00:16.740
If we load the page for the first time now since it runs on the server why don't we just put our code

00:16.770 --> 00:22.830
to access a database in here just as we do it in a node express app for example.

00:23.340 --> 00:29.700
Well because next kind of runs in its own shell you could say Now that being said you can't execute

00:29.700 --> 00:37.680
service code in certain limitations here and you can actually integrate next into node express or other

00:37.680 --> 00:38.880
frameworks app.

00:38.910 --> 00:45.270
And I have a whole module later in the course but you can treat the next server init method as well

00:45.270 --> 00:51.710
as the async data method and the fetch method as special methods where you don't reach out to database.

00:51.710 --> 00:52.610
Why.

00:52.680 --> 00:55.060
Because you can't rely on them running on the server.

00:55.110 --> 00:57.430
They might run on the client right.

00:57.450 --> 00:59.960
You'd learn that they run on the client if you click around.

01:00.180 --> 01:03.230
They just run the server for the initial load.

01:03.240 --> 01:08.850
So instead what we want to do here is we want to put our code to your debt should get us the data.

01:08.940 --> 01:14.260
Now we can still check if we are on the server by checking if process client.

01:14.460 --> 01:18.170
If that is not true the method executes on the server.

01:18.260 --> 01:21.550
This is a special environment variable that is provided automatically.

01:21.810 --> 01:26.250
So if this is not true then we know we're running on the server.

01:26.340 --> 01:33.690
So here we could safely run code that reaches out to some database and gets us data from there.

01:33.850 --> 01:37.190
Still this is not really how it would work.

01:37.230 --> 01:42.260
We shouldn't put server side code in next to it or async data.

01:42.570 --> 01:49.080
We will receive something special here though the context here holds the actual request that reaches

01:49.290 --> 01:51.020
this service code.

01:51.330 --> 01:56.800
Let me simply console log context request here.

01:56.940 --> 02:02.850
We should see two things that this only gets executed once if we reload the page and not if we click

02:02.850 --> 02:05.650
around and that we get some data in there.

02:05.850 --> 02:10.380
So let's go back to the application and reload page any page.

02:10.380 --> 02:12.270
Doesn't matter which one it is.

02:12.270 --> 02:18.830
When we do this we can increase the size of the terminal and we get a huge object here.

02:18.870 --> 02:22.810
This actually is a default request object as we would have it in Express.

02:22.850 --> 02:28.010
Yes apps because next your behind the scenes uses the same middleware.

02:28.030 --> 02:34.080
So to say here we can do whatever we can do with normal request.

02:34.080 --> 02:42.570
For example we could access the session if we managed sessions here does something I will dive into

02:42.570 --> 02:48.790
later in a separate module where I assume that we have not just integrated into our main express node

02:48.790 --> 02:56.010
server but maybe we have a separate backend because maybe we just want to create our next app as a single

02:56.010 --> 03:02.460
page app or because we simply have a micro services approach where we have different backgrounds for

03:02.460 --> 03:04.400
different kind of data.

03:04.470 --> 03:06.450
Maybe we even have different clients.

03:06.540 --> 03:08.840
A mobile app and our next app.

03:08.940 --> 03:14.670
So we need a separate server a separate backend and I want to focus on this approach first before a

03:14.670 --> 03:16.100
later in that module.

03:16.110 --> 03:21.980
I already mentioned dive into how you can integrate an X into a node express more closely.

03:22.380 --> 03:28.320
So this is what we'll have a look at in this Monch to will see how we can actually reach out to some

03:28.430 --> 03:34.050
Aberg back and some over restful API from within our next app.
