WEBVTT

00:02.080 --> 00:10.250
In the last lecture we added some dynamic yet still static data tudy index of you follow the pages folder.

00:10.270 --> 00:13.150
Now at this point here this is working.

00:13.150 --> 00:17.920
But of course in a real app we typically load debt data from some server.

00:17.950 --> 00:24.250
So if we render a list of posts we fetch that from a database and we need to connect to that database

00:24.250 --> 00:28.580
or to a restful API that dust is before we can display the posts.

00:28.660 --> 00:34.090
And that's still the case for a nextstep because as I mentioned earlier next is not a suicide framework

00:34.090 --> 00:35.330
like Express.

00:35.380 --> 00:42.700
You don't really have code in next where you would connect to a database and do that but there are some

00:42.700 --> 00:46.800
ways of running some code on the server instead of the client.

00:47.050 --> 00:48.640
Which is what's happening right now.

00:48.640 --> 00:52.810
Right now everything runs on the client here but we can't change that.

00:52.810 --> 00:58.790
Now in a normal app we would fetch data in deteriorated lifecycle.

00:58.810 --> 01:05.680
For example we can add it by simply adding this method to our instance object to our component instance

01:05.680 --> 01:06.510
object.

01:06.730 --> 01:11.750
And now let's say loaded posts is actually an empty post an empty array initially.

01:11.760 --> 01:15.430
It's like cut out the posts here and then create it.

01:15.430 --> 01:20.350
Let's simulate did we reach out to a server for that all use a timer.

01:20.350 --> 01:23.590
Now of course this is just a timer because I want to simulate that.

01:23.590 --> 01:24.840
We reach out to a server.

01:24.850 --> 01:26.860
So there is no deeper sense to this.

01:27.100 --> 01:30.990
So let's say after one and a half seconds our results are there.

01:31.150 --> 01:34.550
And hence this arrow function gets executed.

01:34.600 --> 01:37.760
So that's a normal set time or function here.

01:37.780 --> 01:44.290
We could then reach out to loaded posts and assign an array which holds the two posts we previously

01:44.290 --> 01:46.100
directly assigned and data.

01:46.240 --> 01:52.150
If we saved this and we reload this page you'll see it loads instantly and the posts are dead after

01:52.150 --> 01:55.090
two seconds so we're one and a half seconds.

01:55.090 --> 01:57.940
This works but it has one big downside.

01:57.940 --> 02:03.310
The posts get loaded on the client and does this really important.

02:03.310 --> 02:06.510
This is now not happening on the server.

02:06.520 --> 02:12.160
We get the page immediately as you can see but the fact that the bottom part is empty but the top part

02:12.160 --> 02:14.710
is populated and there offer it's loaded.

02:14.800 --> 02:20.740
After this initial page has been rendered to the user this might be fine because we could show a spinner

02:20.830 --> 02:23.200
instead of that white empty area.

02:23.200 --> 02:28.750
The problem is if we're talking about search engine optimization we're not fixing the issue of the crawl

02:28.750 --> 02:33.430
or not seeing anything because the crawler only looks at the initial page.

02:33.550 --> 02:38.650
And if we inspect the source code of that initial page we see that we get nothing on the page.

02:38.680 --> 02:41.890
It would be this empty section here.

02:41.890 --> 02:48.040
So that of course is not that great would it be better if we could actually fetched data on the server

02:48.190 --> 02:55.090
and wait for it to be fetched before we sent back that then finished page to the client that created

02:55.110 --> 02:55.810
lifecycle.

02:55.840 --> 02:57.970
Clearly doesn't work as we saw.

02:58.120 --> 02:59.810
So what else does work.

02:59.950 --> 03:07.750
Well there is a special property a special method actually we can use in page components and that is

03:07.750 --> 03:15.700
important only in components of the pages folder that next will execute on the server and that's the

03:16.670 --> 03:18.750
async data method.

03:19.060 --> 03:22.360
Now it's pretty much the same as the normal data method.

03:22.360 --> 03:29.230
This one is in the end has to return an object which will be the data of this component and has the

03:29.230 --> 03:31.490
data you can use in the template but.

03:31.510 --> 03:36.350
And that is important async data is executed on the server.

03:36.430 --> 03:43.780
And if we execute that asynchronous task there like waiting for a timer or more realistic reaching out

03:43.810 --> 03:51.670
to a back end to a server then it will wait for this task to finish before it returns the page to the

03:51.670 --> 03:52.620
client.

03:52.720 --> 03:58.740
Hence we will get a pre-rendered and complete page back to the client.

03:58.840 --> 04:00.870
Now debt is really important.

04:00.910 --> 04:04.750
Next we'll only call this method in pages though.

04:04.870 --> 04:10.480
So if you add it in a component in one of your components like in a layout or in the components folder

04:10.630 --> 04:14.640
this will simply not be executed and it will not work correctly.

04:14.650 --> 04:20.410
You also shouldn't use normal data then to override something you plan on returning here because this

04:20.410 --> 04:22.350
will execute on the client.

04:22.420 --> 04:25.300
So it would override whatever you return here.

04:25.390 --> 04:28.170
And you could get unwanted effects.

04:28.180 --> 04:37.600
So let me comment out data here and now let's simply put our time or code into async data.

04:37.770 --> 04:44.430
The problem just is here we need to return a javascript object so let's temporarily replace this.

04:44.430 --> 04:49.010
And let's now make sure that we don't just set this loaded post equal to that.

04:49.050 --> 04:56.640
This won't work but that instead we return a javascript object where we have a loaded post property

04:56.910 --> 05:04.920
which value is Desirae and hence we need to close this object offered to closing square brackets.

05:04.920 --> 05:08.660
Now one important note that this keyword.

05:08.810 --> 05:17.700
This does not work as expected an async data because azing data runs but for this component is actually

05:17.700 --> 05:18.320
created.

05:18.330 --> 05:20.160
That's the idea behind it.

05:20.160 --> 05:28.200
So if you try to access a method or a field from the normal data or anything like that this will not

05:28.200 --> 05:34.440
give you the view component instance you won't be able to access your methods and so on because the

05:34.440 --> 05:40.840
component has not been created yet this is really important that this keyword does not work like this

05:40.840 --> 05:41.280
here.

05:41.370 --> 05:47.380
You can't access your finished view component instance because it is not finished yet.

05:47.400 --> 05:53.220
So what we're doing now is we're executing this time old function and we're returning a javascript object

05:53.310 --> 05:56.390
which holds our loaded posts.

05:56.400 --> 06:00.130
Now let's save this and let's execute this again.

06:01.320 --> 06:03.420
And we get an error.

06:03.420 --> 06:05.060
Now why is that.

06:06.430 --> 06:07.690
The reason is simple.

06:07.780 --> 06:17.050
We need to give async data an idea about when we're done otherwise if it doesn't get that idea it will

06:17.050 --> 06:20.470
immediately just return the finished page.

06:20.470 --> 06:24.380
Now how do we get this idea to async data.

06:24.880 --> 06:34.090
One solution is to use a promise you instantly have to return a promise year a new promise maybe into

06:34.090 --> 06:36.160
which you'll wrap your async code.

06:36.460 --> 06:43.870
And if you're using a library like ex-U.S. which we will use later for making HTP requests that will

06:43.870 --> 06:47.430
automatically give you promises which you then can simply return.

06:47.500 --> 06:53.050
Because if you return a promise then async data will take that promise and kind of listen to it to be

06:53.050 --> 06:56.450
resolved and rendered a page once that is resolved.

06:56.470 --> 07:02.890
The alternative is that you use a Colback to async data you actually get an argument the context will

07:02.920 --> 07:08.830
have a look at this in the second and the second argument you can get is a callback method you can execute

07:09.790 --> 07:10.850
you execute it.

07:10.900 --> 07:17.870
Once you're done the execution of that method then also tells the async data method that you're done.

07:18.070 --> 07:25.900
So what you can do is you can go into set timeout and here wherever turn these posts instead of returning

07:25.900 --> 07:34.510
dead I execute a callback method and then that Colback method I either pass an error occurred say if

07:34.510 --> 07:42.490
you want to handle an error return by your HTP client or if you don't get an error you pass null and

07:42.580 --> 07:49.060
the second argument now actually is the javascript argument that will be your data.

07:49.060 --> 07:56.750
Once you're done so it will become your data you can access from your client.

07:56.750 --> 08:02.410
So with this restructured we're calling to call back inside the said time load function and call back

08:02.420 --> 08:05.580
I'm passing a javascript object with the loaded post.

08:05.640 --> 08:08.720
S d answer or the second argument.

08:08.810 --> 08:14.620
And this will therefore become the data we can access from within our template or anywhere else in this

08:14.720 --> 08:15.630
view component.

08:15.710 --> 08:17.770
Once it has been rendered.

08:17.840 --> 08:20.420
Now let's save this file and see this in action.

08:20.450 --> 08:25.870
If I reload this page let's click the reload button here.

08:26.010 --> 08:29.130
It actually takes two seconds or one and a half seconds.

08:29.130 --> 08:29.830
Here let's see.

08:29.850 --> 08:37.590
It takes a bit but deaded reloads because now it waits for the async code to finish on the server and

08:37.590 --> 08:42.780
then gives us the finished page and we can check the spine impacting the page source code.

08:42.780 --> 08:49.980
Now here at the bottom we actually see our posts data as part of the source code because we get the

08:49.980 --> 08:57.870
finished page sent back from the server and not as before just the page where we need to load the data

08:57.870 --> 08:59.520
asynchronously in the client.

08:59.520 --> 09:05.520
Now this happens on the server and this is way more search engine friendly because now the crawlers

09:05.540 --> 09:06.690
sees what you see.
