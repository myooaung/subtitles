WEBVTT

00:02.200 --> 00:07.410
In our next project in the next conflict there's a special key we can add.

00:07.660 --> 00:10.170
And that's the server middleware.

00:10.180 --> 00:15.520
No this is not to be confused with the average middle where we have a middleware folder does server

00:15.520 --> 00:22.870
middleware is a collection of node and express compatible middleware is that will be executed prior

00:22.870 --> 00:25.350
to the next rendering process.

00:25.360 --> 00:35.000
So here we can register any express middleware that we want to run first including our own one and that

00:35.000 --> 00:39.590
is something I quickly want to show you for that or create a new folder.

00:39.650 --> 00:48.370
The let's say API folder in which I'll create a new fall index J.S. in this file we can write our own

00:48.520 --> 00:54.710
Express code and forget all first of all install express or quit the development server and run NPM

00:54.730 --> 01:03.040
install dash dash save express we'll install the Express framework with that installed we can work on

01:03.040 --> 01:09.580
that API file and all first of all import express with denote required syntax.

01:09.610 --> 01:15.610
We have to use that syntax instead of the import syntax you know from the front end because this will

01:15.610 --> 01:20.810
now really be executed by node in node only understands this syntax.

01:21.190 --> 01:26.000
I don't want to use the express routers all execute express router like this.

01:26.110 --> 01:32.440
And if this is all new to you I strongly recommend diving into Xpress coords into a node express course

01:32.440 --> 01:36.500
if you want to learn more about that because in discours I won't focus on that.

01:36.610 --> 01:43.440
It's really just a side thing something I want to mention not the core idea behind next.

01:43.660 --> 01:50.730
So this is our own route set up and what we can do now is we can create our own route.

01:50.760 --> 01:57.160
Here let's say a post wrote that post route could be track data something like Det.

01:57.160 --> 02:01.400
Let's say one to write our own analytics data to our own database.

02:01.720 --> 02:07.210
Does a default express route where we get the request and response and where we didn't and that's the

02:07.210 --> 02:08.180
cool thing.

02:08.260 --> 02:10.600
Can execute any server side code.

02:10.630 --> 02:16.020
I'll show you how to implement this such that it gets loaded prior to your next rendering process.

02:16.120 --> 02:21.670
But then it's really decoupled from that and therefore here you could import mongooses and connect to

02:21.670 --> 02:24.770
your own database and store data in your own database.

02:24.820 --> 02:27.970
Here you can run any code you want.

02:27.970 --> 02:35.380
You can even implement your own API with all kinds of different back and you or else you can send data

02:35.410 --> 02:41.230
to you can send requests to and your own authentication and at the end of this module you'll also find

02:41.230 --> 02:47.590
a link to an example where a complete session based off indication is implemented with that approach.

02:47.620 --> 02:48.860
But back to this.

02:49.030 --> 02:57.680
Here we have this post router's setting up slash track data and then there I just want to console log

02:59.180 --> 03:04.780
stored data here and I want to store the data which I get from the request body.

03:04.910 --> 03:10.480
Let's say we expect a data field there thereafter express style.

03:10.490 --> 03:16.490
I'll send a response with status code 200 and maybe adjacent object where I have a message which is

03:16.700 --> 03:17.600
success.

03:18.640 --> 03:22.710
Know for this to work I actually need to do two things.

03:22.720 --> 03:28.780
The first is I need to install a body parts or middleware that gives us access to request body just

03:28.780 --> 03:30.940
as we need to do it in a normal Express.

03:31.010 --> 03:36.610
So I'll run NPM install dash dash save body dash parser.

03:36.610 --> 03:42.690
This is now an additional express middleware which gets installed which I will add in my next conflict

03:42.730 --> 03:44.400
server middleware IRET.

03:44.440 --> 03:48.060
So to the array of malwares that should be executed for data.

03:48.070 --> 03:49.790
First of all need to install it here.

03:49.780 --> 03:55.190
So install body parser by requiring body parser.

03:55.300 --> 03:59.540
And that's important in this next config file.

03:59.560 --> 04:07.340
You also need to use that required import syntax because this will be executed by node 2.

04:07.360 --> 04:14.020
Now what the body parser installed and imported we can go down to that server middleware array and the

04:14.020 --> 04:17.750
middleware is listed here will be executed from top to bottom.

04:17.770 --> 04:25.540
So here we can simply add body parser Jason to parse in-coming Jason bodies and add them to that body

04:25.540 --> 04:28.730
field on the incoming request object.

04:29.290 --> 04:36.100
There's second thing I need to do is I need to transform my incoming request data because it has the

04:36.100 --> 04:38.130
wrong format for this.

04:38.140 --> 04:40.870
You can find a little snippet attached to this video.

04:40.930 --> 04:46.900
This one and this will just instantiate an express app and then take the incoming request and response

04:46.900 --> 04:54.070
data and map it to the API provided by express so that we can you see exact same syntax as Express provides

04:54.070 --> 04:54.280
it.

04:54.310 --> 05:01.390
So to address stators and Jason works correctly now that everything is set up here we now need to export

05:01.420 --> 05:08.060
our route and since we're in a node J.S. environment we need to Dudas with Module exports and sell it

05:08.080 --> 05:14.650
equal to a javascript object where we actually define a payoff under which we can reach the route's

05:14.660 --> 05:15.900
of defined here.

05:16.150 --> 05:18.160
And that could be a slash API.

05:18.370 --> 05:25.750
So Tractatus then reached by sending a request to slash API slash track data and the handler should

05:25.750 --> 05:30.310
be our router with a lowercase are.

05:30.330 --> 05:35.320
So this router with that we export to functionality from that file.

05:35.490 --> 05:39.760
And now we just have to add this export that middleware which it is in the end.

05:39.840 --> 05:46.570
So that router with our register routes we have to add it to our array of malwares we execute.

05:46.650 --> 05:53.430
So below the body parser I'll add a string with a pop to the middle where I want to add and that simply

05:53.430 --> 06:01.010
is till the slash API the slash index can be omitted because it will look for an index file automatically.

06:01.050 --> 06:06.140
This will now hook in our own routes our own middleware server side middleware.

06:06.180 --> 06:13.230
I should say now we can restart NPM run death and in the next lecture I will show you how to use that

06:13.260 --> 06:16.500
middleware from within your next application.
