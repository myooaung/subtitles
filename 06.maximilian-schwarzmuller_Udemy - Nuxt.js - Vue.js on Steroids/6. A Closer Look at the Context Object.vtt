WEBVTT

00:02.080 --> 00:06.870
In the last lecture we found out that async data runs in different environments.

00:06.990 --> 00:13.940
Let's now simply lock that context object to get a deeper insight into what's inside of that.

00:14.010 --> 00:18.990
Now if we're dead I simply console log context and nobbler reload the main page.

00:19.030 --> 00:24.240
Now as expected we don't see the output here but on the server because I reloaded.

00:24.660 --> 00:29.760
And here we actually actually see a lot of data being output.

00:29.760 --> 00:35.000
We see that the Context object has properties like its server is Kalighat which allows to find out in

00:35.010 --> 00:38.320
which environment we're running if we're in development mode.

00:38.430 --> 00:44.670
And a lot of other things now to make this a bit more convenient to read let's not reload the page and

00:44.670 --> 00:47.560
go to some other page instead and navigate back.

00:47.580 --> 00:50.530
Now it's of course locked in the client.

00:50.790 --> 00:56.660
And here we can conveniently check what's inside this context object.

00:56.700 --> 00:59.200
Now as you can see we've got a bunch of different things.

00:59.250 --> 01:02.130
We got the nth property which holds environment variables.

01:02.130 --> 01:08.550
If we had injected any we have to is client property which indicates whether we are on the Clyde or

01:08.550 --> 01:10.590
not though as you can see.

01:10.580 --> 01:14.000
You should not rely on this anymore in the latest version of next.

01:14.040 --> 01:18.430
You should use Prozess collided stat which uses an environment variable.

01:18.750 --> 01:25.950
But what we also see is for example that we can access parents so any route parents who might have business

01:25.960 --> 01:32.400
the next router because if we ever need roud parents we can't use this route.

01:32.400 --> 01:39.090
Remember I mentioned that that this is not a whale of a will because this does run before the component

01:39.090 --> 01:40.710
is created.

01:40.710 --> 01:46.240
Therefore here with parents we get that information from next which is able to parse.

01:46.320 --> 01:49.220
You or l the same for query parameters.

01:49.320 --> 01:55.320
We also got a redirect function in case you want to simply redirect on that or in that method we can

01:55.320 --> 01:58.600
execute it and passed you are EHLO for a new route.

01:59.040 --> 02:02.820
We get access to the store and it will come back to us soon.

02:02.820 --> 02:07.650
But here we get access to debt we can access more detailed route data if we want it.

02:07.710 --> 02:11.280
Perens is just a convenient property which gives us direct access.

02:11.280 --> 02:18.490
We could all access context route parents and we also get general app information here.

02:19.420 --> 02:22.180
Now that is super useful.

02:22.210 --> 02:27.700
You won't use all of these properties most of the time but you get a lot of insights into the current

02:27.700 --> 02:34.000
state of your app with the help of the context object and especially being able to parse the route parameters

02:34.260 --> 02:42.100
is super useful as we can see in the next lecture when we also want to load that data for a single post

02:42.220 --> 02:42.940
dynamically.
