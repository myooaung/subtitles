WEBVTT

00:02.120 --> 00:06.110
We get code to fetch data and initialize our store with it.

00:06.140 --> 00:10.450
However if we wisit a single post we're still using async data.

00:10.700 --> 00:18.380
The idea behind that is that DB hosts in our store might not include all the posts we have because maybe

00:18.560 --> 00:24.440
we have that many posts that we don't fetch him all initially but we just fetch a slice of posts which

00:24.440 --> 00:29.510
we actually want to show in a list if the user enters a specific ID into your Eldo.

00:29.610 --> 00:34.080
We want to be able to fetch all posts though that is what I want to implement now.

00:34.280 --> 00:42.440
So here I want to keep async data but I want to fetch that from firebase therefore I need access here

00:42.510 --> 00:47.300
to import access from actuals like this instead of our dummy sets.

00:47.310 --> 00:51.520
Timeout code here which I'll remove instead an async data.

00:51.710 --> 00:57.960
I want to return X just get again we have to return this and get gifts as a promise.

00:58.040 --> 01:03.420
We now should also remove the callback here so that Nax doesn't wait for data to be called.

01:03.440 --> 01:09.200
Now he's received some promise and since we returned promise he will wait for this to finish the code

01:09.200 --> 01:14.750
for the promise now is pretty close to what we had here when we fetched all posts.

01:14.750 --> 01:18.430
The differences that we fetch when specific post though.

01:18.620 --> 01:25.700
So what we do is if we have a look at our firebase database we fetch something like this a specific

01:25.700 --> 01:30.500
your L with a specific idea encoded in it.

01:30.500 --> 01:33.050
Of course we can't hard code the ID.

01:33.170 --> 01:34.550
That won't work.

01:34.550 --> 01:37.560
That has to be something we get from the route parameter.

01:37.820 --> 01:46.060
So we should access context parents ID here to get the idea to use entered into else L and then since

01:46.060 --> 01:48.520
it's firebase we need to add doc Jason.

01:48.560 --> 01:50.730
Again this is just a firebase thing.

01:50.960 --> 01:54.920
Now we're taking the ID the user entered into account.

01:54.920 --> 02:02.270
We dentals a should provide then in a catch block if we catch an error or we should simply use context

02:02.360 --> 02:08.900
error and call that method to Schoeni or page in the then block we get back a response though which

02:08.900 --> 02:13.490
has a data field which contains the data for the post we fetched.

02:13.490 --> 02:18.070
Now this data can be used in our component here.

02:18.110 --> 02:23.780
I want to return and keep in mind since we're an async data this will now be merged with your normal

02:23.780 --> 02:25.100
component data.

02:25.340 --> 02:31.370
Here I want to return my loaded post so I will return a loaded post propertied

02:34.200 --> 02:37.710
which in the end should be my response data.

02:37.710 --> 02:40.800
Again data is really the data we're fetching.

02:40.860 --> 02:43.750
For that you are l and data will have.

02:43.750 --> 02:48.650
Def format offer content preview text thumbnail and title.

02:48.660 --> 02:54.990
The problem is here we also need the updated date so that is something that's missing to make sure it's

02:54.990 --> 02:55.980
not missing.

02:56.130 --> 02:58.970
We will have to store it in your posts too.

02:59.250 --> 03:05.860
So let's go back to the new post index of your file and when we submit a new post with the post data

03:05.880 --> 03:12.990
here we actually want to have the updated date as part of it so we can go to the admin post form component

03:12.990 --> 03:17.040
again and here when we send this new post.

03:17.050 --> 03:21.640
This edited post didn't actually include the date the updated date.

03:22.020 --> 03:29.040
So back in the new post component here where we received that data and where we submitted.

03:29.040 --> 03:34.770
Let's instead submit a new object where we use to spread operator to pull out all the properties of

03:34.770 --> 03:39.030
the post data and we add a new one the updated date.

03:39.030 --> 03:44.780
So essentially the field I want to retrieve your updated date.

03:44.810 --> 03:51.950
This one is now added to this object we send to the server and here I just use new date to use the current

03:51.950 --> 03:52.700
date.

03:52.910 --> 03:54.570
So this is not a new payload.

03:54.610 --> 03:55.210
Whoops.

03:55.220 --> 03:59.990
The new payload that is sent to the server it contains the submitted post data.

04:00.000 --> 04:03.890
This is coming from the form and adds this one.

04:04.010 --> 04:09.680
Now with that to see that all in action we should go back to our application.

04:09.800 --> 04:16.400
Let's remove that post for now here because it doesn't include the updated date field and let's create

04:16.400 --> 04:17.920
a new post instead.

04:18.230 --> 04:19.350
So back here.

04:19.370 --> 04:20.970
Let's go to the admin section.

04:20.990 --> 04:21.920
Yeah we get an error.

04:21.950 --> 04:25.120
We'll fix this and let's create a new post again.

04:25.130 --> 04:38.420
So Max a new post again let's enter the a link does is hopefully the final post.

04:39.960 --> 04:42.430
Does it work is our click bait title.

04:42.850 --> 04:44.400
Let's say it's safe here.

04:44.620 --> 04:48.530
We get back a success response code if we look into the database.

04:48.550 --> 04:56.500
Now we get the updated date here and now with that if we go back to our next application to the main

04:56.500 --> 05:02.230
page and we load a single post disease.

05:02.270 --> 05:07.380
The Post we're fetching from the back and so this is now working as it should.
