WEBVTT

00:02.180 --> 00:04.610
OK so we had a look at plug ins.

00:04.670 --> 00:12.710
Now what's more Joels sounds similar right but is actually something different modules allows you to

00:12.710 --> 00:19.910
add convenience features to your next app you could say and modules can be created by anyone in the

00:19.910 --> 00:20.930
community.

00:20.930 --> 00:25.540
Now I want to dive into the creation of modules which still is a bit more advanced.

00:25.790 --> 00:32.090
You can find instructions on this on the official next pages but you can easily add modules created

00:32.090 --> 00:32.930
by arbors.

00:32.930 --> 00:33.960
Q Are at.

00:34.460 --> 00:41.240
You can simply google for next modules to find this next community slash modules repository on this

00:41.240 --> 00:43.510
repository you find a link of some modules.

00:43.670 --> 00:46.740
But I recommend going to awesome next to this link here.

00:47.000 --> 00:50.400
This will take you to a far more complete list of modules.

00:50.420 --> 00:54.860
Now let's have a look at what modules we could use and how we add them.

00:54.860 --> 01:02.270
For example there's DPW a module which quickly turns your next step into a P.W. a by automatically generating

01:02.270 --> 01:07.770
a service worker for you which catches your automatically generated output files.

01:07.770 --> 01:10.150
Also interesting to see ex-U.S. module.

01:10.250 --> 01:13.420
We're already using axioms in our project.

01:13.580 --> 01:19.850
But here we can add such a module to get a deeper integration and some convenience features all the

01:19.850 --> 01:26.330
details can be found on that Marshall's page but let's not simply install it to see how we use it to

01:26.330 --> 01:26.870
install it.

01:26.870 --> 01:33.870
I'll quit the development server and then run NPM install dash dash save and now the command is at.

01:33.900 --> 01:37.730
Next James slash X-ers as you can see on that page.

01:37.760 --> 01:39.360
So let's execute this.

01:39.400 --> 01:43.940
This will now download install this third party package and that's important.

01:43.940 --> 01:48.040
These are for party packages not part of the official next package.

01:48.350 --> 01:54.960
With this installed on rerun NPM run death and now we can add this module to them modules array.

01:55.100 --> 02:01.240
As pointed out here on the Get her page you just added as a string to the modules array.

02:01.340 --> 02:06.980
And that's just a package name you just installed at next jast slash axis.

02:07.280 --> 02:12.860
With that added You also can add a special config item to the next config which previously wouldn't

02:12.860 --> 02:14.520
have had any effect.

02:14.540 --> 02:16.160
The axiom config.

02:16.400 --> 02:20.790
Here you can configure it in the ways described on the official documentation.

02:20.810 --> 02:24.990
The most interesting thing for us here is to base your conflict.

02:25.190 --> 02:29.390
Yes we already did this with this environment variable and there's nothing wrong with that.

02:29.510 --> 02:34.300
But now you actually have two ways you can set base your l like this year.

02:34.460 --> 02:38.990
So just as explained here WIPs should be all capital case.

02:39.020 --> 02:41.170
Your L character is here though.

02:41.420 --> 02:46.340
And now we could use the same logic we used here in the environment variable to ever use and check the

02:46.340 --> 02:49.940
base Eurail or use a string.

02:49.940 --> 02:56.780
Now how do we use this axiom module though it does not replace our default ex-U.S. imports we have in

02:56.780 --> 02:58.790
our app like here.

03:00.630 --> 03:02.620
In our next server in it ection.

03:02.880 --> 03:08.510
Instead here in the store you could use it anywhere by accessing this dollar sign.

03:08.500 --> 03:14.320
X yes except for the next server in that action which is a special action since it runs on the server.

03:14.550 --> 03:19.820
There you can access context dot app dot $ assign x yes.

03:19.830 --> 03:25.370
So using the second argument X-ists is injected into your view app.

03:25.500 --> 03:26.210
Therefore.

03:26.400 --> 03:28.430
And just like you can access.

03:28.650 --> 03:29.700
Dollar Sign router.

03:29.730 --> 03:34.890
There For example you can now access poller sign ex-U.S. and you can find the full usage instructions

03:35.160 --> 03:38.430
on the repository of that module.

03:38.430 --> 03:44.200
Now this has a special method dollar sign get and dollar sign post and so on.

03:44.250 --> 03:46.820
Which essentially wraps the methods here.

03:46.830 --> 03:52.950
We can now get rid of this environment variable though because we set a base your L4 the entire package

03:53.580 --> 03:58.130
and one of the advantages that we can get rid of the import here because it's already injected.

03:58.200 --> 04:01.320
So these are already some of the convenience features I mentioned.

04:01.710 --> 04:07.810
We can now of course also use it in our components like Indie's single post component here.

04:07.860 --> 04:13.690
We can also get rid of the import here and use the injected x' by returning this dollar sign X-ists

04:13.830 --> 04:19.740
dollar sign get and get rid of the environment variable because we set the base your L on the entire

04:19.880 --> 04:24.730
exile's package the same for a single post in the admin area here.

04:24.750 --> 04:28.520
We also don't need to import x years from there.

04:28.650 --> 04:38.070
Instead we get this dollar sign X's and Dollar Sign get and for storing new posts or edited posts we

04:38.070 --> 04:45.060
go back to the store where we have our actions here we can access this dollar sign dollar sign post

04:45.450 --> 04:50.110
and the same for posting this dollars and X is dollar sign put.

04:50.130 --> 04:52.460
And now we're using that module everywhere.

04:52.590 --> 04:59.050
Modules simply adds utility functionality to our app with EDID everywhere.

04:59.090 --> 05:07.800
We can still trout if our application works and I get an error because the get in the index Id fall.

05:07.890 --> 05:15.120
You would normally use this STOLER site X-ists in your pages and your components but everywhere besides

05:15.170 --> 05:19.550
async data here does runs on the server end just like nocked server in it.

05:19.550 --> 05:25.990
Therefore this is not available on the next component or next instance which is not yet available but

05:26.010 --> 05:29.120
instead on context app.

05:29.390 --> 05:33.440
The same is true for the admin post area here in async data.

05:33.440 --> 05:37.180
We access context app x yes this was a tiny mistake.

05:37.190 --> 05:43.260
We should use that one important thing we need to adjust is X years.

05:43.320 --> 05:51.120
Does inject that object conveniently doesn't force us to access to data on the response it gives us

05:51.120 --> 05:55.320
just the data as a response so we don't need to extract it manually.

05:55.320 --> 05:58.950
You can of course still adjust your settings to get the full response if you need it.

05:59.040 --> 06:05.550
But here I happily take advantage of this so whenever you rely on the results data.

06:05.760 --> 06:14.050
Just use data like this don't use resoled data so all the occurrences for you use that you should really

06:14.050 --> 06:21.000
adjustors to directx as we're used to data you could back the X years module which wraps the main axes

06:21.010 --> 06:23.480
package simply extracts it for you.

06:23.740 --> 06:27.460
So it's all do that in the single post page here there.

06:27.490 --> 06:33.910
I just want to return data which now actually the argument I'm getting there and the same of course

06:34.140 --> 06:37.600
India's single post page for an admin here.

06:37.780 --> 06:43.360
We also directly get the data instead of their response so we can directly pull out properties from

06:43.360 --> 06:44.420
that data.

06:45.210 --> 06:48.610
With this if we reload everything should work.

06:48.630 --> 06:52.890
As for now here for a single post we get an error.

06:52.960 --> 06:57.790
This is coming from the x' module though so let's quickly adjust something into conflict.

06:57.790 --> 07:00.000
Let's set credentials to false.

07:00.010 --> 07:03.660
This will now not try to pass any cookie sends on to the back end.

07:03.790 --> 07:08.710
Which I read don't want to do here because we're having a restful API as a back in here and I don't

07:08.710 --> 07:10.970
need to pass any credentials to it.

07:11.170 --> 07:17.260
If we set credentials to falls here in the Access conflict in Anax called thick and I then go back to

07:17.260 --> 07:22.080
our main blog page and reload it and go back to a single post.

07:22.120 --> 07:25.140
Now this should work and then the admin area.

07:25.360 --> 07:32.260
We should also be able to Wakely create a little post here with some dummy content and that also seemed

07:32.260 --> 07:32.660
to work.

07:32.660 --> 07:35.920
The image of course isn't found because it was not a valid lake.

07:36.190 --> 07:38.790
So this is now all working.

07:38.800 --> 07:43.140
We now got a module added and this is what modules do in general.

07:43.270 --> 07:49.600
They add certain functionalities they add convenience features like having easier and pre-configured

07:49.630 --> 07:56.790
access access or adding these PWO a feature I mentioned to get a progressive Web app out of the box.

07:56.860 --> 08:03.640
Definitely explorer a list of modules and see if there is something you can use in your next next project.

08:03.640 --> 08:06.950
Modules can really make development even easier.
