WEBVTT

00:02.120 --> 00:05.370
Now we can't access local storage on the server.

00:05.390 --> 00:06.500
That's the issue.

00:06.860 --> 00:08.140
We need a solution.

00:08.160 --> 00:10.050
Who still gets the token though.

00:10.220 --> 00:14.600
And it just happens to be stored on the client so what can we do.

00:14.600 --> 00:16.450
The answer is cookies.

00:16.610 --> 00:24.770
We can use cookies because cookies are sent with HTP requests so we receive cookies when the page is

00:24.770 --> 00:27.460
refreshed it's received by the server.

00:27.830 --> 00:32.600
So what I will do is I will quit the development server and install a new helper package that helps

00:32.600 --> 00:35.330
us work with cookies from javascript.

00:35.330 --> 00:42.720
I'll use the save flag here on NPM install and then the package name is James dash cookie.

00:42.740 --> 00:48.240
This allows us to set and read cookies from our javascript code exactly what we need.

00:48.560 --> 00:51.940
So after it is finished I'll run NPM run death.

00:52.190 --> 01:01.060
And now the goal is to not just store the values in local storage but also stored it in a cookie.

01:01.120 --> 01:10.170
So when we set a token here in local storage I also want to store it in a cookie.

01:10.210 --> 01:17.530
I do this by him or doing something I am a word cookie from Julia's cookie.

01:17.560 --> 01:25.630
This is the package which gives me some utility functions and in any case user offered these local storage

01:25.630 --> 01:26.380
calls.

01:26.590 --> 01:35.300
I can now use cookie and set JWT to the values so to the token you can of course name is key whatever

01:35.310 --> 01:36.390
you want.

01:36.390 --> 01:48.390
And I'll also set my expiration date here to the same date I passed here to my local storage.

01:48.590 --> 01:53.250
We could of course stored as in some concept to reuse it but this is basically what I want to do.

01:53.300 --> 01:58.120
Now I'm storing data in both local storage as well as the cookie.

01:58.280 --> 02:03.610
The idea now is to get the user from the cookie instead of the local storage.

02:03.620 --> 02:12.830
If we're running in it off on the server for dad all expect to get a server payload here and if its

02:12.920 --> 02:19.340
server is true then I want to extract my token and so on differently.

02:19.580 --> 02:25.200
And if it's not true then I want to execute the code I currently have.

02:25.200 --> 02:27.300
So this code here.

02:27.510 --> 02:31.440
So let's cut it and put that into the Altes block here.

02:32.900 --> 02:35.200
Now we need to work on the server side code.

02:35.300 --> 02:42.410
And here I again want to use my cookie I need access to the request it's coming in though so I will

02:42.410 --> 02:48.500
instead accept the request here and only if request is set then I will execute this code here.

02:48.620 --> 02:52.520
So this will be a normal node express request object.

02:52.520 --> 03:00.360
And here I will first of all check if our request does not have a cookie header.

03:01.230 --> 03:04.990
If that's the case then I want to return because there's nothing I can do.

03:06.000 --> 03:13.330
As a next step I want to get my kitty cookie by reaching out to my headers and there to be a cookie.

03:13.410 --> 03:20.520
And now I just need to extract that by splitting the header by semi-colons just happens to be how the

03:20.520 --> 03:22.060
values are stored there.

03:22.320 --> 03:25.270
And that gives me an array of all the different keys.

03:25.290 --> 03:33.010
So to say and there I will simply execute find to find the key that starts with JWT.

03:33.090 --> 03:38.130
For that I need to trim it to remove excess whitespace and then we can use.

03:38.130 --> 03:44.880
Starts with JWT equals JWT equals.

03:44.880 --> 03:51.570
This is just how it will be stored in the cookie and JWT because we used to JWT for setting the token

03:51.570 --> 03:53.510
in the cookie.

03:53.520 --> 03:59.910
This is how we extract this chato UTI token or just chain w token from the cookie.

03:59.940 --> 04:01.980
Now if we fail to do so.

04:01.980 --> 04:11.750
So if we don't get a cookie here a token here then I also want to return otherwise I do have my tokens

04:11.760 --> 04:18.540
all stored in the token constant which I can get from that cookie by now splitting on the equal sign

04:18.540 --> 04:21.010
which still is part of the extract that value.

04:21.090 --> 04:27.060
And then getting the second element in the remaining tray which is the part after the equal sign.

04:27.330 --> 04:29.630
So this stands to token we store it.

04:30.090 --> 04:37.750
I also want to get my expiration date which is stored under expiration date in the cookie.

04:38.040 --> 04:42.780
And I can get it with the same logic I extract the token with.

04:43.020 --> 04:56.820
So I can basically copy that killed off extracting the cookie so JWT expiration date or just expiration

04:56.820 --> 04:58.720
date actually.

04:58.900 --> 05:03.700
This is nazo accessing that cookie splitting by the semi-colon.

05:03.730 --> 05:10.640
Now searching for the key we used which is expiration date when we set to cookie so searching for data

05:10.640 --> 05:11.890
key here.

05:12.820 --> 05:18.260
And now I can also create one long statement and all ready.

05:19.470 --> 05:26.430
Split this by the equal sign which still is part of that and get the second value in the remaining array

05:26.580 --> 05:28.430
which is the actual date.

05:28.700 --> 05:36.710
And now we've got expiration date and token in the server side case to now let's see if that works let's

05:36.710 --> 05:40.200
save this and let's log in because we changed the code.

05:40.310 --> 05:41.960
We need to log in again.

05:42.050 --> 05:43.140
Let's try it out.

05:44.770 --> 05:49.180
I get token not to find 0.

05:49.220 --> 05:50.450
When we set the cookie.

05:50.510 --> 05:53.580
That of course is incorrect here with the token.

05:53.600 --> 05:56.090
I should said assault ID token here.

05:56.300 --> 06:01.280
So let's quickly fix this and let the page reload and that's now try again.

06:01.280 --> 06:08.740
Let's log in again and we now actually end up on an error page so let's see what's wrong here.

06:10.460 --> 06:17.000
The thing that should be wrong is that in inat off we expect to get a request but we're not passing

06:17.000 --> 06:19.430
this but only if the request is set.

06:19.430 --> 06:23.280
We actually tried to access our headers here.

06:23.450 --> 06:30.500
So let's go back to the check of middleware and when we dispatch in it off we can forward the request

06:30.500 --> 06:32.910
which was part of the context we receive here.

06:33.010 --> 06:37.390
You can always check the API docs of context to see what else is inside of it.

06:37.670 --> 06:41.970
So a request is one thing and that's the normal node express request.

06:42.050 --> 06:45.920
However you know we check if process is client and then we dispatch.

06:45.920 --> 06:49.550
So this is actually not where I want to forewards the request.

06:49.550 --> 06:57.050
I guess here I just want to forward NULL instead what we can do is we can remove that if statement and

06:57.080 --> 07:03.500
always dispatch in at all but always forward context request which should be null on the service side

07:03.530 --> 07:04.670
anyways.

07:04.790 --> 07:10.960
So if we do that and we reload this page here still fails.

07:11.100 --> 07:14.460
Let's now log in and see if we still get that error.

07:14.460 --> 07:16.990
And we do let's see what else is wrong.

07:18.790 --> 07:23.580
So I found Dearham the error is very subtle actually here.

07:23.620 --> 07:27.810
We're storing the token and the data in Constans token expiration date.

07:27.820 --> 07:32.500
And the if in Al's case and after the and else case we used these values.

07:32.500 --> 07:33.840
Now technically this will work.

07:33.850 --> 07:37.510
There will always be a token and expiration date constant.

07:37.690 --> 07:40.400
But our javascript code doesn't compile correctly.

07:40.480 --> 07:50.140
So let's create variables a token variable and an expiration date variable right at the start of it

07:50.140 --> 07:56.860
off in and off we then remove the Konst keywords and we simply assign values to the variables we just

07:56.950 --> 07:57.620
find.

07:57.910 --> 08:01.840
And with that our javascript code understands the logic here.

08:02.080 --> 08:09.730
So now that if my reload this page I am already locked in which just looking good does because this

08:09.760 --> 08:17.320
indicates that our approach with the cookie does work and we can actually check the application tab

08:17.320 --> 08:22.450
and it's Wroten def tools and they're under a cookie we see the expiration date and that the cookie

08:22.680 --> 08:24.360
table U-T cookie.

08:24.700 --> 08:27.320
If I delete both and reload.

08:27.610 --> 08:29.980
Now I'm back on the log in page.

08:30.250 --> 08:32.800
So now let's log in again.

08:33.630 --> 08:35.370
And this now seems to work.

08:35.370 --> 08:42.230
Now let's try creating a new post with some dummy values simply just to see if that works.

08:43.240 --> 08:44.760
And that seems to work.

08:44.770 --> 08:50.050
We're not loading the image because it's not there but that works if we go back to our unauthenticated

08:50.050 --> 08:51.550
area here.

08:51.550 --> 08:56.980
We also can navigate around and go back to admen by clicking there.

08:56.990 --> 08:59.180
I'm also still locked in.

08:59.470 --> 09:05.380
So now we implemented a solution where we're taking a bunch of cookies on the server we can access them

09:05.380 --> 09:10.660
there because they are attached to every get request that reaches the server so we can get them from

09:10.660 --> 09:11.290
there.

09:11.650 --> 09:14.800
And if we're in the client we can use local storage.

09:14.800 --> 09:19.460
We could even use the cookie there too but I wanted to show both approaches.

09:19.630 --> 09:27.580
And with that we get an education flow where we use a middleware and where we also use our view x store

09:27.580 --> 09:31.430
as well as average tools to persist the log in St..
