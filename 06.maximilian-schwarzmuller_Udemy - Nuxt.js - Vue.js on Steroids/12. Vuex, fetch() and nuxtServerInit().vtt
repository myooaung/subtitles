WEBVTT

00:02.160 --> 00:07.210
We edit the viewer X store and we're dispatching the posts we loaded to it.

00:07.230 --> 00:08.580
No there's nothing wrong with that.

00:08.610 --> 00:10.200
But we can save some code.

00:10.440 --> 00:15.270
Let's remove the creative method instead of using async data here.

00:15.450 --> 00:23.190
We can use the fetch method now fetches all the directly added to the component object and just like

00:23.280 --> 00:29.070
async data it's a special method added by next just like async data.

00:29.100 --> 00:35.820
It runs ever on the server for the first load or on the client so it behaves exactly like async data.

00:35.880 --> 00:42.630
And that even gets the same context object just like async data it receives the Context object and we

00:42.630 --> 00:49.220
have to return a promise here where we then resolve or reject and provide then where we return the data

00:49.230 --> 00:51.970
we actually want to merge with data.

00:51.990 --> 00:55.560
However this difference now we don't return data here.

00:55.770 --> 01:03.840
We can still catch any errors sent showed a page if they occur but the last here we simply dispatch

01:03.840 --> 01:09.300
something to our story and we can access the store on the context object.

01:09.300 --> 01:13.770
There is a stored property we can access data and async data to right away.

01:14.040 --> 01:22.400
And here we could then call commit and commit set posts to simply set posts equal to data loaded posts.

01:22.470 --> 01:29.140
Remember Dator is just the object which is resolved here and that object has a loaded post property.

01:29.700 --> 01:37.770
So now we're committing this to the store to get the pre configured and pre-filled store back with our

01:37.770 --> 01:38.210
page.

01:38.220 --> 01:44.640
If we load this for the first time or to execute a logic on the client if we got there by clicking around

01:45.480 --> 01:52.670
if I now save this and reload this page we get an error.

01:53.130 --> 02:01.490
Now that makes sense because now the issue we have is we call fetch to initialize our store but in the

02:01.500 --> 02:03.630
next hour you follow the post folder.

02:03.630 --> 02:09.360
We actually tried to get loaded posts on the data of this component which doesn't exist anymore we just

02:09.360 --> 02:10.720
populate the store.

02:11.070 --> 02:18.610
Well of course what we can do is we can get data from our store by adding the computer property here

02:18.700 --> 02:23.190
to always be informed about updates and loaded posts here.

02:23.320 --> 02:33.130
As a function and return this store Katter's loaded posts referring to our loaded post scatter we find

02:33.130 --> 02:37.610
here in our index chase file in the store folder.

02:37.660 --> 02:44.770
Now that will have set up a normal connection to getters as you normally do it in any view X app and

02:44.770 --> 02:49.870
we can of course access this dollar sign store here because here we're running on the client again.

02:49.930 --> 02:52.930
This is not inside the fetch or data method.

02:53.260 --> 02:56.700
With that if we reload the page here we don't have an error.

02:56.860 --> 03:03.490
But what we do see is if we inspect view in the new dev tools here that we start with this state.

03:03.640 --> 03:09.280
Now the result is pretty close to what we had before was created but fetches a nice alternative to not

03:09.280 --> 03:10.880
even use async data.

03:10.900 --> 03:16.310
If you are not really interested in merging the data with your component data anyways.

03:16.360 --> 03:22.750
But if you just want to repopulate the store no pre initializing the store like this is nice but still

03:22.750 --> 03:29.560
we would have to manually implement checks on all our pages to see whether we're already having that

03:29.580 --> 03:34.210
data in the store or if you are loading the page for the first time.

03:34.300 --> 03:42.820
If we need to perform the fetch and we can do this we can add a check if context store state loaded

03:42.820 --> 03:47.060
posts length is greater than zero.

03:47.200 --> 03:52.990
Then we could just skip this year and instantly return NULL here.

03:53.020 --> 04:01.490
For example if I do this with 0 to get this result even for the first load then we just have to get

04:01.490 --> 04:02.380
back the page.

04:02.420 --> 04:04.730
Of course with no data initialized.

04:05.000 --> 04:13.160
If Why change it to be like this then we get the normal behavior where we execute code and populate

04:13.160 --> 04:18.740
our store but we would have to implement that entire logic to whole fecche logic into any page where

04:18.740 --> 04:20.050
we fetch posts.

04:20.390 --> 04:22.330
So this might not be ideal.

04:22.330 --> 04:30.230
Instead there is a special method we can add to our view x store which will be executed one time only

04:30.410 --> 04:35.450
on the server and that is the next server in that method.

04:35.450 --> 04:37.190
Now how does that work.

04:37.190 --> 04:42.860
You add it to actions it's a special action that will be executed that will be dispatched automatically

04:42.860 --> 04:43.990
by you x.

04:44.240 --> 04:45.610
So here I add.

04:45.680 --> 04:47.620
Next server in it.

04:47.630 --> 04:56.820
Make sure you don't add any typos and this action again will be dispatched by next year if you still

04:56.820 --> 05:05.870
get your normal US context the payload is a special window the payload always is to context.

05:05.920 --> 05:10.050
So to say in context you get an fetch and a sync data.

05:10.060 --> 05:16.300
Now with that you could analyze your route parens and stuff like that but what you can also do of course

05:16.300 --> 05:22.480
is you can always initialize your store with the loaded posts for example.

05:22.570 --> 05:29.020
So here you could grab the entire code you have and fetch including the return statement and get rid

05:29.020 --> 05:36.520
of that and of all the code here actually just leave components and computed in your and put it into

05:36.520 --> 05:36.870
index.

05:36.920 --> 05:38.770
Yes just the return promise.

05:38.770 --> 05:40.270
You need to return to promise.

05:40.300 --> 05:43.070
That is a key thing to do that is required.

05:43.070 --> 05:48.460
The next server in it to find out how long your async action is taking if you are not performing an

05:48.460 --> 05:49.250
async action.

05:49.270 --> 05:53.960
You can immediately execute whole code you want to execute and you don't have to return.

05:54.070 --> 06:00.890
But if you are executing async action you have to wrap it in a promise and return that promise and then

06:00.950 --> 06:08.470
here if you don't rissoles like this instead you can of course and you should of course still resolve

06:09.330 --> 06:13.500
but you will just call results like this to basically mark that you're done.

06:13.500 --> 06:22.050
The more important part is that you can now call commit on the view x context committees set posts method

06:22.500 --> 06:31.720
and simply pass the posts here as an argument so simply pass the array not an object.

06:31.860 --> 06:38.850
So remove the loaded post property into object commit just the array as you expect that in the mutation

06:39.060 --> 06:41.490
we assign an array of posts here.

06:41.550 --> 06:44.100
So we just call commit to year 1 C..

06:44.100 --> 06:51.870
Time out is done and then we resolve their offer to indicate that we're done here I should close my

06:51.870 --> 06:52.610
parentheses

06:56.540 --> 07:02.340
with that you close to it all correctly can load our page again.

07:03.270 --> 07:09.010
And if we inspect to Storer we see we start with loaded posts and this has one big effect.

07:09.030 --> 07:13.050
They go back to the starting page that takes we still have async data there.

07:13.200 --> 07:18.150
But if I go back to the blog it loads instantly because it's now fetching that from the store because

07:18.150 --> 07:25.930
we initialize our store with values from the server let's say and in the post slyest we have only Synchronoss

07:25.930 --> 07:28.210
code where we use a computer property.

07:28.240 --> 07:31.910
So we only have to wait for disk load once instead of on every page.

07:32.050 --> 07:36.870
And now we can simply add this pattern here to our next of you fall.

07:37.000 --> 07:45.870
Instead of using async data here we can get rid of it entirely and simply add computed and stat and

07:45.870 --> 07:53.340
then there weps that should be no object though add computed and in there have loaded posts as a method

07:53.410 --> 08:02.810
which will be treated as a computed property where we return this store gatherer's scatters loaded posts.

08:03.010 --> 08:08.620
And if we do that and also get rid of create that down there go back to the main page and that now happens

08:08.620 --> 08:09.300
faster.

08:09.340 --> 08:15.190
And if we click on a single post we still load it for async data because that component might need some

08:15.190 --> 08:21.550
extra data and it does for a given single post which we still fetched from the server let's say but

08:21.550 --> 08:27.670
the general data we work with a lot has been fetched only one time and added to the story.

08:28.000 --> 08:30.070
And that is really what I want you to take away.

08:30.070 --> 08:33.910
You can work with the store as you know it you can dispatch commit.

08:33.940 --> 08:39.640
You can set up your getters and listen to them with computer properties just as in any area.

08:39.880 --> 08:45.370
But if you need it you can also add this special next server in a method here dis action here to be

08:45.370 --> 08:53.560
precise which will be dispatched by next automatically and which initializes your store so that you

08:53.560 --> 09:00.430
fetch some data you work with a lot only once so that you can use it and all the components and don't

09:00.430 --> 09:02.720
constantly have to reach out to the server.

09:02.860 --> 09:08.770
And if you don't get use cases where you need specific data well you can still use async data for dead.

09:08.890 --> 09:09.800
So that was a.

09:09.810 --> 09:16.030
But it's really important to know these things and the different tools you have load data into the store

09:16.240 --> 09:20.670
or loaded on a per page basis or mix both as needed.

09:20.800 --> 09:23.860
You got a lot of tools to be efficient just use them.
