1
00:00:00,310 --> 00:00:05,230
In this video we'll be looking at how variables and arrays work in Python.

2
00:00:05,610 --> 00:00:10,080
But we won't be spending a long time on the basics because you already know that the real work with

3
00:00:10,110 --> 00:00:11,800
javascript and HP.

4
00:00:12,050 --> 00:00:17,920
So here we'll be really focusing on the specific aspects of python and variables.

5
00:00:17,940 --> 00:00:23,630
So first off we can define a number in a very simple way something like that.

6
00:00:23,640 --> 00:00:29,220
So if we wanted to define an integer or whole number we just use the name of the variable without any

7
00:00:29,730 --> 00:00:32,600
dollar signs or anything else or even a vowel.

8
00:00:32,820 --> 00:00:36,170
We just use the variable name equals and then the.

9
00:00:36,180 --> 00:00:42,570
In this case integer value and then if we wanted to display that we'd use print and then the variable

10
00:00:42,570 --> 00:00:45,950
name obviously without any quites.

11
00:00:46,010 --> 00:00:53,650
So let's remove our Hello world and just see the action that we get 35.

12
00:00:53,840 --> 00:01:00,170
Similarly we can create floating point numbers like if I wanted to create very bookoo Pi which might

13
00:01:00,170 --> 00:01:01,680
be equal to three point 1 4.

14
00:01:02,120 --> 00:01:06,070
And I can print that.

15
00:01:06,320 --> 00:01:11,560
And they would get a decimal for me and we can work with strings.

16
00:01:14,690 --> 00:01:21,720
Using either single quotes like we did up here or double quotes and we can print those as well.

17
00:01:24,340 --> 00:01:25,930
So that's all pretty straightforward.

18
00:01:26,350 --> 00:01:30,430
We can obviously do math with our numbers.

19
00:01:30,520 --> 00:01:35,650
So if I wanted for some reason to divide my age by pi I could print that

20
00:01:38,350 --> 00:01:39,460
just in the usual way.

21
00:01:39,610 --> 00:01:41,280
But give me some horrendous number.

22
00:01:41,320 --> 00:01:48,700
There it is what's important about Python though compared to both javascript and THP is that Python

23
00:01:48,700 --> 00:01:51,150
is a typed language.

24
00:01:51,160 --> 00:01:59,780
Now this means if you have a variable called number which is confusingly set equal to say five.

25
00:01:59,920 --> 00:02:06,700
But as a string then that you would not be able to multiply by the actual numbers.

26
00:02:06,880 --> 00:02:13,090
So if I tried to print something like number multiplied by age

27
00:02:17,090 --> 00:02:20,720
bizarrely enough I actually get a big string of fives.

28
00:02:20,930 --> 00:02:26,500
And what that's doing there is multiplying the string 35 times.

29
00:02:26,540 --> 00:02:31,700
So that's actually exactly the same as multiplying name by age.

30
00:02:31,910 --> 00:02:34,780
And that would just give me 35 lots of rope.

31
00:02:35,360 --> 00:02:39,340
So Jim really multiplying a string by a number is not something we want to do.

32
00:02:39,530 --> 00:02:49,660
And definitely if we try and multiply our circle number by a floating point number like pi that simply

33
00:02:49,780 --> 00:02:51,760
won't work at all.

34
00:02:51,760 --> 00:02:57,100
So in order to make these things work you need to do a process called casting and this is where you

35
00:02:57,100 --> 00:03:00,990
take a variable of one type and cast it to another.

36
00:03:01,200 --> 00:03:02,950
And that's actually fairly straightforward.

37
00:03:02,950 --> 00:03:11,500
So if you want to cast our string called Number two an integer all we do is take the variable type that

38
00:03:11,500 --> 00:03:13,280
we want our string to be.

39
00:03:13,750 --> 00:03:23,140
So in this case an int and then essentially apply the method or function to the string and then that

40
00:03:23,140 --> 00:03:28,000
will convert it if it can to a number.

41
00:03:28,000 --> 00:03:34,660
So now we should get a result of five times three point 1 4 which is indeed fifteen point seven.

42
00:03:35,050 --> 00:03:41,440
So you might use this for example if a users entered some data into your app quite often that will return

43
00:03:41,530 --> 00:03:42,960
as a string.

44
00:03:43,120 --> 00:03:46,970
But if you know that it's a number then you can use this to convert it.

45
00:03:47,260 --> 00:03:52,430
You can also use float if you wanted to convert to a floating point number.

46
00:03:52,960 --> 00:03:54,700
But that won't make any difference here.

47
00:03:55,240 --> 00:04:01,360
All right so now that we've looked at numbers let's have a quick look at strings and let's set up a

48
00:04:01,360 --> 00:04:03,580
string.

49
00:04:03,580 --> 00:04:11,230
My name is Rob and see what cool things we can do with that really easily in Python.

50
00:04:11,230 --> 00:04:22,460
So first off if we want a particular character from the string we can use SDR say zero to get the first

51
00:04:22,460 --> 00:04:23,510
character.

52
00:04:23,510 --> 00:04:28,100
And that actually works in ph P as well that we get.

53
00:04:28,160 --> 00:04:30,040
But we can do a lot more than that.

54
00:04:30,290 --> 00:04:43,770
We can do things like print s t r and then 0 to 5 to get the first how many characters to get that right.

55
00:04:43,780 --> 00:04:47,180
One two three four five characters.

56
00:04:48,870 --> 00:04:52,890
If we wanted to get the M What would we use.

57
00:04:56,020 --> 00:05:02,060
Did you get it start at 0 6 0 1 2 3 4 5

58
00:05:06,190 --> 00:05:14,060
so note it's slightly oddly printing from 0 to 5 here doesn't actually include the number 5.

59
00:05:14,080 --> 00:05:21,430
So this is actually the first character to the fifth character and this one is actually the sixth character

60
00:05:21,790 --> 00:05:24,350
because the 0 represents the first character

61
00:05:27,060 --> 00:05:27,930
and we can all say

62
00:05:31,000 --> 00:05:40,820
combine strings in the way that we used to say something like s t plus name is going to give us My name

63
00:05:40,850 --> 00:05:50,300
is Rob or writes motoring on beekeeping with me arrays in Python are actually known as lists and that's

64
00:05:50,300 --> 00:05:52,190
the case in a number of other languages as well.

65
00:05:52,190 --> 00:05:53,630
So you should get used to the word list.

66
00:05:53,630 --> 00:05:56,080
It just is another word for Array.

67
00:05:56,450 --> 00:06:09,300
And to define one we might call it my list and then it's a very similar definition as in javascript.

68
00:06:09,700 --> 00:06:21,010
Say I have my usual list of upcast and told me and Ralphy notice that lists can have variables of more

69
00:06:21,010 --> 00:06:22,610
than one type in them.

70
00:06:22,960 --> 00:06:27,660
So you could even put a number or something at the end if you wanted to.

71
00:06:28,900 --> 00:06:31,460
And then we can access that list in the usual way.

72
00:06:31,990 --> 00:06:36,340
So we can actually just print out the whole lot if we want to.

73
00:06:36,450 --> 00:06:37,620
There we go.

74
00:06:38,410 --> 00:06:46,000
And if we want to access Keston what would we type do you think.

75
00:06:46,150 --> 00:06:49,640
Because that is just print my list.

76
00:06:49,700 --> 00:06:55,040
And then one because I would be 0 1 2 3

77
00:06:58,360 --> 00:07:07,310
that we get we can use a similar formulation as with strings if we wanted to print Tommy and Ralphy

78
00:07:07,310 --> 00:07:14,290
together we can use my list from Tommy to.

79
00:07:14,690 --> 00:07:24,200
But then again slightly or late we'd have to go up to 4 to print Tommy and Ralphy together if we just

80
00:07:24,200 --> 00:07:25,350
did two to three.

81
00:07:25,370 --> 00:07:28,160
Even though that looks like it should print to me and Ralphy.

82
00:07:28,160 --> 00:07:34,440
That just gives us Tommy essentially think of this last one as being exclusive.

83
00:07:35,030 --> 00:07:38,870
So we have to put four in there to get the base.

84
00:07:39,230 --> 00:07:47,120
There's also a variable type in Python called a tuple which is essentially a read only list.

85
00:07:49,780 --> 00:07:55,630
So we might define it like that and then to define a tuple we use exactly the same set up.

86
00:07:55,780 --> 00:08:00,780
But we use parentheses rather than square brackets.

87
00:08:01,390 --> 00:08:09,020
So if I just have one two three four for example in my table then if I printed

88
00:08:13,730 --> 00:08:18,140
it will appear perfectly fine.

89
00:08:18,140 --> 00:08:27,470
Indeed I can pick particular values so much people to what value would that print hopefully you got

90
00:08:27,840 --> 00:08:29,040
three.

91
00:08:29,660 --> 00:08:40,010
But if I try and take my tuple to and set it to five and then

92
00:08:42,960 --> 00:08:48,170
print my cuple after that then nothing will happen.

93
00:08:48,390 --> 00:08:54,900
It won't work because I can't update it but if I can if I try to update my list

94
00:08:58,760 --> 00:09:07,820
then that works fine because lists are updatable so don't be confused by the word tuple.

95
00:09:07,870 --> 00:09:13,940
It's just exactly the same list but as read only the final type of variable.

96
00:09:13,960 --> 00:09:17,050
I'm going to show you within Python is the dictionary.

97
00:09:17,500 --> 00:09:25,020
And this is essentially a two dimensional array and we've used them both in HP and Javascript before

98
00:09:26,740 --> 00:09:28,730
but we haven't called them dictionaries before.

99
00:09:29,290 --> 00:09:36,010
So to set up a dictionary we use curly brackets like that and then

100
00:09:39,100 --> 00:09:43,730
we would define each member of our dictionary separately.

101
00:09:43,750 --> 00:09:47,880
So we might have something like dictionary dad

102
00:09:50,770 --> 00:09:51,760
is equal to rob

103
00:09:54,890 --> 00:09:55,420
dictionary.

104
00:09:55,430 --> 00:10:02,620
Mom is equal to the question and we didn't have to have strings everywhere.

105
00:10:03,290 --> 00:10:04,900
We could have child number one.

106
00:10:04,900 --> 00:10:06,850
Perhaps it's Tommy

107
00:10:11,320 --> 00:10:15,240
and child and I'm pretty is Rafi.

108
00:10:15,490 --> 00:10:23,630
And then as usual we can print the dictionary as we go and we can get any of the particular values.

109
00:10:29,360 --> 00:10:39,810
And the usual way quite usefully if we want to we can print all of the keys

110
00:10:44,630 --> 00:10:55,610
in the dictionary so that's dad mom two and one and we can print all the values as well.

111
00:10:57,580 --> 00:10:58,800
There we go.

112
00:10:59,530 --> 00:11:04,960
So I very much rush through that process because I don't want you to feel like you're learning all the

113
00:11:04,960 --> 00:11:06,660
same stuff over again.

114
00:11:06,670 --> 00:11:10,660
The main thing you should be focusing on is the differences between Python and what we've learned so

115
00:11:10,660 --> 00:11:11,560
far.

116
00:11:12,100 --> 00:11:17,530
So the primary thing is to remember that Python is a typed language if you want to multiply two things

117
00:11:17,530 --> 00:11:18,250
together.

118
00:11:18,250 --> 00:11:24,650
You have to make sure their numbers or at least you have to convert them from strings to numbers.

119
00:11:24,670 --> 00:11:31,450
Next is to bear in mind that arrays are now known as lists but they work in a very similar way to what

120
00:11:31,450 --> 00:11:34,170
we used to in Javascript in particular.

121
00:11:34,330 --> 00:11:39,980
Then we had a new variable called a tuple which is exactly like a list but Read-Only.

122
00:11:40,180 --> 00:11:46,180
And finally we've got our dictionary which is another word for a two dimensional array where instead

123
00:11:46,180 --> 00:11:53,320
of just having a 0 1 2 and 3 items in the array we can choose the keys ourselves.

124
00:11:55,480 --> 00:11:56,150
All right.

125
00:11:56,680 --> 00:12:02,500
So now we're going to move straight on to looking at our first fundamental programming structure in

126
00:12:02,590 --> 00:12:03,380
Python.

127
00:12:03,550 --> 00:12:04,750
And that is loops.
