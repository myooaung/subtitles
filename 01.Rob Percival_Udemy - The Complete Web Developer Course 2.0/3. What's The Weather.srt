1
00:00:00,240 --> 00:00:05,250
Get our first taste of API is we're going to be working with open weather map and we're going to use

2
00:00:05,310 --> 00:00:11,120
its API to get the weather rather than scraping it from a Web site as we did before.

3
00:00:11,660 --> 00:00:21,810
So as a quick reminder Previously we used weather forecast dot com and we noted that if you search for

4
00:00:21,840 --> 00:00:28,770
a particular location then it puts that location in the U R L and then we load it that you are l using

5
00:00:28,770 --> 00:00:33,470
file get contents in HP and we extract it.

6
00:00:33,780 --> 00:00:40,260
The weather forecast from that HVM page but we said at the time that that wasn't an ideal thing to do.

7
00:00:40,560 --> 00:00:45,720
Partly because we might get banned from doing that by the owners of weather forecast to come if we use

8
00:00:45,720 --> 00:00:47,030
their service too much.

9
00:00:47,040 --> 00:00:52,440
And also because we're vulnerable to weather forecast not comet changing the age DML structure which

10
00:00:52,440 --> 00:00:56,010
would then break our code and our web app wouldn't work anymore.

11
00:00:56,250 --> 00:00:59,040
So a much better way to do it is to use an API.

12
00:00:59,170 --> 00:01:03,390
Let's have a quick look and see how the open weather map API works.

13
00:01:03,390 --> 00:01:10,890
So on open weather map I'm going to click API and you can see they've got a number of different API

14
00:01:10,890 --> 00:01:11,490
functions.

15
00:01:11,490 --> 00:01:16,050
You can get the current weather five day forecast 16 day forecast etc..

16
00:01:16,290 --> 00:01:22,560
We're going for the current weather at the moment so I'm going to click API doc and you're welcome to

17
00:01:22,590 --> 00:01:26,170
read this in a bit more detail if you want to know more about what's going on here.

18
00:01:26,370 --> 00:01:32,960
But essentially what we need to do is to get a particular u r l like this one so API open weather maps

19
00:01:32,960 --> 00:01:37,970
are August like status like 2.5 weather and then we've got a query string.

20
00:01:38,010 --> 00:01:40,540
Remember Mark and then queue is equal to.

21
00:01:40,590 --> 00:01:42,670
And then our location.

22
00:01:42,720 --> 00:01:48,420
So I just open that up in a new tablet see what that you r l actually looks like.

23
00:01:48,450 --> 00:01:49,070
All right.

24
00:01:49,120 --> 00:01:56,190
This is it says not particularly friendly looking but this is in a format that the script that we're

25
00:01:56,190 --> 00:01:58,270
going to use we'll be able to process.

26
00:01:58,560 --> 00:02:04,140
It's actually a format called Jason short for javascript object notation but it doesn't necessarily

27
00:02:04,140 --> 00:02:05,730
have to have anything to do with Javascript.

28
00:02:05,760 --> 00:02:08,280
And we're going to use it in H-P here.

29
00:02:08,430 --> 00:02:14,460
So all we're going to do is grab the contents of this u r l using file get contents process the Jason

30
00:02:14,790 --> 00:02:19,440
and then extract the bits of the weather forecast that we want and display them to the user just as

31
00:02:19,440 --> 00:02:20,070
before.

32
00:02:22,270 --> 00:02:22,930
All right.

33
00:02:23,080 --> 00:02:30,030
You may have noticed that we need to sign up for an API key so I'm going to do that like most API is

34
00:02:30,040 --> 00:02:34,200
this has a pretty big free tier so you can practice and mess around with it.

35
00:02:34,270 --> 00:02:40,630
You need to start paying if you have a large number of users requesting data which is fair enough.

36
00:02:41,020 --> 00:02:44,460
So let's get our free API key.

37
00:02:44,850 --> 00:02:48,650
So I'm going to be first of all Rob Percival.

38
00:02:48,680 --> 00:02:49,070
OK.

39
00:02:49,090 --> 00:02:50,140
Okay.

40
00:02:50,830 --> 00:02:52,340
My last word in here

41
00:02:55,870 --> 00:03:00,070
agree to the terms of service and then create account.

42
00:03:00,250 --> 00:03:07,030
So now I'm all set up and the key thing that I need in more ways than one is the API key here and I'm

43
00:03:07,030 --> 00:03:17,060
going to replace then the u r l the u r l had a default API key.

44
00:03:17,170 --> 00:03:20,760
So instead of using that I'm going to use my own one.

45
00:03:21,100 --> 00:03:25,350
You should use your own one and will get the same results that we did before.

46
00:03:25,360 --> 00:03:30,650
Notice it can take a couple of minutes for your API key to start working.

47
00:03:30,670 --> 00:03:33,130
All right so now we've got our API data.

48
00:03:33,430 --> 00:03:43,820
Let's jump over to fire FTB and I'm going to create a new section so I'm going to create directory and

49
00:03:43,820 --> 00:03:49,720
this is going to be 8 an API.

50
00:03:50,470 --> 00:03:51,990
So we'll get into that folder.

51
00:03:52,030 --> 00:03:57,960
And then I've actually got the PH p.s. from the Course here.

52
00:03:58,420 --> 00:04:01,650
And the file that I need is seven point one three page.

53
00:04:01,810 --> 00:04:06,440
That was the what's the weather app and I'm going to grab the background image as well.

54
00:04:06,520 --> 00:04:09,020
So it still looks nice.

55
00:04:09,400 --> 00:04:14,920
You can get those either from your own version of the what's the weather app or just go back to the

56
00:04:14,920 --> 00:04:19,550
lecture and click on the link to download the code.

57
00:04:19,570 --> 00:04:20,590
All right.

58
00:04:20,620 --> 00:04:22,000
Now I'm just going to rename that

59
00:04:25,250 --> 00:04:27,330
index dot ph p.

60
00:04:28,470 --> 00:04:37,230
And then we should be able to jump to crime and find our new page.

61
00:04:37,260 --> 00:04:45,840
So this is going to be complete web developer because dot com slash content slash 8 API is slash and

62
00:04:45,840 --> 00:04:47,850
we should see the what's the weather app.

63
00:04:48,260 --> 00:04:49,080
There we go.

64
00:04:49,350 --> 00:04:49,970
Wonderful.

65
00:04:50,000 --> 00:04:52,810
And let's just check that it still works.

66
00:04:52,990 --> 00:04:57,500
But Tokyo in them it does indeed wonderful.

67
00:04:57,500 --> 00:04:58,880
So that's great.

68
00:05:02,450 --> 00:05:12,080
Let's now open up using Komando control indexed ph P in our textedit to say I'm going to get rid of

69
00:05:12,080 --> 00:05:12,460
everything.

70
00:05:12,470 --> 00:05:13,950
We don't need here.

71
00:05:17,170 --> 00:05:25,120
So I'm just going to take us right down to the if there is a city variable in the get string and find

72
00:05:25,120 --> 00:05:30,100
out what we'll do is we'll just load the data that we need.

73
00:05:30,100 --> 00:05:34,200
So I've just copied the you are l there.

74
00:05:35,170 --> 00:05:35,950
So there it is.

75
00:05:35,950 --> 00:05:45,370
And we want file get contents and we want to get the contents of that U R L but we want to replace the

76
00:05:45,370 --> 00:05:48,800
city with

77
00:05:54,470 --> 00:06:01,200
the city that the user has entered.

78
00:06:01,550 --> 00:06:05,130
And we want to leave Spidey in that

79
00:06:07,950 --> 00:06:16,200
and find out we'll just echo that so it will display the results just to make sure that we've got some

80
00:06:19,160 --> 00:06:19,850
There we go.

81
00:06:20,180 --> 00:06:21,410
Wonderful.

82
00:06:21,410 --> 00:06:26,220
So we need to then process this data so we can extract what we need.

83
00:06:28,220 --> 00:06:31,000
So I'm going to call this you r l contents

84
00:06:34,020 --> 00:06:39,000
and then remember this is in adjacent format of the moment and we want to get it into an array so we

85
00:06:39,000 --> 00:06:40,720
can extract the data.

86
00:06:40,980 --> 00:06:49,710
Fortunately we've got a built in function to process Jasen in ph P and that is J-Zone underscore the

87
00:06:49,710 --> 00:06:56,020
code does what it says on the tin the code straight on content.

88
00:06:56,100 --> 00:06:57,780
So we'll take you Arel contents

89
00:07:01,140 --> 00:07:05,940
and we'll convert that into an array which I'll call

90
00:07:08,670 --> 00:07:13,760
whether away and then we're just going to add a flag here.

91
00:07:14,050 --> 00:07:21,400
True which will return the data in the form of an associative array which we can then extract the data

92
00:07:21,400 --> 00:07:22,830
that we need from.

93
00:07:22,840 --> 00:07:23,790
So let's have a look

94
00:07:26,680 --> 00:07:28,560
at the contents of whether array

95
00:07:35,040 --> 00:07:35,540
there.

96
00:07:35,600 --> 00:07:37,650
So you can see the same data.

97
00:07:38,330 --> 00:07:45,200
I'm just going to write click and view page source so that we can see it a bit more clearly.

98
00:07:45,200 --> 00:07:45,550
All right.

99
00:07:45,560 --> 00:07:49,730
So this is all the data we can then access the main description.

100
00:07:49,780 --> 00:07:51,190
It's now changed to overclass.

101
00:07:51,470 --> 00:07:58,640
Overcast clouds and we've got things like temperature pressure humidity wind speed all the information

102
00:07:58,640 --> 00:08:05,030
we could possibly want and we just need to extract this and put it into a format that we can use to

103
00:08:05,030 --> 00:08:06,240
give to the user.

104
00:08:06,770 --> 00:08:12,410
So I'm going to start off with this weather description here and be useful to know exactly what sort

105
00:08:12,410 --> 00:08:13,690
of things might appear here.

106
00:08:13,850 --> 00:08:18,210
So I'm just going to jump quickly back to open weather map.

107
00:08:18,730 --> 00:08:20,470
So the org slash API

108
00:08:23,040 --> 00:08:29,850
and take a look at the API doc again for the current weather data and you can see there's a huge amount

109
00:08:29,850 --> 00:08:38,640
of information about how we can get information by zip code by city ID etc. even in cities within a

110
00:08:38,640 --> 00:08:39,800
particular area.

111
00:08:39,990 --> 00:08:46,230
But what I'm particularly interested in now are the parameters and what values they give us.

112
00:08:46,230 --> 00:08:51,940
So you can see we've got caught at the top which we've got up here which is of course just the enormity

113
00:08:51,950 --> 00:08:54,500
of the latitude of the location.

114
00:08:55,080 --> 00:09:01,050
And then in the weather many are right we've got weather condition ID which we're not going to pay much

115
00:09:01,050 --> 00:09:06,810
attention to them have got weather parameters and this one I've been looking at is the weather condition

116
00:09:06,840 --> 00:09:07,960
within the court.

117
00:09:08,490 --> 00:09:09,670
So I'm going to start with that one

118
00:09:13,530 --> 00:09:25,300
and what we'll do is we'll start off with our weather and we'll say the weather in and then

119
00:09:28,360 --> 00:09:30,870
will display the city that they've requested

120
00:09:34,660 --> 00:09:35,430
currently.

121
00:09:35,500 --> 00:09:45,030
And then we can access this variable here the description variable using weather array.

122
00:09:46,420 --> 00:09:53,590
And then we want to get the weather sub array within that so weather up and then we want to get the

123
00:09:53,590 --> 00:10:02,630
0 array within that and then we will to get the description value within that.

124
00:10:02,910 --> 00:10:07,180
So that should get the contents there.

125
00:10:08,200 --> 00:10:12,120
And let's pop a full stop and a space at the end as well.

126
00:10:14,500 --> 00:10:15,090
OK.

127
00:10:15,520 --> 00:10:18,840
So let's have a look see if that's worked.

128
00:10:18,850 --> 00:10:19,560
There we go.

129
00:10:19,750 --> 00:10:20,230
Fantastic.

130
00:10:20,230 --> 00:10:21,900
So the weather in.

131
00:10:21,970 --> 00:10:30,220
We haven't got our I was caught up in Tokyo for some reason rather than city and that's giving me notice

132
00:10:30,220 --> 00:10:33,040
as well which is fair enough.

133
00:10:33,040 --> 00:10:33,580
All right.

134
00:10:33,700 --> 00:10:41,780
Let's just add a little bit more information so we get to get the temperature say the temperature is

135
00:10:41,780 --> 00:10:44,220
currently 291 some things.

136
00:10:44,540 --> 00:10:48,080
Let's have a look at the API documentation to find out what those are.

137
00:10:49,170 --> 00:11:02,710
So this is in Kelvin so let's convert from Calvin to Celsius.

138
00:11:02,760 --> 00:11:07,790
Let's find out how we do that if we scroll down.

139
00:11:07,810 --> 00:11:12,350
We've got a nice question there how do you combat to Celsius.

140
00:11:12,370 --> 00:11:19,540
Here we go so it looks like we can just subtract 273 that will give us a nice whole number.

141
00:11:20,470 --> 00:11:28,210
So let's get the temperature in Celsius.

142
00:11:30,750 --> 00:11:34,520
And so we're going to get the temperature in Kelvin.

143
00:11:34,770 --> 00:11:38,330
That's going to be weather array.

144
00:11:38,420 --> 00:11:49,470
This time we're going to access the main subarray and the temperature within that.

145
00:11:49,640 --> 00:12:00,540
And we want to subtract 273 from that then let's append to our weather text

146
00:12:04,060 --> 00:12:17,870
the temperature is and then temp in Celsius and I want to put degrees C there.

147
00:12:18,010 --> 00:12:21,450
So we're gonna have to put the degrees symbol in.

148
00:12:21,550 --> 00:12:26,020
I suspect we'll need an h t m l character code for that.

149
00:12:26,310 --> 00:12:36,230
So let's work out what it is.

150
00:12:36,300 --> 00:12:43,870
Click on the first list and I'm going to use Command F or control f on Windows and search for degree.

151
00:12:44,010 --> 00:12:45,800
And there we go.

152
00:12:46,020 --> 00:12:57,070
Could possibly have guessed that ampersand deg and then semi-colon and we'll have a C as well for degrees

153
00:12:57,090 --> 00:13:00,520
C All right.

154
00:13:00,770 --> 00:13:04,870
Let's close that down and take a look see if that's work for us.

155
00:13:05,940 --> 00:13:09,420
So the temperature is seven point seven six three degrees C.

156
00:13:09,420 --> 00:13:10,410
Pretty accurate.

157
00:13:10,800 --> 00:13:12,210
Just change that to a capital C

158
00:13:15,040 --> 00:13:20,000
Many challenge for you then can you convert that to a whole number.

159
00:13:20,250 --> 00:13:20,830
Go for it.

160
00:13:27,590 --> 00:13:28,180
All right.

161
00:13:28,190 --> 00:13:29,950
Hope you managed it.

162
00:13:30,080 --> 00:13:31,270
I'm just going to do a quick search

163
00:13:36,060 --> 00:13:37,900
ph.

164
00:13:37,960 --> 00:13:43,470
Convert to whole number get the integer value of a variable that looks good.

165
00:13:45,680 --> 00:13:50,670
So we get a Ph.D. function Val looks like it will do what we want.

166
00:13:50,930 --> 00:13:54,980
So in fact and then our number wonderful.

167
00:13:54,980 --> 00:13:55,610
So let's

168
00:13:58,700 --> 00:14:00,100
put that here.

169
00:14:02,770 --> 00:14:03,550
There we go.

170
00:14:03,590 --> 00:14:08,250
And now we should find that we've got a whole number value.

171
00:14:08,420 --> 00:14:09,110
Fantastic.

172
00:14:09,110 --> 00:14:13,790
I'm just going to take one more bit of information and I'll take the wind speed.

173
00:14:21,720 --> 00:14:27,820
So let's just check to see what that's measured in.

174
00:14:27,860 --> 00:14:30,710
So the wind speed is in meters per second.

175
00:14:30,760 --> 00:14:31,240
That's fine.

176
00:14:31,270 --> 00:14:33,000
I'll leave it as meters per second.

177
00:14:33,040 --> 00:14:36,000
You can work out how to convert it to miles per hour if you like.

178
00:14:36,070 --> 00:14:37,140
Not that tricky.

179
00:14:37,810 --> 00:14:40,800
And we can actually put it just straight in here.

180
00:14:44,810 --> 00:14:50,440
So the wind speed is and we're going to get that from the wind Sabbar right.

181
00:14:50,480 --> 00:14:55,620
And then speed.

182
00:14:55,690 --> 00:15:03,120
So that's where the rain wind and then speed

183
00:15:06,370 --> 00:15:08,650
and is proper full stop on the

184
00:15:12,130 --> 00:15:12,680
all right.

185
00:15:12,720 --> 00:15:13,930
Let's take a look.

186
00:15:14,490 --> 00:15:15,280
Wonderful.

187
00:15:15,480 --> 00:15:20,760
So you can obviously customize that to contain the exact weather that you want to show to the user which

188
00:15:20,760 --> 00:15:22,540
is another advantage of doing it this way.

189
00:15:22,710 --> 00:15:28,170
But really the big advantage is that we're doing it legally as it were we're doing it as the system

190
00:15:28,170 --> 00:15:29,430
intended.

191
00:15:29,430 --> 00:15:32,070
And so our weather is not going to break down.

192
00:15:32,070 --> 00:15:35,820
Simple change of HCM all of website that we don't control.

193
00:15:36,180 --> 00:15:36,570
All right.

194
00:15:36,570 --> 00:15:39,780
So just two little challenges for you to finish this one off.

195
00:15:39,780 --> 00:15:46,350
Firstly can you get the weather app to behave nice if the user enters something which is not a valid

196
00:15:46,350 --> 00:15:47,520
city name.

197
00:15:48,510 --> 00:15:55,350
Different.

198
00:15:55,360 --> 00:15:56,060
All right.

199
00:15:56,070 --> 00:15:57,690
How do you manage that.

200
00:15:57,790 --> 00:16:02,530
So I'm just going to put in some random text and submit that.

201
00:16:02,540 --> 00:16:08,140
OK I may get all sorts of errors notices and a bit of gobbledygook there as well.

202
00:16:08,620 --> 00:16:12,030
So let's have a look and see what the weather array looks like.

203
00:16:17,420 --> 00:16:21,750
When we try and search for an invalid city.

204
00:16:22,070 --> 00:16:26,670
So there we go we've got a code of 4 0 4 and an error message as well.

205
00:16:26,750 --> 00:16:32,060
So we could search for that particular code but it might be worth just checking again.

206
00:16:33,970 --> 00:16:40,580
A valid city and here we can see that there's a code here of 200.

207
00:16:40,670 --> 00:16:47,580
So it looks to me like 200 is a valid code and anything else will not be valid.

208
00:16:48,230 --> 00:16:54,320
So let's do a check here to see if the weather are-I

209
00:16:57,050 --> 00:17:04,960
code or code variable is equal to two hundred and forget your equals.

210
00:17:05,150 --> 00:17:05,510
Then

211
00:17:09,360 --> 00:17:10,400
we'll do all of that.

212
00:17:14,920 --> 00:17:19,590
If it's not then we'll display an error message

213
00:17:24,710 --> 00:17:28,110
so something like could not find a city.

214
00:17:28,110 --> 00:17:29,940
Please try again.

215
00:17:29,940 --> 00:17:33,960
And that just covers us more generally rather than that specific for forever.

216
00:17:33,960 --> 00:17:40,720
We're now going to get a nice error message even if there's a different sort of error.

217
00:17:41,870 --> 00:17:47,020
And don't forget the semi-colon there and that's and give it a go.

218
00:17:48,420 --> 00:17:50,850
So it's still working nicely for Paris.

219
00:17:50,880 --> 00:17:57,530
If I put in some nonsense we get a nice error message cannot find that city.

220
00:17:57,570 --> 00:17:57,970
All right.

221
00:17:57,970 --> 00:17:58,900
So we're almost there.

222
00:17:58,980 --> 00:18:06,420
The last mini challenge for you is to make the weather web app play nicely with cities with cities with

223
00:18:06,420 --> 00:18:11,930
spaces in their names so things like San Francisco or New York go for it.

224
00:18:20,940 --> 00:18:22,450
OK you managed it.

225
00:18:22,860 --> 00:18:31,170
Let's start off by seeing what happens if we search for a city with a place name in at the moment.

226
00:18:31,490 --> 00:18:35,120
We get a nasty error so we're going to need to do something about that.

227
00:18:35,210 --> 00:18:42,110
What we did before was we just removed the space and just sent it through as San Francisco without a

228
00:18:42,110 --> 00:18:42,950
space.

229
00:18:43,280 --> 00:18:48,110
And notice that does actually work fine if I put in San Francisco without a space.

230
00:18:48,110 --> 00:18:52,070
That does give me the correct weather for San Francisco.

231
00:18:52,490 --> 00:19:01,270
Well I've just noticed actually we don't have units on the windspeed So let's put those in.

232
00:19:01,420 --> 00:19:02,160
That's better.

233
00:19:02,380 --> 00:19:07,300
But I'm going to show you another way of doing which is a little bit more powerful and that's using

234
00:19:08,100 --> 00:19:14,110
a command called u r l in code which if you done a bit of googling you might have come across

235
00:19:17,330 --> 00:19:19,310
time or if you haven't.

236
00:19:19,640 --> 00:19:29,520
So you are adding code essentially converts all of the nasty characters like question marks equal signs

237
00:19:29,570 --> 00:19:37,860
space's apostrophes into character codes so that they can be put into a u r l without causing any problems.

238
00:19:38,270 --> 00:19:42,120
So let's just do that right here.

239
00:19:43,340 --> 00:19:48,550
So we just have to u r l encode the city name.

240
00:19:48,810 --> 00:19:56,610
And now if we put in San Francisco with a space we submit and we get the weather there.

241
00:19:56,640 --> 00:19:58,010
So that's just another solution.

242
00:19:58,080 --> 00:20:04,690
If you did it by removing the space then that's a good solution to.

243
00:20:05,180 --> 00:20:08,210
So let's just take out our code there.

244
00:20:09,480 --> 00:20:10,290
And there we go.

245
00:20:10,560 --> 00:20:14,840
So we've recreated the what's the weather app in a much more powerful and safer way.

246
00:20:15,000 --> 00:20:20,190
We can be much more confident that this app is not going to break if a Web site that we don't control

247
00:20:20,190 --> 00:20:26,970
decides to change is HTL and we're doing it within the web rules as well and we're using the API exactly

248
00:20:27,000 --> 00:20:28,940
as it was intended.

249
00:20:28,980 --> 00:20:30,940
So that was an introduction to API.

250
00:20:31,080 --> 00:20:34,800
We're now going to step it up a little and use a rather more complex API.

251
00:20:34,920 --> 00:20:36,270
The Google Maps API.
