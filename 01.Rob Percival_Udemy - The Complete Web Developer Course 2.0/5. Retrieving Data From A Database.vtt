WEBVTT
1
00:00:00.540 --> 00:00:05.280
The first thing we're going to do then once we've connected to this database retrieve some data from

2
00:00:05.280 --> 00:00:06.050
it.

3
00:00:06.390 --> 00:00:12.450
So you'll remember that I've saved just one piece of data in this database that is my email address

4
00:00:12.540 --> 00:00:13.630
and password.

5
00:00:13.890 --> 00:00:21.540
So we're going to try and get that back from the database and display it in our script.

6
00:00:21.600 --> 00:00:28.710
The first thing I'm going to do is change this code slightly so that it doesn't display anything.

7
00:00:28.710 --> 00:00:35.100
If the data base connection was successful but if the database connection wasn't successful the script

8
00:00:35.160 --> 00:00:43.200
actually stops and we can do that using the die command which feels a bit harsh but to be honest if

9
00:00:43.200 --> 00:00:46.800
we can do a database connection then there's no point doing anything else.

10
00:00:46.800 --> 00:00:52.510
So we should always have a clause that if the connection fails the script just stops.

11
00:00:52.510 --> 00:00:53.180
All right.

12
00:00:53.370 --> 00:00:58.890
The second bit of preparation that we need is to assign a variable to that to our database connection

13
00:00:59.130 --> 00:01:01.730
so that we can refer to it later on.

14
00:01:01.730 --> 00:01:07.680
And normally we call that variable link but you can call it whatever you like but I think it's pretty

15
00:01:07.680 --> 00:01:09.270
standard.

16
00:01:09.300 --> 00:01:10.590
All right.

17
00:01:10.590 --> 00:01:19.980
The first step then in querying our database is to create a query and this is where my school comes

18
00:01:19.980 --> 00:01:20.580
in.

19
00:01:20.580 --> 00:01:24.420
Is there anything between these two quotes will not be in PH.

20
00:01:24.510 --> 00:01:26.250
It will be in my school.

21
00:01:26.490 --> 00:01:28.770
So we're learning a whole new language here.

22
00:01:29.040 --> 00:01:31.190
But don't worry it's pretty straightforward.

23
00:01:31.260 --> 00:01:38.400
So if we want to select everything from the user's table within our database then we would just say

24
00:01:39.120 --> 00:01:44.320
select and assemble for everything and ask you where is store.

25
00:01:44.760 --> 00:01:54.760
So this means select everything from and then the table name which is uses and that's it.

26
00:01:54.930 --> 00:01:58.710
That's our way of saying selects everything from our users table.

27
00:01:59.160 --> 00:02:02.360
Notice the capitalization then it's not necessary.

28
00:02:02.370 --> 00:02:06.570
This code will work fine without it but it is conventional.

29
00:02:06.600 --> 00:02:12.810
That with my ask you how you capitalize the standard MY ASK YOU key keywords and that just makes the

30
00:02:12.810 --> 00:02:14.300
whole thing easier to read.

31
00:02:14.430 --> 00:02:17.710
But if you're experiment you'll find that that works just as well.

32
00:02:17.880 --> 00:02:24.740
It's just not as easy or as conventional or to read as with the capitalization right.

33
00:02:24.740 --> 00:02:27.390
So that's that's all we need from out as well sides.

34
00:02:27.500 --> 00:02:34.400
We just need to now run the query using our link connection to this database and we do that in a few

35
00:02:34.400 --> 00:02:35.510
steps.

36
00:02:35.940 --> 00:02:42.000
So step one is to actually do the query and we do this using my SU.

37
00:02:42.050 --> 00:02:50.210
I underscore queery and then we give the database connection that we want to do the query over.

38
00:02:50.390 --> 00:03:01.420
So in this case link and then we gave the query itself so I've called that query and that will do the

39
00:03:01.420 --> 00:03:04.790
query but it won't actually return the results.

40
00:03:05.050 --> 00:03:11.350
So the way we normally use this would be to put an if statement around it to check to see whether it's

41
00:03:11.350 --> 00:03:15.170
been successful.

42
00:03:15.390 --> 00:03:19.090
So if that works it will return true.

43
00:03:19.440 --> 00:03:31.500
So for now we can say query was successful and just before we run that I need to add the database name

44
00:03:31.560 --> 00:03:34.580
to the miscue like connect command up here.

45
00:03:34.680 --> 00:03:41.220
So on the web hosting service as on many web hosts the database name and the database username are the

46
00:03:41.220 --> 00:03:42.280
same.

47
00:03:42.450 --> 00:03:48.100
So I'm just going to copy that part and put it at the end there.

48
00:03:48.840 --> 00:03:50.850
And this is the database name.

49
00:03:50.850 --> 00:03:55.620
If you're using a different webhost or different system then you should check to see whether the database

50
00:03:55.620 --> 00:03:58.600
user name and name are different.

51
00:03:58.620 --> 00:04:04.350
All right let's have a look them run this and query was successful.

52
00:04:04.680 --> 00:04:06.960
Fantastic.

53
00:04:07.060 --> 00:04:12.060
So that's all well and good but we want to actually get the data back from that query.

54
00:04:12.100 --> 00:04:13.260
So how do we do that.

55
00:04:13.690 --> 00:04:19.710
Well first we assign a variable to the result of the miscue query.

56
00:04:19.730 --> 00:04:22.670
Normally we call that result.

57
00:04:23.600 --> 00:04:31.660
So now we can use the variable result to refer to this query and if it was successful then we can get

58
00:04:31.660 --> 00:04:35.840
the results from it and we do that using my skew.

59
00:04:35.890 --> 00:04:39.020
I fetch.

60
00:04:39.930 --> 00:04:45.610
Fetch array like that and then

61
00:04:49.140 --> 00:04:57.060
we say that we want to fetch the array associated with this query of this result and normally that will

62
00:04:57.060 --> 00:04:58.730
be a row of the database.

63
00:04:58.860 --> 00:05:04.940
So we normally call that row like that.

64
00:05:05.130 --> 00:05:10.090
OK so that's printout.

65
00:05:12.170 --> 00:05:16.060
And but print is print a readable version of an array.

66
00:05:16.380 --> 00:05:17.470
And there we go.

67
00:05:17.940 --> 00:05:23.580
So our first real proof that we have connected to that database we've got our data back in the form

68
00:05:23.580 --> 00:05:29.760
of an associative array with the ID email and password.

69
00:05:29.810 --> 00:05:35.420
Notice that each variable that can be accessed in two different ways might be slightly clearer if I

70
00:05:35.420 --> 00:05:42.630
look at the source so you can use 0 1 and 2 to refer to the ID email and password.

71
00:05:42.650 --> 00:05:49.850
Or you can use probably more usefully variable names so Id email and password.

72
00:05:49.850 --> 00:05:53.330
All right very quick challenge then just to show that you know how to use that array.

73
00:05:53.360 --> 00:06:00.050
Can you make it so that instead of displaying the contents array it says your email is and then robot

74
00:06:00.140 --> 00:06:05.120
replaced with the current UK and your password is and then my password

75
00:06:13.800 --> 00:06:16.380
all rights should be fairly straightforward.

76
00:06:17.060 --> 00:06:18.790
Two different ways to do it of course.

77
00:06:23.230 --> 00:06:37.530
So we could say your email is and then have we taken the right array and using e-mail and your password

78
00:06:37.620 --> 00:06:38.750
is.

79
00:06:39.780 --> 00:06:45.980
And then you want the password field in Iraq as well.

80
00:06:45.990 --> 00:06:51.770
Obviously appending that in the usual way with periods of full stops.

81
00:06:51.780 --> 00:06:52.830
Take a look.

82
00:06:52.920 --> 00:06:53.720
There we go.

83
00:06:54.090 --> 00:06:54.800
Wonderful.

84
00:06:54.870 --> 00:07:03.560
And you could also have done it using the numbered fields although not zero.

85
00:07:03.920 --> 00:07:06.570
I would have called you the ID 1 and 2.

86
00:07:07.000 --> 00:07:08.960
And that will do exactly the same thing.

87
00:07:09.610 --> 00:07:10.090
All right.

88
00:07:10.090 --> 00:07:12.120
That's as far as we're going to go in this video.

89
00:07:12.130 --> 00:07:14.100
There's a lot more that you can do with queering.

90
00:07:14.110 --> 00:07:17.910
Obviously being able to select everything from the database is not what you want to do.

91
00:07:17.920 --> 00:07:23.290
Most of the time we're going to take a quick break from queering and we're going to see how to add and

92
00:07:23.290 --> 00:07:29.320
update data in the database and then we'll look at more advanced queries to select the data that we

93
00:07:29.320 --> 00:07:33.530
want and also to loop through if we get multiple results.
