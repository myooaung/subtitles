1
00:00:00,750 --> 00:00:07,260
All right so now that we've figured out how to log in using both sessions and cookies there's one more

2
00:00:07,260 --> 00:00:13,320
thing that we need to understand before we make our first web site using a log in system our secret

3
00:00:13,320 --> 00:00:19,450
diary project and that is how to store uses passwords securely.

4
00:00:19,510 --> 00:00:24,630
Now this is quite a complex topic and what I'm going to tell you it is definitely not everything there

5
00:00:24,630 --> 00:00:31,050
is to know about web site security but it's everything you need to get your users passwords as secure

6
00:00:31,350 --> 00:00:33,140
as they can be.

7
00:00:33,150 --> 00:00:39,370
So let's first off see how we're doing things at the moment and realize why that's such a bad idea.

8
00:00:39,780 --> 00:00:43,790
So at the moment in our system our password is just stored as plain.

9
00:00:44,010 --> 00:00:46,080
So that's perfectly fine from a user's point of view.

10
00:00:46,080 --> 00:00:50,730
We can just lock them in test their password against the one that they've entered and we'll get them

11
00:00:50,730 --> 00:00:51,190
in.

12
00:00:51,540 --> 00:00:57,520
But if someone gets access to our database then obviously they can just access all of our user accounts.

13
00:00:57,840 --> 00:00:58,900
That's pretty bad.

14
00:00:59,040 --> 00:01:03,400
But it's even worse that most people use the same password for a number of different Web sites.

15
00:01:03,420 --> 00:01:09,180
So not only could access your users account on your Web site but they might well be able to access their

16
00:01:09,180 --> 00:01:13,930
Pay-Pal that Twitter account and many worse Web sites sites.

17
00:01:14,070 --> 00:01:16,640
So we need to encrypt the password in some way.

18
00:01:17,010 --> 00:01:23,070
But that encryption has to work in such a way that when the user enters that password we can still test

19
00:01:23,070 --> 00:01:27,450
what they've entered against the encryption that we have stored.

20
00:01:27,540 --> 00:01:35,120
So there is a process designed specifically for this and this is known as creating a hash for a particular

21
00:01:35,120 --> 00:01:36,260
string.

22
00:01:36,530 --> 00:01:43,220
And there's one well-established type of hash that we normally use Impey HP and that is M.D 5 and the

23
00:01:43,220 --> 00:01:47,090
M.D five function essentially takes a string.

24
00:01:47,120 --> 00:01:54,780
So let's say our user has a very bad password and does a one way encryption on it.

25
00:01:55,700 --> 00:02:04,520
So it essentially turns it into a long alphanumeric string that is very hard to reverse encrypt.

26
00:02:04,760 --> 00:02:09,740
But given the initial string it's the same output every time.

27
00:02:09,740 --> 00:02:16,310
So if we store this in our database then when the user tried to log in we could M.D 5:8 and then check

28
00:02:16,310 --> 00:02:21,220
that against our database and we would then know that the user had the password correct.

29
00:02:21,260 --> 00:02:27,380
So this is not as one way encryption because it's easy to go one way and this result is unique for that

30
00:02:27,380 --> 00:02:28,060
word.

31
00:02:28,310 --> 00:02:29,900
But it's hard to go the other way.

32
00:02:31,640 --> 00:02:32,900
So you might think we're done right.

33
00:02:32,930 --> 00:02:38,270
We can just store the empty five hash of our users passwords in our database and no one can go the other

34
00:02:38,270 --> 00:02:38,840
way.

35
00:02:39,260 --> 00:02:46,800
Unfortunately not because the empty five string is unique to each original string.

36
00:02:46,820 --> 00:02:55,010
Hackers can quite easily create long lists of empty fives for commonly used passwords and you can actually

37
00:02:55,010 --> 00:03:00,890
check this for yourself online using a web site such as Krock station dot net.

38
00:03:03,110 --> 00:03:09,650
So if we take our long string here and paste it into crack station dot net

39
00:03:12,740 --> 00:03:14,200
put in the capture of

40
00:03:17,340 --> 00:03:27,050
then it will check that hash against its known hashes and you can see it's got a password straight away.

41
00:03:27,150 --> 00:03:34,600
So that's the problem because this is a unique one way hash common passwords will be detectable by your

42
00:03:34,620 --> 00:03:35,330
hackers.

43
00:03:35,490 --> 00:03:37,470
And we don't want that.

44
00:03:37,470 --> 00:03:50,220
Note that if we do have a properly complex password something like that and save that and apply M.D

45
00:03:50,220 --> 00:03:55,020
5 to that then this will be secure.

46
00:03:55,020 --> 00:04:03,420
So anyone who has a good password in your database so anyone who has a good password in your database

47
00:04:03,720 --> 00:04:10,630
will still be secured with this method because it won't be on a pre created list.

48
00:04:11,220 --> 00:04:12,470
But that's not good enough for us.

49
00:04:12,480 --> 00:04:19,400
We want even the people who have weak passwords to be able to feel secure with our system.

50
00:04:21,800 --> 00:04:23,130
So how are we going to achieve that.

51
00:04:23,240 --> 00:04:25,630
Well you could think of this as level 2 decryption.

52
00:04:25,670 --> 00:04:32,420
It's definitely better than not encrypting at all but it's not the best we can do.

53
00:04:32,930 --> 00:04:41,480
So how might we get to a level three level three encryption add something known as a socket and that

54
00:04:41,480 --> 00:04:47,240
is essentially a long string of easily numbers and letters.

55
00:04:47,360 --> 00:04:58,590
But it could contain anything which then we put in front of the password each time.

56
00:04:58,670 --> 00:05:08,410
And what we're effectively doing that is turning a weak password into a strong one and then if we see

57
00:05:08,410 --> 00:05:14,810
what the empty five result of that is and we attempts

58
00:05:17,370 --> 00:05:20,870
to crack that it should fail.

59
00:05:22,070 --> 00:05:28,740
DAVID So so this is pretty good and definitely better than level 2.

60
00:05:28,990 --> 00:05:34,540
But we're not quite there yet because especially if you've got a large number of users then it's possible

61
00:05:34,690 --> 00:05:42,520
for the hacker to get hold of that sold somehow and then work out the M.D 5s for that salt and commonly

62
00:05:42,520 --> 00:05:43,680
used passwords.

63
00:05:43,780 --> 00:05:48,030
And that would still enable them to decrypt the commonly used passwords.

64
00:05:48,280 --> 00:05:51,500
So what's our final top level for encryption.

65
00:05:51,790 --> 00:05:58,570
Well what we do is we have a different salt for every item in the database and that's actually quite

66
00:05:58,570 --> 00:05:59,820
easy to create.

67
00:05:59,860 --> 00:06:06,790
We can use something like the ID for that particular right.

68
00:06:08,810 --> 00:06:15,120
So imagine that we've got a right ID of 73.

69
00:06:15,430 --> 00:06:16,150
We can then

70
00:06:19,550 --> 00:06:25,550
D5 the row ID and use that as a solved.

71
00:06:25,880 --> 00:06:31,400
And then because we've got a different slot for every user in our database it's still not 100 percent

72
00:06:31,400 --> 00:06:34,350
impossible for the hacker to get hold of one of the solids.

73
00:06:34,460 --> 00:06:40,010
But if they do that doesn't give them access to any of the other passwords and they have to start from

74
00:06:40,010 --> 00:06:42,090
scratch with each user.

75
00:06:42,230 --> 00:06:47,300
So essentially it will be such a long and complicated process that it's probably not worth it for the

76
00:06:47,300 --> 00:06:52,280
hacker to try and decode even commonly used passwords.

77
00:06:52,280 --> 00:06:53,600
If you do it this way.

78
00:06:53,840 --> 00:06:57,830
The other advantage of doing it this way is that you don't even need to store your hash anywhere because

79
00:06:57,830 --> 00:07:00,680
it's just calculated from something in your database.

80
00:07:02,160 --> 00:07:07,350
One extra point to bear in mind is that you should make sure that you use something absolutely static

81
00:07:07,650 --> 00:07:12,000
for your variable sold here that is static per user.

82
00:07:12,240 --> 00:07:16,550
So don't use the user's e-mail address for example because they might change their email address.

83
00:07:16,830 --> 00:07:21,300
And if they do then you're hashing system will break or at least you'll have to update the password

84
00:07:21,600 --> 00:07:24,490
with the new hash with a new e-mail address.

85
00:07:24,510 --> 00:07:28,460
So better to use something absolutely fixed like the ID number.

86
00:07:28,530 --> 00:07:29,240
So there we go.

87
00:07:29,400 --> 00:07:36,660
This is our secure as we can possibly manage way of storing passwords and we're now ready to build our

88
00:07:36,660 --> 00:07:40,920
complete logging system for our secret diary Web site.

89
00:07:40,920 --> 00:07:42,490
We'll do that in the next video.
