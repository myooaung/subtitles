WEBVTT
1
00:00:00.680 --> 00:00:02.790
All right we're nearly there at the end of this section.

2
00:00:02.790 --> 00:00:05.740
But is one more important javascript concept.

3
00:00:05.760 --> 00:00:12.720
I want to get across before we go and make our reaction Testa and that is functions.

4
00:00:12.720 --> 00:00:15.710
So we've already kind of looked at functions already.

5
00:00:15.750 --> 00:00:22.620
So we've created a function which is just a chunk of code that happens at a certain time and we've made

6
00:00:22.620 --> 00:00:25.590
this case to happen when that button is clicked.

7
00:00:25.800 --> 00:00:31.230
But we can also create our own functions that do whatever we want.

8
00:00:31.230 --> 00:00:37.800
So I'm going to get rid of the text that's there for the moment and this but we will come back to this

9
00:00:37.800 --> 00:00:42.560
because we're going to be remaking this with functions at the end of this video.

10
00:00:43.110 --> 00:00:46.710
But for now let's just see how we define a very basic function.

11
00:00:47.460 --> 00:00:54.720
So to define a function we use the keyword function and then we call the function whatever we want.

12
00:00:54.720 --> 00:00:58.640
So I'm going to make a very basic function that just sends an alert.

13
00:00:58.650 --> 00:01:04.820
So I'm going to call it alert me and then use parentheses.

14
00:01:06.720 --> 00:01:11.550
As part of our function definition this one I'm not going to send any information to it.

15
00:01:11.640 --> 00:01:13.950
I'm just going to call it.

16
00:01:13.950 --> 00:01:17.960
So we've just got empty parentheses as we've seen before.

17
00:01:18.360 --> 00:01:28.480
And all this function is going to be is alert that we're up and that's it.

18
00:01:28.480 --> 00:01:33.260
So at the moment that won't do anything because all I've done is defined the function.

19
00:01:33.280 --> 00:01:36.000
I haven't actually done this request yet.

20
00:01:37.560 --> 00:01:47.040
So if I wanted to do it all I would do is use the command alerts me to run the function alerts me.

21
00:01:47.580 --> 00:01:50.160
So that will now alert.

22
00:01:50.160 --> 00:01:50.960
Hi there Rob.

23
00:01:51.180 --> 00:01:56.460
So you might ask why why would we bother doing this it's a little bit of a complicated way of just doing

24
00:01:56.460 --> 00:01:57.250
that.

25
00:01:57.570 --> 00:02:02.220
Well the main thing is what you'll probably find when you're writing bigger more complicated websites

26
00:02:02.310 --> 00:02:05.700
is that there are certain things that you want to do again and again.

27
00:02:05.970 --> 00:02:11.010
And what is generally a really bad idea is writing code and then copying and pasting that code into

28
00:02:11.010 --> 00:02:17.760
different portions of your javascript much better is to collect that code together into a function and

29
00:02:17.760 --> 00:02:20.790
then just call that function whenever you want to do that thing.

30
00:02:20.790 --> 00:02:25.740
So if you are making a game for example you might have a function that moves the main character and

31
00:02:25.740 --> 00:02:30.670
then when a key is pressed then it calls that function and moves them in a certain direction.

32
00:02:30.840 --> 00:02:36.570
Or you might have a function get tweets which gets the latest tweets for a particular user and then

33
00:02:37.020 --> 00:02:39.540
the program can display them wherever you want them.

34
00:02:39.570 --> 00:02:45.660
So they're essentially a way of keeping your code better organized more easily updatable and easier

35
00:02:45.660 --> 00:02:46.320
to read.

36
00:02:46.590 --> 00:02:51.690
As a general rule if you find yourself writing the same command twice it's probably better to put it

37
00:02:51.690 --> 00:02:57.570
in a function so functions can obviously do a lot more than just alert things.

38
00:02:57.600 --> 00:03:01.890
And as we've seen they can receive values as well.

39
00:03:02.250 --> 00:03:06.220
So let's see how we receive those values.

40
00:03:06.360 --> 00:03:12.030
Let's say for example I'm writing a web site which requires me to see average numbers a lot.

41
00:03:12.030 --> 00:03:14.720
So take two numbers and find the average of them.

42
00:03:14.730 --> 00:03:23.190
So if I want to define the average of X and Y that say I've got an X which is five and a Y which is

43
00:03:23.200 --> 00:03:26.570
10 Obviously I could do X..

44
00:03:26.630 --> 00:03:35.140
Plus Y and then put that in brackets and divide it by 2.

45
00:03:35.220 --> 00:03:38.230
That would give me the average of those two.

46
00:03:38.760 --> 00:03:43.620
But if I was doing that again and again and again I'd probably want to store that code somewhere else

47
00:03:43.620 --> 00:03:47.430
so I didn't have it in lots of different places in my app.

48
00:03:47.430 --> 00:03:51.160
So how could we do that with a function.

49
00:03:51.230 --> 00:03:58.590
Well let's change this function to be called after each and this function is now going to need two numbers

50
00:03:58.920 --> 00:04:02.980
because it can't tell the average of the numbers unless you tell the function what the numbers are.

51
00:04:03.420 --> 00:04:08.200
So within our function Let's call these numbers a and b.

52
00:04:08.610 --> 00:04:17.030
And that means that whenever we call this function average now we need to pass 2 numbers to it so then

53
00:04:17.090 --> 00:04:24.470
how function is going to take the two numbers add them together and divide them by two just like we

54
00:04:24.470 --> 00:04:25.510
said here.

55
00:04:26.480 --> 00:04:34.530
And what we're going to want is the result to be given back once the function is complete and we do

56
00:04:34.530 --> 00:04:46.010
that using the keyword return and then we put whatever value we want to return in brackets like that.

57
00:04:46.240 --> 00:04:51.480
So what this will now do is allow us to call the function average with two numbers and then it will

58
00:04:51.480 --> 00:04:56.470
return the value of those two numbers added together and divided by two.

59
00:04:57.150 --> 00:05:07.300
So let's see it in action that alerts the average of X and Y

60
00:05:10.070 --> 00:05:11.090
as have a look.

61
00:05:11.090 --> 00:05:13.710
The answer is seven point five.

62
00:05:13.760 --> 00:05:18.540
So this is calling the function average with the two numbers x and y.

63
00:05:18.770 --> 00:05:23.010
And then the code will jump over here to average and then it will do the calculation.

64
00:05:23.030 --> 00:05:27.910
Add them together and divide by two and then it will return that here.

65
00:05:27.920 --> 00:05:34.250
So essentially it replaces this with the number that it finds when you add them together and divide

66
00:05:34.250 --> 00:05:36.490
them by T.

67
00:05:36.500 --> 00:05:38.560
So again a fairly trivial example.

68
00:05:38.640 --> 00:05:42.350
But you can imagine some cases where you're averaging a lot.

69
00:05:42.560 --> 00:05:48.590
It's a lot simpler to have your average function outside and then just look at this and you'll see what

70
00:05:48.590 --> 00:05:51.320
I'm doing that is finding the average of the two of them.

71
00:05:51.320 --> 00:05:56.670
So that's how we use functions to receive and return values of things.

72
00:05:56.690 --> 00:06:09.990
Let's jump back using commands to our number guessing game and see how we can redefine this in terms

73
00:06:09.990 --> 00:06:11.700
of functions.

74
00:06:11.700 --> 00:06:13.700
Now this code is not particularly complicated.

75
00:06:13.710 --> 00:06:18.210
We can follow it through and just about see what's going on but it might make more sense to extract

76
00:06:18.270 --> 00:06:25.920
the guessing part of it as a function so see how that might look at the beginning of my code.

77
00:06:25.920 --> 00:06:37.170
I'm going to define function and ocal it do a guess and any information function needs is the correct

78
00:06:37.230 --> 00:06:38.490
answer.

79
00:06:38.580 --> 00:06:41.280
So we'll call that correct.

80
00:06:42.290 --> 00:06:43.460
Answer.

81
00:06:43.610 --> 00:06:48.400
And that's what we refer to as in the function.

82
00:06:48.610 --> 00:06:53.410
So the bit that we want to extract then is this bit here.

83
00:06:56.630 --> 00:07:00.940
So I'm just going to copy all of that and I'll make some changes while we're in.

84
00:07:00.940 --> 00:07:07.510
So we're going to create our guest variable and we're going to multiply by six and use floor to make

85
00:07:07.510 --> 00:07:08.720
it a whole number.

86
00:07:09.220 --> 00:07:15.220
And what we're going to do is check to see if guess is equal to not my number this time but correct

87
00:07:15.220 --> 00:07:15.900
answer.

88
00:07:16.360 --> 00:07:19.150
Because that's what we're calling it within this function.

89
00:07:19.840 --> 00:07:31.110
And what we're going to do is if we've got it right then we'll return true which is meant by a Boullion

90
00:07:32.700 --> 00:07:38.260
and if you've got it wrong return false.

91
00:07:38.280 --> 00:07:45.000
So what we're essentially doing is silo ing a certain chunk of code or piece of logic into it's own

92
00:07:45.000 --> 00:07:50.510
section of our code doesn't change a great deal and in this case it doesn't make it a lot more efficient.

93
00:07:50.550 --> 00:07:54.650
But hopefully you can see that it makes a bit more sense to have this separate.

94
00:07:55.140 --> 00:08:05.680
So now I no longer need this chunk of code because the guess is all happening inside the function up

95
00:08:05.680 --> 00:08:06.660
here.

96
00:08:07.390 --> 00:08:16.170
So instead of checking whether a guess is equal to my number I'm going to check whether I do I guess

97
00:08:18.240 --> 00:08:22.280
is equal to a tree folks.

98
00:08:24.470 --> 00:08:31.430
And remember I need to send the correct answer to Do I guess the correct answer is my number here.

99
00:08:34.410 --> 00:08:38.890
So the logic is still the same but the structure of the code is now a bit different.

100
00:08:39.000 --> 00:08:44.200
And the do I guess section of the code is taken out of the main body.

101
00:08:44.430 --> 00:08:48.330
So whether you think that's better than it was before is a matter of opinion but definitely when your

102
00:08:48.330 --> 00:08:54.810
code gets more complicated you'll find that taking chunks out into functions just makes it so much easier

103
00:08:54.810 --> 00:08:56.430
to manage.

104
00:08:56.520 --> 00:08:58.080
One more quick change before we run it.

105
00:08:58.080 --> 00:08:59.970
Is this variable.

106
00:09:00.000 --> 00:09:04.480
Guess is now only defined inside this function.

107
00:09:04.770 --> 00:09:09.830
And this is something called scope which we'll look at in much greater detail as we go on in the course.

108
00:09:09.870 --> 00:09:17.400
But essentially if a variable is defined inside a function it will only be available inside that function.

109
00:09:17.400 --> 00:09:19.910
So we can't use the variable Gastown here.

110
00:09:20.480 --> 00:09:24.300
But that's not a problem because we have the correct answer in another variable.

111
00:09:24.300 --> 00:09:25.510
My number.

112
00:09:25.770 --> 00:09:28.350
So let's just use my number instead.

113
00:09:30.390 --> 00:09:34.390
All right let's just have a look and make sure things work.

114
00:09:34.470 --> 00:09:34.800
Yeah.

115
00:09:34.860 --> 00:09:37.050
Two guesses looks good.

116
00:09:37.050 --> 00:09:39.460
Five eight guesses.

117
00:09:39.570 --> 00:09:41.870
Looks like it's doing the right thing.

118
00:09:42.000 --> 00:09:46.490
So it's the same code just restructured in the form of a function.

119
00:09:46.560 --> 00:09:51.630
So congratulations you made it to the end of the main part of the JavaScript section of the course but

120
00:09:51.630 --> 00:09:56.150
we still have our exciting reaction tester where we're going to put all of this together.

121
00:09:56.220 --> 00:09:57.020
Coming up next.
