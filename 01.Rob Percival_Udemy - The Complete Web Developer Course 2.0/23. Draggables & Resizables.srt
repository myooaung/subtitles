1
00:00:00,400 --> 00:00:06,480
So continuing our tour around the query UI so far we've set up a div with some text in it and we've

2
00:00:06,480 --> 00:00:10,910
made it trackable by applying the Dragonball function to it.

3
00:00:11,160 --> 00:00:13,210
And now we can drag it wherever we like.

4
00:00:13,740 --> 00:00:19,290
So what if we wanted to customize the way in which this was trackable For example we might want to only

5
00:00:19,290 --> 00:00:22,550
be able to drag it up and down not left and right.

6
00:00:22,830 --> 00:00:24,820
Let's see if there's a way to do that.

7
00:00:27,340 --> 00:00:34,420
So they drag a whole page on Jake where you come if we have a look down at the examples on the right

8
00:00:35,290 --> 00:00:37,620
we've got constrain movement.

9
00:00:38,590 --> 00:00:47,090
And this first example only allows you to be dragged up and down and this one on the left and right.

10
00:00:47,170 --> 00:00:50,630
So a quick challenge can you see the code work out how to apply that.

11
00:00:50,710 --> 00:00:55,240
In our case to make our text only draggle vertically Giffard

12
00:01:01,960 --> 00:01:02,380
OK.

13
00:01:02,420 --> 00:01:04,040
Did you do it.

14
00:01:04,040 --> 00:01:05,200
Let's have a look.

15
00:01:05,330 --> 00:01:09,980
View Source.

16
00:01:09,990 --> 00:01:10,380
There we go.

17
00:01:10,380 --> 00:01:15,630
So your eyes should shift past all of this really because we're not that interested in the styles.

18
00:01:15,750 --> 00:01:18,050
What we really want is this here.

19
00:01:18,360 --> 00:01:28,210
So it looks like if we add an option of access and set it equal to y that will only allow it to be scrolled

20
00:01:28,480 --> 00:01:32,370
in the y axis i.e. the vertical axis.

21
00:01:32,410 --> 00:01:36,750
So let's have a look at.

22
00:01:36,820 --> 00:01:41,260
So now we can drag only up and down.

23
00:01:41,260 --> 00:01:51,760
And of course if I wanted to change that to horizontal then that would apply as well.

24
00:01:51,860 --> 00:01:52,910
So I'm going to leave that

25
00:01:59,110 --> 00:02:00,070
there.

26
00:02:00,970 --> 00:02:02,800
So you can see it in action.

27
00:02:03,400 --> 00:02:07,770
Let's have a little look at some of the other trackable options.

28
00:02:09,250 --> 00:02:15,810
So this one can be dragged about but only within a certain area.

29
00:02:18,960 --> 00:02:23,200
And that one can indeed be dragged about within its small box as well.

30
00:02:23,200 --> 00:02:25,060
So can you figure out how to do that.

31
00:02:25,090 --> 00:02:25,690
In our case

32
00:02:33,510 --> 00:02:35,130
did you manage it.

33
00:02:35,500 --> 00:02:40,090
Once again it looks like it's quite straightforward.

34
00:02:40,090 --> 00:02:47,860
We can just set the containment parameter to a particular ID or indeed just the parent which looks like

35
00:02:48,190 --> 00:02:50,690
the simplest option for us.

36
00:02:53,400 --> 00:02:55,000
So let's check that out.

37
00:02:55,580 --> 00:02:57,510
Let's see if we can make that happen.

38
00:03:00,360 --> 00:03:04,130
So it will need a div which will be our box.

39
00:03:04,140 --> 00:03:07,770
So we're going to be naughty and put some inline styles in there.

40
00:03:08,910 --> 00:03:18,960
We'll just have with 400 pixels height 300 pixels and background color

41
00:03:22,580 --> 00:03:23,980
yellow.

42
00:03:24,620 --> 00:03:25,790
So I have a little look.

43
00:03:25,790 --> 00:03:27,390
There we go great.

44
00:03:28,220 --> 00:03:37,650
And then inside that Dave will have a little paragraph that says I'm stuck in that box.

45
00:03:41,910 --> 00:03:53,140
And then because that's our only paragraph we can select it using a P and then we want to apply trackable

46
00:03:53,140 --> 00:04:01,240
to it and we want to set the containment parameter to parent.

47
00:04:01,240 --> 00:04:02,700
All right let's give it a go.

48
00:04:03,960 --> 00:04:06,860
And indeed we can only drag it in the box which is great.

49
00:04:06,930 --> 00:04:10,210
Interestingly we can only drag it up and down as well.

50
00:04:10,230 --> 00:04:12,360
Can you think about why that might be the case.

51
00:04:16,210 --> 00:04:17,610
I hope you figured that out.

52
00:04:17,610 --> 00:04:24,190
It's because we used a paragraph tag here and a paragraph tagged by default stretches across the whole

53
00:04:24,220 --> 00:04:26,100
width of its container.

54
00:04:26,530 --> 00:04:35,150
So I can't drag the paragraph left and right because it is already at the whole width of the box.

55
00:04:35,240 --> 00:04:47,130
So if I change the paragraph to a span which doesn't span the whole width then that should fix the issue.

56
00:04:47,140 --> 00:04:54,170
And now I can drag it up and down and also the left and right but I'm still stuck in the box.

57
00:04:54,430 --> 00:04:55,000
All right.

58
00:04:55,000 --> 00:04:57,200
So there's obviously a lot more options we can see.

59
00:04:57,310 --> 00:05:02,570
But the last thing I want to show you about Dragon Balls is the API documentation.

60
00:05:02,980 --> 00:05:08,260
So we've been working from examples here which is all well and good but sometimes you need a bit more

61
00:05:08,260 --> 00:05:10,670
than examples to work out exactly what's going on.

62
00:05:10,960 --> 00:05:14,050
And that's what the API documentation is for.

63
00:05:14,530 --> 00:05:19,110
And here you can see all the details of all the different things that we can do.

64
00:05:19,150 --> 00:05:25,150
So I'm not going to go into this in great detail but for example one of the options we can apply is

65
00:05:25,150 --> 00:05:27,910
to choose whether or not a certain class is applied

66
00:05:30,630 --> 00:05:34,840
whether or not the Dragonball helper is added et cetera et cetera.

67
00:05:34,950 --> 00:05:37,260
And we've already seen the access option.

68
00:05:37,260 --> 00:05:42,210
So that's where you get a lot more detail and usually some nice examples as well that you can see exactly

69
00:05:42,210 --> 00:05:44,210
how it works.

70
00:05:44,250 --> 00:05:44,760
All right.

71
00:05:44,940 --> 00:05:51,400
So let's jump back over and look at another jay Querrey interaction resizable.

72
00:05:52,410 --> 00:05:54,170
So this one looks pretty straightforward.

73
00:05:56,580 --> 00:06:03,720
We can just resize an object using a little handle in the corner then so can you create a resizable

74
00:06:03,720 --> 00:06:05,690
div in our carried.

75
00:06:05,690 --> 00:06:13,790
Go for it.

76
00:06:13,810 --> 00:06:14,780
All right.

77
00:06:14,780 --> 00:06:16,900
Have you managed it.

78
00:06:16,970 --> 00:06:19,370
It's pretty straightforward.

79
00:06:19,390 --> 00:06:27,740
Again we just apply the resizable function to our div.

80
00:06:28,030 --> 00:06:29,440
So let's create a div

81
00:06:32,470 --> 00:06:38,550
just as they've done we'll give it an ID of resizable and then we'll select it with javascript.

82
00:06:38,560 --> 00:06:44,430
In fact we can just paste that straight in so we're selecting the resizable div by its ID and we're

83
00:06:44,440 --> 00:06:49,060
applying the resizable function to it.

84
00:06:49,210 --> 00:06:50,020
I'm just going to have

85
00:06:54,410 --> 00:06:56,810
Kwik-Fit of style them.

86
00:06:59,080 --> 00:07:00,470
For my resizable Dave

87
00:07:03,120 --> 00:07:15,530
and we'll have with 100 pixels height 100 pixels and background color really

88
00:07:20,100 --> 00:07:20,390
OK.

89
00:07:20,600 --> 00:07:27,200
There you go so you can see we've got the handle right there for us and we can of course drag this about

90
00:07:30,410 --> 00:07:31,090
Great.

91
00:07:31,190 --> 00:07:33,610
Let's have a quick look at a couple of the options here.

92
00:07:33,620 --> 00:07:38,620
I think snap to Griots could be very useful in some situations.

93
00:07:38,720 --> 00:07:44,180
So obviously there you overstraining the possible set of sizes.

94
00:07:44,180 --> 00:07:52,460
And then we can do that just by setting the grid property to 50.

95
00:07:52,550 --> 00:07:58,140
Let's do that here in gray it is 50.

96
00:07:58,140 --> 00:08:04,130
So that's 50 pixels for the great width every game.

97
00:08:07,780 --> 00:08:08,390
We could also

98
00:08:12,460 --> 00:08:15,700
resize another element at the same time

99
00:08:19,950 --> 00:08:22,040
every game go just like that.

100
00:08:22,160 --> 00:08:24,120
Let's see how we do that.

101
00:08:24,230 --> 00:08:31,190
So we just add an option of also resize along with the select set for the element that we want to also

102
00:08:31,190 --> 00:08:35,500
resize and we set the other element to be resizable as well.

103
00:08:36,990 --> 00:08:38,070
So let's try that.

104
00:08:42,870 --> 00:08:50,310
So I will have to live with an idea of also just to save time and that's going to be quite similar in

105
00:08:50,310 --> 00:08:51,800
style.

106
00:08:55,600 --> 00:09:01,720
My initial one but we'll make it read and then we just need to add

107
00:09:06,490 --> 00:09:07,670
the property here.

108
00:09:07,740 --> 00:09:14,160
I'm going to put them on separate lines as we've seen before with commas separating them and then we

109
00:09:14,160 --> 00:09:16,050
want to also resize

110
00:09:19,260 --> 00:09:21,570
and we want to also resize the.

111
00:09:21,570 --> 00:09:25,890
Also Dave the one with the also ID.

112
00:09:26,010 --> 00:09:27,720
And then remember we just need to apply

113
00:09:31,820 --> 00:09:37,350
the resizable command to all say as well.

114
00:09:40,650 --> 00:09:42,400
All right let's have a look.

115
00:09:42,420 --> 00:09:44,240
Fantastic.

116
00:09:44,250 --> 00:09:52,920
So notice that grid only actually applies to the first one but the second one does resize smoothly.

117
00:09:52,980 --> 00:09:54,900
OK so one final thing.

118
00:09:54,930 --> 00:10:01,770
What if you wanted something to happen when the width hit a certain size you might be resizing this

119
00:10:01,770 --> 00:10:02,380
rectangle.

120
00:10:02,400 --> 00:10:07,160
And when the user goes above a certain way you might want to change the page layout in some way where

121
00:10:07,340 --> 00:10:10,490
a word should be coming into your mind when you're thinking of doing things like that.

122
00:10:10,590 --> 00:10:14,280
And that is a callback function as we've seen before.

123
00:10:16,120 --> 00:10:21,040
So we're going to need to see how to find a callback function on our resize.

124
00:10:21,700 --> 00:10:28,300
Let's have a look again at the API documentation and you can see we've got a bunch of options which

125
00:10:28,300 --> 00:10:29,880
is what we've looked at so far.

126
00:10:30,220 --> 00:10:36,450
We've got methods which are like functions that we can apply to our resizable so we can destroy it.

127
00:10:36,580 --> 00:10:39,600
We can disable it enable it et cetera.

128
00:10:40,030 --> 00:10:44,830
And we've got events and these are things that happen usually during the resize.

129
00:10:44,830 --> 00:10:51,270
So this is when it's created this is when it's been resized and when the resizing is started or stops.

130
00:10:51,280 --> 00:10:55,630
So what we're interested in is doing something when it hits a certain size.

131
00:10:55,810 --> 00:10:59,720
So that's going to happen when it's been resized.

132
00:10:59,890 --> 00:11:06,810
So this is a javascript or Jay queery event you want to do something when that event happens.

133
00:11:06,920 --> 00:11:08,830
So you can see we've got various options again.

134
00:11:08,870 --> 00:11:15,150
I'm going to look for a code example and this is then the crucial bit that we need here.

135
00:11:17,610 --> 00:11:20,460
So we've seen this before when we've done callback functions.

136
00:11:20,460 --> 00:11:28,590
This looks for a resize event and when the Resize event happens we run a certain function.

137
00:11:28,830 --> 00:11:31,060
So that's what we're interested in here.

138
00:11:32,920 --> 00:11:42,640
So let's jump back over and see if we can apply that to our original resize them or resizable.

139
00:11:42,640 --> 00:11:44,020
So for now let's just

140
00:11:49,300 --> 00:11:53,830
alert hello when the element has been resized.

141
00:11:54,020 --> 00:12:07,200
Let's see what that does to get the right one that we get alerted hello when we've completed a resize.

142
00:12:07,450 --> 00:12:14,560
We said that we wanted to do something if it reaches a certain width so we'd have to get the width

143
00:12:17,190 --> 00:12:19,520
of our resizable.

144
00:12:19,740 --> 00:12:21,980
We know how to do that.

145
00:12:22,620 --> 00:12:25,430
We just select it in the usual way.

146
00:12:25,620 --> 00:12:30,780
Resizable and we get the

147
00:12:34,680 --> 00:12:42,940
this is particularly useful for us because it returns a number rather than if we use CSX with then that

148
00:12:42,940 --> 00:12:47,130
will return the number plus peaks which we're not particularly interested in here.

149
00:12:47,380 --> 00:12:50,090
We'd have to remove the ax.

150
00:12:50,410 --> 00:12:57,280
So this is just a number so we can then check to see if the width is greater than for example 300

151
00:13:00,050 --> 00:13:02,100
and for now what we'll do is just alert

152
00:13:04,910 --> 00:13:09,540
big enough or something like that.

153
00:13:09,800 --> 00:13:17,570
So let's have a look once we get to a bigger than 300 we get to big enough and that's just I didn't

154
00:13:17,900 --> 00:13:19,450
stop the resizing.

155
00:13:19,460 --> 00:13:24,330
I'm still resizing and we still get this pop up here.

156
00:13:25,340 --> 00:13:31,950
So this is how we add a callback function to our resizable to do something when it's been resized.

157
00:13:31,970 --> 00:13:36,860
All right now we're going to move on and look at an element that was designed with a callback function

158
00:13:36,860 --> 00:13:39,750
in mind and that is the drop of all interaction.
