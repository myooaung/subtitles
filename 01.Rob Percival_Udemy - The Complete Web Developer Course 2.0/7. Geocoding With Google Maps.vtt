WEBVTT
1
00:00:00.450 --> 00:00:05.790
Now that we've seen how to work directly with maps in the Google Maps API we're going to use another

2
00:00:05.790 --> 00:00:11.250
one of its functions called geocoding and this will give us an opportunity to use aspects of the API

3
00:00:11.250 --> 00:00:14.240
that doesn't actually require a map at all.

4
00:00:14.330 --> 00:00:15.190
All right.

5
00:00:15.450 --> 00:00:21.930
So geocoding is the process of taking an address and working out exactly where it is and that's something

6
00:00:21.930 --> 00:00:24.020
that Google Maps does for you very nicely.

7
00:00:24.330 --> 00:00:31.050
So if we click on samples again from the Google Maps javascript API page and you can see down here we've

8
00:00:31.050 --> 00:00:37.400
got geo location.

9
00:00:37.560 --> 00:00:44.120
So this is actually a really nice example which does a fair bit more than it needs to.

10
00:00:44.320 --> 00:00:52.710
We get a little pop up which once you've given it permission it finds your location and puts it on a

11
00:00:52.710 --> 00:00:53.170
map.

12
00:00:55.020 --> 00:01:05.710
So let's grab all of that code and copy it and we'll have a quick look at it to see how it works.

13
00:01:07.090 --> 00:01:16.830
And I'm going to copy everything above that final script because that because that contains my API key.

14
00:01:17.390 --> 00:01:25.090
So then I'll just get rid of that bit from the demo code and then let's have a look.

15
00:01:30.660 --> 00:01:35.720
So it loads up the map it requests to know your location.

16
00:01:36.000 --> 00:01:42.300
And if you press allow then it shows you exactly where your location is.

17
00:01:42.300 --> 00:01:46.860
So this time rather than go through the code in detail with you I'm going to set you a mini challenge

18
00:01:47.160 --> 00:01:53.910
and that is change the code so as well as pointing to your location on the map it also alerts the user's

19
00:01:54.000 --> 00:01:56.310
latitude and longitude.

20
00:01:56.370 --> 00:02:03.940
Go for it.

21
00:02:03.950 --> 00:02:04.430
All right.

22
00:02:04.430 --> 00:02:05.540
Did you manage it.

23
00:02:06.020 --> 00:02:08.670
Let's take a look.

24
00:02:08.720 --> 00:02:13.820
So it should have been pretty simple once you've had a look at this card with familiar with this first

25
00:02:13.820 --> 00:02:20.750
bit here which creates the Google map which then got an info window which I would guess is this location

26
00:02:20.750 --> 00:02:23.000
found box which pops up.

27
00:02:23.000 --> 00:02:28.850
And then here this is where it's doing the get current position.

28
00:02:28.950 --> 00:02:33.530
And in fact here is where we get the latitude and longitude.

29
00:02:33.690 --> 00:02:42.570
So to display them we can just use alerts and then something like Latitude and then we can get that

30
00:02:42.570 --> 00:02:43.200
from the

31
00:02:45.960 --> 00:02:55.530
Paul's array or position array and then we want the latitude or LAT within that array.

32
00:02:55.990 --> 00:02:59.480
And then the longer cheat

33
00:03:02.700 --> 00:03:11.390
will get again pause and then this time long.

34
00:03:11.410 --> 00:03:13.110
All right let's take a look.

35
00:03:17.930 --> 00:03:18.840
And there we go.

36
00:03:19.100 --> 00:03:22.910
So the latitude there and the longer G.

37
00:03:23.210 --> 00:03:28.910
So now that we've seen how to get the users location we're going to see how to geocoder with the Google

38
00:03:28.910 --> 00:03:29.790
Maps API.

39
00:03:30.260 --> 00:03:36.890
And this is again how to get the full details of an address or a particular location.

40
00:03:37.520 --> 00:03:41.840
So click back on Google Maps API Ice Ice ice ice then.

41
00:03:41.870 --> 00:03:44.130
Now we're going to look at Web services.

42
00:03:44.590 --> 00:03:52.070
So the web API is that we've just looked integrate directly into your HDMI pages webservices work a

43
00:03:52.070 --> 00:03:57.860
bit more like a traditional API in that we call a particularly u r l and then get some data back from

44
00:03:57.860 --> 00:03:58.290
that.

45
00:03:58.400 --> 00:04:00.600
So let's see how we make that work.

46
00:04:00.710 --> 00:04:11.830
First off we're going to keep this was exactly the same way as with the Google Maps javascript API and

47
00:04:11.830 --> 00:04:19.350
I'm just going to create a new project again and that will generate the API key bullets going.

48
00:04:19.520 --> 00:04:27.880
Let's jump back to our Web services documentation page and click Google Maps geocoding API.

49
00:04:28.370 --> 00:04:29.360
And here we go.

50
00:04:29.630 --> 00:04:35.360
So you can see the geocoding is purpose of taking an address and converting it into geographical coordinates.

51
00:04:35.360 --> 00:04:37.700
It also will fill out the address for us.

52
00:04:37.850 --> 00:04:43.310
So for example it will take a part of an address and make it into a full address with person and everything

53
00:04:43.310 --> 00:04:47.980
else which will help us with the postcode app that we're going to make in the next video.

54
00:04:49.660 --> 00:04:56.800
Say Here we go we're going to make a request to this you are out and it's going to return in Jasen or

55
00:04:56.800 --> 00:05:01.650
X amount and we're going to be using japes on him.

56
00:05:01.760 --> 00:05:06.080
So I'm going to scroll down feel free to read the documentation a bit more detail but I'm going to get

57
00:05:06.080 --> 00:05:07.690
straight to an example.

58
00:05:08.120 --> 00:05:12.920
So here's a fool you are el let's copy it in see

59
00:05:16.530 --> 00:05:17.610
web page.

60
00:05:17.610 --> 00:05:26.300
So we're going to get rid of everything here and we're going to start by doing this in ph p.

61
00:05:26.380 --> 00:05:31.690
So this is the you are a lot we need obviously we need to replace the API key without IP key which should

62
00:05:31.690 --> 00:05:38.690
now almost have been created just need to click Create there and then that will create the key for us.

63
00:05:38.890 --> 00:05:39.850
And there it is.

64
00:05:43.060 --> 00:05:44.150
And it's a copy that the

65
00:05:47.650 --> 00:05:53.350
onto our you Arel and then we'll use file get contents

66
00:05:58.520 --> 00:06:04.370
to get the contents of the U r l.

67
00:06:04.490 --> 00:06:05.610
So let's take a look at that.

68
00:06:05.840 --> 00:06:11.570
So you can see straight away immediately we've got everything that we need so I've got an address components

69
00:06:11.570 --> 00:06:12.200
here.

70
00:06:12.650 --> 00:06:14.530
Long name short name etc..

71
00:06:16.000 --> 00:06:21.480
We've got the town or city the state country and the zip code there as well.

72
00:06:21.790 --> 00:06:25.420
And finally we've got the latitude and longitude.

73
00:06:25.810 --> 00:06:28.800
So we've already processed Jason with BHP.

74
00:06:28.840 --> 00:06:33.940
We're going to do with javascript this time or specifically with Jay query and this will prepare for

75
00:06:33.940 --> 00:06:35.370
our postcode web app.

76
00:06:35.500 --> 00:06:41.380
So to get the contents of a well using javascript or Jake where we use AJAX and normally Ajax is linked

77
00:06:41.500 --> 00:06:46.520
to our else on the same domain as your code but there are some exceptions.

78
00:06:46.540 --> 00:06:52.510
And one of those is the data is encoded in JSM and when that's the case we can do what's known as I

79
00:06:52.510 --> 00:06:55.810
crossed the main request to get the data.

80
00:06:55.810 --> 00:06:59.320
So let's Firstly get Jacquard back in our app.

81
00:06:59.320 --> 00:07:01.570
I'll do that with a J.

82
00:07:02.030 --> 00:07:05.810
CDN Google search Cydia and being content delivery network.

83
00:07:06.430 --> 00:07:12.780
And I'll go for the Google dot com CDN and there we go.

84
00:07:13.000 --> 00:07:14.680
We'll go for this one.

85
00:07:17.910 --> 00:07:19.740
All right.

86
00:07:19.830 --> 00:07:21.580
I'll leave that there for the moment.

87
00:07:21.940 --> 00:07:29.160
That will create a very simple HDMI out page with just a title

88
00:07:33.430 --> 00:07:39.280
geocoding and address and then a body.

89
00:07:40.540 --> 00:07:44.010
And then just after that we're going to have our Jake Query.

90
00:07:44.290 --> 00:07:52.050
So let's write some javascript to get our data and set up Javascript.

91
00:07:52.090 --> 00:07:58.750
And then the AJAX call is going to be pretty similar to what we used to but with a couple of small differences.

92
00:07:59.020 --> 00:08:05.650
So we start off as before calling the Ajax function and then we're going to do this with a bunch of

93
00:08:07.660 --> 00:08:09.150
parameters.

94
00:08:09.250 --> 00:08:12.660
The first one is going to be as usual the you are.

95
00:08:13.450 --> 00:08:20.080
And that of course is going to be the same as what we had before.

96
00:08:21.590 --> 00:08:26.010
And then we'll add a type of get.

97
00:08:26.090 --> 00:08:30.200
So this is I get to request for other than a post one because we're just getting something we're not

98
00:08:30.200 --> 00:08:38.360
posting any variables and then we just need to add a function to happen on success.

99
00:08:38.360 --> 00:08:40.640
So when the data is returned.

100
00:08:40.960 --> 00:08:49.700
So let's create a function which will contain the variable data and then find out.

101
00:08:49.700 --> 00:09:02.200
We'll just consult or log the chase on data and then if I spell a function correctly we'll now be able

102
00:09:02.200 --> 00:09:09.960
to get the data via Ajax rather than THP say let's have a look.

103
00:09:11.270 --> 00:09:13.280
And right click and inspect.

104
00:09:13.390 --> 00:09:19.250
Let's take a look at the Kenzo and you can see we've got an object there.

105
00:09:20.020 --> 00:09:26.210
And this has all the data that we need in that we're seeing before.

106
00:09:26.570 --> 00:09:33.990
So if for example we wanted to get these address components say the number the route of code name it

107
00:09:34.000 --> 00:09:34.370
set.

108
00:09:34.430 --> 00:09:38.240
Then we'd have to loop through this particular chase on array.

109
00:09:38.600 --> 00:09:50.180
So for example we could use the J query each function which loops three objects in an array just like

110
00:09:50.180 --> 00:09:51.410
this.

111
00:09:51.770 --> 00:10:00.350
And we want to loop through the results part of our data because that's where all the results are contained.

112
00:10:00.380 --> 00:10:04.370
So we want to apply the each function on data

113
00:10:06.970 --> 00:10:16.170
results and then and then we want to do something with that data.

114
00:10:16.370 --> 00:10:18.100
So we'll create a function.

115
00:10:18.440 --> 00:10:26.750
And in this function we're going to have a key and a value and the key is going to represent the name

116
00:10:28.480 --> 00:10:32.090
so that there and the value is going to represent the valley.

117
00:10:32.140 --> 00:10:34.410
So 6900 all that array there

118
00:10:38.990 --> 00:10:39.530
and then

119
00:10:42.970 --> 00:10:50.250
we'll create that and then for now we'll just let the key just to see what we get.

120
00:10:51.800 --> 00:10:52.540
Let's take a look.

121
00:10:54.280 --> 00:10:56.280
There you can see we've got zero there.

122
00:10:56.700 --> 00:11:04.560
And that's because within the results there's only one item and that's this whole array containing all

123
00:11:04.560 --> 00:11:06.150
of our data.

124
00:11:06.150 --> 00:11:10.930
So let's not we're in a little bit and loop through results zero instead.

125
00:11:11.410 --> 00:11:18.780
So this will be the first set of results and you can see that the first key within that is address components

126
00:11:19.050 --> 00:11:24.070
and then formatted address geometry place ID types.

127
00:11:24.210 --> 00:11:32.130
So that's these elements here for address geometry place id and types.

128
00:11:32.130 --> 00:11:39.450
So if we want to get the address components we could go even further into that and look at the address

129
00:11:40.920 --> 00:11:45.580
components array.

130
00:11:45.720 --> 00:11:54.670
Let's now have a leap through that so called 0 1 2 3 etc. you get the idea.

131
00:11:54.660 --> 00:11:59.850
So that's looping through each of these sub arrays.

132
00:12:01.830 --> 00:12:05.640
So now that you know roughly how these things work I'm just going to get you a mini challenge can you

133
00:12:05.640 --> 00:12:08.070
get the country.

134
00:12:08.150 --> 00:12:15.080
So can you add some code from here to get the United States or US from this data.

135
00:12:15.090 --> 00:12:17.450
It's not easy but you should be able to figure it out.

136
00:12:17.620 --> 00:12:25.690
Go for it.

137
00:12:25.720 --> 00:12:26.600
I hope you managed it.

138
00:12:26.680 --> 00:12:33.430
So the way I'm going to do it is looking at a value and value is this right here.

139
00:12:33.470 --> 00:12:35.960
And then this one and this one.

140
00:12:36.080 --> 00:12:48.380
So for each of the values we want to be looking at value and types and we want to find the one that

141
00:12:48.380 --> 00:12:55.610
has a type of country so notice that types itself is an array.

142
00:12:55.780 --> 00:13:03.100
So the bit that we're going to be interested is types Zerbe which is the first item in the types array

143
00:13:03.100 --> 00:13:11.350
that say let's take a look that's first of just see what that value is.

144
00:13:12.570 --> 00:13:19.920
So starts off as street number root locality minister dev area and country.

145
00:13:19.940 --> 00:13:22.190
So we want to check to see if

146
00:13:25.980 --> 00:13:35.800
the type that is Valley types crime is equal to a country.

147
00:13:37.260 --> 00:13:41.590
Then we want to alert the long name or the short name.

148
00:13:41.910 --> 00:13:44.740
So let's just go for value.

149
00:13:47.160 --> 00:13:47.820
Short name

150
00:13:53.170 --> 00:13:53.990
Let's take a look.

151
00:13:57.390 --> 00:14:01.280
And then we got so I hope you figured out something fairly.

152
00:14:01.690 --> 00:14:06.880
Essentially it's a matter of looping through until we find the type that we want and then extracting

153
00:14:06.880 --> 00:14:07.830
that data.

154
00:14:08.160 --> 00:14:08.760
Great.

155
00:14:08.980 --> 00:14:13.720
So now that we're reasonably familiar with the Google Maps API is we're going to make a little Wailer

156
00:14:14.680 --> 00:14:20.830
a little web app that allows people to extract the postcode or zip code closest to an address.
