WEBVTT
1
00:00:02.500 --> 00:00:06.020
So now that we understood the problem and what state is,

2
00:00:06.130 --> 00:00:07.730
how can we solve it?

3
00:00:07.750 --> 00:00:13.590
How can we manage our state differently than just in our main widget in the main.dart file?

4
00:00:13.990 --> 00:00:20.620
Now a pattern which is recommended by the Flutter team and which is really popular and also easy to learn

5
00:00:20.920 --> 00:00:26.950
is the provider pattern which is added by adding a certain package to your app, the provider package.

6
00:00:27.790 --> 00:00:29.560
So how does this work?

7
00:00:29.560 --> 00:00:41.840
The idea here is that you have a global, a central store or data container in your app, data provider,

8
00:00:41.860 --> 00:00:47.320
that's why it's called provider, which you attach to a widget in your app and that doesn't have to be

9
00:00:47.320 --> 00:00:53.110
the root widget. Here it is but it doesn't have to be the MyApp widget, it can be any widget.

10
00:00:53.110 --> 00:00:59.710
As soon as you added your provider, so this data container to a widget, all child widgets of that widget

11
00:00:59.830 --> 00:01:06.670
can listen to that provider but without passing the data through their constructors, instead they can

12
00:01:07.120 --> 00:01:14.260
add a listener with this of context trick by using this inherited widget which I mentioned earlier

13
00:01:14.320 --> 00:01:20.380
which is a widget built into Flutter which we haven't used directly but which this provider package uses

14
00:01:20.470 --> 00:01:26.740
indirectly to establish a direct communication channel between your widget that needs some data and

15
00:01:26.770 --> 00:01:30.850
that data container which is attached to a totally different widget.

16
00:01:30.850 --> 00:01:36.400
Now the build method for that widget where you attach the listener to or where you added the listener

17
00:01:36.400 --> 00:01:43.500
to then runs whenever the state in that data provider changes but only the build method of that widget

18
00:01:43.510 --> 00:01:45.620
where you listen to the change runs.

19
00:01:45.640 --> 00:01:48.950
So if in our data provider here in this picture,

20
00:01:49.030 --> 00:01:55.600
if the data in there changes, let's say the list of products we loaded, then we'll not reload or rebuild

21
00:01:55.720 --> 00:02:02.020
all widgets we have here but instead in this picture here on this slide, we would only run the build

22
00:02:02.020 --> 00:02:08.200
method in the single product widget because the single product widget in this picture here is the only

23
00:02:08.200 --> 00:02:15.670
widget that set up a listener to our data provider. Now as I mentioned, you can have multiple providers

24
00:02:15.670 --> 00:02:20.560
in the same app, multiple data containers and you can attach them to different or to the same widget

25
00:02:20.830 --> 00:02:22.750
and it doesn't have to be the root widget.

26
00:02:22.900 --> 00:02:27.850
So you could have a cart provider here attached to the cart and then you can also have multiple listeners

27
00:02:27.970 --> 00:02:34.440
to one and the same provider, which also of course are then set up on different widgets that needs that

28
00:02:34.450 --> 00:02:35.060
listener

29
00:02:35.170 --> 00:02:40.450
and all these widgets will rebuild whenever this provider or the data you store in it

30
00:02:40.450 --> 00:02:45.160
updates, whenever you update the data stored in that provider, in that container

31
00:02:45.160 --> 00:02:48.900
so to say. That's the provider package and how you use it

32
00:02:48.900 --> 00:02:53.380
in theory, let's now use it in practice to manage our products there.
