1
00:00:02,100 --> 00:00:07,020
So let's now work on the category items, we need to output our category items here.

2
00:00:07,020 --> 00:00:10,250
We've got the category data but of course that's just some data,

3
00:00:10,260 --> 00:00:11,540
we need widgets though,

4
00:00:11,550 --> 00:00:18,330
we need a list of widgets here in the GridView and for that, we could certainly add the structure of

5
00:00:18,360 --> 00:00:24,480
each item here and manually map our list of transactions into that structure

6
00:00:24,480 --> 00:00:27,120
but I'd rather create a separate file,

7
00:00:27,120 --> 00:00:28,440
the 

8
00:00:30,720 --> 00:00:35,330
category_item.dart file with a category item widget.

9
00:00:35,370 --> 00:00:37,680
This will be a stateless widget

10
00:00:37,890 --> 00:00:44,180
and I'll name it category item because it will output a single category item in our grid of categories

11
00:00:44,220 --> 00:00:48,550
and as always, here you need to import flutter/material.dart.

12
00:00:48,600 --> 00:00:53,510
Now this category item here will be used in our categories screen

13
00:00:53,520 --> 00:00:55,430
here in this GridView.

14
00:00:55,530 --> 00:01:01,500
So how should a single item look like then, what should we return here in the build method?

15
00:01:01,500 --> 00:01:05,780
Well first of all, which data do we expect here?

16
00:01:05,780 --> 00:01:11,930
Well we probably want to output the title of the category and use its color, remember that every category

17
00:01:11,930 --> 00:01:14,700
has a color, to color the background

18
00:01:14,750 --> 00:01:16,490
of the grid item.

19
00:01:16,490 --> 00:01:23,990
So here we need at least two properties, a string which is the title and also a color which is the background

20
00:01:24,110 --> 00:01:26,100
color.

21
00:01:26,240 --> 00:01:31,940
Of course, we then also should add our constructor to assign values to these properties here

22
00:01:32,000 --> 00:01:37,850
and again you can use named arguments here or as I do it here, use positional ones for title and color

23
00:01:37,970 --> 00:01:45,010
and now we want to output the title here on a nice card where the card should have this background color.

24
00:01:45,020 --> 00:01:47,440
Now we could use the default card and try to adjust this

25
00:01:47,450 --> 00:01:53,690
but I'll rather build my own one by using a container. That container here should have some padding

26
00:01:53,920 --> 00:01:59,170
and for that, I'll use EdgeInsets.all 15

27
00:01:59,170 --> 00:02:03,700
and of course you can tweak this value and find a value that best suits your needs.

28
00:02:03,820 --> 00:02:09,320
Now important, EdgeInsets.all actually is a class and an object is created here

29
00:02:09,370 --> 00:02:15,100
and as you learned in that Flutter and Widgets deep dive module, you can optimize the build process a

30
00:02:15,100 --> 00:02:17,990
bit by using const here in front of this

31
00:02:18,040 --> 00:02:23,890
because then when this build method reruns, this object here will not be recreated because Flutter

32
00:02:23,890 --> 00:02:30,730
detects that it's constant, that it can't have changed and therefore, that it should use the old one.

33
00:02:30,730 --> 00:02:32,650
So that's the padding on the container,

34
00:02:32,650 --> 00:02:40,390
now besides the padding, we of course also want to have a child in there and the child for a category

35
00:02:40,390 --> 00:02:41,880
can be really simple,

36
00:02:41,980 --> 00:02:46,870
it should be some text and the text of course should be the title of the category which I want to output.

37
00:02:50,280 --> 00:02:53,270
Now we'll certainly revisit this title to give it some styling

38
00:02:53,280 --> 00:02:59,820
but for now, let's use like this and let's work on the general styling of the container and there, we

39
00:02:59,820 --> 00:03:06,810
could simply assign color which sets a background color to color which now refers to this color property

40
00:03:06,810 --> 00:03:13,410
but I want to have a bit of a more complex background by using a decoration which takes a BoxDecoration

41
00:03:13,440 --> 00:03:19,020
object and in that BoxDecoration here, I want to use a gradient.

42
00:03:19,110 --> 00:03:24,800
We haven't worked with gradients thus far in this course but often gradients can provide a nice look,

43
00:03:24,810 --> 00:03:31,230
so here's a good opportunity to add one. We add a gradient by instantiating the LinearGradient class

44
00:03:31,260 --> 00:03:32,680
which is provided by Flutter,

45
00:03:32,730 --> 00:03:38,070
by the way there also are other gradients, if you just type gradient you get an overview, you have a 

46
00:03:38,090 --> 00:03:43,260
RadialGradient, a SweepGradient and as always, the official docs are a great resource to learn how to

47
00:03:43,260 --> 00:03:47,970
use these if you need a different gradient for your app. Here and in a lot of apps,

48
00:03:47,970 --> 00:03:51,330
the LinearGradient is perfect and the LinearGradient

49
00:03:51,330 --> 00:03:52,980
now of course needs to be configured.

50
00:03:53,010 --> 00:03:58,150
We need to set the colors between which you want to transition and that's a list of colors

51
00:03:58,380 --> 00:04:04,110
and then you also can define the direction over which it should transition.

52
00:04:04,110 --> 00:04:06,170
So let's start with the colors, there

53
00:04:06,180 --> 00:04:13,110
I want to use my color which I get here as an argument but in a slightly more transparent version and that

54
00:04:13,110 --> 00:04:19,650
can be achieved by calling withOpacity on it. withOpacity is a method provided by Flutter on its

55
00:04:19,650 --> 00:04:26,130
color class and there, we could set this to an opacity of .7 to make it slightly more transparent

56
00:04:26,640 --> 00:04:32,940
and then I want to go from that slightly more transparent version of that color to the totally not transparent

57
00:04:33,200 --> 00:04:39,990
version of that color by just providing color like this as the end value of that gradient. Now for

58
00:04:39,990 --> 00:04:47,190
the direction, we can control this with a begin and an end argument and the begin argument here takes

59
00:04:47,250 --> 00:04:54,840
an alignment geometry, such an alignment geometry can be created with the alignment class which gives

60
00:04:54,840 --> 00:05:02,330
you a couple of static properties with basically default coordinates for which this gradient then

61
00:05:02,340 --> 00:05:09,180
will start at and there, we could start in the top left corner and then go to the bottom right,

62
00:05:09,180 --> 00:05:14,760
so as you see, it's really simple to configure such a gradient with the help of alignment and this colors

63
00:05:14,760 --> 00:05:18,430
list here. So with that, we have the gradient,

64
00:05:18,490 --> 00:05:23,500
I'm not done with the BoxDecoration though. In addition to the gradient, I want to set a border radius

65
00:05:23,590 --> 00:05:31,150
to have rounded corners and I'll set this to BorderRadius.circular and then maybe 15,

66
00:05:31,150 --> 00:05:35,510
so now this will use a radius of 15 to round our corners.

67
00:05:35,680 --> 00:05:41,830
BorderRadius.circular is a class constructor provided by Flutter to give you the setting for border

68
00:05:41,830 --> 00:05:47,100
radius which needs a border radius geometry to round off these corners.

69
00:05:47,230 --> 00:05:54,610
Now please note that here, you can't use const because border radius, if you inspect that, does have a constant

70
00:05:54,610 --> 00:05:59,770
constructor on all but the circular constructor is actually not marked as const,

71
00:05:59,770 --> 00:06:07,290
so here we can't use const. So that's the general look of a category item,

72
00:06:07,340 --> 00:06:13,550
now we can use the category item here in the categories screen. First of all, let's import our dummy data

73
00:06:13,550 --> 00:06:14,090
here,

74
00:06:14,090 --> 00:06:22,040
so let's import from the dummy data file and that unlocks that dummy categories list which we have in

75
00:06:22,040 --> 00:06:22,490
there,

76
00:06:22,550 --> 00:06:25,250
all capital case to mark it as

77
00:06:25,250 --> 00:06:30,590
dummy data which is application-wide global which we can't change, which is just acting as a dummy

78
00:06:30,590 --> 00:06:33,200
data source and in the categories screen,

79
00:06:33,200 --> 00:06:39,110
I now want to use that dummy data here because here, we can now use a pattern which we used before,

80
00:06:39,260 --> 00:06:41,100
we need to provide a list of widgets,

81
00:06:41,180 --> 00:06:44,810
so let's take our list of data and map it into a list of widgets.

82
00:06:45,410 --> 00:06:51,380
So here we can refer to our dummy categories and call map on that because it is just a list and call

83
00:06:51,380 --> 00:06:55,410
to list in the end because map gives us an iterable and not a list

84
00:06:55,580 --> 00:07:01,280
and now we have a function that executes on every item in that dummy categories list and that function

85
00:07:01,280 --> 00:07:03,620
therefore gets our category data,

86
00:07:03,680 --> 00:07:10,040
I'll name it catData, you can give it any name you want and it should return a widget which we want

87
00:07:10,040 --> 00:07:15,280
to render for every category in that dummy categories list and that widget

88
00:07:15,290 --> 00:07:21,520
now of course is my category item widget which we just created in the category_item.dart file.

89
00:07:21,560 --> 00:07:27,370
So here, we can now create a category item widget and to that widget,

90
00:07:27,380 --> 00:07:33,560
we have to pass the title and of course, the color. We get that from catData and there we extract the

91
00:07:33,560 --> 00:07:42,000
title and also the color, just like this.

92
00:07:42,000 --> 00:07:47,100
So with that, we got our categories screen and now it would be interesting to see whether that works.
