WEBVTT
1
00:00:02.410 --> 00:00:07.910
For Flutter, I mentioned that one important part would be that we add this authentication screen

2
00:00:08.190 --> 00:00:15.030
and since this is a rather complex screen and I don't want to waste too much time on building yet another

3
00:00:15.390 --> 00:00:23.850
UI and widget tree, I attached a file to this lecture here, the auth_screen.dart file which you simply

4
00:00:23.850 --> 00:00:26.340
can drag and drop into that screen folder.

5
00:00:26.340 --> 00:00:28.260
Now of course, I'll walk you through that file,

6
00:00:28.260 --> 00:00:30.270
no worries, I'll explain what happens in there,

7
00:00:30.300 --> 00:00:37.800
what I built in there but add that file to your screens folder and then let's have a look at it. In that

8
00:00:37.800 --> 00:00:44.310
file, I import dart:math, you'll see why in a second I import material.dart of course and I set up my

9
00:00:44.310 --> 00:00:49.830
own enum which I'll basically use to switch between two different auth modes that will influence on which

10
00:00:49.830 --> 00:00:57.270
kind of form we're showing. We're either signing up or we're logging in and depending on the mode that

11
00:00:57.270 --> 00:01:00.480
was chosen, we have a different label on the button,

12
00:01:00.600 --> 00:01:05.690
we also show an extra confirm password input in sign up mode,

13
00:01:05.790 --> 00:01:07.010
things like that change

14
00:01:07.020 --> 00:01:10.740
and for that, I use an enum down in the code.

15
00:01:10.740 --> 00:01:14.510
Then we have the AuthScreen class here which is a stateless widget, 

16
00:01:14.670 --> 00:01:19.410
I have a routeName, my static const routeName here, so that we can register this in the route table

17
00:01:19.410 --> 00:01:20.850
which we'll do in a second,

18
00:01:21.120 --> 00:01:22.640
then the build method and in there,

19
00:01:22.650 --> 00:01:26.600
I just fetch my device size from MediaQuery.of(context) size,

20
00:01:26.670 --> 00:01:34.470
we did this earlier in the course too. Then here, we have scaffold widget with a stack widget as a body, we

21
00:01:34.470 --> 00:01:35.940
learned about the stack as well,

22
00:01:35.940 --> 00:01:41.100
it allows you to place items on top of each other in a three dimensional space basically

23
00:01:41.100 --> 00:01:46.620
and then the bottommost widget here is a container which actually has a box decoration that sets up

24
00:01:46.620 --> 00:01:50.120
a linear gradient. I also covered linear gradients earlier,

25
00:01:50.220 --> 00:01:53.220
this basically allows you to create a gradient between two colors

26
00:01:53.220 --> 00:01:55.680
and these are simply two such colors.

27
00:01:55.680 --> 00:01:58.230
Basically a linear gradient as we used it before

28
00:01:58.320 --> 00:02:04.050
and then the other item I stack above the gradient basically is a SingleChildScrollView with a container

29
00:02:04.050 --> 00:02:10.320
inside of it which I simply use to configure the height and the width to take the full device height

30
00:02:10.320 --> 00:02:17.940
and width and in there, a column and that column here has centered content as you can tell, to center

31
00:02:17.940 --> 00:02:21.480
the authentication form in the middle as you will soon see

32
00:02:21.480 --> 00:02:29.430
and then there in my children, I have a flexible wrapper around my container which basically displays

33
00:02:29.440 --> 00:02:32.310
the title, the title my shop,

34
00:02:32.370 --> 00:02:36.960
you could use any title you want but if I scroll up a bit, you see there's something interesting. Besides

35
00:02:36.960 --> 00:02:37.910
a margin and a padding,

36
00:02:37.920 --> 00:02:43.860
I do this, I have the transform argument there and then this strange code and we have seen neither of

37
00:02:43.860 --> 00:02:50.520
that. Now transform is an argument which the container supports out of the box which allows you to transform

38
00:02:50.520 --> 00:02:52.940
how that container is presented.

39
00:02:53.060 --> 00:02:57.590
It allows to rotate the container, to scale it or to move it,

40
00:02:57.630 --> 00:03:02.730
of course it has a certain position on the screen and with transform, you could also offset it by a certain

41
00:03:02.730 --> 00:03:05.000
amount on either axis.

42
00:03:05.000 --> 00:03:06.730
Now what's this code here?

43
00:03:06.920 --> 00:03:12.260
This configures how this container should be transformed and if you hover over transform, you see that

44
00:03:12.260 --> 00:03:19.280
transform takes a Matrix4 object. Matrix4 is a class built into Flutter, provided by the material.dart

45
00:03:19.280 --> 00:03:26.000
file and in the end, it's an object that describes the transformation of a container. Matrix4 simply

46
00:03:26.000 --> 00:03:32.410
allows you to describe rotation, scaling and offset of a container all in one object,

47
00:03:32.450 --> 00:03:39.140
so it's a big bundle of information that contains information about how to position and change transform

48
00:03:39.290 --> 00:03:40.330
that container.

49
00:03:40.430 --> 00:03:46.880
Now to configure that, I use the rotationZ constructor here which constructs a new Matrix4 object

50
00:03:46.910 --> 00:03:54.240
as you can see here and this object has a certain rotation, here I use pi and pi is provided by the 

51
00:03:54.260 --> 00:04:01.900
dart:math package which is the number pi, 3.14 and so on and I use pi here to calculate a rotation

52
00:04:01.910 --> 00:04:07.580
basically, a slight angle by which I want to rotate this. rotationZ means that I rotate along the

53
00:04:07.580 --> 00:04:08.630
z-axis.

54
00:04:08.810 --> 00:04:12.320
If we have a look at our device, then we have three axis there - 

55
00:04:12.440 --> 00:04:20.180
the x-axis is left to right, y-axis top to bottom and the z-axis is basically into the device.

56
00:04:20.180 --> 00:04:26.150
So if you're holding the phone in your hand, the z-axis would be from your eyes through the device,

57
00:04:26.510 --> 00:04:30.240
right so into the device in three dimensional space.

58
00:04:30.290 --> 00:04:34.880
Now this spinner here is rotating around the z-axis.

59
00:04:34.880 --> 00:04:40.780
If I place my mouse here in the middle of it, then you could imagine that the z-axis goes through

60
00:04:40.780 --> 00:04:44.260
the device at the point where my mouse is placed,

61
00:04:44.450 --> 00:04:50.210
so it's going from your face through the device and this circle is spinning around that axis.

62
00:04:50.210 --> 00:04:55.310
If you imagine the axis like a stick you stick into the phone, then the spinner would go around it, it would

63
00:04:55.310 --> 00:04:57.440
rotate around the z-axis.

64
00:04:57.620 --> 00:05:03.680
So if you rotate something around the z-axis, that means you don't create a 3D effect which you would

65
00:05:03.680 --> 00:05:09.770
do if you rotate around the y or x-axis because that would always rotate the element such that it feels

66
00:05:09.770 --> 00:05:15.290
like it's coming out of the screen, instead it keeps the two dimensional look but it's simply shifts it

67
00:05:15.290 --> 00:05:21.440
a bit, it gets a slight angle and you'll see how it works in a second of course once we see that screen.

68
00:05:21.770 --> 00:05:28.040
Now what's strange here is this ..translate syntax though, this is a syntax we haven't seen before

69
00:05:28.040 --> 00:05:33.740
in the course. We know that we can of course chain method calls together, for example here I can add a

70
00:05:33.740 --> 00:05:37.080
dot and then here, I could call translate.

71
00:05:37.280 --> 00:05:46.790
So the Matrix4 object which rotationZ returns has a translate method as it seems. Now I'm doing

72
00:05:46.850 --> 00:05:52.340
this translate call here basically because I don't just want to rotate this, I also want to offset it

73
00:05:52.340 --> 00:05:59.090
a little bit and translate is a method that offsets the object or that adds some offsetting configuration

74
00:05:59.090 --> 00:06:01.130
to the Matrix4 object.

75
00:06:01.130 --> 00:06:06.860
The problem with translate just is translate does not return a new Matrix4 object but it returns

76
00:06:06.860 --> 00:06:07.750
void.

77
00:06:07.880 --> 00:06:16.340
So if I call .translate here and I pass my argument like -10 in here, then here this overall

78
00:06:16.340 --> 00:06:24.800
chain, if we comment this out, this overall chain removes void. Transform doesn't want void though,

79
00:06:24.800 --> 00:06:30.410
it wants a Matrix4 object and this chain doesn't return a Matrix4 object anymore because this

80
00:06:30.410 --> 00:06:31.460
here returns

81
00:06:31.460 --> 00:06:38.920
basically what the last method in the chain returns and that is void, the dot dot operator fixes that.

82
00:06:38.970 --> 00:06:45.240
It's a special operator which Dart has, not every programming language has that and the dot dot operator

83
00:06:45.240 --> 00:06:52.500
basically calls translate on that object but does then not return what translate would return but it returns

84
00:06:52.500 --> 00:06:54.080
what the previous statement returned,

85
00:06:54.090 --> 00:06:59.790
so what rotationZ returned and the longer form of writing this to make that really clear would be

86
00:06:59.870 --> 00:07:06.460
that up here for example, you create your transformConfig, whatever you want to name it and there,

87
00:07:06.460 --> 00:07:16.570
you call Matrix4.rotationZ with the value we have down there, so let's say grab this value we have

88
00:07:16.570 --> 00:07:18.440
there.

89
00:07:18.460 --> 00:07:23.230
So now we have a Matrix4 object which is configured to rotate and now we could use transformConfig

90
00:07:23.260 --> 00:07:28.330
and call translate on that and add -10.0.

91
00:07:28.390 --> 00:07:33.970
Now translate is simply a method that does not return a new object but that edits the object on which

92
00:07:33.970 --> 00:07:39.820
it is called and we of course have similar things in our app, for example in the products.dart file, we

93
00:07:39.820 --> 00:07:45.730
have in the end a products class here and all the methods we have in there, like fetch and set products

94
00:07:45.970 --> 00:07:52.480
don't return new or updated versions of this products class, they instead change the product class from

95
00:07:52.480 --> 00:07:58.240
inside, here for example in the end, we overwrite the items property of the products class. So here we

96
00:07:58.240 --> 00:08:01.990
are changing our object from inside and translate does the exact same thing,

97
00:08:01.990 --> 00:08:05.950
it changes the Matrix4 object on which you call it from inside.

98
00:08:05.980 --> 00:08:11.470
Now that's fine here where we store this in a variable and then in a second line, we call something on

99
00:08:11.470 --> 00:08:16.000
that variable and therefore the value is stored and the variable is still the same object but now also

100
00:08:16.000 --> 00:08:22.240
with that change taken into account and you could use that transformConfig down there as a value for

101
00:08:22.240 --> 00:08:28.960
transform and it would work. There's nothing wrong with doing it like this but to avoid having to set

102
00:08:28.960 --> 00:08:32.110
this up up there across multiple lines,

103
00:08:32.290 --> 00:08:38.650
you can use this double dot notation because this basically allows you to have a statement that would

104
00:08:38.650 --> 00:08:45.280
normally take a variable and two lines of code in one line without a variable because you don't return

105
00:08:45.280 --> 00:08:49.390
what translate returns but you instead return what the previous method returned,

106
00:08:49.390 --> 00:08:52.860
in this case what this constructor returned which is a Matrix4 object

107
00:08:53.020 --> 00:08:59.330
and then you just execute this on this object before it is actually used here in the argument.

108
00:08:59.440 --> 00:09:06.460
So you added an object in memory just as if it were stored in a variable which you now call something

109
00:09:06.460 --> 00:09:11.740
onto edit it and then this edited object is returned here but you don't return what translate would

110
00:09:11.740 --> 00:09:12.130
return,

111
00:09:12.130 --> 00:09:18.220
that's what the cascade operator as it is called does. It simply is a replacement for having an extra

112
00:09:18.220 --> 00:09:22.780
variable and multiple lines of code just to set something up and then call something on that and then

113
00:09:22.780 --> 00:09:28.720
use the originally set up object. That was a lot of talking about this but it is important to understand

114
00:09:28.720 --> 00:09:34.630
the syntax, other than that, here is nothing spectacular, just little bit of box shadow set up, then a

115
00:09:34.630 --> 00:09:42.120
title here with a font, the Anton font which we already added earlier and that's it, almost. Down there,

116
00:09:42.190 --> 00:09:45.170
I'm rendering another widget, the AuthCard widget.

117
00:09:45.170 --> 00:09:49.510
The AuthCard widget resides in the same file and this is a stateful widget,

118
00:09:49.510 --> 00:09:53.290
it's a stateful widget which holds the authentication form. Hence here,

119
00:09:53.290 --> 00:09:54.910
I set up my form key,

120
00:09:54.970 --> 00:10:01.210
I also control the AuthMode we're currently in because this class here, this widget here also has a button

121
00:10:01.210 --> 00:10:05.920
to switch between the two auth modes, switch between sign up and login.

122
00:10:05.920 --> 00:10:08.270
I have isLoading here, that should

123
00:10:08.410 --> 00:10:13.660
be a var, so that we can control whether we're currently loading or not and show a loading

124
00:10:13.660 --> 00:10:19.270
spinner if appropriate and I have an extra password controller in here which you'll see in a second why

125
00:10:19.270 --> 00:10:20.330
I have it here,

126
00:10:20.350 --> 00:10:24.590
this is of course connected to my password form field which you'll find below.

127
00:10:24.610 --> 00:10:29.320
Here we have the submit method which will eventually be called, we are doing validation and if validation

128
00:10:29.320 --> 00:10:31.570
fails, we just return and don't continue.

129
00:10:31.570 --> 00:10:32.500
If we do continue,

130
00:10:32.530 --> 00:10:38.830
so if validation succeeded, we save all inputs which you learned will trigger the onSave method on the

131
00:10:38.830 --> 00:10:42.910
inputs and then in the end here, we're setting the loading spinner.

132
00:10:42.910 --> 00:10:49.000
Here is a snippet or a part where we have to add code to then send a login or sign up request based

133
00:10:49.000 --> 00:10:52.170
on which mode we're in and that's it.

134
00:10:52.240 --> 00:10:53.410
Then I have another method,

135
00:10:53.410 --> 00:10:59.400
switchAuthMode which basically switches from login to sign up mode or the other way around and reflects

136
00:10:59.410 --> 00:11:00.160
that in the UI

137
00:11:00.160 --> 00:11:05.030
by calling set state and if we go down further, we have the build method. There

138
00:11:05.130 --> 00:11:10.990
again, I get the device size, below that I have the card with rounded borders with the built-in rounded

139
00:11:10.990 --> 00:11:15.410
rectangle border shape or class which I use here as a value for the shape.

140
00:11:15.790 --> 00:11:19.920
Then the container here, some height assigned to the container,

141
00:11:19.960 --> 00:11:23.910
the height depends on the AuthMode because I have to increase the container in height

142
00:11:23.920 --> 00:11:33.040
if we also render an extra confirm password field. Then we have a form down there with our form key,

143
00:11:33.050 --> 00:11:38.540
it's scrollable, has a column in there because we have multiple inputs and then here, I have my text

144
00:11:38.540 --> 00:11:44.090
form field for the e-mail with some basic validation that simply checks whether there is an @ symbol

145
00:11:44.090 --> 00:11:45.610
in the e-mail or not.

146
00:11:45.650 --> 00:11:49.970
Of course having an @ doesn't automatically make that a valid e-mail,

147
00:11:50.030 --> 00:11:55.340
you could use more complex regular expression validation here if you wanted to but I wanted to keep

148
00:11:55.340 --> 00:11:57.730
this code short and concise.

149
00:11:57.830 --> 00:12:04.130
Then here's the onSave method which saves the value the user entered in an AuthData map

150
00:12:04.130 --> 00:12:09.950
in the end, it's this map we have up there. So here I save the entered e-mail and password in the

151
00:12:09.950 --> 00:12:12.770
end. If we go down further,

152
00:12:12.790 --> 00:12:18.220
here's the password input field where I check that it's at least six characters long and not empty of

153
00:12:18.220 --> 00:12:18.970
course

154
00:12:18.970 --> 00:12:24.310
and here, the passwords text editing controller is assigned too and this controller is used in conjunction

155
00:12:24.310 --> 00:12:30.490
with the last text form field which is only rendered if we're in sign up mode, so now when we are logging

156
00:12:30.490 --> 00:12:36.910
in but if we're signing up because there, users should confirm the password and here by the way also

157
00:12:36.910 --> 00:12:38.210
on the other password field,

158
00:12:38.260 --> 00:12:44.020
I have obscure text set to true which makes sure that the input isn't shown to the user but we have

159
00:12:44.020 --> 00:12:48.730
some stars masking the user input, that's an important side note.

160
00:12:49.000 --> 00:12:53.920
But back to the text editing controller, here in the validation of the confirm password

161
00:12:53.920 --> 00:13:00.490
text form field, there I check whether the value entered into this form field is equal to the value

162
00:13:00.490 --> 00:13:06.190
entered in the other password field, so that only if these two are equal,

163
00:13:06.190 --> 00:13:13.990
this field here is treated as valid. And with that, SizedBox for some spacing, potentially

164
00:13:14.020 --> 00:13:20.740
we show a loading indicator or alternatively if we're not loading, I show a button which either shows

165
00:13:20.740 --> 00:13:23.010
login or sign up as a label

166
00:13:23.020 --> 00:13:29.830
depending on the mode that was chosen by the user and the button has some rounded corners here, something

167
00:13:29.830 --> 00:13:38.050
you can set up on a RaisedButton here with the shape argument, some padding, a color, a text color and that's

168
00:13:38.050 --> 00:13:38.920
it.

169
00:13:38.920 --> 00:13:42.570
This button will in the end when we press it call the submit method.

170
00:13:42.610 --> 00:13:48.010
We also have a second button, a FlatButton below the submit button here which allows you to switch between

171
00:13:48.010 --> 00:13:49.300
sign up and login mode,

172
00:13:49.360 --> 00:13:55.180
the label of the button changes appropriately to tell you what you change to, it triggers the switch

173
00:13:55.210 --> 00:14:02.260
AuthMode function or method which I have up there and I have MaterialTapTargetSize set up here to

174
00:14:02.260 --> 00:14:04.320
basically just shrink the button a little bit.

175
00:14:04.360 --> 00:14:05.180
This will,

176
00:14:05.300 --> 00:14:11.110
you could say, reduce the amount of surface you can hit with your finger to trigger that button, it will

177
00:14:11.110 --> 00:14:15.840
still be large enough but it simply makes it a bit smaller and look nicer in my opinion.

178
00:14:16.000 --> 00:14:19.770
That is the AuthScreen. Besides the things I explained,

179
00:14:19.780 --> 00:14:21.640
nothing we haven't used thus far,

180
00:14:21.850 --> 00:14:27.820
let's now register it in our routes table and also make it our home route because for

181
00:14:27.820 --> 00:14:34.150
now, that should be the main screen users see when they enter our app because users do have to authenticate

182
00:14:34.360 --> 00:14:36.530
before they can start using the app.

183
00:14:36.550 --> 00:14:42.330
So here in the main.dart file, we can simply import from the screens folder and import that 

184
00:14:42.340 --> 00:14:52.000
auth_screen.dart file and with that, we can go down there and here make that our home screen, the AuthScreen

185
00:14:52.120 --> 00:14:55.320
and therefore actually we don't even need to add it to the routes table.

186
00:14:55.530 --> 00:14:56.940
So here, that's the AuthScreen,

187
00:14:56.980 --> 00:15:04.150
if you now save this and start this app on your emulator, you should see that this auth screen is the first

188
00:15:04.150 --> 00:15:06.460
thing that's presented to you in that app,

189
00:15:06.460 --> 00:15:08.950
so let's wait for that to restart and have a look at that.

190
00:15:09.730 --> 00:15:10.320
Here it is,

191
00:15:10.330 --> 00:15:11.520
this is the AuthScreen,

192
00:15:11.530 --> 00:15:17.980
this is basically what this auth_screen.dart file which I gave you renders. This is the transform title with

193
00:15:17.980 --> 00:15:26.800
that slight rotation, feel free of course to play around with the values set up there, in the transform

194
00:15:26.890 --> 00:15:30.100
setup there to see how that changes the look.

195
00:15:30.100 --> 00:15:37.930
And this is the AuthCard, this form here in login mode which is the default, we see e-mail and password,

196
00:15:37.930 --> 00:15:41.670
if we go to sign up, we see confirm password as well.

197
00:15:41.800 --> 00:15:43.460
So this is what we have there,

198
00:15:43.540 --> 00:15:46.900
now let's make sure that users can sign up.
