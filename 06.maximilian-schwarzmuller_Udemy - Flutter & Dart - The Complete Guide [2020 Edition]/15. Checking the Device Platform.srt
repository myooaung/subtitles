1
00:00:02,230 --> 00:00:03,540
So that's all nice,

2
00:00:03,550 --> 00:00:08,120
we have a responsive application on Android

3
00:00:08,290 --> 00:00:16,510
but now what about iOS, for example in landscape mode? This switch here is a material design switch and

4
00:00:16,510 --> 00:00:18,580
it will look the same way on iOS.

5
00:00:18,670 --> 00:00:24,910
The same for our appBar and the floating action button here at the bottom for example is a UI pattern

6
00:00:24,910 --> 00:00:26,990
that doesn't even exist for iOS,

7
00:00:27,100 --> 00:00:32,680
so rendering it there might be confusing to iPhone users who are not used to having such floating action

8
00:00:32,680 --> 00:00:39,470
buttons and therefore now, we'll dive into creating adaptive user interfaces where we still work in one and

9
00:00:39,490 --> 00:00:46,510
the same codebase but now we do it such that we actually build a different user interface regarding

10
00:00:46,510 --> 00:00:49,950
its styling and the look and feel for iOS.

11
00:00:50,470 --> 00:00:58,480
For that, let's first of all bring up an iOS simulator which you can do with open -a simulator.app

12
00:00:58,660 --> 00:01:04,900
on macOS only, this does not work on Windows PCs because you can't build iOS apps there and

13
00:01:04,900 --> 00:01:11,440
therefore you don't have Xcode installed but on macOS, you can now bring up that iPhone simulator so

14
00:01:11,440 --> 00:01:18,220
that we can see how our app looks like on an iPhone, which is of course an important first step to optimizing

15
00:01:18,220 --> 00:01:22,910
it for iOS and an iPhone. With that emulator being up,

16
00:01:22,910 --> 00:01:29,480
let me launch my app on the emulator by quitting my current process, selecting the iPhone emulator here

17
00:01:29,480 --> 00:01:35,990
in the bottom right corner and then rerunning the app here with the help of the debug start with that

18
00:01:35,990 --> 00:01:37,940
debugging command in Visual Studio Code

19
00:01:37,940 --> 00:01:43,900
and now this is built with Xcode for iOS and we'll launch the app on that iPhone simulator.

20
00:01:43,910 --> 00:01:46,400
So let's wait for that to launch and have a look at it there

21
00:01:48,500 --> 00:01:49,610
and this is how it looks like,

22
00:01:49,680 --> 00:01:51,810
not too shabby, certainly not bad

23
00:01:51,810 --> 00:01:58,360
but now as I just mentioned, this looks very Android-like. Now you might or might not want this,

24
00:01:58,360 --> 00:02:01,180
it depends on what you think your users will like

25
00:02:01,180 --> 00:02:03,990
but I will certainly change certain things.

26
00:02:04,090 --> 00:02:09,120
Now for some widgets, it's really easy to adjust the look, like for the switch here in landscape mode.

27
00:02:09,370 --> 00:02:16,900
If you have that switch there, you can easily get the iOS look by going to the place where you're using

28
00:02:16,900 --> 00:02:17,440
the switch,

29
00:02:17,500 --> 00:02:24,460
in our case in the main.dart file here and for some widgets, like the switch and the official docs tell

30
00:02:24,460 --> 00:02:28,150
you when that is available, you can use a special constructor,

31
00:02:28,150 --> 00:02:32,470
the adaptive constructor. It takes the same configuration as the normal switch

32
00:02:32,470 --> 00:02:38,100
but the difference here is that it automatically adjusts the look based on the platform.

33
00:02:38,110 --> 00:02:44,230
So now you see we have that iOS switch here on iOS and if I would run this on Android again, we would

34
00:02:44,230 --> 00:02:46,010
have the Android look again.

35
00:02:46,030 --> 00:02:52,660
So that's pretty neat because that is a quick and easy win we can get to well have an item or have a

36
00:02:52,660 --> 00:02:58,580
widget that looks more iOS-like on iOS and doesn't have the default material

37
00:02:58,600 --> 00:03:02,330
look. Of course by the way,

38
00:03:02,330 --> 00:03:08,690
you can also change the color here and you could set the active color here to theme of context and then

39
00:03:08,690 --> 00:03:14,870
use the accent color to still use that accent color if you wanted that because you might want to keep

40
00:03:15,110 --> 00:03:16,660
the general color theme.

41
00:03:16,730 --> 00:03:20,930
There is no need to swap that as well if you like that in general,

42
00:03:20,930 --> 00:03:23,400
you can definitely use these material colors,

43
00:03:23,420 --> 00:03:27,000
it's only about adjusting the parts of your app that you do want to adjust,

44
00:03:27,010 --> 00:03:32,110
so now for example, I have that yellow background color. So that is nice,

45
00:03:34,640 --> 00:03:36,930
what about that floating action button though?

46
00:03:37,010 --> 00:03:38,810
We don't want that on iOS at all,

47
00:03:38,810 --> 00:03:40,070
it shouldn't be there.

48
00:03:40,100 --> 00:03:41,450
I don't care about its look,

49
00:03:41,480 --> 00:03:43,900
it shouldn't be there because it's not a default

50
00:03:43,910 --> 00:03:50,950
iOS pattern to have such a button. Well just as you can find out which width you have or which orientation,

51
00:03:51,350 --> 00:03:54,540
you can also find out which platform you're running on

52
00:03:54,660 --> 00:03:58,970
and here in the main.dart file, we are of course rendering the floating action button,

53
00:03:58,970 --> 00:04:02,630
we can simply not render it if we are on iOS.

54
00:04:03,200 --> 00:04:08,000
To do that, you first of all need to add an import at the top, the very top,

55
00:04:08,000 --> 00:04:09,460
that's just a convention,

56
00:04:09,680 --> 00:04:13,820
you can import dart:io and it's just a convention that you have all your Dart imports

57
00:04:13,850 --> 00:04:19,640
at the very top, then all packages like Flutter but other third-party packages as well in the next block

58
00:04:19,640 --> 00:04:22,460
below that and then below that, your own imports.

59
00:04:22,580 --> 00:04:28,790
So from dart:io, I import a core feature that's baked into Dart, not just into Flutter,

60
00:04:28,790 --> 00:04:35,540
I can find out on which platform my app is running with the help of platform. and then for example

61
00:04:35,540 --> 00:04:41,060
you have isIOS to check if you're on iOS and if I am, this will give me a boolean.

62
00:04:41,060 --> 00:04:45,530
So if this is true, I'll use this ternary expression to render an empty container,

63
00:04:45,530 --> 00:04:49,940
so basically not render anything, otherwise I'll render my floating action button.

64
00:04:50,720 --> 00:04:55,450
So with that, I ensure that if I'm on iOS, I have no floating action button down there

65
00:04:55,550 --> 00:04:57,840
and there's also nothing invisible you could tap.

66
00:04:57,890 --> 00:05:01,790
You can now only open that modal sheet here with the help of the plus up there.

67
00:05:03,350 --> 00:05:10,820
So the platform is check here is very useful and it allows you to check for a broad variety of platforms,

68
00:05:10,820 --> 00:05:17,090
you can check for Linux, macOS, Windows, if you would run your app somehow on an operating system like

69
00:05:17,090 --> 00:05:17,810
this.

70
00:05:17,810 --> 00:05:24,200
You can check for Android, for Fuchsia which is also another mobile operating system developed by Google,

71
00:05:24,770 --> 00:05:27,080
not currently used and so on.

72
00:05:27,080 --> 00:05:28,570
So this is what you can check

73
00:05:28,610 --> 00:05:33,440
and this of course allows you to easily swap or render different widgets based on the platform you're

74
00:05:33,440 --> 00:05:34,010
running on.
