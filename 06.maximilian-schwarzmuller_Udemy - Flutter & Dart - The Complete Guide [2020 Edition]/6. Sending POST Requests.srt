1
00:00:02,390 --> 00:00:04,190
So let's start with storing data,

2
00:00:04,190 --> 00:00:10,730
we want to send a HTTP request when we hit that save button and we successfully validated our form and

3
00:00:10,730 --> 00:00:12,030
submitted it.

4
00:00:12,050 --> 00:00:15,730
So we want to send a HTTP request to this back-end, to this

5
00:00:15,830 --> 00:00:20,990
URL here in the end or to a URL that's based on that to be precise

6
00:00:21,050 --> 00:00:24,280
and for that, let's first of all dive in our code.

7
00:00:24,430 --> 00:00:28,900
Let's go to the place where we do create a new product and that's of course the edit product screen,

8
00:00:29,330 --> 00:00:29,810
there

9
00:00:29,830 --> 00:00:37,530
in the end once we submitted our form, what happens is that we call add product here.

10
00:00:37,550 --> 00:00:42,560
So now we have two different approaches on how to send that HTTP request,

11
00:00:42,620 --> 00:00:43,670
we can send it here,

12
00:00:44,210 --> 00:00:50,750
so next to add product either before we added the product or after we added it and depending on how

13
00:00:50,750 --> 00:00:55,470
we control this, it does not make a difference or it does make one, more on that in a second

14
00:00:55,670 --> 00:01:01,400
but the alternative place to sending this is that we don't send it here which is inside of a widget,

15
00:01:01,400 --> 00:01:06,290
remember that, we're inside of a widget here, inside of a widget class, so that we don't have all the

16
00:01:06,290 --> 00:01:11,720
HTTP code here in the widget but have it somewhere else because you might remember that earlier

17
00:01:11,720 --> 00:01:12,970
in the course, I mentioned

18
00:01:13,040 --> 00:01:16,820
that it's always a good idea to move logic out of your widget.

19
00:01:16,820 --> 00:01:23,030
You want to have a relatively lean widget which focuses mostly on building the widget tree and then

20
00:01:23,030 --> 00:01:30,500
has some logic for managing its UI and the data you work with in your UI. All the heavy lifting

21
00:01:30,860 --> 00:01:36,800
of manipulating data, storing data and sending data to a back-end is typically not something you want

22
00:01:36,800 --> 00:01:38,520
to do inside of a widget,

23
00:01:38,660 --> 00:01:44,690
instead we could do it inside of our provider, actually inside of the add product method in the

24
00:01:44,690 --> 00:01:46,320
products.dart file therefore.

25
00:01:46,340 --> 00:01:52,940
So here in the products class which we use to manage the products of our app, we could also make sure

26
00:01:52,940 --> 00:01:57,410
that we send the HTTP request that saves that data on the server,

27
00:01:57,410 --> 00:02:03,410
so we still also manage it locally of course because we need that local list of products in our app,

28
00:02:03,500 --> 00:02:06,320
we want to have that data we work with in our app,

29
00:02:06,320 --> 00:02:10,040
we need to fetch it from a server and then manage it in our app at some point

30
00:02:10,040 --> 00:02:16,700
but besides managing it locally, I also want to send a snapshot to the server when we add a product, so

31
00:02:16,700 --> 00:02:21,260
that in the future when our app launches or whatever, we can load our data from there,

32
00:02:21,290 --> 00:02:22,970
that's the idea.

33
00:02:22,970 --> 00:02:28,520
So therefore here is a much better place to send HTTP requests and that's therefore what I

34
00:02:28,520 --> 00:02:31,940
will do. For this here in the products.dart file,

35
00:02:32,120 --> 00:02:35,090
I'll import this HTTP package which we installed,

36
00:02:35,090 --> 00:02:41,660
so from the HTTP package here, I'll install or I'll import the http.dart file and I'll actually

37
00:02:41,660 --> 00:02:43,570
import this as HTTP,

38
00:02:43,640 --> 00:02:45,320
so I'll use a prefix here.

39
00:02:45,410 --> 00:02:51,650
You don't have to do that but since this exposes a lot of methods and variables and stuff, I want to

40
00:02:51,650 --> 00:02:57,410
avoid name clashes and therefore I bundle this all on this HTTP prefix which ensures that we never

41
00:02:57,410 --> 00:03:02,030
run into any name clashes because we always access the features from this package

42
00:03:02,060 --> 00:03:10,720
now with http. So with that imported, we can now start using features from that package and again,

43
00:03:10,720 --> 00:03:13,540
we'll do that here in add product.

44
00:03:13,540 --> 00:03:19,900
Now I mentioned that it might or might not make a difference on whether we first run our HTTP code

45
00:03:20,050 --> 00:03:26,020
and then change our data locally and notify listeners or if we do it the other way around

46
00:03:26,110 --> 00:03:32,380
and the reason for that making a difference simply is that HTTP requests take some time to finish

47
00:03:32,680 --> 00:03:38,170
because we need to send something to a server, the server needs to do its job and send back a response,

48
00:03:38,170 --> 00:03:40,670
that's how web requests work.

49
00:03:40,720 --> 00:03:46,340
Now during that time whilst we wait for the response, our app execution doesn't stop,

50
00:03:46,360 --> 00:03:48,790
our app doesn't freeze and that's good,

51
00:03:48,790 --> 00:03:50,050
it would be bad if it would.

52
00:03:50,620 --> 00:03:54,610
So therefore the code, when we send a HTTP request by default

53
00:03:54,610 --> 00:03:59,500
doesn't wait for this request to complete unless we tell it to wait

54
00:03:59,500 --> 00:04:01,320
and I'll show you both options here

55
00:04:01,390 --> 00:04:05,290
but first of all, let's send an HTTP request. For this,

56
00:04:05,320 --> 00:04:11,890
we need a URL, so we can create a const here actually because the URL will not change at runtime

57
00:04:12,890 --> 00:04:19,700
which should hold the string and this is basically this URL but now, Firebase and that's really

58
00:04:19,700 --> 00:04:28,070
just Firebase, not HTTP requests in general, works such that you can specify any extra segment here,

59
00:04:28,460 --> 00:04:35,950
like products which you essentially want to create as a folder or as a collection in the database here.

60
00:04:35,960 --> 00:04:41,420
Now that's really just Firebase, behind the scenes, it reads that URL when it gets a request sent

61
00:04:41,420 --> 00:04:46,850
to that URL and translates this into a database query which creates such a collection and stores the

62
00:04:46,850 --> 00:04:47,950
data there.

63
00:04:48,020 --> 00:04:54,190
Other APIs what you might be using might have clearly predefined endpoints to which you send requests

64
00:04:54,260 --> 00:04:58,340
and there, you might not have the freedom of adding any segment you want.

65
00:04:58,340 --> 00:05:03,830
So this is really a Firebase thing and related to how Firebase works but here, you can send this to products

66
00:05:03,830 --> 00:05:09,980
or prods or whatever you want and it will create a database collection for that. And another Firebase

67
00:05:10,010 --> 00:05:13,790
specialty is that you have to add .json here at the end.

68
00:05:13,880 --> 00:05:17,860
Again this is not a general back-end request thing,

69
00:05:17,900 --> 00:05:24,990
most APIs will not require this, it's just that Firebase requires this when it parses your incoming request.

70
00:05:25,070 --> 00:05:31,460
So the way or the exact endpoint we send here depends on Firebase and of course, you learned such things

71
00:05:31,460 --> 00:05:34,530
from the official Firebase docs for its REST API,

72
00:05:34,580 --> 00:05:37,580
other APIs you might be using might work different.

73
00:05:37,580 --> 00:05:43,770
The idea that you send requests with a certain verb to a certain endpoint is always the same though.

74
00:05:43,880 --> 00:05:46,940
So this is our URL to which we send the request

75
00:05:46,940 --> 00:05:53,360
and now here since I want to append data, Firebase offers us to send a post request.

76
00:05:53,360 --> 00:05:58,070
We do this by using the HTTP package which I prefixed with HTTP,

77
00:05:58,070 --> 00:06:04,850
so we use http. here to access the features from that package and there, you'll find a post method

78
00:06:04,850 --> 00:06:06,580
or a post function,

79
00:06:06,620 --> 00:06:12,280
this sends a post request to the URL which you have to specify as an argument.

80
00:06:12,290 --> 00:06:18,110
So here I have my URL const, I pass this to post and we'll send a post request to that URL.

81
00:06:19,510 --> 00:06:26,530
Now a post request however doesn't just need a URL, you also need to define what kind of data you want

82
00:06:26,530 --> 00:06:32,380
to send there, right? Because the URL alone doesn't say anything about which data you want to store.

83
00:06:32,560 --> 00:06:35,770
Therefore, post takes a couple of named arguments,

84
00:06:35,770 --> 00:06:40,990
for example you could also configure the headers, headers basically are metadata which you can attach

85
00:06:40,990 --> 00:06:42,820
to your HTTP requests,

86
00:06:42,820 --> 00:06:46,540
you don't need that here but if you were a bit more advanced and you know how to work with these and you

87
00:06:46,540 --> 00:06:50,760
have an API where you need to set special headers, you can do this with headers.

88
00:06:51,070 --> 00:06:56,530
Here important for us is the body named argument because this allows us to define the request body which

89
00:06:56,530 --> 00:06:59,410
is the data that gets attached to the request

90
00:06:59,680 --> 00:07:12,710
and now here for the body, we should use JSON data. JSON written like this, stands for JavaScript Object

91
00:07:15,270 --> 00:07:16,340
Notation.

92
00:07:16,590 --> 00:07:19,390
Now we'll not write JavaScript code here, no worries

93
00:07:19,500 --> 00:07:26,630
but this is a data format, just like HTML is one or like normal plaintext is one,

94
00:07:26,640 --> 00:07:29,520
it's a format for storing and transmitting data

95
00:07:29,520 --> 00:07:34,790
you could say. It's a format that's particularly readable by machines and therefore it's the

96
00:07:34,790 --> 00:07:39,140
defacto standard format for exchanging data with web servers,

97
00:07:39,150 --> 00:07:44,490
so here, we need to attach to data we want to send in JSON format. The data we want to send of course

98
00:07:44,490 --> 00:07:50,070
is our product and if I would add product like this, it would not work, despite us not getting an error

99
00:07:50,070 --> 00:07:50,440
here,

100
00:07:50,460 --> 00:07:57,660
we would later get one because this is an object in Dart and that's not at all convertible to JSON

101
00:07:57,750 --> 00:08:01,410
like this, at least it won't automatically convert,

102
00:08:01,410 --> 00:08:06,510
instead you can create JSON or you can convert it to JSON. For this,

103
00:08:06,510 --> 00:08:13,590
let's first of all import something from Dart, so a core library baked into Dart and that's the convert

104
00:08:14,010 --> 00:08:15,480
library.

105
00:08:15,480 --> 00:08:17,910
This offers tools for converting data

106
00:08:17,910 --> 00:08:20,760
and here, we need to convert data into JSON.

107
00:08:20,760 --> 00:08:28,850
We do this by calling JSON, which is now an object or a class, a feature made available by that Dart

108
00:08:28,860 --> 00:08:30,570
convert library,

109
00:08:30,690 --> 00:08:32,830
json.encode.

110
00:08:32,910 --> 00:08:36,570
Now this takes some data which we'll now convert to JSON.

111
00:08:36,630 --> 00:08:43,950
We still can't pass our product object here but we can pass a map because it knows how to convert maps

112
00:08:43,950 --> 00:08:53,070
to JSON. So we can simply create a map here with a title key which holds product.title, with a description

113
00:08:53,310 --> 00:09:01,620
key which holds product.description, with an imageUrl key which unsurprisingly holds our product

114
00:09:01,710 --> 00:09:07,730
imageUrl and with a price key which holds our product.price key

115
00:09:08,340 --> 00:09:13,340
and last but not least, also isFavorite which should hold

116
00:09:13,380 --> 00:09:15,460
product.isFavorite.

117
00:09:15,510 --> 00:09:18,030
For now, I will also store it like this on the server,

118
00:09:18,120 --> 00:09:24,840
later in a separate module, once we added users, we'll store this differently on a per user basis.

119
00:09:25,080 --> 00:09:31,250
So now this will send a post request to this URL with this JSON data attached,

120
00:09:31,380 --> 00:09:36,810
so this will be converted to this JSON format and in the end, we send this piece of data to our server

121
00:09:36,810 --> 00:09:37,950
and store it there.

122
00:09:39,540 --> 00:09:46,260
Now if we do it like that, let's see whether that works. If I enter test here,

123
00:09:46,290 --> 00:09:47,890
12.99,

124
00:09:48,000 --> 00:09:58,280
this is a test and now I pick an image like I did earlier in the course, if I now save this,

125
00:09:58,330 --> 00:10:00,070
you see this gets added here

126
00:10:00,070 --> 00:10:05,270
and if you now go to your Firebase web console, here you should see a product node,

127
00:10:05,320 --> 00:10:11,080
there you see this cryptic string which was autogenerated by Firebase as I can tell you

128
00:10:11,140 --> 00:10:14,140
and if you expand this, you see the data you submitted.

129
00:10:14,200 --> 00:10:21,640
So this now was stored on the server but actually, it's important to understand how this works because

130
00:10:21,850 --> 00:10:28,900
even though we didn't see it here, actually we did not wait for this HTTP request to complete to add our

131
00:10:28,900 --> 00:10:35,080
product here to our in memory data or to our in memory list of products

132
00:10:35,080 --> 00:10:40,060
and one problem of that approach is that we still have our own ID here whereas it would be much nicer

133
00:10:40,060 --> 00:10:46,090
to use this autogenerated ID Firebase gives us here, this cryptic string here, that would be much nicer

134
00:10:46,090 --> 00:10:50,840
to use. Now for that however, we have to wait for this HTTP request to finish

135
00:10:50,950 --> 00:10:53,440
and that's not the default behavior of Dart.
