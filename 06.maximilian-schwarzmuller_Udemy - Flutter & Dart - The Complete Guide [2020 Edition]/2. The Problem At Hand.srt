1
00:00:02,250 --> 00:00:08,160
Now for this module, I'll again come back to this personal expenses planner

2
00:00:08,160 --> 00:00:16,110
we wrote over the last course sections. We'll not add any new features to this application but we'll use it

3
00:00:16,170 --> 00:00:22,050
as a dummy or as an application to explore a couple of under the hood things and a couple of advanced

4
00:00:22,050 --> 00:00:22,770
things

5
00:00:22,770 --> 00:00:29,280
as I mentioned in the introduction to this module. And the thing I want to start with is how Flutter

6
00:00:29,550 --> 00:00:35,070
actually draws the content you're seeing here on the screen and what it really means

7
00:00:35,130 --> 00:00:42,120
when I said that Flutter executes the build method because as you probably already noticed and as I already

8
00:00:42,120 --> 00:00:49,370
mentioned, build gets executed relatively often and every widget in our application has a build method.

9
00:00:49,440 --> 00:00:57,600
So does this mean that whenever build runs, Flutter actually redraws the entire screen and therefore,

10
00:00:57,690 --> 00:01:03,780
running build is actually bad because as you can imagine, whenever Flutter has to really redraw the

11
00:01:03,780 --> 00:01:10,380
screen and redraw the pixels on the screen and rebuild all your your widgets, your elements,

12
00:01:10,380 --> 00:01:16,930
that sounds like a performance impact and actually, it would be. The good thing is Flutter doesn't redraw

13
00:01:17,020 --> 00:01:24,940
or recreate the entire UI on every build call but let's simply have a look at what Flutter really does.

14
00:01:25,020 --> 00:01:33,000
The first important thing to realize is that Flutter aims to give you a 60fps application, so it updates

15
00:01:33,000 --> 00:01:41,400
the screen 60 times per second and that of course means that it does indeed redraw the pixels 60 times

16
00:01:41,400 --> 00:01:42,620
per second.

17
00:01:42,630 --> 00:01:44,510
Now this however is not bad,

18
00:01:44,550 --> 00:01:50,050
that's how all apps and all the games that run at 60fps or more work

19
00:01:50,160 --> 00:01:56,700
and of course also for lower FPS rates. In the end, the FPS measure really just means frames

20
00:01:56,700 --> 00:02:02,700
per second and that means that the screen or what you see on the screen is repainted X amount of

21
00:02:02,700 --> 00:02:03,950
times per second,

22
00:02:03,960 --> 00:02:08,560
so in a 60fps application, that means 60 times per second.

23
00:02:08,580 --> 00:02:14,610
Now this would only then become inefficient if Flutter would have to recalculate the entire layout here

24
00:02:14,660 --> 00:02:21,120
60 times per second because when Flutter draws something onto the screen, for the first

25
00:02:21,120 --> 00:02:26,160
time, when it draws it for the first time, it needs to figure out the position of every element, the color

26
00:02:26,160 --> 00:02:31,800
of every element, the text of every element, so it needs to configure every single pixel on the screen. For

27
00:02:31,800 --> 00:02:33,650
subsequent draws,

28
00:02:33,660 --> 00:02:40,980
so for refreshes of the user interface, if nothing changed, Flutter takes the old information it already

29
00:02:40,980 --> 00:02:45,720
derived and paints that on the screen which is super fast and very efficient.

30
00:02:45,900 --> 00:02:49,050
So the refresh rate itself is not a problem,

31
00:02:49,050 --> 00:02:54,390
it would only be a problem if Flutter would have to recalculate everything on the screen with every

32
00:02:54,390 --> 00:02:59,770
refresh. And now that of course leads to the question, is that what's happening when build is called?

33
00:02:59,770 --> 00:03:07,140
Does that mean that Flutter does have to re-build, recalculate this element and all its child elements?

34
00:03:07,410 --> 00:03:11,280
For this, let's dig a bit deeper and understand what build really does.
