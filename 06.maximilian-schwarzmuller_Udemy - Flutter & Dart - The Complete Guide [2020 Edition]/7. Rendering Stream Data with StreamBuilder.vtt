WEBVTT
1
00:00:02.270 --> 00:00:09.080
Nachdem wir das Setup abgeschlossen haben und nun mit Firebase sprechen können und die Echtzeitdaten in

2
00:00:09.080 --> 00:00:15.740
Aktion sind, können wir das Gelernte nutzen, um diesen seltsamen Listener nicht einzurichten, wenn wir

3
00:00:15.770 --> 00:00:24.410
auf die Schaltfläche Hinzufügen klicken, sondern stattdessen unsere Nachrichten ausgeben hier mit hilfe des list view builder und das wird

4
00:00:24.470 --> 00:00:25.960
super super einfach.

5
00:00:26.060 --> 00:00:28.670
Schnappschüsse geben uns einen Stream.

6
00:00:28.700 --> 00:00:35.090
Wie bereits erwähnt, ist ein Stream einfach ein Dart-Objekt, das einen neuen Wert ausgibt, wenn sich eine Datenquelle

7
00:00:35.150 --> 00:00:39.090
ändert, wenn eine Datenquelle uns am Ende einen neuen Wert gibt.

8
00:00:39.140 --> 00:00:46.360
Jetzt wird das gesamte Stream-Ding automatisch per Firebase-Byte im Fire Store eingerichtet und verwaltet, das von dem von

9
00:00:46.370 --> 00:00:48.650
uns hinzugefügten Cloud-Firestorm-Paket gepackt wird.

10
00:00:48.710 --> 00:00:49.940
Das ist also sehr praktisch.

11
00:00:49.940 --> 00:00:51.920
Wir müssen dort nichts tun.

12
00:00:52.640 --> 00:00:58.010
Noch besser als dieses Flattern ist ein nettes kleines Widget, das Sie verwenden können, und

13
00:00:58.010 --> 00:01:04.880
das ist das Stream-Builder-Widget hier im Körper, anstatt die Liste direkt auszugeben, werden Sie einen Stream-Builder ausgeben, den es

14
00:01:04.880 --> 00:01:05.860
jetzt gibt.

15
00:01:05.870 --> 00:01:08.390
Auch dies kommt mit Flattern.

16
00:01:08.450 --> 00:01:11.780
Es ist nicht Teil von Firebase und Sie müssen es nicht selbst bearbeiten.

17
00:01:11.780 --> 00:01:21.340
Es kommt mit Flattern, um das Builder-Widget zu streamen. Hier werden zwei Hauptargumente für den Konstruktor verwendet: ein Stream mit dem Namen

18
00:01:21.520 --> 00:01:25.300
argument und ein Builder mit dem Namen argument.

19
00:01:25.360 --> 00:01:34.820
Das Stream-Argument, wie der Name schon sagt, möchte einen Stream, damit wir diesen Code hier bis hin zu Snapshots einschließlich Snapshots abrufen können.

20
00:01:34.820 --> 00:01:41.720
Wenn Sie jedoch die Liste ausschließen und die Kosten für das Abhören aufrufen, wird dies durch Flattern

21
00:01:41.720 --> 00:01:43.740
mit dem Stream-Builder behandelt.

22
00:01:43.760 --> 00:01:51.520
Also nehmen wir diesen Code und schneiden ihn von dort unten ab und fügen ihn als Wert für den Stream hinzu.

23
00:01:51.610 --> 00:01:59.800
Jetzt hat der Builder dann einmal eine Funktion, die zum Erstellen des Kontexts benötigt und die den neuesten Snapshot erhält, den wir

24
00:01:59.800 --> 00:02:04.830
aus dem Stream erhalten, so dass der neueste Daten-Snapshot aus dem Stream stammt.

25
00:02:04.870 --> 00:02:10.750
Hier haben wir also eine Funktion, die zum Kontext und zu diesem Stream-Snapshot gelangt, und wir erhalten

26
00:02:13.410 --> 00:02:16.440
einen neuen Snapshot, wenn sich der Stream ändert.

27
00:02:16.440 --> 00:02:22.930
Diese Builder-Funktion wird also immer wieder ausgeführt, wenn der Stream uns einen neuen Wert gibt.

28
00:02:22.950 --> 00:02:29.430
Immer wenn wir einen neuen Wert erhalten, ist diese Funktion regex-gesichert. Daher werde ich meinen Listenansicht-Builder in

29
00:02:29.610 --> 00:02:35.650
diese Funktion einfügen, damit die Listenansicht neu generiert wird, wenn ich einen neuen Wert erhalte.

30
00:02:35.670 --> 00:02:40.820
Jetzt mit regeneriert meine ich immer noch, dass das Flattern nicht die gesamte Benutzeroberfläche aktualisiert.

31
00:02:40.890 --> 00:02:46.660
Ich meine nur, dass das Flattern die Benutzeroberfläche neu bewertet und prüft, ob dort etwas aktualisiert werden

32
00:02:46.670 --> 00:02:47.140
muss.

33
00:02:47.160 --> 00:02:49.280
Das wird also sehr effizient sein.

34
00:02:49.410 --> 00:02:58.170
Nehmen wir also diesen Listenansicht-Builder und geben ihn hier zurück, anstatt diese Builder-Funktion jetzt

35
00:02:58.280 --> 00:02:59.100
hier.

36
00:02:59.310 --> 00:03:03.700
Lassen Sie es uns tatsächlich wie in diesem Jahr schließen.

37
00:03:03.780 --> 00:03:10.830
Fügen Sie diese zusätzlichen Klammern hier hinzu, entfernen Sie sie jedoch dort, und wir können diesen Code

38
00:03:10.830 --> 00:03:17.100
auch dort unten entfernen und diese beiden schließenden Klammern hier und außerhalb des Semikolons entfernen.

39
00:03:17.100 --> 00:03:23.460
Verwenden Sie ein Komma anstelle des Hier und speichern Sie alles und formatieren Sie es neu. Sie sollten diesen Code

40
00:03:26.460 --> 00:03:33.150
haben, sodass wir jetzt im Wesentlichen den Stream Builder hinzufügen, der ihn mit unserem Stream verbindet, und definieren, welche Funktion ausgeführt werden

41
00:03:33.150 --> 00:03:36.030
soll, wenn dieser Stream uns einen neuen Wert gibt.

42
00:03:36.030 --> 00:03:43.770
Hier wird nun der Stream-Snapshot unser Ziel sein, Zugriff auf die empfangenen Daten zu erhalten, und wir können jetzt

43
00:03:43.770 --> 00:03:49.740
die Anzahl der fest codierten Elemente hier durch Stream-Snapshot-Punktdaten ersetzen, die uns Zugriff auf

44
00:03:49.770 --> 00:03:58.290
die konkreten Daten geben, die wir aus den Dot-Stream-Dokumenten der Stream-Dot-Dokumente erhalten haben Das Feld enthält einige Dokumente, da die Daten,

45
00:03:58.290 --> 00:04:03.540
mit denen wir arbeiten, unsere Sammlung sind, sodass wir Dokumente haben

46
00:04:03.540 --> 00:04:11.050
und diese Dokumente eine bestimmte Länge haben. Jetzt werden so viele dieser Arbeitstexte gerendert, wie wir Dokumente haben.

47
00:04:11.060 --> 00:04:14.150
Wenn wir dies jetzt speichern, sehen wir dort unten einen Fehler.

48
00:04:14.150 --> 00:04:21.220
Trotzdem sorgen Sie hier für die Arbeit, was Sinn macht, weil wir zwei Nachrichten haben.

49
00:04:21.410 --> 00:04:24.430
Jetzt erhalten wir eine Fehlermeldung, da diese Daten nicht vorhanden sind.

50
00:04:24.470 --> 00:04:31.550
Von Anfang an, wenn die Anfrage hinter den Kulissen an die empfangenen Daten gesendet wird, sind

51
00:04:31.550 --> 00:04:32.970
keine Daten vorhanden.

52
00:04:32.990 --> 00:04:40.230
Eigentlich sollten wir hier im Stream-Snapshot überprüfen, ob unser Verbindungsstatus gleich dem Verbindungsstatus DOT-Warten ist und der

53
00:04:40.230 --> 00:04:47.570
Verbindungsstatus ein Objekt ist, das ebenfalls mit Flattern einhergeht und bei dem diese Warteeigenschaft funktioniert, um genau zu

54
00:04:47.930 --> 00:04:53.870
sein, es ist eine Aufzählung, aber es wartet Wert, der uns im Grunde sagt,

55
00:04:53.870 --> 00:05:00.110
dass wir derzeit noch auf einige Daten warten und wir ein zentrales Widget mit einer

56
00:05:00.110 --> 00:05:05.750
zirkulären Fortschrittsanzeige zurückgeben könnten, um dies anzuzeigen, während wir auf Daten warten.

57
00:05:05.750 --> 00:05:09.380
Jetzt erhalten wir keine Fehlermeldung, wenn wir diese Anwendung neu laden.

58
00:05:09.530 --> 00:05:14.870
Wir werden den Indikator nicht wirklich sehen, da er superschnell geladen wird, aber jetzt verarbeiten wir

59
00:05:14.870 --> 00:05:21.260
diese Millisekunde, in der auch keine Daten vorhanden sind. Abgesehen von der Ausgabe, die funktioniert, wäre es natürlich besser,

60
00:05:21.260 --> 00:05:24.340
die tatsächlichen Daten auszugeben, die wir hier haben.

61
00:05:24.470 --> 00:05:27.600
Darauf können wir hier nicht zugreifen.

62
00:05:27.610 --> 00:05:30.020
Wir wissen, wie wir auf alle Dokumente zugreifen können.

63
00:05:30.310 --> 00:05:35.080
Also werde ich das tatsächlich greifen und es hier in einer neuen Variablen speichern.

64
00:05:35.230 --> 00:05:36.850
Unterlagen.

65
00:05:36.850 --> 00:05:41.620
Das sind also die Dokumente, die ich aus meinem Stream-Snapshot erhalte und die ich

66
00:05:44.710 --> 00:05:50.200
hier verwenden kann, aber ich kann sie jetzt auch hier verwenden, um die tatsächlichen Daten in diesem

67
00:05:50.470 --> 00:05:59.350
Dokument abzurufen, auf die wir zugreifen können. Dokumente für den angegebenen Indexindex werden hier vom Item Builder und bereitgestellt Greifen Sie dann auf das Textfeld zu, um

68
00:05:59.350 --> 00:06:03.570
Zugriff auf den Text zu erhalten, der in einer Nachricht gespeichert ist.

69
00:06:03.760 --> 00:06:09.730
Und wenn wir das tun und das speichern und Sie jetzt sehen, dass die echten Nachrichten hier ausgegeben

70
00:06:09.760 --> 00:06:17.070
werden, und das ist natürlich ziemlich schön, denn dies zeigt uns jetzt die Daten, die wir hier im Backend in unserer Firebase-App haben.

71
00:06:17.770 --> 00:06:23.530
Lassen Sie uns als nächstes sehen, wie wir einem neuen Eintrag ein neues Dokument hinzufügen können, indem Sie auf die Plus-Schaltfläche klicken.
