1
00:00:02,170 --> 00:00:07,240
Let's start with the product detail screen where we can tap on a product and we see more information

2
00:00:07,240 --> 00:00:10,800
about it, like for example its price and its description.

3
00:00:10,810 --> 00:00:15,640
Now obviously, you might want to show the price here on the starting page as well,

4
00:00:15,640 --> 00:00:22,300
you could for example also go to your product item and besides a footer, there on the GridTile, you can

5
00:00:22,300 --> 00:00:27,990
also add a header so that you could have the title of the item up there and the price down there.

6
00:00:28,000 --> 00:00:30,790
These are all changes you can of course implement,

7
00:00:30,820 --> 00:00:35,890
I will simply also for demo purposes shows some of the information here on the main screen and then

8
00:00:35,890 --> 00:00:37,230
some on the detail screen,

9
00:00:37,300 --> 00:00:43,020
you learned all the tools it takes to fine tune this to your personal likings and requirements.

10
00:00:43,030 --> 00:00:48,960
So my goal now is that we can tap onto a GridTile here and then we're taken

11
00:00:49,030 --> 00:00:55,810
to that detail screen and for that, we need to add a new screen of course, add a new file therefore and that's

12
00:00:55,810 --> 00:00:57,120
the 

13
00:00:57,120 --> 00:01:05,650
product_detail_screen.dart file which will hold the stateless widget which is the product detail

14
00:01:05,800 --> 00:01:07,340
screen widget

15
00:01:07,510 --> 00:01:13,770
and therefore of course as always, we should import material.dart from the Flutter package up there. Now

16
00:01:13,790 --> 00:01:20,450
since this widget here will in the end render a screen, so it will control the full page,

17
00:01:20,450 --> 00:01:29,330
I want to use a scaffold widget here to add an appBar and a background color and here in the

18
00:01:29,330 --> 00:01:37,100
appBar, I of course want to render appBar widget and there, I want to output a title with the name of

19
00:01:37,100 --> 00:01:38,800
the product.

20
00:01:38,810 --> 00:01:46,550
Now we got two ways of managing this now and that is now already getting closer to that state management

21
00:01:46,550 --> 00:01:54,680
idea. You learned in the section where we also focused on navigation and different screens and so on

22
00:01:55,070 --> 00:02:02,060
that there are two important ways of going to a new screen. Here in the ProductsOverviewScreen, when

23
00:02:02,060 --> 00:02:08,660
we tap one of our product items there or therefore here in product item where we can register such a

24
00:02:08,660 --> 00:02:16,940
tap, we can either use navigator push and then create a MaterialPageRoute on-the-fly and create the

25
00:02:16,940 --> 00:02:23,930
widget we want to go to on-the-fly and pass all the data we need to it in place or we push a named

26
00:02:23,930 --> 00:02:25,070
route.

27
00:02:25,070 --> 00:02:31,880
Now let's start with pushing on-the-fly so to say, which is relatively easy to implement in this app

28
00:02:31,880 --> 00:02:32,640
here

29
00:02:32,930 --> 00:02:38,000
and for that, let's say whenever we tap on the image, we want to go to that new screen,

30
00:02:38,000 --> 00:02:43,930
we want to go to the details and therefore we can wrap this here with a GestureDetector.

31
00:02:44,120 --> 00:02:51,470
The image here is wrapped with this widget because that allows us to add an onTap listener to this image.

32
00:02:52,100 --> 00:02:59,480
The image itself has no onTap argument but we can easily add one by wrapping the invisible

33
00:02:59,480 --> 00:03:02,030
GestureDetector widget around it.

34
00:03:02,030 --> 00:03:08,780
So onTap should now push this new page and therefore here in this function which we define, in this

35
00:03:08,780 --> 00:03:17,670
anonymous function which we define for onTap, we can use navigator of context push, not pushNamed but

36
00:03:17,670 --> 00:03:25,350
just push and there, you learned in the navigation section that you create a MaterialPageRoute which

37
00:03:25,350 --> 00:03:33,090
is a widget built into Flutter, which takes a builder method which gives you a new context, an object and

38
00:03:33,120 --> 00:03:41,000
which has to return a widget you want to go to. So here, we might want to go to the product detail

39
00:03:41,390 --> 00:03:43,850
page, to the product detail screen.

40
00:03:44,120 --> 00:03:52,230
So for that, let's import from the screens folder the product detail screen and now we have

41
00:03:52,230 --> 00:03:54,650
that widget available here,

42
00:03:54,660 --> 00:04:02,900
so here, we can then create a product detail screen like this.

43
00:04:03,700 --> 00:04:05,060
Now this is one way of doing it

44
00:04:05,070 --> 00:04:11,730
and when the product detail screen now requires data like the title, then we can simply expect the title

45
00:04:11,730 --> 00:04:17,550
here as a property and therefore as an argument in the constructor where we then simply store it in

46
00:04:17,550 --> 00:04:25,860
the property and then we can reference this title property here in our widgets and that should of course

47
00:04:25,860 --> 00:04:28,620
be a text widget with the title as a content.

48
00:04:28,620 --> 00:04:33,330
So now, we can use the title property here in this text widget as a title for the appBar because we're

49
00:04:33,330 --> 00:04:39,300
getting the title in the constructor of the product detail screen because when we push, we do it here

50
00:04:39,480 --> 00:04:44,700
on-the-fly in the place where the user tapped on something, like in this case

51
00:04:44,700 --> 00:04:50,910
here on the image and here, since we're in the product item widget, we already know the title of

52
00:04:50,910 --> 00:04:57,150
the product and we can now forward this here as an argument to the product detail screen.

53
00:04:57,240 --> 00:05:03,660
And with this approach, if we do that, now we can tap on these images and we load these different screens

54
00:05:03,840 --> 00:05:07,890
with the correct title in the appBar as you can tell.

55
00:05:07,980 --> 00:05:10,600
Now this approach has some benefits,

56
00:05:10,620 --> 00:05:12,210
it's relatively easy.

57
00:05:12,210 --> 00:05:16,020
We've forwarded the data we already have and we're good to go.

58
00:05:16,090 --> 00:05:23,400
Downsides of this approach are that we create this route on-the-fly here in this anonymous method

59
00:05:23,550 --> 00:05:29,070
and therefore if this application gets bigger and bigger and we have multiple such on-the-fly route

60
00:05:29,070 --> 00:05:34,680
creations, it can be hard to understand which different routes and screens our app has

61
00:05:34,740 --> 00:05:40,890
if we're new to this app, if we're a new developer. Named routs which are all registered here in the

62
00:05:40,890 --> 00:05:47,670
main.dart file are much easier to understand because there, we have that routes table and we simply see

63
00:05:48,510 --> 00:05:53,670
which routes our app has and that's simply easier than if we have to manually go through all the files

64
00:05:53,760 --> 00:06:00,000
to find all these on-the-fly route creations. Another downside is that of course it's convenient

65
00:06:00,000 --> 00:06:07,500
to pass the data we already have here to the product detail screen but what if we also need the price

66
00:06:07,500 --> 00:06:12,690
here, which we actually do need here? Then I also expect to get the price

67
00:06:12,780 --> 00:06:18,960
and now all of a sudden, we request some information, we need some information which we don't have here

68
00:06:19,320 --> 00:06:24,650
in our product item widget. We don't have the price of the product here.

69
00:06:24,690 --> 00:06:29,640
Now obviously, we could expect it here as the argument and then we could pass it into the product item

70
00:06:29,640 --> 00:06:34,710
widget from inside our products overview widget where we of course have all the products including their

71
00:06:34,710 --> 00:06:35,900
price.

72
00:06:35,940 --> 00:06:41,610
The downside about this approach is that we then pass data into product item, which we don't directly

73
00:06:41,610 --> 00:06:49,050
use there, which we don't display there, which we only need because we want to create a new screen in here,

74
00:06:49,080 --> 00:06:51,810
we want to create that on-the-fly route in here.

75
00:06:51,810 --> 00:06:59,220
So we're in that scenario where we pass data as arguments which we don't really need in the widget but

76
00:06:59,220 --> 00:07:01,960
which we need in another widget where we want to forward it

77
00:07:02,190 --> 00:07:05,570
and that's exactly what we typically want to avoid.

78
00:07:05,580 --> 00:07:10,660
So here we already see a problem with this approach.

79
00:07:10,770 --> 00:07:16,940
It would be nicer to have a named route and therefore here in the product item,

80
00:07:16,950 --> 00:07:26,310
we could simply use pushNamed and simply pass in the name of our route here and therefore on the

81
00:07:26,310 --> 00:07:34,050
product detail screen, instead of getting this as arguments, I would rather extract that value here from

82
00:07:34,050 --> 00:07:40,860
my routing arguments as you learned it in the navigation section and for now, I don't have that,

83
00:07:40,890 --> 00:07:46,320
so that I can still compile, I'll turn this into some hardcoded text just so that I don't get errors

84
00:07:46,320 --> 00:07:50,200
whilst this compiles, we'll turn this back into a dynamic title later.

85
00:07:50,340 --> 00:07:55,320
So instead of getting or having properties which we get as arguments in the constructor, it would be

86
00:07:55,320 --> 00:07:59,670
nicer to retrieve arguments from our routing action

87
00:07:59,670 --> 00:08:09,060
so to say and use this page here, this screen, this widget as a named route and therefore, we can of course

88
00:08:09,060 --> 00:08:17,910
have a static const routeName or routePath here which could be product detail so that we can use this

89
00:08:17,940 --> 00:08:25,470
in our main.dart file here in the route table because then here, we can import from the screens folder

90
00:08:25,500 --> 00:08:33,900
the product_detail_screen.dart file and then register this as a named route here, use the product

91
00:08:34,170 --> 00:08:40,890
detail screen and there, the routeName, this static const which is a string as a key in this map and

92
00:08:40,890 --> 00:08:45,870
then the value is this builder function where we get the context. We get that by Flutter when it calls

93
00:08:45,870 --> 00:08:48,410
the builder function, when we call pushNamed

94
00:08:48,660 --> 00:08:54,600
and here, we built the product detail screen and now we have a clean way of seeing which routes we

95
00:08:54,600 --> 00:09:02,470
have. We have the overview screen and we have the detail screen. And now when we call pushNamed here,

96
00:09:04,880 --> 00:09:11,510
we refer to the product detail screen route name and now we can set some arguments and the argument

97
00:09:11,510 --> 00:09:15,550
here should of course now not be an object or a map with the price,

98
00:09:15,560 --> 00:09:20,600
the title and so on because then we would still need all that data in the product item widget which is

99
00:09:20,600 --> 00:09:22,420
exactly what I want to avoid

100
00:09:22,520 --> 00:09:28,220
but instead we could for example only forward the ID, so that we can fetch all the data we need in

101
00:09:28,220 --> 00:09:32,110
the product detail widget inside of the product detail widget.

102
00:09:32,150 --> 00:09:39,050
So here in the product item widget, which is that grid item, there I only forward the ID here which

103
00:09:39,050 --> 00:09:44,720
is a property which I do have, I forward that ID here to my named route,

104
00:09:44,720 --> 00:09:46,870
not all the data I need there

105
00:09:46,890 --> 00:09:54,800
and now in that named route, I want to extract that ID which we can do with ModalRoute of

106
00:09:54,900 --> 00:09:56,150
context.settings.arguments

107
00:10:01,170 --> 00:10:03,290
.

108
00:10:03,460 --> 00:10:07,050
This will in the end give us the ID

109
00:10:10,110 --> 00:10:18,030
because I forward the ID as my argument, as my only argument here and now here, I want to get all my

110
00:10:18,030 --> 00:10:25,290
product data for that ID and that of course won't work if we always pass data just through constructors,

111
00:10:25,370 --> 00:10:28,560
instead now we need a central state management solution.
