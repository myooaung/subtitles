1
00:00:02,260 --> 00:00:06,340
Even though rebuilds of the widget tree aren't that bad,

2
00:00:06,340 --> 00:00:12,910
of course it's never a bad idea to avoid unnecessary widget rebuilds because that simply means that

3
00:00:12,970 --> 00:00:18,910
even though it's just a configuration tree that changes, even if we can avoid a change there,

4
00:00:18,910 --> 00:00:25,270
we of course save some processing time and therefore, can overall improve our application performance.

5
00:00:25,720 --> 00:00:27,090
In small apps like this one,

6
00:00:27,100 --> 00:00:31,320
not really in a measurable way to be honest but especially in bigger apps,

7
00:00:31,360 --> 00:00:39,150
every tiny bit of performance improvement can count and one relatively easy improvement is the usage

8
00:00:39,160 --> 00:00:45,850
of so-called const constructors and const widgets and that's simply something we haven't learned yet,

9
00:00:45,850 --> 00:00:48,150
so now is the time to do so.

10
00:00:48,310 --> 00:00:51,130
You know final and const already.

11
00:00:51,130 --> 00:00:57,700
As you learned earlier in the course, final variables or properties are variables or properties which

12
00:00:57,760 --> 00:01:05,020
are created dynamically at runtime but which then never change. On the other hand, const properties or

13
00:01:05,230 --> 00:01:11,890
variables are properties or variables that are holding a certain value which is already known when the

14
00:01:11,890 --> 00:01:16,720
code compiles and which will never change after compilation.

15
00:01:16,730 --> 00:01:22,820
Now you can also build so-called const constructors,

16
00:01:23,090 --> 00:01:27,020
now what's a const constructor though?

17
00:01:27,160 --> 00:01:29,360
Let's go to our chart bar here.

18
00:01:29,440 --> 00:01:31,430
There, we have a constructor,

19
00:01:31,690 --> 00:01:38,160
here it is and what you can do is you can add the const keyword in front of that constructor as well.

20
00:01:39,110 --> 00:01:40,430
You can do this

21
00:01:40,550 --> 00:01:46,060
if you bind all your arguments here in the constructor to final properties,

22
00:01:46,100 --> 00:01:53,060
so for example if I turn that string into a non-final string here, so if that label is not final, we

23
00:01:53,060 --> 00:01:58,600
get an error down there that we can't make this a constructor for non-final fields.

24
00:01:58,700 --> 00:02:01,300
But if you only have final field which you're targeting,

25
00:02:01,340 --> 00:02:07,310
so if you saying that whenever you're creating an instance of this ChartBar class, this instance will

26
00:02:07,310 --> 00:02:13,790
be unchangeable because you won't be able to then access this instance with the dot notation and change

27
00:02:13,790 --> 00:02:16,600
the label after this object has been created,

28
00:02:16,730 --> 00:02:22,820
then you can mark this as const which means every instance of this object you create is immutable, you

29
00:02:22,820 --> 00:02:24,450
can't change it.

30
00:02:24,470 --> 00:02:30,800
So what I mean in detail here is that in the chart widget, in the chart class where we create the instance

31
00:02:30,800 --> 00:02:34,850
of the chart bar, this here in the end is just the instance of a class,

32
00:02:34,850 --> 00:02:35,890
it's an object, right?

33
00:02:35,930 --> 00:02:39,110
Of course an object that's treated and used as a widget by Flutter

34
00:02:39,110 --> 00:02:42,390
but most importantly, it's a normal Dart object,

35
00:02:42,470 --> 00:02:49,520
just like if we built an object based on our transaction class. So therefore as on every object, we can

36
00:02:49,520 --> 00:02:52,030
use the dot notation after it was created,

37
00:02:52,040 --> 00:02:58,280
so after the closing parentheses of our constructor, to interact with that object and there for example,

38
00:02:58,280 --> 00:03:04,060
we can access the properties of that object, the label, the spending amount, the spending percentage of total.

39
00:03:04,100 --> 00:03:10,700
Now we don't typically do that on our widget objects because we don't use them like normal objects in

40
00:03:10,730 --> 00:03:11,830
Flutter and Dart,

41
00:03:11,870 --> 00:03:15,190
instead we simply use them to pass them onto the Flutter widget tree

42
00:03:15,500 --> 00:03:22,040
but you could access the label here if you wanted to read the label for this concrete chart bar instance.

43
00:03:23,580 --> 00:03:30,390
Now when the label is marked as final as it is here, what you would never be able to do is assign a new

44
00:03:30,390 --> 00:03:32,730
value to label here with the equals sign,

45
00:03:32,730 --> 00:03:37,840
that's simply not possible because it is final.

46
00:03:37,880 --> 00:03:43,490
Now that's what I mean with immutable, an immutable object. This object, the chart bar object, the chart bar

47
00:03:43,510 --> 00:03:44,860
class is immutable

48
00:03:44,860 --> 00:03:50,650
as soon as it's instantiated because all its properties, so all the things you can access with the dot

49
00:03:50,650 --> 00:03:56,980
notation are marked as final and then you can turn this or you can annotate this with const to make

50
00:03:56,980 --> 00:04:03,330
it clear that your intention with this classes, that every new object that's created based on it is immutable.

51
00:04:03,430 --> 00:04:04,660
So it can't be changed,

52
00:04:04,660 --> 00:04:08,830
you can only change it by replacing it with a new instance.

53
00:04:08,830 --> 00:04:13,570
And if you remember what I said earlier about the widget tree and the element tree and the render tree,

54
00:04:14,080 --> 00:04:20,200
I said there that the widget tree is full of immutable objects, all the widgets are immutable.

55
00:04:20,200 --> 00:04:26,320
When the build method runs, in the end it creates a bunch of new instances because it calls the constructors

56
00:04:26,320 --> 00:04:27,010
again,

57
00:04:27,010 --> 00:04:30,580
so then it replaces the old instances with the new ones,

58
00:04:30,610 --> 00:04:37,690
it does not go ahead and take the old widget and only update its label by assigning a new value, instead

59
00:04:37,690 --> 00:04:41,900
it creates a new widget with a new label passed into the constructor,

60
00:04:41,920 --> 00:04:43,630
that's what's happening.

61
00:04:43,630 --> 00:04:46,060
So that's why we can use const here.

62
00:04:46,060 --> 00:04:53,800
Now when we have const here and we do indeed create an instance of this widget with compile time constant

63
00:04:53,800 --> 00:04:57,290
data, then we can let Flutter know about it.

64
00:04:57,310 --> 00:05:04,970
So here, we could then, when we use our immutable widget, we could add const in front of it.

65
00:05:05,000 --> 00:05:12,410
Now in theory, in Flutter, every stateless widget you build is immutable and you can add const in front

66
00:05:12,410 --> 00:05:17,720
of the constructor, of basically every stateless widget you build because in stateless widgets, you always

67
00:05:17,720 --> 00:05:24,880
have final unchangeable properties because you can't use set state in here and update the user interface

68
00:05:24,890 --> 00:05:31,550
if you would change a property anyways. So hence, basically all your stateless widgets are theoretically

69
00:05:31,640 --> 00:05:39,530
immutable or are immutable but you can't create them here with const in front of the constructor because

70
00:05:39,530 --> 00:05:45,710
the data I am passing here into this concrete object of chart bar is indeed dynamic, it's not known at

71
00:05:45,710 --> 00:05:48,600
the point of time of compilation

72
00:05:48,850 --> 00:05:54,400
and you see this here if I hover over this. Arguments of a constant creation must be constant expressions

73
00:05:54,740 --> 00:05:59,200
and this is not constant because this value here changes dynamically.

74
00:05:59,200 --> 00:06:05,080
Of course, this does not change the object dynamically but when a new object is created, at the point

75
00:06:05,080 --> 00:06:08,920
of time we're writing this code, we don't know which data will end up there,

76
00:06:08,920 --> 00:06:10,810
so we can't add const here.

77
00:06:10,810 --> 00:06:15,040
Now why would we have wanted to add const here is of course the important question.

78
00:06:15,040 --> 00:06:24,010
You can skip unnecessary widget rebuilds if you mark a widget as const here when using it in the

79
00:06:24,010 --> 00:06:31,420
widget tree and a good example for this would be some text, like in a transaction list widget. There, we

80
00:06:31,420 --> 00:06:37,540
have this text widget with the text of delete in it. At the point of time of writing this code, we know

81
00:06:37,540 --> 00:06:43,750
exactly how this widget will look like, it will always be just some delete text, this will never change

82
00:06:43,750 --> 00:06:50,800
at runtime. Now still, when the build method here gets called in our main.dart file, when this is called,

83
00:06:51,380 --> 00:06:56,170
this will also be rebuilt and all these widgets are rebuilt and this includes text widgets like this

84
00:06:56,170 --> 00:06:58,490
one which certainly will never change.

85
00:06:58,780 --> 00:07:01,890
In such cases, you can add const in front of the widget,

86
00:07:01,930 --> 00:07:08,500
so when you're creating it because text which is a built-in widget if you inspect this code also has

87
00:07:08,500 --> 00:07:12,760
const in front of its constructor because it extends stateless widget

88
00:07:12,760 --> 00:07:18,370
and as I explained, basically all stateless widgets are immutable because changing properties in there

89
00:07:18,550 --> 00:07:20,440
doesn't really make sense.

90
00:07:20,470 --> 00:07:23,390
So now what we're telling to Flutter is something important though 

91
00:07:23,530 --> 00:07:26,800
and by the way, this is a Dart feature which Flutter takes advantage of

92
00:07:26,800 --> 00:07:33,790
you could say. We're saying this here, this object will never ever change.

93
00:07:33,790 --> 00:07:37,650
We're not assigning any dynamic data here when we're creating it,

94
00:07:37,660 --> 00:07:44,270
so when build gets called again and when Dart goes through this code and creates all these widgets anew, 

95
00:07:45,310 --> 00:07:51,760
it doesn't have to do it for this one because we certainly know that this will be the exact same element,

96
00:07:51,760 --> 00:07:55,240
the exact same object as it was in the previous widget tree.

97
00:07:55,240 --> 00:08:00,690
Other parts of this widget tree might change but this text certainly won't.

98
00:08:00,700 --> 00:08:06,290
Now by default, Flutter doesn't know that and it would rebuild this text widget again.

99
00:08:06,460 --> 00:08:12,490
Of course, it's not super costly to do so because it only happens in the widget tree and that is done

100
00:08:12,490 --> 00:08:20,400
very efficiently but still, if we can skip one extra redundant object instantiation, we should do it.

101
00:08:20,440 --> 00:08:26,890
So adding const here is a good idea because that tells Dart that the value after it will never change

102
00:08:26,890 --> 00:08:33,130
and that tells Flutter that since this will never change, when it rebuilds the widget tree, for this specific

103
00:08:33,130 --> 00:08:34,030
widget,

104
00:08:34,030 --> 00:08:36,670
it can simply take the old widget which was in the same position,

105
00:08:36,670 --> 00:08:40,660
it doesn't need to recreate the object. It's similar for the icon here

106
00:08:40,660 --> 00:08:49,480
for example, icon also is in the end a class that has a const constructor and here, we're not deriving

107
00:08:49,480 --> 00:08:54,790
the icon we want to use dynamically, instead it's already known at compilation time, so we can mark this

108
00:08:54,790 --> 00:08:59,300
as const as well. It's the same, for example down there, for this icon.

109
00:09:01,020 --> 00:09:03,180
It's different for this text here though,

110
00:09:03,270 --> 00:09:09,660
this text here of course also uses the text widget but the data we output as text does change dynamically.

111
00:09:09,720 --> 00:09:14,880
So when build gets called again, this could have a different value than when build was called the last

112
00:09:14,880 --> 00:09:15,510
time.

113
00:09:15,510 --> 00:09:17,150
So here, we can't use const

114
00:09:17,310 --> 00:09:23,430
and indeed if we tried, we get an error that in the end, we're passing non-constant data to this constructor.

115
00:09:24,330 --> 00:09:30,150
But there are a lot of cases where you can use const, for example also here for EdgeInsets.all,

116
00:09:30,470 --> 00:09:35,840
EdgeInsets also is a class and there, it also has const in front of the constructor,

117
00:09:35,940 --> 00:09:41,610
so we can add const here too because this value here, which we use to derive the padding we want to set,

118
00:09:41,880 --> 00:09:43,990
is also known at compilation,

119
00:09:44,010 --> 00:09:51,080
we never change that value. If you wanted to make this padding overall const though, this overall widget,

120
00:09:51,250 --> 00:09:56,430
you would get an error because whilst of course the padding value here is constant, a child widget

121
00:09:56,810 --> 00:10:02,420
of this padding and this is part of the constructor of the padding object is not constant.

122
00:10:02,420 --> 00:10:08,840
This holds in the end some other dynamic child widget, this text here, which hold some dynamic const.

123
00:10:08,840 --> 00:10:15,170
So the overall padding widget, the padding object here is not immutable but a part of it, the object

124
00:10:15,170 --> 00:10:17,370
we assign for its padding argument,

125
00:10:17,420 --> 00:10:24,300
this would be constant. Now you can certainly identify more opportunities where you could do this, for example

126
00:10:24,300 --> 00:10:31,710
for this SizedBox widget which only has one argument with a compilation time constant value. Not

127
00:10:31,710 --> 00:10:35,490
for this text here though because there, the theme, we could change that,

128
00:10:35,520 --> 00:10:41,070
so here we can't do it but in other places in the code, you might still be able to add const.

129
00:10:41,130 --> 00:10:47,700
Now obviously, you'll not double the speed of your application with tiny changes like this but still,

130
00:10:47,790 --> 00:10:54,840
it's a good habit to get into and something you might consider in your app, maybe not whilst you're writing

131
00:10:54,840 --> 00:11:00,450
it because there you typically want to implement new features and you might not think about optimizing

132
00:11:00,450 --> 00:11:07,680
the code yet but when you go over your app, before you publish it, before you finish it up, you might look

133
00:11:07,680 --> 00:11:13,200
for opportunities like this which certainly won't hurt and which might help the performance of your

134
00:11:13,200 --> 00:11:14,190
app a little bit.
