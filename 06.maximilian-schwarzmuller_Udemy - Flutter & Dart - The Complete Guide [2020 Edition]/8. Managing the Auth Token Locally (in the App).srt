1
00:00:02,290 --> 00:00:05,320
So let's make sure we see the shop screen after we logged in.

2
00:00:05,320 --> 00:00:08,380
Now there are two possible routes we could take,

3
00:00:08,380 --> 00:00:12,710
one route is that if you did login or did sign up successfully,

4
00:00:13,060 --> 00:00:21,670
so basically here inside the try block, you actually use navigator of context and then maybe pushReplacement

5
00:00:22,240 --> 00:00:30,100
and then you go to your products overview screen

6
00:00:30,100 --> 00:00:35,650
which right now isn't registered as a route but of course we could add it here to our routes table.

7
00:00:35,650 --> 00:00:41,260
We could add our product overview screen here to the table and then navigate to it with pushReplacement

8
00:00:41,260 --> 00:00:43,240
named so that we live the AuthScreen

9
00:00:43,240 --> 00:00:45,900
and we're in the shop. Would work,

10
00:00:45,960 --> 00:00:47,160
no problem with that

11
00:00:47,310 --> 00:00:54,930
but it has one major downside, it would mean that we always start on the auth page when we open the app

12
00:00:55,200 --> 00:00:59,910
and we have to login so that we are then forwarded to the shop page and

13
00:00:59,930 --> 00:01:01,530
that's not really what I want to do.

14
00:01:02,250 --> 00:01:09,310
So the better approach might be to change the home page we have here in the main.dart file.

15
00:01:09,330 --> 00:01:15,000
Now that might sound strange but keep in mind that MaterialApp is also a widget and that in the my

16
00:01:15,000 --> 00:01:18,090
app here, we're also in a widget with a build method.

17
00:01:18,090 --> 00:01:24,330
So we could say that if we login, this build method should maybe rerun because logging in and logging

18
00:01:24,330 --> 00:01:27,700
out is a big change that should affect the entire app,

19
00:01:27,720 --> 00:01:31,280
so this will then rerun and if it reruns, it will rebuild the MaterialApp

20
00:01:31,290 --> 00:01:36,600
and if we then switch the home screen and switch that from AuthScreen to products overview screen, then

21
00:01:36,600 --> 00:01:43,590
for that rebuild after the login, we would automatically render a new screen without navigation simply

22
00:01:43,590 --> 00:01:47,150
because this was rebuilt and now renders a different screen into our face

23
00:01:47,160 --> 00:01:52,740
so to say and that's actually the approach I want to use here because that will later allow us to implement

24
00:01:52,780 --> 00:01:57,330
a check here when the app starts for whether the user is authenticated or not

25
00:01:57,330 --> 00:02:01,730
and then always send us to the right screen right from the start.

26
00:02:01,740 --> 00:02:07,140
So the goal is to switch this home screen we render, either our home screen is the products overview

27
00:02:07,160 --> 00:02:10,320
screen if we are authenticated or it's the AuthScreen

28
00:02:10,410 --> 00:02:17,040
if we are not and if we initially are not authenticated and then we do authenticate, that's no problem,

29
00:02:17,070 --> 00:02:19,690
we just have to ensure that this build method runs again

30
00:02:19,740 --> 00:02:23,550
and then here we use some if condition to switch the screen we're showing,

31
00:02:23,550 --> 00:02:25,050
that's the idea.

32
00:02:25,050 --> 00:02:26,790
So how does this work in detail then?

33
00:02:27,360 --> 00:02:34,800
Well since we set up our auth provider here and that is in the end managing the object where we do manage

34
00:02:34,800 --> 00:02:40,740
that whole login stuff and so on, since we're doing that here, it would make sense that we actually don't

35
00:02:40,740 --> 00:02:42,670
rebuild this entire method here maybe

36
00:02:42,780 --> 00:02:48,030
but this part of the tree and for that, we can of course use the consumer which is part of the provider

37
00:02:48,030 --> 00:02:53,750
package and which I showed you in the state management module of the course. So we'll not entirely rebuild

38
00:02:53,780 --> 00:02:59,650
the entire widget tree but we will rebuild the MaterialApp and that of course is what counts here.

39
00:02:59,660 --> 00:03:07,250
So here, we have our consumer and we consume our auth class or the nearest auth object we can find which

40
00:03:07,250 --> 00:03:16,520
is of course the object provided here and consumer now takes a builder here and that builder receives

41
00:03:16,660 --> 00:03:25,910
a context which is given to the built object in there and gets your auth object, your AuthData,

42
00:03:26,090 --> 00:03:27,050
whatever you want to name it,

43
00:03:27,050 --> 00:03:32,450
I'll just name it auth and you'll also get this child widget if you had some static part which you don't

44
00:03:32,450 --> 00:03:33,520
want to rebuild.

45
00:03:33,580 --> 00:03:35,720
Now here however, I have no child, so

46
00:03:35,720 --> 00:03:41,120
I'll just add a blank here, to indicate that there is nothing I would want to pass in as a fixed widget

47
00:03:41,120 --> 00:03:42,870
so to say.

48
00:03:43,020 --> 00:03:50,400
Now the thing I want to return here is my MaterialApp, so let's grab the MaterialApp here and move it

49
00:03:50,400 --> 00:03:54,510
into this builder function right here.

50
00:03:54,520 --> 00:04:00,610
So now this ensures that the MaterialApp is rebuilt whenever auth changes, whenever that auth object changes

51
00:04:00,910 --> 00:04:06,040
and whenever we call notify listeners in there which we right now by the way are never doing but we'll

52
00:04:06,070 --> 00:04:07,300
soon add that.

53
00:04:07,330 --> 00:04:12,520
So whenever that changes, this builder runs again and gives us a new MaterialApp, in there we get access

54
00:04:12,520 --> 00:04:17,640
to the latest auth object and therefore we can use that down here when we decide what our home page, our

55
00:04:17,650 --> 00:04:19,280
home route should be

56
00:04:19,300 --> 00:04:21,430
and here we can therefore check auth

57
00:04:21,610 --> 00:04:22,770
and now what.

58
00:04:22,960 --> 00:04:30,490
Now we need some gather or some property on the auth object and therefore in the auth class that tells

59
00:04:30,490 --> 00:04:33,720
us whether the user is authenticated or not.

60
00:04:33,760 --> 00:04:39,910
So let's go to the auth.dart file and up there, I'll add a new getter which should return a

61
00:04:39,910 --> 00:04:46,270
boolean, which I'll simply name isAuth because that is what I want to return here and we can have a very

62
00:04:46,270 --> 00:04:56,050
simple rule here. If we have a token and the token didn't expire, then the user is authenticated. So here

63
00:04:56,050 --> 00:05:02,950
we can add our logic for checking the expiry date and comparing it to the current date and see if the

64
00:05:02,950 --> 00:05:06,300
current date is still behind the expiry date,

65
00:05:06,400 --> 00:05:08,390
so the expiry date hasn't passed yet

66
00:05:08,500 --> 00:05:15,070
and if the token is set. Since we'll also later also need the token itself, I'll create another getter here which

67
00:05:15,070 --> 00:05:18,020
actually returns the token,

68
00:05:18,040 --> 00:05:24,340
so here token without an underscore, here it is with an underscore and there I check if 

69
00:05:24,340 --> 00:05:26,560
_expiryDate is not

70
00:05:26,560 --> 00:05:27,030
null,

71
00:05:27,160 --> 00:05:29,660
if it's null, then we can't have a valid token

72
00:05:30,250 --> 00:05:36,620
and if it's not null, if expiry date and now the cool thing is on date here, we can call isAfter

73
00:05:36,910 --> 00:05:38,660
and here want to check if it's after

74
00:05:38,680 --> 00:05:42,800
now because if it's after now, then it's valid.

75
00:05:42,850 --> 00:05:51,610
So if we have an expiry date and it hasn't parsed yet, so it's in the future, then I will return 

76
00:05:51,610 --> 00:05:52,570
_token

77
00:05:52,570 --> 00:05:55,650
and actually we should also add one other check here,

78
00:05:55,690 --> 00:06:03,520
we should check if token is not null because if the token is null, we also have a problem

79
00:06:03,520 --> 00:06:08,470
but if the expiry date is not null and it's in the future and the token is not null, then we return

80
00:06:08,470 --> 00:06:10,570
the token otherwise

81
00:06:10,870 --> 00:06:17,080
and please keep in mind that with return, you finish this execution, you won't reach the next line if

82
00:06:17,080 --> 00:06:17,780
you return here,

83
00:06:17,980 --> 00:06:20,570
so we only reach that line if we don't make it into if,

84
00:06:20,950 --> 00:06:24,280
so otherwise I'll return null as a token.

85
00:06:24,280 --> 00:06:26,230
Now here in isAuth,

86
00:06:26,290 --> 00:06:31,660
we can now use our token getter and find out if that is null because we have all the validation logic

87
00:06:31,660 --> 00:06:32,110
in here,

88
00:06:32,140 --> 00:06:37,710
the local validation logic I should say. So if this here returns null, we know we're not authenticated

89
00:06:37,750 --> 00:06:41,500
because we have no token or a token that already expired.

90
00:06:41,500 --> 00:06:43,840
So here we return token unequal to null

91
00:06:43,840 --> 00:06:45,930
only if it's not equal to null,

92
00:06:45,940 --> 00:06:46,900
we are authenticated,

93
00:06:46,930 --> 00:06:50,830
if the token is equal to null, then we are not authenticated.

94
00:06:50,830 --> 00:06:56,640
So this is the getter and now we can use that getter in the main.dart file here, on auth,

95
00:06:57,090 --> 00:06:59,070
we can now call isAuth,

96
00:06:59,080 --> 00:07:04,540
use that getter and if that is true, I of course want to render the product overview screen.

97
00:07:04,680 --> 00:07:10,170
If it's false and we're not authenticated, then I want to allow the user to login or to sign up with

98
00:07:10,170 --> 00:07:14,450
the AuthScreen, that's the logic there.

99
00:07:14,450 --> 00:07:19,130
Now of course we'll have to do some work in the auth.dart file, in the providers folder though because

100
00:07:19,130 --> 00:07:22,110
right now, we're never setting the token or the expiry date

101
00:07:22,220 --> 00:07:24,000
and of course we have to set this,

102
00:07:24,260 --> 00:07:26,290
otherwise this will always be false,

103
00:07:26,300 --> 00:07:27,870
we never will have a token.

104
00:07:27,980 --> 00:07:31,850
We have to set this here in _authenticate, in this method.

105
00:07:31,850 --> 00:07:35,120
There we get our response and here we have the response data and

106
00:07:35,120 --> 00:07:37,530
we're checking the response data for errors.

107
00:07:37,550 --> 00:07:43,880
What we're not doing is when there is no error in the response data,

108
00:07:43,880 --> 00:07:45,490
so if we're not throwing an exception here,

109
00:07:45,500 --> 00:07:51,290
then of course I want to log my userId and I want to set my token and store the token here in memory and

110
00:07:51,290 --> 00:07:52,240
so on.

111
00:07:52,280 --> 00:08:01,580
So here, I want to set _token equal to response data and then ID token because remember

112
00:08:01,580 --> 00:08:08,180
that on the Firebase response, you actually would get back an ID token field which contains that token,

113
00:08:08,270 --> 00:08:13,550
so we're extracting the ID token from the response we're getting here.

114
00:08:13,580 --> 00:08:22,430
We also want to set our userId, so _userId should be equal to response data and then

115
00:08:23,150 --> 00:08:28,700
it's the local ID field here and you can see that in the official docs too, local ID is the ID of

116
00:08:28,700 --> 00:08:37,280
the user. Now the expiry date is also something I want to set, the expiry date here of course has to be calculated

117
00:08:37,580 --> 00:08:41,930
because the only thing we get back is expiresIn which only contains a string but in that string, we have

118
00:08:41,930 --> 00:08:42,970
the number of seconds.

119
00:08:43,010 --> 00:08:46,020
So we'll have to parse that string and turn it into a number

120
00:08:46,130 --> 00:08:52,860
but then after turning it into a number, we have to derive a date from that. So expiry date should be

121
00:08:52,860 --> 00:08:55,440
a datetime object

122
00:08:55,440 --> 00:08:57,270
and there we can take the current timestamp

123
00:08:57,270 --> 00:09:02,490
and now we only have to add this amount of seconds it takes until the token expires,

124
00:09:02,490 --> 00:09:02,750
right

125
00:09:02,750 --> 00:09:07,710
because current time plus amount of seconds until it expires gives us the timestamp when it will have

126
00:09:07,710 --> 00:09:08,850
expired.

127
00:09:08,880 --> 00:09:14,430
So we take the current timestamp and then we can call the add method which the datetime object conveniently

128
00:09:14,430 --> 00:09:22,190
gives us and pass a duration into that, duration is a class provided by Dart to express durations

129
00:09:22,200 --> 00:09:28,110
and here we want to set a duration in seconds because we're getting a duration in seconds and the duration

130
00:09:28,110 --> 00:09:30,180
in seconds now is response

131
00:09:30,360 --> 00:09:34,310
data expiresIn with a capital I,

132
00:09:34,320 --> 00:09:35,940
so this key here

133
00:09:35,940 --> 00:09:38,610
but keep in mind that's a string. Here

134
00:09:38,640 --> 00:09:42,180
however, seconds takes an integer.

135
00:09:42,180 --> 00:09:45,390
So we need to transform that into an integer,

136
00:09:45,390 --> 00:09:47,730
otherwise we'll get an error later.

137
00:09:47,730 --> 00:09:57,220
So here, we should call int.parse and wrap response data expiresIn into that int.parse call here. With

138
00:09:57,220 --> 00:10:02,680
that, we're now setting this duration here with our parsed seconds and add this to the current timestamp

139
00:10:02,830 --> 00:10:04,660
to derive the expiry date

140
00:10:07,520 --> 00:10:10,510
and with that, we're storing that data which we need.

141
00:10:10,580 --> 00:10:17,480
Now with all of that, we can call notify listeners here to update our user interface which we of course

142
00:10:17,480 --> 00:10:23,400
have to do to for example trigger that consumer here. Let's give it a try,

143
00:10:23,400 --> 00:10:25,280
let's do a full refresh here

144
00:10:25,350 --> 00:10:29,530
and now let's try logging in with one of the users we created earlier.

145
00:10:29,580 --> 00:10:37,940
So here, I'll reuse my dummy data like this, press login, see the spinner and that's looking good, we're

146
00:10:37,940 --> 00:10:43,070
in the shop. We still can't load the products and that's normal because we know now that we're logged

147
00:10:43,070 --> 00:10:48,140
in, we know that in our app here but we're not telling the server, we're not attaching the token to the

148
00:10:48,140 --> 00:10:50,420
requests we're sending to the server.

149
00:10:50,420 --> 00:10:51,850
So that's of course the next step,

150
00:10:51,860 --> 00:10:58,760
make sure that we use that token which we do manage here in our auth.dart file, that we use that token

151
00:10:59,150 --> 00:11:02,160
to also send it to the server

152
00:11:02,180 --> 00:11:04,700
so that we're not the only one who knows that we're logged in.
