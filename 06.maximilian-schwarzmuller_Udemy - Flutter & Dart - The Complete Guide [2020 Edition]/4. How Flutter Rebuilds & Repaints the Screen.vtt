WEBVTT
1
00:00:02.320 --> 00:00:06.370
So build is called whenever you call set state and you learned that build

2
00:00:06.370 --> 00:00:09.760
now rebuild this widget and all its child widgets

3
00:00:10.210 --> 00:00:11.660
and that's really important.

4
00:00:11.770 --> 00:00:18.460
If you call set state, only the build method of this widget is called but then, since this code is executed

5
00:00:18.730 --> 00:00:25.030
and we have a couple of widgets which we create in that build method, as you learned, new instances of these

6
00:00:25.030 --> 00:00:26.210
widgets are created

7
00:00:26.260 --> 00:00:31.330
and whenever a new instance of a widget is created, its constructor and its build method is called as

8
00:00:31.330 --> 00:00:32.050
well.

9
00:00:32.050 --> 00:00:37.840
So when we call build here in the main.dart file, that means that also all these widgets down here will

10
00:00:37.840 --> 00:00:41.050
be created and there, build methods will execute.

11
00:00:41.050 --> 00:00:45.070
Now you have room for optimization here and I'll come back to that

12
00:00:45.130 --> 00:00:50.080
but generally, that is what's wanted, that is how it should work.

13
00:00:50.080 --> 00:00:57.430
The idea here of course is that the configuration because remember, the widget tree is all about the

14
00:00:57.430 --> 00:01:02.300
configuration changes and that then leads to a new output on the screen

15
00:01:02.560 --> 00:01:06.940
but how does this actually work then if the widgets are replaced with new instances?

16
00:01:06.970 --> 00:01:09.940
Does this mean that the elements and the rendered objects,

17
00:01:10.060 --> 00:01:20.730
remember these are the other two trees, also rebuild? Back to drawing, we had these three trees - we have

18
00:01:20.730 --> 00:01:31.140
the widget tree, we have the element tree and we have the render tree so to say. Now in the widget

19
00:01:31.140 --> 00:01:34.750
tree, we have a stateful widget,

20
00:01:34.750 --> 00:01:38.140
so our own stateful widget here.

21
00:01:41.020 --> 00:01:47.440
Now that stateful widget of course might have a child widget which means it's using some other widgets

22
00:01:47.470 --> 00:01:54.370
in its build method, for example a container and that container then also might have a child widget which

23
00:01:54.370 --> 00:02:00.270
we nest in there which is a text widget and that's very basic widget tree here of course.

24
00:02:00.540 --> 00:02:03.470
Now as you learned, when Flutter first encounters this,

25
00:02:03.460 --> 00:02:11.150
so when the app starts typically, it will create elements for that. So it will create a new element here

26
00:02:11.180 --> 00:02:14.520
for the stateful widget,

27
00:02:14.720 --> 00:02:22.790
it will create one for the container and it will also create one for the text.

28
00:02:23.180 --> 00:02:26.080
So these elements are created automatically.

29
00:02:26.270 --> 00:02:32.210
Now as you also learned, it will also render something on the screen, so it will then, once these elements

30
00:02:32.210 --> 00:02:33.390
are created and so on,

31
00:02:33.480 --> 00:02:40.870
also go ahead and create the actual render objects which control the content on the screen.

32
00:02:40.880 --> 00:02:48.110
Now the interesting part happens. In our stateful widget, we call set state, so something changes there,

33
00:02:49.010 --> 00:02:53.150
hence the build method gets called in the stateful widget here.

34
00:02:53.150 --> 00:02:57.750
So here in this widget, we call the build method because set state was called.

35
00:02:57.770 --> 00:03:04.010
Now what's actually happening here is that first of all, we have to realize that the state is managed

36
00:03:04.010 --> 00:03:05.210
in a separate object

37
00:03:05.240 --> 00:03:07.100
as I showed on the slide earlier.

38
00:03:07.100 --> 00:03:11.350
So the state is connected to the element and not directly connect to the widget.

39
00:03:11.360 --> 00:03:23.490
So when you call set state, that edits this state object. Now the widget then, once set state is called,

40
00:03:24.090 --> 00:03:32.280
is marked as dirty, which means it's basically replaced with a new one.

41
00:03:32.340 --> 00:03:40.780
So we get a new my stateful widget which reflects that new state.

42
00:03:41.080 --> 00:03:42.400
So that new state

43
00:03:42.400 --> 00:03:45.640
we have stored in that state object here

44
00:03:45.640 --> 00:03:54.730
kind of ends up in the new widget and with end up, I mean it's output there or passed down to the children

45
00:03:54.730 --> 00:03:57.640
there or whatever you are doing with your state data.

46
00:03:57.640 --> 00:04:04.110
This new my stateful widget replaces the old one which was removed because it's dirty

47
00:04:04.120 --> 00:04:12.330
changed. The state object here however, this one, does not change, it stays here, it's not replaced. It's

48
00:04:12.340 --> 00:04:14.470
still the same object as before,

49
00:04:14.470 --> 00:04:19.900
so the state object is detached from the widget object. The widget is replaced with the state changes,

50
00:04:19.990 --> 00:04:21.790
the state is not replaced and

51
00:04:21.830 --> 00:04:28.060
that's of course important because your state, your data which changes over time should be able to change

52
00:04:28.060 --> 00:04:28.640
over time,

53
00:04:28.660 --> 00:04:34.300
it would be bad if that would be swapped out for a new state object whenever you try to change it because

54
00:04:34.330 --> 00:04:40.560
then changes basically wouldn't be possible. So instead now, we've got a new stateful widget and there,

55
00:04:40.560 --> 00:04:50.530
the build method is called and the build method being called of course also means that we rebuild this

56
00:04:50.530 --> 00:04:51.740
entire widget tree.

57
00:04:51.790 --> 00:04:56.320
So for the container, we get a new instance and for the text, we get a new instance

58
00:05:04.540 --> 00:05:10.860
but what does this now mean for the element and the render tree, since we have three new widget instances

59
00:05:10.870 --> 00:05:15.330
and with this, I really mean three brand new objects stored in memory.

60
00:05:15.340 --> 00:05:19.270
Does this mean that the elements in the render objects here also are replaced?

61
00:05:19.690 --> 00:05:29.090
No, it does not mean that. The cool thing is that the elements hold a reference at a widget and they also

62
00:05:29.200 --> 00:05:34.510
so to say hold some information on how to identify their related widget.

63
00:05:34.660 --> 00:05:40.870
The first important piece of information each element has is it knows its position, so it knows which

64
00:05:40.870 --> 00:05:42.880
child elements it has,

65
00:05:42.880 --> 00:05:48.940
so its basically like a skeleton for your widget tree. Your widgets have a certain structure, your element

66
00:05:48.970 --> 00:05:53.970
tree replicates this structure and actively stores that information

67
00:05:54.280 --> 00:06:00.190
and in addition to that, otherwise this first piece of information would be useless, an element knows which

68
00:06:00.190 --> 00:06:04.030
kind or which type of widget it was connected to.

69
00:06:04.030 --> 00:06:09.470
So this here knows it was connected to the my stateful widget.

70
00:06:09.550 --> 00:06:16.130
The second element knows it was connected to the container widget, so to a widget of type container

71
00:06:16.210 --> 00:06:21.070
and this last element here knows it was connected to a widget of type text.

72
00:06:21.130 --> 00:06:26.110
So now every element here in the element tree knows which child elements it has, so which connection to

73
00:06:26.110 --> 00:06:32.290
other elements it has and which type of widget held the configuration for the element that should then

74
00:06:32.290 --> 00:06:35.040
actively be rendered to the screen.

75
00:06:35.080 --> 00:06:42.760
So since that is known, when we get a new stateful widget up there which replaces the existing one, what

76
00:06:42.760 --> 00:06:48.490
Flutter does is it checks in that position of the widget tree or of the element tree,

77
00:06:48.490 --> 00:06:50.800
which is kind of the same here,

78
00:06:50.830 --> 00:06:53.650
do I have a my stateful element here

79
00:06:53.680 --> 00:07:01.090
because I'm getting a new my stateful widget and if the answer is yes, like it is here, then this means

80
00:07:01.330 --> 00:07:03.280
that the element is kept

81
00:07:03.280 --> 00:07:10.390
and it simply updates its reference to now point at the new widget here.

82
00:07:10.420 --> 00:07:13.960
That's what's happening, the reference of the element is updated,

83
00:07:13.960 --> 00:07:19.540
the old reference is cleared because the old widget was cleared and now the existing element simply

84
00:07:19.540 --> 00:07:26.020
points at the new widget and it then passes this information on to the render object which is also

85
00:07:26.020 --> 00:07:30.700
kept, so that the render object can update in the places where it needs to update.

86
00:07:30.700 --> 00:07:36.190
So for example if the background color is the same but the text changed, the render object will only

87
00:07:36.190 --> 00:07:41.800
re-render the text pixels on the screen so to say and not everything it doesn't layout itself again

88
00:07:41.860 --> 00:07:43.060
and so on

89
00:07:43.060 --> 00:07:44.690
and this is why Flutter is so efficient.

90
00:07:44.710 --> 00:07:50.830
It has this element tree which is not rebuilt whenever build is called, only the widget tree is rebuilt and

91
00:07:50.830 --> 00:07:57.190
the element tree can automatically update its references to know if a new configuration is available

92
00:07:57.220 --> 00:08:03.430
and if that is available, it passes that information on to the render objects so that these can re-render

93
00:08:03.640 --> 00:08:05.230
on the screen.

94
00:08:05.230 --> 00:08:11.200
Now if you want to learn even more about how Flutter manages all of this internally and which optimizations

95
00:08:11.200 --> 00:08:17.440
it puts into place, you find an interesting article attached to this lecture where you can dive way deeper

96
00:08:17.710 --> 00:08:19.760
but this is basically how it works

97
00:08:19.840 --> 00:08:26.080
and this is why calling build or having the build method called does not mean that the entire screen

98
00:08:26.160 --> 00:08:32.350
re-renders because Flutter has a couple of layers to manage that and calling build or the build method

99
00:08:32.350 --> 00:08:35.190
being called only means that this widget tree,

100
00:08:35.320 --> 00:08:42.010
so that tree of configuration data rebuilt or parts of that tree rebuilt and therefore, Flutter now

101
00:08:42.010 --> 00:08:46.000
checks which parts on the real screen need to be updated.
