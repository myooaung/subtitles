1
00:00:02,260 --> 00:00:03,820
That was a lot of error handling,

2
00:00:03,820 --> 00:00:05,550
let me now fix that error again

3
00:00:05,680 --> 00:00:11,380
and in the meantime behind the scenes, I also cleared up my Firebase storage here and I only have two

4
00:00:11,380 --> 00:00:17,620
products in there which I added - a book and a shirt.

5
00:00:17,630 --> 00:00:22,560
I deleted all the other dummy records we added in the meantime and now I want to fetch these products.

6
00:00:22,580 --> 00:00:27,590
Now we could fetch them here on this user products page but I think the most important page to fetch

7
00:00:27,590 --> 00:00:29,180
the products is the shop page,

8
00:00:29,210 --> 00:00:35,630
this product overview screen here. There, when this screen loads, I went to fetch my products because the

9
00:00:35,630 --> 00:00:39,370
app simply doesn't work if I can't get my products from the server there

10
00:00:39,560 --> 00:00:44,570
and I always want to have my latest products there as well because whenever we reload that page, I simply

11
00:00:44,570 --> 00:00:46,470
want to see what's in the shop.

12
00:00:46,550 --> 00:00:52,310
So therefore here in products overview, which is that widget that renders that screen, I want to fetch

13
00:00:52,310 --> 00:00:55,520
products when that screen loads.

14
00:00:55,520 --> 00:00:58,080
Now how can we do that?

15
00:00:58,160 --> 00:01:01,340
Well generally, initState would be a great place here.

16
00:01:01,400 --> 00:01:03,500
We're having a stateful widget here anyways,

17
00:01:03,500 --> 00:01:08,000
we have a state object and initState would run when this first gets rendered

18
00:01:08,000 --> 00:01:12,430
and it would only run once and that's the perfect scenario for fetching data.

19
00:01:12,440 --> 00:01:19,010
So here, we could absolutely use our HTTP package and due to get request and fetch the data and then store

20
00:01:19,010 --> 00:01:24,050
that in our provided container, in our provided object and so on.

21
00:01:24,050 --> 00:01:28,460
The only downside with that is that we don't want to have too much logic in our widget,

22
00:01:28,760 --> 00:01:34,670
so putting that HTTP fetching code in this which it would technically work but it's not the

23
00:01:34,670 --> 00:01:38,200
best way of doing that, we want to keep that widget lean.

24
00:01:38,390 --> 00:01:44,750
So the better approach is to actually move that fetching code into our class here, into our provided class

25
00:01:45,020 --> 00:01:50,840
and therefore hide it from the widget and in the widget, we can then just call a method to do the fetching.

26
00:01:50,840 --> 00:01:56,990
So here in the products.dart file in the providers folder, I'll add a future which will yield nothing

27
00:01:56,990 --> 00:02:03,200
in the end and I'll name it fetch and set products but the name is of course totally up to you but that's

28
00:02:03,200 --> 00:02:05,210
what this method should do.

29
00:02:05,210 --> 00:02:10,730
Now I want to use async await in there, hence I'll add the async keyword between the parameter list and

30
00:02:10,760 --> 00:02:18,080
the function body and now in here, the goal is to reach out to that URL, hence I'll copy it because

31
00:02:18,080 --> 00:02:23,670
of course the products are stored on that URL and we want to fetch the products from exactly the URL

32
00:02:23,690 --> 00:02:31,190
we used for storing them and then in there, we used the HTTP package which I prefixed here, hence

33
00:02:31,220 --> 00:02:35,480
http. which I use here, to fetch the products,

34
00:02:35,540 --> 00:02:41,230
so here I can now use a get request. We used post for storing, for adding a product,

35
00:02:41,270 --> 00:02:47,750
now I can use get for fetching a product. So here I send a get request to this URL and now

36
00:02:47,750 --> 00:02:54,080
for get request, you need no extra configuration, unlike a post request, you don't have to append data,

37
00:02:54,290 --> 00:02:56,140
a get request works like that.

38
00:02:56,240 --> 00:02:58,910
So it justs get data and we're good.

39
00:02:58,910 --> 00:03:04,490
Now since I use async here, I can await this, wait for the response and of course I'm interested in the

40
00:03:04,490 --> 00:03:07,930
response because the response will contain my data.

41
00:03:08,060 --> 00:03:15,530
Now this might of course fail, so we can wrap this into try catch again, to do something with that error

42
00:03:15,530 --> 00:03:20,700
we might be getting here and we can of course then also throw that error again in case we get one

43
00:03:20,720 --> 00:03:25,020
so that we could handle it in our widget if we wanted to do that there.

44
00:03:25,310 --> 00:03:31,130
Now I'll keep that leaner here and I'll not add error handling logic in the widget, simply to not bloat this

45
00:03:31,130 --> 00:03:35,120
course module too much but you learned how error handling logic would work

46
00:03:35,180 --> 00:03:40,370
and you're absolutely free to experiment with that and see how you might want to handle possible errors

47
00:03:40,370 --> 00:03:44,200
in this case here, I'll focus on the success case now.

48
00:03:44,270 --> 00:03:47,290
So here, we're trying to get this response

49
00:03:47,300 --> 00:03:48,700
and if we succeeded,

50
00:03:48,710 --> 00:03:52,250
so if we have a response, let's see what's in there right and

51
00:03:52,280 --> 00:03:56,660
let's see what we get this so that we can then determine how we can actually get that response data

52
00:03:56,930 --> 00:04:01,090
into our list of products up there, which is of course the ultimate goal.

53
00:04:01,100 --> 00:04:03,220
So right now, I'm just printing the response,

54
00:04:03,230 --> 00:04:06,020
let's now make sure we call fetch and set products.

55
00:04:06,140 --> 00:04:10,800
The goal is to call that from inside products overview and of course, initState would be great here.

56
00:04:11,060 --> 00:04:15,500
We can use provider in here, so make sure you have provider imported,

57
00:04:15,500 --> 00:04:19,820
also make sure you have your products imported,

58
00:04:20,060 --> 00:04:26,030
so from the providers folder, the products.dart file because that's the class which has the method we

59
00:04:26,030 --> 00:04:27,390
want to call

60
00:04:28,100 --> 00:04:38,010
and then of, for the products class, context, context is available everywhere here in our state in the

61
00:04:38,050 --> 00:04:44,780
end, in our state class just like widget and then call fetch and set products.

62
00:04:44,800 --> 00:04:52,900
Now let's save that and do a hot refresh here and now what we actually see is that we get an error here.

63
00:04:54,160 --> 00:05:01,990
We get an error here for a reason we already saw earlier in the course, in initState, all these of context

64
00:05:02,020 --> 00:05:05,560
things don't work, like ModalRoute.of context, right,

65
00:05:05,560 --> 00:05:11,780
That also didn't work here simply because the widget is not fully wired up with everything here.

66
00:05:11,890 --> 00:05:14,140
So therefore we can't do that here,

67
00:05:14,140 --> 00:05:16,240
this won't work

68
00:05:16,240 --> 00:05:21,430
and otherwise it would be great if we wouldn't reach out to our provider of context here,

69
00:05:21,430 --> 00:05:25,670
this would be a great solution and a great place for fetching our products.

70
00:05:25,720 --> 00:05:27,670
Now there are two ways around that,

71
00:05:27,700 --> 00:05:36,070
one is that you use future delayed here, which is a helper constructor, to build a new future, there you

72
00:05:36,080 --> 00:05:42,690
add a duration and I'll use duration zero to basically add no delay

73
00:05:42,690 --> 00:05:50,110
and then you can add a then block and in that function here, you could now actually reach out to your

74
00:05:50,110 --> 00:05:58,420
provider and do that fetching, so you could do that here, know the value we're getting and you would be

75
00:05:58,420 --> 00:05:59,050
fine

76
00:05:59,050 --> 00:06:03,730
and even though it is technically also executes immediately because we have zero duration until this

77
00:06:03,730 --> 00:06:04,780
code runs,

78
00:06:04,780 --> 00:06:10,240
so this is simply a helper constructor which creates a future which executes then after this duration

79
00:06:10,240 --> 00:06:16,600
passed, now this will execute immediately but technically, this is still registered as a to-do action by

80
00:06:16,600 --> 00:06:22,000
Dart and we will first continue initializing the class here in the widget before it then comes back

81
00:06:22,000 --> 00:06:28,300
and executes this and this will all happen immensely fast but it orders this differently than when you

82
00:06:28,300 --> 00:06:30,030
directly call this code here.

83
00:06:30,040 --> 00:06:35,230
So this would work but it's kind of a hack, though you can absolutely also use this approach.

84
00:06:35,230 --> 00:06:40,750
The other approach is an approach we used earlier already and that is that you add the didChangeDependencies

85
00:06:40,870 --> 00:06:47,410
lifecycle method Flutter knows and this will now run after the widget has been fully initialized so

86
00:06:47,410 --> 00:06:51,540
to say but before build ran for the first time. It will

87
00:06:51,540 --> 00:06:57,620
however, unlike initState, run more often multiple times and not just when this gets created.

88
00:06:57,640 --> 00:07:05,110
So when using this approach, you should have another helper variable or property, like isInit, where

89
00:07:05,110 --> 00:07:10,630
you check if you're running this for the first time basically and only execute some code if that is

90
00:07:10,630 --> 00:07:18,520
true and set isInit to false thereafter, so that this never runs again and then you can put your code

91
00:07:18,520 --> 00:07:24,370
for fetching products in here and then this will only run when this page first loads. So that is the 

92
00:07:24,370 --> 00:07:30,280
alternative, both approaches work, both are kind of work arounds but both are fine to use, use whichever

93
00:07:30,280 --> 00:07:31,220
you prefer.

94
00:07:31,270 --> 00:07:36,250
By the way, this future delayed syntax of course would have also worked for ModalRoute.of or for

95
00:07:36,250 --> 00:07:43,870
any code which depends on this of context pattern in initState. With that,

96
00:07:43,960 --> 00:07:50,110
if I now do hot refresh, this loads, I still see my dummy shorts here,

97
00:07:50,110 --> 00:07:54,880
these are not the shirts from Firebase but the dummy shorts and I see instance of response and that's

98
00:07:54,880 --> 00:07:57,690
of course coming from this print statement.

99
00:07:57,700 --> 00:08:01,000
So with that, we're printing that. To see what's in there,

100
00:08:01,000 --> 00:08:07,930
let's actually decode the body with json.decode response.body because that's the interesting

101
00:08:07,930 --> 00:08:08,740
part now,

102
00:08:08,770 --> 00:08:11,380
otherwise we just print the entire response object,

103
00:08:11,380 --> 00:08:13,400
I'm interested in the body though.

104
00:08:13,400 --> 00:08:22,020
So let's do a full refresh here and this will now reload that page and with that reloaded, here we actually

105
00:08:22,020 --> 00:08:25,890
see what Firebase returns us and that's a very useful output here.
