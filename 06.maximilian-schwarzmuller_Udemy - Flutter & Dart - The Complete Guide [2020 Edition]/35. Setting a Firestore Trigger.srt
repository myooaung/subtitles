1
00:00:02,230 --> 00:00:07,600
Daher erhalten wir den Firebase-Administrator über das Firebase-Funktionspaket, das hier in diesem Funktionsordner verfügbar

2
00:00:07,660 --> 00:00:10,060
ist, damit unser Javascript-Code interagieren kann.

3
00:00:10,330 --> 00:00:16,420
Das ist jetzt wirklich alles nur JavaScript. Die Welt hat nichts mit Flattern zu tun, da der

4
00:00:16,420 --> 00:00:22,570
Code dieser Funktion später auf einem der Fire-Basis-Server ausgeführt wird, sodass wir am Ende dort Code ausführen können,

5
00:00:22,570 --> 00:00:25,650
wenn sich beispielsweise etwas in der Datenbank ändert.

6
00:00:25,690 --> 00:00:32,050
Wie könnte diese Funktion nun aussehen, wenn wir in die offiziellen Firebase-Bestände eintauchen, was immer eine gute

7
00:00:32,050 --> 00:00:40,170
Idee dafür ist. Wenn Sie also nach Firebase-Cloud-Funktionen suchen, finden Sie natürlich reichlich Dokumentation und was Sie hier unter Trigger-Hintergrundfunktionen finden,

8
00:00:40,950 --> 00:00:46,710
ist dass Sie Cloud Fire Store-Trigger verwenden können, damit Dad im Grunde genommen eine Funktion

9
00:00:46,740 --> 00:00:52,920
als Reaktion auf ein Ereignis ausführen kann, das in Ihrer iCloud Fire Store-Datenbank aufgetreten ist, und

10
00:00:52,920 --> 00:00:56,870
wie Sie sehen können, gibt es auch andere Trigger.

11
00:00:56,880 --> 00:01:02,550
Sie können auch eine Funktion ausführen, da einige Dateien beispielsweise mit Cloud-Speicherauslösern hochgeladen wurden.

12
00:01:02,550 --> 00:01:07,050
Aber ich interessiere mich für eine Funktion, die ich ausführen möchte, weil sich etwas in der Datenbank geändert hat.

13
00:01:07,050 --> 00:01:14,400
Und hier erhalten wir vier Trigger beim Erstellen eines Updates beim Löschen und beim Ausführen eines Updates, wenn das Erstellen

14
00:01:14,490 --> 00:01:20,590
oder Löschen gut ausgelöst wird und die Trigger nur für den jeweiligen Vorgang ausgeführt werden.

15
00:01:20,670 --> 00:01:24,080
Da möchte ich etwas Code ausführen, wenn eine neue Nachricht gespeichert wird.

16
00:01:24,120 --> 00:01:31,560
Wenn also eine neue Nachricht gesendet wurde, interessiert mich der Auslöser zum Erstellen und Sie können in den folgenden

17
00:01:31,770 --> 00:01:34,020
Beispielen sehen, wie er funktioniert.

18
00:01:34,020 --> 00:01:40,940
Am Ende müssen wir dieses Firebase-Funktionspaket mit dieser Codezeile in unsere Codedatei importieren.

19
00:01:40,980 --> 00:01:47,400
Dies geschieht bereits ganz oben und dort, nachdem wir hier eine solche Funktion exportieren müssen, die

20
00:01:48,000 --> 00:01:55,540
mit einer Funktion eingerichtet ist, die einen Feuerspeicher, ein Punktdokument und dann einen Pfad zu dem Dokument enthält, das Sie

21
00:01:55,540 --> 00:01:56,560
anhören möchten.

22
00:01:56,560 --> 00:02:02,500
Also, wo Sie das Erstellungsereignis anhören möchten und dann rechts oder in unserem Fall beim Erstellen.

23
00:02:02,500 --> 00:02:10,130
Also werde ich diesen Code hier kopieren und hier in meinen Funktionscode wie diesen verschieben und diesen durch

24
00:02:10,160 --> 00:02:11,600
on create ersetzen.

25
00:02:11,600 --> 00:02:13,950
Und hier ist der Weg anders.

26
00:02:13,980 --> 00:02:20,780
Ich interessiere mich für die Chat-Sammlung, aber in jeder Nachricht können Sie jetzt benennen, wie Sie möchten, aber Sie müssen

27
00:02:20,780 --> 00:02:26,840
geschweifte Klammern verwenden, um Firebase zu signalisieren, dass dies ein Platzhalter ist, bei dem Sie das genaue

28
00:02:26,840 --> 00:02:31,840
Dokument I nicht kennen. D. D. Stattdessen kümmern Sie sich um jedes Dokument dort.

29
00:02:31,880 --> 00:02:37,490
Wenn also ein neues Dokument hinzugefügt wird, egal welche Idee es hat, sollte diese Funktion zum Erstellen ausgeführt werden.

30
00:02:37,490 --> 00:02:44,240
Das ist es, was wir hier schreiben, und das bedeutet, dass immer dann, wenn etwas Neues in unserer

31
00:02:44,240 --> 00:02:50,030
Chat-Sammlung hinzugefügt wird, wenn ein neues Dokument hier hinzugefügt wird, wenn eine neue Nachricht hinzugefügt wird.

32
00:02:50,030 --> 00:02:54,120
Unsere Funktion wird ausgeführt, um zu sehen, wie das funktioniert.

33
00:02:54,370 --> 00:02:59,910
Lassen Sie uns einfach das Konsolenprotokoll erstellen, das dem Javascript entspricht, das dem Drucken im Flattern entspricht.

34
00:03:00,130 --> 00:03:09,660
Lassen Sie uns einfach die Daten protokollieren, die wir bei diesem Ereignis erhalten, und die Daten, die wir erhalten, werden dort

35
00:03:09,660 --> 00:03:11,070
unten beschrieben.

36
00:03:11,070 --> 00:03:17,160
Sie können die angebotenen Daten erhalten, um die Operation so oft abzuschließen, dass die Erstellung des

37
00:03:17,520 --> 00:03:24,290
Dokuments mit Änderungen nach den Daten abgeschlossen ist, wie Sie hier erfahren können, und dies ist alles nur JavaScript-Code.

38
00:03:24,290 --> 00:03:25,830
Für den Fall, dass Sie sich fragen, was es ist.

39
00:03:25,880 --> 00:03:31,490
Wie Sie sehen, ist es nicht zu weit vom Flattern entfernt, aber zum Beispiel funktioniert das Konzept anders. Seien Sie

40
00:03:31,490 --> 00:03:32,610
also nicht verwirrt.

41
00:03:32,630 --> 00:03:39,850
Es ist alles Javascript-Code hier, also bin ich an den Daten interessiert, nachdem die Fahrt beendet ist,

42
00:03:39,850 --> 00:03:47,090
also werde ich diese nach dem Aufrufen der Punktdatenfunktion hier kopieren und das Ergebnis hier mit dem Konsolenprotokoll protokollieren.

43
00:03:47,090 --> 00:03:54,410
Daher habe ich einen Wert übergeben, der durch Aufrufen von Daten an das Konsolen-LOC zurückgegeben wird, damit wir ihn hier ausgeben können.

44
00:03:54,440 --> 00:03:59,330
Nachdem wir diese Funktion fertig geschrieben haben, müssen wir sie bereitstellen, was bedeutet, dass wir sie auf Firebase-Server

45
00:03:59,330 --> 00:04:02,980
hochladen müssen, da sie nicht auf unserem lokalen Computer ausgeführt werden kann.

46
00:04:02,990 --> 00:04:05,630
Es wird auf Firebase-Servern ausgeführt.

47
00:04:05,630 --> 00:04:12,470
Hier in Ihrem Projekt, in dem Sie zuvor Firebase ausgeführt haben, führen Sie jetzt Firebase Deploy aus.

48
00:04:12,470 --> 00:04:17,960
Dadurch wird Ihre Funktion übernommen und hochgeladen und auf einem On-Firebase-Server initialisiert, sodass Sie

49
00:04:20,690 --> 00:04:23,160
diesen Vorgang hier sehen können.

50
00:04:23,260 --> 00:04:28,360
Es kann einige Sekunden dauern und Sie werden informiert, sobald es fertig ist.

51
00:04:28,480 --> 00:04:33,810
Was Sie jetzt tatsächlich sehen, ist, dass ich hier einen Fehler bekomme, einen 4 0 freien unbekannten Fehler.

52
00:04:33,860 --> 00:04:41,870
Jetzt sieht es so aus, als ob mir der Zugriff verweigert wurde, sodass Sie versuchen können, die Firebase-Anmeldung auszuführen, wenn Sie dies erhalten.

53
00:04:43,820 --> 00:04:48,680
Danach habe ich die Firebase-Bereitstellung erneut durchgeführt und jetzt sieht es besser aus.

54
00:04:48,680 --> 00:04:56,860
Es sieht so aus, als würde es hochgeladen und mit der Meldung "Bereitstellung abgeschlossen" wird erraten, was abgeschlossen wurde.

55
00:04:56,860 --> 00:05:00,110
Jetzt läuft unsere Funktion auf Firebase-Servern.

56
00:05:00,130 --> 00:05:04,460
Und jetzt, wenn wir eine neue Nachricht in der Datenbank haben, sollte die Funktion dort ausgelöst werden.

57
00:05:04,630 --> 00:05:12,350
Um nun unsere Funktion und ihre Ausgabe in unserer Firebase-Webkonsole zu überwachen, können wir zu den Funktionen zurückkehren und diese

58
00:05:12,350 --> 00:05:16,400
Seite neu laden. Ihre Funktion sollte hier angezeigt werden.

59
00:05:16,460 --> 00:05:20,150
Wenn Sie es nicht sofort sehen, warten Sie einige Minuten und versuchen Sie dann erneut zu laden.

60
00:05:20,150 --> 00:05:26,930
Das sollte also Ihre Funktion sein und Sie können auch die Protokolle dieser Funktion anzeigen, um zu sehen, was dort vor

61
00:05:26,930 --> 00:05:27,780
sich geht.

62
00:05:27,800 --> 00:05:34,330
Übrigens, wie immer übrigens, wenn Sie mit Firebase-Funktionen arbeiten, überprüfen Sie deren Preise. Hier haben Sie

63
00:05:34,330 --> 00:05:39,820
beispielsweise bei Cloud-Funktionen eine bestimmte kostenlose Stufe und einen bestimmten kostenlosen Nutzungsbetrag. Wenn Sie

64
00:05:39,820 --> 00:05:42,690
diesen überschreiten, werden Ihnen Gebühren berechnet.

65
00:05:42,730 --> 00:05:44,930
Stellen Sie also sicher, dass Sie das überprüfen.

66
00:05:44,950 --> 00:05:47,110
Hier sehen wir also einige Protokolle von dysfunktional.

67
00:05:47,140 --> 00:05:50,440
Und jetzt wollen wir sehen, ob sich dort etwas ändert, wenn ich eine neue Nachricht sende.

68
00:05:50,440 --> 00:05:55,300
Funktioniert das, wenn ich diese Nachricht sende?

69
00:05:55,300 --> 00:05:56,990
Es zeigt sich hier natürlich.

70
00:05:57,250 --> 00:06:04,300
Und es sollte dort in unserer Datenbank erscheinen, wenn wir uns diese Chat-Sammlung ansehen, sollten wir dies sehen.

71
00:06:04,300 --> 00:06:05,790
Funktioniert diese Nachricht hier?

72
00:06:06,770 --> 00:06:08,830
Und was ist mit unserer Funktion?

73
00:06:08,920 --> 00:06:12,240
Jetzt kann es immer einige Zeit dauern, bis die Protokolle aktualisiert werden.

74
00:06:12,280 --> 00:06:18,940
Vielleicht möchten Sie den Weg zum Bieten neu laden und zu einem späteren Zeitpunkt wiederkommen, aber irgendwann sollten

75
00:06:18,940 --> 00:06:22,790
Sie hier etwas sehen, und ich sehe tatsächlich etwas.

76
00:06:22,790 --> 00:06:27,100
Ich sehe, dass ein Fehler keine Eigenschaftsdaten von undefined lesen kann.

77
00:06:27,100 --> 00:06:31,380
Also hat unsere Funktion ausgeführt, aber da ist etwas schief gelaufen.

78
00:06:31,430 --> 00:06:34,910
Einige Daten konnten hier nicht abgerufen werden.

79
00:06:34,910 --> 00:06:40,500
Es sieht also so aus, als ob das Aufrufen von Daten, die nach dem Ändern geändert wurden, nicht funktioniert hat.

80
00:06:40,520 --> 00:06:46,130
Dies war einfach ein kleiner Fehler von meiner Seite im On-Create-Fall.

81
00:06:46,130 --> 00:06:52,940
Wir müssen diese Änderung eigentlich nicht nach einer Sache vornehmen, stattdessen erhalten wir sowieso einen Schnappschuss

82
00:06:53,120 --> 00:06:58,720
der Daten, sodass wir einfach Schnappschuss-Punktdaten aufrufen können, wie Sie hier sehen können.

83
00:06:58,740 --> 00:07:04,390
Ich war im On-Update-Fall, in dem Sie natürlich zwei Zustände vor und nach dem Update haben.

84
00:07:04,470 --> 00:07:08,790
Aber wenn Sie etwas erstellen, müssen Sie nur einen Schnappschuss machen.

85
00:07:08,790 --> 00:07:15,120
Deshalb habe ich mich entschlossen, das Design zu verlassen, da dies leicht zu übersehen ist. Wenn wir jetzt hier auf den Schnappschuss zugreifen, sollten

86
00:07:15,120 --> 00:07:19,150
wir in der Lage sein, die Daten, an denen wir interessiert sind, wirklich zu erhalten.

87
00:07:19,230 --> 00:07:25,890
Um dies zu überprüfen, lassen Sie uns die USA erneut bereitstellen, wenn Sie lokal Änderungen vornehmen, die Sie erneut bereitstellen müssen.

88
00:07:26,160 --> 00:07:29,750
Lassen Sie uns also die USA neu einsetzen und dies nun erneut validieren.

89
00:07:29,760 --> 00:07:34,910
Warten wir also, bis die Umschichtung abgeschlossen ist und nun abgeschlossen ist.

90
00:07:34,940 --> 00:07:43,040
Lassen Sie mich noch eine solche Nachricht senden und dann hier zu unseren Protokollen zurückkehren.

91
00:07:43,460 --> 00:07:45,760
Und wieder möchten Sie vielleicht hier neu laden.

92
00:07:45,770 --> 00:07:46,700
Warte ein kleines bisschen.

93
00:07:46,760 --> 00:07:53,260
Laden Sie erneut, bis das neue Protokoll hier angezeigt wird und Sie schließlich Ihre Daten erhalten sollten.

94
00:07:53,270 --> 00:07:55,640
Jetzt haben wir hier noch eine Warnung oder einen Fehler.

95
00:07:55,640 --> 00:07:57,020
Wir werden uns später darum kümmern.

96
00:07:57,080 --> 00:08:03,260
Aber was wir hier sehen, sind diese Daten, also sehen wir, dass dies die Daten sind, die wir erhalten haben.

97
00:08:03,340 --> 00:08:05,970
Und genau diese Daten wurden in einer Datenbank gespeichert.

98
00:08:06,130 --> 00:08:11,500
Also bekommen wir hier unseren Benutzernamen, wir bekommen den Text, der ziemlich cool ist und das sind die Daten,

99
00:08:11,500 --> 00:08:14,420
die ich jetzt als Teil meiner Benachrichtigung senden möchte.

100
00:08:14,440 --> 00:08:19,840
Jetzt noch eine zusätzliche Anmerkung: Wir haben auch den Fehler erhalten, dass die Funktion undefiniert zurückgegeben wurde und

101
00:08:19,840 --> 00:08:25,980
dass sie einen Wert oder ein Versprechen zurückgeben sollte, stattdessen ist ein Versprechen im Wesentlichen dasselbe wie eine Zukunft in Dart.

102
00:08:25,990 --> 00:08:30,610
In Javascript heißt das also ein Versprechen, und unsere Funktion funktioniert nie.

103
00:08:30,650 --> 00:08:32,090
Das ist kein großes Problem.

104
00:08:32,110 --> 00:08:34,820
Wir können hier im Moment einfach alles zurückgeben.

105
00:08:34,840 --> 00:08:39,700
Das wird sich sowieso bald ändern, denn jetzt möchte ich natürlich nichts zurückgeben.

106
00:08:39,880 --> 00:08:47,620
Stattdessen möchte ich jetzt meine Nachricht senden und dafür verwenden wir die Firebase-Verwaltung K, die wir auch haben.
