1
00:00:02,150 --> 00:00:06,830
Stellen wir also sicher, dass wir unseren Benutzer I hinzufügen können. D. D. zu ausgehenden Chat-Nachrichten hier.

2
00:00:07,460 --> 00:00:14,270
Es ist nicht allzu schwer, denn zum Glück haben wir das Feuerbasis-Objekt jetzt entfernt, um es zu nutzen.

3
00:00:14,300 --> 00:00:22,130
Sie müssen sicherstellen, dass Sie die Firebase-Off-Dart-Datei aus der Firebase des Pakets importieren.

4
00:00:22,250 --> 00:00:30,050
Und damit können Sie auf Firebase Off tippen, um dieses Objekt hier zu verwenden, um beispielsweise zu

5
00:00:30,050 --> 00:00:30,840
handeln.

6
00:00:30,980 --> 00:00:34,990
In diesem Fall finden Sie eine aktuelle Benutzermethode.

7
00:00:35,060 --> 00:00:37,860
Dadurch erhalten Sie Zugriff auf den aktuell angemeldeten Benutzer.

8
00:00:37,940 --> 00:00:40,730
Und Papa wird das Daten wie der Benutzer I enthalten. D ..

9
00:00:41,720 --> 00:00:48,800
Jetzt gibt uns der aktuelle Benutzer tatsächlich eine Zukunft, die sich schließlich für unseren aktuellen Firebase-Benutzer auflösen wird.

10
00:00:48,800 --> 00:00:57,830
Deshalb füge ich hier Async hinzu, damit ich hier warten und auf diese Weise auf den Benutzer zugreifen kann.

11
00:00:57,830 --> 00:01:03,510
Diese Zeile wird also erst ausgeführt, wenn wir den Benutzer haben.

12
00:01:03,520 --> 00:01:12,940
Jetzt können wir diesen Benutzer verwenden und Benutzer I einstellen. D. D. gleich Benutzer Punkt Sie I. D. D. Es gibt ein Du I. D. D. Feld auf dem

13
00:01:13,210 --> 00:01:18,760
Benutzerobjekt, das unser aktuelles I enthält. D. D. Und damit können wir

14
00:01:18,880 --> 00:01:20,970
diese Chat-Nachricht diesem Benutzer klar zuordnen.

15
00:01:20,990 --> 00:01:27,560
Natürlich haben die vorhandenen Chat-Nachrichten hier nicht die manuell verkauften. Gehen Sie dorthin und fügen Sie jeder Nachricht ein neues Feld hinzu, in dem

16
00:01:27,590 --> 00:01:39,270
ich im Grunde den Benutzer I festgelegt habe. D. D. gleich einem Dummy I. D. D. wie ein was natürlich nicht mein User ist

17
00:01:39,270 --> 00:01:41,040
I. D. D. aber das ist gut so

18
00:01:41,040 --> 00:01:43,770
Diese Nachrichten sind einfach nicht von mir.

19
00:01:43,770 --> 00:01:54,470
Stellen wir also sicher, dass wir alle diese Felder hier hinzufügen. Sobald wir dies getan haben, können wir zurückgehen und sicherstellen, dass wir die Nachricht unterschiedlich

20
00:01:54,470 --> 00:01:58,620
rendern, je nachdem, ob wir es sind oder nicht.

21
00:01:59,330 --> 00:02:07,100
Im Nachrichtenblasen-Widget können wir also eine zweite Eigenschaft hinzufügen, die vielleicht ein Boolescher Wert ist, den ich auch von

22
00:02:07,100 --> 00:02:08,770
außen erhalten möchte.

23
00:02:08,840 --> 00:02:14,660
Ich erwarte also auch, dass ich durch den Konstruktor der Nachrichtenblase einen Wert für mich bekomme. Sie können also zu dem Ort gehen, an

24
00:02:14,660 --> 00:02:20,630
dem wir die Nachrichtenblase erstellen. Dies ist die Startdatei für Nachrichten. Neben der Übergabe des Textes müssen wir jetzt auch Chet-Dokumente oder an übergeben aktueller

25
00:02:20,630 --> 00:02:30,020
Index und dann Zugriff auf Benutzer I. D. D. Benutzer I. D. D. Jetzt ist ein Feld, das

26
00:02:30,020 --> 00:02:36,290
wir in jeder Nachricht haben. Wir haben die Idee des Benutzers, der diese Nachricht geschrieben hat, damit wir hier

27
00:02:36,290 --> 00:02:37,530
darauf zugreifen können.

28
00:02:37,610 --> 00:02:42,400
Jetzt wollen wir den Benutzer I natürlich nicht weiterleiten. D. D. obwohl Nachrichtenblase stattdessen wissen will, ob

29
00:02:42,400 --> 00:02:43,790
dies wir sind oder nicht.

30
00:02:43,970 --> 00:02:46,660
Und dies ist nur eine Zeichenfolge, keine Boolesche.

31
00:02:46,760 --> 00:02:52,580
Um herauszufinden, ob wir das sind oder nicht, müssen wir alle das aktuelle I verwenden. D. D. des gesperrten Benutzers hier

32
00:02:52,580 --> 00:02:59,960
in dieser Zeile, damit wir die Idee des aktuell gesperrten Benutzers mit der Idee dieser Nachricht vergleichen können.

33
00:03:00,000 --> 00:03:06,870
Jetzt gibt es verschiedene Möglichkeiten, um herauszufinden, dass meiner Meinung nach eine sehr elegante

34
00:03:06,990 --> 00:03:15,210
Methode darin besteht, den Listenansicht-Builder tatsächlich mit einem Zahlen-Widget zu versehen, das jetzt das zukünftige Builder-Widget ist.

35
00:03:15,220 --> 00:03:18,430
Jetzt ist der zukünftige Builder ein bisschen wie der Stream Builder.

36
00:03:18,430 --> 00:03:23,980
Der Unterschied besteht darin, dass ein zukünftiger Builder eine Zukunft wünscht und seine Builder-Methode aufruft, sobald

37
00:03:23,980 --> 00:03:27,290
die Zukunft aufgelöst wird, sobald die Zukunft fertig ist.

38
00:03:27,400 --> 00:03:36,070
Daher fügen wir ein zukünftiges Argument und dann ein Builder-Argument hinzu, und das Builder-Argument möchte eine Funktion, die

39
00:03:36,250 --> 00:03:40,890
den Kontext und dann auch den zukünftigen Snapshot empfängt.

40
00:03:41,080 --> 00:03:43,360
Und dann sollten wir ein Widget zurückgeben.

41
00:03:43,360 --> 00:03:48,880
Jetzt in der Zukunft möchte ich hier Firebase Off einrichten und für Dad müssen Sie

42
00:03:48,880 --> 00:03:53,950
sicherstellen, dass Sie das Firebase Off-Paket und die Firebase Off Dart-Datei hier importieren.

43
00:03:54,370 --> 00:03:58,840
Firebase der Gedankeninstanz und rufen Sie dann den aktuellen Benutzer auf.

44
00:03:58,840 --> 00:04:01,770
Wie ich vor einer Sekunde erklärt habe, gibt uns dies eine Zukunft.

45
00:04:01,870 --> 00:04:08,760
Wenn diese Zukunft verrechnet wird, wird dieser Builder ausgeführt und diese Listenansicht wird jetzt gut erstellt.

46
00:04:08,760 --> 00:04:11,210
Eigentlich möchte ich diese Listenansicht nicht immer erstellen.

47
00:04:11,310 --> 00:04:12,560
Also werde ich die Liste einpacken.

48
00:04:12,570 --> 00:04:18,240
Sie erstellen hier geschweifte Klammern und fügen hier ein Semikolon hinzu, da ich überprüfen möchte,

49
00:04:18,240 --> 00:04:25,760
was im zukünftigen Snapshot enthalten ist, wenn es sich um einen zukünftigen Snapshot handelt. Der Verbindungsstatus entspricht dem Warten auf den Verbindungsstatus.

50
00:04:25,920 --> 00:04:29,390
In diesem Fall haben wir noch keine Informationen über den Benutzer.

51
00:04:29,430 --> 00:04:37,990
Ich werde ein zentrales Widget zurückgeben, in dem ich eine kreisförmige Fortschrittsanzeige habe, ähnlich wie dort oben, und ja,

52
00:04:38,080 --> 00:04:46,010
Sie könnten daher natürlich ein Widget erstellen, das Sie hier wiederverwenden, oder eine Builder-Methode. Ich werde hier einfach

53
00:04:46,010 --> 00:04:47,710
etwas Code wiederholen.

54
00:04:47,720 --> 00:04:48,790
Das ist also ein Scheck.

55
00:04:48,890 --> 00:04:54,160
Wir könnten auch prüfen, ob wir möglicherweise keine Daten haben.

56
00:04:54,190 --> 00:05:00,220
Wenn das also falsch ist, aber wenn dies der Fall ist, wenn wir keinen aktuellen Benutzer haben, sollten wir wegen der

57
00:05:00,220 --> 00:05:03,310
Logik in der Haupt-Dart-Datei sowieso nicht auf dem Chat-Bildschirm sein.

58
00:05:03,310 --> 00:05:05,770
In diesem Fall sollten wir das außerhalb des Bildschirms sehen.

59
00:05:05,770 --> 00:05:13,430
Es sollte also nicht notwendig sein, dies wirklich zu überprüfen, daher sollten wir hier an dieser Stelle tatsächlich einen Benutzer haben, und wir können

60
00:05:14,450 --> 00:05:20,210
dann hier und da zum Listenansicht-Builder zurückkehren, und jetzt erhalten wir Zugriff auf den zukünftigen Schnappschuss, auf

61
00:05:20,630 --> 00:05:25,980
den wir uns stützen über die aktuelle Benutzerzukunft am Ende gibt uns nur Zugriff auf die

62
00:05:25,980 --> 00:05:27,440
Daten des aktuellen Benutzers.

63
00:05:27,530 --> 00:05:36,210
Also hier können wir vergleichen, ob der Benutzer I. D. D. Von diesen Daten, die wir aus unserer Nachrichtensammlung

64
00:05:36,210 --> 00:05:46,740
erhalten haben, entspricht dies den zukünftigen Schnappschuss-Punktdaten, die Sie I haben. D. D. Zukünftige Snapshot-Punktdaten sind das aktuelle Benutzerobjekt und haben eine D-Eigenschaft,

65
00:05:46,830 --> 00:05:55,920
wie Sie im Widget "Neue Nachricht" gesehen haben. Wir greifen auch auf Benutzerpunkt I zu. D. D.

66
00:05:56,220 --> 00:06:03,030
auf die vom aktuellen Benutzer zurückgegebenen Daten und wir machen das gleiche hier.

67
00:06:03,190 --> 00:06:05,830
Jetzt gibt es eine Sache, über die ich nicht allzu glücklich bin.

68
00:06:05,860 --> 00:06:11,800
Ich habe hier meinen zukünftigen Builder anstelle dieses Stream-Builders, was bedeutet, dass ich für jede neue Nachricht, die wir

69
00:06:11,860 --> 00:06:17,890
im Back-End erhalten haben, immer wieder meine Daten für den aktuellen Benutzer abrufe, und das ist etwas überflüssig, um

70
00:06:18,250 --> 00:06:24,140
diese neue Zukunft zu erstellen und darauf zu warten Lösen Sie jede neue Nachricht auf, die gesendet wurde.

71
00:06:24,310 --> 00:06:26,030
Klingt nicht so toll.

72
00:06:26,230 --> 00:06:30,360
Das ist, während die Umstrukturierung ein bisschen ist und ich diesen Code hier abrufen werde.

73
00:06:30,520 --> 00:06:38,560
Der zukünftige Builder-Code hat diesen nach oben verschoben und kehrt dieses Jahr ganz am Anfang zurück. Dann

74
00:06:39,600 --> 00:06:48,960
werde ich hier anstelle der Builder-Methode des zukünftigen Builders prüfen, ob der zukünftige Snapshot-Verbindungsstatus wartet. Lassen Sie uns dies

75
00:06:48,960 --> 00:06:55,860
hören und wenn er nicht wartet Ich werde zum Stream Builder zurückkehren und dort

76
00:06:59,010 --> 00:07:00,000
unten.

77
00:07:01,670 --> 00:07:03,570
Wir haben Ihnen die Liste als Baumeister zurückgegeben.

78
00:07:03,590 --> 00:07:05,840
Aber jetzt ist das im Stream Builder.

79
00:07:05,840 --> 00:07:11,570
Also habe ich einfach den Stream Builder und den Future Builder ausgetauscht, um sicherzustellen, dass wir keine neue Zukunft schaffen.

80
00:07:11,570 --> 00:07:18,030
Nur weil sich in unserem Datenstrom, der aus der Feuersturmsammlung stammt, etwas geändert hat und wir damit in Ordnung

81
00:07:18,190 --> 00:07:22,000
sein sollten und der Rest so funktioniert, wie er sollte.

82
00:07:22,090 --> 00:07:27,880
Und jetzt leiten wir Informationen, die Nachrichten von uns gesendet haben, an den Chat oder an das

83
00:07:27,880 --> 00:07:28,710
Nachrichtenblasen-Widget weiter.

84
00:07:28,870 --> 00:07:34,720
Im Nachrichtenblasen-Widget können wir nun diese Informationen verwenden, die in dieser Eigenschaft gespeichert sind,

85
00:07:36,010 --> 00:07:38,800
beispielsweise für die Farbe dieses Containers.

86
00:07:38,800 --> 00:07:46,450
Wir können überprüfen, ob ich wahr bin und ob ich die Axonfarbe nicht verwenden möchte, sondern sagen wir,

87
00:07:46,480 --> 00:07:54,940
ich möchte nur die Farben Grau verwenden, und dort können wir diese Notation tatsächlich verwenden, um einen bestimmten Grauton zu

88
00:07:54,940 --> 00:07:55,540
verwenden

89
00:07:58,250 --> 00:08:04,700
Unsere eigenen Nachrichten sind grau und die Nachrichten anderer Benutzer sind lila, oder wir verwenden

90
00:08:04,700 --> 00:08:09,940
diese Akzentfarbe einfach und für die Textfarbe sollten wir etwas Ähnliches tun.

91
00:08:10,070 --> 00:08:16,490
Wenn wir es sind, möchte ich nicht die Farbe verwenden, die sich in der Farbe vom X

92
00:08:16,490 --> 00:08:22,700
abhebt, sondern ich verwende die Farben Schwarz, die sich von der Farbe abheben, und ansonsten verwende

93
00:08:25,540 --> 00:08:35,280
ich Tech X und Farbkontrastfarben, mit denen wir auch arbeiten können auf dem Randradius ein wenig und nicht alle Ränder als abgerundete Ecken festlegen, sondern nur

94
00:08:35,340 --> 00:08:43,050
mit dem Randradius können wir bestimmte Ränder als Ziel festlegen. Nehmen wir an, wir möchten immer, dass der obere linke Rand

95
00:08:43,350 --> 00:08:53,310
kreisförmig ist, damit wir als abgerundete Ziele dann oben links und dann zielen können Verwenden Sie kreisförmige Radiuspunkte, um den Radius der oberen linken Ecke auf 12

96
00:08:53,370 --> 00:09:01,080
zu setzen. Ich mache dasselbe für die obere rechte Ecke, aber das ist nicht wichtig. Ich mache verschiedene Dinge für

97
00:09:01,380 --> 00:09:07,840
die unteren Ecken. Nehmen wir an, die untere linke Ecke sollte nur rund sein Wenn wir es

98
00:09:07,840 --> 00:09:13,350
nicht sind, weil ich Nachrichten auch nach links und rechts verschieben möchte, je

99
00:09:13,350 --> 00:09:22,080
nachdem, woher sie von uns stammen oder nicht, setze ich unten links einen Scheck, bei dem ich überprüfe, ob wir es nicht sind.

100
00:09:22,080 --> 00:09:32,150
Das Ausrufezeichen ist also wichtig, wenn ich es nicht bin und wenn ich es nicht bin, setze ich den Radius auf Null und

101
00:09:32,180 --> 00:09:35,690
ansonsten setze ich den Radius hier auf zwölf.

102
00:09:35,690 --> 00:09:37,430
Also nur wenn wir es sind.

103
00:09:37,460 --> 00:09:44,100
Die untere linke Ecke wird abgerundet und ich mache das Gegenteil für die untere rechte Ecke.

104
00:09:44,220 --> 00:09:54,860
Wenn wir alle es sind, setzen Sie den Radius hier auf Null und ansonsten auf 212.

105
00:09:57,200 --> 00:10:02,360
Infolgedessen werden die Ecken dieses Containers unterschiedlich gerundet, je nachdem, ob es sich um eine Nachricht von uns

106
00:10:02,360 --> 00:10:03,530
handelt oder nicht.

107
00:10:04,650 --> 00:10:10,810
Und das ist wichtig, weil wir in der Zeile jetzt sehen können, dass die Ausrichtung der Hauptachse steuert, wo

108
00:10:10,810 --> 00:10:14,260
die Nachricht gerendert wird, wenn sie links oder rechts ist.

109
00:10:14,620 --> 00:10:20,450
Bei allem, was nach mir sucht, und wenn wir es sind, sagen wir, wir wollen die Nachricht nach rechts verschieben.

110
00:10:20,620 --> 00:10:27,250
Wir können dies tun, indem wir die Ausrichtung der Hauptachse so einstellen, dass sie endet, oder wenn

111
00:10:27,250 --> 00:10:33,730
wir es nicht sind, setzen wir die Ausrichtung der Hauptachse so, dass sie beginnt. Daher sollten

112
00:10:34,810 --> 00:10:41,400
Nachrichten jetzt auf verschiedenen Seiten der Checkliste gerendert werden, wenn wir all dies speichern und neu laden.

113
00:10:41,420 --> 00:10:48,470
Das sieht gut aus, weil dies Nachrichten sind, die nicht von uns gesendet wurden. Wenn ich jetzt eine Nachricht von mir sende, sehen Sie, dass sie rechts

114
00:10:48,470 --> 00:10:50,780
ist, wenn ich jetzt eine neue Nachricht sende.

115
00:10:50,780 --> 00:10:56,590
Es ist grau und wir haben alle diese verschiedenen abgerundeten Ecken, so dass es ziemlich ordentlich aussieht.

116
00:10:56,590 --> 00:11:03,250
Jetzt möchte ich eines verbessern, um sicherzustellen, dass dies immer auf effiziente Weise wiedergegeben wird.

117
00:11:03,320 --> 00:11:09,840
Lassen Sie uns einige Schlüssel verwenden, mit denen Sie lernen werden, dass es bei der Arbeit mit Datenlisten

118
00:11:09,840 --> 00:11:17,040
zu Problemen mit der flacheren Aktualisierung Ihrer Widgets kommen kann und dass Flatter immer in der Lage sind, Daten und Listen

119
00:11:17,070 --> 00:11:19,620
oder Widgets und Listen effizient zu aktualisieren.

120
00:11:19,620 --> 00:11:25,890
Gehen wir zum Nachrichtenblasen-Widget, das das Widget ist, das wir hier in unserer Liste wiederholen, und fügen wir dort einen Schlüssel

121
00:11:25,890 --> 00:11:26,460
hinzu.

122
00:11:26,460 --> 00:11:29,570
Lassen Sie uns dort einen Schlüssel akzeptieren. Das Akzeptieren eines Schlüssels ist einfach.

123
00:11:29,580 --> 00:11:36,990
Wir fügen eine neue Eigenschaft vom Typ key hinzu und nennen sie key. Dann haben wir hier im Konstruktor einfach ein benanntes

124
00:11:36,990 --> 00:11:42,090
Argument, auf das wir jetzt in den Nachrichten dot Dart auf den Schlüssel zeigen.

125
00:11:42,100 --> 00:11:47,240
Wir können diesen Schlüssel jetzt einfach hier festlegen, indem wir auf dieses neu hinzugefügte benannte Argument abzielen.

126
00:11:47,380 --> 00:11:49,110
Und jetzt brauchen wir einen eindeutigen Schlüssel.

127
00:11:49,120 --> 00:11:56,510
Wir können mit dem Werteschlüssel erstellen und einen eindeutigen Wert verwenden, und jede Nachricht hier hat einen eindeutigen Wert.

128
00:11:56,530 --> 00:12:03,550
Es hat ein einzigartiges Dokument I. D. D. So können wir uns an Chet-Dokumente wenden und

129
00:12:04,180 --> 00:12:10,240
ein Indexzugriffsdokument I geben. D. D. In diesem Dokument wird jedes Dokument mit einem I versehen. D. D. auf die über

130
00:12:10,240 --> 00:12:11,640
dieses Feld zugegriffen werden kann.

131
00:12:11,680 --> 00:12:17,200
Jetzt werden wir hier keinen Unterschied sehen, aber hinter den Kulissen wird sichergestellt, dass das Flattern

132
00:12:17,200 --> 00:12:20,310
diese Liste immer effizient neu rendern und aktualisieren kann.

133
00:12:20,320 --> 00:12:21,570
Das braucht es vielleicht nicht.

134
00:12:21,570 --> 00:12:26,200
Es könnte in der Lage sein, diese Liste auch ohne den Schlüssel effizient zu aktualisieren, aber es ist sicherlich alles, um nicht zu

135
00:12:26,200 --> 00:12:26,530
schaden.
