1
00:00:02,390 --> 00:00:08,870
What about other things like the appBar or the general look of this page? By default, we have the material

2
00:00:08,880 --> 00:00:17,180
design look here because what we're using here in our main.dart file, in the build method is this scaffold

3
00:00:17,350 --> 00:00:25,230
widget and the scaffold widget here by default gives us a page for material design widgets.

4
00:00:25,230 --> 00:00:32,860
Now there also is a Cupertino and iOS version of that and this is another good place to point at the Flutter

5
00:00:32,880 --> 00:00:39,650
widget catalog again because in case you haven't noticed it yet, there also is a Cupertino iOS-style

6
00:00:39,650 --> 00:00:46,520
widgets section and that gives you an overview of all the widgets that are built into Flutter that have

7
00:00:46,520 --> 00:00:52,540
that Cupertino look and which you can use in conjunction with that platform is check to render either

8
00:00:52,590 --> 00:00:56,340
the Cupertino widget or the default material widget

9
00:00:56,660 --> 00:01:02,410
and for example here we have the CupertinoPageScaffold and that's pretty interesting here.

10
00:01:02,540 --> 00:01:08,960
Instead of that scaffold, we could render the different one by again using Platform.isIOS

11
00:01:09,230 --> 00:01:10,670
and if that is not true,

12
00:01:10,670 --> 00:01:16,280
so in the else case after the colon, I'll use the material design scaffold, otherwise I'll use

13
00:01:16,280 --> 00:01:24,680
the CupertinoPageScaffold which is kind of the replacement for that. Now important, to use any Cupertino

14
00:01:24,680 --> 00:01:31,100
widgets, you need to add an import to package:flutter/cupertino.dart just as we used material.dart

15
00:01:31,220 --> 00:01:31,730
before,

16
00:01:31,970 --> 00:01:37,370
now in addition to that and I say in addition because we still use a couple of features from the material.dart

17
00:01:37,370 --> 00:01:41,200
package because it contains more than just material styled widgets

18
00:01:41,330 --> 00:01:48,140
but in addition to that, you now also need to import the cupertino.dart file. It has less options

19
00:01:48,140 --> 00:01:54,270
than the material design scaffold but it allows us to define a body which here is named child,

20
00:01:54,290 --> 00:02:00,220
that's a bit of an inconsistency which unfortunately or deliberately, I don't know but which was introduced

21
00:02:00,320 --> 00:02:05,440
but this is essentially what you have in body and then you can set the background color of the page,

22
00:02:05,450 --> 00:02:07,670
you can also add a navigation bar

23
00:02:10,830 --> 00:02:13,920
So here, the body of course should be the same,

24
00:02:13,920 --> 00:02:19,140
so I'll actually grab the entire body content, this entire SingeChildScrollView and cut it out of

25
00:02:19,140 --> 00:02:23,620
there and store it in a new variable, again so that I can reuse it.

26
00:02:23,640 --> 00:02:25,040
So here, I'll have a page

27
00:02:25,040 --> 00:02:28,580
body variable, you can name it whatever you want,

28
00:02:28,590 --> 00:02:30,780
the value is our page body

29
00:02:31,050 --> 00:02:39,300
and now I can enter this here as a body for scaffold but also as a child for CupertinoPageScaffold

30
00:02:40,200 --> 00:02:44,910
because the thing which I change or which I want to change here is not the page body but actually, the

31
00:02:44,910 --> 00:02:53,490
navigation bar. There, instead of appBar, I want to use a specific appBar for Cupertino because here, 

32
00:02:57,680 --> 00:03:00,320
we actually can use the CupertinoNavigationBar.

33
00:03:03,100 --> 00:03:09,400
However, it's best if I don't add it here but if I do add it up there where I already created that appBar

34
00:03:09,400 --> 00:03:12,250
variable to now again check the platform,

35
00:03:12,250 --> 00:03:18,990
so if platform is iOS, I want to render something different and only render the appBar if I'm on Android

36
00:03:19,380 --> 00:03:26,780
and here, I want to use my CupertinoNavigationBar and that means that the appBar variable now holds

37
00:03:26,870 --> 00:03:36,020
either the CupertinoNavigationBar or the material appBar and hence I can use appBar down there in my

38
00:03:36,020 --> 00:03:43,190
CupertinoPageScaffold, just as well as in the scaffold down here and I'm doing this because I use my preferred

39
00:03:43,190 --> 00:03:50,360
size here and that actually is taken from the appBar and of course, I want to calculate the preferred

40
00:03:50,360 --> 00:03:57,080
size for both my CupertinoNavigationBar as well as for this appBar. Now small problem we have here though

41
00:03:57,320 --> 00:04:03,020
is that I'm getting an error that preferred size is not defined on widget. The reason for that is actually

42
00:04:03,020 --> 00:04:09,680
that appBar is inferred to be of type widget here. Now that simply happens because Dart is not able to find

43
00:04:09,680 --> 00:04:16,220
out that CupertinoNavigationBar and appBar both have a preferred size property but actually, if we

44
00:04:16,220 --> 00:04:23,530
add a dot here after CupertinoNavigationBar, we see there is a preferred size property. So this also,

45
00:04:23,950 --> 00:04:32,460
if we click on it, is in the end implementing some kind of preferred size widget. So we should tell

46
00:04:32,460 --> 00:04:37,030
Dart that this is the case by adding the type here

47
00:04:37,040 --> 00:04:40,430
and that's one of the cases where it makes sense to explicitly set the type

48
00:04:40,430 --> 00:04:41,740
if you know what the type is

49
00:04:41,750 --> 00:04:47,120
but Dart can't find out and set this to preferred size widget, like this.

50
00:04:47,120 --> 00:04:52,940
Now you get rid of these type errors down there because you know hey this will be available at a point

51
00:04:52,940 --> 00:04:56,510
of time Dart is not able to find out.

52
00:04:56,540 --> 00:04:59,920
So with that, we now have a setup where we render a different navigation bar,

53
00:04:59,960 --> 00:05:02,110
of course we now also want to set a title,

54
00:05:02,150 --> 00:05:08,180
however not with a title property here but here instead, you target the middle property and space control

55
00:05:08,210 --> 00:05:14,910
is your friend here to find out what you can set on the CupertinoNavigationBar. Middle here takes

56
00:05:14,910 --> 00:05:16,600
a widget just like title does,

57
00:05:16,620 --> 00:05:17,950
it's just a different name.

58
00:05:17,970 --> 00:05:23,940
Again, some inconsistency here but you can set your text there.

59
00:05:23,970 --> 00:05:29,420
Now of course, you typically also want to add some actions here, though here you have no actions property

60
00:05:29,430 --> 00:05:34,590
but instead you'll have a trailing property to add some content at the end of the bar and that could

61
00:05:34,590 --> 00:05:36,680
be a row with your actions

62
00:05:36,690 --> 00:05:43,560
and now here important, IconButton also would be a material icon

63
00:05:43,580 --> 00:05:48,420
and if you try to use that in a CupertinoNavigationBar, you would get an error

64
00:05:52,720 --> 00:05:56,200
and now when you save that though, you'll get an error

65
00:05:56,270 --> 00:06:01,410
where we see that an IconButton widget requires a material widget ancestor.

66
00:06:01,420 --> 00:06:08,890
The problem here in the end is that we added an IconButton widget which is defined for material

67
00:06:08,890 --> 00:06:13,630
design inside of our CupertinoNavigationBar, inside

68
00:06:13,770 --> 00:06:22,270
in the end of our CupertinoPageScaffold and as the error message tells us, material widgets and the

69
00:06:22,280 --> 00:06:23,430
IconButton is one of them

70
00:06:23,470 --> 00:06:31,580
look for some parent widgets somewhere which implements material design and that's missing here. Now since

71
00:06:31,580 --> 00:06:32,900
at the point of time I'm recording this,

72
00:06:32,900 --> 00:06:34,710
there is no Cupertino IconButton,

73
00:06:34,820 --> 00:06:45,070
one thing we can do here is we can build our own button. We can add a GestureDetector where I wire up

74
00:06:45,460 --> 00:06:53,650
onTap to start add new transactions, so to the same code I had down there for onPressed, like this

75
00:06:55,780 --> 00:07:02,590
and where the child then is our custom button content and our child here can be an icon widget which

76
00:07:02,590 --> 00:07:09,310
is not a material design limited icon and now we could use icons add but actually to have that full

77
00:07:09,400 --> 00:07:15,260
iOS look, we might want to use CupertinoIcons which exists at.

78
00:07:15,370 --> 00:07:17,940
So that's a collection of CupertinoIcons

79
00:07:18,070 --> 00:07:24,730
and again just as with material icons with a dot here, you can go through them and find out which icons

80
00:07:24,730 --> 00:07:25,220
are included,

81
00:07:25,240 --> 00:07:30,910
unfortunately without a visual preview, at least for now but still with a short description and it's a

82
00:07:30,910 --> 00:07:32,110
pretty good list,

83
00:07:32,110 --> 00:07:40,360
pretty good mix of CupertinoIcons. With that if we save that and we restart our application here, we

84
00:07:40,360 --> 00:07:46,900
now have that plus icon up there and it also opens that modal. Now what's clearly missing however is

85
00:07:47,110 --> 00:07:53,350
that title, the middle here and that happens because I used a row here and by default, trailing has no

86
00:07:53,350 --> 00:08:01,070
boundaries in how big it may be and therefore row is pretty large. That's fairly easy to fix though, on

87
00:08:01,070 --> 00:08:06,860
the row here in our trailing part of the CupertinoNavigationBar, there's one extra property you can

88
00:08:06,860 --> 00:08:11,330
set on row and column which I haven't shown you before but which is really useful now

89
00:08:11,330 --> 00:08:18,740
and that's the MainAxisSize. By default, it takes all the width it can get as a row and column takes

90
00:08:18,740 --> 00:08:23,430
all the height it can get. You can restrict this and set it to MainAxisSize.min.

91
00:08:23,430 --> 00:08:28,780
So MainAxisSize here really is just an enum with a max and a min value,

92
00:08:28,780 --> 00:08:34,210
the default is max but if you set it to min, the row will shrink along its main axis,

93
00:08:34,220 --> 00:08:39,650
so from left to right, to be only as big as its children need to be and therefore now, we have the plus

94
00:08:39,680 --> 00:08:42,060
icon and our text here

95
00:08:42,110 --> 00:08:48,470
and as you can tell of course, this is now the default iOS look and it's not that purple appBar we would

96
00:08:48,470 --> 00:08:49,530
normally have.

97
00:08:49,790 --> 00:08:56,060
Now as you also can tell however is that now, that's not really looking that good, the chart is now below

98
00:08:56,360 --> 00:08:57,640
our navigation bar.

99
00:08:57,670 --> 00:09:03,290
So somehow, this calculation of the navigation bar height is not working out correctly.
