WEBVTT
1
00:00:02.290 --> 00:00:09.490
In the last lecture, I introduced futures and asynchronous code and I want to make really sure that

2
00:00:09.490 --> 00:00:16.720
we all are on the same page regarding what this means and what async code really is. Asynchronous code

3
00:00:16.720 --> 00:00:24.640
is code that runs and might take a bit longer and that shouldn't stop other code from continuing,

4
00:00:24.640 --> 00:00:33.320
so the result of such asynchronous code will be available sometime in the future but not immediately and

5
00:00:33.360 --> 00:00:34.690
here's an example.

6
00:00:35.050 --> 00:00:42.010
If I have a variable, result and that's 1 + 1, then the result of this calculation of 1 + 1

7
00:00:42.010 --> 00:00:46.960
is immediately available, when Dart parses this line,

8
00:00:46.960 --> 00:00:51.130
it doesn't need to wait for this, it's immediately available.

9
00:00:51.130 --> 00:00:56.560
Of course it needs to calculate this and all these calculations take some time but we're in the sub

10
00:00:56.620 --> 00:01:01.360
millisecond area there and therefore, this is available immediately.

11
00:01:01.450 --> 00:01:07.930
There are other operations, for example sending HTTP requests, which take a bit longer though. You

12
00:01:07.930 --> 00:01:14.100
don't know how long, they take they might still be very fast but they might also take way longer and

13
00:01:14.100 --> 00:01:19.300
therefore it would be bad if we wait for such a HTTP request result because the other

14
00:01:19.300 --> 00:01:24.370
code would not continue executing in the meantime and your application would basically be frozen.

15
00:01:24.940 --> 00:01:33.670
So instead for such operations, what Dart and many other programming languages as well do is they register

16
00:01:33.910 --> 00:01:41.380
some function that you want to execute in the future once the response is there and then they continue

17
00:01:41.620 --> 00:01:46.230
and they just keep that to be done, to be executed function in mind 

18
00:01:46.480 --> 00:01:52.050
and once your async operation finished, once that HTTP response is there for example,

19
00:01:52.240 --> 00:01:59.260
they remembered that they had this function saved and they are then executed for you and Flutter handles

20
00:01:59.290 --> 00:02:02.580
all of this with a class that's baked into Flutter,

21
00:02:02.710 --> 00:02:08.710
the future class which has a fitting name if you consider that it's about handling results in the future.

22
00:02:09.900 --> 00:02:17.730
You can also create your own futures, future has a constructor and to this constructor, you can pass a function

23
00:02:18.270 --> 00:02:22.330
where you for example return hello.

24
00:02:22.360 --> 00:02:28.150
Now let's store this in a my future variable and now this creates your own future and this is not the

25
00:02:28.150 --> 00:02:34.120
function that will be executed in the future but instead, this will be executed right away by Dart when

26
00:02:34.120 --> 00:02:36.650
it encounters this future that you create a future,

27
00:02:36.670 --> 00:02:41.400
this is what it executes right away. In here, you could write your own code that takes a bit longer,

28
00:02:41.400 --> 00:02:47.860
for example because you setting up a timer or you're writing your own HTTP library where you do all the

29
00:02:47.860 --> 00:02:54.340
low level things of composing the request and sending it over the wire and passing incoming response

30
00:02:54.340 --> 00:02:58.210
bytes, that's in the end what packages do for you behind the scenes,

31
00:02:58.270 --> 00:03:00.430
you rarely create your own futures.

32
00:03:00.430 --> 00:03:05.490
Here we are doing it though, so this is now executed immediately by Flutter, of course this is no code 

33
00:03:05.500 --> 00:03:11.050
that will take longer but still Flutter will go ahead with other code first and only once the other code, the

34
00:03:11.050 --> 00:03:12.890
synchronous code has all been parsed,

35
00:03:13.060 --> 00:03:17.710
it will basically check if that is done and of course, that will be done by then because it will also

36
00:03:17.710 --> 00:03:25.180
finish immediately and then we can use my future then to register a function that should be executed

37
00:03:25.180 --> 00:03:27.070
when this future is done.

38
00:03:27.070 --> 00:03:33.340
Now again, this will be done immediately but Flutter does not stop all other code execution just because

39
00:03:33.370 --> 00:03:34.330
this is done,

40
00:03:34.330 --> 00:03:40.180
instead it will finish the current code execution goal and finish all the other synchronous code first

41
00:03:40.510 --> 00:03:44.920
and then check if the future is done and yes, it will be done and then it will call the function you

42
00:03:44.920 --> 00:03:46.300
pass to then.

43
00:03:46.390 --> 00:03:50.860
So here, you might get your result and in our case, that will be a string

44
00:03:50.860 --> 00:03:58.730
and here we can then print result. If we now hit run here, we see Hello.

45
00:03:58.820 --> 00:04:07.960
Now the interesting thing is that if I add this runs first here and I add another statement here,

46
00:04:08.110 --> 00:04:14.610
this also runs before the future is done,

47
00:04:15.350 --> 00:04:22.770
if we add all of that and I hit run, then we see that these two statements indeed run before we see

48
00:04:22.770 --> 00:04:23.620
Hello.

49
00:04:23.640 --> 00:04:27.030
Now that's really important to understand what I just explained.

50
00:04:27.030 --> 00:04:32.610
We create our own future here, this here, this function is executed right away by Dart, not in the future

51
00:04:32.640 --> 00:04:34.820
but right away when it finds this line

52
00:04:34.980 --> 00:04:39.720
but Dart expects that this function does something which takes a bit longer.

53
00:04:39.900 --> 00:04:46.180
So of course, it will also execute this code but it will, simultaneously so to say, continue with the other

54
00:04:46.190 --> 00:04:47.120
code.

55
00:04:47.160 --> 00:04:52.860
Now of course, this is done immediately but Dart doesn't care, it continues with the other code. Here,

56
00:04:52.920 --> 00:04:57.900
it sees that you're using the future and you're setting up a function that should be executed once that

57
00:04:57.900 --> 00:04:59.790
code in the future is done.

58
00:04:59.790 --> 00:05:05.160
Now Dart doesn't care that this is already done, it still continues with all the other code and only

59
00:05:05.160 --> 00:05:10.210
once it's done with all the other synchronous code, it goes back to the future and checks

60
00:05:10.230 --> 00:05:11.350
is this done

61
00:05:11.430 --> 00:05:14.220
and yes it's done, so then it executes this function,

62
00:05:14.280 --> 00:05:16.050
that is how you can think about that.

63
00:05:16.110 --> 00:05:20.730
Of course technically behind the scenes, it's a bit more complex but in the end, that is how you can think

64
00:05:20.730 --> 00:05:21.680
about this.

65
00:05:21.840 --> 00:05:25.030
Now as I said, you rarely create your own futures like this,

66
00:05:25.060 --> 00:05:30.870
often you have some packages like the HTTP package which have some methods that just return futures.

67
00:05:31.230 --> 00:05:35.160
So in this case, you wouldn't see that part where the future gets created,

68
00:05:35.220 --> 00:05:41.490
you would right away be at that part where you use then to register the function that should execute

69
00:05:41.660 --> 00:05:43.590
once this future is done.

70
00:05:43.650 --> 00:05:49.560
So that's the more common scenario of how you work with futures, you get finished futures and you just

71
00:05:50.090 --> 00:05:54.870
start at this step here where you register a function that should be executed when the future is

72
00:05:54.870 --> 00:05:55.590
done.

73
00:05:55.590 --> 00:05:59.680
Now this function here as you see gets a result, the result of the future,

74
00:05:59.730 --> 00:06:02.290
even if the future doesn't return anything.

75
00:06:02.370 --> 00:06:06.170
So even if you have a future like this, you still would get an error

76
00:06:06.180 --> 00:06:11.760
if you don't register a result or expect a result, so you should always expect the result here

77
00:06:11.790 --> 00:06:17.190
even if you know that your future won't return one, then you just don't have one

78
00:06:17.190 --> 00:06:24.810
but still, you need to accept one here and in addition, it's also worth noting that then also always returns

79
00:06:24.810 --> 00:06:31.320
a new future. So you could add another then call after this and this then block is effectively called

80
00:06:31.380 --> 00:06:38.400
on the result of this then block which is a future, so then always returns a new future which will be

81
00:06:38.400 --> 00:06:42.700
done as soon as your code in the first then block is done.

82
00:06:42.720 --> 00:06:47.460
So here, we would have another round of code execution.

83
00:06:47.460 --> 00:06:55.480
So here we can simply execute another function after first then, which executes 

84
00:06:55.860 --> 00:07:05.340
after the first then block is done. So we could add this code snippet here and run this and now we see

85
00:07:05.340 --> 00:07:06.080
dot dot dot,

86
00:07:06.080 --> 00:07:09.700
that's the output of the first then block and then after first

87
00:07:09.710 --> 00:07:12.630
then here and you can add many then blocks as you want,

88
00:07:12.630 --> 00:07:15.560
you always get a new future returned automatically.

89
00:07:15.600 --> 00:07:19.410
Now of course, you don't have to add one if you got no other code to run,

90
00:07:19.440 --> 00:07:25.380
you can just ignore that future but there always is the opportunity for you to chain more then blocks

91
00:07:25.380 --> 00:07:26.360
after each other,

92
00:07:26.370 --> 00:07:32.280
so this concept is called chaining, that you call a method on the result of a previous method all in one

93
00:07:32.280 --> 00:07:33.110
line

94
00:07:33.480 --> 00:07:39.510
and that is simply a powerful feature which would allow you to do multiple different steps which possibly

95
00:07:39.510 --> 00:07:44.640
all take a bit longer and then always use the result of the prior step in your next step.

96
00:07:45.920 --> 00:07:53.470
Futures can also fail and we can also write this in a more readable way by the way to make it clear

97
00:07:53.560 --> 00:07:59.360
that this belongs together but runs after each other. Now futures can by the way also return errors

98
00:07:59.390 --> 00:08:02.790
and you can handle those with catch error.

99
00:08:02.870 --> 00:08:08.500
Now you'll see that throughout the course, here you get the error that was thrown in the end and then here,

100
00:08:08.500 --> 00:08:14.210
you can do whatever you need to do to handle that error, send it to your own analytics server, show

101
00:08:14.450 --> 00:08:20.570
an error message to the user, whatever you need to do. It is worth pointing out that catch error also

102
00:08:20.570 --> 00:08:27.770
returns a future, so you can call then after a catch error and then this then block here will execute

103
00:08:28.010 --> 00:08:36.230
if we had this error here. Catch error will catch any errors thrown by the future or by any then block

104
00:08:36.260 --> 00:08:43.650
in front of catch error, it will not catch errors thrown in then blocks after catch error and these are

105
00:08:43.650 --> 00:08:46.100
the basics about futures and async code.

106
00:08:46.260 --> 00:08:50.570
It's an important concept which you'll find in all major programming languages,

107
00:08:50.730 --> 00:08:56.550
it's not always called future, in JavaScript for example it's called promise but the idea always is the

108
00:08:56.550 --> 00:08:59.520
same. You have some code that might take longer,

109
00:08:59.520 --> 00:09:06.510
so to not block execution, the programming language continues with the other code and your code that

110
00:09:06.510 --> 00:09:12.200
depends on that longer taking operation is registered and executed once that operation is done.

111
00:09:12.270 --> 00:09:14.970
Now we'll work a lot with futures throughout the course,

112
00:09:15.030 --> 00:09:20.310
you'll also learn about a different syntax, then using all these then statements and therefore this will

113
00:09:20.310 --> 00:09:22.610
become clearer and clearer over the course

114
00:09:22.620 --> 00:09:25.340
but I hope the fundamentals are clear right now.
