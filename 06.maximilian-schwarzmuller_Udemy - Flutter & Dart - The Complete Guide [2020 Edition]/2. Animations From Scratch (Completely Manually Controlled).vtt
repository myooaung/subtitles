WEBVTT
1
00:00:02.540 --> 00:00:05.030
This is the app we worked on thus far,

2
00:00:05.060 --> 00:00:10.750
this shop app and attached you find this snapshot which includes authentication

3
00:00:10.790 --> 00:00:17.050
in case you didn't follow the previous modules or you don't want to follow them, just be aware that for

4
00:00:17.050 --> 00:00:24.890
this to work, you of course need a Firebase back-end and in your files, you need to adjust my Firebase

5
00:00:24.950 --> 00:00:30.820
URLs with your Firebase URLs in your Firebase API keys for example,

6
00:00:30.830 --> 00:00:37.370
so you'll have to make these adjustments in all these provider files here, make sure to set up your Firebase

7
00:00:37.370 --> 00:00:44.270
project and use your URLs if you're taking my attached snapshot. And with that, what could we

8
00:00:44.360 --> 00:00:45.740
animate here?

9
00:00:45.740 --> 00:00:51.620
Well I'd say we started to right here on the auth screen. When I switch to sign up mode and back to

10
00:00:51.620 --> 00:00:52.350
login,

11
00:00:52.430 --> 00:00:54.440
we have this jump here right,

12
00:00:54.440 --> 00:00:58.030
we simply increase the box height and then we shrink it again

13
00:00:58.160 --> 00:01:04.460
and whilst this of course does work and certainly it's obvious to the user what's changed,

14
00:01:04.460 --> 00:01:11.330
we might still want to improve that a little bit, for example by gradually animating this container and

15
00:01:11.330 --> 00:01:15.370
sliding and fading the confirm password field in for example

16
00:01:15.470 --> 00:01:20.480
and that's of course just one idea of how you could animate this but it's exactly what I want to build

17
00:01:20.490 --> 00:01:24.560
together with you here to give you an idea for how this could work.

18
00:01:24.560 --> 00:01:28.790
For that, let's go to the screens and there to the auth screen of course because that is the screen where

19
00:01:28.790 --> 00:01:33.770
I want to add animations and in there, we have a stateful widget.

20
00:01:33.920 --> 00:01:38.900
We have our auth screen which is a stateless widget but then we have the auth card and that's a stateful

21
00:01:38.900 --> 00:01:43.840
widget and that's this white box in the middle here which is the thing I want to animate.

22
00:01:43.880 --> 00:01:51.830
Now it's good that this is a stateful widget because for full control or for this approach of controlling

23
00:01:51.830 --> 00:01:58.040
an animation from scratch, you need a stateful widget because the way animations work in Flutter is

24
00:01:58.040 --> 00:02:06.860
basically that Flutter updates the screen 60 times per second, so every 16 milliseconds basically and

25
00:02:07.010 --> 00:02:12.870
animations work such that we continuously change something in our state, change some value and change

26
00:02:12.870 --> 00:02:18.410
that with every frame update, so every 16 milliseconds, so that we can then change something in the screen

27
00:02:18.560 --> 00:02:19.950
every 60 milliseconds,

28
00:02:19.970 --> 00:02:26.660
for example the height of the container and because we change it so often, to the human eye it looks

29
00:02:26.660 --> 00:02:32.930
like a smooth animation, a smooth transition even though we technically just changed the height of the

30
00:02:33.050 --> 00:02:36.950
container here as I just said every 60 milliseconds.

31
00:02:36.950 --> 00:02:42.710
Now of course, a basic way of building an animation therefore would be in our state object here, in our state

32
00:02:42.710 --> 00:02:49.970
class to have some property which could be our container height let's say, which initially is

33
00:02:50.140 --> 00:02:51.040
a base height,

34
00:02:51.080 --> 00:02:52.690
let's have a look at the height

35
00:02:52.700 --> 00:03:02.210
I set up down there, 260, so that could be our base height which we set up here and now we need some

36
00:03:02.210 --> 00:03:03.530
timer,

37
00:03:03.560 --> 00:03:10.820
basically an interval which fires every 60 milliseconds and then we add something to that height so

38
00:03:10.820 --> 00:03:17.580
that we reach 320 which is our end height by the end of 60 times 60 milliseconds,

39
00:03:17.600 --> 00:03:20.770
so by the end of one second. And we could do that,

40
00:03:20.780 --> 00:03:27.860
we could manage this manually, like this but of course Flutter thankfully has better tools for helping

41
00:03:27.860 --> 00:03:29.780
us with that.

42
00:03:29.810 --> 00:03:36.350
So when you build a fully controlled, so controlled by you, animation with Flutter, you typically start

43
00:03:36.380 --> 00:03:43.940
by setting up an animation controller and I'll store it here in a controller, _controller variable

44
00:03:44.240 --> 00:03:49.700
and please note this is a variable, I just use the type instead of the var keyword because I'm not initializing

45
00:03:49.700 --> 00:03:55.820
this with a value and hence the type would otherwise be unknown to Dart and animation controller of course

46
00:03:55.820 --> 00:04:01.250
is a class provided by Flutter that helps us with controlling animations as the name suggests.

47
00:04:02.150 --> 00:04:11.030
Now the controller is one thing, we also need to set up an animation object and since I plan on animating

48
00:04:11.030 --> 00:04:17.750
the hight or in other words, the size of a container, animation is a generic type where we have to tell

49
00:04:17.840 --> 00:04:20.660
Dart or Flutter what we want to animate,

50
00:04:20.660 --> 00:04:26.840
so here I want to animate the size and size is another class just like animation provided by Flutter,

51
00:04:26.960 --> 00:04:33.740
so by material.dart file which I'm importing at the top and I'll name this height animation, the name

52
00:04:33.740 --> 00:04:35.240
of course is totally up to you.

53
00:04:35.240 --> 00:04:42.260
So now we got a controller which we can later use to start or revert the animation and then we got the

54
00:04:42.260 --> 00:04:48.540
animation itself which will in the end do all the heavy lifting of changing a value over time.

55
00:04:48.560 --> 00:04:52.710
Now both should be configured when this state object is created,

56
00:04:52.710 --> 00:05:00.670
so I'll add initState here and in initState, I want to set up my controller and I want to setup the

57
00:05:00.670 --> 00:05:04.910
height animation. So let's first of all assign a value to the controller

58
00:05:04.990 --> 00:05:11.350
and here we instantiate a new animation controller, using that animation controller class and the animation

59
00:05:11.350 --> 00:05:14.570
controller now should get at least two values here.

60
00:05:14.650 --> 00:05:18.780
The first one is the vsync value, now vsync

61
00:05:18.790 --> 00:05:26.590
in a nutshell basically is an argument where we give the animation controller a pointer at the

62
00:05:26.680 --> 00:05:29.770
object, the widget in the end which it should watch

63
00:05:29.860 --> 00:05:34.110
and only when that widget is really visible on the screen, the animation should play,

64
00:05:34.120 --> 00:05:40.610
so this optimizes performance because it ensures that we really only animate what's visible to the user.

65
00:05:40.810 --> 00:05:46.900
So I want to point at these widgets or at this state object which belongs to a widget of course which has

66
00:05:46.900 --> 00:05:48.130
a build method

67
00:05:48.130 --> 00:05:54.100
and for this to work, I just need to add a mixin here, so we add the width keyword after extending the

68
00:05:54.100 --> 00:06:01.620
state and what I import here is the SingleTickerProviderStateMixin. Complicated name,

69
00:06:01.750 --> 00:06:08.900
in the end provided by material.dart from the Flutter package and what this does in the end is it simply

70
00:06:08.990 --> 00:06:12.320
adds a couple of methods and properties here

71
00:06:12.320 --> 00:06:17.510
and what this does if we have a look at it, it simply adds a method here, a couple of methods actually

72
00:06:18.050 --> 00:06:25.280
to this class here, to this state class which is then implicitly used by vsync or by the animation

73
00:06:25.280 --> 00:06:29.080
controller to find out whether it's currently visible and so on.

74
00:06:29.210 --> 00:06:35.540
So we add this, the other thing I add here or the other thing I want to configure on the controller is

75
00:06:35.540 --> 00:06:42.500
the duration of the animation and you could also specify a separate reverse duration in case you want

76
00:06:42.500 --> 00:06:48.200
to have different durations for playing the animation forward and backward. If you don't specify different

77
00:06:48.200 --> 00:06:52.650
durations, the duration here will be used for both directions.

78
00:06:52.670 --> 00:06:57.710
Now here, you simply create a duration object with the duration class and you can set this to whatever

79
00:06:57.710 --> 00:06:58.320
you want,

80
00:06:58.340 --> 00:07:04.940
I'll set it to 300 milliseconds, which is a typical duration for animations. You don't want to

81
00:07:04.940 --> 00:07:06.530
make this too long of course,

82
00:07:06.530 --> 00:07:09.250
users shouldn't wait for that to finish,

83
00:07:09.290 --> 00:07:15.070
it just should be just long enough to show the user what happened without blocking user input.

84
00:07:15.320 --> 00:07:16.500
So that's the controller,

85
00:07:16.520 --> 00:07:23.190
now for the animation itself, for the height animation. The height animation here is set up with another

86
00:07:23.280 --> 00:07:27.400
class provided by Flutter, the tween class. The tween class

87
00:07:27.410 --> 00:07:33.520
when you instantiate it gives you an object which in the end knows how to animate between two values,

88
00:07:33.530 --> 00:07:39.530
so tween because of between. Tween is a generic class because there are different things you can animate

89
00:07:39.560 --> 00:07:39.980
between,

90
00:07:40.010 --> 00:07:45.740
for example, you could offset a container or anything like that to have it slide in, here

91
00:07:45.740 --> 00:07:51.860
I want to animate the size and now tween, the constructor here, has two arguments which you should provide,

92
00:07:51.980 --> 00:08:00.770
the begin and the end named argument. For begin, you define a size and size here has two arguments,

93
00:08:00.770 --> 00:08:02.030
width and height.

94
00:08:02.090 --> 00:08:07.400
I don't want to animate the width, so I'll set this to double infinity for beginning and for ending but

95
00:08:07.400 --> 00:08:11.190
for the height here, I want to start at 260

96
00:08:11.540 --> 00:08:17.840
and then for end, I want to set up a size where I also don't change the width, so the width still is double

97
00:08:17.840 --> 00:08:18.340
infinity

98
00:08:18.350 --> 00:08:26.540
but then we have 320 as the ending height and these are the heights I'm assigning to my container

99
00:08:26.900 --> 00:08:28.250
down there.

100
00:08:28.370 --> 00:08:32.090
Here when we're in sign up mode, I set this to 320,

101
00:08:32.420 --> 00:08:35.550
otherwise it has a height of 260,

102
00:08:35.780 --> 00:08:39.470
so that is just what I control up there. Now

103
00:08:39.500 --> 00:08:45.410
tween itself doesn't give us an animation though, it just has information on how to animate between two

104
00:08:45.410 --> 00:08:48.590
values, to create an animated object based on this,

105
00:08:48.590 --> 00:08:57.760
you have to call animate and now pass in an animation object which will basically wrap itself around

106
00:08:57.760 --> 00:09:03.530
this information on what to animate and the animation object describes how to animate it.

107
00:09:03.730 --> 00:09:09.700
Here you typically use a curved animation by simply creating it here with the curved animation constructor

108
00:09:10.060 --> 00:09:12.680
and curved animation now also needs to be configured.

109
00:09:12.700 --> 00:09:17.800
You need to inform this curved animation what its parent is and that simply is the controller by which

110
00:09:17.800 --> 00:09:18.910
it should be controlled,

111
00:09:18.940 --> 00:09:23.960
so you point at _controller and then we have the duration, we have the

112
00:09:24.730 --> 00:09:31.000
what, so what's to animate, the missing thing is to curve here for curved animation, that simply defines

113
00:09:31.480 --> 00:09:36.460
how the duration time here is basically split.

114
00:09:36.610 --> 00:09:41.000
The default here of course would be Curves.linear, curves

115
00:09:41.020 --> 00:09:47.020
simply is a helper class with a couple of static properties and linear means that it simply moves between

116
00:09:47.020 --> 00:09:50.380
the begin and end value here in the same speed

117
00:09:50.380 --> 00:09:55.840
but you can also for example set this to easeIn or fastOutSlowIn

118
00:09:55.840 --> 00:10:02.260
which means it starts slow and ends fast and typically, you want to experiment with these different values

119
00:10:02.260 --> 00:10:06.270
to find an animation between these start and end values

120
00:10:06.310 --> 00:10:07.970
that looks good.

121
00:10:08.050 --> 00:10:11.680
So now with that, we got the animation setup in the controller,

122
00:10:11.680 --> 00:10:16.600
now we just need to connect that to our widget down there.

123
00:10:16.630 --> 00:10:22.840
We do connect this here to this container by no longer having our if condition here, so I'll copy that so

124
00:10:22.840 --> 00:10:26.470
that we still can see the old mode here or the old code, instead 

125
00:10:26.560 --> 00:10:36.500
here, we assign this to heightAnimation.value and there, .height of course and this will change

126
00:10:36.500 --> 00:10:38.830
over time as soon as we start the animation.

127
00:10:38.930 --> 00:10:42.370
The same here for the box constrains where I set a minimum height,

128
00:10:42.410 --> 00:10:45.290
we also change this to our height here,

129
00:10:45.320 --> 00:10:48.930
so that the minimum height changes dynamically and the difference to

130
00:10:48.930 --> 00:10:54.350
the old code is that we don't suddenly change from 260 to 320,

131
00:10:54.470 --> 00:10:56.780
instead we smoothly animate there

132
00:10:56.990 --> 00:11:03.860
but of course we now need to kick off this animation and we do that in switchAuthMode. Instead of just

133
00:11:03.860 --> 00:11:05.390
switching the auth mode here,

134
00:11:05.420 --> 00:11:12.470
we want to make sure that when we do go to the sign up mode, we increase the height and therefore we

135
00:11:12.470 --> 00:11:18.410
should use our controller here and call forward, forward starts

136
00:11:18.410 --> 00:11:24.100
the animation. Now and once you're done, you want out play that back,

137
00:11:24.220 --> 00:11:27.190
so here you simply call controller

138
00:11:30.740 --> 00:11:36.920
reverse, so when you're going back to login mode, you want to reverse the animation to shrink the container

139
00:11:36.920 --> 00:11:38.020
again.

140
00:11:38.030 --> 00:11:40.760
Now with that added, we're almost there,

141
00:11:40.760 --> 00:11:43.030
there's still one more thing missing,

142
00:11:43.040 --> 00:11:48.230
we also have to go to the place where we define the height animation, so in the initState and

143
00:11:48.230 --> 00:11:52.910
there, we also now need to add a listener to call set state

144
00:11:52.910 --> 00:11:57.830
whenever this updates and it should update whenever it redraws the screen.

145
00:11:57.830 --> 00:12:03.650
So here in the end, we just have an anonymous function in which we call set state and to set state, we

146
00:12:03.650 --> 00:12:07.520
can pass an empty update function because there isn't really something I want to update,

147
00:12:07.520 --> 00:12:11.560
I just want to rerun the build method to redraw the screen

148
00:12:11.960 --> 00:12:19.340
and with that, that here should be milliseconds otherwise we'll not really see an animation, that

149
00:12:19.340 --> 00:12:20.360
would be far too short,

150
00:12:20.360 --> 00:12:22.640
so milliseconds, not microseconds

151
00:12:22.640 --> 00:12:28.700
and with that if I now do a full refresh, you'll see this is now getting animated, you see the container

152
00:12:28.700 --> 00:12:30.290
now is animated.

153
00:12:30.290 --> 00:12:34.180
Now of course, it's pretty cumbersome if we always have to add our own listener here

154
00:12:34.190 --> 00:12:36.650
and by the way we should not just set up a listener here,

155
00:12:36.710 --> 00:12:41.590
we should also dispose of it when the widget is removed,

156
00:12:41.630 --> 00:12:42.970
when the state is removed.

157
00:12:42.980 --> 00:12:49.240
So we should add dispose here and inside of dispose, we should also call controller dispose

158
00:12:49.520 --> 00:12:52.760
to make sure that we clean the listener and so on.

159
00:12:52.790 --> 00:12:56.130
Now with that, we could control the height here and we would animate it

160
00:12:56.150 --> 00:13:00.920
but of course is pretty cumbersome to manually set up a listener, assign a height down there and

161
00:13:00.920 --> 00:13:05.630
so on and thankfully, Flutter has built-in widgets that make it easier for us.

162
00:13:05.630 --> 00:13:09.800
It is important however to understand what happens behind the scenes and that you have a controller

163
00:13:10.090 --> 00:13:17.180
and an animation play together, controller simply controls, starts, configures and so on the animation, animation

164
00:13:17.210 --> 00:13:22.880
then decides how to animate between which values and then you use the animation simply wherever you

165
00:13:22.880 --> 00:13:28.070
want to use that dynamically changed value which changes very often per second

166
00:13:28.070 --> 00:13:29.420
somewhere in your widget tree.

167
00:13:29.420 --> 00:13:35.540
Now of course keep in mind the build reruns for every frame therefore, so every 16 milliseconds, build

168
00:13:35.540 --> 00:13:38.840
reruns and things did change on the UI.

169
00:13:38.840 --> 00:13:45.830
So you want to make sure that you really only rebuild the things that do need updating and you want

170
00:13:45.830 --> 00:13:51.220
to make sure that you update as efficiently as possible.

171
00:13:51.260 --> 00:13:55.850
So let's have a look at that and therefore at the first built-in widget which helps us with animations

172
00:13:56.030 --> 00:14:00.960
before we then progress further into building widgets and how we can animate other things as well.
