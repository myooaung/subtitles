1
00:00:02,300 --> 00:00:05,680
With that deep dive at how Flutter manages all of that,

2
00:00:05,840 --> 00:00:09,470
let's see which build methods actually get called for

3
00:00:09,500 --> 00:00:19,250
which actions. For that, let's go to the main.dart file and there in the build method of the 

4
00:00:19,260 --> 00:00:29,340
MyHomePageState class, I'll add a print statement where I simply print build MyHomePageState, so that we can

5
00:00:29,340 --> 00:00:35,260
see in the log when this method executed. I'll do the same in the transaction list widget, in the transaction

6
00:00:35,260 --> 00:00:42,990
list.dart file, there in the build method, I'll also run build for transaction list.

7
00:00:46,570 --> 00:00:57,570
The same for the chart here, there in the build method, I'll print build chart and for the chart bar,

8
00:00:57,810 --> 00:01:05,040
there in the build method, I also want a print chart bar. You could also add to the adaptive_flat_button

9
00:01:05,040 --> 00:01:08,460
if you wanted to but I'll print it for these widgets.

10
00:01:08,670 --> 00:01:13,920
Now with that, if you have an emulator up and running and connected, do a full restart here with that

11
00:01:13,920 --> 00:01:20,370
green arrow in the top right corner here and let's see where build now gets called in our app. Before

12
00:01:20,370 --> 00:01:26,400
we touch anything, let's already go back here to the debug console and what we see here is that build

13
00:01:26,400 --> 00:01:33,030
gets called in MyHomePageState, then it gets called in chart, then in the chart bar and then actually

14
00:01:33,030 --> 00:01:36,390
this means that it is called five times more in the chart bar,

15
00:01:36,390 --> 00:01:39,480
so we would have the same output as we have here five times more

16
00:01:39,480 --> 00:01:43,650
which is why the the debug console kind of wraps this together it into one log.

17
00:01:43,770 --> 00:01:50,430
But we would have five times and overall with this log here, six times chart bar being logged and then

18
00:01:50,430 --> 00:01:57,570
the transaction list build method runs. Now let's refine this actually a bit by going to the chart widget

19
00:01:57,570 --> 00:02:00,420
here and there for the constructor,

20
00:02:00,420 --> 00:02:03,710
I'll remove the semicolon and actually add a constructor body,

21
00:02:03,720 --> 00:02:09,880
you can still use this shortcut with this and then the argument name which matches your property name

22
00:02:09,960 --> 00:02:18,600
but here I will now also print constructor chart, so that we also see when this constructor runs.

23
00:02:18,630 --> 00:02:22,190
I only did it here for the chart, you can of course do it for the other widgets too.

24
00:02:22,680 --> 00:02:24,150
So again, time for a restart

25
00:02:24,150 --> 00:02:30,450
and now let's see what happens in the debug console. We see MyHomePageState gets called, then the constructor

26
00:02:30,450 --> 00:02:35,760
of chart gets called, then the build method of chart and then the build methods of chart bar and transaction

27
00:02:35,760 --> 00:02:36,740
list.

28
00:02:36,750 --> 00:02:42,780
This output makes a lot of sense of course because the main.dart file is our entry point, there we run

29
00:02:42,780 --> 00:02:49,560
app with MyApp when the app launches, MyApp is a stateless widget which in the end simply instantiates

30
00:02:49,560 --> 00:02:51,890
the MyHomePage widget there,

31
00:02:51,930 --> 00:02:58,350
so MyHomePage is created here, that creates its state and when the state is created, the build method

32
00:02:58,350 --> 00:03:02,610
in the state runs and that is why we see MyHomePageState first.

33
00:03:02,610 --> 00:03:08,010
Then this build method executes and therefore, Flutter instantiate all these widgets here, all these Dart

34
00:03:08,010 --> 00:03:16,170
classes here and therefore, since we added our logs to for example the chart widgets, we see output regarding

35
00:03:16,170 --> 00:03:26,480
that. We're not in landscape mode, so hence we see here that we render a container with the chart and

36
00:03:26,480 --> 00:03:33,080
then we render our transaction list widget. So here, the chart gets created, an instance of the chart class

37
00:03:33,110 --> 00:03:37,880
which is why the constructor of chart is executed and then since this also is a widget, Flutter goes

38
00:03:37,880 --> 00:03:40,600
ahead and calls the build method in chart.

39
00:03:40,610 --> 00:03:46,430
Now inside of chart and its built method, there of course we see that all these chart bars get built

40
00:03:46,430 --> 00:03:47,340
in the end.

41
00:03:47,390 --> 00:03:52,760
Of course we have a bunch of other widgets getting built as well but we didn't add any print statements

42
00:03:52,760 --> 00:03:57,580
in there, which is why we see no output for these but the chart bar here gets created

43
00:03:57,650 --> 00:04:03,650
and of course we create this chart bar seven times, not six times as I said before,

44
00:04:03,650 --> 00:04:09,680
of course we have one plus five plus one output, so seven times chart bar here because we have chart

45
00:04:09,680 --> 00:04:15,890
bars for seven days. Now once these chart bars are created and once this part of the widget tree is done,

46
00:04:16,340 --> 00:04:19,720
Flutter actually goes back because here it isn't done,

47
00:04:19,730 --> 00:04:22,580
it now built the chart with all its child widgets.

48
00:04:22,580 --> 00:04:24,400
Now the next line is executed,

49
00:04:24,410 --> 00:04:27,090
if we're not in landscape mode, this is this line here

50
00:04:27,230 --> 00:04:32,620
and then we build the transaction list widget which is stored in a variable up here and there, we in the end

51
00:04:32,630 --> 00:04:38,630
build our transaction list widget and therefore we see build transaction list because in the transaction

52
00:04:38,630 --> 00:04:41,180
list widget, the constructor gets executed,

53
00:04:41,180 --> 00:04:45,000
we have no log for that which is why we don't see that in the log down here

54
00:04:45,050 --> 00:04:50,270
but we have a log and a build method and that is executed when a new instance of transaction list is

55
00:04:50,270 --> 00:04:50,750
created.

56
00:04:51,140 --> 00:04:53,810
So this is how build runs when the app starts,

57
00:04:53,990 --> 00:04:55,220
now let's do something.

58
00:04:55,280 --> 00:05:02,490
If I open that overlay here for example, nothing changes here, nothing rebuilds.

59
00:05:02,740 --> 00:05:08,100
Let me clear the debug log with this button, so that we can see fresh messages easily

60
00:05:08,230 --> 00:05:15,160
and now let me tap into title here. Without typing anything, you see that now MyHomePageState actually

61
00:05:15,160 --> 00:05:21,820
was rebuilt. On first look, that could be strange because when you tap here into an input field, we certainly

62
00:05:21,820 --> 00:05:23,730
don't call set state

63
00:05:24,160 --> 00:05:30,520
but remember that earlier, I said that build is not only executed when you call set state but for example

64
00:05:30,580 --> 00:05:35,920
also when the media query or when the theme changes. Now the theme hasn't changed of course but the media

65
00:05:35,920 --> 00:05:41,110
query did, the media query also hold information about the view insets.

66
00:05:41,110 --> 00:05:44,090
That's something we take advantage of in new transaction,

67
00:05:44,090 --> 00:05:49,030
here, we're referring to the viewInset status stored in a media query to find out how much space is

68
00:05:49,060 --> 00:05:54,970
occupied by the soft keyboard so that we can actually move our content up by that space.

69
00:05:54,970 --> 00:06:00,400
So since this is part of the media query, the media query object changes and this is a special kind of

70
00:06:00,400 --> 00:06:06,370
widget to which I'll come back which automatically triggers rebuilds of all the widgets that refer to

71
00:06:06,370 --> 00:06:06,940
it

72
00:06:06,940 --> 00:06:14,230
and just because that is important, it doesn't care about whether you actually are only interested in

73
00:06:14,230 --> 00:06:16,600
the view insets or in something else,

74
00:06:16,690 --> 00:06:23,050
any widget which uses media query of will rebuild no matter which data you then access from there.

75
00:06:23,050 --> 00:06:29,650
So this is why the build method of our my app or MyHomePageState component rebuilds or reruns because

76
00:06:29,660 --> 00:06:35,710
there, we are using the media query of object because we need it here for the orientation. Orientation

77
00:06:35,710 --> 00:06:36,390
hasn't changed

78
00:06:36,550 --> 00:06:41,830
but as I mentioned, whenever something in a media query changes, everything that depends on media query

79
00:06:41,920 --> 00:06:43,550
will rebuild.

80
00:06:43,630 --> 00:06:48,880
So that's why build here runs when we open the soft keyboard and then of course as you learned it, build

81
00:06:48,880 --> 00:06:55,630
runs this, code gets parsed, all these widgets are recreated, new instances are created and therefore,

82
00:06:56,050 --> 00:07:01,230
we also create a new chart, all these new chart bars and the transaction list.

83
00:07:01,330 --> 00:07:06,760
Now of course, this might sound very inefficient now. Just because media query changed, even though we're

84
00:07:06,760 --> 00:07:10,680
not using a feature of media query here that did change, 

85
00:07:10,930 --> 00:07:18,640
we rebuild this entire tree, isn't that a problem? It's not a problem because for one as you learned, rebuilding

86
00:07:18,640 --> 00:07:21,090
the widget tree is really not that bad,

87
00:07:21,100 --> 00:07:27,150
it doesn't mean that Flutter has to rebuild the entire user interface and recalculate everything there.

88
00:07:27,220 --> 00:07:33,070
So rebuilding the widget tree is way less expensive, way less problematic than rebuilding everything

89
00:07:33,400 --> 00:07:38,650
and therefore rebuilding the widget tree is a core mechanism of Flutter and really not bad.

90
00:07:38,710 --> 00:07:43,360
But of course what you can always do in your apps and what you should do especially in bigger apps is

91
00:07:43,360 --> 00:07:50,410
that you try to split your codes into widgets, such that you have certain features which cause regular

92
00:07:50,410 --> 00:07:57,100
rebuilds, like media query changes, only in some widgets and maybe not in your main widget tree like we

93
00:07:57,100 --> 00:08:03,040
have it here that holds essentially your entire app. For tiny apps like this one, where you only have

94
00:08:03,040 --> 00:08:07,470
one page so to say, only one real section right.

95
00:08:07,480 --> 00:08:09,690
We only have that personal expenses tracker,

96
00:08:09,700 --> 00:08:12,250
we have no user profile or anything like that.

97
00:08:12,310 --> 00:08:18,130
So for apps that only happen on one screen, it's not that uncommon that your main widget tree changes

98
00:08:18,130 --> 00:08:18,880
a lot

99
00:08:19,030 --> 00:08:24,040
but if you have bigger apps, you might consider splitting your app efficiently so that the parts that

100
00:08:24,040 --> 00:08:30,670
do change often are confined or contained in their own widgets, so that they don't spill over into other

101
00:08:30,670 --> 00:08:36,580
widgets because for example if something would change only in the chart widget, only the build method

102
00:08:36,580 --> 00:08:41,260
there would be called and therefore all these widgets would be recreated and the chart bar would be

103
00:08:41,270 --> 00:08:48,400
recreated but rebuilds here in the chart would not spill over to our MyHomePage or MyHomePageState

104
00:08:48,400 --> 00:08:54,760
class here. This build method here would not be called if a child widget of it, like the child

105
00:08:54,770 --> 00:08:56,280
widget rebuilds.

106
00:08:56,320 --> 00:09:01,960
Now that's just something important, so splitting your apps efficiently is a good idea but always keep in

107
00:09:01,960 --> 00:09:09,820
mind that build calls, the widget tree being rebuilt is generally not problematic and a core functionality

108
00:09:09,820 --> 00:09:15,280
of Flutter and Flutter manages this efficiently to not rebuild the element and the render tree all the

109
00:09:15,280 --> 00:09:15,630
time.
