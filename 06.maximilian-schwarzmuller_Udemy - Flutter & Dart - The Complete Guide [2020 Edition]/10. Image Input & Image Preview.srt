1
00:00:02,360 --> 00:00:09,200
Now for the image, of course you could think about using the device camera and I'll have a whole module

2
00:00:09,200 --> 00:00:11,880
where we dive into how to use the device camera.

3
00:00:12,020 --> 00:00:17,180
Here, I want to focus on getting user input and therefore here, I'll simply add a text field where the

4
00:00:17,180 --> 00:00:20,390
user has to enter a URL.

5
00:00:20,390 --> 00:00:24,590
Now again, we'll later learn how to use the device camera nonetheless.

6
00:00:24,590 --> 00:00:29,150
Now I think for something like the image, it would be nice if we don't just have a text input where the

7
00:00:29,150 --> 00:00:36,470
user enters a URL but if we also show a preview of the entered image so that the user can quickly check

8
00:00:36,560 --> 00:00:39,200
whether that image is correct and so on.

9
00:00:39,200 --> 00:00:46,160
So therefore now as a new input here, I'll not directly add a text form field but a row since I want

10
00:00:46,160 --> 00:00:48,240
to have two items sit next to each other

11
00:00:48,350 --> 00:00:51,010
and that's also something you can do. Inside a form,

12
00:00:51,020 --> 00:00:55,950
you're not restricted to just having text form fields and actually we already have a ListView in there,

13
00:00:56,090 --> 00:01:01,040
you can use any widget you want, form then just works together with text form fields,

14
00:01:01,070 --> 00:01:02,420
it ignores other widgets

15
00:01:02,420 --> 00:01:09,410
so to say. Therefore here, we can add a row and in that row, I want to have two things - I want to have a

16
00:01:09,410 --> 00:01:13,640
container which should in the end show a preview of the image the user chose

17
00:01:14,120 --> 00:01:21,170
and then I want to have the text form field which allows the user to enter a URL.

18
00:01:21,290 --> 00:01:22,730
Let's start with the container,

19
00:01:22,730 --> 00:01:26,400
I'll give it a width of 100 and a fixed height of 100,

20
00:01:26,420 --> 00:01:28,810
so that will be the box in which the image should be previewed

21
00:01:29,820 --> 00:01:37,050
and I'll add a margin here of EdgeInsets.only because I want to have some margin to the top of let's

22
00:01:37,050 --> 00:01:42,270
say 8 and to the right of 10 and on the right of that container will be the text input

23
00:01:42,330 --> 00:01:49,540
and on top of it will be the prior text input here. So with that distance added to the surrounding elements,

24
00:01:50,290 --> 00:01:54,970
I also want to add a little decoration here, a little border to be precise.

25
00:01:55,210 --> 00:01:59,740
You learned that you can create a decoration for a container by setting the decoration argument here

26
00:01:59,740 --> 00:02:06,790
to a box decoration object and on there, you can add a border with the border argument and then simply

27
00:02:06,790 --> 00:02:10,120
create a border on all sides with Border.all,

28
00:02:10,420 --> 00:02:16,810
give it a width of let's say 1 and a color maybe of Colors.gery to have a light grey border around

29
00:02:16,840 --> 00:02:19,990
that container and the child

30
00:02:19,990 --> 00:02:22,440
now of course should be the image.

31
00:02:22,480 --> 00:02:27,010
That's something I'll do later, for now I'll just render an empty container so I'll not render anything

32
00:02:27,280 --> 00:02:31,420
because we first of all need to work on the text form fields to have an image to show there.

33
00:02:32,080 --> 00:02:42,270
So on this text form field, the decoration now will be an input decoration where I set a label

34
00:02:42,270 --> 00:02:51,960
text of imageUrl, to make it clear what the user should enter there.

35
00:02:52,100 --> 00:02:57,560
Now besides the decoration here, I want to have a keyboard type which supports entering a URL because

36
00:02:57,560 --> 00:03:05,000
I want to have a text input type of URL which gives us a soft keyboard that is particularly well

37
00:03:05,000 --> 00:03:15,710
suited to entering URLs. I also want to assign a text input action and here, the text input action

38
00:03:15,710 --> 00:03:22,010
should be done, so it should show this done text or this checkmark which makes it clear that when you now

39
00:03:22,010 --> 00:03:27,800
hit enter, you try to submit that form. Of course you don't have to use that there but I think it makes sense

40
00:03:27,950 --> 00:03:35,550
for the last input we have. Now I won't to add a focus node here because we can't go there from the previous

41
00:03:35,640 --> 00:03:40,770
input because that was that multiline input here and therefore we're done with this but I want to

42
00:03:40,770 --> 00:03:47,430
do something different here on that text form field. Now in general, the form manages our values, we're

43
00:03:47,430 --> 00:03:52,620
not using that yet when we submit everything but in general, you can rely on that being the case and

44
00:03:52,620 --> 00:03:59,040
you don't need to add your own text editing controllers to get access to the values of your inputs, that's

45
00:03:59,040 --> 00:04:06,180
good but here for the image text form field, I actually do want to get access to the input the user entered

46
00:04:06,330 --> 00:04:11,930
before the form is submitted because I want to show a preview here in that container.

47
00:04:12,180 --> 00:04:18,720
So for that text form field down there, for the imageUrl text form field, I do want to add my own

48
00:04:18,720 --> 00:04:28,600
text editing controller, so I'll add a new property which is my imageUrlController

49
00:04:28,630 --> 00:04:35,950
where I create a new text editing controller like this and just as with the focus node, you should

50
00:04:35,950 --> 00:04:43,600
by the way also dispose of that here in your dispose method, so of the imageUrlController.

51
00:04:43,600 --> 00:04:49,870
So the imageUrlController is now something I can assign here to the controller key on the text

52
00:04:49,870 --> 00:04:52,550
form field, like this.

53
00:04:52,690 --> 00:04:56,690
Again, you don't have to do that if you just want to get the value when the form is submitted

54
00:04:56,710 --> 00:05:02,150
but here I want to have it before the form is submitted and therefore I do need to add it here.

55
00:05:02,170 --> 00:05:09,010
Now that imageUrlController here is updated when we type into the text form field, so we can

56
00:05:09,010 --> 00:05:15,580
now use it or the value stored in it here in our container where we want to preview the image.

57
00:05:16,090 --> 00:05:22,150
Therefore here instead of showing an empty container, we can check if the imageUrlController text

58
00:05:22,210 --> 00:05:25,410
is empty which means we don't have a URL yet

59
00:05:25,630 --> 00:05:32,120
and if that's the case, we maybe show a text widget where we say enter a URL but otherwise if

60
00:05:32,120 --> 00:05:33,140
it's not empty,

61
00:05:33,530 --> 00:05:42,290
so here in the else case, I want to render a fitted box here which contains my image as a child

62
00:05:42,300 --> 00:05:47,630
and here I'll create an image widget with image network because I expect an imageUrl, so image

63
00:05:47,640 --> 00:05:54,030
network is the right way of creating an image and there, I then take the imageUrlController text

64
00:05:54,090 --> 00:05:56,120
which we checked that it's not empty.

65
00:05:56,280 --> 00:06:00,960
Of course it could be an invalid URL but we'll simply not render an image here,

66
00:06:00,960 --> 00:06:02,420
that's okay here.

67
00:06:02,490 --> 00:06:07,620
Of course you could add an extra check here and check whether it is a valid URL but I'll leave that

68
00:06:07,620 --> 00:06:08,290
out for now.

69
00:06:09,420 --> 00:06:14,960
I want to add my fit here on the image widget which we're creating and set this to BoxFit.cover

70
00:06:14,970 --> 00:06:19,140
now. With that if we save that

71
00:06:22,800 --> 00:06:28,200
and I go to creating a new product here, we actually don't see anything on the screen.

72
00:06:28,230 --> 00:06:34,310
The reason for that is that we have an error and if we scroll to the top of that error,

73
00:06:37,170 --> 00:06:43,130
we learned that an input decorator which is created by a text field cannot have an unbounded width.

74
00:06:43,650 --> 00:06:46,890
So we have the problem with the width of some text form field,

75
00:06:46,890 --> 00:06:52,500
obviously it has to be that field because before we added that, everything worked and indeed the problem

76
00:06:52,500 --> 00:06:57,270
here is that the text form field sits inside of a row and something you didn't know before

77
00:06:57,360 --> 00:07:02,790
because I haven't told you is that the text form field by default takes as much width as it can get

78
00:07:02,940 --> 00:07:08,760
and the problem with that is that if it's inside of a row as we have it here, a row has an unconstrained

79
00:07:08,760 --> 00:07:14,310
width. So normally, the boundaries of the device width are the boundaries of the text form field

80
00:07:14,670 --> 00:07:20,340
but the row doesn't have these boundaries, it doesn't have the device width as an internal boundary,

81
00:07:20,390 --> 00:07:26,640
therefore text form field tries to take an infinite amount of width. Solution is simple - we can wrap this

82
00:07:26,640 --> 00:07:33,890
with a new widget and there for example, we can take the expanded widget if we want to. If we now save this,

83
00:07:33,900 --> 00:07:40,200
now here we see the imageUrl and next to it, we see a box which should eventually show a preview.

84
00:07:40,250 --> 00:07:46,590
Now I also want to change how that is positioned and for that, I'll go to the row and I want to align

85
00:07:46,620 --> 00:07:51,570
items differently on the cross axis which on a row is from top to bottom,

86
00:07:51,600 --> 00:07:56,220
I want to set the cross axis alignment here to end, to move it all to the end.

87
00:07:56,220 --> 00:08:03,240
So now if you save that, the imageUrl thing here is simply pushed down to the end of that box and aligned

88
00:08:03,240 --> 00:08:07,020
with the end of our container which looks better in my opinion.

89
00:08:07,020 --> 00:08:13,660
Well and with that, let's try adding a URL now and for that, I simply grabbed some URL, you can do

90
00:08:13,660 --> 00:08:17,110
the same with the help of google image search or anything like that,

91
00:08:17,110 --> 00:08:28,230
copy that and then simply long press here to paste it and if we confirm with the checkmark, this is shown.

92
00:08:28,240 --> 00:08:30,110
So now we see our preview here,

93
00:08:30,190 --> 00:08:37,920
now important of course, this didn't update with every keystroke here but only after we submitted this

94
00:08:38,010 --> 00:08:42,120
with the checkmark which closes the keyboard, which of course is fine

95
00:08:42,120 --> 00:08:45,380
here, it gives the user time to enter the full URL.

96
00:08:45,390 --> 00:08:54,140
Now one thing you could want about that imageUrl is that you actually don't need to hit this button

97
00:08:54,140 --> 00:08:58,940
here at the bottom right to see the preview but that you also see the preview if this loses focus,

98
00:08:58,970 --> 00:09:04,760
so if you go to another input for example, I think that would be an expected behavior of this app.

99
00:09:04,760 --> 00:09:11,960
Now Flutter doesn't have a default listener for when this loses focus but you can set up your own listener

100
00:09:11,960 --> 00:09:13,740
with the help of focus node.

101
00:09:14,060 --> 00:09:21,170
So let's add a new focus node here for the image, an imageUrlFocusNode which we create here

102
00:09:21,170 --> 00:09:23,790
with the focus node class

103
00:09:24,020 --> 00:09:30,260
and of course just as before, we have to dispose of that when the state object gets destroyed,

104
00:09:30,260 --> 00:09:35,640
so here is my imageUrlFocusNode and I call dispose on it inside of the dispose method

105
00:09:35,640 --> 00:09:40,730
and now we can use that imageUrlFocusNode not to request focus for it

106
00:09:40,730 --> 00:09:46,400
once we're done with the description as mentioned before, that's not really possible but we can nonetheless

107
00:09:46,490 --> 00:09:52,850
add this focus node here to our text form field for the imageUrl because we can now set our own

108
00:09:52,850 --> 00:09:53,480
listener

109
00:09:53,870 --> 00:10:03,070
and when this loses focus, so when the user unselected it, then we can react to this

110
00:10:03,150 --> 00:10:13,130
to make sure that we updated the UI and use the imageUrlController to show a preview.

111
00:10:13,130 --> 00:10:19,890
So for that, we need to set up our own listener to the imageUrlFocusNode. It's attached to that

112
00:10:19,890 --> 00:10:24,560
text form field down there and therefore, it keeps track of whether that's focused or not,

113
00:10:24,600 --> 00:10:30,870
so we just need to listen to changes in that focus. For that, initState is a good place to set up that

114
00:10:30,870 --> 00:10:32,610
initial listener.

115
00:10:32,610 --> 00:10:35,890
So here in initState, I can set up my 

116
00:10:35,970 --> 00:10:37,140
imageUrlFocusNode

117
00:10:37,440 --> 00:10:44,100
add listener, so with the add listener we add a new listener to that focus node and we point at a function

118
00:10:44,100 --> 00:10:48,030
here that should be executed whenever the focus changes.

119
00:10:48,030 --> 00:10:53,930
For that, I'll add a new method here which doesn't return anything which I'll name 

120
00:10:53,930 --> 00:10:54,990
updateImageUrl,

121
00:10:54,990 --> 00:11:02,700
_updateImageUrl and I point at this _updateImageUrl function here with add

122
00:11:02,700 --> 00:11:08,190
listener. I don't execute it here because I don't want to execute it when this gets parsed, when this gets read,

123
00:11:08,460 --> 00:11:15,690
I just want to use the pointer at this function to tell Flutter that I want Flutter to execute this

124
00:11:15,750 --> 00:11:22,750
_updateImageUrl function whenever the focus changes here. Now important, we also have to clear that

125
00:11:22,750 --> 00:11:29,710
listener when we dispose of that state, otherwise the listener keeps on living in memory even though

126
00:11:29,710 --> 00:11:33,930
the page is not presented anymore and that again creates a memory leak.

127
00:11:34,000 --> 00:11:38,550
So in this post, to be super safe before you dispose of the imageUrlFocusNode,

128
00:11:38,550 --> 00:11:44,570
I would recommend that you call remove listener and simply also point at _updateImageUrl

129
00:11:44,680 --> 00:11:50,370
and therefore it will remove that listener that uses this function from the imageUrlFocusNode.

130
00:11:50,740 --> 00:11:54,030
Well with that, in the _updateImageUrl function,

131
00:11:54,130 --> 00:11:58,360
we simply have to check if we're not having focus anymore,

132
00:11:58,360 --> 00:12:04,390
so if the imageUrlFocusNode does not have focus and this will be fired if it had focus and we then

133
00:12:04,390 --> 00:12:10,440
click somewhere else and if we don't have focus anymore, so we lost focus, then we want to update the

134
00:12:10,440 --> 00:12:16,480
UI and use the latest state stored in the imageUrlController and for that we can simply

135
00:12:16,480 --> 00:12:22,520
call set state like this. It's a bit of a hack because we don't update the state ourselves

136
00:12:22,570 --> 00:12:26,940
but we know that the state has updated, that we have an updated value in 

137
00:12:26,950 --> 00:12:33,100
imageUrlController and we want to rebuild the screen to reflect that updated value in 

138
00:12:33,100 --> 00:12:39,310
imageUrlController since that value in imageUrlController is the image you want to preview.

139
00:12:39,430 --> 00:12:50,970
So with this change, if we go back to this page, now if I tap in there and out of there, you see no update because

140
00:12:51,300 --> 00:12:52,520
we entered nothing

141
00:12:52,680 --> 00:12:57,370
but if I now pasted my URL and I then tap into a different field, you see that preview,

142
00:12:57,370 --> 00:13:02,810
so now we get the preview when we lose focus which I think is closer to the expected behavior.

143
00:13:03,030 --> 00:13:07,580
And with that, we finish the inputs, they generally work correctly

144
00:13:07,590 --> 00:13:11,990
but of course we're not submitting them, we're not getting their data and we're not validating them.

145
00:13:12,000 --> 00:13:13,500
So these will be the next steps.
