1
00:00:02,420 --> 00:00:07,290
So let's make sure we can fetch data and for that in the db helper class,

2
00:00:07,520 --> 00:00:12,300
I'll add another static method which will return a future and

3
00:00:12,540 --> 00:00:17,430
for now, I'll say that this will resolve to void but actually later, it will return something different

4
00:00:18,170 --> 00:00:21,170
and I'll name this method get data and the name is up to you.

5
00:00:21,360 --> 00:00:23,390
Now it would be nice to get the table name here

6
00:00:23,400 --> 00:00:25,820
so that we know from which table to return data

7
00:00:25,920 --> 00:00:30,960
and now we need to get access to the database. Now for that, we can of course copy that code which gives

8
00:00:30,960 --> 00:00:34,230
us access to database but that would be a bit redundant.

9
00:00:34,380 --> 00:00:42,060
So I'll add yet another method here which returns a future which eventually yields the database, database

10
00:00:42,090 --> 00:00:51,180
is a type provided by the SQFLite package and I'll name this database and all that should happen

11
00:00:51,180 --> 00:00:58,680
in here is in the end that I want to have my code here for creating or getting access to the database

12
00:00:59,550 --> 00:01:01,080
in that database method.

13
00:01:01,080 --> 00:01:08,730
Now important is just that I don't await for this open database call to complete but I simply return

14
00:01:08,730 --> 00:01:09,200
it

15
00:01:10,320 --> 00:01:15,080
and therefore overall here, since this returns a future which yields a database and I return this future,

16
00:01:15,350 --> 00:01:18,460
here we'll yield that future thereafter.

17
00:01:18,470 --> 00:01:22,790
So here, I returned that database access and now here where I need the database,

18
00:01:22,790 --> 00:01:30,530
for example when we insert something, we can just call db helper, so the class name, .database. We have

19
00:01:30,530 --> 00:01:33,920
to repeat the class name here because this is a static method,

20
00:01:33,920 --> 00:01:39,920
so just database like this won't work because that would look for a global function outside of the class,

21
00:01:40,100 --> 00:01:46,910
not inside of the class because all these static methods are not scoped to the class since these are

22
00:01:46,910 --> 00:01:47,750
all static methods,

23
00:01:47,750 --> 00:01:52,290
so we have to repeat dbHelper.database to get access to the database.

24
00:01:52,400 --> 00:01:57,650
However, keep in mind that database here returns a future and not the database itself,

25
00:01:57,650 --> 00:02:05,810
so actually we can store that in a new constant, db, with the help of the await keyboard, we get the

26
00:02:05,810 --> 00:02:08,820
result of this database call which is the database in the end

27
00:02:08,930 --> 00:02:14,200
and then here, we can call db.insert in the next line, just like this.

28
00:02:14,670 --> 00:02:20,380
And now we can just repeat this code here in the get data method to get access to our database, turn

29
00:02:20,450 --> 00:02:23,040
this into async function for that to work

30
00:02:23,040 --> 00:02:29,880
and now here, we can run our command to retrieve data. Now for insert, that was the insert method, for getting

31
00:02:29,880 --> 00:02:30,180
data,

32
00:02:30,210 --> 00:02:35,010
that's the query method and that takes the table from which you want to fetch the data and it will then

33
00:02:35,010 --> 00:02:37,260
return all the data in the table.

34
00:02:37,260 --> 00:02:42,810
Now you also have methods for filtering data or for retrieving only some of the fields of the table

35
00:02:42,810 --> 00:02:47,640
in case you don't need all and the official docs of the SQFLite package are the place to go

36
00:02:47,820 --> 00:02:50,540
to learn more about all these different configurations,

37
00:02:50,540 --> 00:02:55,830
also about updating and deleting and all these other operations you can do with the database, here

38
00:02:55,830 --> 00:03:02,180
I'll focus on getting all the data. Now query unsurprisingly of course returns a future which in the

39
00:03:02,180 --> 00:03:08,280
end yields us a list of maps and that makes sense because we inserted a map here in the end,

40
00:03:08,300 --> 00:03:08,600
right,

41
00:03:08,600 --> 00:03:10,940
data is a map and that's what we inserted,

42
00:03:11,000 --> 00:03:15,950
so it makes sense that if we get all the data of a table, we get back multiple maps and therefore a list

43
00:03:15,950 --> 00:03:17,270
of maps.

44
00:03:17,300 --> 00:03:25,190
So here, I just want to return the result of that query as part of get data so that we can use that data

45
00:03:25,190 --> 00:03:28,630
which is returned in whichever place we call get data

46
00:03:28,790 --> 00:03:33,410
but of course therefore here, we don't return a future or we don't get back a future which returns nothing

47
00:03:33,410 --> 00:03:38,090
in the end but we get a future which returns that lists, that list of maps.

48
00:03:38,090 --> 00:03:44,210
So here, we actually return a list which itself is a generic type because it will hold multiple maps

49
00:03:44,210 --> 00:03:46,130
and that again is a generic type,

50
00:03:46,130 --> 00:03:52,990
so a lot of angled brackets here because in that map, we'll have a string key and then dynamic or object

51
00:03:53,000 --> 00:03:57,250
but I'll go with dynamic, here dynamic data types in there,

52
00:03:57,330 --> 00:04:03,530
so that's what we get back. Now we have the get data method and now we can add a new method in great places

53
00:04:03,530 --> 00:04:11,780
to leverage this method. So in there, in great places in the great places class here, I'll add a new method

54
00:04:13,280 --> 00:04:20,420
which in the end will yield a future which will return nothing though

55
00:04:20,420 --> 00:04:29,780
and I'll name this fetch and set places and it will be an async function, so let's use that correct syntax

56
00:04:29,780 --> 00:04:34,020
here and in there, I want to reach out to the db helper, get my data from there,

57
00:04:34,040 --> 00:04:41,150
initialize the data here in my items list with that data and be done with that.

58
00:04:41,150 --> 00:04:49,450
So here, I'll of course use the db helper and call get data for the places table which is the table I used

59
00:04:49,460 --> 00:04:50,970
up there for inserting data,

60
00:04:50,990 --> 00:04:58,810
so obviously you have to use the same table down there, that returns a future with that list of data

61
00:04:58,840 --> 00:04:59,820
thereafter.

62
00:04:59,830 --> 00:05:08,790
So here I'll get my data list by awaiting for that result and now we can transform that data list to

63
00:05:08,790 --> 00:05:12,020
a list that is actually a list of places because 

64
00:05:12,020 --> 00:05:12,350
that's

65
00:05:12,360 --> 00:05:13,840
what we need here.

66
00:05:13,900 --> 00:05:19,440
Now there are various ways of doing that and one way of course is that we take our data list which is

67
00:05:19,440 --> 00:05:27,150
a list, so we can call map on it to transform every element in there into a different element and call

68
00:05:27,150 --> 00:05:33,650
to list in the end to get back a list and then set items equal to that mapped list.

69
00:05:33,650 --> 00:05:35,480
So in map, we get every element,

70
00:05:35,490 --> 00:05:40,400
so here we get our item or whatever you want to call it

71
00:05:40,540 --> 00:05:44,130
and now we have to return a place object in the end.

72
00:05:44,140 --> 00:05:50,470
Now a place object of course takes a couple of pieces of information. We need to set the ID but on

73
00:05:50,470 --> 00:05:58,580
item, we of course will have an ID key because in our database, we will have an ID field. So the fields

74
00:05:58,580 --> 00:06:05,530
we configured up there will be the keys we can now access on the data we're fetching here

75
00:06:05,770 --> 00:06:07,380
and obviously therefore,

76
00:06:07,420 --> 00:06:13,930
these are also the keys which you should use for inserting, so ID, title and image here because these

77
00:06:13,930 --> 00:06:20,480
are the keys we configured here and these are the keys by which we can now retrieve our data. So the

78
00:06:20,480 --> 00:06:27,860
ID on the ID key, the title of course unsurprisingly on the title key and the image now should be

79
00:06:27,860 --> 00:06:31,250
a file and we only stored the path.

80
00:06:31,250 --> 00:06:32,890
Now we'll come back to the image in a second,

81
00:06:32,910 --> 00:06:37,510
the location will be null for now because we have no location at the moment.

82
00:06:37,610 --> 00:06:41,860
So what about the image though? What should be stored for the image now

83
00:06:41,870 --> 00:06:45,720
because I don't need the path, I need the full image instead, the file?

84
00:06:45,790 --> 00:06:50,700
Well for that, we can use the file class which is provided by dart:io.

85
00:06:50,720 --> 00:06:57,200
which we do import up there and before we only used this as a type but we can actually instantiate this

86
00:06:57,200 --> 00:06:58,850
to create a new file

87
00:06:59,030 --> 00:07:04,370
and this now simply takes path of the file which we want to create.

88
00:07:04,370 --> 00:07:09,440
So here, we just pass in item and then image and that is the path to the file,

89
00:07:09,440 --> 00:07:15,260
so this will create a new file based on that path and will actually load that file into memory so to

90
00:07:15,260 --> 00:07:20,360
say and that's all. That should give us a list of places,

91
00:07:20,370 --> 00:07:28,700
store that in items and therefore the remaining piece is that here we call notifyListeners, like this, to

92
00:07:28,710 --> 00:07:36,020
inform all places in the app that are interested in the data about the newly loaded data. Now I want

93
00:07:36,020 --> 00:07:41,950
to use the data here in the places list screen of course and for that in here,

94
00:07:41,950 --> 00:07:49,270
in the body, we can wrap the consumer with a different widget and there, I want to use the good old future

95
00:07:49,300 --> 00:07:56,950
builder because with the future builder, I can now point at a future and there, I want to use the provider

96
00:07:56,950 --> 00:08:04,480
package of great places and then pass in the context and call fetch and set places because that of course

97
00:08:04,480 --> 00:08:06,520
returns a future and it should,

98
00:08:06,550 --> 00:08:08,840
so that's the future at which I'll point. Here,

99
00:08:08,860 --> 00:08:14,710
I'll set up listen: false because I don't want to rerun the entire build method when that updates and

100
00:08:14,710 --> 00:08:17,860
that is what would happen if I use provider of like this,

101
00:08:17,860 --> 00:08:23,650
I only want to update the part of consumer and that's what the consumer will do automatically and besides

102
00:08:23,650 --> 00:08:28,900
a future, here on the future builder, I don't need to provide a child but actually a builder argument

103
00:08:29,560 --> 00:08:34,690
and there, we get a context and a snapshot of the result

104
00:08:34,690 --> 00:08:45,230
our future returns and in the end here, I will then return my consumer or actually not always the consumer,

105
00:08:45,280 --> 00:08:48,750
I want to check my snapshot and there, the connection state

106
00:08:48,970 --> 00:08:54,640
and if that is equal to ConnectionState.waiting, so if we are waiting for the resolve,

107
00:08:54,640 --> 00:09:00,580
then as before, I want to show a spinner. So I only show the consumer and the loaded data in the else

108
00:09:00,580 --> 00:09:01,070
case,

109
00:09:01,090 --> 00:09:11,540
otherwise I'll show a centered CircularProgressIndicator, like this. So we have the future builder, load

110
00:09:11,660 --> 00:09:12,420
the data here

111
00:09:12,440 --> 00:09:17,020
with that future, whilst we're waiting I load the centered progress indicator,

112
00:09:17,120 --> 00:09:23,360
if we're done waiting, I use consumer here to either show the info that I have no places or to build my

113
00:09:23,360 --> 00:09:30,570
places. With that, we should be able to load data from the database when we visit this first page.

114
00:09:30,600 --> 00:09:32,540
So now is the time to test this all

115
00:09:32,580 --> 00:09:41,610
and for that, I'll now not use my real device here anymore but instead, my Android emulator and I'll restart

116
00:09:41,610 --> 00:09:42,680
the app on that.

117
00:09:42,690 --> 00:09:49,880
So let's do a full restart there, full rebuild and then see whether that all works as it should.

118
00:09:49,890 --> 00:09:51,860
So let's go back to this application,

119
00:09:51,880 --> 00:09:54,110
got no places here initially,

120
00:09:54,270 --> 00:09:58,770
of course if I do a full refresh, we can see that loading spinner again real short

121
00:09:58,800 --> 00:10:00,410
I think, yes

122
00:10:00,510 --> 00:10:05,970
there it was, of course accessing this local database is super fast so we don't see the loading spinner

123
00:10:05,970 --> 00:10:08,040
for very long

124
00:10:08,040 --> 00:10:12,570
but we also get no error which is good because that tells us that connecting to the database worked,

125
00:10:12,570 --> 00:10:17,220
we just get a log that no places table was found and that makes sense because I named the table user

126
00:10:17,220 --> 00:10:18,270
places here,

127
00:10:18,270 --> 00:10:22,140
obviously we should also name it user places when we access it

128
00:10:22,140 --> 00:10:23,880
here and here.

129
00:10:23,880 --> 00:10:28,280
So make sure to do that in both the insert and the get data

130
00:10:28,280 --> 00:10:28,980
call here,

131
00:10:28,980 --> 00:10:31,170
so that's a tiny improvement or tiny fix 

132
00:10:31,170 --> 00:10:37,140
we should implement and now let's do a restart here and now we don't get that warning anymore because

133
00:10:37,140 --> 00:10:38,450
now we can access the table

134
00:10:38,460 --> 00:10:41,620
but of course it's empty which is why we don't see anything here.

135
00:10:41,730 --> 00:10:53,580
Now let's add a new place, a test place here and take a picture,

136
00:10:53,710 --> 00:10:56,140
here it is. Confirm that

137
00:10:59,060 --> 00:11:07,140
and click add place now and here it is, here in the debug console, I see no error

138
00:11:07,140 --> 00:11:08,310
so that's looking good

139
00:11:08,470 --> 00:11:12,790
and now let's actually do a hot refresh with this green arrow here

140
00:11:13,090 --> 00:11:18,020
and once this app reloads now, we should still see our data here.

141
00:11:18,030 --> 00:11:20,290
So here's the spinner and here's the data again,

142
00:11:20,310 --> 00:11:25,770
so it was able to store that in the database and fetch it from there and that's of course exactly what

143
00:11:25,770 --> 00:11:27,280
should happen.

144
00:11:27,300 --> 00:11:34,860
So with that we're taking images, we're storing the image files on our local device hard drive and we're storing

145
00:11:34,860 --> 00:11:39,630
the overall data in our local device database.

146
00:11:39,630 --> 00:11:45,450
Now the missing piece in the same module is that we also work with Google Maps and also with the user

147
00:11:45,450 --> 00:11:46,140
location.
