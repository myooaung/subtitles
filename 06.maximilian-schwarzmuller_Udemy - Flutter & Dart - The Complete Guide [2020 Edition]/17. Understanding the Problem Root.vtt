WEBVTT
1
00:00:02.130 --> 00:00:03.870
Time to draw again.

2
00:00:03.990 --> 00:00:13.630
Remember that we had our widget tree and we had our element tree and also our render tree

3
00:00:13.630 --> 00:00:15.620
but we can ignore this for now.

4
00:00:15.850 --> 00:00:22.230
Now in our widget tree, we have our list builder

5
00:00:22.460 --> 00:00:29.360
and in there, we have the list items that are created, right. Now in the element tree,

6
00:00:29.360 --> 00:00:33.200
a new element is created for every widget

7
00:00:33.320 --> 00:00:39.590
as you learned. You also learned that the state for stateful widgets is created as a separate object

8
00:00:39.620 --> 00:00:43.880
and attached or referenced to or by the element.

9
00:00:43.940 --> 00:00:52.640
So the state for this list item here and the state object for the second list item, that is connected

10
00:00:52.670 --> 00:01:03.950
to our elements and the elements also of course point at our widgets here as you learned.

11
00:01:04.040 --> 00:01:06.800
Now what happens when we delete a widget?

12
00:01:10.250 --> 00:01:12.920
Let's say we deleted this list item here,

13
00:01:13.310 --> 00:01:21.940
so therefore, this widget indeed was removed. The state here however was not immediately removed.

14
00:01:21.940 --> 00:01:29.000
Now I told you that when a widget is removed permanently from the widget tree, its state also is deleted

15
00:01:29.000 --> 00:01:35.410
and we certainly deleted this widget permanently but the state is only deleted after Flutter determined

16
00:01:35.620 --> 00:01:40.690
that this element here is not needed anymore, because the state is attached to the element, not to the

17
00:01:40.690 --> 00:01:42.160
widget itself.

18
00:01:42.160 --> 00:01:46.110
So let's see how Flutter checks whether this element is still needed.

19
00:01:46.120 --> 00:01:54.610
Remember that it holds some information in each element, it holds information about the the child elements

20
00:01:54.610 --> 00:01:55.690
of each element,

21
00:01:55.720 --> 00:02:01.430
so this connection in the end and it holds information about the type of widget.

22
00:02:01.450 --> 00:02:10.120
So if we have a ListView here and then this widget here is a list item and this widget here is a

23
00:02:10.120 --> 00:02:19.210
list item, then the data it stored in the element is not just its relation to other elements but also

24
00:02:19.210 --> 00:02:25.150
that this element belongs to a ListView and this element here belongs to an item and this element here

25
00:02:25.180 --> 00:02:27.060
belongs to an item.

26
00:02:27.190 --> 00:02:34.530
Now when Flutter rebuilds the widget tree, it also checks the element tree and sees if it needs to change

27
00:02:34.530 --> 00:02:41.310
something which in the end then leads to a change on the screen. It goes through that tree from top to bottom

28
00:02:41.910 --> 00:02:46.110
and then it first checks the ListView. The ListView element is here,

29
00:02:46.110 --> 00:02:49.630
is there still a ListView widget on the same level?

30
00:02:49.770 --> 00:02:51.920
And yes, that is the case,

31
00:02:51.930 --> 00:02:55.200
we still have a ListView here, we have a ListView here.

32
00:02:55.260 --> 00:02:59.120
So it goes to the next layer and it sees I have an item here,

33
00:02:59.160 --> 00:03:01.020
is there still an item on the same level

34
00:03:01.590 --> 00:03:07.500
Well of course, this item here was deleted but that simply means that this item here goes up,

35
00:03:07.560 --> 00:03:07.800
right?

36
00:03:07.830 --> 00:03:08.480
It's a list,

37
00:03:08.490 --> 00:03:13.860
so this item, the second item simply is now the first and the only item in the list.

38
00:03:13.860 --> 00:03:21.630
So actually Flutter answers this question with a yes because it still finds an item here on the same level

39
00:03:21.630 --> 00:03:23.380
this old item was at

40
00:03:23.730 --> 00:03:30.690
and that's why the state is not deleted because it still finds a widget that belongs to this element

41
00:03:30.690 --> 00:03:30.990
here,

42
00:03:31.020 --> 00:03:33.390
we still have an item widget here,

43
00:03:33.390 --> 00:03:36.660
this one and it simply updates the reference.

44
00:03:36.660 --> 00:03:40.950
Well and then it checks this last element here

45
00:03:40.950 --> 00:03:50.370
and of course now since this item here moved up, it no longer finds a fitting widget and therefore, it

46
00:03:50.370 --> 00:03:52.820
deletes this item in this state,

47
00:03:52.830 --> 00:03:55.460
this is what Flutter does now.

48
00:03:55.830 --> 00:03:59.940
The problem with all of that of course is that

49
00:04:00.030 --> 00:04:08.160
this state here, for the second element, for the first and only item element here, this state is kept around

50
00:04:08.190 --> 00:04:15.390
because Flutter determined that this item here still had a matching widget, this widget down there

51
00:04:15.600 --> 00:04:19.700
but of course this state previously belonged to the now deleted item

52
00:04:19.800 --> 00:04:24.510
and for example in our case, stored the background color of the CircleAvatar.

53
00:04:24.510 --> 00:04:26.130
So we dropped the wrong state,

54
00:04:26.130 --> 00:04:28.170
this state was dropped but that's wrong,

55
00:04:28.170 --> 00:04:33.050
we should have dropped this yellow state here, this one but we didn't.

56
00:04:33.090 --> 00:04:41.130
So we need some way of telling Flutter that actually items are not just identified by type but also

57
00:04:41.130 --> 00:04:42.140
by something else,

58
00:04:42.150 --> 00:04:47.980
so that when we remove one item, Flutter doesn't think that it should keep this element here,

59
00:04:48.000 --> 00:04:53.530
this one around just because the type is the same as the type it now finds on the widget there

60
00:04:53.640 --> 00:04:58.920
but it also should check, is it the same, really the same item? Not just the same type but really the same

61
00:04:59.040 --> 00:05:01.830
item with the same data that's stored in there

62
00:05:01.830 --> 00:05:07.290
and thankfully, Flutter gives us a tool for passing this extra information to an element.
