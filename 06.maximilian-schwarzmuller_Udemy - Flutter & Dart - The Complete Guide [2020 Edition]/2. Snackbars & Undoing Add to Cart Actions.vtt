WEBVTT
1
00:00:02.270 --> 00:00:09.950
For that, back in our project here, it's in the product item, the product_item.dart file and there in

2
00:00:09.950 --> 00:00:14.170
the product item widget where we have that add to cart button,

3
00:00:14.240 --> 00:00:16.000
right, here it is.

4
00:00:16.220 --> 00:00:21.160
Now my idea is simple, obviously we'll still add the item to the cart,

5
00:00:21.170 --> 00:00:26.510
that's not really the thing but thereafter I want to show a little info popup that confirms to the

6
00:00:26.510 --> 00:00:29.300
user that we did add this item.

7
00:00:29.300 --> 00:00:32.490
Now showing such an info popup is really simple,

8
00:00:32.600 --> 00:00:35.960
we'll use something which we haven't used before, at least not in that way,

9
00:00:35.960 --> 00:00:37.580
we'll use scaffold

10
00:00:37.640 --> 00:00:44.630
and of course we worked with scaffold before, scaffold is a widget we used before to create that general

11
00:00:44.630 --> 00:00:47.390
page layout with an appBar and so on.

12
00:00:47.480 --> 00:00:51.240
Now we'll not use it as a widget but we'll use the same class here

13
00:00:51.350 --> 00:00:56.990
but then access a static method that exists on scaffold and that's the of method

14
00:00:56.990 --> 00:01:00.360
and of course, we already have some experience with that of method.

15
00:01:00.410 --> 00:01:06.380
We used it on a couple of different classes, like media query, theme but also the provider and the idea

16
00:01:06.410 --> 00:01:13.130
always is the same, of always takes a context and then it establishes some kind of connection behind

17
00:01:13.130 --> 00:01:13.930
the scenes.

18
00:01:14.030 --> 00:01:19.910
The media query establishes a connection to some globally managed object with information about the

19
00:01:19.910 --> 00:01:22.100
device and the device size,

20
00:01:22.250 --> 00:01:27.830
the theme allows us to establish a connection to the globally managed theme for this app and provider

21
00:01:27.830 --> 00:01:30.270
of allowed us to establish connection to

22
00:01:30.320 --> 00:01:37.460
one of our provided classes or objects. With scaffold of context, we establish a connection to the

23
00:01:37.460 --> 00:01:41.710
nearest scaffold, to the nearest scaffold widget,

24
00:01:41.750 --> 00:01:48.440
so to the nearest app layout you could say. Now here I'm using scaffold in the product item and we're not

25
00:01:48.440 --> 00:01:50.900
using scaffold in here which is good,

26
00:01:50.900 --> 00:01:57.980
it wouldn't work if you try to access this in the same widget tree as you used scaffold but instead,

27
00:01:58.310 --> 00:02:01.610
the nearest scaffold is in the product overview.

28
00:02:01.610 --> 00:02:03.400
Here we have a scaffold widget,

29
00:02:03.500 --> 00:02:09.860
we're using the product item in the end as a child here because it's in the products grid and

30
00:02:09.860 --> 00:02:13.670
there in the products grid, we have our product item.

31
00:02:13.670 --> 00:02:19.220
So the nearest scaffold widget when we reach out to it from our product item is the scaffold in the

32
00:02:19.220 --> 00:02:20.590
product overview.

33
00:02:20.600 --> 00:02:24.580
Now why do we reach out to that scaffold widget here in the end?

34
00:02:24.770 --> 00:02:31.190
Because on that scaffold widget which controls the entire page, that's something you have to remember,

35
00:02:31.640 --> 00:02:38.570
you can do a couple of things and for example, you could open the side drawer here if you wanted to

36
00:02:38.740 --> 00:02:40.840
and let me just quickly demonstrate this

37
00:02:40.880 --> 00:02:46.280
if I save that and now I press this cart, now the drawer when we add something to the cart,

38
00:02:46.430 --> 00:02:51.080
obviously that's not what we want but it's also nice to know that you could do that programmatically.

39
00:02:51.080 --> 00:02:56.660
Of course this only works if the nearest scaffold you're reaching out to has a drawer, which this one here

40
00:02:56.660 --> 00:02:57.820
has though.

41
00:02:58.100 --> 00:03:02.130
So that's one thing but of course the thing I want to do here is something different,

42
00:03:02.150 --> 00:03:11.090
we can also call show snack bar and a snack bar is really just a material design object which is shown

43
00:03:11.090 --> 00:03:12.280
at the bottom of the screen,

44
00:03:12.280 --> 00:03:17.750
it's an info modal, an info popup which comes in from the bottom of the screen.

45
00:03:17.870 --> 00:03:25.560
Now show snack bar takes a snack bar widget, as you can see here, it takes a snack bar widget as an

46
00:03:25.560 --> 00:03:26.720
argument,

47
00:03:26.730 --> 00:03:33.450
so let's add a new snack bar here. Snack bar is a widget which is made available by material.dart from

48
00:03:33.450 --> 00:03:37.420
the Flutter package and snack bar

49
00:03:37.420 --> 00:03:39.980
now takes a couple of arguments to be configured,

50
00:03:39.990 --> 00:03:42.850
there is one required argument and that's the content.

51
00:03:43.000 --> 00:03:48.040
So let's provide the named content argument and content takes a widget then which is displayed in the

52
00:03:48.040 --> 00:03:49.010
snack bar

53
00:03:49.120 --> 00:03:51.160
and typically, that's a text widget.

54
00:03:51.160 --> 00:03:57.020
So here we could say added item to cart, that would be a simple snack bar

55
00:03:57.130 --> 00:04:03.580
and with that if we save this, now if we add an item to the cart, you see that information coming from the

56
00:04:03.580 --> 00:04:04.970
bottom here.

57
00:04:04.990 --> 00:04:08.860
Now important, this automatically gets dismissed after a short time,

58
00:04:08.860 --> 00:04:16.380
you can also configure that duration by setting duration here. Duration expects a duration object, duration

59
00:04:16.390 --> 00:04:19.090
then in turn is built into Dart,

60
00:04:19.090 --> 00:04:24.220
it's a class built into Dart and it allows you to define a duration with a couple of named arguments,

61
00:04:24.220 --> 00:04:25.230
for example

62
00:04:25.270 --> 00:04:27.670
here we could say the duration should be two seconds

63
00:04:27.760 --> 00:04:31.210
and now the snack bar will be shown for two seconds.

64
00:04:31.210 --> 00:04:37.600
If you would want to have the text in the middle by the way, you could also set text align here to 

65
00:04:37.630 --> 00:04:39.920
textAlign.center.

66
00:04:39.970 --> 00:04:46.690
And with these changes, now if we add an item, we have the center text and after two seconds, this disappears.

67
00:04:46.690 --> 00:04:53.370
Now I'll get rid of text align center though because I'll add more to the snack bar than just the text.

68
00:04:53.620 --> 00:05:01.180
Besides the content, you can also add an action here and that action should be a snack bar action widget

69
00:05:01.210 --> 00:05:07.540
which is also part of my material.dart from the Flutter package and a snack bar action that in turn

70
00:05:08.140 --> 00:05:11.060
needs a label and onPressed,

71
00:05:11.080 --> 00:05:13.400
so these are the two required parameters.

72
00:05:13.510 --> 00:05:16.130
The label is simply the text on this snack bar action

73
00:05:16.150 --> 00:05:21.640
and this is now just text, not a widget but just plain text and here for example, we could offer the user

74
00:05:21.640 --> 00:05:29.980
the option to undo this addition to the cart and then we also need to provide onPressed where we do

75
00:05:29.980 --> 00:05:34.490
something when the user chooses that action. Now before we add the logic for that,

76
00:05:35.080 --> 00:05:36.090
let's see this,

77
00:05:36.540 --> 00:05:42.210
if we press this, now we see the undo button here and if we press that, the snack bar gets dismissed

78
00:05:42.220 --> 00:05:46.740
and of course you then want to do something that makes sense for the text you're showing here.

79
00:05:47.110 --> 00:05:50.910
So in our case, we could undo the addition of that item to the cart

80
00:05:51.310 --> 00:06:00.310
and for that, let's simply go to the cart.dart file and add a new function here, remove a single item because

81
00:06:00.310 --> 00:06:03.300
I don't want to remove the entire item from the cart,

82
00:06:03.310 --> 00:06:09.520
so not the entire product from the cart but only the latest addition, only a single quantity so to say.

83
00:06:10.680 --> 00:06:20.610
For this, we can check whether this is actually part of the cart, so if item contains a key and I expect

84
00:06:20.610 --> 00:06:23.160
to get the product ID as a key here.

85
00:06:23.190 --> 00:06:28.210
So first of all let's check whether that product ID is part and if it's not part of the cart,

86
00:06:28.260 --> 00:06:29.880
so hence the exclamation mark here,

87
00:06:29.880 --> 00:06:35.520
then I just return here and I don't do anything, return cancels the function execution, so the code after

88
00:06:35.550 --> 00:06:46.410
return doesn't execute and thereafter, I want to check if items for that given product ID,

89
00:06:46.410 --> 00:06:53.460
so for that key, if the quantity for that value is greater than 1. We know that we have an entry for

90
00:06:53.460 --> 00:06:54.150
this product

91
00:06:54.180 --> 00:06:59.400
but I check whether that quantity is greater than 1 because if it's greater than 1, I just want to reduce

92
00:06:59.400 --> 00:07:01.320
the quantity, if it's equal to 1,

93
00:07:01.320 --> 00:07:03.390
I want to remove the entire entry from the map,

94
00:07:03.390 --> 00:07:05.490
that's the important difference here.

95
00:07:05.520 --> 00:07:14.460
So if the quantity is greater than 1, then I'll simply call update here and for the product ID, we have

96
00:07:14.460 --> 00:07:24.890
this update function with the existing cart item where I then return a new cart item where I keep my existing

97
00:07:24.890 --> 00:07:34.340
cart item ID, my existing cart item title and also the existing cart item price but the quantity

98
00:07:34.550 --> 00:07:37.760
is the existing cart item minus one

99
00:07:41.010 --> 00:07:45.580
and of course, here I want to refer to the existing cart item quantity minus one.

100
00:07:45.600 --> 00:07:47.000
So this would then be the update

101
00:07:47.010 --> 00:07:54.480
if we had a quantity greater one, if and that's of course important, if the quantity is equal to one,

102
00:07:54.510 --> 00:08:00.570
so here in the else case because else always means it has to be equal to 1, 0 is not possible because

103
00:08:00.570 --> 00:08:05.760
we're checking here whether we have no entry and we can't reach a zero quantity otherwise.

104
00:08:05.790 --> 00:08:11.330
So if we have a quantity that's equal to one, then of course we want to remove the entire product.

105
00:08:11.340 --> 00:08:18.120
So here I can then simply use items remove and remove the entire key and therefore also the value mapped

106
00:08:18.150 --> 00:08:20.760
to the key from my map

107
00:08:20.760 --> 00:08:24.450
and after all of this, of course we want to notify our listeners about that update.

108
00:08:25.080 --> 00:08:29.500
So this will now change the cart and will remove a single item

109
00:08:29.610 --> 00:08:36.450
and this is now a method which we can call from insert product item when we press undo. There in

110
00:08:36.460 --> 00:08:37.470
onPressed in the end,

111
00:08:37.470 --> 00:08:39.290
I want to use my cart,

112
00:08:39.390 --> 00:08:46.620
I have my cart available because we're setting up a listener to it or not actively a listener but we

113
00:08:46.620 --> 00:08:48.830
reach out to our cart provider up here,

114
00:08:48.900 --> 00:08:55.460
store the cart in that variable or in that constant and therefore down there, we can of course call remove

115
00:08:55.920 --> 00:09:07.330
single item and forward our product ID which we get from product.id here. Now with that, we can

116
00:09:07.330 --> 00:09:09.220
see that in action,

117
00:09:09.220 --> 00:09:12.520
I have no items in the cart hence my badge shows zero

118
00:09:12.550 --> 00:09:17.870
and if I add an item, this goes up to 1 but if I now click undo, it goes back to zero.

119
00:09:17.920 --> 00:09:25.450
If I add an item twice here and I then press undo, we have one here on the badge still because I added

120
00:09:25.450 --> 00:09:28.180
it twice and that only undid one of the two actions

121
00:09:28.180 --> 00:09:33.190
but if we go there, we see the quantity is only 1 because I undid one of the two actions.

122
00:09:33.190 --> 00:09:39.190
So this is working, a tiny improvement is that if we rapidly add items, we don't really see that we do

123
00:09:39.190 --> 00:09:44.770
that because the snack bars really only wait for the previous snack bar to timeout before the new snack

124
00:09:44.770 --> 00:09:46.300
bar shows up.

125
00:09:46.390 --> 00:09:52.690
Now to immediately remove the old snack bar and show a new one when you want to do that, you can go to

126
00:09:52.690 --> 00:09:58.960
the place where you show your snack bar and before you show it, you again use scaffold of context and

127
00:09:58.960 --> 00:10:05.050
then you call hide current snack bar and if there is a snack bar already, this will be hidden before

128
00:10:05.050 --> 00:10:08.230
the new one is shown. So with that,

129
00:10:08.270 --> 00:10:13.370
now if we add an item here and then we press this again, you see the snack bar gets dismissed immediately

130
00:10:13.490 --> 00:10:16.420
and the new snack bar comes up.

131
00:10:16.460 --> 00:10:24.130
So this is how we can improve the app a lot because we give the user more useful information and also

132
00:10:24.140 --> 00:10:28.340
an option to undo what the user did with the help of our snack bar here.
