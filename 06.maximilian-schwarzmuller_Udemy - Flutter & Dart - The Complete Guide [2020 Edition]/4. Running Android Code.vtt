WEBVTT
1
00:00:02.290 --> 00:00:06.530
So let's get the battery level and for that as I mentioned, I'll start with Android.

2
00:00:06.550 --> 00:00:10.050
So let's go to the Android folder which is the Android app

3
00:00:10.060 --> 00:00:16.240
our Dart and Flutter app will get merged in the end and there in the app folder, in the source folder,

4
00:00:16.420 --> 00:00:20.800
in the main folder if you drill down into the Java com folder,

5
00:00:20.860 --> 00:00:26.890
if you drill down all the way to the bottom, you'll find this main activity file and this is now a Java

6
00:00:26.920 --> 00:00:28.350
file and that's important,

7
00:00:28.360 --> 00:00:32.080
this means here we write Java code, not Dart.

8
00:00:32.080 --> 00:00:34.040
Now of course you might not know Java

9
00:00:34.090 --> 00:00:38.670
and I'm also not a Java expert. Now for this module here,

10
00:00:38.680 --> 00:00:41.260
you can simply follow along what I type

11
00:00:41.430 --> 00:00:46.780
and as I said, if you ever are in a situation where you need a certain Java functionality in your app

12
00:00:46.780 --> 00:00:52.960
and you find no fitting plugin, maybe you find a snippet in some blog post or on Stack Overflow

13
00:00:53.290 --> 00:00:59.500
which you can more or less just copy into your Java code to get the functionality you want and then

14
00:00:59.500 --> 00:01:00.820
connect it to Flutter.

15
00:01:00.820 --> 00:01:06.730
So even if you're not a Java expert, this knowledge here is still useful because you can get some code

16
00:01:06.730 --> 00:01:10.870
to work with your Flutter app which you otherwise won't be able to.

17
00:01:10.870 --> 00:01:16.620
So here in the MainActivity.java file. we got a class and that's something we know from Dart, we're

18
00:01:16.630 --> 00:01:20.350
extending something and in the end, this here, this onCreate method,

19
00:01:20.350 --> 00:01:23.530
this is what runs when our Android application starts

20
00:01:23.530 --> 00:01:33.140
you could say. Now in here below this generated plugin registrant thing here, you can now set up a new,

21
00:01:33.140 --> 00:01:37.190
with the new keyword, MethodChannel.

22
00:01:37.340 --> 00:01:45.470
Now important, for this to work, you first of all need to add an import. So let's go up to the imports

23
00:01:45.470 --> 00:02:00.560
here and import io.Flutter.plugin, not plugins but plugin, .common.MethodChannel. Add

24
00:02:00.590 --> 00:02:05.940
this import here and with that import added, you unlock this class here.

25
00:02:05.970 --> 00:02:09.440
Now imports work a bit different in Java than they do in Dart,

26
00:02:09.450 --> 00:02:16.670
you specifically have to import everything you want to use, every class you want to use on its own and

27
00:02:16.710 --> 00:02:20.820
that's what we're doing here. We're importing the MethodChannel class and where in Dart

28
00:02:20.850 --> 00:02:25.740
you created a class just like this, in Java you would need to add the new keyword in front of that.

29
00:02:26.310 --> 00:02:32.820
So this now creates a new MethodChannel in Java and you might remember that we also created one in

30
00:02:32.820 --> 00:02:33.330
Flutter,

31
00:02:33.330 --> 00:02:39.360
so we're establishing that connection, in Flutter we're creating it to send messages, here we're creating

32
00:02:39.360 --> 00:02:45.180
it to receive messages and in there we have to call getFlutterView.

33
00:02:45.230 --> 00:02:47.700
This is a function that should be available here

34
00:02:47.700 --> 00:02:49.320
just like that.

35
00:02:49.320 --> 00:02:55.440
The second argument we pass here is our channel identifier and that of course has to be the same identifier

36
00:02:55.470 --> 00:02:56.790
as you set up here.

37
00:02:56.790 --> 00:02:59.760
So grab this identifier you set up in your Flutter code,

38
00:02:59.760 --> 00:03:05.940
this unique identifier and add it here as a string as well, as a second argument to the MethodChannel because

39
00:03:05.940 --> 00:03:16.080
this establishes communication on the channel with this identifier. Now on MethodChannel here, you can call

40
00:03:16.110 --> 00:03:20.590
set method call handler.

41
00:03:20.610 --> 00:03:26.340
Now this is a method we can call and this method here, and I'll add this here in a new line to make it easier

42
00:03:26.340 --> 00:03:33.650
to read, gets another new object, a new object of type method call handler.

43
00:03:33.660 --> 00:03:37.640
So create a new method call handler with the method call handler class

44
00:03:37.770 --> 00:03:43.380
and for this to be available, you need to add another import based on your Flutter plugin common method

45
00:03:43.390 --> 00:03:44.370
channel import

46
00:03:44.700 --> 00:03:48.820
and there we add the method call handler subimport

47
00:03:48.900 --> 00:03:55.080
so to say. So we're importing the MethodChannel here and then from that package, also specifically

48
00:03:55.500 --> 00:03:58.370
in addition the method call handler.

49
00:03:58.530 --> 00:04:06.020
So then we create a new method called handler here and this actually now is a special syntax in Java

50
00:04:06.020 --> 00:04:13.820
here where we can now add curly braces after this to dynamically override with @Override, with that

51
00:04:13.910 --> 00:04:21.890
@Override annotation, a method in there and that's a public void method, public is a special keyword

52
00:04:21.890 --> 00:04:26.270
in Java that makes it clear that this method can be called from outside.

53
00:04:26.270 --> 00:04:30.710
You might remember that in Dart, you could use an underscore to let everyone know that you don't want

54
00:04:30.710 --> 00:04:32.190
it to be called from outside,

55
00:04:32.210 --> 00:04:39.110
the equivalent would be private here and public is the default in Dart which is why there aren't public

56
00:04:39.110 --> 00:04:40.190
or private keywords.

57
00:04:40.790 --> 00:04:44.210
So here, we'll override the public method which doesn't return anything

58
00:04:44.330 --> 00:04:49.270
and that method will be called onMethodCall, written like this.

59
00:04:49.280 --> 00:04:54.330
So this is the end a method which will be triggered when an incoming method call is received

60
00:04:54.680 --> 00:05:04.310
and this on the fly overriding is simply a feature Java offers here. So here, onMethodCall takes

61
00:05:04.790 --> 00:05:05.720
two arguments,

62
00:05:05.720 --> 00:05:12.140
the first is of type method call and we can name it call, the second is of type result and we can name

63
00:05:12.140 --> 00:05:13.160
it result.

64
00:05:13.160 --> 00:05:21.980
Now we need to import these two classes, the first one is imported from io.flutter.plugin.common.MethodCall

65
00:05:21.980 --> 00:05:31.000
and then we can also import another one from the MethodChannel import and there,

66
00:05:31.060 --> 00:05:32.530
the result import.

67
00:05:32.680 --> 00:05:38.680
So you have to import this general method call import and this result import here and with these imports

68
00:05:38.770 --> 00:05:41.210
added up there, this here should work

69
00:05:41.230 --> 00:05:45.640
but of course right now, it's not doing anything, we just set up the basics.

70
00:05:45.640 --> 00:05:51.430
Now we can actually work on the concrete implementation of the code that should fetch us the battery

71
00:05:51.430 --> 00:05:52.300
level and for that,

72
00:05:52.300 --> 00:06:01.990
we'll first of all have to add more imports to this file and that's import android.content.ContextWrapper and

73
00:06:02.530 --> 00:06:09.460
then we have another import from android.content.Intent,

74
00:06:09.480 --> 00:06:15.470
so these are now all not Flutter specific imports but from the Android packages themselves.

75
00:06:15.470 --> 00:06:23.040
So we have another import, that's android.content.IntentFilter and we will use all these things

76
00:06:23.040 --> 00:06:25.350
we're importing in the code we're about to write

77
00:06:25.350 --> 00:06:32.670
and then I'll explain what they do. We also import android.iOS.BatteryManager,

78
00:06:32.900 --> 00:06:42.020
you can probably guess what that will help us do. We import android.iOS.Build.VERSION in

79
00:06:42.020 --> 00:06:51.470
capital characters, then import android.iOS.Build.VERSION_CODES,

80
00:06:52.220 --> 00:07:01.120
also capital characters and import android.iOS.Bundle like this and of course you find

81
00:07:01.120 --> 00:07:05.890
all this code attached to the last lecture of this module in case you're getting stuck.

82
00:07:05.890 --> 00:07:14.260
So with these imports added, let's add a new method outside of this onCreate method but inside

83
00:07:14.260 --> 00:07:20.500
of the main activity class, maybe here and this will be a private method which means it can only be called

84
00:07:20.500 --> 00:07:26.320
from inside the class which will return an integer, so Java knows integers as well and I'll name it 

85
00:07:26.320 --> 00:07:32.800
getBatteryLevel but that name is up to you, it doesn't have to be the name you used here in Flutter. So

86
00:07:32.800 --> 00:07:38.830
this name here doesn't have to be the same name as you use here, often it makes sense but it doesn't have

87
00:07:38.830 --> 00:07:40.280
to be the same name.

88
00:07:40.450 --> 00:07:47.230
So with that function defined, let's create a new battery level variable and set it to -1 initially

89
00:07:47.230 --> 00:07:54.510
which is basically an invalid battery level as a default. Then I want to check the version thing we're

90
00:07:54.510 --> 00:08:02.690
importing here which lets you find out which version of Android we're running on and there, tap into

91
00:08:02.690 --> 00:08:13.040
SDK_INT and if that is greater or equal to VERSION_CODES.LOLLIPOP, then I will execute

92
00:08:13.040 --> 00:08:18.200
some code, otherwise I'll execute some other code. This check is required because getting the battery

93
00:08:18.200 --> 00:08:23.570
level simply differs depending on which Android version you're running on and with that, we're checking if

94
00:08:23.570 --> 00:08:29.630
we're on a more recent version of Android, if that's the case, we can use a certain code for getting the

95
00:08:29.630 --> 00:08:35.270
battery level and otherwise, we'll have to use a workaround code. So let's start with the more recent

96
00:08:35.270 --> 00:08:43.010
code, there we create a new battery manager variable which is of type battery manager and you should

97
00:08:43.010 --> 00:08:44.420
always specify the type

98
00:08:44.420 --> 00:08:51.890
here in Java and then here, we can call get system service which is a function that should be globally

99
00:08:51.890 --> 00:08:58.370
available and we want to get access to the battery service here, like this,

100
00:09:00.850 --> 00:09:04.290
should also be available. Now

101
00:09:04.520 --> 00:09:12.260
this can be converted to a battery manager object by adding brackets battery manager in front of it and

102
00:09:12.260 --> 00:09:15.260
with it, we have access to the battery manager in the end.

103
00:09:15.410 --> 00:09:20.510
Now the battery level can be set equal to 

104
00:09:20.510 --> 00:09:32.770
batteryManager.getIntProperty batteryManager.BATTERY_PROPERTY_CAPACITY.

105
00:09:33.050 --> 00:09:39.440
So this code here in the end will give us the current battery level of our device with this battery

106
00:09:39.440 --> 00:09:45.620
property constant here which we're accessing through the battery manager

107
00:09:45.620 --> 00:09:47.930
and with that, we're setting the battery level,

108
00:09:47.960 --> 00:09:52.400
that's what's happening here. Now in the else snippet here,

109
00:09:52.400 --> 00:09:53.050
I'll write

110
00:09:53.060 --> 00:10:00.980
that fallback code, there we create an intent of type intent and then create a new context wrapper around

111
00:10:01.010 --> 00:10:03.200
our application context which we get with

112
00:10:03.200 --> 00:10:05.780
get application context, a globally available

113
00:10:05.780 --> 00:10:20.180
function and then on that, we can call register receiver null and then new intent filter and then the intent

114
00:10:20.300 --> 00:10:29.270
should be action battery changed and this is in the end a way of getting notified when our battery level

115
00:10:29.270 --> 00:10:29.860
changes

116
00:10:29.870 --> 00:10:36.570
and we also get notified when we set this up initially to basically fetch our battery level.

117
00:10:36.590 --> 00:10:46.840
Now we can therefore set the battery level variable equal to Intent.getIntExtra to retrieve some data

118
00:10:46.840 --> 00:10:50.440
from that intent, so from that incoming information package,

119
00:10:50.440 --> 00:10:59.370
so getIntExtra batteryManager.EXTRA_LEVEL, second argument here should be

120
00:10:59.370 --> 00:11:07.490
-1 which is a fallback value in case we're not able to retrieve that, times 100 to get the value in readable

121
00:11:07.490 --> 00:11:09.610
percentage values.

122
00:11:09.650 --> 00:11:21.320
Let me also add brackets around that and then I'll divide that by Intent.getIntExtra

123
00:11:21.320 --> 00:11:32.600
BatteryManager.EXTRA_SCALE and here, fallback is -1 as well. This will in the end give us a battery level in percentage

124
00:11:32.740 --> 00:11:39.220
and with that, after the if/else block, we definitely have a battery level and if it's just -1 as a fallback

125
00:11:39.430 --> 00:11:41.760
which we can return.

126
00:11:42.100 --> 00:11:47.050
So now this is our logic for getting the battery level and of course there are a lot of Java and Android

127
00:11:47.050 --> 00:11:53.440
specifics in there into which I won't dive here. Now in onMethodCall up there,

128
00:11:53.490 --> 00:12:00.500
we want to listen to that getBatteryLevel call and then call this method and return the result.

129
00:12:00.510 --> 00:12:05.730
So here, I'll check if my incoming call method equals

130
00:12:05.730 --> 00:12:08.190
and now here, we need that string identifier

131
00:12:08.190 --> 00:12:10.200
we're also using here in Flutter,

132
00:12:10.380 --> 00:12:11.730
so getBatteryLevel

133
00:12:11.730 --> 00:12:18.410
in my case, I'm checking whether that's the incoming call we're getting on this channel and if that's the

134
00:12:18.410 --> 00:12:26.320
case, then I'll get my battery level here by calling getBatteryLevel and that's now this internal method

135
00:12:26.330 --> 00:12:35.990
we just defined down there and if battery level now is not equal to -1, which means we have a valid

136
00:12:35.990 --> 00:12:40.360
value, then I'll call result success, result is

137
00:12:40.380 --> 00:12:45.950
this argument we're getting, success and forward battery level and that will basically pass it on to

138
00:12:45.980 --> 00:12:47.630
the Flutter code,

139
00:12:47.630 --> 00:12:53.660
else if we do have a battery level of -1 or of some other invalid value, then I will call

140
00:12:53.660 --> 00:12:56.870
result error to throw an error in my Flutter code

141
00:12:57.260 --> 00:13:07.170
and here we can pass in an identifier, like unavailable and then a message, could not fetch battery level

142
00:13:07.210 --> 00:13:12.220
and that will be forwarded to our Dart and Flutter code as well.

143
00:13:12.240 --> 00:13:19.080
Now if we have a different message and not getBatteryLevel, then I'll call result not implemented,

144
00:13:19.110 --> 00:13:24.450
which will basically also throw an error in the Flutter code telling the Flutter code that we have no

145
00:13:24.540 --> 00:13:31.240
logic for handling this incoming method. Now with that, we should have code that works.

146
00:13:31.250 --> 00:13:38.930
Let's quit our running emulator here and do a full restart and then see whether that works as it should

147
00:13:40.790 --> 00:13:46.210
and I'm actually getting an error because in Dart, I always use single quotes for my string, so there

148
00:13:46.210 --> 00:13:47.050
it's fine,

149
00:13:47.080 --> 00:13:52.370
in Java you actually need to replace all these single quotes with double quotes.

150
00:13:52.420 --> 00:13:58.190
That's Java specific, single quotes won't work here for strings like that

151
00:13:58.450 --> 00:14:04.020
and one other error I found is in result error here, we have to pass a third argument as well

152
00:14:04.030 --> 00:14:12.050
but that can just be null here. And now with that, let me try running this on my emulator again and now

153
00:14:12.050 --> 00:14:17.870
this is actually built and shipping to the device. In order to see something there, of course we have to

154
00:14:17.870 --> 00:14:21.830
make sure we call getBatteryLevel there and therefore in initState,

155
00:14:21.860 --> 00:14:28.030
I'll now reach out to getBatteryLevel like this. Let's save

156
00:14:28.050 --> 00:14:28.670
that

157
00:14:31.480 --> 00:14:37.480
and do a full refresh thereafter to let that restart and now hopefully there, we see our battery level

158
00:14:37.480 --> 00:14:38.350
change

159
00:14:39.810 --> 00:14:47.870
and we do, to 100. Now that proves that this call works because on the emulator here, we simply have 100

160
00:14:48.090 --> 00:14:54.300
as a battery level and I also got no error here, so this seems to work and that is how we can write some

161
00:14:54.300 --> 00:14:57.800
native Android code and connect to that from inside our Flutter app.

162
00:14:57.810 --> 00:14:59.340
Let's now move on to iOS.
