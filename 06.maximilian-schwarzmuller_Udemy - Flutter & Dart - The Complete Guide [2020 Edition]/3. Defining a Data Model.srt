1
00:00:02,300 --> 00:00:08,690
For this application, I again have a brand new application which is pretty empty, which you find attached

2
00:00:08,740 --> 00:00:09,740
to this main.dart file,

3
00:00:09,740 --> 00:00:10,790
that's what you find attached,

4
00:00:10,790 --> 00:00:14,630
you can simply drag and drop this into a brand new Flutter project.

5
00:00:14,630 --> 00:00:18,300
I haven't set up anything here and this main.dart file is pretty lean,

6
00:00:18,440 --> 00:00:21,620
it only has the MyApp stateless widget and the MyHomePage

7
00:00:21,630 --> 00:00:25,400
stateless widget which just shows some center text here.

8
00:00:25,400 --> 00:00:31,550
Now this is our starting point and of course, there are many places where we could start in this app.

9
00:00:31,550 --> 00:00:38,900
We could start with the feature of adding products, so that users can add new products. That would make

10
00:00:38,900 --> 00:00:42,290
sense because without products, there is little we can display.

11
00:00:42,830 --> 00:00:49,460
However, I will start with the ProductsOverviewScreen instead and simply start with some dummy products

12
00:00:49,610 --> 00:00:54,750
and then later we'll replace that with products that we actually added ourselves with the

13
00:00:55,130 --> 00:00:58,200
add a new product screen in the app.

14
00:00:58,190 --> 00:01:03,260
Now what we'll definitely need is a couple of different screens and also normal widgets and therefore

15
00:01:03,260 --> 00:01:09,680
I will already create a screens subfolder and a widgets subfolder here and that's simply something

16
00:01:09,680 --> 00:01:10,710
we did before

17
00:01:10,760 --> 00:01:17,210
in an earlier module, it allows us to keep our files more organized and understand what's inside our

18
00:01:17,210 --> 00:01:20,980
files. Now in the screens folder here,

19
00:01:21,060 --> 00:01:28,140
we can add a new file to hold a new widget and that should be the products_overview_screen.dart

20
00:01:28,200 --> 00:01:34,710
file because in there, I want to create a products overview widget which is the widget

21
00:01:34,740 --> 00:01:38,820
that should present that grid of products we have in our application

22
00:01:39,060 --> 00:01:42,170
and that's simply my choice here to start with this

23
00:01:42,450 --> 00:01:47,310
widget because I think that's one of the easiest ways of getting something useful onto the

24
00:01:47,310 --> 00:01:53,730
screen which then soon also allows us to dive into state management. For the moment, let's start with

25
00:01:53,730 --> 00:01:55,330
a stateless widget in there,

26
00:01:55,330 --> 00:02:03,370
create a new stateless widget which I'll name ProductsOverviewScreen and as before, of course we need

27
00:02:03,370 --> 00:02:09,000
to import material.dart from the Flutter package here to unlock stateless widget, build context widget

28
00:02:09,000 --> 00:02:12,730
container, all these types and classes.

29
00:02:12,730 --> 00:02:19,520
Now in the ProductsOverviewScreen, I want to render a grid of products and therefore, we need two things,

30
00:02:19,570 --> 00:02:26,350
we need products and we need the grid. Now a product in this application will be of course an important

31
00:02:26,620 --> 00:02:31,460
model, an important thing and therefore I'll create a new folder, models

32
00:02:31,580 --> 00:02:36,730
and in there, I want to have a product.dart file to define how a product should look like in this

33
00:02:36,730 --> 00:02:45,130
application, so that we can build products based on this definition which simply helps us then use

34
00:02:45,220 --> 00:02:48,910
this product in a uniform way throughout our application.

35
00:02:48,910 --> 00:02:51,450
So in there, we can define a product class

36
00:02:51,610 --> 00:02:58,180
and it's again a normal class, not a widget, it's just a class because I just want to use this as a blueprint

37
00:02:58,210 --> 00:03:04,070
to create objects based on and how could a product look like?

38
00:03:04,180 --> 00:03:11,430
Now of course, you are free to structure and model this in whichever way you want it

39
00:03:11,650 --> 00:03:18,340
but for this application, a product definitely should have an ID and I'll mark this as final for now

40
00:03:18,370 --> 00:03:25,330
because I expect to get that ID when the product is created. Later down in the course for example, we'll

41
00:03:25,330 --> 00:03:30,730
get that ID because we'll create a product on a server and then we'll store that server-side generated

42
00:03:30,730 --> 00:03:36,140
product here in our application. So we'll have that ID when we create the product,

43
00:03:36,220 --> 00:03:44,420
we also probably will have a title and I think a description also makes sense on a product and other

44
00:03:44,420 --> 00:03:47,410
than that, probably also a price right

45
00:03:47,410 --> 00:03:51,500
which should be of type double, to allow for decimal places too

46
00:03:51,650 --> 00:03:54,810
and also an imageUrl, again here

47
00:03:54,820 --> 00:03:59,770
I'll have an image which is stored on a server which we then display in the application.

48
00:03:59,830 --> 00:04:05,980
We don't store it as an asset that's baked into our application bundle because if we would do that, then

49
00:04:05,980 --> 00:04:10,930
we would have to ship a new app version with every new product that was added and then that's of course

50
00:04:10,930 --> 00:04:12,220
not feasible at all.

51
00:04:12,760 --> 00:04:18,910
So we'll have a network image here and there is one last field which I want to have and that's a boolean,

52
00:04:19,270 --> 00:04:27,340
isFavorite and this is not final because this actually will be changeable after the product has been

53
00:04:27,340 --> 00:04:34,450
created and it allows us to track whether the user of this application has this product as a favorite

54
00:04:34,450 --> 00:04:41,470
product or not and later, we'll still be able to save different favorite statuses for different users

55
00:04:41,530 --> 00:04:42,370
of our app

56
00:04:42,400 --> 00:04:45,290
but that's simply something we'll worry about later,

57
00:04:45,310 --> 00:04:53,860
for now we just have this changeable, this mutable boolean property here, isFavorite, in this app.

58
00:04:53,860 --> 00:04:56,740
Now we need a constructor to initialize a product,

59
00:04:56,860 --> 00:05:03,580
so let's repeat the class name here to add such a constructor and as always, it's up to you whether you

60
00:05:03,580 --> 00:05:06,310
want to use named or positional arguments.

61
00:05:06,400 --> 00:05:11,650
Since we have a couple of arguments here, I think it's easier to work with this class if we use named

62
00:05:11,650 --> 00:05:17,950
arguments, so I'll use curly braces here around my argument list to add these arguments as named arguments

63
00:05:18,670 --> 00:05:27,600
and then I want to be able to set the ID, I want to be able to set the title, the description, the price

64
00:05:28,140 --> 00:05:29,360
and the imageUrl

65
00:05:29,410 --> 00:05:32,510
and of course, also isFavorite.

66
00:05:32,740 --> 00:05:39,070
Now there are a couple of fields, a couple of properties which I want to mark as required so that we

67
00:05:39,070 --> 00:05:41,010
can't create a product without them

68
00:05:41,980 --> 00:05:49,410
and for that, we can use the required decorator which we can import from the Flutter package and there,

69
00:05:49,410 --> 00:05:54,400
the foundation.dart file. With this import added at the top

70
00:05:54,400 --> 00:06:02,320
here, we can add required in front of the ID because that ID will be required, in front of the title,

71
00:06:02,650 --> 00:06:09,420
in front of the description, the price and the imageUrl but isFavorite is not necessarily required.

72
00:06:09,460 --> 00:06:17,950
We can simply initialize that with a default value of false by assigning a default value here. With that,

73
00:06:17,950 --> 00:06:21,050
the product class is finished,

74
00:06:21,050 --> 00:06:22,820
looks quite good to me

75
00:06:22,970 --> 00:06:28,850
and with it, we can move back to the product overview widget to start our work on the products overview

76
00:06:28,880 --> 00:06:29,330
grid.
