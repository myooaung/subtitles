1
00:00:02,140 --> 00:00:11,530
Let's actually start by adding a couple of products and for that, I'll import from my models folder and

2
00:00:11,530 --> 00:00:19,210
there, my products.dart file to unlock that product class here in this ProductsOverview widget

3
00:00:19,600 --> 00:00:26,080
and then here in our ProductsOverviewScreen widget class, I want to add, since it's some dummy data for

4
00:00:26,080 --> 00:00:26,970
now, a

5
00:00:27,250 --> 00:00:39,020
final property which will hold a list of products which I'll name loaded products or whatever you want

6
00:00:39,020 --> 00:00:39,590
to name it

7
00:00:39,590 --> 00:00:44,610
and that will be a list of products as I already said. Now

8
00:00:44,620 --> 00:00:48,990
for this, I prepared some products which you'll find attached and

9
00:00:48,990 --> 00:00:55,600
you can simply add them here or replace your existing products list with these products, simply some

10
00:00:55,930 --> 00:01:00,080
dummy products which you can of course change, you can add more products if you want to,

11
00:01:00,070 --> 00:01:07,840
so that we have some products to start with in this widget and these products satisfy my product definition

12
00:01:07,840 --> 00:01:16,520
defined here in the product class. With the products loaded, here in the build method, I of course don't

13
00:01:16,520 --> 00:01:23,150
want to return a container but actually, a scaffold because remember that this widget here, the products

14
00:01:23,180 --> 00:01:29,180
overview screen widget will be used as a screen in this app, which means that it will fill the entire

15
00:01:29,510 --> 00:01:34,960
screen here and therefore, it should also provide an appBar, a background color and so on

16
00:01:34,970 --> 00:01:38,120
and that's all something scaffold does.

17
00:01:38,120 --> 00:01:46,340
So I'll use a scaffold widget here and add the appBar argument which is simply a widget created with

18
00:01:46,340 --> 00:01:54,200
the appBar class and there, we can set up a title like my shop if that would be the name of our

19
00:01:54,200 --> 00:01:55,790
brand, of our shop,

20
00:01:55,790 --> 00:02:02,160
of course should be a text widget though, so that's something we can add here, like this.

21
00:02:02,340 --> 00:02:07,410
And besides the appBar, obviously we want to have a body and a scaffold and that should be the grid

22
00:02:07,410 --> 00:02:12,720
view and therefore I'll use GridView but now not in the way we used it before

23
00:02:12,750 --> 00:02:18,180
by instantiating like this and providing a children argument but instead, I'll use the builder method

24
00:02:18,180 --> 00:02:22,190
which works in the same way as ListView.builder,

25
00:02:22,230 --> 00:02:29,760
it simply optimizes longer grid views with multiple items or where we don't know how many items we'll

26
00:02:29,760 --> 00:02:35,460
have by simply only rendering the items that are on the screen and not rendering the items that are

27
00:02:35,460 --> 00:02:36,690
not on the screen

28
00:02:36,690 --> 00:02:42,300
and this helps us with performance for very long grid views which our list of products potentially could

29
00:02:42,300 --> 00:02:43,420
be.

30
00:02:43,440 --> 00:02:49,810
So that's the GridView.builder here and the GridView.builder now takes a couple of arguments.

31
00:02:49,920 --> 00:02:55,030
Now one of them is the padding which we can add and I want to add some padding here with EdgeInsets.all

32
00:02:55,500 --> 00:03:00,820
10.0, to make sure there's some padding around the grid

33
00:03:00,820 --> 00:03:06,240
and now you learned earlier in the course that you can turn this into a const here, use a const keyword

34
00:03:06,240 --> 00:03:13,050
in front of this to make sure that this does not rebuild when this whole build method is called which

35
00:03:13,050 --> 00:03:14,410
can save you some performance

36
00:03:14,520 --> 00:03:18,760
and that is true and definitely add const at all places where you can add it.

37
00:03:18,840 --> 00:03:25,110
I will not focus on it in this module here because I want to focus on the new widgets and then

38
00:03:25,110 --> 00:03:28,270
on the state management part which is the heart of this module.

39
00:03:28,290 --> 00:03:33,240
Now of course, feel free to add const in all the places where you can add it, as you learned, it's never a

40
00:03:33,240 --> 00:03:39,660
bad practice for applications and can help you with performance but with that, back to filling this grid

41
00:03:39,660 --> 00:03:46,790
view, padding to have some padding around the grid and then we also need three other items here,

42
00:03:46,790 --> 00:03:48,480
three other arguments.

43
00:03:48,570 --> 00:03:54,720
One is the item count which simply tells the GridView how many grid items to build and that of course

44
00:03:54,720 --> 00:03:57,690
should be our loaded products and there, the length,

45
00:03:57,690 --> 00:03:59,700
so how many loaded products do we have.

46
00:04:00,750 --> 00:04:08,220
Then we need the item builder which is a function or which holds a builder function which receives the

47
00:04:08,220 --> 00:04:15,630
context and the index of the item it's currently building a cell for, that should return the widget that

48
00:04:15,630 --> 00:04:19,020
gets built for every grid item we have.

49
00:04:19,380 --> 00:04:23,190
So this is actually what we'll see on the screen. Now

50
00:04:23,200 --> 00:04:27,850
I'll come back to this in a second because there is another argument which we have to provide and that's

51
00:04:27,850 --> 00:04:29,360
the gridDelegate.

52
00:04:29,710 --> 00:04:35,480
The item builder defines how every grid item is built, how every grid cell should be built,

53
00:04:35,560 --> 00:04:41,470
the gridDelegate allows us to define how the grid generally should be structured, so how many columns

54
00:04:41,470 --> 00:04:42,490
it should have

55
00:04:42,490 --> 00:04:48,860
most importantly and we set that by providing a SliverGridDelegate

56
00:04:49,450 --> 00:04:56,080
and then here, I'll use with FixedCrossAxisCount which means I can define that I want to have a certain

57
00:04:56,080 --> 00:05:04,760
amount of columns and it will simply squeeze the items onto the screen so that this criteria is met.

58
00:05:04,780 --> 00:05:10,660
The alternative would be the SliverGridDelegateWithFixedExtent which we used earlier

59
00:05:10,660 --> 00:05:16,090
in the course where we can define how wide every grid item should be and it will then create as many

60
00:05:16,090 --> 00:05:19,770
columns as it can for the given device size.

61
00:05:20,230 --> 00:05:23,110
It simply depends on your app requirements, what you want,

62
00:05:23,240 --> 00:05:28,300
I simply want to show both and therefore here, I'll not set a fixed width of all the grid items but

63
00:05:28,300 --> 00:05:33,130
instead say I want to have at least a certain amount of grid items on the screen.

64
00:05:33,130 --> 00:05:39,010
Now for that, we have to configure this SliverGridDelegateWithFixedAxisCount class

65
00:05:39,010 --> 00:05:45,460
which is really a cool class name and one thing we have to configure here is the crossAxisCount which

66
00:05:45,460 --> 00:05:49,510
is exactly that amount of columns I want to have

67
00:05:49,510 --> 00:05:56,350
and here let's say I want to have two columns and then you can set the child aspect ratio and there

68
00:05:56,360 --> 00:05:57,900
I want to have 3 / 2,

69
00:05:58,060 --> 00:06:05,010
so this should be a bit higher than they are wide, a bit taller than they are wide and then you can set

70
00:06:05,010 --> 00:06:13,050
up the crossAxisSpacing which is simply the width, the spacing between the columns and I'll set 10 here,

71
00:06:13,080 --> 00:06:14,270
10 pixels

72
00:06:14,400 --> 00:06:21,310
and the mainAxisSpacing which is the space between the rows and I'll set the same spacing there.

73
00:06:21,390 --> 00:06:24,000
So with that, we defined the structure of the grid,

74
00:06:24,000 --> 00:06:27,400
now we can go back to the grid items that we want to render.

75
00:06:27,720 --> 00:06:36,360
Now we could definitely add the widget subtree for each item here but since this is a perfect scenario

76
00:06:36,360 --> 00:06:42,390
for outsourcing something into a separate widget to keep this widget tree of this widget here smaller,

77
00:06:42,840 --> 00:06:49,530
I'll create a new widget in the widgets folder and I'll name it product_item.dart and

78
00:06:49,530 --> 00:06:56,190
in there, a stateless widget which is also named product item and this will be the grid item which

79
00:06:56,190 --> 00:06:58,650
gets rendered for every product.

80
00:06:58,680 --> 00:07:04,830
Now of course here, we have to import material.dart and now we simply have to define how a product, how

81
00:07:04,830 --> 00:07:07,160
a grid item should look like.

82
00:07:07,260 --> 00:07:11,010
Here, we could return a container which we now style ourselves,

83
00:07:11,010 --> 00:07:17,340
we could return a card but I am always a fan of showing you new widgets which we haven't seen before

84
00:07:17,550 --> 00:07:24,870
and therefore here, I'll return a GridTile, that's a widget built into Flutter. You might remember

85
00:07:24,900 --> 00:07:30,640
ListTile which we also used in the ListView but also for example in the side drawer.

86
00:07:30,780 --> 00:07:37,410
Now GridTile is simply a built-in widget which can be used anywhere but which works particularly well

87
00:07:37,470 --> 00:07:39,450
inside of grids.

88
00:07:39,450 --> 00:07:45,890
Now a GridTile takes a child and that will be the main content of the grid.

89
00:07:45,900 --> 00:07:54,840
Now here, I want to have an image as the main content and that will be the image of the product we're rendering.

90
00:07:54,900 --> 00:08:03,240
So here, I'll use image.network to create an image widget that takes a network source and here, we

91
00:08:03,240 --> 00:08:04,460
could enter a URL

92
00:08:04,470 --> 00:08:09,990
but of course I don't want to have a hardcoded widget but I want to get that data from outside,

93
00:08:09,990 --> 00:08:13,000
so from the place where I use the product item widget.

94
00:08:13,000 --> 00:08:18,770
So we'll need to accept a couple of properties in this product item to display a product.

95
00:08:19,100 --> 00:08:25,710
Either we have only one property which is our product of type product or the separate things that we

96
00:08:25,710 --> 00:08:28,850
need from the product as separate properties

97
00:08:28,920 --> 00:08:30,580
and that's the approach I'll take here,

98
00:08:30,930 --> 00:08:38,570
so I expect to get the ID let's say, I expect to get the title because I'll probably need that,

99
00:08:38,790 --> 00:08:45,020
I expect to get the imageUrl and yes, that should be it for now.

100
00:08:45,030 --> 00:08:48,720
Now of course to really get values for these properties,

101
00:08:48,720 --> 00:08:54,060
we need to provide the constructor here and then again, it's up to you whether you want to use positional

102
00:08:54,120 --> 00:08:57,340
or named arguments, I'll use positional arguments,

103
00:08:57,390 --> 00:09:04,200
so I'll simply add these three property assignments here as arguments in the constructor of the product

104
00:09:04,230 --> 00:09:05,010
item

105
00:09:05,010 --> 00:09:14,310
and with that, we get access to the imageUrl down there. This allows us to render such product

106
00:09:14,370 --> 00:09:20,260
items, let's now use that widget in the ProductsOverviewScreen widget.

107
00:09:20,260 --> 00:09:27,460
So in there, let's import from the widgets folder, the product_item.dart file and with that import

108
00:09:27,550 --> 00:09:32,370
added, down there in our item builder of the GridView,

109
00:09:32,440 --> 00:09:36,770
we use product item and now we simply have to forward the data.

110
00:09:36,940 --> 00:09:44,350
So since we go through all our loaded products here or since the GridView.builder does that for us, we

111
00:09:44,350 --> 00:09:47,250
want to forward loaded products for the index

112
00:09:47,250 --> 00:09:51,730
we're currently building our item for and then here, the ID,

113
00:09:52,210 --> 00:09:55,540
then the second argument product item takes as the title.

114
00:09:55,540 --> 00:10:02,000
So let's access load products i.title and then also loaded products

115
00:10:02,140 --> 00:10:04,240
i.imageUrl

116
00:10:04,240 --> 00:10:10,210
These are the three arguments we forward to product item and therefore product item will now work correctly.

117
00:10:10,210 --> 00:10:16,360
Now one important note, of course in this module, we'll have a look at other state management solutions

118
00:10:17,230 --> 00:10:22,750
and one goal there will be that we don't manage all our state in the main.dart file and pass all the

119
00:10:22,750 --> 00:10:30,700
state as arguments to other widgets. Passing data into a widget like this however is and will always be

120
00:10:30,700 --> 00:10:31,960
normal.

121
00:10:31,960 --> 00:10:37,470
You want to have reusable widgets which you could drop anywhere into your application and we should

122
00:10:37,480 --> 00:10:43,070
then simply configure through or via arguments which you pass to them.

123
00:10:43,090 --> 00:10:48,310
So a product item that receives the data it needs to display the content correctly as arguments,

124
00:10:48,310 --> 00:10:51,370
that's something we'll always use in our applications.

125
00:10:51,520 --> 00:10:57,850
The things we'll later take care of are the unnecessary arguments where we pass something to a widget

126
00:10:58,060 --> 00:11:02,800
just because we then need to forward it to another widget and so on which we also had earlier

127
00:11:03,010 --> 00:11:07,790
but I'll come back to that once we do dive deeper into the state management part.

128
00:11:07,870 --> 00:11:12,160
So for now, let's simply pass the data here to product item which should render it

129
00:11:12,700 --> 00:11:17,980
and with that let's save it and do a full restart here and see whether that works.

130
00:11:17,980 --> 00:11:23,920
However for that of course, in main.dart, I first of all have to make sure that I delete MyHomePage

131
00:11:24,040 --> 00:11:30,820
class here and that we actually do render the ProductsOverviewScreen here as our main screen. So I

132
00:11:30,820 --> 00:11:33,010
can import from the

133
00:11:35,660 --> 00:11:41,660
screens folder and there, from the products_overview_screen.dart file and with that import added here,

134
00:11:41,840 --> 00:11:42,800
down there,

135
00:11:42,800 --> 00:11:47,590
I want to of course use my ProductsOverviewScreen widget as the main widget.

136
00:11:47,660 --> 00:11:50,920
Now with that, we can save this and now indeed here,

137
00:11:51,080 --> 00:11:59,270
I see these four items, which are my four images for the four products I provided.

138
00:11:59,270 --> 00:12:00,120
It's a start,

139
00:12:00,440 --> 00:12:08,060
obviously not the prettiest application we ever saw but it is a start and it's something we can build

140
00:12:08,060 --> 00:12:08,540
up on.

141
00:12:09,230 --> 00:12:15,260
So let's now fine tune the product items here a bit and for that, let's not just return a boring 

142
00:12:15,260 --> 00:12:19,980
GridTile with only an image but let's add more to that than just the image.

143
00:12:20,060 --> 00:12:25,730
First however, I want to configure that image with the fit argument which we can now provide to take up

144
00:12:25,760 --> 00:12:27,500
all the available space it can get

145
00:12:27,530 --> 00:12:31,510
and I do this with BoxFit.cover which is the setting I want to use here

146
00:12:31,640 --> 00:12:37,400
and if we do that, then this already looks a bit better because now these images at least are equally

147
00:12:37,400 --> 00:12:43,790
sized. By the way, this list of course would be scrollable here if we had more products that would exceed

148
00:12:44,330 --> 00:12:47,550
the boundaries here of this screen.

149
00:12:47,990 --> 00:12:54,650
Now on the images, of course it would be useful to also display the title of the product because that's

150
00:12:55,040 --> 00:12:57,100
certainly an important piece of information.

151
00:12:59,030 --> 00:13:06,290
For that, besides the child on the GridTile here, we can also add a footer and that will add a bar or a part

152
00:13:06,350 --> 00:13:12,530
at the bottom of the GridTile and there, there is another widget which helps us with nicely displaying

153
00:13:12,530 --> 00:13:13,260
content there,

154
00:13:13,280 --> 00:13:15,470
you don't have to use it but you can use it

155
00:13:15,560 --> 00:13:23,450
and that's the GridTileBar. Now the GridTileBar can be configured of course in various ways and for example,

156
00:13:23,450 --> 00:13:25,540
you can add the title argument here.

157
00:13:25,790 --> 00:13:31,280
The title argument takes a widget and typically that of course is a text widget but you could add anything

158
00:13:31,280 --> 00:13:37,460
which suits your requirements and in there, I want to display the title of our product.

159
00:13:37,460 --> 00:13:43,820
So I'll use that title property which we are receiving here and which we do store in the title property.

160
00:13:44,210 --> 00:13:45,430
So we'll use that

161
00:13:45,590 --> 00:13:54,100
and on that text, I also want to make sure that we center this with text align and then

162
00:13:54,100 --> 00:14:01,060
text align.center which is an enum value to tell Flutter to center this text in its widget.

163
00:14:01,170 --> 00:14:08,030
And with that, if we now save this, we got that title down there as well which is quite nice.

164
00:14:09,150 --> 00:14:14,940
Now of course, for example here for the trousers, this title is a bit hard to read and therefore, a good

165
00:14:14,940 --> 00:14:20,210
thing is that on the GridTileBar, we can also set a background color. Now here,

166
00:14:20,410 --> 00:14:27,970
let's try colors gray as a hardcoded color and we could work with something like this but I rather

167
00:14:27,970 --> 00:14:31,610
have a color which has some opacity to it.

168
00:14:31,720 --> 00:14:38,050
For that, we can of course use something like black54 which is a black color that is a bit opaque where

169
00:14:38,050 --> 00:14:41,410
you can still see the image and I think that looks a bit nicer,

170
00:14:41,410 --> 00:14:43,230
so I'll go with that.

171
00:14:43,240 --> 00:14:50,290
So with that, we now have the title and we can also read the title. Now on this header or on this footer

172
00:14:50,290 --> 00:14:51,400
here to be precise,

173
00:14:51,700 --> 00:14:56,980
I want to have more than just the title though, there also should be buttons to favorite this or to add

174
00:14:56,980 --> 00:14:58,530
it to the cart.

175
00:14:58,660 --> 00:15:06,010
So in the footer here, we can also add a leading argument to define a widget that should be placed at

176
00:15:06,010 --> 00:15:07,920
the start of this bar.

177
00:15:07,930 --> 00:15:10,440
Now the title is always in the center,

178
00:15:10,450 --> 00:15:18,580
we can also add items here on the left and on the right to it. So here with leading, I want to add an

179
00:15:18,580 --> 00:15:24,030
IconButton here because it should be pressable and it should only display an icon, hence it's an IconButton

180
00:15:24,490 --> 00:15:34,750
and the icon I'll use here is is an icon widget and there, I want to use icons.favorite

181
00:15:37,000 --> 00:15:44,590
and also add onPressed and set this to an empty or to a function that does nothing at the moment.

182
00:15:44,590 --> 00:15:48,490
With this, we add this heart icon here on the left which is quite nice,

183
00:15:48,670 --> 00:15:57,120
let's now also add an icon on the right here with trailing still on the GridTileBar and there, another icon

184
00:15:57,160 --> 00:16:06,960
button where the icon is an icon widget where we can use the shopping cart icon and then also add onPressed

185
00:16:06,960 --> 00:16:11,560
on the icon button which for now is a function that does nothing

186
00:16:11,660 --> 00:16:17,510
and if you save that, you see also the card icon here. Now with that, it's taking shape,

187
00:16:17,510 --> 00:16:22,050
let's next worry about our theme and some styling for this application.
