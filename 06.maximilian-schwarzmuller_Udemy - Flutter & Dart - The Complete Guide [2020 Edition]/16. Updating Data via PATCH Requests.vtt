WEBVTT
1
00:00:02.250 --> 00:00:06.170
So now we're able to load data, we are able to add data,

2
00:00:06.210 --> 00:00:11.240
what about editing and about deleting? If I added this and I hit save here,

3
00:00:11.280 --> 00:00:12.720
I of course update this

4
00:00:12.720 --> 00:00:20.190
but right now I only update this locally in memory here in my items list in that product class but I'm

5
00:00:20.190 --> 00:00:22.230
not saving the update to a server.

6
00:00:22.620 --> 00:00:27.510
So that's of course the next thing I want to do though because it's not that useful if we only update

7
00:00:27.510 --> 00:00:29.040
here in memory.

8
00:00:29.040 --> 00:00:35.970
So in the update product method, besides updating locally, it would now be nice to also store that data

9
00:00:36.000 --> 00:00:43.710
on a server and for that here, if we're in this if block here and therefore we know that we found a product,

10
00:00:44.020 --> 00:00:50.250
I now also want to send a request, an HTTP request. I'll turn this into an async method again and therefore

11
00:00:50.250 --> 00:00:54.550
this will yield a future that eventually yields nothing

12
00:00:55.800 --> 00:01:00.720
and now in there, again time for a request. I want to update a product,

13
00:01:00.720 --> 00:01:04.020
so let's take that URL but we'll have to tweak that

14
00:01:04.020 --> 00:01:07.500
URL now because this URL targets all products,

15
00:01:07.500 --> 00:01:11.400
now I want to target a specific product. The way Firebase works,

16
00:01:11.490 --> 00:01:17.280
you can simply add another segment here to that URL after products and basically dive deeper into

17
00:01:17.280 --> 00:01:19.340
that folder structure which you see here.

18
00:01:19.440 --> 00:01:23.140
So we don't want to target products but a specific ID,

19
00:01:23.220 --> 00:01:27.530
so here that URL becomes products and then that specific ID.

20
00:01:27.630 --> 00:01:29.620
The ID is something I get here as an argument,

21
00:01:29.670 --> 00:01:34.420
so we can use the string interpolation to simply dynamically inject that ID here.

22
00:01:34.470 --> 00:01:40.380
Now since that's dynamic and not constant at compilation time, we can't use const here anymore though,

23
00:01:40.590 --> 00:01:47.650
we have to use final because this will only be final at runtime. So with that, that's the URL I want to target

24
00:01:47.890 --> 00:01:54.430
and now we can use the HTTP library and send a patch request. Firebase supports patch requests and sending

25
00:01:54.430 --> 00:02:00.190
a patch request will tell Firebase to merge the data which is incoming with the existing data at that

26
00:02:00.250 --> 00:02:05.980
address you're sending it to. Now the address is that URL but now you also need to add a body again

27
00:02:06.010 --> 00:02:11.560
because of course a patch request needs to carry some data, the data you want to merge with the existing

28
00:02:11.560 --> 00:02:20.270
data and that body of course should again be your JSON data where you encode a map and that map should

29
00:02:20.360 --> 00:02:30.740
now basically reflect my product here. So here, I want to send the title and therefore, I access 

30
00:02:31.280 --> 00:02:32.880
newProduct.title.

31
00:02:33.110 --> 00:02:40.050
I also want to send the description and therefore I access newProduct.description,

32
00:02:40.050 --> 00:02:46.340
I also want to send the imageUrl and therefore, I access newProduct.imageUrl

33
00:02:46.350 --> 00:02:49.200
and of course, also send the price.

34
00:02:49.200 --> 00:02:53.070
Now obviously, make sure that the keys you're using here on the left,

35
00:02:53.070 --> 00:02:58.380
so the title, description and so on, match the keys you're currently using on Firebase because as I said, Firebase

36
00:02:58.380 --> 00:03:03.690
will then try to merge this with the existing data and data you have here which is not part of your

37
00:03:03.690 --> 00:03:08.910
existing data will get added here but Firebase will by the way not drop anything that is here which

38
00:03:08.910 --> 00:03:09.840
you're not sending.

39
00:03:09.840 --> 00:03:15.090
So it'll keep all the data you have on the server but it will add any new data it detects here and for

40
00:03:15.090 --> 00:03:18.670
data which it already has, it will override the data it has.

41
00:03:18.690 --> 00:03:25.140
So if we send this for example, it will send these four fields, merge them with the existing values but

42
00:03:25.200 --> 00:03:30.840
isFavorite which we don't send here will be kept, it will not be overriden and that's great of

43
00:03:30.840 --> 00:03:37.530
course because otherwise we would always reset our isFavorite status on our server and that's certainly

44
00:03:37.530 --> 00:03:38.740
not something I want.

45
00:03:38.910 --> 00:03:43.860
I only want to merge these fields with the existing data and don't override the other data which we

46
00:03:43.860 --> 00:03:49.050
stored there earlier because only these four fields could have changed when update product is called.

47
00:03:50.010 --> 00:03:55.680
So this sends the patch request, I want to wait for this and just as before, you could add try catch

48
00:03:55.680 --> 00:04:01.470
here or later in the place in a widget where we call this, where we call update product if you want to

49
00:04:01.470 --> 00:04:06.620
add error handling, to keep this course module a bit shorter, I'll not do it here.

50
00:04:06.810 --> 00:04:12.990
So we're sending the patch request, we get back a response but I don't really care about that response,

51
00:04:13.140 --> 00:04:18.240
doesn't carry any information and we wouldn't need any information anyways

52
00:04:18.240 --> 00:04:23.960
and therefore, the only thing which I do here is once we're done, I go ahead and update my product here,

53
00:04:24.030 --> 00:04:31.640
so I update the product here in my local memory. So let's give that a try,

54
00:04:31.640 --> 00:04:37.970
let's save this, go back here, refresh and start editing the shirt

55
00:04:37.970 --> 00:04:38.280
maybe.

56
00:04:42.340 --> 00:04:46.600
I added an exclamation mark after the title, hit save and we're done

57
00:04:46.600 --> 00:04:51.730
but you see here on the list, it took a short amount of time until the exclamation mark appeared there.

58
00:04:51.880 --> 00:04:56.240
The reason for that is that in edit product screen,

59
00:04:56.370 --> 00:05:01.440
we are of course calling update product but I'm not waiting for this to finish before I then

60
00:05:01.830 --> 00:05:09.060
change the loading state and pop. So indeed here, since this now returns a future, we should also

61
00:05:09.060 --> 00:05:16.460
await this and only thereafter, do our loading update and pop the screen and you can of course also

62
00:05:16.460 --> 00:05:22.710
wrap this into try catch here if you for example want to show an error dialog here as well. But now with

63
00:05:22.710 --> 00:05:30.490
that, since I await here and I also await here and I also await for my error handling logic,

64
00:05:30.490 --> 00:05:36.760
we can also take that set state navigator pop thing and move it out of this if else block here

65
00:05:36.850 --> 00:05:42.670
and after the if else block, so here to the end of this overall method which gets triggered when

66
00:05:42.670 --> 00:05:49.510
we save the form, we can also get rid of that finally block here and I'll just comment it out so that

67
00:05:49.510 --> 00:05:54.790
it's still there for you to reference it because now this code down there after the if else block will

68
00:05:54.790 --> 00:06:01.470
only run once either that or that or that is done because we always await this.

69
00:06:01.480 --> 00:06:06.180
So now we have a setup that should wait for edits as well and hence

70
00:06:06.190 --> 00:06:10.600
now if I refresh, because of the hot reload, the data was lost here,

71
00:06:10.660 --> 00:06:17.560
if I added this again and I change the price here and I then save this, now we see the spinner and we

72
00:06:17.560 --> 00:06:22.810
only dismiss this once we're really done updating this and then we see our updated data here and we

73
00:06:22.810 --> 00:06:25.200
also see that updated data here of course,

74
00:06:25.200 --> 00:06:26.290
here's the new price,

75
00:06:26.320 --> 00:06:28.030
here's the new title.

76
00:06:28.030 --> 00:06:30.570
So that is now all working and with that,

77
00:06:30.580 --> 00:06:32.390
we're also updating our data,

78
00:06:32.470 --> 00:06:33.610
what about deleting?
