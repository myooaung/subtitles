WEBVTT
1
00:00:02.310 --> 00:00:07.950
In the last lecture, I introduce mixins and it's important to understand what mixins really are and

2
00:00:07.950 --> 00:00:12.910
what the difference to classes or to extending a class is.

3
00:00:12.930 --> 00:00:14.350
So here I'm back in DartPad

4
00:00:14.370 --> 00:00:17.480
but of course, the same code could be run in the Flutter app.

5
00:00:17.520 --> 00:00:23.070
Let's start simple, let's create a new class, a Person class and that's what we did before in DartPad

6
00:00:23.110 --> 00:00:26.250
and we created classes all the time here in this course

7
00:00:26.250 --> 00:00:28.410
thus far. I'll keep this simple,

8
00:00:28.410 --> 00:00:34.380
it will have a name property and an age property and then we might have a constructor which allows us to

9
00:00:34.380 --> 00:00:37.690
assign values to the name and the age properties.

10
00:00:37.680 --> 00:00:44.130
Now it's of course no surprise that we can create a new person here with the help of that person constructor

11
00:00:44.160 --> 00:00:47.870
by passing values for these arguments

12
00:00:47.970 --> 00:00:56.860
and then here if we print pers.name and we run this code and I also fixed this error of having a colon

13
00:00:56.870 --> 00:01:00.300
here where we should have a semicolon, we get Max here.

14
00:01:00.320 --> 00:01:03.700
So that's nothing too new, that's a class.

15
00:01:03.710 --> 00:01:08.810
Now you also learned that classes can extend other things.

16
00:01:08.840 --> 00:01:16.360
So for example, we could have a class, mammal which in the end has a method let's say, which doesn't return

17
00:01:16.380 --> 00:01:20.790
anything, which is named breathe and there we just print

18
00:01:20.790 --> 00:01:31.050
breathe in, breathe out, something like that. Now unsurprisingly, this person can extend mammal, that's also what

19
00:01:31.050 --> 00:01:33.150
you learned, extending classes,

20
00:01:33.210 --> 00:01:35.040
a concept called inheritance,

21
00:01:35.040 --> 00:01:41.220
that's a core thing of object oriented programming languages and therefore Dart has this too. The consequence

22
00:01:41.250 --> 00:01:44.870
of Person extending mammal is that on the person here,

23
00:01:45.030 --> 00:01:47.810
we can now also call breathe

24
00:01:48.660 --> 00:01:51.090
and in addition to that, pers,

25
00:01:51.120 --> 00:01:53.670
so this variable now has two types.

26
00:01:53.670 --> 00:01:57.070
It is of type person but it's also of type mammal.

27
00:01:57.090 --> 00:02:03.090
So if we had some other place in this application that wants an argument which is of type mammal, we

28
00:02:03.090 --> 00:02:09.060
could pass in pers as well because since it's of type Person which extends mammal, it's automatically

29
00:02:09.060 --> 00:02:10.890
also of type mammal.

30
00:02:10.950 --> 00:02:15.750
So let's run this code here and of course, we see breathe in, breathe out. So that's working because of

31
00:02:15.750 --> 00:02:16.810
inheritance.

32
00:02:16.860 --> 00:02:23.430
Now the core idea behind inheritance is that this class, the person class gets all the properties and methods

33
00:02:23.430 --> 00:02:24.970
of the Mammal class,

34
00:02:24.990 --> 00:02:32.400
you can also override methods there with @Override and then by simply defining the same method

35
00:02:32.400 --> 00:02:32.760
here,

36
00:02:32.770 --> 00:02:34.290
breathe, like this,

37
00:02:34.380 --> 00:02:36.420
that would be possible

38
00:02:36.420 --> 00:02:38.490
and you've got the same type.

39
00:02:38.520 --> 00:02:44.400
Now another important thing you have to understand when using extends and inheritance is that you really

40
00:02:44.490 --> 00:02:49.200
are also saying that there should be a strong connection between this class and this class

41
00:02:49.350 --> 00:02:51.690
from a logical point of view.

42
00:02:51.690 --> 00:02:58.320
So technically, you're just getting all the properties and all the methods but logically, there also should

43
00:02:58.320 --> 00:02:59.660
be a strong connection,

44
00:02:59.670 --> 00:03:05.260
so you inherit if you would say that in real life, there would be a connection as well.

45
00:03:05.280 --> 00:03:11.940
Now let's have a look at a mixin. You create a mixin with the mixin keyword and thus far, we haven't

46
00:03:11.940 --> 00:03:15.410
created one manually, we're just using one provided by Flutter

47
00:03:15.480 --> 00:03:21.100
but here we can create one and we could name this agility or anything like that.

48
00:03:21.910 --> 00:03:29.900
Well let's say there we have a method, sit down where we just print sitting down. Now in the mixin, we

49
00:03:29.900 --> 00:03:31.150
could also have properties,

50
00:03:31.160 --> 00:03:33.230
it's like a class when it comes to that,

51
00:03:33.260 --> 00:03:39.710
so we could always have a speed property of 10 and we can now use such a mixin on this class here with

52
00:03:39.710 --> 00:03:48.170
the with keyword and there, we can use agility and with that, we can for example print person speed because

53
00:03:48.170 --> 00:03:54.440
the mixin has a speed property and by adding a mixin to a class, you get all the properties and methods

54
00:03:54.530 --> 00:03:56.830
of that mixin in your class.

55
00:03:56.870 --> 00:04:04.470
So person now has the speed property and it also is able to call sit down.

56
00:04:04.490 --> 00:04:10.030
So if I run this, we see 10, that's the speed and sitting down.

57
00:04:10.070 --> 00:04:16.100
So what's the difference between using extends and with then, other than that we use mixin here?

58
00:04:16.100 --> 00:04:23.300
The idea behind a mixin is that you can share methods and properties with multiple classes but logically,

59
00:04:23.390 --> 00:04:25.820
you have less of a strong connection.

60
00:04:26.240 --> 00:04:32.630
A person extends mammal because a person is a mammal, logically in real life we have a strong connection

61
00:04:32.630 --> 00:04:33.220
here.

62
00:04:33.230 --> 00:04:40.190
Agility is something which could provide utility methods for moving something, for sitting, for doing

63
00:04:40.220 --> 00:04:43.200
all kinds of things which are considered agile,

64
00:04:43.310 --> 00:04:49.010
we could add that to anything, we could add it to a person, we could add it to a dog, we could add that

65
00:04:49.010 --> 00:04:54.190
to an object, we could add that to the boxes or to containers

66
00:04:54.440 --> 00:05:00.470
if we're building an application that has such things. So anything that can move could have agility but

67
00:05:00.470 --> 00:05:03.360
Mammal would really only belong to a person.

68
00:05:03.500 --> 00:05:08.810
So the logical relation between that is much stronger than between person and agility. Agility is more

69
00:05:08.810 --> 00:05:15.970
like a utility function provider which we can use to mix certain features into this class

70
00:05:15.980 --> 00:05:19.040
and that's essentially also what we did in the previous lecture.

71
00:05:19.130 --> 00:05:24.620
There, we added with ChangeNotifier to add the utility methods

72
00:05:24.620 --> 00:05:29.150
this gives us, the notifyListeners method mainly, to an existing class.

73
00:05:29.180 --> 00:05:31.090
Other than that, there is no strong relation,

74
00:05:31.090 --> 00:05:36.710
we just want that utility method in the end. Another important difference is that with inheritance, you can

75
00:05:36.830 --> 00:05:42.170
always only inherit from one object, from one class.

76
00:05:42.170 --> 00:05:49.670
So person can extend mammal but we would not be able to extend both mammal and another class, that

77
00:05:49.670 --> 00:05:51.040
does not work.

78
00:05:51.050 --> 00:05:54.340
Some programming languages support multiple parents,

79
00:05:54.350 --> 00:06:00.890
Dart is not one of them, you can only have one parent class. With mixins however, you can add as many

80
00:06:00.890 --> 00:06:07.340
mixins as you want. So you can add multiple mixins to the same class and all their properties and

81
00:06:07.400 --> 00:06:10.320
methods will be merged together in the class.

82
00:06:10.400 --> 00:06:17.420
So really think of mixins as utility functionality providers whereas when you use inheritance, you really

83
00:06:17.420 --> 00:06:21.170
have a strong logical dependency between the two classes.
