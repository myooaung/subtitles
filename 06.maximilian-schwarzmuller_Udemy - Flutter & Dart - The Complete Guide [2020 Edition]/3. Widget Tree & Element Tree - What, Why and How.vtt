WEBVTT
1
00:00:02.180 --> 00:00:06.770
It's important to understand that Flutter indeed does not just have the widget tree which I mentioned

2
00:00:06.860 --> 00:00:12.290
over and over again already but that it has a second and even a third tree,

3
00:00:12.290 --> 00:00:17.360
the element tree and another tree. So the widget tree is what you already learned about

4
00:00:17.360 --> 00:00:23.570
but as I just mentioned, there also is an element tree and there even is a third tree, render tree.

5
00:00:23.570 --> 00:00:29.990
Now you with your code, you control the widget tree, the other two trees are controlled internally by

6
00:00:29.990 --> 00:00:36.020
Flutter but they are based on your widget tree. The widget tree which you're creating with your code

7
00:00:36.020 --> 00:00:42.410
and which is built by Flutter by calling the build method is essentially just a bunch of configuration

8
00:00:42.450 --> 00:00:43.860
Flutter takes into account,

9
00:00:44.030 --> 00:00:47.650
it's not directly output on the screen or anything like that,

10
00:00:47.660 --> 00:00:52.220
instead it simply describes to Flutter what should be output on the screen.

11
00:00:52.250 --> 00:00:59.420
So it's just a bunch of configuration settings you could say. The element tree then is important because

12
00:00:59.420 --> 00:01:05.990
the element tree is created by Flutter automatically based on your widget tree and it links your widgets

13
00:01:06.230 --> 00:01:09.080
to the actual rendered objects.

14
00:01:09.080 --> 00:01:15.300
Now where the widget tree is constantly changing basically whenever you call set state for example,

15
00:01:15.350 --> 00:01:21.410
so whenever the build methods get executed, Flutter rebuilds that widget tree, whilst that happens relatively

16
00:01:21.410 --> 00:01:28.790
often, the element tree is managed differently and does not rebuild with every call to the build method

17
00:01:28.790 --> 00:01:35.330
and it links the widgets, the configuration you set up with the actually rendered elements which are

18
00:01:35.330 --> 00:01:41.690
part of the render tree. So the render tree in the end you could say is the representation of what

19
00:01:41.690 --> 00:01:45.220
really ends up on the screen, what you see on the screen

20
00:01:45.290 --> 00:01:47.820
and that also is rarely rebuilt.

21
00:01:47.820 --> 00:01:50.820
Now let's have a more concrete example.

22
00:01:50.870 --> 00:01:51.950
This is our widget tree,

23
00:01:51.950 --> 00:01:56.420
we have a container and in the container, we have a column and in there, we have a stateless and a stateful

24
00:01:56.420 --> 00:02:02.420
custom widget which of course in turn then have other Flutter widgets in them, like text widgets

25
00:02:02.420 --> 00:02:03.530
and so on.

26
00:02:03.590 --> 00:02:09.130
Now for every widget you have in the widget tree, Flutter automatically creates an element.

27
00:02:09.290 --> 00:02:11.990
It does so when it first encounters that widget,

28
00:02:12.140 --> 00:02:17.340
so for example when the app starts or if you have an if condition and some condition is now true

29
00:02:17.420 --> 00:02:22.030
and that means that now a new widget should be rendered which hasn't been rendered before.

30
00:02:22.070 --> 00:02:28.310
Whenever Flutter encounters a widget for which it has no element yet, it creates an element. So an element

31
00:02:28.310 --> 00:02:30.490
in the end is just an object

32
00:02:30.500 --> 00:02:36.380
you could say managed in memory by Flutter which holds a reference at its widget. The element itself

33
00:02:36.410 --> 00:02:42.510
has no internal configuration, it really just points at the widget which then holds the configuration.

34
00:02:42.830 --> 00:02:47.900
So if you have a container with let's say a background color, the container element would indeed just

35
00:02:47.900 --> 00:02:54.320
be a relatively empty box pointing at the widget which then holds the information about the background

36
00:02:54.320 --> 00:02:55.790
color and so on.

37
00:02:55.820 --> 00:03:03.070
Now such elements get created for all widgets. Now important for stateful widgets,

38
00:03:03.210 --> 00:03:10.310
there you had this create state method, you remember? Like here in new transaction. In the widget itself

39
00:03:10.340 --> 00:03:15.740
which extends stateful widget, you had the create state method which in the end is called by Flutter

40
00:03:15.770 --> 00:03:21.190
to create a new state object based on your state class down there.

41
00:03:21.200 --> 00:03:28.960
This split into two classes, we'll soon make more sense because when Flutter encounters a stateful widget,

42
00:03:29.050 --> 00:03:35.470
it also creates an element but then it also calls the create state method and creates a state object

43
00:03:35.500 --> 00:03:42.160
as well which is also connected to the element and it indirectly therefore is of course related to your

44
00:03:42.160 --> 00:03:42.970
widget.

45
00:03:42.970 --> 00:03:47.950
The important thing here really is however that the element has a reference at the widget which holds

46
00:03:47.980 --> 00:03:54.490
all the configuration for that element and then it also holds a reference to the state object which

47
00:03:54.490 --> 00:04:00.010
is an independent object, not part of the widget or anything like that but an independent object managed

48
00:04:00.100 --> 00:04:01.730
in memory.

49
00:04:01.780 --> 00:04:06.790
So these are the elements but if they're just basically empty boxes pointing at a widget, what is their

50
00:04:06.790 --> 00:04:07.550
role?

51
00:04:07.780 --> 00:04:09.870
Well they're not just pointing at a widget,

52
00:04:10.090 --> 00:04:16.580
they also point at the rendered box, at the rendered object you see on the screen.

53
00:04:16.810 --> 00:04:22.450
Now whenever Flutter encounters an element which hasn't been rendered to the screen you could say, it

54
00:04:22.480 --> 00:04:28.090
does render it to the screen and it does so by looking at the widget at which this element also points

55
00:04:28.240 --> 00:04:33.430
which holds all the information you need for painting it to the screen, like a background color, a border

56
00:04:33.520 --> 00:04:39.100
the size, such things. Flutter then paints that box to the screen,

57
00:04:39.580 --> 00:04:44.900
if you want to go really deep into the details here, there actually are multiples steps involved here.

58
00:04:44.920 --> 00:04:50.860
It has the layouting phase where it derives the available space, the dimensions and how that should be sized

59
00:04:51.220 --> 00:04:57.760
and then it also has a phase where it basically sets up listeners to tap events and so on but we can

60
00:04:57.760 --> 00:05:02.290
ignore this here. For simplification, let's simply assume that an element which hasn't been rendered

61
00:05:02.290 --> 00:05:04.620
to the screen yet is rendered to the screen.

62
00:05:04.780 --> 00:05:11.680
So the element then has a pointer at the element on the screen, so at the object on the screen and at the

63
00:05:11.680 --> 00:05:18.820
widget which holds the configuration and of course every element has a rendered equivalent, which kind

64
00:05:18.820 --> 00:05:24.830
of ends up on the screen. You can see that if you go back to your code when you open up the Dart

65
00:05:24.890 --> 00:05:25.540
DevTools,

66
00:05:25.570 --> 00:05:32.100
I showed this earlier in the debugging section. In the Dart DevTools, you can see your widget tree

67
00:05:32.100 --> 00:05:37.860
here on the left and there of course, we see all the widgets we use but the interesting thing is for

68
00:05:37.860 --> 00:05:43.650
example if you click on a container here, you'll see that a container internally also uses a 

69
00:05:43.650 --> 00:05:44.410
ConstrainedBox

70
00:05:44.490 --> 00:05:48.810
and then here, you see that render object for that ConstrainedBox.

71
00:05:48.810 --> 00:05:56.610
So that kind of is what ends up on the screen or what Flutter uses internally to know what to render

72
00:05:56.610 --> 00:05:57.440
on the screen,

73
00:05:57.480 --> 00:06:03.450
so what to hand off to the rendering engine which is then the core of Flutter and of Dart which

74
00:06:03.450 --> 00:06:05.360
actually paints pixels on the screen

75
00:06:05.370 --> 00:06:09.270
and that's now way to advanced, we'll not focus on how that happens technically

76
00:06:09.420 --> 00:06:14.760
but this is what Flutter does in the end. It renders content on the screen and it bases that content should

77
00:06:14.760 --> 00:06:20.640
be rendered on your widgets and the elements are the middleman which connect your widgets which hold

78
00:06:20.640 --> 00:06:24.510
the configuration and the parts that end up on the screen.

79
00:06:24.730 --> 00:06:26.050
Now that's of course all good

80
00:06:26.060 --> 00:06:35.260
but what does this mean for the build method? The build method is called by Flutter whenever your state

81
00:06:35.260 --> 00:06:36.040
changes.

82
00:06:36.190 --> 00:06:40.630
There are basically two important triggers that can lead to a rebuild,

83
00:06:40.630 --> 00:06:46.540
one is when you call set state, like here in the main.dart file when we delete a transaction. Calling set

84
00:06:46.540 --> 00:06:52.030
state automatically leads to build being called, to be very precise,

85
00:06:52.030 --> 00:06:58.450
what's happening is that calling set state marks this widget and therefore the element that belongs

86
00:06:58.450 --> 00:07:06.790
to the widget as dirty, so as something changed here and for the next refresh, which for 60 frames per

87
00:07:06.790 --> 00:07:12.340
second happens every 60 milliseconds, 1000 milliseconds divided by 60,

88
00:07:12.430 --> 00:07:19.300
so for the next refresh, Flutter will then take the new configuration as created by build into account

89
00:07:19.330 --> 00:07:26.050
and update the screen. So set state leads to a screen update and what it basically does is it triggers

90
00:07:26.050 --> 00:07:27.490
the build method.

91
00:07:27.490 --> 00:07:34.060
Now when the build method execute, this code simply gets executed like any other Dart code would get

92
00:07:34.060 --> 00:07:40.780
executed and that of course means that if you use other widgets here, which you typically do, like the Cupertino

93
00:07:40.780 --> 00:07:47.590
navigation bar here or the appBar here or then down here, a row, these things here,

94
00:07:47.590 --> 00:07:54.580
these calls in the end all of course are widgets but most importantly, these are all classes, column here

95
00:07:54.700 --> 00:07:58.500
is a Dart class and we're instantiating it here.

96
00:07:58.600 --> 00:08:04.330
You absolutely have to remember when working with widgets and all that stuff that in the end, I of course

97
00:08:04.360 --> 00:08:10.510
always call this a widget because it is a widget but it's also always a Dart class and that means we

98
00:08:10.510 --> 00:08:17.380
can instantiate it like any other Dart class, just as we instantiate a transaction based on our transaction

99
00:08:17.380 --> 00:08:18.400
class earlier,

100
00:08:18.510 --> 00:08:23.760
up here, there I called transaction using the constructor of the transaction class.

101
00:08:23.980 --> 00:08:29.470
We're doing the exact same thing down there in the build method for container and column and so on.

102
00:08:29.470 --> 00:08:35.250
Now since the build method runs again, of course new instances of all these classes are created.

103
00:08:35.350 --> 00:08:42.700
So a new widget tree is basically created here with new instances of all these widget classes and that

104
00:08:42.700 --> 00:08:44.800
is not a mistake or an error,

105
00:08:44.800 --> 00:08:51.010
this is actually how it should be because widgets, the widget tree itself is immutable,

106
00:08:51.010 --> 00:08:55.050
that means you can't change the property of an existing widget,

107
00:08:55.060 --> 00:09:00.670
you can't say this container should now have a background color of white by simply editing the property

108
00:09:00.670 --> 00:09:01.900
of the container.

109
00:09:01.900 --> 00:09:05.200
Instead, you can simply override the container,

110
00:09:05.200 --> 00:09:09.720
this part of the widget tree, with a brand new container which has the new configuration

111
00:09:09.850 --> 00:09:16.030
and this is enforced by Flutter because it can more efficiently detect changes when an object changes,

112
00:09:16.030 --> 00:09:21.610
so when you have a brand new object which has a new address in memory than when you change a property

113
00:09:21.610 --> 00:09:25.330
on an existing object which has the old address in memory.

114
00:09:25.330 --> 00:09:28.270
So this is simply a pattern enforced by Flutter.

115
00:09:28.270 --> 00:09:31.580
Before we dive deeper into that though, here's one other important note.

116
00:09:31.690 --> 00:09:35.020
I mentioned that set state of course calls build,

117
00:09:35.080 --> 00:09:40.960
the same is true if you use something like media query of or theme of and you even see that here if

118
00:09:40.960 --> 00:09:45.790
you hover over media query, you'll see that querying the current media query will cause your widget

119
00:09:45.790 --> 00:09:49.450
to rebuild automatically whenever the MediaQueryData changes.

120
00:09:49.450 --> 00:09:55.840
So for example when you rotate the device, the MediaQueryData changes because orientation is information

121
00:09:55.840 --> 00:10:01.600
stored in the MediaQueryData and therefore, rotating your device automatically also triggers build

122
00:10:01.600 --> 00:10:02.590
to run.

123
00:10:02.590 --> 00:10:08.800
The same is true if the soft keyboard appears because you might remember in new transaction, that there,

124
00:10:09.100 --> 00:10:15.550
we refer to the viewInsets.bottom setting here that tells us how much space is occupied by the

125
00:10:15.550 --> 00:10:16.870
soft keyboard.

126
00:10:16.900 --> 00:10:22.450
So therefore, since this is also part of the MediaQueryData, whenever the soft keyboard appears, any

127
00:10:22.450 --> 00:10:27.130
widget that refers to media query will automatically get rebuilt.

128
00:10:27.180 --> 00:10:32.530
That's the idea here and that all triggers build. So that already was a lot of talking,

129
00:10:32.610 --> 00:10:38.940
we now know when build runs and we know that when build executes, the widget tree or this part of the

130
00:10:38.940 --> 00:10:41.250
widget tree is recreated.

131
00:10:41.280 --> 00:10:42.930
Let's now dig deeper into that.
