1
00:00:02,390 --> 00:00:08,720
If we inspect the post method, we don't just get more information about it and see which arguments we

2
00:00:08,720 --> 00:00:09,530
can set

3
00:00:09,530 --> 00:00:17,270
but we also see that in the end returns a future and I had a look at these future objects before in

4
00:00:17,270 --> 00:00:18,330
this course already.

5
00:00:18,440 --> 00:00:25,730
Future is a core class built into Dart which builds an object which generally is a normal object but

6
00:00:25,730 --> 00:00:32,750
which gives us a method, the then method, that allows us to wait for a certain action to finish or actually,

7
00:00:33,050 --> 00:00:38,090
it doesn't allow us to wait for that, it doesn't pause our entire app until this is done,

8
00:00:38,090 --> 00:00:42,490
instead it allows us to define a function that should execute in the future,

9
00:00:42,680 --> 00:00:45,790
hence the name, once this action is done.

10
00:00:46,010 --> 00:00:48,470
So here for this post method, by default

11
00:00:48,470 --> 00:00:51,290
the next line of code after HTTP post,

12
00:00:51,290 --> 00:00:58,220
so here this is where we create the product, will execute immediately after Dart execute this without waiting

13
00:00:58,550 --> 00:01:00,100
for the response to arrive here.

14
00:01:00,110 --> 00:01:04,880
So Dart treats this as done as soon as it sent the request off,

15
00:01:04,880 --> 00:01:10,010
it does not wait for the response, it immediately continues to the next line and that's good,

16
00:01:10,010 --> 00:01:15,680
otherwise our application would be frozen until the response is there, which for Firebase doesn't take

17
00:01:15,680 --> 00:01:19,910
long because it's super fast but other service might be slower

18
00:01:19,910 --> 00:01:25,030
or imagine you have no internet connection or a slow internet connection, then it might take even longer

19
00:01:25,040 --> 00:01:33,620
even if you have a fast server. So therefore here, we can add or call a method though on the result of

20
00:01:33,620 --> 00:01:41,840
post which is this future object and that's the then method and then takes a function which it will

21
00:01:41,840 --> 00:01:43,630
execute once,

22
00:01:43,730 --> 00:01:48,130
in this case, here we have a response and that's different for every future, every future

23
00:01:48,200 --> 00:01:53,230
you can build your own futures too, decides when it should treat itself as done

24
00:01:53,240 --> 00:01:56,020
so to say, so when it should trigger this function.

25
00:01:56,240 --> 00:02:02,170
The future returned by post treats itself as done and triggers the function once the response is there

26
00:02:02,180 --> 00:02:05,650
and conveniently, it gives us the response,

27
00:02:05,660 --> 00:02:11,070
that's what this indicates here, as an input to the function we pass to then.

28
00:02:11,120 --> 00:02:17,540
So here inside of then, we actually have to pass in a function which receives the response.

29
00:02:17,540 --> 00:02:25,320
So here we get the response and now inside of this function, we can work with that response.

30
00:02:25,350 --> 00:02:31,560
So not in the next line after post because that will execute immediately but only inside of the function

31
00:02:31,560 --> 00:02:35,660
we would pass to then because this function will not execute immediately,

32
00:02:35,670 --> 00:02:39,270
instead it's registered by Dart and it's executed

33
00:02:39,360 --> 00:02:46,860
when this is done. It's a bit like registering a function for onPressed where we also simply define

34
00:02:46,860 --> 00:02:52,700
a function, either with a pointer at one of our functions or by adding an anonymous function which implicitly

35
00:02:52,720 --> 00:02:58,350
also then just passes a pointer to onPressed which will be executed when the user presses something.

36
00:02:58,350 --> 00:02:59,370
It's the same here,

37
00:02:59,520 --> 00:03:04,890
we define a function and we could have a named function here too at which we then point, without parentheses

38
00:03:04,890 --> 00:03:10,030
to not execute it immediately, which will only execute once the operation is done.

39
00:03:10,210 --> 00:03:20,150
Here, I'm using an anonymous function and now if we execute this logic here inside of this function, now

40
00:03:20,150 --> 00:03:30,820
this will only run once the response is there and not immediately and we can see that effect if we go

41
00:03:30,820 --> 00:03:39,750
back and we add this again, should be long enough so that we don't get a validation error

42
00:03:40,020 --> 00:03:44,070
and now let me add that image here again, save that

43
00:03:44,070 --> 00:03:51,260
and now you see, it took a short while, fraction of a second, for this to appear, it wasn't instantly there.

44
00:03:51,390 --> 00:03:56,220
If you would have stored it in memory and done this outside of this then block, then it would have been there

45
00:03:56,400 --> 00:04:00,960
instantly because that line would've been executed right after the request was sent off.

46
00:04:00,960 --> 00:04:06,170
It only took so long because we waited for the response, which is the case because we're executing this

47
00:04:06,210 --> 00:04:08,340
inside of this then block.

48
00:04:08,450 --> 00:04:14,250
Now the advantage of this is that we can now use data from the response and it turns out that Firebase

49
00:04:14,250 --> 00:04:19,120
here actually sends us a response which contains this cryptic key,

50
00:04:19,170 --> 00:04:24,480
this unique ID which this actually is which it automatically creates for us and that's awesome because

51
00:04:24,510 --> 00:04:31,800
then we get a really unique ID out of the box generated by Firebase and often of course, you'll work

52
00:04:31,800 --> 00:04:37,350
with back-ends, with servers that generate IDs for you because you can do that much better on a server.

53
00:04:39,070 --> 00:04:41,220
To see what's inside of the response,

54
00:04:41,260 --> 00:04:47,040
we can simply print it here. Let's print the response and see what we get here.

55
00:04:47,050 --> 00:04:55,400
If we now save this and we add this one more time, we can later clear this on Firebase of course to get rid

56
00:04:55,400 --> 00:04:56,960
of all our dummy data

57
00:04:56,960 --> 00:05:03,640
but if we add this one more time, we see we get back an instance of response and to see what's in there,

58
00:05:03,640 --> 00:05:10,680
let's use json.decode response.body because response is an object

59
00:05:10,750 --> 00:05:12,720
and just like the request has a body,

60
00:05:12,760 --> 00:05:16,430
so some data we attach to it, a response also has a body.

61
00:05:16,430 --> 00:05:22,870
That is in JSON format and with json.decode, we can convert this from JSON into some data we can

62
00:05:22,870 --> 00:05:24,270
work with in Dart

63
00:05:24,280 --> 00:05:26,840
and typically, this will convert it into a map.

64
00:05:26,860 --> 00:05:35,150
So now if we save this one more time with this little addition here, if we create one more, just to test,

65
00:05:35,660 --> 00:05:42,970
and again I'll use my image here and save this, then we actually see this is what we get back,

66
00:05:42,980 --> 00:05:44,830
that's the converted map already.

67
00:05:44,900 --> 00:05:46,580
It's a map with a name key

68
00:05:46,910 --> 00:05:52,580
and on that name key, we have that cryptic unique ID which Firebase automatically generates.

69
00:05:52,580 --> 00:05:58,460
So since we wait for the creation and storage of our product until this is done, we can now take advantage

70
00:05:58,460 --> 00:06:04,310
of this and not generate our dummy ID here but instead take the ID we're getting here, so we can

71
00:06:04,310 --> 00:06:09,080
simply execute this code here to decode our response body,

72
00:06:09,080 --> 00:06:15,230
then we know this is a map with a name key, so we can then access name like this to get that ID and the

73
00:06:15,230 --> 00:06:20,520
advantage is that we now work with that ID which we also have on the server here in our front-end

74
00:06:20,590 --> 00:06:25,190
and that's what you generally want to do because if you then ever need to send a delete request to the

75
00:06:25,190 --> 00:06:30,200
back-end or something like that, you will need the ID on the server to identify this item,

76
00:06:30,200 --> 00:06:30,490
right

77
00:06:30,500 --> 00:06:35,480
because the server only knows its own IDs. So if you use the same ID in your app, you never have

78
00:06:35,480 --> 00:06:41,510
the problem of having to match the back-end ID with your front-end ID, simply take the back-end ID

79
00:06:41,510 --> 00:06:44,460
everywhere and you have no problems and that's what we do here.

80
00:06:44,570 --> 00:06:46,030
If we create a new product,

81
00:06:46,100 --> 00:06:47,330
now on the front-end,

82
00:06:47,390 --> 00:06:54,470
so in our Flutter app, add it to our local list of products, use the database ID for that creation

83
00:06:54,560 --> 00:07:00,170
and then on the front-end, we work with a perfect copy of what we have on the back-end,

84
00:07:00,190 --> 00:07:01,910
that's the idea here.

85
00:07:01,960 --> 00:07:06,540
And with that, we're sending requests and we're waiting for that response to return.

86
00:07:06,610 --> 00:07:14,050
Now obviously, it's a bit of a strange user experience that when we add something here, that we then have

87
00:07:14,050 --> 00:07:18,880
to wait for a short moment until this appears here in the list,

88
00:07:18,880 --> 00:07:20,490
this is a bit strange.

89
00:07:20,650 --> 00:07:28,390
It would be better if we would see some loading spinner here until we are done, so that we only go

90
00:07:28,390 --> 00:07:29,200
back here

91
00:07:29,260 --> 00:07:33,340
once this has been added and we have all the latest data again.
