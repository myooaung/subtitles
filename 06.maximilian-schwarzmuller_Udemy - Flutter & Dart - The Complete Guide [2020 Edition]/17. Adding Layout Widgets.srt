1
00:00:02,250 --> 00:00:09,550
To have a text and below the text, a couple of buttons, we now need an invisible, a layout widget

2
00:00:09,630 --> 00:00:16,530
and there we can use the column widget. Column, as the name suggests, is there to render widgets in a column

3
00:00:16,530 --> 00:00:23,850
because the difference to text and so on is that this has a children named argument which actually takes

4
00:00:23,880 --> 00:00:25,980
a list of widgets.

5
00:00:26,020 --> 00:00:27,710
Now there are a couple of new things,

6
00:00:27,840 --> 00:00:34,140
this thing here between the angled brackets, that's new and the square brackets here are also new.

7
00:00:34,140 --> 00:00:35,070
What does this all mean?

8
00:00:35,790 --> 00:00:38,360
Let's start with the square brackets, Dart

9
00:00:38,370 --> 00:00:43,020
like many other programming languages, has the concept of lists.

10
00:00:43,020 --> 00:00:48,460
Thus far we learned about strings, about integers, doubles and objects and everything is an object in the end.

11
00:00:48,970 --> 00:00:52,050
Now lists are another type of data,

12
00:00:52,050 --> 00:00:54,760
a list is basically a group of data,

13
00:00:54,780 --> 00:01:01,590
so you can have a list of strings, for example here we could add a variable, questions and that could now

14
00:01:01,590 --> 00:01:09,870
be a list of text, the list of text questions, like what is your favorite color. By the way, if you would

15
00:01:09,870 --> 00:01:17,090
want to write what's here and you use single quotes to enclose the string, then this single quote would

16
00:01:17,090 --> 00:01:23,090
quit the string which is an error and you can escape this by adding a backwards slash in front of

17
00:01:23,090 --> 00:01:23,820
this.

18
00:01:23,840 --> 00:01:32,240
Now what happens is that this single quote here is not treated as a quote that ends string but instead

19
00:01:32,330 --> 00:01:36,440
as the quote character that should be part of this string,

20
00:01:36,650 --> 00:01:40,360
so that backward slash in front of it achieves that.

21
00:01:40,370 --> 00:01:42,770
So now we would have a question, what's your favorite color

22
00:01:42,950 --> 00:01:43,790
and also

23
00:01:46,130 --> 00:01:46,880
what's

24
00:01:51,300 --> 00:01:57,630
your favorite animal for example. Let's also add a trailing comma here

25
00:01:58,590 --> 00:02:03,770
and now questions actually would be a list of string data.

26
00:02:03,780 --> 00:02:10,740
Now the idea behind lists is simply that we can group related data together because in so many scenarios

27
00:02:10,860 --> 00:02:17,520
of programming but also in real life actually, you work with lists of data. You have, on your phone, on your

28
00:02:17,520 --> 00:02:18,270
real phone

29
00:02:18,270 --> 00:02:22,550
if we take a real life example, you have a list of contacts, your friends,

30
00:02:22,560 --> 00:02:29,150
that's a list of persons, a list of people and therefore lists are also something that exists in programming.

31
00:02:29,160 --> 00:02:31,890
and basically in any programming language you can find

32
00:02:31,890 --> 00:02:36,440
and of course also in Dart therefore. Lists are created with square brackets,

33
00:02:36,450 --> 00:02:37,710
that's also what I did up here,

34
00:02:37,860 --> 00:02:43,890
I created it with square brackets and therefore, lists are also created down there where we have

35
00:02:43,890 --> 00:02:47,560
a list of widgets and that's the angled bracket widget thing.

36
00:02:47,580 --> 00:02:53,130
This is a so-called generic type and so a little annotation, which we could also drop here because of

37
00:02:53,130 --> 00:02:54,810
type inference,

38
00:02:54,810 --> 00:03:01,050
this tells Dart that this list here will hold a list of widgets because a list can of course hold

39
00:03:01,080 --> 00:03:02,040
anything.

40
00:03:02,040 --> 00:03:04,050
This for example is a list of strings,

41
00:03:04,050 --> 00:03:10,680
if I hover over questions, we see that Dart was able to automatically infer this list and then again

42
00:03:10,710 --> 00:03:15,780
this angled bracket thing but here with string. A generic type is basically an annotation which you

43
00:03:15,780 --> 00:03:23,970
can have on some types that allow Dart to understand that this is not just a list but a list of a specific

44
00:03:23,970 --> 00:03:24,560
data type

45
00:03:24,560 --> 00:03:27,110
here for example and it's the same thing down there,

46
00:03:27,120 --> 00:03:32,700
this is a list of widgets. Now because of type inference, we can remove that as soon as we start adding

47
00:03:32,700 --> 00:03:34,170
widgets here and there,

48
00:03:34,170 --> 00:03:41,070
I would want to have my text widget with the question and I'll add some real text soon and below

49
00:03:41,070 --> 00:03:42,840
that, a couple of buttons.

50
00:03:42,840 --> 00:03:45,660
Now there are different kinds of buttons in Flutter,

51
00:03:45,660 --> 00:03:52,030
one of them is the RaisedButton which is a button with a background color and the little hover effect.

52
00:03:52,050 --> 00:03:57,450
Now the RaisedButton here is again a widget which we create by instantiating our class here

53
00:03:57,630 --> 00:04:02,940
and it typically has a child, which is basically the content inside of the button, that could be

54
00:04:03,150 --> 00:04:06,850
an image, that could be an icon but often, it's also just some text,

55
00:04:06,930 --> 00:04:12,530
so the text which is displayed on the button. Again, this is a widget, not just some string,

56
00:04:12,540 --> 00:04:14,490
the child here is a widget instead

57
00:04:14,760 --> 00:04:23,510
and therefore here, we could have answer 1 and then I can copy that line and add it again

58
00:04:23,580 --> 00:04:31,890
so that we also have answer 2 and maybe also answer 3. Now each button, besides having a child

59
00:04:31,950 --> 00:04:40,700
also needs an onPressed argument and onPressed will be a function that should be executed when

60
00:04:40,730 --> 00:04:47,360
this button is pressed. For the moment, since we haven't really learned how to wire that up, let's

61
00:04:47,360 --> 00:04:52,930
add null here. Null is a special value in Dart, it basically means nothing,

62
00:04:52,970 --> 00:04:55,850
the difference to void is that void is a type,

63
00:04:56,060 --> 00:05:01,970
so here we say the type of data main returns is empty, is nothing and null is not a type but a concrete

64
00:05:01,970 --> 00:05:04,160
value, just like one is a value,

65
00:05:04,160 --> 00:05:10,700
the number one or like this here is a value, null is a value which says nothing but we need to add that

66
00:05:10,700 --> 00:05:12,220
to avoid errors.

67
00:05:12,230 --> 00:05:19,330
So here, I add onPressed to all my buttons and for all buttons, I then add null. And with that, again I hit my

68
00:05:19,330 --> 00:05:26,610
code formatting shortcut so that this gets formatted in a bit of a nicer way. And again, if we add trailing

69
00:05:26,610 --> 00:05:32,490
commas like here, after null in my first button, then this gets formatted in a bit of a more readable

70
00:05:32,490 --> 00:05:33,580
way.

71
00:05:33,630 --> 00:05:39,030
So now I added my column widget, which has a couple of child widgets where we have the text widget and

72
00:05:39,030 --> 00:05:44,910
then the RaisedButton and if we save that, now we see our text up here and then we see the three buttons

73
00:05:45,090 --> 00:05:52,110
and they are currently all disabled because onPressed is null and that means if we press this button

74
00:05:52,110 --> 00:05:57,390
right now, nothing happens and Flutter automatically detects this and then disables the button, which

75
00:05:57,390 --> 00:06:02,940
sometimes can be nice if you have a user input form where you gather the email address and the password

76
00:06:02,940 --> 00:06:08,210
of the user, then you would want to disable the button as long as nothing valid has been entered, here

77
00:06:08,220 --> 00:06:14,580
however of course, I want to enable them. And for that, we have to understand how we wire up the button

78
00:06:14,580 --> 00:06:21,150
here to some function that does something or how we make sure that something happens when the buttons

79
00:06:21,150 --> 00:06:22,320
is tapped.

80
00:06:22,440 --> 00:06:27,900
Of course, we can also improve the styling and how this is laid out here on the screen but we'll

81
00:06:27,900 --> 00:06:29,430
do this in a second step,

82
00:06:29,430 --> 00:06:35,790
for now it was important to understand how we can have more than one widget next to each other with

83
00:06:35,790 --> 00:06:39,610
the help of column for ordering widgets from top to bottom.

84
00:06:39,750 --> 00:06:45,090
If we would want to have them sit next to each other left to right, you would have used row instead

85
00:06:45,090 --> 00:06:49,740
but we'll see column and row and all these other invisible and visible widgets throughout the course.
