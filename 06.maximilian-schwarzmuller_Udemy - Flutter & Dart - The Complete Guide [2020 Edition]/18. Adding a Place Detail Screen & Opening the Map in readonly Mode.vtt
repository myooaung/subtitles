WEBVTT
1
00:00:02.810 --> 00:00:08.620
We're able to work with our places, with our images, storing it in the database and fetching it from there,

2
00:00:08.630 --> 00:00:14.090
let's now make sure we also can view that on the place detail screen and also open the map there

3
00:00:14.120 --> 00:00:14.890
in preview mode.

4
00:00:15.880 --> 00:00:20.710
The place detail screen here can be a normal stateless widget because there, we won't need to change

5
00:00:20.740 --> 00:00:21.870
anything,

6
00:00:21.910 --> 00:00:26.860
give it a name of place detail screen to stay in line with the naming we used thus far in the course,

7
00:00:27.520 --> 00:00:34.210
import the material.dart package here and then of course as always, since this is a standalone

8
00:00:34.360 --> 00:00:38.490
page, add a scaffold widget. Now in there,

9
00:00:38.500 --> 00:00:46.150
I'll add an appBar with a title where we could output the text, the name of the selected place and

10
00:00:46.210 --> 00:00:48.200
there are different ways of loading this of course.

11
00:00:48.220 --> 00:00:55.460
I will use an approach I showed you earlier in the navigation section, I expect to get the data, the

12
00:00:55.470 --> 00:00:58.450
ID of the place as our argument here.

13
00:00:58.450 --> 00:01:04.600
So I want to get my ID with ModalRoute.of and that's the pattern I showed you in the navigation

14
00:01:04.600 --> 00:01:11.320
course section where you can tap into the settings of the routing action that loaded this page and

15
00:01:11.320 --> 00:01:12.910
get your arguments from there

16
00:01:12.940 --> 00:01:17.040
and I simply expect the ID to be my only argument there

17
00:01:17.320 --> 00:01:25.210
and then we can use the provider package to fetch a place by ID. So let's import the provider.dart

18
00:01:25.210 --> 00:01:34.540
file and let's also import our providers/great_places.dart file, so that here below the ID, we can

19
00:01:34.540 --> 00:01:47.430
actually get the selected place with the help of provider of great places for our context and I'll set

20
00:01:47.520 --> 00:01:50.940
listen: false because this page won't need to update,

21
00:01:50.940 --> 00:01:54.800
there is no way our places can change whilst we are on the page

22
00:01:55.110 --> 00:01:57.900
and then right now we can only get all items

23
00:01:57.900 --> 00:02:01.280
but now I want a specific item with a specific ID.

24
00:02:01.530 --> 00:02:06.540
Now we could fetch all items and do the filtering in here but you learned that it's a good idea to

25
00:02:06.600 --> 00:02:10.100
outsource logic and get it out of your widgets.

26
00:02:10.200 --> 00:02:15.180
So I want to add a new method to the great places class here, up here

27
00:02:15.460 --> 00:02:22.630
and that should return me a single place and I'll name it find by ID, it will take an ID as an argument

28
00:02:22.630 --> 00:02:26.230
and should then unsurprisingly return a single place.

29
00:02:26.290 --> 00:02:29.370
So here, I want to return 

30
00:02:29.410 --> 00:02:30.010
_items.firstWhere

31
00:02:30.010 --> 00:02:35.000
which will give me the first item where a certain condition is met and that condition is checked with this

32
00:02:35.000 --> 00:02:37.210
function which we pass to firstWhere

33
00:02:37.330 --> 00:02:39.280
which will execute on every place

34
00:02:39.310 --> 00:02:45.430
here on your items and it will get that place as an input and return true if the place ID is equal

35
00:02:45.430 --> 00:02:47.330
to the ID we're getting here.

36
00:02:47.350 --> 00:02:54.030
So with that, we're identifying a single place in our list of items here and with that identified in

37
00:02:54.030 --> 00:03:01.470
the place detail, here we can call find by ID and forward that ID which we are retrieving from our

38
00:03:01.680 --> 00:03:03.230
route,

39
00:03:03.240 --> 00:03:10.880
so now here, we can use selectedPlace.title to output that. Now besides the title in the appBar,

40
00:03:10.880 --> 00:03:18.470
of course we want to have a body and in there, I want to display the image and then the address and a button which

41
00:03:18.530 --> 00:03:21.260
allows us to view the place on a map.

42
00:03:21.290 --> 00:03:30.700
So I'll add a column here and the children in that column should be a container which will wrap the image. So

43
00:03:30.730 --> 00:03:36.700
I'll give that a height of let's say 250, a width of double infinity to take the full

44
00:03:36.700 --> 00:03:43.450
width of the screen and then in there, a child which will take the image with a file provider because

45
00:03:43.450 --> 00:03:45.900
we still have the image stored locally on our device,

46
00:03:45.910 --> 00:03:53.050
so we'll need that and then we take selectedPlace.image which is a file because in our place

47
00:03:53.140 --> 00:03:57.360
class, we work with a file, so we get a file right there

48
00:03:58.780 --> 00:04:07.270
and on that image, I want to set the fit to BoxFit.cover and then also the width to double infinity

49
00:04:07.330 --> 00:04:15.090
of course, to take the full container width for that image. So that's the container, below that we can

50
00:04:15.090 --> 00:04:21.690
add a SizedBox with a height of 10 to add some spacing and then have a text widget to output the human

51
00:04:21.690 --> 00:04:23.220
readable address.

52
00:04:23.340 --> 00:04:30.150
So there, we can output selectedPlace.location.address which is that address, align that in

53
00:04:30.150 --> 00:04:32.760
the center with textAlign.center

54
00:04:32.760 --> 00:04:38.940
if you want to and maybe adjust the style a little bit, give it a text style where we set the font size

55
00:04:38.940 --> 00:04:44.610
to 20 and give it a grey color, like this

56
00:04:44.760 --> 00:04:49.080
and of course you can style this however you want or prefer to.

57
00:04:49.200 --> 00:04:55.590
Then I'll add another SizedBox to have more spacing of 10 because below that, I want to have a flat

58
00:04:55.590 --> 00:05:02.760
button which allows us to open the map, the fullscreen map to view the selectedPlace. So this will

59
00:05:02.760 --> 00:05:10.690
have a child which is a text widget which could say view on map, so view the place on the map

60
00:05:10.690 --> 00:05:20.300
basically and besides that, I'll set a text color based on my theme and there on the primary color

61
00:05:21.140 --> 00:05:25.370
and onPressed, now the map screen should open up again.

62
00:05:25.760 --> 00:05:31.000
Now for the map screen to open up, I need to import it here,

63
00:05:31.130 --> 00:05:39.520
so let's import map_screen.dart from the same folder as we're in and with that import added down there,

64
00:05:39.550 --> 00:05:40.770
in onPressed,

65
00:05:40.800 --> 00:05:50.590
I'll add a function where I use navigator of context, so of context push and again, I'll create this here

66
00:05:50.650 --> 00:05:59.050
on the fly with the MaterialPageRoute which gets a builder, gets a context and should return my map

67
00:05:59.050 --> 00:06:00.130
screen widget here.

68
00:06:02.660 --> 00:06:06.600
My return is on the fly because I need to pass some data to the map screen,

69
00:06:06.740 --> 00:06:16.100
I want to pass in an initial location which is my selectedPlace.location because in the map screen,

70
00:06:16.520 --> 00:06:25.250
my initial location is of type place location and that's exactly what I'm passing in and I also want

71
00:06:25.250 --> 00:06:33.380
to pass in isSelecting and set this to false, though actually, that of course is our default here,

72
00:06:33.380 --> 00:06:38.150
so we don't really need to pass this in, I'm doing it here to be really clear but you wouldn't need to

73
00:06:38.150 --> 00:06:38.850
do that.

74
00:06:40.570 --> 00:06:42.190
Now again on the MaterialPageRoute,

75
00:06:42.200 --> 00:06:47.350
I'll set full screen dialog to true to change the appearance of that page a little bit

76
00:06:48.880 --> 00:06:52.950
and with that, we should be able to view that and later also to close it.

77
00:06:53.020 --> 00:07:01.660
Now to reach that place detail screen however, I'll give this my static const routeName

78
00:07:01.690 --> 00:07:08.000
/place-detail so that we can register the place detail screen in the main.dart file in the routes table.

79
00:07:08.170 --> 00:07:09.090
So there,

80
00:07:09.090 --> 00:07:14.130
let's add an import pointing at the screens folder and there at the 

81
00:07:14.140 --> 00:07:16.610
place_detail_screen.dart file

82
00:07:16.840 --> 00:07:23.350
and with that import added here, we can go down to the routes table and add PlaceDetailScreen.routeName

83
00:07:23.350 --> 00:07:24.720
as a key

84
00:07:24.820 --> 00:07:30.160
and then here we have that builder function which gets a context and creates a new place detail screen.

85
00:07:31.980 --> 00:07:32.430
Now

86
00:07:32.430 --> 00:07:38.580
last but not least, we need to hook up this onTap method in the place list screen on the ListTile

87
00:07:38.670 --> 00:07:39.570
to load that.

88
00:07:40.350 --> 00:07:48.840
So here, we can use navigator of context push and push that place detail screen and for that, we need

89
00:07:48.840 --> 00:07:50.480
to import it here as well.

90
00:07:50.670 --> 00:07:57.640
So import the place_detail_screen.dart file in the place_list_screen.dart file and with that import added,

91
00:07:57.640 --> 00:08:03.730
down there, we of course want to push a named route first of all and then we use 

92
00:08:03.730 --> 00:08:12.150
PlaceDetailScreen.routeName and now we also need to provide arguments or one argument and that's the ID of

93
00:08:12.150 --> 00:08:12.900
the place.

94
00:08:12.900 --> 00:08:19.640
So the great places items for the given index.id, that's what we need to forward to the place detail

95
00:08:19.650 --> 00:08:28.140
screen because that's what we're trying to retrieve there with this line and now let's do a full restart

96
00:08:28.140 --> 00:08:32.490
and let's see whether that works, whether we're able to view that or not.

97
00:08:32.550 --> 00:08:36.060
So let's wait for that to reload and visit another place here,

98
00:08:36.060 --> 00:08:36.780
here we are,

99
00:08:36.840 --> 00:08:38.100
that's looking good.

100
00:08:38.130 --> 00:08:39.450
If I click view on map,

101
00:08:42.000 --> 00:08:46.580
this opens up, shows me the map but doesn't add a marker and

102
00:08:46.620 --> 00:08:52.560
so that's the one thing I'd like to have here in the map screen, I want to have a marker whenever a location

103
00:08:52.560 --> 00:08:53.910
is chosen.

104
00:08:53.940 --> 00:08:58.170
Right now, when we have no picked location, I show no markers.

105
00:08:58.170 --> 00:09:01.000
Actually I want to show no markers

106
00:09:01.020 --> 00:09:11.220
only if we have no picked location and widget.isSelecting is true. So if this here is false, if

107
00:09:11.220 --> 00:09:15.800
we're not selecting, then I want to show a marker and the marker here should be picked location.

108
00:09:15.800 --> 00:09:21.380
However if picked location is null and that's what we can check with the double question mark

109
00:09:21.390 --> 00:09:26.040
operator, then I want to fallback to widget initial location.

110
00:09:29.430 --> 00:09:37.220
However since we need a latlng thing here, we should create one on the fly here and that simply expects

111
00:09:37.220 --> 00:09:41.220
to get the latitude as a first argument and longitude as a second,

112
00:09:41.240 --> 00:09:48.020
so here I would then pass in widget initial location latitude and second argument, widget initial location

113
00:09:48.190 --> 00:09:49.440
longitude.

114
00:09:49.790 --> 00:09:55.730
So with that, we're creating such a location for the marker on the fly if picked location is null, which

115
00:09:55.730 --> 00:09:57.760
it would be if we're not selecting

116
00:09:57.800 --> 00:10:00.640
but then we would fallback to the initial location.

117
00:10:00.830 --> 00:10:02.180
So let's give that a try and

118
00:10:02.180 --> 00:10:06.890
let's do a full restart now and visit this place again,

119
00:10:06.890 --> 00:10:11.890
view it on the map and that's looking good.

120
00:10:11.900 --> 00:10:17.850
Now let's add another place, so click on the plus here,

121
00:10:18.010 --> 00:10:21.480
a third place where I of course want to take a picture,

122
00:10:21.490 --> 00:10:26.150
so let's open up the camera, take that picture here

123
00:10:32.700 --> 00:10:35.930
and select another place on the map.

124
00:10:39.340 --> 00:10:44.780
Now here since I'm in selecting mode, I have no marker added initially which is just as it should be

125
00:10:44.840 --> 00:10:48.530
and now let me go a little bit further to the left here,

126
00:10:48.700 --> 00:10:51.270
maybe choose this here,

127
00:10:51.310 --> 00:10:55.520
then click confirm, that's looking good,

128
00:10:55.590 --> 00:10:58.890
click add place and here the place is

129
00:10:58.920 --> 00:11:02.460
and now if I click on that and view it on the map, we should hopefully see the marker.

130
00:11:02.470 --> 00:11:05.980
there, here it is.

131
00:11:05.980 --> 00:11:07.840
So that's all looking good,

132
00:11:08.020 --> 00:11:12.730
by the way on the emulator, it's always a bit slower simply because this is quite heavy for the emulator,

133
00:11:12.730 --> 00:11:15.590
it will run smoothly on a real device.

134
00:11:15.640 --> 00:11:20.950
So this is now all working fine and of course, you can now continue working on this app to add more features

135
00:11:20.950 --> 00:11:24.880
you learned about earlier, like pull to refresh or anything like that

136
00:11:25.060 --> 00:11:30.940
but for now, we added all these core native device features I wanted to introduce you to in this module.
