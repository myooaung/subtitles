1
00:00:02,310 --> 00:00:04,540
So we're fetching products here on our shop page

2
00:00:04,990 --> 00:00:07,060
and what about managed products now?

3
00:00:07,060 --> 00:00:12,550
The good thing is, in this app, we technically can't really get to manage products without having been

4
00:00:12,550 --> 00:00:18,760
to the shop page first. Since we fetch our products here and we then store them in items in our products

5
00:00:18,910 --> 00:00:20,440
class here,

6
00:00:20,440 --> 00:00:25,810
when we reach managed products which uses the same items, we are guaranteed to have products.

7
00:00:25,870 --> 00:00:30,040
So we don't really need to fetch products when we reach this page, though of course theoretically you

8
00:00:30,040 --> 00:00:32,590
could do that, here on the user products page,

9
00:00:32,650 --> 00:00:34,920
you could turn this into a stateful widget as well

10
00:00:34,990 --> 00:00:41,290
and then also use didChangeDependencies here or the initState hack to load products here as well

11
00:00:41,350 --> 00:00:43,060
but as I said, I don't need that here

12
00:00:43,300 --> 00:00:46,930
but there is one other thing which we could add here.

13
00:00:46,930 --> 00:00:52,420
It would be nice to have a pull to refresh logic here where we can pull the screen down to fetch the

14
00:00:52,420 --> 00:00:59,650
latest set of products or the latest values from the web and such a pull to refresh pattern is relatively

15
00:00:59,740 --> 00:01:06,340
easy to implement in Flutter. All you have to do is you have to go to the widget where you want to have

16
00:01:06,340 --> 00:01:07,360
that pattern,

17
00:01:07,360 --> 00:01:09,670
then to your body there in the scaffold

18
00:01:09,670 --> 00:01:15,460
and then here in this case around the padding, you wrap this with a new widget and that new widget here

19
00:01:15,610 --> 00:01:22,420
is a refresh indicator, another widget that's built into Flutter. The refresh indicator takes a child

20
00:01:22,480 --> 00:01:27,980
around which you wrap it and then you need to define an onRefresh function.

21
00:01:28,000 --> 00:01:33,200
So this takes a function, a function which gets no arguments but which has to return a future

22
00:01:33,220 --> 00:01:34,390
and that's important

23
00:01:34,390 --> 00:01:41,050
and this function has to return a future, so that the refresh indicator widget knows when you're done

24
00:01:41,050 --> 00:01:46,000
fetching data because it will show a spinner automatically in the meantime and it needs to know when to

25
00:01:46,000 --> 00:01:47,560
dismiss this.

26
00:01:47,560 --> 00:01:53,290
So here, you can either use a named function and point at that and actually I'll do that or use an anonymous

27
00:01:53,290 --> 00:01:54,020
function

28
00:01:54,160 --> 00:01:59,340
but here I'll use a named function which has to return a future which yields nothing in the end,

29
00:01:59,380 --> 00:02:05,290
that's important and I'll turn this into a private function which is only available inside of this class

30
00:02:05,890 --> 00:02:12,280
and I'll name this refresh products, the name is totally up to you of course

31
00:02:12,280 --> 00:02:18,840
and in there, you now have to return a future. Now that can be done by turning it into an async function,

32
00:02:18,860 --> 00:02:21,120
then you learned this will always return a future

33
00:02:21,200 --> 00:02:25,070
but of course I want to return a meaningful future that really does something for that

34
00:02:25,070 --> 00:02:32,500
and for that, we can use provider for which you need to have the provider package imported, of and then connect

35
00:02:32,500 --> 00:02:38,260
it to products of context and then also called fetch and set products of course.

36
00:02:38,260 --> 00:02:44,480
Now to have the context here, since I'm not in a state class here, I don't have it available everywhere,

37
00:02:44,500 --> 00:02:51,100
so here I need to now get this as an input, as an argument here in the refresh product.

38
00:02:51,100 --> 00:02:56,830
So now here, I can call fetch and set products and then we simply await for this to finish and therefore

39
00:02:56,830 --> 00:03:00,610
this overall method will only be done once this is done

40
00:03:00,610 --> 00:03:07,160
and only then this future which is automatically returned will yield, will resolve

41
00:03:07,230 --> 00:03:09,970
and with that we're fetching our new product here.

42
00:03:09,990 --> 00:03:18,510
So now down there, we could now point at refresh, products was the name but actually, since I

43
00:03:18,510 --> 00:03:21,620
need my context there, I need to pass that in

44
00:03:21,750 --> 00:03:28,050
and therefore I will wrap this in an anonymous function which reference is now stored in onRefresh

45
00:03:28,050 --> 00:03:31,150
and inside of that anonymous function,

46
00:03:31,170 --> 00:03:38,130
I return a call to refresh products where I can now forward the context, the context I'm getting here

47
00:03:38,130 --> 00:03:42,420
in the build method automatically. That should already be everything.

48
00:03:42,420 --> 00:03:48,030
If I save this, here our products are lost because due to this hot reload, our state gets cleared

49
00:03:48,030 --> 00:03:52,980
but that's good actually because that allows me to demonstrate that fetching. Here I can now pull down

50
00:03:53,100 --> 00:03:55,470
and you see that indicator up here here

51
00:03:55,530 --> 00:04:01,530
and if you pull down long enough or far enough, you see that starts loading and as soon as the data is

52
00:04:01,530 --> 00:04:03,900
there, that spinner disappears.

53
00:04:03,900 --> 00:04:09,810
So that's the refresh indicator and that pull to refresh pattern which as we see is pretty easy to implement.
