WEBVTT
1
00:00:02.320 --> 00:00:07.920
We're almost done with the section, now I want to come back to something I mentioned earlier. In the transaction.

2
00:00:07.930 --> 00:00:09.400
item widget, in the

3
00:00:09.400 --> 00:00:10.620
transaction_item.dart file,

4
00:00:10.690 --> 00:00:14.670
we have this strange key thing and this strange syntax here

5
00:00:14.710 --> 00:00:16.870
after our constructor.

6
00:00:16.870 --> 00:00:18.590
What's this all about?

7
00:00:18.670 --> 00:00:25.960
Before I dive into this strange after the constructor syntax, let's understand what keys are. Every widget

8
00:00:25.960 --> 00:00:28.450
in Flutter can have a key.

9
00:00:28.630 --> 00:00:36.420
Now thus far, all the widgets we created manually don't accept a key argument here in their constructor

10
00:00:36.580 --> 00:00:38.390
and the reason for this is that

11
00:00:38.410 --> 00:00:45.100
most of your widgets don't need a key, especially stateless widgets, so you don't have to accept this

12
00:00:45.190 --> 00:00:46.330
argument.

13
00:00:46.330 --> 00:00:53.230
But there are certain scenarios where a key is a must have and I want to show you an example.

14
00:00:53.470 --> 00:00:59.200
Our transaction items here actually do accept a key but for now, we're not using it and I will show you

15
00:00:59.200 --> 00:01:00.360
how to use it in a second.

16
00:01:00.390 --> 00:01:06.550
So our transaction items here render these cards and these are the cards we're using here with our

17
00:01:06.550 --> 00:01:08.790
ListView.builder.

18
00:01:08.790 --> 00:01:15.240
Now let's say our transaction item would not be a stateless widget but a stateful widget, so I'll convert it 

19
00:01:15.240 --> 00:01:21.590
to a stateful widget with the help of the refactoring tool here and then here in the transaction item

20
00:01:21.590 --> 00:01:22.180
state,

21
00:01:22.280 --> 00:01:28.660
I'll use initState to set some dynamic data for this widget which is created,

22
00:01:28.660 --> 00:01:35.600
so for every list item separately, when this list item is added. Let's say we want to change the background

23
00:01:35.600 --> 00:01:44.410
color of our CircleAvatar and every new list item should get a random color there. For that here in

24
00:01:44.410 --> 00:01:45.260
initState,

25
00:01:45.400 --> 00:01:52.210
I'll create a new const, availableColors, const and not final because I'll reassign some values which

26
00:01:52.210 --> 00:02:00.820
will not change at runtime and there, the choices are colors red, colors black and maybe colors blue.

27
00:02:01.480 --> 00:02:03.910
So these are the three and maybe colors purple,

28
00:02:03.910 --> 00:02:07.810
these are the three colors I want to use as a background for the CircleAvatar,

29
00:02:07.810 --> 00:02:12.730
the four colors I want to use as a background for my CircleAvatar.

30
00:02:12.730 --> 00:02:20.440
Now in this state here, I'll of course add a new property of type color which is the chosen bg, background

31
00:02:20.500 --> 00:02:24.610
color and I want to assign this here in initState.

32
00:02:24.610 --> 00:02:32.680
So here I have set bgColor equal to available colors and now I want to select a random, that

33
00:02:32.680 --> 00:02:39.570
should be available and now I want to select a random element there.

34
00:02:39.640 --> 00:02:45.160
So not hardcode 0 or 1 but calculate a random index number.

35
00:02:45.190 --> 00:02:51.100
For that, we can use a package provided by Flutter, we can just add random here and then add an import

36
00:02:51.100 --> 00:02:53.230
here at the top, not Flutter Dart,

37
00:02:53.260 --> 00:03:00.430
excuse me, the dart:math package. So you add this at the very top because as I mentioned earlier, the convention

38
00:03:00.430 --> 00:03:05.980
is to first have your Dart imports, then your third-party package imports and then your custom file imports.

39
00:03:06.520 --> 00:03:08.290
So we add dart:math

40
00:03:08.290 --> 00:03:14.290
and that gives us a random class which we can instantiate and on that random object we then have, we

41
00:03:14.290 --> 00:03:20.340
can call next int to generate a new integer number and we enter the max number we want to generate

42
00:03:20.380 --> 00:03:22.120
and it always starts at 0.

43
00:03:22.540 --> 00:03:27.890
So here, the maximum is four and the maximum is excluded,

44
00:03:27.980 --> 00:03:35.090
so it will generate a number which is either 0, 1, 2 or 3 and that is then what we use as an integer

45
00:03:35.120 --> 00:03:36.740
to get a random color.

46
00:03:36.740 --> 00:03:40.190
So now every list item receives its new random color.

47
00:03:40.190 --> 00:03:47.510
Side note, you don't wrap background color here in initState into set state because initState

48
00:03:47.600 --> 00:03:50.390
is called before build is executed.

49
00:03:50.480 --> 00:03:55.880
So build will take into account any changes you made here and therefore, you shouldn't call set state in

50
00:03:55.880 --> 00:04:02.650
here but just update any properties just like this because build runs after that anyways.

51
00:04:03.200 --> 00:04:08.520
So here, I'm setting my background color and now every transaction receives a new background color.

52
00:04:08.570 --> 00:04:12.950
So now with the background color stored, we need to assign this in the CircleAvatar.

53
00:04:12.950 --> 00:04:16.040
There we can set background color to bgColor

54
00:04:16.040 --> 00:04:19.700
and now it will use our randomly generated background color.

55
00:04:19.700 --> 00:04:27.290
So let's save this and go back and let's add a couple of transactions now, like test, 11 which

56
00:04:27.290 --> 00:04:35.010
happened today let's say. Okay I generated a purple background color, Test2 with this amount

57
00:04:35.020 --> 00:04:43.500
here, happened maybe yesterday and I have a blue one and now watch what happens when I delete the first,

58
00:04:43.520 --> 00:04:49.430
the purple item. So I'm deleting Test with $11 and a purple background,

59
00:04:49.430 --> 00:04:55.000
so once I'm done deleting this, what we should see is Test2 with $22 and the blue background,

60
00:04:55.010 --> 00:04:58.230
right. The purple background should be gone because I'm deleting the whole element.

61
00:04:58.550 --> 00:05:05.350
If I click the trash bin here though, you see Test2 is kept and the value is correct but the

62
00:05:05.350 --> 00:05:09.210
background color is still the old one, it's still the purple one

63
00:05:09.220 --> 00:05:16.450
but Test2 had a blue background. So the one with the purple background should have been deleted and

64
00:05:16.450 --> 00:05:19.930
the one with the blue background should be the only remaining element.

65
00:05:19.960 --> 00:05:21.400
Now the data is correct,

66
00:05:21.400 --> 00:05:28.290
Test1 was deleted with an amount of $11 but somehow, we took the wrong list element,

67
00:05:28.300 --> 00:05:30.380
we took the wrong background color.

68
00:05:30.640 --> 00:05:32.350
So what's happening here?
