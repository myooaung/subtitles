1
00:00:02,300 --> 00:00:11,090
Now another problem we're facing in this app is here, our little modal here where we can enter text. On smaller

2
00:00:11,090 --> 00:00:13,190
screens and in landscape mode,

3
00:00:13,190 --> 00:00:19,050
we can't really type here and we constantly have to close the keyboard to get to the other inputs.

4
00:00:19,070 --> 00:00:24,620
Now thankfully, Flutter provides us with the tool to work around that issue and find out how much space

5
00:00:24,680 --> 00:00:31,280
is occupied by that soft keyboard and actually move that entire box up by that space, so that we can

6
00:00:31,280 --> 00:00:33,490
still type in there. For that,

7
00:00:33,500 --> 00:00:36,040
let's go to the new transaction widget here,

8
00:00:36,090 --> 00:00:43,910
the new transaction file and in that file, we can now add some padding to that container inside of our

9
00:00:43,910 --> 00:00:44,740
card here

10
00:00:44,840 --> 00:00:52,490
and actually we're already doing that but we can now change this to the only constructor of EdgeInsets

11
00:00:52,500 --> 00:01:00,650
so we can target each side individually because there, I want to assign a default padding of 10

12
00:01:00,650 --> 00:01:04,190
to all sides, left, top and right

13
00:01:04,340 --> 00:01:09,890
but for bottom which is where our keyboard appears, I actually want to be more flexible and that's why

14
00:01:09,890 --> 00:01:12,530
I need to control every side separately.

15
00:01:12,530 --> 00:01:19,280
There, we can again use our good old media query which gives us some information about our sizing

16
00:01:19,280 --> 00:01:23,030
and about our device in general as you've already learned by now

17
00:01:23,030 --> 00:01:29,900
and there, we can get access to the viewInsets property and that gives us information about anything

18
00:01:30,140 --> 00:01:32,290
that's lapping into our view

19
00:01:32,300 --> 00:01:40,840
and typically, that's the soft keyboard and then we get a bottom property which tells us how much space

20
00:01:40,840 --> 00:01:42,310
is occupied by that keyboard

21
00:01:42,340 --> 00:01:48,400
and I want to adjust the bottom padding of that card by that space plus my 10 which should always be

22
00:01:48,400 --> 00:01:55,260
there to lift upwards, to move up my entire input area.

23
00:01:55,270 --> 00:02:00,520
So with that, if I now tap in there, you see now we have that bottom overflow problem

24
00:02:00,520 --> 00:02:08,440
and that simply happens because that general modal sheet has the height it has. Now to work around that, we can

25
00:02:08,440 --> 00:02:17,480
simply wrap this entire card here into a SingeChildScrollView, so that if we are in that mode where

26
00:02:17,690 --> 00:02:26,230
we have some overlapping content and that should be a SingeChildScrollView, not overview, then we

27
00:02:26,230 --> 00:02:27,940
can simply scroll.

28
00:02:27,940 --> 00:02:34,360
So now if I tap in there, now we can scroll everything into view here and that's certainly better than

29
00:02:34,360 --> 00:02:38,140
the solution we had before where this was pretty unusable.

30
00:02:38,170 --> 00:02:44,590
Now you can actually go more fancy than that, the modal bottom sheet which we're using simply is restricted,

31
00:02:44,920 --> 00:02:49,870
at the moment at least, such that you can't change its height like this, otherwise it would be easy to

32
00:02:49,870 --> 00:02:55,630
simply ramp up its height and therefore avoid having to add that scrolling view which still might not

33
00:02:55,630 --> 00:03:02,800
be optimal and you can build more elaborate solutions if you basically replace that built-in modal bottom

34
00:03:02,800 --> 00:03:05,320
sheet with your own implementation

35
00:03:05,410 --> 00:03:13,000
and in case you're interested, you'll find a link to the code snippet of a custom built bottom

36
00:03:13,000 --> 00:03:18,640
sheet which has more set up options and which is a bit more flexible but this also is way more advanced

37
00:03:18,640 --> 00:03:22,640
than what we covered thus far which is for now, this solution will do

38
00:03:22,720 --> 00:03:28,810
and it shows you how you can work with a combination of SingeChildScrollView and the media query

39
00:03:29,080 --> 00:03:34,630
in conjunction with the information about how much space is taken up by the bottom keyboard to still

40
00:03:35,050 --> 00:03:40,660
move everything such that users can interact with your application and reach all the inputs.
