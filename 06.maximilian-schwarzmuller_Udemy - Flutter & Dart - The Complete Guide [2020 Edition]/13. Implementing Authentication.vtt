WEBVTT
1
00:00:02.330 --> 00:00:05.330
Es ist also Zeit, eine Firebase-Authentifizierung hinzuzufügen.

2
00:00:05.480 --> 00:00:11.600
Jetzt haben wir bereits ein Authentifizierungsmodul im Kurs, aber auch hier habe ich Ihnen die

3
00:00:11.600 --> 00:00:19.190
allgemeinere Methode gezeigt, um anzuzeigen, dass wir Firebase dort verwendet haben, aber nur als Dummy-Back, und wir haben

4
00:00:19.190 --> 00:00:27.380
die Firebase-REST-API verwendet, um eine reguläre H-TTP-Anfrage an zu senden Firebase und dann mussten wir zum Beispiel das Token verwalten,

5
00:00:27.620 --> 00:00:30.080
das den Benutzer selbst identifiziert.

6
00:00:30.080 --> 00:00:35.740
Wir mussten es manuell an ausgehende HDP-Anfragen anhängen, um seine Lebensdauer zu verwalten.

7
00:00:35.750 --> 00:00:40.370
Wir mussten das Token validieren, all das musste von uns getan werden.

8
00:00:40.400 --> 00:00:46.130
Jetzt habe ich diesen Ansatz verwendet, weil ich es sehr wichtig finde, dass Sie diese generische Vorgehensweise kennen,

9
00:00:46.130 --> 00:00:48.720
da Sie möglicherweise nicht immer Firebase verwenden.

10
00:00:48.740 --> 00:00:55.480
Möglicherweise arbeiten Sie mit einer REST-API, die eine solche Anmeldung oder einen solchen Anmeldeendpunkt verfügbar macht, und

11
00:00:55.490 --> 00:00:57.920
diese bieten wichtige Informationen an.

12
00:00:57.920 --> 00:01:04.580
Wenn Sie jedoch Firebase verwenden, können Sie das Leben einfacher gestalten, indem Sie einfach das

13
00:01:04.650 --> 00:01:12.350
Firebase-Authentifizierungs-SDK verwenden, ein zusätzliches Paket, das uns beim Erstellen von Benutzern mit der Anmeldung von Benutzern und vor allem

14
00:01:12.350 --> 00:01:15.100
bei der Verwaltung dieses Tokens hilft.

15
00:01:15.330 --> 00:01:23.130
Sie können nach Flatter Firebase Off suchen, um das Firebase Off-Paket zu finden, und Sie können einfach zu

16
00:01:23.130 --> 00:01:30.450
den Installationsanweisungen hier gehen, diese Abhängigkeit einpacken und zu unserer Pub SPECT Yemen-Datei zurückkehren und dort unter

17
00:01:30.450 --> 00:01:37.320
dem Cloud Fire Store hinzufügen. Jetzt wird es heruntergeladen und hinzugefügt Dieses Firebase-Off-Paket für das

18
00:01:37.350 --> 00:01:44.880
Flatter-Projekt und dieses Paket werden unser Leben jetzt viel einfacher machen, damit es funktioniert. Zunächst müssen wir

19
00:01:44.880 --> 00:01:51.810
zu unserem flacheren Projekt hier in der Webkonsole zurückkehren und dort und hier unter Authentifizierung zur

20
00:01:51.930 --> 00:01:53.330
Authentifizierung gehen.

21
00:01:53.460 --> 00:02:00.150
Klicken Sie auf Setup-Zeichen und -Methode, da wir dieses Firebase-Projekt konfigurieren müssen, um die Authentifizierung zu unterstützen, bevor

22
00:02:00.450 --> 00:02:03.860
wir die Authentifizierung in unserer App verwenden können.

23
00:02:04.020 --> 00:02:10.530
Klicken Sie also auf Setup-Zeichen und -Methode, und Sie haben zahlreiche Anmeldemethoden zur Auswahl aus den offiziellen

24
00:02:10.530 --> 00:02:12.910
Firebase-Dokumenten, die Ihnen dabei helfen.

25
00:02:12.960 --> 00:02:20.280
Ich werde mich für die traditionelle E-Mail-Passwort-Anmeldung entscheiden, also klicken und hier auf Tabelle setzen und die Standardeinstellungen so lassen, wie sie

26
00:02:20.280 --> 00:02:20.770
sind.

27
00:02:20.790 --> 00:02:22.900
Und klicken Sie auf sicher.

28
00:02:23.000 --> 00:02:31.090
Und wenn dies aktiviert ist, können wir zu unserer Bewerbung zurückkehren und hier in Form einer Abgabe einreichen.

29
00:02:31.100 --> 00:02:38.630
Ich möchte jetzt das Firebase-Authentifizierungspaket verwenden, das wir gerade hinzugefügt haben, um jemals einen neuen Benutzer zu erstellen oder einen Benutzer

30
00:02:38.630 --> 00:02:39.290
anzumelden.

31
00:02:39.950 --> 00:02:46.040
Daher können wir prüfen, ob die Anmeldung wahr ist. In diesem Fall möchten Sie einen Benutzer anmelden oder ob sie falsch

32
00:02:46.040 --> 00:02:49.620
ist. In diesem Fall möchten Sie jetzt einen neuen Benutzer erstellen.

33
00:02:49.770 --> 00:02:53.520
Dazu müssen wir zunächst dieses Paket importieren.

34
00:02:53.520 --> 00:03:06.170
Die Feuerbasis aus Paket und von dieser Feuerbasis aus Dodge Dart und dann Jahr auf dem gesamten Bildschirm.

35
00:03:06.170 --> 00:03:17.690
In der Zustandsklasse können wir eine neue endgültige Variable erstellen, die benennt, welche Feuerbasis der DOT-Instanz wie diese

36
00:03:18.320 --> 00:03:19.380
ist.

37
00:03:19.400 --> 00:03:26.020
Dadurch erhalten wir eine Instanz für das D-Firebase-Off-Objekt, die automatisch von einem Firebase-Off-Paket eingerichtet

38
00:03:26.060 --> 00:03:27.830
und verwaltet wird.

39
00:03:27.830 --> 00:03:29.880
Dafür müssen wir nichts tun.

40
00:03:29.900 --> 00:03:35.810
Aufgrund der Firebase-Konfiguration und der Verknüpfung, die wir zuvor in diesem Modul durchgeführt haben, wird

41
00:03:35.840 --> 00:03:38.040
alles hinter den Kulissen verwaltet.

42
00:03:38.110 --> 00:03:41.180
Jetzt bekommen wir dieses Objekt hier ab.

43
00:03:41.530 --> 00:03:51.160
Wir können dies jetzt hier verwenden. Indien ist angemeldet, um sich beispielsweise mit E-Mail und Passwort anzumelden, und dies sind

44
00:03:51.160 --> 00:03:52.750
die beiden Argumente.

45
00:03:52.750 --> 00:03:58.870
Überraschenderweise die E-Mail und das Passwort, damit wir diese beiden Werte weiterleiten können, diese beiden Variablen E-Mail

46
00:03:58.870 --> 00:04:01.270
und Passwort, die wir hier erhalten.

47
00:04:01.570 --> 00:04:10.570
Dies wird nun einen Benutzer anmelden oder es wird versuchen, dies jetzt zu tun. Melden Sie sich mit E-Mail an und

48
00:04:11.040 --> 00:04:19.200
das Passwort gibt tatsächlich eine Zukunft zurück. Hier können Sie erkennen, dass es eine Zukunft zurückgibt, die sich am

49
00:04:19.230 --> 00:04:22.050
Ende selbst für einen Angriff auspackt.

50
00:04:22.050 --> 00:04:29.010
Dafür werde ich hier eine neue Variable hinzufügen, die vom Typ des Ergebnisses sein wird, und ich werde alles für einen Angriff benennen,

51
00:04:30.490 --> 00:04:36.770
der einfach diese Zukunft hier hält und nur wichtig ist, wie ich gerade sagte, dass dies uns eine Zukunft gibt,

52
00:04:36.830 --> 00:04:39.000
die nicht direkt aus ist Ergebnis.

53
00:04:39.110 --> 00:04:46.490
Um das Off-Ergebnis zu erhalten, werde ich dies in eine asynchrone Funktion umwandeln, indem ich hier zwischen der Argumentliste und

54
00:04:46.490 --> 00:04:48.380
dem Funktionskörper asynchron hinzufüge.

55
00:04:48.380 --> 00:04:49.950
Und dann können wir hier warten.

56
00:04:50.030 --> 00:04:55.790
Und wie Sie alle im Kurs gelernt haben, wird dies im Grunde darauf warten,

57
00:04:55.800 --> 00:05:02.570
dass diese Zukunft abgeschlossen ist, und das Ergebnis dann in der Variablen off result speichern. Wir können hier

58
00:05:02.570 --> 00:05:10.130
im Ellis-Fall etwas Ähnliches tun. Melden Sie sich dort an, wo wir abrufen und Jetzt wird ein Benutzer mit E-Mail

59
00:05:10.130 --> 00:05:18.690
und Passwort erstellt, und wir übergeben weiterhin E-Mail und Passwort als Argumente für diese Funktion. Das ist also ziemlich einfach und nicht schwierig.

60
00:05:18.720 --> 00:05:24.300
Wir haben diese beiden Optionen, wir senden diese Anfragen und hinter den Kulissen wird

61
00:05:24.420 --> 00:05:31.550
Firebase die Anfrage senden und das Token automatisch speichern, wenn die Anfrage erfolgreich ist, und die Token-Lebensdauer für uns

62
00:05:31.590 --> 00:05:32.190
verwalten.

63
00:05:32.190 --> 00:05:34.340
Das ist alles erledigt.

64
00:05:34.620 --> 00:05:37.070
Für den Benutzernamen machen wir damit noch nichts.

65
00:05:37.090 --> 00:05:46.370
Wir werden dies bald tun und wir werden auch nichts mit dem Off-Ergebnis tun. Dies wird so bald zu einer Sache führen, die

66
00:05:46.370 --> 00:05:51.780
ich sofort tun möchte: Ich möchte eine Fehlerbehandlung hinzufügen, die hier fehlschlagen kann.

67
00:05:51.830 --> 00:05:59.210
Und wenn Sie async wait verwenden, können Sie try catch verwenden, um etwas auszuprobieren und möglicherweise Fehler abzufangen.

68
00:05:59.210 --> 00:06:04.550
Also werde ich das alles hier in einen Stammesblock wickeln und dann dort unten.

69
00:06:04.700 --> 00:06:08.180
Fangen Sie jeden Fehler ab, aber keinen Fehler.

70
00:06:08.180 --> 00:06:13.250
Ich möchte einen bestimmten Fehlertyp abfangen, und wir können dies mit dem Schlüsselwort on tun.

71
00:06:13.250 --> 00:06:20.900
Ich möchte alle Fehler vom Typ Plattformausnahme abfangen, die im Wesentlichen Fehler sein sollten, die

72
00:06:20.900 --> 00:06:29.810
von firebase ausgelöst werden, weil wir beispielsweise eine ungültige E-Mail oder ein ungültiges Passwort oder ähnliches eingegeben haben.

73
00:06:29.890 --> 00:06:37.800
In diesem Fall richte ich eine Nachricht ein und es ist ein Fehler aufgetreten. Bitte überprüfen Sie Ihre Anmeldeinformationen.

74
00:06:37.810 --> 00:06:43.810
Das ist die allgemeine Fehlermeldung, aber sie untersucht auch das Fehlerobjekt, das wir erhalten, und prüft, ob wir

75
00:06:43.810 --> 00:06:49.430
dort eine spezifischere Meldung haben, damit wir überprüfen können, ob die Fehlermeldung nicht null ist.

76
00:06:49.540 --> 00:06:51.020
Also, wenn es nicht gleich jetzt ist.

77
00:06:51.040 --> 00:06:58.400
Wenn wir also eine Fehlermeldung haben, überschreibe ich in diesem Fall die Nachricht und setze sie gleich der Fehlermeldung.

78
00:06:58.490 --> 00:07:04.550
Wenn wir dann eine solche Nachricht haben, wäre es schön, dem Benutzer zum Beispiel

79
00:07:05.070 --> 00:07:11.990
eine kleine Nachricht zu zeigen, die wir verwenden können Gerüst aus dem Kontext, um eine Snackbar zu zeigen.

80
00:07:11.990 --> 00:07:17.410
Jetzt ist die Snackbar diese kleine Nachricht, die am unteren Bildschirmrand angezeigt wird und dem

81
00:07:17.450 --> 00:07:19.130
Benutzer einen Fehler anzeigt.

82
00:07:19.130 --> 00:07:26.390
Und hier erstellen wir eine Snackbar, indem wir das mit Flattern gelieferte Snackbar-Widget instanziieren. An die Snackbar können

83
00:07:26.390 --> 00:07:32.900
wir das Inhaltsargument übergeben und ein Text-Widget einrichten, das die Nachricht anzeigt, die wir anzeigen

84
00:07:32.900 --> 00:07:33.370
möchten.

85
00:07:33.410 --> 00:07:38.960
Es ist also der Wert, der in der Nachrichtenvariablen gespeichert ist, und Sie können auch die Hintergrundfarbe

86
00:07:38.960 --> 00:07:40.140
dieser Snackbar einstellen.

87
00:07:40.370 --> 00:07:44.720
Und hier verwende ich ein Thema außerhalb des Kontextpunktfehlers oder eine Farbe.

88
00:07:44.720 --> 00:07:48.290
Und dies sollte eine schöne rote Farbe für diese Snackbar sein.

89
00:07:50.320 --> 00:07:58.300
Nachdem dies so oft auf der Plattform Ausnahme-Catch-Block ist, füge ich einen weiteren Catch-Block hinzu, der alle anderen Fehler

90
00:07:58.390 --> 00:08:00.520
abfängt, die wir möglicherweise haben.

91
00:08:00.670 --> 00:08:04.710
Es sollte nicht viele geben, aber falls es Fehler gibt, drucke ich sie hier aus.

92
00:08:04.720 --> 00:08:12.850
Haben wir während der Entwicklung CDM zumindest in Ordnung gebracht, das war eine Menge Arbeit, die wir nicht erledigt haben.

93
00:08:12.850 --> 00:08:15.830
Aber mal sehen, ob das soweit funktioniert.

94
00:08:16.000 --> 00:08:24.400
Wenn ich mich versichere und versuche, mich anzumelden und test a come of test einzugeben und ein gültiges Passwort einzugeben und einen Benutzernamen einzugeben,

95
00:08:24.400 --> 00:08:29.350
wird der Benutzername momentan sowieso nicht gespeichert, es spielt also keine Rolle, aber wenn ich

96
00:08:29.350 --> 00:08:34.230
einen Benutzer eingebe Name und ich klicke auf Anmelden Ich sehe keinen Fehler.

97
00:08:34.260 --> 00:08:41.610
Zumindest sehe ich hier einen Fehler bezüglich der fehlenden Plugin-Ausnahme und ein einfacher App-Neustart sollte dies

98
00:08:41.610 --> 00:08:42.350
beheben.

99
00:08:42.360 --> 00:08:49.130
Schließen wir also diesen laufenden Prozess und starten Sie ihn im Allgemeinen neu, wenn Sie einen solchen fehlenden Plug-In-Fehler erhalten.

100
00:08:49.170 --> 00:08:52.360
Starten Sie die App einfach komplett neu und versuchen Sie es erneut.

101
00:08:52.440 --> 00:08:55.650
Warten wir also, bis das wieder auftaucht.

102
00:08:57.220 --> 00:09:01.210
Und wenn wir jetzt zurückgehen und versuchen, erneut ein neues Konto zu erstellen.

103
00:09:02.450 --> 00:09:04.640
Geben Sie alle

104
00:09:07.540 --> 00:09:18.670
diese Anmeldeinformationen ein und klicken Sie hier erneut auf Anmelden. Kein Fehler. Hier wird ein Fehler angezeigt. Lassen Sie uns

105
00:09:18.670 --> 00:09:27.450
sehen, was falsch ist. Wir haben ein Problem mit dem Funktionsgerüst. Es wurde kein Gerüstvorfahr gefunden.

106
00:09:27.540 --> 00:09:37.520
Das ist im Wesentlichen das Problem, das wir jetzt hier haben, bevor wir uns damit befassen. Wechseln wir zu Firebase und gehen dort unter Authentifizierung zu

107
00:09:37.520 --> 00:09:42.560
Benutzern, und Sie sollten dort keinen Benutzer sehen, weil etwas schief gelaufen ist.

108
00:09:42.650 --> 00:09:46.440
Das ist der Grund, warum wir versucht haben, diese Snackbar zu zeigen.

109
00:09:46.460 --> 00:09:51.080
Aber da ist auch etwas schief gelaufen, also haben wir ein paar Fehler bekommen.

110
00:09:51.080 --> 00:09:58.770
Das Problem hierbei ist, dass ich auf diesem Gerüst hier einen Kontext verwende, um dem Flattern im Grunde zu sagen, in welchem Kontext

111
00:09:58.770 --> 00:10:00.830
das Gerüst gerendert werden soll.

112
00:10:00.840 --> 00:10:08.460
Das Problem ist hier, dass ich den Kontext außerhalb eines Bildschirms verwende und dies hier tatsächlich der falsche

113
00:10:08.460 --> 00:10:09.320
Kontext ist.

114
00:10:09.330 --> 00:10:17.460
Stattdessen sollten wir den erstellten Kontext hier als zusätzliches Argument im Submit Off-Forum akzeptieren und stattdessen diesen

115
00:10:17.460 --> 00:10:18.540
Kontext verwenden.

116
00:10:19.170 --> 00:10:22.980
Verwenden Sie hier also das Argument Stadt X auch für das Thema.

117
00:10:23.060 --> 00:10:28.230
Jetzt fragen Sie sich vielleicht, woher dieser Build-Kontext derzeit aus dem Nichts kommt. Wir müssen ihn

118
00:10:28.230 --> 00:10:28.850
weitergeben.

119
00:10:29.160 --> 00:10:35.640
Also müssen wir für ihn ins Off gehen und zum einen hier auf dieser Submit-Funktionseigenschaft klar machen, dass

120
00:10:36.270 --> 00:10:37.680
wir übergeben müssen.

121
00:10:37.680 --> 00:10:42.800
Der Kontext hier, weil wir ihn in diesem anderen Bildschirm haben wollen und ihn daher hier weitergeben müssen.

122
00:10:42.810 --> 00:10:49.050
Wenn wir also die Funktion als verlorenes Argument aufrufen, werde ich meinen Kontext weiterleiten,

123
00:10:49.140 --> 00:10:56.550
da dieses Jahr vom Off-Forum aus der Kontext tatsächlich Zugriff auf das umgebende Gerüst hat, auf das

124
00:10:56.580 --> 00:11:03.150
wiederum die Snackbar montiert werden sollte Der Bildschirmkontext hat keinen Zugriff auf dieses Gerüst, da

125
00:11:03.420 --> 00:11:09.330
dieses Gerüst hier vom OFFSCREEN gerendert wird. Nein, der Kontext des Off-Bildschirms liegt eine

126
00:11:09.360 --> 00:11:10.680
Ebene darüber.

127
00:11:10.680 --> 00:11:15.900
Um also Zugang zu diesem Gerüst zu haben, auf dem die Snackbar gerendert werden soll, müssen wir

128
00:11:15.900 --> 00:11:21.480
in ein Widget eintauchen, das sich in diesem Gerüst befindet, und in den Kontext dessen, was es dann ist.

129
00:11:21.570 --> 00:11:25.060
Und das gilt nur für alle Ausländer.

130
00:11:25.070 --> 00:11:29.670
Damit sollten wir jetzt zumindest eine Fehlermeldung sehen, wenn ich auf Anmelden klicke und

131
00:11:29.670 --> 00:11:31.530
die E-Mail-Adresse schlecht formatiert ist.

132
00:11:31.530 --> 00:11:36.200
Jetzt sieht es für mich wie eine gültige E-Mail-Adresse aus, aber am Ende werden hier zusätzliche Leerzeichen

133
00:11:36.200 --> 00:11:37.720
angezeigt, was zu Problemen führt.

134
00:11:37.820 --> 00:11:43.440
Dies ist eine schlechte Benutzererfahrung, die wir aus diesem Grund nicht authentifizieren können.

135
00:11:43.460 --> 00:11:49.550
Kehren Sie also auf jeden Fall zum Off-Form-Widget zurück. Wenn eine E-Mail eines Weiterleitungsbenutzers angezeigt wird,

136
00:11:49.550 --> 00:11:56.480
rufe ich diese Werte tatsächlich auf "Trimmen" auf, um am Anfang und am Ende Leerzeichen der Achse zu entfernen.

137
00:11:56.570 --> 00:12:02.480
Dadurch werden alle Achsen-Leerzeichen im E-Mail-Passwort und im Benutzernamen entfernt und daher wird dieser Fehler nicht angezeigt, da

138
00:12:02.480 --> 00:12:06.270
ich dieses Leerzeichen nicht als Teil der E-Mail senden werde.

139
00:12:06.370 --> 00:12:07.610
Wenn wir jetzt auf Anmelden klicken.

140
00:12:07.610 --> 00:12:10.550
Dies wird geschlossen und jetzt erhalten wir keinen Fehler.

141
00:12:10.550 --> 00:12:17.360
Wenn wir jetzt zur Webkonsole zurückkehren und diese Benutzerliste aktualisieren, sollte Ihr Benutzer hier mit Ihrer

142
00:12:17.420 --> 00:12:18.750
E-Mail-Adresse angezeigt werden.

143
00:12:18.800 --> 00:12:25.430
Und dies wurde jetzt von diesem Firebase All SDK erstellt, das ist also ziemlich süß.

144
00:12:25.430 --> 00:12:29.360
Wir haben auch die Fehlerbehandlung in Aktion gesehen, das ist auch großartig.

145
00:12:29.360 --> 00:12:32.390
Und damit können wir Benutzer erstellen.

146
00:12:32.390 --> 00:12:33.680
Das ist ein schöner erster Schritt.

147
00:12:33.680 --> 00:12:40.070
Sie werden jetzt gespeichert und dieses von Firebase zurückgesendete Token wird bereits vom Firebase-Paket

148
00:12:40.070 --> 00:12:40.580
verwaltet.

149
00:12:40.580 --> 00:12:42.100
Wir müssen dort nichts tun.

150
00:12:42.200 --> 00:12:47.480
Es wird sogar automatisch zu ausgehenden Anfragen hinzugefügt, die später gesendet werden sollten.

151
00:12:47.510 --> 00:12:52.730
Das passiert also völlig hinter den Kulissen, was super super genial ist und uns

152
00:12:52.730 --> 00:12:54.010
viel Arbeit nimmt.

153
00:12:54.050 --> 00:12:57.950
Der Authentifizierungsprozess ist jedoch noch nicht vollständig abgeschlossen.

154
00:12:58.070 --> 00:13:02.730
Wir werden später auch das Hochladen von Bildern hinzufügen, aber das wird später folgen.

155
00:13:02.780 --> 00:13:08.170
Aber eine Sache, die ich sofort tun möchte, ist, den Benutzernamen zu speichern, und das passiert derzeit nicht.

156
00:13:08.170 --> 00:13:11.270
Wir bekommen den Benutzernamen, aber wir machen nichts damit.

157
00:13:11.420 --> 00:13:13.430
Stellen wir also sicher, dass wir auch den Benutzernamen speichern.
