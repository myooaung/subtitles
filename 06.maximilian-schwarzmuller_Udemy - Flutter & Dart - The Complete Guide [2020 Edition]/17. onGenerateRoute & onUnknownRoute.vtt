WEBVTT
1
00:00:02.400 --> 00:00:09.030
For loading pages, you learned that you can load pages with help of push or pushNamed. When you use

2
00:00:09.030 --> 00:00:09.770
pushNamed,

3
00:00:09.770 --> 00:00:16.530
you need to register the page, the route for that page in the main.dart file, when you use push, you create

4
00:00:16.560 --> 00:00:20.760
the route on the fly with the MaterialPageRoute class.

5
00:00:20.920 --> 00:00:26.550
Now as I just said, for pushNamed you have to set up this routes table here in the main.dart file and

6
00:00:26.580 --> 00:00:33.210
depending on the kind of app you're building, you could even have routes which you don't know in advance

7
00:00:33.240 --> 00:00:40.350
because they're generated in a dynamic way, so you can't set up a route name here or you just want to have

8
00:00:40.350 --> 00:00:47.580
a fallback to be safe that if some strange navigation occurs, you can still show something on the screen

9
00:00:48.090 --> 00:00:52.920
and for that, Flutter gives you two important methods here in main.dart.

10
00:00:53.010 --> 00:01:00.430
One is onGenerateRoute which takes a function and one is onUnknownRoute.

11
00:01:00.640 --> 00:01:06.940
Now onGenerateRoute takes a function which gives you some route settings, so some information about

12
00:01:06.940 --> 00:01:15.710
the route, like the argument, the arguments for example and the function you pass to onGenerateRoute

13
00:01:16.040 --> 00:01:18.650
should also return a route.

14
00:01:18.650 --> 00:01:24.990
So here, you should return a MaterialPageRoute for example where you then define a builder, which receives

15
00:01:24.990 --> 00:01:33.210
a context automatically, which returns the categories screen let's say. Now onGenerateRoute is reached

16
00:01:33.210 --> 00:01:35.490
and therefore this function is executed

17
00:01:35.490 --> 00:01:42.570
if you are going to a named route, with pushNamed, that is not registered in the routes table.

18
00:01:42.570 --> 00:01:49.230
So if I would comment out the MealDetailScreen registration there and I comment out

19
00:01:49.230 --> 00:01:51.400
onUnknownRoute to not get an error for the moment,

20
00:01:51.510 --> 00:01:56.520
then we should actually see that when we try to go to the MealDetailScreen, so when we click a meal

21
00:01:56.520 --> 00:02:02.460
here in the list of meals, we actually go to the categories screen because here I define that I want

22
00:02:02.460 --> 00:02:08.070
to load this route for any route that's not registered in the routes screen

23
00:02:08.070 --> 00:02:14.940
as long as we try to reach it through a named route. So if I now save this and I click on this item,

24
00:02:14.940 --> 00:02:17.070
indeed I'm back on the category screen

25
00:02:17.070 --> 00:02:22.530
and please note that I can go back now because I pushed this on top because that's when I return here

26
00:02:22.620 --> 00:02:24.080
in onGenerateRoute.

27
00:02:24.330 --> 00:02:30.000
We don't need onGenerateRoute in this application we're building here and in a lot of applications,

28
00:02:30.000 --> 00:02:31.170
you might not need it.

29
00:02:31.230 --> 00:02:37.590
It's still important to learn about it because onGenerateRoute of course gives you a lot of flexibility.

30
00:02:37.770 --> 00:02:43.800
It gives you access to the settings of the route, so you can find out which arguments this route has

31
00:02:43.800 --> 00:02:50.230
but you can also find out which name you pushed to for example and then you can use this information,

32
00:02:50.250 --> 00:02:58.440
for example you could check if settings.name is equal to /meal-detail and then return a certain

33
00:02:58.650 --> 00:02:59.760
MaterialPageRoute

34
00:02:59.760 --> 00:03:06.270
in that case and if you have a different settings name, of course you could also use a switch statement

35
00:03:06.270 --> 00:03:07.140
here,

36
00:03:07.140 --> 00:03:11.620
then you could return different MaterialPageRoute here.

37
00:03:11.790 --> 00:03:13.350
So that would be possible

38
00:03:13.350 --> 00:03:19.980
and that again as I just said can be useful in scenarios where you build highly dynamic applications,

39
00:03:20.160 --> 00:03:26.790
where you maybe have route names that are generated dynamically during the lifetime of your app and hence

40
00:03:26.790 --> 00:03:31.050
you can't know them in advance when you're building the app or anything like that.

41
00:03:31.140 --> 00:03:37.530
Then onGenerateRoute can be used in conjunction with pushNamed and so on to still handle the names

42
00:03:37.530 --> 00:03:43.300
you're targeting or still do something for these named routes and run your own logic that returns

43
00:03:43.320 --> 00:03:48.160
maybe always the same route or different routes depending on the route data.

44
00:03:48.210 --> 00:03:53.650
As I said, we don't need it here because of course, we have no plans to comment out meal detail

45
00:03:53.650 --> 00:04:01.460
screen and then this here is actually never reached. onUnknownRoute is also important,

46
00:04:01.460 --> 00:04:07.400
onUnknownRoute also takes a function, an anonymous function here for example which gets settings

47
00:04:07.400 --> 00:04:12.290
about the route it tried to load and which should return a route.

48
00:04:12.290 --> 00:04:19.250
So just as up there, maybe in MaterialPageRoute which in the end builds the category screen. Now 

49
00:04:19.250 --> 00:04:25.940
onUnknownRoute is reached when Flutter failed to build a screen with all other measures.

50
00:04:25.940 --> 00:04:31.580
So when you defined nothing as a root route, when you define nothing in the routes table overall,

51
00:04:32.210 --> 00:04:39.440
if you don't use onGenerateRoute, then in the end as a last resort before it throws an error, Flutter

52
00:04:39.440 --> 00:04:44.030
will try to use onUnknownRoute to show something on the screen.

53
00:04:44.030 --> 00:04:52.130
So providing some fallback here, either a generic starting page or some we couldn't find that page error

54
00:04:52.160 --> 00:04:58.100
page, showing something here is a good idea to make sure that your users never end up in a state where

55
00:04:58.100 --> 00:05:04.310
the app just crashes but that you instead always show something on the screen. So it's like your

56
00:05:04.370 --> 00:05:09.900
404 fallback page in the web. If you enter a URL in the web which doesn't exist,

57
00:05:09.920 --> 00:05:15.380
most websites have a specific page they show to you where you see something like oh this page doesn't

58
00:05:15.380 --> 00:05:15.980
exist,

59
00:05:15.980 --> 00:05:18.710
well that is your fallback in a Flutter app here.

60
00:05:18.770 --> 00:05:21.090
So providing this is never a bad idea

61
00:05:21.170 --> 00:05:25.220
and here I will provide it with categories screen as a default.
