WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.330
To set up a well-designed responsive experience,

00:00:03.330 --> 00:00:05.310
you need to really understand your grid.

00:00:05.310 --> 00:00:09.675
Most designers happily use a grid and do sovereignty well to structure their design.

00:00:09.675 --> 00:00:13.965
But very few really understand how that grid behaves in the browser.

00:00:13.965 --> 00:00:18.510
This is where most misunderstanding happens between design and development.

00:00:18.510 --> 00:00:22.200
So let's first make sure that we understand the basics.

00:00:22.200 --> 00:00:28.710
I just checked some of our elements in a standard 12-column grid with some HTML and CSS.

00:00:28.710 --> 00:00:30.270
Here you see, for example,

00:00:30.270 --> 00:00:33.000
this is the header that it's placed within the container.

00:00:33.000 --> 00:00:34.650
This orange line is the container.

00:00:34.650 --> 00:00:38.470
Then here you see the grid that everything is placed within.

00:00:38.470 --> 00:00:40.670
Just to keep things a little more simple,

00:00:40.670 --> 00:00:42.650
I am joining them together here in my view,

00:00:42.650 --> 00:00:45.665
so I always have three columns where my design are sitting in.

00:00:45.665 --> 00:00:47.450
By the way, you can join that any way.

00:00:47.450 --> 00:00:51.430
You can also use the first 10 and then the last last two.

00:00:51.430 --> 00:00:54.290
The only important thing is that a row always adds up to 12.

00:00:54.290 --> 00:00:56.725
However, you distributed totally up to you.

00:00:56.725 --> 00:00:59.780
Now I also have a bit of space to the left and to the right.

00:00:59.780 --> 00:01:01.745
You can set that up however you wish.

00:01:01.745 --> 00:01:05.675
The important thing is that you understand how you can place your designs,

00:01:05.675 --> 00:01:08.330
and therefore you need to understand how the gutter works.

00:01:08.330 --> 00:01:10.325
I have a gutter set here to 20.

00:01:10.325 --> 00:01:13.865
I think by default in Bootstrap that will be 30.

00:01:13.865 --> 00:01:15.430
You can change that.

00:01:15.430 --> 00:01:21.000
What that really means is that I have 10 pixels on each side of the column.

00:01:21.000 --> 00:01:23.180
Therefore, 10 in the beginning, 10 in the end,

00:01:23.180 --> 00:01:26.620
and anything in between would add up to 20.

00:01:26.620 --> 00:01:30.110
Why is this important to understand for our responsive grid?

00:01:30.110 --> 00:01:32.510
Well, the important thing is to understand that here,

00:01:32.510 --> 00:01:34.910
for example, I was giving this column,

00:01:34.910 --> 00:01:36.440
this blue background color.

00:01:36.440 --> 00:01:39.410
So that's actually you can go to the edge and use

00:01:39.410 --> 00:01:42.470
up the gutter like half the gutter that you're giving for that column.

00:01:42.470 --> 00:01:46.760
Then anything you place inside that column though as images or

00:01:46.760 --> 00:01:51.520
text will be living inside this space, inside the gutter.

00:01:51.520 --> 00:01:54.380
So if you want to know gutter that's no problem.

00:01:54.380 --> 00:01:56.540
For example, you could just get rid of the whole row,

00:01:56.540 --> 00:02:00.035
put it to zero, and then all images are stuck next to one another.

00:02:00.035 --> 00:02:02.000
Just be aware of that behavior.

00:02:02.000 --> 00:02:03.440
Because what you can't do,

00:02:03.440 --> 00:02:07.520
and what I see frequently is that you just put an image on top and say,

00:02:07.520 --> 00:02:09.530
well, I'm just going to use this free space and

00:02:09.530 --> 00:02:11.825
this free space at the other side of the column.

00:02:11.825 --> 00:02:14.870
I'm just going to put this image here because as you can see,

00:02:14.870 --> 00:02:21.125
then you literally want to cut off a little bit of the previous and following column,

00:02:21.125 --> 00:02:23.350
and that's not going to work.

00:02:23.350 --> 00:02:27.050
Unless you have a really good reason and it's a key element,

00:02:27.050 --> 00:02:29.330
just stick to the general rules of the grid.

00:02:29.330 --> 00:02:32.090
Make sure you read the documentation of the grid you're using.

00:02:32.090 --> 00:02:35.440
There's usually a lot of things you can do you haven't seen before.

00:02:35.440 --> 00:02:38.375
So now that we know how to place elements in the grid,

00:02:38.375 --> 00:02:41.200
let's see how the grid behaves.

00:02:41.200 --> 00:02:43.520
We usually use the term

00:02:43.520 --> 00:02:47.150
responsive design for anything that adapts to different screen sizes.

00:02:47.150 --> 00:02:48.290
But when it comes to grids,

00:02:48.290 --> 00:02:52.345
you should be aware that there's two different ways that that can be achieved.

00:02:52.345 --> 00:02:56.000
The first one is adaptive design and what that basically

00:02:56.000 --> 00:02:59.105
does is that you have several fixed layout designs,

00:02:59.105 --> 00:03:02.405
and the one displayed depends on the screen width of the viewer.

00:03:02.405 --> 00:03:04.735
So you have fixed breakpoints.

00:03:04.735 --> 00:03:08.605
Here you can see breakpoint,

00:03:08.605 --> 00:03:12.050
another breakpoint and change of behavior,

00:03:12.050 --> 00:03:15.390
and another breakpoint for mobile.

00:03:19.160 --> 00:03:24.080
The other one is the actual responsive design that we use.

00:03:24.080 --> 00:03:28.475
That means that you basically mix fluid and adaptive.

00:03:28.475 --> 00:03:31.160
You have breakpoints, but what they do is they create

00:03:31.160 --> 00:03:34.555
a range and within that range the design behaves fluid.

00:03:34.555 --> 00:03:38.285
Now you might have also heard about fixed design and fluid design.

00:03:38.285 --> 00:03:40.910
Well fixed design, that doesn't work nowadays anymore.

00:03:40.910 --> 00:03:44.015
What used to be like you have one width for desktop and that's it.

00:03:44.015 --> 00:03:46.675
That's not going to work with all the devices around today.

00:03:46.675 --> 00:03:50.780
Fluid design means that it's fluid from the very start to the very end,

00:03:50.780 --> 00:03:53.135
so for mobile up to huge screens.

00:03:53.135 --> 00:03:57.140
You might get away with that if you just have a login form or something like that.

00:03:57.140 --> 00:03:59.630
But in general, if you want that

00:03:59.630 --> 00:04:03.805
fluidness is responsive design and you still need breakpoints.

00:04:03.805 --> 00:04:05.980
Here we can see what that looks like in the browser,

00:04:05.980 --> 00:04:07.865
here is our design, I resize,

00:04:07.865 --> 00:04:14.940
and you can see it puts everything together, breakpoint, breakpoint.

00:04:15.050 --> 00:04:18.380
You can also see is that especially topography

00:04:18.380 --> 00:04:21.755
is something you need to really watch in this approach.

00:04:21.755 --> 00:04:24.920
You can use either way adaptive or responsive.

00:04:24.920 --> 00:04:28.760
Just make sure you talk to your development team and make sure that they're fine with it.

00:04:28.760 --> 00:04:31.445
There might be some technical limitations.

00:04:31.445 --> 00:04:34.640
Also, if you're working with something that is very, very detailed,

00:04:34.640 --> 00:04:39.605
sometimes it's easier to use adaptive because you can really fix things down to pixels.

00:04:39.605 --> 00:04:42.380
As a designer, I obviously really like responsive

00:04:42.380 --> 00:04:45.140
because I love the fluidness between breakpoints,

00:04:45.140 --> 00:04:47.630
but it takes a little more attention to detail.

00:04:47.630 --> 00:04:51.660
So now let's look at our design files and how to set that up.
