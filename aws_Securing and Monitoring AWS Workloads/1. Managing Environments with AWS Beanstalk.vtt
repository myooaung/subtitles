WEBVTT
1
00:00:01.850 --> 00:00:06.550
Welcome to this module on application environment security.

2
00:00:06.550 --> 00:00:07.480
In the first clip,

3
00:00:07.480 --> 00:00:12.150
we will see how to deploy an application in Elastic Beanstalk and

4
00:00:12.150 --> 00:00:16.720
monitor the health of application and create alarms if the CPU

5
00:00:16.720 --> 00:00:20.740
utilization exceeds a preset ratio.

6
00:00:20.740 --> 00:00:22.340
Before we jump into a demo,

7
00:00:22.340 --> 00:00:28.040
let's understand the features offered by Elastic Beanstalk.

8
00:00:28.040 --> 00:00:33.060
With Elastic Beanstalk, you can deploy and manage application in AWS without

9
00:00:33.060 --> 00:00:37.220
worrying too much about the underlying infrastructure.

10
00:00:37.220 --> 00:00:40.160
You upload your application to the Beanstalk,

11
00:00:40.160 --> 00:00:45.640
and it'll automatically handle all the complexities of load balancing,

12
00:00:45.640 --> 00:00:52.730
provisioning, application help monitoring, and alerting. As of mid 2020,

13
00:00:52.730 --> 00:01:02.720
applications developed in Go, PHP, Python, Node.js, Java, .NET, and Ruby

14
00:01:02.720 --> 00:01:06.570
are supported by Elastic Beanstalk.

15
00:01:06.570 --> 00:01:10.170
Let's jump into a demo and see how to deploy a demo

16
00:01:10.170 --> 00:01:13.640
application in Elastic Beanstalk.

17
00:01:13.640 --> 00:01:18.830
I just logged into AWS console, click on Elastic

18
00:01:18.830 --> 00:01:24.960
Beanstalk, choose Create Application.

19
00:01:24.960 --> 00:01:28.330
Let's go ahead and create a web app and deploy in

20
00:01:28.330 --> 00:01:34.640
Beanstalk. Give your application a name.

21
00:01:34.640 --> 00:01:38.430
I'm going to choose Java as a platform of my application,

22
00:01:38.430 --> 00:01:44.550
and it is going to be a Java 8 application running on 64‑bit Linux.

23
00:01:44.550 --> 00:01:48.800
If you have an application ready to be deployed, you can upload your own code

24
00:01:48.800 --> 00:01:54.540
or choose a demo application that is provided by Beanstalk.

25
00:01:54.540 --> 00:01:57.840
Click Create Application.

26
00:01:57.840 --> 00:02:02.610
This is going to take some time as your application needs to be uploaded.

27
00:02:02.610 --> 00:02:07.580
The required EC2 instances needs to be provisioned, the required

28
00:02:07.580 --> 00:02:10.610
network configurations needs to be set up,

29
00:02:10.610 --> 00:02:14.540
and finally, the application would be deployed.

30
00:02:14.540 --> 00:02:16.550
Once the deployment is complete,

31
00:02:16.550 --> 00:02:20.150
you will see the dashboard highlighting the current health of the

32
00:02:20.150 --> 00:02:25.530
application. As I scroll down, you can see the different events that

33
00:02:25.530 --> 00:02:29.040
occurred during the deployment process.

34
00:02:29.040 --> 00:02:34.960
To your left, chose Configuration and it lists all the EC2

35
00:02:34.960 --> 00:02:40.980
instances, IAM role, load balancer, and the software that we'll

36
00:02:40.980 --> 00:02:44.520
provision as part of the deployment process.

37
00:02:44.520 --> 00:02:46.540
Now that the application is deployed,

38
00:02:46.540 --> 00:02:50.440
let's quickly launch the deployed application.

39
00:02:50.440 --> 00:02:57.000
To your left, click on Go to your environment and it shows the main

40
00:02:57.000 --> 00:03:00.940
page of the application that we just deployed.

41
00:03:00.940 --> 00:03:05.940
Let's generate some sample traffic to this application.

42
00:03:05.940 --> 00:03:13.160
Click on Open AWS X‑Ray Console to monitor this traffic. Under the Service map

43
00:03:13.160 --> 00:03:18.210
section, it lists the end to end topology and shows the average processing

44
00:03:18.210 --> 00:03:25.490
time by the application. Let's go back to Beanstalk console and set up alarms

45
00:03:25.490 --> 00:03:31.880
if CPU utilization exceeds a certain threshold. Click on the name of your

46
00:03:31.880 --> 00:03:39.040
application and you'll be taken to your application dashboard. To your left,

47
00:03:39.040 --> 00:03:41.230
click on Monitoring,

48
00:03:41.230 --> 00:03:43.980
and it shows the different metrics for your application

49
00:03:43.980 --> 00:03:50.050
provided by Beanstalk. Under Overview, there is also a historic

50
00:03:50.050 --> 00:03:54.020
view represented in a graphical form.

51
00:03:54.020 --> 00:03:55.940
Click Edit.

52
00:03:55.940 --> 00:04:01.940
This lets you add a new metric to the Overview section at the top.

53
00:04:01.940 --> 00:04:03.310
Under Resources,

54
00:04:03.310 --> 00:04:09.380
I'm going to choose a demo application. Under Statistic, I'm

55
00:04:09.380 --> 00:04:14.490
going to select the Average, click Add,

56
00:04:14.490 --> 00:04:18.390
and you can see the average environment health is added to the Overview

57
00:04:18.390 --> 00:04:25.050
section at the top. Click Save to save your changes.

58
00:04:25.050 --> 00:04:25.510
Now,

59
00:04:25.510 --> 00:04:31.570
let's go ahead and create an alarm to monitor CPU utilization. Click on the

60
00:04:31.570 --> 00:04:36.640
bell icon that you see at the top right corner of a chart.

61
00:04:36.640 --> 00:04:44.440
Give the alarm a name, select a period, this is the time interval between

62
00:04:44.440 --> 00:04:51.560
each readings. Under Threshold, specify the condition and the threshold

63
00:04:51.560 --> 00:04:59.070
limit. Change state after indicates the amount of time after a threshold has

64
00:04:59.070 --> 00:05:04.940
been exceeded to change the state of the alarm. You have the option of

65
00:05:04.940 --> 00:05:10.340
selecting an SNS topic to receive notification or you can enter the email

66
00:05:10.340 --> 00:05:14.230
address directly. Finally,

67
00:05:14.230 --> 00:05:17.420
select the state change when you would like this alarm to be

68
00:05:17.420 --> 00:05:22.670
triggered. I would like to trigger this alarm when state changes to

69
00:05:22.670 --> 00:05:29.870
alarm state. Click Add. It looks like there is an error and it is

70
00:05:29.870 --> 00:05:33.530
not happy with the alarm name.

71
00:05:33.530 --> 00:05:38.100
It looks like it doesn't like the underscore that this part of the name. Let

72
00:05:38.100 --> 00:05:46.210
me go ahead and remove the underscore, click Add, and the new alarm is

73
00:05:46.210 --> 00:05:53.420
successfully created. Choose health to your left.

74
00:05:53.420 --> 00:05:55.020
By selecting the instance,

75
00:05:55.020 --> 00:06:00.870
you have the option either to reboot or terminate the instance. To your

76
00:06:00.870 --> 00:06:09.130
left, click Alarm and it shows the alarm that we newly created. Choose

77
00:06:09.130 --> 00:06:18.000
Events and you can see all the events that occurred in Beanstalk during the alarm creation process.

