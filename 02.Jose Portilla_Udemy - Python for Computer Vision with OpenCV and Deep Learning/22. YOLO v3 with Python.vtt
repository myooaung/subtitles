WEBVTT
1
00:00:05.520 --> 00:00:10.350
Welcome everyone to this lecture where we're going to use Python to implement the real object detection

2
00:00:10.350 --> 00:00:11.940
network.

3
00:00:12.060 --> 00:00:14.070
So we're going to explore how to implement ulo.

4
00:00:14.070 --> 00:00:19.200
Version 3 with Python and we're going to be using an implementation of all three has been trained on

5
00:00:19.200 --> 00:00:20.630
the cocoa data set.

6
00:00:21.400 --> 00:00:27.940
The cocoa data set has over 1.5 million object instances with 80 different object categories and we'll

7
00:00:27.940 --> 00:00:33.100
be using a pre-trained model that has been trained on this Kokoo data set in order to explore the capabilities

8
00:00:33.130 --> 00:00:35.960
of yolo realistically.

9
00:00:35.980 --> 00:00:41.650
If you wanted to train the network on your own instance of the cocoa data set it would actually take

10
00:00:41.650 --> 00:00:48.010
many many hours several days of training and that would be using a very high end and expensive GPU to

11
00:00:48.010 --> 00:00:49.480
achieve anything reasonable.

12
00:00:49.510 --> 00:00:54.760
So because of the amount of time it takes and also just expense and running that GPU we're going to

13
00:00:54.760 --> 00:00:58.360
actually download the weights of a pre-trained network.

14
00:00:58.540 --> 00:01:00.580
So this network is hugely complex.

15
00:01:00.580 --> 00:01:05.230
Remember I said the cocoa data set includes over 1.5 million object instances.

16
00:01:05.230 --> 00:01:11.020
It's 80 different classes which means even after the entire training the just the weights of the network

17
00:01:11.020 --> 00:01:16.660
itself is over 200 megabytes you're going to download a really large network just to see the effects

18
00:01:16.660 --> 00:01:17.280
here.

19
00:01:17.290 --> 00:01:20.190
So check out the research link in this lecture that download the file.

20
00:01:20.260 --> 00:01:23.190
Keep in mind it's over 200 megabytes So it may take some time.

21
00:01:23.350 --> 00:01:29.080
If you have a slower internet connection once you've downloaded that file you're going to need to place

22
00:01:29.080 --> 00:01:29.730
it in the data.

23
00:01:29.740 --> 00:01:34.160
There are clear of the whole folder and I'll show you how to do that in just a little bit.

24
00:01:34.180 --> 00:01:39.190
Then after that we already created a notebook that you have with easy to call functions in order to

25
00:01:39.190 --> 00:01:41.750
explore Ulo on your own images.

26
00:01:41.770 --> 00:01:45.700
So let's walk you through this entire process on setting up the weights.

27
00:01:45.700 --> 00:01:49.620
Downloading them placing them in the correct directory and then running through the notebook.

28
00:01:49.750 --> 00:01:50.510
Let's get started.

29
00:01:51.810 --> 00:01:56.010
All right so if you click on the resource link it's also linked in the previous article lectures you

30
00:01:56.010 --> 00:02:00.520
may have already downloaded this by the time reviewing but you should be able to see the yellow dot

31
00:02:00.670 --> 00:02:02.060
H5 file here.

32
00:02:02.070 --> 00:02:06.680
This is a 200 megabyte file so it's quite large soccerball to preview.

33
00:02:06.780 --> 00:02:11.400
This is the actual H5 file that we're going to be loading that already has the pre-trained waits of

34
00:02:11.400 --> 00:02:12.180
the network.

35
00:02:12.180 --> 00:02:17.340
So then go ahead and click download here and then make sure you keep track of where the file actually

36
00:02:17.340 --> 00:02:17.690
is.

37
00:02:17.700 --> 00:02:19.690
Most likely you just went to your Downloads folder.

38
00:02:19.830 --> 00:02:21.190
So I'm going to download this.

39
00:02:21.210 --> 00:02:22.150
It'll take a little bit of time.

40
00:02:22.150 --> 00:02:26.730
So going to fast forward and then open it up and my actual Downloads folder.

41
00:02:26.730 --> 00:02:28.050
So let's skip to that.

42
00:02:28.740 --> 00:02:34.020
OK so I've downloaded the actual H5 file that was quite large about 200 megabytes and I've opened up

43
00:02:34.020 --> 00:02:34.990
two windows.

44
00:02:35.010 --> 00:02:40.620
One is my actual downloads window or folder and then the other one is the directory for this course

45
00:02:40.620 --> 00:02:43.020
in the notebooks computer vision with Python.

46
00:02:43.050 --> 00:02:49.320
What we need to do is find the location of wherever you happen to download and say that yolo that H5.

47
00:02:49.320 --> 00:02:50.600
So here it is for me.

48
00:02:50.730 --> 00:02:54.570
I'm going to right click on it and you can either cut or copy this.

49
00:02:54.570 --> 00:02:58.480
So I'm going to just cut it and then you need to place it underneath.

50
00:02:58.530 --> 00:02:59.850
Deep learning computer vision.

51
00:02:59.850 --> 00:03:01.910
So that's six in these folders.

52
00:03:01.910 --> 00:03:07.520
And then it's a computer vision with Python victory double click that you'll notice we have the SpaceX

53
00:03:07.540 --> 00:03:11.780
notebook and this note book that we've already seen over here you see YOLO v3.

54
00:03:11.820 --> 00:03:14.210
That should be at the top it's it's own little directory.

55
00:03:14.260 --> 00:03:15.440
Double click on that.

56
00:03:15.450 --> 00:03:20.950
And then you should see a bunch of folders here and some demos as well as a whole object detection notebook.

57
00:03:21.000 --> 00:03:24.840
What you're going to do is open up the data directory.

58
00:03:25.140 --> 00:03:26.870
So again just to see the whole path here.

59
00:03:26.890 --> 00:03:28.530
This is deep learning computer vision.

60
00:03:28.540 --> 00:03:34.630
You'll have the 3 data you should have a Cocco classes that textfile what I need you to do is then paste

61
00:03:34.720 --> 00:03:43.390
in the Yodok H5 so you'll H5 that actual pre-trained network is going to go underneath your data directory

62
00:03:43.450 --> 00:03:49.190
which is underneath the Ullevi 3 folder which is underneath the computer vision which itself is underneath

63
00:03:49.210 --> 00:03:50.580
computer vision of Python.

64
00:03:50.800 --> 00:03:54.990
Once you've put that 8:5 file there you should be ready to run the notebook.

65
00:03:55.000 --> 00:03:59.670
So I'm going to start Juber lab and then go to the notebook that is underneath the YOLO.

66
00:03:59.670 --> 00:04:01.480
So this yellow object detection.

67
00:04:01.680 --> 00:04:04.700
OK let's jump to Jupiter lab and get that started.

68
00:04:05.620 --> 00:04:08.780
OK so here I am at Jupiter lab instead of my browser.

69
00:04:08.830 --> 00:04:14.290
If you did everything correctly you should now be able to click on deep learning then go to Ullevi theory

70
00:04:14.310 --> 00:04:15.120
directory.

71
00:04:15.760 --> 00:04:19.240
Then if you check actual data at the rectory you should now see yolo.

72
00:04:19.310 --> 00:04:19.850
H5.

73
00:04:19.870 --> 00:04:21.220
That's what we're going to be using.

74
00:04:21.220 --> 00:04:25.630
So let's go ahead and then back out and the actual notebook we're going to be running is this yellow

75
00:04:25.660 --> 00:04:26.970
object detection notebook.

76
00:04:26.980 --> 00:04:29.130
So 0 6 you'll Oggi detection.

77
00:04:29.230 --> 00:04:32.150
Go ahead and double click on that notebook and you should see something like this.

78
00:04:32.170 --> 00:04:33.060
Open up.

79
00:04:33.130 --> 00:04:38.890
Keep in mind we went ahead and linked the actual source code here so you can check out the own implementation

80
00:04:38.980 --> 00:04:44.920
as well as how to reference the original Ulo three publication in case you want to reference that in

81
00:04:44.920 --> 00:04:45.870
your own research.

82
00:04:46.120 --> 00:04:50.300
And if you see something that says you must watch the video lecture properly set up the model and wait.

83
00:04:50.410 --> 00:04:51.430
That's what we already did.

84
00:04:51.430 --> 00:04:54.080
So mixture you've set up those model and weights.

85
00:04:54.370 --> 00:04:59.200
And as a quick note before we actually run the note book what I wanted to show you here is you can go

86
00:04:59.200 --> 00:05:03.060
to cookoo data set or you can actually then play around with the data set.

87
00:05:03.250 --> 00:05:07.480
So as I mentioned it's a really large data center that also has the original research paper from Microsoft

88
00:05:07.750 --> 00:05:08.950
that created this data set.

89
00:05:09.750 --> 00:05:15.510
And if you click here on data set you can do overview and then explore and actually allows you to kind

90
00:05:15.510 --> 00:05:18.480
of select different objects from a data set and then check them out.

91
00:05:18.660 --> 00:05:22.740
So for example if you want to check out apples you can hit search here and eventually you'll see a couple

92
00:05:22.740 --> 00:05:24.770
of image results of apples.

93
00:05:24.990 --> 00:05:29.730
So keep in mind not every image is going to be shown here but here you just see various images where

94
00:05:29.790 --> 00:05:31.930
there happens to be an Apple somewhere in the image.

95
00:05:31.950 --> 00:05:35.550
So some of them are actually quite distinct so you can see here there's a little apple in the bowl there

96
00:05:35.790 --> 00:05:37.010
along with other people.

97
00:05:37.170 --> 00:05:41.970
And here there's a bird and an apple so the network is actually going to be pretty good at detecting

98
00:05:41.970 --> 00:05:42.670
that sort of thing.

99
00:05:42.750 --> 00:05:46.020
So there are data set going to enclose this.

100
00:05:46.030 --> 00:05:47.710
And let's come back to this yellow notebook.

101
00:05:47.940 --> 00:05:53.280
Go ahead and just run the cell so first you start off a bunch of imports and then we have a process

102
00:05:53.370 --> 00:05:54.360
image function.

103
00:05:54.480 --> 00:05:59.670
And what this does is it's resizes reduces or expands the image depending on the original size of the

104
00:05:59.670 --> 00:06:00.430
image.

105
00:06:00.450 --> 00:06:04.460
So we have process image it's going to take taken the image and then fix it to make sure it works with

106
00:06:04.460 --> 00:06:05.990
the pre-treat network.

107
00:06:06.450 --> 00:06:13.560
So then go ahead and run that then we have this get classes file which is going to grab classes from

108
00:06:13.650 --> 00:06:15.930
the classes text file.

109
00:06:15.930 --> 00:06:20.880
So if we actually come back here in Lotus under data there's a cookoo classes that text file which actually

110
00:06:20.880 --> 00:06:22.640
contains a list of all the classes.

111
00:06:22.680 --> 00:06:24.720
So that's going to set up the class names.

112
00:06:24.780 --> 00:06:28.800
So it actually reads in the text file and you can actually double click it and look at the various classes

113
00:06:28.800 --> 00:06:30.130
that are in the Ko-Ko dataset.

114
00:06:30.300 --> 00:06:33.660
So as I mentioned earlier there's 80 different classes here are things that can detect.

115
00:06:33.870 --> 00:06:37.310
So let's go ahead and close that come back to the notebook.

116
00:06:37.320 --> 00:06:41.870
So go ahead and run that function make sure these functions are being run and defined.

117
00:06:41.970 --> 00:06:47.670
Then we also have the draw function it takes in an image boxes scores and classes and when it's going

118
00:06:47.670 --> 00:06:54.300
to do is going to use CB2 to draw a rectangle on top of where the image was identified and the text

119
00:06:54.450 --> 00:06:57.870
on what class a predicted image as well as labeling.

120
00:06:57.870 --> 00:07:00.200
What percent sure it was it was that image.

121
00:07:00.240 --> 00:07:05.740
So it was maybe 95 percent sure that that person or the picture was a person.

122
00:07:05.880 --> 00:07:07.210
Go ahead and run that cell.

123
00:07:07.710 --> 00:07:09.510
And then we have the text image.

124
00:07:09.660 --> 00:07:15.030
So what this does is it takes image and it's going to use the Ullevi v3 network that we just downloaded

125
00:07:15.360 --> 00:07:17.640
in order to try to protect the image.

126
00:07:17.640 --> 00:07:22.470
So we just call Ulo and then call predict and we're going to pass an image.

127
00:07:22.500 --> 00:07:24.300
So a lot of code we already set it up for you.

128
00:07:24.310 --> 00:07:29.880
Just because it's kind of unrealistic to program all of this yourself given the fact that it just takes

129
00:07:29.880 --> 00:07:32.870
so long to train this sort of network.

130
00:07:32.910 --> 00:07:35.850
There's also a Detect video functionality.

131
00:07:35.850 --> 00:07:41.040
So if you don't wanted to text lungis images but you want to track during a video things like tracking

132
00:07:41.040 --> 00:07:45.690
a different person or tracking a car or any of those classes there's a detective video function that

133
00:07:45.690 --> 00:07:47.320
will also work for you here.

134
00:07:47.340 --> 00:07:49.420
So really similar to the function above.

135
00:07:49.440 --> 00:07:53.600
It's just going to do video capture and then detect on frames as it goes along.

136
00:07:53.610 --> 00:07:58.080
So it's essentially is calling into the text image function frame by frame and then it's going to just

137
00:07:58.080 --> 00:08:00.310
keep writing that rectangle there.

138
00:08:00.330 --> 00:08:02.570
It also saves the video frame.

139
00:08:02.750 --> 00:08:08.690
So it's go ahead and run that and then we're going to do here is just create an instance of YOLO.

140
00:08:08.900 --> 00:08:14.870
So if you're wondering what this YOLO function is if you scroll all the way back up to the top here

141
00:08:15.290 --> 00:08:19.830
you'll notice we say from model that yolo model import yolo.

142
00:08:20.180 --> 00:08:26.110
So if you come back up here into your 06 folder you'll notice there's a model directory.

143
00:08:26.270 --> 00:08:29.330
If you double click on that there's a Yoel modeled up-I.

144
00:08:29.600 --> 00:08:31.260
So you click on you'll model that pie.

145
00:08:31.310 --> 00:08:35.450
And essentially this is the file that's creating the actual Karris model.

146
00:08:35.450 --> 00:08:41.480
So it's designed as a class it's easily imported into other notebooks or other scripts and you can check

147
00:08:41.480 --> 00:08:42.900
this out for the full details.

148
00:08:43.010 --> 00:08:50.120
But essentially what this is doing is designing its way to draw boxes around the images as well as building

149
00:08:50.120 --> 00:08:51.770
the actual network itself.

150
00:08:51.850 --> 00:08:58.550
So that come back here and create an instance of that Yolen model.

151
00:08:58.590 --> 00:08:59.670
All the way back down here.

152
00:08:59.820 --> 00:09:04.700
We went ahead and read in the is that text file and then we'll get all the classes.

153
00:09:04.710 --> 00:09:12.390
So go ahead and run this and this may take a little bit of time to run because it's loading up the H5

154
00:09:12.390 --> 00:09:12.840
file.

155
00:09:12.840 --> 00:09:14.840
So this is going to take a little bit of time.

156
00:09:14.840 --> 00:09:18.390
So let's go ahead and fast forward until the model has been done.

157
00:09:18.390 --> 00:09:19.170
Loading.

158
00:09:19.170 --> 00:09:21.120
Keep in mind it's about a 200 megabyte file.

159
00:09:21.230 --> 00:09:21.640
OK.

160
00:09:21.840 --> 00:09:23.870
So that finished running for me.

161
00:09:23.940 --> 00:09:26.290
You make it a little bit of warning here don't worry.

162
00:09:26.520 --> 00:09:28.210
The model hasn't been compiled yet.

163
00:09:28.440 --> 00:09:32.220
That's actually going compile once we call the detect image.

164
00:09:32.240 --> 00:09:32.580
All right.

165
00:09:32.610 --> 00:09:38.130
So the final step is to actually grab an image to detect objects and objects that are within the Cocco

166
00:09:38.160 --> 00:09:39.960
dataset class list.

167
00:09:39.960 --> 00:09:44.490
Now what I would recommend doing is you can either use the images that we provided for you in the Test

168
00:09:44.490 --> 00:09:49.140
folder or you can download your own image and then place it in the correct directory.

169
00:09:49.530 --> 00:09:52.820
So go ahead and go to splash dot com.

170
00:09:52.820 --> 00:09:54.420
So am on Splash dot com.

171
00:09:54.450 --> 00:09:56.510
It's a bunch of free photos that you can use.

172
00:09:56.730 --> 00:10:00.300
And I would recommend searching for something that's in the cookoo dataset class.

173
00:10:00.320 --> 00:10:06.000
Remember you can go to that Cuco dataset or web site to explore different classes here are going to

174
00:10:06.000 --> 00:10:11.120
search for person car that we can find an image that has both people and cars in it.

175
00:10:11.490 --> 00:10:13.840
So I'm going to scroll down here until I find something good.

176
00:10:13.860 --> 00:10:18.080
So it looks like there's a pretty clear image we have for people.

177
00:10:18.090 --> 00:10:21.470
And then interestingly one of them have their body is covered by this car.

178
00:10:21.480 --> 00:10:25.850
So it'll be interesting to see if the yellow can detect them as a person or not.

179
00:10:25.890 --> 00:10:29.980
And we have one person is totally clear another person is almost totally clear.

180
00:10:30.100 --> 00:10:31.450
And then a person whose feet are missing.

181
00:10:31.470 --> 00:10:33.550
And then we have this large car in the center.

182
00:10:33.550 --> 00:10:35.590
So let's see if we can actually use this image.

183
00:10:35.690 --> 00:10:42.790
I'm going to right click on this and then say save image as and if you come to Ullevi 3 there's an images

184
00:10:42.790 --> 00:10:47.590
folder you can underneath the images folder go ahead and save this file as whatever you want I'm going

185
00:10:47.590 --> 00:10:48.040
to call it.

186
00:10:48.040 --> 00:10:50.630
People underscore car Dodge.

187
00:10:50.710 --> 00:10:52.070
Technically you can save it wherever you are.

188
00:10:52.080 --> 00:10:54.830
We're going to manually tell Yola where to find this file.

189
00:10:54.850 --> 00:10:57.870
So I'm calling it people car or people underscore car.

190
00:10:57.870 --> 00:10:59.150
Go ahead and save that.

191
00:10:59.260 --> 00:11:00.520
Come back and you better laugh.

192
00:11:00.730 --> 00:11:03.220
And you should be able to find it underneath images.

193
00:11:03.220 --> 00:11:07.120
Here we have people underscore car and all you do is provide the file path.

194
00:11:07.120 --> 00:11:14.340
So the file is people underscore car.

195
00:11:14.400 --> 00:11:16.870
And then it's underneath my images folder.

196
00:11:16.890 --> 00:11:22.050
Technically if you're getting any sort of errors just provide the whole file path here again you could

197
00:11:22.140 --> 00:11:24.910
also put it under needs to test folder and then see the results.

198
00:11:24.930 --> 00:11:29.480
It's really up to you just somehow linked the file path to whatever image you're working with then you're

199
00:11:29.490 --> 00:11:34.150
going to read in that image with CB2 and then we're going to detect the image.

200
00:11:34.320 --> 00:11:38.120
And that is what we're going to do here is we're going to write the resulting image.

201
00:11:38.140 --> 00:11:43.710
I mean these images forward slash are asked for results underneath the similar file name.

202
00:11:43.750 --> 00:11:50.430
So inside of this results we have two pictures currently but we expect after rerun this that we should

203
00:11:50.430 --> 00:11:56.190
see the people under score card thought Jay peg and its resulting image underneath the Arrius.

204
00:11:56.190 --> 00:12:00.150
So if you click on people call right now you just see the original image.

205
00:12:00.160 --> 00:12:04.860
So the image is actually quite large meaning text is probably going to be too small for this image but

206
00:12:05.130 --> 00:12:06.680
we should still be able to view the boxes.

207
00:12:06.690 --> 00:12:11.000
We can always change the rectangle sizes if we want as well as the text font size.

208
00:12:11.160 --> 00:12:13.280
So we'll come back to yellow object protection.

209
00:12:13.470 --> 00:12:16.820
And let's go ahead and run this and see if it works.

210
00:12:16.830 --> 00:12:22.380
So we're going to run this and it's going to take maybe around five to 10 seconds depending on how fast

211
00:12:22.380 --> 00:12:23.400
your computer is.

212
00:12:23.580 --> 00:12:25.560
So mine took around six seconds.

213
00:12:25.560 --> 00:12:30.150
I have a pretty fast computer and it looks like it found a person of a score of 99 percent.

214
00:12:30.150 --> 00:12:34.460
Another person will score 75 percent and then a car of a score of ninety eight percent.

215
00:12:34.470 --> 00:12:38.980
So underneath the results I now see people under score card that they peg.

216
00:12:39.210 --> 00:12:43.670
So I'm going to open up that image and then I can see the highlighted objects detected.

217
00:12:43.680 --> 00:12:45.670
So here you see person with nine percent.

218
00:12:45.720 --> 00:12:46.670
So that's clear.

219
00:12:46.890 --> 00:12:48.650
And then I also see the car again.

220
00:12:48.660 --> 00:12:49.430
Ninety eight percent.

221
00:12:49.430 --> 00:12:50.230
So that's pretty good.

222
00:12:50.400 --> 00:12:52.780
And then I see the person here 75 percent.

223
00:12:52.800 --> 00:12:58.620
So notice that even with just a little bit of the leg and foot missing and being covered by the car

224
00:12:58.880 --> 00:13:04.610
that actually detracts a lot from the accuracy that yolo thinks is detecting a person with.

225
00:13:04.650 --> 00:13:09.510
And it's actually not able then to detect these people who have partial coverage.

226
00:13:09.550 --> 00:13:13.280
Notice that they're also looking away so this person is looking away from the camera.

227
00:13:13.380 --> 00:13:15.600
Their legs are covered so it's a little bit harder to tell.

228
00:13:15.600 --> 00:13:18.190
And this person will have their body is missing.

229
00:13:18.480 --> 00:13:20.450
So that's why it's not able to detect those.

230
00:13:20.520 --> 00:13:25.260
And I would recommend that you come to an splosh dotcom and just keep downloading photos and then playing

231
00:13:25.260 --> 00:13:27.540
around with the images and check out the results.

232
00:13:27.540 --> 00:13:29.220
So let's try this one more time.

233
00:13:29.280 --> 00:13:30.710
Here we see four clear people.

234
00:13:30.720 --> 00:13:33.710
And then also a bunch of cars very close to each other.

235
00:13:33.720 --> 00:13:37.400
We'll see if it can detect these four people and then we'll see how it does with the cars.

236
00:13:37.590 --> 00:13:47.190
So I'm going to say save image as and we're going to come back to images and say just for underscore

237
00:13:47.280 --> 00:13:54.950
people that J Pat and save So here you save for underscore people are JP.

238
00:13:55.260 --> 00:14:00.190
Come back to Jupiter lab and underneath the yellow object section will provide that file.

239
00:14:00.240 --> 00:14:07.860
So we'll say for underscore people go ahead and run this may take again somewhere between five and 10

240
00:14:07.860 --> 00:14:09.780
seconds if you're on a fast computer.

241
00:14:09.780 --> 00:14:10.980
So this one was pretty easy.

242
00:14:10.990 --> 00:14:13.840
It just found four people or actually only found three of them.

243
00:14:14.100 --> 00:14:17.450
And then they found the truck.

244
00:14:17.490 --> 00:14:19.820
So let's open up the resulting file and check it out.

245
00:14:19.830 --> 00:14:21.720
We're going to open up on any results.

246
00:14:21.720 --> 00:14:23.470
Now there's a four people that shape.

247
00:14:23.820 --> 00:14:28.800
And you can see here it's able to grab the people and then it's able to actually grab this truck.

248
00:14:28.830 --> 00:14:32.490
That's all the way in the forefront of this image and it's able to do that even if just like half the

249
00:14:32.490 --> 00:14:33.030
truck.

250
00:14:33.180 --> 00:14:35.120
So that's pretty impressive there.

251
00:14:35.130 --> 00:14:35.860
OK.

252
00:14:35.910 --> 00:14:41.670
Again I encourage you to play around with the yellow files as well as different images to see how it

253
00:14:41.670 --> 00:14:44.000
works on your different files.

254
00:14:44.100 --> 00:14:47.290
And you can also run this on detection for video.

255
00:14:47.310 --> 00:14:52.020
Keep in mind that's going to take a lot of time to run in the test because it's essentially just running

256
00:14:52.290 --> 00:14:56.160
Detect images on every single frame and then rewriting all those frames.

257
00:14:56.280 --> 00:15:03.210
So it works the exact same way as this image detection is just does it frame by frame.

258
00:15:03.210 --> 00:15:07.500
Now the last thing I want to mention before we end this lecture is if you scroll back up here you'll

259
00:15:07.500 --> 00:15:10.470
notice that we had two parameters that we provided to yellow.

260
00:15:10.470 --> 00:15:14.760
Those are actually just a threshold primers they can play around with if you come back and open up the

261
00:15:14.760 --> 00:15:16.710
yellow modeled up profile.

262
00:15:16.710 --> 00:15:21.870
You'll notice that there's two parameters you can initialize yellow with and it's the object threshold

263
00:15:22.200 --> 00:15:24.080
and then the and M-S threshold.

264
00:15:24.270 --> 00:15:29.060
So these are thresholds that apply to then be a little more lenient on objects is attacked.

265
00:15:29.070 --> 00:15:35.670
So right now our object threshold essentially how sure we are for an object is set to zero point six.

266
00:15:35.760 --> 00:15:42.690
If we were to rerun this model and go for a much lower threshold maybe like 0.3 we could essentially

267
00:15:42.750 --> 00:15:45.590
rebuild the model or reload it.

268
00:15:45.600 --> 00:15:51.570
But now if this lower threshold and then rerun it on for example to four people that shape and see if

269
00:15:51.570 --> 00:15:54.370
it actually grabs more cars and more people.

270
00:15:54.540 --> 00:15:57.890
Keep in mind the lower threshold there may be some misclassification.

271
00:15:58.110 --> 00:15:59.510
So I'm going to run this again.

272
00:16:00.580 --> 00:16:03.380
And we're running this again on for people that Jay pay.

273
00:16:03.690 --> 00:16:08.490
And we're going to see if we can detect more images given that we're now providing a lower threshold

274
00:16:08.940 --> 00:16:11.070
for actual detection.

275
00:16:11.100 --> 00:16:14.630
So now you'll notice that I was able to detect four people.

276
00:16:14.760 --> 00:16:16.950
So it's going to be able to take that middle person.

277
00:16:16.980 --> 00:16:22.340
They had a score of zero point five four which is why we were able to detect them the first time around.

278
00:16:22.470 --> 00:16:25.340
With a threshold of only 0.6.

279
00:16:25.350 --> 00:16:31.930
So if we come back here and check out the new results or images results for people that jpeg.

280
00:16:32.010 --> 00:16:37.620
Now with that lower threshold if I go ahead and scroll to the right I see this person was now detected

281
00:16:37.660 --> 00:16:44.730
with 0.5 for actually a little surprised that has such a low accuracy for 0.5 for for this person.

282
00:16:45.070 --> 00:16:47.280
To look into this more and see why.

283
00:16:47.280 --> 00:16:51.570
Because this person to me appears just as clear as the three people around him.

284
00:16:51.750 --> 00:16:57.510
So interesting to see that even these really complex neural networks aren't definitely not perfect themselves.

285
00:16:57.510 --> 00:16:58.020
All right.

286
00:16:58.020 --> 00:17:03.590
Hope you enjoyed that and I hope you have fun exploring this YOLO on your own datasets.

287
00:17:03.600 --> 00:17:04.530
We'll see you at the next lecture.
