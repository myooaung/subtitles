WEBVTT
1
00:00:05.280 --> 00:00:09.090
Welcome back everyone in this lecture we're going to go over the solution for the deep learning for

2
00:00:09.090 --> 00:00:10.670
computer vision assessment.

3
00:00:10.710 --> 00:00:11.640
Let's get started.

4
00:00:11.640 --> 00:00:16.730
All right we're going to start off by running task 1 which is just reading in the data as x train y

5
00:00:16.740 --> 00:00:19.590
train x test and Y test.

6
00:00:19.590 --> 00:00:27.750
Next we can visualize the data using import map plot lib that PI plot as Piazzi And just in case you

7
00:00:27.750 --> 00:00:28.190
need to.

8
00:00:28.200 --> 00:00:33.990
You can say that Cutlip in line and let's visualize one of these images will say appeal to him Show

9
00:00:34.560 --> 00:00:38.850
an off the training data of a single image just the very first one.

10
00:00:38.970 --> 00:00:44.790
And technically I'm not using the same map greyscale But if you wanted to you could also passen gray

11
00:00:44.790 --> 00:00:48.210
here to see the object or for the reverse.

12
00:00:48.210 --> 00:00:51.820
You can see this so clearly this some sort of shoe or boot.

13
00:00:51.870 --> 00:00:58.510
And in fact we can actually see what it is if we say why train 0 9.

14
00:00:58.530 --> 00:01:01.960
So if you come back up here 9 that's an ankle boots.

15
00:01:02.280 --> 00:01:02.740
OK.

16
00:01:02.940 --> 00:01:08.910
So we're able to visualize it Task three is to normalize the X train and X test data by dividing it

17
00:01:08.910 --> 00:01:10.290
by the max value.

18
00:01:10.350 --> 00:01:14.570
If you check out what the max value is as you may have guessed it's 255.

19
00:01:14.670 --> 00:01:25.140
So we're going to do is say X train is equal to x train divided by 255 and X test is equal to access

20
00:01:25.260 --> 00:01:27.180
divided by 255.

21
00:01:27.180 --> 00:01:32.430
Next we want to reshape the x rays to include a four then missional of single channel.

22
00:01:32.850 --> 00:01:36.090
So really similar to what we did for the dataset.

23
00:01:36.300 --> 00:01:46.300
I'm going to say strain is equal to x train and I'm going to reshape this to be sixty thousand twenty

24
00:01:46.300 --> 00:01:51.630
eight by twenty eight by one color channel and then I'm going to copy and paste this and I will do the

25
00:01:51.630 --> 00:01:54.160
same for X test.

26
00:01:54.810 --> 00:01:57.930
So I'll come back here do X test X at this time.

27
00:01:57.930 --> 00:02:00.400
This is only 10000 images.

28
00:02:00.420 --> 00:02:00.960
There we go.

29
00:02:00.960 --> 00:02:06.420
So now I have that one single color channel for gray scale that we need to convert the white train and

30
00:02:06.420 --> 00:02:10.160
Y test values to be 100 coded for categorical analysis.

31
00:02:10.770 --> 00:02:17.640
And there's a couple of ways you can import this one way just from carious he tells import to categorical

32
00:02:18.800 --> 00:02:21.000
and then say why train.

33
00:02:21.350 --> 00:02:23.750
And what we need to do is convert these to be 100 coded.

34
00:02:23.750 --> 00:02:32.870
So we'll create why cat train is equal to two categorical and then passen y train will do the same for

35
00:02:33.050 --> 00:02:40.840
y test Y categorical test is equal to two categorical and then passen Y test.

36
00:02:40.850 --> 00:02:41.490
OK.

37
00:02:41.510 --> 00:02:43.860
So we were able to successfully now 100 code.

38
00:02:43.880 --> 00:02:46.590
Our labels actually build the model.

39
00:02:46.760 --> 00:02:50.570
Yet a lot of flexibility you don't have to build a model exactly like this but I'll go ahead and go

40
00:02:50.570 --> 00:02:52.520
through the model we ask for.

41
00:02:52.820 --> 00:03:01.790
We'll say from cares that models import sequential and from carious that layers in poor and will use

42
00:03:01.790 --> 00:03:10.880
thence to the max pool and you can use either Max pool to the OR Max pulling essentially the same thing

43
00:03:11.870 --> 00:03:16.260
and then Flaten will go ahead and create a sequential model.

44
00:03:17.970 --> 00:03:27.980
Then I will add in the convolutional air all these 32 for the filters the kernel size will be four by

45
00:03:27.980 --> 00:03:28.510
four.

46
00:03:29.760 --> 00:03:39.160
And then the input shape will be 28 by 20 by 1 and then we'll choose the activation to be rectified

47
00:03:39.230 --> 00:03:40.300
in your unit.

48
00:03:41.080 --> 00:03:48.960
Then I'll add in a pooling layer so we can say Max pooling to the when you can also use max pool to

49
00:03:48.960 --> 00:03:52.900
the same thing so that equal to 2 by 2.

50
00:03:53.430 --> 00:04:01.640
Next we add in our Flaten layer so that we can handle it with a dense layer so we flatten it out will

51
00:04:01.640 --> 00:04:05.030
add in a dense layer will choose 128 neurons.

52
00:04:05.030 --> 00:04:10.010
This is again something you could have experimented with and we'll choose a rectified linear unit for

53
00:04:10.010 --> 00:04:14.300
the activator and then the last layer is the classifier itself.

54
00:04:14.330 --> 00:04:18.220
So this will be a model and this one should be 10 year bonds.

55
00:04:18.230 --> 00:04:23.270
You don't want flexibility on this one because we have 10 classes and then the activation here is going

56
00:04:23.270 --> 00:04:25.860
to be soft Max.

57
00:04:26.030 --> 00:04:27.780
And finally let's compile this.

58
00:04:27.920 --> 00:04:30.220
So I'll scroll down give ourselves a little more room here.

59
00:04:30.680 --> 00:04:37.990
We will say compile and the last we're going to be using is categorical cross entropy

60
00:04:41.510 --> 00:04:51.890
the optimizer we're using is armis prop and the metrics are running our accuracy.

61
00:04:52.300 --> 00:04:54.840
So let's make sure I have that correct.

62
00:04:56.270 --> 00:04:58.790
Input shape equals.

63
00:04:58.790 --> 00:04:59.570
There you go.

64
00:04:59.960 --> 00:05:00.530
OK.

65
00:05:00.530 --> 00:05:05.570
So I should be able to then get a summary of my model run that and you should see the same parameters

66
00:05:05.570 --> 00:05:07.010
we had before.

67
00:05:07.010 --> 00:05:09.630
Next it's time to train and fit the model.

68
00:05:10.070 --> 00:05:14.320
Hopefully it's all pretty straightforward because it's almost the same process we did in the end this

69
00:05:14.440 --> 00:05:23.400
dataset and then we'll say why cat train and I'll go ahead and train this for let's say 10 e pox go

70
00:05:23.400 --> 00:05:25.900
ahead and run that for 10 epochs.

71
00:05:25.920 --> 00:05:27.820
Fast forward in time until this is done.

72
00:05:27.840 --> 00:05:29.570
All right so that has now finished running.

73
00:05:29.700 --> 00:05:32.340
Let's go ahead and evaluate our model.

74
00:05:32.370 --> 00:05:41.040
We're going to see a model that evaluates and then pass an X test and y categorical test.

75
00:05:41.040 --> 00:05:44.050
So that will evaluate the model and it gives us these two results.

76
00:05:44.070 --> 00:05:50.580
If we're wondering what these actual metrics are we can just type out model metric names and report

77
00:05:50.580 --> 00:05:52.890
back that this is the loss and the accuracy.

78
00:05:52.890 --> 00:05:57.120
So looks like all the tests that we're getting about 90 percent accuracy if we want to actually perform

79
00:05:57.120 --> 00:06:04.940
predictions that we can say from S-K learn metrics import classification report

80
00:06:07.690 --> 00:06:09.520
and then actually conduct the prediction.

81
00:06:09.520 --> 00:06:18.100
So we'll say predictions is equal to model and this case will predict the classes will call predict

82
00:06:18.100 --> 00:06:21.200
classes on that test set.

83
00:06:22.120 --> 00:06:28.080
And now that we have the predictions we're going to do is say print the classification report.

84
00:06:28.950 --> 00:06:35.670
For why underscore test and those predictions and if you run this you should get pretty good results.

85
00:06:35.670 --> 00:06:37.460
Notice you're getting around 90 percent precision.

86
00:06:37.470 --> 00:06:42.120
Recall an EF 1 score which is quite good considering we have 10 different categories and considering

87
00:06:42.120 --> 00:06:44.360
that some of the categories are actually pretty similar.

88
00:06:44.370 --> 00:06:49.680
So if we go back here remember that some of the categories like sneaker and ankle boot those are really

89
00:06:49.680 --> 00:06:54.750
similar categories especially given the fact that you only have 28 by 28 greyscale pictures to work

90
00:06:54.750 --> 00:06:55.290
with.

91
00:06:55.290 --> 00:06:59.790
So probably even a human wouldn't be able to tell if this is really like a sneaker or an ankle boot

92
00:07:00.350 --> 00:07:00.880
OK.

93
00:07:01.110 --> 00:07:02.690
So that's it for this project.

94
00:07:02.700 --> 00:07:06.280
Make sure check out the solutions book in case you have any further questions.

95
00:07:06.300 --> 00:07:07.320
We'll see you at the next lecture.
