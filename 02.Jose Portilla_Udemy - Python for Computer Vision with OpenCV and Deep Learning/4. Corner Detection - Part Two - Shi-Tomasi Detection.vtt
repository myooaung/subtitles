WEBVTT
1
00:00:05.230 --> 00:00:09.970
OK here we are back where we left off last time in the previous lecture we went ahead and showed you

2
00:00:09.970 --> 00:00:15.520
the corner heris detection algorithm and we mark the corners on both a flat chess board and a real image

3
00:00:15.520 --> 00:00:16.810
of a chessboard.

4
00:00:16.810 --> 00:00:22.120
Now we're going to do is use the sheet to Masie algorithm and that one came from the good features to

5
00:00:22.120 --> 00:00:27.730
track paper and what's kind of funny is an open C.V the name of the function is actually good features

6
00:00:27.730 --> 00:00:28.450
to track.

7
00:00:28.480 --> 00:00:30.460
So they just use that whole title.

8
00:00:30.460 --> 00:00:34.770
I went ahead and reloaded all the images since last time we drew on the images.

9
00:00:34.780 --> 00:00:35.850
Now I'm going to reload them.

10
00:00:35.860 --> 00:00:38.160
So I have real chess board flat chess board.

11
00:00:38.200 --> 00:00:40.080
And then they're greyscale versions.

12
00:00:40.300 --> 00:00:45.020
Well we're going to do is actually called the good features the track function.

13
00:00:45.420 --> 00:00:50.500
We're going to take corners is equal to CB2 and just start typing out.

14
00:00:50.520 --> 00:00:54.440
And we should be able to tab autocomplete for good features to track.

15
00:00:54.450 --> 00:00:55.780
So that's the name of the function.

16
00:00:56.040 --> 00:00:58.020
And then we're going to pass in the greyscale version.

17
00:00:58.020 --> 00:01:00.290
So in our case it's gray flat chests.

18
00:01:00.330 --> 00:01:05.610
We'll start at the flat chessboard one and the next parameter we provide is the maximum number of corners

19
00:01:05.610 --> 00:01:06.360
we want.

20
00:01:06.360 --> 00:01:08.640
So this is the maximum number of corners to return.

21
00:01:08.650 --> 00:01:13.470
That's actually really convenient because we can decide hey I only want 10 corners return from this

22
00:01:13.530 --> 00:01:17.020
image and it's going to choose the 10 best corners it seems.

23
00:01:17.040 --> 00:01:22.110
So based on the quality level parameter that we describe then we're going to go ahead and do that so

24
00:01:22.440 --> 00:01:24.780
let's pass and just five corners right now.

25
00:01:25.690 --> 00:01:28.870
Then the next parameter is a quality level parameter.

26
00:01:28.900 --> 00:01:34.840
So the way this works is the parameter value is multiplied by the best corner quality measure which

27
00:01:34.900 --> 00:01:40.300
if you look into the mathematics of it is the minimal eigenvalue or essentially the Harris function

28
00:01:40.300 --> 00:01:41.380
response.

29
00:01:41.420 --> 00:01:46.330
Don't worry too much if you didn't end up reading the papers and are just concerned or some good default

30
00:01:46.330 --> 00:01:50.590
values some good default values are zero point zero or one.

31
00:01:50.890 --> 00:01:56.140
And then the next parameter if you take a look at shift tab is going to be beyond the quality level

32
00:01:56.140 --> 00:01:57.320
the minimum distance.

33
00:01:57.440 --> 00:02:00.900
In that case another good parameter by default is 10.

34
00:02:01.090 --> 00:02:02.820
And then we can kind of play around with that.

35
00:02:03.090 --> 00:02:03.550
OK.

36
00:02:03.790 --> 00:02:07.910
So we have our default parameters the one that you're probably most concerned with is the second one.

37
00:02:08.050 --> 00:02:12.210
How many corners detect if you do not want limits on the maximum number of corners.

38
00:02:12.220 --> 00:02:16.660
You could just provide a negative number and it's going to return back all the corners.

39
00:02:16.670 --> 00:02:18.410
It thinks it found the right now.

40
00:02:18.410 --> 00:02:23.420
I want to show you the results of this poll just say the text five corners using the good features of

41
00:02:23.420 --> 00:02:29.300
track paper that we're going to do is we're actually going to draw on little circles where it found

42
00:02:29.300 --> 00:02:30.320
the corners.

43
00:02:30.350 --> 00:02:35.360
The downside to using the good features the track even though it's a little more convenient to use because

44
00:02:35.360 --> 00:02:37.820
of it's kind of easier to understand parameters.

45
00:02:37.820 --> 00:02:44.980
The downside is it doesn't automatically mark the corners like the corner Harris algorithm did.

46
00:02:44.990 --> 00:02:50.600
So what we will have to do is actually flatten out the array and draw little circles on it.

47
00:02:50.600 --> 00:02:52.150
So let me show you how to do that.

48
00:02:52.250 --> 00:02:56.840
First we're going to do is if we take a look at corners right now there are floating point values and

49
00:02:56.840 --> 00:02:58.070
we need them to be integers.

50
00:02:58.220 --> 00:03:05.210
So you'll say corner's is equal to p i n t 0 and then passing corners and that will automatically make

51
00:03:05.240 --> 00:03:11.060
everything into an integer that will later on allow us to actually draw circles on this.

52
00:03:11.060 --> 00:03:12.550
So let's actually do that now.

53
00:03:12.770 --> 00:03:26.160
We will say for I in corners we're going to say is X come a y is equal to I the Raval or Revelle.

54
00:03:26.410 --> 00:03:29.550
And that's essentially a kind of flattening out that particular array.

55
00:03:29.740 --> 00:03:31.360
And then we're going to draw a circle on that.

56
00:03:31.360 --> 00:03:36.790
So is a circle and we're going to draw onto the flat chessboard.

57
00:03:37.710 --> 00:03:41.370
X Y and then we'll just provide some parameters here.

58
00:03:41.400 --> 00:03:45.230
We'll say three and then the color can be read.

59
00:03:45.250 --> 00:03:51.960
So 255 0 0 and then negative 1 we'll just have it filled in for Thicknesse.

60
00:03:51.990 --> 00:03:57.690
So go ahead and run that and then let's see the results on the flat chessboard image.

61
00:03:57.700 --> 00:04:01.600
So when we run this now I get to see those five corners at detected.

62
00:04:01.600 --> 00:04:06.190
So now is trying actually trying to find way more corners are going to change this 5 to be something

63
00:04:06.190 --> 00:04:12.770
like 64 and rerun this and you can see it's affecting all the possible corners and it should have less

64
00:04:12.820 --> 00:04:14.970
than 64 here but it returned back.

65
00:04:14.980 --> 00:04:15.910
All the best corners.

66
00:04:15.920 --> 00:04:18.010
It thought that it found OK.

67
00:04:18.130 --> 00:04:21.550
Now it's actually try run this on the real image and see how it performs.

68
00:04:21.580 --> 00:04:23.080
We're essentially going to do the same thing.

69
00:04:23.290 --> 00:04:24.970
I'm going to copy a lot of this code.

70
00:04:24.970 --> 00:04:29.040
So we're going to start off of corners and then sort of gray flat chests.

71
00:04:29.050 --> 00:04:31.990
We're going to see gray real chess.

72
00:04:31.990 --> 00:04:35.270
And in this case let's go ahead and find more in the sixty four corners.

73
00:04:35.290 --> 00:04:37.470
We'll find some corners off of the pieces as well.

74
00:04:37.480 --> 00:04:42.280
So we'll say something like 80 and we'll keep the same default values for quality level.

75
00:04:42.350 --> 00:04:43.680
Go ahead and run those.

76
00:04:43.730 --> 00:04:49.150
And in order to mark the corners we'll be doing the exact same thing as last time setting them as integers.

77
00:04:50.190 --> 00:04:54.810
And then copying and pasting this for a loop that actually draws a little circles for us.

78
00:04:54.810 --> 00:05:01.910
So copy that paste it in here and then let's go ahead and show the result we'll say guilty and show

79
00:05:03.060 --> 00:05:04.210
am real chess.

80
00:05:04.260 --> 00:05:06.470
And like I say I drew it on flat chest.

81
00:05:06.480 --> 00:05:09.690
Let's run this again and draw onto real chess.

82
00:05:09.690 --> 00:05:10.380
There we go.

83
00:05:12.350 --> 00:05:13.160
And there you have it.

84
00:05:13.160 --> 00:05:15.650
So these were the corners at the tech that you can see.

85
00:05:15.650 --> 00:05:20.800
Notice now that it actually did detect some of the major grids on the actual chess board itself.

86
00:05:20.810 --> 00:05:25.550
So that's probably a good indication they would begin to need increasing this to maybe detect some more

87
00:05:25.550 --> 00:05:26.290
corners.

88
00:05:26.300 --> 00:05:28.030
So now we asked for 100.

89
00:05:28.220 --> 00:05:31.480
You'll notice now asked to detect some more corners along that board.

90
00:05:31.640 --> 00:05:35.540
However as you ask for more and more corners it's probably going to be in detecting more and more on

91
00:05:35.540 --> 00:05:37.260
the actual pieces themselves.

92
00:05:37.590 --> 00:05:38.080
OK.

93
00:05:38.300 --> 00:05:43.110
So that's how you can use the sheet to maasi algorithm from the good features the track paper.

94
00:05:43.130 --> 00:05:47.660
It's really quite simple you just say good features to track and then you pass in the image that you

95
00:05:47.660 --> 00:05:50.710
want to find the corners you pass and the maximum value of corners.

96
00:05:50.930 --> 00:05:57.730
And then use other parameters which you can default to 0.01 and 10 and adjust as you see necessary.

97
00:05:57.740 --> 00:06:03.290
Then if you actually want to draw circles onto where you found the corners just convert it to integers

98
00:06:03.440 --> 00:06:08.890
and then for I in corners you go ahead and flatten that out to get the actual coordinates of the corners

99
00:06:08.900 --> 00:06:11.300
themselves and then draw little circles on them.

100
00:06:11.300 --> 00:06:16.040
And notice I draw it back onto the real chessboard not the gray one.

101
00:06:16.190 --> 00:06:19.990
And then we have a real chessboard with little circles wherever we found quarters.

102
00:06:20.220 --> 00:06:20.720
OK.

103
00:06:20.960 --> 00:06:21.650
Thanks everyone.

104
00:06:21.740 --> 00:06:25.280
And we'll see you at the next lecture where we begin to discuss edge detection.
