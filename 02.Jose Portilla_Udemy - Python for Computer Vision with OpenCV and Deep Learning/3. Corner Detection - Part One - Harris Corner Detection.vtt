WEBVTT
1
00:00:05.310 --> 00:00:07.230
Welcome back everyone in this lecture.

2
00:00:07.230 --> 00:00:12.670
We're going to talk about corner detection when thinking about corner detection and computer vision

3
00:00:12.700 --> 00:00:15.370
we should first ask ourselves what is a corner.

4
00:00:15.400 --> 00:00:18.490
What defines an actual corner firmly speaking.

5
00:00:18.520 --> 00:00:25.210
A corner is a point whose local neighborhood stands in two dominant and different edge directions.

6
00:00:25.210 --> 00:00:31.270
Or put simply a corner can be interpreted as the junction of two edges or an edge is a sudden change

7
00:00:31.330 --> 00:00:33.970
in image brightness.

8
00:00:33.980 --> 00:00:36.500
Now there are various corner detection algorithms.

9
00:00:36.590 --> 00:00:41.690
We're going to take a look at some of the most popular algorithms pacifically the Harris corner detection

10
00:00:42.080 --> 00:00:49.060
and the sheet Thomasine corner detection hers core of detection was published in 1988 by Chris Harris

11
00:00:49.140 --> 00:00:50.420
and Mike Stevens.

12
00:00:50.440 --> 00:00:56.620
The basic intuition is that courters can be detected by looking for significant change in all directions.

13
00:00:57.730 --> 00:01:00.480
So here we have an example of a corner in an image.

14
00:01:00.640 --> 00:01:07.560
So we have two edges and when they meet there's our corner let's imagine we started scanning and searching

15
00:01:07.560 --> 00:01:13.950
the image looking for corners shifting this particular blue window that we have on top of the image

16
00:01:14.230 --> 00:01:20.440
in any direction would result in a large change in appearance if that particular window happens to be

17
00:01:20.470 --> 00:01:22.310
located on a corner.

18
00:01:23.740 --> 00:01:27.010
Flat regions will have no change in any direction.

19
00:01:27.040 --> 00:01:32.590
So if this particular window happens to be outside of something that contains any edges or corners then

20
00:01:32.620 --> 00:01:34.810
we call this flat because there is no change.

21
00:01:34.840 --> 00:01:40.740
As you scan in any direction if you're on a particular edge you're not going to have a major change

22
00:01:40.800 --> 00:01:42.720
along the direction of the edge.

23
00:01:44.320 --> 00:01:45.970
Which means our general intuition.

24
00:01:46.000 --> 00:01:52.510
And here we see the actual formula for corner Haras detection is that if we're scanning the image with

25
00:01:52.510 --> 00:01:57.670
a window just as we would with a kernel and we notice that there is an area where there's a major change

26
00:01:57.970 --> 00:02:00.430
no matter in what direction we actually scan.

27
00:02:00.550 --> 00:02:03.980
Then we have a good intuition that there's probably a corner there.

28
00:02:04.030 --> 00:02:06.150
It's not just an edge because an edge.

29
00:02:06.190 --> 00:02:11.500
Remember that still won't have much of a change along the edge direction if we actually have a corner

30
00:02:11.560 --> 00:02:16.120
that if we start moving in any direction there we're going to experience a major change.

31
00:02:17.590 --> 00:02:23.300
The sheets of maasi corner of the section was published in 1994 by J She and see Tomasi in their paper.

32
00:02:23.320 --> 00:02:25.160
Good features to track.

33
00:02:25.180 --> 00:02:30.100
It made a small modification to the Harris corner detector which ended up with better results.

34
00:02:30.160 --> 00:02:33.940
So it's actually based almost directly off the Harris detection algorithm.

35
00:02:33.940 --> 00:02:39.880
It just has a small modification and what it does is it changes the scoring function selection criteria

36
00:02:40.180 --> 00:02:46.450
that the heris cornered detection uses and the Harris detection uses that following formula here where

37
00:02:46.450 --> 00:02:52.820
we have Lamda one times planet into minus k times the sum of both Flandres she Thomasine actually just

38
00:02:52.840 --> 00:02:57.790
reduces that to be the minimum of land the one versus lammed that too.

39
00:02:57.820 --> 00:03:02.290
And you can go ahead and check out the resource links for a full breakdown of the actual mathematics

40
00:03:02.290 --> 00:03:04.490
behind these Korder detection algorithms.

41
00:03:04.510 --> 00:03:10.760
But we're going to focus on here is the practical implementation of them with open C-v and Python OK.

42
00:03:11.020 --> 00:03:13.990
So again we're exploring how to use both of the open Seabee library.

43
00:03:13.990 --> 00:03:18.340
Be sure to check out the resource links and I've included the original publications for each of those

44
00:03:18.340 --> 00:03:22.690
papers if you're interested in exploring the full mathematical details behind the course of detection

45
00:03:22.690 --> 00:03:23.650
algorithms.

46
00:03:23.650 --> 00:03:26.090
Let's open up Juber the lab and get started.

47
00:03:26.140 --> 00:03:27.770
Right in a fresh Jupiter notebook.

48
00:03:27.970 --> 00:03:33.720
I'm going to start by reading out some images and the first one is going to be just a flash flash chessboard

49
00:03:33.760 --> 00:03:34.470
image.

50
00:03:34.660 --> 00:03:42.200
So we'll say C-v to him read and then I'm going to call data forward slash flight chess board that peahen

51
00:03:42.200 --> 00:03:43.610
G.

52
00:03:43.630 --> 00:03:49.750
And then I will say flat chess is equal to CB2 the CBT color.

53
00:03:49.960 --> 00:03:52.810
And we're going to convert this to just be red green blue.

54
00:03:52.810 --> 00:04:01.360
So it looks strange flat chests and then CB2 color blue green red to red green blue.

55
00:04:01.600 --> 00:04:01.840
OK.

56
00:04:01.850 --> 00:04:04.150
So let's actually show what that image looks like.

57
00:04:06.400 --> 00:04:11.380
So we say flat chests and here's our chessboard.

58
00:04:11.390 --> 00:04:12.260
It's essentially flat.

59
00:04:12.270 --> 00:04:13.550
It's an eight big grid.

60
00:04:13.710 --> 00:04:18.150
And later on we're actually going to talk of a grid detection on how to detect grid like patterns in

61
00:04:18.150 --> 00:04:19.050
normal images.

62
00:04:19.080 --> 00:04:23.160
But really the reason we bring this up here is because there's some really clear corners of the text

63
00:04:23.160 --> 00:04:27.450
here essentially where each of these edges meet that's going to be all I should say where each of these

64
00:04:27.450 --> 00:04:30.740
squares me that's going to be a corner versus the edges themselves.

65
00:04:30.750 --> 00:04:31.610
That's just an edge.

66
00:04:31.620 --> 00:04:36.150
So we have clear corners and clear edges and we're going to compare it to see how the algorithms work

67
00:04:36.390 --> 00:04:37.790
to find those corners.

68
00:04:37.920 --> 00:04:47.050
Then what I'm also going to do is load this up in greyscale so I will say Gray flat chests is equal

69
00:04:47.050 --> 00:05:00.300
to CB2 CBT color call a flat board and then changes to color underscore and this will go to BGR to gray

70
00:05:02.480 --> 00:05:03.110
run that.

71
00:05:03.200 --> 00:05:06.580
And let's show you what that looks like although you probably have a good guess of what it looks like

72
00:05:06.810 --> 00:05:14.750
is essentially just a greyscale version which if we do see map is equal to gray then we can see the

73
00:05:14.750 --> 00:05:16.000
grayscale there.

74
00:05:16.010 --> 00:05:20.330
All right so we have this flat chessboard in color and this flat chessboard in grayscale.

75
00:05:20.390 --> 00:05:23.360
I'm also going to upload a picture of a real chessboard.

76
00:05:23.420 --> 00:05:26.510
So let's load that up as real chess.

77
00:05:27.110 --> 00:05:31.710
We will say real chess is equal to CB2 image read.

78
00:05:32.060 --> 00:05:39.560
I would say data and then call real chessboard that jpeg and then say real chess and fix the color on

79
00:05:39.560 --> 00:05:41.650
that one just so we can visualize it.

80
00:05:42.620 --> 00:05:48.070
CVT color real chess C-v to color.

81
00:05:48.280 --> 00:05:54.550
And this is blue green red to green blue show that image.

82
00:05:55.510 --> 00:05:57.680
And here we have the real chessboard.

83
00:05:57.790 --> 00:06:01.620
So this one's quite a bit more complicated than just a flat image the image.

84
00:06:01.660 --> 00:06:04.080
It's pretty obvious where the corners are going to be.

85
00:06:04.120 --> 00:06:08.560
So we should be able to detect all these inner corners the ones on the actual edge are probably not

86
00:06:08.560 --> 00:06:11.030
going to help protect those just because it's at the edge of the image.

87
00:06:11.080 --> 00:06:16.630
But we should at least expect to see that this integrate all the corners will be detected for this real

88
00:06:16.630 --> 00:06:17.010
image.

89
00:06:17.020 --> 00:06:22.060
It's actually going to be a little bit harder because there might be defined corners in the actual pieces

90
00:06:22.060 --> 00:06:23.110
themselves.

91
00:06:23.110 --> 00:06:27.940
So we should be able to find corners in the actual board and that will probably also find corners in

92
00:06:27.940 --> 00:06:29.260
the pieces themselves.

93
00:06:29.260 --> 00:06:34.480
So for example the Rook's here on the edge it looks like they have square corners and maybe you can

94
00:06:34.480 --> 00:06:39.570
even think of the bishops as having corners because it's essentially a not such high resolution image.

95
00:06:39.610 --> 00:06:42.270
So what maybe a curve actually looks like a corner.

96
00:06:42.270 --> 00:06:47.050
So will be fun to explore this image as well and let's make a greyscale version of this one as well

97
00:06:47.050 --> 00:06:56.880
so I'll say Gray real chess is equal to CB2 CVT color.

98
00:06:57.010 --> 00:07:08.600
And then we're going to pass in the real chessboard and say C-v to color underscore are to gray.

99
00:07:08.850 --> 00:07:16.290
And then I will say peel t him show Gray real chess see map equals to gray.

100
00:07:16.430 --> 00:07:19.950
And as you might expect that is just the Grayskull version of that chessboard.

101
00:07:20.000 --> 00:07:24.230
So now that we have our images let's actually apply Harris Gorant detection on both of them.

102
00:07:24.230 --> 00:07:25.370
See how it performs.

103
00:07:25.370 --> 00:07:30.430
And then we'll also apply this sheet to maasi corner detection from the good features the track paper.

104
00:07:30.470 --> 00:07:38.030
So we're going to do here is the following we'll say great as a variable and where to convert the grayscale

105
00:07:38.030 --> 00:07:39.460
image to float values.

106
00:07:39.620 --> 00:07:46.910
Because if we look at the one we have right now for the gray flat chests right now they're all integers.

107
00:07:46.970 --> 00:07:50.710
And we're going to either be floating point values for the corner hairs detection algorithm.

108
00:07:50.930 --> 00:07:57.050
So we're going to say is gray is equal to and MP 32.

109
00:07:57.080 --> 00:08:02.310
And then just pasan the gray flat chests so we'll do the flat one first and if we take a look at right

110
00:08:02.310 --> 00:08:03.720
now it's the same values.

111
00:08:03.720 --> 00:08:04.880
Now they just have at this point.

112
00:08:04.890 --> 00:08:06.630
So they're floating point values.

113
00:08:06.630 --> 00:08:07.980
Then it's time for the corner.

114
00:08:07.980 --> 00:08:11.440
Harris detection algorithm and this was actually pretty straightforward.

115
00:08:11.460 --> 00:08:19.920
You say the destination variable name then CB2 and then call corner and we'll say corner hairs.

116
00:08:20.300 --> 00:08:21.920
You provide the source image.

117
00:08:21.920 --> 00:08:27.530
In our case it's that grayscale image and then you have a couple of parameters the block size parameter

118
00:08:27.620 --> 00:08:29.640
is essentially the neighborhood size.

119
00:08:29.780 --> 00:08:34.100
And that's how it actually the text the corner eigenvalues and vectors.

120
00:08:34.130 --> 00:08:36.310
So a common block size to choose is to.

121
00:08:36.320 --> 00:08:38.870
But this is something else you can experiment with.

122
00:08:39.290 --> 00:08:47.750
So if say block size is 2 and then we have case size as an x parameter case size is the aperture parameter

123
00:08:47.750 --> 00:08:49.210
for the Sobol operator.

124
00:08:49.400 --> 00:08:55.370
So previously we talked about Sobol operators and x ray x and y gradients So the corner Harris detection

125
00:08:55.370 --> 00:08:57.030
algorithm actually uses that.

126
00:08:57.230 --> 00:09:01.520
And part of it is going to be the kernel size for that Sobol operator.

127
00:09:01.520 --> 00:09:04.600
So we'll say OK size is three.

128
00:09:04.830 --> 00:09:09.000
And then we have the K value that's just k by itself.

129
00:09:09.000 --> 00:09:13.770
And this is the hairiest detector free parameter and I would encourage you to see the formula in the

130
00:09:13.770 --> 00:09:15.080
documentation string.

131
00:09:15.270 --> 00:09:20.010
So if you actually look at the documentation string and do shift tab here it will actually show the

132
00:09:20.010 --> 00:09:21.270
full formulas for this.

133
00:09:21.270 --> 00:09:26.040
So this one that we're looking at right now that's the Harris detector for the parameter what we're

134
00:09:26.040 --> 00:09:29.710
going to do is we're just going to keep that to 0.04.

135
00:09:29.850 --> 00:09:33.960
That's a pretty good default value usually but again you can adjust these as necessary starting off

136
00:09:33.960 --> 00:09:37.730
from these defaults and then moving up if necessary.

137
00:09:37.770 --> 00:09:40.450
So that's going to be the corner Harris protection algorithm.

138
00:09:40.710 --> 00:09:43.810
And then the result is dilated for marking the corners.

139
00:09:43.860 --> 00:09:46.580
So it's not important to the actual quarter of the election.

140
00:09:46.710 --> 00:09:49.740
This is just so we can actually plot the points on the image below.

141
00:09:49.740 --> 00:09:59.540
So what I will do is take that result and then say the T is equal to CB2 and dilates and direly it's

142
00:09:59.540 --> 00:10:03.320
just a morphological operator just as we discussed with erosion.

143
00:10:03.320 --> 00:10:05.570
So we're going to dilate this just a little bit.

144
00:10:05.630 --> 00:10:07.600
None is the second parameter repasts there.

145
00:10:07.760 --> 00:10:11.060
And again this doesn't really have much of the corner Harris detection algorithm.

146
00:10:11.060 --> 00:10:18.150
It's really just so I can show you the results so we're going to do is there is a threshold for an optimal

147
00:10:18.150 --> 00:10:18.710
value.

148
00:10:18.780 --> 00:10:21.870
And it may vary depending on the image where we're going to do.

149
00:10:21.870 --> 00:10:23.220
Here is the following.

150
00:10:23.550 --> 00:10:26.970
I'm going to take my original flat chessboard image.

151
00:10:26.970 --> 00:10:30.440
Remember this is the one in color and then I'm going to say the following.

152
00:10:31.250 --> 00:10:37.220
I'm going to say wherever the result are at the destination result of my corner Here's algorithm is

153
00:10:37.220 --> 00:10:44.410
greater than 0.01 times the max value.

154
00:10:44.450 --> 00:10:48.850
So let's think about what this is actually doing 0.01 times the max value.

155
00:10:48.860 --> 00:10:52.080
That's essentially 1 percent of the max value.

156
00:10:52.080 --> 00:10:58.760
So ever my result of the corner hairs is greater than 1 percent of the max value what I'm going to do

157
00:10:59.390 --> 00:11:03.840
is re-assign that to be equal to the color red.

158
00:11:04.030 --> 00:11:07.650
I remember 2 5 5 0 0 this is just R.G. B channels.

159
00:11:07.650 --> 00:11:11.020
So I'm saying we're ever at the result of this quarter.

160
00:11:11.020 --> 00:11:17.560
Harris image the actual image had a greater than 1 percent of the max value then that's a quarter that

161
00:11:17.560 --> 00:11:18.310
was detected.

162
00:11:18.400 --> 00:11:22.840
Again this is really just for visualization and you have to do this Dileep process first to do that

163
00:11:22.840 --> 00:11:23.930
visualization.

164
00:11:24.280 --> 00:11:26.950
So we run this and let's see the results

165
00:11:30.630 --> 00:11:31.200
Okay.

166
00:11:31.260 --> 00:11:31.980
And there we have it.

167
00:11:32.010 --> 00:11:37.910
We were able to text all the image all the corners inside the internal image these corners on the edge.

168
00:11:37.950 --> 00:11:42.660
Unfortunately it's not able to detect those because if you think about it there's nothing else on the

169
00:11:42.660 --> 00:11:44.510
edge for it to see into.

170
00:11:44.520 --> 00:11:46.890
So it just sees essentially a flat space.

171
00:11:46.890 --> 00:11:51.720
So all of this on the outside according to the corner here is that section that's a flat space because

172
00:11:51.720 --> 00:11:55.670
it didn't see the other edge that is technically on the border or on the outside.

173
00:11:55.820 --> 00:12:00.240
Well because that is then filled out maybe our own custom edge on the very border and the tech of those

174
00:12:00.240 --> 00:12:01.280
corners as well.

175
00:12:01.470 --> 00:12:05.850
But for the corners that are there it looks like it was able to tuck them perfectly again just by using

176
00:12:05.850 --> 00:12:06.740
a sort of formula.

177
00:12:06.750 --> 00:12:09.140
We went ahead and mark them all as read.

178
00:12:09.710 --> 00:12:10.170
OK.

179
00:12:10.290 --> 00:12:15.350
Now let's try on the actual real chessboard and see how that performs.

180
00:12:15.360 --> 00:12:24.410
So we're going to do the same thing here I want to say Gray is equal to float 32 and passen Gray.

181
00:12:24.420 --> 00:12:35.860
Real chess board and say C-v to corner Harris source is equal to Gray and I'm going to be using the

182
00:12:35.860 --> 00:12:40.510
same parameters as I did last time and I encourage you to use these as well and then adjust as you need

183
00:12:40.800 --> 00:12:41.700
fit.

184
00:12:41.830 --> 00:12:46.620
So case size will say three and then equal to zero point zero or four.

185
00:12:46.870 --> 00:12:49.940
OK so these are just kind of default values that we're using here.

186
00:12:50.020 --> 00:12:59.470
So we're going to run that and then in order to actually visualize this we'll say CB2 dilate DST none.

187
00:13:00.010 --> 00:13:07.750
And then we're going to do the same sort of thresholding we will say real chess DST is greater than

188
00:13:07.750 --> 00:13:18.530
0.01 times Diest T-Max and set that equal to red so 2 5 5 0 0.

189
00:13:18.540 --> 00:13:22.920
OK so now let's see where it found corners on that real chessboard image.

190
00:13:23.900 --> 00:13:26.460
And you'll notice now it's affecting way more corners.

191
00:13:26.620 --> 00:13:30.640
So luckily for us it detected all the major corners on the actual chess board.

192
00:13:30.640 --> 00:13:34.900
What's interesting is it actually then it detect the corners on the outside right here.

193
00:13:34.960 --> 00:13:38.650
So I think those were corners enough and I can see how it could think those are flat.

194
00:13:38.770 --> 00:13:44.320
It's not as obvious as the dark and white tiles here on a chess board but it also tested a lot of corners

195
00:13:44.410 --> 00:13:46.440
on the black pieces.

196
00:13:46.490 --> 00:13:51.140
That's something you have to keep in mind as you work with Harris corner detection especially if you

197
00:13:51.140 --> 00:13:55.580
didn't think it was going to actually record those pieces as having corners.

198
00:13:55.610 --> 00:13:56.220
All right.

199
00:13:56.300 --> 00:14:00.320
In part two what we're going to do is expand on this and show you how to perform the sheets of maasi

200
00:14:00.320 --> 00:14:01.400
corner the doctor.

201
00:14:01.400 --> 00:14:02.610
It's a very similar process.

202
00:14:02.630 --> 00:14:06.830
And in fact I think it's actually a little easier to use but we'll go ahead and explore it in the very

203
00:14:06.830 --> 00:14:07.740
next lecture.

204
00:14:07.750 --> 00:14:08.330
I'll see either.
