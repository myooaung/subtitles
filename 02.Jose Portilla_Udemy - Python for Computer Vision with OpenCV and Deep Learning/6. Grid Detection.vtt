WEBVTT
1
00:00:05.680 --> 00:00:06.750
Welcome back everyone.

2
00:00:06.820 --> 00:00:12.160
And this lecture we're going to briefly talk about grades section specifically the two built in functions

3
00:00:12.160 --> 00:00:17.690
that are in open CV that can help you find grids if the need arises often.

4
00:00:17.690 --> 00:00:24.170
Cameras can create a distortion in an image such as real distortion or tangential distortion in a good

5
00:00:24.170 --> 00:00:28.760
way to account for these sort of distortions when performing operations like object tracking is to have

6
00:00:28.760 --> 00:00:32.480
a recognizable pattern attached to the object being tracked.

7
00:00:32.480 --> 00:00:38.390
So often what you'll see happen is if you're trying to track maybe a car using some sort of CV application

8
00:00:38.420 --> 00:00:44.060
and you're just training the actual application to work then you'll put a grid like pattern on the car

9
00:00:44.270 --> 00:00:47.690
so you can keep track of the angle of the car as you go along.

10
00:00:47.690 --> 00:00:54.120
So here we can see an example of grid tracking where there's a cube mounted virtually onto this grid

11
00:00:54.140 --> 00:00:57.770
that is in real life as the grid moves that cube will then be tracked.

12
00:00:57.770 --> 00:01:05.070
So grid patterns are often used to calibrate cameras and track motion open C-v has built in methods

13
00:01:05.070 --> 00:01:07.680
for tracking grids and chessboard like patterns.

14
00:01:07.680 --> 00:01:11.990
Let's go ahead and just quickly explore them with the chessboard images that we've already seen.

15
00:01:12.210 --> 00:01:13.960
OK here I am in the Jupiter notebook.

16
00:01:13.980 --> 00:01:17.910
I went ahead and just did the normal imports although we won't be using them all.

17
00:01:17.910 --> 00:01:20.860
We will be using C-v to and map plot lib.

18
00:01:20.910 --> 00:01:24.400
The image we're going to be working with is that flat chessboard image.

19
00:01:24.420 --> 00:01:26.230
Let me go ahead and load it again.

20
00:01:26.580 --> 00:01:33.810
Will say CB2 image read and then data and the one we're going to read is called Flat chessboard and

21
00:01:33.810 --> 00:01:36.790
let's go ahead and just display that image so we can see what it looks like.

22
00:01:37.620 --> 00:01:39.960
We'll see flat chests and then just run that.

23
00:01:40.170 --> 00:01:41.980
And there we have the image itself.

24
00:01:42.240 --> 00:01:46.890
Something to keep in mind here is for this sort of grid detection.

25
00:01:47.190 --> 00:01:50.300
This particular grid detection methods we're showing here.

26
00:01:50.490 --> 00:01:55.090
The grid has to essentially look like a chessboard or be a formalized grid.

27
00:01:55.260 --> 00:01:59.330
This is not looking for something that kind of looks like a chess board or kind of looks like a grid.

28
00:01:59.490 --> 00:02:04.700
The grid should be specifically made to look like some sort of checkerboard or chess board type image

29
00:02:04.980 --> 00:02:09.990
and then placed on whatever you're trying to calibrate your camera with or whatever you're trying to

30
00:02:09.990 --> 00:02:10.670
analyze.

31
00:02:10.680 --> 00:02:11.640
So keep that in mind.

32
00:02:11.730 --> 00:02:15.440
It's really only specifically looking for this sort of pattern.

33
00:02:15.530 --> 00:02:18.160
OK so how do we actually find the chessboard corners.

34
00:02:18.410 --> 00:02:23.280
Well we just call CB2 and then say find chess.

35
00:02:23.300 --> 00:02:27.360
And if you hit tab here it's going to auto complete to fine chessboard corners.

36
00:02:27.390 --> 00:02:31.970
Again this is just specifically looking for things that look like a chessboard grid that you pass in

37
00:02:31.970 --> 00:02:33.260
the image.

38
00:02:33.260 --> 00:02:37.340
So we pass the image variable and then you passen the grid size.

39
00:02:37.430 --> 00:02:45.020
In our case the entire image is eight by eight but it's not going to be able to detect the outer chess

40
00:02:45.110 --> 00:02:49.880
squares because they're missing an edge since they are all the way to the end of the image.

41
00:02:49.880 --> 00:02:55.220
So is that all we're going to do is for the second parameter which is the size of the grid we will say

42
00:02:55.220 --> 00:02:56.220
7 by 7.

43
00:02:56.240 --> 00:02:58.280
Because this is 8 by 8.

44
00:02:58.280 --> 00:03:00.960
It's not going to be able to detect that very last one.

45
00:03:01.430 --> 00:03:08.660
So let's say it's seven by seven and return back to variables which we can unpack found and corner's

46
00:03:09.850 --> 00:03:15.670
found is just a really useful boolean indicating whether or not it was able to find the chessboard type

47
00:03:15.760 --> 00:03:21.160
corners so often if you're kind of dealing with something that looks a little sloppy or a little blurry

48
00:03:21.500 --> 00:03:25.160
it will say found is false and then it won't return anything Corneau corners.

49
00:03:25.180 --> 00:03:31.240
So it's nice to be able to use found as an if statement so if found prints we found corner's else Printz

50
00:03:31.390 --> 00:03:35.730
we did not find corner's if you take a look at the actual corner's object.

51
00:03:35.950 --> 00:03:41.740
It's essentially a list of coordinates that show you where it actually found the corners of the chessboard

52
00:03:42.110 --> 00:03:46.310
and we're going to able to use that in conjunction of another function called draw chessboards corners.

53
00:03:46.540 --> 00:03:48.290
Let's go ahead and do that.

54
00:03:48.370 --> 00:03:56.790
I'm going to say CB2 and then type out draw chessboards corners go ahead and have autocomplete that

55
00:03:57.210 --> 00:03:59.410
we're just going to pass in our image.

56
00:03:59.610 --> 00:04:05.740
So we're going to say flat chess or you can also make a copy of this and then we'll say the following.

57
00:04:05.760 --> 00:04:13.260
We'll say that it was seven by seven pass in the corners and then you also pass and found.

58
00:04:13.260 --> 00:04:19.410
So basically this algorithm or the find chessboard corner's function feeds directly into the draw chessboard

59
00:04:19.410 --> 00:04:22.290
corners and we can go ahead to do that.

60
00:04:22.980 --> 00:04:25.680
And that will draw on place on this image.

61
00:04:25.680 --> 00:04:29.770
So sometimes you may want to make a copy if necessary but let's see the result.

62
00:04:30.000 --> 00:04:38.930
I'm going to say peel t show and we run that we a flat chessboard image and now we see the open CV draw

63
00:04:38.930 --> 00:04:44.120
chessboard corners and what it does is it just marks the corners and then it marks the rows in different

64
00:04:44.120 --> 00:04:48.780
colors so you kind of get this rainbow like row and ends up connecting them all with a zigzag line.

65
00:04:48.780 --> 00:04:53.240
It looks like this so it follows along and that it connects to the next one and it looks something like

66
00:04:53.240 --> 00:04:53.700
that.

67
00:04:53.930 --> 00:04:54.370
OK.

68
00:04:54.530 --> 00:04:56.960
So two really simple and easy to use functions.

69
00:04:56.960 --> 00:05:01.820
The main thing you have to be worried about is if your image is actually clean enough as a chessboard

70
00:05:01.820 --> 00:05:02.600
to read.

71
00:05:02.600 --> 00:05:07.590
This one is really easy because it's literally just the kind of two that mentionable cartoon chessboard.

72
00:05:07.670 --> 00:05:09.550
But often in real life it's a lot trickier.

73
00:05:09.560 --> 00:05:14.780
Which is why this found variable will be useful to use as an if statement of whether or not you can

74
00:05:14.780 --> 00:05:17.770
actually perform the draw chessboard of corners.

75
00:05:17.790 --> 00:05:23.230
Now we can actually look for other grid like patterns in other common grid like pattern.

76
00:05:23.360 --> 00:05:25.160
Our circle based grids.

77
00:05:25.160 --> 00:05:34.080
So I'm going to load up another image called dots and say CB2 image read data.

78
00:05:34.120 --> 00:05:36.250
And this one is called Dot grid.

79
00:05:36.420 --> 00:05:39.620
PNB let me just show you what it looks like first.

80
00:05:40.820 --> 00:05:43.340
And we can see here we have a grid of dots.

81
00:05:43.350 --> 00:05:46.910
This is another really common pattern just a grid of circles or a grid of dots.

82
00:05:47.100 --> 00:05:51.840
We can see here that even these aren't like perfectly clean circles and we're going to have another

83
00:05:51.840 --> 00:05:54.210
function that can find these as well.

84
00:05:54.420 --> 00:06:00.300
This one is called Seabee to find the circles grid.

85
00:06:00.300 --> 00:06:06.030
And then we get a passen dots and then you're going to pass in the dots you're actually looking for.

86
00:06:06.030 --> 00:06:10.760
So in this case if you count them up we're looking for a 10 by 10 grid.

87
00:06:11.070 --> 00:06:14.980
And the final parameter here is the way it actually searches for it.

88
00:06:15.040 --> 00:06:19.800
Are you going to use the default value which is the way it calibrates to find it.

89
00:06:19.830 --> 00:06:26.550
It's Kalib underscore Seabee underscore and you can kind of have autocomplete this if you want CB underscore

90
00:06:26.550 --> 00:06:27.630
symmetric grid.

91
00:06:27.660 --> 00:06:29.680
So just looking for circle grid.

92
00:06:29.730 --> 00:06:31.940
This is the actual method it's going to be using.

93
00:06:32.220 --> 00:06:36.890
Go ahead and run that check that it actually found them and found this true.

94
00:06:36.900 --> 00:06:40.940
So it found the actual grid which means we can then actually draw on this as well.

95
00:06:41.100 --> 00:06:49.080
And these corners are actually in the same format as the corners from find the chessboard image.

96
00:06:49.140 --> 00:06:54.420
So then we can actually use the draw chessboard corners function even if we're looking for a circle

97
00:06:54.450 --> 00:06:54.960
grid.

98
00:06:55.230 --> 00:07:04.460
So I'm going to copy this and then let me come back up here and comment that out go into copy draw chessboards

99
00:07:04.460 --> 00:07:08.870
corners and in this case we're going to draw on the original dots image.

100
00:07:09.050 --> 00:07:16.900
It was a 10 by 10 grid of dots and then we just pass in corners and found will go ahead and run that.

101
00:07:17.090 --> 00:07:23.460
And then after you see the Saray what's going to happen is I can actually show the resulting image since

102
00:07:23.460 --> 00:07:24.600
it was drawn on.

103
00:07:24.980 --> 00:07:27.270
And let's go ahead and check it out.

104
00:07:27.290 --> 00:07:35.130
It should be dots and then we can see all the dots so it ends up plotting at each particular color and

105
00:07:35.130 --> 00:07:38.310
then each new row gets a new color of the rainbow and so on.

106
00:07:38.370 --> 00:07:41.030
And that's how the draw chessboard corners works.

107
00:07:41.040 --> 00:07:41.530
OK.

108
00:07:41.640 --> 00:07:46.090
So this is often used for camera calibration we've really only scratched the surface here.

109
00:07:46.110 --> 00:07:51.000
The main reason we want to show this lecture is because it's a direct extension of finding corners and

110
00:07:51.000 --> 00:07:51.880
finding edges.

111
00:07:52.020 --> 00:07:55.670
It's just two functions that are conveniently built into open C-v again.

112
00:07:55.870 --> 00:08:02.910
CB2 fine circle's grid and then C-v to find chessboards corners and then if you ever want to draw on

113
00:08:02.910 --> 00:08:09.090
the original image you can say CB2 draw chessboard corners it returns array but also will affect and

114
00:08:09.090 --> 00:08:11.310
draw on the image you pasan.

115
00:08:11.310 --> 00:08:15.660
Thanks and we'll see you at the next lecture where we begin to talk about contour detection.
