WEBVTT
1
00:00:05.240 --> 00:00:07.030
Welcome back everyone in this lecture.

2
00:00:07.040 --> 00:00:10.300
We're going to discuss edge detection.

3
00:00:10.320 --> 00:00:14.820
We're going to specifically talk about the canny edge detector which is one of the most popular edge

4
00:00:14.820 --> 00:00:16.430
detection algorithms.

5
00:00:16.440 --> 00:00:22.020
It was developed in 1986 by John Kenney and it's actually a multi-stage algorithm so I'm going to quickly

6
00:00:22.020 --> 00:00:26.270
show you the actual steps that happen internally with the county detection.

7
00:00:26.370 --> 00:00:29.210
But when we actually implement it we don't really see that much of it.

8
00:00:29.250 --> 00:00:31.770
We're just going to be a simple one line called Open.

9
00:00:31.920 --> 00:00:36.300
So don't worry too much if you kind of don't understand all the steps since it's pretty high level just

10
00:00:36.300 --> 00:00:39.120
seeing it in text instead of reading the full paper.

11
00:00:39.120 --> 00:00:44.190
But if you're really interested in the multistage facet of the canny edge detector then check up the

12
00:00:44.190 --> 00:00:48.230
resource link for the Wikipedia article which actually explains all these steps.

13
00:00:48.330 --> 00:00:50.090
And then also the paper itself.

14
00:00:50.300 --> 00:00:50.610
OK.

15
00:00:50.640 --> 00:00:54.530
So it's going to briefly just show you and explain the steps that are taken.

16
00:00:54.690 --> 00:01:00.300
The first step is detection is to apply a Gaussian filter to smooth out the image in order to remove

17
00:01:00.330 --> 00:01:01.260
noise.

18
00:01:01.260 --> 00:01:06.780
Keep in mind as we mentioned in the blurring and smoothing lecture when you're applying edge detection

19
00:01:06.900 --> 00:01:13.290
on an image that has a lot going on in it maybe has lots of background noise or just a lot of background

20
00:01:13.290 --> 00:01:17.680
features in a lot of foreground features you may end up detecting way too many edges.

21
00:01:17.730 --> 00:01:22.860
So most likely you're going to have to apply your own smoothing and own blurring technique first before

22
00:01:22.860 --> 00:01:25.030
the one that's built into the county as detection.

23
00:01:25.050 --> 00:01:26.720
But just want to mention that.

24
00:01:26.940 --> 00:01:31.980
So after you apply the Gaussian filter to smooth out the image what happens is you find the intensity

25
00:01:31.980 --> 00:01:34.400
gradients of the image.

26
00:01:34.620 --> 00:01:40.860
Then the next step in the county election process is the algorithm will apply non maximum suppression

27
00:01:41.190 --> 00:01:47.600
to get rid of spurious response to edge detection then it's going to apply double threshold to the Terman

28
00:01:47.620 --> 00:01:48.800
potential edges.

29
00:01:50.060 --> 00:01:55.820
And that it's going to track edge by Mr. resus which is just going to finalizes the Tuckson of edges

30
00:01:56.120 --> 00:02:00.380
by suppressing all the other edges that are weak and not connected to strong edges.

31
00:02:00.380 --> 00:02:05.030
So essentially it's kind of a filtration process of getting rid of the weaker edges and only finding

32
00:02:05.030 --> 00:02:07.340
the really strong ones.

33
00:02:07.540 --> 00:02:12.520
Now keep in mind as I mentioned for high resolution images where you only want general edges it's usually

34
00:02:12.520 --> 00:02:16.350
a good idea to play your own custom Blar before applying the Kenni algorithm.

35
00:02:16.360 --> 00:02:20.130
And we're actually going to show that right now when we jump to the Jupiter notebook.

36
00:02:20.320 --> 00:02:27.310
Keep in mind the Keni algorithm also requires a user to decide on low and high threshold values in our

37
00:02:27.310 --> 00:02:27.700
notebook.

38
00:02:27.700 --> 00:02:32.140
We're going to provide an equation for picking a good starting point for threshold values.

39
00:02:32.290 --> 00:02:36.790
But often depending on the image you're probably going to need to manually adjust that low and high

40
00:02:36.790 --> 00:02:40.680
threshold just to see what looks good and what it just makes sense to you.

41
00:02:40.840 --> 00:02:46.240
So it is a bit of a manual process at first in deciding that low and high threshold values but hopefully

42
00:02:46.240 --> 00:02:48.970
the equation we provide gives you a good starting point.

43
00:02:49.200 --> 00:02:49.660
OK.

44
00:02:49.870 --> 00:02:52.230
Let's begin exploring all of this in Jupiter lab.

45
00:02:52.500 --> 00:02:57.430
OK so here I am in my Jupiter notebook and I went ahead and ran the several imports that we usually

46
00:02:57.430 --> 00:02:58.160
do.

47
00:02:58.330 --> 00:03:01.150
And then what I'm going to do isn't going to read in the image.

48
00:03:01.150 --> 00:03:06.690
And in this case the image I'm going to read in is him read and we're going to work with that puppydog

49
00:03:06.760 --> 00:03:13.990
face which is Samis face that jpeg and let's go ahead and show that image in this case.

50
00:03:13.990 --> 00:03:18.550
I'm not worrying about performing color correction on this image because I'm only performing edge detection.

51
00:03:18.550 --> 00:03:22.050
I don't really care if the blue and red channels happen to be switched.

52
00:03:22.120 --> 00:03:26.740
Let's first show you how you can run the canny edge detector and then we'll talk about different ways

53
00:03:26.740 --> 00:03:32.980
to try to get better results if you want to just straight up run the Keni as the doctor just say C-v

54
00:03:32.980 --> 00:03:37.360
to Dakini and then you provide the image you want to run it on.

55
00:03:37.630 --> 00:03:44.490
And there's two main parameters there's threshold 1 and then there's threshold 2.

56
00:03:44.860 --> 00:03:49.900
We're going to start off by just setting these both as the middle value of what a pixel can be.

57
00:03:49.900 --> 00:03:52.710
So pixel going to be between zero and 225.

58
00:03:52.760 --> 00:03:57.320
So we'll set them both to be the medium value and we'll see how that works.

59
00:03:59.420 --> 00:04:02.590
So if we just show these edges we can already see right off the bat.

60
00:04:02.660 --> 00:04:08.600
It tends to actually get the edge and general outline of the dog so I can see Sammie's ear here a little

61
00:04:08.600 --> 00:04:09.370
bit of its mouth.

62
00:04:09.590 --> 00:04:13.560
But it's also picking up a lot of edges that are probably just noise.

63
00:04:13.580 --> 00:04:17.090
So there's two different approaches we can take to this and we're probably going have to use a combination

64
00:04:17.090 --> 00:04:17.980
of both.

65
00:04:17.990 --> 00:04:23.240
One is actually blurring the image to get rid of certain details and just get a general edge detection

66
00:04:23.660 --> 00:04:28.270
and the other one is playing around with the threshold values and you can go ahead and just play around

67
00:04:28.270 --> 00:04:29.740
the threshold values right now.

68
00:04:30.540 --> 00:04:31.450
If you wanted to.

69
00:04:31.560 --> 00:04:39.730
So we can make the min and max just 0 and 255 and see how that performs and you've probably noticed

70
00:04:39.730 --> 00:04:44.780
that it also is a performance super great but it tends to actually pick up some stronger edges so there's

71
00:04:44.780 --> 00:04:49.620
a little bit slight differences between these thresholds versus these ones in the middle.

72
00:04:49.780 --> 00:04:54.280
But let's go ahead and show you a formula that may help you out for choosing a threshold in particular

73
00:04:54.310 --> 00:04:55.760
after you've blurred the image.

74
00:04:55.870 --> 00:04:57.800
This formula tends to work quite well.

75
00:04:57.850 --> 00:05:01.760
So the first we're going to do is calculate the median pixel value.

76
00:05:02.140 --> 00:05:09.610
So I won't say that the median value of my pixel is the median and then I get a pass in the image and

77
00:05:09.610 --> 00:05:11.710
it looks like my median value is 64.

78
00:05:11.740 --> 00:05:16.060
So it's actually not a super bright image or at least have very strong values in any particular color

79
00:05:17.900 --> 00:05:23.810
that we get is that a lower bound threshold and the upper bound threshold essentially a threshold one

80
00:05:23.870 --> 00:05:24.870
and Threshold two.

81
00:05:25.070 --> 00:05:30.770
And the really common formula for detecting these thresholds is to actually just do a comparison between

82
00:05:30.770 --> 00:05:35.320
the lowest possible versus some sort of percentage of the median value.

83
00:05:35.330 --> 00:05:46.000
So you often see a formula like this integer of the max value between 0 and 70 percent of the median

84
00:05:46.000 --> 00:05:46.780
value.

85
00:05:46.780 --> 00:05:57.850
So what this is doing is it's saying Set the lower threshold to either 0 or 70 percent of the median

86
00:05:57.850 --> 00:06:03.420
value is actually 30 percent below the median which ever is greater.

87
00:06:03.490 --> 00:06:05.580
So zero right now that's our floor.

88
00:06:05.740 --> 00:06:09.970
If this value 70 percent times the median value happens to be a little higher then we'll go ahead and

89
00:06:09.970 --> 00:06:10.720
choose that one.

90
00:06:10.720 --> 00:06:17.230
And that sets our lower threshold and we can do something really similar for the upper threshold except

91
00:06:17.230 --> 00:06:19.030
we're going to go in the opposite direction.

92
00:06:19.090 --> 00:06:29.140
We're going to set this to be the smaller between the absolute limit of 255 and then 1.3 or 30 percent

93
00:06:29.200 --> 00:06:30.900
above the median value.

94
00:06:30.910 --> 00:06:41.340
So the way three this one is the upper threshold so that either 130 percent of the median.

95
00:06:41.530 --> 00:06:50.500
So 30 percent above the median or the max value of 255 which ever is smaller because if you go above

96
00:06:50.500 --> 00:06:54.760
2 to 55 we no longer want to choose 1.3 times the median value.

97
00:06:54.760 --> 00:06:56.400
Something to note here against 64.

98
00:06:56.410 --> 00:06:57.900
That's a pretty low median value.

99
00:06:57.910 --> 00:07:01.660
So we probably have to even adjust the upper limit a little higher.

100
00:07:02.080 --> 00:07:02.770
Okay.

101
00:07:02.920 --> 00:07:06.880
So we'll go ahead and run those thresholds and see if that improves anything in this case.

102
00:07:06.880 --> 00:07:08.260
I don't believe it actually does.

103
00:07:08.380 --> 00:07:15.370
So I'm going to copy and paste this candy edges command pasted in here and then we have threshold and

104
00:07:15.370 --> 00:07:23.270
we're going to set that to lower and upper respectively go ahead and run that and actually look like

105
00:07:23.270 --> 00:07:24.040
an improved anything.

106
00:07:24.040 --> 00:07:25.610
In fact it's almost performing worse.

107
00:07:25.610 --> 00:07:30.680
We can see here that's affecting way too many edges and you may want to do then is if you actually take

108
00:07:30.680 --> 00:07:34.810
a look at the upper limit that's going to be 83 which is quite low.

109
00:07:34.940 --> 00:07:39.920
So you may want to begin starting adjusting things like expanding the upper threshold limit to go higher

110
00:07:39.920 --> 00:07:40.420
and higher.

111
00:07:40.430 --> 00:07:44.930
So maybe as you go plus 100 begins to generalize a little bit more.

112
00:07:44.990 --> 00:07:48.640
But really the thing that's actually going to help you here is blurring the image first.

113
00:07:48.740 --> 00:07:53.090
So let's go ahead and blur that image and you can use any of the blurring techniques that we've learned

114
00:07:53.090 --> 00:07:58.380
about already but but going to see we to blur and apply just a kernel to it.

115
00:07:58.520 --> 00:08:02.810
So we'll say image and then the kernel size for the blurring kernel.

116
00:08:02.810 --> 00:08:09.780
I will say that's a 5 by 5 and now I'm going to again copy and paste the edges but it's that I'm doing

117
00:08:09.780 --> 00:08:10.630
it on my image.

118
00:08:10.650 --> 00:08:16.240
I'm going to do it on my blurred image and I will use the upper and lower ones that I calculated earlier.

119
00:08:16.260 --> 00:08:19.560
So I will say lower that upper.

120
00:08:19.560 --> 00:08:25.050
So now when I run this and I see the edges now I'm definitely seeing the stronger edges of the dog's

121
00:08:25.050 --> 00:08:25.550
face.

122
00:08:25.560 --> 00:08:28.320
And in fact that's probably the best commonly seen so far.

123
00:08:28.410 --> 00:08:31.750
If I compare to the other ones they're still picking up a lot of noise.

124
00:08:31.800 --> 00:08:36.340
So compared to the original image the one that's really showing the strong edges of the dog's face is

125
00:08:36.330 --> 00:08:39.540
this last one after we've been able to blur the image a little further.

126
00:08:39.540 --> 00:08:43.660
And if you want you can then experiment also if the kernel side here you know maybe expand it.

127
00:08:43.710 --> 00:08:47.910
See if that continues to blur the image until you only see what you're looking for.

128
00:08:48.140 --> 00:08:54.300
And you can also do that expand maybe the upper limit here it's like 50 and so reduces kernel size.

129
00:08:54.300 --> 00:08:55.740
That's a little too blurred.

130
00:08:56.030 --> 00:08:57.680
Do a five by five there.

131
00:08:57.930 --> 00:09:04.110
Run this and you can begin to have some sort of happy medium where the edges you want to detect without

132
00:09:04.110 --> 00:09:05.660
detecting too much noise around it.

133
00:09:05.760 --> 00:09:08.560
So again we can clearly see here the dogs face.

134
00:09:08.710 --> 00:09:09.210
OK.

135
00:09:09.310 --> 00:09:15.510
Main thing to know here is just call CB2 doc candy passing your image and then using these formulas

136
00:09:15.540 --> 00:09:20.220
you can play around as good starting points of your lower and upper threshold but more likely than not

137
00:09:20.310 --> 00:09:21.510
you should blur the image.

138
00:09:21.630 --> 00:09:25.910
And then also play around the threshold them out until you see something satisfactory.

139
00:09:25.950 --> 00:09:26.460
Thanks.

140
00:09:26.520 --> 00:09:27.720
And we'll see you in the next lecture.
