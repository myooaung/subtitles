1
00:00:05,300 --> 00:00:10,520
Welcome back so far we've seen how we can stream video from a U.S. Speed camera and how it can open

2
00:00:10,580 --> 00:00:12,710
already existing video files.

3
00:00:12,710 --> 00:00:15,550
Now let's see how we can actually draw on video.

4
00:00:15,590 --> 00:00:18,120
We'll first learn how to draw a static object.

5
00:00:18,230 --> 00:00:21,070
Then we'll learn how to actually interactively draw on a video.

6
00:00:21,260 --> 00:00:22,430
Let's get started.

7
00:00:22,820 --> 00:00:25,830
Let's begin by working through how we can draw on the video.

8
00:00:25,850 --> 00:00:29,960
Hopefully you notice that the procedure is actually really similar to how we already draw on a regular

9
00:00:29,960 --> 00:00:30,630
image.

10
00:00:30,670 --> 00:00:37,480
It's just in this case we'll be drawing on a frame we'll import CB2 and then we'll start the capture

11
00:00:38,170 --> 00:00:40,500
CB2 the video capture.

12
00:00:40,540 --> 00:00:43,430
And I'm going to be streaming directly from a USP camera.

13
00:00:43,600 --> 00:00:46,920
And let's go ahead and grab the width and height of the stream.

14
00:00:46,940 --> 00:00:53,230
You remember we can do this with Cap get and then we're going to do is pass in here the property we

15
00:00:53,230 --> 00:00:54,460
actually want to grab.

16
00:00:54,460 --> 00:01:01,690
So in this case I want to grab capture prop and it's going to be the frame with.

17
00:01:01,900 --> 00:01:06,660
And as I mentioned before we usually want to cast this as an integer to avoid any errors.

18
00:01:06,880 --> 00:01:12,550
So I'm going to copy and paste this line and will do the exact same thing for the with Susan for the

19
00:01:12,550 --> 00:01:15,890
hype so let's capture the heights.

20
00:01:16,660 --> 00:01:20,520
And instead of saying with here we'll say height OK.

21
00:01:20,530 --> 00:01:25,780
So there's our width and height and we're going to be doing is we're going to be drawing a rectangle

22
00:01:25,840 --> 00:01:29,700
onto the actual stream we'll say while true

23
00:01:32,470 --> 00:01:39,520
grab threats and Frane from reading that current capture and remember the frame is essentially just

24
00:01:39,520 --> 00:01:40,900
a single image.

25
00:01:40,900 --> 00:01:48,520
So we can use CB2 rectangle just as we've done in the past we passed in the frame and then we're going

26
00:01:48,520 --> 00:01:53,330
to pass in the actual coordinates of the first point and the second point.

27
00:01:53,380 --> 00:01:58,540
Now in deciding the coordinates we're going to be calculating them based off the width and height of

28
00:01:58,540 --> 00:02:00,190
the actual current capture.

29
00:02:00,190 --> 00:02:05,730
So let's do this let's go ahead and start off our first point.

30
00:02:05,740 --> 00:02:12,310
X and Y at let's say the halfway point of the width and the halfway point of the height we'll say with

31
00:02:13,990 --> 00:02:18,460
forward slash forward slash 2 and Y is equal to height.

32
00:02:18,460 --> 00:02:20,500
Forward slash force slash to.

33
00:02:20,500 --> 00:02:24,940
Now the reason I'm doing two forward slashes is because I want to make sure that these x and y coordinates

34
00:02:25,360 --> 00:02:30,050
stay as integers because depending on your brake system you sometimes get errors if you try passing

35
00:02:30,050 --> 00:02:31,480
in a float there.

36
00:02:31,480 --> 00:02:39,100
So what I mean by that is if I were to say for instance 10 divided by five you'll notice that I get

37
00:02:39,100 --> 00:02:41,020
back to point zero.

38
00:02:41,050 --> 00:02:47,130
However if I say 10 forward slash fours slash five I get back an integer 2.

39
00:02:47,170 --> 00:02:50,410
So this four slash four slash allows us to return an integer.

40
00:02:50,500 --> 00:02:55,240
That way we make sure these coordinates stay as integers and we'll do the same thing for the width and

41
00:02:55,240 --> 00:02:56,700
height.

42
00:02:56,710 --> 00:03:03,090
So what I'm going to do is the width and height of the rectangle width and height of rectangle.

43
00:03:03,100 --> 00:03:08,770
So not the actual video stream just at the rectangle will have that be one fourth of the actual video

44
00:03:08,770 --> 00:03:09,330
stream.

45
00:03:09,400 --> 00:03:17,000
So I say with divided by four and then height divided by four.

46
00:03:17,040 --> 00:03:19,310
Again keeping things as integers.

47
00:03:19,380 --> 00:03:27,210
So this is going to calculate the top left corner and then for the bottom right corner.

48
00:03:27,440 --> 00:03:35,330
Well we're going to do is say that the bottom right corner will be the Xplornet Plus with and then the

49
00:03:35,330 --> 00:03:37,200
y coordinate plus height.

50
00:03:37,430 --> 00:03:42,070
And hopefully when we actually draw this will become more clear what this actually ends up looking like.

51
00:03:42,080 --> 00:03:49,340
So the frame for point one will just passen the x and y we just cultivated and then 4.2 will add in

52
00:03:49,820 --> 00:03:51,800
the width and height that we just calculated.

53
00:03:51,890 --> 00:03:53,390
And you can play around these values.

54
00:03:53,570 --> 00:03:58,220
Right now we're just basing them off the width of the height that way depending on what your USP camera

55
00:03:58,220 --> 00:04:02,070
is you should be able to use this exact same code that I'm using.

56
00:04:02,300 --> 00:04:06,200
If you actually know that mentions that you're recording it you could pasand straight up values here

57
00:04:06,230 --> 00:04:07,970
if you want it to.

58
00:04:08,090 --> 00:04:09,750
Then when you decide on a color.

59
00:04:09,980 --> 00:04:18,440
So let's just make this some primary color well say 0 0 2 5 5 and then give this rectangle a thickness

60
00:04:18,440 --> 00:04:19,630
just as we've done before.

61
00:04:19,910 --> 00:04:22,020
Well go just say four pixel thickness.

62
00:04:22,250 --> 00:04:30,210
And then once you've actually drawn the rectangle then we'll show the frame say frame show that frame

63
00:04:30,570 --> 00:04:32,710
it's really important that you don't reverse the order here.

64
00:04:32,730 --> 00:04:35,810
Otherwise you'll be showing the frame and then drawing a rectangle on it.

65
00:04:35,850 --> 00:04:40,380
You want to draw the rectangle first and then show that frame.

66
00:04:40,620 --> 00:04:46,860
Then after that will give a command that allows us to escape from this we'll say Wait key Wait a millisecond

67
00:04:47,220 --> 00:04:58,290
and then we'll give the Cuban as our exit 1 0 x f equals equals ordinal Q And then we will break out

68
00:04:58,290 --> 00:04:59,740
of this.

69
00:04:59,980 --> 00:05:07,880
Finally we'll go ahead and release to capture and say CB2 destroy all windows.

70
00:05:07,890 --> 00:05:08,310
OK.

71
00:05:08,460 --> 00:05:10,820
So let's kind of quickly go over what we did here.

72
00:05:10,860 --> 00:05:12,150
We're capturing the video.

73
00:05:12,150 --> 00:05:15,720
We're grabbing the width and height of the actual video being returned.

74
00:05:15,720 --> 00:05:21,960
We decided to set the top left corner at the middle point of the width and the height and then the actual

75
00:05:22,050 --> 00:05:26,670
width and height of the rectangle itself will be a quarter of the whole size of the image.

76
00:05:26,910 --> 00:05:31,830
And then we went ahead and drew that rectangle and then we're showing it the frame after trying to rectangle

77
00:05:31,830 --> 00:05:32,400
on it.

78
00:05:32,400 --> 00:05:35,120
So let's run this and see if it works.

79
00:05:35,130 --> 00:05:35,990
So there we have it.

80
00:05:36,150 --> 00:05:38,910
We can see the rectangle right around here.

81
00:05:38,910 --> 00:05:45,020
And what I'm going to do now is to escape and then we're going to show you now is how to interactively

82
00:05:45,050 --> 00:05:46,500
draw on a video.

83
00:05:46,730 --> 00:05:53,750
So often we're going to be doing in our course is actually just these x and y coordinates will be defined

84
00:05:53,780 --> 00:05:57,710
by some sort of object detection such as where it happened to see a face.

85
00:05:57,830 --> 00:06:01,130
But just in case you ever want to interactively draw something on a video.

86
00:06:01,280 --> 00:06:03,110
We'll go ahead and show you how you can do that.

87
00:06:03,110 --> 00:06:07,550
Keep in mind we don't really do this that often during the course but I do want to show it because this

88
00:06:07,550 --> 00:06:09,100
is now the appropriate time to show that.

89
00:06:09,200 --> 00:06:14,150
OK so let's get started showing you how you can actually interactively draw on a video as a quick note

90
00:06:14,270 --> 00:06:16,530
if you get any errors during this process.

91
00:06:16,550 --> 00:06:18,720
There is a huge potential for typos here.

92
00:06:18,770 --> 00:06:24,280
So please try running our provided notebooks and files first before posting the Kewney forums.

93
00:06:24,290 --> 00:06:27,840
If you get any sort of error because there's lots of potential for typos here.

94
00:06:27,950 --> 00:06:28,460
OK.

95
00:06:28,670 --> 00:06:31,280
So here I am at our previous cell.

96
00:06:31,400 --> 00:06:35,270
I don't delete the stuff we actually don't need since we're not drawing based on the height and width

97
00:06:35,300 --> 00:06:38,540
any more and instead will be the finding ourselves based on our mouse click.

98
00:06:38,550 --> 00:06:43,150
I don't delete those lines here and then I will also delete this rectangle line.

99
00:06:43,280 --> 00:06:49,070
So we're just starting with the very basics of capturing a video displaying it and then at the end breaking

100
00:06:50,200 --> 00:06:56,530
what we need to do is to find a couple of things we're going to be defining a callback function and

101
00:06:56,530 --> 00:07:00,870
this callback function is going to be drawing a rectangle.

102
00:07:01,660 --> 00:07:09,700
And then we're also going to be defining some global variables and then on this frame we're going to

103
00:07:09,700 --> 00:07:16,120
be drawing on the frame based off the global variables.

104
00:07:18,350 --> 00:07:20,200
And then also pass the global variables.

105
00:07:20,210 --> 00:07:22,440
What we're going to need to do is make the connection.

106
00:07:22,440 --> 00:07:25,220
So connect to the callback.

107
00:07:25,400 --> 00:07:26,810
Those are main steps.

108
00:07:26,810 --> 00:07:30,470
Let me quickly show you what the finished product is going to look like before we actually code this

109
00:07:30,470 --> 00:07:30,880
out.

110
00:07:30,890 --> 00:07:33,050
So this is what the finished product should look like.

111
00:07:33,050 --> 00:07:37,210
Notice I'm going to click once left down and you see this little red circle there.

112
00:07:37,340 --> 00:07:42,110
Then I'm going to choose point two for my rectangle and then it's going to create the rectangle.

113
00:07:42,140 --> 00:07:48,590
And if I click again will erase that rectangle draw and you circle points and then again do a rectangle

114
00:07:48,600 --> 00:07:51,780
So that's essentially going to be doing here interactively drawing.

115
00:07:51,800 --> 00:07:57,680
Let's get started going to quit this and we're going to Flete Dakota have there because that was the

116
00:07:57,680 --> 00:08:00,750
actual code for running this and going to type it out ourselves.

117
00:08:01,250 --> 00:08:01,500
OK.

118
00:08:01,520 --> 00:08:04,590
So the callback function I'm going start at the very basics here.

119
00:08:04,730 --> 00:08:06,060
We'll call it the f.

120
00:08:06,350 --> 00:08:10,330
Draw a rectangle.

121
00:08:10,460 --> 00:08:17,460
And as always these callback functions are going to take an event the x and y coordinates and then loops

122
00:08:17,510 --> 00:08:23,660
the flags and then program and then right now actually leave a pass here.

123
00:08:23,790 --> 00:08:30,540
Let's find the global variables the global variables are going to be point one of the rectangle which

124
00:08:30,540 --> 00:08:36,490
will start off 0 0 and then point to the rectangle which will also start off at 0 0.

125
00:08:36,600 --> 00:08:37,650
Remember point 1.

126
00:08:37,750 --> 00:08:41,680
Then make sure that T either see already commencing typos.

127
00:08:41,940 --> 00:08:46,250
So point 1 that's the top left point to the bottom right.

128
00:08:46,260 --> 00:08:54,620
We're also going to create two tracker's top left clicked and started off as false and then bottom right

129
00:08:55,310 --> 00:08:59,040
clicked and also started off as false.

130
00:08:59,180 --> 00:09:03,470
And what these are going to indicate is whether or not I clicked the point that I intend to be the top

131
00:09:03,470 --> 00:09:03,900
left.

132
00:09:04,040 --> 00:09:09,060
And whether or not I could the point that I intend to be the bottom right and as those get clicked up

133
00:09:09,060 --> 00:09:10,910
the point one and point do.

134
00:09:10,910 --> 00:09:14,060
Once these are both true that means I'm ready to draw my rectangle.

135
00:09:14,370 --> 00:09:17,190
OK then let's connect to the callback.

136
00:09:17,810 --> 00:09:19,750
So we already are capturing this.

137
00:09:19,760 --> 00:09:24,650
Let me just put this right here on Connect to callback just for organization purposes.

138
00:09:24,650 --> 00:09:32,780
So I have my capture and just as we did for images I'll create a named window and I'm going to call

139
00:09:32,780 --> 00:09:42,690
it test and then I will connect this to my callback will say CB2 and we'll set a mouse callback also

140
00:09:42,750 --> 00:09:46,980
on test and then we'll connect that to that draw rectangle function.

141
00:09:46,980 --> 00:09:49,450
And notice here this is still called frame on the show.

142
00:09:49,560 --> 00:09:51,210
And I want to make sure that name matches.

143
00:09:51,480 --> 00:09:53,250
So we'll also call that test.

144
00:09:53,340 --> 00:09:59,130
So we've connected to the callback we have are global variables the only two steps left is to draw on

145
00:09:59,130 --> 00:10:04,490
the frame based off the global variables and then use this callback function to actually update the

146
00:10:04,530 --> 00:10:05,820
global variables.

147
00:10:05,820 --> 00:10:10,770
I'm going to start by defining how we're going to draw on the frame that way this callback function

148
00:10:10,800 --> 00:10:12,020
makes more sense.

149
00:10:12,240 --> 00:10:13,100
We'll come over here.

150
00:10:13,110 --> 00:10:16,440
Drawing on the frame based off the variables.

151
00:10:16,640 --> 00:10:17,950
This is we're going to do.

152
00:10:18,060 --> 00:10:24,900
We're going to say if the top left has been clicked that means top left is now equal to true and it's

153
00:10:24,900 --> 00:10:25,890
up to you how you want to do this.

154
00:10:25,890 --> 00:10:26,760
Top left click.

155
00:10:26,790 --> 00:10:28,140
That's already a boolean.

156
00:10:28,140 --> 00:10:35,510
So overbilling is say is top left clicked colon but it's more or if it's easier for to read if you say

157
00:10:35,550 --> 00:10:36,300
equals true.

158
00:10:36,450 --> 00:10:40,330
You can do that as well but since it's already a boolean to me this is a little more readable.

159
00:10:40,350 --> 00:10:45,540
Will say if the top left has been clicked meaning if it's true I'm going to draw a little circle the

160
00:10:45,540 --> 00:10:49,770
circle just going to be a little marker for me to kind of keep track of where we are.

161
00:10:49,770 --> 00:10:54,980
So I'm going to draw a circle on the frame that I just read in in the line above here frame capture

162
00:10:54,980 --> 00:11:01,580
read that little circle is going to have a center around point 1.

163
00:11:01,620 --> 00:11:08,560
So that means when I actually click for the first time I need to define 0.1 topless being clicked or

164
00:11:08,560 --> 00:11:10,810
draw a circle at point 1.

165
00:11:10,810 --> 00:11:12,830
Let's give it a radius of five.

166
00:11:12,850 --> 00:11:17,140
It's up to you how big of a circle you probably noticed I was clicking at little circle and let's give

167
00:11:17,140 --> 00:11:18,050
it a color.

168
00:11:18,310 --> 00:11:23,280
Well go ahead and have the color be red so 0 0 2 5 5 remember for open C.v.

169
00:11:23,470 --> 00:11:25,050
It's going to go blue green red.

170
00:11:25,060 --> 00:11:25,820
So that's white.

171
00:11:25,840 --> 00:11:27,350
That last one is 2 5 5.

172
00:11:27,610 --> 00:11:29,050
And let's fill in the circle.

173
00:11:29,080 --> 00:11:31,320
We'll say thicknesses equal to negative 1.

174
00:11:31,360 --> 00:11:37,240
This is just so I can actually have a visual marker of where I clicked on the top left.

175
00:11:37,240 --> 00:11:45,220
Now I will say if the top left has been clicked and the bottom right has also been clicked then I'm

176
00:11:45,220 --> 00:11:47,230
ready to actually draw my rectangle.

177
00:11:47,230 --> 00:11:55,660
By this point I show up with point 1 and point to the find will say CB2 rectangle and I'm going to draw

178
00:11:55,660 --> 00:11:57,190
directly on the frame.

179
00:11:57,220 --> 00:12:03,170
My point one may point to my color choice which is go ahead and also make it red.

180
00:12:03,490 --> 00:12:08,450
And then my thickness in this case will give it a thickness of something like 30 pixels up to you again

181
00:12:08,530 --> 00:12:11,140
whatever thickness you want and that's all I need to do.

182
00:12:11,140 --> 00:12:14,670
So this is going to draw a little circle.

183
00:12:14,680 --> 00:12:19,240
When it click on top left and when I clicked both top left and the bottom right then I'll finish off

184
00:12:19,240 --> 00:12:20,600
by drawing my rectangle.

185
00:12:20,620 --> 00:12:22,300
So that's step number three.

186
00:12:22,300 --> 00:12:27,570
The last one is how do we actually update point 1 and point 2 while we're at it.

187
00:12:27,640 --> 00:12:30,480
Also top left click and bottom right clicked.

188
00:12:30,490 --> 00:12:33,930
So let's make sure we actually hit bottom right clicked Yep we're good to go there.

189
00:12:35,810 --> 00:12:41,110
Well actually need to read in these variables on a global will read in.

190
00:12:41,250 --> 00:12:47,390
Point one point to we'll read and top left click and we'll read them lips.

191
00:12:47,400 --> 00:12:51,760
Bottom right clicked and I encourage you to use tab autocomplete to save some time.

192
00:12:52,020 --> 00:12:56,010
And let's get rid of this pass.

193
00:12:56,050 --> 00:12:58,220
There's going to be a mouse click.

194
00:12:58,240 --> 00:13:05,960
So I'll say if the event is equal to CB2 events will go with left button down.

195
00:13:06,130 --> 00:13:18,160
So once that click that left button down if top left click is equal to true and bottom right clicked

196
00:13:18,360 --> 00:13:20,090
is all also equal to true.

197
00:13:20,190 --> 00:13:23,870
Again I could have written this just if top left click and bottom right clicked.

198
00:13:23,910 --> 00:13:29,160
So if both of those have been equal to true that means the rectangles already been drawn which means

199
00:13:29,160 --> 00:13:31,770
this is essentially the reset.

200
00:13:31,800 --> 00:13:34,700
So we want to check first if we're going to reset or not.

201
00:13:34,710 --> 00:13:40,100
So this has reset the rectangle essentially erase the rectangle.

202
00:13:40,320 --> 00:13:44,730
So if I want to reset everything then that means I essentially want to reset the global variables as

203
00:13:44,730 --> 00:13:45,500
they are here.

204
00:13:45,720 --> 00:13:47,940
So it's going to copy this and paste it.

205
00:13:48,120 --> 00:13:55,890
Meaning I will reset point 1 to be zero point two to be zero and say top left is now false and bottom

206
00:13:55,890 --> 00:13:56,840
right is now false.

207
00:13:57,000 --> 00:14:07,240
So this is resetting the rectangle and it checks if the rectangle is already there because the top left

208
00:14:07,300 --> 00:14:10,350
click and the bottom right clicked OK.

209
00:14:10,580 --> 00:14:14,190
So let's say I haven't actually clicked anything yet.

210
00:14:14,240 --> 00:14:22,160
That means if my top left clicked is equal to false then I haven't clicked first so I'm going to say

211
00:14:22,170 --> 00:14:29,190
Point 1 is equal to wherever I clicked which is going to be at the x and y passed back by that callback.

212
00:14:29,250 --> 00:14:36,210
So point 1 is now equal to x and y and I will update this to say yes I did actually already click Top

213
00:14:36,210 --> 00:14:36,610
left.

214
00:14:36,630 --> 00:14:40,770
Notice here that differences between one of these in double equal signs versus single equal sign so

215
00:14:40,770 --> 00:14:43,530
I'm assigning top left as now true.

216
00:14:43,530 --> 00:14:45,420
Now the top left click is true.

217
00:14:45,420 --> 00:14:51,170
It means point 1 has been defined which means top left click is going to be true here.

218
00:14:51,180 --> 00:14:54,630
So I to draw a circle based off just point 1.

219
00:14:54,630 --> 00:15:01,750
Now if I've already clicked top left but I haven't clicked the bottom right then I have the third situation.

220
00:15:01,830 --> 00:15:13,130
And then finally what I'll say here is Elif bottom right clicked is equal to false then take point two

221
00:15:14,180 --> 00:15:16,910
and said equal to x y and then set.

222
00:15:16,910 --> 00:15:20,750
Bottom right clicked equal to true.

223
00:15:20,780 --> 00:15:22,790
Notice here how this last one is.

224
00:15:22,870 --> 00:15:26,860
If that way it works in conjunction with the top left being clicked.

225
00:15:26,860 --> 00:15:32,720
So now after running through this I should have top left clicked as true and bottom right click this

226
00:15:32,720 --> 00:15:36,100
true meaning we set both point 1 and point 2.

227
00:15:36,110 --> 00:15:39,260
These are both now true meaning this is going to execute.

228
00:15:39,260 --> 00:15:40,870
Top left clicked and bottom right.

229
00:15:40,910 --> 00:15:41,880
They both clicked.

230
00:15:41,900 --> 00:15:44,870
So I draw a rectangle with point 1 and point 2.

231
00:15:44,900 --> 00:15:47,350
Let's run this and see if it works.

232
00:15:47,360 --> 00:15:48,040
So I run this.

233
00:15:48,050 --> 00:15:51,720
It's connected to my Web cam right now on a click once to my left.

234
00:15:51,830 --> 00:15:53,310
So it looks like I have the circle there.

235
00:15:53,330 --> 00:15:55,790
Let me click again and I draw the rectangle.

236
00:15:55,790 --> 00:15:58,130
Let's see if redrawing a new rectangle works.

237
00:15:58,130 --> 00:16:03,620
I click over here that rectangle is now been reset to 0 0 and then I click over here and looks like

238
00:16:03,710 --> 00:16:05,500
my rectangles are working just fine.

239
00:16:05,830 --> 00:16:06,210
OK.

240
00:16:06,320 --> 00:16:07,780
So that's all there is to it.

241
00:16:07,790 --> 00:16:10,700
Let me quickly do a review of everything we've done.

242
00:16:10,700 --> 00:16:16,010
Keep in mind the n won't really be interactively drawing on too many videos but all we're doing here

243
00:16:16,070 --> 00:16:17,880
is we set the callback function.

244
00:16:17,920 --> 00:16:19,150
It's checking for events.

245
00:16:19,190 --> 00:16:23,940
It's having some sort of logical operation with these variables to keep track of things.

246
00:16:23,960 --> 00:16:25,520
It has these global variables.

247
00:16:25,520 --> 00:16:30,230
We do the connection and then based off those global variables that are updated in the callback function

248
00:16:30,320 --> 00:16:35,390
we can then draw on the frame we want to make sure that we draw the frame first before we show it.

249
00:16:35,390 --> 00:16:36,560
All right that's it.

250
00:16:36,590 --> 00:16:41,410
If you're getting any errors please make sure to run our provided code that rakli because there's lot

251
00:16:41,430 --> 00:16:43,070
potential for typos here.

252
00:16:43,100 --> 00:16:45,040
Thanks and we'll see at the next lecture.
