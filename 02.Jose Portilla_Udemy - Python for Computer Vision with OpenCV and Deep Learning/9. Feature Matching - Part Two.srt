1
00:00:05,300 --> 00:00:08,060
Welcome back here we are where we left off last time.

2
00:00:08,060 --> 00:00:13,040
Last time we tried this or B match detector and it didn't do a very good job in fact that kind of got

3
00:00:13,040 --> 00:00:13,670
confused.

4
00:00:13,820 --> 00:00:17,670
Given how similar the other cereal boxes were to the reeses puffs cereal.

5
00:00:17,810 --> 00:00:25,930
So now we're going to do is use soft descriptors as I f t and sift stands for scale invariant feature

6
00:00:25,940 --> 00:00:32,500
transform and it does really well when you're dealing with image sizes or are at a different scale.

7
00:00:32,510 --> 00:00:34,730
So I notice this Reese's puffs cereal box.

8
00:00:34,730 --> 00:00:39,410
It's actually much larger than the cereal boxes that are found in this target image.

9
00:00:39,410 --> 00:00:43,520
So that could also lead to some confusion when trying to match up features.

10
00:00:43,520 --> 00:00:46,190
So this sift the Scripter can account for that.

11
00:00:46,520 --> 00:00:52,580
And the way this works is we first start off by creating a safe object will say Ayas SCAF t is equal

12
00:00:52,580 --> 00:00:53,840
to CB2.

13
00:00:54,320 --> 00:01:05,130
And then we call X features to d dot sift underscore create and then once we've done that just like

14
00:01:05,130 --> 00:01:09,420
we did before we're going to find the key points and descriptors with sift.

15
00:01:09,540 --> 00:01:13,130
So we will say K.P. one and D.S. one.

16
00:01:13,170 --> 00:01:23,630
So the key points and descriptors as I have t and we will detect and compute recess and then none.

17
00:01:23,820 --> 00:01:31,290
And I'm going to copy and paste this because it's the exact same for the other one except it's going

18
00:01:31,290 --> 00:01:34,010
to be cereals.

19
00:01:34,020 --> 00:01:34,320
All right.

20
00:01:34,350 --> 00:01:39,320
So nothing different so far we've done the same thing as we did last time we created this object.

21
00:01:39,360 --> 00:01:43,500
And then we're going to the text and compute where their actual description matches.

22
00:01:43,500 --> 00:01:47,070
Next up we're actually going to calculate those matches.

23
00:01:47,070 --> 00:01:50,070
So now that we have the Scripters for each of them we want to compare them.

24
00:01:50,340 --> 00:01:58,440
So we're going to do this by brute force we'll say CB2 B-F matcher and then we're going to calculate

25
00:01:58,470 --> 00:02:01,110
our matches and a slightly different manner.

26
00:02:01,170 --> 00:02:02,040
We're going to do the following.

27
00:02:02,040 --> 00:02:07,700
We'll say from that brute force matcher call k and n match.

28
00:02:07,760 --> 00:02:13,640
And what this does is it takes two sets of the Scriptures and then a value k.

29
00:02:13,840 --> 00:02:19,580
And if you check out the documentation what it does is it finds the K number of best matches for each

30
00:02:19,580 --> 00:02:21,620
descriptor from a query set.

31
00:02:21,620 --> 00:02:22,730
So right.

32
00:02:22,760 --> 00:02:25,370
Right now we have D.S. 1 and 2.

33
00:02:25,400 --> 00:02:31,790
And if we take a look at these and then let's show one of them looks like these are essentially just

34
00:02:31,800 --> 00:02:35,130
descriptors of where it found features.

35
00:02:35,130 --> 00:02:40,920
So what we're going to do is given these two sets of descriptors I'm going to use cane and match to

36
00:02:40,920 --> 00:02:43,860
find the top two matches.

37
00:02:43,860 --> 00:02:48,190
So again we're finding the best matches for each descriptor from a query set.

38
00:02:48,210 --> 00:02:54,060
So we're going to have two matches for each of these descriptors so let's run this and then take a look

39
00:02:54,060 --> 00:02:56,690
at what matches actually looks like so matches.

40
00:02:56,690 --> 00:02:57,960
Notice there are pairs.

41
00:02:57,960 --> 00:03:00,700
There's the first match and then the second match.

42
00:03:00,870 --> 00:03:03,930
So this first match is a better match than the second match.

43
00:03:03,930 --> 00:03:09,030
And if we asked for K's equal to three then we would have the third best match that we could keep going.

44
00:03:09,030 --> 00:03:11,970
So right now this first column all these values.

45
00:03:11,970 --> 00:03:13,350
That's the first best match.

46
00:03:13,530 --> 00:03:16,120
And then the second column is the second best match.

47
00:03:16,320 --> 00:03:20,430
And what we're going to do now is apply a ratio test in general.

48
00:03:20,440 --> 00:03:28,440
Just intuitively you could think that if this first match is pretty close in distance to the second

49
00:03:28,440 --> 00:03:32,990
match then overall it's probably a good feature to match on.

50
00:03:33,000 --> 00:03:39,330
That being said if you have a strong match in the first column and then the second best match is actually

51
00:03:39,330 --> 00:03:41,230
pretty far away in distance.

52
00:03:41,320 --> 00:03:46,150
Then overall this entire descriptor is probably not a very good feature to match on.

53
00:03:46,230 --> 00:03:51,360
And we're going to apply what's known as a ratio test to actually check for this to check if these two

54
00:03:51,360 --> 00:03:54,100
matches are relatively close to each other in distance.

55
00:03:54,300 --> 00:03:57,640
And then we can think of this entire script there is probably a good match.

56
00:03:57,750 --> 00:03:59,710
And the way we do that is the following.

57
00:03:59,730 --> 00:04:03,600
I'm going to keep matches there so we can reference it.

58
00:04:03,600 --> 00:04:05,630
I will create an empty list called good.

59
00:04:05,700 --> 00:04:14,000
And this is going to hold my good matches and I will say for match one comma match two in my list of

60
00:04:14,000 --> 00:04:14,700
matches.

61
00:04:14,720 --> 00:04:16,980
Remember I have pairs of matches there.

62
00:04:17,200 --> 00:04:18,050
I'll say the following.

63
00:04:18,050 --> 00:04:29,270
If match 1 distance is less than 75 percent of my match to distance then it actually probably have a

64
00:04:29,270 --> 00:04:29,990
good match.

65
00:04:30,050 --> 00:04:33,980
So I will say good append.

66
00:04:34,230 --> 00:04:39,790
And as a list notice here the brackets are going to append that match 1.

67
00:04:40,050 --> 00:04:57,910
So what this is saying is if match 1 distance is less than 75 percent of match to distance than the

68
00:04:57,930 --> 00:05:03,590
Scripter for that particular row was a good match.

69
00:05:05,150 --> 00:05:11,240
Let's keep it and keep in mind I'm just keeping one match and keeping the first best match.

70
00:05:11,240 --> 00:05:14,400
But I am comparing it to the second best match for that descriptor.

71
00:05:14,480 --> 00:05:16,640
If these are off by a lot.

72
00:05:16,640 --> 00:05:20,680
So if this is greater than 75 percent then it's probably not a good match.

73
00:05:20,690 --> 00:05:22,000
And I'm just going to toss it away.

74
00:05:22,130 --> 00:05:30,470
So this is called a ratio test because we're essentially taking the ratio of match 1 to be less than

75
00:05:30,920 --> 00:05:33,750
75 percent of matched 2.

76
00:05:34,130 --> 00:05:43,980
And in general keep in mind that less distance means a better match because we're using some sort of

77
00:05:43,980 --> 00:05:49,920
distance metric to evaluate these matches and the greater the distance the poorer the match the less

78
00:05:50,010 --> 00:05:51,980
distance that means the better the match.

79
00:05:51,980 --> 00:05:54,120
So we'll go ahead and run this.

80
00:05:54,550 --> 00:06:01,260
And now if I check out my list of good then I have a list of all the good matches.

81
00:06:01,290 --> 00:06:03,960
So let's take a look at the lengths of good.

82
00:06:04,160 --> 00:06:05,240
It's seven the.

83
00:06:05,300 --> 00:06:10,650
And let's take a look at the length of matches that one was one thousand five hundred one.

84
00:06:10,820 --> 00:06:14,800
So we can see that we actually had a lot of poor matches that we ended up tossing away.

85
00:06:14,990 --> 00:06:18,190
And now we're left with the very best matches about 78.

86
00:06:18,510 --> 00:06:22,660
OK so now it's time to actually draw these matches and see how they performed.

87
00:06:22,700 --> 00:06:29,960
So we will say sift matches and just like we did last time we'll say to draw matches except this time

88
00:06:29,960 --> 00:06:34,790
we'll say draw matches cannon because that's what we used here in calculating these matches.

89
00:06:35,540 --> 00:06:40,420
Draw matches cannon and then same parameters as before will pass increases.

90
00:06:41,200 --> 00:06:45,040
The key points for that one will pass and serials.

91
00:06:45,260 --> 00:06:50,790
The key points for serials and then pass in my list of good matches that are already filtered and we'll

92
00:06:50,810 --> 00:06:53,570
say none for mask and then say flacs is equal to 2.

93
00:06:53,570 --> 00:06:55,710
So we get the same drawing style as last time.

94
00:06:56,060 --> 00:06:59,320
Run that and let's display that image.

95
00:06:59,330 --> 00:07:05,480
We'll say this play with matches run that and you'll see that it performed much much better than our

96
00:07:05,480 --> 00:07:11,990
previous feature matching it was now successfully able to find where Reese's puffs was in the actual

97
00:07:11,990 --> 00:07:12,710
cereal aisle.

98
00:07:12,710 --> 00:07:14,640
Notice how many features we matched here.

99
00:07:14,810 --> 00:07:19,790
What's also really interesting is you notice that the family size features here are also well-matched

100
00:07:20,030 --> 00:07:22,580
to the family size showing that Cheerios picture.

101
00:07:22,580 --> 00:07:26,180
So if we take a look at the original picture appear.

102
00:07:26,180 --> 00:07:27,350
So this is the cereal aisle.

103
00:07:27,380 --> 00:07:31,380
Notice that family size is actually quite visible here in Honey Nut Cheerios.

104
00:07:31,430 --> 00:07:34,100
However it's missing in this recent puff cereal.

105
00:07:34,240 --> 00:07:37,960
And our target image here had a family size in it.

106
00:07:38,030 --> 00:07:41,600
So that means it actually found the match in that Honey Nut Cheerios.

107
00:07:41,600 --> 00:07:47,630
So keep in mind if you have many similar images it could still be an error in the actual matching.

108
00:07:47,750 --> 00:07:53,410
But as we can see most of the matches are actually really well detected onto that Reese's puffs cereal.

109
00:07:53,710 --> 00:07:53,970
OK.

110
00:07:53,990 --> 00:07:57,620
So that's sift descriptors with an additional ratio test.

111
00:07:57,620 --> 00:08:02,800
Now we're going to do is a Flann based matcher for the plant based matter.

112
00:08:02,810 --> 00:08:08,030
We're first going to show you how to grab the matches and then we're going to introduce a more complex

113
00:08:08,060 --> 00:08:15,020
parameter drawing mechanism essentially just a dictionary that allows you to draw only the clear matches

114
00:08:15,290 --> 00:08:19,790
but yet show all the points where it did find the feature to possibly match on.

115
00:08:19,880 --> 00:08:22,080
It's going to be a very similar process to what we just did.

116
00:08:22,100 --> 00:08:24,550
And in fact the results are also going to be quite similar.

117
00:08:24,560 --> 00:08:25,570
So let's start off.

118
00:08:25,700 --> 00:08:35,940
We're going to end up saying swift is equal to CB2 X features to the and we'll say sift underscore create

119
00:08:36,000 --> 00:08:37,620
just as we did before.

120
00:08:37,770 --> 00:08:41,340
Then again using self-organised say is essentially the same as we did last time.

121
00:08:41,340 --> 00:08:43,400
In fact I can copy and paste the commands.

122
00:08:43,450 --> 00:08:49,510
It's just this key points in the Scriptures one and two and then we're going to copy and paste those

123
00:08:49,510 --> 00:08:50,770
in.

124
00:08:50,950 --> 00:08:59,110
And now what's different is when you define the Flann parameters so F L A N N Flann means fast library

125
00:08:59,110 --> 00:09:05,260
for approximate nearest neighbors and it's actually going to be much faster than the brute force methods.

126
00:09:05,290 --> 00:09:08,490
But it's not going to find the best possible matches.

127
00:09:08,500 --> 00:09:11,250
Instead it's just going to find general good matches.

128
00:09:11,260 --> 00:09:15,940
Now you can play with Flans parameters that we're about to show you in order to try to increase the

129
00:09:15,940 --> 00:09:18,170
precision or the quality of the matches.

130
00:09:18,280 --> 00:09:21,270
But that comes at the cost of slowing down the algorithm.

131
00:09:21,280 --> 00:09:27,790
So just in other words Flann is much faster than brute force matcher but it only finds approximate nearest

132
00:09:27,790 --> 00:09:31,360
neighbors which is good matching but not necessarily the best.

133
00:09:31,620 --> 00:09:32,040
OK.

134
00:09:32,260 --> 00:09:36,440
So let's go ahead and show you the parameters and we're going to be using the default parameters.

135
00:09:36,460 --> 00:09:44,530
So the way we can construct this is we say Flann and we'll say Flann underscore index underscore k d

136
00:09:44,560 --> 00:09:45,060
tree.

137
00:09:46,320 --> 00:09:48,710
So that equal to zero.

138
00:09:48,830 --> 00:09:55,000
It's also going to take in some index parameters we'll say Index parameters is equal to.

139
00:09:55,040 --> 00:10:00,980
And we're going to create a dictionary just by passing this into the DCT dictionary algorithm will be

140
00:10:00,980 --> 00:10:08,460
set to that Flann index tree Katy tree and then say trees is equal to 5.

141
00:10:08,490 --> 00:10:12,060
So I would encourage you to use these default parameters and then you can kind of play around with them

142
00:10:12,060 --> 00:10:13,670
see if adding more trees helps.

143
00:10:13,710 --> 00:10:18,420
But again the more you mess with the parameters the more you slow down the algorithms is really just

144
00:10:18,420 --> 00:10:24,720
meant for fast detection especially if you have a really large image or a large number of images that

145
00:10:24,720 --> 00:10:28,800
will say search parameters is equal to dictionary.

146
00:10:28,860 --> 00:10:32,040
And we'll set checks equal to 50.

147
00:10:32,040 --> 00:10:33,600
It's up to you how you like to find dictionaries.

148
00:10:33,600 --> 00:10:39,640
You could also have just done this with something like this where you say checks 50.

149
00:10:39,650 --> 00:10:42,630
So again we're just use a dictionary here because it's a little more readable.

150
00:10:44,470 --> 00:10:45,980
OK so we have our parameters.

151
00:10:46,180 --> 00:10:55,920
And then what you'll do is say Flann is equal to to flammed based matter and we'll pasan those index

152
00:10:55,920 --> 00:10:58,700
parameters as well as the search parameters.

153
00:10:58,980 --> 00:11:05,730
Run that and now we can actually grab the nearest neighbor matches using this flat object will say matches

154
00:11:05,820 --> 00:11:16,130
is equal to Flann and match and then passen the Scripters the S1 the two and will sit with the two and

155
00:11:16,140 --> 00:11:20,120
we're going to do a very similar ratio test as we did before.

156
00:11:20,200 --> 00:11:32,360
We'll say good as an empty list and we'll say for I actually for match one match two in matches if match

157
00:11:32,360 --> 00:11:44,340
one distance is less then let's say 70 percent of match to distance what's it could play around of 75

158
00:11:44,380 --> 00:11:48,910
percent as well if you want it to then roll.

159
00:11:48,920 --> 00:11:54,210
Take the good list and we'll append match one to it.

160
00:11:54,620 --> 00:11:55,550
OK so we'll run that.

161
00:11:55,550 --> 00:11:56,910
Now we have good matches.

162
00:11:56,930 --> 00:12:06,380
Now it's time to draw them Gool say Flann underscore matches is equal to CB2 draw matches.

163
00:12:06,640 --> 00:12:14,210
Kanon Kinnear's neighbors just like before passen recess and key points one pasand cereals and key point

164
00:12:14,210 --> 00:12:17,400
to then say good.

165
00:12:17,410 --> 00:12:23,470
There's no umask here and say flags and you can set flags to zero or two we'll show you the changes

166
00:12:23,530 --> 00:12:25,530
between those two right now.

167
00:12:25,570 --> 00:12:31,930
We'll say this play Flann matches and if you're on a Flags equal to zero what it's going to do is going

168
00:12:31,930 --> 00:12:36,520
to show you all the features it's matched on except only draw lines on the best ones here.

169
00:12:36,670 --> 00:12:36,970
OK.

170
00:12:37,000 --> 00:12:38,490
Or at least the ones that thinks that are good.

171
00:12:38,710 --> 00:12:41,140
If you only want to see those lines you get set flags too.

172
00:12:41,170 --> 00:12:42,300
As we have been doing.

173
00:12:42,550 --> 00:12:44,470
And then you just get those lines themselves.

174
00:12:44,710 --> 00:12:45,360
OK.

175
00:12:45,460 --> 00:12:51,340
So we get really similar results here as we did with the swift and for a really large image this Flann

176
00:12:51,340 --> 00:12:56,110
matching would have been where actually this line right here this flag based matcher would have been

177
00:12:56,170 --> 00:12:59,640
a bit faster when you were searching for the matches than the brute force method.

178
00:12:59,920 --> 00:13:05,380
OK so now let's show you a couple of extra parameters you can do for actually drawing a mask.

179
00:13:05,410 --> 00:13:10,990
So often what people like to do is they like to draw these lines in a specific color and then show all

180
00:13:10,990 --> 00:13:15,210
those dots from Flag 0 as a different color.

181
00:13:15,220 --> 00:13:18,700
So you'll see these lines as green and then all those dots as red.

182
00:13:18,700 --> 00:13:23,140
So we can see where we have potential features to match on but only see the connections that we're concerned

183
00:13:23,140 --> 00:13:23,780
with.

184
00:13:23,860 --> 00:13:26,770
And that way we can do that is by simply adding the following.

185
00:13:26,890 --> 00:13:28,370
We create a mask.

186
00:13:28,570 --> 00:13:31,000
So I'm going to actually rerun the cells.

187
00:13:31,450 --> 00:13:32,920
So we'll run this one again.

188
00:13:33,010 --> 00:13:38,560
Create the new set object create the script there's rerunning those flammed parameters rerunning Flann

189
00:13:38,590 --> 00:13:40,110
here rerunning matches.

190
00:13:40,120 --> 00:13:48,500
But then after that I'm going to enter to insert a new cell and this one will be called matches mask.

191
00:13:49,440 --> 00:13:53,810
And it's going to create a mask and it's going to be a little bit of complex little comprehension.

192
00:13:53,850 --> 00:14:03,320
All we're going to say is 00 for I in range think of the number of matches and we'll be using this match

193
00:14:03,320 --> 00:14:05,920
as a mask and editing it as we go along.

194
00:14:06,510 --> 00:14:06,910
OK.

195
00:14:06,930 --> 00:14:13,860
So there is our matches mask and if we take a look at it it's just a bunch of zeros right now in the

196
00:14:13,860 --> 00:14:18,720
length of matches and we're going to do is turn some of these on by changing them to one depending if

197
00:14:18,720 --> 00:14:20,670
we have a good match or not.

198
00:14:20,670 --> 00:14:22,870
So let me comment that out over here.

199
00:14:22,890 --> 00:14:30,780
Back in this ratio test what we'll say is I and then we'll select this as just a single tuple so right

200
00:14:30,780 --> 00:14:32,120
those princes around it.

201
00:14:32,550 --> 00:14:37,650
And then we will enumerate matches here that where we can actually keep track of the index marker.

202
00:14:38,040 --> 00:14:42,090
And then it will say is for I am much one match to enumerate matches.

203
00:14:42,150 --> 00:14:43,560
We'll keep doing this right here.

204
00:14:43,680 --> 00:14:45,570
But then we will also say the following.

205
00:14:48,060 --> 00:14:53,660
And actually we no longer need good here because the matches mask will do that for us so we can get

206
00:14:53,660 --> 00:14:54,610
rid of good.

207
00:14:54,800 --> 00:14:56,770
And instead what we're building out is a mask.

208
00:14:56,780 --> 00:15:00,660
So we'll say matches mask index eye.

209
00:15:00,680 --> 00:15:05,610
So for that particular pair of 0 0 change it to 1 0.

210
00:15:05,720 --> 00:15:11,870
And essentially what that is going to do is it's going to label these lines as one where we actually

211
00:15:11,870 --> 00:15:13,150
have a good match.

212
00:15:13,220 --> 00:15:18,420
So all we're doing is we have this giant list of zeroes and instead of appending things to a good list.

213
00:15:18,440 --> 00:15:23,550
Now we're just keeping track with indices of this mask of where we had a good match.

214
00:15:23,570 --> 00:15:25,390
So it really similar process.

215
00:15:25,550 --> 00:15:32,270
Go ahead and run that and now we're going to be using this mask to create a drawing parameter dictionary.

216
00:15:32,300 --> 00:15:41,930
We will say drop harams is equal to dictionary and it will specify that the color of a match is green.

217
00:15:42,940 --> 00:15:50,780
So this is the color of the line and then the single points that we saw basically all these single point

218
00:15:50,780 --> 00:15:54,940
we're going to color them something else will say a single point color.

219
00:15:55,110 --> 00:15:57,700
You have to make sure your spelling is correct on this.

220
00:15:57,850 --> 00:16:06,080
Well make those red and then the next thing we're going to do is say pass the matches mask and this

221
00:16:06,080 --> 00:16:10,670
actually then defines where we had a match and where we just have a single point because remember now

222
00:16:10,670 --> 00:16:16,730
it's essentially a list of ones and zeros where we happen to have a good match do that ratio test and

223
00:16:16,730 --> 00:16:22,730
now set flaks equal to zero because zero flags actually shows all these little points.

224
00:16:22,880 --> 00:16:29,260
And then we come back down here to draw this after I run this dictionary I'm going to get rid of good

225
00:16:29,840 --> 00:16:33,460
and instead pass in all my matches.

226
00:16:33,500 --> 00:16:38,990
So now all my matches remember if we take a look at that parameter all matches.

227
00:16:39,020 --> 00:16:41,930
Those are both sets of matches of K-8 equal to two.

228
00:16:41,970 --> 00:16:47,630
What I am going to do is instead of appending them to a list of good I will be using this match mask

229
00:16:47,960 --> 00:16:52,650
along the dry parameters to filter them out based off color.

230
00:16:52,720 --> 00:16:54,380
So we'll still say none here.

231
00:16:54,550 --> 00:17:04,540
And instead for flags we'll say to Asterix and say draw harams a should see something that results like

232
00:17:04,540 --> 00:17:05,260
this.

233
00:17:05,260 --> 00:17:10,380
And all this is doing is it's taking these drawing parameters to color where you actually have good

234
00:17:10,390 --> 00:17:14,890
matches versus where you have all these other points from Flag is equal to zero.

235
00:17:14,890 --> 00:17:19,420
And again if you want to you could just change Flack's equal to 2 to just see these lines by themselves.

236
00:17:19,540 --> 00:17:24,040
But often people want to color these just so they can see the relationship between the actual points

237
00:17:24,290 --> 00:17:28,150
and all this is doing again is we're creating this mask object here.

238
00:17:28,150 --> 00:17:33,370
And from that we're creating these drawing parameters where we say color matches green and then color

239
00:17:33,370 --> 00:17:34,430
single points red.

240
00:17:34,480 --> 00:17:36,270
And if you want you can then play around these values.

241
00:17:36,460 --> 00:17:40,250
You can turn this maybe to zero and make this blue.

242
00:17:40,600 --> 00:17:43,810
And if we were to run this again now you see the lines are blue.

243
00:17:43,840 --> 00:17:44,080
OK.

244
00:17:44,080 --> 00:17:45,640
So this is the match color.

245
00:17:45,690 --> 00:17:50,020
And this is the single point color and you need to pass in the mask and we say flacs 0 that we we actually

246
00:17:50,020 --> 00:17:50,890
see the points.

247
00:17:51,010 --> 00:17:55,220
I believe if you were to change this back to 2 then you would only see the lines and there it is.

248
00:17:55,220 --> 00:17:59,760
So not much point in doing this whole dictionary if you're only going to say flags equal to 2.

249
00:17:59,890 --> 00:18:02,270
Besides just setting up the color.

250
00:18:02,410 --> 00:18:03,150
All right.

251
00:18:03,150 --> 00:18:05,440
That's it for this feature matching lecture.

252
00:18:05,460 --> 00:18:09,510
You can definitely check out the resources if you're interested more in the details about the actual

253
00:18:09,570 --> 00:18:15,570
algorithms behind this open C-v calls in general will just be making the syntax calls necessary to match

254
00:18:15,570 --> 00:18:16,220
features.

255
00:18:16,290 --> 00:18:21,150
And we're going to be building off of this when it becomes time to talk about ODUOR detection and object

256
00:18:21,150 --> 00:18:22,830
tracking in general.

257
00:18:22,830 --> 00:18:28,170
All right we'll see you at the next lecture where we discuss the watershed algorithm for image segmentation.
