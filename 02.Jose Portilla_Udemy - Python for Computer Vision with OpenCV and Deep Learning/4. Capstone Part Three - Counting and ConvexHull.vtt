WEBVTT
1
00:00:05.250 --> 00:00:06.480
Welcome back to part three.

2
00:00:06.490 --> 00:00:13.210
Perhaps some project where we're going to be conducting finger counting using a convex hull now that

3
00:00:13.210 --> 00:00:14.530
we have the hands segment.

4
00:00:14.530 --> 00:00:17.760
The next step is to actually count the fingers being held up.

5
00:00:17.860 --> 00:00:22.400
We can do this by utilizing a convex hole and being a little clever with some math.

6
00:00:22.610 --> 00:00:27.790
The contex hole draws a polygon by connecting points around the most external points in a particular

7
00:00:27.790 --> 00:00:35.030
frame or a set of contours passed into that frame to give an example let's imagine we have an input

8
00:00:35.030 --> 00:00:42.080
where we have a bunch of dots we could do is Kukla a convex hole by calculating the most external dots

9
00:00:42.170 --> 00:00:44.390
and then drawing a polygon connecting them all.

10
00:00:44.600 --> 00:00:49.800
In our case it's going to be the hand that is the input so we can have a set of points.

11
00:00:49.800 --> 00:00:54.480
That's essentially just our threshold the image of the hand along some external contour information

12
00:00:54.570 --> 00:00:57.860
and we'll draw a convex hole around that hand.

13
00:00:57.870 --> 00:01:03.450
So now you notice that we have some points where theoretically each finger should be and depending on

14
00:01:03.450 --> 00:01:08.280
whether those points are those fingers are extended those points are going to be closer or further away

15
00:01:08.310 --> 00:01:09.540
from the center of the hand.

16
00:01:11.240 --> 00:01:14.000
So the general shape of the polygon should look something like this.

17
00:01:14.000 --> 00:01:16.200
So let's just extract the polygon itself.

18
00:01:17.110 --> 00:01:19.710
And we have this sort of shape.

19
00:01:19.840 --> 00:01:23.040
Notice that we first need to account for lines coming from the rest.

20
00:01:23.050 --> 00:01:27.450
So we have to do some sort of calculation for the points towards the bottom.

21
00:01:27.490 --> 00:01:33.790
Assuming that the hand is coming in straight up so what we can do in order to actually count the number

22
00:01:33.790 --> 00:01:36.890
of fingers first going to calculate the most extreme points.

23
00:01:36.970 --> 00:01:45.480
That is the most extreme top bottom left and right points then we can use their intersection to estimate

24
00:01:45.540 --> 00:01:47.000
the center of the hand.

25
00:01:49.380 --> 00:01:57.140
Next we'll calculate the distance for the point further away from the center and using that distance

26
00:01:57.740 --> 00:02:03.140
we're going to calculate it against some sort of ratio like 90 percent of that distance to create a

27
00:02:03.140 --> 00:02:04.030
circle.

28
00:02:04.460 --> 00:02:10.370
So you notice a circle is centered at the center of the hand and it's 90 percent of the distance of

29
00:02:10.370 --> 00:02:12.930
the furthest point away from the center.

30
00:02:13.850 --> 00:02:18.800
So what that means is that any points that are outside of the circle and far away enough from the very

31
00:02:18.830 --> 00:02:25.010
bottom of that region of interest those should be extended fingers because points are still calculated

32
00:02:25.250 --> 00:02:26.480
by a convex hole.

33
00:02:26.630 --> 00:02:33.200
If your fingers are closed but if you extend them then they will be outside of that orange circle.

34
00:02:33.320 --> 00:02:37.050
And then we count them as actually extended fingers so that we can count them.

35
00:02:37.400 --> 00:02:40.450
And that's how you perform your finger counting.

36
00:02:40.460 --> 00:02:45.420
OK so let's now create a function that does all of this for us using Python.

37
00:02:45.420 --> 00:02:49.470
OK so let's begin by actually defining a count.

38
00:02:50.740 --> 00:02:52.450
Fingers function.

39
00:02:52.450 --> 00:03:01.210
And this is going to take in the threshold that image as well as the hand segments which is the external

40
00:03:01.210 --> 00:03:05.410
contour for just the hand that we calculated in the previous function.

41
00:03:05.530 --> 00:03:10.900
Then the next step is to actually calculate the convex hole which is going to be assigned to the variable

42
00:03:11.300 --> 00:03:19.520
Conn underscore hole and simply just call CB2 and it's the convex whole function.

43
00:03:19.710 --> 00:03:26.630
And we're just going to pass an that Hans segment contour and then the next step is to grab those extreme

44
00:03:26.630 --> 00:03:32.180
points the top bottom left and right and actually grab these points is a bit complicated because of

45
00:03:32.180 --> 00:03:35.270
the way the convex whole object is formatted.

46
00:03:35.420 --> 00:03:40.600
So I'm going to write down the code here and again mainly getting this code referencing the documentation.

47
00:03:40.610 --> 00:03:46.340
So if you look up contour features in the open source computer vision documentation then eventually

48
00:03:46.340 --> 00:03:51.200
you can scroll down here and there's even an idea of the convex hole and what the image should look

49
00:03:51.200 --> 00:03:53.280
like as well as what the hand should look like.

50
00:03:53.480 --> 00:03:58.610
And if you scroll down here it will begin talking about various inclosing so you can do an inclosing

51
00:03:58.610 --> 00:04:03.150
circle including a rectangle or the polygon as discussed appear.

52
00:04:03.260 --> 00:04:08.500
And that's really where we can actually grab the information for indexing the most extreme points.

53
00:04:08.570 --> 00:04:13.460
So you can reference documentation if you have any questions over what the actual segment of code is

54
00:04:13.460 --> 00:04:14.930
doing here.

55
00:04:15.290 --> 00:04:20.000
But the way you grab those extreme points again it's going to be a bit complicated because the formatting

56
00:04:20.120 --> 00:04:21.350
of the convex.

57
00:04:22.010 --> 00:04:24.290
But first you need to do some indexing.

58
00:04:24.290 --> 00:04:27.970
And right now we're going to grab the most extreme top point.

59
00:04:28.430 --> 00:04:38.290
So you do some indexing here and you grab the men at this particular index and then grab the first item

60
00:04:38.350 --> 00:04:44.820
off of it and that's going to be the actual index location for the x and y points.

61
00:04:44.820 --> 00:04:52.240
So then you're going to pass that in to the convex whole and then offer this for our purposes.

62
00:04:52.250 --> 00:04:55.080
We need this to be a tuple.

63
00:04:55.530 --> 00:04:57.990
And this is going to be the top most point.

64
00:04:58.230 --> 00:05:02.250
And what I'm going to do is I'm going to copy and paste for the notes for the bottom left and right

65
00:05:02.310 --> 00:05:02.970
most points

66
00:05:06.090 --> 00:05:09.260
and again this isn't really something I would expect students to be able to drive.

67
00:05:09.300 --> 00:05:13.950
It's more something you'd reference the documentation or other online examples in order to grab those

68
00:05:14.250 --> 00:05:15.730
most extreme points.

69
00:05:15.870 --> 00:05:20.790
But this is the code for grabbing the most extreme top bottom left and right and then in theory the

70
00:05:20.790 --> 00:05:25.020
center of the hand is going to be halfway between the top and bottom and halfway between the left and

71
00:05:25.020 --> 00:05:25.640
right.

72
00:05:25.770 --> 00:05:27.510
So it is a lot easier to understand for this one.

73
00:05:27.510 --> 00:05:39.870
All we need to do is say our center x value is equal to left index 0 which is the x coordinate and then

74
00:05:39.870 --> 00:05:42.670
the right point at index 0 which again is the x coordinate.

75
00:05:43.050 --> 00:05:45.180
And we're going to divide that in half.

76
00:05:45.210 --> 00:05:50.430
We're going to use two forward slashes because we want to make sure this is an integer and for the center

77
00:05:50.460 --> 00:05:55.380
Y points it's going to essentially be the same thing will say top except in this case will index at

78
00:05:55.380 --> 00:05:59.700
1 because we want the y coordinates because essentially these are all tuples of x and y coordinates

79
00:06:00.720 --> 00:06:09.330
so top y plus the bottom why again divide by two here.

80
00:06:09.700 --> 00:06:14.920
So now that we have our center X in our center why we're going to use if we come back up here.

81
00:06:14.960 --> 00:06:19.250
Remember we imported pairwise that's going to be our distance calculation.

82
00:06:20.910 --> 00:06:25.960
So I'll come back here and say that distance is equal to.

83
00:06:26.070 --> 00:06:31.080
And we're going to Suckley the Euclidean distance between the center of the hand and the left right

84
00:06:31.140 --> 00:06:37.520
top and bottom points and I can do this using this pairwise function.

85
00:06:39.320 --> 00:06:46.760
Call Euclidean distances and then we pass that or x and y point to measure off of which is center X

86
00:06:47.030 --> 00:06:54.350
center Y and the second parameter is going to be a list of all the points we want to calculate the distance

87
00:06:54.350 --> 00:07:02.790
to which is left right top and bottom and then we're going to index and just grab the very first item

88
00:07:02.790 --> 00:07:05.780
return off of this function.

89
00:07:05.850 --> 00:07:12.180
So that's the actual Euclidean distance or it's the distances for the left right top and bottom from

90
00:07:12.180 --> 00:07:12.690
the center.

91
00:07:12.720 --> 00:07:19.320
So this basically returns back all those distances and we're just interested in the max distance.

92
00:07:19.320 --> 00:07:28.180
The point that's further away so say that the max distance is equal to distance that max and then all

93
00:07:28.180 --> 00:07:32.160
we're gonna do is create a circle with a 90 percent radius of the max in distance.

94
00:07:32.170 --> 00:07:36.760
And this 90 percent that's a value can play around with depending on what the person's hand actually

95
00:07:36.760 --> 00:07:40.080
looks like if they have very short fingers.

96
00:07:40.150 --> 00:07:45.960
You may want to actually make that distance a little smaller because that means their fingers extended

97
00:07:46.890 --> 00:07:50.480
don't protrude enough beyond their fingers curled in.

98
00:07:51.000 --> 00:08:01.290
We're going to hear is say that the radius of our circle is 90 percent times the max distance and again

99
00:08:01.350 --> 00:08:03.780
suffering a play around with me I make 80 percent.

100
00:08:03.780 --> 00:08:09.120
It's up to you but I'll say 90 percent of the max distance in the way we're going to work this we want

101
00:08:09.120 --> 00:08:18.170
to make this an integer so we'll cast that to an integer and then the circumference of that circle is

102
00:08:18.170 --> 00:08:26.110
going to be equal to 2 times Pi which we can call pi times the radius of that circle.

103
00:08:27.690 --> 00:08:37.260
And then when I go to do is I can create an R Y for that circle so I can see my circular are y is equal

104
00:08:37.260 --> 00:08:45.360
to zeros and it's going to be in the same shape as the threshold that image just the x and y threshold

105
00:08:45.360 --> 00:08:48.910
that image we're not concerned about the color channel.

106
00:08:49.160 --> 00:08:58.160
And we're going to specify that state of type is a integer and then we're going to draw the circular

107
00:08:58.160 --> 00:09:04.260
region of interest using CB2 circle.

108
00:09:04.290 --> 00:09:05.640
We're going to call circular r.

109
00:09:05.760 --> 00:09:15.290
I pasand those center points C-x and whip's center Y passen the radius

110
00:09:17.890 --> 00:09:20.580
passen to 5:5 as recolor.

111
00:09:20.620 --> 00:09:25.750
And then you get this the thickness A10 it's up to you actually won't really be viewing this circle.

112
00:09:25.780 --> 00:09:27.780
And so it's going to be using it to calculate.

113
00:09:28.330 --> 00:09:35.280
And then after this we're going to do is use bitwise and with the circle are y as a mask.

114
00:09:35.430 --> 00:09:41.660
So say now our circular region of interest is equal to CB2.

115
00:09:41.820 --> 00:09:48.720
And well past the threshold that image so threshold threshold it.

116
00:09:49.300 --> 00:09:55.810
And the mask will be equal to the circular reasoning of interest and they're going to grab all the contours

117
00:09:55.990 --> 00:09:57.990
in this circular region of interest.

118
00:09:58.940 --> 00:10:10.200
So say image contours and also a hierarchy is equal to CB2 fine contours are going to create a copy

119
00:10:10.650 --> 00:10:13.250
of that circular region of interest.

120
00:10:13.260 --> 00:10:17.270
So Hirose copy and then we'll say CB2.

121
00:10:17.980 --> 00:10:23.410
And in this particular case we're only concerned with the external contours and for the method here

122
00:10:23.990 --> 00:10:25.360
we'll say chain approx.

123
00:10:25.360 --> 00:10:27.930
And we'll actually just say none for this particular method.

124
00:10:28.960 --> 00:10:33.090
And now it's time to actually count the number of points outside of the circle.

125
00:10:33.230 --> 00:10:37.330
Essentially we'll start with a finger count of 0 saying no fingers are extended.

126
00:10:38.630 --> 00:10:49.890
And I will say for every contour in that list of contours return we're going to grab the bounding box

127
00:10:49.920 --> 00:10:56.400
of the contour so say is a little but a tuple in packing here.

128
00:10:56.700 --> 00:11:05.240
To and you can call bounding rectangle for that contour and then we're going to check some conditions

129
00:11:05.240 --> 00:11:05.860
here.

130
00:11:05.870 --> 00:11:10.280
So the first condition is we want to make sure that the contour region is not at the very bottom of

131
00:11:10.280 --> 00:11:11.020
the hand.

132
00:11:11.030 --> 00:11:17.780
Basically if the person has a you know a lot of their arm inside the image we may get a lot of points

133
00:11:17.930 --> 00:11:21.360
that are really just happen to do with the person's wrist or forearm.

134
00:11:21.410 --> 00:11:23.390
We want to make sure you don't calculate those points.

135
00:11:23.390 --> 00:11:25.940
And luckily we know the center of the hand.

136
00:11:25.940 --> 00:11:30.070
So if it's too far below the center of the hand we'll just say don't worry about these points outside

137
00:11:30.080 --> 00:11:30.550
a circle.

138
00:11:30.560 --> 00:11:32.240
That's probably the person's wrist.

139
00:11:32.270 --> 00:11:41.540
So the first condition will be basically you can call it sort of wrist position in or out of wrist essentially

140
00:11:41.560 --> 00:11:45.620
just checking to make sure that this isn't a point coming from the wrist.

141
00:11:46.030 --> 00:11:56.930
So the Kirkley that we're going to say center Y plus the center Y distance times let's say 25 percent.

142
00:11:56.930 --> 00:12:04.370
And we're going to make sure that that is greater than the Y plus the height of this particular bounding

143
00:12:04.370 --> 00:12:06.180
rectangle for that contour.

144
00:12:06.440 --> 00:12:07.490
Essentially these contours.

145
00:12:07.490 --> 00:12:12.710
It may pick up some of those bottom wrist contours and we want to make sure that it's not that.

146
00:12:12.710 --> 00:12:15.990
So this is not actually a wrist.

147
00:12:16.270 --> 00:12:21.850
And then the second shoe on make sure is that the number of points along the contour does not exceed

148
00:12:21.880 --> 00:12:25.890
25 percent of the circumference of the circular region of interest.

149
00:12:25.990 --> 00:12:30.190
Otherwise we're basically just counting points that are outside the hand itself.

150
00:12:30.190 --> 00:12:35.380
So we may be actually grabbing some excellent contours completely off the hand and completely off the

151
00:12:35.380 --> 00:12:39.580
actual circle because Or maybe a little bit of noise in the background so we may see some external contours

152
00:12:39.580 --> 00:12:40.310
pop up.

153
00:12:40.360 --> 00:12:47.260
We want to make sure that these aren't completely out of the limit so I will say some limit points and

154
00:12:47.260 --> 00:12:56.550
well-defined those by the circumference of say circumference times again will go 25 percent and we'll

155
00:12:56.550 --> 00:13:03.970
compare that to let's say greater than contour shape index 0.

156
00:13:05.030 --> 00:13:06.550
And so we have two conditions.

157
00:13:06.570 --> 00:13:14.660
So if it's outside of the wrist and if it's not one of those limit points there we're going to conclude

158
00:13:14.660 --> 00:13:17.900
that it's a finger and we'll add one to our count.

159
00:13:18.170 --> 00:13:23.380
Then once that loop is done we'll go ahead and return our count OK.

160
00:13:23.480 --> 00:13:24.560
And that's the function.

161
00:13:24.560 --> 00:13:26.100
Again lots of stuff going on here.

162
00:13:26.150 --> 00:13:28.230
Hopefully understand the basic idea.

163
00:13:28.310 --> 00:13:33.820
Essentially what we're doing is after casting the threshold that image as well as our hand segment contour

164
00:13:34.400 --> 00:13:40.970
we create this convex whole Keckley the most extreme for points calculate the center calculate the distance

165
00:13:40.970 --> 00:13:43.740
from the center to all those extreme points.

166
00:13:43.960 --> 00:13:49.740
With the max distance create a circle off of that max distance and then using that circle.

167
00:13:49.760 --> 00:13:55.460
We're going to end up putting contours around everything that's outside of a certain region of that

168
00:13:55.460 --> 00:13:56.030
circle.

169
00:13:56.120 --> 00:14:00.390
And then we're going to start counting with some limitations here making sure that it's not the wrist.

170
00:14:00.410 --> 00:14:04.040
And also making sure that it's not some noise way outside of the circle.

171
00:14:04.040 --> 00:14:06.580
And then we'll return or count the fingers.

172
00:14:06.620 --> 00:14:09.170
OK that's it after this.

173
00:14:09.170 --> 00:14:15.140
The next step is to just put it all together into a program that can then actually run and start counting

174
00:14:15.140 --> 00:14:16.010
fingers.

175
00:14:16.010 --> 00:14:17.080
We'll see you at the next lecture.
