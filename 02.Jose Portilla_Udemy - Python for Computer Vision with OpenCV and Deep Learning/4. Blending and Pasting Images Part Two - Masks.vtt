WEBVTT
1
00:00:05.240 --> 00:00:10.020
Welcome back to part two of blending and pasting images so far and part one.

2
00:00:10.030 --> 00:00:15.460
We've seen how to overlay images on top of each other by simply replacing values with a large image

3
00:00:15.700 --> 00:00:20.670
with values of the smaller image for the desired region of interest or our eye.

4
00:00:20.950 --> 00:00:25.120
But what if we actually only wanted to blend a replace part of the image.

5
00:00:25.230 --> 00:00:30.180
So this is the sort of operations we've done so far so far we have on the left hand side this image

6
00:00:30.180 --> 00:00:32.790
of a robot and then we can say that image one.

7
00:00:32.790 --> 00:00:39.000
We have some secondary image image to open C-v logo and we know now how to overly images on top of each

8
00:00:39.000 --> 00:00:44.640
other and we can do this as well for images that are different sizes by simply selecting in our A-Y

9
00:00:44.700 --> 00:00:49.410
region of interest and then replacing the values there or blending the values there and then adding

10
00:00:49.410 --> 00:00:50.600
those back in.

11
00:00:50.610 --> 00:00:52.710
So we're already comfortable with this.

12
00:00:53.070 --> 00:00:56.260
But what if we actually want to mask part of the smaller image.

13
00:00:56.400 --> 00:01:01.830
If we take a look back at this example notice how the rest of that robot image becomes darker because

14
00:01:01.860 --> 00:01:05.200
of the black parts of the open C-v logo.

15
00:01:05.920 --> 00:01:11.560
But what if I wanted something that looks like the right image there I want to put the open Sibi logo

16
00:01:11.590 --> 00:01:15.320
without having to reference any of that black material.

17
00:01:15.340 --> 00:01:18.210
This is then going to need three stages.

18
00:01:18.280 --> 00:01:23.770
We need the first image that we intend to paste on and then we actually need to build a mask and the

19
00:01:23.770 --> 00:01:28.530
mask is only going to let certain parts of the image one filter through.

20
00:01:28.630 --> 00:01:32.380
When we actually then paste it onto image too.

21
00:01:32.650 --> 00:01:34.530
So that's what we're going to discuss right now.

22
00:01:34.570 --> 00:01:39.400
How do we actually create these masks and then how we only let certain parts through of the smaller

23
00:01:39.400 --> 00:01:41.230
image onto the larger image.

24
00:01:42.360 --> 00:01:44.520
So we're going explore the syntax for these steps.

25
00:01:44.520 --> 00:01:47.230
Keep in mind the syntax is actually really complicated.

26
00:01:47.250 --> 00:01:49.440
This is not one of the strong suits of open C.v.

27
00:01:49.440 --> 00:01:54.390
It actually takes a little bit of code in order to get things rolling and it's not quite intuitive at

28
00:01:54.390 --> 00:01:55.340
first.

29
00:01:55.350 --> 00:02:00.210
Now there are three really good supplemental links at the bottom the lecture notebook for you to explore

30
00:02:00.210 --> 00:02:01.540
for other use cases.

31
00:02:01.620 --> 00:02:06.060
But in this case just take it easy we're going to create the mask we really won't be doing anything

32
00:02:06.060 --> 00:02:10.830
like this throughout the rest of the course so if you find that overly complex Keep in mind it kind

33
00:02:10.830 --> 00:02:11.790
of just is.

34
00:02:11.850 --> 00:02:16.500
And don't worry too much about understanding every single minute detail because we won't really be needing

35
00:02:16.500 --> 00:02:18.080
it for the rest of the course.

36
00:02:18.130 --> 00:02:21.220
With that being said though it's a good idea that we explore the syntax here.

37
00:02:21.240 --> 00:02:24.180
Just see the capabilities of masking of open sibi.

38
00:02:24.240 --> 00:02:25.120
Let's get started.

39
00:02:25.320 --> 00:02:25.890
Welcome back.

40
00:02:25.890 --> 00:02:28.800
We're continuing right where we left off in the last lecture.

41
00:02:28.800 --> 00:02:32.370
Now it's time to blend together images of different sizes.

42
00:02:32.370 --> 00:02:38.370
We're going to start this all over again by reloading these original images so I will grab over here

43
00:02:38.460 --> 00:02:43.770
image one an image too just to make sure we don't have any of these overlay effects that we previously

44
00:02:43.780 --> 00:02:48.970
then and then also when I'm going to do is run that resizing command.

45
00:02:49.300 --> 00:02:54.410
That way the do not copy is quite a different size and we can lay it on top of the larger image

46
00:02:57.920 --> 00:02:58.510
OK.

47
00:02:58.830 --> 00:03:01.480
So I have image one that's the larger dog backpack image.

48
00:03:01.490 --> 00:03:02.990
And then I have image too.

49
00:03:03.180 --> 00:03:05.450
In this case they've already been color corrected.

50
00:03:05.550 --> 00:03:11.530
The next that is the side where on the actual image do we want to blend in the do not copy.

51
00:03:11.550 --> 00:03:21.740
So if I take a look at the image one and run that what I use to do is figure out a 600 by 600 space

52
00:03:21.830 --> 00:03:25.310
on this image of where I actually want to do not copy to be blended.

53
00:03:25.490 --> 00:03:28.320
And this is known as creating a region of interest.

54
00:03:28.340 --> 00:03:33.380
So when our ally or region of interest we're going to grab one from the larger image essentially a 600

55
00:03:33.380 --> 00:03:38.070
Bay 600 cube that I'm interested in blending the smaller image onto.

56
00:03:38.270 --> 00:03:43.430
I could come up here and do the same thing we did last time to start at 0 0 but instead I'm going to

57
00:03:43.430 --> 00:03:47.220
show you how to do it if you want to paste it at the bottom right.

58
00:03:47.270 --> 00:03:51.540
So it's going to be a little bit tricky but hopefully this math makes sense to you.

59
00:03:52.120 --> 00:03:57.020
Well we need to do is figure out what are the actual dimensions to grab in order to grab this bottom

60
00:03:57.020 --> 00:03:59.700
chunk that is 600 by 600.

61
00:03:59.750 --> 00:04:04.350
So if I check image one shape that's 14:1 and 9:34.

62
00:04:04.370 --> 00:04:12.200
So on the y axis I have 12:46 on the X-axis 9 3 4 which means I need to figure out my starting X offset

63
00:04:12.310 --> 00:04:16.820
my starting y offset and I can do that simply by saying the following.

64
00:04:17.270 --> 00:04:27.180
I'll say X offset is equal to 93 for the very ends of the x axis here and then I'm going to subtract

65
00:04:27.360 --> 00:04:30.510
600 from it to bring it back over here.

66
00:04:30.510 --> 00:04:32.610
So I'll say minus 600.

67
00:04:32.610 --> 00:04:37.860
All we're doing is we're starting at the very end of the x axis and then subtracting away the length

68
00:04:37.950 --> 00:04:40.970
of the x axes of the smaller image.

69
00:04:41.220 --> 00:04:45.600
And we're going to the same thing for y offset starting at the very end of y.

70
00:04:46.760 --> 00:04:53.300
I'm going to subtract away 600 and that's going to then allow me to calculate the top left corner that

71
00:04:53.300 --> 00:04:58.070
is 600 away from the ends of both x and y of the larger image.

72
00:04:58.070 --> 00:05:03.560
So that is my X OFSAA and y offset for the bottom right corner essentially the opposite of setting 0

73
00:05:03.560 --> 00:05:05.630
0 for the top left corner.

74
00:05:05.630 --> 00:05:11.300
Now what I want to do is create an r y the same size of the foreground image the foreground image is

75
00:05:11.300 --> 00:05:14.220
simply the smaller image that is going to go on top.

76
00:05:14.420 --> 00:05:21.550
And if I check the image to dot shape notice it's against 600 by 600 by 3.

77
00:05:21.610 --> 00:05:29.380
So that means I can use tuple and packing to reassign This will save rows columns and channels is equal

78
00:05:29.380 --> 00:05:31.490
to image to dot shape.

79
00:05:31.540 --> 00:05:38.380
This way we have generalized terms of rows which is 600 columns which in the special case since it's

80
00:05:38.380 --> 00:05:42.670
a square image also happens to be 600 and then the channels happens to be three there's three color

81
00:05:42.670 --> 00:05:43.600
channels there.

82
00:05:43.810 --> 00:05:46.910
What I want to do now is actually grab the R Y.

83
00:05:46.930 --> 00:05:49.360
It's a very similar process to what we did before.

84
00:05:49.630 --> 00:05:58.610
My region of interest is merely the first image and I'm starting y offset and then I'm going to go all

85
00:05:58.610 --> 00:06:05.970
the way to the end that 14:1 because I'm grabbing right now the bottom right corner.

86
00:06:06.180 --> 00:06:15.460
And then I will go from my X offset to the defined and go all the way to that end which is nine three.

87
00:06:15.470 --> 00:06:16.620
So that's my y.

88
00:06:16.850 --> 00:06:23.920
If I show you my R Y and run that that's the bottom right hand corner of the image.

89
00:06:23.930 --> 00:06:25.840
Notice that it's just the bottom of that backpack.

90
00:06:25.850 --> 00:06:32.120
If I take a look at the original image all I'm doing is I'm grabbing this bottom corner by finding out

91
00:06:32.240 --> 00:06:33.830
what my X OFSAA is.

92
00:06:33.880 --> 00:06:35.220
Minus 600.

93
00:06:35.330 --> 00:06:40.410
And then just going down all the way to the image because I literally calculate it by 600 off.

94
00:06:40.460 --> 00:06:40.990
OK.

95
00:06:41.180 --> 00:06:46.670
And what you could do is in general you could have subtracted the columns here and the rows there for

96
00:06:46.670 --> 00:06:49.690
this x OFSAA and y offset so you could add them the shaping first.

97
00:06:49.700 --> 00:06:54.830
Now the next step is to actually end up creating the mask and the mask is going to allow us to only

98
00:06:54.830 --> 00:06:58.220
grab that red portion of the do not copy.

99
00:06:58.330 --> 00:07:01.460
So will it come down here and let's make a new cell here.

100
00:07:02.250 --> 00:07:07.980
And what we're going to do is start off by getting a gray scale version of the image we'll say image

101
00:07:07.980 --> 00:07:20.590
to gray and then we're going to do here is say is equal to C-v to see the T color or passen the original

102
00:07:20.590 --> 00:07:22.210
image image too.

103
00:07:22.750 --> 00:07:27.290
And we're going to convert it to grayscale so we'll say CB2 color.

104
00:07:27.310 --> 00:07:30.770
And I believe it's already in red green blue.

105
00:07:30.940 --> 00:07:31.930
Then we'll say to

106
00:07:34.730 --> 00:07:35.110
OK.

107
00:07:35.360 --> 00:07:36.710
So we're going to run that command.

108
00:07:36.800 --> 00:07:39.140
And now we have that grayscale image.

109
00:07:39.170 --> 00:07:40.070
Let's go ahead and show it.

110
00:07:40.070 --> 00:07:41.240
Make sure that worked out.

111
00:07:42.970 --> 00:07:47.550
And right now it's using this as it's Color Mapping that doesn't really make sense in this case so to

112
00:07:47.560 --> 00:07:49.180
change it to grayscale.

113
00:07:49.390 --> 00:07:50.190
There we go.

114
00:07:50.410 --> 00:07:56.170
And what I actually need is the inverse of this because right now this mass is essentially going to

115
00:07:56.170 --> 00:07:59.290
block out with black all the red material.

116
00:07:59.290 --> 00:08:02.870
So instead we want to do is the exact opposite of this.

117
00:08:02.920 --> 00:08:04.970
I want to have in pure white.

118
00:08:05.110 --> 00:08:09.880
What I want to show through for the do not copy because remember we're building up the mask right now.

119
00:08:10.180 --> 00:08:14.990
And in order to do this we're going to say mask underscore I envy.

120
00:08:15.160 --> 00:08:20.400
And we're going to calculate the inverse of this image and the way you can do that is through the CB2

121
00:08:21.250 --> 00:08:21.650
bit.

122
00:08:21.660 --> 00:08:27.090
Why is underscore not image too great.

123
00:08:27.190 --> 00:08:33.220
So what this does is if you actually do shift tap here it's going to calculate on a per element's bitwise

124
00:08:33.280 --> 00:08:38.230
the inversion of the input it's actually going to invert so that everything that's black is white and

125
00:08:38.230 --> 00:08:39.780
everything that's white is black.

126
00:08:39.790 --> 00:08:40.810
So let's try this out.

127
00:08:40.840 --> 00:08:47.970
We're going to run this and we should see if we say peel t show the mask Inv. run that.

128
00:08:48.070 --> 00:08:49.910
And now we notice it's the opposite.

129
00:08:50.020 --> 00:08:55.960
And let's double check by changing the C mapping to be equal to gray run that and now we see we have

130
00:08:55.960 --> 00:09:01.120
whitespace so that's going to allow anything to shine through which in this case is that red material

131
00:09:01.120 --> 00:09:04.000
that we want that read do not copy.

132
00:09:04.000 --> 00:09:11.820
Now unfortunately if you notice right now mask Inv. if we were to check the shape of this it no longer

133
00:09:11.850 --> 00:09:13.530
contains color channels.

134
00:09:13.530 --> 00:09:19.350
And what we need to do is add in those three channels again so that the two arrays are compatible of

135
00:09:19.350 --> 00:09:20.060
each other.

136
00:09:20.130 --> 00:09:22.390
The way we're going to fix that is a little bit of non-pay.

137
00:09:22.560 --> 00:09:27.230
We're going to import some pie as an AP just in case we haven't done it already.

138
00:09:27.570 --> 00:09:34.110
And then what I will say is white background and there's various ways you could actually build out what

139
00:09:34.110 --> 00:09:38.990
you could do is just say and the ones make it have the same shape as image too.

140
00:09:39.030 --> 00:09:41.710
And then multiply it by 255.

141
00:09:41.970 --> 00:09:44.800
Well you can also do is use a function that we haven't actually seen yet.

142
00:09:44.820 --> 00:09:45.750
But it is really useful.

143
00:09:45.750 --> 00:09:52.260
It's not full and it's essentially going to take the step of one's times some value and do that for

144
00:09:52.260 --> 00:09:52.950
us.

145
00:09:52.950 --> 00:09:58.050
So you need to do is for Empey that fool you just pass in the shape that you want.

146
00:09:58.050 --> 00:10:03.790
In our case we want the shape of the image to 600 by 600 and actually 600 600 by three.

147
00:10:04.020 --> 00:10:09.340
And then you're going to decide what you actually want to spool of in case we want to full of 255.

148
00:10:09.660 --> 00:10:14.010
And then to make sure it works nicely on certain operating systems you have to say the type is equal

149
00:10:14.010 --> 00:10:16.260
to that you I.A. 8.

150
00:10:16.260 --> 00:10:20.880
So go ahead and do that often if you forget that the types that it actually won't produce an error or

151
00:10:20.880 --> 00:10:24.260
anything but just in case let's make sure we have everything in integers.

152
00:10:24.780 --> 00:10:26.580
So now we have a white background.

153
00:10:26.580 --> 00:10:31.500
So if I check on my right background its shape is now 600 by 600 by three.

154
00:10:31.680 --> 00:10:36.900
So all I did here for the full command it takes in the shape of what you want the array to look like

155
00:10:37.260 --> 00:10:38.760
what you want it to be full of.

156
00:10:38.760 --> 00:10:40.620
So if actually check out white background.

157
00:10:40.860 --> 00:10:44.890
It's just full of 255 integers and then that data type.

158
00:10:44.910 --> 00:10:47.490
So we're going to make sure that Dave type matches the mask.

159
00:10:47.520 --> 00:10:49.280
So we'll keep it as integers.

160
00:10:49.320 --> 00:10:53.190
OK so that's our white background and then we're going to do is the following.

161
00:10:53.190 --> 00:10:57.870
And this one's probably the more complex come in we're going to see today is B.K..

162
00:10:57.870 --> 00:11:09.320
For background is equal to C-v to and we'll say bitwise OR and what bitwise OR the is it calculates

163
00:11:09.320 --> 00:11:10.140
the per element.

164
00:11:10.180 --> 00:11:12.970
Why is this junction of two arrays.

165
00:11:13.070 --> 00:11:16.040
So what that actually means is going to do the following.

166
00:11:16.040 --> 00:11:21.340
We're going to in source one source to and then the actual mask.

167
00:11:21.410 --> 00:11:26.720
So we'll use the white background for both source one answers to end of the mass We're going to pass

168
00:11:26.720 --> 00:11:31.340
in his mask underscore I envy.

169
00:11:31.490 --> 00:11:37.790
So when you run that your background shape is now 600 600 by 3.

170
00:11:37.970 --> 00:11:44.330
And if we show the actual background shape so all of us ended up doing was.

171
00:11:44.370 --> 00:11:49.970
Now we have this do not copy the same figure across all three color channels.

172
00:11:50.070 --> 00:11:54.630
And if this doesn't make sense to you this bitwise OR which essentially just grabbed these two white

173
00:11:54.630 --> 00:12:00.330
backgrounds and then put that mask on top of them then what you could have also done is grabbed the

174
00:12:00.330 --> 00:12:07.230
original mask Inv. and then just formatted it using them PI two more times for the other two color channels.

175
00:12:07.230 --> 00:12:11.970
I recommend using this generalized bitwise OR operation though just in case you have a more complex

176
00:12:11.970 --> 00:12:14.130
figure and you have more than just one color.

177
00:12:14.130 --> 00:12:19.230
But all this really doing is we created a white background for all the color channels and then apply

178
00:12:19.230 --> 00:12:20.400
that mask to it.

179
00:12:20.400 --> 00:12:25.770
And when you apply that mask to it now you have 600 or by 603 where every single color channel now has

180
00:12:25.770 --> 00:12:28.540
this do not copy image.

181
00:12:28.540 --> 00:12:33.380
Next we're going to do is we're going to grab the original foreground image and place it on top of the

182
00:12:33.390 --> 00:12:36.290
mass because right now this is actually still white.

183
00:12:36.430 --> 00:12:40.090
So what I want to do is replace that with the original image which is red.

184
00:12:40.480 --> 00:12:48.590
And what I'm going to do here is the following will say Kilty are actually when you say foreground is

185
00:12:48.590 --> 00:12:56.860
equal to CB2 I'm going to say it wise or again and this time we'll do it with image to remember image

186
00:12:56.860 --> 00:13:02.410
to the original do not copy and then we'll say mask is equal to mask underscore inverse.

187
00:13:02.530 --> 00:13:08.110
So all it is doing is image to is our original image and for all three color channels all we're going

188
00:13:08.110 --> 00:13:15.010
to say is put this mask on top of it which means when we actually run this and show it the only things

189
00:13:15.010 --> 00:13:22.510
that are going to be coming out is what is in white which in our case is the do not copy so that aligns

190
00:13:22.510 --> 00:13:24.790
pretty much exactly with the red material.

191
00:13:25.210 --> 00:13:26.980
And this is how the mask is working.

192
00:13:26.980 --> 00:13:31.330
You create the mask anything and white is what's going to be allowed to shine through and then use this

193
00:13:31.330 --> 00:13:35.890
bitwise operator on your original image and you put that mask on top of it and now you have this image

194
00:13:35.970 --> 00:13:40.750
show with the original colors plus anything you don't want is now in black.

195
00:13:40.810 --> 00:13:47.060
OK so now it's just time to get the region of interest and then blend the mask with the our ally.

196
00:13:47.110 --> 00:13:59.630
So our final are A-Y can be calculated by saying C-v to that wice or and in this case we're not going

197
00:13:59.630 --> 00:14:04.810
to pass in umask pieces we just want to pass in the region of interest and the foreground.

198
00:14:05.420 --> 00:14:12.250
And then if you can go ahead and see that final region of interest notice now that it's pretty much

199
00:14:12.250 --> 00:14:16.680
space it only the red stuff and everything else has been kept intact.

200
00:14:16.810 --> 00:14:21.370
And now all we need to do is add this into the rest of the image and we do that the exact same way we

201
00:14:21.400 --> 00:14:27.730
overlaid images on top of each other using that large image is equal to image one.

202
00:14:27.940 --> 00:14:33.440
And then the small image is now equal to that final region of interest.

203
00:14:34.620 --> 00:14:38.820
And then we're just going to do the same them pay indexing we saw in the previous lecture will say large

204
00:14:38.820 --> 00:14:48.960
image starting at y offset go to Y offset plus the small image shape which case is the final r y.

205
00:14:49.330 --> 00:15:00.910
So small image say zero and then will say X offset go all the way to X offset plus the small image that

206
00:15:00.910 --> 00:15:06.310
shape at 1 and we'll set that equal to the small image.

207
00:15:06.310 --> 00:15:10.050
So run that and then let's see the final result.

208
00:15:10.240 --> 00:15:12.460
So I'll say Kilty Imsure a large image.

209
00:15:12.850 --> 00:15:13.570
And there you have it.

210
00:15:13.570 --> 00:15:18.250
We successfully were able to put in the do not copy sign without having to worry.

211
00:15:18.260 --> 00:15:20.010
But that do not copy white background.

212
00:15:20.050 --> 00:15:22.800
So that's how we can then watermark or images.

213
00:15:23.170 --> 00:15:27.640
I know it's a very complicated process and open CV is one of the few things that it really doesn't make

214
00:15:27.670 --> 00:15:28.820
easy.

215
00:15:28.840 --> 00:15:32.920
Keep in mind for this sort of thing you're probably going to be using normal software like Photoshop

216
00:15:32.920 --> 00:15:37.240
or they'll be illustrator that sort of thing but you can definitely check out the notebook.

217
00:15:37.240 --> 00:15:42.970
We have three really good links that provide additional tutorials on masking in case you ever find yourself

218
00:15:43.180 --> 00:15:45.410
having to do this in your own applications.

219
00:15:45.540 --> 00:15:46.240
OK.

220
00:15:46.330 --> 00:15:48.730
So please feel free to review the notebook.

221
00:15:48.730 --> 00:15:52.820
We have a lot more comments and definitely check out those three links at the bottom of that notebook.

222
00:15:53.050 --> 00:15:54.710
Thanks and I'll see you at the next lecture.
