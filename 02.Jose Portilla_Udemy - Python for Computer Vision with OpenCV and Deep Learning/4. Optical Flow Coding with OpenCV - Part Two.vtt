WEBVTT
1
00:00:05.220 --> 00:00:06.270
Welcome back everyone.

2
00:00:06.390 --> 00:00:08.720
And part two of optical flow open.

3
00:00:08.970 --> 00:00:11.410
We're going to check out dense optical flow.

4
00:00:11.450 --> 00:00:16.530
We're actually going to check out the entire image and then highlight points that are moving based on

5
00:00:16.530 --> 00:00:18.150
the direction they're moving in.

6
00:00:18.150 --> 00:00:20.920
Let's go ahead and check it out by hopping over the Jupiter notebook.

7
00:00:21.030 --> 00:00:21.230
All right.

8
00:00:21.240 --> 00:00:23.730
Here I am in the notebook that we left off last time.

9
00:00:23.730 --> 00:00:29.310
So previously one had and use the Lucas Kanade method for optical flow tracking a few points and then

10
00:00:29.310 --> 00:00:32.950
drawing lines from their previous position to their next position.

11
00:00:33.180 --> 00:00:38.600
Now we're going to do is just taking the entire image and then color points that we believe are moving.

12
00:00:38.700 --> 00:00:42.430
And one of the functions we're going to be using is the dense optical flow function.

13
00:00:42.660 --> 00:00:44.900
And as a quick point it takes a lot of parameters.

14
00:00:45.030 --> 00:00:48.740
So he suggests we check out the notebook that goes along this lecture.

15
00:00:48.900 --> 00:00:54.480
And if you scroll down to dense optical flow and open C.V we have an entire breakdown of all the parameters

16
00:00:54.480 --> 00:00:57.810
that it takes for this particular function that we're going to be using.

17
00:00:57.810 --> 00:00:58.860
So keep that in mind.

18
00:00:58.950 --> 00:01:02.310
We're going to be providing essentially just a bunch of different parameters so just a bunch of numbers

19
00:01:02.310 --> 00:01:04.950
there we can check out what each of those numbers represents.

20
00:01:05.070 --> 00:01:11.780
By reading out these parameters that are going into the calque optical flow of foreign back function.

21
00:01:12.060 --> 00:01:18.320
So I'll come back here and we'll begin in case you haven't already import CB2 and important up-I as

22
00:01:18.500 --> 00:01:25.070
the next we're going to do is set up our video capture we'll say video capture here.

23
00:01:26.830 --> 00:01:31.380
And then passen zero and I'm going to be streaming this directly from a USP camera.

24
00:01:31.720 --> 00:01:38.500
And then let's grab the first frame we'll call it frame 1 and they'll just be the first time we actually

25
00:01:38.500 --> 00:01:47.770
read in and we'll say the previous image is equal to and essentially just turning this into scale.

26
00:01:47.840 --> 00:01:51.700
A lot of the things we did in the previous lecture were repeating again here.

27
00:01:51.800 --> 00:02:01.280
So taking that first frame and convert it to grayscale saying CV to dot color underscore are two and

28
00:02:01.280 --> 00:02:07.980
then gray then we're going to do is we're gonna actually set up an H S V based mask number that says

29
00:02:07.980 --> 00:02:15.860
for hue saturation and value will say HSV mask is equal to the zeros.

30
00:02:15.990 --> 00:02:26.150
Now we're going to say zeros like that first frame and then we're going to do is say HSP mask and we

31
00:02:26.200 --> 00:02:35.410
grab all x and y points along the saturation channel and set them equal to 255 fully saturated.

32
00:02:35.410 --> 00:02:39.430
And if you're wondering what HSV stands for Again it's hue saturation value.

33
00:02:39.430 --> 00:02:41.500
Go ahead and check out the color mapping lecture.

34
00:02:41.500 --> 00:02:48.640
For more information on that but now we're going to do a wild true will grab.

35
00:02:48.870 --> 00:02:55.170
Essentially what the current Framus we'll call it frame to and we're going to read that in.

36
00:02:55.510 --> 00:03:02.350
And our main idea here is to compare the previous entire image to the current entire image.

37
00:03:02.650 --> 00:03:11.770
So we will say that the next image and so are going to copy and paste this line here except it's frame

38
00:03:12.450 --> 00:03:13.320
to now.

39
00:03:13.690 --> 00:03:19.000
So we have the greyscale versions of the image and now we're going to do is say flow and calculate the

40
00:03:19.000 --> 00:03:22.960
optical flow given the built in function.

41
00:03:22.960 --> 00:03:30.700
So that's calque optical flow and we're using now the foreign back function and that takes in the previous

42
00:03:30.790 --> 00:03:31.810
image.

43
00:03:31.810 --> 00:03:39.340
So we'll see a previous image Elsa takes in the next image and then if you do shift tab here you can

44
00:03:39.340 --> 00:03:41.460
check out all the parameters it takes in.

45
00:03:41.470 --> 00:03:45.640
Again I'm just going to provide a bunch of defaults that tend to work well and you can be into play

46
00:03:45.640 --> 00:03:48.300
around these defaults if your video doesn't actually work.

47
00:03:48.310 --> 00:03:54.280
But these defaults should work for you since it is taking in the entire image not actually looking at

48
00:03:54.310 --> 00:03:55.740
any specific points.

49
00:03:55.810 --> 00:03:57.880
So I would recommend you use the same defaults.

50
00:03:57.970 --> 00:03:59.650
So say none 0.5.

51
00:03:59.700 --> 00:04:06.260
Three fifteen three five 1.2 and zero.

52
00:04:06.320 --> 00:04:11.500
And essentially these are just different parameters for the number of pyramid layers to use the average

53
00:04:11.500 --> 00:04:12.570
window size.

54
00:04:12.700 --> 00:04:14.420
And then how many iterations that do.

55
00:04:14.440 --> 00:04:16.620
So these are just parameters.

56
00:04:16.630 --> 00:04:21.340
Go ahead and use the defaults they should work for you regardless of the incoming video.

57
00:04:21.340 --> 00:04:24.660
Now before we continue I want to take a brief moment to explain.

58
00:04:24.660 --> 00:04:30.750
We're going to be doing with this particular object that is the flow object after running that function.

59
00:04:30.760 --> 00:04:37.600
We're going to have a flow object containing vector flow Cartesian information essentially a vector

60
00:04:37.630 --> 00:04:41.950
pointing at which direction the flow for each pixel was happening in.

61
00:04:42.100 --> 00:04:46.960
But it's giving us the x and y coordinates that can define that particular vector.

62
00:04:47.200 --> 00:04:53.350
What we're going to do is convert that into polar coordinates that convert that to magnitude an angle

63
00:04:53.380 --> 00:04:55.620
of that vector with that information.

64
00:04:55.630 --> 00:05:02.770
We can then map this onto our hue saturation value Color Mapping so we can then take the angle that

65
00:05:02.770 --> 00:05:07.210
we calculated and the magnitude and choose a hue and saturation.

66
00:05:07.210 --> 00:05:11.900
That means if things move in a particular direction the all be color the same way.

67
00:05:12.010 --> 00:05:15.090
So if everything moves to the left they may all be colored red.

68
00:05:15.190 --> 00:05:17.700
If things move to the right they'll be colored blue.

69
00:05:17.920 --> 00:05:20.860
So that's what we're going to be doing here in our actual code.

70
00:05:21.040 --> 00:05:22.380
Let's check it out.

71
00:05:22.390 --> 00:05:28.240
This means that the next step is to actually convert this flow into polar coordinates and grab the magnitude

72
00:05:28.330 --> 00:05:37.700
and angle of these flow vectors by simply using a built in function called cart to polar and this allows

73
00:05:37.700 --> 00:05:43.600
you to pass in Cartesian coordinates of vectors and convert them to polar coordinates so that flow object

74
00:05:44.290 --> 00:05:47.330
we're going to say for every pixel and x and y.

75
00:05:47.410 --> 00:05:52.870
So we'll say colon Colin go ahead and grab the horizontal information.

76
00:05:52.870 --> 00:05:57.760
And then again for every pixel and x and y grab the vertical information which is stored in Channel

77
00:05:57.760 --> 00:06:02.980
1 essentially the x and y coordinates for every vector of every pixel in the image.

78
00:06:02.980 --> 00:06:05.630
Then convert them to magnitude an angle.

79
00:06:05.980 --> 00:06:11.080
And if you check this out and you shift tab you'll notice by default after reading this it returns the

80
00:06:11.170 --> 00:06:14.100
angle in radians actually want the angle in degrees.

81
00:06:14.380 --> 00:06:20.920
So I'm going to copy this and then pass that in as a flag for true.

82
00:06:21.390 --> 00:06:25.740
So now that the angle has been returned in degrees we're going to do the following.

83
00:06:25.740 --> 00:06:33.540
We're going to grab our HSV mask and then say for all those pixels we're going to do is grab the hewe

84
00:06:34.560 --> 00:06:39.870
and I'm going to define it based off the angle but I'm going to find that based off the angle divided

85
00:06:39.870 --> 00:06:40.820
by two.

86
00:06:40.860 --> 00:06:42.900
That way I don't get so many huse.

87
00:06:42.990 --> 00:06:47.880
Instead I'm just looking at half the hues it's going to help us actually distinguish information on

88
00:06:47.880 --> 00:06:52.080
left right up and down a little clearer than if I just did the right angle.

89
00:06:52.110 --> 00:06:55.060
So essentially from 360 degrees to 180.

90
00:06:55.140 --> 00:07:05.250
So look at those values and half and they will say HSP umask and then I'm going to grab Channel 2 which

91
00:07:05.250 --> 00:07:12.150
is going to be the actual value an iguana it's to find the value based off the magnitudes or say to

92
00:07:13.140 --> 00:07:25.690
normalize the magnitude and take it and normalize it to be between 0 and 255 using C-v to Norm underscore

93
00:07:26.230 --> 00:07:33.790
min max essentially just stretching the min and max to now fit between 0 and 255.

94
00:07:33.800 --> 00:07:37.520
Next we have our blue green red image.

95
00:07:37.520 --> 00:07:48.040
So say CB2 CVT color and convert our HSV mask back into something we can splay.

96
00:07:48.050 --> 00:07:58.370
So say CB2 color HSV 2 BGR and we're doing BGR because we're going to be using Emco from CB2 will say

97
00:07:58.370 --> 00:08:00.520
C-v to show.

98
00:08:00.710 --> 00:08:08.270
And then just subframe and then pass in our final BGR image then we're going to need a way to exit all

99
00:08:08.270 --> 00:08:09.030
this all safe.

100
00:08:09.030 --> 00:08:12.670
K to wait key.

101
00:08:12.830 --> 00:08:24.290
Just 10 milliseconds and all say and 0 x f.f if K is equal to 27 wups equals equals to 27.

102
00:08:24.340 --> 00:08:26.010
Essentially saying someone hit the escape.

103
00:08:26.260 --> 00:08:27.550
Go ahead and break.

104
00:08:27.820 --> 00:08:33.670
And after all this it's important that we reset the image so that our previous image is now equal to

105
00:08:33.760 --> 00:08:34.750
our next image.

106
00:08:34.750 --> 00:08:36.210
So the cycle continues.

107
00:08:37.350 --> 00:08:43.350
Then outside of the loop I'm going to release the capture and then I'm going to destroy all windows

108
00:08:44.310 --> 00:08:45.610
and then save the changes.

109
00:08:45.900 --> 00:08:47.400
OK let's quickly do a quick review.

110
00:08:47.410 --> 00:08:48.430
What we're doing here.

111
00:08:48.510 --> 00:08:55.140
Essentially I'm capturing video just so we did it last time I'm converting it to grayscale for the previous

112
00:08:55.140 --> 00:09:00.910
image and creating this HSV mask which we learned about so that we can actually color based off direction.

113
00:09:01.020 --> 00:09:06.120
And then I grab this flow object containing a bunch of vector information and convert that the polar

114
00:09:06.120 --> 00:09:09.850
coordinates which then allows me to color the image based off the hue.

115
00:09:10.230 --> 00:09:13.230
And there's going to be a really cool effect that we're about to see.

116
00:09:13.230 --> 00:09:15.470
So it run this make sure we didn't create any typos.

117
00:09:16.720 --> 00:09:17.710
So it looks like it's running.

118
00:09:17.730 --> 00:09:22.500
Want to bring up my window here and you'll see my face.

119
00:09:22.580 --> 00:09:27.770
But one thing we do is I know to deliberately move to one side.

120
00:09:28.040 --> 00:09:36.610
So notice here as I move from let's say the left to the right it appears that it's red.

121
00:09:36.650 --> 00:09:38.150
So I don't do that again with my whole body.

122
00:09:38.180 --> 00:09:45.750
I'm going to start from the left and then go to the right and then it's red and if I go from right to

123
00:09:45.750 --> 00:09:47.950
left it's actually blue.

124
00:09:47.970 --> 00:09:53.100
Or it is color and it doesn't matter what the object is it's going to calculate that direction and then

125
00:09:53.100 --> 00:09:54.390
color that way.

126
00:09:54.390 --> 00:09:56.550
So in one direction it's red.

127
00:09:56.550 --> 00:10:01.890
And then in another direction it's blue and I'm not able to do this perfectly horizontally so that's

128
00:10:01.890 --> 00:10:03.900
what you see a couple of other colors.

129
00:10:03.900 --> 00:10:11.250
But in general we can see blue and red for the horizontal and then if I move up it does purple and then

130
00:10:11.310 --> 00:10:12.060
move down.

131
00:10:12.060 --> 00:10:12.840
It is green.

132
00:10:12.840 --> 00:10:13.630
Same for the hand.

133
00:10:13.640 --> 00:10:16.240
It's going to be a little clear at the hand because I have more space to work with.

134
00:10:16.290 --> 00:10:20.770
So up is purple and then down is some green.

135
00:10:20.850 --> 00:10:25.050
And as I kind of twist my hand there it's a little hard to tell but hopefully you can begin to kind

136
00:10:25.050 --> 00:10:27.420
of play around these effects yourself.

137
00:10:27.420 --> 00:10:32.820
And then this is called dense optical flow because we're doing this for every single image in this actual

138
00:10:32.880 --> 00:10:34.350
feed of the frame.

139
00:10:34.680 --> 00:10:38.180
And things are still then it'll color them black.

140
00:10:38.170 --> 00:10:42.870
See you should only be able to see things that are moving and as certain things move much clearer than

141
00:10:42.870 --> 00:10:44.890
others then you won't see the background.

142
00:10:44.940 --> 00:10:49.590
So if you try to stand perfectly still it will still try to detect some minor movements which is why

143
00:10:49.590 --> 00:10:52.050
you see me kind of coming in and out of frame.

144
00:10:52.050 --> 00:10:52.680
All right.

145
00:10:52.680 --> 00:10:54.500
So that's it for dense optical flow.

146
00:10:54.630 --> 00:10:56.220
I hope you found this pretty cool.

147
00:10:56.250 --> 00:10:57.210
We'll see at the next lecture.
