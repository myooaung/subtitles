WEBVTT
1
00:00:05.190 --> 00:00:09.990
Welcome back everyone to part two of the capstone project we're going to be segmenting the hand in the

2
00:00:09.990 --> 00:00:11.140
region of interest.

3
00:00:12.280 --> 00:00:16.810
So the next step is Skewes thresholding actually grabbed the hands segment from the region of interest

4
00:00:17.200 --> 00:00:18.380
basically at the end.

5
00:00:18.490 --> 00:00:25.210
We want to have the white hand and then be able to calculate the contour around that against a black

6
00:00:25.300 --> 00:00:26.400
background.

7
00:00:26.440 --> 00:00:31.450
So let's create a function that can do this using thresholding and also using the fine contours function.

8
00:00:31.450 --> 00:00:32.220
Let's get started.

9
00:00:33.350 --> 00:00:38.140
OK we're going to begin by saying T.F. segment.

10
00:00:38.390 --> 00:00:44.650
And we're going to pasan a frame and then a threshold value.

11
00:00:44.670 --> 00:00:48.210
So in this case I'll use my threshold value as a minimum value.

12
00:00:48.230 --> 00:00:50.160
Because using binary threshold.

13
00:00:50.490 --> 00:00:51.950
And I'll set it to 25.

14
00:00:52.020 --> 00:00:57.090
The pinning on how uniform the color and the overall shapes inside your region of interest background

15
00:00:57.150 --> 00:00:59.860
is you may need to play around with that threshold value.

16
00:01:00.180 --> 00:01:04.980
So leave it as a default 25 later on if you notice you're picking up too much noise from the background

17
00:01:04.980 --> 00:01:05.990
in the region of interest.

18
00:01:06.060 --> 00:01:09.060
You may want to edit that value.

19
00:01:09.170 --> 00:01:09.530
All right.

20
00:01:09.530 --> 00:01:14.370
The next step is to calculate the absolute difference between the background and the past and frame.

21
00:01:14.660 --> 00:01:21.140
And we can do this with a built in function and open CV which is absolute difference.

22
00:01:21.170 --> 00:01:28.550
Let's make sure A B S absolute F will pass in the background and in order for this function to work

23
00:01:28.610 --> 00:01:31.700
it needs the background as integer type.

24
00:01:31.700 --> 00:01:39.650
So just to make sure it's as type of say as type you in C a integer and then we'll pass and frame so

25
00:01:39.650 --> 00:01:42.970
that grabs the absolute difference between the background and the past and frame.

26
00:01:43.250 --> 00:01:45.960
And then we want to actually apply a threshold to this image.

27
00:01:46.840 --> 00:01:52.020
So I'll say we get our t if it actually was threshold it or not.

28
00:01:52.060 --> 00:02:01.480
And then the threshold that image is equal to CB2 threshold and then we're going to do here is passen

29
00:02:01.540 --> 00:02:02.440
the absolute difference.

30
00:02:02.440 --> 00:02:08.260
Image passing your minimum threshold value which in our case is just the threshold value chosen appear

31
00:02:09.610 --> 00:02:11.000
and then pass that in loops.

32
00:02:11.020 --> 00:02:14.120
Let's make sure we call CB2 that threshold there.

33
00:02:14.200 --> 00:02:20.090
And I know we're kind of using some similar terms here so let me just clarify threshold did with edia

34
00:02:20.100 --> 00:02:20.610
at the end.

35
00:02:20.650 --> 00:02:25.820
That is the threshold that image CB2 the threshold is the open see we function.

36
00:02:25.840 --> 00:02:33.120
Kukla a threshold this threshold right here that is the minimum value so that the max value can be 255.

37
00:02:33.190 --> 00:02:39.970
And if you watch to make things clear you can say threshold men and say threshold men there.

38
00:02:39.970 --> 00:02:42.170
So those are the values you can play around with.

39
00:02:42.220 --> 00:02:43.940
Hopefully that clarifies things.

40
00:02:43.990 --> 00:02:50.710
And then the actual type of thresholding we're going to be using is CB2 and we'll be calling a binary

41
00:02:50.920 --> 00:02:57.900
threshold then once we have that we want to grab the external contours from the image.

42
00:02:58.100 --> 00:03:07.220
So we'll say image contours hierarchy is equal to CB2 and we'll be using the fine contours function

43
00:03:07.220 --> 00:03:09.030
that we're already familiar with.

44
00:03:09.140 --> 00:03:16.130
We're going to pass the threshold at Image so threshold E.D. I'll pass on a copy of it so we don't mess

45
00:03:16.130 --> 00:03:21.140
around with the original threshold that image and then we're actually just interested in the external

46
00:03:21.860 --> 00:03:22.570
contours.

47
00:03:22.580 --> 00:03:29.750
So I'll say CB2 r e t r underscore external.

48
00:03:30.080 --> 00:03:36.140
And then for the third primer we're going to say CB2 and say chain underscore approx.

49
00:03:36.140 --> 00:03:39.410
And if you want you can just tabulate this chain approx.

50
00:03:39.410 --> 00:03:42.960
Simple as the method being used to calculate this.

51
00:03:43.340 --> 00:03:49.400
And then once we have that we're going to have a little quick check we'll see if the length of the contours

52
00:03:50.570 --> 00:03:51.410
is equal to zero.

53
00:03:51.410 --> 00:03:54.020
That actually means we think Graveney contours.

54
00:03:54.020 --> 00:03:56.360
So if that's the case we're just gonna return None.

55
00:03:58.110 --> 00:04:01.490
Capital and none that we are functionals get messed up.

56
00:04:01.640 --> 00:04:04.140
But if we are able to grab contours.

57
00:04:04.340 --> 00:04:09.070
So given the way that we're using the program we're going to calculate is it the largest external contour.

58
00:04:09.080 --> 00:04:10.410
Should that be the hand.

59
00:04:10.430 --> 00:04:15.560
So if you try introducing your hand and then another object into the region of interest that could screw

60
00:04:15.560 --> 00:04:17.330
up this actual function.

61
00:04:17.330 --> 00:04:24.330
So again this is assuming the largest external contour in the R Y

62
00:04:27.100 --> 00:04:31.930
is the hands which for our use case should pretty much be the case.

63
00:04:31.930 --> 00:04:43.620
So it will say that the hand segments is equal to the maximum value in that list of contours and we

64
00:04:43.620 --> 00:04:49.740
can pass on a key here because of the kind of strange formatting that contours is using not pi Ray.

65
00:04:49.890 --> 00:04:55.930
You can say key is equal to to dot contour area.

66
00:04:56.060 --> 00:04:59.360
And that's way of grabbing the contour of the largest amount the area.

67
00:04:59.580 --> 00:05:04.140
And again the reason we're doing this is because you may be picking up small little bits of pieces of

68
00:05:04.140 --> 00:05:06.960
noise which create little white spots in the background.

69
00:05:06.960 --> 00:05:09.660
We want to make sure we aren't treating those as the main contour.

70
00:05:09.660 --> 00:05:12.340
Really the main contour is just that large hand.

71
00:05:12.420 --> 00:05:14.640
Then once you have that we're going to go ahead.

72
00:05:14.700 --> 00:05:24.840
And at the end of this we'll return using tuple packing or turning the thresh hold it in the image and

73
00:05:24.840 --> 00:05:30.360
then we'll say hand segments again returning this threshold that image right here and then we're turning

74
00:05:30.360 --> 00:05:32.410
the head segment though it calculated right there.

75
00:05:33.580 --> 00:05:34.290
OK.

76
00:05:34.490 --> 00:05:35.560
So go ahead and run that.

77
00:05:35.660 --> 00:05:40.760
And now you have a function that will segment the hand region in the frame by calculating the absolute

78
00:05:40.760 --> 00:05:46.700
difference correctly in the threshold then grabbing the contours and then grabbing the largest contour

79
00:05:46.970 --> 00:05:51.860
treating that hand segment and then passing back the threshold at Image and as well as the hand segment

80
00:05:52.010 --> 00:05:53.940
which is essentially the contour for the hand.

81
00:05:54.230 --> 00:05:59.630
Coming up next we're going to do is show you can count the fingers with the convex hole we'll see at

82
00:05:59.630 --> 00:06:00.440
the next lecture.
