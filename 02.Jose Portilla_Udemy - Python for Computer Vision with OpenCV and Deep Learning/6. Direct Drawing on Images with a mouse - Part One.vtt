WEBVTT
1
00:00:05.410 --> 00:00:07.920
Welcome back everyone in this series of lectures.

2
00:00:07.920 --> 00:00:13.920
We're going to talk about directly drawing on image with the mouse so we can use callbacks to connect

3
00:00:13.980 --> 00:00:17.110
images to event functions with open TV.

4
00:00:17.250 --> 00:00:22.510
And this will allow us directly interact with images and later on interactive videos.

5
00:00:22.550 --> 00:00:26.630
We're going to separate this out into three parts and we're going to cover connecting callback functions

6
00:00:26.630 --> 00:00:30.450
in the first part adding functionality three choices in the second part.

7
00:00:30.650 --> 00:00:31.520
And then the third part.

8
00:00:31.520 --> 00:00:35.140
Expanding this so that you can actually drag the mouse for functionality.

9
00:00:35.150 --> 00:00:41.000
Let's start off in part one right now by show you how you can connect a function without using a callback

10
00:00:41.180 --> 00:00:42.590
to an actual image.

11
00:00:42.590 --> 00:00:48.260
And note for these three parts it's probably a good idea to actually run these as Python scripts instead

12
00:00:48.260 --> 00:00:50.120
of just running it into a cell.

13
00:00:50.120 --> 00:00:51.490
I'll be able to run them in my cell.

14
00:00:51.500 --> 00:00:56.510
But you may need to actually work on this as a Python script specifically if you're on a Mac OS or Linux

15
00:00:56.520 --> 00:00:57.910
so just keep that in mind.

16
00:00:58.310 --> 00:01:01.540
Go ahead and review the working of images open see the lecture.

17
00:01:01.550 --> 00:01:02.770
If you have any questions on that.

18
00:01:02.810 --> 00:01:05.250
Anyways let's get started by heading over to the Jupiter lab.

19
00:01:05.300 --> 00:01:09.830
OK here I am back at Jupiter lab something I should point out is that you're probably going to want

20
00:01:09.830 --> 00:01:15.110
to run everything in a single cell or as a single script and we're going to start out by showing you

21
00:01:15.110 --> 00:01:17.720
how to connect the function to a drawing.

22
00:01:17.720 --> 00:01:20.320
So I will say import CB2.

23
00:01:20.900 --> 00:01:24.260
And then I will import some pie as an MP.

24
00:01:24.650 --> 00:01:29.140
The first you're going to do is kind of block off a section for our function.

25
00:01:29.240 --> 00:01:38.900
So as we're function later on is going to go and then the next section is going to be showing the actual

26
00:01:38.900 --> 00:01:39.650
image.

27
00:01:39.650 --> 00:01:47.300
So showing image with open C-v and make sure you view the lecture showing images of open CV as well

28
00:01:47.300 --> 00:01:48.820
as showing images with the notebook.

29
00:01:49.040 --> 00:01:51.250
So I have these two main functions of our code.

30
00:01:51.290 --> 00:01:55.310
And let's actually start off with showing the image since we're pretty familiar with that already.

31
00:01:55.370 --> 00:01:57.640
We're going to actually create a black image first.

32
00:01:57.650 --> 00:02:02.350
So say image is equal to and zeros.

33
00:02:02.440 --> 00:02:08.530
And let's go ahead and just make this shape 5:12 by 512 with three color channels but they're all going

34
00:02:08.530 --> 00:02:11.160
to be black and we want these to be integers.

35
00:02:11.260 --> 00:02:19.810
So we're going to say and P It's and whips make sure we have that and it's OK.

36
00:02:20.090 --> 00:02:26.660
So those are super simple image aper integers all zeros and then we're going to do we'll say while true

37
00:02:27.680 --> 00:02:33.640
just as we've done in the past will say CB2 em show and we're going to give this a window name.

38
00:02:33.740 --> 00:02:37.370
So it's up to you whatever the window name is just make sure it doesn't have any spaces.

39
00:02:37.370 --> 00:02:41.550
So I'll say my drawing and the Will pasand the image.

40
00:02:41.780 --> 00:02:44.770
And keep in mind there's a big potential for typos as we go along.

41
00:02:44.870 --> 00:02:49.940
So you may just want to copy and paste from our provided notes directly and then we need to have some

42
00:02:49.940 --> 00:02:59.890
sort of if statement to when to break out of this while truly will say if CB2 dot weight key and we'll

43
00:02:59.890 --> 00:03:07.570
go ahead and wait 20 milliseconds and then we'll have the bitwise AND operator and 0 x f f is equal

44
00:03:07.570 --> 00:03:09.640
to 27.

45
00:03:09.640 --> 00:03:14.310
So essentially if someone has hit the escape key so once it's way to 20 milliseconds and someone has

46
00:03:14.410 --> 00:03:17.530
the escape he will go ahead and break out of the loop.

47
00:03:17.740 --> 00:03:24.280
And then at the end of all that will say CB2 and then we'll destroy all windows destroy all windows.

48
00:03:24.590 --> 00:03:30.490
OK so nothing actually new here we've actually seen all of this before the new stuff is when we actually

49
00:03:30.490 --> 00:03:34.370
connect a function to the image being shown here.

50
00:03:34.450 --> 00:03:38.340
And the way it gets connected is through the name of this actual window.

51
00:03:38.350 --> 00:03:49.240
So in this function section I'm going to create a function the earth draw circle and by default these

52
00:03:49.240 --> 00:03:54.010
functions when you connect them callbacks a particular image or video they're going to take a couple

53
00:03:54.010 --> 00:04:03.820
of arguments they'll take in event arguments and x y potential flags and then program.

54
00:04:04.150 --> 00:04:05.680
And right now we'll just say pass.

55
00:04:05.680 --> 00:04:08.100
So we won't do anything of this draw circle argument.

56
00:04:08.110 --> 00:04:13.300
Now comes the time to actually connect this function into the image callback.

57
00:04:13.300 --> 00:04:22.700
And the way this works is we just do the following say CB2 dot named window and we'll say when name

58
00:04:22.820 --> 00:04:23.840
is equal to.

59
00:04:24.080 --> 00:04:27.970
And this is where it needs to match exactly the name you said in show here.

60
00:04:28.160 --> 00:04:29.720
So I'm going to copy and paste the string.

61
00:04:29.720 --> 00:04:31.630
Remember that can't be any spaces in that string.

62
00:04:31.910 --> 00:04:40.740
So I'll say my drawing and then when you connect it to a callback will say C-v to that set.

63
00:04:41.100 --> 00:04:44.270
And there's different types of callbacks we'll explore later.

64
00:04:44.280 --> 00:04:50.320
But the most common one is the mouse callbacks that we're going to use will say CB2 that set mouse callback

65
00:04:51.600 --> 00:04:55.480
and we're going to say again my underscore drawing.

66
00:04:55.500 --> 00:04:57.560
Remember this name has to match exactly.

67
00:04:58.110 --> 00:05:04.130
And then the second argument takes is the callback function which is draw circle.

68
00:05:04.370 --> 00:05:08.220
So there's time passing in the function directly and not actually executing it so I don't have another

69
00:05:08.240 --> 00:05:09.470
set of princes here.

70
00:05:09.470 --> 00:05:12.210
Instead I just have a single closed princes.

71
00:05:12.350 --> 00:05:17.680
So this is how it actually connects this function to this image showing in the window.

72
00:05:17.750 --> 00:05:22.810
It's going to actually have a named window connect the name then set them as callback.

73
00:05:22.820 --> 00:05:28.100
Given that window name and then given the function and then since this window shares the same name it's

74
00:05:28.100 --> 00:05:29.610
now been connected to this function.

75
00:05:29.630 --> 00:05:30.740
Draw a circle.

76
00:05:30.740 --> 00:05:33.680
So how do we actually interact with this function.

77
00:05:33.830 --> 00:05:38.930
Well by default we pass in these parameters and then a lot of these are automatically passed and then

78
00:05:38.930 --> 00:05:40.990
called when you set the mouse callback.

79
00:05:41.000 --> 00:05:46.000
So things like x and y those are automatically taken into effect by open Sivi.

80
00:05:46.010 --> 00:05:50.560
It basically says OK what exposition and what mouse position is the mouse at.

81
00:05:50.750 --> 00:05:55.310
And then the event is what the mouse actually did that it do it right click to do a left click that

82
00:05:55.310 --> 00:05:56.640
a double click etc..

83
00:05:56.930 --> 00:06:02.030
And then flags and parameters are also things that are passed back in case there's additional parameters

84
00:06:02.270 --> 00:06:04.850
or if there's some warning flags necessary.

85
00:06:04.850 --> 00:06:09.790
So this draw circle a lot of these parameters are going to be filled in automatically within the set

86
00:06:09.860 --> 00:06:14.680
mouse callback which is why we just actually have this function and we're not actually calling it.

87
00:06:15.200 --> 00:06:23.570
In our case we need to say if the event that's passed back during the mouse callback is equal to CB2

88
00:06:23.660 --> 00:06:29.930
dot and then all caps events and if you hit tab you'll notice that there's actually a bunch of different

89
00:06:29.930 --> 00:06:30.640
events here.

90
00:06:30.650 --> 00:06:34.870
There is mouse wheel mouse moving mouse button up right button up.

91
00:06:34.880 --> 00:06:43.050
We're going to start some simple once we're going to say the events underscore El button down.

92
00:06:43.270 --> 00:06:46.720
So that means the event is at the left but it has been clicked down.

93
00:06:47.940 --> 00:06:54.210
Notice that the event is just the left button being clicked down not the event that left but has been

94
00:06:54.360 --> 00:06:56.050
let go of are gone up.

95
00:06:56.070 --> 00:07:00.140
So that means exactly when you hit on the mouse down it's going to do something.

96
00:07:00.180 --> 00:07:01.500
It's not going to wait for you to release.

97
00:07:01.500 --> 00:07:06.210
So it's kind of important distinction to me because later on we'll actually both use a left button down

98
00:07:06.270 --> 00:07:07.980
and left button up.

99
00:07:07.980 --> 00:07:16.860
So if event is equal to the left button being pressed down then we're going to say CB2 circle are going

100
00:07:16.860 --> 00:07:20.780
to pass in the image of the image that's being shown here.

101
00:07:22.070 --> 00:07:27.010
And then what I'm going to say is let's go ahead and grab the current mouse position.

102
00:07:27.020 --> 00:07:31.940
So that's the current X and current Y that's passed back in this set mouse callback.

103
00:07:32.810 --> 00:07:37.160
Every member of this event is what's being again passed back in the mouse callbacks and saying OK this

104
00:07:37.160 --> 00:07:42.380
particularly event that happened that was the left button down click which means a note of word the

105
00:07:42.380 --> 00:07:44.580
x and y is according to that mouse.

106
00:07:44.720 --> 00:07:50.690
And then we're going to grab the image put the center of the circle at that particular x and y and then

107
00:07:50.690 --> 00:07:56.660
we can add in some more stuff we can go ahead and add in a radius of the circle.

108
00:07:56.660 --> 00:08:02.120
We can add in the color of the circle soulish just make that totally green and then let's go ahead and

109
00:08:02.120 --> 00:08:04.150
make the circle filled in with negative 1.

110
00:08:04.160 --> 00:08:05.830
So these are all parameters we've seen before.

111
00:08:05.830 --> 00:08:12.080
Remember from drawing on circles we have the center the radius the color and then the thickness which

112
00:08:12.080 --> 00:08:14.290
if it's negative 1 that's a solid circle.

113
00:08:14.360 --> 00:08:19.800
So go in and save these changes and I will go ahead and run this all as one cell.

114
00:08:19.860 --> 00:08:24.830
Remember for on Mac OS or Linux you may have to just copy all of this and then paste it into a dot pie

115
00:08:24.830 --> 00:08:25.800
script file.

116
00:08:25.850 --> 00:08:27.610
But let's go ahead and run that.

117
00:08:27.830 --> 00:08:32.750
So right now I should see an asterix that it's running and if I come back down here and check out my

118
00:08:32.750 --> 00:08:39.590
drawing I'm able to click on it and wherever I click I get to see a green circle pop up.

119
00:08:39.650 --> 00:08:44.750
So notice how that's working right there and if I hit the escape key then it goes ahead and kills the

120
00:08:44.750 --> 00:08:45.420
window.

121
00:08:45.680 --> 00:08:47.230
So what's actually going on here.

122
00:08:47.390 --> 00:08:54.500
Well all that's happening is that I'm able to connect a function that takes in an event an x y flags

123
00:08:54.550 --> 00:09:00.830
and parameter look for a specific event and then do something with that image and I'm able to connect

124
00:09:00.830 --> 00:09:05.890
it through a main window a set mouse callback and then showing the image itself.

125
00:09:05.900 --> 00:09:06.650
All right.

126
00:09:06.650 --> 00:09:08.680
So that's really all there is to it.

127
00:09:08.810 --> 00:09:11.780
If you have any questions feel free to post the Kewney forums.

128
00:09:11.900 --> 00:09:15.780
The last thing I wanted to mention is you probably noticed that the image looked a little gray.

129
00:09:15.800 --> 00:09:18.780
That's because we're using N.P. I anti-hate.

130
00:09:18.830 --> 00:09:21.440
In fact if you want you can actually get rid of that integer.

131
00:09:21.620 --> 00:09:26.020
And if I were to run this again you'll notice that now it'll appear pure black.

132
00:09:26.120 --> 00:09:28.140
So it's up to you what you want to do there.

133
00:09:29.520 --> 00:09:32.910
So just keep that in mind as you kind of move along for the future lecturers.

134
00:09:33.150 --> 00:09:34.150
Okay thanks.

135
00:09:34.170 --> 00:09:35.220
And we'll see at the next lecture.
