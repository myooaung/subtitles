WEBVTT
1
00:00:05.280 --> 00:00:07.170
Welcome back everyone in this lecture.

2
00:00:07.170 --> 00:00:09.510
We're going to talk about the watershed algorithm.

3
00:00:10.560 --> 00:00:17.250
In geography a watershed is a land area that channels rainfall and snow melt into creeks streams and

4
00:00:17.250 --> 00:00:24.120
rivers and eventually even to outflow points like reservoirs bays and the ocean these watersheds can

5
00:00:24.120 --> 00:00:27.490
then be segmented as topographical maps with boundaries.

6
00:00:27.540 --> 00:00:30.810
So again watershed basically just telling you where the water ends up.

7
00:00:30.840 --> 00:00:38.190
And as you may imagine the lower the land level is the water will then drain into those watersheds which

8
00:00:38.210 --> 00:00:40.200
you can then map as topography.

9
00:00:40.430 --> 00:00:47.000
And notice here that when the topography mapping happens you get these segments and metaphorically the

10
00:00:47.000 --> 00:00:53.060
watershed algorithm transformation that works on images is going to treat the image operates just like

11
00:00:53.060 --> 00:00:57.350
a topographical map with the brightness of each point representing its height.

12
00:00:57.500 --> 00:01:02.930
And then it finds the lines that run along the tops of these so-called ridges essentially trying to

13
00:01:02.930 --> 00:01:09.470
apply the same fundamental idea behind the way water aggregates in different topographies to the way

14
00:01:09.500 --> 00:01:17.270
brightness aggregates in images any greyscale image can be viewed as a topographic surface where high

15
00:01:17.270 --> 00:01:22.160
intensity denotes peaks and hills while low intensity denotes valleys.

16
00:01:22.370 --> 00:01:28.230
The algorithm can then fill every isolated valley or the local minimum with different colored water.

17
00:01:28.310 --> 00:01:35.150
In this case labels so actually be coloring the different segments of our image as the water rises.

18
00:01:35.180 --> 00:01:41.330
Essentially the intensity depending on the peaks those gradients nearby the so-called water from different

19
00:01:41.330 --> 00:01:41.790
valleys.

20
00:01:41.810 --> 00:01:43.590
That is the different segments of the image.

21
00:01:43.640 --> 00:01:48.680
There are going to be filled in different colors and if they end up meeting each other you can imagine

22
00:01:48.680 --> 00:01:50.100
that those colors would start to merge.

23
00:01:50.150 --> 00:01:54.120
Just like if a lake was right next to the ocean and they were getting closer and closer.

24
00:01:54.140 --> 00:01:56.480
Those two bodies of water would end up merging.

25
00:01:56.540 --> 00:02:01.520
So to avoid this merging with what the algorithm does is it creates a barrier essentially it's going

26
00:02:01.520 --> 00:02:07.460
to segment's edge boundaries in locations where the so-called water merges essentially where pieces

27
00:02:07.460 --> 00:02:09.810
of different brightness levels end up merging.

28
00:02:09.830 --> 00:02:16.730
It's going to create a boundary now this algorithm is especially useful for segmenting images into background

29
00:02:16.730 --> 00:02:21.860
and foreground in situations that are usually difficult for other algorithms and a really common example

30
00:02:21.860 --> 00:02:24.960
of this is the use of coin's next to each other on a table.

31
00:02:26.290 --> 00:02:31.570
So here we have an image of a bunch of coins right next to each other on a table for a human looking

32
00:02:31.570 --> 00:02:32.230
at this image.

33
00:02:32.230 --> 00:02:36.560
It's really easy to see that you have separated coins on a table.

34
00:02:36.640 --> 00:02:44.420
However for a lot of computer vision algorithms they just see a dark blob on the background of white.

35
00:02:44.530 --> 00:02:50.200
So it may be unclear to the algorithm if it should be treated as one large object or many small objects.

36
00:02:50.230 --> 00:02:55.420
In fact it may actually just grab everything in the foreground and treat that as one object versus the

37
00:02:55.420 --> 00:02:56.420
black background.

38
00:02:57.530 --> 00:03:01.730
The watershed algorithm can be really effective for these sort of problems.

39
00:03:01.730 --> 00:03:05.670
In fact will be able to detect due to the way the algorithm works.

40
00:03:05.720 --> 00:03:08.710
The actual boundaries of these different segments.

41
00:03:08.750 --> 00:03:15.830
And then we can actually isolate and segment all these coins individually as a human would later on

42
00:03:15.830 --> 00:03:20.780
we're also going to learn how to provide our own custom so-called seeds that allow us to manually start

43
00:03:21.020 --> 00:03:26.810
the valleys of the watersheds go that way we'll be able to then highlight for instance the sky on an

44
00:03:26.810 --> 00:03:34.000
image of a landscape and then we'll be automatically able to fill in that particular segment.

45
00:03:34.010 --> 00:03:39.210
So for example here we have an image and we end up labeling our own seeds just by clicking.

46
00:03:39.210 --> 00:03:42.110
Notice how the colors are basically corresponding to each other.

47
00:03:42.110 --> 00:03:46.820
So the grass that's nearest to us that's all a lime green than the rock on the right hand side that's

48
00:03:46.830 --> 00:03:47.680
all purple.

49
00:03:47.780 --> 00:03:52.730
So these are setting seeds and then you can apply the watershed algorithm to the specific seeds that

50
00:03:52.730 --> 00:03:57.910
you set manually and it will automatically then segment the image as you seeded it.

51
00:03:58.100 --> 00:04:03.800
So notice now the grass has been automatically segmented from the other elements that were seated with

52
00:04:03.800 --> 00:04:04.720
the same colors.

53
00:04:06.160 --> 00:04:11.620
Let's begin by exploring the syntax of the watershed algorithm with open C-v and then in the next couple

54
00:04:11.620 --> 00:04:18.180
of lectures will expand this idea to setting our own seeds on a hop over to a Jupiter lab now all right

55
00:04:18.180 --> 00:04:19.780
here I am at a Jupiter notebook.

56
00:04:19.800 --> 00:04:25.030
I've gone ahead and done my imports as well as this display function that we've been working with.

57
00:04:25.080 --> 00:04:27.180
What it will do now is the following.

58
00:04:27.180 --> 00:04:37.370
I'm going to load up an image called Sep underscore coins are separated coins and let's say CB2 imagery

59
00:04:37.520 --> 00:04:42.260
and inside of the data folder there's an image called Pennine start Jay peg.

60
00:04:42.470 --> 00:04:51.000
Let's go ahead and display those pennies here and say display the separated coins.

61
00:04:51.490 --> 00:04:56.020
And when we read that I didn't actually provide a color mapping here and it's just going to show the

62
00:04:56.020 --> 00:04:56.580
pennies.

63
00:04:56.650 --> 00:04:57.630
So we have these pennies.

64
00:04:57.670 --> 00:05:00.030
And notice how close they are to each other.

65
00:05:00.130 --> 00:05:04.300
For humans it's really easy to tell that there are six separate pennies here.

66
00:05:04.300 --> 00:05:08.910
But as you previously mentioned a lot of computer vision algorithms treat this as just a giant blob.

67
00:05:08.980 --> 00:05:11.400
And then everything else is a white background.

68
00:05:11.440 --> 00:05:17.040
So let's imagine that our task is to actually segment this image into seven different segments.

69
00:05:17.080 --> 00:05:19.400
Six for the coins and then one for the background.

70
00:05:19.600 --> 00:05:23.870
I'm going to show you using techniques that we already know what the result would be.

71
00:05:23.870 --> 00:05:27.870
Or is the result actually doesn't work it's going to segment this all as one image.

72
00:05:27.970 --> 00:05:31.650
But I want to show you the approach with foot algorithms we know so far.

73
00:05:31.750 --> 00:05:36.160
So you can tell just how effective the watershed algorithm is when we apply that one.

74
00:05:36.160 --> 00:05:37.500
So let's get started.

75
00:05:37.750 --> 00:05:44.590
The steps we're going to be taking is first we will apply a medium blur to the image the median blur

76
00:05:44.590 --> 00:05:49.360
will help us get rid of features that we don't really need such as the faces on the coins themselves.

77
00:05:49.360 --> 00:05:53.050
And if you have a keen eye you'll notice that one of these is actually a 2st euro.

78
00:05:53.050 --> 00:05:57.190
They're not all pennies but we're to try to blur the image that way Rulli only focus on the circles

79
00:05:57.190 --> 00:05:58.560
of the coins themselves.

80
00:05:58.930 --> 00:06:03.430
Then we're going to do is convert it to grayscale and technically the order of these two doesn't really

81
00:06:03.430 --> 00:06:04.570
matter too much.

82
00:06:04.870 --> 00:06:11.650
And once we have it in grayscale and we have it blurred we're going to apply a binary threshold in order

83
00:06:11.650 --> 00:06:17.450
to make it black and white and then that way we can then find the contours.

84
00:06:17.460 --> 00:06:19.920
So we're already familiar all four of these steps.

85
00:06:19.920 --> 00:06:24.930
We've had lectures on each of these individually during the image processing section of the course.

86
00:06:24.930 --> 00:06:31.320
So let's try applying this and see how it works at finding these actual coins and we'll notice again

87
00:06:31.380 --> 00:06:34.130
that it doesn't actually do the job completely.

88
00:06:34.130 --> 00:06:41.180
So for the blurring we're just going to say Sep blur for separated coins blurred.

89
00:06:41.220 --> 00:06:47.840
I wouldn't choose a median Blar and pasand separated coins and remember we just provide a kernel size

90
00:06:47.840 --> 00:06:48.360
here.

91
00:06:48.530 --> 00:06:51.990
I'm going to provide a pretty large kernel size because this is actually a really large image.

92
00:06:51.990 --> 00:06:55.890
Notice it's 4000 by 3000 pixels because I took this from my phone.

93
00:06:56.010 --> 00:06:59.300
My phone actually has quite a lot of megapixels on it.

94
00:06:59.310 --> 00:07:04.130
So we're going to run that and then let's go ahead and display the results of that Blar

95
00:07:07.010 --> 00:07:08.840
and there is the result of that blur.

96
00:07:09.120 --> 00:07:13.300
OK then the next step is to actually convert this into greyscale.

97
00:07:13.430 --> 00:07:23.630
So we're going to do here say Gray separated coin's is to CVT color and passen the separated blurred

98
00:07:23.630 --> 00:07:26.740
coins and then go color.

99
00:07:27.140 --> 00:07:32.770
I think right now it's in BGR and then we'll go to gray and WIPs.

100
00:07:32.770 --> 00:07:37.150
Let's say CB2 color underscore BGR to gray.

101
00:07:37.300 --> 00:07:38.640
Let's actually display it now.

102
00:07:39.680 --> 00:07:41.720
Gray separated coin's.

103
00:07:41.860 --> 00:07:42.520
And there we have it.

104
00:07:42.520 --> 00:07:44.880
So now we have grayscale and they're a little blurred.

105
00:07:44.890 --> 00:07:49.460
So we don't have to worry too much about the facial features or the number two on that coin there.

106
00:07:49.600 --> 00:07:55.250
Now it's time to apply a binary threshold so we separate out into just foreground and background.

107
00:07:55.480 --> 00:07:56.480
Let's try this out.

108
00:07:56.530 --> 00:07:58.060
We'll say our t.

109
00:07:59.580 --> 00:08:04.890
And then separated coin's threshold is equal to C-v to threshold.

110
00:08:04.980 --> 00:08:12.670
We're going to pass in that gray separated coins and I'm just going to apply maybe 160 to 255.

111
00:08:12.870 --> 00:08:16.230
As you mentioned you kind of mess around with that middle value as far as the threshold.

112
00:08:16.410 --> 00:08:20.890
But in our case we are going to do a binary threshold.

113
00:08:21.030 --> 00:08:27.210
However it's going to be inverted That way the foreground ends up being white so run that and display

114
00:08:27.210 --> 00:08:28.060
the results.

115
00:08:30.390 --> 00:08:31.580
And here we have our results.

116
00:08:31.590 --> 00:08:33.780
And again you can play around at this middle value.

117
00:08:33.780 --> 00:08:36.990
You can try something like 7 and see how that works.

118
00:08:36.990 --> 00:08:42.540
But you notice as you go a little lower you end up getting distortion due to the faces on the coins

119
00:08:42.540 --> 00:08:48.020
themselves which is why I pushed it up just to 160 and you're probably already noticing there isn't

120
00:08:48.020 --> 00:08:54.630
a nice way to go about this without your computer vision image processing algorithms attaching the coin

121
00:08:54.630 --> 00:08:55.380
somehow.

122
00:08:55.530 --> 00:08:57.890
There may be some erosion and we could then do.

123
00:08:57.900 --> 00:09:01.790
But that would end up eroding from all the boundaries not just these connections.

124
00:09:01.840 --> 00:09:03.750
So different approaches we could take here.

125
00:09:03.750 --> 00:09:08.160
I just want to show you just how difficult this task is given the image processing algorithms that we

126
00:09:08.160 --> 00:09:17.150
know right now the final step is actually find the contours so I'll say image contours and then hierarchy

127
00:09:18.400 --> 00:09:21.840
and we'll say C-v to find contours.

128
00:09:22.330 --> 00:09:24.060
And I'm actually going to make a copy.

129
00:09:26.110 --> 00:09:28.460
Threshold that way don't mess it up.

130
00:09:28.540 --> 00:09:32.950
And then we're going to use the methods that we used in the lecture just these different methods.

131
00:09:32.950 --> 00:09:40.410
CB2 r t r underscore c c camp you should be able to tab autocomplete these.

132
00:09:40.450 --> 00:09:44.710
And then we'll use chain prox simple.

133
00:09:44.950 --> 00:09:51.610
So now that we have that we're going to just do what we did in the contours lecture will say for I in

134
00:09:51.610 --> 00:09:54.180
range the length of contours.

135
00:09:54.220 --> 00:10:00.320
Let's make sure I actually spelled the right length of contours lowercase.

136
00:10:00.540 --> 00:10:02.250
If the hierarchy

137
00:10:05.140 --> 00:10:09.120
zero I 3.

138
00:10:09.140 --> 00:10:13.730
And if you don't remember this go ahead and review the lecture on finding contours If it's equal to

139
00:10:13.730 --> 00:10:15.970
negative 1 though we know it's external contour.

140
00:10:15.980 --> 00:10:18.160
Right now we're just looking for extra contours.

141
00:10:18.170 --> 00:10:20.750
And hopefully there would be six of them one for each circle.

142
00:10:20.750 --> 00:10:25.070
Now we can see it's already unlikely given the fact that there seems to be connections in this binary

143
00:10:25.070 --> 00:10:33.110
threshold so we're going to say negative 1 and then say CB2 draw contours.

144
00:10:33.890 --> 00:10:39.610
Pasand the separated coin's the contours themselves by the color we want to draw.

145
00:10:39.660 --> 00:10:44.340
In this case will draw them as red and then the thickness of the line will say thickness is 10.

146
00:10:44.340 --> 00:10:44.600
All right.

147
00:10:44.610 --> 00:10:48.890
So let's try displaying it and see how he did with the methods we know so far.

148
00:10:49.980 --> 00:10:54.850
So if we display the coins you notice that the contours it found was just one giant contour.

149
00:10:54.900 --> 00:10:58.800
It was actually able to end up closing this gap something we could try.

150
00:10:58.800 --> 00:11:05.160
Given the image processing that we already know is trying to erode away from this image further.

151
00:11:05.160 --> 00:11:12.180
However if you try doing that you'll end up distorting the actual with or radius of these pennies and

152
00:11:12.180 --> 00:11:15.050
then that would also distort your actual results.

153
00:11:15.060 --> 00:11:21.090
So unfortunately right now we don't have a nice way to segment this image or find the contours of these

154
00:11:21.150 --> 00:11:22.940
six separate Penneys.

155
00:11:23.160 --> 00:11:28.140
We're going to need to use a more advanced algorithm like the watershed algorithm and that has various

156
00:11:28.140 --> 00:11:28.800
steps to it.

157
00:11:28.800 --> 00:11:34.020
So in the next lecture we're going to try the same problem here try to actually grab these contours

158
00:11:34.290 --> 00:11:35.120
and see how we can do it.

159
00:11:35.130 --> 00:11:38.430
The watershed algorithm and see if it performs better.

160
00:11:38.430 --> 00:11:38.800
All right.

161
00:11:38.940 --> 00:11:44.970
So we'll see at the next lecture where we actually do the watershed algorithm in order to find the foreground

162
00:11:44.970 --> 00:11:48.590
markers here for the six separate coins we'll see at the next lecture.
