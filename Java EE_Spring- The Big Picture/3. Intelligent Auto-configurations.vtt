WEBVTT
1
00:00:01.818 --> 00:00:03.912
Let's talk about auto-configuration.

2
00:00:03.912 --> 00:00:08.873
Auto-configuration is a feature of Spring Boot that provides a

3
00:00:08.873 --> 00:00:11.235
best-guess configuration for an application,

4
00:00:11.235 --> 00:00:13.487
and as the documentation states,

5
00:00:13.487 --> 00:00:17.527
it attempts to automatically configure your Spring application

6
00:00:17.527 --> 00:00:21.177
based on the dependencies that you've added to it.

7
00:00:21.177 --> 00:00:26.642
And it does this by being both contextually aware and smart.

8
00:00:26.642 --> 00:00:28.205
Let's look at a real-life analogy.

9
00:00:28.205 --> 00:00:30.503
If you were to hand someone a plate,

10
00:00:30.503 --> 00:00:34.773
it's completely reasonable and normal to assume that you

11
00:00:34.773 --> 00:00:37.848
might also hand them a fork and a knife,

12
00:00:37.848 --> 00:00:41.992
but if you hand someone a plate with a cookie on it,

13
00:00:41.992 --> 00:00:46.105
you're probably not going to be using that fork and knife.

14
00:00:46.105 --> 00:00:48.652
So based on the context at hand, that is,

15
00:00:48.652 --> 00:00:51.881
whether or not the plate had a cookie on it,

16
00:00:51.881 --> 00:00:55.710
determined whether or not you needed to set up the

17
00:00:55.710 --> 00:00:58.307
plate with a fork and a knife.

18
00:00:58.307 --> 00:01:02.017
Well, Spring Boot works a lot in the same way.

19
00:01:02.017 --> 00:01:06.061
It saves the developer time by making use of context to best

20
00:01:06.061 --> 00:01:08.795
guess how an application should be set up.

21
00:01:08.795 --> 00:01:09.825
So for instance,

22
00:01:09.825 --> 00:01:14.240
if Spring Boot notices that an application has a certain

23
00:01:14.240 --> 00:01:17.119
dependency that is related to a database,

24
00:01:17.119 --> 00:01:20.542
it can make a reasonable assumption that it should probably

25
00:01:20.542 --> 00:01:24.659
configure certain things to access that database,

26
00:01:24.659 --> 00:01:29.953
and even more so if that dependency is for a very specific database,

27
00:01:29.953 --> 00:01:31.837
such as Oracle or MySQL,

28
00:01:31.837 --> 00:01:37.046
Spring Boot can make an even better assumption and probably set up

29
00:01:37.046 --> 00:01:41.673
features that may be specific to that certain database.

30
00:01:41.673 --> 00:01:46.506
For the developer, setting up auto-configuration is extremely easy.

31
00:01:46.506 --> 00:01:51.786
The developer only needs to add one annotation to their Spring Boot application.

32
00:01:51.786 --> 00:01:55.568
That's the @EnableAutoConfiguration annotation.

33
00:01:55.568 --> 00:01:58.239
And if you're not familiar with what annotations are,

34
00:01:58.239 --> 00:02:00.832
that's the thing with the @ symbol,

35
00:02:00.832 --> 00:02:06.432
think of them as additional metadata that's added to the code that can be

36
00:02:06.432 --> 00:02:10.452
read at runtime and you can use to make decisions upon.

37
00:02:10.452 --> 00:02:13.733
Really though, don't worry about the code, it's not really the point.

38
00:02:13.733 --> 00:02:18.417
The point here is that it's really, really easy to enable.

39
00:02:18.417 --> 00:02:23.099
And likewise, configurations are also really easy to disable.

40
00:02:23.099 --> 00:02:26.114
It's not sort of this all or nothing thing.

41
00:02:26.114 --> 00:02:35.000
Spring Boot tries to make them as noninvasive as possible. So if they get in the way, they can easily be removed.

