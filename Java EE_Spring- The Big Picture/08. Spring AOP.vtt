WEBVTT
1
00:00:01.806 --> 00:00:05.073
In this section, we'll learn more about Spring AOP.

2
00:00:05.073 --> 00:00:11.166
And in order to understand what it is, we first have to understand what AOP is.

3
00:00:11.166 --> 00:00:13.519
AOP stands for aspect-oriented programming,

4
00:00:13.519 --> 00:00:18.948
and it's a programming paradigm that aims to increase the modularity by

5
00:00:18.948 --> 00:00:21.601
allowing the separation of cross-cutting concerns.

6
00:00:21.601 --> 00:00:26.140
Now, you may be a little confused with what exactly that means,

7
00:00:26.140 --> 00:00:29.557
so let's break up this definition into three separate parts.

8
00:00:29.557 --> 00:00:32.424
First, when we say it's a programming paradigm,

9
00:00:32.424 --> 00:00:37.308
that simply means that it's just a way of programming or writing code,

10
00:00:37.308 --> 00:00:42.261
and second, the definition says that it aims to increase modularity.

11
00:00:42.261 --> 00:00:46.857
And in simple terms, this just means that it increases organization.

12
00:00:46.857 --> 00:00:51.154
And third, it allows you to separate cross-cutting concerns,

13
00:00:51.154 --> 00:00:55.875
or concerns that affect many parts of an application

14
00:00:55.875 --> 00:00:59.510
because they span multiple layers, or tiers,

15
00:00:59.510 --> 00:01:01.068
of the application.

16
00:01:01.068 --> 00:01:06.152
A classic example of a cross-cutting concern is security because security

17
00:01:06.152 --> 00:01:10.508
can't be contained to any one area of the application,

18
00:01:10.508 --> 00:01:13.693
and instead it spans multiple parts of the application.

19
00:01:13.693 --> 00:01:17.559
You can find it throughout various areas of the application.

20
00:01:17.559 --> 00:01:18.928
So just to recap,

21
00:01:18.928 --> 00:01:22.546
AOP is a way of programming that increases organization of

22
00:01:22.546 --> 00:01:25.628
code for concerns that span multiple layers,

23
00:01:25.628 --> 00:01:28.035
or tiers, of an application.

24
00:01:28.035 --> 00:01:32.537
Just to give you an idea, without AOP, solving concerns that are cross-cutting,

25
00:01:32.537 --> 00:01:38.914
results in scattered and duplicated code across many parts of the application.

26
00:01:38.914 --> 00:01:41.667
AOP is really beyond the scope of this course,

27
00:01:41.667 --> 00:01:45.642
but let's quickly look at the benefits that Spring AOP provides,

28
00:01:45.642 --> 00:01:48.392
and we'll finish with a concrete example.

29
00:01:48.392 --> 00:01:53.609
Spring AOP is an implementation of AOP within the Spring Framework,

30
00:01:53.609 --> 00:01:55.874
and it mainly has two uses,

31
00:01:55.874 --> 00:01:59.318
with the first being used to implement certain features

32
00:01:59.318 --> 00:02:01.324
within the Spring Framework itself,

33
00:02:01.324 --> 00:02:05.999
and the second being a valuable tool for developers that need

34
00:02:05.999 --> 00:02:09.143
to solve problems that span multiple layers,

35
00:02:09.143 --> 00:02:11.490
or tiers, of their application.

36
00:02:11.490 --> 00:02:15.319
It's sort of a nice tool to have in their toolbox.

37
00:02:15.319 --> 00:02:16.764
As I mentioned before,

38
00:02:16.764 --> 00:02:20.762
security is a great example of something that AOP can solve.

39
00:02:20.762 --> 00:02:27.575
So let's look at a typical example of a piece of code that's only allowed to be

40
00:02:27.575 --> 00:02:31.382
executed by persons who are authorized and authenticated.

41
00:02:31.382 --> 00:02:35.683
We first check if the user is authenticated and if they have the correct role,

42
00:02:35.683 --> 00:02:37.812
for instance, like an administrator role,

43
00:02:37.812 --> 00:02:42.388
and if they do, this sensitive operation is allowed to execute.

44
00:02:42.388 --> 00:02:46.838
And if not, we raise an error, maybe log that failed attempt,

45
00:02:46.838 --> 00:02:49.909
and redirect the user to a login page.

46
00:02:49.909 --> 00:02:53.985
This same series of operations is likely to occur in

47
00:02:53.985 --> 00:02:56.142
many places throughout the application.

48
00:02:56.142 --> 00:02:59.027
Basically anywhere there's a sensitive operation.

49
00:02:59.027 --> 00:03:02.992
And instead of spreading this same logic throughout all of the application,

50
00:03:02.992 --> 00:03:09.618
Spring AOP allows us to organize these operations into a single area that

51
00:03:09.618 --> 00:03:13.172
can be applied to different parts of the application.

52
00:03:13.172 --> 00:03:16.467
Now let's look at an example that utilizes Spring Security,

53
00:03:16.467 --> 00:03:19.812
a project that we'll discuss further in a future module.

54
00:03:19.812 --> 00:03:23.608
Spring Security utilizes the Spring Framework's AOP support

55
00:03:23.608 --> 00:03:26.325
behind the scenes to implement security.

56
00:03:26.325 --> 00:03:27.652
In our example,

57
00:03:27.652 --> 00:03:31.798
the sensitive method is annotated with the @PreAuthorize annotation,

58
00:03:31.798 --> 00:03:36.321
and it has a condition to ensure that the user has

59
00:03:36.321 --> 00:03:38.324
the role of admin for instance.

60
00:03:38.324 --> 00:03:43.006
And remember that annotations are just metadata that's added to the code.

61
00:03:43.006 --> 00:03:45.201
And by adding this metadata,

62
00:03:45.201 --> 00:03:49.358
Spring AOP can identify that this method requires security,

63
00:03:49.358 --> 00:03:52.612
and apply the appropriate security logic.

64
00:03:52.612 --> 00:03:55.732
The added benefit of this is that the logic within the

65
00:03:55.732 --> 00:03:58.110
sensitive operation becomes very clear,

66
00:03:58.110 --> 00:04:02.993
and it's not cluttered with surrounding logic that's not directly related

67
00:04:02.993 --> 00:04:09.138
to what the logic is trying to accomplish just to ensure that the user is

68
00:04:09.138 --> 00:04:12.853
secured and authorized to execute this method.

69
00:04:12.853 --> 00:04:15.956
It's just the sensitive operation.

70
00:04:15.956 --> 00:04:18.035
If you want to learn more about Spring AOP,

71
00:04:18.035 --> 00:04:29.000
there's an excellent course on Pluralsight by Eberhard Wolff called Aspect Oriented Programming using Spring AOP and AspectJ.

