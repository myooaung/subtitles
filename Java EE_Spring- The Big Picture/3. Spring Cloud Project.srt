1
00:00:01,901 --> 00:00:05,038
The next project we'll take a look at is called Spring Cloud,

2
00:00:05,038 --> 00:00:10,010
and you can visit this Spring Cloud project page by visiting projects.

3
00:00:10,010 --> 00:00:11,921
spring.

4
00:00:11,921 --> 00:00:13,831
io/spring-cloud.

5
00:00:13,831 --> 00:00:17,904
The Spring Cloud project is a project that's built on top of Spring Boot,

6
00:00:17,904 --> 00:00:21,936
and it makes it easier to build distributed systems.

7
00:00:21,936 --> 00:00:24,690
Now if you're not familiar with what a distributed system is,

8
00:00:24,690 --> 00:00:28,317
a distributed system is just a number of different applications

9
00:00:28,317 --> 00:00:31,365
that are all linked together by a network.

10
00:00:31,365 --> 00:00:34,768
And a common and popular example of a distributed

11
00:00:34,768 --> 00:00:36,574
system is a microservices architecture.

12
00:00:36,574 --> 00:00:41,438
And again, you may or may not have heard of what a microservice is,

13
00:00:41,438 --> 00:00:42,909
so let me explain.

14
00:00:42,909 --> 00:00:46,692
A microservice is just a small application that's very well

15
00:00:46,692 --> 00:00:48,945
scoped to a single purpose or domain.

16
00:00:48,945 --> 00:00:52,551
So for instance, if you have something like an account microservice,

17
00:00:52,551 --> 00:00:56,708
its only job is to deal with accounts in the system.

18
00:00:56,708 --> 00:00:59,433
It knows how to create them, and retrieve them,

19
00:00:59,433 --> 00:01:00,342
and edit them,

20
00:01:00,342 --> 00:01:04,504
and a microservices architecture is just a bunch of microservices that

21
00:01:04,504 --> 00:01:07,977
are communicating with one another over a network.

22
00:01:07,977 --> 00:01:10,586
When you implement something like a microservices architecture,

23
00:01:10,586 --> 00:01:12,911
you end up running into a number of well-known

24
00:01:12,911 --> 00:01:14,658
problems that have well-known solutions.

25
00:01:14,658 --> 00:01:16,603
And one example is,

26
00:01:16,603 --> 00:01:20,182
how does a microservice find or discover another

27
00:01:20,182 --> 00:01:23,860
microservice that it needs to do its own work?

28
00:01:23,860 --> 00:01:25,966
And this problem is called service discovery,

29
00:01:25,966 --> 00:01:29,365
and it's exactly one of the things that the Spring

30
00:01:29,365 --> 00:01:31,259
Cloud project helps you implement.

31
00:01:31,259 --> 00:01:33,192
If we scroll down and take a look at the example here,

32
00:01:33,192 --> 00:01:35,449
we can see that there's one new interesting

33
00:01:35,449 --> 00:01:37,868
annotation that we've never seen before.

34
00:01:37,868 --> 00:01:41,555
And that's the @EnableDiscoveryClient annotation.

35
00:01:41,555 --> 00:01:45,534
And by using Spring Cloud and adding this annotation to an application,

36
00:01:45,534 --> 00:01:49,674
the application, or service as it's usually called,

37
00:01:49,674 --> 00:01:52,109
cannot only find other services,

38
00:01:52,109 --> 00:01:56,492
but it itself is also discoverable by other services.

39
00:01:56,492 --> 00:01:59,394
Service discovery is just one of the many things that Spring Cloud

40
00:01:59,394 --> 00:02:01,553
helps with when building a distributed system,

41
00:02:01,553 --> 00:02:04,019
and just like the Spring Data project,

42
00:02:04,019 --> 00:02:08,129
the Spring Cloud project is not actually a project itself.

43
00:02:08,129 --> 00:02:11,536
It's an umbrella project that contains a number of different subprojects,

44
00:02:11,536 --> 00:02:15,130
and those subprojects can help you with things like

45
00:02:15,130 --> 00:02:19,122
configuration and failures within a distributed system.

46
00:02:19,122 --> 00:02:21,195
If you want to learn more about Spring Cloud,

47
00:02:21,195 --> 00:02:28,000
there's a great course on Pluralsight, authored by myself, called Spring Cloud Fundamentals.

