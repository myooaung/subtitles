WEBVTT
1
00:00:01.823 --> 00:00:05.485
The Spring Framework's Core module, or Spring Core as it's often called,

2
00:00:05.485 --> 00:00:09.585
is one of the most important, if not the most important pieces,

3
00:00:09.585 --> 00:00:11.108
of the Spring Framework.

4
00:00:11.108 --> 00:00:16.971
It serves as the foundational module upon which every other module is built.

5
00:00:16.971 --> 00:00:20.745
Spring Core is responsible for providing a number of different functionalities,

6
00:00:20.745 --> 00:00:24.411
such as internationalization support, validation support,

7
00:00:24.411 --> 00:00:27.900
data binding support, type conversion support,

8
00:00:27.900 --> 00:00:29.952
and a whole lot more; however,

9
00:00:29.952 --> 00:00:34.064
at the center of Spring Core is something called dependency injection.

10
00:00:34.064 --> 00:00:38.636
The topic of dependency injection is well beyond the scope of this course,

11
00:00:38.636 --> 00:00:43.143
but we should be able to get a rough understanding of its purpose.

12
00:00:43.143 --> 00:00:46.510
When software is developed using object-oriented programming,

13
00:00:46.510 --> 00:00:51.651
developers create objects that represent or model particular things,

14
00:00:51.651 --> 00:00:55.448
and objects typically don't exist by themselves.

15
00:00:55.448 --> 00:00:58.869
There are usually several objects that make up an application,

16
00:00:58.869 --> 00:01:04.911
and each of those objects may in turn have dependencies on other objects.

17
00:01:04.911 --> 00:01:10.208
For instance, a developer might create a computer object to represent a computer,

18
00:01:10.208 --> 00:01:15.270
and that computer object would likely have dependencies on other objects,

19
00:01:15.270 --> 00:01:20.217
like a hard disk object, or one or more memory objects,

20
00:01:20.217 --> 00:01:25.086
and dependency injection is about dealing with the way

21
00:01:25.086 --> 00:01:27.386
objects obtain those dependencies.

22
00:01:27.386 --> 00:01:31.079
There's mainly two different choices for fulfilling object dependencies,

23
00:01:31.079 --> 00:01:34.821
number one, the object can fulfill its own dependencies,

24
00:01:34.821 --> 00:01:36.069
or number two,

25
00:01:36.069 --> 00:01:40.942
the object can declare what it depends on and rely on

26
00:01:40.942 --> 00:01:44.031
something else to fulfill those dependencies.

27
00:01:44.031 --> 00:01:47.365
Choice number one may seem like the easiest and best idea,

28
00:01:47.365 --> 00:01:50.267
but it has some particularly bad limitations.

29
00:01:50.267 --> 00:01:54.715
If an object is responsible for fulfilling its own dependencies,

30
00:01:54.715 --> 00:01:57.631
then the object and those dependencies become

31
00:01:57.631 --> 00:02:02.301
strongly dependent upon each other, or tightly coupled as it's called.

32
00:02:02.301 --> 00:02:04.882
To relate this back to a real-life scenario,

33
00:02:04.882 --> 00:02:08.441
choice number one would be like buying a computer where you

34
00:02:08.441 --> 00:02:10.499
couldn't change or upgrade the memory.

35
00:02:10.499 --> 00:02:15.929
When the computer was created, it created the memory as part of the computer.

36
00:02:15.929 --> 00:02:18.254
In fact, many laptops are like this today.

37
00:02:18.254 --> 00:02:20.584
The memory was created with the computer,

38
00:02:20.584 --> 00:02:24.066
and if you wanted to change or upgrade the memory,

39
00:02:24.066 --> 00:02:27.035
you'd have to buy a whole new computer.

40
00:02:27.035 --> 00:02:31.907
Choice number two of declaring our dependencies is much more flexible.

41
00:02:31.907 --> 00:02:35.560
The object and its dependencies are still coupled,

42
00:02:35.560 --> 00:02:38.919
but they're considered to be loosely coupled because you can

43
00:02:38.919 --> 00:02:41.755
change one without having to change the other.

44
00:02:41.755 --> 00:02:45.604
Again, to sort of relate this back to a real-life scenario,

45
00:02:45.604 --> 00:02:50.826
choice number two is like buying a computer where you can change the memory.

46
00:02:50.826 --> 00:02:53.816
Instead of creating the memory when the computer is made,

47
00:02:53.816 --> 00:02:57.390
the computer and the memory are created separately

48
00:02:57.390 --> 00:02:59.623
and then later assembled together.

49
00:02:59.623 --> 00:03:03.426
Choice number two is what we would call dependency injection,

50
00:03:03.426 --> 00:03:08.405
and Spring Core is considered to be a dependency injection container.

51
00:03:08.405 --> 00:03:12.891
You can utilize it to declare objects and their dependencies,

52
00:03:12.891 --> 00:03:17.908
and Spring Core will create and manage and connect them all together,

53
00:03:17.908 --> 00:03:22.112
and this results in less things for the developer to manage.

54
00:03:22.112 --> 00:03:24.947
It's also not uncommon to hear Spring Core referred

55
00:03:24.947 --> 00:03:27.381
to as the glue of the application,

56
00:03:27.381 --> 00:03:37.000
as it's the thing that pieces together and manages many individual parts that form the application.

