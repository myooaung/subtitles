WEBVTT
1
00:00:01.956 --> 00:00:05.040
Spring Webflux is another way of handling web requests

2
00:00:05.040 --> 00:00:06.825
supported by the Spring Framework.

3
00:00:06.825 --> 00:00:09.390
And in order to understand its purpose,

4
00:00:09.390 --> 00:00:13.604
we first need to understand something called reactive programming.

5
00:00:13.604 --> 00:00:17.403
Reactive programming is a declarative programming paradigm concerned

6
00:00:17.403 --> 00:00:21.130
with data streams and the propagation of change.

7
00:00:21.130 --> 00:00:22.572
So in other words,

8
00:00:22.572 --> 00:00:28.554
it's a way of programming that focuses on streams of data and how they change.

9
00:00:28.554 --> 00:00:32.947
And the key idea behind reactive programming is that you

10
00:00:32.947 --> 00:00:36.150
react to change rather than wait for change.

11
00:00:36.150 --> 00:00:37.552
As I mentioned before,

12
00:00:37.552 --> 00:00:40.876
Spring's reactive web programming framework is call Spring Webflux,

13
00:00:40.876 --> 00:00:44.890
and its primary purpose is still to handle web requests,

14
00:00:44.890 --> 00:00:48.428
but the way in which it handles them is different.

15
00:00:48.428 --> 00:00:52.045
Specifically, web requests are executed asynchronously,

16
00:00:52.045 --> 00:01:00.019
and they don't block or wait, and this results in better resource utilization.

17
00:01:00.019 --> 00:01:02.518
To better understand, let's look at what a traditional,

18
00:01:02.518 --> 00:01:04.865
or non-reactive request flow looks like.

19
00:01:04.865 --> 00:01:07.545
As a web request progresses over time,

20
00:01:07.545 --> 00:01:11.524
you can think of it as executing a series of steps,

21
00:01:11.524 --> 00:01:16.865
and some of those steps may depend on external resources like loading a file

22
00:01:16.865 --> 00:01:21.152
from disk or making additional requests to other servers,

23
00:01:21.152 --> 00:01:23.550
and since the requests must occur in order,

24
00:01:23.550 --> 00:01:26.765
every time a step is waiting on something else,

25
00:01:26.765 --> 00:01:29.768
the request is considered to be blocked.

26
00:01:29.768 --> 00:01:33.393
And this is less than ideal because when the request is blocked,

27
00:01:33.393 --> 00:01:38.378
computing resources are tied up and they can't be used to serve other requests.

28
00:01:38.378 --> 00:01:41.147
To sort of relate this to a real-life concept,

29
00:01:41.147 --> 00:01:44.610
the traditional flow is a lot like dialing a support number and

30
00:01:44.610 --> 00:01:47.371
having to wait until the next agent is available.

31
00:01:47.371 --> 00:01:51.745
While you're on hold, you're basically tied up from doing anything else.

32
00:01:51.745 --> 00:01:55.435
Now let's talk about the flow of a reactive request.

33
00:01:55.435 --> 00:01:56.615
Just like the traditional flow,

34
00:01:56.615 --> 00:02:00.699
you can think of the web request as progressing over time and executing a

35
00:02:00.699 --> 00:02:04.852
series of steps that may depend on external resources.

36
00:02:04.852 --> 00:02:08.708
The difference comes with how the requests are executed.

37
00:02:08.708 --> 00:02:12.949
Requests are executed asynchronously instead of synchronously,

38
00:02:12.949 --> 00:02:15.460
and they don't block or wait.

39
00:02:15.460 --> 00:02:19.042
This allows the valuable resources involved in the

40
00:02:19.042 --> 00:02:22.518
request handling to be released and reused.

41
00:02:22.518 --> 00:02:24.988
And you're probably wondering though, if it doesn't wait,

42
00:02:24.988 --> 00:02:27.176
then how the heck does it work?

43
00:02:27.176 --> 00:02:28.540
Well, instead of waiting,

44
00:02:28.540 --> 00:02:33.721
the code simply asks to be notified when the operation is complete,

45
00:02:33.721 --> 00:02:36.203
and continues executing other operations.

46
00:02:36.203 --> 00:02:38.364
When it's observed that the operation is complete,

47
00:02:38.364 --> 00:02:42.325
the code can continue executing those subsequent steps.

48
00:02:42.325 --> 00:02:45.124
Again, relating this back to our real-life example,

49
00:02:45.124 --> 00:02:48.578
the reactive flow is a lot like dialing a support number that

50
00:02:48.578 --> 00:02:52.285
allows you to put in your telephone number and receive a call

51
00:02:52.285 --> 00:02:54.739
back when the next agent is available.

52
00:02:54.739 --> 00:02:58.264
Since you're not tied up on the phone waiting for that next available agent,

53
00:02:58.264 --> 00:03:02.234
you're free to do other things until your phone rings.

54
00:03:02.234 --> 00:03:11.000
You can learn more about Spring Webflux with the Pluralsight course, Spring Webflux: Getting Started, by Esteban Herrera.

