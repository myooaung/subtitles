WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.830
okay,

00:00:00.830 --> 00:00:01.430
in this chapter,

00:00:01.430 --> 00:00:04.100
we're going to talk about spring security.

00:00:04.100 --> 00:00:08.070
Security is an essential feature for any kind of application.

00:00:08.070 --> 00:00:09.150
I mean,

00:00:09.150 --> 00:00:14.190
you cannot imagine a situation where you're able to send funds to a friend without having

00:00:14.190 --> 00:00:16.250
to log into your banking application.

00:00:16.250 --> 00:00:21.480
There has to be some kind of an authentication before you perform some crucial transactions

00:00:21.480 --> 00:00:21.480
,

00:00:21.480 --> 00:00:27.560
and spring security is meant to ease the process to introduce security features into your

00:00:27.560 --> 00:00:28.350
application.

00:00:28.350 --> 00:00:32.480
Let's take a look at the official definition from the official website,

00:00:32.480 --> 00:00:34.200
and here is what they have to say.

00:00:34.200 --> 00:00:39.450
Spring Secure is a powerful and highly customizable authentication and access control

00:00:39.450 --> 00:00:40.150
framework.

00:00:40.150 --> 00:00:44.980
It is the de facto standard for securing spring best applications.

00:00:44.980 --> 00:00:50.690
Spring security is a framework that focuses on providing both authentication and

00:00:50.690 --> 00:00:52.750
authorization to the job applications.

00:00:52.750 --> 00:00:55.100
And like all spring projects,

00:00:55.100 --> 00:01:01.020
the rial poor offspring security is found how easily it can be extended to meet customer

00:01:01.020 --> 00:01:05.590
requirements and heroes about the future is going to provide authentication and

00:01:05.590 --> 00:01:06.520
authorization.

00:01:06.520 --> 00:01:11.750
Authentication would describe whether or not a user can access a particular resource or not

00:01:11.750 --> 00:01:11.750
.

00:01:11.750 --> 00:01:12.850
I mean,

00:01:12.850 --> 00:01:18.600
talking about banking application only if your authenticated will you be able to perform

00:01:18.600 --> 00:01:19.950
any transactions.

00:01:19.950 --> 00:01:22.820
An authorization would describe.

00:01:22.820 --> 00:01:24.990
What are all the resources you can access?

00:01:24.990 --> 00:01:26.280
A user can axes?

00:01:26.280 --> 00:01:27.410
I mean,

00:01:27.410 --> 00:01:31.390
you cannot let them upset visitor to have access to an admin control.

00:01:31.390 --> 00:01:36.810
That's what authorization would describe its about giving rules to the user.

00:01:36.810 --> 00:01:43.750
And there are other security features that would protect your application from hacking or

00:01:43.750 --> 00:01:45.010
were these kind of attacks.

00:01:45.010 --> 00:01:50.850
And this chapter is about exploding all these features,

00:01:50.850 --> 00:01:52.920
and in this example,

00:01:52.920 --> 00:01:59.040
I'm actually going to show you how we can incorporate the future of authentication inside

00:01:59.040 --> 00:01:59.970
our application.

00:01:59.970 --> 00:02:05.260
So what I have here is a pretty basic application.

00:02:05.260 --> 00:02:06.700
This is a symbol.

00:02:06.700 --> 00:02:07.090
Hello,

00:02:07.090 --> 00:02:07.640
World spring,

00:02:07.640 --> 00:02:08.630
good application,

00:02:08.630 --> 00:02:16.200
and we send request this resource this is going toe respond back with Hello world Now.

00:02:16.200 --> 00:02:17.750
What I wanted to do is,

00:02:17.750 --> 00:02:20.660
whenever somebody tries to access this resource,

00:02:20.660 --> 00:02:22.780
I want them to log in first.

00:02:22.780 --> 00:02:25.150
Only then they can see this message.

00:02:25.150 --> 00:02:32.050
So let's take a look at the steps and mold do have that feature,

00:02:32.050 --> 00:02:40.390
So let's go to a project Step number one,

00:02:40.390 --> 00:02:47.640
as your guess is trapped toe dependency and has a future offspring boot.

00:02:47.640 --> 00:02:49.650
If you include this dependency,

00:02:49.650 --> 00:02:56.470
it's also going to download all the required other dependencies transitive Lee and do the

00:02:56.470 --> 00:03:02.690
Maven update off the project just so that all those dependencies would be available in the

00:03:02.690 --> 00:03:03.850
local depository.

00:03:03.850 --> 00:03:12.450
And once it's done,

00:03:12.450 --> 00:03:16.470
relaunch our application,

00:03:16.470 --> 00:03:24.280
and I forgot to mention that there is no Step Number two.

00:03:24.280 --> 00:03:31.250
This is all it takes to give your application the feature off authentication.

00:03:31.250 --> 00:03:32.670
You won't believe me.

00:03:32.670 --> 00:03:41.560
Let's go to a browser and clear the cachet that's control ship dilate in Mozilla and let's

00:03:41.560 --> 00:03:42.900
reload our application.

00:03:42.900 --> 00:03:47.950
And if you take a look at what's happening behind the scenes,

00:03:47.950 --> 00:03:50.550
I'm going to go to Network Tab.

00:03:50.550 --> 00:03:53.660
Let me try to access the resource.

00:03:53.660 --> 00:03:54.350
Hello.

00:03:54.350 --> 00:04:05.150
There is a three word to redirect happening to this location.

00:04:05.150 --> 00:04:07.050
The log in page.

00:04:07.050 --> 00:04:13.350
So just batting that dependency spring has made a fair assumption on the basic requirement

00:04:13.350 --> 00:04:13.350
.

00:04:13.350 --> 00:04:16.650
Often application is toe have authentication,

00:04:16.650 --> 00:04:22.040
but what is the user name and password that you need to use in orderto logging and access

00:04:22.040 --> 00:04:24.810
the resource well by default?

00:04:24.810 --> 00:04:27.240
The user name is user and the past,

00:04:27.240 --> 00:04:33.650
what is something that spring will print on the console If you're using any logging

00:04:33.650 --> 00:04:35.950
mechanism like lock for J.

00:04:35.950 --> 00:04:40.650
Then you have to check your logs to find password like this.

00:04:40.650 --> 00:04:47.080
Go to the browser and use this password and terrible tax the resource.

00:04:47.080 --> 00:04:49.650
But obviously,

00:04:49.650 --> 00:04:54.830
this is pretty basic mechanism I really don't want use it to be prompted with the log in

00:04:54.830 --> 00:04:55.350
page.

00:04:55.350 --> 00:04:58.650
Whenever they're trying to access a resource,

00:04:58.650 --> 00:04:59.610
for example,

00:04:59.610 --> 00:05:04.850
you don't expect the user to enter the credentials in other taxes develops at home page.

00:05:04.850 --> 00:05:07.590
So in order to customize all these,

00:05:07.590 --> 00:05:10.230
we have to introduce our own conflict file,

00:05:10.230 --> 00:05:12.350
which will take a look at incoming time.

00:05:12.350 --> 00:05:14.360
Also just in gifts,

00:05:14.360 --> 00:05:15.000
if you'd like to.

00:05:15.000 --> 00:05:15.750
All right,

00:05:15.750 --> 00:05:17.270
the default is in him.

00:05:17.270 --> 00:05:19.550
And whatever the password that spring generates,

00:05:19.550 --> 00:05:29.220
you can use this particular properties to declare your own museum and password inside the

00:05:29.220 --> 00:05:30.750
application properties file.

00:05:30.750 --> 00:05:34.600
Let's say user in the past,

00:05:34.600 --> 00:05:35.650
but is also going to be,

00:05:35.650 --> 00:05:35.990
say,

00:05:35.990 --> 00:05:36.550
user,

00:05:36.550 --> 00:05:39.750
save it and re launch the application.

00:05:39.750 --> 00:05:47.100
And this time,

00:05:47.100 --> 00:05:48.720
if you notice spring din,

00:05:48.720 --> 00:05:50.450
generate the password,

00:05:50.450 --> 00:06:00.150
let me clear the browser and it's going to be user and user.

00:06:00.150 --> 00:06:04.700
It worked,

00:06:04.700 --> 00:06:08.150
but do take a note that in real world applications,

00:06:08.150 --> 00:06:13.470
we don't rely on this properties this is only for testing purposes in real world

00:06:13.470 --> 00:06:14.350
applications.

00:06:14.350 --> 00:06:19.840
We would actually need to store the user details into the database using Jerry Busy driver

00:06:19.840 --> 00:06:21.560
or with an autumn,

00:06:21.560 --> 00:06:26.850
which we're going to take a look at incoming videos and will always explore a lot of other

00:06:26.850 --> 00:06:29.250
features that spring security offers.

00:06:29.250 --> 00:06:30.630
For now,

00:06:30.630 --> 00:06:32.220
this is definitely good start,

00:06:32.220 --> 00:06:38.210
and I hope that you got a sense off the simplicity that spring secure the offers in order

00:06:38.210 --> 00:06:39.960
to secure your application.

00:06:39.960 --> 00:06:42.650
I hope it makes sense.

