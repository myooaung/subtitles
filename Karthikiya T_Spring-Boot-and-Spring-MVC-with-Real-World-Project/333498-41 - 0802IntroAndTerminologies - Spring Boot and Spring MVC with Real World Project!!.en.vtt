WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.560
in this video will try to get some quick understanding on have Been it framework and a few

00:00:04.560 --> 00:00:09.250
other terminologies that you should be aware off before we dive into our first example.

00:00:09.250 --> 00:00:10.030
First,

00:00:10.030 --> 00:00:15.950
let's try to understand the term framework you can think off framework as an enrollment are

00:00:15.950 --> 00:00:21.600
set off libraries that together will help you address a particular set off related problems

00:00:21.600 --> 00:00:21.600
.

00:00:21.600 --> 00:00:22.220
I mean,

00:00:22.220 --> 00:00:27.750
think about any framework out there We have logged for the framework to a does a problem

00:00:27.750 --> 00:00:28.640
off logging,

00:00:28.640 --> 00:00:35.110
thereby will be able to trace the application errors efficiently by taking a look at all

00:00:35.110 --> 00:00:36.360
the log messages.

00:00:36.360 --> 00:00:44.830
And we have maybe in which acts like a framework or as an enrollment on which we can run

00:00:44.830 --> 00:00:46.080
our made in plug ins,

00:00:46.080 --> 00:00:49.360
and this plug INS will actually perform the project.

00:00:49.360 --> 00:00:51.550
Management tasks similarly,

00:00:51.550 --> 00:00:51.940
have been.

00:00:51.940 --> 00:00:57.320
It is also a framework and is there to address a particular set off related problems.

00:00:57.320 --> 00:01:01.860
And those problems are obviously associated with database.

00:01:01.860 --> 00:01:07.170
We're going to take a look at the difference between dealing with the database in

00:01:07.170 --> 00:01:08.440
traditional approach,

00:01:08.440 --> 00:01:12.610
where since I been eight and then you'll see the difference obviously have been,

00:01:12.610 --> 00:01:16.410
it is going to be a better option will see wine in a while.

00:01:16.410 --> 00:01:19.880
And here are some of the advantages by using the framework,

00:01:19.880 --> 00:01:21.300
and these are quite obvious.

00:01:21.300 --> 00:01:27.130
Print books would save a lot off project development time because you don't have to write

00:01:27.130 --> 00:01:30.110
all on your own what a framework is already doing.

00:01:30.110 --> 00:01:30.810
Insurrection.

00:01:30.810 --> 00:01:35.890
Just download the framework and use those libraries that would save a lot of typing,

00:01:35.890 --> 00:01:41.650
and it will also increase the aural productivity off the project.

00:01:41.650 --> 00:01:43.200
We just quite obvious,

00:01:43.200 --> 00:01:46.730
and framework will help you write clean code.

00:01:46.730 --> 00:01:50.500
You can accomplish the same task with less a number of lines off God,

00:01:50.500 --> 00:01:54.430
and at the same time you're court looks more readable,

00:01:54.430 --> 00:01:55.150
etcetera,

00:01:55.150 --> 00:02:00.350
and then we have autumn or object relational mapping tools.

00:02:00.350 --> 00:02:06.530
These tools help you map the Java objects with demolition database tables.

00:02:06.530 --> 00:02:06.870
I mean,

00:02:06.870 --> 00:02:08.570
if you take a look at a job object,

00:02:08.570 --> 00:02:13.510
you have an object called Student within which we have all these properties.

00:02:13.510 --> 00:02:19.670
I did name an email we consort off Magda seem with the relation that the best table we have

00:02:19.670 --> 00:02:19.670
,

00:02:19.670 --> 00:02:21.480
student table and its attributes.

00:02:21.480 --> 00:02:22.850
I d name an email.

00:02:22.850 --> 00:02:27.800
So this is a kind of problem that these autumn tools are going to solve.

00:02:27.800 --> 00:02:30.600
And here are some of the examples off or them tools.

00:02:30.600 --> 00:02:32.430
One is have been it,

00:02:32.430 --> 00:02:33.980
which this course is about.

00:02:33.980 --> 00:02:36.950
A clip link is another example of the same.

00:02:36.950 --> 00:02:42.380
If you take a look at how we deal with database using J BBC,

00:02:42.380 --> 00:02:43.030
we start off,

00:02:43.030 --> 00:02:45.270
create our database specific query,

00:02:45.270 --> 00:02:48.520
and then isn't the execute query off the statement.

00:02:48.520 --> 00:02:51.330
Object will be able to get back,

00:02:51.330 --> 00:02:52.080
the results said.

00:02:52.080 --> 00:02:55.100
And then we have to manually take care off,

00:02:55.100 --> 00:03:01.520
looping through all the results and assigning those results into an object like student.

00:03:01.520 --> 00:03:07.150
And then we're also adding each off the student object into the students list.

00:03:07.150 --> 00:03:07.980
Well,

00:03:07.980 --> 00:03:13.500
all this can be done automatically when you use an autumn to like hibernate.

00:03:13.500 --> 00:03:20.640
So that's going to save a lot off time and the host off of the benefit and what?

00:03:20.640 --> 00:03:26.240
The real reason why we want toe use an Orem tool is it would help you get it off some of

00:03:26.240 --> 00:03:31.860
the discrepancies associated with we trying to map the Java objects with relation database

00:03:31.860 --> 00:03:32.550
tables,

00:03:32.550 --> 00:03:34.080
for example,

00:03:34.080 --> 00:03:40.130
not all data types that are supported in Java or supported in database so tools like

00:03:40.130 --> 00:03:42.440
Cabinet are actually going to solve the problem,

00:03:42.440 --> 00:03:48.140
and it would enable the developers to interact with the Java objects while happen.

00:03:48.140 --> 00:03:53.450
It is actually taken care off mapping those objects with the relational database tables and

00:03:53.450 --> 00:03:56.400
is going to perform all the database operations.

00:03:56.400 --> 00:04:01.530
So these autumn tools are going to provide that kind of an abstraction for dollar purse so

00:04:01.530 --> 00:04:04.630
that they more or less interact with the Java objects,

00:04:04.630 --> 00:04:06.250
but not with the database.

00:04:06.250 --> 00:04:16.690
Java persistence API is simply a specification whose implementation is actually provided by

00:04:16.690 --> 00:04:18.340
these Orem tools,

00:04:18.340 --> 00:04:19.950
and having it is one off them.

00:04:19.950 --> 00:04:21.720
So at let up one of time.

00:04:21.720 --> 00:04:26.010
If you try to switch to a different all the NATO or a different or um,

00:04:26.010 --> 00:04:26.480
tool,

00:04:26.480 --> 00:04:31.520
then you have the flexibility because all these frameworks will actually implement the same

00:04:31.520 --> 00:04:32.580
specifications,

00:04:32.580 --> 00:04:34.750
which is Java persistence.

00:04:34.750 --> 00:04:36.350
FBI specification.

00:04:36.350 --> 00:04:39.150
And here's a Cabinet definition,

00:04:39.150 --> 00:04:45.740
and you'll be able to understand on your own having it is simply an open source or I'm tool

00:04:45.740 --> 00:04:46.850
from Red Hat.

00:04:46.850 --> 00:04:51.500
And that is basically a framework that provides implementation for Java.

00:04:51.500 --> 00:04:52.110
Persistence,

00:04:52.110 --> 00:04:59.590
FBI and the major role off hibernate is to map the relational database tables with the job

00:04:59.590 --> 00:05:00.550
objects.

00:05:00.550 --> 00:05:03.640
Here is the high level architecture off.

00:05:03.640 --> 00:05:06.830
Dealing with the database isn't a traditional approach.

00:05:06.830 --> 00:05:07.320
I mean,

00:05:07.320 --> 00:05:08.550
isn't very busy.

00:05:08.550 --> 00:05:14.800
So we have our job application inside which we're going to use the jetty busy FBI to start

00:05:14.800 --> 00:05:14.940
off,

00:05:14.940 --> 00:05:19.080
interact with the multiple data basis by using the driver manager.

00:05:19.080 --> 00:05:25.190
And these drivers that are specific to database will actually implement all these AP ah

00:05:25.190 --> 00:05:31.670
specifications so that we can interact with the database coming toe have innate having it

00:05:31.670 --> 00:05:34.250
is actually going to take care off all that headache,

00:05:34.250 --> 00:05:38.650
and we actually interact with the Cabinet framework and then have been it.

00:05:38.650 --> 00:05:44.390
Framework will deal with all these technologies like Jdb Siege our database connectivity,

00:05:44.390 --> 00:05:45.910
and J.

00:05:45.910 --> 00:05:47.850
And I were going to talk about J N D.

00:05:47.850 --> 00:05:53.880
I Jabba naming and directory interface when we talk about the connection pulling etcetera

00:05:53.880 --> 00:05:56.220
and it would also use the Java transaction.

00:05:56.220 --> 00:06:03.360
FBI to perform the transactions were going to take a look at examples off transactions as

00:06:03.360 --> 00:06:03.850
well.

00:06:03.850 --> 00:06:09.000
So this is the high level architecture off hibernate now.

00:06:09.000 --> 00:06:10.910
This is not the exclusive architecture.

00:06:10.910 --> 00:06:14.030
There are few of the components that are in mold in this architecture,

00:06:14.030 --> 00:06:16.310
but I'm not going to present them right now.

00:06:16.310 --> 00:06:17.650
For obvious reasons,

00:06:17.650 --> 00:06:18.920
you're not yet ever off.

00:06:18.920 --> 00:06:21.600
Some of the concepts involved in have been it.

00:06:21.600 --> 00:06:28.140
But I will definitely revisit the Harbin IT architecture and would let you know the other

00:06:28.140 --> 00:06:30.550
components that are involved in this architecture.

00:06:30.550 --> 00:06:33.410
So for the time being,

00:06:33.410 --> 00:06:38.110
this is This is what happened in architecture would look like at a very high level.

00:06:38.110 --> 00:06:38.890
All right,

00:06:38.890 --> 00:06:40.390
let's continue from next video.

