WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.750
Okay,

00:00:00.750 --> 00:00:05.340
let's take a look at how we can override the default authentication provided the spring.

00:00:05.340 --> 00:00:06.630
And in fact,

00:00:06.630 --> 00:00:12.570
we're going to see how we can create our own users as well as the roles so note,

00:00:12.570 --> 00:00:16.650
explain or demonstrate the scenario considered the falling use case.

00:00:16.650 --> 00:00:21.880
Let's say that we have set off yours that end with slash admin,

00:00:21.880 --> 00:00:29.850
followed by any type off your and then we also have some Resource is that has slash user

00:00:29.850 --> 00:00:31.650
followed by any pot.

00:00:31.650 --> 00:00:34.450
We also have a couple off users.

00:00:34.450 --> 00:00:35.710
Sunder,

00:00:35.710 --> 00:00:43.570
who is having the admin role and Bob holds the user role as an Edmund cinder,

00:00:43.570 --> 00:00:46.350
must be able to access all these resources.

00:00:46.350 --> 00:00:51.420
But whereas Bob should be restricted to access only these Urals,

00:00:51.420 --> 00:00:58.250
that has slash user I mean he should not be authorized to access any off the admin Urals.

00:00:58.250 --> 00:01:05.960
So let's take a look at an example of the same by using so called on in memory database in

00:01:05.960 --> 00:01:11.490
Memory data store in Memory data store simply means that we went to store the users and

00:01:11.490 --> 00:01:14.260
their roles in an in memory,

00:01:14.260 --> 00:01:15.170
their store,

00:01:15.170 --> 00:01:20.520
meaning that we're not going to have any database or create tables are in such a course or

00:01:20.520 --> 00:01:21.580
anything of that sort.

00:01:21.580 --> 00:01:24.550
This is only for testing purposes.

00:01:24.550 --> 00:01:27.650
We can use the in memory data store,

00:01:27.650 --> 00:01:31.550
but first off you have to create a conflict file.

00:01:31.550 --> 00:01:35.170
And obviously it has to have this annotation.

00:01:35.170 --> 00:01:36.340
Alternatively,

00:01:36.340 --> 00:01:42.890
can actually make all this conflagration part off this spring boot application class itself

00:01:42.890 --> 00:01:42.890
,

00:01:42.890 --> 00:01:44.330
because internally,

00:01:44.330 --> 00:01:49.150
this is also treated as a conflict file.

00:01:49.150 --> 00:01:55.030
But it's not the typical way he would contribute a security conflagration in real world

00:01:55.030 --> 00:01:55.670
applications.

00:01:55.670 --> 00:02:00.400
We would often have the security conflict in their separate file,

00:02:00.400 --> 00:02:02.240
just as we were having mouth.

00:02:02.240 --> 00:02:04.350
And then you have to use the sanitation.

00:02:04.350 --> 00:02:09.400
And this annotation would tell spring that we want to provide our own authentication

00:02:09.400 --> 00:02:10.160
mechanism.

00:02:10.160 --> 00:02:12.120
And we wanted to all right,

00:02:12.120 --> 00:02:12.990
the behavior,

00:02:12.990 --> 00:02:15.450
the one that spring provides.

00:02:15.450 --> 00:02:20.280
And this is a class which is off significance.

00:02:20.280 --> 00:02:22.650
If you take a look at it,

00:02:22.650 --> 00:02:23.990
what's going on inside?

00:02:23.990 --> 00:02:28.530
It has a lot off methods with some default behavior,

00:02:28.530 --> 00:02:33.960
and this is what spring uses in order to provide the authentication mechanism.

00:02:33.960 --> 00:02:37.800
But what we're going to do now is we're going to all right,

00:02:37.800 --> 00:02:43.000
couple of the methods belonging to this class and then or read the behavior.

00:02:43.000 --> 00:02:48.270
One of the methods is configure that takes in this particular Param Eter.

00:02:48.270 --> 00:02:49.810
What indication?

00:02:49.810 --> 00:02:52.510
Manager builder And using this object,

00:02:52.510 --> 00:02:54.210
you can do a variety off things,

00:02:54.210 --> 00:02:55.560
but in this case,

00:02:55.560 --> 00:02:59.790
I'm actually going to create an in memory user along with their roles.

00:02:59.790 --> 00:03:01.650
And here's instruction for the same.

00:03:01.650 --> 00:03:07.950
I'm using this object to create a user called Sunder with some password,

00:03:07.950 --> 00:03:12.190
and then I'm going to send him the roll off admin.

00:03:12.190 --> 00:03:14.550
Same is the case with Bob,

00:03:14.550 --> 00:03:17.700
with the exception off role being user,

00:03:17.700 --> 00:03:18.550
not madman.

00:03:18.550 --> 00:03:25.200
But one thing you would notice here is I use this particular and quarter.

00:03:25.200 --> 00:03:26.740
It's no open Corder.

00:03:26.740 --> 00:03:29.820
The reason why I have to use this is by default.

00:03:29.820 --> 00:03:34.850
Spring will try to decrypt the password that is present in the database when it tries to

00:03:34.850 --> 00:03:35.550
fetch.

00:03:35.550 --> 00:03:37.900
Since we're not encrypting the password,

00:03:37.900 --> 00:03:43.480
there is going to cause problem when these air tries to log in and so have to specify this

00:03:43.480 --> 00:03:45.850
particular key ward.

00:03:45.850 --> 00:03:49.950
So that spring will disable password check.

00:03:49.950 --> 00:03:54.650
It would just try to map it with the plain text in this manner.

00:03:54.650 --> 00:04:01.640
So what this essentially means is we're trying to store and use this particular password S

00:04:01.640 --> 00:04:02.050
D.

00:04:02.050 --> 00:04:10.310
And another matter that went toe override to fulfill our needs is the configure method with

00:04:10.310 --> 00:04:13.750
his Should it be security argument and using this object,

00:04:13.750 --> 00:04:17.370
we can actually impose some restrictions.

00:04:17.370 --> 00:04:23.000
So what we're trying to say is we wanted to have authentication for each and every request

00:04:23.000 --> 00:04:25.730
that comes in and then on top off it,

00:04:25.730 --> 00:04:30.450
we're getting more specific and specifying some clauses in this manner.

00:04:30.450 --> 00:04:32.630
So a user.

00:04:32.630 --> 00:04:39.530
But the following rules user and admin must be able to access all the Urals that follows

00:04:39.530 --> 00:04:40.280
this Patton.

00:04:40.280 --> 00:04:41.810
And similarly,

00:04:41.810 --> 00:04:48.070
we've added yet another clause saying that a user with the role admin must be able to

00:04:48.070 --> 00:04:50.430
access any you'll literally.

00:04:50.430 --> 00:04:57.080
That's what this pattern Saiz and one thing that you to note is you need to start writing

00:04:57.080 --> 00:05:00.220
the closets from more specific to more generous.

00:05:00.220 --> 00:05:05.350
So it's it's not advisable that you write this first and then this.

00:05:05.350 --> 00:05:13.260
And finally we're also asking spring to show the log in page that we've already seen

00:05:13.260 --> 00:05:13.950
basically.

00:05:13.950 --> 00:05:16.350
So let's save this file.

00:05:16.350 --> 00:05:17.810
And another thing,

00:05:17.810 --> 00:05:21.360
that is what mentioning is inside or controller.

00:05:21.360 --> 00:05:25.740
I know have a couple of request map Ing's the one that,

00:05:25.740 --> 00:05:26.730
except you are rules.

00:05:26.730 --> 00:05:32.150
But the admin baton and the other is for the user Patton.

00:05:32.150 --> 00:05:36.590
And here I'm just trying to add a couple off para meters,

00:05:36.590 --> 00:05:41.070
which will be displayed on the browser with a template engine.

00:05:41.070 --> 00:05:46.540
So I'm just trying to display those perimeters and they just display the user and the role

00:05:46.540 --> 00:05:48.000
from where the request is coming,

00:05:48.000 --> 00:05:49.160
you know,

00:05:49.160 --> 00:05:56.090
to fetch the current user and the role I've used the subject security context Holder,

00:05:56.090 --> 00:06:00.650
which we can import it from the Spring Library.

00:06:00.650 --> 00:06:03.340
And with this method,

00:06:03.340 --> 00:06:04.960
I'm trying to get the user name.

00:06:04.960 --> 00:06:13.200
And with this I'm trying to get the role and let's run out application and see how it goes

00:06:13.200 --> 00:06:13.200
.

00:06:13.200 --> 00:06:22.520
So if you notice spring din gender,

00:06:22.520 --> 00:06:23.790
it the password,

00:06:23.790 --> 00:06:28.550
that's because we have ordered in the behavior with this class.

00:06:28.550 --> 00:06:33.600
Let's go here and tried toe access.

00:06:33.600 --> 00:06:36.150
The admin section.

00:06:36.150 --> 00:06:41.710
It would ask you to log and let's enter sooner and the password A s d you know,

00:06:41.710 --> 00:06:47.410
case at slog in and sure enough we're able to access,

00:06:47.410 --> 00:06:53.730
and since then there is an admin he must be able to access all the use of resources as well

00:06:53.730 --> 00:06:53.730
.

00:06:53.730 --> 00:06:57.420
And sure enough is ableto now.

00:06:57.420 --> 00:07:07.450
Let's clear the cachet and try to log in as Bob so I would type in Bob and then as d

00:07:07.450 --> 00:07:08.840
picking,

00:07:08.840 --> 00:07:10.870
certainly access the user resource.

00:07:10.870 --> 00:07:22.250
But let's change it to admin and see has expected his not about access an admin resource.

00:07:22.250 --> 00:07:25.340
So it's four or three,

00:07:25.340 --> 00:07:34.550
forbidden yesterday the response and has that mentioned before the in Memory data store,

00:07:34.550 --> 00:07:36.750
his only for testing purposes.

00:07:36.750 --> 00:07:41.610
In real time projects we would either used Adebisi are or I'm tool,

00:07:41.610 --> 00:07:44.550
so we'll take a look at such examples in coming time.

00:07:44.550 --> 00:07:46.360
I hope it makes sense.

