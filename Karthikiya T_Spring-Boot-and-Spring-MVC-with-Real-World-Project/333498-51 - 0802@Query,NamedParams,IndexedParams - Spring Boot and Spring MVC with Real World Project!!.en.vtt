WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.400
so far.

00:00:01.400 --> 00:00:06.790
We leverage the functionality offspring data and use one off its interfaces to be able to

00:00:06.790 --> 00:00:10.490
do card operations without having to write a single line of code,

00:00:10.490 --> 00:00:11.720
However,

00:00:11.720 --> 00:00:16.950
most often would like to go beyond credit operations and we to write something complex.

00:00:16.950 --> 00:00:18.250
For example,

00:00:18.250 --> 00:00:21.040
let's say we have the following record,

00:00:21.040 --> 00:00:21.450
you know,

00:00:21.450 --> 00:00:26.810
database and I would like to fetch a student whose age is 43.

00:00:26.810 --> 00:00:27.460
Well,

00:00:27.460 --> 00:00:31.850
I can certainly cannot use one off the methods available in Crab Repository,

00:00:31.850 --> 00:00:33.890
so we have to do something.

00:00:33.890 --> 00:00:37.050
They're a couple off approaches to solve this problem,

00:00:37.050 --> 00:00:41.450
the first of which is to use equity annotation.

00:00:41.450 --> 00:00:45.310
The query annotation would help us,

00:00:45.310 --> 00:00:45.680
right?

00:00:45.680 --> 00:00:48.650
Native SQL queries specific to a database.

00:00:48.650 --> 00:00:49.380
RJ,

00:00:49.380 --> 00:00:52.150
pick your specific to JP implementation.

00:00:52.150 --> 00:00:55.950
Let's take a look at an example and then we'll understand better.

00:00:55.950 --> 00:01:03.650
So I'm gonna introducing a method said nature in this form.

00:01:03.650 --> 00:01:11.050
But the key thing to note here is the sanitation with the query string,

00:01:11.050 --> 00:01:12.690
this is J.

00:01:12.690 --> 00:01:13.850
Pick your language.

00:01:13.850 --> 00:01:15.610
This is nothing new.

00:01:15.610 --> 00:01:17.050
This looks similar to ask you out.

00:01:17.050 --> 00:01:21.450
If you'd like to write a NATO SQL query specific to your database,

00:01:21.450 --> 00:01:30.310
then you have to add the following perimeter inside the query annotation and make the flag

00:01:30.310 --> 00:01:31.350
true.

00:01:31.350 --> 00:01:35.950
Now if I call this method,

00:01:35.950 --> 00:01:47.280
discredit would be executed and we would be getting back a collection off students and from

00:01:47.280 --> 00:01:48.460
inside my controller.

00:01:48.460 --> 00:01:51.750
All I'm trying to do is to call that method.

00:01:51.750 --> 00:02:01.560
Here are some of the return types you can use for the query method could use no all the

00:02:01.560 --> 00:02:05.360
basic types like integer long float bite.

00:02:05.360 --> 00:02:12.450
What not can also written an entity type and also it down a collection.

00:02:12.450 --> 00:02:15.480
You can also do it in the results in the form off a stream.

00:02:15.480 --> 00:02:16.600
All right,

00:02:16.600 --> 00:02:36.970
let's run our application and see how things are going and and it walked out were able to

00:02:36.970 --> 00:02:40.050
fetch a student record whose age is 43.

00:02:40.050 --> 00:02:45.150
And that's what this SQL query is all about.

00:02:45.150 --> 00:02:48.450
But sometimes we just may not be so simple.

00:02:48.450 --> 00:02:50.090
For example,

00:02:50.090 --> 00:02:51.970
we cannot heart cord age in here.

00:02:51.970 --> 00:02:55.970
We might be receiving this as a perimeter as a matter Param Eter.

00:02:55.970 --> 00:03:02.350
So in order to dynamically inserted value inside the query in a couple off approaches for

00:03:02.350 --> 00:03:02.850
that,

00:03:02.850 --> 00:03:06.950
the first of which is indexed para meters,

00:03:06.950 --> 00:03:11.350
let's take a look at how we can liver is that.

00:03:11.350 --> 00:03:19.960
Now let's say that I would like to search a record by age and I d as well.

00:03:19.960 --> 00:03:22.170
I really wouldn't do that,

00:03:22.170 --> 00:03:27.500
but just for the sake of example in the search by I.

00:03:27.500 --> 00:03:27.660
D.

00:03:27.660 --> 00:03:28.090
One,

00:03:28.090 --> 00:03:32.150
because I believe that's the idea being created.

00:03:32.150 --> 00:03:36.700
And I would like to pass para meters here.

00:03:36.700 --> 00:03:50.990
So the first off which age is going to be off type indigent age and the type long I D.

00:03:50.990 --> 00:04:05.930
So now we need to replace these with an index so this would correspond to the first para

00:04:05.930 --> 00:04:06.410
meter,

00:04:06.410 --> 00:04:11.210
and this would correspond to the second and from inside our method.

00:04:11.210 --> 00:04:16.390
That's parcels arguments for three and one.

00:04:16.390 --> 00:04:18.850
And,

00:04:18.850 --> 00:04:19.320
of course,

00:04:19.320 --> 00:04:22.550
we do perform the typecasting.

00:04:22.550 --> 00:04:26.890
Let's save our file and run our application,

00:04:26.890 --> 00:04:35.250
and this should fetch the record.

00:04:35.250 --> 00:04:38.450
Can it work?

00:04:38.450 --> 00:04:44.990
Another approach,

00:04:44.990 --> 00:04:46.690
which is recommended,

00:04:46.690 --> 00:04:49.450
is to use named Alamitos.

00:04:49.450 --> 00:04:52.580
Oftentimes,

00:04:52.580 --> 00:04:54.550
if your query is very complex,

00:04:54.550 --> 00:04:57.350
then indexing may get messed up.

00:04:57.350 --> 00:04:58.920
So instead,

00:04:58.920 --> 00:05:05.180
golf these numbers going to be using and named Param Eter.

00:05:05.180 --> 00:05:20.720
I'm going to say age and I D so names has to be responding to each other and let's run our

00:05:20.720 --> 00:05:21.550
application,

00:05:21.550 --> 00:05:33.750
and it worked.

00:05:33.750 --> 00:05:43.250
And just to make sure things won't work if we try to change the perimeters.

00:05:43.250 --> 00:05:49.350
You said the file relaunched the application,

00:05:49.350 --> 00:05:57.130
and we shouldn't see any records getting fetched.

00:05:57.130 --> 00:05:58.350
Sure enough,

00:05:58.350 --> 00:05:59.750
it didn't.

00:05:59.750 --> 00:06:01.780
All right.

00:06:01.780 --> 00:06:02.870
Hope it makes sense.

