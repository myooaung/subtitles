WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.750
in this video,

00:00:01.750 --> 00:00:04.650
we're going to take a look at how we can use prepared statements.

00:00:04.650 --> 00:00:05.720
Use injectables,

00:00:05.720 --> 00:00:08.540
a template were able to fire.

00:00:08.540 --> 00:00:11.650
Our SQL query is in the creative method.

00:00:11.650 --> 00:00:15.240
The equipment that is apt for writing static quit.

00:00:15.240 --> 00:00:16.110
It's like this,

00:00:16.110 --> 00:00:17.850
So let's start from students.

00:00:17.850 --> 00:00:19.710
However,

00:00:19.710 --> 00:00:24.340
if you'd like to write a dynamic equity like for examples,

00:00:24.340 --> 00:00:27.480
let's start from students where student ID equals 10.

00:00:27.480 --> 00:00:30.790
The numerical 10 in here is not consistent.

00:00:30.790 --> 00:00:33.150
Become hard coded as part of the string.

00:00:33.150 --> 00:00:35.730
This will be received as a matter argument,

00:00:35.730 --> 00:00:37.570
which we would then need to happen.

00:00:37.570 --> 00:00:39.290
This to this query.

00:00:39.290 --> 00:00:40.920
Well,

00:00:40.920 --> 00:00:47.340
we can just go on Captain it for dickweed a string as well as the argument in this manner

00:00:47.340 --> 00:00:51.350
and used the method query to fight acquitted through the database.

00:00:51.350 --> 00:00:55.750
But this is not all that great in dumps off performance,

00:00:55.750 --> 00:00:59.660
because if you're fighting the squeegee,

00:00:59.660 --> 00:01:01.350
it's 100 times.

00:01:01.350 --> 00:01:05.550
It has to become filed 100 times by the quit engine,

00:01:05.550 --> 00:01:08.690
which is not so performance efficient.

00:01:08.690 --> 00:01:09.610
However,

00:01:09.610 --> 00:01:11.160
if you use prepared statement,

00:01:11.160 --> 00:01:13.930
the statement would become piled only once,

00:01:13.930 --> 00:01:18.680
no matter how many times you would fire this query so that way it will improve the

00:01:18.680 --> 00:01:19.510
performance.

00:01:19.510 --> 00:01:22.700
Let's take a look at the example of prepared statement.

00:01:22.700 --> 00:01:26.950
So for this purpose inside our controller,

00:01:26.950 --> 00:01:33.630
I'm populating the student object and then I'm passing it as an argument to this matter

00:01:33.630 --> 00:01:38.750
entered student off student depository Here we have that method.

00:01:38.750 --> 00:01:43.050
It has one query string which is trying to perform,

00:01:43.050 --> 00:01:54.800
means that operation and we also have for placeholders which will be replaced with the

00:01:54.800 --> 00:01:55.890
prepared statement.

00:01:55.890 --> 00:02:03.110
So this time I'm not using the query method Instagram using the execute method off Gereb is

00:02:03.110 --> 00:02:06.060
a template it accepts couple of perimeters,

00:02:06.060 --> 00:02:07.950
the first of which is a quickie.

00:02:07.950 --> 00:02:16.240
The second is the prepared statement called back and in here I'm just all writing are

00:02:16.240 --> 00:02:22.870
providing behavior to the only matter that is present in this interface which is due in

00:02:22.870 --> 00:02:28.940
prepared statement I'm using anonymous in her class to be ableto alright.

00:02:28.940 --> 00:02:37.290
This mattered so that I don't have to create another file and ah provide implementation.

00:02:37.290 --> 00:02:39.750
And inside this method,

00:02:39.750 --> 00:02:48.800
I'm just trying to sort off replace all this placeholders in the sequence one would

00:02:48.800 --> 00:02:56.270
correspond to the first place holder to would correspond to a second so on and so forth and

00:02:56.270 --> 00:03:00.850
all these spills would correspond to the fields in the database table students.

00:03:00.850 --> 00:03:03.620
So we have student I d name,

00:03:03.620 --> 00:03:04.840
age and description.

00:03:04.840 --> 00:03:06.200
And then finally,

00:03:06.200 --> 00:03:11.680
I'm calling this method off prepared statement execute to fire that quickly into the

00:03:11.680 --> 00:03:12.450
database.

00:03:12.450 --> 00:03:18.910
So let's run our application and see how it goes.

00:03:18.910 --> 00:03:27.290
So this should not only add the insert that I'm trying to perform from this SQL file,

00:03:27.290 --> 00:03:31.480
but also we should be able to see this particular record.

00:03:31.480 --> 00:03:36.600
Let's go to the browser and hit it.

00:03:36.600 --> 00:03:40.780
ISS All the the courts are populated as expected.

00:03:40.780 --> 00:03:45.990
Do make sure that you don't reload the page once again.

00:03:45.990 --> 00:03:52.350
That would cause another because off the primary key violation.

00:03:52.350 --> 00:03:57.050
Because we're trying to add the same entry once again,

00:03:57.050 --> 00:04:05.300
just read on the application once again that would delete the table and created once again

00:04:05.300 --> 00:04:08.200
so you shouldn't have any problems.

00:04:08.200 --> 00:04:11.500
This is just for testing purposes,

00:04:11.500 --> 00:04:12.350
but ideally,

00:04:12.350 --> 00:04:14.750
we don't follow these practices.

00:04:14.750 --> 00:04:17.810
Once a build a real world project,

00:04:17.810 --> 00:04:21.990
we're going to be performing host off operations on the database,

00:04:21.990 --> 00:04:26.080
and we follow best practices and design patents for now.

00:04:26.080 --> 00:04:31.760
This is how it's going to be another way,

00:04:31.760 --> 00:04:34.250
you can deal with this prepared statement,

00:04:34.250 --> 00:04:38.290
which is much easier.

00:04:38.290 --> 00:04:42.710
And this is not as complex.

00:04:42.710 --> 00:04:46.150
Has previous one.

00:04:46.150 --> 00:04:48.650
This looks pretty simple.

00:04:48.650 --> 00:04:53.870
And here is a statement I'm doing.

00:04:53.870 --> 00:05:03.340
Jeb is a template dot update passing the exact same quickie in certain the students with

00:05:03.340 --> 00:05:04.250
placeholders,

00:05:04.250 --> 00:05:10.180
and then I'm just adding all the list off arguments.

00:05:10.180 --> 00:05:16.390
It would correspond to each one off these placeholders in the same sequence.

00:05:16.390 --> 00:05:18.170
Internally,

00:05:18.170 --> 00:05:21.350
this is what is going to happen.

00:05:21.350 --> 00:05:32.200
This is just a shorter washing up doing the same job that's from the application.

00:05:32.200 --> 00:05:41.910
It work in a similar fashion.

00:05:41.910 --> 00:05:45.350
You would perform the leading upgrade operations.

00:05:45.350 --> 00:05:53.550
So you have a delayed query within placeholder with this method update a passing couple of

00:05:53.550 --> 00:05:54.240
para meters,

00:05:54.240 --> 00:06:02.350
which are the query itself and the value that you would like to pass to this place holder.

00:06:02.350 --> 00:06:05.550
And this would typically be the matter argument.

00:06:05.550 --> 00:06:08.450
Same is the case with update.

00:06:08.450 --> 00:06:21.190
You're populating all these placeholders that bunch off values hope it makes sense

