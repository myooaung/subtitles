WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.340
the way I have decided to start working on our project is by introducing the creature off

00:00:05.340 --> 00:00:06.140
security.

00:00:06.140 --> 00:00:08.750
I mean authorization and authentication.

00:00:08.750 --> 00:00:13.000
And since we're not going to be using the default spring security feature,

00:00:13.000 --> 00:00:14.790
we do have to take care off,

00:00:14.790 --> 00:00:17.950
introducing the require entities repositories.

00:00:17.950 --> 00:00:23.950
So this is etcetera so that spring can now use our code to manage the user data.

00:00:23.950 --> 00:00:32.600
So the person that we need to do is to introduce couple off entities JP entities,

00:00:32.600 --> 00:00:36.740
when his user and the other is roll,

00:00:36.740 --> 00:00:37.720
ignore the type of,

00:00:37.720 --> 00:00:38.250
By the way,

00:00:38.250 --> 00:00:41.300
the user entity will hold all the users,

00:00:41.300 --> 00:00:45.700
and the role would hold all the rules available in our application.

00:00:45.700 --> 00:00:46.500
And in our case,

00:00:46.500 --> 00:00:48.410
we're going to be needing only couple off rules.

00:00:48.410 --> 00:00:51.450
One is admin that there is user,

00:00:51.450 --> 00:00:58.330
and a single user can actually have multiple roles and wise worser a single door can be

00:00:58.330 --> 00:01:00.150
mapped to multiple users,

00:01:00.150 --> 00:01:02.770
so that's basically many too many mapping.

00:01:02.770 --> 00:01:11.770
So we have to create some kind of an association between these two using JP annotations.

00:01:11.770 --> 00:01:18.050
The next thing that will do is to introduce the depository layer.

00:01:18.050 --> 00:01:30.770
This is kind of like the data access object are dolls when toe have a user repository as

00:01:30.770 --> 00:01:33.650
well as a role repository.

00:01:33.650 --> 00:01:43.050
And not to mention that we're going to be using Spring Data's feature and used the creative

00:01:43.050 --> 00:01:46.650
methods and interfaces so it will save a lot off typing.

00:01:46.650 --> 00:01:51.950
Next layer that we're going to be introducing is a service layer.

00:01:51.950 --> 00:01:54.470
Well,

00:01:54.470 --> 00:01:58.020
we will write our business logic and in here we're going to dependence,

00:01:58.020 --> 00:02:04.750
inject the repositories and use its map that so we will need a user.

00:02:04.750 --> 00:02:06.310
So this,

00:02:06.310 --> 00:02:10.230
and then notice that we really don't need the role service,

00:02:10.230 --> 00:02:11.690
so we're going to ignore it.

00:02:11.690 --> 00:02:13.150
But what we need,

00:02:13.150 --> 00:02:13.570
though,

00:02:13.570 --> 00:02:19.650
is a service that will let the spring prima cues to access the user data.

00:02:19.650 --> 00:02:20.980
I mean,

00:02:20.980 --> 00:02:23.650
since we're not using the default spring security feature,

00:02:23.650 --> 00:02:28.850
we have to somehow let's spring know how axes available users and rolls.

00:02:28.850 --> 00:02:29.790
For that,

00:02:29.790 --> 00:02:32.410
we have to use one of the interfaces provided by spring.

00:02:32.410 --> 00:02:35.800
That's user details.

00:02:35.800 --> 00:02:40.170
So this we're going to provide implementation for this interface,

00:02:40.170 --> 00:02:42.470
and this interface has only one method.

00:02:42.470 --> 00:02:43.550
Inside Butch.

00:02:43.550 --> 00:02:48.620
We'll fight acquitted to the database to fresh the user as well as the USA's corresponding

00:02:48.620 --> 00:02:49.250
roles.

00:02:49.250 --> 00:02:51.030
We'll see I would have done in a while.

00:02:51.030 --> 00:02:52.790
And of course,

00:02:52.790 --> 00:02:56.090
we're going to have Controller Layer and Bueller as well.

00:02:56.090 --> 00:02:58.030
But we won't talk about it right now.

00:02:58.030 --> 00:03:02.740
We'll talk about it when you try to understand the complete flow from start to finish.

00:03:02.740 --> 00:03:07.550
So let's try to explore what we're doing for all this competent,

00:03:07.550 --> 00:03:12.340
he does the user entity that I've introduced,

00:03:12.340 --> 00:03:19.590
and this is going to go inside the entities directory or the package and all you're seeing

00:03:19.590 --> 00:03:22.160
Here are few JP annotations.

00:03:22.160 --> 00:03:24.250
If you're aware of how to use Hibernate and J.

00:03:24.250 --> 00:03:24.400
P.

00:03:24.400 --> 00:03:25.050
A friend book,

00:03:25.050 --> 00:03:28.060
all this would look pretty familiar to you.

00:03:28.060 --> 00:03:32.850
We're going to have a table called User,

00:03:32.850 --> 00:03:36.100
and here is the unique identifier for that table,

00:03:36.100 --> 00:03:39.260
and we won't have a couple of fields,

00:03:39.260 --> 00:03:41.550
user and user name and password.

00:03:41.550 --> 00:03:47.150
And we have yet another field called password Confirmation used for confirmation.

00:03:47.150 --> 00:03:51.140
And it's not require that going to store this in the table.

00:03:51.140 --> 00:03:57.180
So I'm going to make it as a transient by using the sanitation and here,

00:03:57.180 --> 00:03:58.450
as that mentioned before,

00:03:58.450 --> 00:04:04.150
a single user can have multiple roles and wise worser So with the sanitation,

00:04:04.150 --> 00:04:08.850
many to many on trying to create that relation with the role entity.

00:04:08.850 --> 00:04:10.720
The rest of the stuff are simple.

00:04:10.720 --> 00:04:15.560
I just used a clip switches to auto generate Garrison Sarah's for all these fields.

00:04:15.560 --> 00:04:16.820
Scott,

00:04:16.820 --> 00:04:19.450
take a look at what's inside the role entity.

00:04:19.450 --> 00:04:20.780
It's pretty much the same stuff,

00:04:20.780 --> 00:04:22.490
except that you have different fields,

00:04:22.490 --> 00:04:26.050
and I didn't fire as well as the name off the roll.

00:04:26.050 --> 00:04:32.770
And we're using minute too many mapping with the use a table.

00:04:32.770 --> 00:04:39.940
When we lowered this application happen,

00:04:39.940 --> 00:04:44.260
it will actually take care of creating the tables based on all the details that were

00:04:44.260 --> 00:04:49.550
provided for both user and the role tables or entities.

00:04:49.550 --> 00:04:54.610
And it's also going to create yet another table with many to many mapping.

00:04:54.610 --> 00:04:56.690
Next thing is,

00:04:56.690 --> 00:04:57.270
of course,

00:04:57.270 --> 00:05:01.150
to have repository that corresponds to each one of these entities.

00:05:01.150 --> 00:05:07.000
And here are the query matters that would be needing my default.

00:05:07.000 --> 00:05:14.080
There are certain methods which are provided by the JP repository that will let you perform

00:05:14.080 --> 00:05:15.170
all the crowd operations.

00:05:15.170 --> 00:05:16.150
In addition to that,

00:05:16.150 --> 00:05:23.310
I found out that we would be needing this particular matter that would find a user biz don

00:05:23.310 --> 00:05:24.590
they use the name.

00:05:24.590 --> 00:05:28.050
We'll see how we're going to use this down the line.

00:05:28.050 --> 00:05:29.150
And similarly,

00:05:29.150 --> 00:05:32.070
we also have a repository for role as well,

00:05:32.070 --> 00:05:33.950
with one additional method.

00:05:33.950 --> 00:05:40.810
We're trying to find the role by name and use.

00:05:40.810 --> 00:05:43.410
A service is pretty obvious here.

00:05:43.410 --> 00:05:46.000
We're going to have the business logic required.

00:05:46.000 --> 00:05:46.920
And again,

00:05:46.920 --> 00:05:51.790
these are all driven by our requirements based on our application needs.

00:05:51.790 --> 00:05:55.630
I had introduced few methods that would selfies are purpose.

00:05:55.630 --> 00:05:59.640
I'm going to walk you through each one of these methods when we try to understand the

00:05:59.640 --> 00:06:02.750
complete flow right from scratch.

00:06:02.750 --> 00:06:09.450
And here is the interface that I was talking about that went all right.

00:06:09.450 --> 00:06:11.390
User Details service.

00:06:11.390 --> 00:06:15.030
It comes with only one mattered Lord user by user name.

00:06:15.030 --> 00:06:18.050
The goal of this mattered his.

00:06:18.050 --> 00:06:20.880
It's going to take in the using them as a perimeter,

00:06:20.880 --> 00:06:24.910
and we have to somehow populate the user.

00:06:24.910 --> 00:06:28.910
Details object based on the data available in our database.

00:06:28.910 --> 00:06:37.440
So we're trying to fetch the user by user name by using the user repository and then trying

00:06:37.440 --> 00:06:43.490
to assign all the stop authorities that are associated with that particular user and then

00:06:43.490 --> 00:06:46.230
finally were populating the user.

00:06:46.230 --> 00:06:55.430
Details object by calling this method which is part of the spring framework and returning

00:06:55.430 --> 00:06:55.650
it.

00:06:55.650 --> 00:07:02.150
This will not only be used by spring framework to sort of get the user details,

00:07:02.150 --> 00:07:05.250
but will also be used by us in our project.

00:07:05.250 --> 00:07:08.750
The next thing is optional.

00:07:08.750 --> 00:07:11.850
Since I'm going to introduce the auto log and functionality,

00:07:11.850 --> 00:07:16.150
I mean going back to her application the moment somebody registers.

00:07:16.150 --> 00:07:20.530
I guess our application is not running of me.

00:07:20.530 --> 00:07:21.150
Quickly run it.

00:07:21.150 --> 00:07:37.050
Here's a name.

00:07:37.050 --> 00:07:42.150
So without having to log in the woman somebody registers,

00:07:42.150 --> 00:07:47.050
they're able to see the dashboard That is possible with this map that auto log in.

00:07:47.050 --> 00:07:53.250
And here we're trying to make use off some security classes available in spring framework

00:07:53.250 --> 00:07:55.450
in order to authenticate the user.

00:07:55.450 --> 00:07:58.700
So first thing that we're doing is to fetch the user details,

00:07:58.700 --> 00:08:01.050
object again by using this mattered,

00:08:01.050 --> 00:08:08.110
and we're going to feed this into this user password authentication token,

00:08:08.110 --> 00:08:10.200
along with some additional details,

00:08:10.200 --> 00:08:12.650
basically the details that user enters.

00:08:12.650 --> 00:08:14.830
And then finally,

00:08:14.830 --> 00:08:17.550
we're trying to authenticate that token.

00:08:17.550 --> 00:08:20.950
We're checking to see if the talking is indeed authenticated,

00:08:20.950 --> 00:08:23.090
and finally,

00:08:23.090 --> 00:08:28.360
we're just simply asking spring talking to get the user and let the user access the

00:08:28.360 --> 00:08:29.050
resource.

00:08:29.050 --> 00:08:31.850
That's what we're trying to do here.

00:08:31.850 --> 00:08:38.500
So so far we have created enough infrastructure required to use a spring security feature,

00:08:38.500 --> 00:08:44.290
and all the additional stuff would come in the controller as well as the View layer,

00:08:44.290 --> 00:08:46.350
which will take a look at in sometime soon.

00:08:46.350 --> 00:08:48.250
Hope it makes sense.

