WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.080
okay,

00:00:02.080 --> 00:00:02.740
In this chapter,

00:00:02.740 --> 00:00:05.950
we're going to talk about springboard actuator.

00:00:05.950 --> 00:00:08.280
But before that,

00:00:08.280 --> 00:00:14.290
let us try to understand what is a production environment production and Roman is.

00:00:14.290 --> 00:00:17.130
A system very would deploy the application.

00:00:17.130 --> 00:00:23.450
So the end use of the stock years in the application and it is the same enrollment used by

00:00:23.450 --> 00:00:24.030
tester,

00:00:24.030 --> 00:00:30.340
sometimes in order to detect the bugs which couldn't be found in the development and Roman

00:00:30.340 --> 00:00:34.590
And when you have your application deployed on production in Rome,

00:00:30.340 --> 00:00:30.340
.

00:00:34.590 --> 00:00:40.270
and you need to actually have some additional tools to monitor the health of the

00:00:40.270 --> 00:00:43.050
application or to gather some metrics,

00:00:43.050 --> 00:00:44.990
for instance,

00:00:44.990 --> 00:00:48.850
maybe you're interested to do the following list off things.

00:00:48.850 --> 00:00:51.860
Maybe you wanted to check the health off the application,

00:00:51.860 --> 00:00:54.500
see if there is enough this space or received.

00:00:54.500 --> 00:00:56.090
The silver is up and running.

00:00:56.090 --> 00:00:58.100
Etcetera are.

00:00:58.100 --> 00:01:05.010
You may want to check the can't use the sessions that our act to you may want to get the

00:01:05.010 --> 00:01:06.150
list off beans.

00:01:06.150 --> 00:01:13.890
Single done beans that are created are you may want to get access to all the configured

00:01:13.890 --> 00:01:22.330
application properties or take a look at a list ofall that request map ing's for our

00:01:22.330 --> 00:01:26.290
application or Maybe you want to take some action,

00:01:26.290 --> 00:01:27.150
for example,

00:01:27.150 --> 00:01:28.610
to perform it thread,

00:01:28.610 --> 00:01:31.880
dump our check,

00:01:31.880 --> 00:01:33.350
the logging status,

00:01:33.350 --> 00:01:35.610
the long levels,

00:01:35.610 --> 00:01:36.360
etcetera.

00:01:36.360 --> 00:01:39.150
Or you may want to gather some metrics.

00:01:39.150 --> 00:01:40.760
For example,

00:01:40.760 --> 00:01:44.580
maybe check the number of Tom get sessions created,

00:01:44.580 --> 00:01:46.120
etcetera.

00:01:46.120 --> 00:01:49.630
In order to incorporate these features,

00:01:49.630 --> 00:01:53.260
you have to install some additional tools or perform.

00:01:53.260 --> 00:01:54.820
Scan off your application,

00:01:54.820 --> 00:01:55.610
etcetera,

00:01:55.610 --> 00:01:57.550
which will be quite messy.

00:01:57.550 --> 00:02:00.750
But luckily with spring boot,

00:02:00.750 --> 00:02:03.350
things will become a lot easier.

00:02:03.350 --> 00:02:10.470
So easy that all you have to do is to add the actuator dependency in your Melvin or Griddle

00:02:10.470 --> 00:02:12.910
projects in my case I'm using may have.

00:02:12.910 --> 00:02:16.820
And so I just have to add this dependency.

00:02:16.820 --> 00:02:17.720
And,

00:02:17.720 --> 00:02:18.760
believe it or not,

00:02:18.760 --> 00:02:23.770
that's all it takes to gather all the information that I just mentioned,

00:02:23.770 --> 00:02:25.790
if not more so,

00:02:25.790 --> 00:02:27.450
by adding this dependency,

00:02:27.450 --> 00:02:29.420
Spring is actually going to expose,

00:02:29.420 --> 00:02:31.180
few has to depend points.

00:02:31.180 --> 00:02:31.960
No,

00:02:31.960 --> 00:02:34.260
en Pointe is a concept off Web service.

00:02:34.260 --> 00:02:36.490
Since we didn't talk about it in this course,

00:02:36.490 --> 00:02:39.210
I'm assuming that you don't know what is a Web service,

00:02:39.210 --> 00:02:42.940
but it's not needed that you to know Web services.

00:02:42.940 --> 00:02:49.320
All you have to know is to how to send request and gather the data so you can send in extra

00:02:49.320 --> 00:02:54.650
dippy request to an end point and that will respond back with some Jason Data,

00:02:54.650 --> 00:02:57.420
which will be rendered back in our browser.

00:02:57.420 --> 00:02:58.250
In our case,

00:02:58.250 --> 00:03:01.850
the best way to understand it is with a quick example.

00:03:01.850 --> 00:03:05.290
So since we're trying to gather some metrics,

00:03:05.290 --> 00:03:09.650
we to have an application that has something's happening,

00:03:09.650 --> 00:03:10.320
I mean,

00:03:10.320 --> 00:03:12.920
we can't gather metrics are off a hello world application,

00:03:12.920 --> 00:03:13.250
right?

00:03:13.250 --> 00:03:16.120
Were to have some meaningful application.

00:03:16.120 --> 00:03:20.960
You need to have enough stuff in your application in order to see those data.

00:03:20.960 --> 00:03:22.350
Only then will it make sense,

00:03:22.350 --> 00:03:22.720
right?

00:03:22.720 --> 00:03:27.850
So I'm going to be using the to do application that we had created in our previous chapters

00:03:27.850 --> 00:03:32.450
and see how we can make use off actuator with now project.

00:03:32.450 --> 00:03:35.850
So I'm maternity to do application,

00:03:35.850 --> 00:03:38.250
and I've added this dependency.

00:03:38.250 --> 00:03:42.760
The next thing I do is to go the application or properties file.

00:03:42.760 --> 00:03:44.150
Well,

00:03:44.150 --> 00:03:45.800
I'll talk about this in a minute,

00:03:45.800 --> 00:03:57.370
but its launch our application and go to browser If you go to the spring documentation.

00:03:57.370 --> 00:04:03.350
Here are the list off endpoints supported by spring actuator,

00:04:03.350 --> 00:04:08.150
and each endpoint would solve a specific purpose.

00:04:08.150 --> 00:04:09.370
For example,

00:04:09.370 --> 00:04:12.200
if you like to take a look at all the list of beans available,

00:04:12.200 --> 00:04:14.550
you have to send a request.

00:04:14.550 --> 00:04:16.070
With this I d.

00:04:16.070 --> 00:04:20.650
Or if you'd like to get the health of the application,

00:04:20.650 --> 00:04:22.510
you have to use this I d.

00:04:22.510 --> 00:04:24.640
So on.

00:04:24.640 --> 00:04:26.040
Application is up and running.

00:04:26.040 --> 00:04:28.950
And since we added this dependency,

00:04:28.950 --> 00:04:33.550
you can now start accessing these endpoints.

00:04:33.550 --> 00:04:37.750
So let's fire yesterday request to one of these endpoints.

00:04:37.750 --> 00:04:48.340
But one thing that you should know it is that whatever or the security rules that apply are

00:04:48.340 --> 00:04:51.350
also applicable for this endpoint.

00:04:51.350 --> 00:04:53.840
What I mean by that is,

00:04:53.840 --> 00:04:54.550
for example,

00:04:54.550 --> 00:04:57.550
if you would like to gather the health off the application,

00:04:57.550 --> 00:05:03.860
you have to sort off AC,

00:05:03.860 --> 00:05:08.050
trigger slash help.

00:05:08.050 --> 00:05:12.180
But then you would be prompted for authentication.

00:05:12.180 --> 00:05:14.340
In my case,

00:05:14.340 --> 00:05:22.840
I completed the security conflict in such way that only admits only the users with the

00:05:22.840 --> 00:05:27.600
admin role would be able to access all the actual trend points.

00:05:27.600 --> 00:05:39.950
So it follows this Ural Patton someone to register as an admin admin user Password is going

00:05:39.950 --> 00:05:40.850
to be same.

00:05:40.850 --> 00:05:43.540
A straight of access,

00:05:43.540 --> 00:05:44.570
one endpoint.

00:05:44.570 --> 00:05:45.650
In our case,

00:05:45.650 --> 00:05:47.580
I went to corporate this.

00:05:47.580 --> 00:05:55.830
I d help and it's a is.

00:05:55.830 --> 00:05:57.730
The status is up.

00:05:57.730 --> 00:06:01.250
The mental silver is in good shape without any problem.

00:06:01.250 --> 00:06:04.320
So likewise,

00:06:04.320 --> 00:06:12.150
we have a lot off endpoints and by default only help and in four are enabled.

00:06:12.150 --> 00:06:20.460
Rest of then points are disabled by default because spring assumes that all the details

00:06:20.460 --> 00:06:24.650
exposed where other endpoints may have some sense to data.

00:06:24.650 --> 00:06:26.410
So by default,

00:06:26.410 --> 00:06:30.840
Spring has disabled and points for all the in point except health.

00:06:30.840 --> 00:06:31.750
And in four,

00:06:31.750 --> 00:06:34.730
for instance,

00:06:34.730 --> 00:06:37.350
If I try to access this end point right here,

00:06:37.350 --> 00:06:46.420
then I would get a never in order to enable all the list off endpoints that we won't expose

00:06:46.420 --> 00:06:46.420
,

00:06:46.420 --> 00:06:54.160
you can simply add a property inside the application or properties or duhamel file.

00:06:54.160 --> 00:07:01.090
And it is the sanitation which we need to use management endpoints,

00:07:01.090 --> 00:07:02.780
web exposed,

00:07:02.780 --> 00:07:06.850
include And then I use this pile card star.

00:07:06.850 --> 00:07:26.650
This will enable all the endpoints Let me run the application once again me Go back,

00:07:26.650 --> 00:07:39.050
reload the application and off course we're deleting the user so you have toe take care of

00:07:39.050 --> 00:07:52.350
creating it again and let me just quickly copied the you are health will work anyway But

00:07:52.350 --> 00:07:54.550
now that may try with beans.

00:07:54.550 --> 00:08:00.480
So here we have all the list off beans in our application.

00:08:00.480 --> 00:08:21.000
So we have all those todo beans and what not There you have it similarly can also access

00:08:21.000 --> 00:08:23.150
other endpoints.

00:08:23.150 --> 00:08:26.950
Maybe I would like to take a look at list off mapping so available.

00:08:26.950 --> 00:08:33.250
So there you have it.

00:08:33.250 --> 00:08:45.550
Also such for the map ing's for to the applications that you have listed does that to do

00:08:45.550 --> 00:08:47.050
etcetera.

00:08:47.050 --> 00:08:53.080
You'll be able to see all the map things that ever existed in our application.

00:08:53.080 --> 00:09:01.650
We're going to get into details and explore some of these individual endpoints.

00:09:01.650 --> 00:09:07.000
But the purpose off this particular video is too sort off.

00:09:07.000 --> 00:09:11.750
Give you exposure to spring actuator in general.

00:09:11.750 --> 00:09:18.050
Sometimes you may want to expose all then points,

00:09:18.050 --> 00:09:20.850
but you want to hide specific in points.

00:09:20.850 --> 00:09:24.930
Then you can use the falling property,

00:09:24.930 --> 00:09:28.290
exclude the same property,

00:09:28.290 --> 00:09:37.320
but in straw include you're going to say exclude and then you would provide a list ofall

00:09:37.320 --> 00:09:45.150
Then point that you want toe exclude separated by a comma character I'd like to exclude for

00:09:45.150 --> 00:09:46.100
in stance,

00:09:46.100 --> 00:09:53.870
help and beans this every 10 route on the application.

00:09:53.870 --> 00:10:13.250
So now I tried to access help.

00:10:13.250 --> 00:10:16.550
It gives me an ETA.

00:10:16.550 --> 00:10:17.830
Same is a CASS,

00:10:17.830 --> 00:10:20.010
but beans,

00:10:20.010 --> 00:10:22.750
but it should be working with others.

00:10:22.750 --> 00:10:25.030
Let me try.

00:10:25.030 --> 00:10:26.090
Drax is in for,

00:10:26.090 --> 00:10:27.070
For instance,

00:10:27.070 --> 00:10:33.130
Info will just display information about our application.

00:10:33.130 --> 00:10:33.960
Basically,

00:10:33.960 --> 00:10:36.150
the stuff that I configured in here.

00:10:36.150 --> 00:10:46.950
Sometimes you may want to desirable or enable certain endpoints altogether.

00:10:46.950 --> 00:10:49.750
Then you can use one of these tanks.

00:10:49.750 --> 00:10:54.060
So if you followed the following syntax,

00:10:54.060 --> 00:11:01.750
management and point and the island far off the end point I mean one of these I didn't

00:11:01.750 --> 00:11:02.550
fires.

00:11:02.550 --> 00:11:05.650
And if it's a enable,

00:11:05.650 --> 00:11:13.750
it cost true and that means this particular endpoint would be enabled.

00:11:13.750 --> 00:11:16.580
If you said it to false,

00:11:16.580 --> 00:11:17.950
it would be disabled.

00:11:17.950 --> 00:11:20.660
This is different from include and exclude,

00:11:20.660 --> 00:11:21.050
by the way,

00:11:21.050 --> 00:11:24.750
because include and exclude would specify,

00:11:24.750 --> 00:11:27.150
but they won't expose it or not.

00:11:27.150 --> 00:11:30.160
But here we're talking about,

00:11:30.160 --> 00:11:33.550
but they want toe disable or enable it altogether.

00:11:33.550 --> 00:11:44.180
You can also specify whether endpoint should be enabled or disabled by default with this

00:11:44.180 --> 00:11:45.800
particular property.

00:11:45.800 --> 00:11:47.440
Also,

00:11:47.440 --> 00:11:55.030
one last property that I want to talk about before we explore specific UNT point is this.

00:11:55.030 --> 00:12:01.250
You can set the base pop by default the best part is going to be actuator,

00:12:01.250 --> 00:12:02.980
I guess if you wish to change,

00:12:02.980 --> 00:12:06.270
this can do that with this property.

00:12:06.270 --> 00:12:16.690
So from this point on your your has to be my actual.

00:12:16.690 --> 00:12:22.620
But do make sure that to make changes in the security conflict accordingly otherwise you're

00:12:22.620 --> 00:12:23.550
going to mess things up.

00:12:23.550 --> 00:12:25.470
I hope it makes sense.

