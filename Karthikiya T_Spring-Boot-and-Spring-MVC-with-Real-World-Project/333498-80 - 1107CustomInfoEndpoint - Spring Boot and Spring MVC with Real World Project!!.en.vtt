WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.690
my default in foreign point is going to display some basic information about your

00:00:04.690 --> 00:00:05.540
application.

00:00:05.540 --> 00:00:06.860
Basically,

00:00:06.860 --> 00:00:08.490
whatever you populate in here,

00:00:08.490 --> 00:00:12.340
same would be reflecting here as well.

00:00:12.340 --> 00:00:16.950
But sometimes you may want to display some customized information.

00:00:16.950 --> 00:00:17.970
For example,

00:00:17.970 --> 00:00:18.840
in my case,

00:00:18.840 --> 00:00:24.400
I'm trying to display the total number of users registered and the total number off roles

00:00:24.400 --> 00:00:27.930
available in order to do so.

00:00:27.930 --> 00:00:30.250
Spring providers and interface,

00:00:30.250 --> 00:00:35.950
which we can implement and provide behavior to the only method that is available.

00:00:35.950 --> 00:00:38.250
I'm talking about this interface.

00:00:38.250 --> 00:00:43.430
So for this purpose have actually created this class my info,

00:00:43.430 --> 00:00:44.840
my app in full,

00:00:44.840 --> 00:00:53.710
which implementing for contributor this belongs to the spring actuator library and all have

00:00:53.710 --> 00:00:59.710
to do inside this method contribute is to populate the builder object by calling this

00:00:59.710 --> 00:01:00.950
method with detail.

00:01:00.950 --> 00:01:05.260
It takes a couple of arguments postures.

00:01:05.260 --> 00:01:12.190
The name is the same name that you're going to see in here and the values actually going to

00:01:12.190 --> 00:01:15.950
be set off Key value pairs stored in the Hashmat.

00:01:15.950 --> 00:01:19.980
So you have key value key value.

00:01:19.980 --> 00:01:27.970
And in here I'm just trying to fetch all the required details by injecting require

00:01:27.970 --> 00:01:36.300
depositories to fetch total number of users and little number off roads trying to assign

00:01:36.300 --> 00:01:38.050
these values with this.

00:01:38.050 --> 00:01:38.710
Keith,

00:01:38.710 --> 00:01:47.760
once you do so and months after you make this a competent an instance off,

00:01:47.760 --> 00:01:56.360
this would be created on the fly and spring performs the orders can and eventually actuated

00:01:56.360 --> 00:01:56.360
,

00:01:56.360 --> 00:01:58.750
will also display all the required information here.

00:01:58.750 --> 00:02:07.420
Spring also provide to some classes that implement this interface so that we can populate

00:02:07.420 --> 00:02:08.880
some additional information.

00:02:08.880 --> 00:02:11.060
For instance,

00:02:11.060 --> 00:02:13.240
I'm trying to displace them,

00:02:13.240 --> 00:02:16.250
build information like the artifact i.

00:02:16.250 --> 00:02:16.640
D.

00:02:16.640 --> 00:02:19.530
Name of the project abortion,

00:02:19.530 --> 00:02:23.680
etcetera in order to use one of those classes.

00:02:23.680 --> 00:02:25.240
Spring provider.

00:02:25.240 --> 00:02:26.550
Certain goals,

00:02:26.550 --> 00:02:31.350
I mean made in gold that a part of this spring bed and project.

00:02:31.350 --> 00:02:39.360
And once you specify this goal has part off the springboard maven plug in,

00:02:39.360 --> 00:02:45.270
then spring will automatically include those classes and their project.

00:02:45.270 --> 00:02:49.340
And so you'd be able to see all this information,

00:02:49.340 --> 00:02:56.280
not understand goals and all you probably need to know some may have been related concepts

00:02:56.280 --> 00:02:56.280
.

00:02:56.280 --> 00:02:57.900
If you're interested,

00:02:57.900 --> 00:03:05.670
then I have a wonderful course on the same which talks about maven and etcetera hope it

00:03:05.670 --> 00:03:06.380
makes sense

