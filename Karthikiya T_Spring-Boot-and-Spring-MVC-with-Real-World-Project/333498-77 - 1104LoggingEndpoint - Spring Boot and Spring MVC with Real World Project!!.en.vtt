WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.020
if you'd like to get a somebody off all the list off log level supported by your

00:00:05.020 --> 00:00:07.090
application are.

00:00:07.090 --> 00:00:12.450
If you'd like to take a look at what is the long level set for each package in your project

00:00:12.450 --> 00:00:12.450
,

00:00:12.450 --> 00:00:16.070
or even to change the log level on the fly with actuator,

00:00:16.070 --> 00:00:23.400
it can make use off this endpoint loggers once he's in the get request to this end point.

00:00:23.400 --> 00:00:26.550
So what would respond back with this Jason data?

00:00:26.550 --> 00:00:31.450
And then you would be able to see all the rest of supported log levels,

00:00:31.450 --> 00:00:34.650
depending on the logging library that you're using.

00:00:34.650 --> 00:00:35.800
In my case,

00:00:35.800 --> 00:00:39.750
I left everything to default and by default,

00:00:39.750 --> 00:00:43.150
Spring uses the default logging mechanism.

00:00:43.150 --> 00:00:44.670
But if you wish,

00:00:44.670 --> 00:00:46.080
you can add the dependency.

00:00:46.080 --> 00:00:46.680
For example,

00:00:46.680 --> 00:00:50.150
lock for J to introduce the logging functionality.

00:00:50.150 --> 00:00:55.240
If you expend the longer section,

00:00:55.240 --> 00:00:55.650
though,

00:00:55.650 --> 00:01:00.350
you can take a look at all the packages that ever existed in your project.

00:01:00.350 --> 00:01:06.600
Now do they can know that these packages are not the ones you have created?

00:01:06.600 --> 00:01:10.440
These are the packages that are part of the project,

00:01:10.440 --> 00:01:12.550
either directly or indirectly.

00:01:12.550 --> 00:01:13.760
I mean,

00:01:13.760 --> 00:01:18.690
if you had a dependency that's going to show all those packages as well.

00:01:18.690 --> 00:01:23.940
It is the package in sad,

00:01:23.940 --> 00:01:24.840
more project.

00:01:24.840 --> 00:01:27.220
And if I expand older,

00:01:27.220 --> 00:01:28.450
see couple of fields,

00:01:28.450 --> 00:01:31.550
the 1st 1 say is configured level.

00:01:31.550 --> 00:01:34.780
I didn't configure any log level in our application.

00:01:34.780 --> 00:01:36.950
And so it is set to know.

00:01:36.950 --> 00:01:40.750
But the effect of level his in full,

00:01:40.750 --> 00:01:45.580
confident level would tell us what is configured in our project.

00:01:45.580 --> 00:01:50.530
Perfect to level will tell us what has significant.

00:01:50.530 --> 00:01:52.030
I mean,

00:01:52.030 --> 00:01:55.290
configuring a log level doesn't mean it will take effect.

00:01:55.290 --> 00:02:00.830
Sometimes inheritance will come into picture and log level would be inherited from the

00:02:00.830 --> 00:02:01.750
parent project.

00:02:01.750 --> 00:02:03.950
So these 2 may vary.

00:02:03.950 --> 00:02:11.040
It can also send request to a specific package.

00:02:11.040 --> 00:02:12.510
Let me copy this,

00:02:12.510 --> 00:02:14.250
for example,

00:02:14.250 --> 00:02:23.950
so that you don't get confused and you would be able to see the long level for that

00:02:23.950 --> 00:02:25.350
particular package.

00:02:25.350 --> 00:02:35.000
We can even said the log level on the fly for our application.

00:02:35.000 --> 00:02:37.990
But the brother is not the best option to do so.

00:02:37.990 --> 00:02:43.540
We have to have some tools that would allow us to send not only get Rikers,

00:02:43.540 --> 00:02:47.250
we're all supposed update Patch etcetera.

00:02:47.250 --> 00:02:51.220
I'm talking about tools like postman are called,

00:02:51.220 --> 00:02:54.520
but at the moment we're not focused on it.

00:02:54.520 --> 00:02:56.850
It's an entirely different subject altogether.

00:02:56.850 --> 00:02:59.650
It's all discussed in another course.

00:02:59.650 --> 00:03:01.370
For now,

00:03:01.370 --> 00:03:03.470
I hope this will selfies.

