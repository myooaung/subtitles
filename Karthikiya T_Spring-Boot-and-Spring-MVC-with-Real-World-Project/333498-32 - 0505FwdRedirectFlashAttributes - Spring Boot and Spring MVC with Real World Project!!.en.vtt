WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.960
okay,

00:00:00.960 --> 00:00:05.770
We have a farm which after we fill and click on submit,

00:00:05.770 --> 00:00:10.820
we're just displaying back whatever has been entered behind the scenes,

00:00:10.820 --> 00:00:16.170
we have a controller that is receiving the request and then using the response writer,

00:00:16.170 --> 00:00:20.420
we're just trying to write back whatever is entered in the form.

00:00:20.420 --> 00:00:21.740
Well,

00:00:21.740 --> 00:00:22.890
in most cases,

00:00:22.890 --> 00:00:25.220
the scenario may not be so simple.

00:00:25.220 --> 00:00:30.830
You might want to perform something complex if you wanted to use that data to send a query

00:00:30.830 --> 00:00:35.000
to the database and then render back some kind of a response,

00:00:35.000 --> 00:00:40.750
in which case it may not be a good idea to have this logic reciting in the same controller

00:00:40.750 --> 00:00:40.750
.

00:00:40.750 --> 00:00:41.480
Instead,

00:00:41.480 --> 00:00:44.940
we want to forward that request to yet on the controller,

00:00:44.940 --> 00:00:47.900
which will take care of rendering some kind off response.

00:00:47.900 --> 00:00:52.080
So let's take a look at how we can forward the request to another resource.

00:00:52.080 --> 00:01:01.830
So here is the method which will be triggered right after we submit the form and inside

00:01:01.830 --> 00:01:04.250
here we're using the forward attribute,

00:01:04.250 --> 00:01:05.660
and we are,

00:01:05.660 --> 00:01:08.470
and we're pointing to yet another resource.

00:01:08.470 --> 00:01:15.030
So for this purpose have actually created yet another controller with that exact request

00:01:15.030 --> 00:01:20.050
mapping and with the post mapping annotated method.

00:01:20.050 --> 00:01:21.700
And inside this matter,

00:01:21.700 --> 00:01:26.690
we're just simply using the response writer to display back some kind of message.

00:01:26.690 --> 00:01:33.050
And do take a note that whatever all the model attributes that are accessible in this

00:01:33.050 --> 00:01:38.590
particular controller can also be accessed with this controller,

00:01:38.590 --> 00:01:44.080
because what we're doing here is a forward off the same exact request.

00:01:44.080 --> 00:01:47.820
If you want to get into internals and take a look at the cord,

00:01:47.820 --> 00:01:50.650
this is how it's going to look like.

00:01:50.650 --> 00:01:53.350
We have both accustomed response objects,

00:01:53.350 --> 00:01:56.050
which will be provided by the container,

00:01:56.050 --> 00:02:01.180
and we're going to forward both those objects to a particular resource.

00:02:01.180 --> 00:02:02.810
In our case,

00:02:02.810 --> 00:02:04.510
it is this.

00:02:04.510 --> 00:02:07.850
Even if you go back to our application,

00:02:07.850 --> 00:02:10.390
you would notice that the Ural didn't change.

00:02:10.390 --> 00:02:12.240
Let me go back,

00:02:12.240 --> 00:02:13.280
reload the page.

00:02:13.280 --> 00:02:15.540
It's the same design page,

00:02:15.540 --> 00:02:18.280
and then it would be the same.

00:02:18.280 --> 00:02:19.510
Your you know,

00:02:19.510 --> 00:02:24.080
after submitting the form that's because we don't have any new request.

00:02:24.080 --> 00:02:29.450
Is exact same request that got forwarded from one controller to the other.

00:02:29.450 --> 00:02:31.070
And for that very reason,

00:02:31.070 --> 00:02:40.010
we can also access the model attributes and some ableto read all the form details which

00:02:40.010 --> 00:02:43.180
this object is holding However,

00:02:43.180 --> 00:02:49.550
one down tear off this approach is that every time you do a refresh off this page,

00:02:49.550 --> 00:02:52.250
it's actually going to send.

00:02:52.250 --> 00:02:59.250
It's actually going to resubmit the form every single time.

00:02:59.250 --> 00:03:04.450
And so we're able to see the same message again again,

00:03:04.450 --> 00:03:11.980
and that message is being displayed with the statement.

00:03:11.980 --> 00:03:14.750
So every time you reload this page,

00:03:14.750 --> 00:03:19.290
what kind of resubmitting the same form again and again,

00:03:19.290 --> 00:03:24.580
which doesn't sound efficient In order to solve this problem,

00:03:24.580 --> 00:03:27.050
we're going to use at redirect,

00:03:27.050 --> 00:03:30.550
so instead offer forward.

00:03:30.550 --> 00:03:37.770
I'm going to say redirect and that we were essentially going to create yet another get

00:03:37.770 --> 00:03:44.250
request and redirect to another your which was pacified in here.

00:03:44.250 --> 00:03:46.380
In this case,

00:03:46.380 --> 00:03:49.780
since it's going to trigger a get request,

00:03:49.780 --> 00:03:51.990
the post mapping may not work.

00:03:51.990 --> 00:03:59.200
We have to have to get mapping method to handle the get request.

00:03:59.200 --> 00:03:59.950
Well,

00:03:59.950 --> 00:04:03.160
this has certainly saw the problem created by forward,

00:04:03.160 --> 00:04:05.850
but this comes with a side effect.

00:04:05.850 --> 00:04:09.190
Since we created yet another request,

00:04:09.190 --> 00:04:14.600
all those moral attributes that were accessible in the previous controller would no longer

00:04:14.600 --> 00:04:16.780
be available in this controller.

00:04:16.780 --> 00:04:22.700
We have to incorporate some kind of a mechanism to start off carried the moral attributes

00:04:22.700 --> 00:04:24.150
to this controller.

00:04:24.150 --> 00:04:26.360
For that,

00:04:26.360 --> 00:04:37.010
we have to use the redirect attributes and using this reader attribute we can have so

00:04:37.010 --> 00:04:38.490
called a flash attribute,

00:04:38.490 --> 00:04:44.950
which will be accessed after the redirect inside this controller.

00:04:44.950 --> 00:04:51.050
Once you had the flash attribute.

00:04:51.050 --> 00:04:55.550
It's as good as all those moral attributes are available in this controller.

00:04:55.550 --> 00:05:01.480
And just as the name suggests all these attributes,

00:05:01.480 --> 00:05:06.950
we'll stay in doctor in a flash map only until the time redirect happens.

00:05:06.950 --> 00:05:08.910
After re that happens,

00:05:08.910 --> 00:05:10.550
the map would be cleared.

00:05:10.550 --> 00:05:14.350
So let's relaunch your application and see how things are working.

00:05:14.350 --> 00:05:22.190
I go back,

00:05:22.190 --> 00:05:25.590
miss amid the form,

00:05:25.590 --> 00:05:32.410
and this time,

00:05:32.410 --> 00:05:38.700
if you notice the euro isn't same anymore,

00:05:38.700 --> 00:05:40.940
we're pointing the different resource altogether.

00:05:40.940 --> 00:05:44.440
That's because we're just creating yet another get request.

00:05:44.440 --> 00:05:45.520
Along with that,

00:05:45.520 --> 00:05:48.810
you're also seeing the session I d.

00:05:48.810 --> 00:05:57.050
The reason is the flash attributes that were just added internally uses a session to store

00:05:57.050 --> 00:05:59.080
all these attributes Well,

00:05:59.080 --> 00:05:59.830
in other words,

00:05:59.830 --> 00:06:02.620
flash attributes are Samos session attributes,

00:06:02.620 --> 00:06:06.950
but the stay alive only during the time reader it happens.

00:06:06.950 --> 00:06:09.890
And unlike the forward attribute,

00:06:09.890 --> 00:06:14.310
the way the reader attacked a bit works is as follows.

00:06:14.310 --> 00:06:17.790
We're not forwarding the request and response objects.

00:06:17.790 --> 00:06:24.570
We just simply performing redirect to a different resource.

00:06:24.570 --> 00:06:26.340
I hope it makes sense.

