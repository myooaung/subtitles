WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.050
Let's talk about the health and point in more detail.

00:00:04.050 --> 00:00:09.380
The health and point would help us retrieve the health of the application.

00:00:09.380 --> 00:00:10.860
The moment you had.

00:00:10.860 --> 00:00:17.880
This you are that's always going to respond back with the status and the state is that

00:00:17.880 --> 00:00:22.100
you're seeing here is actually an aggregated status off multiple services.

00:00:22.100 --> 00:00:26.110
Although you're not seeing any additional information here,

00:00:26.110 --> 00:00:28.150
it was actually there.

00:00:28.150 --> 00:00:31.560
This is the presentation off a couple of services.

00:00:31.560 --> 00:00:32.540
I mean,

00:00:32.540 --> 00:00:33.710
in my case,

00:00:33.710 --> 00:00:39.470
the status up in here would mean that there's no problem with the disc space.

00:00:39.470 --> 00:00:44.040
There's an implement of displaced for my application as alas,

00:00:44.040 --> 00:00:48.350
my data source in my case has to Database is also up,

00:00:48.350 --> 00:00:55.650
and running Spring by default will not expose all those details because it assumes that it

00:00:55.650 --> 00:01:00.690
is since two data and not something to be shown unless we manually enable it.

00:01:00.690 --> 00:01:01.510
So,

00:01:01.510 --> 00:01:04.750
in order to manually enable and view such data,

00:01:04.750 --> 00:01:13.080
we can add a property that says management and point health show details and said it always

00:01:13.080 --> 00:01:14.010
by default.

00:01:14.010 --> 00:01:18.120
This is set to never never run the application.

00:01:18.120 --> 00:01:18.870
Once again,

00:01:18.870 --> 00:01:34.300
we should be able to see all the services and only admin should be able to view it.

00:01:34.300 --> 00:01:37.750
I went to register as an admin once again.

00:01:37.750 --> 00:01:48.520
Let me use this.

00:01:48.520 --> 00:01:49.050
You are.

00:01:49.050 --> 00:01:50.790
I have it handy.

00:01:50.790 --> 00:01:53.760
And there you have it.

00:01:53.760 --> 00:01:56.450
Now you're able to see what you didn't see before.

00:01:56.450 --> 00:02:01.700
The DB section would talk about the data source.

00:02:01.700 --> 00:02:02.640
In my case,

00:02:02.640 --> 00:02:07.050
I'm using Esther database and the status off it is up.

00:02:07.050 --> 00:02:08.010
Similarly,

00:02:08.010 --> 00:02:13.060
we have this space and it says it is up,

00:02:13.060 --> 00:02:14.500
meaning everything is well and good.

00:02:14.500 --> 00:02:17.150
We also have a threshold.

00:02:17.150 --> 00:02:21.250
If this pace fall shot beyond this threshold,

00:02:21.250 --> 00:02:24.380
then we're going to have the status as down,

00:02:24.380 --> 00:02:28.150
and even the aggregate of status would be reflected accordingly.

00:02:28.150 --> 00:02:30.310
So likewise,

00:02:30.310 --> 00:02:35.730
Spring supports multiple services like this and would be able to see multiple.

00:02:35.730 --> 00:02:38.150
Different status is.

00:02:38.150 --> 00:02:43.400
And here are the list of services that are supported.

00:02:43.400 --> 00:02:44.560
For instance,

00:02:44.560 --> 00:02:46.230
if you're using Mongo day be,

00:02:46.230 --> 00:02:53.020
then spring will be able to retrieve its health and short to the user did a source health

00:02:53.020 --> 00:03:00.380
indicator is the one that we had Look that similarly we also have that this space have been

00:03:00.380 --> 00:03:01.650
together by default.

00:03:01.650 --> 00:03:05.450
So depending on the margins that you're going to include in your project,

00:03:05.450 --> 00:03:08.690
their specific ult indicator would be activated,

00:03:08.690 --> 00:03:15.350
and depending on the status is often do just service.

00:03:15.350 --> 00:03:18.650
The aggregate of status would change accordingly.

00:03:18.650 --> 00:03:24.250
If at least one of the services down then aggregated staters would change to down.

00:03:24.250 --> 00:03:27.370
They're actually quite a few.

00:03:27.370 --> 00:03:30.450
Status is supported by spring,

00:03:30.450 --> 00:03:34.050
and here are day.

00:03:34.050 --> 00:03:36.960
If all the services are up and running,

00:03:36.960 --> 00:03:39.450
then we would see that get the status as up.

00:03:39.450 --> 00:03:40.790
In fact,

00:03:40.790 --> 00:03:42.200
this one services don't.

00:03:42.200 --> 00:03:44.980
You would see Degra get the status as down.

00:03:44.980 --> 00:03:49.550
And if it lets one of the services status is out of service,

00:03:49.550 --> 00:03:54.150
then segregated status would be auto service.

00:03:54.150 --> 00:03:57.750
Unknown doesn't take part in the aggregated status.

00:03:57.750 --> 00:04:01.250
If the status off a service is unknown,

00:04:01.250 --> 00:04:06.080
then it would just simply be ignored in the aggregate of status.

00:04:06.080 --> 00:04:15.980
Now you might be wondering how were able to get the health status from there is different

00:04:15.980 --> 00:04:16.750
modules.

00:04:16.750 --> 00:04:20.650
It's because those models would support it.

00:04:20.650 --> 00:04:21.660
In fact,

00:04:21.660 --> 00:04:25.590
we can write our own health indicators for our own services.

00:04:25.590 --> 00:04:27.630
Let me demonstrate what I mean.

00:04:27.630 --> 00:04:36.400
So inside my application have created this new package metrics inside which I've created.

00:04:36.400 --> 00:04:42.770
This class only have to do to introduce health status for your own service is to create a

00:04:42.770 --> 00:04:46.050
class that implements health indicator.

00:04:46.050 --> 00:04:51.450
And this is part off the spring actuator library.

00:04:51.450 --> 00:04:58.850
It comes with one method when you would written the health object.

00:04:58.850 --> 00:05:06.750
And here you have toe do something to maybe check to see if your service is up and running

00:05:06.750 --> 00:05:07.790
or not.

00:05:07.790 --> 00:05:09.400
In my case,

00:05:09.400 --> 00:05:11.290
in order to simulate that behavior,

00:05:11.290 --> 00:05:18.050
I'm trying to generate a random Boolean value to simulate whether the services up or not,

00:05:18.050 --> 00:05:22.150
and according them creating the health object.

00:05:22.150 --> 00:05:26.750
So in case that the service is not in good shape,

00:05:26.750 --> 00:05:33.420
we went to said the health status down and these are the string values which would be

00:05:33.420 --> 00:05:35.250
displayed on the u I.

00:05:35.250 --> 00:05:38.700
But if everything is well and good,

00:05:38.700 --> 00:05:40.850
if this method it is true,

00:05:40.850 --> 00:05:43.950
then we would say health status is up.

00:05:43.950 --> 00:05:53.170
The reason this is not sure not currently is because I didn't add the sanitation.

00:05:53.170 --> 00:05:56.650
We won't discomfort and to be discoverable by spring.

00:05:56.650 --> 00:05:58.600
So I've added the sanitation.

00:05:58.600 --> 00:05:59.360
Now,

00:05:59.360 --> 00:06:00.860
this is not a controller.

00:06:00.860 --> 00:06:03.690
This is not a ripple story or a service.

00:06:03.690 --> 00:06:11.760
So I'm just using a general annotation competent to make it discoverable as part of the

00:06:11.760 --> 00:06:13.050
springs auto scanning.

00:06:13.050 --> 00:06:17.050
So let me re launch the application.

00:06:17.050 --> 00:06:31.230
Let's go back and try to access the service again.

00:06:31.230 --> 00:06:33.550
Have to be an admin user.

00:06:33.550 --> 00:06:35.280
An admin user.

00:06:35.280 --> 00:06:39.390
Incompetence.

00:06:39.390 --> 00:06:45.310
Your And And here is our service.

00:06:45.310 --> 00:06:46.350
My service help.

00:06:46.350 --> 00:06:49.410
So this time,

00:06:49.410 --> 00:06:50.530
luckily it is up.

00:06:50.530 --> 00:06:54.940
Let me try to reload the page again for do it multiple times.

00:06:54.940 --> 00:06:55.250
Yeah.

00:06:55.250 --> 00:06:57.050
So now it is down.

00:06:57.050 --> 00:07:00.180
And the aggregated status is also down.

00:07:00.180 --> 00:07:04.450
Since one off the available services is down,

00:07:04.450 --> 00:07:06.270
hope it makes sense.

