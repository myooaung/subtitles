WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.850
Let's take a look at how we can use Spring Jedi BC using spring boot.

00:00:04.850 --> 00:00:06.920
Since you're using spring Boat,

00:00:06.920 --> 00:00:08.870
you don't have to introduce a holy stop.

00:00:08.870 --> 00:00:09.790
Dependence is.

00:00:09.790 --> 00:00:13.550
All you have to do is to add one single dependency,

00:00:13.550 --> 00:00:16.980
and this will download all the dependent jar files.

00:00:16.980 --> 00:00:18.150
Transitive Lee.

00:00:18.150 --> 00:00:22.460
This includes everything that you would need to interact with the database using Jade,

00:00:22.460 --> 00:00:24.720
ABC Along with that,

00:00:24.720 --> 00:00:28.550
you don't even have to install any additional database software's.

00:00:28.550 --> 00:00:32.250
He can use one off the available Lember data basis.

00:00:32.250 --> 00:00:34.720
In my case,

00:00:34.720 --> 00:00:36.200
I'm using extra database,

00:00:36.200 --> 00:00:38.450
which is pretty lightweight.

00:00:38.450 --> 00:00:40.730
But if you wish,

00:00:40.730 --> 00:00:42.850
you can use other M better databases.

00:00:42.850 --> 00:00:46.640
There is embedded washing off all the popular databases out there.

00:00:46.640 --> 00:00:52.550
He can use one of them and accordingly ad its corresponding dependence in this manner.

00:00:52.550 --> 00:00:59.670
Our control logic is pretty much similar to the one that we're taking a look at.

00:00:59.670 --> 00:01:00.950
In the previous example,

00:01:00.950 --> 00:01:10.470
we have Hello mapping that would they'll get a call to the student repository in this

00:01:10.470 --> 00:01:13.590
manner and internally Berries in Jeddah.

00:01:13.590 --> 00:01:14.550
Basic template.

00:01:14.550 --> 00:01:18.190
Not pretty to fight acquitted of the database,

00:01:18.190 --> 00:01:25.010
and we use the sanitation transactional so that everything that is happening inside this

00:01:25.010 --> 00:01:27.580
map that would be part off a transaction.

00:01:27.580 --> 00:01:31.890
If you want to ride very basic or on your own without using spring,

00:01:31.890 --> 00:01:37.850
you have to do transaction got begin transaction that come it and all such kind of stuff.

00:01:37.850 --> 00:01:39.090
But spring.

00:01:39.090 --> 00:01:39.940
Very busy.

00:01:39.940 --> 00:01:46.370
It will be taken care with an annotation and with spring boot.

00:01:46.370 --> 00:01:51.050
You don't even have to define any data source or anything of that sort.

00:01:51.050 --> 00:01:58.820
Since your added this dependency in your jar file in your palm dot XML,

00:01:58.820 --> 00:02:03.600
spring will make a fair assumption on the data source that you would be needing in your

00:02:03.600 --> 00:02:06.610
project and it would created on the fly.

00:02:06.610 --> 00:02:10.690
And so wherever two dependents inject the gel,

00:02:10.690 --> 00:02:13.700
it is a template which we can use.

00:02:13.700 --> 00:02:20.810
And since spring is that there that you're using History Database Spring is also going to

00:02:20.810 --> 00:02:24.550
create the connection battle meters on its own if you want.

00:02:24.550 --> 00:02:25.070
All right,

00:02:25.070 --> 00:02:29.750
though you can do that inside the application to our properties file,

00:02:29.750 --> 00:02:32.050
which reciting the result is folder.

00:02:32.050 --> 00:02:34.120
Along with that,

00:02:34.120 --> 00:02:40.000
there are a couple of ask your files with the name Schemer or SQL and data or a school

00:02:40.000 --> 00:02:43.680
inside the schema or SQL file,

00:02:43.680 --> 00:02:48.250
you would have the video that would define the scheme off the table.

00:02:48.250 --> 00:02:59.530
And in here I'm just trying to drop the table students and create the table students in the

00:02:59.530 --> 00:03:00.910
data or SQL file.

00:03:00.910 --> 00:03:07.250
I'm just trying to insert a couple off entries into the database and into that table.

00:03:07.250 --> 00:03:12.740
And in order to tell spring that we want to use embedded database,

00:03:12.740 --> 00:03:14.560
not an external data base,

00:03:14.560 --> 00:03:20.350
you have to add the following key value pair inside the application or properties.

00:03:20.350 --> 00:03:24.550
This will tell the spring to use the embedded extra database.

00:03:24.550 --> 00:03:27.110
So by using spring boot,

00:03:27.110 --> 00:03:28.360
we have said a lot off.

00:03:28.360 --> 00:03:34.170
A fort involved in finding the dependence is heading it into the palm file and creating the

00:03:34.170 --> 00:03:38.880
Web conflict file like we did in our previous example.

00:03:38.880 --> 00:03:41.070
We don't have to.

00:03:41.070 --> 00:03:46.270
We don't have to specify the application or properties that would be picked up

00:03:46.270 --> 00:03:50.070
automatically as long as you keep it inside the Resources folder.

00:03:50.070 --> 00:03:53.120
You don't have to even create all these beans.

00:03:53.120 --> 00:03:55.290
You don't have to create the data source.

00:03:55.290 --> 00:03:59.650
How did the best populate er our jilib is a template?

00:03:59.650 --> 00:04:04.720
It would all be taken care by spring if they're using spring boot.

00:04:04.720 --> 00:04:13.780
Based on the dependence is that you add inside the palm that XML file and in addition to

00:04:13.780 --> 00:04:18.410
that spring Gereb is it has sold us a different set off problems.

00:04:18.410 --> 00:04:23.550
For example,

00:04:23.550 --> 00:04:29.630
we no longer have to pay attention to all this boilerplate code that we have to do without

00:04:29.630 --> 00:04:31.000
using Spring Jetta BC.

00:04:31.000 --> 00:04:36.430
We don't even have to handle the exceptions because internally Spring will convert all this

00:04:36.430 --> 00:04:39.350
checked exceptions to run time exceptions,

00:04:39.350 --> 00:04:42.350
so you don't have to handle exceptions on your own.

00:04:42.350 --> 00:04:49.160
You don't even have to take care off opening in frozen the resources like you're doing in

00:04:49.160 --> 00:04:50.260
the finally block.

00:04:50.260 --> 00:04:57.270
It will be taken care by spring framework so that there will be no scope that you forgot to

00:04:57.270 --> 00:04:59.850
close the unused resources.

00:04:59.850 --> 00:05:04.350
So instead of writing all this cord,

00:05:04.350 --> 00:05:09.340
you're just focused on what you need to do as a developer,

00:05:09.340 --> 00:05:11.450
which is to fight equity to the database.

00:05:11.450 --> 00:05:12.990
And that's what we're trying to do here.

00:05:12.990 --> 00:05:17.260
That's the beauty offspring boot and spring Jerry busy.

00:05:17.260 --> 00:05:22.950
Let's run our project and see if things are working.

00:05:22.950 --> 00:05:37.240
I would say hello and it did.

00:05:37.240 --> 00:05:49.370
I'm going to make this two projects available for you to download so that you can compare

00:05:49.370 --> 00:05:51.680
both off them an experiment.

00:05:51.680 --> 00:05:53.350
I hope it makes sense.

