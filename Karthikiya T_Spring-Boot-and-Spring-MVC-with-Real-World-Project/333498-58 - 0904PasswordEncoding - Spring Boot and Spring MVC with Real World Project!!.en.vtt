WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.910
Let's talk about password,

00:00:01.910 --> 00:00:05.080
including mechanism supported by spring security.

00:00:05.080 --> 00:00:12.080
You don't want to start the password in it's raw format or in draw text format in the data

00:00:12.080 --> 00:00:17.110
base because somebody who is authorized to access the database console can actually take a

00:00:17.110 --> 00:00:18.150
look at the password.

00:00:18.150 --> 00:00:20.310
And if he's having bad intentions,

00:00:20.310 --> 00:00:25.890
then he can actually use that password to log in on your behalf and do all sorts off

00:00:25.890 --> 00:00:26.680
nonsense.

00:00:26.680 --> 00:00:27.350
And then,

00:00:27.350 --> 00:00:28.090
in the end,

00:00:28.090 --> 00:00:29.370
you will take the blame.

00:00:29.370 --> 00:00:35.740
The password and courting mechanism will actually store the password in such manner that

00:00:35.740 --> 00:00:39.110
the hacker won't be ableto either understand or use it.

00:00:39.110 --> 00:00:42.750
So let's take a look at how we can use this in our project.

00:00:42.750 --> 00:00:46.640
So here are some of them quarter supported by spring security.

00:00:46.640 --> 00:00:50.370
We've already talked about the nor password and quarter.

00:00:50.370 --> 00:00:56.570
This is basically to disable the password and according mechanism.

00:00:56.570 --> 00:01:00.780
So a password and quarter that does nothing.

00:01:00.780 --> 00:01:02.920
And as I mentioned this war,

00:01:02.920 --> 00:01:04.350
this is only for testing.

00:01:04.350 --> 00:01:06.670
India bowled applications.

00:01:06.670 --> 00:01:09.650
You want to use any of the other in quarters available.

00:01:09.650 --> 00:01:11.590
But one of the popular options,

00:01:11.590 --> 00:01:11.910
though,

00:01:11.910 --> 00:01:12.920
is big crypt,

00:01:12.920 --> 00:01:14.090
passport and quarter.

00:01:14.090 --> 00:01:18.300
So let's see how we can use it in order to use it.

00:01:18.300 --> 00:01:23.390
All you have to do is to add this additional statement where you would specify the password

00:01:23.390 --> 00:01:24.050
and quarter,

00:01:24.050 --> 00:01:27.350
and here you can specify one of those classes available.

00:01:27.350 --> 00:01:31.650
So I specified this beaker passport and quarter.

00:01:31.650 --> 00:01:34.550
Once you specify that,

00:01:34.550 --> 00:01:40.610
the expectation is that the password that gets stored in the database is encrypted isn't

00:01:40.610 --> 00:01:42.800
the same quarter now,

00:01:42.800 --> 00:01:48.650
since we don't have a registration form where the usable fill the form and then submit so

00:01:48.650 --> 00:01:53.320
that the encoding mechanism will happen automatically on the password before it gets stored

00:01:53.320 --> 00:01:54.160
in the database,

00:01:54.160 --> 00:01:59.650
I do have to explicitly stored the past four definitely in the encoded format.

00:01:59.650 --> 00:02:02.860
If you're wondering how I got the string,

00:02:02.860 --> 00:02:06.650
then with a quick Google search,

00:02:06.650 --> 00:02:07.790
I found this website.

00:02:07.790 --> 00:02:10.450
It's a browser ling dot com.

00:02:10.450 --> 00:02:15.850
Here I can actually create a password and quoted,

00:02:15.850 --> 00:02:17.530
Isn't that end quarter?

00:02:17.530 --> 00:02:23.950
So entered the password Here's DF in my case and then clicked on this button and got some

00:02:23.950 --> 00:02:24.550
string.

00:02:24.550 --> 00:02:30.290
Often we can also said the strength off this passport by entering some number more.

00:02:30.290 --> 00:02:32.280
The number the more string did of us,

00:02:32.280 --> 00:02:37.550
what is and once his best.

00:02:37.550 --> 00:02:38.900
Feel all this in here,

00:02:38.900 --> 00:02:43.610
whenever somebody tries to log in from a log in form,

00:02:43.610 --> 00:02:57.350
then let me enter Sunder and possibilities A as DF spring will actually try toe in court

00:02:57.350 --> 00:03:04.060
the entered password using the algorithm that you specify here.

00:03:04.060 --> 00:03:10.230
And then it will try to see if there is a match between the included washing off the

00:03:10.230 --> 00:03:13.730
entered password and the one that is present in the database.

00:03:13.730 --> 00:03:14.960
If they won't match,

00:03:14.960 --> 00:03:18.870
then user will be authenticated and will have access to the resource.

00:03:18.870 --> 00:03:19.970
Otherwise,

00:03:19.970 --> 00:03:23.280
it will just throw another saying that the indication failed.

00:03:23.280 --> 00:03:28.330
You can actually write your own and quarter.

00:03:28.330 --> 00:03:35.740
All you have to do is to create a class that implements password and quarter.

00:03:35.740 --> 00:03:37.640
It comes with a couple off methods.

00:03:37.640 --> 00:03:39.160
One is in court,

00:03:39.160 --> 00:03:45.170
and as an argument you would receive the raw password and inside this meant that you

00:03:45.170 --> 00:03:48.990
basically provide an implementation to encode the password,

00:03:48.990 --> 00:03:57.050
and then you have another method matches many into right logic that tells on what basis do

00:03:57.050 --> 00:03:59.660
you want to see if the two passwords are matching.

00:03:59.660 --> 00:04:00.020
I mean,

00:04:00.020 --> 00:04:05.540
the one that is available in the database as well as the included washing off the password

00:04:05.540 --> 00:04:07.150
entered by the user.

00:04:07.150 --> 00:04:09.320
In fact,

00:04:09.320 --> 00:04:13.250
if you take a look at the implementation off this class itself,

00:04:13.250 --> 00:04:15.900
you would notice those two methods.

00:04:15.900 --> 00:04:20.550
So here is where then quoting is happening.

00:04:20.550 --> 00:04:33.650
And here is the basis on which the match condition is satisfied.

00:04:33.650 --> 00:04:38.840
So that's how you use one of these in quarters,

00:04:38.840 --> 00:04:43.400
and definitely this is necessary for any kind of application.

00:04:43.400 --> 00:04:51.150
But obviously you don't want to manually store Thean courted password in this manner.

00:04:51.150 --> 00:04:53.170
If you have a registration form,

00:04:53.170 --> 00:04:57.560
then we want to sort of take that passed word and called it and then store it in the

00:04:57.560 --> 00:04:58.250
database.

00:04:58.250 --> 00:04:59.380
But for the time being,

00:04:59.380 --> 00:05:01.850
this will do what would make sense.

