WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.800
Let's continue it.

00:00:05.800 --> 00:00:11.000
Step number three women will introduce the controller logic along with the handler mapping

00:00:11.000 --> 00:00:13.680
going back to our architecture.

00:00:13.680 --> 00:00:15.040
So far,

00:00:15.040 --> 00:00:17.250
we're able to acquire the user information,

00:00:17.250 --> 00:00:21.620
and the request would hit different controller along with the user.

00:00:21.620 --> 00:00:23.060
Enter date as a urinal.

00:00:23.060 --> 00:00:27.400
Param Eter It's time to now introduce the controller logic,

00:00:27.400 --> 00:00:30.910
which will do something meaningful with the user.

00:00:30.910 --> 00:00:37.510
Enter data and in order to instruct the dispatcher Sollett to which controller it needs to

00:00:37.510 --> 00:00:38.700
delegate the call to.

00:00:38.700 --> 00:00:45.200
We also need to introduce the handler mapping in the form of annotations and both handler

00:00:45.200 --> 00:00:49.800
mapping in the controller Logic will go hand in hand in the same file.

00:00:49.800 --> 00:00:54.140
So let's see how it's done for this purpose.

00:00:54.140 --> 00:00:56.650
I'm actually going to create a new package,

00:00:56.650 --> 00:00:57.610
by the way,

00:00:57.610 --> 00:00:58.290
by default,

00:00:58.290 --> 00:01:01.550
you don't have the job off holder inside the maven project.

00:01:01.550 --> 00:01:03.350
We need to create one.

00:01:03.350 --> 00:01:05.300
So I'm going to create a new job,

00:01:05.300 --> 00:01:05.950
a folder,

00:01:05.950 --> 00:01:12.280
and this is where our Java source files will be deciding inside,

00:01:12.280 --> 00:01:14.650
which I'm going to create a new package.

00:01:14.650 --> 00:01:20.780
I'm going to call it calm.

00:01:20.780 --> 00:01:26.070
Company controller.

00:01:26.070 --> 00:01:35.620
This is where all or controllers will be reciting couldn't have finish and create a new

00:01:35.620 --> 00:01:36.450
class file.

00:01:36.450 --> 00:01:39.570
You can give any name off your choice,

00:01:39.570 --> 00:01:46.350
but I'm going to choose Hello World Controller.

00:01:46.350 --> 00:01:50.650
And inside this file,

00:01:50.650 --> 00:01:52.950
I'm going to introduce a public method.

00:01:52.950 --> 00:01:56.310
I'm going to call the tiles again.

00:01:56.310 --> 00:01:58.110
You can give any name off your choice,

00:01:58.110 --> 00:02:05.110
but one thing that you to make sure we to return an object called model and view.

00:02:05.110 --> 00:02:07.650
That's what we're trying to do.

00:02:07.650 --> 00:02:12.530
The controller needs to send back the model along with the view name,

00:02:12.530 --> 00:02:19.150
and that is possible with an object called Model and the View,

00:02:19.150 --> 00:02:21.050
which is part of the spring framework.

00:02:21.050 --> 00:02:28.970
So I'm going to say more than and view human method,

00:02:28.970 --> 00:02:29.650
some name,

00:02:29.650 --> 00:02:37.650
show message or whatever I look until shift oh,

00:02:37.650 --> 00:02:44.930
to import all the necessary classes and interfaces and country chef death for proper

00:02:44.930 --> 00:02:45.850
indentation.

00:02:45.850 --> 00:02:48.050
Inside this method,

00:02:48.050 --> 00:02:55.570
I'm going to create a new instance off model and view M.

00:02:55.570 --> 00:02:56.270
V close,

00:02:56.270 --> 00:02:58.990
new model and view.

00:02:58.990 --> 00:03:02.450
If you notice there are many variants off the constructor,

00:03:02.450 --> 00:03:07.480
that means down the Landman.

00:03:07.480 --> 00:03:08.680
We have databases.

00:03:08.680 --> 00:03:12.090
We have more complex ways to send back the data to the dispatcher soul.

00:03:12.090 --> 00:03:20.970
It we can even send a map with string as a key and agenda type has a value.

00:03:20.970 --> 00:03:24.090
That means you can also introduce your own objects anyone.

00:03:24.090 --> 00:03:26.190
All these will come in in future videos.

00:03:26.190 --> 00:03:33.710
But for now we're going to keep things simple by just passing a string,

00:03:33.710 --> 00:03:35.050
which will be the view name,

00:03:35.050 --> 00:03:40.340
but just scrolled on to all these medicine.

00:03:40.340 --> 00:03:46.080
Tryto read the description that is populated on the left hand side just to get a sense of

00:03:46.080 --> 00:03:46.970
what they're doing.

00:03:46.970 --> 00:03:50.750
And as a view name,

00:03:50.750 --> 00:03:56.080
I'm going to say hello world.

00:03:56.080 --> 00:03:58.350
You can give any name off your choice,

00:03:58.350 --> 00:04:02.610
but in future we're going to be introducing a view you know,

00:04:02.610 --> 00:04:04.050
because it's a jsp page.

00:04:04.050 --> 00:04:06.450
It must have the same name.

00:04:06.450 --> 00:04:08.560
Whatever the name that you given here,

00:04:08.560 --> 00:04:11.350
it has to be the same name down the line.

00:04:11.350 --> 00:04:18.990
So just simply fall along with me and you the same name and with the semi colon.

00:04:18.990 --> 00:04:26.930
And before I returned this particular object I'm going to add a couple of details had

00:04:26.930 --> 00:04:27.650
object.

00:04:27.650 --> 00:04:34.390
This will help us add an attribute which we will be reading inside our view,

00:04:34.390 --> 00:04:36.850
which will be sent back as a response.

00:04:36.850 --> 00:04:40.150
So I'm going to say add object.

00:04:40.150 --> 00:04:46.180
I'm actually going to use the matter with two para meters.

00:04:46.180 --> 00:04:59.850
The 1st 1 I'm going to say hello has a key and the values also going to be Hello.

00:04:59.850 --> 00:05:02.660
The second attribute,

00:05:02.660 --> 00:05:03.450
however,

00:05:03.450 --> 00:05:09.100
is going to be a little tricky because I wanted to read the Ural perimeter that was entered

00:05:09.100 --> 00:05:11.150
by the user.

00:05:11.150 --> 00:05:19.450
So this has to be I'm going to call the key as the name,

00:05:19.450 --> 00:05:24.150
and this in here has to be the user into data.

00:05:24.150 --> 00:05:31.670
That means we're going to be using this particular name to read that user enter data.

00:05:31.670 --> 00:05:36.220
But how do we get the user enter data before that?

00:05:36.220 --> 00:05:42.620
We want to make sure that the dispatches over it is able to forward the request toe this

00:05:42.620 --> 00:05:47.200
particle controller logic and that happens with their request mapping.

00:05:47.200 --> 00:05:49.450
So guess what?

00:05:49.450 --> 00:05:54.500
I'm going to introduce an annotation at the matter level,

00:05:54.500 --> 00:06:00.050
and it's called request mapping,

00:06:00.050 --> 00:06:04.250
and I'm going to send one para meter,

00:06:04.250 --> 00:06:07.200
which is a string in my case,

00:06:07.200 --> 00:06:08.750
I'm going to say hello.

00:06:08.750 --> 00:06:14.110
What this means is whenever there is a request that has a following string,

00:06:14.110 --> 00:06:17.250
this is a handle logic for that.

00:06:17.250 --> 00:06:21.800
And if you remember inside are indexed or jsp.

00:06:21.800 --> 00:06:24.250
We do have that in here.

00:06:24.250 --> 00:06:30.380
So whenever the usable submit this form the request your little must be having the

00:06:30.380 --> 00:06:31.470
following string.

00:06:31.470 --> 00:06:40.160
The same will be identified by the dispatcher soul it using this request mapping And so the

00:06:40.160 --> 00:06:50.070
following handler logic will be triggered Now we also need to read the Ural perimeter and

00:06:50.070 --> 00:06:52.350
there is another annotation for that purpose.

00:06:52.350 --> 00:07:03.290
It's request Batam and then you would mention the perimeter that you want to read by

00:07:03.290 --> 00:07:11.800
providing this attribute called value And then you would provide name Basically,

00:07:11.800 --> 00:07:17.890
whatever the name that you given here is the same thing that you would provide.

00:07:17.890 --> 00:07:20.410
And in addition to that,

00:07:20.410 --> 00:07:26.450
we're going to say that this is required has false.

00:07:26.450 --> 00:07:28.600
These are not mandatory,

00:07:28.600 --> 00:07:31.190
but just giving them anyway.

00:07:31.190 --> 00:07:39.150
And we can also provide default value in case if user does not enter anything,

00:07:39.150 --> 00:07:46.950
then this is going to be the default one and want to say world.

00:07:46.950 --> 00:07:52.910
And then finally,

00:07:52.910 --> 00:08:03.050
I'm going to specify the method argument string name.

00:08:03.050 --> 00:08:12.510
Now this particular argument name will hold Whatever is the value the resulting value off

00:08:12.510 --> 00:08:13.850
this annotation.

00:08:13.850 --> 00:08:24.150
Now I can use this name in here to be able to read the your With Madame,

00:08:24.150 --> 00:08:29.210
we seem to be having another Let's see what it is.

00:08:29.210 --> 00:08:30.490
Oh,

00:08:30.490 --> 00:08:30.860
yeah,

00:08:30.860 --> 00:08:33.910
Went return this object back to the dispatches.

00:08:33.910 --> 00:08:38.650
So let and that's it,

00:08:38.650 --> 00:08:45.630
were able to introduce the controller logic along with the request mapping and by just

00:08:45.630 --> 00:08:47.450
returning the model and view object.

00:08:47.450 --> 00:08:51.720
The underlying spring container will take care of handling that object to the dispatcher

00:08:51.720 --> 00:08:52.140
solid,

00:08:52.140 --> 00:08:54.410
but we're not done yet.

00:08:54.410 --> 00:09:02.130
There's one last thing that went to do as part of this step is to specify this has a bean

00:09:02.130 --> 00:09:05.120
inside the spring conflict file Well,

00:09:05.120 --> 00:09:06.060
in dies offspring,

00:09:06.060 --> 00:09:08.850
you in the controller is essentially a bean,

00:09:08.850 --> 00:09:19.250
and typically the conflict file would be with the name the name of the Soviet hyphen,

00:09:19.250 --> 00:09:24.950
so that dot xml and that goes inside the ribbon of directory.

00:09:24.950 --> 00:09:27.050
So let's just quickly created.

00:09:27.050 --> 00:09:38.150
I'm just simply going to copy the web dot xml and name it as dispatcher hyphen.

00:09:38.150 --> 00:09:42.280
So that and typically for each never dispatches solid,

00:09:42.280 --> 00:09:45.250
we would have won conflict file associate ID,

00:09:45.250 --> 00:09:50.970
and this is a file that spring will take a look at in order to create the context or to

00:09:50.970 --> 00:09:53.350
create instances on demand.

00:09:53.350 --> 00:09:55.750
We'll talk about the route context,

00:09:55.750 --> 00:09:56.950
application context,

00:09:56.950 --> 00:09:59.910
Web application context accepted on the line.

00:09:59.910 --> 00:10:01.390
But for no.

00:10:01.390 --> 00:10:06.820
Make sure that to have this fight in place with the following naming convention that's a

00:10:06.820 --> 00:10:08.750
solar name hyphen.

00:10:08.750 --> 00:10:12.750
So let if you want to have a different name,

00:10:12.750 --> 00:10:17.450
or if you want to store this file elsewhere inside the by buying off directory,

00:10:17.450 --> 00:10:20.430
then you have to add a context.

00:10:20.430 --> 00:10:22.950
Batam tag inside the web dot xml file.

00:10:22.950 --> 00:10:29.510
But this is a standard convention that everyone follows in reliable projects hit,

00:10:29.510 --> 00:10:31.550
okay and inside this,

00:10:31.550 --> 00:10:35.280
we can specify are beans,

00:10:35.280 --> 00:10:38.950
and I already have the content ready with me.

00:10:38.950 --> 00:10:43.350
I'm just going to copy it and have it in here.

00:10:43.350 --> 00:10:48.090
I really can add the controller as a being inside this conflict file,

00:10:48.090 --> 00:10:50.440
but in real world products,

00:10:50.440 --> 00:10:53.330
we can have 100 self controllers,

00:10:53.330 --> 00:10:56.550
and it's really hard to maintain them inside a conflict file.

00:10:56.550 --> 00:11:01.580
Spring providers the convenience off so called a competent scan,

00:11:01.580 --> 00:11:07.290
or that means is you can just annotate this as a controller,

00:11:07.290 --> 00:11:19.450
using an annotation just about the class definition and spring will take care off.

00:11:19.450 --> 00:11:24.100
Scanning all the beans that are annotated as at the raid controller.

00:11:24.100 --> 00:11:30.940
And that scanning happens only when you provide the following tag that will say it was a

00:11:30.940 --> 00:11:31.750
lot off effort,

00:11:31.750 --> 00:11:36.050
and with this we're done with step number three.

