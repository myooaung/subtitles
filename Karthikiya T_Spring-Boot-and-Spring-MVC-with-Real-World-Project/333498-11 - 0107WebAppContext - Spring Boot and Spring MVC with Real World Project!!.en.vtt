WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.690
let us talk about the Web application contest in spring.

00:00:03.690 --> 00:00:06.100
Whenever the silver start,

00:00:06.100 --> 00:00:10.450
it will take a look at the deployment descriptor or developed or XML file,

00:00:10.450 --> 00:00:14.800
and it notices that it needs to load the dispatcher select.

00:00:14.800 --> 00:00:20.350
And since we said the stag load on start up and gave a positive value,

00:00:20.350 --> 00:00:23.770
the servant knows that it needs to preen ish lies the dispatcher.

00:00:23.770 --> 00:00:29.850
So let and the job of dispatcher sell it is not only to divert the calls to a relevant

00:00:29.850 --> 00:00:30.990
controller logic,

00:00:30.990 --> 00:00:36.480
but pray or toe that it needs to create so called a Web application context inside,

00:00:36.480 --> 00:00:41.720
which will have the instances off all the beans that are declared in the conflict.

00:00:41.720 --> 00:00:43.870
File the Dispatcher soul.

00:00:43.870 --> 00:00:49.100
It would be able to identify this file with the following name Dispatcher,

00:00:49.100 --> 00:00:54.040
which is the name of the Soviet that you given here high pins all the dot xml file,

00:00:54.040 --> 00:00:58.430
and this has to go into the root directory with the name Web hyphen.

00:00:58.430 --> 00:00:59.050
I enough.

00:00:59.050 --> 00:01:04.280
If you have this file deciding in any other directory hard,

00:01:04.280 --> 00:01:05.650
if you have a different name,

00:01:05.650 --> 00:01:08.990
then you need to add so called and in it,

00:01:08.990 --> 00:01:09.650
madam,

00:01:09.650 --> 00:01:12.770
with the following Batam name.

00:01:12.770 --> 00:01:14.690
That's context conflict,

00:01:14.690 --> 00:01:16.590
location in Camel case.

00:01:16.590 --> 00:01:20.350
And then you would provide the class part as its value,

00:01:20.350 --> 00:01:24.050
which would point to the file name.

00:01:24.050 --> 00:01:31.760
But whichever way you follow the whole point off dispatches Soviet is that it needs to

00:01:31.760 --> 00:01:35.080
create the Web application context and thought of create.

00:01:35.080 --> 00:01:39.490
Singleton instance is off all the beans to find in here and in here.

00:01:39.490 --> 00:01:46.200
We're currently performing the components can off this package within which we have set off

00:01:46.200 --> 00:01:49.280
controllers annotated with that direct controller.

00:01:49.280 --> 00:01:54.660
Now you may have a question as to why should we let the dispatches all that create the Web

00:01:54.660 --> 00:01:55.850
application context?

00:01:55.850 --> 00:01:58.650
Why shouldn't we create the context separately?

00:01:58.650 --> 00:01:59.230
Well,

00:01:59.230 --> 00:02:00.400
the answer is the dispatch.

00:02:00.400 --> 00:02:06.480
Issel that is tuned are written in such a way that it has the knowledge on how to delegate

00:02:06.480 --> 00:02:10.660
the calls to a specific competent based on the request mapping.

00:02:10.660 --> 00:02:13.280
In fact,

00:02:13.280 --> 00:02:18.680
the dispatches all that internally uses the Soviet context in order to get access to

00:02:18.680 --> 00:02:20.750
various instances and para meters.

00:02:20.750 --> 00:02:22.200
Also,

00:02:22.200 --> 00:02:23.180
if you remember,

00:02:23.180 --> 00:02:27.170
I mentioned that there would be a Web application context for each and every dispatches

00:02:27.170 --> 00:02:27.680
solve it,

00:02:27.680 --> 00:02:31.970
which means we can have more than one dispatches sold it.

00:02:31.970 --> 00:02:36.400
So what are some cases where we might be needing to create multiple dispatches?

00:02:36.400 --> 00:02:36.640
Soul.

00:02:36.640 --> 00:02:37.780
That's well,

00:02:37.780 --> 00:02:43.270
one such example that I can think off is currently we're using spring MBC,

00:02:43.270 --> 00:02:45.460
the spring by BlackBerry.

00:02:45.460 --> 00:02:50.980
But the same application can also use another library like spring Web services.

00:02:50.980 --> 00:02:52.360
In that case,

00:02:52.360 --> 00:02:54.970
we might need to use another dispatcher,

00:02:54.970 --> 00:02:58.610
solve it specifically tuned to work with Web services,

00:02:58.610 --> 00:03:00.120
something off this sort.

00:03:00.120 --> 00:03:02.550
So we have this particular dispatches.

00:03:02.550 --> 00:03:05.350
So let the message dispatches Soviet,

00:03:05.350 --> 00:03:09.950
which does pretty much the same job as off the dispatches sold it.

00:03:09.950 --> 00:03:13.680
But this is meant for spring Web services,

00:03:13.680 --> 00:03:17.150
another case where you might need multiple dispatches.

00:03:17.150 --> 00:03:21.350
So that's is when you want to segregate the controllers in an organized manner.

00:03:21.350 --> 00:03:22.350
For example,

00:03:22.350 --> 00:03:28.190
you might want have a set off controllers for website authors and another set off

00:03:28.190 --> 00:03:34.250
controllers for website admin and another set of controllers for develops that visitors

00:03:34.250 --> 00:03:43.510
etcetera in that case who just make multiple copies off this tag essentially want to create

00:03:43.510 --> 00:03:44.490
multiple dispatches,

00:03:44.490 --> 00:03:50.450
all that instances and then have a different your mapping reach one off them.

00:03:50.450 --> 00:03:51.820
So,

00:03:51.820 --> 00:03:52.390
for example,

00:03:52.390 --> 00:03:58.350
maybe for upset artery might have a your that has Arthur text in it.

00:03:58.350 --> 00:03:59.560
Something of that sort.

00:03:59.560 --> 00:04:04.020
The point I want to make here is you can have multiple dispatches.

00:04:04.020 --> 00:04:07.480
So let's and each dispatches all that would need its own.

00:04:07.480 --> 00:04:09.740
My application context.

00:04:09.740 --> 00:04:14.250
You can create a Web application context specific to Web services,

00:04:14.250 --> 00:04:21.770
using a normal dispatches so that which is meant for spring Web and wise worsen the message

00:04:21.770 --> 00:04:21.770
.

00:04:21.770 --> 00:04:22.520
Dispatches solve.

00:04:22.520 --> 00:04:25.230
It is not June toe Delegate.

00:04:25.230 --> 00:04:27.290
The cost of spring Web component.

00:04:27.290 --> 00:04:30.310
Once we talk about root application context,

00:04:30.310 --> 00:04:35.860
I'm actually going to show you a quick diagram on how things are organized here,

00:04:35.860 --> 00:04:38.250
thereby you will have a better picture.

00:04:38.250 --> 00:04:39.780
Hope it makes sense,

00:04:39.780 --> 00:04:40.050
House,

00:04:40.050 --> 00:04:40.670
he assume.

