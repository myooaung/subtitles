WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.620
Okay,

00:00:00.620 --> 00:00:03.650
let us explore what's going on in this project real quick.

00:00:03.650 --> 00:00:09.540
What you have here is pretty much a standard maven director structure you have source Main

00:00:09.540 --> 00:00:12.870
Java directory within which you have this package.

00:00:12.870 --> 00:00:14.130
Calm that company.

00:00:14.130 --> 00:00:18.770
This is something that you specified while creating the project using spring toll suit.

00:00:18.770 --> 00:00:22.450
And inside this data to recon have all your source files.

00:00:22.450 --> 00:00:25.890
Spring toe suit also generated.

00:00:25.890 --> 00:00:28.700
One file for us will explore it in a bit.

00:00:28.700 --> 00:00:35.740
We also have the resources folder within which you can keep all your static resources like

00:00:35.740 --> 00:00:37.330
images html,

00:00:37.330 --> 00:00:37.920
CSS,

00:00:37.920 --> 00:00:38.600
JavaScript,

00:00:38.600 --> 00:00:39.280
etcetera.

00:00:39.280 --> 00:00:40.070
Or,

00:00:40.070 --> 00:00:43.420
if you're using any kind off a template engine like Time Leaf,

00:00:43.420 --> 00:00:46.050
you can keep all those templates in the Star victory.

00:00:46.050 --> 00:00:48.550
So what's the big deal in here?

00:00:48.550 --> 00:00:50.420
Everything looks pretty normal,

00:00:50.420 --> 00:00:50.730
right?

00:00:50.730 --> 00:00:52.150
Nothing significant.

00:00:52.150 --> 00:00:56.080
While all the magic is happening right here in this form that XML file.

00:00:56.080 --> 00:01:02.570
So let's explore what's happening in their first Let's take a look at the dependencies part

00:01:02.570 --> 00:01:02.570
.

00:01:02.570 --> 00:01:03.670
Remember,

00:01:03.670 --> 00:01:04.720
While creating the project,

00:01:04.720 --> 00:01:09.080
you have chosen web as a starter dependency.

00:01:09.080 --> 00:01:09.770
Well,

00:01:09.770 --> 00:01:10.690
here you have it.

00:01:10.690 --> 00:01:17.240
One of the features off maven is that when you specify a particular dependency maven will

00:01:17.240 --> 00:01:19.750
not only download that particular dependency,

00:01:19.750 --> 00:01:23.910
but also the dependence is that this dependency depends on.

00:01:23.910 --> 00:01:24.790
For example,

00:01:24.790 --> 00:01:32.410
say that your project is dependent on Project A and Project A is dependent on project be

00:01:32.410 --> 00:01:36.200
when you specify Project A as part of the dependency.

00:01:36.200 --> 00:01:40.300
Maybe we will not only download Project a jar file,

00:01:40.300 --> 00:01:42.670
but also beast,

00:01:42.670 --> 00:01:44.510
because is dependent on B.

00:01:44.510 --> 00:01:46.850
That's called transitive dependency.

00:01:46.850 --> 00:01:49.140
I hope I made myself clear.

00:01:49.140 --> 00:01:50.850
So with spring boot,

00:01:50.850 --> 00:01:57.850
you have this dependence in here and inside this particular project Springboard Start of EB

00:01:57.850 --> 00:02:03.930
you would have all the libraries or dependence is that you ever need to run your Web

00:02:03.930 --> 00:02:04.720
application.

00:02:04.720 --> 00:02:06.720
If you're using Eclipse,

00:02:06.720 --> 00:02:12.010
you can press control and you can explore what's inside the poem that XML file of this

00:02:12.010 --> 00:02:13.060
particular project.

00:02:13.060 --> 00:02:19.330
And if you notice he would come across with all the dependence is that would ultimately

00:02:19.330 --> 00:02:24.860
help you run Web applications without spring boot,

00:02:24.860 --> 00:02:26.320
you would have to define all this.

00:02:26.320 --> 00:02:27.750
Dependence is yourself.

00:02:27.750 --> 00:02:33.450
You have to spend time doing research on water all the libraries required and then find the

00:02:33.450 --> 00:02:38.900
right war Shin's and then include all those dependence is in here well with spring boot.

00:02:38.900 --> 00:02:40.050
You don't have to do that.

00:02:40.050 --> 00:02:45.180
All you have to do is to specify the technology that you want to use and you're good to go

00:02:45.180 --> 00:02:45.180
.

00:02:45.180 --> 00:02:52.110
Another key thing to notice here is you don't have to specify the wash in Washington D

00:02:52.110 --> 00:02:55.300
managed by so called a parent Palm.

00:02:55.300 --> 00:02:59.610
You would specify the parent bomb with the stag parent,

00:02:59.610 --> 00:03:02.850
and it would give the project coordinates.

00:03:02.850 --> 00:03:06.270
So let's take a look at what's inside the parent palm.

00:03:06.270 --> 00:03:14.240
Can you compress on control and you can click on this project and here is a parent Palm

00:03:14.240 --> 00:03:18.150
Springboard dependencies,

00:03:18.150 --> 00:03:22.280
and this will have all the dependencies,

00:03:22.280 --> 00:03:23.050
plug ins,

00:03:23.050 --> 00:03:23.790
properties,

00:03:23.790 --> 00:03:28.670
configurations that you would ever need for any kind offspring project,

00:03:28.670 --> 00:03:33.790
and all these would be inherited into a child project.

00:03:33.790 --> 00:03:37.370
But do taken note here,

00:03:37.370 --> 00:03:38.940
you would see literally.

00:03:38.940 --> 00:03:42.550
All the dependence is that spring boot ever supported.

00:03:42.550 --> 00:03:48.360
Springboard doesn't include all these dependencies and plug ins automatically in your child

00:03:48.360 --> 00:03:49.050
project.

00:03:49.050 --> 00:03:52.200
There isn't being human or be needing all those dependence is right.

00:03:52.200 --> 00:03:55.520
You're not going to work on Amazon Web services.

00:03:55.520 --> 00:03:58.550
Are you not going to be used a mongo DB or whatever,

00:03:58.550 --> 00:04:03.540
so you don't have to include all those dependence is and increase the size off your

00:04:03.540 --> 00:04:04.750
resulting artifact.

00:04:04.750 --> 00:04:10.960
But what you can do is you can specify the dependency that you need and just off the

00:04:10.960 --> 00:04:13.950
configurations would be inherited from the parent bomb.

00:04:13.950 --> 00:04:19.090
And so we don't have to specify the washing number in here because it is being inherited

00:04:19.090 --> 00:04:20.650
from the parent bomb.

00:04:20.650 --> 00:04:26.190
Let me search for this particular artifact inside the bed and bomb.

00:04:26.190 --> 00:04:30.300
And here you have it.

00:04:30.300 --> 00:04:37.010
This worship number would be inherited right here inside your project.

00:04:37.010 --> 00:04:41.350
Same is the case with the plug ins and other configurations.

00:04:41.350 --> 00:04:46.050
All those configuration details would be inherited only when you need them.

00:04:46.050 --> 00:04:51.550
You can actually control the springboard washing itself.

00:04:51.550 --> 00:04:54.700
In this case we're using to rot one about five.

00:04:54.700 --> 00:04:57.740
He can change the washing if you wish.

00:04:57.740 --> 00:04:58.850
And accordingly,

00:04:58.850 --> 00:05:03.770
specific parent palm would be targeted and saw the dependencies abortions.

00:05:03.770 --> 00:05:09.640
So you don't have to really manage the dependencies yourself,

00:05:09.640 --> 00:05:11.500
including their washing numbers.

00:05:11.500 --> 00:05:15.960
All that headache will be taken care by all this springboard projects.

00:05:15.960 --> 00:05:18.940
We also have a plug in,

00:05:18.940 --> 00:05:21.510
which is Springboard maven Plug in.

00:05:21.510 --> 00:05:27.100
It's really crucial that you have this plugging in place because this is what is going to

00:05:27.100 --> 00:05:30.050
create what I call a reasonable fat jar.

00:05:30.050 --> 00:05:34.150
We'll talk about this plug in once after we run our project.

00:05:34.150 --> 00:05:35.290
But again,

00:05:35.290 --> 00:05:39.320
it just specified the plug in that you want to use your in space for any office

00:05:39.320 --> 00:05:40.330
configurations.

00:05:40.330 --> 00:05:45.050
All those conflagration details would be fetched from its bed and foam.

