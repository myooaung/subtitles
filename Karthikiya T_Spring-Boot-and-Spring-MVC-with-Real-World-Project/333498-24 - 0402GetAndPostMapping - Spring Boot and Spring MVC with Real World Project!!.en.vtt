WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.050
Let's take a look at Howard.

00:00:02.050 --> 00:00:03.330
Application is written.

00:00:03.330 --> 00:00:05.710
This is our applications home page.

00:00:05.710 --> 00:00:07.960
Whenever somebody visits a website,

00:00:07.960 --> 00:00:10.090
this is the first page that they come across.

00:00:10.090 --> 00:00:14.690
But this is very simple page that has one image,

00:00:14.690 --> 00:00:19.010
which is basically our company's logo and then happy subtext.

00:00:19.010 --> 00:00:20.930
And then we have one link,

00:00:20.930 --> 00:00:21.210
which,

00:00:21.210 --> 00:00:21.900
when clicked,

00:00:21.900 --> 00:00:27.450
would take the user to this custom designed page where the user can actually designed the T

00:00:27.450 --> 00:00:27.860
shirt,

00:00:27.860 --> 00:00:31.450
giving their giving it some name.

00:00:31.450 --> 00:00:36.300
So let's take a look at what's happening in the code.

00:00:36.300 --> 00:00:41.400
Our home pages written inside indexed Oreste Immel Page.

00:00:41.400 --> 00:00:47.680
And when you need the file as index that's going to be detected automatically has a home

00:00:47.680 --> 00:00:48.150
page.

00:00:48.150 --> 00:00:48.890
I mean,

00:00:48.890 --> 00:00:53.240
you don't have to introduce a controller just to handle the homepage request.

00:00:53.240 --> 00:00:55.550
It will be detected by default.

00:00:55.550 --> 00:00:57.460
And inside this file,

00:00:57.460 --> 00:01:04.410
we just simply have a very simple test email code with image text as well as one link.

00:01:04.410 --> 00:01:08.970
The link would point to this resource slash design,

00:01:08.970 --> 00:01:14.350
so we have introduced at controller toe handle that very request.

00:01:14.350 --> 00:01:21.470
So I've used the sanitation to cross mapping and provided the your baton,

00:01:21.470 --> 00:01:23.410
and in our case,

00:01:23.410 --> 00:01:24.520
this year,

00:01:24.520 --> 00:01:32.630
Old baton would map with the request when somebody clicked on this link and since by

00:01:32.630 --> 00:01:38.890
default hatched IMA links or get requests it would land.

00:01:38.890 --> 00:01:41.250
The request would line inside this method.

00:01:41.250 --> 00:01:45.750
Since it has the sanitation get mapping.

00:01:45.750 --> 00:01:54.080
We can also have and attribute a your let tribute just as in here inside the sanitation as

00:01:54.080 --> 00:01:56.850
well but there is no need for it right now.

00:01:56.850 --> 00:02:01.580
But if you want to add something like this,

00:02:01.580 --> 00:02:04.020
for example,

00:02:04.020 --> 00:02:05.600
say test,

00:02:05.600 --> 00:02:18.280
then your your has to be design slash test Only then will it land inside this control

00:02:18.280 --> 00:02:18.850
method.

00:02:18.850 --> 00:02:26.800
Let's under those changes by the in order to make our application visually appealing have

00:02:26.800 --> 00:02:30.750
also introduced the cascading style sheets.

00:02:30.750 --> 00:02:35.890
You don't have to introduce this if you're creating this application from scratch,

00:02:35.890 --> 00:02:39.250
this is just to make our application look better.

00:02:39.250 --> 00:02:44.990
I'm going to make this project available for you to download anyway so that you can

00:02:44.990 --> 00:02:45.780
experiment with it.

00:02:45.780 --> 00:02:50.740
What we're doing inside this method is pretty straightforward,

00:02:50.740 --> 00:02:55.850
since we don't have a database were explicitly populating the model data,

00:02:55.850 --> 00:03:00.330
But I really would be fetching all these details from the database and what I'm trying to

00:03:00.330 --> 00:03:05.620
do here is I'm just trying to add few attributes with key value pairs.

00:03:05.620 --> 00:03:12.380
The key is going to be the string and the value is going to be and add a list off strings,

00:03:12.380 --> 00:03:20.000
which will basically describe all the customization options so users can customise with the

00:03:20.000 --> 00:03:26.900
color of the T shirt size sleeves as well as the call a style and,

00:03:26.900 --> 00:03:27.250
uh,

00:03:27.250 --> 00:03:30.550
each one have their own responding values.

00:03:30.550 --> 00:03:36.520
We're populating these details because we want to populate all this data under you,

00:03:36.520 --> 00:03:41.150
I because that's what user is presented with.

00:03:41.150 --> 00:03:43.770
And as I mentioned before,

00:03:43.770 --> 00:03:48.650
we're going to be using timely template engine to do this job.

00:03:48.650 --> 00:03:52.500
And in addition to adding this attribute,

00:03:52.500 --> 00:03:54.530
we also created an object.

00:03:54.530 --> 00:03:55.650
Let me explain.

00:03:55.650 --> 00:04:00.250
So when the user select various different options and clicks on proceed,

00:04:00.250 --> 00:04:07.360
we need something that will hold all entered or choose and details and when he clicks

00:04:07.360 --> 00:04:08.050
proceed,

00:04:08.050 --> 00:04:10.290
will do some crossing with that data.

00:04:10.290 --> 00:04:13.290
So for that purpose,

00:04:13.290 --> 00:04:15.470
I have to introduce another class,

00:04:15.470 --> 00:04:17.500
which is a simple Poggio.

00:04:17.500 --> 00:04:22.550
It has one string attribute as a last list off strings.

00:04:22.550 --> 00:04:29.650
Basically what this means is the user will enter some name to their customization,

00:04:29.650 --> 00:04:38.160
and that name will be held by the string attributes and all the rest of the choices that

00:04:38.160 --> 00:04:42.670
the user will choose are going to be stored as a list inside this attribute.

00:04:42.670 --> 00:04:51.160
So we have to create an empty object off it and send it as an attribute so that we can use

00:04:51.160 --> 00:04:53.150
it inside our template.

00:04:53.150 --> 00:05:00.700
So let's take a look at the time with template that's going to populate this page,

00:05:00.700 --> 00:05:02.490
and here it is.

00:05:02.490 --> 00:05:12.940
The key element here is this form with the Method Post were using Post Request because we

00:05:12.940 --> 00:05:16.150
want to keep all the user enter data secure.

00:05:16.150 --> 00:05:17.190
I mean,

00:05:17.190 --> 00:05:18.590
if you use and get request,

00:05:18.590 --> 00:05:21.780
then all that he just couldn't be seen inside the request.

00:05:21.780 --> 00:05:23.850
If you're is imposed,

00:05:23.850 --> 00:05:28.200
all the enter details would be part of the request body,

00:05:28.200 --> 00:05:29.750
which is more secure.

00:05:29.750 --> 00:05:32.740
So once user,

00:05:32.740 --> 00:05:34.050
enter some data.

00:05:34.050 --> 00:05:39.060
Let's say test and I'm going to choose one color,

00:05:39.060 --> 00:05:40.350
as allows the size.

00:05:40.350 --> 00:05:44.650
And once we click proceed,

00:05:44.650 --> 00:05:50.680
we have a handler method for that inside the same control of class,

00:05:50.680 --> 00:05:53.240
but with post mapping annotation.

00:05:53.240 --> 00:05:55.370
And inside this,

00:05:55.370 --> 00:06:07.050
we're trying to receive the object that we had populated and inside this form.

00:06:07.050 --> 00:06:10.430
In order to take the user input here,

00:06:10.430 --> 00:06:12.900
we had to use some timely specific stuff.

00:06:12.900 --> 00:06:14.050
For example,

00:06:14.050 --> 00:06:17.850
we have timeless value which would map,

00:06:17.850 --> 00:06:21.570
but this the name.

00:06:21.570 --> 00:06:26.140
So we have to provide the exact same name in here as well.

00:06:26.140 --> 00:06:29.060
Just try to pause the William,

00:06:29.060 --> 00:06:31.090
try to understand what's going on in here.

00:06:31.090 --> 00:06:39.010
It would look very obvious and we're using timely forage and inside select.

00:06:39.010 --> 00:06:41.850
We're going to populate all the list off options available.

00:06:41.850 --> 00:06:43.930
I mean,

00:06:43.930 --> 00:06:45.760
what are the list were populating here?

00:06:45.760 --> 00:06:50.980
We just want to look through them and sort of populate all them has a list.

00:06:50.980 --> 00:06:59.100
And so we're using this particular attribute pH each this is equal into for each in Java

00:06:59.100 --> 00:07:04.450
and we're populating all the options available inside the color.

00:07:04.450 --> 00:07:14.160
Attribute again disposability and try to understand this would look obvious.

00:07:14.160 --> 00:07:15.280
Similarly,

00:07:15.280 --> 00:07:22.240
restaurant elements were also populated and finally we have the submit button that would

00:07:22.240 --> 00:07:27.150
ultimately send all these details in the form off request.

00:07:27.150 --> 00:07:32.150
And so our handle logic will receive it.

00:07:32.150 --> 00:07:34.090
Finally,

00:07:34.090 --> 00:07:41.110
amusing the SDP response object to sort of write back some kind of response I deliver

00:07:41.110 --> 00:07:43.590
should be doing some crossing with the details entered.

00:07:43.590 --> 00:07:44.960
But for now,

00:07:44.960 --> 00:07:47.610
since that application is pretty simple,

00:07:47.610 --> 00:07:50.310
I'm just displaying back the text.

00:07:50.310 --> 00:07:55.410
So these are all the details entered by the user.

00:07:55.410 --> 00:08:04.960
But the point don't make here is to demonstrate these annotations and also and also to

00:08:04.960 --> 00:08:07.350
demonstrate the right designed baton.

00:08:07.350 --> 00:08:09.570
I mean,

00:08:09.570 --> 00:08:13.620
you're going to use the request mapping to target one specific Ural Patton,

00:08:13.620 --> 00:08:18.050
and then you'll have list off methods handling specific history.

00:08:18.050 --> 00:08:20.700
P methods hope it makes sense.

