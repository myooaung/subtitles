WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.870
Okay,

00:00:00.870 --> 00:00:04.020
let us take a look at an example off Interceptor and spring.

00:00:04.020 --> 00:00:08.910
I already have a working springboard hello world application,

00:00:08.910 --> 00:00:13.750
and I'm going to introduce some changes to introduce the interceptor for our controller.

00:00:13.750 --> 00:00:17.790
The first thing that we need to do is to create a class file.

00:00:17.790 --> 00:00:19.800
This is a very plain class,

00:00:19.800 --> 00:00:23.100
while no funky annotations or what so ever Well,

00:00:23.100 --> 00:00:25.150
we're going to introduce some in a while.

00:00:25.150 --> 00:00:31.950
The first thing that I'm going to do is to use an interface called Handler Interceptor.

00:00:31.950 --> 00:00:38.060
And this is the interface that has some default method in it which,

00:00:38.060 --> 00:00:38.680
if you wish,

00:00:38.680 --> 00:00:42.450
you can all read them and provide some behavior.

00:00:42.450 --> 00:00:45.550
And here are the methods that I'm talking about.

00:00:45.550 --> 00:00:52.740
Pre handle will come into picture before the controller is executed and post handle comes

00:00:52.740 --> 00:00:58.390
into picture after the controller logic and after completion will come into picture after

00:00:58.390 --> 00:01:00.240
the requester sold to that line.

00:01:00.240 --> 00:01:01.940
In my case,

00:01:01.940 --> 00:01:03.240
I'm going to all right,

00:01:03.240 --> 00:01:06.850
all these methods and I have them in here.

00:01:06.850 --> 00:01:13.060
The pre handle method would return a Boolean value if it's going to written True.

00:01:13.060 --> 00:01:19.730
That means we are giving a green signal that the request can be forwarded to the desired

00:01:19.730 --> 00:01:20.450
controller.

00:01:20.450 --> 00:01:26.220
If this region's falls in spring from Michael assume that we're handing the request

00:01:26.220 --> 00:01:27.890
ourselves inside this method,

00:01:27.890 --> 00:01:32.730
and it doesn't have to take the request all the way to the controller and send the response

00:01:32.730 --> 00:01:33.650
back to the client,

00:01:33.650 --> 00:01:37.150
and here he would typically have a logic.

00:01:37.150 --> 00:01:38.000
For instance,

00:01:38.000 --> 00:01:42.400
you may want to authenticate the use of before you forward the request of the controller,

00:01:42.400 --> 00:01:47.850
and it can use this request object for the same.

00:01:47.850 --> 00:01:52.350
You would civic was dot So we have this method authenticate,

00:01:52.350 --> 00:01:57.150
which will trigger the same authentication process as would be triggered.

00:01:57.150 --> 00:02:01.690
If the request is for a resource that is protected by a security constraint,

00:02:01.690 --> 00:02:05.650
at the moment wouldn't include spring security into our library,

00:02:05.650 --> 00:02:07.900
and so we cannot authenticate.

00:02:07.900 --> 00:02:10.470
But down the line when we create applications,

00:02:10.470 --> 00:02:13.210
then we're certainly going to include spring security.

00:02:13.210 --> 00:02:15.180
And so the authentication logic.

00:02:15.180 --> 00:02:17.250
But you got my point.

00:02:17.250 --> 00:02:21.700
I hope for simplicity's sake.

00:02:21.700 --> 00:02:27.380
I'm just going to print a message and written true and similarly,

00:02:27.380 --> 00:02:34.850
we also have the post handle as well as the after completion matters with simple messages.

00:02:34.850 --> 00:02:42.250
One another thing that I need to make sure is to add the sanitation at the rate component.

00:02:42.250 --> 00:02:45.170
Because this interceptor is not a controller,

00:02:45.170 --> 00:02:46.420
it's not a service.

00:02:46.420 --> 00:02:50.610
It's not a repository hit some general component,

00:02:50.610 --> 00:02:55.790
which we want to be discovered by the spring while performing the order scan.

00:02:55.790 --> 00:03:01.110
So by saying this at the red component,

00:03:01.110 --> 00:03:06.830
this particular being would be identified by the spring and spring would create an instance

00:03:06.830 --> 00:03:08.550
off it in the context.

00:03:08.550 --> 00:03:12.530
Likewise,

00:03:12.530 --> 00:03:15.220
we can have any number off interceptors as you wish,

00:03:15.220 --> 00:03:19.390
in which case you would create another class with similar methods.

00:03:19.390 --> 00:03:25.290
But spring cannot make a guess on what our old interceptors that you want to act to it and

00:03:25.290 --> 00:03:27.210
what you want to deactivate.

00:03:27.210 --> 00:03:28.910
So for that purpose,

00:03:28.910 --> 00:03:34.470
we need to manually register these interceptors ourselves in the Java convict file.

00:03:34.470 --> 00:03:39.340
But since we're using Spring Boat application wouldn't create the Java conflict file

00:03:39.340 --> 00:03:39.980
ourselves.

00:03:39.980 --> 00:03:41.920
It is all taken care by the spring boat,

00:03:41.920 --> 00:03:43.150
but what we can do,

00:03:43.150 --> 00:03:45.490
rather is make use off.

00:03:45.490 --> 00:03:46.550
Another interferes,

00:03:46.550 --> 00:03:50.100
which will have set off callback methods,

00:03:50.100 --> 00:03:53.290
and these methods would be called by spring.

00:03:53.290 --> 00:03:55.560
Let's take a look at all the list off matters in it,

00:03:55.560 --> 00:04:02.870
so here we have list off methods that will allow us to do some customization for our

00:04:02.870 --> 00:04:03.750
conflict file.

00:04:03.750 --> 00:04:09.350
You can just quickly walk through this particular file and read the description off each

00:04:09.350 --> 00:04:10.050
one off them.

00:04:10.050 --> 00:04:17.450
But the purpose off this particular class is it would define all the callback methods to

00:04:17.450 --> 00:04:22.650
customize the Java based configuration for spring MBC enabled applications.

00:04:22.650 --> 00:04:30.700
So the method that we're going to be using is right here.

00:04:30.700 --> 00:04:32.050
Add interceptors.

00:04:32.050 --> 00:04:36.550
This comes with the interceptor registry object,

00:04:36.550 --> 00:04:40.650
which we're going to use to add our interceptors.

00:04:40.650 --> 00:04:42.210
In my case,

00:04:42.210 --> 00:04:46.080
I'm only going to add the very interceptor which is present.

00:04:46.080 --> 00:04:48.660
But before I add it,

00:04:48.660 --> 00:04:53.100
I had to make sure spring will dependency inject this particular object,

00:04:53.100 --> 00:04:57.350
and that will happen without a wide annotation.

00:04:57.350 --> 00:05:00.650
So when we deployed this application,

00:05:00.650 --> 00:05:05.830
the dependency would be injected by spring and again.

00:05:05.830 --> 00:05:11.700
This is also a competent which needs to be harder scanned,

00:05:11.700 --> 00:05:14.740
and that's pretty much all we have to do.

00:05:14.740 --> 00:05:16.930
If you want to add additional interceptors,

00:05:16.930 --> 00:05:20.300
just copy this statement and repeat it.

00:05:20.300 --> 00:05:27.350
Keep adding as many interceptors as you wish they all would be executed in sequence.

00:05:27.350 --> 00:05:38.350
So let's run our program and see if things are working and I'm going to run out application

00:05:38.350 --> 00:05:42.650
as a standalone jar file that's going to save a lot of effort,

00:05:42.650 --> 00:05:48.150
reload the page and type in something.

00:05:48.150 --> 00:05:51.910
Let's go back and take a look at the console,

00:05:51.910 --> 00:05:54.950
and there you have all those messages.

00:05:54.950 --> 00:06:03.340
So pre handle came into picture before the controller and right after finishing deacon

00:06:03.340 --> 00:06:04.150
Dollar logic.

00:06:04.150 --> 00:06:06.390
We have post handle and and then,

00:06:06.390 --> 00:06:07.850
after they cost is served,

00:06:07.850 --> 00:06:10.850
we have after completion as well.

00:06:10.850 --> 00:06:19.740
Now let's try to written falls here and see what's going to happen.

00:06:19.740 --> 00:06:48.100
Let me go back to the Broza and Control is not called because we were returning faults pre

00:06:48.100 --> 00:06:49.570
handle and that's it.

00:06:49.570 --> 00:06:51.150
Hope it makes sense.

