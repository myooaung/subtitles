WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.130
one of the greatest features or spring boot is its ability to auto configure beans.

00:00:05.130 --> 00:00:05.780
For us,

00:00:05.780 --> 00:00:09.920
depending on the libraries are the dependence is that we had in our project.

00:00:09.920 --> 00:00:11.140
However,

00:00:11.140 --> 00:00:12.910
in large scale applications,

00:00:12.910 --> 00:00:13.720
dull,

00:00:13.720 --> 00:00:18.580
oppose may come across with scenarios where springboard auto configuration may not function

00:00:18.580 --> 00:00:19.750
as expected.

00:00:19.750 --> 00:00:20.960
I mean,

00:00:20.960 --> 00:00:21.600
as a dollar,

00:00:21.600 --> 00:00:25.190
per you would expect certain outer configurations to take place.

00:00:25.190 --> 00:00:27.650
More than springboard doesn't configure them.

00:00:27.650 --> 00:00:31.060
In which case you might want to take a look at what's happening.

00:00:31.060 --> 00:00:32.350
What's going wrong.

00:00:32.350 --> 00:00:38.250
So spring boot actuator comes with an endpoint that would help you take a look at all the

00:00:38.250 --> 00:00:44.730
list off configurations done by spring boot and list off confirmation that are not done by

00:00:44.730 --> 00:00:45.550
spring boot.

00:00:45.550 --> 00:00:48.190
And in order to understand this,

00:00:48.190 --> 00:00:51.850
you to have some understanding on how the auto configuration works.

00:00:51.850 --> 00:00:56.850
But that's definitely something that it's not worth exploring any deep.

00:00:56.850 --> 00:01:02.640
But just for the sake off understanding this endpoint and have you as a dollop,

00:01:02.640 --> 00:01:06.890
you can actually use this endpoint to sort of understand the configurations.

00:01:06.890 --> 00:01:11.500
You can explore the context well.

00:01:11.500 --> 00:01:11.790
First,

00:01:11.790 --> 00:01:16.920
we're going to send a request to the same point it would get back with the the following

00:01:16.920 --> 00:01:20.230
response on the contents.

00:01:20.230 --> 00:01:23.350
You'll see all the list off application contexts.

00:01:23.350 --> 00:01:27.830
You can have more than one in all cases,

00:01:27.830 --> 00:01:29.650
just one application context.

00:01:29.650 --> 00:01:32.850
When you talk about these separate sections.

00:01:32.850 --> 00:01:34.110
Positive matches,

00:01:34.110 --> 00:01:34.870
negative matches,

00:01:34.870 --> 00:01:35.650
etcetera.

00:01:35.650 --> 00:01:37.870
But let's take a look at,

00:01:37.870 --> 00:01:38.770
for example,

00:01:38.770 --> 00:01:48.550
did a source and under paused to matches.

00:01:48.550 --> 00:01:50.130
And if you remember,

00:01:50.130 --> 00:01:54.240
Insider Project wouldn't configure the data source ourselves.

00:01:54.240 --> 00:01:59.010
We just added the JP dependency and history database dependency,

00:01:59.010 --> 00:02:04.150
and we expected spring boot to configure the data source for us,

00:02:04.150 --> 00:02:05.350
and sure enough,

00:02:05.350 --> 00:02:06.470
it has done it.

00:02:06.470 --> 00:02:08.950
And thats where this bottle depots two matches.

00:02:08.950 --> 00:02:10.690
If you explore,

00:02:10.690 --> 00:02:18.630
you would be able to see on what conditions spring good has configured the data source for

00:02:18.630 --> 00:02:19.100
us.

00:02:19.100 --> 00:02:23.160
And here it say's condition on class.

00:02:23.160 --> 00:02:27.250
This is an addition that is part of the libraries that included,

00:02:27.250 --> 00:02:35.190
and what this means is we need the following classes like we need a data source,

00:02:35.190 --> 00:02:37.850
are embedded database type,

00:02:37.850 --> 00:02:44.550
has bottle for class body only then they're so sort of configuration is possible.

00:02:44.550 --> 00:02:47.850
So since this condition is met,

00:02:47.850 --> 00:02:50.680
since we added all the required dependencies,

00:02:50.680 --> 00:02:54.650
Springboard was able to create the data source for us.

00:02:54.650 --> 00:02:56.790
However,

00:02:56.790 --> 00:03:03.260
she explored the negative matches would come across with some beans that are not configured

00:03:03.260 --> 00:03:06.520
by spring boot understands.

00:03:06.520 --> 00:03:10.170
Let me search for mongo db.

00:03:10.170 --> 00:03:14.900
This is something that we haven't added as part ofour dependencies.

00:03:14.900 --> 00:03:19.050
And so there are certain beans whose conditions are not met.

00:03:19.050 --> 00:03:23.020
So you don't see anything under positive matches.

00:03:23.020 --> 00:03:30.090
All you would see our list off configurations under negative matches.

00:03:30.090 --> 00:03:32.560
And if you explore one of these,

00:03:32.560 --> 00:03:41.830
you would notice that springboard didn't configure for mongo db because the following

00:03:41.830 --> 00:03:45.690
classes are not found in the class part.

00:03:45.690 --> 00:03:48.910
And that's obvious because we haven't included any dependence.

00:03:48.910 --> 00:03:56.900
Is that has something to do with mongo db I hope you're getting my point.

00:03:56.900 --> 00:03:59.690
Hope it makes ends.

