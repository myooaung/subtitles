WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.190
Okay,

00:00:01.190 --> 00:00:04.710
let's take a look at how we can handle exceptions in case offspring boot.

00:00:04.710 --> 00:00:07.490
We pretty much have the same code we have.

00:00:07.490 --> 00:00:12.090
The exact same controller has the last the controller advice class,

00:00:12.090 --> 00:00:14.190
with the exception handler mattered.

00:00:14.190 --> 00:00:17.590
Everything is similar to our previous example,

00:00:17.590 --> 00:00:21.570
but the difference is in our previous approach,

00:00:21.570 --> 00:00:27.950
we had to set this flag off dispatcher so lead to true in order to throw this exception.

00:00:27.950 --> 00:00:34.590
But in case Offspring boot wouldn't introduce a class like this or we don't have any rebel

00:00:34.590 --> 00:00:35.580
or xml file.

00:00:35.580 --> 00:00:38.230
When we're declaring the dispatcher sold it,

00:00:38.230 --> 00:00:42.550
how are we going to set this flag in case offspring booed?

00:00:42.550 --> 00:00:43.440
Well,

00:00:43.440 --> 00:00:46.050
the answer is application don't properties,

00:00:46.050 --> 00:00:49.960
and it's going to recite inside the resources folder,

00:00:49.960 --> 00:00:53.250
and it would be identified by spring framework automatically.

00:00:53.250 --> 00:00:56.150
But it has to be with the same name application,

00:00:56.150 --> 00:00:57.170
not properties,

00:00:57.170 --> 00:01:01.590
and this would be auto generated if you've created your project using spring to suit,

00:01:01.590 --> 00:01:05.950
otherwise you have to manually create a file with the exact same name.

00:01:05.950 --> 00:01:07.990
And remember,

00:01:07.990 --> 00:01:10.750
it has to go inside the resources folder,

00:01:10.750 --> 00:01:18.030
and here is where I'm actually providing are setting that flag throw exception if no

00:01:18.030 --> 00:01:20.150
handler found to true.

00:01:20.150 --> 00:01:22.340
Along with that,

00:01:22.340 --> 00:01:26.250
we also need to set this flag toe falls,

00:01:26.250 --> 00:01:30.040
which means we're deserving the default resource handling.

00:01:30.040 --> 00:01:33.130
And that's pretty much all you have to do.

00:01:33.130 --> 00:01:37.180
But let's talk a little bit about this file applications or properties.

00:01:37.180 --> 00:01:44.510
If you do a quick Google search on application or properties in spring,

00:01:44.510 --> 00:01:50.300
you would come across with the link that points to Doc's not spring that I will.

00:01:50.300 --> 00:01:57.690
And here you can see all the default values that would go inside that file by default.

00:01:57.690 --> 00:01:59.830
And if you want,

00:01:59.830 --> 00:02:00.280
All right,

00:02:00.280 --> 00:02:01.650
any off this properties,

00:02:01.650 --> 00:02:03.160
he can do so,

00:02:03.160 --> 00:02:04.690
and that's exactly what we have done.

00:02:04.690 --> 00:02:05.990
For example,

00:02:05.990 --> 00:02:06.510
if you change,

00:02:06.510 --> 00:02:09.580
the default has to report to something else.

00:02:09.580 --> 00:02:14.170
You just have to copy this property and thought off,

00:02:14.170 --> 00:02:18.350
Override it right here.

00:02:18.350 --> 00:02:21.000
Likewise,

00:02:21.000 --> 00:02:24.870
being providers a host off such defaults,

00:02:24.870 --> 00:02:30.030
and you would find conflagrations for pretty much all that acknowledges supported by spring

00:02:30.030 --> 00:02:30.510
boot.

00:02:30.510 --> 00:02:34.990
You can even write your own properties and then read them in your application.

00:02:34.990 --> 00:02:41.180
We're going to talk about all that stuff when we talk about externalized configurations,

00:02:41.180 --> 00:02:44.560
so we need to hold.

00:02:44.560 --> 00:02:49.540
Until that point but currently for our purpose.

00:02:49.540 --> 00:02:52.740
These are the couple of properties that we're concerned with.

00:02:52.740 --> 00:02:56.750
Let's save the file and run our application.

00:02:56.750 --> 00:03:18.550
And if you notice what has not changed to 80 81 let's go to our application and try toe

00:03:18.550 --> 00:03:21.580
reload.

00:03:21.580 --> 00:03:26.950
Oh,

00:03:26.950 --> 00:03:27.240
sorry.

00:03:27.240 --> 00:03:29.750
That's supposed to be anyone.

00:03:29.750 --> 00:03:34.740
Let's enter something here and some of the dreary,

00:03:34.740 --> 00:03:37.790
but we didn't see that page populated.

00:03:37.790 --> 00:03:43.750
Let's take a look at the gold and make sure everything is okay.

00:03:43.750 --> 00:03:59.670
Let's go back to our controller logic and we seem to be throwing a wrong exception is

00:03:59.670 --> 00:04:11.350
supposed to be Null Pointer exception that save it and read on the program.

00:04:11.350 --> 00:04:23.050
That's reload the page and you see it working.

00:04:23.050 --> 00:04:25.430
Now.

00:04:25.430 --> 00:04:31.080
Let's try to access a resource that is not present and you would say the same bitch getting

00:04:31.080 --> 00:04:31.950
populated.

00:04:31.950 --> 00:04:34.310
I hope it makes sense.

00:04:34.310 --> 00:04:35.100
I'll see you soon

