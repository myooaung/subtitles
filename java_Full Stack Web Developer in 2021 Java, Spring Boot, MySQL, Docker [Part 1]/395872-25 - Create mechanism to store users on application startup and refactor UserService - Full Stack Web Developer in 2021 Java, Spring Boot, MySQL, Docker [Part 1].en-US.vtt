WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:09.800
What we want to do now is toe have somehow least off users at application startup.

00:00:09.800 --> 00:00:16.720
Since you know that we don't take into account er users list anymore and by default we

00:00:16.720 --> 00:00:21.240
don't have any user set in tow r H two database.

00:00:21.240 --> 00:00:30.710
So we need to somehow get rid off this users list.

00:00:30.710 --> 00:00:31.640
So for now,

00:00:31.640 --> 00:00:32.800
let's commented.

00:00:32.800 --> 00:00:41.790
And that's also removed this state months since they are not required anymore,

00:00:41.790 --> 00:00:43.850
Really go on the,

00:00:43.850 --> 00:00:47.630
um source main job.

00:00:47.630 --> 00:00:52.870
Are you create a new package called Calm?

00:00:52.870 --> 00:00:55.120
That component?

00:00:55.120 --> 00:00:57.600
Let's call it component says.

00:00:57.600 --> 00:00:58.190
Basically,

00:00:58.190 --> 00:00:59.250
this will be,

00:00:59.250 --> 00:00:59.950
ah,

00:00:59.950 --> 00:01:06.330
component that will run automatically at the application startup.

00:01:06.330 --> 00:01:08.800
I will create a new class.

00:01:08.800 --> 00:01:18.850
This will be called load Users in DB okay,

00:01:18.850 --> 00:01:27.190
and this class were required to implement Cole Mont.

00:01:27.190 --> 00:01:30.970
Line Runner.

00:01:30.970 --> 00:01:36.820
Seems if a class implements this common learned runner,

00:01:36.820 --> 00:01:40.930
it will automatically Iran at application startup.

00:01:40.930 --> 00:01:49.290
We need to tell spring that this is a component so that it will be taken into account and

00:01:49.290 --> 00:02:02.450
we need to also injector private user depository using the photo wire,

00:02:02.450 --> 00:02:03.930
the annotation.

00:02:03.930 --> 00:02:19.650
Let's importance out and over here we can copy paste this users and also removed this state

00:02:19.650 --> 00:02:29.660
month since we don't use it anymore and go back to the load users in the big class and this

00:02:29.660 --> 00:02:41.750
just based things out now we need to first import the user and we see that we don't need

00:02:41.750 --> 00:02:49.400
any more this i d perimeter to be set up on the constructor.

00:02:49.400 --> 00:02:54.420
Since this will be automatically handled by the spring data,

00:02:54.420 --> 00:02:55.250
G p A.

00:02:55.250 --> 00:03:05.420
We also need to spread the move This set I d method and we're not able.

00:03:05.420 --> 00:03:12.950
We're now able to remove this counter and use their object.

00:03:12.950 --> 00:03:15.350
It is in a good state.

00:03:15.350 --> 00:03:23.490
Now that's also remove this user spliced que remove the counter.

00:03:23.490 --> 00:03:26.040
Another user object in a good state.

00:03:26.040 --> 00:03:32.750
Good doing some some of the factory ization now.

00:03:32.750 --> 00:03:35.320
Okay,

00:03:35.320 --> 00:03:38.000
so we have four users created.

00:03:38.000 --> 00:03:44.840
We need toe add all of them under our user stable,

00:03:44.840 --> 00:03:47.850
using the user depository save operation.

00:03:47.850 --> 00:03:50.950
So user reports stories say user,

00:03:50.950 --> 00:04:00.850
I will copy paste the state month and will have all user set up in our user reports story.

00:04:00.850 --> 00:04:07.750
Good things Looks looks good.

00:04:07.750 --> 00:04:08.290
Now,

00:04:08.290 --> 00:04:14.880
an important statement is to add the transaction annotation each and every time we have

00:04:14.880 --> 00:04:22.050
operations set up into our service or component operations related to our database.

00:04:22.050 --> 00:04:29.510
So all all this operation inside our own method will be executed in tow a transaction.

00:04:29.510 --> 00:04:31.230
Also,

00:04:31.230 --> 00:04:38.830
we can add the transactional annotation under our service method so that each and every

00:04:38.830 --> 00:04:46.250
operation from the service method will be executive in a transaction.

00:04:46.250 --> 00:04:53.150
Okay,

00:04:53.150 --> 00:04:55.250
And let's start the application.

00:04:55.250 --> 00:05:08.220
Okay?

00:05:08.220 --> 00:05:10.150
The application is starting now.

00:05:10.150 --> 00:05:19.030
H the consul dialect they will has been created and important.

00:05:19.030 --> 00:05:23.070
You can see four insert statements that will basically insert.

00:05:23.070 --> 00:05:26.490
Are our users in tow in tow?

00:05:26.490 --> 00:05:28.670
The user stable.

00:05:28.670 --> 00:05:32.850
So now if we do a find all operation,

00:05:32.850 --> 00:05:41.650
we can see that the users are present into our database in they are extracted here.

00:05:41.650 --> 00:05:51.210
So we have four users we can even involved are fine by the a p I.

00:05:51.210 --> 00:05:52.580
That's great.

00:05:52.580 --> 00:05:53.350
It works.

00:05:53.350 --> 00:05:57.210
Okay,

00:05:57.210 --> 00:06:10.700
We can do ah and use our e p I toe on status gold and invoke once again the final ap I and

00:06:10.700 --> 00:06:25.540
we can see the newly created user maybe do another test on Ah update user ap I You know

00:06:25.540 --> 00:06:31.050
that the newly created user has i d had i d five.

00:06:31.050 --> 00:06:36.070
It seems that it's worked as expected.

00:06:36.070 --> 00:06:41.850
Let's check once again cornetto our age doing memory database.

00:06:41.850 --> 00:06:55.990
Let's do a select from users and we can see that the less the less user has.

00:06:55.990 --> 00:06:56.350
Ah,

00:06:56.350 --> 00:06:57.190
14.

00:06:57.190 --> 00:06:58.210
Amos Alexandra.

00:06:58.210 --> 00:07:10.610
We can see that the delete operation also works as expected and the final will have now

00:07:10.610 --> 00:07:11.750
four users.

00:07:11.750 --> 00:07:14.350
Since the previous one has been deleted,

00:07:14.350 --> 00:07:19.550
select all users.

