WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.850
as part of this video,

00:00:02.850 --> 00:00:05.950
I would like to move the application under docker Environment.

00:00:05.950 --> 00:00:11.230
Please note that you need tohave tucker install and configure on your environment as this

00:00:11.230 --> 00:00:13.300
video will focus only to emigrate.

00:00:13.300 --> 00:00:22.440
The application under Dr So I created the documentation file that you can follow and the

00:00:22.440 --> 00:00:30.300
initial step will be to create a network for both the containers for my school and also our

00:00:30.300 --> 00:00:31.770
application toe properly.

00:00:31.770 --> 00:00:33.350
Communicate with each other.

00:00:33.350 --> 00:00:48.350
So let's copy Paste the first comment that will create the network as the next step.

00:00:48.350 --> 00:00:52.250
We need to create a container to run my Skrill in tow.

00:00:52.250 --> 00:00:54.100
Four days.

00:00:54.100 --> 00:01:00.750
I want to hop docker dot com and typing my school to search for the my school image.

00:01:00.750 --> 00:01:12.720
Now we can create this container is Zinkhan Name my school database The network you resorts

00:01:12.720 --> 00:01:21.480
my school db We can set up some environment specific properties we need to use the My

00:01:21.480 --> 00:01:25.410
school database has demo since if you recall,

00:01:25.410 --> 00:01:27.710
use the demo as the data source,

00:01:27.710 --> 00:01:28.300
you are out,

00:01:28.300 --> 00:01:37.550
um I scwill image and for the version will use the eight person off the my school image.

00:01:37.550 --> 00:01:44.810
Let's typed in this comment and run it.

00:01:44.810 --> 00:01:50.750
This will create a container to run my school in tow.

00:01:50.750 --> 00:01:54.450
This will run off course in a demon mode.

00:01:54.450 --> 00:01:56.270
You saw the miners.

00:01:56.270 --> 00:01:57.240
The flag,

00:01:57.240 --> 00:02:01.000
they should be up,

00:02:01.000 --> 00:02:01.650
were running.

00:02:01.650 --> 00:02:07.490
And now the next step is to update our project for the spring.

00:02:07.490 --> 00:02:13.680
That asserts you are ill to use the my skill database that we set up for my school

00:02:13.680 --> 00:02:14.350
container.

00:02:14.350 --> 00:02:16.820
So let's do this.

00:02:16.820 --> 00:02:20.850
I went to the application properties,

00:02:20.850 --> 00:02:26.420
and you can see that I type in my school database instead off local host and the

00:02:26.420 --> 00:02:27.450
corresponding port.

00:02:27.450 --> 00:02:33.410
Now we need to navigate toe our projects structure,

00:02:33.410 --> 00:02:41.740
see the demo and typing in vain,

00:02:41.740 --> 00:02:47.350
clean package minus D skip test that will build our project.

00:02:47.350 --> 00:02:57.990
Okay,

00:02:57.990 --> 00:03:02.820
build success as the next step.

00:03:02.820 --> 00:03:05.350
We need to create a docker file for our project.

00:03:05.350 --> 00:03:11.650
So I went to in created this docker file under our project.

00:03:11.650 --> 00:03:16.150
Let's look at the doctor False structure.

00:03:16.150 --> 00:03:20.460
So I'm starting from the base image open J gate.

00:03:20.460 --> 00:03:21.150
That is ah,

00:03:21.150 --> 00:03:24.150
specific job image on docker hop.

00:03:24.150 --> 00:03:28.550
We can search for it here.

00:03:28.550 --> 00:03:31.430
Let's type in open J d.

00:03:31.430 --> 00:03:31.850
K.

00:03:31.850 --> 00:03:46.250
I'll copy from the Koran Project Target and the corresponding jar file.

00:03:46.250 --> 00:03:52.950
This jar file was generated when we invoked the Indian Clean Package Command.

00:03:52.950 --> 00:03:54.750
You can see it here,

00:03:54.750 --> 00:04:03.050
and the final comment is to start our jar file.

00:04:03.050 --> 00:04:08.850
Since we have the docker file in place,

00:04:08.850 --> 00:04:11.660
we can create an image from this Dakhil.

00:04:11.660 --> 00:04:21.450
While we can use this comment that will create an image called users Image.

00:04:21.450 --> 00:04:39.450
So let's copy paste this comment and typing here.

00:04:39.450 --> 00:04:45.370
This will create our image for our arrest.

00:04:45.370 --> 00:04:49.650
Ap I project using the docker file that I just showed you.

00:04:49.650 --> 00:04:58.940
We can list the images he was in docker images.

00:04:58.940 --> 00:04:59.450
Comment.

00:04:59.450 --> 00:05:06.850
You can see that the images in place users image.

00:05:06.850 --> 00:05:12.910
Now we need to create a container to run our image inside.

00:05:12.910 --> 00:05:14.770
So Dr Ron,

00:05:14.770 --> 00:05:17.400
minus the the name off the container,

00:05:17.400 --> 00:05:19.050
will be users Container.

00:05:19.050 --> 00:05:27.360
It will run in the same network as the My School and will be in the port 80 80 external

00:05:27.360 --> 00:05:34.350
import 80 80 internal toward Docker environment and will start for on the user's image.

00:05:34.350 --> 00:05:40.800
Dallas based this comment,

00:05:40.800 --> 00:05:48.550
and now we have a container set up for our application,

00:05:48.550 --> 00:05:53.890
also that were around in the same network as the My school container,

00:05:53.890 --> 00:05:59.350
who can see both containers happened running here.

00:05:59.350 --> 00:06:09.480
And we can also check the locks for our application container using the container

00:06:09.480 --> 00:06:10.410
identifier.

00:06:10.410 --> 00:06:22.350
You can see that the application has started under a container using docker environment.

00:06:22.350 --> 00:06:24.850
Last but not least,

00:06:24.850 --> 00:06:32.350
we need to update all our resources Toby into our docker corresponding i p address.

00:06:32.350 --> 00:06:44.880
So let's around an example to see that the application will run under the doctor

00:06:44.880 --> 00:06:45.850
environment now.

