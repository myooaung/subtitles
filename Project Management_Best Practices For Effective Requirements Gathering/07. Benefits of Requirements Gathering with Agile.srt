1
00:00:00,940 --> 00:00:03,940
Now let's emphasize the benefits of requirements

2
00:00:03,940 --> 00:00:08,040
gathering in an Agile environment.

3
00:00:08,040 --> 00:00:12,790
As you have already realized, requirements gathering with Agile is different.

4
00:00:12,790 --> 00:00:15,360
Let's emphasize two Agile principles,

5
00:00:15,360 --> 00:00:20,290
highest priorities to satisfy the customer and welcome changing requirements,

6
00:00:20,290 --> 00:00:21,820
even late in the process.

7
00:00:21,820 --> 00:00:25,410
Those will drive the underpinning of any Agile or Lean

8
00:00:25,410 --> 00:00:28,610
requirements development process by being flexible,

9
00:00:28,610 --> 00:00:31,840
that is adaptable to change, interactive with the customer,

10
00:00:31,840 --> 00:00:33,150
and just‑in‑time.

11
00:00:33,150 --> 00:00:35,400
For those not familiar with just‑in‑time,

12
00:00:35,400 --> 00:00:40,550
or JIT, it is basically, don't do anything until right before you need it.

13
00:00:40,550 --> 00:00:45,020
And in our case, it means don't write detailed requirements until you need to.

14
00:00:45,020 --> 00:00:48,400
If you write them early and wait four months until you develop,

15
00:00:48,400 --> 00:00:51,240
they will likely be only 80% correct, if you're lucky.

16
00:00:51,240 --> 00:00:54,400
So writing requirements too early can be a waste.

17
00:00:54,400 --> 00:00:55,780
This doesn't mean, though,

18
00:00:55,780 --> 00:00:59,240
writing high‑level epics or high‑level user stories early,

19
00:00:59,240 --> 00:01:01,790
to at least put a frame around a requirement,

20
00:01:01,790 --> 00:01:02,530
is a waste.

21
00:01:02,530 --> 00:01:06,740
You need to decide what makes the best sense to you and what level of

22
00:01:06,740 --> 00:01:12,540
requirements and detail requirements you need to do and when.

23
00:01:12,540 --> 00:01:14,660
Let's take a moment to look at the different

24
00:01:14,660 --> 00:01:17,320
adaptive methods commonly used today.

25
00:01:17,320 --> 00:01:20,250
You can see that Scrum, or a variation of Scrum,

26
00:01:20,250 --> 00:01:23,090
accounts for over 70% of practitioners,

27
00:01:23,090 --> 00:01:26,380
so we'll take the next slide to quickly give you the highlights of Scrum.

28
00:01:26,380 --> 00:01:30,160
If you are curious about other statistics around Agile Scrum and Lean,

29
00:01:30,160 --> 00:01:34,540
check out the reference below from the 13th Annual State of Agile Report.

30
00:01:34,540 --> 00:01:37,840
It's quite interesting.

31
00:01:37,840 --> 00:01:40,490
The most popular of all the Agile project management

32
00:01:40,490 --> 00:01:44,160
methods and approaches is Scrum, and I like it a lot.

33
00:01:44,160 --> 00:01:46,360
Scrum uses the concept of a backlog,

34
00:01:46,360 --> 00:01:49,140
which is a prioritized list of all things that need

35
00:01:49,140 --> 00:01:50,900
to be completed within a project.

36
00:01:50,900 --> 00:01:55,340
A backlog is comprised of mostly user stories, but again, it can be anything.

37
00:01:55,340 --> 00:01:58,940
A user story is a high‑level definition of a requirement.

38
00:01:58,940 --> 00:02:00,570
Now that's what it is in the perfect world,

39
00:02:00,570 --> 00:02:04,660
but many times the backlog is loaded full of very fuzzy requirements,

40
00:02:04,660 --> 00:02:07,500
and it is up to you and your job to try and reduce

41
00:02:07,500 --> 00:02:10,010
those into understandable user stories.

42
00:02:10,010 --> 00:02:12,000
Scrum has some predefined rules.

43
00:02:12,000 --> 00:02:15,300
There's the Scrum master, who really facilitates the Scrum process,

44
00:02:15,300 --> 00:02:17,540
but does not do any analysis or development.

45
00:02:17,540 --> 00:02:19,440
Now, I have a ton of opinions on this role.

46
00:02:19,440 --> 00:02:20,650
Anyway, moving on.

47
00:02:20,650 --> 00:02:23,040
the product owner is the focal point for all

48
00:02:23,040 --> 00:02:25,220
requirements and all backlog priorities.

49
00:02:25,220 --> 00:02:29,360
Another role, pretty large role, is the multi‑skilled developer team.

50
00:02:29,360 --> 00:02:32,260
Now, besides being populated with technical engineers,

51
00:02:32,260 --> 00:02:34,680
business analysts can be on this team as well.

52
00:02:34,680 --> 00:02:37,120
That is why I use the term multi‑skilled.

53
00:02:37,120 --> 00:02:40,240
So any skills that are needed for this team will join up.

54
00:02:40,240 --> 00:02:41,130
Timeboxing.

55
00:02:41,130 --> 00:02:43,970
A timebox is just that, a box of time.

56
00:02:43,970 --> 00:02:47,000
That is a limited amount of time for a Scrum event.

57
00:02:47,000 --> 00:02:50,040
And there are many Scrum events, one of which is the stand‑ups.

58
00:02:50,040 --> 00:02:54,200
Stand‑ups are timeboxed to be no more than 10 or 15 minutes, for example.

59
00:02:54,200 --> 00:02:57,100
But again, you can decide on the length of your timebox.

60
00:02:57,100 --> 00:02:57,920
Sprints.

61
00:02:57,920 --> 00:03:00,840
The team will get a fixed amount of work done in a sprint.

62
00:03:00,840 --> 00:03:05,910
Sprints are typically two or three weeks, so it's a two or three‑week timebox.

63
00:03:05,910 --> 00:03:09,620
And the team does sprint after sprint, maybe for months or even years.

64
00:03:09,620 --> 00:03:11,550
Those are iterations.

65
00:03:11,550 --> 00:03:12,680
Sprint planning.

66
00:03:12,680 --> 00:03:16,140
Sprint planning is another Scrum timeboxed event,

67
00:03:16,140 --> 00:03:19,290
and it looks at the backlog requirements and determines which items in

68
00:03:19,290 --> 00:03:22,040
the backlog are to be worked in the next sprint.

69
00:03:22,040 --> 00:03:24,000
I have barely touched on Scrum,

70
00:03:24,000 --> 00:03:27,290
so you might want to check out my class on sprint planning titled,

71
00:03:27,290 --> 00:03:31,740
Developing Effective Agile Sprint Plans.

72
00:03:31,740 --> 00:03:35,090
Now let's apply some of what we learned to your analysis work.

73
00:03:35,090 --> 00:03:38,000
Let's see what discovery iterations might look like.

74
00:03:38,000 --> 00:03:40,750
To mitigate the issue of how much and when,

75
00:03:40,750 --> 00:03:43,180
consider the first release of the system,

76
00:03:43,180 --> 00:03:47,140
that it's a broad analysis of the requirements and is not software.

77
00:03:47,140 --> 00:03:49,430
Gather any stakeholder guidance, direction,

78
00:03:49,430 --> 00:03:51,850
high‑level scope, and chunky backlog items.

79
00:03:51,850 --> 00:03:53,110
Not too much detail here.

80
00:03:53,110 --> 00:03:55,920
Remember, too much too soon is not Agile.

81
00:03:55,920 --> 00:03:58,770
Consider each iteration of the requirements gathering as an

82
00:03:58,770 --> 00:04:01,580
opportunity to produce more refined requirements.

83
00:04:01,580 --> 00:04:05,840
Provide feedback to your stakeholders and solicit guidance with each iteration.

84
00:04:05,840 --> 00:04:08,650
Here's a simple example of your discovery iterations.

85
00:04:08,650 --> 00:04:11,730
Maybe in iteration 1 you document the vision and capture

86
00:04:11,730 --> 00:04:13,500
epics and high‑level user stories.

87
00:04:13,500 --> 00:04:16,110
In iteration 2, maybe you create workflows,

88
00:04:16,110 --> 00:04:19,030
diagrams, and other high‑level analysis artifacts.

89
00:04:19,030 --> 00:04:22,810
And maybe in iteration 3, create screen prototypes and wireframes.

90
00:04:22,810 --> 00:04:25,650
And iteration 4, maybe create some screen mockups,

91
00:04:25,650 --> 00:04:28,390
data model, and some business specification documents.

92
00:04:28,390 --> 00:04:32,590
After every iteration though, there are reviews with your stakeholders.

93
00:04:32,590 --> 00:04:33,020
Now,

94
00:04:33,020 --> 00:04:35,740
it may be that your findings are such that there is no reason

95
00:04:35,740 --> 00:04:38,630
to move any further forward since there is no return on

96
00:04:38,630 --> 00:04:40,310
investment or value to the company.

97
00:04:40,310 --> 00:04:41,180
That's okay.

98
00:04:41,180 --> 00:04:43,100
Or, it's exactly what they want,

99
00:04:43,100 --> 00:04:46,940
and then you'd begin to assemble a full Agile team to accomplish your

100
00:04:46,940 --> 00:04:50,300
findings and build a complete complement of a development team,

101
00:04:50,300 --> 00:04:51,640
with your participation.

102
00:04:51,640 --> 00:04:54,090
Agile Scrum is not just for making software.

103
00:04:54,090 --> 00:05:00,940
It could be used for making any product, such as a discovery specification.

104
00:05:00,940 --> 00:05:05,840
Let's see how Agile optimizes the return on investment for a company.

105
00:05:05,840 --> 00:05:08,530
Let's compare Waterfall with Adaptive methods.

106
00:05:08,530 --> 00:05:11,970
With Waterfall, the ROI begins at the end,

107
00:05:11,970 --> 00:05:14,680
that is when the software is fully deployed.

108
00:05:14,680 --> 00:05:16,450
That may take some time to get there.

109
00:05:16,450 --> 00:05:20,560
With Adaptive, the ROI begins at the end of the first iteration,

110
00:05:20,560 --> 00:05:24,790
and again at the second iteration, and again at the end of the third generation,

111
00:05:24,790 --> 00:05:26,440
and so forth and so on.

112
00:05:26,440 --> 00:05:29,270
We call that Cumulative Feature Delivery.

113
00:05:29,270 --> 00:05:30,350
As you can see,

114
00:05:30,350 --> 00:05:33,570
the business begins to realize more immediate benefits

115
00:05:33,570 --> 00:05:37,940
and value with Adaptive methods.

116
00:05:37,940 --> 00:05:40,090
Here's an update on the triangle dilemma.

117
00:05:40,090 --> 00:05:43,480
With Waterfall, the dilemma was we have a fixed scope,

118
00:05:43,480 --> 00:05:46,130
and then we determine the schedule and resources.

119
00:05:46,130 --> 00:05:47,880
With Agile, it's flipped around.

120
00:05:47,880 --> 00:05:51,170
We have a fixed date that is the end of each iteration,

121
00:05:51,170 --> 00:05:54,780
and we apply whatever resources to the team as needed.

122
00:05:54,780 --> 00:05:58,020
We also get dependable delivery of working software

123
00:05:58,020 --> 00:05:59,640
at the end of every iteration.

124
00:05:59,640 --> 00:06:02,310
So we have a greatly improved quality, and,

125
00:06:02,310 --> 00:06:04,400
well, that's me on the left being excited.

126
00:06:04,400 --> 00:06:08,410
I love Adaptive methods, I love Agile, and I love Scrum.

127
00:06:08,410 --> 00:06:15,000
It works really, really well and adapts well for any kind of thing you're building.

