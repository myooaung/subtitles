WEBVTT
1
00:00:01.040 --> 00:00:06.100
In this section, we will discuss analyzing the optimal workload composition,

2
00:00:06.100 --> 00:00:07.600
which, simply stated,

3
00:00:07.600 --> 00:00:11.110
is just how will we assign our backlog items into the agile

4
00:00:11.110 --> 00:00:14.600
teams? In the last module, we talked about requirements for

5
00:00:14.600 --> 00:00:17.710
a single product or system, and in this module,

6
00:00:17.710 --> 00:00:20.580
the business unit module, we are talking about broader,

7
00:00:20.580 --> 00:00:24.690
more complex requirements spanning multiple agile teams.

8
00:00:24.690 --> 00:00:25.870
In this situation,

9
00:00:25.870 --> 00:00:32.040
we need to think deeper about assigning user stories to agile teams.

10
00:00:32.040 --> 00:00:32.780
Let's say,

11
00:00:32.780 --> 00:00:37.330
in our business unit, we have our agile team composition of three teams.

12
00:00:37.330 --> 00:00:41.490
One team is on the vehicle order system, another team is supporting two

13
00:00:41.490 --> 00:00:45.250
systems, the order management system and the vehicle allocation system, and a

14
00:00:45.250 --> 00:00:48.100
third team is on the dealer customer support system.

15
00:00:48.100 --> 00:00:53.740
So let's look at an approach to user story assignments.

16
00:00:53.740 --> 00:00:58.800
We need to determine how best to assign our user stories to each of the teams.

17
00:00:58.800 --> 00:01:00.600
Here are our user stories,

18
00:01:00.600 --> 00:01:04.390
and we will need to feed those into a team of teams meeting.

19
00:01:04.390 --> 00:01:08.820
We will assemble the following key participants, the three agile team leaders,

20
00:01:08.820 --> 00:01:13.940
business analysts, product owners, and any others that we deem necessary.

21
00:01:13.940 --> 00:01:17.250
The task of this team at this point is to review user stories,

22
00:01:17.250 --> 00:01:19.620
determine the optimal backlog assignments,

23
00:01:19.620 --> 00:01:24.540
set up ongoing "scrum of scrum" meetings to ensure coordination across teams.

24
00:01:24.540 --> 00:01:27.720
Then the outcome of the meeting, or maybe even more than one meeting,

25
00:01:27.720 --> 00:01:32.290
is the user stories where each color represents a team that the user story

26
00:01:32.290 --> 00:01:35.820
is assigned to, and as new user stories are developed,

27
00:01:35.820 --> 00:01:38.880
the team of teams or the "scrum of scrums" gets together

28
00:01:38.880 --> 00:01:44.140
to coordinate and plan the assignments.

29
00:01:44.140 --> 00:01:46.050
Here you can see the outcome of the meeting.

30
00:01:46.050 --> 00:01:49.960
The orange user stories will be assigned to the vehicle order team, the

31
00:01:49.960 --> 00:01:54.150
blue user stories to the order management and vehicle allocation team, and

32
00:01:54.150 --> 00:01:56.750
the purple to the dealer customer support team.

33
00:01:56.750 --> 00:01:58.820
The outcome of the meeting was a success,

34
00:01:58.820 --> 00:02:03.610
and for ongoing assignments, you'll have a team of teams or a "scrum of

35
00:02:03.610 --> 00:02:08.530
scrums" to continually manage and operate all the user stories coming in

36
00:02:08.530 --> 00:02:13.160
that may be assigned across multiple teams.

37
00:02:13.160 --> 00:02:14.850
In our previous example,

38
00:02:14.850 --> 00:02:19.590
we had existing agile teams and laid out an approach that would work well.

39
00:02:19.590 --> 00:02:23.660
But let's say every existing team is overloaded with work and

40
00:02:23.660 --> 00:02:26.180
we are required to constitute new teams.

41
00:02:26.180 --> 00:02:27.640
How would we do that?

42
00:02:27.640 --> 00:02:32.460
Let's look at three ways we may structure our new teams; user story related,

43
00:02:32.460 --> 00:02:35.830
service related, or a hybrid team. First,

44
00:02:35.830 --> 00:02:40.090
each user story team owns multiple user stories to deliver. This team

45
00:02:40.090 --> 00:02:43.160
focuses on business features and/or user stories.

46
00:02:43.160 --> 00:02:44.730
That is their focus.

47
00:02:44.730 --> 00:02:49.440
The second is each service teams owns multiple services to deliver.

48
00:02:49.440 --> 00:02:52.480
This team focuses on services or components that the

49
00:02:52.480 --> 00:02:55.510
feature or user story teams would consume.

50
00:02:55.510 --> 00:03:00.170
A service team may supply IT infrastructure services, like cloud services,

51
00:03:00.170 --> 00:03:03.030
email, or integration with other backend services,

52
00:03:03.030 --> 00:03:03.790
for example.

53
00:03:03.790 --> 00:03:06.540
Now I have found time and time again that if you split

54
00:03:06.540 --> 00:03:08.430
things like this as I have shown,

55
00:03:08.430 --> 00:03:11.710
there is much less understanding by the service teams

56
00:03:11.710 --> 00:03:14.030
to what the user story teams need.

57
00:03:14.030 --> 00:03:18.800
And I have seen much wasted time integrating the features with backend services.

58
00:03:18.800 --> 00:03:22.850
But I recommend a lot of communication between these two types of teams; the

59
00:03:22.850 --> 00:03:26.090
feature user story team and the service component team.

60
00:03:26.090 --> 00:03:29.400
So, another approach to consider is hybrid.

61
00:03:29.400 --> 00:03:30.670
That is a little of both.

62
00:03:30.670 --> 00:03:35.700
Some teams own multiple user stories and services to deliver. The user

63
00:03:35.700 --> 00:03:39.730
stories will drive the nature and features of the service. Then the team

64
00:03:39.730 --> 00:03:43.410
needs to publish the service and work with the other user story teams to

65
00:03:43.410 --> 00:03:46.080
further enhance each service to meet their needs.

66
00:03:46.080 --> 00:03:50.210
So they have some user stories that initially drive the service offering and

67
00:03:50.210 --> 00:03:53.680
that enhance the service offering to other user story teams.

68
00:03:53.680 --> 00:03:56.840
So, just a thought.

69
00:03:56.840 --> 00:03:58.890
Now let's look at an example.

70
00:03:58.890 --> 00:04:01.290
We have Team 1's backlog.

71
00:04:01.290 --> 00:04:05.330
They are a feature team, and they own multiple features and user stories.

72
00:04:05.330 --> 00:04:07.430
We have Team 2 and its backlog.

73
00:04:07.430 --> 00:04:11.230
They are also a feature team, and they own multiple features and user stories.

74
00:04:11.230 --> 00:04:13.920
And we have Team 3, which is a hybrid team,

75
00:04:13.920 --> 00:04:16.750
which has features and services in its backlog.

76
00:04:16.750 --> 00:04:19.440
Epics are refined into features and user stories,

77
00:04:19.440 --> 00:04:22.180
and the assignments are made following the discussion in the

78
00:04:22.180 --> 00:04:24.540
previous slides where the agile team leaders,

79
00:04:24.540 --> 00:04:28.970
product owners, and business analysts get together to decide who gets what.

80
00:04:28.970 --> 00:04:30.430
Now we have a fourth team,

81
00:04:30.430 --> 00:04:33.840
which is a cloud database service team, S1, that will

82
00:04:33.840 --> 00:04:36.540
provide services to the other three teams,

83
00:04:36.540 --> 00:04:39.460
and their assignments or backlog were also made by the

84
00:04:39.460 --> 00:04:41.700
team of teams. And we have a fifth team,

85
00:04:41.700 --> 00:04:44.970
which is a user interface JavaScript libraries team,

86
00:04:44.970 --> 00:04:47.610
another service team, that would provide services to the

87
00:04:47.610 --> 00:04:51.030
other three teams, and their assignments or backlog were also

88
00:04:51.030 --> 00:04:53.060
made by the team of teams as well.

89
00:04:53.060 --> 00:04:55.910
So we have five teams, two feature teams, two

90
00:04:55.910 --> 00:04:57.800
service teams, and one hybrid team.

91
00:04:57.800 --> 00:05:06.000
This all takes analysis, important analysis, to optimize the development of working software, adding value to the business.

