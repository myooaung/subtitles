WEBVTT
1
00:00:01.040 --> 00:00:06.110
Moving along the timeline, let's talk about adaptive or agile requirements.

2
00:00:06.110 --> 00:00:13.100
The term adaptive is a common descriptor of the agile process and Agile methods.

3
00:00:13.100 --> 00:00:14.400
In the last section,

4
00:00:14.400 --> 00:00:19.210
several innovative ideas have come forward, incremental delivery of work items,

5
00:00:19.210 --> 00:00:20.750
iterative outcomes,

6
00:00:20.750 --> 00:00:24.920
prototyping such as with RAD technologies allowing analysts and

7
00:00:24.920 --> 00:00:27.370
developers to show samples of what they're thinking and

8
00:00:27.370 --> 00:00:31.400
designing and get immediate feedback, also lighter weight

9
00:00:31.400 --> 00:00:33.350
requirements throughout the process.

10
00:00:33.350 --> 00:00:37.060
Still, there are written requirements, but not to the inth degree.

11
00:00:37.060 --> 00:00:41.760
All this sound familiar? This period led way for adaptive requirements

12
00:00:41.760 --> 00:00:46.750
development to take hold. Here is a great quote.

13
00:00:46.750 --> 00:00:51.640
Wouldn't it be great if we could figure out a way to deliver software so fast

14
00:00:51.640 --> 00:00:55.950
that our customers don't have time to change their minds by Tom Poppendieck.

15
00:00:55.950 --> 00:00:59.340
With waterfall development and even spiral and RAD,

16
00:00:59.340 --> 00:01:02.480
there is so much time between the initial requirements and

17
00:01:02.480 --> 00:01:05.240
deployment that the customer has changed their minds a

18
00:01:05.240 --> 00:01:07.510
million times, businesses changed,

19
00:01:07.510 --> 00:01:10.630
the world is just unpredictable, and we are knee

20
00:01:10.630 --> 00:01:12.300
deep in requirements management,

21
00:01:12.300 --> 00:01:15.670
which really isn't adding value to the business at all. With

22
00:01:15.670 --> 00:01:19.490
adaptive or agile processes, we are now drastically shrinking

23
00:01:19.490 --> 00:01:23.500
the time between requirements gathering and deployment. Users

24
00:01:23.500 --> 00:01:24.670
can still change their mind,

25
00:01:24.670 --> 00:01:27.170
but we have a much shorter timeframe to make those

26
00:01:27.170 --> 00:01:31.740
course corrections that we need to make.

27
00:01:31.740 --> 00:01:35.500
The Agile Manifesto is a philosophy by which Agile projects

28
00:01:35.500 --> 00:01:38.190
should follow to produce requirements and systems.

29
00:01:38.190 --> 00:01:41.300
Think of this philosophy as principles by which an analysis

30
00:01:41.300 --> 00:01:43.320
or development method should be measured.

31
00:01:43.320 --> 00:01:46.720
Okay, things of value in requirements and system development.

32
00:01:46.720 --> 00:01:51.060
Let's go through a list of those, process and tools, contract negotiations,

33
00:01:51.060 --> 00:01:55.140
comprehensive documentation, following a plan. In general,

34
00:01:55.140 --> 00:01:58.560
these are good things to follow no matter how we develop requirements and

35
00:01:58.560 --> 00:02:02.060
build systems, but to what degree and relative to what?

36
00:02:02.060 --> 00:02:02.200
Well,

37
00:02:02.200 --> 00:02:06.450
let's see. Here are the things we value more requirements in system development

38
00:02:06.450 --> 00:02:11.110
than what I just stated, individual and interactions over processes and tools,

39
00:02:11.110 --> 00:02:14.540
customer collaboration over contract negotiations,

40
00:02:14.540 --> 00:02:17.550
working software over comprehensive documentation,

41
00:02:17.550 --> 00:02:20.440
responding to change over following a plan.

42
00:02:20.440 --> 00:02:23.510
Now, when some analysts and developers first heard about this,

43
00:02:23.510 --> 00:02:27.130
they incorrectly believe that there was now no need

44
00:02:27.130 --> 00:02:28.780
for any of the items on the right.

45
00:02:28.780 --> 00:02:30.580
This is totally incorrect.

46
00:02:30.580 --> 00:02:35.220
This just means we need to focus on the items on the left more than on the

47
00:02:35.220 --> 00:02:40.220
right. Here is a subset of the core Agile principles,

48
00:02:40.220 --> 00:02:42.590
and you will see how fundamentally different they

49
00:02:42.590 --> 00:02:44.530
are from traditional development.

50
00:02:44.530 --> 00:02:47.480
The highest priority is to satisfy the customer.

51
00:02:47.480 --> 00:02:49.590
We welcome changing requirements.

52
00:02:49.590 --> 00:02:49.830
Yep,

53
00:02:49.830 --> 00:02:52.040
that's hard to believe, but we welcome changing

54
00:02:52.040 --> 00:02:54.520
requirements, even late in the process.

55
00:02:54.520 --> 00:02:58.680
Agile approaches are designed with change in mind and supports change.

56
00:02:58.680 --> 00:03:00.290
This is huge.

57
00:03:00.290 --> 00:03:02.770
Working software is a measure of success,

58
00:03:02.770 --> 00:03:05.780
not milestones and schedule, of course, tell that to the project

59
00:03:05.780 --> 00:03:08.890
managers. Deliver working software frequently,

60
00:03:08.890 --> 00:03:12.240
which is accomplished by early and continuous delivery of

61
00:03:12.240 --> 00:03:15.130
immediately usable requirements and software.

62
00:03:15.130 --> 00:03:17.040
This provides a more flexible approach to

63
00:03:17.040 --> 00:03:19.670
requirements management. Business people,

64
00:03:19.670 --> 00:03:23.430
analysts, and developers work together daily, think

65
00:03:23.430 --> 00:03:26.160
standups. Now there about seven more principles.

66
00:03:26.160 --> 00:03:28.380
These are the five main ones that I like the most.

67
00:03:28.380 --> 00:03:33.840
Please check out the others if you have time. Never forget,

68
00:03:33.840 --> 00:03:38.150
requirements are guaranteed to be uncertain and unpredictable.

69
00:03:38.150 --> 00:03:46.000
That is why you must constantly adapt and replan your work and activities, that's basically agile and that's basically lean.

