1
00:00:01,040 --> 00:00:05,620
Now, let's look at analyzing the optimal agile team composition.

2
00:00:05,620 --> 00:00:10,340
In other words, who should be on these teams?

3
00:00:10,340 --> 00:00:13,930
You want to build each agile team to best complete the requirements,

4
00:00:13,930 --> 00:00:16,870
so you will use your business analysis skills to

5
00:00:16,870 --> 00:00:19,650
influence the optimal agile team composition?

6
00:00:19,650 --> 00:00:22,540
So many companies are organized in the following way.

7
00:00:22,540 --> 00:00:24,650
You have a business unit like engineering,

8
00:00:24,650 --> 00:00:26,070
marketing, sales, manufacturing,

9
00:00:26,070 --> 00:00:29,040
etc., and let's say this business unit is sales and marketing.

10
00:00:29,040 --> 00:00:31,950
And we have an IT organization with developers,

11
00:00:31,950 --> 00:00:35,120
test engineers, user interface and experience engineers,

12
00:00:35,120 --> 00:00:36,440
and business analysts.

13
00:00:36,440 --> 00:00:39,300
Of course, there are other business and IT roles not shown,

14
00:00:39,300 --> 00:00:41,310
but I want to make this example a little easier.

15
00:00:41,310 --> 00:00:45,120
In traditional development, and it still happens today everywhere,

16
00:00:45,120 --> 00:00:48,720
work is given to the IT organization, and the requirements are separated,

17
00:00:48,720 --> 00:00:52,850
and then they're passed down to each department or team separately.

18
00:00:52,850 --> 00:00:55,340
Now, I'm okay with the organization per se,

19
00:00:55,340 --> 00:00:58,190
but not how the work is passed down and assigned.

20
00:00:58,190 --> 00:01:01,240
The better approach is to create horizontal agile teams.

21
00:01:01,240 --> 00:01:03,840
You can see here we have an agile team, F1,

22
00:01:03,840 --> 00:01:07,970
formed by members of 6 vertical groups, and the same here with F2,

23
00:01:07,970 --> 00:01:10,930
another feature team, and the same here with H1,

24
00:01:10,930 --> 00:01:13,430
and this is a hybrid team of features, user stories,

25
00:01:13,430 --> 00:01:14,400
and services.

26
00:01:14,400 --> 00:01:17,330
With this approach, we have removed the functional silos,

27
00:01:17,330 --> 00:01:20,680
and we are much better positioned in adding value to the business.

28
00:01:20,680 --> 00:01:23,790
Multi‑discipline teams are always better.

29
00:01:23,790 --> 00:01:30,440
They're diverse, different points of view, and produce better outcomes.

30
00:01:30,440 --> 00:01:34,060
Let's recap what we just covered and emphasize the benefits.

31
00:01:34,060 --> 00:01:37,250
We organized the requirements users stories by feature team,

32
00:01:37,250 --> 00:01:39,160
service team, or a hybrid team.

33
00:01:39,160 --> 00:01:42,720
We then horizontally created the agile teams by members

34
00:01:42,720 --> 00:01:46,960
of vertical functional organizations, where we need the skills and talents from.

35
00:01:46,960 --> 00:01:50,150
Our two benefits is that we optimize the user story

36
00:01:50,150 --> 00:01:52,060
work packages to the right teams,

37
00:01:52,060 --> 00:01:56,120
and we optimize the agile team membership from the functional organization.

38
00:01:56,120 --> 00:01:59,220
And even another benefit is keeping like people and skills

39
00:01:59,220 --> 00:02:03,480
together in the functional verticals, thus enabling technical growth,

40
00:02:03,480 --> 00:02:06,760
knowledge transfer, and career pathing.

41
00:02:06,760 --> 00:02:10,920
We have covered driving epics to user stories,

42
00:02:10,920 --> 00:02:13,570
assembling the user stories in the backlogs,

43
00:02:13,570 --> 00:02:18,400
and assigning the backlogs to the appropriate agile multi‑functional teams.

44
00:02:18,400 --> 00:02:19,880
Sounds good so far, right?

45
00:02:19,880 --> 00:02:23,140
But it's not quite enough at the business unit or program level.

46
00:02:23,140 --> 00:02:26,180
We need to analyze and develop a roadmap on how

47
00:02:26,180 --> 00:02:28,540
best to release the user stories.

48
00:02:28,540 --> 00:02:31,150
We need to set priorities and plan one of the best

49
00:02:31,150 --> 00:02:33,510
features and user stories to do and win.

50
00:02:33,510 --> 00:02:35,210
So to do that effectively,

51
00:02:35,210 --> 00:02:39,150
we need a roadmap to provide a view we can use to communicate our

52
00:02:39,150 --> 00:02:41,840
objectives to our product owners and stakeholders.

53
00:02:41,840 --> 00:02:43,180
They want to know,

54
00:02:43,180 --> 00:02:46,850
maybe even demand to know, the general idea as to what features

55
00:02:46,850 --> 00:02:49,250
will be provided and when will they be provided.

56
00:02:49,250 --> 00:02:52,990
Roadmaps are pretty basic and consist of planned release dates and a

57
00:02:52,990 --> 00:02:55,480
list of prioritized features and user stories.

58
00:02:55,480 --> 00:02:58,180
It is not in concrete and can be revisited,

59
00:02:58,180 --> 00:02:58,490
say,

60
00:02:58,490 --> 00:03:01,050
every other week or maybe once a month in the team of

61
00:03:01,050 --> 00:03:03,700
teams or scrum of scrum meetings.

62
00:03:03,700 --> 00:03:06,730
And at the program level, we don't have just one stakeholder,

63
00:03:06,730 --> 00:03:09,240
but maybe four or even eight stakeholders,

64
00:03:09,240 --> 00:03:13,140
all competing in negotiating to get their stuff first.

65
00:03:13,140 --> 00:03:16,570
This is why an agile release schedule is essential,

66
00:03:16,570 --> 00:03:20,660
and what I mean by an agile release schedule is that it should not be fixed

67
00:03:20,660 --> 00:03:23,850
but be flexible and adapt to changing business requirements.

68
00:03:23,850 --> 00:03:28,100
Remember, release features span multiple backlogs and agile teams,

69
00:03:28,100 --> 00:03:32,740
thus requiring thoughtful leadership.

70
00:03:32,740 --> 00:03:37,270
Let's look at an example of mapping our backlog items into a release roadmap.

71
00:03:37,270 --> 00:03:38,650
Here's our timeline,

72
00:03:38,650 --> 00:03:41,810
and I have set up R1's features and user stories for

73
00:03:41,810 --> 00:03:45,270
October 14th and then R2 for November 30th,

74
00:03:45,270 --> 00:03:48,900
and lastly, R3's features and user stories for January 15th.

75
00:03:48,900 --> 00:03:50,540
Notice my numbering system.

76
00:03:50,540 --> 00:03:54,620
I give a feature number like F1, followed by the user story numbers.

77
00:03:54,620 --> 00:03:56,580
Because I don't have much space on this slide.

78
00:03:56,580 --> 00:03:59,480
I would follow each user story with the text of the user

79
00:03:59,480 --> 00:04:01,600
story so we know what it means very easily.

80
00:04:01,600 --> 00:04:03,780
And also, if we had multiple epics,

81
00:04:03,780 --> 00:04:06,070
I would add that to the numbering system as well,

82
00:04:06,070 --> 00:04:10,040
like I've shown, E1.F1.US.3.

83
00:04:10,040 --> 00:04:13,400
Each release lists user stories that are from multiple backlogs,

84
00:04:13,400 --> 00:04:16,290
that is, agile teams, so you should track that as well.

85
00:04:16,290 --> 00:04:18,930
Since we gave user stories to the agile teams by

86
00:04:18,930 --> 00:04:20,730
feature number on an earlier slide,

87
00:04:20,730 --> 00:04:23,880
we are already tracking it just by looking at the F or the H number,

88
00:04:23,880 --> 00:04:26,370
F for feature team, or H for hybrid team.

89
00:04:26,370 --> 00:04:28,840
But if a team could have multiple features to implement,

90
00:04:28,840 --> 00:04:31,760
that is multiple user stories, then you want to track those as well,

91
00:04:31,760 --> 00:04:37,020
maybe something like this, E1.F1.US.3, (assigned to T3).

92
00:04:37,020 --> 00:04:37,360
That way,

93
00:04:37,360 --> 00:04:41,560
it's very easy see in the release schedule which team is working on which item,

94
00:04:41,560 --> 00:04:44,230
what the user story is tied to, that is the feature,

95
00:04:44,230 --> 00:04:46,460
with the feature's tied to, that is the epic,

96
00:04:46,460 --> 00:04:47,440
things like that.

97
00:04:47,440 --> 00:04:51,260
You can only do this if you have deep business knowledge and analytical skills,

98
00:04:51,260 --> 00:04:53,610
but it should be done as a team, of course.

99
00:04:53,610 --> 00:04:55,890
Trust me, your product owners, managers,

100
00:04:55,890 --> 00:05:00,280
executives will ask you the following question. When will I get my features?

101
00:05:00,280 --> 00:05:01,790
So you better have a roadmap.

102
00:05:01,790 --> 00:05:05,090
This roadmap is dynamic and agile, that is, priorities

103
00:05:05,090 --> 00:05:10,000
will change as dictated by the business, and you must adapt the release map as needed.

