1
00:00:01,040 --> 00:00:04,770
In our journey from waterfall, let's now look at a few models,

2
00:00:04,770 --> 00:00:08,980
spiral, RAD, and Rational Unified Process, that,

3
00:00:08,980 --> 00:00:13,910
in a sense, they were the prototypes of agile and lean.

4
00:00:13,910 --> 00:00:19,610
Spiral put a real strong placement for earlier requirements.

5
00:00:19,610 --> 00:00:22,690
This model is also known as a discovery‑based model.

6
00:00:22,690 --> 00:00:25,730
Because this model helped answer the early questions

7
00:00:25,730 --> 00:00:28,400
that executives and fiscal people ask, that is,

8
00:00:28,400 --> 00:00:30,030
how much and when,

9
00:00:30,030 --> 00:00:32,700
we learned much faster in the cycle about what it

10
00:00:32,700 --> 00:00:36,440
would cost and how long it would take, but those estimates were indeed softer,

11
00:00:36,440 --> 00:00:38,050
but at least that's a good start.

12
00:00:38,050 --> 00:00:43,040
So in a way, this was a compromise approach.

13
00:00:43,040 --> 00:00:46,490
Rapid application development Has a good ring to it, doesn't it?

14
00:00:46,490 --> 00:00:50,430
Software process model coming on board in the late '80s and early

15
00:00:50,430 --> 00:00:53,470
'90s. It had iterative development and construction.

16
00:00:53,470 --> 00:00:54,680
Well, we like that.

17
00:00:54,680 --> 00:00:56,680
Incrementally increasing feature capabilities.

18
00:00:56,680 --> 00:00:58,220
Well, we like that too.

19
00:00:58,220 --> 00:01:02,100
Also associated or called 4th generation languages,

20
00:01:02,100 --> 00:01:04,710
such as products like NOMAD, FOCUS, and many,

21
00:01:04,710 --> 00:01:05,700
many others.

22
00:01:05,700 --> 00:01:08,870
Speed of deployment and feedback was the primary goal

23
00:01:08,870 --> 00:01:11,140
over performance and capability.

24
00:01:11,140 --> 00:01:13,780
Customers couldn't wait to get data out of the mainframe without

25
00:01:13,780 --> 00:01:16,090
having to wait for long project lifecycles.

26
00:01:16,090 --> 00:01:18,190
They needed data now.

27
00:01:18,190 --> 00:01:22,730
So it was used more for analysis and decision‑making applications,

28
00:01:22,730 --> 00:01:25,610
and not so much for operational transactions, unless

29
00:01:25,610 --> 00:01:27,910
there was really a small amount of data.

30
00:01:27,910 --> 00:01:30,500
So RAD brought the advent of prototyping to

31
00:01:30,500 --> 00:01:33,340
functioning results very quickly indeed.

32
00:01:33,340 --> 00:01:36,710
I was lucky enough to lead a RAD project many years ago.

33
00:01:36,710 --> 00:01:40,690
We developed an HR decision‑making tool in one week.

34
00:01:40,690 --> 00:01:44,160
Yes, it was a bit crude, and it wasn't the best performer,

35
00:01:44,160 --> 00:01:46,090
but we beat the mainframe team.

36
00:01:46,090 --> 00:01:49,820
In fact, the mainframe team was still working on the estimate,

37
00:01:49,820 --> 00:01:51,840
and we were done with our project.

38
00:01:51,840 --> 00:01:54,850
It's things like this that drove users, managers,

39
00:01:54,850 --> 00:02:00,940
and executives to push IT for better ways to do things.

40
00:02:00,940 --> 00:02:05,580
RUP, or Rational Unified Process, began in the late '90s, and is still used

41
00:02:05,580 --> 00:02:09,410
today. Based on the spiral model more than the RAD model,

42
00:02:09,410 --> 00:02:12,440
it applied to large‑scale application development projects,

43
00:02:12,440 --> 00:02:13,990
not small projects, really.

44
00:02:13,990 --> 00:02:17,480
The tools had a really big footprint. Needed to invest in it,

45
00:02:17,480 --> 00:02:19,440
do a lot of training, and things like that.

46
00:02:19,440 --> 00:02:22,000
It embraced the fact that the steps can overlap,

47
00:02:22,000 --> 00:02:23,010
unlike waterfall,

48
00:02:23,010 --> 00:02:25,790
where the steps don't overlap, so that's a lessons learned from

49
00:02:25,790 --> 00:02:29,450
waterfall. And it has the following phases: inception,

50
00:02:29,450 --> 00:02:33,230
elaboration, construction, and transition.

51
00:02:33,230 --> 00:02:37,240
Okay, here are a few more items.

52
00:02:37,240 --> 00:02:40,720
Developing requirements with RUP is certainly better than waterfall, so

53
00:02:40,720 --> 00:02:43,830
here a few more points. Requirements gathering was spread over the

54
00:02:43,830 --> 00:02:48,430
inception and elaboration phases, and RUP embraced requirement changes

55
00:02:48,430 --> 00:02:50,870
throughout all the phases, so that is better,

56
00:02:50,870 --> 00:02:53,730
whereas the waterfall was more like a bolt‑on process.

57
00:02:53,730 --> 00:02:55,100
So if you're curious,

58
00:02:55,100 --> 00:02:58,340
here are some example products that you might want to dig into.

59
00:02:58,340 --> 00:03:03,540
Rational Software Architect, AWS CloudFormation, ER/Studio Data

60
00:03:03,540 --> 00:03:07,540
Architect, erwin Data Modeler, Planview Enterprise One, and

61
00:03:07,540 --> 00:03:09,940
Sparx Systems Enterprise Architect.

62
00:03:09,940 --> 00:03:15,540
You can check these out and see if you have any interest in looking into these.

63
00:03:15,540 --> 00:03:18,370
Here are our historical lessons learned.

64
00:03:18,370 --> 00:03:22,240
We began moving away from big upfront requirements design.

65
00:03:22,240 --> 00:03:25,010
Requirements were now spread across multiple phases.

66
00:03:25,010 --> 00:03:29,510
That's good. We added in a notion of discovery‑based approach, that is,

67
00:03:29,510 --> 00:03:33,840
learn a little, adjust, learn a little more, and then dive into development.

68
00:03:33,840 --> 00:03:36,150
We also began using lighter‑weight documents and

69
00:03:36,150 --> 00:03:39,360
artifacts, such as vision statements, use‑case models,

70
00:03:39,360 --> 00:03:40,660
data models, and others,

71
00:03:40,660 --> 00:03:44,470
which took less time to define and enabled an iterative process to

72
00:03:44,470 --> 00:03:47,370
unfold. So we are starting to show results quicker.

73
00:03:47,370 --> 00:03:55,000
Please also note: technology and tools have changed, which enabled this to happen easier.

