WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.070
in this lecture.

00:00:01.070 --> 00:00:04.130
Let's create this customer Delwar interface.

00:00:04.130 --> 00:00:08.340
So I go to the product Explorer right click on this package.

00:00:08.340 --> 00:00:08.740
Cord out.

00:00:08.740 --> 00:00:12.650
We know that entity and then say new interface.

00:00:12.650 --> 00:00:17.750
But the name of the packages no longer going to be in today it's deal.

00:00:17.750 --> 00:00:21.050
And then I'm gonna take your customer deal,

00:00:21.050 --> 00:00:22.590
Chris Ender.

00:00:22.590 --> 00:00:26.050
And now we have this customer be able interface.

00:00:26.050 --> 00:00:32.750
A deal interface typically has a bunch off crowd operations and a bunch off qualities.

00:00:32.750 --> 00:00:38.660
The current operations are nothing but functions that represent in Third Update.

00:00:38.660 --> 00:00:40.900
Deal it on select statement,

00:00:40.900 --> 00:00:48.220
so see for create retrieve update on D for delete The names and signature of this function

00:00:48.220 --> 00:00:49.270
can be anything off.

00:00:49.270 --> 00:00:52.930
Your choice ultimately will be mapping each of these functions.

00:00:52.930 --> 00:00:55.050
Toe some SQL commands.

00:00:55.050 --> 00:00:58.090
Let's begin by creating a function toe.

00:00:58.090 --> 00:00:59.160
Add a new customer,

00:00:59.160 --> 00:01:04.010
so I'm gonna type your public wide at customer.

00:01:04.010 --> 00:01:04.700
If you want,

00:01:04.700 --> 00:01:06.550
you can call it as create customer.

00:01:06.550 --> 00:01:10.100
Let's receive a customer object over here.

00:01:10.100 --> 00:01:11.390
Let's go arrest customer.

00:01:11.390 --> 00:01:13.700
Put a semi colon because it's an interface.

00:01:13.700 --> 00:01:14.230
Also,

00:01:14.230 --> 00:01:19.050
import customer by pressing command shift or control shift on windows.

00:01:19.050 --> 00:01:21.030
Whenever we call this function,

00:01:21.030 --> 00:01:27.050
we are supposed to supply a customer object on the customer object has these fields.

00:01:27.050 --> 00:01:30.560
It may not contain this idea because it's utter generated.

00:01:30.560 --> 00:01:33.800
So we may have supplied name,

00:01:33.800 --> 00:01:39.710
Citi email or phone on that information should be added to the customer stable.

00:01:39.710 --> 00:01:44.000
So this is where the Eskil mapper comes into picture.

00:01:44.000 --> 00:01:48.770
We're gonna type a skill in third command and matter to this particular function.

00:01:48.770 --> 00:01:49.440
To do that,

00:01:49.440 --> 00:01:56.010
let's go and use an annotation from my bed is called at their it Insert some no press

00:01:56.010 --> 00:01:58.650
command shift for automatically imports.

00:01:58.650 --> 00:02:05.540
And this is gonna take an SQL command as a perimeter on the command is gonna be insert in

00:02:05.540 --> 00:02:06.840
tow customers.

00:02:06.840 --> 00:02:12.070
And since we don't want to supply ivy so we're gonna leave that and then say name Citi

00:02:12.070 --> 00:02:14.990
email and phone values.

00:02:14.990 --> 00:02:18.280
And then we have to give four different values.

00:02:18.280 --> 00:02:23.580
But the values must be picked up from this particular customer object on the video give is

00:02:23.580 --> 00:02:27.820
you say that customer has a field called the name on.

00:02:27.820 --> 00:02:31.970
We have to use that for the column name over here.

00:02:31.970 --> 00:02:33.460
So the way you do it,

00:02:33.460 --> 00:02:34.340
you put a hash,

00:02:34.340 --> 00:02:35.370
and in curly bracket,

00:02:35.370 --> 00:02:39.850
you say name and then for the city Hash city.

00:02:39.850 --> 00:02:41.610
Likewise,

00:02:41.610 --> 00:02:46.050
hash email and then hash four number.

00:02:46.050 --> 00:02:52.440
So my buddies will now assume that this is a field inside this particular perimeter your

00:02:52.440 --> 00:02:53.100
supplied.

00:02:53.100 --> 00:02:55.380
We don't have to do any other thing.

00:02:55.380 --> 00:03:00.430
Similarly assumed that Citi email phone They're all the respective fields coming from this

00:03:00.430 --> 00:03:01.840
particular customer object.

00:03:01.840 --> 00:03:02.790
Likewise,

00:03:02.790 --> 00:03:05.320
Let's also are they get function.

00:03:05.320 --> 00:03:08.800
So I'm gonna take your public customer.

00:03:08.800 --> 00:03:14.340
That's the return type because we want my buddies to give a customer object here Onda

00:03:14.340 --> 00:03:21.790
function name that's got it as get customer by idee and then we're gonna supply an integer

00:03:21.790 --> 00:03:22.760
ID.

00:03:22.760 --> 00:03:23.840
Obviously,

00:03:23.840 --> 00:03:29.900
this has to be matched with select statement and the annotation is a great select important

00:03:29.900 --> 00:03:29.900
.

00:03:29.900 --> 00:03:38.510
And the silica man say select star from customers were ID equals toe once again hash I d.

00:03:38.510 --> 00:03:41.370
Just like the previous case notice.

00:03:41.370 --> 00:03:41.780
Here,

00:03:41.780 --> 00:03:45.530
Star represents all columns often given record.

00:03:45.530 --> 00:03:51.190
And what my body is does is my body is going to execute this statement using Jerry busy

00:03:51.190 --> 00:03:55.820
gets the results it and it knows that there's only one single record because we're using a

00:03:55.820 --> 00:03:59.800
primary key and it gets that record and from that record.

00:03:59.800 --> 00:04:07.690
It takes a column value and then creates a customer object a bit all the fields from that

00:04:07.690 --> 00:04:08.420
particular columns.

00:04:08.420 --> 00:04:12.040
If the column name is not matching the field name in the customer,

00:04:12.040 --> 00:04:12.570
plus,

00:04:12.570 --> 00:04:15.560
then that field will remain none.

00:04:15.560 --> 00:04:18.760
But in case of the columns match the fields.

00:04:18.760 --> 00:04:19.370
In our case,

00:04:19.370 --> 00:04:21.600
all the column names Max the field name.

00:04:21.600 --> 00:04:25.650
Then appropriate values will be copied toe the customer object,

00:04:25.650 --> 00:04:26.990
and at the end of it,

00:04:26.990 --> 00:04:29.060
it's going toe close all the resources,

00:04:29.060 --> 00:04:32.380
fall all the best practices and then give me a customer object.

00:04:32.380 --> 00:04:33.460
Similarly,

00:04:33.460 --> 00:04:37.120
I want to write another function for updating a customer.

00:04:37.120 --> 00:04:44.450
So I'm gonna take your public wide update customer simply supplier customer object.

00:04:44.450 --> 00:04:50.570
And the SQL Command is mab using the moderate update annotation.

00:04:50.570 --> 00:05:01.060
So update customers set name equals two hash name Comma City equals toe Hash City.

00:05:01.060 --> 00:05:02.290
Come on,

00:05:02.290 --> 00:05:08.950
email equals toe hash email One more phone equals toe hash phone.

00:05:08.950 --> 00:05:13.980
But then you have to say where ID equals toe hash.

00:05:13.980 --> 00:05:15.710
I d save it.

00:05:15.710 --> 00:05:22.070
So this SQL Command will be executed with the values will be picked up from the given

00:05:22.070 --> 00:05:23.150
customer object.

00:05:23.150 --> 00:05:27.450
Notice my buddies is gonna handle all kinds of exceptions.

00:05:27.450 --> 00:05:28.380
For example,

00:05:28.380 --> 00:05:33.780
if you're tryingto update a customer or insert a customer with a duplicate email or phone

00:05:33.780 --> 00:05:38.130
number because we're given it as a unique constraints so they will throw in a scale

00:05:38.130 --> 00:05:42.470
exception on my buddies will automatically handle that and read through that as an

00:05:42.470 --> 00:05:44.290
unchecked exception for us.

00:05:44.290 --> 00:05:45.150
Similarly,

00:05:45.150 --> 00:05:46.820
we want toe deliver customers,

00:05:46.820 --> 00:05:48.900
so we're gonna type your public void,

00:05:48.900 --> 00:05:55.250
delete customer on then the perimeter is nothing but the i d off that customer.

00:05:55.250 --> 00:05:57.520
We will be typing at the red,

00:05:57.520 --> 00:06:05.650
deal it and then we'll say you're delete from customers where idea cause toe hash idea.

00:06:05.650 --> 00:06:06.610
Similarly,

00:06:06.610 --> 00:06:10.300
we also like to write one or 2/4 for example,

00:06:10.300 --> 00:06:14.360
Let I want a list off all the customers I can simply type here.

00:06:14.360 --> 00:06:20.240
Public list off customer list is supposed to come from Java util package,

00:06:20.240 --> 00:06:28.400
so I'm gonna type your get all customers semicolon command shift or toe import the list,

00:06:28.400 --> 00:06:30.750
make sure that it is job order duty alert list.

00:06:30.750 --> 00:06:35.230
Onda will also adhere similar select statement.

00:06:35.230 --> 00:06:38.770
I say you're select star from customers.

00:06:38.770 --> 00:06:45.790
Since we don't have a condition or here it's going to get a multiple roast results it and

00:06:45.790 --> 00:06:48.160
then for every row it's going to clear the customer.

00:06:48.160 --> 00:06:54.620
And I said Teoh list object on rendered in the same thing and again listed an interface.

00:06:54.620 --> 00:06:57.960
We get an appropriate implementation decided by my batteries.

00:06:57.960 --> 00:07:03.850
We also read one more quiet over here So public list off customer,

00:07:03.850 --> 00:07:08.500
get customers by city on.

00:07:08.500 --> 00:07:11.500
Let's a string city is what I want to supply.

00:07:11.500 --> 00:07:15.990
I'm gonna copy this and based over here at a fair condition,

00:07:15.990 --> 00:07:20.910
City equals toe Hash City Before we conclude this lecture,

00:07:20.910 --> 00:07:26.350
one important point that we can discuss over here is about this insert statement.

00:07:26.350 --> 00:07:32.790
I noticed that the customer object that we would be supplying may contain only name Citi

00:07:32.790 --> 00:07:33.180
email.

00:07:33.180 --> 00:07:34.520
Phone for the i D.

00:07:34.520 --> 00:07:35.880
For the customer is no,

00:07:35.880 --> 00:07:40.600
but it gets automatically generated because we do have our toe on the scored increment

00:07:40.600 --> 00:07:41.590
property for the I D.

00:07:41.590 --> 00:07:43.760
But when this function is finished,

00:07:43.760 --> 00:07:48.860
execution the customer object that we had given contains ideas.

00:07:48.860 --> 00:07:49.320
No,

00:07:49.320 --> 00:07:51.550
but we want that I need to be automatically.

00:07:51.550 --> 00:07:55.040
It's filled with the art originated ID by default.

00:07:55.040 --> 00:07:55.990
This doesn't happen.

00:07:55.990 --> 00:08:01.990
We may have to add another annotation if you're interested toe copy the auto generated I D

00:08:01.990 --> 00:08:05.350
to the customer object that we have some plate over here.

00:08:05.350 --> 00:08:08.470
Then we die pure underrate options.

00:08:08.470 --> 00:08:10.250
So as the name indicates,

00:08:10.250 --> 00:08:16.050
this is used for providing additional options on one of the option is going used.

00:08:16.050 --> 00:08:17.630
Generated keys.

00:08:17.630 --> 00:08:19.590
It's a bullion somewhere to say true.

00:08:19.590 --> 00:08:23.440
And then we also have to specify the key property.

00:08:23.440 --> 00:08:24.060
Over here.

00:08:24.060 --> 00:08:28.230
Property means the field name to which we want to pass the value.

00:08:28.230 --> 00:08:31.290
So the field in the customer is the key property,

00:08:31.290 --> 00:08:32.070
which is nothing,

00:08:32.070 --> 00:08:34.140
but I only filled,

00:08:34.140 --> 00:08:35.270
which is an integer.

00:08:35.270 --> 00:08:36.970
So with this now,

00:08:36.970 --> 00:08:43.400
every time I supply a customer without an I D to the customer and if the oil customer is

00:08:43.400 --> 00:08:44.650
successfully executed,

00:08:44.650 --> 00:08:48.570
customer will now contend the auto generated idea.

00:08:48.570 --> 00:08:50.570
So that's all for this sector.

00:08:50.570 --> 00:08:51.900
In the next lecture,

00:08:51.900 --> 00:08:56.550
let's write a program to check if all these functions work properly or not.

