WEBVTT

00:02.240 --> 00:07.880
Let's dive into how authentication works in a rect native app. We have the react native app and we

00:07.880 --> 00:09.090
have a server,

00:09.230 --> 00:13.030
the server can be the firebase server, can be your own server,

00:13.310 --> 00:18.170
the server is where we in the end authenticate a user, where we create new users and store them in a

00:18.170 --> 00:24.140
database or where we compare an entered email address and password with the data we have in the database

00:24.140 --> 00:27.580
to decide whether a user did successfully login or not.

00:27.920 --> 00:34.850
So the server typically exposes at least two API endpoints and the react native app sends auth requests

00:35.150 --> 00:42.680
either to create a new user or to sign an existing user in. The server responds with something and you

00:42.680 --> 00:49.250
could think that that something is a session as you use it in a lot of web applications,

00:49.460 --> 00:53.540
there you have a strong connection between the server and the views you render,

00:53.600 --> 01:01.460
so the frontend code which runs. Not so here, just like with single page applications, the react native app

01:01.460 --> 01:03.500
is decoupled from the server,

01:03.710 --> 01:10.280
the server is stateless, it's a restful API and it works standalone, it doesn't care about the individual

01:10.280 --> 01:12.400
app that was connected to it.

01:12.410 --> 01:19.430
So we have no session but a token, a jw token so a json web token to be precise,

01:19.520 --> 01:25.400
that's basically some encoded string or some encoded data that you can also decode on the frontend

01:25.400 --> 01:32.810
so it's not encrypted, just encoded and it contains some information about the user, the validity of the token and

01:32.810 --> 01:33.540
so on

01:33.650 --> 01:34.520
and important,

01:34.880 --> 01:41.480
it's created in a way that only the server can verify whether it's valid or not, this make sure that

01:41.480 --> 01:45.230
you can't just copy the token on the frontend or fake it,

01:45.260 --> 01:50.360
the server can always validate if you are passing it a valid token or not

01:50.630 --> 01:56.750
but before passing the token somewhere, let's see what we do with it on the frontend. This token will

01:56.750 --> 02:00.800
be our key to accessing protected resources on the server,

02:00.800 --> 02:06.320
like for example creating a new place, we want to protect that and only allow it for authenticated user,

02:06.470 --> 02:08.480
that token would be our key.

02:08.660 --> 02:13.070
Therefore we store it on the frontend, in some form of storage,

02:13.160 --> 02:16.210
that is where async storage will become important

02:16.430 --> 02:22.470
and whenever we want to send a request to a protected resource, we attach the token to that request

02:22.700 --> 02:30.050
and as I said, the server can then validate whether the token is well valid, if it is ok and can give

02:30.050 --> 02:34.630
us back the response or possibly deny access.

02:34.630 --> 02:38.620
This is how authentication works in a react native app,

02:38.630 --> 02:43.430
it's exactly the same pattern as in a single page application if you know that

02:43.430 --> 02:45.960
and therefore this is what we will implement here.

02:45.950 --> 02:47.840
Now let's start implementing this

02:47.840 --> 02:54.860
and let's start by connecting our auth screen to our backend so that we can sign a user up and then

02:54.860 --> 03:01.030
also sign the user in. And then we'll step by step add logic to also use the token and so on.
