WEBVTT

00:02.370 --> 00:07.800
Now we're really close to the end of this module therefore we need to make sure that we now dispatch

00:07.800 --> 00:11.370
actions for creating a new product or for updating a product.

00:11.410 --> 00:16.080
And therefore first of all we need to add these actions here in our actions folder.

00:16.210 --> 00:28.830
So export constant here create product like this here create product and then a year old and no identifier

00:28.860 --> 00:38.500
for updating and product with update product and update product like this and create fitting action

00:38.500 --> 00:47.670
creators or create product and now it's up to you how you want a structured is what data you expect

00:47.670 --> 00:50.270
to get when you create a product.

00:50.340 --> 00:56.370
I'm a fan of creating the product really here in the action or in the reducer side.

00:56.490 --> 01:04.590
So I actually expect to get a title here description image you are all in a price let's say and then

01:04.590 --> 01:14.070
I return action OBJECT WHERE TO TYPE IS create product and the product data is simply all that data

01:14.070 --> 01:15.220
merge together.

01:15.450 --> 01:22.710
So here I have my title which is mapped to the title we get as an argument description mapped to description

01:23.340 --> 01:28.230
and therefore we can all use a modern javascript shortcut where if the property name and the value variable

01:28.230 --> 01:31.490
name is the same you can just write it like this.

01:31.530 --> 01:36.810
So it's the same like Price code in price we can just write this here cause that's all the possible

01:36.810 --> 01:38.610
for titling description.

01:38.610 --> 01:45.880
So did we map all these arguments into properties of the same name and is object and if we update a

01:45.880 --> 01:54.460
product that's relatively equal update product so we can generally copy that but there is one important

01:54.460 --> 01:59.920
difference here we all need the idea of the product which needs to change so we get this as an extra

01:59.920 --> 02:08.370
argument and we can store does our action day for in a separate property of our action object now in

02:08.370 --> 02:09.510
the reducer.

02:09.510 --> 02:10.920
We of course need to handle that.

02:10.920 --> 02:20.900
We need to handle the creation and updating so let's add a new case here in the products reducer for

02:20.930 --> 02:28.940
create product and for dad make sure you import create product from actions products and of course one

02:28.940 --> 02:33.740
for updating a product with update product make sure you import that as well.

02:35.970 --> 02:42.300
In create product of course we need to create a new product and I'll store it in a constant here with

02:42.300 --> 02:45.230
the new keyword in the product model we created earlier.

02:45.230 --> 02:51.780
For Dad you just need to make sure you import this product model here from the models folder and that

02:51.780 --> 02:58.260
product here receives an I.D. which for now can generate manually with new data to string to have a

02:58.260 --> 03:04.350
kind of pseudo unique dummy I.D. for the moment later this will be generated on a server but we don't

03:04.350 --> 03:05.600
have that yet.

03:05.970 --> 03:11.580
Owner idea for now is hardcoded to you one because we have no users in this app right now.

03:11.580 --> 03:17.910
But Thailand's on can be populated with data from the action because in the action for creating a product

03:17.940 --> 03:22.040
we have the product data key and that holds the object with title description.

03:22.050 --> 03:24.010
Image your URL and price in that state.

03:24.010 --> 03:25.800
We can now retrieve.

03:25.980 --> 03:36.000
So here for title we get action product data dot title where the image you sell it's action dot product

03:36.360 --> 03:43.800
data dot image you URL unsurprisingly for the description it's action dot product data dot description

03:44.380 --> 03:52.780
and for the price it's action dot product data dot price this is now a new product I create.

03:53.070 --> 03:58.890
Now we need to add it to our store by returning our updated state here where I first of all copy the

03:58.890 --> 04:03.840
existing state and now I need to add it to both the away label products and the user products because

04:03.840 --> 04:09.690
we created it it certainly therefore belongs to us so it needs to be part of both arrays and the away

04:09.690 --> 04:15.480
label products well there we can take these away label products we got and use Cong cat to get a new

04:15.480 --> 04:21.990
array which is the older Ray plus add new element and here new product is that new element and I do

04:21.990 --> 04:25.040
the exact same thing here for a user products.

04:25.110 --> 04:34.220
So here I use stage user products and I can cat my new product now what about updating for updating.

04:34.220 --> 04:37.430
We first of all need to find the index of the current product.

04:37.430 --> 04:46.580
So product index could be a constant name can be found by accessing our user products and data with

04:46.580 --> 04:51.570
find index which has a built in JavaScript method we can find the index of a certain element.

04:51.590 --> 04:57.440
Again this takes a function which executes on every element in that array and that needs to return true

04:57.440 --> 05:02.930
so that we will have an index and there will look at the ideas and look for the ideas where it's equal

05:02.930 --> 05:05.330
to my pit my action pit.

05:05.330 --> 05:11.520
Because if you remember how we set up that action for updating we do have that PID field here which

05:11.520 --> 05:13.980
holds de product ideas we're getting.

05:13.980 --> 05:19.470
So I'm looking for that product and then I store the index of that product in the user products array

05:19.620 --> 05:21.890
in the product in next year.

05:21.900 --> 05:27.720
Now we can create an updated product here which is technically a new product object but of course pre

05:27.720 --> 05:29.570
populated with some old data.

05:29.670 --> 05:31.200
For example we keep the ideas.

05:31.230 --> 05:34.320
So we take action PID as a value here.

05:34.320 --> 05:40.080
I also keep the owner I.D. and for data can access state user products for the index.

05:40.080 --> 05:46.070
We just find out so for that product index dog owner I.D. I won't change this.

05:46.290 --> 05:48.800
Of course they will store the new title.

05:48.900 --> 05:59.430
So here I will store action product data dot title I will stored in you image your l so action dot product

05:59.430 --> 06:03.180
data dot image your url and it will stored in you.

06:03.180 --> 06:11.190
Description so action dot product data dot description however I mentioned the price should not be editable

06:11.520 --> 06:18.900
so as a value for this I will keep the original price so stay at user products product index dot price

06:18.900 --> 06:24.750
here by the way that also means that our action is not entirely correct there.

06:24.840 --> 06:30.150
I also expect the price I shouldn't do that because we can't enter it in our inputs anyways we don't

06:30.150 --> 06:36.060
need it so we shouldn't expect it here we shouldn't forward it as part of product data for update product

06:36.390 --> 06:41.090
for a new product we need it for updating we don't.

06:41.500 --> 06:46.600
So with that we have our updated product with some new data and some old data now we need to update

06:46.600 --> 06:55.090
our state of course we're glad we have the updated user products we're in the end I copy my existing

06:55.210 --> 07:01.960
user products with this syntax here to create a copy and then I set updated user products for the selected

07:01.960 --> 07:09.460
product index equal to the updated product so I replaced de product at this index with the new updated

07:09.460 --> 07:15.790
product in my copy not in your original array but in my copy I need to do the same in the away label

07:15.790 --> 07:20.770
product but there I first of all need to find the index because that index here only works for the user

07:20.770 --> 07:25.230
products the index and the available products is very likely a different one.

07:25.750 --> 07:32.200
So I have my away label product index here if you want to call it like this which generally has the

07:32.200 --> 07:37.330
same selection logic so we can copy that but of course I will look into the available products array

07:37.420 --> 07:45.660
instead of the user products array and now again here we can have the updated way label products where

07:45.660 --> 07:53.280
I copy my own state available products and then I said updated available products for a given product

07:53.340 --> 08:02.110
index equal to sues me for the for the available product index of course equal to the updated product

08:02.410 --> 08:07.810
so that I replace my existing product with the updated product in both the available products and the

08:07.810 --> 08:15.030
user products array well and now we just need to return our new state first of all copy the existing

08:15.030 --> 08:23.490
one and now set a weight label products equal to updated available products and said user products equal

08:23.490 --> 08:32.790
to updated user products so to my updated arrays I'm configuring up their with that we hopefully have

08:32.790 --> 08:38.880
all the logic we need now Let's dispatch these events from inside the edit product screen so here we

08:38.880 --> 08:46.440
need to import used this patch from HREOC redux and import our actions to import everything as products

08:46.530 --> 08:54.910
actions from the store folder data from the actions folder and there from the products file and then

08:55.360 --> 09:01.060
dispatch these things in the submit handler of course here what we dispatch depends on whether we're

09:01.150 --> 09:02.540
adopting or adding.

09:02.650 --> 09:08.110
And as I mentioned we can find out what's the case with the help of added the product if it's set we're

09:08.110 --> 09:11.100
editing if it's not set we're adding.

09:11.100 --> 09:18.370
So in here in the submit HANDLER We can edit if check and check if added that product if dataset we're

09:18.460 --> 09:19.170
editing.

09:19.300 --> 09:25.660
So then I want to dispatch my update product event for it at first of all I need to create that dispatch

09:25.660 --> 09:33.650
function with the help of U.S. dispatch and now with that created down there we can call this patch

09:34.310 --> 09:39.410
products actions update product because that's what we're doing here.

09:40.570 --> 09:42.700
And now forward all the data we need here.

09:42.700 --> 09:44.980
Which is my fraud idea.

09:45.130 --> 09:49.060
That's the idea of the product we're editing we're extracting that up here

09:51.850 --> 09:59.020
and of course in addition all the foreword to title forward the description all these state constants

09:59.050 --> 10:07.630
we have here our image your El and not the price because we don't need that and the Ellis case here.

10:07.630 --> 10:09.060
That means we're adding.

10:09.130 --> 10:13.560
Then I want to dispatch products action start create product here.

10:13.660 --> 10:21.850
We forward title description image you add L and all of the price.

10:21.900 --> 10:26.580
And with that we should have a setup where we hopefully can add and edit products.

10:26.640 --> 10:28.040
So let's safeties end.

10:28.050 --> 10:36.060
Let's take a look if we now go to the admin area here and I added this and I add exclamation mark here

10:36.120 --> 10:43.460
and all to one here in the description and I hit save I get undefined is not an object evaluating props

10:43.460 --> 10:45.440
price to fixed.

10:45.530 --> 10:49.540
So looks like a lost my price here and trying to update this.

10:49.850 --> 10:54.140
Well OK before we fix this let's see if adding a new product works at all.

10:54.260 --> 11:00.890
If I add a product here with test test which is of course not a valid image you also will not see an

11:00.890 --> 11:06.750
image but at least while we sip at something this is also our test.

11:06.830 --> 11:10.250
If we try this and I hit submit does all that doesn't work.

11:10.250 --> 11:13.220
So somehow it's saving the price doesn't work.

11:13.220 --> 11:19.700
And I think the problem is here of course the problem here is the price is actually a string here but

11:19.700 --> 11:24.890
should be a number so we can easily convert it to a number by adding a plus here before we pass it to

11:24.890 --> 11:33.580
create product for updating on the other hand if we have a look at our products reducer it should normally

11:33.580 --> 11:36.790
keep the price it already had.

11:36.850 --> 11:42.870
So let's see if that plus fixes it for adding or if there is a different issue as well.

11:42.880 --> 11:48.060
This was a change that's required anyways but let's see if there is a no problem so.

11:48.060 --> 11:54.330
Test test twelve please enter only numbers here not some text which you currently could buy which would

11:54.330 --> 12:02.950
break it test this press this button Yeah that doesn't look too bad.

12:02.950 --> 12:09.920
We got some problem with the image here but if we scroll down actually here if we dismiss this we can

12:09.920 --> 12:14.030
see here's our product.

12:14.040 --> 12:18.290
So price is missing so something's wrong there.

12:18.390 --> 12:22.380
And we also don't seem to save the image correctly.

12:22.380 --> 12:25.400
Not only because it's not displayed but because of that warning we got.

12:25.740 --> 12:27.570
But generally this works.

12:27.570 --> 12:31.650
However for example here if I tried to up that doesn't save does we still get an error so there still

12:31.650 --> 12:33.320
is something wrong.

12:33.360 --> 12:39.270
So one thing that's wrong is in actions of course for update product here the type should be update

12:39.270 --> 12:41.100
product and not create product.

12:41.100 --> 12:45.710
Otherwise we triggered the wrong action the reducer which explains the price error we got there.

12:45.720 --> 12:50.190
So this has to be update product here for updating a product unsurprisingly.

12:50.400 --> 12:57.060
So that's one problem but another big problem can be found in the added product screen I use my use

12:57.060 --> 13:00.580
callback method here to wrap the submit handler right and I do this to a what.

13:00.660 --> 13:03.480
Unnecessary recreations of the functions.

13:03.480 --> 13:08.730
The problem is I initially set this to have an empty array as a dependency list which means this never

13:08.730 --> 13:12.740
is recreated which made sense when we only had console log in there.

13:13.230 --> 13:17.100
But now we're doing stuff in there and now we actually do have dependencies.

13:17.100 --> 13:22.710
Right now I never recreate this function which means it never is recreate for its updated values.

13:22.710 --> 13:28.180
So when we submit our form we never take into account what the user entered.

13:28.200 --> 13:30.930
So actually now we need to specify dependencies here.

13:31.020 --> 13:40.590
The dispatch function but more importantly even the prod I.D. the title the description and the image

13:40.680 --> 13:49.380
you are El and also of course the price now with Dad if we saved us be we should be fine and all the

13:49.380 --> 13:50.880
issues should be gone.

13:50.880 --> 13:52.220
So let's wait for this to reload.

13:52.290 --> 13:59.510
Go to admin now and start editing this maybe and now if we add exclamation mark in the title and in

13:59.510 --> 14:05.660
the description we safeties and go back we see that here and if we go to products we also seed here

14:05.720 --> 14:09.090
and then the details we also see that exclamation mark.

14:09.170 --> 14:12.910
Now if we go back to admin and create a new product.

14:13.080 --> 14:15.200
Test test.

14:15.390 --> 14:21.790
Twelve test this and I safeties and I go back.

14:21.890 --> 14:26.780
Now this all shows up down there of course the image doesn't show up because we haven't entered a valid

14:26.810 --> 14:31.480
U R L but all the other data shows up so this is generally working.

14:31.550 --> 14:35.410
And of course you could enter a valid image you were L and that would also break let's quickly test

14:35.410 --> 14:44.450
us as well so let's go back to the admin section and add a shelf here maybe for Dad I selected the year

14:44.470 --> 14:53.970
l off a shelf I found on the Internet for one hundred ninety nine point ninety nine this is a nice is

14:53.970 --> 15:00.870
a nice shelf like this for now safeties and we go back does looks good here's our image and we also

15:00.870 --> 15:05.260
see that here on the product screen and can view it here as well.

15:05.730 --> 15:07.070
So this seems to work.

15:07.080 --> 15:11.610
And with that we generally have a set up does it does work.

15:11.610 --> 15:16.410
Now there are minor things which I want to work on for example before we delete would be nice to have

15:16.410 --> 15:23.310
a little confirmation dialog and in addition I want to make sure that when we added or edited a product

15:23.400 --> 15:26.140
when we clicked save here we automatically navigate back.

15:26.130 --> 15:31.590
So these are just minor things of course but I think they make for a nice final here in this module.
