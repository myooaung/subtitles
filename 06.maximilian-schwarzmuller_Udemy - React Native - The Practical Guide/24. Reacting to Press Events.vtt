WEBVTT

00:02.910 --> 00:06.050
In the last lecture you learned about the touchable thing

00:06.210 --> 00:10.170
but right now the only thing we do is we throw in alert.

00:10.170 --> 00:15.470
Now let's also make sure we remove an item when we get this touch event,

00:15.660 --> 00:18.920
so here in place list where we right now throw the alert,

00:19.110 --> 00:20.730
that's not our goal,

00:20.730 --> 00:27.360
instead here we probably also want to trigger some method bound to a prop of our place list component

00:27.780 --> 00:31.090
so that we can do something in the app container in the end.

00:31.140 --> 00:42.700
So here I'll still use an arrow function but then I'll simply call props onItemDeleted and pass

00:42.700 --> 00:50.950
on the index of that item which I got in this i variable. So onItemDeleted is the prop name, in the

00:50.950 --> 00:52.060
app container

00:52.210 --> 00:54.730
we can now add this to our place list,

00:54.790 --> 01:03.820
we've now got this onItemDeleted prop here because we expect to get it in our place list component.

01:04.630 --> 01:10.930
onItemDeleted should get a method which is able to handle this index of the item we want to

01:10.930 --> 01:11.690
delete,

01:12.040 --> 01:21.070
so let's add a new method here, placeDeletedHandler probably, where we get the index of the element

01:21.070 --> 01:26.550
which is deleted and where we then simply update our state immutably

01:26.590 --> 01:28.930
just like in web based react apps,

01:29.300 --> 01:34.610
so that the places array is the places array without the item we just deleted.

01:34.630 --> 01:41.270
So here, I'll use the function form again to get the previous state because set state runs asynchronously

01:42.960 --> 01:50.430
and there, I now want to return an object which is merged with the state where the places array

01:50.430 --> 01:54.370
should be the places array without the element we want to remove.

01:54.750 --> 02:02.430
For this I can use old states, so previous state places and there, the filter method, a default javascript

02:02.970 --> 02:09.450
array method which will return a new array which is the array with all the elements that match the

02:09.450 --> 02:12.020
filter criteria as defined in

02:12.030 --> 02:15.200
the function we pass to filter.

02:15.260 --> 02:18.660
So here I pass an arrow function which gets the place,

02:18.700 --> 02:22.500
this will be executed on all elements in the places array

02:22.850 --> 02:26.650
and in here, I now have to return true or false.

02:26.720 --> 02:29.900
True means this item stays in the array,

02:29.960 --> 02:32.660
false means it's not part of the new array,

02:32.930 --> 02:39.310
so it should return false for that ID we got on the item deleted event.

02:39.320 --> 02:42.890
So for that, I'll simply return the result of a check here,

02:43.190 --> 02:51.350
the check in the end does not use the place but the second argument that we get here which is the index

02:51.440 --> 02:59.990
of the element in the array and if that index here is not equal to the index we receive,

03:00.100 --> 03:04.500
then we want to return true because then the items should stay in the array,

03:05.990 --> 03:10.490
if it is equal though, this will return false this check here

03:10.610 --> 03:12.880
and therefore it will not be part of the new array

03:13.130 --> 03:18.890
because if the index we delete is equal to the index we're looking at, then it's the item we deleted, it

03:18.890 --> 03:21.150
should not be part of the new item array,

03:21.530 --> 03:32.310
so onItemDeleted will simply trigger this place delete handler and this will automatically pass on

03:32.490 --> 03:39.290
the index because that is what we basically emit here in the place list, onItemDeleted.

03:39.420 --> 03:46.940
If we save all the files and we go back, we can click on items and we probably need to reload,

03:47.040 --> 03:49.800
so let's add Munich,

03:49.850 --> 03:56.990
now you see we can add multiple items, maybe with different names so that we can also see that we really

03:56.990 --> 03:58.480
deleted the right one,

03:58.640 --> 04:01.500
so let's add a couple of different ones,

04:03.110 --> 04:06.840
this, if I delete San Francisco, San Francisco is gone.

04:07.150 --> 04:10.000
So now we can clear up our lists here,

04:10.030 --> 04:12.040
we can remove items from it

04:12.310 --> 04:13.580
and if you get an error,

04:13.720 --> 04:15.420
always try reloading first,

04:15.430 --> 04:21.660
chances are it didn't reload correctly and therefore it doesn't incorporate your final code.

04:22.090 --> 04:25.180
So this is how we actually delete items,

04:25.210 --> 04:28.420
now back to some react native features,

04:28.420 --> 04:32.320
what if our list becomes really really long,

04:32.320 --> 04:35.580
let me add more and more items? You see

04:35.950 --> 04:41.820
I try to scroll, I try to push manually, I try to use the mouse wheel, I can't go down,

04:41.820 --> 04:45.390
we're exceeding the space of our page here

04:45.670 --> 04:50.580
and unlike in the web, we don't get scroll bars automatically.

04:50.680 --> 04:57.120
So how can we handle views that are actually higher than our viewport?

04:57.130 --> 04:59.620
Let's explore this in the next lecture.
