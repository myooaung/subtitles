WEBVTT

00:02.270 --> 00:07.820
In the last lecture we added the scroll view and I mentioned that it's really only good for basically a

00:07.820 --> 00:13.530
limited amount of elements because very long lists of elements which can even grow dynamically,

00:13.790 --> 00:18.970
well these can lead to performance issues especially on slower devices.

00:19.370 --> 00:25.140
So you want to have a solution that actually only renders what needs to be rendered,

00:25.250 --> 00:31.850
so what's on the screen and dynamically renders new list items which are about to become active and

00:31.850 --> 00:33.140
be visible

00:33.290 --> 00:39.830
but also detaches items which are not needed to be rendered right now, so that you basically always

00:39.830 --> 00:45.700
only render what you can see plus minus some elements on top or below it.

00:46.590 --> 00:50.410
React native got a component which does just that,

00:50.460 --> 00:52.890
it's called flat list, you

00:53.220 --> 00:56.340
can find more about it of course in the official documentation

00:56.460 --> 00:59.370
as always, there under components,

00:59.370 --> 01:06.570
you'll find the flat list component. This is the ideal solution for pretty much all dynamic lists

01:06.630 --> 01:11.700
you're going to render and of course you can find how it works in the documentation but we're also going

01:11.700 --> 01:15.330
to dive into it together. To use flat list,

01:15.360 --> 01:23.890
I will replace my scroll view with the flat list component, like this

01:23.890 --> 01:30.340
and now I need change the way I output my list, I will no longer use place output and I will no longer manually

01:30.340 --> 01:31.870
map my array,

01:33.100 --> 01:39.720
instead the flat list component accepts a couple of properties which are useful.

01:39.790 --> 01:49.920
The first useful property we can add to flat list is the data property, it's not only a useful one, it's

01:49.920 --> 01:51.210
a required one.

01:51.660 --> 01:57.920
Data has to be an array which will be used behind the scenes as a data source,

01:58.190 --> 02:07.440
here this of course is props places because remember, our custom place list component receives a places

02:07.540 --> 02:08.490
prop.

02:09.720 --> 02:11.840
So this is the data source,

02:11.840 --> 02:18.660
then you also need to tell flat list what should you do with this data source, for that it got the render

02:18.740 --> 02:19.780
item prop

02:20.030 --> 02:27.200
which takes some jsx code which it should render for each element in your data source.

02:27.230 --> 02:32.060
So here that is just jsx, though to be precise,

02:32.060 --> 02:34.730
it's a function which returns jsx,

02:34.910 --> 02:40.760
we can use an inline arrow function or we could create a new function of course.

02:40.760 --> 02:48.050
So here the inline arrow function should turns some jsx and the jsx should be list item, like that,

02:53.370 --> 02:55.560
make sure to remove that semi-colon here.

02:56.830 --> 03:01.200
So this is how we can use flat list but we're not entirely done,

03:01.570 --> 03:10.090
the items in our data source actually need to have a key property, they need to be objects which have

03:10.090 --> 03:15.090
a key property and then any other amount of properties. On the other hand,

03:15.100 --> 03:19.170
we don't need to manage the key manually on the list item anymore and we could,

03:19.180 --> 03:24.010
we don't have access to the index anymore because that's managed dynamically by flat list.

03:24.130 --> 03:27.960
So we need to change our places data source,

03:28.150 --> 03:35.160
it must no longer be an array of strings but an array of objects which fulfills this criteria of having

03:35.160 --> 03:37.270
a key property,

03:37.270 --> 03:44.830
so in the app container where we have our places array, when we add a new place, we no longer just concat the

03:44.830 --> 03:52.540
place name but this could be stored in some value property, that name is totally up to you though, a

03:52.540 --> 03:59.150
must is that you add a key property though which should be some unique key you add.

03:59.470 --> 04:05.280
Now to get this here, I'll actually use math.random which is not entirely unique,

04:05.320 --> 04:11.950
you could get the same number twice but here for demo purposes, it will suffice in a real application

04:11.980 --> 04:18.070
and later in this course, you will obviously have some data source that has real unique IDs like a user

04:18.070 --> 04:19.620
ID or something like that.

04:20.730 --> 04:29.830
So let's save that, let's go back to our application and reload both lists here or both apps, let's add

04:29.870 --> 04:34.280
Munich once here and you'll see I get an error here that we can't find the variable

04:34.280 --> 04:42.600
place, that makes sense because if we have a look at the list item, there we want to output the place

04:42.600 --> 04:46.780
name and in the place list here on the list item,

04:46.860 --> 04:49.980
we try to pass place as the place name.

04:49.980 --> 04:57.840
Now how do we get the real place name? Now here, this render item function that it is will actually give

04:57.840 --> 05:04.080
us information about the item it's about to enter as an argument and there we get an info argument.

05:04.220 --> 05:09.090
Now you can name this whatever you want but essentially it holds some infos about the item which is rendered

05:09.090 --> 05:16.140
here, this is the item itself, the index and then also something about potential separators between

05:16.140 --> 05:17.060
the items.

05:17.070 --> 05:26.140
So on this info element, we can extract our item and then pass on the value as a place name, value

05:26.160 --> 05:33.630
because in the app container where we add item, we store the place name we get in a value property on

05:33.630 --> 05:34.690
that object,

05:34.710 --> 05:37.130
so we have to retrieve it by that property.

05:37.290 --> 05:44.640
If we now save this and save all files, if we reload our app and we now start adding a couple of Munichs again,

05:44.910 --> 05:47.140
you see we output Munich here.

05:47.160 --> 05:51.630
Now of course deleting an item will fail though because upon deleting,

05:51.630 --> 06:01.060
we try to call onItemDeleted and pass the index i, now on the info element, we actually got the index

06:01.450 --> 06:04.670
but better is to use the unique ID we got anyways,

06:04.900 --> 06:08.850
so I can return info item key here.

06:09.010 --> 06:12.870
Remember we do have a key because we also add this in the app container

06:13.300 --> 06:17.910
and yes it's not entirely unique in our example but let's assume it is,

06:17.950 --> 06:20.570
so now we can use the key to remove an item.

06:20.590 --> 06:26.040
So here when we filter, we no longer use the index of the item we filter for

06:26.320 --> 06:30.490
but instead we check if the place key,

06:30.490 --> 06:36.480
so if the key of the place we're looking at here is equal to the key we get as an argument to place 

06:36.490 --> 06:37.290
delete handler,

06:37.450 --> 06:41.830
the key we pass back from the render item method from the flat list,

06:41.910 --> 06:42.760
it's not equal,

06:42.820 --> 06:43.730
excuse me.

06:43.780 --> 06:46.570
So if it is equal, we won't include it in the new array

06:46.570 --> 06:48.600
hence deleting the item.

06:48.610 --> 06:57.460
So if we now go back to our application and we again add a couple of Munichs, we get a scrollable list

06:58.190 --> 07:01.520
but deleting items also works again,

07:01.560 --> 07:10.140
now let's also use some other names like San Francisco and then New York to really prove that this is

07:10.140 --> 07:14.310
the case so that you can really see that the right item gets deleted,

07:14.540 --> 07:20.530
Munich, San Francisco, New York, that all works. And it should also work fine on Android,

07:20.530 --> 07:26.690
just make sure to reload it there too, if you there add items, you can also delete them.

07:26.690 --> 07:34.100
So this is flat list, your best solution for rendering lists which are dynamic and which can grow quite

07:34.100 --> 07:34.750
big,

07:35.000 --> 07:39.680
you can learn more about it in the official documentation and I also want to make you aware that there

07:39.690 --> 07:44.370
also is section list, basically an alternative to flat list

07:44.370 --> 07:46.500
if you also got sections in your list.

07:46.610 --> 07:51.590
So if you got something like a settings list where you got general settings and then a couple of lists

07:51.620 --> 07:56.660
items that belongs to that section and that you've got another section with a couple of list items,

07:56.990 --> 08:02.290
then section list is pretty much working in the same way as flat list does

08:02.480 --> 08:05.970
but it's able to handle a data source that knows sections

08:06.170 --> 08:10.620
unlike flat list where our data source is just a one dimensional array.

08:11.010 --> 08:12.590
This is flat list.
