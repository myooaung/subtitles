WEBVTT

00:02.410 --> 00:04.900
There also are more things you can set up of course.

00:04.900 --> 00:11.170
One thing I want to dive into are these over the air updates though which you control with the updates

00:11.170 --> 00:12.610
key in the app Chase and fall.

00:12.620 --> 00:19.600
Now that's a neat feature which means that people running your app on their device no matter if it's

00:19.600 --> 00:24.970
just running in the actual client because these scans such a barcode which as mentioned isn't too useful

00:25.390 --> 00:28.040
or if they really downloaded it from the app stores.

00:28.090 --> 00:33.700
As long as you build your app in the managed expert workflow you get the over the air update functionality

00:33.700 --> 00:38.830
built in and that means that if you change something in your code let's say here on this screen we change

00:38.830 --> 00:44.230
something we change some titles some functionality or we even add a brand new native module.

00:44.230 --> 00:52.900
No matter what you do whenever you publish does update with the expo published command all your users

00:53.050 --> 00:58.810
even if they installed the app from the app stores will get this update in their app the next time they

00:58.810 --> 01:00.160
open the app.

01:00.160 --> 01:06.160
And that's important you can configure the functionality here in the updates key again in the official

01:06.160 --> 01:11.560
docs to learn more about this update key and what you can set there what you can set.

01:11.560 --> 01:15.790
For example is if it's generally enabled which by default it is.

01:15.790 --> 01:22.600
And with this fallback to cash time out thing you can configure how long the app when users launch it

01:22.630 --> 01:29.620
on their device should check for updates and try to load them before it displays the recent available

01:29.710 --> 01:35.620
version by setting this to sero you're saying whenever the app launches it immediately displays what

01:35.620 --> 01:41.830
it has it looks for updates behind the scenes and for the next launch it might then take them into account

01:42.190 --> 01:47.500
but it doesn't try to look for updates and download them before actually loading the app.

01:47.510 --> 01:50.420
Now you could change this to let's say five seconds.

01:50.440 --> 01:55.790
This is a millisecond values of five thousand is five thousand milliseconds which is five seconds.

01:55.810 --> 02:01.360
This would mean that when people launched the app they will see the launch screen for up to five seconds

02:02.020 --> 02:08.920
which is of course quite long because after loading everything else expo or your app tries to look for

02:08.920 --> 02:13.870
it updated if it finds an app that it tries to download it and take it into account.

02:13.990 --> 02:19.150
That might be done in five seconds it might be done faster in which case you are app will also launch

02:19.150 --> 02:24.700
faster but if it takes longer than five second standard we'll continue with the updating but not immediately

02:24.710 --> 02:30.370
loaded but instead load the most recent version that is available now it's of course up to you what

02:30.370 --> 02:31.690
you prefer.

02:31.690 --> 02:37.510
This approach makes sure that users have the fastest possible startup experience but they only get your

02:37.510 --> 02:40.830
updated code the next time the app is launched.

02:40.990 --> 02:48.010
This approach or setting this to even higher value like 10 seconds means dead users get newer versions

02:48.130 --> 02:53.710
more frequently or quicker because they get it on the next app launch already.

02:53.800 --> 02:58.990
But the downside is that the app launch might take a bit longer which is maybe not what you want.

02:58.990 --> 03:03.760
So it really depends on which type of app you're building and which type of users you're targeting what

03:03.760 --> 03:04.840
you want to set there.

03:04.840 --> 03:10.780
If it's a business app let's say which you distribute to your employees which needs to be updated all

03:10.780 --> 03:14.620
the time and where the user experience is not that important.

03:14.620 --> 03:17.710
You might want to take a value like 10 seconds here.

03:17.710 --> 03:25.880
If it's an app you share with normal end users around the world you might want to go for a faster start

03:25.880 --> 03:31.220
up time to provide a good user experience and sacrifice update speed for that.

03:31.390 --> 03:36.190
So users would then only get the update on the next launch after this launch.

03:36.190 --> 03:43.300
With all of that out of the way let's actually have a look at all of this and also at is over the air

03:43.300 --> 03:44.260
update feature.

03:44.260 --> 03:48.990
I changed a couple of settings here and therefore what I'll now do is I'll run Expo publish again.

03:49.120 --> 03:53.840
Still that's the command which will not get it in the app stores but which will chair it.

03:53.890 --> 04:02.620
Here on this expo page so to say so I run this command and we could have still optimized our assets

04:02.620 --> 04:04.610
with Expo optimize.

04:04.660 --> 04:09.010
But since we don't really have images included in the app other than the icons here which are generated

04:09.040 --> 04:12.850
and optimized by Expo anyways this shouldn't be a problem.

04:13.000 --> 04:18.460
So I can just run it like this and wait for this to complete and then I will test this on an Android

04:18.460 --> 04:23.420
device because there the advantage of course is that we can use this barcode here.

04:24.370 --> 04:30.490
So now once this is finished the cool thing is will immediately have this new app available by scanning

04:30.490 --> 04:36.370
this barcode and there after I'll show you how we can get over the air updates without even scanning

04:36.370 --> 04:41.280
the app barcode again because that's the idea we get any updates without scanning again.

04:41.320 --> 04:46.720
It's pushed to our app the next time we launched the app so let's wait for it is published process to

04:46.720 --> 04:52.240
finish and you are Ellis still the same as before because I haven't changed anything about my slug here

04:52.270 --> 04:54.570
which is part of the duet L or anything else.

04:55.540 --> 05:00.730
So now here's the expo app on my android device where I can now scanned as barcode and therefore now

05:00.730 --> 05:10.330
the app launches here on Android you see I got the splash screen got the app running here and I can

05:10.330 --> 05:16.600
of course also use it for example I can take an image here so that all works the way it should work

05:16.720 --> 05:18.730
on my device here.

05:18.820 --> 05:22.210
And now let me show you this over the air updating functionality.

05:22.270 --> 05:24.940
See that ad plays tightly here at the top.

05:24.940 --> 05:27.060
Now let's change that in our code.

05:27.070 --> 05:28.470
So let's go to the code here.

05:28.630 --> 05:33.460
And on the screen here in the new place a screen where we set this title.

05:33.580 --> 05:37.460
Let's change this to add new place.

05:37.500 --> 05:40.170
It's a tiny change but still.

05:40.170 --> 05:45.540
So now if run Expo publish again this app will be bundled up and will be published too.

05:45.660 --> 05:47.800
While the expo service again.

05:47.880 --> 05:52.770
So let's wait for this process to finish and it's done.

05:52.770 --> 05:54.590
And now let me show you this live updating.

05:54.600 --> 05:55.880
I still have the app running here.

05:55.890 --> 06:01.670
So of course this does not change whilst the EPA's running so of course here we still have the old title.

06:02.040 --> 06:04.390
But now let's say it was a wait quite a time.

06:04.400 --> 06:08.380
I closed this year and now I relaunched the app.

06:08.610 --> 06:14.720
If I now go to the new places scream I still see the old to old title.

06:14.920 --> 06:18.780
No that makes sense if you think about the updating strategy we used.

06:18.780 --> 06:24.500
I made sure that the app launches as quick as possible and downloads a new update behind the scenes.

06:24.510 --> 06:25.470
So that's what happened.

06:25.470 --> 06:30.980
Now this was the first relaunch of the app on my device after updating it.

06:31.050 --> 06:36.330
So let's say I'm again away quite some time and I relaunched it again by the way here you can see the

06:36.330 --> 06:38.930
adaptive icon in action.

06:39.080 --> 06:44.600
Now if you go through that screen you'll see add new place as a text because now it does this the second

06:44.600 --> 06:47.210
launch after the update in the first launch.

06:47.210 --> 06:52.020
We downloaded the update and installed it so to say in the second launch we we're using it.

06:52.160 --> 06:57.800
Now the app on the device technically didn't change just what's in there changed our javascript coach

06:57.800 --> 07:04.670
changed and since we have this extra wrapper this means that Expo can take this into account and use

07:04.670 --> 07:05.290
this new code.

07:05.810 --> 07:10.730
And this will also work if you publish your app to the app stores because they're whilst you will build

07:10.730 --> 07:16.800
a standalone app and people won't need the expo client you will still include that Expo client app into

07:16.800 --> 07:17.800
your standalone app.

07:17.810 --> 07:18.860
As I mentioned earlier.

07:18.920 --> 07:24.710
So your standalone app kind of has the Ethan Expo wrapper the expo client built in and wrapped around

07:24.710 --> 07:25.220
your app.

07:25.250 --> 07:28.030
That's why over the air updates will even work there.

07:28.070 --> 07:30.440
And speaking of that we now test this a lot.

07:30.440 --> 07:36.150
We tested this all with just Expo and with scanning the barcode.

07:36.170 --> 07:41.180
Now let's dive into how we can really build this app and published his app for the app stores.
