WEBVTT

00:02.010 --> 00:07.110
In the last lecture we added the activity indicator, now handling errors is also interesting

00:07.170 --> 00:10.090
and there are thousands of ways to do that.

00:10.190 --> 00:17.720
You could load a modal, show a modal to use or you could redirect the user to another page in your application,

00:17.720 --> 00:18.690
in the end that's up to you,

00:18.690 --> 00:26.050
the pattern will be the same we used for the loading state. You use redux to basically dispatch

00:26.050 --> 00:33.200
an action which changes some state that then can be consumed by your screens just as we consume isLoading

00:33.200 --> 00:38.160
from our redux store to show something, hide something, do whatever you want.

00:38.600 --> 00:44.540
Now I will use a very simple approach here but of course as I said, you can just follow the same approach

00:44.540 --> 00:49.250
we used here for dispatching the success case for the bad case.

00:49.250 --> 00:57.370
What I will do is I will go to my places.js file on the actions folder and in an error case,

00:57.500 --> 00:59.180
I will simply alert

00:59.180 --> 01:01.140
something went wrong,

01:01.160 --> 01:02.510
please try again.

01:02.510 --> 01:09.590
Now this is not necessarily the best solution but it is one that is better than failing silently and

01:09.590 --> 01:10.180
again,

01:10.250 --> 01:15.030
you always have the alternative of dispatching something else here or additionally to stop loading

01:15.040 --> 01:18.200
to also change something else in your app.

01:18.560 --> 01:26.170
Now this is how we also handle errors and with that, this is how we can store files and store data on a backend,

01:26.470 --> 01:28.300
add the example of firebase

01:28.430 --> 01:30.910
but the idea is of course always the same.
