WEBVTT

00:02.300 --> 00:08.300
So let's continue working on this and let's change this to a let's say text change handler function

00:09.020 --> 00:10.390
which we now assigned to.

00:10.400 --> 00:16.420
On change text here on the title but which we also can add to our image your L..

00:16.430 --> 00:22.640
So here for on change text I also set this to text chain handler and now for this to work we need to

00:22.640 --> 00:28.030
make sure that this function gets information about which input it was trigger for.

00:28.070 --> 00:32.390
So whether you just typed in the title or in the image you are El input.

00:32.570 --> 00:36.580
So besides getting the text I always expect to get a different argument.

00:36.710 --> 00:42.290
I expect to get my input identifier or anything like that you can name it whatever you want.

00:42.290 --> 00:47.420
So that this function can be reused for multiple text inputs and we still get information about which

00:47.420 --> 00:48.560
input a trigger does.

00:48.680 --> 00:54.080
So we can forward this to our reducer where we will later need this information to update our state

00:54.080 --> 00:55.370
correctly.

00:55.610 --> 01:01.520
Now to get this input identifier functionality we need to go to the places where we use text change

01:01.520 --> 01:09.140
handler and there we can for example use bind or use a wrapping anonymous arrow function instead to

01:09.140 --> 01:14.570
bind this where I don't care about but more importantly to configure the arguments does function will

01:14.570 --> 01:19.700
get in there it's one special argument which I want to pass and that's the input identifier.

01:19.990 --> 01:24.650
And for this function here for dysfunction call on this text input.

01:24.650 --> 01:33.870
This of course would be title for this input down there we would have find this image you are El.

01:34.060 --> 01:40.450
And again this should be an identifier which you also have in your state up there in your form state

01:40.570 --> 01:49.110
which you pass to the reducer with that ad it will make sure that text change handler is executed and

01:49.110 --> 01:51.710
gets this input identifier argument.

01:51.990 --> 01:56.430
The text argument will all be received because that's the default argument which react native would

01:56.430 --> 02:01.740
pass us anyways and this will then automatically be received as a lost argument in that function.

02:01.800 --> 02:05.000
So we don't have to and we actually can't bind this here.

02:05.010 --> 02:07.410
It will be forwarded automatically.

02:07.680 --> 02:13.260
Now we have a reusable text change handler function here we can assign as to the average inputs as well

02:13.440 --> 02:21.030
like here to the image you are El like down here for the price we can bind text change handler bind

02:21.060 --> 02:27.390
this and then price is all right and the far here and of course all the for the description there we

02:27.720 --> 02:35.540
paste this in and then bind to this and the identifier is description.

02:35.780 --> 02:40.910
Now this same handler can be used for all inputs but right now of course it does one thing.

02:40.910 --> 02:44.240
It validates each input for its length.

02:44.240 --> 02:46.990
Now that might make sense and it does here.

02:47.030 --> 02:52.070
No input should be empty but you might want some other validation as well.

02:52.070 --> 02:58.130
For example my price here should be a number greater than zero.

02:58.160 --> 03:05.360
Let's say so that zero is not allowed as a input that on the other end is not some criteria that matters

03:05.360 --> 03:10.670
to me on average inputs will find a elegant solution for dead later.

03:10.670 --> 03:16.700
For now let's stick with this smallest common denominator validation which we can apply to all inputs

03:16.700 --> 03:18.690
to make sure they're at least not empty.

03:19.120 --> 03:23.040
And let's focus on the reducer function how our forward state should change.

03:23.060 --> 03:26.990
When does 4 input update action with all that data is dispatched.

03:26.990 --> 03:28.720
Because right now nothing will happen.

03:28.760 --> 03:33.920
We have our initial state under reduced her and that will be passed or stored in the form state but

03:33.920 --> 03:36.050
this state will never change.

03:36.080 --> 03:38.770
Well that's why we dispatch an action right.

03:38.820 --> 03:40.550
That's why we do this year.

03:40.560 --> 03:46.190
This is why form input update is dispatched and that is why we want to write some code here and there

03:46.200 --> 03:49.190
user when does action reaches us here.

03:49.500 --> 03:55.650
Now in there if this action reaches us in the end the goal is to make sure that we update this state

03:55.650 --> 03:56.220
snapshot.

03:56.220 --> 03:58.340
Our current state snapshot appropriate.

03:58.650 --> 04:04.470
This means that for example we'll need some updated values for this I create a new object because my

04:04.470 --> 04:05.910
input values here.

04:06.030 --> 04:11.850
That's an object and it will create a new one to replace it and it will first of all copy the existing

04:11.850 --> 04:14.340
state input values.

04:14.400 --> 04:19.650
Keep in mind that the state here is passed and automatically that's our current state snapshot before

04:19.650 --> 04:25.500
we updated and therefore initially that's this state snapshot here for example and this will have input

04:25.500 --> 04:27.610
values key which in turn holds the object.

04:27.720 --> 04:29.420
And that's just what I'm copying here.

04:29.460 --> 04:35.910
I'm copying all the key value pairs off that input values snapshot and then I want to replace the key

04:35.910 --> 04:40.230
value pair for the input for which does action was dispatched.

04:40.230 --> 04:46.740
The good thing is that we attach the input identifier to the action so we can go to the reducer and

04:46.740 --> 04:52.360
dynamically overwrite a key here in the copied input values.

04:52.380 --> 04:57.900
The key is action dot input of course that's our input identifier which we attached to the action and

04:57.900 --> 05:00.420
the value should be action dot value.

05:00.420 --> 05:06.840
That's all we need to do so we dynamically store the value that was dispatched with the all the dynamically

05:06.840 --> 05:12.060
assigned input and update our copied input values.

05:12.060 --> 05:17.360
Now we can return and use state here because that's the goal of your own reducer.

05:17.360 --> 05:21.360
Like for the read X reducer Indiana test return a new state snapshot.

05:21.840 --> 05:28.800
And there I want to copy the existing state but overwrite the input values with the updated values which

05:28.800 --> 05:36.230
copies my old values so that no data is lost and then replaces one of the key value pairs in their obviously.

05:36.260 --> 05:39.820
It's not all to just replace the values or update the values.

05:39.890 --> 05:42.810
I also want to update my validity is.

05:42.920 --> 05:48.700
So here are my updated validity is and just as with the values I start by copying my input.

05:48.710 --> 05:53.240
Validity is key because the input validity is is a key here.

05:53.340 --> 05:54.050
As you can see

05:57.300 --> 06:05.190
and then I want to replace 1 validity for dy input which we get on the action so tidal image your l

06:05.220 --> 06:10.320
or whatever it is and replaced it with action is valid because we get the information whenever that

06:10.320 --> 06:13.790
is valid or not as part of the action that is dispatched right.

06:13.800 --> 06:17.400
We're forwarding this here based on this basic validation we have here.

06:19.810 --> 06:24.160
Now with that we just need to update this here.

06:24.340 --> 06:30.220
So our input validity is here are equal to the updated validity is and now we just have to manage the

06:30.220 --> 06:33.430
overall form validity for that.

06:34.640 --> 06:41.270
I add a variable a helper variable form is valid which initially is true and then I loop through all

06:41.270 --> 06:43.160
my updated validity.

06:43.160 --> 06:45.050
Which are my old copied validity.

06:45.080 --> 06:49.520
And then the one updated validity for the input we just typed in.

06:49.580 --> 06:57.020
So here we have a for in loop where we go through all the keys in updated validity is and the goal is

06:57.020 --> 07:03.170
simple I check every form input validity and if all form input validity is are valid.

07:03.170 --> 07:06.170
If they are all true then the overall form is valid.

07:06.230 --> 07:08.980
If at least one of them is false the overall form is false.

07:09.000 --> 07:17.090
The real form is not valid so therefore here form is valid is equal to the latest form is valid state

07:17.120 --> 07:24.320
we have and then the updated validity is validity for the input recurrent looking at some for this key

07:24.330 --> 07:26.320
and we're going through all the inputs here.

07:26.480 --> 07:31.530
The way does boolean operator works as such dead falls overrides true.

07:31.640 --> 07:37.730
So if any input is false form is valid will be set to false and can't be set to true thereafter.

07:37.730 --> 07:43.010
So if at least one input is invalid the overall form will be invalid and therefore now I don't need

07:43.010 --> 07:48.200
to copy my state anymore here while it because I will replace the entire state snapshot and set form

07:48.200 --> 07:51.460
is valid to my derived form is valid here.

07:52.940 --> 08:02.910
And of course to avoid confusion we could also named as updated form is valid here and here and here

08:03.540 --> 08:04.270
and here.

08:06.030 --> 08:09.900
Now just one additional thing if we don't make it into this if block.

08:09.930 --> 08:16.560
So if some other action was dispatched or anything else then I will just return the unchanged state

08:16.560 --> 08:18.870
here with Dad.

08:18.870 --> 08:26.590
We added a reducer logic that is able to handle any input or any typing into any of our text inputs.

08:26.610 --> 08:31.560
Now we just need to use the form state which will change with every keystroke which is just what happened

08:31.560 --> 08:38.010
before but now all centralized and merged into one managed state which I think is way cleaner than having

08:38.190 --> 08:45.600
tons of different states for validity and values and by the way managing all these states manually and

08:45.600 --> 08:53.330
separately would have become a big problem when you done one to validate the overall form validity.

08:53.340 --> 08:59.250
So now we can use the forum state which will change with every keystroke and we use it for example here

08:59.790 --> 09:07.610
on the values we pass back in the value for this text input by accessing forums state input values dot

09:07.620 --> 09:15.160
title and obviously we do the same here for the image URL we feed this back in.

09:15.160 --> 09:19.710
So just what we did before it now with our form state managed with the help of the reducer.

09:19.720 --> 09:26.040
Same for the price of course and also the same for the description like that.

09:29.530 --> 09:35.010
No besides changing it here we all to have to change it in some other places.

09:35.140 --> 09:39.730
For example here in the submit handler of course their title is valid.

09:39.730 --> 09:50.540
This no longer exists but we can check form state input validity is title that is true or false and

09:50.540 --> 09:52.250
if it's false it means it's not valid.

09:52.250 --> 09:54.400
So this check should be fine.

09:54.530 --> 09:59.960
Of course however we care about the validity of all inputs.

09:59.960 --> 10:05.270
So instead of just checking them all manually here by concatenate them into a long if statement we can

10:05.270 --> 10:10.880
just check if form state form is valid is false because that means some input is false and therefore

10:10.880 --> 10:11.750
we showed his error.

10:11.750 --> 10:18.300
That's the shorter check and does of course also when we want to avoid that the forum gets submitted.

10:18.300 --> 10:23.450
If the form gets submitted however title description and image you l that no longer exists.

10:23.550 --> 10:29.380
Instead that's now forum state input values dot title and so on.

10:29.400 --> 10:30.950
So we do the same here.

10:32.290 --> 10:40.790
For the description and for the image you or L we derive our values from the former state same of course

10:40.790 --> 10:50.250
here for creating we get the title and the description and the image URL and all of course the price

10:50.250 --> 10:55.200
which has still converts to a number with the plus here we get all of that out of our former State of

10:55.200 --> 11:02.130
the input values therefore of course our dependency here is not title description image New Orleans

11:02.130 --> 11:08.490
on instead its just form said if the form states changes which it will on every keystroke then this

11:08.490 --> 11:13.170
function should be rebuilt and it needs to be rebuilt because the information that's used by the function

11:13.200 --> 11:14.790
changes with every keystroke.

11:14.790 --> 11:16.980
The validity can change with every keystroke.

11:17.070 --> 11:23.750
The values you want to submit can change with every keystroke.

11:23.880 --> 11:29.820
We also can of course now use this to show our error message instead of checking title is valid which

11:29.820 --> 11:31.330
doesn't exist anymore.

11:31.380 --> 11:41.850
We check for him state DOT input validity his dot title if Dad is false then I want to show it text.

11:41.960 --> 11:42.680
So now it's dead.

11:42.680 --> 11:47.440
If we save all of that we should be able to check this to go to our page here.

11:47.450 --> 11:49.320
We see this error initially.

11:49.340 --> 11:51.650
We start typing it disappears.

11:51.690 --> 11:55.640
Try to submit this it fails because I have three empty inputs.

11:55.640 --> 11:58.800
If I do enter something valid they are on the other end.

11:58.850 --> 12:02.100
This works if I try editing.

12:02.270 --> 12:05.100
Let's try this on Android maybe to mix things up.

12:05.420 --> 12:11.140
So if I try adding to editing the red shirt here I can submit this just fine.

12:11.150 --> 12:13.290
Now let's also try submitting this if.

12:13.320 --> 12:18.080
Does this empty then I get the alert.

12:18.080 --> 12:20.620
So this works in the way it should work.

12:24.840 --> 12:31.700
Now with this more elegant for management using use reducer and of course you can not just use use reducer

12:31.700 --> 12:33.020
when working with Florence.

12:33.080 --> 12:38.660
This is just a particularly good example for when it makes sense to merge multiple states together and

12:38.660 --> 12:42.250
therefore have highly reusable and efficient code.

12:42.270 --> 12:48.290
Now I'm still not done though because all this code repetition with the inputs here which are always

12:48.320 --> 12:54.880
structured in the same way and the missing customization possibilities regarding the validation.

12:55.040 --> 12:56.930
These are the things I want to tackle next.
