WEBVTT

00:02.470 --> 00:08.350
When we talk about debugging it's important to understand what could possibly go wrong and in which

00:08.350 --> 00:13.150
situations you might want to debug your code or avoid errors.

00:13.150 --> 00:18.700
And the most obvious thing that can go wrong is that your app crashes or that you're getting an error

00:18.700 --> 00:20.760
message in development.

00:20.770 --> 00:28.120
Dad stays red box which overlays your app which we already saw before in this course and these error

00:28.120 --> 00:32.330
messages are of course a clear sign that something's wrong with your code.

00:32.650 --> 00:40.060
More subtle than that are logical errors in your apps you'll certainly at some point have some behavior

00:40.480 --> 00:46.540
which might not make sense to you or worse something just doesn't work the way it should work.

00:46.570 --> 00:51.830
You're not getting an error but your app is misbehaving it's working incorrect.

00:51.910 --> 00:52.680
The end.

00:52.750 --> 00:58.370
Typically you have some logical errors somewhere that's causing this.

00:58.370 --> 01:02.470
And last but not least you have your user interface your style and your layout.

01:02.470 --> 01:06.470
The user experience you want to create and maybe that's off.

01:06.490 --> 01:13.270
Maybe there you have something that just doesn't look or feel the way it should look or feel and that's

01:13.270 --> 01:19.000
also something that can go wrong and that you want I would know typically examples for error messages

01:19.000 --> 01:26.830
or causes of error messages are syntax errors where you simply have a typo in your code or where you

01:26.830 --> 01:32.140
forgot closing curly brace or something like that but also simply bugs in your code.

01:32.140 --> 01:37.000
So for example a line of code where you use a value which you actually never set.

01:37.000 --> 01:43.990
So you're trying to for example calculate something with an undefined value or parse a string which

01:43.990 --> 01:46.290
is actually undefined anything like that.

01:46.420 --> 01:54.030
That would typically all lead to errors and then you have a special type of error and these are unavoidable

01:54.060 --> 01:56.490
errors as I like to call them.

01:56.520 --> 02:01.230
Now that does not mean that these are errors you can't avoid because you're just not good enough as

02:01.230 --> 02:02.190
a developer.

02:02.250 --> 02:08.760
Instead I mean errors which could result from you making a network request and the users of your app

02:08.790 --> 02:15.570
not having a network connection or that you're writing to the filesystem and somehow this access is

02:15.570 --> 02:23.430
blocked so you can't be sure that this will never fail when users use your app because you can't control

02:23.640 --> 02:29.580
how they're using your app or in which circumstances they're using your app and for such errors you

02:29.580 --> 02:36.030
can all define strategies where you can't a wide D error but where you can handle it now for logically

02:36.040 --> 02:36.330
errors.

02:36.330 --> 02:42.270
Typical example would be that you have some undesired or unexpected app behavior and you of course want

02:42.270 --> 02:49.230
to get rid of that that you have some unexpected were on handled the user behavior so that users are

02:49.230 --> 02:52.470
using your app in a way you didn't intend them to use.

02:52.470 --> 02:57.480
So when testing your app during development you want to be really creative and find out if users could

02:57.480 --> 03:05.190
get into spots where they can proceed or where your app is not working correctly so that maybe the users

03:05.190 --> 03:11.100
followed a certain sequence of steps that leads to an error to a logically or maybe some input is missing

03:11.100 --> 03:17.850
at some point and you're not checking for this input to be set and Dale for with that not being said

03:18.120 --> 03:22.740
you can cause another issue or go into a no error.

03:22.770 --> 03:24.200
So something like that.

03:24.300 --> 03:29.790
No last but least if we talk about the styling the layout obviously we can have unexpected or wrong

03:29.790 --> 03:34.340
stylings who testing the app and we see that thousand would look the way it should.

03:34.470 --> 03:38.220
Or maybe we just have inconsistent results on different devices.

03:38.220 --> 03:44.790
Maybe our app looks good on ISIS but not an Android or last but not least maybe we have a layout that

03:44.790 --> 03:49.220
just doesn't work or feel right on certain devices or orientations.

03:49.260 --> 03:53.370
Maybe our content doesn't fit onto the screen on very small devices.

03:53.400 --> 03:58.750
These are all things we all want to rule out now that's what you can debug.

03:58.770 --> 04:03.460
How do you debug Which tools do you get for debugging your errors.

04:03.600 --> 04:11.880
Now the most obvious tool you're getting and yet to tool a lot of people overlook or just don't look

04:11.880 --> 04:14.070
at at all are the error messages.

04:14.070 --> 04:17.100
Seriously read the error messages you're getting.

04:17.130 --> 04:24.850
I've seen it so so often in my courses that students get some error and just go Oh God I got an error

04:25.170 --> 04:32.760
screenshot or copy and pasted Q and A section and sometimes errors can be really hard to debug or to

04:32.760 --> 04:39.180
understand worry you need some experience to find out what exactly went wrong but to be very honest

04:39.600 --> 04:46.530
of an error messages are really clear regarding what went wrong or even contain a solution regarding

04:46.530 --> 04:48.120
how you may have fixed the error.

04:48.210 --> 04:54.090
And last but not least simply taking error message and googling it also often gets you very far because

04:54.090 --> 04:56.790
chances are you're not the first one who's getting it.

04:57.970 --> 05:03.850
Now let's say you're not getting an error message but your app is not behaving correctly in some sport

05:03.880 --> 05:09.670
or you're not sure if some value is set correctly and in some part of your code.

05:09.880 --> 05:15.370
And very easy way of looking into your code of getting a feeling for the values you're working with

05:15.370 --> 05:22.150
and code is to use good old console log now console log debugging doesn't have the best reputation and

05:22.150 --> 05:26.090
indeed it's not that great if you're debugging a very complex problem.

05:26.260 --> 05:32.470
But to simply get an idea for the flow of your code or for some of the values you're working with it's

05:32.470 --> 05:32.950
great.

05:32.950 --> 05:38.860
You can simply dump it into your code and then find out which value you're using at which point or how

05:38.860 --> 05:43.840
something behaves in a certain situation or if something is getting executed at all.

05:43.900 --> 05:47.260
And therefore this is definitely something you should also do.

05:47.260 --> 05:53.830
Now for more complex problems or if you really want to step through your code step by step using the

05:53.830 --> 05:59.610
Chrome debugger and breakpoints is a great tool and it's supported by React Native both when you're

05:59.620 --> 06:05.860
using export or when you're not using expo there you can really dive deeply into your code and get a

06:05.860 --> 06:11.740
feeling for how it works and go through it step by step and look into your code whilst it's getting

06:11.740 --> 06:12.350
executed.

06:13.090 --> 06:15.760
So let's have a look at these things now.
