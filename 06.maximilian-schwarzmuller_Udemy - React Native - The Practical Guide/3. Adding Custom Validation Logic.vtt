WEBVTT

00:02.310 --> 00:03.910
We're able to handle the user input

00:03.910 --> 00:06.520
now, time to add some validation.

00:06.760 --> 00:09.840
We already got the validation rules here,

00:10.060 --> 00:17.950
so the goal would be to have a look at these rules in update input state and update the valid property

00:18.430 --> 00:19.870
accordingly,

00:19.870 --> 00:21.530
so how do we do that?

00:21.640 --> 00:27.190
There are different approaches and you can of course always find a more elaborate approach.

00:27.190 --> 00:33.760
Now what I want to do therefore is I'll add a file here in the source folder, there I'll add a utility

00:33.820 --> 00:41.240
folder and in that folder, I'll add validation.js and there I want to create some validation methods,

00:41.260 --> 00:47.500
so the methods I can execute that will do validation as well as one master method so to say which

00:47.500 --> 00:52.590
I can execute to run the appropriate sub-methods for validation.

00:52.630 --> 00:53.770
Sounds confusing,

00:53.770 --> 00:57.600
let me show you what I mean. I'll add a validate method here,

00:57.610 --> 01:06.230
so const validate will be an arrow function where I simply expect to get the value and the rules,

01:06.310 --> 01:13.690
these two arguments. In there, I now want to have a look at all the rules and validate this value for each

01:13.690 --> 01:22.450
rule that applies, since rules will be a javascript object because we configured it to be one, validation

01:22.560 --> 01:26.930
rules is a javascript object, I'll use a for in loop,

01:26.950 --> 01:31.870
so for let rule in rules loops through all these rules

01:34.570 --> 01:41.260
and in here, I'll then add a switch case statement where I switch the rule and for the different cases, I execute different

01:41.260 --> 01:44.310
functions which will do the actual validation.

01:44.320 --> 01:52.150
So there, I could have a case which is isEmail because that is one of the rules we use, isEmail,

01:52.150 --> 01:55.140
we also have minLength and equalTo.

01:55.250 --> 02:01.390
Now these rules also have values so these are only the properties of course, the values of the rules

02:01.390 --> 02:02.880
will also become important

02:03.010 --> 02:06.740
but right now, let's just stick to the property itself,

02:06.820 --> 02:14.890
camel case isEmail then dictates that I want to execute some function, const email validator, something

02:14.890 --> 02:21.570
like that where I get the value and then return if this value is a valid email address or not.

02:21.580 --> 02:27.440
So here I would then execute email validator, pass on the value

02:27.520 --> 02:33.090
but I also need to store the result of thisValidation. For this,

02:33.130 --> 02:40.090
I'll add a property, isValid and I'll set it to true by default

02:41.550 --> 02:48.330
and then here, I'll set isValid equal to the email validator result because if this fails, it clearly

02:48.450 --> 02:56.270
should be invalid but I'll also set it to isValid and the result of the e-mail validator.

02:56.340 --> 03:03.840
The idea behind this is that if I had another rule which was checked before isEmail and that would

03:03.840 --> 03:12.250
set isValid to false, then that this result here wouldn't then override the general validity of this

03:12.270 --> 03:13.850
value we receive.

03:13.860 --> 03:15.850
So we always take the previous validity

03:15.880 --> 03:17.120
we already have

03:17.160 --> 03:19.860
and then just update our new piece of information

03:20.040 --> 03:26.160
and only if all of them are true, isValid will come out as true or if we have no rules that apply,

03:26.310 --> 03:33.470
then it's also true because that's the default value. So that's the isEmail case, if we have a look at auth.js,

03:33.480 --> 03:36.410
we also have minLength and equalTo, 

03:36.660 --> 03:45.950
so I'll add these two methods here too, these two functions here too, minLength validator also receives

03:45.960 --> 03:50.110
the value but also receives the second argument, the minLength I want to check,

03:50.110 --> 03:52.580
so here I need some additional configuration,

03:52.630 --> 04:00.000
this is why I do have these values here in my controls object in this state in auth.js.

04:00.170 --> 04:06.530
So with this, here I will then in the end also return some information, so we can add a case here where we

04:06.530 --> 04:08.570
check minLength

04:08.570 --> 04:17.510
and if this applies, then isValid is isValid and the result of our minLength validator where I pass

04:17.510 --> 04:24.410
on the value and keep in mind, the minLength which is just the value of our validation rule, right,

04:24.440 --> 04:30.280
minLength is the key, the value is the minimum length we want to check,

04:30.290 --> 04:35.310
so the second argument here is just rules and then access the current rule

04:35.420 --> 04:46.120
and this will give us the value for that rule. And then I'll add a third method here, equalTo validator,

04:46.300 --> 04:51.070
there I expect to get a value and another value,

04:51.070 --> 04:57.520
so maybe we name this one check value, whatever you want and it will simply compare these two values

04:57.520 --> 04:59.580
and then also return true or false

04:59.740 --> 05:09.560
and therefore we can now also add a case here, case equal to and then we set isValid equal to isValid

05:09.860 --> 05:17.970
and the result of the equalTo validator where we pass the value and where we then also pass rules

05:17.970 --> 05:18.550
rule.

05:18.580 --> 05:20.980
Well that's not entirely what we want,

05:20.980 --> 05:23.530
here we set equalTo to password,

05:23.530 --> 05:29.390
so we actually want to get the value of some other control.

05:29.560 --> 05:36.070
Now since that information lives in the auth screen component and not in our validation file, we'll have to

05:36.070 --> 05:40.670
add some logic here to pass the right value to our validation function here.

05:40.960 --> 05:45.010
So rules rule, this is what I'll pass on for now,

05:45.040 --> 05:48.980
we can always revisit this if we need to change it later on.

05:49.210 --> 05:54.540
Now finally, I'll add a default case where I set isValid to true

05:54.610 --> 06:00.680
again, this is not strictly required but some linting rules might require you to add it

06:01.110 --> 06:07.450
and then at the end, I will return isValid here in our validate function.

06:07.470 --> 06:11.190
Now with that, we got to implement all these other validators,

06:11.190 --> 06:15.150
let's start with e-mail. For this, we'll reuse our regular expression,

06:15.150 --> 06:19.390
now if you're a regular expression expert, definitely feel free to write this on your own.

06:19.410 --> 06:28.870
I will go to stack overflow by googling for js regex email and find some help there and there, you

06:28.870 --> 06:34.090
will find this response which gives you this regular expression that should match or handle most e-mail

06:34.090 --> 06:36.570
addresses. With that, what

06:36.580 --> 06:44.720
we can simply do is we can return this regular expression, wrap it between forward slashes and then

06:44.720 --> 06:52.360
simply call test and pass your value and test will return true or false,

06:52.370 --> 06:57.830
so this will automatically give you back whether this did succeed or not, so whether you have a valid

06:57.860 --> 06:59.120
email or not.

06:59.540 --> 07:01.930
Now minLength is of course pretty easy,

07:02.000 --> 07:10.360
there we simply return val and check if the length of it is greater or equal

07:10.400 --> 07:13.430
and now you can fine tune this to your needs,

07:13.430 --> 07:16.120
should it strictly be greater or is equal also

07:16.170 --> 07:25.100
ok? Here I'll go with greater or equal to minLength, so to the second argument we get. And the equalTo validator,

07:25.410 --> 07:30.460
there I will simply return if value equals value.

07:30.470 --> 07:38.090
Now with that, the only thing I have to do is I have to export validate here and I'll export it as the default

07:38.090 --> 07:38.810
of this file,

07:38.810 --> 07:41.090
so validate is my default export

07:41.360 --> 07:45.830
and now we can use this validate function from our auth.js file.

07:46.160 --> 07:50.910
So for this, I'll import it first of all, I'll import validate from

07:51.050 --> 07:56.670
and now I just need to go to this utility folder and import it from the validation folder.

07:57.140 --> 08:03.160
And now we need to handle this or run this function in update input state

08:03.160 --> 08:06.420
when we set the validity of this value.

08:06.590 --> 08:16.520
So for this, what I can do is I can just call validate here and pass both the value and previous state

08:17.030 --> 08:19.240
controls for the given key

08:19.430 --> 08:26.410
and there, we have our validation rules property which stores all the validation rules, and this

08:26.410 --> 08:29.540
is a javascript object which we handle in the validate method,

08:29.530 --> 08:31.040
don't forget this.

08:31.280 --> 08:37.830
The only issue we'll have is with the equalTo validation because in the equalTo validator here,

08:38.060 --> 08:46.070
we actually try to check the two values for equality but the value we set up here in the auth screen for

08:46.070 --> 08:50.910
equalTo is just the name of the property of which we want to get the value.

08:51.260 --> 08:59.530
So in order to make sure that we handle this case correctly too, I will add an if statement here in update

08:59.570 --> 09:12.150
input state and I will see if this state controls for the given key, if in the validation rules here,

09:15.680 --> 09:18.650
equalTo exists. Now this is a very long check

09:18.650 --> 09:22.130
but this simply checks if we do we have the equalTo rule 

09:22.280 --> 09:30.220
and if we do have it, I want to store some information and some extra property, I'll name it connected values

09:30.660 --> 09:31.900
and it should be,

09:32.210 --> 09:34.330
and it's undefined by default of course

09:34.460 --> 09:38.860
and if we do have equalTo and of course you could add more checks if you had other types of connected

09:38.860 --> 09:40.050
values too,

09:40.370 --> 09:47.380
then I want to set connected value to a javascript object, actually I'll initialize it to be an empty javascript

09:47.390 --> 09:49.960
object so that it would be easier to extend

09:50.270 --> 09:55.880
but then I'll set connected value to a javascript object where I take the old connected

09:56.150 --> 09:58.430
value or properties which are none here

09:58.430 --> 10:03.500
but again if this were a more complex validation where you have other connected values too, then this

10:03.530 --> 10:04.610
might be useful

10:04.910 --> 10:14.300
and there, I'll add the equalTo property then and set it equal to this state controls, now we take

10:14.350 --> 10:18.880
the key, so the control of which we're currently doing the validation and so on

10:18.990 --> 10:25.280
and there I access validation rules equalTo, I know that it exists because that's exactly what I'm checking

10:25.280 --> 10:26.770
here in the if statement,

10:26.810 --> 10:30.460
now I get the name of the control which should be equal,

10:30.710 --> 10:35.260
so this is now actually some extra data I don't want to store here in equalTo

10:35.330 --> 10:37.260
but in some extra property,

10:37.460 --> 10:45.010
so here I'll name this equal control and extract the value stored equal to,

10:45.070 --> 10:53.510
so for confirm password, this will be password.

10:53.690 --> 10:59.760
And now that I got the equal control identifier, I can get the value of the equal control, turn this

10:59.790 --> 11:01.840
into a constant I'm not about to change it,

11:02.250 --> 11:11.520
so I'm going to get the value so I'll name it const equal value and set this equal to this state controls and

11:11.520 --> 11:13.580
now access the equal control

11:13.860 --> 11:15.910
and there, just the value

11:16.410 --> 11:25.270
and with that now, I can set for my connected value equal to the equal value.

11:25.270 --> 11:33.320
Now what's the idea behind this very complex way of getting the value of the equal control?

11:33.520 --> 11:40.270
Well now I got this property added to my connected value object and to the validate function, I can now

11:40.320 --> 11:43.570
pass a third argument, connected value.

11:43.570 --> 11:50.650
We don't expect it yet but we can go back to the validate method and actually get connected value

11:50.650 --> 11:57.160
here so that we have a reusable and dynamic way of getting connected values if required and for equal

11:57.160 --> 12:05.210
to, we would then not pass on rules rule but we would pass on connected value rule,

12:05.230 --> 12:08.150
keep in mind that rule is still equalTo

12:08.590 --> 12:16.180
and this is the identifier I'm using here too, in my connected value we also use equal to but the stored value

12:16.180 --> 12:18.520
now really is the value which should be equal

12:18.610 --> 12:21.730
and we can only get this information from within the auth screen,

12:21.790 --> 12:28.910
we can't get it in our helper method but now we have a really good way of getting this information correctly

12:28.990 --> 12:33.460
and with that we should have a valid validation method or function here.

12:33.580 --> 12:34.690
Now that was a lot of work,

12:34.690 --> 12:39.430
let's now see if this works and how can we see if it worked.

12:39.580 --> 12:45.530
Well besides not getting an error, what we can always do of course is we can inspect our state

12:45.700 --> 12:49.370
and as I have my react debugging tools attached, this should be easy.

12:49.570 --> 12:58.360
So save everything and reload this page and now let's inspect this email address, for this I'm going to expand

12:58.420 --> 13:06.430
this explorer, toggle the inspector and click on this input. However I'm not interested in the input

13:06.430 --> 13:07.050
here,

13:07.210 --> 13:14.890
I'm interested in the entire auth screen because this is where I have my controls state and the email

13:15.010 --> 13:20.860
and now let me see, it's false by default, if I now start typing I immediately get an error,

13:24.390 --> 13:32.330
value of type Boolean. Well because I set value equal to validate, value of course should still

13:32.330 --> 13:34.050
be equal to value,

13:34.070 --> 13:40.070
so to the value we receive as the second argument in update input state, here I want to set the valid property.

13:40.640 --> 13:43.850
So let's fix this and let's reload and try again,

13:44.310 --> 13:46.680
let's search for the auth screen again,

13:49.550 --> 13:52.690
here it is, here we have controls,

13:52.690 --> 13:54.490
let me type here.

13:54.820 --> 14:02.260
Now if we inspect e-mail, you see that here, valid is now true already, if I remove everything it's

14:02.320 --> 14:05.350
also true so validation doesn't really work right now,

14:05.460 --> 14:06.580
let's see what's wrong.

14:07.410 --> 14:11.280
So what's wrong is in our validation.js file, I of course

14:11.280 --> 14:16.880
forgot my break statements and therefore the code fall through or fell through

14:17.130 --> 14:22.280
and hence, we always made it into the default case where we just set it to true isValid.

14:22.590 --> 14:28.230
With this change in place if we now reload the application and dig into our auth screen one more

14:28.230 --> 14:28.950
time,

14:30.040 --> 14:30.850
here it is,

14:31.000 --> 14:34.820
let's now inspect controls and the e-mail control one more time.

14:34.950 --> 14:40.850
Now valid is false but if I do enter a valid email address, it becomes true,

14:41.290 --> 14:44.610
let's also see what password says.

14:44.620 --> 14:52.290
If I do enter something here, as soon as it's six characters long it becomes valid and confirm password

14:52.320 --> 14:54.080
is false,

14:54.150 --> 14:57.390
if I now enter something here, it immediately is true

14:57.600 --> 15:00.640
so it's always true. So confirm, that doesn't work,

15:00.660 --> 15:01.410
the rest works,

15:01.410 --> 15:07.610
now let's fix the confirm password then. The error for this can also be found in the validation.js

15:07.670 --> 15:12.240
file, the equalTo validator and check if value is equal to value

15:12.270 --> 15:13.060
and guess what,

15:13.110 --> 15:16.830
that's always true should be equal to check value of course.

15:17.310 --> 15:19.710
So now with that, let's reload this one more time

15:20.500 --> 15:21.970
and inspect everything

15:24.700 --> 15:29.500
on the auth screen controls, let's now have a look at confirm password.

15:29.800 --> 15:31.960
Let's enter a normal password first

15:32.080 --> 15:35.410
and now if I type confirm password, it becomes valid

15:35.410 --> 15:41.100
as soon as it's equal to the other password, if I type one more character, it becomes invalid.

15:41.650 --> 15:45.170
Now with that, we get validation in place, there's just one issue,

15:45.400 --> 15:52.840
if we ever had equal passwords here and I type on the other password, then confirm password doesn't become

15:52.870 --> 15:56.850
invalid even though now the two don't match.

15:56.860 --> 16:04.870
Now to fix this, we can go into auth.js where we have our update input state method,

16:06.210 --> 16:13.420
one thing I want to do is I don't just want to update the state of our value for the key we're working

16:13.420 --> 16:14.590
on, so for the password

16:14.710 --> 16:16.830
but also of the confirm password,

16:16.990 --> 16:21.550
so what I'll do is I will hardcode confirm password

16:21.550 --> 16:22.270
in here,

16:27.180 --> 16:31.840
set it equal to previous state controls, distributed

16:31.860 --> 16:39.220
all the properties controls confirm password and set valid to

16:39.330 --> 16:42.960
and now it depends if key which is the first argument we get here,

16:43.050 --> 16:50.340
so that would be password for example, if this is equal to password, then I want to rerun the validate function,

16:50.340 --> 16:55.380
the value however will be taken from the previous state because I don't want to use the state of the

16:55.380 --> 17:01.260
password control but of the confirm password one, so controls confirm password value would be the value I

17:01.260 --> 17:10.980
pass on. The rules will of course be the validation rule so previous state controls confirm password

17:10.980 --> 17:13.000
validation rules

17:13.500 --> 17:20.270
and a third argument, the connected value will also be passed though that would not be set.

17:20.280 --> 17:27.640
First of all let me pass the alternative where I take the old value, so previous state controls confirm

17:27.660 --> 17:33.750
password valid, in case that we don't validate password right now,

17:33.870 --> 17:39.060
then I want to leave the valid state of confirm password as it was. Now the problem is connected

17:39.060 --> 17:44.380
value which is only set if the control we're looking at which would be password,

17:44.430 --> 17:47.510
if that does have an equalTo validation rule.

17:47.700 --> 17:50.500
Now we can simply add another if block here

17:50.620 --> 17:56.390
where I say well yes if key is equal to password, I also want to set connected value then.

17:56.550 --> 18:01.870
So to do this, I'll then set connected value as here,

18:01.890 --> 18:10.010
however equal control can be hardcoded to be password because we can't extract it dynamically from

18:10.010 --> 18:15.620
the controller we're looking at because we're looking at password and equal value

18:15.650 --> 18:17.660
then works as before.

18:17.970 --> 18:20.970
So it's quite a verbose update input state method,

18:20.970 --> 18:27.300
I'm sure you can always fine tune this but it will do the job for our auth screen here.

18:27.720 --> 18:29.050
With this we could test this

18:29.070 --> 18:36.810
but the one issue we'll have is if we actually do work on the confirm password field, so key is confirm

18:36.810 --> 18:41.300
password, then we would first of all correctly set all the values here

18:41.520 --> 18:44.890
and then we would always override it with this set up here,

18:44.910 --> 18:47.540
so this is not really optimal.

18:47.540 --> 18:49.830
Now there are two approaches to circumvent that,

18:50.040 --> 18:55.910
you could wrap this set state call in an if statement to also only use this more verbose 

18:55.930 --> 19:03.210
version of it if you are really targeting the password field or are you switch the order so that

19:03.270 --> 19:09.020
our hardcoded confirm password check always comes first, like this.

19:10.260 --> 19:15.430
If you do that then your dynamic check will override the hardcoded one,

19:15.460 --> 19:21.610
one other thing we can and we should do is here where we set a connected value for the we are typing

19:21.610 --> 19:28.450
into password case, we're using this complicated way of extracting the value we want to compare and confirm

19:28.450 --> 19:28.910
password to,

19:28.920 --> 19:32.200
we can remove that. The value we want to compare to

19:32.320 --> 19:38.080
is just the value the user's entering because don't forget, we're typing in a password field, so we can

19:38.080 --> 19:40.650
set this and we should set this equal to value,

19:40.690 --> 19:46.110
otherwise we won't even get the correct value because we will be fetching the old one from state.

19:46.150 --> 19:55.290
Now with that if we reload our application here and we again dive into our auth screen here and have a

19:55.290 --> 20:02.520
look at the confirm password validity, if I enter tester into the main password, enter tester and confirm,

20:02.520 --> 20:06.020
it's valid, if I enter something into the main password, it's false, if I revert this,

20:06.130 --> 20:07.500
it's true

20:07.500 --> 20:11.510
again. Let's now also confirm that password and email behave correctly,

20:11.520 --> 20:12.950
password is valid,

20:13.290 --> 20:20.260
it's not if I make it too short and email also, well we tested before becomes valid

20:20.460 --> 20:24.500
if we do enter a valid email address otherwise it will be invalid.

20:25.050 --> 20:31.430
So with that, we get validation in place was quite a lot of work but the equal to validation obviously

20:31.470 --> 20:34.420
is the most complex thing to handle. With that,

20:34.440 --> 20:37.380
let's move on and let's see what we can do with that information

20:37.590 --> 20:42.050
because inspecting it here is nice for us but not that helpful to our users.
