WEBVTT

00:02.370 --> 00:08.100
Now with the filters rendered here of course would be nice to have a safe button here at the top that

00:08.100 --> 00:11.840
allows us to well save any changes to filters we made.

00:11.940 --> 00:16.530
So in the filters screen we already have one header button on header left.

00:16.530 --> 00:23.430
I now also want to have one on header writes on the right of my header so header right here is basically

00:23.430 --> 00:28.050
the same as we have it here so we can just copy this here because we want to have had her buttons there

00:28.050 --> 00:35.280
with one button that will be the safe button and the icon we can use there is for example and of course

00:35.280 --> 00:41.250
you can pick a different one but here I will go with for example safe and now when this is pressed however

00:41.400 --> 00:44.940
that will be a bit tricky of course big fire function.

00:44.940 --> 00:48.710
We could console log saving filters here.

00:48.900 --> 00:54.000
Now the actual logic for saving and applying filters is something we'll take care about in the next

00:54.120 --> 00:57.150
module but still there is some issue with that.

00:57.720 --> 01:01.530
If I save it like this and we go to the filters of course we can press this.

01:01.530 --> 01:12.150
This works but what would be nice is that we then really gather our current state of filters so basically

01:12.150 --> 01:19.170
get a snapshot of our current state here and for the moment locked us to the console in the next module

01:19.320 --> 01:26.740
applied is somehow to filter the recipes we're showing on the other screens notice this might sound

01:26.740 --> 01:28.910
trivial but we'll have a problem here.

01:29.110 --> 01:36.360
Our filters so the information which filters are set that's all stored in D state variables here right.

01:36.370 --> 01:38.560
And that's part of our component.

01:38.770 --> 01:41.530
Our button however isn't a navigation options.

01:41.530 --> 01:47.440
And yes there we get this snap data which for example gives us the navigation prop in the end but what

01:47.450 --> 01:52.990
we don't have here is access to the state of our component and that is what I need here though.

01:52.990 --> 01:57.970
And now this year is really an important pattern which might look like a strange hack or work around

01:58.540 --> 02:08.020
but which is the way of actually communicating between your navigation options and your component.

02:08.020 --> 02:13.150
If you depend on changing data in your component instead of your navigation options so indeed navigation

02:13.150 --> 02:18.830
options you need information about data that changed in your component.

02:18.840 --> 02:24.980
This is also an approach you find in the official box of risk navigation by the way we can use parents

02:25.190 --> 02:30.940
so that thing we pass between screens to communicate between our component and the navigation options.

02:31.010 --> 02:35.070
And this might sound strange but this is exactly what we'll do now.

02:36.360 --> 02:44.170
Let's say here in our component we add a new function and I'll name does function here save filters.

02:44.460 --> 02:46.950
You can name it however you want.

02:47.000 --> 02:49.970
It's a function that takes no arguments but that has one job.

02:51.110 --> 02:57.410
It will treat applied filters constant for example which is an object which gathers our filters.

02:57.410 --> 03:02.300
So there we could have gluten free as a key and we store is gluten free as a value.

03:02.300 --> 03:07.250
We have lactose free as a key and we store our current is lactose free.

03:07.250 --> 03:08.480
State value.

03:08.690 --> 03:17.540
We do the same for vegan with is vegan and we do the same for is veg at Terry end and is vegetarian.

03:17.540 --> 03:23.930
Like that and thereafter I will console lock this applied filters thing.

03:24.070 --> 03:32.770
Now the thing is I would like to give access to dysfunction which is part of my component to my navigation

03:32.770 --> 03:38.080
options so that I can trigger dysfunction from inside the navigation options and for this we can use

03:38.200 --> 03:38.890
parables

03:42.490 --> 03:49.300
let's add use a fact so that we have a way of executing code whenever our state changes because that's

03:49.300 --> 03:58.810
when I want to forward this updated function which basically captures my current state to my navigation

03:58.810 --> 03:59.830
options.

03:59.830 --> 04:06.280
So here I can add use effect and use a fact takes a function which runs whenever our state changed and

04:06.280 --> 04:16.460
whatever the component rendered and in there we can now use props navigation set parents.

04:16.460 --> 04:18.130
We haven't used set parents before.

04:18.130 --> 04:20.400
We only work with get Perrin.

04:20.510 --> 04:27.170
We didn't upset parents because before we only set parents when we navigated to a new screen then for

04:27.170 --> 04:33.530
example as in the categories screen we you passed our parents like this to the new screen but we can

04:33.560 --> 04:42.160
use set parodies to update the parent's values for the currently loaded screen now here on this screen.

04:42.160 --> 04:44.600
We got no parents so it's empty.

04:45.690 --> 04:51.120
Hence we can set parents to a brand new object here and I want to add one entry there but you could

04:51.120 --> 04:52.810
add as many as you want.

04:53.780 --> 05:04.040
I want to add save key and you can take any name for that key which you want and point at safe filters

05:04.060 --> 05:08.520
so at dysfunction I don't execute the function I don't add parentheses.

05:08.580 --> 05:10.050
I just pointed it.

05:10.080 --> 05:16.740
I just use this variable which holds a pointer at this function the end and forward this value so forward.

05:16.740 --> 05:23.250
This pointer or store this pointer to that function in its safe key in that object which analysis as

05:23.250 --> 05:28.230
parents in this screen in the filters screen.

05:28.430 --> 05:34.280
This allows us to go to the navigation options and there we have access to NAV data and data for to

05:34.340 --> 05:43.310
navigation right and that means that here for the safe button when pressing this we can actually use

05:43.310 --> 05:46.790
nav data dot navigation gets param.

05:46.790 --> 05:53.060
That is how we can retrieve a parameter and that's available here navigation options to save and I can

05:53.060 --> 06:03.270
retrieve that save parameter which I'm setting here in use affect and I know it is this super strange

06:03.280 --> 06:08.120
the first time you see this and it looks like a really dirty hack but it is not.

06:08.200 --> 06:14.230
This is a valid way of communicating between your component and your navigation options which you typically

06:14.230 --> 06:18.300
need when having action items in your navigation options.

06:18.310 --> 06:26.880
This will get us access to our parameters and there we access the safe parameter the safe parameter

06:27.600 --> 06:33.180
will be this function and we update the value in that parameter whenever a stage changes and we need

06:33.180 --> 06:38.880
to do this because in this function this is recreated whenever our state changes and it locks in the

06:38.880 --> 06:40.530
latest state values.

06:40.620 --> 06:45.420
And that's of course what we want when does function gets executed eventually with the help of parents

06:45.750 --> 06:49.110
through that button in the navigation options.

06:49.110 --> 06:54.300
So we use parents as a way of communicating between our component and the navigation options.

06:54.300 --> 06:59.730
Kind of a work around but indeed the one you find in the official box as well and the way of how you

06:59.730 --> 07:07.390
communicate here now before we saved is there are two things we need to do though use effect right now

07:07.390 --> 07:14.320
runs whenever just component updates in the end it should only run when safe filters hold a new value

07:14.440 --> 07:20.740
soil at the second argument to use a fact which is this array of dependencies and there is safe filters

07:20.980 --> 07:23.530
so this variable here which holds a function is a dependency.

07:23.530 --> 07:26.470
And right now it is will always rebuild when you component rebuild.

07:26.470 --> 07:30.900
So it's not really a dependency that helps us but we'll soon fix this.

07:31.090 --> 07:37.600
And props also as a dependency now actually to a wide unnecessary re renders whenever anything in the

07:37.600 --> 07:39.140
parent component changes.

07:39.370 --> 07:48.330
All use a different way of extracting my navigation prop I'll use these structuring here like this navigation

07:48.870 --> 07:49.770
equals props.

07:49.770 --> 07:56.350
This is a syntax which uses object D structuring which means props as an object and this pulls out the

07:56.350 --> 08:02.460
navigation key and stories is in a brand new constant of the same name self the same navigation it stores

08:02.460 --> 08:05.560
the value in the navigation prop in that navigation constant.

08:05.560 --> 08:11.940
Now that's what the syntax does and the advantages that we now have a navigation constant here which

08:11.940 --> 08:17.780
we can use and use effect without props because we have to is stored in a separate constant now.

08:17.820 --> 08:21.860
And now we can add this as a dependency which means when this changes does we'll rebuild.

08:21.990 --> 08:27.500
But if anything else in the props changes does will not unnecessarily rerun the effect.

08:27.750 --> 08:34.350
Now to make sure that safe filters only updates when our state changes we can import the use callback

08:34.350 --> 08:38.000
hook from react and no hook built into react.

08:38.080 --> 08:43.560
And this allows us to wrap a function so that this function is actually cached by react and is only

08:43.560 --> 08:46.710
recreated if it's dependencies changed.

08:46.710 --> 08:53.610
We wrap this around our safe filters functions just like this so we pass this function as an argument

08:53.610 --> 08:56.010
to use callback and use callback.

08:56.010 --> 09:01.710
All that takes a second argument which is an array of dependencies and there we need to specify all

09:01.710 --> 09:03.300
the dependencies we have here.

09:03.300 --> 09:09.930
That could change and that would lead us to will recreate that function that essentially is the case

09:09.930 --> 09:18.410
of one of the four states here changes so is gluten free is lactose free is vegan and is vegetarian

09:18.420 --> 09:23.610
are now all dependencies of use callback and that means this component function here will be recreated

09:23.730 --> 09:26.160
if any of these states here changes.

09:26.310 --> 09:32.210
If anything else causes this component to re render will not recreate this function.

09:32.310 --> 09:37.410
And that's in turn important because that save filters function is a dependency of use effect.

09:37.530 --> 09:43.620
So if Dad is recreate it use effect runs again which updates our parents and we want to keep this to

09:43.620 --> 09:48.340
a minimum and not constantly update our parents but really only do that if we need to do it.

09:49.950 --> 09:56.790
With this in place we should now be able to press the save button and see the filters we chose.

09:56.850 --> 09:59.250
So lets go whips to filters here

10:01.970 --> 10:03.770
and now this breaks.

10:03.770 --> 10:06.000
Do you have any idea why it would break.

10:06.980 --> 10:14.380
The problem is I have an immigration year as a dependency and use effect and I explained why I have

10:14.380 --> 10:20.590
it right that I don't want to have props in its entirety ends on a problem chest is when we call sad

10:20.590 --> 10:21.090
parents.

10:21.100 --> 10:27.970
We add new parents to our navigator in the end and what does all this does is it causes navigation to

10:27.970 --> 10:28.770
change.

10:28.900 --> 10:31.150
So in the end I have an infinite loop here.

10:31.300 --> 10:36.810
If I remove navigation here as a dependency then this will work if we now save this.

10:36.820 --> 10:42.550
Now if you close both apps here with the help of the task managers and you then restart that on both

10:43.120 --> 10:50.230
operating systems you'll see that now it is indeed works and you can hit save here go what you'll not

10:50.230 --> 10:53.220
see is the output in the log here.

10:53.230 --> 10:58.960
That however makes a lot of sense because if you have a close look at these safe button in our header

10:59.780 --> 11:06.310
that what I'm doing here in on press is I'm in the end executing this function but what does this do.

11:06.370 --> 11:11.350
It retrieves our parameters saved indie or stored in the safe key.

11:11.350 --> 11:12.570
What is this.

11:12.580 --> 11:17.770
Well that is as mentioned before a pointer at the safe filters function so we retrieve that pointer

11:18.250 --> 11:22.630
if we then don't do anything with that pointer while not doing anything.

11:22.630 --> 11:27.940
That is a pointer at a function so of course we need to execute it like this by adding parentheses.

11:27.940 --> 11:34.120
Alternatively we simply get rid of this anonymous arrow function here and we simply bind on press to

11:34.120 --> 11:40.420
the result of retrieving our point or heater like that because then does pointer at the function will

11:40.420 --> 11:42.270
be executed for us when we press this.

11:42.280 --> 11:43.210
That's the alternative.

11:43.960 --> 11:48.370
So now if we safeties and we therefore let this reload we go back to the filters.

11:48.370 --> 11:55.200
If I hit save here we now see output in the lock the scroll up a bit here.

11:55.300 --> 11:56.940
Everything set to false.

11:57.040 --> 12:02.800
If I now said lactose free and vegetarian to true and I had save we see a number lock and there indeed

12:03.070 --> 12:09.080
vegetarian and lactose free is set to true which is exactly what I have here.

12:09.100 --> 12:14.420
So now that is working let's confirm that it also works on Android by going to filters there as well.

12:14.440 --> 12:18.480
That said lactose free to true and safety is if we do so.

12:18.520 --> 12:20.080
That's our Android output here.

12:20.110 --> 12:22.290
Lactose free is true everything else is false.

12:22.330 --> 12:24.550
So now it has all to works.

12:24.550 --> 12:29.830
So this work around can be a bit tricky to wrap your head around and avoiding this infinite loop here

12:30.020 --> 12:31.270
also is important.

12:31.330 --> 12:38.230
Making sure that you will use callback here too wide unnecessarily unnecessary rebuilds off this function

12:38.230 --> 12:43.850
here also is something you should do so that when you update the parents and therefore this component

12:43.850 --> 12:48.950
rebuilds you don't also rebuild that function and therefore also enter an infinite loop.

12:48.950 --> 12:54.380
But with that we have a way of communicating between component and navigation options which is typically

12:54.380 --> 13:00.470
a pattern you need when you have action items in your action bar and you want to trigger something that

13:00.470 --> 13:04.720
depends on data managed in your component with the help of these buttons.
