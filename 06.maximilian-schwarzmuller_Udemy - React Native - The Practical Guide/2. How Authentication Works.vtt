WEBVTT

00:02.200 --> 00:08.050
Now it's important to understand how authentication works because if you're having a web development

00:08.050 --> 00:12.100
background you might be used to authentication working a bit differently.

00:12.100 --> 00:17.910
So we have a server firebase in our case but that can be any server to which we talk from our ReACT

00:17.920 --> 00:19.570
native mobile app.

00:19.570 --> 00:25.330
And this is the server which typically also authenticates us so where we can send the email and the

00:25.330 --> 00:30.030
password to user entered to create a new user or to log a user in.

00:30.040 --> 00:32.940
So we send that off data to the server.

00:32.940 --> 00:39.880
Now the server responds with something for example with an error if the credentials are wrong or with

00:39.880 --> 00:46.870
a success response if they're correct and in a traditional web application a server would then also

00:46.870 --> 00:53.550
store a so-called session on the server and return a session key to the front end.

00:53.560 --> 00:59.620
So to the browser for example that basically allows the browser to find out that the user using this

00:59.620 --> 01:02.580
app in this browser is authenticated.

01:02.590 --> 01:08.820
Now this works a bit differently for mobile apps because there you communicate with service which are

01:08.840 --> 01:13.640
stateless for example a RESTful API eyes or a graph to LAPD.

01:13.930 --> 01:19.360
And there you don't really have a session because the server doesn't care about the individual clients.

01:19.420 --> 01:23.680
It doesn't save any data about whether you are authenticated or not.

01:24.280 --> 01:27.010
Instead you work with so-called tokens.

01:27.010 --> 01:30.780
The idea is not too far away from the session idea.

01:31.030 --> 01:36.250
When you log in and the server checks the e-mail and the password and determines that both is correct

01:36.850 --> 01:38.680
the server creates a token.

01:38.680 --> 01:45.430
It uses a certain algorithm for that and it uses a key a private key which only the server knows this

01:45.430 --> 01:47.530
token is then returned to you.

01:47.530 --> 01:53.470
So to your app for example to react native mobile app and they are you can stored a token in some storage

01:53.860 --> 01:56.010
for example in the redux storage.

01:56.020 --> 02:00.700
So in memory managed with redux in memory whilst your app is running.

02:00.910 --> 02:08.260
Now why do we need that token for one as long as we have that token we can determine in the mobile app

02:08.290 --> 02:13.780
that the user is probably locked in and day off for a forward the user from the authentication screen

02:13.780 --> 02:19.450
to our main app screens and so on and when the user clicks logout we would simply delete that token.

02:20.110 --> 02:25.630
But we also need that token for something else on the server as I mentioned we typically have certain

02:25.690 --> 02:31.600
resources certain you are ELTs which are only exposed to logged in users.

02:31.690 --> 02:37.860
So for example in our app creating products is probably not something every user should be able to do.

02:37.910 --> 02:43.720
And therefore if you want to send the request to such a protected resource you need to attach that token

02:43.720 --> 02:50.500
to the request so that the server which created the token in which they offer can check with that private

02:50.500 --> 02:55.580
key whether the token is valid so that the server can determine whether you have access or not.

02:55.660 --> 03:02.620
If you send a wrong token or an invalid token or no token at all access will be denied and you get back

03:02.620 --> 03:05.090
an error if you have a valid token.

03:05.110 --> 03:11.050
And again the server is able to check whether to token is valid or not you will be granted access and

03:11.050 --> 03:14.970
you can therefore it and access to resources write data whatever it is.

03:15.070 --> 03:17.430
This is how authentication works.

03:17.560 --> 03:19.560
And this is how we will implement it here.

03:19.570 --> 03:25.390
Now the good thing is firebase which we're using as a dummy backend already has all that token creation

03:25.390 --> 03:29.460
user management stuff built in so we don't need to worry about that.

03:29.560 --> 03:34.210
We just need to send the right requests and then manage that token and we're good to go.
