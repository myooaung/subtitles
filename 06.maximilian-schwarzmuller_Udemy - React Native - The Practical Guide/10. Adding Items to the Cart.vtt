WEBVTT

00:02.220 --> 00:06.440
For the add two card feature will need to work on two things.

00:06.450 --> 00:09.850
One is of course that we can have a card screen that we have.

00:09.880 --> 00:17.250
I can hear in our header that takes us to the card screen where we can see like the total sum and the

00:17.250 --> 00:20.640
card items and where we have that order now button.

00:20.640 --> 00:26.580
But I'd say that's the second step because the the more important first step is that we add the logic

00:26.910 --> 00:33.030
to manage card items and dad involves redux for this.

00:33.040 --> 00:40.620
I'll add a brand new reducer a second reducer which I'll name card card J.S. and also actions fall.

00:40.750 --> 00:43.280
And this is not actually action fall we will populate.

00:43.330 --> 00:45.270
We'll do that with the products fall later too.

00:45.280 --> 00:52.250
Once we dive into adding products and so on but for now let's start with the card feature so here in

00:52.250 --> 00:55.010
the card J.S. fault in the reduced folder.

00:55.250 --> 01:00.350
I'll set up my initial state for that card slice and again it's all these separate producers and the

01:00.350 --> 01:05.390
states they manage to make up that total redux store because in the end that's what you then combined

01:05.390 --> 01:11.420
here with combined reduces into one route reducer in one big state in the end.

01:11.520 --> 01:16.150
We just have these individual sub states to make managing the data easier.

01:16.230 --> 01:22.100
So here in the card reducer how should the state for our card look like.

01:22.500 --> 01:31.000
While our card will have a bunch of items could be an array and a sum which initially zero so a total

01:31.360 --> 01:35.680
amount you could say you could of course alter named US total amount maybe to make it really clear what

01:35.680 --> 01:36.720
this is.

01:36.730 --> 01:39.160
So these are the two things that make up my card here.

01:39.160 --> 01:45.460
And as always I can't emphasize this enough there is more than way of implementing this so if you want

01:45.460 --> 01:47.350
to manage some other data here as well.

01:47.380 --> 01:48.480
Definitely do so.

01:48.490 --> 01:50.920
There is no single right or wrong approach.

01:50.920 --> 01:53.330
This is just my approach of building this app.

01:53.410 --> 01:58.480
Now it's important that for this card here I want to make sure that if we have an item in the card already

01:58.590 --> 02:02.120
let's say the red shirt and I click to cart a second time.

02:02.440 --> 02:09.340
I don't add queue items to say Ray but I still only have one item in there and instead every item in

02:09.340 --> 02:15.850
that items array should be an object where I manage like the idea of the product may be where I have

02:15.850 --> 02:18.940
the title and the quantity of the item in the cart.

02:18.970 --> 02:22.630
So dead would then change to 2 if I click on it a second time.

02:22.720 --> 02:31.960
DFAT you could actually also argue that items maybe shouldn't be an array but maybe a javascript object

02:32.170 --> 02:37.930
because that allows us to store the idea of the product as a key and the value could be an object with

02:38.220 --> 02:42.420
the title with the quantity with the price.

02:42.470 --> 02:43.840
That's just an alternative.

02:43.840 --> 02:48.830
You could also do it as all with an array but that's actually the approach I will use.

02:49.180 --> 02:54.190
Now the reducer I export therefore is a reducer which of course gets a state which has our initial state

02:54.190 --> 03:00.700
as a default value and an action as our argument which in the end needs to return some data.

03:01.150 --> 03:04.890
So in the end it needs to return a new state which is then used by redux.

03:04.900 --> 03:07.210
Now we need an action to continue.

03:07.660 --> 03:15.610
So you're all expert a constant and action identifier and all named is add to cart the identifier is

03:15.610 --> 03:22.790
up to you all go with add to cart like this and in the actions file I will create such a action.

03:22.780 --> 03:24.490
Create or function.

03:24.610 --> 03:26.620
So here in number a constant which I'll name.

03:26.650 --> 03:34.800
Add to cart which receives let's say the full product object which I want to add so that I can pull

03:34.800 --> 03:40.260
out information I need and then in here we have to return such a action object which has a type which

03:40.260 --> 03:44.730
is add to cart and then our product.

03:44.730 --> 03:50.010
This is just a way of creating these actions that makes it very simple for us to do that inside of our

03:50.010 --> 03:51.240
components.

03:51.240 --> 03:56.970
So in the end the card reducer in all reduces actually but niqab reduces is the place where we care

03:57.310 --> 03:58.010
will get set.

03:58.020 --> 04:06.180
Add to card action So here we need to switch the action type and handle the case that it's Add to Cart

04:06.360 --> 04:07.950
and therefore you should import.

04:07.950 --> 04:14.050
Add to Cart from that actions folder and there from the card file it's by the way important.

04:14.070 --> 04:19.200
This action when it's dispatched is received on all road users but if you don't handle it with a separate

04:19.200 --> 04:26.460
case your default case will kick in which normally should just return your current state slice for this

04:26.460 --> 04:31.100
reducer which means the state slice for district use reason changed here.

04:31.140 --> 04:34.550
However in the card reduce I of course want to change my state.

04:34.710 --> 04:36.750
Hence I do handle to add to cart.

04:36.750 --> 04:39.660
Case here and now in add to cart.

04:39.660 --> 04:41.240
What should happen there.

04:42.280 --> 04:50.720
Well we get our added product we can pulled it out of the action because are in the action we'll have

04:50.720 --> 04:51.750
a product key.

04:51.770 --> 04:56.040
That's what we just set up here in the action cart just fall.

04:56.060 --> 05:00.410
So will it get our product that I'm storing it in a constant added product here with which we can work

05:00.430 --> 05:00.710
now.

05:01.920 --> 05:08.910
And we'll have our product price here which is of course added product price and we'll have our product

05:08.940 --> 05:16.170
title which is added product daughter title before we continue let's define how a card item.

05:16.170 --> 05:21.460
So what we store here should look like the value we have in there.

05:21.650 --> 05:30.550
So go to my models folder and add a card dash item dot shares fall here and then add a cart item clause

05:30.580 --> 05:32.650
which receives the constructor.

05:32.890 --> 05:39.370
And before I forget it again which needs to be import export it here and now in that constructor I expect

05:39.370 --> 05:46.750
to get the quantity of the product we're about at the product price.

05:47.020 --> 05:56.950
The product title and the sum for this item if we have three times the red shirt are a somewhat B three

05:56.950 --> 05:58.980
times twenty nine point ninety nine.

05:59.110 --> 06:01.690
So roughly around 90 dollars.

06:01.690 --> 06:10.220
Now what I don't get here is the product idea because I will use that as a key inside of my object here.

06:10.220 --> 06:13.440
Which items holds and then will become clearer once we implement it.

06:14.150 --> 06:17.690
So here in the card item I just store all the data I receive.

06:17.840 --> 06:22.890
Quantity product price and I have that data.

06:22.900 --> 06:34.200
India which I need to output later so product title and the some like this.

06:34.260 --> 06:41.520
And now back in the reducer we can of course import discard item plus from the models folder and from

06:41.520 --> 06:47.880
card item here and now back in that add two card case down there.

06:47.980 --> 06:52.680
We've first of all need to find out whether that product is already part of our items.

06:52.680 --> 06:59.370
Now as I mentioned I'll add every new product by adding a new key to items which is the idea of that

06:59.370 --> 07:01.020
product since Dad is unique.

07:01.020 --> 07:06.870
We always have each key only once and then the value will be a card item as we justified it in models

07:07.110 --> 07:12.990
and hence I know if the idea of the product I'm getting here is already a key of items then this already

07:13.170 --> 07:17.050
has our item as a card item.

07:17.070 --> 07:26.190
So here we can simply check if items for added product dot I.D. exists.

07:26.200 --> 07:36.290
So if that returns something true ish so not undefined then we already have the item in the card which

07:36.290 --> 07:38.800
is OK but then we just need to change the quantity.

07:38.860 --> 07:41.600
Otherwise we'll need to add a brand new item.

07:41.600 --> 07:45.920
So let's start with the ALS case because that's the case will first encounter when we add something

07:45.920 --> 07:47.170
for the first time.

07:47.330 --> 07:51.910
There we need a new card item and a created with the new keyword.

07:51.920 --> 07:58.460
And the card item class be defined and in there we need to provide the quantity which of course is one

07:58.520 --> 08:00.530
if we just add a new item.

08:00.920 --> 08:08.840
We need to provide the product price the product title here and to some and to some of course initially

08:09.050 --> 08:11.580
is just our product price right.

08:11.600 --> 08:17.810
Because if we add one item of that price than the sum for discard item is our product price.

08:17.810 --> 08:21.200
And now it is a new card item has to be added to our card items here

08:24.100 --> 08:29.050
so here we return a copy of our state.

08:29.220 --> 08:38.290
And we said items equal to a new object where I copy all my existing state items in so that I copy my

08:38.290 --> 08:39.630
existing items.

08:39.640 --> 08:47.200
Object here and then I add a new key with this dynamic syntax with the square brackets where the key

08:47.200 --> 08:55.280
name is added product dot I.D. That's what I meant with the idea of the product being the key in our

08:55.340 --> 08:59.190
items object and the value is our new card item.

08:59.390 --> 09:04.730
This is just a syntax you have to know it's vanilla javascript This is how you can add or axis as up

09:04.730 --> 09:11.570
here a dynamic property instead of hard coding it as a string here by the way disappears and of course

09:11.600 --> 09:20.170
all be state DOT items by mistake so if this we should add a new card item here.

09:20.230 --> 09:24.790
Now if you already have an item in the card then of course we don't create a new card item instead we

09:24.790 --> 09:31.480
want to update the existing one so I'll have my updated card item here and for that I still create a

09:31.480 --> 09:35.470
new card item but I'll pre populate it with some existing data.

09:35.800 --> 09:46.960
For example the quantity here we get that from state items for the idea of the added product because

09:46.960 --> 09:52.150
that should already be part of the state items we're checking this here and this will have a quantity

09:52.150 --> 09:57.730
key of course because such a item here in my items is just of type card items so we'll have a quantity

09:57.730 --> 09:58.480
property.

09:58.600 --> 10:02.020
We simply add one to that because we're adding a new card item.

10:02.080 --> 10:09.560
So we have to increment this now card item is a second argument takes the product price that of course

10:09.570 --> 10:14.540
since we will built the app such that the price never changes which would add a lot of complexity here.

10:14.550 --> 10:19.860
We would have to manage the card a totally different way in that case we would have to store each card

10:19.890 --> 10:25.350
item as a list of transactions for this card item which is set to match for this year.

10:25.350 --> 10:30.760
So since this never changes since the price never changes we can Indiana just take the prod price we're

10:30.760 --> 10:36.930
getting or take the existing price we stored before because that again will never change.

10:36.930 --> 10:42.150
The title might change in a want to store the most recent title here so we'll definitely take to one

10:42.150 --> 10:46.620
of the product we're getting here instead of my old snap snapshot.

10:46.710 --> 10:51.480
And last but not least the last value here my total sum for this card item.

10:51.480 --> 10:59.520
That of course is to occur current some so I access state items 40 ideas here some plus the product

10:59.520 --> 11:06.660
price because we add one new item here we have to add the price times 1 to the current sum that's the

11:06.660 --> 11:08.570
updated card item.

11:08.580 --> 11:16.750
Now with that we can return our new state slice here by copying the old states and setting items equal

11:16.930 --> 11:26.460
Q And now important to an object where we copy state DOT items but where we now again set added product

11:26.460 --> 11:33.310
dot I.D. And yes this exists already but with that we simply overwrite it with our updated card item.

11:33.310 --> 11:37.070
So we do the same update we do down there now.

11:37.100 --> 11:40.150
That however is not all we need to do we need.

11:40.250 --> 11:43.750
We need to change the total amount as well because that of course changes.

11:43.940 --> 11:52.420
So when we add a item for the first time then the total amount should be basically our old total amount.

11:52.430 --> 11:57.530
So state total amount plus product price and it's the same.

11:57.530 --> 12:04.910
If we add an item to an existing card or when it already exists in there because in the end our total

12:04.910 --> 12:10.130
always justice to old total plus the price because we always add one item off that product.

12:10.130 --> 12:12.190
That's how does Apple work.

12:12.200 --> 12:14.480
So our update statement here is almost the same.

12:14.480 --> 12:18.920
The only thing that differs is here how we create that card item therefore we can of course all the

12:18.920 --> 12:24.110
reuse this code moved as out of the if else block and instead of having two different constants here

12:24.110 --> 12:27.590
we can create a variable before we enter D if statement

12:30.670 --> 12:33.150
updated or a new card item.

12:33.190 --> 12:36.990
Maybe that could be a name because we don't know what it will be in advance.

12:37.090 --> 12:44.590
And then here in the if branch here we said updated or new card item to this updated card item here

12:44.590 --> 12:49.900
on the other hand we set it to this new card item and here we didn't always use the updated or new card

12:49.930 --> 12:54.270
item and with Dad we have some code reuse such here and.

12:54.400 --> 13:00.610
Well don't repeat ourselves which is always good whenever a side note copying the state here of course

13:00.610 --> 13:04.420
is always redundant because you always set both items and total amount.

13:04.420 --> 13:09.520
So if you always only have these two fields in here and you always change to both you don't need to

13:09.520 --> 13:15.940
copy the existing state if you ever introduce another piece of data to your state slice here which you

13:15.940 --> 13:20.680
don't change down here or whoever you need to copy your old state so that you don't lose that additional

13:20.680 --> 13:21.150
data.

13:21.190 --> 13:26.470
Hence here I will leave that copying functionality even though we don't technically need it here but

13:26.470 --> 13:30.750
if we ever should change our state we're saved and we don't forget to copy it.

13:31.030 --> 13:34.310
And we therefore lose data.

13:34.330 --> 13:36.190
Well there was a lot of work with that.

13:36.190 --> 13:38.300
We can start dispatching does action.

13:38.320 --> 13:42.130
And of course I wanted dispatched from the product overview and the product details.

13:42.190 --> 13:45.650
Because in both screens I have add to cart buttons.

13:45.710 --> 13:50.890
Let's start on the products overview screen there to dispatch redux actions we need to include the use

13:50.890 --> 13:52.380
dispatch hook here.

13:52.600 --> 14:00.880
With that here we can simply get access to this dispatch function by calling use dispatch like this.

14:00.880 --> 14:08.410
And now when we click on Add To Cart down there we can dispatch our action here.

14:08.410 --> 14:13.330
And of course by the way instead of using inline functions here you could have functions stored in separate

14:13.480 --> 14:15.930
constants inside of your functional component here.

14:16.090 --> 14:24.700
As an alternative I'll stick to inline functions for now and I will import all my actions here as card

14:24.790 --> 14:32.080
actions from the store folder and they're the actions folder the card file.

14:32.080 --> 14:37.060
Now this is a import syntax which merges all exports from the file together into one object.

14:37.060 --> 14:40.020
We only have one export here though for it.

14:40.030 --> 14:42.610
Therefore you could all to target that specific export.

14:42.610 --> 14:46.630
Later we'll have multiple exports and therefore I'll use this approach.

14:46.630 --> 14:49.750
So here we then dispatch card action start.

14:49.930 --> 14:55.400
Add to Cart and this is a function we have to execute this is our action creator function and this as

14:55.400 --> 14:57.050
our argument takes our product.

14:57.430 --> 15:05.270
So in the and here we have to pass an item data dot item which is just our product here the product

15:05.270 --> 15:06.330
detail screen.

15:06.410 --> 15:12.850
Therefore we do the exact same thing we import use dispatch from react redux.

15:12.890 --> 15:17.560
Therefore a here we can get access to the dispatch function by calling you as dispatch.

15:18.050 --> 15:23.990
And then for this button here in the inline function or in a separate named function if you like that

15:24.440 --> 15:26.330
you can call dispatch.

15:26.360 --> 15:31.490
Now we need to import our actions and I'll use the same syntax as before where I input everything as

15:31.490 --> 15:42.190
card actions from the store folder the actions folder the card file and now card actions call add to

15:42.190 --> 15:48.630
cart here and forward the selected product which is our product we want to add to the card here.

15:48.820 --> 15:54.190
This hopefully dispatches actions such that the item is added to the cart but of course right now we

15:54.190 --> 15:56.040
can't confirm this.

15:56.110 --> 16:04.390
Well actually we can you can spin up react native debugger and I haven't used this before but in there

16:04.990 --> 16:12.010
can now hit command or control t to open a new tab then confirm this port here

16:15.030 --> 16:15.660
and then

16:19.500 --> 16:20.520
go to your apps

16:23.560 --> 16:30.470
and in their open the debugging menu on ours with command D on Android with control or command.

16:30.510 --> 16:30.790
M

16:35.000 --> 16:43.990
click on debug remote javascript now mine opened on Port 19 0 0 3 actually so I opened the react native

16:43.990 --> 16:45.290
debugger on the wrong port.

16:45.300 --> 16:52.120
Select me again hit command T or control T in the debugger and choose 19 o free use whatever port open

16:52.120 --> 17:00.460
for you in Chrome click confirm and now does connects to your running react app here in the debugger

17:01.210 --> 17:05.550
make sure you close your chrome debugger and then reload your app.

17:05.590 --> 17:09.630
Now this should connect here and now not only can you Inspector app here.

17:09.640 --> 17:11.310
As I explained it earlier.

17:11.410 --> 17:11.940
No.

17:11.980 --> 17:17.950
You can also have a look at the part up there and that is your read X debugger.

17:17.950 --> 17:22.200
There you can see what redux is doing for you.

17:22.280 --> 17:28.620
The only thing you have to do for it is to make it work is installing you package with npm install dash

17:28.660 --> 17:34.160
dash safe def because it's a development dependency which we only need during development and their

17:34.160 --> 17:40.520
install the redux dev tools extension.

17:40.650 --> 17:44.870
Go to your app jazz file there after and then import

17:47.350 --> 17:50.010
this from this redux.

17:50.010 --> 17:56.280
Def tools extension you can import compose with Def tools from there.

17:56.300 --> 18:00.050
That's a function you pass to create store as a second argument.

18:00.090 --> 18:03.260
Is simply executed there like this now by the way.

18:03.260 --> 18:04.530
Does this code does.

18:04.560 --> 18:10.020
Import and just use it you should remove before you deploy your app because this is only something that

18:10.020 --> 18:14.160
should be running during development not in your production apps you need to remove that before you

18:14.160 --> 18:20.580
deploy rep but during development that is fine with it added If you now safeties you'll actually see

18:20.580 --> 18:26.940
that here in this redux Inspector you see and in it action being dispatched you didn't see that before.

18:26.940 --> 18:30.560
That's action which automatically is dispatched when your app starts.

18:30.570 --> 18:35.670
If I now click on to cart here you'll also see the add to card action.

18:35.670 --> 18:41.990
Now here you can view details about that action like the day that it was attached to it and about your

18:41.990 --> 18:48.120
state here and there you see for example this is my product state and.

18:48.590 --> 18:50.380
Whereas my card state.

18:50.670 --> 18:54.840
Well that's of course missing because whilst we have to reduce our into action set up in the app just

18:54.840 --> 18:58.660
fall in combined with users we're not including the card state.

18:58.740 --> 19:07.110
So there let's import the card reducer from dot slash store reducer as card and now with that imported

19:07.440 --> 19:13.890
we can add it to our combined road users object and now data we add a card slice for example point that

19:13.890 --> 19:20.560
the card reduce or different now this gets included into our redux store with Dad if you now wait for

19:20.560 --> 19:25.830
it to reload and you click on to card again now and is add to card action under state.

19:25.830 --> 19:30.960
You'll see that now there is a card slice and now you see there is a total amount you see there is an

19:30.990 --> 19:35.700
item with the key p 1 which is our product with a quantity of 1 that price.

19:35.710 --> 19:43.900
Some of this and if I now click on two card a second time here there is no action dispatched and if

19:43.900 --> 19:48.790
we have a look at the state after this action we now see cool.

19:48.790 --> 19:52.620
Only one item but now with quantity to product price per item is this.

19:52.630 --> 19:54.030
But the sum is this.

19:54.190 --> 19:55.120
This is the shirt.

19:55.120 --> 19:57.760
If I now dispatch the blue carpet as well.

19:57.760 --> 20:02.590
We got to add two card one more time and they are in the state we now indeed see there are two items

20:02.590 --> 20:04.190
in there P1 and P2.

20:04.270 --> 20:09.930
P1 is unchanged but P2 was now added and the total amount also looks good to me.

20:09.940 --> 20:16.150
So this seems to work and this is how you can look into a redux stayed whilst your app is running without

20:16.240 --> 20:17.140
out putting it here.

20:17.140 --> 20:21.610
Now of course we all do want to output it visually but this is a nice way of looking into your state

20:21.610 --> 20:25.120
behind the scenes with the help of the react native debugger.

20:25.120 --> 20:30.010
Now we'll close it here because it slows down the app a bit and then returned to debug menu I'll also

20:30.010 --> 20:35.230
stop my remote debugging and close the Inspector here entirely.

20:35.260 --> 20:40.660
Also back in the app last fall I will get rid of the of their compose with theft tools thing year so

20:40.660 --> 20:42.000
that I don't forget it later.

20:42.070 --> 20:47.020
But you can always add this here or leave it here whilst you are developing so that you can look into

20:47.020 --> 20:48.380
your store.

20:48.460 --> 20:51.010
The main takeaway for us here is that this seems to work.

20:51.010 --> 20:57.280
And with that working of course we can now work on adding a action button here to the header and make

20:57.280 --> 21:03.430
sure we can go to the card page from that or with the help of that action button so that on the card

21:03.430 --> 21:06.220
page we can output our card information.
