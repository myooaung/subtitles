WEBVTT

00:02.270 --> 00:07.520
So storing is great fetching would all be sweet and in the end I want to make sure that when we.

00:07.520 --> 00:10.510
For example wizard do you products overview screen.

00:10.580 --> 00:15.200
We simply reach out to the server and get all products from there so on this screen.

00:15.290 --> 00:16.510
Whenever we wizard it.

00:16.550 --> 00:19.390
We load the latest products.

00:19.400 --> 00:22.500
Now for Dad we need to send the HDP request from there.

00:22.520 --> 00:28.250
And therefore in the end what I want to do is I want to dispatch a new redux action which will reach

00:28.250 --> 00:35.590
out to the server get my products from there and then set the products in my store so I need a brand

00:35.620 --> 00:43.060
new action here set products which I didn't need before because we only worked with dummy products but

00:43.060 --> 00:50.660
now that's not the case anymore so set products should now be dispatched and I will need a new action

00:50.660 --> 00:58.110
creator here which will name fetch products for this I have no identifier because I will never dispatch

00:58.110 --> 01:01.310
does as an action which should reach the reducer instead.

01:01.310 --> 01:06.110
This will just be my action creator with the async code with the HP request.

01:06.110 --> 01:12.950
It will not need any arguments but thanks to regex thunk it returns a function which gets that dispatch

01:13.070 --> 01:16.470
function as an argument and there in the end.

01:16.490 --> 01:23.460
I want to dispatch a action object where the type is set products and where I want to forward my products.

01:23.480 --> 01:30.490
But of course that should not be an empty array but the products I get from my API so we can therefore

01:30.490 --> 01:38.610
a kind of copy of this code here including the async dispatch part here all the way up to data where

01:38.610 --> 01:40.590
we get the response data.

01:40.590 --> 01:47.810
Copy that from create product and replace this part here with it.

01:47.970 --> 01:52.530
And now what we do is we send the request to that same you or else as before which makes sense because

01:52.530 --> 01:54.380
that's where the products are stored.

01:54.390 --> 01:58.650
However now I want to set a get request and that's actually the default when you use fetch.

01:58.740 --> 02:04.380
So you don't need to set this for a get request you also don't need to set any headers and you can set

02:04.380 --> 02:04.860
a body.

02:04.890 --> 02:09.150
So actually here we can entirely get rid of this second argument on fetch.

02:09.150 --> 02:12.020
We just in a fetch request like this.

02:12.210 --> 02:18.000
Now the response will get back our data but none there is one important characteristic about the format

02:18.000 --> 02:21.880
of that data and it's best if we simply see that.

02:21.900 --> 02:28.470
So let me console log the response data here and comment this out for a moment or we can leave it in

02:28.470 --> 02:29.680
there doesn't do any harm.

02:29.700 --> 02:32.050
Doesn't would do anything useful either.

02:32.100 --> 02:37.200
We're not handling this in a reducer yet but let's log this and let's now go to the products overview

02:37.200 --> 02:44.230
screen and make sure that there we dispatched is fetch products action now thankfully I already get

02:44.230 --> 02:48.670
access to the redux dispatch function deer in products overview.

02:48.850 --> 02:55.210
So now I just need to add use effect so that I can fire it is whenever this component loads.

02:55.210 --> 03:04.760
So here I can add use effect and in my function here I can call dispatch and now reach out to my product

03:04.790 --> 03:08.510
actions which had therefore need to import as products.

03:08.510 --> 03:22.210
Actions from store actions products like this that should be actions and now use the products.

03:22.250 --> 03:29.240
Actions here to fire my fetch products action which in the end will make does HDP request and this effect

03:29.240 --> 03:36.260
should run whenever my component is loaded so I can add an empty array and actually add my only dependency

03:36.260 --> 03:38.300
which I have which is dispatch.

03:38.310 --> 03:44.070
Yea that's the only dependency we define inside of our component so that this will actually never rerun.

03:44.150 --> 03:48.350
The only time it will run is when this component is loaded and that's exactly what should be the case

03:48.410 --> 03:49.830
whenever I will hit the screen.

03:49.850 --> 03:52.950
I want to fire this effect here.

03:53.270 --> 03:57.410
So if an safeties let's safeties and now it does loads.

03:57.440 --> 04:03.780
You see here in the log this is what what happened here and both on Android and I was.

04:03.790 --> 04:05.520
Which is why I see this twice.

04:05.560 --> 04:07.460
This is what I got back in the end.

04:07.510 --> 04:09.900
This object was returned by firebase.

04:09.910 --> 04:15.970
It's the object with all my products and I only have one which is why I only see one here and each object

04:15.970 --> 04:18.190
is matched to its unique I.D..

04:18.700 --> 04:19.510
But that's important.

04:19.510 --> 04:25.210
We don't get back in array we get back an object with unique ideas as keys and the values for these

04:25.210 --> 04:30.760
keys is then my object data and we just need to know that for handling it correctly.

04:30.760 --> 04:32.050
So back in our action.

04:32.050 --> 04:34.200
This is how the response to the looks like.

04:34.270 --> 04:38.790
Of course in my app I work with an array though so I need to transform this.

04:38.950 --> 04:43.980
So my loaded products or however you want to call this here should be an empty array.

04:44.200 --> 04:49.580
And now we can loop through that object to map D object data.

04:49.610 --> 04:54.570
D products in the object too well products in the array.

04:54.570 --> 05:00.490
It's relatively straightforward to do we can add a for in loop here with our a key where we go through

05:00.490 --> 05:09.190
all the response data we fetched here in the end and then here I add each product to my loaded products

05:09.250 --> 05:13.240
with push so that this array grows over time.

05:13.240 --> 05:19.420
When I add here in the end is just a new product using the product model which should therefore need

05:19.420 --> 05:20.250
to import.

05:20.260 --> 05:25.610
So make sure you have that import here pointing at your models folder and there at the product file.

05:26.860 --> 05:28.660
Next create a new product here.

05:29.690 --> 05:36.910
Where my I.D. is that key because that is that unique I.D. here which we haven't that object for for

05:36.910 --> 05:43.820
which we're looping then that user thing well that is you one still dummy data because we have no user

05:43.820 --> 05:51.260
data involved here and then we have to look into the object we got back from firebase to get the title

05:51.260 --> 05:52.180
and so on.

05:52.220 --> 05:58.720
So here our title for this new product we're creating is simply rest stayed of for two given key data

05:58.760 --> 06:00.380
title and the same.

06:00.380 --> 06:05.920
Of course here for the image you are L so dot image you are L forward a description

06:09.440 --> 06:19.610
and of course all for the price like that so this adds everything to loaded products and now a load

06:19.610 --> 06:25.570
of products will be a populated array which I can add here to the action that is dispatched to the set

06:25.580 --> 06:27.070
products action.

06:27.230 --> 06:32.530
So the only missing thing is that we now go to the reducer and there we can handle set products.

06:32.690 --> 06:38.080
Maybe here is the first case but of course the position doesn't matter at set products here.

06:38.080 --> 06:43.660
And for Dad make sure you're importing it from your actions file and then dear.

06:43.670 --> 06:49.230
It's a very well very trivial thing which we're about to do in the end I just need to return and you

06:49.230 --> 06:59.090
state where the available products are equal to action dot products so to the products I derived here

06:59.330 --> 07:05.810
in my action creator which I add to my dispatched action and for the user product is pretty similar

07:06.280 --> 07:14.210
there it's action dot products just filtered for all the products that have my user I.D. so like that

07:15.450 --> 07:20.370
and at the moment due to my dummy code here where a hard code by user I.D. that of course means that

07:20.490 --> 07:23.670
all loaded products are treated as my products.

07:23.670 --> 07:29.790
This is something will change later once we added authentication so with that.

07:30.080 --> 07:35.120
Now if this reloads you see we start with the dummy data but then this is immediately replaced with

07:35.420 --> 07:39.830
this loaded data so loading data works just fine.

07:39.830 --> 07:44.370
We can work with that as we could with our own data here.

07:44.390 --> 07:49.340
Of course we're not storing orders on the server and anything like that but we are able to load our

07:49.340 --> 07:51.410
data which we previously stored on the server.
