WEBVTT

00:02.140 --> 00:08.590
So how can we leave these off screen now if we are locked in or if we did sign up successfully.

00:09.520 --> 00:11.130
Well that's not too difficult.

00:11.380 --> 00:16.690
If we make it past this dispatching here without landing into catch block.

00:16.720 --> 00:18.730
So it's still here and to try block.

00:19.090 --> 00:26.560
We can just call props navigate what's props navigation dot navigate just as we always did and navigate

00:26.560 --> 00:29.470
to the different screen we set up in our switch Navigator.

00:29.470 --> 00:37.500
So in this case to the shop screen so let's do that let's simply go to shop and then for now as soon

00:37.500 --> 00:42.950
as we do log in successfully which will now do does loads.

00:43.030 --> 00:45.300
And we're here now.

00:45.330 --> 00:49.300
Get a warning here regarding some state update which couldn't be performed.

00:49.300 --> 00:55.450
That's this set is loading state which now fails if we now navigate away solution is simply we shouldn't

00:55.450 --> 01:01.000
try to update the state on this screen if we're not on the screen anymore so we can simply move that

01:01.000 --> 01:05.560
into the catch block because we'll only need to reset loading if we have an error because that's the

01:05.560 --> 01:07.600
only case when we stay on the off screen.

01:07.600 --> 01:12.190
Otherwise we don't need to change the loading state because we're leaving the screen anyways so if dad

01:12.190 --> 01:13.780
will get rid of this as well.

01:13.780 --> 01:17.080
If I now try this again.

01:17.300 --> 01:18.170
Here we go.

01:18.170 --> 01:22.730
And now we're in our main shop now we're still of course not utilizing the tokens.

01:22.730 --> 01:24.620
Let's make sure we do that as well.

01:24.740 --> 01:31.550
And for that let's go to the offered user and add an initial state there which describes basically with

01:31.640 --> 01:35.850
which state we want to start and what our general state shape is.

01:36.230 --> 01:41.960
And then I want to store the token which initially is now and I want to store the user I.D. which initially

01:41.960 --> 01:45.980
is now so very basic initial state.

01:45.980 --> 01:51.230
Then we can export D reduce her function which takes that initial state and which all receives of course

01:52.010 --> 01:57.430
an action and here don't want to switch on the action type as always.

01:57.430 --> 01:59.960
And I got two cases I'm interested in right now.

01:59.980 --> 02:08.190
One is the log in action so you need to import this identifier from the actions folder and you of file

02:08.190 --> 02:12.530
their in the Abra case is these sign up actions.

02:12.580 --> 02:14.680
So you need to import this identifier as well.

02:15.820 --> 02:25.400
In other cases I just want to return my state so if we do log in I want to return a new state where

02:25.400 --> 02:33.400
the tokens should be let's say action dot token and user I.D. should be action dot user I.D..

02:33.940 --> 02:38.530
And that's the same update I need in sign up so we can just copy that over there.

02:39.220 --> 02:44.530
Now of course we need to make sure that our action carries token and user I.D. So in the action creator

02:44.530 --> 02:51.970
in the end of sign up here when I dispatch to sign up action we need to add a token field and we need

02:51.970 --> 02:55.300
to add a user I.D. field.

02:55.470 --> 03:03.670
Now the token can be gotten from the response data there it's dead I.D. token and the same here rest

03:03.670 --> 03:09.250
data is not I.D. token but it's a local I.D. You see that here in the log local I.D..

03:09.280 --> 03:16.530
This here is the user I.D. If you scroll up I.D. token that's the token so that's what I dispatch here

03:17.070 --> 03:21.140
and we can just copy that and use the same almost the same for logging in.

03:21.150 --> 03:28.140
The only thing that needs to change is this identifier and you could even unite log in and sign up to

03:28.140 --> 03:34.800
one combined authenticate identifier let's say because in a reducer we're doing the same thing anyways.

03:34.920 --> 03:40.200
So I just have it split up here to be clear that we have two different things in the end but the update

03:40.200 --> 03:44.420
is the same so we could definitely combine these two action types.

03:45.250 --> 03:48.970
So with that we're now storing the token and that's nice.

03:49.330 --> 03:51.990
But what do we need this token for again.

03:52.150 --> 03:59.700
We need that token which we are now storing to access our API and for that let's go to firebase in the

03:59.700 --> 04:00.870
database.

04:00.870 --> 04:05.940
Keep in mind that when we set up this database I mentioned that you should start in this test mode if

04:05.940 --> 04:11.370
you remember what this did is it set up certain rules and you can check those if you click on the rules

04:11.370 --> 04:15.810
Tab does controls who can read and write your database.

04:15.810 --> 04:20.730
And right now this is both set to true which means everyone can read everything and everyone can write

04:20.820 --> 04:21.930
everything.

04:22.230 --> 04:32.630
That's of course typically not what you want instead here all said both to off on equal to NULL which

04:32.630 --> 04:39.200
might look strange and there should be double quotes by the way here but this is firebase syntax and

04:39.200 --> 04:44.480
you can learn more about the rules here by clicking on learn more or to simply google for firebase real

04:44.480 --> 04:46.960
time database security rules.

04:47.000 --> 04:53.000
What this tells firebase is that only authenticated users so only users who send the request with a

04:53.000 --> 04:57.400
valid token should be able to read and to write.

04:57.560 --> 05:00.080
Now you could even argue that a reading should always be allowed.

05:00.110 --> 05:06.710
We could set this to true and you could even be more specific regarding the rules so that you say reading

05:06.710 --> 05:07.970
from products is allowed.

05:07.970 --> 05:09.770
Reading from orders is not.

05:09.800 --> 05:13.200
But again that's something you can check with the official docs.

05:13.370 --> 05:18.950
I'll go with the setup where reading is always allowed but writing is not.

05:19.010 --> 05:22.160
So now for writing we need a token.

05:22.160 --> 05:28.640
Otherwise we'll face a problem if we log in here and we're storing the token but we're not appending

05:28.640 --> 05:30.440
it to requests right now.

05:30.650 --> 05:33.060
You see we can load all data that's fine.

05:33.320 --> 05:38.510
But you'll also notice that if I try to edit this and remove a couple of exclamation marks here in the

05:38.510 --> 05:45.420
end I get an error and that error is thrown because I'm not allowed to write and firebase there for

05:45.420 --> 05:49.190
blocks day the access and returns and error response.

05:49.190 --> 05:54.890
So now we need to leverage token which is stored in a reducer and actually appended to our outgoing

05:54.890 --> 05:56.360
requests.

05:56.360 --> 06:00.940
Now for that first of all we need to registered as reducer in our root reducer.

06:00.950 --> 06:08.300
So in the app J as file we need to imported we need to import the off reducer from the store and there

06:08.300 --> 06:14.780
to read user's folder and there do all file and added to combined reduces maybe be here with you off

06:14.780 --> 06:20.030
key but of course you can use any key you want that will allow us to then leverage doesn't access this

06:20.240 --> 06:26.360
token but now we need to attach it to the outgoing requests for example for products we need to attach

06:26.360 --> 06:29.450
it to the request we send for updating products.

06:29.510 --> 06:38.090
So that would be this request here now the way you append the request and firebase can be found in the

06:38.090 --> 06:44.570
official firebase docs for the real time database user authentication here data in the end what you

06:44.570 --> 06:52.640
learn is that you can append a token to your outgoing request simply by adding that off query parameter

06:52.760 --> 06:55.540
at the end of your request you are L.

06:55.790 --> 06:59.690
So here in the end we need to add a question mark of equal.

07:00.080 --> 07:06.160
And then here we need to have our token now how can we get access to the token here.

07:06.180 --> 07:12.790
We're in the action creator which means we have no easy access to the story here to the redux store.

07:13.070 --> 07:20.390
Or do we read X thunk that nice package which allows us to write this syntax with that function that

07:20.390 --> 07:24.720
receives the dispatch function that actually gives us something sweet.

07:24.800 --> 07:30.860
We can also change this function a little bit and not just get dispatch but get a second argument as

07:30.860 --> 07:35.250
well which is another function which gives us access to the redux state.

07:35.510 --> 07:43.230
So we get access to the current state of our redux store so if a console lock the result of get state

07:43.230 --> 07:45.300
here let's see what that gives us.

07:45.300 --> 07:51.860
And to avoid errors for in a moment here I'll just add an empty string so that we can test this code.

07:51.870 --> 07:56.400
Of course this will not work but we'll fix it soon so let's see what's inside of that state if we execute

07:56.400 --> 07:56.700
this

08:00.000 --> 08:00.540
so.

08:00.570 --> 08:03.660
Time to log in again real quick.

08:04.550 --> 08:09.010
And then go to the admin screen and try editing this which of course still will fail.

08:09.970 --> 08:13.300
But that does matter because now I've had to click here.

08:13.420 --> 08:19.690
Yes it fails but what you'll see is that here and a log which we get is a full output of our complete

08:19.780 --> 08:22.270
redux store does our reading store.

08:22.270 --> 08:28.570
We get an object with our off state slice which has yet another object with our token and with the user

08:28.570 --> 08:34.880
I.D. our card state slice our orders states lies in our products state slice.

08:34.960 --> 08:40.540
So this allows me to get access to my reading store and get access to the token so a token can be fetched

08:40.540 --> 08:48.060
by executing get state dog off dog token because this gives us access to our full redux store.

08:48.070 --> 08:53.890
This then gives us access to the off slice and dice to the token property which we're managing in that

08:53.890 --> 08:59.810
off slice and now in your products action creator.

09:00.090 --> 09:09.440
We can add this token here in the end so here we can just replace this string with the token variable

09:09.440 --> 09:11.600
which holds our token.

09:11.600 --> 09:17.330
And now if we safeties with this little change if we now log in again and later we'll also changed as

09:17.390 --> 09:20.000
such that we don't constantly need to re log in.

09:20.000 --> 09:27.490
No worries if you log it again we go to admin click on add it here and now we try this.

09:27.710 --> 09:33.800
This works again because now the token is appended firebase validates it and determines that it's valid

09:33.830 --> 09:35.890
because of course we haven't mingled with it.

09:35.900 --> 09:39.170
It's a valid token and therefore this just works.

09:39.200 --> 09:43.190
Now we don't just need the token when we update our products.

09:43.190 --> 09:48.410
We also needed when we add a new product so I'll copy that logic and at the same logic here when we

09:48.410 --> 09:54.310
create a product I get my token with the help of that second argument which we can get here if we need

09:54.310 --> 09:56.330
it to get state function.

09:56.440 --> 10:03.320
And this allows me to change these single quotes to back ticks so that I can conveniently add that query

10:03.320 --> 10:09.530
parameter here to end with question mark of equals and equal that to my token.

10:09.530 --> 10:15.300
So now we can create a product and update a product deleting of course all as a write request.

10:15.410 --> 10:22.430
So for delete product I'll do just the same get access to my store with forget state function here and

10:22.430 --> 10:29.130
then also add w mark all here at the end and add the token.

10:29.300 --> 10:30.290
So that's one thing.

10:30.320 --> 10:36.260
Now in the orders it's a similar thing there for fetching we don't need it but for adding we do because

10:36.290 --> 10:38.260
adding as a write operation.

10:38.480 --> 10:45.110
So there we get the state if we want to we can extract the token from there with the same approach as

10:45.110 --> 10:52.880
before and we can apprentice here and there will actually also need to user I.D. soon so we'll take

10:52.880 --> 10:54.860
care about this in the next lecture.

10:54.860 --> 10:57.810
But for now just make sure you append token everywhere.

10:57.890 --> 11:02.570
And now let's see how we can all make sure that orders actually really belong to our user.
