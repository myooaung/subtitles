WEBVTT

00:02.290 --> 00:08.140
Our approach here of course works we're storing the inputs in some state we're storing the validity

00:08.140 --> 00:16.090
in some state and we could do this validity management for all our inputs here and simply have our different

00:16.120 --> 00:21.370
change handler functions here for our different inputs that would work.

00:21.370 --> 00:26.560
One important note by the way before we move on since I check the title validity here to submit handler

00:26.770 --> 00:29.950
of course we should also add there as a dependency.

00:29.950 --> 00:35.820
So title is valid must be added there as a dependency in the use callback dependency array.

00:35.830 --> 00:36.980
That's important.

00:37.030 --> 00:40.570
Otherwise this function will not be rebuilt when that validity changes.

00:40.660 --> 00:47.970
Which means we won't be able to submit it there after the problem with our current approach is that

00:47.970 --> 00:55.410
we manage different states to store the input for the different inputs and then we also have different

00:55.410 --> 01:00.910
validity states at least potentially if we start managing our validity like this.

01:00.990 --> 01:07.400
And for very large forums of course this means a lot of copy and pasting a lot of state management.

01:07.410 --> 01:15.300
Now if you have that many states that are kind of connected you also can do this in a more elegant way

01:15.330 --> 01:18.500
instead of having your separate states for each input.

01:18.540 --> 01:25.720
You can have one big state which merges all input values and which merges all validity is and then use

01:25.740 --> 01:33.720
a concept called a reducer not a redux reducer but one supported by react out the box to manage that

01:33.720 --> 01:34.710
state.

01:34.710 --> 01:40.210
You do this with the use reducer hook which again has nothing to do with redux.

01:40.440 --> 01:47.550
The concept of a reducer is not redux exclusive reducer in the end it's just a function that takes input

01:47.580 --> 01:52.800
and spits out some output and therefore react all the supports this and you'll see how you can use this

01:52.920 --> 01:54.190
in this lecture now.

01:54.900 --> 01:57.510
So what's the idea of a reducer now.

01:57.510 --> 02:03.030
First it's important to understand that user a user is a hook that helps you have state management typically

02:03.090 --> 02:09.420
you use it if you have connected states or more complex state and you don't want have a bunch of individual

02:09.600 --> 02:16.340
use state calls and a bunch of individual states which you manage you then can use use reducer.

02:16.350 --> 02:17.510
And here's how it works.

02:19.060 --> 02:25.530
You start by creating wealth a reducer let's say a form reducer here you can name it whatever you want.

02:25.570 --> 02:29.020
And please note I created outside of my form component.

02:29.020 --> 02:33.940
You could do it in there but if you don't depend on props you can do it outside of there so that this

02:33.940 --> 02:39.250
won't rebuild with every rebrand or cycle and you don't even have to use use callback which of course

02:39.280 --> 02:44.110
all the costs some performance if you use it so use it outside of their building outside of theater

02:44.110 --> 02:49.690
to a wide unnecessary recreations of that function and now it is really user just like a redux where

02:49.690 --> 02:57.100
the user gets the current state and an action but again it's not related to redux it's not used by redux

02:57.360 --> 03:02.240
reduce functions just always kind of work like this now in there.

03:02.310 --> 03:07.260
Again just like it now read X reducer because again they work like this.

03:07.260 --> 03:11.520
You can check different action types and here and want to check one type this as well.

03:11.520 --> 03:12.680
Just use the if statement.

03:12.690 --> 03:15.440
You could use us which case statement as well.

03:15.750 --> 03:19.260
And did I check action dot type here is totally up to me.

03:19.290 --> 03:24.030
You can named as whatever you want because you will be the one dispatching the action later and here

03:24.030 --> 03:29.800
a check for the update action which also is an identifier I chose and which just like in redux.

03:29.820 --> 03:39.050
You could also store is identifier in a standalone constant here so you could have your reducer update

03:39.620 --> 03:45.850
actually for example your reduced to update identifier like this and use this instead here.

03:45.920 --> 03:48.260
If you wanted to and you can name does whatever you want.

03:48.380 --> 03:57.180
So now I'm checking for this action and if this action occurs I want to store I input value and validated.

03:57.340 --> 04:00.850
But to understand this we need to understand how we use the former user.

04:00.920 --> 04:05.510
So let's leave it like this for the moment and go down to the component itself.

04:05.600 --> 04:08.950
There we start setting up our form states down here.

04:08.960 --> 04:15.200
So here I when I call user reducer and now a user ID user take such a reduced function hence I will

04:15.200 --> 04:19.540
pass in my form reducer which I set up here and which is still unfinished.

04:19.940 --> 04:24.990
Use reduce for all to takes some optional second argument which is the initial state you want to pass

04:24.990 --> 04:30.860
in and that can be anything but here I'll pass in a javascript object in the initial state I want to

04:30.860 --> 04:38.630
use here is the end of object which has input values which then is yet another nested object which I'll

04:38.630 --> 04:39.990
soon populate.

04:40.220 --> 04:46.670
Input validity is which all is nested object and maybe an overall form validity.

04:46.670 --> 04:49.610
I'll name ID form is valid which initially is false.

04:49.620 --> 04:55.700
Let's say so this is now my initial state I pass it here and that's the state which I later want to

04:55.700 --> 05:03.260
change from insert the form reducer now on the input values we can for example at our title and that

05:03.260 --> 05:06.070
is up to you how you name it which is an empty string initially.

05:06.070 --> 05:11.150
Let's say these will be the initial values I want to set on my inputs and visible in the end replace

05:11.150 --> 05:15.980
my state management down there where I manually stored my inputs in different states.

05:15.980 --> 05:20.220
Now I will merged does all into one object managed through that reducer.

05:20.480 --> 05:25.610
So I have my title here and actually that's not always empty of course but actually it's only empty

05:25.610 --> 05:27.410
if we have no edited product.

05:27.410 --> 05:31.140
So we'll copy this check from beta and use this in here.

05:31.370 --> 05:34.590
Now the same of course for the image you are out there.

05:35.410 --> 05:40.150
I initialize this with an additive product dot image you are L if it's a way label and otherwise he

05:40.150 --> 05:40.930
was an empty string.

05:40.930 --> 05:43.540
Basically what I did down there as well.

05:44.110 --> 05:48.030
And of course I do the same for the description here.

05:48.070 --> 05:52.990
I want to check if edited product the set and I use this description or set it to an empty string.

05:53.080 --> 05:59.410
If it's not available now last but not least we have the price and there I always have an empty string

05:59.410 --> 06:02.450
because we either don't need it in the case of an edited product.

06:02.470 --> 06:05.830
Then I don't care about its value or we do need it.

06:05.860 --> 06:08.140
Well then I want to initialize it with an empty value.

06:08.140 --> 06:15.020
Anyways now of course each input also has a validity so we can add a title here and again check whether

06:15.020 --> 06:16.790
additive product is set.

06:16.850 --> 06:19.010
If it is set then I know I'm editing.

06:19.040 --> 06:21.320
So we will have pretty populated the title.

06:21.320 --> 06:22.700
So initially it will be valid.

06:22.700 --> 06:24.950
So in this case my initial value would be true.

06:24.950 --> 06:32.250
Otherwise it will be false and now it is all something we can repeat for the image you or L if we have

06:32.250 --> 06:33.080
added that product.

06:33.080 --> 06:36.650
We know it was pre populate that therefore it will be valid initially.

06:36.650 --> 06:39.550
So as we set this to true otherwise I set it to false.

06:39.740 --> 06:44.420
If I have my room for my description here it's the same true or false.

06:44.540 --> 06:46.760
And for the price it's kind of equal.

06:46.760 --> 06:49.090
Of course we don't pre populate the price.

06:49.100 --> 06:55.200
If we're editing but if we are editing I don't care about the price anyways because it will not be changeable.

06:55.310 --> 07:00.890
Therefore I know if I am editing I should treat this as valid because it can't be changed anyways and

07:00.890 --> 07:02.420
therefore I don't care about this input.

07:02.440 --> 07:09.680
But I don't want to block forum submission because of setting this to false when we can't edit it anyways

07:09.980 --> 07:13.110
so we'll set it to true if this is not planned to be edited.

07:13.190 --> 07:18.770
If we're not editing a product but we're adding 1 the price will be editable and therefore we will start

07:18.770 --> 07:24.230
in a false state because the price input will be empty initially that's what we're setting up here in

07:24.320 --> 07:26.150
the overall form validity.

07:26.150 --> 07:31.130
Well there again I can check if we have an edited product which means we are editing then to form is

07:31.130 --> 07:33.590
true to form is valid initially.

07:33.590 --> 07:39.240
Otherwise it's false initially if we're adding a new product now it is my initial stage here.

07:39.260 --> 07:45.050
Now this reducer function should be able to change that state when actions are dispatched and then action

07:45.050 --> 07:48.660
should be dispatched whatever we type into one of our text inputs.

07:48.730 --> 07:58.190
That will be the trigger so therefore we can now get rid of all these state assignments here and hence

07:58.220 --> 08:05.780
we can also get rid of the entire use state import even and make sure we dispatched you reduce your

08:05.790 --> 08:09.610
update action for every keystroke we do in a input.

08:09.710 --> 08:18.670
So here in the title change handler I in the end will remove this code I leave to check for now but

08:18.740 --> 08:22.770
for I'll not have any code in there for the moment and step down there.

08:22.790 --> 08:28.960
I want to dispatch road user update and now this is done with the result of the use reduce recall because

08:28.960 --> 08:35.000
user ID user of course return something just like use states did it all returns an array with exactly

08:35.000 --> 08:40.710
two elements and therefore we can d structure it with this array D structuring syntax which we also

08:40.730 --> 08:47.450
used on U.S. state and dare I get my form state as a first value in a dispatch function as a second

08:47.450 --> 08:48.250
value.

08:48.290 --> 08:55.280
This is always what use reducer will return you state snapshot which updates whenever you change it

08:55.280 --> 08:55.770
of course.

08:55.790 --> 09:01.490
So whenever you change it this component will re render and give you a new state snapshot and a function

09:01.550 --> 09:07.160
dispatch in the end is a function that allows you to dispatch actions against this reducer.

09:07.250 --> 09:11.760
Of course you can name these two elements however you want but I think this is a sensible naming.

09:11.780 --> 09:13.270
This is our state snapshot.

09:13.280 --> 09:20.100
This is a function now this patch by the way is a name I already use here from redux.

09:20.100 --> 09:24.460
So here I will named as dispatch form state to a wider named clash.

09:24.480 --> 09:25.980
You can name it however you want.

09:26.760 --> 09:33.350
So dispatch form state can now be used here in my title change handler.

09:33.410 --> 09:39.170
I just call it and I need to pass the object there which describes my action and this object will have

09:39.170 --> 09:40.820
a type property.

09:40.820 --> 09:46.130
You don't have to have a type property you could named as I.D. or identifier or whatever you want but

09:46.130 --> 09:52.010
I use type here because I actually do check for the type property instead of my reducer function and

09:52.010 --> 09:59.260
this reducer function will be executed for every new action you dispatch so if I go back down there

09:59.500 --> 10:07.650
the type will be reduced or update or maybe a bad name actually would be for him update I think so that's

10:07.650 --> 10:10.830
also what I'll use up here of course and up here.

10:10.830 --> 10:18.750
So for him update maybe form input update the name of course is up to you but it should be clear about

10:18.750 --> 10:19.790
what it does.

10:19.800 --> 10:22.110
So hero all to have form input update.

10:22.180 --> 10:23.280
Yeah that looks good.

10:23.280 --> 10:24.510
So form input update.

10:24.510 --> 10:26.120
That's what I dispatched down there.

10:26.130 --> 10:27.600
Need to change it here as well.

10:27.600 --> 10:33.100
And of course you can also pass any other data you might want to use inside of your reducer.

10:33.210 --> 10:38.250
And I do have some other data which I want to use that would be the value and I'll just named as value

10:38.250 --> 10:39.270
here at this property.

10:39.300 --> 10:40.730
You can name it however you want.

10:40.740 --> 10:42.390
That's the text which was entered.

10:42.420 --> 10:48.490
So I just forward that to the reducer so that we can store it in our state there and the validity of

10:48.490 --> 10:49.400
this input.

10:49.470 --> 11:02.110
So therefore here I will actually add is valid prop which initially let's say is false and knowledgeable

11:02.110 --> 11:07.480
removed as L's case and check if we're greater than zero view here which would mean that it should be

11:07.480 --> 11:12.850
true because that I said is valid equal to true otherwise it will stay false.

11:12.850 --> 11:19.050
With that we can also add is valid as a key to the action and a forward the value stored inside of our

11:19.060 --> 11:20.230
is valid variable.

11:20.350 --> 11:26.320
And this will be false initially but if our input length for the title is greater than zero then it

11:26.320 --> 11:35.230
will actually be true and now we of course also need to let our reducer know which input trigger this.

11:35.330 --> 11:43.730
So add that say input I.D. field here or just input whatever you like and use title here.

11:43.730 --> 11:49.670
And this key here should be a key which you all to have inside of your state like here and input values

11:49.790 --> 11:54.800
and input validity is because this will allow you to write some reducer code which will do soon.

11:54.890 --> 12:01.920
That is highly reusable and highly flexible because now we can take the next step and make sure that

12:01.920 --> 12:09.210
we transform this to be a function that actually works for all inputs and that is really flexible regarding

12:09.210 --> 12:10.080
how we use it.
