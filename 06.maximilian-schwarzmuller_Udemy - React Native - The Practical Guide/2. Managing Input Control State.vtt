WEBVTT

00:02.560 --> 00:05.510
So I'm back in our application on the auth screen,

00:05.620 --> 00:08.040
this screen isn't doing much right now

00:08.230 --> 00:09.770
so I want to work on it.

00:09.790 --> 00:16.360
I want to make sure that when we press switch to login, we don't just see this alert here but we

00:16.360 --> 00:22.540
actually switch between three and two inputs so that we only see a confirm password field if we are

00:22.540 --> 00:23.760
in sign up mode

00:24.280 --> 00:28.030
and I want to make sure that the submit button here does something else than

00:28.090 --> 00:29.390
just continuing.

00:29.500 --> 00:34.720
Well for now it will continue because we'll add authentication later but I also want to make sure that

00:34.720 --> 00:41.800
we can't press it, that it's disabled if the user didn't enter anything valid into these fields and therefore,

00:41.860 --> 00:44.960
I also want to implement my own validation.

00:44.980 --> 00:48.220
Now as you might know, react the react

00:48.220 --> 00:53.330
library doesn't ship with any built-in form input validation,

00:53.440 --> 00:59.230
so we'll have to add all this logic on our own and we will do so of course.

00:59.230 --> 01:01.720
So let's go to this auth screen here

01:01.960 --> 01:10.920
and let's now make sure that we connect all the inputs we have in our jsx code to some object we can manage

01:10.920 --> 01:19.240
in this state, so that we can for one bind the value to set up two-way binding so that we always store

01:19.240 --> 01:25.960
what the user entered in our state, that we also check the validity and control the validity of each

01:25.990 --> 01:26.870
input

01:27.100 --> 01:34.600
and that we also can then use this information to change the styling of the inputs and to disable the

01:34.600 --> 01:39.170
button if the inputs are invalid. For all of that,

01:39.170 --> 01:47.770
I'll start by going up to my state here in the auth screen and here I now not only want to control the

01:47.770 --> 01:53.200
view mode but also my controls so the inputs basically. 

01:53.200 --> 02:00.850
And one important note here, of course we could use redux for that but the state we're handling here

02:01.030 --> 02:06.250
is really just internal state of this specific screen of this component

02:06.310 --> 02:12.520
hence I don't see the big advantage of putting all of that into redux because no other place in our

02:12.520 --> 02:21.510
application cares about this state. Therefore I'll here add a controls object and here I will create a couple

02:21.510 --> 02:30.510
of key value pairs where the key is some identifier of the different controls like email but also like password

02:30.930 --> 02:32.680
and confirm password,

02:32.730 --> 02:35.560
these are the three inputs we'll have on this page

02:35.640 --> 02:40.770
and this pattern of course can be used with any type of input and any amount of inputs.

02:40.770 --> 02:43.760
Now these keys like this aren't that helpful,

02:43.800 --> 02:50.790
each key instead should hold a javascript object as a value in which we store its current value and the

02:50.880 --> 02:52.010
validity

02:52.050 --> 02:59.520
so I'll add a value property to the email object here and set it to an empty string initially, I'll then add the valid

02:59.730 --> 03:02.130
property and set it to false initially,

03:02.190 --> 03:04.920
so that by default every input is false.

03:05.160 --> 03:09.320
I'll then add another key which I'll name validation rules

03:09.480 --> 03:16.360
and this could be a javascript object where we might have a key like isEmail and set this to true

03:16.650 --> 03:21.340
and of course we'll have to write a logic for checking this, so this is just some general approach I want

03:21.340 --> 03:28.550
to use to have a reusable way of creating inputs. I'll then copy this and assign it to password, there

03:28.550 --> 03:30.680
I'll leave the values as they are

03:30.840 --> 03:38.310
but I will actually set this here to let's say minLength 6 to enforce a password which has at least

03:38.310 --> 03:39.360
six characters

03:39.450 --> 03:42.330
and of course you can always fine tune this.

03:42.360 --> 03:45.790
Now I'll do the same for confirm password, there.

03:45.810 --> 03:53.400
I will assign an equalTo validator and set this equal to a string named password

03:53.490 --> 03:58.950
and this string here of course has to match this string of the other control to which I want to compare

03:58.950 --> 04:05.280
it. And just as I said, adding all these rules like this won't do anything, react doesn't care about that,

04:05.280 --> 04:07.220
there is no built-in validation.

04:07.230 --> 04:09.760
We'll have to write our own logic

04:10.080 --> 04:16.890
but before we do this, let's actually connect our controls here to our jsx code.

04:16.890 --> 04:23.050
Now you could go even so far as dynamically rendering out all your inputs in your jsx code

04:23.370 --> 04:30.030
but here I will leave them as I have them here, so manually add it to jsx but I want to connect them

04:30.030 --> 04:32.490
to their respective controls,

04:32.490 --> 04:37.380
so to the data in my state, like here for the default input.

04:37.600 --> 04:45.480
Now we could also outsource the placeholder text into our state to then also load this dynamically

04:45.480 --> 04:50.530
but since I hardcode my input into jsx anyways, I can also leave it as it is.

04:50.820 --> 04:57.480
Nonetheless my goal now is to bind the value and the onChange text event,

04:57.480 --> 05:01.110
now keep in mind the default input is our custom component

05:01.230 --> 05:08.700
but if we have a look at it here in our components folder, there default input actually distributes all the

05:08.700 --> 05:16.620
props we passed to it onto the text input, so we can bind any property the text input knows on our default

05:16.650 --> 05:17.680
input.

05:17.750 --> 05:26.580
Therefore what I can do is I can set value equal to and now this is this state controls email and there,

05:26.670 --> 05:27.660
value.

05:27.660 --> 05:30.440
Now if this was too fast, let's see what I'm accessing here,

05:30.540 --> 05:34.910
I'm accessing this state and then controls email value.

05:34.920 --> 05:40.800
Now if we have a look at our state, we see controls is this object, in there we get the email key and

05:40.800 --> 05:43.880
now I'm interested in the value of that.

05:43.920 --> 05:53.190
Now for this to update, we also need to add some logic to well, update it if we type, for this I'll add the on

05:53.190 --> 05:55.860
change text handler here

05:56.160 --> 06:01.690
and I want to bind it to some method which will update my state. For this,

06:01.840 --> 06:09.280
I'll add a new method, maybe update input state, something like this,

06:09.350 --> 06:13.520
I'll get the value here but that's actually not enough for me,

06:13.670 --> 06:17.410
I want to get the key and the value.

06:17.420 --> 06:21.650
The key is basically the identifiers I have in my state controls object,

06:21.650 --> 06:25.020
so email, password and so on

06:25.340 --> 06:32.990
and then here the goal is to call this set state of course and set the state on controls but not the

06:32.990 --> 06:37.970
entire controls object should be overwritten but only of the key we're updating.

06:37.970 --> 06:39.890
Therefore this set state syntax

06:39.890 --> 06:41.310
isn't the one we want to use,

06:41.330 --> 06:47.420
we want to use the one where we get the previous state passed into a function where we then return

06:47.420 --> 06:50.050
an object that should be merged with the state

06:50.450 --> 06:56.780
and in that object, we now want to update the controls object but there, I'll first of all copy all the

06:56.780 --> 07:04.520
previous state, so that when we update email, we don't lose password and confirm password and in here, I then

07:04.580 --> 07:10.100
update the key we got here so key will be e-mail, password and so on

07:10.130 --> 07:16.400
and with that, we can dynamically access the respective property and there, set the value to the value

07:16.400 --> 07:17.810
we get as an argument,

07:17.890 --> 07:18.840
this one.

07:19.010 --> 07:25.840
Now keep in mind that inside here, we also have our validation rules and we have the valid property,

07:26.630 --> 07:36.140
so to not lose that, what I'll actually do I'll also distribute all my previous state controls information

07:36.140 --> 07:40.080
for that key, so for that control we're accessing.

07:40.080 --> 07:45.290
And with that, I'm then openly overriding the value and I'm taking the old validation rules and the old

07:45.410 --> 07:49.940
valid property, we'll add validation as one of the next steps.

07:49.940 --> 07:56.900
So now we got this versatile update input state method here which we should be able to use to update

07:56.910 --> 07:58.200
well the state,

07:58.430 --> 08:06.160
so for this let's go back and let's hook up onChange text handler, I'll actually hook it up to an arrow

08:06.320 --> 08:11.330
function where I then want to execute this

08:14.240 --> 08:18.100
update input state, I will get the value here,

08:18.100 --> 08:25.650
this is the default events data on changed text emits, whoops, it's on change text not on change text handler,

08:25.670 --> 08:28.540
so onchange text will give us the value by default,

08:28.610 --> 08:35.150
we accept that here and then we execute this so that we can pass on the value but we also want to pass

08:35.150 --> 08:39.730
on the key which is email for this specific input here,

08:39.920 --> 08:47.390
so that key is then received by update input state and we use the key well to update it in our state

08:47.480 --> 08:53.690
controls object, in this case the email. Now with this,

08:53.740 --> 09:01.780
let's save this and let's go back to our running application and there, let's enter something into the

09:01.900 --> 09:04.310
email form and or input

09:04.480 --> 09:05.280
and that looks fine,

09:05.280 --> 09:10.780
we don't get any error messages so two-way binding also seems to work since we can see the output.

09:11.110 --> 09:16.150
With that, let's quickly connect the password and confirm password fields before we then in the next steps

09:16.330 --> 09:17.370
fine tune everything

09:17.380 --> 09:20.290
and of course also add validation.

09:20.290 --> 09:22.910
So let's work on the password, there

09:22.920 --> 09:26.200
I'm also going to distribute these values into multiple lines,

09:26.410 --> 09:37.660
I then want to bind the value and for the value here, I'll get this state controls password value and

09:37.720 --> 09:44.410
onchange text will be connected to an arrow function here too just as we use it for email, I'll get the

09:44.410 --> 09:49.250
value there and then I'll call update input state, execute it,

09:49.570 --> 09:55.300
the key so the identifier will be password and I pass on the value.

09:55.300 --> 09:57.360
And finally let me do the same

09:57.370 --> 10:01.520
and therefore I'll copy that, let me do the same for confirm password.

10:01.540 --> 10:02.610
There I'll also

10:02.820 --> 10:09.990
insert this but of course on the state, I access confirm password

10:10.330 --> 10:17.970
and I'll also pass this here, confirm password as a key, now here I'm also missing a closing curly brace.

10:18.000 --> 10:25.190
So if we add this, save this and reload our application, we can type into all of these fields I wanted to say

10:25.190 --> 10:32.360
but we actually get an error when I try to enter something in the password field, so we enter this state

10:32.390 --> 10:40.280
controls password value and we get an error that it can't read property value of undefined.

10:40.310 --> 10:41.500
So let's have a look,

10:41.510 --> 10:46.360
we do have this state controls password value, 

10:46.370 --> 10:54.170
this looks all right and I could find the error here where I distribute previous state into controls,

10:54.170 --> 10:57.470
I should of course distribute previous state controls

10:57.620 --> 11:01.730
otherwise I essentially remove the property, so the controls

11:01.730 --> 11:03.530
I'm not editing.

11:03.530 --> 11:11.000
So if we now save this and we reload, now we should be able to enter something into all of these fields.

11:11.060 --> 11:12.590
So that's now connected,

11:12.800 --> 11:16.580
it's of course not super useful, we haven't gotten any validation yet.

11:16.730 --> 11:19.510
Let's add validation in the next lecture.
