WEBVTT

00:02.320 --> 00:09.040
So now if the product item component reorganized its time to be able to let's say delete the items because

00:09.040 --> 00:14.120
that's actually amongst the simple things we can do.

00:14.170 --> 00:19.600
This takes us back to redux and there it's now time to work on the products and I'll start in the actions

00:19.600 --> 00:21.120
which currently is an empty file.

00:21.160 --> 00:26.450
The products just fall in the actions folder where I want to export an action that helps us with deleting

00:26.560 --> 00:35.350
products the identifier they offer is simply named delete product and it holds a delete product.

00:35.350 --> 00:46.900
Text here now all the export action creator delete product which takes the product idea like this and

00:46.900 --> 00:53.430
which then returns an action object where the type is delete product and the pits the product idea is

00:53.440 --> 00:55.990
simply to forward it product ideas like this

00:59.620 --> 01:07.990
now in the reducer in the products reducer file we can listen to that because currently we're never

01:08.560 --> 01:17.110
caring about any action now we can switch on the action type here now handled the case that it's delete

01:17.230 --> 01:23.900
product which we get from our product action file and hence you need to add that import if delete.

01:23.900 --> 01:29.840
Product is the case we need to remove the product from our user products array and of course also from

01:29.840 --> 01:34.490
the available products array because it's deleted in general not just in our user products but from

01:34.490 --> 01:35.290
the entire app

01:37.990 --> 01:39.190
hence here.

01:39.190 --> 01:48.100
I will return a new object where we copy the existing state to be sure we don't lose any state and now

01:48.100 --> 01:51.630
user products is simply state DOT user products.

01:51.640 --> 01:57.070
So the old user products on which we can filter that's a built in JavaScript method which returns a

01:57.070 --> 02:04.640
new array a new array that basically is created by running a function on every item in the old array.

02:04.660 --> 02:09.930
And if that function returns true we keep that item if it returns false we dropped item.

02:10.000 --> 02:15.490
So this executes a function where we gets the product dysfunctions executed for us by javascript.

02:15.490 --> 02:20.720
So to say and it passes in the item it's currently having a look at add to this function.

02:20.800 --> 02:29.110
So we get the product for each product in our user products array and we want to return product idea

02:29.650 --> 02:33.390
unlike action PID which is the product that you want to delete.

02:33.400 --> 02:39.530
What this means is that basically it will keep all products where the ideas do not match.

02:39.550 --> 02:41.890
If they do match we know it's the product we want to get rid of.

02:41.890 --> 02:43.240
And therefore we return false.

02:43.240 --> 02:46.340
Which means in the new array it will not be included.

02:46.370 --> 02:50.890
Now it's essentially the same logic for the away label products.

02:50.900 --> 02:55.530
There would just need to go through all available products and filter out the product there.

02:55.550 --> 03:01.090
This is one change we need to make and never change needs to be made in the card.

03:01.090 --> 03:06.400
However because when we delete a product it should be removed from the card as well because otherwise

03:06.400 --> 03:09.690
we have a product in the card which doesn't exist anymore.

03:09.820 --> 03:17.410
So here I also will add a case for delete product and hence you need to import delete product from actions

03:17.410 --> 03:18.810
products in the card.

03:18.820 --> 03:20.290
J.S. reducer as well

03:23.060 --> 03:27.830
and in here we need to make sure that we remove the product from the card if it was deleted.

03:29.670 --> 03:36.150
So here in the card of course we get our product idea of the product we want to delete it's this pit

03:36.300 --> 03:47.940
in that action which is dispatched so therefore here we return a new state where we want to update our

03:47.950 --> 03:53.680
card and the total amount such that while the product is gone and with gone I mean totally raced from

03:53.680 --> 04:01.920
the card not just reduced by one but totally erased so items is here in the end a copy of the existing

04:01.920 --> 04:02.760
items.

04:02.760 --> 04:12.610
Without that product so I'll create a new constant updated items where I copy my existing state items

04:12.610 --> 04:13.910
here like this.

04:15.010 --> 04:22.820
And then I delete updated items for the action pit so I delete this item from the card.

04:22.820 --> 04:29.600
Of course this only makes sense if this item exists in the card so I will first of all check if state

04:29.750 --> 04:33.940
items for action PID if that returns anything meaningful.

04:34.220 --> 04:40.310
And if it is not the case then it will just return to existing state because then I'm done with this

04:40.310 --> 04:44.750
case I don't need to change anything in the state so I'll just return to existing state without changes

04:45.230 --> 04:46.840
if make it past does a check.

04:46.850 --> 04:52.330
Then I know that the product with the I.D. We're about to delete is part of the item.

04:52.340 --> 05:00.790
So then I continue copying my items then delete the product from their before I do that get the item.

05:00.790 --> 05:11.970
Total by accessing state items 40 action PID and then there of course we have is we have a look at the

05:11.970 --> 05:20.150
card item website card item model I mean we have to as some field here so in the end here I need to

05:20.150 --> 05:27.300
remove to some I'm interested in the sum because now I can update my item astounded with the updated

05:27.300 --> 05:34.440
items where I did delete it with the delete keyword and he total amount of the card is state.

05:34.620 --> 05:44.540
Total amount minus item total so the total office card item we had added before now we update the card

05:44.540 --> 05:45.760
appropriately as well.

05:45.860 --> 05:50.600
When we delete this now we just need to dispatch this deletion.

05:50.660 --> 05:52.960
So back end user products here in delete.

05:52.990 --> 06:00.170
We want to dispatch so from reactor redux we can import use dispatch to get access to the dispatch function

06:00.170 --> 06:00.490
here.

06:00.500 --> 06:04.140
By calling you as dispatch as we did it many times before.

06:04.490 --> 06:12.290
And then here when delete is pressed we can dispatch our action for that of course we need to import

06:12.290 --> 06:12.980
does actions.

06:12.980 --> 06:13.870
Let's do this.

06:13.880 --> 06:24.130
Let's import maybe everything as products actions from the store folder dare from the actions folder

06:24.160 --> 06:29.650
and they are from the products file and now we use products action down there.

06:29.650 --> 06:36.100
When we dispatched this to call delete product and forward the product I.D. which of course is item

06:36.100 --> 06:40.340
data not item dot I.D. Here Because We're Going For all the products here.

06:40.480 --> 06:46.830
And that basically means that item 8 item refers to instances of our product model.

06:46.840 --> 06:51.870
Every instance has a deep property and we're forwarding this to delete product.

06:51.940 --> 06:58.900
So if we give this a try and we go to admin and a click delete on the red shirt indeed it's gone here.

06:58.900 --> 07:01.960
And if I go back to products it's gone here as well.

07:02.200 --> 07:08.680
If we reload this and I do add the red shirt to the cart you see it here I edit it twice.

07:08.680 --> 07:16.380
Now if I go to admin and I delete it and I go back to products into the cart the card is empty now.

07:16.520 --> 07:23.090
On the other hand if I do add let's say the carpet and the coffee Magno go back to admin delete the

07:23.090 --> 07:28.460
carpet but not the coffee mug you see seen products the coffee Mark is still in the cart.

07:28.520 --> 07:35.850
So Dad did work by the way you might notice that coffee Mark is a bit cut off here that's something

07:35.880 --> 07:41.240
I'll fix later to gather with the fact that here we actually see a minus now for the total.

07:41.250 --> 07:43.680
That's also something I'll fix in a second.

07:43.680 --> 07:45.810
First of all let's make sure that we can.

07:45.840 --> 07:52.830
However in the admin section go to the edit screen or that we all do have an item up there that allows

07:52.830 --> 07:54.720
us to add a new product.
