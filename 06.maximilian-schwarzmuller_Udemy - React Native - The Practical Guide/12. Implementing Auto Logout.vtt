WEBVTT

00:02.110 --> 00:07.300
So to make sure that we're locked out when token expires I'll add a new function in our.

00:07.300 --> 00:08.150
Off action.

00:08.160 --> 00:13.270
So in the actions folder and the off jazz fall I'll add a no new function here where I want to set a

00:13.270 --> 00:20.950
timer that basically expires when the token is expired so we can call this set logout timer for example

00:21.220 --> 00:21.840
and there.

00:21.880 --> 00:31.410
I expect to get the expiration time and in the year we can use the good old set timeout which React

00:31.410 --> 00:38.630
Native supports in its javascript version to set a timer that expires after this time and let's say

00:38.630 --> 00:43.280
this is a value in milliseconds so that's just an assumption I have and we have to make sure that we

00:43.280 --> 00:47.530
pass the data in milliseconds stay for their offer.

00:47.540 --> 00:55.480
This function here will execute once the token expired and there the question is now what do we do there.

00:56.060 --> 00:57.890
Well in the end I want to dispatch logout here.

00:57.900 --> 00:58.980
Right.

00:58.980 --> 01:05.490
So the first set logger attempt at humour should probably not be a normal function but actually here

01:06.120 --> 01:10.370
I will have a function which takes advantage of redux thunk.

01:10.590 --> 01:16.680
So where we have this function in a function where it is inner function gets dispatch as an argument

01:17.400 --> 01:20.010
and they offer once Wednesday's async task finished.

01:20.010 --> 01:27.660
Once this timer expired we can dispatch logout so we can dispatch to assault of this action creator

01:27.660 --> 01:29.510
which is this action in the end.

01:29.670 --> 01:32.890
So that happens when the timer is done.

01:32.910 --> 01:38.670
Now when we do log out I also want to clear any running timer's because maybe we have that automatically

01:38.670 --> 01:45.760
set timer here which we're not setting yet but will soon do then I want to clear debts timer when we

01:45.760 --> 01:49.110
manually log out so that I don't have that ongoing timer.

01:49.120 --> 01:55.670
Even though it's redundant so we can add a new variable maybe at the top of the file here which I'll

01:55.670 --> 02:02.340
named timer which is on initialized initially and then a year when we set a timer.

02:02.340 --> 02:08.760
I will set the result of set time old timer or a story to result of that in timer which is a pointer

02:08.850 --> 02:12.860
at this timer and add a new function.

02:12.860 --> 02:21.920
Maybe here clear logout timer which is now a normal function not a function that gets this dispatch

02:21.950 --> 02:29.510
inner function but a normal function where I simply call clear timeout timer and the timer is that variable

02:29.510 --> 02:30.800
which points at the timer.

02:30.800 --> 02:36.080
I just want to check whether timer exists if it's not undefined and if it is not undefined I'll call

02:36.080 --> 02:41.620
this clear timeout is a built in function built into javascript to get rid of that timer.

02:41.840 --> 02:43.290
So if dead we concluded a timer.

02:43.290 --> 02:47.770
If we don't need it anymore and I want to get rid of it whenever we log out.

02:47.810 --> 02:56.540
So whenever this happens here I will call clear logout timer and one everything I need to do when I

02:56.540 --> 03:00.650
log out is I need to clear my async storage of course.

03:00.650 --> 03:09.760
So here I can call async storage remove item user data again using that same identifier I used for storing

03:09.760 --> 03:10.470
the data.

03:10.540 --> 03:12.550
So I used user data down there.

03:12.550 --> 03:18.010
I need to use the same identifier for clearing it now remove item returns a promise and we could wait

03:18.010 --> 03:18.680
for this.

03:18.730 --> 03:25.080
In that case we would need to return that inner syntax where we get dispatch and we do our async task.

03:25.090 --> 03:31.600
So we move this code here into debt and then here we can.

03:31.670 --> 03:33.380
This patch does action.

03:33.380 --> 03:36.500
We could do all of that if we're interested in the result of remove item.

03:36.500 --> 03:41.970
But here I am not interested I'll just fired is it don't wait for this promise to complete.

03:42.140 --> 03:48.560
Instead I immediately return this new action object and I trust that this will complete Nalco.

03:48.590 --> 03:51.440
Of course you could restructured as but that's how I will do it.

03:51.440 --> 03:57.380
This should remove the data from our local storage if that logout does this.

03:57.380 --> 04:03.450
We have to logout a timer function which sets a timer which does log out once this expires.

04:03.450 --> 04:07.920
Now we just have to make sure that we dispatch this set logout timer.

04:07.920 --> 04:15.510
Action creator here that we use does action creator and I want to use this when we authenticate so we

04:15.510 --> 04:22.630
have this authenticate action here and there in the end.

04:22.800 --> 04:30.770
I need to dispatch set logger timer as well as this here so there I will know you actually use this

04:30.770 --> 04:37.280
difference in text where we got this inner function which receives dispatch so that here I can dispatch

04:37.760 --> 04:42.940
set logout timer so that this year is triggered.

04:45.740 --> 04:51.590
And of course this also means that here instead of returning this we also need to dispatch this so we

04:51.590 --> 04:59.970
dispatch two actions here which is absolutely fine so I set my timer and I then dispatch to authenticate

05:00.390 --> 05:02.270
action.

05:02.290 --> 05:08.890
Now of course the logger timer needs to know how long it should take the expiration time is required.

05:08.890 --> 05:17.110
And I expect to get this does expiry time just to mix up names as an argument here in authenticate so

05:17.110 --> 05:20.920
that I can forward this here to my logout timer.

05:20.920 --> 05:27.400
That means that every place where we dispatch to authenticate action or where we use this action creator

05:27.400 --> 05:33.100
I should say this every place where we do this does not just need to provide the user I.D. into token

05:33.280 --> 05:35.230
but also the expiry time.

05:35.470 --> 05:38.580
And that starts here with sign up when we sign up.

05:38.590 --> 05:46.800
We have our expiration date here and we dispatch authenticate now authenticate all the needs to expiry

05:46.800 --> 05:47.670
time.

05:47.670 --> 05:52.440
Now the good thing is here it's very easy to find out when this expires because we have it in the response

05:52.440 --> 05:58.730
data there we have this expires in field which is of course a string.

05:58.830 --> 06:07.970
So with parse end we can convert is to be a number and then does will be in seconds authenticate and

06:07.970 --> 06:11.480
set logout timer expect values in milliseconds.

06:11.690 --> 06:19.540
So I will multiply this with 1000 and it will also add this in log in of course there.

06:19.580 --> 06:23.890
I will also add that as a third argument here.

06:24.110 --> 06:31.490
So that for log in when we dispatch does authenticate action we also forward our expiration time which

06:31.490 --> 06:36.520
we're getting back from firebase now we also have one other place where we need to do that.

06:36.530 --> 06:38.660
And that's the startup screen because data.

06:38.660 --> 06:45.740
We also dispatch authenticate and here we need to calculate the remaining time because this kicks in

06:45.950 --> 06:47.410
whenever we restart the app.

06:47.420 --> 06:51.080
So here we don't know how long it will take for the token to expire.

06:51.080 --> 06:53.100
We need to calculate this.

06:53.150 --> 07:02.060
So here we have my I can calculate the expiration time by basically taking the expiration date which

07:02.060 --> 07:08.090
is a date object and calling gets time on it which gives me its timestamp in milliseconds since the

07:08.090 --> 07:09.070
beginning of time.

07:09.800 --> 07:14.940
And from that I have to deduct the current timestamp gets time.

07:15.020 --> 07:18.820
So the current timestamp in milliseconds this will be in the future.

07:18.830 --> 07:19.850
This is now.

07:19.850 --> 07:24.810
So the difference should be a positive number because I'm checking that this isn't a future here.

07:24.830 --> 07:28.280
So this should be a positive number in milliseconds.

07:28.310 --> 07:35.060
So now the expiration time here can be forwarded to authenticate with that we should have all the logout

07:35.330 --> 07:36.110
as well.

07:37.790 --> 07:39.450
Now to validate that this works.

07:39.470 --> 07:46.440
Let's go to the off J.S. file and actually there indie set logout timer function.

07:46.560 --> 07:53.350
All temporarily divide the expiration time by 1000 which means I'll divide the milliseconds by 1000

07:53.370 --> 07:54.960
which turns them into seconds.

07:54.960 --> 07:57.320
And that means we should be instantly locked out now.

07:59.410 --> 08:06.940
If I reload I am locked out but you will soon notice that there's only theoretically works if I do log

08:06.940 --> 08:12.830
in again I'm logged in and now it sends a divided value by 1000.

08:12.830 --> 08:21.370
I should be logged out author free dot six seconds but I'm not I can navigate around but if I reload

08:22.390 --> 08:30.720
indeed now I'm locked out so it kind of cleaned up the data but it didn't navigate us back to the off

08:30.720 --> 08:31.530
screen.

08:31.920 --> 08:37.710
And the reason for that is that we never instruct react native to navigate us back to the off screen.

08:37.740 --> 08:39.250
So that's the missing piece.

08:39.270 --> 08:45.300
Clearing our a redux store is nice but in reaction to that clearance we need to make sure we're taken

08:45.300 --> 08:52.090
back to the off screen to make sure that this happens we need one place which is always rendered which

08:52.090 --> 08:59.230
wraps our entire app where we can listen to our redux store and find out when our token is reset to

08:59.230 --> 09:06.480
know so that if that happens we can navigate back to the off screen noted would be the app jazz file

09:06.490 --> 09:08.100
because that wraps everything.

09:08.110 --> 09:14.080
But the problem is in there I set up redux here so redux in my store is only available inside of here.

09:14.080 --> 09:19.960
So in nested child components and that's already my navigator a component to which I have no direct

09:19.960 --> 09:21.000
access.

09:21.100 --> 09:28.700
The solution is to simply wrap this with another component I'll create that in the navigation folder

09:29.090 --> 09:33.120
because on a name it navigation container.

09:33.140 --> 09:37.690
Now this is a normal react component like this.

09:38.820 --> 09:46.650
Where I don't need anything from RAC native but we're adjusted up my Neva Gration container component

09:46.650 --> 09:52.980
where I receive props and returns I'm j is X in the end and export this as a default navigation container

09:54.380 --> 10:02.810
now in there I want to set up my navigational import shop Navigator from the shop Navigator which is

10:02.810 --> 10:06.230
in the same folder and that will be what a return here.

10:06.410 --> 10:15.110
My shop navigator like this now I can use my navigation container here in the app J.S. file so instead

10:15.110 --> 10:24.190
of importing shop navigator here I import my navigation container from the navigation folder and the

10:24.230 --> 10:29.980
from the navigation container file and use navigation container here instead of the shop navigator.

10:29.990 --> 10:34.670
Now this is simply a wrapper around the shop navigator but since it's inside of the provider I now have

10:34.670 --> 10:36.410
access to redux there.

10:36.440 --> 10:46.150
So in here we can import use selector from react redux and use that here to tap into redux.

10:46.190 --> 10:54.320
So here in the navigation container I can simply get access to is off let's say by using use selector

10:55.010 --> 11:00.410
that takes this function which gives me access to the redux state and then I can access state DOT of

11:00.410 --> 11:06.980
DOT token to get access to the token in my off state slice and use a double bang operator to basically

11:06.980 --> 11:12.620
force this to be true or false and if we have no token this will be false so is off will be false in

11:12.620 --> 11:15.460
that case if we have a token it will be true.

11:15.500 --> 11:23.780
So it is off as true if we have a token which makes sense I guess now we can use fact here to react

11:23.780 --> 11:25.060
to changes in that.

11:25.160 --> 11:29.480
So here and use effect my dependency array includes is off.

11:29.480 --> 11:37.270
So when is off changes does affect function should run and therefore here I can then check if we're

11:37.270 --> 11:39.630
not authenticated because that's what I'm caring about.

11:39.670 --> 11:45.910
If is off it's not true if it is true I don't care but if it is not true then I want to navigate to

11:45.910 --> 11:49.220
the off screen and now we have a no problem.

11:49.390 --> 11:55.930
The navigator is here and only in components that are rendered with the help of the Navigator we have

11:55.930 --> 12:03.220
access to proper navigation to navigate but thankfully react navigation gives us an escape hatch we

12:03.220 --> 12:08.770
can use a ref to get access to the navigation functionality with the help of this component when we

12:08.770 --> 12:17.550
use it in our as X code we can create such a ref with used ref with the use ref hook and we simply create

12:17.610 --> 12:20.610
our NAV ref here by calling use ref like this.

12:21.270 --> 12:27.070
And you should be aware of references and react which is basically a way for you to divert the axis

12:27.070 --> 12:34.890
the element you render and J is X and now we can add the ref property to the shop navigator and a scientist

12:34.910 --> 12:37.450
to NAF ref or the other way around.

12:37.470 --> 12:43.020
So this establishes a connection between the NAF ref constant and this element which in the end is rendered

12:43.020 --> 12:49.610
here and now with this here in the effect we can call NAV for ref dot current.

12:49.630 --> 12:50.830
Does this how refs work.

12:50.830 --> 12:59.660
They have a current property dispatch this patch is a method made available by the shop navigator or

12:59.660 --> 13:05.420
by his app container which it isn't the end because shop container is nothing else than what shop navigator

13:05.420 --> 13:11.010
J.S. exports which is such a app container component and this component has a dispatch method which

13:11.010 --> 13:15.110
you can use to dispatch a navigation action for that.

13:15.110 --> 13:24.650
We now need to import something from react navigation and that something is the navigation actions object

13:24.650 --> 13:29.720
here and then here we call navigation actions dot navigate.

13:29.900 --> 13:36.620
And now it is allows us to navigate however not with all like this but this requires the object as an

13:36.620 --> 13:41.950
argument where you set up the route name and this can now be off.

13:41.960 --> 13:47.270
So this is how we can now navigate from insert this component even though it's outside of the navigator

13:49.080 --> 13:56.610
so this goes to off whatever our is all state changes to not authenticated despite away all the means

13:56.610 --> 14:03.320
that in the shop navigator in our logout button we don't need to navigate here because if we trigger

14:03.340 --> 14:08.670
logout if we dispatch this action we clear the token and redux and therefore this should automatically

14:08.670 --> 14:12.390
trigger our navigation thanks to this navigation container.

14:12.660 --> 14:18.140
And if for now if we save that we should navigate two off when the token is invalid.

14:18.140 --> 14:25.530
So now if a log in again after free dot six seconds we should be locked out and we should see that we

14:25.530 --> 14:26.800
are logged out.

14:26.850 --> 14:28.690
Yeah that's looking good.

14:28.890 --> 14:30.320
Let's give it another try.

14:30.330 --> 14:30.780
Here

14:36.990 --> 14:37.520
yeah.

14:37.820 --> 14:45.490
Going back and that's all the try manual logging out so I go to log in opened this click log out.

14:45.530 --> 14:47.340
This also still works.

14:47.410 --> 14:50.900
So with that we got the auto log out functionality built in.

14:50.950 --> 14:57.580
Now let's go back to the off action file and remove this dummy division here because I only did this

14:57.580 --> 15:02.020
for testing of course that don't want to manually shorten my expiration time instead.

15:02.020 --> 15:08.980
Now here we have a functionality that works and that makes sure that no matter if we're signing up or

15:09.160 --> 15:16.210
we're signing in or whatever we're doing we have a token which we store which we can use and we're making

15:16.210 --> 15:21.660
sure that we're also locked out automatically if our token expires.

15:21.700 --> 15:24.010
This is the finished application here.
