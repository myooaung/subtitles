WEBVTT

00:02.210 --> 00:06.900
So in the last lecture we made sure that we can again add places and view them

00:07.010 --> 00:13.480
but what if we want to click a place? Right now, we get an error because we're not handling this on item

00:13.480 --> 00:15.660
selected event here.

00:15.970 --> 00:22.740
Now let's handle it and let's make sure that we actually push a new screen onto our stack of screens which

00:22.740 --> 00:25.530
shows us the details about this place,

00:25.530 --> 00:32.010
conveniently we've already got a place detail screen, it's a modal though and we could still use a modal,

00:32.010 --> 00:33.140
nothing wrong with that

00:33.150 --> 00:35.280
but I want to show you something new.

00:35.580 --> 00:37.850
So I'll actually edit PlaceDetail.js

00:38.010 --> 00:40.910
and no longer use a modal here,

00:40.950 --> 00:47.980
just going to remove the wrapping modal content and remove the modal import therefore

00:48.270 --> 00:51.360
and hence we'll just have this normal view.

00:51.690 --> 00:59.830
I can now also break up this workaround we used before where we would need this hack here to ensure

00:59.860 --> 01:03.040
that our modal content isn't loaded too early,

01:03.270 --> 01:07.020
so let's remove that and the if statement at the variable

01:07.110 --> 01:11.570
and now we got some code which we can use as a screen.

01:11.580 --> 01:19.230
Now if our goal is to use this as a screen though, we should also move it from components into screens,

01:19.410 --> 01:24.010
so here I'll add place detail, as a screen though,

01:24.130 --> 01:26.230
so it's still react component

01:26.380 --> 01:34.430
but now in the screens folder. Now this component is just a functional component,

01:34.660 --> 01:40.270
it's not a class and it doesn't have to be, we might turn it into a class later but for now, it's fine as it

01:40.270 --> 01:43.950
is. I'll just rename this here from modal container to container

01:43.960 --> 01:50.890
because we're no longer in the modal, I guess, so let's rename it down there in our stylesheet too and one

01:50.890 --> 01:54.680
other thing I want to do is I'll get rid of this close button,

01:54.850 --> 01:58.780
we won't close it like this, it will just be a regular screen.

01:59.290 --> 02:02.530
So we still get props with selected place and so on,

02:02.530 --> 02:05.360
the question is how do we get the selected place,

02:05.560 --> 02:07.430
well we'll come back to this,

02:07.780 --> 02:10.850
let's now see how we can load this screen

02:10.870 --> 02:13.760
first of all. Now for that we need to register it, 

02:13.840 --> 02:17.650
so in app.js, let's register it as a new screen,

02:17.770 --> 02:27.520
so I'll add navigation register component and as before, give it a unique identifier,

02:27.520 --> 02:37.300
so awesome-places.PlaceDetailScreen to stay in line with the other screen names.

02:37.300 --> 02:47.420
Then we need to import it to be able to load it, so here I'll import the place details screen from source

02:48.610 --> 02:49.840
screens

02:50.420 --> 02:58.540
place detail place detail and then add it to this generator function here, the place detail screen. And

02:58.540 --> 03:03.410
I won't pass the store and provider because right now I don't really need redux here,

03:03.530 --> 03:07.230
this might change but for now, I'll keep it as it is.

03:07.640 --> 03:14.510
So now I want to push this component on the stack of pages when we click on a place, we can learn how

03:14.510 --> 03:24.320
this works in the documentation of our react native navigation page. There you can go to the screen

03:24.350 --> 03:28.750
API and you will find this push method,

03:28.820 --> 03:35.030
this basically allows you to push a new screen because react native navigation automatically manages a

03:35.030 --> 03:39.670
stack of pages for every app you started,

03:39.680 --> 03:45.590
keep in mind the app it was started with start tab based app or start single screen app.

03:47.040 --> 03:54.230
Push simply adds a new page, so you can think of all your navigation happening in a stack of pages

03:54.240 --> 04:01.080
now, at the topmost page is always the one which is visible and you can push and pop pages to determine

04:01.080 --> 04:05.480
what should be visible right now and where the back button would lead to.

04:05.520 --> 04:11.750
The cool thing is react native navigation automatically gives you a special prop you can use, the navigator

04:11.760 --> 04:16.820
prop which exposes this push method and all the other methods which are documented here,

04:16.830 --> 04:18.870
so definitely dive into this.

04:19.350 --> 04:21.450
I'm interested in the push method,

04:21.660 --> 04:29.470
so on find place, if I click on a place which I do in the place list ultimately, I get on item selected

04:29.480 --> 04:38.040
and when this occurs, I want to push a new page. So I'll add on item selected to my place list component

04:38.730 --> 04:48.390
and in my find place screen, I'll add the item selected handler, I'll get the key of the item which was

04:48.390 --> 04:52.210
selected because that is passed back from the place list

04:52.430 --> 05:01.050
here and in find place, I can now access this props navigator as we just saw in the documentation of react

05:01.050 --> 05:05.130
native navigation and call push

05:05.550 --> 05:11.900
and now we see that push simply takes a javascript object where we at least specify the screen we

05:11.910 --> 05:12.730
want to push too,

05:12.750 --> 05:17.370
you can also define the title of the upcoming screen and so on.

05:17.370 --> 05:22.130
So I'm going to pass a javascript object here with the screen property and load

05:22.150 --> 05:31.640
awesome-places.PlaceDetailScreen, the screen we'd just registered.

05:31.680 --> 05:35.870
I'm also going to set a title and the title should be the place name,

05:36.000 --> 05:44.070
well I can do this by simply getting the name of the item which has this key, the name of the place which

05:44.070 --> 05:50.120
has this key. For this, we already get the places array,

05:50.400 --> 05:58.110
so I can simply say this props places which fetches all places I have in redux and simply find the

05:58.110 --> 06:00.810
place which has this key,

06:01.260 --> 06:08.540
so this will run on every place in this array and it should return true if the place key is equal to

06:08.540 --> 06:09.150
the key

06:09.210 --> 06:10.160
I got here.

06:11.480 --> 06:17.420
On the results, so on the place I found, I now want to fetch the name,

06:17.420 --> 06:26.140
if we have a look at our store, our places reducer, we add a name and an image property to every place

06:26.170 --> 06:30.050
we add and I'm accessing the name now, in find place

06:30.070 --> 06:32.220
I want to set it as a title.

06:32.560 --> 06:39.250
We also need to pass some information into the upcoming screen though so into the place detail screen

06:39.250 --> 06:45.670
and if we have a look at the documentation, we see that there is this pass props property. As the names

06:45.670 --> 06:46.410
suggests,

06:46.420 --> 06:49.260
this allows us to pass some props.

06:49.390 --> 06:56.940
So we simply define any javascript object of our choice which will be passed as props into the new screen,

06:57.190 --> 06:59.990
they will be merged with your regular props.

07:00.430 --> 07:00.960
So here,

07:01.020 --> 07:07.450
I want to pass my place, the selected place let's say because that's what I already use as a prop in

07:07.450 --> 07:08.570
my place detail,

07:08.620 --> 07:11.590
I'm trying to access props selected place already.

07:11.650 --> 07:17.870
So now I'm setting a selected place prop and I want to set this place I found here,

07:17.950 --> 07:22.280
so to not duplicate the code, let me cut this logic here and

07:22.330 --> 07:24.320
execute it right at the start,

07:24.490 --> 07:35.380
so that's the sel place for selected place and I access sel place name here as a title and I pass

07:35.530 --> 07:39.520
the selected place as a prop to the upcoming page.

07:39.520 --> 07:46.620
So now with that, let's see if that works and let's connect our on item selected prop with this item

07:46.620 --> 07:52.980
selected handler, so the handler we just worked on. With that let's save all files and let's go back

07:52.980 --> 07:55.410
and reload our page,

07:55.470 --> 07:59.020
let's login on iOS and share a place,

07:59.070 --> 07:59.870
Munich,

08:00.210 --> 08:03.230
let's find the place and click on it

08:03.510 --> 08:04.710
and this is what I meant.

08:04.860 --> 08:11.600
We get this beautiful navigation and the back button automatically added by react native navigation,

08:11.790 --> 08:16.140
we can go back and forth and as you see it correctly loaded our place,

08:16.140 --> 08:23.520
so the props were passed correctly. The delete button won't work yet but the rest is working just fine,

08:23.550 --> 08:24.710
so that's awesome.

08:24.720 --> 08:27.820
With that we got a working application on iOS,

08:27.900 --> 08:30.100
let's also try it on Android,

08:30.180 --> 08:36.360
so let me add Mumbai here, add this and go to find place,

08:36.360 --> 08:37.790
whoops, didn't click the button,

08:37.830 --> 08:38.730
now I did.

08:39.460 --> 08:44.440
And you see we get a different navigation style here because we're on android so we get the Android

08:44.650 --> 08:47.500
back and forth style here and that's pretty awesome.

08:47.500 --> 08:54.380
So with that we get this push navigation in place and you can go as many levels deep as you want,

08:54.400 --> 08:59.270
so we could push another page on that stack and go deeper and deeper and deeper.

08:59.310 --> 09:06.430
You can always go back and you can use all these other methods here like for example pop to root to remove

09:06.460 --> 09:12.010
all pages and go back to the root page. We'll actually do this in the next lecture.
