WEBVTT

00:02.210 --> 00:08.690
The goal of the product overview screen of course is to present a list of all the products we can order

00:09.830 --> 00:13.250
and therefore here will of course have a normal react component.

00:13.250 --> 00:15.490
So we need to import react from react.

00:15.620 --> 00:20.440
We'll also need to import a bunch of things from React Native for sure.

00:20.450 --> 00:26.330
For example I will need a flat list here because I will output a list of products we don't know how

00:26.330 --> 00:31.910
long that listed will be but it potentially is very long so we want to be able to optimize it for scrolling

00:31.910 --> 00:33.440
and that is what the flat list does.

00:33.440 --> 00:39.050
Out of the box and we can import more components as we need them.

00:40.460 --> 00:42.020
So these are the two base imports.

00:42.020 --> 00:51.980
Now with that I'll create my products overview screen over view screen components here simply in this

00:52.070 --> 00:58.820
function form here where we receive props and then we have to return some J as X here in the end.

00:58.820 --> 01:05.360
And in the end I will also export my products or over your screen here at the default of this file now.

01:05.370 --> 01:11.830
With that the question of course is what's in there what's inside of our component and in there.

01:11.910 --> 01:14.660
I of course want to render my flat list.

01:14.670 --> 01:17.610
I want to render my flat list of products.

01:17.610 --> 01:23.340
Now of course we have no products yet but we can add some justice before I will therefore add a model's

01:23.340 --> 01:26.380
folder where I can define how a product should look like.

01:26.400 --> 01:32.130
This is not a must do but it can help you organize your data and make sure that you never accidentally

01:32.130 --> 01:37.980
work with different types of products where you simply forgot to add a certain property in one place

01:37.980 --> 01:39.120
of your app.

01:39.180 --> 01:44.640
So if we're here in the product J as file in the models folder all treat a product class which has a

01:44.640 --> 01:51.030
constructor where I define how a product should look like and I want every product to have a unique

01:51.030 --> 01:57.200
I.D. It should all to have a owner I.D. which is the idea of the user who created it.

01:57.540 --> 01:59.550
It should have a title it should be.

01:59.630 --> 02:04.320
It should have an image you or l it should have a description and it should have a price.

02:04.320 --> 02:08.850
These are the things that make up a product for me and this application.

02:09.030 --> 02:13.890
Now of course when we receive all these things as arguments in the constructor I want to store them

02:13.890 --> 02:18.570
in properties office object which you can create with the help of his constructor.

02:18.570 --> 02:21.960
So therefore I do this assignment which you also saw before.

02:21.960 --> 02:27.570
Whereas store all that data we receive in properties of the created object.

02:27.570 --> 02:37.660
So here we store the title the image you URL the I.D. And of course description and the price with that

02:37.660 --> 02:44.350
set up here we have a blueprint for a product and we will use that in redux and we will then in the

02:44.350 --> 02:52.280
end get such a list of products here in our products overview screen now to get it there we need to

02:52.280 --> 02:56.980
tap into redux and for that to be possible we need to set up redux.

02:56.990 --> 03:03.080
So let's go to the store folder now and in there I went to the actions sub folder and reduced this sub

03:03.080 --> 03:07.820
folder in this app by the way we will have different producers and actions.

03:07.820 --> 03:10.640
Unlike in the last module here.

03:10.760 --> 03:13.760
So for the moment we'll start with the products.

03:13.830 --> 03:19.510
J.S. fall here in the rear user's folder and all that a product's jazz following the actions folder.

03:19.550 --> 03:24.980
Again if it's confusing to you that we have to same name here in different folders you can always see

03:24.980 --> 03:29.440
in which file I am here at the top here with this breadcrumb feature.

03:29.660 --> 03:33.480
And of course you could all the work with different names in your app if this is confusing.

03:33.620 --> 03:39.380
I think it's pretty clear though in which file I am working it's clearly selected here as well.

03:39.380 --> 03:45.200
So let's start in the products reducer and in there I want you to find my initial state because this

03:45.200 --> 03:49.600
kind of defines how many products related state slice will look like.

03:49.880 --> 03:54.440
And of course as always in programming there is more than one possible approach.

03:54.440 --> 04:02.890
I think it makes sense to say that we have a list of away label products that's an array and of user

04:03.190 --> 04:06.070
products and user products.

04:06.070 --> 04:08.630
These are simply the products which we created.

04:08.710 --> 04:14.800
So where the owner I.D. is the idea of the currently locked in user and for the moment we'll have no

04:14.800 --> 04:19.450
log in feature but later and it will be the case for the moment you will just set this up into a dummy

04:19.450 --> 04:26.380
way away label product should be all products or maybe also only the price which we didn't create.

04:26.380 --> 04:31.990
So we can't buy our own products though in reality in most shops you can also buy what you sell.

04:31.990 --> 04:34.990
So I think we can also just take all products here.

04:34.990 --> 04:39.700
But that's something you can also find tune in your application.

04:39.700 --> 04:47.920
So we have these two product arrays now in the reducer here which is a function where we get the state

04:47.920 --> 04:49.960
which should be initialized with our initial state.

04:49.960 --> 04:55.360
And should that take this as a default value and where we get an action in there we will later handle

04:55.360 --> 05:02.260
different will action types so that we can for example add a new product and so on for the moment I'll

05:02.260 --> 05:04.380
just always return my state here def.

05:04.450 --> 05:09.610
I will always return my initial state of course and that will allow us to then tap into redux and at

05:09.610 --> 05:12.300
least get that initial state.

05:12.340 --> 05:19.210
Now of course without the possibility of adding new products our initial state isn't that useful though

05:19.210 --> 05:21.550
because it has empty lists of products here.

05:21.700 --> 05:23.480
So nothing we could render.

05:23.740 --> 05:25.420
So just as I did it before.

05:25.480 --> 05:32.080
I'll also add a Data folder and set up some dummy data in here which will not use for the entire module

05:32.110 --> 05:37.150
but which we can use for now so that we have some products to get started with.

05:37.150 --> 05:43.390
And for this you find attached this dummy data J is file which you can just take to replace yours or

05:43.390 --> 05:47.230
where you can just copy in the content into your dummy data jazz file.

05:47.230 --> 05:50.620
And what I do in there is I import my product model.

05:50.620 --> 05:54.700
So of course therefore you should make sure that this path is correct for you if you just copied my

05:54.700 --> 06:00.940
code and then I set up this product array here where I have a bunch of dummy products.

06:00.940 --> 06:07.150
Now it's important we get the idea of the product then we got the owner I.D. then we got the title and

06:07.150 --> 06:12.100
you should make sure that your product model is set up so that this order is correct.

06:12.130 --> 06:19.630
So here we get the title then we got the image you're El as the fourth argument that you receive then

06:19.630 --> 06:23.590
you have the description as the fifth and the price as the lost argument.

06:23.590 --> 06:30.250
So make sure that your product model is set up in the way that these that this is the order of arguments.

06:30.250 --> 06:31.690
This is what you have here.

06:31.930 --> 06:34.050
In the end I export is a right as a default.

06:34.070 --> 06:38.160
Therefore now in this product reducer we can simply import this.

06:38.170 --> 06:47.080
So they are we can import products are a list of dummy products from the data folder and there from

06:47.080 --> 06:52.750
the dummy data J.S. file and we can simply initialize our away label products with products here for

06:52.750 --> 06:59.410
the moment and the user products can all be initialized with that though for the user products there

06:59.440 --> 07:06.310
is one little difference which I want to make I want to filter them for a certain owner I.D. because

07:06.310 --> 07:12.820
in the end not all products will be tried by us instead here I will filter that dummy array look at

07:12.820 --> 07:19.420
every product that only include products in my user products array where the owner I.D. is equal to

07:19.420 --> 07:26.500
you one which if you have a look at the dummy data is simply the case for some products not for all

07:26.500 --> 07:26.960
of them.

07:27.010 --> 07:32.650
Some of them have to you one owner I.D. and this will be the products I use here as user products as

07:32.650 --> 07:39.010
a dummy setup with that our reducer for the products is set up here we can ignore the products actions

07:39.100 --> 07:45.070
for the moment will of course add some later and now we can go to the app chips fall and set up redux

07:45.070 --> 07:46.450
there as well.

07:46.450 --> 07:50.100
For that we need to import something from redux.

07:50.140 --> 07:54.720
And of course we also need to import something from react redux.

07:54.970 --> 07:58.870
Now it is something we need to import from redux here.

07:58.870 --> 08:04.060
That is of course that creates the world function and the combined reduce service functions so that

08:04.060 --> 08:08.910
we can create one root reducer at the moment of course we have only one reducer.

08:08.920 --> 08:12.610
But as I mentioned in December we will actually have multiple road users in the end.

08:12.610 --> 08:18.300
So here you definitely need to combine your road users and from react redux.

08:18.310 --> 08:25.750
We need the provider component which we wrap around our app to well provide something we will then of

08:25.750 --> 08:33.600
course also need to import the products reducer or however you want to name it from the store folder.

08:33.660 --> 08:39.940
They are from road users and they are from the products file so that we can thereafter create our route

08:40.000 --> 08:48.490
reducer by calling combined with users where we then pass on an object where we map let's say two products

08:48.520 --> 08:55.330
but that is up to you our products reducer and later we will add more reviews her stare and then we

08:55.330 --> 09:03.280
can create our store with creates the where and this in the end takes our route reduced her as our argument

09:03.970 --> 09:11.230
and thereafter down there in the J as X code I will create my provider a component in between the opening

09:11.230 --> 09:17.900
and closing tax I will then all later have my my screen for the moment will not have anything there.

09:17.920 --> 09:23.080
This is not valid J is X by the way but we'll fix it later and for the provider a component of course

09:23.080 --> 09:29.200
we have to set the store prop and set this to the store constant order to store in general we're trading

09:29.200 --> 09:36.180
here with that redux should be set up with that will later be able to tap into it here from the product

09:36.210 --> 09:42.120
overview screen and with that of course the next step all this to add navigation so we can see that

09:42.120 --> 09:46.670
product overview screen so let's continue working on these steps.

09:46.710 --> 09:47.190
Next.
