WEBVTT

00:02.250 --> 00:07.350
So we want to add a modal, conveniently if we have a look at the official documentation,

00:07.350 --> 00:09.760
there is a modal component we can use,

00:09.870 --> 00:11.130
so let's do that.

00:11.430 --> 00:17.910
First of all I will create a new component which should wrap this modal, I'll name it place detail because

00:17.910 --> 00:22.960
it will essentially show some details about the selected place, PlaceDetail.js.

00:22.980 --> 00:27.970
In there I'll create a functional component,

00:27.980 --> 00:33.830
place detail which receive some props and then return some jsx,

00:33.900 --> 00:37.230
I will therefore import react from react,

00:37.230 --> 00:44.820
we need that to render jsx and transform it correctly and then I will export this as the default.

00:44.850 --> 00:53.640
Now I also need to import something from react native of course and that something obviously is the

00:53.640 --> 00:57.110
modal, so in here,

00:57.310 --> 01:02.070
let's simply return a modal as jsx.

01:02.320 --> 01:08.400
We probably need a bit more though, probably also want to have a view to structure our content in the modal,

01:08.620 --> 01:14.230
we want to output an image, we probably want to render text, so the name of the place we selected and I

01:14.260 --> 01:19.960
want to have buttons so that we can also close the modal or delete the element.

01:20.270 --> 01:27.790
So in the modal, let's add a view, always a good starting point if you want to structure something, that

01:27.820 --> 01:29.920
view here will in the end

01:29.910 --> 01:37.840
hold my image then it should hold the text which outputs the name of the place we're looking at

01:38.150 --> 01:44.840
and then I want to have two buttons, I'll wrap this in a separate view to make styling them and positioning

01:44.840 --> 01:46.310
them a bit easier,

01:46.960 --> 01:51.250
so here, I will have two buttons which are self-closing elements,

01:51.250 --> 01:52.650
don't forget that.

01:53.200 --> 01:58.770
So I get props and I expect that these props hold the information about the place we're viewing,

01:58.840 --> 02:07.930
so I probably have a place name I can output on my props, the image should be able to fetch the source

02:07.930 --> 02:09.940
from props place

02:10.960 --> 02:15.720
image and yeah, well the buttons, we'll take care about these later.

02:16.010 --> 02:19.130
So let's make sure that we can actually view the modal and

02:19.640 --> 02:28.790
for that, let's import it in our app.js, in our app container, there I will import place detail from,

02:29.240 --> 02:38.590
now let's reach out to source components place detail and there, the place detail file.

02:38.610 --> 02:44.970
Now I will render my custom place detail component in the jsx code here inside of my container,

02:45.150 --> 02:51.120
so here, place detail, now for the place detail to display something, I need to pass place image and place

02:51.120 --> 02:53.480
name on my props object.

02:53.520 --> 02:55.960
So let's go back and

02:56.160 --> 02:58.530 
well how do we pass something?

02:58.710 --> 03:04.030
And for that we need to know which element we selected, so on which element we clicked in our list,

03:04.470 --> 03:09.160
so the first step could be to rename onItemDeleted to maybe onItemSelected,

03:09.160 --> 03:14.130
sounds more appropriate because we're not instantly deleting the item anymore by just clicking

03:14.130 --> 03:15.220
on it.

03:15.240 --> 03:21.180
So in the place list, let's make sure that this prop is renamed to onItemSelected,

03:21.660 --> 03:24.090
no more onItemDeleted.

03:24.660 --> 03:26.330
Back in the app.js file,

03:26.370 --> 03:31.320
we have onItemSelected and we probably want to execute the placeSelectedHandler here and not

03:31.320 --> 03:33.130
the placeDeletedHandler, 

03:33.320 --> 03:36.290
so let's rename placeDeletedHandler to placeSelectedHandler

03:36.370 --> 03:39.480
and I'll comment out the old code for now.

03:39.480 --> 03:41.040
So in placeSelectedHandler,

03:41.130 --> 03:47.570
I want to kind of store the information which place was selected so that we can pass it to the place

03:47.580 --> 03:49.870
detail which holds our modal,

03:50.190 --> 03:55.920
therefore I'll go to the state of my app container and I'll add a selected place which initially is

03:55.920 --> 04:00.970
null because we have no place selected, in placeSelectedHandler, I'll then call

04:00.990 --> 04:12.010
this set state and here, I want to set the selected place equal to the place which has this key.

04:12.120 --> 04:16.950
So therefore, I'll use the different set state syntax where we get the previous state, then have a function

04:16.950 --> 04:21.770
and in that function body, we return the object we want to merge with the state.

04:21.930 --> 04:25.800
So there the selected place will use the previous state,

04:25.920 --> 04:33.210
there we'll have a look at all our places and we'll run the find method on it, find is a default javascript

04:33.300 --> 04:38.480
array method which finds one element in an array that fulfills a certain criteria,

04:38.550 --> 04:44.880
the criteria is passed in a function we passed to find, that function will be executed on every element

04:44.910 --> 04:47.860
in places, in that array, so to say.

04:48.120 --> 04:53.550
So here, we'll have a look at every place and we have to return true if it's the object we were looking

04:53.550 --> 04:56.050
for, false if it's not the object.

04:56.460 --> 05:01.100
I want to return true if the key of the place we're running the function on right now

05:01.200 --> 05:04.130
is equal to the key I receive in placeSelectedHandler

05:04.210 --> 05:05.610
because that is the key

05:05.610 --> 05:10.570
I'm interested in, like that.

05:10.690 --> 05:15.130
So now we have a function to actually select a place when we click on it,

05:15.130 --> 05:17.890
I now need to pass this information to place detail,

05:18.040 --> 05:19.210
so here I will pass

05:19.300 --> 05:23.500
selected place maybe and this should be this state

05:23.530 --> 05:24.640
selected place,

05:24.700 --> 05:33.100
so this new property we added to the state. In place detail, I now need to use that information, here

05:33.100 --> 05:37.680
we output props and we don't have place image and place name as it turns out,

05:37.690 --> 05:46.890
instead we have a selected place so we can output selected place image and name, like that. We

05:46.890 --> 05:48.870
will run into one issue with that though,

05:49.170 --> 05:58.260
initially selected place is null, the place detail is always rendered though and I want to always render it

05:58.290 --> 06:05.580
because I want to control how the modal is displayed differently and not by rendering this or not rendering

06:05.580 --> 06:06.400
this.

06:06.930 --> 06:12.990
So since this is always rendered, we even try to access place image and place name when selected place is

06:12.990 --> 06:15.230
null so we would get an error,

06:15.410 --> 06:21.510
easy workaround is to use a ternary expression here and check if props selected place is set and only

06:21.510 --> 06:27.900
if it is set, then we will reach out and access place image, otherwise

06:29.240 --> 06:37.880
I will simply pass null as a image source or alternatively, that is maybe the more elegant solution, we

06:37.880 --> 06:39.590
can leave it as it is

06:39.830 --> 06:47.990
but in our modal code here, in our modal jsx code, we render image and text conditionally only if we

06:47.990 --> 06:49.590
do have values.

06:49.700 --> 06:55.610
So I'll replace the parentheses here with curly braces to have a real function body in our functional

06:55.610 --> 06:56.520
component

06:59.730 --> 07:07.710
and then in there, we should return something, some jsx, that is the jsx we return previously to

07:08.160 --> 07:15.410
but before we return, I now will create a new variable which I'll name modal content which is null initially

07:16.170 --> 07:24.690
but if props selected place is set, if it's not null, then modal content will actually be my image

07:24.720 --> 07:26.320
and text jsx here.

07:26.320 --> 07:29.170
So let's wrap this in parentheses like this

07:30.440 --> 07:38.720
and here we would get an error because we have adjacent jsx elements, we could fix it with some auxiliary

07:39.170 --> 07:43.770
component but here I will simply use a view.

07:43.860 --> 07:52.590
Now with that, we can render modal content in our modal and it will only get rendered if selected

07:52.590 --> 07:54.010
place is set.

07:55.420 --> 07:58.680
With that let's save all files and go back and

07:58.750 --> 08:00.130
yeah we see a modal,

08:00.180 --> 08:01.880
now that's great.

08:01.900 --> 08:09.780
If we reload, we even get an error because our buttons don't have titles,

08:09.980 --> 08:11.190
so let's set titles,

08:11.190 --> 08:17.660
let's set this one to delete and here on the second button, let's set it to close.

08:17.720 --> 08:20.700
We now save this, we reload,

08:21.140 --> 08:24.090
we have a modal with the two buttons and nothing else

08:24.260 --> 08:28.790
and here on iOS, this even goes under the status bar,

08:29.060 --> 08:30.890
so our modal needs some styling,

08:31.010 --> 08:36.950
the button do too. The delete button should be red and the cool thing about the built-in button is we

08:36.940 --> 08:42.910
can simply add the color prop and set this to red or any hex code which represents a color.

08:42.920 --> 08:52.620
Now we got this as red but still, I want to change the layout here, for that I will actually import stylesheet

08:53.190 --> 09:01.250
as we did a couple of times before too and I will create my styles constant and use stylesheet.

09:01.270 --> 09:07.210
create here to create a view for the modal, maybe a modal container,

09:07.230 --> 09:15.390
so some styles for the modal I want to say and here, let's at least add a margin of let's say 22 pixels

09:15.720 --> 09:18.640
so that it doesn't go under the status bar anymore.

09:18.750 --> 09:26.250
So with that, if we now assign this to the view inside the modal, so set the style equal to styles modal

09:26.250 --> 09:28.030
container and we save this,

09:28.290 --> 09:30.240
now this looks better.

09:30.240 --> 09:32.600
Obviously the issue is the modal is always open,

09:32.610 --> 09:36.380
so we've got no way of selecting element, that is the other part.

09:36.420 --> 09:40.280
I told you that I want to control the visibility of the modal differently,

09:40.290 --> 09:43.870
I want to control it with a property on this modal component,

09:44.010 --> 09:50.670
the visible property. By default it's always visible but we can bind this to a boolean and here I want to

09:50.670 --> 09:56.350
bind it to props selected place, I want to check if that's not null,

09:56.460 --> 09:59.770
only in this case the modal should be visible.

09:59.790 --> 10:03.540
So now you see the modal is not visible,

10:03.600 --> 10:05.210
I could add a place

10:05.520 --> 10:09.330
and now if I click on this place,

10:09.330 --> 10:14.670
now we see the modal. It would be nice to get an animation for that though,

10:15.000 --> 10:21.540
you could do this with another property, we can set the animation type on the modal and we can set it

10:21.610 --> 10:27.130
to either slide fade or none, none is the default,

10:27.260 --> 10:29.440
I want to use slide here.

10:30.360 --> 10:32.080
So let's save this file,

10:32.280 --> 10:33.230
let's try this again,

10:33.300 --> 10:35.120
let's reload our app here,

10:35.340 --> 10:42.600
let's add a place again and let's click this, now it slides up, now closing and deleting won't work.

10:42.600 --> 10:48.300
Another issue is that we don't really see our content, do we? We don't see the image, we don't see the text.

10:48.360 --> 10:50.450
Now the reason for this is very simple,

10:50.580 --> 10:55.400
if we have a look at what we access on our selected place, it's place image and place name.

10:55.620 --> 11:00.390
Let's have a look at our app container, what we set, there when we add a new place,

11:00.420 --> 11:04.040
we actually set the name and image, not place name and place image.

11:04.220 --> 11:10.600
So let's go back to our detail and change this to access name here and image like this,

11:10.650 --> 11:16.000
now with that in place, if we now reload this and we add Munich here,

11:17.070 --> 11:18.580
let's now click this again,

11:18.840 --> 11:21.160
now we see Munich but the image is missing.

11:21.360 --> 11:26.700
Well it's missing because we didn't set a styling and I told you for network images, images loaded

11:26.730 --> 11:27.830
over the Internet,

11:27.900 --> 11:31.110
you need to set a style with width and height.

11:31.620 --> 11:36.070
So let's add such a style for the place image here,

11:36.450 --> 11:45.080
let's set a width and let's say we want to have a width of maybe 100% and a height of 200 pixels.

11:45.090 --> 11:51.910
So now with that, we can go up there and set this to styles place image.

11:51.910 --> 11:55.510
Now if we save all files and we go back, this looks much better,

11:55.540 --> 12:02.660
now we get the image here, looking nice and we got our text.

12:02.880 --> 12:06.830
We can improve the styling of the text a little bit in my opinion though,

12:08.020 --> 12:10.270
let's add some styling for it,

12:10.270 --> 12:18.570
so the place name, let's maybe add a font weight of bold, that is possible, now to center it,

12:18.570 --> 12:23.290
let's also add text align center here

12:24.590 --> 12:31.770
and that's small, also maybe increase the font size to 28 pixels and let's save this.

12:31.780 --> 12:36.350
Now let's assign the place name style here to our text,

12:39.870 --> 12:43.280
styles place name,

12:43.320 --> 12:45.030
let's save this file

12:45.030 --> 12:46.530
and this looks pretty good to me.

12:46.530 --> 12:51.470
You could also add a margin to the title if you wanted but I want to go with that approach,

12:51.480 --> 12:55.580
now let's work on the delete and close buttons here.

12:55.740 --> 13:06.430
Now these can be hooked up with onPress, for the first one I want to reach out to some prop, let's name

13:06.430 --> 13:16.700
it onItemDeleted, for the second one, onPress should trigger some method passed through a property

13:16.700 --> 13:19.070
named on modal close,

13:19.080 --> 13:20.790
let's say.

13:20.810 --> 13:28.550
So these are the two props I will expose to the outer world, so that the outer world can listen to the

13:28.550 --> 13:34.080
events happening on these buttons in the modal, the outer world of course is my app container,

13:34.080 --> 13:36.300
so in there I got place detail

13:36.300 --> 13:48.100
and I will listen to onItemDeleted here and execute the this placeDeletedHandler

13:48.200 --> 13:54.430
and I got the on modal closed prop which I just created inside the modal component, here

13:54.440 --> 14:00.930
I will execute this modal closed handler.

14:01.000 --> 14:05.380
So that's my new code with these two prop handlers added,

14:05.380 --> 14:11.290
now let's add the two methods. First I'll add the placeDeletedHandler here

14:15.990 --> 14:20.640
and then I'll also add the modal closed handler,

14:20.740 --> 14:23.440
both don't need any arguments.

14:23.970 --> 14:30.520
Now for closing the mode, I will simply call set state and set the selected place back to null,

14:30.570 --> 14:39.100
that's all, this will already ensure that I can, well close the modal because if it's null, then the logic

14:39.120 --> 14:46.110
inside the place detail component will close the modal because we check for this not being null here.

14:47.950 --> 14:56.140
The placeDeletedHandler is of course basically using the code we had in our little app here before,

14:56.170 --> 15:02.350
the one I commented out, so let's paste it in here and comment it back in. And you might think that we

15:02.350 --> 15:04.820
need the key of the item which should be deleted

15:05.020 --> 15:09.810
but keep in mind that we have the selected place stored in the state of the app container.

15:10.120 --> 15:17.900
So in the end, here I can just say our new places are simply the old places filtered by a place where

15:17.900 --> 15:21.770
the key is not equal to the key of the selected item,

15:21.950 --> 15:29.460
so of previous state selected place key, these keys should not be equal, if they are,

15:29.510 --> 15:31.030
that's the item I want to delete,

15:31.070 --> 15:37.530
so the one I want to filter out. With that I got that in place and one thing I want to do is I of course

15:37.540 --> 15:43.620
want to set selected place to null here too to also close the modal and reset that.

15:43.640 --> 15:44.740
Now let's save this

15:44.760 --> 15:45.890
and let's see if it works.

15:45.890 --> 15:48.710
Let me retry this app and let's add Munich again,

15:48.740 --> 15:50.870
beautiful beach in Munich by the way

15:51.760 --> 15:53.810
and let's click close,

15:53.810 --> 15:54.470
looks good.

15:55.780 --> 15:56.720
Let's click delete,

15:56.890 --> 15:57.970
it's gone.

15:57.970 --> 16:03.370
Now let's also add San Francisco here,

16:04.500 --> 16:05.290
let's click on that,

16:05.320 --> 16:08.260
yes it has the same image but that's on purpose here,

16:08.470 --> 16:08.860
looks good,

16:08.860 --> 16:15.230
we see the details of San Francisco and now of Munich, image was a bit slow but it did load.

16:15.240 --> 16:17.970
Now let's delete San Francisco,

16:18.090 --> 16:18.820
we still can open

16:18.870 --> 16:20.010
Munich of course.

16:20.250 --> 16:21.960
So that's all working,

16:21.990 --> 16:31.230
if we try the same on Android, we do get a warning though that the prop on request close is marked as

16:31.230 --> 16:35.670
required but not found. On our modal.

16:35.700 --> 16:37.790
we need to pass this prop,

16:37.800 --> 16:44.940
we can also see this in the official documentation, on request close is only relevant for TV operating systems

16:45.120 --> 16:46.360
or Android,

16:46.410 --> 16:53.090
there we basically have this physical back button and if that is pressed on request, close is executed.

16:53.250 --> 16:58.290
So we need to tell our application what to do when this happens

16:58.410 --> 17:02.640
and of course here, I want to do the same as happens when I click the close button,

17:02.640 --> 17:07.830
I want to execute a method which receive on our on modal closed prop.

17:08.340 --> 17:10.760
So let's bind this here,

17:10.800 --> 17:17.940
and with that, if we go back to our Android app and reload, let's see this. Let's add Munich here,

17:18.800 --> 17:22.620
let's click Munich, we see the modal, we see the buttons here too,

17:22.790 --> 17:25.040
I'll leave them like this for now.

17:25.250 --> 17:28.270
If I click the back button, we close the modal,

17:28.340 --> 17:34.850
so we do the same as when we click the close button. Deleting also works here.

17:34.850 --> 17:39.140
So with that, we get a working modal in both applications,

17:39.140 --> 17:40.830
let's see what else we can do.
