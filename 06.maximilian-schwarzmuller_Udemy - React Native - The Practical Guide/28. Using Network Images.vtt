WEBVTT

00:02.510 --> 00:08.210
In the last lecture, we imported our image like this from our assets folder.

00:08.210 --> 00:10.330
Now let's say we don't have the image there,

00:10.460 --> 00:14.270
instead we want to import it right from the web.

00:14.630 --> 00:18.390
Now for that I can copy the image address from the web

00:18.470 --> 00:22.520
and of course you shouldn't really do deep linking like this to any images you don't own

00:22.620 --> 00:25.730
but here, I'll just briefly do this for demo purposes.

00:26.090 --> 00:33.290
So let's say I don't want to use my static import but the web import, therefore place image here isn't

00:33.290 --> 00:38.470
set anymore because I just removed the import which set this constant, instead

00:38.470 --> 00:42.510
here we have to construct this magic object on our own

00:42.530 --> 00:44.940
and surprisingly, that's not difficult at all,

00:45.110 --> 00:51.980
it's just a javascript object and this needs to have one property at least, the URI property,

00:52.320 --> 00:57.630
this now is the path to the image and here, I'll copy in the path to the image in the web.

00:57.920 --> 01:04.160
Now the magic thing that happened prior to this is that react native determined this path automatically and

01:04.160 --> 01:07.250
it took the path of where the image would end up in the end

01:07.280 --> 01:11.790
once we ship this to the native device. Here we fetch it from the network,

01:11.810 --> 01:13.440
so from a website,

01:13.580 --> 01:19.660
so this path is always correct anyways and there is no path transformation needed.

01:20.210 --> 01:28.160
So now we can already save this and go back to our application, reload just to really see that it works,

01:28.160 --> 01:31.310
so let me really add this, looks good

01:31.670 --> 01:38.960
and one important thing to notice is that here, when fetching an image from the web, we absolutely have

01:38.960 --> 01:43.000
to set height and width. For the local, the static image,

01:43.010 --> 01:44.840
we didn't have to do that,

01:44.900 --> 01:46.420
it just was too big

01:46.550 --> 01:52.670
but theoretically, we could have relied on react native to auto-calculate that, when fetching an image from

01:52.670 --> 01:55.940
the web, react native has no way of calculating this for us

01:56.030 --> 01:57.630
so we have to hardcode it,

01:57.710 --> 02:04.090
we have to set height and width as we do here and this is your alternative approach for fetching images.

02:04.160 --> 02:10.720
Now as I mentioned, feel free to go to the official documentation and there under guides, here

02:10.780 --> 02:14.890
the general guides, you can click on images to learn more about it,

02:14.900 --> 02:17.450
we will also use images throughout this course,

02:17.480 --> 02:19.980
for example also images from the camera.

02:20.300 --> 02:25.460
One important thing you can for example dive into are different image dimensions

02:25.550 --> 02:33.410
if you do provide some static images in your app, you can use the @2x, @3x and so on suffixes on the

02:33.410 --> 02:39.320
image file names to make sure that react native automatically picks the right image for a given device

02:39.320 --> 02:41.560
ratio, a given device size,

02:41.570 --> 02:45.760
right now I won't do this but that is something I want to make you aware.

02:46.040 --> 02:48.500
So with that, we added our image

02:48.500 --> 02:49.430
that's nice

02:49.550 --> 02:55.350
and just for completeness sake, let's also view this on iOS.

02:55.600 --> 02:59.760
Let's reload once here since this seems to be stuck,

02:59.770 --> 03:00.900
this looks good.

03:01.270 --> 03:04.670
So this is how we can display images,

03:04.780 --> 03:10.270
now I said I want to show a modal when we click on such an item here and then actually show the image

03:10.270 --> 03:16.180
there and maybe even add a delete button there so that we can delete the element from within the modal.

03:16.270 --> 03:19.390
Let's take care about this over the next lectures.
