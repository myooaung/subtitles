WEBVTT

00:02.170 --> 00:07.360
Let's go to read X to the places actions which now receives a location object as well and keep in mind

00:07.390 --> 00:09.490
that this is an object that looks like this.

00:09.490 --> 00:12.610
So it has a lat and a long key here.

00:12.610 --> 00:21.730
So in places actions in AD place will get this location object in here.

00:21.730 --> 00:23.920
I of course want to store it in my database.

00:23.920 --> 00:25.460
I want to store my redux store.

00:25.540 --> 00:28.930
And as I mentioned I want to get this human readable address.

00:28.960 --> 00:30.010
Right.

00:30.100 --> 00:33.130
And for that we can use a number Google API.

00:33.130 --> 00:37.610
If you search for a Google Maps geo coding API you'll find this link here.

00:37.690 --> 00:43.780
And this is an API which allows you to translate addresses into coordinates or coordinates into addresses

00:44.590 --> 00:52.870
coordinates into addresses is called a reverse look up so we can click on rewards geo coding down there.

00:52.870 --> 00:58.230
And this tells us how that works and for Dad you need a Google Maps API key which I did set up earlier

00:58.230 --> 00:59.530
in this module.

01:00.130 --> 01:04.960
And now we can send the request in the end to this.

01:04.960 --> 01:10.780
You are L here so we can just copy this entire you or L and send the issue to be requested.

01:10.810 --> 01:15.130
Now this will not generate the image but give us back some J some data so we'll send that request with

01:15.130 --> 01:22.460
the fetch API as you learn it in the HP module and I'll simply do that here inside of my app place.

01:22.460 --> 01:27.340
Action handler and his inner function of course you could also outsource it in a separate file though

01:27.460 --> 01:29.920
if you want to keep this file a bit leaner.

01:29.980 --> 01:36.730
So there we can use the fetch API and send the request to you or L which I'll create here as a string

01:36.730 --> 01:45.620
with back ticks so that injecting dynamic data is easier and there I want to copy this you are L here

01:45.620 --> 01:47.080
and paste it in there OK.

01:47.090 --> 01:47.930
That does not work.

01:47.930 --> 01:56.310
So let me manually grab it then and now paste it in there and for the API key I of course want to use

01:56.310 --> 01:58.520
it is environment variable which I set up earlier.

01:58.520 --> 02:02.980
So import ends from the end file.

02:02.990 --> 02:07.180
You might remember this is a file which holds the object which holds my API key.

02:07.220 --> 02:13.040
Now I can replace this year Webster's API key thing here I can replace this with this dynamically injected

02:13.460 --> 02:14.170
and stored.

02:14.180 --> 02:20.870
Google API key value and of course latitude and longitude also needs to be set dynamically.

02:20.870 --> 02:23.840
Make sure you don't delete a comma between these two.

02:23.840 --> 02:30.460
But now here latitude can be found in my location which of course has a led key the way we set it up.

02:30.460 --> 02:35.620
You can always see that down here at the bottom in the console and location as a LNG key too.

02:35.620 --> 02:37.880
So we have these two piece of information.

02:37.960 --> 02:39.990
This sends a get request there and that's OK.

02:40.000 --> 02:45.830
Because we need to send a get request and of course we can therefore await their response.

02:45.970 --> 02:50.700
And I want to store the response in a constant to use it.

02:50.760 --> 02:57.690
Next we can check if this response is maybe not OK it should be OK but if it's not we could throw a

02:57.690 --> 02:59.930
new error here.

02:59.970 --> 03:01.630
Something went wrong.

03:01.710 --> 03:05.850
And of course you can therefore also set up error handling in the same way as you learned it in the

03:05.860 --> 03:06.890
HP module.

03:07.200 --> 03:09.640
But here I do assume that this will work.

03:09.840 --> 03:14.970
And now we can get the response data by a waiting response.

03:14.980 --> 03:21.730
Jason which extracts the body of the response and converted to normal javascript and for a moment I'll

03:21.730 --> 03:26.780
simply console log that response data so that we get an idea of what's in there.

03:26.920 --> 03:28.340
And now let's simply give it a try.

03:29.230 --> 03:34.960
Let's try adding a new place get the user location and click on safe place and we can do that even without

03:34.960 --> 03:37.350
filling out the rest because we got no validation here.

03:37.370 --> 03:43.840
I was so this works of course I get an error because of missing data but we also actually do get the

03:43.840 --> 03:48.500
result of our HBP request and that's this super huge object there.

03:48.560 --> 03:51.190
That's really a large object as you can tell.

03:51.760 --> 03:58.390
Now in the end what's in there in this large object is this is the object here we have a results key

03:58.390 --> 04:02.310
in there which is an array and there we have the different components of this address.

04:02.320 --> 04:09.220
But if you scroll down a bit we see besides this array we also have is formatted address key so in our

04:09.280 --> 04:13.930
result object here we don't just have that array but we also have formatted address and that's what

04:13.930 --> 04:14.690
I'm looking for.

04:14.710 --> 04:21.360
This is what I want I want is formatted address so we can extract that from our response data here.

04:21.360 --> 04:26.510
So instead of logging it here I just check if we maybe don't have a response data results key if debt

04:26.520 --> 04:34.300
somehow missing in that case I will also throw an error but if we make it past this check then I should

04:34.300 --> 04:35.960
be able to retrieve it.

04:35.980 --> 04:43.210
So here I can then derive my address by accessing response data results and then they're the first line

04:43.280 --> 04:43.790
item.

04:43.810 --> 04:49.540
That's where we actually then find you formatted address and you can simply inspect this object I just

04:49.540 --> 04:52.090
showed you to get a deal for its complete structure.

04:52.090 --> 04:58.570
Of course the official docs also document how this data looks like that you get back so now we have

04:58.570 --> 05:03.550
two formatted address here and therefore I can retrieve it like this and now we get everything we need

05:04.420 --> 05:09.280
when we know stored something in the database I can use my address which I just extracted instead of

05:09.280 --> 05:15.210
dummy address and here for the latitude I can use location dot let for the long etude on.

05:15.430 --> 05:23.100
Unsurprisingly I can use location of LNG and for dispatching data we can also add additional information

05:23.520 --> 05:32.100
we can add the address and maybe a coords key which holds an object where we have left which is location

05:32.100 --> 05:40.320
to let and LNG which is location dot LNG and now all that data is passed on with our action object and

05:40.320 --> 05:42.380
therefore reaches our reducer.

05:42.480 --> 05:47.940
So in the reducer we now need to make sure we use the new address and coords fields we get in the places

05:47.940 --> 05:53.750
reducer we want to initialize our place here with that extra data.

05:53.770 --> 05:58.150
And for that we first of all need to tweak to place model to expect that data.

05:58.150 --> 06:04.990
So here I want to get my address and I want to get a latitude and longitude so we can all then store

06:04.990 --> 06:05.530
all of that.

06:05.530 --> 06:08.740
Store the address here.

06:08.880 --> 06:17.460
Store the latitude and store the long etude with that the model is prepared and with the model prepared

06:17.460 --> 06:22.500
to get this extra data back in the reducer we should at does when we add a place.

06:22.500 --> 06:30.420
So here we then add as I address the action place state DOT address because that's what I just added

06:30.420 --> 06:35.310
in the places actions here does address key and we can also get the coordinates.

06:35.310 --> 06:40.860
So for the latitude here I pass action to place state DOT keywords.

06:40.860 --> 06:50.620
Let and for the long etude I pass action not place state DOT code words dot LNG with that places our

06:50.620 --> 06:51.510
initialize here.

06:51.520 --> 06:57.550
Now when we load them from the database when we set our places we should therefore also initialize our

06:57.550 --> 07:01.650
place model correctly and take the data which is in the database already.

07:02.020 --> 07:07.210
So keep the address keep the latitude and keep the long at you.

07:07.240 --> 07:13.940
So that's pretty straightforward and if for now we hopefully have all that data and use all that data

07:14.330 --> 07:16.340
now to see where it works.

07:16.340 --> 07:21.760
We need to work on the place item where outputting here on the starting page we can see it on Android.

07:21.950 --> 07:23.800
So we also showed the address here maybe.

07:24.080 --> 07:29.540
And we also need to work on the place details screen so let's work on that so that we can see all the

07:29.540 --> 07:30.680
pieces come together.
