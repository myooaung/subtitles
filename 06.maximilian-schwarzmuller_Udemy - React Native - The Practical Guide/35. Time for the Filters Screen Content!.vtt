WEBVTT

00:02.390 --> 00:08.060
So let's move over to the filters screen and they are right now I just have my my dummy content the

00:08.060 --> 00:11.420
filter screen and that's of course not what I want there.

00:11.510 --> 00:20.060
Instead there I want to have some some text at the top actually where I say available filters slash

00:20.060 --> 00:25.910
restrictions or something like this where I want to point at a certain style object with Styles let's

00:25.910 --> 00:33.560
name a title maybe because it will be our main title here and below that I want to have my different

00:33.560 --> 00:34.250
filters.

00:34.250 --> 00:41.180
Now how does a filter look like we need some some switch some checkbox something like this that allows

00:41.180 --> 00:45.210
us to turn a filter on and off and a label for that.

00:45.230 --> 00:50.840
Now that means that probably a view makes sense to group label and that switch to gather and position

00:50.840 --> 00:52.970
them side by side probably.

00:52.970 --> 01:04.560
And I'll give a view as style of filter container SOMETHING LIKE THAT AND IN THERE AS A Z I want to

01:04.560 --> 01:09.300
have a text with a label for example say gluten free there.

01:10.050 --> 01:16.080
And next to that a switch and thankfully React Native has a built in switch its named switch the switch

01:16.080 --> 01:19.140
component renders a nice switch which we can use.

01:19.140 --> 01:28.180
So here we can just use switch like this and render this onto the screen we'll need to configure this

01:28.210 --> 01:36.520
but to get started we can use it like this now for some basic styling for the title and the filter container

01:36.520 --> 01:37.780
here.

01:37.780 --> 01:39.490
Let's go down here.

01:39.490 --> 01:48.040
Let's add filter container and title here and the title is pretty straightforward there.

01:48.120 --> 01:58.410
I want to what use font family open Sands bold and a font size of 20 to a margin in all directions of

01:58.550 --> 02:08.580
20 and also set text aligned to center to center it is the overall screen by the way should not center

02:08.610 --> 02:11.530
items on the main axes anymore.

02:11.700 --> 02:14.330
So vertical centering should no longer happen.

02:14.460 --> 02:21.610
And for that we can simply get rid of justify content center and filter container on the other hand

02:21.640 --> 02:24.970
should position to switch and the text next to each other in a row.

02:24.970 --> 02:34.060
So here we can set flex direction to row justified content maybe by adding space around and a line items

02:34.060 --> 02:40.080
on the cross axis in the centers so that it's centered vertically and let's have a look at that if we

02:40.080 --> 02:46.290
safeties and we go to the filter screen does what we got here we got a switch and as you see right now

02:46.290 --> 02:47.460
it's always jumping back.

02:47.460 --> 02:53.130
That's something we'll take to take care about in a second but generally we see it and here on filters

02:53.130 --> 02:58.380
for Android we got an android switch which also jumps back but which conveniently is already pre styled

02:58.380 --> 02:58.920
for Android.

02:58.920 --> 03:05.300
So that's actually another component built into React Native which has a default look for Android so

03:05.300 --> 03:07.240
that's not too bad.

03:07.250 --> 03:13.070
One thing I want to change is for the filter container I want to assign a fixed width of let's say 80

03:13.070 --> 03:19.430
percent and actually change this year to space between not space around because I think that looks a

03:19.430 --> 03:20.480
bit nicer now.

03:20.480 --> 03:32.030
Yeah definitely also on Android and now we can make sure that this switch actually works and that it

03:32.030 --> 03:39.440
doesn't jump back when we trigger it for that you need to know that for switches you manually need to

03:39.440 --> 03:46.130
manage their state and that's actually not new in react it's often the case that for these input components

03:46.670 --> 03:53.120
you need to store what the user enters and feet step back into the component to reflect that in the

03:53.210 --> 03:54.790
updated UI.

03:55.130 --> 03:57.080
And we do this with state management.

03:57.100 --> 04:03.040
So we import to use state hook from react so that we can manage state here in this functional component.

04:03.290 --> 04:13.770
And then here I'll have my gluten state and I'll name this is gluten free and set is gluten free.

04:14.660 --> 04:16.930
Use state initially that's false.

04:17.150 --> 04:18.800
And now on that switch here

04:22.330 --> 04:29.320
you have a value property that's a property built into the built in switch where I feed and is gluten

04:29.320 --> 04:29.650
free.

04:29.650 --> 04:36.640
So just takes a boolean which indicates whether that switch is rendered as active or not active so if

04:36.640 --> 04:42.550
it's marked as checked or not checked I should say and you have a on value change property which takes

04:42.550 --> 04:45.160
a function that fired whenever the user clicks.

04:45.160 --> 04:49.520
That's which this function here gets the new value.

04:49.610 --> 04:56.480
So if the switch was in the false mode and the uncheck mode the new value will be true and the other

04:56.480 --> 05:02.750
way round of course and we can use that to update our state and said is gluten free to the new value

05:03.110 --> 05:09.050
and since we also feed this state back in now are a switch should be changeable and should stay in that

05:09.290 --> 05:10.800
updated mode.

05:10.820 --> 05:17.430
So now we have a look at this now we can really toggle that switch and that's a improvement.

05:17.450 --> 05:21.800
The styling of the switch is not what I want however it uses some default color.

05:21.800 --> 05:26.010
Of course I would want to use my colors that I use in the app all the time.

05:26.180 --> 05:30.020
And for Dad we can import our colors content of course of course.

05:30.020 --> 05:39.140
So import colors from constants colors and to switch has no property that helps us with styling here

05:39.710 --> 05:45.130
we can add track color which allows us to customize to colors for dead switch.

05:45.140 --> 05:52.910
So the background color so on and track color takes an object as a value hence we have an object which

05:52.910 --> 05:59.030
we pass here to this dynamic binding where you can set a background color for default state.

05:59.030 --> 06:04.490
So if it's inactive it's If it's unchecked in there I'm fine with the default actually just looks good

06:04.490 --> 06:05.270
to me.

06:05.660 --> 06:09.570
But you can also set one for the true case which is the case that it is checked.

06:09.740 --> 06:15.680
And there I want to use colors primary color and of course you can take any color you wish.

06:15.680 --> 06:22.580
And we do that and I go back to filters now we use our own color here which of course is more in line

06:22.580 --> 06:24.740
with the rest of this application.

06:24.740 --> 06:33.340
And obviously this will all the work here on Android we can also set the thumb color which is well the

06:33.340 --> 06:41.290
color of this thumb here which is green here and Android and this just takes a string a color string

06:42.410 --> 06:49.530
so a hex code for example in there we can also appointed color as primary color if we do that when I

06:49.530 --> 06:49.800
was.

06:49.800 --> 06:51.270
Now it has to has this color

06:55.710 --> 06:56.820
and the same on Android

06:59.660 --> 07:03.420
of course and I guess that doesn't really look that good there.

07:03.420 --> 07:07.480
I would like to keep the default and the solution is pretty simple.

07:07.500 --> 07:13.620
We can again use to Google platform API import this and then here when assigning a thumb color I check

07:13.620 --> 07:21.000
for platform OS equal to Android in which case I want to use the primary color for my thumb.

07:21.480 --> 07:26.410
Otherwise I'll set this to an empty string which means it will use the default which is white on ISIS.

07:26.510 --> 07:31.650
And with that here we have to say look as before which I like on ISIS but of course you can also find

07:31.650 --> 07:33.300
changes to your requirements.

07:33.300 --> 07:40.140
And on Android we will still have to look we saw before I go to the filter screen here which looks good

07:40.140 --> 07:45.650
there as well so that's does switch and how we can add it.

07:45.950 --> 07:50.060
Now we just need to repeat this for all our other switches as well.

07:50.120 --> 07:55.700
So all the other filters I mean so I can copy that view and add it again for elected office three or

07:55.700 --> 07:56.430
four weeks.

07:56.990 --> 08:01.960
But if you find yourself copy and pasting over and over again as we're trying to do it here.

08:02.090 --> 08:08.900
That's always a good case for creating a separate component or a function that renders this reusable

08:08.900 --> 08:10.680
code.

08:10.730 --> 08:15.590
And here again I will create a separate component in that same file because I really only use it in

08:15.590 --> 08:16.040
there.

08:16.040 --> 08:19.150
Again you could also go for a separate file if you wanted to.

08:19.390 --> 08:23.720
I'll name it filter switch and this gets some props.

08:23.720 --> 08:30.820
And in this component in the end I return this code we set up a forward with the view and the text and

08:30.820 --> 08:31.410
so on.

08:31.610 --> 08:37.100
And of course now the text needs to be dynamic there we could set this to props label and it's totally

08:37.100 --> 08:41.810
up to you what you choose here because you will be the one passing in the props values later anyways

08:43.050 --> 08:48.930
and of course here what happens on value change and what you pass to value all that differs.

08:48.930 --> 08:57.230
So here this should be props state for example or props value or whatever you want to use.

08:57.310 --> 09:03.490
And here for on value change I'll simply point Ed props on change for example.

09:03.490 --> 09:08.140
But again all these props names of course are totally up to you because you'll be the one using that

09:08.140 --> 09:16.870
component and we will actually use it now here like this is self closing component where we now can

09:16.870 --> 09:20.730
set a label because I'm expecting a label prop here.

09:20.800 --> 09:22.990
If you named it differently you need to name it differently.

09:22.990 --> 09:29.230
Here of course and the label of course is gluten free because I'm about to replace this switch here.

09:29.380 --> 09:35.830
Then we need to pass in a state because I added a state prop here to manage my value if you named it

09:35.830 --> 09:39.610
differently you need You need to name a different date on there as well.

09:39.620 --> 09:42.970
The euro point it is gluten free at my state.

09:42.970 --> 09:45.120
And on change needs to be provided.

09:45.130 --> 09:49.840
Because here I'm using the on change prop to bind it to on value change.

09:49.840 --> 09:55.990
So this should point at a function and of course here I will simply keep this function near and since

09:55.990 --> 10:03.550
I just use on change here to forward it to on value change we get the new value argument here as well.

10:04.870 --> 10:10.480
Now we can get rid of this view down there and just use our filter switch component and now simply repeat

10:10.510 --> 10:13.270
that which is of course way easier.

10:13.270 --> 10:23.450
So now here we can all have lactose free vegan and vegetarian and we need to add three new states now

10:24.490 --> 10:34.740
so here let me replicate does we have is lactose free and set is lactose free.

10:34.740 --> 10:39.210
Here we have is vegan and set is vegan.

10:39.270 --> 10:42.720
And here we have is that JIT Terry and

10:48.010 --> 10:51.000
and said is the shirt.

10:51.020 --> 10:57.740
Terry and now we just need to make sure we use the states in the right places.

10:57.760 --> 11:02.220
So for a second filter switch where we have the lactose free filter i.e. forward.

11:02.250 --> 11:09.100
He is lactose free state and I update set is lactose free of course for the weekend switch I forward

11:09.160 --> 11:17.980
is vegan and we updated with set is vegan and for vegetarian we forward is vegetarian and we update

11:17.980 --> 11:22.060
set is vegetarian like this

11:25.410 --> 11:25.880
OK.

11:25.970 --> 11:31.790
That should be it if we now saved us we should have a filter screen with our different filters which

11:31.790 --> 11:36.770
we can set independently because we're having independent states I think would it be nice to have some

11:36.770 --> 11:43.610
spacing between these rows so let's implement this on our filter container here we can simply add a

11:43.610 --> 11:50.570
margin vertical of let's say 10 and this should at 50 maybe a bit more and this should make sure that

11:50.570 --> 11:51.970
we have some spacing there.

11:52.130 --> 11:54.550
Yeah and this looks quite nice.
