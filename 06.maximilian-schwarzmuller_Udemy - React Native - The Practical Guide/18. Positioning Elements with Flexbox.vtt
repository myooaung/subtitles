WEBVTT

00:02.180 --> 00:06.620
In the last lecture we talked quite a bit about this text input and how to style and position it

00:06.630 --> 00:11.600
but it's important for you to understand this flexbox system and the fact that you can create these

00:11.620 --> 00:15.250
stylesheet objects to basically store them in constants

00:15.360 --> 00:22.050
you can then use in your render function to assign your styles based on that object and properties in

00:22.050 --> 00:23.640
that object.

00:23.640 --> 00:28.950
The alternative would always be to use inline styles which quickly bloats your render function and makes

00:28.950 --> 00:31.270
it harder to read and understand.

00:31.800 --> 00:34.910
So with that we get a text input and we can type in it,

00:34.950 --> 00:36.360
that's great.

00:36.360 --> 00:43.290
We also now need a button because the goal ultimately of course is to allow us to save our value and

00:43.350 --> 00:46.590
output it in a list below the text input.

00:46.680 --> 00:48.300
So we need a button

00:48.300 --> 00:52.670
and what better place to search for one than the official documentation.

00:52.890 --> 00:59.190
If we go back there and scroll down to components because we want to add a UI component, we see hey there

00:59.190 --> 01:04.320
is a button component and the button component actually is a pure convenience component,

01:04.320 --> 01:10.080
I will also show you an alternative way of creating a clickable element. The button component is one of

01:10.080 --> 01:17.670
the very few components in react native that actually will change its styling by default when run on

01:17.670 --> 01:19.140
different platforms,

01:19.230 --> 01:24.660
So on Android, it will look like an Android button and on iOS, it will look like an iOS button,

01:24.930 --> 01:29.970
so that makes the button component really useful if you want to have a nice looking button out of the

01:29.970 --> 01:30.730
box

01:30.900 --> 01:36.090
and as always here in the documentation, you can learn how you may configure this button, as you see it

01:36.090 --> 01:38.130
doesn't have that many props,

01:38.550 --> 01:39.780
so let's use it.

01:39.780 --> 01:42.580
First of all let's import it, as always

01:42.600 --> 01:46.010
you've got to import all these react native components you want to use

01:46.020 --> 01:48.090
so make sure to do that here too.

01:48.450 --> 01:55.200
And then we want to add it, so let's add it below this text input and the button actually is a self-closing

01:55.200 --> 02:01.000
element, the text on the button is assigned with the title property, here

02:01.110 --> 02:03.090
I'll name this add.

02:03.450 --> 02:06.600
Now if I just save the button like this, let's see what it looks like,

02:06.600 --> 02:07.770
let's go back, 

02:08.160 --> 02:10.880
now we see that button below the text input

02:11.250 --> 02:15.180
and if we click on it, you'll see we've got this little ripple effect here,

02:15.180 --> 02:19.630
there's this highlighting effect on Android and on iOS,

02:19.650 --> 02:26.730
we also got this click effect here. Still, maybe we want to have this button sit next to our place

02:26.880 --> 02:28.650
and not below it,

02:28.650 --> 02:34.870
so for that we actually need to position text input next to button.

02:34.890 --> 02:41.850
Now you could think that you turn this into an inline block element but this wouldn't work because react

02:41.850 --> 02:49.460
native only emulates css, it doesn't offer the same complexity and properties css offers

02:49.650 --> 02:52.850
and you actually can't set elements to be inline block,

02:53.100 --> 03:00.180
you actually only have the choice between creating a flex element or not showing it at all.

03:00.180 --> 03:10.050
So you can set display to none or to flex block or inline block is not even supported,

03:10.360 --> 03:12.590
so this solution won't work,

03:12.700 --> 03:20.020
the solution instead is to create a nested view which also receive some flex styling, so that the overall

03:20.020 --> 03:26.830
container covers the whole page and aligns elements from top to bottom with flex direction column which

03:26.830 --> 03:27.920
is the default

03:28.180 --> 03:34.870
but then the first element in there is another view which will also receive some flex styling to position

03:34.960 --> 03:41.890
its child elements in a row because its child elements should be the text input and the button,

03:41.890 --> 03:43.940
so let's add them to this view here.

03:47.090 --> 03:49.670
Now this view of course needs to get a style,

03:49.670 --> 03:56.510
so I will add a new one to my stylesheet in this object we pass to the create function, next to the

03:56.510 --> 04:03.400
container property I'll add the input container property and the name is totally up to you,

04:03.410 --> 04:08.370
I just name it input container because it actually holds my text input element.

04:08.840 --> 04:14.930
There I will set flex to one so that it takes the full available space

04:15.410 --> 04:19.670
and this will now only refer to the space in this container of course,

04:20.030 --> 04:30.200
I'll set flex direction to row because I want to set from left to right and then I will also set justify content

04:30.350 --> 04:38.390
which defines how to distribute the elements to space between, so that the first element sits on

04:38.390 --> 04:40.780
the left and the second element sits on the right

04:40.880 --> 04:45.840
and they have some space between. Now this is the input container property,

04:45.920 --> 04:52.940
we can now assign this to this view by adding the style property and then referring to styles input

04:52.940 --> 04:53.840
container.

04:54.140 --> 04:55.690
Let's save this and

04:55.790 --> 04:57.020
let's go back,

04:57.170 --> 05:01.820
now we see some errors here and that's simply because I have a little typo here, this circumflex

05:01.820 --> 05:03.400
which I accidentally added so

05:03.470 --> 05:04.890
let's save this again.

05:05.330 --> 05:09.750
Now it should reload, manually reload if the error doesn't go away

05:10.130 --> 05:14.330
and we get this set up which doesn't look too great, does it?

05:14.330 --> 05:21.720
So the text input is centered in the page and the button takes the full height here on Android, it does so

05:21.730 --> 05:25.200
too on iOS as you can see if you click down there,

05:25.400 --> 05:27.190
not really nice.

05:27.210 --> 05:34.370
The reason for this simply is that the outer container of the outer view occupies the full height of

05:34.370 --> 05:40.560
the page because of flex one and our nested container also has flex one,

05:40.560 --> 05:45.480
so it also make sure to take up the full available space.

05:45.500 --> 05:47.520
Let's see what changes if we comment this out,

05:47.540 --> 05:51.020
if we remove flex one, that looks much better now.

05:51.180 --> 05:55.670
The outer container still takes the entire page but the inner one doesn't,

05:55.790 --> 05:58.890
you may ignore the warning by the way, we'll soon fix it.

05:58.940 --> 06:05.540
So now this looks better but I'm not so happy with how the button looks like, it's really squeezed up

06:05.540 --> 06:06.770
on the right here,

06:07.070 --> 06:08.500
so let's fix this.

06:08.540 --> 06:15.270
If we go back, we can see that on this text input, a while ago we set the width to 300,

06:15.270 --> 06:22.160
now let's remove this and let's see how it then looks like. If we now go back, both is in the middle because

06:22.160 --> 06:24.800
now both doesn't take that much space,

06:24.830 --> 06:29.390
so the solution is to give both a width that works together nicely.

06:29.390 --> 06:41.010
So let's add the input property maybe to style the input, let's maybe name it place input and let's add a place

06:41.220 --> 06:43.620
button property to then style the button.

06:44.100 --> 06:49.150
And now we can assign widths here, so we can assign a width and maybe a percentage width

06:49.150 --> 06:50.160
makes sense here,

06:50.160 --> 06:53.320
so let's give this input a percentage of 70%,

06:53.400 --> 06:55.760
that has to be wrapped in quotation marks then

06:56.030 --> 06:58.590
and for the button, I want to use 30

06:58.860 --> 07:00.540
and now let's assign the two.

07:00.570 --> 07:12.710
So here on the input, I'll add style and set this to styles place input and for the button, I'll also

07:12.710 --> 07:19.180
add style and set this to styles place button.

07:19.200 --> 07:24.720
Now let's save this and if we now reload the app, it looks nicer,

07:24.820 --> 07:27.110
however I'm still not happy with the look.

07:27.160 --> 07:32.700
One thing we can do is on the input container, so the container which wraps the input and the button, we

07:32.820 --> 07:39.250
can also set align items to decide how the items should be distributed inside the container and set

07:39.250 --> 07:42.060
this to center,

07:42.080 --> 07:46.730
this now fixes the button which is stretched strangely from top to bottom, so

07:46.790 --> 07:48.450
this now looks much better.

07:49.010 --> 07:57.290
And we also want to ensure that on the input container, we also set a width of 100% so that this

07:57.290 --> 08:01.850
takes the full available width it has, the difference to flex

08:01.850 --> 08:08.740
one is that it will not also take the full space from top to bottom but here only from left to right,

08:09.050 --> 08:13.850
so now we really got this in a way which looks nicer in my opinion.

08:13.940 --> 08:17.830
With that we finally added a button and we played with some styling,

08:18.020 --> 08:24.350
now let's also connect this button to an action in the next lecture and let's make sure that we actually

08:24.350 --> 08:26.180
start adding our places.
