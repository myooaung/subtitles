WEBVTT

00:02.360 --> 00:04.430
How can we use our store.

00:04.430 --> 00:11.240
Well keep in mind that in the end here I'm managing my meals not My category is because we have no action

00:11.240 --> 00:13.490
planned that would change anything there.

00:13.670 --> 00:15.530
But I'm managing my meals here.

00:15.650 --> 00:22.990
So one great task would be to go everywhere in our app where we are importing meals from the dummy data

00:23.110 --> 00:26.970
and get rid of that import and instead get the data out of our store.

00:26.980 --> 00:32.650
Because the difference will be that we can later add logic to change to date in our store whereas our

00:32.650 --> 00:34.170
dummy data will never change.

00:34.180 --> 00:38.980
So we should import data from our stores so that we can thereafter add logic to manipulate that data

00:39.280 --> 00:42.970
for example to restrict Demelza we're displaying.

00:42.980 --> 00:47.510
So where do we need the millstone on the categories screen.

00:47.510 --> 00:52.130
We're not importing meals got a couple of our imports can actually get rid of but that's just a side

00:52.130 --> 00:52.490
note.

00:52.550 --> 00:53.840
We're not importing meals.

00:53.870 --> 00:58.340
Categories can stay there because again we'll not have any logic that changes that.

00:58.490 --> 01:05.690
So we can move on to category meals screen is a different story there we are importing yields and now

01:05.690 --> 01:09.530
the goal is to get rid of that import and get the meals out of the redux store.

01:09.530 --> 01:16.640
The question of course is how do we do this again the react redux package helps us with debt from that

01:16.730 --> 01:25.010
react redux package we can import something we can import a hook the use selector hook.

01:25.020 --> 01:32.210
This allows us to select a slice of our state of our globally managed state and use it in this component.

01:32.220 --> 01:36.660
Now I'm using the hook here because that allows us to use this in the functional component.

01:36.660 --> 01:42.480
You also might be aware of a another approach where you actually import the Connect function and wrap

01:42.480 --> 01:47.220
your export with that and use map state to props map dispatched to props.

01:47.220 --> 01:49.010
That's something you can use as well.

01:49.020 --> 01:51.560
It will absolutely work but this is a bit leaner.

01:51.580 --> 01:56.140
Saul will go with you as selector here with that added.

01:56.260 --> 01:59.510
Now when we use our meals we're not using them like this.

01:59.710 --> 02:07.270
Instead now we can get them with the help of use selector so to derive our display meals.

02:07.270 --> 02:15.400
What I'll do here is all crit and you constant away lable meals maybe name is up to you and use selector

02:15.400 --> 02:19.920
here like this because this will retrieve me data out of the state and return it.

02:19.930 --> 02:25.450
So that's what I'll then store here in this constant the return value and use selector takes a function

02:26.110 --> 02:29.920
a function it will be executed for us by react redux.

02:29.920 --> 02:36.430
A function that gets the state as an argument automatically react redux which executes the function

02:36.430 --> 02:44.140
for us will provide the curd state the kernel redux state to this function and it then is able to return

02:44.200 --> 02:48.810
any data we want from that state from that global store from the global state.

02:48.850 --> 02:50.640
And I'm using these terms interchangeably here.

02:52.910 --> 02:56.380
So how can we retrieve data from that state here in the function body then.

02:56.420 --> 03:01.370
And I'm using the shortcut arrow notation here where on the right side of the arrow this is automatically

03:01.370 --> 03:06.860
returned if it's not wrapped in curly braces well to get access to something from the state we have

03:06.860 --> 03:12.560
to go back to the place where we create the store there I pass in a root reducer which is created by

03:12.560 --> 03:14.120
combining all reduce.

03:14.150 --> 03:17.250
Again we only have one but I explained why it did this.

03:17.300 --> 03:20.980
Now there we have this key meals which is totally up to you.

03:20.990 --> 03:22.640
You could named us whatever you want.

03:22.640 --> 03:29.030
This gives this slice of our state which is managed by this reducer an identifier and we can now use

03:29.030 --> 03:32.950
this identifier to get hold of debt.

03:33.020 --> 03:37.820
Part of our state for which this reducer is responsible.

03:37.820 --> 03:45.070
So in the end a state that will look like this like this initial state so category meal screen here

03:45.070 --> 03:51.210
I access state DOT meals or whatever you chose as an identifier in combined with users.

03:51.310 --> 03:58.490
And then here all access filtered meals not meals which I would also have there.

03:58.540 --> 04:03.380
We all have meals in here but I want to respect any filters that are set.

04:03.450 --> 04:06.690
Right now we have no logic to set them but what that will change in the future.

04:06.760 --> 04:12.970
So here I want to get my filtered meals so that I always get the meals that I really should be able

04:12.970 --> 04:17.930
to display the meals that respect the filters set up by the user.

04:18.130 --> 04:25.420
And now it's the away little meals which I want to filter even more here to find the meal for the category

04:25.420 --> 04:33.880
idea I selected or the meals for the category I selected was that there is no more meals uppercase in

04:33.890 --> 04:34.390
this file.

04:34.400 --> 04:39.500
That's all just lowercase here and we got rid of that import successfully.

04:39.500 --> 04:45.890
Now let's move on in the favorite screen where all the importing meals and justice before we should

04:45.890 --> 04:46.650
get rid of debt.

04:46.670 --> 04:54.770
So let's do this instead all the justice before all use use selector from react read X to get my meals

04:54.770 --> 05:02.720
from the store and therefore here where I use meals Well I will actually get my available meals with

05:02.720 --> 05:04.260
you use selector.

05:04.310 --> 05:10.370
Again this gives me a state and I can access state dog meals not filtered meals but now actually here

05:10.370 --> 05:11.240
for the favorites.

05:11.240 --> 05:16.250
I don't want to respect any filters that we're set because in my opinion it makes sense that when we

05:16.250 --> 05:21.000
want to view our favorites we always see all favorites.

05:21.050 --> 05:25.930
You could of course have a different logic and go for the filtered meals but I will use just meals here.

05:26.090 --> 05:28.490
So dark meals stock meals might look strange.

05:28.520 --> 05:36.950
This selects a slice of our state and then in this slice this meals thing here axis is this meals property

05:36.950 --> 05:37.940
and our state slice

05:40.820 --> 05:46.180
but of course if you have a look at your resume it does only partly make sense right because we have

05:46.180 --> 05:51.050
a favorite meals property here and indeed we do.

05:51.330 --> 05:58.260
So actually we don't need to filter our favorites like this anymore and this was just a dummy filter

05:58.260 --> 06:04.710
anyways it always took the meals with and won an Emmy too as an idea instead for our favorite meals.

06:04.760 --> 06:10.310
We can't just get them by accessing here on our meals state Sly's favorite meals.

06:10.310 --> 06:16.880
So this property because we will later manage the favorite meals in a separate array in our store.

06:16.880 --> 06:18.280
So that's even easier here.

06:18.290 --> 06:23.290
Very short code so if that we got rid of the meals import here as well.

06:23.300 --> 06:25.460
Let's move on to the filters screen.

06:25.460 --> 06:27.080
There is no meals import here.

06:27.170 --> 06:29.840
The meal detailed screen on the brand has one.

06:29.840 --> 06:31.280
So here I want to get rid of it.

06:31.310 --> 06:33.220
And now here will needs debt.

06:33.290 --> 06:39.800
Meals property which I showed a second ago because again here we can use you selector from react redux

06:40.610 --> 06:51.720
to select our meals because in here we now have our component here where we use our meals and there

06:51.810 --> 06:59.280
I want to have an array with all meals because I'm trying to load a single meal by I.D. and therefore

06:59.370 --> 07:04.440
my basis my array in which I look for that idea should of course be an array with all meals and not

07:04.440 --> 07:09.900
filtered because I don't care about any set filters here I'm looking for a specific meal with a specific

07:09.900 --> 07:16.140
I.D. And I want to get a full list of meals and that's day four where we will need this unfiltered meals

07:16.140 --> 07:17.180
list we're managing here

07:20.140 --> 07:27.880
so therefore here we can now get our available meals with use selector and there again we use the state

07:27.880 --> 07:34.360
meals stored meals now for real and now we can use away label meals here to find the meal with that

07:34.420 --> 07:41.070
I.D. with Debbie get rid of this import here as well we can also remove the button import now that I

07:41.070 --> 07:44.090
see it but we will actually have a problem.

07:44.430 --> 07:51.780
You might notice that in the header I actually also try to find a meal from the meals array and we remove

07:51.780 --> 07:53.770
that import.

07:53.790 --> 07:59.010
Now the problem also is here in the navigation options we can't use the use selector hook because you

07:59.010 --> 08:04.170
can only use hooks instead of Abra hooks or inside of functional components and this is never off that

08:04.170 --> 08:08.340
it's a normal function not a functional component and ultimately a hook.

08:08.340 --> 08:11.870
So we can't use you selector in here so that won't work.

08:11.900 --> 08:17.400
Now of course we could bring back the meals import but that would be kind of cheap because in real applications

08:17.400 --> 08:22.710
you will sometimes have that situation where you need data from your redux store in your navigation

08:22.710 --> 08:23.160
data.

08:23.190 --> 08:28.170
And therefore in the next lecture we'll tackle this and make sure that we can also get access to this

08:28.170 --> 08:28.470
here.
