WEBVTT

00:02.290 --> 00:09.430
So now that the general game logic works let's focus more on finishing up that styling.

00:09.700 --> 00:16.180
And also on adding our own custom funds and a nice little image on indie game over screen because working

00:16.180 --> 00:23.530
with images and working with custom fonts is a typical thing in modern app development of course you

00:23.530 --> 00:30.520
rarely want to stick to the default system funds and rarely do you have an app without any images.

00:30.520 --> 00:37.390
So therefore let's get started with custom fonts and in a React Native X web adding funds is super trivial

00:38.200 --> 00:40.820
in your project folder in the assets folder.

00:40.870 --> 00:47.000
Let's create a Fonts folder you can store it at anywhere though.

00:47.050 --> 00:52.560
But I like to keep it in the assets folder to keep my well assets like fonts and images organized.

00:53.080 --> 00:58.270
So here in the funds folder I unsurprisingly want to manage my funds and for debt attached you find

00:58.270 --> 01:03.460
a zip file with two funds which you can just extract and then drag and drop into here.

01:03.560 --> 01:06.730
That's open Sands bold and open sends regular.

01:06.730 --> 01:12.790
So these two funds are attached to this video in a zip file extracted and dragged him into the funds

01:12.790 --> 01:14.100
folder.

01:14.110 --> 01:22.390
Now with that these funds are generally a way label but to use them you still need to configure more.

01:22.460 --> 01:29.780
You need to go to your app just fall and basically instruct React Native and expo to load these funds

01:29.810 --> 01:37.920
so to use them for that India app J.S. file and I'm using the app J.S. file because that's the first

01:38.010 --> 01:43.560
file which is loaded or which is executed so to say when the app starts and you want to load your funds

01:43.590 --> 01:51.060
when the app starts in there you need to add import and that import is that you import everything as

01:51.060 --> 01:58.630
fund though that name here is up to you but typically you use frontier from Expo dash fund.

01:59.140 --> 02:07.380
So Expo dash fund is a package which gives you fund utilities so utilities that allow you to load funds

02:07.800 --> 02:13.140
and you import everything from the package in bundles to gather in this fund object.

02:13.140 --> 02:15.800
That's what we're doing here now.

02:15.950 --> 02:21.920
To load funds I'll add a new function outside of the functional component because this function doesn't

02:21.920 --> 02:26.580
need to be recreate it for every component every render a cycle.

02:26.610 --> 02:27.860
Now I'll name it fetch funds.

02:27.870 --> 02:29.060
The name is up to you.

02:29.330 --> 02:31.190
And in this function here

02:34.010 --> 02:38.640
I will call fund load async.

02:38.710 --> 02:43.810
Now this is a function that or a method on the fund package which we're importing here that allows us

02:43.810 --> 02:52.050
to load funds and what you pass to load asking is an object where you tell Expo and date for reigniting

02:52.120 --> 02:57.010
about all the funds you want to load you do this by using a key where you pick any name of your choice

02:57.310 --> 03:02.710
like open dash sense and you'll later be able to use these funds by these names.

03:02.710 --> 03:06.400
So here open suns because my font is called open sense.

03:06.400 --> 03:10.510
So here it's open Sands and then you add require.

03:10.840 --> 03:17.180
That's a language feature javascript offers where you point at the path where it is fun to store it.

03:17.200 --> 03:18.310
That's a relative path.

03:18.340 --> 03:20.820
So here I point at the assets folder.

03:20.850 --> 03:28.760
You fonts folder and then it's the open sends bold exciting not bold but regular dot CTF file and now

03:28.760 --> 03:36.210
I'll add a second item here to this object I path to load async and that could be open sense bold.

03:36.210 --> 03:40.660
No these names are totally up to you and they're a want to load the bold word.

03:41.290 --> 03:48.160
So is that we're telling react native in the end where our funds live where these fun files live and

03:48.160 --> 03:56.650
to which names you want to map them and we can later use these names to assign these funds to text now

03:56.770 --> 04:03.550
load async actually returns a promise which means that this will take a bit longer not super long but

04:03.550 --> 04:09.360
it will not load these instantaneously and I will return this promise here instead of fetch fonts so

04:09.360 --> 04:15.600
that wherever we call fetch fonts we can wait for this promise to resolve before we continue now where

04:15.600 --> 04:19.610
do we want to fetch our funds though.

04:19.670 --> 04:26.720
Well we could manually load our funds here we could for example call fetch fonts like this and it would

04:26.720 --> 04:28.180
go ahead and fetch our funds.

04:28.190 --> 04:34.220
But the problem is we would continue rendering and we would eventually render our content and if anywhere

04:34.220 --> 04:38.190
in the content we use text that tries to use such a fund.

04:38.300 --> 04:43.850
If the font hasn't been loaded yet and as I said it will take only a couple of milliseconds but still

04:43.850 --> 04:50.660
for the first render cycle the font might not have been loaded then we would get an error so loading

04:50.660 --> 04:55.400
our fonts like this is not recommended it will very likely not work.

04:55.430 --> 05:03.310
Instead there is a special component which you can use and helps you load your fonts you import this

05:03.310 --> 05:10.450
component from Expo and the name of that component is app loading.

05:10.460 --> 05:17.480
Now that's a component which will basically prolong the default loading screen the splash screen users

05:17.570 --> 05:24.860
see anyways when the app is launching it will prolong this screen to stay active until a certain task

05:24.860 --> 05:26.150
of your choice is done.

05:26.150 --> 05:29.610
Like for example until fetching funds is done.

05:29.960 --> 05:35.180
So app loading it is in the app component.

05:35.190 --> 05:41.520
We just have to make sure now that we render this component instead of our actual content as long as

05:41.520 --> 05:43.650
we haven't loaded our fonts yet.

05:43.740 --> 05:49.000
Or as long as we're not done with loading whatever we want it to load.

05:49.120 --> 05:55.390
Now the cool thing is we can use state for that and start with an initial value of falls because the

05:55.390 --> 06:04.240
state I want to manage here is data loaded or whatever you want to call it and set data loaded.

06:04.350 --> 06:11.880
Now here I want to check if data loaded is not true hence the exclamation mark that I know the data

06:11.880 --> 06:16.760
hasn't been loaded yet and that's the case initially and in this case I'll not even continue with my

06:16.920 --> 06:17.580
logic.

06:17.640 --> 06:25.170
Instead for this functional component I'll immediately return the app loading component as the content

06:25.170 --> 06:25.610
of the app.

06:25.620 --> 06:32.340
Basically because I don't want to render any other content if we're still loading our data now app loading

06:32.340 --> 06:40.740
is a component coming from Expo which takes a start async prop where we point at the operation we want

06:40.740 --> 06:46.200
to start when this is first rendered and that's of course our fetch funds function.

06:46.200 --> 06:49.480
So here I'm pointing at fetch once at dysfunction.

06:49.500 --> 06:51.290
Not important eh.

06:51.630 --> 06:57.420
This has to be a function when you pass here and b it has to be a function that returns a promise because

06:57.700 --> 07:01.980
X BOE will automatically listen to that promise for you.

07:01.980 --> 07:09.240
And when the promise resolves it will know that the loading is done and it will then call whatever you

07:09.240 --> 07:10.770
pass here to on finish.

07:10.770 --> 07:17.530
So here you need to pass a function which then actually sets data loaded to true.

07:17.610 --> 07:23.160
So this function here will be executed for you when this operation is done and for export to find out

07:23.160 --> 07:24.120
when does this done.

07:24.120 --> 07:27.360
This should return a promise.

07:27.380 --> 07:33.760
So now these two props will work together and we're updating data loaded this state to be true and they

07:33.760 --> 07:39.410
offer to not render this content but to proceed with executing this code and eventually rendering the

07:39.410 --> 07:40.760
content down there.

07:41.060 --> 07:47.810
When fetching our phone system and you could do any async operation here but typically you use app loading

07:47.810 --> 07:50.690
to load some assets like funds or anything like that.

07:50.750 --> 07:56.030
So assets that should be there when the app starts what you need immediately and typically that are

07:56.030 --> 07:57.770
funds.

07:57.870 --> 08:05.710
Now you can also add on error handler here by the way and here all just console locked the error object

08:05.710 --> 08:07.050
which we also get here.

08:07.300 --> 08:14.470
In cases where loading that fails of course you might not just want to lock this but instead do something

08:14.470 --> 08:16.570
else shows them alternative content in your app.

08:16.570 --> 08:20.230
Anything like that here I'll just log it because this shouldn't fail.

08:20.230 --> 08:25.710
The funds are available locally here so that should be laudable without issues.

08:25.760 --> 08:31.330
Now if we save that our app of course restarts and we see no difference here.

08:31.400 --> 08:36.380
Loading screen also doesn't really take Lang longer as before because that loading is super fast.

08:36.380 --> 08:37.820
It just doesn't happen instantly.

08:37.820 --> 08:39.830
That is why we need this approach.

08:39.830 --> 08:41.240
But now we loaded the funds.

08:41.240 --> 08:43.440
How can we now use them.

08:43.460 --> 08:48.980
Well let's say we want to change our start a new game title here to use our fund now for dead.

08:48.980 --> 08:57.390
We need to go to the start game screen which is where this title lives in the end here start a new game

08:57.390 --> 09:03.540
it does have the title style and therefore down in the stalls here on title we can now set fund family

09:03.630 --> 09:08.050
to change the font family and set us to open dash sans dash.

09:08.050 --> 09:09.270
Bold for example.

09:09.270 --> 09:15.180
And of course the identifier you use here has to be an identifier you loaded here.

09:15.210 --> 09:17.800
So here I have opened Sands bold and open Sands.

09:17.850 --> 09:25.180
I can use these two identifiers in my code anywhere in the app when I want to assign a custom fund.

09:25.180 --> 09:27.240
That's just what I'm doing here.

09:27.240 --> 09:32.940
Now you see that has a different font it is bold and by the way if you're using custom fonts and you

09:32.940 --> 09:36.180
want a bold font you have to loaded with the font family.

09:36.180 --> 09:42.180
You can set the font weight react native supports this but for custom fonts expo at the moment doesn't

09:42.180 --> 09:42.840
support this.

09:42.840 --> 09:47.790
Instead you simply have to use a separate font family which isn't really a problem as you can see.
