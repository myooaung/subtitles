WEBVTT

00:02.420 --> 00:08.720
So we want to handle some asynchronous code in this add place action creator.

00:08.720 --> 00:14.430
Now you may know that this is possible with redux but we need an additional middleware for this,

00:14.570 --> 00:21.190
it's called redux thunk and more about this can be learned in probably any react for web course

00:21.410 --> 00:28.130
in my complete guide but probably also in other courses. Let's install that library with npm install

00:28.130 --> 00:33.360
--save and then it's redux-thunk, written like this.

00:33.680 --> 00:40.280
This is not a library that adds any native code so we don't need to do anything in Xcode or something

00:40.280 --> 00:41.150
like that,

00:41.390 --> 00:47.870
we just install this library and then we can go to configure store which is where we in the end have

00:47.870 --> 00:50.160
our compose enhancers function here.

00:50.300 --> 00:53.980
We now want to apply some middleware to our redux store,

00:54.140 --> 00:59.870
so therefore from redux, I'm going to import apply middleware,

00:59.930 --> 01:07.130
I also need to import the middleware we just added, thunk, so I import thunk and you can name this whatever

01:07.130 --> 01:14.390
you want, it's the default export so you can rename it from redux thunk, with this,

01:14.400 --> 01:17.600
I now want to add it to my set up here.

01:18.490 --> 01:23.600
Conveniently we can simply pass an argument to compose enhancers,

01:23.770 --> 01:30.470
we can pass apply middleware to this function and to apply middleware on the other hand, we just pass

01:30.970 --> 01:40.360
thunk, just like that. With this, we already got the thunk middleware added and the thunk middleware now will

01:40.420 --> 01:48.330
automatically step in in the action creators if we follow a certain pattern in such an action creator,

01:48.520 --> 01:54.720
let me give you an example, right now all action creators have the default form of an action creator,

01:54.820 --> 01:58.840
ie they return an action, an action object.

01:59.200 --> 02:08.170
If this function were to no longer return this but if this would instead return another function, then

02:08.170 --> 02:12.400
redux thunk would step in and basically capture that and handle it

02:12.550 --> 02:18.220
because this is just what the thunk middleware is there for, it handles cases where we don't return an object

02:18.220 --> 02:24.940
in an action creator but a function. In this function, redux thunk will then automatically provide us one

02:24.940 --> 02:26.230
argument,

02:26.230 --> 02:31.900
the dispatch function we can then in turn call inside of this function,

02:32.020 --> 02:34.310
so a lot of functions here.

02:34.390 --> 02:41.410
The idea behind this is that we can now run any code in here, synchronous or asynchronous and when

02:41.410 --> 02:47.530
we're done, we're calling dispatch to dispatch another action from inside here,

02:47.530 --> 02:54.980
this basically allows us to dispatch some we're done action once we're done for example. So this is the

02:55.010 --> 02:57.430
idea we have here,

02:57.530 --> 03:03.260
so now it's inside this function that I'm going to send my request to the backend

03:03.260 --> 03:05.180
and how does this now work?

03:05.600 --> 03:10.890
I want to post some data to the backend here because I want to create a new place,

03:10.910 --> 03:13.190
so first of all I'm going to use the fetch API,

03:13.220 --> 03:16.410
you don't need to import it, you can just use it like this

03:16.610 --> 03:20.370
and the first argument here is the url

03:20.380 --> 03:22.780
you're about to send the request to.

03:23.120 --> 03:29.180
So if we have a look at our firebase project, that would be this url, of course you should pick your own

03:29.180 --> 03:32.230
one, you can now pass this here

03:32.390 --> 03:37.190
but this is not the full url, this basically is the root url of our database you could

03:37.190 --> 03:42.100
say, you can now simply create a nested data structure for firebase

03:42.140 --> 03:45.690
and if you're using your own server, simply use the right endpoint

03:45.740 --> 03:47.090
you set up there.

03:47.450 --> 03:53.540
So on firebase you can now basically say where do I want to store data and I'm storing places so I'm

03:53.540 --> 03:56.270
targeting a places subfolder

03:56.300 --> 03:57.490
so to say

03:57.820 --> 03:58.840
and on firebase

03:58.850 --> 04:04.600
and that's really just something specific to firebase, you need to add a .json at the end,

04:04.640 --> 04:10.640
this is not required on your own backend probably, this is really just part of the firebase endpoint.

04:11.620 --> 04:12.730
Now by default

04:12.740 --> 04:15.290
and for that I will switch back to firebase,

04:15.410 --> 04:20.630
all access is blocked in a firebase project which is a good thing and you want to control access in

04:20.630 --> 04:21.380
a real app

04:21.590 --> 04:27.860
but here for demo purposes, since we have no way of logging in right now, I'll go to rules under database

04:28.190 --> 04:30.390
and switch both to true here.

04:32.050 --> 04:36.560
This essentially means that both read and write access is always granted

04:36.680 --> 04:38.740
no matter who's trying to read or write

04:38.750 --> 04:42.000
and again, this is of course not a setting you want to use in production,

04:42.110 --> 04:47.850
it is a setting which I use here and will later refine it once we add authentication.

04:47.900 --> 04:54.360
So now we can send a request to this url and by default, if we would leave it like this, this would

04:54.530 --> 04:58.240
send a get request so it would try to get some data.

04:58.490 --> 05:04.280
As I said, I want to send a post request though and we turn this into a post request by passing a javascript

05:04.280 --> 05:06.900
object as the second argument, here

05:06.920 --> 05:15.770
we can configure the request, there you can add a method property and override the default method

05:15.830 --> 05:17.510
which would have been get,

05:17.900 --> 05:26.120
so here the method I want to use is now post to create a new entry. A post request only makes sense if

05:26.120 --> 05:27.950
we also attach a body,

05:28.010 --> 05:34.420
so I will add a body property here and the body has to be a string,

05:34.640 --> 05:35.460
a json

05:35.480 --> 05:42.180
object basically, so json data in the json format. For that we can use json stringify

05:42.200 --> 05:45.360
to turn a javascript object into such a string

05:45.860 --> 05:49.500
and this javascript object doesn't even exist yet,

05:49.610 --> 05:56.180
so I'll create it before I create the fetch request. I'll create an object and store it in a constant,

05:56.300 --> 05:58.870
I'll name it place data

05:59.240 --> 06:02.970
and here this is a new javascript object, in this object,

06:03.140 --> 06:12.400
I want to have the name of the place, will be place name and the location which will be guess what, location,

06:12.800 --> 06:14.960
so these two arguments are getting used.

06:15.140 --> 06:20.390
I don't use the image yet because we'll have to upload the image a bit differently

06:20.390 --> 06:21.580
in one of the next steps

06:21.590 --> 06:24.490
but let's stick to this step for now.

06:24.500 --> 06:30.070
Now I can pass place data to stringify and now this will be turned in a string

06:30.230 --> 06:30.910
and this is it,

06:30.920 --> 06:36.010
this will send the http request and store your data on the server.

06:36.290 --> 06:44.090
Now we need to chain some methods here to react to the response of that and to catch potential errors.

06:44.090 --> 06:46.450
First of all I'm adding a catch block,

06:46.580 --> 06:49.810
I can do this because the fetch method returns a promise,

06:49.820 --> 06:55.830
so I can add catch to catch errors and then to well handle a successful response

06:55.830 --> 07:03.320
and therefore now I will simply log the error to the console to see what happened. Then this is if we

07:03.320 --> 07:10.370
don't go into the catch block, so if we got a response, this response can also be used here in an arrow function

07:10.370 --> 07:15.200
and first of all, I have to call the json method on this,

07:15.200 --> 07:22.270
this will basically extract the data from the response and it will yield another promise so I chain

07:22.280 --> 07:25.940
another then call and that's just how the fetch API works,

07:25.940 --> 07:29.480
read more about that in the docs I already mentioned. Here

07:29.570 --> 07:36.110
I basically get back the parsed response and here we can now use that in whichever way we want to use

07:36.110 --> 07:36.660
it,

07:36.680 --> 07:42.310
so here I will also just log this to the console for now so that we can see if that worked

07:42.440 --> 07:51.050
and what's inside the response. With that data in mind and with that set up, we can see if that works,

07:51.050 --> 07:57.680
what happens if we trigger add place? Please note that we no longer dispatch anything to the store,

07:57.680 --> 08:03.380
we no longer have any data in the store, we just sent the request but that is what I want to test right

08:03.380 --> 08:05.470
now. For this,

08:05.480 --> 08:11.030
make sure that your development server is running, maybe rerun npm run android and so on if you're facing

08:11.030 --> 08:16.650
any issues, like for example here when you get the error here that redux thunk is not found, quit the development

08:16.650 --> 08:18.710
server and simply restart it,

08:18.710 --> 08:26.130
so I'm doing this here with running npm run ios again and there also just to be safe, npm run Android

08:26.170 --> 08:31.130
again. And with that out of the way, let's try it out,

08:31.210 --> 08:38.270
let's quickly go into the ios app, submit this and click share place,

08:38.290 --> 08:41.590
now let's pick an image from the gallery on ios as you learned,

08:42.780 --> 08:44.380
let's pick this one again,

08:44.430 --> 08:50.700
select a place and enter some cool place and thank you for that

08:50.700 --> 08:57.310
auto correction, share the place and now how do we see if it worked?

08:57.310 --> 09:03.610
I forgot to attach this to my debugging tools but we can go to firebase and there, you should see the

09:03.610 --> 09:04.690
new places

09:04.690 --> 09:08.090
node, if you go in there, you should see this cryptic string,

09:08.110 --> 09:14.740
that's an ID automatically created by firebase for that place and then here, we got the location and

09:14.740 --> 09:17.290
some cool place, so that's looking really good,

09:17.290 --> 09:22.500
that seems to work. And to also see this here in the developer tools,

09:22.630 --> 09:27.760
I will actually debug this remotely so that this is connected here on the right and then quickly

09:27.760 --> 09:31.600
try it again to see the response,

09:31.630 --> 09:34.820
so let's also again pick a nice image here,

09:35.800 --> 09:46.180
like that, pick a place like this, again testing this, share the place and now here you see on the right

09:46.190 --> 09:49.790
this object with this cryptic name,

09:49.820 --> 09:52.330
that is what you get back from firebase automatically

09:52.340 --> 09:54.700
so it informs you about the ID it created.

09:55.040 --> 09:57.760
And this is already how we can store data on the server,

09:57.770 --> 09:58.500
so done,

09:58.500 --> 09:59.000
goodbye,

09:59.000 --> 10:01.090
let's move on to the next module.

10:01.100 --> 10:02.390
No not reall,

10:02.390 --> 10:08.880
we also got an image and it would be nice if we could not only store places on the server but also fetch

10:08.880 --> 10:11.390
them and render them in our list.

10:11.420 --> 10:14.400
Let's work on the image first which is the more complex part

10:14.540 --> 10:18.060
and then let's finish this module by getting the places.

10:18.080 --> 10:19.470
But still some work to do,

10:19.520 --> 10:21.530
let's dive into this in the next lecture.
