WEBVTT

00:02.440 --> 00:06.010
So we're able to see the maps in our applications now,

00:06.160 --> 00:12.690
now let's make sure that if the user clicks somewhere in the map, we add a marker to it.

00:12.700 --> 00:18.990
So for this, we need to listen to a click event on the map and then somehow render a marker,

00:19.000 --> 00:23.140
the good thing is react native maps supports both.

00:23.140 --> 00:27.910
Now the best way to learn about these features is either to have a look at the example app you can find

00:27.910 --> 00:33.940
on this github repository or at the APIs, we're interested in a click on the map view component,

00:34.090 --> 00:37.410
so let's check out the map view component API,

00:37.450 --> 00:43.120
there you see all the props you can set and which values they would expect and you see the events you

00:43.120 --> 00:50.590
can listen to, like onPress which you guessed it, can be used to react to tabs on the map.

00:50.620 --> 00:52.530
So this is what I'm interested in,

00:52.540 --> 00:58.600
I want to react to this so I'll add onPress here to the map view

00:58.800 --> 01:04.630
and now of course we also need a handler for that, I'll add it right above the render function and I'll name it

01:04.630 --> 01:09.020
pick location handler,

01:09.080 --> 01:16.720
there we get some event data provided by react native maps and we want to use that event data to

01:16.780 --> 01:24.450
essentially reset our focused location which is the one we're binding to the map view here to the location

01:24.470 --> 01:25.680
user the clicked on.

01:25.750 --> 01:29.530
Now a click will yield us a latitude and longitude,

01:29.620 --> 01:35.080
so a point which is defined by these two positions or by these two units.

01:35.080 --> 01:36.900
So we need to get that

01:36.970 --> 01:40.140
and thankfully this event exposes this to us.

01:40.240 --> 01:46.240
However we don't directly get an object with latitude or longitude, instead this is wrapped in some

01:46.420 --> 01:49.140
synthetic event managed by react,

01:49.450 --> 01:56.150
so we can easily get it by creating a new coords constant and then accessing event

01:56.320 --> 02:03.850
but there we need to access native event to get the underlying event provided by react native maps and

02:03.850 --> 02:10.390
there, we'll have a coordinate property which gives us these coordinates.

02:10.390 --> 02:15.400
You can see that in the official documentation, you just don't see the native event part though it is

02:15.490 --> 02:22.300
documented up here and then you see there is an object which has one property coordinate and there, we

02:22.300 --> 02:27.460
have an object which has a coordinate and a position property, we're interested in the coordinates here with

02:27.480 --> 02:29.750
latitude and longitude.

02:29.920 --> 02:30.920
So what I'll do here is

02:30.930 --> 02:37.160
I'll set my state and I'll get the previous state here

02:38.670 --> 02:43.010
and here I'll then return a javascript object which should be merged with the old state

02:43.190 --> 02:52.120
where I'll set the focus location. I'll copy the properties of the old focused location to keep my latitude

02:52.120 --> 02:54.880
delta and longitude delta which I don't want to change,

02:55.650 --> 02:58.260
that's basically the zoom level you could say

02:58.590 --> 03:06.240
and then I'll set latitude here to coords latitude, there will be a latitude property on that coords object

03:06.240 --> 03:08.410
or on this coordinate object here

03:08.820 --> 03:15.470
and I'll set longitude here to coords longitude.

03:15.850 --> 03:19.890
With that we have a way of picking a location,

03:20.170 --> 03:26.690
so let's try this out and let's hook up pick location handler to the onPress event here,

03:26.710 --> 03:29.890
this pick location handler. Let's save this,

03:29.890 --> 03:31.740
now with that we get this connected,

03:31.870 --> 03:37.370
however the focused location here is bound to the initial region.

03:37.810 --> 03:40.420
This won't update after the first render,

03:40.450 --> 03:47.080
so even if we changed focus location, it will not move to the new location because it's only initialized

03:47.080 --> 03:47.940
with that.

03:48.360 --> 03:49.690
Well we can fix this,

03:49.810 --> 03:52.030
we can have a look at the API documentation

03:52.030 --> 04:01.800
and there we see that we not only got a initial region, we also got a region. So we can also bind region to

04:01.830 --> 04:04.990
this and the initial region will become important later again

04:05.280 --> 04:12.810
and I'll also bind region to focus location now. With that let me reload the application here

04:15.150 --> 04:23.180
and quickly enter some credentials here and now if I click somewhere, the map indeed jumps to that

04:23.190 --> 04:23.960
place,

04:23.970 --> 04:30.720
centers this new place, so here I'm clicking on Nob Hill here on this object here so it's centered,

04:30.830 --> 04:33.520
so this is all working now.

04:33.530 --> 04:37.790
Now of course jumping to it like this is isn't that beautiful

04:37.940 --> 04:41.940
and also it would be nice to have some marker at the position where we clicked.

04:42.230 --> 04:44.080
So these are the two things I want to add next,

04:44.090 --> 04:51.860
a little animation to smoothly go to where we clicked on and a marker at the position where we clicked.

04:51.950 --> 04:54.010
Now let's start with the marker.
