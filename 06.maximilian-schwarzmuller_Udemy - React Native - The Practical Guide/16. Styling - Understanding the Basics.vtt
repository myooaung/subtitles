WEBVTT

00:02.400 --> 00:04.940
In the last lecture we added our text input,

00:05.080 --> 00:08.590
that's great but we can definitely improve the styling of it

00:08.590 --> 00:14.920
so let's do that. First of all, let me add a placeholder so that we can give the user an idea about which

00:14.920 --> 00:20.000
input we expect and we can define the placeholder property here on the text

00:20.000 --> 00:23.190
input, you can always check this in the documentation,

00:23.320 --> 00:31.040
if you scroll down you will see that we eventually got this placeholder prop in there, here.

00:31.830 --> 00:40.980
So let's do this, let's add placeholder and let's maybe set this to an awesome place as a string, if we

00:40.990 --> 00:43.600
now save this and we go back, should reload

00:43.620 --> 00:49.620
the app, let's also turn on life reloading additionally to hot reloading on the Android app and reload

00:49.620 --> 00:51.390
manually this first time

00:51.390 --> 00:53.140
and now we see an awesome place.

00:53.250 --> 00:59.160
Now the next thing I want to do is I want to make sure that this input actually sits on the top of the

00:59.160 --> 01:02.840
page and that we don't have this ugly border around it

01:02.910 --> 01:04.760
but some other style.

01:04.860 --> 01:06.670
So we got two goals,

01:06.780 --> 01:12.660
we want to move this to the top of the page and get rid of the border, well getting rid of the border is simple of

01:12.660 --> 01:15.860
course, we just remove border width and border color

01:16.140 --> 01:21.140
but how do we float this text input up to the top of the page?

01:21.240 --> 01:30.240
For this we have to understand how we position elements in our view or in general, in react native apps.

01:30.240 --> 01:33.110
It uses a concept called flexbox,

01:33.120 --> 01:39.660
let's see how that works. In a flexbox system which react native uses and which is very similar to

01:39.660 --> 01:47.550
the css flexbox system, though it has some differences but in such a system, the layout is defined

01:47.550 --> 01:49.500
by two axis,

01:49.500 --> 01:58.920
so we get the main axis and the cross axis. The main axis, so in which direction points is defined by your flex

01:59.070 --> 02:01.670
direction element here,

02:01.680 --> 02:04.590
it's set to column which means from top to bottom,

02:04.650 --> 02:13.410
so the main axis is exactly that, the top to bottom axis and the cross axis is the other axis then automatically.

02:14.220 --> 02:15.760
Then you've got three other

02:16.080 --> 02:23.580
key properties you use when setting up flexbox and again, always keep in mind, react native doesn't

02:23.580 --> 02:25.210
really support css,

02:25.290 --> 02:31.890
I'll come back to this later in the course, it emulates css properties though, at least some of them

02:32.140 --> 02:39.850
and it does support the flex once, though always without the dash between the different words,

02:39.900 --> 02:46.800
so justify content becomes one word with a capital C in content but it supports these and they work

02:46.830 --> 02:50.330
the same as they do in css flexbox.

02:50.790 --> 02:59.430
So here we set flex direction to column, justify content flex start then means start at the top or at

02:59.430 --> 03:07.860
the beginning of your main axis, so justify content defines how the elements are positioned on the main

03:07.860 --> 03:08.930
axis,

03:08.970 --> 03:16.260
in this case that's from top to bottom because the direction is column. Align items defines how the

03:16.260 --> 03:19.740
elements are positioned on the cross axis,

03:19.800 --> 03:25.740
in this case that is from left to right and flex start means position them at the beginning of the

03:25.740 --> 03:26.660
axis too,

03:26.670 --> 03:29.000
that is why we end up with this layout.

03:29.250 --> 03:37.440
Now flex one simply refers to how much the element and here, the element is not one of these orange boxes

03:37.470 --> 03:39.470
but the entire container,

03:39.780 --> 03:42.690
so how much the element should stretch out,

03:42.690 --> 03:45.180
how much space it should occupy

03:45.180 --> 03:47.200
and this is actually a relative value.

03:47.370 --> 03:56.820
If you got two flex elements sitting next to each other and both have a flex value of one, they will actually

03:56.820 --> 04:00.290
distribute the available space evenly so 50/50,

04:00.600 --> 04:06.360
if you got two to one, then one will take up two-thirds, the other one will take one third.

04:06.420 --> 04:07.620
This is how this works

04:07.650 --> 04:08.400
and no worries,

04:08.390 --> 04:09.940
we'll use that throughout the course

04:10.020 --> 04:12.020
so this will become much clearer.

04:12.420 --> 04:18.240
Now what you can do with that is you can of course switch from flex direction column to row and then

04:18.240 --> 04:19.660
the axis is switched 

04:19.710 --> 04:25.410
and therefore we would end up with this layout where we now position the elements in the flex container

04:25.560 --> 04:27.670
in a row instead of in a column.

04:28.110 --> 04:32.540
And we can of course also change the values of justify content and align items,

04:32.700 --> 04:35.360
if we set justify content to space between,

04:35.460 --> 04:37.190
that's one of the available values,

04:37.230 --> 04:42.640
you can check out the css flexbox guides to learn about all possible values,

04:42.690 --> 04:47.080
so if we use space between, then they will distribute the available space,

04:47.130 --> 04:54.060
they being the elements in the flex container. They will distribute the available space in the flex container

04:54.180 --> 04:56.590
and keep an equal distance from each other.

04:56.790 --> 05:01.320
If we would switch back to column, this would happen over the column instead of the row

05:01.740 --> 05:09.600
and if we would set align items to center, then we would also position them in the middle of the cross

05:09.600 --> 05:10.290
axis,

05:10.290 --> 05:13.240
notice that we're back to flex direction row here.

05:13.650 --> 05:17.390
So this is how flexbox works in react native

05:17.510 --> 05:18.790
and we will use it a lot,

05:18.810 --> 05:20.580
so incase that is not entirely clear,

05:20.580 --> 05:22.590
no worries we'll get there.

05:22.590 --> 05:26.210
So our goal is to position the text input at the top

05:26.460 --> 05:33.740
and for this, we have to work on the container containing the text input, this is the outer view which has a style.

05:34.510 --> 05:41.930
The style is created with this strange stylesheet create syntax and then stored in a constant which

05:41.930 --> 05:47.370
we then in turn assign to the style property of the view or to be precise,

05:47.540 --> 05:51.700
we assign a property of that styles constant, here

05:51.760 --> 05:56.740
container property. In there, we actually define a layout of the container

05:56.930 --> 06:01.380
and you already see flex one, align items and justify content.

06:01.790 --> 06:07.610
You don't see flex direction because the default already is column and that is the layout we want

06:07.600 --> 06:08.400
to use here.

06:08.630 --> 06:15.440
Now flex one is nice because we want to take the full available space though what we could do if we

06:15.440 --> 06:21.950
just want to build up our app from top to bottom with flex direction being column, we could also get

06:21.950 --> 06:29.990
rid of flex one here and that would simply not take the full available space over the entire page but

06:29.990 --> 06:33.790
simply take as much space as the child elements need

06:34.130 --> 06:40.070
and therefore it wouldn't position this in the middle of the page but simply define the container width

06:40.070 --> 06:44.390
based on the child's, therefore not taking up the full page.

06:44.390 --> 06:50.900
So if we save it like this and we go back to our application and again, it should reload automatically,

06:51.090 --> 06:58.770
you see that now the inputs switched up all the way to the top, though you'll also see that here on iOS,

06:58.770 --> 07:04.870
it even went below the status bar. Some bug

07:05.040 --> 07:12.540
and we can simply fix this by manually adding some padding to the container here, so we could add a padding

07:12.930 --> 07:18.660
of 20. Now of course the Android element went down too because of that

07:18.820 --> 07:24.730
but we will later in this course, in the styling section see how we can write different styles for different

07:24.730 --> 07:25.870
platforms.

07:25.870 --> 07:32.560
Right now let's stick to this solution, though one thing you will notice is that here if you watch closely,

07:32.560 --> 07:40.630
it may be hard to see, on Android only the part of the input or of the container to be precise has a

07:40.630 --> 07:47.320
white background, the background of the main app is a bit grey-ish, on iOS we don't see it because the

07:47.320 --> 07:49.460
whole background is white by default.

07:49.870 --> 07:55.930
The reason for this is the way we fix this, by commenting out flex one, our container doesn't take the

07:55.930 --> 07:57.320
entire page anymore.

07:57.610 --> 07:59.900
Now probably we want this to be the case,

08:00.010 --> 08:02.030
so I'll comment this back in

08:02.150 --> 08:08.620
and instead what I'll do is I'll set justify content which positions the elements on the main axis

08:08.950 --> 08:13.550
which is from top to bottom by default because of flex direction column,

08:13.650 --> 08:21.280
I'll set this from center to flex start to basically instruct it to start at the beginning of the page.

08:21.290 --> 08:22.360
If I do this,

08:22.630 --> 08:23.700
now you will see

08:23.800 --> 08:30.340
we get the same layout as before but actually on Android, it's now white everywhere because the container

08:30.340 --> 08:33.830
now is the full page width, full page height again

08:34.030 --> 08:40.000
but the input is still positioned at the beginning because on the container, the wrapping container, we

08:40.000 --> 08:44.880
say hey your child elements should be positioned at the start.

08:45.130 --> 08:46.780
So this is how we can work with that, 

08:46.780 --> 08:51.040
let me actually increase the padding to 26 to have a little bit more,

08:51.280 --> 08:59.680
well distance here on iOS, again we'll fix this for Android later in the course or in general, we'll

08:59.680 --> 09:02.410
learn how we can differentiate styles.

09:02.500 --> 09:06.110
This is how we can work with flexbox and with styling,

09:06.310 --> 09:12.580
again we'll dive deeper into this later in the course and we'll always add new styles of course to make

09:12.580 --> 09:14.350
things look nice.

09:14.350 --> 09:21.240
Now one important thing I want to mention in this lecture before we quit is this stylesheet component,

09:21.300 --> 09:29.260
this simply is the react native way of allowing you to create objects which you then can assign to the style

09:29.260 --> 09:36.220
property of elements and where you can then point to properties of your style objects like the container

09:36.220 --> 09:37.350
property here,

09:37.630 --> 09:44.530
so this is a convenient way of allowing you to write stylesheets which are understood by react and which

09:44.530 --> 09:53.470
you can use like this on a constant you store them in, on a sub-property to distribute your styles across

09:53.470 --> 09:54.820
your components.

09:54.940 --> 09:56.900
You can learn more about that stylesheet

09:57.160 --> 10:04.990
of course in the docs, there if you scroll down to APIs, not to components but to APIs, you can

10:05.080 --> 10:08.230
visit stylesheet to learn more about it.

10:08.230 --> 10:13.380
There you see the idea is basically to give you a css stylesheet-like experience.
