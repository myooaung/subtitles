WEBVTT

00:02.290 --> 00:08.830
With the actions in the reducer finished, we now need to connect our react native app to redux and connecting

00:08.830 --> 00:10.290
involves two things,

00:10.360 --> 00:15.460
first of all we need to make our react app aware of redux

00:15.670 --> 00:22.540
and if you used redux on react for the web, you learned that you do this in the index.js file so

00:22.540 --> 00:23.140
whenever

00:23.140 --> 00:30.010
you basically mount your root component, you wrap it with this provider component from react native

00:30.430 --> 00:31.990
and it's no different here.

00:32.230 --> 00:38.020
So in the index.js file where we essentially tell react native what our root component is,

00:38.380 --> 00:44.410
we will add an import to import something from the redux package,

00:44.410 --> 00:53.010
excuse me, not from redux, from react redux, that something is our provider component.

00:53.450 --> 01:02.000
Now this provider component here will be connected to our store and we'll then wrap this app component

01:02.300 --> 01:08.960
so that we mount the provider component which is just a very thin wrapper that we mount that as our root

01:08.960 --> 01:10.930
component. For that,

01:10.970 --> 01:13.490
we first of all need to have a store though,

01:13.610 --> 01:15.920
so let's go back to the store folder

01:15.920 --> 01:23.570
and in there, I'll add a new file directly on the store folder level which is named configureStore.js,

01:23.650 --> 01:26.440
the name is totally up to you.

01:26.450 --> 01:32.120
This will just be a factory function that returns a store and I set it up as a factory function so that

01:32.120 --> 01:37.490
we could pass an argument to it to dynamically configure the way we set up the store which can be

01:37.490 --> 01:42.140
important if you want to have different configurations for iOS or Android.

01:42.290 --> 01:45.900
But more about platform specific things later in the course,

01:45.980 --> 01:54.010
for now let's simply configure the store by first of all importing something from the redux package.

01:54.040 --> 02:00.340
So not from react redux but from redux itself, that something is named create store and it's a function

02:00.340 --> 02:03.080
which does just that, it creates a store.

02:03.470 --> 02:06.200
I also will import combine reducers,

02:06.280 --> 02:12.340
we only have one reducer right now so technically this wouldnt be required right now but I still want

02:12.340 --> 02:13.300
to import it

02:13.420 --> 02:19.300
so that we, once we add more reducers, can add them very easily.

02:19.300 --> 02:25.360
So let's create our new constant which is the root reducer then, there

02:25.360 --> 02:31.700
I will use combine reducer to combine multiple reducers into one well root reducer.

02:31.930 --> 02:36.050
That's actually simple, for that I need to import my reducers

02:36.130 --> 02:37.580
and here we only got one,

02:37.630 --> 02:40.120
it's my places reducer,

02:40.140 --> 02:47.380
I import that from the reducers folder and there, from the places file. In combine reducers,

02:47.380 --> 02:55.960
I now pass a javascript object where I map any keys of my choice to my reducers, here I will map places

02:56.260 --> 03:05.410
so that I can later access this slice of the state, the places related slice on this property, to places

03:05.510 --> 03:08.220
reducer just like this.

03:08.230 --> 03:10.530
Now we can create our store

03:10.900 --> 03:19.360
and for that I'll create another constant here which I'll name configure store which should be a function

03:19.360 --> 03:21.760
which right now won't receive any arguments

03:21.790 --> 03:27.580
but you could add them if you wanted to dynamically create your store. In here,

03:27.580 --> 03:36.490
I will simply return a call to create store where I now will pass my root reducer as an argument because

03:36.490 --> 03:44.110
create store expects to get one single reducer which can be combined reducer which will be

03:44.110 --> 03:50.740
our root store or our single source of truth for this root store, the single place which may update

03:50.860 --> 03:58.330
the root store and also defines the initial state since we defined it in the reducer. So with that, we

03:58.330 --> 03:59.530
got this,

03:59.590 --> 04:08.170
now I will export this configure store function as the default of this file. So with that, we get a way of

04:08.170 --> 04:10.130
creating a store,

04:10.300 --> 04:19.350
now I will go back to my index.js file and there, I will import my store. So I will import configure

04:19.360 --> 04:22.390
store, this function from

04:22.390 --> 04:28.710
and now let's go to the source folder to the store folder and there it's from the configure store file.

04:29.800 --> 04:35.670
The next step is to create some jsx where we wrap our app component with the provider

04:35.670 --> 04:41.810
and if our goal is to write jsx, we must not forget to import react from react

04:41.830 --> 04:47.830
otherwise we will get an error, now I'll create a variable here and I'll simply name it

04:48.040 --> 04:50.380
react native redux,

04:50.410 --> 04:58.270
you can name it whatever you want and this will wrap some jsx code. It will wrap my provider component

04:59.050 --> 05:05.500
which then or hold my provider component which then wraps my app component which is a self-closing

05:05.500 --> 05:06.420
component.

05:07.030 --> 05:15.010
The provider receives the store property where I simply want to pass my store, I'll create it and store

05:15.010 --> 05:21.220
it in a variable named store or a constant named store by executing configure store,

05:21.220 --> 05:24.990
keep in mind configure store is a function. So we execute that function,

05:25.000 --> 05:29.570
it gives us back the store and that's the store I now pass to my provider.

05:29.800 --> 05:33.730
With that the redux provider is connected to my store,

05:33.730 --> 05:38.860
this is the part where you could pass extra configuration.

05:38.910 --> 05:48.270
Now with that, we got our rn redux constant here, now we need to run this instead of our app, now using rn

05:48.270 --> 05:50.420
redux like this wouldn't work

05:50.640 --> 05:54.070
because this is just some jsx code

05:54.240 --> 06:01.230
but register component actually expects to get a function here which doesn't return jsx as it would

06:01.230 --> 06:01.770
now

06:01.860 --> 06:08.600
but that returns another function that then returns jsx because keep in mind, previously we here

06:08.590 --> 06:11.720
returned app and app was a react component

06:12.000 --> 06:14.960
and what's the simplest way of writing a react component?

06:15.330 --> 06:22.250
Well it's just writing a function like in place list, it's just a function, a function that returns jsx.

06:22.650 --> 06:27.780
So here, it expects to get a react component and therefore, it expects to get a function that returns

06:27.780 --> 06:28.910
jsx.

06:29.310 --> 06:34.980
Well that's no problem, let's simply rewrite this here to a simple react component,

06:35.130 --> 06:39.540
so to a function which then returns our jsx code,

06:39.780 --> 06:44.600
so I quickly turned this into an arrow function that returns this jsx code.

06:44.670 --> 06:51.360
With that, I now can use rn redux because now we have a function here where we have another function

06:51.630 --> 06:53.880
that returns jsx.

06:54.150 --> 06:58.230
So this is now connected, we got a store, that's all connected,

06:58.230 --> 07:05.030
let's now connect our container to react redux so that there, we can dispatch actions and we can get

07:05.100 --> 07:06.180
our state.

07:06.220 --> 07:08.330
Let's do that in the next lecture.
