WEBVTT

00:02.100 --> 00:05.240
So let's dive into sequel light again.

00:05.300 --> 00:11.100
We got a module for that supported by Expo which we install just as we installed the other native modules

00:11.130 --> 00:12.120
as well.

00:12.120 --> 00:18.570
And now just some quick words about sequel lite sequel lite is a database system you could say which

00:18.570 --> 00:22.840
is available on both Iaw and Android so you can quickly set up such a database there.

00:22.860 --> 00:30.240
It'll be super easy with this module and you can then use some sequel syntax some basic sequels syntax

00:30.570 --> 00:32.860
to run queries against that database.

00:32.940 --> 00:39.030
Now I'll not dive deeply into the sequel syntax here because there's obviously no sequel course but

00:39.030 --> 00:41.730
to learn all about how to use that obviously.

00:41.730 --> 00:50.880
Check out the official docs and attached you also find a link with a more detailed snippet that dives

00:50.880 --> 00:56.550
into how to use the sequel aid package in an expo app where you can see more examples for how to delete

00:56.550 --> 01:02.460
stuff and so on and you'll also find a sequel reference for a sequel like where you can learn more about

01:02.460 --> 01:03.990
the sequel syntax.

01:03.990 --> 01:06.630
I'll show some basic syntax now in this module.

01:06.720 --> 01:10.360
But for all the things you can do in your queries for all the commands you can execute.

01:10.470 --> 01:17.170
Definitely check out these resources now with that let's add sequel lite by running Expo install Expo

01:17.170 --> 01:24.010
dash sequel lite in our project which will install this into our project here and it will work out of

01:24.010 --> 01:27.250
the box justice before no extra configuration is needed.

01:28.510 --> 01:32.720
And once this installation finished we can start working with sequel light.

01:32.830 --> 01:35.750
Now working with the database involves a couple of things.

01:35.770 --> 01:41.020
For example you need to open a connection to the database and if no database exists yet which is the

01:41.020 --> 01:46.260
case when you first access it in the lifetime of your app it will also create that database.

01:46.450 --> 01:51.070
And after you have that connection to that create the database you can of course run queries against

01:51.070 --> 01:52.090
it.

01:52.090 --> 01:57.310
So for it I'll actually add a helpers folder with a DVD chars file in there which you don't need to

01:57.310 --> 02:03.220
do but I want to have my database logic in there to keep my profiles lean and so that I have one file

02:03.220 --> 02:10.210
where we can see all the database logic now in there we can import sequel IDE from the package and adjust

02:10.290 --> 02:13.810
the import syntax is now a little bit different than 40 other packages.

02:13.980 --> 02:19.320
Instead of importing star as sequel light from this package we install it here with this named import

02:19.320 --> 02:20.300
syntax.

02:20.310 --> 02:22.180
Other than that it's still very similar.

02:22.500 --> 02:25.110
And now we can start using that package here.

02:25.260 --> 02:31.080
Now first of all I'll trade D.B. constant which holds a reference to my database which I get by running

02:31.080 --> 02:34.290
sequel light open database.

02:34.290 --> 02:39.020
And there we pass in a database name which could be places start D.B..

02:39.060 --> 02:43.980
Now what this will do is it will connect to the state base or create the database if it can't find it.

02:44.010 --> 02:48.990
So when we first launched the app and you don't need to do anything else to get access to the database

02:49.080 --> 02:50.370
so that's very trivial.

02:50.380 --> 02:55.110
Notice code land will be executed whenever we execute this file which effectively happens when we first

02:55.170 --> 02:57.870
import this file anywhere.

02:57.990 --> 03:04.320
Now all of the want to add init function years stored in a constant which are due to initialize this

03:04.320 --> 03:08.890
database and I'll export this function as a named export.

03:08.910 --> 03:15.300
Now in this function I want to make sure that we create a basic table because sequel databases work

03:15.300 --> 03:21.450
with tables which hold your records and records are basically the rows of data you add to your table.

03:21.450 --> 03:27.420
Now initially when we create the database it's empty but in order to store places we need a table that

03:27.420 --> 03:29.200
can hold these places.

03:29.220 --> 03:35.190
So I want to have an initialization function here which will actually create that table if it doesn't

03:35.190 --> 03:35.900
exist yet.

03:36.690 --> 03:44.780
So there I can use my DP constant which points at that database and run transaction no transactions

03:44.790 --> 03:50.220
a method offered by the sequel aid package on the database and you'll find all of that in the official

03:50.220 --> 03:51.560
docs of course.

03:51.780 --> 03:57.570
And this transaction effort takes a function as an argument which gives you access to the transaction

03:57.660 --> 03:59.620
object it creates for you.

03:59.750 --> 04:06.870
The concept of transactions simply is a concept where is a package in the end then guarantees that your

04:06.870 --> 04:13.200
query is always executed as a whole and that if some part of the query should fail the entire query

04:13.200 --> 04:17.340
is rolled back so that you can't end up with corrupted data in your database.

04:17.340 --> 04:21.670
That's why you actually wrap every query into such a transaction.

04:21.750 --> 04:26.760
So this creates a transaction or initialize as a transaction and then gives you access to this transaction

04:26.790 --> 04:30.830
object here in this function which will be executed for you.

04:30.840 --> 04:37.890
So in here we can now use this transaction object to execute a sequel query with the help of the execute

04:37.890 --> 04:39.450
sequel method.

04:39.450 --> 04:48.260
Again that's also documented here so execute sequel now takes a string which describes your sequel query

04:48.530 --> 04:52.500
and that's the part where you can dive into that sequel dark.

04:52.520 --> 04:57.450
I mentioned earlier where you can learn all about the sequel language.

04:57.560 --> 05:02.840
Now I want to create a table here which we do with the create table command and you don't need to write

05:02.870 --> 05:03.980
this an opera case.

05:03.980 --> 05:11.600
I just do this to make it clear that these are standard commands built into the sequel language and

05:11.600 --> 05:12.590
I want to create the table.

05:12.590 --> 05:19.130
If it doesn't exist which we do we have to if not exists restriction here and now the name of the table

05:19.130 --> 05:20.750
will be places lowercase.

05:20.750 --> 05:22.830
Now that's my own dynamic thing.

05:22.820 --> 05:23.300
You're right.

05:23.360 --> 05:28.760
I want to name it places and now between parentheses you configure what's in the table and thereafter

05:28.760 --> 05:31.110
you can add a semicolon.

05:31.130 --> 05:35.420
So now we define a different feel to want to have in that table the different columns.

05:35.450 --> 05:42.380
So to say I want to have a I D column and I will set this up to B of type Integer which is one of the

05:42.380 --> 05:44.660
support data types and sequel.

05:44.660 --> 05:50.360
And it will be a primary key which means it will also be forced to be unique.

05:50.360 --> 05:55.400
You can't have the same idea twice in there and it will order generate that idea for you which is very

05:55.400 --> 05:57.880
convenient and it should not be now.

05:57.890 --> 06:03.680
So adding empty value there will not be allowed now with a comma.

06:03.680 --> 06:08.030
We can add the next column we want to have and that will be my title.

06:08.030 --> 06:14.460
Now the title should be of type text and you can also add not null there if you want to.

06:14.670 --> 06:17.200
All my data should not be null actually.

06:17.670 --> 06:22.860
Now besides the title I also want to have the image you are either stored in there and that's all the

06:22.860 --> 06:24.110
text which is not now.

06:24.120 --> 06:28.950
It's text of course and not a file or anything like that because we're not storing the file in the database

06:29.220 --> 06:34.020
we're storing the path to the file in the database which is a string and now is something else we'll

06:34.020 --> 06:40.530
need later which are also already one to set up is my address which is a text that should be a string

06:40.530 --> 06:47.760
which describes the address of the place and a latitude field or just let which is a real which is a

06:47.760 --> 06:54.990
floating point number in the end and the long etude your abbreviated with LNG which is also real.

06:55.050 --> 06:56.330
And these are all not null.

06:56.340 --> 07:03.090
Now we're not fetching the location yet but we'll do so later and we'll express a location as a combination

07:03.090 --> 07:10.080
of latitude and longitude which is the standard way of expressing points on the world.

07:10.110 --> 07:14.150
So this creates such a table now if it doesn't exist already.

07:14.150 --> 07:20.130
Now the execute sequel method also takes a second argument which is an array of arguments which will

07:20.130 --> 07:22.500
come into play later which we don't need yet.

07:22.590 --> 07:26.850
These would be dynamic arguments you can inject into this query but we don't need that here.

07:27.120 --> 07:33.810
And then we have two functions here as argument number three and for the first function which we pass

07:33.810 --> 07:35.790
in is a success function.

07:36.000 --> 07:38.940
This executes if this command succeeded.

07:38.940 --> 07:43.140
The second argument is the arrow function which executes if this failed.

07:43.200 --> 07:48.930
Now the first argument to each function here and these functions are executed on your behalf by the

07:48.930 --> 07:50.510
sequel package of course.

07:50.520 --> 07:54.990
So these functions always as a first argument get basically the query you executed.

07:55.140 --> 07:59.490
And by adding an underscore as a name here I signaled that I don't care about this but I'm interested

07:59.490 --> 08:01.740
in the second argument and here this would be my error.

08:01.740 --> 08:10.130
Object and now to make this usable in an easy way I will actually wrap this into a custom promise.

08:10.170 --> 08:17.100
So here all create a promise by using new promise promises built into javascript and supported by the

08:17.100 --> 08:23.820
javascript version Raich native uses and promise takes a function which takes a resolve in the reject

08:23.910 --> 08:25.290
function as an argument.

08:25.800 --> 08:32.190
And now we can move this data based transaction code in there and then the success case I call resolve

08:32.220 --> 08:37.200
which means that the outer promise will be resolved in the Arab case I called reject and forward my

08:37.200 --> 08:41.220
error here and then I can return to promise here.

08:41.220 --> 08:47.400
Overall in my init method and now I can call the init method from other places in the app and I get

08:47.400 --> 08:52.220
back a promise that will resolve if we were successful in initializing the database.

08:52.230 --> 08:58.440
So in creating the table or if we faced an error by the way if no table is created because it already

08:58.440 --> 09:06.680
exists will not get an error but we'll still end up in a success case so with this we're still not storing

09:06.680 --> 09:10.100
anything in the database but we're setting up the database.

09:10.100 --> 09:15.260
So now let's make sure we call in it and of course the place to call it is the aptly us file because

09:15.260 --> 09:18.060
we want to initialize the database as soon as possible.

09:18.140 --> 09:25.700
When our app starts up so I'll import something from my helpers folder there from the database file

09:25.700 --> 09:30.620
in there and that's something unsurprisingly used in that function and therefore here when this app

09:30.750 --> 09:37.550
is filed executes when we alternate initialize the redux threads on I want to call init here and now

09:37.550 --> 09:45.380
in it deceiver successful or not so for now I'll just add a then block where I say console log initialized

09:45.770 --> 09:46.520
database.

09:46.550 --> 09:54.200
So that's the success case or a catch block where we get a potential error where a console log initializing

09:54.230 --> 10:03.610
D.B. failed and where it then also console log the error we got and if we now save this you should see

10:04.000 --> 10:09.880
here in the log initialized database which is the output from the iPhone and now that it's started on

10:09.880 --> 10:11.920
Android you see it there for Android too.

10:12.070 --> 10:18.610
So that works and now we got a database initialized time to now also add more methods to make sure we

10:18.610 --> 10:21.820
can also insert data and later also of course fetch data.
