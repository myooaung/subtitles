WEBVTT

00:02.230 --> 00:05.340
So what we want to achieve is a responsive design,

00:05.590 --> 00:13.080
we want a design that allows us to adjust our layout to different device width and heights

00:13.150 --> 00:19.720
and one thing we always have to keep in mind when developing a react native app is that by default, we got

00:19.720 --> 00:20.970
no scroll view,

00:21.160 --> 00:26.830
so if our content would overlap the edges of our window, then we just lose it,

00:26.830 --> 00:27.910
we can't go there,

00:27.910 --> 00:31.300
no scrolling bars are added automatically.

00:31.300 --> 00:32.830
So how can we deal with that?

00:33.830 --> 00:40.040
Just as we have the platform API for finding out on which platform we're running, we get the dimensions

00:40.040 --> 00:48.060
API for finding out which dimensions our current window has, there we get two useful tools.

00:48.080 --> 00:51.090
The first is a method, the get method.

00:51.220 --> 00:56.760
With that we can get the current dimensions, we can get it for the window or the screen,

00:56.900 --> 00:59.120
most of the time we're going to use the window,

00:59.270 --> 01:01.950
the difference exists on Android, there

01:01.970 --> 01:04.930
the window does not include the soft menu bar,

01:04.940 --> 01:11.300
the screen does but since the soft menu bar would also overlap our content, we typically want to get

01:11.300 --> 01:13.490
the window which doesn't include that.

01:14.090 --> 01:19.790
So this is very useful for getting our current width and height and adjusting our layout,

01:20.120 --> 01:26.810
however to do that at runtime when the user rotates the device, we need to be able to detect when our

01:26.930 --> 01:31.030
window width and height changes because with get, we can get it

01:31.070 --> 01:36.970
but getting it at the startup time of our app would not suffice. If the user starts in portrait mode,

01:36.980 --> 01:42.240
we get a certain width but that width will be incorrect once user rotates the device,

01:42.410 --> 01:48.550
therefore the dimensions API offers a second tool. We can listen to dimension changes,

01:48.560 --> 01:54.620
so for example when the user rotates the device, that's actually the main source of dimension changes

01:54.680 --> 01:55.700
on a mobile phone

01:55.730 --> 01:58.900
since you can't really shrink the viewport.

01:59.100 --> 02:05.490
So if this happens, we can execute some code and we simply add an event listener to the change event

02:05.660 --> 02:11.670
on the dimensions API to get informed when that happens and then we can execute code to for example

02:11.700 --> 02:14.310
change some layout, change some styling.

02:14.850 --> 02:17.710
Let me show you how this works in our application.
