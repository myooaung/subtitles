WEBVTT

00:02.340 --> 00:07.490
So we want to make sure that when the user clicks this locate me button, we automatically locate him,

00:07.790 --> 00:14.730
so instead of throwing an unuseful alert, let's instead execute a method here which will do just that.

00:14.900 --> 00:19.840
So I'm going to add this method here, I'll name it get location handler,

00:20.270 --> 00:22.290
don't need an argument here

00:22.730 --> 00:32.150
and in this method, we now can access navigator geolocation get current position, now that might look strange

00:32.150 --> 00:38.210
because navigator if we were to use react for the web, would refer to the browser.

00:38.570 --> 00:44.150
Now keep in mind that the javascript environment we're using here in a react native app is in the

00:44.150 --> 00:49.490
end created by react native and the features we can use in there is also defined by the features

00:49.490 --> 00:56.570
react native exposes us and they expose us access to this geolocation object and this method on this

00:56.570 --> 00:58.700
navigator object in javascript,

00:58.730 --> 01:01.190
that's just how that works.

01:01.190 --> 01:06.530
Therefore we can conveniently fetch the location like this though we will not use any browser feature

01:06.530 --> 01:07.050
here,

01:07.130 --> 01:14.000
we will really just use the native device capabilities of getting a user position. So get current position

01:14.000 --> 01:19.500
will be executed and it will then or it takes two arguments,

01:19.550 --> 01:21.840
the first is a success function,

01:21.860 --> 01:27.500
so our function which is executed when we successfully fetched the position and the second is an

01:27.500 --> 01:33.390
arrow function which will be executed if the fetching of a position failed.

01:33.440 --> 01:37.130
You can also add a third argument where you can define some options,

01:37.160 --> 01:39.830
you can already see them here like the preview, like the timeout,

01:39.830 --> 01:42.970
how long should it take to fetch the position before it fails

01:43.130 --> 01:44.190
and so on.

01:44.600 --> 01:50.810
So what I'll do here is I'll provide the first method where we get the position,

01:50.810 --> 01:54.970
so if we did succeed and then we can do something with that,

01:55.010 --> 02:01.220
I'll also add the second argument already, where we get an error and then we can do something with that

02:01.220 --> 02:01.780
error,

02:01.880 --> 02:07.730
first of all for example log it to the console so that we can see what went wrong. I will then also throw

02:07.730 --> 02:11.770
an alert where I say fetching the position failed,

02:11.780 --> 02:17.360
please pick one manually so that we give the user some feedback on how to solve this issue.

02:19.520 --> 02:21.360
Inside position here,

02:21.530 --> 02:23.900
I then want to use this position of course

02:24.200 --> 02:31.400
and what we can do is we can just call our pick location handler, the one we used for manually clicking

02:31.430 --> 02:34.820
on the map because there, we essentially get everything we need,

02:34.940 --> 02:39.250
we navigate to this new position and we set the state.

02:39.290 --> 02:45.590
The only thing we need to do to really be able to reuse this, we need to pass some things, some object where

02:45.590 --> 02:50.110
we have the native event property which then holds a coordinate property.

02:50.120 --> 02:52.680
So what I'll do inside here is just that,

02:53.090 --> 03:00.570
I'll create my coords event, should be a javascript object which has a native event property

03:00.650 --> 03:05.670
and this again is really just set up like this to be able to conveniently reuse pick location handler,

03:05.810 --> 03:12.650
you could also just copy that code into get location handler and exchange the parts accordingly.

03:12.920 --> 03:18.680
But here I'm trying to reuse the old code, so I'm creating this event object manually with native event

03:18.740 --> 03:19.350
in there

03:19.370 --> 03:21.950
so that here, this access doesn't fail

03:22.190 --> 03:24.440
and then we need a coordinate object in there,

03:24.560 --> 03:30.120
so this should be another javascript object where we have coordinate and coordinate that on the other

03:30.120 --> 03:36.420
hand as you can see we access latitude and longitude, you should have latitude and longitude properties,

03:36.440 --> 03:40.580
so I'll add a latitude here and I'll add a longitude here.

03:40.760 --> 03:47.330
Now the values of these two arguments can be retrieved from the position object we're getting here,

03:48.750 --> 03:56.460
so let's assign a latitude, there we can access position coords, there is a coords object in there and

03:56.460 --> 04:06.720
there, the latitude and the same for the longitude pos coords longitude. With that we got our manual

04:06.750 --> 04:09.580
or did this custom event created,

04:09.600 --> 04:17.040
we can now pass this on and we can call this pick location handler executed mainly and pass on our coords

04:17.040 --> 04:24.050
event so that the code we already wrote will also work when we manually fetch a location.

04:24.060 --> 04:30.420
Now that's all nice but we need to do something super important before this will work. When trying to

04:30.420 --> 04:32.210
fetch the user location,

04:32.310 --> 04:36.200
we actually need to get the permission of the user to do that,

04:36.330 --> 04:38.750
so we need to ask him for this permission.

04:38.910 --> 04:44.280
Now the asking thing will be done automatically but for that, we need to set up our application to be

04:44.280 --> 04:46.200
prepared to ask this,

04:46.620 --> 04:53.250
so we need to go for Android into the Android folder and there under app source into the Android manifest

04:53.410 --> 04:54.610
XML file

04:54.810 --> 04:58.590
and there you get these users permissions elements.

04:58.590 --> 05:01.460
Now there you simply have to add every new permission

05:01.470 --> 05:03.450
your app will eventually use,

05:03.700 --> 05:06.650
so I'll add users permission here,

05:06.750 --> 05:17.380
then you add Android name, just like you see it for the other permissions there and then it's Android permission

05:17.740 --> 05:27.250
and now the permission we need here to access the location is access, all uppercase, ACCESS_FINE_LOCATION,

05:27.250 --> 05:34.860
with underscores between the names, ACCESS_FINE_LOCATION. Make sure that you also close this tag here like

05:34.890 --> 05:39.850
this and with that, we added the request for Android,

05:40.020 --> 05:43.950
now let's also do it for iOS. For iOS,

05:43.950 --> 05:48.380
you need to go into the Xcode and then into the info plist file,

05:50.370 --> 05:57.750
there you simply click on information property list, add a row and then you can type privacy and you

05:57.750 --> 05:59.350
get a couple of options here,

06:00.960 --> 06:05.420
there you should add the privacy location usage descriptor.

06:05.430 --> 06:12.110
This is the text which will be displayed to the user when you try to get the location, here I'll add let's share

06:12.200 --> 06:13.180
a place.

06:14.180 --> 06:15.910
Now make sure to save this

06:15.980 --> 06:21.780
and since you edited the configuration of both items, make sure to rerun npm run Android and thereafter,

06:21.800 --> 06:24.680
also npm run ios.

06:24.720 --> 06:26.100
So both were rebuilt,

06:26.100 --> 06:30.100
we can now go back to the application, in case one of them hangs,

06:30.150 --> 06:37.080
most of the time it's the Android one, that's just because we had this rebuild step, simply uninstall the app

06:37.080 --> 06:43.110
in this case as always and then just rerun npm run Android and then you should have both up and

06:43.110 --> 06:45.420
running after a little while.

06:45.450 --> 06:50.460
Now before we can do anything let's go back to pick location though, let's make sure that we hook up

06:50.490 --> 06:52.730
our get location handler.

06:52.740 --> 07:00.040
So there in our jsx code where we have the button locate me, let's replace the dummy code we have

07:00.040 --> 07:00.780
it in there instead

07:00.780 --> 07:05.520
call this get location handler. With that, if you save that,

07:05.520 --> 07:07.570
make sure to reload both apps and

07:07.590 --> 07:16.170
now let's try it on iOS. I'll log in, share my place and I'll click locate me and then you see I'm asked if

07:16.170 --> 07:21.990
I want to do this so I'm clicking allow here and it takes me to my position which and I will say that, on

07:21.990 --> 07:24.180
the simulator is not my real location,

07:24.240 --> 07:27.520
so don't be confused that this is still in San Francisco,

07:27.660 --> 07:29.820
this is some dummy default location,

07:29.880 --> 07:33.300
you saw that we navigated there though so that it animated there.

07:33.390 --> 07:35.520
So picking that does really work,

07:35.520 --> 07:40.950
it's just not using your real position because it's not that closely connected to your machine.

07:40.950 --> 07:45.690
Let's also try that on iOS and there,

07:45.690 --> 07:49.380
we will also get a dummy location, I can already tell you that.

07:49.410 --> 07:55.490
So there, if you click on locate me, now we're taken to the Googleplex.

07:55.490 --> 08:00.560
Now if you're getting an error here, maybe with the message that you timed out, go to the settings of

08:00.590 --> 08:06.860
your emulator by clicking on these three dots and there on settings and make sure to not use detected

08:06.900 --> 08:10.150
adb location, it might have been turned true on,

08:10.160 --> 08:13.520
turn it off and use the dummy location you get here.

08:13.550 --> 08:18.060
If you run this on a real device, you will of course get your location.

08:18.080 --> 08:24.590
So with that, we got this set up and now we can fetch the location through the locate me button you on both

08:24.650 --> 08:26.320
iOS and Android

08:26.390 --> 08:28.910
and as you see, we nicely animate there.
