WEBVTT

00:02.290 --> 00:04.510
We got a kind of a responsive design working,

00:04.540 --> 00:08.360
we can rotate the device and it adjusts here on the auth screen,

00:08.380 --> 00:09.930
that's great.

00:09.940 --> 00:17.770
Now we can improve this set up though, one thing we're doing here is we're managing our responsiveness, our

00:17.770 --> 00:21.550
styles in the state of our component, that is possible

00:21.580 --> 00:26.120
and there might be situations where this is the best way to do it.

00:26.170 --> 00:34.210
The downside of this is that we miss the optimisations the stylesheet does for us, if we use stylesheet create

00:34.300 --> 00:41.710
as I showed on a slide earlier in this module, it will store and compile these styles more efficiently.

00:41.710 --> 00:44.690
Chances are it doesn't make that much of a difference here

00:44.990 --> 00:51.760
but what we could do as an alternative approach is we could simply define two different rules here in

00:51.760 --> 00:58.810
the stylesheet and just load the different rules in our template depending on the orientation.

00:58.810 --> 01:08.470
So what I mean is the following, we could change password container to landscape password container

01:09.600 --> 01:15.990
and then set it to row because in landscape mode, we want to use flex direction row and space between

01:15.990 --> 01:17.010
here,

01:17.250 --> 01:24.530
then we duplicate this, add another property which we name portrait password container

01:24.540 --> 01:32.820
for example, there we set flex direction column and this justify content to flex start. The same

01:32.820 --> 01:33.970
for the wrapper,

01:34.200 --> 01:44.980
we rename this to landscape password wrapper in which case we take 45% width but then we

01:45.040 --> 01:54.310
duplicate this to also add the portrait password wrapper where we set this to 100%.

01:54.450 --> 01:56.210
So now we get the styles defined here,

01:56.220 --> 02:02.960
we can therefore take advantage of the stylesheet optimizations and we don't have to manage the styles

02:02.970 --> 02:04.210
in our state,

02:04.470 --> 02:12.840
we just have to manage the mode, so we could set a view mode here which we can calculate initially with

02:12.840 --> 02:14.250
the dimensions API,

02:14.280 --> 02:22.420
so we can get the window here and then get the height and if that's greater than 500, we can set it to

02:22.500 --> 02:29.010
portrait for example and you can finetune this of course to find the perfect height, cutoff and otherwise

02:29.010 --> 02:33.010
we set it to landscape.

02:33.080 --> 02:40.750
And now whenever the dimensions change, we just set this view mode and not the responsive

02:40.760 --> 02:41.910
style anymore

02:42.380 --> 02:44.820
and we set the view mode to exactly that,

02:44.870 --> 02:46.240
what we set it here to,

02:46.280 --> 02:52.700
so we keep that logic, we just need to re-execute it whenever this changes because this up here won't dynamically

02:52.700 --> 02:53.740
change the state,

02:53.810 --> 02:56.940
it will just do this when we initialize it. Here,

02:56.990 --> 03:00.030
we'll set the state to the new view mode.

03:00.520 --> 03:08.570
Now all we have to do in our jsx code is to respect and use that view mode, so we can do this here where

03:08.570 --> 03:11.990
we decide where we want to render heading text or not,

03:12.140 --> 03:20.960
we can simply check if this state view mode is equal to portrait because only if it is, we want to render

03:20.960 --> 03:29.370
this heading text and we switch between portrait and landscape in our logic here and we do the same

03:29.370 --> 03:31.990
for our content here,

03:32.100 --> 03:39.390
so for our wrapper for example. Here we want to set some style and we will use the stylesheet but we'll

03:39.390 --> 03:41.490
use this state view mode

03:41.720 --> 03:49.750
and if it's equal to portrait, then I will use styles portrait password container

03:49.750 --> 03:53.780
otherwise it's styles landscape password container

03:53.810 --> 03:56.200
and I'll quickly reformat this over multiple lines,

03:56.230 --> 04:02.410
so this is the check for the first view. And then the view which wraps the individual input,

04:02.410 --> 04:04.550
there I'll use an equal approach,

04:04.570 --> 04:18.060
I'll check if this state view mode is equal to portrait and if it is, I will set styles portrait password

04:18.060 --> 04:19.050
wrapper

04:19.260 --> 04:21.100
and otherwise it's styles

04:21.130 --> 04:26.480
landscape password wrapper and also distribute this over multiple lines.

04:27.270 --> 04:34.320
And then I can copy this and also add it or replace the code on the second view which wraps the second

04:34.500 --> 04:38.130
input, whoops, need to remove

04:38.130 --> 04:45.840
style here too. With that if we now save this and we reload our application on both devices,

04:48.390 --> 04:53.180
if we rotate it on Android, it still adjusts as it should

04:53.370 --> 04:57.450
and the same on iOS but now it's a little bit more efficient.

04:57.690 --> 05:03.240
It's quite verbose with this double rule definition out there but that's just how it is if you develop

05:03.270 --> 05:09.390
cross-platform but we use the advantages of the stylesheet to dynamically switch the styles we want

05:09.390 --> 05:10.470
to apply.

05:10.560 --> 05:14.630
And with that, we get a responsive design for our auth screen.
