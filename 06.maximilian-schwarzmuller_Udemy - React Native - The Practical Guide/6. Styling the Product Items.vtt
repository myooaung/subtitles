WEBVTT

00:02.200 --> 00:08.590
So let's make sure that our product items on the product overview screen look a bit nicer than they're

00:08.620 --> 00:11.860
currently looking right now of course.

00:11.860 --> 00:16.520
Every product item is just rendered as a text as a text component.

00:16.540 --> 00:22.090
That's not what I want here instead I'll remove that import and I'll create a brand new component that

00:22.090 --> 00:24.970
should be responsible for my product item.

00:25.060 --> 00:31.540
Now one important note regarding where we create that component we can create it here in the product

00:31.560 --> 00:35.510
or review Jay as follows well we can of course have more than one component profile.

00:35.530 --> 00:41.890
So here I could add my product item component or whoever you want to call it like this.

00:41.890 --> 00:47.250
Then we can use this component in this file which is of course what I plan to do.

00:47.290 --> 00:52.870
This is a pattern you can use if you have a component that's really strongly tied to a number of components

00:53.080 --> 00:57.070
and you're only splitting it so that each component is a bit more readable.

00:57.370 --> 01:03.160
Once these separate components get very big you should still consider splitting them into separate files

01:03.190 --> 01:08.350
though so that your files stay small and if people want to have a look at one of the two components

01:08.350 --> 01:12.700
that don't have to scroll over you the average component they might not be interested in.

01:12.820 --> 01:18.730
So that's one thing to keep in mind of course if you also plan on using a component in yet another component

01:19.150 --> 01:25.990
you should always store it in a separate file not only so that you can export it as a default because

01:25.990 --> 01:29.950
you could always export this if it's stored along with another component that's not the main reason

01:30.520 --> 01:36.550
but mostly to make it really clear that this is a standalone component that might and will be used in

01:36.550 --> 01:38.310
different parts of your app.

01:38.350 --> 01:45.550
Now the product item here will not only be not super small which on its own would be a reason to put

01:45.550 --> 01:51.460
it into a separate file but I will also use it in a different component later or in different places

01:51.460 --> 01:57.970
of the app it's not just relevant to the products overview screen and therefore I'll add it in the components

01:57.970 --> 02:04.030
folder and in that components folder to kind of organize my components a little bit I'll add a shop

02:04.120 --> 02:10.300
sub folder where I want to place all the components that are directly related to the shop feature or

02:10.300 --> 02:12.950
two features in general of my app.

02:13.090 --> 02:19.390
So in there in the shop sub folder I'll add this product item J.S. file and you'll see which of the

02:19.390 --> 02:21.540
folders I will add here later.

02:21.550 --> 02:27.640
Now again all these patterns and practices I'm showing you here are just possible ways of doing this

02:28.360 --> 02:34.480
in general in my courses and in this course to a show all the best practices you can use but often programming

02:34.480 --> 02:37.270
there is not just a single right or wrong way.

02:37.390 --> 02:43.180
So the practices and patterns I'm showing here are practices and patterns you'll see in other projects

02:43.180 --> 02:48.670
too but you might also see our folder structures in the end you can always work with the structure that

02:48.670 --> 02:55.480
works for you there isn't a right or wrong choice here I just want to explain my reasoning for using

02:55.480 --> 03:00.910
this structure which hopefully helps you understand why I use it and why this might be worth a thought

03:01.900 --> 03:10.960
so here the product item filed the item jazz file of course will hold the product item component which

03:10.960 --> 03:16.110
is a normal functional component that receives props and in the end will return J has X code and therefore

03:16.120 --> 03:22.750
since it holds J has X code we need to import react from react and in here are all the import things

03:23.170 --> 03:30.070
from React Native because here I'll now work with D React Native primitives to really build my component

03:30.520 --> 03:34.930
because from there I'll need to view I'll need the text I always want to use the image because will

03:34.930 --> 03:42.310
display the product image here and also the style sheet because we'll definitely also style this hands

03:42.310 --> 03:48.190
you can always already add a stylus constant here which we create with style sheet create 2 which we

03:48.190 --> 03:56.170
pass a javascript object and in the end we export this product item here as a default of course now

03:56.170 --> 04:02.350
in here in this component I mean we can start creating the j as X coat it makes up product item and

04:02.350 --> 04:08.500
this will be a presentational component which means there won't be any logic in here we won't manage

04:08.530 --> 04:14.630
any internal state this will just be a component we can use an average components to get the right styling

04:14.630 --> 04:21.250
a layout out of the box so this component here will be responsible for using certain React Native components

04:21.400 --> 04:28.090
and laying them out and starting them in a certain way so in here in the end want to return a View which

04:28.090 --> 04:34.150
wraps everything which organizes everything which we can also style to get this card look with maybe

04:34.150 --> 04:42.100
a drop shadow maybe rounded corners whatever you want and in there would now have different parts for

04:42.100 --> 04:50.460
example we'll definitely have the image in their product image I also want to have the title and the

04:50.460 --> 04:53.480
price so we'll need some text in here.

04:53.700 --> 05:04.630
So for the title here and here and the forward price and dollars and below that I also want to have

05:05.200 --> 05:07.650
a view with with buttons.

05:07.650 --> 05:14.680
So here we can use the built in button component for the moment where we can then add a product to the

05:14.680 --> 05:22.120
cart or all of you the details so where we have these two options basically and of course we'll need

05:22.120 --> 05:26.760
to add on press handlers here so that's the very basic skeleton.

05:26.770 --> 05:30.880
Probably not the final one we'll have to see how we can style everything here.

05:30.930 --> 05:32.390
That's the layout I want.

05:32.500 --> 05:37.460
I wrap my buttons here into view by the way because I want to have them side by side in the row.

05:37.510 --> 05:43.030
And by having a view around them we can style that view was such that it uses flex directed row and

05:43.040 --> 05:43.960
so on.

05:43.990 --> 05:45.040
That's a setup.

05:45.040 --> 05:47.320
We we can work with here.

05:47.440 --> 05:49.850
Now let's add some styling.

05:49.960 --> 05:53.980
And for that I want to use we're a start here on the surrounding view.

05:53.980 --> 05:59.980
Right set up styles product like this for a year in the style sheet.

05:59.980 --> 06:03.900
I add product like that ad by product key here.

06:04.020 --> 06:07.200
And of course now again it's totally up to you how you want to styles.

06:07.210 --> 06:17.650
I want to have that Kaj look so the offer I'll add a shadow shadow color which can be black shadow opacity

06:17.650 --> 06:27.580
which can be zeroed out to six a shadow offset where I have the width of set of zero and the height

06:27.610 --> 06:32.080
offset off to and to shed a radius of eight maybe.

06:32.080 --> 06:36.490
And as always play around with these values to find your configuration.

06:36.490 --> 06:39.320
Now you might remember that shadow only works and I was.

06:39.340 --> 06:45.670
So for Android all at the elevation property year and sets to five maybe again you can experiment with

06:45.670 --> 06:48.070
different values there as well.

06:48.160 --> 06:52.500
And I want to have a board a radius of 10 because I want rounded corners.

06:52.510 --> 06:54.250
And again that's something I want here.

06:54.250 --> 07:00.400
Some of you don't have to do all that the background color of white to make sure that our card here

07:00.430 --> 07:05.290
our product always has this background color even if our main apps should use a different background

07:05.290 --> 07:14.190
color later so that's my my product My wrapper here around the entire product I additionally also want

07:14.190 --> 07:16.920
to set up my height here.

07:16.920 --> 07:21.750
Every product should have a height of 300 pixels and of course that is a value you can also tweak to

07:21.750 --> 07:22.670
your requirements.

07:22.740 --> 07:28.050
You could of course also make this dynamic with the dimensions API as I learned it in the responsive

07:28.050 --> 07:34.830
module and I'll add a margin of 20 in all directions around every product item so that we have a spacing

07:34.860 --> 07:42.070
in all directions with this setup we can start working on outputting something.

07:42.230 --> 07:47.330
So the image needs a source and will get a network image here because if you have a look at the dummy

07:47.330 --> 07:52.940
data all these image you are L's here are well you are else that's all what we have in the model we

07:52.940 --> 07:54.260
expect a U or L here.

07:54.290 --> 07:59.480
So to a network image and that would be the devil of course for any shop you built because you'll never

07:59.480 --> 08:06.740
include all the product images into your app at least if it's not some in the app shop for a game but

08:06.740 --> 08:09.070
if it's a shop where people can create products.

08:09.110 --> 08:14.070
Obviously people will create products dynamically after your app was distributed.

08:14.240 --> 08:20.300
So it's impossible for you to include all images into your app instead they have to be stored on a server

08:21.450 --> 08:26.740
so therefore here we need to pass the object to source where we set the you or I property.

08:26.910 --> 08:32.120
And that will now be received from outside because this product item component is presentational.

08:32.130 --> 08:38.060
So any data to display needs to be passed in through props and video we could expect the image prompt

08:38.070 --> 08:40.680
but ask for all the props in your own components.

08:40.680 --> 08:47.610
You can pick any names you want for a title I expect to get a title prop and for the price I expect

08:47.610 --> 08:52.740
to get a price prop I'll keep the dollar sign here by the way because price will just be a number and

08:52.740 --> 08:55.210
of course I won't have a dollar sign in front of this.

08:55.350 --> 09:02.640
Now one little note here I want to make sure that the price I get always has exactly two decimal places

09:03.020 --> 09:10.520
and we can achieve this by calling to fixed on this and passing in a two to fixed as a function of whale

09:10.560 --> 09:17.940
on numbers in JavaScript which converts this to basically a string with a fixed amount of decimal places

09:17.940 --> 09:21.870
in here I restrict us to always be two decimal places.

09:21.870 --> 09:23.210
That's normal javascript.

09:23.280 --> 09:34.310
Nothing specific to react native now when we pressed a few details button then I will trigger props

09:34.400 --> 09:41.960
on view detail so I again use a name here which you can configure or name whoever you want but the idea

09:41.960 --> 09:47.240
here is that props on you detail points at a function which in the end is executed when this button

09:47.240 --> 09:51.220
is pressed and therefore here if this button.

09:51.230 --> 09:58.900
The card buttons pressed I'll point on to a function which I expect to get on the on Add To Cart prop

09:58.940 --> 09:59.300
again.

09:59.540 --> 10:03.650
You can name these props whatever you want but when you use your component you have to make sure they

10:03.740 --> 10:10.370
are available and that they get values which are functions which then are triggered through these buttons.

10:10.370 --> 10:14.300
Now we're getting all the data now for the image since this is a network image.

10:14.420 --> 10:21.440
We need to set up the width and height because the image can't see that in advance as it could do it

10:21.440 --> 10:24.600
for a local image it can't do this for a network image.

10:24.620 --> 10:31.810
So here I'll point at Styles dot image and I'll add this image key to my style sheet there for now.

10:31.820 --> 10:37.790
Again it's generally up to you how you style this but all set this to have the width of let's say 60

10:37.790 --> 10:38.750
percent.

10:38.750 --> 10:46.580
Keep in mind that the overall product has a height of sorry a width of 100 percent but a height of 60

10:46.580 --> 10:52.730
percent because the overall product item here has a height of 300 and I won't have the image in there

10:53.000 --> 10:58.520
that should all take up the majority of the height but I also have the title and the prize and my buttons

10:58.520 --> 10:59.920
and you should all fit in there.

11:00.020 --> 11:02.240
So I'll give the image 60 percent of the height.

11:02.360 --> 11:10.560
So did the of things here can split the remaining 40 percent amongst them so with that that's the image.

11:10.560 --> 11:16.230
Now of course the image isn't everything we have here we also do have well our title we do have our

11:16.230 --> 11:18.800
price and I want to style that as well.

11:18.840 --> 11:24.980
So for the title I'll add the title style here and for the price I'll add.

11:25.080 --> 11:32.490
Let's say a price style and here for these buttons I'll also add a style to the surrounding view and

11:32.490 --> 11:41.020
I'll name this actions and of course all these style names as always are totally up to you here.

11:41.050 --> 11:54.860
I want to add mine my title and well the price and d actions property to my style shoot here and now

11:54.860 --> 11:59.900
for the title you can of course style this in whatever way you want.

11:59.910 --> 12:01.970
We have no custom funds here.

12:02.070 --> 12:05.430
I will add some soon but for the moment I'll go.

12:05.610 --> 12:11.610
Just ignore that and just start with a fun size of 18 and I want to add a margin vertical so top and

12:11.610 --> 12:21.570
bottom of free so we're 4 so very small margin but still some margin around this title for the price

12:21.840 --> 12:30.490
I'll set a fun size of 14 so a bit smaller and I'll also give us a color which should be maybe 8 8 8

12:30.530 --> 12:34.380
which is like a grayish dark ish color.

12:34.380 --> 12:39.760
Now actions is placed on that view which holds the buttons and therefore I want to make sure that the

12:39.760 --> 12:42.450
button sit next to each other so in one row.

12:42.670 --> 12:53.860
So I'll give this flex direction of row here and I will also justified content to have all the remaining

12:53.860 --> 13:02.980
space between them and in addition I want to align items in the center vertically along cross axes which

13:02.980 --> 13:06.910
for a flex direction of row is the vertical axis.

13:06.910 --> 13:08.890
With that we have some basic styling.

13:08.890 --> 13:14.920
Now let's use that component before we refined the set up into styling so the product item component

13:14.920 --> 13:20.110
which we do export here and the product item follow can now be used in the product overview file by

13:20.110 --> 13:22.850
importing product item from there.

13:22.870 --> 13:29.680
Let's point at our components folder there at the shop sub folder and then that product item.

13:29.680 --> 13:35.340
And now this is what I want to use here when I render my items.

13:35.350 --> 13:40.300
Product item can be a self closing component because all the data is received through props and not

13:40.300 --> 13:42.650
between the opening and closing tax.

13:42.670 --> 13:45.340
Now of course we need to set up all the things we expect here.

13:45.340 --> 13:50.700
We expect the image to title the price and our two event handling props here.

13:50.710 --> 13:52.870
So that's what we need to provide now.

13:53.560 --> 13:55.390
Hence your own product item.

13:55.510 --> 14:02.140
I'll start with the image and that of course is item data dot item dot image your L and you always must

14:02.140 --> 14:08.800
remember that item data dot item points as a product as defined in our product model and they are afraid

14:08.800 --> 14:11.910
we'll have a image you are L property written like this.

14:11.920 --> 14:17.980
If you wrote it differently you of course need to access it differently besides the image will all to

14:17.980 --> 14:26.290
have a title which is item data dot item dot title and the size that will have the price with item data

14:26.320 --> 14:28.500
item dot price.

14:28.510 --> 14:35.140
And then we have our two event handlers here because we do have the on view detail prop and the on Add

14:35.140 --> 14:41.470
To Cart prop we need to add so on view detail we'll do something later for now it's just an empty function

14:41.890 --> 14:45.150
and on Add To Cart will also do something later.

14:45.160 --> 14:47.650
For now it can also be an empty function.

14:47.650 --> 14:54.280
This is how our product ideas should be rendered with that if we save this does what you should see.

14:54.320 --> 14:57.850
It's not perfect yet but we're getting there.

14:57.860 --> 15:01.640
This is not too bad actually.

15:01.700 --> 15:07.300
Now of course what you notice is that the buttons are colored in the wrong way that this space isn't

15:07.300 --> 15:12.460
really used in the way it should be was down there that we may be all they want to center this text

15:12.460 --> 15:21.050
but these are of course things we can work on so to refine this back in the product item component here.

15:21.100 --> 15:23.900
Let's start with our two texts here.

15:23.950 --> 15:30.790
They should of course be centered and that can be done in a very simple way by wrapping that with a

15:30.790 --> 15:37.200
view moving these two texts in there giving that view as style.

15:37.250 --> 15:38.830
And of course you can named it however you want.

15:38.840 --> 15:43.930
I'll name it details because we kind of layout the product details there.

15:44.090 --> 15:52.710
So I will add my my details style here to the style sheet and there I'll just set a line items center.

15:52.880 --> 16:00.440
Does uses flex directional column the default and therefore center centers on the cross axis it always

16:00.440 --> 16:04.870
does this but the cross axis for Flex direction column is of course left to right.

16:04.880 --> 16:12.920
So it centers horizontally which is what I want here and I'll also give this a height of 15 percent.

16:12.930 --> 16:16.830
Keep in mind that the image takes 60 percent so we give this maybe 15 percent.

16:16.830 --> 16:21.070
So almost half of the remaining 40 percent not quite half.

16:21.270 --> 16:24.960
And I'll add a little bit of padding here of 10 maybe.

16:24.960 --> 16:31.780
And for the buttons here these are in my actions property there.

16:31.800 --> 16:36.340
I want to set the height to the remaining twenty five percent.

16:36.550 --> 16:41.300
That should be a string of course because we have 60 percent here height.

16:41.460 --> 16:43.360
Then we have 50 percent here.

16:43.450 --> 16:50.860
Hence here I want to keep have the remaining 25 percent and if we now save this does looks way better.

16:50.860 --> 16:54.360
Now some padding to the left and right would all be nice for the buttons.

16:54.370 --> 17:01.810
So on this actions style property I'll add a padding horizontal of 20 maybe so did we have some internal

17:01.810 --> 17:05.230
spacing left or right now to change the color of the buttons.

17:05.290 --> 17:10.540
We can just go to the button components which are built into react native and set the color prop here

17:10.550 --> 17:12.140
two colors.

17:12.170 --> 17:18.250
Would you therefore need to import from the constants folder and from the colors file there and set

17:18.260 --> 17:19.530
distant colors.

17:19.630 --> 17:30.510
Primary also here for the second colored you add to cart button at the second button therefore.

17:30.550 --> 17:32.220
So now we have our buttons here.

17:32.320 --> 17:37.090
Add to Cart and view details and this doesn't look too bad.

17:37.120 --> 17:41.860
The one remaining thing which you might notice is that we don't have rounded corners here at the top.

17:41.860 --> 17:48.280
And the reason for that is that our image basically is like an overlay to our background and the background

17:48.280 --> 17:49.570
is the surrounding view.

17:49.570 --> 17:53.800
The image has no rounded corners and therefore it overlaps our rounded corners.

17:53.800 --> 17:57.350
We have on the surrounding view to fix that.

17:57.520 --> 18:01.200
We can wrap the image into a separate view.

18:01.450 --> 18:05.580
And as I mentioned early on of course it's really normal and react native to have a couple of nested

18:05.580 --> 18:13.480
use because to this view we can now attach a style which we can maybe give an image container identifier

18:14.080 --> 18:20.350
which we can now add to our style sheet and now I'll give this image container my width and height here

18:21.040 --> 18:24.850
and on the image and therefore just add a width and height of 100 percent because it's now inside of

18:24.850 --> 18:25.900
the container.

18:25.950 --> 18:27.500
This here refers to the parent.

18:27.520 --> 18:28.750
So to this container.

18:28.750 --> 18:31.970
So a height of 60 percent will then all be applied to the image.

18:32.110 --> 18:35.200
But on that image container we can now add a border.

18:35.200 --> 18:40.200
Top left radius of ten and a border top right radius of 10.

18:40.210 --> 18:42.020
So we round these corners.

18:42.100 --> 18:48.520
And now important add overflow hidden here because this will ensure that any child in there which is

18:48.520 --> 18:53.400
our image of course can't overlap what we set up here.

18:53.410 --> 18:57.960
So now with this setup we add our rounded corners here back to the top.

18:57.970 --> 19:02.860
And now these are already the image items I want here and of course that's all the scroll the blue list

19:03.070 --> 19:08.110
where you also see that these images are lazy loaded automatically which you can continue working with

19:08.800 --> 19:13.270
of course the next goal could be that we can all to view the details screen.
