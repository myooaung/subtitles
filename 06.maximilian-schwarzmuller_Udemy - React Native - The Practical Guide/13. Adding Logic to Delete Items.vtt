WEBVTT

00:02.100 --> 00:05.460
For the delete button let's again start with the redux logic.

00:05.490 --> 00:11.850
So here in the actions for example we can register a new identifier remove from card sounds like a fitting

00:11.850 --> 00:17.120
name given that we had Add To Cart before so removed from cart.

00:17.110 --> 00:22.710
I'll also again add an action create or function your remove from cart.

00:22.740 --> 00:27.750
This now only needs the I.D. of the product that should be removed.

00:27.750 --> 00:34.260
So only product I.D. And then this returns a new action object where the type of course is removed from

00:34.260 --> 00:40.800
cart and where we have to pit the product I.D. where I forward the product I.D. I'm getting here now

00:40.800 --> 00:44.560
in the reducer we had to add to cart.

00:44.560 --> 00:48.280
Case now we simply need to add a number a case here.

00:50.290 --> 00:53.030
And that case is to remove from card case.

00:53.050 --> 00:57.960
For Dad you need to make sure you're importing the removed from card action identifier from the card.

00:58.000 --> 00:58.990
Actions file

01:01.840 --> 01:03.670
and in the remove from card.

01:03.670 --> 01:07.120
Case here we have two cases again.

01:07.140 --> 01:12.660
One is that we only had one item off that while product in the card.

01:12.660 --> 01:13.900
Like for the blue carpet.

01:13.980 --> 01:16.760
In this case we need to remove it entirely from the card.

01:16.770 --> 01:17.850
Items object.

01:17.850 --> 01:23.400
So from this object and this will therefore then remove it from this row which we all put here.

01:23.400 --> 01:27.870
If we have two or more items then we just want to reduce the quantity by 1.

01:27.870 --> 01:33.120
Of course you could always you raised this item entirely if you want to but I want to show you how you

01:33.120 --> 01:35.450
could differentiate between these two cases.

01:35.490 --> 01:41.130
So actually if we have a quantity hired and one I don't want to erase the item from the card but actually

01:41.130 --> 01:43.870
just reduce the amount by 1.

01:44.100 --> 01:51.210
So therefore it removed from card we have to find out what our quantity is is our current quantity which

01:51.210 --> 01:57.930
I store in this constant can be deducted from our state of course there in the items we have to find

01:57.960 --> 02:00.000
the product we're looking for.

02:00.000 --> 02:04.770
And of course we can do that with the help of the I.D. which is part of our action here in the pit field

02:05.550 --> 02:11.440
because now state items is an object and therefore we can access action dog pit here right.

02:11.450 --> 02:16.680
This will dynamically access the value with the product I.D..

02:16.950 --> 02:18.380
Key here in our item.

02:18.390 --> 02:21.220
So with the product idea we're getting on this action.

02:21.240 --> 02:24.950
This is how we add items to our items object here right.

02:24.960 --> 02:28.890
We use our product I.D. as an identifier.

02:28.920 --> 02:32.410
This is now what I use here to get access to it.

02:32.430 --> 02:36.940
This will have a quantity because this will hold a value which is a product item.

02:36.990 --> 02:41.120
You could of course also add a check whether this item is actually part of the card.

02:41.130 --> 02:46.290
But the way we build this app we should never be able to reach this action without that product being

02:46.290 --> 02:51.690
part of the card because we can only trigger our delete action here from inside the card screen so we

02:51.690 --> 02:55.340
don't need to check here but we definitely need to get the quantity.

02:55.410 --> 03:03.780
Now we can check if current quantity is greater than 1 which means we need to reduce it need to use

03:03.780 --> 03:06.740
it not you raise it out.

03:06.750 --> 03:08.940
We need to erase it.

03:09.090 --> 03:11.790
Now let's start with the erase case.

03:11.850 --> 03:18.900
So here we just need to return a new items object which includes all the old items but doesn't include

03:18.930 --> 03:27.520
this item anymore so we can have our updated card items here where we clone state items like this and

03:27.520 --> 03:36.870
now to remove a property we can use to delete keyword javascript knows and there we can delete updated

03:36.870 --> 03:41.880
cart items for action pit.

03:41.880 --> 03:49.290
So this will delete this item from our copied javascript object here it will delete this item entirely

03:49.290 --> 03:57.020
does product item entirely from our card items object this is how we can erase it now in the other case

03:57.020 --> 03:59.690
that we simply need to reduce it.

04:01.040 --> 04:07.250
I can have my updated card item so that single card item where I create a new card item with the card

04:07.280 --> 04:13.700
item clause and there I want to copy the values of the existing card item but simply reduce the quantity

04:14.220 --> 04:17.910
to card item takes quantity right as the first values sum now here.

04:17.910 --> 04:25.290
The goal is to get access to state items for D product idea get on the actions since repeating those

04:25.290 --> 04:33.450
will be cumbersome all stored in a helper a constant selected card item is this year.

04:33.510 --> 04:37.290
Now we can replace that here with selected card item.

04:37.290 --> 04:41.760
And here I can use selected card item quantity minus one.

04:41.760 --> 04:48.240
Now of course we know that this won't be zero because the quantity was greater than 1 and now we can

04:48.240 --> 04:49.820
keep the rest of the data off course.

04:49.830 --> 04:57.270
So we keep the product price here we keep the product title.

04:57.270 --> 05:00.840
That all doesn't change the sum however of course changes.

05:00.910 --> 05:05.090
That's the sum the old sum minus the price of course.

05:05.100 --> 05:13.410
So minus the product price because we removed one item we have to reduce the sum by one items price.

05:13.470 --> 05:21.870
Now it is up that ID card item needs to replace the current item in our well card items object so that

05:21.870 --> 05:26.760
we can all reuse some code I'll actually change this a little bit and create updated card items as a

05:26.760 --> 05:32.880
variable here instead of a constant here in the else block so that I just update this variables value

05:33.240 --> 05:34.230
sorted here in the F block.

05:34.230 --> 05:40.530
We can all use that same variable name updated card items where I said does equal to a copy of the existing

05:40.530 --> 05:49.890
items but then I replace my action PID here so my product I.D. my identifier the value there with the

05:49.890 --> 05:56.610
updated card item which is my old card item with the updated quantity and some that's the updated card

05:56.700 --> 05:57.520
items.

05:57.540 --> 06:02.550
Now of course we will also need to adjust the total amount of our estate so often does.

06:02.550 --> 06:10.800
If Alex block we return a copy of the state items can be set to updated card items and now important

06:11.160 --> 06:14.030
the total amount can be set to state.

06:14.100 --> 06:20.160
Total amount minus selected card item

06:23.530 --> 06:31.030
product price because just as updated the sum for this single card item the total card sum of course

06:31.060 --> 06:38.200
also needs to be adjusted such now we can try this patching that's removed from card action.

06:38.200 --> 06:46.940
So let's go to the card screen where I in the end have is on remove function and there I now want to

06:46.940 --> 06:51.860
dispatch an action so I will need access to the dispatch function with the help of the use dispatch

06:51.890 --> 07:03.040
hook we can now use that up here get access to it by calling just used this patch like this and then

07:03.550 --> 07:05.740
dispatch this down there.

07:05.740 --> 07:17.150
Dispatch now import all actions which we need so import everything as card actions from the store folder

07:17.150 --> 07:24.080
from actions card like this again using this bundled import which is totally optional you can also target

07:24.080 --> 07:25.760
the specific things you need.

07:25.790 --> 07:31.610
So target the specific action creators in this case to remove from card creator which we would need

07:32.480 --> 07:35.400
and then down there simply execute this action creator.

07:35.420 --> 07:41.780
In my case by using card action start removed from cart forward to product idea which we of course get

07:41.780 --> 07:45.030
here it's item data dot item dot.

07:45.110 --> 07:50.810
And now keep in mind that we're looping for items of this shape so we'll have a product I.D. field in

07:50.810 --> 07:55.840
there and hence we can use this here to forward this to removed from cart.

07:55.850 --> 08:00.770
This should hopefully therefore allow us to update this and that should be all redone should do the

08:00.770 --> 08:05.470
rest behind the scenes and should automatically re render the card screen whatever the card changes.

08:05.570 --> 08:12.060
So whenever we remove items so I add a two red shirts and one blue carpet and if I remove one Red Shirt

08:13.260 --> 08:13.790
indeed.

08:13.800 --> 08:17.000
Well one problem we have is the orders which is we'll have to fix that.

08:17.010 --> 08:19.800
But you see the quantity was updated correctly.

08:19.920 --> 08:25.620
If an now removed as the total amount pulls up that correctly for now removed as indeed it's gone entirely

08:26.360 --> 08:28.080
and now it is all just disabled.

08:28.080 --> 08:31.970
So this generally works but of course the order being switched.

08:31.980 --> 08:34.140
That's not something I want to happen here.

08:34.380 --> 08:40.620
Now to a white that the order switches we can simply go to the card screen where I change my items to

08:40.620 --> 08:45.960
be an array and there would just need to make sure disarray is always sorted in the same way because

08:45.990 --> 08:51.690
this selector will always reach trigger and re fetch our data whenever our redux state changes.

08:52.320 --> 08:57.540
So therefore here we will always get the latest data snapshot we have in there and hence it's in here

08:57.540 --> 09:02.670
where we just need to sorted in the same way all the time and will therefore always render it in the

09:02.670 --> 09:03.790
same way.

09:03.900 --> 09:11.250
So we just need to make sure that our transformed card items array is sorted by calling sought there.

09:11.410 --> 09:17.310
If I call it like this I start adding some data here.

09:17.410 --> 09:21.820
Now you see this alone didn't do the trick because we're not telling it how to sort it and it doesn't

09:21.820 --> 09:28.480
know how to do this for objects out of the box but we can pass a function to sort where we always compare

09:28.480 --> 09:34.490
two items a and b to each other and then sort has to return a number.

09:34.600 --> 09:38.140
In the end that determines what comes first.

09:38.190 --> 09:40.780
And there you can of course sort this whoever you want.

09:40.800 --> 09:50.530
For example by product I.D. so we can simply return a comparison where we check A's product I.D. compared

09:50.530 --> 09:58.110
as to B's product I.D. And if it's greater then with a ternary expression here I returned one.

09:58.150 --> 10:02.210
Otherwise I return minus one.

10:02.370 --> 10:07.620
This is the normal sort function javascript chips with and now it is ensures that we always sort in

10:07.620 --> 10:08.610
the same way.

10:08.670 --> 10:17.520
Hence now you see if I removed as the red short stays in its place data for our card logic is finished.

10:17.520 --> 10:23.620
Now we can make sure that we can actually also click on that order now button and we add this as an

10:23.610 --> 10:29.250
order which thereafter can visit with the helpful drawer here that allows us to go to the orders screen

10:29.250 --> 10:31.190
which we of course also have yet to add.
