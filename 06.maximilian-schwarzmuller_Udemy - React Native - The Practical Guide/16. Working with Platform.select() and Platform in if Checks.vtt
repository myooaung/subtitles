WEBVTT

00:02.330 --> 00:06.200
Now sometimes that can be cumbersome to add a bunch of such checks.

00:06.200 --> 00:09.920
And here we already have three checks on the header for example.

00:09.920 --> 00:14.070
Certainly something we can add but maybe not optimal.

00:14.480 --> 00:22.970
Instead to keep our style objects cleaner we could set up a base header here for example had her base

00:23.360 --> 00:37.110
and then add header I O S and header Android and now what we do is we take all these styles which change

00:37.110 --> 00:39.600
based on the plat from out of the base style.

00:39.860 --> 00:44.830
Add them here to a header IOW an Adder and header Android and on had.

00:44.970 --> 00:51.020
IOW we only keep while the eyes look here so white

00:56.160 --> 01:04.100
then this color for the border at the bottom and pixel width of one for that border.

01:04.200 --> 01:13.200
And here on Android we remove this check and keep color primary as a background color and on the other

01:13.200 --> 01:19.800
hand we get rid of our border by using these values or by entirely removing that and not setting it

01:19.800 --> 01:20.970
at all.

01:20.970 --> 01:28.590
Now we just need to make sure we add header ISIS or header Android and for that we can go up here and

01:28.690 --> 01:35.050
set up our installs object where we merge in all our header base styles now.

01:35.070 --> 01:45.500
So these are all ways set but now in addition we can merge in the result of platform select which now

01:45.500 --> 01:54.770
is a method which takes an object where we have to specify an Iow key and point at the the value or

01:54.770 --> 02:02.270
in this case the object we want to use if we are on IAW which is styled stored header W and add an android

02:02.270 --> 02:05.310
key and point at styles that header Android.

02:05.540 --> 02:12.380
And with that we're telling react native please merge in the properties of the value in this case and

02:12.380 --> 02:15.680
object whereas selecting for us and for Android.

02:15.680 --> 02:21.410
So you'll always have to pass an object to platform select and then you have different values for IOW

02:21.410 --> 02:26.390
Android and the value here could also be a number just wouldn't work here because here we actually expect

02:26.390 --> 02:32.350
an object so we can pull out all the property value Paris and pass them to our surrounding style.

02:32.360 --> 02:37.310
So here a number doesn't make sense but you can use select with any kind of value.

02:37.370 --> 02:38.960
Here we just need an object.

02:39.020 --> 02:45.410
So we're pointing at the header IOW de header Android objects and with that we're having leaner code

02:45.680 --> 02:51.110
we have leaner styles down there and then we have code with a base style where we then use plat from

02:51.110 --> 02:57.230
select to dynamically pick different styles based on the platform we're running on and therefore now

02:57.230 --> 03:04.760
we have the same look as before but now in a more elegant way and no place in our app where we could

03:04.760 --> 03:11.360
take advantage of this is our main button here our main button looks and feels the same on both platforms

03:11.480 --> 03:14.780
which isn't horrible but which also might not be what we want.

03:15.590 --> 03:21.590
If we go to our main button J.S. file we see we always use touchable opacity here but actually on and

03:21.590 --> 03:23.940
or do we might want to use the ripple effect.

03:23.990 --> 03:30.740
Now thankfully react native has to touchable native feedback component built in which actually gives

03:30.740 --> 03:33.830
us a touchable object which has a built in ripple effect.

03:33.920 --> 03:38.730
So we want to use dad on Android and touchable opacity on ISIS.

03:38.810 --> 03:44.300
Now of course we can use the platform API which we there for all to have to import from rec native to

03:44.330 --> 03:47.510
use a different component here based on the platform.

03:47.630 --> 03:52.520
And for that we can use a really neat feature react has not react native specific but we can use it

03:52.520 --> 03:54.200
in react in general.

03:54.290 --> 04:00.200
We can set up a variable which starts with a capital character so that we can use it as a j as X element

04:00.230 --> 04:07.430
because only capital character variables can be used as J as X elements and we named as let's say button

04:07.490 --> 04:12.170
component the name is totally up to you and by default that's touchable opacity.

04:12.170 --> 04:19.730
So point at the touchable opacity object here without angle brackets just pointing at it like this.

04:19.730 --> 04:27.350
Now we can add a check and check if platform OS is equal to Android and important all the check something

04:27.350 --> 04:29.230
else on platform.

04:29.240 --> 04:37.210
Also check if platform where John is greater or equal to 21 because only Android API version twenty

04:37.230 --> 04:40.040
one or a higher supports the ripple effect.

04:40.100 --> 04:46.130
So if both is true then we'll set button component to touchable native feedback so then we'll use the

04:46.130 --> 04:50.480
one with the ripple effect otherwise we'll use the one with positive effect.

04:50.600 --> 04:56.930
So if we're on Android and the Android version is high enough it's 21 or higher then we use touchable

04:56.930 --> 05:03.350
native feedback now because a name does with a capital starting character we can use this here instead

05:03.350 --> 05:12.260
of touchable opacity in our JSA X code looks strange at first but we'll work perfectly fine if we now

05:12.500 --> 05:22.640
this and does restarts you'll see now here you have that ripple effect you can see it if we press and

05:22.640 --> 05:29.450
hold you see that ripple effect on the button doesn't look perfect yet because it's actually a rectangular

05:29.450 --> 05:33.350
and doesn't respect our border radius and we'll fix that but it works.

05:33.350 --> 05:40.340
And on the other hand here on us we have the opacity effect as you can tell if you press this.

05:40.340 --> 05:47.990
So now let's fix the border radius and we can do so by wrapping this with a number of view and that's

05:47.990 --> 05:51.780
just a little hack a little work around you need to be aware of.

05:52.010 --> 05:57.490
We wrapped it with a number of view where I set a style of let's say button container.

05:58.480 --> 06:07.430
Add Dead style down there in our style sheet and on that button container here which is now wrapped

06:07.430 --> 06:08.640
around everything.

06:08.780 --> 06:17.910
I set the same border radius as I set on the button so 25 in this case here and I add overflow hidden

06:18.000 --> 06:25.320
which means that any child component that would go beyond the boundaries of this components of the component

06:25.320 --> 06:31.170
with this style is basically clipped and this will ensure that the ripple effect which is now a child

06:31.170 --> 06:36.670
component of this view will be clipped while on the round that edges off this button.

06:37.210 --> 06:44.070
So now if we save this and we retry this you will see that the ripple effect only fills out the button

06:44.070 --> 06:50.200
which of course looks way better and on I of course we still have the same behaviour as before.

06:51.070 --> 06:55.750
So using the platform here in a f check is also something we can do.

06:55.780 --> 07:01.180
We can also use this neat trick here to render totally different components based on the platform we're

07:01.180 --> 07:01.780
running on.
