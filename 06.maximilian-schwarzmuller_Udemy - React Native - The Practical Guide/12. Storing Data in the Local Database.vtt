WEBVTT

00:02.180 --> 00:05.750
With the database initialized let's make sure we can store data in there.

00:05.750 --> 00:13.460
So back in the DB jazz file and their helpers folder we can add a new constant insert plays for example

00:13.460 --> 00:14.850
which I export.

00:15.110 --> 00:21.650
And now here I want to get the title of the place I want to get the image you are I want I get the address

00:21.930 --> 00:27.770
and all the latitude and longitude so I want to get all the data that makes up a place in there.

00:27.800 --> 00:33.950
Now I want to insert the place into the database for that we'll use the same store in Texas here so

00:33.950 --> 00:39.890
I can just copy this because I also want to have a promise as a wrapper year so that I can conveniently

00:39.890 --> 00:45.430
use then and catch or async await in the place where I call insert place.

00:45.560 --> 00:49.010
But of course the query I execute now is different.

00:49.010 --> 00:52.380
Instead of creating a table I now want to insert data into the table.

00:52.400 --> 00:56.620
That's done with the insert into command.

00:56.660 --> 01:02.450
Now you need to specify a table and that's places and then between parentheses the fields you want to

01:02.450 --> 01:03.380
target in there.

01:03.410 --> 01:08.840
Of course I want to target all fields except for the I.D. because as I mentioned that will be auto generated

01:08.840 --> 01:10.320
which is very convenient of course.

01:10.520 --> 01:15.510
But I want to target my title field and now you need to make sure you match the names which you set

01:15.510 --> 01:17.360
up there for your columns.

01:17.450 --> 01:20.150
You need to match these names here now.

01:20.180 --> 01:24.480
The order does not have to be the same but the naming is is important.

01:24.500 --> 01:27.400
So one target the title the image you are I am.

01:27.410 --> 01:30.360
That's all the name I chose up there right.

01:30.440 --> 01:32.660
So image your I address.

01:32.660 --> 01:34.610
Latitude and longitude.

01:34.610 --> 01:38.110
And now we need to specify what values should go in there.

01:38.120 --> 01:44.260
You do that by adding the values keyword here after this list of columns you want to target.

01:44.310 --> 01:50.330
And now you have another pair of parentheses here where you specify the values that should go into each

01:50.330 --> 01:51.310
of these columns.

01:51.320 --> 01:56.120
Now the order of values here of course has to match your order of column identifier as you have here.

01:56.150 --> 02:02.820
So the first value you enter here will go into the title image your eye is the second value and so on.

02:02.840 --> 02:08.570
Now what you could do here is you could use of course back ticks instead of single quotes and then for

02:08.570 --> 02:15.970
example inject title here and then have a comma and then the image your eye and so on.

02:15.970 --> 02:20.270
You could do that and it would work but this wouldn't be good.

02:20.290 --> 02:21.940
This is insecure.

02:21.940 --> 02:32.350
It opens a door for attack pattern called sequel injection where users could kind of maybe insert malicious

02:32.350 --> 02:37.240
code in there and run other queries which could break the database.

02:37.240 --> 02:42.210
Of course in this app where it's a local database just on this user's device that might not be super

02:42.210 --> 02:47.830
bad but still you want to defend against us and therefore here you actually use a couple of placeholders

02:47.850 --> 02:52.960
to add question marks here and you need to add as many question marks as you need to enter values.

02:53.050 --> 02:58.450
So here I'm entering five values hence here I have five question marks separated by commas.

02:58.540 --> 03:03.700
Now the concrete values for the question marks are provided in the second argument you pass we execute

03:03.700 --> 03:07.990
sequel does the array of arguments previously would was empty.

03:08.020 --> 03:11.860
Now we fill in the arguments in the order we need them.

03:11.860 --> 03:19.570
So title first then image you are ions on and the sequel package will then swap these question marks

03:19.810 --> 03:27.030
for our values but not before validating them to ensure that such an injection attack can't happen.

03:27.070 --> 03:33.050
So we get some extra automatic validation by using this approach and then we can enter the title here.

03:33.160 --> 03:36.040
Then the second piece of data was the image you or I.

03:36.280 --> 03:37.450
Then we need to address.

03:37.450 --> 03:40.210
Then we need the latitude and then we need the longitude.

03:40.240 --> 03:47.310
So this is how we now pass our data into this query now in these success functions.

03:47.320 --> 03:52.510
As I mentioned the first argument always is like the repetition of your query but the second argument

03:52.510 --> 03:56.540
is then either the error or a here the result of this query.

03:56.650 --> 04:02.910
And here I want to resolve this resolve so that in the place where we call insert plays we can actually

04:02.910 --> 04:09.490
sit and listen to the resolving of the promise and get our a result of this query which should be some

04:09.490 --> 04:12.640
information about the record that was created.

04:12.650 --> 04:18.730
So now we can call insert place and of course the place where I want to call it again is my places actions

04:18.730 --> 04:19.370
fall.

04:19.610 --> 04:21.810
There we move to image there.

04:21.830 --> 04:28.700
I now also want to reach out to my database and add an entry to do that in here first of all let's import

04:28.910 --> 04:40.980
does insert plays method from the helpers folder and there from the D.B. file and with it import it

04:41.100 --> 04:46.450
in at place after solving our filesystem ends on here.

04:46.470 --> 04:52.290
I of course then all those still in the try catch block want to try inserting data into the database

04:52.380 --> 04:53.520
does all the can fail.

04:53.520 --> 04:57.600
So having it in a try block isn't the worst idea.

04:57.630 --> 05:03.930
So here I can call insert place and dad returns a promise because we have our own promise in there so

05:03.930 --> 05:05.370
we can awaits this.

05:05.730 --> 05:11.460
And I get back my DB result there after salt stored isn't a constant and now in their place of course

05:11.460 --> 05:17.200
needs that highlight image your eye and address a latitude and longitude.

05:17.270 --> 05:19.960
Therefore I will forward my title which I already have.

05:19.960 --> 05:27.240
I will forward the new path which is my image your I know for address all use a dummy address because

05:27.240 --> 05:29.700
we have no real atoms yet for latitude.

05:29.700 --> 05:35.760
I'll use a dummy number of 15 6 and 4 long at use let's say twelve dots free.

05:35.760 --> 05:39.750
Now this might be in the middle of the ocean I don't know but at least we have some coordinates here

05:39.780 --> 05:45.730
which we can use for now until we're able to fetch a real location.

05:45.750 --> 05:51.960
Now this D.B. result of course is interesting so let's console log it and let's all day by the way make

05:51.960 --> 05:57.730
sure that we only dispatched his action and therefore touch our redux store if we succeeded with both

05:57.730 --> 06:00.330
the filesystem and the database action.

06:00.330 --> 06:06.690
So instead of the try block and now let's have a look at this now we should be able to store data in

06:06.690 --> 06:07.740
the database.

06:07.770 --> 06:11.790
So let's test this on Android where we can take a image.

06:11.790 --> 06:14.240
This is a test.

06:14.270 --> 06:24.980
Let's take a image here and see where all of that works by now cropping that image and saving this place.

06:25.090 --> 06:26.280
This works.

06:26.380 --> 06:31.380
And here we see some output we see this is the result of our database action.

06:31.480 --> 06:37.000
And we see that one row was a fact that because one row was inserted and we all get back the idea it

06:37.000 --> 06:38.460
was automatically created.

06:38.500 --> 06:41.710
It's a numeric idea here but that's of course no problem.

06:41.710 --> 06:47.920
So now we can all use this idea in our reducer instead of manually creating this state snapshot idea

06:47.920 --> 06:49.060
here.

06:49.060 --> 06:51.520
So that's a tiny improvement.

06:51.520 --> 06:59.600
When we dispatch our action here in the place data I know all we want to provide these I.D. and that

06:59.600 --> 07:05.780
I.D. can be fetched from the DB result constant and there it's in the insert I.D. field here as you

07:05.780 --> 07:06.170
can see.

07:06.170 --> 07:13.000
So let's access insert I.D. here now in the reducer day offer we no longer need to generated like this

07:13.000 --> 07:17.330
instead here we can simply refer to action place data dot I.D..

07:17.330 --> 07:22.100
Now keep in mind there it's a number here I actually want to have a string though you could also keep

07:22.100 --> 07:28.760
a number but I will convert it to a string here with Dad we're now also using that idea we're storing

07:28.760 --> 07:34.850
it in the database of course now it would be nice to load all our data whenever our app restarts because

07:34.850 --> 07:37.580
right now when it restarts the data still is lost.

07:37.700 --> 07:39.950
It's not really lost it isn't a database.

07:39.950 --> 07:45.230
But we don't see it here because we don't load this into our redux store which then of course is the

07:45.230 --> 07:46.640
data we use in the running app.

07:46.940 --> 07:50.840
So we need to make sure we do load the data into the regex store when this app starts.
