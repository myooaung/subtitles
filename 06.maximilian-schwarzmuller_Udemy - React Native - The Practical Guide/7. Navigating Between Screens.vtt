WEBVTT

00:02.530 --> 00:07.540
Well to reach our our screens we need something which we can click which we can tap.

00:07.600 --> 00:12.130
Later we'll have our great off categories here and we will work on this in this module too.

00:12.220 --> 00:15.990
But just to get started with navigation I will add a boring button.

00:16.030 --> 00:21.850
So on the categories screen where I have this text I want to add a button which I can tap to go to the

00:21.850 --> 00:23.510
category meals screen.

00:23.980 --> 00:34.440
So here I'll add this React Native button the one which is built in and set a title of go to meals.

00:34.600 --> 00:41.630
And when we press this button I want to trigger a function which actually takes me to the category meals

00:41.660 --> 00:42.890
screen.

00:42.890 --> 00:45.610
Now we set up that category meals screen here.

00:45.620 --> 00:53.040
But how can we now go to it while for this it's important to note that any component you loaded with

00:53.040 --> 01:00.360
the help of React navigation gets a special prop passed and automatically so any component mapped to

01:00.360 --> 01:02.550
one of your screen identifiers here.

01:02.550 --> 01:09.390
So in this case these three components will get the special prop nested components in there don't automatically

01:09.390 --> 01:14.850
get it just a top level components you mapped to identifiers in your navigators.

01:14.850 --> 01:16.800
So that's a special prop I'm talking about.

01:16.800 --> 01:17.810
Let's have a look at it.

01:17.820 --> 01:23.790
So here in props we can extract that and let's simply start by console logging props here so that we

01:23.790 --> 01:27.510
can get an idea and for now some we don't get an error.

01:27.510 --> 01:30.480
I'll just pass a empty function here too on press.

01:30.480 --> 01:33.600
So let's say doesn't let's see what's inside of props.

01:33.690 --> 01:39.660
This reloads we have the button which doesn't do anything and here in the console we indeed see props

01:39.720 --> 01:40.800
isn't empty.

01:40.800 --> 01:42.030
This is our props object.

01:42.030 --> 01:48.400
And there we have a navigation prop which itself is an object which has some actions.

01:48.420 --> 01:58.980
OK but which also has for example pop push replays reset and a navigate function so a bunch of functions

01:58.980 --> 02:03.090
in their functions which help us get around in our app.

02:03.450 --> 02:09.670
It always has a screen props prop so our prop has screen props which we can ignore for now.

02:09.690 --> 02:17.160
So this what's inside of props and does navigation prop doesn't a navigation part which is in there

02:17.520 --> 02:18.680
really helps us.

02:18.690 --> 02:25.350
So this navigation prop it helps us here because when we press this button and I'll do this with an

02:25.370 --> 02:30.270
inline arrow function here of course you could have a separate function which you create in which you

02:30.270 --> 02:32.010
then map to UN press.

02:32.010 --> 02:35.430
This helps us this can be used to navigate around.

02:35.490 --> 02:42.210
So on props navigation navigation systems special Prop. getting by react navigation because we loaded

02:42.210 --> 02:46.390
this categories screen component with the help of our navigator here.

02:46.740 --> 02:50.900
This special navigation prop has a navigate method.

02:50.910 --> 02:53.040
And this is your main method.

02:53.040 --> 03:01.620
The most important method for getting around with the help of React navigation how does navigate work

03:02.490 --> 03:12.040
navigate takes the object as an argument and in this object you can set up the route named to which

03:12.040 --> 03:13.150
you want to navigate.

03:13.240 --> 03:19.720
So you pass a route Name property in this object which you pass to navigate and now important the route

03:19.720 --> 03:25.540
name you specify here has to be one of the free route names I set up here.

03:25.720 --> 03:31.450
Now route names are de identifiers you'd show chose in front of these colons so the property names in

03:31.450 --> 03:34.420
this object you passed to create stack navigator.

03:34.420 --> 03:36.660
These are your route names.

03:36.670 --> 03:42.900
This is what you can now use to navigate around so here I want to go to category meals.

03:42.900 --> 03:44.690
This is the route I want to use.

03:44.690 --> 03:48.340
So hence here I pointed to category meals but not like this.

03:48.410 --> 03:56.000
This in javascript would look for a category meals variable instead to a string named category meals

03:56.180 --> 04:02.450
because this will basically tell javascript and react navigation the end that you want to go to the

04:02.450 --> 04:08.470
root which has to category meals name and that is this root here.

04:08.470 --> 04:10.720
So now this is how you can go there

04:13.730 --> 04:21.530
if we now save this and we click on go to meals here you see we go to the meal screen we get this nice

04:21.530 --> 04:27.020
animation out of the box we get this back button which looks exactly the way we would expect it to look

04:27.020 --> 04:33.650
on ISIS and all of that works out of the box without any extra work no if check no manual animation

04:33.650 --> 04:38.890
code we get this out of the box thanks to the react navigation library.

04:38.990 --> 04:45.800
So with this we can go forth and back to our meal screen to the category meal screen and then back to

04:45.800 --> 04:52.130
the category screen and does all the work some Android dare we get the Android specific routing navigation

04:52.400 --> 04:57.620
which looks a bit different than on ISIS it's the navigation animation you would expect on Android of

04:57.620 --> 05:01.550
course you can also use the device back button to then go back.

05:01.550 --> 05:08.600
So this is how you can navigate to a different screen And please also notice that navigate of course

05:08.600 --> 05:15.530
doesn't say anything about the direction we want to go it doesn't tell react navigation whether it should

05:15.530 --> 05:22.490
play that forward animation or that backward animation react navigation automatically the text is because

05:22.550 --> 05:29.120
under the hood it manages this stack of pages I was talking about this stack of screens and in this

05:29.120 --> 05:35.060
stack right now when we start the app we only have the category screen but when I press this button

05:35.420 --> 05:42.050
navigate in the end tells react navigation that since we're doing this inside of a component which was

05:42.050 --> 05:47.570
loaded with a stack navigator that we want to navigate to a different screen which should be pushed

05:47.600 --> 05:53.810
on top of the stack this is simply the default behavior and hence it knows that it wants to go forward

05:53.840 --> 05:59.690
because a new route was pushed which means it's added to the stack we want to go forward and when you

05:59.690 --> 06:06.080
click the back button which it adds automatically it pops this screen off the stack and since it removes

06:06.170 --> 06:10.700
something from the stack it knows that it should play the back animation so that's what's happening

06:10.700 --> 06:14.870
behind the scenes you don't really need to worry about that and that's a good thing.

06:14.960 --> 06:20.330
I just want you to be aware of that that react navigation is doing the heavy lifting for you there and

06:20.330 --> 06:27.980
manages this stack of screen and according animations you need data for under the hood for you.

06:28.120 --> 06:28.460
Okay.

06:28.520 --> 06:32.990
So that's allowing us to go back and forth for forth and back.

06:32.990 --> 06:39.260
Now your challenge for the next lecture where we will then do it together is that you also will do the

06:39.260 --> 06:44.270
same on the category meal screen and make sure that we can also go to the meal meal detailed screen

06:44.270 --> 06:47.990
from there shouldn't be too hard in the next lecture we'll do it together.
