WEBVTT

00:02.230 --> 00:03.890
Now one thing you can notice is the app.

00:03.890 --> 00:05.010
If I go to a different screen.

00:05.030 --> 00:10.610
Let's say the admin section and then it change something on the server which of course is kind of unrealistic.

00:10.640 --> 00:15.800
But on the other hand if this is an app where multiple users start adding products of course the user

00:15.800 --> 00:18.580
can edit a product save that to a server.

00:18.830 --> 00:23.750
And we are on a different page and therefore we don't have the latest state because we have no life

00:23.750 --> 00:26.950
push updating here so I'll edit this here.

00:26.960 --> 00:33.160
I removed the estimate from Mark in the description and in my app here if I go back and of course this

00:33.160 --> 00:34.240
is our product here.

00:34.270 --> 00:36.880
But if it were not it click here.

00:36.880 --> 00:42.520
I still see the old description reason for that is that the data wasn't read fetch and you might think

00:42.520 --> 00:44.350
that it actually should be read fetched.

00:44.350 --> 00:50.320
If I go back to the products overview screen because in there we have tons of fact which should run

00:50.320 --> 00:52.330
whenever this component gets rendered.

00:52.620 --> 00:52.920
Right.

00:52.920 --> 00:54.340
If we go to the user here.

00:54.360 --> 00:55.160
Here it is.

00:55.330 --> 00:59.530
There we have does A and should run whenever the component gets rendered and it does.

00:59.560 --> 01:06.790
But the problem is the way react navigation our navigation library works is such that our different

01:06.790 --> 01:12.890
screens which we go to with the draw are actually all capped in memory so to say they're not recreate

01:12.890 --> 01:15.690
a just because we don't see them and then we come back.

01:15.850 --> 01:20.770
Instead they're created once when the app launches basically or when we first visit them but they're

01:20.770 --> 01:22.360
not recreated thereafter.

01:22.420 --> 01:25.400
It's a different thing for a stack navigation if I go to the card.

01:25.450 --> 01:26.220
This is loaded.

01:26.320 --> 01:31.390
If a Leave It is destroyed if I come back it's recreate it but not for destroyer navigation and that's

01:31.390 --> 01:33.180
just how it works.

01:33.190 --> 01:37.460
So how can we refresh does whenever we reach this page.

01:37.650 --> 01:45.360
The answer is simple you can set up a listener to navigation events and we can do that with a no use

01:45.360 --> 01:46.200
effect call

01:48.770 --> 01:49.680
here.

01:50.090 --> 02:03.740
And in this function we can use props navigation at listener there we can set up a listener to D will

02:03.830 --> 02:08.980
focus event alternatives and at hatched you find a link to the official box with a full description.

02:09.080 --> 02:14.690
Alternatives are did focus after the page has been fully focused will focus will fact will fire when

02:14.690 --> 02:20.170
you transition begins and we also have will blur when you're about to leave it and did learn once or

02:20.180 --> 02:26.360
done but here I'm interested in will focus and then here in the callback function which fires when does

02:26.360 --> 02:29.990
event occurs there we can reach out to load products

02:32.260 --> 02:42.120
alternatively of course we just point at load products like this now dependencies of this effect are

02:42.210 --> 02:52.170
load products and although our navigation property ad listener prop there but I will avoid it here to

02:52.200 --> 02:58.020
what unnecessary reruns of this effect if something else about our navigation prop changes for example

02:58.020 --> 03:03.180
if we set new parents to communicate with our head or navigation options which we do in some components

03:03.450 --> 03:05.550
then we could enter the infinite loop here.

03:05.550 --> 03:12.000
This is why only at this even though it would be cleaner to add all dependencies we have noted cool

03:12.000 --> 03:17.610
thing about use factors that you can alter return something there which we haven't done thus far and

03:17.610 --> 03:19.590
that is a cleanup function.

03:19.620 --> 03:25.260
So it's a function that has to be a function which runs whenever does a fact is about rerun or when

03:25.260 --> 03:30.810
this component is destroyed and there we can clean up that listener which of course should do for Dad

03:30.840 --> 03:37.290
because simply stored to the subscription so will focus sub like this.

03:37.680 --> 03:44.550
And then here we use will focus sub and can simply call remove here and this will get rid of the subscription

03:44.550 --> 03:50.370
once this component is basically on mounted or whenever it will rerun because load products rebuilds

03:50.400 --> 03:51.870
which shouldn't really happen.

03:54.280 --> 04:03.080
Now we have that listener and now if we remove use them if we use effect here because we always will

04:03.170 --> 04:05.410
load our products with this listener.

04:05.450 --> 04:08.760
Nothing happens actually reason for data is simple.

04:08.810 --> 04:14.620
This will set up this listener which will reload our data but it doesn't fire initially because this

04:14.620 --> 04:17.930
will only be attached after the component rendered the first time.

04:18.040 --> 04:20.650
This is after will focus fired though.

04:20.800 --> 04:25.300
So to also fetch the products initially we need this extra use effect call.

04:25.300 --> 04:29.030
But with that we fetch it initially and we'll also read fetch it.

04:29.080 --> 04:37.610
And to prove that let me add a console log statement here in load products where I say load products

04:38.270 --> 04:42.880
like this and if for now when does app loads we see load products here.

04:43.630 --> 04:48.160
And if I now leave this screen and go to admin.

04:48.400 --> 04:50.440
This was on Android here by the way to second block.

04:50.440 --> 04:52.440
So this was the one log from the iPhone.

04:52.510 --> 04:55.170
So now I left a screen if I come back to products.

04:55.180 --> 04:58.090
You saw the spinner too and does all the reprints.

04:58.090 --> 05:03.280
So now we do this whenever we revisit this page and this is a pattern where you might want to consider

05:03.280 --> 05:09.400
when working with react navigation to make sure you do something no matter if that's fetching data or

05:09.400 --> 05:12.600
something else whenever it is screen re-enters.
