WEBVTT

00:02.250 --> 00:08.070
We'll continue working on the app we built in the last course module with our recipes here and with

00:08.070 --> 00:15.070
the filters we could Saturns on and there are two things we need to add where we will need redux.

00:15.090 --> 00:21.870
One is that we actually can mark our recipe as a favorite by clicking that star icon that does actually

00:21.870 --> 00:27.900
marks does as a favorite and that we for one also changed as I can to show whether that already is a

00:27.900 --> 00:28.980
favorite or not.

00:28.980 --> 00:35.400
But then more importantly that we can see that recipe as a favorite here in the favorites tab at the

00:35.400 --> 00:41.280
opera thing where we will need read X is here in the filters there when we set a filter and we then

00:41.280 --> 00:49.080
safeties of course this should have an effect on the meals we're loading here in our meals tab in the

00:49.080 --> 00:51.470
list of meals when we select the category there.

00:51.500 --> 00:58.880
This should be reflected what we set on the filters so that is what we work on what we all need redux

00:58.880 --> 01:02.300
for and for that let's install redux and let's get started with it.

01:03.350 --> 01:07.760
To get started with redox I'll quit my exposed server here.

01:07.760 --> 01:12.830
The NPM start process I'll quit it temporarily and install a package.

01:12.860 --> 01:15.030
And that would be redux.

01:15.110 --> 01:22.460
And in addition to redux we all need to install react read X because that's all the required to then

01:22.460 --> 01:23.760
work with redux.

01:23.780 --> 01:28.700
So both packages need to be installed here and whilst they are installed we can already get started

01:28.700 --> 01:34.280
working on our code files there a little bit because in this project I want to add a new folder now

01:34.280 --> 01:35.780
and it's to store folder.

01:35.780 --> 01:40.810
Now you can named as folder whatever you want it doesn't have to be named store redux doesn't care.

01:41.000 --> 01:46.970
But this is a folder where I want to manage my redux setup in because redux is all about that central

01:46.970 --> 01:48.390
state store.

01:48.530 --> 01:56.150
So here in that store folder we can now get started with redacted and I won't cover redux in the greatest

01:56.150 --> 01:57.230
detail here.

01:57.260 --> 02:02.510
I have a complete react and read X course for it if you want to learn the ins and outs of that for discourse

02:02.570 --> 02:08.450
I actually assume prior react and read X knowledge and data for this will only be a brief refresher

02:09.890 --> 02:14.980
read X in the end is all about read users actions and then building a store based on these read hours

02:14.980 --> 02:16.010
and actions.

02:16.360 --> 02:23.230
Now afforded here in that store folder I'll add actions folder and I'll add a reduced folder actually

02:23.320 --> 02:29.320
will only have one action and one reducer file in this project but if you had more files than that having

02:29.320 --> 02:34.180
separate some folders might be a good idea to keep it organized and that's why I create them here even

02:34.180 --> 02:39.820
though for this simple app we wouldn't need that because we won't have that many files.

02:39.880 --> 02:44.230
Let's get started with the reducer in the reducer folder here.

02:44.350 --> 02:52.630
I'll add my meals J.S. file and that's the file where I went to manage my meals reducer state updating

02:52.630 --> 02:53.310
logic.

02:53.410 --> 02:58.750
So that's in the end the file where we will write the logic for marking a meal as a favorite and for

02:58.750 --> 03:01.330
managing our filters.

03:01.430 --> 03:04.700
Now I her in react is just a function.

03:04.700 --> 03:10.550
So here I will create a function name at meals reduce her name is totally up to you and this function

03:10.610 --> 03:17.360
will actually receive two arguments the state the current state snapshot on which you can build up on

03:17.360 --> 03:22.250
and derive a new state because a reducer in the end will have to return and you state which is then

03:22.370 --> 03:24.860
taken by redux and stored in its store.

03:24.860 --> 03:30.230
So you get Dede current the old state here and you get the action because to reduce your function here

03:30.230 --> 03:31.940
is executed by redux.

03:31.940 --> 03:36.710
Whenever a new action is dispatched and therefore we get access to the action here Soledad we can find

03:36.710 --> 03:40.370
out if we need to act and what we need to do.

03:40.520 --> 03:44.960
So instead of this function the end then you need to return unused state and it's in its simplest form

03:44.960 --> 03:49.220
that of course means we return to current state which on the other end means that this reducer doesn't

03:49.220 --> 03:52.470
do anything useful but we'll change that.

03:52.650 --> 03:58.170
Now when we first execute our app we also want to set up an initial state which is used initially so

03:58.170 --> 04:00.000
which initialize is our state.

04:00.000 --> 04:06.510
When this app launches and for this I'll add a new initial state constant here which holds a simple

04:06.510 --> 04:14.970
javascript object and in there I want to store a list of my meals and then also a list of my filtered

04:15.120 --> 04:22.060
meals because we'll need both a list of all meals and a list of the meals that fit the filters the user

04:22.060 --> 04:31.130
is set and I also want to have my favorite meals here so three types of meal arrays which I store in

04:31.130 --> 04:31.610
yet.

04:31.670 --> 04:34.800
And of course that's just one possible approach you could take here.

04:34.830 --> 04:40.340
You can certainly find other ways of managing our data here but I like this one.

04:40.590 --> 04:53.140
Now what I'll need in this file is my meals dummy data so I'll import meals from my data folder and

04:53.140 --> 04:59.860
there from the dummy data JavaScript file and I'll initialize meals here with my meals dummy data array

05:00.550 --> 05:06.220
filtered meals all is initialized with that because initially when this app starts we have no filters

05:06.330 --> 05:11.840
setup favorite meals on the other hand initialize an empty array because again when the app starts will

05:11.840 --> 05:13.130
have no favorite meals.

05:13.130 --> 05:18.230
Of course in a real app you might want to store dead state on a servers so that when the user closes

05:18.230 --> 05:21.400
the app and comes back later you don't start from scratch again.

05:21.470 --> 05:23.230
But that's not something we'll do here.

05:23.240 --> 05:28.580
You'll learn how to reach out to a server and save data there and load data from there in separate modules

05:28.610 --> 05:29.440
later in this course.

05:29.460 --> 05:33.040
Here we'll keep this simple to focus on redux.

05:33.140 --> 05:39.170
So this is my initial state here in this function we can now use of javascript syntax where we assign

05:39.230 --> 05:44.690
our initial state as a default value for the state argument which means that when does reduce her function

05:44.690 --> 05:51.290
runs and state is undefined which is the case when redux executes our reducer for the very first time

05:51.590 --> 05:53.700
we'll get started with that initial state.

05:53.750 --> 05:56.330
So that will then automatically load our initial state.

05:56.330 --> 06:02.760
So to say because when redux gets started and starts up there will be one initial action dispatched

06:02.790 --> 06:07.910
which is used to run through to reduce her ones and that will then load our initial state.

06:07.980 --> 06:14.160
So with that we can work with some initial state which is nice but which on its own doesn't help us

06:14.160 --> 06:16.190
too much for the moment.

06:16.200 --> 06:17.070
That is it though.

06:17.250 --> 06:23.640
Let's now connect us reducer to redact such that we can't actually use our redux store everywhere in

06:23.640 --> 06:30.860
the app before we then start dispatching actions and do more useful stuff in the reducer hence here

06:30.860 --> 06:39.890
for now and we'll just export the meals reduce our as a default here and now an app J us which is to

06:39.890 --> 06:42.190
file where our entire app starts.

06:42.230 --> 06:47.960
We need to setup our redux store for dead in here.

06:48.080 --> 06:57.270
We import create store from redux.

06:57.510 --> 07:02.010
In addition will need to import combined with users from there.

07:02.010 --> 07:06.090
This allows us to now create a store we'll just need our reducer.

07:06.090 --> 07:12.610
So here all import my meals reducer from and now point at the store folder.

07:12.610 --> 07:15.280
The producers folder and they are the meals.

07:15.330 --> 07:26.520
J.S. file and now maybe here we can create our store here by calling create store now create store takes

07:26.640 --> 07:31.910
a reducer in the end what you need to pass in of course here we have a reducer and we could pass this

07:31.920 --> 07:36.780
in but in bigger apps you might have more than one reducer because you often have rid users for the

07:36.780 --> 07:43.710
different feature areas of your app one for authentication one for your products one for let's say the

07:43.710 --> 07:49.740
support area of your app and you need to merge all these single red users these different road users

07:49.800 --> 07:53.970
into one route reducer and that's what the combined road users function does.

07:54.000 --> 07:58.800
Again here we wouldn't need it because we only have one reducer but to already show you the approach

07:58.800 --> 08:01.060
you could use with multiple producers as well.

08:01.140 --> 08:07.890
I will use it here as well so I will have my route reducer here which I create by calling combined with

08:07.890 --> 08:14.460
users combined with users takes a javascript object where we now map our single road users are different

08:14.460 --> 08:16.130
producers to keys.

08:16.130 --> 08:21.870
So for example here we could take meals as a key but that name is totally up to you and connect this

08:22.740 --> 08:24.900
to the meals reducer like this.

08:24.900 --> 08:32.760
What this does is it in the end merges this meals with user into this route reducer and will later be

08:32.760 --> 08:37.380
able to work with the state managed by the meals reducer.

08:37.380 --> 08:43.440
So with this state which is initialized like this with the help of this meal's property we'll be able

08:43.440 --> 08:44.900
to access this state.

08:44.910 --> 08:49.630
This slice of the state with this property later but you'll see all of that.

08:49.740 --> 08:54.780
So that's our route reducer and now we just have to pass the route reducer to create store.

08:54.780 --> 08:57.900
This gives us a store and now what.

08:57.900 --> 09:03.210
Now this store needs to be provided to our application and for Dad we need that.

09:03.240 --> 09:06.960
Our package which we installed which is react redux.

09:07.170 --> 09:18.300
From there we can import the provider component provider like this we then wrap provider around our

09:18.390 --> 09:25.200
route app component in the end so around the topmost component which holds all our components that will

09:25.200 --> 09:30.000
eventually interact with our store and the meals navigator is pretty good for that because that holds

09:30.060 --> 09:35.960
all our screens so it holds all components that will eventually need to dispatch actions or access our

09:35.960 --> 09:36.420
state.

09:36.480 --> 09:44.230
So read from our state hence here we wrap the provider component around the meals navigator and now

09:44.230 --> 09:50.440
provider takes one important property one prop which you have to pass and that's the store prop.

09:50.680 --> 09:54.590
And of course there as a value we pass our store here.

09:54.640 --> 10:01.660
So this constant store which holds the created store is passed to the store prop of provider and behind

10:01.660 --> 10:07.990
the scenes this gives us everything we need to now interact with redux with the redux store in any component

10:08.050 --> 10:11.520
any screen or any other component in our application.

10:13.360 --> 10:18.630
Now let me restart this with NPM start and for the moment is won't make a big difference but our app

10:18.630 --> 10:21.430
should certainly still work so it shouldn't crash because of that.

10:21.430 --> 10:29.140
Let's just verify that this is the case and let's reload here repressing are twice on Android and command

10:29.170 --> 10:38.370
are on ISIS and let's see where debt still loads as it should yep that's looking good here on our and

10:38.730 --> 10:44.860
I'm pretty confident that it will all to load just fine on Android yep that's working too.

10:44.890 --> 10:46.890
So now redux is set up.

10:46.900 --> 10:49.990
Our store is initialized but we're not using it.

10:49.990 --> 10:54.520
So as a next step let's make sure we use our store before we then take care about actions and doing

10:54.520 --> 10:56.200
some real work in the reducer.
