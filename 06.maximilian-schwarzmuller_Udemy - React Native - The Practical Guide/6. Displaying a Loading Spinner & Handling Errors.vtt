WEBVTT

00:02.200 --> 00:06.570
Before we continue with updating we're editing the data we're deleting it.

00:06.680 --> 00:10.810
That's all to make sure however that we don't see the dummy data here initially but that we actually

00:10.810 --> 00:16.660
see a loading spinner and maybe also a message if there is no data to be loaded or an error message.

00:16.840 --> 00:19.810
If we have an error end for dead.

00:19.810 --> 00:23.400
Let's start with the loading spinner on the product or review screen there.

00:23.470 --> 00:28.270
I want to show a loading spinner whilst were waiting for data to arrive for that we first of all need

00:28.270 --> 00:32.430
to know whether we're loading or not we can control that with use state.

00:32.440 --> 00:34.850
So with our internal state in this component.

00:35.140 --> 00:42.910
So there we can add is loading and set is loading and then simply use state here like this and initially

00:42.910 --> 00:45.890
we're not loading so I set the initial state to false.

00:46.630 --> 00:51.610
And now here when we dispatch this so here and use effect I set is loading to true.

00:51.610 --> 00:56.130
Of course but once we're done I want to set it back to faults.

00:56.170 --> 01:03.610
Now the good thing is dispatch here dispatches our fetch products action and therefore this here gives

01:03.610 --> 01:04.780
us a promise actually.

01:04.840 --> 01:10.690
So here I can add then and also catch later for error handling to do something once this is done.

01:10.870 --> 01:15.670
You can always use async await but it's not allowed to use like this.

01:15.670 --> 01:20.910
Here in use a fact that's not simply how use effect should be used.

01:20.910 --> 01:25.910
So if you would want to use use async here you would have to wrap this into a separate function which

01:25.910 --> 01:32.720
you have to create in your effect like load products which is just a dummy wrapper function that looks

01:32.720 --> 01:37.350
like this maybe with set is loading in there as well.

01:37.350 --> 01:43.530
Now here you can add async and now then you can call load products like that right there after simply

01:43.530 --> 01:46.530
a wrapper which is required due to the way use effect works.

01:46.530 --> 01:48.260
It must not return a promise.

01:48.300 --> 01:54.030
It would do so if you use A's in here and therefore using async there is not allowed this on the other

01:54.030 --> 01:55.940
hand is allowed.

01:55.950 --> 01:57.520
So now in here we can use.

01:57.540 --> 02:03.060
I'll wait here to wait for this dispatching to be done which means this will automatically wait for

02:03.060 --> 02:08.670
the promise that's in there so 48 GDP request and thereafter we set is loading to false.

02:08.670 --> 02:10.300
Once this is done.

02:10.710 --> 02:16.380
Now just show a spinner thankfully reactive got one for us the activity indicator which will automatically

02:16.380 --> 02:18.810
look good for ISIS and Android.

02:18.840 --> 02:21.950
So it will automatically get the default platform style.

02:22.320 --> 02:27.630
And now we can render D if we're loading so down there instead of returning the flat list if is loading

02:27.630 --> 02:34.740
is true I will return a different piece of jazz X I'll return a new view here with my activity indicator

02:34.740 --> 02:42.040
in there for that of course you need to have view imported as well so make sure that this is also available

02:44.480 --> 02:49.370
now with that we returned this view with the activity indicator there you can set up the size to be

02:49.380 --> 02:58.310
large and the color to be colors dot primary for example and this of course requires you to have that

02:58.310 --> 03:05.830
color is constant be imported so make sure that is a white label and last but not least now I want to

03:05.830 --> 03:10.960
center does indicators so here we can add a style which we of course could set up with a style sheet

03:11.020 --> 03:18.880
or here quick and dirty flex one justify content center all line items center however actually I will

03:18.880 --> 03:23.010
use of a style sheets here because we'll need that in a different place later too.

03:23.110 --> 03:33.450
So here I will refer to styles let's say centered and import style sheet from React Native and with

03:33.450 --> 03:41.640
that then go down there add my styles object after setting up the navigation options maybe styles with

03:41.640 --> 03:50.890
style sheet dodge create add these centered property in there which has this styling with Flex justify

03:50.890 --> 03:57.450
content line items and now with that we should see a centered activity indicator was for loading.

03:57.570 --> 04:03.790
So if I saved as it does reloads firebase is very fast so you don't see it that long but for a short

04:03.790 --> 04:09.580
amount of time you see that loading spinner here with the different look on ISIS and Android of course

04:12.900 --> 04:19.110
now of course loading is one thing sometimes you all just don't have any data that could be loaded let's

04:19.110 --> 04:25.740
say you know reducer we're reaching out to product dot Jason which is the source where no data can be

04:25.740 --> 04:28.750
fetched and therefore we end up with an empty screen.

04:29.150 --> 04:32.920
Well that's something we can do but it's not the best possible user experience.

04:33.060 --> 04:39.540
So I want to add another if check where to check if is loading is faulted for not loading anymore and

04:41.530 --> 04:48.190
my products here the length there is equal to zero which means we have no products.

04:48.190 --> 04:54.340
In that case I will also return my centred content here but there I simply want to output a text where

04:54.340 --> 04:58.230
I say no products found.

04:58.240 --> 05:08.530
Maybe start adding some and for that of course you need to make sure you import the text component and

05:08.530 --> 05:15.880
you can also assign your fun styles there or create the default text wrapper component which we used

05:15.880 --> 05:17.140
in earlier modules.

05:17.140 --> 05:22.900
For now I'll just have my text like this and this is indeed what we see there for now of course as soon

05:22.900 --> 05:31.360
as I switched his back to the correct you or L where we actually do find data it works now last but

05:31.360 --> 05:33.680
not least you could also have an error let's say here.

05:33.700 --> 05:35.850
I don't have dot Jason there.

05:35.860 --> 05:41.610
Of course that is an error we would typically a white because that's just a typo on our side but unfortunately

05:41.620 --> 05:48.010
firebase servers are relatively robust so to fake that they for example went down or something went

05:48.010 --> 05:48.520
wrong.

05:48.550 --> 05:54.850
I'll just break the U R L in this way which is an invalid U R L and now what we see is an infinite spinner

05:55.120 --> 06:04.340
the reason for data that we actually now don't have a valid response so we have a look at our reduce

06:04.340 --> 06:10.490
our at our action here and we console locked is response data here

06:14.420 --> 06:16.220
we see that asked Is reloads

06:19.170 --> 06:20.950
fetching should happen immediately right.

06:21.060 --> 06:23.130
But we don't get any output there.

06:23.160 --> 06:29.760
We don't see anything be law from this we just get a promised rejection warning at some point of time

06:29.970 --> 06:32.470
so it looks like we're simply getting an error.

06:32.820 --> 06:34.870
And right now we're not handling an error.

06:34.890 --> 06:39.990
Now if you would be using promises without async await you would simply add a catch statement.

06:39.990 --> 06:41.720
Here we are using async await.

06:41.720 --> 06:48.660
So what we do is we wrap this into a try block all that code which we ultimately want to run if everything

06:48.660 --> 06:52.960
succeeds and catch any errors here.

06:52.960 --> 06:57.340
So a try catch block that is where we get a potential error.

06:57.340 --> 07:00.820
And now with that error gotten here we can handle it.

07:00.820 --> 07:06.460
For example send it to our own analytic server or do whatever we want and then maybe also refloat it

07:06.670 --> 07:11.740
of course if all what you do is refilling it you wouldn't have needed to add this try catch block but

07:11.740 --> 07:17.080
typically you might want to do more here send to custom analytics server or anything like that.

07:17.080 --> 07:18.930
As I mentioned.

07:19.150 --> 07:23.800
So now we refloat year are still not better still causes us to have an error.

07:23.860 --> 07:29.890
And in addition to just having try catch around this we should actually also add another check here

07:29.890 --> 07:32.890
before we unpacked response body.

07:32.890 --> 07:38.770
We should all to check if response okay is wrong if that's false.

07:38.770 --> 07:44.670
Okay as a field you have a way lable on this response object and this simply is true if the responses

07:44.680 --> 07:50.800
in the to 100 status code range if it's in a different range for example because you're not authenticated

07:50.800 --> 07:55.360
or anything like that then the fetch API by default would not throw an error.

07:55.360 --> 08:01.000
However I do want to throw an error in that case so that we always end up in the catch block if we have

08:01.450 --> 08:07.780
400 or 500 status code or if we have a network request issue for example if the request can't even leave

08:07.780 --> 08:08.790
the device.

08:08.980 --> 08:15.250
So here and that's fetch API specific to handle 400 and 500 status codes as well which normally would

08:15.250 --> 08:16.590
not cause an error.

08:16.600 --> 08:21.350
I'll also throw a new error here in that case raise say something went wrong.

08:21.370 --> 08:27.850
Of course you could dive into the response body here in that case too and find out what is wrong there

08:28.150 --> 08:32.910
but I will just throw this generic error and now will definitely have an error.

08:32.920 --> 08:38.750
If something goes wrong if we don't get back our data but still we then just reef wrote error here.

08:38.770 --> 08:43.020
But the place where I ultimately want to handle it is my component here.

08:43.030 --> 08:50.640
My screen component because there I then want to show a error message so in there we have our effect.

08:50.830 --> 08:58.330
And just as we could use catch or the catch handler if you use then and catch or async await with try

08:58.330 --> 08:59.860
catch in the action.

08:59.920 --> 09:01.800
We can do it here as well.

09:01.840 --> 09:09.380
So here I want to try this patching this but I want to catch any potential errors we might get.

09:09.400 --> 09:10.830
So here I catch any errors.

09:10.840 --> 09:16.810
This might yield and since I read my error in there that's what I adjusted here right.

09:16.840 --> 09:19.370
Ultimately the error will reach us here.

09:19.400 --> 09:22.750
So now we will ultimately end up in this catch block.

09:23.080 --> 09:29.740
And now to show our error data we can add another state error and set error can name it however you

09:29.740 --> 09:30.250
want.

09:30.340 --> 09:38.690
Initially that's on the find because initially I have no error but then yea I will call set error and

09:38.690 --> 09:41.540
set this to error message for example.

09:41.540 --> 09:43.670
So to the message of this error I'm getting

09:46.500 --> 09:51.330
still of course I want to set loading two faults there after that doesn't change because we definitely

09:51.330 --> 09:52.330
are not loading anymore.

09:52.350 --> 09:58.920
Even if we got an error but now we also have this error state which we can use we can use stat check

09:58.920 --> 10:01.490
it here if we do have an error.

10:01.500 --> 10:08.820
So if data is true I don't even need to continue instead I want to return my centered J as XA content

10:08.820 --> 10:10.130
here but there.

10:10.140 --> 10:18.620
I just want to upload and text where I say an error occurred for example like this if we now do that

10:18.650 --> 10:20.290
you'll see we see a spinner.

10:20.320 --> 10:21.370
But then we see this error.

10:21.380 --> 10:24.990
Text of course this doesn't allow the user to do a lot.

10:24.990 --> 10:27.800
We can now just navigate away and then come back.

10:29.820 --> 10:36.820
But we might want to give the user a way of trying again maybe by adding a button here so here with

10:36.820 --> 10:45.860
button import that we can go there and then here at this button component with the title of try again.

10:45.870 --> 10:49.810
And of course it's solely up to you how you want to let the user handle this.

10:49.920 --> 10:55.260
And there you could add on press handler and now to be able to load again.

10:55.350 --> 10:58.770
I will actually take this load product's function here.

10:58.770 --> 11:04.290
Move it out of the effect and make it a regular function of this component so that I can call it from

11:04.290 --> 11:06.030
inside use effect.

11:06.090 --> 11:10.740
Now however it also needs to be a dependency and they offer it to a wide and infinite loop.

11:10.800 --> 11:19.350
It should be wrapped in use callback let's import use callback here and wrapped is around its function

11:19.350 --> 11:20.920
here.

11:20.980 --> 11:21.870
Where do the dependency.

11:21.870 --> 11:23.760
Dennis my dispatch function.

11:23.800 --> 11:27.600
You can also add set is loading and set error.

11:27.640 --> 11:32.440
But all these functions will never changed for you could also omit them and therefore this will never

11:32.440 --> 11:34.480
be recreated which is good.

11:34.630 --> 11:37.930
But now we can use load products as a dependency here and use effect.

11:37.960 --> 11:43.120
And now since it's not inside of to use affect function anymore we can use load products anywhere else

11:43.120 --> 11:45.750
in this component and the anywhere else part is here.

11:45.750 --> 11:51.700
This button if we pressed as I went to all the trigger load products again and also last but at least

11:52.000 --> 12:02.260
give the button color of collars primary with that looks like I have a error here with my imports Oh

12:02.260 --> 12:07.590
yeah I already had button imported so let's get rid of the second import only imported ones.

12:07.780 --> 12:09.480
And now what you'll get is dead.

12:09.520 --> 12:16.450
This will actually reload eventually throw an error and you can press try again to reload this.

12:16.460 --> 12:20.810
However we always see the error message simply because we never cleared the error.

12:20.840 --> 12:22.850
And if we do have an error we always return this.

12:22.850 --> 12:25.220
We don't even make it to the loading spinner.

12:25.220 --> 12:31.010
So we should make sure that whenever we do load our products here we set the error back to nulls we

12:31.010 --> 12:36.780
reset the error by the way multiple set state calls next to each other will be batch together by react.

12:36.800 --> 12:39.550
So this will not lead to multiple component we render cycles.

12:39.560 --> 12:41.730
It's OK to use it like this.

12:41.750 --> 12:46.490
So now with that if I click try again while we can try again obviously it will never succeed because

12:46.490 --> 12:53.540
are you or ELAs broken but still this is how we could handle this error with that however I'll go back

12:53.540 --> 12:57.610
to my actions and fix that error by correcting this year L again.

12:57.740 --> 13:00.560
And now this should also load our data correctly and display it.
