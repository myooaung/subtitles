WEBVTT

00:02.250 --> 00:08.640
I want to get started with the most basic form of navigation and also the most common form of navigation

00:08.640 --> 00:14.820
you have in any mobile app and that's how to go back and forth between screens and for this will set

00:14.820 --> 00:19.110
up a so-called stack and navigator because pages or screens.

00:19.110 --> 00:21.630
I'll use these words as synonyms here.

00:21.630 --> 00:26.040
So pages and screens are basically managed on a stack of pages.

00:26.250 --> 00:32.220
And whenever you go to a new screen it will be pushed on top of that stack at the topmost screen on

00:32.220 --> 00:34.570
a stack is always the screen which is visible.

00:34.650 --> 00:39.840
And when you then click the back button is popped off this screen you were on is popped off.

00:39.840 --> 00:45.600
And since you always see on the app the topmost screen you will see the screen below that which is the

00:45.600 --> 00:46.930
screen you came from.

00:46.950 --> 00:49.380
That's why it's called Stack navigator.

00:49.390 --> 00:50.480
Now that's the fury.

00:50.490 --> 00:53.090
Let's simply use it and it will become very clear.

00:53.370 --> 00:59.880
We imported from react navigation and its name were the name of the function.

00:59.880 --> 01:05.490
We actually need to create such a stack navigator is create stack Navigator.

01:05.490 --> 01:08.710
So that's how react navigation this library works.

01:08.760 --> 01:11.690
You create so-called navigators which are in the end.

01:11.690 --> 01:19.710
Just you could say objects actually react components as it will turn out which hold all the navigation

01:19.710 --> 01:24.450
configuration which hold all the information which different screens you have and which will do the

01:24.450 --> 01:29.940
heavy lifting offloading different screens and playing nice smooth transitions for a going from A to

01:29.940 --> 01:31.860
B for you.

01:31.860 --> 01:39.300
So we need to import create stack navigator and then we can simply call that now create stack navigator

01:39.330 --> 01:45.720
takes at least one argument and that is a javascript object where we configure the different screens

01:45.810 --> 01:49.740
we want to be able to move between now and this app.

01:49.830 --> 01:55.620
I want to start on the categories screen and if I tap on a category there I want to go to the category

01:55.620 --> 02:02.160
meals screen and if I then tap on a recipe there on a meal I want to go to the meal detailed screen.

02:02.460 --> 02:08.760
So we'll need these three screens in our stack navigator so that these are the three screens you can

02:08.760 --> 02:14.890
move between by using this stack pattern by pushing new pages and popping them off.

02:15.390 --> 02:21.750
And why don't we need favorites and filters because filters will later be added with the help of a sidebar.

02:21.780 --> 02:25.090
It will be an alternative to this stack here.

02:25.320 --> 02:31.440
And favorites also as an alternative to this stack we will be able to go there with taps later but not

02:31.440 --> 02:31.950
right now.

02:32.550 --> 02:38.580
So let's start with this basic stack based navigation where we can go forth and back between categories

02:38.580 --> 02:46.440
screen category meals Screen and you'll detail screen we inform react navigation about these three screens

02:46.770 --> 02:55.100
by registering them as key value pairs you take any identifier any name of your choice for example categories

02:55.130 --> 02:57.700
but this name is up to you as a property name.

02:57.860 --> 03:01.460
Convention is to start with a capital character here by the way.

03:01.910 --> 03:04.250
But you don't have to do that technically.

03:04.250 --> 03:10.220
So you use any identifier you want as a property name in this object you're passing to create stack

03:10.340 --> 03:11.720
navigator.

03:11.720 --> 03:19.010
And now the value in its simplest form simply is a pointer at de react component.

03:19.010 --> 03:24.290
You want to load as a screen for this screen.

03:24.290 --> 03:33.490
So in my case that would be the categories screen all import this all import categories screen from

03:34.360 --> 03:41.390
screens category screen I can import this because there this is my default export.

03:41.530 --> 03:49.000
So now we mapped is two categories and this allows us to later tell react navigation does library we're

03:49.000 --> 03:52.540
using that it should load the category screen.

03:52.540 --> 03:54.480
Now as I said this is not the only screen I need.

03:54.880 --> 03:58.280
I also want to have the category meals.

03:58.300 --> 04:00.670
So these are the systems the second screen.

04:00.670 --> 04:04.640
This screen will present all the meals for the chosen category.

04:04.930 --> 04:11.170
For Dad we have a number a component and that's the category meals screen we prepared which we import

04:11.170 --> 04:14.150
from screens category meals screen.

04:14.320 --> 04:16.290
So we mapped this here.

04:16.720 --> 04:20.370
Now by the way I mentioned that this is the simplest form of mapping.

04:20.410 --> 04:24.910
Simply having the property name and then a pointer at the component you want to load.

04:24.910 --> 04:31.630
You also can parse the object here instead and set the screen property on this object and then point

04:31.690 --> 04:34.090
on the at the component you want to load.

04:34.090 --> 04:35.680
Now why would you do that.

04:35.680 --> 04:42.130
Because now you can also set up additional configuration here besides the screen you could set up some

04:42.130 --> 04:44.250
default options for the screen and so on.

04:44.320 --> 04:47.170
But this is not something we have to worry about right now.

04:47.350 --> 04:52.360
We'll actually take care about this later in this module just already want to mention that this is the

04:52.360 --> 04:53.110
shortcut.

04:53.110 --> 04:58.540
This is the longer form of tallying react navigation which screens should be loaded for which identifier

04:59.500 --> 05:02.050
speaking off that we need a third identifier of course.

05:02.140 --> 05:07.170
And that's the identifier that should load our detailed screen name at meal detail.

05:07.270 --> 05:16.170
And I want to point at my meal detailed screen Seoul airport meal detail screen from and now let's go

05:16.170 --> 05:21.340
to the screens folder and there it's the meal detailed screen and again I'll use the shortcut here.

05:21.360 --> 05:25.560
We could use that longer for him but I'll use that shortcut in point at the meal detailed screen.

05:26.310 --> 05:32.430
So with that basic configuration we're telling react navigation hey these are the screens we'll be able

05:32.430 --> 05:38.490
to move between right now however data alone won't do much.

05:38.610 --> 05:39.370
Why.

05:39.440 --> 05:47.200
Because we're creating that stack navigator but we're not doing anything with it so let's change this

05:47.680 --> 05:54.580
create stack navigator actually returns a navigation container and that turns out to be a react component.

05:54.770 --> 05:59.500
So all named as meals navigator sounds like a fitting name because that's what we have in the end here

06:00.220 --> 06:05.170
and now we're storing the react component created by the stack Navigator which is basically a react

06:05.170 --> 06:11.980
component with all the heavy lifting of loading different screens and playing animations this react

06:11.980 --> 06:14.750
component is stored in meals navigator.

06:14.770 --> 06:22.430
Now we could export the meals navigator here and try using it like this and capture us to render it

06:22.430 --> 06:28.020
onto the screen and see what happens but actually react navigation works a bit differently.

06:28.070 --> 06:30.660
You also need to create an app container.

06:31.980 --> 06:38.220
In this app container you need to wrap your route so your main navigator in this case we only have one

06:38.230 --> 06:39.980
we only have to stack Navigator.

06:40.000 --> 06:41.510
So let's wrap this with it.

06:41.590 --> 06:47.320
Let's wrap the meals navigate or recreate it by calling create app container and then simply pass the

06:47.320 --> 06:51.520
meals Navigator as an argument create app container.

06:51.550 --> 06:55.300
Also creates a navigation container so all gives you a react component.

06:55.360 --> 07:01.750
But this is no actually to react component you should use in your J.S. hex code because this now has

07:01.780 --> 07:07.520
all the metadata about the navigation in general about react navigation and so on.

07:07.530 --> 07:14.260
So this is simply a pattern you need wrap your route your most important navigator with that and use

07:14.260 --> 07:19.870
this return react component in your J as X code then does basically the set up you'll always have when

07:19.870 --> 07:25.330
working with react navigation later you will also learn how to use multiple navigators in one app by

07:25.330 --> 07:26.270
the way.

07:26.290 --> 07:31.460
For now we have this one and we export this component which is the end creates.

07:31.480 --> 07:34.290
So now an app yes we can start using this component.

07:34.330 --> 07:36.130
So did we see something on the screen.

07:37.050 --> 07:48.240
For that let's go there and import the meals navigator from navigation meals navigator.

07:48.240 --> 07:53.640
Now as I mentioned meals navigator is now just a react component so in the end what we can do is we

07:53.640 --> 07:57.960
can simply return this instead of returning our view with our text here.

07:58.020 --> 08:03.330
I will return meals navigator and since it's a react component I can simply write some J X code like

08:03.330 --> 08:10.490
this with Dad if we save this we have a look at our application as it reloads

08:13.850 --> 08:20.030
and you might need to manually reload your app you should see the categories screen once in reloaded

08:20.500 --> 08:25.040
and this of course is huge because this means that this works.

08:25.040 --> 08:31.310
Now please also note that you all by default get a nice header which has the default platform look for

08:31.310 --> 08:38.780
IO s it's clean flat has this thin line below it for android it's more free dimensional because it all

08:38.780 --> 08:40.370
has a slight drop shadow.

08:40.370 --> 08:45.200
Now of course it's missing a title and you will learn how we can add one in this module but we get this

08:45.200 --> 08:50.750
out of the box and this automatically alter respects any notches you might have to stay this far you

08:50.750 --> 08:56.270
have here so it automatically uses such a safe area view and that's all the what I mentioned in the

08:56.270 --> 09:02.030
last course module whilst you have this component and you sometimes need it for example when building

09:02.030 --> 09:08.870
an app with react navigation react navigation already wraps your views into a safe area view at least

09:08.870 --> 09:13.760
it will do a lot of the work you would have to do otherwise it will make sure that your header looks

09:13.760 --> 09:19.490
good and that is a big thing because manually creating a header that looks good on all devices is actually

09:19.490 --> 09:21.180
quite some work.

09:21.440 --> 09:22.820
So that's what we get here.

09:22.820 --> 09:26.150
The obvious question now is how can we reach our other screens.
