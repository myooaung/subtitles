WEBVTT

00:02.240 --> 00:03.490
We're almost there,

00:03.620 --> 00:07.090
let's now connect app.js to react redux.

00:07.400 --> 00:15.090
For that in app.js, I'll import connect from react redux,

00:15.440 --> 00:17.810
connect is a higher order component,

00:17.810 --> 00:24.380
you will learn about these in your favorite react course I hope, you certainly did so in my react course

00:25.220 --> 00:34.220
and connect is then used on your component which you export here and can receive arguments that allow

00:34.220 --> 00:37.690
you to connect your component to your redux store.

00:37.940 --> 00:43.390
For this, I'm going to rewrite this and just set up the class here and not immediately export it

00:43.850 --> 00:48.230
and then at the bottom of the file, I'll do that and I'm certainly doing that to make it a bit easier

00:48.230 --> 00:48.960
to read.

00:49.250 --> 00:57.480
So there, I'll export a default which is my app but now here, I will use connect which is just a function

00:58.080 --> 01:02.490
that will return a function to which I then pass my app.

01:02.940 --> 01:09.300
Now the connect function itself also accepts two arguments and I will create the values for these arguments

01:09.420 --> 01:10.990
in constants here,

01:11.100 --> 01:16.880
the first I'll name maps state to props, though the name of course is totally up to you.

01:16.920 --> 01:22.830
This will be a function that receives the state, connect will pass this argument into the function because

01:22.860 --> 01:24.930
we will pass that constant to connect,

01:25.020 --> 01:32.970
so connect will handle it and there in the function body, we have to return a javascript object where

01:32.970 --> 01:40.660
we map some keys which we then can access as props in our component to slices of our state.

01:40.680 --> 01:46.650
The keys I'm interested in are of course my places and the selected place,

01:46.680 --> 01:50.270
these are two pieces of information I need to know in this container,

01:50.400 --> 01:53.060
the two pieces of information we already use,

01:53.100 --> 01:58.430
hence right now managed in the local state which we will eventually replace.

01:58.440 --> 02:00.600
So how can we get them?

02:00.960 --> 02:09.060
Well we can get them from our global state and since I use combined reducers here, we access it on state

02:09.570 --> 02:11.400
then the property we chose here,

02:11.460 --> 02:16.600
so places and then the properties this slice of the state holds,

02:16.710 --> 02:19.410
so in this case places or selected place.

02:19.800 --> 02:31.620
So if I want to access the places in my redux store, I access state places to access that slice of the

02:31.620 --> 02:38.790
state here because we used combined reducers and then it's another places call to reach out to

02:38.790 --> 02:45.570
the places property in our state. For selected place,

02:45.650 --> 02:47.770
it's pretty similar, there

02:47.770 --> 02:53.840
we reach out to state places to reach out to that slice of the state and then it's selected place

02:54.620 --> 03:02.660
and that is how I map my state to props. Then I add map dispatch to props, you can also name this whatever

03:02.660 --> 03:04.620
you like but that's just what it does

03:04.620 --> 03:05.910
so it's a fitting name,

03:06.050 --> 03:09.110
it receives the dispatch function as an argument,

03:09.110 --> 03:12.510
this will also be passed in automatically by connect.

03:12.920 --> 03:19.880
And here, we also return a javascript object where we map some properties of our choice to props we

03:19.880 --> 03:27.560
can use in our component or where we can use these property names as props in our component. There I'll name

03:27.560 --> 03:36.030
the first one and the name is totally up to you, just as up here, I'll name it on add place and it's mapped

03:36.030 --> 03:37.620
to a function,

03:37.640 --> 03:45.830
I'll use an arrow function here which will once executed dispatch an action. Now to dispatch an action,

03:45.860 --> 03:53.630
I'll use my action creators and remember that we bundle them all in the index.js file in the actions folder,

03:54.290 --> 04:07.030
so I can just import them from there. Let an import in my file here where I import from source store actions

04:07.030 --> 04:11.830
and there from the index file and here I will import add place,

04:12.110 --> 04:18.160
delete place, select place and deselect place, all four action creators.

04:18.160 --> 04:25.020
Now with that, I want to dispatch the first one, add place and add place is a function so we'll execute

04:25.020 --> 04:29.620
it as one and add place also accepts or requires an argument,

04:29.620 --> 04:31.150
the name of the place.

04:31.290 --> 04:34.840
Now I expect to get this here as an argument,

04:34.840 --> 04:41.080
we will later use on add place as a property in our component and when we execute it as a function, we

04:41.080 --> 04:45.070
just pass name. So name will then reach this function

04:45.220 --> 04:47.830
and here we just pass it on.

04:47.830 --> 04:53.580
Now the same for deleting, on delete place is also a function, one without an argument though

04:53.770 --> 04:59.920
and here we dispatch delete place, we also execute this because we're always interested in this action

05:00.000 --> 05:01.010
object

05:01.120 --> 05:03.930
these action creators return us.

05:04.360 --> 05:07.110
Then we got on select place,

05:07.120 --> 05:14.870
here we get the key as the argument and then we dispatch select place and pass on that key

05:15.130 --> 05:18.270
and finally we got on deselect place,

05:18.370 --> 05:20.230
no argument is needed here,

05:20.290 --> 05:26.660
there we simply dispatch deselect place like that. With these two constants created,

05:26.710 --> 05:34.300
we now pass them to connect, the first argument has to be map state to props and the second has

05:34.300 --> 05:40.330
to be map dispatch to props. With that you created a connection between this component,

05:40.330 --> 05:47.500
so this app component and your redux store and now in this component, we can use all these props we just

05:47.500 --> 05:55.870
mapped down there, either to access our state or to dispatch actions. Now to do this, I'll first of all get rid

05:55.870 --> 06:01.430
of the state property here in this component and in place add handler,

06:01.600 --> 06:03.730
I don't need to call set state,

06:03.850 --> 06:09.170
I just reach out to this props and then use this new on add place prop

06:09.400 --> 06:16.230
we just created down there. I'll execute it as a function and I have to pass the name of the place we create,

06:16.480 --> 06:24.110
so on add place executed as a function, place name is what I forward. For delete handler,

06:24.160 --> 06:30.900
it's even simpler, I just execute this props on delete place. For modal close,

06:30.940 --> 06:38.200
I simply want to deselect the currently selected place, so I'll execute this props on, not on delete,

06:38.290 --> 06:51.120
on deselect place and for selecting, I will execute this props on select place and pass on the key.

06:51.140 --> 06:55.670
So this already got much leaner here, now as a next step,

06:55.670 --> 07:03.920
I will go to my jsx code and whenever I access this state, I now have to access this props because

07:03.920 --> 07:06.920
we add these new places and selected place props,

07:06.980 --> 07:16.430
so I access this props selected place and then here, this props places. And with that, we should have

07:16.430 --> 07:18.860
an application that will work fine,

07:18.860 --> 07:24.940
we added reducers, actions, redux, connected redux to our react native app,

07:25.190 --> 07:27.280
let's now test it.

07:27.380 --> 07:33.380
If you go back and you reload your application, it might fail at this point because sometimes when you

07:33.380 --> 07:40.390
install new packages with npm install, it doesn't like that and it throws an error, simply quit

07:40.400 --> 07:43.160
your running development

07:45.410 --> 07:49.810
process which I have running in this console, it's very small but it's running.

07:49.850 --> 07:57.530
You can quit it with Control-C and restart it with npm start or by rerunning npm run android or npm run

07:57.630 --> 08:02.540
ios, if you don't have an error as I do, so it seems to 

08:02.560 --> 08:03.670
work fine,

08:03.680 --> 08:07.820
you may still do it just to be sure that everything is correct.

08:07.880 --> 08:11.830
So now I will simply rerun my iOS app for example,

08:11.870 --> 08:14.180
this will then automatically also spin up

08:14.180 --> 08:20.610
this development process here in the terminal again, here it opened a new one and relaunched the app,

08:21.900 --> 08:27.030
in my case here it's even still complaining so what you can always then do is uninstall your app

08:27.030 --> 08:30.900
from your simulator and rebuilding it,

08:30.900 --> 08:35.170
in this case with npm run ios again and now, this looks good.

08:35.460 --> 08:38.660
So now let's test this, let's add Munich here,

08:38.790 --> 08:39.690
looks good to me,

08:39.690 --> 08:46.730
let's also test it on the Android simulators, San Francisco in this case.

08:46.830 --> 08:49.390
Let's close that and open that, looks good to me,

08:49.410 --> 08:55.240
let's close the modal. All of that works and this proves that react redux is working, we can select, we can

08:55.290 --> 09:02.200
unselect, so delete Munich and let's delete San Francisco and that's all looking great,

09:02.340 --> 09:05.510
so now we connected react to a redux app.

09:05.580 --> 09:08.450
How about debugging this though

09:08.580 --> 09:11.470
and what about asynchronous action?

09:11.820 --> 09:13.280
Both will be covered later,

09:13.290 --> 09:19.350
I got a whole debugging section and will have plenty of time to run asynchronous code but it's important

09:19.350 --> 09:22.560
to have this basic set and you should have by now.
