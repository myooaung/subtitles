WEBVTT

00:02.390 --> 00:04.750
So in the last lecture we worked a lot on the styling,

00:04.760 --> 00:08.850
we now got a button which looks nice and which is positioned nicely,

00:09.050 --> 00:15.020
let's make sure once we enter something here and we hit this button, we actually save it and maybe output it

00:15.060 --> 00:18.170
below this whole section. For this,

00:18.170 --> 00:21.240
we need a new handler,

00:22.490 --> 00:27.760
maybe a place submit handler, there

00:27.890 --> 00:35.250
I don't actually expect to get any argument and I want to trigger this handler upon a press on the

00:35.250 --> 00:35.870
button.

00:36.060 --> 00:42.870
Now when using react on the web you would use onClick, here on react native, the equivalent is onPress which

00:42.870 --> 00:48.330
as you might be able to guess is fired whenever we press this button, there I want to execute this place

00:48.570 --> 00:50.390
submit handler,

00:50.550 --> 00:57.780
this one here. So this executes this method here,

00:57.840 --> 01:04.950
now in this method, I want to add the value the user entered to an array of values which I then eventually

01:04.950 --> 01:06.810
can output on the page,

01:06.810 --> 01:09.750
so here I'll add a new property to my state,

01:09.750 --> 01:16.260
let's name it places and let's then add something to place submit handler, there

01:16.510 --> 01:18.500
I want to add the new place.

01:18.750 --> 01:22.650
So first of all here I want to check if this state

01:22.650 --> 01:26.650
place name, if I trim it,

01:26.880 --> 01:28.020
if that is

01:31.720 --> 01:36.040
equal to an empty string because if it is, I just want to return,

01:36.070 --> 01:44.080
I don't want to allow the user to add an empty place but if it's not empty, then I will call this set

01:44.080 --> 01:51.280
state and there, use the function syntax which react also gives you where you get the old state,

01:51.340 --> 01:57.670
the previous state as an input to the function, just using an arrow function there and inside of the

01:57.670 --> 02:02.480
function, you then return the object which should get merged with the state by react.

02:02.500 --> 02:05.310
So that's just again normal react code

02:05.650 --> 02:08.530
and here, I'll set places,

02:08.590 --> 02:19.390
so this array here equal to previous state places and call concat on it to add a new element and return

02:19.390 --> 02:23.440
a new array to update it immutably.

02:23.440 --> 02:28.160
So there, I want to concatenate previous state

02:28.560 --> 02:31.210
place name, so whatever the user entered.

02:31.290 --> 02:32.790
This is what I return here,

02:32.790 --> 02:36.450
this should allow me to add new places.

02:36.450 --> 02:38.600
Now let's try it out,

02:38.610 --> 02:44.720
let's go back to the application, let's manually reload it to make sure we really have the latest code

02:44.850 --> 02:48.460
and let's add Munich as an awesome place because it really is awesome.

02:48.500 --> 02:50.160
Let's hit add here

02:51.080 --> 02:56.240
and we can't tell if it worked or not because we got no visual output,

02:56.240 --> 03:00.320
so why don't we output the places we store here

03:00.410 --> 03:06.440
and hopefully this is a list that grows as we press the add button. For this,

03:06.440 --> 03:14.920
I'll add a new view below our view where we handled the user input with the input and the button element

03:15.020 --> 03:20.230
and in this view, I simply want to output a list of the names.

03:20.480 --> 03:26.870
So therefore, I want to render a couple of text elements where I just output the place names we store

03:26.870 --> 03:33.460
in this array, to do this I'll actually do something before I return in the render statement,

03:33.620 --> 03:36.640
I'll add a new constant which I'll name places output

03:36.920 --> 03:39.980
and this is equal to this state 

03:40.050 --> 03:41.750
places map,

03:41.750 --> 03:44.980
so I'm using the default logic for outputting arrays in react,

03:44.990 --> 03:48.200
nothing special here when it comes to react native

03:48.200 --> 03:56.330
and there, I got my place and I want to replace it here in this array with a jsx element so that I later

03:56.420 --> 04:00.250
can render places output in the jsx code.

04:00.680 --> 04:10.040
So therefore, place should essentially become a jsx element, a text element of course,

04:10.740 --> 04:18.040
so there I will simply render place which is one element of the places array which is just an array of

04:18.040 --> 04:18.700
strings,

04:18.760 --> 04:21.180
so I can output place like this.

04:21.250 --> 04:26.560
So places output then should be entered here in this second view,

04:31.080 --> 04:34.660
there I'll add places output like this.

04:34.920 --> 04:40.380
With that, let's save this, always reload if you've got an error which doesn't go away,

04:40.610 --> 04:42.020
make sure to reload here too,

04:42.020 --> 04:44.210
again sometimes this is buggy,

04:44.210 --> 04:48.450
let me add Munich here on Android and hit add, we see Munich

04:48.860 --> 04:53.600
and let's try the same here on iOS and we see it here too.

04:53.630 --> 05:00.770
We also get an error or a warning that we should add a key property just as we do in normal web based

05:00.770 --> 05:02.120
react apps,

05:02.120 --> 05:07.680
so on the text node we create here in the array, let's add the key property

05:07.950 --> 05:11.870
and unfortunately, I have no real unique ID,

05:11.930 --> 05:18.230
so we'll fall back to the sub-optimal solution of using the index by receiving two arguments in the

05:18.230 --> 05:22.030
function we passed to map where the second is the index of the element

05:22.390 --> 05:24.410
and then I assign i,

05:24.470 --> 05:30.680
so the index as a key, not the best solution but I have no unique key here.

05:30.980 --> 05:37.940
So with that let's reload the app to make this error go away and let's try it again,

05:37.970 --> 05:42.720
let's enter Munich here, works,

05:42.740 --> 05:43.810
no warning,

05:44.030 --> 05:50.400
let's also enter San Francisco, another very lovely city and we get this too

05:50.540 --> 05:56.660
and it should also work here on iOS if we add all these elements.

05:57.020 --> 06:01.280
And by the way it's really convenient of course that during development when using the simulator, you

06:01.280 --> 06:03.480
can use your hardware keyboard,

06:03.590 --> 06:06.440
you could use the built-in one too though.

06:06.440 --> 06:15.170
So with that, we got a list which we output and we got this working, this input. We can work on the styling

06:15.170 --> 06:20.520
of the list items though and we haven't created any custom component yet,

06:20.840 --> 06:24.490
let's tackle all these things over the next lectures.
