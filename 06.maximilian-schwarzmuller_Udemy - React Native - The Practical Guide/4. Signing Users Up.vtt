WEBVTT

00:02.270 --> 00:08.170
So we want to sign the user up with email and password and for this, we need to send a post request as

00:08.170 --> 00:10.860
you can see here to this API endpoint,

00:11.020 --> 00:14.960
this API key here at the end can be taken from your firebase project,

00:14.980 --> 00:21.700
I will show you where to find it and we need to attach a body payload where we pass the e-mail, the password

00:22.010 --> 00:27.880
and then the return secure token property which should be a boolean which we simply should

00:27.880 --> 00:33.880
set to true to get back a token immediately, that token I was referring to on the slides.

00:34.270 --> 00:40.180
So since we want to send such a request, we probably should create some actions or an action we can

00:40.180 --> 00:42.570
use for that, for authentication.

00:42.640 --> 00:46.090
We got our auth action file and we got the try auth

00:46.090 --> 00:54.190
but right now all we do in here is we return this javascript object and we don't use that in our reducer

00:54.220 --> 00:55.740
or anything like that,

00:55.740 --> 00:59.980
there we have no place where we would listen to try auth,

00:59.980 --> 01:08.290
so this essentially does nothing useful for us right now. This auth action is or can be used in our auth

01:08.380 --> 01:20.240
screen here, there when we login, we call on login and pass auth data and that is in the end dispatching

01:20.240 --> 01:28.220
this try auth method but again this try auth method then in turn would indeed send this action but the action

01:28.220 --> 01:30.350
itself is never used.

01:30.360 --> 01:38.300
The try auth part still might be useful or we can build up on that, we can build up on that to create

01:38.300 --> 01:40.340
a user or log the user in,

01:40.730 --> 01:50.080
so let's do just that. I'll create a new function here, export const which I'll name authSignUp, the name

01:50.080 --> 01:59.550
is up to you, there I expect to get the auth data and in here in this function, I will not immediately return

01:59.550 --> 02:02.910
an action but return dispatch and then a function,

02:02.910 --> 02:09.540
so I will use this redux thunk middleware to run async code, run a side effect and in here, I now want

02:09.540 --> 02:16.230
to reach out to get http endpoint I just showed you on the official documentation.

02:16.530 --> 02:24.110
So here I will use the fetch API and then we can grab this endpoint, this url here from the firebase

02:24.120 --> 02:26.740
docs and enter it as a url

02:26.850 --> 02:28.650
we want to send a request to.

02:28.740 --> 02:35.250
Now we need to replace this API key part with the API key of our firebase project,

02:35.370 --> 02:43.650
we can find that in the firebase console if we click on authentication on web set up here, on the top

02:43.650 --> 02:47.580
right corner. There you don't need to configure or copy all of that,

02:47.610 --> 02:48.580
you would need that if you use 

02:48.600 --> 02:48.900
the

02:48.910 --> 02:49.330
SDK,

02:49.350 --> 02:50.800
we're not doing that though,

02:50.940 --> 02:53.110
you can copy that API key here though,

02:53.130 --> 02:57.470
so the string you see here next to API key. Copy that

03:01.360 --> 03:07.660
and with that, if you go back you can paste that key in here, just like that.

03:07.780 --> 03:14.300
Now we also need a second argument in the fetch request here because we need to set the method to post

03:14.300 --> 03:20.610
because we should send a post request and we need to attach a body, that body needs to be stringified

03:20.660 --> 03:27.450
and then it should be a javascript object that has an e-mail, password and the return secure

03:27.470 --> 03:29.360
token property,

03:29.360 --> 03:34.970
so e-mail, password and return secure token.

03:35.360 --> 03:38.160
Now return secure token can immediately be set to true,

03:38.210 --> 03:41.310
I want to get the token, the email and password

03:41.450 --> 03:44.160
I will assume that I get this from auth data

03:44.300 --> 03:50.960
and if we have a look at our auth screen where we in the end call on login,

03:54.790 --> 04:02.740
here we pass this auth data object that has an e-mail and password field. So we can use that here, we

04:02.740 --> 04:11.500
can assign e-mail to auth data e-mail therefore and we can assign password to auth data password and

04:11.500 --> 04:14.190
that should be passing all the data to the backend

04:14.200 --> 04:18.220
we need to successfully create a new user.

04:18.280 --> 04:25.910
Now we should of course also catch any errors and handle them in whichever way you want, here

04:26.020 --> 04:34.610
I will log them to the console and also alert authentication failed,

04:34.610 --> 04:36.870
please try again

04:37.010 --> 04:46.230
but I'll also of course add a then block where I want to handle the success case where I first of all extract

04:46.230 --> 04:47.920
the json data we get back

04:47.920 --> 04:56.080
and then we have this parsed response which we could use and I will simply log that to the console for

04:56.080 --> 04:58.760
now, we will later use that differently though.

04:58.840 --> 05:01.510
So with that we get the authSignUp action,

05:01.660 --> 05:06.040
now the idea is to use that from inside try auth here,

05:06.050 --> 05:12.700
so there I will also return a function which gets dispatched so I will also take advantage of redux

05:12.700 --> 05:13.820
thunk here.

05:14.110 --> 05:16.570
I won't send the fetch request here though

05:16.720 --> 05:18.680
but I will dispatch auth

05:18.730 --> 05:21.590
sign up and pass on the auth data here.

05:21.730 --> 05:25.730
So this is basically a function which will then trigger a different action

05:25.840 --> 05:32.230
and it becomes important because I will soon update this to also handle login actions so that this

05:32.230 --> 05:36.520
kind of serves as a splitter which then dispatches some other action,

05:36.520 --> 05:39.610
in this case right now only the sign up action though,

05:40.050 --> 05:44.480
so now we should have everything in place to send a sign up request.

05:44.620 --> 05:50.590
Now right now this is always sent no matter in which mode our form is, we will change this soon.

05:50.590 --> 05:52.140
Now with that, all finished, we can test it

05:52.150 --> 05:57.260
but there's one thing I want to do or I have to do, on the fetch request method and body,

05:57.280 --> 06:05.020
that was enough when targeting the firebase database or when targeting our own function, our cloud

06:05.020 --> 06:08.350
function, here for this API endpoint,

06:08.350 --> 06:13.380
I also need to set some headers, simply pass a javascript object here,

06:13.570 --> 06:21.320
one header to be precise, the content type which has to be just application.json

06:21.610 --> 06:23.440
otherwise it will fail.

06:23.440 --> 06:28.800
So with that let's try it, I'll reload my iOS app, that is where the debugger is also connected to

06:29.080 --> 06:36.200
and then let's enter some credentials here and hit submit and we will be redirected to the tabs page

06:36.220 --> 06:44.290
but we get this log down there which actually comes from firebase which contains some interesting data

06:44.410 --> 06:45.870
amongst that the emails we used

06:46.090 --> 06:48.460
and this token which will become important.

06:48.550 --> 06:49.840
We also got another token,

06:49.840 --> 06:56.350
I'll talk about this later but for now, let's focus on this token here, we also get back the ID of

06:56.350 --> 06:59.920
the user which was automatically generated by firebase.

06:59.920 --> 07:06.520
Now on firebase, if you refresh this sign in users page, you see the e-mail address you used

07:06.640 --> 07:08.380
and this user ID too.

07:08.560 --> 07:10.780
So that indeed did work

07:11.050 --> 07:17.890
and with that, we have a way of creating a new user, we get back this token which will soon become important

07:17.950 --> 07:20.570
but first of all there are a couple of other things I want to do.

07:20.680 --> 07:25.940
I don't directly want to load the next page because if this fails, I don't want to do that

07:26.150 --> 07:31.000
and additionally what you'll notice, if I use exactly the same email address,

07:31.000 --> 07:35.100
so make sure it's the same used before and I submit again,

07:35.350 --> 07:36.910
obviously the tabs are loaded,

07:36.950 --> 07:43.740
that's what I want to fix, that we check this but you also see that I get an error now. In this error object,

07:43.870 --> 07:50.320
we have code 400 email exists and still this is not coming from our catch block,

07:50.440 --> 07:58.000
it's coming from line 28 so it's coming from the normal then block because the 400 error code does actually

07:58.000 --> 08:00.300
not trigger this catch here.

08:00.520 --> 08:08.830
So we should make sure that here we also handle cases where we got error responses and we also should

08:08.830 --> 08:14.570
make sure that we don't load the tabs page if we are not logged in yet,

08:14.800 --> 08:21.310
additionally even though it is super fast, firebase is super fast, it would be nice to see some activity

08:21.310 --> 08:25.210
indicator here whilst we are waiting for the response.

08:25.210 --> 08:27.620
These are all things I want to tackle in the next lecture.
