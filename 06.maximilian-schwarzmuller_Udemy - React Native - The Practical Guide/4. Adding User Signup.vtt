WEBVTT

00:02.170 --> 00:05.530
Now as I mentioned firebase has authentication built in.

00:05.530 --> 00:11.350
We just need to go to the authentication area there and then click on setup sign and method and there

00:11.350 --> 00:16.500
choose password and email or e-mail password here enabled is click save.

00:16.600 --> 00:18.550
And with that we have it enabled.

00:18.550 --> 00:25.640
Now we can send requests to a firebase API to create users or to locked them in now in order to find

00:25.640 --> 00:27.140
out where to send the requests.

00:27.140 --> 00:32.630
You can google for firebase the rest of the API and you will find these official docs where you learn

00:32.630 --> 00:36.180
how to create and sign and users with their API.

00:36.210 --> 00:40.820
Then there are a bunch of endpoints for different things here in this apple focus on signing up and

00:40.820 --> 00:41.440
signing it.

00:41.540 --> 00:45.200
So if you click on sign up with e-mail and password we learn how that works.

00:45.290 --> 00:52.250
We need to send a HDP request a post request with this content type to this you are L enter our own

00:52.280 --> 00:58.890
API key here which I'll show you where you get it from in a second and attach this body to the request.

00:58.910 --> 01:05.180
So e-mail password and then does return secure token field which should basically always be true as

01:05.180 --> 01:10.820
a response will get back a token that's that token I mentioned on the slide while the email we used

01:10.940 --> 01:13.790
a refresh token which is more advanced.

01:13.790 --> 01:19.430
This token here will expire actually after this amount of seconds which we all to get back with a refresh

01:19.430 --> 01:22.350
token we could recreate it Reveille dated.

01:22.910 --> 01:26.460
Without having the user to log in again will not do that here.

01:26.570 --> 01:31.100
You would have a separate end point to which you sent the refresh token to get a new I.D. token.

01:31.100 --> 01:37.310
We'll keep it simple here and just use that token and lock the user in again after the expiry time because

01:37.310 --> 01:39.080
that expiry time is also something we get.

01:39.080 --> 01:43.880
So did we know when this token will become invalid and can't be used anymore because we'll have to clean

01:43.880 --> 01:49.850
it up in our app by then so that we don't try attaching this invalid token to future requests to our

01:49.850 --> 01:56.600
database and local I.D. That's the user I.D. of the user which firebase created on its servers because

01:56.600 --> 02:02.050
we do not have to do any of that user management firebase will do that we don't need to write any suicide

02:02.060 --> 02:03.380
code.

02:03.440 --> 02:07.610
So what we need to do is send a HDP request.

02:07.610 --> 02:13.340
And since I also will manage this all with redux I will create a new action creator for this and I'll

02:13.340 --> 02:14.500
name it off.

02:14.510 --> 02:20.720
I will also already create a reducer because we will also manage some off related stuff there for example

02:20.720 --> 02:22.790
to token into user I.D..

02:23.090 --> 02:25.980
Let's start with the action though and let's.

02:26.510 --> 02:31.810
Hence export action creator here which could be named sign up.

02:31.940 --> 02:37.070
Makes sense to start with that because log in users will only be possible after we created at least

02:37.070 --> 02:40.130
one user so here in sign up.

02:40.130 --> 02:44.590
I want to be able to well create a new user and for that we'll need an email and a password.

02:44.600 --> 02:50.420
So dad should be passed to just sign up action creator from outside.

02:50.690 --> 02:56.750
Now then this will send the HBP request and in order to be able to do that we'll use the redux of funk

02:56.750 --> 03:01.180
package again and therefore return async dispatch here.

03:01.460 --> 03:07.970
So we return a function which can use async await which gets that D dispatch function as an argument

03:08.000 --> 03:14.150
passed in by the redux func middleware we started using in the last H2 new module of this course and

03:14.150 --> 03:20.480
this allows us to run async code before we then dispatch an action that actually reaches our story.

03:20.620 --> 03:25.940
Now for that will also need the action identifier for dead action which we later want to handle in our

03:25.940 --> 03:31.590
store and they are all just use sign up which also has sign up as a string identifier.

03:31.850 --> 03:39.290
So here in the end we'll then dispatch this action object where the type is sign up and where we will

03:39.290 --> 03:45.940
probably then also add some extra data but before we do that we need to send the H TTP request.

03:46.020 --> 03:51.170
Now that can be done with the fetch API as you learned in the last module and definitely go through

03:51.170 --> 03:52.360
that module first.

03:52.370 --> 04:01.130
Therefore and this is to you are L we need to send the request to so we can copy that added here and

04:01.130 --> 04:03.700
now we have that API key thing.

04:04.220 --> 04:07.240
Now that's something we can get from firebase by clicking on the gear.

04:07.250 --> 04:09.700
I can hear project settings there.

04:09.760 --> 04:13.450
You'll find that web AP API key and that's exactly what you need.

04:13.460 --> 04:19.680
Copy that and replace API key including the square brackets with that key.

04:19.700 --> 04:25.970
This is a U R L we will need to send a request to ask the official docs tell us we need to send a post

04:25.970 --> 04:26.870
request.

04:26.990 --> 04:30.950
So as you learned we need to add this second argument here to fetch.

04:30.950 --> 04:36.680
Which is the object which allows us to configure that request and there we can set the method to post

04:37.280 --> 04:44.180
and also add some headers because we'll need to add the application adjacent header so the content type

04:44.180 --> 04:52.130
header which should have a value of application Jason and we'll need to add a body and that body needs

04:52.130 --> 04:58.700
to be in Jason format which we can get with Jason stringy Fi and do data one a string of Fi needs to

04:58.700 --> 05:07.660
be an object with these three keys email password and return secure token so here of course email refers

05:07.660 --> 05:14.890
to the email we're getting as an argument here the same for password which refers to the password argument

05:14.890 --> 05:22.060
we're getting and then it's this third and I'll just copy it to not mis type it.

05:22.060 --> 05:29.770
Return secure token argument here or key value pair where the value should just be true this request

05:29.770 --> 05:31.770
should create a new user.

05:31.900 --> 05:38.530
Now we can wait for its response with the await keyword and then as you learned earlier we can check

05:38.620 --> 05:46.660
if the response is not okay if that's the case I want to throw a new error where I say something went

05:46.930 --> 05:55.340
wrong and we'll have a look at more detailed error handling later for now that's it and if it is okay

05:55.380 --> 06:02.970
however I want to get my response data by waiting for response Jason which will unpack the response

06:02.970 --> 06:09.780
body and automatically transform it from Jason format to JavaScript so to a javascript object or array

06:10.500 --> 06:16.200
and now we will be able to work with that and for the moment all simply locked his response data here

06:17.910 --> 06:23.590
now we haven't added the rest of our all related redux store we'll do that later but we have something

06:23.590 --> 06:28.840
that should work we should be able to dispatch this and therefore it sends such a sign up request.

06:28.840 --> 06:36.460
So now we can go back to the off screen and there in the end when we click does log in button which

06:36.460 --> 06:41.770
is incorrectly labeled log in at the moment when we actually do sign up but let's leave it like this

06:41.770 --> 06:42.420
for the moment.

06:42.460 --> 06:50.330
So when we click this button I want to send to sign up request so for that we need to ask before import

06:50.390 --> 06:55.810
use this patch from react redux so that we can dispatch actions.

06:56.150 --> 07:05.810
And of course import everything as of actions from the store folder data from the actions folder and

07:05.810 --> 07:09.590
there from the off file.

07:09.840 --> 07:13.170
And with that added We can add a function here.

07:13.190 --> 07:17.880
You write in line function or like this named function stored in a constant.

07:18.410 --> 07:20.850
Which I'll name sign up.

07:20.990 --> 07:23.240
Handler dear.

07:23.250 --> 07:27.780
I expect no arguments and there I then want to dispatch.

07:27.780 --> 07:33.590
So we need to get access to that dispatch function by executing used dispatch.

07:33.650 --> 07:36.090
Then here we can dispatch.

07:36.210 --> 07:40.860
Does all actions sign up event or sign up.

07:40.860 --> 07:41.410
Action.

07:41.430 --> 07:44.430
Not a problem is this requires the email and the password.

07:44.430 --> 07:46.020
And right now I'm not storing this.

07:46.020 --> 07:51.500
I get this in my input but here on input change I'm not storing that data which I of course should.

07:51.570 --> 07:56.320
Now we can have a look at our other form here to see how we did that.

07:56.370 --> 08:06.760
So in the edit product screen we of course have our form reducer here which manages our entire formulated

08:06.910 --> 08:08.670
validity and the values.

08:08.800 --> 08:15.790
So in the end we can copy that and add it to the off screen outside of all screen component like this

08:16.990 --> 08:24.140
and go back to the added product screen to then also grab the part down there where we initialize stead

08:24.140 --> 08:25.400
with use reducer.

08:25.430 --> 08:28.970
So copy all of this and added to the off screen as well.

08:28.970 --> 08:38.730
Now inside of the component maybe here and for that to work we also need to import use reducer from

08:38.730 --> 08:40.350
react.

08:40.480 --> 08:46.140
And with that imported now we just need to tweak it a little bit this form reducer is fine.

08:46.150 --> 08:51.160
And by the way you could outsource this into a separate file because we're using the same type of reducer

08:51.400 --> 08:53.860
in both the offscreen and the edit product screen.

08:53.860 --> 08:57.160
You could even create a custom hook if you know how that works.

08:57.160 --> 08:59.180
For now I'll just leave it like this.

08:59.230 --> 09:01.560
One thing I need though is the form input update.

09:01.570 --> 09:04.620
Let me grab that from the edit product screen as well.

09:04.630 --> 09:05.810
This constant here.

09:05.830 --> 09:08.020
Let's move that in off screen as well.

09:08.980 --> 09:09.670
So now is that.

09:09.670 --> 09:15.190
That's all fine but down there where I call use reducer and initialized is all that of course looks

09:15.190 --> 09:16.470
differently.

09:16.630 --> 09:22.120
We should have an email which initially is empty and a password which initially is empty and for the

09:22.120 --> 09:23.720
validity is it's the same.

09:23.800 --> 09:28.690
We just have an email which in this initially is not valid and we have a password which initially is

09:28.690 --> 09:33.310
not valid and the overall form therefore also initially is not valid.

09:34.570 --> 09:40.240
Now dispatch form state should be triggered whenever our input changes here

09:43.290 --> 09:49.830
so here in on input change of course you know and you can see it in the edit product screen.

09:49.830 --> 09:55.230
We get free values we get the input identifier the input value and the input validity.

09:56.100 --> 10:03.630
So in the end we can just copy this year from edit product screen and move it to the off screen and

10:03.630 --> 10:10.630
replace this anonymous function with it or actually stored this in a new variable here.

10:10.770 --> 10:18.620
Input change handler which now holds dysfunction now just as in the added product screen user.

10:18.620 --> 10:24.620
Wrap this with use callback to make sure that this doesn't re render when it shouldn't.

10:24.620 --> 10:31.190
So actually we should grab it here including the use callback call and the dependencies of use callback.

10:31.250 --> 10:38.360
So this is actually what should be used down there on the input change handler.

10:38.460 --> 10:45.690
Now it is input change handler can be bound or can be set here to the on input change props so that

10:45.720 --> 10:48.340
these props target dysfunction.

10:48.840 --> 10:55.740
And now is that we're storing our foreign values or our input values in our forum state which we handled

10:55.740 --> 10:59.370
with use reduced trends on.

10:59.380 --> 11:04.630
So now it's this forum state I'm interested in here in my sign up handler because they're to sign up

11:04.630 --> 11:11.830
I need to pass from state input values stored email and form state input value stored password.

11:11.840 --> 11:18.850
So these two values which were gathered and now to sign up handler here dysfunction can be bound to

11:18.850 --> 11:24.320
this button down there to log in button here and on press because this is the function of when appointed

11:24.560 --> 11:28.160
to execute it when we press this button.

11:28.410 --> 11:34.810
Let's see where dad works as it should if I start entering values here

11:38.160 --> 11:42.750
I do get my validation errors but somehow they're not showing up.

11:44.040 --> 11:50.950
That's the case because it's not error message here but error text on the inputs into the off screen.

11:51.060 --> 11:54.920
So if we change that error message to error text.

11:55.020 --> 11:58.460
Now if we test us if I click in here to have out of there I get my warnings.

11:58.500 --> 12:00.960
Now if I enter a valid e-mail address this is gone.

12:00.960 --> 12:08.350
If I enter a password that's long enough that's gone if I now click log in year let's see where that

12:08.350 --> 12:08.740
works.

12:08.740 --> 12:14.880
Let's go to Firebase 2 authentication and dare you now should see and you user.

12:14.950 --> 12:17.360
This is the user which just was created.

12:17.530 --> 12:19.810
So signing up works.

12:19.810 --> 12:24.060
Now let's make sure we can also switch to log in mode and make that work as well.

12:25.100 --> 12:28.970
By the way also note that this here is the data we got back.

12:29.030 --> 12:30.150
So that's the response.

12:30.150 --> 12:31.810
This object with email.

12:31.880 --> 12:32.300
How long.

12:32.300 --> 12:34.440
The token is valid in seconds.

12:34.550 --> 12:40.220
Then the token itself which is does long cryptic string then also deed the idea of the user which was

12:40.220 --> 12:41.960
created and that refresh token.
