WEBVTT

00:02.640 --> 00:06.650
In the last lecture I explained how we could get the token and that would work,

00:06.650 --> 00:08.070
nothing wrong with that

00:08.480 --> 00:11.770
but let me show you a different and more reusable way.

00:12.600 --> 00:21.150
In my auth action file, I want to create a new action which I'll name auth get token, something like

00:21.150 --> 00:21.800
that,

00:22.050 --> 00:24.050
I don't expect arguments here,

00:24.060 --> 00:28.050
the idea here is to in the end kind of return a token.

00:28.380 --> 00:37.400
So I will return dispatch here, return a function, so as we always do if we want to run some side effects

00:37.460 --> 00:41.450
and now here's some cool feature you can use when working with redux thunk,

00:41.620 --> 00:46.690
you can actually return a promise here and that will later be very useful.

00:46.720 --> 00:50.380
So what I want to do here is here I want to get the token,

00:50.380 --> 00:54.170
so here I will not only get dispatch but also get state.

00:54.520 --> 01:05.890
And here I then want to get token by accessing get state auth token, if the token is not true-ish,

01:06.650 --> 01:13.940
then I will return here and if it is true-ish, I will also return but I will return the token.

01:14.100 --> 01:23.450
However what I will do is I will use a promise for all this, so I'll create my own promise with new promise,

01:23.450 --> 01:25.330
that is supported by react native,

01:25.410 --> 01:28.820
a promise takes a function as an argument to the constructor,

01:28.820 --> 01:32.740
this function in turn has two arguments, resolve and reject

01:32.780 --> 01:38.620
which in turn are functions we can execute inside the promise to resolve or reject the promise.

01:39.140 --> 01:47.460
And now inside the promise function here, I can execute the code here to get the token

01:50.570 --> 01:55.260
and if we got no token, I'll recall reject here,

01:56.610 --> 02:01.230
optionally you pass some error message, else

02:01.360 --> 02:06.060
I will call resolve here and resolve the token we got.

02:08.200 --> 02:11.660
Now this promise approach has one big advantage,

02:11.800 --> 02:21.640
we can now use auth get token as a helper function so to say, from anywhere in our application.

02:21.640 --> 02:23.240
Now let me show you how that would work,

02:23.410 --> 02:31.580
first of all I export it, so I'll export this auth get token here in index.js and then in places.js,

02:31.720 --> 02:34.100
I will import it from there,

02:34.240 --> 02:36.820
so there I will import auth get token.

02:37.000 --> 02:40.350
Now back to get places, here

02:40.510 --> 02:44.940
I can now first of all dispatch auth get token like this

02:45.190 --> 02:51.040
but now since we returned a promise there, what's actually supported by redux thunk is that we chain a

02:51.100 --> 02:54.100
then call here and a catch block.

02:54.400 --> 02:58.010
Now the catch block will be triggered if we get no valid token,

02:58.270 --> 03:00.570
so here I will throw an alert,

03:00.820 --> 03:02.770
no valid token found.

03:04.980 --> 03:08.180
In the then block however, we do get the token,

03:08.380 --> 03:12.660
so here is where I want to send this fetch request,

03:12.730 --> 03:21.160
so here I will return fetch since that returns another promise and attach this auth query parameter

03:21.280 --> 03:22.400
which uses the token

03:22.420 --> 03:30.880
I retrieved in auth get token. And now all the other steps here can simply be chained after this first

03:30.880 --> 03:37.720
catch block which should handle token errors only and with that, we should have a working get places

03:37.720 --> 03:38.710
function,

03:38.710 --> 03:43.660
the cool thing is that we can easily reuse this whenever we need to get the token and it will be even

03:43.660 --> 03:46.340
more helpful later in the course as you will see.

03:46.360 --> 03:48.940
So let's see if that approach works, let's reload

03:48.970 --> 03:52.420
the app and let's try logging in here

03:53.310 --> 03:57.540
and we get an error because I made one mistake.

03:57.720 --> 03:58.800
This would all work

03:58.830 --> 04:02.970
but in my auth action creator, I do create the promise,

04:03.150 --> 04:05.460
well I also need to return it.

04:05.910 --> 04:13.370
So now with that in place, if we do return it, let's reload the application and let's login again

04:14.850 --> 04:21.930
and now you see we get no error and we can find the places indeed. So this is now working and now we get

04:21.930 --> 04:24.750
this really reuseable way of getting the token,

04:25.050 --> 04:29.710
so in places we can for example also use it to delete a place,

04:29.760 --> 04:37.760
all I have to do is I will dispatch auth get token and then call then here

04:42.400 --> 04:45.300
get the token here and then proceed

04:45.390 --> 04:50.890
and I also only want to remove the place locally if we got a token because otherwise the backend request

04:50.890 --> 04:53.830
will fail anyway so no need in trying it.

04:53.860 --> 04:58.910
I will then also add my fetch block and return this here as a promise,

04:58.960 --> 05:04.720
I will also append my token here, so auth equals plus token at the end

05:06.220 --> 05:08.060
and of course I also want to add

05:08.080 --> 05:11.340
this first catch block where I catch token errors.

05:11.590 --> 05:13.900
So I do this right before this

05:13.930 --> 05:21.430
then block here, catch alert no valid token found and thereafter, we can copy all the old code and simply

05:21.430 --> 05:22.630
chain it

05:22.680 --> 05:24.890
after our first request.

05:25.030 --> 05:28.560
Now this is how this looks now, we dispatch auth get token,

05:28.570 --> 05:31.770
catch any token errors, then we get the token

05:31.810 --> 05:38.470
if we don't have an error, then we dispatch remove place to remove it locally, then we send the request

05:38.710 --> 05:44.630
and then we do the rest with the request. And the same of course also for add places,

05:44.940 --> 05:46.650
there we also can now

05:46.660 --> 05:53.810
dispatch auth get token, call then

05:54.080 --> 06:03.100
and of course also call catch, so let's copy the same catch block we used before maybe, like this and

06:03.250 --> 06:04.200
in the then block

06:04.200 --> 06:07.740
here, we got the token in this function,

06:07.740 --> 06:11.020
I now want to start loading,

06:11.310 --> 06:18.800
well actually I want to do this first before everything maybe.

06:18.910 --> 06:24.200
So in this function, I just want to send my fetch request, return the result

06:24.210 --> 06:24.760
of it

06:24.770 --> 06:26.710
and of course

06:26.730 --> 06:33.550
hmm, this is actually targeting the cloud functions and not my firebase database.

06:33.550 --> 06:36.060
So this is different here,

06:36.130 --> 06:38.040
we'll have to revisit this.

06:38.230 --> 06:45.190
So for now leave it as it but be aware that this will fail because for cloud functions, it's up to us

06:45.190 --> 06:50.080
to write our own logic on how we check for authentication or not,

06:50.080 --> 06:57.460
it's totally decoupled of any rules we set up for our firebase database, our cloud function can have its

06:57.460 --> 07:00.640
own logic and we will need to add this logic.

07:00.730 --> 07:04.540
So for now, add place will not work as expected,

07:04.750 --> 07:10.130
get places will though and delete places also will work. The rest,

07:10.150 --> 07:14.890
well that is something we'll have to work on and we'll do that in the next lecture.
