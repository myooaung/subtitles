WEBVTT

00:02.390 --> 00:05.100
We defined action types and action creators,

00:05.160 --> 00:09.060
let's now go to a reducer and do something for the different actions.

00:09.360 --> 00:17.440
So inside my switch statement, I'll add my first case and the cases are simply the action types as defined

00:17.570 --> 00:22.680
in the action types file, not the action creators because these are only there for creating actions

00:22.680 --> 00:24.900
we want to dispatch, in the reducer,

00:24.900 --> 00:27.890
it's not about dispatching though, it's about handling.

00:28.140 --> 00:34.890
So let's simply import the action types here, going to import something from

00:34.890 --> 00:38.460
let's go up to the actions folder and then to the action types file

00:38.580 --> 00:45.810
and that something will be add place, delete place, select place and deselect place because I want

00:45.810 --> 00:49.060
to handle all these cases in this reducer.

00:49.380 --> 00:49.800
So there

00:49.800 --> 00:56.860
first of all, let me handle the add place case and we can essentially grab the logic from our app.js

00:56.870 --> 00:57.810
file,

00:58.050 --> 01:04.770
there we have the place add handler and there where we update the state, we update the places array

01:05.070 --> 01:10.190
by concatenating a new place to the existing list.

01:10.200 --> 01:18.390
So in the end, I can just copy that code here and put it into my reducer here, though not directly here

01:18.390 --> 01:20.070
in the case, instead

01:20.100 --> 01:28.390
first of all, we always return a new state. In redux we never directly manipulate the old one,

01:28.470 --> 01:33.790
we always return a brand new state and this will replace the old one,

01:33.960 --> 01:41.370
this concept is called immutability and it makes sure that our application is predictable and that we

01:41.370 --> 01:47.670
don't mess around with the old state and therefore maybe add something which isn't picked up by the

01:47.670 --> 01:50.430
rest of the app or something like that.

01:50.460 --> 01:54.480
So here we return a brand new object which represents our state,

01:54.480 --> 02:00.780
therefore to not lose anything from the old state, I'll first of all copy the old state properties and

02:00.780 --> 02:07.590
I do this with the spread operator which are just three dots and then the state. This looks strange but

02:07.590 --> 02:14.170
it essentially pulls out all the properties of the old state and adds them to this new object,

02:14.220 --> 02:21.870
now every new property we add here either is added to it or overrides existing properties we pulled out

02:22.290 --> 02:26.140
but old properties which we don't override will be kept

02:26.160 --> 02:27.320
which we of course want

02:27.390 --> 02:30.360
because this new object is going to replace our old state,

02:30.360 --> 02:33.500
we certainly don't want to lose anything from that state.

02:33.660 --> 02:37.660
So now with that here, we got the old state copied,

02:37.710 --> 02:40.350
now we copy in the code we had from

02:40.400 --> 02:47.300
app.js where we override places, we use the same name here for our properties so we can keep that

02:47.790 --> 02:56.700
and then we take the old state not previous state, state places and concatenate our new state.

02:56.700 --> 03:00.620
We don't use place name here though but we use action

03:00.840 --> 03:05.890
and now let's have a look at the action creator which property we're eventually going to receive,

03:06.150 --> 03:10.860
that's going to be a place name property because that's the action we're handling,

03:10.860 --> 03:16.950
so let's pick place name here on the action.

03:16.950 --> 03:25.530
This now is the logic we need to create our new state, our new state where we update the places,

03:25.620 --> 03:28.860
now that's the add place case,

03:28.860 --> 03:32.000
now let's add a case for deleting a place

03:32.150 --> 03:38.550
and again let's have a look at the app.js file. There in the place delete handler, you see that

03:38.580 --> 03:45.420
we update places by filtering, essentially removing one element from the old places and then setting

03:45.420 --> 03:47.740
selected place to null.

03:47.790 --> 03:50.210
So let me copy that too,

03:50.400 --> 03:52.710
let's go back to our places reducer

03:52.740 --> 04:00.750
in the case here, let's first of all return a new javascript object where I then simply again copy all

04:00.870 --> 04:04.380
old state properties and then I'll copy in or I'll

04:04.430 --> 04:06.470
paste in what I just copied.

04:06.810 --> 04:13.410
We override places by reaching out to state, not previous state, state places and filtering it and

04:13.410 --> 04:18.870
then here in the filter, we compare the key of the place we're currently looking at,

04:18.870 --> 04:26.040
keep in mind this function is executed on every element in the places array and we compare that key to

04:26.240 --> 04:26.540
the

04:26.630 --> 04:29.130
selected place key.

04:29.130 --> 04:31.710
Now for that, we can reach out to state,

04:31.770 --> 04:35.390
have a look at the selected place and access its key.

04:35.700 --> 04:41.160
Since the delete action will only be dispatchable from within the modal, we will always have a selected

04:41.190 --> 04:47.050
place and thereafter we also set selected place to null.

04:47.540 --> 04:54.010
So now we add a delete place case, let's now add the select place case

04:54.200 --> 05:02.600
and as always, let's simply return a javascript object there first of all, in there let's copy all old state

05:02.600 --> 05:08.170
properties and then we can have a look at the app.js file again. What are we doing when we select

05:08.170 --> 05:09.420
a place?

05:09.830 --> 05:15.590
Well we set the selected place property of course and we do that by finding the place we clicked on, so

05:15.800 --> 05:22.950
by finding the place which has our key, so let's go back to our reducer and let's paste it in here, selected

05:22.950 --> 05:24.020
place,

05:24.020 --> 05:31.730
we reach out to state places and we try to find a place where the key matches the key we actually receive

05:31.820 --> 05:33.460
on our action.

05:33.500 --> 05:37.070
So let's have a look at our action creator again for selecting,

05:37.070 --> 05:40.300
there you see we'll have a place key property,

05:40.460 --> 05:47.690
so let's use that property in our reducer, there we reach out to action.place key. With that, we have

05:47.690 --> 05:50.070
the logic to select a place.

05:50.090 --> 05:52.410
Now let's add a last case for

05:52.490 --> 05:54.580
unselecting a place,

05:54.960 --> 06:01.940
there we also return a javascript object and copy all old state properties and unselecting then is super

06:01.940 --> 06:06.620
simple, we just set selected place to null like this.

06:06.620 --> 06:08.750
And with that, our reducer is looking good,

06:08.750 --> 06:13.730
with that we got a reducer where we can handle all these cases.

06:13.850 --> 06:22.550
The next goal of course is to connect our react native app to redux so that we can actually dispatch

06:22.550 --> 06:25.860
our action and we can get the state from redux.

06:26.060 --> 06:28.640
Let's do that over the next lectures.
