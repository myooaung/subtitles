WEBVTT

00:02.670 --> 00:08.610
So we want to find the meals that fit into the category we selected them for actually in the category

00:08.610 --> 00:09.660
meal screen component.

00:09.660 --> 00:15.000
We're not really interested in the selected category but we're highly interested in the meals that belong

00:15.000 --> 00:17.150
to that category now.

00:17.150 --> 00:22.910
For that we can first of all import our meals array because that holds all possible meals we have.

00:22.910 --> 00:28.550
And now we want to filter out those which actually have the category idea we selected in their category

00:28.550 --> 00:35.480
I.D. array which every meal has you will see in the dummy data that every meal has this array of category

00:35.480 --> 00:36.680
I.D. to which it belongs.

00:36.680 --> 00:39.320
So that's what we'll use for filtering.

00:39.320 --> 00:46.010
So in the category meals screen we want to find the meals that belong to that category we selected and

00:46.070 --> 00:49.850
all stored them in a concern named displayed meals.

00:49.880 --> 00:54.230
The name is of course up to you and they're all look at my meals.

00:54.230 --> 01:00.260
So that's the entire meals array and use the filter method javascript offers to run a function on every

01:00.260 --> 01:05.840
meal in that array where we get the meal automatically as an argument and where we have to return true

01:06.110 --> 01:10.740
if it's one of the meals that we want to keep or false if it's one of the meals we don't want to keep.

01:10.790 --> 01:17.510
And we want to keep all meals where the category I.D. property off that meal we're looking at contains

01:17.510 --> 01:19.340
the category I.D. we select that here.

01:20.090 --> 01:29.990
So here I will return true if meal category I.D. index off which is also a javascript method the cat

01:30.020 --> 01:36.470
I.D. we extracted from the root parents if that is greater or equal than zero because it will be minus

01:36.470 --> 01:43.490
one if the category I.D. is not part of the category I.D. If it's zero or greater then we know that

01:43.490 --> 01:50.540
this meal has this category I.D. in its categories I.D. category I.D. array and this will give us an

01:50.540 --> 01:53.690
array of displayed meals for that selected category.

01:53.690 --> 01:57.710
Now that's what we want out here now for this.

01:57.710 --> 02:04.280
I have my view here and in that view I again want to render a list and now it will be a list and not

02:04.280 --> 02:11.360
a grid so set off the button which will not need anymore I'll import flat list here and then render

02:11.360 --> 02:13.590
my flat list like this.

02:13.850 --> 02:19.910
And now they are the data I feed in of course is my displayed meals array because that are the meals

02:19.970 --> 02:22.490
I want to render to the screen.

02:22.700 --> 02:30.140
Now as mentioned before modern versions of reactive automatically look for a D field in a meal to use

02:30.140 --> 02:37.970
that as a key in flat list if you're using an older version or all just practices again I'll add a key

02:37.970 --> 02:44.150
extractor here where I get the item in the index and I know that on each meal I'll have I.D. field because

02:44.150 --> 02:48.500
that's what we set up here in the model and that will be what I use as a key in my list so I'll use

02:48.500 --> 02:50.570
that here in Key extractor.

02:50.570 --> 02:56.060
More important than the key extractor however is render item which of course should point at a function

02:56.090 --> 03:05.710
that we use to render a single item in that list and they're all just as before setup a new function.

03:05.880 --> 03:15.460
I'll do it here inside of my component functions so that I can use props and I'll named this render

03:15.520 --> 03:21.310
meal item the name is totally up to you in there I will get some item data I notice because the flat

03:21.310 --> 03:27.940
list passes us as item data object into dysfunction and then there we have to return a j as X code that

03:27.940 --> 03:34.810
should render a meal item and they're all render a view and for the moment then simply a text component

03:34.810 --> 03:43.390
in there where I want to output item data dot item dot titles or just the name of the meal for now later

03:43.390 --> 03:49.420
will also display the image there but for now it is will do and now render meal item is what I use here

03:49.660 --> 04:00.240
ask the function render item should point at this should render a basic list of meals let's see whether

04:00.240 --> 04:07.560
that works if we save this and we now select let's say Italian I see spaghetti with tomato sauce doesn't

04:07.560 --> 04:08.810
look too bad.

04:08.880 --> 04:15.120
Quick and Easy receive for meals and hamburgers we see the classic hamburger light and lovely we see

04:15.120 --> 04:21.640
two recipes so that seems to work looks like recipes are selected based on the category we chose and

04:21.660 --> 04:28.500
that's of course right now it's again time to work a little bit on the styling because I'm not sure

04:28.500 --> 04:31.170
about you but I think we can improve that a little bit.
