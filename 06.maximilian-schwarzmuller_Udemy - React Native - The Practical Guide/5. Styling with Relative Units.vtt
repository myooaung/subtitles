WEBVTT

00:02.370 --> 00:08.580
In the last lecture we played around with flex box to position this and we will do more flexible styling

00:08.580 --> 00:12.210
over this course and I can only encourage you to do it on your own too

00:12.480 --> 00:16.050
but now let's focus on styling these text inputs,

00:16.050 --> 00:23.560
they don't look that great, do they? The reason for this is that by default, placeholders are not respected,

00:23.700 --> 00:29.620
so actually it takes as much space as needed by default and that's basically zero,

00:29.940 --> 00:33.610
so we have to set some default space for that

00:34.080 --> 00:36.750
and there are different approaches of doing that.

00:36.870 --> 00:42.210
Now the first approach you could use is you define some input property in your stylesheet and there

00:42.210 --> 00:46.440
you set the width to maybe 300, 300 pixels,

00:46.650 --> 00:53.960
you can now go to your text input, add the style property and bind it to styles input.

00:53.970 --> 00:56.340
Now I'm going to do this for all three of them

00:57.350 --> 01:01.690
and besides the code duplication we have here which we'll fix later,

01:01.910 --> 01:04.460
one issue we'll face is that now it looks good

01:04.530 --> 01:13.140
but what if we had a device that is actually not wide enough, that doesn't have a width of 300 pixels,

01:13.470 --> 01:15.140
what would then happen?

01:15.150 --> 01:19.360
It wouldn't look great because we would try to make it wider then we can,

01:20.070 --> 01:24.060
so hardcoding pixel values like these

01:24.090 --> 01:29.970
sometimes is necessary, sometimes makes sense but should be done with care.

01:30.000 --> 01:35.430
Now we will later learn how to find out how much space we have available and then this is better

01:35.430 --> 01:41.430
because then we can rule out that we try to assign a value that is more than we have available

01:41.430 --> 01:48.630
but a better approach might be to use a relative value, so we can convert this to maybe 80%

01:48.780 --> 01:52.540
and please note that this then has to be a string.

01:52.620 --> 01:57.930
So if we set this to 80%, now it takes 80% of the available width

01:58.080 --> 02:02.880
and that of course is much better because that can never be too much because it's always just 80%

02:02.880 --> 02:04.840
of what we got,

02:04.860 --> 02:07.770
so this already looks much better here.

02:08.410 --> 02:14.460
Now of course you noticed that as soon as we set this up, our placeholders here are no longer nicely

02:14.460 --> 02:20.070
centered but that simply happens because now we have a default width which is more or broader than these

02:20.070 --> 02:21.180
placeholders are,

02:21.210 --> 02:28.170
so the overall text input which we can't see on iOS is centered and not the placeholder but that's all

02:28.170 --> 02:28.650
right here,

02:28.650 --> 02:34.830
that's actually the behavior that makes more sense. An alternative to the approach shown here would

02:34.830 --> 02:38.790
be to wrap our text inputs into some view

02:41.450 --> 02:48.840
like this and then define like an input container, input container here

02:52.480 --> 02:56.990
where we set a width of maybe 80%

02:57.280 --> 02:59.120
and now I assign this here

02:59.260 --> 03:04.500
so style equals styles input container

03:04.960 --> 03:08.800
and for each input, we could then set the style to 100%.

03:08.800 --> 03:12.280
If we now save this, we get the same look as before,

03:12.280 --> 03:15.330
so what's the advantage of this approach.

03:15.390 --> 03:22.300
The advantage is that we could now create our own reusable input component which has some default styles

03:22.450 --> 03:29.650
if we wanted to add more styles and we could always use width 100% which makes our input far more

03:29.680 --> 03:34.810
reusable because we can use it anywhere in the application because in some places, we want 60%,

03:34.810 --> 03:36.550
in others, we want 80%.

03:36.940 --> 03:43.350
If we controlled it with the container, the input itself stays independent which is the better approach

03:43.350 --> 03:50.230
in my opinion because again if we outsource the text input into a pre-styled custom component, something

03:50.260 --> 03:51.730
I'll do in a second,

03:52.030 --> 03:56.560
then this makes it far easier to reuse it.

03:56.620 --> 04:01.170
So that's why I'll go for this approach here with the input container.

04:02.230 --> 04:09.240
Now with that we got our text input set up, we got a width that makes sense. In the next lecture,

04:09.240 --> 04:14.960
let's now dive into how we can use custom components for styling reasons.
