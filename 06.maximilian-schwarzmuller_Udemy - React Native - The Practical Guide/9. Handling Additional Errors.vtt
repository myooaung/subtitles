WEBVTT

00:02.110 --> 00:07.990
So now do we added storing fetching updating and deleting and therefore all the crud functionalities.

00:07.990 --> 00:12.070
And we had a look at showing a loading spinner and handling errors.

00:12.070 --> 00:14.020
There are two things missing.

00:14.020 --> 00:20.560
One is that when we actually place the order that we do send that order to a server too and that we

00:20.560 --> 00:22.900
stored the order there as well and not just locally.

00:22.900 --> 00:27.760
Because right now of course when you order something we see it here but as soon as we reload the app

00:27.760 --> 00:30.650
since we're not storing it on a server server that is lost.

00:30.660 --> 00:32.160
So that's one thing.

00:32.170 --> 00:35.130
The other thing is of course that we only show a loading spinner here.

00:35.200 --> 00:39.570
And we also only handle errors here on the admin screen if something goes wrong.

00:39.610 --> 00:43.970
We get no error all here if we added this and we submit this.

00:44.080 --> 00:47.320
We see no loading spinner whilst we're waiting for this to be submitted.

00:47.320 --> 00:49.120
So that's all something we could improve.

00:49.150 --> 00:51.310
And that's actually the part I want to start with.

00:52.210 --> 00:57.670
So here on the added product screen when we dispatch updating or creating in both cases does of course

00:57.670 --> 01:04.210
takes a while and indeed we get back a promise here because both in the update and create product action

01:04.600 --> 01:10.270
we're using the redux func feature of returning an async dispatch function here which they offer returns

01:10.270 --> 01:15.340
a promise which they offer is returned as part of our dispatch function call here.

01:15.520 --> 01:20.680
So Dan for we actually get the information whenever we're waiting for the response whether we got an

01:20.710 --> 01:22.470
error or whether we're done.

01:22.630 --> 01:24.380
We just need to use it.

01:24.520 --> 01:31.300
And of course we can use it in a similar way we did before with you with state imported from react and

01:31.300 --> 01:37.650
then by managing the loading and the error state here side note you could of course all the work with

01:37.650 --> 01:43.080
a reducer where you merge both states together if you wanted to with the help of the user the user hook

01:43.380 --> 01:43.650
here.

01:43.800 --> 01:52.750
However I'll stick to is loading and set is loading and initially of course this is false and also have

01:52.750 --> 02:02.510
the error and set error variables here with using state like this which initially is undefined.

02:02.880 --> 02:07.470
And now we just need to set this as we're dispatching actions or as we're getting errors.

02:07.470 --> 02:13.530
So here when we're about to dispatch this no matter if we're editing or if we're creating I want to

02:13.530 --> 02:25.000
set is loading to true and I also want to set my error here to false or not to false to null reset it.

02:25.190 --> 02:30.420
Now once we're done I want to do something else but for that we first of all need to wait for dispatching

02:30.420 --> 02:31.840
to be finished.

02:31.860 --> 02:37.350
Now we can therefore turn this into async function again just so that I can use to await key word in

02:37.350 --> 02:37.770
there.

02:37.770 --> 02:44.720
The alternative would be to not turn this into using function and simply add then and catch thereafter

02:44.770 --> 02:45.810
that would work as well.

02:45.810 --> 02:52.620
But I like to use async await so now we can await for both this patches to finish of course only one

02:52.620 --> 02:57.230
of the two will run because that's an if condition but we can wait for that to finish and therefore

02:57.330 --> 03:00.380
after it is a block we know Dad will be done dispatching.

03:00.370 --> 03:08.370
So here we can set is loading back to false that's the loading state now to handle errors we just need

03:08.370 --> 03:15.420
to wrap this with a try catch block and we can actually wrap the entire if block here with try catch

03:15.420 --> 03:23.250
so let's grab that move it in here and then catch any potential errors we might be getting here and

03:23.250 --> 03:29.400
now here I'll of course want to set my error or 2D error I'm getting here or to the error message I'm

03:29.400 --> 03:30.000
getting here

03:33.030 --> 03:39.720
now we're setting the error we're setting the loading state of course this has no effect here on this

03:39.780 --> 03:50.380
screen so to show a loading spinner we need to import the activity indicator from react native activity

03:50.410 --> 03:54.120
indicator from react native and to show an error.

03:54.130 --> 03:58.930
I also want to throw an alert and for Dad you need to make sure that you're importing the alert which

03:58.930 --> 04:10.540
we're already doing now as a next step to handle the floating state may be down there before I return

04:10.540 --> 04:19.930
my form I will return at will I will check if is loading is true and if it is I will return my view

04:19.930 --> 04:30.010
a year with the activity indicator in there and they are all set to size size too large and set to color

04:30.310 --> 04:38.980
two colors and for Danny to you need to make sure that you import that color is constant primary so

04:38.980 --> 04:47.480
make sure you have that colors constant imported here that's required and now I will also use to started

04:47.500 --> 04:55.120
here to add a new style this center to style to be precise here I will add centered and yes we could

04:55.120 --> 04:59.910
differ also outsource this into a separate wrapping component if you wish to.

05:00.010 --> 05:08.300
They are all set flex to one justify content to center and also align items to center like this.

05:08.410 --> 05:15.250
Now we can apply this center at style here to the view which I wrap around my activity indicator by

05:15.250 --> 05:19.990
setting the style here two styles stud centered.

05:20.040 --> 05:26.460
Now we should be seeing this was for a loading and on a side note we also now shouldn't navigate back

05:26.460 --> 05:27.480
before we're done.

05:27.840 --> 05:33.700
So if I add or if I remove that exclamation mark and then leave that input so that this is submitted

05:33.700 --> 05:34.640
then I click save.

05:34.770 --> 05:38.400
You saw the loading spinner and we only navigate back after this is done.

05:38.400 --> 05:42.180
Now firebase is super fast but still that is what happened.

05:42.330 --> 05:52.970
Now to simulate an error I'll go to the products actions and there in update product down here I will

05:52.970 --> 05:58.310
remove that ass here again to force an error and I will also add something else.

05:58.400 --> 06:03.130
I will now stored a response here and a constant because now I actually do care.

06:03.200 --> 06:07.240
I want to make sure that if the response is not OK.

06:07.250 --> 06:14.360
So if we have a 400 or 500 status code I also throw a new era where I say something went wrong or where

06:14.360 --> 06:20.200
you do whatever error handling you want to do so that we all throw an error in that case by the way

06:20.210 --> 06:25.620
I'll do the same for deleting before we test this forced error which I implemented.

06:25.670 --> 06:29.150
So here for deleting I also want to check doesn't for data of course here.

06:29.360 --> 06:36.120
I also need to get my response by awaiting to fetching here okay with that.

06:36.120 --> 06:40.400
Let's see if that forced error for updating due to dismissing s here.

06:40.470 --> 06:46.680
If dad has an effect if I now go back here to admin I start adding this I add an exclamation mark and

06:46.680 --> 06:48.010
click this.

06:48.030 --> 06:54.150
Now what you'll see is that the update is simply dismissed so we don't see the exclamation mark here.

06:54.240 --> 07:00.230
But we also get no error message which makes sense because I have no logic to do that.

07:00.310 --> 07:01.700
Now how can we handle this.

07:01.720 --> 07:04.310
As I said I want to throw an alert and they offer.

07:04.330 --> 07:10.610
I will use use effect so that use effect hook which react offers which we find here.

07:10.690 --> 07:16.690
I want to use that and I can simply implement that here.

07:16.710 --> 07:24.490
After initializing the reducer let's say exact position doesn't matter too much use effect here should

07:24.880 --> 07:28.670
rerun whenever error changes.

07:28.750 --> 07:34.510
So if we set this to be an error or to not be an error then here I'd check if error is true ish.

07:34.510 --> 07:39.010
So if we have an error and if we do have this then I can throw an alert.

07:39.010 --> 07:41.380
An error occurred.

07:41.380 --> 07:48.920
I want to output my error here and that should be the error message because that's what I'm setting

07:48.920 --> 07:49.350
here.

07:49.370 --> 07:55.270
I'm setting my error to message so that should be a string which could which I can output and then I'll

07:55.270 --> 08:04.610
add a button where I say OK which simply dismisses this now all is important if we get an error.

08:04.610 --> 08:11.180
I don't want to navigate away so to a white that this happens I want to make sure that here does props

08:11.210 --> 08:19.670
does navigation here actually only is performed if we well don't end up in this catch block.

08:19.700 --> 08:27.390
So basically here after the if else blocked but still in the try block dear I want to navigate away.

08:27.410 --> 08:29.300
So now let's give us another try.

08:29.300 --> 08:30.710
Let's go back here.

08:30.710 --> 08:33.920
Editors add exclamation mark please somewhere else click save.

08:33.920 --> 08:40.730
And now I get my error message here and I stay on this page and it's all the reset I can add does again

08:40.760 --> 08:43.430
click here and it's gone.

08:43.700 --> 08:50.150
On the other hand if we now fix that error here in the actions by re adding that s here and we now go

08:50.150 --> 08:52.960
back and have a number look at this.

08:52.970 --> 08:57.170
I added this add my estimation market click somewhere else and click save.

08:57.170 --> 08:59.880
Now that all works as it should.

08:59.900 --> 09:04.200
So now this really works and now just behaves in the way it should behave.

09:04.220 --> 09:09.890
Now you can of course also add a loading spinner and an error handler here to the user product screen

09:09.890 --> 09:10.840
if you want to.

09:10.850 --> 09:15.800
So if you delete this which I won't do here but if you would delete this you would currently not get

09:15.800 --> 09:17.300
a spinner a loading spinner.

09:17.300 --> 09:22.610
You also won't get an error if it fails to save some time and not implement this year but you could

09:22.610 --> 09:26.590
implement it in basically the exact same way we did before if you wanted to.

09:26.600 --> 09:28.670
So that's something you can definitely also do.
