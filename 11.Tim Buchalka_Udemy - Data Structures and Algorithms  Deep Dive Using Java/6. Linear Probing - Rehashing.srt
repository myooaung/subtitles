1
1

00:00:00,069  -->  00:00:02,702
(gentle music)
2

2

00:00:02,702  -->  00:00:05,480
(typing)
3

3

00:00:05,480  -->  00:00:06,960
<v Narrator>Alright so I ended the last video</v>
4

4

00:00:06,960  -->  00:00:08,360
by saying that we have
5

5

00:00:08,360  -->  00:00:11,700
a bug in this code or at least the implementation
6

6

00:00:11,700  -->  00:00:13,510
has a bug and that is
7

7

00:00:15,660  -->  00:00:17,550
that when we remove employees
8

8

00:00:17,550  -->  00:00:20,470
we set the position to null
9

9

00:00:20,470  -->  00:00:23,070
but that means that when we're doing our linear probing
10

10

00:00:23,070  -->  00:00:25,260
we're not going to be able to find
11

11

00:00:25,260  -->  00:00:29,070
some of our items for example Mary Smith.
12

12

00:00:29,070  -->  00:00:32,020
When we put Mary Smith into the hash table
13

13

00:00:32,020  -->  00:00:34,610
Jane Jones was occupying position 5
14

14

00:00:34,610  -->  00:00:37,480
and Mike Wilson was occupying position 6
15

15

00:00:37,480  -->  00:00:41,350
and so we had to use two probes to find position 7
16

16

00:00:41,350  -->  00:00:43,460
but then we delete Jane and Mike.
17

17

00:00:43,460  -->  00:00:46,520
And so when we come to get Mary
18

18

00:00:47,400  -->  00:00:49,860
and we're doing our fine key
19

19

00:00:49,860  -->  00:00:52,090
in this loop here we drop out of the loop
20

20

00:00:52,090  -->  00:00:53,770
as soon as we hit a null position.
21

21

00:00:53,770  -->  00:00:56,180
And we're gonna hit that null position right away
22

22

00:00:56,180  -->  00:00:59,170
and so that means we can't find Mary anymore.
23

23

00:00:59,170  -->  00:01:02,500
And so there are two ways that you can solve this problem.
24

24

00:01:02,500  -->  00:01:06,270
You can on a remove you can rehash
25

25

00:01:06,270  -->  00:01:08,890
all of the items that are already in the hash table.
26

26

00:01:08,890  -->  00:01:10,220
So you can say okay
27

27

00:01:10,220  -->  00:01:12,450
we're gonna start with a new hash table
28

28

00:01:12,450  -->  00:01:16,050
so you'd create a new hash table
29

29

00:01:16,050  -->  00:01:18,260
and then you're going to loop through
30

30

00:01:18,260  -->  00:01:21,290
the existing arraigned you're gonna rehash all the values
31

31

00:01:21,290  -->  00:01:23,910
because after we've deleted Jane
32

32

00:01:23,910  -->  00:01:26,900
that would move Mary into position five right?
33

33

00:01:26,900  -->  00:01:28,800
Because when we do the rehashing
34

34

00:01:28,800  -->  00:01:31,180
when we come to Mary we're gonna hash her key
35

35

00:01:31,180  -->  00:01:33,050
which is going to end up being five
36

36

00:01:33,050  -->  00:01:36,250
and in the new hash table position five would be empty.
37

37

00:01:36,250  -->  00:01:38,390
So that's one way of doing it.
38

38

00:01:38,390  -->  00:01:41,000
Of course it means that on every remove
39

39

00:01:41,000  -->  00:01:43,200
you're going to have to iterate
40

40

00:01:43,200  -->  00:01:46,300
over all of the remaining elements and rehash them
41

41

00:01:46,300  -->  00:01:47,560
and there's a performance hit
42

42

00:01:47,560  -->  00:01:49,420
and of course that means removes
43

43

00:01:49,420  -->  00:01:52,230
will no longer be done in constant time
44

44

00:01:52,230  -->  00:01:54,680
even if the employee you're removing
45

45

00:01:54,680  -->  00:01:57,330
is out the position you expect them to be at.
46

46

00:01:57,330  -->  00:01:59,140
So for Jane Jones for example
47

47

00:01:59,140  -->  00:02:00,620
she would be at position five
48

48

00:02:00,620  -->  00:02:03,480
and boom we find her in position 5 right away
49

49

00:02:03,480  -->  00:02:05,590
we're still gonna have to iterate over the entire
50

50

00:02:05,590  -->  00:02:07,200
array and rehash everything
51

51

00:02:07,200  -->  00:02:09,340
so it has its disadvantages.
52

52

00:02:09,340  -->  00:02:12,580
The second way that we could deal with this problem is
53

53

00:02:12,580  -->  00:02:15,910
instead of nulling out the employee
54

54

00:02:15,910  -->  00:02:18,220
or the position in the array
55

55

00:02:18,220  -->  00:02:22,100
instead we could add a feel to the stored employee class
56

56

00:02:22,100  -->  00:02:25,490
that says whether an employee has been deleted or not.
57

57

00:02:25,490  -->  00:02:26,840
Now how would this help?
58

58

00:02:26,840  -->  00:02:30,310
Well it would let us distinguish between
59

59

00:02:30,310  -->  00:02:32,730
positions that have always been empty
60

60

00:02:32,730  -->  00:02:35,270
meaning nothing has ever been added to them
61

61

00:02:35,270  -->  00:02:38,640
and positions that used to have something in them
62

62

00:02:38,640  -->  00:02:40,490
but that something was deleted.
63

63

00:02:40,490  -->  00:02:43,080
And so in that case when we did our find key
64

64

00:02:43,080  -->  00:02:45,650
when we were doing this loop the position
65

65

00:02:45,650  -->  00:02:48,120
of deleted employees would not be null
66

66

00:02:48,120  -->  00:02:50,520
and so when we delete Jane
67

67

00:02:50,520  -->  00:02:52,650
we wouldn't remove her we just set her
68

68

00:02:52,650  -->  00:02:55,020
deleted field to true
69

69

00:02:55,020  -->  00:02:58,070
and when we deleted Mike we wouldn't actually remove him
70

70

00:02:58,070  -->  00:03:01,030
we just said set his deleted field to true
71

71

00:03:01,030  -->  00:03:03,600
and so when we came looking for Mary
72

72

00:03:03,600  -->  00:03:05,900
positions five and six wouldn't be null
73

73

00:03:05,900  -->  00:03:07,570
and we'd be able to find her.
74

74

00:03:07,570  -->  00:03:10,220
Now of course this has disadvantages first of all
75

75

00:03:10,220  -->  00:03:12,800
you're going to end up with a polluted hash table
76

76

00:03:12,800  -->  00:03:17,040
because you're gonna have a mix of live and deleted values.
77

77

00:03:17,040  -->  00:03:19,360
The other thing is it means that
78

78

00:03:19,360  -->  00:03:22,290
even though you're deleting items your load factor
79

79

00:03:22,290  -->  00:03:23,550
isn't gonna change?
80

80

00:03:23,550  -->  00:03:25,550
And it means you're gonna have to be doing
81

81

00:03:25,550  -->  00:03:27,370
a lot more linear probing
82

82

00:03:27,370  -->  00:03:30,500
because when you go to add an item
83

83

00:03:30,500  -->  00:03:33,830
if it collides with a deleted item
84

84

00:03:33,830  -->  00:03:35,750
then you have to do linear probing
85

85

00:03:35,750  -->  00:03:37,620
and so in the first solution
86

86

00:03:37,620  -->  00:03:40,160
you're gonna be hit when you do or remove
87

87

00:03:40,160  -->  00:03:42,790
'cause you're gonna have to rehash the entire table.
88

88

00:03:42,790  -->  00:03:46,010
With the second solution you're gonna be hit
89

89

00:03:46,010  -->  00:03:49,120
when you do ads because
90

90

00:03:49,120  -->  00:03:50,840
there's going to be more collisions
91

91

00:03:50,840  -->  00:03:53,200
and you're gonna have to do a lot more linear probing
92

92

00:03:53,200  -->  00:03:55,910
because you never remove anything from the table essentially
93

93

00:03:55,910  -->  00:03:58,700
and so as usual it depends on
94

94

00:03:58,700  -->  00:04:00,570
where you're willing to take the hit.
95

95

00:04:00,570  -->  00:04:01,810
Do you want to take it on get?
96

96

00:04:01,810  -->  00:04:03,610
So do you want to take it on removes.
97

97

00:04:03,610  -->  00:04:05,940
I would rather take it on the remove
98

98

00:04:05,940  -->  00:04:07,930
I would rehash the table.
99

99

00:04:07,930  -->  00:04:10,600
And so let's try doing that.
100

100

00:04:10,600  -->  00:04:13,160
So once again to remind you of what the problem was
101

101

00:04:13,160  -->  00:04:14,410
If we run this now
102

102

00:04:14,410  -->  00:04:16,330
we'll see that we can't find Mary.
103

103

00:04:16,330  -->  00:04:19,540
So rather than using this let's put a marker in here
104

104

00:04:19,540  -->  00:04:21,080
I'm going to rehash the table
105

105

00:04:21,080  -->  00:04:23,690
because that will keep the table clean
106

106

00:04:23,690  -->  00:04:28,020
and it means that it will reduce the number of collisions
107

107

00:04:28,020  -->  00:04:31,200
and the load factor will be helped by this as well.
108

108

00:04:31,200  -->  00:04:32,910
So when we remove an employee
109

109

00:04:32,910  -->  00:04:35,120
rather than doing this line here
110

110

00:04:35,120  -->  00:04:37,283
this hash table I'll just comment it out.
111

111

00:04:39,440  -->  00:04:43,130
Okay so first we'll save our current hash table
112

112

00:04:43,130  -->  00:04:44,610
into a temporary variable.
113

113

00:04:44,610  -->  00:04:47,120
So we'll say stored employee
114

114

00:04:47,120  -->  00:04:49,893
old hash table equals hash table.
115

115

00:04:50,730  -->  00:04:52,350
And now we're going to create
116

116

00:04:52,350  -->  00:04:56,510
a new brand new stored employee array
117

117

00:04:56,510  -->  00:04:59,913
that's going to be the same size as our old hash table.
118

118

00:05:01,800  -->  00:05:05,930
And so we've got our existing old hash table saved off
119

119

00:05:05,930  -->  00:05:10,430
and hash table here now contains our new hash table.
120

120

00:05:10,430  -->  00:05:12,100
So if we call
121

121

00:05:12,100  -->  00:05:15,240
get or put or whatever at this point
122

122

00:05:16,590  -->  00:05:19,010
it'll be operating on this new hash table.
123

123

00:05:19,010  -->  00:05:22,310
So then we're going to say four into I equals zero
124

124

00:05:22,310  -->  00:05:27,310
I less than bold hash table dot length I plus plus
125

125

00:05:29,640  -->  00:05:33,330
and we want to hash all the values in the old hash table
126

126

00:05:33,330  -->  00:05:35,300
and put them into the new hash table.
127

127

00:05:35,300  -->  00:05:37,600
Now we have to check for null values obviously
128

128

00:05:37,600  -->  00:05:42,600
so we're gonna say if old hash table I is not equal to null
129

129

00:05:44,530  -->  00:05:46,380
then we want to rehash it
130

130

00:05:46,380  -->  00:05:47,420
and we're gonna just do that
131

131

00:05:47,420  -->  00:05:49,960
by putting it into the new hash table.
132

132

00:05:49,960  -->  00:05:54,110
So we're gonna say put old hash table I
133

133

00:05:55,530  -->  00:05:58,790
dot key that's gonna be the key we wanna use
134

134

00:05:58,790  -->  00:06:03,790
and the value is gonna be old hash table I dot employee.
135

135

00:06:04,990  -->  00:06:07,980
And that's it that's our rehashing
136

136

00:06:07,980  -->  00:06:12,430
and so because here we've assigned our member variable
137

137

00:06:12,430  -->  00:06:14,360
with the empty hash table
138

138

00:06:14,360  -->  00:06:16,200
went the first time we call put
139

139

00:06:17,490  -->  00:06:20,080
it's using that new all of our methods in here
140

140

00:06:20,080  -->  00:06:22,620
we'll be using that new hash table.
141

141

00:06:22,620  -->  00:06:27,120
And this should result in Mary being moved to position five
142

142

00:06:27,120  -->  00:06:29,860
because if we've removed Jane
143

143

00:06:29,860  -->  00:06:33,110
then Mary what will have been moved to position five.
144

144

00:06:33,110  -->  00:06:34,820
Now I've said this is work
145

145

00:06:34,820  -->  00:06:35,920
it means every time we do a removal
146

146

00:06:35,920  -->  00:06:39,430
we're gonna be rehashing but if we don't do the work here
147

147

00:06:39,430  -->  00:06:41,020
we're gonna create a lot more work
148

148

00:06:41,020  -->  00:06:44,010
for ourselves up in the put method and in the get method
149

149

00:06:44,010  -->  00:06:46,210
because it means we're never gonna remove
150

150

00:06:46,210  -->  00:06:48,150
anything from the hash table essentially
151

151

00:06:48,150  -->  00:06:49,790
we're just gonna mark it as deleted
152

152

00:06:49,790  -->  00:06:52,500
and that's gonna result in a higher load factor
153

153

00:06:52,500  -->  00:06:54,040
and a lot more collisions.
154

154

00:06:54,040  -->  00:06:57,560
Now we could have code for resizing the array
155

155

00:06:57,560  -->  00:07:00,700
and a robust hash table implementation would have that
156

156

00:07:00,700  -->  00:07:02,730
in the put we'd be checking the load factor
157

157

00:07:02,730  -->  00:07:04,610
and if necessary resizing the array
158

158

00:07:04,610  -->  00:07:08,210
and when we do the resize I mean we'd rehash everything
159

159

00:07:08,210  -->  00:07:09,900
but that would mean that
160

160

00:07:09,900  -->  00:07:12,650
because we're keeping a lot of deleted items around
161

161

00:07:12,650  -->  00:07:15,100
we could potentially be using a lot more memory
162

162

00:07:15,100  -->  00:07:17,830
and it's all because we never get rid of anything.
163

163

00:07:17,830  -->  00:07:21,620
So there's always advantages and disadvantages to everything
164

164

00:07:21,620  -->  00:07:24,080
but I like the rehashing better
165

165

00:07:24,080  -->  00:07:26,140
for this simple implementation.
166

166

00:07:26,140  -->  00:07:27,970
So let's go to our main method now.
167

167

00:07:27,970  -->  00:07:30,560
And so we're gonna add four employees
168

168

00:07:30,560  -->  00:07:31,900
retrieve two of them and then
169

169

00:07:31,900  -->  00:07:34,680
we're gonna remove Mike and Jane
170

170

00:07:34,680  -->  00:07:36,830
and then now we should be able to get Mary.
171

171

00:07:36,830  -->  00:07:39,380
And in fact when we print the hash table here
172

172

00:07:39,380  -->  00:07:41,180
Mary should be at position five.
173

173

00:07:41,180  -->  00:07:42,093
So let's run.
174

174

00:07:48,240  -->  00:07:49,780
Alright so these are our results
175

175

00:07:49,780  -->  00:07:52,080
and this does not look right to me
176

176

00:07:52,080  -->  00:07:54,960
because in the second printout
177

177

00:07:54,960  -->  00:07:57,900
we still have Mike and Jane in the array
178

178

00:07:57,900  -->  00:07:59,230
so we're getting Mary back
179

179

00:07:59,230  -->  00:08:01,080
because we haven't actually deleted anything.
180

180

00:08:01,080  -->  00:08:03,720
So let's go over and look at our code
181

181

00:08:04,900  -->  00:08:08,330
and that's because I commented out the line
182

182

00:08:08,330  -->  00:08:10,410
that's actually knowing out the employee
183

183

00:08:10,410  -->  00:08:12,720
so when we rehashed everything
184

184

00:08:12,720  -->  00:08:16,250
the employee we deleted was not null.
185

185

00:08:16,250  -->  00:08:17,673
So let's run this again.
186

186

00:08:19,970  -->  00:08:21,980
Okay and this time
187

187

00:08:22,900  -->  00:08:24,770
things worked the way we're expecting
188

188

00:08:24,770  -->  00:08:27,140
so we have Mary in position five
189

189

00:08:27,140  -->  00:08:28,590
and John in position three
190

190

00:08:28,590  -->  00:08:30,100
and we're able to find Mary.
191

191

00:08:30,100  -->  00:08:31,560
So this printout
192

192

00:08:33,010  -->  00:08:36,250
is after we've added the four employees
193

193

00:08:36,250  -->  00:08:39,420
and then if we look at our main method
194

194

00:08:42,610  -->  00:08:43,970
we then retrieve
195

195

00:08:46,510  -->  00:08:48,580
Mike and Mary and that works fine
196

196

00:08:48,580  -->  00:08:50,040
'cause nobody's been deleted yet
197

197

00:08:50,040  -->  00:08:52,630
and then we delete Mike and Jane
198

198

00:08:52,630  -->  00:08:54,340
and then we try to retrieve Mary
199

199

00:08:54,340  -->  00:08:56,020
and after we delete Mike and Jane
200

200

00:08:56,020  -->  00:08:58,470
we're printing out the hash table again
201

201

00:08:58,470  -->  00:08:59,870
and as you can see
202

202

00:08:59,870  -->  00:09:02,420
now only John and Mary are left
203

203

00:09:02,420  -->  00:09:04,680
and Mary is now in position five
204

204

00:09:04,680  -->  00:09:06,640
because when we did the rehashing
205

205

00:09:06,640  -->  00:09:10,040
after we deleted Jane position five was free.
206

206

00:09:10,040  -->  00:09:12,670
And then when we go to retrieve Mary Smith
207

207

00:09:12,670  -->  00:09:14,140
we can now get to her.
208

208

00:09:14,140  -->  00:09:16,840
And so as you can see when you use linear probing
209

209

00:09:16,840  -->  00:09:18,590
there's a lot more work involved.
210

210

00:09:18,590  -->  00:09:21,060
In the best case using linear probing
211

211

00:09:21,060  -->  00:09:23,010
is still constant time
212

212

00:09:23,010  -->  00:09:28,010
if the position you're you want to work with is empty
213

213

00:09:28,010  -->  00:09:29,670
and so if you're adding an employee
214

214

00:09:29,670  -->  00:09:32,420
the position is empty and if you're getting an employee
215

215

00:09:32,420  -->  00:09:35,210
If the key at the hashed position
216

216

00:09:35,210  -->  00:09:37,030
is the one that you're interested in
217

217

00:09:37,030  -->  00:09:38,380
that's constant time.
218

218

00:09:38,380  -->  00:09:40,750
Now If you actually have to use probes
219

219

00:09:40,750  -->  00:09:42,540
then the worst case is a linear time
220

220

00:09:42,540  -->  00:09:44,570
because it's possible that you might have to traverse
221

221

00:09:44,570  -->  00:09:48,580
the entire array before you either find an empty position
222

222

00:09:48,580  -->  00:09:50,390
in the case of an ad
223

223

00:09:50,390  -->  00:09:53,140
or before you find the key you're interested in.
224

224

00:09:53,140  -->  00:09:55,398
Now does this mean that linear probing isn't good
225

225

00:09:55,398  -->  00:09:57,460
to use to deal with collisions?
226

226

00:09:57,460  -->  00:09:58,293
Well no!
227

227

00:09:58,293  -->  00:10:00,230
Because with a decent hashing function
228

228

00:10:00,230  -->  00:10:02,810
and if you are resizing the array occasionally
229

229

00:10:02,810  -->  00:10:05,310
so you're keeping the load factor reasonable
230

230

00:10:05,310  -->  00:10:07,480
you're never gonna have to use that many probes
231

231

00:10:07,480  -->  00:10:11,350
in the average case you won't have to use a tone of probes.
232

232

00:10:11,350  -->  00:10:13,890
You're not gonna have to traverse the entire array.
233

233

00:10:13,890  -->  00:10:16,940
But as I've said many times the hashing function
234

234

00:10:16,940  -->  00:10:19,070
and keeping the load factor reasonable
235

235

00:10:19,070  -->  00:10:22,140
Is what's gonna make or break your hash tables performance.
236

236

00:10:22,140  -->  00:10:24,610
So if you have a hash function that produces
237

237

00:10:24,610  -->  00:10:26,980
tones of collisions all the time
238

238

00:10:26,980  -->  00:10:29,110
or your hash table is really full
239

239

00:10:29,110  -->  00:10:31,460
and you don't precise it very often
240

240

00:10:31,460  -->  00:10:33,090
your performance is gonna suffer.
241

241

00:10:33,090  -->  00:10:35,210
Now before we leave linear probing
242

242

00:10:35,210  -->  00:10:38,080
one variation is quadratic probing.
243

243

00:10:38,080  -->  00:10:39,920
And when you use quadratic probing
244

244

00:10:39,920  -->  00:10:43,130
instead of incrementing the hashed value by one
245

245

00:10:43,130  -->  00:10:45,810
you increment it by some constant squared.
246

246

00:10:45,810  -->  00:10:47,410
So for example you start out
247

247

00:10:47,410  -->  00:10:50,030
by incrementing the hash value by one squared
248

248

00:10:50,030  -->  00:10:51,920
and then you'd increment it by two squared
249

249

00:10:51,920  -->  00:10:53,670
and then three squared et cetera.
250

250

00:10:53,670  -->  00:10:56,870
Alright so that's linear probing in the next video
251

251

00:10:56,870  -->  00:10:58,740
we'll take a look at the second strategy
252

252

00:10:58,740  -->  00:11:00,260
for dealing with collisions
253

253

00:11:00,260  -->  00:11:02,800
and it's a strategy that's called chaining.
254

254

00:11:02,800  -->  00:11:03,783
I'll see you there.
