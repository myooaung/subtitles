WEBVTT
1
1

00:00:00.358  -->  00:00:02.858
(light music)
2

2

00:00:05.250  -->  00:00:07.610
<v Sarah>In this video we're gonna take a very brief look</v>
3

3

00:00:07.610  -->  00:00:10.570
at what's available in JDK for trees,
4

4

00:00:10.570  -->  00:00:13.950
mainly because there aren't a lot of classes for trees.
5

5

00:00:13.950  -->  00:00:17.950
The one that you will probably use is the TreeMap class.
6

6

00:00:17.950  -->  00:00:20.740
The TreeMap class takes key value pairs
7

7

00:00:20.740  -->  00:00:24.900
and so lets say wanted to store our employees in a tree,
8

8

00:00:24.900  -->  00:00:27.730
we could provide a key like an interger key
9

9

00:00:27.730  -->  00:00:30.720
and then the employee object as the value.
10

10

00:00:30.720  -->  00:00:32.240
Now it says that this is
11

11

00:00:32.240  -->  00:00:37.240
a Red-Black tree based NavigableMap implementation.
12

12

00:00:37.260  -->  00:00:40.770
And I mentioned Red-Black trees in one of the videos,
13

13

00:00:40.770  -->  00:00:43.800
they are a self balancing tree.
14

14

00:00:43.800  -->  00:00:48.460
And so what they do is, after every insertion or deletion,
15

15

00:00:48.460  -->  00:00:51.510
they check the tree to see how balanced it is.
16

16

00:00:51.510  -->  00:00:55.280
Now a Red-Black tree does not perfectly balance the tree,
17

17

00:00:55.280  -->  00:00:56.470
but its good enough.
18

18

00:00:56.470  -->  00:01:00.940
And its the preferred, self balancing tree these days
19

19

00:01:00.940  -->  00:01:05.070
because it has a good trade off between balancing a tree
20

20

00:01:05.070  -->  00:01:07.870
to a good enough degree and performance.
21

21

00:01:07.870  -->  00:01:09.620
And so if you use the tree map class,
22

22

00:01:09.620  -->  00:01:12.720
you actually using a Red-Black tree in the background.
23

23

00:01:12.720  -->  00:01:16.310
Now it does say that it guarantees log n time
24

24

00:01:16.310  -->  00:01:19.050
for containskey, get, put and remove
25

25

00:01:19.050  -->  00:01:23.460
and that because a Red Black tree is a Binary Search Tree.
26

26

00:01:23.460  -->  00:01:26.547
And so as we know with Binary Search Trees
27

27

00:01:26.547  -->  00:01:29.150
as long as they are not too out of balance,
28

28

00:01:29.150  -->  00:01:33.720
you can do inserts, deletes and retrievals
29

29

00:01:33.720  -->  00:01:35.803
and all log n time.
30

30

00:01:36.760  -->  00:01:39.450
One last thing to note, this is not synchronised,
31

31

00:01:39.450  -->  00:01:41.450
so if you wanted to use it for multiple threads
32

32

00:01:41.450  -->  00:01:44.020
they suggest that you wrap this class
33

33

00:01:44.020  -->  00:01:46.820
by calling the collections .synchronizedsortedMapmethod.
34

34

00:01:48.460  -->  00:01:50.960
And If we look down at the methods,
35

35

00:01:50.960  -->  00:01:53.030
we are familiar with quite a few
36

36

00:01:53.030  -->  00:01:54.543
we've looked at them before.
37

37

00:01:56.480  -->  00:01:59.080
We can see that it descends from AbstractMap.
38

38

00:01:59.080  -->  00:02:02.180
So AbstractMap implements the math interface
39

39

00:02:02.180  -->  00:02:04.750
and we looked at that in an earlier video
40

40

00:02:04.750  -->  00:02:06.810
when we were looking at Hashtables,
41

41

00:02:06.810  -->  00:02:08.850
And so we are gonna go through this
42

42

00:02:08.850  -->  00:02:12.130
and we not gonna code it because its a just
43

43

00:02:12.130  -->  00:02:15.570
a matter of reading the method description and coding it.
44

44

00:02:15.570  -->  00:02:18.250
We've implemented a simple tree and you know how they work
45

45

00:02:18.250  -->  00:02:20.550
and this is just one implementation.
46

46

00:02:20.550  -->  00:02:22.797
So you know if you wanted to add a node
47

47

00:02:22.797  -->  00:02:25.850
you use the put method, as you would with any Map
48

48

00:02:25.850  -->  00:02:29.870
if you want to retrieve a node you use the get method,
49

49

00:02:29.870  -->  00:02:33.020
you can remove nodes, you can replace nodes
50

50

00:02:33.020  -->  00:02:35.800
which means you would replace the value
51

51

00:02:35.800  -->  00:02:37.490
for the node with specified key.
52

52

00:02:37.490  -->  00:02:41.030
So basically this implementation would search the node with
53

53

00:02:41.030  -->  00:02:44.950
this key and set the value for the node to the new value.
54

54

00:02:44.950  -->  00:02:47.750
You can find out how many nodes are in the tree,
55

55

00:02:47.750  -->  00:02:49.580
and there are a few things other things that you can do.
56

56

00:02:49.580  -->  00:02:52.573
So I'm gonna live you to explore this class on your own.
57

57

00:02:55.670  -->  00:02:59.250
There is also a TreeSet class I believe,
58

58

00:02:59.250  -->  00:03:00.250
let me come up here.
59

59

00:03:04.540  -->  00:03:05.990
We haven't covered Sets yet
60

60

00:03:05.990  -->  00:03:08.510
I'm gonna have a brief video on those towards
61

61

00:03:08.510  -->  00:03:09.460
the end of the course.
62

62

00:03:09.460  -->  00:03:11.650
Basically a Set just means that
63

63

00:03:11.650  -->  00:03:14.840
the data structure cannot contain duplicate element.
64

64

00:03:14.840  -->  00:03:16.920
So its an Abstract Data type because
65

65

00:03:16.920  -->  00:03:18.440
you can have a TreeSet,
66

66

00:03:18.440  -->  00:03:21.080
you can a list as a Set
67

67

00:03:21.080  -->  00:03:22.660
and we're gonna briefly look at Sets
68

68

00:03:22.660  -->  00:03:24.648
towards the end of the course.
69

69

00:03:24.648  -->  00:03:25.740
I just wanna make you aware now
70

70

00:03:25.740  -->  00:03:27.610
that there is a TreeSet class.
71

71

00:03:27.610  -->  00:03:31.090
And this an implementation based on TreeMap.
72

72

00:03:31.090  -->  00:03:31.923
So that's it.
73

73

00:03:31.923  -->  00:03:34.250
That all we're gonna look at for the JDK
74

74

00:03:34.250  -->  00:03:37.840
and that's the end of the section on trees.
75

75

00:03:37.840  -->  00:03:40.050
In the next section we are gonna take at Heap.
76

76

00:03:40.050  -->  00:03:42.179
Heaps are a special type of tree.
77

77

00:03:42.179  -->  00:03:44.083
And so I will see you there.
