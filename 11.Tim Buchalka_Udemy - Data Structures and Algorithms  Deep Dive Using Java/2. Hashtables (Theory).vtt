WEBVTT
1
1

00:00:00.193  -->  00:00:02.555
(electronic music)
2

2

00:00:02.555  -->  00:00:05.270
(keyboard clicking)
3

3

00:00:05.270  -->  00:00:06.420
<v Sarah>All right, so as I mentioned</v>
4

4

00:00:06.420  -->  00:00:08.090
in the very brief introduction,
5

5

00:00:08.090  -->  00:00:10.510
a hash table is an abstract data type.
6

6

00:00:10.510  -->  00:00:13.620
So it doesn't dictate how you store the data.
7

7

00:00:13.620  -->  00:00:17.120
You can back a hash table with whatever you want.
8

8

00:00:17.120  -->  00:00:21.440
A hash table provides access to data, using keys.
9

9

00:00:21.440  -->  00:00:23.840
So when it comes to hash tables,
10

10

00:00:23.840  -->  00:00:27.050
they consist of key/value pairs.
11

11

00:00:27.050  -->  00:00:30.290
When you add an item, you provide the key and the value
12

12

00:00:30.290  -->  00:00:32.380
and when you want to retrieve the item,
13

13

00:00:32.380  -->  00:00:33.930
you provide the key.
14

14

00:00:33.930  -->  00:00:38.240
And then from there, the hash table can retrieve the value,
15

15

00:00:38.240  -->  00:00:40.120
and it can do it really, really quickly.
16

16

00:00:40.120  -->  00:00:43.830
So hash tables are optimised for retrieval,
17

17

00:00:43.830  -->  00:00:45.350
when you know the key, obviously.
18

18

00:00:45.350  -->  00:00:46.480
If you don't know the key,
19

19

00:00:46.480  -->  00:00:49.220
then retrieval is not gonna be very fast.
20

20

00:00:49.220  -->  00:00:51.600
You can do it, but it's gonna be slow.
21

21

00:00:51.600  -->  00:00:53.610
So when we're talking about arrays,
22

22

00:00:53.610  -->  00:00:56.380
we could see the array index is the key
23

23

00:00:56.380  -->  00:00:59.870
and the value is the element in the array.
24

24

00:00:59.870  -->  00:01:03.670
But, for hash tables, the key doesn't have to be an integer.
25

25

00:01:03.670  -->  00:01:05.130
You can use whatever you want.
26

26

00:01:05.130  -->  00:01:07.500
You can use whatever type of object you want.
27

27

00:01:07.500  -->  00:01:11.030
Strings are a common data type that's used for keys.
28

28

00:01:11.030  -->  00:01:14.310
In fact, if you've worked with languages like PHP,
29

29

00:01:14.310  -->  00:01:16.140
that have associative arrays,
30

30

00:01:16.140  -->  00:01:18.810
well associative arrays are one type of hash table.
31

31

00:01:18.810  -->  00:01:22.730
And so, in that case, you're using a string as the key
32

32

00:01:22.730  -->  00:01:24.770
into values in the array.
33

33

00:01:24.770  -->  00:01:26.530
Now, the key/value pairs,
34

34

00:01:26.530  -->  00:01:28.440
the data types don't have to match.
35

35

00:01:28.440  -->  00:01:31.740
So, as you'll see, we'll use a string as a key
36

36

00:01:31.740  -->  00:01:34.060
to retrieve employee objects.
37

37

00:01:34.060  -->  00:01:37.010
We're gonna use the last name of the employee as the key.
38

38

00:01:37.010  -->  00:01:41.000
And so hash tables consist of key/value pairs,
39

39

00:01:41.000  -->  00:01:43.100
they're optimised for retrieval,
40

40

00:01:43.100  -->  00:01:45.320
and they provide direct access
41

41

00:01:45.320  -->  00:01:49.730
to values in the table, using keys.
42

42

00:01:49.730  -->  00:01:52.230
Now, another word for hash table,
43

43

00:01:52.230  -->  00:01:55.350
they're also known as dictionaries, maps.
44

44

00:01:55.350  -->  00:01:58.040
If you've ever used one of the map classes in Java,
45

45

00:01:58.040  -->  00:02:00.960
you're working with a hash table, lookup tables,
46

46

00:02:00.960  -->  00:02:03.350
and as I said, associative arrays.
47

47

00:02:03.350  -->  00:02:06.370
Okay, so I mentioned that the keys can be any data type.
48

48

00:02:06.370  -->  00:02:07.970
So you could have a string as a key,
49

49

00:02:07.970  -->  00:02:09.930
you can have whatever you want as a key.
50

50

00:02:09.930  -->  00:02:11.890
But under the covers,
51

51

00:02:11.890  -->  00:02:14.940
those keys are being converted to integers.
52

52

00:02:14.940  -->  00:02:18.170
One common way of backing a hash table,
53

53

00:02:18.170  -->  00:02:19.210
is to use an array.
54

54

00:02:19.210  -->  00:02:20.390
And of course, for an array,
55

55

00:02:20.390  -->  00:02:22.740
you've got to have integer indices.
56

56

00:02:22.740  -->  00:02:26.960
And so, to convert the keys to integers,
57

57

00:02:26.960  -->  00:02:29.160
you hash the key.
58

58

00:02:29.160  -->  00:02:31.710
And this is a process known as hashing.
59

59

00:02:31.710  -->  00:02:35.680
And so hashing maps keys of any data type to an integer.
60

60

00:02:35.680  -->  00:02:39.890
And so essentially, a hash function, maps keys to int.
61

61

00:02:39.890  -->  00:02:43.780
Now in Java, the hash function is hash code,
62

62

00:02:43.780  -->  00:02:47.280
and the object class has a hash code method.
63

63

00:02:47.280  -->  00:02:51.530
And so every object in the JDK, has this hash code method.
64

64

00:02:51.530  -->  00:02:52.940
Of course, you can override it,
65

65

00:02:52.940  -->  00:02:54.560
and it is often overridden.
66

66

00:02:54.560  -->  00:02:58.930
Now it's possible that the hashing method
67

67

00:02:58.930  -->  00:03:03.200
may produce the same integer for more than one value.
68

68

00:03:03.200  -->  00:03:06.200
And when that happens, it's known as a collision.
69

69

00:03:06.200  -->  00:03:09.500
So, in our case, let's say, as I mentioned,
70

70

00:03:09.500  -->  00:03:12.630
we're going to use the last name of our employee
71

71

00:03:12.630  -->  00:03:13.950
as the key.
72

72

00:03:13.950  -->  00:03:16.110
Well if we have more than one employee
73

73

00:03:16.110  -->  00:03:17.800
with the last name Jones,
74

74

00:03:17.800  -->  00:03:21.270
then when we go to add Jane Jones to the hash table,
75

75

00:03:21.270  -->  00:03:23.900
Jones will be hashed to an integer.
76

76

00:03:23.900  -->  00:03:27.630
And if we went to add Mike Jones to the hash table,
77

77

00:03:27.630  -->  00:03:29.340
Jones will be hashed to an integer,
78

78

00:03:29.340  -->  00:03:31.170
and they're gonna get the same results.
79

79

00:03:31.170  -->  00:03:34.730
So their hashed key/values are going to be the same integer.
80

80

00:03:34.730  -->  00:03:37.340
And when the happens, it's known as a collision.
81

81

00:03:37.340  -->  00:03:39.700
And there are strategies for dealing with collisions,
82

82

00:03:39.700  -->  00:03:41.470
and we'll look at those later on.
83

83

00:03:41.470  -->  00:03:44.070
So some examples of keys and values
84

84

00:03:44.070  -->  00:03:46.160
would be product numbers and products.
85

85

00:03:46.160  -->  00:03:50.130
So, you'd have the product number as the key
86

86

00:03:50.130  -->  00:03:52.440
and the product as the value.
87

87

00:03:52.440  -->  00:03:53.360
Now you might be saying,
88

88

00:03:53.360  -->  00:03:55.070
well if the product number is an integer,
89

89

00:03:55.070  -->  00:03:56.360
why would we have to hash it?
90

90

00:03:56.360  -->  00:03:59.650
Well, you may only have 10 product numbers
91

91

00:03:59.650  -->  00:04:02.920
that correspond to barcode values, for example.
92

92

00:04:02.920  -->  00:04:07.170
And so, you know, you may only have 10 distinct products
93

93

00:04:07.170  -->  00:04:10.640
for your business, but the product IDs
94

94

00:04:10.640  -->  00:04:13.960
are things like 58298754.
95

95

00:04:13.960  -->  00:04:16.050
Obviously you're not gonna use that as an array index,
96

96

00:04:16.050  -->  00:04:18.370
so you're gonna have to somehow hash those values
97

97

00:04:18.370  -->  00:04:21.630
to array indices zero to nine.
98

98

00:04:21.630  -->  00:04:24.210
Employee IDs and employee objects,
99

99

00:04:24.210  -->  00:04:27.260
that's another possible key/value pair that we could use,
100

100

00:04:27.260  -->  00:04:29.610
rather than using the last name as the key.
101

101

00:04:29.610  -->  00:04:31.440
User names and profiles.
102

102

00:04:31.440  -->  00:04:34.190
When you create an account at a website,
103

103

00:04:34.190  -->  00:04:37.950
and you provide a user name, that, under the covers,
104

104

00:04:37.950  -->  00:04:40.440
may be getting hashed to an integer,
105

105

00:04:40.440  -->  00:04:43.820
and that integer's what used to look up your profile.
106

106

00:04:43.820  -->  00:04:46.660
And of course, there's many, many more examples.
107

107

00:04:46.660  -->  00:04:50.960
Now one important value for hash tables, is the load factor.
108

108

00:04:50.960  -->  00:04:53.840
The load factor tells us how full a hash table is.
109

109

00:04:53.840  -->  00:04:56.510
So let's say we're backing the hash table with an array.
110

110

00:04:56.510  -->  00:04:59.740
The load factor would tell us how full the array is.
111

111

00:04:59.740  -->  00:05:00.940
And we can get that
112

112

00:05:00.940  -->  00:05:04.430
by dividing the number of items by the capacity.
113

113

00:05:04.430  -->  00:05:06.870
Which is essentially, the size over the capacity.
114

114

00:05:06.870  -->  00:05:11.320
So if we had an array of 10 backing our hash table,
115

115

00:05:11.320  -->  00:05:15.480
and we had five employees currently in the hash table,
116

116

00:05:15.480  -->  00:05:17.980
the load factor would be 0.5.
117

117

00:05:17.980  -->  00:05:21.580
So that tells us that our array is half full.
118

118

00:05:21.580  -->  00:05:23.790
So the load factor is used to decide
119

119

00:05:23.790  -->  00:05:27.210
when to resize the array, backing the hash table.
120

120

00:05:27.210  -->  00:05:29.500
I'm using an array as an example.
121

121

00:05:29.500  -->  00:05:31.390
Now, it's kind of a balancing act.
122

122

00:05:31.390  -->  00:05:34.040
We don't want the load factor to be too low,
123

123

00:05:34.040  -->  00:05:36.310
because that means there's lots of empty space, right?
124

124

00:05:36.310  -->  00:05:38.430
I mean, if your load factor is point one,
125

125

00:05:38.430  -->  00:05:42.660
it means that only 10% of your array is occupied.
126

126

00:05:42.660  -->  00:05:44.710
But we don't want it to be too high
127

127

00:05:44.710  -->  00:05:47.530
because that will increase the likelihood of collisions.
128

128

00:05:47.530  -->  00:05:51.360
If most of the array is full, and you keep adding items,
129

129

00:05:51.360  -->  00:05:53.390
you are going to get collisions, eventually,
130

130

00:05:53.390  -->  00:05:55.830
because you're basically hashing the keys
131

131

00:05:55.830  -->  00:05:58.770
to a range of values,
132

132

00:05:58.770  -->  00:06:01.350
essentially, the valid indices in the array.
133

133

00:06:01.350  -->  00:06:04.210
And so, if your array is already pretty full
134

134

00:06:04.210  -->  00:06:06.590
and you're gonna be adding lots more items,
135

135

00:06:06.590  -->  00:06:08.350
you're gonna start to get collisions.
136

136

00:06:08.350  -->  00:06:11.150
So to add to a hash table backed by an array,
137

137

00:06:11.150  -->  00:06:13.550
we would provide the key/value pair,
138

138

00:06:13.550  -->  00:06:15.420
and then we would use a hash function,
139

139

00:06:15.420  -->  00:06:17.650
or in Java's case, we'd say a hash method,
140

140

00:06:17.650  -->  00:06:20.230
to hash the key to an int value.
141

141

00:06:20.230  -->  00:06:22.580
So let's say we wanna add Jane Jones
142

142

00:06:22.580  -->  00:06:24.300
and we provide the key Jones,
143

143

00:06:24.300  -->  00:06:26.090
we would have a hash function
144

144

00:06:26.090  -->  00:06:29.130
that hashes Jones to an int value,
145

145

00:06:29.130  -->  00:06:33.660
and then we would store Jane Jones at the hash key/value.
146

146

00:06:33.660  -->  00:06:38.120
And so, if Jones hashed to the integer four,
147

147

00:06:38.120  -->  00:06:41.660
we would store Jane Jones at index four
148

148

00:06:41.660  -->  00:06:44.530
in the array that's backing the hash table.
149

149

00:06:44.530  -->  00:06:47.860
Now when we want it to retrieve the employee
150

150

00:06:47.860  -->  00:06:50.620
with the key Jones, we would provide the key.
151

151

00:06:50.620  -->  00:06:53.170
And obviously, it's got to be the same key you used
152

152

00:06:53.170  -->  00:06:56.660
when you added the object, or it's not gonna work.
153

153

00:06:56.660  -->  00:06:58.800
And then we're going to hash the key again.
154

154

00:06:58.800  -->  00:07:01.850
And obviously, you have to use the same hash function
155

155

00:07:01.850  -->  00:07:03.750
that you're using to add values,
156

156

00:07:03.750  -->  00:07:05.500
otherwise, it's not gonna work.
157

157

00:07:05.500  -->  00:07:08.370
And so we'll provide the key Jones.
158

158

00:07:08.370  -->  00:07:10.090
We'll use the same hash function
159

159

00:07:10.090  -->  00:07:14.090
to hash the key to an int value, and we would get four.
160

160

00:07:14.090  -->  00:07:16.780
And then we'd go and get the item
161

161

00:07:16.780  -->  00:07:19.150
that's stored at position four in the array.
162

162

00:07:19.150  -->  00:07:22.350
Now if by any chance we'd had collisions, of course,
163

163

00:07:22.350  -->  00:07:24.800
we'd have to search through all the items.
164

164

00:07:24.800  -->  00:07:28.250
In that case, our array would probably contain a linked list
165

165

00:07:28.250  -->  00:07:30.850
or it would contain, each item in the array,
166

166

00:07:30.850  -->  00:07:32.330
would be another array.
167

167

00:07:32.330  -->  00:07:34.870
And so, we'd have to search through 'em.
168

168

00:07:34.870  -->  00:07:36.600
As I said, we're gonna see later,
169

169

00:07:36.600  -->  00:07:38.170
how to handle collisions.
170

170

00:07:38.170  -->  00:07:40.150
So we'll see some of the ways that,
171

171

00:07:40.150  -->  00:07:42.420
some of the strategies for dealing with collisions
172

172

00:07:42.420  -->  00:07:44.700
and how we can store items
173

173

00:07:44.700  -->  00:07:46.580
that have the same hash key/value.
174

174

00:07:46.580  -->  00:07:49.330
So as I just went through, if we wanted to add Jane Jones
175

175

00:07:49.330  -->  00:07:50.360
with the key of Jones,
176

176

00:07:50.360  -->  00:07:53.400
we use a hash function to map Jones to an int.
177

177

00:07:53.400  -->  00:07:55.480
And we'll assume we get the value four
178

178

00:07:55.480  -->  00:07:58.260
and that we'd store Jane Jones at array four.
179

179

00:07:58.260  -->  00:08:01.593
And then to get the employee with the key Jones,
180

180

00:08:01.593  -->  00:08:04.930
we'd provide the key, we'd use the same hash function
181

181

00:08:04.930  -->  00:08:08.570
to map Jones to an int, and we should get four,
182

182

00:08:08.570  -->  00:08:10.310
'cause we're using the same hash function.
183

183

00:08:10.310  -->  00:08:13.900
And so we just go to array index four,
184

184

00:08:13.900  -->  00:08:16.150
and that would get us Jane Jones back.
185

185

00:08:16.150  -->  00:08:18.040
And that's how hash tables work.
186

186

00:08:18.040  -->  00:08:20.490
So let's move on, and as usual,
187

187

00:08:20.490  -->  00:08:24.390
we're going to implement a simple hash table.
188

188

00:08:24.390  -->  00:08:25.940
I'll see you in the next video.
