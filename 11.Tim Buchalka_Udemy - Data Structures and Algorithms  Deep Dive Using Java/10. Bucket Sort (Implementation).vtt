WEBVTT
1
1

00:00:00.585  -->  00:00:02.518
[Upbeat Music]
2

2

00:00:02.518  -->  00:00:03.351
[Typing]
3

3

00:00:05.615  -->  00:00:08.080
<v ->Alright so we're gonna start out with a challenge</v>
4

4

00:00:08.080  -->  00:00:10.305
to test your knowledge of what a hash function
5

5

00:00:10.305  -->  00:00:11.414
should be doing.
6

6

00:00:11.414  -->  00:00:14.452
So this is a starter project in the resources section.
7

7

00:00:14.452  -->  00:00:16.407
It has an employee class because
8

8

00:00:16.407  -->  00:00:18.070
we're gonna use that in the next challenge.
9

9

00:00:18.070  -->  00:00:20.364
So you can just ignore that for this challenge.
10

10

00:00:20.364  -->  00:00:22.320
For this challenge all I want you to do,
11

11

00:00:22.320  -->  00:00:23.926
is write this hashing function.
12

12

00:00:23.926  -->  00:00:25.755
And so what we're doing here is
13

13

00:00:25.755  -->  00:00:29.090
we have an array of integers and it's length ten.
14

14

00:00:29.090  -->  00:00:34.090
And I want you to add these integers into that array.
15

15

00:00:34.110  -->  00:00:35.722
So we have a nums to add array,
16

16

00:00:35.722  -->  00:00:37.805
and we've got 59,382 etc.
17

17

00:00:38.941  -->  00:00:41.698
And I want you to add those to the array,
18

18

00:00:41.698  -->  00:00:44.273
so that you would be able to retrieve these numbers
19

19

00:00:44.273  -->  00:00:47.554
from the array just by being given the number.
20

20

00:00:47.554  -->  00:00:49.538
And of course to do that you're
21

21

00:00:49.538  -->  00:00:51.170
gonna have to hash the numbers.
22

22

00:00:51.170  -->  00:00:52.825
Because otherwise there's no way
23

23

00:00:52.825  -->  00:00:55.882
you can tell where these numbers are in the array.
24

24

00:00:55.882  -->  00:00:58.244
And so in this loop we're going through
25

25

00:00:58.244  -->  00:01:00.553
and we're populating the array.
26

26

00:01:00.553  -->  00:01:03.258
And you can see here that the index
27

27

00:01:03.258  -->  00:01:07.043
into this array is the result of the hash function.
28

28

00:01:07.043  -->  00:01:09.047
And so here's the hash function here.
29

29

00:01:09.047  -->  00:01:10.401
Doesn't compile right now because
30

30

00:01:10.401  -->  00:01:13.944
it has an int return value and it's not returning anything.
31

31

00:01:13.944  -->  00:01:17.330
And so your challenge is to write this hash function.
32

32

00:01:17.330  -->  00:01:20.163
So that you can return indexes for
33

33

00:01:21.182  -->  00:01:22.668
integer values that you're given.
34

34

00:01:22.668  -->  00:01:24.628
Now don't worry about collisions.
35

35

00:01:24.628  -->  00:01:26.732
I've deliberately chosen numbers
36

36

00:01:26.732  -->  00:01:28.593
that won't collide with each other.
37

37

00:01:28.593  -->  00:01:30.302
Because the purpose of this challenge is
38

38

00:01:30.302  -->  00:01:32.462
just to make sure you understand
39

39

00:01:32.462  -->  00:01:34.715
what a hashing function is supposed to be doing.
40

40

00:01:34.715  -->  00:01:37.089
And how to write one when you
41

41

00:01:37.089  -->  00:01:41.089
want to be able to hash values to array indexes.
42

42

00:01:41.986  -->  00:01:43.761
And so don't worry about collisions at all.
43

43

00:01:43.761  -->  00:01:46.999
All I want you to do is write this hash function.
44

44

00:01:46.999  -->  00:01:51.832
Have fun with that and I'll see you in the solution video.
