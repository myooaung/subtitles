WEBVTT
1
1

00:00:05.360  -->  00:00:06.870
<v Instructor>Alright in this video we're gonna look</v>
2

2

00:00:06.870  -->  00:00:10.400
at the linear search algorithm, and this is really simple.
3

3

00:00:10.400  -->  00:00:13.840
So there's no slides or no theory video.
4

4

00:00:13.840  -->  00:00:17.430
It's the search algorithm that everybody would think of
5

5

00:00:17.430  -->  00:00:21.453
if somebody said to you, "Write code to find -15
6

6

00:00:22.437  -->  00:00:23.820
"in this array."
7

7

00:00:23.820  -->  00:00:24.770
What are you gonna do?
8

8

00:00:24.770  -->  00:00:27.807
Well, you're gonna iterate over the array and say,
9

9

00:00:27.807  -->  00:00:32.807
"Is int array 0-15, no, okay well increment the index.
10

10

00:00:33.467  -->  00:00:38.407
"Is int array 1-15, no, okay well increment the index.
11

11

00:00:38.407  -->  00:00:43.307
"Is int array 2-15, well yes it is, so bingo we found
12

12

00:00:43.307  -->  00:00:45.200
"The item that we're looking for."
13

13

00:00:45.200  -->  00:00:47.340
And so this is why it's called linear search,
14

14

00:00:47.340  -->  00:00:50.540
you're basically just incrementing the index by one
15

15

00:00:50.540  -->  00:00:53.070
in a linear fashion and you go from the beginning
16

16

00:00:53.070  -->  00:00:54.587
of the array to the end of the array,
17

17

00:00:54.587  -->  00:00:57.850
and you're gonna either find the item you're looking for,
18

18

00:00:57.850  -->  00:00:59.582
or you're going to hit the end of the array,
19

19

00:00:59.582  -->  00:01:04.040
and if you do and the last item in the array isn't equal
20

20

00:01:04.040  -->  00:01:06.310
to the one you're looking for then you can be certain
21

21

00:01:06.310  -->  00:01:07.834
that the array does not contain
22

22

00:01:07.834  -->  00:01:09.970
the value you're looking for.
23

23

00:01:09.970  -->  00:01:11.890
So let's go ahead and write the code for this.
24

24

00:01:11.890  -->  00:01:14.431
I'm sure you could do it yourself, but let's go ahead.
25

25

00:01:14.431  -->  00:01:17.360
So I'll say "public static int"
26

26

00:01:17.360  -->  00:01:21.130
because we're gonna return the index of where the item
27

27

00:01:21.130  -->  00:01:24.240
is that we're looking for, or we'll return minus one
28

28

00:01:24.240  -->  00:01:26.100
if the item's not in the array.
29

29

00:01:26.100  -->  00:01:30.080
So we'll say "linear search" and we want the input array,
30

30

00:01:30.080  -->  00:01:33.840
and we want the value that we wanna find.
31

31

00:01:33.840  -->  00:01:38.840
So we'll say 4 int i=0 I less than input.lenghth
32

32

00:01:39.188  -->  00:01:44.188
i++ if input i equals the value then we're done
33

33

00:01:49.350  -->  00:01:50.773
we'll just return i.
34

34

00:01:51.910  -->  00:01:54.930
If we drop out of this loop, and we haven't hit the value
35

35

00:01:54.930  -->  00:01:57.150
we're looking for then we return minus one
36

36

00:01:57.150  -->  00:02:00.010
because that means that the value isn't in the array.
37

37

00:02:00.010  -->  00:02:02.920
So, let's try add our linear search.
38

38

00:02:02.920  -->  00:02:05.690
So I'll say system.out.printlinelinearsearchintarray
39

39

00:02:09.934  -->  00:02:13.157
and int array and let's look for -15.
40

40

00:02:14.760  -->  00:02:16.003
Minus 15.
41

41

00:02:18.080  -->  00:02:20.950
And then we'll say system.out.printlinelinearsearch
42

42

00:02:24.767  -->  00:02:25.738
intarray
43

43

00:02:25.738  -->  00:02:30.738
and let's look for one, and we'll do a couple more,
44

44

00:02:31.230  -->  00:02:33.323
so I'll copy these two lines.
45

45

00:02:37.460  -->  00:02:39.570
Let's look for something that's not in the array,
46

46

00:02:39.570  -->  00:02:43.297
so 88888 and let's look for -22.
47

47

00:02:44.200  -->  00:02:45.759
The last position in the array.
48

48

00:02:45.759  -->  00:02:47.163
So let's run.
49

49

00:02:52.408  -->  00:02:56.340
Okay, so for -15 we get two, and that's true
50

50

00:02:56.340  -->  00:02:59.560
cause -15 is at index two
51

51

00:02:59.560  -->  00:03:02.750
for one we get five, and that's also correct.
52

52

00:03:02.750  -->  00:03:05.860
Zero, one, two, three, four, five.
53

53

00:03:05.860  -->  00:03:09.748
We get -1 for 88888 because it's not in the array,
54

54

00:03:09.748  -->  00:03:14.748
and we get six for -22 and that's linear search.
55

55

00:03:14.800  -->  00:03:17.110
Now can you figure out the time complexity
56

56

00:03:17.110  -->  00:03:18.530
for this algorithm?
57

57

00:03:18.530  -->  00:03:20.660
Well, it's 0 even right?
58

58

00:03:20.660  -->  00:03:23.010
The worst case is that we're going to be looking
59

59

00:03:23.010  -->  00:03:24.880
for the very last item in the array,
60

60

00:03:24.880  -->  00:03:27.629
which means we have to traverse the entire array
61

61

00:03:27.629  -->  00:03:30.652
which means it's going to take us in steps
62

62

00:03:30.652  -->  00:03:32.760
to get to that last item.
63

63

00:03:32.760  -->  00:03:34.730
And that's it for linear search.
64

64

00:03:34.730  -->  00:03:36.784
I mean, compared to some of the sort algorithms we've looked
65

65

00:03:36.784  -->  00:03:38.300
at, this one's really easy,
66

66

00:03:38.300  -->  00:03:41.045
but there must be a better way.
67

67

00:03:41.045  -->  00:03:44.248
I mean there has to be a faster way to find a value,
68

68

00:03:44.248  -->  00:03:47.090
and there is, and so in the next video we'll take a look
69

69

00:03:47.090  -->  00:03:49.163
at binary search, I'll see you there.
