1
1

00:00:00,467  -->  00:00:02,799
(chime music)
2

2

00:00:02,799  -->  00:00:05,477
(keyboard clicking)
3

3

00:00:05,477  -->  00:00:07,872
<v Sarah>I said in the last video that we could improve</v>
4

4

00:00:07,872  -->  00:00:10,868
on the implementation of our queue
5

5

00:00:10,868  -->  00:00:13,157
and I asked you to think about the case where
6

6

00:00:13,157  -->  00:00:15,501
we add two employees and then we remove one,
7

7

00:00:15,501  -->  00:00:18,994
we add one, we remove one, add one, remove one
8

8

00:00:18,994  -->  00:00:20,366
and we keep alternating like that,
9

9

00:00:20,366  -->  00:00:22,037
because in that case we never have
10

10

00:00:22,037  -->  00:00:24,373
more than two employees on the queue.
11

11

00:00:24,373  -->  00:00:26,764
And so if we've created a queue of length 10
12

12

00:00:26,764  -->  00:00:27,947
or of length five,
13

13

00:00:27,947  -->  00:00:30,160
the queue should never need to be resized.
14

14

00:00:30,160  -->  00:00:32,995
Because we always have fewer employees
15

15

00:00:32,995  -->  00:00:34,307
than the size of the queue.
16

16

00:00:34,307  -->  00:00:36,505
But will that be the case?
17

17

00:00:36,505  -->  00:00:38,159
So I've created a new project
18

18

00:00:38,159  -->  00:00:42,150
and I've got the exact same code in here.
19

19

00:00:42,150  -->  00:00:43,889
(mouse scrolling)
20

20

00:00:43,889  -->  00:00:47,001
And this is the code we're going to update
21

21

00:00:47,001  -->  00:00:48,263
to improve the implementation.
22

22

00:00:48,263  -->  00:00:50,333
But first let's demonstrate what's wrong
23

23

00:00:50,333  -->  00:00:51,459
with this implementation.
24

24

00:00:51,459  -->  00:00:52,880
So back in the main method,
25

25

00:00:52,880  -->  00:00:55,531
I've added the code for doing
26

26

00:00:55,531  -->  00:00:57,764
the alternating adds and removes.
27

27

00:00:57,764  -->  00:01:00,181
I'll just uncommit that code.
28

28

00:01:01,906  -->  00:01:04,185
Underneath, I have our old code
29

29

00:01:04,185  -->  00:01:06,748
that we did in the last video
30

30

00:01:06,748  -->  00:01:09,938
and what I'm going to do here is I'm gonna say;
31

31

00:01:09,938  -->  00:01:13,521
"Array queue queue equals new array queue".
32

32

00:01:14,380  -->  00:01:15,297
Array queue
33

33

00:01:16,331  -->  00:01:17,769
And I'm gonna make it five
34

34

00:01:17,769  -->  00:01:21,976
so we don't have to do a tonne of adds and removes.
35

35

00:01:21,976  -->  00:01:24,128
So down here I'm adding Jane and John
36

36

00:01:24,128  -->  00:01:25,550
and then I removed Jane
37

37

00:01:25,550  -->  00:01:26,581
I add Mary,
38

38

00:01:26,581  -->  00:01:28,523
I remove John,
39

39

00:01:28,523  -->  00:01:29,392
I add Mike,
40

40

00:01:29,392  -->  00:01:30,534
I remove Mary,
41

41

00:01:30,534  -->  00:01:32,266
I add Bill,
42

42

00:01:32,266  -->  00:01:33,749
I remove Mike
43

43

00:01:33,749  -->  00:01:35,529
and then I add Jane again.
44

44

00:01:35,529  -->  00:01:38,531
And so because after the first two adds
45

45

00:01:38,531  -->  00:01:40,779
I'm removing, adding, removing, adding et cetera,
46

46

00:01:40,779  -->  00:01:43,311
we never have more than two employees on a queue
47

47

00:01:43,311  -->  00:01:45,976
and our queue has a capacity of five.
48

48

00:01:45,976  -->  00:01:47,389
And so we shouldn't expect
49

49

00:01:47,389  -->  00:01:49,685
this queue to be resized.
50

50

00:01:49,685  -->  00:01:51,732
So let's go into our array queue class
51

51

00:01:51,732  -->  00:01:54,565
and I'm going to put a break point
52

52

00:01:55,406  -->  00:01:56,893
right here.
53

53

00:01:56,893  -->  00:01:58,333
And I'm gonna run the debugger
54

54

00:01:58,333  -->  00:02:00,949
and we're gonna see if when we run the main method
55

55

00:02:00,949  -->  00:02:02,552
if this break point is hit.
56

56

00:02:02,552  -->  00:02:05,349
Because if it is, it means we're resizing the array.
57

57

00:02:05,349  -->  00:02:07,930
So to run the debugger instead of hitting the green arrow
58

58

00:02:07,930  -->  00:02:09,556
I'll hit the little bug here.
59

59

00:02:09,556  -->  00:02:10,639
So let's run.
60

60

00:02:15,205  -->  00:02:16,806
And boom, we hit the break point
61

61

00:02:16,806  -->  00:02:19,680
which means we're trying to resize our array.
62

62

00:02:19,680  -->  00:02:21,642
Now if we go back to the main method,
63

63

00:02:21,642  -->  00:02:22,767
so I'll go to the,
64

64

00:02:22,767  -->  00:02:25,613
here's our call stack that we've talked about.
65

65

00:02:25,613  -->  00:02:28,174
So right now we have main and add on here
66

66

00:02:28,174  -->  00:02:30,290
I'll go main and you'll see that it's when
67

67

00:02:30,290  -->  00:02:32,174
we come to add Jane Jones
68

68

00:02:32,174  -->  00:02:34,188
that we're trying to resize the array.
69

69

00:02:34,188  -->  00:02:35,297
So before we do that,
70

70

00:02:35,297  -->  00:02:37,861
we've added five employees
71

71

00:02:37,861  -->  00:02:41,102
and sure we're doing a sixth add.
72

72

00:02:41,102  -->  00:02:42,901
And our capacity is five,
73

73

00:02:42,901  -->  00:02:45,007
but we never have more than two employees
74

74

00:02:45,007  -->  00:02:47,320
on the queue so there should still be room,
75

75

00:02:47,320  -->  00:02:49,029
but apparently there isn't.
76

76

00:02:49,029  -->  00:02:50,645
And I'll tell you why.
77

77

00:02:50,645  -->  00:02:51,955
If we come down and look
78

78

00:02:51,955  -->  00:02:55,054
at the fields for this class.
79

79

00:02:55,054  -->  00:02:58,420
And we look at the queue field.
80

80

00:02:58,420  -->  00:03:00,830
We'll see that the only employee
81

81

00:03:00,830  -->  00:03:03,113
on the queue right now is Bill End
82

82

00:03:03,113  -->  00:03:05,286
which is what we expect from this code.
83

83

00:03:05,286  -->  00:03:08,418
Cos we've, the last remove removed Mike
84

84

00:03:08,418  -->  00:03:12,008
and so all we have is Bill when we come to add Jane.
85

85

00:03:12,008  -->  00:03:14,180
And he's at position four
86

86

00:03:14,180  -->  00:03:15,912
and here we have the line saying
87

87

00:03:15,912  -->  00:03:17,475
"Not showing null elements".
88

88

00:03:17,475  -->  00:03:19,832
So that means that positions zero to three
89

89

00:03:19,832  -->  00:03:21,694
in the array are null.
90

90

00:03:21,694  -->  00:03:23,406
But if you look at our front and back fields,
91

91

00:03:23,406  -->  00:03:25,379
our front is four and that's right
92

92

00:03:25,379  -->  00:03:27,537
because Bill's the only guy on the queue
93

93

00:03:27,537  -->  00:03:28,621
and he's at position four
94

94

00:03:28,621  -->  00:03:30,187
so he's at the front
95

95

00:03:30,187  -->  00:03:31,462
and the front is four.
96

96

00:03:31,462  -->  00:03:33,352
But the back is five.
97

97

00:03:33,352  -->  00:03:35,780
And if we look at our add method
98

98

00:03:35,780  -->  00:03:37,079
we're checking whether
99

99

00:03:37,079  -->  00:03:39,565
back equals queue dot length and it does.
100

100

00:03:39,565  -->  00:03:43,267
Because it's five and the length of our queue is five.
101

101

00:03:43,267  -->  00:03:46,088
We specified a length of five back here.
102

102

00:03:46,088  -->  00:03:48,035
The problem is there's all this space
103

103

00:03:48,035  -->  00:03:49,504
at the front of the array.
104

104

00:03:49,504  -->  00:03:51,841
And so our queue isn't really full.
105

105

00:03:51,841  -->  00:03:55,008
What we've done here is we've just hit the end of the array.
106

106

00:03:55,008  -->  00:03:59,040
And so even though 80% of our queue is empty,
107

107

00:03:59,040  -->  00:04:01,359
we're doubling the length of the array
108

108

00:04:01,359  -->  00:04:03,731
and then if we keep doing this add remove thing
109

109

00:04:03,731  -->  00:04:05,532
at some point we're gonna double it again
110

110

00:04:05,532  -->  00:04:06,365
and double it again
111

111

00:04:06,365  -->  00:04:07,685
and double it again.
112

112

00:04:07,685  -->  00:04:10,436
Now our array was only started at length five.
113

113

00:04:10,436  -->  00:04:13,425
What if you started an array at length 1,000?
114

114

00:04:13,425  -->  00:04:15,475
And you kept doing this add remove stuff.
115

115

00:04:15,475  -->  00:04:18,082
By the time you get to the end of the array,
116

116

00:04:18,082  -->  00:04:21,249
you're gonna have over 990 empty spots
117

117

00:04:22,316  -->  00:04:23,404
in the front of the array
118

118

00:04:23,404  -->  00:04:24,504
and you're still gonna go ahead
119

119

00:04:24,504  -->  00:04:27,297
and double the size of that array to 2,000.
120

120

00:04:27,297  -->  00:04:29,951
So it would be nice if we could use
121

121

00:04:29,951  -->  00:04:32,052
the empty space at the front of the array.
122

122

00:04:32,052  -->  00:04:35,635
And we can if we wrap the back of the queue
123

123

00:04:36,792  -->  00:04:38,415
to the front of the array.
124

124

00:04:38,415  -->  00:04:39,294
And when we do this,
125

125

00:04:39,294  -->  00:04:41,914
this is called a Circular Queue.
126

126

00:04:41,914  -->  00:04:43,729
And we're going to update our implementation
127

127

00:04:43,729  -->  00:04:44,562
to do that.
128

128

00:04:44,562  -->  00:04:47,770
So rather than incrementing back to five,
129

129

00:04:47,770  -->  00:04:49,918
we'll wrap it to the front.
130

130

00:04:49,918  -->  00:04:52,587
And so our queue will actually...
131

131

00:04:52,587  -->  00:04:54,074
The front part of the queue will
132

132

00:04:54,074  -->  00:04:55,150
be at the end of the array
133

133

00:04:55,150  -->  00:04:57,201
and the back part will start filling up
134

134

00:04:57,201  -->  00:04:58,660
at the beginning of the array.
135

135

00:04:58,660  -->  00:05:00,272
And that way we can make use
136

136

00:05:00,272  -->  00:05:01,912
of all this empty space
137

137

00:05:01,912  -->  00:05:04,907
and our queue won't have to be resized as often.
138

138

00:05:04,907  -->  00:05:07,334
So I'm gonna close this off but before I do
139

139

00:05:07,334  -->  00:05:08,674
I'm just gonna stop the debugger
140

140

00:05:08,674  -->  00:05:10,364
by hitting the stop button here.
141

141

00:05:10,364  -->  00:05:12,836
And now I'll close this off
142

142

00:05:12,836  -->  00:05:14,804
and for now I'll remove the break points
143

143

00:05:14,804  -->  00:05:16,281
so it's not distracting.
144

144

00:05:16,281  -->  00:05:18,850
So lets go ahead and update this implementation
145

145

00:05:18,850  -->  00:05:20,233
so that it's a circular queue.
146

146

00:05:20,233  -->  00:05:21,905
We don't have to touch the constructor,
147

147

00:05:21,905  -->  00:05:24,338
front and back are still gonna start at zero.
148

148

00:05:24,338  -->  00:05:25,636
But we are gonna have to do
149

149

00:05:25,636  -->  00:05:28,055
a different check here because now,
150

150

00:05:28,055  -->  00:05:30,423
just because back equals queue dot length
151

151

00:05:30,423  -->  00:05:31,256
as we've seen
152

152

00:05:31,256  -->  00:05:33,830
doesn't mean the queue is gonna be full.
153

153

00:05:33,830  -->  00:05:37,084
There may be empty space at the front of the array.
154

154

00:05:37,084  -->  00:05:39,674
And so we're gonna use size here.
155

155

00:05:39,674  -->  00:05:40,849
And we're gonna say
156

156

00:05:40,849  -->  00:05:41,849
"if the size
157

157

00:05:42,791  -->  00:05:43,862
of the array
158

158

00:05:43,862  -->  00:05:47,097
is equal to queue dot length minus one".
159

159

00:05:47,097  -->  00:05:49,714
Okay so that's resizing.
160

160

00:05:49,714  -->  00:05:52,534
Now obviously because we're wrapping the queue,
161

161

00:05:52,534  -->  00:05:55,328
we've got to change some code down here as well.
162

162

00:05:55,328  -->  00:05:57,159
We're still always going to assign
163

163

00:05:57,159  -->  00:05:59,192
the employee we're adding,
164

164

00:05:59,192  -->  00:06:01,248
into the back of the queue.
165

165

00:06:01,248  -->  00:06:02,758
That doesn't change.
166

166

00:06:02,758  -->  00:06:06,273
But we don't necessarily want to just increment back.
167

167

00:06:06,273  -->  00:06:08,228
Because we might want to wrap back
168

168

00:06:08,228  -->  00:06:09,882
to the front of the queue.
169

169

00:06:09,882  -->  00:06:11,411
So we're gonna say
170

170

00:06:11,411  -->  00:06:15,578
"if back is less than queue dot length minus one".
171

171

00:06:19,236  -->  00:06:23,079
In that case we can just go ahead and increment back.
172

172

00:06:23,079  -->  00:06:26,851
I'll remove that increment from here.
173

173

00:06:26,851  -->  00:06:30,788
Otherwise, we're gonna set back to zero
174

174

00:06:30,788  -->  00:06:32,461
which means we're gonna wrap it.
175

175

00:06:32,461  -->  00:06:33,547
Alright so lets take a look
176

176

00:06:33,547  -->  00:06:35,883
at what this code means for our case.
177

177

00:06:35,883  -->  00:06:38,620
So I'm gonna add some comments in here to help.
178

178

00:06:38,620  -->  00:06:41,370
So if we add Jane to position one
179

179

00:06:42,990  -->  00:06:45,639
and then she's gonna be the front.
180

180

00:06:45,639  -->  00:06:48,556
And then we come ahead and add John
181

181

00:06:49,510  -->  00:06:52,427
and then we come in and we add Mary
182

182

00:06:54,509  -->  00:06:56,959
and then we come in we add Mike.
183

183

00:06:56,959  -->  00:06:59,587
Now at this point there's a position four
184

184

00:06:59,587  -->  00:07:03,423
and right now it's the back position.
185

185

00:07:03,423  -->  00:07:06,314
So I'll just put this out here.
186

186

00:07:06,314  -->  00:07:09,402
So after we've added Jane, John, Mary and Mike,
187

187

00:07:09,402  -->  00:07:12,154
the front of the queue is still position zero,
188

188

00:07:12,154  -->  00:07:14,383
the back of the queue is currently pointing to four.
189

189

00:07:14,383  -->  00:07:16,317
It's the next available position.
190

190

00:07:16,317  -->  00:07:18,320
Now we want a circular queue.
191

191

00:07:18,320  -->  00:07:20,289
So if we come in here
192

192

00:07:20,289  -->  00:07:22,292
and we add Bill,
193

193

00:07:22,292  -->  00:07:25,454
we can't wrap back to the front
194

194

00:07:25,454  -->  00:07:28,376
because that's not the next available position.
195

195

00:07:28,376  -->  00:07:29,594
When we add Bill in here,
196

196

00:07:29,594  -->  00:07:32,325
we want the next available position to be five
197

197

00:07:32,325  -->  00:07:35,235
and that means that we're gonna have to resize the array.
198

198

00:07:35,235  -->  00:07:39,197
And so in this case the size which is four
199

199

00:07:39,197  -->  00:07:42,812
is equal to queue dot length minus one, right?
200

200

00:07:42,812  -->  00:07:44,093
Because queue dot length,
201

201

00:07:44,093  -->  00:07:46,152
which is five, minus one is four,
202

202

00:07:46,152  -->  00:07:48,600
and that means that we've got our size is four,
203

203

00:07:48,600  -->  00:07:51,289
they're equal, and so we need to resize
204

204

00:07:51,289  -->  00:07:53,367
the array because we want to be able
205

205

00:07:53,367  -->  00:07:57,057
to add Bill in here and increment back to five.
206

206

00:07:57,057  -->  00:07:59,935
And so once we've done that,
207

207

00:07:59,935  -->  00:08:02,891
we'll assign Bill in here.
208

208

00:08:02,891  -->  00:08:04,379
So assign Bill.
209

209

00:08:04,379  -->  00:08:06,033
So we're gonna put Bill in here
210

210

00:08:06,033  -->  00:08:08,539
and because we resized the array
211

211

00:08:08,539  -->  00:08:11,044
we're now gonna have five,
212

212

00:08:11,044  -->  00:08:11,877
six,
213

213

00:08:14,461  -->  00:08:15,294
seven,
214

214

00:08:15,294  -->  00:08:16,127
et cetera,
215

215

00:08:16,127  -->  00:08:16,960
up to nine.
216

216

00:08:16,960  -->  00:08:18,313
And so when we do this test here
217

217

00:08:18,313  -->  00:08:19,146
we're gonna say
218

218

00:08:19,146  -->  00:08:21,283
"is back less than queue dot length minus one"?
219

219

00:08:21,283  -->  00:08:24,627
Well yes it is because the new length of the queue is 10.
220

220

00:08:24,627  -->  00:08:27,023
And back is less than nine
221

221

00:08:27,023  -->  00:08:28,846
and so we can just safely go ahead
222

222

00:08:28,846  -->  00:08:31,146
and say we've added Bill.
223

223

00:08:31,146  -->  00:08:34,229
And now here's the new back position.
224

224

00:08:36,056  -->  00:08:39,025
And so this is why we have to resize
225

225

00:08:39,025  -->  00:08:42,296
the queue when we're one element short
226

226

00:08:42,296  -->  00:08:43,733
of the length of the array.
227

227

00:08:43,733  -->  00:08:46,712
And that's why this test down here is good.
228

228

00:08:46,712  -->  00:08:48,723
Because once we've resized the queue
229

229

00:08:48,723  -->  00:08:49,931
we know that back will be
230

230

00:08:49,931  -->  00:08:51,857
less than queue dot length minus one
231

231

00:08:51,857  -->  00:08:54,127
and we can just go ahead and increment it.
232

232

00:08:54,127  -->  00:08:56,877
But now let's take these guys out
233

233

00:08:58,560  -->  00:09:00,826
so we can look at the case where we're doing
234

234

00:09:00,826  -->  00:09:02,277
the alternating adds
235

235

00:09:02,277  -->  00:09:03,596
so we can see what other situations
236

236

00:09:03,596  -->  00:09:05,709
we can get into.
237

237

00:09:05,709  -->  00:09:08,547
And so again we're back to zero, one, two, three.
238

238

00:09:08,547  -->  00:09:12,006
So in this case we add Jane at the front
239

239

00:09:12,006  -->  00:09:14,173
and then we're adding John
240

240

00:09:16,028  -->  00:09:17,604
and after we've added John
241

241

00:09:17,604  -->  00:09:20,079
we have this situation right?
242

242

00:09:20,079  -->  00:09:23,616
And then we come in and we remove Jane.
243

243

00:09:23,616  -->  00:09:27,222
And so our front's gonna come here
244

244

00:09:27,222  -->  00:09:29,055
and I'll take this out
245

245

00:09:30,037  -->  00:09:31,704
and then we add Mary
246

246

00:09:32,598  -->  00:09:34,216
cos we're doing these alternating adds.
247

247

00:09:34,216  -->  00:09:35,680
So Mary comes in here
248

248

00:09:35,680  -->  00:09:39,513
and our back position gets incremented by one.
249

249

00:09:41,481  -->  00:09:44,519
And then we're removing John
250

250

00:09:44,519  -->  00:09:46,519
so our front comes here.
251

251

00:09:48,206  -->  00:09:51,123
And then we come in and we add Mike
252

252

00:09:52,151  -->  00:09:54,568
and our back get incremented.
253

253

00:09:56,816  -->  00:09:58,733
And then we remove Mary
254

254

00:10:00,176  -->  00:10:02,259
so our front is now here,
255

255

00:10:04,577  -->  00:10:05,918
and now we want to come in
256

256

00:10:05,918  -->  00:10:07,686
and we add Bill.
257

257

00:10:07,686  -->  00:10:09,019
That's all cool.
258

258

00:10:10,611  -->  00:10:13,366
And we're not gonna resize because
259

259

00:10:13,366  -->  00:10:14,666
when we do the test here
260

260

00:10:14,666  -->  00:10:17,582
we've only got one employee, Mike,
261

261

00:10:17,582  -->  00:10:18,600
when we came in.
262

262

00:10:18,600  -->  00:10:21,870
And so we don't need to do a resize.
263

263

00:10:21,870  -->  00:10:25,648
We're gonna add Bill into back which is currently four.
264

264

00:10:25,648  -->  00:10:27,739
And then we do this check, and we say
265

265

00:10:27,739  -->  00:10:30,259
"if back is less than queue dot length minus one".
266

266

00:10:30,259  -->  00:10:32,755
Well this check fails because
267

267

00:10:32,755  -->  00:10:36,386
back is four and queue dot length minus one is four.
268

268

00:10:36,386  -->  00:10:39,059
So it's not less than queue dot length minus one.
269

269

00:10:39,059  -->  00:10:41,904
And so because of that we drop into this part
270

270

00:10:41,904  -->  00:10:45,329
and we wrap back to the front of the queue.
271

271

00:10:45,329  -->  00:10:49,389
And so this here will be the new back position
272

272

00:10:49,389  -->  00:10:50,452
which is correct.
273

273

00:10:50,452  -->  00:10:54,092
Because then when we add Jane for the second time,
274

274

00:10:54,092  -->  00:10:56,509
we can come put Jane in here,
275

275

00:10:57,352  -->  00:10:58,935
and increment back.
276

276

00:11:03,242  -->  00:11:05,799
Alright, so lets keep going with this example.
277

277

00:11:05,799  -->  00:11:07,633
Because as you're gonna see
278

278

00:11:07,633  -->  00:11:10,397
we have one more change to make to our add method
279

279

00:11:10,397  -->  00:11:12,720
and you might've caught that already.
280

280

00:11:12,720  -->  00:11:14,982
So let's say that we go ahead
281

281

00:11:14,982  -->  00:11:17,332
and add back John and then
282

282

00:11:17,332  -->  00:11:19,499
we increment back to here.
283

283

00:11:21,569  -->  00:11:25,736
Well when we come in and add let's say Mary again,
284

284

00:11:26,878  -->  00:11:28,204
there's room for Mary here,
285

285

00:11:28,204  -->  00:11:30,302
but we can't increment back.
286

286

00:11:30,302  -->  00:11:33,469
So we are going to meet this condition
287

287

00:11:34,641  -->  00:11:36,455
because we have four items in the queue.
288

288

00:11:36,455  -->  00:11:38,340
And so this condition's going to be true.
289

289

00:11:38,340  -->  00:11:41,158
And we're going to ahead and resize the array.
290

290

00:11:41,158  -->  00:11:43,985
But if we just copy in the elements exactly
291

291

00:11:43,985  -->  00:11:46,260
as they are, that obviously won't work.
292

292

00:11:46,260  -->  00:11:47,950
Because if we add Mary in here,
293

293

00:11:47,950  -->  00:11:51,254
it doesn't matter if we've added elements at the end,
294

294

00:11:51,254  -->  00:11:52,405
we can't increment back
295

295

00:11:52,405  -->  00:11:55,444
so we have to change how we're resizing the array.
296

296

00:11:55,444  -->  00:11:57,575
When we resize the array
297

297

00:11:57,575  -->  00:12:00,223
we're going to unwrap the queue,
298

298

00:12:00,223  -->  00:12:03,926
so basically we'll copy the elements
299

299

00:12:03,926  -->  00:12:05,229
from the front of the queue
300

300

00:12:05,229  -->  00:12:06,611
to the back of the array
301

301

00:12:06,611  -->  00:12:09,061
into the front of the resized array
302

302

00:12:09,061  -->  00:12:11,380
and then we'll add the remaining elements
303

303

00:12:11,380  -->  00:12:13,280
in the queue to the end.
304

304

00:12:13,280  -->  00:12:15,165
And so after we've resized,
305

305

00:12:15,165  -->  00:12:17,495
our front will be reset to zero
306

306

00:12:17,495  -->  00:12:19,259
and the back will be the size
307

307

00:12:19,259  -->  00:12:20,371
will be the number of elements
308

308

00:12:20,371  -->  00:12:22,660
because that will be the next available position.
309

309

00:12:22,660  -->  00:12:23,754
So in this case
310

310

00:12:23,754  -->  00:12:25,587
after we resize the array
311

311

00:12:25,587  -->  00:12:27,864
we're gonna end up with the following.
312

312

00:12:27,864  -->  00:12:30,959
So we'll have Mike at position zero
313

313

00:12:30,959  -->  00:12:32,292
because he's at the front of the queue.
314

314

00:12:32,292  -->  00:12:33,716
And then at position one,
315

315

00:12:33,716  -->  00:12:35,226
we'd have Bill
316

316

00:12:35,226  -->  00:12:37,393
at position two we have Jane,
317

317

00:12:37,393  -->  00:12:39,795
at position three we have John
318

318

00:12:39,795  -->  00:12:41,921
and then at position four
319

319

00:12:41,921  -->  00:12:43,391
that'll be pointing to back
320

320

00:12:43,391  -->  00:12:44,624
and then we'll have,
321

321

00:12:44,624  -->  00:12:45,903
if we double the length of the array,
322

322

00:12:45,903  -->  00:12:49,653
we'd have positions five up to position nine.
323

323

00:12:51,180  -->  00:12:53,093
Because we would have doubled the array.
324

324

00:12:53,093  -->  00:12:55,714
So we're gonna have to change the code in here
325

325

00:12:55,714  -->  00:12:58,899
so that if we're butting up against the front
326

326

00:12:58,899  -->  00:13:00,283
after we've wrapped
327

327

00:13:00,283  -->  00:13:01,583
when we resize
328

328

00:13:01,583  -->  00:13:04,713
we start the queue from the beginning again.
329

329

00:13:04,713  -->  00:13:07,733
And as you can see we're in the same situation
330

330

00:13:07,733  -->  00:13:11,765
here as we were if we added four employees
331

331

00:13:11,765  -->  00:13:13,734
and then wanted to add a fifth.
332

332

00:13:13,734  -->  00:13:15,649
Here we've added four employees
333

333

00:13:15,649  -->  00:13:16,973
when we've wrapped the queue
334

334

00:13:16,973  -->  00:13:18,370
and we still get into the situation
335

335

00:13:18,370  -->  00:13:20,017
where we can't increment back
336

336

00:13:20,017  -->  00:13:21,803
because if we do,
337

337

00:13:21,803  -->  00:13:23,089
it's gonna be pointing to something
338

338

00:13:23,089  -->  00:13:24,598
that's already occupied.
339

339

00:13:24,598  -->  00:13:28,552
So when we have one fewer items in the array,
340

340

00:13:28,552  -->  00:13:29,743
then the length of the array
341

341

00:13:29,743  -->  00:13:32,339
it doesn't matter whether the remaining free spot
342

342

00:13:32,339  -->  00:13:33,864
is at the end of the array
343

343

00:13:33,864  -->  00:13:35,555
or somewhere in the middle of the array,
344

344

00:13:35,555  -->  00:13:37,497
we still have to go through the resizing
345

345

00:13:37,497  -->  00:13:39,367
because we have the same problem
346

346

00:13:39,367  -->  00:13:41,680
of not being able to increment back
347

347

00:13:41,680  -->  00:13:44,231
or in the case of at the end of the array
348

348

00:13:44,231  -->  00:13:47,647
we can't wrap back to the beginning of the array.
349

349

00:13:47,647  -->  00:13:49,643
So let's change our code in here
350

350

00:13:49,643  -->  00:13:53,726
to resize the array and copy the elements in such
351

351

00:13:54,931  -->  00:13:58,494
that we'll take the elements from the front of the queue
352

352

00:13:58,494  -->  00:14:01,510
and copy them to the front of the resized array
353

353

00:14:01,510  -->  00:14:03,136
and we'll copy the elements in
354

354

00:14:03,136  -->  00:14:04,239
so that when we're finished
355

355

00:14:04,239  -->  00:14:06,264
our front is reset to zero
356

356

00:14:06,264  -->  00:14:09,588
and the elements are in the order they were added
357

357

00:14:09,588  -->  00:14:11,959
and the back will be a the end.
358

358

00:14:11,959  -->  00:14:13,728
So essentially in here
359

359

00:14:13,728  -->  00:14:15,380
we're not just resizing the array
360

360

00:14:15,380  -->  00:14:16,842
we're also moving the queue
361

361

00:14:16,842  -->  00:14:19,041
we're unwrapping the queue potentially
362

362

00:14:19,041  -->  00:14:21,503
and moving it to the front of the array.
