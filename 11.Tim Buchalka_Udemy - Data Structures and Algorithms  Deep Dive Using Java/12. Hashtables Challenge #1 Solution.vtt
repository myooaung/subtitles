WEBVTT
1
1

00:00:00.410  -->  00:00:03.160
(upbeat chiming)
2

2

00:00:05.470  -->  00:00:06.303
<v Sarah>All right,</v>
3

3

00:00:06.303  -->  00:00:08.180
so let's write our hash function.
4

4

00:00:08.180  -->  00:00:11.640
Now, the key here is that the hash function has
5

5

00:00:11.640  -->  00:00:14.230
to return valid array indices
6

6

00:00:14.230  -->  00:00:16.580
and we know our array is of length 10,
7

7

00:00:16.580  -->  00:00:18.360
and so the indices it returns
8

8

00:00:18.360  -->  00:00:21.080
have to be zero to nine inclusive.
9

9

00:00:21.080  -->  00:00:22.600
The hash function I'm going
10

10

00:00:22.600  -->  00:00:24.800
to write just mods the value by 10
11

11

00:00:24.800  -->  00:00:27.190
and then takes the absolute value of that.
12

12

00:00:27.190  -->  00:00:29.650
As I pointed out a few times
13

13

00:00:29.650  -->  00:00:31.350
when we went through this section,
14

14

00:00:31.350  -->  00:00:33.650
usually when you are writing a hashing function
15

15

00:00:33.650  -->  00:00:38.120
and you're wanting to hash the values to array indices,
16

16

00:00:38.120  -->  00:00:40.260
you wanna mod by the length of the array,
17

17

00:00:40.260  -->  00:00:41.730
because that guarantees
18

18

00:00:41.730  -->  00:00:46.490
that the value you'll get is going to be between zero
19

19

00:00:46.490  -->  00:00:49.690
and whatever the last valid array index is,
20

20

00:00:49.690  -->  00:00:52.040
so you can do whatever you want to hash the value.
21

21

00:00:52.040  -->  00:00:55.170
You can have this really complicated hashing function
22

22

00:00:55.170  -->  00:00:57.670
if you want, but somewhere in there,
23

23

00:00:57.670  -->  00:01:00.400
you're gonna wanna mod by the length of the array,
24

24

00:01:00.400  -->  00:01:01.620
so that you know you're
25

25

00:01:01.620  -->  00:01:04.560
going to be returning an index that's not going to be out
26

26

00:01:04.560  -->  00:01:06.410
of bounds, and so this is gonna be
27

27

00:01:06.410  -->  00:01:08.090
a pretty simple hashing function.
28

28

00:01:08.090  -->  00:01:13.090
I'm just gonna say return Math.abs, value mod 10.
29

29

00:01:16.220  -->  00:01:19.320
And that's it, and so for 59382,
30

30

00:01:19.320  -->  00:01:21.230
we're gonna end up with two.
31

31

00:01:21.230  -->  00:01:24.160
It's essentially gonna give us the last value here,
32

32

00:01:24.160  -->  00:01:26.220
the value in the ones, and then
33

33

00:01:26.220  -->  00:01:27.640
we have a negative number here
34

34

00:01:27.640  -->  00:01:30.040
and that's why we need to take the absolute value.
35

35

00:01:30.040  -->  00:01:33.263
And so if I run now, let's see what we get.
36

36

00:01:36.650  -->  00:01:39.450
And I'll just bring this up a little bit and as you see,
37

37

00:01:39.450  -->  00:01:42.330
the values are being placed based on their one's position,
38

38

00:01:42.330  -->  00:01:45.190
so 500 is in array slot zero,
39

39

00:01:45.190  -->  00:01:49.390
59,382 is in position two,
40

40

00:01:49.390  -->  00:01:53.170
43 is in position three, et cetera.
41

41

00:01:53.170  -->  00:01:55.670
So if we wanted to get one of these values,
42

42

00:01:55.670  -->  00:01:58.320
like let's say this was part of a larger application
43

43

00:01:58.320  -->  00:02:01.850
and we had a get method and we would pass these values,
44

44

00:02:01.850  -->  00:02:03.900
which doesn't really make sense for integers,
45

45

00:02:03.900  -->  00:02:05.680
but if these were keys,
46

46

00:02:05.680  -->  00:02:07.890
it would make sense, so we were storing
47

47

00:02:07.890  -->  00:02:09.570
something else in the array
48

48

00:02:09.570  -->  00:02:11.190
and these were actually the keys,
49

49

00:02:11.190  -->  00:02:14.360
so we need to hash the keys to the array indices.
50

50

00:02:14.360  -->  00:02:17.280
We would run the same hash function on the values
51

51

00:02:17.280  -->  00:02:18.520
and that would give us the index.
52

52

00:02:18.520  -->  00:02:22.220
So if we were passed 500, we'd call the same hash function
53

53

00:02:22.220  -->  00:02:24.710
or I suppose we should say method in Java,
54

54

00:02:24.710  -->  00:02:27.940
and we'd get zero back and then we'd go to int nums,
55

55

00:02:27.940  -->  00:02:29.300
we'd go to position zero.
56

56

00:02:29.300  -->  00:02:31.100
And so this is just a little challenge
57

57

00:02:31.100  -->  00:02:32.750
to make sure you understand what the
58

58

00:02:32.750  -->  00:02:34.770
hashing function is supposed to be doing.
59

59

00:02:34.770  -->  00:02:37.023
So let's move on to our second challenge.
