1
1

00:00:00,205  -->  00:00:02,788
(upbeat music)
2

2

00:00:05,270  -->  00:00:10,170
<v Sarah>So I'm here at the Javadoc for java.util.stack</v>
3

3

00:00:10,170  -->  00:00:12,330
and our first thought is gonna be oh well
4

4

00:00:12,330  -->  00:00:15,590
that's really cool, Java has, JDK has a stack class.
5

5

00:00:15,590  -->  00:00:16,850
We'll just go ahead and use it,
6

6

00:00:16,850  -->  00:00:20,230
but there's a but, if we read the documentation
7

7

00:00:20,230  -->  00:00:22,290
we'll see that the Java team recommends
8

8

00:00:22,290  -->  00:00:25,160
that we not use this class, it says right here,
9

9

00:00:25,160  -->  00:00:28,890
a more complete and consistent set of LIFO stack operations
10

10

00:00:28,890  -->  00:00:31,120
is provided by the Deque interface,
11

11

00:00:31,120  -->  00:00:34,560
remember because stack is an abstract data type,
12

12

00:00:34,560  -->  00:00:37,110
the behaviour is most likely going to be dictated
13

13

00:00:37,110  -->  00:00:40,140
by an interface and so it's saying,
14

14

00:00:40,140  -->  00:00:42,230
the documentation is saying that instead of using
15

15

00:00:42,230  -->  00:00:44,370
the stack class we should use a class
16

16

00:00:44,370  -->  00:00:46,660
that implements the Deque interface.
17

17

00:00:46,660  -->  00:00:50,070
In the que section we'll learn more about what this Deque
18

18

00:00:50,070  -->  00:00:53,120
interface is, but we can see in the docks
19

19

00:00:53,120  -->  00:00:55,840
that there is an array Deque class.
20

20

00:00:55,840  -->  00:00:58,320
Right here they're suggesting that one of the classes
21

21

00:00:58,320  -->  00:01:00,830
we could use that implements the Deque class
22

22

00:01:00,830  -->  00:01:03,910
is an array Deque and if you think that means it's a
23

23

00:01:03,910  -->  00:01:06,830
Deque backed by an array, you get a gold star.
24

24

00:01:06,830  -->  00:01:09,550
So if we wanted an array implementation
25

25

00:01:09,550  -->  00:01:12,530
of a stack, this is one of the classes
26

26

00:01:12,530  -->  00:01:13,680
we could consider using.
27

27

00:01:13,680  -->  00:01:14,880
That's one option.
28

28

00:01:14,880  -->  00:01:17,263
But we've already seen another class
29

29

00:01:17,263  -->  00:01:19,420
that implements the Deque interface
30

30

00:01:19,420  -->  00:01:21,670
and that's the LinkedList class.
31

31

00:01:21,670  -->  00:01:24,430
The LinkedList class in the JDK implements
32

32

00:01:24,430  -->  00:01:27,220
the Deque interface and implementing a stack
33

33

00:01:27,220  -->  00:01:29,840
using a LinkedList is a great choice
34

34

00:01:29,840  -->  00:01:32,950
because we don't have to worry about resizing the stack
35

35

00:01:32,950  -->  00:01:34,500
when we're pushing items.
36

36

00:01:34,500  -->  00:01:37,180
So what this means is if you want a stack
37

37

00:01:37,180  -->  00:01:39,160
in your Java application, you can go ahead
38

38

00:01:39,160  -->  00:01:41,270
and just use the LinkedList class.
39

39

00:01:41,270  -->  00:01:43,420
One potential problem with this is the class
40

40

00:01:43,420  -->  00:01:47,240
allows us to do more than push, pop, and peek items.
41

41

00:01:47,240  -->  00:01:49,480
I mean we looked at the LinkedList class
42

42

00:01:49,480  -->  00:01:52,110
and you can add items, you can remove items,
43

43

00:01:52,110  -->  00:01:53,820
you can get the index of items
44

44

00:01:53,820  -->  00:01:57,020
and you know you can randomly access stuff in the list
45

45

00:01:57,020  -->  00:02:00,880
so you could in your code, in your use
46

46

00:02:00,880  -->  00:02:03,290
of the LinkedList class just limit yourself
47

47

00:02:03,290  -->  00:02:06,070
to calling the push, pop, and peek methods.
48

48

00:02:06,070  -->  00:02:08,040
Let's go to the LinkedList class.
49

49

00:02:08,040  -->  00:02:09,640
I think, let me see.
50

50

00:02:09,640  -->  00:02:12,220
Well actually let's go to the Deque class
51

51

00:02:12,220  -->  00:02:14,210
and from there we can get to the LinkedList class.
52

52

00:02:14,210  -->  00:02:17,820
So I'll go to the Deque class and then we can get
53

53

00:02:17,820  -->  00:02:20,680
to the LinkedList class from here 'cause it implements it.
54

54

00:02:20,680  -->  00:02:25,390
So you'll see that in the methods, because this class
55

55

00:02:25,390  -->  00:02:29,650
implements the Deque and if you look at the Deque briefly,
56

56

00:02:29,650  -->  00:02:33,413
we'll see that it has peek, pop, and push.
57

57

00:02:34,920  -->  00:02:37,460
So because of that, the LinkedList class has
58

58

00:02:37,460  -->  00:02:42,460
pop, peek, and push and if we wanted this LinkedList
59

59

00:02:43,230  -->  00:02:45,160
to behave like a stack, we should really
60

60

00:02:45,160  -->  00:02:47,930
only be calling those three methods.
61

61

00:02:47,930  -->  00:02:51,240
So you have two choices, you could just enforce that
62

62

00:02:51,240  -->  00:02:56,240
yourself in your code or you could create a class
63

63

00:02:56,360  -->  00:02:58,390
that has this LinkedList as a field.
64

64

00:02:58,390  -->  00:03:01,200
So essentially we create a stack class
65

65

00:03:01,200  -->  00:03:04,010
and it would have a field for the LinkedList
66

66

00:03:04,010  -->  00:03:07,460
and so the only methods you would expose from that class
67

67

00:03:07,460  -->  00:03:09,410
would be push, pop, and peek
68

68

00:03:09,410  -->  00:03:11,170
and that's what we're gonna go through here.
69

69

00:03:11,170  -->  00:03:14,690
So instead of using our own implementation of a LinkedList
70

70

00:03:14,690  -->  00:03:18,310
and using that to back a stack, we're going to use
71

71

00:03:18,310  -->  00:03:21,530
the JDK LinkedList class and we're going to write
72

72

00:03:21,530  -->  00:03:25,290
an implementation that uses this class to back a stack.
73

73

00:03:25,290  -->  00:03:26,923
And so let's go over to the IDE.
74

74

00:03:31,420  -->  00:03:34,120
So here we are back in IntelliJ.
75

75

00:03:34,120  -->  00:03:37,270
I created a new project and I put the code into
76

76

00:03:37,270  -->  00:03:40,580
package academy.learnprogramming.linkedstack.
77

77

00:03:40,580  -->  00:03:43,250
I've copied over some code into the main method.
78

78

00:03:43,250  -->  00:03:46,500
I've copied the code for creating the usual employees
79

79

00:03:46,500  -->  00:03:49,190
and I copied over the stack calls we made
80

80

00:03:49,190  -->  00:03:52,670
in the last video just to give me a head start
81

81

00:03:52,670  -->  00:03:55,410
and then as usual I've added the employee class
82

82

00:03:55,410  -->  00:03:58,490
and it's exactly the same as it usually is.
83

83

00:03:58,490  -->  00:04:02,253
So let me add a class now called LinkedStack.
84

84

00:04:07,210  -->  00:04:11,450
And in here all we need is one field.
85

85

00:04:11,450  -->  00:04:14,150
So I'm gonna say private LinkedList
86

86

00:04:14,150  -->  00:04:18,260
and this LinkedList is going to hold employee instances
87

87

00:04:18,260  -->  00:04:20,330
and that's gonna be our stack.
88

88

00:04:20,330  -->  00:04:23,880
And so this is the JDK class, java.util.LinkedList
89

89

00:04:23,880  -->  00:04:25,820
and this is what's gonna back our stack
90

90

00:04:25,820  -->  00:04:29,813
and so in the constructor for LinkedStack,
91

91

00:04:32,830  -->  00:04:34,150
we're gonna create our LinkedList.
92

92

00:04:34,150  -->  00:04:37,540
So we'll say stack equals new LinkedList.
93

93

00:04:38,830  -->  00:04:41,100
And to avoid having to change the language level,
94

94

00:04:41,100  -->  00:04:43,430
I'll just specify that we want employee.
95

95

00:04:43,430  -->  00:04:46,160
Now one thing to remember is this LinkedList
96

96

00:04:46,160  -->  00:04:48,080
is actually a doubly LinkedList
97

97

00:04:48,080  -->  00:04:50,680
and for a stack you don't need a doubly LinkedList
98

98

00:04:50,680  -->  00:04:53,170
because you're always working with the item
99

99

00:04:53,170  -->  00:04:54,630
that's at the front of the list.
100

100

00:04:54,630  -->  00:04:56,750
But normally memory won't be an issue
101

101

00:04:56,750  -->  00:04:59,480
and so you can just go ahead and use this LinkedList class.
102

102

00:04:59,480  -->  00:05:02,870
If memory was an issue, then you would have to
103

103

00:05:02,870  -->  00:05:05,240
write your own singly LinkedList class
104

104

00:05:05,240  -->  00:05:07,290
or use an array instead.
105

105

00:05:07,290  -->  00:05:09,610
You could look at the other classes that implement
106

106

00:05:09,610  -->  00:05:11,910
the Deque interface and see if one of those
107

107

00:05:11,910  -->  00:05:13,670
would be more appropriate.
108

108

00:05:13,670  -->  00:05:16,480
Okay, so let's add our push, pop, and peek methods.
109

109

00:05:16,480  -->  00:05:19,600
So we'll say public void push
110

110

00:05:19,600  -->  00:05:21,253
and we're gonna push an employee.
111

111

00:05:23,350  -->  00:05:26,790
And all we're gonna do here is defer to the LinkedList.
112

112

00:05:26,790  -->  00:05:31,790
So stack.push employee, because we know our LinkedList
113

113

00:05:32,240  -->  00:05:35,010
class, the LinkedList class in the JDK
114

114

00:05:35,010  -->  00:05:37,890
implements the Deque interface, so it has push, pop,
115

115

00:05:37,890  -->  00:05:41,670
and peek methods and so we're just gonna call them.
116

116

00:05:41,670  -->  00:05:46,193
And then we'll say public employee pop,
117

117

00:05:47,490  -->  00:05:50,053
we'll just say return stack.pop.
118

118

00:05:53,450  -->  00:05:58,197
And finally we'll have public employee peek
119

119

00:06:01,470  -->  00:06:05,860
and we'll return stack.peek and that's it.
120

120

00:06:05,860  -->  00:06:07,720
That's our stack implementation.
121

121

00:06:07,720  -->  00:06:10,780
Now we could implement an is empty method,
122

122

00:06:10,780  -->  00:06:13,020
like we had in our other stack.
123

123

00:06:13,020  -->  00:06:14,150
So let's do that.
124

124

00:06:14,150  -->  00:06:19,150
Public boolean is empty and we just return stack.isEmpty.
125

125

00:06:24,050  -->  00:06:24,883
And we're done.
126

126

00:06:24,883  -->  00:06:29,883
Now we went through this exercise because we want users
127

127

00:06:30,270  -->  00:06:33,020
of our stack that's backed by a LinkedList
128

128

00:06:33,020  -->  00:06:35,760
to only be able to call push, pop, and peek.
129

129

00:06:35,760  -->  00:06:38,650
If we used the LinkedList directly as a stack,
130

130

00:06:38,650  -->  00:06:42,100
then somebody might come along, perhaps a new developer
131

131

00:06:42,100  -->  00:06:44,570
on the team or something like that who is not familiar
132

132

00:06:44,570  -->  00:06:47,270
with what we're doing and start calling other methods
133

133

00:06:47,270  -->  00:06:49,750
like add and index of and stuff like that
134

134

00:06:49,750  -->  00:06:51,090
and we don't want that to happen
135

135

00:06:51,090  -->  00:06:55,380
so we want a class that behaves like a stack
136

136

00:06:55,380  -->  00:06:59,180
so you can only work with the last item that was added.
137

137

00:06:59,180  -->  00:07:01,270
You can only call push, pop, and peek
138

138

00:07:01,270  -->  00:07:03,730
and so that's why we went through this exercise.
139

139

00:07:03,730  -->  00:07:05,620
So when we push an item we're adding it
140

140

00:07:05,620  -->  00:07:07,060
to the head of the list.
141

141

00:07:07,060  -->  00:07:09,140
When we pop an item we're removing it from
142

142

00:07:09,140  -->  00:07:11,310
the head of the list and when we peek at the item
143

143

00:07:11,310  -->  00:07:13,760
we're basically just returning the head of the list
144

144

00:07:13,760  -->  00:07:16,070
but we're not removing it from the LinkedList.
145

145

00:07:16,070  -->  00:07:18,980
So last thing I'm gonna do is add a print stack method.
146

146

00:07:18,980  -->  00:07:22,680
So I'll add that in here, so I'll say public void
147

147

00:07:24,420  -->  00:07:29,420
print stack and I'm gonna use a list iterator.
148

148

00:07:34,240  -->  00:07:38,550
So I'll use iterator equals and it wants to know
149

149

00:07:38,550  -->  00:07:41,280
which class, which list iterator I want.
150

150

00:07:41,280  -->  00:07:42,993
Ask me again, oh there we go.
151

151

00:07:44,290  -->  00:07:49,290
So I want java.util and we're gonna call stack.listIterator
152

152

00:07:53,100  -->  00:07:57,667
and then we'll just say while iterator.hasNext
153

153

00:07:59,640  -->  00:08:04,640
system.out.println iterator.next.
154

154

00:08:06,530  -->  00:08:10,120
Now this iterator traverses the list from head to tail
155

155

00:08:10,120  -->  00:08:12,260
and in a LinkedList implementation of a stack
156

156

00:08:12,260  -->  00:08:14,170
the top item is always at the head.
157

157

00:08:14,170  -->  00:08:17,920
So just like when we implemented a stack backed by an array,
158

158

00:08:17,920  -->  00:08:20,620
when we print out the stack the top item will be printed
159

159

00:08:20,620  -->  00:08:25,150
first followed by the item that's below the top, et cetera.
160

160

00:08:25,150  -->  00:08:27,370
So it'll be printing from the top down.
161

161

00:08:27,370  -->  00:08:31,220
So now let's go back to our main method.
162

162

00:08:31,220  -->  00:08:35,910
And I'll first remove the print stack.
163

163

00:08:35,910  -->  00:08:37,260
We haven't created our stack yet.
164

164

00:08:37,260  -->  00:08:42,260
So I'll say LinkedStack stack equals new LinkedStack
165

165

00:08:45,460  -->  00:08:48,360
and let's push all our employees.
166

166

00:08:48,360  -->  00:08:53,360
So we'll say stack.push Jane Jones, stack.push John Doe,
167

167

00:08:57,464  -->  00:09:02,464
stack.push Mary Smith, stack.push Mike Wilson,
168

168

00:09:05,390  -->  00:09:08,787
and stack.push Bill End.
169

169

00:09:12,362  -->  00:09:13,550
And then we'll print our stack.
170

170

00:09:13,550  -->  00:09:14,693
So let's run.
171

171

00:09:21,511  -->  00:09:23,480
And we'll see that Bill is at the top of the stack,
172

172

00:09:23,480  -->  00:09:26,540
followed by Mike, Mary, Jane, and John.
173

173

00:09:26,540  -->  00:09:29,680
So let's peek at the stack and see what we get
174

174

00:09:29,680  -->  00:09:31,580
and then we'll print our stack again
175

175

00:09:31,580  -->  00:09:33,500
to show that we didn't remove anything.
176

176

00:09:33,500  -->  00:09:35,300
I'll comment this print stack out.
177

177

00:09:35,300  -->  00:09:36,323
So let's run.
178

178

00:09:39,890  -->  00:09:42,900
And we'll see Bill twice because this print line here
179

179

00:09:42,900  -->  00:09:45,370
is from peeking at the stack and then when we print
180

180

00:09:45,370  -->  00:09:48,870
the stack out, Bill is still on the stack.
181

181

00:09:48,870  -->  00:09:50,290
He wasn't removed.
182

182

00:09:50,290  -->  00:09:55,290
And then finally we'll pop the item off at the top of
183

183

00:09:56,460  -->  00:09:58,863
the stack and then we'll peek at the top item.
184

184

00:09:59,850  -->  00:10:04,080
So let's run and we'll see that we popped Bill
185

185

00:10:04,080  -->  00:10:07,170
and the next employee or the employee
186

186

00:10:07,170  -->  00:10:10,220
that's on the top of the stack after Bill is popped is Mike.
187

187

00:10:10,220  -->  00:10:13,210
And that's exactly what we saw when we implemented
188

188

00:10:13,210  -->  00:10:15,730
a stack using an array and once again,
189

189

00:10:15,730  -->  00:10:18,620
with a LinkedList implementation the time complexity
190

190

00:10:18,620  -->  00:10:20,860
for push, pop, and peek is oh of one.
191

191

00:10:20,860  -->  00:10:23,380
It's constant time because we're always working
192

192

00:10:23,380  -->  00:10:25,300
with the item at the head of the list
193

193

00:10:25,300  -->  00:10:28,140
and so the steps involved don't depend
194

194

00:10:28,140  -->  00:10:30,250
on the number of items on the list.
195

195

00:10:30,250  -->  00:10:34,130
Now if we try to do something like stack.add
196

196

00:10:34,130  -->  00:10:38,010
with an employee, you'll see that we can't do that
197

197

00:10:38,010  -->  00:10:40,540
because that's not really a stack operation
198

198

00:10:40,540  -->  00:10:44,860
or stack.get a certain employee.
199

199

00:10:44,860  -->  00:10:48,250
So even though the LinkedList class
200

200

00:10:48,250  -->  00:10:51,540
has those methods, if we come in here,
201

201

00:10:51,540  -->  00:10:55,410
and I'll just, in here I'll just stay stack.add.
202

202

00:10:55,410  -->  00:10:57,570
You'll see that there's the add method
203

203

00:10:57,570  -->  00:11:00,150
or stack.get you'll see there's a get method
204

204

00:11:00,150  -->  00:11:03,440
where we can specify position in the list,
205

205

00:11:03,440  -->  00:11:06,720
even though the LinkedList class has those methods,
206

206

00:11:06,720  -->  00:11:08,980
we don't want people to be able to call those methods
207

207

00:11:08,980  -->  00:11:12,400
because then our stack wouldn't be behaving like a stack.
208

208

00:11:12,400  -->  00:11:17,220
And so that's why if we wanted a stack and we wanted
209

209

00:11:17,220  -->  00:11:21,010
all the developers on a team to only use the class
210

210

00:11:21,010  -->  00:11:23,980
as a stack so that they can only push items,
211

211

00:11:23,980  -->  00:11:27,620
pop items, and peek at items, then we just wrap
212

212

00:11:27,620  -->  00:11:30,940
the LinkedList with another class and we only expose
213

213

00:11:30,940  -->  00:11:32,500
push, pop, and peek methods
214

214

00:11:32,500  -->  00:11:34,640
and you know you can expose stuff like is empty,
215

215

00:11:34,640  -->  00:11:37,480
that's not allowing them to do something to the stack
216

216

00:11:37,480  -->  00:11:39,090
that they're not supposed to do.
217

217

00:11:39,090  -->  00:11:40,520
And that's it for stacks.
218

218

00:11:40,520  -->  00:11:44,230
They're not all that complex a data structure,
219

219

00:11:44,230  -->  00:11:48,020
especially once you understand LinkedLists and arrays,
220

220

00:11:48,020  -->  00:11:52,560
because all a stack does is limit the operations
221

221

00:11:52,560  -->  00:11:55,240
you can do on whatever data structure
222

222

00:11:55,240  -->  00:11:57,490
is being used to implement the stack.
223

223

00:11:57,490  -->  00:11:59,040
I'll see you in the next video.
