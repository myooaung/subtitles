WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.490
apart from so many features that spring provides,

00:00:02.490 --> 00:00:07.250
one of the main feature offspring is that it behaves like a factory off beans,

00:00:07.250 --> 00:00:12.310
which means it is going toe manufacture optics off our classes,

00:00:12.310 --> 00:00:18.590
which we call as beans and then maintained them in a container and then provide to us

00:00:18.590 --> 00:00:21.420
whenever we want to understand the same.

00:00:21.420 --> 00:00:23.350
Let's take this example.

00:00:23.350 --> 00:00:27.270
Imagine you want to create a job application,

00:00:27.270 --> 00:00:29.200
so let's call this AB.

00:00:29.200 --> 00:00:29.870
Typically,

00:00:29.870 --> 00:00:31.570
this could be a sacrilege,

00:00:31.570 --> 00:00:34.250
or it could be a service tear plus.

00:00:34.250 --> 00:00:38.250
Or it could be a simple public static boy main program.

00:00:38.250 --> 00:00:44.750
And this has a dependency on Let's consider an interface called Product to You.

00:00:44.750 --> 00:00:49.980
So the product deal interface has got some functions that my application wants to make

00:00:49.980 --> 00:00:50.620
yourself.

00:00:50.620 --> 00:00:53.010
That being an interface at the runtime,

00:00:53.010 --> 00:00:55.470
we need objects off some concrete class.

00:00:55.470 --> 00:00:59.030
Assume that the product deal has to implementations.

00:00:59.030 --> 00:01:02.100
Let's say one of them is for marking bull process.

00:01:02.100 --> 00:01:07.420
Let's call it s a dummy implementation and let's assume that we have one rial

00:01:07.420 --> 00:01:15.810
implementation off GBC sort Downtime AB depends on an object off dummy implementation are

00:01:15.810 --> 00:01:17.250
actually busy implementation,

00:01:17.250 --> 00:01:18.170
and in the future,

00:01:18.170 --> 00:01:21.890
you may have a very implementation which makes himself hibernate,

00:01:21.890 --> 00:01:26.520
or gp typically the way you would probably get an object off any off.

00:01:26.520 --> 00:01:29.840
This implementation is in the Abdur joa.

00:01:29.840 --> 00:01:38.790
You may say product Delwar deal equals toe new dummy product dio our new GBC product you

00:01:38.790 --> 00:01:46.540
and this means that you have a runtime dependency on a dummy or GBC which you're trying to

00:01:46.540 --> 00:01:48.950
achieve by creating a new object in the app.

00:01:48.950 --> 00:01:51.950
And this leads to a concept off date coupling.

00:01:51.950 --> 00:01:57.590
So the problem is that the standoff object requirement may be there in hundreds of places.

00:01:57.590 --> 00:02:03.070
If you're hard coating those new object creations in hundreds of places and if you want to

00:02:03.070 --> 00:02:04.740
switch to a different implementation,

00:02:04.740 --> 00:02:06.890
this becomes a very tedious task.

00:02:06.890 --> 00:02:12.080
And that is the reason we would like to avoid this and instead off we creating an object

00:02:12.080 --> 00:02:14.840
off this dummy Julie busy implementations.

00:02:14.840 --> 00:02:16.850
We want someone else to create the same thing.

00:02:16.850 --> 00:02:23.230
Now gender practices that you create another class or an abstraction called as a factory

00:02:23.230 --> 00:02:27.740
that knows how to manufacture an object off any off these implementations.

00:02:27.740 --> 00:02:28.630
In our case,

00:02:28.630 --> 00:02:31.240
we're gonna use spring framework for the same thing.

00:02:31.240 --> 00:02:32.550
So the spring framework,

00:02:32.550 --> 00:02:33.270
maintenance,

00:02:33.270 --> 00:02:40.260
a container and based on either an example are annotation based configurations.

00:02:40.260 --> 00:02:44.050
Spring is gonna create objects off this dummy or jelly BC.

00:02:44.050 --> 00:02:46.080
I am peels and then maintains them.

00:02:46.080 --> 00:02:52.050
So application now depends on the spring rather than the actual implementations off this.

00:02:52.050 --> 00:02:57.340
So this is the concept off spring as a factory off beat way.

00:02:57.340 --> 00:03:03.390
We configure spring such that it has access toe objects off dummy implementation.

00:03:03.390 --> 00:03:07.490
JB's implementation are if maybe tomorrow some other implementation.

00:03:07.490 --> 00:03:10.010
All we're gonna do is at the runtime.

00:03:10.010 --> 00:03:15.310
Our APP is going to talk to spring and get an object off an appropriate implementation

00:03:15.310 --> 00:03:16.100
that's comfortable.

00:03:16.100 --> 00:03:17.460
In the next video,

00:03:17.460 --> 00:03:21.110
we will see using a Java program how to achieve the same thing.

