WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.330
No.

00:00:00.330 --> 00:00:03.420
Let's write 100 for slash CBS slash products.

00:00:03.420 --> 00:00:05.150
But for post method.

00:00:05.150 --> 00:00:06.400
For this,

00:00:06.400 --> 00:00:08.850
let's write a function called public.

00:00:08.850 --> 00:00:12.380
Let the return to be response in TV off.

00:00:12.380 --> 00:00:15.860
Let's a question mark on successful adding of the product.

00:00:15.860 --> 00:00:17.380
So let's return the product.

00:00:17.380 --> 00:00:19.320
Object with the product i d.

00:00:19.320 --> 00:00:20.730
But as in case of a letter,

00:00:20.730 --> 00:00:25.050
let's we're gonna map and let's call the function name as our product.

00:00:25.050 --> 00:00:28.730
It's also taken argument off type product.

00:00:28.730 --> 00:00:29.960
It's called SPR,

00:00:29.960 --> 00:00:36.210
and then we have to say H d D or dot our product off PR dysfunction throws a dollar

00:00:36.210 --> 00:00:36.750
exception.

00:00:36.750 --> 00:00:38.170
But unlike the previous ones,

00:00:38.170 --> 00:00:42.200
let's around this with a try catch in case if this is successful,

00:00:42.200 --> 00:00:44.710
beyond is a product with their primary Keenum.

00:00:44.710 --> 00:00:51.080
And let's return the same thing as a response entity by typing return response pentiti dot

00:00:51.080 --> 00:00:54.820
OK and then supply the PR as the body for that,

00:00:54.820 --> 00:00:56.190
in case often exception.

00:00:56.190 --> 00:00:57.750
Let's get off this one.

00:00:57.750 --> 00:01:00.840
And then let's create a map just like the previous one.

00:01:00.840 --> 00:01:02.860
I copy this and paste over here,

00:01:02.860 --> 00:01:07.290
and then I take your m dot Put a message key,

00:01:07.290 --> 00:01:08.100
which is nothing,

00:01:08.100 --> 00:01:10.350
but he don't get message.

00:01:10.350 --> 00:01:11.900
If you want,

00:01:11.900 --> 00:01:13.750
you can add additional stuff like,

00:01:13.750 --> 00:01:14.270
for example,

00:01:14.270 --> 00:01:19.950
what is the product that you're trying toe such as M dot put And then let's type your

00:01:19.950 --> 00:01:20.620
product.

00:01:20.620 --> 00:01:26.710
Or you can say the input data and then PR itself so users can refer whether the values have

00:01:26.710 --> 00:01:27.820
come properly or not.

00:01:27.820 --> 00:01:30.310
And now let's give here this written statement,

00:01:30.310 --> 00:01:34.980
but with a different extremist traitors that's copy paste over here and then changes toe

00:01:34.980 --> 00:01:37.240
don't internal server error.

00:01:37.240 --> 00:01:39.440
Let's also do a mapping.

00:01:39.440 --> 00:01:41.980
This is gonna be a did request mapping.

00:01:41.980 --> 00:01:47.340
We don't have to give any part because the part is same as slash AP a Snatch products,

00:01:47.340 --> 00:01:53.750
but we will specify your method equals toe request method dot post.

00:01:53.750 --> 00:01:59.370
One small problem is when you ask for a dependency off product,

00:01:59.370 --> 00:02:05.860
spring attempts toe canoers all the request perimeter names in tow product properties and

00:02:05.860 --> 00:02:07.680
then tries to create a product object.

00:02:07.680 --> 00:02:12.150
We're seeing this in the spring NBC demo when we were trained to other product using an

00:02:12.150 --> 00:02:13.250
HTML form.

00:02:13.250 --> 00:02:17.030
But this time we're sending example orgies and later as a request body,

00:02:17.030 --> 00:02:21.230
and we have to tell the data is not in the form of a name value peace.

00:02:21.230 --> 00:02:22.980
But whatever the data is there in the request,

00:02:22.980 --> 00:02:26.010
body has to be converted into a product object.

00:02:26.010 --> 00:02:27.590
Assuming that it is AEG similar.

00:02:27.590 --> 00:02:28.180
Jason,

00:02:28.180 --> 00:02:32.590
we simply have to add an addition here called Doctorate Request Body.

00:02:32.590 --> 00:02:37.320
And then spring will convert automatically the entire request body into a product using

00:02:37.320 --> 00:02:39.150
either Jack's Be Odd Jackson.

00:02:39.150 --> 00:02:42.350
Depending on the type of content that we're sending,

00:02:42.350 --> 00:02:46.950
this is whether it's CTP request header called Content.

00:02:46.950 --> 00:02:48.080
It comes into picture.

00:02:48.080 --> 00:02:51.620
So if the user has some kind of request body,

00:02:51.620 --> 00:02:57.580
but the content of type Head Oh indicates that it is an application slash Jason Spring will

00:02:57.580 --> 00:03:00.500
make use off Jackson instead of Jack's Be.

00:03:00.500 --> 00:03:03.710
But if the content type happens to be applications lashed,

00:03:03.710 --> 00:03:04.270
examine,

00:03:04.270 --> 00:03:09.570
then spring uses Jack's be to convert the request body into a product object.

00:03:09.570 --> 00:03:10.840
Now that we have got this,

00:03:10.840 --> 00:03:11.870
let's give it a try.

00:03:11.870 --> 00:03:14.540
Let's also do a re starting off server.

00:03:14.540 --> 00:03:18.580
The server is now ready.

00:03:18.580 --> 00:03:19.930
Let's go back to postmen,

00:03:19.930 --> 00:03:20.960
Andi.

00:03:20.960 --> 00:03:23.150
Before sending a product,

00:03:23.150 --> 00:03:25.300
let's first make a request to the product.

00:03:25.300 --> 00:03:27.040
You can see that I won't be made a request.

00:03:27.040 --> 00:03:32.710
Toe products last well get request except Header says application Jason.

00:03:32.710 --> 00:03:33.360
So when I click,

00:03:33.360 --> 00:03:33.980
don't send.

00:03:33.980 --> 00:03:40.070
Have already got a Jason washing off this and I'm gonna copy this entire response Coffee

00:03:40.070 --> 00:03:44.880
this goto a text editor and then paste over there.

00:03:44.880 --> 00:03:49.010
I don't need to send that idea because ideas are automatically going to be generated.

00:03:49.010 --> 00:03:53.700
And let's change the name off the producto SE,

00:03:53.700 --> 00:03:54.520
for example,

00:03:54.520 --> 00:03:56.210
Mozzarella cheese.

00:03:56.210 --> 00:04:02.040
I don't need this supply ready because they will not be used for insertion adaptation in

00:04:02.040 --> 00:04:06.410
the desktop where the only thing that is required is there's the rest of them are not

00:04:06.410 --> 00:04:07.000
required,

00:04:07.000 --> 00:04:07.940
so I'm gonna get it off.

00:04:07.940 --> 00:04:11.250
This likewise category idea is not required.

00:04:11.250 --> 00:04:16.930
Category is the only thing that is acquired inside the category on the rest of them.

00:04:16.930 --> 00:04:18.200
I'm gonna keep it as it is.

00:04:18.200 --> 00:04:21.770
So when I send this as a request body,

00:04:21.770 --> 00:04:24.700
we want to see a new product being added.

00:04:24.700 --> 00:04:28.550
So I'm gonna copy this now and go back to Postman.

00:04:28.550 --> 00:04:32.950
Let's say we want to send the post request,

00:04:32.950 --> 00:04:36.710
but the post request is only four slash abc slash products,

00:04:36.710 --> 00:04:41.990
so there's no idea to be sent on this time along with except Human also have to send a

00:04:41.990 --> 00:04:43.080
content type,

00:04:43.080 --> 00:04:45.260
indicating what kind of data you're sending.

00:04:45.260 --> 00:04:47.730
And since you are sending Jason so we'll say here,

00:04:47.730 --> 00:04:49.360
applications that Jason.

00:04:49.360 --> 00:04:55.940
But this can be automatically added here by going to the body and then say that we're

00:04:55.940 --> 00:05:01.530
sending a type of body which is wrong and then based that over here.

00:05:01.530 --> 00:05:04.990
But you can see when I pasted it just shows it as a regular takes.

00:05:04.990 --> 00:05:08.620
But there is an option here to say What kind of data is this?

00:05:08.620 --> 00:05:10.960
I can say that it is Jason on.

00:05:10.960 --> 00:05:12.590
You can see nowadays color coded.

00:05:12.590 --> 00:05:13.150
Plus,

00:05:13.150 --> 00:05:14.580
if I go back to the headers,

00:05:14.580 --> 00:05:18.940
you'll also see that the content type application Jason has only been added.

00:05:18.940 --> 00:05:21.280
So when I click on the send button over here,

00:05:21.280 --> 00:05:27.600
a new request is sent on is received by spring and Spring knows that this is a function

00:05:27.600 --> 00:05:32.710
which is supposed to be handling that request because of the method equals to request our

00:05:32.710 --> 00:05:34.660
post settings over here.

00:05:34.660 --> 00:05:41.730
And it takes the request body on trains to convert that into a product object using Jackson

00:05:41.730 --> 00:05:47.490
because we said that the content of his applications that Jason and also we are returning a

00:05:47.490 --> 00:05:49.630
product object are a map.

00:05:49.630 --> 00:05:52.600
It tries to convert this product object in tow.

00:05:52.600 --> 00:05:53.760
Jason String,

00:05:53.760 --> 00:05:56.640
because the user is asking for applications.

00:05:56.640 --> 00:05:57.780
Last Jason here.

00:05:57.780 --> 00:05:58.620
So let's click.

00:05:58.620 --> 00:06:00.210
Send and see what happens.

00:06:00.210 --> 00:06:05.080
And you can see that the new record has been added with I D 84.

00:06:05.080 --> 00:06:09.990
Product name Mozzarella cheese supply ready now here because we did not supply the supply

00:06:09.990 --> 00:06:10.490
ready.

00:06:10.490 --> 00:06:15.740
Supplier details against a priority is five because that's what we sent these things we did

00:06:15.740 --> 00:06:16.430
not send.

00:06:16.430 --> 00:06:19.280
So there are no onda category.

00:06:19.280 --> 00:06:22.210
It is four on these two or none here.

00:06:22.210 --> 00:06:27.760
But if I go and get this 84 you'll see that all these details exist.

00:06:27.760 --> 00:06:33.110
So let's go and send the request toe solitary 84 with a get request and see what happens.

00:06:33.110 --> 00:06:37.400
I'm gonna change this to get on our your slash 84.

00:06:37.400 --> 00:06:38.380
That's the new I D.

00:06:38.380 --> 00:06:39.380
When I take consent,

00:06:39.380 --> 00:06:43.520
you'll see that the actual product object comes with all the details.

00:06:43.520 --> 00:06:48.650
So these were all nuts because we returned the same object back.

00:06:48.650 --> 00:06:49.810
Ultimately,

00:06:49.810 --> 00:06:52.340
we could have got a new object by typing.

00:06:52.340 --> 00:06:58.330
PR equals toe x DDO dot Get product and then say he had appeared out.

00:06:58.330 --> 00:06:59.700
Get product really,

00:06:59.700 --> 00:07:01.830
and then send this.

00:07:01.830 --> 00:07:03.680
You will not have that issue.

00:07:03.680 --> 00:07:06.580
So let's save this on and restart,

00:07:06.580 --> 00:07:10.950
dunk it and then come back to our postman.

00:07:10.950 --> 00:07:17.600
Let's select the Post Request and make the same request again with content of application.

00:07:17.600 --> 00:07:19.260
Jason Body is the same.

00:07:19.260 --> 00:07:20.950
Let's send the same data again.

00:07:20.950 --> 00:07:23.780
Click on send on this time.

00:07:23.780 --> 00:07:28.820
You should see it should give the complete product details after adding and this time

00:07:28.820 --> 00:07:32.760
against it is 85 the product supplier as a last category.

00:07:32.760 --> 00:07:37.900
Details also are coming because this time we pulled it off from the baby after successfully

00:07:37.900 --> 00:07:38.690
adding the same.

