WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.850
So I'm gonna cleared an interface called Qala Deal on and two implementations off the same

00:00:05.850 --> 00:00:09.320
called dummy product Diego as a less GBC product.

00:00:09.320 --> 00:00:09.880
Diego,

00:00:09.880 --> 00:00:11.450
For this demonstration,

00:00:11.450 --> 00:00:15.380
we're gonna use an addition based configuration for sprinkled dinner.

00:00:15.380 --> 00:00:17.730
And then we're gonna write a public static,

00:00:17.730 --> 00:00:20.650
wide main program to test out everything.

00:00:20.650 --> 00:00:26.100
Let's go to a clips where I have a few options here that has created Maven Project.

00:00:26.100 --> 00:00:26.870
If you don't see that,

00:00:26.870 --> 00:00:27.630
no problem.

00:00:27.630 --> 00:00:31.010
You can always go toe file new May 1 project.

00:00:31.010 --> 00:00:33.130
If you still don't see here,

00:00:33.130 --> 00:00:39.370
that's probably because the perspective currently I am in Java e perspective here.

00:00:39.370 --> 00:00:42.200
If you are not seeing the Java e perspective,

00:00:42.200 --> 00:00:46.450
you can always click this button and notice that java is the default.

00:00:46.450 --> 00:00:48.670
And if you don't see Java ee,

00:00:48.670 --> 00:00:51.360
then you have around washing off eclipse.

00:00:51.360 --> 00:00:56.750
Go ahead and download the Java E eclipse and then come back again.

00:00:56.750 --> 00:01:02.360
Let me create a new Maimon project and the reason we're going for May 1 is it is a

00:01:02.360 --> 00:01:06.100
fantastic tool for managing on your job.

00:01:06.100 --> 00:01:10.170
A library dependencies on the very first thing that we want to do is to create a simple

00:01:10.170 --> 00:01:12.370
project by skipping architect selection.

00:01:12.370 --> 00:01:13.870
Click on the next button.

00:01:13.870 --> 00:01:19.380
May 1 has a repository off lots off projects where you can make your project part of that

00:01:19.380 --> 00:01:22.980
repository and to organise projects properly.

00:01:22.980 --> 00:01:25.260
May 1 expects you to give Group I D,

00:01:25.260 --> 00:01:27.940
which typically represents your organization.

00:01:27.940 --> 00:01:29.350
An artifact,

00:01:29.350 --> 00:01:29.610
really,

00:01:29.610 --> 00:01:32.400
which represents the kind of project that you're working on.

00:01:32.400 --> 00:01:33.350
For example,

00:01:33.350 --> 00:01:35.760
if you're part of Apaches after foundation,

00:01:35.760 --> 00:01:36.940
your group I d.

00:01:36.940 --> 00:01:39.090
Will be are not Apache.

00:01:39.090 --> 00:01:40.710
If you are from Microsoft,

00:01:40.710 --> 00:01:42.490
you may have calmed down Microsoft.

00:01:42.490 --> 00:01:43.970
Since my website is,

00:01:43.970 --> 00:01:47.210
we know dot called a typical group idea would be called out.

00:01:47.210 --> 00:01:52.080
We not an artifact idea would be name off the project that you would be working with.

00:01:52.080 --> 00:01:53.260
Currently,

00:01:53.260 --> 00:01:56.580
I'm creating a project for learning the basics.

00:01:56.580 --> 00:02:03.440
Offspring somewhere called ask spring hyphen basics and the packaging can be a jar war are

00:02:03.440 --> 00:02:04.660
bomb for No,

00:02:04.660 --> 00:02:06.580
we're not working with Web applications,

00:02:06.580 --> 00:02:09.150
so we're gonna simply at a job project.

00:02:09.150 --> 00:02:09.920
Later,

00:02:09.920 --> 00:02:12.510
we will also be using a war project,

00:02:12.510 --> 00:02:16.310
which is why barca you can give additional name and description.

00:02:16.310 --> 00:02:16.920
For example,

00:02:16.920 --> 00:02:19.560
this is gonna be a spring basics.

00:02:19.560 --> 00:02:23.120
There's no other next option.

00:02:23.120 --> 00:02:26.270
You can click on finish on the project gets created.

00:02:26.270 --> 00:02:30.460
The product also has 15 year called palm dot XML,

00:02:30.460 --> 00:02:33.830
which is Project Object Model XML.

00:02:33.830 --> 00:02:35.750
Let's open the same,

00:02:35.750 --> 00:02:38.930
and that brings up a XML file,

00:02:38.930 --> 00:02:42.700
but you can see a joy washing off the same here at the bottom.

00:02:42.700 --> 00:02:45.370
There's a tab here for overview dependencies,

00:02:45.370 --> 00:02:45.950
dependency,

00:02:45.950 --> 00:02:46.560
hierarchy,

00:02:46.560 --> 00:02:47.150
etcetera.

00:02:47.150 --> 00:02:49.330
At this time since our palm,

00:02:49.330 --> 00:02:51.250
the maximal is pretty much empty.

00:02:51.250 --> 00:02:53.020
There's nothing over here.

00:02:53.020 --> 00:02:56.500
One other thing that you can observe here is for the project.

00:02:56.500 --> 00:02:58.940
When we created using new Maimon,

00:02:58.940 --> 00:03:02.690
Project Eclipse has a plug in called M toe E Plug in,

00:03:02.690 --> 00:03:05.250
which creates this entire project.

00:03:05.250 --> 00:03:09.230
But somehow it uses a job abortion one not fire.

00:03:09.230 --> 00:03:11.520
If you go to Project Properties Shower bill,

00:03:11.520 --> 00:03:12.860
but under libraries,

00:03:12.860 --> 00:03:19.190
you will see that Jerry System let Greed has taken a does Gato SC 1.51 thing we can do is

00:03:19.190 --> 00:03:20.990
we can just double click this toe,

00:03:20.990 --> 00:03:24.610
choose a different version off Java like this.

00:03:24.610 --> 00:03:32.660
But I'll be doing that primarily because each time you do a May 1 update by right click on

00:03:32.660 --> 00:03:33.750
your project,

00:03:33.750 --> 00:03:37.090
and then there is an option called May 1 update project,

00:03:37.090 --> 00:03:39.140
it will be reset toe one Doubtfire.

00:03:39.140 --> 00:03:41.700
Soto permanently make this as wonder.

00:03:41.700 --> 00:03:42.240
Fine.

00:03:42.240 --> 00:03:44.250
We will be specifying here,

00:03:44.250 --> 00:03:48.870
plugging So we have an option called Build Under.

00:03:48.870 --> 00:03:54.140
Will you have something called plug ins and one of the plug in that we will be adding,

00:03:54.140 --> 00:03:55.860
is the compiler plug in,

00:03:55.860 --> 00:03:59.430
which specified that the job abortion is one that ate,

00:03:59.430 --> 00:04:01.760
so we'll have to add a plug in and play.

00:04:01.760 --> 00:04:10.750
Gin has something called our defect Ivy on This is May 1 compiler plug in and the

00:04:10.750 --> 00:04:16.600
configuration for the same is where we say that the source code abortion is supposed to be

00:04:16.600 --> 00:04:20.350
1.8 and then target.

00:04:20.350 --> 00:04:23.030
Washington is also wondered Eat.

00:04:23.030 --> 00:04:24.300
And now that I've done this,

00:04:24.300 --> 00:04:25.600
let me save this file.

00:04:25.600 --> 00:04:30.420
And at this time you consider a couple of errors own here there's one is it is Java around

00:04:30.420 --> 00:04:30.600
them.

00:04:30.600 --> 00:04:32.600
Environment compiler complaints Problem.

00:04:32.600 --> 00:04:34.550
Let's update a project.

00:04:34.550 --> 00:04:36.150
So right click on this project.

00:04:36.150 --> 00:04:39.450
Do a May 1 update project.

00:04:39.450 --> 00:04:43.580
I click on OK and you can see that the owners are gone.

00:04:43.580 --> 00:04:44.180
Plus,

00:04:44.180 --> 00:04:49.550
I can also go toe project properties and you can see under job ill,

00:04:49.550 --> 00:04:49.870
apart,

00:04:49.870 --> 00:04:51.950
liberalise it has taken Java,

00:04:51.950 --> 00:04:52.300
etc.

00:04:52.300 --> 00:04:54.050
Wondered it automatically.

00:04:54.050 --> 00:04:56.900
So this is a one time set up for the project,

00:04:56.900 --> 00:04:58.640
so let's keep this hazardous.

00:04:58.640 --> 00:05:02.140
And now let's add a couple off like release,

00:05:02.140 --> 00:05:04.710
which are required for working with spring.

00:05:04.710 --> 00:05:05.950
So far this.

00:05:05.950 --> 00:05:11.180
Open a new chrome tab and then go to have upset called envy and deposited dot com,

00:05:11.180 --> 00:05:12.920
which is also called May 1 Central,

00:05:12.920 --> 00:05:16.780
where all the libraries required for your job or projects would be available,

00:05:16.780 --> 00:05:20.150
and we will heavily depend on this particular repository toe.

00:05:20.150 --> 00:05:23.450
Get the require libraries on the library's required.

00:05:23.450 --> 00:05:25.120
You simply search by keyword.

00:05:25.120 --> 00:05:25.690
For example,

00:05:25.690 --> 00:05:26.980
if a type your string,

00:05:26.980 --> 00:05:29.010
I should be able to get lots off.

00:05:29.010 --> 00:05:30.730
Light really is related to the spring.

00:05:30.730 --> 00:05:31.690
Typically,

00:05:31.690 --> 00:05:34.160
one library will have dependency on another one,

00:05:34.160 --> 00:05:38.300
and that probably may have dependency on another 1 May one can result all those

00:05:38.300 --> 00:05:41.660
dependencies and don't load all the mystery jar files.

00:05:41.660 --> 00:05:42.680
For example,

00:05:42.680 --> 00:05:45.130
if I select this spring context,

00:05:45.130 --> 00:05:47.110
Andi choose an appropriate washing.

00:05:47.110 --> 00:05:49.260
Let's select the latest release,

00:05:49.260 --> 00:05:51.690
which is released in December,

00:05:51.690 --> 00:05:53.530
Toto the 19 a month back.

00:05:53.530 --> 00:05:58.150
So I'm gonna select this and you can see there is an example for me one.

00:05:58.150 --> 00:05:58.980
There's griddle,

00:05:58.980 --> 00:06:02.140
SBT and couple of other dependency management tools.

00:06:02.140 --> 00:06:05.640
I'm gonna click on this and that automatically copies to your people.

00:06:05.640 --> 00:06:08.010
No need to select in press control,

00:06:08.010 --> 00:06:08.260
See,

00:06:08.260 --> 00:06:10.700
But it gets out of medically copied.

00:06:10.700 --> 00:06:17.170
So I come back toe my may 1 ponder XML on After the build,

00:06:17.170 --> 00:06:25.350
I'm adhere a section called dependencies And then I just based it press command shift F on

00:06:25.350 --> 00:06:31.070
Mac control shift F on windows and leaners and that gets formatted.

00:06:31.070 --> 00:06:33.050
So once again,

00:06:33.050 --> 00:06:39.250
if you see that the dependency here represents a group i d r dot spring favor.

00:06:39.250 --> 00:06:46.660
So somewhere there'll be a folder called R slash spring formal slash spring context slash

00:06:46.660 --> 00:06:51.660
fighter Tudor toe dot Release on inside that there'll be a charge five.

00:06:51.660 --> 00:06:54.650
Not that I'm not saved the file yet,

00:06:54.650 --> 00:06:56.360
but as soon as I say the file,

00:06:56.360 --> 00:07:02.320
you will start seeing some download activity at the right bottom off your eclipse.

00:07:02.320 --> 00:07:03.160
In my case,

00:07:03.160 --> 00:07:05.430
I've used this washn offspring uglier,

00:07:05.430 --> 00:07:07.860
so it is only available locally.

00:07:07.860 --> 00:07:08.400
Andi,

00:07:08.400 --> 00:07:12.250
you'll see that there'll be a new entry here called maven dependencies.

00:07:12.250 --> 00:07:14.560
And that might come quickly,

00:07:14.560 --> 00:07:15.100
in my case,

00:07:15.100 --> 00:07:17.020
because I have used this earlier,

00:07:17.020 --> 00:07:18.450
so as another save it,

00:07:18.450 --> 00:07:23.210
you can see in a few seconds you should see maybe dependence is.

00:07:23.210 --> 00:07:24.630
And when you expand that,

00:07:24.630 --> 00:07:26.140
you'll see a couple of just.

00:07:26.140 --> 00:07:28.980
This is the one that we have specific here.

00:07:28.980 --> 00:07:33.930
But if you look at the dependency hierarchy tab under palmed on examine,

00:07:33.930 --> 00:07:39.490
you'll see that the spring context is what we mentioned but that has a dependency on spring

00:07:39.490 --> 00:07:40.890
able P spring beans,

00:07:40.890 --> 00:07:42.700
spring core spring expression.

00:07:42.700 --> 00:07:49.060
Spring elope has a dependency on Spring Bean Sprink or on Sprinkle has a dependency on

00:07:49.060 --> 00:07:49.580
spring J.

00:07:49.580 --> 00:07:49.770
C.

00:07:49.770 --> 00:07:50.100
L.

00:07:50.100 --> 00:07:51.480
And because of that,

00:07:51.480 --> 00:07:53.930
you see all the charge over here.

00:07:53.930 --> 00:07:56.180
Now that we got the spring like movies,

00:07:56.180 --> 00:07:58.910
let's bring our actual application,

00:07:58.910 --> 00:08:01.150
which is this we want to create a product.

00:08:01.150 --> 00:08:03.950
There were interface with a couple of implementations.

00:08:03.950 --> 00:08:04.800
Far no,

00:08:04.800 --> 00:08:07.410
both the dummy implementation as well as the jail.

00:08:07.410 --> 00:08:08.450
It is implementation.

00:08:08.450 --> 00:08:10.400
Let's return some hard core values,

00:08:10.400 --> 00:08:12.600
and later in the subsequent videos,

00:08:12.600 --> 00:08:16.320
we will get the actual data from the database tables.

00:08:16.320 --> 00:08:17.980
So let's go to our cord.

00:08:17.980 --> 00:08:19.660
Let's close this form dot XML.

00:08:19.660 --> 00:08:20.930
That's ready.

00:08:20.930 --> 00:08:22.770
Con SRC main job.

00:08:22.770 --> 00:08:24.670
This is where all your job or Friends School.

00:08:24.670 --> 00:08:31.690
And this is where you may want to put your XML or property spoils etcetera over here and

00:08:31.690 --> 00:08:36.730
these are related toe test in proliferating some J unit test cases that's gonna go in here

00:08:36.730 --> 00:08:41.250
on the resources corresponding to your desk would goto dislocation.

00:08:41.250 --> 00:08:42.610
In any case,

00:08:42.610 --> 00:08:48.810
I'm gonna right click on this SRC main shower new interface and has a good practice.

00:08:48.810 --> 00:08:50.710
Let's give the proper package names,

00:08:50.710 --> 00:08:52.380
even if its length here,

00:08:52.380 --> 00:08:53.480
let's give it us called.

00:08:53.480 --> 00:09:00.420
Are we not dot de Able Because this interface is a product deal which is supposed to deal

00:09:00.420 --> 00:09:05.440
with the database objects on the name off the Inter Festus product.

00:09:05.440 --> 00:09:07.220
DeVeau press enter.

00:09:07.220 --> 00:09:10.220
Let me increase the form size of bread Further.

00:09:10.220 --> 00:09:11.350
Typically,

00:09:11.350 --> 00:09:16.880
this must have something like crowd operations on bond Quiet.

00:09:16.880 --> 00:09:18.460
But for the time being,

00:09:18.460 --> 00:09:24.890
let that only a single quite a function which is supposed to written long count off all the

00:09:24.890 --> 00:09:25.990
products that we have,

00:09:25.990 --> 00:09:32.700
and in general as a good practice every day will function must throw a d a war exception

00:09:32.700 --> 00:09:35.960
which is supposed to be a use a different class for the time being.

00:09:35.960 --> 00:09:40.520
Let simply put a semicolon here saying that whenever you call this function,

00:09:40.520 --> 00:09:42.040
you're gonna get a long,

00:09:42.040 --> 00:09:46.010
which is the count off products that you have in your database tables.

00:09:46.010 --> 00:09:48.560
It's going cleared to implementations.

00:09:48.560 --> 00:09:51.270
For this one is a class.

00:09:51.270 --> 00:09:54.770
Let's call this as dummy product dio.

00:09:54.770 --> 00:09:57.690
If you observe the name,

00:09:57.690 --> 00:09:59.950
there are two parts to that Number one says.

00:09:59.950 --> 00:10:03.140
How does this implement on the number two is?

00:10:03.140 --> 00:10:04.510
What does it implement?

00:10:04.510 --> 00:10:04.980
In this case?

00:10:04.980 --> 00:10:08.470
It's a dummy implementation off interface called Product Hero.

00:10:08.470 --> 00:10:14.750
So let's add the interface product the over here and click on finish.

00:10:14.750 --> 00:10:18.220
We get this basic functionality.

00:10:18.220 --> 00:10:19.820
Lets get out this to do.

00:10:19.820 --> 00:10:26.400
You can press Commander D on Mac control the on windows to delete the line is being a dummy

00:10:26.400 --> 00:10:26.400
,

00:10:26.400 --> 00:10:26.890
probably.

00:10:26.890 --> 00:10:27.130
Well,

00:10:27.130 --> 00:10:27.790
let's it down.

00:10:27.790 --> 00:10:29.460
Zero as its value.

00:10:29.460 --> 00:10:30.650
Let's say this.

00:10:30.650 --> 00:10:32.980
I want to create one more class.

00:10:32.980 --> 00:10:35.010
But instead of creating a new class,

00:10:35.010 --> 00:10:36.220
I can click on this.

00:10:36.220 --> 00:10:38.680
Copy this by pressing command C and paste.

00:10:38.680 --> 00:10:39.370
It is in command.

00:10:39.370 --> 00:10:42.170
We control C control for Windows.

00:10:42.170 --> 00:10:43.630
This will bring a dialogue,

00:10:43.630 --> 00:10:46.170
boxing that the name conflicts everyone Armenian,

00:10:46.170 --> 00:10:51.270
and this time I want to create a new file called Jerry Busy Product Dio.

00:10:51.270 --> 00:10:56.590
I take on okay and you can see that we got another class double click that open.

00:10:56.590 --> 00:10:58.050
And for the time being,

00:10:58.050 --> 00:11:03.120
let's return a value off 100 hard coded value because we don't want to really work with the

00:11:03.120 --> 00:11:03.600
database.

00:11:03.600 --> 00:11:04.610
At this point in time,

00:11:04.610 --> 00:11:10.150
we just want to make sure that we have a product the able and we have to implementations.

00:11:10.150 --> 00:11:13.330
And spring can give me an object off either one off them.

00:11:13.330 --> 00:11:15.420
Depending on the configuration that we have.

00:11:15.420 --> 00:11:19.380
Let's go back and create a configuration fight for that,

00:11:19.380 --> 00:11:21.190
a moderate like on this package.

00:11:21.190 --> 00:11:23.620
And it's a new class.

00:11:23.620 --> 00:11:25.490
Since this is about configuration,

00:11:25.490 --> 00:11:30.350
let's change the package toe C f G or conflict or whatever you feel like.

00:11:30.350 --> 00:11:33.950
And then let's call this US conflict.

00:11:33.950 --> 00:11:35.980
In the course of this training,

00:11:35.980 --> 00:11:38.750
we're gonna write different configuration fights,

00:11:38.750 --> 00:11:41.390
so let's name them as at Conflict.

00:11:41.390 --> 00:11:43.490
123 Exeter.

00:11:43.490 --> 00:11:43.980
Let's click.

00:11:43.980 --> 00:11:47.320
Finish Eclipse automatically creates a new package for me,

00:11:47.320 --> 00:11:49.010
and inside that we have this class.

00:11:49.010 --> 00:11:53.790
The very first thing that you want to give here is on an addition card after it

00:11:53.790 --> 00:11:54.690
configuration,

00:11:54.690 --> 00:12:00.980
and you can import that by pressing controlled space are you convinced command shift or on

00:12:00.980 --> 00:12:01.910
Mac control?

00:12:01.910 --> 00:12:07.070
Shift on Windows and that actually organizes our packages.

00:12:07.070 --> 00:12:08.400
At this point in time,

00:12:08.400 --> 00:12:12.050
This an addition at configuration doesn't add any value.

00:12:12.050 --> 00:12:13.560
So even if you don't have this,

00:12:13.560 --> 00:12:15.150
your application would still work.

00:12:15.150 --> 00:12:19.880
But as we go forward when we start working with aspect oriented programming or transaction

00:12:19.880 --> 00:12:22.760
management or security without at configuration,

00:12:22.760 --> 00:12:24.520
your application may not work.

00:12:24.520 --> 00:12:27.700
So since this being a class and inside a clause,

00:12:27.700 --> 00:12:30.550
you typically declare variables and functions.

00:12:30.550 --> 00:12:36.780
The con figuration plus expects you toe right functions that you don't being objects.

00:12:36.780 --> 00:12:37.580
For example,

00:12:37.580 --> 00:12:42.590
I can read a function year called Public Dummy Product Deal.

00:12:42.590 --> 00:12:44.440
This the return type.

00:12:44.440 --> 00:12:49.190
Let's call it US dummy deal where it returns.

00:12:49.190 --> 00:12:55.180
A new dummy product deal will object like this in order.

00:12:55.180 --> 00:12:56.590
First thing to make sense,

00:12:56.590 --> 00:13:01.560
you have tow Annotate this with at the Bean once again to import.

00:13:01.560 --> 00:13:05.350
I'm gonna press command shift or or control shift on windows,

00:13:05.350 --> 00:13:12.180
and I also write another function that returns a J BBC broader Dio.

00:13:12.180 --> 00:13:22.690
Let's call it us Julie BC de Evel On return New Jersey received product deal like this.

00:13:22.690 --> 00:13:24.430
So if you do not admit it.

00:13:24.430 --> 00:13:29.080
This function with that bean spring doesn't care what this function at all.

00:13:29.080 --> 00:13:32.630
But if you add that to be,

00:13:32.630 --> 00:13:35.750
spring gives a different treatment to dysfunction.

00:13:35.750 --> 00:13:38.260
We'll see that in a few minutes time.

00:13:38.260 --> 00:13:40.320
But now our configuration is ready.

00:13:40.320 --> 00:13:47.480
So we supply this class information toe spring spring automatically cause all the functions

00:13:47.480 --> 00:13:49.690
that are energy leaders had to be on.

00:13:49.690 --> 00:13:54.650
This is where a concept off emotion off control also comes into picture where we do not

00:13:54.650 --> 00:13:55.590
call this function,

00:13:55.590 --> 00:13:59.350
but spring automatically cause dysfunction when it feels necessary.

00:13:59.350 --> 00:14:03.300
Let's go back to our picture to have a clear understanding of what we have done so far.

00:14:03.300 --> 00:14:05.550
So we have this product Delwar interface.

00:14:05.550 --> 00:14:07.310
We have this dummy implementation.

00:14:07.310 --> 00:14:08.950
We have a JD BC implementation,

00:14:08.950 --> 00:14:11.780
and we have this animation based configuration.

00:14:11.780 --> 00:14:13.640
Now all we have to do is tow.

00:14:13.640 --> 00:14:15.600
Go to the actor Jolla,

00:14:15.600 --> 00:14:21.860
where we want to create spring container making use of this an addition based configuration

00:14:21.860 --> 00:14:21.860
.

00:14:21.860 --> 00:14:23.670
And then we ask spring that Hey,

00:14:23.670 --> 00:14:24.660
I depend on a product.

00:14:24.660 --> 00:14:25.040
Dior.

00:14:25.040 --> 00:14:26.780
Give me an instance of product table.

00:14:26.780 --> 00:14:28.360
So let's go back to eclipse.

00:14:28.360 --> 00:14:30.350
Create a new job class,

00:14:30.350 --> 00:14:31.510
which is a program.

00:14:31.510 --> 00:14:32.180
Let's right,

00:14:32.180 --> 00:14:34.470
Click and then say New Plus.

00:14:34.470 --> 00:14:36.400
Since this is a program,

00:14:36.400 --> 00:14:42.650
let's put the same in a package called Programs and that's called us piece you don't want

00:14:42.650 --> 00:14:45.450
get product count.

00:14:45.450 --> 00:14:50.540
We'll also add a public static y domain and save finish.

00:14:50.540 --> 00:14:53.930
So we do get this particular program.

00:14:53.930 --> 00:14:56.060
Let's minimize this section.

00:14:56.060 --> 00:15:00.700
Let's get off this tool by pressing commanding on Mac Control D on Windows.

00:15:00.700 --> 00:15:05.710
And this is where we want to say that our application depends on proud of deal.

00:15:05.710 --> 00:15:08.770
So that's create available off that type.

00:15:08.770 --> 00:15:11.850
Let's call this as our dependency.

00:15:11.850 --> 00:15:14.780
But in order to provide the dependency,

00:15:14.780 --> 00:15:16.880
we need the spring container.

00:15:16.880 --> 00:15:18.620
So this is what we want.

00:15:18.620 --> 00:15:24.350
A spring container is represented by an interface called as application context.

00:15:24.350 --> 00:15:26.620
So if you press command shift,

00:15:26.620 --> 00:15:30.420
hedge our control shift touch on Windows,

00:15:30.420 --> 00:15:32.960
you get this call open type hierarchy,

00:15:32.960 --> 00:15:36.650
and then you type a whatever the day detect that you're looking for.

00:15:36.650 --> 00:15:39.990
I'm gonna type as a P p L C well,

00:15:39.990 --> 00:15:44.140
and you can see you get Apple and context application context.

00:15:44.140 --> 00:15:45.650
This is what I'm looking for.

00:15:45.650 --> 00:15:52.850
It's an interface on that interface has got few implementations application context is an

00:15:52.850 --> 00:15:53.670
interface.

00:15:53.670 --> 00:15:58.960
There is a sub interface called configurable application context.

00:15:58.960 --> 00:16:03.540
They expand that you will see that there is an abstract loss that another abstract lost

00:16:03.540 --> 00:16:04.800
another abstract loss.

00:16:04.800 --> 00:16:07.120
But if you see somewhere down the line,

00:16:07.120 --> 00:16:08.510
you have two files.

00:16:08.510 --> 00:16:14.480
Here are two classes called Class Part XML Application context and File System XML

00:16:14.480 --> 00:16:15.650
application context.

00:16:15.650 --> 00:16:23.330
So basically what this represents is it represents an application context using an XML

00:16:23.330 --> 00:16:25.300
configuration found in the class spot.

00:16:25.300 --> 00:16:26.460
Likewise,

00:16:26.460 --> 00:16:29.280
this is an application context,

00:16:29.280 --> 00:16:31.050
meaning it's a string container,

00:16:31.050 --> 00:16:34.030
which is based on an XML file,

00:16:34.030 --> 00:16:35.810
which is found in the file system.

00:16:35.810 --> 00:16:37.650
Since we're not using example,

00:16:37.650 --> 00:16:40.080
these two classes are off no use to us.

00:16:40.080 --> 00:16:45.970
Let's expand this one general application context and you'll see that there are few

00:16:45.970 --> 00:16:47.480
implementations here.

00:16:47.480 --> 00:16:51.380
The number one is the annotation conflict application context.

00:16:51.380 --> 00:16:53.160
That is exactly what we want.

00:16:53.160 --> 00:16:55.160
So we want to create an application context.

00:16:55.160 --> 00:16:58.920
Are resting container using annotation configuration.

00:16:58.920 --> 00:17:01.760
If you are more libraries,

00:17:01.760 --> 00:17:02.580
for example,

00:17:02.580 --> 00:17:04.310
spring Web modules,

00:17:04.310 --> 00:17:08.020
then you will get more such spring containers Also,

00:17:08.020 --> 00:17:08.940
in other words,

00:17:08.940 --> 00:17:12.860
an object off any of these classes represents our spring container.

00:17:12.860 --> 00:17:14.440
Since we're gonna use this.

00:17:14.440 --> 00:17:14.990
An addition.

00:17:14.990 --> 00:17:16.600
Conflict application Context.

00:17:16.600 --> 00:17:17.770
Let's go here.

00:17:17.770 --> 00:17:24.180
Define a variable representing the Sprinkle data,

00:17:24.180 --> 00:17:29.380
and that's done by using annotation conflict application context.

00:17:29.380 --> 00:17:35.460
You can see that I'm typing the first letter of each word off the class and the best

00:17:35.460 --> 00:17:36.600
control space.

00:17:36.600 --> 00:17:40.170
You will see that you get an annotation conflict application context.

00:17:40.170 --> 00:17:41.560
Let's call it a city X.

00:17:41.560 --> 00:17:48.540
Now you need toe initialize that and this is where we get an object off spring Dana and

00:17:48.540 --> 00:17:50.370
it's a city X equals two new.

00:17:50.370 --> 00:17:51.070
An addition.

00:17:51.070 --> 00:17:52.670
Conflict application context.

00:17:52.670 --> 00:17:56.260
You can see that there are different tapes off constructors here.

00:17:56.260 --> 00:18:03.100
The one that I'm looking for is this where I can supply one or more classes that are

00:18:03.100 --> 00:18:04.330
configuration classes.

00:18:04.330 --> 00:18:06.420
We created something called Conflict One.

00:18:06.420 --> 00:18:13.470
Here we're going toe supply that here by tapping a C one control space start class.

00:18:13.470 --> 00:18:19.650
So now we have here a spink and dinner that is defined based on a configuration.

00:18:19.650 --> 00:18:23.830
Here it's full screen our editor for a semicolon here.

00:18:23.830 --> 00:18:26.050
Now we have this sprinkled dinner.

00:18:26.050 --> 00:18:32.210
You also see a warming here because creating a new sprink and dinner has some resources

00:18:32.210 --> 00:18:33.150
that are opened.

00:18:33.150 --> 00:18:33.440
Now,

00:18:33.440 --> 00:18:35.550
if you don't close this context.

00:18:35.550 --> 00:18:37.730
There is a probable resource leak.

00:18:37.730 --> 00:18:39.190
So somewhere in the end,

00:18:39.190 --> 00:18:42.350
you make sure that city extort close is called.

00:18:42.350 --> 00:18:43.610
And now the warning is gone.

00:18:43.610 --> 00:18:50.500
Now the stinker dinner is going toe read the beans defined in this up conflict class.

00:18:50.500 --> 00:18:51.900
And in the at conflict class,

00:18:51.900 --> 00:18:53.210
we have defined to beans.

00:18:53.210 --> 00:18:54.670
So that means at this point in time,

00:18:54.670 --> 00:18:58.660
spring is gonna collect the return value from these two functions because spring is gonna

00:18:58.660 --> 00:19:01.660
call these two functions and then keeps that in the memory.

00:19:01.660 --> 00:19:03.100
So at this time,

00:19:03.100 --> 00:19:04.320
if you're under program,

00:19:04.320 --> 00:19:07.350
our application creates a GBM,

00:19:07.350 --> 00:19:11.960
which is the area where we have all our objects.

00:19:11.960 --> 00:19:13.730
And there is this City X,

00:19:13.730 --> 00:19:16.690
which is a reference will even this particular section,

00:19:16.690 --> 00:19:19.760
when we say new annotation conflict application context,

00:19:19.760 --> 00:19:26.050
creates a Sprinkle dinner that the springtime dinner is like any other containers like a

00:19:26.050 --> 00:19:29.720
released our hash map where it maintains objects.

00:19:29.720 --> 00:19:32.680
But this time we supply a configuration.

00:19:32.680 --> 00:19:36.350
Plastic are at conflict one that conflict one is right here.

00:19:36.350 --> 00:19:41.130
So spring in stan shapes up contract one first and using the object,

00:19:41.130 --> 00:19:45.390
it's gonna call every function that is annotated as being so,

00:19:45.390 --> 00:19:50.180
which means it's gonna call this function and collects this written value called dummy

00:19:50.180 --> 00:19:50.520
product.

00:19:50.520 --> 00:19:57.080
Dio you can think of spring container is almost like a hash map where there is a key and

00:19:57.080 --> 00:20:02.160
the key will be the name of the function are being named that you can specify Over here,

00:20:02.160 --> 00:20:04.140
the by default is the function name,

00:20:04.140 --> 00:20:09.740
so the name Day Media will refers to an object off dummy product Dio.

00:20:09.740 --> 00:20:13.050
So what we have here is an object.

00:20:13.050 --> 00:20:19.790
Let me call it as dummy here and another object called GBC.

00:20:19.790 --> 00:20:21.260
Of course,

00:20:21.260 --> 00:20:27.160
it's called Diomedio on GBC deal and then comes back over here,

00:20:27.160 --> 00:20:32.010
and that newly constructed spring container is assigned to City X.

00:20:32.010 --> 00:20:37.470
So City X prefers toe this object at this time So I can say that this is our Sprinkle

00:20:37.470 --> 00:20:37.950
dinner.

00:20:37.950 --> 00:20:40.280
But now that we have this pink and dinner,

00:20:40.280 --> 00:20:42.570
we also have available called Diablo,

00:20:42.570 --> 00:20:44.450
which is again another reference variable.

00:20:44.450 --> 00:20:45.850
That difference variable.

00:20:45.850 --> 00:20:51.100
I can say here deal equals toe city extort get being,

00:20:51.100 --> 00:20:55.290
and then I can supply either the data type like simply say,

00:20:55.290 --> 00:20:56.680
give me a part of a deal.

00:20:56.680 --> 00:20:57.610
But in our case,

00:20:57.610 --> 00:20:59.140
there to product deal objects.

00:20:59.140 --> 00:21:00.260
Spring gets confused,

00:21:00.260 --> 00:21:00.350
too.

00:21:00.350 --> 00:21:04.670
There's an ambiguity so we can supply a name off the beaten,

00:21:04.670 --> 00:21:05.140
dumb,

00:21:05.140 --> 00:21:06.950
ideologically based video.

00:21:06.950 --> 00:21:10.260
But in which case it's going to return a general object,

00:21:10.260 --> 00:21:11.800
you might have to do it casting.

00:21:11.800 --> 00:21:14.280
But in spring three onwards,

00:21:14.280 --> 00:21:18.880
you can supply the name of the being as well as the required data type.

00:21:18.880 --> 00:21:19.960
This is what we want to use,

00:21:19.960 --> 00:21:22.080
so the name is going to be done.

00:21:22.080 --> 00:21:23.200
Me deal.

00:21:23.200 --> 00:21:27.000
And the required type is product deal dark class.

00:21:27.000 --> 00:21:29.700
So the casting not required.

00:21:29.700 --> 00:21:31.360
Now that I have the deal,

00:21:31.360 --> 00:21:34.720
we can check what kind of object it is refering to.

00:21:34.720 --> 00:21:35.980
That's a deer walk,

00:21:35.980 --> 00:21:38.960
is an instance off and then said,

00:21:38.960 --> 00:21:39.210
Dear,

00:21:39.210 --> 00:21:40.580
We don't get close,

00:21:40.580 --> 00:21:41.900
don't get me.

00:21:41.900 --> 00:21:50.860
And then I can also say you're there are the world or count products and that's the whole

00:21:50.860 --> 00:21:51.200
idea.

00:21:51.200 --> 00:21:53.050
We want to get the product count.

00:21:53.050 --> 00:21:57.290
So let's say this and run the application.

00:21:57.290 --> 00:21:59.290
So before running the application,

00:21:59.290 --> 00:22:02.050
let's have a look at what actually we have done.

00:22:02.050 --> 00:22:04.270
So we have created an app.

00:22:04.270 --> 00:22:06.000
This is a work program right now.

00:22:06.000 --> 00:22:08.500
We created a sprink and dinner,

00:22:08.500 --> 00:22:10.730
so application depends on a stinking Dana.

00:22:10.730 --> 00:22:16.050
The stink and dinner has manufactured objects off dummy and jelly.

00:22:16.050 --> 00:22:22.180
BC implementations and those are defined in the annotation based configuration on our

00:22:22.180 --> 00:22:23.950
applications simply depends on the product.

00:22:23.950 --> 00:22:28.570
The war on doesn't depend on either off them at the combine time.

00:22:28.570 --> 00:22:30.000
So if you go back over here,

00:22:30.000 --> 00:22:36.980
you see that we have not used any imports related toe dummy product Dror GBC product hero.

00:22:36.980 --> 00:22:43.570
So this is what actually we have achieved 100% loose coupling our application depend on an

00:22:43.570 --> 00:22:44.590
interface type,

00:22:44.590 --> 00:22:46.340
not on an implementation.

00:22:46.340 --> 00:22:46.790
Of course,

00:22:46.790 --> 00:22:47.370
At the random,

00:22:47.370 --> 00:22:48.740
we need an implementation.

00:22:48.740 --> 00:22:51.350
But that is a result by the springtime dinner.

00:22:51.350 --> 00:22:52.970
So since the spring containers,

00:22:52.970 --> 00:22:56.190
acting as a factory here toe factory,

00:22:56.190 --> 00:23:00.540
we supply something called discriminator over here on this defiance.

00:23:00.540 --> 00:23:02.280
What kind of implementation?

00:23:02.280 --> 00:23:02.750
Currently,

00:23:02.750 --> 00:23:05.050
we're industry ding so far under right now,

00:23:05.050 --> 00:23:10.570
you're gonna say there are zero products and deal with an instance off dummy product deal.

00:23:10.570 --> 00:23:17.130
But if I change this toe jdb see over here and then we're on the same notice that I'm not

00:23:17.130 --> 00:23:17.940
saved the file,

00:23:17.940 --> 00:23:23.250
so it's gonna ask me they want to see there's a check box that is always save resources so

00:23:23.250 --> 00:23:26.110
that we don't run un compiled files.

00:23:26.110 --> 00:23:27.560
So when I say okay,

00:23:27.560 --> 00:23:30.680
we're gonna get a different instance.

00:23:30.680 --> 00:23:32.200
This time it's an instance of jelly.

00:23:32.200 --> 00:23:34.850
BC product dio and there are 100 products.

00:23:34.850 --> 00:23:35.130
Of course,

00:23:35.130 --> 00:23:36.380
this is a hard core value,

00:23:36.380 --> 00:23:41.960
but we're getting in object off a different kind and method from the object.

00:23:41.960 --> 00:23:48.390
One other thing that you can also check out is that at this time when we supplied the at

00:23:48.390 --> 00:23:49.330
Conflict one,

00:23:49.330 --> 00:23:51.350
let's put a constructor over here.

00:23:51.350 --> 00:23:52.950
You can pest control space.

00:23:52.950 --> 00:23:58.420
You'll see that there's a constructor Delete this Piper seen command the or control the And

00:23:58.420 --> 00:24:02.550
then let's put a system that out that Dylan considered one.

00:24:02.550 --> 00:24:03.970
Instead,

00:24:03.970 --> 00:24:04.550
she ate it.

00:24:04.550 --> 00:24:12.080
So we'll see that at this particular very moment you'll see that the at country Quinn gets

00:24:12.080 --> 00:24:12.930
instance created.

00:24:12.930 --> 00:24:14.100
And not only that,

00:24:14.100 --> 00:24:17.020
these functions are also going to be consulate.

00:24:17.020 --> 00:24:17.230
Me.

00:24:17.230 --> 00:24:20.040
Copy this and based over here,

00:24:20.040 --> 00:24:22.460
let's say the media woke called.

00:24:22.460 --> 00:24:27.660
Let's put the assessing that conflict one the media will called on.

00:24:27.660 --> 00:24:34.570
The other one will put here as Jerry BCD awoke called so that we know that with active bean

00:24:34.570 --> 00:24:36.790
this specific function would be called.

00:24:36.790 --> 00:24:38.710
So that's going on the application.

00:24:38.710 --> 00:24:41.300
You will see that there is a sequence that is that conflict.

00:24:41.300 --> 00:24:42.650
One instance hated me.

00:24:42.650 --> 00:24:47.570
Dio called Injury v City of called All those things are called right here.

00:24:47.570 --> 00:24:47.920
Except,

00:24:47.920 --> 00:24:48.440
for example,

00:24:48.440 --> 00:24:51.290
if I put it some kind of a marker over here,

00:24:51.290 --> 00:24:54.300
you'll see that before printing this line,

00:24:54.300 --> 00:24:56.270
you would see those messages.

00:24:56.270 --> 00:24:57.930
So let's run the application again.

00:24:57.930 --> 00:25:00.190
You can see that before the line at contact,

00:25:00.190 --> 00:25:03.740
one is instance hated Diomedio called Jdb City your local,

00:25:03.740 --> 00:25:05.070
and then we're getting this.

00:25:05.070 --> 00:25:06.180
However,

00:25:06.180 --> 00:25:07.730
if I go and remove,

00:25:07.730 --> 00:25:09.730
these are committed this part.

00:25:09.730 --> 00:25:12.840
This function is just an ordinary function,

00:25:12.840 --> 00:25:14.510
and Spring doesn't care about this.

00:25:14.510 --> 00:25:17.180
Spring will never call this function.

00:25:17.180 --> 00:25:18.780
You may have to call the function,

00:25:18.780 --> 00:25:23.840
but a spring is having no problem in calling this function because it has been marked as a

00:25:23.840 --> 00:25:24.390
bean.

00:25:24.390 --> 00:25:25.700
So let's save this.

00:25:25.700 --> 00:25:33.730
Run the program again and see that the dummy product Diablo is never called.

00:25:33.730 --> 00:25:35.320
Let's get off this comment.

00:25:35.320 --> 00:25:36.210
Save this.

00:25:36.210 --> 00:25:39.780
Go back to the picture on this is the first aspect.

00:25:39.780 --> 00:25:40.600
Offspring,

00:25:40.600 --> 00:25:44.230
which is the spring as a factory off beans,

00:25:44.230 --> 00:25:47.710
is what we have seen spring manufacturers on,

00:25:47.710 --> 00:25:52.550
collects all the beans and then keeps it in the container whenever we want.

00:25:52.550 --> 00:25:54.640
We're only going toe ask for the same.

