WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.450
Let's not talk about how spring handles transactions.

00:00:03.450 --> 00:00:06.620
This is a picture from Springs Documentation Page.

00:00:06.620 --> 00:00:08.100
It's very nicely explained hands.

00:00:08.100 --> 00:00:13.700
I'm taking the same as you can see the client in our main function using the deal interface

00:00:13.700 --> 00:00:13.700
.

00:00:13.700 --> 00:00:20.510
We're calling the deal dot some function that say the deal would not update product and

00:00:20.510 --> 00:00:22.470
this is the actual target function,

00:00:22.470 --> 00:00:22.820
which is,

00:00:22.820 --> 00:00:23.150
ah,

00:00:23.150 --> 00:00:24.520
update product function.

00:00:24.520 --> 00:00:28.040
When we configure transaction manager automatically,

00:00:28.040 --> 00:00:29.210
there'll be a proxy.

00:00:29.210 --> 00:00:32.850
So our deal would straight away there for a proxy object,

00:00:32.850 --> 00:00:37.290
even if we have not configured any off our own aspect.

00:00:37.290 --> 00:00:39.300
When we configure transaction manager,

00:00:39.300 --> 00:00:42.050
you will also get something called Transaction are wiser.

00:00:42.050 --> 00:00:45.770
The job off this is toe create a transaction.

00:00:45.770 --> 00:00:48.550
When we're going towards this particular function,

00:00:48.550 --> 00:00:50.960
you can think off that that's it before it weighs,

00:00:50.960 --> 00:00:52.650
which is creating a transaction.

00:00:52.650 --> 00:00:54.430
If you have any custom,

00:00:54.430 --> 00:01:00.210
it will be a voice is they will be executed and then it reaches the target method.

00:01:00.210 --> 00:01:05.270
A target medal is supposed to now save the later into the letter B is in our case.

00:01:05.270 --> 00:01:08.210
We're using the hibernate template obviously internally,

00:01:08.210 --> 00:01:08.850
a session.

00:01:08.850 --> 00:01:11.250
Our update Our sessions are module take place.

00:01:11.250 --> 00:01:12.660
But remember,

00:01:12.660 --> 00:01:15.200
the transaction has already begun over here.

00:01:15.200 --> 00:01:17.410
This is only going to do persist.

00:01:17.410 --> 00:01:18.450
Mars are delete.

00:01:18.450 --> 00:01:19.770
Once that is over,

00:01:19.770 --> 00:01:20.990
If there is no exception,

00:01:20.990 --> 00:01:23.050
it comes back your custom.

00:01:23.050 --> 00:01:24.060
After returning,

00:01:24.060 --> 00:01:25.950
our boys will be executed if any.

00:01:25.950 --> 00:01:27.170
After that,

00:01:27.170 --> 00:01:29.310
it comes back to the transaction adviser,

00:01:29.310 --> 00:01:33.810
which is actually going toe commit the transaction because there was no problem.

00:01:33.810 --> 00:01:36.920
But in case if your target matter to you an exception,

00:01:36.920 --> 00:01:40.660
then it would have been rolled back so either it is committed.

00:01:40.660 --> 00:01:45.850
On returning are it is rolled back when the actual target function throws an exception.

00:01:45.850 --> 00:01:48.330
Whatever the case,

00:01:48.330 --> 00:01:50.810
the control is now given back to the proxy,

00:01:50.810 --> 00:01:53.720
and then the proxy will give the control back to the color.

00:01:53.720 --> 00:01:56.770
In case of the target method returned the value,

00:01:56.770 --> 00:02:00.710
then the collar would have got the return value in case of the target.

00:02:00.710 --> 00:02:02.070
Better through an exception.

00:02:02.070 --> 00:02:05.550
Bad exception causes the transaction to be rolled back,

00:02:05.550 --> 00:02:06.910
but eventually,

00:02:06.910 --> 00:02:08.140
because you threw an exception,

00:02:08.140 --> 00:02:09.650
the exception reaches the color.

00:02:09.650 --> 00:02:14.060
Let's go back to eclipse when we added spring Jerry BC jars.

00:02:14.060 --> 00:02:17.700
We also got the transaction related jobs.

00:02:17.700 --> 00:02:22.190
We can see that the spring T X is already part of all project a few press command shift

00:02:22.190 --> 00:02:25.020
hitch on Mac control shifted on windows.

00:02:25.020 --> 00:02:31.350
You get this open type in hierarchy Andi type something called platform transaction Manager

00:02:31.350 --> 00:02:31.350
,

00:02:31.350 --> 00:02:33.220
which is an interface.

00:02:33.220 --> 00:02:37.970
This is the interface that provides the function such as rollback and commit.

00:02:37.970 --> 00:02:39.300
But this being an interface,

00:02:39.300 --> 00:02:42.550
we want a specific implementation that suits our application.

00:02:42.550 --> 00:02:47.430
So if you see that there is an abstract platform transaction manager which is a base class

00:02:47.430 --> 00:02:50.120
for all other types But if I expand that,

00:02:50.120 --> 00:02:51.960
you'll see a data source.

00:02:51.960 --> 00:02:53.150
Transaction manager,

00:02:53.150 --> 00:02:56.390
This is used if you're using GBC template.

00:02:56.390 --> 00:02:57.640
As you can see,

00:02:57.640 --> 00:02:59.280
it depends on a data source,

00:02:59.280 --> 00:03:04.360
which is nothing with the connection for but as since we're using hybrid template are

00:03:04.360 --> 00:03:05.700
behind the scene hibernate.

00:03:05.700 --> 00:03:10.630
We need to use something called hybrid transaction Manager Dr Different on a session

00:03:10.630 --> 00:03:14.270
factory we have session factory in our app conflict,

00:03:14.270 --> 00:03:16.680
for we can inject the same thing Over here.

00:03:16.680 --> 00:03:18.180
There is also a J p,

00:03:18.180 --> 00:03:22.550
a transaction manager which works with GP and entity managers.

00:03:22.550 --> 00:03:25.780
But this is only for the backward compatibility.

00:03:25.780 --> 00:03:26.200
The J.

00:03:26.200 --> 00:03:26.340
P.

00:03:26.340 --> 00:03:29.550
A template has been duplicated so we don't have to use that anymore.

00:03:29.550 --> 00:03:34.120
There is also a JD a transaction manager in careful using E J B's.

00:03:34.120 --> 00:03:38.340
So the only thing that we have to do is to create an instance are being off hibernate

00:03:38.340 --> 00:03:39.790
transaction manager in our APP.

00:03:39.790 --> 00:03:46.130
Conflict for and in all our deal functions are serous functions we have toe annotate using

00:03:46.130 --> 00:03:47.450
at the red Transactional.

00:03:47.450 --> 00:03:50.350
We'll take a look into the same in the subsequent videos.

