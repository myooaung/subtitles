1
00:00:00,840 --> 00:00:05,500
[Autogenerated] All right, let's go ahead and talk about CloudWatch alarms Now.

2
00:00:05,500 --> 00:00:09,600
CloudWatch alarms are a very critical component that you need

3
00:00:09,600 --> 00:00:12,930
to understand how to implement and use.

4
00:00:12,930 --> 00:00:16,840
They serve many different purposes within an architecture.

5
00:00:16,840 --> 00:00:22,790
So let's go over to alarms, and this brings us to our alarms list.

6
00:00:22,790 --> 00:00:27,240
Now we obviously don't have any because we haven't created one yet.

7
00:00:27,240 --> 00:00:29,000
But let's go ahead and fix that.

8
00:00:29,000 --> 00:00:32,120
Let's create an alarm and you'll see the first step

9
00:00:32,120 --> 00:00:34,430
is we need to specify our metric.

10
00:00:34,430 --> 00:00:39,360
So let's select metric and I'm guessing you'll recognize this screen by now.

11
00:00:39,360 --> 00:00:42,290
Let's go ahead and set up the same metric as before.

12
00:00:42,290 --> 00:00:48,680
So CPU utilization, we'll keep the line as it is.

13
00:00:48,680 --> 00:00:53,540
But I'm going to switch this statistic to maximum.

14
00:00:53,540 --> 00:00:59,440
So I wanna measure for the maximum CPU utilization every five minutes.

15
00:00:59,440 --> 00:01:02,970
So let me select my metric and there we go.

16
00:01:02,970 --> 00:01:06,240
We now see are Grafana on the left.

17
00:01:06,240 --> 00:01:11,530
We see our name, space, our metric name, the instance, the instance name.

18
00:01:11,530 --> 00:01:16,510
If we specify that we see are statistic that we chose and then our period.

19
00:01:16,510 --> 00:01:21,800
So our five minute period Now the next thing that's present is our conditions.

20
00:01:21,800 --> 00:01:25,020
Now conditions are exactly what they sound like.

21
00:01:25,020 --> 00:01:29,840
They're conditions that need to be met in order for us to trigger an alarm.

22
00:01:29,840 --> 00:01:32,380
Now, the two types of thresholds error static.

23
00:01:32,380 --> 00:01:37,150
So we set a static value or we can have anomaly detection.

24
00:01:37,150 --> 00:01:42,180
So it measures using insights, the normal operating levels.

25
00:01:42,180 --> 00:01:45,220
And then when it sees an anomaly or unexpected one,

26
00:01:45,220 --> 00:01:48,240
it goes ahead and breaches that threshold.

27
00:01:48,240 --> 00:01:50,920
And then we move on to our second piece,

28
00:01:50,920 --> 00:01:53,340
which is our metric that we're measuring.

29
00:01:53,340 --> 00:01:58,190
So whenever CPU utilization is and we define our alarm

30
00:01:58,190 --> 00:02:02,740
condition so it could be greater than greater or equal to

31
00:02:02,740 --> 00:02:06,140
lower or equal to or just lower.

32
00:02:06,140 --> 00:02:07,010
So we'll go ahead,

33
00:02:07,010 --> 00:02:11,650
I'm going to select greater equal to I'm going to set our threshold here,

34
00:02:11,650 --> 00:02:13,140
which is next to 50.

35
00:02:13,140 --> 00:02:20,840
So whenever CPU utilization breaches are static value of 50%

36
00:02:20,840 --> 00:02:23,450
it will go ahead and trigger this alarm.

37
00:02:23,450 --> 00:02:27,000
Now let's look at additional configuration and we can.

38
00:02:27,000 --> 00:02:29,290
See, we have data points to alarm.

39
00:02:29,290 --> 00:02:35,140
So what this means is we can customize how sensitive we want these alarms to be.

40
00:02:35,140 --> 00:02:38,540
So, for instance, if I left it at one out of one,

41
00:02:38,540 --> 00:02:42,470
that's extremely sensitive because it's going to always trigger an

42
00:02:42,470 --> 00:02:46,740
alarm any time a data point crosses our threshold.

43
00:02:46,740 --> 00:02:50,460
So let's say we wanted to be a little bit less sensitive.

44
00:02:50,460 --> 00:02:53,650
We can maybe raise this to, let's say four.

45
00:02:53,650 --> 00:02:58,040
And then let's say we want a monitor on every two out of four.

46
00:02:58,040 --> 00:03:00,030
I'm going to leave this as the default.

47
00:03:00,030 --> 00:03:04,070
So we can speed this demo up and then we move to missing data.

48
00:03:04,070 --> 00:03:09,240
So we can treat missing data differently, depending on our use case.

49
00:03:09,240 --> 00:03:11,920
Now the default is to treat it as missing.

50
00:03:11,920 --> 00:03:13,430
So nothing happens.

51
00:03:13,430 --> 00:03:15,840
But you can see you can switch it to good.

52
00:03:15,840 --> 00:03:19,020
So the alarm moves to an okay state we can ignore it,

53
00:03:19,020 --> 00:03:21,320
which maintains the current state or we can.

54
00:03:21,320 --> 00:03:22,410
Treat it as bad.

55
00:03:22,410 --> 00:03:24,240
Move it to in alarm state.

56
00:03:24,240 --> 00:03:27,740
So depending on your use case, those can be useful.

57
00:03:27,740 --> 00:03:29,190
I'll leave it as missing.

58
00:03:29,190 --> 00:03:32,610
Click on next, and that brings us to our notification.

59
00:03:32,610 --> 00:03:34,040
Our actions.

60
00:03:34,040 --> 00:03:37,740
Now this is where alarms become extremely powerful.

61
00:03:37,740 --> 00:03:43,140
We can set up a trigger that can take action on a notification.

62
00:03:43,140 --> 00:03:47,740
Now, we can see the three different types of triggers we have in alarm.

63
00:03:47,740 --> 00:03:50,300
So whenever a threshold is broken, we have.

64
00:03:50,300 --> 00:03:53,770
Okay, so it's like negation of an alarm.

65
00:03:53,770 --> 00:03:55,680
Whenever our statuses okay,

66
00:03:55,680 --> 00:03:59,490
we'll go ahead and trigger or we can trigger on insufficient data.

67
00:03:59,490 --> 00:04:03,540
So when there's not enough data available, we'll go ahead and trigger.

68
00:04:03,540 --> 00:04:07,710
I'll leave this at an alarm now for the okay status.

69
00:04:07,710 --> 00:04:12,110
This could be useful when Let's say you scale out based on

70
00:04:12,110 --> 00:04:15,740
percentage of utilization on Auto Scaling Group.

71
00:04:15,740 --> 00:04:20,800
And then when you reach below a certain threshold and that alarm moves to okay,

72
00:04:20,800 --> 00:04:24,640
you can actually perform a different action that scales back in.

73
00:04:24,640 --> 00:04:27,600
So similar to this graphic here where we're triggering a

74
00:04:27,600 --> 00:04:31,770
notification and action on an auto scaling group based on

75
00:04:31,770 --> 00:04:36,440
requests now for this demo, I'm going to leave in alarm,

76
00:04:36,440 --> 00:04:39,270
and then we could select an SNS topic.

77
00:04:39,270 --> 00:04:40,380
Now we can create one.

78
00:04:40,380 --> 00:04:43,590
From here, you can specify an arm to use.

79
00:04:43,590 --> 00:04:47,170
You can specify that here as long as you have permissions,

80
00:04:47,170 --> 00:04:49,620
but we're going to select an existing Now I'm going

81
00:04:49,620 --> 00:04:53,580
to send it to my admin alert, SNS Topic and we can.

82
00:04:53,580 --> 00:04:55,460
See, my email is my endpoint,

83
00:04:55,460 --> 00:04:58,830
so it's going to send me an email to my company's email

84
00:04:58,830 --> 00:05:02,080
address whenever this alarm is triggered.

85
00:05:02,080 --> 00:05:06,700
now, The next thing down here is an auto scaling action, so this is similar.

86
00:05:06,700 --> 00:05:11,740
It's the same triggers, except for the resource types are just different,

87
00:05:11,740 --> 00:05:12,950
their auto scaling.

88
00:05:12,950 --> 00:05:16,260
So you can see we have auto scaling and CSS.

89
00:05:16,260 --> 00:05:18,310
So depending on our use case,

90
00:05:18,310 --> 00:05:22,080
we can select an auto scaling group and take a specific

91
00:05:22,080 --> 00:05:24,640
action when this alarm is triggered.

92
00:05:24,640 --> 00:05:29,820
So calling back to that graphic like this right here, this would be an example.

93
00:05:29,820 --> 00:05:33,620
We're taking an auto scaling action upon an alarm.

94
00:05:33,620 --> 00:05:34,940
Triggering.

95
00:05:34,940 --> 00:05:36,270
Let me remove this.

96
00:05:36,270 --> 00:05:40,090
And then the last thing we see is an easy to action.

97
00:05:40,090 --> 00:05:45,040
So the same triggers, except for the actions error different as well.

98
00:05:45,040 --> 00:05:49,310
And these error specific to an E c two instance we can Stop it

99
00:05:49,310 --> 00:05:52,590
terminated or reboot it and you can see great out.

100
00:05:52,590 --> 00:05:55,700
We can recover it, but that's specific to certain e.

101
00:05:55,700 --> 00:05:56,850
C two types.

102
00:05:56,850 --> 00:05:58,940
Now I'll remove this.

103
00:05:58,940 --> 00:06:00,500
We'll go ahead and continue,

104
00:06:00,500 --> 00:06:05,040
and I'll give my alarm a name and after the name of description,

105
00:06:05,040 --> 00:06:06,930
and then I'll click on next.

106
00:06:06,930 --> 00:06:09,130
That brings us to a preview screen,

107
00:06:09,130 --> 00:06:13,030
and you can see here on this graph that it actually laid

108
00:06:13,030 --> 00:06:16,940
out a line that measures are threshold.

109
00:06:16,940 --> 00:06:22,000
So that's at 50% and you can see currently we're underneath that threshold.

110
00:06:22,000 --> 00:06:23,440
So that's perfect.

111
00:06:23,440 --> 00:06:27,730
We can review our conditions, our actions and our name and description.

112
00:06:27,730 --> 00:06:29,840
And then let's create our alarm.

113
00:06:29,840 --> 00:06:30,830
And there you go.

114
00:06:30,830 --> 00:06:34,470
We see it here in the insufficient data state because it just

115
00:06:34,470 --> 00:06:39,120
has not had enough time to collect enough data based on the data

116
00:06:39,120 --> 00:06:43,860
points we selected as well as the time period in order to make a

117
00:06:43,860 --> 00:06:45,840
decision on the state.

118
00:06:45,840 --> 00:06:49,440
So since we selected Treat as missing data,

119
00:06:49,440 --> 00:06:54,640
it's going to just sit here in the insufficient state and not move.

120
00:06:54,640 --> 00:06:58,140
So what I'll do here is I'll pause this clip.

121
00:06:58,140 --> 00:07:01,200
I'm going to start another stress test and then we'll

122
00:07:01,200 --> 00:07:05,040
resume and view how our alarm reacts.

123
00:07:05,040 --> 00:07:07,710
Okay, so I'm going to resume here for a second,

124
00:07:07,710 --> 00:07:12,230
because if you notice, our state has now switched to okay,

125
00:07:12,230 --> 00:07:17,840
and that's because our CPU usage is below that 50% threshold.

126
00:07:17,840 --> 00:07:22,650
So I'm going to pause one more time while the stress test runs in the

127
00:07:22,650 --> 00:07:26,440
background and then we'll resume once this changes.

128
00:07:26,440 --> 00:07:28,830
All right, so I just got an alarm here,

129
00:07:28,830 --> 00:07:31,780
so Let's breathe fresh This And there you go.

130
00:07:31,780 --> 00:07:37,030
We can now see our alarm has switched its state to alarm.

131
00:07:37,030 --> 00:07:40,340
So once it did that, it's semi and email,

132
00:07:40,340 --> 00:07:45,650
as you can see from my phone that I'm recording and it shows us

133
00:07:45,650 --> 00:07:48,840
the alarm that went off and in which region.

134
00:07:48,840 --> 00:07:53,230
So hopefully this gives you some insight and some spike

135
00:07:53,230 --> 00:08:01,000
and curiosity on how you can utilize CloudWatch alarms within your own architectures.

