1
00:00:01,340 --> 00:00:03,340
[Autogenerated] All right, Welcome back.

2
00:00:03,340 --> 00:00:08,570
Now we just got done Demo ing a scheduled expression CloudWatch event.

3
00:00:08,570 --> 00:00:12,440
And in this one, we're going to create an event based rule.

4
00:00:12,440 --> 00:00:13,060
So let's go.

5
00:00:13,060 --> 00:00:17,100
To create rule again will select our event source and our

6
00:00:17,100 --> 00:00:20,140
trigger is going to be an event pattern.

7
00:00:20,140 --> 00:00:24,870
So if you notice it's going to essentially trigger on an event

8
00:00:24,870 --> 00:00:28,560
pattern that CloudWatch receives now specifically,

9
00:00:28,560 --> 00:00:33,340
these error CloudTrail events and we'll discuss CloudTrail later on.

10
00:00:33,340 --> 00:00:34,090
But for now,

11
00:00:34,090 --> 00:00:40,080
the concept is that it's capturing an API call within our A W s account.

12
00:00:40,080 --> 00:00:43,220
So we can select our service and you can see there are

13
00:00:43,220 --> 00:00:46,340
several services available to us.

14
00:00:46,340 --> 00:00:50,540
Almost all of them are available.

15
00:00:50,540 --> 00:00:52,010
But for this, let's select E.

16
00:00:52,010 --> 00:00:52,230
C.

17
00:00:52,230 --> 00:00:53,220
Two.

18
00:00:53,220 --> 00:00:56,000
So we're looking for an easy to event we can.

19
00:00:56,000 --> 00:01:00,770
Do all events or we can specify any event type now for this,

20
00:01:00,770 --> 00:01:04,240
we'll go ahead and choose instantiate change.

21
00:01:04,240 --> 00:01:06,060
We'll specify a state.

22
00:01:06,060 --> 00:01:10,900
But if we wanted to we can do any state and let's say we wanna

23
00:01:10,900 --> 00:01:15,300
go ahead and trigger when we're receiving a terminated instant

24
00:01:15,300 --> 00:01:19,340
state as well as a stopping event.

25
00:01:19,340 --> 00:01:23,850
So whenever any of these instantiate notifications are received,

26
00:01:23,850 --> 00:01:26,030
this event should trigger now.

27
00:01:26,030 --> 00:01:28,700
We could specify, in instance, IDE,

28
00:01:28,700 --> 00:01:32,590
but we'll leave it at any instance because we want to say,

29
00:01:32,590 --> 00:01:37,140
Hey, I want to know when any instance is getting terminated.

30
00:01:37,140 --> 00:01:40,900
And then on the bottom here, you can see we have an event pattern preview,

31
00:01:40,900 --> 00:01:44,840
so this is similar to what our event will look like.

32
00:01:44,840 --> 00:01:48,640
Now we'll add our target again, just like before.

33
00:01:48,640 --> 00:01:53,940
I'll go ahead and do a land of function, and I'll select that same function.

34
00:01:53,940 --> 00:01:56,200
I'll configure details.

35
00:01:56,200 --> 00:01:58,840
I'll give it a name again.

36
00:01:58,840 --> 00:02:01,140
I'll give it a description.

37
00:02:01,140 --> 00:02:03,570
I'll enable it, and then I'll create it.

38
00:02:03,570 --> 00:02:08,610
So now this does not invoke like a rate based expression does.

39
00:02:08,610 --> 00:02:12,340
This only invokes when an event is captured.

40
00:02:12,340 --> 00:02:14,330
So let's go ahead and demo this.

41
00:02:14,330 --> 00:02:16,320
Now let me navigate to E.

42
00:02:16,320 --> 00:02:16,530
C.

43
00:02:16,530 --> 00:02:18,240
Two.

44
00:02:18,240 --> 00:02:23,020
I'll find my instance that I was playing with earlier and stress testing.

45
00:02:23,020 --> 00:02:25,840
So let me go to running instances.

46
00:02:25,840 --> 00:02:31,340
I'll go ahead and terminate this instance here,

47
00:02:31,340 --> 00:02:33,300
and then you can see it's shutting down.

48
00:02:33,300 --> 00:02:37,410
So that's our first instant state change that we notice.

49
00:02:37,410 --> 00:02:39,780
So let me go to my lambda.

50
00:02:39,780 --> 00:02:45,310
I want to view my logs and you can see, this is our most recent indication time,

51
00:02:45,310 --> 00:02:47,770
and this was from our previous demo.

52
00:02:47,770 --> 00:02:51,640
But here at the bottom, we've had another indication,

53
00:02:51,640 --> 00:02:54,140
and it just happened right now.

54
00:02:54,140 --> 00:02:58,490
So what I did is I made a prints statement that prints

55
00:02:58,490 --> 00:03:01,040
the JSON event that we received,

56
00:03:01,040 --> 00:03:07,740
and you can see it's an instance state change notification like we specified.

57
00:03:07,740 --> 00:03:13,260
It gives us a time and account a region and most importantly,

58
00:03:13,260 --> 00:03:15,010
in the detail block.

59
00:03:15,010 --> 00:03:18,730
We have our instance IDE in the state that it's in.

60
00:03:18,730 --> 00:03:20,440
So it's terminated.

61
00:03:20,440 --> 00:03:26,240
So now when I go back to Ec2, we see it's in a terminated state.

62
00:03:26,240 --> 00:03:30,240
So hopefully that kickstart some ideas on how you can utilize

63
00:03:30,240 --> 00:03:35,570
CloudWatch events with event based triggers to perform specific

64
00:03:35,570 --> 00:03:38,240
actions for your own use cases.

65
00:03:38,240 --> 00:03:42,940
These event based triggers really allow you to do an enormous

66
00:03:42,940 --> 00:03:46,740
amount of tasks in an automated fashion,

67
00:03:46,740 --> 00:03:49,400
so be sure to check them out and play around with

68
00:03:49,400 --> 00:03:56,000
them whenever you get some time. For now, we'll go ahead and wrap up here and move on

