WEBVTT
1
00:00:00.740 --> 00:00:02.570
[Autogenerated] infrastructure as code.

2
00:00:02.570 --> 00:00:02.850
Now,

3
00:00:02.850 --> 00:00:05.840
infrastructure as code is the management of

4
00:00:05.840 --> 00:00:09.840
infrastructure via versioning from source code.

5
00:00:09.840 --> 00:00:12.630
Now let's go ahead and take a look at a diagram.

6
00:00:12.630 --> 00:00:15.840
That kind of demos, how this works.

7
00:00:15.840 --> 00:00:18.460
In this example, we have two different accounts.

8
00:00:18.460 --> 00:00:21.270
We have our Dev account and then our product count here at

9
00:00:21.270 --> 00:00:26.060
the bottom and we see that Dev and Prod are starting with

10
00:00:26.060 --> 00:00:28.540
the same application version.

11
00:00:28.540 --> 00:00:29.730
Within each account,

12
00:00:29.730 --> 00:00:35.790
we have version 1.0 point zero on both Dev and Prod and this

13
00:00:35.790 --> 00:00:39.730
code is being stored in some version of version control whether

14
00:00:39.730 --> 00:00:45.140
it be GitHub bit bucket or even code commit in a W s and those

15
00:00:45.140 --> 00:00:46.940
error just to name a few.

16
00:00:46.940 --> 00:00:51.270
Now, in a typical flow, developers would make new changes.

17
00:00:51.270 --> 00:00:54.750
They would push the new changes that run through the continuous

18
00:00:54.750 --> 00:00:58.140
integration and continuous deployment process.

19
00:00:58.140 --> 00:01:01.430
And with that, the changes get deployed to Dev.

20
00:01:01.430 --> 00:01:05.900
So you can see here we're now on version 1.0 point one,

21
00:01:05.900 --> 00:01:07.430
and in the graphic,

22
00:01:07.430 --> 00:01:10.220
we now notice that our architecture er is now

23
00:01:10.220 --> 00:01:13.640
including lamb does in those two regions.

24
00:01:13.640 --> 00:01:18.310
So we have added a resource in Dev by updating our

25
00:01:18.310 --> 00:01:21.710
template files which will look at here in a minute in

26
00:01:21.710 --> 00:01:24.740
promoting that code change into Dev.

27
00:01:24.740 --> 00:01:29.670
Now, the beauty of infrastructure is code is after successful testing,

28
00:01:29.670 --> 00:01:35.750
we would promote our changes and the exact same code can easily be

29
00:01:35.750 --> 00:01:39.440
deployed via CloudFormation into our product count.

30
00:01:39.440 --> 00:01:43.940
So you can see now we're running version 1.0 point one in both

31
00:01:43.940 --> 00:01:47.540
accounts and they have matching architectures.

32
00:01:47.540 --> 00:01:50.940
Those two new Lambda Czar now deployed in prod.

33
00:01:50.940 --> 00:01:52.790
Now, this is just an example.

34
00:01:52.790 --> 00:01:56.710
You can deploy within the same account just as easily,

35
00:01:56.710 --> 00:01:59.480
But hopefully that gives you an idea of how we can

36
00:01:59.480 --> 00:02:02.040
create these repeatable deployments,

37
00:02:02.040 --> 00:02:07.330
using a source of truth in our source control like a get repo and then

38
00:02:07.330 --> 00:02:11.250
quickly deploy those changes across an organization.

39
00:02:11.250 --> 00:02:16.840
Now we mentioned CloudFormation here in what is a W s CloudFormation?

40
00:02:16.840 --> 00:02:17.130
Well,

41
00:02:17.130 --> 00:02:21.500
CloudFormation allows us to create a template of all of the

42
00:02:21.500 --> 00:02:25.240
resource is that will need for our application.

43
00:02:25.240 --> 00:02:31.240
And then it can provision and even do some configuration for you within a W s.

44
00:02:31.240 --> 00:02:34.770
So what this does is it allows us to simplify art

45
00:02:34.770 --> 00:02:39.120
appointments by allowing us to essentially deploy an entire

46
00:02:39.120 --> 00:02:42.040
architecture ER with a single click.

47
00:02:42.040 --> 00:02:45.140
It also allows us to replicate quickly.

48
00:02:45.140 --> 00:02:50.040
So we create what are called templates, which we'll discuss in an upcoming clip,

49
00:02:50.040 --> 00:02:54.040
and these templates allow us to reuse them,

50
00:02:54.040 --> 00:02:58.340
whether it be in other regions or even other accounts.

51
00:02:58.340 --> 00:03:02.040
So calling back to that diagram we just looked at,

52
00:03:02.040 --> 00:03:05.330
we were able to easily promote code from Dev to prod

53
00:03:05.330 --> 00:03:07.390
and have matching architectures.

54
00:03:07.390 --> 00:03:11.640
And thirdly, it allows us to track changes.

55
00:03:11.640 --> 00:03:15.270
So CloudFormation does an excellent job of telling us

56
00:03:15.270 --> 00:03:18.240
what we have deployed resource wise,

57
00:03:18.240 --> 00:03:24.640
and it tracks and reports any changes that error made to those resource is.

58
00:03:24.640 --> 00:03:28.420
Now that we have an understanding of what CloudFormation is,

59
00:03:28.420 --> 00:03:35.000
let's take a break here and in the next clip will start diving into CloudFormation stacks.

