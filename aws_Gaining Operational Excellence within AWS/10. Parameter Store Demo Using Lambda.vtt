WEBVTT
1
00:00:01.140 --> 00:00:01.920
[Autogenerated] already.

2
00:00:01.920 --> 00:00:07.040
Now let's go ahead and look at parameter store within systems manager.

3
00:00:07.040 --> 00:00:12.490
Parameter store is a service offered by AWS for us to

4
00:00:12.490 --> 00:00:15.740
store parameter key value pairs.

5
00:00:15.740 --> 00:00:18.410
Now you can do it in a flat key value,

6
00:00:18.410 --> 00:00:23.790
or you can do it hierarchically with path based parameters.

7
00:00:23.790 --> 00:00:26.540
As you can see here on the screen,

8
00:00:26.540 --> 00:00:31.890
there's slash environment abbreviation slash application

9
00:00:31.890 --> 00:00:34.590
slash parameter that we're looking for.

10
00:00:34.590 --> 00:00:37.540
So we have a dev database password.

11
00:00:37.540 --> 00:00:43.140
We have a prod database password and we have a user for both as well.

12
00:00:43.140 --> 00:00:48.240
Now what this does is it allows us to isolate and put in extremely

13
00:00:48.240 --> 00:00:54.490
granular controls within our I am policies for whichever rolls or

14
00:00:54.490 --> 00:00:58.040
users need to access these parameters.

15
00:00:58.040 --> 00:01:02.160
So maybe ________ Dev related land does we can just go ahead and

16
00:01:02.160 --> 00:01:06.040
specify that it can read anything under slash Dev,

17
00:01:06.040 --> 00:01:07.690
But we want to deny it to prod.

18
00:01:07.690 --> 00:01:09.260
So we do not include that.

19
00:01:09.260 --> 00:01:14.040
In that case, it could read both of these top parameters, but not the bottom.

20
00:01:14.040 --> 00:01:14.270
Now,

21
00:01:14.270 --> 00:01:18.550
to show you how this kind of works I spun up a CloudFormation stack and

22
00:01:18.550 --> 00:01:24.140
this is included in the downloadable is for this course and all it does

23
00:01:24.140 --> 00:01:27.650
is it creates a lambda a policy and a role.

24
00:01:27.650 --> 00:01:28.540
So let's look at that.

25
00:01:28.540 --> 00:01:34.650
Now, Now, on this, get parameters function.

26
00:01:34.650 --> 00:01:37.740
Let's just take a look at the code here,

27
00:01:37.740 --> 00:01:42.630
and what we're doing is we're utilizing the bow to three client for S S M.

28
00:01:42.630 --> 00:01:46.980
We're pulling in some of the environment variables that we're using so

29
00:01:46.980 --> 00:01:49.780
you can see our environment and application key,

30
00:01:49.780 --> 00:01:52.630
which error set here at the bottom of the screen.

31
00:01:52.630 --> 00:01:57.120
And then I'm substituting within an F string and python to

32
00:01:57.120 --> 00:02:00.040
set the path that we're looking for.

33
00:02:00.040 --> 00:02:03.540
And then when the Lambda invokes, the handler itself,

34
00:02:03.540 --> 00:02:07.840
essentially just prints out a few messages and then the response.

35
00:02:07.840 --> 00:02:12.420
So when I run this, it should look for the slash dev slash database,

36
00:02:12.420 --> 00:02:16.620
and then it runs recursive Lee, so it should find both the user and password.

37
00:02:16.620 --> 00:02:22.440
So let me create a test event and run this.

38
00:02:22.440 --> 00:02:23.550
Oh, that's a good sign.

39
00:02:23.550 --> 00:02:24.470
We got succeeded.

40
00:02:24.470 --> 00:02:26.940
So let's expand.

41
00:02:26.940 --> 00:02:29.440
We don't return anything we just print.

42
00:02:29.440 --> 00:02:32.240
So if we scroll to the log output, you see,

43
00:02:32.240 --> 00:02:35.210
let's pull the password of the app for the environment.

44
00:02:35.210 --> 00:02:38.440
We're using our path that we defined here,

45
00:02:38.440 --> 00:02:41.260
and then it's printing the parameters in JSON.

46
00:02:41.260 --> 00:02:45.240
So there's a list of two parameters database password,

47
00:02:45.240 --> 00:02:48.280
and then we have database user, and that's it.

48
00:02:48.280 --> 00:02:49.170
So there's only two.

49
00:02:49.170 --> 00:02:51.340
It doesn't see the Prod ones,

50
00:02:51.340 --> 00:02:54.380
and you can see it pulls the type that it is as well

51
00:02:54.380 --> 00:02:56.360
as the value for that parameter.

52
00:02:56.360 --> 00:03:00.740
So you can parse this output and then use it as you see fit.

53
00:03:00.740 --> 00:03:04.210
An example of this would be using this to gain access to a

54
00:03:04.210 --> 00:03:09.060
password in an automated fashion to connect a maybe a database

55
00:03:09.060 --> 00:03:11.840
or some type of back end application.

56
00:03:11.840 --> 00:03:13.330
So let's just test one more time.

57
00:03:13.330 --> 00:03:18.240
I want to change this to production.

58
00:03:18.240 --> 00:03:23.840
I'll save it, and then I'll test again and we should have a different result.

59
00:03:23.840 --> 00:03:26.210
Let me expand and we do.

60
00:03:26.210 --> 00:03:28.750
You see what we're now getting Prod database,

61
00:03:28.750 --> 00:03:33.180
password and prod database user and those error all

62
00:03:33.180 --> 00:03:36.870
being pulled from systems manager now, if we wanted to,

63
00:03:36.870 --> 00:03:42.360
you can also create a secure string, and we'll give it prod application password.

64
00:03:42.360 --> 00:03:45.240
I'll make it a secure string.

65
00:03:45.240 --> 00:03:48.990
We'll use the default key just so I don't have to set up more permissions.

66
00:03:48.990 --> 00:03:52.770
But if you want to, you can specify a K M s key,

67
00:03:52.770 --> 00:03:56.700
and then you need to grant permissions to your land a role or

68
00:03:56.700 --> 00:03:59.660
whichever role or user is accessing this.

69
00:03:59.660 --> 00:04:01.840
So let's go and type the password Here.

70
00:04:01.840 --> 00:04:02.760
I'll go ahead.

71
00:04:02.760 --> 00:04:04.840
I'll create it.

72
00:04:04.840 --> 00:04:09.840
And then let's see if we can reach this so I would go to my Lambda,

73
00:04:09.840 --> 00:04:17.250
edit the variables and let's test and there we go,

74
00:04:17.250 --> 00:04:19.440
another success,

75
00:04:19.440 --> 00:04:23.920
and now you can see it's pulling prod application as opposed to database.

76
00:04:23.920 --> 00:04:27.440
And it found the one parameter we have of password.

77
00:04:27.440 --> 00:04:32.420
And it's a secure string so you can see the password value comes in decrypted.

78
00:04:32.420 --> 00:04:37.940
But if you look in systems manager, you'll see it hides the value.

79
00:04:37.940 --> 00:04:41.340
So this is encrypting the value on the back end,

80
00:04:41.340 --> 00:04:43.640
and when you click show,

81
00:04:43.640 --> 00:04:47.190
it's basically running a decrypt command in the background,

82
00:04:47.190 --> 00:04:50.440
using that kms key so it can display it.

83
00:04:50.440 --> 00:04:55.040
Now that's going to do it for this demo on parameter store and its use cases.

84
00:04:55.040 --> 00:04:56.800
I do recommend you check this out.

85
00:04:56.800 --> 00:05:00.820
It's a very handy service for secrets management within

86
00:05:00.820 --> 00:05:11.000
an architecture er in an enterprise, so we'll break here and then we'll pick up with the module review and wrap up

