WEBVTT
1
00:00:00.650 --> 00:00:04.190
Hello and welcome back to the course on database's.

2
00:00:04.190 --> 00:00:08.170
All right so you've made it all the way to the third normal form.

3
00:00:08.180 --> 00:00:12.890
I'm very excited to see you in this to Tauriel and congratulations.

4
00:00:12.890 --> 00:00:19.050
So that means you've passed the first normal form and the second normal form which together are you

5
00:00:19.050 --> 00:00:20.110
know quite a challenge.

6
00:00:20.110 --> 00:00:23.100
They're pretty complex to understand.

7
00:00:23.210 --> 00:00:30.210
So hopefully you've allowed for some time and maybe even some practice to let that knowledge sink in.

8
00:00:30.230 --> 00:00:35.850
Because today we've got a super exciting and same time super.

9
00:00:36.100 --> 00:00:39.410
I would say non-trivial challenge ahead of us.

10
00:00:39.440 --> 00:00:41.560
It's the third normal form.

11
00:00:41.570 --> 00:00:43.590
So let's dive straight into it.

12
00:00:43.610 --> 00:00:45.910
What is the third normal form.

13
00:00:45.920 --> 00:00:49.200
All right so by definition a table is in a third normal form.

14
00:00:49.220 --> 00:00:54.130
If it is in a second normal form makes sense right.

15
00:00:54.290 --> 00:01:02.050
And every non-prime attribute is non transitively dependent on every candidate key.

16
00:01:02.480 --> 00:01:02.930
All right.

17
00:01:02.930 --> 00:01:09.570
So that might sound like a lot of jibberish at this stage so very confusing and totally understand totally

18
00:01:09.570 --> 00:01:10.820
agree if you.

19
00:01:10.880 --> 00:01:18.350
But for now let's just let that sink in and let's have a look at our mnemonic so to understand how we

20
00:01:18.350 --> 00:01:22.910
can just reconstruct this definition if we need to.

21
00:01:23.000 --> 00:01:28.380
If for some reason we get lost and we just have them mnemonic in front of us which we remember and move

22
00:01:28.400 --> 00:01:32.890
that one about the truth the whole truth and nothing but the truth.

23
00:01:32.930 --> 00:01:33.200
Right.

24
00:01:33.200 --> 00:01:36.410
So the key the whole key and nothing but the key.

25
00:01:36.410 --> 00:01:43.760
So every non-prime attribute must provide a fact about the key the whole key and nothing but the key.

26
00:01:43.760 --> 00:01:50.790
So again just like in the case of the second normal form we can see that we hear every candidate key

27
00:01:50.820 --> 00:01:54.230
but here we're just talking about the individual key.

28
00:01:54.530 --> 00:01:57.860
So the correct definition is of course this one.

29
00:01:57.860 --> 00:02:03.230
So just remember in human a monarch you also need to replace the key with every candidate key just as

30
00:02:03.230 --> 00:02:05.370
we did in the second normal form.

31
00:02:05.510 --> 00:02:08.390
And so basically now we're talking about and nothing but the key.

32
00:02:08.390 --> 00:02:13.940
So if you just have this mnemonic in your mind and you just talk through it every non-prime attribute

33
00:02:13.940 --> 00:02:18.350
must provide the fact about the key the whole can nothing but the key there is very easy to reconstruct

34
00:02:18.440 --> 00:02:21.100
that we're talking about and nothing but the key.

35
00:02:21.470 --> 00:02:27.440
And then here was saying every non-parametric is non transitively dependent on every candidate.

36
00:02:27.440 --> 00:02:34.850
So basically now you'll see that non transitively means that the non-prime attribute must be dependent

37
00:02:35.060 --> 00:02:42.770
on the candidate key rather than something else in between some other column that's standing in between

38
00:02:43.730 --> 00:02:46.970
this attribute and the candidate.

39
00:02:47.180 --> 00:02:52.400
So it has to be dependent on the key itself not something else.

40
00:02:52.400 --> 00:02:56.750
All right so we've talked quite a lot through the definition now let's have a look at an example to

41
00:02:56.750 --> 00:02:58.710
understand exactly how it works.

42
00:02:59.180 --> 00:03:00.740
OK so here we've got our example.

43
00:03:00.740 --> 00:03:02.630
Tournament winners.

44
00:03:02.690 --> 00:03:08.060
So we've got a tournament.

45
00:03:08.140 --> 00:03:12.370
So these are tournaments which looks like golf.

46
00:03:12.580 --> 00:03:19.220
We've gotten down invitations in Cleveland open there's one masters and Indiana intuitional again.

47
00:03:19.330 --> 00:03:30.250
And so the question here is is this table in conformity with the third normal form does it match or

48
00:03:31.090 --> 00:03:34.000
does it meet the criteria of the third normal form.

49
00:03:34.210 --> 00:03:38.730
Well let's check Well first of all let's check the first normal form in the second form right.

50
00:03:38.890 --> 00:03:41.160
So does it meet the criteria of the first normal form.

51
00:03:41.170 --> 00:03:42.510
It is good practice for us.

52
00:03:42.510 --> 00:03:47.130
So first normal form it does it does it have duplicate rows.

53
00:03:47.140 --> 00:03:53.050
No it doesn't look like it has a black rose and we'd assume that further down it doesn't either.

54
00:03:53.050 --> 00:03:59.590
But just based on these rows we can see it doesn't and does any of the columns any cells does any of

55
00:03:59.590 --> 00:04:01.800
the cells have more than one value in them.

56
00:04:02.050 --> 00:04:07.270
Nope looks like all the cells have just individual ballots good so it conforms to the first form or

57
00:04:07.270 --> 00:04:10.660
form does it conform to the second normal form.

58
00:04:10.660 --> 00:04:20.770
Well in order to answer that question we need to find out if all of the known prime attributes are dependent

59
00:04:20.860 --> 00:04:24.430
on the whole of each of the candidate keys.

60
00:04:24.430 --> 00:04:24.640
Right.

61
00:04:24.640 --> 00:04:29.110
So first of all we'll need to identify the candidate keys in this table.

62
00:04:29.110 --> 00:04:32.010
We have just the one candidate key and make sense right.

63
00:04:32.020 --> 00:04:37.330
If we looking at tournament winners then it would be the tournament and the year in which that tournament

64
00:04:37.680 --> 00:04:43.300
was held because tournaments sometimes are annual So they held on a recurring basis.

65
00:04:43.330 --> 00:04:50.010
So just a tournament by itself is not a sufficient column to be a candidate.

66
00:04:50.350 --> 00:04:52.720
But a hundred plus year ideas.

67
00:04:52.960 --> 00:04:54.490
And then you will have the winner.

68
00:04:54.490 --> 00:05:01.620
So this is kind of like the tournament and then based on the tournament and the year like this kind

69
00:05:01.620 --> 00:05:03.870
of key you will find out the winner and the winner.

70
00:05:03.880 --> 00:05:04.740
Date of Birth.

71
00:05:04.960 --> 00:05:05.170
Right.

72
00:05:05.170 --> 00:05:07.960
So that's our candidate and that's our only candidate.

73
00:05:07.960 --> 00:05:11.950
You can also check that by looking at other combinations of columns.

74
00:05:12.920 --> 00:05:23.360
And so the question is from here is each one of these or are these non-prime actually so these are our

75
00:05:23.380 --> 00:05:27.270
primary concern because they're in Canada kids or in in the only kind of key.

76
00:05:27.290 --> 00:05:31.760
And these are our non-prime attributes because they are not found in any of the candidate keys.

77
00:05:32.120 --> 00:05:38.900
And the question is is each one of these non-prime attributes dependent on this whole key right.

78
00:05:39.170 --> 00:05:41.750
Or is it maybe dependent on just part of it.

79
00:05:41.750 --> 00:05:42.980
So let's have a look.

80
00:05:42.980 --> 00:05:44.830
So is the winner.

81
00:05:45.800 --> 00:05:50.840
Say Al Frederiksen is the winner column dependent on both of these right.

82
00:05:50.930 --> 00:05:54.200
Can you just by knowing the tournament can you tell who the winner is.

83
00:05:54.200 --> 00:05:59.840
No you can't because you need to know the tournament name and the date to find out the winner because

84
00:05:59.950 --> 00:06:06.250
in the year in different years at the same tournament would could have easily could have different winners.

85
00:06:06.290 --> 00:06:08.970
Same thing can you tell who the winner is just by the year.

86
00:06:09.170 --> 00:06:15.080
Well no you cannot because in one year you'll have many different tournaments and therefore you cannot

87
00:06:15.080 --> 00:06:15.660
tell them.

88
00:06:15.860 --> 00:06:17.450
Same logic goes for date of birth.

89
00:06:17.450 --> 00:06:26.170
So basically both of these non-prime attributes are fully dependent on the whole of this candidate.

90
00:06:26.240 --> 00:06:29.980
So this table does meet the second normal form.

91
00:06:29.990 --> 00:06:32.830
The question is does it meet the third normal form.

92
00:06:32.840 --> 00:06:33.530
Well let's have a look.

93
00:06:33.530 --> 00:06:34.780
That's how a candidate key.

94
00:06:35.060 --> 00:06:40.780
And the third normal form if we go back says that every non-prime attribute which are these two here

95
00:06:41.950 --> 00:06:45.930
is non transitively dependent on every candidate key.

96
00:06:46.150 --> 00:06:51.010
So basically this dependency which we just checked that the winner is depending on the tournament and

97
00:06:51.020 --> 00:06:52.300
you're the winner.

98
00:06:52.300 --> 00:06:54.820
Date of Birth is depending on the tournament year.

99
00:06:54.850 --> 00:07:00.360
Right so this dependency has to be non-trans non-trans.

100
00:07:00.610 --> 00:07:01.610
Well let's have a look.

101
00:07:01.660 --> 00:07:04.580
We've got the tournament in here.

102
00:07:04.780 --> 00:07:06.010
And while the winner.

103
00:07:06.010 --> 00:07:06.280
Right.

104
00:07:06.280 --> 00:07:12.370
So tournament year the winner is indeed dependent on the tournament and you're the winner.

105
00:07:12.370 --> 00:07:16.160
Date of birth isn't directly dependent on you.

106
00:07:16.210 --> 00:07:22.840
Yes of course by knowing that you're looking at you looking at the Cleveland opening in the year 1999

107
00:07:23.530 --> 00:07:25.750
and you want to find out the winner.

108
00:07:25.780 --> 00:07:32.320
The date of birth for the winner right you is uniquely identified by the combination of these two columns.

109
00:07:32.560 --> 00:07:37.230
But it's not uniquely identified through them just through them.

110
00:07:37.250 --> 00:07:40.090
It's a uniquely identified through this transition through the winter.

111
00:07:40.090 --> 00:07:41.310
So you have to go.

112
00:07:41.410 --> 00:07:41.710
All right.

113
00:07:41.710 --> 00:07:42.820
Who was the winner.

114
00:07:43.030 --> 00:07:45.190
What was that when his date of birth.

115
00:07:45.220 --> 00:07:49.520
Right so it's not like just knowing knowing the tournament year.

116
00:07:49.750 --> 00:07:57.130
You know you're going to establish the date of birth this winter date of birth is tied directly to the

117
00:07:57.130 --> 00:07:58.230
winner.

118
00:07:58.320 --> 00:08:05.180
Right so that is what we mean by Tredrea and transitively So this is a transitive dependency for instance

119
00:08:05.190 --> 00:08:10.230
this first one is a non transitive dependency because the winner is directly dependent on the tournament.

120
00:08:10.540 --> 00:08:16.170
Whereas when the date of birth is transitively dependent on the kenned keep.

121
00:08:16.180 --> 00:08:24.250
So therefore this table does not meet the criteria for the third normal form.

122
00:08:24.250 --> 00:08:27.670
Question again how why is that important.

123
00:08:27.670 --> 00:08:27.850
Right.

124
00:08:27.850 --> 00:08:33.120
So we understand now the definition of the third normal form and we also understand what exactly means

125
00:08:33.130 --> 00:08:38.170
in this example but what does why is that important in real life.

126
00:08:38.170 --> 00:08:42.660
Why is it important for us to look out for in real databases what is important for us.

127
00:08:42.730 --> 00:08:43.830
Why is it good.

128
00:08:43.830 --> 00:08:48.610
Why is it better to have a table that all like What's the difference between a table that is compline

129
00:08:48.610 --> 00:08:51.710
to third normal form and a table that's not compliant with our normal form.

130
00:08:51.820 --> 00:08:55.380
Well the answer is again about two things.

131
00:08:55.370 --> 00:08:59.350
First one is duplication of work.

132
00:08:59.370 --> 00:09:04.930
Right so if you want to update this table and you want to add another tournament in another year with

133
00:09:04.930 --> 00:09:12.670
another winner if it so happens that that winter has already been a winter previously you will be replicating

134
00:09:12.670 --> 00:09:13.840
the date of birth again.

135
00:09:13.870 --> 00:09:15.310
Right so here's a good example.

136
00:09:15.320 --> 00:09:20.210
Al Frederiksen won the Indiana Invitational and Alfredsson won the day.

137
00:09:20.350 --> 00:09:24.550
One masters night in 98 and 99.

138
00:09:24.550 --> 00:09:30.990
So basically his birthday is here twice and that's unnecessary to have you.

139
00:09:31.030 --> 00:09:35.860
And there's no no really no real reason to store this information twice.

140
00:09:35.860 --> 00:09:36.070
Right.

141
00:09:36.070 --> 00:09:41.970
So you really know the birthday of al Frederiksen Why is this information here twice and what that means

142
00:09:41.970 --> 00:09:47.440
is first of all the processing speed when you're putting information to the database will be slower.

143
00:09:47.450 --> 00:09:54.370
So and like these this again this is very very My minor example doesn't seem like all.

144
00:09:54.400 --> 00:10:01.280
But when you're dealing with tables with millions or even billions of rows being added per hour.

145
00:10:01.330 --> 00:10:01.740
Right.

146
00:10:01.750 --> 00:10:07.210
This is a massive difference or even adding one column or imagine like a hundred columns that have this

147
00:10:07.210 --> 00:10:08.520
transitive dependency.

148
00:10:08.890 --> 00:10:16.280
If you're updating 100 columns for a billion rows that's 100 billion unnecessary updates that you're

149
00:10:16.300 --> 00:10:16.940
doing.

150
00:10:17.020 --> 00:10:20.300
And like large organizations really struggle of this.

151
00:10:21.030 --> 00:10:29.970
They these processes these processes they run overnight usually so they run after everybody's gone home

152
00:10:29.980 --> 00:10:33.850
like I don't know maybe from me.

153
00:10:33.880 --> 00:10:35.690
It depends right so it depends on the organization.

154
00:10:35.710 --> 00:10:40.450
But maybe like from 2:00 a.m. until 6:00 a.m. this four hour window that they have to run all of these

155
00:10:40.450 --> 00:10:47.960
updates into their databases especially transactional databases and when this happens you've you've

156
00:10:48.250 --> 00:10:51.270
got a lot of time being wasted.

157
00:10:51.280 --> 00:10:53.230
And also it's in storage right.

158
00:10:53.230 --> 00:11:00.940
So this information requires space on the hard drives or solid state drives and therefore it's additional

159
00:11:00.940 --> 00:11:01.630
storage.

160
00:11:01.630 --> 00:11:04.520
So that's that's problem number one problem the.

161
00:11:04.720 --> 00:11:08.890
Is this structure this design is more prone to errors.

162
00:11:08.890 --> 00:11:17.080
Right so if you've got the data data twice or several times every time you input the sorrow you don't

163
00:11:17.080 --> 00:11:21.730
just duplicating the data but you also there's also a chance that you might do an error it might create

164
00:11:21.730 --> 00:11:22.420
an error.

165
00:11:22.420 --> 00:11:30.450
So if you put the wrong date of birth by accident then you've got a problem in the database so it's

166
00:11:30.510 --> 00:11:34.120
not going to match up to the other date of birth and the birth of that person.

167
00:11:34.150 --> 00:11:39.910
And that's just basically is incorrect information so if you can avoid inputting information you'll

168
00:11:40.540 --> 00:11:44.850
have less chance of creating errors in your database.

169
00:11:44.860 --> 00:11:50.540
So that's the disadvantages of the table not being in third normal form.

170
00:11:50.560 --> 00:11:58.150
So let's see how we can fix this and put this table or this design changes designed for this information

171
00:11:58.150 --> 00:12:01.060
to indeed be in third normal form.

172
00:12:01.120 --> 00:12:01.910
So there we go.

173
00:12:01.990 --> 00:12:08.320
This is how you do it would split up into two tables and it's quite straightforward here so we've got

174
00:12:08.710 --> 00:12:14.860
the tournament winners table which we had Preece but we just took the dates of birth and we separated

175
00:12:14.860 --> 00:12:16.190
them into a separate table.

176
00:12:16.420 --> 00:12:21.340
So here we've got the tournament the year and the winner and then if you need to look up the date of

177
00:12:21.340 --> 00:12:27.220
birth of the winner you go to the supper table and by their name you will be able to find them and find

178
00:12:27.310 --> 00:12:28.360
the date of birth.

179
00:12:28.580 --> 00:12:35.010
And so let's find out if these tables conform to the criteria of the third normal form.

180
00:12:35.010 --> 00:12:41.370
All right so we need to identify our candidate keys So here we've got our tournament and year.

181
00:12:41.370 --> 00:12:44.910
That's our calendar here just as it was in the previous version of the table.

182
00:12:45.000 --> 00:12:46.620
And here we've got the winner.

183
00:12:47.010 --> 00:12:54.360
The winners are Canada key here basically because the winner uniquely identifies or the person uniquely

184
00:12:54.360 --> 00:13:00.330
identifies each row and then you can pick up their date of birth.

185
00:13:00.630 --> 00:13:13.920
And so now we just need to check if each one of these if each one of these tables is in the third normal

186
00:13:13.920 --> 00:13:14.320
form.

187
00:13:14.320 --> 00:13:18.430
Right so we would check the first normal form.

188
00:13:18.430 --> 00:13:19.400
Yes we all know.

189
00:13:19.510 --> 00:13:26.590
They both fit the first animal form because there's no duplicate rows and also only one individual value

190
00:13:26.590 --> 00:13:29.160
in each in each cell.

191
00:13:29.170 --> 00:13:40.480
Then the second normal form we would check that this non prime non-prime key non-prime attribute though

192
00:13:40.540 --> 00:13:46.490
in this case the winner is dependent on the whole of the candidate key which is correct.

193
00:13:46.510 --> 00:13:51.160
We check that for the previous table and the date of birth this non-prime attribute is dependent on

194
00:13:51.160 --> 00:13:55.510
the whole the kind of key that's by default because he cannot split this candid kids consists of one

195
00:13:55.510 --> 00:13:59.830
column only and then would check the third normal form.

196
00:13:59.830 --> 00:14:04.750
We want to see that indeed there is no

197
00:14:07.850 --> 00:14:10.150
transitive dependencies present.

198
00:14:10.150 --> 00:14:19.010
So basically that each one of the prime non-prime attributes is non transitively dependent on the candidate

199
00:14:19.010 --> 00:14:19.410
key.

200
00:14:19.430 --> 00:14:25.310
Well in this case we only have one on prime attributes right so it has to be transitively dependent

201
00:14:25.580 --> 00:14:29.100
and we've already checked that for winter actually previously and here same thing.

202
00:14:29.480 --> 00:14:34.630
We've got this non-prime attribute and it is non-trans it is heavily dependent on winter.

203
00:14:34.640 --> 00:14:38.540
It's a direct functional dependency.

204
00:14:38.590 --> 00:14:41.610
So that's of very functional dependency.

205
00:14:41.770 --> 00:14:44.410
And here that's all for direct functional dependence.

206
00:14:44.590 --> 00:14:48.300
So there we go so there's several meets three criteria.

207
00:14:48.310 --> 00:14:57.520
This will meet the three criteria and we have a design a database design that is compliant with the

208
00:14:57.640 --> 00:15:00.850
three NF criteria so that is in the third normal form.

209
00:15:01.060 --> 00:15:03.290
And so what is great about this.

210
00:15:03.310 --> 00:15:08.890
Well what is great is now that we going when we and never we add new records which the tournament the

211
00:15:08.890 --> 00:15:09.970
year and the winner.

212
00:15:10.120 --> 00:15:15.790
And then if it's in you win or we just add them to the winners dates of birth and we will get their

213
00:15:17.110 --> 00:15:18.580
information from there.

214
00:15:18.580 --> 00:15:22.990
We will get there we'll be able to get their date of birth from there.

215
00:15:22.990 --> 00:15:29.980
And that way we don't store that information well so we don't actually have to add more and more and

216
00:15:29.980 --> 00:15:36.400
more information all the time and unnecessary information and speed up the processing and also reduce

217
00:15:36.400 --> 00:15:43.400
the amount of space and also reduce possibility of error because dates of birth are stored separately.

218
00:15:43.780 --> 00:15:46.320
So that's how the third normal form works.

219
00:15:46.330 --> 00:15:47.510
Just a quick note here.

220
00:15:47.560 --> 00:15:52.400
If you're wondering if what if somebody has two winners have the same name and surname.

221
00:15:52.570 --> 00:15:54.790
Well in that case that's a kind of a different issue.

222
00:15:54.790 --> 00:16:00.130
Separate issue you would have to identify people somehow differently like you would have to replace

223
00:16:00.130 --> 00:16:02.230
when or with an ID or something.

224
00:16:02.270 --> 00:16:08.860
So it's a bit of a different issue in this case you need to just deal with it separately but like in

225
00:16:08.860 --> 00:16:14.560
this hour in our simplified example we're just assuming that winners will all have unique names names

226
00:16:14.560 --> 00:16:16.120
or name combinations.

227
00:16:16.480 --> 00:16:25.780
And the good news is that this third normal form of databases is is very very powerful.

228
00:16:25.780 --> 00:16:32.330
It is one of the top normalisation forms of databases there are higher levels.

229
00:16:32.440 --> 00:16:39.340
You've got the boys called normalization which is like a 3.5 normal form.

230
00:16:39.430 --> 00:16:42.360
Then you've got the fourth normal form you get the fifth normal form.

231
00:16:42.490 --> 00:16:51.950
But those are like unnecessarily complex and they bring in efficiency or they add value.

232
00:16:51.960 --> 00:17:00.310
But it is rare That's the third normal form is not sufficient so most a third normal form tables are

233
00:17:00.310 --> 00:17:06.220
free from Update insertion and deletion anomalies so the stuff that we were talking about that when

234
00:17:06.220 --> 00:17:12.700
you add a new record or you update or you delete a record there is problems there can be problems with

235
00:17:12.730 --> 00:17:17.880
errors or errors can arise well in the third normal form.

236
00:17:18.070 --> 00:17:28.030
Most tables are you know situations are taken care of and all of these unnecessary all this unnecessary

237
00:17:28.030 --> 00:17:34.090
room for error has been mitigated so very rarely would you need to go further than the third normal

238
00:17:34.090 --> 00:17:34.420
form.

239
00:17:34.420 --> 00:17:41.110
So that is why you know probably like I say a number of top my head but if I had to guess I would say

240
00:17:41.110 --> 00:17:45.670
like 80 or 90 percent of the tables that you can deal with third normal form is sufficient.

241
00:17:45.760 --> 00:17:55.930
And moreover the third normal form is a is an ideal a normal form for dealing with online transaction

242
00:17:55.960 --> 00:18:06.130
processing so all l t p applications and that have very high computation requires that you know input

243
00:18:06.130 --> 00:18:09.760
lots millions and millions of transactions into the databases.

244
00:18:09.870 --> 00:18:14.620
But we'll talk more about that in the Tauriel on pros and cons of normalization.

245
00:18:14.780 --> 00:18:22.150
But just I just wanted to congratulate you on you know learning about the third normal form because

246
00:18:22.150 --> 00:18:32.800
it is somewhat the pinnacle of a normalization of databases and it's a huge step in this pathway in

247
00:18:33.310 --> 00:18:39.650
learning about database design and structure so hopefully enjoyed today's tutorial and hopefully all

248
00:18:39.650 --> 00:18:40.520
of this makes sense.

249
00:18:40.540 --> 00:18:46.930
And again it is not it's all non-trivial stuff so go through it a couple times give it some time to

250
00:18:46.930 --> 00:18:54.850
sink in and eventually it'll become like second nature especially especially if you remember that mnemonic

251
00:18:55.240 --> 00:19:03.390
that Monica about the the key the whole key and nothing but the key.

252
00:19:03.520 --> 00:19:06.300
And on that note I'm going to end today's Tauriel.

253
00:19:06.370 --> 00:19:09.910
It was a fun one quite quite a long one but definitely worth it.

254
00:19:09.940 --> 00:19:11.440
And I look forward to seeing you next time.

255
00:19:11.440 --> 00:19:12.910
Until then happy analyzing.
