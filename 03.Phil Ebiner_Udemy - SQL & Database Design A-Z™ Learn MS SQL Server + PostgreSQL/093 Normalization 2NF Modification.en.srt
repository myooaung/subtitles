1
00:00:01,290 --> 00:00:03,730
Hello and welcome back to the course on databases.

2
00:00:03,750 --> 00:00:12,210
OK so now we've talked about why this table is not in the second normal form and today we're going to

3
00:00:12,600 --> 00:00:21,120
find out how we can split this table into several tables to make the design of this database conform

4
00:00:21,120 --> 00:00:22,520
to the second normal form.

5
00:00:22,530 --> 00:00:28,520
So this is the practical part of taking something to a second normal form.

6
00:00:28,590 --> 00:00:30,840
So let's get started.

7
00:00:30,840 --> 00:00:38,950
All right so here's our table and we're just going to start typing up the code that we want to see to

8
00:00:39,120 --> 00:00:41,660
fix fix the situation right.

9
00:00:41,850 --> 00:00:49,560
So the first thing we want to do is we want to separate these columns that we've identified that do

10
00:00:49,560 --> 00:00:53,690
not depend whole wholly or fully on the candidate.

11
00:00:53,700 --> 00:00:59,610
So the first name surname shipping state and loyalty discount those columns for columns they depend

12
00:00:59,610 --> 00:01:00,760
on the customer ID.

13
00:01:00,930 --> 00:01:02,130
So they need to be in a separate table.

14
00:01:02,130 --> 00:01:09,050
So let's go ahead and separate them out first then we're going to do is we're going to create a table.

15
00:01:09,360 --> 00:01:12,060
So we're going to create a new table TNP.

16
00:01:12,390 --> 00:01:17,370
It's going to be the name of our table and here we are going to do an interesting thing so we're going

17
00:01:17,370 --> 00:01:25,410
to create a table team he has and here we'll just type in the select statement for those calls.

18
00:01:25,440 --> 00:01:30,060
So we're going to select the customer id call him as well because we will need the customer ID in the

19
00:01:30,060 --> 00:01:34,140
new table so we're going to like 1 2 3 4 5 corms in total.

20
00:01:34,140 --> 00:01:56,700
So those go hand that select customer id comma first name last name shipping state and loyalty discount.

21
00:01:56,710 --> 00:02:03,450
All right so if we just run or obviously from transactions

22
00:02:06,390 --> 00:02:10,710
so if we just run this part we should just get those five columns.

23
00:02:10,750 --> 00:02:16,660
So OK so last Sundt last name is surname.

24
00:02:17,360 --> 00:02:20,720
So if we run these we should get those five columns.

25
00:02:20,730 --> 00:02:25,110
There we go so we just like to those phone calls two thousand four hundred fifty five rows and now we're

26
00:02:25,110 --> 00:02:29,820
going to run this whole part to create this new tables.

27
00:02:29,820 --> 00:02:30,820
Right so there we go.

28
00:02:30,840 --> 00:02:31,470
Everything is wrong.

29
00:02:31,470 --> 00:02:35,160
We can even put the common here three and three thousand four fifty five.

30
00:02:35,310 --> 00:02:44,270
And here I'll just comment this as separate customer specific columns.

31
00:02:44,270 --> 00:02:44,500
All right.

32
00:02:44,510 --> 00:02:45,860
Wonderful.

33
00:02:45,860 --> 00:02:52,790
Next what we're going to do is we want to make sure that this new table that we've created conforms

34
00:02:53,180 --> 00:02:55,170
to the second normal form right.

35
00:02:55,240 --> 00:03:02,630
So let's first deal with this new table so star from GMP.

36
00:03:02,750 --> 00:03:09,530
So if we look at this you'll actually see that there is a lot of duplicates in this table was that well

37
00:03:09,530 --> 00:03:17,390
because we don't have that many customers what is going on here is the customers have been purchasing

38
00:03:17,390 --> 00:03:18,510
several times.

39
00:03:18,620 --> 00:03:24,470
And therefore there were several there are several entries for every single customer in the Transactions

40
00:03:24,470 --> 00:03:28,820
table and all we've done is we've taken these calls from the transaction table and copied them into

41
00:03:29,210 --> 00:03:30,590
the tempy table.

42
00:03:30,590 --> 00:03:39,430
So it's natural that all of these customers have come across but they're they've got duplicate rows

43
00:03:39,430 --> 00:03:39,740
in here.

44
00:03:39,740 --> 00:03:43,620
So how do we fix that how do we get rid of the duplicate rows.

45
00:03:43,790 --> 00:03:45,780
Well it's pretty straightforward.

46
00:03:45,800 --> 00:03:51,140
That's exactly why we actually use the team table here so temporary table because now we're going to

47
00:03:51,290 --> 00:04:05,350
create the actual table the customer tables so we're going to say create table customers as Select Distinct

48
00:04:05,950 --> 00:04:09,430
star from team Pete.

49
00:04:09,470 --> 00:04:15,030
Right so here we're going to remove duplicates.

50
00:04:15,250 --> 00:04:16,490
We already know what the

51
00:04:19,720 --> 00:04:25,580
slug distinct works how it works if we run this part will tell us that there's only 942 rows.

52
00:04:25,630 --> 00:04:31,390
Right so there's only 142 customers here because every one of these rows is unique.

53
00:04:31,390 --> 00:04:34,210
This information is unique to a customer.

54
00:04:34,420 --> 00:04:41,650
And what we're doing here is we creating a table called customers as this result and the result here

55
00:04:41,650 --> 00:04:44,780
is only the distinct draws from the DMP table.

56
00:04:44,830 --> 00:04:56,530
This is like a little tip for you how to separate the table the columns and then also make it conform

57
00:04:56,560 --> 00:04:57,400
to.

58
00:04:57,790 --> 00:05:01,600
Well right now we just reboot moving duplicates we're making to conform to the first normal form so

59
00:05:02,140 --> 00:05:04,830
this table is not even in the first normal form.

60
00:05:04,900 --> 00:05:09,700
So here's an example finally of a table that's not in first normal form because it has duplicate has

61
00:05:09,700 --> 00:05:11,620
lots of duplicates in here.

62
00:05:12,310 --> 00:05:17,740
But now by removing the duplicate we've got a table that is.

63
00:05:18,070 --> 00:05:21,230
So here we're going to just say 900 for you.

64
00:05:21,400 --> 00:05:28,600
So now we're moving into play because we've got a table that does conform to the first normal form.

65
00:05:28,600 --> 00:05:36,460
Right so so Nexstar from customers on that you'll see nine hundred forty two rows total.

66
00:05:36,460 --> 00:05:38,940
And these are all of our unique customers.

67
00:05:39,460 --> 00:05:44,380
So this table conforms to the well it doesn't have a duplicate rows then we know that it doesn't have

68
00:05:44,650 --> 00:05:48,700
any cells that contain more than one values old values are Tolmach.

69
00:05:48,700 --> 00:05:51,490
That means this table is in the first normal form.

70
00:05:51,490 --> 00:05:56,290
Now we just want to check that it is in the second normal form because for the design of the database

71
00:05:56,290 --> 00:06:00,190
to conform or the schema to conform to the second normal form.

72
00:06:00,190 --> 00:06:03,150
All the tables have to conform to the second normal form.

73
00:06:03,310 --> 00:06:09,050
So let's go ahead and check that this table is in the second normal form.

74
00:06:09,400 --> 00:06:13,210
Well here what is our what is our

75
00:06:16,900 --> 00:06:17,550
candidate key.

76
00:06:17,560 --> 00:06:20,310
Our kind of the key is customer ID here for sure.

77
00:06:20,320 --> 00:06:24,470
Also you could argue that maybe first name and surname of the candidate.

78
00:06:24,670 --> 00:06:28,140
But it really it's not.

79
00:06:28,570 --> 00:06:36,730
It's not the case because you could have two people like Paul Allen and another Paul Allen who are different

80
00:06:36,730 --> 00:06:37,130
people.

81
00:06:37,150 --> 00:06:43,030
And in fact they could both actually even live in the same state and have the same loyalty discount

82
00:06:43,990 --> 00:06:47,900
and therefore no combination of these is actually a candidate key.

83
00:06:48,070 --> 00:06:51,530
The only candidate that we have here is the customer.

84
00:06:51,940 --> 00:06:56,110
And because the customer is the only candidate key.

85
00:06:56,260 --> 00:07:02,890
It is very easy to check the condition of the second roll from that every non-prime attributes all of

86
00:07:02,890 --> 00:07:09,000
these for each one of these depends on the whole of the candidate key on the whole of every candidate.

87
00:07:09,080 --> 00:07:10,670
Well we only have one candidate.

88
00:07:11,020 --> 00:07:13,300
And it only consists of one column.

89
00:07:13,300 --> 00:07:19,150
So you can split it up so as we know by default the condition the second the condition of the second

90
00:07:19,150 --> 00:07:20,680
normal form is met.

91
00:07:20,680 --> 00:07:26,030
Meaning that indeed all of these attributes depend on the whole of this candidate.

92
00:07:26,530 --> 00:07:29,360
And therefore this table is in the second normal form.

93
00:07:29,380 --> 00:07:33,600
So there we go we can just say confirmed

94
00:07:36,320 --> 00:07:38,710
or never confirmed.

95
00:07:38,790 --> 00:07:40,340
Wonderful.

96
00:07:40,440 --> 00:07:47,550
And now we want to move back to our previous table which we still have here so the transaction table

97
00:07:48,180 --> 00:07:49,310
the one we started off with.

98
00:07:49,310 --> 00:07:49,570
Right.

99
00:07:49,580 --> 00:07:50,280
So let's

100
00:07:52,980 --> 00:07:58,900
let's go back to the transactions table now.

101
00:07:59,730 --> 00:08:04,440
So if you run that you'll see that we still have those call them so we never remove them.

102
00:08:04,440 --> 00:08:05,760
We did copy them.

103
00:08:05,820 --> 00:08:10,110
We created a new table from these columns but we never removed them from here.

104
00:08:10,110 --> 00:08:11,870
So that's what we're going to do now.

105
00:08:11,890 --> 00:08:23,640
We're going to remove those calls right so remove customer specific columns but what we're going to

106
00:08:23,640 --> 00:08:30,710
do is we're going to but leave the customer ID field column.

107
00:08:30,720 --> 00:08:31,420
Why is that.

108
00:08:31,440 --> 00:08:40,100
Well because obviously we need that's the customer id call them here is our foreign key to join into

109
00:08:40,110 --> 00:08:44,070
the new table that we have to the customers but otherwise we're going to lose information if we remove

110
00:08:44,100 --> 00:08:45,380
all of these columns.

111
00:08:45,570 --> 00:08:49,890
All five of the columns then we will completely lose information about the customers we have to leave

112
00:08:49,890 --> 00:08:54,440
something and we need to leave the foreign keys something that we're going to use to match up.

113
00:08:54,440 --> 00:08:59,550
And so let's go and do this we know how to drop tables for Kolbe's from our table.

114
00:08:59,610 --> 00:09:07,010
We'll just say alter table transactions and here we can say drop.

115
00:09:07,020 --> 00:09:20,520
Call them first name then we'll just copy that and here will say surname.

116
00:09:20,530 --> 00:09:32,440
Next one is shipping state and the next one is loyalty discount.

117
00:09:32,460 --> 00:09:38,560
I just want to drop those four columns from all transactions table and run this completed successfully.

118
00:09:38,690 --> 00:09:43,430
And now we can simply select OK just run this again.

119
00:09:44,070 --> 00:09:45,990
Let's do this.

120
00:09:45,990 --> 00:09:53,660
If you look at this now there we go so we've got a much smaller transaction stable.

121
00:09:53,680 --> 00:09:59,350
There we go so we've got the transaction ID that timestamped the customer ID right.

122
00:09:59,350 --> 00:10:06,280
So again this is a this is a candidate key and then we've got the item that the customer purchased the

123
00:10:06,280 --> 00:10:13,840
description the retail price and based on our conclusions from the previous tutorial where were we were

124
00:10:13,840 --> 00:10:16,910
investigating if it's in second or not for a normal form or not.

125
00:10:17,080 --> 00:10:21,760
We've already checked these columns so we don't need to check again we already know that these columns

126
00:10:22,120 --> 00:10:24,740
do rely in full on this candidate.

127
00:10:24,750 --> 00:10:33,190
So you cannot just use part of his candidacy to identify the contents of these columns and therefore

128
00:10:33,520 --> 00:10:39,520
this table is an economic forum so we can just say to and have confirmed.

129
00:10:39,880 --> 00:10:40,360
There we go.

130
00:10:40,360 --> 00:10:43,450
Now all we have left to do is to drop this tempy table.

131
00:10:43,450 --> 00:10:51,400
We can either right click and select Delete drop or what else we can do is we can just go and say here

132
00:10:51,420 --> 00:10:54,610
drop table so it's good to clean up after yourself.

133
00:10:54,730 --> 00:10:59,860
Drub table tempy to avoid to avoid further confusion in the future.

134
00:10:59,860 --> 00:11:04,510
So just run that you refresh your and there you go.

135
00:11:04,510 --> 00:11:05,960
So we've got now two tables.

136
00:11:06,070 --> 00:11:14,050
So as you can see what we've achieved now is that from one transactions table we've redesigned our database

137
00:11:14,050 --> 00:11:20,020
to two tables transactions and customers for it to conform to the second normal form.

138
00:11:20,020 --> 00:11:28,600
And already this design is better for online transaction processing scenarios.

139
00:11:28,600 --> 00:11:30,140
So why is that better.

140
00:11:30,140 --> 00:11:35,150
Well because if you look here at so or less of their customers right.

141
00:11:35,290 --> 00:11:41,290
If we look at the customers we now have the customer separated in this table and we have all the information

142
00:11:41,290 --> 00:11:46,840
about them here and that means that when we're actually recording transactions that are coming in we

143
00:11:46,840 --> 00:11:52,230
don't have to record unnecessary information or we don't have to recall information about the customer

144
00:11:52,240 --> 00:12:00,200
name about the customer surname about their location about their discount because all of that is already

145
00:12:00,220 --> 00:12:01,440
stored in that other table.

146
00:12:01,450 --> 00:12:06,760
If we get a new customer we'll just updated once and then as they purchase new items all we're recording

147
00:12:06,760 --> 00:12:12,910
is item and all of this information about the items are recording record recording so more relevant

148
00:12:12,910 --> 00:12:16,960
information to the purchase and therefore we're saving space.

149
00:12:16,960 --> 00:12:22,360
So as you can see these transactions are coming in quite quickly sometimes several transactions per

150
00:12:22,360 --> 00:12:22,990
minute.

151
00:12:23,110 --> 00:12:26,920
We're selling space we're saving processing time we're saving resources.

152
00:12:27,050 --> 00:12:33,540
And overall it's a much better set up for writing information into a database.

153
00:12:33,550 --> 00:12:42,100
And that is exactly what how on OLTP on line transaction processing databases are or should be designed

154
00:12:42,970 --> 00:12:44,330
so that it was our first step.

155
00:12:44,320 --> 00:12:50,770
The second normal form next in this section we're going to discuss this third normal form code next

156
00:12:50,770 --> 00:12:51,120
time.

157
00:12:51,130 --> 00:12:52,600
Until then happy analyzing.
