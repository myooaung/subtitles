1
00:00:03,994 --> 00:00:06,384
What I'd like to now is take you through some of the

2
00:00:06,384 --> 00:00:11,087
database code in the sample application and talk about how

3
00:00:11,087 --> 00:00:12,998
some of these things are laid out.

4
00:00:12,998 --> 00:00:15,250
I know we've kind of dug into this a little bit,

5
00:00:15,250 --> 00:00:19,822
but I want to take a moment to sort of step you through the key

6
00:00:19,822 --> 00:00:25,612
bits that make this go in our TodoMVC application.

7
00:00:25,612 --> 00:00:30,163
So, the first thing I'm going to point out is this file,

8
00:00:30,163 --> 00:00:36,176
the sequelizerc dot file at the top level of the directory.

9
00:00:36,176 --> 00:00:36,649
So,

10
00:00:36,649 --> 00:00:42,864
when you're using the Sequelize CLI to execute commands in your dev environment,

11
00:00:42,864 --> 00:00:48,522
this file configures some of the key bits about that experience,

12
00:00:48,522 --> 00:00:53,654
like where your database configuration is going to live,

13
00:00:53,654 --> 00:00:57,688
when the CLI tool generates migrations, where it's going to put those migrations,

14
00:00:57,688 --> 00:01:01,367
and where it's going to look for models that have been

15
00:01:01,367 --> 00:01:05,202
defined or that will be defined using the CLI.

16
00:01:05,202 --> 00:01:09,342
So this file is there for when you do execute those Sequelize

17
00:01:09,342 --> 00:01:11,868
CLI commands at the top-level directory.

18
00:01:11,868 --> 00:01:15,516
It's going to take these settings into effect.

19
00:01:15,516 --> 00:01:21,742
The other places where you'll find like database related logic in

20
00:01:21,742 --> 00:01:27,353
the application is here in the db directory.

21
00:01:27,353 --> 00:01:30,312
Sequelize requires like database configuration to be

22
00:01:30,312 --> 00:01:32,919
specified in kind of a specific way,

23
00:01:32,919 --> 00:01:35,933
which is kind of incongruent with how we're doing

24
00:01:35,933 --> 00:01:37,569
configuration elsewhere in the app.

25
00:01:37,569 --> 00:01:39,205
So we have this database.

26
00:01:39,205 --> 00:01:39,859
js file,

27
00:01:39,859 --> 00:01:43,569
which spoon feeds Sequelize configuration in the

28
00:01:43,569 --> 00:01:47,279
format in which it is more comfortable.

29
00:01:47,279 --> 00:01:51,908
So we actually read in the real configuration values from our

30
00:01:51,908 --> 00:01:55,360
config setup as we've been doing already so far,

31
00:01:55,360 --> 00:01:57,769
but then we populate these things,

32
00:01:57,769 --> 00:02:03,938
like the databaseUrl and the dialect that we use for Sequelize here.

33
00:02:03,938 --> 00:02:06,125
The other bit you'll notice is the migration's folder.

34
00:02:06,125 --> 00:02:10,222
So this is where when you generate a new model or you generate a new migration,

35
00:02:10,222 --> 00:02:15,201
which mutates the state of a database from one state to another,

36
00:02:15,201 --> 00:02:18,924
those files are going to be generated here.

37
00:02:18,924 --> 00:02:23,357
Much like other migration systems that you might've used in other environments,

38
00:02:23,357 --> 00:02:30,044
a migration file name is built of a couple different bits.

39
00:02:30,044 --> 00:02:32,437
The first is a timestamp,

40
00:02:32,437 --> 00:02:37,268
which is the actual identifier of record for this migration,

41
00:02:37,268 --> 00:02:42,279
and this is how the Sequelize, or the ORM engine,

42
00:02:42,279 --> 00:02:45,195
knows which migrations have been applied and which

43
00:02:45,195 --> 00:02:47,017
migrations have not been applied.

44
00:02:47,017 --> 00:02:50,269
So this is important and is generated by the --- by

45
00:02:50,269 --> 00:02:52,796
Sequelize when you create a new migration.

46
00:02:52,796 --> 00:02:56,077
And then the second part is simply descriptive.

47
00:02:56,077 --> 00:03:00,791
So create-todo could be any string, you know, fluffy bunny one, two, three.

48
00:03:00,791 --> 00:03:02,141
It doesn't really matter.

49
00:03:02,141 --> 00:03:06,057
It should be descriptive to say what the migration is about,

50
00:03:06,057 --> 00:03:09,709
so second part of the migration is for humans.

51
00:03:09,709 --> 00:03:17,387
And every migration exports a JavaScript object that has two functions on it.

52
00:03:17,387 --> 00:03:20,178
One is called up, and the other is called down.

53
00:03:20,178 --> 00:03:23,459
So when we are migrating the database to the next version,

54
00:03:23,459 --> 00:03:25,834
the up function is called,

55
00:03:25,834 --> 00:03:30,094
and that function is passed a Sequelize query interface,

56
00:03:30,094 --> 00:03:36,629
which has methods that let you create tables or add columns to existing tables.

57
00:03:36,629 --> 00:03:40,804
So as you're mutating the data model over time,

58
00:03:40,804 --> 00:03:46,915
you'll be able to specify these functions to go up and down.

59
00:03:46,915 --> 00:03:50,861
So here, right now this application only has one migration,

60
00:03:50,861 --> 00:03:55,626
but all of you are going to change that in just a little while by

61
00:03:55,626 --> 00:03:58,540
adding --- updating the data model a little bit.

62
00:03:58,540 --> 00:04:02,786
So we're creating a new table called Todos for our todo items,

63
00:04:02,786 --> 00:04:06,327
and then we're also specifying the down command so when

64
00:04:06,327 --> 00:04:09,297
we're rolling back this migration we're just going to

65
00:04:09,297 --> 00:04:11,477
drop the table that we created.

66
00:04:11,477 --> 00:04:15,166
So, when you generate migrations to update the data model,

67
00:04:15,166 --> 00:04:18,751
you'll be using these migration files to do it.

68
00:04:18,751 --> 00:04:23,685
Now the other place where you'll run into database code in

69
00:04:23,685 --> 00:04:27,404
the application is in the models folder.

70
00:04:27,404 --> 00:04:31,332
And there's a couple things that happen here which are

71
00:04:31,332 --> 00:04:36,185
kind of a twist on like how you'll see things structured

72
00:04:36,185 --> 00:04:38,061
in the Sequelize documentation.

73
00:04:38,061 --> 00:04:40,924
So, this file, db.

74
00:04:40,924 --> 00:04:47,365
js, creates a single instance of a Sequelize object,

75
00:04:47,365 --> 00:04:54,066
and that Sequelize object takes in the constructor a Postgres databaseUrl that

76
00:04:54,066 --> 00:04:58,634
will have the username and password embedded inside of it.

77
00:04:58,634 --> 00:05:01,695
So this is where we're authenticating against the database,

78
00:05:01,695 --> 00:05:05,826
and we're also passing in the options for that connection to the database,

79
00:05:05,826 --> 00:05:10,403
which we're loading in from our configuration.

80
00:05:10,403 --> 00:05:11,891
And in our case,

81
00:05:11,891 --> 00:05:15,698
the configuration that we're passing in is pretty much

82
00:05:15,698 --> 00:05:19,847
the defaults that Sequelize provides.

83
00:05:19,847 --> 00:05:23,143
The development Postgres URL is configured here,

84
00:05:23,143 --> 00:05:26,883
and these database options are arguments to the Sequelize

85
00:05:26,883 --> 00:05:30,368
constructor saying we want to use the Postgres dialect,

86
00:05:30,368 --> 00:05:34,885
we don't want --- by default we don't want to log

87
00:05:34,885 --> 00:05:38,004
every SQL statement out the console,

88
00:05:38,004 --> 00:05:41,281
although in the development environment you can see that we

89
00:05:41,281 --> 00:05:45,571
actually override that and say yes we do want to log SQL

90
00:05:45,571 --> 00:05:47,639
statements out to the console.

91
00:05:47,639 --> 00:05:52,942
And then we also configure Sequelize's connection pool,

92
00:05:52,942 --> 00:05:59,668
which specifies how long a connection is held that's

93
00:05:59,668 --> 00:06:02,924
idle before it's deleted from the pool,

94
00:06:02,924 --> 00:06:05,877
and then the maximum number and the minimum number of concurrent

95
00:06:05,877 --> 00:06:08,038
connections to the database that are allowed,

96
00:06:08,038 --> 00:06:13,206
and those are the default values for Sequelize which you can tune to

97
00:06:13,206 --> 00:06:19,076
your requirements if you feel that is necessary.

98
00:06:19,076 --> 00:06:19,470
So,

99
00:06:19,470 --> 00:06:25,175
this database object is used to define all the other models in our application,

100
00:06:25,175 --> 00:06:28,636
and right now there's only one.

101
00:06:28,636 --> 00:06:33,944
We have a Todo model where again we're going to be requiring the

102
00:06:33,944 --> 00:06:37,649
Sequelize module because we're going to need some class-level

103
00:06:37,649 --> 00:06:40,610
variables off of that as we define the model,

104
00:06:40,610 --> 00:06:43,844
and here we're going to create a new model.

105
00:06:43,844 --> 00:06:47,797
And right now the only attribute we're adding is title,

106
00:06:47,797 --> 00:06:51,211
although the models by default also have an ID,

107
00:06:51,211 --> 00:06:54,968
which is an auto-incrementing primary key in the database,

108
00:06:54,968 --> 00:07:00,876
and it also has a created at and an updated at timestamp,

109
00:07:00,876 --> 00:07:04,068
which is added automatically by Sequelize.

110
00:07:04,068 --> 00:07:05,826
So, we export that model object,

111
00:07:05,826 --> 00:07:10,070
and then that model object is what we use elsewhere in our

112
00:07:10,070 --> 00:07:13,868
application to actually do queries and update data.

113
00:07:13,868 --> 00:07:18,483
So, here in the todos controller we require that model,

114
00:07:18,483 --> 00:07:23,454
and when we fetch all Todos we use the query interface attached to the

115
00:07:23,454 --> 00:07:27,702
model to find all the Todos with a certain limit,

116
00:07:27,702 --> 00:07:30,440
and then we can findById, create,

117
00:07:30,440 --> 00:07:37,281
and destroy and do all those other operations within our backend API here.

118
00:07:37,281 --> 00:07:44,518
So, this is the, kind of the interface that we have put together.

119
00:07:44,518 --> 00:07:50,003
We're going to be expanding on this data model a little bit with a migration.

120
00:07:50,003 --> 00:07:54,972
Some of the gotchas to be aware of here,

121
00:07:54,972 --> 00:08:00,636
so rather than something like Active Record where this sort of canonical

122
00:08:00,636 --> 00:08:06,813
source of truth about the current state of the model and the properties

123
00:08:06,813 --> 00:08:09,916
that its supports lives in the database.

124
00:08:09,916 --> 00:08:13,549
In the model itself, you don't actually configure what all the properties are.

125
00:08:13,549 --> 00:08:17,309
Like you might configure validations and other logic about the model,

126
00:08:17,309 --> 00:08:20,002
but you don't sort of enumerate here are all the

127
00:08:20,002 --> 00:08:22,040
properties that are a part of the model.

128
00:08:22,040 --> 00:08:24,254
In Sequelize, you actually do have to do that.

129
00:08:24,254 --> 00:08:29,304
So as you're creating migrations that mutate the state of the

130
00:08:29,304 --> 00:08:31,730
underlying tables that back your models,

131
00:08:31,730 --> 00:08:35,598
you'll have to keep that in sync with what is

132
00:08:35,598 --> 00:08:37,760
actually defined here in the model.

133
00:08:37,760 --> 00:08:42,348
So if you create a migration that adds a property to a model,

134
00:08:42,348 --> 00:08:45,899
you'll have to make sure to add that same property

135
00:08:45,899 --> 00:08:47,674
here in your model declaration.

136
00:08:47,674 --> 00:08:51,172
So one thing that is potentially somewhat onerous,

137
00:08:51,172 --> 00:08:54,190
it's that way in other ORM systems, but again,

138
00:08:54,190 --> 00:08:55,712
if you're coming from Active Record,

139
00:08:55,712 --> 00:09:00,083
that might be a little different than what you're used to.

140
00:09:00,083 --> 00:09:04,282
Now the --- when we had you set up your development environment,

141
00:09:04,282 --> 00:09:08,887
the two command line utilities that you set up were

142
00:09:08,887 --> 00:09:12,754
the Sequelize CLI and the Grunt CLI.

143
00:09:12,754 --> 00:09:15,240
We installed those globally.

144
00:09:15,240 --> 00:09:28,606
So the Sequelize command line utility, if you just run sequelize --help,

145
00:09:28,606 --> 00:09:34,292
you'll see all the different generators and other options

146
00:09:34,292 --> 00:09:36,809
that the command line interface gives you.

147
00:09:36,809 --> 00:09:39,322
And the help text is actually pretty good.

148
00:09:39,322 --> 00:09:44,126
Like that's where I go to a lot to see what is going to be

149
00:09:44,126 --> 00:09:46,488
possible with the command line utility.

150
00:09:46,488 --> 00:09:50,530
Most of the commands have some decent help text that show

151
00:09:50,530 --> 00:09:52,603
you how to use these different commands,

152
00:09:52,603 --> 00:09:57,527
actually give you some examples of how to generate models of various kinds.

153
00:09:57,527 --> 00:09:58,988
So as you're kind of exploring this,

154
00:09:58,988 --> 00:10:03,700
I would definitely recommend that you take advantage of these help operations.

155
00:10:03,700 --> 00:10:07,519
So for example, for model:create,

156
00:10:07,519 --> 00:10:15,180
which I suspect is something that you're going to be interested in,

157
00:10:15,180 --> 00:10:22,211
sequelize, and then we can just basically append help to the beginning of that,

158
00:10:22,211 --> 00:10:28,204
that's going to actually show you the commands that you pass in to

159
00:10:28,204 --> 00:10:31,713
generate like say a user model with certain attributes,

160
00:10:31,713 --> 00:10:35,037
and it'll show you like the actual JavaScript that'll

161
00:10:35,037 --> 00:10:38,789
get spat out by that command as well.

162
00:10:38,789 --> 00:10:39,268
So,

163
00:10:39,268 --> 00:10:44,053
definitely make use of those help texts as you're going

164
00:10:44,053 --> 00:10:47,509
through and doing stuff with the ORM.

165
00:10:47,509 --> 00:10:55,843
The other bit that you'll want to take advantage of while you're hacking on

166
00:10:55,843 --> 00:11:01,815
it is the Sequelize documentation posted on Read the Docs.

167
00:11:01,815 --> 00:11:02,281
Specifically,

168
00:11:02,281 --> 00:11:07,482
I'll point you to the migrations documentation because we will be

169
00:11:07,482 --> 00:11:11,657
looking at expanding on our model a little bit.

170
00:11:11,657 --> 00:11:14,826
So you're going to be generating migration,

171
00:11:14,826 --> 00:11:18,114
updating the model, running the migration,

172
00:11:18,114 --> 00:11:23,561
and enhancing what the application is --- or what the model is capable of.

173
00:11:23,561 --> 00:11:29,422
So, definitely will be a resource worth consulting.

174
00:11:29,422 --> 00:11:29,786
So,

175
00:11:29,786 --> 00:11:35,242
are there any questions right away about Sequelize and kind of how it

176
00:11:35,242 --> 00:11:43,972
fits into this application or other general questions?

177
00:11:43,972 --> 00:11:48,996
Obviously, there's a lot to learn about the Sequelize API,

178
00:11:48,996 --> 00:11:53,292
which is why we're going to start off with a task that will get

179
00:11:53,292 --> 00:11:58,528
you familiar with that by actually wrestling with a real task

180
00:11:58,528 --> 00:12:02,763
rather than putting a bunch of method names in slides that none

181
00:12:02,763 --> 00:12:04,063
of you will remember.

182
00:12:04,063 --> 00:12:12,000
I'm going to be giving you a task that will require acquiring an operational knowledge of how this ORM works.

