WEBVTT
1
00:00:04.457 --> 00:00:07.886
Now what I'd like you to do is we'll take at least a half hour

2
00:00:07.886 --> 00:00:11.975
this time because this is going to be a little bit trickier than

3
00:00:11.975 --> 00:00:15.758
both of these issues that we had before,

4
00:00:15.758 --> 00:00:19.303
which is updating the client-side code in our

5
00:00:19.303 --> 00:00:22.714
application in a couple of key ways.

6
00:00:22.714 --> 00:00:29.718
The GitHub issues for this are tagged as Exercise 6 and the two

7
00:00:29.718 --> 00:00:35.188
that I will ask of you are a couple meatier tasks.

8
00:00:35.188 --> 00:00:39.417
The first is to actually start persisting the completed status of a todo

9
00:00:39.417 --> 00:00:44.525
item using the REST API that we've set up on the back-end.

10
00:00:44.525 --> 00:00:47.439
Now, if you remember, we, yesterday,

11
00:00:47.439 --> 00:00:51.083
updated our application to accept a completed

12
00:00:51.083 --> 00:00:54.728
attribute in addition to the title.

13
00:00:54.728 --> 00:00:57.863
So our API and our back-end is fully set up to support this,

14
00:00:57.863 --> 00:01:02.023
but our front-end still doesn't do anything about this.

15
00:01:02.023 --> 00:01:06.317
So, our task would be to update the Vue.

16
00:01:06.317 --> 00:01:12.747
js application to persist that completed attribute, as well as the title.

17
00:01:12.747 --> 00:01:14.532
So that would be issue number 1.

18
00:01:14.532 --> 00:01:17.639
And then issue number 2, if you get through that,

19
00:01:17.639 --> 00:01:25.003
is to use some data binding features in Vue to add a feature to

20
00:01:25.003 --> 00:01:28.375
the application which it doesn't have today.

21
00:01:28.375 --> 00:01:34.681
The concept I had was adding a light and a dark theme to the todo list.

22
00:01:34.681 --> 00:01:39.837
So, what I'd like to do is like maybe underneath the todo list add a UI element,

23
00:01:39.837 --> 00:01:43.018
which is essentially a chooser of some kind which will let

24
00:01:43.018 --> 00:01:46.789
the user switch between a light theme and a dark theme for

25
00:01:46.789 --> 00:01:48.821
the CSS on the todo list.

26
00:01:48.821 --> 00:01:51.870
So the way that I imagine this will work,

27
00:01:51.870 --> 00:01:54.322
although feel free to riff if you would like,

28
00:01:54.322 --> 00:01:58.446
is that there will be some component, some HTML,

29
00:01:58.446 --> 00:02:03.887
links, or radio buttons, or whatever, underneath the todo list,

30
00:02:03.887 --> 00:02:05.510
you click one of them,

31
00:02:05.510 --> 00:02:09.581
and it will either toggle between like a light and a dark

32
00:02:09.581 --> 00:02:14.024
by adding a CSS class to the container element for the

33
00:02:14.024 --> 00:02:16.042
entire TODO list application.

34
00:02:16.042 --> 00:02:21.403
Then you'll also have to write the CSS to power a

35
00:02:21.403 --> 00:02:23.840
different theme for the application.

36
00:02:23.840 --> 00:02:26.201
So, whether it's a different background color,

37
00:02:26.201 --> 00:02:27.780
different fonts, or whatever,

38
00:02:27.780 --> 00:02:31.853
adding an alternate theme to the TODO list application.

39
00:02:31.853 --> 00:02:36.820
For bonus points, if you want to, after the user selects a theme,

40
00:02:36.820 --> 00:02:40.948
save that in local storage as a user preference.

41
00:02:40.948 --> 00:02:43.815
That I think would also be a pretty nifty feature.

42
00:02:43.815 --> 00:02:49.614
So, you can peel off whichever of those you feel is more interesting,

43
00:02:49.614 --> 00:02:53.732
or do both of them, which would be even better.

44
00:02:53.732 --> 00:02:57.316
And as I said, I think we'll take at least a half hour to work through those,

45
00:02:57.316 --> 00:03:00.005
as for many of you this will be the first time that you're

46
00:03:00.005 --> 00:03:05.010
really digging into Vue in any great detail.

47
00:03:05.010 --> 00:03:08.037
So take some time and see if you can knock out one of those.

48
00:03:08.037 --> 00:03:10.022
If you only choose one,

49
00:03:10.022 --> 00:03:14.683
the REST API one might be the more instructive of the two.

50
00:03:14.683 --> 00:03:17.581
But if you get through that pretty easily,

51
00:03:17.581 --> 00:03:20.464
the light/dark theme will introduce you to a few more features of

52
00:03:20.464 --> 00:03:24.503
Vue that you wouldn't be exposed to otherwise.

53
00:03:24.503 --> 00:03:26.365
A couple of questions.

54
00:03:26.365 --> 00:03:30.555
What's this in the scope of the Vue object?

55
00:03:30.555 --> 00:03:35.750
This is going to be the Vue component object itself.

56
00:03:35.750 --> 00:03:42.822
So the actual instance of the Vue component.

57
00:03:42.822 --> 00:03:47.327
That's what this is, and also incidentally,

58
00:03:47.327 --> 00:03:56.303
it's why when in our handler code, so if we look at the Vue here,

59
00:03:56.303 --> 00:04:02.284
we don't usually for the methods use the arrow syntax for the function

60
00:04:02.284 --> 00:04:06.941
here because we want Vue to be able to set this in the scope of the

61
00:04:06.941 --> 00:04:10.564
function to refer to the actual component instance.

62
00:04:10.564 --> 00:04:16.272
So, yeah, this refers to the actual Vue component instance.

63
00:04:16.272 --> 00:04:22.091
The other question was is Vue the primary framework we use at Twilio?

64
00:04:22.091 --> 00:04:26.908
My team does use Vue in our little chunk,

65
00:04:26.908 --> 00:04:29.633
but it's not the only framework in use at Twilio.

66
00:04:29.633 --> 00:04:31.922
Like in the developer console,

67
00:04:31.922 --> 00:04:37.102
they are now just like starting to introduce a lot of React stuff.

68
00:04:37.102 --> 00:04:40.694
There's also a lot of handwritten JavaScript in there.

69
00:04:40.694 --> 00:04:49.250
But the two primary ones in use that I know of are Vue and React at this point.

70
00:04:49.250 --> 00:04:53.352
We're the only ones using Vue though, probably because of me.

71
00:04:53.352 --> 00:04:59.000
But yeah, a lot more of Twilio is now being written in React as well on the front-end.

