WEBVTT
1
00:00:04.776 --> 00:00:07.517
So, we're going to go in here,

2
00:00:07.517 --> 00:00:12.735
into our configuration --- software configuration and our RDS_CONNECTION_URL,

3
00:00:12.735 --> 00:00:18.104
and we're going to create a Postgres connection string just

4
00:00:18.104 --> 00:00:21.090
like we have been for local development,

5
00:00:21.090 --> 00:00:27.002
only this the one that we're going to use in production.

6
00:00:27.002 --> 00:00:31.282
Our username is going to be awsuser, awspassword,

7
00:00:31.282 --> 00:00:39.667
and that's going to be at the URL for that RDS instance that we just saw,

8
00:00:39.667 --> 00:00:46.604
and then /todos is going to be the name of the database.

9
00:00:46.604 --> 00:00:48.396
We'll hit Apply.

10
00:00:48.396 --> 00:00:51.930
And now we should have the necessary environment

11
00:00:51.930 --> 00:00:56.854
configuration to actually get this bad boy going.

12
00:00:56.854 --> 00:01:01.915
So once this environment update is complete,

13
00:01:01.915 --> 00:01:14.183
we're going to do the penultimate step, which is an eb deploy.

14
00:01:14.183 --> 00:01:19.224
So be ready to do that here in a just a minute.

15
00:01:19.224 --> 00:01:30.182
So with the environment updating, we can't actually kick off a deploy.

16
00:01:30.182 --> 00:01:35.557
And we can see that right now the application has not

17
00:01:35.557 --> 00:01:37.304
been successfully deployed yet,

18
00:01:37.304 --> 00:01:41.498
so we can't see anything on our Elastic Beanstalk instance.

19
00:01:41.498 --> 00:01:45.063
A couple of questions are coming in here.

20
00:01:45.063 --> 00:01:48.499
Where's the best and safest place to have Elastic Beanstalk pull

21
00:01:48.499 --> 00:01:53.562
in the AWS access key and secret access key?

22
00:01:53.562 --> 00:01:56.757
When you go through the eb init process,

23
00:01:56.757 --> 00:02:02.177
it's going to actually save your access key and secret in a

24
00:02:02.177 --> 00:02:05.601
DOT file like in your home directory,

25
00:02:05.601 --> 00:02:10.614
and that's generally speaking where I --- it's where like everybody who

26
00:02:10.614 --> 00:02:14.310
deploys to Elastic Beanstalk on our team keeps it,

27
00:02:14.310 --> 00:02:15.542
in like a.

28
00:02:15.542 --> 00:02:22.667
aws directory essentially in your home directory, so that's where that goes.

29
00:02:22.667 --> 00:02:23.349
And the next question,

30
00:02:23.349 --> 00:02:26.655
is it safe to put the db username and password in an EC2

31
00:02:26.655 --> 00:02:28.792
environment variable for production?

32
00:02:28.792 --> 00:02:33.848
If you've configured your RDS instance to not accept

33
00:02:33.848 --> 00:02:37.511
traffic from the outside as we have,

34
00:02:37.511 --> 00:02:44.188
like it's not possible to connect to the database outside of the current VPC.

35
00:02:44.188 --> 00:02:49.876
In which case it's not the end of the world to have the

36
00:02:49.876 --> 00:02:52.392
connection string as an environment variable,

37
00:02:52.392 --> 00:02:59.556
but what we typically do is --- like there's a way to

38
00:02:59.556 --> 00:03:05.106
store secure credentials in a S3 bucket and then load

39
00:03:05.106 --> 00:03:07.828
them into the system environment.

40
00:03:07.828 --> 00:03:11.937
So rather than like managing it through the administrative interface directly,

41
00:03:11.937 --> 00:03:18.374
you could pull in credential information from a S3 bucket so that it's

42
00:03:18.374 --> 00:03:21.494
not accessible directly through the console interface.

43
00:03:21.494 --> 00:03:23.502
So there's different ways to approach that.

44
00:03:23.502 --> 00:03:26.771
This is probably --- again, because it's not publicly accessible,

45
00:03:26.771 --> 00:03:28.273
it's not the end of the world,

46
00:03:28.273 --> 00:03:33.355
but probably the best place to do it is in a S3 bucket like in

47
00:03:33.355 --> 00:03:38.084
an XML or JSON file or something like that.

48
00:03:38.084 --> 00:03:39.782
Then it will read those in from your application.

49
00:03:39.782 --> 00:03:44.468
Alright, so now our environment is actually in a decent state,

50
00:03:44.468 --> 00:03:46.331
so now we've actually npm install.

51
00:03:46.331 --> 00:03:53.778
I think we still need to do grunt collect_static to get everything ready to go.

52
00:03:53.778 --> 00:03:58.459
Now we can do an eb deploy,

53
00:03:58.459 --> 00:04:05.137
and that's going to package up all of the application

54
00:04:05.137 --> 00:04:10.416
logic in our directory to a zip file.

55
00:04:10.416 --> 00:04:12.825
It's going to create a new application version,

56
00:04:12.825 --> 00:04:15.699
which we can see through the administrative interface,

57
00:04:15.699 --> 00:04:20.397
and ultimately it's going to deploy that new version of

58
00:04:20.397 --> 00:04:23.009
the application to our instances.

59
00:04:23.009 --> 00:04:29.432
And what we saw before --- what they're going to do once the application

60
00:04:29.432 --> 00:04:35.419
version has been deployed is run these commands that we set up.

61
00:04:35.419 --> 00:04:38.687
So we have a npm prestart command,

62
00:04:38.687 --> 00:04:42.769
which is going to run our migrations against the database.

63
00:04:42.769 --> 00:04:45.677
So if there's any available migrations to run,

64
00:04:45.677 --> 00:04:50.039
those will get run prior to the application being deployed.

65
00:04:50.039 --> 00:04:56.235
And then we have a start command which will run our server process and start

66
00:04:56.235 --> 00:05:01.821
listening for inbound connections on the configured HTTP port.

67
00:05:01.821 --> 00:05:06.826
So, if all goes according to plan,

68
00:05:06.826 --> 00:05:20.628
we should have a new version to look at here in a few minutes.

69
00:05:20.628 --> 00:05:34.180
Alright, so I'm afraid to look, but that looks like --- suspiciously like a todo,

70
00:05:34.180 --> 00:05:39.588
and it seems like we are successfully running an

71
00:05:39.588 --> 00:05:42.691
application in production on Elastic Beanstalk.

72
00:05:42.691 --> 00:05:45.267
Did you get up there and add some?

73
00:05:45.267 --> 00:05:46.233
Good for you.

74
00:05:46.233 --> 00:05:47.328
Good looking out.

75
00:05:47.328 --> 00:05:52.074
So now we have our RDS instance connected to all of our EC2

76
00:05:52.074 --> 00:05:54.269
instances in the same security group.

77
00:05:54.269 --> 00:05:59.652
We have an Elastic Load Balancer, which is what this URL is pointing to,

78
00:05:59.652 --> 00:06:03.209
is accepting traffic from the outside world,

79
00:06:03.209 --> 00:06:09.011
and it is routing it to all the instances in our

80
00:06:09.011 --> 00:06:10.641
Elastic Beanstalk configuration,

81
00:06:10.641 --> 00:06:17.640
and our Elastic Beanstalk again is talking back and forth with a RDS database.

82
00:06:17.640 --> 00:06:26.515
So, that's all it takes to deploy an application on Elastic Beanstalk,

83
00:06:26.515 --> 00:06:33.008
but the good part is once you get all of this set up,

84
00:06:33.008 --> 00:06:37.959
really all you're going to be doing going forward is eb deploy.

85
00:06:37.959 --> 00:06:42.483
Like you're going to be zipping up your application into an archive,

86
00:06:42.483 --> 00:06:44.556
you're going to be deploying a new version,

87
00:06:44.556 --> 00:06:49.003
the new version will get installed on all your instances,

88
00:06:49.003 --> 00:06:54.675
and you can sort of go about your business.

89
00:06:54.675 --> 00:07:00.986
There are ways to do a lot of the things that we did manually via API,

90
00:07:00.986 --> 00:07:06.386
but I wanted to go through kind of all the different steps so you could

91
00:07:06.386 --> 00:07:14.067
understand hopefully a little better what it's going to take to actually get

92
00:07:14.067 --> 00:07:17.824
a new environment provisioned on Elastic Beanstalk.

93
00:07:17.824 --> 00:07:18.560
Phil asks,

94
00:07:18.560 --> 00:07:21.504
do you recommend having a staging environment before

95
00:07:21.504 --> 00:07:24.973
going to a production environment on AWS?

96
00:07:24.973 --> 00:07:25.490
Absolutely!

97
00:07:25.490 --> 00:07:26.546
You definitely want to do that.

98
00:07:26.546 --> 00:07:30.477
So right now we only have one environment that we can push to,

99
00:07:30.477 --> 00:07:34.078
but it's possible to deploy to multiple environments.

100
00:07:34.078 --> 00:07:40.014
So it's definitely good to verify your changes in a stage environment as

101
00:07:40.014 --> 00:07:42.709
we definitely always do prior going to production.

102
00:07:42.709 --> 00:07:47.920
The other thing that's actually kind of nifty about Elastic

103
00:07:47.920 --> 00:07:52.684
Beanstalk is you have the ability to blue-green deploys.

104
00:07:52.684 --> 00:07:56.756
So you can deploy your application code to an environment,

105
00:07:56.756 --> 00:07:59.047
which is essentially the standby environment,

106
00:07:59.047 --> 00:08:04.441
you can validate that everything is good to go in that environment,

107
00:08:04.441 --> 00:08:11.264
and then in the administrative interface or via API you can

108
00:08:11.264 --> 00:08:14.516
actually change this public-facing URL.

109
00:08:14.516 --> 00:08:18.566
You can swap URLs with another environment.

110
00:08:18.566 --> 00:08:22.189
So you can with 0 downtime just convert to another

111
00:08:22.189 --> 00:08:25.441
environment that's already been deployed and verified to

112
00:08:25.441 --> 00:08:27.987
work like directly through the interface,

113
00:08:27.987 --> 00:08:29.746
which is actually rad.

114
00:08:29.746 --> 00:08:34.466
We didn't actually take advantage of that because we don't have

115
00:08:34.466 --> 00:08:39.677
access to the console because when you work in a large

116
00:08:39.677 --> 00:08:43.649
organization things can be pretty locked down.

117
00:08:43.649 --> 00:08:46.481
But it's something that we'd like to explore doing because it's

118
00:08:46.481 --> 00:08:52.584
definitely something that can be done via API as well.

119
00:08:52.584 --> 00:08:54.539
Going into the dashboard here,

120
00:08:54.539 --> 00:08:59.453
let me just point out a few bits in the administrative interface

121
00:08:59.453 --> 00:09:02.970
for Elastic Beanstalk that might be useful.

122
00:09:02.970 --> 00:09:07.498
In the --- with all of your applications,

123
00:09:07.498 --> 00:09:13.998
there's multiple potential versions of the application that could be deployed.

124
00:09:13.998 --> 00:09:20.461
So, if I'm at this level looking at my todomvc-plusplus application,

125
00:09:20.461 --> 00:09:23.446
I can see all the environments that are running this application,

126
00:09:23.446 --> 00:09:27.479
and I can also say see all the application versions.

127
00:09:27.479 --> 00:09:33.271
So this is the current version of the application that's deployed to production,

128
00:09:33.271 --> 00:09:38.231
so you can see it's currently deployed to this environment.

129
00:09:38.231 --> 00:09:44.396
And I can deploy past versions of the application.

130
00:09:44.396 --> 00:09:46.881
This is how you would do a rollback like if

131
00:09:46.881 --> 00:09:49.353
something --- if some stuff hit the fan.

132
00:09:49.353 --> 00:09:54.431
You could roll back to a previous deployed version of the application.

133
00:09:54.431 --> 00:10:00.271
So there are a few things you can do here.

134
00:10:00.271 --> 00:10:01.945
In the environment configuration,

135
00:10:01.945 --> 00:10:06.427
there's also a few bits that are worth calling out.

136
00:10:06.427 --> 00:10:07.979
The log interface,

137
00:10:07.979 --> 00:10:14.024
you can actually view the last 100 lines of the logs

138
00:10:14.024 --> 00:10:16.966
directly within the administrative interface,

139
00:10:16.966 --> 00:10:20.964
but we also have this eb logs, oops,

140
00:10:20.964 --> 00:10:26.353
eb logs command that we can run from the command line interface,

141
00:10:26.353 --> 00:10:32.018
which will give us the last 100 lines of a couple of different logs.

142
00:10:32.018 --> 00:10:35.867
It'll give us the output from our Node.

143
00:10:35.867 --> 00:10:37.406
js application,

144
00:10:37.406 --> 00:10:45.697
and it'll also give us like the logs from the deployment

145
00:10:45.697 --> 00:10:50.447
commands that are happening on our EC2 instances.

146
00:10:50.447 --> 00:11:00.491
So here we have --- we can see the output of our var migrations,

147
00:11:00.491 --> 00:11:06.622
and then we start to see the morgan logging that you guys were nice

148
00:11:06.622 --> 00:11:12.838
enough add into our application earlier this morning.

149
00:11:12.838 --> 00:11:14.973
So you can retrieve the logs in that way.

150
00:11:14.973 --> 00:11:21.599
The other bits worth showing off in the Scaling configuration,

151
00:11:21.599 --> 00:11:27.510
this is where you can start to toy with the settings for your application.

152
00:11:27.510 --> 00:11:30.698
We can sort of mandate that there's never going to be

153
00:11:30.698 --> 00:11:34.667
fewer than two instances --- two EC2 instances running the

154
00:11:34.667 --> 00:11:36.882
application at any given time.

155
00:11:36.882 --> 00:11:38.660
We can put an upper bound on the number of

156
00:11:38.660 --> 00:11:41.161
instances that can be running the app.

157
00:11:41.161 --> 00:11:44.740
We can configure different availability zones.

158
00:11:44.740 --> 00:11:47.851
And we can also configure different scaling triggers.

159
00:11:47.851 --> 00:11:54.686
So we can say that when the network bandwidth reaches a certain level,

160
00:11:54.686 --> 00:11:59.628
that is the trigger point at which we can spin up another instance.

161
00:11:59.628 --> 00:12:06.475
So there's a lot of capability that we have there.

162
00:12:06.475 --> 00:12:08.945
And then on the instances themselves,

163
00:12:08.945 --> 00:12:14.736
this is where you can actually configure the type of AWS or type

164
00:12:14.736 --> 00:12:19.008
of EC2 instance that will be running your code.

165
00:12:19.008 --> 00:12:20.744
The default is a t2.

166
00:12:20.744 --> 00:12:22.480
micro, which is pretty small.

167
00:12:22.480 --> 00:12:27.318
It has like one virtual core in like 513 MGs of memory,

168
00:12:27.318 --> 00:12:31.103
I think, and it kind of goes up from there.

169
00:12:31.103 --> 00:12:38.097
So you can configure the actual machines that are running your

170
00:12:38.097 --> 00:12:43.810
application based on your performance requirements.

171
00:12:43.810 --> 00:12:45.344
And we've already kind of looked into the Software Configuration,

172
00:12:45.344 --> 00:12:46.967
which is another bit.

173
00:12:46.967 --> 00:12:51.158
We'll also look at some of the health check features that

174
00:12:51.158 --> 00:12:54.205
are present here tomorrow when we talk about like monitoring

175
00:12:54.205 --> 00:12:56.083
this application environment.

176
00:12:56.083 --> 00:13:02.545
There are a few other things that you can mess with.

177
00:13:02.545 --> 00:13:08.380
For updates and deployments, by default a third of your fleet of instances,

178
00:13:08.380 --> 00:13:11.338
whatever that happens to be, if it's just three,

179
00:13:11.338 --> 00:13:15.708
it'll be just one of them, but essentially like when you're doing a deployment,

180
00:13:15.708 --> 00:13:19.888
that's how many of those instances will be taken out of the load

181
00:13:19.888 --> 00:13:23.089
balancer to perform your application update at a time.

182
00:13:23.089 --> 00:13:26.171
And once that one instance has been updated,

183
00:13:26.171 --> 00:13:27.662
it's going to be put back in the load balancer,

184
00:13:27.662 --> 00:13:29.800
and the other instances will be taken out,

185
00:13:29.800 --> 00:13:33.539
and that instance will start accepting the traffic from the load balancer.

186
00:13:33.539 --> 00:13:38.236
And you can configure like how much of your fleet you want to take out

187
00:13:38.236 --> 00:13:43.081
and update and put back into the load balancer there.

188
00:13:43.081 --> 00:13:50.333
Alright, so that was a tremendous pile of stuff to do,

189
00:13:50.333 --> 00:13:57.698
but for anyone who wants to attempt it, I will take you through the steps.

190
00:13:57.698 --> 00:14:02.347
The documentation or the place to start that I put in

191
00:14:02.347 --> 00:14:07.247
the chat was starting with the EB CLI, then,

192
00:14:07.247 --> 00:14:12.823
again, I think actually bringing up the 10,

193
00:14:12.823 --> 00:14:17.853
000 foot view of this process here.

194
00:14:17.853 --> 00:14:20.939
Within a region, you'll create a user, you'll download those user's credentials,

195
00:14:20.939 --> 00:14:27.120
you're going to create an Elastic Beanstalk environment from the command line,

196
00:14:27.120 --> 00:14:32.039
you'll create an RDS instance through the administrative interface,

197
00:14:32.039 --> 00:14:35.916
and you'll configure a security group to allow incoming connections.

198
00:14:35.916 --> 00:14:41.384
So there are a few pieces of that process that are a little bit putzy,

199
00:14:41.384 --> 00:14:46.567
so I'm happy to help you through any of those individual pieces

200
00:14:46.567 --> 00:14:51.074
if you'd like to give it a shot yourself.

201
00:14:51.074 --> 00:14:54.973
But again, I think the benefit here is that this is being recorded,

202
00:14:54.973 --> 00:15:00.051
and all of you can watch that ordeal again at another time when you're

203
00:15:00.051 --> 00:15:03.433
actually going through this and clicking the button.

204
00:15:03.433 --> 00:15:06.897
So there are definitely a lot of pieces to set up,

205
00:15:06.897 --> 00:15:12.000
but hopefully that gives you a sense of like what the moving parts are during the process.

