1
00:00:03,910 --> 00:00:07,667
The first part that we'll start to break down in our application stack is one

2
00:00:07,667 --> 00:00:12,195
of the most important components that we have in the stack,

3
00:00:12,195 --> 00:00:14,930
which is the Express web server.

4
00:00:14,930 --> 00:00:21,653
It handles incoming HTTP requests and renders HTTP responses with HTML and JSON

5
00:00:21,653 --> 00:00:27,045
and is kind of a core component of this and any other Node.

6
00:00:27,045 --> 00:00:28,290
js web application.

7
00:00:28,290 --> 00:00:34,468
It's very similar --- it's very similar in style to say Sinatra,

8
00:00:34,468 --> 00:00:37,793
if you've worked with that framework in the Ruby world or maybe

9
00:00:37,793 --> 00:00:42,597
Nancy from the C# world or any number of other HTTP

10
00:00:42,597 --> 00:00:45,817
microframeworks out there in that it is very,

11
00:00:45,817 --> 00:00:46,588
very minimal,

12
00:00:46,588 --> 00:00:56,168
and it's also by far the most popular HTTP request handling library out there.

13
00:00:56,168 --> 00:00:59,239
And loath to call it a web framework because it's not really a framework.

14
00:00:59,239 --> 00:01:03,717
It's a module that's really good at routing HTTP requests to a chunk of

15
00:01:03,717 --> 00:01:07,585
JavaScript code that you would like to run on the server.

16
00:01:07,585 --> 00:01:11,800
Unlike a framework like Rails or ASP.

17
00:01:11,800 --> 00:01:18,616
NET MVC or Spring, batteries are absolutely not included with Express.

18
00:01:18,616 --> 00:01:20,743
Anything you want Express to do,

19
00:01:20,743 --> 00:01:24,754
you have to install as an additional middleware or

20
00:01:24,754 --> 00:01:29,342
some other add-on to the software.

21
00:01:29,342 --> 00:01:33,151
So, there's good things and bad things about this.

22
00:01:33,151 --> 00:01:37,398
The good thing is that you never end up with more bloat in your

23
00:01:37,398 --> 00:01:41,259
application than you absolutely require because you're consciously

24
00:01:41,259 --> 00:01:44,332
choosing every single piece of software that's executed when

25
00:01:44,332 --> 00:01:46,479
you're handling an HTTP request.

26
00:01:46,479 --> 00:01:50,541
The downside is that there are no intelligent defaults.

27
00:01:50,541 --> 00:01:53,465
So, if you want to do something like, oh,

28
00:01:53,465 --> 00:01:57,435
I don't know, parse incoming post requests from a client,

29
00:01:57,435 --> 00:02:02,260
you need to install an extra piece of middleware to do that,

30
00:02:02,260 --> 00:02:04,947
which we have in our sample application.

31
00:02:04,947 --> 00:02:08,789
So there's good things and bad things about that design.

32
00:02:08,789 --> 00:02:12,733
The reason why I still like it very much today is because it's not magical.

33
00:02:12,733 --> 00:02:16,582
It's very easy for me to reason about what this

34
00:02:16,582 --> 00:02:18,891
piece of software is actually doing.

35
00:02:18,891 --> 00:02:23,841
And the reason for that is it's all based on a middleware stack.

36
00:02:23,841 --> 00:02:24,836
Before we go any further,

37
00:02:24,836 --> 00:02:29,794
does anybody know what this picture is a reference to by any chance?

38
00:02:29,794 --> 00:02:30,467
No?

39
00:02:30,467 --> 00:02:31,140
Alright.

40
00:02:31,140 --> 00:02:35,677
So what you all need to do today when you go home is fire up your Kindle

41
00:02:35,677 --> 00:02:40,633
and download Ready Player One is the name of the book,

42
00:02:40,633 --> 00:02:45,642
and this is the stacks, which is a vertical trailer home --- trailer park,

43
00:02:45,642 --> 00:02:48,068
which is featured in Ready Player One.

44
00:02:48,068 --> 00:02:48,761
Fantastic book.

45
00:02:48,761 --> 00:02:51,705
You will not be sorry that you did that.

46
00:02:51,705 --> 00:02:54,447
But the middleware stack is all Express is.

47
00:02:54,447 --> 00:02:57,767
It's just executing a set of JavaScript functions to

48
00:02:57,767 --> 00:03:03,862
process an incoming HTTP request, which is coming into your web application.

49
00:03:03,862 --> 00:03:04,341
So,

50
00:03:04,341 --> 00:03:11,686
when your web app receives a HTTP request on port 3000 or wherever it's running,

51
00:03:11,686 --> 00:03:17,088
usually what happens is Express will execute something called a middleware,

52
00:03:17,088 --> 00:03:19,889
and that's just a fancy name for a JavaScript

53
00:03:19,889 --> 00:03:25,444
function which takes in a HTTP request, executes some logic,

54
00:03:25,444 --> 00:03:29,745
and either returns a response or passes it ahead to the

55
00:03:29,745 --> 00:03:31,888
next handler in the middleware stack.

56
00:03:31,888 --> 00:03:35,340
So in a typical Express application you have some number

57
00:03:35,340 --> 00:03:38,989
of global middleware that are going to run on almost

58
00:03:38,989 --> 00:03:40,968
every request or every request,

59
00:03:40,968 --> 00:03:45,405
and we'll see how we configure that here in a second.

60
00:03:45,405 --> 00:03:48,419
We'll also have some specific routes in our applications,

61
00:03:48,419 --> 00:03:53,807
so we'll want to handle specific URLs with specific logic for maybe

62
00:03:53,807 --> 00:03:59,778
getting a todo item out our database or executing other logic when a

63
00:03:59,778 --> 00:04:03,526
certain path is requested within the application.

64
00:04:03,526 --> 00:04:06,861
And then if the global middleware and the application routes are

65
00:04:06,861 --> 00:04:12,478
unable to process the request or God forbid an error happens

66
00:04:12,478 --> 00:04:15,774
during the execution of those middleware,

67
00:04:15,774 --> 00:04:20,817
we can have other middleware that's lower down in our stack

68
00:04:20,817 --> 00:04:23,877
that will catch errors like a 404 Not Found,

69
00:04:23,877 --> 00:04:28,091
like if we don't have a handler to handle a certain kind of request,

70
00:04:28,091 --> 00:04:32,824
or a 500 error if one of our other middlewares throws an exception.

71
00:04:32,824 --> 00:04:38,532
So we have this stack of JavaScript functions that are executed sequentially.

72
00:04:38,532 --> 00:04:43,047
At some point, someone is going to return a response of some kind,

73
00:04:43,047 --> 00:04:44,957
hopefully, is kind of how this works.

74
00:04:44,957 --> 00:04:47,223
And if you've done any server programming or

75
00:04:47,223 --> 00:04:54,000
developed rack applications for Ruby, you might be kind of familiar with this concept of a middleware stack.

