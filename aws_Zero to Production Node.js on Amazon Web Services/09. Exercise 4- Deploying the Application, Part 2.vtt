WEBVTT
1
00:00:03.954 --> 00:00:08.403
So it's possible to go to create environments through the console directly,

2
00:00:08.403 --> 00:00:14.334
but what we did during our exercise was actually create it from the

3
00:00:14.334 --> 00:00:18.186
command line using the Elastic Beanstalk CLI.

4
00:00:18.186 --> 00:00:22.773
So we cloned our application, we entered that application,

5
00:00:22.773 --> 00:00:28.163
and then we started off with eb init.

6
00:00:28.163 --> 00:00:36.014
And eb init is what took us through choosing an AWS

7
00:00:36.014 --> 00:00:42.539
region to run our application in, it's where we created an environment,

8
00:00:42.539 --> 00:00:43.540
excuse me,

9
00:00:43.540 --> 00:00:52.285
and it's where we sort of would configure our credentials for our AWS user that

10
00:00:52.285 --> 00:01:00.635
we used to use the Elastic Beanstalk command line interface.

11
00:01:00.635 --> 00:01:03.943
And then after, we ran eb init.

12
00:01:03.943 --> 00:01:06.588
So when you're going through that, it asks for this AWS access ID.

13
00:01:06.588 --> 00:01:09.180
Where do you get that from?

14
00:01:09.180 --> 00:01:10.756
When you downloaded your credentials before,

15
00:01:10.756 --> 00:01:13.262
like in the console when you created the user,

16
00:01:13.262 --> 00:01:20.573
that download would have a CSV in it with like an access key and a secret value.

17
00:01:20.573 --> 00:01:26.346
Where does that get stored if you had a user already created?

18
00:01:26.346 --> 00:01:28.932
If you had a user already created, but you didn't download the credentials,

19
00:01:28.932 --> 00:01:32.196
you need to regenerate credentials for the user,

20
00:01:32.196 --> 00:01:39.595
and whatever credentials they had previously would no longer be valid.

21
00:01:39.595 --> 00:01:42.702
And you can do that from the user?

22
00:01:42.702 --> 00:01:44.143
Yes, you can.

23
00:01:44.143 --> 00:01:50.389
So for individual users, like here's --- here I'll do a different one.

24
00:01:50.389 --> 00:01:57.415
So here's the user, a user I created for an earlier test.

25
00:01:57.415 --> 00:01:59.949
So here is their credentials.

26
00:01:59.949 --> 00:02:05.640
You can see the access key again, but the secret you'll never see again.

27
00:02:05.640 --> 00:02:11.333
But what you can do is you can create a new access key,

28
00:02:11.333 --> 00:02:16.795
and you can download those credentials, or you can click on this link,

29
00:02:16.795 --> 00:02:18.817
and you can actually show them in the browser.

30
00:02:18.817 --> 00:02:25.280
So you have a chance to create like a new set of keys as well.

31
00:02:25.280 --> 00:02:25.746
Does that kind of make sense?

32
00:02:25.746 --> 00:02:27.551
So you do --- so you create an access key,

33
00:02:27.551 --> 00:02:29.146
and then you download the credentials there,

34
00:02:29.146 --> 00:02:36.287
and then that file is the one that you put in when you do the eb init.

35
00:02:36.287 --> 00:02:38.163
Yeah, you don't put in the file,

36
00:02:38.163 --> 00:02:41.227
but you use the access key and the secret strings

37
00:02:41.227 --> 00:02:43.990
from that file that you downloaded.

38
00:02:43.990 --> 00:02:47.019
So here I'll just download this, and I'll show you what I mean.

39
00:02:47.019 --> 00:02:49.152
So I just created these access keys,

40
00:02:49.152 --> 00:02:54.952
and then that's going to be downloaded in like a CSV.

41
00:02:54.952 --> 00:03:03.443
So if I open that CSV with like a text editor,

42
00:03:03.443 --> 00:03:09.478
it's got my user name, my access key, and my secret,

43
00:03:09.478 --> 00:03:16.000
and those are the values that I will plug in during the eb init.

44
00:03:16.000 --> 00:03:26.139
Does that kind of make sense?

45
00:03:26.139 --> 00:03:34.004
So, the eb init is where we plug in our AWS credentials,

46
00:03:34.004 --> 00:03:37.842
and we sort of initialize our application.

47
00:03:37.842 --> 00:03:44.246
And then eb create is where we create an actual environment with EC2

48
00:03:44.246 --> 00:03:50.567
instances in it that we can actually use to run our code.

49
00:03:50.567 --> 00:03:56.286
And once we --- and that took a very long time,

50
00:03:56.286 --> 00:04:01.873
but once it was created, we ended up with this.

51
00:04:01.873 --> 00:04:04.188
We went into --- when we went into Elastic Beanstalk,

52
00:04:04.188 --> 00:04:06.847
now all the sudden we have this environment.

53
00:04:06.847 --> 00:04:12.312
And the way we did before was under configured, so it wasn't okay right away.

54
00:04:12.312 --> 00:04:15.680
But we have this environment which is actually running

55
00:04:15.680 --> 00:04:18.129
EC2 instances which have our code.

56
00:04:18.129 --> 00:04:20.536
So on the configuration side,

57
00:04:20.536 --> 00:04:27.161
what we needed to do is go into our Instance configuration and

58
00:04:27.161 --> 00:04:35.006
check out like what EC2 security group the EC2 instances managed

59
00:04:35.006 --> 00:04:39.054
by Elastic Beanstalk are a member of.

60
00:04:39.054 --> 00:04:45.731
And that is a value that we had to use a few other places, if you remember.

61
00:04:45.731 --> 00:04:51.307
The first was when we created a new RDS instance, which is what we did next.

62
00:04:51.307 --> 00:05:04.337
So we went into RDS, and we created an instance for PostgreSQL,

63
00:05:04.337 --> 00:05:10.806
and during the configuration process we added that RDS

64
00:05:10.806 --> 00:05:15.567
instance to the same security group that our Elastic

65
00:05:15.567 --> 00:05:18.604
Beanstalk EC2 instances are a part of.

66
00:05:18.604 --> 00:05:24.101
So that essentially enables them to communicate with one another.

67
00:05:24.101 --> 00:05:31.624
Once we created that RDS instance, put it in the same security group,

68
00:05:31.624 --> 00:05:39.108
the other step we needed to do was to go into the EC2 configuration,

69
00:05:39.108 --> 00:05:46.660
go down to Security Groups, and then select,

70
00:05:46.660 --> 00:05:53.620
I believe it was, if I mouse over that, yeah,

71
00:05:53.620 --> 00:06:00.785
so we selected the same security group in this like administrative interface,

72
00:06:00.785 --> 00:06:09.716
and under this Inbound tab we needed to add another configuration

73
00:06:09.716 --> 00:06:18.984
for Postgres on port 5432 that would allow inbound connections

74
00:06:18.984 --> 00:06:24.698
for members of this security group.

75
00:06:24.698 --> 00:06:26.556
Is that a typical port for Postgres?

76
00:06:26.556 --> 00:06:27.383
What's that?

77
00:06:27.383 --> 00:06:29.357
Is that a typical port that's used?

78
00:06:29.357 --> 00:06:34.000
Yeah, 5432 is the, sort of the default. Standard, yeah.

