WEBVTT
1
00:00:03.000 --> 00:00:10.248
I think we'll start off with the two kind of heroes of our front-end toolchain,

2
00:00:10.248 --> 00:00:12.463
which are Browserify and Sass.

3
00:00:12.463 --> 00:00:16.242
And they help with a lot of different things that make our

4
00:00:16.242 --> 00:00:22.672
front-end code much more expressive to write and also more

5
00:00:22.672 --> 00:00:25.390
performant and feature rich.

6
00:00:25.390 --> 00:00:29.611
So Browserify and Sass are both preprocessors,

7
00:00:29.611 --> 00:00:34.597
Browserify for JavaScript and Sass for CSS.

8
00:00:34.597 --> 00:00:35.872
In our application,

9
00:00:35.872 --> 00:00:40.267
we're actually using Browserify as the primary mechanism by

10
00:00:40.267 --> 00:00:45.649
which we transform our JavaScript into actual cross-browser

11
00:00:45.649 --> 00:00:48.551
JavaScript code that can run across, again,

12
00:00:48.551 --> 00:00:50.528
across a variety of browsers.

13
00:00:50.528 --> 00:00:52.900
So Browserify provides a few things.

14
00:00:52.900 --> 00:00:56.899
It actually has a transform, which we'll talk about next,

15
00:00:56.899 --> 00:01:00.700
that runs it through another tool called Babel,

16
00:01:00.700 --> 00:01:03.071
which ultimately produces cross-platform JavaScript

17
00:01:03.071 --> 00:01:05.506
code that you can actually serve,

18
00:01:05.506 --> 00:01:09.820
which we've been doing this entire time with our todo application.

19
00:01:09.820 --> 00:01:12.563
Sass is a preprocessor for CSS.

20
00:01:12.563 --> 00:01:18.392
It takes a language that is a superset of CSS features

21
00:01:18.392 --> 00:01:22.991
and converts that to plain Vanilla CSS.

22
00:01:22.991 --> 00:01:30.560
So Broswerify, I think, is maybe one of the key technologies of the entire Node.

23
00:01:30.560 --> 00:01:31.703
js ecosystem.

24
00:01:31.703 --> 00:01:38.276
It's a critical component of being able to realize this idea of

25
00:01:38.276 --> 00:01:42.943
isomorphic JavaScript where you can write code that can run both

26
00:01:42.943 --> 00:01:44.971
on the client and on the server.

27
00:01:44.971 --> 00:01:51.090
And while as a practical matter you don't really that often share a ton of

28
00:01:51.090 --> 00:01:56.064
code between client and server unless it's pure JavaScript,

29
00:01:56.064 --> 00:01:59.383
the primary thing that Browserify provides is the

30
00:01:59.383 --> 00:02:02.445
ability to write your code the same way.

31
00:02:02.445 --> 00:02:04.626
So when you're writing a Vue.

32
00:02:04.626 --> 00:02:08.540
js component, you're still dealing with a CommonJS module,

33
00:02:08.540 --> 00:02:12.882
you're using the same language features that you can use on the server in Node,

34
00:02:12.882 --> 00:02:15.917
and Browserify makes all of that possible,

35
00:02:15.917 --> 00:02:20.632
so there's no context switching where you're going to the front and back end.

36
00:02:20.632 --> 00:02:22.214
If you've worked, as I have,

37
00:02:22.214 --> 00:02:25.513
in languages where JavaScript is purely on the front end and on the

38
00:02:25.513 --> 00:02:27.766
back end you're writing Ruby or Java or whatever,

39
00:02:27.766 --> 00:02:32.792
you know that there's a switch when you go from one language to the other,

40
00:02:32.792 --> 00:02:36.947
and Browserify makes that switch pretty much seamless,

41
00:02:36.947 --> 00:02:43.233
so it's a critical tool in my mind for the success of Node.

42
00:02:43.233 --> 00:02:43.717
js.

43
00:02:43.717 --> 00:02:48.989
So Browserify itself provides like one primary service for your application,

44
00:02:48.989 --> 00:02:54.354
which is to analyze the dependency structure of your

45
00:02:54.354 --> 00:02:57.094
code to see which modules are required,

46
00:02:57.094 --> 00:03:02.673
and then it builds a JavaScript bundle and a sort of integrated

47
00:03:02.673 --> 00:03:06.941
require system which will allow that your Node.

48
00:03:06.941 --> 00:03:10.684
js style CommonJS code to run in the browser.

49
00:03:10.684 --> 00:03:13.840
And that's pretty much what Browserify provides,

50
00:03:13.840 --> 00:03:19.028
but the other thing that it does is it provides an

51
00:03:19.028 --> 00:03:21.446
affordance for transformations and plugins.

52
00:03:21.446 --> 00:03:23.433
And the transformations that you can include along with

53
00:03:23.433 --> 00:03:26.052
Browserify do lots of very useful things.

54
00:03:26.052 --> 00:03:30.559
In our case, we're using a Browserify transform for Babel,

55
00:03:30.559 --> 00:03:35.816
so we're able to, during that process of packaging our JavaScript,

56
00:03:35.816 --> 00:03:43.495
convert code that is written on the server for a ES2015+ version of JavaScript,

57
00:03:43.495 --> 00:03:51.541
and we can actually take that code and convert it to regular ES5

58
00:03:51.541 --> 00:03:56.715
code that can run on a variety of browsers.

59
00:03:56.715 --> 00:04:01.881
So the babelify transform provides that functionality for us.

60
00:04:01.881 --> 00:04:07.390
And that's just one of many different transforms that you can use.

61
00:04:07.390 --> 00:04:11.733
There are transforms that allow you to require like templates.

62
00:04:11.733 --> 00:04:15.505
So if you have Jade templates or Pug templates I

63
00:04:15.505 --> 00:04:21.372
guess they're calling it these days, you can actually require those files,

64
00:04:21.372 --> 00:04:24.926
and there's a transform that'll turn it into a JavaScript function that

65
00:04:24.926 --> 00:04:27.937
you can require directly in your JavaScript code.

66
00:04:27.937 --> 00:04:33.544
So there's a ton of really useful technologies and transforms out

67
00:04:33.544 --> 00:04:37.793
there that you can integrate into Browserify.

68
00:04:37.793 --> 00:04:43.739
The transforms are typically installed as peer modules of Browserify.

69
00:04:43.739 --> 00:04:48.268
Browserify itself doesn't ship with any of these transformations.

70
00:04:48.268 --> 00:04:53.731
And while you can execute Browserify directly from the command line,

71
00:04:53.731 --> 00:04:59.216
typically you can execute it with a variety of options.

72
00:04:59.216 --> 00:04:59.696
Typically,

73
00:04:59.696 --> 00:05:04.014
what ends up being expedient is configuring your Browserify

74
00:05:04.014 --> 00:05:06.458
transforms and options within the package.

75
00:05:06.458 --> 00:05:08.088
json for the project.

76
00:05:08.088 --> 00:05:11.084
And if you look in the todomvc-plusplus repo,

77
00:05:11.084 --> 00:05:14.674
you can see the configuration options for Browserify.

78
00:05:14.674 --> 00:05:19.374
So in this case, we're right now using two transforms.

79
00:05:19.374 --> 00:05:21.113
The first is browserify-shim.

80
00:05:21.113 --> 00:05:24.048
Sorry for the laser pointer usage for those online.

81
00:05:24.048 --> 00:05:31.219
But browserify-shim will --- helps you to shim in different

82
00:05:31.219 --> 00:05:35.932
modules that may exist as regular JavaScript modules so they

83
00:05:35.932 --> 00:05:38.210
can be required in your application.

84
00:05:38.210 --> 00:05:41.060
So in the configuration down below for broswerify-shim,

85
00:05:41.060 --> 00:05:47.820
we have the ability require jQuery in our CommonJS style browser code,

86
00:05:47.820 --> 00:05:51.529
but that's essentially going to be a reference to the window

87
00:05:51.529 --> 00:05:55.572
scoped dollar sign object to which jQuery is assigned when

88
00:05:55.572 --> 00:05:57.643
actually running in the browser.

89
00:05:57.643 --> 00:06:02.859
In addition to the shim transform, we also the babelify transform,

90
00:06:02.859 --> 00:06:08.876
which again is a framework for integrating lots of different features for

91
00:06:08.876 --> 00:06:12.038
advanced versions of ECMAScript into your application.

92
00:06:12.038 --> 00:06:16.226
In our current application, we're using the ES2015 presets,

93
00:06:16.226 --> 00:06:22.339
which add a lot of language features that don't yet exist in most browsers,

94
00:06:22.339 --> 00:06:25.495
but there's other presets that you can use.

95
00:06:25.495 --> 00:06:27.470
There's a popular React preset,

96
00:06:27.470 --> 00:06:33.538
which allows you to convert JSX files with integrated Vue code into

97
00:06:33.538 --> 00:06:38.325
regular JavaScript as a part of this process as well.

98
00:06:38.325 --> 00:06:41.874
So Browserify, key tool in our toolchain here.

99
00:06:41.874 --> 00:06:44.360
Where is that configuration file?

100
00:06:44.360 --> 00:06:52.000
That's actually going to be in package. json, so down near the bottom.

