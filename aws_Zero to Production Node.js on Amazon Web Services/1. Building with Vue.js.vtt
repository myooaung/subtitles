WEBVTT
1
00:00:09.500 --> 00:00:13.542
We talked a little bit about some of the tools that we use that

2
00:00:13.542 --> 00:00:18.910
are sort of a framework agnostic to enhance what we can do in

3
00:00:18.910 --> 00:00:20.921
our front-end JavaScript and CSS.

4
00:00:20.921 --> 00:00:25.125
Now we're going to dive a little deeper into the core

5
00:00:25.125 --> 00:00:28.326
front-end framework that we're using to drive most of the

6
00:00:28.326 --> 00:00:33.982
interface to do MVC in this example, which is Vue.

7
00:00:33.982 --> 00:00:34.548
js.

8
00:00:34.548 --> 00:00:35.066
In Vue.

9
00:00:35.066 --> 00:00:36.619
js, if you remember from yesterday,

10
00:00:36.619 --> 00:00:40.295
I'm fond of talking about spectrums to kind of

11
00:00:40.295 --> 00:00:43.272
place different tools inside them.

12
00:00:43.272 --> 00:00:47.628
When you're thinking about sort of building a rich front-end,

13
00:00:47.628 --> 00:00:50.189
there are frameworks that do quite a lot for you.

14
00:00:50.189 --> 00:00:55.268
Up on the right, we have AngularJS, which with version 2.

15
00:00:55.268 --> 00:01:01.290
0 and in previous versions, it really demands a lot of you as a developer.

16
00:01:01.290 --> 00:01:05.612
You really have to buy into the Angular way of writing applications,

17
00:01:05.612 --> 00:01:08.329
and you're probably going to write your entire

18
00:01:08.329 --> 00:01:10.918
front-end to be an Angular web application.

19
00:01:10.918 --> 00:01:15.430
And the same is true of React to a lesser degree.

20
00:01:15.430 --> 00:01:17.906
It is possible, I think more possible,

21
00:01:17.906 --> 00:01:21.546
and I shouldn't say it's impossible with Angular,

22
00:01:21.546 --> 00:01:26.720
but I see React employed more frequently to provide

23
00:01:26.720 --> 00:01:30.747
dynamic features to a component of a web application more

24
00:01:30.747 --> 00:01:32.610
so than I do on the Angular side.

25
00:01:32.610 --> 00:01:33.076
But again,

26
00:01:33.076 --> 00:01:38.001
you're kind of buying into the framework whole hog and writing all of your

27
00:01:38.001 --> 00:01:41.531
code to kind of specifically cater to that framework.

28
00:01:41.531 --> 00:01:45.617
And then on the sort of other end of the spectrum,

29
00:01:45.617 --> 00:01:47.343
you can write JavaScript yourself,

30
00:01:47.343 --> 00:01:53.461
you can write jQuery plugins that do all the fancy stuff on your page

31
00:01:53.461 --> 00:01:57.629
without really any set structure imposed by a framework,

32
00:01:57.629 --> 00:02:00.711
or you can use something like Backbone,

33
00:02:00.711 --> 00:02:04.537
which is quite a bit less opinionated and just provides

34
00:02:04.537 --> 00:02:07.997
sort of a minimum structure for how you can write the

35
00:02:07.997 --> 00:02:09.481
JavaScript which runs your front-end.

36
00:02:09.481 --> 00:02:13.710
And I think Vue actually --- one of the reasons I like it is it

37
00:02:13.710 --> 00:02:16.193
kind of sits in the middle of these approaches.

38
00:02:16.193 --> 00:02:19.548
It's something that is fairly easy to add in to any page,

39
00:02:19.548 --> 00:02:22.854
whether or not you're already using Vue.

40
00:02:22.854 --> 00:02:27.789
As a library itself, it's reasonably light weight.

41
00:02:27.789 --> 00:02:28.114
But,

42
00:02:28.114 --> 00:02:33.703
it also provides some of the key features that make React and Angular useful,

43
00:02:33.703 --> 00:02:37.934
like Ractive two-way data binding,

44
00:02:37.934 --> 00:02:43.222
a JavaScript object model that you can use to update your

45
00:02:43.222 --> 00:02:46.314
data and keep your data out of the Vue.

46
00:02:46.314 --> 00:02:51.813
So I think Vue kind of sits in an interesting middle ground between a large

47
00:02:51.813 --> 00:02:58.070
framework which can take over your front-end code and these other libraries

48
00:02:58.070 --> 00:03:01.706
which you use to implement parts of your logic.

49
00:03:01.706 --> 00:03:04.288
So, some of the key features.

50
00:03:04.288 --> 00:03:09.331
Again, the two-way data binding is definitely one of the highlights.

51
00:03:09.331 --> 00:03:11.300
And the object models,

52
00:03:11.300 --> 00:03:16.877
like the Vue models that you're interacting with to update the data which

53
00:03:16.877 --> 00:03:22.344
drives your user interface is just a plain JavaScript object,

54
00:03:22.344 --> 00:03:24.592
which I've always dug.

55
00:03:24.592 --> 00:03:30.702
There's not like a special scope object or any kind of

56
00:03:30.702 --> 00:03:32.675
fancy affordance by the framework,

57
00:03:32.675 --> 00:03:35.351
you're just interacting with a plain JavaScript

58
00:03:35.351 --> 00:03:39.763
object to update the data of your Vue.

59
00:03:39.763 --> 00:03:43.485
It also provides, much like Angular if you've used that before,

60
00:03:43.485 --> 00:03:44.616
HTML directives,

61
00:03:44.616 --> 00:03:51.326
which you can add into your markup to assign event handlers or

62
00:03:51.326 --> 00:03:55.548
bind event handlers to methods on your Vue.

63
00:03:55.548 --> 00:03:58.950
And you can build fully component-oriented applications,

64
00:03:58.950 --> 00:04:08.000
much like you can with React and Angular using Vue as well, if you decide to use it in that capacity.

