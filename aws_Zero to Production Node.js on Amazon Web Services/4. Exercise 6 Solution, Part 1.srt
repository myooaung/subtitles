1
00:00:03,967 --> 00:00:07,041
When we sent you off on this Vue.

2
00:00:07,041 --> 00:00:07,809
js journey,

3
00:00:07,809 --> 00:00:15,035
we had you try to change the application to take advantage of the

4
00:00:15,035 --> 00:00:20,761
API that we just put in place last time around to actually save the

5
00:00:20,761 --> 00:00:25,382
completed status of the todo list items.

6
00:00:25,382 --> 00:00:30,108
And so we actually do have, looking through,

7
00:00:30,108 --> 00:00:32,022
we have one pull request,

8
00:00:32,022 --> 00:00:35,810
which is great and definitely implements this in a way

9
00:00:35,810 --> 00:00:38,441
very similar to what I would recommend.

10
00:00:38,441 --> 00:00:43,037
So let's actually take a look and blow that up.

11
00:00:43,037 --> 00:00:50,048
So, what we have here in this pull request are a couple of changes.

12
00:00:50,048 --> 00:00:56,213
For the first is to our existing store utility class,

13
00:00:56,213 --> 00:00:58,508
or utility object, I guess.

14
00:00:58,508 --> 00:00:58,967
So,

15
00:00:58,967 --> 00:01:05,248
we had some logic before that would actually save every todo in the list if

16
00:01:05,248 --> 00:01:08,864
it was flagged with a Boolean property called modified.

17
00:01:08,864 --> 00:01:15,071
And this was just kind of a byproduct of the way TodoMVC was

18
00:01:15,071 --> 00:01:19,893
originally implemented where like the only way todo items were

19
00:01:19,893 --> 00:01:22,480
saved were as an entire list all at once.

20
00:01:22,480 --> 00:01:25,841
So, that's still the way that it works.

21
00:01:25,841 --> 00:01:31,045
So what we've done here is updated those Ajax requests to in

22
00:01:31,045 --> 00:01:34,640
addition to sending the title to the server,

23
00:01:34,640 --> 00:01:40,715
also sending the completed status of a todo item to the server as well.

24
00:01:40,715 --> 00:01:43,876
We also have that down here in the updates.

25
00:01:43,876 --> 00:01:48,454
So, both in the create and the update steps,

26
00:01:48,454 --> 00:01:53,755
we've just also started tracking the completion status of the todo.

27
00:01:53,755 --> 00:01:56,564
So that was step one that we had to do.

28
00:01:56,564 --> 00:01:56,845
Next,

29
00:01:56,845 --> 00:02:05,442
we had to modify the user interface to actually like save that property as a

30
00:02:05,442 --> 00:02:11,129
part of the interface when something was actually completed.

31
00:02:11,129 --> 00:02:18,633
So, what we did here, this is the actual Vue component,

32
00:02:18,633 --> 00:02:21,884
we added another instance function here.

33
00:02:21,884 --> 00:02:28,563
Actually, I might just open this file up so we can see what we did.

34
00:02:28,563 --> 00:02:29,074
So,

35
00:02:29,074 --> 00:02:36,097
there is a section of functions within a Vue component called methods which are

36
00:02:36,097 --> 00:02:40,986
callable as a part of event handling and other scenarios.

37
00:02:40,986 --> 00:02:45,951
So we had before an addTodo, a removeTodo, edit, doneEdit.

38
00:02:45,951 --> 00:02:51,944
And what we added here was a new method called complete

39
00:02:51,944 --> 00:02:56,888
which takes a todo that was completed.

40
00:02:56,888 --> 00:03:02,187
And the actual property completed of the todo is already being updated

41
00:03:02,187 --> 00:03:10,398
because it was bound to a property of the checkbox object.

42
00:03:10,398 --> 00:03:20,511
And maybe it would be easier to look at that here in the source for index.

43
00:03:20,511 --> 00:03:21,143
ejs.

44
00:03:21,143 --> 00:03:30,036
So, here is the for loop in which we're rendering all the individual list items.

45
00:03:30,036 --> 00:03:33,965
And inside each list item there is a div that

46
00:03:33,965 --> 00:03:37,048
contained the contents of the button,

47
00:03:37,048 --> 00:03:43,394
but also this checkbox toggle which was bound to the

48
00:03:43,394 --> 00:03:45,943
completed property of the todo model.

49
00:03:45,943 --> 00:03:48,502
So anytime that checkbox is updated,

50
00:03:48,502 --> 00:03:52,409
it's actually going to be updating the Boolean property

51
00:03:52,409 --> 00:03:55,976
completed on the underlying todo list item.

52
00:03:55,976 --> 00:04:01,064
So that property is already being updated.

53
00:04:01,064 --> 00:04:09,539
So what we did in this change set here is we take the completed todo,

54
00:04:09,539 --> 00:04:12,267
we flag it has having been modified,

55
00:04:12,267 --> 00:04:16,925
which is necessary to actually persist the save to the server,

56
00:04:16,925 --> 00:04:21,907
and then we called that same storage method that we had before,

57
00:04:21,907 --> 00:04:24,456
passing in the current list of todos.

58
00:04:24,456 --> 00:04:27,193
And because this todo was marked as modified,

59
00:04:27,193 --> 00:04:31,064
we're going to persist that change to the server.

60
00:04:31,064 --> 00:04:37,042
So that was the only thing we needed to change on

61
00:04:37,042 --> 00:04:40,726
the actual Vue instance itself.

62
00:04:40,726 --> 00:04:47,225
And then the third change in the pull request was also necessary.

63
00:04:47,225 --> 00:04:49,871
So we updated our service, which hits the back-end.

64
00:04:49,871 --> 00:04:53,295
We updated our controller, or our component logic,

65
00:04:53,295 --> 00:05:00,010
and we also updated our HTML here for the actual Vue.

66
00:05:00,010 --> 00:05:06,894
And it was reformatted a little bit, which is also good,

67
00:05:06,894 --> 00:05:11,595
get it closer to under 80 columns, which I appreciate.

68
00:05:11,595 --> 00:05:18,551
The primary change here was adding a new event listener on this object.

69
00:05:18,551 --> 00:05:22,839
So whenever the change event happens on this checkbox,

70
00:05:22,839 --> 00:05:28,660
we're going to call this complete function on the component,

71
00:05:28,660 --> 00:05:32,263
passing in the current todo that was updated.

72
00:05:32,263 --> 00:05:35,540
And there are a few ways you could have gone about this.

73
00:05:35,540 --> 00:05:43,170
Listening for the change event is great and probably maybe the cleanest.

74
00:05:43,170 --> 00:05:49,605
Another way would have been to attach a click handler to this input as well.

75
00:05:49,605 --> 00:05:51,602
So, here's our input checkbox.

76
00:05:51,602 --> 00:05:57,483
Listening for the change event and calling our function is a great solution.

77
00:05:57,483 --> 00:06:04,058
Another thing that you might have done is add a click handler function here,

78
00:06:04,058 --> 00:06:09,472
and then you could have called that complete function,

79
00:06:09,472 --> 00:06:13,335
passing in the current todo for this item.

80
00:06:13,335 --> 00:06:18,719
So, that would've been a response to the actual click,

81
00:06:18,719 --> 00:06:23,664
but listening for the change of the property is

82
00:06:23,664 --> 00:06:27,549
probably the best way to approach that.

83
00:06:27,549 --> 00:06:31,108
So, excellent work on that piece.

84
00:06:31,108 --> 00:06:36,731
That is precisely what I would've done in this situation so good work.

85
00:06:36,731 --> 00:06:40,042
And you did it much better than I would have done had

86
00:06:40,042 --> 00:06:42,039
I live coded it in front of you.

87
00:06:42,039 --> 00:06:47,388
So, I'm going to go ahead and apply a plus one to that.

88
00:06:47,388 --> 00:06:48,940
And since it's a bigger change,

89
00:06:48,940 --> 00:06:51,704
I'll pull it down locally and make sure that it's

90
00:06:51,704 --> 00:06:58,000
working properly before I merge it in, but it looks absolutely perfect at this point.

