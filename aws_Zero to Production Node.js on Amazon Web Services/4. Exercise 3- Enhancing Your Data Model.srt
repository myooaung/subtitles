1
00:00:03,973 --> 00:00:08,227
So now we're going to be moving on to our third exercise of the day,

2
00:00:08,227 --> 00:00:13,567
which is enhancing our data model to use some additional properties.

3
00:00:13,567 --> 00:00:23,665
So, if we head out to GitHub, you'll notice that there are two issues remaining.

4
00:00:23,665 --> 00:00:25,725
Both are tagged with exercise3,

5
00:00:25,725 --> 00:00:32,430
and both will get you into a little bit meatier parts of this application.

6
00:00:32,430 --> 00:00:38,920
The first is --- and it could be that you'll be able to knock these out

7
00:00:38,920 --> 00:00:43,511
both at once because maybe you'll want to write a test which exercises

8
00:00:43,511 --> 00:00:46,116
your new functionality that you're adding.

9
00:00:46,116 --> 00:00:53,131
But the first issue that I have is that right now there's no way to track

10
00:00:53,131 --> 00:00:57,581
the status of a Todo model once you mark it as complete.

11
00:00:57,581 --> 00:00:58,166
So,

12
00:00:58,166 --> 00:01:05,189
many of you were astute enough to note that when we actually

13
00:01:05,189 --> 00:01:10,861
run our application here in development mode,

14
00:01:10,861 --> 00:01:18,924
when you mark a todo item as complete and refresh the page,

15
00:01:18,924 --> 00:01:21,053
it doesn't actually do anything.

16
00:01:21,053 --> 00:01:28,782
Now the user interface part of this we'll actually get to tomorrow.

17
00:01:28,782 --> 00:01:32,641
That'll be sort of our entree into learning a little bit about how Vue.

18
00:01:32,641 --> 00:01:33,192
js works.

19
00:01:33,192 --> 00:01:33,510
However,

20
00:01:33,510 --> 00:01:38,278
the backend part of this is something that I'd like for us to address today.

21
00:01:38,278 --> 00:01:38,697
So,

22
00:01:38,697 --> 00:01:45,942
what I would like for folks to do is to take the model for the todo and

23
00:01:45,942 --> 00:01:50,752
add Boolean flag for whether or not it's been completed.

24
00:01:50,752 --> 00:01:59,425
And in addition to adding that flag, we also need to modify our API in Express,

25
00:01:59,425 --> 00:02:01,221
implemented with Express,

26
00:02:01,221 --> 00:02:06,959
to accept a completed field along with the current title field,

27
00:02:06,959 --> 00:02:11,235
which is the only one that's persistent at the moment.

28
00:02:11,235 --> 00:02:14,627
And again, I wouldn't spend too much time,

29
00:02:14,627 --> 00:02:17,206
or I wouldn't spend any time, because we'll do that tomorrow,

30
00:02:17,206 --> 00:02:19,838
trying to update the user interface.

31
00:02:19,838 --> 00:02:23,787
I would just look to test these URLs directly.

32
00:02:23,787 --> 00:02:30,414
And if you're into doing that, the go-to for me --- if you like cURL,

33
00:02:30,414 --> 00:02:34,104
that's great, but if you're using Chrome,

34
00:02:34,104 --> 00:02:37,266
there is an app called Postman.

35
00:02:37,266 --> 00:02:42,211
And Postman I feel is kind of the bee's knees if you're testing a REST API

36
00:02:42,211 --> 00:02:48,407
because it gives you a nice GUI that let's you construct HTTP requests with

37
00:02:48,407 --> 00:02:51,752
different HTTP methods against your backend.

38
00:02:51,752 --> 00:02:57,285
So here, and it sort of saves your history as well, which is also kind of nice.

39
00:02:57,285 --> 00:03:02,240
So here we can do a GET request against /todos and hit Send,

40
00:03:02,240 --> 00:03:06,243
and then we can see the JSON that comes back from the server.

41
00:03:06,243 --> 00:03:08,328
We can do a POST request to todos,

42
00:03:08,328 --> 00:03:11,140
and then along with that pass in some form encoded.

43
00:03:11,140 --> 00:03:14,764
And they do need to be form encoded, by the way,

44
00:03:14,764 --> 00:03:16,889
if you do decide to use this tool because that's the

45
00:03:16,889 --> 00:03:19,519
way that we're parsing the body.

46
00:03:19,519 --> 00:03:29,118
If we pass in some values like hey there Front End Masters and hit Send,

47
00:03:29,118 --> 00:03:32,754
we can create a todo that way.

48
00:03:32,754 --> 00:03:35,589
We get that representation back.

49
00:03:35,589 --> 00:03:39,558
And if we list them out again,

50
00:03:39,558 --> 00:03:44,039
we can see that the Front End Master's record is in the database.

51
00:03:44,039 --> 00:03:46,225
So after you add that property,

52
00:03:46,225 --> 00:03:51,345
using something like Postman to test the API would be useful.

53
00:03:51,345 --> 00:03:53,694
In addition to that,

54
00:03:53,694 --> 00:03:58,756
the second issue that I would like for folks to take a look at

55
00:03:58,756 --> 00:04:01,610
during this time dovetails kind of nicely into that,

56
00:04:01,610 --> 00:04:04,957
which is adding some integration tests which we

57
00:04:04,957 --> 00:04:06,833
don't have yet in the application.

58
00:04:06,833 --> 00:04:11,124
We have like one kind of crappy unit test for our backend right now.

59
00:04:11,124 --> 00:04:14,140
Test coverage in this application is not great yet.

60
00:04:14,140 --> 00:04:18,400
So we could definitely do more unit tests as we add

61
00:04:18,400 --> 00:04:20,548
more functionality to the application,

62
00:04:20,548 --> 00:04:26,887
but if our test pyramid should be fat at the bottom with unit tests and

63
00:04:26,887 --> 00:04:29,523
kind of skinnier in the middle with integration tests,

64
00:04:29,523 --> 00:04:33,084
that's the part of the pyramid that we're going to be implementing next.

65
00:04:33,084 --> 00:04:36,021
And then, of course, at the top of the pyramid you have some end-to-end tests,

66
00:04:36,021 --> 00:04:39,098
which we will talk about later.

67
00:04:39,098 --> 00:04:45,305
But we're, at this point, looking to add to the middle of that test pyramid.

68
00:04:45,305 --> 00:04:48,802
Adding an integration test where we're testing that controller logic

69
00:04:48,802 --> 00:04:51,944
is working model logic in the way that we expect.

70
00:04:51,944 --> 00:04:52,403
So,

71
00:04:52,403 --> 00:04:56,992
I would like for us to write an integration test

72
00:04:56,992 --> 00:04:59,287
that covers our controller logic.

73
00:04:59,287 --> 00:05:00,706
So, write at least one test.

74
00:05:00,706 --> 00:05:04,927
The challenge here is to write at least one test for the todos

75
00:05:04,927 --> 00:05:08,653
controller that exercises one of the CRUD operations.

76
00:05:08,653 --> 00:05:09,937
Now to do that,

77
00:05:09,937 --> 00:05:15,478
you're going to have mock an Express request and response object and provide

78
00:05:15,478 --> 00:05:22,040
some values that can be used to satisfy the requirements of the controller

79
00:05:22,040 --> 00:05:25,208
logic that we have in that we have in that file.

80
00:05:25,208 --> 00:05:28,295
So that'll be part of the challenge there.

81
00:05:28,295 --> 00:05:30,884
So we'll probably for this, since this is a meatier task,

82
00:05:30,884 --> 00:05:33,875
we'll take for sure 30 minutes.

83
00:05:33,875 --> 00:05:38,519
We'll probably say 40 minutes to tackle this because this will be the

84
00:05:38,519 --> 00:05:41,545
first time that you've engaged with these technologies.

85
00:05:41,545 --> 00:05:46,911
And you have any questions on the testing front,

86
00:05:46,911 --> 00:05:50,458
you can just create --- if you'd like,

87
00:05:50,458 --> 00:05:56,250
you can create a new file in the test directory here,

88
00:05:56,250 --> 00:06:04,071
and if you npm test, any test logic that you run will be picked up and executed.

89
00:06:04,071 --> 00:06:04,313
So,

90
00:06:04,313 --> 00:06:08,483
if you'd like to take a crack at that first before modifying the model at all,

91
00:06:08,483 --> 00:06:10,192
you can certainly do that,

92
00:06:10,192 --> 00:06:13,638
or if you'd like to modify the model first and update

93
00:06:13,638 --> 00:06:16,810
the API with this new property, you can take a crack at that first.

94
00:06:16,810 --> 00:06:19,392
But I think it would be good opportunity to try to

95
00:06:19,392 --> 00:06:21,931
take a crack at both of these tasks.

96
00:06:21,931 --> 00:06:22,448
So,

97
00:06:22,448 --> 00:06:31,000
adding one integration test for the controller and then also the addition to the Todo model that we've been talking about.

