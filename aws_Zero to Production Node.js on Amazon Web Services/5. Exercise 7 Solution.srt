1
00:00:04,076 --> 00:00:05,166
Before I went to break,

2
00:00:05,166 --> 00:00:09,182
I was kind of working a little bit on figuring out why my Vue.

3
00:00:09,182 --> 00:00:15,653
js theme switcher that I had attempted to demo a few minutes ago wasn't working,

4
00:00:15,653 --> 00:00:19,209
and it was a silly mistake, as you might imagine.

5
00:00:19,209 --> 00:00:24,939
Here if we pull this up again, I moved the location of the radio buttons,

6
00:00:24,939 --> 00:00:31,590
and now when I click them, I switch between a light and a dark CSS theme.

7
00:00:31,590 --> 00:00:35,726
And, if we take a look at the elements,

8
00:00:35,726 --> 00:00:43,252
we can see that the class changes from light to dark when I go back and forth.

9
00:00:43,252 --> 00:00:49,072
So the issue at play was I had added the radio buttons here above the footer,

10
00:00:49,072 --> 00:00:53,027
but it actually wasn't a part of this same element,

11
00:00:53,027 --> 00:00:57,628
the section element, that we attached our Vue.

12
00:00:57,628 --> 00:00:59,353
js component to.

13
00:00:59,353 --> 00:01:03,001
So the events that I was firing and the model I was trying to

14
00:01:03,001 --> 00:01:07,879
bind to was not actually part of the component.

15
00:01:07,879 --> 00:01:13,384
And so by moving the inputs inside the actual component,

16
00:01:13,384 --> 00:01:17,368
they were able to bind to the same model.

17
00:01:17,368 --> 00:01:22,547
So it was just the location of my markup in the DOM was misplaced.

18
00:01:22,547 --> 00:01:27,460
The rest of the code was working fine.

19
00:01:27,460 --> 00:01:35,875
So that is the piece for the TODO app for the theme switcher using Vue.

20
00:01:35,875 --> 00:01:38,447
js that we had before.

21
00:01:38,447 --> 00:01:38,743
And,

22
00:01:38,743 --> 00:01:42,294
the other bit that we asked you to take a look at

23
00:01:42,294 --> 00:01:46,042
going into the break was a Socket.

24
00:01:46,042 --> 00:01:50,331
IO and trying to incorporate Socket.

25
00:01:50,331 --> 00:01:56,136
IO into the updating flow of a todo item.

26
00:01:56,136 --> 00:02:01,985
The challenge that I placed to you guys going into the break ---

27
00:02:01,985 --> 00:02:03,728
and I didn't see any pull requests come in,

28
00:02:03,728 --> 00:02:04,675
which is okay.

29
00:02:04,675 --> 00:02:08,361
You're out having some Tai food, chowing down on a sandwich,

30
00:02:08,361 --> 00:02:10,484
catching up, totally fine.

31
00:02:10,484 --> 00:02:16,920
But the challenge I posed to you guys was using Socket.

32
00:02:16,920 --> 00:02:19,641
IO, update the Vue.

33
00:02:19,641 --> 00:02:27,397
js based user interface based on some activity that was going on on the server.

34
00:02:27,397 --> 00:02:32,024
Whenever a new todo was added, push an event using Socket.

35
00:02:32,024 --> 00:02:34,127
IO up to the server.

36
00:02:34,127 --> 00:02:35,428
So let's go ahead and do that.

37
00:02:35,428 --> 00:02:41,670
I didn't see the pull requests come in so over lunch I tried to get this going,

38
00:02:41,670 --> 00:02:45,897
so we can take a look at that.

39
00:02:45,897 --> 00:02:51,043
If we reload here, we have a list of todos.

40
00:02:51,043 --> 00:02:54,824
Maybe knock out a couple of those there.

41
00:02:54,824 --> 00:02:56,715
And there's our list.

42
00:02:56,715 --> 00:03:00,538
And we can still see that it is working and persisting stuff to a database,

43
00:03:00,538 --> 00:03:05,750
but now what we would like to have happen is when I add a todo list

44
00:03:05,750 --> 00:03:08,483
item over here and I just implement it for the add,

45
00:03:08,483 --> 00:03:13,003
I get another item showing up over here.

46
00:03:13,003 --> 00:03:18,473
Yo yo, if I add that over here, oh no!

47
00:03:18,473 --> 00:03:20,845
We do have a little.

48
00:03:20,845 --> 00:03:23,691
js error, so --- oh oops!

49
00:03:23,691 --> 00:03:27,429
A minor problem as I was finishing this up.

50
00:03:27,429 --> 00:03:30,236
One moment please.

51
00:03:30,236 --> 00:03:37,721
Just need to change that up right quick,

52
00:03:37,721 --> 00:03:42,973
reload both of these, and with any luck that will be the end of it.

53
00:03:42,973 --> 00:03:46,189
So, we add a todo list yup yup,

54
00:03:46,189 --> 00:03:51,184
and then we see that added on our other tab as well.

55
00:03:51,184 --> 00:03:51,629
So,

56
00:03:51,629 --> 00:03:56,474
the way that we implemented this was wiring up a socket

57
00:03:56,474 --> 00:04:02,000
server with our REST API endpoint, and when that add operation is executed,

58
00:04:02,000 --> 00:04:07,875
emit a message back up to the client with that todo that was added.

59
00:04:07,875 --> 00:04:11,181
So, let's break down that code here real quick.

60
00:04:11,181 --> 00:04:13,790
We'll start on the back-end.

61
00:04:13,790 --> 00:04:19,466
Now, here in the command where we actually start up our server,

62
00:04:19,466 --> 00:04:24,360
we added a little bit of logic here to actually initialize a Socket.

63
00:04:24,360 --> 00:04:28,744
IO server and associate that with the HTTP server for the application.

64
00:04:28,744 --> 00:04:32,096
So, we created our HTTP server like before,

65
00:04:32,096 --> 00:04:34,324
and now we create an instance of Socket.

66
00:04:34,324 --> 00:04:40,916
IO that we can use to manage incoming socket connections from our users.

67
00:04:40,916 --> 00:04:46,257
And then I pass that to a utility module that I created for

68
00:04:46,257 --> 00:04:48,366
handling socket communication over here,

69
00:04:48,366 --> 00:04:50,913
which has a method called init.

70
00:04:50,913 --> 00:04:54,643
And then we pass to that a Socket.

71
00:04:54,643 --> 00:04:55,576
IO object.

72
00:04:55,576 --> 00:05:04,353
Now if we look at that socket object defined at the same level as webapp.

73
00:05:04,353 --> 00:05:09,763
js, that init function just passes the Socket.

74
00:05:09,763 --> 00:05:16,653
IO instance and assigns that to a module-scoped variable called io.

75
00:05:16,653 --> 00:05:20,264
And then we export another function called todoAdded,

76
00:05:20,264 --> 00:05:23,412
which we intend to be called from our controller.

77
00:05:23,412 --> 00:05:28,347
It's going to be passed a todo item and then it's going to use that Socket.

78
00:05:28,347 --> 00:05:35,725
IO instance to emit this event, todoAdded, to the other connected clients.

79
00:05:35,725 --> 00:05:36,213
So,

80
00:05:36,213 --> 00:05:43,052
I guess the other bit on the server-side to point out is we just

81
00:05:43,052 --> 00:05:45,921
required that module here in our controller,

82
00:05:45,921 --> 00:05:50,959
and then in our create function if the todo was created successfully,

83
00:05:50,959 --> 00:05:57,073
then we call that function and emit that event in our Socket.

84
00:05:57,073 --> 00:05:58,174
IO server.

85
00:05:58,174 --> 00:06:00,133
Back in the Vue.

86
00:06:00,133 --> 00:06:01,113
js view,

87
00:06:01,113 --> 00:06:07,120
right now this is all implemented within the constructor for the Vue component.

88
00:06:07,120 --> 00:06:10,703
There are a few ways we could approach this,

89
00:06:10,703 --> 00:06:14,005
but I created a property that's not going to be

90
00:06:14,005 --> 00:06:17,957
observable on this Vue instance called socket,

91
00:06:17,957 --> 00:06:21,521
and I call that io function,

92
00:06:21,521 --> 00:06:29,998
which is added into the window global scope by including this Socket.

93
00:06:29,998 --> 00:06:34,779
IO JavaScript file, which is served up by Socket.

94
00:06:34,779 --> 00:06:36,904
IO on the server.

95
00:06:36,904 --> 00:06:41,668
And, after I create that socket, I add a listener for todoAdded.

96
00:06:41,668 --> 00:06:44,860
And because the scope of this does change within this function,

97
00:06:44,860 --> 00:06:48,647
I just stashed it away in a variable called self.

98
00:06:48,647 --> 00:06:51,548
And then when that todoAdded item is fired,

99
00:06:51,548 --> 00:06:54,971
I'm going to check the list of todos that I already

100
00:06:54,971 --> 00:06:57,387
have to see if I have that todo item.

101
00:06:57,387 --> 00:07:01,151
So I'll check the ID of all of the ones that have been

102
00:07:01,151 --> 00:07:06,400
successfully created against the one that just got added.

103
00:07:06,400 --> 00:07:10,125
And if I don't already have it in my list of todo items,

104
00:07:10,125 --> 00:07:13,967
I go ahead and push that into that array,

105
00:07:13,967 --> 00:07:20,441
which then will update the UI with the latest list of todo items.

106
00:07:20,441 --> 00:07:26,103
Any questions on that particular bit of code or Socket.

107
00:07:26,103 --> 00:07:30,428
IO stuff before we keep trucking?

108
00:07:30,428 --> 00:07:31,542
Yes?

109
00:07:31,542 --> 00:07:33,017
What is the of keyword?

110
00:07:33,017 --> 00:07:37,472
Is it basically serving the same purpose there as a foreach loop or

111
00:07:37,472 --> 00:07:40,658
how exactly are you doing that particular loop?

112
00:07:40,658 --> 00:07:47,192
It's sort of a variation on the traditional for loop where

113
00:07:47,192 --> 00:07:50,957
you have an iterator which is incremented.

114
00:07:50,957 --> 00:07:55,823
The primary reason I'm using this here rather than like an

115
00:07:55,823 --> 00:07:59,375
array foreach where you pass in a function with every

116
00:07:59,375 --> 00:08:05,510
element of the array is the foreach, you can't break out of a foreach loop.

117
00:08:05,510 --> 00:08:09,331
It's going to be executed for every member of the array,

118
00:08:09,331 --> 00:08:13,240
whereas in a for-of loop you can break out early,

119
00:08:13,240 --> 00:08:15,698
which I needed to do here.

120
00:08:15,698 --> 00:08:19,673
So, I'm sort of tracking the state there,

121
00:08:19,673 --> 00:08:24,853
I assign the current todo item to that t variable,

122
00:08:24,853 --> 00:08:30,783
and then start to work with it in the for loop.

123
00:08:30,783 --> 00:08:33,328
Other questions?

124
00:08:33,328 --> 00:08:37,147
Alright, cool beans.

125
00:08:37,147 --> 00:08:40,965
Let's keep moving.

126
00:08:40,965 --> 00:08:44,546
If you have any other questions as we go along, that's great.

127
00:08:44,546 --> 00:08:54,000
I'll push up that branch with the Socket. IO changes after we're sort of off to the races on our next exercise.

