WEBVTT
1
00:00:03.713 --> 00:00:08.579
And the final bit that you are going to look at in the workshop

2
00:00:08.579 --> 00:00:13.798
session this afternoon is a tool called Rollbar.

3
00:00:13.798 --> 00:00:16.673
And, Rollbar, again, super useful.

4
00:00:16.673 --> 00:00:24.435
You can sign up for a free trial account to exercise it a little bit.

5
00:00:24.435 --> 00:00:29.135
But when you sign up, if you elect the programming language you're looking for,

6
00:00:29.135 --> 00:00:33.697
it gives you some handy-dandy instructions on how

7
00:00:33.697 --> 00:00:37.446
to get your module initialized.

8
00:00:37.446 --> 00:00:42.089
So you can start sending some test notifications pretty quickly,

9
00:00:42.089 --> 00:00:48.337
but you'll find that there is an Express middleware that you can actually plug

10
00:00:48.337 --> 00:00:53.356
directly into your application that will capture exceptions coming in to your

11
00:00:53.356 --> 00:00:57.148
Express app and send them directly to Rollbar.

12
00:00:57.148 --> 00:01:00.810
So your mission, if you would choose to accept it,

13
00:01:00.810 --> 00:01:07.689
is to sign up for a free Rollbar account and start sending any

14
00:01:07.689 --> 00:01:11.697
exceptions which are caught by Express to Rollbar.

15
00:01:11.697 --> 00:01:14.657
Now, one thing that you'll, I'm sure,

16
00:01:14.657 --> 00:01:19.581
figure out in your travels is that the order in which you add

17
00:01:19.581 --> 00:01:23.932
middleware to an Express application is significant.

18
00:01:23.932 --> 00:01:24.303
And,

19
00:01:24.303 --> 00:01:29.387
the errors that you put in place for 404 handling and for error handling

20
00:01:29.387 --> 00:01:31.942
are going to come after the routes that you define.

21
00:01:31.942 --> 00:01:40.693
So here in the routes file, this is --- oh, that's a different one.

22
00:01:40.693 --> 00:01:42.533
This is where your application routes are defined.

23
00:01:42.533 --> 00:01:44.120
We're probably not going to do it here.

24
00:01:44.120 --> 00:01:46.148
Where we're going to go is into webapp.

25
00:01:46.148 --> 00:01:49.083
js where we configure our other middleware.

26
00:01:49.083 --> 00:01:49.610
And,

27
00:01:49.610 --> 00:01:54.350
after our other routes in middleware have had a

28
00:01:54.350 --> 00:01:57.656
chance to try to handle the request,

29
00:01:57.656 --> 00:02:01.078
somewhere down beneath here we're probably going to add in

30
00:02:01.078 --> 00:02:02.748
that other middleware that's going to start capturing

31
00:02:02.748 --> 00:02:05.796
exceptions and sending them to Rollbar.

32
00:02:05.796 --> 00:02:11.732
You can test that by throwing an exception in one of the

33
00:02:11.732 --> 00:02:15.540
controllers and seeing that bubble into the middleware.

34
00:02:15.540 --> 00:02:22.308
The signature for an error handling middleware is going to be app.

35
00:02:22.308 --> 00:02:28.038
use, and then that function is going to have an arity of 4,

36
00:02:28.038 --> 00:02:33.271
I believe, which is going to be a request,

37
00:02:33.271 --> 00:02:35.769
response, the next handler,

38
00:02:35.769 --> 00:02:41.803
and then the error that was produced further up in the stack.

39
00:02:41.803 --> 00:02:45.989
The Rollbar module will, I believe,

40
00:02:45.989 --> 00:02:52.849
provide one of these types of middleware that you can just plug directly in.

41
00:02:52.849 --> 00:02:57.302
So, it actually ends up working out pretty great.

42
00:02:57.302 --> 00:03:03.157
You can also add your own custom error handling logic in this way as well.

43
00:03:03.157 --> 00:03:10.066
So the issue for that is out on GitHub, and that's going to be Issue #38.

44
00:03:10.066 --> 00:03:14.355
So, we're going to add some error handling into our Express application,

45
00:03:14.355 --> 00:03:15.824
and in the production environment,

46
00:03:15.824 --> 00:03:19.177
we're going to want to send that error information to Rollbar.

47
00:03:19.177 --> 00:03:25.020
So we should think about where it would make sense to store our

48
00:03:25.020 --> 00:03:30.870
Rollbar service key in our configuration and how to put the proper

49
00:03:30.870 --> 00:03:34.679
checks in place to make sure that it's only happening in our

50
00:03:34.679 --> 00:03:38.116
production environment rather than Dev or Test.

51
00:03:38.116 --> 00:03:42.847
So we'll take, I'm going to say, 20 minutes to break that down.

52
00:03:42.847 --> 00:03:46.141
I bet that's something we can get in place pretty quickly

53
00:03:46.141 --> 00:03:51.744
and then we can take a look at what that feedback looks

54
00:03:51.744 --> 00:03:54.358
like in the Rollbar interface.

55
00:03:54.358 --> 00:03:54.815
Yes Mark.

56
00:03:54.815 --> 00:03:57.948
Did the Beanstalk actually provision more instances?

57
00:03:57.948 --> 00:04:02.292
I don't know if I saw it actually provision more.

58
00:04:02.292 --> 00:04:04.968
Oh wait, yeah there's two, right?

59
00:04:04.968 --> 00:04:05.548
Yeah.

60
00:04:05.548 --> 00:04:10.188
So there was a third that got provisioned,

61
00:04:10.188 --> 00:04:15.082
and I think it could have gone up to six.

62
00:04:15.082 --> 00:04:19.750
But the network usage wasn't the best like indicator in this case because like

63
00:04:19.750 --> 00:04:22.617
we weren't actually sending all that much data over the wire,

64
00:04:22.617 --> 00:04:27.199
but it was more of like the deluge of requests and the CPU would have been a

65
00:04:27.199 --> 00:04:29.027
better indicator for when we should spin up more instances.

66
00:04:29.027 --> 00:04:32.572
And does it cool back down?

67
00:04:32.572 --> 00:04:34.424
Yeah, it will cool back down.

68
00:04:34.424 --> 00:04:34.733
Eventually,

69
00:04:34.733 --> 00:04:39.582
this list will drop to just one after it's determined that like

70
00:04:39.582 --> 00:04:45.132
we're not sending as much data over the wire.

71
00:04:45.132 --> 00:04:47.150
Pretty awesome!

72
00:04:47.150 --> 00:04:48.328
It's pretty handy.

73
00:04:48.328 --> 00:04:50.252
So you put a really heavy load on it.

74
00:04:50.252 --> 00:04:51.963
Can you hear the credit card machine running?

75
00:04:51.963 --> 00:04:53.232
Yeah.

76
00:04:53.232 --> 00:04:57.449
Can you have like a live websocket counter of all the

77
00:04:57.449 --> 00:05:01.344
money that's coming out of your account?

78
00:05:01.344 --> 00:05:02.111
I don't know.

79
00:05:02.111 --> 00:05:04.155
Hopefully --- I've been spamming it a lot,

80
00:05:04.155 --> 00:05:08.851
but it seems like I haven't used up my credits yet,

81
00:05:08.851 --> 00:05:14.000
so we'll see. I'm willing to take that one for the team though.

