1
00:00:04,180 --> 00:00:06,153
So the first thing that I want to do before we get started

2
00:00:06,153 --> 00:00:10,673
is to ensure everybody is at a good place with their local

3
00:00:10,673 --> 00:00:11,426
development environments.

4
00:00:11,426 --> 00:00:15,170
So that GitHub repository that I sent out before contains what

5
00:00:15,170 --> 00:00:17,834
should be at this point a fully functional Node.

6
00:00:17,834 --> 00:00:20,538
js web application that you can run locally.

7
00:00:20,538 --> 00:00:25,206
So, if you head out, if you haven't gone there already,

8
00:00:25,206 --> 00:00:28,696
it's actually up on my GitHub repository,

9
00:00:28,696 --> 00:00:29,587
guthub.

10
00:00:29,587 --> 00:00:30,479
com/kwhinnery/todomvc-plusplus,

11
00:00:30,479 --> 00:00:37,988
and thanks to some great QA from here in the room earlier I believe

12
00:00:37,988 --> 00:00:41,306
that README should take you all the way through actually getting

13
00:00:41,306 --> 00:00:43,929
this thing set up locally on your laptop,

14
00:00:43,929 --> 00:00:47,125
and I think that is the first step that we need to accomplish

15
00:00:47,125 --> 00:00:49,211
before we get on to some of the other things.

16
00:00:49,211 --> 00:00:52,617
So we'll take as much time as we need, hopefully not to much time,

17
00:00:52,617 --> 00:00:55,993
just to make sure that we get everybody with a functioning local

18
00:00:55,993 --> 00:00:59,741
development environment so they can start playing along at home.

19
00:00:59,741 --> 00:01:03,027
So, let's go ahead and do that.

20
00:01:03,027 --> 00:01:07,765
And I'll be coming around to help folks as they might need help.

21
00:01:07,765 --> 00:01:12,584
The one potential tripping point for a local development environment may

22
00:01:12,584 --> 00:01:16,731
or may not be getting like Postgres up and running.

23
00:01:16,731 --> 00:01:20,292
Postgres can be kind of a bear to configure for local development,

24
00:01:20,292 --> 00:01:24,217
so if you want to take sort of a shortcut,

25
00:01:24,217 --> 00:01:29,983
there is a service out there you can sign up for called ElephantSQL,

26
00:01:29,983 --> 00:01:34,824
and you can actually provision a shared Postgres database for free,

27
00:01:34,824 --> 00:01:41,546
and we can drop that database configuration directly into your application.

28
00:01:41,546 --> 00:01:43,554
So, I would invite you to go through the README,

29
00:01:43,554 --> 00:01:45,892
start taking those steps if you haven't already,

30
00:01:45,892 --> 00:01:47,627
and while you're doing that,

31
00:01:47,627 --> 00:01:51,099
I'll very briefly kind of go through the structure of the

32
00:01:51,099 --> 00:01:55,192
application project as it exists today so you have a sense

33
00:01:55,192 --> 00:01:57,459
of where to look for what.

34
00:01:57,459 --> 00:02:00,977
So, I'll browse it out here on GitHub,

35
00:02:00,977 --> 00:02:07,116
and the bits that I'll draw your attention to right away are this bit,

36
00:02:07,116 --> 00:02:10,129
the Gruntfile, which we'll dive into a little bit later,

37
00:02:10,129 --> 00:02:13,673
and that's sort of the nexus for most of the administrative

38
00:02:13,673 --> 00:02:16,389
commands that we'll run for this application.

39
00:02:16,389 --> 00:02:18,579
Grunt is a general purpose task runner, again,

40
00:02:18,579 --> 00:02:20,998
that we'll dive into in more depth later.

41
00:02:20,998 --> 00:02:22,399
We have a package.

42
00:02:22,399 --> 00:02:26,406
json, which contains all of our project's dependencies that you'll be installing,

43
00:02:26,406 --> 00:02:29,176
and then we have a bin directory,

44
00:02:29,176 --> 00:02:35,719
which contains the JavaScript file which actually launches the HTTP server,

45
00:02:35,719 --> 00:02:38,128
which powers our application.

46
00:02:38,128 --> 00:02:41,698
And then we also have --- right now we just have one custom

47
00:02:41,698 --> 00:02:44,106
Grunt task located in this directory as well,

48
00:02:44,106 --> 00:02:47,919
but anything having to do with any custom code we're going to

49
00:02:47,919 --> 00:02:50,551
write for the command line lives in there.

50
00:02:50,551 --> 00:02:54,002
The config directory, this is how we use it.

51
00:02:54,002 --> 00:02:59,195
It's kind of --- it's sort of loosely based on Django configuration,

52
00:02:59,195 --> 00:03:01,607
but we have a this index.

53
00:03:01,607 --> 00:03:06,484
js, which has soft of the global defaults for the application's configuration,

54
00:03:06,484 --> 00:03:11,617
and then we have a configuration files with overrides for the

55
00:03:11,617 --> 00:03:14,229
development production and test environments.

56
00:03:14,229 --> 00:03:15,851
So you can dig through that if you like.

57
00:03:15,851 --> 00:03:17,338
But we also have this file, user.

58
00:03:17,338 --> 00:03:17,745
save.

59
00:03:17,745 --> 00:03:23,705
js, which doesn't have anything in it right now, but if you create a user.

60
00:03:23,705 --> 00:03:25,151
js for local development,

61
00:03:25,151 --> 00:03:29,078
you can override any of the configuration settings there,

62
00:03:29,078 --> 00:03:33,177
such as a custom database URL perhaps,

63
00:03:33,177 --> 00:03:36,357
if you go the route of spinning up an ElphantSQL

64
00:03:36,357 --> 00:03:40,335
database rather than having a local one.

65
00:03:40,335 --> 00:03:43,358
So, configuration lives there.

66
00:03:43,358 --> 00:03:44,918
We have this db directory,

67
00:03:44,918 --> 00:03:48,743
and the primary bit that you'll be interested in is this

68
00:03:48,743 --> 00:03:52,916
is where we've configured our ORM to place the migration

69
00:03:52,916 --> 00:03:54,829
files for this application.

70
00:03:54,829 --> 00:03:58,899
We are using a relational database for this application,

71
00:03:58,899 --> 00:04:01,417
so as we modify the database,

72
00:04:01,417 --> 00:04:05,332
we'll have to create migrations to move the database from one state to another.

73
00:04:05,332 --> 00:04:10,261
If you've used frameworks like Rails or maybe Hibernate before,

74
00:04:10,261 --> 00:04:14,250
you're kind of familiar with this concept.

75
00:04:14,250 --> 00:04:18,307
The src directory is where most of the fun stuff lives.

76
00:04:18,307 --> 00:04:25,146
The browser directory has all of the front-end JavaScript code and SCSS files.

77
00:04:25,146 --> 00:04:28,637
The static directory contains things that will be copied over

78
00:04:28,637 --> 00:04:32,601
verbatim into the web route of your application.

79
00:04:32,601 --> 00:04:38,143
The server directory contains our Express web app,

80
00:04:38,143 --> 00:04:44,229
our Mocha tests for our back-end code.

81
00:04:44,229 --> 00:04:47,111
It also contains the model directory,

82
00:04:47,111 --> 00:04:51,662
which configures our database connection and defines the

83
00:04:51,662 --> 00:04:54,950
model objects for our application.

84
00:04:54,950 --> 00:04:58,125
We have controllers, which have the routes for our application,

85
00:04:58,125 --> 00:04:59,433
and this todos controller,

86
00:04:59,433 --> 00:05:03,378
which contains --- which actually powers all of the routes in the application.

87
00:05:03,378 --> 00:05:06,440
If you don't know what these things are, don't worry.

88
00:05:06,440 --> 00:05:10,186
We'll kind of dive into more of them as we go.

89
00:05:10,186 --> 00:05:12,541
And then we also have the views directory,

90
00:05:12,541 --> 00:05:16,301
which actually has the HTML which will server the

91
00:05:16,301 --> 00:05:19,162
front end for this application.

92
00:05:19,162 --> 00:05:21,989
And there is a tiny bit of shared code.

93
00:05:21,989 --> 00:05:22,931
In my experience,

94
00:05:22,931 --> 00:05:25,946
the opportunity for code reuse on client and server is

95
00:05:25,946 --> 00:05:27,954
not maybe as great as you would hope.

96
00:05:27,954 --> 00:05:30,701
The bigger win is the ability to write the same kind of

97
00:05:30,701 --> 00:05:32,476
code on both client and the server,

98
00:05:32,476 --> 00:05:38,924
but there is a tiny bit of affordance for shared code across platforms.

99
00:05:38,924 --> 00:05:41,857
And if you have any questions about other stuff as we go along,

100
00:05:41,857 --> 00:05:49,884
I'd be happy to go specifically into any decisions or the other bits there,

101
00:05:49,884 --> 00:05:53,827
but many of them we'll go over as we go through the course.

102
00:05:53,827 --> 00:05:54,858
So, at this point,

103
00:05:54,858 --> 00:05:58,457
what I would like to do is ensure that everybody gets the

104
00:05:58,457 --> 00:06:04,191
application going locally to the point where they can run Grunt

105
00:06:04,191 --> 00:06:07,333
in the top-level application directory,

106
00:06:07,333 --> 00:06:11,761
which will fire up a couple of neat tools,

107
00:06:11,761 --> 00:06:16,148
which will monitor your application project for changes and then execute

108
00:06:16,148 --> 00:06:21,093
compilation steps or relaunching the application based on changes.

109
00:06:21,093 --> 00:06:28,967
So what you should be able to do with a running Postgres database and a

110
00:06:28,967 --> 00:06:35,080
valid database connection is have a persistent set of todos that will stick

111
00:06:35,080 --> 00:06:39,547
with you across page refreshes because in this instance they're actually

112
00:06:39,547 --> 00:06:41,519
being stored in a Postgres database.

113
00:06:41,519 --> 00:06:43,314
So this is the step that I would like to get everybody to,

114
00:06:43,314 --> 00:06:46,381
so we'll spend a little bit of time doing that before we dive into

115
00:06:46,381 --> 00:06:49,255
some of the code that drives the web server.

116
00:06:49,255 --> 00:06:49,575
Alright,

117
00:06:49,575 --> 00:06:54,736
so I re-mic'd myself because I was talking about the option of using

118
00:06:54,736 --> 00:07:00,493
ElphantSQL rather than a local Postgres database.

119
00:07:00,493 --> 00:07:07,554
It looks like my configuration might not be totally sound as yet because I

120
00:07:07,554 --> 00:07:11,257
haven't run the migrations because I changed my database URL,

121
00:07:11,257 --> 00:07:14,264
but I didn't run the migrations.

122
00:07:14,264 --> 00:07:17,767
So, I'm going run sequalize db:migrate,

123
00:07:17,767 --> 00:07:29,738
and that should go across the network and update my ElephantSQL database.

124
00:07:29,738 --> 00:07:32,666
Show us where you changed the config to.

125
00:07:32,666 --> 00:07:37,056
And again, where I changed that config was I created a file called user.

126
00:07:37,056 --> 00:07:43,883
js in the config directory, and I didn't override for this databaseUrl property.

127
00:07:43,883 --> 00:07:45,403
And you can actually copy the configuration,

128
00:07:45,403 --> 00:07:48,597
like say from the test environment and just bring that over,

129
00:07:48,597 --> 00:07:55,172
and then you can paste in that Postgres URL you get from ElephantSQL.

130
00:07:55,172 --> 00:08:02,140
And now when I refresh, I get an empty list of todos, which is okay.

131
00:08:02,140 --> 00:08:04,999
And if I go back to the UI,

132
00:08:04,999 --> 00:08:09,173
I should start being able to pop in some todo list items.

133
00:08:09,173 --> 00:08:12,047
So the steps there would be to update the

134
00:08:12,047 --> 00:08:15,393
configuration to your ElephantSQL databaseUrl,

135
00:08:15,393 --> 00:08:21,666
to go out to the terminal and execute sequalize db:migrate,

136
00:08:21,666 --> 00:08:27,359
and then you can rerun your development server with Grunt,

137
00:08:27,359 --> 00:08:32,813
and you should be off to the races from there.

138
00:08:32,813 --> 00:08:37,287
What is the get path to ElephantSQL?

139
00:08:37,287 --> 00:08:40,682
It is --- if you go to elephantsql.

140
00:08:40,682 --> 00:08:46,529
com, you can sign up for an account, and then you can create your own.

141
00:08:46,529 --> 00:08:50,751
What are the limitations on ElephantSQL as far use?

142
00:08:50,751 --> 00:08:57,674
The free database is only 20MB, so that would be the big one right there,

143
00:08:57,674 --> 00:09:03,509
but you can create multiple free databases if you would like.

144
00:09:03,509 --> 00:09:05,502
Sharding across frees.

145
00:09:05,502 --> 00:09:10,207
(Laughing) Yes, maybe it has some other fun features as well,

146
00:09:10,207 --> 00:09:16,858
but use this a couple times in workshops just for something quick and dirty.

147
00:09:16,858 --> 00:09:17,402
Alright,

148
00:09:17,402 --> 00:09:23,927
so we have a couple folks online reporting an issue that was

149
00:09:23,927 --> 00:09:26,164
--- if you loaded up the README earlier,

150
00:09:26,164 --> 00:09:29,140
we actually discovered some bugs in it, I apologize,

151
00:09:29,140 --> 00:09:31,740
here in the room earlier this morning.

152
00:09:31,740 --> 00:09:34,762
If you're loading up the page and you don't see --- and

153
00:09:34,762 --> 00:09:39,361
the style sheets aren't being loaded, run grunt collect_static,

154
00:09:39,361 --> 00:09:43,431
and collect_static has and underscore between the collect and static.

155
00:09:43,431 --> 00:09:46,871
The README on GitHub has been updated to reflect this,

156
00:09:46,871 --> 00:09:51,122
but that'll copy over the static CSS files that you

157
00:09:51,122 --> 00:09:54,097
need to be in that public directory.

158
00:09:54,097 --> 00:09:59,145
So, the README has been updated to reflect that.

159
00:09:59,145 --> 00:10:02,072
What I'll show one more time is the fastest path to success with Postgres,

160
00:10:02,072 --> 00:10:06,272
which I think is where most people are tripping up.

161
00:10:06,272 --> 00:10:09,030
If you're on the repo and following the README,

162
00:10:09,030 --> 00:10:10,636
we'll start kind of right from the beginning.

163
00:10:10,636 --> 00:10:11,396
You're still going to want to do this.

164
00:10:11,396 --> 00:10:13,817
After you download the code, if you haven't already,

165
00:10:13,817 --> 00:10:18,576
you'll want to do npm install in the directory in which you downloaded the code.

166
00:10:18,576 --> 00:10:24,082
You'll want to do npm install -g grunt-cli sequelize-cli,

167
00:10:24,082 --> 00:10:26,792
and that'll put two new commands on your system path.

168
00:10:26,792 --> 00:10:30,286
One is called Grunt, and that's the task runner that we're going to be using,

169
00:10:30,286 --> 00:10:31,828
and another is called Sequelize,

170
00:10:31,828 --> 00:10:34,939
and that will control the database migrations and the

171
00:10:34,939 --> 00:10:38,078
other stuff that you'll need to do later.

172
00:10:38,078 --> 00:10:39,709
And then for setting up the database,

173
00:10:39,709 --> 00:10:44,680
if you don't want to go the route or were not successful going the route of

174
00:10:44,680 --> 00:10:49,839
getting a local Postgres database going with these instructions,

175
00:10:49,839 --> 00:10:56,636
simply forego these instructions and create a database using ElephantSQL,

176
00:10:56,636 --> 00:11:02,591
which you can sign up for a free account at elephantsql.

177
00:11:02,591 --> 00:11:03,080
com.

178
00:11:03,080 --> 00:11:05,911
Then, once you have signed up for one,

179
00:11:05,911 --> 00:11:11,053
the first thing you're going to see is a URL for your database info,

180
00:11:11,053 --> 00:11:17,728
and you can use this connection string in lieu of a local Postgres database.

181
00:11:17,728 --> 00:11:22,765
So to connect to this database rather than one that's running locally,

182
00:11:22,765 --> 00:11:24,800
inside your application folder here,

183
00:11:24,800 --> 00:11:29,369
and this is the code that you downloaded from GitHub or

184
00:11:29,369 --> 00:11:34,518
you cloned when you got the repository, you'll create a file called user.

185
00:11:34,518 --> 00:11:42,391
js, and you can initialize the contents of that file with what's in the test.

186
00:11:42,391 --> 00:11:44,939
js file or similar,

187
00:11:44,939 --> 00:11:52,984
and then you will copy in your ElephantSQL database string into this file,

188
00:11:52,984 --> 00:11:57,121
and then the application will connect to that ElephantSQL

189
00:11:57,121 --> 00:12:00,340
database rather than one that's running locally.

190
00:12:00,340 --> 00:12:01,587
After you do that,

191
00:12:01,587 --> 00:12:06,922
then you can continue along with rest of the instructions in the README.

192
00:12:06,922 --> 00:12:11,346
So you will then do sequelize db:migrate,

193
00:12:11,346 --> 00:12:13,840
and then you will do grunt collect_static,

194
00:12:13,840 --> 00:12:19,052
and then at that point you should be able to run the application

195
00:12:19,052 --> 00:12:22,127
locally just by running the grunt command.

196
00:12:22,127 --> 00:12:25,826
So, we'll make sure that we get everybody to that step,

197
00:12:25,826 --> 00:12:26,499
but again,

198
00:12:26,499 --> 00:12:29,424
I think the fastest path to success is signing up for --- if

199
00:12:29,424 --> 00:12:30,821
you're struggling with Postgres locally,

200
00:12:30,821 --> 00:12:35,935
sign up for an account here on ElephantSQL and just go ahead and use that.

201
00:12:35,935 --> 00:12:40,369
It'll be totally fine for our local development purposes.

202
00:12:40,369 --> 00:12:44,052
Alright, so we will come around, make sure if anybody still needs help after,

203
00:12:44,052 --> 00:12:46,622
and when we get into the next exercise,

204
00:12:46,622 --> 00:12:52,000
we'll make sure everybody starts by getting the local development environment ready to go.

