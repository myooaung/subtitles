WEBVTT
1
00:00:04.048 --> 00:00:08.715
And then once that security group mumbo jumbo was configured,

2
00:00:08.715 --> 00:00:13.517
then we --- at that point we pretty much had everything we

3
00:00:13.517 --> 00:00:15.719
needed to actually deploy the application.

4
00:00:15.719 --> 00:00:22.163
So we had to complete the configuration of our software.

5
00:00:22.163 --> 00:00:25.686
So if we go back to like our actual Elastic

6
00:00:25.686 --> 00:00:31.743
Beanstalk application in Configuration, we changed our software configuration.

7
00:00:31.743 --> 00:00:38.311
We changed the version of Node that we're running on our instances to 622.

8
00:00:38.311 --> 00:00:43.473
We created a virtual directory for our static assets so the

9
00:00:43.473 --> 00:00:47.242
NGINX proxy server on each of our instances will serve static

10
00:00:47.242 --> 00:00:50.054
assets rather than Node doing it.

11
00:00:50.054 --> 00:00:55.321
The Express static server is much slower than NGINX would be.

12
00:00:55.321 --> 00:00:58.954
So we configure that directory so NGINX will serve up our

13
00:00:58.954 --> 00:01:02.793
JavaScript and CSS and images and what have you.

14
00:01:02.793 --> 00:01:04.402
And then we created three environment properties.

15
00:01:04.402 --> 00:01:09.659
We set the NODE_ENV to production,

16
00:01:09.659 --> 00:01:16.948
we set the NPM_CONFIG_PRODUCTION value to true so that when Elastic

17
00:01:16.948 --> 00:01:22.094
Beanstalk does npm install on our application it only installs the

18
00:01:22.094 --> 00:01:24.846
dependencies that are necessary for production,

19
00:01:24.846 --> 00:01:32.492
and then we also created a Postgres connection URL,

20
00:01:32.492 --> 00:01:35.658
which we are here storing as a system environment variable

21
00:01:35.658 --> 00:01:38.330
that we created through the interface,

22
00:01:38.330 --> 00:01:45.298
but an alternate way that you could do that is to store this connection

23
00:01:45.298 --> 00:01:49.151
string somewhere else outside of the administrative interface.

24
00:01:49.151 --> 00:01:53.179
You could store it in an S3 bucket or something of that nature.

25
00:01:53.179 --> 00:01:57.335
Because this database can't accept connections from the public internet,

26
00:01:57.335 --> 00:02:00.761
it's like not the end of the world necessarily,

27
00:02:00.761 --> 00:02:05.498
but the proper way to do this with any secret value like this would be

28
00:02:05.498 --> 00:02:09.752
to have outside of the administrative interface.

29
00:02:09.752 --> 00:02:17.033
For our purposes, it's a decent solution.

30
00:02:17.033 --> 00:02:24.566
So, after that was configured --- Bruce asks,

31
00:02:24.566 --> 00:02:30.835
does anyone know what the needed environment properties

32
00:02:30.835 --> 00:02:34.589
are for the todomvc config screen?

33
00:02:34.589 --> 00:02:36.021
That would be these three.

34
00:02:36.021 --> 00:02:39.382
We need --- the environment variables that you need in

35
00:02:39.382 --> 00:02:42.546
production are the NODE_ENV set to production,

36
00:02:42.546 --> 00:02:47.241
the NPM_CONFIG_PRODUCTION flag set to true,

37
00:02:47.241 --> 00:02:50.371
and then a RDS_CONNECTION_URL,

38
00:02:50.371 --> 00:02:56.690
which is the database connection string for the actual Postgres database.

39
00:02:56.690 --> 00:03:03.902
And that URL string comes from --- the URL string for RDS comes from

40
00:03:03.902 --> 00:03:06.891
configuration for the RDS instance that we created.

41
00:03:06.891 --> 00:03:18.898
So if we go to our Instances over here, here's the one that we created.

42
00:03:18.898 --> 00:03:21.235
If we inspect its properties,

43
00:03:21.235 --> 00:03:26.537
we can see what's labeled as the Writer Endpoint over here,

44
00:03:26.537 --> 00:03:32.659
and that is essentially the internal address of that particular database.

45
00:03:32.659 --> 00:03:41.497
And when we created the database, we created a user, which we called awsuser.

46
00:03:41.497 --> 00:03:52.641
So we included those credentials in the format Postgres://username:

47
00:03:52.641 --> 00:04:01.964
password at this URL:5432 at this URL port 5432/todos,

48
00:04:01.964 --> 00:04:08.649
which is the name of the database that we needed to connect to.

49
00:04:08.649 --> 00:04:17.624
So that is the full genesis of that RDS connection string.

50
00:04:17.624 --> 00:04:21.782
So if you create an instance like that, and you're in development,

51
00:04:21.782 --> 00:04:23.071
and you just let it sit for a while,

52
00:04:23.071 --> 00:04:26.003
does it just go away after a month or something of inactivity,

53
00:04:26.003 --> 00:04:28.317
or does it stay there forever?

54
00:04:28.317 --> 00:04:30.688
It'll stay there forever.

55
00:04:30.688 --> 00:04:31.874
So yeah,

56
00:04:31.874 --> 00:04:37.344
you can --- the default configuration is that you can

57
00:04:37.344 --> 00:04:44.500
only ever have one instance running, so we can take a look at that.

58
00:04:44.500 --> 00:04:50.831
So, that is actually like an Auto Scaling or like a scaling configuration.

59
00:04:50.831 --> 00:05:00.003
So, if we go in here for Scaling, we have like the minimum instance count of 1,

60
00:05:00.003 --> 00:05:11.564
and then we also have the maximum of 4 configured right now.

61
00:05:11.564 --> 00:05:17.675
(Audience comment- inaudible) Yeah, I know.

62
00:05:17.675 --> 00:05:18.998
I'm too excited.

63
00:05:18.998 --> 00:05:28.844
I can't sit down --- there's --- with this must raw AWS action going on.

64
00:05:28.844 --> 00:05:36.967
So yeah, lots of yak shaving at the beginning.

65
00:05:36.967 --> 00:05:41.961
But when you get past that, as I said,

66
00:05:41.961 --> 00:05:46.786
we're really in the situation of building your application,

67
00:05:46.786 --> 00:05:51.400
zipping it up, and deploying it with eb deploy.

68
00:05:51.400 --> 00:05:53.057
There are different options you can do.

69
00:05:53.057 --> 00:05:55.523
You can deploy applications to different environments.

70
00:05:55.523 --> 00:06:00.532
There's lots of flexibility that you have with the platform,

71
00:06:00.532 --> 00:06:18.752
but in terms of the workflow, it improves significantly from here on out.

72
00:06:18.752 --> 00:06:34.981
So was that helpful to go through one more time?

73
00:06:34.981 --> 00:06:37.316
So yeah, there we have it.

74
00:06:37.316 --> 00:06:42.591
I think I've successfully made sure that like 50% of you will run screaming

75
00:06:42.591 --> 00:06:46.761
for tomorrow with dropping this AWS bomb on you today.

76
00:06:46.761 --> 00:06:52.583
But tomorrow, now that we have this bad boy up in production,

77
00:06:52.583 --> 00:06:56.956
we're going to be focusing mostly on more of the application stack.

78
00:06:56.956 --> 00:07:02.480
We'll be looking at the front-end toolchain.

79
00:07:02.480 --> 00:07:04.483
We'll be learning a little bit about Vue.

80
00:07:04.483 --> 00:07:09.082
js and how we implement a rich front end with Vue.

81
00:07:09.082 --> 00:07:12.179
We'll be adding some features.

82
00:07:12.179 --> 00:07:15.361
We might've successfully got our back-end application

83
00:07:15.361 --> 00:07:17.201
working to set that completed flag,

84
00:07:17.201 --> 00:07:20.984
but we still have to do some work in the user interface to make that happen,

85
00:07:20.984 --> 00:07:24.239
so we'll be doing some work with Vue.

86
00:07:24.239 --> 00:07:25.053
js tomorrow.

87
00:07:25.053 --> 00:07:28.848
We'll be talking a little bit about monitoring a production environment.

88
00:07:28.848 --> 00:07:32.932
We'll add some modest real-time features with Socket.

89
00:07:32.932 --> 00:07:38.649
IO to our todo application so we can see how that plays out

90
00:07:38.649 --> 00:07:41.354
in our production environment as well.

91
00:07:41.354 --> 00:07:47.809
Nothing too crazy, but we will be adding a little bit of real-time spice,

92
00:07:47.809 --> 00:07:52.499
and we'll be looking at how to implement web analytics.

93
00:07:52.499 --> 00:07:56.242
Because we're using Node and Browserify,

94
00:07:56.242 --> 00:08:00.001
we have kind of a nice way to implement Google Analytics

95
00:08:00.001 --> 00:08:04.376
in our application both for custom event tracking and for

96
00:08:04.376 --> 00:08:06.683
basic stuff like page views.

97
00:08:06.683 --> 00:08:11.478
So we'll implement universal analytics in the front end as well.

98
00:08:11.478 --> 00:08:17.114
So yeah, I think --- you think this is definitely the hardest part,

99
00:08:17.114 --> 00:08:22.506
so if you want to keep banging on it, we definitely still have some time.

100
00:08:22.506 --> 00:08:27.518
I'm happy to go through any of those steps again for anybody.

101
00:08:27.518 --> 00:08:35.297
Question if there is going to be merge for the exercise3 solution?

102
00:08:35.297 --> 00:08:37.272
And there definitely will be.

103
00:08:37.272 --> 00:08:43.323
I'll push out my local changes for the database piece in the migration.

104
00:08:43.323 --> 00:08:51.536
We have a question if we can work along with our local environment tomorrow?

105
00:08:51.536 --> 00:08:52.551
You absolutely can.

106
00:08:52.551 --> 00:09:01.404
You don't have to use the production environment if you don't want to tomorrow.

107
00:09:01.404 --> 00:09:09.597
You can just use your local development environment.

108
00:09:09.597 --> 00:09:11.826
Alright, with that, I think I'm going to un-mic,

109
00:09:11.826 --> 00:09:15.931
but I will stay on the chat and stay in the room for

110
00:09:15.931 --> 00:09:18.439
anybody that wants to keep on trucking.

111
00:09:18.439 --> 00:09:22.283
If you have questions on the deployment stuff or on the any

112
00:09:22.283 --> 00:09:24.665
of the Node stuff that we covered today,

113
00:09:24.665 --> 00:09:29.513
I'd be happy to answer any questions that you have or talk about

114
00:09:29.513 --> 00:09:32.328
specific scenarios that you're interested in.

115
00:09:32.328 --> 00:09:34.377
I know that was a lot, I hope it was helpful,

116
00:09:34.377 --> 00:09:37.218
but once you kind of get through all this stuff,

117
00:09:37.218 --> 00:09:39.372
as we'll actually see tomorrow,

118
00:09:39.372 --> 00:09:44.391
this environment can actually take a decent beating much more than you

119
00:09:44.391 --> 00:09:53.000
would think out of compute resources of this size. So we'll beat up on it a little bit tomorrow and see how that works as well.

