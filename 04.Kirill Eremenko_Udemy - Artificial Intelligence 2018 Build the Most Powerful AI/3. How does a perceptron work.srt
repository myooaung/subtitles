1
00:00:00,500 --> 00:00:03,410
Hello and welcome back to the course on augmented random search.

2
00:00:03,500 --> 00:00:09,290
In today's world we're going to talk about the perception and we'll find out exactly how it works and

3
00:00:09,290 --> 00:00:10,120
what it is.

4
00:00:10,370 --> 00:00:13,040
So in the various tutorial this is where we left off.

5
00:00:13,040 --> 00:00:18,370
So let's quickly recap the environment such as the magical environment will give us certain inputs.

6
00:00:18,380 --> 00:00:25,910
For example the forces that are applied to the feet of the model then artificial intelligence comes

7
00:00:25,910 --> 00:00:29,220
in at that point it needs to analyze the inputs.

8
00:00:29,270 --> 00:00:35,240
There might be three of them might be 20 maybe 100 inputs need to analyze needs to analyze the inputs

9
00:00:35,540 --> 00:00:42,080
and perform or output certain decisions on what is is it going to do is it going to tell the model to

10
00:00:42,830 --> 00:00:50,330
contracture muscles it is going to tell it to lift this leg and move this right finger or foot this

11
00:00:50,330 --> 00:00:55,100
way and so on and then it will have certain outputs that will control them.

12
00:00:55,130 --> 00:00:56,800
Again that can be sort of output.

13
00:00:56,810 --> 00:01:01,200
For instance would Jako humanoid model has 22 degrees of freedom.

14
00:01:01,550 --> 00:01:09,490
Then we have the outputs the outputs go back into the environment and they control the model or the

15
00:01:09,490 --> 00:01:16,130
agent in its quest in order to walk successfully or run or whatever it's doing.

16
00:01:16,390 --> 00:01:22,010
So that's overall the structure what hides behind this like box of a work.

17
00:01:22,030 --> 00:01:22,840
What is it.

18
00:01:22,840 --> 00:01:26,290
Well this is where a person perception comes in.

19
00:01:26,410 --> 00:01:33,970
So this is our perception that we hear in the air as we use a simple perception which is basically just

20
00:01:34,000 --> 00:01:39,730
taking these inputs and applying certain weights to them and then adding them up.

21
00:01:39,730 --> 00:01:48,720
So as you can see in this case our output will be the sum of x 1 times w 1 plus x 2 times W2 plus x

22
00:01:48,730 --> 00:01:49,890
three times three.

23
00:01:49,930 --> 00:01:51,530
That's what the sum symbol means.

24
00:01:51,670 --> 00:01:57,460
And we add them up at those Wadewitz get the weighted some of the R inputs and that's our output.

25
00:01:57,520 --> 00:02:05,230
So our inputs and all of those forces all the whole stack situation in the environment can be described

26
00:02:05,230 --> 00:02:11,260
if a vector of inputs is just a vector of numbers and our output is for instance this output might be

27
00:02:11,260 --> 00:02:16,930
connected to the the arm of the model to the right arm.

28
00:02:16,930 --> 00:02:23,770
And so this is what we're going to do with the right arm is basically simply a sum of the weighted inputs.

29
00:02:23,800 --> 00:02:28,060
That's all it is and that's what a person perception is.

30
00:02:28,240 --> 00:02:33,310
And now we're going to we're going to remove these labels are here so that it's not distracting for

31
00:02:33,310 --> 00:02:33,880
us.

32
00:02:34,220 --> 00:02:39,640
Now that's a very simple single output for perception.

33
00:02:39,640 --> 00:02:43,190
Now we're going to increase the complexity a bit.

34
00:02:43,210 --> 00:02:49,980
For instance here we've got a perception with two outputs but the concept still remains the same.

35
00:02:50,110 --> 00:02:52,360
In each case we will have certain weights.

36
00:02:52,360 --> 00:02:58,060
Now they have to be longer of an index so that we know which way applies where in this case the three

37
00:02:58,060 --> 00:02:58,960
weights apply here.

38
00:02:58,960 --> 00:03:07,100
So it's the sum of x X-1 times w 1 1 plus x 2 times w 2 1 plus x 3 times w 3 1.

39
00:03:07,120 --> 00:03:13,920
So the first index means which input this weight is related to the second index means which output it's

40
00:03:13,930 --> 00:03:18,640
related to and for the second output we're going to have a different set of weights.

41
00:03:18,850 --> 00:03:24,320
1 2 2 2 and 3 2 and they're all going to come into this output.

42
00:03:24,520 --> 00:03:27,360
And there we go that's our output.

43
00:03:27,370 --> 00:03:33,490
So for instance this could be the left arm this could be the right arm or the left foot right foot so

44
00:03:33,490 --> 00:03:36,960
basically it will be telling based on this number.

45
00:03:37,300 --> 00:03:42,670
This number will be interpreted by the environment and also want our AI.

46
00:03:42,760 --> 00:03:43,820
So this is our AI.

47
00:03:43,840 --> 00:03:50,480
Basically what our AI once the model to do is it wanted to put the left foot forward with a foot back.

48
00:03:50,650 --> 00:03:53,280
And of course this can get more complex.

49
00:03:54,020 --> 00:03:57,360
You can see here that we can have more inputs.

50
00:03:57,370 --> 00:04:03,610
We can have more outputs outputs can number about can be greater the number of inputs it doesn't really

51
00:04:03,610 --> 00:04:04,240
matter.

52
00:04:04,480 --> 00:04:11,230
And so here again we're going to have the sum of weights the weighted sum of all of these inputs of

53
00:04:11,230 --> 00:04:13,720
course the weights are going to be unique.

54
00:04:13,720 --> 00:04:17,470
So as you can see the number of weights is growing quite fast here.

55
00:04:17,980 --> 00:04:20,650
So in this case we have for each one there are four of these.

56
00:04:20,650 --> 00:04:24,280
Verify these for each one we have for each one of these.

57
00:04:24,280 --> 00:04:25,600
We have five weights.

58
00:04:25,660 --> 00:04:27,190
We have 20 weights in total.

59
00:04:27,190 --> 00:04:33,550
That's why instead of writing them out separately we're writing them out as a matrix as matrix as you

60
00:04:33,550 --> 00:04:35,430
can see their road around out here.

61
00:04:35,440 --> 00:04:39,280
So there are a weights and Basen index you can tell.

62
00:04:39,280 --> 00:04:45,910
So for instance W 2 3 is the way that will be applied to in part number two in the calculation of our

63
00:04:46,000 --> 00:04:51,970
number three in the some of that has been calculated so for in order to calculate output number three

64
00:04:52,360 --> 00:04:56,150
we're going to have to use the column of weights.

65
00:04:56,380 --> 00:05:01,910
So w want 3 will be applied to this there'll be two three applied to this though with this double for

66
00:05:01,910 --> 00:05:10,480
three to this all that will be added up and we'll get the output for this for this output which might

67
00:05:10,480 --> 00:05:14,030
mean something specific which is something specific for the world.

68
00:05:14,260 --> 00:05:22,060
So that's basically how a percent perceptual perception works takes the inputs applies a weighted sum

69
00:05:22,690 --> 00:05:24,740
to get each one of the outputs.

70
00:05:25,270 --> 00:05:28,530
And there's nothing more complex than that.

71
00:05:28,570 --> 00:05:33,940
And that's the beauty of this algorithm there is that there is no this is actually called shallow learning

72
00:05:33,940 --> 00:05:37,970
because we don't have any hidden layers is only an input and output layer.

73
00:05:38,200 --> 00:05:44,650
And because of that it is say it's a sham because it's a shallow learning algorithm.

74
00:05:44,650 --> 00:05:53,160
It's much faster and yet it's so simple and still get some great results as we will discuss further.

75
00:05:53,800 --> 00:06:00,040
And I normally don't go into code that's a LUNs area of expertise but I just wanted to give you a heads

76
00:06:00,040 --> 00:06:00,190
up.

77
00:06:00,190 --> 00:06:06,240
So this is the code that you will see in the practical tutorials and I wanted to show you exactly where

78
00:06:06,240 --> 00:06:13,210
the perception is here because you kind of like miss it in the code and then like look through it.

79
00:06:13,350 --> 00:06:15,780
We don't have a specific name.

80
00:06:15,780 --> 00:06:17,430
Overclass for Perceptor.

81
00:06:17,580 --> 00:06:22,520
But it's really interesting to kind of like search for it on your own and look for it.

82
00:06:22,530 --> 00:06:29,100
When I was watching unflustered Rose I really had fun like relating back to the theory of ERs and understanding

83
00:06:29,100 --> 00:06:32,590
where each component is and where the perception is here.

84
00:06:32,670 --> 00:06:34,800
It's hiding in this line.

85
00:06:34,950 --> 00:06:37,620
So this is the perception.

86
00:06:37,680 --> 00:06:40,580
So this what we just created here which we just describe.

87
00:06:40,740 --> 00:06:42,170
That's our perception.

88
00:06:42,450 --> 00:06:44,130
So that's the inputs.

89
00:06:44,610 --> 00:06:51,210
That's the matrix multiplication and that's the way it's all of the matrix and then return means that

90
00:06:51,330 --> 00:06:54,890
it is outputting the results of that output.

91
00:06:54,900 --> 00:06:58,600
And so what is made why is Matrix matrix multiplication here.

92
00:06:58,710 --> 00:07:05,040
Well because if we go back what we can see here is we've got a vector of inputs.

93
00:07:05,160 --> 00:07:10,490
Then we've got a matrix of weights and then we're going to make a way a vector of outputs.

94
00:07:10,530 --> 00:07:17,700
And so in order in mathematical terms or in programming it's simply a matrix multiplication of this

95
00:07:18,560 --> 00:07:26,150
times this matrix of this vector Tam's matrix to get in order to get this vector of outputs.

96
00:07:26,400 --> 00:07:29,760
And so that is the perception right over there.

97
00:07:29,760 --> 00:07:36,870
So even though it's like it looks like a complex construct when we draw it in reality is just one line

98
00:07:36,870 --> 00:07:37,920
of code so don't miss it.

99
00:07:37,920 --> 00:07:41,130
It's like 53 when you're actually building the AI.

100
00:07:41,140 --> 00:07:43,770
We've Adlon in the practical tutorials.

101
00:07:43,920 --> 00:07:44,600
All right.

102
00:07:44,610 --> 00:07:47,130
On that note we're going to wrap up for today.

103
00:07:47,130 --> 00:07:51,180
That's what the perception is very a very simple concept.

104
00:07:51,210 --> 00:07:56,820
But as you'll see is going to yield some amazing results and you'll actually code this yourself if you

105
00:07:56,820 --> 00:08:02,880
do the practical tural you called this yourself and you'll see how much power the single perception

106
00:08:03,210 --> 00:08:06,180
has in the context of Arison is important.

107
00:08:06,180 --> 00:08:11,460
Understand that Eris is not just the perception it's all it's got some additional things additional

108
00:08:11,460 --> 00:08:13,090
features that we'll discuss as well.

109
00:08:13,230 --> 00:08:21,720
But in the context of Eris a perception turns out to be extremely powerful in solving artificial intelligence

110
00:08:21,900 --> 00:08:23,030
challenges.

111
00:08:23,040 --> 00:08:25,210
On that note I hope you enjoy today's tutorial.

112
00:08:25,290 --> 00:08:26,770
I look forward to seeing you next step.

113
00:08:26,850 --> 00:08:28,560
Until then enjoy I.

