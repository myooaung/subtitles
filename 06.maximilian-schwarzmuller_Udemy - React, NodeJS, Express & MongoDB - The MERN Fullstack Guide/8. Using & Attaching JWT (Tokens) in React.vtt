WEBVTT
1
00:00:02.210 --> 00:00:04.570
So let's make sure our app works again.

2
00:00:04.670 --> 00:00:09.960
And for Dad here I'm back ON THE FRONT AND NOW I first of all need to use that new data.

3
00:00:09.960 --> 00:00:12.810
The back end returns for logging in or for signing up.

4
00:00:12.830 --> 00:00:18.800
In both cases we return an object which has a user I.D. field which has an email field and which has

5
00:00:18.800 --> 00:00:21.060
this very important token field.

6
00:00:21.080 --> 00:00:27.510
So here to all off log in thus far I passed my my user I.D..

7
00:00:27.590 --> 00:00:33.860
Now of course I cancel past is it just now lives in the user I.D. field instead of the nested User object

8
00:00:34.130 --> 00:00:37.980
so we can simply change to user I.D. and it should generally work again.

9
00:00:38.120 --> 00:00:41.310
But with Dad we're not taking advantage of the token.

10
00:00:41.510 --> 00:00:47.630
Still with that if we tried to authenticate with that new user which was created after we changed our

11
00:00:47.720 --> 00:00:53.180
password hashing logic on the back end if we click log in here we are redirected.

12
00:00:53.180 --> 00:00:54.670
So this now at least works again.

13
00:00:54.680 --> 00:00:57.230
We're not crashing our app anymore.

14
00:00:57.230 --> 00:00:59.970
Nonetheless this is not all.

15
00:01:00.060 --> 00:01:04.990
I also of course now want to use to token we are getting back from the back end.

16
00:01:05.340 --> 00:01:13.860
So to log in I will also forward response data dot token both here for our log in mode logic as well

17
00:01:13.860 --> 00:01:17.890
as for our sign up logic and an app.

18
00:01:17.980 --> 00:01:27.410
US where I have to log and function idea for now no longer just expect to user I.D. but I also expect

19
00:01:27.740 --> 00:01:30.380
the token as a second argument.

20
00:01:30.380 --> 00:01:37.820
Now of course I want to manage my token here in state and actually instead of is locked in I will store

21
00:01:37.910 --> 00:01:45.020
token as a state here and set token and therefore call set token here and set this to the token I'm

22
00:01:45.020 --> 00:01:46.350
getting is our argument.

23
00:01:46.490 --> 00:01:53.740
And on logout we can set this back to NO and therefore here we're a check for is logged in I can simply

24
00:01:53.740 --> 00:02:00.100
check if token because of token is null I'm not logged in IF IT'S SOMETHING TRUTHFULLY like a string

25
00:02:00.160 --> 00:02:04.830
which it is then we'll make it in here else we'll make it a new year.

26
00:02:04.900 --> 00:02:11.890
And then here at the bottom where a set is logged in on my context object I can set this to token with

27
00:02:11.890 --> 00:02:13.740
a double bang in front of it as well.

28
00:02:13.780 --> 00:02:16.580
And therefore this will be converted to true if it is true.

29
00:02:16.630 --> 00:02:20.500
So if it is a string if it is a token and two false if it's false.

30
00:02:20.500 --> 00:02:26.530
So if it's now lower something like this in addition in my context I also want to store the token itself

31
00:02:26.560 --> 00:02:27.100
though.

32
00:02:27.130 --> 00:02:31.690
So this is just a convenience property here which gives us a quick answer to the question whether we

33
00:02:31.690 --> 00:02:33.100
are logged in or not.

34
00:02:33.100 --> 00:02:38.650
I want to store the token itself as well though because later when we send requests from certain places

35
00:02:38.650 --> 00:02:42.550
in the app we will need that token now to be consistent.

36
00:02:42.580 --> 00:02:49.150
I will therefore also go to the context to be off context file and here in our setup also add to token

37
00:02:49.540 --> 00:02:51.790
as a field to the default value.

38
00:02:51.790 --> 00:02:57.430
We never really use that default value but it's better for auto completion if we reflect the actual

39
00:02:57.430 --> 00:03:01.600
values we'll have in context in the end here as well.

40
00:03:01.600 --> 00:03:06.690
So now we're storing the token in the context and we're storing the answer to the question whether we're

41
00:03:06.700 --> 00:03:08.920
locked in in the context just as before.

42
00:03:08.920 --> 00:03:16.400
Just with a different logic now we can utilize this token to attach it to outgoing requests.

43
00:03:16.540 --> 00:03:23.500
So for example when we create a new place so in the new place J as file we're sending a request and

44
00:03:23.500 --> 00:03:30.040
this is a request which needs a token because on the back and in the places routes we are protecting

45
00:03:30.160 --> 00:03:37.450
all routes below this middleware here and that for example includes did create a place route here so

46
00:03:37.480 --> 00:03:42.640
we need to add our token and if you check our middleware logic on the back and you see the token has

47
00:03:42.640 --> 00:03:45.690
to be part of this authorization header.

48
00:03:46.000 --> 00:03:52.180
So here when we create this request when we send it in the end the send request function here we have

49
00:03:52.300 --> 00:03:56.070
from our custom HDP hook takes a headers argument.

50
00:03:56.500 --> 00:04:02.890
So here I want to add my headers which is an object of key value pairs and I want to add the authorization

51
00:04:02.890 --> 00:04:06.120
header here and set is too important.

52
00:04:06.130 --> 00:04:12.730
What I expect on the back end bearer and then my token and this bear thing is we just a convention to

53
00:04:12.730 --> 00:04:15.760
identify this kind of off indication basically.

54
00:04:15.760 --> 00:04:23.200
So I'll set this to bearer whitespace and then my token and we get that token from the off context to

55
00:04:23.200 --> 00:04:25.470
which we already have access here.

56
00:04:25.540 --> 00:04:34.800
So all stored token this Haddad now needs to be attached to the request and we should be able to create

57
00:04:34.800 --> 00:04:37.080
new places thereafter.

58
00:04:37.080 --> 00:04:45.290
So if I save this and I log in again and make sure you use the right e-mail address which you used to

59
00:04:45.290 --> 00:04:52.400
create a new user after you changed your sign up logic and hashed the password we now go to a new place

60
00:04:53.560 --> 00:05:04.750
Marine plots still a nice place in Munich Marine plus one in Minchin and we pick our image if I click

61
00:05:04.810 --> 00:05:11.690
at place we're getting an error and we're getting an unauthorized a four hundred and one error.

62
00:05:11.710 --> 00:05:18.100
Now we're getting this error for our options request though and such a options request if we inspect

63
00:05:18.100 --> 00:05:20.180
the network tap is indeed sent.

64
00:05:20.350 --> 00:05:24.240
You see that when I tried to create a new place here.

65
00:05:24.610 --> 00:05:30.180
It sends a request but please note that the type here's options and not post.

66
00:05:30.190 --> 00:05:33.190
But we clearly are sending a post request here.

67
00:05:33.190 --> 00:05:36.270
Well that's just a browser behavior for a certain age.

68
00:05:36.280 --> 00:05:42.850
The P word is basically anything but get requests the browser automatically sends a options request

69
00:05:42.880 --> 00:05:48.700
before it sends the actual request you want to send to find out whether the server will permit this

70
00:05:48.700 --> 00:05:54.550
to be sent requests so to say if the service supports that to be sent request does it's just a code

71
00:05:54.550 --> 00:05:59.440
when she does it's just something the browser does and we just have to be aware of it and we have to

72
00:05:59.440 --> 00:06:00.360
handle it.

73
00:06:00.460 --> 00:06:04.670
This options request has no token attached and it doesn't need to.

74
00:06:04.750 --> 00:06:12.010
So in check off in our back and middleware before we try creating the token or getting the token I want

75
00:06:12.010 --> 00:06:21.160
to check if the request method is equal to options and if it is equal I will return next and allow this

76
00:06:21.160 --> 00:06:22.480
request to continue.

77
00:06:22.510 --> 00:06:27.250
This will not allow to post request to continue just as options request.

78
00:06:27.250 --> 00:06:34.240
So this is a required adjustment to ensure that our options request is not blocked.

79
00:06:34.270 --> 00:06:40.870
The actual post request which then triggers our place creation logic will still be validated.

80
00:06:40.870 --> 00:06:42.390
So with this change on the back end.

81
00:06:42.400 --> 00:06:50.810
Now if we tried it again this looks way better and we created a new place here.

82
00:06:50.820 --> 00:06:57.450
Now what you'll notice of course is that if I tried to delete this place we fail because authentication

83
00:06:57.450 --> 00:06:57.900
failed.

84
00:06:57.930 --> 00:07:01.890
And that makes sense because we're not yet attaching the token to this request.

85
00:07:01.890 --> 00:07:04.920
The same is the case if you click this update button here.

86
00:07:04.920 --> 00:07:08.420
So we need to attach a token to these two requests as well.

87
00:07:08.430 --> 00:07:10.930
This definitely is a great practice for you.

88
00:07:10.980 --> 00:07:14.880
So feel free to try this out on your own before we'll do it together in the next lecture.
