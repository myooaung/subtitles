WEBVTT
1
00:00:02.290 --> 00:00:04.720
Now as I said there are many hosting providers.

2
00:00:04.720 --> 00:00:06.630
I will start with hosting the note.

3
00:00:06.640 --> 00:00:10.510
J.S. application and now we'll use he Roko to host it.

4
00:00:10.710 --> 00:00:14.350
A quite popular service but definitely not the only one.

5
00:00:14.380 --> 00:00:21.130
Let's visit you Rocco's web page and there we can sign up for free and we can also host the application

6
00:00:21.130 --> 00:00:24.520
in the basic requirements we have here for free as well.

7
00:00:24.520 --> 00:00:29.650
If you have a real application you of course might want to check out their pricing and probably choose

8
00:00:29.650 --> 00:00:33.690
a different option than the free one because there you have a lot of limitations.

9
00:00:33.700 --> 00:00:40.510
For example your server goes in sleep mode after 30 minutes of no requests basically and then restarts

10
00:00:40.510 --> 00:00:45.550
for the next incoming request which of course makes this specific request a bit slower and in general

11
00:00:45.550 --> 00:00:51.200
it's great for testing and playing around for a real application you will probably need a paid account

12
00:00:51.200 --> 00:00:51.800
there.

13
00:00:51.940 --> 00:00:57.730
But here we can go with the free one and once you did sign up you should see a screen that looks something

14
00:00:57.730 --> 00:01:04.450
like this where you can create a new app give it any name you want here I'll name it a Cadman she was

15
00:01:04.450 --> 00:01:11.700
a region where it is will be hosted for me us is fine and click Create app notice sets up a app here

16
00:01:11.700 --> 00:01:13.930
you can ignore these steps here.

17
00:01:14.160 --> 00:01:22.230
Now forward deployment method I will use you Roku get and that means that you need get installed on

18
00:01:22.230 --> 00:01:28.200
your machine so in case you're not using get get as our version control system which allows you to control

19
00:01:28.200 --> 00:01:33.450
your source code create different snapshots and so on and you can use it for that and I would recommend

20
00:01:33.450 --> 00:01:39.030
using it in bigger projects but if you don't have it yet you at least should install it to use it for

21
00:01:39.030 --> 00:01:44.450
deploying to Iraq go on the official get paid you learn all about the installation you can simply download

22
00:01:44.450 --> 00:01:49.200
it for your operating system walk free installer and check with the docs if you're having issues with

23
00:01:49.200 --> 00:01:55.770
that it should be pretty straightforward though once you get get installed you also need to install

24
00:01:55.770 --> 00:02:02.180
the Hiroko Seelye so we can click on that link to learn how that works and then just simply download

25
00:02:02.210 --> 00:02:08.840
the installer here or run this command or for Windows or Linux use your options and then simply install

26
00:02:08.840 --> 00:02:14.900
that Seelye onto your machine as well so that at the end you're able to run both you Roko as a command

27
00:02:14.930 --> 00:02:21.710
as well as get as a command in your command prompt or terminal so then let's run he Roku log in first

28
00:02:21.920 --> 00:02:27.800
and I will do this here at my back and project somebody run he Roku log in go through that log and process

29
00:02:27.800 --> 00:02:36.780
their offer and once you are locked in continue to the next step here you need to initialize your project

30
00:02:36.810 --> 00:02:43.350
as a get repository and then run this command to basically connect us here Roku app to your local get

31
00:02:43.350 --> 00:02:49.970
repository so that you are later able to push code to your Heroku app and run it there.

32
00:02:50.070 --> 00:02:59.610
So let's do that let's run get in it here in this back and project now important also add a dot get

33
00:02:59.700 --> 00:03:03.240
ignore file here and ignore node modules.

34
00:03:03.330 --> 00:03:09.390
This ensures that when you control something with get the node modules folder is not controlled because

35
00:03:09.420 --> 00:03:14.760
uploading this to the back end would take super long and he Roku will automatically install all dependencies

36
00:03:14.760 --> 00:03:20.610
your project needs it will automatically have a look at packaged or Jason and install all these dependencies

37
00:03:20.760 --> 00:03:26.790
so it will create the node modules folder automatically on the backend so make sure you add this and

38
00:03:26.790 --> 00:03:31.890
then simply run this command here he Roko get remote ends on

39
00:03:37.110 --> 00:03:43.730
once you did this run these first two commands and you can provide a different commit message here to

40
00:03:43.750 --> 00:03:52.750
if you want by the way so let's first of all run get ad and then get commit prepared for deployment

41
00:03:53.830 --> 00:03:59.800
now before we push it to your Roku make sure that your package does Jason File you'll also tweak to

42
00:03:59.800 --> 00:04:07.720
start script here to just node app J.S. because he Roku will execute us too then later we'll start your

43
00:04:07.720 --> 00:04:15.780
node application and we need to also ensure one other thing remember d environment variables they were

44
00:04:15.780 --> 00:04:21.780
used by node man now we're not using Node mon only Roko we're using Node there we shouldn't use node

45
00:04:21.790 --> 00:04:24.160
one there it's not a production ready tool.

46
00:04:24.480 --> 00:04:29.970
So these environment variables would not be used right now they would all be missing data for our app

47
00:04:29.970 --> 00:04:34.980
definitely wouldn't work for example connecting to the database would already fail because these environment

48
00:04:34.980 --> 00:04:42.310
variables at the moment on Hiroko simply wouldn't be provided so to fix this we have to go to you Roko

49
00:04:42.490 --> 00:04:51.250
can keep this page open but then here up opened is overview part in a new tab this overview part of

50
00:04:51.250 --> 00:04:58.200
your project there you can learn more about the project and under Settings you can now set so-called

51
00:04:58.320 --> 00:05:01.990
config VARs and these are your environment variables.

52
00:05:02.010 --> 00:05:07.230
And here you want to create these environment variables you have in your node one Jason File as well

53
00:05:07.650 --> 00:05:16.740
so add db user here and enter the value you have here in node man Jason as well like this

54
00:05:19.570 --> 00:05:25.840
also add DB password thereafter and provide the correct value here.

55
00:05:25.970 --> 00:05:29.240
And of course use the value you want to use for production.

56
00:05:29.240 --> 00:05:34.910
So if you created a different user for production here on what would you be Atlas entered a username

57
00:05:34.910 --> 00:05:39.980
and password of your production user here of course because these are the values that will be used in

58
00:05:39.980 --> 00:05:46.260
production so db name as the next guy at your and for a db name.

59
00:05:46.310 --> 00:05:53.990
I indeed want to use that special database I prepared for production I named it more and Prot.

60
00:05:53.990 --> 00:05:59.240
So I will also name ID Merlin prod here and click Add

61
00:06:02.030 --> 00:06:03.160
the Google API key.

62
00:06:03.170 --> 00:06:05.060
All this should be provided.

63
00:06:05.060 --> 00:06:12.260
And here I also want to use my production ready one which I can quickly get from my front end here because

64
00:06:12.290 --> 00:06:14.270
there I already did enter it.

65
00:06:14.360 --> 00:06:16.860
So this is my production Google API key.

66
00:06:16.940 --> 00:06:26.200
Let's enter is here and last but not least we need to provide our JWT key value here and this is my

67
00:06:26.200 --> 00:06:32.430
production secret key or whatever you want to name it.

68
00:06:32.430 --> 00:06:33.480
Click add.

69
00:06:33.480 --> 00:06:36.150
So now we have all these enviroment variables setup.

70
00:06:36.240 --> 00:06:40.940
And with that we should be able to run our application at least almost.

71
00:06:40.950 --> 00:06:44.340
One thing would still not work on long would it be Atlas.

72
00:06:44.340 --> 00:06:51.690
Keep in line the deer under network access we're allowing our local IP address but not the IP address

73
00:06:51.780 --> 00:06:54.420
of our hero code deployment.

74
00:06:54.570 --> 00:07:00.800
And of course Dad will be the server who wants to connect to the database in the future no one important

75
00:07:00.800 --> 00:07:07.700
thing to keep in mind here is that he Roko uses dynamic IP ranges and you can learn more about how you

76
00:07:07.700 --> 00:07:14.810
could get a fixed a static IP here with the help of a certain add on or if you have a private space

77
00:07:14.870 --> 00:07:23.240
so a premium paid plan in the end how you could set up a static IP here for our local free sandbox environment.

78
00:07:23.420 --> 00:07:27.860
I will simply add an IP address here and allow access from anywhere.

79
00:07:27.860 --> 00:07:30.020
Now of course you could say that's a bit insecure.

80
00:07:30.020 --> 00:07:36.350
But keep in mind this allows anyone to communicate to my database but that person will still need a

81
00:07:36.350 --> 00:07:39.080
valid user and a password for that user.

82
00:07:39.110 --> 00:07:41.250
So you still need these credentials.

83
00:07:41.300 --> 00:07:46.760
So it's just one extra layer of security which I gave up here but you could restrict that if you have

84
00:07:46.760 --> 00:07:50.660
a static IP here in the free sandbox we just don't have that.

85
00:07:50.780 --> 00:07:57.560
So I will open that up to everyone and once this is done once everyone can talk to our database we can

86
00:07:57.560 --> 00:08:00.660
finally try deploying this to Heroku.

87
00:08:00.710 --> 00:08:02.970
So let's wait for this to finish.

88
00:08:02.970 --> 00:08:08.870
So with this finished let's go back to our instructions here on how to deploy and let's try this get

89
00:08:08.870 --> 00:08:11.480
pushy Roku monster command here.

90
00:08:11.510 --> 00:08:17.960
However before we push it make sure you also get ad again to reflect your changes to package dot Jason

91
00:08:18.320 --> 00:08:24.590
changed starting script otherwise you will push your old code your old snapshot where we still use node

92
00:08:24.590 --> 00:08:29.750
1 for starting this up and thereafter let's try to get push Roku monster command

93
00:08:34.360 --> 00:08:40.540
so this will now deploy this application will install node modules there will automatically detect that

94
00:08:40.540 --> 00:08:45.700
you're using Node because you've a package not Jason File will build everything and in the end it will

95
00:08:45.700 --> 00:08:47.650
launch your application.

96
00:08:47.920 --> 00:08:55.290
Now let's wait for this process to finish here and with it finished it gives you a U R L where your

97
00:08:55.620 --> 00:09:00.180
page and the end is hosted are where your application is running of course you can also connect the

98
00:09:00.180 --> 00:09:05.160
custom domain and so on and you can learn all about Dad and your official he Roku docs if you want to

99
00:09:05.160 --> 00:09:13.850
do that with that let's visit our page here and eventually you will see that you get an error now this

100
00:09:13.910 --> 00:09:20.450
error makes sense if we have a look at our aptly as file we see that we're listening to port five thousand

101
00:09:20.850 --> 00:09:25.820
notice it was good during development but now it isn't anymore on your Roku we want to use a different

102
00:09:25.820 --> 00:09:32.180
port thankfully he Roko gives you a default environment variable which provides the port on which your

103
00:09:32.210 --> 00:09:37.850
application is served you can just enter process thought NS dot port here port.

104
00:09:37.850 --> 00:09:42.710
All caps and just use 5000 as a fallback value here.

105
00:09:42.710 --> 00:09:49.110
So if that is not provided we will use this IED during development if that is provided which Heroku

106
00:09:49.160 --> 00:09:52.330
will do for us then this will be used instead.

107
00:09:52.340 --> 00:09:54.660
And then our application will be served on a port.

108
00:09:54.660 --> 00:09:58.670
He Roca wants to serve it on and Delphine will be reachable.

109
00:09:58.670 --> 00:10:07.680
So with this let's at this change added port ends and then let's repeat does get pushy Roku Mossberg

110
00:10:07.740 --> 00:10:08.280
command

111
00:10:14.460 --> 00:10:19.680
so does Will now update our application on the server with this new world and all of it will replace

112
00:10:19.680 --> 00:10:26.360
the old one with it and we'll start it of course and hopefully then it will work.

113
00:10:26.360 --> 00:10:32.180
And indeed if I now visit slash API slash users I get back an empty array which makes sense because

114
00:10:32.180 --> 00:10:39.410
we have no users yet in our production database so our API seems to work seems to be up and running.

115
00:10:39.440 --> 00:10:44.450
Now let's test this with our reactive and let's deploy the reactive as well.
