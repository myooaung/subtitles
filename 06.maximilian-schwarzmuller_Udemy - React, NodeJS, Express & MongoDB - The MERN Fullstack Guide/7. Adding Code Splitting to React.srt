1
00:00:02,180 --> 00:00:07,250
You might notice that when we built our application we got four files here in my case and the biggest

2
00:00:07,250 --> 00:00:13,340
file is in my case disk chunkier with 52 dodge to four kilobytes.

3
00:00:13,340 --> 00:00:14,780
No that is not a problem.

4
00:00:14,780 --> 00:00:18,860
This is not too large but in bigger applications of course this might be bigger.

5
00:00:18,860 --> 00:00:24,500
And one problem if you want to call it like this which we have in does application and this react application

6
00:00:24,830 --> 00:00:27,100
is that we're not splitting our code.

7
00:00:27,110 --> 00:00:29,040
Now what does code splitting mean.

8
00:00:29,090 --> 00:00:33,110
It means that not all code is required to right from the start.

9
00:00:33,110 --> 00:00:39,110
If a user visits our page he or she might be logged in automatically or he or she might not be.

10
00:00:39,350 --> 00:00:47,180
No matter if that's the case or not we might not yet have visited the places for one of our users we

11
00:00:47,180 --> 00:00:50,200
might not yet have visited the off page.

12
00:00:50,200 --> 00:00:57,680
So the code that is related to authentication and to user replaces or to code which is related to creating

13
00:00:57,680 --> 00:01:05,120
a new place or for updating a place might not be needed yet it is needed once we visit that page once

14
00:01:05,120 --> 00:01:13,670
we navigate to places new but not before we do so and therefore we could load these routes lazily which

15
00:01:13,670 --> 00:01:20,420
means initially when our app starts we don't download the code for these routes but as soon as a user

16
00:01:20,450 --> 00:01:27,380
goes there we download the code on the fly and then render these pages so that the initial page loading

17
00:01:27,380 --> 00:01:33,710
time is reduced because we download less code initially and react thankfully has built in support for

18
00:01:33,710 --> 00:01:35,260
code splitting.

19
00:01:35,330 --> 00:01:43,390
So how do we set this up and react in the aptly as file I will create a new constant here one for each

20
00:01:43,390 --> 00:01:50,440
route which I want to load lazily for example users and then we can comment out or remove this import

21
00:01:50,440 --> 00:01:59,410
here and users can now be created with react dot lazy and react lazy takes a function and this is a

22
00:01:59,410 --> 00:02:03,380
function which executes import as a function.

23
00:02:03,520 --> 00:02:07,480
So import not as a statement like this but as a function instead.

24
00:02:07,480 --> 00:02:15,190
This is also supported in modern javascript and also in this react build set up here and there we pass

25
00:02:15,190 --> 00:02:17,500
a path to the file we want to import.

26
00:02:17,500 --> 00:02:24,130
So that path here and yet now the difference is that now this is not imported immediately when app J.S.

27
00:02:24,670 --> 00:02:30,310
runs and they offer in the bundle produced here by our built tool it's not included right from the start

28
00:02:30,580 --> 00:02:35,860
but it will be loaded on demand once this user component is required does users component excuse me

29
00:02:36,340 --> 00:02:40,460
and we still rendered this as a regular component react lazy does the rest.

30
00:02:40,510 --> 00:02:45,670
So down there we don't need to change how we use that we just change how we import it.

31
00:02:46,000 --> 00:02:55,170
And now of course we replicate this all for new place where I grab this path and use it here and let's

32
00:02:55,170 --> 00:03:03,800
call it this out all also for user places where I grab this path here and use it there

33
00:03:07,300 --> 00:03:09,460
and also for update plays Here

34
00:03:12,700 --> 00:03:28,140
wrap this replace it there and then I want to do the very same with off like this now not all lazy loaded

35
00:03:28,140 --> 00:03:33,300
routes I set up here makes sense for example users is the route we load by default at the beginning

36
00:03:33,510 --> 00:03:39,270
so we don't actually need to lazy load that we can still do it though but other routes like new place

37
00:03:39,360 --> 00:03:44,430
or update place make a lot of sense because we definitely don't load them initially when the app starts

38
00:03:44,430 --> 00:03:48,350
up so there is no need in loading this in advance.

39
00:03:48,390 --> 00:03:53,050
Now you don't need to use a similar syntax in the other react files because this really only works with

40
00:03:53,050 --> 00:03:55,170
the routing here at the moment.

41
00:03:55,170 --> 00:04:01,770
And in addition this is our biggest opportunity for splitting our code into meaningful chunks for the

42
00:04:01,770 --> 00:04:08,520
different features of our application so we only need to do this here an app J.S. however like this

43
00:04:08,520 --> 00:04:09,810
it wouldn't work.

44
00:04:09,810 --> 00:04:11,830
We now have to do something else.

45
00:04:12,000 --> 00:04:18,960
We have to wrap our routes which we render in the end with a Navarro component which we get from react.

46
00:04:19,140 --> 00:04:23,010
We imported from react and that's the suspense component.

47
00:04:23,010 --> 00:04:31,880
Suspense is required to make react lazy work so we wrap this year our roots with suspense so you're

48
00:04:31,880 --> 00:04:39,740
a lazy loaded code is wrapped with suspense and on suspense you provide a fallback prop and this has

49
00:04:39,740 --> 00:04:46,160
to point at some J OSX code which is rendered as a fallback if loading lazy loaded code takes longer.

50
00:04:46,160 --> 00:04:53,020
So if downloading that code for dead new route the user wants to go to if that takes longer react show

51
00:04:53,020 --> 00:04:55,100
us T.J. has X code you render here.

52
00:04:55,100 --> 00:05:04,810
In between a we could render a div with a class name with a class name of center let's say and then

53
00:05:04,930 --> 00:05:09,240
our loading spinner for Dad.

54
00:05:09,240 --> 00:05:13,940
Just make sure that you of course also import the loading spinner here.

55
00:05:14,010 --> 00:05:18,960
We need to import this from the shared components UI elements folder and then we can render IDs here

56
00:05:19,080 --> 00:05:22,310
as a fallback if loading of our road should take longer.

57
00:05:23,370 --> 00:05:29,210
With that let's test it locally so I will use NPM start again to build our app for development as so

58
00:05:29,210 --> 00:05:34,480
that we can test it here on low closed and let's wait for this application to reload.

59
00:05:34,500 --> 00:05:36,030
Now you see it starts up.

60
00:05:36,030 --> 00:05:39,180
I'm locked in but now something interesting happens.

61
00:05:39,330 --> 00:05:45,900
If I clear my network tab if I go to ad place you see there are new downloads of these chunks and that

62
00:05:45,900 --> 00:05:49,440
in the end are the code chunks that are required for this page.

63
00:05:49,800 --> 00:05:54,770
And if we go to authentication for example a new chunk was downloaded.

64
00:05:54,870 --> 00:05:56,930
So this is the code splitting in action.

65
00:05:56,940 --> 00:06:02,250
These are the different code chunks for the different feature areas we have and if we're now having

66
00:06:02,270 --> 00:06:08,940
quit this and we run NPM run build again we will also see that for production different chunks are produced.

67
00:06:09,030 --> 00:06:13,050
Now the entire of when to load what thing will be managed by react.

68
00:06:13,050 --> 00:06:14,690
You don't have to worry about that.

69
00:06:14,810 --> 00:06:17,210
Therefore you get a free win here.

70
00:06:17,250 --> 00:06:25,440
You got more code files as you can see more chunks were created and therefore the initial chunk decreased

71
00:06:25,440 --> 00:06:26,040
a bit.

72
00:06:26,040 --> 00:06:31,590
Now it's still almost the same size as before because the majority of the size is actually taken up

73
00:06:31,590 --> 00:06:36,090
by the react library itself and by AB of third party libraries we included.

74
00:06:36,600 --> 00:06:42,960
But still we're able to get some improvements out of this here and on bigger apps of course the improvements

75
00:06:42,960 --> 00:06:48,840
would be way bigger because you would be able to get way bigger chunks out of there in an app like this

76
00:06:48,900 --> 00:06:52,220
where the third party libraries make up the majority of the code.

77
00:06:52,230 --> 00:06:54,180
Of course you don't gain that much.

78
00:06:54,180 --> 00:06:58,530
Still it is important to know this technique.

79
00:06:58,530 --> 00:07:02,700
And with that I would say our ReACT app is looking quite decent.

80
00:07:02,700 --> 00:07:05,710
We're ready to deploy it and 2 deployed.

81
00:07:05,730 --> 00:07:12,360
We need to understand which two different options or which two different main options we have for deploying

82
00:07:12,360 --> 00:07:12,510
it.
