1
00:00:02,160 --> 00:00:08,550
Now we have an idea of how our application should roughly look like which data are we going to work

2
00:00:08,550 --> 00:00:08,850
with.

3
00:00:09,330 --> 00:00:14,550
Well there are two main entities we heard over and over again in the last lectures.

4
00:00:14,550 --> 00:00:18,840
We have users in his application and of course we have places.

5
00:00:19,470 --> 00:00:26,310
Now it's up to you which exact data you want to have on your user model and which exact data you want

6
00:00:26,310 --> 00:00:29,070
to have stored in your places.

7
00:00:29,070 --> 00:00:36,090
For me in this demo application I came up with I want to have users who have four key fields or attributes

8
00:00:36,720 --> 00:00:44,370
every user should have a name and email address a password and also an image now name and image are

9
00:00:44,460 --> 00:00:50,310
optional we'll definitely need email and password in order to implement authentication which of course

10
00:00:50,310 --> 00:00:53,260
requires that email password combination.

11
00:00:53,400 --> 00:00:59,790
Now for the places it's all up to you but dear I want to have a title and a description for every place

12
00:01:00,030 --> 00:01:01,670
a human readable address.

13
00:01:01,680 --> 00:01:09,810
So basically street name city name location which is a pair of coordinates latitude and longitude and

14
00:01:09,840 --> 00:01:11,710
also at image.

15
00:01:11,820 --> 00:01:18,660
Now besides these two standalone entities it's important to understand that of course they are related

16
00:01:19,380 --> 00:01:25,020
every user can create multiple places and therefore owns multiple places.

17
00:01:25,020 --> 00:01:29,610
And on the other hand every place belongs to exactly one user.

18
00:01:29,670 --> 00:01:36,150
So implementing this relation and updating it correctly will all be a part of the application we're

19
00:01:36,150 --> 00:01:37,320
going to build.

20
00:01:37,320 --> 00:01:42,920
So we know about our data and how to front end should look like before we plan the different routes.

21
00:01:42,930 --> 00:01:46,020
We want to have on the front end and which pages we need there.

22
00:01:46,500 --> 00:01:53,370
Let's have a look at the back end which API endpoints will we probably need their well since we have

23
00:01:53,370 --> 00:01:55,640
two main data models here.

24
00:01:55,650 --> 00:02:00,750
User and place I got two main end point areas.

25
00:02:00,750 --> 00:02:09,810
Let's say we want to accept requests which reach our back end domain dot com slash API slash users.

26
00:02:10,080 --> 00:02:17,010
And then there are a couple of specific routes which all start with API users specifically slash nothing.

27
00:02:17,040 --> 00:02:25,590
If a get request reaches our back end domain slash API slash users slash nothing else then I want to

28
00:02:25,590 --> 00:02:32,610
return a list of all users we'll need that for the page where we display all users and the number of

29
00:02:32,610 --> 00:02:34,710
places they created.

30
00:02:34,710 --> 00:02:42,870
If we send a post request to slash API slash user slash sign up then I expect to have data attached

31
00:02:42,870 --> 00:02:44,630
which allows us to create a new user.

32
00:02:44,730 --> 00:02:50,520
And then after this creation succeeded all the automatically locked the user in and you will learn what

33
00:02:50,700 --> 00:02:56,140
logging users in means in the context of a Marine app in the authentication module.

34
00:02:56,610 --> 00:03:01,310
When we send a post request to slash log in we'll just log the user in.

35
00:03:01,320 --> 00:03:07,410
So I expect to have a password and email attached to that request and then we'll skip the creation part

36
00:03:07,440 --> 00:03:10,330
because we assume this user already was created.

37
00:03:10,440 --> 00:03:12,580
We just try to lock the user in.

38
00:03:12,690 --> 00:03:17,850
So these are our a user related routes but of course we also have places.

39
00:03:17,850 --> 00:03:27,750
So let's say for requests which reach our domain slash API slash places slash user slash you I.D. if

40
00:03:27,750 --> 00:03:33,870
that's a get request then I want to retrieve a list of all places for that given user I.D..

41
00:03:34,110 --> 00:03:39,980
So the idea here simply is that we are able to get all the specific places a user created.

42
00:03:40,470 --> 00:03:48,480
If we get a get request to just API slash places slash some place I.D. then I want to get that specific

43
00:03:48,480 --> 00:03:50,330
place by that idea.

44
00:03:50,610 --> 00:03:58,090
And important both you I.D. and P I.D. which have this colon in front of them are dynamic segments.

45
00:03:58,110 --> 00:04:03,170
So what exactly is part of the you or L here is up to the front end.

46
00:04:03,240 --> 00:04:10,860
This will be interpreted as a user I.D. or a place I.D. though now if we send a post request to just

47
00:04:10,920 --> 00:04:17,430
API slash places slash nothing then I want to create a new place and I expect that the data which is

48
00:04:17,430 --> 00:04:21,290
needed to create a new place is attached to that request.

49
00:04:21,390 --> 00:04:29,160
If we send a patch request to slash API slash places slash some place ideas then we want to update that

50
00:04:29,160 --> 00:04:30,720
place by its ideas.

51
00:04:30,720 --> 00:04:34,650
This request will carry data in its request body as well.

52
00:04:34,680 --> 00:04:40,920
It needs to carry the data which we need for updating the place namely the new title and the new description.

53
00:04:41,400 --> 00:04:46,500
And of course updating is nice but sometimes we also want to delete a place and deal for our walls and

54
00:04:46,490 --> 00:04:53,640
want to have a delete route where we accept a DELETE request targeted at API slash places slash some

55
00:04:53,640 --> 00:04:58,800
place ideas which will well delete that place by its ideas.

56
00:04:58,890 --> 00:05:01,440
These are the end points we need.

57
00:05:01,500 --> 00:05:06,870
We have all the crud operations in there we have off indication in there and we will build them out

58
00:05:06,870 --> 00:05:09,750
step by step for this course.

59
00:05:09,750 --> 00:05:11,490
Now let's have a look at the front end.

60
00:05:11,490 --> 00:05:17,340
We already sketched it out but now let's plan the specific page components we need their.
