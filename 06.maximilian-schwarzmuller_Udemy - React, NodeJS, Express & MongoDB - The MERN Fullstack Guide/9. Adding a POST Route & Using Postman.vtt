WEBVTT
1
00:00:02.140 --> 00:00:06.100
It's now time for you all to work on the other rollouts and not just get roots.

2
00:00:06.130 --> 00:00:11.760
For example let's make sure a new place can be added still for the moment only a dummy place which is

3
00:00:11.760 --> 00:00:15.910
then stored in memory basically but better than nothing.

4
00:00:15.970 --> 00:00:18.780
So let's add a post out for that.

5
00:00:18.790 --> 00:00:25.750
Let's go to the places where it's foul and add a new millionaire here with post because I want to filter

6
00:00:25.750 --> 00:00:32.410
for post requests only and the pop should be slashed nothing because the ideas that any request any

7
00:00:32.410 --> 00:00:40.780
post request that targets slash API slash places and which they offer reaches my places roots automatically

8
00:00:40.780 --> 00:00:42.420
reaches this route here.

9
00:00:42.520 --> 00:00:46.270
So just slash nothing is to filter here and then in there.

10
00:00:46.450 --> 00:00:49.150
I need a controller function to which I can point.

11
00:00:49.150 --> 00:00:53.010
So here in places controller let's add a new function.

12
00:00:53.170 --> 00:00:57.400
Create place sounds like a fitting name.

13
00:00:57.510 --> 00:01:02.640
And this will be a default middleware function which gets Request object a response object.

14
00:01:02.640 --> 00:01:08.910
And this next function which we can call and of course I want to export it here so that we can reference

15
00:01:08.910 --> 00:01:11.270
it from a number of file I'll set.

16
00:01:11.370 --> 00:01:14.380
Exports create place equal to create place.

17
00:01:14.400 --> 00:01:25.610
So to a pointer at this function now in places roots we can point at this new function places controller

18
00:01:25.640 --> 00:01:28.940
create place and we're done in this file.

19
00:01:29.060 --> 00:01:37.400
Now in places controller we now need to fill this with some life and now it gets a bit more tricky before

20
00:01:37.430 --> 00:01:41.410
we always had the data we needed in the U R L like here.

21
00:01:41.420 --> 00:01:49.430
The user I.D. which we got from the parents in the U R L now for a post request I expect to have data

22
00:01:49.490 --> 00:01:57.350
in the body of the post request because whilst get requests don't have a request body opposed to requests

23
00:01:57.380 --> 00:02:04.850
do and you do ENCODE data you want to send with a POST request into that post request body.

24
00:02:04.850 --> 00:02:11.210
Now to get data out of the body we can use a package we learned about earlier the body parser.

25
00:02:11.420 --> 00:02:17.600
So we want to add a new middleware and we want to add that before the request reaches to places routes

26
00:02:17.630 --> 00:02:21.060
because the middleware is will be parsed from top to bottom.

27
00:02:21.110 --> 00:02:25.670
So you want to first parse the body and then reached a roots where you need the body.

28
00:02:26.270 --> 00:02:28.960
So here we will add body parser.

29
00:02:29.150 --> 00:02:36.710
And now I want to parse for adjacent data before in the refresher we used you are L encoded data to

30
00:02:36.740 --> 00:02:39.560
be able to work with that form data here.

31
00:02:39.560 --> 00:02:41.020
I need Jason.

32
00:02:41.150 --> 00:02:47.320
This will pass any incoming requests body and extract any Jason data which is in there convert converted

33
00:02:47.320 --> 00:02:54.700
to regular javascript data structures like objects and arrays and then call next automatically so to

34
00:02:54.710 --> 00:03:02.330
be reached the next middleware in line which are our own custom routes and then also add this Jason

35
00:03:02.330 --> 00:03:03.210
data there.

36
00:03:04.220 --> 00:03:12.530
So in the places controller and create place will now be able to get the past body and we get it on

37
00:03:12.530 --> 00:03:15.550
a request body property.

38
00:03:15.560 --> 00:03:21.500
Now here I will use object D structuring which is a default modern javascript feature which no trace

39
00:03:21.500 --> 00:03:28.790
supports to get different properties out of request body and store it in constants which are then available

40
00:03:28.790 --> 00:03:30.010
in the function.

41
00:03:30.170 --> 00:03:36.790
And here I'm interested in the title the description let's say the coordinates.

42
00:03:36.860 --> 00:03:43.940
It's up to us what we expect as data on the incoming request here I expect these fields and the address

43
00:03:44.000 --> 00:03:45.820
as well as the creator.

44
00:03:45.830 --> 00:03:51.860
These are the fields I expect on the incoming request and this object is structuring here really is

45
00:03:51.860 --> 00:03:56.620
just a shortcut for doing this for every property.

46
00:03:59.240 --> 00:04:03.710
So now here we are extracting data from the incoming request for the moment.

47
00:04:03.710 --> 00:04:10.220
We just rely on the fact that all this data will be there later will add validation to make sure it

48
00:04:10.220 --> 00:04:10.960
really is.

49
00:04:10.970 --> 00:04:15.140
But for the moment let's just assume that we always get the right data.

50
00:04:15.140 --> 00:04:22.710
And now I want to create a new place an image created place and all create an object literal here.

51
00:04:22.760 --> 00:04:29.800
We could create a class for a place to use it as a blueprint but sensible replaced is later anyways

52
00:04:29.930 --> 00:04:32.500
with some Mongo D.B. logic.

53
00:04:32.660 --> 00:04:36.670
We can leave it like this as object literal for the moment.

54
00:04:36.830 --> 00:04:43.760
Now in the creative place I want to have a title which I'll map to the value I extracted here into this

55
00:04:43.760 --> 00:04:47.360
title constant and since the name is equal we can use the shortcut.

56
00:04:47.360 --> 00:04:53.570
Same for description coordinates is not the same here I want to have a location key because I have a

57
00:04:53.570 --> 00:05:00.740
location key up there too and that then holds the object with lat and LNG and I expect that coordinates

58
00:05:00.800 --> 00:05:08.210
is such a object with lat and LNG so we'll store coordinates in the location property and then address

59
00:05:08.270 --> 00:05:15.950
will be stored in the address properties so we can use that shortcut again at the same for creator.

60
00:05:15.950 --> 00:05:22.760
Now that created place can be added to our dummy places for example with the push method or with the

61
00:05:22.760 --> 00:05:24.140
on shift method.

62
00:05:24.140 --> 00:05:32.650
If you would want to add it as the first element here I will edit as a last element with push and door

63
00:05:32.650 --> 00:05:34.900
after we can send back a response.

64
00:05:35.080 --> 00:05:40.690
Here I want to set the status code to two hundred and one which is a standard status code you sent back.

65
00:05:40.750 --> 00:05:47.620
If something was successfully created on the server two hundred is your normal success status code.

66
00:05:47.620 --> 00:05:48.980
If you created something new.

67
00:05:49.000 --> 00:05:56.290
The convention is to return two hundred and one and as data I will attach this created place so I will

68
00:05:56.290 --> 00:05:59.980
return that created place here to be precise.

69
00:05:59.980 --> 00:06:07.740
I'll return the object where I have a place property which holds that created place now with that we

70
00:06:07.740 --> 00:06:11.400
got our middleware function we got that connected to this route.

71
00:06:11.400 --> 00:06:14.460
The question is how can we now send their request to it.

72
00:06:14.580 --> 00:06:21.420
Because if I now enter just slash places slash nothing which would be the path that reaches this route

73
00:06:22.230 --> 00:06:26.850
you'll see I actually get an error that does route is not found.

74
00:06:26.970 --> 00:06:31.530
The reason is that if you enter something in the browser you are ell it by default.

75
00:06:31.530 --> 00:06:34.310
Always is a GET request.

76
00:06:34.440 --> 00:06:39.900
Which means it can't work because we have no get route that handles slash nothing.

77
00:06:40.020 --> 00:06:47.290
We just have a post about to send a post request we could now set up some javascript code that sends

78
00:06:47.290 --> 00:06:53.570
it for example by the way if you try that it won't work and I'll show you why later in the course for

79
00:06:53.570 --> 00:06:58.140
the moment I'll use a different tool though I will use postmen.

80
00:06:58.180 --> 00:07:04.690
You can just google for postman and you'll find their official page and postman is simply a tool that

81
00:07:04.690 --> 00:07:14.020
allows you test or send requests to API as you can simply download the app from get postman dot com

82
00:07:14.170 --> 00:07:20.430
and simply walk fruity installer that gives you and install it on your system it's pretty straightforward.

83
00:07:20.440 --> 00:07:25.570
And then once you start this installed application you will see a screen that looks something like this.

84
00:07:25.570 --> 00:07:30.020
You might also have like an overlay at the beginning which asks you what you want to do.

85
00:07:30.040 --> 00:07:34.860
You can simply close stat to be taking to dis interface here.

86
00:07:34.870 --> 00:07:42.680
Now here in postmen you can click this plus here or new request but that is a different form.

87
00:07:42.700 --> 00:07:48.220
You can simply use the plastic which is simpler and in there you can choose the HDP method of the request

88
00:07:48.220 --> 00:07:48.790
you want to send.

89
00:07:48.790 --> 00:07:57.010
In our case post and then the user L which in our case is slash low closed colon 5000 slash API slash

90
00:07:57.010 --> 00:08:03.850
places slash nothing but you can omit dead last slash as well you could then add perms which should

91
00:08:03.850 --> 00:08:05.130
be added as query param.

92
00:08:05.130 --> 00:08:09.880
So with such a question mark at the end which we don't need here authorization which we don't need at

93
00:08:09.880 --> 00:08:15.380
the moment our headers which we also don't need at the moment and a body.

94
00:08:15.520 --> 00:08:24.950
And here on body click raw and then here choose Jason to add Jason data and now valid Jason data looks

95
00:08:24.950 --> 00:08:33.950
like this you add curly braces here and now all the properties we're trying to extract here in our request

96
00:08:33.950 --> 00:08:35.980
or in our middleware from the request body.

97
00:08:36.110 --> 00:08:42.560
And of course named exactly like this because you are trying to extract them by that name so here I

98
00:08:42.560 --> 00:08:51.740
will add a title Wall Street X change I'll add a description double quotes are important here by the

99
00:08:51.740 --> 00:09:01.050
way single quotes won't work description where the money lives creator for now I'll say you two here

100
00:09:01.110 --> 00:09:09.750
we can invent any ideas here because we have no users anyways also D address and I'll again get that

101
00:09:09.750 --> 00:09:17.340
from Google Maps simply searching for Wall Street there for the Wall Street exchange in the end but

102
00:09:17.340 --> 00:09:19.940
you can pick any location you want of course.

103
00:09:19.940 --> 00:09:29.520
So for the New York Stock Exchange to be precise let's also name it New York Stock Exchange addresses

104
00:09:29.520 --> 00:09:36.000
this year and then here we have a coordinates property because I'm trying to extract coordinates here

105
00:09:36.450 --> 00:09:41.670
which in turn needs to have a lat and LNG key in its nested object.

106
00:09:41.730 --> 00:09:49.200
So this is actually a nested object with more curly braces and there we have let and I'll again get

107
00:09:49.200 --> 00:09:51.070
that from Google Maps.

108
00:09:51.090 --> 00:09:56.820
This is a no not between double quotes you can also have numbers here you don't need to have everything

109
00:09:56.820 --> 00:10:03.030
as a string just as you can have a nested object you can all zip a number here and LNG is also taken

110
00:10:03.030 --> 00:10:08.600
directly from Google Maps and has this value.

111
00:10:08.860 --> 00:10:14.050
Now let's click send here and it will send the request to our back end.

112
00:10:14.250 --> 00:10:15.320
And there indeed.

113
00:10:15.330 --> 00:10:16.740
This doesn't look too shabby.

114
00:10:16.740 --> 00:10:21.990
We get back a response and it looks like we created that place.

115
00:10:21.990 --> 00:10:29.360
We can also validate that by sending a request to API slash places slash user you to which is the creator

116
00:10:29.400 --> 00:10:34.350
idea just used and I find the New York Stock Exchange here now important.

117
00:10:34.440 --> 00:10:37.140
This state at the moment only lives in memory.

118
00:10:37.140 --> 00:10:42.780
Whenever we restart does server here by closing it and restarting for example or whenever we change

119
00:10:42.780 --> 00:10:48.420
something in code when it's automatically restarted that data will be lost if I load that same page

120
00:10:48.420 --> 00:10:55.140
again it will not find that place because when we store it here in a javascript array it is only stored

121
00:10:55.140 --> 00:11:00.900
in memory now later of course we'll add a database and stored it in a persistent way for the moment

122
00:11:00.930 --> 00:11:06.930
disk dummy in memory storage will do just so that you don't wonder when it's suddenly lost.

123
00:11:06.930 --> 00:11:10.180
Of course you can always recreate it by sending this request again.

124
00:11:10.230 --> 00:11:13.260
We can also test the GET requests here by the way.

125
00:11:13.260 --> 00:11:19.530
We can also send a GET request from inside postmen to send a GET request to local host five thousand

126
00:11:19.530 --> 00:11:26.760
slash API slash pay places and then for example to place with the IDP one and we'll get the same response

127
00:11:26.790 --> 00:11:32.310
we saw in the browser before and indeed from now on I will use postmen to have all the testing in one

128
00:11:32.310 --> 00:11:37.770
place but forget Roberts who can also stick to the browser if you prefer debt.

129
00:11:37.890 --> 00:11:42.730
Now with that we're able to create a place and we're using postmen to test it.

130
00:11:42.750 --> 00:11:49.110
One thing is missing in our place though and that's an I.D. and for that I want to create a unique idea

131
00:11:49.350 --> 00:11:56.220
which I'll do with an extra third party package so I'll quit this development server and run npm install

132
00:11:56.220 --> 00:12:00.940
dashed Ash safe and then the package name is you you I.D..

133
00:12:01.110 --> 00:12:05.410
This is a package which is capable of generating unique ideas.

134
00:12:05.430 --> 00:12:08.260
Thereafter we can restart this with NPM start.

135
00:12:08.370 --> 00:12:15.960
And now here in the controllers file I will import you will you I.D. by requiring and now data we don't

136
00:12:15.960 --> 00:12:22.260
just require you you I.D. but there are different words and dad simply are different kinds of I.D. it

137
00:12:22.260 --> 00:12:26.900
generates an all use V for which is a unique idea.

138
00:12:26.930 --> 00:12:35.800
That also has a timestamp component in it so here we then call you you idea as a function does generate

139
00:12:36.010 --> 00:12:43.660
such a unique idea and stores it here in that I.D. field with dad if my safe does again and I create

140
00:12:43.660 --> 00:12:50.230
my place again here you see I get back that place and that's the unique I.D. which was generated and

141
00:12:50.230 --> 00:13:00.070
now we can also send a get request to HDP local host 5000 slash places slash this I.D. And as long as

142
00:13:00.070 --> 00:13:04.430
we didn't restart the server in between we should get this.

143
00:13:04.520 --> 00:13:08.730
Of course it should be slash API slash places here.

144
00:13:08.830 --> 00:13:09.970
Now we get this.

145
00:13:10.490 --> 00:13:17.230
So this is now working and we're able to send post requests and also get requests with the help of postman

146
00:13:17.680 --> 00:13:19.900
and also with the help of our unique idea here.
