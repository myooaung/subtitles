1
00:00:02,360 --> 00:00:09,200
Before we work on more of these roots here let's actually restructure our roots file a little bit.

2
00:00:09,200 --> 00:00:15,350
It's already getting a bit bigger still OK but getting bigger and the more roots we add and with all

3
00:00:15,350 --> 00:00:20,480
the logic that needs to execute for every route the bigger it is file will get.

4
00:00:20,480 --> 00:00:28,700
Therefore it's a good idea to follow this MVC structure which stands for a model view controller.

5
00:00:28,700 --> 00:00:32,320
Now we want to have a view here that is what the user would see.

6
00:00:32,330 --> 00:00:38,720
We're building a REST API so there is no page no H html file we would render on the server which we

7
00:00:38,720 --> 00:00:46,440
show to the user but we have models like the arrow or blueprint here and we will have controllers.

8
00:00:46,460 --> 00:00:53,240
Well we don't have time yet but controllers will be files that hold the actual logic that should execute

9
00:00:53,750 --> 00:00:55,650
when a certain route is reached.

10
00:00:55,670 --> 00:01:02,720
So day glued to gather the incoming request and then our models and the logic that should run for such

11
00:01:02,720 --> 00:01:04,230
a incoming request.

12
00:01:04,610 --> 00:01:12,770
Hence here I'll create a new folder controllers and in there I will add a place to stash controller

13
00:01:12,800 --> 00:01:13,910
J.S. file.

14
00:01:13,910 --> 00:01:18,710
Again you could just name it places because it already is a controllers folder.

15
00:01:18,710 --> 00:01:23,630
But to make it really clear all day if I have to file open like this you can quickly see it here at

16
00:01:23,630 --> 00:01:24,280
the top.

17
00:01:24,380 --> 00:01:25,530
What's in the file.

18
00:01:25,580 --> 00:01:30,150
I will name it like this so that this is always clearly visible what's in there.

19
00:01:30,230 --> 00:01:37,100
So we'll have a place as controller and later also user's controller file.

20
00:01:37,130 --> 00:01:38,900
So already create both.

21
00:01:39,020 --> 00:01:45,290
And the idea is that in the places controller we have all the middleware functions which actually are

22
00:01:45,290 --> 00:01:47,240
reached for certain routes.

23
00:01:47,450 --> 00:01:53,850
So for example here Ford is first round here for a specific place idea.

24
00:01:53,980 --> 00:02:00,300
I would cut this function from places routes and move it to the places controller there.

25
00:02:00,340 --> 00:02:06,160
I will add it as a new function and it's up to you which kind of function you create if you use a function

26
00:02:06,160 --> 00:02:13,060
declaration or a function expression here I'll go for a function expression with an arrow function and

27
00:02:13,060 --> 00:02:19,430
it will name it get place by I.D. and paste in my function.

28
00:02:19,430 --> 00:02:26,690
Now as I mentioned alternatives would be to create a function get lazy by IED and then have your logic

29
00:02:26,690 --> 00:02:36,440
there or get place by I.D. and use the expression style but not use an arrow function but use the function

30
00:02:36,440 --> 00:02:37,040
keyword.

31
00:02:37,040 --> 00:02:38,450
These would be alternatives.

32
00:02:38,510 --> 00:02:41,210
All you go for the Arrow function here.

33
00:02:41,240 --> 00:02:43,600
So now we have get placed by idea.

34
00:02:43,840 --> 00:02:46,790
I also have another function of course.

35
00:02:46,790 --> 00:02:52,610
So I'll cut this as well from my roots file and added here in a controller and this file of course will

36
00:02:52,610 --> 00:02:57,220
now get a bit bigger but it's clearly focused on only middleware functions.

37
00:02:57,350 --> 00:03:03,710
And that's the whole idea we want to have focused files we want to have a file which is all about routing

38
00:03:04,040 --> 00:03:11,180
and mapping paths and to HBP methods to controllers and then we want to have controllers which are all

39
00:03:11,180 --> 00:03:13,240
about having these middleware functions.

40
00:03:13,250 --> 00:03:14,330
And the logic.

41
00:03:14,450 --> 00:03:19,190
So it's okay if that file gets a bit bigger we can always go into this file if we want to look for the

42
00:03:19,190 --> 00:03:24,020
logic and go into this file if you want to look for the mapping and the paths we're using and we're

43
00:03:24,020 --> 00:03:27,260
not mixing both in one super huge file.

44
00:03:27,260 --> 00:03:28,720
That's the idea.

45
00:03:28,730 --> 00:03:37,310
So in the places controller we can now add that our function get place by user I.D. paste in that function

46
00:03:37,310 --> 00:03:45,470
here and now important also move the dummy places from the roots file to the places controller file

47
00:03:45,500 --> 00:03:49,750
because that is where we interact with the dummy places.

48
00:03:49,790 --> 00:03:53,510
That's of course therefore where we should have that array.

49
00:03:53,530 --> 00:03:54,880
Now this is all nice.

50
00:03:54,880 --> 00:04:00,520
We don't need to import express here by the way because I'm not using any feature from express here.

51
00:04:00,520 --> 00:04:06,180
I'm just setting up some regular functions which receive everything they need as part parameters.

52
00:04:06,490 --> 00:04:12,490
But we need to export our functions here so that we can link him to the routes which are registered

53
00:04:12,520 --> 00:04:13,780
in a different file.

54
00:04:13,870 --> 00:04:21,350
Side note we also need to import the HDP error model here in the places controller though because I'm

55
00:04:21,370 --> 00:04:29,390
using it in there but now I want to export to get placed by I.D. and they get placed by user I.D. function.

56
00:04:29,410 --> 00:04:34,130
Now we learned that we can export by using module dot exports.

57
00:04:34,150 --> 00:04:36,810
This allows us to export a single thing.

58
00:04:36,820 --> 00:04:40,420
But here I have multiple things for that node.

59
00:04:40,440 --> 00:04:45,620
All the has an alternative export syntax instead of module exports.

60
00:04:45,670 --> 00:04:49,550
You can use exports dot any name of your choice.

61
00:04:49,570 --> 00:04:52,030
But here I like to repeat my function names.

62
00:04:52,120 --> 00:04:58,780
So get a place by I.D. for example and set this equal to the thing you want to export under that name.

63
00:04:58,780 --> 00:05:01,610
So in this case I'll point at get placed by D.

64
00:05:01,660 --> 00:05:03,780
Important I don't execute it.

65
00:05:03,940 --> 00:05:07,270
Express will execute it when that request is incoming.

66
00:05:07,270 --> 00:05:10,960
I just want to export a pointer to that function.

67
00:05:10,960 --> 00:05:17,640
So the Express is able to know what to execute for an incoming request and I'll therefore do the same.

68
00:05:17,720 --> 00:05:25,720
Forget placed by user I.D. here now both will be bundled in one object which now has these properties

69
00:05:25,900 --> 00:05:29,660
which hold the pointers to these functions as values.

70
00:05:29,680 --> 00:05:38,110
So now in places routes we can import our controllers our places controllers can be found with require

71
00:05:38,320 --> 00:05:44,710
by going out of the routes folder into the controllers folder into places controllers and then here

72
00:05:44,740 --> 00:05:50,330
for a router get place I.D. I can point at places controllers get placed by Aidid.

73
00:05:50,500 --> 00:05:52,510
Again I'll not execute it here.

74
00:05:52,510 --> 00:06:01,210
I'll just point edit so Dad Express has a pointer at the function it should execute for us when a request

75
00:06:01,210 --> 00:06:07,200
reaches this route and we can do the same thing here for this route.

76
00:06:07,330 --> 00:06:12,500
And now we have a pointer at this function for this route and a pointer at this function for this route.

77
00:06:12,550 --> 00:06:21,100
The result is that it should work ASP before let's try both the error and the success cases Yep that

78
00:06:21,100 --> 00:06:26,920
is looking good but the difference is that now we now have a clean routes file where we can quickly

79
00:06:26,920 --> 00:06:33,190
see our paths and methods and which controller function is responsible for it and then our controller

80
00:06:33,190 --> 00:06:39,820
file which is a bit longer but which itself then is also clearly focused on just defining our middleware

81
00:06:39,820 --> 00:06:40,510
functions.
