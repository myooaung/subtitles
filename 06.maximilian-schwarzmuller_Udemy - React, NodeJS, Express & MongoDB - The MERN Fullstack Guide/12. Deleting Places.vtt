WEBVTT
1
00:00:02.190 --> 00:00:09.960
To delete a place I want to set dummy places equal to dummy places dot filter the filter method is a

2
00:00:09.960 --> 00:00:17.820
default method available on JavaScript arrays it returns a brand new Array filtered per our function

3
00:00:17.820 --> 00:00:19.300
we pass to filter.

4
00:00:19.470 --> 00:00:23.040
This is a function which all the runs on every element in dummy places.

5
00:00:23.430 --> 00:00:28.320
And if we return true in that function we keep that place in the newly returned array.

6
00:00:28.320 --> 00:00:29.350
If we return false.

7
00:00:29.370 --> 00:00:33.480
We drop it from the newly returned to rate the original arrays never touched.

8
00:00:33.480 --> 00:00:39.150
But since I then overwrite the original array with the newly returned array we updated with our filtered

9
00:00:39.210 --> 00:00:39.870
array.

10
00:00:40.080 --> 00:00:47.490
And here I want to return true for every element but the element which has to I.D. that is encoded here

11
00:00:47.550 --> 00:00:49.460
in our you are L.

12
00:00:49.530 --> 00:00:56.060
So we need to extract that I.D. first place I.D. we get it from request prints dot pit.

13
00:00:56.430 --> 00:01:04.430
And here I return Pete on I.D. unequal place I.D. which means Return true and therefore keep the place.

14
00:01:04.470 --> 00:01:06.460
If I.D. do not match.

15
00:01:06.540 --> 00:01:10.330
If I.D. do match then it is the place I want to remove.

16
00:01:10.410 --> 00:01:15.900
So I will return false which drops to place from the newly returned array and that newly returned to

17
00:01:15.900 --> 00:01:19.200
raid then overrides the old array and that's already it.

18
00:01:19.200 --> 00:01:25.320
This is as simple as deleting a place is with our dummy data at least later of course we'll adjust all

19
00:01:25.320 --> 00:01:29.400
these middleware functions to work with a real database.

20
00:01:29.520 --> 00:01:33.610
Of course we all should send back a response to 100 response.

21
00:01:33.630 --> 00:01:42.390
And while you it's up to you which data you want to attach maybe send a message delete it plays or and

22
00:01:42.450 --> 00:01:44.730
or attach to place you delete it.

23
00:01:44.730 --> 00:01:50.190
You would have to identify it first then I'll not do that here I'll just send back this message.

24
00:01:50.220 --> 00:01:51.470
You could also omit this.

25
00:01:51.470 --> 00:01:54.420
You could also not send back any data like that.

26
00:01:54.450 --> 00:01:55.320
It's up to you.

27
00:01:55.350 --> 00:01:59.430
I will send this message object and now I want to see where it works.

28
00:02:00.000 --> 00:02:04.170
So here in postmen Let's delete that P one place for that.

29
00:02:04.170 --> 00:02:07.710
I'll create a new request with the delete method.

30
00:02:07.870 --> 00:02:15.170
The P locally hosted five thousand slash API slash places slash p 1.

31
00:02:15.300 --> 00:02:23.340
No data needs to be added to the body we can just send it like this like a get request almost and I

32
00:02:23.340 --> 00:02:27.510
get an error assignment to constant variable.

33
00:02:27.540 --> 00:02:34.460
Yep I'm overwriting dummy places here but since this is the first time I'm replacing the entire array

34
00:02:34.460 --> 00:02:38.760
with something new I accidentally still left us to be a constant.

35
00:02:38.870 --> 00:02:45.590
It should be a variable with left so that I am allowed to assign a new value to dummy places and replace

36
00:02:45.590 --> 00:02:48.240
the entire array with a brand new one.

37
00:02:48.260 --> 00:02:55.730
So here I'll go with left and now if we safeties and we simply sent this request again it now works

38
00:02:56.090 --> 00:02:59.220
delete it place it if I now try to find that place.

39
00:02:59.220 --> 00:03:02.500
Indeed I can't find a place 40 provided.

40
00:03:02.870 --> 00:03:09.620
Now again just as with updating and creating if we ever restart the server of course we're back to our

41
00:03:09.620 --> 00:03:17.450
initial state which is that we have that place because at the moment all changes are only done in memory.

42
00:03:17.450 --> 00:03:18.800
Still that's good enough.

43
00:03:18.800 --> 00:03:24.100
We can see that all these routes work and we got our initial rest api set up.

44
00:03:24.100 --> 00:03:30.800
Therefore we have our routes our place roots at least we have our place controllers with the logic to

45
00:03:30.800 --> 00:03:39.590
get places by I.D. or by user I.D. to create a new place to update a place by I.D. and to delete a place

46
00:03:39.590 --> 00:03:42.860
by a D which is already amazing.

47
00:03:42.860 --> 00:03:46.950
Now with that we should also implement some user routes.

48
00:03:46.970 --> 00:03:53.600
We won't really add authentication right now but we can still at least at the roots and add some dummy

49
00:03:53.600 --> 00:04:00.830
logic to them so that later in the course and the authentication module we can simply add D off indication

50
00:04:00.830 --> 00:04:03.410
logic to the already existing routes.

51
00:04:03.530 --> 00:04:05.310
So let's do that as a next step.
