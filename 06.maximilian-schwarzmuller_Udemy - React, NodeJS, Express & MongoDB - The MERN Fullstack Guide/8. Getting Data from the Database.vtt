WEBVTT
1
00:00:02.020 --> 00:00:04.150
So creating products works fine.

2
00:00:04.150 --> 00:00:07.530
So we have this part of our application.

3
00:00:07.630 --> 00:00:13.060
But now we want to make sure that if we send a GET request we can display all the products stored in

4
00:00:13.060 --> 00:00:18.910
our collection and therefore displaying all the documents to do so we go back to our Mongo J S file

5
00:00:19.180 --> 00:00:19.530
here.

6
00:00:19.630 --> 00:00:26.230
We now work on get products and dÃ©cor syntax will be pretty similar to the one we see up here for our

7
00:00:26.230 --> 00:00:27.640
create product logic.

8
00:00:27.640 --> 00:00:33.310
Nevertheless I created from scratch once again just for practicing reasons we don't have to specify

9
00:00:33.340 --> 00:00:36.670
a structure for the product obviously because to get the product.

10
00:00:36.670 --> 00:00:44.470
Therefore we again have to create our new client constant which again will instantiate a new Mongo client

11
00:00:44.470 --> 00:00:45.070
class.

12
00:00:45.130 --> 00:00:52.450
And don't forget to provide to you are L otherwise the client doesn't know which server we want to connect

13
00:00:52.450 --> 00:00:53.440
to.

14
00:00:53.560 --> 00:00:56.020
So that's as we did it before up here actually.

15
00:00:56.050 --> 00:00:56.650
So we are now.

16
00:00:56.770 --> 00:00:57.420
This part.

17
00:00:58.090 --> 00:01:04.060
Now I will again add a try catch block here because as for creating documents also when getting documents

18
00:01:04.060 --> 00:01:05.920
from the server well things go wrong.

19
00:01:05.920 --> 00:01:09.210
Therefore we want to make sure we have a proper error handling Europe.

20
00:01:09.430 --> 00:01:16.590
So what a catch blog is actually almost the same as we had it before in the Iraq case.

21
00:01:16.590 --> 00:01:24.630
I want to return again to interrupt code execution a response Chase and method and disrupt your message

22
00:01:25.200 --> 00:01:33.690
maybe could not retrieve products and in the tribe log we can follow the same logic.

23
00:01:33.690 --> 00:01:39.270
This means you first want to establish the connection to our money server an asynchronous task again.

24
00:01:39.330 --> 00:01:46.250
So which flow to our client and connect method then we want to get access to a specific database.

25
00:01:46.260 --> 00:01:53.760
So we create a new constant TB again and we again use our client and now the DB method without providing

26
00:01:53.850 --> 00:01:58.800
the database name as we added the database name in our you are appear.

27
00:01:58.830 --> 00:02:04.990
So that's again this part and now we don't want to store on your product.

28
00:02:04.990 --> 00:02:08.630
Now we want to get access to the existing products for that.

29
00:02:08.660 --> 00:02:16.670
I'll create a new constant here which could be named on products.

30
00:02:16.810 --> 00:02:20.700
And again we have an asynchronous task therefore let's add a weight.

31
00:02:20.710 --> 00:02:25.750
And now we want to refer to the database in there to a collection.

32
00:02:25.750 --> 00:02:31.150
Now the collection name has to be the same that we used up here because I want to refer to documents

33
00:02:31.180 --> 00:02:32.860
stored in this collection.

34
00:02:32.860 --> 00:02:36.280
Therefore we refer to our products collection.

35
00:02:36.280 --> 00:02:39.220
And now what do I want to do.

36
00:02:39.220 --> 00:02:45.190
Well I don't want to insert one but I want to find the document so we can simply use defined method

37
00:02:45.370 --> 00:02:53.170
and by default defined method in Mongolia EPA returns a so-called cursor a cursor is basically a pointer

38
00:02:53.170 --> 00:02:58.210
to the results of the query and you can then iterate for the cursor to see all the results.

39
00:02:58.300 --> 00:03:03.850
We don't want such a cursor right here we actually want to display all the documents immediately and

40
00:03:03.850 --> 00:03:08.730
to achieve that we can simply add to every method.

41
00:03:08.780 --> 00:03:12.520
This will allow us to get the documents in an array.

42
00:03:12.590 --> 00:03:18.540
You can also configure find to have a filter or to only return some views of the identified products.

43
00:03:18.620 --> 00:03:23.720
But here we don't need either of that later and of course you will see examples for filtering though

44
00:03:23.990 --> 00:03:28.640
and that's it almost as before we have to make sure that once we open a connection we ought to close

45
00:03:28.640 --> 00:03:29.020
it.

46
00:03:29.030 --> 00:03:34.490
Therefore we again use client lowest here.

47
00:03:34.490 --> 00:03:43.060
And finally I need a response and the response should be again of type Jason and I want to refer to

48
00:03:43.060 --> 00:03:45.270
all products you we have a constant here.

49
00:03:45.280 --> 00:03:46.870
So do you block scoping.

50
00:03:46.870 --> 00:03:53.770
We should add variable products variable and now removed constant.

51
00:03:53.770 --> 00:04:01.380
With that we can use it down here and we want to get the products as a response by saving this.

52
00:04:01.380 --> 00:04:07.740
We are done in the Mongo J S file but we have to make sure we also add our get products function in

53
00:04:07.740 --> 00:04:15.390
our aptly as file this time as a second argument here in the get method for Dad we add Mongo practice

54
00:04:15.700 --> 00:04:21.260
dot get products here again don't forget to save this.

55
00:04:21.520 --> 00:04:30.820
And let's not go to postman and treat a second request this time it gets request altered you log close

56
00:04:30.830 --> 00:04:32.750
to 3000 slash products.

57
00:04:32.750 --> 00:04:37.880
And now if we had sent Yeah we get back our product.

58
00:04:37.880 --> 00:04:39.140
So this seems to work.

59
00:04:39.170 --> 00:04:43.400
Let us also create a second product maybe to see if we order which we multiple products.

60
00:04:43.430 --> 00:04:51.860
Let's say we have a banana maybe for one dot 19 and let's create this product.

61
00:04:51.860 --> 00:04:53.240
This worked fine.

62
00:04:53.240 --> 00:04:57.730
And if in sent another get request we should see that we get both the apple and the banana.

63
00:04:58.020 --> 00:04:58.300
Yeah.

64
00:04:58.340 --> 00:04:59.000
Perfect.

65
00:04:59.000 --> 00:04:59.830
This is great.

66
00:04:59.840 --> 00:05:09.160
Let's have a look at our database and reloaded once again and we also have both our documents in our

67
00:05:09.160 --> 00:05:13.300
products collection first document and the second document with the banana.

68
00:05:13.300 --> 00:05:20.350
So this is how we can create documents in Mongo TB and how we can get all our documents now although

69
00:05:20.380 --> 00:05:26.150
this is a very simple application in the end we wrote quite a lot of code just to do this.

70
00:05:26.380 --> 00:05:31.050
And we also have to define each single step to make sure no longer to be works correctly.

71
00:05:31.060 --> 00:05:35.830
You see we have to define the client here and then we have to establish the connection we have to refer

72
00:05:35.830 --> 00:05:38.210
to the database to the corresponding collection.

73
00:05:38.280 --> 00:05:44.370
We we have to tell Mom would it be that you want to insert one specific document and so on Indian.

74
00:05:44.400 --> 00:05:50.680
This is not a big problem but actually I would prefer to rather focus on three core logic or for application

75
00:05:50.710 --> 00:05:53.770
because in the end well I just want to create a new document.

76
00:05:53.770 --> 00:05:58.230
Why do I need all this code right here and why do we have to set up the connection manually.

77
00:05:58.240 --> 00:05:59.740
Why do we have to close it manually.

78
00:05:59.800 --> 00:06:01.060
And so on.

79
00:06:01.060 --> 00:06:06.310
The great thing is there is a little helper which can make our lives a lot easier when working with

80
00:06:06.310 --> 00:06:09.340
Hmong would you be in this helper is called mongoose.
