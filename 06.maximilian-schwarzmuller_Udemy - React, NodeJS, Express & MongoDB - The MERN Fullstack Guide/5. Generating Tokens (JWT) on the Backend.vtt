WEBVTT
1
00:00:02.110 --> 00:00:08.200
Now for that token I mentioned that it would be a string in the end which would generate which is generated

2
00:00:08.200 --> 00:00:11.670
with the help of a certain private key and a certain algorithm.

3
00:00:11.710 --> 00:00:17.540
And then we can encode data into that string so we can for example encode the user I.D. that belongs

4
00:00:17.540 --> 00:00:19.660
to the token into that token.

5
00:00:19.660 --> 00:00:24.910
You won't be able to read it directly in the token but you can then decode the token to find out which

6
00:00:24.910 --> 00:00:27.050
data is in there for example.

7
00:00:27.130 --> 00:00:34.700
So to create such a token will install and no third party package and this package is called Jason Webb.

8
00:00:34.750 --> 00:00:40.470
Token one word and simply install it with npm install dash dash save.

9
00:00:40.570 --> 00:00:47.770
This is a package which allows us to generate such tokens with that private key and therefore here in

10
00:00:47.770 --> 00:00:53.620
users controller where I want to generate such token I will import it and store it in a JWT constant

11
00:00:54.130 --> 00:00:55.540
and imported with require.

12
00:00:55.540 --> 00:01:00.730
Jason Webb Token Of course you can name these constants here whatever you want.

13
00:01:00.970 --> 00:01:03.360
Let's restart to serve with NPM start thereafter.

14
00:01:03.370 --> 00:01:09.000
And now we can adjust our code and I want to generate such a token bow for sign up because of a user

15
00:01:09.020 --> 00:01:09.820
signed up.

16
00:01:09.850 --> 00:01:16.390
I know that this is a valid user because well we just created the user so we can also create a token

17
00:01:16.390 --> 00:01:17.000
there.

18
00:01:17.050 --> 00:01:24.320
And of course I also when I generate a token for log in so let's start with sign up here.

19
00:01:24.340 --> 00:01:30.080
We're storing a user in the database so there after we know this is a valid user.

20
00:01:30.160 --> 00:01:35.890
And now we can generate such a token and it's there after actually the token and maybe some user data

21
00:01:35.920 --> 00:01:42.730
which I want to return instead of the entire user object because not all user data is directly required

22
00:01:42.730 --> 00:01:49.030
in the front end here but that of course depends on the application your building and your exact requirements.

23
00:01:49.030 --> 00:01:55.290
So here I will add a token variable and then to create it we can call JWT.

24
00:01:55.300 --> 00:02:02.890
So this package I just added sign the sign method here returns a string in the end.

25
00:02:02.890 --> 00:02:10.630
And this string will be the token so we can actually say token equals JWT sign and then it takes some

26
00:02:10.840 --> 00:02:12.460
arguments some inputs.

27
00:02:12.670 --> 00:02:18.630
The first argument here is the payload of the token sort of data you want to encode into the token.

28
00:02:18.640 --> 00:02:22.270
This can be a string an object or a buffer.

29
00:02:22.270 --> 00:02:28.900
Now here I will encode an object and the entire serialization and encoding logic will be handled by

30
00:02:28.900 --> 00:02:30.030
this package.

31
00:02:30.040 --> 00:02:35.770
So here we have a vanilla javascript object and there are 1 to encode the user I.D. into the token so

32
00:02:35.770 --> 00:02:45.070
that we know which user does token belongs to and for that I will use my created user thought I.D. I.D.

33
00:02:45.210 --> 00:02:51.280
is a getter provided by Mongo is on average created user Document object we're working with and this

34
00:02:51.280 --> 00:02:56.830
is the I.D. Mom would you be will have generated for this user and maybe we also want to encode the

35
00:02:56.830 --> 00:02:59.810
email address but it's up to you which data you want to store here.

36
00:02:59.890 --> 00:03:02.110
I just chose some examples.

37
00:03:02.110 --> 00:03:08.590
So here I'm encoding the user I.D. which is very important in my case and to email into the token the

38
00:03:08.590 --> 00:03:12.100
next argument here is this private key.

39
00:03:12.100 --> 00:03:19.270
So this simply is a string which only the server knows so which you never ever share with any client.

40
00:03:19.270 --> 00:03:24.820
It's only in your server side code and here I will named as super secret

41
00:03:27.160 --> 00:03:29.590
don't share.

42
00:03:29.880 --> 00:03:37.330
And of course you can enter any string you want here the lost argument is optional and here you can

43
00:03:37.330 --> 00:03:42.040
configure it a token with a javascript object where you can set up certain options.

44
00:03:42.070 --> 00:03:48.910
For example you can set a token expiration with expires in and this accepts terms like one hour like

45
00:03:48.910 --> 00:03:49.560
this.

46
00:03:49.660 --> 00:03:56.020
You can check out the official docs of Jason web token to find all information about all config options

47
00:03:56.020 --> 00:04:03.010
here and about all the time strings you can pass to expires in now letting the token expire is actually

48
00:04:03.010 --> 00:04:09.880
a really recommended practice because the token we sent back can't be faked or edited by the client

49
00:04:09.940 --> 00:04:16.430
because whenever you would do so since you don't know the private key you would generate a invalid token.

50
00:04:16.630 --> 00:04:22.540
So even if you decoded on the front end and you tweak the user I.D. and try to recreate the token you

51
00:04:22.540 --> 00:04:27.020
won't be able to replicate this token because you don't know the private key on the client.

52
00:04:27.130 --> 00:04:33.790
So that is how we secured the token but if you steal this exact token we're generating here.

53
00:04:33.790 --> 00:04:39.520
If someone gets access to your token then this token is enough to fake that.

54
00:04:39.550 --> 00:04:46.590
This person is you because this token is accepted by the server as your identity.

55
00:04:46.600 --> 00:04:53.140
So to say it's accepted as your I am logged in proof now it's stealing that token on the client is a

56
00:04:53.140 --> 00:04:58.550
different thing it's not that easy and I will talk about this when we actually store it on the client.

57
00:04:58.660 --> 00:05:05.200
So it's not that easy to steal that token still as an extra security mechanism it is recommended that

58
00:05:05.200 --> 00:05:06.760
you let this token expire.

59
00:05:06.760 --> 00:05:13.780
For example in an hour so that even if it would be stolen there only is a very short time duration during

60
00:05:13.780 --> 00:05:17.030
which attackers could do something with it.

61
00:05:17.090 --> 00:05:21.840
Now this token creation all that could fail so I will wrap it with try catch here.

62
00:05:21.920 --> 00:05:24.800
It doesn't return a promise but it still could fail.

63
00:05:24.800 --> 00:05:26.370
So here try catch.

64
00:05:26.470 --> 00:05:30.530
And if it does fail I will just return my signing up failed.

65
00:05:30.620 --> 00:05:34.100
Error here if it does not fail.

66
00:05:34.110 --> 00:05:40.560
However we do have a token and therefore now I can return this as part of the data I want to send back.

67
00:05:40.560 --> 00:05:47.480
Now the data I want to send back totally is up to you here for this users sign up process.

68
00:05:47.490 --> 00:05:54.300
I will send back the I.D. of the user that was created which I get from created user I.D. the email

69
00:05:54.300 --> 00:05:57.860
maybe which is created user dot email and very important.

70
00:05:57.900 --> 00:06:02.330
This token These are the three pieces of data I want to return here.

71
00:06:02.430 --> 00:06:07.620
But again it's typically up to you what you want to return to your front and in the application your

72
00:06:07.620 --> 00:06:09.940
ability.

73
00:06:10.010 --> 00:06:11.820
That was the sign up process.

74
00:06:11.820 --> 00:06:16.330
Let's repeat this for the log in and of course feel free to pass the video at this point and try this

75
00:06:16.340 --> 00:06:17.080
on your own.

76
00:06:17.150 --> 00:06:23.020
After a short pause which I give you to pause the video we'll do it together.

77
00:06:23.080 --> 00:06:25.320
So where are you successful.

78
00:06:25.360 --> 00:06:27.590
Of course it shouldn't be too hard.

79
00:06:27.610 --> 00:06:33.610
We can't just copy this token creation code here and go to the log in process here.

80
00:06:33.790 --> 00:06:39.310
And once we validated that we do have a user for this email address and once we also validate that that

81
00:06:39.310 --> 00:06:40.730
the password is correct.

82
00:06:40.750 --> 00:06:46.670
So right before we send the response we want to generate this token now important.

83
00:06:46.840 --> 00:06:49.740
Use the same private key as above.

84
00:06:49.750 --> 00:06:56.080
If you use a different one you will generate different tokens and therefore when the user when the client

85
00:06:56.080 --> 00:07:01.810
later sends a token with a request you wouldn't be able to validate them correctly on the server.

86
00:07:01.810 --> 00:07:04.270
And here they should be logging in I guess.

87
00:07:04.270 --> 00:07:12.130
So make sure that you use the same key here in log in as you did in sign up.

88
00:07:12.190 --> 00:07:14.230
I will also use the same expiration date of course.

89
00:07:14.230 --> 00:07:17.330
In general I want to have the same configuration for my token.

90
00:07:17.530 --> 00:07:23.620
Just the data I encode is generally the same but here in log in I don't have to created a user.

91
00:07:23.620 --> 00:07:29.530
Instead we have the existing user here so I get my I.D. which I want to encode from existing user I.D.

92
00:07:29.650 --> 00:07:32.460
and to email from existing user email.

93
00:07:32.470 --> 00:07:36.410
Other than that it's the same logic just the error message.

94
00:07:36.410 --> 00:07:40.110
Changes to logging in failed.

95
00:07:40.110 --> 00:07:45.620
And then here as a response I don't return a message I don't return to user object.

96
00:07:45.630 --> 00:07:51.240
Instead I return a user I.D. which I get from existing user I.D. maybe also the email which we get from

97
00:07:51.240 --> 00:07:56.790
existing user email and very important of course the token which we just generated.

98
00:07:56.790 --> 00:07:59.350
And with that data the client.

99
00:07:59.370 --> 00:08:05.910
So in our case do you react the application will be able to use and stored is token and attach it to

100
00:08:05.910 --> 00:08:14.010
future requests to roots on the back end that require authentication and that is actually the next step

101
00:08:14.450 --> 00:08:19.620
we are generating this token but thus far it's totally useless thus far on the client.

102
00:08:19.620 --> 00:08:25.920
We could store it or we could not store it because besides this token generation we haven't added any

103
00:08:25.920 --> 00:08:31.380
logic to the back backend that would protect certain routes from an authenticated access.

104
00:08:31.380 --> 00:08:34.680
Right now you still can send any request to any route here.

105
00:08:34.680 --> 00:08:36.390
We're not blocking this.

106
00:08:36.600 --> 00:08:42.630
So as a next if we want to make sure that certain routes like creating a new place or patching or deleting

107
00:08:42.630 --> 00:08:51.660
it are only accessible if the request has a token attached to it and this token also is validated by

108
00:08:51.660 --> 00:08:55.820
the server and we can confirm that it was created with this private key.

109
00:08:56.070 --> 00:08:59.460
So as the next step will implement as route protection on the back end.
