WEBVTT
1
00:00:02.150 --> 00:00:05.950
So why were we redirected when we actually had an error.

2
00:00:05.960 --> 00:00:12.220
Keep in mind that we only call off log in here in the try block not in the catch block.

3
00:00:12.260 --> 00:00:18.950
So if we have an error we actually shouldn't be redirected because we're not triggering the log in action.

4
00:00:18.950 --> 00:00:28.830
Well the problem we have there is that the way to fetch API works if you get back a 400 ish or a 500

5
00:00:28.930 --> 00:00:36.680
dash error code from the back end it still treats it as not an error because technically you have no

6
00:00:36.680 --> 00:00:37.300
error.

7
00:00:37.310 --> 00:00:40.260
You sent a request and you've got back a response.

8
00:00:40.260 --> 00:00:46.910
Sure it's a response with an hour status code but that's really just the data attached to the response.

9
00:00:46.910 --> 00:00:53.060
Technically there was no error and therefore we don't make it into the catch block if we do we have

10
00:00:53.060 --> 00:00:57.380
a 400 ish or 500 dish response status code.

11
00:00:57.380 --> 00:01:03.230
Now in my application I want to make it into the catch block though because for me it clearly is an

12
00:01:03.230 --> 00:01:11.390
error if we have a 400 dish or 500 dish status code and we can thankfully implement this after we passed

13
00:01:11.420 --> 00:01:16.190
the response body because I want to use it even if we have an error.

14
00:01:16.220 --> 00:01:20.210
After all it's the response body which will include the error message.

15
00:01:20.270 --> 00:01:30.580
So after we pass this I want to check if response okay the Okay properties a property that exists on

16
00:01:30.580 --> 00:01:37.600
the response object and it will be true if we have a 200 dish status code or put in other words if we

17
00:01:37.600 --> 00:01:42.800
have a 400 dish or a 500 dish status code will not make it in here.

18
00:01:42.820 --> 00:01:49.140
So if response is not OK we know we have a 400 or 500 status code.

19
00:01:49.480 --> 00:01:53.200
And in this case I will throw my error here.

20
00:01:53.500 --> 00:02:01.060
So in this case I want to throw a new error and I will use the default javascript error object and basically

21
00:02:01.750 --> 00:02:09.250
pass on my response data dot message which should exist here because we sent back a message property

22
00:02:09.250 --> 00:02:14.470
on any error we generate on the back end since we throw an error here.

23
00:02:14.500 --> 00:02:16.360
This code will not execute.

24
00:02:16.480 --> 00:02:19.290
And instead the catch blogs should trigger.

25
00:02:19.360 --> 00:02:26.760
So if we try this again switch to sign up and try signing up with this existing email address again.

26
00:02:26.770 --> 00:02:32.350
If I click sign up we see the spinner of course only briefly because it's so fast but then we stay here

27
00:02:32.890 --> 00:02:39.050
and you see now this error gets logged from line 88 which is inside off to catch block.

28
00:02:39.130 --> 00:02:43.310
So that's great that's the first step but logging it like this is not enough.

29
00:02:43.330 --> 00:02:45.850
After all we do manage our state here.

30
00:02:46.000 --> 00:02:52.510
So indeed it would make more sense to also output some visual elements here and for that I want to render

31
00:02:52.510 --> 00:02:54.220
my error modal.

32
00:02:54.210 --> 00:02:57.920
I want to render it next to discard and not inside of it.

33
00:02:58.000 --> 00:03:04.420
Therefore since we must only have one route JSA X element I'll wrap this in the react fragment.

34
00:03:04.420 --> 00:03:11.290
This entire card so that next to the card in front of it I can render my error modal.

35
00:03:11.290 --> 00:03:18.490
Now the error modal requires an error which I feed in and this error should be the error message.

36
00:03:18.550 --> 00:03:24.850
So I will just use error and this now is our error state which we set with set error.

37
00:03:24.850 --> 00:03:28.080
Keep in mind I named this error here.

38
00:03:28.090 --> 00:03:36.450
This is my constant and this is what I'm passing in on this error prop to the error modal instead of

39
00:03:36.470 --> 00:03:37.490
the error multimodal.

40
00:03:37.490 --> 00:03:40.210
I then have the logic to showed as modal.

41
00:03:40.250 --> 00:03:50.680
If the error is not empty well and then I also want to add on Clear prop here because in my error modal

42
00:03:50.740 --> 00:03:56.770
I trigger unclear if we close that modal which opens up it's the default modal just wrapped with some

43
00:03:56.800 --> 00:03:57.960
extra logic.

44
00:03:58.150 --> 00:04:02.140
So we should provide a unclear prop on the error modal in there.

45
00:04:02.140 --> 00:04:06.430
I want to execute a function which in the end resets my error.

46
00:04:06.460 --> 00:04:14.380
So here I will add a handle error or actually a error handler to stay in line with Malbin naming function.

47
00:04:14.620 --> 00:04:20.380
And the only thing I do here is I will call set error to update my error estate and set it to null to

48
00:04:20.380 --> 00:04:21.400
basically clear it.

49
00:04:21.820 --> 00:04:29.610
And now here I can point at error handler with these changes made if we go back and we try this again

50
00:04:31.720 --> 00:04:36.790
Try creating a user with an existing email password and a click sign up.

51
00:04:36.790 --> 00:04:41.770
Now we get this error modal and muni click OK we handle this we can try again.

52
00:04:41.830 --> 00:04:47.650
Now if I use a new email address which was not taken before it therefore succeeds and we are redirected

53
00:04:47.980 --> 00:04:51.250
and otherwise as you just saw we get this error.

54
00:04:51.250 --> 00:04:55.790
So now we have proper error handling and a loading state in place.

55
00:04:55.930 --> 00:05:00.850
And I would say our first HBP request is looking quite decent with that.

56
00:05:00.910 --> 00:05:02.830
Let's all work on logging in.
