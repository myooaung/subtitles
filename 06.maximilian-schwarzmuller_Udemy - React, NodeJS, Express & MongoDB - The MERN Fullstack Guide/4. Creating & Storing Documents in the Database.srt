1
00:00:02,090 --> 00:00:03,980
So where do we create this document.

2
00:00:03,980 --> 00:00:09,180
Well if you think about the operations that you're going to achieve here create read update and delete.

3
00:00:09,350 --> 00:00:13,520
Then the first logical step to use the model is C Create.

4
00:00:13,550 --> 00:00:18,770
Because if you can create the document then we can also have a look at reading it updating it or deleting

5
00:00:18,770 --> 00:00:19,150
it.

6
00:00:19,160 --> 00:00:25,210
So we want to create a new place and this can of course be done here in our places controller.

7
00:00:25,250 --> 00:00:29,520
Here we have the dummy places we won't use these at the end of this module of course.

8
00:00:29,600 --> 00:00:33,170
And if we go down a bit we have our trade place constant.

9
00:00:33,170 --> 00:00:38,780
This is what we should focus on now as we want to use our newly created place model though we first

10
00:00:38,780 --> 00:00:46,190
have to import it for that appear in the import place again with a capital P as this would be a constructor

11
00:00:46,190 --> 00:00:47,220
function.

12
00:00:47,330 --> 00:00:56,600
And this requires our models places file with that we can use the place model.

13
00:00:56,600 --> 00:01:03,170
And if we go down a bit here here it is our creative place constant the previous code is fine.

14
00:01:03,170 --> 00:01:04,660
So here we have some validation.

15
00:01:04,670 --> 00:01:08,140
And here we have the coordinates that we get with our chief coding logic.

16
00:01:08,150 --> 00:01:11,440
So we don't have to change this but here our created place logic.

17
00:01:11,480 --> 00:01:12,860
This has to be updated.

18
00:01:12,920 --> 00:01:21,330
So let's get rid of this code here and let's first instantiate our place constructor here with new place.

19
00:01:21,770 --> 00:01:23,720
And now we have a new javascript object.

20
00:01:23,720 --> 00:01:28,490
And here we can all add data to our model what our model needs still it's already predefined by our

21
00:01:28,490 --> 00:01:29,000
schema.

22
00:01:29,270 --> 00:01:32,770
So we have title description image and so on.

23
00:01:32,900 --> 00:01:39,250
Because of that we can get started with the title once again I'll again use this shorter syntax here.

24
00:01:39,270 --> 00:01:43,320
So title title is what I wrote right here.

25
00:01:43,430 --> 00:01:52,100
We need the description the address we need to location with corresponding coordinates and we need an

26
00:01:52,190 --> 00:01:53,210
image.

27
00:01:53,210 --> 00:02:00,320
And as I said before the image should be a U R L so no real file later in this course in the file upload

28
00:02:00,320 --> 00:02:00,950
module.

29
00:02:01,010 --> 00:02:06,560
We learn how we can store images on our server not on the Mongo DP servers and under the database but

30
00:02:06,560 --> 00:02:12,210
on our back and server then that's your elbow point towards of Hull stored on our server.

31
00:02:12,290 --> 00:02:17,020
Here I'll just take dummy your l from a file in the Internet.

32
00:02:17,210 --> 00:02:20,180
Make sure to store this As String.

33
00:02:20,180 --> 00:02:21,730
Don't forget the comma.

34
00:02:21,860 --> 00:02:30,310
And with that we only need our Creator here as I said we will use a dummy idea.

35
00:02:30,310 --> 00:02:32,030
Don't forget to add to see me colon.

36
00:02:32,350 --> 00:02:34,300
And with that we created our model already.

37
00:02:34,450 --> 00:02:41,470
As I said very important make sure that the properties here in our model are the same that we have here

38
00:02:41,560 --> 00:02:42,270
in our schema.

39
00:02:42,310 --> 00:02:46,240
Otherwise well this will throw an error not talking about errors.

40
00:02:46,240 --> 00:02:48,840
This brings us to this push logic here.

41
00:02:48,880 --> 00:02:53,920
This is not valid anymore because we have a different method we can use here found and create the place

42
00:02:53,920 --> 00:02:57,580
constant now with the model logic with our place model.

43
00:02:57,580 --> 00:03:05,890
The logic here is created place dot safe dot safe is a method available in Mongoose and safe will handle

44
00:03:05,980 --> 00:03:13,480
all these Mongo D.B. code you need to store a new document in your database in your collection and additionally

45
00:03:13,630 --> 00:03:16,900
safe will also create that unique places ideas.

46
00:03:17,080 --> 00:03:21,140
I talked about previously safe is also promise.

47
00:03:21,160 --> 00:03:27,370
This means we have an asynchronous task again as we saw with the connect method before saving files

48
00:03:27,370 --> 00:03:29,960
to our database can take a few moments.

49
00:03:30,000 --> 00:03:32,130
Therefore asynchronous task right here.

50
00:03:32,200 --> 00:03:37,300
And as we already have async appear now I will create place constant.

51
00:03:37,300 --> 00:03:42,580
We can now add a weight here and to make sure we catch any errors.

52
00:03:42,580 --> 00:03:50,230
Let's also add try catch to make sure we are covered in case anything goes wrong which hopefully won't

53
00:03:50,230 --> 00:04:03,490
be the case so we will catch our error here and create a new error constant with our new HP error.

54
00:04:03,490 --> 00:04:11,400
We used already and the error message could be something like creating place failed.

55
00:04:11,410 --> 00:04:18,520
Please try again and an error code of 500 here.

56
00:04:18,520 --> 00:04:19,900
With that we're almost done.

57
00:04:19,900 --> 00:04:24,860
There is one thing missing though and this is return next error.

58
00:04:24,880 --> 00:04:30,250
We have to at this year or we should add this year to stop our code execution in case we have an error.

59
00:04:30,250 --> 00:04:33,780
If we don't add return next year the code execution would continue.

60
00:04:33,850 --> 00:04:36,890
Even if we throw an error definite enough we want better.

61
00:04:36,910 --> 00:04:39,350
Therefore important to add this too.

62
00:04:39,370 --> 00:04:40,900
With that we are actually done.

63
00:04:40,900 --> 00:04:50,750
So if we now start our sorrow once again and go to postmen create a new request.

64
00:04:50,780 --> 00:05:02,930
This should be a post request targeting HDP local host 5000 slash API slash places as we want to create

65
00:05:02,930 --> 00:05:03,930
a new place.

66
00:05:04,160 --> 00:05:15,010
Then we go to Body raw and Jason and now we have to add all the properties that would you find in our

67
00:05:15,010 --> 00:05:15,520
model.

68
00:05:16,030 --> 00:05:37,840
So this was first the title which is the Empire State Building may be a description a very famous building

69
00:05:39,380 --> 00:05:41,770
in New York.

70
00:05:41,830 --> 00:05:49,620
We need to address which we can and get via google maps here.

71
00:05:49,670 --> 00:05:51,090
We don't do location.

72
00:05:51,130 --> 00:05:54,640
It's automatically retrieved by our geo coding logic.

73
00:05:54,640 --> 00:05:59,720
Same thing is true for the image we hardcoded that when we instantiate the place.

74
00:05:59,740 --> 00:06:05,590
This means we only need to add our Creator and this could be you to maybe.

75
00:06:05,590 --> 00:06:10,420
So let's see if we now could sent here yeah.

76
00:06:10,460 --> 00:06:11,390
This looks good.

77
00:06:11,390 --> 00:06:13,550
So we create that place apparently.

78
00:06:13,590 --> 00:06:16,520
Here you can see the unique I.D. that was created automatically.

79
00:06:16,520 --> 00:06:18,530
We have an underscore in front of the idea.

80
00:06:18,560 --> 00:06:22,220
We'll tackle that later but generally this looks fine.

81
00:06:22,290 --> 00:06:26,450
Let's also see what happens if we go to our database now here.

82
00:06:26,510 --> 00:06:31,460
If you click onto collections that looks good by the way here we have two places.

83
00:06:31,460 --> 00:06:33,560
The first place is the database name.

84
00:06:33,560 --> 00:06:35,520
The second is the name of the collection.

85
00:06:35,780 --> 00:06:36,410
So places.

86
00:06:36,410 --> 00:06:38,790
Here is what we specified in AB.

87
00:06:38,820 --> 00:06:40,060
Yes.

88
00:06:40,130 --> 00:06:46,430
Right here in you collect connect method places and the collection name is here in place J is right

89
00:06:46,430 --> 00:06:46,920
here.

90
00:06:46,970 --> 00:06:51,970
Our place in the model method without the capital P and a plural.

91
00:06:52,130 --> 00:06:54,830
So that's basically the name of this collection here.

92
00:06:54,830 --> 00:06:59,170
And more importantly inside this collection we can now find one document.

93
00:06:59,210 --> 00:07:01,410
And if you look at the ending of T I d.

94
00:07:01,590 --> 00:07:06,710
It's B6 and that's exactly the document we created right here.

95
00:07:06,900 --> 00:07:09,350
With that we achieved a lot already.

96
00:07:09,410 --> 00:07:15,770
We were able to create the schema to create the model and to create our document in our database.

97
00:07:15,830 --> 00:07:19,670
So C Create from our CRUD operations is completed.

98
00:07:19,670 --> 00:07:23,810
Let us not continue with the R read so we'll have a look at our get requests.

99
00:07:23,810 --> 00:07:24,080
Now.
