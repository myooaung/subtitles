1
00:00:02,140 --> 00:00:06,680
So let's finally get to the point where we can see the real advantage of Express.

2
00:00:06,730 --> 00:00:12,220
Before we do that let's make sure we don't always have to manually quit the server and restart it for

3
00:00:12,220 --> 00:00:13,900
that quick add one last time.

4
00:00:13,900 --> 00:00:22,180
And now let's install a new library with npm install and that is Node 1 installed with dash dash save

5
00:00:22,210 --> 00:00:29,110
dash death because this will be a development only library will not use it in our code but to simplify

6
00:00:29,140 --> 00:00:36,010
our development flow our development process because node one is a tool powered by node chess which

7
00:00:36,010 --> 00:00:43,600
actually will execute JavaScript files with node J.S. but it will not just execute them but also watch

8
00:00:43,600 --> 00:00:50,050
them watch all files in the project folder and whenever any file changes it will restart the server

9
00:00:50,080 --> 00:00:50,890
automatically.

10
00:00:50,890 --> 00:00:57,630
So whenever we save a file with changes in it it will restart the server for that we need to use Node

11
00:00:57,630 --> 00:01:03,290
1 to run our capture has fallen for Dad in turn we can go to package Doug Jason and use a so-called

12
00:01:03,300 --> 00:01:11,010
script scripts are simply Walt's short utility scripts we can execute and here we can add a start script

13
00:01:11,160 --> 00:01:18,150
and the names should be start and then for example execute node app J.S. with that if I run NPM start

14
00:01:18,450 --> 00:01:24,270
I execute this script by the way start is a special name if the script would be named differently for

15
00:01:24,270 --> 00:01:32,130
example def you would have to run NPM run death only for a start and test you can omit the run keyword

16
00:01:32,340 --> 00:01:40,450
and directly run test or in our case start now if we do that then this code here will execute.

17
00:01:40,470 --> 00:01:44,070
So in this case node aptly s which is the same as before.

18
00:01:44,170 --> 00:01:45,970
Now that's not what I want here instead here.

19
00:01:46,000 --> 00:01:52,510
Let's quit that server and use node Mun node monsters package we just installed.

20
00:01:52,510 --> 00:01:55,840
And this is available as an executable inside of this project.

21
00:01:55,840 --> 00:02:01,060
It's not available globally on your machine executing Node 1 there most likely will fail unless you

22
00:02:01,060 --> 00:02:04,680
install it globally before but inside of these scripts.

23
00:02:04,780 --> 00:02:10,480
Any dependency here which is executable script or executable tool will be available.

24
00:02:10,480 --> 00:02:17,620
So now if we save this package does Jason File with that change made if we execute NPM start again this

25
00:02:17,620 --> 00:02:22,780
will use node man we see a more colorful output there and in the end this executes aptly s which is

26
00:02:22,780 --> 00:02:31,990
great but now you will see that if I change something for example year on this response I add user a

27
00:02:31,990 --> 00:02:41,080
colon as extra text and I had say if you see this restarts and hence here we see that change in action

28
00:02:41,380 --> 00:02:46,210
without some manually quitting and restarting the server which of course is great.

29
00:02:46,420 --> 00:02:49,620
So that's a little convenience added leave that process running.

30
00:02:49,660 --> 00:02:55,540
You can always quitted with control C once are done for today and with that let's actually focus on

31
00:02:55,540 --> 00:03:03,940
our logic here because now I want to make sure that I actually am able to parse the incoming requests

32
00:03:03,970 --> 00:03:09,610
in a more comfortable way that we don't have to manually parse it for it is I'll install a new package

33
00:03:09,610 --> 00:03:15,040
and here I will quit the server just to install the new package which will not do all the time and this

34
00:03:15,040 --> 00:03:21,700
package is named body dash parser installed with dash dash save because this will now be a package which

35
00:03:21,700 --> 00:03:27,820
we use actively in our code and thereafter on NPM start again to start node 1 again.

36
00:03:27,820 --> 00:03:34,180
Now this is a package which I import here under a body parser you can name the content however you want

37
00:03:34,870 --> 00:03:42,460
from body parts that are into app J.S. body parser gives us ready to use middleware is which we can

38
00:03:42,460 --> 00:03:50,650
use and express apps to parse incoming request bodies it allows us to get rid of all that killed in

39
00:03:50,650 --> 00:03:58,120
our first middleware and instead of writing our own function here we can write body parser dot J said

40
00:03:59,920 --> 00:04:08,600
or dot you are L encoded dot Jason will become important later this will allow us to automatically pass

41
00:04:08,690 --> 00:04:16,520
all incoming requests for Jason data here I will get a regular form data which the browser generates

42
00:04:16,520 --> 00:04:21,650
for me when I click this happen been button and since here I will use you are L encoded to that you

43
00:04:21,650 --> 00:04:26,450
need to pass an object to configure it and said extend it to false here in this case.

44
00:04:26,650 --> 00:04:32,060
Now this will parse all incoming requests and try to extract any data which is in your body if it's

45
00:04:32,060 --> 00:04:39,400
of type you are L encoded data which will be the case for such a submitted form it will also call next

46
00:04:39,490 --> 00:04:44,960
for us so it will also automatically move on to middle whereas after this.

47
00:04:45,090 --> 00:04:52,350
Now in addition I now want to handle a post request in a specific middleware and for dad instead of

48
00:04:52,350 --> 00:05:00,090
using use which allows us to register a middleware that runs on all incoming requests I will use post

49
00:05:00,360 --> 00:05:06,530
which allows me to register a middleware which only triggers on incoming post requests so where the

50
00:05:06,590 --> 00:05:15,780
age the P word is post then here I want to have my middleware function with request response and next

51
00:05:16,280 --> 00:05:19,380
and in there I want to return this response.

52
00:05:19,380 --> 00:05:23,790
Now I also don't need to return it anymore because there is no code there all author which I would want

53
00:05:23,790 --> 00:05:24,680
to skip.

54
00:05:24,780 --> 00:05:30,750
We can now get rid of that if statement request body will exist by the way because the body parts are

55
00:05:30,750 --> 00:05:35,260
automatically creates and populates such a field on the request object.

56
00:05:35,280 --> 00:05:39,870
However the user name will be available under the name we picked here on the input.

57
00:05:39,960 --> 00:05:41,760
So there I picked user name.

58
00:05:41,760 --> 00:05:49,730
So I have to use user name here as well now that our middleware here also shouldn't trigger on all requests.

59
00:05:49,760 --> 00:05:51,990
But let's say on get requests.

60
00:05:51,990 --> 00:05:54,710
So here I can use get instead of use.

61
00:05:54,720 --> 00:06:02,550
And now we're filtering for requests which use a get method if we now safety's everything will restart

62
00:06:02,640 --> 00:06:10,540
automatically and if I now hit enter on my you are elegant I get an error.

63
00:06:10,570 --> 00:06:17,470
Now I do get this error because get and post actually need at least two arguments.

64
00:06:17,530 --> 00:06:23,950
The first argument is not the middleware function itself but a string which identifies the path.

65
00:06:23,950 --> 00:06:29,020
So the thing in the U are L after our domain which should trigger this middleware.

66
00:06:29,020 --> 00:06:32,970
So we're not just filtering by h to be method but all by path.

67
00:06:32,990 --> 00:06:39,990
And here I want to filter for a slash which means for request targeting slash this function will run.

68
00:06:40,000 --> 00:06:43,290
So for now safety's at enter again.

69
00:06:43,300 --> 00:06:47,700
We see the form if I enter a slash users here we don't see it.

70
00:06:47,710 --> 00:06:54,020
So it is really just slash you can also add such a filter on app use.

71
00:06:54,030 --> 00:06:55,820
But there it's not mandatory.

72
00:06:55,860 --> 00:07:03,570
And although it will work as a starting filter so slash would work for all requests that start with

73
00:07:03,570 --> 00:07:04,130
a slash.

74
00:07:04,140 --> 00:07:05,050
Often the domain.

75
00:07:05,100 --> 00:07:12,010
Which means really all request slash users would handle all requests that start with Slash users often

76
00:07:12,010 --> 00:07:16,710
the domain even if it's slash user slash new here forget it's different.

77
00:07:16,710 --> 00:07:20,390
It has to be exact match and the path is not optional.

78
00:07:20,430 --> 00:07:22,560
It has to be provided instead.

79
00:07:22,590 --> 00:07:23,890
Same for post.

80
00:07:24,060 --> 00:07:31,590
We can all take this as a chance and for example use slash user here as a year L and tweak the forum

81
00:07:31,830 --> 00:07:36,640
to provide the action attribute to tell the browser where to send the request to.

82
00:07:36,780 --> 00:07:45,410
So did it sends it to slash user so the domain slash user we now save does again and I hit enter here.

83
00:07:45,420 --> 00:07:52,470
We get the form if I enter menu you see the you are l changed to slash user and indeed we see the user

84
00:07:52,470 --> 00:07:55,030
being output here and that's really important.

85
00:07:55,080 --> 00:07:58,350
The user name here we didn't have to pass it on our own.

86
00:07:58,350 --> 00:08:03,430
Instead this built in middleware did it for us and that's the power of Express.

87
00:08:03,510 --> 00:08:08,250
We have to use middleware based approach which allows us to create our own middleware which is very

88
00:08:08,250 --> 00:08:14,370
useful to funnel our request through multiple steps and the response as well but we can all the plug

89
00:08:14,370 --> 00:08:21,000
in existing third party library Middleware is to get functionality like this body passing out of the

90
00:08:21,000 --> 00:08:24,180
box without having to write the logic on our own.

91
00:08:24,180 --> 00:08:30,420
Which of course really simplifies things for us and allows us to focus on our core business logic.
