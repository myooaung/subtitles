WEBVTT
1
00:00:02.090 --> 00:00:09.710
Moon of course stands for Mongo to be expressed react and note and we want to have these four technologies

2
00:00:09.770 --> 00:00:10.600
work together.

3
00:00:10.610 --> 00:00:18.140
We want to build a full stack web application where these four technologies are used because they tend

4
00:00:18.140 --> 00:00:20.370
to work together really well.

5
00:00:20.420 --> 00:00:21.830
But how do they work together.

6
00:00:21.830 --> 00:00:23.860
How are they connected.

7
00:00:23.930 --> 00:00:31.910
The are react is responsible for the client side for the browser side for what they use her CS.

8
00:00:31.910 --> 00:00:35.590
So the presentation and the user interface.

9
00:00:35.630 --> 00:00:42.340
This means that we will use react J.S. to build our front end facing web application.

10
00:00:42.380 --> 00:00:45.970
The thing that runs in the browser react.

11
00:00:46.030 --> 00:00:52.910
Yes as you should know is of course based on javascript it's a javascript library and it's javascript

12
00:00:52.940 --> 00:00:55.470
that is executed in the browser.

13
00:00:55.520 --> 00:01:01.820
So react is used to build beautiful and highly reactive user interfaces in the browser.

14
00:01:01.820 --> 00:01:08.510
It's there to render something onto the screen and re render aid whenever something changes up the user

15
00:01:08.510 --> 00:01:15.770
interface and provide a great user experience to our end users put in our words react is responsible

16
00:01:15.770 --> 00:01:23.180
for what the user sees in the end react alone is great and we can build stunning user interfaces with

17
00:01:23.180 --> 00:01:28.630
it but of course if we only work with react we have some limitations.

18
00:01:28.640 --> 00:01:34.200
Most importantly we're not really able to execute any logic on a server.

19
00:01:34.220 --> 00:01:40.850
So in a place where users can't see our code they can see it in the browser anyone can use the browser

20
00:01:40.880 --> 00:01:48.560
dev tools to look into our code and in addition to running code the user can't see or running more performance

21
00:01:48.560 --> 00:01:51.810
intensive tasks which we also don't want to do in the browser.

22
00:01:51.920 --> 00:01:58.700
In addition to that we typically also want to store some data in a persistent storage and the browser

23
00:01:58.700 --> 00:02:01.930
side is not such a persistent storage.

24
00:02:01.940 --> 00:02:04.010
Users can clear the data there.

25
00:02:04.010 --> 00:02:10.250
The browser might clear data on its own if it's running out of space so data there is not persistent.

26
00:02:10.250 --> 00:02:16.880
It's also not shareable across all users of our web applications because if we stored data in the browser

27
00:02:16.940 --> 00:02:19.640
of course it's only readable by that browser.

28
00:02:19.640 --> 00:02:26.180
So in the end by that user and not of average users of our web application for an online shop where

29
00:02:26.180 --> 00:02:31.820
users are able to create products which should be visible to any user that would be bad.

30
00:02:31.880 --> 00:02:36.260
So that's why we need a so-called back end a server side.

31
00:02:36.290 --> 00:02:43.790
This is a web application that runs on a dedicated machine a server somewhere in the Internet reachable

32
00:02:43.790 --> 00:02:52.340
by anyone so opened up to incoming Internet connections and that server is created and run with the

33
00:02:52.340 --> 00:02:56.170
help of node J.S. and a node framework.

34
00:02:56.170 --> 00:03:05.900
EXPRESS J.S. these two pieces are used to write JavaScript code that runs on a server detached from

35
00:03:05.990 --> 00:03:08.340
our client from our browser.

36
00:03:08.450 --> 00:03:14.840
They are we can run any business logic which we might want to hide from our users or which is more performance

37
00:03:14.840 --> 00:03:19.020
intensive since we run it on a dedicated machine a dedicated server.

38
00:03:19.040 --> 00:03:22.730
We don't rely on the machine of our users which is great.

39
00:03:22.730 --> 00:03:27.680
We also can use node and express for files storage and we will in this course.

40
00:03:28.100 --> 00:03:32.870
And therefore this is an important part of a real web application.

41
00:03:32.910 --> 00:03:40.820
Now does server side and the client side so the browser communicate with requests and responses H to

42
00:03:40.820 --> 00:03:49.100
the p requests and responses specifically so-called Ajax or as I like to call them behind the scenes

43
00:03:49.190 --> 00:03:56.390
requests and responses requests and response is triggered from client side JavaScript so that they are

44
00:03:56.390 --> 00:04:02.800
sent to the server and the response is handled in the client without reloading the page on the client.

45
00:04:03.020 --> 00:04:09.020
That is achieved by exchanging data which is not a h to mail page which would be rendered by the browser

46
00:04:09.020 --> 00:04:15.170
and which would therefore lead to a page refresh but instead which is a so-called Jason format.

47
00:04:15.170 --> 00:04:20.570
There also are other formats you could use and we'll have a look at one hour format in this course.

48
00:04:20.570 --> 00:04:24.960
But Jason is by far the most common form for exchanging data.

49
00:04:24.980 --> 00:04:31.790
Jason stands for JavaScript object notation and it's a machine readable and all quite human readable

50
00:04:31.910 --> 00:04:40.640
data format which in and is used to exchange text data numeric data and structured data in any form.

51
00:04:40.640 --> 00:04:47.900
This date as attached to both requests sent from the client to the server and responses received by

52
00:04:47.900 --> 00:04:55.550
the client incoming from the server to then re render something on the client side so using react re

53
00:04:55.550 --> 00:05:00.370
render parts of the UI or to do something on the server side if the data's received there.

54
00:05:00.380 --> 00:05:03.790
For example stored in a database.

55
00:05:03.800 --> 00:05:09.550
Now speaking of death the database Mongo D.B. is missing in this picture.

56
00:05:09.560 --> 00:05:11.450
Now that's our third building block.

57
00:05:11.450 --> 00:05:19.180
If you want to call it like this we also have an extra database server which runs our Mongo D.B. engine.

58
00:05:19.250 --> 00:05:21.050
And that's really important to understand.

59
00:05:21.080 --> 00:05:27.740
In the end of this picture there are free big blocks working together to servers one running our node

60
00:05:27.740 --> 00:05:33.620
express app and one running database engine and declined side that's all involved of course.

61
00:05:33.620 --> 00:05:40.760
Now that database server can run on the same machine as our node express server or on a totally different

62
00:05:40.760 --> 00:05:42.890
machine that doesn't really matter.

63
00:05:42.890 --> 00:05:49.280
The database server in long would he be is then used for the persistent data storage not file storage.

64
00:05:49.280 --> 00:05:55.220
You should always store files on a file system not in a database but any other data like the name of

65
00:05:55.220 --> 00:06:01.370
a product the price of a product the users of our web application things like that would be stored in

66
00:06:01.370 --> 00:06:03.900
a database like Mongo TB.

67
00:06:03.910 --> 00:06:10.580
Now the important question when we have a look at this incomplete picture here is who's talking to the

68
00:06:10.580 --> 00:06:12.350
database server.

69
00:06:12.350 --> 00:06:21.350
And that is our note express application that application sense database queries using the Mongo D.B.

70
00:06:21.590 --> 00:06:27.020
SDK or among would be library to be precise to that database server.

71
00:06:27.020 --> 00:06:32.540
We don't send requests from the client side directly to the database.

72
00:06:32.540 --> 00:06:33.420
Why.

73
00:06:33.470 --> 00:06:39.860
Because to send these queries we need to include our database credentials so the user name and password

74
00:06:39.890 --> 00:06:43.170
to log into our database so to say.

75
00:06:43.520 --> 00:06:48.970
As I mentioned earlier all the code dad runs on the client side.

76
00:06:48.970 --> 00:06:52.160
So in the browser is readable by all your users.

77
00:06:52.160 --> 00:06:54.140
There is no way of disabling this.

78
00:06:54.140 --> 00:06:55.990
This is how the web works.

79
00:06:56.060 --> 00:07:03.470
So if Dad code would include the credentials for your database your users could hack your database they

80
00:07:03.470 --> 00:07:06.020
could gain access to it.

81
00:07:06.050 --> 00:07:12.550
So we do this on the server side where the code is not readable by our users and from the client side.

82
00:07:12.560 --> 00:07:18.140
We just send requests or responses to the server and on the server we decide which requests who want

83
00:07:18.140 --> 00:07:20.840
to handle and which responses we want to send back.

84
00:07:20.840 --> 00:07:26.480
So we have full control on the server side and the client is only able to communicate with the server

85
00:07:26.750 --> 00:07:30.070
within the request response patterns we allow.

86
00:07:30.260 --> 00:07:34.490
And that is of course where we will build in detail throughout this course.

87
00:07:34.490 --> 00:07:38.120
This is the big picture for the merged architecture.

88
00:07:38.120 --> 00:07:43.330
This is how all the pieces work together and which pieces are involved in the first place.

89
00:07:43.460 --> 00:07:50.390
And this architecture allows us to build amazing web applications highly scalable and very fast Web

90
00:07:50.390 --> 00:07:57.950
applications with a beautiful and highly reactive user interface powered by react attached to them.

91
00:07:57.950 --> 00:08:02.450
Now with that let's take a closer look at some of these building blocks.
