1
00:00:02,250 --> 00:00:03,420
So how did it go.

2
00:00:03,420 --> 00:00:04,800
Very successful.

3
00:00:04,800 --> 00:00:06,540
Let me show you my approach now.

4
00:00:06,560 --> 00:00:13,260
For that we have to go down to our get places by user I.D. constant again user I.D. is fine right here

5
00:00:13,380 --> 00:00:14,850
but our dummy places.

6
00:00:14,850 --> 00:00:18,880
This is what we have to work on and we'll always have a look at these if code.

7
00:00:18,930 --> 00:00:20,200
Let's see if we change this too.

8
00:00:20,280 --> 00:00:22,710
But this is actually what we should focus on now.

9
00:00:23,430 --> 00:00:30,200
So therefore let's get rid of this code here and now we can again refer to our place model here.

10
00:00:30,330 --> 00:00:36,570
And this time we will not use the find by a DMA offered up here as I said but they use a different method

11
00:00:36,840 --> 00:00:42,920
to find method find generally works similar as fine by a D.

12
00:00:42,930 --> 00:00:49,520
This means we again do not return a promise here but you can again use EXEC If you want to.

13
00:00:49,530 --> 00:00:54,680
But again find still allows us to use async await here or then catch again.

14
00:00:54,690 --> 00:00:58,200
This is a mongoose specific feature available right here.

15
00:00:58,200 --> 00:01:04,710
It's not of a promise but you can use this asynchronous operations here find has some other important

16
00:01:04,710 --> 00:01:11,210
things to keep in mind though generally using find like this would return all places.

17
00:01:11,250 --> 00:01:17,670
This means if we want to have a specific place in our place a specific place by the user I.D. We have

18
00:01:17,670 --> 00:01:20,190
to add the user idea here as an argument.

19
00:01:20,190 --> 00:01:26,400
So in our case we can use to create their property and refer to user I.D. as we define it right here

20
00:01:26,640 --> 00:01:28,500
in our constant.

21
00:01:28,600 --> 00:01:30,690
And that's one thing you have to keep in mind.

22
00:01:30,720 --> 00:01:36,150
Another thing is that find is available in both Mongo TB and Mongoose which we are using right here

23
00:01:36,720 --> 00:01:37,310
in Mongolia.

24
00:01:37,330 --> 00:01:45,390
B Find returns a so-called cursor a cursor are simply points towards the results of our final effort

25
00:01:45,390 --> 00:01:46,760
here of the query with it.

26
00:01:46,980 --> 00:01:50,550
And it then allows you to iterate through the different results you would have.

27
00:01:50,550 --> 00:01:54,780
The reason for that is that if you would imagine you would have hundreds of place in years so hundreds

28
00:01:54,780 --> 00:01:55,700
of documents.

29
00:01:55,770 --> 00:02:00,860
It was a way to block your data immediately and to return big amounts of data.

30
00:02:00,930 --> 00:02:03,450
So that's the way how monger TB approaches this.

31
00:02:03,450 --> 00:02:09,590
So you get back a cursor and then can iterate through the different results in Mongoose find doesn't

32
00:02:09,600 --> 00:02:12,580
provide a cursor but directly an area.

33
00:02:12,630 --> 00:02:18,550
We could also get a cursor in Mongoose by the way to do so we could use decode as a property on our

34
00:02:18,560 --> 00:02:23,180
find method instead of only using just find that's what you have to keep in mind here.

35
00:02:23,180 --> 00:02:25,270
So using the Mongoose find method.

36
00:02:25,320 --> 00:02:30,210
We are now adding to create the property and therefore we can filter for the specific document where

37
00:02:30,240 --> 00:02:31,920
the creator has the user I.D..

38
00:02:31,920 --> 00:02:34,610
We are looking for in our Get request.

39
00:02:34,710 --> 00:02:43,380
This means we can again add our try catch cold block here put the content into it.

40
00:02:43,380 --> 00:02:47,020
With that our content is not available anymore due to block scoping.

41
00:02:47,040 --> 00:02:54,150
Therefore we can create let places outside of our tribe log and get rid of the constant and also make

42
00:02:54,150 --> 00:02:56,600
sure that this again becomes an asynchronous task.

43
00:02:56,610 --> 00:03:03,850
Again we have a fine operation therefore will add async appear and await

44
00:03:06,550 --> 00:03:08,590
front of our place model.

45
00:03:09,430 --> 00:03:14,460
And we also catch our error again with the same logic we had before.

46
00:03:14,470 --> 00:03:25,690
Let's again use the constant which should be a new HDP error your and let's say that this should return

47
00:03:25,700 --> 00:03:29,930
fetching places failed.

48
00:03:30,020 --> 00:03:34,720
Please try again later.

49
00:03:35,210 --> 00:03:36,760
And again that's the logic we have.

50
00:03:37,190 --> 00:03:38,740
Indy 500 error case.

51
00:03:38,750 --> 00:03:45,830
So in case anything goes wrong with the request in general and here we also have to add return next

52
00:03:45,830 --> 00:03:47,360
again.

53
00:03:47,360 --> 00:03:50,860
With that this should work fine down here.

54
00:03:50,870 --> 00:03:52,820
This code could also be re factored.

55
00:03:52,880 --> 00:03:57,500
So in this way that is stored in a constant.

56
00:03:57,500 --> 00:04:01,240
But to show you both ways again let's this time keep it this way.

57
00:04:01,250 --> 00:04:05,830
As I said you can adjust this to be in line with the rest of the code but just for demonstration purposes.

58
00:04:05,840 --> 00:04:08,950
As part of this course I will just keep this the way it is.

59
00:04:09,080 --> 00:04:13,110
But done here our response has to be adjusted once again.

60
00:04:13,160 --> 00:04:15,400
There is a little thing that you have to keep in mind.

61
00:04:15,410 --> 00:04:16,730
This was a bit more tricky.

62
00:04:16,820 --> 00:04:23,150
I must say but maybe you did it in case your problems we'll solve it together now because again we have

63
00:04:23,150 --> 00:04:25,050
to add a method to our places here.

64
00:04:25,130 --> 00:04:32,300
But this time we cannot use our to object method appear because the problem is that as I said find returns

65
00:04:32,300 --> 00:04:36,250
an error right here and we cannot use to object with an array.

66
00:04:36,350 --> 00:04:42,020
Therefore we have to use map here a standard javascript method and with map now being in place we can

67
00:04:42,020 --> 00:04:49,580
again use place to object right here and then apply our getters feature to make sure that the underscore

68
00:04:49,820 --> 00:04:57,200
from our added property is removed so gathers is again set to true and with that if we now go back to

69
00:04:57,200 --> 00:05:07,630
postmen and trade and you get requests here again to HDP local post five thousand but this time we have

70
00:05:07,630 --> 00:05:09,240
to go to our users rights.

71
00:05:09,280 --> 00:05:16,810
So we go to API slash places slash user slash and now YouTube.

72
00:05:16,810 --> 00:05:23,710
So the idea of our user right here at this present.

73
00:05:23,940 --> 00:05:24,340
Yeah.

74
00:05:24,430 --> 00:05:25,220
This looks fine.

75
00:05:25,240 --> 00:05:26,860
We get back our response.

76
00:05:26,860 --> 00:05:29,260
We again get the idea without the underscore.

77
00:05:29,410 --> 00:05:31,690
So getters also works fine.

78
00:05:31,810 --> 00:05:36,700
And again if I would no use let's say you free ride here click send.

79
00:05:36,700 --> 00:05:39,460
You see we couldn't find places for the provided user I.D..

80
00:05:39,970 --> 00:05:44,070
So this is this arrow right here which is also working fine.

81
00:05:44,290 --> 00:05:49,210
And with that we finished our so read in our crud feature chain right here.

82
00:05:49,240 --> 00:05:51,430
Let's now continue with updating places.
