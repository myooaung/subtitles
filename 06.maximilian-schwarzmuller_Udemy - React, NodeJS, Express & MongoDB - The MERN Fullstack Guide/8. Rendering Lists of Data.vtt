WEBVTT
1
00:00:02.070 --> 00:00:08.280
How can we output an array of data as J as X elements.

2
00:00:08.280 --> 00:00:10.740
Well actually it's relatively trivial.

3
00:00:10.740 --> 00:00:19.020
We will map this array of JavaScript objects to an array of J.S. X elements because react is capable

4
00:00:19.350 --> 00:00:22.770
of outputting an array of JavaScript elements for that.

5
00:00:22.770 --> 00:00:23.760
Let me show you how this works.

6
00:00:23.760 --> 00:00:29.240
Let's use these single curly braces because I want to add a javascript expression here in my expression.

7
00:00:29.240 --> 00:00:33.310
Here is a simple array but an array of list items.

8
00:00:33.310 --> 00:00:36.530
Hi and that then another one.

9
00:00:36.950 --> 00:00:38.720
This works.

10
00:00:38.720 --> 00:00:42.950
I output this in my JSA X code with the single curly braces.

11
00:00:42.960 --> 00:00:49.780
Because this year of course is not J is X it's an array but it's an array full of J is X and if I saved

12
00:00:49.780 --> 00:00:56.180
is it outputs hi and this works we get an error or a warning which you can ignore for now but this works

13
00:00:56.180 --> 00:01:04.040
in general now since this works with hard coded data we can also output our array of goals so we can

14
00:01:04.070 --> 00:01:05.840
output props goals here.

15
00:01:05.840 --> 00:01:12.700
But the problem is that props goals is in the end an array of JavaScript objects not an array of J ASICs

16
00:01:12.770 --> 00:01:13.840
code.

17
00:01:13.850 --> 00:01:17.540
So we try to output this year it will fail.

18
00:01:17.540 --> 00:01:22.710
It tells you that objects are not valid as react child whereas we are children.

19
00:01:22.760 --> 00:01:28.620
So in the end we can't output plain vanilla javascript objects in J is x.

20
00:01:28.730 --> 00:01:37.530
Instead we need to map every object into a J as X equivalent so into a renderer able element.

21
00:01:37.550 --> 00:01:41.940
So here we want to map every object into a list item in the end.

22
00:01:42.050 --> 00:01:46.510
So on props goals which is an array we can call the map method.

23
00:01:46.550 --> 00:01:50.720
That's a default vanilla javascript method that exists on any array.

24
00:01:50.810 --> 00:01:53.860
The map method takes a function.

25
00:01:54.110 --> 00:02:01.520
Here I'll pass an arrow function which is executed on every element of the array you call map on and

26
00:02:01.520 --> 00:02:08.210
then this function here will return transform the wording of that element in the original array and

27
00:02:08.240 --> 00:02:15.140
overall map will then return a new array full of these transformed data pieces so dysfunctional therefore

28
00:02:15.160 --> 00:02:17.880
receive the existing element here.

29
00:02:17.900 --> 00:02:23.150
So every goal in our golden array and then returns a new element.

30
00:02:23.150 --> 00:02:28.090
So in this new Array returned by map I want to have a bunch of J as X elements.

31
00:02:28.100 --> 00:02:37.340
So here it will just return a list item which is J is X of course and in that list item I want to output

32
00:02:37.340 --> 00:02:38.440
my gold text.

33
00:02:38.450 --> 00:02:44.270
Now goal here is that JavaScript object we have in your original array because this function runs on

34
00:02:44.270 --> 00:02:49.150
every element in the original array and gives you the object in the original rate or the data piece

35
00:02:49.160 --> 00:02:51.590
in the original array as an argument.

36
00:02:51.590 --> 00:02:57.920
So goal here is that object which looks like this year so I'm only interested in the text here.

37
00:02:57.920 --> 00:03:02.320
And again we can output the text by outputting a javascript expression here.

38
00:03:02.330 --> 00:03:09.820
Hence we need to curly braces in our J as X code here and we have Gold Dot text here my expression is

39
00:03:09.820 --> 00:03:13.540
that I access the text property on the Gold object.

40
00:03:13.540 --> 00:03:21.250
So now what happens here is I map my array of plain JavaScript objects to an array of J JS X elements

41
00:03:21.490 --> 00:03:27.720
and such an array of J.S. X elements is renderer able as you learned.

42
00:03:27.800 --> 00:03:33.770
Now if I saved us you see this out what's my core skills again.

43
00:03:33.810 --> 00:03:40.240
Now we also get a warning regarding a unique key that is related to how react re renders the Dom and

44
00:03:40.290 --> 00:03:42.430
that it wants to do this efficiently.

45
00:03:42.450 --> 00:03:47.310
You learn more about that in my react the complete guide course and therefore when ever you output lists

46
00:03:47.310 --> 00:03:54.620
of data with this technique you have to add a special prop to every item you are rendering in that list

47
00:03:54.630 --> 00:03:56.220
in this case to every list item.

48
00:03:56.400 --> 00:04:00.660
And that's the key prop that is a proper react itself understands.

49
00:04:00.690 --> 00:04:03.220
And here I want to output goal I.D. again.

50
00:04:03.270 --> 00:04:08.250
Wrapped in curly braces because this is a regular javascript expression.

51
00:04:08.350 --> 00:04:12.110
So now with Dad we don't get the warning and we get our course goals.

52
00:04:12.130 --> 00:04:16.990
So this is how we output a list of data with that.

53
00:04:17.000 --> 00:04:18.680
This is looking pretty good.

54
00:04:18.680 --> 00:04:20.180
We're out putting our list of data.

55
00:04:20.300 --> 00:04:26.300
Why don't we now work on adding some functionality that allows us to add our own goals.

56
00:04:26.300 --> 00:04:27.920
That would be a nice next step.
