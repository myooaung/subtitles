WEBVTT
1
00:00:02.190 --> 00:00:08.010
So user input validation is an important topic for example at the moment.

2
00:00:08.010 --> 00:00:16.470
I can create a new place and simply leave out the title share an empty field and if I sent this it creates

3
00:00:16.470 --> 00:00:19.460
a new place with an empty title I certainly don't want that.

4
00:00:19.470 --> 00:00:27.870
I want to validate the data I get on the incoming request and actually sent back an error if it doesn't

5
00:00:27.870 --> 00:00:31.440
match my expectations to implement validation.

6
00:00:31.440 --> 00:00:38.970
I'll use a third party library express validator I'll use that because manually validating it here with

7
00:00:38.970 --> 00:00:44.400
if checks where it check if title once we trim it to remove X whitespace.

8
00:00:44.550 --> 00:00:48.240
If the length is empty in which case I sent back an error.

9
00:00:48.240 --> 00:00:51.060
Doing all that is possible but very cumbersome.

10
00:00:51.060 --> 00:00:55.660
I don't want to write dozens of checks to check different conditions.

11
00:00:55.740 --> 00:00:58.050
Instead this library will make it easier.

12
00:00:58.050 --> 00:00:59.220
It's built for express.

13
00:00:59.220 --> 00:01:06.170
It gives us middleware so that we can register to run various validations on the incoming data.

14
00:01:06.220 --> 00:01:12.520
You can learn all about this package on this page here on their official documentation but of course

15
00:01:12.520 --> 00:01:12.850
here.

16
00:01:12.880 --> 00:01:18.390
I will also show you some of the most important features now most importantly we need to install it.

17
00:01:18.520 --> 00:01:26.110
So let's stop that running server and run npm install dash to ash save because it is a dependency we

18
00:01:26.110 --> 00:01:27.350
need in our code.

19
00:01:27.590 --> 00:01:34.240
EXPRESS dash validator and hit enter and this will now installed this third party package into your

20
00:01:34.240 --> 00:01:38.030
project and thereafter you can restart NPM start.

21
00:01:38.050 --> 00:01:44.580
Now we can add validation and the first step forward it is actually in your roots file here in places

22
00:01:44.590 --> 00:01:46.240
roots there.

23
00:01:46.270 --> 00:01:51.820
I have two routes where I want to validate the input and that are my post and my patched rows.

24
00:01:51.850 --> 00:01:57.700
I don't need to validate these parameters here because if an invalid ideas passed here I'm simply not

25
00:01:57.700 --> 00:02:04.230
able to identify data and we're already sending back an error response in that case already.

26
00:02:04.360 --> 00:02:08.400
So I only need to care about post and patch here there.

27
00:02:08.410 --> 00:02:13.720
I want to make sure that the data which isn't a request body and that is what it's really all about

28
00:02:13.720 --> 00:02:16.930
and want to validate my request body data.

29
00:02:16.930 --> 00:02:20.620
If debt is valid so how does this package work.

30
00:02:20.620 --> 00:02:23.230
Well first of all we need to import it.

31
00:02:23.650 --> 00:02:28.870
We import it but we only imported it a bit differently with object restructuring.

32
00:02:29.050 --> 00:02:37.030
I require express validator here and I could simply imported all into one object validator for example

33
00:02:37.030 --> 00:02:38.200
Deadwood work.

34
00:02:38.350 --> 00:02:42.000
But here I actually only need one specific method.

35
00:02:42.460 --> 00:02:48.130
So I will use object restructuring and import that check method by the way.

36
00:02:48.130 --> 00:02:53.800
We could have done something similar here for Express router I could have implemented just Roger like

37
00:02:53.800 --> 00:02:56.080
this and called it like that down there.

38
00:02:56.080 --> 00:02:57.570
Dad would also work.

39
00:02:57.590 --> 00:02:59.300
That's basically what I'm doing here.

40
00:02:59.320 --> 00:03:02.620
I'm mixing these syntax is all that you showed in both.

41
00:03:02.650 --> 00:03:07.760
This is regular javascript syntax and yet so we need to check method here.

42
00:03:07.840 --> 00:03:15.130
Now the check method actually is a method or a function we can execute and it will return a new middleware

43
00:03:15.250 --> 00:03:19.130
configured for our validation requirements.

44
00:03:19.150 --> 00:03:22.450
Now we need it here for example on this post request.

45
00:03:22.450 --> 00:03:29.560
Now one thing I haven't taught you thus far is that when you register a middleware like this you actually

46
00:03:29.560 --> 00:03:31.680
always have to is filter.

47
00:03:31.690 --> 00:03:39.190
This path here as the first argument but there after you're not limited to one middleware you can register

48
00:03:39.280 --> 00:03:46.180
multiple Middleware is on the same H to the p method path combination and they will simply be executed

49
00:03:46.180 --> 00:03:49.600
from left to right here in your arguments.

50
00:03:49.600 --> 00:03:56.740
So here I want to add a new middleware a new parameter and you argument I pass to this method call which

51
00:03:56.740 --> 00:03:59.050
will be this check function.

52
00:03:59.050 --> 00:04:00.430
Now here we execute it.

53
00:04:00.430 --> 00:04:01.750
We don't just point edit.

54
00:04:01.750 --> 00:04:09.970
Instead we executed and check then takes the name off the field in your request body which you want

55
00:04:09.970 --> 00:04:10.720
to validate.

56
00:04:11.020 --> 00:04:14.500
So in my case for example the title field.

57
00:04:14.820 --> 00:04:19.320
Now it will return a new middleware function which is then registered here and which is then executed

58
00:04:19.320 --> 00:04:20.450
by express.

59
00:04:20.580 --> 00:04:24.060
But this middleware function now needs to be configured.

60
00:04:24.060 --> 00:04:29.790
You could say right now I'm saying I want to check the title but I'm not saying how I want to check

61
00:04:29.790 --> 00:04:30.540
it.

62
00:04:30.600 --> 00:04:33.090
Well I want to ensure that it's not empty.

63
00:04:33.090 --> 00:04:35.400
That is my requirement here.

64
00:04:35.400 --> 00:04:43.410
For Dad we can change various methods on the result of this check method for example the is empty method

65
00:04:44.470 --> 00:04:52.870
this overall returns a middleware which is given to express so to say which checks for title to be empty.

66
00:04:52.870 --> 00:04:54.380
Now I went to the opposite.

67
00:04:54.400 --> 00:05:01.000
I want dead it's not empty and conveniently there is a not method you can chain in between and this

68
00:05:01.090 --> 00:05:03.360
reads like plain English and yet right.

69
00:05:03.460 --> 00:05:10.960
We check that the title is not empty and that overall gives us a new middleware which is added for post

70
00:05:10.960 --> 00:05:15.910
requests that target slash API slash places slash nothing.

71
00:05:16.090 --> 00:05:22.520
And it will run before our controller runs now it's not the only check I want to perform so I will add

72
00:05:22.520 --> 00:05:28.130
more middleware and instead of adding multiple arguments we can also group that together into an array.

73
00:05:28.130 --> 00:05:34.030
We could add multiple arguments but I want to make it clear that all these millionaires belong together.

74
00:05:34.040 --> 00:05:40.720
So to say they're all related to validation and then want to check the description here as well.

75
00:05:40.760 --> 00:05:47.700
I want to check that description is of a specific length.

76
00:05:47.760 --> 00:05:53.580
Now this takes the argument where I configured this with an object that past to is length and then we

77
00:05:53.580 --> 00:06:00.840
can set a max length and interesting for me here a min length of five characters does automatically

78
00:06:00.840 --> 00:06:04.410
means that it must not be empty but not being empty is not enough.

79
00:06:04.410 --> 00:06:07.860
It also needs to have at least five characters.

80
00:06:07.890 --> 00:06:15.440
I also want to check the address and for the address I want to check that it's not empty because I'm

81
00:06:15.450 --> 00:06:18.060
not sure maybe we do have a valid address.

82
00:06:18.060 --> 00:06:22.420
That's only one character long so it should just not be empty.

83
00:06:22.420 --> 00:06:30.450
Now I will not validate the coordinates because later we will not get them from the client anyways instead

84
00:06:30.540 --> 00:06:39.000
later I will add a function here on the server where I reach out to a Google API and translate the address

85
00:06:39.000 --> 00:06:44.820
which I get to coordinates and if Dad fails I throw an error here on the server we'll do it as a little

86
00:06:44.820 --> 00:06:45.330
bit later.

87
00:06:45.420 --> 00:06:49.460
So for the moment let's just focus on this validation here.

88
00:06:49.540 --> 00:06:53.110
Now that's the validation for creating a new place.

89
00:06:53.230 --> 00:07:01.750
If we now safe that we can give it a try let's try create a new place where the title is empty it still

90
00:07:01.750 --> 00:07:02.740
works.

91
00:07:02.740 --> 00:07:04.770
So what did we do wrong.

92
00:07:04.780 --> 00:07:12.250
Well actually express validator consists of two parts you registered as middleware but this alone does

93
00:07:12.250 --> 00:07:14.350
not return an error.

94
00:07:14.350 --> 00:07:21.940
Instead now you have to go to your controller so to the middleware function which is executed upon your

95
00:07:22.270 --> 00:07:26.830
incoming request and then there you need to add something as well.

96
00:07:27.340 --> 00:07:31.980
You need to import something from that express validator package.

97
00:07:32.010 --> 00:07:37.850
And again I will use object D structuring to import just what I need here.

98
00:07:37.960 --> 00:07:42.900
We need the validation result function.

99
00:07:43.300 --> 00:07:49.870
Then in the middleware functions which are triggered upon your routes that have validation added to

100
00:07:49.870 --> 00:07:56.860
them right at the beginning you can call validation result as a function and pass the request object

101
00:07:56.860 --> 00:07:57.770
to it.

102
00:07:57.790 --> 00:08:03.820
And now what this function will do is it will look into this request object and see if there are any

103
00:08:03.820 --> 00:08:13.900
validation errors which were detected based on your setup here so this will return you an errors object

104
00:08:13.930 --> 00:08:21.520
so to say now this object has a method is empty which you can call.

105
00:08:21.520 --> 00:08:28.510
And if this is not true we know it's not empty which means we do have errors and in this case we can

106
00:08:28.510 --> 00:08:37.570
throw a new H to the p error where we say invalid inputs past.

107
00:08:37.800 --> 00:08:44.570
Please check your data and add a status code of 422.

108
00:08:44.640 --> 00:08:48.150
Now actually these errors.

109
00:08:48.150 --> 00:08:54.120
Object has a bit more data which is while logged here and you could all attached this to our response

110
00:08:54.120 --> 00:09:02.480
you could send the response here with a status code all 422 and for example not just add your message

111
00:09:02.510 --> 00:09:04.450
but also more details about the errors.

112
00:09:04.460 --> 00:09:05.890
If you wanted to hear.

113
00:09:05.900 --> 00:09:10.840
I'll go with the default error handling and just sentence generic response message here.

114
00:09:11.660 --> 00:09:16.960
So with that if we now safeties and we try creating this again now it fails.

115
00:09:17.000 --> 00:09:26.430
We get this error and the 422 error code and indeed here now in the console we see some output we see

116
00:09:26.490 --> 00:09:32.040
we have these errors object and then there we have detailed information about the errors we see that

117
00:09:32.040 --> 00:09:35.580
for the title field we had a invalid value.

118
00:09:35.580 --> 00:09:41.790
Now you can configure does in more detail if you wanted to add to official docs of express validator

119
00:09:42.050 --> 00:09:46.430
are the place to go to learn how to add your own error message as ends on.

120
00:09:46.850 --> 00:09:48.520
So that's something you can do.

121
00:09:48.540 --> 00:09:53.970
I'm happy with this basic validation we have here but of course I also want to add it to this patch

122
00:09:53.970 --> 00:10:00.300
request and that is a great challenge for you not just for the patch request but also for the user routes

123
00:10:00.420 --> 00:10:07.260
and there think about which routes really need validation and then come up with some validation rules

124
00:10:07.260 --> 00:10:08.750
that make sense to you.

125
00:10:08.880 --> 00:10:14.640
Also have a look at the official documentation here to find out how you can validate in the next lecture

126
00:10:14.790 --> 00:10:17.310
will implement all these validation steps together.
