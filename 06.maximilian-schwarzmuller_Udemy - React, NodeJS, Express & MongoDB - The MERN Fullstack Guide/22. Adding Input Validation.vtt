WEBVTT
1
00:00:02.420 --> 00:00:08.960
Now to add real validation let's add a new shared element in the shared folder.

2
00:00:08.960 --> 00:00:15.750
I'll add a utility folder and in their paste in the valley data stored J is follow you find attached.

3
00:00:15.750 --> 00:00:19.160
Now it does is simply a file with some validation logic.

4
00:00:19.160 --> 00:00:21.840
Now it's just one possible way of implementing this.

5
00:00:21.860 --> 00:00:23.600
It is the way I opted for.

6
00:00:23.600 --> 00:00:25.700
So what do we have in there.

7
00:00:25.700 --> 00:00:31.550
First we have some identifiers some identifiers of different validator types for example to validate

8
00:00:31.550 --> 00:00:34.850
for required input so that it's not empty.

9
00:00:34.850 --> 00:00:40.040
A minimum length input a min or max value if we're talking about Numeric Input.

10
00:00:40.130 --> 00:00:46.310
If it's an email address and if it's a file which will become important later in the course then I export

11
00:00:46.340 --> 00:00:48.290
a couple of functions here.

12
00:00:48.290 --> 00:00:53.870
All written in all caps which is not a must do but which I do here to make clear that they are kind

13
00:00:53.870 --> 00:00:56.960
of the find globally in one place.

14
00:00:56.960 --> 00:01:04.940
And yeah every function here is a really straightforward function that might or might not take an input

15
00:01:05.540 --> 00:01:12.050
value and not the value the user entered but a value to configure dad validator and then it returns

16
00:01:12.050 --> 00:01:19.370
basically a validator description an object with a type and then one of the identifiers above these

17
00:01:19.400 --> 00:01:24.230
functions that do take input R D validators that require extra configuration.

18
00:01:24.230 --> 00:01:30.050
For example the min length validator needs to know which Min length a string should have and that's

19
00:01:30.050 --> 00:01:32.300
then stored in this Val property.

20
00:01:32.300 --> 00:01:36.320
So in the end these functions return validator configuration objects.

21
00:01:36.320 --> 00:01:39.980
You could say where every object at least has a type.

22
00:01:39.980 --> 00:01:46.460
And maybe also has a Val and then I have a validate function as well which I export at the bottom.

23
00:01:46.460 --> 00:01:48.490
And this function takes a value.

24
00:01:48.530 --> 00:01:54.740
That's the concrete value the user entered into an input and then an array of validators and it then

25
00:01:54.740 --> 00:02:00.890
goes through that array of validators and checks for the different types we are aware of and runs different

26
00:02:00.890 --> 00:02:05.020
validation logic based on the type of validator we got.

27
00:02:05.030 --> 00:02:10.880
This is what happens here and I've got some predefined relatively simple validation logic here because

28
00:02:10.880 --> 00:02:15.350
I want to focus on the react part and not too much on this validation logic part here.

29
00:02:15.350 --> 00:02:19.720
Of course you can find you and tweak this to your likings.

30
00:02:19.770 --> 00:02:22.670
Now what do we do with the validators Jane's file.

31
00:02:22.680 --> 00:02:28.940
Well we can go to our input component again and there we want to add some validation logic right.

32
00:02:29.010 --> 00:02:39.280
So let's start by importing the validate function from you till folder here and then the validators

33
00:02:39.280 --> 00:02:44.070
file not all the other exported things just to validate function.

34
00:02:44.080 --> 00:02:49.900
And here in the input reducer we can then call validate and now pass an action that Val.

35
00:02:50.050 --> 00:02:58.330
So the user input in our input field and action DOD validators that's an extra key we're not passing

36
00:02:58.330 --> 00:03:00.850
yet which we also should provide.

37
00:03:00.850 --> 00:03:08.420
So action validators now whereas action validators coming from well on the change handler where we dispatch

38
00:03:08.420 --> 00:03:13.290
to change event here I want to add this validator is key.

39
00:03:13.420 --> 00:03:15.250
And that should be coming from props.

40
00:03:15.250 --> 00:03:22.450
There should be a validators props passed to the input component and indeed if we have a look at new

41
00:03:22.450 --> 00:03:26.570
place which is where we use the input component I have validators here.

42
00:03:26.590 --> 00:03:28.400
It's just an empty array at the moment.

43
00:03:28.510 --> 00:03:35.680
But now with the extra utility file we can change this for Dad let's simply import something from

44
00:03:38.660 --> 00:03:46.220
shared you till validators and do something I want to import here is the validator require function

45
00:03:46.640 --> 00:03:53.240
here in the validators array we now just execute it and this return such a validated configuration object

46
00:03:53.270 --> 00:03:53.780
as you learn.

47
00:03:54.140 --> 00:03:55.680
So what's the idea here now.

48
00:03:55.850 --> 00:04:01.070
With that we're passing all the information to the input element that it needs to know that for this

49
00:04:01.070 --> 00:04:07.940
input we want to make sure the value the user enters is not empty because that is what a check for indie

50
00:04:07.940 --> 00:04:11.650
validators J is file if you validate or type is required.

51
00:04:11.780 --> 00:04:17.420
I check that the input is not empty and we will have that validate or type because that validated required

52
00:04:17.540 --> 00:04:19.970
function we're executing in New place.

53
00:04:20.090 --> 00:04:25.990
Returns an object where the type is set to validate or type require and I'm looking for that validate

54
00:04:25.990 --> 00:04:29.040
or type down there in my validate function.

55
00:04:29.060 --> 00:04:31.780
So this is how these things work together.

56
00:04:32.150 --> 00:04:38.420
And with that we now safeties we start an invalid state as soon as I enter something it becomes valid

57
00:04:38.660 --> 00:04:41.450
but if it then empty does again it's invalid again.

58
00:04:41.450 --> 00:04:46.460
So now we have real validation here for this field which updates with every keystroke.

59
00:04:46.460 --> 00:04:48.440
And that's of course exactly what we want.

60
00:04:48.680 --> 00:04:52.430
But what we don't want probably is dead when we start here.

61
00:04:52.430 --> 00:04:56.990
So when I reload this page that it's marked in red or right from the start.

62
00:04:57.140 --> 00:05:02.510
Technically that is correct of course it is invalid but we want to give the user a chance of at least

63
00:05:02.510 --> 00:05:07.100
entering one character before we start throwing errors at him.

64
00:05:07.130 --> 00:05:13.430
So to do that we need to tweak our input component a bit more and lists not just 40 on change event

65
00:05:13.430 --> 00:05:21.050
here but also on the on blur event let's say on the input and also of course on the text area on blur

66
00:05:21.050 --> 00:05:27.140
is triggered when the user loses focus on the input element which means the user had to click into it

67
00:05:27.380 --> 00:05:28.790
and then clicked out of it.

68
00:05:28.910 --> 00:05:33.890
And that of course is a good indicator to us that the user had a chance to enter something valid and

69
00:05:33.890 --> 00:05:41.000
if it's 10 invalid after losing focus then we want to show an error now for that I'll add a new extra

70
00:05:41.000 --> 00:05:44.930
function near the touch handler and year.

71
00:05:44.960 --> 00:05:48.000
We would also get an event but I'm not interested in it.

72
00:05:48.050 --> 00:05:53.690
Instead here I want to dispatch a new action and it's a different action of course it's an action where

73
00:05:53.690 --> 00:05:55.880
I set the type to touch.

74
00:05:55.970 --> 00:06:00.480
I don't offer any other input because we need no operator input.

75
00:06:00.540 --> 00:06:04.030
So now here we can point at the touch handler.

76
00:06:04.080 --> 00:06:10.790
Also of course on a text area and we can now tweak our input reducer a bit in the input reducer.

77
00:06:10.800 --> 00:06:15.870
I now want to make sure that we handle this touch case.

78
00:06:16.230 --> 00:06:23.340
So there I want to return a state where I copy everything that's in there so that I don't lose the entered

79
00:06:23.340 --> 00:06:31.020
value for example but I update is touched to true is touched as a new field I add here and therefore

80
00:06:31.020 --> 00:06:37.910
I also want to add it on my initial state where is touched is set to false initially.

81
00:06:38.160 --> 00:06:44.430
So I set it to true once this blurs here and change I don't set it but with this command I copy everything

82
00:06:44.430 --> 00:06:48.240
from the existing state so we will have is touched the state as well.

83
00:06:48.270 --> 00:06:51.810
We just don't change it here in this action type.

84
00:06:51.810 --> 00:06:57.210
So now we do managed as extra information whether this has been touched or not and therefore now we

85
00:06:57.210 --> 00:07:05.610
can go down to our J is ex code and only add this invalid class if the input state is not valid and

86
00:07:06.120 --> 00:07:08.440
input state is touched as true.

87
00:07:08.490 --> 00:07:14.400
So if it's invalid and the input was touched so the user had a chance of changing it the same here for

88
00:07:14.400 --> 00:07:23.740
the error text only show it if input state is touched is true now if that does reloads and we see no

89
00:07:23.740 --> 00:07:29.110
error message initially if I click in there though and I don't enter anything valid and I click out

90
00:07:29.110 --> 00:07:30.420
of there we do see it.

91
00:07:30.520 --> 00:07:35.210
If I then enter something it goes away unless we really enter something invalid again.

92
00:07:35.320 --> 00:07:37.600
So this is now also working as it should.

93
00:07:37.630 --> 00:07:40.630
With that we got basic validation implemented.

94
00:07:40.630 --> 00:07:46.740
We're not passing the information about the validity and the entered value back to a new place though

95
00:07:46.940 --> 00:07:52.100
and we should do that because ultimately new place is where we need to gather all the input.

96
00:07:52.150 --> 00:07:58.450
Find out if the overall form is valid and then also submit a request to the back end later in the course

97
00:07:58.600 --> 00:08:00.420
to create a new place on a server.
