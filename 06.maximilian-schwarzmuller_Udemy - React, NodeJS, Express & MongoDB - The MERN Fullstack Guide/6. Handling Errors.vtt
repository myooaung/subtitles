WEBVTT
1
00:00:02.260 --> 00:00:07.690
At the moment if we don't find a place we simply return 200 response.

2
00:00:07.690 --> 00:00:14.380
For example for P2 with an empty object we could do that but I would argue it's not really a success

3
00:00:14.710 --> 00:00:22.730
which at 200 status code indicates though if we didn't find anything I would rather return a 404 error

4
00:00:22.810 --> 00:00:28.470
status code which means the request didn't find any data for Dad.

5
00:00:28.470 --> 00:00:35.840
Here we can check if not place so if Data's false see which would be the case if place is undefined

6
00:00:35.870 --> 00:00:42.560
which is the case if we don't find a place here then I don't want to return this response but instead

7
00:00:42.680 --> 00:00:46.450
a different response where we set a different status code.

8
00:00:46.850 --> 00:00:52.700
Now to set a status code we can call the status method on the response object by default as a set to

9
00:00:52.700 --> 00:00:53.390
200.

10
00:00:53.390 --> 00:01:00.050
So we don't need to call it if we want to set it to 200 but we can set to 404 for example which would

11
00:01:00.050 --> 00:01:07.820
be a standard status code for saying we didn't find anything for to give an input and then we can still

12
00:01:07.820 --> 00:01:14.050
call Jason to add some data and we should do that to then also send the request.

13
00:01:14.120 --> 00:01:22.010
And here we could add a message could not find a place for to provide that I.D. and that message could

14
00:01:22.010 --> 00:01:29.170
be presented to the user later in the front end or in the client where attaching to this API.

15
00:01:29.170 --> 00:01:34.280
Now one important note at the moment we would actually introduce a bug here because here I'm sending

16
00:01:34.280 --> 00:01:39.190
a response and this function execution of course doesn't stop there after.

17
00:01:39.200 --> 00:01:45.620
So this line is all the reached after this line executes so we would send a no response which is not

18
00:01:45.620 --> 00:01:53.000
possible and which would therefore cause an error to work around that we could ever wrap this response

19
00:01:53.000 --> 00:01:59.750
in the else block so that only one of the two code snippets executes or to save that extra code for

20
00:01:59.750 --> 00:02:07.940
defaults block simply return here Not because anyone's interested in the return value of calling Jason

21
00:02:08.240 --> 00:02:14.680
but simply because when we return no other code there often executes and that's exactly what I want.

22
00:02:14.720 --> 00:02:19.890
If we make it in year and we sent this response I don't want this code to execute.

23
00:02:20.000 --> 00:02:26.540
So returning here makes sense with that if we save this and we try to load a place with an idea that

24
00:02:26.540 --> 00:02:27.790
doesn't exist.

25
00:02:27.800 --> 00:02:34.130
You see I get this object with message could not find a place for to provided idea and we also see it's

26
00:02:34.160 --> 00:02:41.090
already marked as red here because we got a 400 from 4 status code and that's way better in my opinion.

27
00:02:41.190 --> 00:02:46.010
And of course I want to do something similar here in the other route.

28
00:02:46.040 --> 00:02:49.660
I also want to send this response here.

29
00:02:49.670 --> 00:02:52.930
If we're looking for a user I.D. which doesn't exist.

30
00:02:52.940 --> 00:03:02.380
So here I will say could not find a place 40 provided user I.D. If we now try this and search for user

31
00:03:02.380 --> 00:03:08.400
slash you too I get could not find a place for the provided user I.D. If I enter a valid I.D..

32
00:03:08.530 --> 00:03:12.960
It of course works the same for my place if I enter a valid I.D. here.

33
00:03:13.030 --> 00:03:14.500
It also works.

34
00:03:14.740 --> 00:03:20.240
Now that's nice but you can already tell that we're having some code duplication here.

35
00:03:20.290 --> 00:03:25.590
We have a very similar check and the way we sent the response is all the pretty equal.

36
00:03:25.600 --> 00:03:32.350
The only difference is the message so it would be nice to kind of find a different solution here to

37
00:03:32.350 --> 00:03:34.700
have less code duplication.

38
00:03:34.990 --> 00:03:42.170
And for that we can use a feature express J as has built in a default error handler.

39
00:03:42.220 --> 00:03:47.050
We set this up an app J.S. and we set it up as a middleware there.

40
00:03:47.140 --> 00:03:57.250
Here we simply add a middleware after our roots middleware and this middleware here doesn't need a path

41
00:03:57.310 --> 00:03:57.940
filter.

42
00:03:57.940 --> 00:04:00.850
Instead we directly at our middleware function.

43
00:04:00.880 --> 00:04:03.580
And now it's a special middleware function though.

44
00:04:03.850 --> 00:04:09.160
You know the middleware functions with free parameters request response and next.

45
00:04:09.190 --> 00:04:10.960
This is a middleware function.

46
00:04:10.960 --> 00:04:14.960
Express will apply on every incoming request.

47
00:04:15.010 --> 00:04:20.740
Now let's tweak does a little bit and let's add a fourth argument the fourth parameter which actually

48
00:04:20.740 --> 00:04:22.780
is our first parameter here.

49
00:04:22.780 --> 00:04:30.580
An error if you provide a middleware function that takes four parameters express J S will recognize

50
00:04:30.580 --> 00:04:37.130
this and treat this as a special middleware function as an error handling middleware function.

51
00:04:37.240 --> 00:04:45.190
That means that this function will only be executed on requests that have an error or attached to it.

52
00:04:45.190 --> 00:04:49.420
You could say so where an error was flown in the end.

53
00:04:49.420 --> 00:04:57.120
So this function to put it in other words will execute if any middleware in front of it yields an error.

54
00:04:57.400 --> 00:05:01.210
And then in here we can set up some default error handling code.

55
00:05:01.210 --> 00:05:06.550
First of all we should check if response headers sent is true.

56
00:05:06.550 --> 00:05:10.870
That means we check if a response has already been sent.

57
00:05:10.870 --> 00:05:17.230
If that's the case we want to return next and forward the error which means we won't send a response

58
00:05:17.230 --> 00:05:22.940
on our own because somehow we already did send a response that you can only send one response in total.

59
00:05:22.960 --> 00:05:29.410
This is a little help or property which helps you check if a response and the headers attached to it

60
00:05:29.680 --> 00:05:31.650
has already been sent.

61
00:05:31.840 --> 00:05:37.120
If not so if we make it past disabled check we know no response has been sent yet.

62
00:05:37.150 --> 00:05:39.940
And in this case I want to send one now.

63
00:05:39.940 --> 00:05:46.630
I want to set a status code on that response and I want to give the developer of this application so

64
00:05:46.720 --> 00:05:53.740
us in this case a chance of setting that code on the error object which is thrown in one of the other

65
00:05:53.740 --> 00:05:59.650
middleware as we're not doing this right now but we're doing it soon so we'll check if all the error

66
00:05:59.740 --> 00:06:06.320
object I'm getting here if we have a code property and if data's not on the fine.

67
00:06:06.580 --> 00:06:13.600
If we don't have it I'll fall back to 500 as a default status code of 500 code indicates that something

68
00:06:13.600 --> 00:06:20.800
went wrong on the server so eager does a set or if it's false it this value will be used this is default

69
00:06:20.830 --> 00:06:24.630
javascript code and they're after all call Jason.

70
00:06:24.820 --> 00:06:29.110
We could all use the changing syntax I used before to chain it right here.

71
00:06:29.110 --> 00:06:34.090
It's up to you here a structured across multiple lines to make it a little bit more readable.

72
00:06:34.330 --> 00:06:40.870
And there I want to add a object which has a message property because every error I've sent back from

73
00:06:40.870 --> 00:06:48.730
my API I should have a message property which the attached client can then use to show an error message

74
00:06:48.730 --> 00:06:50.320
to their users.

75
00:06:50.380 --> 00:06:56.890
That's not a must to do but it's a convention you'll see a lot in our rest api is out there and it is

76
00:06:56.890 --> 00:07:01.870
a convention that makes a lot of sense in which I think Dale four should be added to our application

77
00:07:01.870 --> 00:07:02.400
as well.

78
00:07:03.130 --> 00:07:09.880
And here again I want to check if I have a message on the error object which I will use and sent back.

79
00:07:09.880 --> 00:07:17.980
If we do have it and otherwise provide a generic default message of an unknown error occurred and we'll

80
00:07:17.980 --> 00:07:25.150
only use that if there is no message property or an undefined invalid faulty value in the message property

81
00:07:25.480 --> 00:07:27.830
of the error object.

82
00:07:27.920 --> 00:07:30.090
Now that's our error handling middleware.

83
00:07:30.310 --> 00:07:31.890
How do we trigger it.

84
00:07:31.900 --> 00:07:40.330
We trigger it by doing one of two things either here instead of for turning a response we never do that

85
00:07:40.630 --> 00:07:48.450
either we throw a new error here or we call next and pass an error queue it both works.

86
00:07:48.460 --> 00:07:54.340
There is one important difference if you would be in some asynchronous code here which I'm not here

87
00:07:54.340 --> 00:07:58.630
at the moment but which we later will be when we work with the database.

88
00:07:58.870 --> 00:08:03.970
Then you have to use the next and past the error object approach.

89
00:08:03.970 --> 00:08:09.460
If you're in a synchronous middleware as I'm currently here because we have only synchronous actions

90
00:08:09.880 --> 00:08:12.160
then you can all just throw an error.

91
00:08:12.250 --> 00:08:14.320
I'll implement both one and each function.

92
00:08:14.320 --> 00:08:20.830
So did you see both later will only work with next error because we will work with asynchronous code

93
00:08:21.750 --> 00:08:23.400
for the moment we're not doing that.

94
00:08:23.400 --> 00:08:30.620
So first of all let me create an error here though I will create a new error object and that already

95
00:08:30.620 --> 00:08:32.810
takes a message in its constructor.

96
00:08:32.810 --> 00:08:43.140
And here I'll say could not find plays for the provided I.D. on that air object I'll add a code property

97
00:08:43.380 --> 00:08:49.740
with the daughter of simply dynamically adding that property because here in aptly S.A. error handling

98
00:08:49.740 --> 00:08:56.730
middleware I'm looking for such a code property and I'll set it to 404 so that this will be the actual

99
00:08:56.730 --> 00:09:01.150
status code which our error handling middleware will send back.

100
00:09:01.170 --> 00:09:06.360
And then I can throw that error and this will trigger the error handling middleware.

101
00:09:06.360 --> 00:09:09.560
Now let's copy that here.

102
00:09:10.660 --> 00:09:19.750
To get second root and there I will not throw it but call next to forwarded to the next middleware in

103
00:09:19.750 --> 00:09:25.570
line and since I have forward an error it will reach the next error handling middleware in line and

104
00:09:25.570 --> 00:09:33.490
there I will say I could not find a place for the provided user I.D. If we now save that and we try

105
00:09:33.490 --> 00:09:36.410
and get a player's I.D. which doesn't exist.

106
00:09:36.430 --> 00:09:42.050
You see I get the same object as before and the same response with a 404 status code.

107
00:09:42.160 --> 00:09:43.810
So that works as before.

108
00:09:43.930 --> 00:09:49.470
But technically on the backend it now works in a cleaner in a better way.

109
00:09:49.480 --> 00:09:54.090
Now what you can all tell however is for user you to.

110
00:09:54.280 --> 00:09:55.600
It does not work.

111
00:09:55.600 --> 00:09:59.650
So using next error does not do the trick here.

112
00:09:59.650 --> 00:10:01.980
Well the reason is that I don't return.

113
00:10:02.170 --> 00:10:04.660
So that means this code also is still executed.

114
00:10:04.660 --> 00:10:09.540
That's also why we have an error here on the backend because more than one response was sent.

115
00:10:09.640 --> 00:10:14.400
As I mentioned you shouldn't do that so you must not forget to return here when throwing an error.

116
00:10:14.410 --> 00:10:20.710
You don't have to return because if you use fro that already cancels the function execution next does

117
00:10:20.710 --> 00:10:21.850
not cancel it.

118
00:10:21.850 --> 00:10:26.060
So we have to return to off to make sure this code doesn't run.

119
00:10:26.290 --> 00:10:32.770
And with Dad if we now search for it and felt invalid user I.D. we also can get our default response

120
00:10:34.200 --> 00:10:35.120
that works.

121
00:10:35.130 --> 00:10:43.410
But still we have some code duplication here in these lines so we can maybe optimized is even more if

122
00:10:43.410 --> 00:10:47.280
we start adding our own error model.

123
00:10:47.370 --> 00:10:49.530
Let's do that in the next lecture.
