1
00:00:02,050 --> 00:00:06,590
WE'RE DONE WITH THE PLACES WITH THE RIGHT orange roots here.

2
00:00:06,670 --> 00:00:12,520
We haven't even touched the user roots so time to change that and as always it's all the great practice

3
00:00:12,520 --> 00:00:19,030
for a you register all these user routes make sure that you can get there from inside your root app

4
00:00:19,030 --> 00:00:26,190
J.S. file and simply add some dummy logic sent back some dummy response in all these routes and they're

5
00:00:26,230 --> 00:00:27,800
mapped respective middleware.

6
00:00:27,820 --> 00:00:33,130
Now of course after a short pause but you have to pass the video to try it on your own will then do

7
00:00:33,130 --> 00:00:36,090
it together.

8
00:00:36,230 --> 00:00:38,250
So where are you successful.

9
00:00:38,270 --> 00:00:44,150
Let's go to users roots chess and let's make sure we set up a routing there for that we can actually

10
00:00:44,150 --> 00:00:50,110
copy the code from places routes and move it in there so that we import and set up the router.

11
00:00:50,300 --> 00:00:58,580
But of course here we will need the user's controller which we require from the users dash controllers

12
00:00:58,670 --> 00:01:03,430
file and the controllers folder and we'll have different routes.

13
00:01:03,500 --> 00:01:06,360
We will have a get route to slash nothing.

14
00:01:06,470 --> 00:01:09,020
And that's all what we plan on the slide earlier.

15
00:01:09,500 --> 00:01:14,000
And there we will probably have some middleware function which we haven't created yet.

16
00:01:14,000 --> 00:01:20,580
So we'll leave it as empty for the moment will not have a second get root but we'll have two more post

17
00:01:20,580 --> 00:01:27,040
routes one post route which should be slash sign up which will later be triggered when a user sends

18
00:01:27,040 --> 00:01:33,190
his sign up data and one is post log in when a user does not sign up.

19
00:01:33,190 --> 00:01:38,700
Which means create a new user but instead tries to log in on an existing user.

20
00:01:38,860 --> 00:01:40,000
These are our roots.

21
00:01:40,000 --> 00:01:43,720
Now we need to middleware is for that the middleware functions for dead.

22
00:01:43,720 --> 00:01:51,760
So here in the user's controller I'll add a new middleware function here which I'll name get users and

23
00:01:51,760 --> 00:01:56,200
that's a normal function request responds next and looks like this.

24
00:01:56,440 --> 00:02:04,630
Then I have to sign up a function request response next and I have to log in.

25
00:02:04,640 --> 00:02:08,110
Function request response next.

26
00:02:08,290 --> 00:02:09,810
Like this.

27
00:02:09,970 --> 00:02:15,000
Now all three functions need to be exported to solve use stat multiple things.

28
00:02:15,010 --> 00:02:18,780
Export I showed you earlier with exports dropped.

29
00:02:19,000 --> 00:02:21,460
Get users exports stopped.

30
00:02:21,520 --> 00:02:28,110
Sign up pointing at the sign up function and exports dot log in pointing at the log in function.

31
00:02:28,120 --> 00:02:33,010
Now all these things are exported from the controller and back into users routes.

32
00:02:33,010 --> 00:02:35,870
We can now reference these export functions.

33
00:02:35,950 --> 00:02:40,710
So here users controller get users here.

34
00:02:40,930 --> 00:02:44,550
Users controller dot sign up.

35
00:02:45,860 --> 00:02:55,050
And here users controller dot log in pointing at these functions now back in the user's controller we

36
00:02:55,050 --> 00:03:02,130
can now add some dummy logic and for the moment that means I'll also add some dummy users here simply

37
00:03:02,130 --> 00:03:03,540
again an array.

38
00:03:03,570 --> 00:03:10,860
Here it can be a constant because we'll never replace it with a new array and then we could add a user

39
00:03:10,930 --> 00:03:16,380
let's say a user has an I.D. a user has a name Max Schwartz.

40
00:03:16,380 --> 00:03:24,150
In my case here not my full name but good enough a user has a email test at tests dot com and a user

41
00:03:24,150 --> 00:03:31,680
has a password which will later byte away hash to make it non plain text but for the moment I'll go

42
00:03:31,680 --> 00:03:35,190
with a plain text password in our dummy data here.

43
00:03:35,220 --> 00:03:38,970
That's it for the moment now and get users.

44
00:03:38,970 --> 00:03:41,630
I want to return that array of users.

45
00:03:41,700 --> 00:03:48,260
So here we can send back a response status code 200 which we therefore actually don't need to set.

46
00:03:48,270 --> 00:03:51,160
We can do it won't be a problem but we don't have to.

47
00:03:51,300 --> 00:03:55,070
We can just send back our response where we have our users and there.

48
00:03:55,080 --> 00:03:58,680
I simply sent back all my dummy users simple step.

49
00:03:58,710 --> 00:04:04,160
So it's a very simple middleware function of course but it does what it needs to do for a sign of a

50
00:04:04,160 --> 00:04:05,670
want to create a new user.

51
00:04:05,670 --> 00:04:13,800
So I will extract data from the incoming request body and the data I get there is the the user name

52
00:04:14,890 --> 00:04:17,960
the email and the password.

53
00:04:18,080 --> 00:04:20,130
Lets me just go with name here.

54
00:04:20,140 --> 00:04:23,170
But you can expect any field you want of course.

55
00:04:23,290 --> 00:04:30,380
And then here I'll create my new user created user so new object I.D. can be generated with Dad you

56
00:04:30,380 --> 00:04:33,140
you I.D. package we installed earlier.

57
00:04:33,160 --> 00:04:37,570
Let's just make sure we import it here if we want to use it in that file.

58
00:04:37,570 --> 00:04:44,590
So const you requires you use flash before and then we can execute you you idea as a function to generate

59
00:04:44,620 --> 00:04:51,670
a unique idea and then name email and password are all stored in equally named properties.

60
00:04:51,670 --> 00:04:56,860
Which is why we can always use this shortcut which then behind the scenes is expanded to this which

61
00:04:56,860 --> 00:04:57,850
you could also write.

62
00:04:57,910 --> 00:05:04,990
Alternatively of course then I want to add that user to my dummy users heater with push.

63
00:05:05,200 --> 00:05:13,350
We can do that and then sent back a response where the status code is actually 201 because we created

64
00:05:13,350 --> 00:05:20,700
new data and where I then stored that created user in a user property of the object which is added to

65
00:05:20,700 --> 00:05:22,140
the response.

66
00:05:22,470 --> 00:05:28,260
Now for a log in I want to extract data from the body as well.

67
00:05:28,320 --> 00:05:31,020
It's a post request so it will have a body.

68
00:05:31,020 --> 00:05:37,830
I expect to get the email and password there and here I simply want to search if we have a user with

69
00:05:37,860 --> 00:05:41,040
that email in our array and if we do.

70
00:05:41,040 --> 00:05:43,770
If that password is equal to the password we get here.

71
00:05:43,770 --> 00:05:50,160
This is not our final authentication logic will refine and harden that in the authentication module

72
00:05:50,400 --> 00:05:56,850
but for the moment it's good enough dummy code so here I will have my identified user.

73
00:05:57,040 --> 00:06:04,130
You can of course named constant however you want by going to my dummy users and finding a user where

74
00:06:04,130 --> 00:06:11,880
the email property holds a value equal to the email I'm getting in my request body and if I do find

75
00:06:11,880 --> 00:06:19,680
that user so if identified user is truth I can continue or put in other words if it's false see I want

76
00:06:19,680 --> 00:06:29,550
to return an error so I will import my own age to the error class by requiring it from the models folder

77
00:06:29,550 --> 00:06:36,250
like this and then we can create an error here and throw it so fro New Age.

78
00:06:36,260 --> 00:06:47,190
The error could not identify user credentials seem to be wrong and the status code here is four hundred

79
00:06:47,310 --> 00:06:55,180
and one which means that all indication failed if we make it past as a check we know we found a user

80
00:06:55,240 --> 00:06:57,790
but we haven't validated D password yet.

81
00:06:57,790 --> 00:07:05,680
So let's check if identified user password is equal to password which we extract from the body or actually

82
00:07:05,790 --> 00:07:08,280
grab scrapped as and combine it with this check.

83
00:07:08,440 --> 00:07:16,360
If we don't find an identified user or if we do find one but the password is not equal to the password

84
00:07:16,360 --> 00:07:20,270
we got in the body then we want to return this error.

85
00:07:20,340 --> 00:07:27,640
Ivor why is if you make it past this check we know we do have a valid user and then I want to return

86
00:07:28,120 --> 00:07:34,070
a response where for the moment I will just have a message phrase say locked in.

87
00:07:34,090 --> 00:07:41,060
Of course later we'll send back more data than just this text but for the moment this will do and I'd

88
00:07:41,060 --> 00:07:42,910
say that's good enough.

89
00:07:42,920 --> 00:07:48,250
Dummy code for all user routes let's give them a try to try them.

90
00:07:48,290 --> 00:07:53,780
We have to make sure we can actually reach the routes we set up in the users routes file though and

91
00:07:53,780 --> 00:08:00,260
at the moment this would not be the case because you must never forget that initially you start your

92
00:08:00,260 --> 00:08:08,930
server by executing the app J.S. file and only what's set up there will work in the running server and

93
00:08:08,930 --> 00:08:13,350
there I do for example register my places routes as middleware.

94
00:08:13,490 --> 00:08:17,440
I don't do it for the users routes at least not yet.

95
00:08:17,510 --> 00:08:19,370
So that's what we have to change.

96
00:08:19,370 --> 00:08:27,190
We should add a new import here and import the users the routes by requiring them from the routes folder

97
00:08:27,490 --> 00:08:31,410
users routes and then register them as a middleware.

98
00:08:31,450 --> 00:08:40,540
So here right below or right above the places routes doesn't matter I'll filter for API slash users

99
00:08:40,990 --> 00:08:47,080
and forward any requests where the path starts with debt to my users routes and now we can actually

100
00:08:47,080 --> 00:08:54,280
reached these routes at least that was the hope we have an error cannot find controller users controllers.

101
00:08:54,290 --> 00:08:58,940
Yeah I need to add a s here at the end of my file that was missing.

102
00:08:59,160 --> 00:09:05,550
Now it restarts and it works and now with that let's go back to postman.

103
00:09:05,560 --> 00:09:09,080
Let's first of all send a get request to get all users.

104
00:09:09,100 --> 00:09:18,510
So here I'll send the request to local host 5000 slash API slash users if I do that I get my users array

105
00:09:18,520 --> 00:09:20,220
here with the one user I got.

106
00:09:20,260 --> 00:09:21,550
So that's looking good.

107
00:09:21,550 --> 00:09:30,520
Let's now try to sign up for Dad all at post request and I'll send the request to local hosted five

108
00:09:30,520 --> 00:09:34,180
thousand slash API slash users.

109
00:09:34,180 --> 00:09:36,700
Now here we need to attach a body.

110
00:09:36,700 --> 00:09:44,710
So let's go to Body raw Jason and attach some Jason data now to sign up a new user.

111
00:09:44,710 --> 00:09:51,180
We need to add a name email and a password because data is what we're extracting from the incoming request.

112
00:09:51,220 --> 00:10:04,030
So here I'll add a name menu email test to at test dot com and also a password testing if we had sent

113
00:10:04,040 --> 00:10:05,870
here let's see it works.

114
00:10:05,870 --> 00:10:11,560
Could not find this route Yeah because it should be slash sign up of course.

115
00:10:11,560 --> 00:10:13,750
Not just slash users.

116
00:10:13,750 --> 00:10:14,850
Yeah this looks better.

117
00:10:14,860 --> 00:10:16,740
Manual was created.

118
00:10:16,780 --> 00:10:18,270
Let's now try logging in.

119
00:10:20,030 --> 00:10:27,020
By sending a request to local host five 5000 slash API slash users slash log in here we all need to

120
00:10:27,020 --> 00:10:34,510
edit a body Jason body of course and there we just need to provide an email and the password.

121
00:10:34,550 --> 00:10:40,790
So first of all all provide a valid combination testers.

122
00:10:40,800 --> 00:10:43,050
This is the combination for this user.

123
00:10:43,110 --> 00:10:49,860
Email is test at test dot com password is testers Data's what I am providing here should be a post request

124
00:10:49,860 --> 00:10:55,350
though not a get request and then click send and I get locked in.

125
00:10:55,350 --> 00:11:02,150
Now let's try invalid combination for example an email address which doesn't exist or the e-mail address

126
00:11:02,160 --> 00:11:09,240
test 2 which I just created but where the password is wrong because here I create it testing as a password

127
00:11:09,510 --> 00:11:17,640
not testers and this also fails if I enter testing though here it should succeed and address.

128
00:11:18,570 --> 00:11:19,360
So now it works.

129
00:11:19,360 --> 00:11:24,870
There's just one tweak which we could add we want to make sure we're not able to create a user which

130
00:11:24,870 --> 00:11:25,690
we already have.

131
00:11:25,710 --> 00:11:29,470
So an email address shouldn't be registered more than once.

132
00:11:29,490 --> 00:11:35,370
So here in the sign up middleware function I'll actually check if we can find a user with that email

133
00:11:35,370 --> 00:11:35,900
address.

134
00:11:37,110 --> 00:11:46,150
So has user can be found by using dummy users and then there I'll find a user where user email is equal

135
00:11:46,150 --> 00:11:48,770
to the email that was attached to the request.

136
00:11:49,060 --> 00:11:55,160
And if that is true the which it only is if we found a user then I know we already have such a user.

137
00:11:55,300 --> 00:12:04,880
In that case I want to throw a new H to the p error where I say could not create user email already

138
00:12:05,660 --> 00:12:16,470
exists and I'll add a status code of 422 which we typically use for invalid user input so if we now

139
00:12:16,470 --> 00:12:24,060
try this and I try to create a user by sending a requested a sign about which already exists.

140
00:12:24,060 --> 00:12:27,110
So for example test at test dot com is hardcoded.

141
00:12:27,180 --> 00:12:29,520
It exists even after a server restart.

142
00:12:30,770 --> 00:12:34,240
I get this error if I try a test to it test dot com.

143
00:12:34,250 --> 00:12:37,280
And remember that the server restarted because of that change.

144
00:12:37,370 --> 00:12:40,120
So our previous changes are lost.

145
00:12:40,220 --> 00:12:44,790
It therefore works if I now try it again though often worked one time.

146
00:12:44,820 --> 00:12:47,810
I of course fails because now it is user exists.

147
00:12:48,020 --> 00:12:49,160
So this is looking great.

148
00:12:49,160 --> 00:12:59,030
We got the dummy user routing and logic in place and with that we implemented every route every API

149
00:12:59,120 --> 00:13:04,190
endpoint that's listed here on that slide where we planned our API.

150
00:13:04,310 --> 00:13:11,410
Now therefore we're almost done but there is one thing which I really don't like at the moment and that

151
00:13:11,410 --> 00:13:13,870
is that we don't validate incoming data.

152
00:13:13,870 --> 00:13:19,720
For example when we create a new place we don't check whether we do have a tile whether that's not empty

153
00:13:19,720 --> 00:13:21,820
ends on that something which should change.
