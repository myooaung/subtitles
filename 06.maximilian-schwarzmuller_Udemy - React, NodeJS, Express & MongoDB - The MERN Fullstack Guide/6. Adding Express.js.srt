1
00:00:02,110 --> 00:00:09,190
Express is a library for no chase and thus far we have a note project where we're only able to use node

2
00:00:09,220 --> 00:00:13,150
core modules to add third party library.

3
00:00:13,150 --> 00:00:14,810
We need to convert this to.

4
00:00:14,980 --> 00:00:22,690
You could say manage project for this let me quit D server here and now let's use NPM a tool which was

5
00:00:22,780 --> 00:00:27,370
all installed to gather with node J.S. NPM stands for node.

6
00:00:27,370 --> 00:00:33,830
Package manager and indeed it is a tool for managing packages for node applications.

7
00:00:33,850 --> 00:00:38,590
So for adding third party libraries you could say actually you will later see in the course that we

8
00:00:38,590 --> 00:00:40,020
don't just use it in node apps.

9
00:00:40,030 --> 00:00:45,910
We can all use it in front of the apps and the reactive but for the moment let's focus on Node now to

10
00:00:45,910 --> 00:00:48,370
use NPM to install packages here.

11
00:00:48,370 --> 00:00:54,260
We first of all need to convert this year to a managed project and we do so by running NPM in it.

12
00:00:54,280 --> 00:00:59,410
Now we're ask a couple of questions with that and you can simply hit Enter everywhere to just confirm

13
00:00:59,410 --> 00:01:04,200
this and once you're done with all these questions you get a package done.

14
00:01:04,220 --> 00:01:10,940
Jason File does hold some general configuration which is all fine but more importantly dismal store

15
00:01:11,060 --> 00:01:12,050
all dependencies.

16
00:01:12,050 --> 00:01:19,190
We will install and to install a dependency in this project folder we run npm install then the name

17
00:01:19,190 --> 00:01:25,550
of the dependency in our case Express is the name just expressed like this and then also here dash dash

18
00:01:25,610 --> 00:01:26,310
save.

19
00:01:26,360 --> 00:01:34,250
This will tell NPM which kind of dependency does this dash dash save for core app dependency which we

20
00:01:34,250 --> 00:01:37,730
use in our application code or dash dash save Dash.

21
00:01:37,730 --> 00:01:43,010
Def if it's a development only dependency so some tool which helps us during development but which we

22
00:01:43,010 --> 00:01:44,720
don't need thereafter.

23
00:01:44,720 --> 00:01:49,370
So here it stashed Ash safe because Express will make up a core part of our application.

24
00:01:49,370 --> 00:01:55,260
And here I actually get an error that I can't install a package under a package which is already named

25
00:01:55,280 --> 00:02:01,380
Express and indeed here the name was express let's renamed as to node express in the package.

26
00:02:01,400 --> 00:02:04,340
Jason File and repeat does npm install command.

27
00:02:04,340 --> 00:02:10,190
And now it will go ahead and add this Express dependency to this project to be precise it will do two

28
00:02:10,190 --> 00:02:10,960
things.

29
00:02:11,090 --> 00:02:17,510
It added this dependencies enter here and packaged up Jason and added the node modules folder in that

30
00:02:17,510 --> 00:02:23,760
folder you'll find the Express package under E but you'll also find a lot of other packages.

31
00:02:23,780 --> 00:02:28,190
These are dependencies of Express and dependencies of dependencies.

32
00:02:28,190 --> 00:02:33,740
Notice folder can get quite big so whenever you share your project with someone else it's quite common

33
00:02:33,740 --> 00:02:38,100
to actually delete the node modules folder so that only your code falls out there.

34
00:02:38,210 --> 00:02:43,460
And now to recreate it because you have these entries and package stored Jason you can just run npm

35
00:02:43,460 --> 00:02:48,170
install and it will go ahead and install all the dependencies with the words that are mentioned here

36
00:02:48,530 --> 00:02:50,060
into your folder.

37
00:02:50,120 --> 00:02:53,800
It will recreate the node modules folder data for here at this.

38
00:02:53,900 --> 00:02:55,950
So now we get express installed.

39
00:02:55,970 --> 00:02:58,910
How can we utilize Express.

40
00:02:59,030 --> 00:03:02,020
Well we can utilize express to simplify it.

41
00:03:02,030 --> 00:03:08,330
This is listening to incoming requests and doing different things for different types of requests because

42
00:03:08,330 --> 00:03:13,430
besides parsing that data which is cumbersome it's also cumbersome that we have to check the method

43
00:03:13,430 --> 00:03:14,210
like this.

44
00:03:14,210 --> 00:03:18,680
If we have more and more methods and even more and more different you are L's which we want to check

45
00:03:18,890 --> 00:03:25,220
we have to add more and more if statements to the single request listener which we have not ideal.

46
00:03:25,220 --> 00:03:30,970
So let's actually get rid of all that so that we have an empty ashtray as polygon.

47
00:03:31,100 --> 00:03:39,510
And let's use Express for that here I require Express just as before I just specified a name here.

48
00:03:39,520 --> 00:03:44,650
This is not a core module but the installed module I required by the name of the module in this case

49
00:03:44,650 --> 00:03:45,190
Express.

50
00:03:45,820 --> 00:03:50,990
And now this thing which we get here and express constant turns out to be a function.

51
00:03:51,070 --> 00:03:55,540
You'll learn things like Dad and the official docs of packages in this case and the official box of

52
00:03:55,540 --> 00:03:56,960
Express.

53
00:03:57,040 --> 00:04:03,520
This function will give give us app object so we'll call express as a function and store the result

54
00:04:03,550 --> 00:04:07,890
which is a reg object full of functionalities and features in this app.

55
00:04:07,890 --> 00:04:13,330
Constant one feature which you have here is again a listen method.

56
00:04:13,330 --> 00:04:16,350
So here I will again specify a port five thousand.

57
00:04:16,540 --> 00:04:19,450
What we don't have to do here is call create server.

58
00:04:19,450 --> 00:04:25,420
Express will do that under the hood and basically expose that server object enriched with a lot of other

59
00:04:25,420 --> 00:04:29,440
functionalities on this app which I'm storing here.

60
00:04:29,590 --> 00:04:35,290
So now with that we could execute the file again and have a running server but of course one which doesn't

61
00:04:35,290 --> 00:04:43,870
do much now to handle our get root when I just enter low close 5000 like this which currently is not

62
00:04:43,910 --> 00:04:50,590
supported because I have no roots or no supported requests at all here to handle that we have to register

63
00:04:50,590 --> 00:04:58,600
as so-called middleware here and express chase because Express has one core philosophy which is basically

64
00:04:58,600 --> 00:05:06,070
that every incoming request is funneled through a bunch of middleware functions normal functions in

65
00:05:06,070 --> 00:05:13,240
the end which are able to get data out of the request or manipulate the request even and also manipulate

66
00:05:13,240 --> 00:05:15,810
the response and eventually send it back.

67
00:05:15,820 --> 00:05:21,010
That's the idea behind express you have a bunch of functions which can be called on incoming requests

68
00:05:21,280 --> 00:05:26,020
and every function can do something with this incoming requests or with this response which is about

69
00:05:26,020 --> 00:05:26,950
to be sent.

70
00:05:27,100 --> 00:05:30,760
You can only send one response per request though.

71
00:05:30,760 --> 00:05:36,730
Now Middleware is registered by calling the use method on app use is a method provided by the Express

72
00:05:36,730 --> 00:05:39,220
library on this apt object.

73
00:05:39,460 --> 00:05:43,490
In its simplest form this takes a function of function.

74
00:05:43,510 --> 00:05:49,750
Here I'm using a general function which takes free parameters a request object which is the incoming

75
00:05:49,750 --> 00:05:50,620
request.

76
00:05:50,620 --> 00:05:56,650
Basically I object similar to what we got with vanilla notorious but it is an object enriched with some

77
00:05:56,680 --> 00:05:58,180
extra data.

78
00:05:58,410 --> 00:06:05,380
A response object although similar to what we had in the plain vanilla note app but again enriched with

79
00:06:05,470 --> 00:06:07,030
extra functionalities.

80
00:06:07,210 --> 00:06:09,640
And the third parameter is a new one.

81
00:06:09,640 --> 00:06:16,150
This is a next function which you call if you don't want to send the response it is middleware but instead

82
00:06:16,150 --> 00:06:19,930
you want to forward the request to the next middleware in line.

83
00:06:19,990 --> 00:06:26,830
If you're not calling next then any middleware after dissimilar where if we had more than one will not

84
00:06:26,830 --> 00:06:28,420
be reached by this request.

85
00:06:28,570 --> 00:06:35,500
So you should always call next unless you are in the middle where where you want to send back a response

86
00:06:35,560 --> 00:06:38,260
since you may only send one response anyways.

87
00:06:38,260 --> 00:06:44,900
There is no need to execute any other Middleware is there after so here we could create a middleware

88
00:06:45,230 --> 00:06:51,680
which sends back a response and here we have a send method actually where we can have our body where

89
00:06:51,680 --> 00:06:54,420
I now again want to render that forum.

90
00:06:54,470 --> 00:07:01,930
So on that forum where that method of post and then in there where the input of type text with a name

91
00:07:03,760 --> 00:07:13,390
of user name and we had a button opening and closing tags where we had create user and that button was

92
00:07:13,390 --> 00:07:14,230
of type.

93
00:07:14,230 --> 00:07:16,750
Submit that's the setup we had before.

94
00:07:16,780 --> 00:07:25,950
Now we have it again with that if we now save this and we execute this file again and I go to locals

95
00:07:26,000 --> 00:07:29,690
5000 again we see that firm which is great.

96
00:07:29,690 --> 00:07:36,380
Now that forum is of course nice to have but it would also be nice if we now could do something useful

97
00:07:36,380 --> 00:07:39,330
with the post request for that.

98
00:07:39,340 --> 00:07:46,240
Let's add another middleware a middleware which is also reached and I will copy that middleware function

99
00:07:46,520 --> 00:07:52,630
and for the moment I'll just console log middleware here and then call next.

100
00:07:52,630 --> 00:07:58,030
So that this middleware does not send back a response but does something in this case just log something

101
00:07:58,390 --> 00:08:02,230
and then forwards the request to the next middleware in line.

102
00:08:02,230 --> 00:08:05,500
Let's restart the server by quitting it and restarting.

103
00:08:05,500 --> 00:08:11,290
And if we now centers request again you will see middleware here by the way.

104
00:08:11,290 --> 00:08:18,250
You could also see this twice here if the browser is by default also requesting fav icon which my browser

105
00:08:18,250 --> 00:08:19,730
is not here at this point.

106
00:08:19,870 --> 00:08:24,790
Then this fav I can request would also go for the middle where you can just ignore it otherwise you

107
00:08:24,790 --> 00:08:27,890
will just see one middleware log here.

108
00:08:27,910 --> 00:08:31,100
So now we have that extra middleware but this doesn't do anything.

109
00:08:31,300 --> 00:08:33,230
Well what could we do in here.

110
00:08:33,280 --> 00:08:38,450
We could parse our request body for that.

111
00:08:38,490 --> 00:08:44,420
We could bring back what we had before our on listener where we get our chunks of data.

112
00:08:45,370 --> 00:08:49,370
Then here we have the body which is an empty string initially.

113
00:08:49,510 --> 00:08:58,360
Then we basically append our chunks of data there and we also have the end listener here which executes

114
00:08:58,390 --> 00:09:07,750
when we are done passing the incoming requests body and in later I can get my user name by calling bodies

115
00:09:07,750 --> 00:09:12,160
split on the equals sign and extracting the second element.

116
00:09:12,310 --> 00:09:18,010
And now I want to add a request body field and I'll do this just with the dot notation on the request

117
00:09:18,010 --> 00:09:24,130
object all dynamically add a body property and set this to an object where I set the name key to my

118
00:09:24,130 --> 00:09:27,820
extract that the user name and the year after I call next.

119
00:09:27,820 --> 00:09:31,370
Please note that I call next instead of the end handler.

120
00:09:31,440 --> 00:09:37,900
So did we only commence to the next middleware if we're done passing to incoming requests data and not

121
00:09:37,990 --> 00:09:39,580
earlier.

122
00:09:39,580 --> 00:09:46,570
So now we go on to the next middleware in line and in that next middleware the request bodies should

123
00:09:46,570 --> 00:09:47,710
be available.

124
00:09:47,860 --> 00:09:54,280
So in that second middleware let's check if request body is a thing if that is set and if it is set

125
00:09:54,340 --> 00:10:00,970
I will return response send returns so that the code thereafter doesn't execute because I either one

126
00:10:00,970 --> 00:10:03,430
or sent this response or sent that.

127
00:10:03,790 --> 00:10:08,650
Alternatively we could wrap this into a else block but we don't need to do that if we simply return

128
00:10:08,650 --> 00:10:16,960
here and here I want to have my age one tag then output request body dot name dot name is the property

129
00:10:16,960 --> 00:10:26,220
where I'm storing the user name and then Carlos De age 1 tech if we do this let's restart the server

130
00:10:27,570 --> 00:10:35,010
go to this page again hit enter and get undefined so that does not work why does it not work.

131
00:10:36,390 --> 00:10:41,850
Because I'm always setting request body even if we're handling a normal get request which has no attached

132
00:10:41,850 --> 00:10:48,900
data this end event listener will fire so request body will always be set and this case just to an object

133
00:10:48,930 --> 00:10:57,390
where name holds undefined as a value so I will tweak this and check if user name is a thing if this

134
00:10:57,390 --> 00:11:06,290
is true for you and only said request body if it is a thing now let's restart again hit enter again

135
00:11:06,290 --> 00:11:11,650
and we see the form let's enter menu create a user and we see that here.

136
00:11:11,690 --> 00:11:18,200
So now we're doing the same as before but with express some things maybe got a bit easier but overall

137
00:11:18,200 --> 00:11:24,340
we didn't gain much mostly because we still manually have to pass the data here right and we still need

138
00:11:24,340 --> 00:11:28,220
to check to see which kind of response we want to send.

139
00:11:28,250 --> 00:11:32,570
So these are two things we want to improve and actually there is a third thing.

140
00:11:32,570 --> 00:11:35,920
Always having to restart that server that's annoying.

141
00:11:36,080 --> 00:11:37,340
Let's get rid of that to.
